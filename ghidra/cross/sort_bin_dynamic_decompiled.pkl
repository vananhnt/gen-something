(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0061a278)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0061a278]\n'
p4
S'ff 25 e2 79 21 00\n'
p5
S'.plt:0000000000402890\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_00414b2b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x40f807;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x40f888;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40f91c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x0040f698\nMOV EDX,0x414b18\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00402a70\nJMP 0x0040f6ad\nMOV EDX,0x414b24\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00402a70\nXOR EDI,EDI\nMOV ESI,0x414b2b\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x414e00\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00402a70\nXOR EDI,EDI\nMOV ESI,0x414b2f\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00402730\nCMP R12,0x9\nJA 0x0040f736\nJMP qword ptr [0x414ac8 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x414bfa\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402a70\nXOR EDI,EDI\nMOV ESI,0x414d39\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00402a70\nADD RSP,0x38\nJMP 0x0040f9a7\nXOR EDI,EDI\nMOV ESI,0x414c0a\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402a70\nXOR EDI,EDI\nMOV ESI,0x414c21\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402a70\nXOR EDI,EDI\nMOV ESI,0x414c3d\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00402a70\nADD RSP,0x18\nJMP 0x0040f9a7\nXOR EDI,EDI\nMOV ESI,0x414c5d\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00402a70\nADD RSP,0x18\nJMP 0x0040f9a7\nXOR EDI,EDI\nMOV ESI,0x414c81\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00402a70\nADD RSP,0x28\nJMP 0x0040f9a7\nXOR EDI,EDI\nMOV ESI,0x414ca9\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00402a70\nADD RSP,0x28\nJMP 0x0040f9a7\nXOR EDI,EDI\nMOV ESI,0x414cd5\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00402a70\nADD RSP,0x38\nJMP 0x0040f9a7\nXOR EDI,EDI\nMOV ESI,0x414d05\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00402a70\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00402420\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 18 4b 41 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 da 33 ff ff\neb 15\nba 24 4b 41 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 c3 33 ff ff\n31 ff\nbe 2b 4b 41 00\nba 05 00 00 00\ne8 f2 2e ff ff\n48 89 c1\nbe 01 00 00 00\nba 00 4e 41 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 95 33 ff ff\n31 ff\nbe 2f 4b 41 00\nba 05 00 00 00\ne8 c4 2e ff ff\n48 89 c7\n4c 89 f6\ne8 39 30 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 c8 4a 41 00\n31 ff\nbe fa 4b 41 00\nba 05 00 00 00\ne8 9a 2e ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 3a 33 ff ff\n31 ff\nbe 39 4d 41 00\nba 05 00 00 00\ne8 69 2e ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 f1 32 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 0a 4c 41 00\nba 05 00 00 00\ne8 17 2e ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 b3 32 ff ff\n31 ff\nbe 21 4c 41 00\nba 05 00 00 00\ne8 e2 2d ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 7a 32 ff ff\n31 ff\nbe 3d 4c 41 00\nba 05 00 00 00\ne8 a9 2d ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 44 32 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 5d 4c 41 00\nba 05 00 00 00\ne8 6a 2d ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 02 32 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 81 4c 41 00\nba 05 00 00 00\ne8 28 2d ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 b8 31 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe a9 4c 41 00\nba 05 00 00 00\ne8 de 2c ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 6e 31 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe d5 4c 41 00\nba 05 00 00 00\ne8 94 2c ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 1c 31 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 05 4d 41 00\nba 05 00 00 00\ne8 45 2c ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 cd 30 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 6c 2a ff ff\n'
p12
S'.text:000000000040f660\n.text:000000000040f662\n.text:000000000040f664\n.text:000000000040f666\n.text:000000000040f667\n.text:000000000040f668\n.text:000000000040f66b\n.text:000000000040f66e\n.text:000000000040f671\n.text:000000000040f674\n.text:000000000040f677\n.text:000000000040f67a\n.text:000000000040f67f\n.text:000000000040f682\n.text:000000000040f684\n.text:000000000040f689\n.text:000000000040f68b\n.text:000000000040f68e\n.text:000000000040f691\n.text:000000000040f696\n.text:000000000040f698\n.text:000000000040f69d\n.text:000000000040f69f\n.text:000000000040f6a2\n.text:000000000040f6a5\n.text:000000000040f6a8\n.text:000000000040f6ad\n.text:000000000040f6af\n.text:000000000040f6b4\n.text:000000000040f6b9\n.text:000000000040f6be\n.text:000000000040f6c1\n.text:000000000040f6c6\n.text:000000000040f6cb\n.text:000000000040f6d1\n.text:000000000040f6d3\n.text:000000000040f6d6\n.text:000000000040f6db\n.text:000000000040f6dd\n.text:000000000040f6e2\n.text:000000000040f6e7\n.text:000000000040f6ec\n.text:000000000040f6ef\n.text:000000000040f6f2\n.text:000000000040f6f7\n.text:000000000040f6fb\n.text:000000000040f6fd\n.text:000000000040f705\n.text:000000000040f707\n.text:000000000040f70c\n.text:000000000040f711\n.text:000000000040f716\n.text:000000000040f719\n.text:000000000040f71c\n.text:000000000040f721\n.text:000000000040f723\n.text:000000000040f726\n.text:000000000040f72a\n.text:000000000040f72b\n.text:000000000040f72d\n.text:000000000040f72f\n.text:000000000040f731\n.text:000000000040f736\n.text:000000000040f738\n.text:000000000040f73d\n.text:000000000040f742\n.text:000000000040f747\n.text:000000000040f74a\n.text:000000000040f74d\n.text:000000000040f751\n.text:000000000040f755\n.text:000000000040f75a\n.text:000000000040f75f\n.text:000000000040f762\n.text:000000000040f766\n.text:000000000040f76a\n.text:000000000040f76e\n.text:000000000040f772\n.text:000000000040f776\n.text:000000000040f77a\n.text:000000000040f77f\n.text:000000000040f783\n.text:000000000040f788\n.text:000000000040f78a\n.text:000000000040f78f\n.text:000000000040f794\n.text:000000000040f799\n.text:000000000040f79c\n.text:000000000040f79f\n.text:000000000040f7a3\n.text:000000000040f7a8\n.text:000000000040f7aa\n.text:000000000040f7ad\n.text:000000000040f7b1\n.text:000000000040f7b2\n.text:000000000040f7b4\n.text:000000000040f7b6\n.text:000000000040f7b8\n.text:000000000040f7bd\n.text:000000000040f7bf\n.text:000000000040f7c4\n.text:000000000040f7c9\n.text:000000000040f7ce\n.text:000000000040f7d1\n.text:000000000040f7d4\n.text:000000000040f7d8\n.text:000000000040f7dc\n.text:000000000040f7e1\n.text:000000000040f7e3\n.text:000000000040f7e6\n.text:000000000040f7ea\n.text:000000000040f7eb\n.text:000000000040f7ed\n.text:000000000040f7ef\n.text:000000000040f7f1\n.text:000000000040f7f6\n.text:000000000040f7f8\n.text:000000000040f7fd\n.text:000000000040f802\n.text:000000000040f807\n.text:000000000040f80a\n.text:000000000040f80d\n.text:000000000040f811\n.text:000000000040f815\n.text:000000000040f819\n.text:000000000040f81e\n.text:000000000040f820\n.text:000000000040f823\n.text:000000000040f827\n.text:000000000040f82c\n.text:000000000040f830\n.text:000000000040f835\n.text:000000000040f837\n.text:000000000040f83c\n.text:000000000040f841\n.text:000000000040f846\n.text:000000000040f849\n.text:000000000040f84c\n.text:000000000040f850\n.text:000000000040f854\n.text:000000000040f859\n.text:000000000040f85e\n.text:000000000040f861\n.text:000000000040f865\n.text:000000000040f869\n.text:000000000040f86e\n.text:000000000040f872\n.text:000000000040f877\n.text:000000000040f879\n.text:000000000040f87e\n.text:000000000040f883\n.text:000000000040f888\n.text:000000000040f88b\n.text:000000000040f88e\n.text:000000000040f892\n.text:000000000040f896\n.text:000000000040f89a\n.text:000000000040f89f\n.text:000000000040f8a4\n.text:000000000040f8a7\n.text:000000000040f8ab\n.text:000000000040f8af\n.text:000000000040f8b3\n.text:000000000040f8b8\n.text:000000000040f8bc\n.text:000000000040f8c1\n.text:000000000040f8c3\n.text:000000000040f8c8\n.text:000000000040f8cd\n.text:000000000040f8d2\n.text:000000000040f8d5\n.text:000000000040f8d8\n.text:000000000040f8dc\n.text:000000000040f8e0\n.text:000000000040f8e5\n.text:000000000040f8ea\n.text:000000000040f8ed\n.text:000000000040f8f1\n.text:000000000040f8f5\n.text:000000000040f8f9\n.text:000000000040f8fd\n.text:000000000040f902\n.text:000000000040f906\n.text:000000000040f90b\n.text:000000000040f90d\n.text:000000000040f912\n.text:000000000040f917\n.text:000000000040f91c\n.text:000000000040f91f\n.text:000000000040f922\n.text:000000000040f926\n.text:000000000040f92a\n.text:000000000040f92e\n.text:000000000040f933\n.text:000000000040f938\n.text:000000000040f93b\n.text:000000000040f93f\n.text:000000000040f943\n.text:000000000040f947\n.text:000000000040f94b\n.text:000000000040f94f\n.text:000000000040f954\n.text:000000000040f958\n.text:000000000040f95a\n.text:000000000040f95c\n.text:000000000040f961\n.text:000000000040f966\n.text:000000000040f96b\n.text:000000000040f96e\n.text:000000000040f971\n.text:000000000040f975\n.text:000000000040f979\n.text:000000000040f97e\n.text:000000000040f983\n.text:000000000040f986\n.text:000000000040f98a\n.text:000000000040f98e\n.text:000000000040f992\n.text:000000000040f996\n.text:000000000040f99a\n.text:000000000040f99e\n.text:000000000040f9a3\n.text:000000000040f9a7\n.text:000000000040f9a8\n.text:000000000040f9aa\n.text:000000000040f9ac\n.text:000000000040f9ae\n.text:000000000040f9af\n'
p13
tp14
sS'transfer_entries'
p15
(S'\n__stdcall transfer_entries(Hash_table * dst, Hash_table * src)\n'
p16
V\u000a_Bool transfer_entries(Hash_table *dst,Hash_table *src)\u000a\u000a{\u000a  void *key;\u000a  hash_entry *phVar1;\u000a  hash_entry *entry;\u000a  hash_entry *phVar2;\u000a  char in_DL;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = src->bucket;\u000a  if (phVar3 < src->bucket_limit) {\u000a    do {\u000a      if (phVar3->data != (void *)0x0) {\u000a        entry = phVar3->next;\u000a        while (entry != (hash_entry *)0x0) {\u000a          key = entry->data;\u000a          phVar1 = safe_hasher(dst,key);\u000a          phVar2 = entry->next;\u000a          if (phVar1->data == (void *)0x0) {\u000a            phVar1->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a            free_entry(dst,entry);\u000a            entry = phVar2;\u000a          }\u000a          else {\u000a            entry->next = phVar1->next;\u000a            phVar1->next = entry;\u000a            entry = phVar2;\u000a          }\u000a        }\u000a        key = phVar3->data;\u000a        phVar3->next = (hash_entry *)0x0;\u000a        if (in_DL == 0) {\u000a          entry = safe_hasher(dst,key);\u000a          if (entry->data == (void *)0x0) {\u000a            entry->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a          }\u000a          else {\u000a            phVar2 = allocate_entry(dst);\u000a            if (phVar2 == (hash_entry *)0x0) {\u000a              return false;\u000a            }\u000a            phVar2->data = key;\u000a            phVar2->next = entry->next;\u000a            entry->next = phVar2;\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          src->n_buckets_used = src->n_buckets_used - 1;\u000a        }\u000a      }\u000a      phVar3 = phVar3 + 1;\u000a    } while (phVar3 < src->bucket_limit);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p17
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBP]\nMOV AL,0x1\nCMP R15,qword ptr [RBP + 0x8]\nJNC 0x0040bb42\nMOV qword ptr [RSP],RBP\nNOP dword ptr [RAX + RAX*0x1]\nCMP qword ptr [R15],0x0\nJZ 0x0040bb32\nMOV RBX,qword ptr [R15 + 0x8]\nTEST RBX,RBX\nJZ 0x0040bada\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R13,qword ptr [RBX]\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x0040b350\nMOV RBP,qword ptr [RBX + 0x8]\nCMP qword ptr [RAX],0x0\nJZ 0x0040bac0\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RBX + 0x8],RCX\nMOV qword ptr [RAX + 0x8],RBX\nJMP 0x0040bad2\nMOV qword ptr [RAX],R13\nINC qword ptr [R14 + 0x18]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x0040c0c0\nTEST RBP,RBP\nMOV RBX,RBP\nJNZ 0x0040ba90\nMOV R13,qword ptr [R15]\nMOV qword ptr [R15 + 0x8],0x0\nTEST R12B,R12B\nMOV RBP,qword ptr [RSP]\nJNZ 0x0040bb32\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x0040b350\nMOV RBX,RAX\nCMP qword ptr [RBX],0x0\nJZ 0x0040bb20\nMOV RDI,R14\nCALL 0x0040be00\nTEST RAX,RAX\nJZ 0x0040bb51\nMOV qword ptr [RAX],R13\nMOV RCX,qword ptr [RBX + 0x8]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x0040bb27\nMOV qword ptr [RBX],R13\nINC qword ptr [R14 + 0x18]\nMOV qword ptr [R15],0x0\nDEC qword ptr [RBP + 0x18]\nADD R15,0x10\nCMP R15,qword ptr [RBP + 0x8]\nJC 0x0040ba70\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x0040bb42\n'
p18
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 d4\n48 89 f5\n49 89 fe\n4c 8b 7d 00\nb0 01\n4c 3b 7d 08\n0f 83 de 00 00 00\n48 89 2c 24\n0f 1f 84 00 00 00 00 00\n49 83 3f 00\n0f 84 b8 00 00 00\n49 8b 5f 08\n48 85 db\n74 57\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 8b 2b\n4c 89 f7\n4c 89 ee\ne8 b2 f8 ff ff\n48 8b 6b 08\n48 83 38 00\n74 18\n48 8b 48 08\n48 89 4b 08\n48 89 58 08\neb 1c\n4c 89 28\n49 ff 46 18\n4c 89 f7\n48 89 de\ne8 ee 05 00 00\n48 85 ed\n48 89 eb\n75 b6\n4d 8b 2f\n49 c7 47 08 00 00 00 00\n45 84 e4\n48 8b 2c 24\n75 44\n4c 89 f7\n4c 89 ee\ne8 57 f8 ff ff\n48 89 c3\n48 83 3b 00\n74 1e\n4c 89 f7\ne8 f6 02 00 00\n48 85 c0\n74 42\n4c 89 28\n48 8b 4b 08\n48 89 48 08\n48 89 43 08\neb 07\n4c 89 2b\n49 ff 46 18\n49 c7 07 00 00 00 00\n48 ff 4d 18\n49 83 c7 10\n4c 3b 7d 08\n0f 82 30 ff ff ff\nb0 01\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 c0\neb ed\n'
p19
S'.text:000000000040ba40\n.text:000000000040ba41\n.text:000000000040ba43\n.text:000000000040ba45\n.text:000000000040ba47\n.text:000000000040ba49\n.text:000000000040ba4a\n.text:000000000040ba4b\n.text:000000000040ba4e\n.text:000000000040ba51\n.text:000000000040ba54\n.text:000000000040ba58\n.text:000000000040ba5a\n.text:000000000040ba5e\n.text:000000000040ba64\n.text:000000000040ba68\n.text:000000000040ba70\n.text:000000000040ba74\n.text:000000000040ba7a\n.text:000000000040ba7e\n.text:000000000040ba81\n.text:000000000040ba83\n.text:000000000040ba90\n.text:000000000040ba93\n.text:000000000040ba96\n.text:000000000040ba99\n.text:000000000040ba9e\n.text:000000000040baa2\n.text:000000000040baa6\n.text:000000000040baa8\n.text:000000000040baac\n.text:000000000040bab0\n.text:000000000040bab4\n.text:000000000040bac0\n.text:000000000040bac3\n.text:000000000040bac7\n.text:000000000040baca\n.text:000000000040bacd\n.text:000000000040bad2\n.text:000000000040bad5\n.text:000000000040bad8\n.text:000000000040bada\n.text:000000000040badd\n.text:000000000040bae5\n.text:000000000040bae8\n.text:000000000040baec\n.text:000000000040baee\n.text:000000000040baf1\n.text:000000000040baf4\n.text:000000000040baf9\n.text:000000000040bafc\n.text:000000000040bb00\n.text:000000000040bb02\n.text:000000000040bb05\n.text:000000000040bb0a\n.text:000000000040bb0d\n.text:000000000040bb0f\n.text:000000000040bb12\n.text:000000000040bb16\n.text:000000000040bb1a\n.text:000000000040bb1e\n.text:000000000040bb20\n.text:000000000040bb23\n.text:000000000040bb27\n.text:000000000040bb2e\n.text:000000000040bb32\n.text:000000000040bb36\n.text:000000000040bb3a\n.text:000000000040bb40\n.text:000000000040bb42\n.text:000000000040bb46\n.text:000000000040bb47\n.text:000000000040bb49\n.text:000000000040bb4b\n.text:000000000040bb4d\n.text:000000000040bb4f\n.text:000000000040bb50\n.text:000000000040bb51\n.text:000000000040bb53\n'
p20
tp21
sS'gnu_mbswidth'
p22
(S'\n__stdcall gnu_mbswidth(char * string)\n'
p23
V\u000aint gnu_mbswidth(char *string)\u000a\u000a{\u000a  int iVar1;\u000a  size_t nbytes;\u000a  \u000a  nbytes = strlen(string);\u000a  iVar1 = mbsnwidth(string,nbytes);\u000a  return iVar1;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nCALL 0x004025d0\nMOV RDI,RBX\nMOV RSI,RAX\nMOV EDX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x0040c480\n'
p25
S'55\n53\n50\n89 f5\n48 89 fb\ne8 63 61 ff ff\n48 89 df\n48 89 c6\n89 ea\n48 83 c4 08\n5b\n5d\neb 03\n'
p26
S'.text:000000000040c460\n.text:000000000040c461\n.text:000000000040c462\n.text:000000000040c463\n.text:000000000040c465\n.text:000000000040c468\n.text:000000000040c46d\n.text:000000000040c470\n.text:000000000040c473\n.text:000000000040c475\n.text:000000000040c479\n.text:000000000040c47a\n.text:000000000040c47b\n'
p27
tp28
sS'to_uchar'
p29
(S'\n__stdcall to_uchar()\n'
p30
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p31
S'MOV EAX,EDI\nRET\n'
p32
S'89 f8\nc3\n'
p33
S'.text:00000000004042c0\n.text:00000000004042c2\n'
p34
tp35
sS'find_unit_order'
p36
(S'\n__stdcall find_unit_order(char * number)\n'
p37
V\u000aint find_unit_order(char *number)\u000a\u000a{\u000a  byte bVar1;\u000a  int iVar2;\u000a  byte *pbVar3;\u000a  byte *pbVar4;\u000a  ulong uVar5;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  \u000a  pbVar3 = (byte *)(number + (ulong)(*number == '-'));\u000a  uVar6 = 0;\u000a  do {\u000a    do {\u000a      uVar7 = uVar6;\u000a      pbVar4 = pbVar3;\u000a      bVar1 = *pbVar4;\u000a      uVar5 = (ulong)bVar1;\u000a      pbVar3 = pbVar4 + 1;\u000a      uVar6 = (uint)bVar1 - 0x30 | uVar7;\u000a    } while ((uint)bVar1 - 0x30 < 10);\u000a    uVar6 = uVar7;\u000a  } while ((uint)bVar1 == thousands_sep);\u000a  if ((uint)bVar1 == decimal_point) {\u000a    uVar5 = (ulong)*pbVar3;\u000a    uVar6 = (uint)*pbVar3 - 0x30;\u000a    if (uVar6 < 10) {\u000a      pbVar4 = pbVar4 + 2;\u000a      do {\u000a        uVar7 = uVar7 | uVar6;\u000a        uVar5 = (ulong)*pbVar4;\u000a        uVar6 = (uint)*pbVar4 - 0x30;\u000a        pbVar4 = pbVar4 + 1;\u000a      } while (uVar6 < 10);\u000a    }\u000a  }\u000a  if (uVar7 == 0) {\u000a    return 0;\u000a  }\u000a  iVar2 = -(int)""[uVar5];\u000a  if (*number != '-') {\u000a    iVar2 = (int)""[uVar5];\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p38
S'MOV R8B,byte ptr [RDI]\nXOR EDX,EDX\nCMP R8B,0x2d\nSETZ DL\nADD RDX,RDI\nXOR R10D,R10D\nMOV R9D,dword ptr [0x0061a5b8]\nNOP dword ptr [RAX]\nMOV EDI,R10D\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R10D,EDI\nMOV SIL,byte ptr [RDX]\nINC RDX\nMOVZX ECX,SIL\nLEA EAX,[RCX + -0x30]\nMOV EDI,EAX\nOR EDI,R10D\nCMP EAX,0xa\nJC 0x00407720\nCMP ECX,R9D\nJZ 0x00407710\nCMP ECX,dword ptr [0x0061a5b4]\nJNZ 0x00407771\nMOVZX ESI,byte ptr [RDX]\nMOV EDI,ESI\nADD EDI,-0x30\nCMP EDI,0x9\nJA 0x00407771\nINC RDX\nNOP word ptr [RAX + RAX*0x1]\nOR R10D,EDI\nMOVZX ESI,byte ptr [RDX]\nLEA EDI,[RSI + -0x30]\nINC RDX\nCMP EDI,0xa\nJC 0x00407760\nTEST R10D,R10D\nJZ 0x0040778d\nMOVZX EAX,SIL\nMOVSX ECX,byte ptr [0x4124c0 + RAX]\nMOV EAX,ECX\nNEG EAX\nCMP R8B,0x2d\nCMOVNZ EAX,ECX\nRET\nXOR EAX,EAX\nRET\n'
p39
S'44 8a 07\n31 d2\n41 80 f8 2d\n0f 94 c2\n48 01 fa\n45 31 d2\n44 8b 0d af 2e 21 00\n0f 1f 80 00 00 00 00\n44 89 d7\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 89 fa\n40 8a 32\n48 ff c2\n40 0f b6 ce\n8d 41 d0\n89 c7\n44 09 d7\n83 f8 0a\n72 e6\n44 39 c9\n74 d1\n3b 0d 6f 2e 21 00\n75 2a\n0f b6 32\n89 f7\n83 c7 d0\n83 ff 09\n77 1d\n48 ff c2\n66 0f 1f 84 00 00 00 00 00\n41 09 fa\n0f b6 32\n8d 7e d0\n48 ff c2\n83 ff 0a\n72 ef\n45 85 d2\n74 17\n40 0f b6 c6\n0f be 88 c0 24 41 00\n89 c8\nf7 d8\n41 80 f8 2d\n0f 45 c1\nc3\n31 c0\nc3\n'
p40
S'.text:00000000004076f0\n.text:00000000004076f3\n.text:00000000004076f5\n.text:00000000004076f9\n.text:00000000004076fc\n.text:00000000004076ff\n.text:0000000000407702\n.text:0000000000407709\n.text:0000000000407710\n.text:0000000000407713\n.text:0000000000407720\n.text:0000000000407723\n.text:0000000000407726\n.text:0000000000407729\n.text:000000000040772d\n.text:0000000000407730\n.text:0000000000407732\n.text:0000000000407735\n.text:0000000000407738\n.text:000000000040773a\n.text:000000000040773d\n.text:000000000040773f\n.text:0000000000407745\n.text:0000000000407747\n.text:000000000040774a\n.text:000000000040774c\n.text:000000000040774f\n.text:0000000000407752\n.text:0000000000407754\n.text:0000000000407757\n.text:0000000000407760\n.text:0000000000407763\n.text:0000000000407766\n.text:0000000000407769\n.text:000000000040776c\n.text:000000000040776f\n.text:0000000000407771\n.text:0000000000407774\n.text:0000000000407776\n.text:000000000040777a\n.text:0000000000407781\n.text:0000000000407783\n.text:0000000000407785\n.text:0000000000407789\n.text:000000000040778c\n.text:000000000040778d\n.text:000000000040778f\n'
p41
tp42
sS'strncmp'
p43
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p44
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0061a058)();\u000a  return iVar1;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x0061a058]\n'
p46
S'ff 25 02 7c 21 00\n'
p47
S'.plt:0000000000402450\n'
p48
tp49
sS'quote'
p50
(S'\n__stdcall quote(char * arg)\n'
p51
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p52
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x0040dea0\n'
p53
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p54
S'.text:000000000040deb0\n.text:000000000040deb3\n.text:000000000040deb5\n.text:000000000040deb8\n'
p55
tp56
sS'insertkey'
p57
(S'\n__stdcall insertkey(keyfield * key_arg)\n'
p58
V\u000avoid insertkey(keyfield *key_arg)\u000a\u000a{\u000a  keyfield *pkVar1;\u000a  keyfield **ppkVar2;\u000a  keyfield *pkVar3;\u000a  keyfield **ppkVar4;\u000a  \u000a  pkVar3 = (keyfield *)xmemdup(key_arg,0x48);\u000a  ppkVar2 = &keylist;\u000a  do {\u000a    ppkVar4 = ppkVar2;\u000a    pkVar1 = *ppkVar4;\u000a    ppkVar2 = &pkVar1->next;\u000a  } while (pkVar1 != (keyfield *)0x0);\u000a  *ppkVar4 = pkVar3;\u000a  pkVar3->next = (keyfield *)0x0;\u000a  return;\u000a}\u000a\u000a
p59
S'PUSH RAX\nMOV ESI,0x48\nCALL 0x0040fcc0\nMOV EDX,0x61a650\nMOV RCX,RDX\nMOV RDX,qword ptr [RCX]\nTEST RDX,RDX\nLEA RDX,[RDX + 0x40]\nJNZ 0x004046b0\nMOV qword ptr [RCX],RAX\nMOV qword ptr [RAX + 0x40],0x0\nPOP RAX\nRET\n'
p60
S'50\nbe 48 00 00 00\ne8 15 b6 00 00\nba 50 a6 61 00\n48 89 d1\n48 8b 11\n48 85 d2\n48 8d 52 40\n75 f1\n48 89 01\n48 c7 40 40 00 00 00 00\n58\nc3\n'
p61
S'.text:00000000004046a0\n.text:00000000004046a1\n.text:00000000004046a6\n.text:00000000004046ab\n.text:00000000004046b0\n.text:00000000004046b3\n.text:00000000004046b6\n.text:00000000004046b9\n.text:00000000004046bd\n.text:00000000004046bf\n.text:00000000004046c2\n.text:00000000004046ca\n.text:00000000004046cb\n'
p62
tp63
sS'strcoll_loop'
p64
(S'\n__stdcall strcoll_loop(char * s1, size_t s1size, char * s2, size_t s2size)\n'
p65
V\u000aint strcoll_loop(char *s1,size_t s1size,char *s2,size_t s2size)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  \u000a  piVar2 = __errno_location();\u000a  while( true ) {\u000a    *piVar2 = 0;\u000a    iVar1 = strcoll(s1,s2);\u000a    if (iVar1 != 0) {\u000a      return iVar1;\u000a    }\u000a    sVar3 = strlen(s1);\u000a    sVar4 = strlen(s2);\u000a    s2size = s2size - (sVar4 + 1);\u000a    s1size = s1size - (sVar3 + 1);\u000a    if (s1size == 0) break;\u000a    s2 = s2 + sVar4 + 1;\u000a    s1 = s1 + sVar3 + 1;\u000a    if (s2size == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return -(uint)(s2size != 0);\u000a}\u000a\u000a
p66
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R12,RDX\nMOV R15,RSI\nMOV RBX,RDI\nCALL 0x00402430\nMOV R13,RAX\nNOP\nMOV dword ptr [R13],0x0\nMOV RDI,RBX\nMOV RSI,R12\nCALL 0x004028b0\nTEST EAX,EAX\nJNZ 0x0041142f\nMOV RDI,RBX\nCALL 0x004025d0\nMOV RBP,RAX\nINC RBP\nMOV RDI,R12\nCALL 0x004025d0\nINC RAX\nSUB R14,RAX\nSUB R15,RBP\nJZ 0x0041142a\nADD R12,RAX\nADD RBX,RBP\nTEST R14,R14\nJNZ 0x004113e0\nMOV EAX,0x1\nJMP 0x0041142f\nNEG R14\nSBB EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p67
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d4\n49 89 f7\n48 89 fb\ne8 54 10 ff ff\n49 89 c5\n90\n41 c7 45 00 00 00 00 00\n48 89 df\n4c 89 e6\ne8 bd 14 ff ff\n85 c0\n75 38\n48 89 df\ne8 d1 11 ff ff\n48 89 c5\n48 ff c5\n4c 89 e7\ne8 c3 11 ff ff\n48 ff c0\n49 29 c6\n49 29 ef\n74 12\n49 01 c4\n48 01 eb\n4d 85 f6\n75 bd\nb8 01 00 00 00\neb 05\n49 f7 de\n19 c0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p68
S'.text:00000000004113c0\n.text:00000000004113c1\n.text:00000000004113c3\n.text:00000000004113c5\n.text:00000000004113c7\n.text:00000000004113c9\n.text:00000000004113ca\n.text:00000000004113cb\n.text:00000000004113ce\n.text:00000000004113d1\n.text:00000000004113d4\n.text:00000000004113d7\n.text:00000000004113dc\n.text:00000000004113df\n.text:00000000004113e0\n.text:00000000004113e8\n.text:00000000004113eb\n.text:00000000004113ee\n.text:00000000004113f3\n.text:00000000004113f5\n.text:00000000004113f7\n.text:00000000004113fa\n.text:00000000004113ff\n.text:0000000000411402\n.text:0000000000411405\n.text:0000000000411408\n.text:000000000041140d\n.text:0000000000411410\n.text:0000000000411413\n.text:0000000000411416\n.text:0000000000411418\n.text:000000000041141b\n.text:000000000041141e\n.text:0000000000411421\n.text:0000000000411423\n.text:0000000000411428\n.text:000000000041142a\n.text:000000000041142d\n.text:000000000041142f\n.text:0000000000411433\n.text:0000000000411434\n.text:0000000000411436\n.text:0000000000411438\n.text:000000000041143a\n.text:000000000041143c\n.text:000000000041143d\n'
p69
tp70
sS'clone_quoting_options'
p71
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p72
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p73
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00402430\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x61ab80\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x0040fcc0\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p74
S'55\n41 56\n53\n48 89 fb\ne8 b4 59 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 80 ab 61 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 25 32 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p75
S'.text:000000000040ca70\n.text:000000000040ca71\n.text:000000000040ca73\n.text:000000000040ca74\n.text:000000000040ca77\n.text:000000000040ca7c\n.text:000000000040ca7f\n.text:000000000040ca82\n.text:000000000040ca85\n.text:000000000040ca8a\n.text:000000000040ca8e\n.text:000000000040ca93\n.text:000000000040ca96\n.text:000000000040ca9b\n.text:000000000040ca9e\n.text:000000000040ca9f\n.text:000000000040caa1\n.text:000000000040caa2\n'
p76
tp77
sS'lock_node'
p78
(S'\n__stdcall lock_node(merge_node * node)\n'
p79
V\u000avoid lock_node(merge_node *node)\u000a\u000a{\u000a  pthread_mutex_lock((pthread_mutex_t *)node->lock);\u000a  return;\u000a}\u000a\u000a
p80
S'ADD RDI,0x58\nJMP 0x00402b20\n'
p81
S'48 83 c7 58\ne9 97 8e ff ff\n'
p82
S'.text:0000000000409c80\n.text:0000000000409c84\n'
p83
tp84
sS'frame_dummy'
p85
(S'\n__stdcall frame_dummy()\n'
p86
V\u000a/* WARNING: Removing unreachable block (ram,0x00402c2a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p87
S'MOV EDI,0x619e08\nCMP qword ptr [RDI],0x0\nJNZ 0x00402c20\nJMP 0x00402bb0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00402c1b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00402bb0\n'
p88
S'bf 08 9e 61 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p89
S'.text:0000000000402c10\n.text:0000000000402c15\n.text:0000000000402c19\n.text:0000000000402c1b\n.text:0000000000402c20\n.text:0000000000402c25\n.text:0000000000402c28\n.text:0000000000402c2a\n.text:0000000000402c2b\n.text:0000000000402c2e\n.text:0000000000402c30\n.text:0000000000402c31\n'
p90
tp91
sS'_obstack_begin_1'
p92
(S'\n__stdcall _obstack_begin_1(obstack * h, size_t size, size_t alignment, anon_subr_void_ptr_void_ptr_size_t * chunkfun, anon_subr_void_void_ptr_void_ptr * freefun, void * arg)\n'
p93
V\u000aint _obstack_begin_1(obstack *h,size_t size,size_t alignment,void *(*chunkfun)(void *,size_t),\u000a                    void (*freefun)(void *,void *),void *arg)\u000a\u000a{\u000a  *(void *(**)(void *,size_t))&h->chunkfun = chunkfun;\u000a  *(void (**)(void *,void *))&h->freefun = freefun;\u000a  h->extra_arg = arg;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield | 1;\u000a  _obstack_begin_worker();\u000a  return 1;\u000a}\u000a\u000a
p94
S'PUSH RAX\nMOV qword ptr [RDI + 0x38],RCX\nMOV qword ptr [RDI + 0x40],R8\nMOV qword ptr [RDI + 0x48],R9\nOR byte ptr [RDI + 0x50],0x1\nCALL 0x004109b0\nMOV EAX,0x1\nPOP RCX\nRET\n'
p95
S'50\n48 89 4f 38\n4c 89 47 40\n4c 89 4f 48\n80 4f 50 01\ne8 5a ff ff ff\nb8 01 00 00 00\n59\nc3\n'
p96
S'.text:0000000000410a40\n.text:0000000000410a41\n.text:0000000000410a45\n.text:0000000000410a49\n.text:0000000000410a4d\n.text:0000000000410a51\n.text:0000000000410a56\n.text:0000000000410a5b\n.text:0000000000410a5c\n'
p97
tp98
sS'open_input_files'
p99
(S'\n__stdcall open_input_files(sortfile * files, size_t nfiles, FILE * * * pfps)\n'
p100
V\u000asize_t open_input_files(sortfile *files,size_t nfiles,FILE ***pfps)\u000a\u000a{\u000a  tempnode *temp;\u000a  FILE **ppFVar1;\u000a  FILE *pFVar2;\u000a  size_t sVar3;\u000a  tempnode **pptVar4;\u000a  \u000a  ppFVar1 = (FILE **)xnmalloc(nfiles,8);\u000a  *pfps = ppFVar1;\u000a  if (nfiles == 0) {\u000a    sVar3 = 0;\u000a  }\u000a  else {\u000a    pptVar4 = &files->temp;\u000a    sVar3 = 0;\u000a    do {\u000a      temp = *pptVar4;\u000a      if ((temp == (tempnode *)0x0) || (temp->state == 0)) {\u000a        pFVar2 = stream_open((char *)pptVar4[-1],"r");\u000a      }\u000a      else {\u000a        pFVar2 = open_temp(temp);\u000a      }\u000a      ppFVar1[sVar3] = pFVar2;\u000a      if (pFVar2 == (FILE *)0x0) {\u000a        return sVar3;\u000a      }\u000a      sVar3 = sVar3 + 1;\u000a      pptVar4 = pptVar4 + 2;\u000a    } while (sVar3 < nfiles);\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p101
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R12,RDI\nMOV ESI,0x8\nMOV RDI,R14\nCALL 0x0040fb60\nMOV R15,RAX\nMOV qword ptr [RBX],R15\nTEST R14,R14\nJZ 0x00407de6\nADD R12,0x8\nXOR EBX,EBX\nNOP\nMOV RDI,qword ptr [R12]\nTEST RDI,RDI\nJZ 0x00407dc0\nCMP byte ptr [RDI + 0xc],0x0\nJZ 0x00407dc0\nCALL 0x004086b0\nJMP 0x00407dcf\nMOV RDI,qword ptr [R12 + -0x8]\nMOV ESI,0x413a7d\nCALL 0x00406540\nMOV qword ptr [R15 + RBX*0x8],RAX\nTEST RAX,RAX\nJZ 0x00407de8\nINC RBX\nADD R12,0x10\nCMP RBX,R14\nJC 0x00407da0\nJMP 0x00407de8\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p102
S'41 57\n41 56\n41 54\n53\n50\n48 89 d3\n49 89 f6\n49 89 fc\nbe 08 00 00 00\n4c 89 f7\ne8 d2 7d 00 00\n49 89 c7\n4c 89 3b\n4d 85 f6\n74 4d\n49 83 c4 08\n31 db\n90\n49 8b 3c 24\n48 85 ff\n74 17\n80 7f 0c 00\n74 11\ne8 fc 08 00 00\neb 19\n49 8b 7c 24 f8\nbe 7d 3a 41 00\ne8 71 e7 ff ff\n49 89 04 df\n48 85 c0\n74 10\n48 ff c3\n49 83 c4 10\n4c 39 f3\n72 bc\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p103
S'.text:0000000000407d70\n.text:0000000000407d72\n.text:0000000000407d74\n.text:0000000000407d76\n.text:0000000000407d77\n.text:0000000000407d78\n.text:0000000000407d7b\n.text:0000000000407d7e\n.text:0000000000407d81\n.text:0000000000407d86\n.text:0000000000407d89\n.text:0000000000407d8e\n.text:0000000000407d91\n.text:0000000000407d94\n.text:0000000000407d97\n.text:0000000000407d99\n.text:0000000000407d9d\n.text:0000000000407d9f\n.text:0000000000407da0\n.text:0000000000407da4\n.text:0000000000407da7\n.text:0000000000407da9\n.text:0000000000407dad\n.text:0000000000407daf\n.text:0000000000407db4\n.text:0000000000407dc0\n.text:0000000000407dc5\n.text:0000000000407dca\n.text:0000000000407dcf\n.text:0000000000407dd3\n.text:0000000000407dd6\n.text:0000000000407dd8\n.text:0000000000407ddb\n.text:0000000000407ddf\n.text:0000000000407de2\n.text:0000000000407de4\n.text:0000000000407de6\n.text:0000000000407de8\n.text:0000000000407deb\n.text:0000000000407def\n.text:0000000000407df0\n.text:0000000000407df2\n.text:0000000000407df4\n.text:0000000000407df6\n'
p104
tp105
sS'check_ordering_compatibility'
p106
(S'\n__stdcall check_ordering_compatibility()\n'
p107
V\u000avoid check_ordering_compatibility(void)\u000a\u000a{\u000a  keyfield *key;\u000a  char opts [31];\u000a  char acStack40 [32];\u000a  \u000a  key = keylist;\u000a  if (keylist != (keyfield *)0x0) {\u000a    do {\u000a      if (1 < (uint)(byte)(key->ignore != (_Bool *)0x0 | key->random | key->version) +\u000a              (uint)key->month +\u000a              (uint)key->human_numeric + (uint)key->numeric + (uint)key->general_numeric) {\u000a        key->reverse = false;\u000a        *(undefined2 *)&key->skipsblanks = 0;\u000a        key_to_opts(key,acStack40);\u000a        incompatible_options(acStack40);\u000a        return;\u000a      }\u000a      key = key->next;\u000a    } while (key != (keyfield *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p108
S'MOV RDI,qword ptr [0x0061a650]\nTEST RDI,RDI\nJNZ 0x00404b69\nJMP 0x00404bbc\nMOV RDI,qword ptr [RDI + 0x40]\nTEST RDI,RDI\nJZ 0x00404bbc\nMOVZX EAX,byte ptr [RDI + 0x34]\nMOVZX ECX,byte ptr [RDI + 0x32]\nADD ECX,EAX\nMOVZX EAX,byte ptr [RDI + 0x35]\nADD EAX,ECX\nMOVZX ECX,byte ptr [RDI + 0x36]\nADD ECX,EAX\nMOVZX EAX,byte ptr [RDI + 0x33]\nOR AL,byte ptr [RDI + 0x38]\nCMP qword ptr [RDI + 0x20],0x0\nSETNZ DL\nOR DL,AL\nMOVZX EAX,DL\nADD EAX,ECX\nCMP EAX,0x2\nJC 0x00404b60\nPUSH RBX\nSUB RSP,0x20\nMOV byte ptr [RDI + 0x37],0x0\nMOV word ptr [RDI + 0x30],0x0\nMOV RBX,RSP\nMOV RSI,RBX\nCALL 0x00405dc0\nMOV RDI,RBX\nCALL 0x004046d0\nRET\n'
p109
S'48 8b 3d f9 5a 21 00\n48 85 ff\n75 0d\neb 5e\n48 8b 7f 40\n48 85 ff\n74 53\n0f b6 47 34\n0f b6 4f 32\n01 c1\n0f b6 47 35\n01 c8\n0f b6 4f 36\n01 c1\n0f b6 47 33\n0a 47 38\n48 83 7f 20 00\n0f 95 c2\n08 c2\n0f b6 c2\n01 c8\n83 f8 02\n72 c6\n53\n48 83 ec 20\nc6 47 37 00\n66 c7 47 30 00 00\n48 89 e3\n48 89 de\ne8 0c 12 00 00\n48 89 df\ne8 14 fb ff ff\nc3\n'
p110
S'.text:0000000000404b50\n.text:0000000000404b57\n.text:0000000000404b5a\n.text:0000000000404b5c\n.text:0000000000404b60\n.text:0000000000404b64\n.text:0000000000404b67\n.text:0000000000404b69\n.text:0000000000404b6d\n.text:0000000000404b71\n.text:0000000000404b73\n.text:0000000000404b77\n.text:0000000000404b79\n.text:0000000000404b7d\n.text:0000000000404b7f\n.text:0000000000404b83\n.text:0000000000404b86\n.text:0000000000404b8b\n.text:0000000000404b8e\n.text:0000000000404b90\n.text:0000000000404b93\n.text:0000000000404b95\n.text:0000000000404b98\n.text:0000000000404b9a\n.text:0000000000404b9b\n.text:0000000000404b9f\n.text:0000000000404ba3\n.text:0000000000404ba9\n.text:0000000000404bac\n.text:0000000000404baf\n.text:0000000000404bb4\n.text:0000000000404bb7\n.text:0000000000404bbc\n'
p111
tp112
sS'debug_line'
p113
(S'\n__stdcall debug_line(line * line)\n'
p114
V\u000avoid debug_line(line *line)\u000a\u000a{\u000a  keyfield *key;\u000a  \u000a  key = keylist;\u000a  debug_key(line,keylist);\u000a  if (key != (keyfield *)0x0) {\u000a    while (key = key->next, key != (keyfield *)0x0) {\u000a      debug_key(line,key);\u000a    }\u000a    if ((unique == 0) && ((stable & 1) == 0)) {\u000a      debug_key(line,(keyfield *)0x0);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p115
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RBX,qword ptr [0x0061a650]\nMOV RSI,RBX\nCALL 0x004078b0\nTEST RBX,RBX\nJNZ 0x0040787b\nJMP 0x004078a5\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004078b0\nMOV RBX,qword ptr [RBX + 0x40]\nTEST RBX,RBX\nJNZ 0x00407870\nMOV AL,byte ptr [0x0061a64a]\nTEST AL,AL\nJNZ 0x004078a5\nTEST byte ptr [0x0061a649],0x1\nJNZ 0x004078a5\nXOR ESI,ESI\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004078b0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p116
S'41 56\n53\n50\n49 89 fe\n48 8b 1d f2 2d 21 00\n48 89 de\ne8 4a 00 00 00\n48 85 db\n75 10\neb 38\n4c 89 f7\n48 89 de\ne8 35 00 00 00\n48 8b 5b 40\n48 85 db\n75 ec\n8a 05 c0 2d 21 00\n84 c0\n75 17\nf6 05 b4 2d 21 00 01\n75 0e\n31 f6\n4c 89 f7\n48 83 c4 08\n5b\n41 5e\neb 0b\n48 83 c4 08\n5b\n41 5e\nc3\n'
p117
S'.text:0000000000407850\n.text:0000000000407852\n.text:0000000000407853\n.text:0000000000407854\n.text:0000000000407857\n.text:000000000040785e\n.text:0000000000407861\n.text:0000000000407866\n.text:0000000000407869\n.text:000000000040786b\n.text:0000000000407870\n.text:0000000000407873\n.text:0000000000407876\n.text:000000000040787b\n.text:000000000040787f\n.text:0000000000407882\n.text:0000000000407884\n.text:000000000040788a\n.text:000000000040788c\n.text:000000000040788e\n.text:0000000000407895\n.text:0000000000407897\n.text:0000000000407899\n.text:000000000040789c\n.text:00000000004078a0\n.text:00000000004078a1\n.text:00000000004078a3\n.text:00000000004078a5\n.text:00000000004078a9\n.text:00000000004078aa\n.text:00000000004078ac\n'
p118
tp119
sS'xnanosleep'
p120
(S'\n__stdcall xnanosleep(double seconds)\n'
p121
V\u000aint xnanosleep(double seconds)\u000a\u000a{\u000a  int iVar1;\u000a  uint *puVar2;\u000a  timespec local_28;\u000a  \u000a  local_28 = dtotimespec(seconds);\u000a  puVar2 = (uint *)__errno_location();\u000a  *puVar2 = 0;\u000a  iVar1 = rpl_nanosleep(&local_28,(timespec *)0x0);\u000a  while( true ) {\u000a    if (iVar1 == 0) {\u000a      return 0;\u000a    }\u000a    if ((*puVar2 | 4) != 4) break;\u000a    *puVar2 = 0;\u000a    iVar1 = rpl_nanosleep(&local_28,(timespec *)0x0);\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p122
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nCALL 0x00410f50\nMOV qword ptr [RSP],RAX\nMOV qword ptr [RSP + 0x8],RDX\nCALL 0x00402430\nMOV R14,RAX\nMOV dword ptr [R14],0x0\nXOR EBX,EBX\nMOV RDI,RSP\nXOR ESI,ESI\nCALL 0x004108f0\nTEST EAX,EAX\nJZ 0x0040ff19\nMOV R15,RSP\nNOP dword ptr [RAX]\nMOV EAX,dword ptr [R14]\nOR EAX,0x4\nCMP EAX,0x4\nJNZ 0x0040ff14\nMOV dword ptr [R14],0x0\nXOR EBX,EBX\nXOR ESI,ESI\nMOV RDI,R15\nCALL 0x004108f0\nTEST EAX,EAX\nJNZ 0x0040fef0\nJMP 0x0040ff19\nMOV EBX,0xffffffff\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p123
S'41 57\n41 56\n53\n48 83 ec 10\ne8 92 10 00 00\n48 89 04 24\n48 89 54 24 08\ne8 64 25 ff ff\n49 89 c6\n41 c7 06 00 00 00 00\n31 db\n48 89 e7\n31 f6\ne8 0e 0a 00 00\n85 c0\n74 33\n49 89 e7\n0f 1f 80 00 00 00 00\n41 8b 06\n83 c8 04\n83 f8 04\n75 19\n41 c7 06 00 00 00 00\n31 db\n31 f6\n4c 89 ff\ne8 e2 09 00 00\n85 c0\n75 de\neb 05\nbb ff ff ff ff\n89 d8\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p124
S'.text:000000000040feb0\n.text:000000000040feb2\n.text:000000000040feb4\n.text:000000000040feb5\n.text:000000000040feb9\n.text:000000000040febe\n.text:000000000040fec2\n.text:000000000040fec7\n.text:000000000040fecc\n.text:000000000040fecf\n.text:000000000040fed6\n.text:000000000040fed8\n.text:000000000040fedb\n.text:000000000040fedd\n.text:000000000040fee2\n.text:000000000040fee4\n.text:000000000040fee6\n.text:000000000040fee9\n.text:000000000040fef0\n.text:000000000040fef3\n.text:000000000040fef6\n.text:000000000040fef9\n.text:000000000040fefb\n.text:000000000040ff02\n.text:000000000040ff04\n.text:000000000040ff06\n.text:000000000040ff09\n.text:000000000040ff0e\n.text:000000000040ff10\n.text:000000000040ff12\n.text:000000000040ff14\n.text:000000000040ff19\n.text:000000000040ff1b\n.text:000000000040ff1f\n.text:000000000040ff20\n.text:000000000040ff22\n.text:000000000040ff24\n'
p125
tp126
sS'fadvise'
p127
(S'\n__stdcall fadvise(FILE * fp)\n'
p128
V\u000avoid fadvise(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int __advise;\u000a  \u000a  if (fp != (FILE *)0x0) {\u000a    __fd = fileno((FILE *)fp);\u000a    fdadvise(__fd,0,0,__advise);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p129
S'PUSH RBX\nMOV EBX,ESI\nTEST RDI,RDI\nJZ 0x0040ac38\nCALL 0x004027e0\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,EAX\nMOV ECX,EBX\nPOP RBX\nJMP 0x0040ac10\nPOP RBX\nRET\n'
p130
S'53\n89 f3\n48 85 ff\n74 10\ne8 b3 7b ff ff\n31 f6\n31 d2\n89 c7\n89 d9\n5b\neb d8\n5b\nc3\n'
p131
S'.text:000000000040ac20\n.text:000000000040ac21\n.text:000000000040ac23\n.text:000000000040ac26\n.text:000000000040ac28\n.text:000000000040ac2d\n.text:000000000040ac2f\n.text:000000000040ac31\n.text:000000000040ac33\n.text:000000000040ac35\n.text:000000000040ac36\n.text:000000000040ac38\n.text:000000000040ac39\n'
p132
tp133
sS'fileno'
p134
(S'\n__stdcall fileno(FILE * __stream)\n'
p135
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0061a220)();\u000a  return iVar1;\u000a}\u000a\u000a
p136
S'JMP qword ptr [0x0061a220]\n'
p137
S'ff 25 3a 7a 21 00\n'
p138
S'.plt:00000000004027e0\n'
p139
tp140
sS'sigemptyset'
p141
(S'\n__stdcall sigemptyset(sigset_t * __set)\n'
p142
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigemptyset(sigset_t *__set)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigemptyset_0061a200)();\u000a  return iVar1;\u000a}\u000a\u000a
p143
S'JMP qword ptr [0x0061a200]\n'
p144
S'ff 25 5a 7a 21 00\n'
p145
S'.plt:00000000004027a0\n'
p146
tp147
sS'nanosleep'
p148
(S'\n__stdcall nanosleep(timespec * __requested_time, timespec * __remaining)\n'
p149
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint nanosleep(timespec *__requested_time,timespec *__remaining)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_nanosleep_0061a148)();\u000a  return iVar1;\u000a}\u000a\u000a
p150
S'JMP qword ptr [0x0061a148]\n'
p151
S'ff 25 12 7b 21 00\n'
p152
S'.plt:0000000000402630\n'
p153
tp154
sS'_obstack_free'
p155
(S'\n__stdcall _obstack_free(obstack * h, void * obj)\n'
p156
V\u000avoid _obstack_free(obstack *h,void *obj)\u000a\u000a{\u000a  _obstack_chunk *p_Var1;\u000a  _obstack_chunk *old_chunk;\u000a  \u000a  old_chunk = h->chunk;\u000a  while( true ) {\u000a    if (old_chunk == (_obstack_chunk *)0x0) {\u000a      if (obj == (void *)0x0) {\u000a        return;\u000a      }\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    }\u000a    if ((old_chunk < obj) && (obj <= old_chunk->limit)) break;\u000a    p_Var1 = old_chunk->prev;\u000a    call_freefun(h,old_chunk);\u000a    *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield | 2;\u000a    old_chunk = p_Var1;\u000a  }\u000a  h->next_free = obj;\u000a  h->object_base = obj;\u000a  h->chunk_limit = old_chunk->limit;\u000a  h->chunk = old_chunk;\u000a  return;\u000a}\u000a\u000a
p157
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nMOV RSI,qword ptr [R15 + 0x8]\nTEST RSI,RSI\nJZ 0x00410c23\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP RSI,R14\nJNC 0x00410c0a\nCMP qword ptr [RSI],R14\nJNC 0x00410c2d\nMOV RBX,qword ptr [RSI + 0x8]\nMOV RDI,R15\nCALL 0x00410b90\nOR byte ptr [R15 + 0x50],0x2\nTEST RBX,RBX\nMOV RSI,RBX\nJNZ 0x00410c00\nTEST R14,R14\nJZ 0x00410c40\nCALL 0x00402420\nMOV qword ptr [R15 + 0x18],R14\nMOV qword ptr [R15 + 0x10],R14\nMOV RAX,qword ptr [RSI]\nMOV qword ptr [R15 + 0x20],RAX\nMOV qword ptr [R15 + 0x8],RSI\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p158
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n49 8b 77 08\n48 85 f6\n74 2f\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 39 f6\n73 05\n4c 39 36\n73 23\n48 8b 5e 08\n4c 89 ff\ne8 7a ff ff ff\n41 80 4f 50 02\n48 85 db\n48 89 de\n75 dd\n4d 85 f6\n74 18\ne8 f3 17 ff ff\n4d 89 77 18\n4d 89 77 10\n48 8b 06\n49 89 47 20\n49 89 77 08\n5b\n41 5e\n41 5f\nc3\n'
p159
S'.text:0000000000410be0\n.text:0000000000410be2\n.text:0000000000410be4\n.text:0000000000410be5\n.text:0000000000410be8\n.text:0000000000410beb\n.text:0000000000410bef\n.text:0000000000410bf2\n.text:0000000000410bf4\n.text:0000000000410c00\n.text:0000000000410c03\n.text:0000000000410c05\n.text:0000000000410c08\n.text:0000000000410c0a\n.text:0000000000410c0e\n.text:0000000000410c11\n.text:0000000000410c16\n.text:0000000000410c1b\n.text:0000000000410c1e\n.text:0000000000410c21\n.text:0000000000410c23\n.text:0000000000410c26\n.text:0000000000410c28\n.text:0000000000410c2d\n.text:0000000000410c31\n.text:0000000000410c35\n.text:0000000000410c38\n.text:0000000000410c3c\n.text:0000000000410c40\n.text:0000000000410c41\n.text:0000000000410c43\n.text:0000000000410c45\n'
p160
tp161
sS'rotr16'
p162
(S'\n__stdcall rotr16()\n'
p163
V\u000auint16_t rotr16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI << (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p164
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p165
S'89 f8\n89 f1\nd3 e8\nb9 10 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p166
S'.text:0000000000410d30\n.text:0000000000410d32\n.text:0000000000410d34\n.text:0000000000410d36\n.text:0000000000410d3b\n.text:0000000000410d3d\n.text:0000000000410d3f\n.text:0000000000410d41\n.text:0000000000410d43\n'
p167
tp168
sS'xstrtoumax'
p169
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p170
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_004104f6;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_004104f6;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00410425_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00410403:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00410403;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_004104d7;\u000a  default:\u000aswitchD_00410425_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_004104d7;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_004104d7:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_004104f6:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p171
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00410513\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00402430\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00402b30\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00410310\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00410502\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x004029e0\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00410370\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x004103a1\nCMP EAX,0x22\nJNZ 0x00410502\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x004103ac\nJMP 0x004104f6\nTEST R12,R12\nJZ 0x00410502\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00410502\nMOV RDI,R12\nCALL 0x00402620\nTEST RAX,RAX\nJZ 0x00410502\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x004103ac\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x004104f6\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x004104f6\nMOV RDI,R12\nCALL 0x00402620\nTEST RAX,RAX\nJZ 0x0041043e\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00402620\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00410403\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x0041040a\nCMP EAX,0x44\nJZ 0x0041040a\nCMP EAX,0x69\nJNZ 0x00410403\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00410414\nMOV EBP,0x1\nJMP 0x00410414\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x0041043e\nXOR EAX,EAX\nJMP qword ptr [0x415170 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00410560\nJMP 0x004104dc\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00410502\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00410560\nJMP 0x004104dc\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00410560\nJMP 0x004104dc\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00410560\nJMP 0x004104dc\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x004104d7\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00410560\nJMP 0x004104dc\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00410560\nJMP 0x004104dc\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00410560\nJMP 0x004104dc\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00410560\nJMP 0x004104dc\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x004104d7\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00410530\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x415060\nMOV ESI,0x415086\nMOV EDX,0x60\nMOV ECX,0x415320\nCALL 0x00402680\n'
p172
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 42 21 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 33 28 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 9c 26 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 94 22 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 5c 22 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 4a 22 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd 70 51 41 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 60 50 41 00\nbe 86 50 41 00\nba 60 00 00 00\nb9 20 53 41 00\ne8 54 21 ff ff\n'
p173
S'.text:00000000004102c0\n.text:00000000004102c1\n.text:00000000004102c3\n.text:00000000004102c5\n.text:00000000004102c7\n.text:00000000004102c9\n.text:00000000004102ca\n.text:00000000004102ce\n.text:00000000004102d1\n.text:00000000004102d4\n.text:00000000004102d7\n.text:00000000004102da\n.text:00000000004102de\n.text:00000000004102e4\n.text:00000000004102e9\n.text:00000000004102ee\n.text:00000000004102f1\n.text:00000000004102f8\n.text:00000000004102fd\n.text:0000000000410300\n.text:0000000000410303\n.text:0000000000410310\n.text:0000000000410313\n.text:0000000000410316\n.text:000000000041031b\n.text:000000000041031d\n.text:0000000000410320\n.text:0000000000410325\n.text:0000000000410329\n.text:000000000041032e\n.text:0000000000410330\n.text:0000000000410336\n.text:0000000000410339\n.text:000000000041033c\n.text:000000000041033f\n.text:0000000000410344\n.text:0000000000410348\n.text:000000000041034c\n.text:000000000041034f\n.text:0000000000410351\n.text:0000000000410354\n.text:0000000000410356\n.text:0000000000410358\n.text:000000000041035b\n.text:0000000000410361\n.text:0000000000410366\n.text:0000000000410369\n.text:000000000041036b\n.text:0000000000410370\n.text:0000000000410373\n.text:0000000000410379\n.text:000000000041037c\n.text:000000000041037e\n.text:0000000000410384\n.text:0000000000410387\n.text:000000000041038c\n.text:000000000041038f\n.text:0000000000410395\n.text:000000000041039d\n.text:000000000041039f\n.text:00000000004103a1\n.text:00000000004103a3\n.text:00000000004103a6\n.text:00000000004103ac\n.text:00000000004103b0\n.text:00000000004103b4\n.text:00000000004103b6\n.text:00000000004103bc\n.text:00000000004103bf\n.text:00000000004103c4\n.text:00000000004103c7\n.text:00000000004103c9\n.text:00000000004103ce\n.text:00000000004103d1\n.text:00000000004103d6\n.text:00000000004103db\n.text:00000000004103de\n.text:00000000004103e0\n.text:00000000004103e4\n.text:00000000004103e7\n.text:00000000004103e9\n.text:00000000004103ec\n.text:00000000004103ee\n.text:00000000004103f1\n.text:00000000004103f3\n.text:00000000004103f5\n.text:00000000004103f9\n.text:00000000004103fc\n.text:0000000000410401\n.text:0000000000410403\n.text:0000000000410408\n.text:000000000041040a\n.text:000000000041040f\n.text:0000000000410414\n.text:0000000000410418\n.text:000000000041041b\n.text:000000000041041e\n.text:0000000000410421\n.text:0000000000410423\n.text:0000000000410425\n.text:000000000041042c\n.text:000000000041042f\n.text:0000000000410434\n.text:0000000000410439\n.text:000000000041043e\n.text:0000000000410442\n.text:0000000000410447\n.text:000000000041044a\n.text:000000000041044d\n.text:0000000000410452\n.text:0000000000410455\n.text:000000000041045a\n.text:000000000041045f\n.text:0000000000410461\n.text:0000000000410464\n.text:0000000000410469\n.text:000000000041046e\n.text:0000000000410470\n.text:0000000000410473\n.text:0000000000410478\n.text:000000000041047d\n.text:000000000041047f\n.text:0000000000410482\n.text:0000000000410487\n.text:0000000000410489\n.text:000000000041048c\n.text:0000000000410491\n.text:0000000000410496\n.text:0000000000410498\n.text:000000000041049b\n.text:00000000004104a0\n.text:00000000004104a5\n.text:00000000004104a7\n.text:00000000004104aa\n.text:00000000004104af\n.text:00000000004104b4\n.text:00000000004104b6\n.text:00000000004104b9\n.text:00000000004104be\n.text:00000000004104c3\n.text:00000000004104c5\n.text:00000000004104c8\n.text:00000000004104cd\n.text:00000000004104cf\n.text:00000000004104d2\n.text:00000000004104d7\n.text:00000000004104dc\n.text:00000000004104de\n.text:00000000004104e2\n.text:00000000004104e6\n.text:00000000004104ea\n.text:00000000004104ec\n.text:00000000004104ef\n.text:00000000004104f3\n.text:00000000004104f6\n.text:00000000004104fa\n.text:00000000004104ff\n.text:0000000000410502\n.text:0000000000410504\n.text:0000000000410508\n.text:0000000000410509\n.text:000000000041050b\n.text:000000000041050d\n.text:000000000041050f\n.text:0000000000410511\n.text:0000000000410512\n.text:0000000000410513\n.text:0000000000410518\n.text:000000000041051d\n.text:0000000000410522\n.text:0000000000410527\n'
p174
tp175
sS'print_and_abort'
p176
(S'\n__stdcall print_and_abort()\n'
p177
V\u000avoid print_and_abort(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  __fprintf_chk(uVar1,1,0x414b20,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(exit_failure);\u000a}\u000a\u000a
p178
S'PUSH RBX\nMOV RBX,qword ptr [0x0061a5a0]\nXOR EDI,EDI\nMOV ESI,0x414e2f\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x414b20\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00402a70\nMOV EDI,dword ptr [0x0061a4e0]\nCALL 0x00402a50\n'
p179
S'53\n48 8b 1d 28 99 20 00\n31 ff\nbe 2f 4e 41 00\nba 05 00 00 00\ne8 27 19 ff ff\n48 89 c1\nbe 01 00 00 00\nba 20 4b 41 00\n31 c0\n48 89 df\ne8 d0 1d ff ff\n8b 3d 3a 98 20 00\ne8 a5 1d ff ff\n'
p180
S'.text:0000000000410c70\n.text:0000000000410c71\n.text:0000000000410c78\n.text:0000000000410c7a\n.text:0000000000410c7f\n.text:0000000000410c84\n.text:0000000000410c89\n.text:0000000000410c8c\n.text:0000000000410c91\n.text:0000000000410c96\n.text:0000000000410c98\n.text:0000000000410c9b\n.text:0000000000410ca0\n.text:0000000000410ca6\n'
p181
tp182
sS'setlocale'
p183
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p184
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0061a2b8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x0061a2b8]\n'
p186
S'ff 25 a2 79 21 00\n'
p187
S'.plt:0000000000402910\n'
p188
tp189
sS'compare'
p190
(S'\n__stdcall compare(line * a, line * b)\n'
p191
V\u000aint compare(line *a,line *b)\u000a\u000a{\u000a  ulong uVar1;\u000a  int iVar2;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  ulong __n;\u000a  ulong uVar5;\u000a  \u000a  if (keylist != (keyfield *)0x0) {\u000a    iVar2 = keycompare(a,b);\u000a    if (iVar2 != 0) {\u000a      return iVar2;\u000a    }\u000a    if (unique != 0) {\u000a      return 0;\u000a    }\u000a    if (stable != 0) {\u000a      return 0;\u000a    }\u000a  }\u000a  uVar1 = b->length - 1;\u000a  uVar5 = a->length - 1;\u000a  if (uVar5 == 0) {\u000a    uVar3 = -(uint)(uVar1 != 0);\u000a  }\u000a  else {\u000a    if (uVar1 == 0) {\u000a      uVar3 = 1;\u000a    }\u000a    else {\u000a      if (hard_LC_COLLATE == false) {\u000a        __n = uVar1;\u000a        if (uVar5 < uVar1) {\u000a          __n = uVar5;\u000a        }\u000a        uVar3 = memcmp(a->text,b->text,__n);\u000a        if (uVar3 == 0) {\u000a          uVar3 = 0xffffffff;\u000a          if (uVar1 <= uVar5) {\u000a            uVar3 = (uint)(uVar5 != uVar1);\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        uVar3 = xmemcoll0(a->text,a->length,b->text,b->length);\u000a      }\u000a    }\u000a  }\u000a  uVar4 = -uVar3;\u000a  if (reverse == false) {\u000a    uVar4 = uVar3;\u000a  }\u000a  return (int)uVar4;\u000a}\u000a\u000a
p192
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nCMP qword ptr [0x0061a650],0x0\nJZ 0x00406315\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x00406880\nTEST EAX,EAX\nJNZ 0x0040638d\nXOR EAX,EAX\nMOV CL,byte ptr [0x0061a64a]\nTEST CL,CL\nJNZ 0x0040638d\nMOV CL,byte ptr [0x0061a649]\nTEST CL,CL\nJNZ 0x0040638d\nMOV RSI,qword ptr [RBX + 0x8]\nMOV RCX,qword ptr [R14 + 0x8]\nLEA R15,[RCX + -0x1]\nMOV R12,RSI\nDEC R12\nJZ 0x00406346\nTEST R15,R15\nJZ 0x0040634d\nCMP byte ptr [0x0061a5b0],0x0\nMOV RDI,qword ptr [RBX]\nMOV RDX,qword ptr [R14]\nJZ 0x00406354\nCALL 0x0040fe60\nMOV ECX,EAX\nJMP 0x0040637f\nNEG R15\nSBB ECX,ECX\nJMP 0x0040637f\nMOV ECX,0x1\nJMP 0x0040637f\nCMP R12,R15\nMOV RAX,R15\nCMOVC RAX,R12\nMOV RSI,RDX\nMOV RDX,RAX\nCALL 0x00402710\nMOV ECX,EAX\nTEST ECX,ECX\nJNZ 0x0040637f\nXOR EAX,EAX\nCMP R12,R15\nSETNZ AL\nMOV ECX,0xffffffff\nCMOVNC ECX,EAX\nMOV EAX,ECX\nNEG EAX\nCMP byte ptr [0x0061a658],0x0\nCMOVZ EAX,ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p193
S'41 57\n41 56\n41 54\n53\n50\n49 89 f6\n48 89 fb\n48 83 3d 6a 43 21 00 00\n74 2d\n48 89 df\n4c 89 f6\ne8 8d 05 00 00\n85 c0\n0f 85 92 00 00 00\n31 c0\n8a 0d 47 43 21 00\n84 c9\n0f 85 82 00 00 00\n8a 0d 38 43 21 00\n84 c9\n75 78\n48 8b 73 08\n49 8b 4e 08\n4c 8d 79 ff\n49 89 f4\n49 ff cc\n74 1d\n4d 85 ff\n74 1f\n80 3d 7b 42 21 00 00\n48 8b 3b\n49 8b 16\n74 17\ne8 1e 9b 00 00\n89 c1\neb 39\n49 f7 df\n19 c9\neb 32\nb9 01 00 00 00\neb 2b\n4d 39 fc\n4c 89 f8\n49 0f 42 c4\n48 89 d6\n48 89 c2\ne8 a7 c3 ff ff\n89 c1\n85 c9\n75 10\n31 c0\n4d 39 fc\n0f 95 c0\nb9 ff ff ff ff\n0f 43 c8\n89 c8\nf7 d8\n80 3d ce 42 21 00 00\n0f 44 c1\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p194
S'.text:00000000004062d0\n.text:00000000004062d2\n.text:00000000004062d4\n.text:00000000004062d6\n.text:00000000004062d7\n.text:00000000004062d8\n.text:00000000004062db\n.text:00000000004062de\n.text:00000000004062e6\n.text:00000000004062e8\n.text:00000000004062eb\n.text:00000000004062ee\n.text:00000000004062f3\n.text:00000000004062f5\n.text:00000000004062fb\n.text:00000000004062fd\n.text:0000000000406303\n.text:0000000000406305\n.text:000000000040630b\n.text:0000000000406311\n.text:0000000000406313\n.text:0000000000406315\n.text:0000000000406319\n.text:000000000040631d\n.text:0000000000406321\n.text:0000000000406324\n.text:0000000000406327\n.text:0000000000406329\n.text:000000000040632c\n.text:000000000040632e\n.text:0000000000406335\n.text:0000000000406338\n.text:000000000040633b\n.text:000000000040633d\n.text:0000000000406342\n.text:0000000000406344\n.text:0000000000406346\n.text:0000000000406349\n.text:000000000040634b\n.text:000000000040634d\n.text:0000000000406352\n.text:0000000000406354\n.text:0000000000406357\n.text:000000000040635a\n.text:000000000040635e\n.text:0000000000406361\n.text:0000000000406364\n.text:0000000000406369\n.text:000000000040636b\n.text:000000000040636d\n.text:000000000040636f\n.text:0000000000406371\n.text:0000000000406374\n.text:0000000000406377\n.text:000000000040637c\n.text:000000000040637f\n.text:0000000000406381\n.text:0000000000406383\n.text:000000000040638a\n.text:000000000040638d\n.text:0000000000406391\n.text:0000000000406392\n.text:0000000000406394\n.text:0000000000406396\n.text:0000000000406398\n'
p195
tp196
sS'c_toupper'
p197
(S'\n__stdcall c_toupper()\n'
p198
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p199
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p200
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p201
S'.text:0000000000410ed0\n.text:0000000000410ed3\n.text:0000000000410ed6\n.text:0000000000410ed9\n.text:0000000000410edc\n'
p202
tp203
sS'fcntl'
p204
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p205
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_0061a0b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x0061a0b0]\n'
p207
S'ff 25 aa 7b 21 00\n'
p208
S'.plt:0000000000402500\n'
p209
tp210
sS'mbsinit'
p211
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0061a388)();\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x0061a388]\n'
p214
S'ff 25 d2 78 21 00\n'
p215
S'.plt:0000000000402ab0\n'
p216
tp217
sS'delete_proc'
p218
(S'\n__stdcall delete_proc()\n'
p219
V\u000a_Bool delete_proc(void)\u000a\u000a{\u000a  void *pvVar1;\u000a  undefined local_10 [16];\u000a  \u000a  pvVar1 = hash_delete(proctab,local_10);\u000a  if (pvVar1 != (void *)0x0) {\u000a    *(undefined *)((long)pvVar1 + 0xc) = 2;\u000a  }\u000a  return (_Bool)(pvVar1 != (void *)0x0);\u000a}\u000a\u000a
p220
S'SUB RSP,0x18\nMOV dword ptr [RSP + 0x10],EDI\nMOV RDI,qword ptr [0x0061ab28]\nLEA RSI,[RSP + 0x8]\nCALL 0x0040be60\nTEST RAX,RAX\nJZ 0x00408ab6\nMOV byte ptr [RAX + 0xc],0x2\nMOV AL,0x1\nJMP 0x00408ab8\nXOR EAX,EAX\nADD RSP,0x18\nRET\n'
p221
S'48 83 ec 18\n89 7c 24 10\n48 8b 3d 89 20 21 00\n48 8d 74 24 08\ne8 b7 33 00 00\n48 85 c0\n74 08\nc6 40 0c 02\nb0 01\neb 02\n31 c0\n48 83 c4 18\nc3\n'
p222
S'.text:0000000000408a90\n.text:0000000000408a94\n.text:0000000000408a98\n.text:0000000000408a9f\n.text:0000000000408aa4\n.text:0000000000408aa9\n.text:0000000000408aac\n.text:0000000000408aae\n.text:0000000000408ab2\n.text:0000000000408ab4\n.text:0000000000408ab6\n.text:0000000000408ab8\n.text:0000000000408abc\n'
p223
tp224
sS'proctab_hasher'
p225
(S'\n__stdcall proctab_hasher(void * entry, size_t tabsize)\n'
p226
V\u000asize_t proctab_hasher(void *entry,size_t tabsize)\u000a\u000a{\u000a  return (ulong)(long)*(int *)((long)entry + 8) % tabsize;\u000a}\u000a\u000a
p227
S'MOVSXD RAX,dword ptr [RDI + 0x8]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p228
S'48 63 47 08\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p229
S'.text:0000000000408be0\n.text:0000000000408be4\n.text:0000000000408be6\n.text:0000000000408be9\n.text:0000000000408bec\n'
p230
tp231
sS'deregister_tm_clones'
p232
(S'\n__stdcall deregister_tm_clones()\n'
p233
V\u000a/* WARNING: Removing unreachable block (ram,0x00402b85) */\u000a/* WARNING: Removing unreachable block (ram,0x00402b8f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p234
S'MOV EAX,0x61a54f\nPUSH RBP\nSUB RAX,0x61a548\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00402ba0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00402ba0\nPOP RBP\nMOV EDI,0x61a548\nJMP RAX\nPOP RBP\nRET\n'
p235
S'b8 4f a5 61 00\n55\n48 2d 48 a5 61 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 48 a5 61 00\nff e0\n5d\nc3\n'
p236
S'.text:0000000000402b70\n.text:0000000000402b75\n.text:0000000000402b76\n.text:0000000000402b7c\n.text:0000000000402b80\n.text:0000000000402b83\n.text:0000000000402b85\n.text:0000000000402b8a\n.text:0000000000402b8d\n.text:0000000000402b8f\n.text:0000000000402b90\n.text:0000000000402b95\n.text:0000000000402ba0\n.text:0000000000402ba1\n'
p237
tp238
sS'fputc_unlocked'
p239
(S'\n__stdcall fputc_unlocked(int __c, FILE * __stream)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputc_unlocked(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputc_unlocked_0061a1f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x0061a1f8]\n'
p242
S'ff 25 62 7a 21 00\n'
p243
S'.plt:0000000000402790\n'
p244
tp245
sS'xfclose'
p246
(S'\n__stdcall xfclose(FILE * fp, char * file)\n'
p247
V\u000avoid xfclose(FILE *fp,char *file)\u000a\u000a{\u000a  int iVar1;\u000a  char *message;\u000a  \u000a  iVar1 = fileno((FILE *)fp);\u000a  if (iVar1 == 1) {\u000a    iVar1 = fflush_unlocked((FILE *)fp);\u000a    if (iVar1 != 0) {\u000a      message = "fflush failed";\u000aLAB_00406523:\u000a      message = (char *)dcgettext(0,message,5);\u000a                    /* WARNING: Subroutine does not return */\u000a      die(message,file);\u000a    }\u000a  }\u000a  else {\u000a    if (iVar1 == 0) {\u000a      iVar1 = feof_unlocked((FILE *)fp);\u000a      if (iVar1 != 0) {\u000a        (*(code *)PTR_clearerr_unlocked_0061a0b8)(fp);\u000a        return;\u000a      }\u000a    }\u000a    else {\u000a      iVar1 = rpl_fclose(fp);\u000a      if (iVar1 != 0) {\u000a        message = "close failed";\u000a        goto LAB_00406523;\u000a      }\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p248
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x004027e0\nCMP EAX,0x1\nJZ 0x004064f3\nTEST EAX,EAX\nJNZ 0x00406508\nMOV RDI,RBX\nCALL 0x00402b10\nTEST EAX,EAX\nJZ 0x00406514\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00402510\nMOV RDI,RBX\nCALL 0x00402aa0\nTEST EAX,EAX\nJZ 0x00406514\nXOR EDI,EDI\nMOV ESI,0x413f3c\nJMP 0x00406523\nMOV RDI,RBX\nCALL 0x004105f0\nTEST EAX,EAX\nJNZ 0x0040651c\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nXOR EDI,EDI\nMOV ESI,0x413822\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00405c70\n'
p249
S'41 56\n53\n50\n49 89 f6\n48 89 fb\ne8 11 c3 ff ff\n83 f8 01\n74 1f\n85 c0\n75 30\n48 89 df\ne8 30 c6 ff ff\n85 c0\n74 30\n48 89 df\n48 83 c4 08\n5b\n41 5e\ne9 1d c0 ff ff\n48 89 df\ne8 a5 c5 ff ff\n85 c0\n74 15\n31 ff\nbe 3c 3f 41 00\neb 1b\n48 89 df\ne8 e0 a0 00 00\n85 c0\n75 08\n48 83 c4 08\n5b\n41 5e\nc3\n31 ff\nbe 22 38 41 00\nba 05 00 00 00\ne8 83 c0 ff ff\n48 89 c7\n4c 89 f6\ne8 38 f7 ff ff\n'
p250
S'.text:00000000004064c0\n.text:00000000004064c2\n.text:00000000004064c3\n.text:00000000004064c4\n.text:00000000004064c7\n.text:00000000004064ca\n.text:00000000004064cf\n.text:00000000004064d2\n.text:00000000004064d4\n.text:00000000004064d6\n.text:00000000004064d8\n.text:00000000004064db\n.text:00000000004064e0\n.text:00000000004064e2\n.text:00000000004064e4\n.text:00000000004064e7\n.text:00000000004064eb\n.text:00000000004064ec\n.text:00000000004064ee\n.text:00000000004064f3\n.text:00000000004064f6\n.text:00000000004064fb\n.text:00000000004064fd\n.text:00000000004064ff\n.text:0000000000406501\n.text:0000000000406506\n.text:0000000000406508\n.text:000000000040650b\n.text:0000000000406510\n.text:0000000000406512\n.text:0000000000406514\n.text:0000000000406518\n.text:0000000000406519\n.text:000000000040651b\n.text:000000000040651c\n.text:000000000040651e\n.text:0000000000406523\n.text:0000000000406528\n.text:000000000040652d\n.text:0000000000406530\n.text:0000000000406533\n'
p251
tp252
sS'quotearg_custom'
p253
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p254
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p255
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x0040ddc0\n'
p256
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p257
S'.text:000000000040de40\n.text:000000000040de43\n.text:000000000040de46\n.text:000000000040de49\n.text:000000000040de4b\n.text:000000000040de4e\n.text:000000000040de51\n.text:000000000040de54\n'
p258
tp259
sS'close'
p260
(S'\n__stdcall close(int __fd)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0061a190)();\u000a  return iVar1;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x0061a190]\n'
p263
S'ff 25 ca 7a 21 00\n'
p264
S'.plt:00000000004026c0\n'
p265
tp266
sS'getenv'
p267
(S'\n__stdcall getenv(char * __name)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0061a018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x0061a018]\n'
p270
S'ff 25 42 7c 21 00\n'
p271
S'.plt:00000000004023d0\n'
p272
tp273
sS'putchar_unlocked'
p274
(S'\n__stdcall putchar_unlocked(int __c)\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_0061a218)();\u000a  return iVar1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x0061a218]\n'
p277
S'ff 25 42 7a 21 00\n'
p278
S'.plt:00000000004027d0\n'
p279
tp280
sS'rpl_fseeko'
p281
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p282
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0061a2f8)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p283
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x004108a8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x004108a8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x004108ba\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00402990\nMOV RDI,RBX\nCALL 0x004027e0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00402660\nCMP RAX,-0x1\nJZ 0x004108e3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x004108e8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p284
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 d6 20 ff ff\n48 89 df\ne8 1e 1f ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 91 1d ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p285
S'.text:0000000000410880\n.text:0000000000410881\n.text:0000000000410883\n.text:0000000000410884\n.text:0000000000410887\n.text:000000000041088a\n.text:000000000041088d\n.text:0000000000410891\n.text:0000000000410895\n.text:0000000000410897\n.text:000000000041089b\n.text:000000000041089f\n.text:00000000004108a1\n.text:00000000004108a6\n.text:00000000004108a8\n.text:00000000004108ab\n.text:00000000004108ae\n.text:00000000004108b1\n.text:00000000004108b2\n.text:00000000004108b4\n.text:00000000004108b5\n.text:00000000004108ba\n.text:00000000004108bd\n.text:00000000004108c2\n.text:00000000004108c4\n.text:00000000004108c7\n.text:00000000004108ca\n.text:00000000004108cf\n.text:00000000004108d3\n.text:00000000004108d5\n.text:00000000004108d8\n.text:00000000004108df\n.text:00000000004108e1\n.text:00000000004108e3\n.text:00000000004108e8\n.text:00000000004108e9\n.text:00000000004108eb\n.text:00000000004108ec\n'
p286
tp287
sS'rotr8'
p288
(S'\n__stdcall rotr8()\n'
p289
V\u000auint8_t rotr8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI << (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p290
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p291
S'89 f8\n89 f1\nd3 e8\nb9 08 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p292
S'.text:0000000000410d70\n.text:0000000000410d72\n.text:0000000000410d74\n.text:0000000000410d76\n.text:0000000000410d7b\n.text:0000000000410d7d\n.text:0000000000410d7f\n.text:0000000000410d81\n.text:0000000000410d83\n'
p293
tp294
sS'is_prime'
p295
(S'\n__stdcall is_prime(size_t candidate)\n'
p296
V\u000a_Bool is_prime(size_t candidate)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  long lVar3;\u000a  bool bVar4;\u000a  \u000a  bVar4 = candidate != (candidate / 3) * 3;\u000a  if ((9 < candidate) && (bVar4)) {\u000a    uVar2 = 9;\u000a    lVar3 = 0x10;\u000a    uVar1 = 5;\u000a    do {\u000a      uVar2 = uVar2 + lVar3;\u000a      bVar4 = candidate % uVar1 != 0;\u000a      if (candidate <= uVar2) {\u000a        return (_Bool)bVar4;\u000a      }\u000a      lVar3 = lVar3 + 8;\u000a      uVar1 = uVar1 + 2;\u000a    } while (bVar4);\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p297
S'MOV R8,RDI\nMOV RCX,-0x5555555555555555\nMOV RAX,R8\nMUL RCX\nSHR RDX,1\nLEA RAX,[RDX + RDX*0x2]\nCMP R8,RAX\nSETNZ AL\nSETZ CL\nCMP R8,0xa\nJC 0x0040c0b5\nTEST CL,CL\nJNZ 0x0040c0b5\nMOV ESI,0x9\nMOV EDI,0x10\nMOV ECX,0x5\nNOP dword ptr [RAX]\nADD RSI,RDI\nXOR EDX,EDX\nMOV RAX,R8\nDIV RCX\nTEST RDX,RDX\nSETNZ AL\nSETZ DL\nCMP RSI,R8\nJNC 0x0040c0b5\nADD RDI,0x8\nADD RCX,0x2\nTEST DL,DL\nJZ 0x0040c090\nRET\n'
p298
S'49 89 f8\n48 b9 ab aa aa aa aa aa aa aa\n4c 89 c0\n48 f7 e1\n48 d1 ea\n48 8d 04 52\n49 39 c0\n0f 95 c0\n0f 94 c1\n49 83 f8 0a\n72 3c\n84 c9\n75 38\nbe 09 00 00 00\nbf 10 00 00 00\nb9 05 00 00 00\n0f 1f 40 00\n48 01 fe\n31 d2\n4c 89 c0\n48 f7 f1\n48 85 d2\n0f 95 c0\n0f 94 c2\n4c 39 c6\n73 0c\n48 83 c7 08\n48 83 c1 02\n84 d2\n74 db\nc3\n'
p299
S'.text:000000000040c050\n.text:000000000040c053\n.text:000000000040c05d\n.text:000000000040c060\n.text:000000000040c063\n.text:000000000040c066\n.text:000000000040c06a\n.text:000000000040c06d\n.text:000000000040c070\n.text:000000000040c073\n.text:000000000040c077\n.text:000000000040c079\n.text:000000000040c07b\n.text:000000000040c07d\n.text:000000000040c082\n.text:000000000040c087\n.text:000000000040c08c\n.text:000000000040c090\n.text:000000000040c093\n.text:000000000040c095\n.text:000000000040c098\n.text:000000000040c09b\n.text:000000000040c09e\n.text:000000000040c0a1\n.text:000000000040c0a4\n.text:000000000040c0a7\n.text:000000000040c0a9\n.text:000000000040c0ad\n.text:000000000040c0b1\n.text:000000000040c0b3\n.text:000000000040c0b5\n'
p300
tp301
sS'fscanf'
p302
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0061a180)();\u000a  return iVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x0061a180]\n'
p305
S'ff 25 da 7a 21 00\n'
p306
S'.plt:00000000004026a0\n'
p307
tp308
sS'memcpy'
p309
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0061a210)();\u000a  return pvVar1;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x0061a210]\n'
p312
S'ff 25 4a 7a 21 00\n'
p313
S'.plt:00000000004027c0\n'
p314
tp315
sS'collate_error'
p316
(S'\n__stdcall collate_error(char * s1, size_t s1len, char * s2, size_t s2len)\n'
p317
V\u000avoid collate_error(char *s1,size_t s1len,char *s2,size_t s2len)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  \u000a  uVar2 = dcgettext(0,"string comparison failed",5);\u000a  error(0,(ulong)s1 & 0xffffffff,uVar2,uVar2);\u000a  uVar2 = dcgettext(0,"Set LC_ALL=\u005c'C\u005c' to work around the problem.",5);\u000a  error(0,0,uVar2,uVar2);\u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"The strings compared were %s and %s.",5);\u000a  pcVar3 = quotearg_n_style_mem((char *)0x0,8);\u000a  pcVar4 = quotearg_n_style_mem((char *)0x1,8);\u000a  error((ulong)(uint)iVar1,0,uVar2,pcVar3,pcVar4);\u000a  return;\u000a}\u000a\u000a
p318
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV qword ptr [RSP],R8\nMOV RBX,RCX\nMOV R12,RDX\nMOV R13,RSI\nMOV EBP,EDI\nXOR EDI,EDI\nMOV ESI,0x414e40\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00402960\nXOR EDI,EDI\nMOV ESI,0x414e59\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402960\nMOV R14D,dword ptr [0x0061a4e0]\nXOR EDI,EDI\nMOV ESI,0x414e84\nMOV EDX,0x5\nCALL 0x004025b0\nMOV R15,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R13\nMOV RCX,R12\nCALL 0x0040dc50\nMOV RBP,RAX\nMOV EDI,0x1\nMOV ESI,0x8\nMOV RDX,RBX\nMOV RCX,qword ptr [RSP]\nCALL 0x0040dc50\nMOV RBX,RAX\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV RDX,R15\nMOV RCX,RBP\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402960\n'
p319
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4c 89 04 24\n48 89 cb\n49 89 d4\n49 89 f5\n89 fd\n31 ff\nbe 40 4e 41 00\nba 05 00 00 00\ne8 f5 27 ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\ne8 94 2b ff ff\n31 ff\nbe 59 4e 41 00\nba 05 00 00 00\ne8 d3 27 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 72 2b ff ff\n44 8b 35 eb a6 20 00\n31 ff\nbe 84 4e 41 00\nba 05 00 00 00\ne8 aa 27 ff ff\n49 89 c7\n31 ff\nbe 08 00 00 00\n4c 89 ea\n4c 89 e1\ne8 35 de ff ff\n48 89 c5\nbf 01 00 00 00\nbe 08 00 00 00\n48 89 da\n48 8b 0c 24\ne8 1c de ff ff\n48 89 c3\n31 f6\n31 c0\n44 89 f7\n4c 89 fa\n48 89 e9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 06 2b ff ff\n'
p320
S'.text:000000000040fd90\n.text:000000000040fd91\n.text:000000000040fd93\n.text:000000000040fd95\n.text:000000000040fd97\n.text:000000000040fd99\n.text:000000000040fd9a\n.text:000000000040fd9b\n.text:000000000040fd9f\n.text:000000000040fda2\n.text:000000000040fda5\n.text:000000000040fda8\n.text:000000000040fdaa\n.text:000000000040fdac\n.text:000000000040fdb1\n.text:000000000040fdb6\n.text:000000000040fdbb\n.text:000000000040fdbe\n.text:000000000040fdc0\n.text:000000000040fdc2\n.text:000000000040fdc4\n.text:000000000040fdc7\n.text:000000000040fdcc\n.text:000000000040fdce\n.text:000000000040fdd3\n.text:000000000040fdd8\n.text:000000000040fddd\n.text:000000000040fde0\n.text:000000000040fde2\n.text:000000000040fde4\n.text:000000000040fde6\n.text:000000000040fde9\n.text:000000000040fdee\n.text:000000000040fdf5\n.text:000000000040fdf7\n.text:000000000040fdfc\n.text:000000000040fe01\n.text:000000000040fe06\n.text:000000000040fe09\n.text:000000000040fe0b\n.text:000000000040fe10\n.text:000000000040fe13\n.text:000000000040fe16\n.text:000000000040fe1b\n.text:000000000040fe1e\n.text:000000000040fe23\n.text:000000000040fe28\n.text:000000000040fe2b\n.text:000000000040fe2f\n.text:000000000040fe34\n.text:000000000040fe37\n.text:000000000040fe39\n.text:000000000040fe3b\n.text:000000000040fe3e\n.text:000000000040fe41\n.text:000000000040fe44\n.text:000000000040fe47\n.text:000000000040fe4b\n.text:000000000040fe4c\n.text:000000000040fe4e\n.text:000000000040fe50\n.text:000000000040fe52\n.text:000000000040fe54\n.text:000000000040fe55\n'
p321
tp322
sS'isaac_refill'
p323
(S'\n__stdcall isaac_refill(isaac_state * s, isaac_word * result)\n'
p324
V\u000avoid isaac_refill(isaac_state *s,isaac_word *result)\u000a\u000a{\u000a  isaac_state *piVar1;\u000a  isaac_word x;\u000a  isaac_state *piVar2;\u000a  isaac_word iVar3;\u000a  ulong uVar4;\u000a  isaac_word iVar5;\u000a  ulong a;\u000a  isaac_word *piVar6;\u000a  isaac_word *piVar7;\u000a  ulong a_00;\u000a  isaac_word *local_48;\u000a  \u000a  uVar4 = s->a;\u000a  x = s->c + 1;\u000a  iVar5 = s->b + x;\u000a  s->c = x;\u000a  piVar1 = (isaac_state *)(s->m + 0x80);\u000a  piVar2 = (isaac_state *)(s->m + 4);\u000a  if ((isaac_state *)(s->m + 4) < piVar1) {\u000a    piVar2 = piVar1;\u000a  }\u000a  a_00 = (long)piVar2->m + ~(ulong)s;\u000a  local_48 = (isaac_word *)((long)result + (a_00 & 0xffffffffffffffe0) + 0x20);\u000a  piVar2 = s;\u000a  do {\u000a    a = ~(uVar4 << 0x15 ^ uVar4) + piVar2->m[0x80];\u000a    x = piVar2->m[0];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar3 + iVar5 + a;\u000a    piVar2->m[0] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    *result = iVar5;\u000a    x = just(a);\u000a    a = (x >> 5 ^ a) + piVar2->m[0x81];\u000a    x = piVar2->m[1];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar5 + a + iVar3;\u000a    piVar2->m[1] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    result[1] = iVar5;\u000a    a = (a * 0x1000 ^ a) + piVar2->m[0x82];\u000a    x = piVar2->m[2];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar5 + a + iVar3;\u000a    piVar2->m[2] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    result[2] = iVar5;\u000a    x = just(a);\u000a    uVar4 = (x >> 0x21 ^ a) + piVar2->m[0x83];\u000a    x = piVar2->m[3];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    a = iVar5 + uVar4 + iVar3;\u000a    piVar2->m[3] = a;\u000a    iVar5 = ind((isaac_word *)s,a >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    result[3] = iVar5;\u000a    piVar2 = (isaac_state *)(piVar2->m + 4);\u000a    result = result + 4;\u000a  } while (piVar2 < piVar1);\u000a  piVar6 = (isaac_word *)((long)s->m + (a_00 & 0xffffffffffffffe0) + 0x38);\u000a  do {\u000a    a_00 = ~(uVar4 << 0x15 ^ uVar4) + piVar6[-0x83];\u000a    x = piVar6[-3];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar3 + iVar5 + a_00;\u000a    piVar6[-3] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    *local_48 = iVar5;\u000a    x = just(a_00);\u000a    uVar4 = (x >> 5 ^ a_00) + piVar6[-0x82];\u000a    x = piVar6[-2];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    a_00 = iVar5 + uVar4 + iVar3;\u000a    piVar6[-2] = a_00;\u000a    iVar5 = ind((isaac_word *)s,a_00 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    local_48[1] = iVar5;\u000a    a_00 = (uVar4 * 0x1000 ^ uVar4) + piVar6[-0x81];\u000a    x = piVar6[-1];\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    uVar4 = iVar5 + a_00 + iVar3;\u000a    piVar6[-1] = uVar4;\u000a    iVar5 = ind((isaac_word *)s,uVar4 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    local_48[2] = iVar5;\u000a    x = just(a_00);\u000a    uVar4 = (x >> 0x21 ^ a_00) + piVar6[-0x80];\u000a    x = *piVar6;\u000a    iVar3 = ind((isaac_word *)s,x);\u000a    a_00 = iVar5 + uVar4 + iVar3;\u000a    *piVar6 = a_00;\u000a    iVar5 = ind((isaac_word *)s,a_00 >> 8);\u000a    iVar5 = just(x + iVar5);\u000a    local_48[3] = iVar5;\u000a    piVar7 = piVar6 + 1;\u000a    local_48 = local_48 + 4;\u000a    piVar6 = piVar6 + 4;\u000a  } while (piVar7 < &s->a);\u000a  s->a = uVar4;\u000a  s->b = iVar5;\u000a  return;\u000a}\u000a\u000a
p325
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBP,RSI\nMOV R14,RDI\nMOV RBX,qword ptr [0x800 + R14]\nMOV RAX,qword ptr [0x810 + R14]\nINC RAX\nMOV R12,qword ptr [0x808 + R14]\nADD R12,RAX\nMOV qword ptr [0x810 + R14],RAX\nLEA RCX,[0x400 + R14]\nLEA RAX,[R14 + 0x20]\nCMP RCX,RAX\nMOV qword ptr [RSP + 0x20],RCX\nCMOVA RAX,RCX\nMOV RCX,R14\nNOT RCX\nADD RCX,RAX\nSHR RCX,0x5\nLEA RAX,[RCX*0x4]\nMOV qword ptr [RSP + 0x18],RAX\nSHL RCX,0x5\nLEA RAX,[RBP + RCX*0x1 + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,qword ptr [RSP + 0x8]\nNOP\nMOV qword ptr [RSP],RBP\nMOV R13,RBX\nSHL R13,0x15\nXOR R13,RBX\nNOT R13\nADD R13,qword ptr [0x400 + R14]\nMOV RBX,qword ptr [R14]\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x0040eb20\nADD RAX,R12\nADD RAX,R13\nMOV qword ptr [R14],RAX\nSHR RAX,0x8\nMOV RDI,R15\nMOV RSI,RAX\nCALL 0x0040eb20\nADD RBX,RAX\nMOV RDI,RBX\nCALL 0x0040eb30\nMOV RBX,RAX\nMOV qword ptr [RBP],RBX\nMOV RDI,R13\nCALL 0x0040eb30\nMOV RBP,RAX\nSHR RBP,0x5\nXOR RBP,R13\nADD RBP,qword ptr [0x408 + R14]\nMOV R12,qword ptr [R14 + 0x8]\nMOV RDI,R15\nMOV RSI,R12\nCALL 0x0040eb20\nADD RBX,RBP\nADD RBX,RAX\nMOV qword ptr [R14 + 0x8],RBX\nSHR RBX,0x8\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x0040eb20\nADD R12,RAX\nMOV RDI,R12\nCALL 0x0040eb30\nMOV RBX,RAX\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RAX + 0x8],RBX\nMOV R12,RBP\nSHL R12,0xc\nXOR R12,RBP\nADD R12,qword ptr [0x410 + R14]\nMOV RBP,qword ptr [R14 + 0x10]\nMOV RDI,R15\nMOV RSI,RBP\nCALL 0x0040eb20\nADD RBX,R12\nADD RBX,RAX\nMOV qword ptr [R14 + 0x10],RBX\nSHR RBX,0x8\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x0040eb20\nADD RBP,RAX\nMOV RDI,RBP\nCALL 0x0040eb30\nMOV RBP,RAX\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RAX + 0x10],RBP\nMOV RDI,R12\nCALL 0x0040eb30\nMOV RBX,RAX\nSHR RBX,0x21\nXOR RBX,R12\nADD RBX,qword ptr [0x418 + R14]\nMOV R12,qword ptr [R14 + 0x18]\nMOV RDI,R15\nMOV RSI,R12\nCALL 0x0040eb20\nADD RBP,RBX\nADD RBP,RAX\nMOV qword ptr [R14 + 0x18],RBP\nSHR RBP,0x8\nMOV RDI,R15\nMOV RSI,RBP\nMOV RBP,qword ptr [RSP]\nCALL 0x0040eb20\nADD R12,RAX\nMOV RDI,R12\nCALL 0x0040eb30\nMOV R12,RAX\nMOV qword ptr [RBP + 0x18],R12\nADD R14,0x20\nADD RBP,0x20\nCMP R14,qword ptr [RSP + 0x20]\nJC 0x0040e800\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[0x800 + RCX]\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nLEA R13,[RCX + RAX*0x8 + 0x38]\nMOV R14,qword ptr [RSP + 0x8]\nNOP\nMOV R15,RBX\nSHL R15,0x15\nXOR R15,RBX\nNOT R15\nADD R15,qword ptr [-0x418 + R13]\nMOV RBX,qword ptr [R13 + -0x18]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x0040eb20\nADD RAX,R12\nADD RAX,R15\nMOV qword ptr [R13 + -0x18],RAX\nSHR RAX,0x8\nMOV RDI,R14\nMOV RSI,RAX\nCALL 0x0040eb20\nADD RBX,RAX\nMOV RDI,RBX\nCALL 0x0040eb30\nMOV RBP,RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RAX],RBP\nMOV R12,RAX\nMOV RDI,R15\nCALL 0x0040eb30\nMOV RBX,RAX\nSHR RBX,0x5\nXOR RBX,R15\nADD RBX,qword ptr [-0x410 + R13]\nMOV R15,qword ptr [R13 + -0x10]\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x0040eb20\nADD RBP,RBX\nADD RBP,RAX\nMOV qword ptr [R13 + -0x10],RBP\nSHR RBP,0x8\nMOV RDI,R14\nMOV RSI,RBP\nCALL 0x0040eb20\nADD R15,RAX\nMOV RDI,R15\nCALL 0x0040eb30\nMOV RBP,RAX\nMOV qword ptr [R12 + 0x8],RBP\nMOV qword ptr [RSP + 0x10],R12\nMOV R15,RBX\nSHL R15,0xc\nXOR R15,RBX\nADD R15,qword ptr [-0x408 + R13]\nMOV RBX,qword ptr [R13 + -0x8]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x0040eb20\nADD RBP,R15\nADD RBP,RAX\nMOV qword ptr [R13 + -0x8],RBP\nSHR RBP,0x8\nMOV RDI,R14\nMOV RSI,RBP\nCALL 0x0040eb20\nADD RBX,RAX\nMOV RDI,RBX\nCALL 0x0040eb30\nMOV RBP,RAX\nMOV qword ptr [R12 + 0x10],RBP\nMOV RDI,R15\nCALL 0x0040eb30\nMOV RBX,RAX\nSHR RBX,0x21\nXOR RBX,R15\nADD RBX,qword ptr [-0x400 + R13]\nMOV R15,qword ptr [R13]\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x0040eb20\nADD RBP,RBX\nADD RBP,RAX\nMOV qword ptr [R13],RBP\nSHR RBP,0x8\nMOV RDI,R14\nMOV RSI,RBP\nCALL 0x0040eb20\nADD R15,RAX\nMOV RDI,R15\nCALL 0x0040eb30\nMOV R12,RAX\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RCX + 0x18],R12\nLEA RAX,[R13 + 0x20]\nADD R13,0x8\nADD RCX,0x20\nMOV qword ptr [RSP + 0x10],RCX\nCMP R13,qword ptr [RSP]\nMOV R13,RAX\nJC 0x0040e980\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [0x800 + RAX],RBX\nMOV qword ptr [0x808 + RAX],R12\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p326
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 f5\n49 89 fe\n49 8b 9e 00 08 00 00\n49 8b 86 10 08 00 00\n48 ff c0\n4d 8b a6 08 08 00 00\n49 01 c4\n49 89 86 10 08 00 00\n49 8d 8e 00 04 00 00\n49 8d 46 20\n48 39 c1\n48 89 4c 24 20\n48 0f 47 c1\n4c 89 f1\n48 f7 d1\n48 01 c1\n48 c1 e9 05\n48 8d 04 8d 00 00 00 00\n48 89 44 24 18\n48 c1 e1 05\n48 8d 44 0d 20\n48 89 44 24 10\n4c 89 74 24 08\n4c 8b 7c 24 08\n90\n48 89 2c 24\n49 89 dd\n49 c1 e5 15\n49 31 dd\n49 f7 d5\n4d 03 ae 00 04 00 00\n49 8b 1e\n4c 89 ff\n48 89 de\ne8 fa 02 00 00\n4c 01 e0\n4c 01 e8\n49 89 06\n48 c1 e8 08\n4c 89 ff\n48 89 c6\ne8 e2 02 00 00\n48 01 c3\n48 89 df\ne8 e7 02 00 00\n48 89 c3\n48 89 5d 00\n4c 89 ef\ne8 d8 02 00 00\n48 89 c5\n48 c1 ed 05\n4c 31 ed\n49 03 ae 08 04 00 00\n4d 8b 66 08\n4c 89 ff\n4c 89 e6\ne8 a8 02 00 00\n48 01 eb\n48 01 c3\n49 89 5e 08\n48 c1 eb 08\n4c 89 ff\n48 89 de\ne8 8f 02 00 00\n49 01 c4\n4c 89 e7\ne8 94 02 00 00\n48 89 c3\n48 8b 04 24\n48 89 58 08\n49 89 ec\n49 c1 e4 0c\n49 31 ec\n4d 03 a6 10 04 00 00\n49 8b 6e 10\n4c 89 ff\n48 89 ee\ne8 59 02 00 00\n4c 01 e3\n48 01 c3\n49 89 5e 10\n48 c1 eb 08\n4c 89 ff\n48 89 de\ne8 40 02 00 00\n48 01 c5\n48 89 ef\ne8 45 02 00 00\n48 89 c5\n48 8b 04 24\n48 89 68 10\n4c 89 e7\ne8 32 02 00 00\n48 89 c3\n48 c1 eb 21\n4c 31 e3\n49 03 9e 18 04 00 00\n4d 8b 66 18\n4c 89 ff\n4c 89 e6\ne8 02 02 00 00\n48 01 dd\n48 01 c5\n49 89 6e 18\n48 c1 ed 08\n4c 89 ff\n48 89 ee\n48 8b 2c 24\ne8 e5 01 00 00\n49 01 c4\n4c 89 e7\ne8 ea 01 00 00\n49 89 c4\n4c 89 65 18\n49 83 c6 20\n48 83 c5 20\n4c 3b 74 24 20\n0f 82 a0 fe ff ff\n48 8b 4c 24 08\n48 8d 81 00 08 00 00\n48 89 04 24\n48 8b 44 24 18\n4c 8d 6c c1 38\n4c 8b 74 24 08\n90\n49 89 df\n49 c1 e7 15\n49 31 df\n49 f7 d7\n4d 03 bd e8 fb ff ff\n49 8b 5d e8\n4c 89 f7\n48 89 de\ne8 7d 01 00 00\n4c 01 e0\n4c 01 f8\n49 89 45 e8\n48 c1 e8 08\n4c 89 f7\n48 89 c6\ne8 64 01 00 00\n48 01 c3\n48 89 df\ne8 69 01 00 00\n48 89 c5\n48 8b 44 24 10\n48 89 28\n49 89 c4\n4c 89 ff\ne8 53 01 00 00\n48 89 c3\n48 c1 eb 05\n4c 31 fb\n49 03 9d f0 fb ff ff\n4d 8b 7d f0\n4c 89 f7\n4c 89 fe\ne8 23 01 00 00\n48 01 dd\n48 01 c5\n49 89 6d f0\n48 c1 ed 08\n4c 89 f7\n48 89 ee\ne8 0a 01 00 00\n49 01 c7\n4c 89 ff\ne8 0f 01 00 00\n48 89 c5\n49 89 6c 24 08\n4c 89 64 24 10\n49 89 df\n49 c1 e7 0c\n49 31 df\n4d 03 bd f8 fb ff ff\n49 8b 5d f8\n4c 89 f7\n48 89 de\ne8 d2 00 00 00\n4c 01 fd\n48 01 c5\n49 89 6d f8\n48 c1 ed 08\n4c 89 f7\n48 89 ee\ne8 b9 00 00 00\n48 01 c3\n48 89 df\ne8 be 00 00 00\n48 89 c5\n49 89 6c 24 10\n4c 89 ff\ne8 ae 00 00 00\n48 89 c3\n48 c1 eb 21\n4c 31 fb\n49 03 9d 00 fc ff ff\n4d 8b 7d 00\n4c 89 f7\n4c 89 fe\ne8 7e 00 00 00\n48 01 dd\n48 01 c5\n49 89 6d 00\n48 c1 ed 08\n4c 89 f7\n48 89 ee\ne8 65 00 00 00\n49 01 c7\n4c 89 ff\ne8 6a 00 00 00\n49 89 c4\n48 8b 4c 24 10\n4c 89 61 18\n49 8d 45 20\n49 83 c5 08\n48 83 c1 20\n48 89 4c 24 10\n4c 3b 2c 24\n49 89 c5\n0f 82 90 fe ff ff\n48 8b 44 24 08\n48 89 98 00 08 00 00\n4c 89 a0 08 08 00 00\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p327
S'.text:000000000040e780\n.text:000000000040e781\n.text:000000000040e783\n.text:000000000040e785\n.text:000000000040e787\n.text:000000000040e789\n.text:000000000040e78a\n.text:000000000040e78e\n.text:000000000040e791\n.text:000000000040e794\n.text:000000000040e79b\n.text:000000000040e7a2\n.text:000000000040e7a5\n.text:000000000040e7ac\n.text:000000000040e7af\n.text:000000000040e7b6\n.text:000000000040e7bd\n.text:000000000040e7c1\n.text:000000000040e7c4\n.text:000000000040e7c9\n.text:000000000040e7cd\n.text:000000000040e7d0\n.text:000000000040e7d3\n.text:000000000040e7d6\n.text:000000000040e7da\n.text:000000000040e7e2\n.text:000000000040e7e7\n.text:000000000040e7eb\n.text:000000000040e7f0\n.text:000000000040e7f5\n.text:000000000040e7fa\n.text:000000000040e7ff\n.text:000000000040e800\n.text:000000000040e804\n.text:000000000040e807\n.text:000000000040e80b\n.text:000000000040e80e\n.text:000000000040e811\n.text:000000000040e818\n.text:000000000040e81b\n.text:000000000040e81e\n.text:000000000040e821\n.text:000000000040e826\n.text:000000000040e829\n.text:000000000040e82c\n.text:000000000040e82f\n.text:000000000040e833\n.text:000000000040e836\n.text:000000000040e839\n.text:000000000040e83e\n.text:000000000040e841\n.text:000000000040e844\n.text:000000000040e849\n.text:000000000040e84c\n.text:000000000040e850\n.text:000000000040e853\n.text:000000000040e858\n.text:000000000040e85b\n.text:000000000040e85f\n.text:000000000040e862\n.text:000000000040e869\n.text:000000000040e86d\n.text:000000000040e870\n.text:000000000040e873\n.text:000000000040e878\n.text:000000000040e87b\n.text:000000000040e87e\n.text:000000000040e882\n.text:000000000040e886\n.text:000000000040e889\n.text:000000000040e88c\n.text:000000000040e891\n.text:000000000040e894\n.text:000000000040e897\n.text:000000000040e89c\n.text:000000000040e89f\n.text:000000000040e8a3\n.text:000000000040e8a7\n.text:000000000040e8aa\n.text:000000000040e8ae\n.text:000000000040e8b1\n.text:000000000040e8b8\n.text:000000000040e8bc\n.text:000000000040e8bf\n.text:000000000040e8c2\n.text:000000000040e8c7\n.text:000000000040e8ca\n.text:000000000040e8cd\n.text:000000000040e8d1\n.text:000000000040e8d5\n.text:000000000040e8d8\n.text:000000000040e8db\n.text:000000000040e8e0\n.text:000000000040e8e3\n.text:000000000040e8e6\n.text:000000000040e8eb\n.text:000000000040e8ee\n.text:000000000040e8f2\n.text:000000000040e8f6\n.text:000000000040e8f9\n.text:000000000040e8fe\n.text:000000000040e901\n.text:000000000040e905\n.text:000000000040e908\n.text:000000000040e90f\n.text:000000000040e913\n.text:000000000040e916\n.text:000000000040e919\n.text:000000000040e91e\n.text:000000000040e921\n.text:000000000040e924\n.text:000000000040e928\n.text:000000000040e92c\n.text:000000000040e92f\n.text:000000000040e932\n.text:000000000040e936\n.text:000000000040e93b\n.text:000000000040e93e\n.text:000000000040e941\n.text:000000000040e946\n.text:000000000040e949\n.text:000000000040e94d\n.text:000000000040e951\n.text:000000000040e955\n.text:000000000040e95a\n.text:000000000040e960\n.text:000000000040e965\n.text:000000000040e96c\n.text:000000000040e970\n.text:000000000040e975\n.text:000000000040e97a\n.text:000000000040e97f\n.text:000000000040e980\n.text:000000000040e983\n.text:000000000040e987\n.text:000000000040e98a\n.text:000000000040e98d\n.text:000000000040e994\n.text:000000000040e998\n.text:000000000040e99b\n.text:000000000040e99e\n.text:000000000040e9a3\n.text:000000000040e9a6\n.text:000000000040e9a9\n.text:000000000040e9ad\n.text:000000000040e9b1\n.text:000000000040e9b4\n.text:000000000040e9b7\n.text:000000000040e9bc\n.text:000000000040e9bf\n.text:000000000040e9c2\n.text:000000000040e9c7\n.text:000000000040e9ca\n.text:000000000040e9cf\n.text:000000000040e9d2\n.text:000000000040e9d5\n.text:000000000040e9d8\n.text:000000000040e9dd\n.text:000000000040e9e0\n.text:000000000040e9e4\n.text:000000000040e9e7\n.text:000000000040e9ee\n.text:000000000040e9f2\n.text:000000000040e9f5\n.text:000000000040e9f8\n.text:000000000040e9fd\n.text:000000000040ea00\n.text:000000000040ea03\n.text:000000000040ea07\n.text:000000000040ea0b\n.text:000000000040ea0e\n.text:000000000040ea11\n.text:000000000040ea16\n.text:000000000040ea19\n.text:000000000040ea1c\n.text:000000000040ea21\n.text:000000000040ea24\n.text:000000000040ea29\n.text:000000000040ea2e\n.text:000000000040ea31\n.text:000000000040ea35\n.text:000000000040ea38\n.text:000000000040ea3f\n.text:000000000040ea43\n.text:000000000040ea46\n.text:000000000040ea49\n.text:000000000040ea4e\n.text:000000000040ea51\n.text:000000000040ea54\n.text:000000000040ea58\n.text:000000000040ea5c\n.text:000000000040ea5f\n.text:000000000040ea62\n.text:000000000040ea67\n.text:000000000040ea6a\n.text:000000000040ea6d\n.text:000000000040ea72\n.text:000000000040ea75\n.text:000000000040ea7a\n.text:000000000040ea7d\n.text:000000000040ea82\n.text:000000000040ea85\n.text:000000000040ea89\n.text:000000000040ea8c\n.text:000000000040ea93\n.text:000000000040ea97\n.text:000000000040ea9a\n.text:000000000040ea9d\n.text:000000000040eaa2\n.text:000000000040eaa5\n.text:000000000040eaa8\n.text:000000000040eaac\n.text:000000000040eab0\n.text:000000000040eab3\n.text:000000000040eab6\n.text:000000000040eabb\n.text:000000000040eabe\n.text:000000000040eac1\n.text:000000000040eac6\n.text:000000000040eac9\n.text:000000000040eace\n.text:000000000040ead2\n.text:000000000040ead6\n.text:000000000040eada\n.text:000000000040eade\n.text:000000000040eae3\n.text:000000000040eae7\n.text:000000000040eaea\n.text:000000000040eaf0\n.text:000000000040eaf5\n.text:000000000040eafc\n.text:000000000040eb03\n.text:000000000040eb07\n.text:000000000040eb08\n.text:000000000040eb0a\n.text:000000000040eb0c\n.text:000000000040eb0e\n.text:000000000040eb10\n.text:000000000040eb11\n'
p328
tp329
sS'pthread_create'
p330
(S'\n__stdcall pthread_create(pthread_t * __newthread, pthread_attr_t * __attr, __start_routine * __start_routine, void * __arg)\n'
p331
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint pthread_create(pthread_t *__newthread,pthread_attr_t *__attr,void *(*__start_routine)(void *),\u000a                  void *__arg)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_pthread_create_0061a038)();\u000a  return iVar1;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x0061a038]\n'
p333
S'ff 25 22 7c 21 00\n'
p334
S'.plt:0000000000402410\n'
p335
tp336
sS'quotearg_n_custom_mem'
p337
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p338
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p339
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0061abb0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0061aba0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061ab90]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061ab80]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x0040cb30\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x0040d9c0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p340
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 c7 cd 20 00\n48 89 44 24 30\n0f 10 05 ab cd 20 00\n0f 29 44 24 20\n0f 10 05 8f cd 20 00\n0f 29 44 24 10\n0f 10 05 73 cd 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p341
S'.text:000000000040ddd0\n.text:000000000040ddd1\n.text:000000000040ddd3\n.text:000000000040ddd5\n.text:000000000040ddd6\n.text:000000000040ddda\n.text:000000000040dddd\n.text:000000000040dde0\n.text:000000000040dde2\n.text:000000000040dde9\n.text:000000000040ddee\n.text:000000000040ddf5\n.text:000000000040ddfa\n.text:000000000040de01\n.text:000000000040de06\n.text:000000000040de0d\n.text:000000000040de11\n.text:000000000040de14\n.text:000000000040de17\n.text:000000000040de1c\n.text:000000000040de1e\n.text:000000000040de21\n.text:000000000040de24\n.text:000000000040de27\n.text:000000000040de2c\n.text:000000000040de30\n.text:000000000040de31\n.text:000000000040de33\n.text:000000000040de35\n.text:000000000040de36\n'
p342
tp343
sS'die'
p344
(S'\n__stdcall die(char * message, char * file)\n'
p345
V\u000avoid die(char *message,char *file)\u000a\u000a{\u000a  uint uVar1;\u000a  uint *puVar2;\u000a  char *pcVar3;\u000a  \u000a  puVar2 = (uint *)__errno_location();\u000a  uVar1 = *puVar2;\u000a  if (file == (char *)0x0) {\u000a    dcgettext(0,"standard output",5);\u000a  }\u000a  pcVar3 = quotearg_n_style_colon((char *)0x0);\u000a  error(0,(ulong)uVar1,"%s: %s",message,pcVar3);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(2);\u000a}\u000a\u000a
p346
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x00402430\nMOV EBP,dword ptr [RAX]\nTEST RBX,RBX\nJNZ 0x00405c9a\nXOR EDI,EDI\nMOV ESI,0x41407f\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBX\nCALL 0x0040dd70\nMOV RBX,RAX\nXOR EDI,EDI\nMOV EDX,0x414078\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nMOV R8,RBX\nCALL 0x00402960\nMOV EDI,0x2\nCALL 0x00402a50\n'
p347
S'55\n41 56\n53\n48 89 f3\n49 89 fe\ne8 b1 c7 ff ff\n8b 28\n48 85 db\n75 14\n31 ff\nbe 7f 40 41 00\nba 05 00 00 00\ne8 19 c9 ff ff\n48 89 c3\n31 ff\nbe 03 00 00 00\n48 89 da\ne8 c7 80 00 00\n48 89 c3\n31 ff\nba 78 40 41 00\n31 c0\n89 ee\n4c 89 f1\n49 89 d8\ne8 9e cc ff ff\nbf 02 00 00 00\ne8 84 cd ff ff\n'
p348
S'.text:0000000000405c70\n.text:0000000000405c71\n.text:0000000000405c73\n.text:0000000000405c74\n.text:0000000000405c77\n.text:0000000000405c7a\n.text:0000000000405c7f\n.text:0000000000405c81\n.text:0000000000405c84\n.text:0000000000405c86\n.text:0000000000405c88\n.text:0000000000405c8d\n.text:0000000000405c92\n.text:0000000000405c97\n.text:0000000000405c9a\n.text:0000000000405c9c\n.text:0000000000405ca1\n.text:0000000000405ca4\n.text:0000000000405ca9\n.text:0000000000405cac\n.text:0000000000405cae\n.text:0000000000405cb3\n.text:0000000000405cb5\n.text:0000000000405cb7\n.text:0000000000405cba\n.text:0000000000405cbd\n.text:0000000000405cc2\n.text:0000000000405cc7\n'
p349
tp350
sS'open_temp'
p351
(S'\n__stdcall open_temp(tempnode * temp)\n'
p352
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aFILE * open_temp(tempnode *temp)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  _Bool _Var3;\u000a  uint __fd;\u000a  pid_t pVar4;\u000a  undefined8 in_RAX;\u000a  FILE *pFVar5;\u000a  int *piVar6;\u000a  uint *puVar7;\u000a  undefined8 uVar8;\u000a  char *pcVar9;\u000a  undefined7 extraout_var;\u000a  undefined4 extraout_var_00;\u000a  int pipefds [2];\u000a  undefined8 local_28;\u000a  \u000a  local_28 = in_RAX;\u000a  if (temp->state == 1) {\u000a    local_28 = in_RAX;\u000a    wait_proc((ulong)(uint)temp->pid);\u000a  }\u000a  __fd = open(temp->name,0);\u000a  if (-1 < (int)__fd) {\u000a    pVar4 = pipe_fork((int *)&local_28,9);\u000a    if (pVar4 == -1) {\u000a      puVar7 = (uint *)__errno_location();\u000a      uVar2 = *puVar7;\u000a      if (uVar2 != 0x18) {\u000a        uVar8 = dcgettext(0,"couldn\u005c't create process for %s -d",5);\u000a        pcVar9 = quotearg_style((char *)0x4);\u000a        error(2,(ulong)uVar2,uVar8,pcVar9);\u000a      }\u000a      close(__fd);\u000a      *puVar7 = 0x18;\u000a    }\u000a    else {\u000a      if (pVar4 == 0) {\u000a        close((int)local_28);\u000a        move_fd_or_die((ulong)__fd,0);\u000a        move_fd_or_die((ulong)local_28._4_4_,1);\u000a        execlp(compress_program,compress_program,0x413f77,0);\u000a        puVar7 = (uint *)__errno_location();\u000a        async_safe_die((char *)(ulong)*puVar7);\u000a        _Var3 = delete_proc();\u000a        if (_Var3 != false) {\u000a          pVar4 = reap();\u000a          return (FILE *)CONCAT44(extraout_var_00,pVar4);\u000a        }\u000a        return (FILE *)CONCAT71(extraout_var,_Var3);\u000a      }\u000a      temp->pid = pVar4;\u000a      register_proc(temp);\u000a      close(__fd);\u000a      close(local_28._4_4_);\u000a      pFVar5 = (FILE *)fdopen((int)local_28,"r");\u000a      if (pFVar5 != (FILE *)0x0) {\u000a        return pFVar5;\u000a      }\u000a      piVar6 = __errno_location();\u000a      iVar1 = *piVar6;\u000a      close((int)local_28);\u000a      *piVar6 = iVar1;\u000a    }\u000a  }\u000a  return (FILE *)0x0;\u000a}\u000a\u000a
p353
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCMP byte ptr [RBX + 0xc],0x1\nJNZ 0x004086c8\nMOV EDI,dword ptr [RBX + 0x8]\nCALL 0x00408800\nLEA RDI,[RBX + 0xd]\nXOR EBP,EBP\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00402980\nMOV R15D,EAX\nTEST R15D,R15D\nJS 0x0040879f\nMOV RDI,RSP\nMOV ESI,0x9\nCALL 0x00408820\nCMP EAX,-0x1\nJZ 0x00408744\nTEST EAX,EAX\nJZ 0x004087ad\nMOV dword ptr [RBX + 0x8],EAX\nMOV RDI,RBX\nCALL 0x00408a30\nMOV EDI,R15D\nCALL 0x004026c0\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x004026c0\nMOV EDI,dword ptr [RSP]\nMOV ESI,0x413a7d\nCALL 0x00402900\nMOV RBP,RAX\nTEST RBP,RBP\nJNZ 0x0040879f\nCALL 0x00402430\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nMOV EDI,dword ptr [RSP]\nCALL 0x004026c0\nMOV dword ptr [RBX],EBP\nJMP 0x0040879d\nCALL 0x00402430\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nCMP R14D,0x18\nJZ 0x0040878f\nXOR EDI,EDI\nMOV ESI,0x413f58\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RBP,RAX\nMOV RSI,qword ptr [0x0061a640]\nMOV EDI,0x4\nCALL 0x0040dc90\nMOV RCX,RAX\nMOV EDI,0x2\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nCALL 0x00402960\nMOV EDI,R15D\nCALL 0x004026c0\nMOV dword ptr [RBX],0x18\nXOR EBP,EBP\nMOV RAX,RBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,dword ptr [RSP]\nCALL 0x004026c0\nXOR ESI,ESI\nMOV EDI,R15D\nCALL 0x00407b60\nMOV EDI,dword ptr [RSP + 0x4]\nMOV ESI,0x1\nCALL 0x00407b60\nMOV RDI,qword ptr [0x0061a640]\nMOV EDX,0x413f77\nXOR ECX,ECX\nXOR EAX,EAX\nMOV RSI,RDI\nCALL 0x00402ac0\nCALL 0x00402430\nMOV EDI,dword ptr [RAX]\nMOV ESI,0x413f7a\nCALL 0x004089b0\nNOP word ptr CS:[RAX + RAX*0x1]\n'
p354
S'55\n41 57\n41 56\n53\n50\n48 89 fb\n80 7b 0c 01\n75 08\n8b 7b 08\ne8 38 01 00 00\n48 8d 7b 0d\n31 ed\n31 f6\n31 c0\ne8 a9 a2 ff ff\n41 89 c7\n45 85 ff\n0f 88 bc 00 00 00\n48 89 e7\nbe 09 00 00 00\ne8 30 01 00 00\n83 f8 ff\n74 4f\n85 c0\n0f 84 b0 00 00 00\n89 43 08\n48 89 df\ne8 28 03 00 00\n44 89 ff\ne8 b0 9f ff ff\n8b 7c 24 04\ne8 a7 9f ff ff\n8b 3c 24\nbe 7d 3a 41 00\ne8 da a1 ff ff\n48 89 c5\n48 85 ed\n75 71\ne8 fd 9c ff ff\n48 89 c3\n8b 2b\n8b 3c 24\ne8 80 9f ff ff\n89 2b\neb 59\ne8 e7 9c ff ff\n48 89 c3\n44 8b 33\n41 83 fe 18\n74 3a\n31 ff\nbe 58 3f 41 00\nba 05 00 00 00\ne8 4a 9e ff ff\n48 89 c5\n48 8b 35 d0 1e 21 00\nbf 04 00 00 00\ne8 16 55 00 00\n48 89 c1\nbf 02 00 00 00\n31 c0\n44 89 f6\n48 89 ea\ne8 d1 a1 ff ff\n44 89 ff\ne8 29 9f ff ff\nc7 03 18 00 00 00\n31 ed\n48 89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n8b 3c 24\ne8 0b 9f ff ff\n31 f6\n44 89 ff\ne8 a1 f3 ff ff\n8b 7c 24 04\nbe 01 00 00 00\ne8 93 f3 ff ff\n48 8b 3d 6c 1e 21 00\nba 77 3f 41 00\n31 c9\n31 c0\n48 89 fe\ne8 db a2 ff ff\ne8 46 9c ff ff\n8b 38\nbe 7a 3f 41 00\ne8 ba 01 00 00\n66 2e 0f 1f 84 00 00 00 00 00\n'
p355
S'.text:00000000004086b0\n.text:00000000004086b1\n.text:00000000004086b3\n.text:00000000004086b5\n.text:00000000004086b6\n.text:00000000004086b7\n.text:00000000004086ba\n.text:00000000004086be\n.text:00000000004086c0\n.text:00000000004086c3\n.text:00000000004086c8\n.text:00000000004086cc\n.text:00000000004086ce\n.text:00000000004086d0\n.text:00000000004086d2\n.text:00000000004086d7\n.text:00000000004086da\n.text:00000000004086dd\n.text:00000000004086e3\n.text:00000000004086e6\n.text:00000000004086eb\n.text:00000000004086f0\n.text:00000000004086f3\n.text:00000000004086f5\n.text:00000000004086f7\n.text:00000000004086fd\n.text:0000000000408700\n.text:0000000000408703\n.text:0000000000408708\n.text:000000000040870b\n.text:0000000000408710\n.text:0000000000408714\n.text:0000000000408719\n.text:000000000040871c\n.text:0000000000408721\n.text:0000000000408726\n.text:0000000000408729\n.text:000000000040872c\n.text:000000000040872e\n.text:0000000000408733\n.text:0000000000408736\n.text:0000000000408738\n.text:000000000040873b\n.text:0000000000408740\n.text:0000000000408742\n.text:0000000000408744\n.text:0000000000408749\n.text:000000000040874c\n.text:000000000040874f\n.text:0000000000408753\n.text:0000000000408755\n.text:0000000000408757\n.text:000000000040875c\n.text:0000000000408761\n.text:0000000000408766\n.text:0000000000408769\n.text:0000000000408770\n.text:0000000000408775\n.text:000000000040877a\n.text:000000000040877d\n.text:0000000000408782\n.text:0000000000408784\n.text:0000000000408787\n.text:000000000040878a\n.text:000000000040878f\n.text:0000000000408792\n.text:0000000000408797\n.text:000000000040879d\n.text:000000000040879f\n.text:00000000004087a2\n.text:00000000004087a6\n.text:00000000004087a7\n.text:00000000004087a9\n.text:00000000004087ab\n.text:00000000004087ac\n.text:00000000004087ad\n.text:00000000004087b0\n.text:00000000004087b5\n.text:00000000004087b7\n.text:00000000004087ba\n.text:00000000004087bf\n.text:00000000004087c3\n.text:00000000004087c8\n.text:00000000004087cd\n.text:00000000004087d4\n.text:00000000004087d9\n.text:00000000004087db\n.text:00000000004087dd\n.text:00000000004087e0\n.text:00000000004087e5\n.text:00000000004087ea\n.text:00000000004087ec\n.text:00000000004087f1\n.text:00000000004087f6\n'
p356
tp357
sS'_init'
p358
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p359
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00619ff8;\u000a  if (PTR___gmon_start___00619ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00619ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p360
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00619ff8]\nTEST RAX,RAX\nJZ 0x004023b2\nCALL RAX\nADD RSP,0x8\nRET\n'
p361
S'48 83 ec 08\n48 8b 05 4d 7c 21 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p362
S'.init:00000000004023a0\n.init:00000000004023a4\n.init:00000000004023ab\n.init:00000000004023ae\n.init:00000000004023b0\n.init:00000000004023b2\n.init:00000000004023b6\n'
p363
tp364
sS'_obstack_allocated_p'
p365
(S'\n__stdcall _obstack_allocated_p(obstack * h, void * obj)\n'
p366
V\u000aint _obstack_allocated_p(obstack *h,void *obj)\u000a\u000a{\u000a  _obstack_chunk *p_Var1;\u000a  \u000a  p_Var1 = h->chunk;\u000a  while( true ) {\u000a    if (p_Var1 == (_obstack_chunk *)0x0) {\u000a      return 0;\u000a    }\u000a    if ((p_Var1 < obj) && (obj <= p_Var1->limit)) break;\u000a    p_Var1 = p_Var1->prev;\u000a  }\u000a  return 1;\u000a}\u000a\u000a
p367
S'MOV RCX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nTEST RCX,RCX\nJNZ 0x00410bc9\nJMP 0x00410bd8\nMOV RCX,qword ptr [RCX + 0x8]\nTEST RCX,RCX\nJZ 0x00410bd8\nCMP RCX,RSI\nJNC 0x00410bc0\nCMP qword ptr [RCX],RSI\nJC 0x00410bc0\nMOV EAX,0x1\nRET\n'
p368
S'48 8b 4f 08\n31 c0\n48 85 c9\n75 0e\neb 1b\n48 8b 49 08\n48 85 c9\n74 0f\n48 39 f1\n73 f2\n48 39 31\n72 ed\nb8 01 00 00 00\nc3\n'
p369
S'.text:0000000000410bb0\n.text:0000000000410bb4\n.text:0000000000410bb6\n.text:0000000000410bb9\n.text:0000000000410bbb\n.text:0000000000410bc0\n.text:0000000000410bc4\n.text:0000000000410bc7\n.text:0000000000410bc9\n.text:0000000000410bcc\n.text:0000000000410bce\n.text:0000000000410bd1\n.text:0000000000410bd3\n.text:0000000000410bd8\n'
p370
tp371
sS'strxfrm'
p372
(S'\n__stdcall strxfrm(char * __dest, char * __src, size_t __n)\n'
p373
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strxfrm(char *__dest,char *__src,size_t __n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strxfrm_0061a1e0)();\u000a  return sVar1;\u000a}\u000a\u000a
p374
S'JMP qword ptr [0x0061a1e0]\n'
p375
S'ff 25 7a 7a 21 00\n'
p376
S'.plt:0000000000402760\n'
p377
tp378
sS'maybe_create_temp'
p379
(S'\n__stdcall maybe_create_temp(FILE * * pfp)\n'
p380
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000atempnode * maybe_create_temp(FILE **pfp)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  _Bool _Var3;\u000a  pid_t pVar4;\u000a  uint __fd;\u000a  FILE *pFVar5;\u000a  uint *puVar6;\u000a  ulong extraout_RAX;\u000a  FILE *pFVar7;\u000a  int *piVar8;\u000a  undefined8 uVar9;\u000a  char *message;\u000a  undefined7 extraout_var;\u000a  undefined4 extraout_var_00;\u000a  tempnode *temp;\u000a  int pipefds [2];\u000a  undefined8 uStack80;\u000a  tempnode *ptStack72;\u000a  FILE **ppFStack64;\u000a  uint local_1c;\u000a  uint local_18;\u000a  uint local_14;\u000a  \u000a  ptStack72 = create_temp_file((int *)&local_1c);\u000a  if (ptStack72 == (tempnode *)0x0) {\u000a    ptStack72 = (tempnode *)0x0;\u000a  }\u000a  else {\u000a    ptStack72->state = 0;\u000a    if (compress_program != (char *)0x0) {\u000a      pVar4 = pipe_fork((int *)&local_18,4);\u000a      ptStack72->pid = pVar4;\u000a      if (pVar4 < 1) {\u000a        if (pVar4 == 0) {\u000a          close(local_14);\u000a          move_fd_or_die((ulong)local_1c,1);\u000a          move_fd_or_die((ulong)local_18,0);\u000a          execlp(compress_program,compress_program,0);\u000a          puVar6 = (uint *)__errno_location();\u000a          temp = (tempnode *)(ulong)*puVar6;\u000a          async_safe_die((char *)temp);\u000a          uStack80 = extraout_RAX;\u000a          ppFStack64 = pfp;\u000a          if (temp->state == 1) {\u000a            uStack80 = extraout_RAX;\u000a            ppFStack64 = pfp;\u000a            wait_proc((ulong)(uint)temp->pid);\u000a          }\u000a          __fd = open(temp->name,0);\u000a          if (-1 < (int)__fd) {\u000a            pVar4 = pipe_fork((int *)&uStack80,9);\u000a            if (pVar4 == -1) {\u000a              puVar6 = (uint *)__errno_location();\u000a              uVar2 = *puVar6;\u000a              if (uVar2 != 0x18) {\u000a                uVar9 = dcgettext(0,"couldn\u005c't create process for %s -d",5);\u000a                message = quotearg_style((char *)0x4);\u000a                error(2,(ulong)uVar2,uVar9,message);\u000a              }\u000a              close(__fd);\u000a              *puVar6 = 0x18;\u000a            }\u000a            else {\u000a              if (pVar4 == 0) {\u000a                close((int)uStack80);\u000a                move_fd_or_die((ulong)__fd,0);\u000a                move_fd_or_die(uStack80 >> 0x20,1);\u000a                execlp(compress_program,compress_program,0x413f77,0);\u000a                puVar6 = (uint *)__errno_location();\u000a                async_safe_die((char *)(ulong)*puVar6);\u000a                _Var3 = delete_proc();\u000a                if (_Var3 != false) {\u000a                  pVar4 = reap();\u000a                  return (tempnode *)CONCAT44(extraout_var_00,pVar4);\u000a                }\u000a                return (tempnode *)CONCAT71(extraout_var,_Var3);\u000a              }\u000a              temp->pid = pVar4;\u000a              register_proc(temp);\u000a              close(__fd);\u000a              close(uStack80._4_4_);\u000a              pFVar7 = fdopen((int)uStack80,"r");\u000a              if (pFVar7 != (FILE *)0x0) {\u000a                return (tempnode *)pFVar7;\u000a              }\u000a              piVar8 = __errno_location();\u000a              iVar1 = *piVar8;\u000a              close((int)uStack80);\u000a              *piVar8 = iVar1;\u000a            }\u000a          }\u000a          return (tempnode *)0x0;\u000a        }\u000a      }\u000a      else {\u000a        close(local_1c);\u000a        close(local_18);\u000a        local_1c = local_14;\u000a        register_proc(ptStack72);\u000a      }\u000a    }\u000a    pFVar5 = (FILE *)fdopen(local_1c,"w");\u000a    *pfp = pFVar5;\u000a    if (pFVar5 == (FILE *)0x0) {\u000a      message = (char *)dcgettext(0,"couldn\u005c't create temporary file",5);\u000a                    /* WARNING: Subroutine does not return */\u000a      die(message,ptStack72->name);\u000a    }\u000a  }\u000a  return ptStack72;\u000a}\u000a\u000a
p381
S'PUSH R14\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RDI\nMOVZX ESI,SIL\nLEA RDI,[RSP + 0xc]\nCALL 0x00408cf0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408618\nMOV byte ptr [RBX + 0xc],0x0\nCMP qword ptr [0x0061a640],0x0\nJZ 0x0040861e\nLEA RDI,[RSP + 0x10]\nMOV ESI,0x4\nCALL 0x00408820\nMOV dword ptr [RBX + 0x8],EAX\nTEST EAX,EAX\nJLE 0x0040861c\nMOV EDI,dword ptr [RSP + 0xc]\nCALL 0x004026c0\nMOV EDI,dword ptr [RSP + 0x10]\nCALL 0x004026c0\nMOV EAX,dword ptr [RSP + 0x14]\nMOV dword ptr [RSP + 0xc],EAX\nMOV RDI,RBX\nCALL 0x00408a30\nJMP 0x0040861e\nXOR EBX,EBX\nJMP 0x00408634\nJZ 0x0040865f\nMOV EDI,dword ptr [RSP + 0xc]\nMOV ESI,0x413f56\nCALL 0x00402900\nMOV qword ptr [R14],RAX\nTEST RAX,RAX\nJZ 0x0040863f\nMOV RAX,RBX\nADD RSP,0x18\nPOP RBX\nPOP R14\nRET\nXOR EDI,EDI\nMOV ESI,0x41401e\nMOV EDX,0x5\nCALL 0x004025b0\nADD RBX,0xd\nMOV RDI,RAX\nMOV RSI,RBX\nCALL 0x00405c70\nMOV EDI,dword ptr [RSP + 0x14]\nCALL 0x004026c0\nMOV EDI,dword ptr [RSP + 0xc]\nMOV ESI,0x1\nCALL 0x00407b60\nMOV EDI,dword ptr [RSP + 0x10]\nXOR ESI,ESI\nCALL 0x00407b60\nMOV RDI,qword ptr [0x0061a640]\nXOR EDX,EDX\nXOR EAX,EAX\nMOV RSI,RDI\nCALL 0x00402ac0\nCALL 0x00402430\nMOV EDI,dword ptr [RAX]\nMOV ESI,0x413ffc\nCALL 0x004089b0\nNOP dword ptr CS:[RAX + RAX*0x1]\n'
p382
S'41 56\n53\n48 83 ec 18\n49 89 fe\n40 0f b6 f6\n48 8d 7c 24 0c\ne8 28 07 00 00\n48 89 c3\n48 85 db\n74 48\nc6 43 0c 00\n48 83 3d 64 20 21 00 00\n74 40\n48 8d 7c 24 10\nbe 04 00 00 00\ne8 33 02 00 00\n89 43 08\n85 c0\n7e 28\n8b 7c 24 0c\ne8 c3 a0 ff ff\n8b 7c 24 10\ne8 ba a0 ff ff\n8b 44 24 14\n89 44 24 0c\n48 89 df\ne8 1a 04 00 00\neb 06\n31 db\neb 18\n74 41\n8b 7c 24 0c\nbe 56 3f 41 00\ne8 d4 a2 ff ff\n49 89 06\n48 85 c0\n74 0b\n48 89 d8\n48 83 c4 18\n5b\n41 5e\nc3\n31 ff\nbe 1e 40 41 00\nba 05 00 00 00\ne8 60 9f ff ff\n48 83 c3 0d\n48 89 c7\n48 89 de\ne8 11 d6 ff ff\n8b 7c 24 14\ne8 58 a0 ff ff\n8b 7c 24 0c\nbe 01 00 00 00\ne8 ea f4 ff ff\n8b 7c 24 10\n31 f6\ne8 df f4 ff ff\n48 8b 3d b8 1f 21 00\n31 d2\n31 c0\n48 89 fe\ne8 2c a4 ff ff\ne8 97 9d ff ff\n8b 38\nbe fc 3f 41 00\ne8 0b 03 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n'
p383
S'.text:00000000004085b0\n.text:00000000004085b2\n.text:00000000004085b3\n.text:00000000004085b7\n.text:00000000004085ba\n.text:00000000004085be\n.text:00000000004085c3\n.text:00000000004085c8\n.text:00000000004085cb\n.text:00000000004085ce\n.text:00000000004085d0\n.text:00000000004085d4\n.text:00000000004085dc\n.text:00000000004085de\n.text:00000000004085e3\n.text:00000000004085e8\n.text:00000000004085ed\n.text:00000000004085f0\n.text:00000000004085f2\n.text:00000000004085f4\n.text:00000000004085f8\n.text:00000000004085fd\n.text:0000000000408601\n.text:0000000000408606\n.text:000000000040860a\n.text:000000000040860e\n.text:0000000000408611\n.text:0000000000408616\n.text:0000000000408618\n.text:000000000040861a\n.text:000000000040861c\n.text:000000000040861e\n.text:0000000000408622\n.text:0000000000408627\n.text:000000000040862c\n.text:000000000040862f\n.text:0000000000408632\n.text:0000000000408634\n.text:0000000000408637\n.text:000000000040863b\n.text:000000000040863c\n.text:000000000040863e\n.text:000000000040863f\n.text:0000000000408641\n.text:0000000000408646\n.text:000000000040864b\n.text:0000000000408650\n.text:0000000000408654\n.text:0000000000408657\n.text:000000000040865a\n.text:000000000040865f\n.text:0000000000408663\n.text:0000000000408668\n.text:000000000040866c\n.text:0000000000408671\n.text:0000000000408676\n.text:000000000040867a\n.text:000000000040867c\n.text:0000000000408681\n.text:0000000000408688\n.text:000000000040868a\n.text:000000000040868c\n.text:000000000040868f\n.text:0000000000408694\n.text:0000000000408699\n.text:000000000040869b\n.text:00000000004086a0\n.text:00000000004086a5\n'
p384
tp385
sS'save_token'
p386
(S'\n__stdcall save_token(Tokens * t)\n'
p387
V\u000avoid save_token(Tokens *t)\u000a\u000a{\u000a  uint *puVar1;\u000a  char **ppcVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  ulong uVar5;\u000a  _obstack_chunk *p_Var6;\u000a  char *pcVar7;\u000a  char *pcVar8;\u000a  \u000a  pcVar3 = (t->o_data).object_base;\u000a  pcVar4 = (t->o_data).next_free;\u000a  if (pcVar4 == pcVar3) {\u000a    puVar1 = &(t->o_data).use_extra_arg_bitfield;\u000a    *(byte *)puVar1 = *(byte *)puVar1 | 2;\u000a  }\u000a  uVar5 = (t->o_data).alignment_mask;\u000a  pcVar8 = (char *)(~uVar5 & (ulong)((t->o_data).next_free + uVar5));\u000a  (t->o_data).next_free = pcVar8;\u000a  p_Var6 = (t->o_data).chunk;\u000a  pcVar7 = (t->o_data).chunk_limit;\u000a  if (pcVar7 + -(long)p_Var6 < pcVar8 + -(long)p_Var6) {\u000a    (t->o_data).next_free = pcVar7;\u000a  }\u000a  (t->o_data).object_base = (t->o_data).next_free;\u000a  if ((t->o_tok).chunk_limit + -(long)(t->o_tok).next_free < &DAT_00000008) {\u000a    _obstack_newchunk(&t->o_tok,8);\u000a  }\u000a  *(char **)(t->o_tok).next_free = pcVar3;\u000a  ppcVar2 = &(t->o_tok).next_free;\u000a  *ppcVar2 = *ppcVar2 + 8;\u000a  if ((t->o_tok_len).chunk_limit + -(long)(t->o_tok_len).next_free < &DAT_00000008) {\u000a    _obstack_newchunk(&t->o_tok_len,8);\u000a  }\u000a  *(char **)(t->o_tok_len).next_free = pcVar4 + (-1 - (long)pcVar3);\u000a  ppcVar2 = &(t->o_tok_len).next_free;\u000a  *ppcVar2 = *ppcVar2 + 8;\u000a  t->n_tok = t->n_tok + 1;\u000a  return;\u000a}\u000a\u000a
p388
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV R15,qword ptr [RBX + 0x28]\nMOV R14,qword ptr [RBX + 0x30]\nCMP R14,R15\nJNZ 0x0040f0d9\nOR byte ptr [RBX + 0x68],0x2\nMOV RCX,qword ptr [RBX + 0x48]\nMOV RAX,qword ptr [RBX + 0x30]\nADD RAX,RCX\nNOT RCX\nAND RCX,RAX\nMOV qword ptr [RBX + 0x30],RCX\nMOV RDX,qword ptr [RBX + 0x20]\nMOV RAX,qword ptr [RBX + 0x38]\nSUB RCX,RDX\nMOV RSI,RAX\nSUB RSI,RDX\nCMP RCX,RSI\nJBE 0x0040f108\nMOV qword ptr [RBX + 0x30],RAX\nDEC R14\nMOV RAX,qword ptr [RBX + 0x30]\nMOV qword ptr [RBX + 0x28],RAX\nMOV RAX,qword ptr [0x90 + RBX]\nSUB RAX,qword ptr [0x88 + RBX]\nCMP RAX,0x7\nJA 0x0040f135\nLEA RDI,[RBX + 0x70]\nMOV ESI,0x8\nCALL 0x00410a60\nMOV RAX,qword ptr [0x88 + RBX]\nMOV qword ptr [RAX],R15\nADD qword ptr [0x88 + RBX],0x8\nSUB R14,R15\nMOV RAX,qword ptr [0xe8 + RBX]\nSUB RAX,qword ptr [0xe0 + RBX]\nCMP RAX,0x7\nJA 0x0040f16f\nLEA RDI,[0xc8 + RBX]\nMOV ESI,0x8\nCALL 0x00410a60\nMOV RAX,qword ptr [0xe0 + RBX]\nMOV qword ptr [RAX],R14\nADD qword ptr [0xe0 + RBX],0x8\nINC qword ptr [RBX]\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p389
S'41 57\n41 56\n53\n48 89 fb\n4c 8b 7b 28\n4c 8b 73 30\n4d 39 fe\n75 04\n80 4b 68 02\n48 8b 4b 48\n48 8b 43 30\n48 01 c8\n48 f7 d1\n48 21 c1\n48 89 4b 30\n48 8b 53 20\n48 8b 43 38\n48 29 d1\n48 89 c6\n48 29 d6\n48 39 f1\n76 04\n48 89 43 30\n49 ff ce\n48 8b 43 30\n48 89 43 28\n48 8b 83 90 00 00 00\n48 2b 83 88 00 00 00\n48 83 f8 07\n77 0e\n48 8d 7b 70\nbe 08 00 00 00\ne8 2b 19 00 00\n48 8b 83 88 00 00 00\n4c 89 38\n48 83 83 88 00 00 00 08\n4d 29 fe\n48 8b 83 e8 00 00 00\n48 2b 83 e0 00 00 00\n48 83 f8 07\n77 11\n48 8d bb c8 00 00 00\nbe 08 00 00 00\ne8 f1 18 00 00\n48 8b 83 e0 00 00 00\n4c 89 30\n48 83 83 e0 00 00 00 08\n48 ff 03\n5b\n41 5e\n41 5f\nc3\n'
p390
S'.text:000000000040f0c0\n.text:000000000040f0c2\n.text:000000000040f0c4\n.text:000000000040f0c5\n.text:000000000040f0c8\n.text:000000000040f0cc\n.text:000000000040f0d0\n.text:000000000040f0d3\n.text:000000000040f0d5\n.text:000000000040f0d9\n.text:000000000040f0dd\n.text:000000000040f0e1\n.text:000000000040f0e4\n.text:000000000040f0e7\n.text:000000000040f0ea\n.text:000000000040f0ee\n.text:000000000040f0f2\n.text:000000000040f0f6\n.text:000000000040f0f9\n.text:000000000040f0fc\n.text:000000000040f0ff\n.text:000000000040f102\n.text:000000000040f104\n.text:000000000040f108\n.text:000000000040f10b\n.text:000000000040f10f\n.text:000000000040f113\n.text:000000000040f11a\n.text:000000000040f121\n.text:000000000040f125\n.text:000000000040f127\n.text:000000000040f12b\n.text:000000000040f130\n.text:000000000040f135\n.text:000000000040f13c\n.text:000000000040f13f\n.text:000000000040f147\n.text:000000000040f14a\n.text:000000000040f151\n.text:000000000040f158\n.text:000000000040f15c\n.text:000000000040f15e\n.text:000000000040f165\n.text:000000000040f16a\n.text:000000000040f16f\n.text:000000000040f176\n.text:000000000040f179\n.text:000000000040f181\n.text:000000000040f184\n.text:000000000040f185\n.text:000000000040f187\n.text:000000000040f189\n'
p391
tp392
sS'avoid_trashing_input'
p393
(S'\n__stdcall avoid_trashing_input(sortfile * files, size_t ntemps, size_t nfiles, char * outfile)\n'
p394
V\u000avoid avoid_trashing_input(sortfile *files,size_t ntemps,size_t nfiles,char *outfile)\u000a\u000a{\u000a  int iVar1;\u000a  tempnode *ptVar2;\u000a  bool bVar3;\u000a  int iVar4;\u000a  stat outstat;\u000a  FILE *local_158;\u000a  stat local_150;\u000a  stat local_c0;\u000a  \u000a  if (ntemps < nfiles) {\u000a    files = files + ntemps;\u000a    bVar3 = false;\u000a    ptVar2 = (tempnode *)0x0;\u000a    do {\u000a      iVar4 = 0x2d - (uint)(byte)*files->name;\u000a      if (iVar4 == 0) {\u000a        iVar4 = -(uint)(byte)files->name[1];\u000a      }\u000a      if (((outfile == (char *)0x0) || (iVar1 = strcmp(outfile,files->name), iVar4 == 0)) ||\u000a         (iVar1 != 0)) {\u000a        if (!bVar3) {\u000a          iVar1 = fstat(1,&local_c0);\u000a          bVar3 = true;\u000a          if (iVar1 != 0) {\u000a            return;\u000a          }\u000a        }\u000a        if (iVar4 == 0) {\u000a          iVar4 = fstat(0,&local_150);\u000a        }\u000a        else {\u000a          iVar4 = stat(files->name,&local_150);\u000a        }\u000a        if (((iVar4 == 0) && (local_150.st_ino == local_c0.st_ino)) &&\u000a           (local_150.st_dev == local_c0.st_dev)) goto LAB_00407c82;\u000a      }\u000a      else {\u000aLAB_00407c82:\u000a        if (ptVar2 == (tempnode *)0x0) {\u000a          ptVar2 = create_temp(&local_158);\u000a          mergefiles(files,0,1,local_158,ptVar2->name);\u000a        }\u000a        files->name = ptVar2->name;\u000a        files->temp = ptVar2;\u000a      }\u000a      ntemps = ntemps + 1;\u000a      files = files + 1;\u000a    } while (ntemps < nfiles);\u000a  }\u000a  return;\u000a}\u000a\u000a
p395
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x138\nMOV R15,RCX\nMOV R12,RSI\nMOV RBX,RDI\nMOV qword ptr [RSP + 0x8],RDX\nCMP R12,RDX\nJNC 0x00407d52\nMOV RAX,R12\nSHL RAX,0x4\nADD RBX,RAX\nXOR EBP,EBP\nXOR R13D,R13D\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RBX]\nMOVZX ECX,byte ptr [RAX]\nMOV R14D,0x2d\nSUB R14D,ECX\nJNZ 0x00407c69\nMOVZX R14D,byte ptr [RAX + 0x1]\nNEG R14D\nTEST R15,R15\nJZ 0x00407cc0\nMOV RSI,qword ptr [RBX]\nMOV RDI,R15\nCALL 0x00402770\nTEST R14D,R14D\nJZ 0x00407cc0\nTEST EAX,EAX\nJNZ 0x00407cc0\nTEST R13,R13\nJNZ 0x00407cac\nLEA RDI,[RSP + 0x10]\nCALL 0x00407b80\nMOV R13,RAX\nMOV RCX,qword ptr [RSP + 0x10]\nLEA R8,[R13 + 0xd]\nXOR ESI,ESI\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00407b90\nLEA RAX,[R13 + 0xd]\nMOV qword ptr [RBX],RAX\nMOV qword ptr [RBX + 0x8],R13\nJMP 0x00407d40\nTEST BPL,0x1\nJNZ 0x00407cdf\nMOV EDI,0x1\nLEA RSI,[0xa8 + RSP]\nCALL 0x004115d0\nMOV BPL,0x1\nTEST EAX,EAX\nJNZ 0x00407d52\nTEST R14D,R14D\nJZ 0x00407d00\nMOV RDI,qword ptr [RBX]\nLEA RSI,[RSP + 0x18]\nCALL 0x004115c0\nTEST EAX,EAX\nJNZ 0x00407d40\nJMP 0x00407d10\nXOR EDI,EDI\nLEA RSI,[RSP + 0x18]\nCALL 0x004115d0\nTEST EAX,EAX\nJNZ 0x00407d40\nMOV RAX,qword ptr [RSP + 0x20]\nCMP RAX,qword ptr [0xb0 + RSP]\nJNZ 0x00407d40\nMOV RAX,qword ptr [RSP + 0x18]\nCMP RAX,qword ptr [0xa8 + RSP]\nJZ 0x00407c82\nNOP word ptr CS:[RAX + RAX*0x1]\nINC R12\nADD RBX,0x10\nCMP R12,qword ptr [RSP + 0x8]\nJC 0x00407c50\nADD RSP,0x138\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p396
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 38 01 00 00\n49 89 cf\n49 89 f4\n48 89 fb\n48 89 54 24 08\n49 39 d4\n0f 83 1a 01 00 00\n4c 89 e0\n48 c1 e0 04\n48 01 c3\n31 ed\n45 31 ed\n66 0f 1f 84 00 00 00 00 00\n48 8b 03\n0f b6 08\n41 be 2d 00 00 00\n41 29 ce\n75 08\n44 0f b6 70 01\n41 f7 de\n4d 85 ff\n74 52\n48 8b 33\n4c 89 ff\ne8 f7 aa ff ff\n45 85 f6\n74 42\n85 c0\n75 3e\n4d 85 ed\n75 25\n48 8d 7c 24 10\ne8 ef fe ff ff\n49 89 c5\n48 8b 4c 24 10\n4d 8d 45 0d\n31 f6\nba 01 00 00 00\n48 89 df\ne8 e4 fe ff ff\n49 8d 45 0d\n48 89 03\n4c 89 6b 08\ne9 84 00 00 00\n40 f6 c5 01\n75 19\nbf 01 00 00 00\n48 8d b4 24 a8 00 00 00\ne8 f8 98 00 00\n40 b5 01\n85 c0\n75 73\n45 85 f6\n74 1c\n48 8b 3b\n48 8d 74 24 18\ne8 cf 98 00 00\n85 c0\n75 4b\neb 19\n31 ff\n48 8d 74 24 18\ne8 c4 98 00 00\n85 c0\n75 30\n48 8b 44 24 20\n48 3b 84 24 b0 00 00 00\n75 21\n48 8b 44 24 18\n48 3b 84 24 a8 00 00 00\n0f 84 50 ff ff ff\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 ff c4\n48 83 c3 10\n4c 3b 64 24 08\n0f 82 fe fe ff ff\n48 81 c4 38 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p397
S'.text:0000000000407c10\n.text:0000000000407c11\n.text:0000000000407c13\n.text:0000000000407c15\n.text:0000000000407c17\n.text:0000000000407c19\n.text:0000000000407c1a\n.text:0000000000407c21\n.text:0000000000407c24\n.text:0000000000407c27\n.text:0000000000407c2a\n.text:0000000000407c2f\n.text:0000000000407c32\n.text:0000000000407c38\n.text:0000000000407c3b\n.text:0000000000407c3f\n.text:0000000000407c42\n.text:0000000000407c44\n.text:0000000000407c47\n.text:0000000000407c50\n.text:0000000000407c53\n.text:0000000000407c56\n.text:0000000000407c5c\n.text:0000000000407c5f\n.text:0000000000407c61\n.text:0000000000407c66\n.text:0000000000407c69\n.text:0000000000407c6c\n.text:0000000000407c6e\n.text:0000000000407c71\n.text:0000000000407c74\n.text:0000000000407c79\n.text:0000000000407c7c\n.text:0000000000407c7e\n.text:0000000000407c80\n.text:0000000000407c82\n.text:0000000000407c85\n.text:0000000000407c87\n.text:0000000000407c8c\n.text:0000000000407c91\n.text:0000000000407c94\n.text:0000000000407c99\n.text:0000000000407c9d\n.text:0000000000407c9f\n.text:0000000000407ca4\n.text:0000000000407ca7\n.text:0000000000407cac\n.text:0000000000407cb0\n.text:0000000000407cb3\n.text:0000000000407cb7\n.text:0000000000407cc0\n.text:0000000000407cc4\n.text:0000000000407cc6\n.text:0000000000407ccb\n.text:0000000000407cd3\n.text:0000000000407cd8\n.text:0000000000407cdb\n.text:0000000000407cdd\n.text:0000000000407cdf\n.text:0000000000407ce2\n.text:0000000000407ce4\n.text:0000000000407ce7\n.text:0000000000407cec\n.text:0000000000407cf1\n.text:0000000000407cf3\n.text:0000000000407cf5\n.text:0000000000407d00\n.text:0000000000407d02\n.text:0000000000407d07\n.text:0000000000407d0c\n.text:0000000000407d0e\n.text:0000000000407d10\n.text:0000000000407d15\n.text:0000000000407d1d\n.text:0000000000407d1f\n.text:0000000000407d24\n.text:0000000000407d2c\n.text:0000000000407d32\n.text:0000000000407d40\n.text:0000000000407d43\n.text:0000000000407d47\n.text:0000000000407d4c\n.text:0000000000407d52\n.text:0000000000407d59\n.text:0000000000407d5a\n.text:0000000000407d5c\n.text:0000000000407d5e\n.text:0000000000407d60\n.text:0000000000407d62\n.text:0000000000407d63\n'
p398
tp399
sS'realloc'
p400
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0061a2a8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x0061a2a8]\n'
p403
S'ff 25 b2 79 21 00\n'
p404
S'.plt:00000000004028f0\n'
p405
tp406
sS'md5_init_ctx'
p407
(S'\n__stdcall md5_init_ctx(md5_ctx * ctx)\n'
p408
V\u000avoid md5_init_ctx(md5_ctx *ctx)\u000a\u000a{\u000a  *(undefined8 *)ctx = 0xefcdab8967452301;\u000a  *(undefined8 *)&ctx->C = 0x1032547698badcfe;\u000a  *(undefined8 *)ctx->total = 0;\u000a  ctx->buflen = 0;\u000a  return;\u000a}\u000a\u000a
p409
S'MOV RAX,-0x1032547698badcff\nMOV qword ptr [RDI],RAX\nMOV RAX,0x1032547698badcfe\nMOV qword ptr [RDI + 0x8],RAX\nMOV qword ptr [RDI + 0x10],0x0\nMOV dword ptr [RDI + 0x18],0x0\nRET\n'
p410
S'48 b8 01 23 45 67 89 ab cd ef\n48 89 07\n48 b8 fe dc ba 98 76 54 32 10\n48 89 47 08\n48 c7 47 10 00 00 00 00\nc7 47 18 00 00 00 00\nc3\n'
p411
S'.text:000000000040a0c0\n.text:000000000040a0ca\n.text:000000000040a0cd\n.text:000000000040a0d7\n.text:000000000040a0db\n.text:000000000040a0e3\n.text:000000000040a0ea\n'
p412
tp413
sS'strlen'
p414
(S'\n__stdcall strlen(char * __s)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0061a118)();\u000a  return sVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x0061a118]\n'
p417
S'ff 25 42 7b 21 00\n'
p418
S'.plt:00000000004025d0\n'
p419
tp420
sS'memcmp'
p421
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0061a1b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x0061a1b8]\n'
p424
S'ff 25 a2 7a 21 00\n'
p425
S'.plt:0000000000402710\n'
p426
tp427
sS'hash_free'
p428
(S'\n__stdcall hash_free(Hash_table * table)\n'
p429
V\u000avoid hash_free(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *__ptr;\u000a  hash_entry *__ptr_00;\u000a  \u000a  if (((table->data_freer != (void (*)(void *))0x0) && (table->n_entries != 0)) &&\u000a     (__ptr_00 = table->bucket, __ptr_00 < table->bucket_limit)) {\u000a    do {\u000a      __ptr = __ptr_00;\u000a      if (__ptr_00->data != (void *)0x0) {\u000a        while (__ptr != (hash_entry *)0x0) {\u000a          (*table->data_freer)(__ptr->data);\u000a          __ptr = __ptr->next;\u000a        }\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->bucket;\u000a  if (__ptr_00 < table->bucket_limit) {\u000a    do {\u000a      __ptr = __ptr_00->next;\u000a      while (__ptr != (hash_entry *)0x0) {\u000a        phVar1 = __ptr->next;\u000a        free(__ptr);\u000a        __ptr = phVar1;\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->free_entry_list;\u000a  while (__ptr_00 != (hash_entry *)0x0) {\u000a    __ptr = __ptr_00->next;\u000a    free(__ptr_00);\u000a    __ptr_00 = __ptr;\u000a  }\u000a  free(table->bucket);\u000a  free(table);\u000a  return;\u000a}\u000a\u000a
p430
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x0040b892\nCMP qword ptr [R15 + 0x20],0x0\nJZ 0x0040b892\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x0040b86a\nJMP 0x0040b892\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x0040b892\nCMP qword ptr [R14],0x0\nJZ 0x0040b860\nTEST R14,R14\nJZ 0x0040b860\nMOV RBX,R14\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX]\nCALL qword ptr [R15 + 0x40]\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x0040b880\nJMP 0x0040b860\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x0040b8aa\nJMP 0x0040b8d3\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x0040b8d3\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x0040b8a0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00402400\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x0040b8c0\nJMP 0x0040b8a0\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x0040b8f1\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00402400\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x0040b8e0\nMOV RDI,qword ptr [R15]\nCALL 0x00402400\nMOV RDI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00402400\n'
p431
S'41 57\n41 56\n53\n49 89 ff\n49 83 7f 40 00\n74 53\n49 83 7f 20 00\n74 4c\n4d 8b 37\n4d 3b 77 08\n72 1b\neb 41\n49 83 c6 10\n4d 3b 77 08\n73 28\n49 83 3e 00\n74 f0\n4d 85 f6\n74 eb\n4c 89 f3\n0f 1f 84 00 00 00 00 00\n48 8b 3b\n41 ff 57 40\n48 8b 5b 08\n48 85 db\n75 f0\neb ce\n4d 8b 37\n4d 3b 77 08\n72 0f\neb 36\n49 83 c6 10\n4d 3b 77 08\n73 29\n49 8b 7e 08\n48 85 ff\n74 ed\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 5f 08\ne8 37 6b ff ff\n48 85 db\n48 89 df\n75 ef\neb cd\n49 8b 7f 48\n48 85 ff\n74 15\n0f 1f 40 00\n48 8b 5f 08\ne8 17 6b ff ff\n48 85 db\n48 89 df\n75 ef\n49 8b 3f\ne8 07 6b ff ff\n4c 89 ff\n5b\n41 5e\n41 5f\ne9 fa 6a ff ff\n'
p432
S'.text:000000000040b830\n.text:000000000040b832\n.text:000000000040b834\n.text:000000000040b835\n.text:000000000040b838\n.text:000000000040b83d\n.text:000000000040b83f\n.text:000000000040b844\n.text:000000000040b846\n.text:000000000040b849\n.text:000000000040b84d\n.text:000000000040b84f\n.text:000000000040b860\n.text:000000000040b864\n.text:000000000040b868\n.text:000000000040b86a\n.text:000000000040b86e\n.text:000000000040b870\n.text:000000000040b873\n.text:000000000040b875\n.text:000000000040b878\n.text:000000000040b880\n.text:000000000040b883\n.text:000000000040b887\n.text:000000000040b88b\n.text:000000000040b88e\n.text:000000000040b890\n.text:000000000040b892\n.text:000000000040b895\n.text:000000000040b899\n.text:000000000040b89b\n.text:000000000040b8a0\n.text:000000000040b8a4\n.text:000000000040b8a8\n.text:000000000040b8aa\n.text:000000000040b8ae\n.text:000000000040b8b1\n.text:000000000040b8b3\n.text:000000000040b8c0\n.text:000000000040b8c4\n.text:000000000040b8c9\n.text:000000000040b8cc\n.text:000000000040b8cf\n.text:000000000040b8d1\n.text:000000000040b8d3\n.text:000000000040b8d7\n.text:000000000040b8da\n.text:000000000040b8dc\n.text:000000000040b8e0\n.text:000000000040b8e4\n.text:000000000040b8e9\n.text:000000000040b8ec\n.text:000000000040b8ef\n.text:000000000040b8f1\n.text:000000000040b8f4\n.text:000000000040b8f9\n.text:000000000040b8fc\n.text:000000000040b8fd\n.text:000000000040b8ff\n.text:000000000040b901\n'
p433
tp434
sS'_exit'
p435
(S'\n__stdcall _exit(int __status)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0061a060)();\u000a  return;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x0061a060]\n'
p438
S'ff 25 fa 7b 21 00\n'
p439
S'.plt:0000000000402460\n'
p440
tp441
sS'sysinfo'
p442
(S'\n__stdcall sysinfo(sysinfo * __info)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sysinfo(sysinfo *__info)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sysinfo_0061a340)();\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x0061a340]\n'
p445
S'ff 25 1a 79 21 00\n'
p446
S'.plt:0000000000402a20\n'
p447
tp448
sS'emit_stdin_note'
p449
(S'\n__stdcall emit_stdin_note()\n'
p450
V\u000avoid emit_stdin_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,"\u005cnWith no FILE, or when FILE is -, read standard input.\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p451
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x413856\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00402730\n'
p452
S'50\n31 ff\nbe 56 38 41 00\nba 05 00 00 00\ne8 4e f6 ff ff\n48 8b 35 ff 75 21 00\n48 89 c7\n58\ne9 be f7 ff ff\n'
p453
S'.text:0000000000402f50\n.text:0000000000402f51\n.text:0000000000402f53\n.text:0000000000402f58\n.text:0000000000402f5d\n.text:0000000000402f62\n.text:0000000000402f69\n.text:0000000000402f6c\n.text:0000000000402f6d\n'
p454
tp455
sS'pthread_mutex_unlock'
p456
(S'\n__stdcall pthread_mutex_unlock(pthread_mutex_t * __mutex)\n'
p457
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint pthread_mutex_unlock(pthread_mutex_t *__mutex)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_pthread_mutex_unlock_0061a258)();\u000a  return iVar1;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x0061a258]\n'
p459
S'ff 25 02 7a 21 00\n'
p460
S'.plt:0000000000402850\n'
p461
tp462
sS'hash_initialize'
p463
(S'\n__stdcall hash_initialize(size_t candidate, Hash_tuning * tuning, Hash_hasher * hasher, Hash_comparator * comparator, Hash_data_freer * data_freer)\n'
p464
V\u000aHash_table *\u000ahash_initialize(size_t candidate,Hash_tuning *tuning,size_t (*hasher)(void *,size_t),\u000a               _Bool (*comparator)(void *,void *),void (*data_freer)(void *))\u000a\u000a{\u000a  _Bool _Var1;\u000a  Hash_table *table;\u000a  size_t n;\u000a  hash_entry *phVar2;\u000a  code *pcVar3;\u000a  Hash_tuning *tuning_00;\u000a  code *pcVar4;\u000a  \u000a  pcVar3 = raw_hasher;\u000a  if (hasher != (size_t (*)(void *,size_t))0x0) {\u000a    pcVar3 = hasher;\u000a  }\u000a  pcVar4 = raw_comparator;\u000a  if (comparator != (_Bool (*)(void *,void *))0x0) {\u000a    pcVar4 = comparator;\u000a  }\u000a  table = (Hash_table *)malloc(0x50);\u000a  if (table != (Hash_table *)0x0) {\u000a    tuning_00 = &default_tuning;\u000a    if (tuning != (Hash_tuning *)0x0) {\u000a      tuning_00 = tuning;\u000a    }\u000a    table->tuning = tuning_00;\u000a    _Var1 = check_tuning(table);\u000a    if (_Var1 != false) {\u000a      n = compute_bucket_size(candidate,tuning_00);\u000a      table->n_buckets = n;\u000a      if (n != 0) {\u000a        phVar2 = (hash_entry *)rpl_calloc(n,0x10);\u000a        table->bucket = phVar2;\u000a        if (phVar2 != (hash_entry *)0x0) {\u000a          table->bucket_limit = phVar2 + table->n_buckets;\u000a          *(undefined4 *)&table->n_buckets_used = 0;\u000a          *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a          *(undefined4 *)&table->n_entries = 0;\u000a          *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a          table->hasher = pcVar3;\u000a          table->comparator = pcVar4;\u000a          table->data_freer = data_freer;\u000a          table->free_entry_list = (hash_entry *)0x0;\u000a          return table;\u000a        }\u000a      }\u000a    }\u000a    free(table);\u000a  }\u000a  return (Hash_table *)0x0;\u000a}\u000a\u000a
p465
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,R8\nMOV R12,RSI\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBP,0x40b640\nCMOVNZ RBP,RDX\nTEST RCX,RCX\nMOV R14D,0x40b660\nCMOVNZ R14,RCX\nMOV EDI,0x50\nCALL 0x00402860\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040b625\nMOV qword ptr [RSP],R13\nTEST R12,R12\nMOV R13D,0x4141d0\nCMOVNZ R13,R12\nMOV qword ptr [RBX + 0x28],R13\nMOV RDI,RBX\nCALL 0x0040b670\nTEST AL,AL\nJZ 0x0040b61d\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x0040b6f0\nMOV qword ptr [RBX + 0x10],RAX\nTEST RAX,RAX\nJZ 0x0040b61d\nMOV ESI,0x10\nMOV RDI,RAX\nCALL 0x004105a0\nMOV qword ptr [RBX],RAX\nTEST RAX,RAX\nJZ 0x0040b61d\nMOV RCX,qword ptr [RBX + 0x10]\nSHL RCX,0x4\nADD RAX,RCX\nMOV qword ptr [RBX + 0x8],RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x18],XMM0\nMOV qword ptr [RBX + 0x30],RBP\nMOV qword ptr [RBX + 0x38],R14\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x40],RAX\nMOV qword ptr [RBX + 0x48],0x0\nJMP 0x0040b627\nMOV RDI,RBX\nCALL 0x00402400\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p466
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 c5\n49 89 f4\n49 89 ff\n48 85 d2\nbd 40 b6 40 00\n48 0f 45 ea\n48 85 c9\n41 be 60 b6 40 00\n4c 0f 45 f1\nbf 50 00 00 00\ne8 c9 72 ff ff\n48 89 c3\n48 85 db\n0f 84 82 00 00 00\n4c 89 2c 24\n4d 85 e4\n41 bd d0 41 41 00\n4d 0f 45 ec\n4c 89 6b 28\n48 89 df\ne8 b0 00 00 00\n84 c0\n74 59\n4c 89 ff\n4c 89 ee\ne8 21 01 00 00\n48 89 43 10\n48 85 c0\n74 45\nbe 10 00 00 00\n48 89 c7\ne8 bb 4f 00 00\n48 89 03\n48 85 c0\n74 30\n48 8b 4b 10\n48 c1 e1 04\n48 01 c8\n48 89 43 08\n0f 57 c0\n0f 11 43 18\n48 89 6b 30\n4c 89 73 38\n48 8b 04 24\n48 89 43 40\n48 c7 43 48 00 00 00 00\neb 0a\n48 89 df\ne8 db 6d ff ff\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p467
S'.text:000000000040b560\n.text:000000000040b561\n.text:000000000040b563\n.text:000000000040b565\n.text:000000000040b567\n.text:000000000040b569\n.text:000000000040b56a\n.text:000000000040b56b\n.text:000000000040b56e\n.text:000000000040b571\n.text:000000000040b574\n.text:000000000040b577\n.text:000000000040b57c\n.text:000000000040b580\n.text:000000000040b583\n.text:000000000040b589\n.text:000000000040b58d\n.text:000000000040b592\n.text:000000000040b597\n.text:000000000040b59a\n.text:000000000040b59d\n.text:000000000040b5a3\n.text:000000000040b5a7\n.text:000000000040b5aa\n.text:000000000040b5b0\n.text:000000000040b5b4\n.text:000000000040b5b8\n.text:000000000040b5bb\n.text:000000000040b5c0\n.text:000000000040b5c2\n.text:000000000040b5c4\n.text:000000000040b5c7\n.text:000000000040b5ca\n.text:000000000040b5cf\n.text:000000000040b5d3\n.text:000000000040b5d6\n.text:000000000040b5d8\n.text:000000000040b5dd\n.text:000000000040b5e0\n.text:000000000040b5e5\n.text:000000000040b5e8\n.text:000000000040b5eb\n.text:000000000040b5ed\n.text:000000000040b5f1\n.text:000000000040b5f5\n.text:000000000040b5f8\n.text:000000000040b5fc\n.text:000000000040b5ff\n.text:000000000040b603\n.text:000000000040b607\n.text:000000000040b60b\n.text:000000000040b60f\n.text:000000000040b613\n.text:000000000040b61b\n.text:000000000040b61d\n.text:000000000040b620\n.text:000000000040b625\n.text:000000000040b627\n.text:000000000040b62a\n.text:000000000040b62e\n.text:000000000040b62f\n.text:000000000040b631\n.text:000000000040b633\n.text:000000000040b635\n.text:000000000040b637\n.text:000000000040b638\n'
p468
tp469
sS'xrealloc'
p470
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p471
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p472
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x0040fbd7\nTEST RBX,RBX\nJNZ 0x0040fbd7\nCALL 0x00402400\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x004028f0\nTEST RBX,RBX\nJZ 0x0040fbe9\nTEST RAX,RAX\nJZ 0x0040fbeb\nPOP RBX\nRET\nCALL 0x0040fd10\n'
p473
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 2d 28 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 11 2d ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p474
S'.text:000000000040fbc0\n.text:000000000040fbc1\n.text:000000000040fbc4\n.text:000000000040fbc7\n.text:000000000040fbc9\n.text:000000000040fbcc\n.text:000000000040fbce\n.text:000000000040fbd3\n.text:000000000040fbd5\n.text:000000000040fbd6\n.text:000000000040fbd7\n.text:000000000040fbda\n.text:000000000040fbdf\n.text:000000000040fbe2\n.text:000000000040fbe4\n.text:000000000040fbe7\n.text:000000000040fbe9\n.text:000000000040fbea\n.text:000000000040fbeb\n'
p475
tp476
sS'signal'
p477
(S'\n__stdcall signal(int __sig, __sighandler_t __handler)\n'
p478
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__sighandler_t signal(int __sig,__sighandler_t __handler)\u000a\u000a{\u000a  __sighandler_t pVar1;\u000a  \u000a  pVar1 = (__sighandler_t)(*(code *)PTR_signal_0061a1f0)();\u000a  return pVar1;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x0061a1f0]\n'
p480
S'ff 25 6a 7a 21 00\n'
p481
S'.plt:0000000000402780\n'
p482
tp483
sS'reap_exited'
p484
(S'\n__stdcall reap_exited()\n'
p485
V\u000aundefined8 reap_exited(void)\u000a\u000a{\u000a  pid_t pVar1;\u000a  undefined8 in_RAX;\u000a  \u000a  if (0 < nprocs) {\u000a    do {\u000a      pVar1 = reap();\u000a      if (pVar1 == 0) {\u000a        return in_RAX;\u000a      }\u000a    } while (0 < nprocs);\u000a  }\u000a  return in_RAX;\u000a}\u000a\u000a
p486
S'PUSH RAX\nCMP dword ptr [0x0061ab30],0x0\nJLE 0x00408bd5\nNOP word ptr [RAX + RAX*0x1]\nXOR EDI,EDI\nCALL 0x00408ac0\nTEST EAX,EAX\nJZ 0x00408bd5\nMOV EAX,dword ptr [0x0061ab30]\nTEST EAX,EAX\nJG 0x00408bc0\nPOP RAX\nRET\n'
p487
S'50\n83 3d 78 1f 21 00 00\n7e 1b\n66 0f 1f 44 00 00\n31 ff\ne8 f9 fe ff ff\n85 c0\n74 0a\n8b 05 5f 1f 21 00\n85 c0\n7f eb\n58\nc3\n'
p488
S'.text:0000000000408bb0\n.text:0000000000408bb1\n.text:0000000000408bb8\n.text:0000000000408bba\n.text:0000000000408bc0\n.text:0000000000408bc2\n.text:0000000000408bc7\n.text:0000000000408bc9\n.text:0000000000408bcb\n.text:0000000000408bd1\n.text:0000000000408bd3\n.text:0000000000408bd5\n.text:0000000000408bd6\n'
p489
tp490
sS'randread_set_handler_arg'
p491
(S'\n__stdcall randread_set_handler_arg(randread_source * s, void * handler_arg)\n'
p492
V\u000avoid randread_set_handler_arg(randread_source *s,void *handler_arg)\u000a\u000a{\u000a  s->handler_arg = handler_arg;\u000a  return;\u000a}\u000a\u000a
p493
S'MOV qword ptr [RDI + 0x10],RSI\nRET\n'
p494
S'48 89 77 10\nc3\n'
p495
S'.text:000000000040e550\n.text:000000000040e554\n'
p496
tp497
sS'uinttostr'
p498
(S'\n__stdcall uinttostr(char * buf)\n'
p499
V\u000achar * uinttostr(char *buf)\u000a\u000a{\u000a  uint uVar1;\u000a  ulong uVar2;\u000a  long in_RSI;\u000a  char *pcVar3;\u000a  uint uVar4;\u000a  \u000a  *(undefined *)(in_RSI + 10) = 0;\u000a  pcVar3 = (char *)(in_RSI + 10);\u000a  do {\u000a    uVar4 = (uint)buf;\u000a    uVar2 = ((ulong)buf & 0xffffffff) * 0xcccccccd;\u000a    uVar1 = (uint)(uVar2 >> 0x20);\u000a    pcVar3[-1] = (char)buf + ((char)(uVar1 >> 3) + (char)(uVar1 >> 3)) * -5 | 0x30;\u000a    pcVar3 = pcVar3 + -1;\u000a    buf = (char *)(uVar2 >> 0x23);\u000a  } while (9 < uVar4);\u000a  return pcVar3;\u000a}\u000a\u000a
p500
S'MOV byte ptr [RSI + 0xa],0x0\nADD RSI,0xa\nMOV R8D,0xcccccccd\nNOP\nMOV ECX,EDI\nIMUL RCX,R8\nSHR RCX,0x23\nLEA EDX,[RCX + RCX*0x1]\nLEA EDX,[RDX + RDX*0x4]\nMOV EAX,EDI\nSUB EAX,EDX\nOR AL,0x30\nMOV byte ptr [RSI + -0x1],AL\nDEC RSI\nCMP EDI,0x9\nMOV EDI,ECX\nJA 0x0040c3d0\nMOV RAX,RSI\nRET\n'
p501
S'c6 46 0a 00\n48 83 c6 0a\n41 b8 cd cc cc cc\n66 90\n89 f9\n49 0f af c8\n48 c1 e9 23\n8d 14 09\n8d 14 92\n89 f8\n29 d0\n0c 30\n88 46 ff\n48 ff ce\n83 ff 09\n89 cf\n77 dd\n48 89 f0\nc3\n'
p502
S'.text:000000000040c3c0\n.text:000000000040c3c4\n.text:000000000040c3c8\n.text:000000000040c3ce\n.text:000000000040c3d0\n.text:000000000040c3d2\n.text:000000000040c3d6\n.text:000000000040c3da\n.text:000000000040c3dd\n.text:000000000040c3e0\n.text:000000000040c3e2\n.text:000000000040c3e4\n.text:000000000040c3e6\n.text:000000000040c3e9\n.text:000000000040c3ec\n.text:000000000040c3ef\n.text:000000000040c3f1\n.text:000000000040c3f3\n.text:000000000040c3f6\n'
p503
tp504
sS'feof_unlocked'
p505
(S'\n__stdcall feof_unlocked(FILE * __stream)\n'
p506
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint feof_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_feof_unlocked_0061a3b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p507
S'JMP qword ptr [0x0061a3b8]\n'
p508
S'ff 25 a2 78 21 00\n'
p509
S'.plt:0000000000402b10\n'
p510
tp511
sS'version_etc_ar'
p512
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p513
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p514
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x0040f9d0\nJMP 0x0040f660\n'
p515
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p516
S'.text:000000000040f9c0\n.text:000000000040f9c7\n.text:000000000040f9d0\n.text:000000000040f9d6\n.text:000000000040f9da\n.text:000000000040f9dc\n'
p517
tp518
sS'FUN_004023c0'
p519
(S'\n__stdcall FUN_004023c0()\n'
p520
V\u000avoid FUN_004023c0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0061a010)();\u000a  return;\u000a}\u000a\u000a
p521
S'PUSH qword ptr [0x0061a008]\nJMP qword ptr [0x0061a010]\n'
p522
S'ff 35 42 7c 21 00\nff 25 44 7c 21 00\n'
p523
S'.plt:00000000004023c0\n.plt:00000000004023c6\n'
p524
tp525
sS'sighandler'
p526
(S'\n__stdcall sighandler()\n'
p527
V\u000avoid sighandler(EVP_PKEY_CTX *pEParm1)\u000a\u000a{\u000a  cleanup(pEParm1);\u000a  signal((int)((ulong)pEParm1 & 0xffffffff),(__sighandler_t)0x0);\u000a  (*(code *)PTR_raise_0061a028)((ulong)pEParm1 & 0xffffffff);\u000a  return;\u000a}\u000a\u000a
p528
S'PUSH RBX\nMOV EBX,EDI\nCALL 0x00405d00\nXOR ESI,ESI\nMOV EDI,EBX\nCALL 0x00402780\nMOV EDI,EBX\nPOP RBX\nJMP 0x004023f0\n'
p529
S'53\n89 fb\ne8 c8 18 00 00\n31 f6\n89 df\ne8 3f e3 ff ff\n89 df\n5b\ne9 a7 df ff ff\n'
p530
S'.text:0000000000404430\n.text:0000000000404431\n.text:0000000000404433\n.text:0000000000404438\n.text:000000000040443a\n.text:000000000040443c\n.text:0000000000404441\n.text:0000000000404443\n.text:0000000000404444\n'
p531
tp532
sS'strtoumax'
p533
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p534
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_0061a320)();\u000a  return uVar1;\u000a}\u000a\u000a
p535
S'JMP qword ptr [0x0061a320]\n'
p536
S'ff 25 3a 79 21 00\n'
p537
S'.plt:00000000004029e0\n'
p538
tp539
sS'check'
p540
(S'\n__stdcall check(char * file_name)\n'
p541
V\u000a_Bool check(char *file_name)\u000a\u000a{\u000a  FILE *fp;\u000a  size_t sVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  FILE *fp_00;\u000a  line *a;\u000a  line *plVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  char *output_file;\u000a  size_t alloc;\u000a  byte bVar7;\u000a  line *plVar8;\u000a  char in_SIL;\u000a  undefined uVar9;\u000a  line temp;\u000a  keyfield *key;\u000a  char hr_buf [21];\u000a  long local_c0;\u000a  line local_a8;\u000a  keyfield *local_88;\u000a  buffer local_80;\u000a  char local_48 [24];\u000a  \u000a  fp_00 = xfopen(file_name,"r");\u000a  bVar7 = unique;\u000a  local_88 = keylist;\u000a  alloc = sort_size;\u000a  if (sort_size < merge_buffer_size) {\u000a    alloc = merge_buffer_size;\u000a  }\u000a  initbuf(&local_80,0x20,alloc);\u000a  local_a8.text = (char *)0x0;\u000a  _Var2 = fillbuf(&local_80,fp_00,file_name);\u000a  uVar9 = 1;\u000a  if (_Var2 != false) {\u000a    bVar7 = (bVar7 ^ 1) & 1;\u000a    alloc = 0;\u000a    local_c0 = 0;\u000a    do {\u000a      a = buffer_linelim(&local_80);\u000a      sVar1 = local_80.nlines;\u000a      if ((alloc != 0) && (iVar3 = compare(&local_a8,a + -1), (int)(uint)bVar7 <= iVar3)) {\u000aLAB_004053e6:\u000a        if (in_SIL == 'c') {\u000a          plVar4 = buffer_linelim(&local_80);\u000a          fp = stderr;\u000a          uVar5 = dcgettext(0,"%s: %s:%s: disorder: ",5);\u000a          output_file = program_name;\u000a          pcVar6 = umaxtostr(local_c0 + ((long)((long)plVar4 - (long)(a + -1)) >> 5),local_48);\u000a          __fprintf_chk(fp,1,uVar5,output_file,file_name,pcVar6);\u000a          fp = stderr;\u000a          output_file = (char *)dcgettext(0,"standard error",5);\u000a          write_line(a + -1,fp,output_file);\u000a        }\u000a        uVar9 = 0;\u000a        goto LAB_00405495;\u000a      }\u000a      plVar8 = a + sVar1 * 0x7ffffffffffffff;\u000a      plVar4 = a + -1;\u000a      while (a = plVar4, plVar8 < a) {\u000a        iVar3 = compare(a,a + -1);\u000a        plVar4 = a + -1;\u000a        if ((int)(uint)bVar7 <= iVar3) goto LAB_004053e6;\u000a      }\u000a      local_c0 = local_c0 + local_80.nlines;\u000a      if (alloc < a->length) {\u000a        do {\u000a          alloc = alloc * 2;\u000a          if (alloc == 0) {\u000a            alloc = a->length;\u000a            break;\u000a          }\u000a        } while (alloc < a->length);\u000a        free(local_a8.text);\u000a        local_a8.text = (char *)xmalloc(alloc);\u000a      }\u000a      memcpy(local_a8.text,a->text,a->length);\u000a      local_a8.length = a->length;\u000a      if (local_88 != (keyfield *)0x0) {\u000a        local_a8.keybeg = a->keybeg + -(long)a->text + (long)local_a8.text;\u000a        local_a8.keylim = a->keylim + -(long)a->text + (long)local_a8.text;\u000a      }\u000a      _Var2 = fillbuf(&local_80,fp_00,file_name);\u000a    } while (_Var2 != false);\u000a    uVar9 = 1;\u000a  }\u000aLAB_00405495:\u000a  xfclose(fp_00,file_name);\u000a  free(local_80.buf);\u000a  free(local_a8.text);\u000a  return (_Bool)uVar9;\u000a}\u000a\u000a
p542
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R12D,ESI\nMOV R14,RDI\nMOV ESI,0x413a7d\nCALL 0x00405e70\nMOV R15,RAX\nMOV RAX,qword ptr [0x0061a650]\nMOV qword ptr [RSP + 0x40],RAX\nMOV BL,byte ptr [0x0061a64a]\nMOV RAX,qword ptr [0x0061a4c0]\nMOV RDX,qword ptr [0x0061a668]\nCMP RAX,RDX\nCMOVA RDX,RAX\nLEA RBP,[RSP + 0x48]\nMOV ESI,0x20\nMOV RDI,RBP\nCALL 0x00405ea0\nMOV qword ptr [RSP + 0x20],0x0\nMOV RDI,RBP\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x00405f20\nMOV R13B,0x1\nTEST AL,AL\nJZ 0x00405495\nMOV dword ptr [RSP + 0x1c],R12D\nXOR BL,0x1\nAND BL,0x1\nMOVZX R13D,BL\nXOR R12D,R12D\nLEA RBX,[RSP + 0x48]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nMOV qword ptr [RSP + 0x10],R15\nMOV RDI,RBX\nCALL 0x004062c0\nMOV RBP,RAX\nMOV R15,qword ptr [RSP + 0x58]\nTEST R12,R12\nJZ 0x004052ce\nLEA RSI,[RBP + -0x20]\nLEA RDI,[RSP + 0x20]\nCALL 0x004062d0\nCMP R13D,EAX\nJLE 0x004053e6\nSHL R15,0x5\nMOV RBX,RBP\nSUB RBX,R15\nADD RBP,-0x20\nNOP dword ptr [RAX]\nCMP RBX,RBP\nJNC 0x00405310\nLEA R15,[RBP + -0x20]\nMOV RDI,RBP\nMOV RSI,R15\nCALL 0x004062d0\nCMP R13D,EAX\nMOV RBP,R15\nJG 0x004052e0\nJMP 0x004053df\nMOV RAX,qword ptr [RSP + 0x8]\nADD RAX,qword ptr [RSP + 0x58]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RAX,qword ptr [RBP + 0x8]\nCMP R12,RAX\nJNC 0x00405350\nMOV R15,qword ptr [RSP + 0x10]\nLEA RBX,[RSP + 0x48]\nNOP word ptr CS:[RAX + RAX*0x1]\nADD R12,R12\nJZ 0x0040535c\nCMP R12,RAX\nJC 0x00405340\nJMP 0x00405360\nMOV R15,qword ptr [RSP + 0x10]\nLEA RBX,[RSP + 0x48]\nJMP 0x00405377\nMOV R12,qword ptr [RBP + 0x8]\nMOV RDI,qword ptr [RSP + 0x20]\nCALL 0x00402400\nMOV RDI,R12\nCALL 0x0040fb80\nMOV qword ptr [RSP + 0x20],RAX\nMOV RDI,qword ptr [RSP + 0x20]\nMOV RSI,qword ptr [RBP]\nMOV RDX,qword ptr [RBP + 0x8]\nCALL 0x004027c0\nMOV RAX,qword ptr [RBP + 0x8]\nMOV qword ptr [RSP + 0x28],RAX\nCMP qword ptr [RSP + 0x40],0x0\nJZ 0x004053c1\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RBP]\nMOV RDX,qword ptr [RBP + 0x10]\nSUB RDX,RCX\nADD RDX,RAX\nMOV qword ptr [RSP + 0x30],RDX\nMOV RDX,qword ptr [RBP + 0x18]\nSUB RDX,RCX\nADD RDX,RAX\nMOV qword ptr [RSP + 0x38],RDX\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x00405f20\nTEST AL,AL\nJNZ 0x004052a2\nMOV R13B,0x1\nJMP 0x00405495\nADD R15,0x20\nMOV RBP,R15\nCMP byte ptr [RSP + 0x1c],0x63\nJNZ 0x0040548d\nADD RBP,-0x20\nLEA RDI,[RSP + 0x48]\nCALL 0x004062c0\nSUB RAX,RBP\nSAR RAX,0x5\nMOV RBX,qword ptr [RSP + 0x8]\nADD RBX,RAX\nMOV RAX,qword ptr [0x0061a5a0]\nMOV qword ptr [RSP + 0x8],RAX\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x413e17\nMOV EDX,0x5\nCALL 0x004025b0\nMOV R12,RAX\nMOV R15,qword ptr [0x0061ab78]\nLEA RSI,[0x80 + RSP]\nMOV RDI,RBX\nCALL 0x0040c400\nMOV R9,RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,R14\nCALL 0x00402a70\nMOV R15,qword ptr [0x0061a5a0]\nXOR EDI,EDI\nMOV ESI,0x413e2d\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDI,RBP\nMOV RSI,R15\nMOV RDX,RAX\nCALL 0x004063a0\nJMP 0x00405490\nXOR R13D,R13D\nMOV R15,qword ptr [RSP + 0x10]\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x004064c0\nMOV RDI,qword ptr [RSP + 0x48]\nCALL 0x00402400\nMOV RDI,qword ptr [RSP + 0x20]\nCALL 0x00402400\nMOV EAX,R13D\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p543
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n41 89 f4\n49 89 fe\nbe 7d 3a 41 00\ne8 4f 0c 00 00\n49 89 c7\n48 8b 05 25 54 21 00\n48 89 44 24 40\n8a 1d 14 54 21 00\n48 8b 05 83 52 21 00\n48 8b 15 24 54 21 00\n48 39 d0\n48 0f 47 d0\n48 8d 6c 24 48\nbe 20 00 00 00\n48 89 ef\ne8 43 0c 00 00\n48 c7 44 24 20 00 00 00 00\n48 89 ef\n4c 89 fe\n4c 89 f2\ne8 ac 0c 00 00\n41 b5 01\n84 c0\n0f 84 16 02 00 00\n44 89 64 24 1c\n80 f3 01\n80 e3 01\n44 0f b6 eb\n45 31 e4\n48 8d 5c 24 48\n31 c0\n48 89 44 24 08\n4c 89 7c 24 10\n48 89 df\ne8 16 10 00 00\n48 89 c5\n4c 8b 7c 24 58\n4d 85 e4\n74 17\n48 8d 75 e0\n48 8d 7c 24 20\ne8 0b 10 00 00\n41 39 c5\n0f 8e 18 01 00 00\n49 c1 e7 05\n48 89 eb\n4c 29 fb\n48 83 c5 e0\n0f 1f 40 00\n48 39 eb\n73 2b\n4c 8d 7d e0\n48 89 ef\n4c 89 fe\ne8 dc 0f 00 00\n41 39 c5\n4c 89 fd\n7f e4\ne9 de 00 00 00\n48 8b 44 24 08\n48 03 44 24 58\n48 89 44 24 08\n48 8b 45 08\n49 39 c4\n73 28\n4c 8b 7c 24 10\n48 8d 5c 24 48\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4d 01 e4\n74 17\n49 39 c4\n72 f6\neb 14\n4c 8b 7c 24 10\n48 8d 5c 24 48\neb 1b\n4c 8b 65 08\n48 8b 7c 24 20\ne8 96 d0 ff ff\n4c 89 e7\ne8 0e a8 00 00\n48 89 44 24 20\n48 8b 7c 24 20\n48 8b 75 00\n48 8b 55 08\ne8 37 d4 ff ff\n48 8b 45 08\n48 89 44 24 28\n48 83 7c 24 40 00\n74 27\n48 8b 44 24 20\n48 8b 4d 00\n48 8b 55 10\n48 29 ca\n48 01 c2\n48 89 54 24 30\n48 8b 55 18\n48 29 ca\n48 01 c2\n48 89 54 24 38\n48 89 df\n4c 89 fe\n4c 89 f2\ne8 51 0b 00 00\n84 c0\n0f 85 cb fe ff ff\n41 b5 01\ne9 b6 00 00 00\n49 83 c7 20\n4c 89 fd\n80 7c 24 1c 63\n0f 85 9c 00 00 00\n48 83 c5 e0\n48 8d 7c 24 48\ne8 c1 0e 00 00\n48 29 e8\n48 c1 f8 05\n48 8b 5c 24 08\n48 01 c3\n48 8b 05 8b 51 21 00\n48 89 44 24 08\n45 31 ed\n31 ff\nbe 17 3e 41 00\nba 05 00 00 00\ne8 82 d1 ff ff\n49 89 c4\n4c 8b 3d 40 57 21 00\n48 8d b4 24 80 00 00 00\n48 89 df\ne8 b8 6f 00 00\n49 89 c1\nbe 01 00 00 00\n31 c0\n48 8b 7c 24 08\n4c 89 e2\n4c 89 f9\n4d 89 f0\ne8 0b d6 ff ff\n4c 8b 3d 34 51 21 00\n31 ff\nbe 2d 3e 41 00\nba 05 00 00 00\ne8 33 d1 ff ff\n48 89 ef\n4c 89 fe\n48 89 c2\ne8 15 0f 00 00\neb 03\n45 31 ed\n4c 8b 7c 24 10\n4c 89 ff\n4c 89 f6\ne8 20 10 00 00\n48 8b 7c 24 48\ne8 56 cf ff ff\n48 8b 7c 24 20\ne8 4c cf ff ff\n44 89 e8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p544
S'.text:0000000000405200\n.text:0000000000405201\n.text:0000000000405203\n.text:0000000000405205\n.text:0000000000405207\n.text:0000000000405209\n.text:000000000040520a\n.text:0000000000405211\n.text:0000000000405214\n.text:0000000000405217\n.text:000000000040521c\n.text:0000000000405221\n.text:0000000000405224\n.text:000000000040522b\n.text:0000000000405230\n.text:0000000000405236\n.text:000000000040523d\n.text:0000000000405244\n.text:0000000000405247\n.text:000000000040524b\n.text:0000000000405250\n.text:0000000000405255\n.text:0000000000405258\n.text:000000000040525d\n.text:0000000000405266\n.text:0000000000405269\n.text:000000000040526c\n.text:000000000040526f\n.text:0000000000405274\n.text:0000000000405277\n.text:0000000000405279\n.text:000000000040527f\n.text:0000000000405284\n.text:0000000000405287\n.text:000000000040528a\n.text:000000000040528e\n.text:0000000000405291\n.text:0000000000405296\n.text:0000000000405298\n.text:000000000040529d\n.text:00000000004052a2\n.text:00000000004052a5\n.text:00000000004052aa\n.text:00000000004052ad\n.text:00000000004052b2\n.text:00000000004052b5\n.text:00000000004052b7\n.text:00000000004052bb\n.text:00000000004052c0\n.text:00000000004052c5\n.text:00000000004052c8\n.text:00000000004052ce\n.text:00000000004052d2\n.text:00000000004052d5\n.text:00000000004052d8\n.text:00000000004052dc\n.text:00000000004052e0\n.text:00000000004052e3\n.text:00000000004052e5\n.text:00000000004052e9\n.text:00000000004052ec\n.text:00000000004052ef\n.text:00000000004052f4\n.text:00000000004052f7\n.text:00000000004052fa\n.text:00000000004052fc\n.text:0000000000405310\n.text:0000000000405315\n.text:000000000040531a\n.text:000000000040531f\n.text:0000000000405323\n.text:0000000000405326\n.text:0000000000405328\n.text:000000000040532d\n.text:0000000000405332\n.text:0000000000405340\n.text:0000000000405343\n.text:0000000000405345\n.text:0000000000405348\n.text:000000000040534a\n.text:0000000000405350\n.text:0000000000405355\n.text:000000000040535a\n.text:000000000040535c\n.text:0000000000405360\n.text:0000000000405365\n.text:000000000040536a\n.text:000000000040536d\n.text:0000000000405372\n.text:0000000000405377\n.text:000000000040537c\n.text:0000000000405380\n.text:0000000000405384\n.text:0000000000405389\n.text:000000000040538d\n.text:0000000000405392\n.text:0000000000405398\n.text:000000000040539a\n.text:000000000040539f\n.text:00000000004053a3\n.text:00000000004053a7\n.text:00000000004053aa\n.text:00000000004053ad\n.text:00000000004053b2\n.text:00000000004053b6\n.text:00000000004053b9\n.text:00000000004053bc\n.text:00000000004053c1\n.text:00000000004053c4\n.text:00000000004053c7\n.text:00000000004053ca\n.text:00000000004053cf\n.text:00000000004053d1\n.text:00000000004053d7\n.text:00000000004053da\n.text:00000000004053df\n.text:00000000004053e3\n.text:00000000004053e6\n.text:00000000004053eb\n.text:00000000004053f1\n.text:00000000004053f5\n.text:00000000004053fa\n.text:00000000004053ff\n.text:0000000000405402\n.text:0000000000405406\n.text:000000000040540b\n.text:000000000040540e\n.text:0000000000405415\n.text:000000000040541a\n.text:000000000040541d\n.text:000000000040541f\n.text:0000000000405424\n.text:0000000000405429\n.text:000000000040542e\n.text:0000000000405431\n.text:0000000000405438\n.text:0000000000405440\n.text:0000000000405443\n.text:0000000000405448\n.text:000000000040544b\n.text:0000000000405450\n.text:0000000000405452\n.text:0000000000405457\n.text:000000000040545a\n.text:000000000040545d\n.text:0000000000405460\n.text:0000000000405465\n.text:000000000040546c\n.text:000000000040546e\n.text:0000000000405473\n.text:0000000000405478\n.text:000000000040547d\n.text:0000000000405480\n.text:0000000000405483\n.text:0000000000405486\n.text:000000000040548b\n.text:000000000040548d\n.text:0000000000405490\n.text:0000000000405495\n.text:0000000000405498\n.text:000000000040549b\n.text:00000000004054a0\n.text:00000000004054a5\n.text:00000000004054aa\n.text:00000000004054af\n.text:00000000004054b4\n.text:00000000004054b7\n.text:00000000004054be\n.text:00000000004054bf\n.text:00000000004054c1\n.text:00000000004054c3\n.text:00000000004054c5\n.text:00000000004054c7\n.text:00000000004054c8\n'
p545
tp546
sS'set_uint32'
p547
(S'\n__stdcall set_uint32(char * cp)\n'
p548
V\u000avoid set_uint32(char *cp)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  \u000a  *(undefined4 *)cp = in_ESI;\u000a  return;\u000a}\u000a\u000a
p549
S'MOV dword ptr [RDI],ESI\nRET\n'
p550
S'89 37\nc3\n'
p551
S'.text:000000000040a140\n.text:000000000040a142\n'
p552
tp553
sS'xfopen'
p554
(S'\n__stdcall xfopen(char * file, char * how)\n'
p555
V\u000aFILE * xfopen(char *file,char *how)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  char *message;\u000a  \u000a  pFVar1 = stream_open(file,how);\u000a  if (pFVar1 != (FILE *)0x0) {\u000a    return pFVar1;\u000a  }\u000a  message = (char *)dcgettext(0,"open failed",5);\u000a                    /* WARNING: Subroutine does not return */\u000a  die(message,file);\u000a}\u000a\u000a
p556
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00406540\nTEST RAX,RAX\nJZ 0x00405e80\nPOP RBX\nRET\nXOR EDI,EDI\nMOV ESI,0x413e0b\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDI,RAX\nMOV RSI,RBX\nCALL 0x00405c70\n'
p557
S'53\n48 89 fb\ne8 c7 06 00 00\n48 85 c0\n74 02\n5b\nc3\n31 ff\nbe 0b 3e 41 00\nba 05 00 00 00\ne8 1f c7 ff ff\n48 89 c7\n48 89 de\ne8 d4 fd ff ff\n'
p558
S'.text:0000000000405e70\n.text:0000000000405e71\n.text:0000000000405e74\n.text:0000000000405e79\n.text:0000000000405e7c\n.text:0000000000405e7e\n.text:0000000000405e7f\n.text:0000000000405e80\n.text:0000000000405e82\n.text:0000000000405e87\n.text:0000000000405e8c\n.text:0000000000405e91\n.text:0000000000405e94\n.text:0000000000405e97\n'
p559
tp560
sS'compare_random'
p561
(S'\n__stdcall compare_random(char * texta, size_t lena, char * textb, size_t lenb)\n'
p562
V\u000aint compare_random(char *texta,size_t lena,char *textb,size_t lenb)\u000a\u000a{\u000a  char *pcVar1;\u000a  char *pcVar2;\u000a  ulong uVar3;\u000a  int iVar4;\u000a  size_t __n;\u000a  size_t destsize;\u000a  ulong __size;\u000a  char *dest;\u000a  ulong destsize_00;\u000a  bool bVar5;\u000a  uint32_t dig [2] [4];\u000a  md5_ctx s [2];\u000a  char stackbuf [4000];\u000a  int local_116c;\u000a  char *local_1168;\u000a  char *local_1160;\u000a  size_t local_1158;\u000a  char *local_1150;\u000a  undefined local_1138 [16];\u000a  undefined local_1128 [16];\u000a  md5_ctx local_1118;\u000a  md5_ctx local_107c;\u000a  char local_fd8 [4008];\u000a  \u000a  memcpy(&local_107c,&random_md5_state,0x9c);\u000a  memcpy(&local_1118,&random_md5_state,0x9c);\u000a  if (hard_LC_COLLATE == false) {\u000a    local_1160 = (char *)0x0;\u000a    local_116c = 0;\u000a    local_1168 = texta;\u000a    local_1158 = lenb;\u000a  }\u000a  else {\u000a    pcVar1 = texta + lena;\u000a    pcVar2 = textb + lenb;\u000a    uVar3 = (lenb + lena) * 3 + 2;\u000a    destsize_00 = 4000;\u000a    local_1160 = (char *)0x0;\u000a    local_116c = 0;\u000a    local_1168 = local_fd8;\u000a    local_1150 = texta;\u000a    if (4000 < uVar3) goto LAB_004073e5;\u000aLAB_00407438:\u000a    if (local_1150 < pcVar1) {\u000a      lena = xstrxfrm(local_1168,local_1150,destsize_00);\u000a      lena = lena + 1;\u000a      if (pcVar2 <= textb) goto LAB_004074b0;\u000aLAB_0040747a:\u000a      dest = local_1168 + lena;\u000a      destsize = destsize_00 - lena;\u000a      if (destsize_00 < lena) {\u000a        dest = (char *)0x0;\u000a        destsize = 0;\u000a      }\u000a      local_1158 = xstrxfrm(dest,textb,destsize);\u000a      local_1158 = local_1158 + 1;\u000a    }\u000a    else {\u000a      lena = 0;\u000a      if (textb < pcVar2) goto LAB_0040747a;\u000aLAB_004074b0:\u000a      local_1158 = 0;\u000a    }\u000a    __size = local_1158 + lena;\u000a    if ((destsize_00 < __size) || (destsize_00 < lena)) {\u000a      destsize_00 = __size * 3 >> 1;\u000a      if (0x5555555555555554 < __size) {\u000a        destsize_00 = __size;\u000a      }\u000a      free(local_1160);\u000a      local_1160 = (char *)xmalloc(destsize_00);\u000a      if (local_1150 < pcVar1) {\u000a        strxfrm(local_1160,local_1150,lena);\u000a      }\u000a      local_1168 = local_1160;\u000a      if (textb < pcVar2) {\u000a        strxfrm(local_1160 + lena,textb,local_1158);\u000a        local_1168 = local_1160;\u000a      }\u000a    }\u000a    if (local_1150 < pcVar1) {\u000a      __n = strlen(local_1150);\u000a      local_1150 = local_1150 + __n + 1;\u000a    }\u000a    if (textb < pcVar2) {\u000a      __n = strlen(textb);\u000a      textb = textb + __n + 1;\u000a    }\u000a    if ((local_1150 < pcVar1) || (textb < pcVar2)) {\u000a      md5_process_bytes(local_1168,lena,&local_1118);\u000a      md5_process_bytes(local_1168 + lena,local_1158,&local_107c);\u000a      if (local_116c == 0) {\u000a        bVar5 = lena < local_1158;\u000a        __n = local_1158;\u000a        if (bVar5) {\u000a          __n = lena;\u000a        }\u000a        iVar4 = memcmp(local_1168,local_1168 + lena,__n);\u000a        local_116c = (uint)(!bVar5 && lena != local_1158) - (uint)bVar5;\u000a        if (iVar4 != 0) {\u000a          local_116c = iVar4;\u000a        }\u000a      }\u000a      if (destsize_00 < uVar3) {\u000aLAB_004073e5:\u000a        __size = destsize_00 * 3 >> 1;\u000a        if (__size < uVar3) {\u000a          __size = uVar3;\u000a        }\u000a        free(local_1160);\u000a        local_1160 = (char *)malloc(__size);\u000a        destsize_00 = 4000;\u000a        if (local_1160 != (char *)0x0) {\u000a          destsize_00 = __size;\u000a        }\u000a        local_1168 = local_1160;\u000a        if (local_1160 == (char *)0x0) {\u000a          local_1168 = local_fd8;\u000a        }\u000a      }\u000a      goto LAB_00407438;\u000a    }\u000a    textb = local_1168 + lena;\u000a  }\u000a  md5_process_bytes(local_1168,lena,&local_1118);\u000a  md5_finish_ctx(&local_1118,local_1138);\u000a  md5_process_bytes(textb,local_1158,&local_107c);\u000a  md5_finish_ctx(&local_107c,local_1128);\u000a  iVar4 = memcmp(local_1138,local_1128,0x10);\u000a  if ((iVar4 == 0) && (iVar4 = local_116c, local_116c == 0)) {\u000a    destsize = local_1158;\u000a    if (lena < local_1158) {\u000a      destsize = lena;\u000a    }\u000a    iVar4 = memcmp(local_1168,textb,destsize);\u000a    if (iVar4 == 0) {\u000a      iVar4 = (uint)(lena >= local_1158 && lena != local_1158) - (uint)(lena < local_1158);\u000a    }\u000a  }\u000a  free(local_1160);\u000a  return iVar4;\u000a}\u000a\u000a
p563
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x1148\nMOV R15,RCX\nMOV R14,RDX\nMOV R13,RSI\nMOV RBX,RDI\nLEA RDI,[0xfc + RSP]\nMOV ESI,0x61aa88\nMOV EDX,0x9c\nCALL 0x004027c0\nLEA RDI,[RSP + 0x60]\nMOV ESI,0x61aa88\nMOV EDX,0x9c\nCALL 0x004027c0\nCMP byte ptr [0x0061a5b0],0x0\nJZ 0x004075ba\nLEA RAX,[0x1a0 + RSP]\nMOV qword ptr [RSP + 0x28],RBX\nLEA RCX,[RBX + R13*0x1]\nMOV qword ptr [RSP + 0x38],RCX\nMOV RBP,R14\nLEA RCX,[R14 + R15*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nADD R15,R13\nLEA RCX,[R15 + R15*0x2 + 0x2]\nMOV R12D,0xfa0\nXOR R13D,R13D\nMOV qword ptr [RSP + 0x10],RAX\nMOV dword ptr [RSP + 0xc],0x0\nMOV qword ptr [RSP + 0x30],RCX\nCMP R12,RCX\nJC 0x004073e5\nJMP 0x00407430\nCMP R15,RBX\nCMOVC RBX,R15\nMOV R15D,0x0\nSETA R15B\nSBB R15D,0x0\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x00402710\nMOV RCX,qword ptr [RSP + 0x30]\nTEST EAX,EAX\nCMOVNZ R15D,EAX\nMOV dword ptr [RSP + 0xc],R15D\nNOP dword ptr [RAX]\nCMP R12,RCX\nJNC 0x00407430\nLEA RBX,[R12 + R12*0x2]\nSHR RBX,1\nCMP RCX,RBX\nCMOVA RBX,RCX\nMOV RDI,R13\nCALL 0x00402400\nMOV RDI,RBX\nCALL 0x00402860\nMOV R14,RAX\nTEST R14,R14\nMOV R12D,0xfa0\nCMOVNZ R12,RBX\nMOV RCX,R14\nLEA RAX,[0x1a0 + RSP]\nCMOVZ RCX,RAX\nMOV qword ptr [RSP + 0x10],RCX\nMOV RBX,qword ptr [RSP + 0x28]\nJMP 0x00407438\nMOV RBX,qword ptr [RSP + 0x28]\nMOV R14,R13\nMOV R15,qword ptr [RSP + 0x38]\nCMP RBX,R15\nJNC 0x00407470\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,RBX\nMOV RDX,R12\nCALL 0x00407790\nMOV R13,RAX\nINC R13\nCMP RBP,qword ptr [RSP + 0x18]\nJC 0x0040747a\nJMP 0x004074b0\nXOR R13D,R13D\nCMP RBP,qword ptr [RSP + 0x18]\nJNC 0x004074b0\nMOV RAX,qword ptr [RSP + 0x10]\nLEA RDI,[RAX + R13*0x1]\nMOV RDX,R12\nSUB RDX,R13\nMOV EAX,0x0\nCMOVC RDI,RAX\nCMOVC RDX,RAX\nMOV RSI,RBP\nCALL 0x00407790\nINC RAX\nJMP 0x004074b2\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nLEA RAX,[RAX + R13*0x1]\nCMP R12,R13\nSETC CL\nCMP RAX,R12\nJA 0x004074ca\nTEST CL,CL\nJZ 0x00407527\nLEA R12,[RAX + RAX*0x2]\nSHR R12,1\nMOV RCX,0x5555555555555555\nCMP RAX,RCX\nCMOVNC R12,RAX\nMOV RDI,R14\nCALL 0x00402400\nMOV RDI,R12\nCALL 0x0040fb80\nMOV R14,RAX\nCMP RBX,R15\nJNC 0x00407508\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,R13\nCALL 0x00402760\nCMP RBP,qword ptr [RSP + 0x18]\nJNC 0x00407522\nMOV RDI,R14\nADD RDI,R13\nMOV RSI,RBP\nMOV RDX,qword ptr [RSP + 0x20]\nCALL 0x00402760\nMOV qword ptr [RSP + 0x10],R14\nCMP RBX,R15\nJNC 0x00407539\nMOV RDI,RBX\nCALL 0x004025d0\nLEA RBX,[RBX + RAX*0x1 + 0x1]\nCMP RBP,qword ptr [RSP + 0x18]\nJNC 0x0040754d\nMOV RDI,RBP\nCALL 0x004025d0\nLEA RBP,[RBP + RAX*0x1 + 0x1]\nCMP RBX,R15\nJC 0x00407559\nCMP RBP,qword ptr [RSP + 0x18]\nJNC 0x004075aa\nMOV R15,R13\nMOV R13,R14\nMOV qword ptr [RSP + 0x28],RBX\nMOV RBX,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nMOV RSI,R15\nLEA RDX,[RSP + 0x60]\nCALL 0x0040aa20\nLEA R14,[RBX + R15*0x1]\nMOV RDI,R14\nMOV RBX,qword ptr [RSP + 0x20]\nMOV RSI,RBX\nLEA RDX,[0xfc + RSP]\nCALL 0x0040aa20\nCMP dword ptr [RSP + 0xc],0x0\nMOV RCX,qword ptr [RSP + 0x30]\nJNZ 0x004073e0\nJMP 0x004073a4\nMOV qword ptr [RSP + 0x18],R14\nMOV RBX,qword ptr [RSP + 0x10]\nLEA RBP,[RBX + R13*0x1]\nJMP 0x004075d1\nMOV qword ptr [RSP + 0x20],R15\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nMOV dword ptr [RSP + 0xc],0x0\nMOV RBP,R14\nLEA R14,[RSP + 0x60]\nMOV qword ptr [RSP + 0x28],RBX\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R14\nCALL 0x0040aa20\nLEA R15,[RSP + 0x40]\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x0040a150\nMOV R12,RBP\nMOV RDI,RBP\nMOV RSI,qword ptr [RSP + 0x20]\nLEA RBX,[0xfc + RSP]\nMOV RDX,RBX\nCALL 0x0040aa20\nLEA R14,[RSP + 0x50]\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x0040a150\nMOV EDX,0x10\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00402710\nMOV R15D,EAX\nTEST R15D,R15D\nJNZ 0x0040767a\nMOV R15D,dword ptr [RSP + 0xc]\nTEST R15D,R15D\nJNZ 0x0040767a\nMOV RAX,qword ptr [RSP + 0x20]\nCMP R13,RAX\nMOV RDX,RAX\nCMOVC RDX,R13\nMOV RDI,qword ptr [RSP + 0x28]\nMOV RSI,R12\nCALL 0x00402710\nMOV R15D,EAX\nTEST R15D,R15D\nJNZ 0x0040767a\nXOR R15D,R15D\nCMP R13,qword ptr [RSP + 0x20]\nSETA R15B\nSBB R15D,0x0\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x00402400\nMOV EAX,R15D\nADD RSP,0x1148\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p564
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 48 11 00 00\n49 89 cf\n49 89 d6\n49 89 f5\n48 89 fb\n48 8d bc 24 fc 00 00 00\nbe 88 aa 61 00\nba 9c 00 00 00\ne8 8c b4 ff ff\n48 8d 7c 24 60\nbe 88 aa 61 00\nba 9c 00 00 00\ne8 78 b4 ff ff\n80 3d 61 32 21 00 00\n0f 84 65 02 00 00\n48 8d 84 24 a0 01 00 00\n48 89 5c 24 28\n4a 8d 0c 2b\n48 89 4c 24 38\n4c 89 f5\n4b 8d 0c 3e\n48 89 4c 24 18\n4d 01 ef\n4b 8d 4c 7f 02\n41 bc a0 0f 00 00\n45 31 ed\n48 89 44 24 10\nc7 44 24 0c 00 00 00 00\n48 89 4c 24 30\n49 39 cc\n72 46\ne9 8c 00 00 00\n49 39 df\n49 0f 42 df\n41 bf 00 00 00 00\n41 0f 97 c7\n41 83 df 00\n48 8b 7c 24 10\n4c 89 f6\n48 89 da\ne8 47 b3 ff ff\n48 8b 4c 24 30\n85 c0\n44 0f 45 f8\n44 89 7c 24 0c\n0f 1f 80 00 00 00 00\n49 39 cc\n73 4b\n4b 8d 1c 64\n48 d1 eb\n48 39 d9\n48 0f 47 d9\n4c 89 ef\ne8 05 b0 ff ff\n48 89 df\ne8 5d b4 ff ff\n49 89 c6\n4d 85 f6\n41 bc a0 0f 00 00\n4c 0f 45 e3\n4c 89 f1\n48 8d 84 24 a0 01 00 00\n48 0f 44 c8\n48 89 4c 24 10\n48 8b 5c 24 28\neb 0a\n48 8b 5c 24 28\n4d 89 ee\n4c 8b 7c 24 38\n4c 39 fb\n73 2e\n48 8b 7c 24 10\n48 89 de\n4c 89 e2\ne8 3e 03 00 00\n49 89 c5\n49 ff c5\n48 3b 6c 24 18\n72 1b\neb 4f\n45 31 ed\n48 3b 6c 24 18\n73 36\n48 8b 44 24 10\n4a 8d 3c 28\n4c 89 e2\n4c 29 ea\nb8 00 00 00 00\n48 0f 42 f8\n48 0f 42 d0\n48 89 ee\ne8 f2 02 00 00\n48 ff c0\neb 0f\n31 c0\n48 89 44 24 20\n4a 8d 04 28\n4d 39 ec\n0f 92 c1\n4c 39 e0\n77 04\n84 c9\n74 5d\n4c 8d 24 40\n49 d1 ec\n48 b9 55 55 55 55 55 55 55 55\n48 39 c8\n4c 0f 43 e0\n4c 89 f7\ne8 16 af ff ff\n4c 89 e7\ne8 8e 86 00 00\n49 89 c6\n4c 39 fb\n73 0e\n4c 89 f7\n48 89 de\n4c 89 ea\ne8 58 b2 ff ff\n48 3b 6c 24 18\n73 13\n4c 89 f7\n4c 01 ef\n48 89 ee\n48 8b 54 24 20\ne8 3e b2 ff ff\n4c 89 74 24 10\n4c 39 fb\n73 0d\n48 89 df\ne8 9c b0 ff ff\n48 8d 5c 03 01\n48 3b 6c 24 18\n73 0d\n48 89 ef\ne8 88 b0 ff ff\n48 8d 6c 05 01\n4c 39 fb\n72 07\n48 3b 6c 24 18\n73 51\n4d 89 ef\n4d 89 f5\n48 89 5c 24 28\n48 8b 5c 24 10\n48 89 df\n4c 89 fe\n48 8d 54 24 60\ne8 a7 34 00 00\n4e 8d 34 3b\n4c 89 f7\n48 8b 5c 24 20\n48 89 de\n48 8d 94 24 fc 00 00 00\ne8 8b 34 00 00\n83 7c 24 0c 00\n48 8b 4c 24 30\n0f 85 3b fe ff ff\ne9 fa fd ff ff\n4c 89 74 24 18\n48 8b 5c 24 10\n4a 8d 2c 2b\neb 17\n4c 89 7c 24 20\n31 c0\n48 89 44 24 18\nc7 44 24 0c 00 00 00 00\n4c 89 f5\n4c 8d 74 24 60\n48 89 5c 24 28\n48 89 df\n4c 89 ee\n4c 89 f2\ne8 37 34 00 00\n4c 8d 7c 24 40\n4c 89 f7\n4c 89 fe\ne8 57 2b 00 00\n49 89 ec\n48 89 ef\n48 8b 74 24 20\n48 8d 9c 24 fc 00 00 00\n48 89 da\ne8 0c 34 00 00\n4c 8d 74 24 50\n48 89 df\n4c 89 f6\ne8 2c 2b 00 00\nba 10 00 00 00\n4c 89 ff\n4c 89 f6\ne8 dc b0 ff ff\n41 89 c7\n45 85 ff\n75 3e\n44 8b 7c 24 0c\n45 85 ff\n75 34\n48 8b 44 24 20\n49 39 c5\n48 89 c2\n49 0f 42 d5\n48 8b 7c 24 28\n4c 89 e6\ne8 ae b0 ff ff\n41 89 c7\n45 85 ff\n75 10\n45 31 ff\n4c 3b 6c 24 20\n41 0f 97 c7\n41 83 df 00\n48 8b 7c 24 18\ne8 7c ad ff ff\n44 89 f8\n48 81 c4 48 11 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p565
S'.text:0000000000407300\n.text:0000000000407301\n.text:0000000000407303\n.text:0000000000407305\n.text:0000000000407307\n.text:0000000000407309\n.text:000000000040730a\n.text:0000000000407311\n.text:0000000000407314\n.text:0000000000407317\n.text:000000000040731a\n.text:000000000040731d\n.text:0000000000407325\n.text:000000000040732a\n.text:000000000040732f\n.text:0000000000407334\n.text:0000000000407339\n.text:000000000040733e\n.text:0000000000407343\n.text:0000000000407348\n.text:000000000040734f\n.text:0000000000407355\n.text:000000000040735d\n.text:0000000000407362\n.text:0000000000407366\n.text:000000000040736b\n.text:000000000040736e\n.text:0000000000407372\n.text:0000000000407377\n.text:000000000040737a\n.text:000000000040737f\n.text:0000000000407385\n.text:0000000000407388\n.text:000000000040738d\n.text:0000000000407395\n.text:000000000040739a\n.text:000000000040739d\n.text:000000000040739f\n.text:00000000004073a4\n.text:00000000004073a7\n.text:00000000004073ab\n.text:00000000004073b1\n.text:00000000004073b5\n.text:00000000004073b9\n.text:00000000004073be\n.text:00000000004073c1\n.text:00000000004073c4\n.text:00000000004073c9\n.text:00000000004073ce\n.text:00000000004073d0\n.text:00000000004073d4\n.text:00000000004073d9\n.text:00000000004073e0\n.text:00000000004073e3\n.text:00000000004073e5\n.text:00000000004073e9\n.text:00000000004073ec\n.text:00000000004073ef\n.text:00000000004073f3\n.text:00000000004073f6\n.text:00000000004073fb\n.text:00000000004073fe\n.text:0000000000407403\n.text:0000000000407406\n.text:0000000000407409\n.text:000000000040740f\n.text:0000000000407413\n.text:0000000000407416\n.text:000000000040741e\n.text:0000000000407422\n.text:0000000000407427\n.text:000000000040742c\n.text:0000000000407430\n.text:0000000000407435\n.text:0000000000407438\n.text:000000000040743d\n.text:0000000000407440\n.text:0000000000407442\n.text:0000000000407447\n.text:000000000040744a\n.text:000000000040744d\n.text:0000000000407452\n.text:0000000000407455\n.text:0000000000407458\n.text:000000000040745d\n.text:000000000040745f\n.text:0000000000407470\n.text:0000000000407473\n.text:0000000000407478\n.text:000000000040747a\n.text:000000000040747f\n.text:0000000000407483\n.text:0000000000407486\n.text:0000000000407489\n.text:000000000040748e\n.text:0000000000407492\n.text:0000000000407496\n.text:0000000000407499\n.text:000000000040749e\n.text:00000000004074a1\n.text:00000000004074b0\n.text:00000000004074b2\n.text:00000000004074b7\n.text:00000000004074bb\n.text:00000000004074be\n.text:00000000004074c1\n.text:00000000004074c4\n.text:00000000004074c6\n.text:00000000004074c8\n.text:00000000004074ca\n.text:00000000004074ce\n.text:00000000004074d1\n.text:00000000004074db\n.text:00000000004074de\n.text:00000000004074e2\n.text:00000000004074e5\n.text:00000000004074ea\n.text:00000000004074ed\n.text:00000000004074f2\n.text:00000000004074f5\n.text:00000000004074f8\n.text:00000000004074fa\n.text:00000000004074fd\n.text:0000000000407500\n.text:0000000000407503\n.text:0000000000407508\n.text:000000000040750d\n.text:000000000040750f\n.text:0000000000407512\n.text:0000000000407515\n.text:0000000000407518\n.text:000000000040751d\n.text:0000000000407522\n.text:0000000000407527\n.text:000000000040752a\n.text:000000000040752c\n.text:000000000040752f\n.text:0000000000407534\n.text:0000000000407539\n.text:000000000040753e\n.text:0000000000407540\n.text:0000000000407543\n.text:0000000000407548\n.text:000000000040754d\n.text:0000000000407550\n.text:0000000000407552\n.text:0000000000407557\n.text:0000000000407559\n.text:000000000040755c\n.text:000000000040755f\n.text:0000000000407564\n.text:0000000000407569\n.text:000000000040756c\n.text:000000000040756f\n.text:0000000000407574\n.text:0000000000407579\n.text:000000000040757d\n.text:0000000000407580\n.text:0000000000407585\n.text:0000000000407588\n.text:0000000000407590\n.text:0000000000407595\n.text:000000000040759a\n.text:000000000040759f\n.text:00000000004075a5\n.text:00000000004075aa\n.text:00000000004075af\n.text:00000000004075b4\n.text:00000000004075b8\n.text:00000000004075ba\n.text:00000000004075bf\n.text:00000000004075c1\n.text:00000000004075c6\n.text:00000000004075ce\n.text:00000000004075d1\n.text:00000000004075d6\n.text:00000000004075db\n.text:00000000004075de\n.text:00000000004075e1\n.text:00000000004075e4\n.text:00000000004075e9\n.text:00000000004075ee\n.text:00000000004075f1\n.text:00000000004075f4\n.text:00000000004075f9\n.text:00000000004075fc\n.text:00000000004075ff\n.text:0000000000407604\n.text:000000000040760c\n.text:000000000040760f\n.text:0000000000407614\n.text:0000000000407619\n.text:000000000040761c\n.text:000000000040761f\n.text:0000000000407624\n.text:0000000000407629\n.text:000000000040762c\n.text:000000000040762f\n.text:0000000000407634\n.text:0000000000407637\n.text:000000000040763a\n.text:000000000040763c\n.text:0000000000407641\n.text:0000000000407644\n.text:0000000000407646\n.text:000000000040764b\n.text:000000000040764e\n.text:0000000000407651\n.text:0000000000407655\n.text:000000000040765a\n.text:000000000040765d\n.text:0000000000407662\n.text:0000000000407665\n.text:0000000000407668\n.text:000000000040766a\n.text:000000000040766d\n.text:0000000000407672\n.text:0000000000407676\n.text:000000000040767a\n.text:000000000040767f\n.text:0000000000407684\n.text:0000000000407687\n.text:000000000040768e\n.text:000000000040768f\n.text:0000000000407691\n.text:0000000000407693\n.text:0000000000407695\n.text:0000000000407697\n.text:0000000000407698\n'
p566
tp567
sS'getuid'
p568
(S'\n__stdcall getuid()\n'
p569
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__uid_t getuid(void)\u000a\u000a{\u000a  __uid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getuid_0061a120)();\u000a  return _Var1;\u000a}\u000a\u000a
p570
S'JMP qword ptr [0x0061a120]\n'
p571
S'ff 25 3a 7b 21 00\n'
p572
S'.plt:00000000004025e0\n'
p573
tp574
sS'merge_loop'
p575
(S'\n__stdcall merge_loop(merge_node_queue * queue, size_t total_lines, FILE * tfp, char * temp_output)\n'
p576
V\u000avoid merge_loop(merge_node_queue *queue,size_t total_lines,FILE *tfp,char *temp_output)\u000a\u000a{\u000a  merge_node *node;\u000a  \u000a  while( true ) {\u000a    node = queue_pop(queue);\u000a    if (node->level == 0) break;\u000a    mergelines_node(node,total_lines,tfp,temp_output);\u000a    queue_check_insert(queue,node);\u000a    queue_check_insert_parent(queue,node);\u000a    unlock_node(node);\u000a  }\u000a  unlock_node(node);\u000a  queue_insert(queue,node);\u000a  return;\u000a}\u000a\u000a
p577
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nJMP 0x0040971f\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x004098c0\nMOV RDI,R13\nMOV RSI,RBX\nCALL 0x00409be0\nMOV RDI,R13\nMOV RSI,RBX\nCALL 0x00409c20\nMOV RDI,RBX\nCALL 0x004098b0\nMOV RDI,R13\nCALL 0x00409840\nMOV RBX,RAX\nCMP dword ptr [RBX + 0x50],0x0\nJNZ 0x004096f0\nMOV RDI,RBX\nCALL 0x004098b0\nMOV RDI,R13\nMOV RSI,RBX\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nJMP 0x00409690\n'
p578
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\neb 38\n48 89 df\n4c 89 e6\n4c 89 fa\n4c 89 f1\ne8 bf 01 00 00\n4c 89 ef\n48 89 de\ne8 d4 04 00 00\n4c 89 ef\n48 89 de\ne8 09 05 00 00\n48 89 df\ne8 91 01 00 00\n4c 89 ef\ne8 19 01 00 00\n48 89 c3\n83 7b 50 00\n75 c0\n48 89 df\ne8 78 01 00 00\n4c 89 ef\n48 89 de\n5b\n41 5c\n41 5d\n41 5e\n41 5f\ne9 44 ff ff ff\n'
p579
S'.text:00000000004096d0\n.text:00000000004096d2\n.text:00000000004096d4\n.text:00000000004096d6\n.text:00000000004096d8\n.text:00000000004096d9\n.text:00000000004096dc\n.text:00000000004096df\n.text:00000000004096e2\n.text:00000000004096e5\n.text:00000000004096f0\n.text:00000000004096f3\n.text:00000000004096f6\n.text:00000000004096f9\n.text:00000000004096fc\n.text:0000000000409701\n.text:0000000000409704\n.text:0000000000409707\n.text:000000000040970c\n.text:000000000040970f\n.text:0000000000409712\n.text:0000000000409717\n.text:000000000040971a\n.text:000000000040971f\n.text:0000000000409722\n.text:0000000000409727\n.text:000000000040972a\n.text:000000000040972e\n.text:0000000000409730\n.text:0000000000409733\n.text:0000000000409738\n.text:000000000040973b\n.text:000000000040973e\n.text:000000000040973f\n.text:0000000000409741\n.text:0000000000409743\n.text:0000000000409745\n.text:0000000000409747\n'
p580
tp581
sS'version_etc'
p582
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p583
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p584
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x0040fa92\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x0040f9f0\nADD RSP,0xd8\nRET\n'
p585
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p586
S'.text:000000000040fa50\n.text:000000000040fa57\n.text:000000000040fa59\n.text:000000000040fa5b\n.text:000000000040fa60\n.text:000000000040fa65\n.text:000000000040fa6a\n.text:000000000040fa72\n.text:000000000040fa7a\n.text:000000000040fa82\n.text:000000000040fa8a\n.text:000000000040fa92\n.text:000000000040fa97\n.text:000000000040fa9c\n.text:000000000040faa1\n.text:000000000040faa6\n.text:000000000040faae\n.text:000000000040fab3\n.text:000000000040fabb\n.text:000000000040fac2\n.text:000000000040fac5\n.text:000000000040faca\n.text:000000000040fad1\n'
p587
tp588
sS'pthread_cond_signal'
p589
(S'\n__stdcall pthread_cond_signal(pthread_cond_t * __cond)\n'
p590
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint pthread_cond_signal(pthread_cond_t *__cond)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_pthread_cond_signal_0061a1c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p591
S'JMP qword ptr [0x0061a1c0]\n'
p592
S'ff 25 9a 7a 21 00\n'
p593
S'.plt:0000000000402720\n'
p594
tp595
sS'randread_new'
p596
(S'\n__stdcall randread_new(char * name, size_t bytes_bound)\n'
p597
V\u000arandread_source * randread_new(char *name,size_t bytes_bound)\u000a\u000a{\u000a  FILE *source;\u000a  randread_source *prVar1;\u000a  size_t min_len;\u000a  size_t __n;\u000a  int entropy;\u000a  size_t max_len;\u000a  \u000a  if (bytes_bound != 0) {\u000a    if (name == (char *)0x0) {\u000a      prVar1 = simple_new((FILE *)0x0,(void *)0x0);\u000a      *(undefined8 *)prVar1->buf = 0;\u000a      get_nonce((DRBG_CTX *)(isaac_state *)(prVar1->buf + 8),(uchar **)bytes_bound,entropy,min_len,\u000a                max_len);\u000a      isaac_seed((isaac_state *)(prVar1->buf + 8));\u000a    }\u000a    else {\u000a      source = fopen_safer(name,"rb");\u000a      if (source == (FILE *)0x0) {\u000a        prVar1 = (randread_source *)0x0;\u000a      }\u000a      else {\u000a        prVar1 = simple_new(source,name);\u000a        __n = 0x1000;\u000a        if (bytes_bound < 0x1000) {\u000a          __n = bytes_bound;\u000a        }\u000a        setvbuf((FILE *)source,(char *)prVar1->buf,0,__n);\u000a      }\u000a    }\u000a    return prVar1;\u000a  }\u000a  prVar1 = simple_new((FILE *)0x0,(void *)0x0);\u000a  return prVar1;\u000a}\u000a\u000a
p598
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV RBX,RDI\nTEST R15,R15\nJZ 0x0040e31b\nTEST RBX,RBX\nJZ 0x0040e32c\nMOV ESI,0x414a93\nMOV RDI,RBX\nCALL 0x0040b060\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0040e35d\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x0040e370\nMOV R14,RAX\nLEA RSI,[R14 + 0x18]\nCMP R15,0x1000\nMOV ECX,0x1000\nCMOVC RCX,R15\nXOR EDX,EDX\nMOV RDI,R12\nCALL 0x00402930\nJMP 0x0040e360\nXOR EDI,EDI\nXOR ESI,ESI\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x0040e370\nXOR EDI,EDI\nMOV RSI,RBX\nCALL 0x0040e370\nMOV R14,RAX\nMOV qword ptr [R14 + 0x18],0x0\nMOV RBX,R14\nADD RBX,0x20\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x0040e3a0\nMOV RDI,RBX\nCALL 0x0040eb40\nJMP 0x0040e360\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p599
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n48 89 fb\n4d 85 ff\n74 48\n48 85 db\n74 54\nbe 93 4a 41 00\n48 89 df\ne8 7b cd ff ff\n49 89 c4\n4d 85 e4\n74 70\n4c 89 e7\n48 89 de\ne8 78 00 00 00\n49 89 c6\n49 8d 76 18\n49 81 ff 00 10 00 00\nb9 00 10 00 00\n49 0f 42 cf\n31 d2\n4c 89 e7\ne8 17 46 ff ff\neb 45\n31 ff\n31 f6\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\neb 44\n31 ff\n48 89 de\ne8 3a 00 00 00\n49 89 c6\n49 c7 46 18 00 00 00 00\n4c 89 f3\n48 83 c3 20\n48 89 df\n4c 89 fe\ne8 4d 00 00 00\n48 89 df\ne8 e5 07 00 00\neb 03\n45 31 f6\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p600
S'.text:000000000040e2c0\n.text:000000000040e2c2\n.text:000000000040e2c4\n.text:000000000040e2c6\n.text:000000000040e2c7\n.text:000000000040e2c8\n.text:000000000040e2cb\n.text:000000000040e2ce\n.text:000000000040e2d1\n.text:000000000040e2d3\n.text:000000000040e2d6\n.text:000000000040e2d8\n.text:000000000040e2dd\n.text:000000000040e2e0\n.text:000000000040e2e5\n.text:000000000040e2e8\n.text:000000000040e2eb\n.text:000000000040e2ed\n.text:000000000040e2f0\n.text:000000000040e2f3\n.text:000000000040e2f8\n.text:000000000040e2fb\n.text:000000000040e2ff\n.text:000000000040e306\n.text:000000000040e30b\n.text:000000000040e30f\n.text:000000000040e311\n.text:000000000040e314\n.text:000000000040e319\n.text:000000000040e31b\n.text:000000000040e31d\n.text:000000000040e31f\n.text:000000000040e323\n.text:000000000040e324\n.text:000000000040e326\n.text:000000000040e328\n.text:000000000040e32a\n.text:000000000040e32c\n.text:000000000040e32e\n.text:000000000040e331\n.text:000000000040e336\n.text:000000000040e339\n.text:000000000040e341\n.text:000000000040e344\n.text:000000000040e348\n.text:000000000040e34b\n.text:000000000040e34e\n.text:000000000040e353\n.text:000000000040e356\n.text:000000000040e35b\n.text:000000000040e35d\n.text:000000000040e360\n.text:000000000040e363\n.text:000000000040e367\n.text:000000000040e368\n.text:000000000040e36a\n.text:000000000040e36c\n.text:000000000040e36e\n'
p601
tp602
sS'mkstemp'
p603
(S'\n__stdcall mkstemp(char * __template)\n'
p604
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mkstemp(char *__template)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mkstemp_0061a290)();\u000a  return iVar1;\u000a}\u000a\u000a
p605
S'JMP qword ptr [0x0061a290]\n'
p606
S'ff 25 ca 79 21 00\n'
p607
S'.plt:00000000004028c0\n'
p608
tp609
sS'numcompare'
p610
(S'\n__stdcall numcompare(char * a, char * b)\n'
p611
V\u000aint numcompare(char *a,char *b)\u000a\u000a{\u000a  byte bVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  ulong uVar4;\u000a  uint in_ECX;\u000a  int iVar5;\u000a  uint in_EDX;\u000a  ulong uVar6;\u000a  uint uVar7;\u000a  uint uVar8;\u000a  byte bVar9;\u000a  uint uVar10;\u000a  byte *pbVar11;\u000a  byte *b_00;\u000a  bool bVar12;\u000a  \u000a  bVar9 = *a;\u000a  bVar1 = *b;\u000a  uVar8 = (uint)bVar1;\u000a  if (bVar9 == 0x2d) {\u000a    pbVar11 = (byte *)(a + 1);\u000a    do {\u000a      do {\u000a        b_00 = pbVar11;\u000a        bVar9 = *b_00;\u000a        uVar10 = (uint)bVar9;\u000a        pbVar11 = b_00 + 1;\u000a      } while (bVar9 == 0x30);\u000a    } while ((uint)bVar9 == in_ECX);\u000a    uVar2 = (uint)bVar9;\u000a    if (bVar1 != 0x2d) {\u000a      if (uVar2 == in_EDX) {\u000a        do {\u000a          bVar9 = *pbVar11;\u000a          pbVar11 = pbVar11 + 1;\u000a        } while (bVar9 == 0x30);\u000a      }\u000a      if ((uint)bVar9 - 0x30 < 10) {\u000a        return -1;\u000a      }\u000a      while ((bVar1 == 0x30 || (uVar8 == in_ECX))) {\u000a        bVar1 = ((byte *)b)[1];\u000a        b = (char *)((byte *)b + 1);\u000a        uVar8 = (uint)bVar1;\u000a      }\u000a      if (uVar8 == in_EDX) {\u000a        do {\u000a          b = (char *)((byte *)b + 1);\u000a          bVar1 = *b;\u000a        } while (bVar1 == 0x30);\u000a      }\u000a      return -(uint)((uint)bVar1 - 0x30 < 10);\u000a    }\u000a    do {\u000a      do {\u000a        bVar1 = b[1];\u000a        b = b + 1;\u000a      } while (bVar1 == 0x30);\u000a    } while ((uint)bVar1 == in_ECX);\u000a    uVar7 = (uint)bVar9 - 0x30;\u000a    bVar12 = uVar7 < 10;\u000a    uVar8 = uVar2;\u000a    if (bVar1 == bVar9) {\u000a      do {\u000a        uVar2 = uVar8;\u000a        if (9 < uVar7) break;\u000a        do {\u000a          bVar9 = b_00[1];\u000a          uVar10 = (uint)bVar9;\u000a          b_00 = b_00 + 1;\u000a          uVar2 = (uint)bVar9;\u000a        } while ((uint)bVar9 == in_ECX);\u000a        do {\u000a          bVar1 = b[1];\u000a          b = b + 1;\u000a        } while ((uint)bVar1 == in_ECX);\u000a        uVar7 = (uint)bVar9 - 0x30;\u000a        bVar12 = uVar7 < 10;\u000a        uVar8 = (uint)bVar9;\u000a      } while (bVar1 == bVar9);\u000a    }\u000a    uVar8 = (uint)bVar1 - 0x30;\u000a    if ((!(bool)((uint)bVar1 != in_EDX | bVar12)) || (uVar2 == in_EDX && 9 < uVar8)) {\u000aLAB_0040f53e:\u000a      iVar3 = fraccompare(b,(char *)b_00);\u000a      return iVar3;\u000a    }\u000a    uVar6 = 0;\u000a    while (uVar10 - 0x30 < 10) {\u000a      do {\u000a        pbVar11 = b_00 + 1;\u000a        b_00 = b_00 + 1;\u000a        uVar10 = (uint)*pbVar11;\u000a      } while (uVar10 == in_ECX);\u000a      uVar6 = uVar6 + 1;\u000a    }\u000a    uVar4 = 0;\u000a    while (uVar8 < 10) {\u000a      do {\u000a        b_00 = (byte *)(b + 1);\u000a        b = b + 1;\u000a      } while ((uint)*b_00 == in_ECX);\u000a      uVar4 = uVar4 + 1;\u000a      uVar8 = (uint)*b_00 - 0x30;\u000a    }\u000a    bVar12 = uVar6 < uVar4;\u000a    if (uVar6 == uVar4) {\u000a      if (uVar6 == 0) {\u000a        return 0;\u000a      }\u000a      return (uint)bVar1 - uVar2;\u000a    }\u000a    iVar5 = 1;\u000a    iVar3 = -1;\u000a  }\u000a  else {\u000a    if (bVar1 == 0x2d) {\u000a      b_00 = (byte *)(b + 1);\u000a      do {\u000a        do {\u000a          bVar1 = *b_00;\u000a          b_00 = b_00 + 1;\u000a        } while (bVar1 == 0x30);\u000a      } while ((uint)bVar1 == in_ECX);\u000a      if ((uint)bVar1 == in_EDX) {\u000a        do {\u000a          bVar1 = *b_00;\u000a          b_00 = b_00 + 1;\u000a        } while (bVar1 == 0x30);\u000a      }\u000a      if ((uint)bVar1 - 0x30 < 10) {\u000a        return 1;\u000a      }\u000a      if (bVar9 != 0x30) goto LAB_0040f3e9;\u000a      do {\u000a        do {\u000a          bVar9 = ((byte *)a)[1];\u000a          a = (char *)((byte *)a + 1);\u000a        } while (bVar9 == 0x30);\u000aLAB_0040f3e9:\u000a        uVar8 = (uint)bVar9;\u000a      } while (uVar8 == in_ECX);\u000a      if (uVar8 == in_EDX) {\u000a        do {\u000a          a = (char *)((byte *)a + 1);\u000a          uVar8 = (uint)(byte)*a;\u000a        } while (*a == 0x30);\u000a      }\u000a      return -(uint)(uVar8 - 0x30 < 10) & 1;\u000a    }\u000a    if (bVar9 != 0x30) goto LAB_0040f430;\u000a    do {\u000a      do {\u000a        bVar9 = a[1];\u000a        a = a + 1;\u000a      } while (bVar9 == 0x30);\u000aLAB_0040f430:\u000a      b_00 = (byte *)b;\u000a    } while ((uint)bVar9 == in_ECX);\u000a    while ((bVar1 == 0x30 || (b = a, uVar8 == in_ECX))) {\u000a      bVar1 = b_00[1];\u000a      uVar8 = (uint)bVar1;\u000a      b_00 = b_00 + 1;\u000a    }\u000a    while( true ) {\u000a      if ((bVar9 != bVar1) || (9 < (uint)bVar9 - 0x30)) break;\u000a      do {\u000a        bVar9 = b[1];\u000a        b = b + 1;\u000a      } while ((uint)bVar9 == in_ECX);\u000a      do {\u000a        bVar1 = b_00[1];\u000a        b_00 = b_00 + 1;\u000a      } while ((uint)bVar1 == in_ECX);\u000a    }\u000a    uVar10 = (uint)bVar9;\u000a    uVar8 = (uint)bVar1 - 0x30;\u000a    if (((uint)bVar1 == in_EDX && 9 < (uint)bVar9 - 0x30) || (uVar10 == in_EDX && 9 < uVar8))\u000a    goto LAB_0040f53e;\u000a    uVar6 = 0;\u000a    uVar2 = uVar10;\u000a    while (uVar2 - 0x30 < 10) {\u000a      do {\u000a        pbVar11 = (byte *)(b + 1);\u000a        b = b + 1;\u000a        uVar2 = (uint)*pbVar11;\u000a      } while (uVar2 == in_ECX);\u000a      uVar6 = uVar6 + 1;\u000a    }\u000a    uVar4 = 0;\u000a    while (uVar8 < 10) {\u000a      do {\u000a        pbVar11 = b_00 + 1;\u000a        b_00 = b_00 + 1;\u000a      } while ((uint)*pbVar11 == in_ECX);\u000a      uVar4 = uVar4 + 1;\u000a      uVar8 = (uint)*pbVar11 - 0x30;\u000a    }\u000a    bVar12 = uVar6 < uVar4;\u000a    if (uVar6 == uVar4) {\u000a      if (uVar6 == 0) {\u000a        return 0;\u000a      }\u000a      return uVar10 - (uint)bVar1;\u000a    }\u000a    iVar5 = -1;\u000a    iVar3 = 1;\u000a  }\u000a  if (bVar12) {\u000a    iVar3 = iVar5;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p612
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R8,RDI\nMOVZX R9D,byte ptr [R8]\nCMP R9D,0x2d\nMOV R10B,byte ptr [RSI]\nMOVZX R11D,R10B\nJNZ 0x0040f259\nINC R8\nNOP\nMOVZX EDI,byte ptr [R8]\nINC R8\nCMP EDI,0x30\nJZ 0x0040f1d0\nCMP EDI,ECX\nJZ 0x0040f1d0\nCMP R10B,0x2d\nJNZ 0x0040f2bc\nDEC R8\nNOP dword ptr [RAX]\nMOVZX EAX,byte ptr [RSI + 0x1]\nINC RSI\nCMP EAX,0x30\nJZ 0x0040f1f0\nCMP EAX,ECX\nJZ 0x0040f1f0\nLEA EBP,[RDI + -0x30]\nCMP EBP,0xa\nSETC R11B\nCMP AL,DIL\nJNZ 0x0040f33c\nCMP EBP,0x9\nJA 0x0040f33c\nNOP dword ptr [RAX]\nMOV DIL,byte ptr [R8 + 0x1]\nINC R8\nMOVZX R10D,DIL\nCMP R10D,ECX\nJZ 0x0040f220\nMOVZX EAX,byte ptr [RSI + 0x1]\nINC RSI\nCMP EAX,ECX\nJZ 0x0040f230\nLEA EBP,[R10 + -0x30]\nCMP EBP,0xa\nSETC R11B\nCMP AL,R10B\nJNZ 0x0040f33f\nCMP EBP,0x9\nJBE 0x0040f220\nJMP 0x0040f33f\nCMP R10B,0x2d\nJNZ 0x0040f32d\nINC RSI\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RSI]\nINC RSI\nCMP EAX,0x30\nJZ 0x0040f270\nCMP EAX,ECX\nJZ 0x0040f270\nCMP EAX,EDX\nJNZ 0x0040f299\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV AL,byte ptr [RSI]\nINC RSI\nCMP AL,0x30\nJZ 0x0040f290\nMOVZX ESI,AL\nADD ESI,-0x30\nMOV EAX,0x1\nCMP ESI,0xa\nJC 0x0040f551\nCMP R9B,0x30\nJNZ 0x0040f3e9\nJMP 0x0040f3ee\nCMP EDI,EDX\nJNZ 0x0040f2cc\nMOV DIL,byte ptr [R8]\nINC R8\nCMP DIL,0x30\nJZ 0x0040f2c0\nMOVZX EDI,DIL\nADD EDI,-0x30\nMOV EAX,0xffffffff\nCMP EDI,0xa\nJC 0x0040f551\nCMP R10B,0x30\nJZ 0x0040f2f0\nCMP R11D,ECX\nJNZ 0x0040f306\nNOP dword ptr [RAX]\nMOVZX R11D,byte ptr [RSI + 0x1]\nINC RSI\nCMP R11D,0x30\nJZ 0x0040f2f0\nCMP R11D,ECX\nJZ 0x0040f2f0\nMOV R10B,R11B\nCMP R11D,EDX\nJNZ 0x0040f31c\nINC RSI\nNOP\nMOV R10B,byte ptr [RSI]\nINC RSI\nCMP R10B,0x30\nJZ 0x0040f310\nMOVZX EAX,R10B\nADD EAX,-0x30\nCMP EAX,0xa\nSBB EAX,EAX\nJMP 0x0040f551\nCMP R9B,0x30\nJNZ 0x0040f430\nJMP 0x0040f435\nMOV R10D,EDI\nMOVZX R9D,AL\nCMP R10D,EDX\nSETNZ BL\nLEA EBP,[R9 + -0x30]\nCMP EBP,0xa\nSETC R14B\nCMP R9D,EDX\nSETNZ AL\nOR AL,R11B\nCMP AL,0x1\nJNZ 0x0040f3cc\nOR BL,R14B\nJZ 0x0040f3cc\nMOVZX EAX,DIL\nADD EAX,-0x30\nXOR EDX,EDX\nCMP EAX,0x9\nJA 0x0040f397\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX EDI,byte ptr [R8 + 0x1]\nINC R8\nCMP EDI,ECX\nJZ 0x0040f380\nINC RDX\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x0040f380\nXOR EAX,EAX\nCMP EBP,0x9\nJA 0x0040f3b6\nNOP\nMOVZX EDI,byte ptr [RSI + 0x1]\nINC RSI\nCMP EDI,ECX\nJZ 0x0040f3a0\nINC RAX\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x0040f3a0\nCMP RDX,RAX\nJNZ 0x0040f3da\nSUB R9D,R10D\nXOR EAX,EAX\nTEST RDX,RDX\nCMOVNZ EAX,R9D\nJMP 0x0040f551\nMOVSX EDX,DL\nMOV RDI,RSI\nMOV RSI,R8\nJMP 0x0040f53e\nMOV ECX,0x1\nMOV EAX,0xffffffff\nJMP 0x0040f54e\nCMP R9D,ECX\nJNZ 0x0040f3fe\nMOVZX R9D,byte ptr [R8 + 0x1]\nINC R8\nCMP R9D,0x30\nJNZ 0x0040f3e9\nJMP 0x0040f3ee\nCMP R9D,EDX\nJNZ 0x0040f41c\nINC R8\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV R9B,byte ptr [R8]\nINC R8\nCMP R9B,0x30\nJZ 0x0040f410\nMOVZX EAX,R9B\nADD EAX,-0x30\nCMP EAX,0xa\nSBB EAX,EAX\nAND EAX,0x1\nJMP 0x0040f551\nCMP R9D,ECX\nJNZ 0x0040f445\nMOVZX R9D,byte ptr [R8 + 0x1]\nINC R8\nCMP R9D,0x30\nJNZ 0x0040f430\nJMP 0x0040f435\nCMP R10B,0x30\nJZ 0x0040f450\nCMP R11D,ECX\nJNZ 0x0040f463\nMOVZX R10D,byte ptr [RSI + 0x1]\nINC RSI\nCMP R10D,0x30\nJZ 0x0040f450\nCMP R10D,ECX\nJZ 0x0040f450\nMOVZX EDI,R9B\nJMP 0x0040f49d\nCMP EBP,0x9\nJA 0x0040f4ab\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R9B,byte ptr [R8 + 0x1]\nINC R8\nMOVZX EDI,R9B\nCMP EDI,ECX\nJZ 0x0040f480\nNOP\nMOVZX R10D,byte ptr [RSI + 0x1]\nINC RSI\nCMP R10D,ECX\nJZ 0x0040f490\nLEA EBP,[RDI + -0x30]\nCMP EBP,0xa\nSETC AL\nCMP DIL,R10B\nJZ 0x0040f470\nMOVZX R10D,R10B\nCMP EDI,EDX\nSETNZ R14B\nLEA R11D,[R10 + -0x30]\nCMP R11D,0xa\nSETC BPL\nCMP R10D,EDX\nSETNZ BL\nOR BL,AL\nCMP BL,0x1\nJNZ 0x0040f538\nOR R14B,BPL\nJZ 0x0040f538\nMOVZX EAX,R9B\nADD EAX,-0x30\nXOR EDX,EDX\nCMP EAX,0x9\nJA 0x0040f507\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [R8 + 0x1]\nINC R8\nCMP EAX,ECX\nJZ 0x0040f4f0\nINC RDX\nADD EAX,-0x30\nCMP EAX,0xa\nJC 0x0040f4f0\nXOR EAX,EAX\nCMP R11D,0x9\nJA 0x0040f526\nNOP\nMOVZX EBX,byte ptr [RSI + 0x1]\nINC RSI\nCMP EBX,ECX\nJZ 0x0040f510\nINC RAX\nADD EBX,-0x30\nCMP EBX,0xa\nJC 0x0040f510\nCMP RDX,RAX\nJNZ 0x0040f544\nSUB EDI,R10D\nXOR EAX,EAX\nTEST RDX,RDX\nCMOVNZ EAX,EDI\nJMP 0x0040f551\nMOVSX EDX,DL\nMOV RDI,R8\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x0040f560\nMOV ECX,0xffffffff\nMOV EAX,0x1\nCMOVC EAX,ECX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p613
S'55\n41 56\n53\n49 89 f8\n45 0f b6 08\n41 83 f9 2d\n44 8a 16\n45 0f b6 da\n0f 85 8d 00 00 00\n49 ff c0\n90\n41 0f b6 38\n49 ff c0\n83 ff 30\n74 f4\n39 cf\n74 f0\n41 80 fa 2d\n0f 85 d2 00 00 00\n49 ff c8\n0f 1f 00\n0f b6 46 01\n48 ff c6\n83 f8 30\n74 f4\n39 c8\n74 f0\n8d 6f d0\n83 fd 0a\n41 0f 92 c3\n40 38 f8\n0f 85 29 01 00 00\n83 fd 09\n0f 87 20 01 00 00\n0f 1f 40 00\n41 8a 78 01\n49 ff c0\n44 0f b6 d7\n41 39 ca\n74 f0\n0f b6 46 01\n48 ff c6\n39 c8\n74 f5\n41 8d 6a d0\n83 fd 0a\n41 0f 92 c3\n44 38 d0\n0f 85 f0 00 00 00\n83 fd 09\n76 cc\ne9 e6 00 00 00\n41 80 fa 2d\n0f 85 ca 00 00 00\n48 ff c6\n66 2e 0f 1f 84 00 00 00 00 00\n0f b6 06\n48 ff c6\n83 f8 30\n74 f5\n39 c8\n74 f1\n39 d0\n75 16\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n8a 06\n48 ff c6\n3c 30\n74 f7\n0f b6 f0\n83 c6 d0\nb8 01 00 00 00\n83 fe 0a\n0f 82 a4 02 00 00\n41 80 f9 30\n0f 85 32 01 00 00\ne9 32 01 00 00\n39 d7\n75 0c\n41 8a 38\n49 ff c0\n40 80 ff 30\n74 f4\n40 0f b6 ff\n83 c7 d0\nb8 ff ff ff ff\n83 ff 0a\n0f 82 70 02 00 00\n41 80 fa 30\n74 09\n41 39 cb\n75 1a\n0f 1f 40 00\n44 0f b6 5e 01\n48 ff c6\n41 83 fb 30\n74 f2\n41 39 cb\n74 ed\n45 88 da\n41 39 d3\n75 11\n48 ff c6\n66 90\n44 8a 16\n48 ff c6\n41 80 fa 30\n74 f4\n41 0f b6 c2\n83 c0 d0\n83 f8 0a\n19 c0\ne9 24 02 00 00\n41 80 f9 30\n0f 85 f9 00 00 00\ne9 f9 00 00 00\n41 89 fa\n44 0f b6 c8\n41 39 d2\n0f 95 c3\n41 8d 69 d0\n83 fd 0a\n41 0f 92 c6\n41 39 d1\n0f 95 c0\n44 08 d8\n3c 01\n75 6b\n44 08 f3\n74 66\n40 0f b6 c7\n83 c0 d0\n31 d2\n83 f8 09\n77 23\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 0f b6 78 01\n49 ff c0\n39 cf\n74 f4\n48 ff c2\n83 c7 d0\n83 ff 0a\n72 e9\n31 c0\n83 fd 09\n77 18\n66 90\n0f b6 7e 01\n48 ff c6\n39 cf\n74 f5\n48 ff c0\n83 c7 d0\n83 ff 0a\n72 ea\n48 39 c2\n75 1f\n45 29 d1\n31 c0\n48 85 d2\n41 0f 45 c1\ne9 85 01 00 00\n0f be d2\n48 89 f7\n4c 89 c6\ne9 64 01 00 00\nb9 01 00 00 00\nb8 ff ff ff ff\ne9 65 01 00 00\n41 39 c9\n75 10\n45 0f b6 48 01\n49 ff c0\n41 83 f9 30\n75 ed\neb f0\n41 39 d1\n75 19\n49 ff c0\n66 2e 0f 1f 84 00 00 00 00 00\n45 8a 08\n49 ff c0\n41 80 f9 30\n74 f4\n41 0f b6 c1\n83 c0 d0\n83 f8 0a\n19 c0\n83 e0 01\ne9 21 01 00 00\n41 39 c9\n75 10\n45 0f b6 48 01\n49 ff c0\n41 83 f9 30\n75 ed\neb f0\n41 80 fa 30\n74 05\n41 39 cb\n75 13\n44 0f b6 56 01\n48 ff c6\n41 83 fa 30\n74 f2\n41 39 ca\n74 ed\n41 0f b6 f9\neb 34\n83 fd 09\n77 36\n66 66 2e 0f 1f 84 00 00 00 00 00\n45 8a 48 01\n49 ff c0\n41 0f b6 f9\n39 cf\n74 f1\n90\n44 0f b6 56 01\n48 ff c6\n41 39 ca\n74 f3\n8d 6f d0\n83 fd 0a\n0f 92 c0\n44 38 d7\n74 c5\n45 0f b6 d2\n39 d7\n41 0f 95 c6\n45 8d 5a d0\n41 83 fb 0a\n40 0f 92 c5\n41 39 d2\n0f 95 c3\n08 c3\n80 fb 01\n75 6a\n41 08 ee\n74 65\n41 0f b6 c1\n83 c0 d0\n31 d2\n83 f8 09\n77 26\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 0f b6 40 01\n49 ff c0\n39 c8\n74 f4\n48 ff c2\n83 c0 d0\n83 f8 0a\n72 e9\n31 c0\n41 83 fb 09\n77 17\n90\n0f b6 5e 01\n48 ff c6\n39 cb\n74 f5\n48 ff c0\n83 c3 d0\n83 fb 0a\n72 ea\n48 39 c2\n75 19\n44 29 d7\n31 c0\n48 85 d2\n0f 45 c7\neb 19\n0f be d2\n4c 89 c7\n5b\n41 5e\n5d\neb 1c\nb9 ff ff ff ff\nb8 01 00 00 00\n0f 42 c1\n5b\n41 5e\n5d\nc3\n'
p614
S'.text:000000000040f1b0\n.text:000000000040f1b1\n.text:000000000040f1b3\n.text:000000000040f1b4\n.text:000000000040f1b7\n.text:000000000040f1bb\n.text:000000000040f1bf\n.text:000000000040f1c2\n.text:000000000040f1c6\n.text:000000000040f1cc\n.text:000000000040f1cf\n.text:000000000040f1d0\n.text:000000000040f1d4\n.text:000000000040f1d7\n.text:000000000040f1da\n.text:000000000040f1dc\n.text:000000000040f1de\n.text:000000000040f1e0\n.text:000000000040f1e4\n.text:000000000040f1ea\n.text:000000000040f1ed\n.text:000000000040f1f0\n.text:000000000040f1f4\n.text:000000000040f1f7\n.text:000000000040f1fa\n.text:000000000040f1fc\n.text:000000000040f1fe\n.text:000000000040f200\n.text:000000000040f203\n.text:000000000040f206\n.text:000000000040f20a\n.text:000000000040f20d\n.text:000000000040f213\n.text:000000000040f216\n.text:000000000040f21c\n.text:000000000040f220\n.text:000000000040f224\n.text:000000000040f227\n.text:000000000040f22b\n.text:000000000040f22e\n.text:000000000040f230\n.text:000000000040f234\n.text:000000000040f237\n.text:000000000040f239\n.text:000000000040f23b\n.text:000000000040f23f\n.text:000000000040f242\n.text:000000000040f246\n.text:000000000040f249\n.text:000000000040f24f\n.text:000000000040f252\n.text:000000000040f254\n.text:000000000040f259\n.text:000000000040f25d\n.text:000000000040f263\n.text:000000000040f266\n.text:000000000040f270\n.text:000000000040f273\n.text:000000000040f276\n.text:000000000040f279\n.text:000000000040f27b\n.text:000000000040f27d\n.text:000000000040f27f\n.text:000000000040f281\n.text:000000000040f283\n.text:000000000040f290\n.text:000000000040f292\n.text:000000000040f295\n.text:000000000040f297\n.text:000000000040f299\n.text:000000000040f29c\n.text:000000000040f29f\n.text:000000000040f2a4\n.text:000000000040f2a7\n.text:000000000040f2ad\n.text:000000000040f2b1\n.text:000000000040f2b7\n.text:000000000040f2bc\n.text:000000000040f2be\n.text:000000000040f2c0\n.text:000000000040f2c3\n.text:000000000040f2c6\n.text:000000000040f2ca\n.text:000000000040f2cc\n.text:000000000040f2d0\n.text:000000000040f2d3\n.text:000000000040f2d8\n.text:000000000040f2db\n.text:000000000040f2e1\n.text:000000000040f2e5\n.text:000000000040f2e7\n.text:000000000040f2ea\n.text:000000000040f2ec\n.text:000000000040f2f0\n.text:000000000040f2f5\n.text:000000000040f2f8\n.text:000000000040f2fc\n.text:000000000040f2fe\n.text:000000000040f301\n.text:000000000040f303\n.text:000000000040f306\n.text:000000000040f309\n.text:000000000040f30b\n.text:000000000040f30e\n.text:000000000040f310\n.text:000000000040f313\n.text:000000000040f316\n.text:000000000040f31a\n.text:000000000040f31c\n.text:000000000040f320\n.text:000000000040f323\n.text:000000000040f326\n.text:000000000040f328\n.text:000000000040f32d\n.text:000000000040f331\n.text:000000000040f337\n.text:000000000040f33c\n.text:000000000040f33f\n.text:000000000040f343\n.text:000000000040f346\n.text:000000000040f349\n.text:000000000040f34d\n.text:000000000040f350\n.text:000000000040f354\n.text:000000000040f357\n.text:000000000040f35a\n.text:000000000040f35d\n.text:000000000040f35f\n.text:000000000040f361\n.text:000000000040f364\n.text:000000000040f366\n.text:000000000040f36a\n.text:000000000040f36d\n.text:000000000040f36f\n.text:000000000040f372\n.text:000000000040f374\n.text:000000000040f380\n.text:000000000040f385\n.text:000000000040f388\n.text:000000000040f38a\n.text:000000000040f38c\n.text:000000000040f38f\n.text:000000000040f392\n.text:000000000040f395\n.text:000000000040f397\n.text:000000000040f399\n.text:000000000040f39c\n.text:000000000040f39e\n.text:000000000040f3a0\n.text:000000000040f3a4\n.text:000000000040f3a7\n.text:000000000040f3a9\n.text:000000000040f3ab\n.text:000000000040f3ae\n.text:000000000040f3b1\n.text:000000000040f3b4\n.text:000000000040f3b6\n.text:000000000040f3b9\n.text:000000000040f3bb\n.text:000000000040f3be\n.text:000000000040f3c0\n.text:000000000040f3c3\n.text:000000000040f3c7\n.text:000000000040f3cc\n.text:000000000040f3cf\n.text:000000000040f3d2\n.text:000000000040f3d5\n.text:000000000040f3da\n.text:000000000040f3df\n.text:000000000040f3e4\n.text:000000000040f3e9\n.text:000000000040f3ec\n.text:000000000040f3ee\n.text:000000000040f3f3\n.text:000000000040f3f6\n.text:000000000040f3fa\n.text:000000000040f3fc\n.text:000000000040f3fe\n.text:000000000040f401\n.text:000000000040f403\n.text:000000000040f406\n.text:000000000040f410\n.text:000000000040f413\n.text:000000000040f416\n.text:000000000040f41a\n.text:000000000040f41c\n.text:000000000040f420\n.text:000000000040f423\n.text:000000000040f426\n.text:000000000040f428\n.text:000000000040f42b\n.text:000000000040f430\n.text:000000000040f433\n.text:000000000040f435\n.text:000000000040f43a\n.text:000000000040f43d\n.text:000000000040f441\n.text:000000000040f443\n.text:000000000040f445\n.text:000000000040f449\n.text:000000000040f44b\n.text:000000000040f44e\n.text:000000000040f450\n.text:000000000040f455\n.text:000000000040f458\n.text:000000000040f45c\n.text:000000000040f45e\n.text:000000000040f461\n.text:000000000040f463\n.text:000000000040f467\n.text:000000000040f470\n.text:000000000040f473\n.text:000000000040f475\n.text:000000000040f480\n.text:000000000040f484\n.text:000000000040f487\n.text:000000000040f48b\n.text:000000000040f48d\n.text:000000000040f48f\n.text:000000000040f490\n.text:000000000040f495\n.text:000000000040f498\n.text:000000000040f49b\n.text:000000000040f49d\n.text:000000000040f4a0\n.text:000000000040f4a3\n.text:000000000040f4a6\n.text:000000000040f4a9\n.text:000000000040f4ab\n.text:000000000040f4af\n.text:000000000040f4b1\n.text:000000000040f4b5\n.text:000000000040f4b9\n.text:000000000040f4bd\n.text:000000000040f4c1\n.text:000000000040f4c4\n.text:000000000040f4c7\n.text:000000000040f4c9\n.text:000000000040f4cc\n.text:000000000040f4ce\n.text:000000000040f4d1\n.text:000000000040f4d3\n.text:000000000040f4d7\n.text:000000000040f4da\n.text:000000000040f4dc\n.text:000000000040f4df\n.text:000000000040f4e1\n.text:000000000040f4f0\n.text:000000000040f4f5\n.text:000000000040f4f8\n.text:000000000040f4fa\n.text:000000000040f4fc\n.text:000000000040f4ff\n.text:000000000040f502\n.text:000000000040f505\n.text:000000000040f507\n.text:000000000040f509\n.text:000000000040f50d\n.text:000000000040f50f\n.text:000000000040f510\n.text:000000000040f514\n.text:000000000040f517\n.text:000000000040f519\n.text:000000000040f51b\n.text:000000000040f51e\n.text:000000000040f521\n.text:000000000040f524\n.text:000000000040f526\n.text:000000000040f529\n.text:000000000040f52b\n.text:000000000040f52e\n.text:000000000040f530\n.text:000000000040f533\n.text:000000000040f536\n.text:000000000040f538\n.text:000000000040f53b\n.text:000000000040f53e\n.text:000000000040f53f\n.text:000000000040f541\n.text:000000000040f542\n.text:000000000040f544\n.text:000000000040f549\n.text:000000000040f54e\n.text:000000000040f551\n.text:000000000040f552\n.text:000000000040f554\n.text:000000000040f555\n'
p615
tp616
sS'hash_get_first'
p617
(S'\n__stdcall hash_get_first(Hash_table * table)\n'
p618
V\u000avoid * hash_get_first(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  if (table->n_entries == 0) {\u000a    return (void *)0x0;\u000a  }\u000a  phVar1 = table->bucket;\u000a  if (phVar1 < table->bucket_limit) {\u000a    do {\u000a      if (phVar1->data != (void *)0x0) {\u000a        return phVar1->data;\u000a      }\u000a      phVar1 = phVar1 + 1;\u000a    } while (phVar1 < table->bucket_limit);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p619
S'CMP qword ptr [RDI + 0x20],0x0\nJZ 0x0040b3b3\nMOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJC 0x0040b3aa\nJMP 0x0040b3b6\nADD RCX,0x10\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x0040b3b6\nMOV RAX,qword ptr [RCX]\nTEST RAX,RAX\nJZ 0x0040b3a0\nRET\nXOR EAX,EAX\nRET\nPUSH RAX\nCALL 0x00402420\n'
p620
S'48 83 7f 20 00\n74 2c\n48 8b 0f\n48 3b 4f 08\n72 1a\neb 24\n48 83 c1 10\n48 3b 4f 08\n73 0c\n48 8b 01\n48 85 c0\n74 ee\nc3\n31 c0\nc3\n50\ne8 64 70 ff ff\n'
p621
S'.text:000000000040b380\n.text:000000000040b385\n.text:000000000040b387\n.text:000000000040b38a\n.text:000000000040b38e\n.text:000000000040b390\n.text:000000000040b3a0\n.text:000000000040b3a4\n.text:000000000040b3a8\n.text:000000000040b3aa\n.text:000000000040b3ad\n.text:000000000040b3b0\n.text:000000000040b3b2\n.text:000000000040b3b3\n.text:000000000040b3b5\n.text:000000000040b3b6\n.text:000000000040b3b7\n'
p622
tp623
sS'xstrtol_fatal'
p624
(S'\n__stdcall xstrtol_fatal(option * long_options, char * arg)\n'
p625
V\u000avoid xstrtol_fatal(option *long_options,char *arg)\u000a\u000a{\u000a  xstrtol_error(long_options,arg);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p626
S'PUSH RAX\nMOV R9D,dword ptr [0x0061a4e0]\nCALL 0x00410230\nCALL 0x00402420\n'
p627
S'50\n44 8b 0d c8 a2 20 00\ne8 13 00 00 00\ne8 fe 21 ff ff\n'
p628
S'.text:0000000000410210\n.text:0000000000410211\n.text:0000000000410218\n.text:000000000041021d\n'
p629
tp630
sS'wcwidth'
p631
(S'\n__stdcall wcwidth(wchar_t __c)\n'
p632
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint wcwidth(wchar_t __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_wcwidth_0061a248)();\u000a  return iVar1;\u000a}\u000a\u000a
p633
S'JMP qword ptr [0x0061a248]\n'
p634
S'ff 25 12 7a 21 00\n'
p635
S'.plt:0000000000402830\n'
p636
tp637
sS'quotearg_n_mem'
p638
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p639
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p640
S'MOV ECX,0x61ab80\nJMP 0x0040d9c0\n'
p641
S'b9 80 ab 61 00\ne9 36 fe ff ff\n'
p642
S'.text:000000000040db80\n.text:000000000040db85\n'
p643
tp644
sS'md5_buffer'
p645
(S'\n__stdcall md5_buffer(char * buffer, size_t len, void * resblock)\n'
p646
V\u000avoid * md5_buffer(char *buffer,size_t len,void *resblock)\u000a\u000a{\u000a  void *pvVar1;\u000a  md5_ctx ctx;\u000a  md5_ctx local_c0;\u000a  \u000a  md5_init_ctx(&local_c0);\u000a  md5_process_bytes(buffer,len,&local_c0);\u000a  pvVar1 = md5_finish_ctx(&local_c0,resblock);\u000a  return pvVar1;\u000a}\u000a\u000a
p647
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nLEA R12,[RSP + 0x8]\nMOV RDI,R12\nCALL 0x0040a0c0\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,R12\nCALL 0x0040aa20\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x0040a150\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p648
S'41 57\n41 56\n41 54\n53\n48 81 ec a8 00 00 00\n49 89 d6\n49 89 f7\n48 89 fb\n4c 8d 64 24 08\n4c 89 e7\ne8 dc f4 ff ff\n48 89 df\n4c 89 fe\n4c 89 e2\ne8 2e fe ff ff\n4c 89 e7\n4c 89 f6\ne8 53 f5 ff ff\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p649
S'.text:000000000040abc0\n.text:000000000040abc2\n.text:000000000040abc4\n.text:000000000040abc6\n.text:000000000040abc7\n.text:000000000040abce\n.text:000000000040abd1\n.text:000000000040abd4\n.text:000000000040abd7\n.text:000000000040abdc\n.text:000000000040abdf\n.text:000000000040abe4\n.text:000000000040abe7\n.text:000000000040abea\n.text:000000000040abed\n.text:000000000040abf2\n.text:000000000040abf5\n.text:000000000040abf8\n.text:000000000040abfd\n.text:000000000040ac04\n.text:000000000040ac05\n.text:000000000040ac07\n.text:000000000040ac09\n.text:000000000040ac0b\n'
p650
tp651
sS'emit_ancillary_info'
p652
(S'\n__stdcall emit_ancillary_info()\n'
p653
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00412450;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("sort",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "sort";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,0x413577,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",0x413577);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x414bf9;\u000a  if (__s2 == "sort") {\u000a    uVar3 = 0x4138f5;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p654
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x412450\nMOV ESI,0x4138d9\nNOP\nMOV EDI,0x413577\nCALL 0x00402770\nTEST EAX,EAX\nJZ 0x00402fdb\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00402fc0\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x413577\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x413938\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x413689\nMOV ECX,0x41394f\nXOR EAX,EAX\nCALL 0x00402920\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00402910\nTEST RAX,RAX\nJZ 0x00403064\nMOV ESI,0x413976\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00402450\nTEST EAX,EAX\nJZ 0x00403064\nXOR EDI,EDI\nMOV ESI,0x41397a\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x413577\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00402920\nXOR EDI,EDI\nMOV ESI,0x4139bf\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,RAX\nMOV R14D,0x413577\nMOV EDI,0x1\nMOV EDX,0x41394f\nMOV ECX,0x413577\nXOR EAX,EAX\nCALL 0x00402920\nXOR EDI,EDI\nMOV ESI,0x4139de\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x4138f5\nMOV ECX,0x414bf9\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00402920\n'
p655
S'41 56\n53\n50\nbb 50 24 41 00\nbe d9 38 41 00\n66 90\nbf 77 35 41 00\ne8 a6 f7 ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 77 35 41 00\n48 0f 45 d8\n31 ff\nbe 38 39 41 00\nba 05 00 00 00\ne8 b4 f5 ff ff\n48 89 c6\nbf 01 00 00 00\nba 89 36 41 00\nb9 4f 39 41 00\n31 c0\ne8 0b f9 ff ff\nbf 05 00 00 00\n31 f6\ne8 ef f8 ff ff\n48 85 c0\n74 3e\nbe 76 39 41 00\nba 03 00 00 00\n48 89 c7\ne8 18 f4 ff ff\n85 c0\n74 28\n31 ff\nbe 7a 39 41 00\nba 05 00 00 00\ne8 63 f5 ff ff\n48 89 c1\nbf 01 00 00 00\nba 77 35 41 00\n31 c0\n48 89 ce\ne8 bc f8 ff ff\n31 ff\nbe bf 39 41 00\nba 05 00 00 00\ne8 3b f5 ff ff\n48 89 c6\n41 be 77 35 41 00\nbf 01 00 00 00\nba 4f 39 41 00\nb9 77 35 41 00\n31 c0\ne8 8c f8 ff ff\n31 ff\nbe de 39 41 00\nba 05 00 00 00\ne8 0b f5 ff ff\n48 89 c2\n4c 39 f3\nb8 f5 38 41 00\nb9 f9 4b 41 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 4e f8 ff ff\n'
p656
S'.text:0000000000402fb0\n.text:0000000000402fb2\n.text:0000000000402fb3\n.text:0000000000402fb4\n.text:0000000000402fb9\n.text:0000000000402fbe\n.text:0000000000402fc0\n.text:0000000000402fc5\n.text:0000000000402fca\n.text:0000000000402fcc\n.text:0000000000402fce\n.text:0000000000402fd2\n.text:0000000000402fd6\n.text:0000000000402fd9\n.text:0000000000402fdb\n.text:0000000000402fdf\n.text:0000000000402fe2\n.text:0000000000402fe7\n.text:0000000000402feb\n.text:0000000000402fed\n.text:0000000000402ff2\n.text:0000000000402ff7\n.text:0000000000402ffc\n.text:0000000000402fff\n.text:0000000000403004\n.text:0000000000403009\n.text:000000000040300e\n.text:0000000000403010\n.text:0000000000403015\n.text:000000000040301a\n.text:000000000040301c\n.text:0000000000403021\n.text:0000000000403024\n.text:0000000000403026\n.text:000000000040302b\n.text:0000000000403030\n.text:0000000000403033\n.text:0000000000403038\n.text:000000000040303a\n.text:000000000040303c\n.text:000000000040303e\n.text:0000000000403043\n.text:0000000000403048\n.text:000000000040304d\n.text:0000000000403050\n.text:0000000000403055\n.text:000000000040305a\n.text:000000000040305c\n.text:000000000040305f\n.text:0000000000403064\n.text:0000000000403066\n.text:000000000040306b\n.text:0000000000403070\n.text:0000000000403075\n.text:0000000000403078\n.text:000000000040307e\n.text:0000000000403083\n.text:0000000000403088\n.text:000000000040308d\n.text:000000000040308f\n.text:0000000000403094\n.text:0000000000403096\n.text:000000000040309b\n.text:00000000004030a0\n.text:00000000004030a5\n.text:00000000004030a8\n.text:00000000004030ab\n.text:00000000004030b0\n.text:00000000004030b5\n.text:00000000004030b9\n.text:00000000004030be\n.text:00000000004030c0\n.text:00000000004030c3\n.text:00000000004030c6\n.text:00000000004030ca\n.text:00000000004030cb\n.text:00000000004030cd\n'
p657
tp658
sS'strnumcmp'
p659
(S'\n__stdcall strnumcmp(char * a, char * b)\n'
p660
V\u000aint strnumcmp(char *a,char *b)\u000a\u000a{\u000a  byte bVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  ulong uVar4;\u000a  uint in_ECX;\u000a  int iVar5;\u000a  uint in_EDX;\u000a  ulong uVar6;\u000a  uint uVar7;\u000a  uint uVar8;\u000a  byte bVar9;\u000a  uint uVar10;\u000a  byte *pbVar11;\u000a  byte *b_00;\u000a  bool bVar12;\u000a  \u000a  bVar9 = *a;\u000a  bVar1 = *b;\u000a  uVar8 = (uint)bVar1;\u000a  if (bVar9 == 0x2d) {\u000a    pbVar11 = (byte *)(a + 1);\u000a    do {\u000a      do {\u000a        b_00 = pbVar11;\u000a        bVar9 = *b_00;\u000a        uVar10 = (uint)bVar9;\u000a        pbVar11 = b_00 + 1;\u000a      } while (bVar9 == 0x30);\u000a    } while ((uint)bVar9 == in_ECX);\u000a    uVar2 = (uint)bVar9;\u000a    if (bVar1 != 0x2d) {\u000a      if (uVar2 == in_EDX) {\u000a        do {\u000a          bVar9 = *pbVar11;\u000a          pbVar11 = pbVar11 + 1;\u000a        } while (bVar9 == 0x30);\u000a      }\u000a      if ((uint)bVar9 - 0x30 < 10) {\u000a        return -1;\u000a      }\u000a      while ((bVar1 == 0x30 || (uVar8 == in_ECX))) {\u000a        bVar1 = ((byte *)b)[1];\u000a        b = (char *)((byte *)b + 1);\u000a        uVar8 = (uint)bVar1;\u000a      }\u000a      if (uVar8 == in_EDX) {\u000a        do {\u000a          b = (char *)((byte *)b + 1);\u000a          bVar1 = *b;\u000a        } while (bVar1 == 0x30);\u000a      }\u000a      return -(uint)((uint)bVar1 - 0x30 < 10);\u000a    }\u000a    do {\u000a      do {\u000a        bVar1 = b[1];\u000a        b = b + 1;\u000a      } while (bVar1 == 0x30);\u000a    } while ((uint)bVar1 == in_ECX);\u000a    uVar7 = (uint)bVar9 - 0x30;\u000a    bVar12 = uVar7 < 10;\u000a    uVar8 = uVar2;\u000a    if (bVar1 == bVar9) {\u000a      do {\u000a        uVar2 = uVar8;\u000a        if (9 < uVar7) break;\u000a        do {\u000a          bVar9 = b_00[1];\u000a          uVar10 = (uint)bVar9;\u000a          b_00 = b_00 + 1;\u000a          uVar2 = (uint)bVar9;\u000a        } while ((uint)bVar9 == in_ECX);\u000a        do {\u000a          bVar1 = b[1];\u000a          b = b + 1;\u000a        } while ((uint)bVar1 == in_ECX);\u000a        uVar7 = (uint)bVar9 - 0x30;\u000a        bVar12 = uVar7 < 10;\u000a        uVar8 = (uint)bVar9;\u000a      } while (bVar1 == bVar9);\u000a    }\u000a    uVar8 = (uint)bVar1 - 0x30;\u000a    if ((!(bool)((uint)bVar1 != in_EDX | bVar12)) || (uVar2 == in_EDX && 9 < uVar8)) {\u000aLAB_0040f53e:\u000a      iVar3 = fraccompare(b,(char *)b_00);\u000a      return iVar3;\u000a    }\u000a    uVar6 = 0;\u000a    while (uVar10 - 0x30 < 10) {\u000a      do {\u000a        pbVar11 = b_00 + 1;\u000a        b_00 = b_00 + 1;\u000a        uVar10 = (uint)*pbVar11;\u000a      } while (uVar10 == in_ECX);\u000a      uVar6 = uVar6 + 1;\u000a    }\u000a    uVar4 = 0;\u000a    while (uVar8 < 10) {\u000a      do {\u000a        b_00 = (byte *)(b + 1);\u000a        b = b + 1;\u000a      } while ((uint)*b_00 == in_ECX);\u000a      uVar4 = uVar4 + 1;\u000a      uVar8 = (uint)*b_00 - 0x30;\u000a    }\u000a    bVar12 = uVar6 < uVar4;\u000a    if (uVar6 == uVar4) {\u000a      if (uVar6 == 0) {\u000a        return 0;\u000a      }\u000a      return (uint)bVar1 - uVar2;\u000a    }\u000a    iVar5 = 1;\u000a    iVar3 = -1;\u000a  }\u000a  else {\u000a    if (bVar1 == 0x2d) {\u000a      b_00 = (byte *)(b + 1);\u000a      do {\u000a        do {\u000a          bVar1 = *b_00;\u000a          b_00 = b_00 + 1;\u000a        } while (bVar1 == 0x30);\u000a      } while ((uint)bVar1 == in_ECX);\u000a      if ((uint)bVar1 == in_EDX) {\u000a        do {\u000a          bVar1 = *b_00;\u000a          b_00 = b_00 + 1;\u000a        } while (bVar1 == 0x30);\u000a      }\u000a      if ((uint)bVar1 - 0x30 < 10) {\u000a        return 1;\u000a      }\u000a      if (bVar9 != 0x30) goto LAB_0040f3e9;\u000a      do {\u000a        do {\u000a          bVar9 = ((byte *)a)[1];\u000a          a = (char *)((byte *)a + 1);\u000a        } while (bVar9 == 0x30);\u000aLAB_0040f3e9:\u000a        uVar8 = (uint)bVar9;\u000a      } while (uVar8 == in_ECX);\u000a      if (uVar8 == in_EDX) {\u000a        do {\u000a          a = (char *)((byte *)a + 1);\u000a          uVar8 = (uint)(byte)*a;\u000a        } while (*a == 0x30);\u000a      }\u000a      return -(uint)(uVar8 - 0x30 < 10) & 1;\u000a    }\u000a    if (bVar9 != 0x30) goto LAB_0040f430;\u000a    do {\u000a      do {\u000a        bVar9 = a[1];\u000a        a = a + 1;\u000a      } while (bVar9 == 0x30);\u000aLAB_0040f430:\u000a      b_00 = (byte *)b;\u000a    } while ((uint)bVar9 == in_ECX);\u000a    while ((bVar1 == 0x30 || (b = a, uVar8 == in_ECX))) {\u000a      bVar1 = b_00[1];\u000a      uVar8 = (uint)bVar1;\u000a      b_00 = b_00 + 1;\u000a    }\u000a    while( true ) {\u000a      if ((bVar9 != bVar1) || (9 < (uint)bVar9 - 0x30)) break;\u000a      do {\u000a        bVar9 = b[1];\u000a        b = b + 1;\u000a      } while ((uint)bVar9 == in_ECX);\u000a      do {\u000a        bVar1 = b_00[1];\u000a        b_00 = b_00 + 1;\u000a      } while ((uint)bVar1 == in_ECX);\u000a    }\u000a    uVar10 = (uint)bVar9;\u000a    uVar8 = (uint)bVar1 - 0x30;\u000a    if (((uint)bVar1 == in_EDX && 9 < (uint)bVar9 - 0x30) || (uVar10 == in_EDX && 9 < uVar8))\u000a    goto LAB_0040f53e;\u000a    uVar6 = 0;\u000a    uVar2 = uVar10;\u000a    while (uVar2 - 0x30 < 10) {\u000a      do {\u000a        pbVar11 = (byte *)(b + 1);\u000a        b = b + 1;\u000a        uVar2 = (uint)*pbVar11;\u000a      } while (uVar2 == in_ECX);\u000a      uVar6 = uVar6 + 1;\u000a    }\u000a    uVar4 = 0;\u000a    while (uVar8 < 10) {\u000a      do {\u000a        pbVar11 = b_00 + 1;\u000a        b_00 = b_00 + 1;\u000a      } while ((uint)*pbVar11 == in_ECX);\u000a      uVar4 = uVar4 + 1;\u000a      uVar8 = (uint)*pbVar11 - 0x30;\u000a    }\u000a    bVar12 = uVar6 < uVar4;\u000a    if (uVar6 == uVar4) {\u000a      if (uVar6 == 0) {\u000a        return 0;\u000a      }\u000a      return uVar10 - (uint)bVar1;\u000a    }\u000a    iVar5 = -1;\u000a    iVar3 = 1;\u000a  }\u000a  if (bVar12) {\u000a    iVar3 = iVar5;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p661
S'JMP 0x0040f1b0\n'
p662
S'eb 0e\n'
p663
S'.text:000000000040f1a0\n'
p664
tp665
sS'xmemcoll'
p666
(S'\n__stdcall xmemcoll(char * s1, size_t s1len, char * s2, size_t s2len)\n'
p667
V\u000aint xmemcoll(char *s1,size_t s1len,char *s2,size_t s2len)\u000a\u000a{\u000a  int iVar1;\u000a  uint *puVar2;\u000a  \u000a  iVar1 = memcoll(s1,s1len,s2,s2len);\u000a  puVar2 = (uint *)__errno_location();\u000a  if (*puVar2 != 0) {\u000a    collate_error((char *)(ulong)*puVar2,(size_t)s1,(char *)s1len,(size_t)s2);\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p668
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV RBX,RDI\nCALL 0x00411340\nMOV EBP,EAX\nCALL 0x00402430\nMOV EDI,dword ptr [RAX]\nTEST EDI,EDI\nJZ 0x0040fd77\nMOV RSI,RBX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,R14\nCALL 0x0040fd90\nMOV EAX,EBP\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p669
S'55\n41 57\n41 56\n41 54\n53\n49 89 ce\n49 89 d7\n49 89 f4\n48 89 fb\ne8 e7 15 00 00\n89 c5\ne8 d0 26 ff ff\n8b 38\n85 ff\n74 11\n48 89 de\n4c 89 e2\n4c 89 f9\n4d 89 f0\ne8 19 00 00 00\n89 e8\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p670
S'.text:000000000040fd40\n.text:000000000040fd41\n.text:000000000040fd43\n.text:000000000040fd45\n.text:000000000040fd47\n.text:000000000040fd48\n.text:000000000040fd4b\n.text:000000000040fd4e\n.text:000000000040fd51\n.text:000000000040fd54\n.text:000000000040fd59\n.text:000000000040fd5b\n.text:000000000040fd60\n.text:000000000040fd62\n.text:000000000040fd64\n.text:000000000040fd66\n.text:000000000040fd69\n.text:000000000040fd6c\n.text:000000000040fd6f\n.text:000000000040fd72\n.text:000000000040fd77\n.text:000000000040fd79\n.text:000000000040fd7a\n.text:000000000040fd7c\n.text:000000000040fd7e\n.text:000000000040fd80\n.text:000000000040fd81\n'
p671
tp672
sS'merge_tree_init'
p673
(S'\n__stdcall merge_tree_init(size_t nthreads, size_t nlines, line * dest)\n'
p674
V\u000amerge_node * merge_tree_init(size_t nthreads,size_t nlines,line *dest)\u000a\u000a{\u000a  merge_node *parent;\u000a  \u000a  parent = (merge_node *)xmalloc(nthreads << 8);\u000a  *(undefined4 *)&parent->end_lo = 0;\u000a  *(undefined4 *)((long)&parent->end_lo + 4) = 0;\u000a  *(undefined4 *)&parent->end_hi = 0;\u000a  *(undefined4 *)((long)&parent->end_hi + 4) = 0;\u000a  *(undefined4 *)&parent->lo = 0;\u000a  *(undefined4 *)((long)&parent->lo + 4) = 0;\u000a  *(undefined4 *)&parent->hi = 0;\u000a  *(undefined4 *)((long)&parent->hi + 4) = 0;\u000a  parent->dest = (line **)0x0;\u000a  parent->nhi = nlines;\u000a  parent->nlo = nlines;\u000a  parent->parent = (merge_node *)0x0;\u000a  parent->level = 0;\u000a  parent->queued = false;\u000a  pthread_mutex_init((pthread_mutex_t *)parent->lock,(pthread_mutexattr_t *)0x0);\u000a  init_node(parent,parent + 1,dest,nthreads,nlines);\u000a  return parent;\u000a}\u000a\u000a
p675
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R12,RSI\nMOV R15,RDI\nSHL RDI,0x8\nCALL 0x0040fb80\nMOV RBX,RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x10],XMM0\nMOVUPS xmmword ptr [RBX],XMM0\nMOV qword ptr [RBX + 0x20],0x0\nMOV qword ptr [RBX + 0x30],R12\nMOV qword ptr [RBX + 0x28],R12\nMOV qword ptr [RBX + 0x38],0x0\nMOV dword ptr [RBX + 0x50],0x0\nMOV byte ptr [RBX + 0x54],0x0\nLEA RDI,[RBX + 0x58]\nXOR ESI,ESI\nCALL 0x00402ae0\nMOV RSI,RBX\nSUB RSI,-0x80\nXOR R9D,R9D\nMOV RDI,RBX\nMOV RDX,R14\nMOV RCX,R15\nMOV R8,R12\nCALL 0x00409400\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p676
S'41 57\n41 56\n41 54\n53\n50\n49 89 d6\n49 89 f4\n49 89 ff\n48 c1 e7 08\ne8 76 6b 00 00\n48 89 c3\n0f 57 c0\n0f 11 43 10\n0f 11 03\n48 c7 43 20 00 00 00 00\n4c 89 63 30\n4c 89 63 28\n48 c7 43 38 00 00 00 00\nc7 43 50 00 00 00 00\nc6 43 54 00\n48 8d 7b 58\n31 f6\ne8 9b 9a ff ff\n48 89 de\n48 83 ee 80\n45 31 c9\n48 89 df\n4c 89 f2\n4c 89 f9\n4d 89 e0\ne8 a0 03 00 00\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p677
S'.text:0000000000408ff0\n.text:0000000000408ff2\n.text:0000000000408ff4\n.text:0000000000408ff6\n.text:0000000000408ff7\n.text:0000000000408ff8\n.text:0000000000408ffb\n.text:0000000000408ffe\n.text:0000000000409001\n.text:0000000000409005\n.text:000000000040900a\n.text:000000000040900d\n.text:0000000000409010\n.text:0000000000409014\n.text:0000000000409017\n.text:000000000040901f\n.text:0000000000409023\n.text:0000000000409027\n.text:000000000040902f\n.text:0000000000409036\n.text:000000000040903a\n.text:000000000040903e\n.text:0000000000409040\n.text:0000000000409045\n.text:0000000000409048\n.text:000000000040904c\n.text:000000000040904f\n.text:0000000000409052\n.text:0000000000409055\n.text:0000000000409058\n.text:000000000040905b\n.text:0000000000409060\n.text:0000000000409063\n.text:0000000000409067\n.text:0000000000409068\n.text:000000000040906a\n.text:000000000040906c\n.text:000000000040906e\n'
p678
tp679
sS'xzalloc'
p680
(S'\n__stdcall xzalloc(size_t s)\n'
p681
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p682
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x0040fb80\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00402690\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p683
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 04 2a ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p684
S'.text:000000000040fc70\n.text:000000000040fc72\n.text:000000000040fc73\n.text:000000000040fc74\n.text:000000000040fc77\n.text:000000000040fc7c\n.text:000000000040fc7f\n.text:000000000040fc81\n.text:000000000040fc84\n.text:000000000040fc87\n.text:000000000040fc8c\n.text:000000000040fc8f\n.text:000000000040fc93\n.text:000000000040fc94\n.text:000000000040fc96\n'
p685
tp686
sS'just'
p687
(S'\n__stdcall just(isaac_word a)\n'
p688
V\u000aisaac_word just(isaac_word a)\u000a\u000a{\u000a  return a;\u000a}\u000a\u000a
p689
S'MOV RAX,RDI\nRET\n'
p690
S'48 89 f8\nc3\n'
p691
S'.text:000000000040eb30\n.text:000000000040eb33\n'
p692
tp693
sS'getppid'
p694
(S'\n__stdcall getppid()\n'
p695
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t getppid(void)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getppid_0061a348)();\u000a  return _Var1;\u000a}\u000a\u000a
p696
S'JMP qword ptr [0x0061a348]\n'
p697
S'ff 25 12 79 21 00\n'
p698
S'.plt:0000000000402a30\n'
p699
tp700
sS'zaptemp'
p701
(S'\n__stdcall zaptemp(char * name)\n'
p702
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000avoid zaptemp(char *name)\u000a\u000a{\u000a  tempnode *__ptr;\u000a  tempnode *ptVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  long lVar6;\u000a  tempnode *ptVar7;\u000a  cs_status *pcVar8;\u000a  undefined8 *puVar9;\u000a  byte bVar10;\u000a  cs_status cs;\u000a  cs_status status;\u000a  uint local_bc;\u000a  cs_status local_b8;\u000a  \u000a  bVar10 = 0;\u000a  __ptr = (tempnode *)&temphead;\u000a  do {\u000a    ptVar7 = __ptr;\u000a    __ptr = ptVar7->next;\u000a  } while (__ptr->name != name);\u000a  if (__ptr->state == 1) {\u000a    wait_proc((ulong)(uint)__ptr->pid);\u000a  }\u000a  ptVar1 = __ptr->next;\u000a  cs_enter(&local_b8);\u000a  iVar2 = unlink(name);\u000a  puVar3 = (uint *)__errno_location();\u000a  local_bc = *puVar3;\u000a  ptVar7->next = ptVar1;\u000a  lVar6 = 0x11;\u000a  pcVar8 = &local_b8;\u000a  puVar9 = (undefined8 *)&stack0xfffffffffffffeb8;\u000a  while (lVar6 != 0) {\u000a    lVar6 = lVar6 + -1;\u000a    *puVar9 = *(undefined8 *)pcVar8;\u000a    pcVar8 = (cs_status *)((long)pcVar8 + (ulong)bVar10 * -0x10 + 8);\u000a    puVar9 = puVar9 + (ulong)bVar10 * 0x1ffffffffffffffe + 1;\u000a  }\u000a  cs_leave(status);\u000a  if (iVar2 != 0) {\u000a    uVar4 = dcgettext(0,"warning: cannot remove: %s",5);\u000a    pcVar5 = quotearg_n_style_colon((char *)0x0);\u000a    error(0,(ulong)local_bc,uVar4,pcVar5);\u000a  }\u000a  if (ptVar1 == (tempnode *)0x0) {\u000a    temptail = (tempnode **)ptVar7;\u000a  }\u000a  free(__ptr);\u000a  return;\u000a}\u000a\u000a
p703
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x118\nMOV R14,RDI\nMOV EBX,0x61aa70\nNOP dword ptr [RAX]\nMOV RBP,RBX\nMOV RBX,qword ptr [RBP]\nLEA RAX,[RBX + 0xd]\nCMP RAX,R14\nJNZ 0x00408c20\nCMP byte ptr [RBX + 0xc],0x1\nJNZ 0x00408c3e\nMOV EDI,dword ptr [RBX + 0x8]\nCALL 0x00408800\nMOV R15,qword ptr [RBX]\nLEA R12,[0x90 + RSP]\nMOV RDI,R12\nCALL 0x00405d30\nMOV RDI,R14\nCALL 0x00402440\nMOV R13D,EAX\nCALL 0x00402430\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [0x8c + RSP],EAX\nMOV qword ptr [RBP],R15\nMOV ECX,0x11\nMOV RDI,RSP\nMOV RSI,R12\nMOVSQ.REP RDI,RSI\nCALL 0x00405d80\nTEST R13D,R13D\nJZ 0x00408cbf\nXOR EDI,EDI\nMOV ESI,0x413fe1\nMOV EDX,0x5\nCALL 0x004025b0\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R14\nCALL 0x0040dd70\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,dword ptr [0x8c + RSP]\nMOV RDX,R12\nCALL 0x00402960\nTEST R15,R15\nJNZ 0x00408ccb\nMOV qword ptr [0x0061a4c8],RBP\nMOV RDI,RBX\nCALL 0x00402400\nADD RSP,0x118\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p704
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 18 01 00 00\n49 89 fe\nbb 70 aa 61 00\n0f 1f 80 00 00 00 00\n48 89 dd\n48 8b 5d 00\n48 8d 43 0d\n4c 39 f0\n75 f0\n80 7b 0c 01\n75 08\n8b 7b 08\ne8 c2 fb ff ff\n4c 8b 3b\n4c 8d a4 24 90 00 00 00\n4c 89 e7\ne8 df d0 ff ff\n4c 89 f7\ne8 e7 97 ff ff\n41 89 c5\ne8 cf 97 ff ff\n8b 00\n89 84 24 8c 00 00 00\n4c 89 7d 00\nb9 11 00 00 00\n48 89 e7\n4c 89 e6\nf3 48 a5\ne8 ff d0 ff ff\n45 85 ed\n74 39\n31 ff\nbe e1 3f 41 00\nba 05 00 00 00\ne8 19 99 ff ff\n49 89 c4\n31 ff\nbe 03 00 00 00\n4c 89 f2\ne8 c7 50 00 00\n48 89 c1\n31 ff\n31 c0\n8b b4 24 8c 00 00 00\n4c 89 e2\ne8 a1 9c ff ff\n4d 85 ff\n75 07\n48 89 2d fd 17 21 00\n48 89 df\ne8 2d 97 ff ff\n48 81 c4 18 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p705
S'.text:0000000000408c00\n.text:0000000000408c01\n.text:0000000000408c03\n.text:0000000000408c05\n.text:0000000000408c07\n.text:0000000000408c09\n.text:0000000000408c0a\n.text:0000000000408c11\n.text:0000000000408c14\n.text:0000000000408c19\n.text:0000000000408c20\n.text:0000000000408c23\n.text:0000000000408c27\n.text:0000000000408c2b\n.text:0000000000408c2e\n.text:0000000000408c30\n.text:0000000000408c34\n.text:0000000000408c36\n.text:0000000000408c39\n.text:0000000000408c3e\n.text:0000000000408c41\n.text:0000000000408c49\n.text:0000000000408c4c\n.text:0000000000408c51\n.text:0000000000408c54\n.text:0000000000408c59\n.text:0000000000408c5c\n.text:0000000000408c61\n.text:0000000000408c63\n.text:0000000000408c6a\n.text:0000000000408c6e\n.text:0000000000408c73\n.text:0000000000408c76\n.text:0000000000408c79\n.text:0000000000408c7c\n.text:0000000000408c81\n.text:0000000000408c84\n.text:0000000000408c86\n.text:0000000000408c88\n.text:0000000000408c8d\n.text:0000000000408c92\n.text:0000000000408c97\n.text:0000000000408c9a\n.text:0000000000408c9c\n.text:0000000000408ca1\n.text:0000000000408ca4\n.text:0000000000408ca9\n.text:0000000000408cac\n.text:0000000000408cae\n.text:0000000000408cb0\n.text:0000000000408cb7\n.text:0000000000408cba\n.text:0000000000408cbf\n.text:0000000000408cc2\n.text:0000000000408cc4\n.text:0000000000408ccb\n.text:0000000000408cce\n.text:0000000000408cd3\n.text:0000000000408cda\n.text:0000000000408cdb\n.text:0000000000408cdd\n.text:0000000000408cdf\n.text:0000000000408ce1\n.text:0000000000408ce3\n.text:0000000000408ce4\n'
p706
tp707
sS'quotearg_n_style'
p708
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p709
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p710
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x0040dbf0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x0040d9c0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p711
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p712
S'.text:000000000040dbb0\n.text:000000000040dbb1\n.text:000000000040dbb3\n.text:000000000040dbb4\n.text:000000000040dbb8\n.text:000000000040dbbb\n.text:000000000040dbbd\n.text:000000000040dbc2\n.text:000000000040dbc5\n.text:000000000040dbca\n.text:000000000040dbd1\n.text:000000000040dbd3\n.text:000000000040dbd6\n.text:000000000040dbd9\n.text:000000000040dbde\n.text:000000000040dbe2\n.text:000000000040dbe3\n.text:000000000040dbe5\n.text:000000000040dbe6\n'
p713
tp714
sS'hash_clear'
p715
(S'\n__stdcall hash_clear(Hash_table * table)\n'
p716
V\u000avoid hash_clear(Hash_table *table)\u000a\u000a{\u000a  void (*pVar1)(void *);\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    do {\u000a      if (phVar4->data != (void *)0x0) {\u000a        pVar1 = table->data_freer;\u000a        phVar3 = phVar4->next;\u000a        while (phVar3 != (hash_entry *)0x0) {\u000a          if (pVar1 != (void (*)(void *))0x0) {\u000a            (*pVar1)(phVar3->data);\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          phVar2 = phVar3->next;\u000a          phVar3->next = table->free_entry_list;\u000a          table->free_entry_list = phVar3;\u000a          pVar1 = table->data_freer;\u000a          phVar3 = phVar2;\u000a        }\u000a        if (pVar1 != (void (*)(void *))0x0) {\u000a          (*pVar1)(phVar4->data);\u000a        }\u000a        *(undefined4 *)&phVar4->data = 0;\u000a        *(undefined4 *)((long)&phVar4->data + 4) = 0;\u000a        *(undefined4 *)&phVar4->next = 0;\u000a        *(undefined4 *)((long)&phVar4->next + 4) = 0;\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  *(undefined4 *)&table->n_buckets_used = 0;\u000a  *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a  *(undefined4 *)&table->n_entries = 0;\u000a  *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p717
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x0040b7ba\nJMP 0x0040b815\nTEST CL,CL\nJZ 0x0040b7a9\nMOV RDI,qword ptr [R14]\nCALL RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R14],XMM0\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x0040b815\nCMP qword ptr [R14],0x0\nJZ 0x0040b7b0\nMOV RBX,qword ptr [R14 + 0x8]\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RBX,RBX\nJZ 0x0040b7a0\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST CL,0x1\nJZ 0x0040b7ea\nMOV RDI,qword ptr [RBX]\nCALL RAX\nMOV qword ptr [RBX],0x0\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RAX,qword ptr [R15 + 0x48]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [R15 + 0x48],RBX\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RDX,RDX\nMOV RBX,RDX\nJNZ 0x0040b7e0\nJMP 0x0040b7a0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15 + 0x18],XMM0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p718
S'41 57\n41 56\n53\n49 89 ff\n4d 8b 37\n4d 3b 77 08\n72 29\ne9 7f 00 00 00\n84 c9\n74 05\n49 8b 3e\nff d0\n0f 57 c0\n41 0f 11 06\n49 83 c6 10\n4d 3b 77 08\n73 5b\n49 83 3e 00\n74 f0\n49 8b 5e 08\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 db\n74 cd\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nf6 c1 01\n74 05\n48 8b 3b\nff d0\n48 c7 03 00 00 00 00\n48 8b 53 08\n49 8b 47 48\n48 89 43 08\n49 89 5f 48\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 d2\n48 89 d3\n75 cd\neb 8b\n0f 57 c0\n41 0f 11 47 18\n5b\n41 5e\n41 5f\nc3\n'
p719
S'.text:000000000040b780\n.text:000000000040b782\n.text:000000000040b784\n.text:000000000040b785\n.text:000000000040b788\n.text:000000000040b78b\n.text:000000000040b78f\n.text:000000000040b791\n.text:000000000040b7a0\n.text:000000000040b7a2\n.text:000000000040b7a4\n.text:000000000040b7a7\n.text:000000000040b7a9\n.text:000000000040b7ac\n.text:000000000040b7b0\n.text:000000000040b7b4\n.text:000000000040b7b8\n.text:000000000040b7ba\n.text:000000000040b7be\n.text:000000000040b7c0\n.text:000000000040b7c4\n.text:000000000040b7c8\n.text:000000000040b7cb\n.text:000000000040b7ce\n.text:000000000040b7d1\n.text:000000000040b7d3\n.text:000000000040b7e0\n.text:000000000040b7e3\n.text:000000000040b7e5\n.text:000000000040b7e8\n.text:000000000040b7ea\n.text:000000000040b7f1\n.text:000000000040b7f5\n.text:000000000040b7f9\n.text:000000000040b7fd\n.text:000000000040b801\n.text:000000000040b805\n.text:000000000040b808\n.text:000000000040b80b\n.text:000000000040b80e\n.text:000000000040b811\n.text:000000000040b813\n.text:000000000040b815\n.text:000000000040b818\n.text:000000000040b81d\n.text:000000000040b81e\n.text:000000000040b820\n.text:000000000040b822\n'
p720
tp721
sS'fork'
p722
(S'\n__stdcall fork()\n'
p723
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t fork(void)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_fork_0061a3b0)();\u000a  return _Var1;\u000a}\u000a\u000a
p724
S'JMP qword ptr [0x0061a3b0]\n'
p725
S'ff 25 aa 78 21 00\n'
p726
S'.plt:0000000000402b00\n'
p727
tp728
sS'quote_n'
p729
(S'\n__stdcall quote_n(char * arg)\n'
p730
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p731
S'MOV RDX,-0x1\nJMP 0x0040de80\n'
p732
S'48 c7 c2 ff ff ff ff\neb d7\n'
p733
S'.text:000000000040dea0\n.text:000000000040dea7\n'
p734
tp735
sS'close_stdout_set_file_name'
p736
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p737
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p738
S'MOV qword ptr [0x0061ab68],RDI\nRET\n'
p739
S'48 89 3d 81 0b 21 00\nc3\n'
p740
S'.text:0000000000409fe0\n.text:0000000000409fe7\n'
p741
tp742
sS'field_sep'
p743
(S'\n__stdcall field_sep()\n'
p744
V\u000a_Bool field_sep(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  uint in_EDI;\u000a  \u000a  ppuVar1 = __ctype_b_loc();\u000a  return (_Bool)(*(byte *)(*ppuVar1 + (ulong)in_EDI) & 1 | (char)in_EDI == '\u005cn');\u000a}\u000a\u000a
p745
S'PUSH RBX\nMOV EBX,EDI\nCALL 0x00402b30\nMOV RAX,qword ptr [RAX]\nCMP BL,0xa\nSETZ CL\nMOV AL,byte ptr [RAX + RBX*0x2]\nAND AL,0x1\nOR AL,CL\nPOP RBX\nRET\n'
p746
S'53\n89 fb\ne8 58 ce ff ff\n48 8b 00\n80 fb 0a\n0f 94 c1\n8a 04 58\n24 01\n08 c8\n5b\nc3\n'
p747
S'.text:0000000000405cd0\n.text:0000000000405cd1\n.text:0000000000405cd3\n.text:0000000000405cd8\n.text:0000000000405cdb\n.text:0000000000405cde\n.text:0000000000405ce1\n.text:0000000000405ce4\n.text:0000000000405ce6\n.text:0000000000405ce8\n.text:0000000000405ce9\n'
p748
tp749
sS'fgetc'
p750
(S'\n__stdcall fgetc(FILE * __stream)\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fgetc(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fgetc_0061a188)();\u000a  return iVar1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x0061a188]\n'
p753
S'ff 25 d2 7a 21 00\n'
p754
S'.plt:00000000004026b0\n'
p755
tp756
sS'__libc_csu_init'
p757
(S'\n__stdcall __libc_csu_init()\n'
p758
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p759
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x619df8]\nPUSH RBP\nLEA RBP,[0x619e00]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x004023a0\nTEST RBP,RBP\nJZ 0x00411566\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00411550\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p760
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 d6 88 20 00\n55\n48 8d 2d d6 88 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 5f 0e ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p761
S'.text:0000000000411510\n.text:0000000000411512\n.text:0000000000411514\n.text:0000000000411517\n.text:0000000000411519\n.text:000000000041151b\n.text:0000000000411522\n.text:0000000000411523\n.text:000000000041152a\n.text:000000000041152b\n.text:000000000041152e\n.text:0000000000411531\n.text:0000000000411534\n.text:0000000000411538\n.text:000000000041153c\n.text:0000000000411541\n.text:0000000000411544\n.text:0000000000411546\n.text:0000000000411548\n.text:0000000000411550\n.text:0000000000411553\n.text:0000000000411556\n.text:0000000000411559\n.text:000000000041155d\n.text:0000000000411561\n.text:0000000000411564\n.text:0000000000411566\n.text:000000000041156a\n.text:000000000041156b\n.text:000000000041156c\n.text:000000000041156e\n.text:0000000000411570\n.text:0000000000411572\n.text:0000000000411574\n'
p762
tp763
sS'getrlimit'
p764
(S'\n__stdcall getrlimit(__rlimit_resource_t __resource, rlimit * __rlimits)\n'
p765
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getrlimit(__rlimit_resource_t __resource,rlimit *__rlimits)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getrlimit_0061a370)();\u000a  return iVar1;\u000a}\u000a\u000a
p766
S'JMP qword ptr [0x0061a370]\n'
p767
S'ff 25 ea 78 21 00\n'
p768
S'.plt:0000000000402a80\n'
p769
tp770
sS'c_isdigit'
p771
(S'\n__stdcall c_isdigit()\n'
p772
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p773
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p774
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p775
S'.text:0000000000410e10\n.text:0000000000410e13\n.text:0000000000410e16\n.text:0000000000410e19\n'
p776
tp777
sS'check_inputs'
p778
(S'\n__stdcall check_inputs(char * * files, size_t nfiles)\n'
p779
V\u000avoid check_inputs(char **files,size_t nfiles)\u000a\u000a{\u000a  int iVar1;\u000a  char *message;\u000a  ulong uVar2;\u000a  \u000a  if (nfiles != 0) {\u000a    uVar2 = 0;\u000a    do {\u000a      if ((*files[uVar2] != '-') || (files[uVar2][1] != 0)) {\u000a        iVar1 = euidaccess(files[uVar2],4);\u000a        if (iVar1 != 0) {\u000a          message = (char *)dcgettext(0,"cannot read",5);\u000a                    /* WARNING: Subroutine does not return */\u000a          die(message,files[uVar2]);\u000a        }\u000a      }\u000a      uVar2 = uVar2 + 1;\u000a    } while (uVar2 < nfiles);\u000a  }\u000a  return;\u000a}\u000a\u000a
p780
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nTEST R14,R14\nJZ 0x00405519\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [R15 + RBX*0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x004054ff\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00405511\nMOV RDI,qword ptr [R15 + RBX*0x8]\nMOV ESI,0x4\nCALL 0x004029f0\nTEST EAX,EAX\nJNZ 0x0040551f\nINC RBX\nCMP RBX,R14\nJC 0x004054f0\nPOP RBX\nPOP R14\nPOP R15\nRET\nXOR EDI,EDI\nMOV ESI,0x413f4a\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [R15 + RBX*0x8]\nMOV RDI,RAX\nCALL 0x00405c70\n'
p781
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n4d 85 f6\n74 39\n31 db\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 04 df\n80 38 2d\n75 06\n80 78 01 00\n74 12\n49 8b 3c df\nbe 04 00 00 00\ne8 e3 d4 ff ff\n85 c0\n75 0e\n48 ff c3\n4c 39 f3\n72 d7\n5b\n41 5e\n41 5f\nc3\n31 ff\nbe 4a 3f 41 00\nba 05 00 00 00\ne8 80 d0 ff ff\n49 8b 34 df\n48 89 c7\ne8 34 07 00 00\n'
p782
S'.text:00000000004054d0\n.text:00000000004054d2\n.text:00000000004054d4\n.text:00000000004054d5\n.text:00000000004054d8\n.text:00000000004054db\n.text:00000000004054de\n.text:00000000004054e0\n.text:00000000004054e2\n.text:00000000004054f0\n.text:00000000004054f4\n.text:00000000004054f7\n.text:00000000004054f9\n.text:00000000004054fd\n.text:00000000004054ff\n.text:0000000000405503\n.text:0000000000405508\n.text:000000000040550d\n.text:000000000040550f\n.text:0000000000405511\n.text:0000000000405514\n.text:0000000000405517\n.text:0000000000405519\n.text:000000000040551a\n.text:000000000040551c\n.text:000000000040551e\n.text:000000000040551f\n.text:0000000000405521\n.text:0000000000405526\n.text:000000000040552b\n.text:0000000000405530\n.text:0000000000405534\n.text:0000000000405537\n'
p783
tp784
sS'verrevcmp'
p785
(S'\n__stdcall verrevcmp(char * s1, size_t s1_len, char * s2, size_t s2_len)\n'
p786
V\u000aint verrevcmp(char *s1,size_t s1_len,char *s2,size_t s2_len)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  int iVar5;\u000a  long lVar6;\u000a  ulong uVar7;\u000a  ulong uVar8;\u000a  ulong uVar9;\u000a  ulong uVar10;\u000a  \u000a  uVar10 = 0;\u000a  uVar9 = 0;\u000a  do {\u000a    if ((s2_len <= uVar10) && (s1_len <= uVar9)) {\u000a      return 0;\u000a    }\u000a    uVar1 = uVar9 - 1;\u000a    uVar2 = uVar10 - 1;\u000a    uVar7 = uVar10;\u000a    uVar8 = uVar9;\u000a    while (((uVar10 = uVar2, uVar9 = uVar1, uVar8 < s1_len && (_Var3 = c_isdigit(), _Var3 == false))\u000a           || ((uVar7 < s2_len && (_Var3 = c_isdigit(), _Var3 == false))))) {\u000a      iVar5 = 0;\u000a      iVar4 = 0;\u000a      if (s1_len != uVar8) {\u000a        iVar4 = order();\u000a      }\u000a      if (s2_len != uVar7) {\u000a        iVar5 = order();\u000a      }\u000a      if (iVar4 - iVar5 != 0) {\u000a        return iVar4 - iVar5;\u000a      }\u000a      uVar8 = uVar8 + 1;\u000a      uVar7 = uVar7 + 1;\u000a      uVar1 = uVar9 + 1;\u000a      uVar2 = uVar10 + 1;\u000a    }\u000a    do {\u000a      lVar6 = uVar9 + 1;\u000a      uVar9 = uVar9 + 1;\u000a    } while (s1[lVar6] == '0');\u000a    do {\u000a      lVar6 = uVar10 + 1;\u000a      uVar10 = uVar10 + 1;\u000a    } while (s2[lVar6] == '0');\u000a    _Var3 = c_isdigit();\u000a    if (_Var3 == false) {\u000a      iVar4 = 0;\u000a    }\u000a    else {\u000a      lVar6 = 0;\u000a      iVar4 = 0;\u000a      do {\u000a        _Var3 = c_isdigit();\u000a        if (_Var3 == false) break;\u000a        if (iVar4 == 0) {\u000a          iVar4 = (int)s1[lVar6 + uVar9] - (int)s2[lVar6 + uVar10];\u000a        }\u000a        _Var3 = c_isdigit();\u000a        lVar6 = lVar6 + 1;\u000a      } while (_Var3 != false);\u000a      uVar9 = uVar9 + lVar6;\u000a      uVar10 = uVar10 + lVar6;\u000a    }\u000a    _Var3 = c_isdigit();\u000a    if (_Var3 != false) {\u000a      return 1;\u000a    }\u000a    _Var3 = c_isdigit();\u000a    if (_Var3 != false) {\u000a      return -1;\u000a    }\u000a    if (iVar4 != 0) {\u000a      return iVar4;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p787
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV qword ptr [RSP + 0x10],RDX\nMOV qword ptr [RSP + 0x20],RSI\nMOV qword ptr [RSP + 0x8],RDI\nXOR R12D,R12D\nXOR R14D,R14D\nMOV qword ptr [RSP + 0x18],RCX\nCMP R12,RCX\nJC 0x0040ae88\nCMP R14,qword ptr [RSP + 0x20]\nJNC 0x0040aff5\nLEA R13,[R14 + -0x1]\nLEA R15,[R12 + -0x1]\nCMP R14,qword ptr [RSP + 0x20]\nJNC 0x0040aec6\nJMP 0x0040aeb3\nINC R14\nINC R12\nINC R13\nINC R15\nCMP R14,qword ptr [RSP + 0x20]\nJNC 0x0040aec6\nMOV RAX,qword ptr [RSP + 0x8]\nMOVSX EDI,byte ptr [RAX + R14*0x1]\nCALL 0x00410e10\nTEST AL,AL\nJZ 0x0040aee0\nCMP R12,qword ptr [RSP + 0x18]\nJNC 0x0040af20\nMOV RAX,qword ptr [RSP + 0x10]\nMOVSX EDI,byte ptr [RAX + R12*0x1]\nCALL 0x00410e10\nTEST AL,AL\nJNZ 0x0040af20\nXOR EBX,EBX\nCMP qword ptr [RSP + 0x20],R14\nMOV EBP,0x0\nJZ 0x0040aeff\nMOV RAX,qword ptr [RSP + 0x8]\nMOVZX EDI,byte ptr [RAX + R14*0x1]\nCALL 0x0040b020\nMOV EBP,EAX\nCMP qword ptr [RSP + 0x18],R12\nJZ 0x0040af17\nMOV RAX,qword ptr [RSP + 0x10]\nMOVZX EDI,byte ptr [RAX + R12*0x1]\nCALL 0x0040b020\nMOV EBX,EAX\nSUB EBP,EBX\nJZ 0x0040aea0\nJMP 0x0040b005\nMOV R14,R13\nMOV RBP,qword ptr [RSP + 0x8]\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RBP + R14*0x1 + 0x1],0x30\nLEA R14,[R14 + 0x1]\nJZ 0x0040af30\nMOV RBX,qword ptr [RSP + 0x10]\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RBX + R15*0x1 + 0x1],0x30\nLEA R15,[R15 + 0x1]\nJZ 0x0040af50\nMOVSX EDI,byte ptr [RBP + R14*0x1]\nCALL 0x00410e10\nLEA R13,[RBP + R14*0x1]\nTEST AL,AL\nJZ 0x0040afc0\nLEA R12,[RBX + R15*0x1]\nXOR EBX,EBX\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOVSX EDI,byte ptr [R12 + RBX*0x1]\nCALL 0x00410e10\nTEST AL,AL\nJZ 0x0040afb1\nTEST EBP,EBP\nJNZ 0x0040af9f\nMOVSX EBP,byte ptr [R13 + RBX*0x1]\nMOVSX EAX,byte ptr [R12 + RBX*0x1]\nSUB EBP,EAX\nMOVSX EDI,byte ptr [R13 + RBX*0x1 + 0x1]\nCALL 0x00410e10\nINC RBX\nTEST AL,AL\nJNZ 0x0040af80\nADD R13,RBX\nADD R14,RBX\nADD R15,RBX\nJMP 0x0040afc2\nXOR EBP,EBP\nMOV R12,R15\nMOVSX EDI,byte ptr [R13]\nCALL 0x00410e10\nTEST AL,AL\nJNZ 0x0040aff9\nMOV RAX,qword ptr [RSP + 0x10]\nMOVSX EDI,byte ptr [RAX + R12*0x1]\nCALL 0x00410e10\nTEST AL,AL\nJNZ 0x0040b000\nTEST EBP,EBP\nMOV RCX,qword ptr [RSP + 0x18]\nJZ 0x0040ae78\nJMP 0x0040b005\nXOR EBP,EBP\nJMP 0x0040b005\nMOV EBP,0x1\nJMP 0x0040b005\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p788
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 54 24 10\n48 89 74 24 20\n48 89 7c 24 08\n45 31 e4\n45 31 f6\n48 89 4c 24 18\n49 39 cc\n72 0b\n4c 3b 74 24 20\n0f 83 6d 01 00 00\n4d 8d 6e ff\n4d 8d 7c 24 ff\n4c 3b 74 24 20\n73 2e\neb 19\n49 ff c6\n49 ff c4\n49 ff c5\n49 ff c7\n4c 3b 74 24 20\n73 13\n48 8b 44 24 08\n42 0f be 3c 30\ne8 4e 5f 00 00\n84 c0\n74 1a\n4c 3b 64 24 18\n73 53\n48 8b 44 24 10\n42 0f be 3c 20\ne8 34 5f 00 00\n84 c0\n75 40\n31 db\n4c 39 74 24 20\nbd 00 00 00 00\n74 11\n48 8b 44 24 08\n42 0f b6 3c 30\ne8 23 01 00 00\n89 c5\n4c 39 64 24 18\n74 11\n48 8b 44 24 10\n42 0f b6 3c 20\ne8 0b 01 00 00\n89 c3\n29 dd\n74 85\ne9 e5 00 00 00\n4d 89 ee\n48 8b 6c 24 08\n0f 1f 84 00 00 00 00 00\n42 80 7c 35 01 30\n4d 8d 76 01\n74 f4\n48 8b 5c 24 10\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n42 80 7c 3b 01 30\n4d 8d 7f 01\n74 f4\n42 0f be 7c 35 00\ne8 a9 5e 00 00\n4e 8d 6c 35 00\n84 c0\n74 50\n4e 8d 24 3b\n31 db\n31 ed\n0f 1f 84 00 00 00 00 00\n41 0f be 3c 1c\ne8 86 5e 00 00\n84 c0\n74 23\n85 ed\n75 0d\n41 0f be 6c 1d 00\n41 0f be 04 1c\n29 c5\n41 0f be 7c 1d 01\ne8 66 5e 00 00\n48 ff c3\n84 c0\n75 cf\n49 01 dd\n49 01 de\n49 01 df\neb 06\n31 ed\n4d 89 fc\n41 0f be 7d 00\ne8 41 5e 00 00\n84 c0\n75 26\n48 8b 44 24 10\n42 0f be 3c 20\ne8 2e 5e 00 00\n84 c0\n75 1a\n85 ed\n48 8b 4c 24 18\n0f 84 85 fe ff ff\neb 10\n31 ed\neb 0c\nbd 01 00 00 00\neb 05\nbd ff ff ff ff\n89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p789
S'.text:000000000040ae50\n.text:000000000040ae51\n.text:000000000040ae53\n.text:000000000040ae55\n.text:000000000040ae57\n.text:000000000040ae59\n.text:000000000040ae5a\n.text:000000000040ae5e\n.text:000000000040ae63\n.text:000000000040ae68\n.text:000000000040ae6d\n.text:000000000040ae70\n.text:000000000040ae73\n.text:000000000040ae78\n.text:000000000040ae7b\n.text:000000000040ae7d\n.text:000000000040ae82\n.text:000000000040ae88\n.text:000000000040ae8c\n.text:000000000040ae91\n.text:000000000040ae96\n.text:000000000040ae98\n.text:000000000040aea0\n.text:000000000040aea3\n.text:000000000040aea6\n.text:000000000040aea9\n.text:000000000040aeac\n.text:000000000040aeb1\n.text:000000000040aeb3\n.text:000000000040aeb8\n.text:000000000040aebd\n.text:000000000040aec2\n.text:000000000040aec4\n.text:000000000040aec6\n.text:000000000040aecb\n.text:000000000040aecd\n.text:000000000040aed2\n.text:000000000040aed7\n.text:000000000040aedc\n.text:000000000040aede\n.text:000000000040aee0\n.text:000000000040aee2\n.text:000000000040aee7\n.text:000000000040aeec\n.text:000000000040aeee\n.text:000000000040aef3\n.text:000000000040aef8\n.text:000000000040aefd\n.text:000000000040aeff\n.text:000000000040af04\n.text:000000000040af06\n.text:000000000040af0b\n.text:000000000040af10\n.text:000000000040af15\n.text:000000000040af17\n.text:000000000040af19\n.text:000000000040af1b\n.text:000000000040af20\n.text:000000000040af23\n.text:000000000040af28\n.text:000000000040af30\n.text:000000000040af36\n.text:000000000040af3a\n.text:000000000040af3c\n.text:000000000040af41\n.text:000000000040af50\n.text:000000000040af56\n.text:000000000040af5a\n.text:000000000040af5c\n.text:000000000040af62\n.text:000000000040af67\n.text:000000000040af6c\n.text:000000000040af6e\n.text:000000000040af70\n.text:000000000040af74\n.text:000000000040af76\n.text:000000000040af78\n.text:000000000040af80\n.text:000000000040af85\n.text:000000000040af8a\n.text:000000000040af8c\n.text:000000000040af8e\n.text:000000000040af90\n.text:000000000040af92\n.text:000000000040af98\n.text:000000000040af9d\n.text:000000000040af9f\n.text:000000000040afa5\n.text:000000000040afaa\n.text:000000000040afad\n.text:000000000040afaf\n.text:000000000040afb1\n.text:000000000040afb4\n.text:000000000040afb7\n.text:000000000040afba\n.text:000000000040afc0\n.text:000000000040afc2\n.text:000000000040afc5\n.text:000000000040afca\n.text:000000000040afcf\n.text:000000000040afd1\n.text:000000000040afd3\n.text:000000000040afd8\n.text:000000000040afdd\n.text:000000000040afe2\n.text:000000000040afe4\n.text:000000000040afe6\n.text:000000000040afe8\n.text:000000000040afed\n.text:000000000040aff3\n.text:000000000040aff5\n.text:000000000040aff7\n.text:000000000040aff9\n.text:000000000040affe\n.text:000000000040b000\n.text:000000000040b005\n.text:000000000040b007\n.text:000000000040b00b\n.text:000000000040b00c\n.text:000000000040b00e\n.text:000000000040b010\n.text:000000000040b012\n.text:000000000040b014\n.text:000000000040b015\n'
p790
tp791
sS'pthread_mutex_lock'
p792
(S'\n__stdcall pthread_mutex_lock(pthread_mutex_t * __mutex)\n'
p793
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint pthread_mutex_lock(pthread_mutex_t *__mutex)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_pthread_mutex_lock_0061a3c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p794
S'JMP qword ptr [0x0061a3c0]\n'
p795
S'ff 25 9a 78 21 00\n'
p796
S'.plt:0000000000402b20\n'
p797
tp798
sS'c_isgraph'
p799
(S'\n__stdcall c_isgraph()\n'
p800
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p801
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p802
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p803
S'.text:0000000000410e20\n.text:0000000000410e23\n.text:0000000000410e26\n.text:0000000000410e29\n'
p804
tp805
sS'write'
p806
(S'\n__stdcall write(int __fd, void * __buf, size_t __n)\n'
p807
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t write(int __fd,void *__buf,size_t __n)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_write_0061a0c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p808
S'JMP qword ptr [0x0061a0c0]\n'
p809
S'ff 25 9a 7b 21 00\n'
p810
S'.plt:0000000000402520\n'
p811
tp812
sS'hash_get_next'
p813
(S'\n__stdcall hash_get_next(Hash_table * table, void * entry)\n'
p814
V\u000avoid * hash_get_next(Hash_table *table,void *entry)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  phVar3 = phVar2;\u000a  while( true ) {\u000a    phVar1 = phVar3->next;\u000a    if ((phVar3->data == entry) && (phVar1 != (hash_entry *)0x0)) break;\u000a    phVar3 = phVar1;\u000a    if (phVar1 == (hash_entry *)0x0) {\u000a      do {\u000a        phVar2 = phVar2 + 1;\u000a        if (table->bucket_limit <= phVar2) {\u000a          return (void *)0x0;\u000a        }\u000a      } while (phVar2->data == (void *)0x0);\u000a      return phVar2->data;\u000a    }\u000a  }\u000a  return phVar1->data;\u000a}\u000a\u000a
p815
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x0040b350\nMOV RCX,RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,RCX\nMOV RCX,qword ptr [RSI + 0x8]\nTEST RCX,RCX\nSETZ DL\nCMP qword ptr [RSI],RBX\nJNZ 0x0040b3f6\nTEST DL,DL\nJZ 0x0040b423\nTEST RCX,RCX\nJNZ 0x0040b3e0\nMOV RDX,qword ptr [R14 + 0x8]\nADD RAX,0x10\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP RAX,RDX\nJNC 0x0040b428\nMOV RCX,qword ptr [RAX]\nADD RAX,0x10\nTEST RCX,RCX\nJZ 0x0040b410\nJMP 0x0040b42a\nMOV RCX,qword ptr [RCX]\nJMP 0x0040b42a\nXOR ECX,ECX\nMOV RAX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p816
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 81 ff ff ff\n48 89 c1\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ce\n48 8b 4e 08\n48 85 c9\n0f 94 c2\n48 39 1e\n75 04\n84 d2\n74 2d\n48 85 c9\n75 e5\n49 8b 56 08\n48 83 c0 10\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 d0\n73 13\n48 8b 08\n48 83 c0 10\n48 85 c9\n74 ef\neb 07\n48 8b 09\neb 02\n31 c9\n48 89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p817
S'.text:000000000040b3c0\n.text:000000000040b3c2\n.text:000000000040b3c3\n.text:000000000040b3c4\n.text:000000000040b3c7\n.text:000000000040b3ca\n.text:000000000040b3cf\n.text:000000000040b3d2\n.text:000000000040b3e0\n.text:000000000040b3e3\n.text:000000000040b3e7\n.text:000000000040b3ea\n.text:000000000040b3ed\n.text:000000000040b3f0\n.text:000000000040b3f2\n.text:000000000040b3f4\n.text:000000000040b3f6\n.text:000000000040b3f9\n.text:000000000040b3fb\n.text:000000000040b3ff\n.text:000000000040b403\n.text:000000000040b410\n.text:000000000040b413\n.text:000000000040b415\n.text:000000000040b418\n.text:000000000040b41c\n.text:000000000040b41f\n.text:000000000040b421\n.text:000000000040b423\n.text:000000000040b426\n.text:000000000040b428\n.text:000000000040b42a\n.text:000000000040b42d\n.text:000000000040b431\n.text:000000000040b432\n.text:000000000040b434\n'
p818
tp819
sS'order'
p820
(S'\n__stdcall order()\n'
p821
V\u000aint order(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  uint uVar2;\u000a  uint uVar3;\u000a  ulong in_RDI;\u000a  \u000a  _Var1 = c_isdigit();\u000a  uVar2 = 0;\u000a  if (_Var1 == false) {\u000a    _Var1 = c_isalpha();\u000a    uVar3 = (uint)(in_RDI & 0xffffffff);\u000a    uVar2 = uVar3;\u000a    if (_Var1 == false) {\u000a      uVar2 = 0xffffffff;\u000a      if ((char)(in_RDI & 0xffffffff) != '~') {\u000a        uVar2 = uVar3 | 0x100;\u000a      }\u000a    }\u000a  }\u000a  return (int)uVar2;\u000a}\u000a\u000a
p822
S'PUSH RBX\nMOV EBX,EDI\nCALL 0x00410e10\nMOV ECX,EAX\nXOR EAX,EAX\nTEST CL,CL\nJNZ 0x0040b050\nMOV EDI,EBX\nCALL 0x00410dc0\nTEST AL,AL\nMOV EAX,EBX\nJNZ 0x0040b050\nMOV ECX,EBX\nOR ECX,0x100\nCMP BL,0x7e\nMOV EAX,0xffffffff\nCMOVNZ EAX,ECX\nPOP RBX\nRET\n'
p823
S'53\n89 fb\ne8 e8 5d 00 00\n89 c1\n31 c0\n84 c9\n75 20\n89 df\ne8 89 5d 00 00\n84 c0\n89 d8\n75 13\n89 d9\n81 c9 00 01 00 00\n80 fb 7e\nb8 ff ff ff ff\n0f 45 c1\n5b\nc3\n'
p824
S'.text:000000000040b020\n.text:000000000040b021\n.text:000000000040b023\n.text:000000000040b028\n.text:000000000040b02a\n.text:000000000040b02c\n.text:000000000040b02e\n.text:000000000040b030\n.text:000000000040b032\n.text:000000000040b037\n.text:000000000040b039\n.text:000000000040b03b\n.text:000000000040b03d\n.text:000000000040b03f\n.text:000000000040b045\n.text:000000000040b048\n.text:000000000040b04d\n.text:000000000040b050\n.text:000000000040b051\n'
p825
tp826
sS'quotearg_buffer_restyled'
p827
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p828
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040cc6c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040cc6c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040cc6c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040cc6c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040cc6c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040cc6c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040cc6c_caseD_7;\u000aswitchD_0040cc6c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040cc6c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040cc6c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_0040d730;\u000aLAB_0040ce50:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_0040d739:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_0040d748:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040ce5b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040ce9f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040ce9f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_0040d748;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_0040d675;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x0040d580;\u000a    }\u000a    goto LAB_0040d748;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040d6aa;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_0040d748;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_0040d6d9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_0040d198;\u000a  case '\u005ca':\u000a    goto joined_r0x0040d088;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x0040d088;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_0040ceb6_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x0040d088;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x0040d088;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_0040ceb6_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x0040d088:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040d5ee;\u000a    }\u000a    goto LAB_0040d748;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_0040d748;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_0040d748;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_0040d748;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_0040d748;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_0040d748;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_0040ceb6_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_0040d646;\u000a      goto joined_r0x0040d638;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x0040d141:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x0040d638;\u000a      goto LAB_0040d646;\u000a    }\u000a    goto LAB_0040d748;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_0040d748;\u000a  }\u000a  goto joined_r0x0040d580;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040d6aa:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_0040d6d9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_0040d6d9:\u000a  if (1 < uVar10) {\u000aLAB_0040d1b6:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_0040d272;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x0040d141;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_0040d272:\u000a        if (bVar6 != 0) goto LAB_0040d748;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_0040d198:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_0040d1b6;\u000ajoined_r0x0040d580:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x0040d580:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_0040d5a7;\u000aLAB_0040d5e0:\u000a    if (bVar22) goto LAB_0040d5e5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_0040d5e0;\u000aLAB_0040d5a7:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_0040d5e5:\u000a      if (bVar6 != 0) goto LAB_0040d748;\u000aLAB_0040d5ee:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x0040d638;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_0040d646:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x0040d638:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_0040d675:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_0040ce50;\u000aLAB_0040d730:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_0040d739;\u000a  goto LAB_0040ce5b;\u000a}\u000a\u000a
p829
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004025c0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x0040d815\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x414550 + RAX*0x8]\nMOV EDI,0x414a74\nMOV ESI,R15D\nCALL 0x0040dec0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x41360f\nMOV ESI,R15D\nCALL 0x0040dec0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040cccd\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x0040ccd0\nNOP\nCMP R12,RSI\nJNC 0x0040ccbe\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x0040ccb0\nJMP 0x0040ccd0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004025d0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040cd9c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040cd9c\nMOV ECX,0x413e78\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x0040cd96\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x0040cd37\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x0040cd64\nTEST RSI,RSI\nJZ 0x0040cd51\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x41360f\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x0040cd72\nMOV ECX,0x41360f\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040cd9c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040d7ec\nMOV ECX,0x413e78\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x0040d730\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x0040d739\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040ce9f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040ce9a\nCMP R11,-0x1\nJNZ 0x0040ce9a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004025d0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x0040cef0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040d14c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x4145a8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x0040d748\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x0040d5a0\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x0040d5a7\nJMP 0x0040d5e0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00402710\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040cf3d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x0040cea1\nJMP 0x0040d748\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x0040cea1\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040cecb\nCMP EBX,0x2\nJNZ 0x0040cecb\nTEST R13,R13\nJNZ 0x0040cecb\nJMP 0x0040d748\nCMP R11,-0x1\nJZ 0x0040d323\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x0040d343\nJMP 0x0040cecb\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040d354\nTEST R8B,R8B\nJNZ 0x0040d748\nCMP EBX,0x2\nJNZ 0x0040cff8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x0040cff8\nCMP R12,RSI\nJNC 0x0040cfd3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040cfe2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040cff1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x0040d002\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x0040d4c8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x0040d4c8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x0040d4c8\nCMP RCX,RSI\nJNC 0x0040d03c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040d04b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040ced6\nJMP 0x0040d5a0\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040cec9\nJMP 0x0040d0aa\nMOV DL,0x74\nJMP 0x0040d092\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040cec9\nJMP 0x0040d0aa\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040cec9\nJMP 0x0040d0aa\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x0040d748\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040cec9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040d5ee\nJMP 0x0040d748\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x0040cec9\nTEST R8B,R8B\nJNZ 0x0040d748\nCMP R12,RSI\nJNC 0x0040d0da\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040d0e9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040d0f8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x0040cec9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040d4db\nCMP EBX,0x2\nJNZ 0x0040cec9\nTEST R8B,R8B\nJZ 0x0040cec9\nJMP 0x0040d748\nCMP EBX,0x2\nJNZ 0x0040d374\nTEST R8B,R8B\nJNZ 0x0040d748\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x0040d646\nJMP 0x0040d669\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x0040d395\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00402b30\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x0040d588\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x0040d588\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x0040d272\nJMP 0x0040d240\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x0040d229\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x0040d226\nCMP R12,RSI\nJNC 0x0040d20b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040d21a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x0040d260\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x0040d260\nTEST BPL,0x1\nJZ 0x0040d303\nCMP R12,RSI\nJNC 0x0040d254\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x0040d303\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x0040d240\nTEST R8B,R8B\nJNZ 0x0040d748\nCMP EBX,0x2\nJNZ 0x0040d2ba\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040d2ba\nCMP R12,RSI\nJNC 0x0040d292\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040d2a1\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040d2b0\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x0040d2c4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040d2db\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040d2f5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x0040d1f0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x0040d646\nJMP 0x0040d669\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040cecb\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040cecb\nJMP 0x0040d748\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x0040d675\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040ced6\nJMP 0x0040d5a0\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x0040d092\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x0040d646\nJMP 0x0040d669\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x0040d3b7\nMOV RDI,R10\nCALL 0x004025d0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00402600\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040d68f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x0040d687\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x0040d696\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040d47e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x0040d476\nBT RDI,RDX\nJC 0x0040d7e2\nINC RCX\nCMP RCX,R14\nJC 0x0040d460\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00402ad0\nTEST EAX,EAX\nJNZ 0x0040d493\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00402ab0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x0040d3d5\nJMP 0x0040d6d9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040ced6\nJMP 0x0040d5a0\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x0040cec9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x0040cec9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x0040cec9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040cecb\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x0040d712\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x0040d748\nCMP R12,RSI\nJNC 0x0040d53e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x0040d551\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040d560\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040d56f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040ced6\nJMP 0x0040d5a0\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040ced6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x0040d5e0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x0040d5e5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x0040d640\nJMP 0x0040d5e5\nTEST BPL,BPL\nJZ 0x0040d640\nTEST R8B,R8B\nJNZ 0x0040d748\nCMP EBX,0x2\nJNZ 0x0040d628\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x0040d628\nCMP R12,RSI\nJNC 0x0040d603\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040d612\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x0040d621\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x0040d632\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x0040d672\nJMP 0x0040d66e\nTEST DIL,0x1\nJZ 0x0040d669\nAND AL,0x1\nJNZ 0x0040d669\nCMP R12,RSI\nJNC 0x0040d654\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040d663\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x0040d672\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x0040d730\nJMP 0x0040ce50\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x0040d6d4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040d6cc\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x0040d708\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040d6aa\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x0040d6d9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x0040d198\nJMP 0x0040d1b6\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x0040d6d9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x0040ced6\nJMP 0x0040d5a0\nCMP R13,R11\nJNZ 0x0040ce5b\nTEST R8B,R8B\nJZ 0x0040d7a2\nCMP EBX,0x2\nJNZ 0x0040d7a2\nTEST R12,R12\nJNZ 0x0040d7a2\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x0040cbe0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x0040d7d6\nTEST R8B,R8B\nJNZ 0x0040d7d6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x0040d7d6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x0040d7c9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x0040d7c0\nCMP R12,RSI\nJNC 0x0040d78d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040d78d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x0040d748\nTEST RSI,RSI\nJZ 0x0040d7f9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x413e78\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040cd9c\nCALL 0x00402420\n'
p830
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 b2 59 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 50 45 41 00\nbf 74 4a 41 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 0f 36 41 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 f3 58 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 78 3e 41 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 0f 36 41 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 0f 36 41 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 78 3e 41 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 53 57 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd a8 45 41 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 07 58 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 c7 59 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 21 52 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 03 52 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 49 56 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 02 56 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 78 3e 41 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 06 4c ff ff\n'
p831
S'.text:000000000040cbe0\n.text:000000000040cbe1\n.text:000000000040cbe3\n.text:000000000040cbe5\n.text:000000000040cbe7\n.text:000000000040cbe9\n.text:000000000040cbea\n.text:000000000040cbf1\n.text:000000000040cbf4\n.text:000000000040cbf7\n.text:000000000040cbfa\n.text:000000000040cbff\n.text:000000000040cc04\n.text:000000000040cc09\n.text:000000000040cc0e\n.text:000000000040cc16\n.text:000000000040cc1a\n.text:000000000040cc20\n.text:000000000040cc28\n.text:000000000040cc2d\n.text:000000000040cc35\n.text:000000000040cc3a\n.text:000000000040cc3e\n.text:000000000040cc40\n.text:000000000040cc43\n.text:000000000040cc46\n.text:000000000040cc49\n.text:000000000040cc4e\n.text:000000000040cc51\n.text:000000000040cc54\n.text:000000000040cc57\n.text:000000000040cc5a\n.text:000000000040cc5c\n.text:000000000040cc5f\n.text:000000000040cc64\n.text:000000000040cc67\n.text:000000000040cc6c\n.text:000000000040cc73\n.text:000000000040cc78\n.text:000000000040cc7b\n.text:000000000040cc80\n.text:000000000040cc85\n.text:000000000040cc8a\n.text:000000000040cc8d\n.text:000000000040cc92\n.text:000000000040cc97\n.text:000000000040cc9c\n.text:000000000040cc9e\n.text:000000000040cca0\n.text:000000000040cca5\n.text:000000000040cca7\n.text:000000000040ccaa\n.text:000000000040ccac\n.text:000000000040ccae\n.text:000000000040ccb0\n.text:000000000040ccb3\n.text:000000000040ccb5\n.text:000000000040ccba\n.text:000000000040ccbe\n.text:000000000040ccc4\n.text:000000000040ccc7\n.text:000000000040ccc9\n.text:000000000040cccb\n.text:000000000040cccd\n.text:000000000040ccd0\n.text:000000000040ccd5\n.text:000000000040ccd8\n.text:000000000040ccdd\n.text:000000000040cce2\n.text:000000000040cce5\n.text:000000000040cce8\n.text:000000000040cceb\n.text:000000000040ccee\n.text:000000000040ccf3\n.text:000000000040ccf6\n.text:000000000040ccf9\n.text:000000000040ccfe\n.text:000000000040cd01\n.text:000000000040cd03\n.text:000000000040cd06\n.text:000000000040cd08\n.text:000000000040cd0a\n.text:000000000040cd0d\n.text:000000000040cd12\n.text:000000000040cd17\n.text:000000000040cd1c\n.text:000000000040cd1f\n.text:000000000040cd25\n.text:000000000040cd27\n.text:000000000040cd2a\n.text:000000000040cd2d\n.text:000000000040cd30\n.text:000000000040cd32\n.text:000000000040cd34\n.text:000000000040cd37\n.text:000000000040cd3a\n.text:000000000040cd3f\n.text:000000000040cd42\n.text:000000000040cd44\n.text:000000000040cd47\n.text:000000000040cd49\n.text:000000000040cd4e\n.text:000000000040cd51\n.text:000000000040cd56\n.text:000000000040cd5c\n.text:000000000040cd62\n.text:000000000040cd64\n.text:000000000040cd69\n.text:000000000040cd6f\n.text:000000000040cd72\n.text:000000000040cd75\n.text:000000000040cd78\n.text:000000000040cd7a\n.text:000000000040cd7f\n.text:000000000040cd82\n.text:000000000040cd88\n.text:000000000040cd8d\n.text:000000000040cd93\n.text:000000000040cd96\n.text:000000000040cd99\n.text:000000000040cd9c\n.text:000000000040cda4\n.text:000000000040cda6\n.text:000000000040cda8\n.text:000000000040cdab\n.text:000000000040cdaf\n.text:000000000040cdb1\n.text:000000000040cdb4\n.text:000000000040cdb8\n.text:000000000040cdba\n.text:000000000040cdbd\n.text:000000000040cdc0\n.text:000000000040cdc3\n.text:000000000040cdc5\n.text:000000000040cdc9\n.text:000000000040cdcb\n.text:000000000040cdcf\n.text:000000000040cdd2\n.text:000000000040cdd5\n.text:000000000040cdd8\n.text:000000000040cdda\n.text:000000000040cdde\n.text:000000000040cde7\n.text:000000000040cdea\n.text:000000000040cdec\n.text:000000000040cdf0\n.text:000000000040cdf2\n.text:000000000040cdf6\n.text:000000000040cdf8\n.text:000000000040cdfb\n.text:000000000040cdff\n.text:000000000040ce01\n.text:000000000040ce04\n.text:000000000040ce08\n.text:000000000040ce0d\n.text:000000000040ce10\n.text:000000000040ce14\n.text:000000000040ce1c\n.text:000000000040ce1f\n.text:000000000040ce22\n.text:000000000040ce24\n.text:000000000040ce28\n.text:000000000040ce2b\n.text:000000000040ce2d\n.text:000000000040ce32\n.text:000000000040ce36\n.text:000000000040ce3b\n.text:000000000040ce40\n.text:000000000040ce44\n.text:000000000040ce4a\n.text:000000000040ce50\n.text:000000000040ce55\n.text:000000000040ce5b\n.text:000000000040ce60\n.text:000000000040ce62\n.text:000000000040ce67\n.text:000000000040ce6b\n.text:000000000040ce6d\n.text:000000000040ce71\n.text:000000000040ce73\n.text:000000000040ce75\n.text:000000000040ce78\n.text:000000000040ce7d\n.text:000000000040ce7f\n.text:000000000040ce84\n.text:000000000040ce89\n.text:000000000040ce8d\n.text:000000000040ce92\n.text:000000000040ce97\n.text:000000000040ce9a\n.text:000000000040ce9d\n.text:000000000040ce9f\n.text:000000000040cea1\n.text:000000000040cea6\n.text:000000000040ceaa\n.text:000000000040ceb0\n.text:000000000040ceb2\n.text:000000000040ceb4\n.text:000000000040ceb6\n.text:000000000040cebe\n.text:000000000040cec3\n.text:000000000040cec9\n.text:000000000040cecb\n.text:000000000040ced0\n.text:000000000040ced6\n.text:000000000040cedf\n.text:000000000040cee5\n.text:000000000040cef0\n.text:000000000040cef2\n.text:000000000040cef5\n.text:000000000040cef9\n.text:000000000040cf01\n.text:000000000040cf04\n.text:000000000040cf09\n.text:000000000040cf0b\n.text:000000000040cf0e\n.text:000000000040cf10\n.text:000000000040cf15\n.text:000000000040cf18\n.text:000000000040cf1d\n.text:000000000040cf20\n.text:000000000040cf25\n.text:000000000040cf29\n.text:000000000040cf2e\n.text:000000000040cf30\n.text:000000000040cf32\n.text:000000000040cf38\n.text:000000000040cf3d\n.text:000000000040cf42\n.text:000000000040cf45\n.text:000000000040cf4a\n.text:000000000040cf4e\n.text:000000000040cf53\n.text:000000000040cf58\n.text:000000000040cf5a\n.text:000000000040cf5c\n.text:000000000040cf61\n.text:000000000040cf63\n.text:000000000040cf66\n.text:000000000040cf6c\n.text:000000000040cf6f\n.text:000000000040cf75\n.text:000000000040cf78\n.text:000000000040cf7e\n.text:000000000040cf83\n.text:000000000040cf87\n.text:000000000040cf8d\n.text:000000000040cf90\n.text:000000000040cf93\n.text:000000000040cf97\n.text:000000000040cf9a\n.text:000000000040cf9c\n.text:000000000040cf9f\n.text:000000000040cfa5\n.text:000000000040cfaa\n.text:000000000040cfaf\n.text:000000000040cfb5\n.text:000000000040cfb8\n.text:000000000040cfbe\n.text:000000000040cfc1\n.text:000000000040cfc3\n.text:000000000040cfc5\n.text:000000000040cfc7\n.text:000000000040cfc9\n.text:000000000040cfcc\n.text:000000000040cfce\n.text:000000000040cfd3\n.text:000000000040cfd8\n.text:000000000040cfdb\n.text:000000000040cfdd\n.text:000000000040cfe2\n.text:000000000040cfe7\n.text:000000000040cfea\n.text:000000000040cfec\n.text:000000000040cff1\n.text:000000000040cff5\n.text:000000000040cff8\n.text:000000000040cffb\n.text:000000000040cffd\n.text:000000000040d002\n.text:000000000040d007\n.text:000000000040d009\n.text:000000000040d00c\n.text:000000000040d00f\n.text:000000000040d015\n.text:000000000040d019\n.text:000000000040d01c\n.text:000000000040d022\n.text:000000000040d026\n.text:000000000040d029\n.text:000000000040d02c\n.text:000000000040d032\n.text:000000000040d035\n.text:000000000040d037\n.text:000000000040d03c\n.text:000000000040d041\n.text:000000000040d044\n.text:000000000040d046\n.text:000000000040d04b\n.text:000000000040d04f\n.text:000000000040d054\n.text:000000000040d05a\n.text:000000000040d05f\n.text:000000000040d061\n.text:000000000040d066\n.text:000000000040d06c\n.text:000000000040d06e\n.text:000000000040d070\n.text:000000000040d072\n.text:000000000040d074\n.text:000000000040d079\n.text:000000000040d07f\n.text:000000000040d081\n.text:000000000040d083\n.text:000000000040d088\n.text:000000000040d08e\n.text:000000000040d090\n.text:000000000040d092\n.text:000000000040d097\n.text:000000000040d099\n.text:000000000040d09f\n.text:000000000040d0a4\n.text:000000000040d0aa\n.text:000000000040d0ad\n.text:000000000040d0b0\n.text:000000000040d0b6\n.text:000000000040d0bb\n.text:000000000040d0be\n.text:000000000040d0c1\n.text:000000000040d0c7\n.text:000000000040d0ca\n.text:000000000040d0d0\n.text:000000000040d0d3\n.text:000000000040d0d5\n.text:000000000040d0da\n.text:000000000040d0df\n.text:000000000040d0e2\n.text:000000000040d0e4\n.text:000000000040d0e9\n.text:000000000040d0ee\n.text:000000000040d0f1\n.text:000000000040d0f3\n.text:000000000040d0f8\n.text:000000000040d0fc\n.text:000000000040d0fe\n.text:000000000040d103\n.text:000000000040d106\n.text:000000000040d109\n.text:000000000040d10f\n.text:000000000040d112\n.text:000000000040d118\n.text:000000000040d11b\n.text:000000000040d121\n.text:000000000040d126\n.text:000000000040d129\n.text:000000000040d12f\n.text:000000000040d132\n.text:000000000040d138\n.text:000000000040d13b\n.text:000000000040d13d\n.text:000000000040d141\n.text:000000000040d147\n.text:000000000040d14c\n.text:000000000040d150\n.text:000000000040d159\n.text:000000000040d15f\n.text:000000000040d164\n.text:000000000040d169\n.text:000000000040d16e\n.text:000000000040d171\n.text:000000000040d176\n.text:000000000040d179\n.text:000000000040d17c\n.text:000000000040d181\n.text:000000000040d186\n.text:000000000040d18a\n.text:000000000040d18f\n.text:000000000040d194\n.text:000000000040d198\n.text:000000000040d19a\n.text:000000000040d19f\n.text:000000000040d1a5\n.text:000000000040d1a8\n.text:000000000040d1aa\n.text:000000000040d1ad\n.text:000000000040d1b0\n.text:000000000040d1b6\n.text:000000000040d1bb\n.text:000000000040d1be\n.text:000000000040d1c1\n.text:000000000040d1c4\n.text:000000000040d1c7\n.text:000000000040d1c9\n.text:000000000040d1cd\n.text:000000000040d1cf\n.text:000000000040d1d4\n.text:000000000040d1d9\n.text:000000000040d1df\n.text:000000000040d1f0\n.text:000000000040d1f5\n.text:000000000040d1f7\n.text:000000000040d1fa\n.text:000000000040d1fc\n.text:000000000040d1ff\n.text:000000000040d201\n.text:000000000040d204\n.text:000000000040d206\n.text:000000000040d20b\n.text:000000000040d210\n.text:000000000040d213\n.text:000000000040d215\n.text:000000000040d21a\n.text:000000000040d21e\n.text:000000000040d226\n.text:000000000040d229\n.text:000000000040d22c\n.text:000000000040d22e\n.text:000000000040d232\n.text:000000000040d240\n.text:000000000040d244\n.text:000000000040d24a\n.text:000000000040d24d\n.text:000000000040d24f\n.text:000000000040d254\n.text:000000000040d257\n.text:000000000040d259\n.text:000000000040d260\n.text:000000000040d263\n.text:000000000040d268\n.text:000000000040d26b\n.text:000000000040d270\n.text:000000000040d272\n.text:000000000040d275\n.text:000000000040d27b\n.text:000000000040d27e\n.text:000000000040d280\n.text:000000000040d284\n.text:000000000040d286\n.text:000000000040d288\n.text:000000000040d28b\n.text:000000000040d28d\n.text:000000000040d292\n.text:000000000040d297\n.text:000000000040d29a\n.text:000000000040d29c\n.text:000000000040d2a1\n.text:000000000040d2a6\n.text:000000000040d2a9\n.text:000000000040d2ab\n.text:000000000040d2b0\n.text:000000000040d2b4\n.text:000000000040d2b6\n.text:000000000040d2ba\n.text:000000000040d2bd\n.text:000000000040d2bf\n.text:000000000040d2c4\n.text:000000000040d2c9\n.text:000000000040d2cc\n.text:000000000040d2ce\n.text:000000000040d2d1\n.text:000000000040d2d4\n.text:000000000040d2d7\n.text:000000000040d2db\n.text:000000000040d2e0\n.text:000000000040d2e3\n.text:000000000040d2e5\n.text:000000000040d2e8\n.text:000000000040d2eb\n.text:000000000040d2ee\n.text:000000000040d2f1\n.text:000000000040d2f5\n.text:000000000040d2f9\n.text:000000000040d2fd\n.text:000000000040d301\n.text:000000000040d303\n.text:000000000040d307\n.text:000000000040d30a\n.text:000000000040d310\n.text:000000000040d314\n.text:000000000040d318\n.text:000000000040d31e\n.text:000000000040d323\n.text:000000000040d326\n.text:000000000040d329\n.text:000000000040d32e\n.text:000000000040d331\n.text:000000000040d333\n.text:000000000040d336\n.text:000000000040d33d\n.text:000000000040d343\n.text:000000000040d345\n.text:000000000040d349\n.text:000000000040d34f\n.text:000000000040d354\n.text:000000000040d359\n.text:000000000040d35f\n.text:000000000040d362\n.text:000000000040d364\n.text:000000000040d369\n.text:000000000040d36f\n.text:000000000040d374\n.text:000000000040d376\n.text:000000000040d37b\n.text:000000000040d381\n.text:000000000040d383\n.text:000000000040d386\n.text:000000000040d38a\n.text:000000000040d390\n.text:000000000040d395\n.text:000000000040d3a1\n.text:000000000040d3a5\n.text:000000000040d3a7\n.text:000000000040d3aa\n.text:000000000040d3af\n.text:000000000040d3b4\n.text:000000000040d3b7\n.text:000000000040d3bb\n.text:000000000040d3c0\n.text:000000000040d3c2\n.text:000000000040d3c6\n.text:000000000040d3c8\n.text:000000000040d3d0\n.text:000000000040d3d5\n.text:000000000040d3da\n.text:000000000040d3de\n.text:000000000040d3e2\n.text:000000000040d3ea\n.text:000000000040d3ed\n.text:000000000040d3f2\n.text:000000000040d3f5\n.text:000000000040d3f8\n.text:000000000040d3fd\n.text:000000000040d400\n.text:000000000040d403\n.text:000000000040d409\n.text:000000000040d40d\n.text:000000000040d417\n.text:000000000040d41d\n.text:000000000040d421\n.text:000000000040d426\n.text:000000000040d42c\n.text:000000000040d430\n.text:000000000040d433\n.text:000000000040d437\n.text:000000000040d439\n.text:000000000040d43e\n.text:000000000040d443\n.text:000000000040d447\n.text:000000000040d449\n.text:000000000040d44e\n.text:000000000040d453\n.text:000000000040d457\n.text:000000000040d45c\n.text:000000000040d460\n.text:000000000040d464\n.text:000000000040d467\n.text:000000000040d46a\n.text:000000000040d46c\n.text:000000000040d470\n.text:000000000040d476\n.text:000000000040d479\n.text:000000000040d47c\n.text:000000000040d47e\n.text:000000000040d482\n.text:000000000040d487\n.text:000000000040d489\n.text:000000000040d48b\n.text:000000000040d493\n.text:000000000040d498\n.text:000000000040d49b\n.text:000000000040d4a3\n.text:000000000040d4a6\n.text:000000000040d4a9\n.text:000000000040d4ae\n.text:000000000040d4b1\n.text:000000000040d4b3\n.text:000000000040d4b8\n.text:000000000040d4bd\n.text:000000000040d4c3\n.text:000000000040d4c8\n.text:000000000040d4cb\n.text:000000000040d4d0\n.text:000000000040d4d6\n.text:000000000040d4db\n.text:000000000040d4e0\n.text:000000000040d4e6\n.text:000000000040d4ea\n.text:000000000040d4ed\n.text:000000000040d4f3\n.text:000000000040d4f9\n.text:000000000040d4ff\n.text:000000000040d504\n.text:000000000040d506\n.text:000000000040d509\n.text:000000000040d50f\n.text:000000000040d513\n.text:000000000040d515\n.text:000000000040d51f\n.text:000000000040d523\n.text:000000000040d529\n.text:000000000040d52c\n.text:000000000040d52e\n.text:000000000040d534\n.text:000000000040d537\n.text:000000000040d539\n.text:000000000040d53e\n.text:000000000040d543\n.text:000000000040d546\n.text:000000000040d54a\n.text:000000000040d54c\n.text:000000000040d551\n.text:000000000040d556\n.text:000000000040d559\n.text:000000000040d55b\n.text:000000000040d560\n.text:000000000040d565\n.text:000000000040d568\n.text:000000000040d56a\n.text:000000000040d56f\n.text:000000000040d573\n.text:000000000040d575\n.text:000000000040d578\n.text:000000000040d57b\n.text:000000000040d580\n.text:000000000040d586\n.text:000000000040d588\n.text:000000000040d58d\n.text:000000000040d592\n.text:000000000040d598\n.text:000000000040d5a0\n.text:000000000040d5a5\n.text:000000000040d5a7\n.text:000000000040d5ac\n.text:000000000040d5af\n.text:000000000040d5b1\n.text:000000000040d5b4\n.text:000000000040d5b6\n.text:000000000040d5b9\n.text:000000000040d5bc\n.text:000000000040d5bf\n.text:000000000040d5c1\n.text:000000000040d5c9\n.text:000000000040d5cc\n.text:000000000040d5ce\n.text:000000000040d5d0\n.text:000000000040d5e0\n.text:000000000040d5e3\n.text:000000000040d5e5\n.text:000000000040d5e8\n.text:000000000040d5ee\n.text:000000000040d5f1\n.text:000000000040d5f3\n.text:000000000040d5f5\n.text:000000000040d5f7\n.text:000000000040d5f9\n.text:000000000040d5fc\n.text:000000000040d5fe\n.text:000000000040d603\n.text:000000000040d608\n.text:000000000040d60b\n.text:000000000040d60d\n.text:000000000040d612\n.text:000000000040d617\n.text:000000000040d61a\n.text:000000000040d61c\n.text:000000000040d621\n.text:000000000040d625\n.text:000000000040d628\n.text:000000000040d62b\n.text:000000000040d62d\n.text:000000000040d632\n.text:000000000040d635\n.text:000000000040d638\n.text:000000000040d63a\n.text:000000000040d640\n.text:000000000040d644\n.text:000000000040d646\n.text:000000000040d648\n.text:000000000040d64a\n.text:000000000040d64d\n.text:000000000040d64f\n.text:000000000040d654\n.text:000000000040d659\n.text:000000000040d65c\n.text:000000000040d65e\n.text:000000000040d663\n.text:000000000040d667\n.text:000000000040d669\n.text:000000000040d66c\n.text:000000000040d66e\n.text:000000000040d672\n.text:000000000040d675\n.text:000000000040d678\n.text:000000000040d67c\n.text:000000000040d682\n.text:000000000040d687\n.text:000000000040d68f\n.text:000000000040d694\n.text:000000000040d696\n.text:000000000040d69e\n.text:000000000040d6a3\n.text:000000000040d6a5\n.text:000000000040d6aa\n.text:000000000040d6af\n.text:000000000040d6b3\n.text:000000000040d6b5\n.text:000000000040d6ba\n.text:000000000040d6bd\n.text:000000000040d6c0\n.text:000000000040d6c2\n.text:000000000040d6ca\n.text:000000000040d6cc\n.text:000000000040d6d4\n.text:000000000040d6d9\n.text:000000000040d6dd\n.text:000000000040d6e2\n.text:000000000040d6e7\n.text:000000000040d6eb\n.text:000000000040d6f0\n.text:000000000040d6f5\n.text:000000000040d6f9\n.text:000000000040d6fd\n.text:000000000040d703\n.text:000000000040d708\n.text:000000000040d710\n.text:000000000040d712\n.text:000000000040d714\n.text:000000000040d718\n.text:000000000040d71d\n.text:000000000040d723\n.text:000000000040d730\n.text:000000000040d733\n.text:000000000040d739\n.text:000000000040d73c\n.text:000000000040d73e\n.text:000000000040d741\n.text:000000000040d743\n.text:000000000040d746\n.text:000000000040d748\n.text:000000000040d750\n.text:000000000040d756\n.text:000000000040d75a\n.text:000000000040d75d\n.text:000000000040d761\n.text:000000000040d766\n.text:000000000040d76a\n.text:000000000040d76e\n.text:000000000040d771\n.text:000000000040d774\n.text:000000000040d777\n.text:000000000040d77b\n.text:000000000040d77f\n.text:000000000040d781\n.text:000000000040d786\n.text:000000000040d78a\n.text:000000000040d78d\n.text:000000000040d790\n.text:000000000040d797\n.text:000000000040d798\n.text:000000000040d79a\n.text:000000000040d79c\n.text:000000000040d79e\n.text:000000000040d7a0\n.text:000000000040d7a1\n.text:000000000040d7a2\n.text:000000000040d7aa\n.text:000000000040d7ad\n.text:000000000040d7af\n.text:000000000040d7b2\n.text:000000000040d7b4\n.text:000000000040d7b6\n.text:000000000040d7b8\n.text:000000000040d7ba\n.text:000000000040d7bd\n.text:000000000040d7c0\n.text:000000000040d7c3\n.text:000000000040d7c5\n.text:000000000040d7c9\n.text:000000000040d7cc\n.text:000000000040d7cf\n.text:000000000040d7d2\n.text:000000000040d7d4\n.text:000000000040d7d6\n.text:000000000040d7d9\n.text:000000000040d7db\n.text:000000000040d7e0\n.text:000000000040d7e2\n.text:000000000040d7e7\n.text:000000000040d7ec\n.text:000000000040d7ef\n.text:000000000040d7f1\n.text:000000000040d7f6\n.text:000000000040d7f9\n.text:000000000040d7fe\n.text:000000000040d801\n.text:000000000040d807\n.text:000000000040d80d\n.text:000000000040d810\n.text:000000000040d815\n'
p832
tp833
sS'key_to_opts'
p834
(S'\n__stdcall key_to_opts(keyfield * key, char * opts)\n'
p835
V\u000avoid key_to_opts(keyfield *key,char *opts)\u000a\u000a{\u000a  if ((key->skipsblanks != false) || (key->skipeblanks != false)) {\u000a    *opts = 'b';\u000a    opts = opts + 1;\u000a  }\u000a  if (key->ignore == nondictionary) {\u000a    *opts = 'd';\u000a    opts = opts + 1;\u000a  }\u000a  if (key->translate != (char *)0x0) {\u000a    *opts = 'f';\u000a    opts = opts + 1;\u000a  }\u000a  if (key->general_numeric != false) {\u000a    *opts = 'g';\u000a    opts = opts + 1;\u000a  }\u000a  if (key->human_numeric != false) {\u000a    *opts = 'h';\u000a    opts = opts + 1;\u000a  }\u000a  if (key->ignore == nonprinting) {\u000a    *opts = 'i';\u000a    opts = opts + 1;\u000a  }\u000a  if (key->month != false) {\u000a    *opts = 'M';\u000a    opts = opts + 1;\u000a  }\u000a  if (key->numeric != false) {\u000a    *opts = 'n';\u000a    opts = opts + 1;\u000a  }\u000a  if (key->random != false) {\u000a    *opts = 'R';\u000a    opts = opts + 1;\u000a  }\u000a  if (key->reverse != false) {\u000a    *opts = 'r';\u000a    opts = opts + 1;\u000a  }\u000a  if (key->version != false) {\u000a    *opts = 'V';\u000a    opts = opts + 1;\u000a  }\u000a  *opts = 0;\u000a  return;\u000a}\u000a\u000a
p836
S'CMP byte ptr [RDI + 0x30],0x0\nJNZ 0x00405dcc\nCMP byte ptr [RDI + 0x31],0x0\nJZ 0x00405dd2\nMOV byte ptr [RSI],0x62\nINC RSI\nMOV EAX,0x61a870\nCMP qword ptr [RDI + 0x20],RAX\nJNZ 0x00405de3\nMOV byte ptr [RSI],0x64\nINC RSI\nCMP qword ptr [RDI + 0x28],0x0\nJZ 0x00405df0\nMOV byte ptr [RSI],0x66\nINC RSI\nCMP byte ptr [RDI + 0x34],0x0\nJZ 0x00405dfc\nMOV byte ptr [RSI],0x67\nINC RSI\nCMP byte ptr [RDI + 0x35],0x0\nJZ 0x00405e08\nMOV byte ptr [RSI],0x68\nINC RSI\nMOV EAX,0x61a770\nCMP qword ptr [RDI + 0x20],RAX\nJNZ 0x00405e19\nMOV byte ptr [RSI],0x69\nINC RSI\nCMP byte ptr [RDI + 0x36],0x0\nJZ 0x00405e25\nMOV byte ptr [RSI],0x4d\nINC RSI\nCMP byte ptr [RDI + 0x32],0x0\nJZ 0x00405e31\nMOV byte ptr [RSI],0x6e\nINC RSI\nCMP byte ptr [RDI + 0x33],0x0\nJZ 0x00405e3d\nMOV byte ptr [RSI],0x52\nINC RSI\nCMP byte ptr [RDI + 0x37],0x0\nJZ 0x00405e49\nMOV byte ptr [RSI],0x72\nINC RSI\nCMP byte ptr [RDI + 0x38],0x0\nJZ 0x00405e55\nMOV byte ptr [RSI],0x56\nINC RSI\nMOV byte ptr [RSI],0x0\nRET\n'
p837
S'80 7f 30 00\n75 06\n80 7f 31 00\n74 06\nc6 06 62\n48 ff c6\nb8 70 a8 61 00\n48 39 47 20\n75 06\nc6 06 64\n48 ff c6\n48 83 7f 28 00\n74 06\nc6 06 66\n48 ff c6\n80 7f 34 00\n74 06\nc6 06 67\n48 ff c6\n80 7f 35 00\n74 06\nc6 06 68\n48 ff c6\nb8 70 a7 61 00\n48 39 47 20\n75 06\nc6 06 69\n48 ff c6\n80 7f 36 00\n74 06\nc6 06 4d\n48 ff c6\n80 7f 32 00\n74 06\nc6 06 6e\n48 ff c6\n80 7f 33 00\n74 06\nc6 06 52\n48 ff c6\n80 7f 37 00\n74 06\nc6 06 72\n48 ff c6\n80 7f 38 00\n74 06\nc6 06 56\n48 ff c6\nc6 06 00\nc3\n'
p838
S'.text:0000000000405dc0\n.text:0000000000405dc4\n.text:0000000000405dc6\n.text:0000000000405dca\n.text:0000000000405dcc\n.text:0000000000405dcf\n.text:0000000000405dd2\n.text:0000000000405dd7\n.text:0000000000405ddb\n.text:0000000000405ddd\n.text:0000000000405de0\n.text:0000000000405de3\n.text:0000000000405de8\n.text:0000000000405dea\n.text:0000000000405ded\n.text:0000000000405df0\n.text:0000000000405df4\n.text:0000000000405df6\n.text:0000000000405df9\n.text:0000000000405dfc\n.text:0000000000405e00\n.text:0000000000405e02\n.text:0000000000405e05\n.text:0000000000405e08\n.text:0000000000405e0d\n.text:0000000000405e11\n.text:0000000000405e13\n.text:0000000000405e16\n.text:0000000000405e19\n.text:0000000000405e1d\n.text:0000000000405e1f\n.text:0000000000405e22\n.text:0000000000405e25\n.text:0000000000405e29\n.text:0000000000405e2b\n.text:0000000000405e2e\n.text:0000000000405e31\n.text:0000000000405e35\n.text:0000000000405e37\n.text:0000000000405e3a\n.text:0000000000405e3d\n.text:0000000000405e41\n.text:0000000000405e43\n.text:0000000000405e46\n.text:0000000000405e49\n.text:0000000000405e4d\n.text:0000000000405e4f\n.text:0000000000405e52\n.text:0000000000405e55\n.text:0000000000405e58\n'
p839
tp840
sS'rotr_sz'
p841
(S'\n__stdcall rotr_sz(size_t x)\n'
p842
V\u000asize_t rotr_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p843
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p844
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p845
S'.text:0000000000410d00\n.text:0000000000410d02\n.text:0000000000410d05\n.text:0000000000410d08\n'
p846
tp847
sS'getgid'
p848
(S'\n__stdcall getgid()\n'
p849
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__gid_t getgid(void)\u000a\u000a{\u000a  __gid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getgid_0061a230)();\u000a  return _Var1;\u000a}\u000a\u000a
p850
S'JMP qword ptr [0x0061a230]\n'
p851
S'ff 25 2a 7a 21 00\n'
p852
S'.plt:0000000000402800\n'
p853
tp854
sS'set_quoting_style'
p855
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p856
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p857
S'TEST RDI,RDI\nMOV EAX,0x61ab80\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p858
S'48 85 ff\nb8 80 ab 61 00\n48 0f 45 c7\n89 30\nc3\n'
p859
S'.text:000000000040cac0\n.text:000000000040cac3\n.text:000000000040cac8\n.text:000000000040cacc\n.text:000000000040cace\n'
p860
tp861
sS'cs_enter'
p862
(S'\n__stdcall cs_enter(cs_status * __return_storage_ptr__)\n'
p863
V\u000acs_status * cs_enter(cs_status *__return_storage_ptr__)\u000a\u000a{\u000a  int iVar1;\u000a  bool local_90 [8];\u000a  undefined local_88 [128];\u000a  \u000a  iVar1 = sigprocmask(0,(sigset_t *)&caught_signals,(sigset_t *)local_88);\u000a  local_90[0] = iVar1 == 0;\u000a  memcpy(__return_storage_ptr__,local_90,0x88);\u000a  return __return_storage_ptr__;\u000a}\u000a\u000a
p864
S'PUSH RBX\nSUB RSP,0x90\nMOV RBX,RDI\nLEA RDX,[RSP + 0x10]\nXOR EDI,EDI\nMOV ESI,0x61a5c0\nCALL 0x004023e0\nTEST EAX,EAX\nSETZ byte ptr [RSP + 0x8]\nLEA RSI,[RSP + 0x8]\nMOV EDX,0x88\nMOV RDI,RBX\nCALL 0x004027c0\nMOV RAX,RBX\nADD RSP,0x90\nPOP RBX\nRET\n'
p865
S'53\n48 81 ec 90 00 00 00\n48 89 fb\n48 8d 54 24 10\n31 ff\nbe c0 a5 61 00\ne8 94 c6 ff ff\n85 c0\n0f 94 44 24 08\n48 8d 74 24 08\nba 88 00 00 00\n48 89 df\ne8 5b ca ff ff\n48 89 d8\n48 81 c4 90 00 00 00\n5b\nc3\n'
p866
S'.text:0000000000405d30\n.text:0000000000405d31\n.text:0000000000405d38\n.text:0000000000405d3b\n.text:0000000000405d40\n.text:0000000000405d42\n.text:0000000000405d47\n.text:0000000000405d4c\n.text:0000000000405d4e\n.text:0000000000405d53\n.text:0000000000405d58\n.text:0000000000405d5d\n.text:0000000000405d60\n.text:0000000000405d65\n.text:0000000000405d68\n.text:0000000000405d6f\n.text:0000000000405d70\n'
p867
tp868
sS'hash_get_entries'
p869
(S'\n__stdcall hash_get_entries(Hash_table * table, void * * buffer, size_t buffer_size)\n'
p870
V\u000asize_t hash_get_entries(Hash_table *table,void **buffer,size_t buffer_size)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  ulong uVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = table->bucket;\u000a  if (table->bucket_limit <= phVar3) {\u000a    return 0;\u000a  }\u000a  uVar2 = 0;\u000a  do {\u000a    phVar1 = phVar3;\u000a    if (phVar3->data != (void *)0x0) {\u000a      while (phVar1 != (hash_entry *)0x0) {\u000a        if (buffer_size <= uVar2) {\u000a          return uVar2;\u000a        }\u000a        buffer[uVar2] = phVar1->data;\u000a        uVar2 = uVar2 + 1;\u000a        phVar1 = phVar1->next;\u000a      }\u000a    }\u000a    phVar3 = phVar3 + 1;\u000a  } while (phVar3 < table->bucket_limit);\u000a  return uVar2;\u000a}\u000a\u000a
p871
S'MOV R8,qword ptr [RDI]\nCMP R8,qword ptr [RDI + 0x8]\nJNC 0x0040b483\nXOR EAX,EAX\nCMP qword ptr [R8],0x0\nJZ 0x0040b478\nTEST R8,R8\nJZ 0x0040b478\nMOV R9,R8\nNOP dword ptr [RAX]\nCMP RAX,RDX\nJNC 0x0040b482\nMOV RCX,qword ptr [R9]\nMOV qword ptr [RSI + RAX*0x8],RCX\nINC RAX\nMOV R9,qword ptr [R9 + 0x8]\nTEST R9,R9\nJNZ 0x0040b460\nADD R8,0x10\nCMP R8,qword ptr [RDI + 0x8]\nJC 0x0040b44b\nRET\nXOR EAX,EAX\nRET\n'
p872
S'4c 8b 07\n4c 3b 47 08\n73 3a\n31 c0\n49 83 38 00\n74 27\n4d 85 c0\n74 22\n4d 89 c1\n0f 1f 80 00 00 00 00\n48 39 d0\n73 1d\n49 8b 09\n48 89 0c c6\n48 ff c0\n4d 8b 49 08\n4d 85 c9\n75 e8\n49 83 c0 10\n4c 3b 47 08\n72 c9\nc3\n31 c0\nc3\n'
p873
S'.text:000000000040b440\n.text:000000000040b443\n.text:000000000040b447\n.text:000000000040b449\n.text:000000000040b44b\n.text:000000000040b44f\n.text:000000000040b451\n.text:000000000040b454\n.text:000000000040b456\n.text:000000000040b459\n.text:000000000040b460\n.text:000000000040b463\n.text:000000000040b465\n.text:000000000040b468\n.text:000000000040b46c\n.text:000000000040b46f\n.text:000000000040b473\n.text:000000000040b476\n.text:000000000040b478\n.text:000000000040b47c\n.text:000000000040b480\n.text:000000000040b482\n.text:000000000040b483\n.text:000000000040b485\n'
p874
tp875
sS'async_safe_die'
p876
(S'\n__stdcall async_safe_die(char * errstr)\n'
p877
V\u000avoid async_safe_die(char *errstr)\u000a\u000a{\u000a  size_t __n;\u000a  char *__s;\u000a  char *__s_00;\u000a  char errbuf [12];\u000a  \u000a  __n = strlen(__s_00);\u000a  write(2,__s_00,__n);\u000a  if ((int)(char *)((ulong)errstr & 0xffffffff) != 0) {\u000a    __s = inttostr((char *)((ulong)errstr & 0xffffffff));\u000a    write(2,": errno ",8);\u000a    __n = strlen(__s);\u000a    write(2,__s,__n);\u000a  }\u000a  write(2,\u000a          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a          + 0xc9,1);\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(2);\u000a}\u000a\u000a
p878
S'PUSH RBP\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,RSI\nMOV EBP,EDI\nMOV RDI,RBX\nCALL 0x004025d0\nMOV EDI,0x2\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00402520\nTEST EBP,EBP\nJZ 0x00408a12\nLEA RSI,[RSP + 0xc]\nMOV EDI,EBP\nCALL 0x0040c330\nMOV RBX,RAX\nMOV EDI,0x2\nMOV ESI,0x413fd8\nMOV EDX,0x8\nCALL 0x00402520\nMOV RDI,RBX\nCALL 0x004025d0\nMOV EDI,0x2\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00402520\nMOV EDI,0x2\nMOV ESI,0x414bf8\nMOV EDX,0x1\nCALL 0x00402520\nMOV EDI,0x2\nCALL 0x00402460\n'
p879
S'55\n53\n48 83 ec 18\n48 89 f3\n89 fd\n48 89 df\ne8 0d 9c ff ff\nbf 02 00 00 00\n48 89 de\n48 89 c2\ne8 4d 9b ff ff\n85 ed\n74 3b\n48 8d 74 24 0c\n89 ef\ne8 4d 39 00 00\n48 89 c3\nbf 02 00 00 00\nbe d8 3f 41 00\nba 08 00 00 00\ne8 26 9b ff ff\n48 89 df\ne8 ce 9b ff ff\nbf 02 00 00 00\n48 89 de\n48 89 c2\ne8 0e 9b ff ff\nbf 02 00 00 00\nbe f8 4b 41 00\nba 01 00 00 00\ne8 fa 9a ff ff\nbf 02 00 00 00\ne8 30 9a ff ff\n'
p880
S'.text:00000000004089b0\n.text:00000000004089b1\n.text:00000000004089b2\n.text:00000000004089b6\n.text:00000000004089b9\n.text:00000000004089bb\n.text:00000000004089be\n.text:00000000004089c3\n.text:00000000004089c8\n.text:00000000004089cb\n.text:00000000004089ce\n.text:00000000004089d3\n.text:00000000004089d5\n.text:00000000004089d7\n.text:00000000004089dc\n.text:00000000004089de\n.text:00000000004089e3\n.text:00000000004089e6\n.text:00000000004089eb\n.text:00000000004089f0\n.text:00000000004089f5\n.text:00000000004089fa\n.text:00000000004089fd\n.text:0000000000408a02\n.text:0000000000408a07\n.text:0000000000408a0a\n.text:0000000000408a0d\n.text:0000000000408a12\n.text:0000000000408a17\n.text:0000000000408a1c\n.text:0000000000408a21\n.text:0000000000408a26\n.text:0000000000408a2b\n'
p881
tp882
sS'create_temp_file'
p883
(S'\n__stdcall create_temp_file(int * pfd)\n'
p884
V\u000atempnode * create_temp_file(int *pfd)\u000a\u000a{\u000a  uint uVar1;\u000a  size_t temp_dir_index;\u000a  int iVar2;\u000a  size_t __n;\u000a  size_t sVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  char *__s;\u000a  long lVar6;\u000a  tempnode *__ptr;\u000a  char in_SIL;\u000a  cs_status *pcVar7;\u000a  undefined8 *puVar8;\u000a  byte bVar9;\u000a  cs_status cs;\u000a  cs_status status;\u000a  char local_bc;\u000a  cs_status local_b8;\u000a  \u000a  bVar9 = 0;\u000a  __s = temp_dirs[temp_dir_index];\u000a  local_bc = in_SIL;\u000a  __n = strlen(__s);\u000a  __ptr = (tempnode *)xmalloc(__n + 0x19);\u000a  memcpy(__ptr->name,__s,__n);\u000a  *(undefined8 *)(__ptr->name + __n) = 0x58585874726f732f;\u000a  *(undefined4 *)((long)&__ptr[1].next + __n + 5) = 0x585858;\u000a  __ptr->next = (tempnode *)0x0;\u000a  sVar3 = temp_dir_index + 1;\u000a  temp_dir_index = 0;\u000a  if (sVar3 != temp_dir_count) {\u000a    temp_dir_index = sVar3;\u000a  }\u000a  cs_enter(&local_b8);\u000a  iVar2 = mkstemp_safer(__ptr->name);\u000a  if (-1 < iVar2) {\u000a    *temptail = __ptr;\u000a    temptail = (tempnode **)__ptr;\u000a  }\u000a  puVar4 = (uint *)__errno_location();\u000a  uVar1 = *puVar4;\u000a  lVar6 = 0x11;\u000a  pcVar7 = &local_b8;\u000a  puVar8 = (undefined8 *)&stack0xfffffffffffffeb8;\u000a  while (lVar6 != 0) {\u000a    lVar6 = lVar6 + -1;\u000a    *puVar8 = *(undefined8 *)pcVar7;\u000a    pcVar7 = (cs_status *)(&pcVar7->valid + ((ulong)bVar9 * 0x1ffffffffffffffe + 1) * 8);\u000a    puVar8 = puVar8 + (ulong)bVar9 * 0x1ffffffffffffffe + 1;\u000a  }\u000a  cs_leave(status);\u000a  *puVar4 = uVar1;\u000a  if (iVar2 < 0) {\u000a    if ((uVar1 != 0x18) || (local_bc == 0)) {\u000a      uVar5 = dcgettext(0,"cannot create temporary file in %s",5);\u000a      __s = quotearg_style((char *)0x4);\u000a      error(2,(ulong)uVar1,uVar5,__s);\u000a    }\u000a    free(__ptr);\u000a    __ptr = (tempnode *)0x0;\u000a  }\u000a  *pfd = iVar2;\u000a  return __ptr;\u000a}\u000a\u000a
p885
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x118\nMOV dword ptr [0x8c + RSP],ESI\nMOV R14,RDI\nMOV RAX,qword ptr [0x0061aa80]\nMOV RCX,qword ptr [0x0061ab38]\nMOV R15,qword ptr [RAX + RCX*0x8]\nMOV RDI,R15\nCALL 0x004025d0\nMOV RBP,RAX\nLEA RDI,[RBP + 0x19]\nCALL 0x0040fb80\nMOV RBX,RAX\nLEA R13,[RBX + 0xd]\nMOV RDI,R13\nMOV RSI,R15\nMOV RDX,RBP\nCALL 0x004027c0\nMOV RAX,0x58585874726f732f\nMOV qword ptr [RBX + RBP*0x1 + 0xd],RAX\nMOV dword ptr [RBX + RBP*0x1 + 0x15],0x585858\nMOV qword ptr [RBX],0x0\nMOV RAX,qword ptr [0x0061ab38]\nINC RAX\nXOR ECX,ECX\nCMP RAX,qword ptr [0x0061a660]\nCMOVNZ RCX,RAX\nMOV qword ptr [0x0061ab38],RCX\nLEA RDI,[0x90 + RSP]\nCALL 0x00405d30\nMOV RDI,R13\nCALL 0x0040f190\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00408dae\nMOV RAX,qword ptr [0x0061a4c8]\nMOV qword ptr [RAX],RBX\nMOV qword ptr [0x0061a4c8],RBX\nCALL 0x00402430\nMOV R12,RAX\nMOV R13D,dword ptr [R12]\nLEA RSI,[0x90 + RSP]\nMOV ECX,0x11\nMOV RDI,RSP\nMOVSQ.REP RDI,RSI\nCALL 0x00405d80\nMOV dword ptr [R12],R13D\nTEST EBP,EBP\nJNS 0x00408e2a\nCMP R13D,0x18\nJNZ 0x00408dea\nCMP byte ptr [0x8c + RSP],0x0\nJNZ 0x00408e20\nXOR EDI,EDI\nMOV ESI,0x414049\nMOV EDX,0x5\nCALL 0x004025b0\nMOV R12,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x0040dc90\nMOV RCX,RAX\nMOV EDI,0x2\nXOR EAX,EAX\nMOV ESI,R13D\nMOV RDX,R12\nCALL 0x00402960\nMOV RDI,RBX\nCALL 0x00402400\nXOR EBX,EBX\nMOV dword ptr [R14],EBP\nMOV RAX,RBX\nADD RSP,0x118\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p886
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 18 01 00 00\n89 b4 24 8c 00 00 00\n49 89 fe\n48 8b 05 6e 1d 21 00\n48 8b 0d 1f 1e 21 00\n4c 8b 3c c8\n4c 89 ff\ne8 ab 98 ff ff\n48 89 c5\n48 8d 7d 19\ne8 4f 6e 00 00\n48 89 c3\n4c 8d 6b 0d\n4c 89 ef\n4c 89 fe\n48 89 ea\ne8 7a 9a ff ff\n48 b8 2f 73 6f 72 74 58 58 58\n48 89 44 2b 0d\nc7 44 2b 15 58 58 58 00\n48 c7 03 00 00 00 00\n48 8b 05 cd 1d 21 00\n48 ff c0\n31 c9\n48 3b 05 e9 18 21 00\n48 0f 45 c8\n48 89 0d b6 1d 21 00\n48 8d bc 24 90 00 00 00\ne8 a1 cf ff ff\n4c 89 ef\ne8 f9 63 00 00\n89 c5\n85 ed\n78 11\n48 8b 05 24 17 21 00\n48 89 18\n48 89 1d 1a 17 21 00\ne8 7d 96 ff ff\n49 89 c4\n45 8b 2c 24\n48 8d b4 24 90 00 00 00\nb9 11 00 00 00\n48 89 e7\nf3 48 a5\ne8 ae cf ff ff\n45 89 2c 24\n85 ed\n79 50\n41 83 fd 18\n75 0a\n80 bc 24 8c 00 00 00 00\n75 36\n31 ff\nbe 49 40 41 00\nba 05 00 00 00\ne8 b5 97 ff ff\n49 89 c4\nbf 04 00 00 00\n4c 89 fe\ne8 85 4e 00 00\n48 89 c1\nbf 02 00 00 00\n31 c0\n44 89 ee\n4c 89 e2\ne8 40 9b ff ff\n48 89 df\ne8 d8 95 ff ff\n31 db\n41 89 2e\n48 89 d8\n48 81 c4 18 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p887
S'.text:0000000000408cf0\n.text:0000000000408cf1\n.text:0000000000408cf3\n.text:0000000000408cf5\n.text:0000000000408cf7\n.text:0000000000408cf9\n.text:0000000000408cfa\n.text:0000000000408d01\n.text:0000000000408d08\n.text:0000000000408d0b\n.text:0000000000408d12\n.text:0000000000408d19\n.text:0000000000408d1d\n.text:0000000000408d20\n.text:0000000000408d25\n.text:0000000000408d28\n.text:0000000000408d2c\n.text:0000000000408d31\n.text:0000000000408d34\n.text:0000000000408d38\n.text:0000000000408d3b\n.text:0000000000408d3e\n.text:0000000000408d41\n.text:0000000000408d46\n.text:0000000000408d50\n.text:0000000000408d55\n.text:0000000000408d5d\n.text:0000000000408d64\n.text:0000000000408d6b\n.text:0000000000408d6e\n.text:0000000000408d70\n.text:0000000000408d77\n.text:0000000000408d7b\n.text:0000000000408d82\n.text:0000000000408d8a\n.text:0000000000408d8f\n.text:0000000000408d92\n.text:0000000000408d97\n.text:0000000000408d99\n.text:0000000000408d9b\n.text:0000000000408d9d\n.text:0000000000408da4\n.text:0000000000408da7\n.text:0000000000408dae\n.text:0000000000408db3\n.text:0000000000408db6\n.text:0000000000408dba\n.text:0000000000408dc2\n.text:0000000000408dc7\n.text:0000000000408dca\n.text:0000000000408dcd\n.text:0000000000408dd2\n.text:0000000000408dd6\n.text:0000000000408dd8\n.text:0000000000408dda\n.text:0000000000408dde\n.text:0000000000408de0\n.text:0000000000408de8\n.text:0000000000408dea\n.text:0000000000408dec\n.text:0000000000408df1\n.text:0000000000408df6\n.text:0000000000408dfb\n.text:0000000000408dfe\n.text:0000000000408e03\n.text:0000000000408e06\n.text:0000000000408e0b\n.text:0000000000408e0e\n.text:0000000000408e13\n.text:0000000000408e15\n.text:0000000000408e18\n.text:0000000000408e1b\n.text:0000000000408e20\n.text:0000000000408e23\n.text:0000000000408e28\n.text:0000000000408e2a\n.text:0000000000408e2d\n.text:0000000000408e30\n.text:0000000000408e37\n.text:0000000000408e38\n.text:0000000000408e3a\n.text:0000000000408e3c\n.text:0000000000408e3e\n.text:0000000000408e40\n.text:0000000000408e41\n'
p888
tp889
sS'xmemdup'
p890
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p891
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p892
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x0040fb80\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004027c0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p893
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 dc 2a ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p894
S'.text:000000000040fcc0\n.text:000000000040fcc2\n.text:000000000040fcc4\n.text:000000000040fcc5\n.text:000000000040fcc8\n.text:000000000040fccb\n.text:000000000040fcce\n.text:000000000040fcd3\n.text:000000000040fcd6\n.text:000000000040fcd9\n.text:000000000040fcdc\n.text:000000000040fcdf\n.text:000000000040fce4\n.text:000000000040fce7\n.text:000000000040fce8\n.text:000000000040fcea\n.text:000000000040fcec\n'
p895
tp896
sS'readisaac'
p897
(S'\n__stdcall readisaac(isaac * isaac, void * p, size_t size)\n'
p898
V\u000avoid readisaac(isaac *isaac,void *p,size_t size)\u000a\u000a{\u000a  isaac_state *s;\u000a  isaac_word *result;\u000a  ulong __n;\u000a  isaac_word *__src;\u000a  ulong uVar1;\u000a  size_t sVar2;\u000a  \u000a  __n = isaac->buffered;\u000a  result = (isaac_word *)isaac->data;\u000a  __src = (isaac_word *)((long)result + (0x800 - __n));\u000a  uVar1 = __n;\u000a  if (__n < size) {\u000a    s = &isaac->state;\u000a    uVar1 = 0x800;\u000a    do {\u000a      memcpy(p,__src,__n);\u000a      p = (void *)((long)p + __n);\u000a      size = size - __n;\u000a      if (((ulong)p & 7) == 0) {\u000a        sVar2 = 0;\u000a        goto LAB_0040e6c0;\u000a      }\u000a      isaac_refill(s,result);\u000a      __n = 0x800;\u000a      __src = result;\u000a    } while (0x800 < size);\u000a  }\u000aLAB_0040e68a:\u000a  memcpy(p,__src,size);\u000a  sVar2 = uVar1 - size;\u000a  goto LAB_0040e69b;\u000a  while( true ) {\u000a    isaac_refill(s,(isaac_word *)p);\u000a    p = (isaac_word *)p + 0x100;\u000a    size = size + 0xfffff800;\u000a    if (size == 0) break;\u000aLAB_0040e6c0:\u000a    if (size < 0x800) {\u000a      isaac_refill(s,result);\u000a      __src = result;\u000a      uVar1 = 0x800;\u000a      goto LAB_0040e68a;\u000a    }\u000a  }\u000aLAB_0040e69b:\u000a  isaac->buffered = sVar2;\u000a  return;\u000a}\u000a\u000a
p899
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV RBX,RSI\nMOV RBP,qword ptr [RDI]\nLEA R12,[0x820 + RDI]\nMOV RSI,R12\nSUB RSI,RBP\nADD RSI,0x800\nCMP RBP,R15\nMOV qword ptr [RSP],RDI\nJNC 0x0040e684\nLEA R13,[RDI + 0x8]\nMOV R14D,0x800\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,RBX\nMOV RDX,RBP\nCALL 0x004027c0\nADD RBX,RBP\nSUB R15,RBP\nTEST BL,0x7\nJZ 0x0040e6b1\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x0040e780\nCMP R15,0x800\nMOV RSI,R12\nMOV EBP,0x800\nJA 0x0040e650\nJMP 0x0040e68a\nMOV R14,RBP\nMOV R12,RSI\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x004027c0\nSUB R14,R15\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RAX],R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR R14D,R14D\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP R15,0x800\nJC 0x0040e6e6\nMOV RDI,R13\nMOV RSI,RBX\nCALL 0x0040e780\nADD RBX,0x800\nADD R15,0xfffff800\nJNZ 0x0040e6c0\nJMP 0x0040e69b\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x0040e780\nMOV R14D,0x800\nJMP 0x0040e68a\n'
p900
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d7\n48 89 f3\n48 8b 2f\n4c 8d a7 20 08 00 00\n4c 89 e6\n48 29 ee\n48 81 c6 00 08 00 00\n4c 39 fd\n48 89 3c 24\n73 43\n4c 8d 6f 08\n41 be 00 08 00 00\n0f 1f 44 00 00\n48 89 df\n48 89 ea\ne8 65 41 ff ff\n48 01 eb\n49 29 ef\nf6 c3 07\n74 4b\n4c 89 ef\n4c 89 e6\ne8 0f 01 00 00\n49 81 ff 00 08 00 00\n4c 89 e6\nbd 00 08 00 00\n77 ce\neb 06\n49 89 ee\n49 89 f4\n48 89 df\n4c 89 e6\n4c 89 fa\ne8 28 41 ff ff\n4d 29 fe\n48 8b 04 24\n4c 89 30\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 31 f6\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 81 ff 00 08 00 00\n72 1d\n4c 89 ef\n48 89 de\ne8 ac 00 00 00\n48 81 c3 00 08 00 00\n49 81 c7 00 f8 ff ff\n75 dc\neb b5\n4c 89 ef\n4c 89 e6\ne8 8f 00 00 00\n41 be 00 08 00 00\neb 91\n'
p901
S'.text:000000000040e610\n.text:000000000040e611\n.text:000000000040e613\n.text:000000000040e615\n.text:000000000040e617\n.text:000000000040e619\n.text:000000000040e61a\n.text:000000000040e61b\n.text:000000000040e61e\n.text:000000000040e621\n.text:000000000040e624\n.text:000000000040e62b\n.text:000000000040e62e\n.text:000000000040e631\n.text:000000000040e638\n.text:000000000040e63b\n.text:000000000040e63f\n.text:000000000040e641\n.text:000000000040e645\n.text:000000000040e64b\n.text:000000000040e650\n.text:000000000040e653\n.text:000000000040e656\n.text:000000000040e65b\n.text:000000000040e65e\n.text:000000000040e661\n.text:000000000040e664\n.text:000000000040e666\n.text:000000000040e669\n.text:000000000040e66c\n.text:000000000040e671\n.text:000000000040e678\n.text:000000000040e67b\n.text:000000000040e680\n.text:000000000040e682\n.text:000000000040e684\n.text:000000000040e687\n.text:000000000040e68a\n.text:000000000040e68d\n.text:000000000040e690\n.text:000000000040e693\n.text:000000000040e698\n.text:000000000040e69b\n.text:000000000040e69f\n.text:000000000040e6a2\n.text:000000000040e6a6\n.text:000000000040e6a7\n.text:000000000040e6a9\n.text:000000000040e6ab\n.text:000000000040e6ad\n.text:000000000040e6af\n.text:000000000040e6b0\n.text:000000000040e6b1\n.text:000000000040e6b4\n.text:000000000040e6c0\n.text:000000000040e6c7\n.text:000000000040e6c9\n.text:000000000040e6cc\n.text:000000000040e6cf\n.text:000000000040e6d4\n.text:000000000040e6db\n.text:000000000040e6e2\n.text:000000000040e6e4\n.text:000000000040e6e6\n.text:000000000040e6e9\n.text:000000000040e6ec\n.text:000000000040e6f1\n.text:000000000040e6f7\n'
p902
tp903
sS'get_quoting_style'
p904
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p905
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p906
S'TEST RDI,RDI\nMOV EAX,0x61ab80\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p907
S'48 85 ff\nb8 80 ab 61 00\n48 0f 45 c7\n8b 00\nc3\n'
p908
S'.text:000000000040cab0\n.text:000000000040cab3\n.text:000000000040cab8\n.text:000000000040cabc\n.text:000000000040cabe\n'
p909
tp910
sS'fread_unlocked'
p911
(S'\n__stdcall fread_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p912
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fread_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fread_unlocked_0061a0d0)();\u000a  return sVar1;\u000a}\u000a\u000a
p913
S'JMP qword ptr [0x0061a0d0]\n'
p914
S'ff 25 8a 7b 21 00\n'
p915
S'.plt:0000000000402540\n'
p916
tp917
sS'exit'
p918
(S'\n__stdcall exit(int __status)\n'
p919
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0061a358)();\u000a  return;\u000a}\u000a\u000a
p920
S'JMP qword ptr [0x0061a358]\n'
p921
S'ff 25 02 79 21 00\n'
p922
S'.plt:0000000000402a50\n'
p923
tp924
sS'safe_hasher'
p925
(S'\n__stdcall safe_hasher(Hash_table * table, void * key)\n'
p926
V\u000ahash_entry * safe_hasher(Hash_table *table,void *key)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*table->hasher)(key,table->n_buckets);\u000a  if (sVar1 < table->n_buckets) {\u000a    return table->bucket + sVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p927
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL qword ptr [RBX + 0x30]\nCMP RAX,qword ptr [RBX + 0x10]\nJNC 0x0040b370\nSHL RAX,0x4\nADD RAX,qword ptr [RBX]\nPOP RBX\nRET\nCALL 0x00402420\n'
p928
S'53\n48 89 fb\n48 8b 43 10\n48 89 f7\n48 89 c6\nff 53 30\n48 3b 43 10\n73 09\n48 c1 e0 04\n48 03 03\n5b\nc3\ne8 ab 70 ff ff\n'
p929
S'.text:000000000040b350\n.text:000000000040b351\n.text:000000000040b354\n.text:000000000040b358\n.text:000000000040b35b\n.text:000000000040b35e\n.text:000000000040b361\n.text:000000000040b365\n.text:000000000040b367\n.text:000000000040b36b\n.text:000000000040b36e\n.text:000000000040b36f\n.text:000000000040b370\n'
p930
tp931
sS'hash_delete'
p932
(S'\n__stdcall hash_delete(Hash_table * table, void * entry)\n'
p933
V\u000avoid * hash_delete(Hash_table *table,void *entry)\u000a\u000a{\u000a  ulong uVar1;\u000a  Hash_tuning *pHVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *__ptr;\u000a  _Bool _Var4;\u000a  void *pvVar5;\u000a  ulong uVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_20;\u000a  \u000a  pvVar5 = hash_find_entry(table,entry,&local_20);\u000a  if (pvVar5 == (void *)0x0) {\u000a    pvVar5 = (void *)0x0;\u000a  }\u000a  else {\u000a    table->n_entries = table->n_entries - 1;\u000a    if (local_20->data == (void *)0x0) {\u000a      uVar6 = table->n_buckets_used - 1;\u000a      table->n_buckets_used = uVar6;\u000a      if ((long)uVar6 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar6;\u000a      }\u000a      uVar6 = table->n_buckets;\u000a      if ((long)uVar6 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar6;\u000a      }\u000a      if (fVar7 < fVar8 * table->tuning->shrink_threshold) {\u000a        check_tuning(table);\u000a        uVar6 = table->n_buckets;\u000a        uVar1 = table->n_buckets_used;\u000a        if ((long)uVar1 < 0) {\u000a          fVar7 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a          fVar7 = fVar7 + fVar7;\u000a        }\u000a        else {\u000a          fVar7 = (float)uVar1;\u000a        }\u000a        pHVar2 = table->tuning;\u000a        if ((long)uVar6 < 0) {\u000a          fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a          fVar8 = fVar8 + fVar8;\u000a        }\u000a        else {\u000a          fVar8 = (float)uVar6;\u000a        }\u000a        if (fVar7 < pHVar2->shrink_threshold * fVar8) {\u000a          fVar8 = fVar8 * pHVar2->shrink_factor;\u000a          if (pHVar2->is_n_buckets == false) {\u000a            fVar8 = fVar8 * pHVar2->growth_threshold;\u000a          }\u000a          candidate = (long)fVar8;\u000a          if (DAT_0041415c <= fVar8) {\u000a            candidate = (long)(fVar8 - DAT_0041415c) ^ 0x8000000000000000;\u000a          }\u000a          _Var4 = hash_rehash(table,candidate);\u000a          if (_Var4 == false) {\u000a            __ptr = table->free_entry_list;\u000a            while (__ptr != (hash_entry *)0x0) {\u000a              phVar3 = __ptr->next;\u000a              free(__ptr);\u000a              __ptr = phVar3;\u000a            }\u000a            table->free_entry_list = (hash_entry *)0x0;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return pvVar5;\u000a}\u000a\u000a
p934
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDI\nLEA RDX,[RSP + 0x8]\nMOV ECX,0x1\nCALL 0x0040bd40\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040beaa\nDEC qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x8]\nCMP qword ptr [RAX],0x0\nJNZ 0x0040bfd9\nMOV RAX,qword ptr [R15 + 0x18]\nDEC RAX\nMOV qword ptr [R15 + 0x18],RAX\nJS 0x0040beb2\nCVTSI2SS XMM0,RAX\nJMP 0x0040bec7\nXOR R14D,R14D\nJMP 0x0040bfd9\nMOV RCX,RAX\nSHR RCX,1\nAND EAX,0x1\nOR RAX,RCX\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x10]\nMOV RAX,qword ptr [R15 + 0x28]\nTEST RCX,RCX\nJS 0x0040bedb\nCVTSI2SS XMM1,RCX\nJMP 0x0040bef0\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RAX]\nUCOMISS XMM1,XMM0\nJBE 0x0040bfd9\nMOV RDI,R15\nCALL 0x0040b670\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x0040bf1c\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nJMP 0x0040bf34\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x0040bf47\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x0040bf5f\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVSS XMM2,dword ptr [RCX]\nMULSS XMM2,XMM0\nUCOMISS XMM2,XMM1\nJBE 0x0040bfd9\nMULSS XMM0,dword ptr [RCX + 0x4]\nCMP byte ptr [RCX + 0x10],0x0\nJNZ 0x0040bf7c\nMULSS XMM0,dword ptr [RCX + 0x8]\nMOVSS XMM1,dword ptr [0x0041415c]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x0040b910\nTEST AL,AL\nJNZ 0x0040bfd9\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x0040bfd1\nNOP\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00402400\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x0040bfc0\nMOV qword ptr [R15 + 0x48],0x0\nMOV RAX,R14\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p935
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 ff\n48 8d 54 24 08\nb9 01 00 00 00\ne8 c5 fe ff ff\n49 89 c6\n4d 85 f6\n74 27\n49 ff 4f 20\n48 8b 44 24 08\n48 83 38 00\n0f 85 43 01 00 00\n49 8b 47 18\n48 ff c8\n49 89 47 18\n78 0f\nf3 48 0f 2a c0\neb 1d\n45 31 f6\ne9 27 01 00 00\n48 89 c1\n48 d1 e9\n83 e0 01\n48 09 c8\nf3 48 0f 2a c0\nf3 0f 58 c0\n49 8b 4f 10\n49 8b 47 28\n48 85 c9\n78 07\nf3 48 0f 2a c9\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c9\nf3 0f 58 c9\nf3 0f 59 08\n0f 2e c8\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b f7 ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 0a\n0f 57 c9\nf3 48 0f 2a c9\neb 18\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\n0f 57 c9\nf3 48 0f 2a c9\nf3 0f 58 c9\n49 8b 4f 28\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\nf3 0f 10 11\nf3 0f 59 d0\n0f 2e d1\n76 6d\nf3 0f 59 41 04\n80 79 10 00\n75 05\nf3 0f 59 41 08\nf3 0f 10 0d d8 81 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 5f f9 ff ff\n84 c0\n75 24\n49 8b 7f 48\n48 85 ff\n74 13\n66 90\n48 8b 5f 08\ne8 37 64 ff ff\n48 85 db\n48 89 df\n75 ef\n49 c7 47 48 00 00 00 00\n4c 89 f0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p936
S'.text:000000000040be60\n.text:000000000040be62\n.text:000000000040be64\n.text:000000000040be65\n.text:000000000040be69\n.text:000000000040be6c\n.text:000000000040be71\n.text:000000000040be76\n.text:000000000040be7b\n.text:000000000040be7e\n.text:000000000040be81\n.text:000000000040be83\n.text:000000000040be87\n.text:000000000040be8c\n.text:000000000040be90\n.text:000000000040be96\n.text:000000000040be9a\n.text:000000000040be9d\n.text:000000000040bea1\n.text:000000000040bea3\n.text:000000000040bea8\n.text:000000000040beaa\n.text:000000000040bead\n.text:000000000040beb2\n.text:000000000040beb5\n.text:000000000040beb8\n.text:000000000040bebb\n.text:000000000040bebe\n.text:000000000040bec3\n.text:000000000040bec7\n.text:000000000040becb\n.text:000000000040becf\n.text:000000000040bed2\n.text:000000000040bed4\n.text:000000000040bed9\n.text:000000000040bedb\n.text:000000000040bede\n.text:000000000040bee1\n.text:000000000040bee4\n.text:000000000040bee7\n.text:000000000040beec\n.text:000000000040bef0\n.text:000000000040bef4\n.text:000000000040bef7\n.text:000000000040befd\n.text:000000000040bf00\n.text:000000000040bf05\n.text:000000000040bf09\n.text:000000000040bf0d\n.text:000000000040bf10\n.text:000000000040bf12\n.text:000000000040bf15\n.text:000000000040bf1a\n.text:000000000040bf1c\n.text:000000000040bf1f\n.text:000000000040bf22\n.text:000000000040bf25\n.text:000000000040bf28\n.text:000000000040bf2b\n.text:000000000040bf30\n.text:000000000040bf34\n.text:000000000040bf38\n.text:000000000040bf3b\n.text:000000000040bf3d\n.text:000000000040bf40\n.text:000000000040bf45\n.text:000000000040bf47\n.text:000000000040bf4a\n.text:000000000040bf4d\n.text:000000000040bf50\n.text:000000000040bf53\n.text:000000000040bf56\n.text:000000000040bf5b\n.text:000000000040bf5f\n.text:000000000040bf63\n.text:000000000040bf67\n.text:000000000040bf6a\n.text:000000000040bf6c\n.text:000000000040bf71\n.text:000000000040bf75\n.text:000000000040bf77\n.text:000000000040bf7c\n.text:000000000040bf84\n.text:000000000040bf87\n.text:000000000040bf8b\n.text:000000000040bf90\n.text:000000000040bf9a\n.text:000000000040bf9d\n.text:000000000040bfa2\n.text:000000000040bfa5\n.text:000000000040bfa9\n.text:000000000040bfac\n.text:000000000040bfb1\n.text:000000000040bfb3\n.text:000000000040bfb5\n.text:000000000040bfb9\n.text:000000000040bfbc\n.text:000000000040bfbe\n.text:000000000040bfc0\n.text:000000000040bfc4\n.text:000000000040bfc9\n.text:000000000040bfcc\n.text:000000000040bfcf\n.text:000000000040bfd1\n.text:000000000040bfd9\n.text:000000000040bfdc\n.text:000000000040bfe0\n.text:000000000040bfe1\n.text:000000000040bfe3\n.text:000000000040bfe5\n'
p937
tp938
sS'quotearg_colon'
p939
(S'\n__stdcall quotearg_colon(char * arg)\n'
p940
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p941
S'MOV ESI,0x3a\nJMP 0x0040dd40\n'
p942
S'be 3a 00 00 00\neb e9\n'
p943
S'.text:000000000040dd50\n.text:000000000040dd55\n'
p944
tp945
sS'__assert_fail'
p946
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p947
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0061a170)();\u000a  return;\u000a}\u000a\u000a
p948
S'JMP qword ptr [0x0061a170]\n'
p949
S'ff 25 ea 7a 21 00\n'
p950
S'.plt:0000000000402680\n'
p951
tp952
sS'strtold'
p953
(S'\n__stdcall strtold(char * __nptr, char * * __endptr)\n'
p954
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adouble strtold(char *__nptr,char **__endptr)\u000a\u000a{\u000a  double dVar1;\u000a  \u000a  dVar1 = (double)(*(code *)PTR_strtold_0061a2d8)();\u000a  return dVar1;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x0061a2d8]\n'
p956
S'ff 25 82 79 21 00\n'
p957
S'.plt:0000000000402950\n'
p958
tp959
sS'queue_insert'
p960
(S'\n__stdcall queue_insert(merge_node_queue * queue, merge_node * node)\n'
p961
V\u000avoid queue_insert(merge_node_queue *queue,merge_node *node)\u000a\u000a{\u000a  pthread_mutex_lock((pthread_mutex_t *)queue->mutex);\u000a  heap_insert(queue->priority_queue,node);\u000a  node->queued = true;\u000a  pthread_cond_signal((pthread_cond_t *)queue->cond);\u000a  pthread_mutex_unlock((pthread_mutex_t *)queue->mutex);\u000a  return;\u000a}\u000a\u000a
p962
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV RBX,RDI\nLEA R15,[RBX + 0x8]\nMOV RDI,R15\nCALL 0x00402b20\nMOV RDI,qword ptr [RBX]\nMOV RSI,R14\nCALL 0x0040c180\nMOV byte ptr [R14 + 0x54],0x1\nADD RBX,0x30\nMOV RDI,RBX\nCALL 0x00402720\nMOV RDI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00402850\n'
p963
S'41 57\n41 56\n53\n49 89 f6\n48 89 fb\n4c 8d 7b 08\n4c 89 ff\ne8 79 94 ff ff\n48 8b 3b\n4c 89 f6\ne8 ce 2a 00 00\n41 c6 46 54 01\n48 83 c3 30\n48 89 df\ne8 5d 90 ff ff\n4c 89 ff\n5b\n41 5e\n41 5f\ne9 80 91 ff ff\n'
p964
S'.text:0000000000409690\n.text:0000000000409692\n.text:0000000000409694\n.text:0000000000409695\n.text:0000000000409698\n.text:000000000040969b\n.text:000000000040969f\n.text:00000000004096a2\n.text:00000000004096a7\n.text:00000000004096aa\n.text:00000000004096ad\n.text:00000000004096b2\n.text:00000000004096b7\n.text:00000000004096bb\n.text:00000000004096be\n.text:00000000004096c3\n.text:00000000004096c6\n.text:00000000004096c7\n.text:00000000004096c9\n.text:00000000004096cb\n'
p965
tp966
sS'bindtextdomain'
p967
(S'\n__stdcall bindtextdomain()\n'
p968
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0061a0f8)();\u000a  return;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x0061a0f8]\n'
p970
S'ff 25 62 7b 21 00\n'
p971
S'.plt:0000000000402590\n'
p972
tp973
sS'set_char_quoting'
p974
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p975
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p976
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x61ab80\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p977
S'89 f1\n48 85 ff\nbe 80 ab 61 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p978
S'.text:000000000040cad0\n.text:000000000040cad2\n.text:000000000040cad5\n.text:000000000040cada\n.text:000000000040cade\n.text:000000000040cae0\n.text:000000000040cae3\n.text:000000000040cae7\n.text:000000000040caec\n.text:000000000040caef\n.text:000000000040caf1\n.text:000000000040caf3\n.text:000000000040caf6\n.text:000000000040caf8\n.text:000000000040cafb\n.text:000000000040cafd\n.text:000000000040cb00\n.text:000000000040cb05\n'
p979
tp980
sS'fraccompare'
p981
(S'\n__stdcall fraccompare(char * a, char * b)\n'
p982
V\u000aint fraccompare(char *a,char *b)\u000a\u000a{\u000a  char cVar1;\u000a  char cVar2;\u000a  uint uVar3;\u000a  char in_DL;\u000a  uint uVar4;\u000a  \u000a  if (*a != in_DL) {\u000a    if (*b != in_DL) {\u000a      return 0;\u000a    }\u000a    b = b + 1;\u000aLAB_0040f5a0:\u000a    do {\u000a      cVar1 = *b;\u000a      b = b + 1;\u000a    } while ((int)cVar1 == 0x30);\u000a    return (int)-(uint)((int)cVar1 - 0x30U < 10);\u000a  }\u000a  if (*b == in_DL) {\u000a    a = a + 1;\u000a    b = b + 1;\u000a    while( true ) {\u000a      cVar1 = *a;\u000a      cVar2 = *b;\u000a      uVar3 = (int)cVar1 - 0x30;\u000a      if (cVar1 != cVar2) break;\u000a      a = a + 1;\u000a      b = b + 1;\u000a      if (9 < uVar3) {\u000a        return 0;\u000a      }\u000a    }\u000a    uVar4 = (int)cVar2 - 0x30;\u000a    if ((uVar3 < 10) && (uVar4 < 10)) {\u000a      return (int)cVar1 - (int)cVar2;\u000a    }\u000a    if (9 < uVar3) {\u000a      if (9 < uVar4) {\u000a        return 0;\u000a      }\u000a      goto LAB_0040f5a0;\u000a    }\u000a  }\u000a  else {\u000a    a = a + 1;\u000a  }\u000a  do {\u000a    cVar1 = *a;\u000a    a = a + 1;\u000a  } while ((int)cVar1 == 0x30);\u000a  return (int)(-(uint)((int)cVar1 - 0x30U < 10) & 1);\u000a}\u000a\u000a
p983
S'CMP byte ptr [RDI],DL\nJNZ 0x0040f58b\nCMP byte ptr [RSI],DL\nJNZ 0x0040f5b4\nINC RDI\nINC RSI\nNOP\nMOVSX EAX,byte ptr [RDI]\nMOVSX EDX,byte ptr [RSI]\nLEA ECX,[RAX + -0x30]\nCMP AL,DL\nJNZ 0x0040f5d7\nINC RDI\nINC RSI\nCMP ECX,0xa\nJC 0x0040f570\nXOR EAX,EAX\nRET\nXOR EAX,EAX\nCMP byte ptr [RSI],DL\nJNZ 0x0040f5b3\nINC RSI\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RSI]\nINC RSI\nCMP EAX,0x30\nJZ 0x0040f5a0\nADD EAX,-0x30\nCMP EAX,0xa\nSBB EAX,EAX\nRET\nINC RDI\nNOP word ptr [RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RDI]\nINC RDI\nCMP EAX,0x30\nJZ 0x0040f5c0\nADD EAX,-0x30\nCMP EAX,0xa\nSBB EAX,EAX\nAND EAX,0x1\nRET\nLEA R8D,[RDX + -0x30]\nCMP ECX,0x9\nJA 0x0040f5e9\nCMP R8D,0x9\nJA 0x0040f5e9\nSUB EAX,EDX\nRET\nCMP ECX,0xa\nJC 0x0040f5c0\nXOR EAX,EAX\nCMP R8D,0xa\nJC 0x0040f5a0\nJMP 0x0040f5b3\n'
p984
S'38 17\n75 27\n38 16\n75 4c\n48 ff c7\n48 ff c6\n66 90\n0f be 07\n0f be 16\n8d 48 d0\n38 d0\n75 5a\n48 ff c7\n48 ff c6\n83 f9 0a\n72 e8\n31 c0\nc3\n31 c0\n38 16\n75 22\n48 ff c6\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 06\n48 ff c6\n83 f8 30\n74 f5\n83 c0 d0\n83 f8 0a\n19 c0\nc3\n48 ff c7\n66 0f 1f 84 00 00 00 00 00\n0f be 07\n48 ff c7\n83 f8 30\n74 f5\n83 c0 d0\n83 f8 0a\n19 c0\n83 e0 01\nc3\n44 8d 42 d0\n83 f9 09\n77 09\n41 83 f8 09\n77 03\n29 d0\nc3\n83 f9 0a\n72 d2\n31 c0\n41 83 f8 0a\n72 aa\neb bb\n'
p985
S'.text:000000000040f560\n.text:000000000040f562\n.text:000000000040f564\n.text:000000000040f566\n.text:000000000040f568\n.text:000000000040f56b\n.text:000000000040f56e\n.text:000000000040f570\n.text:000000000040f573\n.text:000000000040f576\n.text:000000000040f579\n.text:000000000040f57b\n.text:000000000040f57d\n.text:000000000040f580\n.text:000000000040f583\n.text:000000000040f586\n.text:000000000040f588\n.text:000000000040f58a\n.text:000000000040f58b\n.text:000000000040f58d\n.text:000000000040f58f\n.text:000000000040f591\n.text:000000000040f594\n.text:000000000040f5a0\n.text:000000000040f5a3\n.text:000000000040f5a6\n.text:000000000040f5a9\n.text:000000000040f5ab\n.text:000000000040f5ae\n.text:000000000040f5b1\n.text:000000000040f5b3\n.text:000000000040f5b4\n.text:000000000040f5b7\n.text:000000000040f5c0\n.text:000000000040f5c3\n.text:000000000040f5c6\n.text:000000000040f5c9\n.text:000000000040f5cb\n.text:000000000040f5ce\n.text:000000000040f5d1\n.text:000000000040f5d3\n.text:000000000040f5d6\n.text:000000000040f5d7\n.text:000000000040f5db\n.text:000000000040f5de\n.text:000000000040f5e0\n.text:000000000040f5e4\n.text:000000000040f5e6\n.text:000000000040f5e8\n.text:000000000040f5e9\n.text:000000000040f5ec\n.text:000000000040f5ee\n.text:000000000040f5f0\n.text:000000000040f5f4\n.text:000000000040f5f6\n'
p986
tp987
sS'compare_nodes'
p988
(S'\n__stdcall compare_nodes(void * a, void * b)\n'
p989
V\u000aint compare_nodes(void *a,void *b)\u000a\u000a{\u000a  bool bVar1;\u000a  \u000a  bVar1 = *(uint *)((long)a + 0x50) < *(uint *)((long)b + 0x50);\u000a  if (*(uint *)((long)a + 0x50) == *(uint *)((long)b + 0x50)) {\u000a    bVar1 = (ulong)(*(long *)((long)a + 0x30) + *(long *)((long)a + 0x28)) <\u000a            (ulong)(*(long *)((long)b + 0x30) + *(long *)((long)b + 0x28));\u000a  }\u000a  return (int)(uint)bVar1;\u000a}\u000a\u000a
p990
S'MOV EAX,dword ptr [RSI + 0x50]\nCMP dword ptr [RDI + 0x50],EAX\nJNZ 0x004093eb\nMOV RAX,qword ptr [RDI + 0x30]\nADD RAX,qword ptr [RDI + 0x28]\nMOV RCX,qword ptr [RSI + 0x30]\nADD RCX,qword ptr [RSI + 0x28]\nCMP RAX,RCX\nSETC AL\nMOVZX EAX,AL\nRET\n'
p991
S'8b 46 50\n39 47 50\n75 13\n48 8b 47 30\n48 03 47 28\n48 8b 4e 30\n48 03 4e 28\n48 39 c8\n0f 92 c0\n0f b6 c0\nc3\n'
p992
S'.text:00000000004093d0\n.text:00000000004093d3\n.text:00000000004093d6\n.text:00000000004093d8\n.text:00000000004093dc\n.text:00000000004093e0\n.text:00000000004093e4\n.text:00000000004093e8\n.text:00000000004093eb\n.text:00000000004093ee\n.text:00000000004093f1\n'
p993
tp994
sS'heapify_up'
p995
(S'\n__stdcall heapify_up(void * * array, size_t count, anon_subr_int_void_ptr_void_ptr * compare)\n'
p996
V\u000avoid heapify_up(void **array,size_t count,int (*compare)(void *,void *))\u000a\u000a{\u000a  void *pvVar1;\u000a  int iVar2;\u000a  ulong uVar3;\u000a  \u000a  pvVar1 = array[count];\u000a  if (count != 1) {\u000a    do {\u000a      uVar3 = count >> 1;\u000a      iVar2 = (*compare)(array[uVar3],pvVar1);\u000a      if (0 < iVar2) goto LAB_0040c22b;\u000a      array[count] = array[uVar3];\u000a      count = uVar3;\u000a    } while (uVar3 != 1);\u000a  }\u000a  count = 1;\u000aLAB_0040c22b:\u000a  array[count] = pvVar1;\u000a  return;\u000a}\u000a\u000a
p997
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R12,RDX\nMOV R13,RSI\nMOV R15,RDI\nMOV R14,qword ptr [R15 + R13*0x8]\nCMP R13,0x1\nJZ 0x0040c225\nNOP dword ptr [RAX]\nMOV RBX,R13\nSHR RBX,1\nMOV RDI,qword ptr [R15 + RBX*0x8]\nMOV RSI,R14\nCALL R12\nTEST EAX,EAX\nJG 0x0040c22b\nMOV RAX,qword ptr [R15 + RBX*0x8]\nMOV qword ptr [R15 + R13*0x8],RAX\nCMP RBX,0x1\nMOV R13,RBX\nJNZ 0x0040c200\nMOV R13D,0x1\nMOV qword ptr [R15 + R13*0x8],R14\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p998
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 d4\n49 89 f5\n49 89 ff\n4f 8b 34 ef\n49 83 fd 01\n74 29\n0f 1f 40 00\n4c 89 eb\n48 d1 eb\n49 8b 3c df\n4c 89 f6\n41 ff d4\n85 c0\n7f 17\n49 8b 04 df\n4b 89 04 ef\n48 83 fb 01\n49 89 dd\n75 db\n41 bd 01 00 00 00\n4f 89 34 ef\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p999
S'.text:000000000040c1e0\n.text:000000000040c1e2\n.text:000000000040c1e4\n.text:000000000040c1e6\n.text:000000000040c1e8\n.text:000000000040c1e9\n.text:000000000040c1ec\n.text:000000000040c1ef\n.text:000000000040c1f2\n.text:000000000040c1f6\n.text:000000000040c1fa\n.text:000000000040c1fc\n.text:000000000040c200\n.text:000000000040c203\n.text:000000000040c206\n.text:000000000040c20a\n.text:000000000040c20d\n.text:000000000040c210\n.text:000000000040c212\n.text:000000000040c214\n.text:000000000040c218\n.text:000000000040c21c\n.text:000000000040c220\n.text:000000000040c223\n.text:000000000040c225\n.text:000000000040c22b\n.text:000000000040c22f\n.text:000000000040c230\n.text:000000000040c232\n.text:000000000040c234\n.text:000000000040c236\n.text:000000000040c238\n'
p1000
tp1001
sS'xcalloc'
p1002
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p1003
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1004
S'PUSH RAX\nCALL 0x004105a0\nTEST RAX,RAX\nJZ 0x0040fcad\nPOP RCX\nRET\nCALL 0x0040fd10\n'
p1005
S'50\ne8 fa 08 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p1006
S'.text:000000000040fca0\n.text:000000000040fca1\n.text:000000000040fca6\n.text:000000000040fca9\n.text:000000000040fcab\n.text:000000000040fcac\n.text:000000000040fcad\n'
p1007
tp1008
sS'default_key_compare'
p1009
(S'\n__stdcall default_key_compare(keyfield * key)\n'
p1010
V\u000a_Bool default_key_compare(keyfield *key)\u000a\u000a{\u000a  _Bool _Var1;\u000a  bool bVar2;\u000a  \u000a  if (key->ignore == (_Bool *)0x0) {\u000a    if (key->translate == (char *)0x0) {\u000a      if (key->skipsblanks == false) {\u000a        if (key->skipeblanks == false) {\u000a          _Var1 = key_numeric(key);\u000a          if (_Var1 == false) {\u000a            if (key->month == false) {\u000a              if (key->version == false) {\u000a                bVar2 = key->random == false;\u000a              }\u000a              else {\u000a                bVar2 = false;\u000a              }\u000a            }\u000a            else {\u000a              bVar2 = false;\u000a            }\u000a          }\u000a          else {\u000a            bVar2 = false;\u000a          }\u000a        }\u000a        else {\u000a          bVar2 = false;\u000a        }\u000a      }\u000a      else {\u000a        bVar2 = false;\u000a      }\u000a    }\u000a    else {\u000a      bVar2 = false;\u000a    }\u000a  }\u000a  else {\u000a    bVar2 = false;\u000a  }\u000a  return (_Bool)bVar2;\u000a}\u000a\u000a
p1011
S'PUSH RBX\nMOV RBX,RDI\nCMP qword ptr [RBX + 0x20],0x0\nJZ 0x00404aff\nXOR EAX,EAX\nJMP 0x00404b49\nCMP qword ptr [RBX + 0x28],0x0\nJZ 0x00404b0a\nXOR EAX,EAX\nJMP 0x00404b49\nCMP byte ptr [RBX + 0x30],0x0\nJZ 0x00404b14\nXOR EAX,EAX\nJMP 0x00404b49\nCMP byte ptr [RBX + 0x31],0x0\nJZ 0x00404b1e\nXOR EAX,EAX\nJMP 0x00404b49\nMOV RDI,RBX\nCALL 0x00405da0\nTEST AL,AL\nJZ 0x00404b2e\nXOR EAX,EAX\nJMP 0x00404b49\nCMP byte ptr [RBX + 0x36],0x0\nJZ 0x00404b38\nXOR EAX,EAX\nJMP 0x00404b49\nCMP byte ptr [RBX + 0x38],0x0\nJZ 0x00404b42\nXOR EAX,EAX\nJMP 0x00404b49\nCMP byte ptr [RBX + 0x33],0x0\nSETZ AL\nPOP RBX\nRET\n'
p1012
S'53\n48 89 fb\n48 83 7b 20 00\n74 04\n31 c0\neb 4a\n48 83 7b 28 00\n74 04\n31 c0\neb 3f\n80 7b 30 00\n74 04\n31 c0\neb 35\n80 7b 31 00\n74 04\n31 c0\neb 2b\n48 89 df\ne8 7a 12 00 00\n84 c0\n74 04\n31 c0\neb 1b\n80 7b 36 00\n74 04\n31 c0\neb 11\n80 7b 38 00\n74 04\n31 c0\neb 07\n80 7b 33 00\n0f 94 c0\n5b\nc3\n'
p1013
S'.text:0000000000404af0\n.text:0000000000404af1\n.text:0000000000404af4\n.text:0000000000404af9\n.text:0000000000404afb\n.text:0000000000404afd\n.text:0000000000404aff\n.text:0000000000404b04\n.text:0000000000404b06\n.text:0000000000404b08\n.text:0000000000404b0a\n.text:0000000000404b0e\n.text:0000000000404b10\n.text:0000000000404b12\n.text:0000000000404b14\n.text:0000000000404b18\n.text:0000000000404b1a\n.text:0000000000404b1c\n.text:0000000000404b1e\n.text:0000000000404b21\n.text:0000000000404b26\n.text:0000000000404b28\n.text:0000000000404b2a\n.text:0000000000404b2c\n.text:0000000000404b2e\n.text:0000000000404b32\n.text:0000000000404b34\n.text:0000000000404b36\n.text:0000000000404b38\n.text:0000000000404b3c\n.text:0000000000404b3e\n.text:0000000000404b40\n.text:0000000000404b42\n.text:0000000000404b46\n.text:0000000000404b49\n.text:0000000000404b4a\n'
p1014
tp1015
sS'limfield'
p1016
(S'\n__stdcall limfield(line * line, keyfield * key)\n'
p1017
V\u000achar * limfield(line *line,keyfield *key)\u000a\u000a{\u000a  char *pcVar1;\u000a  ulong uVar2;\u000a  byte bVar3;\u000a  char *pcVar4;\u000a  char *pcVar5;\u000a  ulong uVar6;\u000a  \u000a  pcVar4 = line->text;\u000a  pcVar1 = pcVar4 + (line->length - 1);\u000a  uVar2 = key->echar;\u000a  uVar6 = key->eword + (ulong)(uVar2 == 0);\u000a  if (tab != 0x80) {\u000a    do {\u000a      if ((pcVar1 <= pcVar4) || (uVar6 == 0)) goto LAB_004066fe;\u000a      uVar6 = uVar6 - 1;\u000a      while (pcVar4 < pcVar1) {\u000a        if ((int)*pcVar4 == tab) {\u000a          if ((uVar6 | uVar2) != 0) {\u000a            pcVar4 = pcVar4 + 1;\u000a          }\u000a          break;\u000a        }\u000a        pcVar4 = pcVar4 + 1;\u000a      }\u000a    } while( true );\u000a  }\u000a  while ((pcVar4 < pcVar1 && (uVar6 != 0))) {\u000a    while ((pcVar4 < pcVar1 && (bVar3 = to_uchar(), blanks[(ulong)bVar3] != false))) {\u000a      pcVar4 = pcVar4 + 1;\u000a    }\u000a    while ((pcVar4 < pcVar1 && (bVar3 = to_uchar(), blanks[(ulong)bVar3] == false))) {\u000a      pcVar4 = pcVar4 + 1;\u000a    }\u000a    uVar6 = uVar6 - 1;\u000a  }\u000aLAB_004066fe:\u000a  pcVar5 = pcVar4;\u000a  if (uVar2 != 0) {\u000a    if (key->skipeblanks != false) {\u000a      while ((pcVar4 < pcVar1 && (bVar3 = to_uchar(), blanks[(ulong)bVar3] != false))) {\u000a        pcVar4 = pcVar4 + 1;\u000a      }\u000a    }\u000a    pcVar5 = pcVar4 + uVar2;\u000a    if (pcVar1 < pcVar4 + uVar2) {\u000a      pcVar5 = pcVar1;\u000a    }\u000a  }\u000a  return pcVar5;\u000a}\u000a\u000a
p1018
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RSI\nMOV RBX,qword ptr [RDI]\nMOV RAX,qword ptr [RDI + 0x8]\nLEA R15,[RBX + RAX*0x1 + -0x1]\nMOV R13,qword ptr [R14 + 0x10]\nMOV R12,qword ptr [R14 + 0x18]\nCMP R12,0x1\nADC R13,0x0\nCMP dword ptr [0x0061a3e0],0x80\nJZ 0x004066b3\nCMP RBX,R15\nJNC 0x004066fe\nMOV EAX,dword ptr [0x0061a3e0]\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST R13,R13\nJZ 0x004066fe\nDEC R13\nCMP RBX,R15\nJC 0x00406688\nJMP 0x0040669d\nINC RBX\nCMP RBX,R15\nJNC 0x0040669d\nMOVSX ECX,byte ptr [RBX]\nCMP ECX,EAX\nJNZ 0x00406680\nLEA RCX,[RBX + 0x1]\nMOV RDX,R13\nOR RDX,R12\nCMOVNZ RBX,RCX\nCMP RBX,R15\nJC 0x00406660\nJMP 0x004066fe\nDEC R13\nCMP RBX,R15\nJNC 0x004066fe\nTEST R13,R13\nJNZ 0x004066c3\nJMP 0x004066fe\nINC RBX\nCMP RBX,R15\nJNC 0x004066e3\nMOVSX EDI,byte ptr [RBX]\nCALL 0x004042c0\nMOVZX EAX,AL\nCMP byte ptr [0x61a670 + RAX],0x0\nJNZ 0x004066c0\nJMP 0x004066e3\nINC RBX\nCMP RBX,R15\nJNC 0x004066b0\nMOVSX EDI,byte ptr [RBX]\nCALL 0x004042c0\nMOVZX EAX,AL\nCMP byte ptr [0x61a670 + RAX],0x0\nJZ 0x004066e0\nJMP 0x004066b0\nTEST R12,R12\nJZ 0x00406736\nCMP byte ptr [R14 + 0x31],0x0\nJNZ 0x00406713\nJMP 0x0040672c\nINC RBX\nCMP RBX,R15\nJNC 0x0040672c\nMOVSX EDI,byte ptr [RBX]\nCALL 0x004042c0\nMOVZX EAX,AL\nCMP byte ptr [0x61a670 + RAX],0x0\nJNZ 0x00406710\nADD RBX,R12\nCMP R15,RBX\nCMOVC RBX,R15\nMOV RAX,RBX\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1019
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 f6\n48 8b 1f\n48 8b 47 08\n4c 8d 7c 03 ff\n4d 8b 6e 10\n4d 8b 66 18\n49 83 fc 01\n49 83 d5 00\n81 3d 9e 3d 21 00 80 00 00 00\n74 6f\n4c 39 fb\n0f 83 b1 00 00 00\n8b 05 8d 3d 21 00\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4d 85 ed\n0f 84 95 00 00 00\n49 ff cd\n4c 39 fb\n72 17\neb 2a\n48 ff c3\n4c 39 fb\n73 15\n0f be 0b\n39 c1\n75 f1\n48 8d 4b 01\n4c 89 ea\n4c 09 e2\n48 0f 45 d9\n4c 39 fb\n72 be\neb 5a\n49 ff cd\n4c 39 fb\n73 46\n4d 85 ed\n75 06\neb 3f\n48 ff c3\n4c 39 fb\n73 1b\n0f be 3b\ne8 f0 db ff ff\n0f b6 c0\n80 b8 70 a6 61 00 00\n75 e4\neb 05\n48 ff c3\n4c 39 fb\n73 c8\n0f be 3b\ne8 d0 db ff ff\n0f b6 c0\n80 b8 70 a6 61 00 00\n74 e4\neb b2\n4d 85 e4\n74 33\n41 80 7e 31 00\n75 09\neb 20\n48 ff c3\n4c 39 fb\n73 14\n0f be 3b\ne8 a0 db ff ff\n0f b6 c0\n80 b8 70 a6 61 00 00\n75 e4\n4c 01 e3\n49 39 df\n49 0f 42 df\n48 89 d8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1020
S'.text:0000000000406610\n.text:0000000000406612\n.text:0000000000406614\n.text:0000000000406616\n.text:0000000000406618\n.text:0000000000406619\n.text:000000000040661c\n.text:000000000040661f\n.text:0000000000406623\n.text:0000000000406628\n.text:000000000040662c\n.text:0000000000406630\n.text:0000000000406634\n.text:0000000000406638\n.text:0000000000406642\n.text:0000000000406644\n.text:0000000000406647\n.text:000000000040664d\n.text:0000000000406653\n.text:0000000000406660\n.text:0000000000406663\n.text:0000000000406669\n.text:000000000040666c\n.text:000000000040666f\n.text:0000000000406671\n.text:0000000000406680\n.text:0000000000406683\n.text:0000000000406686\n.text:0000000000406688\n.text:000000000040668b\n.text:000000000040668d\n.text:000000000040668f\n.text:0000000000406693\n.text:0000000000406696\n.text:0000000000406699\n.text:000000000040669d\n.text:00000000004066a0\n.text:00000000004066a2\n.text:00000000004066b0\n.text:00000000004066b3\n.text:00000000004066b6\n.text:00000000004066b8\n.text:00000000004066bb\n.text:00000000004066bd\n.text:00000000004066c0\n.text:00000000004066c3\n.text:00000000004066c6\n.text:00000000004066c8\n.text:00000000004066cb\n.text:00000000004066d0\n.text:00000000004066d3\n.text:00000000004066da\n.text:00000000004066dc\n.text:00000000004066e0\n.text:00000000004066e3\n.text:00000000004066e6\n.text:00000000004066e8\n.text:00000000004066eb\n.text:00000000004066f0\n.text:00000000004066f3\n.text:00000000004066fa\n.text:00000000004066fc\n.text:00000000004066fe\n.text:0000000000406701\n.text:0000000000406703\n.text:0000000000406708\n.text:000000000040670a\n.text:0000000000406710\n.text:0000000000406713\n.text:0000000000406716\n.text:0000000000406718\n.text:000000000040671b\n.text:0000000000406720\n.text:0000000000406723\n.text:000000000040672a\n.text:000000000040672c\n.text:000000000040672f\n.text:0000000000406732\n.text:0000000000406736\n.text:0000000000406739\n.text:000000000040673a\n.text:000000000040673c\n.text:000000000040673e\n.text:0000000000406740\n.text:0000000000406742\n'
p1021
tp1022
sS'clear_ungetc_buffer_preserving_position'
p1023
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p1024
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p1025
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00410867\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00410880\n'
p1026
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p1027
S'.text:0000000000410860\n.text:0000000000410864\n.text:0000000000410866\n.text:0000000000410867\n.text:0000000000410869\n.text:000000000041086e\n'
p1028
tp1029
sS'heap_insert'
p1030
(S'\n__stdcall heap_insert(heap * heap, void * item)\n'
p1031
V\u000aint heap_insert(heap *heap,void *item)\u000a\u000a{\u000a  size_t sVar1;\u000a  ulong uVar2;\u000a  void **ppvVar3;\u000a  \u000a  uVar2 = heap->capacity - 1;\u000a  if (uVar2 < heap->count || uVar2 == heap->count) {\u000a    ppvVar3 = (void **)x2nrealloc(heap->array,&heap->capacity,8);\u000a    heap->array = ppvVar3;\u000a  }\u000a  sVar1 = heap->count;\u000a  heap->count = sVar1 + 1;\u000a  heap->array[sVar1 + 1] = item;\u000a  heapify_up(heap->array,heap->count,heap->compare);\u000a  return 0;\u000a}\u000a\u000a
p1032
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x8]\nDEC RAX\nCMP RAX,qword ptr [RBX + 0x10]\nJA 0x0040c1ab\nLEA RSI,[RBX + 0x8]\nMOV RDI,qword ptr [RBX]\nMOV EDX,0x8\nCALL 0x0040fbf0\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RBX]\nMOV RCX,qword ptr [RBX + 0x10]\nLEA RDX,[RCX + 0x1]\nMOV qword ptr [RBX + 0x10],RDX\nMOV qword ptr [RAX + RCX*0x8 + 0x8],R14\nMOV RDI,qword ptr [RBX]\nMOV RSI,qword ptr [RBX + 0x10]\nMOV RDX,qword ptr [RBX + 0x18]\nCALL 0x0040c1e0\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1033
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 8b 43 08\n48 ff c8\n48 3b 43 10\n77 14\n48 8d 73 08\n48 8b 3b\nba 08 00 00 00\ne8 48 3a 00 00\n48 89 03\n48 8b 03\n48 8b 4b 10\n48 8d 51 01\n48 89 53 10\n4c 89 74 c8 08\n48 8b 3b\n48 8b 73 10\n48 8b 53 18\ne8 11 00 00 00\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1034
S'.text:000000000040c180\n.text:000000000040c182\n.text:000000000040c183\n.text:000000000040c184\n.text:000000000040c187\n.text:000000000040c18a\n.text:000000000040c18e\n.text:000000000040c191\n.text:000000000040c195\n.text:000000000040c197\n.text:000000000040c19b\n.text:000000000040c19e\n.text:000000000040c1a3\n.text:000000000040c1a8\n.text:000000000040c1ab\n.text:000000000040c1ae\n.text:000000000040c1b2\n.text:000000000040c1b6\n.text:000000000040c1ba\n.text:000000000040c1bf\n.text:000000000040c1c2\n.text:000000000040c1c6\n.text:000000000040c1ca\n.text:000000000040c1cf\n.text:000000000040c1d1\n.text:000000000040c1d5\n.text:000000000040c1d6\n.text:000000000040c1d8\n'
p1035
tp1036
sS'xnmalloc'
p1037
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p1038
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1039
S'MOV RAX,RDI\nMUL RSI\nJO 0x0040fb71\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x0040fb80\nPUSH RAX\nCALL 0x0040fd10\n'
p1040
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p1041
S'.text:000000000040fb60\n.text:000000000040fb63\n.text:000000000040fb66\n.text:000000000040fb68\n.text:000000000040fb6c\n.text:000000000040fb6f\n.text:000000000040fb71\n.text:000000000040fb72\n'
p1042
tp1043
sS'quotearg_char'
p1044
(S'\n__stdcall quotearg_char(char * arg)\n'
p1045
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1046
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x0040dcd0\n'
p1047
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1048
S'.text:000000000040dd40\n.text:000000000040dd42\n.text:000000000040dd49\n.text:000000000040dd4b\n'
p1049
tp1050
sS'malloc'
p1051
(S'\n__stdcall malloc(size_t __size)\n'
p1052
V\u000a/* WARNING: Switch with 1 destination removed at 0x00402860 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1053
S'JMP qword ptr [0x0061a260]\n'
p1054
S'ff 25 fa 79 21 00\n'
p1055
S'.plt:0000000000402860\n'
p1056
tp1057
sS'posix2_version'
p1058
(S'\n__stdcall posix2_version()\n'
p1059
V\u000aint posix2_version(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *in_RAX;\u000a  char *__nptr;\u000a  long lVar2;\u000a  long lVar3;\u000a  int iVar4;\u000a  char *local_8;\u000a  \u000a  local_8 = in_RAX;\u000a  __nptr = getenv("_POSIX2_VERSION");\u000a  if ((__nptr == (char *)0x0) || (*__nptr == 0)) {\u000a    lVar3 = 0x31069;\u000a  }\u000a  else {\u000a    lVar2 = strtol(__nptr,&local_8,10);\u000a    lVar3 = 0x31069;\u000a    if (*local_8 == 0) {\u000a      lVar3 = lVar2;\u000a    }\u000a  }\u000a  iVar4 = 0x7fffffff;\u000a  if (lVar3 < 0x7fffffff) {\u000a    iVar4 = (int)lVar3;\u000a  }\u000a  iVar1 = -0x80000000;\u000a  if (0x7fffffff < lVar3) {\u000a    iVar1 = iVar4;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1060
S'PUSH RAX\nMOV EDI,0x4144f8\nCALL 0x004023d0\nTEST RAX,RAX\nJZ 0x0040c997\nCMP byte ptr [RAX],0x0\nJZ 0x0040c997\nMOV RSI,RSP\nMOV EDX,0xa\nMOV RDI,RAX\nCALL 0x004027b0\nMOV RCX,qword ptr [RSP]\nCMP byte ptr [RCX],0x0\nMOV ECX,0x31069\nCMOVZ RCX,RAX\nJMP 0x0040c99c\nMOV ECX,0x31069\nCMP RCX,0x7fffffff\nMOV EDX,0x7fffffff\nCMOVL EDX,ECX\nCMP RCX,0x80000000\nMOV EAX,0x80000000\nCMOVGE EAX,EDX\nPOP RCX\nRET\n'
p1061
S'50\nbf f8 44 41 00\ne8 65 5a ff ff\n48 85 c0\n74 27\n80 38 00\n74 22\n48 89 e6\nba 0a 00 00 00\n48 89 c7\ne8 2b 5e ff ff\n48 8b 0c 24\n80 39 00\nb9 69 10 03 00\n48 0f 44 c8\neb 05\nb9 69 10 03 00\n48 81 f9 ff ff ff 7f\nba ff ff ff 7f\n0f 4c d1\n48 81 f9 00 00 00 80\nb8 00 00 00 80\n0f 4d c2\n59\nc3\n'
p1062
S'.text:000000000040c960\n.text:000000000040c961\n.text:000000000040c966\n.text:000000000040c96b\n.text:000000000040c96e\n.text:000000000040c970\n.text:000000000040c973\n.text:000000000040c975\n.text:000000000040c978\n.text:000000000040c97d\n.text:000000000040c980\n.text:000000000040c985\n.text:000000000040c989\n.text:000000000040c98c\n.text:000000000040c991\n.text:000000000040c995\n.text:000000000040c997\n.text:000000000040c99c\n.text:000000000040c9a3\n.text:000000000040c9a8\n.text:000000000040c9ab\n.text:000000000040c9b2\n.text:000000000040c9b7\n.text:000000000040c9ba\n.text:000000000040c9bb\n'
p1063
tp1064
sS'add_temp_dir'
p1065
(S'\n__stdcall add_temp_dir(char * dir)\n'
p1066
V\u000avoid add_temp_dir(char *dir)\u000a\u000a{\u000a  char **ppcVar1;\u000a  \u000a  if (temp_dir_count == temp_dir_alloc) {\u000a    temp_dirs = (char **)x2nrealloc(temp_dirs,&temp_dir_alloc,8);\u000a  }\u000a  ppcVar1 = temp_dirs + temp_dir_count;\u000a  temp_dir_count = temp_dir_count + 1;\u000a  *ppcVar1 = dir;\u000a  return;\u000a}\u000a\u000a
p1067
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,qword ptr [0x0061a660]\nCMP RAX,qword ptr [0x0061aa78]\nJNZ 0x00404a41\nMOV RDI,qword ptr [0x0061aa80]\nMOV ESI,0x61aa78\nMOV EDX,0x8\nCALL 0x0040fbf0\nMOV qword ptr [0x0061aa80],RAX\nMOV RAX,qword ptr [0x0061aa80]\nMOV RCX,qword ptr [0x0061a660]\nLEA RDX,[RCX + 0x1]\nMOV qword ptr [0x0061a660],RDX\nMOV qword ptr [RAX + RCX*0x8],RBX\nPOP RBX\nRET\n'
p1068
S'53\n48 89 fb\n48 8b 05 45 5c 21 00\n48 3b 05 56 60 21 00\n75 1d\n48 8b 3d 55 60 21 00\nbe 78 aa 61 00\nba 08 00 00 00\ne8 b6 b1 00 00\n48 89 05 3f 60 21 00\n48 8b 05 38 60 21 00\n48 8b 0d 11 5c 21 00\n48 8d 51 01\n48 89 15 06 5c 21 00\n48 89 1c c8\n5b\nc3\n'
p1069
S'.text:0000000000404a10\n.text:0000000000404a11\n.text:0000000000404a14\n.text:0000000000404a1b\n.text:0000000000404a22\n.text:0000000000404a24\n.text:0000000000404a2b\n.text:0000000000404a30\n.text:0000000000404a35\n.text:0000000000404a3a\n.text:0000000000404a41\n.text:0000000000404a48\n.text:0000000000404a4f\n.text:0000000000404a53\n.text:0000000000404a5a\n.text:0000000000404a5e\n.text:0000000000404a5f\n'
p1070
tp1071
sS'hash_get_n_buckets'
p1072
(S'\n__stdcall hash_get_n_buckets(Hash_table * table)\n'
p1073
V\u000asize_t hash_get_n_buckets(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets;\u000a}\u000a\u000a
p1074
S'MOV RAX,qword ptr [RDI + 0x10]\nRET\n'
p1075
S'48 8b 47 10\nc3\n'
p1076
S'.text:000000000040b130\n.text:000000000040b134\n'
p1077
tp1078
sS'key_warnings'
p1079
(S'\n__stdcall key_warnings(keyfield * gkey)\n'
p1080
V\u000a/* WARNING: Removing unreachable block (ram,0x00404e6f) */\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000avoid key_warnings(keyfield *gkey)\u000a\u000a{\u000a  size_t sVar1;\u000a  byte bVar2;\u000a  uint uVar3;\u000a  _Bool _Var4;\u000a  char *__src;\u000a  undefined2 *puVar5;\u000a  undefined2 *puVar6;\u000a  undefined8 uVar7;\u000a  ulong uVar8;\u000a  size_t n;\u000a  ulong uVar9;\u000a  keyfield *key;\u000a  char in_SIL;\u000a  bool bVar10;\u000a  bool bVar11;\u000a  size_t eword;\u000a  char nbuf [47];\u000a  char obuf [46];\u000a  char tmp [21];\u000a  long local_118;\u000a  _Bool *local_110;\u000a  undefined4 local_108;\u000a  undefined4 uStack260;\u000a  undefined4 uStack256;\u000a  undefined4 uStack252;\u000a  undefined4 local_f8;\u000a  undefined4 uStack244;\u000a  undefined4 uStack240;\u000a  undefined4 uStack236;\u000a  _Bool *local_e8;\u000a  char *local_e0;\u000a  undefined4 local_d8;\u000a  undefined4 local_d4;\u000a  uint local_d0;\u000a  undefined4 uStack204;\u000a  keyfield *local_c8;\u000a  size_t local_b8;\u000a  char *local_b0;\u000a  undefined4 local_a8 [12];\u000a  undefined2 local_78 [24];\u000a  char local_48 [24];\u000a  \u000a  local_c8 = gkey->next;\u000a  local_108 = *(undefined4 *)&gkey->sword;\u000a  uStack260 = *(undefined4 *)((long)&gkey->sword + 4);\u000a  uStack256 = *(undefined4 *)&gkey->schar;\u000a  uStack252 = *(undefined4 *)((long)&gkey->schar + 4);\u000a  local_f8 = *(undefined4 *)&gkey->eword;\u000a  uStack244 = *(undefined4 *)((long)&gkey->eword + 4);\u000a  uStack240 = *(undefined4 *)&gkey->echar;\u000a  uStack236 = *(undefined4 *)((long)&gkey->echar + 4);\u000a  local_110 = gkey->ignore;\u000a  __src = gkey->translate;\u000a  local_d8 = *(undefined4 *)&gkey->skipsblanks;\u000a  local_d4 = *(uint *)&gkey->general_numeric;\u000a  local_d0 = *(uint *)&gkey->version;\u000a  uStack204 = *(undefined4 *)&gkey->field_0x3c;\u000a  local_e8 = local_110;\u000a  local_e0 = __src;\u000a  if (keylist != (keyfield *)0x0) {\u000a    local_d8._1_1_ = SUB41((uint)local_d8 >> 8,0);\u000a    local_d4._2_1_ = SUB41(local_d4 >> 0x10,0);\u000a    local_d8._2_1_ = SUB41((uint)local_d8 >> 0x10,0);\u000a    local_d4._1_1_ = SUB41(local_d4 >> 8,0);\u000a    local_d8._3_1_ = SUB41((uint)local_d8 >> 0x18,0);\u000a    local_d4._3_1_ = SUB41(local_d4 >> 0x18,0);\u000a    local_118 = 1;\u000a    key = keylist;\u000a    local_e8 = local_110;\u000a    local_e0 = __src;\u000a    do {\u000a      local_b0 = __src;\u000a      if (key->obsolete_used != false) {\u000a        sVar1 = key->sword;\u000a        local_b8 = key->eword;\u000a        local_78[0] = 0x2b;\u000a        local_b0 = __src;\u000a        __src = umaxtostr((ulong)(sVar1 == 0xffffffffffffffff) + sVar1,local_48);\u000a        puVar5 = (undefined2 *)__stpcpy_chk((long)local_78 + 1,__src,0x2d);\u000a        local_a8[0] = 0x206b2d;\u000a        __src = umaxtostr((ulong)(sVar1 == 0xffffffffffffffff) + 1 + sVar1,local_48);\u000a        puVar6 = (undefined2 *)__stpcpy_chk((long)local_a8 + 3,__src,0x2c);\u000a        sVar1 = local_b8;\u000a        if (key->eword != 0xffffffffffffffff) {\u000a          *(undefined *)(puVar5 + 1) = 0;\u000a          *puVar5 = 0x2d20;\u000a          __src = umaxtostr(local_b8 + 1,local_48);\u000a          stpcpy((char *)(puVar5 + 1),__src);\u000a          *puVar6 = 0x2c;\u000a          __src = umaxtostr((ulong)(key->echar == 0xffffffffffffffff) + 1 + sVar1,local_48);\u000a          stpcpy((char *)((long)puVar6 + 1),__src);\u000a        }\u000a        uVar7 = dcgettext(0,"obsolescent key %s used; consider %s instead",5);\u000a        quote_n((char *)0x0);\u000a        quote_n((char *)0x1);\u000a        error(0,0,uVar7);\u000a      }\u000a      if ((key->sword != 0xffffffffffffffff) && (key->eword < key->sword)) {\u000a        uVar7 = dcgettext(0,"key %lu has zero width and will be ignored",5);\u000a        error(0,0,uVar7);\u000a      }\u000a      _Var4 = key_numeric(key);\u000a      bVar10 = true;\u000a      if (_Var4 == false) {\u000a        bVar10 = key->month != false;\u000a      }\u000a      if ((hard_LC_COLLATE == false) && (_Var4 = default_key_compare(key), _Var4 != false)) {\u000a        bVar11 = true;\u000a        if (key->schar == 0) {\u000a          bVar11 = key->echar != 0;\u000a        }\u000a        bVar2 = bVar11 ^ 1;\u000a        if (key->eword != 0) goto LAB_00404e8c;\u000aLAB_00404e80:\u000a        if (key->echar == 0) goto LAB_00404e8c;\u000a      }\u000a      else {\u000a        bVar2 = 0;\u000a        if (key->eword == 0) goto LAB_00404e80;\u000aLAB_00404e8c:\u000a        if (((tab == 0x80) && (in_SIL == 0)) &&\u000a           (((!(bool)(bVar2 | bVar10 | key->skipsblanks != false) ||\u000a             ((key->skipsblanks == false && (key->schar != 0)))) ||\u000a            ((key->skipeblanks == false && (key->echar != 0)))))) {\u000a          uVar7 = dcgettext(0,\u000a                            "leading blanks are significant in key %lu; consider also specifying \u005c'b\u005c'"\u000a                            ,5);\u000a          error(0,0,uVar7,local_118);\u000a        }\u000a      }\u000a      if ((in_SIL == 0) && (_Var4 = key_numeric(key), _Var4 != false)) {\u000a        uVar9 = key->sword + 1;\u000a        uVar8 = key->sword + 2;\u000a        if (uVar9 != 0) {\u000a          uVar8 = uVar9;\u000a        }\u000a        if (uVar8 <= key->eword) {\u000a          uVar7 = dcgettext(0,"key %lu is numeric and spans multiple fields",5);\u000a          error(0,0,uVar7,local_118);\u000a        }\u000a      }\u000a      if (local_110 == (_Bool *)0x0) {\u000a        local_110 = (_Bool *)0x0;\u000a      }\u000a      else {\u000a        if (local_110 == key->ignore) {\u000a          local_110 = (_Bool *)0x0;\u000a        }\u000a      }\u000a      if (local_b0 == (char *)0x0) {\u000a        __src = (char *)0x0;\u000a      }\u000a      else {\u000a        __src = local_b0;\u000a        if (local_b0 == key->translate) {\u000a          __src = (char *)0x0;\u000a        }\u000a      }\u000a      local_d8._0_1_ = (_Bool)(local_d8._0_1_ & (key->skipsblanks ^ 1U));\u000a      local_d8._1_1_ = (_Bool)(local_d8._1_1_ & (key->skipeblanks ^ 1U));\u000a      local_d4._2_1_ = (_Bool)(local_d4._2_1_ & (key->month ^ 1U));\u000a      local_d8._2_1_ = (_Bool)(local_d8._2_1_ & (key->numeric ^ 1U));\u000a      local_d4._0_1_ = (_Bool)(local_d4._0_1_ & (key->general_numeric ^ 1U));\u000a      local_d4._1_1_ = (_Bool)(local_d4._1_1_ & (key->human_numeric ^ 1U));\u000a      local_d8._3_1_ = (_Bool)(local_d8._3_1_ & (key->random ^ 1U));\u000a      local_d0._0_1_ = (_Bool)(local_d0._0_1_ & (key->version ^ 1U));\u000a      local_d4._3_1_ = (_Bool)(local_d4._3_1_ & (key->reverse ^ 1U));\u000a      local_118 = local_118 + 1;\u000a      key = key->next;\u000a    } while (key != (keyfield *)0x0);\u000a    local_d0 = local_d0 & 0xffffff00 | (uint)local_d0._0_1_;\u000a    local_e8 = local_110;\u000a    local_e0 = __src;\u000a  }\u000a  _Var4 = default_key_compare((keyfield *)&local_108);\u000a  uVar3 = local_d4;\u000a  if ((_Var4 == false) ||\u000a     ((local_d4._3_1_ != false && (((stable != 0 || (unique == 1)) && (keylist != (keyfield *)0x0)))\u000a      ))) {\u000a    if ((stable == 0) && (unique == 0)) {\u000a      local_d4 = local_d4 & 0xffffff;\u000a    }\u000a    key_to_opts((keyfield *)&local_108,(char *)local_a8);\u000a    n = strlen((char *)local_a8);\u000a    uVar9 = select_plural(n);\u000a    uVar7 = dcngettext(0,"option \u005c'-%s\u005c' is ignored","options \u005c'-%s\u005c' are ignored",uVar9,5);\u000a    error(0,0,uVar7,local_a8);\u000a    local_d4 = uVar3 & 0xff000000 | local_d4 & 0xffffff;\u000a  }\u000a  if (((local_d4._3_1_ != false) && (stable == 0)) &&\u000a     ((keylist != (keyfield *)0x0 && (((unique ^ 1) & 1) != 0)))) {\u000a    uVar7 = dcgettext(0,"option \u005c'-r\u005c' only applies to last-resort comparison",5);\u000a    error(0,0,uVar7,uVar7);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1081
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xf8\nMOV R13D,ESI\nMOV RAX,qword ptr [RDI + 0x40]\nMOV qword ptr [RSP + 0x60],RAX\nMOVUPS XMM0,xmmword ptr [RDI]\nMOVUPS XMM1,xmmword ptr [RDI + 0x10]\nMOVUPS XMM2,xmmword ptr [RDI + 0x20]\nMOVUPS XMM3,xmmword ptr [RDI + 0x30]\nMOVAPS xmmword ptr [RSP + 0x50],XMM3\nMOVAPS xmmword ptr [RSP + 0x40],XMM2\nMOVAPS xmmword ptr [RSP + 0x30],XMM1\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOV RBX,qword ptr [0x0061a650]\nTEST RBX,RBX\nJZ 0x00405053\nMOV RAX,qword ptr [RSP + 0x40]\nMOV qword ptr [RSP + 0x18],RAX\nMOV RBP,qword ptr [RSP + 0x48]\nMOV DL,byte ptr [RSP + 0x50]\nMOV R9B,byte ptr [RSP + 0x51]\nMOV R8B,byte ptr [RSP + 0x56]\nMOV DIL,byte ptr [RSP + 0x52]\nMOV SIL,byte ptr [RSP + 0x54]\nMOV CL,byte ptr [RSP + 0x55]\nMOV R12B,byte ptr [RSP + 0x53]\nMOV R15B,byte ptr [RSP + 0x58]\nMOV R14B,byte ptr [RSP + 0x57]\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x10],RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV qword ptr [RSP + 0x78],RBP\nMOV byte ptr [RSP + 0xa],DL\nMOV byte ptr [RSP + 0xb],R9B\nMOV byte ptr [RSP + 0xc],R8B\nMOV byte ptr [RSP + 0xd],DIL\nMOV byte ptr [RSP + 0xe],SIL\nMOV byte ptr [RSP + 0xf],CL\nCMP byte ptr [RBX + 0x39],0x0\nJZ 0x00404de1\nMOV byte ptr [RSP + 0x7],R12B\nMOV byte ptr [RSP + 0x8],R15B\nMOV byte ptr [RSP + 0x9],R14B\nMOV R15,qword ptr [RBX]\nMOV RAX,qword ptr [RBX + 0x10]\nMOV qword ptr [RSP + 0x70],RAX\nXOR EBP,EBP\nCMP R15,-0x1\nSETZ BPL\nLEA RDI,[RBP + R15*0x1]\nMOV word ptr [0xb0 + RSP],0x2b\nLEA R12,[0xe0 + RSP]\nMOV RSI,R12\nCALL 0x0040c400\nMOV EDX,0x2d\nLEA RDI,[0xb1 + RSP]\nMOV RSI,RAX\nCALL 0x004027f0\nMOV R14,RAX\nMOV dword ptr [0x80 + RSP],0x206b2d\nLEA RDI,[RBP + R15*0x1 + 0x1]\nMOV RSI,R12\nCALL 0x0040c400\nMOV EDX,0x2c\nLEA RDI,[0x83 + RSP]\nMOV RSI,RAX\nCALL 0x004027f0\nMOV R15,RAX\nCMP qword ptr [RBX + 0x10],-0x1\nJZ 0x00404d80\nMOV EBP,R13D\nMOV R13,R14\nADD R13,0x2\nMOV byte ptr [R14 + 0x2],0x0\nMOV word ptr [R14],0x2d20\nMOV R14,qword ptr [RSP + 0x70]\nLEA RDI,[R14 + 0x1]\nMOV RSI,R12\nCALL 0x0040c400\nMOV RDI,R13\nMOV R13D,EBP\nMOV RSI,RAX\nCALL 0x004025a0\nMOV RBP,R15\nINC RBP\nMOV word ptr [R15],0x2c\nXOR EAX,EAX\nCMP qword ptr [RBX + 0x18],-0x1\nSETZ AL\nLEA RDI,[RAX + R14*0x1 + 0x1]\nMOV RSI,R12\nCALL 0x0040c400\nMOV RDI,RBP\nMOV RSI,RAX\nCALL 0x004025a0\nXOR EDI,EDI\nMOV ESI,0x413cd9\nMOV EDX,0x5\nCALL 0x004025b0\nMOV R14,RAX\nXOR EDI,EDI\nLEA RSI,[0xb0 + RSP]\nCALL 0x0040dea0\nMOV R15,RAX\nMOV EDI,0x1\nLEA RSI,[0x80 + RSP]\nCALL 0x0040dea0\nMOV RBP,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nMOV RCX,R15\nMOV R8,RBP\nCALL 0x00402960\nMOVZX R14D,byte ptr [RSP + 0x9]\nMOVZX R15D,byte ptr [RSP + 0x8]\nMOVZX R12D,byte ptr [RSP + 0x7]\nMOV RAX,qword ptr [RBX]\nCMP RAX,-0x1\nJZ 0x00404e17\nCMP qword ptr [RBX + 0x10],RAX\nJNC 0x00404e17\nXOR EDI,EDI\nMOV ESI,0x413d06\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,qword ptr [RSP + 0x10]\nCALL 0x00402960\nMOV RDI,RBX\nCALL 0x00405da0\nMOV BPL,0x1\nTEST AL,AL\nJNZ 0x00404e2e\nCMP byte ptr [RBX + 0x36],0x0\nSETNZ BPL\nCMP byte ptr [0x0061a5b0],0x0\nJNZ 0x00404e60\nMOV RDI,RBX\nCALL 0x00404af0\nTEST AL,AL\nJZ 0x00404e60\nMOV AL,0x1\nCMP qword ptr [RBX + 0x8],0x0\nJNZ 0x00404e54\nCMP qword ptr [RBX + 0x18],0x0\nSETNZ AL\nXOR AL,0x1\nCMP qword ptr [RBX + 0x10],0x0\nJNZ 0x00404e69\nJMP 0x00404e80\nXOR EAX,EAX\nCMP qword ptr [RBX + 0x10],0x0\nJZ 0x00404e80\nXOR ECX,ECX\nTEST CL,CL\nJZ 0x00404e8c\nJMP 0x00404ef7\nCMP qword ptr [RBX + 0x18],0x0\nSETNZ CL\nTEST CL,CL\nJNZ 0x00404ef7\nCMP dword ptr [0x0061a3e0],0x80\nJNZ 0x00404ef7\nTEST R13B,R13B\nJNZ 0x00404ef7\nMOVZX ECX,byte ptr [RBX + 0x30]\nTEST CL,CL\nSETNZ DL\nOR BPL,DL\nOR AL,BPL\nCMP AL,0x1\nJNZ 0x00404ed0\nTEST CL,CL\nJZ 0x00404ec3\nCMP byte ptr [RBX + 0x31],0x0\nJNZ 0x00404ef7\nCMP qword ptr [RBX + 0x18],0x0\nJNZ 0x00404ed0\nJMP 0x00404ef7\nCMP qword ptr [RBX + 0x8],0x0\nJZ 0x00404eb4\nNOP word ptr [RAX + RAX*0x1]\nXOR EDI,EDI\nMOV ESI,0x413d31\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,qword ptr [RSP + 0x10]\nCALL 0x00402960\nTEST R13B,R13B\nJNZ 0x00404f50\nMOV RDI,RBX\nCALL 0x00405da0\nTEST AL,AL\nJZ 0x00404f50\nMOV RAX,qword ptr [RBX]\nLEA RCX,[RAX + 0x1]\nADD RAX,0x2\nTEST RCX,RCX\nCMOVNZ RAX,RCX\nCMP qword ptr [RBX + 0x10],RAX\nJC 0x00404f50\nXOR EDI,EDI\nMOV ESI,0x413d79\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,qword ptr [RSP + 0x10]\nCALL 0x00402960\nNOP word ptr [RAX + RAX*0x1]\nMOV RCX,qword ptr [RSP + 0x18]\nTEST RCX,RCX\nMOVZX ESI,byte ptr [RSP + 0xe]\nMOVZX EDI,byte ptr [RSP + 0xd]\nMOVZX R8D,byte ptr [RSP + 0xc]\nMOVZX R9D,byte ptr [RSP + 0xb]\nMOVZX EDX,byte ptr [RSP + 0xa]\nMOV RBP,qword ptr [RSP + 0x78]\nJZ 0x00404f90\nCMP RCX,qword ptr [RBX + 0x20]\nMOV EAX,0x0\nCMOVZ RCX,RAX\nJMP 0x00404f92\nXOR ECX,ECX\nTEST RBP,RBP\nMOV qword ptr [RSP + 0x18],RCX\nJZ 0x00404fb0\nCMP RBP,qword ptr [RBX + 0x28]\nMOV EAX,0x0\nCMOVZ RBP,RAX\nJMP 0x00404fb2\nXOR EBP,EBP\nMOVZX EAX,byte ptr [RBX + 0x30]\nMOVZX ECX,byte ptr [RBX + 0x31]\nXOR AL,0x1\nAND DL,AL\nXOR CL,0x1\nAND R9B,CL\nMOVZX EAX,byte ptr [RBX + 0x36]\nXOR AL,0x1\nAND R8B,AL\nMOVZX EAX,byte ptr [RBX + 0x32]\nXOR AL,0x1\nAND DIL,AL\nMOVZX EAX,byte ptr [RBX + 0x34]\nXOR AL,0x1\nAND SIL,AL\nMOVZX EAX,byte ptr [RBX + 0x35]\nXOR AL,0x1\nMOVZX ECX,byte ptr [RSP + 0xf]\nAND CL,AL\nMOVZX EAX,byte ptr [RBX + 0x33]\nXOR AL,0x1\nAND R12B,AL\nMOVZX EAX,byte ptr [RBX + 0x38]\nXOR AL,0x1\nAND R15B,AL\nMOVZX EAX,byte ptr [RBX + 0x37]\nXOR AL,0x1\nAND R14B,AL\nINC qword ptr [RSP + 0x10]\nMOV RBX,qword ptr [RBX + 0x40]\nTEST RBX,RBX\nJNZ 0x00404c60\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RSP + 0x40],RAX\nMOV qword ptr [RSP + 0x48],RBP\nMOV byte ptr [RSP + 0x50],DL\nMOV byte ptr [RSP + 0x51],R9B\nMOV byte ptr [RSP + 0x56],R8B\nMOV byte ptr [RSP + 0x52],DIL\nMOV byte ptr [RSP + 0x54],SIL\nMOV byte ptr [RSP + 0x55],CL\nMOV byte ptr [RSP + 0x53],R12B\nMOV byte ptr [RSP + 0x58],R15B\nMOV byte ptr [RSP + 0x57],R14B\nLEA RDI,[RSP + 0x20]\nCALL 0x00404af0\nTEST AL,AL\nJZ 0x0040509e\nCMP byte ptr [RSP + 0x57],0x0\nJZ 0x00405114\nMOV AL,byte ptr [0x0061a649]\nTEST AL,AL\nJZ 0x00405085\nCMP qword ptr [0x0061a650],0x0\nJNZ 0x0040509e\nJMP 0x00405114\nCMP byte ptr [0x0061a64a],0x1\nJNZ 0x00405114\nMOV RAX,qword ptr [0x0061a650]\nTEST RAX,RAX\nJZ 0x00405114\nMOV BPL,byte ptr [RSP + 0x57]\nMOV AL,byte ptr [0x0061a649]\nTEST AL,AL\nJNZ 0x004050bc\nMOV AL,byte ptr [0x0061a64a]\nTEST AL,AL\nJNZ 0x004050bc\nMOV byte ptr [RSP + 0x57],0x0\nLEA RDI,[RSP + 0x20]\nLEA RBX,[0x80 + RSP]\nMOV RSI,RBX\nCALL 0x00405dc0\nMOV RDI,RBX\nCALL 0x004025d0\nMOV RDI,RAX\nCALL 0x00405e60\nXOR EDI,EDI\nMOV ESI,0x413da6\nMOV EDX,0x413dbe\nMOV R8D,0x5\nMOV RCX,RAX\nCALL 0x004029b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00402960\nMOV byte ptr [RSP + 0x57],BPL\nCMP byte ptr [RSP + 0x57],0x0\nJZ 0x0040515d\nMOV AL,byte ptr [0x0061a649]\nTEST AL,AL\nJNZ 0x0040515d\nCMP qword ptr [0x0061a650],0x0\nJZ 0x0040515d\nMOV AL,byte ptr [0x0061a64a]\nXOR AL,0x1\nTEST AL,0x1\nJZ 0x0040515d\nXOR EDI,EDI\nMOV ESI,0x413dd8\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402960\nADD RSP,0xf8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1082
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec f8 00 00 00\n41 89 f5\n48 8b 47 40\n48 89 44 24 60\n0f 10 07\n0f 10 4f 10\n0f 10 57 20\n0f 10 5f 30\n0f 29 5c 24 50\n0f 29 54 24 40\n0f 29 4c 24 30\n0f 29 44 24 20\n48 8b 1d 49 5a 21 00\n48 85 db\n0f 84 43 04 00 00\n48 8b 44 24 40\n48 89 44 24 18\n48 8b 6c 24 48\n8a 54 24 50\n44 8a 4c 24 51\n44 8a 44 24 56\n40 8a 7c 24 52\n40 8a 74 24 54\n8a 4c 24 55\n44 8a 64 24 53\n44 8a 7c 24 58\n44 8a 74 24 57\nb8 01 00 00 00\n48 89 44 24 10\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 6c 24 78\n88 54 24 0a\n44 88 4c 24 0b\n44 88 44 24 0c\n40 88 7c 24 0d\n40 88 74 24 0e\n88 4c 24 0f\n80 7b 39 00\n0f 84 56 01 00 00\n44 88 64 24 07\n44 88 7c 24 08\n44 88 74 24 09\n4c 8b 3b\n48 8b 43 10\n48 89 44 24 70\n31 ed\n49 83 ff ff\n40 0f 94 c5\n4a 8d 7c 3d 00\n66 c7 84 24 b0 00 00 00 2b 00\n4c 8d a4 24 e0 00 00 00\n4c 89 e6\ne8 31 77 00 00\nba 2d 00 00 00\n48 8d bc 24 b1 00 00 00\n48 89 c6\ne8 0c db ff ff\n49 89 c6\nc7 84 24 80 00 00 00 2d 6b 20 00\n4a 8d 7c 3d 01\n4c 89 e6\ne8 01 77 00 00\nba 2c 00 00 00\n48 8d bc 24 83 00 00 00\n48 89 c6\ne8 dc da ff ff\n49 89 c7\n48 83 7b 10 ff\n74 62\n44 89 ed\n4d 89 f5\n49 83 c5 02\n41 c6 46 02 00\n66 41 c7 06 20 2d\n4c 8b 74 24 70\n49 8d 7e 01\n4c 89 e6\ne8 bc 76 00 00\n4c 89 ef\n41 89 ed\n48 89 c6\ne8 4e d8 ff ff\n4c 89 fd\n48 ff c5\n66 41 c7 07 2c 00\n31 c0\n48 83 7b 18 ff\n0f 94 c0\n4a 8d 7c 30 01\n4c 89 e6\ne8 8b 76 00 00\n48 89 ef\n48 89 c6\ne8 20 d8 ff ff\n31 ff\nbe d9 3c 41 00\nba 05 00 00 00\ne8 1f d8 ff ff\n49 89 c6\n31 ff\n48 8d b4 24 b0 00 00 00\ne8 fd 90 00 00\n49 89 c7\nbf 01 00 00 00\n48 8d b4 24 80 00 00 00\ne8 e8 90 00 00\n48 89 c5\n31 ff\n31 f6\n31 c0\n4c 89 f2\n4c 89 f9\n49 89 e8\ne8 91 db ff ff\n44 0f b6 74 24 09\n44 0f b6 7c 24 08\n44 0f b6 64 24 07\n48 8b 03\n48 83 f8 ff\n74 2d\n48 39 43 10\n73 27\n31 ff\nbe 06 3d 41 00\nba 05 00 00 00\ne8 af d7 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n48 8b 4c 24 10\ne8 49 db ff ff\n48 89 df\ne8 81 0f 00 00\n40 b5 01\n84 c0\n75 08\n80 7b 36 00\n40 0f 95 c5\n80 3d 7b 57 21 00 00\n75 29\n48 89 df\ne8 b1 fc ff ff\n84 c0\n74 1d\nb0 01\n48 83 7b 08 00\n75 08\n48 83 7b 18 00\n0f 95 c0\n34 01\n48 83 7b 10 00\n75 0c\neb 21\n31 c0\n48 83 7b 10 00\n74 17\n31 c9\n84 c9\n74 1d\ne9 83 00 00 00\n48 83 7b 18 00\n0f 95 c1\n84 c9\n75 6b\n81 3d 4a 55 21 00 80 00 00 00\n75 5f\n45 84 ed\n75 5a\n0f b6 4b 30\n84 c9\n0f 95 c2\n40 08 d5\n40 08 e8\n3c 01\n75 20\n84 c9\n74 0f\n80 7b 31 00\n75 3d\n48 83 7b 18 00\n75 0f\neb 34\n48 83 7b 08 00\n74 ea\n66 0f 1f 44 00 00\n31 ff\nbe 31 3d 41 00\nba 05 00 00 00\ne8 cf d6 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n48 8b 4c 24 10\ne8 69 da ff ff\n45 84 ed\n75 54\n48 89 df\ne8 9c 0e 00 00\n84 c0\n74 48\n48 8b 03\n48 8d 48 01\n48 83 c0 02\n48 85 c9\n48 0f 45 c1\n48 39 43 10\n72 30\n31 ff\nbe 79 3d 41 00\nba 05 00 00 00\ne8 7f d6 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n48 8b 4c 24 10\ne8 19 da ff ff\n66 0f 1f 84 00 00 00 00 00\n48 8b 4c 24 18\n48 85 c9\n0f b6 74 24 0e\n0f b6 7c 24 0d\n44 0f b6 44 24 0c\n44 0f b6 4c 24 0b\n0f b6 54 24 0a\n48 8b 6c 24 78\n74 16\n48 3b 4b 20\nb8 00 00 00 00\n48 0f 44 c8\neb 09\n31 c9\n48 85 ed\n48 89 4c 24 18\n74 14\n48 3b 6b 28\nb8 00 00 00 00\n48 0f 44 e8\neb 07\n31 ed\n0f b6 43 30\n0f b6 4b 31\n34 01\n20 c2\n80 f1 01\n41 20 c9\n0f b6 43 36\n34 01\n41 20 c0\n0f b6 43 32\n34 01\n40 20 c7\n0f b6 43 34\n34 01\n40 20 c6\n0f b6 43 35\n34 01\n0f b6 4c 24 0f\n20 c1\n0f b6 43 33\n34 01\n41 20 c4\n0f b6 43 38\n34 01\n41 20 c7\n0f b6 43 37\n34 01\n41 20 c6\n48 ff 44 24 10\n48 8b 5b 40\n48 85 db\n0f 85 47 fc ff ff\n48 8b 44 24 18\n48 89 44 24 40\n48 89 6c 24 48\n88 54 24 50\n44 88 4c 24 51\n44 88 44 24 56\n40 88 7c 24 52\n40 88 74 24 54\n88 4c 24 55\n44 88 64 24 53\n44 88 7c 24 58\n44 88 74 24 57\n48 8d 7c 24 20\ne8 93 fa ff ff\n84 c0\n74 3d\n80 7c 24 57 00\n0f 84 a8 00 00 00\n8a 05 d7 55 21 00\n84 c0\n74 0f\n48 83 3d d2 55 21 00 00\n75 1e\ne9 8f 00 00 00\n80 3d be 55 21 00 01\n0f 85 82 00 00 00\n48 8b 05 b7 55 21 00\n48 85 c0\n74 76\n40 8a 6c 24 57\n8a 05 a0 55 21 00\n84 c0\n75 0f\n8a 05 97 55 21 00\n84 c0\n75 05\nc6 44 24 57 00\n48 8d 7c 24 20\n48 8d 9c 24 80 00 00 00\n48 89 de\ne8 ef 0c 00 00\n48 89 df\ne8 f7 d4 ff ff\n48 89 c7\ne8 7f 0d 00 00\n31 ff\nbe a6 3d 41 00\nba be 3d 41 00\n41 b8 05 00 00 00\n48 89 c1\ne8 b5 d8 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n48 89 d9\ne8 51 d8 ff ff\n40 88 6c 24 57\n80 7c 24 57 00\n74 42\n8a 05 28 55 21 00\n84 c0\n75 38\n48 83 3d 23 55 21 00 00\n74 2e\n8a 05 15 55 21 00\n34 01\na8 01\n74 22\n31 ff\nbe d8 3d 41 00\nba 05 00 00 00\ne8 64 d4 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 03 d8 ff ff\n48 81 c4 f8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1083
S'.text:0000000000404bc0\n.text:0000000000404bc1\n.text:0000000000404bc3\n.text:0000000000404bc5\n.text:0000000000404bc7\n.text:0000000000404bc9\n.text:0000000000404bca\n.text:0000000000404bd1\n.text:0000000000404bd4\n.text:0000000000404bd8\n.text:0000000000404bdd\n.text:0000000000404be0\n.text:0000000000404be4\n.text:0000000000404be8\n.text:0000000000404bec\n.text:0000000000404bf1\n.text:0000000000404bf6\n.text:0000000000404bfb\n.text:0000000000404c00\n.text:0000000000404c07\n.text:0000000000404c0a\n.text:0000000000404c10\n.text:0000000000404c15\n.text:0000000000404c1a\n.text:0000000000404c1f\n.text:0000000000404c23\n.text:0000000000404c28\n.text:0000000000404c2d\n.text:0000000000404c32\n.text:0000000000404c37\n.text:0000000000404c3b\n.text:0000000000404c40\n.text:0000000000404c45\n.text:0000000000404c4a\n.text:0000000000404c4f\n.text:0000000000404c54\n.text:0000000000404c60\n.text:0000000000404c65\n.text:0000000000404c69\n.text:0000000000404c6e\n.text:0000000000404c73\n.text:0000000000404c78\n.text:0000000000404c7d\n.text:0000000000404c81\n.text:0000000000404c85\n.text:0000000000404c8b\n.text:0000000000404c90\n.text:0000000000404c95\n.text:0000000000404c9a\n.text:0000000000404c9d\n.text:0000000000404ca1\n.text:0000000000404ca6\n.text:0000000000404ca8\n.text:0000000000404cac\n.text:0000000000404cb0\n.text:0000000000404cb5\n.text:0000000000404cbf\n.text:0000000000404cc7\n.text:0000000000404cca\n.text:0000000000404ccf\n.text:0000000000404cd4\n.text:0000000000404cdc\n.text:0000000000404cdf\n.text:0000000000404ce4\n.text:0000000000404ce7\n.text:0000000000404cf2\n.text:0000000000404cf7\n.text:0000000000404cfa\n.text:0000000000404cff\n.text:0000000000404d04\n.text:0000000000404d0c\n.text:0000000000404d0f\n.text:0000000000404d14\n.text:0000000000404d17\n.text:0000000000404d1c\n.text:0000000000404d1e\n.text:0000000000404d21\n.text:0000000000404d24\n.text:0000000000404d28\n.text:0000000000404d2d\n.text:0000000000404d33\n.text:0000000000404d38\n.text:0000000000404d3c\n.text:0000000000404d3f\n.text:0000000000404d44\n.text:0000000000404d47\n.text:0000000000404d4a\n.text:0000000000404d4d\n.text:0000000000404d52\n.text:0000000000404d55\n.text:0000000000404d58\n.text:0000000000404d5e\n.text:0000000000404d60\n.text:0000000000404d65\n.text:0000000000404d68\n.text:0000000000404d6d\n.text:0000000000404d70\n.text:0000000000404d75\n.text:0000000000404d78\n.text:0000000000404d7b\n.text:0000000000404d80\n.text:0000000000404d82\n.text:0000000000404d87\n.text:0000000000404d8c\n.text:0000000000404d91\n.text:0000000000404d94\n.text:0000000000404d96\n.text:0000000000404d9e\n.text:0000000000404da3\n.text:0000000000404da6\n.text:0000000000404dab\n.text:0000000000404db3\n.text:0000000000404db8\n.text:0000000000404dbb\n.text:0000000000404dbd\n.text:0000000000404dbf\n.text:0000000000404dc1\n.text:0000000000404dc4\n.text:0000000000404dc7\n.text:0000000000404dca\n.text:0000000000404dcf\n.text:0000000000404dd5\n.text:0000000000404ddb\n.text:0000000000404de1\n.text:0000000000404de4\n.text:0000000000404de8\n.text:0000000000404dea\n.text:0000000000404dee\n.text:0000000000404df0\n.text:0000000000404df2\n.text:0000000000404df7\n.text:0000000000404dfc\n.text:0000000000404e01\n.text:0000000000404e04\n.text:0000000000404e06\n.text:0000000000404e08\n.text:0000000000404e0a\n.text:0000000000404e0d\n.text:0000000000404e12\n.text:0000000000404e17\n.text:0000000000404e1a\n.text:0000000000404e1f\n.text:0000000000404e22\n.text:0000000000404e24\n.text:0000000000404e26\n.text:0000000000404e2a\n.text:0000000000404e2e\n.text:0000000000404e35\n.text:0000000000404e37\n.text:0000000000404e3a\n.text:0000000000404e3f\n.text:0000000000404e41\n.text:0000000000404e43\n.text:0000000000404e45\n.text:0000000000404e4a\n.text:0000000000404e4c\n.text:0000000000404e51\n.text:0000000000404e54\n.text:0000000000404e56\n.text:0000000000404e5b\n.text:0000000000404e5d\n.text:0000000000404e60\n.text:0000000000404e62\n.text:0000000000404e67\n.text:0000000000404e69\n.text:0000000000404e6b\n.text:0000000000404e6d\n.text:0000000000404e6f\n.text:0000000000404e80\n.text:0000000000404e85\n.text:0000000000404e88\n.text:0000000000404e8a\n.text:0000000000404e8c\n.text:0000000000404e96\n.text:0000000000404e98\n.text:0000000000404e9b\n.text:0000000000404e9d\n.text:0000000000404ea1\n.text:0000000000404ea3\n.text:0000000000404ea6\n.text:0000000000404ea9\n.text:0000000000404eac\n.text:0000000000404eae\n.text:0000000000404eb0\n.text:0000000000404eb2\n.text:0000000000404eb4\n.text:0000000000404eb8\n.text:0000000000404eba\n.text:0000000000404ebf\n.text:0000000000404ec1\n.text:0000000000404ec3\n.text:0000000000404ec8\n.text:0000000000404eca\n.text:0000000000404ed0\n.text:0000000000404ed2\n.text:0000000000404ed7\n.text:0000000000404edc\n.text:0000000000404ee1\n.text:0000000000404ee4\n.text:0000000000404ee6\n.text:0000000000404ee8\n.text:0000000000404eea\n.text:0000000000404eed\n.text:0000000000404ef2\n.text:0000000000404ef7\n.text:0000000000404efa\n.text:0000000000404efc\n.text:0000000000404eff\n.text:0000000000404f04\n.text:0000000000404f06\n.text:0000000000404f08\n.text:0000000000404f0b\n.text:0000000000404f0f\n.text:0000000000404f13\n.text:0000000000404f16\n.text:0000000000404f1a\n.text:0000000000404f1e\n.text:0000000000404f20\n.text:0000000000404f22\n.text:0000000000404f27\n.text:0000000000404f2c\n.text:0000000000404f31\n.text:0000000000404f34\n.text:0000000000404f36\n.text:0000000000404f38\n.text:0000000000404f3a\n.text:0000000000404f3d\n.text:0000000000404f42\n.text:0000000000404f47\n.text:0000000000404f50\n.text:0000000000404f55\n.text:0000000000404f58\n.text:0000000000404f5d\n.text:0000000000404f62\n.text:0000000000404f68\n.text:0000000000404f6e\n.text:0000000000404f73\n.text:0000000000404f78\n.text:0000000000404f7a\n.text:0000000000404f7e\n.text:0000000000404f83\n.text:0000000000404f87\n.text:0000000000404f90\n.text:0000000000404f92\n.text:0000000000404f95\n.text:0000000000404f9a\n.text:0000000000404f9c\n.text:0000000000404fa0\n.text:0000000000404fa5\n.text:0000000000404fa9\n.text:0000000000404fb0\n.text:0000000000404fb2\n.text:0000000000404fb6\n.text:0000000000404fba\n.text:0000000000404fbc\n.text:0000000000404fbe\n.text:0000000000404fc1\n.text:0000000000404fc4\n.text:0000000000404fc8\n.text:0000000000404fca\n.text:0000000000404fcd\n.text:0000000000404fd1\n.text:0000000000404fd3\n.text:0000000000404fd6\n.text:0000000000404fda\n.text:0000000000404fdc\n.text:0000000000404fdf\n.text:0000000000404fe3\n.text:0000000000404fe5\n.text:0000000000404fea\n.text:0000000000404fec\n.text:0000000000404ff0\n.text:0000000000404ff2\n.text:0000000000404ff5\n.text:0000000000404ff9\n.text:0000000000404ffb\n.text:0000000000404ffe\n.text:0000000000405002\n.text:0000000000405004\n.text:0000000000405007\n.text:000000000040500c\n.text:0000000000405010\n.text:0000000000405013\n.text:0000000000405019\n.text:000000000040501e\n.text:0000000000405023\n.text:0000000000405028\n.text:000000000040502c\n.text:0000000000405031\n.text:0000000000405036\n.text:000000000040503b\n.text:0000000000405040\n.text:0000000000405044\n.text:0000000000405049\n.text:000000000040504e\n.text:0000000000405053\n.text:0000000000405058\n.text:000000000040505d\n.text:000000000040505f\n.text:0000000000405061\n.text:0000000000405066\n.text:000000000040506c\n.text:0000000000405072\n.text:0000000000405074\n.text:0000000000405076\n.text:000000000040507e\n.text:0000000000405080\n.text:0000000000405085\n.text:000000000040508c\n.text:0000000000405092\n.text:0000000000405099\n.text:000000000040509c\n.text:000000000040509e\n.text:00000000004050a3\n.text:00000000004050a9\n.text:00000000004050ab\n.text:00000000004050ad\n.text:00000000004050b3\n.text:00000000004050b5\n.text:00000000004050b7\n.text:00000000004050bc\n.text:00000000004050c1\n.text:00000000004050c9\n.text:00000000004050cc\n.text:00000000004050d1\n.text:00000000004050d4\n.text:00000000004050d9\n.text:00000000004050dc\n.text:00000000004050e1\n.text:00000000004050e3\n.text:00000000004050e8\n.text:00000000004050ed\n.text:00000000004050f3\n.text:00000000004050f6\n.text:00000000004050fb\n.text:00000000004050fe\n.text:0000000000405100\n.text:0000000000405102\n.text:0000000000405104\n.text:0000000000405107\n.text:000000000040510a\n.text:000000000040510f\n.text:0000000000405114\n.text:0000000000405119\n.text:000000000040511b\n.text:0000000000405121\n.text:0000000000405123\n.text:0000000000405125\n.text:000000000040512d\n.text:000000000040512f\n.text:0000000000405135\n.text:0000000000405137\n.text:0000000000405139\n.text:000000000040513b\n.text:000000000040513d\n.text:0000000000405142\n.text:0000000000405147\n.text:000000000040514c\n.text:000000000040514f\n.text:0000000000405151\n.text:0000000000405153\n.text:0000000000405155\n.text:0000000000405158\n.text:000000000040515d\n.text:0000000000405164\n.text:0000000000405165\n.text:0000000000405167\n.text:0000000000405169\n.text:000000000040516b\n.text:000000000040516d\n.text:000000000040516e\n'
p1084
tp1085
sS'pthread_mutex_init'
p1086
(S'\n__stdcall pthread_mutex_init(pthread_mutex_t * __mutex, pthread_mutexattr_t * __mutexattr)\n'
p1087
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint pthread_mutex_init(pthread_mutex_t *__mutex,pthread_mutexattr_t *__mutexattr)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_pthread_mutex_init_0061a3a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1088
S'JMP qword ptr [0x0061a3a0]\n'
p1089
S'ff 25 ba 78 21 00\n'
p1090
S'.plt:0000000000402ae0\n'
p1091
tp1092
sS'make_timespec'
p1093
(S'\n__stdcall make_timespec(time_t s, long ns)\n'
p1094
V\u000atimespec make_timespec(time_t s,long ns)\u000a\u000a{\u000a  return (timespec)CONCAT88(ns,s);\u000a}\u000a\u000a
p1095
S'MOV RAX,RDI\nMOV RDX,RSI\nRET\n'
p1096
S'48 89 f8\n48 89 f2\nc3\n'
p1097
S'.text:00000000004114a0\n.text:00000000004114a3\n.text:00000000004114a6\n'
p1098
tp1099
sS'nan_compare'
p1100
(S'\n__stdcall nan_compare(char * sa, char * sb)\n'
p1101
V\u000aint nan_compare(char *sa,char *sb)\u000a\u000a{\u000a  int iVar1;\u000a  unkbyte10 in_ST0;\u000a  unkbyte10 in_ST1;\u000a  undefined4 local_28;\u000a  undefined4 uStack36;\u000a  undefined2 uStack32;\u000a  undefined2 uStack30;\u000a  undefined4 uStack28;\u000a  undefined4 local_18;\u000a  undefined4 uStack20;\u000a  undefined2 uStack16;\u000a  undefined2 uStack14;\u000a  undefined4 uStack12;\u000a  \u000a  local_18 = 0;\u000a  uStack20 = 0;\u000a  uStack16 = 0;\u000a  uStack14 = 0;\u000a  uStack12 = 0;\u000a  strtold(sa,(char **)0x0);\u000a  local_18 = (undefined4)in_ST0;\u000a  uStack20 = (undefined4)((unkuint10)in_ST0 >> 0x20);\u000a  uStack16 = (undefined2)((unkuint10)in_ST0 >> 0x40);\u000a  local_28 = 0;\u000a  uStack36 = 0;\u000a  uStack32 = 0;\u000a  uStack30 = 0;\u000a  uStack28 = 0;\u000a  strtold(sb,(char **)0x0);\u000a  local_28 = (undefined4)in_ST1;\u000a  uStack36 = (undefined4)((unkuint10)in_ST1 >> 0x20);\u000a  uStack32 = (undefined2)((unkuint10)in_ST1 >> 0x40);\u000a  iVar1 = memcmp(&local_18,&local_28,0x10);\u000a  return iVar1;\u000a}\u000a\u000a
p1102
S'PUSH RBX\nSUB RSP,0x20\nMOV RBX,RSI\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nXOR ESI,ESI\nCALL 0x00402950\nFSTP tword ptr [RSP + 0x10]\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x00402950\nFSTP tword ptr [RSP]\nLEA RDI,[RSP + 0x10]\nMOV RSI,RSP\nMOV EDX,0x10\nCALL 0x00402710\nADD RSP,0x20\nPOP RBX\nRET\n'
p1103
S'53\n48 83 ec 20\n48 89 f3\n0f 57 c0\n0f 29 44 24 10\n31 f6\ne8 99 b2 ff ff\ndb 7c 24 10\n0f 57 c0\n0f 29 04 24\n31 f6\n48 89 df\ne8 84 b2 ff ff\ndb 3c 24\n48 8d 7c 24 10\n48 89 e6\nba 10 00 00 00\ne8 2f b0 ff ff\n48 83 c4 20\n5b\nc3\n'
p1104
S'.text:00000000004076a0\n.text:00000000004076a1\n.text:00000000004076a5\n.text:00000000004076a8\n.text:00000000004076ab\n.text:00000000004076b0\n.text:00000000004076b2\n.text:00000000004076b7\n.text:00000000004076bb\n.text:00000000004076be\n.text:00000000004076c2\n.text:00000000004076c4\n.text:00000000004076c7\n.text:00000000004076cc\n.text:00000000004076cf\n.text:00000000004076d4\n.text:00000000004076d7\n.text:00000000004076dc\n.text:00000000004076e1\n.text:00000000004076e5\n.text:00000000004076e6\n'
p1105
tp1106
sS'filevercmp'
p1107
(S'\n__stdcall filevercmp(char * s1, char * s2)\n'
p1108
V\u000aint filevercmp(char *s1,char *s2)\u000a\u000a{\u000a  char *pcVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  char *pcVar4;\u000a  char *pcVar5;\u000a  char cVar6;\u000a  char *s2_len;\u000a  char *__n;\u000a  char *local_48;\u000a  char *local_40;\u000a  char *local_38;\u000a  \u000a  iVar2 = strcmp(s1,s2);\u000a  if (iVar2 == 0) {\u000a    return 0;\u000a  }\u000a  if (*s1 == 0) {\u000a    return -1;\u000a  }\u000a  if (*s2 != 0) {\u000a    if ((*s1 == '.') && (s1[1] == 0)) {\u000a      return -1;\u000a    }\u000a    if ((*s2 != '.') || (s2[1] != 0)) {\u000a      if ((*s1 == '.') && ((s1[1] == '.' && (s1[2] == 0)))) {\u000a        return -1;\u000a      }\u000a      cVar6 = *s2;\u000a      if (cVar6 == '.') {\u000a        if ((s2[1] == '.') && (s2[2] == 0)) {\u000a          return 1;\u000a        }\u000a        cVar6 = *s2;\u000a      }\u000a      if (*s1 == '.') {\u000a        if (cVar6 != '.') {\u000a          return -1;\u000a        }\u000a        if (*s2 == '.') {\u000a          s1 = s1 + 1;\u000a          s2 = s2 + 1;\u000a        }\u000a      }\u000a      else {\u000a        if (cVar6 == '.') {\u000a          return 1;\u000a        }\u000a      }\u000a      local_48 = s2;\u000a      local_40 = s1;\u000a      pcVar4 = match_suffix(&local_40);\u000a      pcVar5 = match_suffix(&local_48);\u000a      pcVar1 = local_40;\u000a      __n = local_40;\u000a      if (pcVar4 != (char *)0x0) {\u000a        __n = pcVar4;\u000a      }\u000a      __n = __n + -(long)s1;\u000a      s2_len = local_48;\u000a      if (pcVar5 != (char *)0x0) {\u000a        s2_len = pcVar5;\u000a      }\u000a      s2_len = s2_len + -(long)s2;\u000a      if ((((ulong)pcVar4 | (ulong)pcVar5) != 0) && (__n == s2_len)) {\u000a        local_38 = local_48;\u000a        iVar3 = strncmp(s1,s2,(size_t)__n);\u000a        if (iVar3 == 0) {\u000a          __n = pcVar1 + -(long)s1;\u000a          s2_len = local_38 + -(long)s2;\u000a        }\u000a      }\u000a      iVar3 = verrevcmp(s1,(size_t)__n,s2,(size_t)s2_len);\u000a      if (iVar3 != 0) {\u000a        return iVar3;\u000a      }\u000a      return iVar2;\u000a    }\u000a  }\u000a  return 1;\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,RSI\nMOV RBP,RDI\nCALL 0x00402770\nMOV R14D,EAX\nTEST R14D,R14D\nJZ 0x0040acd7\nMOV CL,byte ptr [RBP]\nMOV EAX,0xffffffff\nTEST CL,CL\nJZ 0x0040ad83\nCMP byte ptr [RBX],0x0\nJZ 0x0040acde\nCMP CL,0x2e\nJNZ 0x0040ac85\nCMP byte ptr [RBP + 0x1],0x0\nJZ 0x0040ad83\nCMP byte ptr [RBX],0x2e\nJNZ 0x0040ac90\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x0040acde\nCMP byte ptr [RBP],0x2e\nJNZ 0x0040aca6\nCMP byte ptr [RBP + 0x1],0x2e\nJNZ 0x0040aca6\nCMP byte ptr [RBP + 0x2],0x0\nJZ 0x0040ad83\nMOV CL,byte ptr [RBX]\nCMP CL,0x2e\nJNZ 0x0040acbb\nCMP byte ptr [RBX + 0x1],0x2e\nJNZ 0x0040acb9\nCMP byte ptr [RBX + 0x2],0x0\nJZ 0x0040acde\nMOV CL,byte ptr [RBX]\nCMP byte ptr [RBP],0x2e\nJNZ 0x0040ace8\nCMP CL,0x2e\nJNZ 0x0040ad83\nCMP byte ptr [RBX],0x2e\nJNZ 0x0040acf6\nINC RBP\nINC RBX\nJMP 0x0040acf6\nXOR EAX,EAX\nJMP 0x0040ad83\nMOV EAX,0x1\nJMP 0x0040ad83\nCMP CL,0x2e\nMOV EAX,0x1\nJZ 0x0040ad83\nMOV qword ptr [RSP + 0x8],RBP\nMOV qword ptr [RSP],RBX\nLEA RDI,[RSP + 0x8]\nCALL 0x0040ada0\nMOV R13,RAX\nMOV RDI,RSP\nCALL 0x0040ada0\nTEST R13,R13\nMOV RCX,qword ptr [RSP + 0x8]\nMOV R15,RCX\nCMOVNZ R15,R13\nSUB R15,RBP\nTEST RAX,RAX\nMOV RDX,qword ptr [RSP]\nMOV R12,RDX\nCMOVNZ R12,RAX\nSUB R12,RBX\nOR R13,RAX\nJZ 0x0040ad69\nCMP R15,R12\nJNZ 0x0040ad69\nMOV qword ptr [RSP + 0x10],RDX\nMOV R13,RCX\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,R15\nCALL 0x00402450\nTEST EAX,EAX\nJNZ 0x0040ad69\nMOV R15,R13\nSUB R15,RBP\nMOV R12,qword ptr [RSP + 0x10]\nSUB R12,RBX\nMOV RDI,RBP\nMOV RSI,R15\nMOV RDX,RBX\nMOV RCX,R12\nCALL 0x0040ae50\nTEST EAX,EAX\nCMOVNZ R14D,EAX\nMOV EAX,R14D\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1110
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 f3\n48 89 fd\ne8 17 7b ff ff\n41 89 c6\n45 85 f6\n74 76\n8a 4d 00\nb8 ff ff ff ff\n84 c9\n0f 84 12 01 00 00\n80 3b 00\n74 68\n80 f9 2e\n75 0a\n80 7d 01 00\n0f 84 fe 00 00 00\n80 3b 2e\n75 06\n80 7b 01 00\n74 4e\n80 7d 00 2e\n75 10\n80 7d 01 2e\n75 0a\n80 7d 02 00\n0f 84 dd 00 00 00\n8a 0b\n80 f9 2e\n75 0e\n80 7b 01 2e\n75 06\n80 7b 02 00\n74 25\n8a 0b\n80 7d 00 2e\n75 27\n80 f9 2e\n0f 85 b9 00 00 00\n80 3b 2e\n75 27\n48 ff c5\n48 ff c3\neb 1f\n31 c0\ne9 a5 00 00 00\nb8 01 00 00 00\ne9 9b 00 00 00\n80 f9 2e\nb8 01 00 00 00\n0f 84 8d 00 00 00\n48 89 6c 24 08\n48 89 1c 24\n48 8d 7c 24 08\ne8 97 00 00 00\n49 89 c5\n48 89 e7\ne8 8c 00 00 00\n4d 85 ed\n48 8b 4c 24 08\n49 89 cf\n4d 0f 45 fd\n49 29 ef\n48 85 c0\n48 8b 14 24\n49 89 d4\n4c 0f 45 e0\n49 29 dc\n49 09 c5\n74 2d\n4d 39 e7\n75 28\n48 89 54 24 10\n49 89 cd\n48 89 ef\n48 89 de\n4c 89 fa\ne8 f9 76 ff ff\n85 c0\n75 0e\n4d 89 ef\n49 29 ef\n4c 8b 64 24 10\n49 29 dc\n48 89 ef\n4c 89 fe\n48 89 da\n4c 89 e1\ne8 d6 00 00 00\n85 c0\n44 0f 45 f0\n44 89 f0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1111
S'.text:000000000040ac40\n.text:000000000040ac41\n.text:000000000040ac43\n.text:000000000040ac45\n.text:000000000040ac47\n.text:000000000040ac49\n.text:000000000040ac4a\n.text:000000000040ac4e\n.text:000000000040ac51\n.text:000000000040ac54\n.text:000000000040ac59\n.text:000000000040ac5c\n.text:000000000040ac5f\n.text:000000000040ac61\n.text:000000000040ac64\n.text:000000000040ac69\n.text:000000000040ac6b\n.text:000000000040ac71\n.text:000000000040ac74\n.text:000000000040ac76\n.text:000000000040ac79\n.text:000000000040ac7b\n.text:000000000040ac7f\n.text:000000000040ac85\n.text:000000000040ac88\n.text:000000000040ac8a\n.text:000000000040ac8e\n.text:000000000040ac90\n.text:000000000040ac94\n.text:000000000040ac96\n.text:000000000040ac9a\n.text:000000000040ac9c\n.text:000000000040aca0\n.text:000000000040aca6\n.text:000000000040aca8\n.text:000000000040acab\n.text:000000000040acad\n.text:000000000040acb1\n.text:000000000040acb3\n.text:000000000040acb7\n.text:000000000040acb9\n.text:000000000040acbb\n.text:000000000040acbf\n.text:000000000040acc1\n.text:000000000040acc4\n.text:000000000040acca\n.text:000000000040accd\n.text:000000000040accf\n.text:000000000040acd2\n.text:000000000040acd5\n.text:000000000040acd7\n.text:000000000040acd9\n.text:000000000040acde\n.text:000000000040ace3\n.text:000000000040ace8\n.text:000000000040aceb\n.text:000000000040acf0\n.text:000000000040acf6\n.text:000000000040acfb\n.text:000000000040acff\n.text:000000000040ad04\n.text:000000000040ad09\n.text:000000000040ad0c\n.text:000000000040ad0f\n.text:000000000040ad14\n.text:000000000040ad17\n.text:000000000040ad1c\n.text:000000000040ad1f\n.text:000000000040ad23\n.text:000000000040ad26\n.text:000000000040ad29\n.text:000000000040ad2d\n.text:000000000040ad30\n.text:000000000040ad34\n.text:000000000040ad37\n.text:000000000040ad3a\n.text:000000000040ad3c\n.text:000000000040ad3f\n.text:000000000040ad41\n.text:000000000040ad46\n.text:000000000040ad49\n.text:000000000040ad4c\n.text:000000000040ad4f\n.text:000000000040ad52\n.text:000000000040ad57\n.text:000000000040ad59\n.text:000000000040ad5b\n.text:000000000040ad5e\n.text:000000000040ad61\n.text:000000000040ad66\n.text:000000000040ad69\n.text:000000000040ad6c\n.text:000000000040ad6f\n.text:000000000040ad72\n.text:000000000040ad75\n.text:000000000040ad7a\n.text:000000000040ad7c\n.text:000000000040ad80\n.text:000000000040ad83\n.text:000000000040ad87\n.text:000000000040ad88\n.text:000000000040ad8a\n.text:000000000040ad8c\n.text:000000000040ad8e\n.text:000000000040ad90\n.text:000000000040ad91\n'
p1112
tp1113
sS'bkm_scale'
p1114
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p1115
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p1116
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p1117
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p1118
S'.text:0000000000410530\n.text:0000000000410533\n.text:000000000041053a\n.text:0000000000410541\n.text:0000000000410543\n.text:0000000000410546\n.text:0000000000410549\n.text:000000000041054d\n.text:0000000000410550\n.text:0000000000410554\n.text:0000000000410556\n.text:0000000000410559\n.text:000000000041055c\n'
p1119
tp1120
sS'memchr'
p1121
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p1122
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_0061a1a8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1123
S'JMP qword ptr [0x0061a1a8]\n'
p1124
S'ff 25 b2 7a 21 00\n'
p1125
S'.plt:00000000004026f0\n'
p1126
tp1127
sS'quotearg_style_mem'
p1128
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1129
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1130
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x0040dc50\n'
p1131
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1132
S'.text:000000000040dcb0\n.text:000000000040dcb3\n.text:000000000040dcb6\n.text:000000000040dcb8\n.text:000000000040dcba\n.text:000000000040dcbc\n.text:000000000040dcbf\n.text:000000000040dcc2\n'
p1133
tp1134
sS'xalloc_die'
p1135
(S'\n__stdcall xalloc_die()\n'
p1136
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,&DAT_004140eb,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1137
S'PUSH RBX\nMOV EBX,dword ptr [0x0061a4e0]\nXOR EDI,EDI\nMOV ESI,0x414e2f\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x4140eb\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00402960\nCALL 0x00402420\n'
p1138
S'53\n8b 1d c9 a7 20 00\n31 ff\nbe 2f 4e 41 00\nba 05 00 00 00\ne8 88 28 ff ff\n48 89 c1\n31 f6\nba eb 40 41 00\n31 c0\n89 df\ne8 25 2c ff ff\ne8 e0 26 ff ff\n'
p1139
S'.text:000000000040fd10\n.text:000000000040fd11\n.text:000000000040fd17\n.text:000000000040fd19\n.text:000000000040fd1e\n.text:000000000040fd23\n.text:000000000040fd28\n.text:000000000040fd2b\n.text:000000000040fd2d\n.text:000000000040fd32\n.text:000000000040fd34\n.text:000000000040fd36\n.text:000000000040fd3b\n'
p1140
tp1141
sS'reap_all'
p1142
(S'\n__stdcall reap_all()\n'
p1143
V\u000aundefined8 reap_all(void)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  \u000a  if (0 < nprocs) {\u000a    do {\u000a      reap();\u000a    } while (0 < nprocs);\u000a  }\u000a  return in_RAX;\u000a}\u000a\u000a
p1144
S'PUSH RAX\nCMP dword ptr [0x0061ab30],0x0\nJLE 0x00409273\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,0xffffffff\nCALL 0x00408ac0\nCMP dword ptr [0x0061ab30],0x0\nJG 0x00409260\nPOP RAX\nRET\n'
p1145
S'50\n83 3d d8 18 21 00 00\n7e 19\n66 0f 1f 44 00 00\nbf ff ff ff ff\ne8 56 f8 ff ff\n83 3d bf 18 21 00 00\n7f ed\n58\nc3\n'
p1146
S'.text:0000000000409250\n.text:0000000000409251\n.text:0000000000409258\n.text:000000000040925a\n.text:0000000000409260\n.text:0000000000409265\n.text:000000000040926a\n.text:0000000000409271\n.text:0000000000409273\n.text:0000000000409274\n'
p1147
tp1148
sS'fopen_safer'
p1149
(S'\n__stdcall fopen_safer(char * file, char * mode)\n'
p1150
V\u000aFILE * fopen_safer(char *file,char *mode)\u000a\u000a{\u000a  uint uVar1;\u000a  int __fd;\u000a  int iVar2;\u000a  FILE *fp;\u000a  int *piVar3;\u000a  \u000a  fp = (FILE *)fopen(file,mode);\u000a  if (fp != (FILE *)0x0) {\u000a    uVar1 = fileno((FILE *)fp);\u000a    if (2 < uVar1) {\u000a      return fp;\u000a    }\u000a    __fd = dup_safer();\u000a    if (__fd < 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      rpl_fclose(fp);\u000a      *piVar3 = __fd;\u000a    }\u000a    else {\u000a      iVar2 = rpl_fclose(fp);\u000a      if ((iVar2 == 0) && (fp = (FILE *)fdopen(__fd,mode), fp != (FILE *)0x0)) {\u000a        return fp;\u000a      }\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a    }\u000a  }\u000a  return (FILE *)0x0;\u000a}\u000a\u000a
p1151
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nCALL 0x004029a0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040b0db\nMOV RDI,RBX\nCALL 0x004027e0\nCMP EAX,0x2\nJA 0x0040b0dd\nMOV EDI,EAX\nCALL 0x0040f600\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040b0c3\nMOV RDI,RBX\nCALL 0x004105f0\nTEST EAX,EAX\nJNZ 0x0040b0ac\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00402900\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x0040b0dd\nCALL 0x00402430\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x004026c0\nMOV dword ptr [RBX],R14D\nJMP 0x0040b0db\nCALL 0x00402430\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV RDI,RBX\nCALL 0x004105f0\nMOV dword ptr [RBP],R14D\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1152
S'55\n41 56\n53\n49 89 f6\ne8 34 79 ff ff\n48 89 c3\n48 85 db\n74 67\n48 89 df\ne8 64 77 ff ff\n83 f8 02\n77 5c\n89 c7\ne8 78 45 00 00\n89 c5\n85 ed\n78 35\n48 89 df\ne8 5a 55 00 00\n85 c0\n75 12\n89 ef\n4c 89 f6\ne8 5c 78 ff ff\n48 89 c3\n48 85 db\n75 31\ne8 7f 73 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 02 76 ff ff\n44 89 33\neb 18\ne8 68 73 ff ff\n48 89 c5\n44 8b 75 00\n48 89 df\ne8 19 55 00 00\n44 89 75 00\n31 db\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p1153
S'.text:000000000040b060\n.text:000000000040b061\n.text:000000000040b063\n.text:000000000040b064\n.text:000000000040b067\n.text:000000000040b06c\n.text:000000000040b06f\n.text:000000000040b072\n.text:000000000040b074\n.text:000000000040b077\n.text:000000000040b07c\n.text:000000000040b07f\n.text:000000000040b081\n.text:000000000040b083\n.text:000000000040b088\n.text:000000000040b08a\n.text:000000000040b08c\n.text:000000000040b08e\n.text:000000000040b091\n.text:000000000040b096\n.text:000000000040b098\n.text:000000000040b09a\n.text:000000000040b09c\n.text:000000000040b09f\n.text:000000000040b0a4\n.text:000000000040b0a7\n.text:000000000040b0aa\n.text:000000000040b0ac\n.text:000000000040b0b1\n.text:000000000040b0b4\n.text:000000000040b0b7\n.text:000000000040b0b9\n.text:000000000040b0be\n.text:000000000040b0c1\n.text:000000000040b0c3\n.text:000000000040b0c8\n.text:000000000040b0cb\n.text:000000000040b0cf\n.text:000000000040b0d2\n.text:000000000040b0d7\n.text:000000000040b0db\n.text:000000000040b0dd\n.text:000000000040b0e0\n.text:000000000040b0e1\n.text:000000000040b0e3\n.text:000000000040b0e4\n'
p1154
tp1155
sS'md5_read_ctx'
p1156
(S'\n__stdcall md5_read_ctx(md5_ctx * ctx, void * resbuf)\n'
p1157
V\u000avoid * md5_read_ctx(md5_ctx *ctx,void *resbuf)\u000a\u000a{\u000a  set_uint32((char *)resbuf);\u000a  set_uint32((char *)((long)resbuf + 4));\u000a  set_uint32((char *)((long)resbuf + 8));\u000a  set_uint32((char *)((long)resbuf + 0xc));\u000a  return resbuf;\u000a}\u000a\u000a
p1158
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nMOV ESI,dword ptr [R14]\nMOV RDI,RBX\nCALL 0x0040a140\nLEA RDI,[RBX + 0x4]\nMOV ESI,dword ptr [R14 + 0x4]\nCALL 0x0040a140\nLEA RDI,[RBX + 0x8]\nMOV ESI,dword ptr [R14 + 0x8]\nCALL 0x0040a140\nLEA RDI,[RBX + 0xc]\nMOV ESI,dword ptr [R14 + 0xc]\nCALL 0x0040a140\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1159
S'41 56\n53\n50\n48 89 f3\n49 89 fe\n41 8b 36\n48 89 df\ne8 3b 00 00 00\n48 8d 7b 04\n41 8b 76 04\ne8 2e 00 00 00\n48 8d 7b 08\n41 8b 76 08\ne8 21 00 00 00\n48 8d 7b 0c\n41 8b 76 0c\ne8 14 00 00 00\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1160
S'.text:000000000040a0f0\n.text:000000000040a0f2\n.text:000000000040a0f3\n.text:000000000040a0f4\n.text:000000000040a0f7\n.text:000000000040a0fa\n.text:000000000040a0fd\n.text:000000000040a100\n.text:000000000040a105\n.text:000000000040a109\n.text:000000000040a10d\n.text:000000000040a112\n.text:000000000040a116\n.text:000000000040a11a\n.text:000000000040a11f\n.text:000000000040a123\n.text:000000000040a127\n.text:000000000040a12c\n.text:000000000040a12f\n.text:000000000040a133\n.text:000000000040a134\n.text:000000000040a136\n'
p1161
tp1162
sS'quotearg_n_custom'
p1163
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1164
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1165
S'MOV R8,-0x1\nJMP 0x0040ddd0\n'
p1166
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1167
S'.text:000000000040ddc0\n.text:000000000040ddc7\n'
p1168
tp1169
sS'waitpid'
p1170
(S'\n__stdcall waitpid(__pid_t __pid, int * __stat_loc, int __options)\n'
p1171
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t waitpid(__pid_t __pid,int *__stat_loc,int __options)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_waitpid_0061a2e8)();\u000a  return _Var1;\u000a}\u000a\u000a
p1172
S'JMP qword ptr [0x0061a2e8]\n'
p1173
S'ff 25 72 79 21 00\n'
p1174
S'.plt:0000000000402970\n'
p1175
tp1176
sS'badfieldspec'
p1177
(S'\n__stdcall badfieldspec(char * spec, char * msgid)\n'
p1178
V\u000avoid badfieldspec(char *spec,char *msgid)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  char *pcVar3;\u000a  \u000a  uVar1 = dcgettext(0,"%s: invalid field specification %s",5);\u000a  uVar2 = dcgettext(0,msgid,5);\u000a  pcVar3 = quote(spec);\u000a  error(2,0,uVar1,uVar2,pcVar3);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1179
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nXOR EDI,EDI\nMOV ESI,0x413b9a\nMOV EDX,0x5\nCALL 0x004025b0\nMOV R15,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004025b0\nMOV R12,RAX\nMOV RDI,R14\nCALL 0x0040deb0\nMOV RBX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nMOV RCX,R12\nMOV R8,RBX\nCALL 0x00402960\nCALL 0x00402420\n'
p1180
S'41 57\n41 56\n41 54\n53\n50\n48 89 f3\n49 89 fe\n31 ff\nbe 9a 3b 41 00\nba 05 00 00 00\ne8 51 df ff ff\n49 89 c7\n31 ff\nba 05 00 00 00\n48 89 de\ne8 3f df ff ff\n49 89 c4\n4c 89 f7\ne8 34 98 00 00\n48 89 c3\nbf 02 00 00 00\n31 f6\n31 c0\n4c 89 fa\n4c 89 e1\n49 89 d8\ne8 ca e2 ff ff\ne8 85 dd ff ff\n'
p1181
S'.text:0000000000404640\n.text:0000000000404642\n.text:0000000000404644\n.text:0000000000404646\n.text:0000000000404647\n.text:0000000000404648\n.text:000000000040464b\n.text:000000000040464e\n.text:0000000000404650\n.text:0000000000404655\n.text:000000000040465a\n.text:000000000040465f\n.text:0000000000404662\n.text:0000000000404664\n.text:0000000000404669\n.text:000000000040466c\n.text:0000000000404671\n.text:0000000000404674\n.text:0000000000404677\n.text:000000000040467c\n.text:000000000040467f\n.text:0000000000404684\n.text:0000000000404686\n.text:0000000000404688\n.text:000000000040468b\n.text:000000000040468e\n.text:0000000000404691\n.text:0000000000404696\n'
p1182
tp1183
sS'fd_safer'
p1184
(S'\n__stdcall fd_safer()\n'
p1185
V\u000aint fd_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int *piVar3;\u000a  uint __fd;\u000a  \u000a  if (__fd < 3) {\u000a    uVar2 = dup_safer();\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(__fd);\u000a    *piVar3 = iVar1;\u000a    __fd = uVar2;\u000a  }\u000a  return (int)__fd;\u000a}\u000a\u000a
p1186
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nCMP EBX,0x2\nJA 0x0040f644\nMOV EDI,EBX\nCALL 0x0040f600\nMOV R14D,EAX\nCALL 0x00402430\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV EDI,EBX\nCALL 0x004026c0\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nJMP 0x0040f646\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1187
S'55\n41 57\n41 56\n53\n50\n89 fb\n83 fb 02\n77 26\n89 df\ne8 db ff ff ff\n41 89 c6\ne8 03 2e ff ff\n48 89 c5\n44 8b 7d 00\n89 df\ne8 85 30 ff ff\n44 89 7d 00\n44 89 f0\neb 02\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1188
S'.text:000000000040f610\n.text:000000000040f611\n.text:000000000040f613\n.text:000000000040f615\n.text:000000000040f616\n.text:000000000040f617\n.text:000000000040f619\n.text:000000000040f61c\n.text:000000000040f61e\n.text:000000000040f620\n.text:000000000040f625\n.text:000000000040f628\n.text:000000000040f62d\n.text:000000000040f630\n.text:000000000040f634\n.text:000000000040f636\n.text:000000000040f63b\n.text:000000000040f63f\n.text:000000000040f642\n.text:000000000040f644\n.text:000000000040f646\n.text:000000000040f64a\n.text:000000000040f64b\n.text:000000000040f64d\n.text:000000000040f64f\n.text:000000000040f650\n'
p1189
tp1190
sS'main'
p1191
(S'\n__stdcall main(char * * argv)\n'
p1192
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aint main(char **argv)\u000a\u000a{\u000a  keyfield **ppkVar1;\u000a  bool bVar2;\u000a  char opts [10];\u000a  char opts [3];\u000a  byte bVar3;\u000a  _Bool _Var4;\u000a  int __sig;\u000a  int iVar5;\u000a  int iVar6;\u000a  char *arg;\u000a  lconv *plVar7;\u000a  keyfield *key;\u000a  ptrdiff_t pVar8;\u000a  FILE *in;\u000a  uint *puVar9;\u000a  char *s;\u000a  char *pcVar10;\u000a  ulong uVar11;\u000a  sortfile *files;\u000a  undefined8 uVar12;\u000a  undefined8 uVar13;\u000a  size_t sVar14;\u000a  int iVar15;\u000a  uint uVar16;\u000a  sortfile *psVar17;\u000a  char cVar18;\u000a  long lVar19;\u000a  char **files_00;\u000a  code *pcVar20;\u000a  size_t nthreads;\u000a  char **in_RSI;\u000a  bool bVar21;\u000a  int iVar22;\u000a  code *nfiles;\u000a  bool bVar23;\u000a  char str [2];\u000a  Tokens tok;\u000a  bool local_243;\u000a  bool local_242;\u000a  char *local_240;\u000a  char local_232;\u000a  undefined local_231;\u000a  ulong local_230;\u000a  char **local_228;\u000a  char *local_220;\u000a  size_t *local_218;\u000a  char *local_210;\u000a  char *local_208;\u000a  size_t local_200;\u000a  char *local_1f8;\u000a  keyfield local_1f0;\u000a  char *local_1a8;\u000a  char *local_1a0;\u000a  undefined8 local_198;\u000a  undefined4 local_190;\u000a  undefined4 uStack396;\u000a  undefined4 uStack392;\u000a  undefined4 uStack388;\u000a  undefined4 local_180;\u000a  undefined4 uStack380;\u000a  undefined4 uStack376;\u000a  undefined4 uStack372;\u000a  undefined4 local_170;\u000a  undefined4 uStack364;\u000a  undefined4 uStack360;\u000a  undefined4 uStack356;\u000a  undefined4 local_160;\u000a  undefined4 uStack348;\u000a  undefined4 uStack344;\u000a  undefined4 uStack340;\u000a  undefined4 local_150;\u000a  undefined4 uStack332;\u000a  undefined4 uStack328;\u000a  undefined4 uStack324;\u000a  undefined4 local_140;\u000a  undefined4 uStack316;\u000a  undefined4 uStack312;\u000a  undefined4 uStack308;\u000a  uint local_130;\u000a  undefined4 uStack300;\u000a  undefined4 uStack296;\u000a  undefined4 uStack292;\u000a  undefined4 local_120;\u000a  undefined4 uStack284;\u000a  undefined4 uStack280;\u000a  undefined4 uStack276;\u000a  undefined4 local_110;\u000a  keyfield local_78;\u000a  \u000a  local_1f8 = getenv("POSIXLY_CORRECT");\u000a  __sig = posix2_version();\u000a  local_243 = __sig < 0x30db0;\u000a  local_228 = in_RSI;\u000a  set_program_name(*in_RSI);\u000a  arg = setlocale(6,\u000a                    "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                    + 0xca);\u000a  local_1a0 = arg;\u000a  bindtextdomain(0x41368d);\u000a  textdomain(0x41368d);\u000a  initialize_exit_failure();\u000a  hard_LC_COLLATE = hard_locale();\u000a  hard_LC_TIME = hard_locale();\u000a  plVar7 = localeconv();\u000a  bVar3 = to_uchar();\u000a  decimal_point = ZEXT14(bVar3);\u000a  if ((bVar3 == 0) || (plVar7->decimal_point[1] != 0)) {\u000a    decimal_point = 0x2e;\u000a  }\u000a  bVar3 = to_uchar();\u000a  thousands_sep = ZEXT14(bVar3);\u000a  if ((bVar3 == 0) || (plVar7->thousands_sep[1] != 0)) {\u000a    thousands_sep = -1;\u000a  }\u000a  have_read_stdin = 0;\u000a  inittables();\u000a  sigemptyset((sigset_t *)&caught_signals);\u000a  lVar19 = -0x2c;\u000a  do {\u000a    __sig = *(int *)(&UNK_00411fdc + lVar19);\u000a    sigaction(__sig,(sigaction *)0x0,(sigaction *)&local_198);\u000a    if (local_198 != (code *)0x1) {\u000a      sigaddset((sigset_t *)&caught_signals,__sig);\u000a    }\u000a    lVar19 = lVar19 + 4;\u000a  } while (lVar19 != 0);\u000a  local_198 = sighandler;\u000a  local_120 = (undefined4)caught_signals.__val[14];\u000a  uStack284 = caught_signals.__val[14]._4_4_;\u000a  uStack280 = (undefined4)caught_signals.__val[15];\u000a  uStack276 = caught_signals.__val[15]._4_4_;\u000a  local_130 = (uint)caught_signals.__val[12];\u000a  uStack300 = caught_signals.__val[12]._4_4_;\u000a  uStack296 = (undefined4)caught_signals.__val[13];\u000a  uStack292 = caught_signals.__val[13]._4_4_;\u000a  local_140 = (undefined4)caught_signals.__val[10];\u000a  uStack316 = caught_signals.__val[10]._4_4_;\u000a  uStack312 = (undefined4)caught_signals.__val[11];\u000a  uStack308 = caught_signals.__val[11]._4_4_;\u000a  local_150 = (undefined4)caught_signals.__val[8];\u000a  uStack332 = caught_signals.__val[8]._4_4_;\u000a  uStack328 = (undefined4)caught_signals.__val[9];\u000a  uStack324 = caught_signals.__val[9]._4_4_;\u000a  local_160 = (undefined4)caught_signals.__val[6];\u000a  uStack348 = caught_signals.__val[6]._4_4_;\u000a  uStack344 = (undefined4)caught_signals.__val[7];\u000a  uStack340 = caught_signals.__val[7]._4_4_;\u000a  local_170 = (undefined4)caught_signals.__val[4];\u000a  uStack364 = caught_signals.__val[4]._4_4_;\u000a  uStack360 = (undefined4)caught_signals.__val[5];\u000a  uStack356 = caught_signals.__val[5]._4_4_;\u000a  local_180 = (undefined4)caught_signals.__val[2];\u000a  uStack380 = caught_signals.__val[2]._4_4_;\u000a  uStack376 = (undefined4)caught_signals.__val[3];\u000a  uStack372 = caught_signals.__val[3]._4_4_;\u000a  local_190 = (undefined4)caught_signals.__val[0];\u000a  uStack396 = caught_signals.__val[0]._4_4_;\u000a  uStack392 = (undefined4)caught_signals.__val[1];\u000a  uStack388 = caught_signals.__val[1]._4_4_;\u000a  local_110 = 0;\u000a  lVar19 = -0x2c;\u000a  do {\u000a    __sig = *(int *)(&UNK_00411fdc + lVar19);\u000a    iVar5 = sigismember((sigset_t *)&caught_signals,__sig);\u000a    if (iVar5 != 0) {\u000a      sigaction(__sig,(sigaction *)&local_198,(sigaction *)0x0);\u000a    }\u000a    lVar19 = lVar19 + 4;\u000a  } while (lVar19 != 0);\u000a  local_210 = (char *)0x0;\u000a  signal(0x11,(__sighandler_t)0x0);\u000a  atexit(exit_cleanup);\u000a  key_init(&local_1f0);\u000a  local_1f0.sword = 0xffffffffffffffff;\u000a  iVar22 = (int)((ulong)argv & 0xffffffff);\u000a  files_00 = (char **)xnmalloc((long)iVar22,8);\u000a  bVar23 = local_1f8 == (char *)0x0;\u000a  local_220 = (char *)0x0;\u000a  nfiles = (code *)0x0;\u000a  local_200 = 0;\u000a  local_208 = (char *)0x0;\u000a  uVar11 = 0;\u000a  __sig = tab;\u000a  iVar5 = 0;\u000a  bVar2 = (bool)0;\u000aLAB_00403385:\u000a  bVar21 = bVar2;\u000a  iVar15 = iVar5;\u000a  tab = __sig;\u000a  cVar18 = (char)uVar11;\u000a  local_198 = (code *)CONCAT44(local_198._4_4_,0xffffffff);\u000a  if (iVar15 != -1) {\u000a    if (((local_1f8 != (char *)0x0) && (nfiles != (code *)0x0)) &&\u000a       ((local_243 == false ||\u000a        (((((cVar18 != 0 || (optind == iVar22)) || (s = local_228[(long)optind], *s != '-')) ||\u000a          (s[1] != 'o')) || ((optind + 1 == iVar22 && (s[2] == 0))))))))\u000a    goto switchD_00403441_caseD_ffffffff;\u000a    goto LAB_00403400;\u000a  }\u000a  iVar15 = -1;\u000a  goto switchD_00403441_caseD_ffffffff;\u000aLAB_00403400:\u000a  iVar6 = getopt_long((ulong)argv & 0xffffffff,local_228,"-bcCdfghik:mMno:rRsS:t:T:uVy:z",\u000a                      long_options,&local_198);\u000a  iVar15 = -1;\u000a  __sig = tab;\u000a  iVar5 = 0x6d;\u000a  bVar2 = (bool)1;\u000a  switch(iVar6) {\u000a  case 1:\u000a    if (*optarg == '+') {\u000a      if ((optind == iVar22) || (*local_228[(long)optind] != '-')) {\u000a        uVar16 = 0;\u000a      }\u000a      else {\u000a        uVar16 = (uint)CONCAT71(0xffffff,(int)local_228[(long)optind][1] - 0x30U < 10);\u000a      }\u000a      local_243 = (bool)(local_243 | (byte)uVar16 & bVar23);\u000a      local_230 = uVar11;\u000a      if (local_243 != false) {\u000a        local_218 = (size_t *)((ulong)local_218 & 0xffffffff00000000 | (ulong)uVar16);\u000a        local_230 = uVar11;\u000a        key = key_init(&local_78);\u000a        local_240 = (char *)0x0;\u000a        s = parse_field_count(optarg + 1,(size_t *)key,(char *)0x0);\u000a        if ((s != (char *)0x0) && (local_240 = s, *s == '.')) {\u000a          local_240 = parse_field_count(s + 1,&key->schar,(char *)0x0);\u000a        }\u000a        if ((key->sword == 0) && (key->schar == 0)) {\u000a          key->sword = 0xffffffffffffffff;\u000a        }\u000a        uVar11 = local_230;\u000a        if ((local_240 != (char *)0x0) &&\u000a           (s = set_ordering(local_240,key), uVar11 = local_230, *s == 0)) {\u000a          if ((char)local_218 == 0) {\u000aLAB_00403b39:\u000a            key->obsolete_used = true;\u000a            insertkey(key);\u000a            __sig = tab;\u000a            iVar5 = iVar6;\u000a            bVar2 = bVar21;\u000a            goto LAB_00403385;\u000a          }\u000a          lVar19 = (long)optind;\u000a          optind = optind + 1;\u000a          local_1a8 = local_228[lVar19];\u000a          local_218 = &key->eword;\u000a          s = parse_field_count(local_1a8 + 1,local_218,"invalid number after \u005c'-\u005c'");\u000a          if (s != (char *)0x0) {\u000a            if (*s == '.') {\u000a              s = parse_field_count(s + 1,&key->echar,"invalid number after \u005c'.\u005c'");\u000a            }\u000a            if ((key->echar == 0) && (*local_218 != 0)) {\u000a              *local_218 = *local_218 - 1;\u000a            }\u000a            s = set_ordering(s,key);\u000a            if (*s == 0) goto LAB_00403b39;\u000a            badfieldspec(local_1a8,"stray character in field spec");\u000a          }\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("s","src/sort.c",0x10f5,"int main(int, char **)");\u000a        }\u000a      }\u000a    }\u000a    files_00[(long)nfiles] = optarg;\u000a    nfiles = nfiles + 1;\u000a    __sig = tab;\u000a    iVar5 = iVar6;\u000a    bVar2 = bVar21;\u000a    goto LAB_00403385;\u000a  case 0x53:\u000a    specify_sort_size((char *)((ulong)local_198 & 0xffffffff));\u000a    __sig = tab;\u000a    iVar5 = 0x53;\u000a    bVar2 = bVar21;\u000a    goto LAB_00403385;\u000a  case 0x54:\u000a    add_temp_dir(optarg);\u000a    __sig = tab;\u000a    iVar5 = 0x54;\u000a    bVar2 = bVar21;\u000a    goto LAB_00403385;\u000a  case 0x6b:\u000a    key = key_init(&local_78);\u000a    s = parse_field_count(optarg,(size_t *)key,"invalid number at field start");\u000a    sVar14 = key->sword;\u000a    key->sword = sVar14 - 1;\u000a    if (sVar14 != 0) {\u000a      if (*s == '.') {\u000a        s = parse_field_count(s + 1,&key->schar,"invalid number after \u005c'.\u005c'");\u000a        sVar14 = key->schar;\u000a        key->schar = sVar14 - 1;\u000a        if (sVar14 == 0) goto LAB_00404247;\u000a      }\u000a      if ((key->sword == 0) && (key->schar == 0)) {\u000a        key->sword = 0xffffffffffffffff;\u000a      }\u000a      s = set_ordering(s,key);\u000a      if (*s != ',') {\u000a        key->eword = 0xffffffffffffffff;\u000a        key->echar = 0;\u000a        cVar18 = *s;\u000ajoined_r0x00403985:\u000a        if (cVar18 != 0) goto LAB_00404236;\u000a        insertkey(key);\u000a        __sig = tab;\u000a        iVar5 = 0x6b;\u000a        bVar2 = bVar21;\u000a        goto LAB_00403385;\u000a      }\u000a      s = parse_field_count(s + 1,&key->eword,"invalid number after \u005c',\u005c'");\u000a      sVar14 = key->eword;\u000a      key->eword = sVar14 - 1;\u000a      if (sVar14 != 0) {\u000a        if (*s == '.') {\u000a          s = parse_field_count(s + 1,&key->echar,"invalid number after \u005c'.\u005c'");\u000a        }\u000a        s = set_ordering(s,key);\u000a        cVar18 = *s;\u000a        goto joined_r0x00403985;\u000a      }\u000a    }\u000a    goto LAB_0040418c;\u000a  case 0x6d:\u000a    goto LAB_00403385;\u000a  case 0x6f:\u000a    if ((local_210 != (char *)0x0) && (__sig = strcmp(local_210,optarg), __sig != 0)) {\u000a      uVar12 = dcgettext(0,"multiple output files specified",5);\u000a      error(2,0,uVar12);\u000a    }\u000a    local_210 = optarg;\u000a    __sig = tab;\u000a    iVar5 = 0x6f;\u000a    bVar2 = bVar21;\u000a    goto LAB_00403385;\u000a  case 0x73:\u000a    stable = 1;\u000a    __sig = tab;\u000a    iVar5 = 0x73;\u000a    bVar2 = bVar21;\u000a    goto LAB_00403385;\u000a  case 0x74:\u000a    cVar18 = *optarg;\u000a    if (cVar18 == 0) {\u000a      uVar12 = dcgettext(0,"empty tab",5);\u000a      error(2,0,uVar12);\u000a    }\u000a    if (optarg[1] != 0) {\u000a      if (((*optarg == '\u005c\u005c') && (optarg[1] == '0')) && (optarg[2] == 0)) {\u000a        cVar18 = 0;\u000a      }\u000a      else {\u000a        uVar12 = dcgettext(0,"multi-character tab %s",5);\u000a        local_230 = uVar11;\u000a        quote(optarg);\u000a        uVar11 = local_230;\u000a        error(2,0,uVar12);\u000a      }\u000a    }\u000a    __sig = (int)cVar18;\u000a    iVar5 = iVar6;\u000a    bVar2 = bVar21;\u000a    if ((tab != 0x80) && (iVar5 = iVar6, bVar2 = bVar21, tab != __sig)) {\u000a      uVar12 = dcgettext(0,"incompatible tabs",5);\u000a      error(2,0,uVar12);\u000a      iVar5 = iVar6;\u000a      bVar2 = bVar21;\u000a    }\u000a    goto LAB_00403385;\u000a  case 0x75:\u000a    unique = 1;\u000a    __sig = tab;\u000a    iVar5 = 0x75;\u000a    bVar2 = bVar21;\u000a    goto LAB_00403385;\u000a  case 0x79:\u000a    s = optarg;\u000a    __sig = tab;\u000a    iVar5 = 0x79;\u000a    bVar2 = bVar21;\u000a    if (optarg == local_228[(long)optind + -1]) {\u000a      do {\u000a        cVar18 = *s;\u000a        s = s + 1;\u000a      } while ((int)cVar18 - 0x30U < 10);\u000a      optind = optind + -1 + (uint)(cVar18 == 0);\u000a      __sig = tab;\u000a      iVar5 = iVar6;\u000a      bVar2 = bVar21;\u000a    }\u000a    goto LAB_00403385;\u000a  case 0x7a:\u000a    eolchar = 1;\u000a    __sig = tab;\u000a    iVar5 = 0x7a;\u000a    bVar2 = bVar21;\u000a    goto LAB_00403385;\u000a  case 0x80:\u000a    if (optarg == (char *)0x0) {\u000a      iVar6 = 99;\u000a    }\u000a    else {\u000a      pVar8 = __xargmatch_internal("--check",optarg,check_args,"CCc",1,argmatch_die);\u000a      iVar6 = (int)"CCc"[pVar8];\u000a    }\u000a  case 0x43:\u000a  case 99:\u000a    if ((cVar18 == 0) || ((int)cVar18 == iVar6)) {\u000a      uVar11 = uVar11 & 0xffffffffffffff00 | (ulong)(byte)iVar6;\u000a      __sig = tab;\u000a      iVar5 = iVar6;\u000a      bVar2 = bVar21;\u000a      goto LAB_00403385;\u000a    }\u000a    break;\u000a  case 0x81:\u000a    if ((compress_program != (char *)0x0) && (__sig = strcmp(compress_program,optarg), __sig != 0))\u000a    {\u000a      uVar12 = dcgettext(0,"multiple compress programs specified",5);\u000a      error(2,0,uVar12);\u000a    }\u000a    compress_program = optarg;\u000a    __sig = tab;\u000a    iVar5 = 0x81;\u000a    bVar2 = bVar21;\u000a    goto LAB_00403385;\u000a  case 0x82:\u000a    debug = 1;\u000a    __sig = tab;\u000a    iVar5 = 0x82;\u000a    bVar2 = bVar21;\u000a    goto LAB_00403385;\u000a  case 0x83:\u000a    local_220 = optarg;\u000a    __sig = tab;\u000a    iVar5 = 0x83;\u000a    bVar2 = bVar21;\u000a    goto LAB_00403385;\u000a  case 0x84:\u000a    specify_nmerge((char *)((ulong)local_198 & 0xffffffff));\u000a    __sig = tab;\u000a    iVar5 = 0x84;\u000a    bVar2 = bVar21;\u000a    goto LAB_00403385;\u000a  case 0x85:\u000a    if ((local_208 != (char *)0x0) && (__sig = strcmp(local_208,optarg), __sig != 0)) {\u000a      uVar12 = dcgettext(0,"multiple random sources specified",5);\u000a      error(2,0,uVar12);\u000a    }\u000a    local_208 = optarg;\u000a    __sig = tab;\u000a    iVar5 = 0x85;\u000a    bVar2 = bVar21;\u000a    goto LAB_00403385;\u000a  case 0x86:\u000a    pVar8 = __xargmatch_internal("--sort",optarg,sort_args,"ghMnRV",1,argmatch_die);\u000a    iVar6 = (int)"ghMnRV"[pVar8];\u000a  case 0x4d:\u000a  case 0x52:\u000a  case 0x56:\u000a  case 0x62:\u000a  case 100:\u000a  case 0x66:\u000a  case 0x67:\u000a  case 0x68:\u000a  case 0x69:\u000a  case 0x6e:\u000a  case 0x72:\u000a    local_232 = (char)iVar6;\u000a    local_231 = 0;\u000a    set_ordering(&local_232,&local_1f0);\u000a    __sig = tab;\u000a    iVar5 = iVar6;\u000a    bVar2 = bVar21;\u000a    goto LAB_00403385;\u000a  case 0x87:\u000a    local_200 = specify_nthreads((char *)((ulong)local_198 & 0xffffffff));\u000a    __sig = tab;\u000a    iVar5 = 0x87;\u000a    bVar2 = bVar21;\u000a    goto LAB_00403385;\u000a  case -0x83:\u000a    goto switchD_00403441_caseD_ffffff7d;\u000a  case -0x82:\u000a    usage(0);\u000a  default:\u000a    usage(2);\u000a    break;\u000a  case -1:\u000aswitchD_00403441_caseD_ffffffff:\u000a    lVar19 = (long)optind;\u000a    if (optind < iVar22) {\u000a      optind = optind + 1;\u000a      files_00[(long)nfiles] = local_228[lVar19];\u000a      nfiles = nfiles + 1;\u000a      __sig = tab;\u000a      iVar5 = iVar15;\u000a      bVar2 = bVar21;\u000a      goto LAB_00403385;\u000a    }\u000a    local_230 = uVar11;\u000a    if (local_220 == (char *)0x0) goto LAB_00403d60;\u000a    local_230 = uVar11;\u000a    if (nfiles != (code *)0x0) goto LAB_0040419d;\u000a    if (((*local_220 != '-') || (in = stdin, local_230 = uVar11, local_220[1] != 0)) &&\u000a       (local_230 = uVar11, in = fopen_safer(local_220,"r"), in == (FILE *)0x0)) {\u000a      puVar9 = (uint *)__errno_location();\u000a      uVar16 = *puVar9;\u000a      uVar12 = dcgettext(0,"cannot open %s for reading",5);\u000a      quotearg_style((char *)0x4);\u000a      error(2,(ulong)uVar16,uVar12);\u000a      in = (FILE *)0x0;\u000a    }\u000a    readtokens0_init((Tokens *)&local_198);\u000a    _Var4 = readtokens0(in,(Tokens *)&local_198);\u000a    if ((_Var4 == false) || (__sig = rpl_fclose(in), __sig != 0)) {\u000a      uVar12 = dcgettext(0,"cannot read file names from %s",5);\u000a      quotearg_style((char *)0x4);\u000a      error(2,0,uVar12);\u000a    }\u000a    if (local_198 == (code *)0x0) {\u000a      uVar12 = dcgettext(0,"no input from %s",5);\u000a      quotearg_style((char *)0x4);\u000a      error(2,0,uVar12);\u000a    }\u000a    else {\u000a      free(files_00);\u000a      nfiles = local_198;\u000a      files_00 = (char **)CONCAT44(uStack396,local_190);\u000a      if (local_198 == (code *)0x0) {\u000a        nfiles = (code *)0x0;\u000a      }\u000a      else {\u000a        pcVar20 = (code *)0x0;\u000a        do {\u000a          if ((*files_00[(long)pcVar20] == '-') && (files_00[(long)pcVar20][1] == 0)) {\u000a            uVar12 = dcgettext(0,"when reading file names from stdin, no file name of %s allowed",5)\u000a            ;\u000a            quotearg_style((char *)0x4);\u000a            error(2,0,uVar12);\u000a          }\u000a          else {\u000a            if (*files_00[(long)pcVar20] == 0) {\u000a              uVar12 = dcgettext(0,"%s:%lu: invalid zero-length file name",5);\u000a              s = quotearg_n_style_colon((char *)0x0);\u000a              error(2,0,uVar12,s,pcVar20 + 1);\u000a            }\u000a          }\u000a          pcVar20 = pcVar20 + 1;\u000a        } while (nfiles != pcVar20);\u000a      }\u000a    }\u000aLAB_00403d60:\u000a    bVar3 = 0;\u000a    key = keylist;\u000a    if (keylist == (keyfield *)0x0) {\u000aLAB_00403e44:\u000a      cVar18 = (char)local_230;\u000a      _Var4 = default_key_compare(&local_1f0);\u000a      if (_Var4 == false) {\u000a        insertkey(&local_1f0);\u000a        bVar3 = bVar3 | local_1f0.random;\u000a      }\u000a    }\u000a    else {\u000a      do {\u000a        _Var4 = default_key_compare(key);\u000a        if ((_Var4 != false) && (key->reverse == false)) {\u000a          key->ignore = local_1f0.ignore;\u000a          key->translate = local_1f0.translate;\u000a          key->skipsblanks = local_1f0.skipsblanks;\u000a          key->skipeblanks = local_1f0.skipeblanks;\u000a          key->month = local_1f0.month;\u000a          key->numeric = local_1f0.numeric;\u000a          key->general_numeric = local_1f0.general_numeric;\u000a          key->human_numeric = local_1f0.human_numeric;\u000a          key->version = local_1f0.version;\u000a          key->random = local_1f0.random;\u000a          key->reverse = local_1f0.reverse;\u000a        }\u000a        bVar3 = bVar3 | key->random;\u000a        ppkVar1 = &key->next;\u000a        key = *ppkVar1;\u000a      } while (*ppkVar1 != (keyfield *)0x0);\u000a      if (keylist == (keyfield *)0x0) goto LAB_00403e44;\u000a      cVar18 = (char)local_230;\u000a    }\u000a    check_ordering_compatibility();\u000a    if (debug == 1) {\u000a      if ((local_210 == (char *)0x0) && (cVar18 == 0)) {\u000a        if (hard_LC_COLLATE == false) {\u000a          if (local_1a0 != (char *)0x0) {\u000a            arg = setlocale(3,\u000a                              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                              + 0xca);\u000a          }\u000a          local_242 = arg == (char *)0x0;\u000a          if (local_242) {\u000a            local_228 = (char **)dcgettext(0,"failed to set locale; ",5);\u000a          }\u000a          else {\u000a            local_228 = (char **)(\u000a                                 "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                                 + 0xca);\u000a          }\u000a          uVar12 = dcgettext(0,"using simple byte comparison",5);\u000a          error(0,0,&DAT_004137bc,local_228,uVar12);\u000a        }\u000a        else {\u000a          uVar12 = dcgettext(0,"using %s sorting rules",5);\u000a          arg = setlocale(3,(char *)0x0);\u000a          quote(arg);\u000a          error(0,0,uVar12);\u000a        }\u000a        key_warnings(&local_1f0);\u000a        goto LAB_00403f67;\u000a      }\u000a    }\u000a    else {\u000aLAB_00403f67:\u000a      reverse = local_1f0.reverse;\u000a      if ((bVar3 & 1) != 0) {\u000a        random_md5_state_init(local_208);\u000a      }\u000a      arg = local_210;\u000a      if (temp_dir_count == 0) {\u000a        pcVar10 = getenv("TMPDIR");\u000a        s = "/tmp";\u000a        if (pcVar10 != (char *)0x0) {\u000a          s = pcVar10;\u000a        }\u000a        add_temp_dir(s);\u000a      }\u000a      if (nfiles == (code *)0x0) {\u000a        free(files_00);\u000a        files_00 = (char **)xmalloc(8);\u000a        *files_00 = "-";\u000a        nfiles = (code *)0x1;\u000a      }\u000a      sVar14 = sort_size;\u000a      if ((sort_size != 0) && (sVar14 = (ulong)nmerge * 0x22, (ulong)nmerge * 0x22 < sort_size)) {\u000a        sVar14 = sort_size;\u000a      }\u000a      sort_size = sVar14;\u000a      if (cVar18 == 0) {\u000a        check_inputs(files_00,(size_t)nfiles);\u000a        check_output(arg);\u000a        if (bVar21) {\u000a          files = (sortfile *)xcalloc((size_t)nfiles,0x10);\u000a          if (nfiles != (code *)0x0) {\u000a            pcVar20 = (code *)0x0;\u000a            psVar17 = files;\u000a            do {\u000a              psVar17->name = files_00[(long)pcVar20];\u000a              pcVar20 = pcVar20 + 1;\u000a              psVar17 = psVar17 + 1;\u000a            } while (pcVar20 < nfiles);\u000a          }\u000a          merge(files,0,(size_t)nfiles,arg);\u000a        }\u000a        else {\u000a          sVar14 = local_200;\u000a          if (local_200 == 0) {\u000a            uVar11 = num_processors();\u000a            sVar14 = 8;\u000a            if (uVar11 < 8) {\u000a              sVar14 = uVar11;\u000a            }\u000a          }\u000a          nthreads = 0xffffffffffffff;\u000a          if (sVar14 < 0xffffffffffffff) {\u000a            nthreads = sVar14;\u000a          }\u000a          sort(files_00,(size_t)nfiles,arg,nthreads);\u000a        }\u000a        if (have_read_stdin != 1) {\u000a          return 0;\u000a        }\u000a        __sig = rpl_fclose(stdin);\u000a        if (__sig != -1) {\u000a          return 0;\u000a        }\u000a        goto LAB_00404258;\u000a      }\u000a      if ((code *)0x1 < nfiles) {\u000a        uVar12 = dcgettext(0,"extra operand %s not allowed with -%c",5);\u000a        s = quotearg_style((char *)0x4);\u000a        error(2,0,uVar12,s,(ulong)(uint)(int)cVar18);\u000a      }\u000a      if (arg == (char *)0x0) {\u000a        _Var4 = check(*files_00);\u000a        return (int)(uint)(_Var4 ^ 1);\u000a      }\u000aLAB_0040420b:\u000a      opts[0] = cVar18;\u000a      incompatible_options((char *)0x61a3f4);\u000a    }\u000a    if (cVar18 == 0) {\u000a      cVar18 = 'o';\u000a    }\u000a    opts[0] = cVar18;\u000a    incompatible_options((char *)0x61a3e4);\u000aLAB_00404236:\u000a    badfieldspec(optarg,"stray character in field spec");\u000aLAB_00404247:\u000a    badfieldspec(optarg,"character offset is zero");\u000aLAB_00404258:\u000a    arg = (char *)dcgettext(0,"close failed",5);\u000a                    /* WARNING: Subroutine does not return */\u000a    die(arg,"-");\u000a  }\u000a  incompatible_options("cC");\u000aLAB_0040418c:\u000a  badfieldspec(optarg,"field number is zero");\u000aLAB_0040419d:\u000a  uVar12 = dcgettext(0,"extra operand %s",5);\u000a  arg = quotearg_style((char *)0x4);\u000a  error(0,0,uVar12,arg);\u000a  uVar12 = stderr;\u000a  uVar13 = dcgettext(0,"file operands cannot be combined with --files0-from",5);\u000a  __fprintf_chk(uVar12,1,0x414b20,uVar13);\u000a  usage(2);\u000a  goto LAB_0040420b;\u000aswitchD_00403441_caseD_ffffff7d:\u000a  version_etc(stdout,"sort","GNU coreutils",Version,"Mike Haertel","Paul Eggert",0);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p1193
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x228\nMOV RBX,RSI\nMOV R14D,EDI\nMOV EDI,0x4134db\nCALL 0x004023d0\nMOV qword ptr [RSP + 0x60],RAX\nCALL 0x0040c960\nCMP EAX,0x30db0\nSETL byte ptr [RSP + 0x15]\nMOV qword ptr [RSP + 0x30],RBX\nMOV RDI,qword ptr [RBX]\nCALL 0x0040c9c0\nMOV EDI,0x6\nMOV ESI,0x414bf9\nCALL 0x00402910\nMOV qword ptr [0xb8 + RSP],RAX\nTEST RAX,RAX\nSETNZ byte ptr [RSP + 0x16]\nMOV EDI,0x41368d\nMOV ESI,0x4134eb\nCALL 0x00402590\nMOV EDI,0x41368d\nCALL 0x00402550\nCALL 0x004042b0\nMOV EDI,0x3\nCALL 0x0040b0f0\nMOV byte ptr [0x0061a5b0],AL\nMOV EDI,0x2\nCALL 0x0040b0f0\nMOV byte ptr [0x0061a5b1],AL\nCALL 0x004024f0\nMOV RBX,RAX\nMOV RAX,qword ptr [RBX]\nMOVSX EDI,byte ptr [RAX]\nCALL 0x004042c0\nMOVZX EAX,AL\nMOV dword ptr [0x0061a5b4],EAX\nTEST AL,AL\nJZ 0x004031a8\nMOV RAX,qword ptr [RBX]\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x004031b2\nMOV dword ptr [0x0061a5b4],0x2e\nMOV RAX,qword ptr [RBX + 0x8]\nMOVSX EDI,byte ptr [RAX]\nCALL 0x004042c0\nMOVZX EAX,AL\nMOV dword ptr [0x0061a5b8],EAX\nTEST AL,AL\nJZ 0x004031d5\nMOV RAX,qword ptr [RBX + 0x8]\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x004031df\nMOV dword ptr [0x0061a5b8],0xffffffff\nMOV byte ptr [0x0061a5bc],0x0\nCALL 0x004042d0\nMOV EDI,0x61a5c0\nCALL 0x004027a0\nMOV RBX,-0x2c\nLEA R15,[0xc0 + RSP]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV EBP,dword ptr [0x411fdc + RBX]\nXOR ESI,ESI\nMOV EDI,EBP\nMOV RDX,R15\nCALL 0x004024d0\nCMP qword ptr [0xc0 + RSP],0x1\nJZ 0x00403239\nMOV EDI,0x61a5c0\nMOV ESI,EBP\nCALL 0x00402af0\nADD RBX,0x4\nJNZ 0x00403210\nMOV qword ptr [0xc0 + RSP],0x404430\nMOVUPS XMM0,xmmword ptr [0x0061a630]\nMOVUPS xmmword ptr [0x138 + RSP],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061a620]\nMOVUPS xmmword ptr [0x128 + RSP],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061a610]\nMOVUPS xmmword ptr [0x118 + RSP],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061a600]\nMOVUPS xmmword ptr [0x108 + RSP],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061a5f0]\nMOVUPS xmmword ptr [0xf8 + RSP],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061a5e0]\nMOVUPS xmmword ptr [0xe8 + RSP],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061a5d0]\nMOVUPS xmmword ptr [0xd8 + RSP],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061a5c0]\nMOVUPS xmmword ptr [0xc8 + RSP],XMM0\nMOV dword ptr [0x148 + RSP],0x0\nMOV RBX,-0x2c\nLEA R15,[0xc0 + RSP]\nNOP dword ptr [RAX]\nMOV EBP,dword ptr [0x411fdc + RBX]\nMOV EDI,0x61a5c0\nMOV ESI,EBP\nCALL 0x00402a40\nTEST EAX,EAX\nJZ 0x00403302\nXOR EDX,EDX\nMOV EDI,EBP\nMOV RSI,R15\nCALL 0x004024d0\nADD RBX,0x4\nJNZ 0x004032e0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x48],RAX\nMOV EDI,0x11\nXOR ESI,ESI\nCALL 0x00402780\nMOV EDI,0x404450\nCALL 0x00411590\nLEA RDI,[RSP + 0x68]\nCALL 0x004044a0\nMOV qword ptr [RSP + 0x68],-0x1\nMOVSXD RDI,R14D\nMOV ESI,0x8\nCALL 0x0040fb60\nMOV RBX,RAX\nCMP qword ptr [RSP + 0x60],0x0\nSETZ byte ptr [RSP + 0x17]\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x38],RAX\nMOV R15D,0x0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x58],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x50],RAX\nXOR R12D,R12D\nXOR EBP,EBP\nXOR EDX,EDX\nJMP 0x00403385\nMOV R12B,CL\nMOV EDX,EAX\nMOV dword ptr [0xc0 + RSP],0xffffffff\nCMP EDX,-0x1\nJZ 0x00403480\nCMP qword ptr [RSP + 0x60],0x0\nJZ 0x00403400\nTEST R15,R15\nJZ 0x00403400\nTEST byte ptr [RSP + 0x15],0x1\nJZ 0x00403485\nTEST BPL,BPL\nJNZ 0x00403485\nMOVSXD RAX,dword ptr [0x0061a578]\nCMP EAX,R14D\nJZ 0x00403485\nMOV RCX,qword ptr [RSP + 0x30]\nMOV RCX,qword ptr [RCX + RAX*0x8]\nCMP byte ptr [RCX],0x2d\nJNZ 0x00403485\nCMP byte ptr [RCX + 0x1],0x6f\nJNZ 0x00403485\nINC EAX\nCMP EAX,R14D\nJNZ 0x00403400\nMOV AL,byte ptr [RCX + 0x2]\nTEST AL,AL\nJZ 0x00403485\nNOP dword ptr [RAX + RAX*0x1]\nMOV EDX,0x411fe0\nMOV ECX,0x412000\nMOV EDI,R14D\nMOV RSI,qword ptr [RSP + 0x30]\nLEA R8,[0xc0 + RSP]\nCALL 0x004025f0\nMOV R13D,EAX\nLEA ESI,[0x83 + R13]\nCMP ESI,0x10a\nJA 0x00404178\nMOV EAX,0x6d\nMOV CL,0x1\nMOV EDX,0xffffffff\nJMP qword ptr [0x411600 + RSI*0x8]\nMOV byte ptr [RSP + 0x26],R13B\nMOV byte ptr [RSP + 0x27],0x0\nLEA RDI,[RSP + 0x26]\nLEA RSI,[RSP + 0x68]\nMOV EDX,0x2\nCALL 0x00404580\nMOV ECX,R12D\nMOV EAX,R13D\nJMP 0x00403380\nMOV EDX,0xffffffff\nMOVSXD RAX,dword ptr [0x0061a578]\nCMP EAX,R14D\nJGE 0x00403b4c\nLEA ECX,[RAX + 0x1]\nMOV dword ptr [0x0061a578],ECX\nMOV RCX,qword ptr [RSP + 0x30]\nMOV RAX,qword ptr [RCX + RAX*0x8]\nMOV qword ptr [RBX + R15*0x8],RAX\nINC R15\nMOV ECX,R12D\nMOV EAX,EDX\nJMP 0x00403380\nMOV byte ptr [0x0061a64b],0x1\nMOV EAX,0x7a\nJMP 0x00403998\nMOV byte ptr [0x0061a648],0x1\nMOV EAX,0x82\nJMP 0x00403998\nMOV RDI,qword ptr [0x0061a580]\nCALL 0x00404a10\nMOV EAX,0x54\nJMP 0x00403998\nLEA RDI,[0x1e0 + RSP]\nCALL 0x004044a0\nMOV R13,RAX\nMOV RDI,qword ptr [0x0061a580]\nMOV EDX,0x4135ac\nMOV RSI,R13\nCALL 0x004044d0\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + -0x1]\nMOV qword ptr [R13],RDX\nTEST RCX,RCX\nJZ 0x0040418c\nCMP byte ptr [RAX],0x2e\nJNZ 0x00403557\nINC RAX\nLEA RSI,[R13 + 0x8]\nMOV EDX,0x41353e\nMOV RDI,RAX\nCALL 0x004044d0\nMOV RCX,qword ptr [R13 + 0x8]\nLEA RDX,[RCX + -0x1]\nMOV qword ptr [R13 + 0x8],RDX\nTEST RCX,RCX\nJZ 0x00404247\nCMP qword ptr [R13],0x0\nJNZ 0x0040356d\nCMP qword ptr [R13 + 0x8],0x0\nJNZ 0x0040356d\nMOV qword ptr [R13],-0x1\nXOR EDX,EDX\nMOV RDI,RAX\nMOV RSI,R13\nCALL 0x00404580\nCMP byte ptr [RAX],0x2c\nJNZ 0x00403972\nINC RAX\nLEA RSI,[R13 + 0x10]\nMOV EDX,0x4135f8\nMOV RDI,RAX\nCALL 0x004044d0\nMOV RCX,qword ptr [R13 + 0x10]\nLEA RDX,[RCX + -0x1]\nMOV qword ptr [R13 + 0x10],RDX\nTEST RCX,RCX\nJZ 0x0040418c\nCMP byte ptr [RAX],0x2e\nJNZ 0x004035c8\nINC RAX\nMOV RSI,R13\nADD RSI,0x18\nMOV EDX,0x41353e\nMOV RDI,RAX\nCALL 0x004044d0\nMOV EDX,0x1\nMOV RDI,RAX\nMOV RSI,R13\nCALL 0x00404580\nCMP byte ptr [RAX],0x0\nJZ 0x0040398b\nJMP 0x00404236\nMOV RDI,qword ptr [0x0061a640]\nTEST RDI,RDI\nJZ 0x00403627\nMOV RSI,qword ptr [0x0061a580]\nCALL 0x00402770\nTEST EAX,EAX\nJZ 0x00403627\nXOR EDI,EDI\nMOV ESI,0x413587\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402960\nMOV RAX,qword ptr [0x0061a580]\nMOV qword ptr [0x0061a640],RAX\nMOV EAX,0x81\nJMP 0x00403998\nMOV RSI,qword ptr [0x0061a580]\nMOV R9,qword ptr [0x0061a4d8]\nMOV EDI,0x413575\nMOV EDX,0x4123f0\nMOV ECX,0x4123e0\nMOV R8D,0x1\nCALL 0x00409f00\nMOVSX R13D,byte ptr [0x4123e0 + RAX]\nJMP 0x00403448\nMOV RAX,qword ptr [0x0061a580]\nCMP byte ptr [RAX],0x2b\nJNZ 0x00403a46\nMOVSXD RAX,dword ptr [0x0061a578]\nCMP EAX,R14D\nMOV qword ptr [RSP + 0x28],RBP\nJZ 0x004039a0\nMOV RCX,qword ptr [RSP + 0x30]\nMOV RAX,qword ptr [RCX + RAX*0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x004039a0\nMOVSX EAX,byte ptr [RAX + 0x1]\nADD EAX,-0x30\nCMP EAX,0xa\nSETC DL\nJMP 0x004039a2\nMOV EDI,dword ptr [0xc0 + RSP]\nMOV RDX,qword ptr [0x0061a580]\nMOVSX ESI,R13B\nCALL 0x004048b0\nMOV EAX,0x53\nJMP 0x00403998\nMOV RDI,qword ptr [RSP + 0x48]\nTEST RDI,RDI\nJZ 0x0040371d\nMOV RSI,qword ptr [0x0061a580]\nCALL 0x00402770\nTEST EAX,EAX\nJZ 0x0040371d\nXOR EDI,EDI\nMOV ESI,0x413611\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402960\nMOV RAX,qword ptr [0x0061a580]\nMOV qword ptr [RSP + 0x48],RAX\nMOV EAX,0x6f\nJMP 0x00403998\nMOV byte ptr [0x0061a649],0x1\nMOV EAX,0x73\nJMP 0x00403998\nMOV qword ptr [RSP + 0x18],RBX\nMOV RAX,qword ptr [0x0061a580]\nMOV BL,byte ptr [RAX]\nTEST BL,BL\nJNZ 0x0040377b\nXOR EDI,EDI\nMOV ESI,0x413653\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402960\nMOV RAX,qword ptr [0x0061a580]\nMOV CL,byte ptr [RAX + 0x1]\nTEST CL,CL\nJZ 0x004037db\nCMP byte ptr [RAX],0x5c\nJNZ 0x0040379d\nCMP CL,0x30\nJNZ 0x0040379d\nCMP byte ptr [RAX + 0x2],0x0\nJZ 0x00403a7f\nXOR EDI,EDI\nMOV ESI,0x413660\nMOV EDX,0x5\nCALL 0x004025b0\nMOV qword ptr [RSP + 0x28],RBP\nMOV RBP,RAX\nMOV RDI,qword ptr [0x0061a580]\nCALL 0x0040deb0\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nMOV RBP,qword ptr [RSP + 0x28]\nCALL 0x00402960\nMOV EAX,dword ptr [0x0061a3e0]\nCMP EAX,0x80\nMOVSX EBX,BL\nJZ 0x00403814\nCMP EAX,EBX\nJZ 0x00403814\nXOR EDI,EDI\nMOV ESI,0x413677\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402960\nMOV dword ptr [0x0061a3e0],EBX\nMOV ECX,R12D\nMOV EAX,R13D\nMOV RBX,qword ptr [RSP + 0x18]\nJMP 0x00403380\nMOV RDX,qword ptr [0x0061a580]\nMOVSXD RCX,dword ptr [0x0061a578]\nMOV EAX,0x79\nMOV RSI,qword ptr [RSP + 0x30]\nCMP RDX,qword ptr [RSI + RCX*0x8 + -0x8]\nJNZ 0x00403998\nNOP dword ptr [RAX]\nMOVSX EAX,byte ptr [RDX]\nLEA ESI,[RAX + -0x30]\nINC RDX\nCMP ESI,0xa\nJC 0x00403850\nCMP AL,0x1\nADC ECX,-0x1\nMOV dword ptr [0x0061a578],ECX\nJMP 0x00403466\nMOV RAX,qword ptr [0x0061a580]\nMOV qword ptr [RSP + 0x38],RAX\nMOV EAX,0x83\nJMP 0x00403998\nMOV EDI,dword ptr [0xc0 + RSP]\nMOV RDX,qword ptr [0x0061a580]\nMOVSX ESI,R13B\nCALL 0x00404a60\nMOV qword ptr [RSP + 0x58],RAX\nMOV EAX,0x87\nJMP 0x00403998\nMOV byte ptr [0x0061a64a],0x1\nMOV EAX,0x75\nJMP 0x00403998\nMOV RSI,qword ptr [0x0061a580]\nTEST RSI,RSI\nJZ 0x00403a59\nMOV R9,qword ptr [0x0061a4d8]\nMOV EDI,0x41357c\nMOV EDX,0x412430\nMOV ECX,0x412428\nMOV R8D,0x1\nCALL 0x00409f00\nMOVSX R13D,byte ptr [0x412428 + RAX]\nTEST BPL,BPL\nJNZ 0x00403a64\nJMP 0x00403a71\nMOV EDI,dword ptr [0xc0 + RSP]\nMOV RDX,qword ptr [0x0061a580]\nMOVSX ESI,R13B\nCALL 0x00404710\nMOV EAX,0x84\nJMP 0x00403998\nMOV RDI,qword ptr [RSP + 0x50]\nTEST RDI,RDI\nJZ 0x0040395f\nMOV RSI,qword ptr [0x0061a580]\nCALL 0x00402770\nTEST EAX,EAX\nJZ 0x0040395f\nXOR EDI,EDI\nMOV ESI,0x413631\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402960\nMOV RAX,qword ptr [0x0061a580]\nMOV qword ptr [RSP + 0x50],RAX\nMOV EAX,0x85\nJMP 0x00403998\nMOV qword ptr [R13 + 0x10],-0x1\nMOV qword ptr [R13 + 0x18],0x0\nCMP byte ptr [RAX],0x0\nJNZ 0x00404236\nMOV RDI,R13\nCALL 0x004046a0\nMOV EAX,0x6b\nMOV ECX,R12D\nJMP 0x00403380\nXOR EDX,EDX\nMOV EAX,EDX\nAND AL,byte ptr [RSP + 0x17]\nMOV CL,byte ptr [RSP + 0x15]\nAND CL,0x1\nOR CL,AL\nMOV byte ptr [RSP + 0x15],CL\nJZ 0x00403a41\nMOV dword ptr [RSP + 0x40],EDX\nLEA RDI,[0x1e0 + RSP]\nCALL 0x004044a0\nMOV RBP,RAX\nMOV RDI,qword ptr [0x0061a580]\nINC RDI\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nXOR EDX,EDX\nMOV RSI,RBP\nCALL 0x004044d0\nTEST RAX,RAX\nJZ 0x00403a12\nCMP byte ptr [RAX],0x2e\nMOV RCX,RAX\nMOV qword ptr [RSP + 0x18],RCX\nJNZ 0x00403a12\nINC RAX\nLEA RSI,[RBP + 0x8]\nXOR EDX,EDX\nMOV RDI,RAX\nCALL 0x004044d0\nMOV qword ptr [RSP + 0x18],RAX\nCMP qword ptr [RBP],0x0\nJNZ 0x00403a28\nCMP qword ptr [RBP + 0x8],0x0\nJNZ 0x00403a28\nMOV qword ptr [RBP],-0x1\nMOV RDI,qword ptr [RSP + 0x18]\nTEST RDI,RDI\nJZ 0x00403a41\nXOR EDX,EDX\nMOV RSI,RBP\nCALL 0x00404580\nCMP byte ptr [RAX],0x0\nJZ 0x00403a86\nMOV RBP,qword ptr [RSP + 0x28]\nMOV RAX,qword ptr [0x0061a580]\nMOV qword ptr [RBX + R15*0x8],RAX\nINC R15\nJMP 0x00403466\nMOV R13D,0x63\nTEST BPL,BPL\nJZ 0x00403a71\nMOVSX EAX,BPL\nCMP EAX,R13D\nJNZ 0x00404182\nMOV ECX,R12D\nMOV BPL,R13B\nMOV EAX,R13D\nJMP 0x00403380\nXOR EBX,EBX\nJMP 0x004037db\nMOV qword ptr [RSP + 0x18],RBP\nCMP byte ptr [RSP + 0x40],0x0\nMOV RBP,qword ptr [RSP + 0x28]\nJZ 0x00403b39\nMOVSXD RAX,dword ptr [0x0061a578]\nLEA ECX,[RAX + 0x1]\nMOV dword ptr [0x0061a578],ECX\nMOV RCX,qword ptr [RSP + 0x30]\nMOV RAX,qword ptr [RCX + RAX*0x8]\nMOV qword ptr [0xb0 + RSP],RAX\nLEA RDI,[RAX + 0x1]\nMOV RAX,qword ptr [RSP + 0x18]\nLEA RSI,[RAX + 0x10]\nMOV EDX,0x413503\nMOV qword ptr [RSP + 0x40],RSI\nCALL 0x004044d0\nTEST RAX,RAX\nJZ 0x00404288\nCMP byte ptr [RAX],0x2e\nJNZ 0x00403aff\nINC RAX\nMOV RSI,qword ptr [RSP + 0x18]\nADD RSI,0x18\nMOV EDX,0x41353e\nMOV RDI,RAX\nCALL 0x004044d0\nMOV RSI,qword ptr [RSP + 0x18]\nCMP qword ptr [RSI + 0x18],0x0\nJNZ 0x00403b23\nMOV RCX,qword ptr [RSP + 0x40]\nMOV RCX,qword ptr [RCX]\nTEST RCX,RCX\nJZ 0x00403b23\nDEC RCX\nMOV RDX,qword ptr [RSP + 0x40]\nMOV qword ptr [RDX],RCX\nMOV EDX,0x1\nMOV RDI,RAX\nCALL 0x00404580\nCMP byte ptr [RAX],0x0\nJNZ 0x00404276\nMOV RDI,qword ptr [RSP + 0x18]\nMOV byte ptr [RDI + 0x39],0x1\nCALL 0x004046a0\nJMP 0x00403466\nMOV RDI,qword ptr [RSP + 0x38]\nTEST RDI,RDI\nMOV qword ptr [RSP + 0x28],RBP\nJZ 0x00403d60\nTEST R15,R15\nJNZ 0x0040419d\nCMP byte ptr [RDI],0x2d\nJNZ 0x00403b73\nCMP byte ptr [RDI + 0x1],0x0\nJZ 0x00403bd0\nMOV ESI,0x413a7d\nCALL 0x0040b060\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00403bd7\nCALL 0x00402430\nMOV R14D,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x4136f5\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RBP,RBX\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x38]\nCALL 0x0040dc90\nMOV RCX,RAX\nMOV EDI,0x2\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBX\nMOV RBX,RBP\nCALL 0x00402960\nJMP 0x00403bd7\nMOV R13,qword ptr [0x0061a570]\nLEA RBP,[0xc0 + RSP]\nMOV RDI,RBP\nCALL 0x0040ee60\nMOV RDI,R13\nMOV RSI,RBP\nCALL 0x0040ef00\nTEST AL,AL\nJZ 0x00403c02\nMOV RDI,R13\nCALL 0x004105f0\nTEST EAX,EAX\nJZ 0x00403c39\nXOR EDI,EDI\nMOV ESI,0x413710\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x38]\nCALL 0x0040dc90\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00402960\nCMP qword ptr [0xc0 + RSP],0x0\nJZ 0x00403d1e\nMOV RDI,RBX\nCALL 0x00402400\nMOV R15,qword ptr [0xc0 + RSP]\nMOV RBX,qword ptr [0xc8 + RSP]\nTEST R15,R15\nJZ 0x00403d5d\nXOR EBP,EBP\nMOV R13,RBX\nNOP\nMOV RAX,qword ptr [RBX + RBP*0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00403c7f\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00403cd1\nMOV RAX,qword ptr [RBX + RBP*0x8]\nCMP byte ptr [RAX],0x0\nJNZ 0x00403d10\nLEA R14,[RBP + 0x1]\nXOR EDI,EDI\nMOV ESI,0x41376e\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,qword ptr [RSP + 0x38]\nCALL 0x0040dd70\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nMOV RBX,R13\nMOV R8,R14\nCALL 0x00402960\nJMP 0x00403d10\nXOR EDI,EDI\nMOV ESI,0x41372f\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RBX,RAX\nMOV RSI,qword ptr [R13 + RBP*0x8]\nMOV EDI,0x4\nCALL 0x0040dc90\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nMOV RBX,R13\nCALL 0x00402960\nNOP dword ptr [RAX + RAX*0x1]\nINC RBP\nCMP R15,RBP\nJNZ 0x00403c70\nJMP 0x00403d60\nXOR EDI,EDI\nMOV ESI,0x413794\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RBP,RBX\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x38]\nCALL 0x0040dc90\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nMOV RBX,RBP\nCALL 0x00402960\nJMP 0x00403d60\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x18],RBX\nMOV RBP,qword ptr [0x0061a650]\nXOR EBX,EBX\nTEST RBP,RBP\nJZ 0x00403e44\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,RBP\nCALL 0x00404af0\nTEST AL,AL\nJZ 0x00403e20\nCMP byte ptr [RBP + 0x37],0x0\nJNZ 0x00403e20\nMOV RAX,qword ptr [0x88 + RSP]\nMOV qword ptr [RBP + 0x20],RAX\nMOV RAX,qword ptr [0x90 + RSP]\nMOV qword ptr [RBP + 0x28],RAX\nMOVZX EAX,byte ptr [0x98 + RSP]\nMOV byte ptr [RBP + 0x30],AL\nMOVZX EAX,byte ptr [0x99 + RSP]\nMOV byte ptr [RBP + 0x31],AL\nMOVZX EAX,byte ptr [0x9e + RSP]\nMOV byte ptr [RBP + 0x36],AL\nMOVZX EAX,byte ptr [0x9a + RSP]\nMOV byte ptr [RBP + 0x32],AL\nMOVZX EAX,byte ptr [0x9c + RSP]\nMOV byte ptr [RBP + 0x34],AL\nMOVZX EAX,byte ptr [0x9d + RSP]\nMOV byte ptr [RBP + 0x35],AL\nMOVZX EAX,byte ptr [0xa0 + RSP]\nMOV byte ptr [RBP + 0x38],AL\nMOVZX EAX,byte ptr [0x9b + RSP]\nMOV byte ptr [RBP + 0x33],AL\nMOVZX EAX,byte ptr [0x9f + RSP]\nMOV byte ptr [RBP + 0x37],AL\nNOP dword ptr CS:[RAX + RAX*0x1]\nOR BL,byte ptr [RBP + 0x33]\nMOV RBP,qword ptr [RBP + 0x40]\nTEST RBP,RBP\nJNZ 0x00403d80\nCMP qword ptr [0x0061a650],0x0\nJZ 0x00403e44\nXOR R13D,R13D\nMOV RBP,qword ptr [RSP + 0x28]\nJMP 0x00403e70\nMOV RBP,qword ptr [RSP + 0x28]\nLEA RDI,[RSP + 0x68]\nCALL 0x00404af0\nTEST AL,AL\nJZ 0x00403e5c\nXOR R13D,R13D\nJMP 0x00403e70\nLEA RDI,[RSP + 0x68]\nCALL 0x004046a0\nOR BL,byte ptr [0x9b + RSP]\nMOV R13B,0x1\nCALL 0x00404b50\nCMP byte ptr [0x0061a648],0x1\nJNZ 0x00403f67\nCMP qword ptr [RSP + 0x48],0x0\nJNZ 0x0040421c\nTEST BPL,BPL\nJNZ 0x0040421c\nCMP byte ptr [0x0061a5b0],0x0\nJZ 0x00403ede\nMOV R14,RBP\nXOR EDI,EDI\nMOV ESI,0x4137a5\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RBP,RAX\nMOV EDI,0x3\nXOR ESI,ESI\nCALL 0x00402910\nMOV RDI,RAX\nCALL 0x0040deb0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00402960\nJMP 0x00403f56\nCMP qword ptr [0xb8 + RSP],0x0\nJZ 0x00403f00\nMOV EDI,0x3\nMOV ESI,0x414bf9\nCALL 0x00402910\nTEST RAX,RAX\nSETNZ byte ptr [RSP + 0x16]\nCMP byte ptr [RSP + 0x16],0x0\nJZ 0x00403f11\nMOV R14,RBP\nMOV EAX,0x414bf9\nJMP 0x00403f25\nMOV R14,RBP\nXOR EDI,EDI\nMOV ESI,0x4137c1\nMOV EDX,0x5\nCALL 0x004025b0\nMOV qword ptr [RSP + 0x30],RAX\nXOR EDI,EDI\nMOV ESI,0x4137d8\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RBP,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EDX,0x4137bc\nXOR EAX,EAX\nMOV RCX,qword ptr [RSP + 0x30]\nMOV R8,RBP\nCALL 0x00402960\nMOVZX ESI,R13B\nLEA RDI,[RSP + 0x68]\nCALL 0x00404bc0\nMOV RBP,R14\nMOV AL,byte ptr [0x9f + RSP]\nMOV byte ptr [0x0061a658],AL\nTEST BL,0x1\nJZ 0x00403f83\nMOV RDI,qword ptr [RSP + 0x50]\nCALL 0x00405170\nCMP qword ptr [0x0061a660],0x0\nMOV R14,qword ptr [RSP + 0x48]\nMOV RBX,qword ptr [RSP + 0x18]\nJNZ 0x00403fb2\nMOV EDI,0x4137f5\nCALL 0x004023d0\nTEST RAX,RAX\nMOV EDI,0x4130f2\nCMOVNZ RDI,RAX\nCALL 0x00404a10\nTEST R15,R15\nJNZ 0x00403fd9\nMOV RDI,RBX\nCALL 0x00402400\nMOV EDI,0x8\nCALL 0x0040fb80\nMOV RBX,RAX\nMOV qword ptr [RBX],0x413cd5\nMOV R15D,0x1\nMOV RAX,qword ptr [0x0061a668]\nTEST RAX,RAX\nJZ 0x00403ffd\nMOV ECX,dword ptr [0x0061a3f0]\nIMUL RCX,RCX,0x22\nCMP RAX,RCX\nCMOVA RCX,RAX\nMOV qword ptr [0x0061a668],RCX\nTEST BPL,BPL\nJZ 0x00404061\nCMP R15,0x2\nJC 0x00404042\nXOR EDI,EDI\nMOV ESI,0x4137fc\nMOV EDX,0x5\nCALL 0x004025b0\nMOV R15,RAX\nMOV RSI,qword ptr [RBX + 0x8]\nMOV EDI,0x4\nCALL 0x0040dc90\nMOV RCX,RAX\nMOVSX R8D,BPL\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00402960\nTEST R14,R14\nJNZ 0x0040420b\nMOV RDI,qword ptr [RBX]\nMOVSX ESI,BPL\nCALL 0x00405200\nXOR AL,0x1\nMOVZX EBX,AL\nJMP 0x00404123\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x004054d0\nMOV RDI,R14\nCALL 0x00405540\nTEST R12B,0x1\nJNZ 0x004040bf\nMOV RBP,0xffffffffffffff\nMOV RCX,qword ptr [RSP + 0x58]\nTEST RCX,RCX\nJNZ 0x004040a5\nMOV EDI,0x2\nCALL 0x0040c6c0\nCMP RAX,0x8\nMOV ECX,0x8\nCMOVC RCX,RAX\nCMP RCX,RBP\nCMOVC RBP,RCX\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,R14\nMOV RCX,RBP\nCALL 0x00405900\nJMP 0x00404103\nMOV ESI,0x10\nMOV RDI,R15\nCALL 0x0040fca0\nTEST R15,R15\nJZ 0x004040f3\nXOR ECX,ECX\nMOV RDX,RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [RBX + RCX*0x8]\nMOV qword ptr [RDX],RSI\nINC RCX\nADD RDX,0x10\nCMP RCX,R15\nJC 0x004040e0\nXOR ESI,ESI\nMOV RDI,RAX\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x00405590\nXOR EBX,EBX\nCMP byte ptr [0x0061a5bc],0x1\nJNZ 0x00404123\nMOV RDI,qword ptr [0x0061a570]\nCALL 0x004105f0\nCMP EAX,-0x1\nJZ 0x00404258\nMOV EAX,EBX\nADD RSP,0x228\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [0x0061a568]\nMOV RCX,qword ptr [0x0061a4d0]\nMOV qword ptr [RSP],0x0\nMOV ESI,0x413577\nMOV EDX,0x413689\nMOV R8D,0x413697\nMOV R9D,0x4136a4\nXOR EAX,EAX\nCALL 0x0040fa50\nXOR EDI,EDI\nCALL 0x00402a50\nXOR EDI,EDI\nCALL 0x00402c40\nMOV EDI,0x2\nCALL 0x00402c40\nMOV EDI,0x413584\nCALL 0x004046d0\nMOV RDI,qword ptr [0x0061a580]\nMOV ESI,0x4135ca\nCALL 0x00404640\nXOR EDI,EDI\nMOV ESI,0x4136b0\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RBX\nMOV RBX,RAX\nMOV RSI,qword ptr [RCX]\nMOV EDI,0x4\nCALL 0x0040dc90\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402960\nMOV RBX,qword ptr [0x0061a5a0]\nXOR EDI,EDI\nMOV ESI,0x4136c1\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x414b20\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00402a70\nMOV EDI,0x2\nCALL 0x00402c40\nMOV byte ptr [0x0061a3f4],BPL\nMOV EDI,0x61a3f4\nCALL 0x004046d0\nMOV RAX,RBP\nTEST BPL,BPL\nJNZ 0x00404226\nMOV AL,0x6f\nMOV byte ptr [0x0061a3e4],AL\nMOV EDI,0x61a3e4\nCALL 0x004046d0\nMOV RDI,qword ptr [0x0061a580]\nMOV ESI,0x413557\nCALL 0x00404640\nMOV RDI,qword ptr [0x0061a580]\nMOV ESI,0x4135df\nCALL 0x00404640\nXOR EDI,EDI\nMOV ESI,0x413822\nMOV EDX,0x5\nCALL 0x004025b0\nMOV ESI,0x413cd5\nMOV RDI,RAX\nCALL 0x00405c70\nMOV ESI,0x413557\nMOV RDI,qword ptr [0xb0 + RSP]\nCALL 0x00404640\nMOV EDI,0x4140ec\nMOV ESI,0x41351c\nMOV EDX,0x10f5\nMOV ECX,0x413527\nCALL 0x00402680\n'
p1194
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 28 02 00 00\n48 89 f3\n41 89 fe\nbf db 34 41 00\ne8 cf f2 ff ff\n48 89 44 24 60\ne8 55 98 00 00\n3d b0 0d 03 00\n0f 9c 44 24 15\n48 89 5c 24 30\n48 8b 3b\ne8 9e 98 00 00\nbf 06 00 00 00\nbe f9 4b 41 00\ne8 df f7 ff ff\n48 89 84 24 b8 00 00 00\n48 85 c0\n0f 95 44 24 16\nbf 8d 36 41 00\nbe eb 34 41 00\ne8 40 f4 ff ff\nbf 8d 36 41 00\ne8 f6 f3 ff ff\ne8 51 11 00 00\nbf 03 00 00 00\ne8 87 7f 00 00\n88 05 41 74 21 00\nbf 02 00 00 00\ne8 77 7f 00 00\n88 05 32 74 21 00\ne8 6c f3 ff ff\n48 89 c3\n48 8b 03\n0f be 38\ne8 2e 11 00 00\n0f b6 c0\n89 05 19 74 21 00\n84 c0\n74 09\n48 8b 03\n80 78 01 00\n74 0a\nc7 05 02 74 21 00 2e 00 00 00\n48 8b 43 08\n0f be 38\ne8 02 11 00 00\n0f b6 c0\n89 05 f1 73 21 00\n84 c0\n74 0a\n48 8b 43 08\n80 78 01 00\n74 0a\nc7 05 d9 73 21 00 ff ff ff ff\nc6 05 d6 73 21 00 00\ne8 e5 10 00 00\nbf c0 a5 61 00\ne8 ab f5 ff ff\n48 c7 c3 d4 ff ff ff\n4c 8d bc 24 c0 00 00 00\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n8b ab dc 1f 41 00\n31 f6\n89 ef\n4c 89 fa\ne8 ae f2 ff ff\n48 83 bc 24 c0 00 00 00 01\n74 0c\nbf c0 a5 61 00\n89 ee\ne8 b7 f8 ff ff\n48 83 c3 04\n75 d1\n48 c7 84 24 c0 00 00 00 30 44 40 00\n0f 10 05 de 73 21 00\n0f 11 84 24 38 01 00 00\n0f 10 05 bf 73 21 00\n0f 11 84 24 28 01 00 00\n0f 10 05 a0 73 21 00\n0f 11 84 24 18 01 00 00\n0f 10 05 81 73 21 00\n0f 11 84 24 08 01 00 00\n0f 10 05 62 73 21 00\n0f 11 84 24 f8 00 00 00\n0f 10 05 43 73 21 00\n0f 11 84 24 e8 00 00 00\n0f 10 05 24 73 21 00\n0f 11 84 24 d8 00 00 00\n0f 10 05 05 73 21 00\n0f 11 84 24 c8 00 00 00\nc7 84 24 48 01 00 00 00 00 00 00\n48 c7 c3 d4 ff ff ff\n4c 8d bc 24 c0 00 00 00\n0f 1f 00\n8b ab dc 1f 41 00\nbf c0 a5 61 00\n89 ee\ne8 4e f7 ff ff\n85 c0\n74 0c\n31 d2\n89 ef\n4c 89 fe\ne8 ce f1 ff ff\n48 83 c3 04\n75 d8\n31 c0\n48 89 44 24 48\nbf 11 00 00 00\n31 f6\ne8 65 f4 ff ff\nbf 50 44 40 00\ne8 6b e2 00 00\n48 8d 7c 24 68\ne8 71 11 00 00\n48 c7 44 24 68 ff ff ff ff\n49 63 fe\nbe 08 00 00 00\ne8 1b c8 00 00\n48 89 c3\n48 83 7c 24 60 00\n0f 94 44 24 17\nb8 00 00 00 00\n48 89 44 24 38\n41 bf 00 00 00 00\n31 c0\n48 89 44 24 58\n31 c0\n48 89 44 24 50\n45 31 e4\n31 ed\n31 d2\neb 0b\n41 88 cc\n89 c2\nc7 84 24 c0 00 00 00 ff ff ff ff\n83 fa ff\n0f 84 e7 00 00 00\n48 83 7c 24 60 00\n74 5f\n4d 85 ff\n74 5a\nf6 44 24 15 01\n0f 84 d4 00 00 00\n40 84 ed\n0f 85 cb 00 00 00\n48 63 05 b7 71 21 00\n44 39 f0\n0f 84 bb 00 00 00\n48 8b 4c 24 30\n48 8b 0c c1\n80 39 2d\n0f 85 a9 00 00 00\n80 79 01 6f\n0f 85 9f 00 00 00\nff c0\n44 39 f0\n75 13\n8a 41 02\n84 c0\n0f 84 8d 00 00 00\n0f 1f 84 00 00 00 00 00\nba e0 1f 41 00\nb9 00 20 41 00\n44 89 f7\n48 8b 74 24 30\n4c 8d 84 24 c0 00 00 00\ne8 d1 f1 ff ff\n41 89 c5\n41 8d b5 83 00 00 00\n81 fe 0a 01 00 00\n0f 87 43 0d 00 00\nb8 6d 00 00 00\nb1 01\nba ff ff ff ff\nff 24 f5 00 16 41 00\n44 88 6c 24 26\nc6 44 24 27 00\n48 8d 7c 24 26\n48 8d 74 24 68\nba 02 00 00 00\ne8 1a 11 00 00\n44 89 e1\n44 89 e8\ne9 0f ff ff ff\nba ff ff ff ff\n48 63 05 ec 70 21 00\n44 39 f0\n0f 8d b7 06 00 00\n8d 48 01\n89 0d da 70 21 00\n48 8b 4c 24 30\n48 8b 04 c1\n4a 89 04 fb\n49 ff c7\n44 89 e1\n89 d0\ne9 c8 fe ff ff\nc6 05 8c 71 21 00 01\nb8 7a 00 00 00\ne9 cf 04 00 00\nc6 05 78 71 21 00 01\nb8 82 00 00 00\ne9 be 04 00 00\n48 8b 3d 9f 70 21 00\ne8 2a 15 00 00\nb8 54 00 00 00\ne9 a8 04 00 00\n48 8d bc 24 e0 01 00 00\ne8 a3 0f 00 00\n49 89 c5\n48 8b 3d 79 70 21 00\nba ac 35 41 00\n4c 89 ee\ne8 bc 0f 00 00\n49 8b 4d 00\n48 8d 51 ff\n49 89 55 00\n48 85 c9\n0f 84 63 0c 00 00\n80 38 2e\n75 29\n48 ff c0\n49 8d 75 08\nba 3e 35 41 00\n48 89 c7\ne8 8e 0f 00 00\n49 8b 4d 08\n48 8d 51 ff\n49 89 55 08\n48 85 c9\n0f 84 f0 0c 00 00\n49 83 7d 00 00\n75 0f\n49 83 7d 08 00\n75 08\n49 c7 45 00 ff ff ff ff\n31 d2\n48 89 c7\n4c 89 ee\ne8 06 10 00 00\n80 38 2c\n0f 85 ef 03 00 00\n48 ff c0\n49 8d 75 10\nba f8 35 41 00\n48 89 c7\ne8 39 0f 00 00\n49 8b 4d 10\n48 8d 51 ff\n49 89 55 10\n48 85 c9\n0f 84 e0 0b 00 00\n80 38 2e\n75 17\n48 ff c0\n4c 89 ee\n48 83 c6 18\nba 3e 35 41 00\n48 89 c7\ne8 08 0f 00 00\nba 01 00 00 00\n48 89 c7\n4c 89 ee\ne8 a8 0f 00 00\n80 38 00\n0f 84 aa 03 00 00\ne9 50 0c 00 00\n48 8b 3d 53 70 21 00\n48 85 ff\n74 35\n48 8b 35 87 6f 21 00\ne8 72 f1 ff ff\n85 c0\n74 25\n31 ff\nbe 87 35 41 00\nba 05 00 00 00\ne8 9d ef ff ff\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 39 f3 ff ff\n48 8b 05 52 6f 21 00\n48 89 05 0b 70 21 00\nb8 81 00 00 00\ne9 59 03 00 00\n48 8b 35 3a 6f 21 00\n4c 8b 0d 8b 6e 21 00\nbf 75 35 41 00\nba f0 23 41 00\nb9 e0 23 41 00\n41 b8 01 00 00 00\ne8 99 68 00 00\n44 0f be a8 e0 23 41 00\ne9 d4 fd ff ff\n48 8b 05 05 6f 21 00\n80 38 2b\n0f 85 c2 03 00 00\n48 63 05 ed 6e 21 00\n44 39 f0\n48 89 6c 24 28\n0f 84 07 03 00 00\n48 8b 4c 24 30\n48 8b 04 c1\n80 38 2d\n0f 85 f5 02 00 00\n0f be 40 01\n83 c0 d0\n83 f8 0a\n0f 92 c2\ne9 e5 02 00 00\n8b bc 24 c0 00 00 00\n48 8b 15 b5 6e 21 00\n41 0f be f5\ne8 dc 11 00 00\nb8 53 00 00 00\ne9 ba 02 00 00\n48 8b 7c 24 48\n48 85 ff\n74 35\n48 8b 35 91 6e 21 00\ne8 7c f0 ff ff\n85 c0\n74 25\n31 ff\nbe 11 36 41 00\nba 05 00 00 00\ne8 a7 ee ff ff\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 43 f2 ff ff\n48 8b 05 5c 6e 21 00\n48 89 44 24 48\nb8 6f 00 00 00\ne9 65 02 00 00\nc6 05 0f 6f 21 00 01\nb8 73 00 00 00\ne9 54 02 00 00\n48 89 5c 24 18\n48 8b 05 30 6e 21 00\n8a 18\n84 db\n75 25\n31 ff\nbe 53 36 41 00\nba 05 00 00 00\ne8 49 ee ff ff\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 e5 f1 ff ff\n48 8b 05 fe 6d 21 00\n8a 48 01\n84 c9\n74 52\n80 38 5c\n75 0f\n80 f9 30\n75 0a\n80 78 02 00\n0f 84 e2 02 00 00\n31 ff\nbe 60 36 41 00\nba 05 00 00 00\ne8 02 ee ff ff\n48 89 6c 24 28\n48 89 c5\n48 8b 3d c3 6d 21 00\ne8 ee a6 00 00\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ea\n48 8b 6c 24 28\ne8 85 f1 ff ff\n8b 05 ff 6b 21 00\n3d 80 00 00 00\n0f be db\n74 29\n39 d8\n74 25\n31 ff\nbe 77 36 41 00\nba 05 00 00 00\ne8 b0 ed ff ff\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 4c f1 ff ff\n89 1d c6 6b 21 00\n44 89 e1\n44 89 e8\n48 8b 5c 24 18\ne9 56 fb ff ff\n48 8b 15 4f 6d 21 00\n48 63 0d 40 6d 21 00\nb8 79 00 00 00\n48 8b 74 24 30\n48 3b 54 ce f8\n0f 85 4b 01 00 00\n0f 1f 00\n0f be 02\n8d 70 d0\n48 ff c2\n83 fe 0a\n72 f2\n3c 01\n83 d1 ff\n89 0d 0f 6d 21 00\ne9 f8 fb ff ff\n48 8b 05 0b 6d 21 00\n48 89 44 24 38\nb8 83 00 00 00\ne9 14 01 00 00\n8b bc 24 c0 00 00 00\n48 8b 15 ee 6c 21 00\n41 0f be f5\ne8 c5 11 00 00\n48 89 44 24 58\nb8 87 00 00 00\ne9 ee 00 00 00\nc6 05 99 6d 21 00 01\nb8 75 00 00 00\ne9 dd 00 00 00\n48 8b 35 be 6c 21 00\n48 85 f6\n0f 84 8e 01 00 00\n4c 8b 0d 06 6c 21 00\nbf 7c 35 41 00\nba 30 24 41 00\nb9 28 24 41 00\n41 b8 01 00 00 00\ne8 14 66 00 00\n44 0f be a8 28 24 41 00\n40 84 ed\n0f 85 67 01 00 00\ne9 6f 01 00 00\n8b bc 24 c0 00 00 00\n48 8b 15 70 6c 21 00\n41 0f be f5\ne8 f7 0d 00 00\nb8 84 00 00 00\neb 78\n48 8b 7c 24 50\n48 85 ff\n74 35\n48 8b 35 4f 6c 21 00\ne8 3a ee ff ff\n85 c0\n74 25\n31 ff\nbe 31 36 41 00\nba 05 00 00 00\ne8 65 ec ff ff\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 01 f0 ff ff\n48 8b 05 1a 6c 21 00\n48 89 44 24 50\nb8 85 00 00 00\neb 26\n49 c7 45 10 ff ff ff ff\n49 c7 45 18 00 00 00 00\n80 38 00\n0f 85 ab 08 00 00\n4c 89 ef\ne8 0d 0d 00 00\nb8 6b 00 00 00\n44 89 e1\ne9 e0 f9 ff ff\n31 d2\n89 d0\n22 44 24 17\n8a 4c 24 15\n80 e1 01\n08 c1\n88 4c 24 15\n0f 84 86 00 00 00\n89 54 24 40\n48 8d bc 24 e0 01 00 00\ne8 d4 0a 00 00\n48 89 c5\n48 8b 3d aa 6b 21 00\n48 ff c7\n31 c0\n48 89 44 24 18\n31 d2\n48 89 ee\ne8 e6 0a 00 00\n48 85 c0\n74 23\n80 38 2e\n48 89 c1\n48 89 4c 24 18\n75 16\n48 ff c0\n48 8d 75 08\n31 d2\n48 89 c7\ne8 c3 0a 00 00\n48 89 44 24 18\n48 83 7d 00 00\n75 0f\n48 83 7d 08 00\n75 08\n48 c7 45 00 ff ff ff ff\n48 8b 7c 24 18\n48 85 ff\n74 0f\n31 d2\n48 89 ee\ne8 44 0b 00 00\n80 38 00\n74 45\n48 8b 6c 24 28\n48 8b 05 33 6b 21 00\n4a 89 04 fb\n49 ff c7\ne9 0d fa ff ff\n41 bd 63 00 00 00\n40 84 ed\n74 0d\n40 0f be c5\n44 39 e8\n0f 85 11 07 00 00\n44 89 e1\n44 88 ed\n44 89 e8\ne9 01 f9 ff ff\n31 db\ne9 55 fd ff ff\n48 89 6c 24 18\n80 7c 24 40 00\n48 8b 6c 24 28\n0f 84 9e 00 00 00\n48 63 05 d6 6a 21 00\n8d 48 01\n89 0d cd 6a 21 00\n48 8b 4c 24 30\n48 8b 04 c1\n48 89 84 24 b0 00 00 00\n48 8d 78 01\n48 8b 44 24 18\n48 8d 70 10\nba 03 35 41 00\n48 89 74 24 40\ne8 f8 09 00 00\n48 85 c0\n0f 84 a7 07 00 00\n80 38 2e\n75 19\n48 ff c0\n48 8b 74 24 18\n48 83 c6 18\nba 3e 35 41 00\n48 89 c7\ne8 d1 09 00 00\n48 8b 74 24 18\n48 83 7e 18 00\n75 18\n48 8b 4c 24 40\n48 8b 09\n48 85 c9\n74 0b\n48 ff c9\n48 8b 54 24 40\n48 89 0a\nba 01 00 00 00\n48 89 c7\ne8 50 0a 00 00\n80 38 00\n0f 85 3d 07 00 00\n48 8b 7c 24 18\nc6 47 39 01\ne8 59 0b 00 00\ne9 1a f9 ff ff\n48 8b 7c 24 38\n48 85 ff\n48 89 6c 24 28\n0f 84 01 02 00 00\n4d 85 ff\n0f 85 35 06 00 00\n80 3f 2d\n75 06\n80 7f 01 00\n74 5d\nbe 7d 3a 41 00\ne8 e3 74 00 00\n49 89 c5\n4d 85 ed\n75 52\ne8 a6 e8 ff ff\n44 8b 30\n45 31 ed\n31 ff\nbe f5 36 41 00\nba 05 00 00 00\ne8 0f ea ff ff\n48 89 dd\n48 89 c3\nbf 04 00 00 00\n48 8b 74 24 38\ne8 da a0 00 00\n48 89 c1\nbf 02 00 00 00\n31 c0\n44 89 f6\n48 89 da\n48 89 eb\ne8 92 ed ff ff\neb 07\n4c 8b 2d 99 69 21 00\n48 8d ac 24 c0 00 00 00\n48 89 ef\ne8 79 b2 00 00\n4c 89 ef\n48 89 ee\ne8 0e b3 00 00\n84 c0\n74 0c\n4c 89 ef\ne8 f2 c9 00 00\n85 c0\n74 37\n31 ff\nbe 10 37 41 00\nba 05 00 00 00\ne8 9d e9 ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 38\ne8 6b a0 00 00\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ea\ne8 27 ed ff ff\n48 83 bc 24 c0 00 00 00 00\n0f 84 d6 00 00 00\n48 89 df\ne8 b0 e7 ff ff\n4c 8b bc 24 c0 00 00 00\n48 8b 9c 24 c8 00 00 00\n4d 85 ff\n0f 84 f4 00 00 00\n31 ed\n49 89 dd\n66 90\n48 8b 04 eb\n80 38 2d\n75 06\n80 78 01 00\n74 52\n48 8b 04 eb\n80 38 00\n0f 85 84 00 00 00\n4c 8d 75 01\n31 ff\nbe 6e 37 41 00\nba 05 00 00 00\ne8 0f e9 ff ff\n48 89 c3\n31 ff\nbe 03 00 00 00\n48 8b 54 24 38\ne8 bb a0 00 00\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 da\n4c 89 eb\n4d 89 f0\ne8 91 ec ff ff\neb 3f\n31 ff\nbe 2f 37 41 00\nba 05 00 00 00\ne8 ce e8 ff ff\n48 89 c3\n49 8b 74 ed 00\nbf 04 00 00 00\ne8 9c 9f 00 00\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 da\n4c 89 eb\ne8 55 ec ff ff\n0f 1f 44 00 00\n48 ff c5\n49 39 ef\n0f 85 54 ff ff ff\neb 42\n31 ff\nbe 94 37 41 00\nba 05 00 00 00\ne8 81 e8 ff ff\n48 89 dd\n48 89 c3\nbf 04 00 00 00\n48 8b 74 24 38\ne8 4c 9f 00 00\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 da\n48 89 eb\ne8 05 ec ff ff\neb 03\n45 31 ff\n48 89 5c 24 18\n48 8b 2d e4 68 21 00\n31 db\n48 85 ed\n0f 84 cd 00 00 00\n66 0f 1f 84 00 00 00 00 00\n48 89 ef\ne8 68 0d 00 00\n84 c0\n0f 84 90 00 00 00\n80 7d 37 00\n0f 85 86 00 00 00\n48 8b 84 24 88 00 00 00\n48 89 45 20\n48 8b 84 24 90 00 00 00\n48 89 45 28\n0f b6 84 24 98 00 00 00\n88 45 30\n0f b6 84 24 99 00 00 00\n88 45 31\n0f b6 84 24 9e 00 00 00\n88 45 36\n0f b6 84 24 9a 00 00 00\n88 45 32\n0f b6 84 24 9c 00 00 00\n88 45 34\n0f b6 84 24 9d 00 00 00\n88 45 35\n0f b6 84 24 a0 00 00 00\n88 45 38\n0f b6 84 24 9b 00 00 00\n88 45 33\n0f b6 84 24 9f 00 00 00\n88 45 37\n66 66 2e 0f 1f 84 00 00 00 00 00\n0a 5d 33\n48 8b 6d 40\n48 85 ed\n0f 85 50 ff ff ff\n48 83 3d 18 68 21 00 00\n74 0a\n45 31 ed\n48 8b 6c 24 28\neb 2c\n48 8b 6c 24 28\n48 8d 7c 24 68\ne8 9d 0c 00 00\n84 c0\n74 05\n45 31 ed\neb 14\n48 8d 7c 24 68\ne8 3a 08 00 00\n0a 9c 24 9b 00 00 00\n41 b5 01\ne8 db 0c 00 00\n80 3d cc 67 21 00 01\n0f 85 e5 00 00 00\n48 83 7c 24 48 00\n0f 85 8e 03 00 00\n40 84 ed\n0f 85 85 03 00 00\n80 3d 12 67 21 00 00\n74 3e\n49 89 ee\n31 ff\nbe a5 37 41 00\nba 05 00 00 00\ne8 fc e6 ff ff\n48 89 c5\nbf 03 00 00 00\n31 f6\ne8 4d ea ff ff\n48 89 c7\ne8 e5 9f 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 84 ea ff ff\neb 78\n48 83 bc 24 b8 00 00 00 00\n74 17\nbf 03 00 00 00\nbe f9 4b 41 00\ne8 18 ea ff ff\n48 85 c0\n0f 95 44 24 16\n80 7c 24 16 00\n74 0a\n49 89 ee\nb8 f9 4b 41 00\neb 14\n49 89 ee\n31 ff\nbe c1 37 41 00\nba 05 00 00 00\ne8 8b e6 ff ff\n48 89 44 24 30\n31 ff\nbe d8 37 41 00\nba 05 00 00 00\ne8 75 e6 ff ff\n48 89 c5\n31 ff\n31 f6\nba bc 37 41 00\n31 c0\n48 8b 4c 24 30\n49 89 e8\ne8 0a ea ff ff\n41 0f b6 f5\n48 8d 7c 24 68\ne8 5c 0c 00 00\n4c 89 f5\n8a 84 24 9f 00 00 00\n88 05 e4 66 21 00\nf6 c3 01\n74 0a\n48 8b 7c 24 50\ne8 ed 11 00 00\n48 83 3d d5 66 21 00 00\n4c 8b 74 24 48\n48 8b 5c 24 18\n75 1b\nbf f5 37 41 00\ne8 2f e4 ff ff\n48 85 c0\nbf f2 30 41 00\n48 0f 45 f8\ne8 5e 0a 00 00\n4d 85 ff\n75 22\n48 89 df\ne8 41 e4 ff ff\nbf 08 00 00 00\ne8 b7 bb 00 00\n48 89 c3\n48 c7 03 d5 3c 41 00\n41 bf 01 00 00 00\n48 8b 05 88 66 21 00\n48 85 c0\n74 18\n8b 0d 05 64 21 00\n48 6b c9 22\n48 39 c8\n48 0f 47 c8\n48 89 0d 6b 66 21 00\n40 84 ed\n74 5f\n49 83 ff 02\n72 3a\n31 ff\nbe fc 37 41 00\nba 05 00 00 00\ne8 97 e5 ff ff\n49 89 c7\n48 8b 73 08\nbf 04 00 00 00\ne8 66 9c 00 00\n48 89 c1\n44 0f be c5\nbf 02 00 00 00\n31 f6\n31 c0\n4c 89 fa\ne8 1e e9 ff ff\n4d 85 f6\n0f 85 c0 01 00 00\n48 8b 3b\n40 0f be f5\ne8 a9 11 00 00\n34 01\n0f b6 d8\ne9 c2 00 00 00\n48 89 df\n4c 89 fe\ne8 64 14 00 00\n4c 89 f7\ne8 cc 14 00 00\n41 f6 c4 01\n75 45\n48 bd ff ff ff ff ff ff ff 00\n48 8b 4c 24 58\n48 85 c9\n75 17\nbf 02 00 00 00\ne8 28 86 00 00\n48 83 f8 08\nb9 08 00 00 00\n48 0f 42 c8\n48 39 e9\n48 0f 42 e9\n48 89 df\n4c 89 fe\n4c 89 f2\n48 89 e9\ne8 43 18 00 00\neb 44\nbe 10 00 00 00\n4c 89 ff\ne8 d4 bb 00 00\n4d 85 ff\n74 22\n31 c9\n48 89 c2\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 34 cb\n48 89 32\n48 ff c1\n48 83 c2 10\n4c 39 f9\n72 ed\n31 f6\n48 89 c7\n4c 89 fa\n4c 89 f1\ne8 8d 14 00 00\n31 db\n80 3d b0 64 21 00 01\n75 15\n48 8b 3d 5b 64 21 00\ne8 d6 c4 00 00\n83 f8 ff\n0f 84 35 01 00 00\n89 d8\n48 81 c4 28 02 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 3d 2a 64 21 00\n48 8b 0d 8b 63 21 00\n48 c7 04 24 00 00 00 00\nbe 77 35 41 00\nba 89 36 41 00\n41 b8 97 36 41 00\n41 b9 a4 36 41 00\n31 c0\ne8 e6 b8 00 00\n31 ff\ne8 df e8 ff ff\n31 ff\ne8 c8 ea ff ff\nbf 02 00 00 00\ne8 be ea ff ff\nbf 84 35 41 00\ne8 44 05 00 00\n48 8b 3d ed 63 21 00\nbe ca 35 41 00\ne8 a3 04 00 00\n31 ff\nbe b0 36 41 00\nba 05 00 00 00\ne8 02 e4 ff ff\n48 89 d9\n48 89 c3\n48 8b 31\nbf 04 00 00 00\ne8 cf 9a 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 8e e7 ff ff\n48 8b 1d c7 63 21 00\n31 ff\nbe c1 36 41 00\nba 05 00 00 00\ne8 c6 e3 ff ff\n48 89 c1\nbe 01 00 00 00\nba 20 4b 41 00\n31 c0\n48 89 df\ne8 6f e8 ff ff\nbf 02 00 00 00\ne8 35 ea ff ff\n40 88 2d e2 61 21 00\nbf f4 a3 61 00\ne8 b4 04 00 00\n48 89 e8\n40 84 ed\n75 02\nb0 6f\n88 05 b8 61 21 00\nbf e4 a3 61 00\ne8 9a 04 00 00\n48 8b 3d 43 63 21 00\nbe 57 35 41 00\ne8 f9 03 00 00\n48 8b 3d 32 63 21 00\nbe df 35 41 00\ne8 e8 03 00 00\n31 ff\nbe 22 38 41 00\nba 05 00 00 00\ne8 47 e3 ff ff\nbe d5 3c 41 00\n48 89 c7\ne8 fa 19 00 00\nbe 57 35 41 00\n48 8b bc 24 b0 00 00 00\ne8 b8 03 00 00\nbf ec 40 41 00\nbe 1c 35 41 00\nba f5 10 00 00\nb9 27 35 41 00\ne8 df e3 ff ff\n'
p1195
S'.text:00000000004030e0\n.text:00000000004030e1\n.text:00000000004030e3\n.text:00000000004030e5\n.text:00000000004030e7\n.text:00000000004030e9\n.text:00000000004030ea\n.text:00000000004030f1\n.text:00000000004030f4\n.text:00000000004030f7\n.text:00000000004030fc\n.text:0000000000403101\n.text:0000000000403106\n.text:000000000040310b\n.text:0000000000403110\n.text:0000000000403115\n.text:000000000040311a\n.text:000000000040311d\n.text:0000000000403122\n.text:0000000000403127\n.text:000000000040312c\n.text:0000000000403131\n.text:0000000000403139\n.text:000000000040313c\n.text:0000000000403141\n.text:0000000000403146\n.text:000000000040314b\n.text:0000000000403150\n.text:0000000000403155\n.text:000000000040315a\n.text:000000000040315f\n.text:0000000000403164\n.text:0000000000403169\n.text:000000000040316f\n.text:0000000000403174\n.text:0000000000403179\n.text:000000000040317f\n.text:0000000000403184\n.text:0000000000403187\n.text:000000000040318a\n.text:000000000040318d\n.text:0000000000403192\n.text:0000000000403195\n.text:000000000040319b\n.text:000000000040319d\n.text:000000000040319f\n.text:00000000004031a2\n.text:00000000004031a6\n.text:00000000004031a8\n.text:00000000004031b2\n.text:00000000004031b6\n.text:00000000004031b9\n.text:00000000004031be\n.text:00000000004031c1\n.text:00000000004031c7\n.text:00000000004031c9\n.text:00000000004031cb\n.text:00000000004031cf\n.text:00000000004031d3\n.text:00000000004031d5\n.text:00000000004031df\n.text:00000000004031e6\n.text:00000000004031eb\n.text:00000000004031f0\n.text:00000000004031f5\n.text:00000000004031fc\n.text:0000000000403204\n.text:0000000000403210\n.text:0000000000403216\n.text:0000000000403218\n.text:000000000040321a\n.text:000000000040321d\n.text:0000000000403222\n.text:000000000040322b\n.text:000000000040322d\n.text:0000000000403232\n.text:0000000000403234\n.text:0000000000403239\n.text:000000000040323d\n.text:000000000040323f\n.text:000000000040324b\n.text:0000000000403252\n.text:000000000040325a\n.text:0000000000403261\n.text:0000000000403269\n.text:0000000000403270\n.text:0000000000403278\n.text:000000000040327f\n.text:0000000000403287\n.text:000000000040328e\n.text:0000000000403296\n.text:000000000040329d\n.text:00000000004032a5\n.text:00000000004032ac\n.text:00000000004032b4\n.text:00000000004032bb\n.text:00000000004032c3\n.text:00000000004032ce\n.text:00000000004032d5\n.text:00000000004032dd\n.text:00000000004032e0\n.text:00000000004032e6\n.text:00000000004032eb\n.text:00000000004032ed\n.text:00000000004032f2\n.text:00000000004032f4\n.text:00000000004032f6\n.text:00000000004032f8\n.text:00000000004032fa\n.text:00000000004032fd\n.text:0000000000403302\n.text:0000000000403306\n.text:0000000000403308\n.text:000000000040330a\n.text:000000000040330f\n.text:0000000000403314\n.text:0000000000403316\n.text:000000000040331b\n.text:0000000000403320\n.text:0000000000403325\n.text:000000000040332a\n.text:000000000040332f\n.text:0000000000403338\n.text:000000000040333b\n.text:0000000000403340\n.text:0000000000403345\n.text:0000000000403348\n.text:000000000040334e\n.text:0000000000403353\n.text:0000000000403358\n.text:000000000040335d\n.text:0000000000403363\n.text:0000000000403365\n.text:000000000040336a\n.text:000000000040336c\n.text:0000000000403371\n.text:0000000000403374\n.text:0000000000403376\n.text:0000000000403378\n.text:0000000000403380\n.text:0000000000403383\n.text:0000000000403385\n.text:0000000000403390\n.text:0000000000403393\n.text:0000000000403399\n.text:000000000040339f\n.text:00000000004033a1\n.text:00000000004033a4\n.text:00000000004033a6\n.text:00000000004033ab\n.text:00000000004033b1\n.text:00000000004033b4\n.text:00000000004033ba\n.text:00000000004033c1\n.text:00000000004033c4\n.text:00000000004033ca\n.text:00000000004033cf\n.text:00000000004033d3\n.text:00000000004033d6\n.text:00000000004033dc\n.text:00000000004033e0\n.text:00000000004033e6\n.text:00000000004033e8\n.text:00000000004033eb\n.text:00000000004033ed\n.text:00000000004033f0\n.text:00000000004033f2\n.text:00000000004033f8\n.text:0000000000403400\n.text:0000000000403405\n.text:000000000040340a\n.text:000000000040340d\n.text:0000000000403412\n.text:000000000040341a\n.text:000000000040341f\n.text:0000000000403422\n.text:0000000000403429\n.text:000000000040342f\n.text:0000000000403435\n.text:000000000040343a\n.text:000000000040343c\n.text:0000000000403441\n.text:0000000000403448\n.text:000000000040344d\n.text:0000000000403452\n.text:0000000000403457\n.text:000000000040345c\n.text:0000000000403461\n.text:0000000000403466\n.text:0000000000403469\n.text:000000000040346c\n.text:0000000000403480\n.text:0000000000403485\n.text:000000000040348c\n.text:000000000040348f\n.text:0000000000403495\n.text:0000000000403498\n.text:000000000040349e\n.text:00000000004034a3\n.text:00000000004034a7\n.text:00000000004034ab\n.text:00000000004034ae\n.text:00000000004034b1\n.text:00000000004034b3\n.text:00000000004034b8\n.text:00000000004034bf\n.text:00000000004034c4\n.text:00000000004034c9\n.text:00000000004034d0\n.text:00000000004034d5\n.text:00000000004034da\n.text:00000000004034e1\n.text:00000000004034e6\n.text:00000000004034eb\n.text:00000000004034f0\n.text:00000000004034f8\n.text:00000000004034fd\n.text:0000000000403500\n.text:0000000000403507\n.text:000000000040350c\n.text:000000000040350f\n.text:0000000000403514\n.text:0000000000403518\n.text:000000000040351c\n.text:0000000000403520\n.text:0000000000403523\n.text:0000000000403529\n.text:000000000040352c\n.text:000000000040352e\n.text:0000000000403531\n.text:0000000000403535\n.text:000000000040353a\n.text:000000000040353d\n.text:0000000000403542\n.text:0000000000403546\n.text:000000000040354a\n.text:000000000040354e\n.text:0000000000403551\n.text:0000000000403557\n.text:000000000040355c\n.text:000000000040355e\n.text:0000000000403563\n.text:0000000000403565\n.text:000000000040356d\n.text:000000000040356f\n.text:0000000000403572\n.text:0000000000403575\n.text:000000000040357a\n.text:000000000040357d\n.text:0000000000403583\n.text:0000000000403586\n.text:000000000040358a\n.text:000000000040358f\n.text:0000000000403592\n.text:0000000000403597\n.text:000000000040359b\n.text:000000000040359f\n.text:00000000004035a3\n.text:00000000004035a6\n.text:00000000004035ac\n.text:00000000004035af\n.text:00000000004035b1\n.text:00000000004035b4\n.text:00000000004035b7\n.text:00000000004035bb\n.text:00000000004035c0\n.text:00000000004035c3\n.text:00000000004035c8\n.text:00000000004035cd\n.text:00000000004035d0\n.text:00000000004035d3\n.text:00000000004035d8\n.text:00000000004035db\n.text:00000000004035e1\n.text:00000000004035e6\n.text:00000000004035ed\n.text:00000000004035f0\n.text:00000000004035f2\n.text:00000000004035f9\n.text:00000000004035fe\n.text:0000000000403600\n.text:0000000000403602\n.text:0000000000403604\n.text:0000000000403609\n.text:000000000040360e\n.text:0000000000403613\n.text:0000000000403616\n.text:000000000040361b\n.text:000000000040361d\n.text:000000000040361f\n.text:0000000000403622\n.text:0000000000403627\n.text:000000000040362e\n.text:0000000000403635\n.text:000000000040363a\n.text:000000000040363f\n.text:0000000000403646\n.text:000000000040364d\n.text:0000000000403652\n.text:0000000000403657\n.text:000000000040365c\n.text:0000000000403662\n.text:0000000000403667\n.text:000000000040366f\n.text:0000000000403674\n.text:000000000040367b\n.text:000000000040367e\n.text:0000000000403684\n.text:000000000040368b\n.text:000000000040368e\n.text:0000000000403693\n.text:0000000000403699\n.text:000000000040369e\n.text:00000000004036a2\n.text:00000000004036a5\n.text:00000000004036ab\n.text:00000000004036af\n.text:00000000004036b2\n.text:00000000004036b5\n.text:00000000004036b8\n.text:00000000004036bd\n.text:00000000004036c4\n.text:00000000004036cb\n.text:00000000004036cf\n.text:00000000004036d4\n.text:00000000004036d9\n.text:00000000004036de\n.text:00000000004036e3\n.text:00000000004036e6\n.text:00000000004036e8\n.text:00000000004036ef\n.text:00000000004036f4\n.text:00000000004036f6\n.text:00000000004036f8\n.text:00000000004036fa\n.text:00000000004036ff\n.text:0000000000403704\n.text:0000000000403709\n.text:000000000040370c\n.text:0000000000403711\n.text:0000000000403713\n.text:0000000000403715\n.text:0000000000403718\n.text:000000000040371d\n.text:0000000000403724\n.text:0000000000403729\n.text:000000000040372e\n.text:0000000000403733\n.text:000000000040373a\n.text:000000000040373f\n.text:0000000000403744\n.text:0000000000403749\n.text:0000000000403750\n.text:0000000000403752\n.text:0000000000403754\n.text:0000000000403756\n.text:0000000000403758\n.text:000000000040375d\n.text:0000000000403762\n.text:0000000000403767\n.text:000000000040376a\n.text:000000000040376f\n.text:0000000000403771\n.text:0000000000403773\n.text:0000000000403776\n.text:000000000040377b\n.text:0000000000403782\n.text:0000000000403785\n.text:0000000000403787\n.text:0000000000403789\n.text:000000000040378c\n.text:000000000040378e\n.text:0000000000403791\n.text:0000000000403793\n.text:0000000000403797\n.text:000000000040379d\n.text:000000000040379f\n.text:00000000004037a4\n.text:00000000004037a9\n.text:00000000004037ae\n.text:00000000004037b3\n.text:00000000004037b6\n.text:00000000004037bd\n.text:00000000004037c2\n.text:00000000004037c5\n.text:00000000004037ca\n.text:00000000004037cc\n.text:00000000004037ce\n.text:00000000004037d1\n.text:00000000004037d6\n.text:00000000004037db\n.text:00000000004037e1\n.text:00000000004037e6\n.text:00000000004037e9\n.text:00000000004037eb\n.text:00000000004037ed\n.text:00000000004037ef\n.text:00000000004037f1\n.text:00000000004037f6\n.text:00000000004037fb\n.text:0000000000403800\n.text:0000000000403803\n.text:0000000000403808\n.text:000000000040380a\n.text:000000000040380c\n.text:000000000040380f\n.text:0000000000403814\n.text:000000000040381a\n.text:000000000040381d\n.text:0000000000403820\n.text:0000000000403825\n.text:000000000040382a\n.text:0000000000403831\n.text:0000000000403838\n.text:000000000040383d\n.text:0000000000403842\n.text:0000000000403847\n.text:000000000040384d\n.text:0000000000403850\n.text:0000000000403853\n.text:0000000000403856\n.text:0000000000403859\n.text:000000000040385c\n.text:000000000040385e\n.text:0000000000403860\n.text:0000000000403863\n.text:0000000000403869\n.text:000000000040386e\n.text:0000000000403875\n.text:000000000040387a\n.text:000000000040387f\n.text:0000000000403884\n.text:000000000040388b\n.text:0000000000403892\n.text:0000000000403896\n.text:000000000040389b\n.text:00000000004038a0\n.text:00000000004038a5\n.text:00000000004038aa\n.text:00000000004038b1\n.text:00000000004038b6\n.text:00000000004038bb\n.text:00000000004038c2\n.text:00000000004038c5\n.text:00000000004038cb\n.text:00000000004038d2\n.text:00000000004038d7\n.text:00000000004038dc\n.text:00000000004038e1\n.text:00000000004038e7\n.text:00000000004038ec\n.text:00000000004038f4\n.text:00000000004038f7\n.text:00000000004038fd\n.text:0000000000403902\n.text:0000000000403909\n.text:0000000000403910\n.text:0000000000403914\n.text:0000000000403919\n.text:000000000040391e\n.text:0000000000403920\n.text:0000000000403925\n.text:0000000000403928\n.text:000000000040392a\n.text:0000000000403931\n.text:0000000000403936\n.text:0000000000403938\n.text:000000000040393a\n.text:000000000040393c\n.text:0000000000403941\n.text:0000000000403946\n.text:000000000040394b\n.text:000000000040394e\n.text:0000000000403953\n.text:0000000000403955\n.text:0000000000403957\n.text:000000000040395a\n.text:000000000040395f\n.text:0000000000403966\n.text:000000000040396b\n.text:0000000000403970\n.text:0000000000403972\n.text:000000000040397a\n.text:0000000000403982\n.text:0000000000403985\n.text:000000000040398b\n.text:000000000040398e\n.text:0000000000403993\n.text:0000000000403998\n.text:000000000040399b\n.text:00000000004039a0\n.text:00000000004039a2\n.text:00000000004039a4\n.text:00000000004039a8\n.text:00000000004039ac\n.text:00000000004039af\n.text:00000000004039b1\n.text:00000000004039b5\n.text:00000000004039bb\n.text:00000000004039bf\n.text:00000000004039c7\n.text:00000000004039cc\n.text:00000000004039cf\n.text:00000000004039d6\n.text:00000000004039d9\n.text:00000000004039db\n.text:00000000004039e0\n.text:00000000004039e2\n.text:00000000004039e5\n.text:00000000004039ea\n.text:00000000004039ed\n.text:00000000004039ef\n.text:00000000004039f2\n.text:00000000004039f5\n.text:00000000004039fa\n.text:00000000004039fc\n.text:00000000004039ff\n.text:0000000000403a03\n.text:0000000000403a05\n.text:0000000000403a08\n.text:0000000000403a0d\n.text:0000000000403a12\n.text:0000000000403a17\n.text:0000000000403a19\n.text:0000000000403a1e\n.text:0000000000403a20\n.text:0000000000403a28\n.text:0000000000403a2d\n.text:0000000000403a30\n.text:0000000000403a32\n.text:0000000000403a34\n.text:0000000000403a37\n.text:0000000000403a3c\n.text:0000000000403a3f\n.text:0000000000403a41\n.text:0000000000403a46\n.text:0000000000403a4d\n.text:0000000000403a51\n.text:0000000000403a54\n.text:0000000000403a59\n.text:0000000000403a5f\n.text:0000000000403a62\n.text:0000000000403a64\n.text:0000000000403a68\n.text:0000000000403a6b\n.text:0000000000403a71\n.text:0000000000403a74\n.text:0000000000403a77\n.text:0000000000403a7a\n.text:0000000000403a7f\n.text:0000000000403a81\n.text:0000000000403a86\n.text:0000000000403a8b\n.text:0000000000403a90\n.text:0000000000403a95\n.text:0000000000403a9b\n.text:0000000000403aa2\n.text:0000000000403aa5\n.text:0000000000403aab\n.text:0000000000403ab0\n.text:0000000000403ab4\n.text:0000000000403abc\n.text:0000000000403ac0\n.text:0000000000403ac5\n.text:0000000000403ac9\n.text:0000000000403ace\n.text:0000000000403ad3\n.text:0000000000403ad8\n.text:0000000000403adb\n.text:0000000000403ae1\n.text:0000000000403ae4\n.text:0000000000403ae6\n.text:0000000000403ae9\n.text:0000000000403aee\n.text:0000000000403af2\n.text:0000000000403af7\n.text:0000000000403afa\n.text:0000000000403aff\n.text:0000000000403b04\n.text:0000000000403b09\n.text:0000000000403b0b\n.text:0000000000403b10\n.text:0000000000403b13\n.text:0000000000403b16\n.text:0000000000403b18\n.text:0000000000403b1b\n.text:0000000000403b20\n.text:0000000000403b23\n.text:0000000000403b28\n.text:0000000000403b2b\n.text:0000000000403b30\n.text:0000000000403b33\n.text:0000000000403b39\n.text:0000000000403b3e\n.text:0000000000403b42\n.text:0000000000403b47\n.text:0000000000403b4c\n.text:0000000000403b51\n.text:0000000000403b54\n.text:0000000000403b59\n.text:0000000000403b5f\n.text:0000000000403b62\n.text:0000000000403b68\n.text:0000000000403b6b\n.text:0000000000403b6d\n.text:0000000000403b71\n.text:0000000000403b73\n.text:0000000000403b78\n.text:0000000000403b7d\n.text:0000000000403b80\n.text:0000000000403b83\n.text:0000000000403b85\n.text:0000000000403b8a\n.text:0000000000403b8d\n.text:0000000000403b90\n.text:0000000000403b92\n.text:0000000000403b97\n.text:0000000000403b9c\n.text:0000000000403ba1\n.text:0000000000403ba4\n.text:0000000000403ba7\n.text:0000000000403bac\n.text:0000000000403bb1\n.text:0000000000403bb6\n.text:0000000000403bb9\n.text:0000000000403bbe\n.text:0000000000403bc0\n.text:0000000000403bc3\n.text:0000000000403bc6\n.text:0000000000403bc9\n.text:0000000000403bce\n.text:0000000000403bd0\n.text:0000000000403bd7\n.text:0000000000403bdf\n.text:0000000000403be2\n.text:0000000000403be7\n.text:0000000000403bea\n.text:0000000000403bed\n.text:0000000000403bf2\n.text:0000000000403bf4\n.text:0000000000403bf6\n.text:0000000000403bf9\n.text:0000000000403bfe\n.text:0000000000403c00\n.text:0000000000403c02\n.text:0000000000403c04\n.text:0000000000403c09\n.text:0000000000403c0e\n.text:0000000000403c13\n.text:0000000000403c16\n.text:0000000000403c1b\n.text:0000000000403c20\n.text:0000000000403c25\n.text:0000000000403c28\n.text:0000000000403c2d\n.text:0000000000403c2f\n.text:0000000000403c31\n.text:0000000000403c34\n.text:0000000000403c39\n.text:0000000000403c42\n.text:0000000000403c48\n.text:0000000000403c4b\n.text:0000000000403c50\n.text:0000000000403c58\n.text:0000000000403c60\n.text:0000000000403c63\n.text:0000000000403c69\n.text:0000000000403c6b\n.text:0000000000403c6e\n.text:0000000000403c70\n.text:0000000000403c74\n.text:0000000000403c77\n.text:0000000000403c79\n.text:0000000000403c7d\n.text:0000000000403c7f\n.text:0000000000403c83\n.text:0000000000403c86\n.text:0000000000403c8c\n.text:0000000000403c90\n.text:0000000000403c92\n.text:0000000000403c97\n.text:0000000000403c9c\n.text:0000000000403ca1\n.text:0000000000403ca4\n.text:0000000000403ca6\n.text:0000000000403cab\n.text:0000000000403cb0\n.text:0000000000403cb5\n.text:0000000000403cb8\n.text:0000000000403cbd\n.text:0000000000403cbf\n.text:0000000000403cc1\n.text:0000000000403cc4\n.text:0000000000403cc7\n.text:0000000000403cca\n.text:0000000000403ccf\n.text:0000000000403cd1\n.text:0000000000403cd3\n.text:0000000000403cd8\n.text:0000000000403cdd\n.text:0000000000403ce2\n.text:0000000000403ce5\n.text:0000000000403cea\n.text:0000000000403cef\n.text:0000000000403cf4\n.text:0000000000403cf7\n.text:0000000000403cfc\n.text:0000000000403cfe\n.text:0000000000403d00\n.text:0000000000403d03\n.text:0000000000403d06\n.text:0000000000403d0b\n.text:0000000000403d10\n.text:0000000000403d13\n.text:0000000000403d16\n.text:0000000000403d1c\n.text:0000000000403d1e\n.text:0000000000403d20\n.text:0000000000403d25\n.text:0000000000403d2a\n.text:0000000000403d2f\n.text:0000000000403d32\n.text:0000000000403d35\n.text:0000000000403d3a\n.text:0000000000403d3f\n.text:0000000000403d44\n.text:0000000000403d47\n.text:0000000000403d4c\n.text:0000000000403d4e\n.text:0000000000403d50\n.text:0000000000403d53\n.text:0000000000403d56\n.text:0000000000403d5b\n.text:0000000000403d5d\n.text:0000000000403d60\n.text:0000000000403d65\n.text:0000000000403d6c\n.text:0000000000403d6e\n.text:0000000000403d71\n.text:0000000000403d77\n.text:0000000000403d80\n.text:0000000000403d83\n.text:0000000000403d88\n.text:0000000000403d8a\n.text:0000000000403d90\n.text:0000000000403d94\n.text:0000000000403d9a\n.text:0000000000403da2\n.text:0000000000403da6\n.text:0000000000403dae\n.text:0000000000403db2\n.text:0000000000403dba\n.text:0000000000403dbd\n.text:0000000000403dc5\n.text:0000000000403dc8\n.text:0000000000403dd0\n.text:0000000000403dd3\n.text:0000000000403ddb\n.text:0000000000403dde\n.text:0000000000403de6\n.text:0000000000403de9\n.text:0000000000403df1\n.text:0000000000403df4\n.text:0000000000403dfc\n.text:0000000000403dff\n.text:0000000000403e07\n.text:0000000000403e0a\n.text:0000000000403e12\n.text:0000000000403e15\n.text:0000000000403e20\n.text:0000000000403e23\n.text:0000000000403e27\n.text:0000000000403e2a\n.text:0000000000403e30\n.text:0000000000403e38\n.text:0000000000403e3a\n.text:0000000000403e3d\n.text:0000000000403e42\n.text:0000000000403e44\n.text:0000000000403e49\n.text:0000000000403e4e\n.text:0000000000403e53\n.text:0000000000403e55\n.text:0000000000403e57\n.text:0000000000403e5a\n.text:0000000000403e5c\n.text:0000000000403e61\n.text:0000000000403e66\n.text:0000000000403e6d\n.text:0000000000403e70\n.text:0000000000403e75\n.text:0000000000403e7c\n.text:0000000000403e82\n.text:0000000000403e88\n.text:0000000000403e8e\n.text:0000000000403e91\n.text:0000000000403e97\n.text:0000000000403e9e\n.text:0000000000403ea0\n.text:0000000000403ea3\n.text:0000000000403ea5\n.text:0000000000403eaa\n.text:0000000000403eaf\n.text:0000000000403eb4\n.text:0000000000403eb7\n.text:0000000000403ebc\n.text:0000000000403ebe\n.text:0000000000403ec3\n.text:0000000000403ec6\n.text:0000000000403ecb\n.text:0000000000403ece\n.text:0000000000403ed0\n.text:0000000000403ed2\n.text:0000000000403ed4\n.text:0000000000403ed7\n.text:0000000000403edc\n.text:0000000000403ede\n.text:0000000000403ee7\n.text:0000000000403ee9\n.text:0000000000403eee\n.text:0000000000403ef3\n.text:0000000000403ef8\n.text:0000000000403efb\n.text:0000000000403f00\n.text:0000000000403f05\n.text:0000000000403f07\n.text:0000000000403f0a\n.text:0000000000403f0f\n.text:0000000000403f11\n.text:0000000000403f14\n.text:0000000000403f16\n.text:0000000000403f1b\n.text:0000000000403f20\n.text:0000000000403f25\n.text:0000000000403f2a\n.text:0000000000403f2c\n.text:0000000000403f31\n.text:0000000000403f36\n.text:0000000000403f3b\n.text:0000000000403f3e\n.text:0000000000403f40\n.text:0000000000403f42\n.text:0000000000403f47\n.text:0000000000403f49\n.text:0000000000403f4e\n.text:0000000000403f51\n.text:0000000000403f56\n.text:0000000000403f5a\n.text:0000000000403f5f\n.text:0000000000403f64\n.text:0000000000403f67\n.text:0000000000403f6e\n.text:0000000000403f74\n.text:0000000000403f77\n.text:0000000000403f79\n.text:0000000000403f7e\n.text:0000000000403f83\n.text:0000000000403f8b\n.text:0000000000403f90\n.text:0000000000403f95\n.text:0000000000403f97\n.text:0000000000403f9c\n.text:0000000000403fa1\n.text:0000000000403fa4\n.text:0000000000403fa9\n.text:0000000000403fad\n.text:0000000000403fb2\n.text:0000000000403fb5\n.text:0000000000403fb7\n.text:0000000000403fba\n.text:0000000000403fbf\n.text:0000000000403fc4\n.text:0000000000403fc9\n.text:0000000000403fcc\n.text:0000000000403fd3\n.text:0000000000403fd9\n.text:0000000000403fe0\n.text:0000000000403fe3\n.text:0000000000403fe5\n.text:0000000000403feb\n.text:0000000000403fef\n.text:0000000000403ff2\n.text:0000000000403ff6\n.text:0000000000403ffd\n.text:0000000000404000\n.text:0000000000404002\n.text:0000000000404006\n.text:0000000000404008\n.text:000000000040400a\n.text:000000000040400f\n.text:0000000000404014\n.text:0000000000404019\n.text:000000000040401c\n.text:0000000000404020\n.text:0000000000404025\n.text:000000000040402a\n.text:000000000040402d\n.text:0000000000404031\n.text:0000000000404036\n.text:0000000000404038\n.text:000000000040403a\n.text:000000000040403d\n.text:0000000000404042\n.text:0000000000404045\n.text:000000000040404b\n.text:000000000040404e\n.text:0000000000404052\n.text:0000000000404057\n.text:0000000000404059\n.text:000000000040405c\n.text:0000000000404061\n.text:0000000000404064\n.text:0000000000404067\n.text:000000000040406c\n.text:000000000040406f\n.text:0000000000404074\n.text:0000000000404078\n.text:000000000040407a\n.text:0000000000404084\n.text:0000000000404089\n.text:000000000040408c\n.text:000000000040408e\n.text:0000000000404093\n.text:0000000000404098\n.text:000000000040409c\n.text:00000000004040a1\n.text:00000000004040a5\n.text:00000000004040a8\n.text:00000000004040ac\n.text:00000000004040af\n.text:00000000004040b2\n.text:00000000004040b5\n.text:00000000004040b8\n.text:00000000004040bd\n.text:00000000004040bf\n.text:00000000004040c4\n.text:00000000004040c7\n.text:00000000004040cc\n.text:00000000004040cf\n.text:00000000004040d1\n.text:00000000004040d3\n.text:00000000004040d6\n.text:00000000004040e0\n.text:00000000004040e4\n.text:00000000004040e7\n.text:00000000004040ea\n.text:00000000004040ee\n.text:00000000004040f1\n.text:00000000004040f3\n.text:00000000004040f5\n.text:00000000004040f8\n.text:00000000004040fb\n.text:00000000004040fe\n.text:0000000000404103\n.text:0000000000404105\n.text:000000000040410c\n.text:000000000040410e\n.text:0000000000404115\n.text:000000000040411a\n.text:000000000040411d\n.text:0000000000404123\n.text:0000000000404125\n.text:000000000040412c\n.text:000000000040412d\n.text:000000000040412f\n.text:0000000000404131\n.text:0000000000404133\n.text:0000000000404135\n.text:0000000000404136\n.text:0000000000404137\n.text:000000000040413e\n.text:0000000000404145\n.text:000000000040414d\n.text:0000000000404152\n.text:0000000000404157\n.text:000000000040415d\n.text:0000000000404163\n.text:0000000000404165\n.text:000000000040416a\n.text:000000000040416c\n.text:0000000000404171\n.text:0000000000404173\n.text:0000000000404178\n.text:000000000040417d\n.text:0000000000404182\n.text:0000000000404187\n.text:000000000040418c\n.text:0000000000404193\n.text:0000000000404198\n.text:000000000040419d\n.text:000000000040419f\n.text:00000000004041a4\n.text:00000000004041a9\n.text:00000000004041ae\n.text:00000000004041b1\n.text:00000000004041b4\n.text:00000000004041b7\n.text:00000000004041bc\n.text:00000000004041c1\n.text:00000000004041c4\n.text:00000000004041c6\n.text:00000000004041c8\n.text:00000000004041ca\n.text:00000000004041cd\n.text:00000000004041d2\n.text:00000000004041d9\n.text:00000000004041db\n.text:00000000004041e0\n.text:00000000004041e5\n.text:00000000004041ea\n.text:00000000004041ed\n.text:00000000004041f2\n.text:00000000004041f7\n.text:00000000004041f9\n.text:00000000004041fc\n.text:0000000000404201\n.text:0000000000404206\n.text:000000000040420b\n.text:0000000000404212\n.text:0000000000404217\n.text:000000000040421c\n.text:000000000040421f\n.text:0000000000404222\n.text:0000000000404224\n.text:0000000000404226\n.text:000000000040422c\n.text:0000000000404231\n.text:0000000000404236\n.text:000000000040423d\n.text:0000000000404242\n.text:0000000000404247\n.text:000000000040424e\n.text:0000000000404253\n.text:0000000000404258\n.text:000000000040425a\n.text:000000000040425f\n.text:0000000000404264\n.text:0000000000404269\n.text:000000000040426e\n.text:0000000000404271\n.text:0000000000404276\n.text:000000000040427b\n.text:0000000000404283\n.text:0000000000404288\n.text:000000000040428d\n.text:0000000000404292\n.text:0000000000404297\n.text:000000000040429c\n'
p1196
tp1197
sS'_obstack_memory_used'
p1198
(S'\n__stdcall _obstack_memory_used(obstack * h)\n'
p1199
V\u000asize_t _obstack_memory_used(obstack *h)\u000a\u000a{\u000a  _obstack_chunk *p_Var1;\u000a  char *pcVar2;\u000a  \u000a  p_Var1 = h->chunk;\u000a  pcVar2 = (char *)0x0;\u000a  while (p_Var1 != (_obstack_chunk *)0x0) {\u000a    pcVar2 = p_Var1->limit + (long)(pcVar2 + -(long)p_Var1);\u000a    p_Var1 = p_Var1->prev;\u000a  }\u000a  return (size_t)pcVar2;\u000a}\u000a\u000a
p1200
S'MOV RCX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nTEST RCX,RCX\nJZ 0x00410c6f\nNOP dword ptr [RAX + RAX*0x1]\nSUB RAX,RCX\nADD RAX,qword ptr [RCX]\nMOV RCX,qword ptr [RCX + 0x8]\nTEST RCX,RCX\nJNZ 0x00410c60\nRET\n'
p1201
S'48 8b 4f 08\n31 c0\n48 85 c9\n74 14\n0f 1f 44 00 00\n48 29 c8\n48 03 01\n48 8b 49 08\n48 85 c9\n75 f1\nc3\n'
p1202
S'.text:0000000000410c50\n.text:0000000000410c54\n.text:0000000000410c56\n.text:0000000000410c59\n.text:0000000000410c5b\n.text:0000000000410c60\n.text:0000000000410c63\n.text:0000000000410c66\n.text:0000000000410c6a\n.text:0000000000410c6d\n.text:0000000000410c6f\n'
p1203
tp1204
sS'write_unique'
p1205
(S'\n__stdcall write_unique(line * line, FILE * tfp, char * temp_output)\n'
p1206
V\u000avoid write_unique(line *line,FILE *tfp,char *temp_output)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (unique == 1) {\u000a    if (CONCAT44(saved_line.text._4_4_,saved_line.text._0_4_) != 0) {\u000a      iVar1 = compare(line,&saved_line);\u000a      if (iVar1 == 0) {\u000a        return;\u000a      }\u000a    }\u000a    saved_line.text._0_4_ = *(undefined4 *)&line->text;\u000a    saved_line.text._4_4_ = *(undefined4 *)((long)&line->text + 4);\u000a    saved_line.length._0_4_ = *(undefined4 *)&line->length;\u000a    saved_line.length._4_4_ = *(undefined4 *)((long)&line->length + 4);\u000a    saved_line.keybeg._0_4_ = *(undefined4 *)&line->keybeg;\u000a    saved_line.keybeg._4_4_ = *(undefined4 *)((long)&line->keybeg + 4);\u000a    saved_line.keylim._0_4_ = *(undefined4 *)&line->keylim;\u000a    saved_line.keylim._4_4_ = *(undefined4 *)((long)&line->keylim + 4);\u000a  }\u000a  write_line(line,tfp,temp_output);\u000a  return;\u000a}\u000a\u000a
p1207
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nCMP byte ptr [0x0061a64a],0x1\nJNZ 0x00409237\nCMP qword ptr [0x0061ab40],0x0\nJZ 0x00409222\nMOV ESI,0x61ab40\nMOV RDI,RBX\nCALL 0x004062d0\nTEST EAX,EAX\nJZ 0x0040924a\nMOVUPS XMM0,xmmword ptr [RBX]\nMOVUPS XMM1,xmmword ptr [RBX + 0x10]\nMOVUPS xmmword ptr [0x0061ab50],XMM1\nMOVUPS xmmword ptr [0x0061ab40],XMM0\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004063a0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1208
S'41 57\n41 56\n53\n49 89 d6\n49 89 f7\n48 89 fb\n80 3d 45 14 21 00 01\n75 30\n48 83 3d 31 19 21 00 00\n74 11\nbe 40 ab 61 00\n48 89 df\ne8 b2 d0 ff ff\n85 c0\n74 28\n0f 10 03\n0f 10 4b 10\n0f 11 0d 20 19 21 00\n0f 11 05 09 19 21 00\n48 89 df\n4c 89 fe\n4c 89 f2\n5b\n41 5e\n41 5f\ne9 56 d1 ff ff\n5b\n41 5e\n41 5f\nc3\n'
p1209
S'.text:00000000004091f0\n.text:00000000004091f2\n.text:00000000004091f4\n.text:00000000004091f5\n.text:00000000004091f8\n.text:00000000004091fb\n.text:00000000004091fe\n.text:0000000000409205\n.text:0000000000409207\n.text:000000000040920f\n.text:0000000000409211\n.text:0000000000409216\n.text:0000000000409219\n.text:000000000040921e\n.text:0000000000409220\n.text:0000000000409222\n.text:0000000000409225\n.text:0000000000409229\n.text:0000000000409230\n.text:0000000000409237\n.text:000000000040923a\n.text:000000000040923d\n.text:0000000000409240\n.text:0000000000409241\n.text:0000000000409243\n.text:0000000000409245\n.text:000000000040924a\n.text:000000000040924b\n.text:000000000040924d\n.text:000000000040924f\n'
p1210
tp1211
sS'c_isupper'
p1212
(S'\n__stdcall c_isupper()\n'
p1213
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1214
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1215
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1216
S'.text:0000000000410e90\n.text:0000000000410e93\n.text:0000000000410e96\n.text:0000000000410e99\n'
p1217
tp1218
sS'allocate_entry'
p1219
(S'\n__stdcall allocate_entry(Hash_table * table)\n'
p1220
V\u000ahash_entry * allocate_entry(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  phVar1 = table->free_entry_list;\u000a  if (phVar1 != (hash_entry *)0x0) {\u000a    table->free_entry_list = phVar1->next;\u000a    return phVar1;\u000a  }\u000a  phVar1 = (hash_entry *)malloc(0x10);\u000a  return phVar1;\u000a}\u000a\u000a
p1221
S'MOV RAX,qword ptr [RDI + 0x48]\nTEST RAX,RAX\nJZ 0x0040be12\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RDI + 0x48],RCX\nRET\nPUSH RAX\nMOV EDI,0x10\nCALL 0x00402860\nADD RSP,0x8\nRET\n'
p1222
S'48 8b 47 48\n48 85 c0\n74 09\n48 8b 48 08\n48 89 4f 48\nc3\n50\nbf 10 00 00 00\ne8 43 6a ff ff\n48 83 c4 08\nc3\n'
p1223
S'.text:000000000040be00\n.text:000000000040be04\n.text:000000000040be07\n.text:000000000040be09\n.text:000000000040be0d\n.text:000000000040be11\n.text:000000000040be12\n.text:000000000040be13\n.text:000000000040be18\n.text:000000000040be1d\n.text:000000000040be21\n'
p1224
tp1225
sS'exit_cleanup'
p1226
(S'\n__stdcall exit_cleanup()\n'
p1227
V\u000avoid exit_cleanup(void)\u000a\u000a{\u000a  long lVar1;\u000a  cs_status *ctx;\u000a  undefined8 *puVar2;\u000a  byte bVar3;\u000a  cs_status cs;\u000a  cs_status status;\u000a  cs_status local_90;\u000a  \u000a  bVar3 = 0;\u000a  if (temphead != (tempnode *)0x0) {\u000a    ctx = &local_90;\u000a    cs_enter(&local_90);\u000a    cleanup((EVP_PKEY_CTX *)ctx);\u000a    lVar1 = 0x11;\u000a    ctx = &local_90;\u000a    puVar2 = (undefined8 *)&stack0xfffffffffffffee8;\u000a    while (lVar1 != 0) {\u000a      lVar1 = lVar1 + -1;\u000a      *puVar2 = *(undefined8 *)ctx;\u000a      ctx = (cs_status *)((long)ctx + (ulong)bVar3 * -0x10 + 8);\u000a      puVar2 = puVar2 + (ulong)bVar3 * 0x1ffffffffffffffe + 1;\u000a    }\u000a    cs_leave(status);\u000a  }\u000a  close_stdout();\u000a  return;\u000a}\u000a\u000a
p1228
S'PUSH RBX\nSUB RSP,0x110\nCMP qword ptr [0x0061aa70],0x0\nJZ 0x0040448a\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nCALL 0x00405d30\nCALL 0x00405d00\nMOV ECX,0x11\nMOV RDI,RSP\nMOV RSI,RBX\nMOVSQ.REP RDI,RSI\nCALL 0x00405d80\nCALL 0x0040a000\nADD RSP,0x110\nPOP RBX\nRET\n'
p1229
S'53\n48 81 ec 10 01 00 00\n48 83 3d 10 66 21 00 00\n74 28\n48 8d 9c 24 88 00 00 00\n48 89 df\ne8 be 18 00 00\ne8 89 18 00 00\nb9 11 00 00 00\n48 89 e7\n48 89 de\nf3 48 a5\ne8 f6 18 00 00\ne8 71 5b 00 00\n48 81 c4 10 01 00 00\n5b\nc3\n'
p1230
S'.text:0000000000404450\n.text:0000000000404451\n.text:0000000000404458\n.text:0000000000404460\n.text:0000000000404462\n.text:000000000040446a\n.text:000000000040446d\n.text:0000000000404472\n.text:0000000000404477\n.text:000000000040447c\n.text:000000000040447f\n.text:0000000000404482\n.text:0000000000404485\n.text:000000000040448a\n.text:000000000040448f\n.text:0000000000404496\n.text:0000000000404497\n'
p1231
tp1232
sS'_obstack_begin_worker'
p1233
(S'\n__stdcall _obstack_begin_worker()\n'
p1234
V\u000aint _obstack_begin_worker(void)\u000a\u000a{\u000a  size_t size;\u000a  _obstack_chunk *p_Var1;\u000a  long in_RDX;\u000a  long lVar2;\u000a  char *pcVar3;\u000a  size_t in_RSI;\u000a  obstack *h;\u000a  \u000a  lVar2 = 0x10;\u000a  if (in_RDX != 0) {\u000a    lVar2 = in_RDX;\u000a  }\u000a  size = 0xfe0;\u000a  if (in_RSI != 0) {\u000a    size = in_RSI;\u000a  }\u000a  h->chunk_size = size;\u000a  h->alignment_mask = lVar2 - 1;\u000a  p_Var1 = (_obstack_chunk *)call_chunkfun(h,size);\u000a  h->chunk = p_Var1;\u000a  if (p_Var1 == (_obstack_chunk *)0x0) {\u000a    (*obstack_alloc_failed_handler)();\u000a  }\u000a  pcVar3 = (char *)(-lVar2 & (long)&p_Var1->prev + lVar2 + 7);\u000a  h->object_base = pcVar3;\u000a  h->next_free = pcVar3;\u000a  pcVar3 = (char *)((long)&p_Var1->limit + h->chunk_size);\u000a  p_Var1->limit = pcVar3;\u000a  h->chunk_limit = pcVar3;\u000a  p_Var1->prev = (_obstack_chunk *)0x0;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield & 0xf9;\u000a  return (int)pcVar3;\u000a}\u000a\u000a
p1235
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBX,0x10\nCMOVNZ RBX,RDX\nTEST RSI,RSI\nMOV EAX,0xfe0\nCMOVNZ RAX,RSI\nMOV qword ptr [R15],RAX\nLEA R12,[RBX + -0x1]\nMOV qword ptr [R15 + 0x30],R12\nMOV RSI,RAX\nCALL 0x00410b70\nMOV R14,RAX\nMOV qword ptr [R15 + 0x8],R14\nTEST R14,R14\nJNZ 0x004109f8\nCALL qword ptr [0x0061a540]\nLEA RAX,[R14 + R12*0x1 + 0x10]\nNEG RBX\nAND RBX,RAX\nMOV qword ptr [R15 + 0x10],RBX\nMOV qword ptr [R15 + 0x18],RBX\nMOV RAX,qword ptr [R15]\nADD RAX,R14\nMOV qword ptr [R14],RAX\nMOV qword ptr [R15 + 0x20],RAX\nMOV qword ptr [R14 + 0x8],0x0\nAND byte ptr [R15 + 0x50],0xf9\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1236
S'41 57\n41 56\n41 54\n53\n50\n49 89 ff\n48 85 d2\nbb 10 00 00 00\n48 0f 45 da\n48 85 f6\nb8 e0 0f 00 00\n48 0f 45 c6\n49 89 07\n4c 8d 63 ff\n4d 89 67 30\n48 89 c6\ne8 8a 01 00 00\n49 89 c6\n4d 89 77 08\n4d 85 f6\n75 06\nff 15 48 9b 20 00\n4b 8d 44 26 10\n48 f7 db\n48 21 c3\n49 89 5f 10\n49 89 5f 18\n49 8b 07\n4c 01 f0\n49 89 06\n49 89 47 20\n49 c7 46 08 00 00 00 00\n41 80 67 50 f9\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1237
S'.text:00000000004109b0\n.text:00000000004109b2\n.text:00000000004109b4\n.text:00000000004109b6\n.text:00000000004109b7\n.text:00000000004109b8\n.text:00000000004109bb\n.text:00000000004109be\n.text:00000000004109c3\n.text:00000000004109c7\n.text:00000000004109ca\n.text:00000000004109cf\n.text:00000000004109d3\n.text:00000000004109d6\n.text:00000000004109da\n.text:00000000004109de\n.text:00000000004109e1\n.text:00000000004109e6\n.text:00000000004109e9\n.text:00000000004109ed\n.text:00000000004109f0\n.text:00000000004109f2\n.text:00000000004109f8\n.text:00000000004109fd\n.text:0000000000410a00\n.text:0000000000410a03\n.text:0000000000410a07\n.text:0000000000410a0b\n.text:0000000000410a0e\n.text:0000000000410a11\n.text:0000000000410a14\n.text:0000000000410a18\n.text:0000000000410a20\n.text:0000000000410a25\n.text:0000000000410a29\n.text:0000000000410a2a\n.text:0000000000410a2c\n.text:0000000000410a2e\n.text:0000000000410a30\n'
p1238
tp1239
sS'cs_leave'
p1240
(S'\n__stdcall cs_leave(cs_status status)\n'
p1241
V\u000avoid cs_leave(cs_status status)\u000a\u000a{\u000a  if (status.valid != false) {\u000a    sigprocmask(2,(sigset_t *)&status.sigs,(sigset_t *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1242
S'PUSH RAX\nCMP byte ptr [RSP + 0x10],0x0\nJZ 0x00405d9d\nLEA RSI,[RSP + 0x10]\nADD RSI,0x8\nMOV EDI,0x2\nXOR EDX,EDX\nCALL 0x004023e0\nPOP RAX\nRET\n'
p1243
S'50\n80 7c 24 10 00\n74 15\n48 8d 74 24 10\n48 83 c6 08\nbf 02 00 00 00\n31 d2\ne8 43 c6 ff ff\n58\nc3\n'
p1244
S'.text:0000000000405d80\n.text:0000000000405d81\n.text:0000000000405d86\n.text:0000000000405d88\n.text:0000000000405d8d\n.text:0000000000405d91\n.text:0000000000405d96\n.text:0000000000405d98\n.text:0000000000405d9d\n.text:0000000000405d9e\n'
p1245
tp1246
sS'inttostr'
p1247
(S'\n__stdcall inttostr(char * buf)\n'
p1248
V\u000achar * inttostr(char *buf)\u000a\u000a{\u000a  uint uVar1;\u000a  long in_RSI;\u000a  char *pcVar2;\u000a  int iVar3;\u000a  \u000a  *(undefined *)(in_RSI + 0xb) = 0;\u000a  if ((int)buf < 0) {\u000a    pcVar2 = (char *)(in_RSI + 10);\u000a    do {\u000a      iVar3 = (int)buf;\u000a      uVar1 = iVar3 / 10 + (iVar3 >> 0x1f) + (uint)((ulong)((long)iVar3 * 0x66666667) >> 0x3f);\u000a      *pcVar2 = '0' - ((char)buf + (char)uVar1 * -10);\u000a      pcVar2 = pcVar2 + -1;\u000a      buf = (char *)(ulong)uVar1;\u000a    } while (0x12 < iVar3 + 9U);\u000a    *pcVar2 = '-';\u000a  }\u000a  else {\u000a    pcVar2 = (char *)(in_RSI + 0xb);\u000a    do {\u000a      iVar3 = (int)buf;\u000a      uVar1 = iVar3 / 10 + (iVar3 >> 0x1f) + (uint)((ulong)((long)iVar3 * 0x66666667) >> 0x3f);\u000a      pcVar2[-1] = (char)buf + '0' + (char)uVar1 * -10;\u000a      pcVar2 = pcVar2 + -1;\u000a      buf = (char *)(ulong)uVar1;\u000a    } while (0x12 < iVar3 + 9U);\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1249
S'MOV byte ptr [RSI + 0xb],0x0\nTEST EDI,EDI\nJS 0x0040c375\nADD RSI,0xb\nNOP dword ptr [RAX]\nMOVSXD RAX,EDI\nIMUL RCX,RAX,0x66666667\nMOV RDX,RCX\nSHR RDX,0x3f\nSAR RCX,0x22\nADD ECX,EDX\nLEA EDX,[RCX + RCX*0x1]\nLEA EDX,[RDX + RDX*0x4]\nNEG EDX\nLEA EDX,[RDI + RDX*0x1 + 0x30]\nMOV byte ptr [RSI + -0x1],DL\nDEC RSI\nADD EAX,0x9\nCMP EAX,0x12\nMOV EDI,ECX\nJA 0x0040c340\nJMP 0x0040c3b8\nADD RSI,0xa\nNOP dword ptr [RAX]\nMOVSXD RAX,EDI\nIMUL RDI,RAX,0x66666667\nMOV RCX,RDI\nSHR RCX,0x3f\nSAR RDI,0x22\nADD EDI,ECX\nLEA ECX,[RDI + RDI*0x1]\nLEA ECX,[RCX + RCX*0x4]\nMOV EDX,EAX\nSUB EDX,ECX\nMOV ECX,0x30\nSUB ECX,EDX\nMOV byte ptr [RSI],CL\nADD EAX,0x9\nDEC RSI\nCMP EAX,0x12\nJA 0x0040c380\nMOV byte ptr [RSI],0x2d\nMOV RAX,RSI\nRET\n'
p1250
S'c6 46 0b 00\n85 ff\n78 3d\n48 83 c6 0b\n0f 1f 40 00\n48 63 c7\n48 69 c8 67 66 66 66\n48 89 ca\n48 c1 ea 3f\n48 c1 f9 22\n01 d1\n8d 14 09\n8d 14 92\nf7 da\n8d 54 17 30\n88 56 ff\n48 ff ce\n83 c0 09\n83 f8 12\n89 cf\n77 cd\neb 43\n48 83 c6 0a\n0f 1f 80 00 00 00 00\n48 63 c7\n48 69 f8 67 66 66 66\n48 89 f9\n48 c1 e9 3f\n48 c1 ff 22\n01 cf\n8d 0c 3f\n8d 0c 89\n89 c2\n29 ca\nb9 30 00 00 00\n29 d1\n88 0e\n83 c0 09\n48 ff ce\n83 f8 12\n77 cb\nc6 06 2d\n48 89 f0\nc3\n'
p1251
S'.text:000000000040c330\n.text:000000000040c334\n.text:000000000040c336\n.text:000000000040c338\n.text:000000000040c33c\n.text:000000000040c340\n.text:000000000040c343\n.text:000000000040c34a\n.text:000000000040c34d\n.text:000000000040c351\n.text:000000000040c355\n.text:000000000040c357\n.text:000000000040c35a\n.text:000000000040c35d\n.text:000000000040c35f\n.text:000000000040c363\n.text:000000000040c366\n.text:000000000040c369\n.text:000000000040c36c\n.text:000000000040c36f\n.text:000000000040c371\n.text:000000000040c373\n.text:000000000040c375\n.text:000000000040c379\n.text:000000000040c380\n.text:000000000040c383\n.text:000000000040c38a\n.text:000000000040c38d\n.text:000000000040c391\n.text:000000000040c395\n.text:000000000040c397\n.text:000000000040c39a\n.text:000000000040c39d\n.text:000000000040c39f\n.text:000000000040c3a1\n.text:000000000040c3a6\n.text:000000000040c3a8\n.text:000000000040c3aa\n.text:000000000040c3ad\n.text:000000000040c3b0\n.text:000000000040c3b3\n.text:000000000040c3b5\n.text:000000000040c3b8\n.text:000000000040c3bb\n'
p1252
tp1253
sS'reap'
p1254
(S'\n__stdcall reap()\n'
p1255
V\u000apid_t reap(void)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  __pid_t _Var3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  uint *puVar6;\u000a  uint in_EDI;\u000a  int status;\u000a  ushort local_1c [2];\u000a  \u000a  _Var3 = waitpid(-(uint)(in_EDI == 0) | in_EDI,(int *)local_1c,(uint)(in_EDI == 0));\u000a  if (_Var3 < 0) {\u000a    puVar6 = (uint *)__errno_location();\u000a    uVar1 = *puVar6;\u000a    uVar4 = dcgettext(0,"waiting for %s [-d]",5);\u000a    pcVar5 = quotearg_style((char *)0x4);\u000a    error(2,(ulong)uVar1,uVar4,pcVar5);\u000a  }\u000a  else {\u000a    if (_Var3 != 0) {\u000a      if (((int)in_EDI < 1) && (_Var2 = delete_proc(), _Var2 == false)) {\u000a        return _Var3;\u000a      }\u000a      if ((local_1c[0] & 0xff7f) != 0) {\u000a        uVar4 = dcgettext(0,"%s [-d] terminated abnormally",5);\u000a        pcVar5 = quotearg_style((char *)0x4);\u000a        error(2,0,uVar4,pcVar5);\u000a      }\u000a      nprocs = nprocs + -1;\u000a    }\u000a  }\u000a  return (pid_t)_Var3;\u000a}\u000a\u000a
p1256
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV EBP,EDI\nCMP EBP,0x1\nSBB EDI,EDI\nOR EDI,EBP\nXOR EDX,EDX\nTEST EBP,EBP\nSETZ DL\nLEA RSI,[RSP + 0xc]\nCALL 0x00402970\nMOV EBX,EAX\nTEST EBX,EBX\nJS 0x00408b4d\nJZ 0x00408b8f\nTEST EBP,EBP\nJG 0x00408b01\nMOV EDI,EBX\nCALL 0x00408a90\nTEST AL,AL\nJZ 0x00408b8f\nMOVZX EAX,word ptr [RSP + 0xc]\nTEST AX,0xff7f\nJZ 0x00408b45\nXOR EDI,EDI\nMOV ESI,0x413fba\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RBP,RAX\nMOV RSI,qword ptr [0x0061a640]\nMOV EDI,0x4\nCALL 0x0040dc90\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00402960\nDEC dword ptr [0x0061ab30]\nJMP 0x00408b8f\nCALL 0x00402430\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x413fa6\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RBP,RAX\nMOV RSI,qword ptr [0x0061a640]\nMOV EDI,0x4\nCALL 0x0040dc90\nMOV RCX,RAX\nMOV EDI,0x2\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nCALL 0x00402960\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1257
S'55\n41 56\n53\n48 83 ec 10\n89 fd\n83 fd 01\n19 ff\n09 ef\n31 d2\n85 ed\n0f 94 c2\n48 8d 74 24 0c\ne8 8e 9e ff ff\n89 c3\n85 db\n78 65\n0f 84 a1 00 00 00\n85 ed\n7f 0f\n89 df\ne8 97 ff ff ff\n84 c0\n0f 84 8e 00 00 00\n0f b7 44 24 0c\n66 a9 7f ff\n74 39\n31 ff\nbe ba 3f 41 00\nba 05 00 00 00\ne8 93 9a ff ff\n48 89 c5\n48 8b 35 19 1b 21 00\nbf 04 00 00 00\ne8 5f 51 00 00\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ea\ne8 1b 9e ff ff\nff 0d e5 1f 21 00\neb 42\ne8 de 98 ff ff\n44 8b 30\n31 ff\nbe a6 3f 41 00\nba 05 00 00 00\ne8 4a 9a ff ff\n48 89 c5\n48 8b 35 d0 1a 21 00\nbf 04 00 00 00\ne8 16 51 00 00\n48 89 c1\nbf 02 00 00 00\n31 c0\n44 89 f6\n48 89 ea\ne8 d1 9d ff ff\n89 d8\n48 83 c4 10\n5b\n41 5e\n5d\nc3\n'
p1258
S'.text:0000000000408ac0\n.text:0000000000408ac1\n.text:0000000000408ac3\n.text:0000000000408ac4\n.text:0000000000408ac8\n.text:0000000000408aca\n.text:0000000000408acd\n.text:0000000000408acf\n.text:0000000000408ad1\n.text:0000000000408ad3\n.text:0000000000408ad5\n.text:0000000000408ad8\n.text:0000000000408add\n.text:0000000000408ae2\n.text:0000000000408ae4\n.text:0000000000408ae6\n.text:0000000000408ae8\n.text:0000000000408aee\n.text:0000000000408af0\n.text:0000000000408af2\n.text:0000000000408af4\n.text:0000000000408af9\n.text:0000000000408afb\n.text:0000000000408b01\n.text:0000000000408b06\n.text:0000000000408b0a\n.text:0000000000408b0c\n.text:0000000000408b0e\n.text:0000000000408b13\n.text:0000000000408b18\n.text:0000000000408b1d\n.text:0000000000408b20\n.text:0000000000408b27\n.text:0000000000408b2c\n.text:0000000000408b31\n.text:0000000000408b34\n.text:0000000000408b39\n.text:0000000000408b3b\n.text:0000000000408b3d\n.text:0000000000408b40\n.text:0000000000408b45\n.text:0000000000408b4b\n.text:0000000000408b4d\n.text:0000000000408b52\n.text:0000000000408b55\n.text:0000000000408b57\n.text:0000000000408b5c\n.text:0000000000408b61\n.text:0000000000408b66\n.text:0000000000408b69\n.text:0000000000408b70\n.text:0000000000408b75\n.text:0000000000408b7a\n.text:0000000000408b7d\n.text:0000000000408b82\n.text:0000000000408b84\n.text:0000000000408b87\n.text:0000000000408b8a\n.text:0000000000408b8f\n.text:0000000000408b91\n.text:0000000000408b95\n.text:0000000000408b96\n.text:0000000000408b98\n.text:0000000000408b99\n'
p1259
tp1260
sS'pipe'
p1261
(S'\n__stdcall pipe(int * __pipedes)\n'
p1262
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint pipe(int *__pipedes)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_pipe_0061a198)();\u000a  return iVar1;\u000a}\u000a\u000a
p1263
S'JMP qword ptr [0x0061a198]\n'
p1264
S'ff 25 c2 7a 21 00\n'
p1265
S'.plt:00000000004026d0\n'
p1266
tp1267
sS'rotr64'
p1268
(S'\n__stdcall rotr64(uint64_t x)\n'
p1269
V\u000auint64_t rotr64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1270
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1271
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1272
S'.text:0000000000410cc0\n.text:0000000000410cc2\n.text:0000000000410cc5\n.text:0000000000410cc8\n'
p1273
tp1274
sS'read'
p1275
(S'\n__stdcall read(int __fd, void * __buf, size_t __nbytes)\n'
p1276
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t read(int __fd,void *__buf,size_t __nbytes)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_read_0061a1b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1277
S'JMP qword ptr [0x0061a1b0]\n'
p1278
S'ff 25 aa 7a 21 00\n'
p1279
S'.plt:0000000000402700\n'
p1280
tp1281
sS'set_custom_quoting'
p1282
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1283
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1284
S'TEST RDI,RDI\nMOV EAX,0x61ab80\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x0040cb55\nTEST RDX,RDX\nJZ 0x0040cb55\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00402420\n'
p1285
S'48 85 ff\nb8 80 ab 61 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 c5 58 ff ff\n'
p1286
S'.text:000000000040cb30\n.text:000000000040cb33\n.text:000000000040cb38\n.text:000000000040cb3c\n.text:000000000040cb42\n.text:000000000040cb45\n.text:000000000040cb47\n.text:000000000040cb4a\n.text:000000000040cb4c\n.text:000000000040cb50\n.text:000000000040cb54\n.text:000000000040cb55\n.text:000000000040cb56\n'
p1287
tp1288
sS'c_isalpha'
p1289
(S'\n__stdcall c_isalpha()\n'
p1290
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1291
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00410ddb\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1292
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1293
S'.text:0000000000410dc0\n.text:0000000000410dc3\n.text:0000000000410dc6\n.text:0000000000410dc8\n.text:0000000000410dd2\n.text:0000000000410dd4\n.text:0000000000410dd7\n.text:0000000000410dda\n.text:0000000000410ddb\n.text:0000000000410ddd\n'
p1294
tp1295
sS'sort'
p1296
(S'\n__stdcall sort(char * * files, size_t nfiles, char * output_file, size_t nthreads)\n'
p1297
V\u000avoid sort(char **files,size_t nfiles,char *output_file,size_t nthreads)\u000a\u000a{\u000a  _Bool _Var1;\u000a  bool bVar2;\u000a  char cVar3;\u000a  ulong uVar4;\u000a  size_t alloc;\u000a  line *dest;\u000a  tempnode *ptVar5;\u000a  merge_node *pmVar6;\u000a  sortfile *files_00;\u000a  tempnode **pptVar7;\u000a  char *file;\u000a  ulong n;\u000a  ulong line_bytes;\u000a  merge_node_queue queue;\u000a  ulong local_118;\u000a  FILE *local_100;\u000a  char **local_f8;\u000a  FILE *local_f0;\u000a  char *local_e8;\u000a  FILE *local_e0;\u000a  buffer local_d8;\u000a  ulong local_a0;\u000a  char *local_98;\u000a  merge_node_queue local_90;\u000a  \u000a  local_d8.alloc = 0;\u000a  if (nfiles == 0) {\u000a    bVar2 = false;\u000a    n = 0;\u000a    local_f8 = files;\u000a    local_e8 = output_file;\u000a  }\u000a  else {\u000a    bVar2 = false;\u000a    n = 0;\u000a    local_118 = nfiles;\u000a    local_f8 = files;\u000a    local_e8 = output_file;\u000a    do {\u000a      file = *local_f8;\u000a      local_f0 = xfopen(file,"r");\u000a      if (nthreads < 2) {\u000a        line_bytes = 0x30;\u000a      }\u000a      else {\u000a        line_bytes = 0x20;\u000a        uVar4 = 1;\u000a        do {\u000a          uVar4 = uVar4 * 2;\u000a          line_bytes = line_bytes + 0x20;\u000a        } while (uVar4 < nthreads);\u000a      }\u000a      if (local_d8.alloc == 0) {\u000a        alloc = sort_buffer_size();\u000a        initbuf(&local_d8,line_bytes,alloc);\u000a      }\u000a      local_d8.eof = false;\u000a      local_f8 = local_f8 + 1;\u000a      local_118 = local_118 - 1;\u000a      local_e0 = local_f0;\u000a      local_a0 = line_bytes | 1;\u000a      local_98 = file;\u000a      do {\u000a        _Var1 = fillbuf(&local_d8,local_e0,file);\u000a        if (_Var1 == false) goto LAB_00405b9b;\u000a        if (((local_118 == 0) || (local_d8.eof == false)) ||\u000a           ((local_d8.alloc - local_d8.used) - local_d8.nlines * line_bytes <= local_a0)) {\u000a          saved_line.text = (char *)0x0;\u000a          dest = buffer_linelim(&local_d8);\u000a          if (((n | local_118 | local_d8.left) == 0) && (local_d8.eof != false)) {\u000a            xfclose(local_e0,file);\u000a            file = local_e8;\u000a            local_100 = xfopen(local_e8,"w");\u000a            bVar2 = true;\u000a            if (1 < local_d8.nlines) goto LAB_00405aec;\u000aLAB_00405b50:\u000a            write_unique(dest + -1,local_100,file);\u000a          }\u000a          else {\u000a            n = n + 1;\u000a            ptVar5 = create_temp(&local_100);\u000a            file = ptVar5->name;\u000a            if (local_d8.nlines < 2) goto LAB_00405b50;\u000aLAB_00405aec:\u000a            queue_init(&local_90,nthreads);\u000a            alloc = local_d8.nlines;\u000a            pmVar6 = merge_tree_init(nthreads,local_d8.nlines,dest);\u000a            sortlines(dest,nthreads,alloc,pmVar6 + 1,&local_90,local_100,file);\u000a          }\u000a          xfclose(local_100,file);\u000a          cVar3 = bVar2 << 3;\u000a          file = local_98;\u000a        }\u000a        else {\u000a          local_d8.left = local_d8.used;\u000a          cVar3 = '\u005ca';\u000a        }\u000a      } while (cVar3 == 0);\u000a      if (cVar3 == '\u005ca') {\u000aLAB_00405b9b:\u000a        xfclose(local_f0,file);\u000a        cVar3 = 0;\u000a      }\u000a    } while ((local_118 != 0) && (cVar3 == 0));\u000a  }\u000a  free(local_d8.buf);\u000a  ptVar5 = temphead;\u000a  if (!bVar2) {\u000a    files_00 = (sortfile *)xnmalloc(n,0x10);\u000a    if (ptVar5 != (tempnode *)0x0) {\u000a      pptVar7 = &files_00->temp;\u000a      do {\u000a        pptVar7[-1] = (tempnode *)ptVar5->name;\u000a        *pptVar7 = ptVar5;\u000a        ptVar5 = ptVar5->next;\u000a        pptVar7 = pptVar7 + 2;\u000a      } while (ptVar5 != (tempnode *)0x0);\u000a    }\u000a    merge(files_00,n,n,local_e8);\u000a    free(files_00);\u000a  }\u000a  reap_all();\u000a  return;\u000a}\u000a\u000a
p1298
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xf8\nMOV R15,RCX\nMOV qword ptr [RSP + 0x40],RDX\nMOV qword ptr [RSP + 0x30],RDI\nMOV qword ptr [RSP + 0x68],0x0\nMOV qword ptr [RSP + 0x10],RSI\nXOR EAX,EAX\nTEST RSI,RSI\nJZ 0x00405bd7\nMOV qword ptr [RSP + 0x20],RAX\nLEA RBP,[RSP + 0x50]\nXOR R12D,R12D\nMOV qword ptr [RSP + 0x18],R15\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RBX,qword ptr [RAX]\nMOV ESI,0x413a7d\nMOV RDI,RBX\nCALL 0x00405e70\nMOV qword ptr [RSP + 0x38],RAX\nCMP R15,0x2\nJC 0x00405990\nMOV R14D,0x20\nMOV EAX,0x1\nNOP dword ptr [RAX + RAX*0x1]\nADD RAX,RAX\nADD R14,0x20\nCMP RAX,R15\nJC 0x00405980\nJMP 0x00405996\nMOV R14D,0x30\nCMP qword ptr [RSP + 0x68],0x0\nJNZ 0x004059c3\nLEA RDI,[RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x30]\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,R14\nCALL 0x00408e50\nMOV RDI,RBP\nMOV RSI,R14\nMOV RDX,RAX\nCALL 0x00405ea0\nMOV byte ptr [0x80 + RSP],0x0\nADD qword ptr [RSP + 0x30],0x8\nDEC qword ptr [RSP + 0x10]\nMOV RAX,qword ptr [RSP + 0x38]\nMOV qword ptr [RSP + 0x48],RAX\nMOV RAX,R14\nOR RAX,0x1\nMOV qword ptr [0x88 + RSP],RAX\nMOV qword ptr [0x90 + RSP],RBX\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,RBP\nMOV RSI,qword ptr [RSP + 0x48]\nMOV RDX,RBX\nCALL 0x00405f20\nTEST AL,AL\nJZ 0x00405b9b\nCMP qword ptr [RSP + 0x10],0x0\nJZ 0x00405a60\nMOVZX EAX,byte ptr [0x80 + RSP]\nTEST AL,AL\nJZ 0x00405a60\nMOV RAX,qword ptr [RSP + 0x58]\nMOV RCX,qword ptr [RSP + 0x68]\nSUB RCX,RAX\nMOV RDX,qword ptr [RSP + 0x60]\nIMUL RDX,R14\nSUB RCX,RDX\nCMP qword ptr [0x88 + RSP],RCX\nJNC 0x00405a60\nMOV qword ptr [RSP + 0x70],RAX\nMOV EAX,0x7\nJMP 0x00405b8b\nMOV qword ptr [0x0061ab40],0x0\nMOV RDI,RBP\nCALL 0x004062c0\nMOV R15,RAX\nMOV RAX,R12\nOR RAX,qword ptr [RSP + 0x10]\nOR RAX,qword ptr [RSP + 0x70]\nJNZ 0x00405ad0\nMOVZX EAX,byte ptr [0x80 + RSP]\nTEST AL,AL\nJZ 0x00405ad0\nMOV RDI,qword ptr [RSP + 0x48]\nMOV RSI,RBX\nCALL 0x004064c0\nMOV ESI,0x413f56\nMOV R13,qword ptr [RSP + 0x40]\nMOV RDI,R13\nCALL 0x00405e70\nMOV qword ptr [RSP + 0x28],RAX\nMOV AL,0x1\nMOV qword ptr [RSP + 0x20],RAX\nCMP qword ptr [RSP + 0x60],0x2\nJNC 0x00405aec\nJMP 0x00405b50\nINC R12\nLEA RDI,[RSP + 0x28]\nCALL 0x00407b80\nMOV R13,RAX\nADD R13,0xd\nCMP qword ptr [RSP + 0x60],0x2\nJC 0x00405b50\nLEA RAX,[0x98 + RSP]\nMOV RDI,RAX\nMOV RBP,qword ptr [RSP + 0x18]\nMOV RSI,RBP\nCALL 0x00408fc0\nMOV RBX,R12\nMOV R12,qword ptr [RSP + 0x60]\nMOV RDI,RBP\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00408ff0\nSUB RAX,-0x80\nMOV R9,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP],R13\nMOV RDI,R15\nMOV RSI,RBP\nMOV RDX,R12\nMOV R12,RBX\nMOV RCX,RAX\nLEA R8,[0x98 + RSP]\nCALL 0x00409070\nJMP 0x00405b64\nADD R15,-0x20\nMOV RSI,qword ptr [RSP + 0x28]\nMOV RDI,R15\nMOV RDX,R13\nCALL 0x004091f0\nMOV RDI,qword ptr [RSP + 0x28]\nMOV RSI,R13\nCALL 0x004064c0\nMOV RAX,qword ptr [RSP + 0x20]\nSHL AL,0x3\nAND AL,0x8\nMOVZX EAX,AL\nLEA RBP,[RSP + 0x50]\nMOV RBX,qword ptr [0x90 + RSP]\nMOV ECX,EAX\nAND CL,0xf\nJZ 0x00405a00\nCMP CL,0x7\nJNZ 0x00405bc0\nMOV R15,qword ptr [RSP + 0x18]\nMOV RDI,qword ptr [RSP + 0x38]\nMOV RSI,RBX\nCALL 0x004064c0\nXOR EAX,EAX\nCMP qword ptr [RSP + 0x10],0x0\nJNZ 0x00405bcd\nJMP 0x00405bdf\nMOV R15,qword ptr [RSP + 0x18]\nCMP qword ptr [RSP + 0x10],0x0\nJZ 0x00405bdf\nTEST EAX,EAX\nJZ 0x00405950\nJMP 0x00405bdf\nMOV qword ptr [RSP + 0x20],RAX\nXOR R12D,R12D\nMOV RDI,qword ptr [RSP + 0x50]\nCALL 0x00402400\nTEST byte ptr [RSP + 0x20],0x1\nJNZ 0x00405c53\nMOV RBP,qword ptr [0x0061aa70]\nMOV ESI,0x10\nMOV RDI,R12\nCALL 0x0040fb60\nMOV RBX,RAX\nTEST RBP,RBP\nJZ 0x00405c38\nMOV RAX,RBX\nADD RAX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nLEA RCX,[RBP + 0xd]\nMOV qword ptr [RAX + -0x8],RCX\nMOV qword ptr [RAX],RBP\nMOV RBP,qword ptr [RBP]\nADD RAX,0x10\nTEST RBP,RBP\nJNZ 0x00405c20\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,R12\nMOV RCX,qword ptr [RSP + 0x40]\nCALL 0x00405590\nMOV RDI,RBX\nCALL 0x00402400\nCALL 0x00409250\nADD RSP,0xf8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1299
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec f8 00 00 00\n49 89 cf\n48 89 54 24 40\n48 89 7c 24 30\n48 c7 44 24 68 00 00 00 00\n48 89 74 24 10\n31 c0\n48 85 f6\n0f 84 a0 02 00 00\n48 89 44 24 20\n48 8d 6c 24 50\n45 31 e4\n4c 89 7c 24 18\n0f 1f 80 00 00 00 00\n48 8b 44 24 30\n48 8b 18\nbe 7d 3a 41 00\n48 89 df\ne8 0b 05 00 00\n48 89 44 24 38\n49 83 ff 02\n72 20\n41 be 20 00 00 00\nb8 01 00 00 00\n0f 1f 44 00 00\n48 01 c0\n49 83 c6 20\n4c 39 f8\n72 f4\neb 08\n41 be 30 00 00 00\n48 83 7c 24 68 00\n75 25\n48 8d 7c 24 38\n48 8b 74 24 30\n48 8b 54 24 10\n4c 89 f1\ne8 9b 34 00 00\n48 89 ef\n4c 89 f6\n48 89 c2\ne8 dd 04 00 00\nc6 84 24 80 00 00 00 00\n48 83 44 24 30 08\n48 ff 4c 24 10\n48 8b 44 24 38\n48 89 44 24 48\n4c 89 f0\n48 83 c8 01\n48 89 84 24 88 00 00 00\n48 89 9c 24 90 00 00 00\n66 0f 1f 84 00 00 00 00 00\n48 89 ef\n48 8b 74 24 48\n48 89 da\ne8 10 05 00 00\n84 c0\n0f 84 83 01 00 00\n48 83 7c 24 10 00\n74 40\n0f b6 84 24 80 00 00 00\n84 c0\n74 34\n48 8b 44 24 58\n48 8b 4c 24 68\n48 29 c1\n48 8b 54 24 60\n49 0f af d6\n48 29 d1\n48 39 8c 24 88 00 00 00\n73 11\n48 89 44 24 70\nb8 07 00 00 00\ne9 2d 01 00 00\n48 c7 05 d5 50 21 00 00 00 00 00\n48 89 ef\ne8 4d 08 00 00\n49 89 c7\n4c 89 e0\n48 0b 44 24 10\n48 0b 44 24 70\n75 4b\n0f b6 84 24 80 00 00 00\n84 c0\n74 3f\n48 8b 7c 24 48\n48 89 de\ne8 22 0a 00 00\nbe 56 3f 41 00\n4c 8b 6c 24 40\n4c 89 ef\ne8 c0 03 00 00\n48 89 44 24 28\nb0 01\n48 89 44 24 20\n48 83 7c 24 60 02\n73 28\ne9 87 00 00 00\n49 ff c4\n48 8d 7c 24 28\ne8 a3 20 00 00\n49 89 c5\n49 83 c5 0d\n48 83 7c 24 60 02\n72 64\n48 8d 84 24 98 00 00 00\n48 89 c7\n48 8b 6c 24 18\n48 89 ee\ne8 bc 34 00 00\n4c 89 e3\n4c 8b 64 24 60\n48 89 ef\n4c 89 e6\n4c 89 fa\ne8 d6 34 00 00\n48 83 e8 80\n4c 8b 4c 24 28\n4c 89 2c 24\n4c 89 ff\n48 89 ee\n4c 89 e2\n49 89 dc\n48 89 c1\n4c 8d 84 24 98 00 00 00\ne8 2d 35 00 00\neb 1f\n49 83 c7 e0\n48 8b 74 24 28\n4c 89 ff\n4c 89 ea\ne8 8c 36 00 00\n48 8b 7c 24 28\n4c 89 ee\ne8 4f 09 00 00\n48 8b 44 24 20\nc0 e0 03\n24 08\n0f b6 c0\n48 8d 6c 24 50\n48 8b 9c 24 90 00 00 00\n89 c1\n80 e1 0f\n0f 84 6a fe ff ff\n80 f9 07\n75 25\n4c 8b 7c 24 18\n48 8b 7c 24 38\n48 89 de\ne8 13 09 00 00\n31 c0\n48 83 7c 24 10 00\n75 16\neb 26\n4c 8b 7c 24 18\n48 83 7c 24 10 00\n74 12\n85 c0\n0f 84 7b fd ff ff\neb 08\n48 89 44 24 20\n45 31 e4\n48 8b 7c 24 50\ne8 17 c8 ff ff\nf6 44 24 20 01\n75 63\n48 8b 2d 79 4e 21 00\nbe 10 00 00 00\n4c 89 e7\ne8 5c 9f 00 00\n48 89 c3\n48 85 ed\n74 2c\n48 89 d8\n48 83 c0 08\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8d 4d 0d\n48 89 48 f8\n48 89 28\n48 8b 6d 00\n48 83 c0 10\n48 85 ed\n75 e8\n48 89 df\n4c 89 e6\n4c 89 e2\n48 8b 4c 24 40\ne8 45 f9 ff ff\n48 89 df\ne8 ad c7 ff ff\ne8 f8 35 00 00\n48 81 c4 f8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1300
S'.text:0000000000405900\n.text:0000000000405901\n.text:0000000000405903\n.text:0000000000405905\n.text:0000000000405907\n.text:0000000000405909\n.text:000000000040590a\n.text:0000000000405911\n.text:0000000000405914\n.text:0000000000405919\n.text:000000000040591e\n.text:0000000000405927\n.text:000000000040592c\n.text:000000000040592e\n.text:0000000000405931\n.text:0000000000405937\n.text:000000000040593c\n.text:0000000000405941\n.text:0000000000405944\n.text:0000000000405949\n.text:0000000000405950\n.text:0000000000405955\n.text:0000000000405958\n.text:000000000040595d\n.text:0000000000405960\n.text:0000000000405965\n.text:000000000040596a\n.text:000000000040596e\n.text:0000000000405970\n.text:0000000000405976\n.text:000000000040597b\n.text:0000000000405980\n.text:0000000000405983\n.text:0000000000405987\n.text:000000000040598a\n.text:000000000040598c\n.text:0000000000405990\n.text:0000000000405996\n.text:000000000040599c\n.text:000000000040599e\n.text:00000000004059a3\n.text:00000000004059a8\n.text:00000000004059ad\n.text:00000000004059b0\n.text:00000000004059b5\n.text:00000000004059b8\n.text:00000000004059bb\n.text:00000000004059be\n.text:00000000004059c3\n.text:00000000004059cb\n.text:00000000004059d1\n.text:00000000004059d6\n.text:00000000004059db\n.text:00000000004059e0\n.text:00000000004059e3\n.text:00000000004059e7\n.text:00000000004059ef\n.text:00000000004059f7\n.text:0000000000405a00\n.text:0000000000405a03\n.text:0000000000405a08\n.text:0000000000405a0b\n.text:0000000000405a10\n.text:0000000000405a12\n.text:0000000000405a18\n.text:0000000000405a1e\n.text:0000000000405a20\n.text:0000000000405a28\n.text:0000000000405a2a\n.text:0000000000405a2c\n.text:0000000000405a31\n.text:0000000000405a36\n.text:0000000000405a39\n.text:0000000000405a3e\n.text:0000000000405a42\n.text:0000000000405a45\n.text:0000000000405a4d\n.text:0000000000405a4f\n.text:0000000000405a54\n.text:0000000000405a59\n.text:0000000000405a60\n.text:0000000000405a6b\n.text:0000000000405a6e\n.text:0000000000405a73\n.text:0000000000405a76\n.text:0000000000405a79\n.text:0000000000405a7e\n.text:0000000000405a83\n.text:0000000000405a85\n.text:0000000000405a8d\n.text:0000000000405a8f\n.text:0000000000405a91\n.text:0000000000405a96\n.text:0000000000405a99\n.text:0000000000405a9e\n.text:0000000000405aa3\n.text:0000000000405aa8\n.text:0000000000405aab\n.text:0000000000405ab0\n.text:0000000000405ab5\n.text:0000000000405ab7\n.text:0000000000405abc\n.text:0000000000405ac2\n.text:0000000000405ac4\n.text:0000000000405ad0\n.text:0000000000405ad3\n.text:0000000000405ad8\n.text:0000000000405add\n.text:0000000000405ae0\n.text:0000000000405ae4\n.text:0000000000405aea\n.text:0000000000405aec\n.text:0000000000405af4\n.text:0000000000405af7\n.text:0000000000405afc\n.text:0000000000405aff\n.text:0000000000405b04\n.text:0000000000405b07\n.text:0000000000405b0c\n.text:0000000000405b0f\n.text:0000000000405b12\n.text:0000000000405b15\n.text:0000000000405b1a\n.text:0000000000405b1e\n.text:0000000000405b23\n.text:0000000000405b27\n.text:0000000000405b2a\n.text:0000000000405b2d\n.text:0000000000405b30\n.text:0000000000405b33\n.text:0000000000405b36\n.text:0000000000405b3e\n.text:0000000000405b43\n.text:0000000000405b50\n.text:0000000000405b54\n.text:0000000000405b59\n.text:0000000000405b5c\n.text:0000000000405b5f\n.text:0000000000405b64\n.text:0000000000405b69\n.text:0000000000405b6c\n.text:0000000000405b71\n.text:0000000000405b76\n.text:0000000000405b79\n.text:0000000000405b7b\n.text:0000000000405b7e\n.text:0000000000405b83\n.text:0000000000405b8b\n.text:0000000000405b8d\n.text:0000000000405b90\n.text:0000000000405b96\n.text:0000000000405b99\n.text:0000000000405b9b\n.text:0000000000405ba0\n.text:0000000000405ba5\n.text:0000000000405ba8\n.text:0000000000405bad\n.text:0000000000405baf\n.text:0000000000405bb5\n.text:0000000000405bb7\n.text:0000000000405bc0\n.text:0000000000405bc5\n.text:0000000000405bcb\n.text:0000000000405bcd\n.text:0000000000405bcf\n.text:0000000000405bd5\n.text:0000000000405bd7\n.text:0000000000405bdc\n.text:0000000000405bdf\n.text:0000000000405be4\n.text:0000000000405be9\n.text:0000000000405bee\n.text:0000000000405bf0\n.text:0000000000405bf7\n.text:0000000000405bfc\n.text:0000000000405bff\n.text:0000000000405c04\n.text:0000000000405c07\n.text:0000000000405c0a\n.text:0000000000405c0c\n.text:0000000000405c0f\n.text:0000000000405c13\n.text:0000000000405c20\n.text:0000000000405c24\n.text:0000000000405c28\n.text:0000000000405c2b\n.text:0000000000405c2f\n.text:0000000000405c33\n.text:0000000000405c36\n.text:0000000000405c38\n.text:0000000000405c3b\n.text:0000000000405c3e\n.text:0000000000405c41\n.text:0000000000405c46\n.text:0000000000405c4b\n.text:0000000000405c4e\n.text:0000000000405c53\n.text:0000000000405c58\n.text:0000000000405c5f\n.text:0000000000405c60\n.text:0000000000405c62\n.text:0000000000405c64\n.text:0000000000405c66\n.text:0000000000405c68\n.text:0000000000405c69\n'
p1301
tp1302
sS'rpl_calloc'
p1303
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1304
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0061a1d8)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1305
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x004105db\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x004105e0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x004105e0\nPUSH RAX\nCALL 0x00402430\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00402750\n'
p1306
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 5f 1e ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 65 21 ff ff\n'
p1307
S'.text:00000000004105a0\n.text:00000000004105a3\n.text:00000000004105a8\n.text:00000000004105aa\n.text:00000000004105ad\n.text:00000000004105b2\n.text:00000000004105b4\n.text:00000000004105b7\n.text:00000000004105bb\n.text:00000000004105bd\n.text:00000000004105c0\n.text:00000000004105c3\n.text:00000000004105c6\n.text:00000000004105c9\n.text:00000000004105cb\n.text:00000000004105cc\n.text:00000000004105d1\n.text:00000000004105d7\n.text:00000000004105d9\n.text:00000000004105da\n.text:00000000004105db\n.text:00000000004105e0\n.text:00000000004105e3\n.text:00000000004105e6\n'
p1308
tp1309
sS'memset'
p1310
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1311
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0061a178)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1312
S'JMP qword ptr [0x0061a178]\n'
p1313
S'ff 25 e2 7a 21 00\n'
p1314
S'.plt:0000000000402690\n'
p1315
tp1316
sS'heap_default_compare'
p1317
(S'\n__stdcall heap_default_compare(void * a, void * b)\n'
p1318
V\u000aint heap_default_compare(void *a,void *b)\u000a\u000a{\u000a  return 0;\u000a}\u000a\u000a
p1319
S'XOR EAX,EAX\nRET\n'
p1320
S'31 c0\nc3\n'
p1321
S'.text:000000000040c150\n.text:000000000040c152\n'
p1322
tp1323
sS'readsource'
p1324
(S'\n__stdcall readsource(randread_source * s, uchar * p, size_t size)\n'
p1325
V\u000avoid readsource(randread_source *s,uchar *p,size_t size)\u000a\u000a{\u000a  int iVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  int iVar4;\u000a  size_t __n;\u000a  \u000a  sVar2 = fread_unlocked(p,1,size,(FILE *)s->source);\u000a  piVar3 = __errno_location();\u000a  __n = size - sVar2;\u000a  while (__n != 0) {\u000a    p = p + sVar2;\u000a    iVar4 = *piVar3;\u000a    iVar1 = ferror_unlocked((FILE *)s->source);\u000a    if (iVar1 == 0) {\u000a      iVar4 = iVar1;\u000a    }\u000a    *piVar3 = iVar4;\u000a    (*s->handler)(s->handler_arg);\u000a    sVar2 = fread_unlocked(p,1,__n,(FILE *)s->source);\u000a    __n = __n - sVar2;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1326
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R13,RDX\nMOV R14,RSI\nMOV R15,RDI\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nMOV RDI,R14\nCALL 0x00402540\nMOV RBX,RAX\nCALL 0x00402430\nMOV R12,RAX\nSUB R13,RBX\nJZ 0x0040e5fb\nNOP word ptr CS:[RAX + RAX*0x1]\nADD R14,RBX\nMOV EBX,dword ptr [R12]\nMOV RDI,qword ptr [R15]\nCALL 0x00402740\nTEST EAX,EAX\nCMOVZ EBX,EAX\nMOV dword ptr [R12],EBX\nMOV RDI,qword ptr [R15 + 0x10]\nCALL qword ptr [R15 + 0x8]\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nMOV RDI,R14\nMOV RDX,R13\nCALL 0x00402540\nMOV RBX,RAX\nSUB R13,RBX\nJNZ 0x0040e5c0\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1327
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 d5\n49 89 f6\n49 89 ff\n49 8b 0f\nbe 01 00 00 00\n4c 89 f7\ne8 9e 3f ff ff\n48 89 c3\ne8 86 3e ff ff\n49 89 c4\n49 29 dd\n74 49\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 01 de\n41 8b 1c 24\n49 8b 3f\ne8 71 41 ff ff\n85 c0\n0f 44 d8\n41 89 1c 24\n49 8b 7f 10\n41 ff 57 08\n49 8b 0f\nbe 01 00 00 00\n4c 89 f7\n4c 89 ea\ne8 4d 3f ff ff\n48 89 c3\n49 29 dd\n75 c5\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1328
S'.text:000000000040e580\n.text:000000000040e582\n.text:000000000040e584\n.text:000000000040e586\n.text:000000000040e588\n.text:000000000040e589\n.text:000000000040e58c\n.text:000000000040e58f\n.text:000000000040e592\n.text:000000000040e595\n.text:000000000040e59a\n.text:000000000040e59d\n.text:000000000040e5a2\n.text:000000000040e5a5\n.text:000000000040e5aa\n.text:000000000040e5ad\n.text:000000000040e5b0\n.text:000000000040e5b2\n.text:000000000040e5c0\n.text:000000000040e5c3\n.text:000000000040e5c7\n.text:000000000040e5ca\n.text:000000000040e5cf\n.text:000000000040e5d1\n.text:000000000040e5d4\n.text:000000000040e5d8\n.text:000000000040e5dc\n.text:000000000040e5e0\n.text:000000000040e5e3\n.text:000000000040e5e8\n.text:000000000040e5eb\n.text:000000000040e5ee\n.text:000000000040e5f3\n.text:000000000040e5f6\n.text:000000000040e5f9\n.text:000000000040e5fb\n.text:000000000040e5fc\n.text:000000000040e5fe\n.text:000000000040e600\n.text:000000000040e602\n.text:000000000040e604\n'
p1329
tp1330
sS'cleanup'
p1331
(S'\n__stdcall cleanup(EVP_PKEY_CTX * ctx)\n'
p1332
V\u000avoid cleanup(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  tempnode *ptVar1;\u000a  \u000a  ptVar1 = temphead;\u000a  if (temphead != (tempnode *)0x0) {\u000a    do {\u000a      unlink(ptVar1->name);\u000a      ptVar1 = ptVar1->next;\u000a    } while (ptVar1 != (tempnode *)0x0);\u000a  }\u000a  temphead = (tempnode *)0x0;\u000a  return;\u000a}\u000a\u000a
p1333
S'PUSH RBX\nMOV RBX,qword ptr [0x0061aa70]\nTEST RBX,RBX\nJZ 0x00405d21\nNOP dword ptr [RAX]\nLEA RDI,[RBX + 0xd]\nCALL 0x00402440\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nJNZ 0x00405d10\nMOV qword ptr [0x0061aa70],0x0\nPOP RBX\nRET\n'
p1334
S'53\n48 8b 1d 68 4d 21 00\n48 85 db\n74 14\n0f 1f 00\n48 8d 7b 0d\ne8 27 c7 ff ff\n48 8b 1b\n48 85 db\n75 ef\n48 c7 05 44 4d 21 00 00 00 00 00\n5b\nc3\n'
p1335
S'.text:0000000000405d00\n.text:0000000000405d01\n.text:0000000000405d08\n.text:0000000000405d0b\n.text:0000000000405d0d\n.text:0000000000405d10\n.text:0000000000405d14\n.text:0000000000405d19\n.text:0000000000405d1c\n.text:0000000000405d1f\n.text:0000000000405d21\n.text:0000000000405d2c\n.text:0000000000405d2d\n'
p1336
tp1337
sS'__xargmatch_internal'
p1338
(S'\n__stdcall __xargmatch_internal(char * context, char * arg, char * * arglist, char * vallist, size_t valsize, argmatch_exit_fn * exit_fn)\n'
p1339
V\u000aptrdiff_t __xargmatch_internal\u000a                    (char *context,char *arg,char **arglist,char *vallist,size_t valsize,\u000a                    void (*exit_fn)())\u000a\u000a{\u000a  ptrdiff_t problem;\u000a  \u000a  problem = argmatch(arg,arglist,vallist,valsize);\u000a  if (problem < 0) {\u000a    argmatch_invalid(context,arg,problem);\u000a    argmatch_valid(arglist,vallist,valsize);\u000a    (*exit_fn)();\u000a    problem = -1;\u000a  }\u000a  return problem;\u000a}\u000a\u000a
p1340
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x00409ca0\nTEST RAX,RAX\nJNS 0x00409f59\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00409da0\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00409e10\nCALL R14\nMOV RAX,-0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1341
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c7\n49 89 cc\n49 89 d5\n48 89 f3\n48 89 fd\n48 89 df\n4c 89 ee\n4c 89 e2\n4c 89 f9\ne8 72 fd ff ff\n48 85 c0\n79 26\n48 89 ef\n48 89 de\n48 89 c2\ne8 5f fe ff ff\n4c 89 ef\n4c 89 e6\n4c 89 fa\ne8 c1 fe ff ff\n41 ff d6\n48 c7 c0 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1342
S'.text:0000000000409f00\n.text:0000000000409f01\n.text:0000000000409f03\n.text:0000000000409f05\n.text:0000000000409f07\n.text:0000000000409f09\n.text:0000000000409f0a\n.text:0000000000409f0b\n.text:0000000000409f0e\n.text:0000000000409f11\n.text:0000000000409f14\n.text:0000000000409f17\n.text:0000000000409f1a\n.text:0000000000409f1d\n.text:0000000000409f20\n.text:0000000000409f23\n.text:0000000000409f26\n.text:0000000000409f29\n.text:0000000000409f2e\n.text:0000000000409f31\n.text:0000000000409f33\n.text:0000000000409f36\n.text:0000000000409f39\n.text:0000000000409f3c\n.text:0000000000409f41\n.text:0000000000409f44\n.text:0000000000409f47\n.text:0000000000409f4a\n.text:0000000000409f4f\n.text:0000000000409f52\n.text:0000000000409f59\n.text:0000000000409f5d\n.text:0000000000409f5e\n.text:0000000000409f60\n.text:0000000000409f62\n.text:0000000000409f64\n.text:0000000000409f66\n.text:0000000000409f67\n'
p1343
tp1344
sS'dup_safer'
p1345
(S'\n__stdcall dup_safer()\n'
p1346
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1347
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x00410670\n'
p1348
S'31 f6\nba 03 00 00 00\n31 c0\ne9 62 10 00 00\n'
p1349
S'.text:000000000040f600\n.text:000000000040f602\n.text:000000000040f607\n.text:000000000040f609\n'
p1350
tp1351
sS'rotr32'
p1352
(S'\n__stdcall rotr32()\n'
p1353
V\u000auint32_t rotr32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI >> bVar1 | in_EDI << 0x20 - bVar1);\u000a}\u000a\u000a
p1354
S'MOV ECX,ESI\nROR EDI,CL\nMOV EAX,EDI\nRET\n'
p1355
S'89 f1\nd3 cf\n89 f8\nc3\n'
p1356
S'.text:0000000000410ce0\n.text:0000000000410ce2\n.text:0000000000410ce4\n.text:0000000000410ce6\n'
p1357
tp1358
sS'__ctype_b_loc'
p1359
(S'\n__stdcall __ctype_b_loc()\n'
p1360
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0061a3c8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1361
S'JMP qword ptr [0x0061a3c8]\n'
p1362
S'ff 25 92 78 21 00\n'
p1363
S'.plt:0000000000402b30\n'
p1364
tp1365
sS'sigaddset'
p1366
(S'\n__stdcall sigaddset(sigset_t * __set, int __signo)\n'
p1367
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigaddset(sigset_t *__set,int __signo)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigaddset_0061a3a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1368
S'JMP qword ptr [0x0061a3a8]\n'
p1369
S'ff 25 b2 78 21 00\n'
p1370
S'.plt:0000000000402af0\n'
p1371
tp1372
sS'fdadvise'
p1373
(S'\n__stdcall fdadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p1374
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fdadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_0061a1a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1375
S'JMP 0x004026e0\n'
p1376
S'e9 cb 7a ff ff\n'
p1377
S'.text:000000000040ac10\n'
p1378
tp1379
sS'quotearg'
p1380
(S'\n__stdcall quotearg(char * arg)\n'
p1381
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1382
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x0040d9b0\n'
p1383
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1384
S'.text:000000000040db90\n.text:000000000040db93\n.text:000000000040db95\n.text:000000000040db98\n'
p1385
tp1386
sS'c_iscntrl'
p1387
(S'\n__stdcall c_iscntrl()\n'
p1388
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1389
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00410e08\nRET\nCMP EDI,0x7f\nJZ 0x00410e07\nXOR EAX,EAX\nRET\n'
p1390
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1391
S'.text:0000000000410e00\n.text:0000000000410e02\n.text:0000000000410e05\n.text:0000000000410e07\n.text:0000000000410e08\n.text:0000000000410e0b\n.text:0000000000410e0d\n.text:0000000000410e0f\n'
p1392
tp1393
sS'hash_reset_tuning'
p1394
(S'\n__stdcall hash_reset_tuning(Hash_tuning * tuning)\n'
p1395
V\u000avoid hash_reset_tuning(Hash_tuning *tuning)\u000a\u000a{\u000a  float fVar1;\u000a  float fVar2;\u000a  float fVar3;\u000a  \u000a  *(undefined4 *)&tuning->is_n_buckets = default_tuning._16_4_;\u000a  fVar3 = default_tuning.growth_factor;\u000a  fVar2 = default_tuning.growth_threshold;\u000a  fVar1 = default_tuning.shrink_factor;\u000a  tuning->shrink_threshold = default_tuning.shrink_threshold;\u000a  tuning->shrink_factor = fVar1;\u000a  tuning->growth_threshold = fVar2;\u000a  tuning->growth_factor = fVar3;\u000a  return;\u000a}\u000a\u000a
p1396
S'MOV EAX,dword ptr [0x004141e0]\nMOV dword ptr [RDI + 0x10],EAX\nMOVUPS XMM0,xmmword ptr [0x004141d0]\nMOVUPS xmmword ptr [RDI],XMM0\nRET\n'
p1397
S'8b 05 9a 8c 00 00\n89 47 10\n0f 10 05 80 8c 00 00\n0f 11 07\nc3\n'
p1398
S'.text:000000000040b540\n.text:000000000040b546\n.text:000000000040b549\n.text:000000000040b550\n.text:000000000040b553\n'
p1399
tp1400
sS'c_isblank'
p1401
(S'\n__stdcall c_isblank()\n'
p1402
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1403
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1404
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1405
S'.text:0000000000410df0\n.text:0000000000410df3\n.text:0000000000410df6\n.text:0000000000410df9\n.text:0000000000410dfc\n.text:0000000000410dfe\n'
p1406
tp1407
sS'randread_free'
p1408
(S'\n__stdcall randread_free(randread_source * s)\n'
p1409
V\u000aint randread_free(randread_source *s)\u000a\u000a{\u000a  FILE *fp;\u000a  int iVar1;\u000a  \u000a  fp = s->source;\u000a  free(s);\u000a  if (fp != (FILE *)0x0) {\u000a    iVar1 = rpl_fclose(fp);\u000a    return iVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1410
S'PUSH RBX\nMOV RBX,qword ptr [RDI]\nCALL 0x00402400\nTEST RBX,RBX\nJZ 0x0040e717\nMOV RDI,RBX\nPOP RBX\nJMP 0x004105f0\nXOR EAX,EAX\nPOP RBX\nRET\n'
p1411
S'53\n48 8b 1f\ne8 f7 3c ff ff\n48 85 db\n74 09\n48 89 df\n5b\ne9 d9 1e 00 00\n31 c0\n5b\nc3\n'
p1412
S'.text:000000000040e700\n.text:000000000040e701\n.text:000000000040e704\n.text:000000000040e709\n.text:000000000040e70c\n.text:000000000040e70e\n.text:000000000040e711\n.text:000000000040e712\n.text:000000000040e717\n.text:000000000040e719\n.text:000000000040e71a\n'
p1413
tp1414
sS'randread'
p1415
(S'\n__stdcall randread(randread_source * s, void * buf, size_t size)\n'
p1416
V\u000avoid randread(randread_source *s,void *buf,size_t size)\u000a\u000a{\u000a  if (s->source != (FILE *)0x0) {\u000a    readsource(s,(uchar *)buf,size);\u000a    return;\u000a  }\u000a  readisaac((isaac *)s->buf,buf,size);\u000a  return;\u000a}\u000a\u000a
p1417
S'CMP qword ptr [RDI],0x0\nJZ 0x0040e568\nJMP 0x0040e580\nADD RDI,0x18\nJMP 0x0040e610\n'
p1418
S'48 83 3f 00\n74 02\neb 18\n48 83 c7 18\ne9 9f 00 00 00\n'
p1419
S'.text:000000000040e560\n.text:000000000040e564\n.text:000000000040e566\n.text:000000000040e568\n.text:000000000040e56c\n'
p1420
tp1421
sS'get_nonce'
p1422
(S'\n__stdcall get_nonce(DRBG_CTX * ctx, uchar * * pout, int entropy, size_t min_len, size_t max_len)\n'
p1423
V\u000asize_t get_nonce(DRBG_CTX *ctx,uchar **pout,int entropy,size_t min_len,size_t max_len)\u000a\u000a{\u000a  int __fd;\u000a  ulong uVar1;\u000a  undefined4 extraout_var;\u000a  void *pvVar2;\u000a  undefined4 in_register_00000014;\u000a  uchar **__nbytes;\u000a  size_t __n;\u000a  timeval v;\u000a  __gid_t local_30 [4];\u000a  \u000a  uVar1 = 0;\u000a  __fd = open("/dev/urandom",0,CONCAT44(in_register_00000014,entropy));\u000a  if (-1 < __fd) {\u000a    __nbytes = (uchar **)0x800;\u000a    if (pout < (uchar **)0x800) {\u000a      __nbytes = pout;\u000a    }\u000a    uVar1 = read(__fd,ctx,(size_t)__nbytes);\u000a    __fd = close(__fd);\u000a    if ((long)uVar1 < 1) {\u000a      uVar1 = 0;\u000a    }\u000a    else {\u000a      if (0x7ff < uVar1) {\u000a        return CONCAT44(extraout_var,__fd);\u000a      }\u000a    }\u000a  }\u000a  __n = 0x10;\u000a  if (0x800 - uVar1 < 0x10) {\u000a    __n = 0x800 - uVar1;\u000a  }\u000a  gettimeofday((timeval *)local_30,(__timezone_ptr_t)0x0);\u000a  pvVar2 = memcpy(ctx + uVar1,(timeval *)local_30,__n);\u000a  uVar1 = __n + uVar1;\u000a  if (uVar1 < 0x800) {\u000a    __n = 4;\u000a    if (0x800 - uVar1 < 4) {\u000a      __n = 0x800 - uVar1;\u000a    }\u000a    local_30[0] = getpid();\u000a    pvVar2 = memcpy(ctx + uVar1,local_30,__n);\u000a    uVar1 = __n + uVar1;\u000a    if (uVar1 < 0x800) {\u000a      __n = 4;\u000a      if (0x800 - uVar1 < 4) {\u000a        __n = 0x800 - uVar1;\u000a      }\u000a      local_30[0] = getppid();\u000a      pvVar2 = memcpy(ctx + uVar1,local_30,__n);\u000a      uVar1 = __n + uVar1;\u000a      if (uVar1 < 0x800) {\u000a        __n = 4;\u000a        if (0x800 - uVar1 < 4) {\u000a          __n = 0x800 - uVar1;\u000a        }\u000a        local_30[0] = getuid();\u000a        pvVar2 = memcpy(ctx + uVar1,local_30,__n);\u000a        uVar1 = __n + uVar1;\u000a        if (uVar1 < 0x800) {\u000a          __n = 4;\u000a          if (0x800 - uVar1 < 4) {\u000a            __n = 0x800 - uVar1;\u000a          }\u000a          local_30[0] = getgid();\u000a          pvVar2 = memcpy(ctx + uVar1,local_30,__n);\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return (size_t)pvVar2;\u000a}\u000a\u000a
p1424
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,RSI\nMOV R14,RDI\nXOR R15D,R15D\nMOV EDI,0x414ab5\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00402980\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040e401\nCMP RBX,0x800\nMOV EDX,0x800\nCMOVC RDX,RBX\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00402700\nMOV R15,RAX\nMOV EDI,EBP\nCALL 0x004026c0\nTEST R15,R15\nJLE 0x0040e3fe\nCMP R15,0x7ff\nJBE 0x0040e401\nJMP 0x0040e52c\nXOR R15D,R15D\nMOV EAX,0x800\nSUB RAX,R15\nCMP RAX,0x10\nMOV EBX,0x10\nCMOVC RBX,RAX\nLEA RBP,[RSP + 0x8]\nXOR ESI,ESI\nMOV RDI,RBP\nCALL 0x00402670\nLEA RDI,[R14 + R15*0x1]\nMOV RSI,RBP\nMOV RDX,RBX\nCALL 0x004027c0\nADD RBX,R15\nCMP RBX,0x7ff\nJA 0x0040e52c\nMOV EAX,0x800\nSUB RAX,RBX\nCMP RAX,0x4\nMOV R15D,0x4\nCMOVC R15,RAX\nCALL 0x00402530\nMOV dword ptr [RSP + 0x8],EAX\nLEA RDI,[R14 + RBX*0x1]\nLEA RSI,[RSP + 0x8]\nMOV RDX,R15\nCALL 0x004027c0\nADD R15,RBX\nCMP R15,0x7ff\nJA 0x0040e52c\nMOV EAX,0x800\nSUB RAX,R15\nCMP RAX,0x4\nMOV EBX,0x4\nCMOVC RBX,RAX\nCALL 0x00402a30\nMOV dword ptr [RSP + 0x8],EAX\nLEA RDI,[R14 + R15*0x1]\nLEA RSI,[RSP + 0x8]\nMOV RDX,RBX\nCALL 0x004027c0\nADD RBX,R15\nCMP RBX,0x7ff\nJA 0x0040e52c\nMOV EAX,0x800\nSUB RAX,RBX\nCMP RAX,0x4\nMOV R15D,0x4\nCMOVC R15,RAX\nCALL 0x004025e0\nMOV dword ptr [RSP + 0x8],EAX\nLEA RDI,[R14 + RBX*0x1]\nLEA RSI,[RSP + 0x8]\nMOV RDX,R15\nCALL 0x004027c0\nADD R15,RBX\nCMP R15,0x7ff\nJA 0x0040e52c\nMOV EAX,0x800\nSUB RAX,R15\nCMP RAX,0x4\nMOV EBX,0x4\nCMOVC RBX,RAX\nCALL 0x00402800\nMOV dword ptr [RSP + 0x8],EAX\nADD R14,R15\nLEA RSI,[RSP + 0x8]\nMOV RDI,R14\nMOV RDX,RBX\nCALL 0x004027c0\nADD RSP,0x18\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1425
S'55\n41 57\n41 56\n53\n48 83 ec 18\n48 89 f3\n49 89 fe\n45 31 ff\nbf b5 4a 41 00\n31 f6\n31 c0\ne8 bf 45 ff ff\n89 c5\n85 ed\n78 3a\n48 81 fb 00 08 00 00\nba 00 08 00 00\n48 0f 42 d3\n89 ef\n4c 89 f6\ne8 1f 43 ff ff\n49 89 c7\n89 ef\ne8 d5 42 ff ff\n4d 85 ff\n7e 0e\n49 81 ff ff 07 00 00\n76 08\ne9 2e 01 00 00\n45 31 ff\nb8 00 08 00 00\n4c 29 f8\n48 83 f8 10\nbb 10 00 00 00\n48 0f 42 d8\n48 8d 6c 24 08\n31 f6\n48 89 ef\ne8 4b 42 ff ff\n4b 8d 3c 3e\n48 89 ee\n48 89 da\ne8 8c 43 ff ff\n4c 01 fb\n48 81 fb ff 07 00 00\n0f 87 e8 00 00 00\nb8 00 08 00 00\n48 29 d8\n48 83 f8 04\n41 bf 04 00 00 00\n4c 0f 42 f8\ne8 d1 40 ff ff\n89 44 24 08\n49 8d 3c 1e\n48 8d 74 24 08\n4c 89 fa\ne8 4c 43 ff ff\n49 01 df\n49 81 ff ff 07 00 00\n0f 87 a8 00 00 00\nb8 00 08 00 00\n4c 29 f8\n48 83 f8 04\nbb 04 00 00 00\n48 0f 42 d8\ne8 92 45 ff ff\n89 44 24 08\n4b 8d 3c 3e\n48 8d 74 24 08\n48 89 da\ne8 0d 43 ff ff\n4c 01 fb\n48 81 fb ff 07 00 00\n77 6d\nb8 00 08 00 00\n48 29 d8\n48 83 f8 04\n41 bf 04 00 00 00\n4c 0f 42 f8\ne8 06 41 ff ff\n89 44 24 08\n49 8d 3c 1e\n48 8d 74 24 08\n4c 89 fa\ne8 d1 42 ff ff\n49 01 df\n49 81 ff ff 07 00 00\n77 31\nb8 00 08 00 00\n4c 29 f8\n48 83 f8 04\nbb 04 00 00 00\n48 0f 42 d8\ne8 eb 42 ff ff\n89 44 24 08\n4d 01 fe\n48 8d 74 24 08\n4c 89 f7\n48 89 da\ne8 94 42 ff ff\n48 83 c4 18\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1426
S'.text:000000000040e3a0\n.text:000000000040e3a1\n.text:000000000040e3a3\n.text:000000000040e3a5\n.text:000000000040e3a6\n.text:000000000040e3aa\n.text:000000000040e3ad\n.text:000000000040e3b0\n.text:000000000040e3b3\n.text:000000000040e3b8\n.text:000000000040e3ba\n.text:000000000040e3bc\n.text:000000000040e3c1\n.text:000000000040e3c3\n.text:000000000040e3c5\n.text:000000000040e3c7\n.text:000000000040e3ce\n.text:000000000040e3d3\n.text:000000000040e3d7\n.text:000000000040e3d9\n.text:000000000040e3dc\n.text:000000000040e3e1\n.text:000000000040e3e4\n.text:000000000040e3e6\n.text:000000000040e3eb\n.text:000000000040e3ee\n.text:000000000040e3f0\n.text:000000000040e3f7\n.text:000000000040e3f9\n.text:000000000040e3fe\n.text:000000000040e401\n.text:000000000040e406\n.text:000000000040e409\n.text:000000000040e40d\n.text:000000000040e412\n.text:000000000040e416\n.text:000000000040e41b\n.text:000000000040e41d\n.text:000000000040e420\n.text:000000000040e425\n.text:000000000040e429\n.text:000000000040e42c\n.text:000000000040e42f\n.text:000000000040e434\n.text:000000000040e437\n.text:000000000040e43e\n.text:000000000040e444\n.text:000000000040e449\n.text:000000000040e44c\n.text:000000000040e450\n.text:000000000040e456\n.text:000000000040e45a\n.text:000000000040e45f\n.text:000000000040e463\n.text:000000000040e467\n.text:000000000040e46c\n.text:000000000040e46f\n.text:000000000040e474\n.text:000000000040e477\n.text:000000000040e47e\n.text:000000000040e484\n.text:000000000040e489\n.text:000000000040e48c\n.text:000000000040e490\n.text:000000000040e495\n.text:000000000040e499\n.text:000000000040e49e\n.text:000000000040e4a2\n.text:000000000040e4a6\n.text:000000000040e4ab\n.text:000000000040e4ae\n.text:000000000040e4b3\n.text:000000000040e4b6\n.text:000000000040e4bd\n.text:000000000040e4bf\n.text:000000000040e4c4\n.text:000000000040e4c7\n.text:000000000040e4cb\n.text:000000000040e4d1\n.text:000000000040e4d5\n.text:000000000040e4da\n.text:000000000040e4de\n.text:000000000040e4e2\n.text:000000000040e4e7\n.text:000000000040e4ea\n.text:000000000040e4ef\n.text:000000000040e4f2\n.text:000000000040e4f9\n.text:000000000040e4fb\n.text:000000000040e500\n.text:000000000040e503\n.text:000000000040e507\n.text:000000000040e50c\n.text:000000000040e510\n.text:000000000040e515\n.text:000000000040e519\n.text:000000000040e51c\n.text:000000000040e521\n.text:000000000040e524\n.text:000000000040e527\n.text:000000000040e52c\n.text:000000000040e530\n.text:000000000040e531\n.text:000000000040e533\n.text:000000000040e535\n.text:000000000040e536\n'
p1427
tp1428
sS'inittables'
p1429
(S'\n__stdcall inittables()\n'
p1430
V\u000avoid inittables(void)\u000a\u000a{\u000a  ushort *puVar1;\u000a  _Bool _Var2;\u000a  byte bVar3;\u000a  int iVar4;\u000a  ushort **ppuVar5;\u000a  char *__s;\u000a  size_t sVar6;\u000a  long lVar7;\u000a  long lVar8;\u000a  \u000a  lVar7 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  do {\u000a    _Var2 = field_sep();\u000a    blanks[lVar7] = _Var2;\u000a    nonprinting[lVar7] = ~(byte)((*ppuVar5)[lVar7] >> 0xe) & 1;\u000a    if ((*(byte *)(*ppuVar5 + lVar7) & 8) == 0) {\u000a      _Var2 = field_sep();\u000a      _Var2 = (_Bool)(_Var2 ^ 1);\u000a    }\u000a    else {\u000a      _Var2 = false;\u000a    }\u000a    nondictionary[lVar7] = _Var2;\u000a    iVar4 = toupper((int)lVar7);\u000a    fold_toupper[lVar7] = (char)iVar4;\u000a    lVar7 = lVar7 + 1;\u000a  } while (lVar7 != 0x100);\u000a  if (hard_LC_TIME == false) {\u000a    return;\u000a  }\u000a  lVar7 = 0;\u000a  do {\u000a    __s = nl_langinfo((int)lVar7 + 0x2000e);\u000a    sVar6 = strlen(__s);\u000a    __s = (char *)xmalloc(sVar6 + 1);\u000a    monthtab[lVar7].name = __s;\u000a    lVar8 = lVar7 + 1;\u000a    monthtab[lVar7].val = (int)lVar8;\u000a    if (sVar6 == 0) {\u000a      lVar7 = 0;\u000a    }\u000a    else {\u000a      ppuVar5 = __ctype_b_loc();\u000a      lVar7 = 0;\u000a      do {\u000a        puVar1 = *ppuVar5;\u000a        bVar3 = to_uchar();\u000a        if ((*(byte *)(puVar1 + (ulong)bVar3) & 1) == 0) {\u000a          __s[lVar7] = fold_toupper[(ulong)bVar3];\u000a          lVar7 = lVar7 + 1;\u000a        }\u000a        sVar6 = sVar6 - 1;\u000a      } while (sVar6 != 0);\u000a    }\u000a    __s[lVar7] = 0;\u000a    lVar7 = lVar8;\u000a  } while (lVar8 != 0xc);\u000a  (*(code *)PTR_qsort_0061a090)(monthtab,0xc,0x10,struct_month_cmp);\u000a  return;\u000a}\u000a\u000a
p1431
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nXOR EBX,EBX\nCALL 0x00402b30\nMOV R14,RAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EDI,BL\nCALL 0x00405cd0\nMOV byte ptr [0x61a670 + RBX],AL\nMOV RAX,qword ptr [R14]\nMOVZX EAX,word ptr [RAX + RBX*0x2]\nSHR EAX,0xe\nNOT AL\nAND AL,0x1\nMOV byte ptr [0x61a770 + RBX],AL\nMOV RAX,qword ptr [R14]\nTEST byte ptr [RAX + RBX*0x2],0x8\nJNZ 0x00404330\nMOVZX EDI,BL\nCALL 0x00405cd0\nXOR AL,0x1\nJMP 0x00404332\nXOR EAX,EAX\nMOV byte ptr [0x61a870 + RBX],AL\nMOV EDI,EBX\nCALL 0x00402490\nMOV byte ptr [0x61a970 + RBX],AL\nINC RBX\nCMP RBX,0x100\nJNZ 0x004042f0\nCMP byte ptr [0x0061a5b1],0x0\nJZ 0x0040441c\nXOR EBP,EBP\nLEA EDI,[0x2000e + RBP]\nCALL 0x00402880\nMOV RBX,RAX\nMOV RDI,RBX\nCALL 0x004025d0\nMOV R15,RAX\nLEA RDI,[R15 + 0x1]\nCALL 0x0040fb80\nMOV R14,RAX\nMOV RAX,RBP\nSHL RAX,0x4\nMOV qword ptr [0x61a400 + RAX],R14\nINC RBP\nMOV dword ptr [0x61a408 + RAX],EBP\nTEST R15,R15\nMOV qword ptr [RSP],RBP\nJZ 0x004043e0\nCALL 0x00402b30\nMOV R12,RAX\nXOR EBP,EBP\nNOP\nMOV R13,qword ptr [R12]\nMOVSX EDI,byte ptr [RBX]\nCALL 0x004042c0\nMOVZX EAX,AL\nTEST byte ptr [R13 + RAX*0x2],0x1\nJNZ 0x004043d5\nMOVZX EAX,byte ptr [0x61a970 + RAX]\nMOV byte ptr [R14 + RBP*0x1],AL\nINC RBP\nINC RBX\nDEC R15\nJNZ 0x004043b0\nJMP 0x004043e2\nXOR EBP,EBP\nMOV byte ptr [R14 + RBP*0x1],0x0\nMOV RBP,qword ptr [RSP]\nCMP RBP,0xc\nJNZ 0x00404360\nMOV EDI,0x61a400\nMOV ESI,0xc\nMOV EDX,0x10\nMOV ECX,0x405cf0\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004024c0\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1432
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n31 db\ne8 4e e8 ff ff\n49 89 c6\n66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 fb\ne8 d8 19 00 00\n88 83 70 a6 61 00\n49 8b 06\n0f b7 04 58\nc1 e8 0e\nf6 d0\n24 01\n88 83 70 a7 61 00\n49 8b 06\nf6 04 58 08\n75 15\n0f b6 fb\ne8 ad 19 00 00\n34 01\neb 0b\n31 c0\n88 83 70 a8 61 00\n89 df\ne8 51 e1 ff ff\n88 83 70 a9 61 00\n48 ff c3\n48 81 fb 00 01 00 00\n75 9f\n80 3d 59 62 21 00 00\n0f 84 be 00 00 00\n31 ed\n8d bd 0e 00 02 00\ne8 15 e5 ff ff\n48 89 c3\n48 89 df\ne8 5a e2 ff ff\n49 89 c7\n49 8d 7f 01\ne8 fe b7 00 00\n49 89 c6\n48 89 e8\n48 c1 e0 04\n4c 89 b0 00 a4 61 00\n48 ff c5\n89 a8 08 a4 61 00\n4d 85 ff\n48 89 2c 24\n74 3b\ne8 86 e7 ff ff\n49 89 c4\n31 ed\n90\n4d 8b 2c 24\n0f be 3b\ne8 04 ff ff ff\n0f b6 c0\n41 f6 44 45 00 01\n75 0e\n0f b6 80 70 a9 61 00\n41 88 04 2e\n48 ff c5\n48 ff c3\n49 ff cf\n75 d3\neb 03\n31 ed\n41 c6 04 2e 00\n48 8b 2c 24\n48 83 fd 0c\n0f 85 6b ff ff ff\nbf 00 a4 61 00\nbe 0c 00 00 00\nba 10 00 00 00\nb9 f0 5c 40 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 a4 e0 ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1433
S'.text:00000000004042d0\n.text:00000000004042d1\n.text:00000000004042d3\n.text:00000000004042d5\n.text:00000000004042d7\n.text:00000000004042d9\n.text:00000000004042da\n.text:00000000004042db\n.text:00000000004042dd\n.text:00000000004042e2\n.text:00000000004042e5\n.text:00000000004042f0\n.text:00000000004042f3\n.text:00000000004042f8\n.text:00000000004042fe\n.text:0000000000404301\n.text:0000000000404305\n.text:0000000000404308\n.text:000000000040430a\n.text:000000000040430c\n.text:0000000000404312\n.text:0000000000404315\n.text:0000000000404319\n.text:000000000040431b\n.text:000000000040431e\n.text:0000000000404323\n.text:0000000000404325\n.text:0000000000404330\n.text:0000000000404332\n.text:0000000000404338\n.text:000000000040433a\n.text:000000000040433f\n.text:0000000000404345\n.text:0000000000404348\n.text:000000000040434f\n.text:0000000000404351\n.text:0000000000404358\n.text:000000000040435e\n.text:0000000000404360\n.text:0000000000404366\n.text:000000000040436b\n.text:000000000040436e\n.text:0000000000404371\n.text:0000000000404376\n.text:0000000000404379\n.text:000000000040437d\n.text:0000000000404382\n.text:0000000000404385\n.text:0000000000404388\n.text:000000000040438c\n.text:0000000000404393\n.text:0000000000404396\n.text:000000000040439c\n.text:000000000040439f\n.text:00000000004043a3\n.text:00000000004043a5\n.text:00000000004043aa\n.text:00000000004043ad\n.text:00000000004043af\n.text:00000000004043b0\n.text:00000000004043b4\n.text:00000000004043b7\n.text:00000000004043bc\n.text:00000000004043bf\n.text:00000000004043c5\n.text:00000000004043c7\n.text:00000000004043ce\n.text:00000000004043d2\n.text:00000000004043d5\n.text:00000000004043d8\n.text:00000000004043db\n.text:00000000004043dd\n.text:00000000004043e0\n.text:00000000004043e2\n.text:00000000004043e7\n.text:00000000004043eb\n.text:00000000004043ef\n.text:00000000004043f5\n.text:00000000004043fa\n.text:00000000004043ff\n.text:0000000000404404\n.text:0000000000404409\n.text:000000000040440d\n.text:000000000040440e\n.text:0000000000404410\n.text:0000000000404412\n.text:0000000000404414\n.text:0000000000404416\n.text:0000000000404417\n.text:000000000040441c\n.text:0000000000404420\n.text:0000000000404421\n.text:0000000000404423\n.text:0000000000404425\n.text:0000000000404427\n.text:0000000000404429\n.text:000000000040442a\n'
p1434
tp1435
sS'human_numcompare'
p1436
(S'\n__stdcall human_numcompare(char * a, char * b)\n'
p1437
V\u000aint human_numcompare(char *a,char *b)\u000a\u000a{\u000a  byte bVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  \u000a  a = a + -1;\u000a  do {\u000a    a = a + 1;\u000a    bVar1 = to_uchar();\u000a  } while (blanks[(ulong)bVar1] != false);\u000a  b = b + -1;\u000a  do {\u000a    b = b + 1;\u000a    bVar1 = to_uchar();\u000a  } while (blanks[(ulong)bVar1] != false);\u000a  iVar2 = find_unit_order(a);\u000a  iVar3 = find_unit_order(b);\u000a  if (iVar2 - iVar3 != 0) {\u000a    return iVar2 - iVar3;\u000a  }\u000a  iVar2 = strnumcmp(a,b);\u000a  return iVar2;\u000a}\u000a\u000a
p1438
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV RBX,RDI\nDEC RBX\nNOP dword ptr [RAX]\nMOVSX EDI,byte ptr [RBX + 0x1]\nINC RBX\nCALL 0x004042c0\nMOVZX EAX,AL\nCMP byte ptr [0x61a670 + RAX],0x0\nJNZ 0x00407170\nDEC R14\nNOP dword ptr [RAX + RAX*0x1]\nMOVSX EDI,byte ptr [R14 + 0x1]\nINC R14\nCALL 0x004042c0\nMOVZX EAX,AL\nCMP byte ptr [0x61a670 + RAX],0x0\nJNZ 0x00407190\nMOV RDI,RBX\nCALL 0x004076f0\nMOV EBP,EAX\nMOV RDI,R14\nCALL 0x004076f0\nSUB EBP,EAX\nJZ 0x004071c6\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV EDX,dword ptr [0x0061a5b4]\nMOV ECX,dword ptr [0x0061a5b8]\nMOV RDI,RBX\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x0040f1a0\n'
p1439
S'55\n41 56\n53\n49 89 f6\n48 89 fb\n48 ff cb\n0f 1f 00\n0f be 7b 01\n48 ff c3\ne8 44 d1 ff ff\n0f b6 c0\n80 b8 70 a6 61 00 00\n75 e8\n49 ff ce\n0f 1f 44 00 00\n41 0f be 7e 01\n49 ff c6\ne8 23 d1 ff ff\n0f b6 c0\n80 b8 70 a6 61 00 00\n75 e7\n48 89 df\ne8 3f 05 00 00\n89 c5\n4c 89 f7\ne8 35 05 00 00\n29 c5\n74 07\n89 e8\n5b\n41 5e\n5d\nc3\n8b 15 e8 33 21 00\n8b 0d e6 33 21 00\n48 89 df\n4c 89 f6\n5b\n41 5e\n5d\ne9 bf 7f 00 00\n'
p1440
S'.text:0000000000407160\n.text:0000000000407161\n.text:0000000000407163\n.text:0000000000407164\n.text:0000000000407167\n.text:000000000040716a\n.text:000000000040716d\n.text:0000000000407170\n.text:0000000000407174\n.text:0000000000407177\n.text:000000000040717c\n.text:000000000040717f\n.text:0000000000407186\n.text:0000000000407188\n.text:000000000040718b\n.text:0000000000407190\n.text:0000000000407195\n.text:0000000000407198\n.text:000000000040719d\n.text:00000000004071a0\n.text:00000000004071a7\n.text:00000000004071a9\n.text:00000000004071ac\n.text:00000000004071b1\n.text:00000000004071b3\n.text:00000000004071b6\n.text:00000000004071bb\n.text:00000000004071bd\n.text:00000000004071bf\n.text:00000000004071c1\n.text:00000000004071c2\n.text:00000000004071c4\n.text:00000000004071c5\n.text:00000000004071c6\n.text:00000000004071cc\n.text:00000000004071d2\n.text:00000000004071d5\n.text:00000000004071d8\n.text:00000000004071d9\n.text:00000000004071db\n.text:00000000004071dc\n'
p1441
tp1442
sS'xstrtoul'
p1443
(S'\n__stdcall xstrtoul(char * s, char * * ptr, ulong * val, char * valid_suffixes)\n'
p1444
V\u000astrtol_error xstrtoul(char *s,char **ptr,ulong *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  ulong local_48;\u000a  ulong *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)"\u000a                 );\u000a  }\u000a  local_40 = (ulong *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoul(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00410166;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00410166;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00410095_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00410073:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00410073;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00410147;\u000a  default:\u000aswitchD_00410095_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00410147;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00410147:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00410166:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p1445
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00410183\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00402430\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00402b30\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x0040ff80\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00410172\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00402a00\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x0040ffe0\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00410011\nCMP EAX,0x22\nJNZ 0x00410172\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x0041001c\nJMP 0x00410166\nTEST R12,R12\nJZ 0x00410172\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00410172\nMOV RDI,R12\nCALL 0x00402620\nTEST RAX,RAX\nJZ 0x00410172\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x0041001c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00410166\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00410166\nMOV RDI,R12\nCALL 0x00402620\nTEST RAX,RAX\nJZ 0x004100ae\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00402620\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00410073\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x0041007a\nCMP EAX,0x44\nJZ 0x0041007a\nCMP EAX,0x69\nJNZ 0x00410073\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00410084\nMOV EBP,0x1\nJMP 0x00410084\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x004100ae\nXOR EAX,EAX\nJMP qword ptr [0x414eb0 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x004101d0\nJMP 0x0041014c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00410172\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x004101d0\nJMP 0x0041014c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x004101d0\nJMP 0x0041014c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x004101d0\nJMP 0x0041014c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00410147\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x004101d0\nJMP 0x0041014c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x004101d0\nJMP 0x0041014c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x004101d0\nJMP 0x0041014c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x004101d0\nJMP 0x0041014c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00410147\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x004101a0\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x415060\nMOV ESI,0x415086\nMOV EDX,0x60\nMOV ECX,0x415096\nCALL 0x00402680\n'
p1446
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 d2 24 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 c3 2b ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 4c 2a ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 24 26 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 ec 25 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 da 25 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd b0 4e 41 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 60 50 41 00\nbe 86 50 41 00\nba 60 00 00 00\nb9 96 50 41 00\ne8 e4 24 ff ff\n'
p1447
S'.text:000000000040ff30\n.text:000000000040ff31\n.text:000000000040ff33\n.text:000000000040ff35\n.text:000000000040ff37\n.text:000000000040ff39\n.text:000000000040ff3a\n.text:000000000040ff3e\n.text:000000000040ff41\n.text:000000000040ff44\n.text:000000000040ff47\n.text:000000000040ff4a\n.text:000000000040ff4e\n.text:000000000040ff54\n.text:000000000040ff59\n.text:000000000040ff5e\n.text:000000000040ff61\n.text:000000000040ff68\n.text:000000000040ff6d\n.text:000000000040ff70\n.text:000000000040ff73\n.text:000000000040ff80\n.text:000000000040ff83\n.text:000000000040ff86\n.text:000000000040ff8b\n.text:000000000040ff8d\n.text:000000000040ff90\n.text:000000000040ff95\n.text:000000000040ff99\n.text:000000000040ff9e\n.text:000000000040ffa0\n.text:000000000040ffa6\n.text:000000000040ffa9\n.text:000000000040ffac\n.text:000000000040ffaf\n.text:000000000040ffb4\n.text:000000000040ffb8\n.text:000000000040ffbc\n.text:000000000040ffbf\n.text:000000000040ffc1\n.text:000000000040ffc4\n.text:000000000040ffc6\n.text:000000000040ffc8\n.text:000000000040ffcb\n.text:000000000040ffd1\n.text:000000000040ffd6\n.text:000000000040ffd9\n.text:000000000040ffdb\n.text:000000000040ffe0\n.text:000000000040ffe3\n.text:000000000040ffe9\n.text:000000000040ffec\n.text:000000000040ffee\n.text:000000000040fff4\n.text:000000000040fff7\n.text:000000000040fffc\n.text:000000000040ffff\n.text:0000000000410005\n.text:000000000041000d\n.text:000000000041000f\n.text:0000000000410011\n.text:0000000000410013\n.text:0000000000410016\n.text:000000000041001c\n.text:0000000000410020\n.text:0000000000410024\n.text:0000000000410026\n.text:000000000041002c\n.text:000000000041002f\n.text:0000000000410034\n.text:0000000000410037\n.text:0000000000410039\n.text:000000000041003e\n.text:0000000000410041\n.text:0000000000410046\n.text:000000000041004b\n.text:000000000041004e\n.text:0000000000410050\n.text:0000000000410054\n.text:0000000000410057\n.text:0000000000410059\n.text:000000000041005c\n.text:000000000041005e\n.text:0000000000410061\n.text:0000000000410063\n.text:0000000000410065\n.text:0000000000410069\n.text:000000000041006c\n.text:0000000000410071\n.text:0000000000410073\n.text:0000000000410078\n.text:000000000041007a\n.text:000000000041007f\n.text:0000000000410084\n.text:0000000000410088\n.text:000000000041008b\n.text:000000000041008e\n.text:0000000000410091\n.text:0000000000410093\n.text:0000000000410095\n.text:000000000041009c\n.text:000000000041009f\n.text:00000000004100a4\n.text:00000000004100a9\n.text:00000000004100ae\n.text:00000000004100b2\n.text:00000000004100b7\n.text:00000000004100ba\n.text:00000000004100bd\n.text:00000000004100c2\n.text:00000000004100c5\n.text:00000000004100ca\n.text:00000000004100cf\n.text:00000000004100d1\n.text:00000000004100d4\n.text:00000000004100d9\n.text:00000000004100de\n.text:00000000004100e0\n.text:00000000004100e3\n.text:00000000004100e8\n.text:00000000004100ed\n.text:00000000004100ef\n.text:00000000004100f2\n.text:00000000004100f7\n.text:00000000004100f9\n.text:00000000004100fc\n.text:0000000000410101\n.text:0000000000410106\n.text:0000000000410108\n.text:000000000041010b\n.text:0000000000410110\n.text:0000000000410115\n.text:0000000000410117\n.text:000000000041011a\n.text:000000000041011f\n.text:0000000000410124\n.text:0000000000410126\n.text:0000000000410129\n.text:000000000041012e\n.text:0000000000410133\n.text:0000000000410135\n.text:0000000000410138\n.text:000000000041013d\n.text:000000000041013f\n.text:0000000000410142\n.text:0000000000410147\n.text:000000000041014c\n.text:000000000041014e\n.text:0000000000410152\n.text:0000000000410156\n.text:000000000041015a\n.text:000000000041015c\n.text:000000000041015f\n.text:0000000000410163\n.text:0000000000410166\n.text:000000000041016a\n.text:000000000041016f\n.text:0000000000410172\n.text:0000000000410174\n.text:0000000000410178\n.text:0000000000410179\n.text:000000000041017b\n.text:000000000041017d\n.text:000000000041017f\n.text:0000000000410181\n.text:0000000000410182\n.text:0000000000410183\n.text:0000000000410188\n.text:000000000041018d\n.text:0000000000410192\n.text:0000000000410197\n'
p1448
tp1449
sS'timespec_cmp'
p1450
(S'\n__stdcall timespec_cmp()\n'
p1451
V\u000aint timespec_cmp(void)\u000a\u000a{\u000a  int in_ECX;\u000a  long in_RDX;\u000a  int in_ESI;\u000a  int iVar1;\u000a  long in_RDI;\u000a  \u000a  iVar1 = -1;\u000a  if ((in_RDX <= in_RDI) && (iVar1 = 1, in_RDI <= in_RDX)) {\u000a    iVar1 = in_ESI - in_ECX;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1452
S'MOV EAX,0xffffffff\nCMP RDI,RDX\nJL 0x004114c5\nMOV EAX,0x1\nJG 0x004114c5\nSUB ESI,ECX\nMOV EAX,ESI\nRET\n'
p1453
S'b8 ff ff ff ff\n48 39 d7\n7c 0b\nb8 01 00 00 00\n7f 04\n29 ce\n89 f0\nc3\n'
p1454
S'.text:00000000004114b0\n.text:00000000004114b5\n.text:00000000004114b8\n.text:00000000004114ba\n.text:00000000004114bf\n.text:00000000004114c1\n.text:00000000004114c3\n.text:00000000004114c5\n'
p1455
tp1456
sS'argmatch'
p1457
(S'\n__stdcall argmatch(char * arg, char * * arglist, char * vallist, size_t valsize)\n'
p1458
V\u000aptrdiff_t argmatch(char *arg,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  size_t __n;\u000a  size_t sVar4;\u000a  long lVar5;\u000a  ptrdiff_t pVar6;\u000a  char *__s2;\u000a  char *__s1;\u000a  long local_50;\u000a  \u000a  __n = strlen(arg);\u000a  __s1 = *arglist;\u000a  if (__s1 == (char *)0x0) {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a    lVar5 = 0;\u000a    __s2 = vallist;\u000a    do {\u000a      iVar3 = strncmp(__s1,arg,__n);\u000a      lVar2 = local_50;\u000a      if (iVar3 == 0) {\u000a        sVar4 = strlen(__s1);\u000a        if (sVar4 == __n) {\u000a          return lVar5;\u000a        }\u000a        lVar2 = lVar5;\u000a        if ((local_50 != -1) &&\u000a           ((vallist == (char *)0x0 ||\u000a            (iVar3 = memcmp(vallist + local_50 * valsize,__s2,valsize), lVar2 = local_50, iVar3 != 0\u000a            )))) {\u000a          bVar1 = true;\u000a          lVar2 = local_50;\u000a        }\u000a      }\u000a      local_50 = lVar2;\u000a      __s1 = arglist[lVar5 + 1];\u000a      lVar5 = lVar5 + 1;\u000a      __s2 = __s2 + valsize;\u000a    } while (__s1 != (char *)0x0);\u000a  }\u000a  pVar6 = -2;\u000a  if (!bVar1) {\u000a    pVar6 = local_50;\u000a  }\u000a  return pVar6;\u000a}\u000a\u000a
p1459
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x004025d0\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x20],RBP\nMOV R15,qword ptr [RBP]\nTEST R15,R15\nJZ 0x00409d67\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R14\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00402450\nTEST EAX,EAX\nJNZ 0x00409d50\nMOV RDI,R15\nCALL 0x004025d0\nCMP RAX,RBX\nJZ 0x00409d89\nCMP qword ptr [RSP + 0x8],-0x1\nJZ 0x00409d45\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x00409d3c\nMOV RDI,qword ptr [RSP + 0x8]\nIMUL RDI,R13\nADD RDI,RAX\nMOV RSI,R14\nMOV RDX,R13\nCALL 0x00402710\nTEST EAX,EAX\nJZ 0x00409d50\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00409d50\nMOV qword ptr [RSP + 0x8],RBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RAX + RBP*0x8 + 0x8]\nINC RBP\nADD R14,R13\nTEST R15,R15\nJNZ 0x00409cf0\nJMP 0x00409d77\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nTEST byte ptr [RSP + 0x10],0x1\nMOV RBP,-0x2\nCMOVZ RBP,qword ptr [RSP + 0x8]\nMOV RAX,RBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1460
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d6\n48 89 f5\n49 89 fc\ne8 11 89 ff ff\n48 89 c3\n48 89 6c 24 20\n4c 8b 7d 00\n4d 85 ff\n0f 84 93 00 00 00\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\n4c 89 74 24 18\n31 ed\n0f 1f 44 00 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 52 87 ff ff\n85 c0\n75 4e\n4c 89 ff\ne8 c6 88 ff ff\n48 39 d8\n74 7a\n48 83 7c 24 08 ff\n74 2e\n48 8b 44 24 18\n48 85 c0\n74 1b\n48 8b 7c 24 08\n49 0f af fd\n48 01 c7\n4c 89 f6\n4c 89 ea\ne8 d8 89 ff ff\n85 c0\n74 14\nb0 01\n48 89 44 24 10\neb 0b\n48 89 6c 24 08\n66 0f 1f 44 00 00\n48 8b 44 24 20\n4c 8b 7c e8 08\n48 ff c5\n4d 01 ee\n4d 85 ff\n75 8b\neb 10\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\nf6 44 24 10 01\n48 c7 c5 fe ff ff ff\n48 0f 44 6c 24 08\n48 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1461
S'.text:0000000000409ca0\n.text:0000000000409ca1\n.text:0000000000409ca3\n.text:0000000000409ca5\n.text:0000000000409ca7\n.text:0000000000409ca9\n.text:0000000000409caa\n.text:0000000000409cae\n.text:0000000000409cb1\n.text:0000000000409cb4\n.text:0000000000409cb7\n.text:0000000000409cba\n.text:0000000000409cbf\n.text:0000000000409cc2\n.text:0000000000409cc7\n.text:0000000000409ccb\n.text:0000000000409cce\n.text:0000000000409cd4\n.text:0000000000409cdd\n.text:0000000000409cdf\n.text:0000000000409ce4\n.text:0000000000409ce9\n.text:0000000000409ceb\n.text:0000000000409cf0\n.text:0000000000409cf3\n.text:0000000000409cf6\n.text:0000000000409cf9\n.text:0000000000409cfe\n.text:0000000000409d00\n.text:0000000000409d02\n.text:0000000000409d05\n.text:0000000000409d0a\n.text:0000000000409d0d\n.text:0000000000409d0f\n.text:0000000000409d15\n.text:0000000000409d17\n.text:0000000000409d1c\n.text:0000000000409d1f\n.text:0000000000409d21\n.text:0000000000409d26\n.text:0000000000409d2a\n.text:0000000000409d2d\n.text:0000000000409d30\n.text:0000000000409d33\n.text:0000000000409d38\n.text:0000000000409d3a\n.text:0000000000409d3c\n.text:0000000000409d3e\n.text:0000000000409d43\n.text:0000000000409d45\n.text:0000000000409d4a\n.text:0000000000409d50\n.text:0000000000409d55\n.text:0000000000409d5a\n.text:0000000000409d5d\n.text:0000000000409d60\n.text:0000000000409d63\n.text:0000000000409d65\n.text:0000000000409d67\n.text:0000000000409d70\n.text:0000000000409d72\n.text:0000000000409d77\n.text:0000000000409d7c\n.text:0000000000409d83\n.text:0000000000409d89\n.text:0000000000409d8c\n.text:0000000000409d90\n.text:0000000000409d91\n.text:0000000000409d93\n.text:0000000000409d95\n.text:0000000000409d97\n.text:0000000000409d99\n.text:0000000000409d9a\n'
p1462
tp1463
sS'randread_error'
p1464
(S'\n__stdcall randread_error(void * file_name)\n'
p1465
V\u000avoid randread_error(void *file_name)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  \u000a  iVar2 = exit_failure;\u000a  if (file_name != (void *)0x0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    pcVar5 = "%s: read error";\u000a    if (uVar1 == 0) {\u000a      pcVar5 = "%s: end of file";\u000a    }\u000a    uVar4 = dcgettext(0,pcVar5,5);\u000a    pcVar5 = quote((char *)file_name);\u000a    error((ulong)(uint)iVar2,(ulong)uVar1,uVar4,pcVar5);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1466
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040e776\nMOV R14D,dword ptr [0x0061a4e0]\nCALL 0x00402430\nMOV EBP,dword ptr [RAX]\nTEST EBP,EBP\nMOV EAX,0x414a96\nMOV ESI,0x414aa6\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004025b0\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x0040deb0\nMOV RCX,RAX\nXOR EAX,EAX\nMOV EDI,R14D\nMOV ESI,EBP\nMOV RDX,R15\nCALL 0x00402960\nCALL 0x00402420\n'
p1467
S'55\n41 57\n41 56\n53\n50\n48 89 fb\n48 85 db\n74 47\n44 8b 35 aa bd 20 00\ne8 f5 3c ff ff\n8b 28\n85 ed\nb8 96 4a 41 00\nbe a6 4a 41 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 57 3e ff ff\n49 89 c7\n48 89 df\ne8 4c f7 ff ff\n48 89 c1\n31 c0\n44 89 f7\n89 ee\n4c 89 fa\ne8 ea 41 ff ff\ne8 a5 3c ff ff\n'
p1468
S'.text:000000000040e720\n.text:000000000040e721\n.text:000000000040e723\n.text:000000000040e725\n.text:000000000040e726\n.text:000000000040e727\n.text:000000000040e72a\n.text:000000000040e72d\n.text:000000000040e72f\n.text:000000000040e736\n.text:000000000040e73b\n.text:000000000040e73d\n.text:000000000040e73f\n.text:000000000040e744\n.text:000000000040e749\n.text:000000000040e74d\n.text:000000000040e74f\n.text:000000000040e754\n.text:000000000040e759\n.text:000000000040e75c\n.text:000000000040e75f\n.text:000000000040e764\n.text:000000000040e767\n.text:000000000040e769\n.text:000000000040e76c\n.text:000000000040e76e\n.text:000000000040e771\n.text:000000000040e776\n'
p1469
tp1470
sS'queue_init'
p1471
(S'\n__stdcall queue_init(merge_node_queue * queue, size_t nthreads)\n'
p1472
V\u000avoid queue_init(merge_node_queue *queue,size_t nthreads)\u000a\u000a{\u000a  heap *phVar1;\u000a  \u000a  phVar1 = heap_alloc(compare_nodes,nthreads * 2);\u000a  queue->priority_queue = phVar1;\u000a  pthread_mutex_init((pthread_mutex_t *)queue->mutex,(pthread_mutexattr_t *)0x0);\u000a  (*(code *)PTR_pthread_cond_init_0061a240)(queue->cond,0);\u000a  return;\u000a}\u000a\u000a
p1473
S'PUSH RBX\nMOV RBX,RDI\nADD RSI,RSI\nMOV EDI,0x4093d0\nCALL 0x0040c0e0\nMOV qword ptr [RBX],RAX\nLEA RDI,[RBX + 0x8]\nXOR ESI,ESI\nCALL 0x00402ae0\nADD RBX,0x30\nXOR ESI,ESI\nMOV RDI,RBX\nPOP RBX\nJMP 0x00402820\n'
p1474
S'53\n48 89 fb\n48 01 f6\nbf d0 93 40 00\ne8 0f 31 00 00\n48 89 03\n48 8d 7b 08\n31 f6\ne8 01 9b ff ff\n48 83 c3 30\n31 f6\n48 89 df\n5b\ne9 32 98 ff ff\n'
p1475
S'.text:0000000000408fc0\n.text:0000000000408fc1\n.text:0000000000408fc4\n.text:0000000000408fc7\n.text:0000000000408fcc\n.text:0000000000408fd1\n.text:0000000000408fd4\n.text:0000000000408fd8\n.text:0000000000408fda\n.text:0000000000408fdf\n.text:0000000000408fe3\n.text:0000000000408fe5\n.text:0000000000408fe8\n.text:0000000000408fe9\n'
p1476
tp1477
sS'_obstack_newchunk'
p1478
(S'\n__stdcall _obstack_newchunk(obstack * h, size_t length)\n'
p1479
V\u000avoid _obstack_newchunk(obstack *h,size_t length)\u000a\u000a{\u000a  _obstack_chunk *old_chunk;\u000a  char *__dest;\u000a  ulong uVar1;\u000a  char *__src;\u000a  _obstack_chunk *p_Var2;\u000a  char *__n;\u000a  \u000a  old_chunk = h->chunk;\u000a  __n = h->next_free + -(long)h->object_base;\u000a  __dest = __n + length + h->alignment_mask;\u000a  uVar1 = ((ulong)__n >> 3) + 100;\u000a  __src = __dest + uVar1;\u000a  if (CARRY8(uVar1,(ulong)__dest)) {\u000a    __src = __dest;\u000a  }\u000a  if (__src < (char *)h->chunk_size) {\u000a    __src = (char *)h->chunk_size;\u000a  }\u000a  if ((!CARRY8(length,(ulong)__n)) && (CARRY8((ulong)(__n + length),h->alignment_mask) == false)) {\u000a    p_Var2 = (_obstack_chunk *)call_chunkfun(h,(size_t)__src);\u000a    if (p_Var2 != (_obstack_chunk *)0x0) goto LAB_00410ace;\u000a  }\u000a  (*obstack_alloc_failed_handler)();\u000a  p_Var2 = (_obstack_chunk *)0x0;\u000aLAB_00410ace:\u000a  h->chunk = p_Var2;\u000a  p_Var2->prev = old_chunk;\u000a  __src = (char *)((long)&p_Var2->limit + (long)__src);\u000a  h->chunk_limit = __src;\u000a  p_Var2->limit = __src;\u000a  __src = h->object_base;\u000a  uVar1 = h->alignment_mask;\u000a  __dest = (char *)((ulong)(p_Var2->contents + uVar1) & ~uVar1);\u000a  memcpy(__dest,__src,(size_t)__n);\u000a  if (((*(byte *)&h->use_extra_arg_bitfield & 2) == 0) &&\u000a     (__src == (char *)((ulong)(old_chunk->contents + uVar1) & ~uVar1))) {\u000a    p_Var2->prev = old_chunk->prev;\u000a    call_freefun(h,old_chunk);\u000a  }\u000a  h->object_base = __dest;\u000a  h->next_free = __n + (long)__dest;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield & 0xfd;\u000a  return;\u000a}\u000a\u000a
p1480
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,RDI\nMOV RCX,qword ptr [R12]\nMOV R15,qword ptr [R12 + 0x8]\nMOV R14,qword ptr [R12 + 0x18]\nSUB R14,qword ptr [R12 + 0x10]\nLEA RDX,[R14 + RSI*0x1]\nADD RDX,qword ptr [R12 + 0x30]\nSETC AL\nMOV RBX,R14\nSHR RBX,0x3\nADD RBX,0x64\nADD RBX,RDX\nCMOVC RBX,RDX\nCMP RBX,RCX\nCMOVC RBX,RCX\nADD RSI,R14\nJC 0x00410ac5\nTEST AL,AL\nJNZ 0x00410ac5\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00410b70\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00410ace\nCALL qword ptr [0x0061a540]\nXOR R13D,R13D\nMOV qword ptr [R12 + 0x8],R13\nMOV qword ptr [R13 + 0x8],R15\nADD RBX,R13\nMOV qword ptr [R12 + 0x20],RBX\nMOV qword ptr [R13],RBX\nMOV RSI,qword ptr [R12 + 0x10]\nMOV RBP,qword ptr [R12 + 0x30]\nLEA RBX,[RBP + R13*0x1 + 0x10]\nMOV qword ptr [RSP + 0x8],R15\nMOV R15,RBP\nNOT R15\nAND RBX,R15\nMOV RDI,RBX\nMOV qword ptr [RSP + 0x10],RSI\nMOV RDX,R14\nCALL 0x004027c0\nTEST byte ptr [R12 + 0x50],0x2\nJNZ 0x00410b41\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RAX,[RBP + RAX*0x1 + 0x10]\nAND RAX,R15\nCMP qword ptr [RSP + 0x10],RAX\nJNZ 0x00410b41\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [R13 + 0x8],RAX\nMOV RDI,R12\nCALL 0x00410b90\nMOV qword ptr [R12 + 0x10],RBX\nADD R14,RBX\nMOV qword ptr [R12 + 0x18],R14\nAND byte ptr [R12 + 0x50],0xfd\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1481
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 fc\n49 8b 0c 24\n4d 8b 7c 24 08\n4d 8b 74 24 18\n4d 2b 74 24 10\n49 8d 14 36\n49 03 54 24 30\n0f 92 c0\n4c 89 f3\n48 c1 eb 03\n48 83 c3 64\n48 01 d3\n48 0f 42 da\n48 39 cb\n48 0f 42 d9\n4c 01 f6\n72 17\n84 c0\n75 13\n4c 89 e7\n48 89 de\ne8 b3 00 00 00\n49 89 c5\n4d 85 ed\n75 09\nff 15 75 9a 20 00\n45 31 ed\n4d 89 6c 24 08\n4d 89 7d 08\n4c 01 eb\n49 89 5c 24 20\n49 89 5d 00\n49 8b 74 24 10\n49 8b 6c 24 30\n4a 8d 5c 2d 10\n4c 89 7c 24 08\n49 89 ef\n49 f7 d7\n4c 21 fb\n48 89 df\n48 89 74 24 10\n4c 89 f2\ne8 b0 1c ff ff\n41 f6 44 24 50 02\n75 29\n48 8b 44 24 08\n48 8d 44 05 10\n4c 21 f8\n48 39 44 24 10\n75 15\n48 8b 74 24 08\n48 8b 46 08\n49 89 45 08\n4c 89 e7\ne8 4f 00 00 00\n49 89 5c 24 10\n49 01 de\n4d 89 74 24 18\n41 80 64 24 50 fd\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1482
S'.text:0000000000410a60\n.text:0000000000410a61\n.text:0000000000410a63\n.text:0000000000410a65\n.text:0000000000410a67\n.text:0000000000410a69\n.text:0000000000410a6a\n.text:0000000000410a6e\n.text:0000000000410a71\n.text:0000000000410a75\n.text:0000000000410a7a\n.text:0000000000410a7f\n.text:0000000000410a84\n.text:0000000000410a88\n.text:0000000000410a8d\n.text:0000000000410a90\n.text:0000000000410a93\n.text:0000000000410a97\n.text:0000000000410a9b\n.text:0000000000410a9e\n.text:0000000000410aa2\n.text:0000000000410aa5\n.text:0000000000410aa9\n.text:0000000000410aac\n.text:0000000000410aae\n.text:0000000000410ab0\n.text:0000000000410ab2\n.text:0000000000410ab5\n.text:0000000000410ab8\n.text:0000000000410abd\n.text:0000000000410ac0\n.text:0000000000410ac3\n.text:0000000000410ac5\n.text:0000000000410acb\n.text:0000000000410ace\n.text:0000000000410ad3\n.text:0000000000410ad7\n.text:0000000000410ada\n.text:0000000000410adf\n.text:0000000000410ae3\n.text:0000000000410ae8\n.text:0000000000410aed\n.text:0000000000410af2\n.text:0000000000410af7\n.text:0000000000410afa\n.text:0000000000410afd\n.text:0000000000410b00\n.text:0000000000410b03\n.text:0000000000410b08\n.text:0000000000410b0b\n.text:0000000000410b10\n.text:0000000000410b16\n.text:0000000000410b18\n.text:0000000000410b1d\n.text:0000000000410b22\n.text:0000000000410b25\n.text:0000000000410b2a\n.text:0000000000410b2c\n.text:0000000000410b31\n.text:0000000000410b35\n.text:0000000000410b39\n.text:0000000000410b3c\n.text:0000000000410b41\n.text:0000000000410b46\n.text:0000000000410b49\n.text:0000000000410b4e\n.text:0000000000410b54\n.text:0000000000410b58\n.text:0000000000410b59\n.text:0000000000410b5b\n.text:0000000000410b5d\n.text:0000000000410b5f\n.text:0000000000410b61\n.text:0000000000410b62\n'
p1483
tp1484
sS'rpl_fcntl'
p1485
(S'\n__stdcall rpl_fcntl()\n'
p1486
V\u000a/* WARNING: Removing unreachable block (ram,0x0041072b) */\u000a/* WARNING: Removing unreachable block (ram,0x00410794) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x00410739 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1487
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x004106bb\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x00410716\nCMP EAX,0x28\nJA 0x0041072b\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00410739\nCMP EAX,0x28\nJA 0x00410794\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x004107a2\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x0061acc0],0x0\nJS 0x004107b3\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00402500\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00410784\nCALL 0x00402430\nCMP dword ptr [RAX],0x16\nJNZ 0x00410784\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00410670\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x00410816\nMOV dword ptr [0x0061acc0],R15D\nTEST EBP,EBP\nJNS 0x004107c7\nJMP 0x00410816\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x00402500\nMOV EBP,EAX\nJMP 0x00410816\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00410670\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00410816\nCMP dword ptr [0x0061acc0],-0x1\nJNZ 0x00410816\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x00402500\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x004107fc\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x00402500\nCMP EAX,-0x1\nJNZ 0x00410816\nCALL 0x00402430\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x004026c0\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1488
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d 7e a5 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 b0 1d ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 cf 1c ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d 35 a5 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 51 1d ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d f2 a4 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 22 1d ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 09 1d ff ff\n83 f8 ff\n75 1a\ne8 2f 1c ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 b2 1e ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1489
S'.text:0000000000410670\n.text:0000000000410671\n.text:0000000000410673\n.text:0000000000410675\n.text:0000000000410676\n.text:000000000041067d\n.text:0000000000410680\n.text:0000000000410682\n.text:0000000000410684\n.text:0000000000410689\n.text:000000000041068e\n.text:0000000000410693\n.text:000000000041069b\n.text:00000000004106a3\n.text:00000000004106ab\n.text:00000000004106b3\n.text:00000000004106bb\n.text:00000000004106c0\n.text:00000000004106c5\n.text:00000000004106ca\n.text:00000000004106cf\n.text:00000000004106d4\n.text:00000000004106d9\n.text:00000000004106e1\n.text:00000000004106e6\n.text:00000000004106ee\n.text:00000000004106f5\n.text:00000000004106f9\n.text:00000000004106ff\n.text:0000000000410701\n.text:0000000000410704\n.text:0000000000410706\n.text:000000000041070b\n.text:000000000041070e\n.text:0000000000410711\n.text:0000000000410714\n.text:0000000000410716\n.text:0000000000410719\n.text:000000000041071b\n.text:000000000041071e\n.text:0000000000410723\n.text:0000000000410726\n.text:0000000000410729\n.text:000000000041072b\n.text:0000000000410730\n.text:0000000000410734\n.text:0000000000410739\n.text:000000000041073b\n.text:0000000000410742\n.text:0000000000410744\n.text:0000000000410746\n.text:0000000000410749\n.text:000000000041074b\n.text:0000000000410750\n.text:0000000000410752\n.text:0000000000410758\n.text:000000000041075a\n.text:000000000041075c\n.text:0000000000410761\n.text:0000000000410764\n.text:0000000000410766\n.text:0000000000410768\n.text:000000000041076a\n.text:000000000041076d\n.text:000000000041076f\n.text:0000000000410774\n.text:0000000000410776\n.text:000000000041077c\n.text:000000000041077e\n.text:0000000000410784\n.text:000000000041078b\n.text:000000000041078d\n.text:000000000041078f\n.text:0000000000410794\n.text:0000000000410799\n.text:000000000041079d\n.text:00000000004107a2\n.text:00000000004107a5\n.text:00000000004107a7\n.text:00000000004107aa\n.text:00000000004107af\n.text:00000000004107b1\n.text:00000000004107b3\n.text:00000000004107b5\n.text:00000000004107b7\n.text:00000000004107ba\n.text:00000000004107bc\n.text:00000000004107c1\n.text:00000000004107c3\n.text:00000000004107c5\n.text:00000000004107c7\n.text:00000000004107ce\n.text:00000000004107d0\n.text:00000000004107d5\n.text:00000000004107d7\n.text:00000000004107d9\n.text:00000000004107de\n.text:00000000004107e0\n.text:00000000004107e2\n.text:00000000004107e4\n.text:00000000004107e7\n.text:00000000004107ec\n.text:00000000004107ee\n.text:00000000004107f0\n.text:00000000004107f2\n.text:00000000004107f7\n.text:00000000004107fa\n.text:00000000004107fc\n.text:0000000000410801\n.text:0000000000410804\n.text:0000000000410807\n.text:0000000000410809\n.text:000000000041080e\n.text:0000000000410811\n.text:0000000000410816\n.text:0000000000410818\n.text:000000000041081f\n.text:0000000000410820\n.text:0000000000410822\n.text:0000000000410824\n.text:0000000000410825\n'
p1490
tp1491
sS'__fpending'
p1492
(S'\n__stdcall __fpending()\n'
p1493
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0061a070)();\u000a  return;\u000a}\u000a\u000a
p1494
S'JMP qword ptr [0x0061a070]\n'
p1495
S'ff 25 ea 7b 21 00\n'
p1496
S'.plt:0000000000402480\n'
p1497
tp1498
sS'strchr'
p1499
(S'\n__stdcall strchr(char * __s, int __c)\n'
p1500
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0061a140)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1501
S'JMP qword ptr [0x0061a140]\n'
p1502
S'ff 25 1a 7b 21 00\n'
p1503
S'.plt:0000000000402620\n'
p1504
tp1505
sS'rpl_fclose'
p1506
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p1507
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00410659;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00410659:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p1508
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004027e0\nTEST EAX,EAX\nJS 0x00410659\nMOV RDI,RBX\nCALL 0x004028d0\nTEST EAX,EAX\nJZ 0x00410627\nMOV RDI,RBX\nCALL 0x004027e0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00402660\nCMP RAX,-0x1\nJZ 0x00410659\nMOV RDI,RBX\nCALL 0x00410830\nTEST EAX,EAX\nJZ 0x00410659\nCALL 0x00402430\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00402570\nTEST EBP,EBP\nJZ 0x00410652\nCALL 0x00402430\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00402570\n'
p1509
S'55\n53\n50\n48 89 fb\ne8 e5 21 ff ff\n85 c0\n78 5a\n48 89 df\ne8 c9 22 ff ff\n85 c0\n74 1c\n48 89 df\ne8 cd 21 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 3f 20 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 01 02 00 00\n85 c0\n74 26\ne8 f8 1d ff ff\n8b 28\n48 89 df\ne8 2e 1f ff ff\n85 ed\n74 0c\ne8 e5 1d ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 09 1f ff ff\n'
p1510
S'.text:00000000004105f0\n.text:00000000004105f1\n.text:00000000004105f2\n.text:00000000004105f3\n.text:00000000004105f6\n.text:00000000004105fb\n.text:00000000004105fd\n.text:00000000004105ff\n.text:0000000000410602\n.text:0000000000410607\n.text:0000000000410609\n.text:000000000041060b\n.text:000000000041060e\n.text:0000000000410613\n.text:0000000000410615\n.text:000000000041061a\n.text:000000000041061c\n.text:0000000000410621\n.text:0000000000410625\n.text:0000000000410627\n.text:000000000041062a\n.text:000000000041062f\n.text:0000000000410631\n.text:0000000000410633\n.text:0000000000410638\n.text:000000000041063a\n.text:000000000041063d\n.text:0000000000410642\n.text:0000000000410644\n.text:0000000000410646\n.text:000000000041064b\n.text:000000000041064d\n.text:0000000000410652\n.text:0000000000410656\n.text:0000000000410657\n.text:0000000000410658\n.text:0000000000410659\n.text:000000000041065c\n.text:0000000000410660\n.text:0000000000410661\n.text:0000000000410662\n'
p1511
tp1512
sS'fwrite_unlocked'
p1513
(S'\n__stdcall fwrite_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p1514
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_unlocked_0061a2a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1515
S'JMP qword ptr [0x0061a2a0]\n'
p1516
S'ff 25 ba 79 21 00\n'
p1517
S'.plt:00000000004028e0\n'
p1518
tp1519
sS'wait_proc'
p1520
(S'\n__stdcall wait_proc()\n'
p1521
V\u000avoid wait_proc(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = delete_proc();\u000a  if (_Var1 != false) {\u000a    reap();\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1522
S'PUSH RBX\nMOV EBX,EDI\nCALL 0x00408a90\nTEST AL,AL\nJZ 0x00408814\nMOV EDI,EBX\nPOP RBX\nJMP 0x00408ac0\nPOP RBX\nRET\n'
p1523
S'53\n89 fb\ne8 88 02 00 00\n84 c0\n74 08\n89 df\n5b\ne9 ac 02 00 00\n5b\nc3\n'
p1524
S'.text:0000000000408800\n.text:0000000000408801\n.text:0000000000408803\n.text:0000000000408808\n.text:000000000040880a\n.text:000000000040880c\n.text:000000000040880e\n.text:000000000040880f\n.text:0000000000408814\n.text:0000000000408815\n'
p1525
tp1526
sS'heap_remove_top'
p1527
(S'\n__stdcall heap_remove_top(heap * heap)\n'
p1528
V\u000avoid * heap_remove_top(heap *heap)\u000a\u000a{\u000a  size_t sVar1;\u000a  void **ppvVar2;\u000a  void *pvVar3;\u000a  \u000a  sVar1 = heap->count;\u000a  if (sVar1 == 0) {\u000a    pvVar3 = (void *)0x0;\u000a  }\u000a  else {\u000a    ppvVar2 = heap->array;\u000a    pvVar3 = ppvVar2[1];\u000a    heap->count = sVar1 - 1;\u000a    ppvVar2[1] = ppvVar2[sVar1];\u000a    heapify_down();\u000a  }\u000a  return pvVar3;\u000a}\u000a\u000a
p1529
S'PUSH RBX\nMOV RAX,qword ptr [RDI + 0x10]\nTEST RAX,RAX\nJZ 0x0040c276\nMOV RCX,qword ptr [RDI]\nMOV RBX,qword ptr [RCX + 0x8]\nLEA RDX,[RAX + -0x1]\nMOV qword ptr [RDI + 0x10],RDX\nMOV RAX,qword ptr [RCX + RAX*0x8]\nMOV qword ptr [RCX + 0x8],RAX\nMOV RAX,qword ptr [RDI]\nMOV RSI,qword ptr [RDI + 0x10]\nMOV RDX,qword ptr [RDI + 0x18]\nMOV RDI,RAX\nCALL 0x0040c280\nJMP 0x0040c278\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nRET\n'
p1530
S'53\n48 8b 47 10\n48 85 c0\n74 2c\n48 8b 0f\n48 8b 59 08\n48 8d 50 ff\n48 89 57 10\n48 8b 04 c1\n48 89 41 08\n48 8b 07\n48 8b 77 10\n48 8b 57 18\n48 89 c7\ne8 0c 00 00 00\neb 02\n31 db\n48 89 d8\n5b\nc3\n'
p1531
S'.text:000000000040c240\n.text:000000000040c241\n.text:000000000040c245\n.text:000000000040c248\n.text:000000000040c24a\n.text:000000000040c24d\n.text:000000000040c251\n.text:000000000040c255\n.text:000000000040c259\n.text:000000000040c25d\n.text:000000000040c261\n.text:000000000040c264\n.text:000000000040c268\n.text:000000000040c26c\n.text:000000000040c26f\n.text:000000000040c274\n.text:000000000040c276\n.text:000000000040c278\n.text:000000000040c27b\n.text:000000000040c27c\n'
p1532
tp1533
sS'xnrealloc'
p1534
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p1535
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1536
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x0040fbb4\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x0040fbc0\nPUSH RAX\nCALL 0x0040fd10\n'
p1537
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p1538
S'.text:000000000040fba0\n.text:000000000040fba3\n.text:000000000040fba6\n.text:000000000040fba9\n.text:000000000040fbab\n.text:000000000040fbaf\n.text:000000000040fbb2\n.text:000000000040fbb4\n.text:000000000040fbb5\n'
p1539
tp1540
sS'emit_bug_reporting_address'
p1541
(S'\n__stdcall emit_bug_reporting_address()\n'
p1542
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1543
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x414d75\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x414d8a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00402920\nXOR EDI,EDI\nMOV ESI,0x414da0\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x413689\nMOV ECX,0x41394f\nXOR EAX,EAX\nCALL 0x00402920\nXOR EDI,EDI\nMOV ESI,0x414db4\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00402730\n'
p1544
S'50\n31 ff\nbe 75 4d 41 00\nba 05 00 00 00\ne8 be 2a ff ff\n48 89 c1\nbf 01 00 00 00\nba 8a 4d 41 00\n31 c0\n48 89 ce\ne8 17 2e ff ff\n31 ff\nbe a0 4d 41 00\nba 05 00 00 00\ne8 96 2a ff ff\n48 89 c6\nbf 01 00 00 00\nba 89 36 41 00\nb9 4f 39 41 00\n31 c0\ne8 ed 2d ff ff\n31 ff\nbe b4 4d 41 00\nba 05 00 00 00\ne8 6c 2a ff ff\n48 8b 35 1d aa 20 00\n48 89 c7\n58\ne9 dc 2b ff ff\n'
p1545
S'.text:000000000040fae0\n.text:000000000040fae1\n.text:000000000040fae3\n.text:000000000040fae8\n.text:000000000040faed\n.text:000000000040faf2\n.text:000000000040faf5\n.text:000000000040fafa\n.text:000000000040faff\n.text:000000000040fb01\n.text:000000000040fb04\n.text:000000000040fb09\n.text:000000000040fb0b\n.text:000000000040fb10\n.text:000000000040fb15\n.text:000000000040fb1a\n.text:000000000040fb1d\n.text:000000000040fb22\n.text:000000000040fb27\n.text:000000000040fb2c\n.text:000000000040fb2e\n.text:000000000040fb33\n.text:000000000040fb35\n.text:000000000040fb3a\n.text:000000000040fb3f\n.text:000000000040fb44\n.text:000000000040fb4b\n.text:000000000040fb4e\n.text:000000000040fb4f\n'
p1546
tp1547
sS'xmalloc'
p1548
(S'\n__stdcall xmalloc(size_t n)\n'
p1549
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1550
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00402860\nTEST RBX,RBX\nJZ 0x0040fb93\nTEST RAX,RAX\nJZ 0x0040fb95\nPOP RBX\nRET\nCALL 0x0040fd10\n'
p1551
S'53\n48 89 fb\ne8 d7 2c ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p1552
S'.text:000000000040fb80\n.text:000000000040fb81\n.text:000000000040fb84\n.text:000000000040fb89\n.text:000000000040fb8c\n.text:000000000040fb8e\n.text:000000000040fb91\n.text:000000000040fb93\n.text:000000000040fb94\n.text:000000000040fb95\n'
p1553
tp1554
sS'merge'
p1555
(S'\n__stdcall merge(sortfile * files, size_t ntemps, size_t nfiles, char * output_file)\n'
p1556
V\u000avoid merge(sortfile *files,size_t ntemps,size_t nfiles,char *output_file)\u000a\u000a{\u000a  FILE **ppFVar1;\u000a  FILE *ofp;\u000a  int *piVar2;\u000a  tempnode *nfiles_00;\u000a  char *output_file_00;\u000a  tempnode *ntemps_00;\u000a  tempnode *nfiles_01;\u000a  sortfile *__src;\u000a  ulong uVar3;\u000a  sortfile *files_00;\u000a  tempnode **pptVar4;\u000a  long lVar5;\u000a  FILE *local_68;\u000a  sortfile *local_60;\u000a  char *local_58;\u000a  tempnode *local_50;\u000a  sortfile *local_48;\u000a  tempnode *local_40;\u000a  FILE *local_38;\u000a  \u000a  local_60 = files;\u000a  local_58 = output_file;\u000a  if ((ulong)nmerge < nfiles) {\u000a    local_48 = (sortfile *)&files->temp;\u000a    local_60 = files;\u000a    local_58 = output_file;\u000a    do {\u000a      ntemps_00 = (tempnode *)(ulong)nmerge;\u000a      if (nfiles < ntemps_00) {\u000a        uVar3 = 0;\u000a        lVar5 = 0;\u000a        local_50 = (tempnode *)nfiles;\u000a      }\u000a      else {\u000a        lVar5 = 0;\u000a        uVar3 = 0;\u000a        pptVar4 = (tempnode **)local_48;\u000a        local_50 = (tempnode *)nfiles;\u000a        do {\u000a          nfiles_00 = create_temp(&local_68);\u000a          nfiles_01 = (tempnode *)(ulong)nmerge;\u000a          ntemps_00 = nfiles_01;\u000a          if (ntemps < nfiles_01) {\u000a            ntemps_00 = (tempnode *)ntemps;\u000a          }\u000a          nfiles_01 = (tempnode *)\u000a                      mergefiles(local_60 + lVar5,(size_t)ntemps_00,(size_t)nfiles_01,local_68,\u000a                                 (char *)(tempnode *)nfiles_00->name);\u000a          ntemps_00 = nfiles_01;\u000a          if (ntemps < nfiles_01) {\u000a            ntemps_00 = (tempnode *)ntemps;\u000a          }\u000a          ntemps = ntemps - (long)ntemps_00;\u000a          pptVar4[-1] = (tempnode *)nfiles_00->name;\u000a          *pptVar4 = nfiles_00;\u000a          lVar5 = (long)&nfiles_01->next + lVar5;\u000a          uVar3 = uVar3 + 1;\u000a          ntemps_00 = (tempnode *)(ulong)nmerge;\u000a          nfiles = (long)local_50 - lVar5;\u000a          pptVar4 = pptVar4 + 2;\u000a        } while (ntemps_00 <= nfiles);\u000a      }\u000a      ntemps_00 = (tempnode *)((long)ntemps_00 - uVar3 % (ulong)ntemps_00);\u000a      nfiles_00 = (tempnode *)(nfiles - (long)ntemps_00);\u000a      files_00 = local_60;\u000a      if (ntemps_00 <= nfiles && nfiles_00 != (tempnode *)0x0) {\u000a        nfiles_00 = (tempnode *)((long)&nfiles_00->next + 1);\u000a        local_40 = create_temp(&local_68);\u000a        files_00 = local_60;\u000a        ntemps_00 = nfiles_00;\u000a        if (ntemps < nfiles_00) {\u000a          ntemps_00 = (tempnode *)ntemps;\u000a        }\u000a        output_file_00 = local_40->name;\u000a        nfiles_00 = (tempnode *)\u000a                    mergefiles(local_60 + lVar5,(size_t)ntemps_00,(size_t)nfiles_00,local_68,\u000a                               output_file_00);\u000a        ntemps_00 = nfiles_00;\u000a        if (ntemps < nfiles_00) {\u000a          ntemps_00 = (tempnode *)ntemps;\u000a        }\u000a        ntemps = ntemps - (long)ntemps_00;\u000a        files_00[uVar3].name = output_file_00;\u000a        files_00[uVar3].temp = local_40;\u000a        lVar5 = (long)&nfiles_00->next + lVar5;\u000a        uVar3 = uVar3 + 1;\u000a      }\u000a      ntemps_00 = local_50;\u000a      memmove(files_00 + uVar3,files_00 + lVar5,(long)((long)local_50 - lVar5) * 0x10);\u000a      ntemps = (long)&((tempnode *)ntemps)->next + uVar3;\u000a      nfiles = (long)ntemps_00 + (uVar3 - lVar5);\u000a    } while ((tempnode *)(ulong)nmerge < nfiles);\u000a  }\u000a  files_00 = local_60;\u000a  avoid_trashing_input(local_60,ntemps,nfiles,local_58);\u000a  local_48 = files_00 + 1;\u000a  do {\u000a    ntemps_00 = (tempnode *)open_input_files(files_00,nfiles,(FILE ***)&local_68);\u000a    if (ntemps_00 == (tempnode *)nfiles) {\u000a      ofp = stream_open(local_58,"w");\u000a      if (ofp != (FILE *)0x0) {\u000a        mergefps(files_00,ntemps,nfiles,ofp,local_58,(FILE **)local_68);\u000a        return;\u000a      }\u000a      piVar2 = __errno_location();\u000a      if ((ntemps_00 < (tempnode *)0x3) || (*piVar2 != 0x18)) {\u000a        output_file_00 = (char *)dcgettext(0,"open failed",5);\u000a                    /* WARNING: Subroutine does not return */\u000a        die(output_file_00,local_58);\u000a      }\u000a    }\u000a    else {\u000a      if (ntemps_00 < (tempnode *)0x3) {\u000a        output_file_00 = (char *)dcgettext(0,"open failed",5);\u000a                    /* WARNING: Subroutine does not return */\u000a        die(output_file_00,files_00[(long)ntemps_00].name);\u000a      }\u000a    }\u000a    ofp = local_68;\u000a    __src = files_00 + (long)ntemps_00;\u000a    local_50 = (tempnode *)nfiles;\u000a    do {\u000a      ppFVar1 = (FILE **)(&ofp->__pad1 + (long)ntemps_00);\u000a      ntemps_00 = (tempnode *)&ntemps_00[-1].field_0xf;\u000a      files_00 = __src + -1;\u000a      __src = __src + -1;\u000a      xfclose(*ppFVar1,files_00->name);\u000a      nfiles_00 = maybe_create_temp(&local_38);\u000a      files_00 = local_60;\u000a    } while (nfiles_00 == (tempnode *)0x0);\u000a    local_40 = ntemps_00;\u000a    if (ntemps < ntemps_00) {\u000a      local_40 = (tempnode *)ntemps;\u000a    }\u000a    mergefps(local_60,(size_t)local_40,(size_t)ntemps_00,local_38,nfiles_00->name,(FILE **)local_68)\u000a    ;\u000a    files_00->name = nfiles_00->name;\u000a    files_00->temp = nfiles_00;\u000a    ntemps_00 = (tempnode *)((long)local_50 - (long)ntemps_00);\u000a    memmove(local_48,__src,(long)ntemps_00 * 0x10);\u000a    ntemps = ntemps + (1 - (long)local_40);\u000a    nfiles = (long)&ntemps_00->next + 1;\u000a  } while( true );\u000a}\u000a\u000a
p1557
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV qword ptr [RSP + 0x10],RCX\nMOV R8,RDX\nMOV R14,RSI\nMOV EAX,dword ptr [0x0061a3f0]\nCMP RAX,R8\nMOV qword ptr [RSP + 0x8],RDI\nJNC 0x0040574b\nLEA RAX,[RDI + 0x8]\nMOV qword ptr [RSP + 0x20],RAX\nMOV RSI,RSP\nNOP dword ptr [RAX]\nMOV R12,R14\nMOV ECX,dword ptr [0x0061a3f0]\nCMP RCX,R8\nMOV qword ptr [RSP + 0x18],R8\nJBE 0x00405600\nXOR R13D,R13D\nXOR R15D,R15D\nMOV RBP,R8\nJMP 0x0040567e\nMOV R14,qword ptr [RSP + 0x20]\nXOR R15D,R15D\nXOR R13D,R13D\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,RSP\nCALL 0x00407b80\nMOV RBP,RAX\nMOV RDI,R15\nSHL RDI,0x4\nADD RDI,qword ptr [RSP + 0x8]\nMOV EDX,dword ptr [0x0061a3f0]\nCMP R12,RDX\nMOV RSI,RDX\nCMOVC RSI,R12\nMOV RCX,qword ptr [RSP]\nLEA RBX,[RBP + 0xd]\nMOV R8,RBX\nCALL 0x00407b90\nMOV RSI,RSP\nMOV R8,qword ptr [RSP + 0x18]\nCMP R12,RAX\nMOV RCX,RAX\nCMOVC RCX,R12\nSUB R12,RCX\nMOV qword ptr [R14 + -0x8],RBX\nMOV qword ptr [R14],RBP\nADD R15,RAX\nINC R13\nMOV ECX,dword ptr [0x0061a3f0]\nMOV RBP,R8\nSUB RBP,R15\nADD R14,0x10\nCMP RCX,RBP\nJBE 0x00405610\nMOV R14,R12\nXOR EDX,EDX\nMOV RAX,R13\nDIV RCX\nSUB RCX,RDX\nSUB RBP,RCX\nMOV RBX,R13\nJBE 0x00405700\nINC RBP\nMOV RDI,RSI\nCALL 0x00407b80\nMOV qword ptr [RSP + 0x28],RAX\nMOV RDI,R15\nSHL RDI,0x4\nMOV R13,qword ptr [RSP + 0x8]\nADD RDI,R13\nCMP R14,RBP\nMOV RSI,RBP\nCMOVC RSI,R14\nMOV RCX,qword ptr [RSP]\nLEA R12,[RAX + 0xd]\nMOV RDX,RBP\nMOV R8,R12\nCALL 0x00407b90\nMOV R8,qword ptr [RSP + 0x18]\nCMP R14,RAX\nMOV RCX,RAX\nCMOVC RCX,R14\nSUB R14,RCX\nMOV RCX,RBX\nSHL RCX,0x4\nMOV qword ptr [R13 + RCX*0x1],R12\nINC RBX\nMOV RDX,qword ptr [RSP + 0x28]\nMOV qword ptr [R13 + RCX*0x1 + 0x8],RDX\nADD R15,RAX\nJMP 0x00405705\nMOV R13,qword ptr [RSP + 0x8]\nMOV RDI,RBX\nSHL RDI,0x4\nADD RDI,R13\nMOV RSI,R15\nSHL RSI,0x4\nADD RSI,R13\nMOV RDX,R8\nSUB RDX,R15\nSHL RDX,0x4\nMOV RBP,R8\nCALL 0x00402940\nADD R14,RBX\nADD RBX,RBP\nSUB RBX,R15\nMOV EAX,dword ptr [0x0061a3f0]\nCMP RAX,RBX\nMOV R8,RBX\nMOV RSI,RSP\nJC 0x004055d0\nJMP 0x0040574e\nMOV RBX,R8\nMOV R15,qword ptr [RSP + 0x8]\nMOV RDI,R15\nMOV RSI,R14\nMOV RDX,RBX\nMOV RCX,qword ptr [RSP + 0x10]\nCALL 0x00407c10\nLEA RAX,[R15 + 0x10]\nMOV qword ptr [RSP + 0x20],RAX\nLEA R12,[RSP + 0x30]\nJMP 0x004057ee\nCMP R14,R13\nMOV RSI,R13\nCMOVC RSI,R14\nMOV qword ptr [RSP + 0x28],RSI\nMOV RCX,qword ptr [RSP + 0x30]\nMOV RBX,R15\nADD RBX,0xd\nMOV R9,qword ptr [RSP]\nMOV R12,R14\nMOV R14,qword ptr [RSP + 0x8]\nMOV RDI,R14\nMOV RDX,R13\nMOV R8,RBX\nCALL 0x00407e00\nMOV qword ptr [R14],RBX\nMOV qword ptr [R14 + 0x8],R15\nMOV R15,R14\nMOV R14,R12\nLEA R12,[RSP + 0x30]\nMOV RBX,qword ptr [RSP + 0x18]\nSUB RBX,R13\nMOV RDX,RBX\nSHL RDX,0x4\nMOV RDI,qword ptr [RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00402940\nINC R14\nSUB R14,qword ptr [RSP + 0x28]\nINC RBX\nMOV RDI,R15\nMOV RSI,RBX\nMOV RDX,RSP\nCALL 0x00407d70\nMOV R13,RAX\nCMP R13,RBX\nJNZ 0x00405840\nMOV ESI,0x413f56\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00406540\nTEST RAX,RAX\nJNZ 0x00405894\nCALL 0x00402430\nCMP R13,0x3\nJC 0x004058bd\nCMP dword ptr [RAX],0x18\nJZ 0x0040584a\nJMP 0x004058bd\nCMP R13,0x2\nJBE 0x004058db\nMOV qword ptr [RSP + 0x18],RBX\nMOV RBX,qword ptr [RSP]\nMOV RBP,R13\nSHL RBP,0x4\nADD RBP,R15\nNOP dword ptr [RAX]\nMOV RDI,qword ptr [RBX + R13*0x8 + -0x8]\nDEC R13\nMOV RSI,qword ptr [RBP + -0x10]\nADD RBP,-0x10\nCALL 0x004064c0\nXOR ESI,ESI\nCMP R13,0x2\nSETA SIL\nMOV RDI,R12\nCALL 0x004085b0\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00405860\nJMP 0x00405780\nMOV R9,qword ptr [RSP]\nMOV RDI,R15\nMOV RSI,R14\nMOV RDX,RBX\nMOV RCX,RAX\nMOV R8,qword ptr [RSP + 0x10]\nCALL 0x00407e00\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x413e0b\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDI,RAX\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00405c70\nXOR EDI,EDI\nMOV ESI,0x413e0b\nMOV EDX,0x5\nCALL 0x004025b0\nSHL R13,0x4\nMOV RSI,qword ptr [R15 + R13*0x1]\nMOV RDI,RAX\nCALL 0x00405c70\n'
p1558
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 4c 24 10\n49 89 d0\n49 89 f6\n8b 05 41 4e 21 00\n4c 39 c0\n48 89 7c 24 08\n0f 83 8e 01 00 00\n48 8d 47 08\n48 89 44 24 20\n48 89 e6\n0f 1f 80 00 00 00 00\n4d 89 f4\n8b 0d 17 4e 21 00\n4c 39 c1\n4c 89 44 24 18\n76 1d\n45 31 ed\n45 31 ff\n4c 89 c5\ne9 8d 00 00 00\n4c 8b 74 24 20\n45 31 ff\n45 31 ed\n0f 1f 44 00 00\n48 89 e7\ne8 68 25 00 00\n48 89 c5\n4c 89 ff\n48 c1 e7 04\n48 03 7c 24 08\n8b 15 c3 4d 21 00\n49 39 d4\n48 89 d6\n49 0f 42 f4\n48 8b 0c 24\n48 8d 5d 0d\n49 89 d8\ne8 49 25 00 00\n48 89 e6\n4c 8b 44 24 18\n49 39 c4\n48 89 c1\n49 0f 42 cc\n49 29 cc\n49 89 5e f8\n49 89 2e\n49 01 c7\n49 ff c5\n8b 0d 81 4d 21 00\n4c 89 c5\n4c 29 fd\n49 83 c6 10\n48 39 e9\n76 92\n4d 89 e6\n31 d2\n4c 89 e8\n48 f7 f1\n48 29 d1\n48 29 cd\n4c 89 eb\n76 6c\n48 ff c5\n48 89 f7\ne8 e1 24 00 00\n48 89 44 24 28\n4c 89 ff\n48 c1 e7 04\n4c 8b 6c 24 08\n4c 01 ef\n49 39 ee\n48 89 ee\n49 0f 42 f6\n48 8b 0c 24\n4c 8d 60 0d\n48 89 ea\n4d 89 e0\ne8 c0 24 00 00\n4c 8b 44 24 18\n49 39 c6\n48 89 c1\n49 0f 42 ce\n49 29 ce\n48 89 d9\n48 c1 e1 04\n4d 89 64 0d 00\n48 ff c3\n48 8b 54 24 28\n49 89 54 0d 08\n49 01 c7\neb 05\n4c 8b 6c 24 08\n48 89 df\n48 c1 e7 04\n4c 01 ef\n4c 89 fe\n48 c1 e6 04\n4c 01 ee\n4c 89 c2\n4c 29 fa\n48 c1 e2 04\n4c 89 c5\ne8 15 d2 ff ff\n49 01 de\n48 01 eb\n4c 29 fb\n8b 05 b6 4c 21 00\n48 39 d8\n49 89 d8\n48 89 e6\n0f 82 87 fe ff ff\neb 03\n4c 89 c3\n4c 8b 7c 24 08\n4c 89 ff\n4c 89 f6\n48 89 da\n48 8b 4c 24 10\ne8 aa 24 00 00\n49 8d 47 10\n48 89 44 24 20\n4c 8d 64 24 30\neb 78\n4d 39 ee\n4c 89 ee\n49 0f 42 f6\n48 89 74 24 28\n48 8b 4c 24 30\n4c 89 fb\n48 83 c3 0d\n4c 8b 0c 24\n4d 89 f4\n4c 8b 74 24 08\n4c 89 f7\n4c 89 ea\n49 89 d8\ne8 4b 26 00 00\n49 89 1e\n4d 89 7e 08\n4d 89 f7\n4d 89 e6\n4c 8d 64 24 30\n48 8b 5c 24 18\n4c 29 eb\n48 89 da\n48 c1 e2 04\n48 8b 7c 24 20\n48 89 ee\ne8 5d d1 ff ff\n49 ff c6\n4c 2b 74 24 28\n48 ff c3\n4c 89 ff\n48 89 de\n48 89 e2\ne8 74 25 00 00\n49 89 c5\n49 39 dd\n75 3c\nbe 56 3f 41 00\n48 8b 7c 24 10\ne8 2d 0d 00 00\n48 85 c0\n75 7c\ne8 13 cc ff ff\n49 83 fd 03\n0f 82 96 00 00 00\n83 38 18\n74 1e\ne9 8c 00 00 00\n49 83 fd 02\n0f 86 91 00 00 00\n48 89 5c 24 18\n48 8b 1c 24\n4c 89 ed\n48 c1 e5 04\n4c 01 fd\n0f 1f 00\n4a 8b 7c eb f8\n49 ff cd\n48 8b 75 f0\n48 83 c5 f0\ne8 4b 0c 00 00\n31 f6\n49 83 fd 02\n40 0f 97 c6\n4c 89 e7\ne8 29 2d 00 00\n49 89 c7\n4d 85 ff\n74 d1\ne9 ec fe ff ff\n4c 8b 0c 24\n4c 89 ff\n4c 89 f6\n48 89 da\n48 89 c1\n4c 8b 44 24 10\ne8 52 25 00 00\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe 0b 3e 41 00\nba 05 00 00 00\ne8 e2 cc ff ff\n48 89 c7\n48 8b 74 24 10\ne8 95 03 00 00\n31 ff\nbe 0b 3e 41 00\nba 05 00 00 00\ne8 c4 cc ff ff\n49 c1 e5 04\n4b 8b 34 2f\n48 89 c7\ne8 74 03 00 00\n'
p1559
S'.text:0000000000405590\n.text:0000000000405591\n.text:0000000000405593\n.text:0000000000405595\n.text:0000000000405597\n.text:0000000000405599\n.text:000000000040559a\n.text:000000000040559e\n.text:00000000004055a3\n.text:00000000004055a6\n.text:00000000004055a9\n.text:00000000004055af\n.text:00000000004055b2\n.text:00000000004055b7\n.text:00000000004055bd\n.text:00000000004055c1\n.text:00000000004055c6\n.text:00000000004055c9\n.text:00000000004055d0\n.text:00000000004055d3\n.text:00000000004055d9\n.text:00000000004055dc\n.text:00000000004055e1\n.text:00000000004055e3\n.text:00000000004055e6\n.text:00000000004055e9\n.text:00000000004055ec\n.text:0000000000405600\n.text:0000000000405605\n.text:0000000000405608\n.text:000000000040560b\n.text:0000000000405610\n.text:0000000000405613\n.text:0000000000405618\n.text:000000000040561b\n.text:000000000040561e\n.text:0000000000405622\n.text:0000000000405627\n.text:000000000040562d\n.text:0000000000405630\n.text:0000000000405633\n.text:0000000000405637\n.text:000000000040563b\n.text:000000000040563f\n.text:0000000000405642\n.text:0000000000405647\n.text:000000000040564a\n.text:000000000040564f\n.text:0000000000405652\n.text:0000000000405655\n.text:0000000000405659\n.text:000000000040565c\n.text:0000000000405660\n.text:0000000000405663\n.text:0000000000405666\n.text:0000000000405669\n.text:000000000040566f\n.text:0000000000405672\n.text:0000000000405675\n.text:0000000000405679\n.text:000000000040567c\n.text:000000000040567e\n.text:0000000000405681\n.text:0000000000405683\n.text:0000000000405686\n.text:0000000000405689\n.text:000000000040568c\n.text:000000000040568f\n.text:0000000000405692\n.text:0000000000405694\n.text:0000000000405697\n.text:000000000040569a\n.text:000000000040569f\n.text:00000000004056a4\n.text:00000000004056a7\n.text:00000000004056ab\n.text:00000000004056b0\n.text:00000000004056b3\n.text:00000000004056b6\n.text:00000000004056b9\n.text:00000000004056bd\n.text:00000000004056c1\n.text:00000000004056c5\n.text:00000000004056c8\n.text:00000000004056cb\n.text:00000000004056d0\n.text:00000000004056d5\n.text:00000000004056d8\n.text:00000000004056db\n.text:00000000004056df\n.text:00000000004056e2\n.text:00000000004056e5\n.text:00000000004056e9\n.text:00000000004056ee\n.text:00000000004056f1\n.text:00000000004056f6\n.text:00000000004056fb\n.text:00000000004056fe\n.text:0000000000405700\n.text:0000000000405705\n.text:0000000000405708\n.text:000000000040570c\n.text:000000000040570f\n.text:0000000000405712\n.text:0000000000405716\n.text:0000000000405719\n.text:000000000040571c\n.text:000000000040571f\n.text:0000000000405723\n.text:0000000000405726\n.text:000000000040572b\n.text:000000000040572e\n.text:0000000000405731\n.text:0000000000405734\n.text:000000000040573a\n.text:000000000040573d\n.text:0000000000405740\n.text:0000000000405743\n.text:0000000000405749\n.text:000000000040574b\n.text:000000000040574e\n.text:0000000000405753\n.text:0000000000405756\n.text:0000000000405759\n.text:000000000040575c\n.text:0000000000405761\n.text:0000000000405766\n.text:000000000040576a\n.text:000000000040576f\n.text:0000000000405774\n.text:0000000000405780\n.text:0000000000405783\n.text:0000000000405786\n.text:000000000040578a\n.text:000000000040578f\n.text:0000000000405794\n.text:0000000000405797\n.text:000000000040579b\n.text:000000000040579f\n.text:00000000004057a2\n.text:00000000004057a7\n.text:00000000004057aa\n.text:00000000004057ad\n.text:00000000004057b0\n.text:00000000004057b5\n.text:00000000004057b8\n.text:00000000004057bc\n.text:00000000004057bf\n.text:00000000004057c2\n.text:00000000004057c7\n.text:00000000004057cc\n.text:00000000004057cf\n.text:00000000004057d2\n.text:00000000004057d6\n.text:00000000004057db\n.text:00000000004057de\n.text:00000000004057e3\n.text:00000000004057e6\n.text:00000000004057eb\n.text:00000000004057ee\n.text:00000000004057f1\n.text:00000000004057f4\n.text:00000000004057f7\n.text:00000000004057fc\n.text:00000000004057ff\n.text:0000000000405802\n.text:0000000000405804\n.text:0000000000405809\n.text:000000000040580e\n.text:0000000000405813\n.text:0000000000405816\n.text:0000000000405818\n.text:000000000040581d\n.text:0000000000405821\n.text:0000000000405827\n.text:000000000040582a\n.text:000000000040582c\n.text:0000000000405840\n.text:0000000000405844\n.text:000000000040584a\n.text:000000000040584f\n.text:0000000000405853\n.text:0000000000405856\n.text:000000000040585a\n.text:000000000040585d\n.text:0000000000405860\n.text:0000000000405865\n.text:0000000000405868\n.text:000000000040586c\n.text:0000000000405870\n.text:0000000000405875\n.text:0000000000405877\n.text:000000000040587b\n.text:000000000040587f\n.text:0000000000405882\n.text:0000000000405887\n.text:000000000040588a\n.text:000000000040588d\n.text:000000000040588f\n.text:0000000000405894\n.text:0000000000405898\n.text:000000000040589b\n.text:000000000040589e\n.text:00000000004058a1\n.text:00000000004058a4\n.text:00000000004058a9\n.text:00000000004058ae\n.text:00000000004058b2\n.text:00000000004058b3\n.text:00000000004058b5\n.text:00000000004058b7\n.text:00000000004058b9\n.text:00000000004058bb\n.text:00000000004058bc\n.text:00000000004058bd\n.text:00000000004058bf\n.text:00000000004058c4\n.text:00000000004058c9\n.text:00000000004058ce\n.text:00000000004058d1\n.text:00000000004058d6\n.text:00000000004058db\n.text:00000000004058dd\n.text:00000000004058e2\n.text:00000000004058e7\n.text:00000000004058ec\n.text:00000000004058f0\n.text:00000000004058f4\n.text:00000000004058f7\n'
p1560
tp1561
sS'quotearg_char_mem'
p1562
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p1563
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1564
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0061abb0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0061aba0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061ab90]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0061ab80]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x0040cad0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x0040d9c0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1565
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d c8 ce 20 00\n48 89 4c 24 30\n0f 10 05 ac ce 20 00\n0f 29 44 24 20\n0f 10 05 90 ce 20 00\n0f 29 44 24 10\n0f 10 05 74 ce 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p1566
S'.text:000000000040dcd0\n.text:000000000040dcd2\n.text:000000000040dcd4\n.text:000000000040dcd5\n.text:000000000040dcd9\n.text:000000000040dcdb\n.text:000000000040dcde\n.text:000000000040dce1\n.text:000000000040dce8\n.text:000000000040dced\n.text:000000000040dcf4\n.text:000000000040dcf9\n.text:000000000040dd00\n.text:000000000040dd05\n.text:000000000040dd0c\n.text:000000000040dd10\n.text:000000000040dd13\n.text:000000000040dd18\n.text:000000000040dd1b\n.text:000000000040dd1d\n.text:000000000040dd22\n.text:000000000040dd24\n.text:000000000040dd27\n.text:000000000040dd2a\n.text:000000000040dd2d\n.text:000000000040dd32\n.text:000000000040dd36\n.text:000000000040dd37\n.text:000000000040dd39\n.text:000000000040dd3b\n'
p1567
tp1568
sS'mbsnwidth'
p1569
(S'\n__stdcall mbsnwidth(char * string, size_t nbytes)\n'
p1570
V\u000aint mbsnwidth(char *string,size_t nbytes)\u000a\u000a{\u000a  byte *pbVar1;\u000a  byte bVar2;\u000a  int iVar3;\u000a  size_t sVar4;\u000a  ushort **ppuVar5;\u000a  ulong uVar6;\u000a  byte *pbVar7;\u000a  ulong in_RDX;\u000a  int iVar8;\u000a  uint uVar9;\u000a  bool bVar10;\u000a  wint_t local_48;\u000a  uint local_44;\u000a  uint local_40;\u000a  uint local_3c;\u000a  mbstate_t local_38;\u000a  \u000a  pbVar1 = (byte *)(string + nbytes);\u000a  sVar4 = __ctype_get_mb_cur_max();\u000a  if (sVar4 < 2) {\u000a    iVar3 = 0;\u000aLAB_0040c650:\u000a    do {\u000a      pbVar7 = (byte *)string;\u000a      if (pbVar1 <= pbVar7) {\u000a        return iVar3;\u000a      }\u000a      bVar2 = *pbVar7;\u000a      ppuVar5 = __ctype_b_loc();\u000a      if (((*ppuVar5)[(ulong)bVar2] & 0x4000) == 0) {\u000a        if ((in_RDX & 2) != 0) {\u000a          return -1;\u000a        }\u000a        string = (char *)(pbVar7 + 1);\u000a        if (((*ppuVar5)[(ulong)bVar2] & 2) != 0) goto LAB_0040c650;\u000a      }\u000a      bVar10 = iVar3 != 0x7fffffff;\u000a      iVar3 = iVar3 + 1;\u000a      iVar8 = 0x7fffffff;\u000a      string = (char *)(pbVar7 + 1);\u000a    } while (bVar10);\u000a  }\u000a  else {\u000a    if ((long)nbytes < 1) {\u000a      iVar8 = 0;\u000a    }\u000a    else {\u000a      local_44 = (uint)in_RDX & 2;\u000a      uVar9 = (uint)in_RDX & 1;\u000a      local_3c = uVar9 ^ 1;\u000a      local_40 = uVar9 * 4 ^ 5;\u000a      iVar8 = 0;\u000a      do {\u000a        switch(*string) {\u000a        case ' ':\u000a        case '!':\u000a        case '\u005c"':\u000a        case '#':\u000a        case '%':\u000a        case '&':\u000a        case '\u005c'':\u000a        case '(':\u000a        case ')':\u000a        case '*':\u000a        case '+':\u000a        case ',':\u000a        case '-':\u000a        case '.':\u000a        case '/':\u000a        case '0':\u000a        case '1':\u000a        case '2':\u000a        case '3':\u000a        case '4':\u000a        case '5':\u000a        case '6':\u000a        case '7':\u000a        case '8':\u000a        case '9':\u000a        case ':':\u000a        case ';':\u000a        case '<':\u000a        case '=':\u000a        case '>':\u000a        case '?':\u000a        case 'A':\u000a        case 'B':\u000a        case 'C':\u000a        case 'D':\u000a        case 'E':\u000a        case 'F':\u000a        case 'G':\u000a        case 'H':\u000a        case 'I':\u000a        case 'J':\u000a        case 'K':\u000a        case 'L':\u000a        case 'M':\u000a        case 'N':\u000a        case 'O':\u000a        case 'P':\u000a        case 'Q':\u000a        case 'R':\u000a        case 'S':\u000a        case 'T':\u000a        case 'U':\u000a        case 'V':\u000a        case 'W':\u000a        case 'X':\u000a        case 'Y':\u000a        case 'Z':\u000a        case '[':\u000a        case '\u005c\u005c':\u000a        case ']':\u000a        case '^':\u000a        case '_':\u000a        case 'a':\u000a        case 'b':\u000a        case 'c':\u000a        case 'd':\u000a        case 'e':\u000a        case 'f':\u000a        case 'g':\u000a        case 'h':\u000a        case 'i':\u000a        case 'j':\u000a        case 'k':\u000a        case 'l':\u000a        case 'm':\u000a        case 'n':\u000a        case 'o':\u000a        case 'p':\u000a        case 'q':\u000a        case 'r':\u000a        case 's':\u000a        case 't':\u000a        case 'u':\u000a        case 'v':\u000a        case 'w':\u000a        case 'x':\u000a        case 'y':\u000a        case 'z':\u000a        case '{':\u000a        case '|':\u000a        case '}':\u000a        case '~':\u000a          string = (char *)((byte *)string + 1);\u000a          iVar8 = iVar8 + 1;\u000a          break;\u000a        default:\u000a          local_38 = (mbstate_t)0x0;\u000a          do {\u000a            sVar4 = mbrtowc((wchar_t *)&local_48,string,(size_t)(pbVar1 + -(long)string),&local_38);\u000a            if (sVar4 == 0xfffffffffffffffe) {\u000a              iVar8 = iVar8 + local_3c;\u000a              if ((in_RDX & 1) == 0) {\u000a                string = (char *)pbVar1;\u000a              }\u000a              uVar6 = (ulong)local_40;\u000a            }\u000a            else {\u000a              if (sVar4 == 0) {\u000a                sVar4 = 1;\u000a              }\u000a              else {\u000a                if (sVar4 == 0xffffffffffffffff) {\u000a                  uVar6 = 1;\u000a                  if ((in_RDX & 1) == 0) {\u000a                    string = (char *)((byte *)string + 1);\u000a                    iVar8 = iVar8 + 1;\u000a                    uVar6 = 5;\u000a                  }\u000a                  goto LAB_0040c5f5;\u000a                }\u000a              }\u000a              iVar3 = wcwidth(local_48);\u000a              if (iVar3 < 0) {\u000a                uVar6 = 1;\u000a                if (local_44 == 0) {\u000a                  iVar3 = iswcntrl(local_48);\u000a                  if (iVar3 == 0) {\u000a                    if (iVar8 == 0x7fffffff) {\u000a                      uVar6 = 7;\u000a                      iVar8 = 0x7fffffff;\u000a                      goto LAB_0040c5f5;\u000a                    }\u000a                    iVar8 = iVar8 + 1;\u000a                  }\u000aLAB_0040c5f0:\u000a                  string = (char *)((byte *)string + sVar4);\u000a                  uVar6 = 0;\u000a                }\u000a              }\u000a              else {\u000a                uVar6 = 7;\u000a                if (iVar3 <= 0x7fffffff - iVar8) {\u000a                  iVar8 = iVar8 + iVar3;\u000a                  goto LAB_0040c5f0;\u000a                }\u000a              }\u000a            }\u000aLAB_0040c5f5:\u000a            if ((uVar6 & 7) != 0) {\u000a              if ((((byte)uVar6 & 7) != 5) && ((uVar6 & 7) != 0)) {\u000a                if (((byte)uVar6 & 7) != 7) {\u000a                  return -1;\u000a                }\u000a                return 0x7fffffff;\u000a              }\u000a              break;\u000a            }\u000a            iVar3 = mbsinit(&local_38);\u000a          } while (iVar3 == 0);\u000a        }\u000a      } while (string < pbVar1);\u000a    }\u000a  }\u000a  return iVar8;\u000a}\u000a\u000a
p1571
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nLEA R15,[RBX + RBP*0x1]\nCALL 0x004025c0\nCMP RAX,0x1\nJBE 0x0040c632\nTEST RBP,RBP\nJLE 0x0040c6a0\nMOV EAX,R14D\nAND EAX,0x2\nMOV dword ptr [RSP + 0x4],EAX\nAND R14D,0x1\nMOV EAX,R14D\nXOR EAX,0x1\nMOV dword ptr [RSP + 0xc],EAX\nLEA EAX,[R14*0x4]\nXOR EAX,0x5\nMOV dword ptr [RSP + 0x8],EAX\nXOR EBP,EBP\nLEA R12,[RSP + 0x10]\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RBX]\nADD EAX,-0x20\nCMP EAX,0x5e\nJA 0x0040c511\nJMP qword ptr [0x4141e8 + RAX*0x8]\nINC RBX\nINC EBP\nCMP RBX,R15\nJC 0x0040c4f0\nJMP 0x0040c6a2\nMOV qword ptr [RSP + 0x10],0x0\nNOP word ptr [RAX + RAX*0x1]\nMOV RDX,R15\nSUB RDX,RBX\nMOV RDI,RSP\nMOV RSI,RBX\nMOV RCX,R12\nCALL 0x00402600\nMOV R13,RAX\nCMP R13,-0x2\nJZ 0x0040c570\nTEST R13,R13\nJZ 0x0040c590\nCMP R13,-0x1\nJNZ 0x0040c596\nMOV ECX,0x1\nTEST R14D,R14D\nJNZ 0x0040c5f5\nINC RBX\nINC EBP\nMOV ECX,0x5\nJMP 0x0040c5f5\nADD EBP,dword ptr [RSP + 0xc]\nTEST R14D,R14D\nCMOVZ RBX,R15\nMOV ECX,dword ptr [RSP + 0x8]\nJMP 0x0040c5f5\nMOV R13D,0x1\nMOV EDI,dword ptr [RSP]\nCALL 0x00402830\nTEST EAX,EAX\nJS 0x0040c5b6\nMOV EDX,0x7fffffff\nSUB EDX,EBP\nMOV ECX,0x7\nCMP EAX,EDX\nJG 0x0040c5f5\nADD EBP,EAX\nJMP 0x0040c5f0\nMOV ECX,0x1\nCMP dword ptr [RSP + 0x4],0x0\nJNZ 0x0040c5f5\nMOV EDI,dword ptr [RSP]\nCALL 0x004024e0\nTEST EAX,EAX\nJNZ 0x0040c5f0\nCMP EBP,0x7fffffff\nJNZ 0x0040c5e2\nMOV ECX,0x7\nMOV EBP,0x7fffffff\nJMP 0x0040c5f5\nINC EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nADD RBX,R13\nXOR ECX,ECX\nMOV EAX,ECX\nAND AL,0x7\nJNZ 0x0040c610\nMOV RDI,R12\nCALL 0x00402ab0\nTEST EAX,EAX\nJZ 0x0040c520\nJMP 0x0040c507\nCMP AL,0x5\nJZ 0x0040c507\nAND CL,0x7\nJZ 0x0040c507\nMOV EBP,0xffffffff\nCMP CL,0x7\nJNZ 0x0040c6a2\nMOV EBP,0x7fffffff\nJMP 0x0040c6a2\nAND R14D,0x2\nXOR R12D,R12D\nMOV RCX,RBX\nJMP 0x0040c650\nMOV RCX,RBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,RCX\nCMP RBX,R15\nJNC 0x0040c694\nMOVZX EBP,byte ptr [RBX]\nCALL 0x00402b30\nMOV RAX,qword ptr [RAX]\nMOVZX EAX,word ptr [RAX + RBP*0x2]\nTEST AH,0x40\nJNZ 0x0040c679\nTEST R14D,R14D\nJNZ 0x0040c699\nLEA RCX,[RBX + 0x1]\nTEST AL,0x2\nJNZ 0x0040c650\nINC RBX\nCMP R12D,0x7fffffff\nLEA EAX,[R12 + 0x1]\nMOV EBP,0x7fffffff\nMOV R12D,EAX\nJNZ 0x0040c63e\nJMP 0x0040c6a2\nMOV EBP,R12D\nJMP 0x0040c6a2\nMOV EBP,0xffffffff\nJMP 0x0040c6a2\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1572
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n41 89 d6\n48 89 f5\n48 89 fb\n4c 8d 3c 2b\ne8 20 61 ff ff\n48 83 f8 01\n0f 86 88 01 00 00\n48 85 ed\n0f 8e ed 01 00 00\n44 89 f0\n83 e0 02\n89 44 24 04\n41 83 e6 01\n44 89 f0\n83 f0 01\n89 44 24 0c\n42 8d 04 b5 00 00 00 00\n83 f0 05\n89 44 24 08\n31 ed\n4c 8d 64 24 10\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 03\n83 c0 e0\n83 f8 5e\n77 16\nff 24 c5 e8 41 41 00\n48 ff c3\nff c5\n4c 39 fb\n72 e4\ne9 91 01 00 00\n48 c7 44 24 10 00 00 00 00\n66 0f 1f 44 00 00\n4c 89 fa\n48 29 da\n48 89 e7\n48 89 de\n4c 89 e1\ne8 cc 60 ff ff\n49 89 c5\n49 83 fd fe\n74 33\n4d 85 ed\n74 4e\n49 83 fd ff\n75 4e\nb9 01 00 00 00\n45 85 f6\n0f 85 9f 00 00 00\n48 ff c3\nff c5\nb9 05 00 00 00\ne9 90 00 00 00\n03 6c 24 0c\n45 85 f6\n49 0f 44 df\n8b 4c 24 08\neb 74\n41 bd 01 00 00 00\n8b 3c 24\ne8 92 62 ff ff\n85 c0\n78 14\nba ff ff ff 7f\n29 ea\nb9 07 00 00 00\n39 d0\n7f 43\n01 c5\neb 3a\nb9 01 00 00 00\n83 7c 24 04 00\n75 33\n8b 3c 24\ne8 16 5f ff ff\n85 c0\n75 22\n81 fd ff ff ff 7f\n75 0c\nb9 07 00 00 00\nbd ff ff ff 7f\neb 13\nff c5\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 01 eb\n31 c9\n89 c8\n24 07\n75 15\n4c 89 e7\ne8 ad 64 ff ff\n85 c0\n0f 84 15 ff ff ff\ne9 f7 fe ff ff\n3c 05\n0f 84 ef fe ff ff\n80 e1 07\n0f 84 e6 fe ff ff\nbd ff ff ff ff\n80 f9 07\n75 77\nbd ff ff ff 7f\neb 70\n41 83 e6 02\n45 31 e4\n48 89 d9\neb 12\n48 89 d9\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 cb\n4c 39 fb\n73 3c\n0f b6 2b\ne8 d0 64 ff ff\n48 8b 00\n0f b7 04 68\nf6 c4 40\n75 0d\n45 85 f6\n75 28\n48 8d 4b 01\na8 02\n75 d7\n48 ff c3\n41 81 fc ff ff ff 7f\n41 8d 44 24 01\nbd ff ff ff 7f\n41 89 c4\n75 ac\neb 0e\n44 89 e5\neb 09\nbd ff ff ff ff\neb 02\n31 ed\n89 e8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1573
S'.text:000000000040c480\n.text:000000000040c481\n.text:000000000040c483\n.text:000000000040c485\n.text:000000000040c487\n.text:000000000040c489\n.text:000000000040c48a\n.text:000000000040c48e\n.text:000000000040c491\n.text:000000000040c494\n.text:000000000040c497\n.text:000000000040c49b\n.text:000000000040c4a0\n.text:000000000040c4a4\n.text:000000000040c4aa\n.text:000000000040c4ad\n.text:000000000040c4b3\n.text:000000000040c4b6\n.text:000000000040c4b9\n.text:000000000040c4bd\n.text:000000000040c4c1\n.text:000000000040c4c4\n.text:000000000040c4c7\n.text:000000000040c4cb\n.text:000000000040c4d3\n.text:000000000040c4d6\n.text:000000000040c4da\n.text:000000000040c4dc\n.text:000000000040c4e1\n.text:000000000040c4f0\n.text:000000000040c4f3\n.text:000000000040c4f6\n.text:000000000040c4f9\n.text:000000000040c4fb\n.text:000000000040c502\n.text:000000000040c505\n.text:000000000040c507\n.text:000000000040c50a\n.text:000000000040c50c\n.text:000000000040c511\n.text:000000000040c51a\n.text:000000000040c520\n.text:000000000040c523\n.text:000000000040c526\n.text:000000000040c529\n.text:000000000040c52c\n.text:000000000040c52f\n.text:000000000040c534\n.text:000000000040c537\n.text:000000000040c53b\n.text:000000000040c53d\n.text:000000000040c540\n.text:000000000040c542\n.text:000000000040c546\n.text:000000000040c548\n.text:000000000040c54d\n.text:000000000040c550\n.text:000000000040c556\n.text:000000000040c559\n.text:000000000040c55b\n.text:000000000040c560\n.text:000000000040c570\n.text:000000000040c574\n.text:000000000040c577\n.text:000000000040c57b\n.text:000000000040c57f\n.text:000000000040c590\n.text:000000000040c596\n.text:000000000040c599\n.text:000000000040c59e\n.text:000000000040c5a0\n.text:000000000040c5a2\n.text:000000000040c5a7\n.text:000000000040c5a9\n.text:000000000040c5ae\n.text:000000000040c5b0\n.text:000000000040c5b2\n.text:000000000040c5b4\n.text:000000000040c5b6\n.text:000000000040c5bb\n.text:000000000040c5c0\n.text:000000000040c5c2\n.text:000000000040c5c5\n.text:000000000040c5ca\n.text:000000000040c5cc\n.text:000000000040c5ce\n.text:000000000040c5d4\n.text:000000000040c5d6\n.text:000000000040c5db\n.text:000000000040c5e0\n.text:000000000040c5e2\n.text:000000000040c5e4\n.text:000000000040c5f0\n.text:000000000040c5f3\n.text:000000000040c5f5\n.text:000000000040c5f7\n.text:000000000040c5f9\n.text:000000000040c5fb\n.text:000000000040c5fe\n.text:000000000040c603\n.text:000000000040c605\n.text:000000000040c60b\n.text:000000000040c610\n.text:000000000040c612\n.text:000000000040c618\n.text:000000000040c61b\n.text:000000000040c621\n.text:000000000040c626\n.text:000000000040c629\n.text:000000000040c62b\n.text:000000000040c630\n.text:000000000040c632\n.text:000000000040c636\n.text:000000000040c639\n.text:000000000040c63c\n.text:000000000040c63e\n.text:000000000040c641\n.text:000000000040c650\n.text:000000000040c653\n.text:000000000040c656\n.text:000000000040c658\n.text:000000000040c65b\n.text:000000000040c660\n.text:000000000040c663\n.text:000000000040c667\n.text:000000000040c66a\n.text:000000000040c66c\n.text:000000000040c66f\n.text:000000000040c671\n.text:000000000040c675\n.text:000000000040c677\n.text:000000000040c679\n.text:000000000040c67c\n.text:000000000040c683\n.text:000000000040c688\n.text:000000000040c68d\n.text:000000000040c690\n.text:000000000040c692\n.text:000000000040c694\n.text:000000000040c697\n.text:000000000040c699\n.text:000000000040c69e\n.text:000000000040c6a0\n.text:000000000040c6a2\n.text:000000000040c6a4\n.text:000000000040c6a8\n.text:000000000040c6a9\n.text:000000000040c6ab\n.text:000000000040c6ad\n.text:000000000040c6af\n.text:000000000040c6b1\n.text:000000000040c6b2\n'
p1574
tp1575
sS'buffer_linelim'
p1576
(S'\n__stdcall buffer_linelim(buffer * buf)\n'
p1577
V\u000aline * buffer_linelim(buffer *buf)\u000a\u000a{\u000a  return (line *)(buf->buf + buf->alloc);\u000a}\u000a\u000a
p1578
S'MOV RAX,qword ptr [RDI]\nADD RAX,qword ptr [RDI + 0x18]\nRET\n'
p1579
S'48 8b 07\n48 03 47 18\nc3\n'
p1580
S'.text:00000000004062c0\n.text:00000000004062c3\n.text:00000000004062c7\n'
p1581
tp1582
sS'gettimeofday'
p1583
(S'\n__stdcall gettimeofday(timeval * __tv, __timezone_ptr_t __tz)\n'
p1584
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint gettimeofday(timeval *__tv,__timezone_ptr_t __tz)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_gettimeofday_0061a168)();\u000a  return iVar1;\u000a}\u000a\u000a
p1585
S'JMP qword ptr [0x0061a168]\n'
p1586
S'ff 25 f2 7a 21 00\n'
p1587
S'.plt:0000000000402670\n'
p1588
tp1589
sS'quotearg_n_style_colon'
p1590
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p1591
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1592
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x0040dbf0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x0040cad0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x0040d9c0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1593
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1594
S'.text:000000000040dd70\n.text:000000000040dd71\n.text:000000000040dd73\n.text:000000000040dd74\n.text:000000000040dd78\n.text:000000000040dd7b\n.text:000000000040dd7d\n.text:000000000040dd82\n.text:000000000040dd85\n.text:000000000040dd8a\n.text:000000000040dd8f\n.text:000000000040dd94\n.text:000000000040dd97\n.text:000000000040dd9c\n.text:000000000040dda3\n.text:000000000040dda5\n.text:000000000040dda8\n.text:000000000040ddab\n.text:000000000040ddb0\n.text:000000000040ddb4\n.text:000000000040ddb5\n.text:000000000040ddb7\n.text:000000000040ddb8\n'
p1595
tp1596
sS'rotl64'
p1597
(S'\n__stdcall rotl64(uint64_t x)\n'
p1598
V\u000auint64_t rotl64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p1599
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p1600
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p1601
S'.text:0000000000410cb0\n.text:0000000000410cb2\n.text:0000000000410cb5\n.text:0000000000410cb8\n'
p1602
tp1603
sS'quote_mem'
p1604
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p1605
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1606
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x0040de80\n'
p1607
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p1608
S'.text:000000000040de90\n.text:000000000040de93\n.text:000000000040de96\n.text:000000000040de98\n.text:000000000040de9b\n.text:000000000040de9e\n'
p1609
tp1610
sS'xstrtol_error'
p1611
(S'\n__stdcall xstrtol_error(option * long_options, char * arg)\n'
p1612
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000avoid xstrtol_error(option *long_options,char *arg)\u000a\u000a{\u000a  int iVar1;\u000a  ulong in_RAX;\u000a  undefined8 uVar2;\u000a  long in_RCX;\u000a  undefined in_DL;\u000a  long lVar3;\u000a  undefined *puVar4;\u000a  uint uVar5;\u000a  ulong in_R9;\u000a  char option_buffer [2];\u000a  ulong uStack40;\u000a  \u000a  iVar1 = (int)arg;\u000a  uVar5 = (int)long_options - 1;\u000a  if (uVar5 < 4) {\u000a    if (iVar1 < 0) {\u000a      lVar3 = (long)&uStack40 + 6;\u000a      puVar4 = &DAT_004150e7 + -(long)iVar1;\u000a      uStack40 = (ulong)CONCAT16(in_DL,(int6)in_RAX);\u000a    }\u000a    else {\u000a      lVar3 = *(long *)(in_RCX + (long)iVar1 * 0x20);\u000a      puVar4 = &DAT_004150e7;\u000a      uStack40 = in_RAX;\u000a    }\u000a    uVar2 = dcgettext(0,(&PTR_s__s_s_argument___s__too_large_00415150)[(long)(int)uVar5],5);\u000a    error(in_R9 & 0xffffffff,0,uVar2,puVar4,lVar3);\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1613
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R15D,R9D\nMOV R14,R8\nMOV EAX,ESI\nDEC EDI\nCMP EDI,0x4\nJNC 0x004102ae\nMOVSXD RSI,EDI\nMOV RSI,qword ptr [0x415150 + RSI*0x8]\nCDQE\nTEST EAX,EAX\nJS 0x00410266\nSHL RAX,0x5\nMOV RBX,qword ptr [RCX + RAX*0x1]\nMOV EBP,0x4150e7\nJMP 0x0041027c\nLEA RBX,[RSP + 0x6]\nMOV EBP,0x4150e7\nSUB RBP,RAX\nMOV byte ptr [RSP + 0x6],DL\nMOV byte ptr [RSP + 0x7],0x0\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R15D\nMOV RDX,RCX\nMOV RCX,RBP\nMOV R8,RBX\nMOV R9,R14\nCALL 0x00402960\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402420\n'
p1614
S'55\n41 57\n41 56\n53\n50\n45 89 cf\n4d 89 c6\n89 f0\nff cf\n83 ff 04\n73 68\n48 63 f7\n48 8b 34 f5 50 51 41 00\n48 98\n85 c0\n78 0f\n48 c1 e0 05\n48 8b 1c 01\nbd e7 50 41 00\neb 16\n48 8d 5c 24 06\nbd e7 50 41 00\n48 29 c5\n88 54 24 06\nc6 44 24 07 00\n31 ff\nba 05 00 00 00\ne8 28 23 ff ff\n48 89 c1\n31 f6\n31 c0\n44 89 ff\n48 89 ca\n48 89 e9\n49 89 d8\n4d 89 f1\ne8 bd 26 ff ff\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 6d 21 ff ff\n'
p1615
S'.text:0000000000410230\n.text:0000000000410231\n.text:0000000000410233\n.text:0000000000410235\n.text:0000000000410236\n.text:0000000000410237\n.text:000000000041023a\n.text:000000000041023d\n.text:000000000041023f\n.text:0000000000410241\n.text:0000000000410244\n.text:0000000000410246\n.text:0000000000410249\n.text:0000000000410251\n.text:0000000000410253\n.text:0000000000410255\n.text:0000000000410257\n.text:000000000041025b\n.text:000000000041025f\n.text:0000000000410264\n.text:0000000000410266\n.text:000000000041026b\n.text:0000000000410270\n.text:0000000000410273\n.text:0000000000410277\n.text:000000000041027c\n.text:000000000041027e\n.text:0000000000410283\n.text:0000000000410288\n.text:000000000041028b\n.text:000000000041028d\n.text:000000000041028f\n.text:0000000000410292\n.text:0000000000410295\n.text:0000000000410298\n.text:000000000041029b\n.text:000000000041029e\n.text:00000000004102a3\n.text:00000000004102a7\n.text:00000000004102a8\n.text:00000000004102aa\n.text:00000000004102ac\n.text:00000000004102ad\n.text:00000000004102ae\n'
p1616
tp1617
sS'md5_finish_ctx'
p1618
(S'\n__stdcall md5_finish_ctx(md5_ctx * ctx, void * resbuf)\n'
p1619
V\u000avoid * md5_finish_ctx(md5_ctx *ctx,void *resbuf)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  void *pvVar3;\u000a  long lVar4;\u000a  \u000a  uVar1 = ctx->buflen;\u000a  lVar4 = 0x20;\u000a  if (uVar1 < 0x38) {\u000a    lVar4 = 0x10;\u000a  }\u000a  uVar2 = ctx->total[0];\u000a  ctx->total[0] = uVar2 + uVar1;\u000a  if (CARRY4(uVar2,uVar1)) {\u000a    ctx->total[1] = ctx->total[1] + 1;\u000a  }\u000a  uVar2 = ctx->total[0];\u000a  ctx->total[lVar4 + 1] = uVar2 * 8;\u000a  (&ctx->buflen)[lVar4] = ctx->total[1] << 3 | uVar2 >> 0x1d;\u000a  memcpy((void *)((long)ctx->buffer + (ulong)uVar1),fillbuf,(lVar4 * 4 + -8) - (ulong)uVar1);\u000a  md5_process_block(ctx->buffer,lVar4 << 2,ctx);\u000a  pvVar3 = md5_read_ctx(ctx,resbuf);\u000a  return pvVar3;\u000a}\u000a\u000a
p1620
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV EAX,dword ptr [RBX + 0x18]\nCMP RAX,0x38\nMOV ECX,0x10\nMOV R15D,0x20\nCMOVC R15,RCX\nMOV ECX,dword ptr [RBX + 0x10]\nADD ECX,EAX\nMOV dword ptr [RBX + 0x10],ECX\nJNC 0x0040a181\nINC dword ptr [RBX + 0x14]\nMOV ECX,dword ptr [RBX + 0x10]\nLEA EDX,[RCX*0x8]\nLEA R12,[RBX + 0x1c]\nMOV dword ptr [RBX + R15*0x4 + 0x14],EDX\nMOV EDX,dword ptr [RBX + 0x14]\nSHLD EDX,ECX,0x3\nMOV dword ptr [RBX + R15*0x4 + 0x18],EDX\nLEA RDI,[RBX + RAX*0x1 + 0x1c]\nLEA RDX,[-0x8 + R15*0x4]\nSUB RDX,RAX\nMOV ESI,0x414100\nCALL 0x004027c0\nSHL R15,0x2\nMOV RDI,R12\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x0040a1f0\nMOV RDI,RBX\nMOV RSI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x0040a0f0\n'
p1621
S'41 57\n41 56\n41 54\n53\n50\n49 89 f6\n48 89 fb\n8b 43 18\n48 83 f8 38\nb9 10 00 00 00\n41 bf 20 00 00 00\n4c 0f 42 f9\n8b 4b 10\n01 c1\n89 4b 10\n73 03\nff 43 14\n8b 4b 10\n8d 14 cd 00 00 00 00\n4c 8d 63 1c\n42 89 54 bb 14\n8b 53 14\n0f a4 ca 03\n42 89 54 bb 18\n48 8d 7c 03 1c\n4a 8d 14 bd f8 ff ff ff\n48 29 c2\nbe 00 41 41 00\ne8 06 86 ff ff\n49 c1 e7 02\n4c 89 e7\n4c 89 fe\n48 89 da\ne8 24 00 00 00\n48 89 df\n4c 89 f6\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 0e ff ff ff\n'
p1622
S'.text:000000000040a150\n.text:000000000040a152\n.text:000000000040a154\n.text:000000000040a156\n.text:000000000040a157\n.text:000000000040a158\n.text:000000000040a15b\n.text:000000000040a15e\n.text:000000000040a161\n.text:000000000040a165\n.text:000000000040a16a\n.text:000000000040a170\n.text:000000000040a174\n.text:000000000040a177\n.text:000000000040a179\n.text:000000000040a17c\n.text:000000000040a17e\n.text:000000000040a181\n.text:000000000040a184\n.text:000000000040a18b\n.text:000000000040a18f\n.text:000000000040a194\n.text:000000000040a197\n.text:000000000040a19b\n.text:000000000040a1a0\n.text:000000000040a1a5\n.text:000000000040a1ad\n.text:000000000040a1b0\n.text:000000000040a1b5\n.text:000000000040a1ba\n.text:000000000040a1be\n.text:000000000040a1c1\n.text:000000000040a1c4\n.text:000000000040a1c7\n.text:000000000040a1cc\n.text:000000000040a1cf\n.text:000000000040a1d2\n.text:000000000040a1d6\n.text:000000000040a1d7\n.text:000000000040a1d9\n.text:000000000040a1db\n.text:000000000040a1dd\n'
p1623
tp1624
sS'mbrtowc'
p1625
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p1626
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0061a130)();\u000a  return sVar1;\u000a}\u000a\u000a
p1627
S'JMP qword ptr [0x0061a130]\n'
p1628
S'ff 25 2a 7b 21 00\n'
p1629
S'.plt:0000000000402600\n'
p1630
tp1631
sS'dup2'
p1632
(S'\n__stdcall dup2(int __fd, int __fd2)\n'
p1633
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dup2(int __fd,int __fd2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dup2_0061a138)();\u000a  return iVar1;\u000a}\u000a\u000a
p1634
S'JMP qword ptr [0x0061a138]\n'
p1635
S'ff 25 22 7b 21 00\n'
p1636
S'.plt:0000000000402610\n'
p1637
tp1638
sS'write_line'
p1639
(S'\n__stdcall write_line(line * line, FILE * fp, char * output_file)\n'
p1640
V\u000avoid write_line(line *line,FILE *fp,char *output_file)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int __c;\u000a  size_t sVar3;\u000a  char *message;\u000a  size_t __n;\u000a  \u000a  message = line->text;\u000a  __n = line->length;\u000a  pcVar1 = message + __n;\u000a  if ((output_file == (char *)0x0) && (debug == 1)) {\u000a    do {\u000a      __n = __n - 1;\u000a      if (pcVar1 <= message) {\u000a        debug_line(line);\u000a        return;\u000a      }\u000a      cVar2 = *message;\u000a      message = message + 1;\u000a      __c = (int)cVar2;\u000a      if (__n == 0) {\u000a        __c = 10;\u000a      }\u000a      if ((int)cVar2 == 9) {\u000a        __c = 0x3e;\u000a      }\u000a      __c = fputc_unlocked(__c,(FILE *)fp);\u000a    } while (__c != -1);\u000a    message = (char *)dcgettext(0,"write failed",5);\u000a                    /* WARNING: Subroutine does not return */\u000a    die(message,(char *)0x0);\u000a  }\u000a  if (eolchar == 0) {\u000a    cVar2 = '\u005cn';\u000a  }\u000a  else {\u000a    cVar2 = 0;\u000a  }\u000a  message[__n - 1] = cVar2;\u000a  sVar3 = fwrite_unlocked(message,1,__n,(FILE *)fp);\u000a  if (sVar3 != __n) {\u000a    message = (char *)dcgettext(0,"write failed",5);\u000a                    /* WARNING: Subroutine does not return */\u000a    die(message,output_file);\u000a  }\u000a  pcVar1[-1] = 0;\u000a  return;\u000a}\u000a\u000a
p1641
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,qword ptr [RDI]\nMOV R12,qword ptr [RDI + 0x8]\nLEA RBP,[RBX + R12*0x1]\nTEST R14,R14\nJNZ 0x0040643e\nCMP byte ptr [0x0061a648],0x1\nJNZ 0x0040643e\nMOV qword ptr [RSP + 0x10],RDI\nMOV qword ptr [RSP + 0x8],R14\nDEC R12\nMOV R14D,0xa\nMOV R13D,0x3e\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP RBX,RBP\nJNC 0x0040647e\nTEST R12,R12\nMOVSX EAX,byte ptr [RBX]\nLEA RBX,[RBX + 0x1]\nMOV EDI,EAX\nCMOVZ EDI,R14D\nCMP EAX,0x9\nCMOVZ EDI,R13D\nMOV RSI,R15\nCALL 0x00402790\nDEC R12\nCMP EAX,-0x1\nJNZ 0x004063f0\nXOR EDI,EDI\nMOV ESI,0x413f1b\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDI,RAX\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x00405c70\nMOV AL,byte ptr [0x0061a64b]\nTEST AL,AL\nJNZ 0x0040644c\nMOV AL,0xa\nJMP 0x0040644e\nXOR EAX,EAX\nMOV byte ptr [RBX + R12*0x1 + -0x1],AL\nMOV ESI,0x1\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x004028e0\nCMP RAX,R12\nJNZ 0x00406496\nMOV byte ptr [RBP + -0x1],0x0\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [RSP + 0x10]\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00407850\nXOR EDI,EDI\nMOV ESI,0x413f1b\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00405c70\n'
p1642
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 d6\n49 89 f7\n48 8b 1f\n4c 8b 67 08\n4a 8d 2c 23\n4d 85 f6\n75 7a\n80 3d 7d 42 21 00 01\n75 71\n48 89 7c 24 10\n4c 89 74 24 08\n49 ff cc\n41 be 0a 00 00 00\n41 bd 3e 00 00 00\n66 2e 0f 1f 84 00 00 00 00 00\n48 39 eb\n0f 83 85 00 00 00\n4d 85 e4\n0f be 03\n48 8d 5b 01\n89 c7\n41 0f 44 fe\n83 f8 09\n41 0f 44 fd\n4c 89 fe\ne8 78 c3 ff ff\n49 ff cc\n83 f8 ff\n75 d0\n31 ff\nbe 1b 3f 41 00\nba 05 00 00 00\ne8 7f c1 ff ff\n48 89 c7\n48 8b 74 24 08\ne8 32 f8 ff ff\n8a 05 07 42 21 00\n84 c0\n75 04\nb0 0a\neb 02\n31 c0\n42 88 44 23 ff\nbe 01 00 00 00\n48 89 df\n4c 89 e2\n4c 89 f9\ne8 7a c4 ff ff\n4c 39 e0\n75 2b\nc6 45 ff 00\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 7c 24 10\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 ba 13 00 00\n31 ff\nbe 1b 3f 41 00\nba 05 00 00 00\ne8 09 c1 ff ff\n48 89 c7\n4c 89 f6\ne8 be f7 ff ff\n'
p1643
S'.text:00000000004063a0\n.text:00000000004063a1\n.text:00000000004063a3\n.text:00000000004063a5\n.text:00000000004063a7\n.text:00000000004063a9\n.text:00000000004063aa\n.text:00000000004063ae\n.text:00000000004063b1\n.text:00000000004063b4\n.text:00000000004063b7\n.text:00000000004063bb\n.text:00000000004063bf\n.text:00000000004063c2\n.text:00000000004063c4\n.text:00000000004063cb\n.text:00000000004063cd\n.text:00000000004063d2\n.text:00000000004063d7\n.text:00000000004063da\n.text:00000000004063e0\n.text:00000000004063e6\n.text:00000000004063f0\n.text:00000000004063f3\n.text:00000000004063f9\n.text:00000000004063fc\n.text:00000000004063ff\n.text:0000000000406403\n.text:0000000000406405\n.text:0000000000406409\n.text:000000000040640c\n.text:0000000000406410\n.text:0000000000406413\n.text:0000000000406418\n.text:000000000040641b\n.text:000000000040641e\n.text:0000000000406420\n.text:0000000000406422\n.text:0000000000406427\n.text:000000000040642c\n.text:0000000000406431\n.text:0000000000406434\n.text:0000000000406439\n.text:000000000040643e\n.text:0000000000406444\n.text:0000000000406446\n.text:0000000000406448\n.text:000000000040644a\n.text:000000000040644c\n.text:000000000040644e\n.text:0000000000406453\n.text:0000000000406458\n.text:000000000040645b\n.text:000000000040645e\n.text:0000000000406461\n.text:0000000000406466\n.text:0000000000406469\n.text:000000000040646b\n.text:000000000040646f\n.text:0000000000406473\n.text:0000000000406474\n.text:0000000000406476\n.text:0000000000406478\n.text:000000000040647a\n.text:000000000040647c\n.text:000000000040647d\n.text:000000000040647e\n.text:0000000000406483\n.text:0000000000406487\n.text:0000000000406488\n.text:000000000040648a\n.text:000000000040648c\n.text:000000000040648e\n.text:0000000000406490\n.text:0000000000406491\n.text:0000000000406496\n.text:0000000000406498\n.text:000000000040649d\n.text:00000000004064a2\n.text:00000000004064a7\n.text:00000000004064aa\n.text:00000000004064ad\n'
p1644
tp1645
sS'dcgettext'
p1646
(S'\n__stdcall dcgettext()\n'
p1647
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0061a108)();\u000a  return;\u000a}\u000a\u000a
p1648
S'JMP qword ptr [0x0061a108]\n'
p1649
S'ff 25 52 7b 21 00\n'
p1650
S'.plt:00000000004025b0\n'
p1651
tp1652
sS'debug_key'
p1653
(S'\n__stdcall debug_key(line * line, keyfield * key)\n'
p1654
V\u000avoid debug_key(line *line,keyfield *key)\u000a\u000a{\u000a  byte bVar1;\u000a  byte *text;\u000a  byte *pbVar2;\u000a  _Bool _Var3;\u000a  byte bVar4;\u000a  byte *in_RAX;\u000a  byte *pbVar5;\u000a  size_t offset;\u000a  size_t width;\u000a  byte *__nptr;\u000a  bool bVar6;\u000a  byte *lim;\u000a  bool bVar7;\u000a  byte *local_38;\u000a  \u000a  text = (byte *)line->text;\u000a  lim = text + (line->length - 1);\u000a  __nptr = text;\u000a  local_38 = in_RAX;\u000a  if (key != (keyfield *)0x0) {\u000a    __nptr = text;\u000a    local_38 = in_RAX;\u000a    if (key->sword != 0xffffffffffffffff) {\u000a      local_38 = in_RAX;\u000a      __nptr = (byte *)begfield(line,key);\u000a    }\u000a    if (key->eword != 0xffffffffffffffff) {\u000a      lim = (byte *)limfield(line,key);\u000a    }\u000a    if ((((key->skipsblanks != false) && (key->sword == 0xffffffffffffffff)) ||\u000a        (key->month != false)) || (_Var3 = key_numeric(key), _Var3 != false)) {\u000a      bVar1 = *lim;\u000a      *lim = 0;\u000a      __nptr = __nptr + -1;\u000a      do {\u000a        __nptr = __nptr + 1;\u000a        bVar4 = to_uchar();\u000a      } while (blanks[(ulong)bVar4] != false);\u000a      local_38 = lim;\u000a      if (__nptr <= lim) {\u000a        if (key->month == false) {\u000a          if (key->general_numeric == false) {\u000a            if ((key->numeric != false) || (local_38 = lim, key->human_numeric != false)) {\u000a              if (__nptr < lim) {\u000a                bVar7 = *__nptr == 0x2d;\u000a              }\u000a              else {\u000a                bVar7 = false;\u000a              }\u000a              pbVar2 = __nptr + (ulong)bVar7;\u000a              bVar7 = false;\u000a              do {\u000a                do {\u000a                  bVar6 = bVar7;\u000a                  pbVar5 = pbVar2;\u000a                  bVar4 = *pbVar5;\u000a                  pbVar2 = pbVar5 + 1;\u000a                  bVar7 = true;\u000a                } while ((uint)bVar4 - 0x30 < 10);\u000a                pbVar2 = pbVar5 + 1;\u000a                bVar7 = bVar6;\u000a              } while ((uint)bVar4 == thousands_sep);\u000a              bVar7 = bVar6;\u000a              if ((uint)bVar4 == decimal_point) {\u000a                do {\u000a                  bVar6 = bVar7;\u000a                  bVar4 = pbVar5[1];\u000a                  pbVar5 = pbVar5 + 1;\u000a                  bVar7 = true;\u000a                } while ((uint)bVar4 - 0x30 < 10);\u000a              }\u000a              local_38 = __nptr;\u000a              if (bVar6) {\u000a                if (key->human_numeric == false) {\u000a                  bVar7 = true;\u000a                }\u000a                else {\u000a                  bVar7 = ""[(ulong)bVar4] == 0;\u000a                }\u000a                local_38 = pbVar5 + (1 - (ulong)bVar7);\u000a              }\u000a            }\u000a          }\u000a          else {\u000a            local_38 = __nptr;\u000a            strtold((char *)__nptr,(char **)&local_38);\u000a          }\u000a        }\u000a        else {\u000a          local_38 = __nptr;\u000a          getmonth((char *)__nptr,(char **)&local_38);\u000a        }\u000a      }\u000a      *lim = bVar1;\u000a      lim = local_38;\u000a    }\u000a  }\u000a  offset = debug_width((char *)text,(char *)__nptr);\u000a  width = debug_width((char *)__nptr,(char *)lim);\u000a  mark_key(offset,width);\u000a  return;\u000a}\u000a\u000a
p1655
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R13,RDI\nMOV R14,qword ptr [R13]\nMOV RAX,qword ptr [R13 + 0x8]\nLEA R15,[R14 + RAX*0x1 + -0x1]\nTEST R12,R12\nJZ 0x0040796a\nCMP qword ptr [R12],-0x1\nMOV RBP,R14\nJZ 0x004078ef\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x00406750\nMOV RBP,RAX\nCMP qword ptr [R12 + 0x10],-0x1\nJZ 0x00407905\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x00406610\nMOV R15,RAX\nCMP byte ptr [R12 + 0x30],0x0\nJZ 0x00407914\nCMP qword ptr [R12],-0x1\nJZ 0x0040792c\nCMP byte ptr [R12 + 0x36],0x0\nJNZ 0x0040792c\nMOV RDI,R12\nCALL 0x00405da0\nTEST AL,AL\nJZ 0x00407a6a\nMOV R13B,byte ptr [R15]\nMOV byte ptr [R15],0x0\nDEC RBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVSX EDI,byte ptr [RBP + 0x1]\nINC RBP\nCALL 0x004042c0\nMOVZX EAX,AL\nCMP byte ptr [0x61a670 + RAX],0x0\nJNZ 0x00407940\nMOV qword ptr [RSP],RBP\nCMP R15,RBP\nJNC 0x00407972\nMOV qword ptr [RSP],R15\nJMP 0x00407a63\nMOV RBP,R14\nJMP 0x00407a6a\nCMP byte ptr [R12 + 0x36],0x0\nJZ 0x0040798a\nMOV RSI,RSP\nMOV RDI,RBP\nCALL 0x004071f0\nJMP 0x00407a63\nCMP byte ptr [R12 + 0x34],0x0\nJZ 0x004079a4\nMOV RSI,RSP\nMOV RDI,RBP\nCALL 0x00402950\nFSTP ST0\nJMP 0x00407a63\nCMP byte ptr [R12 + 0x32],0x0\nJNZ 0x004079b4\nCMP byte ptr [R12 + 0x35],0x0\nJZ 0x00407961\nCMP RBP,R15\nJNC 0x004079c2\nCMP byte ptr [RBP],0x2d\nSETZ AL\nJMP 0x004079c4\nXOR EAX,EAX\nMOVZX EAX,AL\nADD RAX,RBP\nMOV R8D,dword ptr [0x0061a5b8]\nXOR EDX,EDX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV EBX,EDX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV DL,BL\nMOV CL,byte ptr [RAX]\nINC RAX\nMOVZX EDI,CL\nLEA ESI,[RDI + -0x30]\nMOV BL,0x1\nCMP ESI,0xa\nJC 0x004079f0\nCMP EDI,R8D\nJZ 0x004079e0\nDEC RAX\nCMP EDI,dword ptr [0x0061a5b4]\nJNZ 0x00407a35\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV ESI,EDX\nMOVZX ECX,byte ptr [RAX + 0x1]\nINC RAX\nLEA EDX,[RCX + -0x30]\nCMP EDX,0xa\nMOV DL,0x1\nJC 0x00407a20\nJMP 0x00407a37\nMOV ESI,EDX\nTEST SIL,0x1\nJZ 0x00407a63\nCMP byte ptr [R12 + 0x35],0x0\nJZ 0x00407a54\nMOVZX ECX,CL\nCMP byte ptr [0x4124c0 + RCX],0x0\nSETZ CL\nJMP 0x00407a56\nMOV CL,0x1\nMOVZX ECX,CL\nSUB RAX,RCX\nINC RAX\nMOV qword ptr [RSP],RAX\nMOV byte ptr [R15],R13B\nMOV R15,qword ptr [RSP]\nMOV RDI,R14\nMOV RSI,RBP\nCALL 0x00407aa0\nMOV R14,RAX\nMOV RDI,RBP\nMOV RSI,R15\nCALL 0x00407aa0\nMOV RDI,R14\nMOV RSI,RAX\nCALL 0x00407ae0\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1656
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f4\n49 89 fd\n4d 8b 75 00\n49 8b 45 08\n4d 8d 7c 06 ff\n4d 85 e4\n0f 84 93 00 00 00\n49 83 3c 24 ff\n4c 89 f5\n74 0e\n4c 89 ef\n4c 89 e6\ne8 64 ee ff ff\n48 89 c5\n49 83 7c 24 10 ff\n74 0e\n4c 89 ef\n4c 89 e6\ne8 0e ed ff ff\n49 89 c7\n41 80 7c 24 30 00\n74 07\n49 83 3c 24 ff\n74 18\n41 80 7c 24 36 00\n75 10\n4c 89 e7\ne8 7c e4 ff ff\n84 c0\n0f 84 3e 01 00 00\n45 8a 2f\n41 c6 07 00\n48 ff cd\n66 2e 0f 1f 84 00 00 00 00 00\n0f be 7d 01\n48 ff c5\ne8 74 c9 ff ff\n0f b6 c0\n80 b8 70 a6 61 00 00\n75 e8\n48 89 2c 24\n49 39 ef\n73 11\n4c 89 3c 24\ne9 f9 00 00 00\n4c 89 f5\ne9 f8 00 00 00\n41 80 7c 24 36 00\n74 10\n48 89 e6\n48 89 ef\ne8 6b f8 ff ff\ne9 d9 00 00 00\n41 80 7c 24 34 00\n74 12\n48 89 e6\n48 89 ef\ne8 b3 af ff ff\ndd d8\ne9 bf 00 00 00\n41 80 7c 24 32 00\n75 08\n41 80 7c 24 35 00\n74 ad\n4c 39 fd\n73 09\n80 7d 00 2d\n0f 94 c0\neb 02\n31 c0\n0f b6 c0\n48 01 e8\n44 8b 05 e7 2b 21 00\n31 d2\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n89 d3\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n88 da\n8a 08\n48 ff c0\n0f b6 f9\n8d 77 d0\nb3 01\n83 fe 0a\n72 ec\n44 39 c7\n74 d7\n48 ff c8\n3b 3d a2 2b 21 00\n75 21\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n89 d6\n0f b6 48 01\n48 ff c0\n8d 51 d0\n83 fa 0a\nb2 01\n72 ed\neb 02\n89 d6\n40 f6 c6 01\n74 26\n41 80 7c 24 35 00\n74 0f\n0f b6 c9\n80 b9 c0 24 41 00 00\n0f 94 c1\neb 02\nb1 01\n0f b6 c9\n48 29 c8\n48 ff c0\n48 89 04 24\n45 88 2f\n4c 8b 3c 24\n4c 89 f7\n48 89 ee\ne8 2b 00 00 00\n49 89 c6\n48 89 ef\n4c 89 fe\ne8 1d 00 00 00\n4c 89 f7\n48 89 c6\ne8 52 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1657
S'.text:00000000004078b0\n.text:00000000004078b1\n.text:00000000004078b3\n.text:00000000004078b5\n.text:00000000004078b7\n.text:00000000004078b9\n.text:00000000004078ba\n.text:00000000004078bb\n.text:00000000004078be\n.text:00000000004078c1\n.text:00000000004078c5\n.text:00000000004078c9\n.text:00000000004078ce\n.text:00000000004078d1\n.text:00000000004078d7\n.text:00000000004078dc\n.text:00000000004078df\n.text:00000000004078e1\n.text:00000000004078e4\n.text:00000000004078e7\n.text:00000000004078ec\n.text:00000000004078ef\n.text:00000000004078f5\n.text:00000000004078f7\n.text:00000000004078fa\n.text:00000000004078fd\n.text:0000000000407902\n.text:0000000000407905\n.text:000000000040790b\n.text:000000000040790d\n.text:0000000000407912\n.text:0000000000407914\n.text:000000000040791a\n.text:000000000040791c\n.text:000000000040791f\n.text:0000000000407924\n.text:0000000000407926\n.text:000000000040792c\n.text:000000000040792f\n.text:0000000000407933\n.text:0000000000407936\n.text:0000000000407940\n.text:0000000000407944\n.text:0000000000407947\n.text:000000000040794c\n.text:000000000040794f\n.text:0000000000407956\n.text:0000000000407958\n.text:000000000040795c\n.text:000000000040795f\n.text:0000000000407961\n.text:0000000000407965\n.text:000000000040796a\n.text:000000000040796d\n.text:0000000000407972\n.text:0000000000407978\n.text:000000000040797a\n.text:000000000040797d\n.text:0000000000407980\n.text:0000000000407985\n.text:000000000040798a\n.text:0000000000407990\n.text:0000000000407992\n.text:0000000000407995\n.text:0000000000407998\n.text:000000000040799d\n.text:000000000040799f\n.text:00000000004079a4\n.text:00000000004079aa\n.text:00000000004079ac\n.text:00000000004079b2\n.text:00000000004079b4\n.text:00000000004079b7\n.text:00000000004079b9\n.text:00000000004079bd\n.text:00000000004079c0\n.text:00000000004079c2\n.text:00000000004079c4\n.text:00000000004079c7\n.text:00000000004079ca\n.text:00000000004079d1\n.text:00000000004079d3\n.text:00000000004079e0\n.text:00000000004079e2\n.text:00000000004079f0\n.text:00000000004079f2\n.text:00000000004079f4\n.text:00000000004079f7\n.text:00000000004079fa\n.text:00000000004079fd\n.text:00000000004079ff\n.text:0000000000407a02\n.text:0000000000407a04\n.text:0000000000407a07\n.text:0000000000407a09\n.text:0000000000407a0c\n.text:0000000000407a12\n.text:0000000000407a14\n.text:0000000000407a20\n.text:0000000000407a22\n.text:0000000000407a26\n.text:0000000000407a29\n.text:0000000000407a2c\n.text:0000000000407a2f\n.text:0000000000407a31\n.text:0000000000407a33\n.text:0000000000407a35\n.text:0000000000407a37\n.text:0000000000407a3b\n.text:0000000000407a3d\n.text:0000000000407a43\n.text:0000000000407a45\n.text:0000000000407a48\n.text:0000000000407a4f\n.text:0000000000407a52\n.text:0000000000407a54\n.text:0000000000407a56\n.text:0000000000407a59\n.text:0000000000407a5c\n.text:0000000000407a5f\n.text:0000000000407a63\n.text:0000000000407a66\n.text:0000000000407a6a\n.text:0000000000407a6d\n.text:0000000000407a70\n.text:0000000000407a75\n.text:0000000000407a78\n.text:0000000000407a7b\n.text:0000000000407a7e\n.text:0000000000407a83\n.text:0000000000407a86\n.text:0000000000407a89\n.text:0000000000407a8e\n.text:0000000000407a92\n.text:0000000000407a93\n.text:0000000000407a95\n.text:0000000000407a97\n.text:0000000000407a99\n.text:0000000000407a9b\n.text:0000000000407a9c\n'
p1658
tp1659
sS'quotearg_free'
p1660
(S'\n__stdcall quotearg_free()\n'
p1661
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p1662
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0061a4e8]\nCMP dword ptr [0x0061a4f0],0x2\nJC 0x0040d95a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00402400\nINC RBX\nMOV EAX,dword ptr [0x0061a4f0]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x0040d940\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x61abc0\nCMP RDI,RAX\nJZ 0x0040d983\nCALL 0x00402400\nMOV qword ptr [0x0061a4f8],0x100\nMOV qword ptr [0x0061a500],0x61abc0\nMOV EAX,0x61a4f8\nCMP R14,RAX\nJZ 0x0040d9a0\nMOV RDI,R14\nCALL 0x00402400\nMOV qword ptr [0x0061a4e8],0x61a4f8\nMOV dword ptr [0x0061a4f0],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1663
S'41 57\n41 56\n53\n4c 8b 35 bc cb 20 00\n83 3d bd cb 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 b8 4a ff ff\n48 ff c3\n8b 05 9f cb 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 c0 ab 61 00\n48 39 c7\n74 1b\ne8 93 4a ff ff\n48 c7 05 80 cb 20 00 00 01 00 00\n48 c7 05 7d cb 20 00 c0 ab 61 00\nb8 f8 a4 61 00\n49 39 c6\n74 13\n4c 89 f7\ne8 6b 4a ff ff\n48 c7 05 48 cb 20 00 f8 a4 61 00\nc7 05 46 cb 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p1664
S'.text:000000000040d920\n.text:000000000040d922\n.text:000000000040d924\n.text:000000000040d925\n.text:000000000040d92c\n.text:000000000040d933\n.text:000000000040d935\n.text:000000000040d939\n.text:000000000040d93e\n.text:000000000040d940\n.text:000000000040d943\n.text:000000000040d948\n.text:000000000040d94b\n.text:000000000040d951\n.text:000000000040d955\n.text:000000000040d958\n.text:000000000040d95a\n.text:000000000040d95e\n.text:000000000040d963\n.text:000000000040d966\n.text:000000000040d968\n.text:000000000040d96d\n.text:000000000040d978\n.text:000000000040d983\n.text:000000000040d988\n.text:000000000040d98b\n.text:000000000040d98d\n.text:000000000040d990\n.text:000000000040d995\n.text:000000000040d9a0\n.text:000000000040d9aa\n.text:000000000040d9ab\n.text:000000000040d9ad\n.text:000000000040d9af\n'
p1665
tp1666
sS'quotearg_mem'
p1667
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p1668
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1669
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x0040db80\n'
p1670
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p1671
S'.text:000000000040dba0\n.text:000000000040dba3\n.text:000000000040dba6\n.text:000000000040dba8\n.text:000000000040dbab\n.text:000000000040dbae\n'
p1672
tp1673
sS'rotl32'
p1674
(S'\n__stdcall rotl32()\n'
p1675
V\u000auint32_t rotl32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI << bVar1 | in_EDI >> 0x20 - bVar1);\u000a}\u000a\u000a
p1676
S'MOV ECX,ESI\nROL EDI,CL\nMOV EAX,EDI\nRET\n'
p1677
S'89 f1\nd3 c7\n89 f8\nc3\n'
p1678
S'.text:0000000000410cd0\n.text:0000000000410cd2\n.text:0000000000410cd4\n.text:0000000000410cd6\n'
p1679
tp1680
sS'readtokens0_free'
p1681
(S'\n__stdcall readtokens0_free(Tokens * t)\n'
p1682
V\u000avoid readtokens0_free(Tokens *t)\u000a\u000a{\u000a  _obstack_free(&t->o_data,(void *)0x0);\u000a  _obstack_free(&t->o_tok,(void *)0x0);\u000a  _obstack_free(&t->o_tok_len,(void *)0x0);\u000a  return;\u000a}\u000a\u000a
p1683
S'PUSH RBX\nMOV RBX,RDI\nLEA RDI,[RBX + 0x18]\nXOR ESI,ESI\nCALL 0x00410be0\nLEA RDI,[RBX + 0x70]\nXOR ESI,ESI\nCALL 0x00410be0\nADD RBX,0xc8\nXOR ESI,ESI\nMOV RDI,RBX\nPOP RBX\nJMP 0x00410be0\n'
p1684
S'53\n48 89 fb\n48 8d 7b 18\n31 f6\ne8 01 1d 00 00\n48 8d 7b 70\n31 f6\ne8 f6 1c 00 00\n48 81 c3 c8 00 00 00\n31 f6\n48 89 df\n5b\ne9 e4 1c 00 00\n'
p1685
S'.text:000000000040eed0\n.text:000000000040eed1\n.text:000000000040eed4\n.text:000000000040eed8\n.text:000000000040eeda\n.text:000000000040eedf\n.text:000000000040eee3\n.text:000000000040eee5\n.text:000000000040eeea\n.text:000000000040eef1\n.text:000000000040eef3\n.text:000000000040eef6\n.text:000000000040eef7\n'
p1686
tp1687
sS'set_ordering'
p1688
(S'\n__stdcall set_ordering(char * s, keyfield * key)\n'
p1689
V\u000achar * set_ordering(char *s,keyfield *key)\u000a\u000a{\u000a  char cVar1;\u000a  uint in_EDX;\u000a  \u000a  cVar1 = *s;\u000a  if (cVar1 != 0) {\u000a    do {\u000a      switch(cVar1) {\u000a      case 'M':\u000a        key->month = true;\u000a        break;\u000a      default:\u000a        goto switchD_004045af_caseD_4e;\u000a      case 'R':\u000a        key->random = true;\u000a        break;\u000a      case 'V':\u000a        key->version = true;\u000a        break;\u000a      case 'b':\u000a        if ((in_EDX | 2) == 2) {\u000a          key->skipsblanks = true;\u000a        }\u000a        if (in_EDX - 1 < 2) {\u000a          key->skipeblanks = true;\u000a        }\u000a        break;\u000a      case 'd':\u000a        key->ignore = nondictionary;\u000a        break;\u000a      case 'f':\u000a        key->translate = fold_toupper;\u000a        break;\u000a      case 'g':\u000a        key->general_numeric = true;\u000a        break;\u000a      case 'h':\u000a        key->human_numeric = true;\u000a        break;\u000a      case 'i':\u000a        if (key->ignore == (_Bool *)0x0) {\u000a          key->ignore = nonprinting;\u000a        }\u000a        break;\u000a      case 'n':\u000a        key->numeric = true;\u000a        break;\u000a      case 'r':\u000a        key->reverse = true;\u000a      }\u000a      cVar1 = s[1];\u000a      s = s + 1;\u000a    } while (cVar1 != 0);\u000a  }\u000aswitchD_004045af_caseD_4e:\u000a  return s;\u000a}\u000a\u000a
p1690
S'MOV CL,byte ptr [RDI]\nTEST CL,CL\nJZ 0x0040462f\nMOV EAX,EDX\nOR EAX,0x2\nDEC EDX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX ECX,CL\nADD ECX,-0x4d\nCMP ECX,0x25\nJA 0x0040462f\nJMP qword ptr [0x411e80 + RCX*0x8]\nMOV byte ptr [RSI + 0x36],0x1\nJMP 0x00404620\nMOV byte ptr [RSI + 0x33],0x1\nJMP 0x00404620\nMOV byte ptr [RSI + 0x38],0x1\nJMP 0x00404620\nCMP EAX,0x2\nJNZ 0x004045d1\nMOV byte ptr [RSI + 0x30],0x1\nCMP EDX,0x1\nJA 0x00404620\nMOV byte ptr [RSI + 0x31],0x1\nJMP 0x00404620\nMOV qword ptr [RSI + 0x20],0x61a870\nJMP 0x00404620\nMOV qword ptr [RSI + 0x28],0x61a970\nJMP 0x00404620\nMOV byte ptr [RSI + 0x34],0x1\nJMP 0x00404620\nMOV byte ptr [RSI + 0x35],0x1\nJMP 0x00404620\nCMP qword ptr [RSI + 0x20],0x0\nJNZ 0x00404620\nMOV qword ptr [RSI + 0x20],0x61a770\nJMP 0x00404620\nMOV byte ptr [RSI + 0x32],0x1\nJMP 0x00404620\nMOV byte ptr [RSI + 0x37],0x1\nNOP word ptr [RAX + RAX*0x1]\nMOVZX ECX,byte ptr [RDI + 0x1]\nINC RDI\nTEST CL,CL\nJNZ 0x004045a0\nMOV RAX,RDI\nRET\n'
p1691
S'8a 0f\n84 c9\n0f 84 a5 00 00 00\n89 d0\n83 c8 02\nff ca\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f be c9\n83 c1 b3\n83 f9 25\n0f 87 80 00 00 00\nff 24 cd 80 1e 41 00\nc6 46 36 01\neb 64\nc6 46 33 01\neb 5e\nc6 46 38 01\neb 58\n83 f8 02\n75 04\nc6 46 30 01\n83 fa 01\n77 4a\nc6 46 31 01\neb 44\n48 c7 46 20 70 a8 61 00\neb 3a\n48 c7 46 28 70 a9 61 00\neb 30\nc6 46 34 01\neb 2a\nc6 46 35 01\neb 24\n48 83 7e 20 00\n75 1d\n48 c7 46 20 70 a7 61 00\neb 13\nc6 46 32 01\neb 0d\nc6 46 37 01\n66 0f 1f 84 00 00 00 00 00\n0f b6 4f 01\n48 ff c7\n84 c9\n0f 85 71 ff ff ff\n48 89 f8\nc3\n'
p1692
S'.text:0000000000404580\n.text:0000000000404582\n.text:0000000000404584\n.text:000000000040458a\n.text:000000000040458c\n.text:000000000040458f\n.text:0000000000404591\n.text:00000000004045a0\n.text:00000000004045a3\n.text:00000000004045a6\n.text:00000000004045a9\n.text:00000000004045af\n.text:00000000004045b6\n.text:00000000004045ba\n.text:00000000004045bc\n.text:00000000004045c0\n.text:00000000004045c2\n.text:00000000004045c6\n.text:00000000004045c8\n.text:00000000004045cb\n.text:00000000004045cd\n.text:00000000004045d1\n.text:00000000004045d4\n.text:00000000004045d6\n.text:00000000004045da\n.text:00000000004045dc\n.text:00000000004045e4\n.text:00000000004045e6\n.text:00000000004045ee\n.text:00000000004045f0\n.text:00000000004045f4\n.text:00000000004045f6\n.text:00000000004045fa\n.text:00000000004045fc\n.text:0000000000404601\n.text:0000000000404603\n.text:000000000040460b\n.text:000000000040460d\n.text:0000000000404611\n.text:0000000000404613\n.text:0000000000404617\n.text:0000000000404620\n.text:0000000000404624\n.text:0000000000404627\n.text:0000000000404629\n.text:000000000040462f\n.text:0000000000404632\n'
p1693
tp1694
sS'register_proc'
p1695
(S'\n__stdcall register_proc(tempnode * temp)\n'
p1696
V\u000avoid register_proc(tempnode *temp)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (proctab == (Hash_table *)0x0) {\u000a    proctab = hash_initialize(0x2f,(Hash_tuning *)0x0,proctab_hasher,proctab_comparator,\u000a                              (void (*)(void *))0x0);\u000a    if (proctab == (Hash_table *)0x0) goto LAB_00408a7d;\u000a  }\u000a  temp->state = 1;\u000a  pvVar1 = hash_insert(proctab,temp);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return;\u000a  }\u000aLAB_00408a7d:\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1697
S'PUSH RBX\nMOV RBX,RDI\nCMP qword ptr [0x0061ab28],0x0\nJNZ 0x00408a63\nMOV EDI,0x2f\nXOR ESI,ESI\nMOV EDX,0x408be0\nMOV ECX,0x408bf0\nXOR R8D,R8D\nCALL 0x0040b560\nMOV qword ptr [0x0061ab28],RAX\nTEST RAX,RAX\nJZ 0x00408a7d\nMOV byte ptr [RBX + 0xc],0x1\nMOV RDI,qword ptr [0x0061ab28]\nMOV RSI,RBX\nCALL 0x0040be30\nTEST RAX,RAX\nJZ 0x00408a7d\nPOP RBX\nRET\nCALL 0x0040fd10\n'
p1698
S'53\n48 89 fb\n48 83 3d ec 20 21 00 00\n75 25\nbf 2f 00 00 00\n31 f6\nba e0 8b 40 00\nb9 f0 8b 40 00\n45 31 c0\ne8 09 2b 00 00\n48 89 05 ca 20 21 00\n48 85 c0\n74 1a\nc6 43 0c 01\n48 8b 3d ba 20 21 00\n48 89 de\ne8 ba 33 00 00\n48 85 c0\n74 02\n5b\nc3\ne8 8e 72 00 00\n'
p1699
S'.text:0000000000408a30\n.text:0000000000408a31\n.text:0000000000408a34\n.text:0000000000408a3c\n.text:0000000000408a3e\n.text:0000000000408a43\n.text:0000000000408a45\n.text:0000000000408a4a\n.text:0000000000408a4f\n.text:0000000000408a52\n.text:0000000000408a57\n.text:0000000000408a5e\n.text:0000000000408a61\n.text:0000000000408a63\n.text:0000000000408a67\n.text:0000000000408a6e\n.text:0000000000408a71\n.text:0000000000408a76\n.text:0000000000408a79\n.text:0000000000408a7b\n.text:0000000000408a7c\n.text:0000000000408a7d\n'
p1700
tp1701
sS'free'
p1702
(S'\n__stdcall free(void * __ptr)\n'
p1703
V\u000a/* WARNING: Switch with 1 destination removed at 0x00402400 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1704
S'JMP qword ptr [0x0061a030]\n'
p1705
S'ff 25 2a 7c 21 00\n'
p1706
S'.plt:0000000000402400\n'
p1707
tp1708
sS'euidaccess'
p1709
(S'\n__stdcall euidaccess(char * __name, int __type)\n'
p1710
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint euidaccess(char *__name,int __type)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_euidaccess_0061a328)();\u000a  return iVar1;\u000a}\u000a\u000a
p1711
S'JMP qword ptr [0x0061a328]\n'
p1712
S'ff 25 32 79 21 00\n'
p1713
S'.plt:00000000004029f0\n'
p1714
tp1715
sS'fopen'
p1716
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p1717
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_0061a300)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1718
S'JMP qword ptr [0x0061a300]\n'
p1719
S'ff 25 5a 79 21 00\n'
p1720
S'.plt:00000000004029a0\n'
p1721
tp1722
sS'keycompare'
p1723
(S'\n__stdcall keycompare(line * a, line * b)\n'
p1724
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000aint keycompare(line *a,line *b)\u000a\u000a{\u000a  _Bool *p_Var1;\u000a  char *pcVar2;\u000a  size_t sVar3;\u000a  bool bVar4;\u000a  byte bVar5;\u000a  _Bool _Var6;\u000a  byte bVar7;\u000a  int iVar8;\u000a  int iVar9;\u000a  char *in_RAX;\u000a  char *pcVar10;\u000a  char *pcVar11;\u000a  char *__s1;\u000a  char *lena;\u000a  char *__n;\u000a  char *s2;\u000a  char *lenb;\u000a  keyfield *key;\u000a  bool bVar12;\u000a  char stackbuf [4000];\u000a  char local_1022;\u000a  char local_1021;\u000a  char *local_1020;\u000a  uint local_1018;\u000a  char *local_ff0;\u000a  char local_fd8 [4008];\u000a  \u000a  __s1 = a->keybeg;\u000a  __n = a->keylim;\u000a  s2 = b->keybeg;\u000a  pcVar11 = b->keylim;\u000a  local_1022 = (char)in_RAX;\u000a  key = keylist;\u000a  local_1021 = local_1022;\u000a  local_ff0 = in_RAX;\u000aLAB_00406e10:\u000a  p_Var1 = key->ignore;\u000a  pcVar2 = key->translate;\u000a  if (__n < __s1) {\u000a    __n = __s1;\u000a  }\u000a  if (pcVar11 < s2) {\u000a    pcVar11 = s2;\u000a  }\u000a  lena = __n + -(long)__s1;\u000a  lenb = pcVar11 + -(long)s2;\u000a  if ((((hard_LC_COLLATE != false) || (_Var6 = key_numeric(key), _Var6 != false)) ||\u000a      (key->month != false)) || ((key->random != false || (key->version != false)))) {\u000a    bVar12 = ((ulong)pcVar2 | (ulong)p_Var1) == 0;\u000a    bVar4 = !bVar12;\u000a    if (bVar12) {\u000a      local_1021 = *__n;\u000a      *__n = 0;\u000a      local_1022 = *pcVar11;\u000a      local_1020 = __s1;\u000a    }\u000a    else {\u000a      if (lenb + 2 + (long)lena < (char *)0xfa1) {\u000a        local_ff0 = (char *)0x0;\u000a        local_1020 = local_fd8;\u000a      }\u000a      else {\u000a        local_ff0 = (char *)xmalloc((size_t)(lenb + 2 + (long)lena));\u000a        local_1020 = local_ff0;\u000a      }\u000a      if (lena == (char *)0x0) {\u000a        __n = (char *)0x0;\u000a      }\u000a      else {\u000a        __n = (char *)0x0;\u000a        pcVar11 = lena;\u000a        do {\u000a          if ((p_Var1 == (_Bool *)0x0) || (bVar7 = to_uchar(), p_Var1[(ulong)bVar7] == false)) {\u000a            pcVar10 = __s1;\u000a            if (pcVar2 != (char *)0x0) {\u000a              bVar7 = to_uchar();\u000a              pcVar10 = pcVar2 + (ulong)bVar7;\u000a            }\u000a            local_1020[(long)__n] = *pcVar10;\u000a            __n = __n + 1;\u000a          }\u000a          __s1 = __s1 + 1;\u000a          pcVar11 = pcVar11 + -1;\u000a        } while (pcVar11 != (char *)0x0);\u000a      }\u000a      lena = local_1020 + 1 + (long)lena;\u000a      local_1020[(long)__n] = 0;\u000a      pcVar11 = lenb;\u000a      lenb = (char *)0x0;\u000a      while (pcVar11 != (char *)0x0) {\u000a        if ((p_Var1 == (_Bool *)0x0) || (bVar7 = to_uchar(), p_Var1[(ulong)bVar7] == false)) {\u000a          __s1 = s2;\u000a          if (pcVar2 != (char *)0x0) {\u000a            bVar7 = to_uchar();\u000a            __s1 = pcVar2 + (ulong)bVar7;\u000a          }\u000a          lena[(long)lenb] = *__s1;\u000a          lenb = lenb + 1;\u000a        }\u000a        s2 = s2 + 1;\u000a        pcVar11 = pcVar11 + -1;\u000a      }\u000a      pcVar11 = lena + (long)lenb;\u000a      s2 = lena;\u000a      lena = __n;\u000a    }\u000a    *pcVar11 = 0;\u000a    if (key->numeric == false) {\u000a      if (key->general_numeric == false) {\u000a        if (key->human_numeric == false) {\u000a          if (key->month == false) {\u000a            if (key->random == false) {\u000a              if (key->version == false) {\u000a                if (lena == (char *)0x0) {\u000a                  local_1018 = -(uint)(lenb != (char *)0x0);\u000a                  bVar4 = !bVar4;\u000a                }\u000a                else {\u000a                  if (lenb == (char *)0x0) {\u000a                    local_1018 = 1;\u000a                  }\u000a                  else {\u000a                    local_1018 = xmemcoll0(local_1020,(size_t)(lena + 1),s2,(size_t)(lenb + 1));\u000a                  }\u000a                }\u000a              }\u000a              else {\u000a                local_1018 = filevercmp(local_1020,s2);\u000a              }\u000a            }\u000a            else {\u000a              local_1018 = compare_random(local_1020,(size_t)lena,s2,(size_t)lenb);\u000a            }\u000a          }\u000a          else {\u000a            iVar8 = getmonth(local_1020,(char **)0x0);\u000a            iVar9 = getmonth(s2,(char **)0x0);\u000a            local_1018 = iVar8 - iVar9;\u000a          }\u000a        }\u000a        else {\u000a          local_1018 = human_numcompare(local_1020,s2);\u000a        }\u000a      }\u000a      else {\u000a        local_1018 = general_numcompare(local_1020,s2);\u000a      }\u000a    }\u000a    else {\u000a      local_1018 = numcompare(local_1020,s2);\u000a    }\u000a    if (bVar4) {\u000a      free(local_ff0);\u000a    }\u000a    else {\u000a      local_1020[(long)lena] = local_1021;\u000a      s2[(long)lenb] = local_1022;\u000a    }\u000a    goto joined_r0x00406dc1;\u000a  }\u000a  if (p_Var1 != (_Bool *)0x0) {\u000a    if (pcVar2 == (char *)0x0) {\u000a      do {\u000a        while (__s1 < __n) {\u000a          bVar7 = to_uchar();\u000a          if (p_Var1[(ulong)bVar7] == false) {\u000a            bVar7 = 1;\u000a            goto joined_r0x00406bdc;\u000a          }\u000a          __s1 = __s1 + 1;\u000a        }\u000a        bVar7 = 0;\u000ajoined_r0x00406bdc:\u000a        while( true ) {\u000a          iVar8 = 0;\u000a          if (pcVar11 <= s2) goto LAB_00406dd2;\u000a          bVar5 = to_uchar();\u000a          if (p_Var1[(ulong)bVar5] == false) break;\u000a          s2 = (char *)((long)s2 + 1);\u000a        }\u000a        if (bVar7 == 0) goto LAB_00406dcc;\u000a        bVar7 = to_uchar();\u000a        bVar5 = to_uchar();\u000a        local_1018 = (uint)bVar7 - (uint)bVar5;\u000a        if (local_1018 != 0) goto LAB_0040700c;\u000a        __s1 = __s1 + 1;\u000a        s2 = (char *)((long)s2 + 1);\u000a      } while( true );\u000a    }\u000a    do {\u000a      while (__s1 < __n) {\u000a        bVar7 = to_uchar();\u000a        if (p_Var1[(ulong)bVar7] == false) {\u000a          bVar7 = 1;\u000a          goto joined_r0x00406c61;\u000a        }\u000a        __s1 = (char *)((long)__s1 + 1);\u000a      }\u000a      bVar7 = 0;\u000ajoined_r0x00406c61:\u000a      while( true ) {\u000a        iVar8 = 0;\u000a        if (pcVar11 <= s2) goto LAB_00406db3;\u000a        bVar5 = to_uchar();\u000a        if (p_Var1[(ulong)bVar5] == false) break;\u000a        s2 = (char *)((long)s2 + 1);\u000a      }\u000a      if (bVar7 == 0) goto LAB_00406dad;\u000a      to_uchar();\u000a      bVar7 = to_uchar();\u000a      to_uchar();\u000a      bVar5 = to_uchar();\u000a      local_1018 = (uint)bVar7 - (uint)bVar5;\u000a      if (local_1018 != 0) goto LAB_0040700c;\u000a      __s1 = (char *)((long)__s1 + 1);\u000a      s2 = (char *)((long)s2 + 1);\u000a    } while( true );\u000a  }\u000a  if (lena == (char *)0x0) {\u000a    local_1018 = -(uint)(lenb != (char *)0x0);\u000a    goto joined_r0x00406dc1;\u000a  }\u000a  if (lenb == (char *)0x0) {\u000a    local_1018 = 1;\u000a    goto LAB_0040700c;\u000a  }\u000a  if (pcVar2 == (char *)0x0) {\u000a    __n = lenb;\u000a    if (lena < lenb) {\u000a      __n = lena;\u000a    }\u000a    local_1018 = memcmp(__s1,s2,(size_t)__n);\u000a    if (local_1018 != 0) goto LAB_0040700c;\u000a  }\u000a  else {\u000a    while ((s2 < pcVar11 && (__s1 < __n))) {\u000a      __s1 = __s1 + 1;\u000a      to_uchar();\u000a      bVar7 = to_uchar();\u000a      s2 = s2 + 1;\u000a      to_uchar();\u000a      bVar5 = to_uchar();\u000a      local_1018 = (uint)bVar7;\u000a      local_1018 = local_1018 - (uint)bVar5;\u000a      if (local_1018 != 0) goto LAB_0040700c;\u000a    }\u000a  }\u000a  local_1018 = (uint)(lena != lenb);\u000a  if (lena < lenb) {\u000a    local_1018 = 0xffffffff;\u000a    goto LAB_0040700c;\u000a  }\u000a  if (lena != lenb) goto LAB_0040700c;\u000a  goto LAB_0040699e;\u000aLAB_00406dcc:\u000a  iVar8 = 1;\u000aLAB_00406dd2:\u000a  local_1018 = (uint)bVar7 - iVar8;\u000a  goto joined_r0x00406dc1;\u000aLAB_00406dad:\u000a  iVar8 = 1;\u000aLAB_00406db3:\u000a  local_1018 = (uint)bVar7 - iVar8;\u000ajoined_r0x00406dc1:\u000a  if (local_1018 != 0) {\u000aLAB_0040700c:\u000a    if (key->reverse != false) {\u000a      return -local_1018;\u000a    }\u000a    return local_1018;\u000a  }\u000aLAB_0040699e:\u000a  key = key->next;\u000a  if (key == (keyfield *)0x0) {\u000a    return (int)0;\u000a  }\u000a  if (key->eword == 0xffffffffffffffff) {\u000a    __n = a->text + (a->length - 1);\u000a    pcVar11 = b->text + (b->length - 1);\u000a    sVar3 = key->sword;\u000a  }\u000a  else {\u000a    __n = limfield(a,key);\u000a    pcVar11 = limfield(b,key);\u000a    sVar3 = key->sword;\u000a  }\u000a  if (sVar3 == 0xffffffffffffffff) {\u000a    __s1 = a->text;\u000a    s2 = b->text;\u000a    if (key->skipsblanks != false) {\u000a      while ((__s1 < __n && (bVar7 = to_uchar(), blanks[(ulong)bVar7] != false))) {\u000a        __s1 = __s1 + 1;\u000a      }\u000a      while ((s2 < pcVar11 && (bVar7 = to_uchar(), blanks[(ulong)bVar7] != false))) {\u000a        s2 = s2 + 1;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    __s1 = begfield(a,key);\u000a    s2 = begfield(b,key);\u000a  }\u000a  goto LAB_00406e10;\u000a}\u000a\u000a
p1725
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xff8\nMOV R15,qword ptr [0x0061a650]\nMOV RBP,qword ptr [RDI + 0x10]\nMOV qword ptr [RSP + 0x28],RDI\nMOV R12,qword ptr [RDI + 0x18]\nMOV R13,qword ptr [RSI + 0x10]\nMOV qword ptr [RSP + 0x30],RSI\nMOV RBX,qword ptr [RSI + 0x18]\nMOV byte ptr [RSP + 0x7],AL\nMOV byte ptr [RSP + 0x6],AL\nMOV qword ptr [RSP + 0x38],RAX\nJMP 0x00406e10\nLEA RCX,[RBP + R15*0x1]\nMOV R14,R15\nMOV R15,RBX\nMOV BL,byte ptr [RSP + 0x18]\nMOV byte ptr [RCX],0x0\nCMP byte ptr [R15 + 0x32],0x0\nJZ 0x00406900\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RSI,RBP\nCALL 0x00407030\nJMP 0x00406930\nCMP byte ptr [R15 + 0x34],0x0\nJZ 0x00406916\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RSI,RBP\nCALL 0x004070a0\nJMP 0x00406930\nCMP byte ptr [R15 + 0x35],0x0\nJZ 0x0040694d\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RSI,RBP\nCALL 0x00407160\nNOP word ptr [RAX + RAX*0x1]\nMOV EDX,EAX\nTEST BL,BL\nJZ 0x00406980\nMOV RDI,qword ptr [RSP + 0x38]\nMOV EBX,EDX\nCALL 0x00402400\nMOV EDX,EBX\nTEST EDX,EDX\nJZ 0x0040699e\nJMP 0x0040700c\nCMP byte ptr [R15 + 0x36],0x0\nJZ 0x00406a77\nXOR ESI,ESI\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x004071f0\nMOV R13D,EAX\nXOR ESI,ESI\nMOV RDI,RBP\nCALL 0x004071f0\nMOV EDX,R13D\nSUB EDX,EAX\nTEST BL,BL\nJNZ 0x00406936\nNOP word ptr [RAX + RAX*0x1]\nMOV AL,byte ptr [RSP + 0x7]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV byte ptr [RCX + R12*0x1],AL\nMOV AL,byte ptr [RSP + 0x6]\nMOV byte ptr [RBP + R14*0x1],AL\nTEST EDX,EDX\nJNZ 0x0040700c\nMOV R15,qword ptr [R15 + 0x40]\nTEST R15,R15\nJZ 0x00406ffc\nCMP qword ptr [R15 + 0x10],-0x1\nJZ 0x004069e0\nMOV RDI,qword ptr [RSP + 0x28]\nMOV RSI,R15\nCALL 0x00406610\nMOV R12,RAX\nMOV RDI,qword ptr [RSP + 0x30]\nMOV RSI,R15\nCALL 0x00406610\nMOV RBX,RAX\nCMP qword ptr [R15],-0x1\nJNZ 0x00406df0\nJMP 0x00406a0c\nMOV RCX,qword ptr [RSP + 0x28]\nMOV RAX,qword ptr [RCX]\nMOV RCX,qword ptr [RCX + 0x8]\nLEA R12,[RAX + RCX*0x1 + -0x1]\nMOV RCX,qword ptr [RSP + 0x30]\nMOV RAX,qword ptr [RCX]\nMOV RCX,qword ptr [RCX + 0x8]\nLEA RBX,[RAX + RCX*0x1 + -0x1]\nCMP qword ptr [R15],-0x1\nJNZ 0x00406df0\nMOV RAX,qword ptr [RSP + 0x28]\nMOV RBP,qword ptr [RAX]\nMOV RAX,qword ptr [RSP + 0x30]\nMOV R13,qword ptr [RAX]\nCMP byte ptr [R15 + 0x30],0x0\nJZ 0x00406e10\nJMP 0x00406a33\nINC RBP\nCMP RBP,R12\nJNC 0x00406a53\nMOVSX EDI,byte ptr [RBP]\nCALL 0x004042c0\nMOVZX EAX,AL\nCMP byte ptr [0x61a670 + RAX],0x0\nJNZ 0x00406a30\nJMP 0x00406a53\nINC R13\nCMP R13,RBX\nJNC 0x00406e10\nMOVSX EDI,byte ptr [R13]\nCALL 0x004042c0\nMOVZX EAX,AL\nCMP byte ptr [0x61a670 + RAX],0x0\nJNZ 0x00406a50\nJMP 0x00406e10\nCMP byte ptr [R15 + 0x33],0x0\nJZ 0x00406aae\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RSI,R12\nMOV RDX,RBP\nMOV RCX,R14\nCALL 0x00407300\nJMP 0x00406930\nTEST RSI,RSI\nJZ 0x00406acb\nTEST RCX,RCX\nMOV qword ptr [RSP + 0x40],R15\nJNZ 0x00406cfc\nJMP 0x00406b86\nCMP byte ptr [R15 + 0x38],0x0\nJZ 0x00406b53\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RSI,RBP\nCALL 0x0040ac40\nJMP 0x00406930\nTEST R12,R12\nJZ 0x00406d38\nTEST R14,R14\nJZ 0x00407000\nTEST RCX,RCX\nJZ 0x00406d5f\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP R13,qword ptr [RSP + 0x18]\nJNC 0x00406d7e\nCMP RBP,qword ptr [RSP + 0x8]\nJNC 0x00406d7e\nMOVSX EDI,byte ptr [RBP]\nINC RBP\nCALL 0x004042c0\nMOVZX EAX,AL\nMOV RBX,qword ptr [RSP + 0x20]\nMOVSX EDI,byte ptr [RBX + RAX*0x1]\nCALL 0x004042c0\nMOVZX EAX,AL\nMOV dword ptr [RSP + 0x10],EAX\nMOVSX EDI,byte ptr [R13]\nINC R13\nCALL 0x004042c0\nMOVZX EAX,AL\nMOVSX EDI,byte ptr [RBX + RAX*0x1]\nCALL 0x004042c0\nMOV EDX,dword ptr [RSP + 0x10]\nMOVZX EAX,AL\nSUB EDX,EAX\nJZ 0x00406af0\nJMP 0x0040700c\nTEST R12,R12\nJZ 0x00406d4a\nTEST R14,R14\nJZ 0x00406d9b\nLEA RSI,[R12 + 0x1]\nLEA RCX,[R14 + 0x1]\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RDX,RBP\nCALL 0x0040fe60\nJMP 0x00406930\nINC RBP\nINC R13\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x8]\nCMP RBP,RBX\nJC 0x00406ba8\nJMP 0x00406bd1\nINC RBP\nCMP RBP,RBX\nJNC 0x00406bd1\nMOVSX EDI,byte ptr [RBP]\nCALL 0x004042c0\nMOVZX EAX,AL\nMOV RCX,qword ptr [RSP + 0x10]\nCMP byte ptr [RCX + RAX*0x1],0x0\nJNZ 0x00406ba0\nMOV R14,R15\nMOV R15B,0x1\nCMP R13,qword ptr [RSP + 0x18]\nJC 0x00406bfe\nJMP 0x00406dd2\nMOV R14,R15\nXOR R15D,R15D\nCMP R13,qword ptr [RSP + 0x18]\nJC 0x00406bfe\nJMP 0x00406dd2\nINC R13\nCMP R13,qword ptr [RSP + 0x18]\nJNC 0x00406dd2\nMOVSX EDI,byte ptr [R13]\nCALL 0x004042c0\nMOVZX EAX,AL\nMOV RCX,qword ptr [RSP + 0x10]\nCMP byte ptr [RCX + RAX*0x1],0x0\nJNZ 0x00406bf0\nTEST R15B,R15B\nJZ 0x00406dcc\nMOVSX EDI,byte ptr [RBP]\nCALL 0x004042c0\nMOVZX EBX,AL\nMOVSX EDI,byte ptr [R13]\nCALL 0x004042c0\nMOV EDX,EBX\nMOVZX EAX,AL\nSUB EDX,EAX\nMOV R15,R14\nJZ 0x00406b80\nJMP 0x0040700c\nXOR R14D,R14D\nCMP R13,qword ptr [RSP + 0x18]\nJC 0x00406c8e\nJMP 0x00406db3\nXOR R14D,R14D\nCMP R13,qword ptr [RSP + 0x18]\nJC 0x00406c8e\nJMP 0x00406db3\nMOV R14B,0x1\nCMP R13,qword ptr [RSP + 0x18]\nJC 0x00406c8e\nJMP 0x00406db3\nINC R13\nCMP R13,qword ptr [RSP + 0x18]\nJNC 0x00406db3\nMOVSX EDI,byte ptr [R13]\nCALL 0x004042c0\nMOVZX EAX,AL\nMOV RCX,qword ptr [RSP + 0x10]\nCMP byte ptr [RCX + RAX*0x1],0x0\nJNZ 0x00406c80\nTEST R14B,R14B\nJZ 0x00406dad\nMOVSX EDI,byte ptr [RBP]\nCALL 0x004042c0\nMOVZX EAX,AL\nMOV RBX,qword ptr [RSP + 0x20]\nMOVSX EDI,byte ptr [RBX + RAX*0x1]\nCALL 0x004042c0\nMOVZX R14D,AL\nMOVSX EDI,byte ptr [R13]\nCALL 0x004042c0\nMOVZX EAX,AL\nMOVSX EDI,byte ptr [RBX + RAX*0x1]\nCALL 0x004042c0\nMOV EDX,R14D\nMOVZX EAX,AL\nSUB EDX,EAX\nMOV R15,qword ptr [RSP + 0x40]\nJNZ 0x0040700c\nINC RBP\nINC R13\nXOR R15D,R15D\nMOV RBX,qword ptr [RSP + 0x8]\nCMP RBP,RBX\nJNC 0x00406c59\nNOP dword ptr [RAX]\nMOVSX EDI,byte ptr [RBP]\nCALL 0x004042c0\nMOVZX EAX,AL\nMOV RCX,qword ptr [RSP + 0x10]\nCMP byte ptr [RCX + RAX*0x1],0x0\nJZ 0x00406c68\nINC RBP\nCMP RBP,RBX\nJC 0x00406d10\nJMP 0x00406c4a\nNEG R14\nSBB EDX,EDX\nTEST EDX,EDX\nJZ 0x0040699e\nJMP 0x0040700c\nMOV RAX,R14\nNEG RAX\nSBB EDX,EDX\nTEST BL,BL\nJNZ 0x00406936\nJMP 0x00406980\nCMP R12,R14\nMOV RDX,R14\nCMOVC RDX,R12\nMOV RDI,RBP\nMOV RSI,R13\nCALL 0x00402710\nMOV EDX,EAX\nTEST EDX,EDX\nJNZ 0x0040700c\nXOR EDX,EDX\nCMP R12,R14\nSETNZ AL\nJC 0x00407007\nMOV DL,AL\nTEST EDX,EDX\nJZ 0x0040699e\nJMP 0x0040700c\nMOV EDX,0x1\nTEST BL,BL\nJNZ 0x00406936\nJMP 0x00406980\nMOV R15D,0x1\nMOVZX EDX,R14B\nSUB EDX,R15D\nMOV R15,qword ptr [RSP + 0x40]\nTEST EDX,EDX\nJZ 0x0040699e\nJMP 0x0040700c\nMOV R12D,0x1\nMOVZX EDX,R15B\nSUB EDX,R12D\nMOV R15,R14\nTEST EDX,EDX\nJZ 0x0040699e\nJMP 0x0040700c\nMOV RDI,qword ptr [RSP + 0x28]\nMOV RSI,R15\nCALL 0x00406750\nMOV RBP,RAX\nMOV RDI,qword ptr [RSP + 0x30]\nMOV RSI,R15\nCALL 0x00406750\nMOV R13,RAX\nMOV RSI,qword ptr [R15 + 0x20]\nMOV RCX,qword ptr [R15 + 0x28]\nCMP RBP,R12\nCMOVA R12,RBP\nCMP R13,RBX\nCMOVA RBX,R13\nMOV qword ptr [RSP + 0x8],R12\nSUB R12,RBP\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RBX\nSUB R14,R13\nCMP byte ptr [0x0061a5b0],0x0\nMOV qword ptr [RSP + 0x20],RCX\nMOV qword ptr [RSP + 0x10],RSI\nJNZ 0x00406e80\nMOV RDI,R15\nCALL 0x00405da0\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x20]\nTEST AL,AL\nJNZ 0x00406e80\nCMP byte ptr [R15 + 0x36],0x0\nJNZ 0x00406e80\nCMP byte ptr [R15 + 0x33],0x0\nJNZ 0x00406e80\nCMP byte ptr [R15 + 0x38],0x0\nJZ 0x00406a96\nNOP dword ptr [RAX + RAX*0x1]\nMOV RAX,RCX\nOR RAX,RSI\nSETNZ BL\nJZ 0x00406eb0\nLEA RDI,[R14 + R12*0x1 + 0x2]\nCMP RDI,0xfa1\nJNC 0x00406ee0\nLEA RAX,[RSP + 0x50]\nMOV qword ptr [RSP + 0x8],RAX\nXOR EAX,EAX\nJMP 0x00406ef4\nMOV RCX,qword ptr [RSP + 0x8]\nMOV AL,byte ptr [RCX]\nMOV byte ptr [RSP + 0x7],AL\nMOV byte ptr [RCX],0x0\nMOV RCX,qword ptr [RSP + 0x18]\nMOV AL,byte ptr [RCX]\nMOV byte ptr [RSP + 0x6],AL\nMOV qword ptr [RSP + 0x8],RBP\nMOV RBP,R13\nJMP 0x004068df\nCALL 0x0040fb80\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x20]\nMOV qword ptr [RSP + 0x8],RAX\nMOV qword ptr [RSP + 0x38],RAX\nMOV byte ptr [RSP + 0x18],BL\nTEST R12,R12\nMOV qword ptr [RSP + 0x48],R12\nJZ 0x00406f6b\nMOV RBX,R12\nXOR R12D,R12D\nNOP dword ptr [RAX]\nTEST RSI,RSI\nJZ 0x00406f31\nMOVSX EDI,byte ptr [RBP]\nCALL 0x004042c0\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x20]\nMOVZX EAX,AL\nCMP byte ptr [RSI + RAX*0x1],0x0\nJNZ 0x00406f61\nTEST RCX,RCX\nMOV RAX,RBP\nJZ 0x00406f52\nMOVSX EDI,byte ptr [RBP]\nCALL 0x004042c0\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x20]\nMOVZX EAX,AL\nADD RAX,RCX\nMOVZX EAX,byte ptr [RAX]\nMOV RDX,qword ptr [RSP + 0x8]\nMOV byte ptr [RDX + R12*0x1],AL\nINC R12\nINC RBP\nDEC RBX\nJNZ 0x00406f10\nJMP 0x00406f6e\nXOR R12D,R12D\nMOV RBX,R15\nMOV RAX,qword ptr [RSP + 0x8]\nMOV RDX,qword ptr [RSP + 0x48]\nLEA RBP,[RAX + RDX*0x1 + 0x1]\nMOV byte ptr [RAX + R12*0x1],0x0\nXOR R15D,R15D\nTEST R14,R14\nJZ 0x004068d0\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST RSI,RSI\nJZ 0x00406fc2\nMOVSX EDI,byte ptr [R13]\nCALL 0x004042c0\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x20]\nMOVZX EAX,AL\nCMP byte ptr [RSI + RAX*0x1],0x0\nJNZ 0x00406fef\nTEST RCX,RCX\nMOV RAX,R13\nJZ 0x00406fe4\nMOVSX EDI,byte ptr [R13]\nCALL 0x004042c0\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x20]\nMOVZX EAX,AL\nADD RAX,RCX\nMOVZX EAX,byte ptr [RAX]\nMOV byte ptr [RBP + R15*0x1],AL\nINC R15\nINC R13\nDEC R14\nJNZ 0x00406fa0\nJMP 0x004068d0\nXOR EAX,EAX\nJMP 0x00407018\nMOV EDX,0x1\nJMP 0x0040700c\nMOV EDX,0xffffffff\nMOV EAX,EDX\nNEG EAX\nCMP byte ptr [R15 + 0x37],0x0\nCMOVZ EAX,EDX\nADD RSP,0xff8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1726
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec f8 0f 00 00\n4c 8b 3d b8 3d 21 00\n48 8b 6f 10\n48 89 7c 24 28\n4c 8b 67 18\n4c 8b 6e 10\n48 89 74 24 30\n48 8b 5e 18\n88 44 24 07\n88 44 24 06\n48 89 44 24 38\ne9 4c 05 00 00\n4a 8d 4c 3d 00\n4d 89 fe\n49 89 df\n8a 5c 24 18\nc6 01 00\n41 80 7f 32 00\n74 17\n48 8b 7c 24 08\n48 89 ee\ne8 3a 07 00 00\neb 38\n41 80 7f 34 00\n74 0f\n48 8b 7c 24 08\n48 89 ee\ne8 8c 07 00 00\neb 1a\n41 80 7f 35 00\n74 30\n48 8b 7c 24 08\n48 89 ee\ne8 36 08 00 00\n66 0f 1f 44 00 00\n89 c2\n84 db\n74 4a\n48 8b 7c 24 38\n89 d3\ne8 be ba ff ff\n89 da\n85 d2\n74 56\ne9 bf 06 00 00\n41 80 7f 36 00\n0f 84 1f 01 00 00\n31 f6\n48 8b 7c 24 08\ne8 8c 08 00 00\n41 89 c5\n31 f6\n48 89 ef\ne8 7f 08 00 00\n44 89 ea\n29 c2\n84 db\n75 bc\n66 0f 1f 44 00 00\n8a 44 24 07\n48 8b 4c 24 08\n42 88 04 21\n8a 44 24 06\n42 88 44 35 00\n85 d2\n0f 85 6e 06 00 00\n4d 8b 7f 40\n4d 85 ff\n0f 84 51 06 00 00\n49 83 7f 10 ff\n74 2e\n48 8b 7c 24 28\n4c 89 fe\ne8 51 fc ff ff\n49 89 c4\n48 8b 7c 24 30\n4c 89 fe\ne8 41 fc ff ff\n48 89 c3\n49 83 3f ff\n0f 85 14 04 00 00\neb 2e\n48 8b 4c 24 28\n48 8b 01\n48 8b 49 08\n4c 8d 64 08 ff\n48 8b 4c 24 30\n48 8b 01\n48 8b 49 08\n48 8d 5c 08 ff\n49 83 3f ff\n0f 85 e4 03 00 00\n48 8b 44 24 28\n48 8b 28\n48 8b 44 24 30\n4c 8b 28\n41 80 7f 30 00\n0f 84 e9 03 00 00\neb 0a\n48 ff c5\n4c 39 e5\n73 1b\n0f be 7d 00\ne8 7f d8 ff ff\n0f b6 c0\n80 b8 70 a6 61 00 00\n75 e3\neb 04\n49 ff c5\n49 39 dd\n0f 83 b4 03 00 00\n41 0f be 7d 00\ne8 5a d8 ff ff\n0f b6 c0\n80 b8 70 a6 61 00 00\n75 de\ne9 99 03 00 00\n41 80 7f 33 00\n74 30\n48 8b 7c 24 08\n4c 89 e6\n48 89 ea\n4c 89 f1\ne8 6f 08 00 00\ne9 9a fe ff ff\n48 85 f6\n74 30\n48 85 c9\n4c 89 7c 24 40\n0f 85 53 02 00 00\ne9 d8 00 00 00\n41 80 7f 38 00\n0f 84 9a 00 00 00\n48 8b 7c 24 08\n48 89 ee\ne8 7a 41 00 00\ne9 65 fe ff ff\n4d 85 e4\n0f 84 64 02 00 00\n4d 85 f6\n0f 84 23 05 00 00\n48 85 c9\n0f 84 79 02 00 00\n66 2e 0f 1f 84 00 00 00 00 00\n4c 3b 6c 24 18\n0f 83 83 02 00 00\n48 3b 6c 24 08\n0f 83 78 02 00 00\n0f be 7d 00\n48 ff c5\ne8 ae d7 ff ff\n0f b6 c0\n48 8b 5c 24 20\n0f be 3c 03\ne8 9d d7 ff ff\n0f b6 c0\n89 44 24 10\n41 0f be 7d 00\n49 ff c5\ne8 89 d7 ff ff\n0f b6 c0\n0f be 3c 03\ne8 7d d7 ff ff\n8b 54 24 10\n0f b6 c0\n29 c2\n74 a2\ne9 b9 04 00 00\n4d 85 e4\n0f 84 ee 01 00 00\n4d 85 f6\n0f 84 36 02 00 00\n49 8d 74 24 01\n49 8d 4e 01\n48 8b 7c 24 08\n48 89 ea\ne8 e5 92 00 00\ne9 b0 fd ff ff\n48 ff c5\n49 ff c5\n45 31 e4\n48 8b 5c 24 08\n48 39 dd\n72 15\neb 3c\n48 ff c5\n48 39 dd\n73 29\n0f be 7d 00\ne8 0f d7 ff ff\n0f b6 c0\n48 8b 4c 24 10\n80 3c 01 00\n75 e1\n4d 89 fe\n41 b7 01\n4c 3b 6c 24 18\n72 32\ne9 01 02 00 00\n4d 89 fe\n45 31 ff\n4c 3b 6c 24 18\n72 20\ne9 ef 01 00 00\n49 ff c5\n4c 3b 6c 24 18\n0f 83 d4 01 00 00\n41 0f be 7d 00\ne8 b8 d6 ff ff\n0f b6 c0\n48 8b 4c 24 10\n80 3c 01 00\n75 da\n45 84 ff\n0f 84 ad 01 00 00\n0f be 7d 00\ne8 98 d6 ff ff\n0f b6 d8\n41 0f be 7d 00\ne8 8b d6 ff ff\n89 da\n0f b6 c0\n29 c2\n4d 89 f7\n0f 84 3b ff ff ff\ne9 c2 03 00 00\n45 31 f6\n4c 3b 6c 24 18\n72 3a\ne9 5a 01 00 00\n45 31 f6\n4c 3b 6c 24 18\n72 2b\ne9 4b 01 00 00\n41 b6 01\n4c 3b 6c 24 18\n72 1c\ne9 3c 01 00 00\n49 ff c5\n4c 3b 6c 24 18\n0f 83 25 01 00 00\n41 0f be 7d 00\ne8 28 d6 ff ff\n0f b6 c0\n48 8b 4c 24 10\n80 3c 01 00\n75 da\n45 84 f6\n0f 84 fe 00 00 00\n0f be 7d 00\ne8 08 d6 ff ff\n0f b6 c0\n48 8b 5c 24 20\n0f be 3c 03\ne8 f7 d5 ff ff\n44 0f b6 f0\n41 0f be 7d 00\ne8 e9 d5 ff ff\n0f b6 c0\n0f be 3c 03\ne8 dd d5 ff ff\n44 89 f2\n0f b6 c0\n29 c2\n4c 8b 7c 24 40\n0f 85 16 03 00 00\n48 ff c5\n49 ff c5\n45 31 ff\n48 8b 5c 24 08\n48 39 dd\n0f 83 4c ff ff ff\n0f 1f 00\n0f be 7d 00\ne8 a7 d5 ff ff\n0f b6 c0\n48 8b 4c 24 10\n80 3c 01 00\n0f 84 3d ff ff ff\n48 ff c5\n48 39 dd\n72 dd\ne9 12 ff ff ff\n49 f7 de\n19 d2\n85 d2\n0f 84 59 fc ff ff\ne9 c2 02 00 00\n4c 89 f0\n48 f7 d8\n19 d2\n84 db\n0f 85 dc fb ff ff\ne9 21 fc ff ff\n4d 39 f4\n4c 89 f2\n49 0f 42 d4\n48 89 ef\n4c 89 ee\ne8 9c b9 ff ff\n89 c2\n85 d2\n0f 85 8e 02 00 00\n31 d2\n4d 39 f4\n0f 95 c0\n0f 82 7b 02 00 00\n88 c2\n85 d2\n0f 84 08 fc ff ff\ne9 71 02 00 00\nba 01 00 00 00\n84 db\n0f 85 8e fb ff ff\ne9 d3 fb ff ff\n41 bf 01 00 00 00\n41 0f b6 d6\n44 29 fa\n4c 8b 7c 24 40\n85 d2\n0f 84 d7 fb ff ff\ne9 40 02 00 00\n41 bc 01 00 00 00\n41 0f b6 d7\n44 29 e2\n4d 89 f7\n85 d2\n0f 84 ba fb ff ff\ne9 23 02 00 00\n48 8b 7c 24 28\n4c 89 fe\ne8 53 f9 ff ff\n48 89 c5\n48 8b 7c 24 30\n4c 89 fe\ne8 43 f9 ff ff\n49 89 c5\n49 8b 77 20\n49 8b 4f 28\n4c 39 e5\n4c 0f 47 e5\n49 39 dd\n49 0f 47 dd\n4c 89 64 24 08\n49 29 ec\n48 89 5c 24 18\n49 89 de\n4d 29 ee\n80 3d 70 37 21 00 00\n48 89 4c 24 20\n48 89 74 24 10\n75 34\n4c 89 ff\ne8 4c ef ff ff\n48 8b 74 24 10\n48 8b 4c 24 20\n84 c0\n75 1e\n41 80 7f 36 00\n75 17\n41 80 7f 33 00\n75 10\n41 80 7f 38 00\n0f 84 1b fc ff ff\n0f 1f 44 00 00\n48 89 c8\n48 09 f0\n0f 95 c3\n74 25\n4b 8d 7c 26 02\n48 81 ff a1 0f 00 00\n73 47\n48 8d 44 24 50\n48 89 44 24 08\n31 c0\neb 4d\n48 8b 4c 24 08\n8a 01\n88 44 24 07\nc6 01 00\n48 8b 4c 24 18\n8a 01\n88 44 24 06\n48 89 6c 24 08\n4c 89 ed\ne9 09 fa ff ff\ne8 9b 8c 00 00\n48 8b 74 24 10\n48 8b 4c 24 20\n48 89 44 24 08\n48 89 44 24 38\n88 5c 24 18\n4d 85 e4\n4c 89 64 24 48\n74 64\n4c 89 e3\n45 31 e4\n0f 1f 00\n48 85 f6\n74 1c\n0f be 7d 00\ne8 a2 d3 ff ff\n48 8b 74 24 10\n48 8b 4c 24 20\n0f b6 c0\n80 3c 06 00\n75 30\n48 85 c9\n48 89 e8\n74 19\n0f be 7d 00\ne8 7e d3 ff ff\n48 8b 74 24 10\n48 8b 4c 24 20\n0f b6 c0\n48 01 c8\n0f b6 00\n48 8b 54 24 08\n42 88 04 22\n49 ff c4\n48 ff c5\n48 ff cb\n75 a7\neb 03\n45 31 e4\n4c 89 fb\n48 8b 44 24 08\n48 8b 54 24 48\n48 8d 6c 10 01\n42 c6 04 20 00\n45 31 ff\n4d 85 f6\n0f 84 3f f9 ff ff\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 85 f6\n74 1d\n41 0f be 7d 00\ne8 11 d3 ff ff\n48 8b 74 24 10\n48 8b 4c 24 20\n0f b6 c0\n80 3c 06 00\n75 2d\n48 85 c9\n4c 89 e8\n74 1a\n41 0f be 7d 00\ne8 ec d2 ff ff\n48 8b 74 24 10\n48 8b 4c 24 20\n0f b6 c0\n48 01 c8\n0f b6 00\n42 88 44 3d 00\n49 ff c7\n49 ff c5\n49 ff ce\n75 a9\ne9 d4 f8 ff ff\n31 c0\neb 18\nba 01 00 00 00\neb 05\nba ff ff ff ff\n89 d0\nf7 d8\n41 80 7f 37 00\n0f 44 c2\n48 81 c4 f8 0f 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1727
S'.text:0000000000406880\n.text:0000000000406881\n.text:0000000000406883\n.text:0000000000406885\n.text:0000000000406887\n.text:0000000000406889\n.text:000000000040688a\n.text:0000000000406891\n.text:0000000000406898\n.text:000000000040689c\n.text:00000000004068a1\n.text:00000000004068a5\n.text:00000000004068a9\n.text:00000000004068ae\n.text:00000000004068b2\n.text:00000000004068b6\n.text:00000000004068ba\n.text:00000000004068bf\n.text:00000000004068d0\n.text:00000000004068d5\n.text:00000000004068d8\n.text:00000000004068db\n.text:00000000004068df\n.text:00000000004068e2\n.text:00000000004068e7\n.text:00000000004068e9\n.text:00000000004068ee\n.text:00000000004068f1\n.text:00000000004068f6\n.text:0000000000406900\n.text:0000000000406905\n.text:0000000000406907\n.text:000000000040690c\n.text:000000000040690f\n.text:0000000000406914\n.text:0000000000406916\n.text:000000000040691b\n.text:000000000040691d\n.text:0000000000406922\n.text:0000000000406925\n.text:000000000040692a\n.text:0000000000406930\n.text:0000000000406932\n.text:0000000000406934\n.text:0000000000406936\n.text:000000000040693b\n.text:000000000040693d\n.text:0000000000406942\n.text:0000000000406944\n.text:0000000000406946\n.text:0000000000406948\n.text:000000000040694d\n.text:0000000000406952\n.text:0000000000406958\n.text:000000000040695a\n.text:000000000040695f\n.text:0000000000406964\n.text:0000000000406967\n.text:0000000000406969\n.text:000000000040696c\n.text:0000000000406971\n.text:0000000000406974\n.text:0000000000406976\n.text:0000000000406978\n.text:000000000040697a\n.text:0000000000406980\n.text:0000000000406984\n.text:0000000000406989\n.text:000000000040698d\n.text:0000000000406991\n.text:0000000000406996\n.text:0000000000406998\n.text:000000000040699e\n.text:00000000004069a2\n.text:00000000004069a5\n.text:00000000004069ab\n.text:00000000004069b0\n.text:00000000004069b2\n.text:00000000004069b7\n.text:00000000004069ba\n.text:00000000004069bf\n.text:00000000004069c2\n.text:00000000004069c7\n.text:00000000004069ca\n.text:00000000004069cf\n.text:00000000004069d2\n.text:00000000004069d6\n.text:00000000004069dc\n.text:00000000004069e0\n.text:00000000004069e5\n.text:00000000004069e8\n.text:00000000004069ec\n.text:00000000004069f1\n.text:00000000004069f6\n.text:00000000004069f9\n.text:00000000004069fd\n.text:0000000000406a02\n.text:0000000000406a06\n.text:0000000000406a0c\n.text:0000000000406a11\n.text:0000000000406a14\n.text:0000000000406a19\n.text:0000000000406a1c\n.text:0000000000406a21\n.text:0000000000406a27\n.text:0000000000406a30\n.text:0000000000406a33\n.text:0000000000406a36\n.text:0000000000406a38\n.text:0000000000406a3c\n.text:0000000000406a41\n.text:0000000000406a44\n.text:0000000000406a4b\n.text:0000000000406a4d\n.text:0000000000406a50\n.text:0000000000406a53\n.text:0000000000406a56\n.text:0000000000406a5c\n.text:0000000000406a61\n.text:0000000000406a66\n.text:0000000000406a69\n.text:0000000000406a70\n.text:0000000000406a72\n.text:0000000000406a77\n.text:0000000000406a7c\n.text:0000000000406a7e\n.text:0000000000406a83\n.text:0000000000406a86\n.text:0000000000406a89\n.text:0000000000406a8c\n.text:0000000000406a91\n.text:0000000000406a96\n.text:0000000000406a99\n.text:0000000000406a9b\n.text:0000000000406a9e\n.text:0000000000406aa3\n.text:0000000000406aa9\n.text:0000000000406aae\n.text:0000000000406ab3\n.text:0000000000406ab9\n.text:0000000000406abe\n.text:0000000000406ac1\n.text:0000000000406ac6\n.text:0000000000406acb\n.text:0000000000406ace\n.text:0000000000406ad4\n.text:0000000000406ad7\n.text:0000000000406add\n.text:0000000000406ae0\n.text:0000000000406ae6\n.text:0000000000406af0\n.text:0000000000406af5\n.text:0000000000406afb\n.text:0000000000406b00\n.text:0000000000406b06\n.text:0000000000406b0a\n.text:0000000000406b0d\n.text:0000000000406b12\n.text:0000000000406b15\n.text:0000000000406b1a\n.text:0000000000406b1e\n.text:0000000000406b23\n.text:0000000000406b26\n.text:0000000000406b2a\n.text:0000000000406b2f\n.text:0000000000406b32\n.text:0000000000406b37\n.text:0000000000406b3a\n.text:0000000000406b3e\n.text:0000000000406b43\n.text:0000000000406b47\n.text:0000000000406b4a\n.text:0000000000406b4c\n.text:0000000000406b4e\n.text:0000000000406b53\n.text:0000000000406b56\n.text:0000000000406b5c\n.text:0000000000406b5f\n.text:0000000000406b65\n.text:0000000000406b6a\n.text:0000000000406b6e\n.text:0000000000406b73\n.text:0000000000406b76\n.text:0000000000406b7b\n.text:0000000000406b80\n.text:0000000000406b83\n.text:0000000000406b86\n.text:0000000000406b89\n.text:0000000000406b8e\n.text:0000000000406b91\n.text:0000000000406b93\n.text:0000000000406ba0\n.text:0000000000406ba3\n.text:0000000000406ba6\n.text:0000000000406ba8\n.text:0000000000406bac\n.text:0000000000406bb1\n.text:0000000000406bb4\n.text:0000000000406bb9\n.text:0000000000406bbd\n.text:0000000000406bbf\n.text:0000000000406bc2\n.text:0000000000406bc5\n.text:0000000000406bca\n.text:0000000000406bcc\n.text:0000000000406bd1\n.text:0000000000406bd4\n.text:0000000000406bd7\n.text:0000000000406bdc\n.text:0000000000406bde\n.text:0000000000406bf0\n.text:0000000000406bf3\n.text:0000000000406bf8\n.text:0000000000406bfe\n.text:0000000000406c03\n.text:0000000000406c08\n.text:0000000000406c0b\n.text:0000000000406c10\n.text:0000000000406c14\n.text:0000000000406c16\n.text:0000000000406c19\n.text:0000000000406c1f\n.text:0000000000406c23\n.text:0000000000406c28\n.text:0000000000406c2b\n.text:0000000000406c30\n.text:0000000000406c35\n.text:0000000000406c37\n.text:0000000000406c3a\n.text:0000000000406c3c\n.text:0000000000406c3f\n.text:0000000000406c45\n.text:0000000000406c4a\n.text:0000000000406c4d\n.text:0000000000406c52\n.text:0000000000406c54\n.text:0000000000406c59\n.text:0000000000406c5c\n.text:0000000000406c61\n.text:0000000000406c63\n.text:0000000000406c68\n.text:0000000000406c6b\n.text:0000000000406c70\n.text:0000000000406c72\n.text:0000000000406c80\n.text:0000000000406c83\n.text:0000000000406c88\n.text:0000000000406c8e\n.text:0000000000406c93\n.text:0000000000406c98\n.text:0000000000406c9b\n.text:0000000000406ca0\n.text:0000000000406ca4\n.text:0000000000406ca6\n.text:0000000000406ca9\n.text:0000000000406caf\n.text:0000000000406cb3\n.text:0000000000406cb8\n.text:0000000000406cbb\n.text:0000000000406cc0\n.text:0000000000406cc4\n.text:0000000000406cc9\n.text:0000000000406ccd\n.text:0000000000406cd2\n.text:0000000000406cd7\n.text:0000000000406cda\n.text:0000000000406cde\n.text:0000000000406ce3\n.text:0000000000406ce6\n.text:0000000000406ce9\n.text:0000000000406ceb\n.text:0000000000406cf0\n.text:0000000000406cf6\n.text:0000000000406cf9\n.text:0000000000406cfc\n.text:0000000000406cff\n.text:0000000000406d04\n.text:0000000000406d07\n.text:0000000000406d0d\n.text:0000000000406d10\n.text:0000000000406d14\n.text:0000000000406d19\n.text:0000000000406d1c\n.text:0000000000406d21\n.text:0000000000406d25\n.text:0000000000406d2b\n.text:0000000000406d2e\n.text:0000000000406d31\n.text:0000000000406d33\n.text:0000000000406d38\n.text:0000000000406d3b\n.text:0000000000406d3d\n.text:0000000000406d3f\n.text:0000000000406d45\n.text:0000000000406d4a\n.text:0000000000406d4d\n.text:0000000000406d50\n.text:0000000000406d52\n.text:0000000000406d54\n.text:0000000000406d5a\n.text:0000000000406d5f\n.text:0000000000406d62\n.text:0000000000406d65\n.text:0000000000406d69\n.text:0000000000406d6c\n.text:0000000000406d6f\n.text:0000000000406d74\n.text:0000000000406d76\n.text:0000000000406d78\n.text:0000000000406d7e\n.text:0000000000406d80\n.text:0000000000406d83\n.text:0000000000406d86\n.text:0000000000406d8c\n.text:0000000000406d8e\n.text:0000000000406d90\n.text:0000000000406d96\n.text:0000000000406d9b\n.text:0000000000406da0\n.text:0000000000406da2\n.text:0000000000406da8\n.text:0000000000406dad\n.text:0000000000406db3\n.text:0000000000406db7\n.text:0000000000406dba\n.text:0000000000406dbf\n.text:0000000000406dc1\n.text:0000000000406dc7\n.text:0000000000406dcc\n.text:0000000000406dd2\n.text:0000000000406dd6\n.text:0000000000406dd9\n.text:0000000000406ddc\n.text:0000000000406dde\n.text:0000000000406de4\n.text:0000000000406df0\n.text:0000000000406df5\n.text:0000000000406df8\n.text:0000000000406dfd\n.text:0000000000406e00\n.text:0000000000406e05\n.text:0000000000406e08\n.text:0000000000406e0d\n.text:0000000000406e10\n.text:0000000000406e14\n.text:0000000000406e18\n.text:0000000000406e1b\n.text:0000000000406e1f\n.text:0000000000406e22\n.text:0000000000406e26\n.text:0000000000406e2b\n.text:0000000000406e2e\n.text:0000000000406e33\n.text:0000000000406e36\n.text:0000000000406e39\n.text:0000000000406e40\n.text:0000000000406e45\n.text:0000000000406e4a\n.text:0000000000406e4c\n.text:0000000000406e4f\n.text:0000000000406e54\n.text:0000000000406e59\n.text:0000000000406e5e\n.text:0000000000406e60\n.text:0000000000406e62\n.text:0000000000406e67\n.text:0000000000406e69\n.text:0000000000406e6e\n.text:0000000000406e70\n.text:0000000000406e75\n.text:0000000000406e7b\n.text:0000000000406e80\n.text:0000000000406e83\n.text:0000000000406e86\n.text:0000000000406e89\n.text:0000000000406e8b\n.text:0000000000406e90\n.text:0000000000406e97\n.text:0000000000406e99\n.text:0000000000406e9e\n.text:0000000000406ea3\n.text:0000000000406ea5\n.text:0000000000406eb0\n.text:0000000000406eb5\n.text:0000000000406eb7\n.text:0000000000406ebb\n.text:0000000000406ebe\n.text:0000000000406ec3\n.text:0000000000406ec5\n.text:0000000000406ec9\n.text:0000000000406ece\n.text:0000000000406ed1\n.text:0000000000406ee0\n.text:0000000000406ee5\n.text:0000000000406eea\n.text:0000000000406eef\n.text:0000000000406ef4\n.text:0000000000406ef9\n.text:0000000000406efd\n.text:0000000000406f00\n.text:0000000000406f05\n.text:0000000000406f07\n.text:0000000000406f0a\n.text:0000000000406f0d\n.text:0000000000406f10\n.text:0000000000406f13\n.text:0000000000406f15\n.text:0000000000406f19\n.text:0000000000406f1e\n.text:0000000000406f23\n.text:0000000000406f28\n.text:0000000000406f2b\n.text:0000000000406f2f\n.text:0000000000406f31\n.text:0000000000406f34\n.text:0000000000406f37\n.text:0000000000406f39\n.text:0000000000406f3d\n.text:0000000000406f42\n.text:0000000000406f47\n.text:0000000000406f4c\n.text:0000000000406f4f\n.text:0000000000406f52\n.text:0000000000406f55\n.text:0000000000406f5a\n.text:0000000000406f5e\n.text:0000000000406f61\n.text:0000000000406f64\n.text:0000000000406f67\n.text:0000000000406f69\n.text:0000000000406f6b\n.text:0000000000406f6e\n.text:0000000000406f71\n.text:0000000000406f76\n.text:0000000000406f7b\n.text:0000000000406f80\n.text:0000000000406f85\n.text:0000000000406f88\n.text:0000000000406f8b\n.text:0000000000406f91\n.text:0000000000406fa0\n.text:0000000000406fa3\n.text:0000000000406fa5\n.text:0000000000406faa\n.text:0000000000406faf\n.text:0000000000406fb4\n.text:0000000000406fb9\n.text:0000000000406fbc\n.text:0000000000406fc0\n.text:0000000000406fc2\n.text:0000000000406fc5\n.text:0000000000406fc8\n.text:0000000000406fca\n.text:0000000000406fcf\n.text:0000000000406fd4\n.text:0000000000406fd9\n.text:0000000000406fde\n.text:0000000000406fe1\n.text:0000000000406fe4\n.text:0000000000406fe7\n.text:0000000000406fec\n.text:0000000000406fef\n.text:0000000000406ff2\n.text:0000000000406ff5\n.text:0000000000406ff7\n.text:0000000000406ffc\n.text:0000000000406ffe\n.text:0000000000407000\n.text:0000000000407005\n.text:0000000000407007\n.text:000000000040700c\n.text:000000000040700e\n.text:0000000000407010\n.text:0000000000407015\n.text:0000000000407018\n.text:000000000040701f\n.text:0000000000407020\n.text:0000000000407022\n.text:0000000000407024\n.text:0000000000407026\n.text:0000000000407028\n.text:0000000000407029\n'
p1728
tp1729
sS'dtotimespec'
p1730
(S'\n__stdcall dtotimespec(double sec)\n'
p1731
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000atimespec dtotimespec(double sec)\u000a\u000a{\u000a  long ns;\u000a  long lVar1;\u000a  long lVar2;\u000a  double dVar3;\u000a  timespec tVar4;\u000a  \u000a  if (sec <= _DAT_00415660) {\u000a    tVar4 = make_timespec(-0x8000000000000000,0);\u000a    return tVar4;\u000a  }\u000a  if (sec < DAT_00412600) {\u000a    dVar3 = (sec - (double)(long)sec) * _DAT_00415668;\u000a    ns = (long)dVar3;\u000a    ns = (ulong)((double)ns < dVar3) + ns;\u000a    lVar2 = ns / 1000000000 + (ns >> 0x3f);\u000a    lVar1 = ns + lVar2 * -1000000000;\u000a    ns = ns + lVar2 * -1000000000 + 1000000000;\u000a    if (-1 < lVar1) {\u000a      ns = lVar1;\u000a    }\u000a    tVar4 = make_timespec((lVar1 >> 0x3f) + (long)sec + lVar2,ns);\u000a    return tVar4;\u000a  }\u000a  tVar4 = make_timespec(0x7fffffffffffffff,999999999);\u000a  return tVar4;\u000a}\u000a\u000a
p1732
S'MOV RDI,0x7fffffffffffffff\nUCOMISD XMM0,qword ptr [0x00415660]\nJBE 0x00410ff7\nMOVSD XMM1,qword ptr [0x00412600]\nUCOMISD XMM1,XMM0\nJBE 0x00411001\nCVTTSD2SI RDI,XMM0\nXORPS XMM1,XMM1\nCVTSI2SD XMM1,RDI\nSUBSD XMM0,XMM1\nMULSD XMM0,qword ptr [0x00415668]\nCVTTSD2SI RAX,XMM0\nXORPS XMM1,XMM1\nCVTSI2SD XMM1,RAX\nXOR ECX,ECX\nUCOMISD XMM0,XMM1\nSETA CL\nADD RCX,RAX\nMOV RDX,0x112e0be826d694b3\nMOV RAX,RCX\nIMUL RDX\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x1a\nADD RDX,RAX\nIMUL RAX,RDX,0x3b9aca00\nMOV RSI,RCX\nSUB RSI,RAX\nADD RSI,0x3b9aca00\nSUB RCX,RAX\nCMOVNS RSI,RCX\nADD RDI,RDX\nSAR RCX,0x3f\nADD RCX,RDI\nMOV RDI,RCX\nJMP 0x004114a0\nINC RDI\nXOR ESI,ESI\nJMP 0x004114a0\nMOV ESI,0x3b9ac9ff\nJMP 0x004114a0\n'
p1733
S'48 bf ff ff ff ff ff ff ff 7f\n66 0f 2e 05 fe 46 00 00\n0f 86 8f 00 00 00\nf2 0f 10 0d 90 16 00 00\n66 0f 2e c8\n0f 86 87 00 00 00\nf2 48 0f 2c f8\n0f 57 c9\nf2 48 0f 2a cf\nf2 0f 5c c1\nf2 0f 59 05 d5 46 00 00\nf2 48 0f 2c c0\n0f 57 c9\nf2 48 0f 2a c8\n31 c9\n66 0f 2e c1\n0f 97 c1\n48 01 c1\n48 ba b3 94 d6 26 e8 0b 2e 11\n48 89 c8\n48 f7 ea\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 1a\n48 01 c2\n48 69 c2 00 ca 9a 3b\n48 89 ce\n48 29 c6\n48 81 c6 00 ca 9a 3b\n48 29 c1\n48 0f 49 f1\n48 01 d7\n48 c1 f9 3f\n48 01 f9\n48 89 cf\ne9 a9 04 00 00\n48 ff c7\n31 f6\ne9 9f 04 00 00\nbe ff c9 9a 3b\ne9 95 04 00 00\n'
p1734
S'.text:0000000000410f50\n.text:0000000000410f5a\n.text:0000000000410f62\n.text:0000000000410f68\n.text:0000000000410f70\n.text:0000000000410f74\n.text:0000000000410f7a\n.text:0000000000410f7f\n.text:0000000000410f82\n.text:0000000000410f87\n.text:0000000000410f8b\n.text:0000000000410f93\n.text:0000000000410f98\n.text:0000000000410f9b\n.text:0000000000410fa0\n.text:0000000000410fa2\n.text:0000000000410fa6\n.text:0000000000410fa9\n.text:0000000000410fac\n.text:0000000000410fb6\n.text:0000000000410fb9\n.text:0000000000410fbc\n.text:0000000000410fbf\n.text:0000000000410fc3\n.text:0000000000410fc7\n.text:0000000000410fca\n.text:0000000000410fd1\n.text:0000000000410fd4\n.text:0000000000410fd7\n.text:0000000000410fde\n.text:0000000000410fe1\n.text:0000000000410fe5\n.text:0000000000410fe8\n.text:0000000000410fec\n.text:0000000000410fef\n.text:0000000000410ff2\n.text:0000000000410ff7\n.text:0000000000410ffa\n.text:0000000000410ffc\n.text:0000000000411001\n.text:0000000000411006\n'
p1735
tp1736
sS'stat'
p1737
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p1738
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_0061a238)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p1739
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00402810\n'
p1740
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 40 12 ff ff\n'
p1741
S'.text:00000000004115c0\n.text:00000000004115c3\n.text:00000000004115c6\n.text:00000000004115cb\n'
p1742
tp1743
sS'quote_n_mem'
p1744
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p1745
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p1746
S'MOV ECX,0x61a508\nJMP 0x0040d9c0\n'
p1747
S'b9 08 a5 61 00\ne9 36 fb ff ff\n'
p1748
S'.text:000000000040de80\n.text:000000000040de85\n'
p1749
tp1750
sS'xstrdup'
p1751
(S'\n__stdcall xstrdup(char * string)\n'
p1752
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p1753
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004025d0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x0040fcc0\n'
p1754
S'53\n48 89 fb\ne8 d7 28 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p1755
S'.text:000000000040fcf0\n.text:000000000040fcf1\n.text:000000000040fcf4\n.text:000000000040fcf9\n.text:000000000040fcfd\n.text:000000000040fd00\n.text:000000000040fd01\n'
p1756
tp1757
sS'c_ispunct'
p1758
(S'\n__stdcall c_ispunct()\n'
p1759
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p1760
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00410e62\nMOV AL,0x1\nJMP qword ptr [0x415370 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p1761
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 70 53 41 00\nc3\n31 c0\nc3\n'
p1762
S'.text:0000000000410e50\n.text:0000000000410e53\n.text:0000000000410e56\n.text:0000000000410e58\n.text:0000000000410e5a\n.text:0000000000410e61\n.text:0000000000410e62\n.text:0000000000410e64\n'
p1763
tp1764
sS'fstat'
p1765
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p1766
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_0061a280)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p1767
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x004028a0\n'
p1768
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 c1 12 ff ff\n'
p1769
S'.text:00000000004115d0\n.text:00000000004115d3\n.text:00000000004115d5\n.text:00000000004115da\n'
p1770
tp1771
sS'mergefiles'
p1772
(S'\n__stdcall mergefiles(sortfile * files, size_t ntemps, size_t nfiles, FILE * ofp, char * output_file)\n'
p1773
V\u000asize_t mergefiles(sortfile *files,size_t ntemps,size_t nfiles,FILE *ofp,char *output_file)\u000a\u000a{\u000a  FILE **in_RAX;\u000a  size_t nfiles_00;\u000a  char *message;\u000a  FILE **local_38;\u000a  \u000a  local_38 = in_RAX;\u000a  nfiles_00 = open_input_files(files,nfiles,&local_38);\u000a  if ((nfiles_00 < nfiles) && (nfiles_00 < 2)) {\u000a    message = (char *)dcgettext(0,"open failed",5);\u000a                    /* WARNING: Subroutine does not return */\u000a    die(message,files[nfiles_00].name);\u000a  }\u000a  mergefps(files,ntemps,nfiles_00,ofp,output_file,local_38);\u000a  return nfiles_00;\u000a}\u000a\u000a
p1774
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,R8\nMOV R12,RCX\nMOV RBP,RDX\nMOV R13,RSI\nMOV R14,RDI\nMOV RDX,RSP\nMOV RSI,RBP\nCALL 0x00407d70\nMOV RBX,RAX\nCMP RBX,RBP\nJNC 0x00407bc3\nCMP RBX,0x1\nJBE 0x00407bed\nMOV R9,qword ptr [RSP]\nMOV RDI,R14\nMOV RSI,R13\nMOV RDX,RBX\nMOV RCX,R12\nMOV R8,R15\nCALL 0x00407e00\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x413e0b\nMOV EDX,0x5\nCALL 0x004025b0\nSHL RBX,0x4\nMOV RSI,qword ptr [R14 + RBX*0x1]\nMOV RDI,RAX\nCALL 0x00405c70\n'
p1775
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 c7\n49 89 cc\n48 89 d5\n49 89 f5\n49 89 fe\n48 89 e2\n48 89 ee\ne8 bb 01 00 00\n48 89 c3\n48 39 eb\n73 06\n48 83 fb 01\n76 2a\n4c 8b 0c 24\n4c 89 f7\n4c 89 ee\n48 89 da\n4c 89 e1\n4d 89 f8\ne8 25 02 00 00\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe 0b 3e 41 00\nba 05 00 00 00\ne8 b2 a9 ff ff\n48 c1 e3 04\n49 8b 34 1e\n48 89 c7\ne8 62 e0 ff ff\n'
p1776
S'.text:0000000000407b90\n.text:0000000000407b91\n.text:0000000000407b93\n.text:0000000000407b95\n.text:0000000000407b97\n.text:0000000000407b99\n.text:0000000000407b9a\n.text:0000000000407b9b\n.text:0000000000407b9e\n.text:0000000000407ba1\n.text:0000000000407ba4\n.text:0000000000407ba7\n.text:0000000000407baa\n.text:0000000000407bad\n.text:0000000000407bb0\n.text:0000000000407bb5\n.text:0000000000407bb8\n.text:0000000000407bbb\n.text:0000000000407bbd\n.text:0000000000407bc1\n.text:0000000000407bc3\n.text:0000000000407bc7\n.text:0000000000407bca\n.text:0000000000407bcd\n.text:0000000000407bd0\n.text:0000000000407bd3\n.text:0000000000407bd6\n.text:0000000000407bdb\n.text:0000000000407bde\n.text:0000000000407be2\n.text:0000000000407be3\n.text:0000000000407be5\n.text:0000000000407be7\n.text:0000000000407be9\n.text:0000000000407beb\n.text:0000000000407bec\n.text:0000000000407bed\n.text:0000000000407bef\n.text:0000000000407bf4\n.text:0000000000407bf9\n.text:0000000000407bfe\n.text:0000000000407c02\n.text:0000000000407c06\n.text:0000000000407c09\n'
p1777
tp1778
sS'begfield'
p1779
(S'\n__stdcall begfield(line * line, keyfield * key)\n'
p1780
V\u000achar * begfield(line *line,keyfield *key)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t sVar2;\u000a  bool bVar3;\u000a  byte bVar4;\u000a  char *pcVar5;\u000a  char *pcVar6;\u000a  size_t sVar7;\u000a  \u000a  pcVar5 = line->text;\u000a  pcVar1 = pcVar5 + (line->length - 1);\u000a  sVar7 = key->sword;\u000a  sVar2 = key->schar;\u000a  if (tab == 0x80) {\u000a    while ((pcVar5 < pcVar1 && (sVar7 != 0))) {\u000a      while ((pcVar5 < pcVar1 && (bVar4 = to_uchar(), blanks[(ulong)bVar4] != false))) {\u000a        pcVar5 = pcVar5 + 1;\u000a      }\u000a      while ((pcVar5 < pcVar1 && (bVar4 = to_uchar(), blanks[(ulong)bVar4] == false))) {\u000a        pcVar5 = pcVar5 + 1;\u000a      }\u000a      sVar7 = sVar7 - 1;\u000a    }\u000a  }\u000a  else {\u000a    while ((pcVar5 < pcVar1 && (sVar7 != 0))) {\u000a      while (pcVar5 < pcVar1) {\u000a        if ((int)*pcVar5 == tab) {\u000a          bVar3 = true;\u000a          goto LAB_004067c2;\u000a        }\u000a        pcVar5 = pcVar5 + 1;\u000a      }\u000a      bVar3 = false;\u000aLAB_004067c2:\u000a      sVar7 = sVar7 - 1;\u000a      if (bVar3) {\u000a        pcVar5 = pcVar5 + 1;\u000a      }\u000a    }\u000a  }\u000a  if (key->skipsblanks != false) {\u000a    while ((pcVar5 < pcVar1 && (bVar4 = to_uchar(), blanks[(ulong)bVar4] != false))) {\u000a      pcVar5 = pcVar5 + 1;\u000a    }\u000a  }\u000a  pcVar6 = pcVar5 + sVar2;\u000a  if (pcVar1 < pcVar5 + sVar2) {\u000a    pcVar6 = pcVar1;\u000a  }\u000a  return pcVar6;\u000a}\u000a\u000a
p1781
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RSI\nMOV RBX,qword ptr [RDI]\nMOV RAX,qword ptr [RDI + 0x8]\nLEA R15,[RBX + RAX*0x1 + -0x1]\nMOV R13,qword ptr [R14]\nMOV R12,qword ptr [R14 + 0x8]\nCMP dword ptr [0x0061a3e0],0x80\nJZ 0x004067e3\nCMP RBX,R15\nJNC 0x0040682e\nMOV EAX,dword ptr [0x0061a3e0]\nNOP word ptr [RAX + RAX*0x1]\nTEST R13,R13\nJNZ 0x004067a3\nJMP 0x0040682e\nINC RBX\nCMP RBX,R15\nJNC 0x004067c0\nMOVSX ECX,byte ptr [RBX]\nCMP ECX,EAX\nJNZ 0x004067a0\nMOV CL,0x1\nJMP 0x004067c2\nXOR ECX,ECX\nDEC R13\nLEA RDX,[RBX + 0x1]\nTEST CL,CL\nCMOVNZ RBX,RDX\nCMP RBX,R15\nJC 0x00406790\nJMP 0x0040682e\nDEC R13\nCMP RBX,R15\nJNC 0x0040682e\nTEST R13,R13\nJNZ 0x004067f3\nJMP 0x0040682e\nINC RBX\nCMP RBX,R15\nJNC 0x00406813\nMOVSX EDI,byte ptr [RBX]\nCALL 0x004042c0\nMOVZX EAX,AL\nCMP byte ptr [0x61a670 + RAX],0x0\nJNZ 0x004067f0\nJMP 0x00406813\nINC RBX\nCMP RBX,R15\nJNC 0x004067e0\nMOVSX EDI,byte ptr [RBX]\nCALL 0x004042c0\nMOVZX EAX,AL\nCMP byte ptr [0x61a670 + RAX],0x0\nJZ 0x00406810\nJMP 0x004067e0\nCMP byte ptr [R14 + 0x30],0x0\nJNZ 0x00406843\nJMP 0x0040685c\nINC RBX\nCMP RBX,R15\nJNC 0x0040685c\nMOVSX EDI,byte ptr [RBX]\nCALL 0x004042c0\nMOVZX EAX,AL\nCMP byte ptr [0x61a670 + RAX],0x0\nJNZ 0x00406840\nADD RBX,R12\nCMP R15,RBX\nCMOVC RBX,R15\nMOV RAX,RBX\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1782
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 f6\n48 8b 1f\n48 8b 47 08\n4c 8d 7c 03 ff\n4d 8b 2e\n4d 8b 66 08\n81 3d 67 3c 21 00 80 00 00 00\n74 68\n4c 39 fb\n0f 83 aa 00 00 00\n8b 05 56 3c 21 00\n66 0f 1f 44 00 00\n4d 85 ed\n75 0e\ne9 94 00 00 00\n48 ff c3\n4c 39 fb\n73 18\n0f be 0b\n39 c1\n75 f1\nb1 01\neb 0f\n31 c9\n49 ff cd\n48 8d 53 01\n84 c9\n48 0f 45 da\n4c 39 fb\n72 bc\neb 58\n49 ff cd\n4c 39 fb\n73 46\n4d 85 ed\n75 06\neb 3f\n48 ff c3\n4c 39 fb\n73 1b\n0f be 3b\ne8 c0 da ff ff\n0f b6 c0\n80 b8 70 a6 61 00 00\n75 e4\neb 05\n48 ff c3\n4c 39 fb\n73 c8\n0f be 3b\ne8 a0 da ff ff\n0f b6 c0\n80 b8 70 a6 61 00 00\n74 e4\neb b2\n41 80 7e 30 00\n75 0e\neb 25\n48 ff c3\n4c 39 fb\n73 14\n0f be 3b\ne8 70 da ff ff\n0f b6 c0\n80 b8 70 a6 61 00 00\n75 e4\n4c 01 e3\n49 39 df\n49 0f 42 df\n48 89 d8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1783
S'.text:0000000000406750\n.text:0000000000406752\n.text:0000000000406754\n.text:0000000000406756\n.text:0000000000406758\n.text:0000000000406759\n.text:000000000040675c\n.text:000000000040675f\n.text:0000000000406763\n.text:0000000000406768\n.text:000000000040676b\n.text:000000000040676f\n.text:0000000000406779\n.text:000000000040677b\n.text:000000000040677e\n.text:0000000000406784\n.text:000000000040678a\n.text:0000000000406790\n.text:0000000000406793\n.text:0000000000406795\n.text:00000000004067a0\n.text:00000000004067a3\n.text:00000000004067a6\n.text:00000000004067a8\n.text:00000000004067ab\n.text:00000000004067ad\n.text:00000000004067af\n.text:00000000004067b1\n.text:00000000004067c0\n.text:00000000004067c2\n.text:00000000004067c5\n.text:00000000004067c9\n.text:00000000004067cb\n.text:00000000004067cf\n.text:00000000004067d2\n.text:00000000004067d4\n.text:00000000004067e0\n.text:00000000004067e3\n.text:00000000004067e6\n.text:00000000004067e8\n.text:00000000004067eb\n.text:00000000004067ed\n.text:00000000004067f0\n.text:00000000004067f3\n.text:00000000004067f6\n.text:00000000004067f8\n.text:00000000004067fb\n.text:0000000000406800\n.text:0000000000406803\n.text:000000000040680a\n.text:000000000040680c\n.text:0000000000406810\n.text:0000000000406813\n.text:0000000000406816\n.text:0000000000406818\n.text:000000000040681b\n.text:0000000000406820\n.text:0000000000406823\n.text:000000000040682a\n.text:000000000040682c\n.text:000000000040682e\n.text:0000000000406833\n.text:0000000000406835\n.text:0000000000406840\n.text:0000000000406843\n.text:0000000000406846\n.text:0000000000406848\n.text:000000000040684b\n.text:0000000000406850\n.text:0000000000406853\n.text:000000000040685a\n.text:000000000040685c\n.text:000000000040685f\n.text:0000000000406862\n.text:0000000000406866\n.text:0000000000406869\n.text:000000000040686a\n.text:000000000040686c\n.text:000000000040686e\n.text:0000000000406870\n.text:0000000000406872\n'
p1784
tp1785
sS'mergelines'
p1786
(S'\n__stdcall mergelines(line * t, size_t nlines, line * lo)\n'
p1787
V\u000avoid mergelines(line *t,size_t nlines,line *lo)\u000a\u000a{\u000a  line *a;\u000a  line *b;\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  undefined4 uVar6;\u000a  undefined4 uVar7;\u000a  int iVar8;\u000a  ulong uVar9;\u000a  ulong uVar10;\u000a  line *plVar11;\u000a  line *plVar12;\u000a  long lVar13;\u000a  \u000a  uVar9 = nlines >> 1;\u000a  lVar13 = nlines - uVar9;\u000a  plVar11 = t + uVar9 * 0x7ffffffffffffff;\u000a  do {\u000a    a = lo + -1;\u000a    while( true ) {\u000a      plVar12 = t;\u000a      b = plVar11 + -1;\u000a      iVar8 = compare(a,b);\u000a      t = plVar12 + -1;\u000a      if (iVar8 < 1) break;\u000a      uVar1 = *(undefined4 *)&b->text;\u000a      uVar2 = *(undefined4 *)((long)&plVar11[-1].text + 4);\u000a      uVar4 = *(undefined4 *)&plVar11[-1].length;\u000a      uVar6 = *(undefined4 *)((long)&plVar11[-1].length + 4);\u000a      uVar3 = *(undefined4 *)((long)&plVar11[-1].keybeg + 4);\u000a      uVar5 = *(undefined4 *)&plVar11[-1].keylim;\u000a      uVar7 = *(undefined4 *)((long)&plVar11[-1].keylim + 4);\u000a      *(undefined4 *)&plVar12[-1].keybeg = *(undefined4 *)&plVar11[-1].keybeg;\u000a      *(undefined4 *)((long)&plVar12[-1].keybeg + 4) = uVar3;\u000a      *(undefined4 *)&plVar12[-1].keylim = uVar5;\u000a      *(undefined4 *)((long)&plVar12[-1].keylim + 4) = uVar7;\u000a      *(undefined4 *)&t->text = uVar1;\u000a      *(undefined4 *)((long)&plVar12[-1].text + 4) = uVar2;\u000a      *(undefined4 *)&plVar12[-1].length = uVar4;\u000a      *(undefined4 *)((long)&plVar12[-1].length + 4) = uVar6;\u000a      lVar13 = lVar13 + -1;\u000a      plVar11 = b;\u000a      if (lVar13 == 0) {\u000a        lVar13 = -0x20;\u000a        uVar10 = 0;\u000a        do {\u000a          uVar1 = *(undefined4 *)((long)&lo->text + lVar13);\u000a          uVar2 = *(undefined4 *)((long)&lo->text + lVar13 + 4);\u000a          uVar4 = *(undefined4 *)((long)&lo->length + lVar13);\u000a          uVar6 = *(undefined4 *)((long)&lo->length + lVar13 + 4);\u000a          uVar3 = *(undefined4 *)((long)&lo->keybeg + lVar13 + 4);\u000a          uVar5 = *(undefined4 *)((long)&lo->keylim + lVar13);\u000a          uVar7 = *(undefined4 *)((long)&lo->keylim + lVar13 + 4);\u000a          *(undefined4 *)((long)&plVar12[-1].keybeg + lVar13) =\u000a               *(undefined4 *)((long)&lo->keybeg + lVar13);\u000a          *(undefined4 *)((long)&plVar12[-1].keybeg + lVar13 + 4) = uVar3;\u000a          *(undefined4 *)((long)&plVar12[-1].keylim + lVar13) = uVar5;\u000a          *(undefined4 *)((long)&plVar12[-1].keylim + lVar13 + 4) = uVar7;\u000a          *(undefined4 *)((long)&t->text + lVar13) = uVar1;\u000a          *(undefined4 *)((long)&t->text + lVar13 + 4) = uVar2;\u000a          *(undefined4 *)((long)&t->length + lVar13) = uVar4;\u000a          *(undefined4 *)((long)&t->length + lVar13 + 4) = uVar6;\u000a          lVar13 = lVar13 + -0x20;\u000a          uVar10 = uVar10 + 1;\u000a        } while (uVar10 != uVar9);\u000a        return;\u000a      }\u000a    }\u000a    uVar1 = *(undefined4 *)&a->text;\u000a    uVar2 = *(undefined4 *)((long)&lo[-1].text + 4);\u000a    uVar4 = *(undefined4 *)&lo[-1].length;\u000a    uVar6 = *(undefined4 *)((long)&lo[-1].length + 4);\u000a    uVar3 = *(undefined4 *)((long)&lo[-1].keybeg + 4);\u000a    uVar5 = *(undefined4 *)&lo[-1].keylim;\u000a    uVar7 = *(undefined4 *)((long)&lo[-1].keylim + 4);\u000a    *(undefined4 *)&plVar12[-1].keybeg = *(undefined4 *)&lo[-1].keybeg;\u000a    *(undefined4 *)((long)&plVar12[-1].keybeg + 4) = uVar3;\u000a    *(undefined4 *)&plVar12[-1].keylim = uVar5;\u000a    *(undefined4 *)((long)&plVar12[-1].keylim + 4) = uVar7;\u000a    *(undefined4 *)&t->text = uVar1;\u000a    *(undefined4 *)((long)&plVar12[-1].text + 4) = uVar2;\u000a    *(undefined4 *)&plVar12[-1].length = uVar4;\u000a    *(undefined4 *)((long)&plVar12[-1].length + 4) = uVar6;\u000a    uVar9 = uVar9 - 1;\u000a    lo = a;\u000a    if (uVar9 == 0) {\u000a      return;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p1788
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV R13,RDI\nMOV RCX,R15\nSHR RCX,1\nSUB R15,RCX\nMOV RAX,RCX\nSHL RAX,0x5\nMOV RBP,R13\nSUB RBP,RAX\nMOV qword ptr [RSP],RCX\nLEA R12,[R14 + -0x20]\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RBX,[RBP + -0x20]\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x004062d0\nADD R13,-0x20\nTEST EAX,EAX\nJLE 0x004097d0\nMOVUPS XMM0,xmmword ptr [RBX]\nMOVUPS XMM1,xmmword ptr [RBX + 0x10]\nMOVUPS xmmword ptr [R13 + 0x10],XMM1\nMOVUPS xmmword ptr [R13],XMM0\nDEC R15\nMOV RBP,RBX\nJNZ 0x00409790\nJMP 0x004097f3\nMOVUPS XMM0,xmmword ptr [R12]\nMOVUPS XMM1,xmmword ptr [R12 + 0x10]\nMOVUPS xmmword ptr [R13 + 0x10],XMM1\nMOVUPS xmmword ptr [R13],XMM0\nMOV RCX,qword ptr [RSP]\nDEC RCX\nMOV R14,R12\nJNZ 0x0040977a\nJMP 0x00409823\nMOV RAX,-0x20\nXOR ECX,ECX\nMOV RDX,qword ptr [RSP]\nMOVUPS XMM0,xmmword ptr [R14 + RAX*0x1]\nMOVUPS XMM1,xmmword ptr [R14 + RAX*0x1 + 0x10]\nMOVUPS xmmword ptr [R13 + RAX*0x1 + 0x10],XMM1\nMOVUPS xmmword ptr [R13 + RAX*0x1],XMM0\nADD RAX,-0x20\nINC RCX\nCMP RCX,RDX\nJNZ 0x00409800\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1789
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n49 89 fd\n4c 89 f9\n48 d1 e9\n49 29 cf\n48 89 c8\n48 c1 e0 05\n4c 89 ed\n48 29 c5\n48 89 0c 24\n4d 8d 66 e0\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8d 5d e0\n4c 89 e7\n48 89 de\ne8 31 cb ff ff\n49 83 c5 e0\n85 c0\n7e 29\n0f 10 03\n0f 10 4b 10\n41 0f 11 4d 10\n41 0f 11 45 00\n49 ff cf\n48 89 dd\n75 d0\neb 31\n41 0f 10 04 24\n41 0f 10 4c 24 10\n41 0f 11 4d 10\n41 0f 11 45 00\n48 8b 0c 24\n48 ff c9\n4d 89 e6\n75 89\neb 30\n48 c7 c0 e0 ff ff ff\n31 c9\n48 8b 14 24\n41 0f 10 04 06\n41 0f 10 4c 06 10\n41 0f 11 4c 05 10\n41 0f 11 44 05 00\n48 83 c0 e0\n48 ff c1\n48 39 d1\n75 dd\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1790
S'.text:0000000000409750\n.text:0000000000409751\n.text:0000000000409753\n.text:0000000000409755\n.text:0000000000409757\n.text:0000000000409759\n.text:000000000040975a\n.text:000000000040975b\n.text:000000000040975e\n.text:0000000000409761\n.text:0000000000409764\n.text:0000000000409767\n.text:000000000040976a\n.text:000000000040976d\n.text:0000000000409770\n.text:0000000000409774\n.text:0000000000409777\n.text:000000000040977a\n.text:000000000040977e\n.text:0000000000409782\n.text:0000000000409790\n.text:0000000000409794\n.text:0000000000409797\n.text:000000000040979a\n.text:000000000040979f\n.text:00000000004097a3\n.text:00000000004097a5\n.text:00000000004097a7\n.text:00000000004097aa\n.text:00000000004097ae\n.text:00000000004097b3\n.text:00000000004097b8\n.text:00000000004097bb\n.text:00000000004097be\n.text:00000000004097c0\n.text:00000000004097d0\n.text:00000000004097d5\n.text:00000000004097db\n.text:00000000004097e0\n.text:00000000004097e5\n.text:00000000004097e9\n.text:00000000004097ec\n.text:00000000004097ef\n.text:00000000004097f1\n.text:00000000004097f3\n.text:00000000004097fa\n.text:00000000004097fc\n.text:0000000000409800\n.text:0000000000409805\n.text:000000000040980b\n.text:0000000000409811\n.text:0000000000409817\n.text:000000000040981b\n.text:000000000040981e\n.text:0000000000409821\n.text:0000000000409823\n.text:0000000000409827\n.text:0000000000409828\n.text:000000000040982a\n.text:000000000040982c\n.text:000000000040982e\n.text:0000000000409830\n.text:0000000000409831\n'
p1791
tp1792
sS'queue_pop'
p1793
(S'\n__stdcall queue_pop(merge_node_queue * queue)\n'
p1794
V\u000amerge_node * queue_pop(merge_node_queue *queue)\u000a\u000a{\u000a  pthread_mutex_t *__mutex;\u000a  merge_node *node;\u000a  \u000a  __mutex = (pthread_mutex_t *)queue->mutex;\u000a  pthread_mutex_lock(__mutex);\u000a  node = (merge_node *)heap_remove_top(queue->priority_queue);\u000a  if (node == (merge_node *)0x0) {\u000a    do {\u000a      pthread_cond_wait((pthread_cond_t *)queue->cond,__mutex);\u000a      node = (merge_node *)heap_remove_top(queue->priority_queue);\u000a    } while (node == (merge_node *)0x0);\u000a  }\u000a  pthread_mutex_unlock(__mutex);\u000a  lock_node(node);\u000a  node->queued = false;\u000a  return node;\u000a}\u000a\u000a
p1795
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDI\nLEA R14,[R15 + 0x8]\nMOV RDI,R14\nCALL 0x00402b20\nMOV RDI,qword ptr [R15]\nCALL 0x0040c240\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x0040988b\nLEA R12,[R15 + 0x30]\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x00402560\nMOV RDI,qword ptr [R15]\nCALL 0x0040c240\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00409870\nMOV RDI,R14\nCALL 0x00402850\nMOV RDI,RBX\nCALL 0x00409c80\nMOV byte ptr [RBX + 0x54],0x0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1796
S'41 57\n41 56\n41 54\n53\n50\n49 89 ff\n4d 8d 77 08\n4c 89 f7\ne8 c9 92 ff ff\n49 8b 3f\ne8 e1 29 00 00\n48 89 c3\n48 85 db\n75 24\n4d 8d 67 30\n0f 1f 44 00 00\n4c 89 e7\n4c 89 f6\ne8 e5 8c ff ff\n49 8b 3f\ne8 bd 29 00 00\n48 89 c3\n48 85 db\n74 e5\n4c 89 f7\ne8 bd 8f ff ff\n48 89 df\ne8 e5 03 00 00\nc6 43 54 00\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1797
S'.text:0000000000409840\n.text:0000000000409842\n.text:0000000000409844\n.text:0000000000409846\n.text:0000000000409847\n.text:0000000000409848\n.text:000000000040984b\n.text:000000000040984f\n.text:0000000000409852\n.text:0000000000409857\n.text:000000000040985a\n.text:000000000040985f\n.text:0000000000409862\n.text:0000000000409865\n.text:0000000000409867\n.text:000000000040986b\n.text:0000000000409870\n.text:0000000000409873\n.text:0000000000409876\n.text:000000000040987b\n.text:000000000040987e\n.text:0000000000409883\n.text:0000000000409886\n.text:0000000000409889\n.text:000000000040988b\n.text:000000000040988e\n.text:0000000000409893\n.text:0000000000409896\n.text:000000000040989b\n.text:000000000040989f\n.text:00000000004098a2\n.text:00000000004098a6\n.text:00000000004098a7\n.text:00000000004098a9\n.text:00000000004098ab\n.text:00000000004098ad\n'
p1798
tp1799
sS'call_freefun'
p1800
(S'\n__stdcall call_freefun(obstack * h, void * old_chunk)\n'
p1801
V\u000avoid call_freefun(obstack *h,void *old_chunk)\u000a\u000a{\u000a  undefined8 in_RDX;\u000a  \u000a  if ((*(byte *)&h->use_extra_arg_bitfield & 1) == 0) {\u000a                    /* WARNING: Could not recover jumptable at 0x00410b9c. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a    (*(code *)h->freefun)(old_chunk);\u000a    return;\u000a  }\u000a                    /* WARNING: Could not recover jumptable at 0x00410ba7. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)h->freefun)(h->extra_arg,old_chunk,in_RDX,(code *)h->freefun);\u000a  return;\u000a}\u000a\u000a
p1802
S'MOV RAX,RDI\nTEST byte ptr [RAX + 0x50],0x1\nJNZ 0x00410b9f\nMOV RDI,RSI\nJMP qword ptr [RAX + 0x40]\nMOV RCX,qword ptr [RAX + 0x40]\nMOV RDI,qword ptr [RAX + 0x48]\nJMP RCX\n'
p1803
S'48 89 f8\nf6 40 50 01\n75 06\n48 89 f7\nff 60 40\n48 8b 48 40\n48 8b 78 48\nff e1\n'
p1804
S'.text:0000000000410b90\n.text:0000000000410b93\n.text:0000000000410b97\n.text:0000000000410b99\n.text:0000000000410b9c\n.text:0000000000410b9f\n.text:0000000000410ba3\n.text:0000000000410ba7\n'
p1805
tp1806
sS'close_stdout_set_ignore_EPIPE'
p1807
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p1808
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p1809
S'MOV byte ptr [0x0061ab70],DIL\nRET\n'
p1810
S'40 88 3d 79 0b 21 00\nc3\n'
p1811
S'.text:0000000000409ff0\n.text:0000000000409ff7\n'
p1812
tp1813
sS'hash_get_n_buckets_used'
p1814
(S'\n__stdcall hash_get_n_buckets_used(Hash_table * table)\n'
p1815
V\u000asize_t hash_get_n_buckets_used(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets_used;\u000a}\u000a\u000a
p1816
S'MOV RAX,qword ptr [RDI + 0x18]\nRET\n'
p1817
S'48 8b 47 18\nc3\n'
p1818
S'.text:000000000040b140\n.text:000000000040b144\n'
p1819
tp1820
sS'iswprint'
p1821
(S'\n__stdcall iswprint(wint_t __wc)\n'
p1822
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0061a398)();\u000a  return iVar1;\u000a}\u000a\u000a
p1823
S'JMP qword ptr [0x0061a398]\n'
p1824
S'ff 25 c2 78 21 00\n'
p1825
S'.plt:0000000000402ad0\n'
p1826
tp1827
sS'ftruncate'
p1828
(S'\n__stdcall ftruncate(int __fd, __off_t __length)\n'
p1829
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ftruncate(int __fd,__off_t __length)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ftruncate_0061a158)();\u000a  return iVar1;\u000a}\u000a\u000a
p1830
S'JMP qword ptr [0x0061a158]\n'
p1831
S'ff 25 02 7b 21 00\n'
p1832
S'.plt:0000000000402650\n'
p1833
tp1834
sS'sortlines_thread'
p1835
(S'\n__stdcall sortlines_thread(void * data)\n'
p1836
V\u000avoid * sortlines_thread(void *data)\u000a\u000a{\u000a  sortlines(*(line **)data,*(size_t *)((long)data + 8),*(size_t *)((long)data + 0x10),\u000a            *(merge_node **)((long)data + 0x18),*(merge_node_queue **)((long)data + 0x20),\u000a            *(FILE **)((long)data + 0x28),*(char **)((long)data + 0x30));\u000a  return (void *)0x0;\u000a}\u000a\u000a
p1837
S'PUSH RAX\nMOV RAX,qword ptr [RDI]\nMOV RSI,qword ptr [RDI + 0x8]\nMOV RDX,qword ptr [RDI + 0x10]\nMOV RCX,qword ptr [RDI + 0x18]\nMOV R8,qword ptr [RDI + 0x20]\nMOV R9,qword ptr [RDI + 0x28]\nMOV RDI,qword ptr [RDI + 0x30]\nMOV qword ptr [RSP],RDI\nMOV RDI,RAX\nCALL 0x00409070\nXOR EAX,EAX\nPOP RCX\nRET\n'
p1838
S'50\n48 8b 07\n48 8b 77 08\n48 8b 57 10\n48 8b 4f 18\n4c 8b 47 20\n4c 8b 4f 28\n48 8b 7f 30\n48 89 3c 24\n48 89 c7\ne8 38 fb ff ff\n31 c0\n59\nc3\n'
p1839
S'.text:0000000000409510\n.text:0000000000409511\n.text:0000000000409514\n.text:0000000000409518\n.text:000000000040951c\n.text:0000000000409520\n.text:0000000000409524\n.text:0000000000409528\n.text:000000000040952c\n.text:0000000000409530\n.text:0000000000409533\n.text:0000000000409538\n.text:000000000040953a\n.text:000000000040953b\n'
p1840
tp1841
sS'c_isspace'
p1842
(S'\n__stdcall c_isspace()\n'
p1843
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1844
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00410e85\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1845
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1846
S'.text:0000000000410e70\n.text:0000000000410e73\n.text:0000000000410e76\n.text:0000000000410e78\n.text:0000000000410e7d\n.text:0000000000410e7f\n.text:0000000000410e81\n.text:0000000000410e84\n.text:0000000000410e85\n.text:0000000000410e87\n'
p1847
tp1848
sS'open'
p1849
(S'\n__stdcall open(char * __file, int __oflag)\n'
p1850
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0061a2f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1851
S'JMP qword ptr [0x0061a2f0]\n'
p1852
S'ff 25 6a 79 21 00\n'
p1853
S'.plt:0000000000402980\n'
p1854
tp1855
sS'getmonth'
p1856
(S'\n__stdcall getmonth(char * month, char * * ea)\n'
p1857
V\u000aint getmonth(char *month,char **ea)\u000a\u000a{\u000a  byte *pbVar1;\u000a  byte bVar2;\u000a  byte bVar3;\u000a  ulong uVar4;\u000a  char *pcVar5;\u000a  ulong uVar6;\u000a  ulong uVar7;\u000a  long lVar8;\u000a  \u000a  do {\u000a    pcVar5 = month;\u000a    bVar2 = to_uchar();\u000a    month = pcVar5 + 1;\u000a  } while (blanks[(ulong)bVar2] != false);\u000a  uVar7 = 0;\u000a  uVar4 = 0xc;\u000aLAB_00407233:\u000a  do {\u000a    uVar6 = uVar4 + uVar7 >> 1;\u000a    pbVar1 = (byte *)monthtab[uVar6].name;\u000a    bVar2 = *pbVar1;\u000a    if (bVar2 == 0) {\u000aLAB_004072d3:\u000a      if (ea != (char **)0x0) {\u000a        *ea = pcVar5;\u000a      }\u000a      return monthtab[uVar6].val;\u000a    }\u000a    lVar8 = -1;\u000a    while( true ) {\u000a      to_uchar();\u000a      bVar3 = to_uchar();\u000a      if (bVar3 < bVar2) break;\u000a      if (bVar3 >= bVar2 && bVar3 != bVar2) {\u000a        uVar7 = uVar6 + 1;\u000a        if (uVar4 <= uVar7) {\u000a          return 0;\u000a        }\u000a        goto LAB_00407233;\u000a      }\u000a      bVar2 = pbVar1[lVar8 + 2];\u000a      lVar8 = lVar8 + 1;\u000a      if (bVar2 == 0) {\u000a        pcVar5 = pcVar5 + 1 + lVar8;\u000a        goto LAB_004072d3;\u000a      }\u000a    }\u000a    uVar4 = uVar6;\u000a    if (uVar6 <= uVar7) {\u000a      return 0;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p1858
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV qword ptr [RSP + 0x8],RSI\nMOV RBX,RDI\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV R15,RBX\nMOVSX EDI,byte ptr [R15]\nCALL 0x004042c0\nMOVZX EAX,AL\nLEA RBX,[R15 + 0x1]\nCMP byte ptr [0x61a670 + RAX],0x0\nJNZ 0x00407210\nMOV EAX,0xc\nXOR ECX,ECX\nLEA RBP,[RAX + RCX*0x1]\nSHR RBP,1\nMOV RDX,RBP\nSHL RDX,0x4\nMOV R12,qword ptr [0x61a400 + RDX]\nMOV R14B,byte ptr [R12]\nTEST R14B,R14B\nJZ 0x004072d3\nMOV qword ptr [RSP + 0x10],RDX\nMOV qword ptr [RSP + 0x20],RCX\nMOV qword ptr [RSP + 0x18],RAX\nMOV R13,-0x1\nNOP dword ptr [RAX + RAX*0x1]\nMOVSX EDI,byte ptr [RBX + R13*0x1]\nCALL 0x004042c0\nMOVZX EAX,AL\nMOVSX EDI,byte ptr [0x61a970 + RAX]\nCALL 0x004042c0\nCMP AL,R14B\nJC 0x004072a0\nJA 0x004072b0\nMOVZX R14D,byte ptr [R12 + R13*0x1 + 0x2]\nINC R13\nTEST R14B,R14B\nJNZ 0x00407270\nJMP 0x004072c8\nMOV RAX,RBP\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,RAX\nJC 0x00407233\nJMP 0x004072c4\nINC RBP\nMOV RCX,RBP\nMOV RAX,qword ptr [RSP + 0x18]\nCMP RCX,RAX\nJC 0x00407233\nXOR EAX,EAX\nJMP 0x004072e6\nADD RBX,R13\nMOV R15,RBX\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004072e0\nMOV qword ptr [RAX],R15\nMOV EAX,dword ptr [0x61a408 + RDX]\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1859
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 74 24 08\n48 89 fb\n66 2e 0f 1f 84 00 00 00 00 00\n49 89 df\n41 0f be 3f\ne8 a4 d0 ff ff\n0f b6 c0\n49 8d 5f 01\n80 b8 70 a6 61 00 00\n75 e4\nb8 0c 00 00 00\n31 c9\n48 8d 2c 08\n48 d1 ed\n48 89 ea\n48 c1 e2 04\n4c 8b a2 00 a4 61 00\n45 8a 34 24\n45 84 f6\n0f 84 7e 00 00 00\n48 89 54 24 10\n48 89 4c 24 20\n48 89 44 24 18\n49 c7 c5 ff ff ff ff\n0f 1f 44 00 00\n42 0f be 3c 2b\ne8 46 d0 ff ff\n0f b6 c0\n0f be b8 70 a9 61 00\ne8 37 d0 ff ff\n44 38 f0\n72 12\n77 20\n47 0f b6 74 2c 02\n49 ff c5\n45 84 f6\n75 d2\neb 28\n48 89 e8\n48 8b 4c 24 20\n48 39 c1\n72 86\neb 15\n48 ff c5\n48 89 e9\n48 8b 44 24 18\n48 39 c1\n0f 82 6f ff ff ff\n31 c0\neb 1e\n4c 01 eb\n49 89 df\n48 8b 54 24 10\n48 8b 44 24 08\n48 85 c0\n74 03\n4c 89 38\n8b 82 08 a4 61 00\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1860
S'.text:00000000004071f0\n.text:00000000004071f1\n.text:00000000004071f3\n.text:00000000004071f5\n.text:00000000004071f7\n.text:00000000004071f9\n.text:00000000004071fa\n.text:00000000004071fe\n.text:0000000000407203\n.text:0000000000407206\n.text:0000000000407210\n.text:0000000000407213\n.text:0000000000407217\n.text:000000000040721c\n.text:000000000040721f\n.text:0000000000407223\n.text:000000000040722a\n.text:000000000040722c\n.text:0000000000407231\n.text:0000000000407233\n.text:0000000000407237\n.text:000000000040723a\n.text:000000000040723d\n.text:0000000000407241\n.text:0000000000407248\n.text:000000000040724c\n.text:000000000040724f\n.text:0000000000407255\n.text:000000000040725a\n.text:000000000040725f\n.text:0000000000407264\n.text:000000000040726b\n.text:0000000000407270\n.text:0000000000407275\n.text:000000000040727a\n.text:000000000040727d\n.text:0000000000407284\n.text:0000000000407289\n.text:000000000040728c\n.text:000000000040728e\n.text:0000000000407290\n.text:0000000000407296\n.text:0000000000407299\n.text:000000000040729c\n.text:000000000040729e\n.text:00000000004072a0\n.text:00000000004072a3\n.text:00000000004072a8\n.text:00000000004072ab\n.text:00000000004072ad\n.text:00000000004072b0\n.text:00000000004072b3\n.text:00000000004072b6\n.text:00000000004072bb\n.text:00000000004072be\n.text:00000000004072c4\n.text:00000000004072c6\n.text:00000000004072c8\n.text:00000000004072cb\n.text:00000000004072ce\n.text:00000000004072d3\n.text:00000000004072d8\n.text:00000000004072db\n.text:00000000004072dd\n.text:00000000004072e0\n.text:00000000004072e6\n.text:00000000004072ea\n.text:00000000004072eb\n.text:00000000004072ed\n.text:00000000004072ef\n.text:00000000004072f1\n.text:00000000004072f3\n.text:00000000004072f4\n'
p1861
tp1862
sS'rotl16'
p1863
(S'\n__stdcall rotl16()\n'
p1864
V\u000auint16_t rotl16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI >> (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p1865
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p1866
S'89 f8\n89 f1\nd3 e0\nb9 10 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p1867
S'.text:0000000000410d10\n.text:0000000000410d12\n.text:0000000000410d14\n.text:0000000000410d16\n.text:0000000000410d1b\n.text:0000000000410d1d\n.text:0000000000410d1f\n.text:0000000000410d21\n.text:0000000000410d23\n'
p1868
tp1869
sS'md5_stream'
p1870
(S'\n__stdcall md5_stream(FILE * stream, void * resblock)\n'
p1871
V\u000aint md5_stream(FILE *stream,void *resblock)\u000a\u000a{\u000a  int iVar1;\u000a  void *__ptr;\u000a  size_t sVar2;\u000a  size_t len;\u000a  md5_ctx local_d0;\u000a  \u000a  __ptr = malloc(0x8048);\u000a  if (__ptr == (void *)0x0) {\u000a    return 1;\u000a  }\u000a  md5_init_ctx(&local_d0);\u000a  do {\u000a    len = 0;\u000a    while( true ) {\u000a      sVar2 = fread_unlocked((void *)((long)__ptr + len),1,0x8000 - len,(FILE *)stream);\u000a      len = len + sVar2;\u000a      if (len == 0x8000) break;\u000a      if (sVar2 == 0) {\u000a        iVar1 = ferror_unlocked((FILE *)stream);\u000a        if (iVar1 != 0) {\u000a          free(__ptr);\u000a          return 1;\u000a        }\u000a        goto LAB_0040a9de;\u000a      }\u000a      iVar1 = feof_unlocked((FILE *)stream);\u000a      if (iVar1 != 0) {\u000aLAB_0040a9de:\u000a        if (len != 0) {\u000a          md5_process_bytes(__ptr,len,&local_d0);\u000a        }\u000a        md5_finish_ctx(&local_d0,resblock);\u000a        free(__ptr);\u000a        return 0;\u000a      }\u000a    }\u000a    md5_process_block(__ptr,0x8000,&local_d0);\u000a  } while( true );\u000a}\u000a\u000a
p1872
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV R14,RSI\nMOV RBP,RDI\nMOV EDI,0x8048\nCALL 0x00402860\nMOV R13,RAX\nMOV R15D,0x1\nTEST R13,R13\nJZ 0x0040aa0b\nLEA R12,[RSP + 0x8]\nMOV RDI,R12\nCALL 0x0040a0c0\nJMP 0x0040a990\nTEST RAX,RAX\nJZ 0x0040a9c8\nMOV RDI,RBP\nCALL 0x00402b10\nTEST EAX,EAX\nJZ 0x0040a9a0\nJMP 0x0040a9de\nMOV ESI,0x8000\nMOV RDI,R13\nMOV RDX,R12\nCALL 0x0040a1f0\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nLEA RDI,[R13 + RBX*0x1]\nMOV EDX,0x8000\nSUB RDX,RBX\nMOV ESI,0x1\nMOV RCX,RBP\nCALL 0x00402540\nADD RBX,RAX\nCMP RBX,0x8000\nJNZ 0x0040a960\nJMP 0x0040a980\nMOV RDI,RBP\nCALL 0x00402740\nTEST EAX,EAX\nJZ 0x0040a9de\nMOV RDI,R13\nCALL 0x00402400\nJMP 0x0040aa0b\nTEST RBX,RBX\nJZ 0x0040a9f3\nLEA RDX,[RSP + 0x8]\nMOV RDI,R13\nMOV RSI,RBX\nCALL 0x0040aa20\nLEA RDI,[RSP + 0x8]\nMOV RSI,R14\nCALL 0x0040a150\nMOV RDI,R13\nCALL 0x00402400\nXOR R15D,R15D\nMOV EAX,R15D\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1873
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n49 89 f6\n48 89 fd\nbf 48 80 00 00\ne8 2f 7f ff ff\n49 89 c5\n41 bf 01 00 00 00\n4d 85 ed\n0f 84 c8 00 00 00\n4c 8d 64 24 08\n4c 89 e7\ne8 70 f7 ff ff\neb 3e\n48 85 c0\n74 63\n48 89 ef\ne8 a3 81 ff ff\n85 c0\n74 2f\neb 6b\nbe 00 80 00 00\n4c 89 ef\n4c 89 e2\ne8 60 f8 ff ff\n31 db\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8d 7c 1d 00\nba 00 80 00 00\n48 29 da\nbe 01 00 00 00\n48 89 e9\ne8 86 7b ff ff\n48 01 c3\n48 81 fb 00 80 00 00\n75 9a\neb b8\n48 89 ef\ne8 70 7d ff ff\n85 c0\n74 0a\n4c 89 ef\ne8 24 7a ff ff\neb 2d\n48 85 db\n74 10\n48 8d 54 24 08\n4c 89 ef\n48 89 de\ne8 2d 00 00 00\n48 8d 7c 24 08\n4c 89 f6\ne8 50 f7 ff ff\n4c 89 ef\ne8 f8 79 ff ff\n45 31 ff\n44 89 f8\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1874
S'.text:000000000040a910\n.text:000000000040a911\n.text:000000000040a913\n.text:000000000040a915\n.text:000000000040a917\n.text:000000000040a919\n.text:000000000040a91a\n.text:000000000040a921\n.text:000000000040a924\n.text:000000000040a927\n.text:000000000040a92c\n.text:000000000040a931\n.text:000000000040a934\n.text:000000000040a93a\n.text:000000000040a93d\n.text:000000000040a943\n.text:000000000040a948\n.text:000000000040a94b\n.text:000000000040a950\n.text:000000000040a960\n.text:000000000040a963\n.text:000000000040a965\n.text:000000000040a968\n.text:000000000040a96d\n.text:000000000040a96f\n.text:000000000040a971\n.text:000000000040a980\n.text:000000000040a985\n.text:000000000040a988\n.text:000000000040a98b\n.text:000000000040a990\n.text:000000000040a992\n.text:000000000040a9a0\n.text:000000000040a9a5\n.text:000000000040a9aa\n.text:000000000040a9ad\n.text:000000000040a9b2\n.text:000000000040a9b5\n.text:000000000040a9ba\n.text:000000000040a9bd\n.text:000000000040a9c4\n.text:000000000040a9c6\n.text:000000000040a9c8\n.text:000000000040a9cb\n.text:000000000040a9d0\n.text:000000000040a9d2\n.text:000000000040a9d4\n.text:000000000040a9d7\n.text:000000000040a9dc\n.text:000000000040a9de\n.text:000000000040a9e1\n.text:000000000040a9e3\n.text:000000000040a9e8\n.text:000000000040a9eb\n.text:000000000040a9ee\n.text:000000000040a9f3\n.text:000000000040a9f8\n.text:000000000040a9fb\n.text:000000000040aa00\n.text:000000000040aa03\n.text:000000000040aa08\n.text:000000000040aa0b\n.text:000000000040aa0e\n.text:000000000040aa15\n.text:000000000040aa16\n.text:000000000040aa18\n.text:000000000040aa1a\n.text:000000000040aa1c\n.text:000000000040aa1e\n.text:000000000040aa1f\n'
p1875
tp1876
sS'xstrxfrm'
p1877
(S'\n__stdcall xstrxfrm(char * dest, char * src, size_t destsize)\n'
p1878
V\u000asize_t xstrxfrm(char *dest,char *src,size_t destsize)\u000a\u000a{\u000a  uint uVar1;\u000a  uint *puVar2;\u000a  size_t sVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  \u000a  puVar2 = (uint *)__errno_location();\u000a  *puVar2 = 0;\u000a  sVar3 = strxfrm(dest,src,destsize);\u000a  uVar1 = *puVar2;\u000a  if (uVar1 != 0) {\u000a    uVar4 = dcgettext(0,"string transformation failed",5);\u000a    error(0,(ulong)uVar1,uVar4,uVar4);\u000a    uVar4 = dcgettext(0,"set LC_ALL=\u005c'C\u005c' to work around the problem",5);\u000a    error(0,0,uVar4,uVar4);\u000a    uVar4 = dcgettext(0,"the untransformed string was %s",5);\u000a    pcVar5 = quotearg_n_style((char *)0x0);\u000a    error(2,0,uVar4,pcVar5);\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p1879
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nCALL 0x00402430\nMOV RBP,RAX\nMOV dword ptr [RBP],0x0\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x00402760\nMOV R14,RAX\nMOV EBP,dword ptr [RBP]\nTEST EBP,EBP\nJZ 0x00407842\nXOR EDI,EDI\nMOV ESI,0x413eb4\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00402960\nXOR EDI,EDI\nMOV ESI,0x413ed1\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402960\nXOR EDI,EDI\nMOV ESI,0x413efb\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x0040dbb0\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00402960\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1880
S'55\n41 57\n41 56\n53\n50\n49 89 d6\n49 89 f7\n48 89 fb\ne8 8b ac ff ff\n48 89 c5\nc7 45 00 00 00 00 00\n48 89 df\n4c 89 fe\n4c 89 f2\ne8 a3 af ff ff\n49 89 c6\n8b 6d 00\n85 ed\n74 7b\n31 ff\nbe b4 3e 41 00\nba 05 00 00 00\ne8 d8 ad ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\ne8 77 b1 ff ff\n31 ff\nbe d1 3e 41 00\nba 05 00 00 00\ne8 b6 ad ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 55 b1 ff ff\n31 ff\nbe fb 3e 41 00\nba 05 00 00 00\ne8 94 ad ff ff\n48 89 c3\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 82 63 00 00\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 1e b1 ff ff\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1881
S'.text:0000000000407790\n.text:0000000000407791\n.text:0000000000407793\n.text:0000000000407795\n.text:0000000000407796\n.text:0000000000407797\n.text:000000000040779a\n.text:000000000040779d\n.text:00000000004077a0\n.text:00000000004077a5\n.text:00000000004077a8\n.text:00000000004077af\n.text:00000000004077b2\n.text:00000000004077b5\n.text:00000000004077b8\n.text:00000000004077bd\n.text:00000000004077c0\n.text:00000000004077c3\n.text:00000000004077c5\n.text:00000000004077c7\n.text:00000000004077c9\n.text:00000000004077ce\n.text:00000000004077d3\n.text:00000000004077d8\n.text:00000000004077db\n.text:00000000004077dd\n.text:00000000004077df\n.text:00000000004077e1\n.text:00000000004077e4\n.text:00000000004077e9\n.text:00000000004077eb\n.text:00000000004077f0\n.text:00000000004077f5\n.text:00000000004077fa\n.text:00000000004077fd\n.text:00000000004077ff\n.text:0000000000407801\n.text:0000000000407803\n.text:0000000000407806\n.text:000000000040780b\n.text:000000000040780d\n.text:0000000000407812\n.text:0000000000407817\n.text:000000000040781c\n.text:000000000040781f\n.text:0000000000407821\n.text:0000000000407826\n.text:0000000000407829\n.text:000000000040782e\n.text:0000000000407831\n.text:0000000000407836\n.text:0000000000407838\n.text:000000000040783a\n.text:000000000040783d\n.text:0000000000407842\n.text:0000000000407845\n.text:0000000000407849\n.text:000000000040784a\n.text:000000000040784c\n.text:000000000040784e\n.text:000000000040784f\n'
p1882
tp1883
sS'set_quoting_flags'
p1884
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p1885
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p1886
S'TEST RDI,RDI\nMOV ECX,0x61ab80\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p1887
S'48 85 ff\nb9 80 ab 61 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p1888
S'.text:000000000040cb10\n.text:000000000040cb13\n.text:000000000040cb18\n.text:000000000040cb1c\n.text:000000000040cb1f\n.text:000000000040cb22\n'
p1889
tp1890
sS'specify_nmerge'
p1891
(S'\n__stdcall specify_nmerge(char * s)\n'
p1892
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid specify_nmerge(char *s)\u000a\u000a{\u000a  option **ppoVar1;\u000a  char *pcVar2;\u000a  strtol_error sVar3;\u000a  int iVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  char *s_00;\u000a  char *s_01;\u000a  option *long_options;\u000a  uint in_ESI;\u000a  uint uVar7;\u000a  double dVar8;\u000a  undefined auVar9 [16];\u000a  rlimit rlimit;\u000a  char max_nmerge_buf [11];\u000a  ulong uStack144;\u000a  char *pcStack136;\u000a  char *pcStack128;\u000a  ulong uStack120;\u000a  option *poStack112;\u000a  char *local_60;\u000a  ulong local_58;\u000a  int local_50 [8];\u000a  \u000a  uStack120 = (ulong)in_ESI;\u000a  poStack112 = (option *)0x40473e;\u000a  sVar3 = xstrtoumax(s_00,(char **)0x0,(uintmax_t *)0xa,(char *)&local_58);\u000a  long_options = (option *)(ulong)sVar3;\u000a  poStack112 = (option *)0x40474f;\u000a  iVar4 = getrlimit(RLIMIT_NOFILE,(rlimit *)local_50);\u000a  pcStack128 = (char *)0x11;\u000a  if (iVar4 == 0) {\u000a    pcStack128 = (char *)(ulong)(local_50[0] - 3);\u000a  }\u000a  iVar4 = (int)(char *)((ulong)s & 0xffffffff);\u000a  if (sVar3 == LONGINT_OVERFLOW) goto LAB_0040478c;\u000a  if (sVar3 == LONGINT_OK) {\u000a    nmerge = (uint)local_58;\u000a    if ((local_58 & 0xffffffff) != local_58) {\u000aLAB_0040478c:\u000a      poStack112 = (option *)0x40479d;\u000a      uVar5 = dcgettext(0,"--%s argument %s too large",5);\u000a      pcVar2 = long_options[(long)iVar4].name;\u000a      poStack112 = (option *)0x4047b6;\u000a      pcVar6 = quote(s_00);\u000a      poStack112 = (option *)0x4047cd;\u000a      error(0,0,uVar5,pcVar2,pcVar6);\u000a      poStack112 = (option *)0x4047de;\u000a      uVar5 = dcgettext(0,"maximum --%s argument with current rlimit is %s",5);\u000a      poStack112 = (option *)0x4047ed;\u000a      pcVar6 = uinttostr(pcStack128);\u000a      poStack112 = (option *)0x404807;\u000a      error(2,0,uVar5,pcVar2,pcVar6);\u000a      return;\u000a    }\u000a    if (1 < nmerge) {\u000a      if (nmerge <= (uint)pcStack128) {\u000a        return;\u000a      }\u000a      goto LAB_0040478c;\u000a    }\u000a    long_options = (option *)0x0;\u000a    poStack112 = (option *)0x404829;\u000a    uVar5 = dcgettext(0,"invalid --%s argument %s",5);\u000a    pcVar2 = long_options[(long)iVar4].name;\u000a    poStack112 = (option *)0x404847;\u000a    local_60 = pcVar2;\u000a    pcVar6 = quote(s_00);\u000a    poStack112 = (option *)0x40485b;\u000a    error(0,0,uVar5,pcVar2,pcVar6);\u000a    poStack112 = (option *)0x40486c;\u000a    uVar5 = dcgettext(0,"minimum --%s argument is %s",5);\u000a    poStack112 = (option *)0x404879;\u000a    pcStack128 = quote("2");\u000a    poStack112 = (option *)0x404895;\u000a    error(2,0,uVar5,local_60,pcStack128);\u000a  }\u000a  uVar7 = (uint)long_options;\u000a  poStack112 = (option *)0x4048ab;\u000a  xstrtol_fatal(long_options,(char *)((ulong)s & 0xffffffff));\u000a  poStack112 = long_options;\u000a  sVar3 = xstrtoumax(s_01,&pcStack136,(uintmax_t *)0xa,(char *)&uStack144);\u000a  if (sVar3 == LONGINT_INVALID_SUFFIX_CHAR) {\u000a    sVar3 = LONGINT_INVALID_SUFFIX_CHAR;\u000a    if ((9 < (int)pcStack136[-1] - 0x30U) || (pcStack136[1] != 0)) goto LAB_004049ef;\u000a    if (*pcStack136 == 'b') goto LAB_004049bc;\u000a    if (*pcStack136 != '%') goto LAB_004049ef;\u000a    dVar8 = physmem_total();\u000a    auVar9 = subpd(CONCAT88(SUB168(CONCAT412(DAT_004125c4,\u000a                                             ZEXT812(uStack144) &\u000a                                             (undefined  [12])0xffffffffffffffff |\u000a                                             (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                            CONCAT44(DAT_004125c0,\u000a                                     SUB124(ZEXT812(uStack144) & (undefined  [12])0xffffffffffffffff\u000a                                            ,0))),_DAT_004125d0);\u000a    auVar9 = addpd(CONCAT412(SUB164(auVar9 >> 0x20,0),\u000a                             CONCAT48(SUB164(auVar9,0),SUB168(auVar9 >> 0x40,0))),auVar9);\u000a    dVar8 = (SUB168(auVar9,0) * dVar8) / _DAT_004125f0;\u000a    if (dVar8 < DAT_004125f8) {\u000a      uStack144 = (long)dVar8;\u000a      if (DAT_00412600 <= dVar8) {\u000a        uStack144 = (long)(dVar8 - DAT_00412600) ^ 0x8000000000000000;\u000a      }\u000a      goto LAB_004049bc;\u000a    }\u000a  }\u000a  else {\u000a    if (sVar3 != LONGINT_OK) goto LAB_004049ef;\u000a    if (9 < (int)pcStack136[-1] - 0x30U) {\u000aLAB_004049bc:\u000a      if ((sort_size <= uStack144) && (sort_size = (ulong)nmerge * 0x22, sort_size < uStack144)) {\u000a        sort_size = uStack144;\u000a      }\u000a      return;\u000a    }\u000a    if (uStack144 >> 0x36 == 0) {\u000a      uStack144 = uStack144 << 10;\u000a      goto LAB_004049bc;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OVERFLOW;\u000aLAB_004049ef:\u000a  long_options = (option *)(ulong)sVar3;\u000a  xstrtol_fatal(long_options,(char *)(ulong)uVar7);\u000a  if (temp_dir_count == temp_dir_alloc) {\u000a    temp_dirs = (char **)x2nrealloc(temp_dirs,&temp_dir_alloc,8);\u000a  }\u000a  ppoVar1 = (option **)(temp_dirs + temp_dir_count);\u000a  temp_dir_count = temp_dir_count + 1;\u000a  *ppoVar1 = long_options;\u000a  return;\u000a}\u000a\u000a
p1893
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV R12,RDX\nMOV R14D,ESI\nMOV R15D,EDI\nLEA RCX,[RSP + 0x10]\nXOR ESI,ESI\nMOV EDX,0xa\nXOR R8D,R8D\nMOV RDI,R12\nCALL 0x004102c0\nMOV EBP,EAX\nLEA RSI,[RSP + 0x18]\nMOV EDI,0x7\nCALL 0x00402a80\nMOV ECX,dword ptr [RSP + 0x18]\nADD ECX,-0x3\nTEST EAX,EAX\nMOV EBX,0x11\nCMOVZ EBX,ECX\nCMP EBP,0x1\nJZ 0x0040478c\nTEST EBP,EBP\nJNZ 0x00404895\nMOV RAX,qword ptr [RSP + 0x10]\nMOV dword ptr [0x0061a3f0],EAX\nMOV ECX,EAX\nCMP RCX,RAX\nJNZ 0x0040478c\nCMP EAX,0x1\nJBE 0x00404816\nCMP EBX,EAX\nJNC 0x00404807\nXOR EDI,EDI\nMOV ESI,0x413c53\nMOV EDX,0x5\nCALL 0x004025b0\nMOV R13,RAX\nMOVSXD RAX,R15D\nSHL RAX,0x5\nMOV R14,qword ptr [0x412000 + RAX]\nMOV RDI,R12\nCALL 0x0040deb0\nMOV RBP,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R13\nMOV RCX,R14\nMOV R8,RBP\nCALL 0x00402960\nXOR EDI,EDI\nMOV ESI,0x413c6e\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RBP,RAX\nLEA RSI,[RSP + 0x2d]\nMOV EDI,EBX\nCALL 0x0040c3c0\nMOV RBX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nMOV RCX,R14\nMOV R8,RBX\nCALL 0x00402960\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x413c1c\nMOV EDX,0x5\nCALL 0x004025b0\nMOV R13,RAX\nMOVSXD RAX,R15D\nSHL RAX,0x5\nMOV RBX,qword ptr [0x412000 + RAX]\nMOV qword ptr [RSP + 0x8],RBX\nMOV RDI,R12\nCALL 0x0040deb0\nMOV R8,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R13\nMOV RCX,RBX\nCALL 0x00402960\nXOR EDI,EDI\nMOV ESI,0x413c35\nMOV EDX,0x5\nCALL 0x004025b0\nMOV R13,RAX\nMOV EDI,0x413c51\nCALL 0x0040deb0\nMOV RBX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R13\nMOV RCX,qword ptr [RSP + 0x8]\nMOV R8,RBX\nCALL 0x00402960\nMOVSX EDX,R14B\nMOV ECX,0x412000\nMOV EDI,EBP\nMOV ESI,R15D\nMOV R8,R12\nCALL 0x00410210\nNOP dword ptr [RAX + RAX*0x1]\n'
p1894
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n49 89 d4\n41 89 f6\n41 89 ff\n48 8d 4c 24 10\n31 f6\nba 0a 00 00 00\n45 31 c0\n4c 89 e7\ne8 82 bb 00 00\n89 c5\n48 8d 74 24 18\nbf 07 00 00 00\ne8 31 e3 ff ff\n8b 4c 24 18\n83 c1 fd\n85 c0\nbb 11 00 00 00\n0f 44 d9\n83 fd 01\n74 27\n85 ed\n0f 85 28 01 00 00\n48 8b 44 24 10\n89 05 78 5c 21 00\n89 c1\n48 39 c1\n75 0d\n83 f8 01\n0f 86 8e 00 00 00\n39 c3\n73 7b\n31 ff\nbe 53 3c 41 00\nba 05 00 00 00\ne8 13 de ff ff\n49 89 c5\n49 63 c7\n48 c1 e0 05\n4c 8b b0 00 20 41 00\n4c 89 e7\ne8 fa 96 00 00\n48 89 c5\n31 ff\n31 f6\n31 c0\n4c 89 ea\n4c 89 f1\n49 89 e8\ne8 93 e1 ff ff\n31 ff\nbe 6e 3c 41 00\nba 05 00 00 00\ne8 d2 dd ff ff\n48 89 c5\n48 8d 74 24 2d\n89 df\ne8 d3 7b 00 00\n48 89 c3\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ea\n4c 89 f1\n49 89 d8\ne8 59 e1 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 ed\n31 ff\nbe 1c 3c 41 00\nba 05 00 00 00\ne8 87 dd ff ff\n49 89 c5\n49 63 c7\n48 c1 e0 05\n48 8b 98 00 20 41 00\n48 89 5c 24 08\n4c 89 e7\ne8 69 96 00 00\n49 89 c0\n31 ff\n31 f6\n31 c0\n4c 89 ea\n48 89 d9\ne8 05 e1 ff ff\n31 ff\nbe 35 3c 41 00\nba 05 00 00 00\ne8 44 dd ff ff\n49 89 c5\nbf 51 3c 41 00\ne8 37 96 00 00\n48 89 c3\nbf 02 00 00 00\n31 f6\n31 c0\n4c 89 ea\n48 8b 4c 24 08\n49 89 d8\ne8 cb e0 ff ff\n41 0f be d6\nb9 00 20 41 00\n89 ef\n44 89 fe\n4d 89 e0\ne8 65 b9 00 00\n0f 1f 44 00 00\n'
p1895
S'.text:0000000000404710\n.text:0000000000404711\n.text:0000000000404713\n.text:0000000000404715\n.text:0000000000404717\n.text:0000000000404719\n.text:000000000040471a\n.text:000000000040471e\n.text:0000000000404721\n.text:0000000000404724\n.text:0000000000404727\n.text:000000000040472c\n.text:000000000040472e\n.text:0000000000404733\n.text:0000000000404736\n.text:0000000000404739\n.text:000000000040473e\n.text:0000000000404740\n.text:0000000000404745\n.text:000000000040474a\n.text:000000000040474f\n.text:0000000000404753\n.text:0000000000404756\n.text:0000000000404758\n.text:000000000040475d\n.text:0000000000404760\n.text:0000000000404763\n.text:0000000000404765\n.text:0000000000404767\n.text:000000000040476d\n.text:0000000000404772\n.text:0000000000404778\n.text:000000000040477a\n.text:000000000040477d\n.text:000000000040477f\n.text:0000000000404782\n.text:0000000000404788\n.text:000000000040478a\n.text:000000000040478c\n.text:000000000040478e\n.text:0000000000404793\n.text:0000000000404798\n.text:000000000040479d\n.text:00000000004047a0\n.text:00000000004047a3\n.text:00000000004047a7\n.text:00000000004047ae\n.text:00000000004047b1\n.text:00000000004047b6\n.text:00000000004047b9\n.text:00000000004047bb\n.text:00000000004047bd\n.text:00000000004047bf\n.text:00000000004047c2\n.text:00000000004047c5\n.text:00000000004047c8\n.text:00000000004047cd\n.text:00000000004047cf\n.text:00000000004047d4\n.text:00000000004047d9\n.text:00000000004047de\n.text:00000000004047e1\n.text:00000000004047e6\n.text:00000000004047e8\n.text:00000000004047ed\n.text:00000000004047f0\n.text:00000000004047f5\n.text:00000000004047f7\n.text:00000000004047f9\n.text:00000000004047fc\n.text:00000000004047ff\n.text:0000000000404802\n.text:0000000000404807\n.text:000000000040480b\n.text:000000000040480c\n.text:000000000040480e\n.text:0000000000404810\n.text:0000000000404812\n.text:0000000000404814\n.text:0000000000404815\n.text:0000000000404816\n.text:0000000000404818\n.text:000000000040481a\n.text:000000000040481f\n.text:0000000000404824\n.text:0000000000404829\n.text:000000000040482c\n.text:000000000040482f\n.text:0000000000404833\n.text:000000000040483a\n.text:000000000040483f\n.text:0000000000404842\n.text:0000000000404847\n.text:000000000040484a\n.text:000000000040484c\n.text:000000000040484e\n.text:0000000000404850\n.text:0000000000404853\n.text:0000000000404856\n.text:000000000040485b\n.text:000000000040485d\n.text:0000000000404862\n.text:0000000000404867\n.text:000000000040486c\n.text:000000000040486f\n.text:0000000000404874\n.text:0000000000404879\n.text:000000000040487c\n.text:0000000000404881\n.text:0000000000404883\n.text:0000000000404885\n.text:0000000000404888\n.text:000000000040488d\n.text:0000000000404890\n.text:0000000000404895\n.text:0000000000404899\n.text:000000000040489e\n.text:00000000004048a0\n.text:00000000004048a3\n.text:00000000004048a6\n.text:00000000004048ab\n'
p1896
tp1897
sS'localeconv'
p1898
(S'\n__stdcall localeconv()\n'
p1899
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000alconv * localeconv(void)\u000a\u000a{\u000a  lconv *plVar1;\u000a  \u000a  plVar1 = (lconv *)(*(code *)PTR_localeconv_0061a0a8)();\u000a  return plVar1;\u000a}\u000a\u000a
p1900
S'JMP qword ptr [0x0061a0a8]\n'
p1901
S'ff 25 b2 7b 21 00\n'
p1902
S'.plt:00000000004024f0\n'
p1903
tp1904
sS'__fprintf_chk'
p1905
(S'\n__stdcall __fprintf_chk()\n'
p1906
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0061a368)();\u000a  return;\u000a}\u000a\u000a
p1907
S'JMP qword ptr [0x0061a368]\n'
p1908
S'ff 25 f2 78 21 00\n'
p1909
S'.plt:0000000000402a70\n'
p1910
tp1911
sS'get_charset_aliases'
p1912
(S'\n__stdcall get_charset_aliases()\n'
p1913
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_004112b4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_004112b4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_004112b4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_004112b4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_004112b4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_004112b4_caseD_9;\u000a      case -1:\u000a        goto switchD_004112b4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0041130d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00411313:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_004112b4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00411313;\u000a  }\u000a  goto LAB_0041130d;\u000a}\u000a\u000a
p1914
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0061acc8]\nTEST R15,R15\nJNZ 0x00411322\nMOV EDI,0x4157ac\nCALL 0x004023d0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004110d8\nCMP byte ptr [RBX],0x0\nJNZ 0x004110dd\nMOV EBX,0x4157bc\nMOV RDI,RBX\nCALL 0x004025d0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x004110f7\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x004110f9\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00402860\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0041114d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004027c0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00411158\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00411175\nMOV R15D,0x414bf9\nJMP 0x0041131b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00402980\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0041130d\nMOV ESI,0x413a7d\nMOV EDI,EBP\nCALL 0x00402900\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004112d4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x004112a0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00402470\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00402470\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x004112a0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00402890\nMOV ESI,0x4157cb\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x004026a0\nCMP EAX,0x2\nJL 0x004112f4\nMOV RDI,R12\nCALL 0x004025d0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004025d0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0041127d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x004028f0\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x004111c4\nJMP 0x004112dd\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00402860\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x004111c4\nJMP 0x004112dd\nMOV RDI,RBX\nCALL 0x004024b0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00411207\nJMP qword ptr [0x415670 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004024b0\nCMP EAX,-0x1\nJZ 0x004112f4\nCMP EAX,0xa\nJNZ 0x004112c0\nJMP 0x004112a0\nMOV EDI,EBP\nCALL 0x004026c0\nJMP 0x0041130d\nMOV RDI,R15\nCALL 0x00402400\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x004105f0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0041130d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00411313\nMOV R15D,0x414bf9\nMOV RDI,R13\nCALL 0x00402400\nMOV qword ptr [0x0061acc8],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1915
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 10 9c 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf ac 57 41 00\ne8 05 13 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb bc 57 41 00\n48 89 df\ne8 eb 14 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 59 17 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 a3 16 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf f9 4b 41 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 fc 17 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 7d 3a 41 00\n89 ef\ne8 66 17 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 8b 12 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 7b 12 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 7f 16 ff ff\nbe cb 57 41 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 7a 14 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 99 13 ff ff\n49 89 c4\n48 89 ef\ne8 8e 13 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 86 16 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 d5 15 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 08 12 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 70 56 41 00\n48 89 df\ne8 e8 11 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 e5 13 ff ff\neb 30\n4c 89 ff\ne8 1b 11 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 f4 f2 ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf f9 4b 41 00\n4c 89 ef\ne8 e5 10 ff ff\n4c 89 3d a6 99 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1916
S'.text:00000000004110a0\n.text:00000000004110a1\n.text:00000000004110a3\n.text:00000000004110a5\n.text:00000000004110a7\n.text:00000000004110a9\n.text:00000000004110aa\n.text:00000000004110b1\n.text:00000000004110b8\n.text:00000000004110bb\n.text:00000000004110c1\n.text:00000000004110c6\n.text:00000000004110cb\n.text:00000000004110ce\n.text:00000000004110d1\n.text:00000000004110d3\n.text:00000000004110d6\n.text:00000000004110d8\n.text:00000000004110dd\n.text:00000000004110e0\n.text:00000000004110e5\n.text:00000000004110e8\n.text:00000000004110eb\n.text:00000000004110ed\n.text:00000000004110f2\n.text:00000000004110f5\n.text:00000000004110f7\n.text:00000000004110f9\n.text:00000000004110fd\n.text:0000000000411102\n.text:0000000000411107\n.text:000000000041110a\n.text:000000000041110d\n.text:000000000041110f\n.text:0000000000411112\n.text:0000000000411115\n.text:0000000000411118\n.text:000000000041111d\n.text:0000000000411120\n.text:0000000000411123\n.text:0000000000411126\n.text:0000000000411128\n.text:000000000041112e\n.text:0000000000411138\n.text:000000000041113d\n.text:0000000000411147\n.text:000000000041114b\n.text:000000000041114d\n.text:0000000000411153\n.text:0000000000411158\n.text:0000000000411162\n.text:0000000000411167\n.text:0000000000411171\n.text:0000000000411175\n.text:000000000041117a\n.text:000000000041117c\n.text:000000000041117f\n.text:0000000000411184\n.text:0000000000411186\n.text:0000000000411188\n.text:000000000041118e\n.text:0000000000411193\n.text:0000000000411195\n.text:000000000041119a\n.text:000000000041119d\n.text:00000000004111a0\n.text:00000000004111a6\n.text:00000000004111ab\n.text:00000000004111b0\n.text:00000000004111b2\n.text:00000000004111b7\n.text:00000000004111ba\n.text:00000000004111bf\n.text:00000000004111c4\n.text:00000000004111c9\n.text:00000000004111cc\n.text:00000000004111cf\n.text:00000000004111d2\n.text:00000000004111d5\n.text:00000000004111d8\n.text:00000000004111dd\n.text:00000000004111e0\n.text:00000000004111e5\n.text:00000000004111e8\n.text:00000000004111ed\n.text:00000000004111f0\n.text:00000000004111f5\n.text:00000000004111fa\n.text:00000000004111fd\n.text:0000000000411202\n.text:0000000000411207\n.text:0000000000411209\n.text:000000000041120c\n.text:0000000000411211\n.text:0000000000411216\n.text:0000000000411218\n.text:000000000041121b\n.text:000000000041121e\n.text:0000000000411221\n.text:0000000000411226\n.text:0000000000411229\n.text:000000000041122f\n.text:0000000000411232\n.text:0000000000411237\n.text:000000000041123a\n.text:000000000041123d\n.text:0000000000411242\n.text:0000000000411245\n.text:000000000041124a\n.text:000000000041124f\n.text:0000000000411252\n.text:0000000000411254\n.text:0000000000411258\n.text:000000000041125d\n.text:0000000000411262\n.text:0000000000411265\n.text:000000000041126a\n.text:000000000041126d\n.text:0000000000411272\n.text:0000000000411275\n.text:000000000041127b\n.text:000000000041127d\n.text:0000000000411282\n.text:0000000000411286\n.text:000000000041128b\n.text:000000000041128e\n.text:0000000000411291\n.text:0000000000411297\n.text:00000000004112a0\n.text:00000000004112a3\n.text:00000000004112a8\n.text:00000000004112ab\n.text:00000000004112ae\n.text:00000000004112b4\n.text:00000000004112c0\n.text:00000000004112c3\n.text:00000000004112c8\n.text:00000000004112cb\n.text:00000000004112cd\n.text:00000000004112d0\n.text:00000000004112d2\n.text:00000000004112d4\n.text:00000000004112d6\n.text:00000000004112db\n.text:00000000004112dd\n.text:00000000004112e0\n.text:00000000004112e5\n.text:00000000004112e7\n.text:00000000004112ec\n.text:00000000004112ef\n.text:00000000004112f4\n.text:00000000004112f7\n.text:00000000004112fc\n.text:0000000000411301\n.text:0000000000411304\n.text:0000000000411306\n.text:000000000041130b\n.text:000000000041130d\n.text:0000000000411313\n.text:0000000000411316\n.text:000000000041131b\n.text:0000000000411322\n.text:0000000000411325\n.text:000000000041132c\n.text:000000000041132d\n.text:000000000041132f\n.text:0000000000411331\n.text:0000000000411333\n.text:0000000000411335\n.text:0000000000411336\n'
p1917
tp1918
sS'nl_langinfo'
p1919
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p1920
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0061a270)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1921
S'JMP qword ptr [0x0061a270]\n'
p1922
S'ff 25 ea 79 21 00\n'
p1923
S'.plt:0000000000402880\n'
p1924
tp1925
sS'x2realloc'
p1926
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p1927
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p1928
S'MOV EDX,0x1\nJMP 0x0040fbf0\n'
p1929
S'ba 01 00 00 00\neb 89\n'
p1930
S'.text:000000000040fc60\n.text:000000000040fc65\n'
p1931
tp1932
sS'_obstack_begin'
p1933
(S'\n__stdcall _obstack_begin(obstack * h, size_t size, size_t alignment, anon_subr_void_ptr_size_t * chunkfun, anon_subr_void_void_ptr * freefun)\n'
p1934
V\u000aint _obstack_begin(obstack *h,size_t size,size_t alignment,void *(*chunkfun)(size_t),\u000a                  void (*freefun)(void *))\u000a\u000a{\u000a  *(void *(**)(size_t))&h->chunkfun = chunkfun;\u000a  *(void (**)(void *))&h->freefun = freefun;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield & 0xfe;\u000a  _obstack_begin_worker();\u000a  return 1;\u000a}\u000a\u000a
p1935
S'PUSH RAX\nMOV qword ptr [RDI + 0x38],RCX\nMOV qword ptr [RDI + 0x40],R8\nAND byte ptr [RDI + 0x50],0xfe\nCALL 0x004109b0\nMOV EAX,0x1\nPOP RCX\nRET\n'
p1936
S'50\n48 89 4f 38\n4c 89 47 40\n80 67 50 fe\ne8 0e 00 00 00\nb8 01 00 00 00\n59\nc3\n'
p1937
S'.text:0000000000410990\n.text:0000000000410991\n.text:0000000000410995\n.text:0000000000410999\n.text:000000000041099d\n.text:00000000004109a2\n.text:00000000004109a7\n.text:00000000004109a8\n'
p1938
tp1939
sS'quotearg_n_style_mem'
p1940
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p1941
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p1942
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x0040dbf0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x0040d9c0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1943
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1944
S'.text:000000000040dc50\n.text:000000000040dc51\n.text:000000000040dc53\n.text:000000000040dc55\n.text:000000000040dc56\n.text:000000000040dc5a\n.text:000000000040dc5d\n.text:000000000040dc60\n.text:000000000040dc62\n.text:000000000040dc65\n.text:000000000040dc68\n.text:000000000040dc6d\n.text:000000000040dc6f\n.text:000000000040dc72\n.text:000000000040dc75\n.text:000000000040dc78\n.text:000000000040dc7d\n.text:000000000040dc81\n.text:000000000040dc82\n.text:000000000040dc84\n.text:000000000040dc86\n.text:000000000040dc87\n'
p1945
tp1946
sS'free_entry'
p1947
(S'\n__stdcall free_entry(Hash_table * table, hash_entry * entry)\n'
p1948
V\u000avoid free_entry(Hash_table *table,hash_entry *entry)\u000a\u000a{\u000a  entry->data = (void *)0x0;\u000a  entry->next = table->free_entry_list;\u000a  table->free_entry_list = entry;\u000a  return;\u000a}\u000a\u000a
p1949
S'MOV qword ptr [RSI],0x0\nMOV RAX,qword ptr [RDI + 0x48]\nMOV qword ptr [RSI + 0x8],RAX\nMOV qword ptr [RDI + 0x48],RSI\nRET\n'
p1950
S'48 c7 06 00 00 00 00\n48 8b 47 48\n48 89 46 08\n48 89 77 48\nc3\n'
p1951
S'.text:000000000040c0c0\n.text:000000000040c0c7\n.text:000000000040c0cb\n.text:000000000040c0cf\n.text:000000000040c0d3\n'
p1952
tp1953
sS'bkm_scale_by_power'
p1954
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p1955
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p1956
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00410591\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00410530\nOR EBP,EAX\nDEC EBX\nJNZ 0x00410580\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1957
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1958
S'.text:0000000000410560\n.text:0000000000410561\n.text:0000000000410563\n.text:0000000000410565\n.text:0000000000410566\n.text:0000000000410567\n.text:0000000000410569\n.text:000000000041056c\n.text:000000000041056f\n.text:0000000000410571\n.text:0000000000410573\n.text:0000000000410575\n.text:0000000000410580\n.text:0000000000410583\n.text:0000000000410586\n.text:000000000041058b\n.text:000000000041058d\n.text:000000000041058f\n.text:0000000000410591\n.text:0000000000410593\n.text:0000000000410597\n.text:0000000000410598\n.text:000000000041059a\n.text:000000000041059c\n.text:000000000041059d\n'
p1959
tp1960
sS'argmatch_valid'
p1961
(S'\n__stdcall argmatch_valid(char * * arglist, char * vallist, size_t valsize)\n'
p1962
V\u000avoid argmatch_valid(char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  char *__s1;\u000a  long lVar3;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments are:",5);\u000a  fputs_unlocked(__s,stderr);\u000a  __s = *arglist;\u000a  if (__s != (char *)0x0) {\u000a    __s1 = (char *)0x0;\u000a    lVar3 = 0;\u000a    do {\u000a      pFVar1 = stderr;\u000a      if (lVar3 == 0) {\u000aLAB_00409e77:\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,"\u005cn  - %s",__s);\u000a        __s1 = vallist;\u000a      }\u000a      else {\u000a        iVar2 = memcmp(__s1,vallist,valsize);\u000a        if (iVar2 != 0) goto LAB_00409e77;\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,&DAT_004140e9,__s);\u000a      }\u000a      __s = arglist[lVar3 + 1];\u000a      lVar3 = lVar3 + 1;\u000a      vallist = vallist + valsize;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  (*(code *)PTR_putc_unlocked_0061a250)(10,stderr);\u000a  return;\u000a}\u000a\u000a
p1963
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R13,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x4140cc\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a5a0]\nMOV RDI,RAX\nCALL 0x00402730\nMOV qword ptr [RSP],RBX\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nMOV R12,qword ptr [0x0061a5a0]\nJZ 0x00409eda\nXOR EBP,EBP\nXOR R15D,R15D\nTEST R15,R15\nJZ 0x00409e77\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,R14\nCALL 0x00402710\nTEST EAX,EAX\nJZ 0x00409ea0\nMOV RDI,RBX\nCALL 0x0040deb0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4140e1\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00402a70\nMOV RBP,R13\nJMP 0x00409ebf\nMOV RDI,RBX\nCALL 0x0040deb0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4140e9\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00402a70\nMOV RAX,qword ptr [RSP]\nMOV RBX,qword ptr [RAX + R15*0x8 + 0x8]\nINC R15\nMOV R12,qword ptr [0x0061a5a0]\nADD R13,R14\nTEST RBX,RBX\nJNZ 0x00409e60\nMOV EDI,0xa\nMOV RSI,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402840\n'
p1964
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f5\n48 89 fb\n31 ff\nbe cc 40 41 00\nba 05 00 00 00\ne8 7b 87 ff ff\n48 8b 35 64 07 21 00\n48 89 c7\ne8 ec 88 ff ff\n48 89 1c 24\n48 8b 1b\n48 85 db\n4c 8b 25 4b 07 21 00\n0f 84 7f 00 00 00\n31 ed\n45 31 ff\n4d 85 ff\n74 12\n48 89 ef\n4c 89 ee\n4c 89 f2\ne8 9d 88 ff ff\n85 c0\n74 29\n48 89 df\ne8 31 40 00 00\n48 89 c1\nbe 01 00 00 00\nba e1 40 41 00\n31 c0\n4c 89 e7\ne8 da 8b ff ff\n4c 89 ed\neb 24\n48 89 df\ne8 08 40 00 00\n48 89 c1\nbe 01 00 00 00\nba e9 40 41 00\n31 c0\n4c 89 e7\ne8 b1 8b ff ff\n48 8b 04 24\n4a 8b 5c f8 08\n49 ff c7\n4c 8b 25 ce 06 21 00\n4d 01 f5\n48 85 db\n75 86\nbf 0a 00 00 00\n4c 89 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 4b 89 ff ff\n'
p1965
S'.text:0000000000409e10\n.text:0000000000409e11\n.text:0000000000409e13\n.text:0000000000409e15\n.text:0000000000409e17\n.text:0000000000409e19\n.text:0000000000409e1a\n.text:0000000000409e1b\n.text:0000000000409e1e\n.text:0000000000409e21\n.text:0000000000409e24\n.text:0000000000409e26\n.text:0000000000409e2b\n.text:0000000000409e30\n.text:0000000000409e35\n.text:0000000000409e3c\n.text:0000000000409e3f\n.text:0000000000409e44\n.text:0000000000409e48\n.text:0000000000409e4b\n.text:0000000000409e4e\n.text:0000000000409e55\n.text:0000000000409e5b\n.text:0000000000409e5d\n.text:0000000000409e60\n.text:0000000000409e63\n.text:0000000000409e65\n.text:0000000000409e68\n.text:0000000000409e6b\n.text:0000000000409e6e\n.text:0000000000409e73\n.text:0000000000409e75\n.text:0000000000409e77\n.text:0000000000409e7a\n.text:0000000000409e7f\n.text:0000000000409e82\n.text:0000000000409e87\n.text:0000000000409e8c\n.text:0000000000409e8e\n.text:0000000000409e91\n.text:0000000000409e96\n.text:0000000000409e99\n.text:0000000000409ea0\n.text:0000000000409ea3\n.text:0000000000409ea8\n.text:0000000000409eab\n.text:0000000000409eb0\n.text:0000000000409eb5\n.text:0000000000409eb7\n.text:0000000000409eba\n.text:0000000000409ebf\n.text:0000000000409ec3\n.text:0000000000409ec8\n.text:0000000000409ecb\n.text:0000000000409ed2\n.text:0000000000409ed5\n.text:0000000000409ed8\n.text:0000000000409eda\n.text:0000000000409edf\n.text:0000000000409ee2\n.text:0000000000409ee6\n.text:0000000000409ee7\n.text:0000000000409ee9\n.text:0000000000409eeb\n.text:0000000000409eed\n.text:0000000000409eef\n.text:0000000000409ef0\n'
p1966
tp1967
sS'struct_month_cmp'
p1968
(S'\n__stdcall struct_month_cmp(void * m1, void * m2)\n'
p1969
V\u000aint struct_month_cmp(void *m1,void *m2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = strcmp(*(char **)m1,*(char **)m2);\u000a  return iVar1;\u000a}\u000a\u000a
p1970
S'MOV RDI,qword ptr [RDI]\nMOV RSI,qword ptr [RSI]\nJMP 0x00402770\n'
p1971
S'48 8b 3f\n48 8b 36\ne9 75 ca ff ff\n'
p1972
S'.text:0000000000405cf0\n.text:0000000000405cf3\n.text:0000000000405cf6\n'
p1973
tp1974
sS'heap_alloc'
p1975
(S'\n__stdcall heap_alloc(anon_subr_int_void_ptr_void_ptr * compare, size_t n_reserve)\n'
p1976
V\u000aheap * heap_alloc(int (*compare)(void *,void *),size_t n_reserve)\u000a\u000a{\u000a  heap *phVar1;\u000a  void **ppvVar2;\u000a  code *pcVar3;\u000a  size_t n;\u000a  \u000a  phVar1 = (heap *)xmalloc(0x20);\u000a  n = 1;\u000a  if (n_reserve != 0) {\u000a    n = n_reserve;\u000a  }\u000a  ppvVar2 = (void **)xnmalloc(n,8);\u000a  phVar1->array = ppvVar2;\u000a  *ppvVar2 = (void *)0x0;\u000a  phVar1->capacity = n;\u000a  phVar1->count = 0;\u000a  pcVar3 = heap_default_compare;\u000a  if (compare != (int (*)(void *,void *))0x0) {\u000a    pcVar3 = compare;\u000a  }\u000a  phVar1->compare = pcVar3;\u000a  return phVar1;\u000a}\u000a\u000a
p1977
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nMOV EDI,0x20\nCALL 0x0040fb80\nMOV R12,RAX\nTEST R15,R15\nMOV EBX,0x1\nCMOVNZ RBX,R15\nMOV ESI,0x8\nMOV RDI,RBX\nCALL 0x0040fb60\nMOV qword ptr [R12],RAX\nMOV qword ptr [RAX],0x0\nMOV qword ptr [R12 + 0x8],RBX\nMOV qword ptr [R12 + 0x10],0x0\nTEST R14,R14\nMOV EAX,0x40c150\nCMOVNZ RAX,R14\nMOV qword ptr [R12 + 0x18],RAX\nMOV RAX,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1978
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\nbf 20 00 00 00\ne8 88 3a 00 00\n49 89 c4\n4d 85 ff\nbb 01 00 00 00\n49 0f 45 df\nbe 08 00 00 00\n48 89 df\ne8 4c 3a 00 00\n49 89 04 24\n48 c7 00 00 00 00 00\n49 89 5c 24 08\n49 c7 44 24 10 00 00 00 00\n4d 85 f6\nb8 50 c1 40 00\n49 0f 45 c6\n49 89 44 24 18\n4c 89 e0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1979
S'.text:000000000040c0e0\n.text:000000000040c0e2\n.text:000000000040c0e4\n.text:000000000040c0e6\n.text:000000000040c0e7\n.text:000000000040c0e8\n.text:000000000040c0eb\n.text:000000000040c0ee\n.text:000000000040c0f3\n.text:000000000040c0f8\n.text:000000000040c0fb\n.text:000000000040c0fe\n.text:000000000040c103\n.text:000000000040c107\n.text:000000000040c10c\n.text:000000000040c10f\n.text:000000000040c114\n.text:000000000040c118\n.text:000000000040c11f\n.text:000000000040c124\n.text:000000000040c12d\n.text:000000000040c130\n.text:000000000040c135\n.text:000000000040c139\n.text:000000000040c13e\n.text:000000000040c141\n.text:000000000040c145\n.text:000000000040c146\n.text:000000000040c148\n.text:000000000040c14a\n.text:000000000040c14c\n'
p1980
tp1981
sS'close_stdout'
p1982
(S'\n__stdcall close_stdout()\n'
p1983
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_0040a027;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,&DAT_004140eb,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_0040a027:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p1984
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0061a568]\nCALL 0x00410ee0\nTEST EAX,EAX\nJZ 0x0040a027\nCMP byte ptr [0x0061ab70],0x0\nJZ 0x0040a03c\nCALL 0x00402430\nCMP dword ptr [RAX],0x20\nJNZ 0x0040a03c\nMOV RDI,qword ptr [0x0061a5a0]\nCALL 0x00410ee0\nTEST EAX,EAX\nJNZ 0x0040a081\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x4140ee\nMOV EDX,0x5\nCALL 0x004025b0\nMOV R14,RAX\nMOV RBX,qword ptr [0x0061ab68]\nCALL 0x00402430\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x0040a08c\nXOR EDI,EDI\nMOV EDX,0x4140eb\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00402960\nMOV EDI,dword ptr [0x0061a4e0]\nCALL 0x00402460\nMOV EDI,dword ptr [0x0061a4e0]\nCALL 0x00402460\nMOV RDI,RBX\nCALL 0x0040dd50\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x414078\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00402960\nMOV EDI,dword ptr [0x0061a4e0]\nCALL 0x00402460\n'
p1985
S'55\n41 56\n53\n48 8b 3d 5d 05 21 00\ne8 d0 6e 00 00\n85 c0\n74 13\n80 3d 55 0b 21 00 00\n74 1f\ne8 0e 84 ff ff\n83 38 20\n75 15\n48 8b 3d 72 05 21 00\ne8 ad 6e 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe ee 40 41 00\nba 05 00 00 00\ne8 63 85 ff ff\n49 89 c6\n48 8b 1d 11 0b 21 00\ne8 d4 83 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba eb 40 41 00\n31 c0\n89 ee\n4c 89 f1\ne8 ea 88 ff ff\n8b 3d 64 04 21 00\ne8 df 83 ff ff\n8b 3d 59 04 21 00\ne8 d4 83 ff ff\n48 89 df\ne8 bc 3c 00 00\n48 89 c1\n31 ff\nba 78 40 41 00\n31 c0\n89 ee\n4d 89 f0\ne8 b6 88 ff ff\n8b 3d 30 04 21 00\ne8 ab 83 ff ff\n'
p1986
S'.text:000000000040a000\n.text:000000000040a001\n.text:000000000040a003\n.text:000000000040a004\n.text:000000000040a00b\n.text:000000000040a010\n.text:000000000040a012\n.text:000000000040a014\n.text:000000000040a01b\n.text:000000000040a01d\n.text:000000000040a022\n.text:000000000040a025\n.text:000000000040a027\n.text:000000000040a02e\n.text:000000000040a033\n.text:000000000040a035\n.text:000000000040a037\n.text:000000000040a038\n.text:000000000040a03a\n.text:000000000040a03b\n.text:000000000040a03c\n.text:000000000040a03e\n.text:000000000040a043\n.text:000000000040a048\n.text:000000000040a04d\n.text:000000000040a050\n.text:000000000040a057\n.text:000000000040a05c\n.text:000000000040a05f\n.text:000000000040a061\n.text:000000000040a063\n.text:000000000040a065\n.text:000000000040a06a\n.text:000000000040a06c\n.text:000000000040a06e\n.text:000000000040a071\n.text:000000000040a076\n.text:000000000040a07c\n.text:000000000040a081\n.text:000000000040a087\n.text:000000000040a08c\n.text:000000000040a08f\n.text:000000000040a094\n.text:000000000040a097\n.text:000000000040a099\n.text:000000000040a09e\n.text:000000000040a0a0\n.text:000000000040a0a2\n.text:000000000040a0a5\n.text:000000000040a0aa\n.text:000000000040a0b0\n'
p1987
tp1988
sS'proctab_comparator'
p1989
(S'\n__stdcall proctab_comparator(void * e1, void * e2)\n'
p1990
V\u000a_Bool proctab_comparator(void *e1,void *e2)\u000a\u000a{\u000a  return (_Bool)(*(int *)((long)e1 + 8) == *(int *)((long)e2 + 8));\u000a}\u000a\u000a
p1991
S'MOV EAX,dword ptr [RDI + 0x8]\nCMP EAX,dword ptr [RSI + 0x8]\nSETZ AL\nRET\n'
p1992
S'8b 47 08\n3b 46 08\n0f 94 c0\nc3\n'
p1993
S'.text:0000000000408bf0\n.text:0000000000408bf3\n.text:0000000000408bf6\n.text:0000000000408bf9\n'
p1994
tp1995
sS'c_isxdigit'
p1996
(S'\n__stdcall c_isxdigit()\n'
p1997
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1998
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00410ebb\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1999
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p2000
S'.text:0000000000410ea0\n.text:0000000000410ea3\n.text:0000000000410ea6\n.text:0000000000410ea8\n.text:0000000000410eb2\n.text:0000000000410eb4\n.text:0000000000410eb7\n.text:0000000000410eba\n.text:0000000000410ebb\n.text:0000000000410ebd\n'
p2001
tp2002
sS'ferror'
p2003
(S'\n__stdcall ferror(FILE * __stream)\n'
p2004
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_0061a080)();\u000a  return iVar1;\u000a}\u000a\u000a
p2005
S'JMP qword ptr [0x0061a080]\n'
p2006
S'ff 25 da 7b 21 00\n'
p2007
S'.plt:00000000004024a0\n'
p2008
tp2009
sS'__libc_csu_fini'
p2010
(S'\n__stdcall __libc_csu_fini()\n'
p2011
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p2012
S'RET\n'
p2013
S'f3 c3\n'
p2014
S'.text:0000000000411580\n'
p2015
tp2016
sS'check_output'
p2017
(S'\n__stdcall check_output(char * outfile)\n'
p2018
V\u000avoid check_output(char *outfile)\u000a\u000a{\u000a  uint uVar1;\u000a  char *message;\u000a  \u000a  if (outfile == (char *)0x0) {\u000a    return;\u000a  }\u000a  uVar1 = open(outfile,0x41,0x1b6);\u000a  if (-1 < (int)uVar1) {\u000a    move_fd_or_die((ulong)uVar1,1);\u000a    return;\u000a  }\u000a  message = (char *)dcgettext(0,"open failed",5);\u000a                    /* WARNING: Subroutine does not return */\u000a  die(message,outfile);\u000a}\u000a\u000a
p2019
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040556e\nMOV ESI,0x41\nMOV EDX,0x1b6\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00402980\nTEST EAX,EAX\nJS 0x00405570\nMOV ESI,0x1\nMOV EDI,EAX\nPOP RBX\nJMP 0x00407b60\nPOP RBX\nRET\nXOR EDI,EDI\nMOV ESI,0x413e0b\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDI,RAX\nMOV RSI,RBX\nCALL 0x00405c70\n'
p2020
S'53\n48 89 fb\n48 85 db\n74 25\nbe 41 00 00 00\nba b6 01 00 00\n31 c0\n48 89 df\ne8 23 d4 ff ff\n85 c0\n78 0f\nbe 01 00 00 00\n89 c7\n5b\ne9 f2 25 00 00\n5b\nc3\n31 ff\nbe 0b 3e 41 00\nba 05 00 00 00\ne8 2f d0 ff ff\n48 89 c7\n48 89 de\ne8 e4 06 00 00\n'
p2021
S'.text:0000000000405540\n.text:0000000000405541\n.text:0000000000405544\n.text:0000000000405547\n.text:0000000000405549\n.text:000000000040554e\n.text:0000000000405553\n.text:0000000000405555\n.text:0000000000405558\n.text:000000000040555d\n.text:000000000040555f\n.text:0000000000405561\n.text:0000000000405566\n.text:0000000000405568\n.text:0000000000405569\n.text:000000000040556e\n.text:000000000040556f\n.text:0000000000405570\n.text:0000000000405572\n.text:0000000000405577\n.text:000000000040557c\n.text:0000000000405581\n.text:0000000000405584\n.text:0000000000405587\n'
p2022
tp2023
sS'abort'
p2024
(S'\n__stdcall abort()\n'
p2025
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0061a040)();\u000a  return;\u000a}\u000a\u000a
p2026
S'JMP qword ptr [0x0061a040]\n'
p2027
S'ff 25 1a 7c 21 00\n'
p2028
S'.plt:0000000000402420\n'
p2029
tp2030
sS'compute_bucket_size'
p2031
(S'\n__stdcall compute_bucket_size(size_t candidate, Hash_tuning * tuning)\n'
p2032
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000asize_t compute_bucket_size(size_t candidate,Hash_tuning *tuning)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  float fVar3;\u000a  \u000a  if (tuning->is_n_buckets == false) {\u000a    if ((long)candidate < 0) {\u000a      fVar3 = (float)((ulong)((uint)candidate & 1) | candidate >> 1);\u000a      fVar3 = fVar3 + fVar3;\u000a    }\u000a    else {\u000a      fVar3 = (float)candidate;\u000a    }\u000a    fVar3 = fVar3 / tuning->growth_threshold;\u000a    candidate = (long)fVar3;\u000a    if (DAT_0041415c <= fVar3) {\u000a      candidate = (long)(fVar3 - DAT_0041415c) ^ 0x8000000000000000;\u000a    }\u000a    if (_DAT_00414160 <= fVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  sVar1 = next_prime(candidate);\u000a  sVar2 = 0;\u000a  if (SUB168(ZEXT816(sVar1) * ZEXT816(8) >> 0x40,0) == 0) {\u000a    sVar2 = sVar1;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p2033
S'CMP byte ptr [RSI + 0x10],0x0\nJNZ 0x0040b752\nTEST RDI,RDI\nJS 0x0040b702\nCVTSI2SS XMM0,RDI\nJMP 0x0040b717\nMOV RAX,RDI\nSHR RAX,1\nAND EDI,0x1\nOR RDI,RAX\nCVTSI2SS XMM0,RDI\nADDSS XMM0,XMM0\nDIVSS XMM0,dword ptr [RSI + 0x8]\nMOVSS XMM1,dword ptr [0x0041415c]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RDI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RDI,RCX\nUCOMISS XMM0,dword ptr [0x00414160]\nJNC 0x0040b771\nPUSH RAX\nCALL 0x0040bff0\nMOV RSI,RAX\nMOV EDX,0x8\nXOR ECX,ECX\nMUL RDX\nCMOVNO RCX,RSI\nADD RSP,0x8\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\n'
p2034
S'80 7e 10 00\n75 5c\n48 85 ff\n78 07\nf3 48 0f 2a c7\neb 15\n48 89 f8\n48 d1 e8\n83 e7 01\n48 09 c7\nf3 48 0f 2a c7\nf3 0f 58 c0\nf3 0f 5e 46 08\nf3 0f 10 0d 38 8a 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f8\n0f 2e c1\n48 0f 43 f9\n0f 2e 05 10 8a 00 00\n73 1f\n50\ne8 98 08 00 00\n48 89 c6\nba 08 00 00 00\n31 c9\n48 f7 e2\n48 0f 41 ce\n48 83 c4 08\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n'
p2035
S'.text:000000000040b6f0\n.text:000000000040b6f4\n.text:000000000040b6f6\n.text:000000000040b6f9\n.text:000000000040b6fb\n.text:000000000040b700\n.text:000000000040b702\n.text:000000000040b705\n.text:000000000040b708\n.text:000000000040b70b\n.text:000000000040b70e\n.text:000000000040b713\n.text:000000000040b717\n.text:000000000040b71c\n.text:000000000040b724\n.text:000000000040b727\n.text:000000000040b72b\n.text:000000000040b730\n.text:000000000040b73a\n.text:000000000040b73d\n.text:000000000040b742\n.text:000000000040b745\n.text:000000000040b749\n.text:000000000040b750\n.text:000000000040b752\n.text:000000000040b753\n.text:000000000040b758\n.text:000000000040b75b\n.text:000000000040b760\n.text:000000000040b762\n.text:000000000040b765\n.text:000000000040b769\n.text:000000000040b76d\n.text:000000000040b770\n.text:000000000040b771\n.text:000000000040b773\n.text:000000000040b776\n'
p2036
tp2037
sS'select_plural'
p2038
(S'\n__stdcall select_plural(uintmax_t n)\n'
p2039
V\u000aulong select_plural(uintmax_t n)\u000a\u000a{\u000a  return n;\u000a}\u000a\u000a
p2040
S'MOV RAX,RDI\nRET\n'
p2041
S'48 89 f8\nc3\n'
p2042
S'.text:0000000000405e60\n.text:0000000000405e63\n'
p2043
tp2044
sS'unlock_node'
p2045
(S'\n__stdcall unlock_node(merge_node * node)\n'
p2046
V\u000avoid unlock_node(merge_node *node)\u000a\u000a{\u000a  pthread_mutex_unlock((pthread_mutex_t *)node->lock);\u000a  return;\u000a}\u000a\u000a
p2047
S'ADD RDI,0x58\nJMP 0x00402850\n'
p2048
S'48 83 c7 58\ne9 97 8f ff ff\n'
p2049
S'.text:00000000004098b0\n.text:00000000004098b4\n'
p2050
tp2051
sS'hash_rehash'
p2052
(S'\n__stdcall hash_rehash(Hash_table * table, size_t candidate)\n'
p2053
V\u000a_Bool hash_rehash(Hash_table *table,size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *local_68;\u000a  hash_entry *local_60;\u000a  size_t local_58;\u000a  undefined4 local_50;\u000a  undefined4 uStack76;\u000a  undefined4 uStack72;\u000a  undefined4 uStack68;\u000a  Hash_tuning *local_40;\u000a  size_t (*local_38)(void *,size_t);\u000a  _Bool (*local_30)(void *,void *);\u000a  void (*local_28)(void *);\u000a  hash_entry *local_20;\u000a  \u000a  local_58 = compute_bucket_size(candidate,table->tuning);\u000a  if (local_58 != 0) {\u000a    if (local_58 == table->n_buckets) {\u000a      return true;\u000a    }\u000a    local_68 = (hash_entry *)rpl_calloc(local_58,0x10);\u000a    if (local_68 != (hash_entry *)0x0) {\u000a      local_60 = local_68 + local_58;\u000a      local_50 = 0;\u000a      uStack76 = 0;\u000a      uStack72 = 0;\u000a      uStack68 = 0;\u000a      local_40 = table->tuning;\u000a      local_38 = table->hasher;\u000a      local_30 = table->comparator;\u000a      local_28 = table->data_freer;\u000a      local_20 = table->free_entry_list;\u000a      _Var1 = transfer_entries((Hash_table *)&local_68,table);\u000a      if (_Var1 != false) {\u000a        free(table->bucket);\u000a        table->bucket = local_68;\u000a        table->bucket_limit = local_60;\u000a        table->n_buckets = local_58;\u000a        table->n_buckets_used = CONCAT44(uStack76,local_50);\u000a        table->free_entry_list = local_20;\u000a        return true;\u000a      }\u000a      table->free_entry_list = local_20;\u000a      _Var1 = transfer_entries(table,(Hash_table *)&local_68);\u000a      if ((_Var1 == false) ||\u000a         (_Var1 = transfer_entries(table,(Hash_table *)&local_68), _Var1 == false)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      free(local_68);\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2054
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x50\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x28]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL 0x0040b6f0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x0040ba21\nMOV R14B,0x1\nCMP RBP,qword ptr [RBX + 0x10]\nJZ 0x0040ba24\nMOV ESI,0x10\nMOV RDI,RBP\nCALL 0x004105a0\nMOV qword ptr [RSP],RAX\nTEST RAX,RAX\nJZ 0x0040ba21\nMOV qword ptr [RSP + 0x10],RBP\nSHL RBP,0x4\nADD RBP,qword ptr [RSP]\nMOV qword ptr [RSP + 0x8],RBP\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RSP + 0x18],XMM0\nMOV RAX,qword ptr [RBX + 0x28]\nMOV qword ptr [RSP + 0x28],RAX\nMOV RAX,qword ptr [RBX + 0x30]\nMOV qword ptr [RSP + 0x30],RAX\nMOV RAX,qword ptr [RBX + 0x38]\nMOV qword ptr [RSP + 0x38],RAX\nMOV RAX,qword ptr [RBX + 0x40]\nMOV qword ptr [RSP + 0x40],RAX\nMOV RAX,qword ptr [RBX + 0x48]\nMOV qword ptr [RSP + 0x48],RAX\nMOV RDI,RSP\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x0040ba40\nTEST AL,AL\nJZ 0x0040b9ea\nMOV RDI,qword ptr [RBX]\nCALL 0x00402400\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RBX + 0x10],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX + 0x18],RAX\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nJMP 0x0040ba24\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nMOV RSI,RSP\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x0040ba40\nTEST AL,AL\nJZ 0x0040ba30\nMOV RSI,RSP\nXOR EDX,EDX\nMOV RDI,RBX\nCALL 0x0040ba40\nTEST AL,AL\nJZ 0x0040ba30\nMOV RDI,qword ptr [RSP]\nCALL 0x00402400\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x50\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x00402420\n'
p2055
S'55\n41 56\n53\n48 83 ec 50\n48 89 fb\n48 8b 43 28\n48 89 f7\n48 89 c6\ne8 c6 fd ff ff\n48 89 c5\n48 85 ed\n0f 84 eb 00 00 00\n41 b6 01\n48 3b 6b 10\n0f 84 e1 00 00 00\nbe 10 00 00 00\n48 89 ef\ne8 50 4c 00 00\n48 89 04 24\n48 85 c0\n0f 84 c4 00 00 00\n48 89 6c 24 10\n48 c1 e5 04\n48 03 2c 24\n48 89 6c 24 08\n0f 57 c0\n0f 11 44 24 18\n48 8b 43 28\n48 89 44 24 28\n48 8b 43 30\n48 89 44 24 30\n48 8b 43 38\n48 89 44 24 38\n48 8b 43 40\n48 89 44 24 40\n48 8b 43 48\n48 89 44 24 48\n48 89 e7\n31 d2\n48 89 de\ne8 8f 00 00 00\n84 c0\n74 35\n48 8b 3b\ne8 43 6a ff ff\n48 8b 04 24\n48 89 03\n48 8b 44 24 08\n48 89 43 08\n48 8b 44 24 10\n48 89 43 10\n48 8b 44 24 18\n48 89 43 18\n48 8b 44 24 48\n48 89 43 48\neb 3a\n48 8b 44 24 48\n48 89 43 48\n48 89 e6\nba 01 00 00 00\n48 89 df\ne8 3d 00 00 00\n84 c0\n74 29\n48 89 e6\n31 d2\n48 89 df\ne8 2c 00 00 00\n84 c0\n74 18\n48 8b 3c 24\ne8 df 69 ff ff\n45 31 f6\n44 89 f0\n48 83 c4 50\n5b\n41 5e\n5d\nc3\ne8 eb 69 ff ff\n'
p2056
S'.text:000000000040b910\n.text:000000000040b911\n.text:000000000040b913\n.text:000000000040b914\n.text:000000000040b918\n.text:000000000040b91b\n.text:000000000040b91f\n.text:000000000040b922\n.text:000000000040b925\n.text:000000000040b92a\n.text:000000000040b92d\n.text:000000000040b930\n.text:000000000040b936\n.text:000000000040b939\n.text:000000000040b93d\n.text:000000000040b943\n.text:000000000040b948\n.text:000000000040b94b\n.text:000000000040b950\n.text:000000000040b954\n.text:000000000040b957\n.text:000000000040b95d\n.text:000000000040b962\n.text:000000000040b966\n.text:000000000040b96a\n.text:000000000040b96f\n.text:000000000040b972\n.text:000000000040b977\n.text:000000000040b97b\n.text:000000000040b980\n.text:000000000040b984\n.text:000000000040b989\n.text:000000000040b98d\n.text:000000000040b992\n.text:000000000040b996\n.text:000000000040b99b\n.text:000000000040b99f\n.text:000000000040b9a4\n.text:000000000040b9a7\n.text:000000000040b9a9\n.text:000000000040b9ac\n.text:000000000040b9b1\n.text:000000000040b9b3\n.text:000000000040b9b5\n.text:000000000040b9b8\n.text:000000000040b9bd\n.text:000000000040b9c1\n.text:000000000040b9c4\n.text:000000000040b9c9\n.text:000000000040b9cd\n.text:000000000040b9d2\n.text:000000000040b9d6\n.text:000000000040b9db\n.text:000000000040b9df\n.text:000000000040b9e4\n.text:000000000040b9e8\n.text:000000000040b9ea\n.text:000000000040b9ef\n.text:000000000040b9f3\n.text:000000000040b9f6\n.text:000000000040b9fb\n.text:000000000040b9fe\n.text:000000000040ba03\n.text:000000000040ba05\n.text:000000000040ba07\n.text:000000000040ba0a\n.text:000000000040ba0c\n.text:000000000040ba0f\n.text:000000000040ba14\n.text:000000000040ba16\n.text:000000000040ba18\n.text:000000000040ba1c\n.text:000000000040ba21\n.text:000000000040ba24\n.text:000000000040ba27\n.text:000000000040ba2b\n.text:000000000040ba2c\n.text:000000000040ba2e\n.text:000000000040ba2f\n.text:000000000040ba30\n'
p2057
tp2058
sS'posix_fadvise'
p2059
(S'\n__stdcall posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p2060
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_0061a1a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2061
S'JMP qword ptr [0x0061a1a0]\n'
p2062
S'ff 25 ba 7a 21 00\n'
p2063
S'.plt:00000000004026e0\n'
p2064
tp2065
sS'lseek'
p2066
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p2067
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0061a160)();\u000a  return _Var1;\u000a}\u000a\u000a
p2068
S'JMP qword ptr [0x0061a160]\n'
p2069
S'ff 25 fa 7a 21 00\n'
p2070
S'.plt:0000000000402660\n'
p2071
tp2072
sS'hash_get_n_entries'
p2073
(S'\n__stdcall hash_get_n_entries(Hash_table * table)\n'
p2074
V\u000asize_t hash_get_n_entries(Hash_table *table)\u000a\u000a{\u000a  return table->n_entries;\u000a}\u000a\u000a
p2075
S'MOV RAX,qword ptr [RDI + 0x20]\nRET\n'
p2076
S'48 8b 47 20\nc3\n'
p2077
S'.text:000000000040b150\n.text:000000000040b154\n'
p2078
tp2079
sS'__printf_chk'
p2080
(S'\n__stdcall __printf_chk()\n'
p2081
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0061a2c0)();\u000a  return;\u000a}\u000a\u000a
p2082
S'JMP qword ptr [0x0061a2c0]\n'
p2083
S'ff 25 9a 79 21 00\n'
p2084
S'.plt:0000000000402920\n'
p2085
tp2086
sS'hash_lookup'
p2087
(S'\n__stdcall hash_lookup(Hash_table * table, void * entry)\n'
p2088
V\u000avoid * hash_lookup(Hash_table *table,void *entry)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *phVar2;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  if (phVar2->data != (void *)0x0) {\u000a    while (phVar2 != (hash_entry *)0x0) {\u000a      if ((phVar2->data == entry) ||\u000a         (_Var1 = (*table->comparator)(entry,phVar2->data), _Var1 != false)) {\u000a        return phVar2->data;\u000a      }\u000a      phVar2 = phVar2->next;\u000a    }\u000a  }\u000a  return (void *)0x0;\u000a}\u000a\u000a
p2089
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R15,RDI\nCALL 0x0040b350\nMOV RBX,RAX\nXOR R14D,R14D\nCMP qword ptr [RBX],0x0\nJZ 0x0040b341\nTEST RBX,RBX\nJZ 0x0040b341\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nMOV RSI,qword ptr [RBX]\nCMP RSI,R12\nJZ 0x0040b33e\nMOV RDI,R12\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x0040b33e\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x0040b320\nJMP 0x0040b341\nMOV R14,qword ptr [RBX]\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p2090
S'41 57\n41 56\n41 54\n53\n50\n49 89 f4\n49 89 ff\ne8 4d 00 00 00\n48 89 c3\n45 31 f6\n48 83 3b 00\n74 32\n48 85 db\n74 2d\n45 31 f6\n66 0f 1f 84 00 00 00 00 00\n48 8b 33\n4c 39 e6\n74 16\n4c 89 e7\n41 ff 57 38\n84 c0\n75 0b\n48 8b 5b 08\n48 85 db\n75 e4\neb 03\n4c 8b 33\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p2091
S'.text:000000000040b2f0\n.text:000000000040b2f2\n.text:000000000040b2f4\n.text:000000000040b2f6\n.text:000000000040b2f7\n.text:000000000040b2f8\n.text:000000000040b2fb\n.text:000000000040b2fe\n.text:000000000040b303\n.text:000000000040b306\n.text:000000000040b309\n.text:000000000040b30d\n.text:000000000040b30f\n.text:000000000040b312\n.text:000000000040b314\n.text:000000000040b317\n.text:000000000040b320\n.text:000000000040b323\n.text:000000000040b326\n.text:000000000040b328\n.text:000000000040b32b\n.text:000000000040b32f\n.text:000000000040b331\n.text:000000000040b333\n.text:000000000040b337\n.text:000000000040b33a\n.text:000000000040b33c\n.text:000000000040b33e\n.text:000000000040b341\n.text:000000000040b344\n.text:000000000040b348\n.text:000000000040b349\n.text:000000000040b34b\n.text:000000000040b34d\n.text:000000000040b34f\n'
p2092
tp2093
sS'memcoll'
p2094
(S'\n__stdcall memcoll(char * s1, size_t s1len, char * s2, size_t s2len)\n'
p2095
V\u000aint memcoll(char *s1,size_t s1len,char *s2,size_t s2len)\u000a\u000a{\u000a  char cVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  int *piVar4;\u000a  \u000a  if ((s1len == s2len) && (iVar3 = memcmp(s1,s2,s1len), iVar3 == 0)) {\u000a    piVar4 = __errno_location();\u000a    *piVar4 = 0;\u000a    return 0;\u000a  }\u000a  cVar1 = s1[s1len];\u000a  cVar2 = s2[s2len];\u000a  s1[s1len] = 0;\u000a  s2[s2len] = 0;\u000a  iVar3 = strcoll_loop(s1,s1len + 1,s2,s2len + 1);\u000a  s1[s1len] = cVar1;\u000a  s2[s2len] = cVar2;\u000a  return iVar3;\u000a}\u000a\u000a
p2096
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RCX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R12,RDI\nCMP RBX,R15\nJNZ 0x0041136e\nMOV RDI,R12\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x00402710\nTEST EAX,EAX\nJZ 0x0041139d\nMOV BPL,byte ptr [R12 + RBX*0x1]\nMOV R13B,byte ptr [R14 + R15*0x1]\nMOV byte ptr [R12 + RBX*0x1],0x0\nMOV byte ptr [R14 + R15*0x1],0x0\nLEA RSI,[RBX + 0x1]\nLEA RCX,[R15 + 0x1]\nMOV RDI,R12\nMOV RDX,R14\nCALL 0x004113c0\nMOV byte ptr [R12 + RBX*0x1],BPL\nMOV byte ptr [R14 + R15*0x1],R13B\nJMP 0x004113aa\nCALL 0x00402430\nMOV dword ptr [RAX],0x0\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2097
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 cf\n49 89 d6\n48 89 f3\n49 89 fc\n4c 39 fb\n75 12\n4c 89 e7\n4c 89 f6\n48 89 da\ne8 a6 13 ff ff\n85 c0\n74 2f\n41 8a 2c 1c\n47 8a 2c 3e\n41 c6 04 1c 00\n43 c6 04 3e 00\n48 8d 73 01\n49 8d 4f 01\n4c 89 e7\n4c 89 f2\ne8 2d 00 00 00\n41 88 2c 1c\n47 88 2c 3e\neb 0d\ne8 8e 10 ff ff\nc7 00 00 00 00 00\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2098
S'.text:0000000000411340\n.text:0000000000411341\n.text:0000000000411343\n.text:0000000000411345\n.text:0000000000411347\n.text:0000000000411349\n.text:000000000041134a\n.text:000000000041134b\n.text:000000000041134e\n.text:0000000000411351\n.text:0000000000411354\n.text:0000000000411357\n.text:000000000041135a\n.text:000000000041135c\n.text:000000000041135f\n.text:0000000000411362\n.text:0000000000411365\n.text:000000000041136a\n.text:000000000041136c\n.text:000000000041136e\n.text:0000000000411372\n.text:0000000000411376\n.text:000000000041137b\n.text:0000000000411380\n.text:0000000000411384\n.text:0000000000411388\n.text:000000000041138b\n.text:000000000041138e\n.text:0000000000411393\n.text:0000000000411397\n.text:000000000041139b\n.text:000000000041139d\n.text:00000000004113a2\n.text:00000000004113a8\n.text:00000000004113aa\n.text:00000000004113ae\n.text:00000000004113af\n.text:00000000004113b1\n.text:00000000004113b3\n.text:00000000004113b5\n.text:00000000004113b7\n.text:00000000004113b8\n'
p2099
tp2100
sS'md5_process_bytes'
p2101
(S'\n__stdcall md5_process_bytes(void * buffer, size_t len, md5_ctx * ctx)\n'
p2102
V\u000avoid md5_process_bytes(void *buffer,size_t len,md5_ctx *ctx)\u000a\u000a{\u000a  long lVar1;\u000a  uint32_t uVar2;\u000a  uint32_t uVar3;\u000a  uint32_t uVar4;\u000a  uint32_t uVar5;\u000a  uint32_t uVar6;\u000a  uint32_t uVar7;\u000a  uint32_t uVar8;\u000a  uint32_t uVar9;\u000a  uint32_t uVar10;\u000a  uint32_t uVar11;\u000a  uint32_t uVar12;\u000a  uint32_t uVar13;\u000a  uint32_t uVar14;\u000a  uint32_t uVar15;\u000a  uint uVar16;\u000a  uint32_t uVar17;\u000a  ulong __n;\u000a  ulong uVar18;\u000a  uint32_t *buffer_00;\u000a  \u000a  uVar18 = (ulong)ctx->buflen;\u000a  if (ctx->buflen != 0) {\u000a    __n = 0x80 - uVar18;\u000a    if (len < 0x80 - uVar18) {\u000a      __n = len;\u000a    }\u000a    memcpy((void *)((long)ctx->buffer + uVar18),buffer,__n);\u000a    uVar16 = ctx->buflen + (int)__n;\u000a    ctx->buflen = uVar16;\u000a    if (0x40 < uVar16) {\u000a      buffer_00 = ctx->buffer;\u000a      md5_process_block(buffer_00,(ulong)(uVar16 & 0xffffffc0),ctx);\u000a      uVar16 = ctx->buflen & 0x3f;\u000a      ctx->buflen = uVar16;\u000a      memcpy(buffer_00,(void *)((uVar18 + __n & 0xffffffffffffffc0) + (long)buffer_00),(ulong)uVar16\u000a            );\u000a    }\u000a    buffer = (void *)((long)buffer + __n);\u000a    len = len - __n;\u000a  }\u000a  if (0x3f < len) {\u000a    if (((ulong)buffer & 3) != 0) {\u000a      if (len < 0x41) {\u000a        len = 0x40;\u000a      }\u000a      else {\u000a        uVar18 = len - 0x41 & 0xffffffffffffffc0;\u000a        lVar1 = len - 0x40;\u000a        buffer_00 = (uint32_t *)buffer;\u000a        do {\u000a          uVar17 = *buffer_00;\u000a          uVar4 = buffer_00[1];\u000a          uVar8 = buffer_00[2];\u000a          uVar12 = buffer_00[3];\u000a          uVar2 = buffer_00[4];\u000a          uVar5 = buffer_00[5];\u000a          uVar9 = buffer_00[6];\u000a          uVar13 = buffer_00[7];\u000a          uVar3 = buffer_00[8];\u000a          uVar6 = buffer_00[9];\u000a          uVar10 = buffer_00[10];\u000a          uVar14 = buffer_00[0xb];\u000a          uVar7 = buffer_00[0xd];\u000a          uVar11 = buffer_00[0xe];\u000a          uVar15 = buffer_00[0xf];\u000a          ctx->buffer[0xc] = buffer_00[0xc];\u000a          ctx->buffer[0xd] = uVar7;\u000a          ctx->buffer[0xe] = uVar11;\u000a          ctx->buffer[0xf] = uVar15;\u000a          ctx->buffer[8] = uVar3;\u000a          ctx->buffer[9] = uVar6;\u000a          ctx->buffer[10] = uVar10;\u000a          ctx->buffer[0xb] = uVar14;\u000a          ctx->buffer[4] = uVar2;\u000a          ctx->buffer[5] = uVar5;\u000a          ctx->buffer[6] = uVar9;\u000a          ctx->buffer[7] = uVar13;\u000a          ctx->buffer[0] = uVar17;\u000a          ctx->buffer[1] = uVar4;\u000a          ctx->buffer[2] = uVar8;\u000a          ctx->buffer[3] = uVar12;\u000a          md5_process_block(ctx->buffer,0x40,ctx);\u000a          buffer_00 = buffer_00 + 0x10;\u000a          len = len - 0x40;\u000a        } while (0x40 < len);\u000a        buffer = (void *)((long)buffer + uVar18 + 0x40);\u000a        len = lVar1 - uVar18;\u000a      }\u000a      goto LAB_0040ab69;\u000a    }\u000a    md5_process_block(buffer,len & 0xffffffffffffffc0,ctx);\u000a    buffer = (void *)((long)buffer + (len & 0xffffffffffffffc0));\u000a    len = (size_t)((uint)len & 0x3f);\u000a  }\u000a  if (len == 0) {\u000a    return;\u000a  }\u000aLAB_0040ab69:\u000a  uVar16 = ctx->buflen;\u000a  memcpy((void *)((long)ctx->buffer + (ulong)uVar16),buffer,len);\u000a  uVar18 = (ulong)uVar16 + len;\u000a  uVar17 = (uint32_t)uVar18;\u000a  if (0x3f < uVar18) {\u000a    md5_process_block(ctx->buffer,0x40,ctx);\u000a    uVar17 = (uint32_t)(uVar18 - 0x40);\u000a    memcpy(ctx->buffer,ctx->buffer + 0x10,uVar18 - 0x40);\u000a  }\u000a  ctx->buflen = uVar17;\u000a  return;\u000a}\u000a\u000a
p2103
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RDX\nMOV RBP,RSI\nMOV R14,RDI\nMOV R13D,dword ptr [R15 + 0x18]\nTEST R13,R13\nJZ 0x0040aaa8\nMOV R12D,0x80\nSUB R12,R13\nCMP R12,RBP\nCMOVA R12,RBP\nLEA RDI,[R15 + R13*0x1 + 0x1c]\nMOV RSI,R14\nMOV RDX,R12\nCALL 0x004027c0\nMOV ESI,dword ptr [R15 + 0x18]\nADD RSI,R12\nMOV dword ptr [R15 + 0x18],ESI\nCMP ESI,0x41\nJC 0x0040aaa2\nLEA RBX,[R15 + 0x1c]\nAND ESI,0xffffffc0\nMOV RDI,RBX\nMOV RDX,R15\nCALL 0x0040a1f0\nMOV EDX,dword ptr [R15 + 0x18]\nAND EDX,0x3f\nMOV dword ptr [R15 + 0x18],EDX\nADD R13,R12\nAND R13,-0x40\nADD R13,RBX\nMOV RDI,RBX\nMOV RSI,R13\nCALL 0x004027c0\nADD R14,R12\nSUB RBP,R12\nCMP RBP,0x40\nJC 0x0040ab5d\nTEST R14B,0x3\nJZ 0x0040ab42\nCMP RBP,0x41\nJC 0x0040ab64\nLEA RBX,[R15 + 0x1c]\nLEA R12,[RBP + -0x41]\nAND R12,-0x40\nLEA RAX,[R12 + 0x40]\nMOV qword ptr [RSP + 0x8],RAX\nLEA R13,[RBP + -0x40]\nMOV qword ptr [RSP + 0x10],R14\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVUPS XMM0,xmmword ptr [R14]\nMOVUPS XMM1,xmmword ptr [R14 + 0x10]\nMOVUPS XMM2,xmmword ptr [R14 + 0x20]\nMOVUPS XMM3,xmmword ptr [R14 + 0x30]\nMOVUPS xmmword ptr [RBX + 0x30],XMM3\nMOVUPS xmmword ptr [RBX + 0x20],XMM2\nMOVUPS xmmword ptr [RBX + 0x10],XMM1\nMOVUPS xmmword ptr [RBX],XMM0\nMOV ESI,0x40\nMOV RDI,RBX\nMOV RDX,R15\nCALL 0x0040a1f0\nADD R14,0x40\nADD RBP,-0x40\nCMP RBP,0x40\nJA 0x0040aaf0\nMOV R14,qword ptr [RSP + 0x10]\nADD R14,qword ptr [RSP + 0x8]\nSUB R13,R12\nMOV RBP,R13\nJMP 0x0040ab69\nMOV RBX,RBP\nAND RBX,-0x40\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,R15\nCALL 0x0040a1f0\nADD R14,RBX\nAND EBP,0x3f\nTEST RBP,RBP\nJNZ 0x0040ab69\nJMP 0x0040abb1\nMOV EBP,0x40\nMOV R12D,dword ptr [R15 + 0x18]\nLEA RDI,[R15 + R12*0x1 + 0x1c]\nMOV RSI,R14\nMOV RDX,RBP\nCALL 0x004027c0\nADD R12,RBP\nCMP R12,0x40\nJC 0x0040abad\nLEA RBX,[R15 + 0x1c]\nMOV ESI,0x40\nMOV RDI,RBX\nMOV RDX,R15\nCALL 0x0040a1f0\nADD R12,-0x40\nLEA RSI,[R15 + 0x5c]\nMOV RDI,RBX\nMOV RDX,R12\nCALL 0x004027c0\nMOV dword ptr [R15 + 0x18],R12D\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2104
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 d7\n48 89 f5\n49 89 fe\n45 8b 6f 18\n4d 85 ed\n74 68\n41 bc 80 00 00 00\n4d 29 ec\n49 39 ec\n4c 0f 47 e5\n4b 8d 7c 2f 1c\n4c 89 f6\n4c 89 e2\ne8 60 7d ff ff\n41 8b 77 18\n4c 01 e6\n41 89 77 18\n83 fe 41\n72 32\n49 8d 5f 1c\n83 e6 c0\n48 89 df\n4c 89 fa\ne8 6e f7 ff ff\n41 8b 57 18\n83 e2 3f\n41 89 57 18\n4d 01 e5\n49 83 e5 c0\n49 01 dd\n48 89 df\n4c 89 ee\ne8 1e 7d ff ff\n4d 01 e6\n4c 29 e5\n48 83 fd 40\n0f 82 ab 00 00 00\n41 f6 c6 03\n0f 84 86 00 00 00\n48 83 fd 41\n0f 82 9e 00 00 00\n49 8d 5f 1c\n4c 8d 65 bf\n49 83 e4 c0\n49 8d 44 24 40\n48 89 44 24 08\n4c 8d 6d c0\n4c 89 74 24 10\n66 66 2e 0f 1f 84 00 00 00 00 00\n41 0f 10 06\n41 0f 10 4e 10\n41 0f 10 56 20\n41 0f 10 5e 30\n0f 11 5b 30\n0f 11 53 20\n0f 11 4b 10\n0f 11 03\nbe 40 00 00 00\n48 89 df\n4c 89 fa\ne8 ce f6 ff ff\n49 83 c6 40\n48 83 c5 c0\n48 83 fd 40\n77 c0\n4c 8b 74 24 10\n4c 03 74 24 08\n4d 29 e5\n4c 89 ed\neb 27\n48 89 eb\n48 83 e3 c0\n4c 89 f7\n48 89 de\n4c 89 fa\ne8 99 f6 ff ff\n49 01 de\n83 e5 3f\n48 85 ed\n75 07\neb 4d\nbd 40 00 00 00\n45 8b 67 18\n4b 8d 7c 27 1c\n4c 89 f6\n48 89 ea\ne8 43 7c ff ff\n49 01 ec\n49 83 fc 40\n72 27\n49 8d 5f 1c\nbe 40 00 00 00\n48 89 df\n4c 89 fa\ne8 56 f6 ff ff\n49 83 c4 c0\n49 8d 77 5c\n48 89 df\n4c 89 e2\ne8 13 7c ff ff\n45 89 67 18\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2105
S'.text:000000000040aa20\n.text:000000000040aa21\n.text:000000000040aa23\n.text:000000000040aa25\n.text:000000000040aa27\n.text:000000000040aa29\n.text:000000000040aa2a\n.text:000000000040aa2e\n.text:000000000040aa31\n.text:000000000040aa34\n.text:000000000040aa37\n.text:000000000040aa3b\n.text:000000000040aa3e\n.text:000000000040aa40\n.text:000000000040aa46\n.text:000000000040aa49\n.text:000000000040aa4c\n.text:000000000040aa50\n.text:000000000040aa55\n.text:000000000040aa58\n.text:000000000040aa5b\n.text:000000000040aa60\n.text:000000000040aa64\n.text:000000000040aa67\n.text:000000000040aa6b\n.text:000000000040aa6e\n.text:000000000040aa70\n.text:000000000040aa74\n.text:000000000040aa77\n.text:000000000040aa7a\n.text:000000000040aa7d\n.text:000000000040aa82\n.text:000000000040aa86\n.text:000000000040aa89\n.text:000000000040aa8d\n.text:000000000040aa90\n.text:000000000040aa94\n.text:000000000040aa97\n.text:000000000040aa9a\n.text:000000000040aa9d\n.text:000000000040aaa2\n.text:000000000040aaa5\n.text:000000000040aaa8\n.text:000000000040aaac\n.text:000000000040aab2\n.text:000000000040aab6\n.text:000000000040aabc\n.text:000000000040aac0\n.text:000000000040aac6\n.text:000000000040aaca\n.text:000000000040aace\n.text:000000000040aad2\n.text:000000000040aad7\n.text:000000000040aadc\n.text:000000000040aae0\n.text:000000000040aae5\n.text:000000000040aaf0\n.text:000000000040aaf4\n.text:000000000040aaf9\n.text:000000000040aafe\n.text:000000000040ab03\n.text:000000000040ab07\n.text:000000000040ab0b\n.text:000000000040ab0f\n.text:000000000040ab12\n.text:000000000040ab17\n.text:000000000040ab1a\n.text:000000000040ab1d\n.text:000000000040ab22\n.text:000000000040ab26\n.text:000000000040ab2a\n.text:000000000040ab2e\n.text:000000000040ab30\n.text:000000000040ab35\n.text:000000000040ab3a\n.text:000000000040ab3d\n.text:000000000040ab40\n.text:000000000040ab42\n.text:000000000040ab45\n.text:000000000040ab49\n.text:000000000040ab4c\n.text:000000000040ab4f\n.text:000000000040ab52\n.text:000000000040ab57\n.text:000000000040ab5a\n.text:000000000040ab5d\n.text:000000000040ab60\n.text:000000000040ab62\n.text:000000000040ab64\n.text:000000000040ab69\n.text:000000000040ab6d\n.text:000000000040ab72\n.text:000000000040ab75\n.text:000000000040ab78\n.text:000000000040ab7d\n.text:000000000040ab80\n.text:000000000040ab84\n.text:000000000040ab86\n.text:000000000040ab8a\n.text:000000000040ab8f\n.text:000000000040ab92\n.text:000000000040ab95\n.text:000000000040ab9a\n.text:000000000040ab9e\n.text:000000000040aba2\n.text:000000000040aba5\n.text:000000000040aba8\n.text:000000000040abad\n.text:000000000040abb1\n.text:000000000040abb5\n.text:000000000040abb6\n.text:000000000040abb8\n.text:000000000040abba\n.text:000000000040abbc\n.text:000000000040abbe\n.text:000000000040abbf\n'
p2106
tp2107
sS'heapify_down'
p2108
(S'\n__stdcall heapify_down()\n'
p2109
V\u000asize_t heapify_down(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  int iVar2;\u000a  ulong uVar3;\u000a  size_t sVar4;\u000a  code *in_RDX;\u000a  ulong uVar5;\u000a  ulong uVar6;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  uVar1 = *(undefined8 *)(in_RDI + 8);\u000a  uVar3 = in_RSI >> 1;\u000a  if (uVar3 == 0) {\u000a    sVar4 = uVar3;\u000a    uVar6 = 1;\u000a  }\u000a  else {\u000a    uVar6 = 1;\u000a    do {\u000a      uVar5 = uVar6 * 2;\u000a      if (uVar5 < in_RSI) {\u000a        iVar2 = (*in_RDX)(*(undefined8 *)(in_RDI + uVar6 * 0x10),\u000a                          *(undefined8 *)(in_RDI + (uVar5 | 1) * 8));\u000a        if (iVar2 < 0) {\u000a          uVar5 = uVar5 | 1;\u000a        }\u000a      }\u000a      sVar4 = (*in_RDX)(*(undefined8 *)(in_RDI + uVar5 * 8),uVar1);\u000a      if ((int)sVar4 < 1) break;\u000a      sVar4 = *(size_t *)(in_RDI + uVar5 * 8);\u000a      *(size_t *)(in_RDI + uVar6 * 8) = sVar4;\u000a      uVar6 = uVar5;\u000a    } while (uVar5 <= uVar3);\u000a  }\u000a  *(undefined8 *)(in_RDI + uVar6 * 8) = uVar1;\u000a  return sVar4;\u000a}\u000a\u000a
p2110
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RDX\nMOV R13,RSI\nMOV RBX,RDI\nMOV R12,qword ptr [RBX + 0x8]\nMOV RAX,R13\nSHR RAX,1\nMOV qword ptr [RSP + 0x10],RAX\nJZ 0x0040c30e\nMOV R14D,0x1\nMOV qword ptr [RSP + 0x8],R13\nNOP dword ptr CS:[RAX + RAX*0x1]\nLEA RBP,[R14 + R14*0x1]\nCMP RBP,R13\nJNC 0x0040c2ec\nMOV RDI,qword ptr [RBX + RBP*0x8]\nMOV R13,R12\nMOV R12,RBP\nOR R12,0x1\nMOV RSI,qword ptr [RBX + R12*0x8]\nCALL R15\nTEST EAX,EAX\nCMOVS RBP,R12\nMOV R12,R13\nMOV R13,qword ptr [RSP + 0x8]\nMOV RDI,qword ptr [RBX + RBP*0x8]\nMOV RSI,R12\nCALL R15\nTEST EAX,EAX\nJLE 0x0040c315\nMOV RAX,qword ptr [RBX + RBP*0x8]\nMOV qword ptr [RBX + R14*0x8],RAX\nCMP RBP,qword ptr [RSP + 0x10]\nMOV R14,RBP\nJBE 0x0040c2c0\nJMP 0x0040c318\nMOV EBP,0x1\nJMP 0x0040c318\nMOV RBP,R14\nMOV qword ptr [RBX + RBP*0x8],R12\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2111
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 d7\n49 89 f5\n48 89 fb\n4c 8b 63 08\n4c 89 e8\n48 d1 e8\n48 89 44 24 10\n74 66\n41 be 01 00 00 00\n4c 89 6c 24 08\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4b 8d 2c 36\n4c 39 ed\n73 23\n48 8b 3c eb\n4d 89 e5\n49 89 ec\n49 83 cc 01\n4a 8b 34 e3\n41 ff d7\n85 c0\n49 0f 48 ec\n4d 89 ec\n4c 8b 6c 24 08\n48 8b 3c eb\n4c 89 e6\n41 ff d7\n85 c0\n7e 1b\n48 8b 04 eb\n4a 89 04 f3\n48 3b 6c 24 10\n49 89 ee\n76 b4\neb 0a\nbd 01 00 00 00\neb 03\n4c 89 f5\n4c 89 24 eb\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2112
S'.text:000000000040c280\n.text:000000000040c281\n.text:000000000040c283\n.text:000000000040c285\n.text:000000000040c287\n.text:000000000040c289\n.text:000000000040c28a\n.text:000000000040c28e\n.text:000000000040c291\n.text:000000000040c294\n.text:000000000040c297\n.text:000000000040c29b\n.text:000000000040c29e\n.text:000000000040c2a1\n.text:000000000040c2a6\n.text:000000000040c2a8\n.text:000000000040c2ae\n.text:000000000040c2b3\n.text:000000000040c2c0\n.text:000000000040c2c4\n.text:000000000040c2c7\n.text:000000000040c2c9\n.text:000000000040c2cd\n.text:000000000040c2d0\n.text:000000000040c2d3\n.text:000000000040c2d7\n.text:000000000040c2db\n.text:000000000040c2de\n.text:000000000040c2e0\n.text:000000000040c2e4\n.text:000000000040c2e7\n.text:000000000040c2ec\n.text:000000000040c2f0\n.text:000000000040c2f3\n.text:000000000040c2f6\n.text:000000000040c2f8\n.text:000000000040c2fa\n.text:000000000040c2fe\n.text:000000000040c302\n.text:000000000040c307\n.text:000000000040c30a\n.text:000000000040c30c\n.text:000000000040c30e\n.text:000000000040c313\n.text:000000000040c315\n.text:000000000040c318\n.text:000000000040c31c\n.text:000000000040c320\n.text:000000000040c321\n.text:000000000040c323\n.text:000000000040c325\n.text:000000000040c327\n.text:000000000040c329\n.text:000000000040c32a\n'
p2113
tp2114
sS'initialize_exit_failure'
p2115
(S'\n__stdcall initialize_exit_failure()\n'
p2116
V\u000avoid initialize_exit_failure(void)\u000a\u000a{\u000a  exit_failure = 2;\u000a  return;\u000a}\u000a\u000a
p2117
S'MOV dword ptr [0x0061a4e0],0x2\nRET\n'
p2118
S'c7 05 26 62 21 00 02 00 00 00\nc3\n'
p2119
S'.text:00000000004042b0\n.text:00000000004042ba\n'
p2120
tp2121
sS'queue_check_insert_parent'
p2122
(S'\n__stdcall queue_check_insert_parent(merge_node_queue * queue, merge_node * node)\n'
p2123
V\u000avoid queue_check_insert_parent(merge_node_queue *queue,merge_node *node)\u000a\u000a{\u000a  if (1 < node->level) {\u000a    lock_node(node->parent);\u000a    queue_check_insert(queue,node->parent);\u000a    unlock_node(node->parent);\u000a    return;\u000a  }\u000a  if (node->nlo + node->nhi == 0) {\u000a    queue_insert(queue,node->parent);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p2124
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCMP dword ptr [RBX + 0x50],0x2\nJC 0x00409c55\nMOV RDI,qword ptr [RBX + 0x38]\nCALL 0x00409c80\nMOV RSI,qword ptr [RBX + 0x38]\nMOV RDI,R14\nCALL 0x00409be0\nMOV RDI,qword ptr [RBX + 0x38]\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004098b0\nMOV RAX,qword ptr [RBX + 0x28]\nADD RAX,qword ptr [RBX + 0x30]\nJNZ 0x00409c72\nMOV RSI,qword ptr [RBX + 0x38]\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00409690\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2125
S'41 56\n53\n50\n48 89 f3\n49 89 fe\n83 7b 50 02\n72 25\n48 8b 7b 38\ne8 47 00 00 00\n48 8b 73 38\n4c 89 f7\ne8 9b ff ff ff\n48 8b 7b 38\n48 83 c4 08\n5b\n41 5e\ne9 5b fc ff ff\n48 8b 43 28\n48 03 43 30\n75 13\n48 8b 73 38\n4c 89 f7\n48 83 c4 08\n5b\n41 5e\ne9 1e fa ff ff\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2126
S'.text:0000000000409c20\n.text:0000000000409c22\n.text:0000000000409c23\n.text:0000000000409c24\n.text:0000000000409c27\n.text:0000000000409c2a\n.text:0000000000409c2e\n.text:0000000000409c30\n.text:0000000000409c34\n.text:0000000000409c39\n.text:0000000000409c3d\n.text:0000000000409c40\n.text:0000000000409c45\n.text:0000000000409c49\n.text:0000000000409c4d\n.text:0000000000409c4e\n.text:0000000000409c50\n.text:0000000000409c55\n.text:0000000000409c59\n.text:0000000000409c5d\n.text:0000000000409c5f\n.text:0000000000409c63\n.text:0000000000409c66\n.text:0000000000409c6a\n.text:0000000000409c6b\n.text:0000000000409c6d\n.text:0000000000409c72\n.text:0000000000409c76\n.text:0000000000409c77\n.text:0000000000409c79\n'
p2127
tp2128
sS'version_etc_va'
p2129
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p2130
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p2131
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x0040fa20\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040fa2c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x0040fa41\nINC R9\nCMP R9,0xa\nJC 0x0040fa00\nMOV R8,RSP\nCALL 0x0040f660\nADD RSP,0x58\nRET\n'
p2132
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p2133
S'.text:000000000040f9f0\n.text:000000000040f9f4\n.text:000000000040f9f7\n.text:000000000040fa00\n.text:000000000040fa03\n.text:000000000040fa07\n.text:000000000040fa09\n.text:000000000040fa0c\n.text:000000000040fa10\n.text:000000000040fa14\n.text:000000000040fa17\n.text:000000000040fa20\n.text:000000000040fa24\n.text:000000000040fa28\n.text:000000000040fa2c\n.text:000000000040fa2f\n.text:000000000040fa33\n.text:000000000040fa36\n.text:000000000040fa38\n.text:000000000040fa3b\n.text:000000000040fa3f\n.text:000000000040fa41\n.text:000000000040fa44\n.text:000000000040fa49\n.text:000000000040fa4d\n'
p2134
tp2135
sS'hash_print_statistics'
p2136
(S'\n__stdcall hash_print_statistics(Hash_table * table, FILE * stream)\n'
p2137
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid hash_print_statistics(Hash_table *table,FILE *stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  undefined auVar5 [16];\u000a  undefined auVar6 [16];\u000a  undefined4 uVar7;\u000a  \u000a  sVar1 = hash_get_n_entries(table);\u000a  sVar2 = hash_get_n_buckets(table);\u000a  sVar3 = hash_get_n_buckets_used(table);\u000a  sVar4 = hash_get_max_bucket_length(table);\u000a  __fprintf_chk(stream,1,0x414164,sVar1);\u000a  __fprintf_chk(stream,1,"# buckets:         %lu\u005cn",sVar2);\u000a  uVar7 = SUB164(_DAT_004125c0 >> 0x20,0);\u000a  auVar5 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar3) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_004125c0,0),\u000a                                   SUB124(ZEXT812(sVar3) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_004125d8,DAT_004125d0));\u000a  auVar5 = addpd(CONCAT412(SUB164(auVar5 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar5,0),SUB168(auVar5 >> 0x40,0))),auVar5);\u000a  auVar6 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar2) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_004125c0,0),\u000a                                   SUB124(ZEXT812(sVar2) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_004125d8,DAT_004125d0));\u000a  auVar6 = addpd(CONCAT412(SUB164(auVar6 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar6,0),SUB168(auVar6 >> 0x40,0))),auVar6);\u000a  __fprintf_chk(CONCAT88(SUB168(auVar5 >> 0x40,0),\u000a                         (SUB168(auVar5,0) * _DAT_004125f0) / SUB168(auVar6,0)),stream,1,\u000a                "# buckets used:    %lu (%.2f%%)\u005cn",sVar3);\u000a  __fprintf_chk(stream,1,"max bucket length: %lu\u005cn",sVar4);\u000a  return;\u000a}\u000a\u000a
p2138
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,RSI\nMOV RBX,RDI\nCALL 0x0040b150\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x0040b130\nMOV R12,RAX\nMOV RDI,RBX\nCALL 0x0040b140\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x0040b160\nMOV R14,RAX\nMOV ESI,0x1\nMOV EDX,0x414164\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,RBP\nCALL 0x00402a70\nMOV ESI,0x1\nMOV EDX,0x41417c\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R12\nCALL 0x00402a70\nMOVQ XMM1,R15\nMOVDQA XMM2,xmmword ptr [0x004125c0]\nPUNPCKLDQ XMM1,XMM2\nMOVAPD XMM3,xmmword ptr [0x004125d0]\nSUBPD XMM1,XMM3\nPSHUFD XMM0,XMM1,0x4e\nADDPD XMM0,XMM1\nMULSD XMM0,qword ptr [0x004125f0]\nMOVQ XMM1,R12\nPUNPCKLDQ XMM1,XMM2\nSUBPD XMM1,XMM3\nPSHUFD XMM2,XMM1,0x4e\nADDPD XMM2,XMM1\nDIVSD XMM0,XMM2\nMOV ESI,0x1\nMOV EDX,0x414194\nMOV AL,0x1\nMOV RDI,R13\nMOV RCX,R15\nCALL 0x00402a70\nMOV ESI,0x1\nMOV EDX,0x4141b5\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402a70\n'
p2139
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f5\n48 89 fb\ne8 3a ff ff ff\n48 89 c5\n48 89 df\ne8 0f ff ff ff\n49 89 c4\n48 89 df\ne8 14 ff ff ff\n49 89 c7\n48 89 df\ne8 29 ff ff ff\n49 89 c6\nbe 01 00 00 00\nba 64 41 41 00\n31 c0\n4c 89 ef\n48 89 e9\ne8 1f 78 ff ff\nbe 01 00 00 00\nba 7c 41 41 00\n31 c0\n4c 89 ef\n4c 89 e1\ne8 08 78 ff ff\n66 49 0f 6e cf\n66 0f 6f 15 4b 73 00 00\n66 0f 62 ca\n66 0f 28 1d 4f 73 00 00\n66 0f 5c cb\n66 0f 70 c1 4e\n66 0f 58 c1\nf2 0f 59 05 5a 73 00 00\n66 49 0f 6e cc\n66 0f 62 ca\n66 0f 5c cb\n66 0f 70 d1 4e\n66 0f 58 d1\nf2 0f 5e c2\nbe 01 00 00 00\nba 94 41 41 00\nb0 01\n4c 89 ef\n4c 89 f9\ne8 a9 77 ff ff\nbe 01 00 00 00\nba b5 41 41 00\n31 c0\n4c 89 ef\n4c 89 f1\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 84 77 ff ff\n'
p2140
S'.text:000000000040b200\n.text:000000000040b201\n.text:000000000040b203\n.text:000000000040b205\n.text:000000000040b207\n.text:000000000040b209\n.text:000000000040b20a\n.text:000000000040b20b\n.text:000000000040b20e\n.text:000000000040b211\n.text:000000000040b216\n.text:000000000040b219\n.text:000000000040b21c\n.text:000000000040b221\n.text:000000000040b224\n.text:000000000040b227\n.text:000000000040b22c\n.text:000000000040b22f\n.text:000000000040b232\n.text:000000000040b237\n.text:000000000040b23a\n.text:000000000040b23f\n.text:000000000040b244\n.text:000000000040b246\n.text:000000000040b249\n.text:000000000040b24c\n.text:000000000040b251\n.text:000000000040b256\n.text:000000000040b25b\n.text:000000000040b25d\n.text:000000000040b260\n.text:000000000040b263\n.text:000000000040b268\n.text:000000000040b26d\n.text:000000000040b275\n.text:000000000040b279\n.text:000000000040b281\n.text:000000000040b285\n.text:000000000040b28a\n.text:000000000040b28e\n.text:000000000040b296\n.text:000000000040b29b\n.text:000000000040b29f\n.text:000000000040b2a3\n.text:000000000040b2a8\n.text:000000000040b2ac\n.text:000000000040b2b0\n.text:000000000040b2b5\n.text:000000000040b2ba\n.text:000000000040b2bc\n.text:000000000040b2bf\n.text:000000000040b2c2\n.text:000000000040b2c7\n.text:000000000040b2cc\n.text:000000000040b2d1\n.text:000000000040b2d3\n.text:000000000040b2d6\n.text:000000000040b2d9\n.text:000000000040b2dd\n.text:000000000040b2de\n.text:000000000040b2e0\n.text:000000000040b2e2\n.text:000000000040b2e4\n.text:000000000040b2e6\n.text:000000000040b2e7\n'
p2141
tp2142
sS'umaxtostr'
p2143
(S'\n__stdcall umaxtostr(uintmax_t i, char * buf)\n'
p2144
V\u000achar * umaxtostr(uintmax_t i,char *buf)\u000a\u000a{\u000a  bool bVar1;\u000a  \u000a  buf[0x14] = 0;\u000a  buf = buf + 0x14;\u000a  do {\u000a    buf[-1] = (char)i + ((byte)((SUB168(ZEXT816(i) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                                0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a    buf = buf + -1;\u000a    bVar1 = 9 < i;\u000a    i = i / 10;\u000a  } while (bVar1);\u000a  return buf;\u000a}\u000a\u000a
p2145
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nADD RSI,0x14\nMOV R8,-0x3333333333333333\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,RCX\nMUL R8\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV EDI,ECX\nSUB EDI,EAX\nOR DIL,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nSHR RDX,0x3\nCMP RCX,0x9\nMOV RCX,RDX\nJA 0x0040c420\nMOV RAX,RSI\nRET\n'
p2146
S'48 89 f9\nc6 46 14 00\n48 83 c6 14\n49 b8 cd cc cc cc cc cc cc cc\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 c8\n49 f7 e0\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n89 cf\n29 c7\n40 80 cf 30\n40 88 7e ff\n48 ff ce\n48 c1 ea 03\n48 83 f9 09\n48 89 d1\n77 d1\n48 89 f0\nc3\n'
p2147
S'.text:000000000040c400\n.text:000000000040c403\n.text:000000000040c407\n.text:000000000040c40b\n.text:000000000040c415\n.text:000000000040c420\n.text:000000000040c423\n.text:000000000040c426\n.text:000000000040c428\n.text:000000000040c42b\n.text:000000000040c430\n.text:000000000040c433\n.text:000000000040c435\n.text:000000000040c437\n.text:000000000040c43b\n.text:000000000040c43f\n.text:000000000040c442\n.text:000000000040c446\n.text:000000000040c44a\n.text:000000000040c44d\n.text:000000000040c44f\n.text:000000000040c452\n'
p2148
tp2149
sS'next_prime'
p2150
(S'\n__stdcall next_prime(size_t candidate)\n'
p2151
V\u000asize_t next_prime(size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  size_t candidate_00;\u000a  size_t sVar2;\u000a  \u000a  candidate_00 = 10;\u000a  if (10 < candidate) {\u000a    candidate_00 = candidate;\u000a  }\u000a  candidate_00 = candidate_00 | 1;\u000a  while ((sVar2 = 0xffffffffffffffff, candidate_00 != 0xffffffffffffffff &&\u000a         (_Var1 = is_prime(candidate_00), sVar2 = candidate_00, _Var1 == false))) {\u000a    candidate_00 = candidate_00 + 2;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p2152
S'PUSH R14\nPUSH RBX\nPUSH RAX\nCMP RDI,0xa\nMOV EBX,0xa\nCMOVA RBX,RDI\nOR RBX,0x1\nMOV R14,-0x1\nCMP RBX,-0x1\nJNZ 0x0040c02a\nJMP 0x0040c039\nADD RBX,0x2\nCMP RBX,-0x1\nJZ 0x0040c039\nMOV RDI,RBX\nCALL 0x0040c050\nTEST AL,AL\nJZ 0x0040c020\nMOV R14,RBX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2153
S'41 56\n53\n50\n48 83 ff 0a\nbb 0a 00 00 00\n48 0f 47 df\n48 83 cb 01\n49 c7 c6 ff ff ff ff\n48 83 fb ff\n75 18\neb 25\n48 83 c3 02\n48 83 fb ff\n74 0f\n48 89 df\ne8 1e 00 00 00\n84 c0\n74 ea\n49 89 de\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2154
S'.text:000000000040bff0\n.text:000000000040bff2\n.text:000000000040bff3\n.text:000000000040bff4\n.text:000000000040bff8\n.text:000000000040bffd\n.text:000000000040c001\n.text:000000000040c005\n.text:000000000040c00c\n.text:000000000040c010\n.text:000000000040c012\n.text:000000000040c020\n.text:000000000040c024\n.text:000000000040c028\n.text:000000000040c02a\n.text:000000000040c02d\n.text:000000000040c032\n.text:000000000040c034\n.text:000000000040c036\n.text:000000000040c039\n.text:000000000040c03c\n.text:000000000040c040\n.text:000000000040c041\n.text:000000000040c043\n'
p2155
tp2156
sS'isaac_seed'
p2157
(S'\n__stdcall isaac_seed(isaac_state * s)\n'
p2158
V\u000avoid isaac_seed(isaac_state *s)\u000a\u000a{\u000a  isaac_word iVar1;\u000a  isaac_word iVar2;\u000a  isaac_word iVar3;\u000a  isaac_word iVar4;\u000a  isaac_word iVar5;\u000a  isaac_word iVar6;\u000a  long lVar7;\u000a  isaac_word a;\u000a  ulong uVar8;\u000a  ulong uVar9;\u000a  long lVar10;\u000a  ulong uVar11;\u000a  isaac_word a_00;\u000a  ulong uVar12;\u000a  ulong uVar13;\u000a  long lVar14;\u000a  ulong uVar15;\u000a  long lVar16;\u000a  ulong uVar17;\u000a  isaac_word a_01;\u000a  \u000a  uVar9 = 0x647c4677a2884b7c;\u000a  uVar17 = 0xb9f8b322c73ac862;\u000a  uVar15 = 0x8c0ea5053d4712a0;\u000a  uVar8 = 0xb29b2e824a595524;\u000a  uVar13 = 0x82f053db8355e0ce;\u000a  a = 0x48fe4a0fa5a09315;\u000a  iVar5 = 0xae985bf2cbfc89ed;\u000a  a_00 = 0x98f5704f6c44c0ab;\u000a  lVar7 = 0;\u000a  do {\u000a    a_01 = s->m[lVar7 + 1];\u000a    iVar1 = s->m[lVar7 + 2];\u000a    iVar2 = s->m[lVar7 + 3];\u000a    lVar14 = uVar13 + s->m[lVar7 + 4];\u000a    iVar3 = s->m[lVar7 + 5];\u000a    iVar4 = s->m[lVar7 + 6];\u000a    a_00 = a_00 + s->m[lVar7 + 7];\u000a    lVar10 = (uVar9 + s->m[lVar7]) - lVar14;\u000a    iVar6 = just(a_00);\u000a    uVar13 = iVar6 >> 9 ^ a + iVar3;\u000a    a_01 = (uVar17 + a_01) - uVar13;\u000a    uVar11 = lVar10 * 0x200 ^ iVar5 + iVar4;\u000a    lVar16 = (uVar15 + iVar1) - uVar11;\u000a    iVar5 = just(a_01);\u000a    uVar12 = a_00 + lVar10 ^ iVar5 >> 0x17;\u000a    a = (uVar8 + iVar2) - uVar12;\u000a    uVar9 = lVar16 * 0x8000 ^ a_01 + lVar10;\u000a    lVar14 = lVar14 - uVar9;\u000a    iVar5 = just(a);\u000a    uVar17 = iVar5 >> 0xe ^ a_01 + lVar16;\u000a    a_01 = uVar13 - uVar17;\u000a    uVar15 = lVar14 * 0x100000 ^ a + lVar16;\u000a    lVar10 = uVar11 - uVar15;\u000a    iVar5 = just(a_01);\u000a    uVar8 = iVar5 >> 0x11 ^ a + lVar14;\u000a    a = a_01 + lVar10;\u000a    a_00 = uVar12 - uVar8;\u000a    uVar13 = lVar10 * 0x4000 ^ lVar14 + a_01;\u000a    iVar5 = lVar10 + a_00;\u000a    s->m[lVar7] = uVar9;\u000a    s->m[lVar7 + 1] = uVar17;\u000a    s->m[lVar7 + 2] = uVar15;\u000a    s->m[lVar7 + 3] = uVar8;\u000a    s->m[lVar7 + 4] = uVar13;\u000a    s->m[lVar7 + 5] = a;\u000a    s->m[lVar7 + 6] = iVar5;\u000a    s->m[lVar7 + 7] = a_00;\u000a    lVar7 = lVar7 + 8;\u000a  } while (lVar7 < 0x100);\u000a  lVar7 = 0;\u000a  do {\u000a    a_01 = s->m[lVar7 + 1];\u000a    iVar1 = s->m[lVar7 + 2];\u000a    iVar2 = s->m[lVar7 + 3];\u000a    lVar14 = uVar13 + s->m[lVar7 + 4];\u000a    iVar3 = s->m[lVar7 + 5];\u000a    iVar4 = s->m[lVar7 + 6];\u000a    a_00 = a_00 + s->m[lVar7 + 7];\u000a    lVar10 = (uVar9 + s->m[lVar7]) - lVar14;\u000a    iVar6 = just(a_00);\u000a    uVar13 = iVar6 >> 9 ^ a + iVar3;\u000a    a_01 = (uVar17 + a_01) - uVar13;\u000a    uVar12 = lVar10 * 0x200 ^ iVar5 + iVar4;\u000a    lVar16 = (uVar15 + iVar1) - uVar12;\u000a    iVar5 = just(a_01);\u000a    uVar11 = iVar5 >> 0x17 ^ a_00 + lVar10;\u000a    a = (uVar8 + iVar2) - uVar11;\u000a    uVar9 = lVar16 * 0x8000 ^ a_01 + lVar10;\u000a    lVar14 = lVar14 - uVar9;\u000a    iVar5 = just(a);\u000a    uVar17 = a_01 + lVar16 ^ iVar5 >> 0xe;\u000a    a_01 = uVar13 - uVar17;\u000a    uVar15 = lVar14 * 0x100000 ^ a + lVar16;\u000a    lVar10 = uVar12 - uVar15;\u000a    iVar5 = just(a_01);\u000a    uVar8 = a + lVar14 ^ iVar5 >> 0x11;\u000a    a = a_01 + lVar10;\u000a    a_00 = uVar11 - uVar8;\u000a    uVar13 = lVar14 + a_01 ^ lVar10 * 0x4000;\u000a    iVar5 = lVar10 + a_00;\u000a    s->m[lVar7] = uVar9;\u000a    s->m[lVar7 + 1] = uVar17;\u000a    s->m[lVar7 + 2] = uVar15;\u000a    s->m[lVar7 + 3] = uVar8;\u000a    s->m[lVar7 + 4] = uVar13;\u000a    s->m[lVar7 + 5] = a;\u000a    s->m[lVar7 + 6] = iVar5;\u000a    s->m[lVar7 + 7] = a_00;\u000a    lVar7 = lVar7 + 8;\u000a  } while (lVar7 < 0x100);\u000a  *(undefined4 *)&s->a = 0;\u000a  *(undefined4 *)((long)&s->a + 4) = 0;\u000a  *(undefined4 *)&s->b = 0;\u000a  *(undefined4 *)((long)&s->b + 4) = 0;\u000a  s->c = 0;\u000a  return;\u000a}\u000a\u000a
p2159
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,0x647c4677a2884b7c\nMOV R15,-0x46074cdd38c5379e\nMOV R14,-0x73f15afac2b8ed60\nMOV RBX,-0x4d64d17db5a6aadc\nMOV R13,-0x7d0fac247caa1f32\nMOV RDX,0x48fe4a0fa5a09315\nMOV RAX,-0x5167a40d34037613\nMOV R12,-0x670a8fb093bb3f55\nXOR ECX,ECX\nMOV qword ptr [RSP + 0x28],RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV qword ptr [RSP + 0x20],RCX\nADD RBP,qword ptr [RDI + RCX*0x8]\nADD R15,qword ptr [RDI + RCX*0x8 + 0x8]\nADD R14,qword ptr [RDI + RCX*0x8 + 0x10]\nADD RBX,qword ptr [RDI + RCX*0x8 + 0x18]\nADD R13,qword ptr [RDI + RCX*0x8 + 0x20]\nADD RDX,qword ptr [RDI + RCX*0x8 + 0x28]\nMOV qword ptr [RSP],RDX\nADD RAX,qword ptr [RDI + RCX*0x8 + 0x30]\nMOV qword ptr [RSP + 0x8],RAX\nADD R12,qword ptr [RDI + RCX*0x8 + 0x38]\nSUB RBP,R13\nMOV RDI,R12\nCALL 0x0040eb30\nSHR RAX,0x9\nXOR RAX,qword ptr [RSP]\nMOV qword ptr [RSP],RAX\nADD R12,RBP\nSUB R15,RAX\nLEA RAX,[R15 + RBP*0x1]\nMOV qword ptr [RSP + 0x18],RAX\nSHL RBP,0x9\nXOR RBP,qword ptr [RSP + 0x8]\nMOV qword ptr [RSP + 0x8],RBP\nSUB R14,RBP\nMOV RDI,R15\nCALL 0x0040eb30\nSHR RAX,0x17\nXOR R12,RAX\nADD R15,R14\nMOV qword ptr [RSP + 0x30],R15\nSUB RBX,R12\nLEA RAX,[RBX + R14*0x1]\nMOV qword ptr [RSP + 0x10],RAX\nSHL R14,0xf\nMOV RBP,R14\nXOR RBP,qword ptr [RSP + 0x18]\nSUB R13,RBP\nMOV RDI,RBX\nCALL 0x0040eb30\nMOV R15,RAX\nSHR R15,0xe\nXOR R15,qword ptr [RSP + 0x30]\nADD RBX,R13\nMOV qword ptr [RSP + 0x18],RBX\nMOV RDI,qword ptr [RSP]\nSUB RDI,R15\nMOV qword ptr [RSP],RDI\nMOV R14,R13\nSHL R14,0x14\nXOR R14,qword ptr [RSP + 0x10]\nADD R13,RDI\nMOV qword ptr [RSP + 0x10],R13\nMOV R13,qword ptr [RSP + 0x8]\nSUB R13,R14\nCALL 0x0040eb30\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RDI,qword ptr [RSP + 0x28]\nMOV RBX,RAX\nSHR RBX,0x11\nXOR RBX,qword ptr [RSP + 0x18]\nMOV RDX,qword ptr [RSP]\nMOV RAX,R13\nADD RDX,RAX\nSUB R12,RBX\nSHL R13,0xe\nXOR R13,qword ptr [RSP + 0x10]\nADD RAX,R12\nMOV qword ptr [RDI + RCX*0x8],RBP\nMOV qword ptr [RDI + RCX*0x8 + 0x8],R15\nMOV qword ptr [RDI + RCX*0x8 + 0x10],R14\nMOV qword ptr [RDI + RCX*0x8 + 0x18],RBX\nMOV qword ptr [RDI + RCX*0x8 + 0x20],R13\nMOV qword ptr [RDI + RCX*0x8 + 0x28],RDX\nMOV qword ptr [RDI + RCX*0x8 + 0x30],RAX\nMOV qword ptr [RDI + RCX*0x8 + 0x38],R12\nADD RCX,0x8\nCMP RCX,0x100\nJL 0x0040ebb0\nXOR ECX,ECX\nNOP\nMOV qword ptr [RSP + 0x20],RCX\nADD RBP,qword ptr [RDI + RCX*0x8]\nADD R15,qword ptr [RDI + RCX*0x8 + 0x8]\nADD R14,qword ptr [RDI + RCX*0x8 + 0x10]\nADD RBX,qword ptr [RDI + RCX*0x8 + 0x18]\nADD R13,qword ptr [RDI + RCX*0x8 + 0x20]\nADD RDX,qword ptr [RDI + RCX*0x8 + 0x28]\nMOV qword ptr [RSP],RDX\nADD RAX,qword ptr [RDI + RCX*0x8 + 0x30]\nMOV qword ptr [RSP + 0x8],RAX\nADD R12,qword ptr [RDI + RCX*0x8 + 0x38]\nSUB RBP,R13\nMOV RDI,R12\nCALL 0x0040eb30\nSHR RAX,0x9\nXOR RAX,qword ptr [RSP]\nMOV qword ptr [RSP],RAX\nADD R12,RBP\nSUB R15,RAX\nLEA RAX,[R15 + RBP*0x1]\nMOV qword ptr [RSP + 0x18],RAX\nSHL RBP,0x9\nXOR RBP,qword ptr [RSP + 0x8]\nSUB R14,RBP\nMOV RDI,R15\nCALL 0x0040eb30\nSHR RAX,0x17\nXOR RAX,R12\nADD R15,R14\nSUB RBX,RAX\nMOV R12,RAX\nLEA RAX,[RBX + R14*0x1]\nMOV qword ptr [RSP + 0x10],RAX\nSHL R14,0xf\nXOR R14,qword ptr [RSP + 0x18]\nMOV qword ptr [RSP + 0x8],R14\nSUB R13,R14\nMOV RDI,RBX\nCALL 0x0040eb30\nSHR RAX,0xe\nXOR R15,RAX\nADD RBX,R13\nMOV RDI,qword ptr [RSP]\nSUB RDI,R15\nMOV qword ptr [RSP],RDI\nMOV R14,R13\nSHL R14,0x14\nXOR R14,qword ptr [RSP + 0x10]\nADD R13,RDI\nSUB RBP,R14\nCALL 0x0040eb30\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RDI,qword ptr [RSP + 0x28]\nSHR RAX,0x11\nXOR RBX,RAX\nMOV RDX,qword ptr [RSP]\nADD RDX,RBP\nSUB R12,RBX\nMOV RAX,RBP\nSHL RAX,0xe\nXOR R13,RAX\nADD RBP,R12\nMOV RSI,qword ptr [RSP + 0x8]\nMOV qword ptr [RDI + RCX*0x8],RSI\nMOV qword ptr [RDI + RCX*0x8 + 0x8],R15\nMOV qword ptr [RDI + RCX*0x8 + 0x10],R14\nMOV qword ptr [RDI + RCX*0x8 + 0x18],RBX\nMOV qword ptr [RDI + RCX*0x8 + 0x20],R13\nMOV qword ptr [RDI + RCX*0x8 + 0x28],RDX\nMOV qword ptr [RDI + RCX*0x8 + 0x30],RBP\nMOV qword ptr [RDI + RCX*0x8 + 0x38],R12\nADD RCX,0x8\nCMP RCX,0x100\nMOV RAX,RBP\nMOV RBP,RSI\nJL 0x0040ed00\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x800 + RDI],XMM0\nMOV qword ptr [0x810 + RDI],0x0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2160
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 bd 7c 4b 88 a2 77 46 7c 64\n49 bf 62 c8 3a c7 22 b3 f8 b9\n49 be a0 12 47 3d 05 a5 0e 8c\n48 bb 24 55 59 4a 82 2e 9b b2\n49 bd ce e0 55 83 db 53 f0 82\n48 ba 15 93 a0 a5 0f 4a fe 48\n48 b8 ed 89 fc cb f2 5b 98 ae\n49 bc ab c0 44 6c 4f 70 f5 98\n31 c9\n48 89 7c 24 28\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 4c 24 20\n48 03 2c cf\n4c 03 7c cf 08\n4c 03 74 cf 10\n48 03 5c cf 18\n4c 03 6c cf 20\n48 03 54 cf 28\n48 89 14 24\n48 03 44 cf 30\n48 89 44 24 08\n4c 03 64 cf 38\n4c 29 ed\n4c 89 e7\ne8 40 ff ff ff\n48 c1 e8 09\n48 33 04 24\n48 89 04 24\n49 01 ec\n49 29 c7\n49 8d 04 2f\n48 89 44 24 18\n48 c1 e5 09\n48 33 6c 24 08\n48 89 6c 24 08\n49 29 ee\n4c 89 ff\ne8 0c ff ff ff\n48 c1 e8 17\n49 31 c4\n4d 01 f7\n4c 89 7c 24 30\n4c 29 e3\n4a 8d 04 33\n48 89 44 24 10\n49 c1 e6 0f\n4c 89 f5\n48 33 6c 24 18\n49 29 ed\n48 89 df\ne8 da fe ff ff\n49 89 c7\n49 c1 ef 0e\n4c 33 7c 24 30\n4c 01 eb\n48 89 5c 24 18\n48 8b 3c 24\n4c 29 ff\n48 89 3c 24\n4d 89 ee\n49 c1 e6 14\n4c 33 74 24 10\n49 01 fd\n4c 89 6c 24 10\n4c 8b 6c 24 08\n4d 29 f5\ne8 9a fe ff ff\n48 8b 4c 24 20\n48 8b 7c 24 28\n48 89 c3\n48 c1 eb 11\n48 33 5c 24 18\n48 8b 14 24\n4c 89 e8\n48 01 c2\n49 29 dc\n49 c1 e5 0e\n4c 33 6c 24 10\n4c 01 e0\n48 89 2c cf\n4c 89 7c cf 08\n4c 89 74 cf 10\n48 89 5c cf 18\n4c 89 6c cf 20\n48 89 54 cf 28\n48 89 44 cf 30\n4c 89 64 cf 38\n48 83 c1 08\n48 81 f9 00 01 00 00\n0f 8c b3 fe ff ff\n31 c9\n90\n48 89 4c 24 20\n48 03 2c cf\n4c 03 7c cf 08\n4c 03 74 cf 10\n48 03 5c cf 18\n4c 03 6c cf 20\n48 03 54 cf 28\n48 89 14 24\n48 03 44 cf 30\n48 89 44 24 08\n4c 03 64 cf 38\n4c 29 ed\n4c 89 e7\ne8 f0 fd ff ff\n48 c1 e8 09\n48 33 04 24\n48 89 04 24\n49 01 ec\n49 29 c7\n49 8d 04 2f\n48 89 44 24 18\n48 c1 e5 09\n48 33 6c 24 08\n49 29 ee\n4c 89 ff\ne8 c1 fd ff ff\n48 c1 e8 17\n4c 31 e0\n4d 01 f7\n48 29 c3\n49 89 c4\n4a 8d 04 33\n48 89 44 24 10\n49 c1 e6 0f\n4c 33 74 24 18\n4c 89 74 24 08\n4d 29 f5\n48 89 df\ne8 8f fd ff ff\n48 c1 e8 0e\n49 31 c7\n4c 01 eb\n48 8b 3c 24\n4c 29 ff\n48 89 3c 24\n4d 89 ee\n49 c1 e6 14\n4c 33 74 24 10\n49 01 fd\n4c 29 f5\ne8 63 fd ff ff\n48 8b 4c 24 20\n48 8b 7c 24 28\n48 c1 e8 11\n48 31 c3\n48 8b 14 24\n48 01 ea\n49 29 dc\n48 89 e8\n48 c1 e0 0e\n49 31 c5\n4c 01 e5\n48 8b 74 24 08\n48 89 34 cf\n4c 89 7c cf 08\n4c 89 74 cf 10\n48 89 5c cf 18\n4c 89 6c cf 20\n48 89 54 cf 28\n48 89 6c cf 30\n4c 89 64 cf 38\n48 83 c1 08\n48 81 f9 00 01 00 00\n48 89 e8\n48 89 f5\n0f 8c c8 fe ff ff\n0f 57 c0\n0f 11 87 00 08 00 00\n48 c7 87 10 08 00 00 00 00 00 00\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2161
S'.text:000000000040eb40\n.text:000000000040eb41\n.text:000000000040eb43\n.text:000000000040eb45\n.text:000000000040eb47\n.text:000000000040eb49\n.text:000000000040eb4a\n.text:000000000040eb4e\n.text:000000000040eb58\n.text:000000000040eb62\n.text:000000000040eb6c\n.text:000000000040eb76\n.text:000000000040eb80\n.text:000000000040eb8a\n.text:000000000040eb94\n.text:000000000040eb9e\n.text:000000000040eba0\n.text:000000000040eba5\n.text:000000000040ebb0\n.text:000000000040ebb5\n.text:000000000040ebb9\n.text:000000000040ebbe\n.text:000000000040ebc3\n.text:000000000040ebc8\n.text:000000000040ebcd\n.text:000000000040ebd2\n.text:000000000040ebd6\n.text:000000000040ebdb\n.text:000000000040ebe0\n.text:000000000040ebe5\n.text:000000000040ebe8\n.text:000000000040ebeb\n.text:000000000040ebf0\n.text:000000000040ebf4\n.text:000000000040ebf8\n.text:000000000040ebfc\n.text:000000000040ebff\n.text:000000000040ec02\n.text:000000000040ec06\n.text:000000000040ec0b\n.text:000000000040ec0f\n.text:000000000040ec14\n.text:000000000040ec19\n.text:000000000040ec1c\n.text:000000000040ec1f\n.text:000000000040ec24\n.text:000000000040ec28\n.text:000000000040ec2b\n.text:000000000040ec2e\n.text:000000000040ec33\n.text:000000000040ec36\n.text:000000000040ec3a\n.text:000000000040ec3f\n.text:000000000040ec43\n.text:000000000040ec46\n.text:000000000040ec4b\n.text:000000000040ec4e\n.text:000000000040ec51\n.text:000000000040ec56\n.text:000000000040ec59\n.text:000000000040ec5d\n.text:000000000040ec62\n.text:000000000040ec65\n.text:000000000040ec6a\n.text:000000000040ec6e\n.text:000000000040ec71\n.text:000000000040ec75\n.text:000000000040ec78\n.text:000000000040ec7c\n.text:000000000040ec81\n.text:000000000040ec84\n.text:000000000040ec89\n.text:000000000040ec8e\n.text:000000000040ec91\n.text:000000000040ec96\n.text:000000000040ec9b\n.text:000000000040eca0\n.text:000000000040eca3\n.text:000000000040eca7\n.text:000000000040ecac\n.text:000000000040ecb0\n.text:000000000040ecb3\n.text:000000000040ecb6\n.text:000000000040ecb9\n.text:000000000040ecbd\n.text:000000000040ecc2\n.text:000000000040ecc5\n.text:000000000040ecc9\n.text:000000000040ecce\n.text:000000000040ecd3\n.text:000000000040ecd8\n.text:000000000040ecdd\n.text:000000000040ece2\n.text:000000000040ece7\n.text:000000000040ecec\n.text:000000000040ecf0\n.text:000000000040ecf7\n.text:000000000040ecfd\n.text:000000000040ecff\n.text:000000000040ed00\n.text:000000000040ed05\n.text:000000000040ed09\n.text:000000000040ed0e\n.text:000000000040ed13\n.text:000000000040ed18\n.text:000000000040ed1d\n.text:000000000040ed22\n.text:000000000040ed26\n.text:000000000040ed2b\n.text:000000000040ed30\n.text:000000000040ed35\n.text:000000000040ed38\n.text:000000000040ed3b\n.text:000000000040ed40\n.text:000000000040ed44\n.text:000000000040ed48\n.text:000000000040ed4c\n.text:000000000040ed4f\n.text:000000000040ed52\n.text:000000000040ed56\n.text:000000000040ed5b\n.text:000000000040ed5f\n.text:000000000040ed64\n.text:000000000040ed67\n.text:000000000040ed6a\n.text:000000000040ed6f\n.text:000000000040ed73\n.text:000000000040ed76\n.text:000000000040ed79\n.text:000000000040ed7c\n.text:000000000040ed7f\n.text:000000000040ed83\n.text:000000000040ed88\n.text:000000000040ed8c\n.text:000000000040ed91\n.text:000000000040ed96\n.text:000000000040ed99\n.text:000000000040ed9c\n.text:000000000040eda1\n.text:000000000040eda5\n.text:000000000040eda8\n.text:000000000040edab\n.text:000000000040edaf\n.text:000000000040edb2\n.text:000000000040edb6\n.text:000000000040edb9\n.text:000000000040edbd\n.text:000000000040edc2\n.text:000000000040edc5\n.text:000000000040edc8\n.text:000000000040edcd\n.text:000000000040edd2\n.text:000000000040edd7\n.text:000000000040eddb\n.text:000000000040edde\n.text:000000000040ede2\n.text:000000000040ede5\n.text:000000000040ede8\n.text:000000000040edeb\n.text:000000000040edef\n.text:000000000040edf2\n.text:000000000040edf5\n.text:000000000040edfa\n.text:000000000040edfe\n.text:000000000040ee03\n.text:000000000040ee08\n.text:000000000040ee0d\n.text:000000000040ee12\n.text:000000000040ee17\n.text:000000000040ee1c\n.text:000000000040ee21\n.text:000000000040ee25\n.text:000000000040ee2c\n.text:000000000040ee2f\n.text:000000000040ee32\n.text:000000000040ee38\n.text:000000000040ee3b\n.text:000000000040ee42\n.text:000000000040ee4d\n.text:000000000040ee51\n.text:000000000040ee52\n.text:000000000040ee54\n.text:000000000040ee56\n.text:000000000040ee58\n.text:000000000040ee5a\n.text:000000000040ee5b\n'
p2162
tp2163
sS'general_numcompare'
p2164
(S'\n__stdcall general_numcompare(char * sa, char * sb)\n'
p2165
V\u000a/* WARNING: Removing unreachable block (ram,0x00407135) */\u000a/* WARNING: Removing unreachable block (ram,0x00407144) */\u000a\u000aint general_numcompare(char *sa,char *sb)\u000a\u000a{\u000a  int iVar1;\u000a  float10 in_ST0;\u000a  float10 in_ST1;\u000a  char *ea;\u000a  longdouble a;\u000a  char *local_30;\u000a  char *local_28;\u000a  float10 local_1c;\u000a  \u000a  strtold(sa,&local_28);\u000a  local_1c = in_ST0;\u000a  strtold(sb,&local_30);\u000a  if (local_28 == sa) {\u000a    iVar1 = -1;\u000a    if (local_30 == sb) {\u000a      iVar1 = 0;\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = 1;\u000a    if (local_30 != sb) {\u000a      if (local_1c < in_ST1) {\u000a        iVar1 = -1;\u000a      }\u000a      else {\u000a        if ((local_1c <= in_ST1) && (iVar1 = 0, local_1c != in_ST1)) {\u000a          iVar1 = -1;\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p2166
S'PUSH R14\nPUSH RBX\nSUB RSP,0x28\nMOV R14,RSI\nMOV RBX,RDI\nLEA RSI,[RSP + 0x10]\nCALL 0x00402950\nFSTP tword ptr [RSP + 0x1c]\nLEA RSI,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00402950\nMOV RCX,qword ptr [RSP + 0x8]\nCMP qword ptr [RSP + 0x10],RBX\nJZ 0x004070f3\nMOV EAX,0x1\nCMP RCX,R14\nJZ 0x0040710c\nFLD tword ptr [RSP + 0x1c]\nFXCH\nFUCOMI ST0,ST1\nJBE 0x00407104\nFSTP ST0\nFSTP ST0\nMOV EAX,0xffffffff\nJMP 0x0040710e\nFSTP ST0\nXOR EDX,EDX\nCMP RCX,R14\nMOV EAX,0xffffffff\nCMOVZ EAX,EDX\nJMP 0x0040710e\nFXCH\nFUCOMI ST0,ST1\nJBE 0x0040711e\nFSTP ST1\nFSTP ST0\nFLDZ\nFLDZ\nFSTP ST1\nFSTP ST0\nADD RSP,0x28\nPOP RBX\nPOP R14\nRET\nXOR EAX,EAX\nFUCOMI ST0,ST1\nJNZ 0x00407126\nJNP 0x00407112\nFXCH\nFUCOMIP ST0,ST0\nMOV EAX,0xffffffff\nFLDZ\nFXCH\nJNP 0x00407112\nFSTP ST1\nFUCOMIP ST0,ST0\nMOV EAX,0x1\nFLDZ\nFLDZ\nJNP 0x00407112\nFSTP ST1\nFSTP ST0\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x004076a0\nJMP 0x0040710e\n'
p2167
S'41 56\n53\n48 83 ec 28\n49 89 f6\n48 89 fb\n48 8d 74 24 10\ne8 99 b8 ff ff\ndb 7c 24 1c\n48 8d 74 24 08\n4c 89 f7\ne8 88 b8 ff ff\n48 8b 4c 24 08\n48 39 5c 24 10\n74 1f\nb8 01 00 00 00\n4c 39 f1\n74 2e\ndb 6c 24 1c\nd9 c9\ndb e9\n76 1c\ndd d8\ndd d8\nb8 ff ff ff ff\neb 1b\ndd d8\n31 d2\n4c 39 f1\nb8 ff ff ff ff\n0f 44 c2\neb 0a\nd9 c9\ndb e9\n76 14\ndd d9\ndd d8\nd9 ee\nd9 ee\ndd d9\ndd d8\n48 83 c4 28\n5b\n41 5e\nc3\n31 c0\ndb e9\n75 02\n7b ec\nd9 c9\ndf e8\nb8 ff ff ff ff\nd9 ee\nd9 c9\n7b dd\ndd d9\ndf e8\nb8 01 00 00 00\nd9 ee\nd9 ee\n7b ce\ndd d9\ndd d8\n48 89 df\n4c 89 f6\ne8 4d 05 00 00\neb b9\n'
p2168
S'.text:00000000004070a0\n.text:00000000004070a2\n.text:00000000004070a3\n.text:00000000004070a7\n.text:00000000004070aa\n.text:00000000004070ad\n.text:00000000004070b2\n.text:00000000004070b7\n.text:00000000004070bb\n.text:00000000004070c0\n.text:00000000004070c3\n.text:00000000004070c8\n.text:00000000004070cd\n.text:00000000004070d2\n.text:00000000004070d4\n.text:00000000004070d9\n.text:00000000004070dc\n.text:00000000004070de\n.text:00000000004070e2\n.text:00000000004070e4\n.text:00000000004070e6\n.text:00000000004070e8\n.text:00000000004070ea\n.text:00000000004070ec\n.text:00000000004070f1\n.text:00000000004070f3\n.text:00000000004070f5\n.text:00000000004070f7\n.text:00000000004070fa\n.text:00000000004070ff\n.text:0000000000407102\n.text:0000000000407104\n.text:0000000000407106\n.text:0000000000407108\n.text:000000000040710a\n.text:000000000040710c\n.text:000000000040710e\n.text:0000000000407110\n.text:0000000000407112\n.text:0000000000407114\n.text:0000000000407116\n.text:000000000040711a\n.text:000000000040711b\n.text:000000000040711d\n.text:000000000040711e\n.text:0000000000407120\n.text:0000000000407122\n.text:0000000000407124\n.text:0000000000407126\n.text:0000000000407128\n.text:000000000040712a\n.text:000000000040712f\n.text:0000000000407131\n.text:0000000000407133\n.text:0000000000407135\n.text:0000000000407137\n.text:0000000000407139\n.text:000000000040713e\n.text:0000000000407140\n.text:0000000000407142\n.text:0000000000407144\n.text:0000000000407146\n.text:0000000000407148\n.text:000000000040714b\n.text:000000000040714e\n.text:0000000000407153\n'
p2169
tp2170
sS'hash_insert'
p2171
(S'\n__stdcall hash_insert(Hash_table * table, void * entry)\n'
p2172
V\u000avoid * hash_insert(Hash_table *table,void *entry)\u000a\u000a{\u000a  int iVar1;\u000a  void *matched_ent;\u000a  void *local_10;\u000a  \u000a  iVar1 = hash_insert_if_absent(table,entry,&local_10);\u000a  if (iVar1 == -1) {\u000a    entry = (void *)0x0;\u000a  }\u000a  else {\u000a    if (iVar1 == 0) {\u000a      entry = local_10;\u000a    }\u000a  }\u000a  return entry;\u000a}\u000a\u000a
p2173
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nLEA RDX,[RSP + 0x8]\nCALL 0x0040bb60\nCMP EAX,-0x1\nJZ 0x0040be51\nTEST EAX,EAX\nCMOVZ RBX,qword ptr [RSP + 0x8]\nJMP 0x0040be53\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p2174
S'53\n48 83 ec 10\n48 89 f3\n48 8d 54 24 08\ne8 1e fd ff ff\n83 f8 ff\n74 0a\n85 c0\n48 0f 44 5c 24 08\neb 02\n31 db\n48 89 d8\n48 83 c4 10\n5b\nc3\n'
p2175
S'.text:000000000040be30\n.text:000000000040be31\n.text:000000000040be35\n.text:000000000040be38\n.text:000000000040be3d\n.text:000000000040be42\n.text:000000000040be45\n.text:000000000040be47\n.text:000000000040be49\n.text:000000000040be4f\n.text:000000000040be51\n.text:000000000040be53\n.text:000000000040be56\n.text:000000000040be5a\n.text:000000000040be5b\n'
p2176
tp2177
sS'gettext_quote'
p2178
(S'\n__stdcall gettext_quote(char * msgid)\n'
p2179
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00414a8c;\u000a        pcVar2 = &DAT_00414a90;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p2180
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004025b0\nCMP RAX,RBX\nJNZ 0x0040df78\nCALL 0x00411010\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x0040df80\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x0040df28\nCMP byte ptr [RBX],0x60\nMOV ECX,0x414a7c\nMOV EAX,0x414a80\nJMP 0x0040df74\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x0040df80\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x0040df66\nCMP byte ptr [RBX],0x60\nMOV ECX,0x414a8c\nMOV EAX,0x414a90\nJMP 0x0040df74\nCMP R14D,0x9\nMOV ECX,0x413e78\nMOV EAX,0x41360f\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2181
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 d7 46 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 29 31 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 7c 4a 41 00\nb8 80 4a 41 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 8c 4a 41 00\nb8 90 4a 41 00\neb 0e\n41 83 fe 09\nb9 78 3e 41 00\nb8 0f 36 41 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p2182
S'.text:000000000040dec0\n.text:000000000040dec1\n.text:000000000040dec3\n.text:000000000040dec4\n.text:000000000040dec7\n.text:000000000040deca\n.text:000000000040decc\n.text:000000000040ded1\n.text:000000000040ded4\n.text:000000000040ded9\n.text:000000000040dedc\n.text:000000000040dee2\n.text:000000000040dee7\n.text:000000000040deea\n.text:000000000040deef\n.text:000000000040def4\n.text:000000000040def9\n.text:000000000040deff\n.text:000000000040df05\n.text:000000000040df08\n.text:000000000040df0a\n.text:000000000040df0c\n.text:000000000040df11\n.text:000000000040df15\n.text:000000000040df17\n.text:000000000040df19\n.text:000000000040df1c\n.text:000000000040df21\n.text:000000000040df26\n.text:000000000040df28\n.text:000000000040df2d\n.text:000000000040df32\n.text:000000000040df37\n.text:000000000040df3d\n.text:000000000040df43\n.text:000000000040df46\n.text:000000000040df48\n.text:000000000040df4a\n.text:000000000040df4f\n.text:000000000040df53\n.text:000000000040df55\n.text:000000000040df57\n.text:000000000040df5a\n.text:000000000040df5f\n.text:000000000040df64\n.text:000000000040df66\n.text:000000000040df6a\n.text:000000000040df6f\n.text:000000000040df74\n.text:000000000040df78\n.text:000000000040df79\n.text:000000000040df7b\n.text:000000000040df7c\n'
p2183
tp2184
sS'fclose'
p2185
(S'\n__stdcall fclose(FILE * __stream)\n'
p2186
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0061a0e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p2187
S'JMP qword ptr [0x0061a0e8]\n'
p2188
S'ff 25 72 7b 21 00\n'
p2189
S'.plt:0000000000402570\n'
p2190
tp2191
sS'__ctype_get_mb_cur_max'
p2192
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p2193
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0061a110)();\u000a  return sVar1;\u000a}\u000a\u000a
p2194
S'JMP qword ptr [0x0061a110]\n'
p2195
S'ff 25 4a 7b 21 00\n'
p2196
S'.plt:00000000004025c0\n'
p2197
tp2198
sS'mkstemp_safer'
p2199
(S'\n__stdcall mkstemp_safer(char * templ)\n'
p2200
V\u000aint mkstemp_safer(char *templ)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  mkstemp(templ);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p2201
S'PUSH RAX\nCALL 0x004028c0\nMOV EDI,EAX\nPOP RAX\nJMP 0x0040f610\n'
p2202
S'50\ne8 2a 37 ff ff\n89 c7\n58\ne9 72 04 00 00\n'
p2203
S'.text:000000000040f190\n.text:000000000040f191\n.text:000000000040f196\n.text:000000000040f198\n.text:000000000040f199\n'
p2204
tp2205
sS'raw_hasher'
p2206
(S'\n__stdcall raw_hasher(void * data, size_t n)\n'
p2207
V\u000asize_t raw_hasher(void *data,size_t n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = rotr_sz((size_t)data);\u000a  return sVar1 % n;\u000a}\u000a\u000a
p2208
S'PUSH RBX\nMOV RBX,RSI\nMOV ESI,0x3\nCALL 0x00410d00\nXOR EDX,EDX\nDIV RBX\nMOV RAX,RDX\nPOP RBX\nRET\n'
p2209
S'53\n48 89 f3\nbe 03 00 00 00\ne8 b2 56 00 00\n31 d2\n48 f7 f3\n48 89 d0\n5b\nc3\n'
p2210
S'.text:000000000040b640\n.text:000000000040b641\n.text:000000000040b644\n.text:000000000040b649\n.text:000000000040b64e\n.text:000000000040b650\n.text:000000000040b653\n.text:000000000040b656\n.text:000000000040b657\n'
p2211
tp2212
sS'md5_process_block'
p2213
(S'\n__stdcall md5_process_block(void * buffer, size_t len, md5_ctx * ctx)\n'
p2214
V\u000avoid md5_process_block(void *buffer,size_t len,md5_ctx *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  int iVar5;\u000a  int iVar6;\u000a  int iVar7;\u000a  int iVar8;\u000a  int iVar9;\u000a  int iVar10;\u000a  int iVar11;\u000a  int iVar12;\u000a  int iVar13;\u000a  int iVar14;\u000a  int iVar15;\u000a  int iVar16;\u000a  uint uVar17;\u000a  uint uVar18;\u000a  uint uVar19;\u000a  uint uVar20;\u000a  uint uVar21;\u000a  uint uVar22;\u000a  uint uVar23;\u000a  uint uVar24;\u000a  uint uVar25;\u000a  int *piVar26;\u000a  uint32_t uVar27;\u000a  uint uVar28;\u000a  \u000a  piVar26 = (int *)((len & 0xfffffffffffffffc) + (long)buffer);\u000a  uVar27 = ctx->A;\u000a  uVar28 = ctx->B;\u000a  uVar17 = ctx->C;\u000a  uVar20 = ctx->D;\u000a  uVar18 = ctx->total[0];\u000a  ctx->total[0] = uVar18 + (uint)len;\u000a  ctx->total[1] = ctx->total[1] + (int)(len >> 0x20) + (uint)CARRY4(uVar18,(uint)len);\u000a  if (buffer < piVar26) {\u000a    do {\u000a      iVar1 = *(int *)buffer;\u000a      iVar2 = ((int *)buffer)[1];\u000a      uVar18 = iVar1 + -0x28955b88 + ((uVar17 ^ uVar20) & uVar28 ^ uVar20) + uVar27;\u000a      uVar19 = (uVar18 * 0x80 | uVar18 >> 0x19) + uVar28;\u000a      uVar18 = ((uVar28 ^ uVar17) & uVar19 ^ uVar17) + 0xe8c7b756 + uVar20 + iVar2;\u000a      uVar21 = (uVar18 * 0x1000 | uVar18 >> 0x14) + uVar19;\u000a      iVar3 = ((int *)buffer)[2];\u000a      uVar18 = ((uVar19 ^ uVar28) & uVar21 ^ uVar28) + 0x242070db + uVar17 + iVar3;\u000a      uVar23 = (uVar18 * 0x20000 | uVar18 >> 0xf) + uVar21;\u000a      iVar4 = ((int *)buffer)[3];\u000a      uVar18 = ((uVar21 ^ uVar19) & uVar23 ^ uVar19) + 0xc1bdceee + uVar28 + iVar4;\u000a      uVar24 = (uVar18 * 0x400000 | uVar18 >> 10) + uVar23;\u000a      iVar5 = ((int *)buffer)[4];\u000a      uVar18 = ((uVar23 ^ uVar21) & uVar24 ^ uVar21) + 0xf57c0faf + uVar19 + iVar5;\u000a      uVar19 = (uVar18 * 0x80 | uVar18 >> 0x19) + uVar24;\u000a      iVar6 = ((int *)buffer)[5];\u000a      uVar18 = ((uVar24 ^ uVar23) & uVar19 ^ uVar23) + 0x4787c62a + uVar21 + iVar6;\u000a      uVar22 = (uVar18 * 0x1000 | uVar18 >> 0x14) + uVar19;\u000a      iVar7 = ((int *)buffer)[6];\u000a      uVar18 = ((uVar19 ^ uVar24) & uVar22 ^ uVar24) + 0xa8304613 + uVar23 + iVar7;\u000a      uVar23 = (uVar18 * 0x20000 | uVar18 >> 0xf) + uVar22;\u000a      iVar8 = ((int *)buffer)[7];\u000a      uVar18 = ((uVar22 ^ uVar19) & uVar23 ^ uVar19) + 0xfd469501 + uVar24 + iVar8;\u000a      uVar21 = (uVar18 * 0x400000 | uVar18 >> 10) + uVar23;\u000a      iVar9 = ((int *)buffer)[8];\u000a      uVar18 = ((uVar23 ^ uVar22) & uVar21 ^ uVar22) + 0x698098d8 + uVar19 + iVar9;\u000a      uVar19 = (uVar18 * 0x80 | uVar18 >> 0x19) + uVar21;\u000a      iVar10 = ((int *)buffer)[9];\u000a      uVar18 = ((uVar21 ^ uVar23) & uVar19 ^ uVar23) + 0x8b44f7af + uVar22 + iVar10;\u000a      uVar22 = (uVar18 * 0x1000 | uVar18 >> 0x14) + uVar19;\u000a      iVar11 = ((int *)buffer)[10];\u000a      uVar18 = (((uVar19 ^ uVar21) & uVar22 ^ uVar21) - 0xa44f) + uVar23 + iVar11;\u000a      uVar23 = (uVar18 * 0x20000 | uVar18 >> 0xf) + uVar22;\u000a      iVar12 = ((int *)buffer)[0xb];\u000a      uVar18 = ((uVar22 ^ uVar19) & uVar23 ^ uVar19) + 0x895cd7be + uVar21 + iVar12;\u000a      uVar21 = (uVar18 * 0x400000 | uVar18 >> 10) + uVar23;\u000a      iVar13 = ((int *)buffer)[0xc];\u000a      uVar18 = ((uVar23 ^ uVar22) & uVar21 ^ uVar22) + 0x6b901122 + uVar19 + iVar13;\u000a      uVar19 = (uVar18 * 0x80 | uVar18 >> 0x19) + uVar21;\u000a      iVar14 = ((int *)buffer)[0xd];\u000a      uVar18 = ((uVar21 ^ uVar23) & uVar19 ^ uVar23) + 0xfd987193 + uVar22 + iVar14;\u000a      uVar22 = (uVar18 * 0x1000 | uVar18 >> 0x14) + uVar19;\u000a      iVar15 = ((int *)buffer)[0xe];\u000a      uVar18 = ((uVar19 ^ uVar21) & uVar22 ^ uVar21) + 0xa679438e + uVar23 + iVar15;\u000a      uVar23 = (uVar18 * 0x20000 | uVar18 >> 0xf) + uVar22;\u000a      iVar16 = ((int *)buffer)[0xf];\u000a      uVar18 = ((uVar22 ^ uVar19) & uVar23 ^ uVar19) + 0x49b40821 + uVar21 + iVar16;\u000a      uVar21 = (uVar18 * 0x400000 | uVar18 >> 10) + uVar23;\u000a      uVar18 = ((uVar21 ^ uVar23) & uVar22 ^ uVar23) + 0xf61e2562 + uVar19 + iVar2;\u000a      uVar19 = (uVar18 * 0x20 | uVar18 >> 0x1b) + uVar21;\u000a      uVar18 = ((uVar19 ^ uVar21) & uVar23 ^ uVar21) + 0xc040b340 + uVar22 + iVar7;\u000a      uVar22 = (uVar18 * 0x200 | uVar18 >> 0x17) + uVar19;\u000a      uVar18 = ((uVar22 ^ uVar19) & uVar21 ^ uVar19) + 0x265e5a51 + uVar23 + iVar12;\u000a      uVar23 = (uVar18 * 0x4000 | uVar18 >> 0x12) + uVar22;\u000a      uVar18 = ((uVar23 ^ uVar22) & uVar19 ^ uVar22) + 0xe9b6c7aa + uVar21 + iVar1;\u000a      uVar21 = (uVar18 * 0x100000 | uVar18 >> 0xc) + uVar23;\u000a      uVar18 = ((uVar21 ^ uVar23) & uVar22 ^ uVar23) + 0xd62f105d + uVar19 + iVar6;\u000a      uVar19 = (uVar18 * 0x20 | uVar18 >> 0x1b) + uVar21;\u000a      uVar18 = ((uVar19 ^ uVar21) & uVar23 ^ uVar21) + 0x2441453 + uVar22 + iVar11;\u000a      uVar22 = (uVar18 * 0x200 | uVar18 >> 0x17) + uVar19;\u000a      uVar18 = ((uVar22 ^ uVar19) & uVar21 ^ uVar19) + 0xd8a1e681 + uVar23 + iVar16;\u000a      uVar23 = (uVar18 * 0x4000 | uVar18 >> 0x12) + uVar22;\u000a      uVar18 = ((uVar23 ^ uVar22) & uVar19 ^ uVar22) + 0xe7d3fbc8 + uVar21 + iVar5;\u000a      uVar21 = (uVar18 * 0x100000 | uVar18 >> 0xc) + uVar23;\u000a      uVar18 = ((uVar21 ^ uVar23) & uVar22 ^ uVar23) + 0x21e1cde6 + uVar19 + iVar10;\u000a      uVar19 = (uVar18 * 0x20 | uVar18 >> 0x1b) + uVar21;\u000a      uVar18 = ((uVar19 ^ uVar21) & uVar23 ^ uVar21) + 0xc33707d6 + uVar22 + iVar15;\u000a      uVar22 = (uVar18 * 0x200 | uVar18 >> 0x17) + uVar19;\u000a      uVar18 = ((uVar22 ^ uVar19) & uVar21 ^ uVar19) + 0xf4d50d87 + uVar23 + iVar4;\u000a      uVar24 = (uVar18 * 0x4000 | uVar18 >> 0x12) + uVar22;\u000a      uVar18 = ((uVar24 ^ uVar22) & uVar19 ^ uVar22) + 0x455a14ed + uVar21 + iVar9;\u000a      uVar21 = (uVar18 * 0x100000 | uVar18 >> 0xc) + uVar24;\u000a      uVar18 = ((uVar21 ^ uVar24) & uVar22 ^ uVar24) + 0xa9e3e905 + uVar19 + iVar14;\u000a      uVar19 = (uVar18 * 0x20 | uVar18 >> 0x1b) + uVar21;\u000a      uVar18 = ((uVar19 ^ uVar21) & uVar24 ^ uVar21) + 0xfcefa3f8 + uVar22 + iVar3;\u000a      uVar23 = (uVar18 * 0x200 | uVar18 >> 0x17) + uVar19;\u000a      uVar18 = ((uVar23 ^ uVar19) & uVar21 ^ uVar19) + 0x676f02d9 + uVar24 + iVar8;\u000a      uVar24 = (uVar18 * 0x4000 | uVar18 >> 0x12) + uVar23;\u000a      uVar18 = ((uVar24 ^ uVar23) & uVar19 ^ uVar23) + 0x8d2a4c8a + uVar21 + iVar13;\u000a      uVar22 = (uVar18 * 0x100000 | uVar18 >> 0xc) + uVar24;\u000a      uVar18 = ((uVar24 ^ uVar23 ^ uVar22) - 0x5c6be) + uVar19 + iVar6;\u000a      uVar19 = (uVar18 * 0x10 | uVar18 >> 0x1c) + uVar22;\u000a      uVar18 = (uVar22 ^ uVar24 ^ uVar19) + 0x8771f681 + uVar23 + iVar9;\u000a      uVar21 = (uVar18 * 0x800 | uVar18 >> 0x15) + uVar19;\u000a      uVar18 = (uVar19 ^ uVar22 ^ uVar21) + 0x6d9d6122 + uVar24 + iVar12;\u000a      uVar23 = (uVar18 * 0x10000 | uVar18 >> 0x10) + uVar21;\u000a      uVar18 = (uVar21 ^ uVar19 ^ uVar23) + 0xfde5380c + uVar22 + iVar15;\u000a      uVar24 = (uVar18 * 0x800000 | uVar18 >> 9) + uVar23;\u000a      uVar18 = (uVar23 ^ uVar21 ^ uVar24) + 0xa4beea44 + uVar19 + iVar2;\u000a      uVar19 = (uVar18 * 0x10 | uVar18 >> 0x1c) + uVar24;\u000a      uVar18 = (uVar24 ^ uVar23 ^ uVar19) + 0x4bdecfa9 + uVar21 + iVar5;\u000a      uVar21 = (uVar18 * 0x800 | uVar18 >> 0x15) + uVar19;\u000a      uVar18 = (uVar19 ^ uVar24 ^ uVar21) + 0xf6bb4b60 + uVar23 + iVar8;\u000a      uVar22 = (uVar18 * 0x10000 | uVar18 >> 0x10) + uVar21;\u000a      uVar18 = (uVar21 ^ uVar19 ^ uVar22) + 0xbebfbc70 + uVar24 + iVar11;\u000a      uVar23 = (uVar18 * 0x800000 | uVar18 >> 9) + uVar22;\u000a      uVar18 = (uVar22 ^ uVar21 ^ uVar23) + 0x289b7ec6 + uVar19 + iVar14;\u000a      uVar19 = (uVar18 * 0x10 | uVar18 >> 0x1c) + uVar23;\u000a      uVar18 = (uVar23 ^ uVar22 ^ uVar19) + 0xeaa127fa + uVar21 + iVar1;\u000a      uVar21 = (uVar18 * 0x800 | uVar18 >> 0x15) + uVar19;\u000a      uVar18 = (uVar19 ^ uVar23 ^ uVar21) + 0xd4ef3085 + uVar22 + iVar4;\u000a      uVar22 = (uVar18 * 0x10000 | uVar18 >> 0x10) + uVar21;\u000a      uVar18 = (uVar21 ^ uVar19 ^ uVar22) + 0x4881d05 + uVar23 + iVar7;\u000a      uVar25 = (uVar18 * 0x800000 | uVar18 >> 9) + uVar22;\u000a      uVar18 = (uVar22 ^ uVar21 ^ uVar25) + 0xd9d4d039 + uVar19 + iVar10;\u000a      uVar23 = (uVar18 * 0x10 | uVar18 >> 0x1c) + uVar25;\u000a      uVar18 = (uVar25 ^ uVar22 ^ uVar23) + 0xe6db99e5 + uVar21 + iVar13;\u000a      uVar21 = (uVar18 * 0x800 | uVar18 >> 0x15) + uVar23;\u000a      uVar18 = (uVar23 ^ uVar25 ^ uVar21) + 0x1fa27cf8 + uVar22 + iVar16;\u000a      uVar24 = (uVar18 * 0x10000 | uVar18 >> 0x10) + uVar21;\u000a      uVar18 = (uVar21 ^ uVar23 ^ uVar24) + 0xc4ac5665 + uVar25 + iVar3;\u000a      uVar19 = (uVar18 * 0x800000 | uVar18 >> 9) + uVar24;\u000a      uVar18 = ((~uVar21 | uVar19) ^ uVar24) + 0xf4292244 + uVar23 + iVar1;\u000a      uVar22 = (uVar18 * 0x40 | uVar18 >> 0x1a) + uVar19;\u000a      uVar18 = ((~uVar24 | uVar22) ^ uVar19) + 0x432aff97 + uVar21 + iVar8;\u000a      uVar21 = (uVar18 * 0x400 | uVar18 >> 0x16) + uVar22;\u000a      uVar18 = ((~uVar19 | uVar21) ^ uVar22) + 0xab9423a7 + uVar24 + iVar15;\u000a      uVar23 = (uVar18 * 0x8000 | uVar18 >> 0x11) + uVar21;\u000a      uVar18 = ((~uVar22 | uVar23) ^ uVar21) + 0xfc93a039 + uVar19 + iVar6;\u000a      uVar19 = (uVar18 * 0x200000 | uVar18 >> 0xb) + uVar23;\u000a      uVar18 = ((~uVar21 | uVar19) ^ uVar23) + 0x655b59c3 + uVar22 + iVar13;\u000a      uVar22 = (uVar18 * 0x40 | uVar18 >> 0x1a) + uVar19;\u000a      uVar18 = ((~uVar23 | uVar22) ^ uVar19) + 0x8f0ccc92 + uVar21 + iVar4;\u000a      uVar21 = (uVar18 * 0x400 | uVar18 >> 0x16) + uVar22;\u000a      uVar18 = (((~uVar19 | uVar21) ^ uVar22) - 0x100b83) + uVar23 + iVar11;\u000a      uVar24 = (uVar18 * 0x8000 | uVar18 >> 0x11) + uVar21;\u000a      uVar18 = ((~uVar22 | uVar24) ^ uVar21) + 0x85845dd1 + uVar19 + iVar2;\u000a      uVar19 = (uVar18 * 0x200000 | uVar18 >> 0xb) + uVar24;\u000a      uVar18 = ((~uVar21 | uVar19) ^ uVar24) + 0x6fa87e4f + uVar22 + iVar9;\u000a      uVar23 = (uVar18 * 0x40 | uVar18 >> 0x1a) + uVar19;\u000a      uVar18 = ((~uVar24 | uVar23) ^ uVar19) + 0xfe2ce6e0 + uVar21 + iVar16;\u000a      uVar22 = (uVar18 * 0x400 | uVar18 >> 0x16) + uVar23;\u000a      uVar18 = ((~uVar19 | uVar22) ^ uVar23) + 0xa3014314 + uVar24 + iVar7;\u000a      uVar25 = (uVar18 * 0x8000 | uVar18 >> 0x11) + uVar22;\u000a      uVar18 = ((~uVar23 | uVar25) ^ uVar22) + 0x4e0811a1 + uVar19 + iVar14;\u000a      uVar24 = (uVar18 * 0x200000 | uVar18 >> 0xb) + uVar25;\u000a      uVar18 = ((~uVar22 | uVar24) ^ uVar25) + 0xf7537e82 + uVar23 + iVar5;\u000a      uVar21 = (uVar18 * 0x40 | uVar18 >> 0x1a) + uVar24;\u000a      uVar18 = ((~uVar25 | uVar21) ^ uVar24) + 0xbd3af235 + uVar22 + iVar12;\u000a      uVar22 = (uVar18 * 0x400 | uVar18 >> 0x16) + uVar21;\u000a      uVar18 = ((~uVar24 | uVar22) ^ uVar21) + 0x2ad7d2bb + uVar25 + iVar3;\u000a      uVar19 = (uVar18 * 0x8000 | uVar18 >> 0x11) + uVar22;\u000a      uVar27 = uVar27 + uVar21;\u000a      uVar18 = ((~uVar21 | uVar19) ^ uVar22) + 0xeb86d391 + uVar24 + iVar10;\u000a      uVar28 = uVar28 + uVar19 + (uVar18 * 0x200000 | uVar18 >> 0xb);\u000a      uVar17 = uVar19 + uVar17;\u000a      uVar20 = uVar22 + uVar20;\u000a      buffer = (int *)buffer + 0x10;\u000a    } while (buffer < piVar26);\u000a  }\u000a  ctx->A = uVar27;\u000a  ctx->B = uVar28;\u000a  ctx->C = uVar17;\u000a  ctx->D = uVar20;\u000a  return;\u000a}\u000a\u000a
p2215
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R8,RSI\nAND R8,-0x4\nADD R8,RDI\nMOV R9D,dword ptr [RDX]\nMOV R10D,dword ptr [RDX + 0x4]\nMOV EBP,dword ptr [RDX + 0x8]\nMOV EBX,dword ptr [RDX + 0xc]\nMOV RAX,RSI\nSHR RAX,0x20\nMOV ECX,dword ptr [RDX + 0x10]\nADD ECX,ESI\nMOV dword ptr [RDX + 0x10],ECX\nADC EAX,0x0\nMOV qword ptr [RSP + -0x30],RDX\nADD dword ptr [RDX + 0x14],EAX\nCMP RDI,R8\nJNC 0x0040a8ec\nMOV qword ptr [RSP + -0x28],R8\nNOP dword ptr [RAX]\nMOV qword ptr [RSP + -0x18],R10\nMOV qword ptr [RSP + -0x10],RBP\nMOV qword ptr [RSP + -0x8],RBX\nMOV dword ptr [RSP + -0x44],R9D\nMOV EAX,EBP\nXOR EAX,EBX\nAND EAX,R10D\nXOR EAX,EBX\nMOV ECX,dword ptr [RDI]\nMOV qword ptr [RSP + -0x40],RCX\nADD EAX,R9D\nMOV R13D,dword ptr [RDI + 0x4]\nLEA EDX,[-0x28955b88 + RCX + RAX*0x1]\nROL EDX,0x7\nMOV EAX,R10D\nADD EDX,R10D\nXOR EAX,EBP\nAND EAX,EDX\nLEA ECX,[RBX + R13*0x1]\nMOV qword ptr [RSP + -0x38],R13\nXOR EAX,EBP\nLEA EBX,[-0x173848aa + RAX + RCX*0x1]\nROL EBX,0xc\nMOV EAX,EDX\nXOR EAX,R10D\nADD EBX,EDX\nAND EAX,EBX\nMOV ECX,dword ptr [RDI + 0x8]\nMOV qword ptr [RSP + -0x70],RCX\nLEA ECX,[RBP + RCX*0x1]\nXOR EAX,R10D\nLEA EBP,[0x242070db + RAX + RCX*0x1]\nROL EBP,0x11\nMOV EAX,EBX\nXOR EAX,EDX\nADD EBP,EBX\nAND EAX,EBP\nMOV ECX,dword ptr [RDI + 0xc]\nMOV qword ptr [RSP + -0x20],RCX\nLEA ECX,[R10 + RCX*0x1]\nXOR EAX,EDX\nLEA ESI,[-0x3e423112 + RAX + RCX*0x1]\nROL ESI,0x16\nMOV EAX,EBP\nXOR EAX,EBX\nADD ESI,EBP\nAND EAX,ESI\nMOV ECX,dword ptr [RDI + 0x10]\nADD EDX,ECX\nMOV R11D,ECX\nXOR EAX,EBX\nLEA EAX,[-0xa83f051 + RAX + RDX*0x1]\nROL EAX,0x7\nMOV ECX,ESI\nXOR ECX,EBP\nADD EAX,ESI\nAND ECX,EAX\nMOV EDX,dword ptr [RDI + 0x14]\nMOV dword ptr [RSP + -0x80],EDX\nADD EBX,EDX\nXOR ECX,EBP\nLEA EBX,[0x4787c62a + RCX + RBX*0x1]\nROL EBX,0xc\nMOV ECX,EAX\nXOR ECX,ESI\nADD EBX,EAX\nAND ECX,EBX\nMOV R8D,dword ptr [RDI + 0x18]\nADD EBP,R8D\nMOV dword ptr [RSP + -0x48],R8D\nXOR ECX,ESI\nLEA EBP,[-0x57cfb9ed + RCX + RBP*0x1]\nROL EBP,0x11\nMOV ECX,EBX\nXOR ECX,EAX\nADD EBP,EBX\nAND ECX,EBP\nMOV EDX,dword ptr [RDI + 0x1c]\nMOV dword ptr [RSP + -0x4c],EDX\nADD ESI,EDX\nXOR ECX,EAX\nLEA ECX,[-0x2b96aff + RCX + RSI*0x1]\nROL ECX,0x16\nMOV EDX,EBP\nXOR EDX,EBX\nADD ECX,EBP\nAND EDX,ECX\nMOV ESI,dword ptr [RDI + 0x20]\nMOV dword ptr [RSP + -0x7c],ESI\nADD EAX,ESI\nXOR EDX,EBX\nLEA EAX,[0x698098d8 + RDX + RAX*0x1]\nROL EAX,0x7\nMOV EDX,ECX\nXOR EDX,EBP\nADD EAX,ECX\nAND EDX,EAX\nMOV R9D,dword ptr [RDI + 0x24]\nADD EBX,R9D\nMOV dword ptr [RSP + -0x74],R9D\nXOR EDX,EBP\nLEA EBX,[-0x74bb0851 + RDX + RBX*0x1]\nROL EBX,0xc\nMOV EDX,EAX\nXOR EDX,ECX\nADD EBX,EAX\nAND EDX,EBX\nMOV R12D,dword ptr [RDI + 0x28]\nADD EBP,R12D\nMOV dword ptr [RSP + -0x5c],R12D\nXOR EDX,ECX\nLEA EBP,[-0xa44f + RDX + RBP*0x1]\nROL EBP,0x11\nMOV EDX,EBX\nXOR EDX,EAX\nADD EBP,EBX\nAND EDX,EBP\nMOV R14D,dword ptr [RDI + 0x2c]\nADD ECX,R14D\nMOV dword ptr [RSP + -0x78],R14D\nXOR EDX,EAX\nLEA ECX,[-0x76a32842 + RDX + RCX*0x1]\nROL ECX,0x16\nMOV EDX,EBP\nXOR EDX,EBX\nADD ECX,EBP\nAND EDX,ECX\nMOV ESI,dword ptr [RDI + 0x30]\nMOV dword ptr [RSP + -0x58],ESI\nADD EAX,ESI\nXOR EDX,EBX\nLEA EAX,[0x6b901122 + RDX + RAX*0x1]\nROL EAX,0x7\nMOV EDX,ECX\nXOR EDX,EBP\nADD EAX,ECX\nAND EDX,EAX\nMOV ESI,dword ptr [RDI + 0x34]\nMOV dword ptr [RSP + -0x60],ESI\nADD EBX,ESI\nXOR EDX,EBP\nLEA EBX,[-0x2678e6d + RDX + RBX*0x1]\nROL EBX,0xc\nMOV EDX,EAX\nXOR EDX,ECX\nADD EBX,EAX\nAND EDX,EBX\nMOV R15D,dword ptr [RDI + 0x38]\nADD EBP,R15D\nXOR EDX,ECX\nLEA EBP,[-0x5986bc72 + RDX + RBP*0x1]\nROL EBP,0x11\nMOV EDX,EBX\nXOR EDX,EAX\nADD EBP,EBX\nAND EDX,EBP\nMOV ESI,dword ptr [RDI + 0x3c]\nADD ECX,ESI\nMOV dword ptr [RSP + -0x50],ESI\nXOR EDX,EAX\nLEA ECX,[0x49b40821 + RDX + RCX*0x1]\nROL ECX,0x16\nADD ECX,EBP\nMOV EDX,ECX\nXOR EDX,EBP\nAND EDX,EBX\nXOR EDX,EBP\nADD EAX,R13D\nLEA EAX,[-0x9e1da9e + RDX + RAX*0x1]\nROL EAX,0x5\nADD EAX,ECX\nMOV EDX,EAX\nXOR EDX,ECX\nAND EDX,EBP\nXOR EDX,ECX\nADD EBX,R8D\nLEA EBX,[-0x3fbf4cc0 + RDX + RBX*0x1]\nROL EBX,0x9\nADD EBX,EAX\nMOV EDX,EBX\nXOR EDX,EAX\nAND EDX,ECX\nXOR EDX,EAX\nADD EBP,R14D\nLEA EBP,[0x265e5a51 + RDX + RBP*0x1]\nROL EBP,0xe\nADD EBP,EBX\nMOV EDX,EBP\nXOR EDX,EBX\nAND EDX,EAX\nADD ECX,dword ptr [RSP + -0x40]\nXOR EDX,EBX\nLEA ECX,[-0x16493856 + RDX + RCX*0x1]\nROL ECX,0x14\nADD ECX,EBP\nMOV EDX,ECX\nXOR EDX,EBP\nAND EDX,EBX\nXOR EDX,EBP\nMOV R10D,dword ptr [RSP + -0x80]\nADD EAX,R10D\nLEA EAX,[-0x29d0efa3 + RDX + RAX*0x1]\nROL EAX,0x5\nADD EAX,ECX\nMOV EDX,EAX\nXOR EDX,ECX\nAND EDX,EBP\nXOR EDX,ECX\nADD EBX,R12D\nLEA EBX,[0x2441453 + RDX + RBX*0x1]\nROL EBX,0x9\nADD EBX,EAX\nMOV EDX,EBX\nXOR EDX,EAX\nAND EDX,ECX\nXOR EDX,EAX\nADD EBP,ESI\nLEA EBP,[-0x275e197f + RDX + RBP*0x1]\nROL EBP,0xe\nADD EBP,EBX\nMOV EDX,EBP\nXOR EDX,EBX\nAND EDX,EAX\nMOV R8D,R11D\nMOV dword ptr [RSP + -0x54],R8D\nADD ECX,R8D\nXOR EDX,EBX\nLEA ECX,[-0x182c0438 + RDX + RCX*0x1]\nROL ECX,0x14\nADD ECX,EBP\nMOV EDX,ECX\nXOR EDX,EBP\nAND EDX,EBX\nXOR EDX,EBP\nADD EAX,R9D\nLEA EAX,[0x21e1cde6 + RDX + RAX*0x1]\nROL EAX,0x5\nADD EAX,ECX\nMOV EDX,EAX\nXOR EDX,ECX\nAND EDX,EBP\nXOR EDX,ECX\nMOV R11D,R15D\nMOV dword ptr [RSP + -0x64],R11D\nADD EBX,R11D\nLEA EBX,[-0x3cc8f82a + RDX + RBX*0x1]\nROL EBX,0x9\nADD EBX,EAX\nMOV EDX,EBX\nXOR EDX,EAX\nAND EDX,ECX\nXOR EDX,EAX\nMOV R14,qword ptr [RSP + -0x20]\nADD EBP,R14D\nLEA EBP,[-0xb2af279 + RDX + RBP*0x1]\nROL EBP,0xe\nADD EBP,EBX\nMOV EDX,EBP\nXOR EDX,EBX\nAND EDX,EAX\nMOV R15D,dword ptr [RSP + -0x7c]\nADD ECX,R15D\nXOR EDX,EBX\nLEA ECX,[0x455a14ed + RDX + RCX*0x1]\nROL ECX,0x14\nADD ECX,EBP\nMOV EDX,ECX\nXOR EDX,EBP\nAND EDX,EBX\nXOR EDX,EBP\nMOV R9D,dword ptr [RSP + -0x60]\nADD EAX,R9D\nLEA EAX,[-0x561c16fb + RDX + RAX*0x1]\nROL EAX,0x5\nADD EAX,ECX\nMOV EDX,EAX\nXOR EDX,ECX\nAND EDX,EBP\nXOR EDX,ECX\nADD EBX,dword ptr [RSP + -0x70]\nLEA EBX,[-0x3105c08 + RDX + RBX*0x1]\nROL EBX,0x9\nADD EBX,EAX\nMOV EDX,EBX\nXOR EDX,EAX\nAND EDX,ECX\nXOR EDX,EAX\nMOV R12D,dword ptr [RSP + -0x4c]\nADD EBP,R12D\nLEA EBP,[0x676f02d9 + RDX + RBP*0x1]\nROL EBP,0xe\nADD EBP,EBX\nMOV ESI,EBP\nXOR ESI,EBX\nMOV EDX,ESI\nAND EDX,EAX\nMOV R13D,dword ptr [RSP + -0x58]\nADD ECX,R13D\nXOR EDX,EBX\nLEA EDX,[-0x72d5b376 + RDX + RCX*0x1]\nROL EDX,0x14\nADD EDX,EBP\nXOR ESI,EDX\nADD EAX,R10D\nLEA EAX,[-0x5c6be + RSI + RAX*0x1]\nROL EAX,0x4\nADD EAX,EDX\nMOV ECX,EDX\nXOR ECX,EBP\nXOR ECX,EAX\nADD EBX,R15D\nLEA ECX,[-0x788e097f + RCX + RBX*0x1]\nROL ECX,0xb\nADD ECX,EAX\nMOV ESI,EAX\nXOR ESI,EDX\nXOR ESI,ECX\nADD EBP,dword ptr [RSP + -0x78]\nLEA EBX,[0x6d9d6122 + RSI + RBP*0x1]\nROL EBX,0x10\nADD EBX,ECX\nMOV ESI,ECX\nXOR ESI,EAX\nXOR ESI,EBX\nADD EDX,R11D\nLEA EBP,[-0x21ac7f4 + RSI + RDX*0x1]\nROL EBP,0x17\nADD EBP,EBX\nMOV EDX,EBX\nXOR EDX,ECX\nXOR EDX,EBP\nADD EAX,dword ptr [RSP + -0x38]\nLEA EAX,[-0x5b4115bc + RDX + RAX*0x1]\nROL EAX,0x4\nADD EAX,EBP\nMOV EDX,EBP\nXOR EDX,EBX\nXOR EDX,EAX\nADD ECX,R8D\nLEA ECX,[0x4bdecfa9 + RDX + RCX*0x1]\nROL ECX,0xb\nADD ECX,EAX\nMOV EDX,EAX\nXOR EDX,EBP\nXOR EDX,ECX\nADD EBX,R12D\nMOV R10D,R12D\nLEA EBX,[-0x944b4a0 + RDX + RBX*0x1]\nROL EBX,0x10\nADD EBX,ECX\nMOV EDX,ECX\nXOR EDX,EAX\nXOR EDX,EBX\nMOV R8D,dword ptr [RSP + -0x5c]\nADD EBP,R8D\nLEA EBP,[-0x41404390 + RDX + RBP*0x1]\nROL EBP,0x17\nADD EBP,EBX\nMOV EDX,EBX\nXOR EDX,ECX\nXOR EDX,EBP\nADD EAX,R9D\nLEA EAX,[0x289b7ec6 + RDX + RAX*0x1]\nROL EAX,0x4\nADD EAX,EBP\nMOV EDX,EBP\nXOR EDX,EBX\nXOR EDX,EAX\nMOV R15,qword ptr [RSP + -0x40]\nADD ECX,R15D\nLEA ECX,[-0x155ed806 + RDX + RCX*0x1]\nROL ECX,0xb\nADD ECX,EAX\nMOV EDX,EAX\nXOR EDX,EBP\nXOR EDX,ECX\nADD EBX,R14D\nLEA EDX,[-0x2b10cf7b + RDX + RBX*0x1]\nROL EDX,0x10\nADD EDX,ECX\nMOV ESI,ECX\nXOR ESI,EAX\nXOR ESI,EDX\nMOV R12D,dword ptr [RSP + -0x48]\nADD EBP,R12D\nLEA ESI,[0x4881d05 + RSI + RBP*0x1]\nROL ESI,0x17\nADD ESI,EDX\nMOV EBX,EDX\nXOR EBX,ECX\nXOR EBX,ESI\nADD EAX,dword ptr [RSP + -0x74]\nLEA EBX,[-0x262b2fc7 + RBX + RAX*0x1]\nROL EBX,0x4\nADD EBX,ESI\nMOV EAX,ESI\nXOR EAX,EDX\nXOR EAX,EBX\nADD ECX,R13D\nLEA ECX,[-0x1924661b + RAX + RCX*0x1]\nROL ECX,0xb\nADD ECX,EBX\nMOV EAX,EBX\nXOR EAX,ESI\nXOR EAX,ECX\nMOV R11D,dword ptr [RSP + -0x50]\nADD EDX,R11D\nLEA EBP,[0x1fa27cf8 + RAX + RDX*0x1]\nROL EBP,0x10\nADD EBP,ECX\nMOV EAX,ECX\nXOR EAX,EBX\nXOR EAX,EBP\nADD ESI,dword ptr [RSP + -0x70]\nLEA EAX,[-0x3b53a99b + RAX + RSI*0x1]\nADD EBX,R15D\nMOV EDX,ECX\nADD ECX,R10D\nROL EAX,0x17\nADD EAX,EBP\nNOT EDX\nOR EDX,EAX\nXOR EDX,EBP\nLEA EBX,[-0xbd6ddbc + RDX + RBX*0x1]\nROL EBX,0x6\nADD EBX,EAX\nMOV EDX,EBP\nNOT EDX\nOR EDX,EBX\nXOR EDX,EAX\nLEA ECX,[0x432aff97 + RDX + RCX*0x1]\nADD EBP,dword ptr [RSP + -0x64]\nROL ECX,0xa\nADD ECX,EBX\nMOV EDX,EAX\nNOT EDX\nOR EDX,ECX\nXOR EDX,EBX\nLEA EBP,[-0x546bdc59 + RDX + RBP*0x1]\nADD EAX,dword ptr [RSP + -0x80]\nROL EBP,0xf\nADD EBP,ECX\nMOV EDX,EBX\nNOT EDX\nOR EDX,EBP\nXOR EDX,ECX\nLEA EAX,[-0x36c5fc7 + RDX + RAX*0x1]\nADD EBX,R13D\nMOV EDX,ECX\nADD ECX,R14D\nROL EAX,0x15\nADD EAX,EBP\nNOT EDX\nOR EDX,EAX\nXOR EDX,EBP\nLEA ESI,[0x655b59c3 + RDX + RBX*0x1]\nROL ESI,0x6\nADD ESI,EAX\nMOV EDX,EBP\nNOT EDX\nOR EDX,ESI\nXOR EDX,EAX\nLEA EDX,[-0x70f3336e + RDX + RCX*0x1]\nADD EBP,R8D\nMOV R8,qword ptr [RSP + -0x28]\nROL EDX,0xa\nADD EDX,ESI\nMOV ECX,EAX\nNOT ECX\nOR ECX,EDX\nXOR ECX,ESI\nLEA EBP,[-0x100b83 + RCX + RBP*0x1]\nROL EBP,0xf\nADD EAX,dword ptr [RSP + -0x38]\nMOV ECX,ESI\nADD EBP,EDX\nNOT ECX\nOR ECX,EBP\nXOR ECX,EDX\nLEA EAX,[-0x7a7ba22f + RCX + RAX*0x1]\nROL EAX,0x15\nADD ESI,dword ptr [RSP + -0x7c]\nMOV ECX,EDX\nNOT ECX\nADD EAX,EBP\nOR ECX,EAX\nXOR ECX,EBP\nLEA EBX,[0x6fa87e4f + RCX + RSI*0x1]\nROL EBX,0x6\nADD EBX,EAX\nADD EDX,R11D\nMOV ESI,EBP\nNOT ESI\nOR ESI,EBX\nXOR ESI,EAX\nLEA EDX,[-0x1d31920 + RSI + RDX*0x1]\nROL EDX,0xa\nADD EDX,EBX\nADD EBP,R12D\nMOV ESI,EAX\nNOT ESI\nOR ESI,EDX\nXOR ESI,EBX\nLEA ESI,[-0x5cfebcec + RSI + RBP*0x1]\nROL ESI,0xf\nADD EAX,R9D\nMOV R10,qword ptr [RSP + -0x18]\nMOV R9D,dword ptr [RSP + -0x44]\nMOV ECX,EBX\nADD ESI,EDX\nNOT ECX\nOR ECX,ESI\nXOR ECX,EDX\nLEA EBP,[0x4e0811a1 + RCX + RAX*0x1]\nROL EBP,0x15\nADD EBX,dword ptr [RSP + -0x54]\nMOV EAX,EDX\nNOT EAX\nADD EBP,ESI\nOR EAX,EBP\nXOR EAX,ESI\nLEA ECX,[-0x8ac817e + RAX + RBX*0x1]\nROL ECX,0x6\nADD ECX,EBP\nADD EDX,dword ptr [RSP + -0x78]\nMOV EAX,ESI\nNOT EAX\nOR EAX,ECX\nXOR EAX,EBP\nLEA EDX,[-0x42c50dcb + RAX + RDX*0x1]\nROL EDX,0xa\nADD EDX,ECX\nADD ESI,dword ptr [RSP + -0x70]\nMOV EAX,EBP\nNOT EAX\nOR EAX,EDX\nXOR EAX,ECX\nLEA EAX,[0x2ad7d2bb + RAX + RSI*0x1]\nADD EBP,dword ptr [RSP + -0x74]\nROL EAX,0xf\nADD EAX,EDX\nADD R9D,ECX\nNOT ECX\nOR ECX,EAX\nXOR ECX,EDX\nLEA ECX,[-0x14792c6f + RCX + RBP*0x1]\nROL ECX,0x15\nADD R10D,EAX\nADD R10D,ECX\nADD EAX,dword ptr [RSP + -0x10]\nADD EDX,dword ptr [RSP + -0x8]\nADD RDI,0x40\nMOV EBP,EAX\nMOV EBX,EDX\nCMP RDI,R8\nJC 0x0040a240\nJMP 0x0040a8f0\nMOV EDX,EBX\nMOV EAX,EBP\nMOV RCX,qword ptr [RSP + -0x30]\nMOV dword ptr [RCX],R9D\nMOV dword ptr [RCX + 0x4],R10D\nMOV dword ptr [RCX + 0x8],EAX\nMOV dword ptr [RCX + 0xc],EDX\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2216
S'55\n41 57\n41 56\n41 55\n41 54\n53\n49 89 f0\n49 83 e0 fc\n49 01 f8\n44 8b 0a\n44 8b 52 04\n8b 6a 08\n8b 5a 0c\n48 89 f0\n48 c1 e8 20\n8b 4a 10\n01 f1\n89 4a 10\n83 d0 00\n48 89 54 24 d0\n01 42 14\n4c 39 c7\n0f 83 b8 06 00 00\n4c 89 44 24 d8\n0f 1f 80 00 00 00 00\n4c 89 54 24 e8\n48 89 6c 24 f0\n48 89 5c 24 f8\n44 89 4c 24 bc\n89 e8\n31 d8\n44 21 d0\n31 d8\n8b 0f\n48 89 4c 24 c0\n44 01 c8\n44 8b 6f 04\n8d 94 01 78 a4 6a d7\nc1 c2 07\n44 89 d0\n44 01 d2\n31 e8\n21 d0\n42 8d 0c 2b\n4c 89 6c 24 c8\n31 e8\n8d 9c 08 56 b7 c7 e8\nc1 c3 0c\n89 d0\n44 31 d0\n01 d3\n21 d8\n8b 4f 08\n48 89 4c 24 90\n8d 4c 0d 00\n44 31 d0\n8d ac 08 db 70 20 24\nc1 c5 11\n89 d8\n31 d0\n01 dd\n21 e8\n8b 4f 0c\n48 89 4c 24 e0\n41 8d 0c 0a\n31 d0\n8d b4 08 ee ce bd c1\nc1 c6 16\n89 e8\n31 d8\n01 ee\n21 f0\n8b 4f 10\n01 ca\n41 89 cb\n31 d8\n8d 84 10 af 0f 7c f5\nc1 c0 07\n89 f1\n31 e9\n01 f0\n21 c1\n8b 57 14\n89 54 24 80\n01 d3\n31 e9\n8d 9c 19 2a c6 87 47\nc1 c3 0c\n89 c1\n31 f1\n01 c3\n21 d9\n44 8b 47 18\n44 01 c5\n44 89 44 24 b8\n31 f1\n8d ac 29 13 46 30 a8\nc1 c5 11\n89 d9\n31 c1\n01 dd\n21 e9\n8b 57 1c\n89 54 24 b4\n01 d6\n31 c1\n8d 8c 31 01 95 46 fd\nc1 c1 16\n89 ea\n31 da\n01 e9\n21 ca\n8b 77 20\n89 74 24 84\n01 f0\n31 da\n8d 84 02 d8 98 80 69\nc1 c0 07\n89 ca\n31 ea\n01 c8\n21 c2\n44 8b 4f 24\n44 01 cb\n44 89 4c 24 8c\n31 ea\n8d 9c 1a af f7 44 8b\nc1 c3 0c\n89 c2\n31 ca\n01 c3\n21 da\n44 8b 67 28\n44 01 e5\n44 89 64 24 a4\n31 ca\n8d ac 2a b1 5b ff ff\nc1 c5 11\n89 da\n31 c2\n01 dd\n21 ea\n44 8b 77 2c\n44 01 f1\n44 89 74 24 88\n31 c2\n8d 8c 0a be d7 5c 89\nc1 c1 16\n89 ea\n31 da\n01 e9\n21 ca\n8b 77 30\n89 74 24 a8\n01 f0\n31 da\n8d 84 02 22 11 90 6b\nc1 c0 07\n89 ca\n31 ea\n01 c8\n21 c2\n8b 77 34\n89 74 24 a0\n01 f3\n31 ea\n8d 9c 1a 93 71 98 fd\nc1 c3 0c\n89 c2\n31 ca\n01 c3\n21 da\n44 8b 7f 38\n44 01 fd\n31 ca\n8d ac 2a 8e 43 79 a6\nc1 c5 11\n89 da\n31 c2\n01 dd\n21 ea\n8b 77 3c\n01 f1\n89 74 24 b0\n31 c2\n8d 8c 0a 21 08 b4 49\nc1 c1 16\n01 e9\n89 ca\n31 ea\n21 da\n31 ea\n44 01 e8\n8d 84 02 62 25 1e f6\nc1 c0 05\n01 c8\n89 c2\n31 ca\n21 ea\n31 ca\n44 01 c3\n8d 9c 1a 40 b3 40 c0\nc1 c3 09\n01 c3\n89 da\n31 c2\n21 ca\n31 c2\n44 01 f5\n8d ac 2a 51 5a 5e 26\nc1 c5 0e\n01 dd\n89 ea\n31 da\n21 c2\n03 4c 24 c0\n31 da\n8d 8c 0a aa c7 b6 e9\nc1 c1 14\n01 e9\n89 ca\n31 ea\n21 da\n31 ea\n44 8b 54 24 80\n44 01 d0\n8d 84 02 5d 10 2f d6\nc1 c0 05\n01 c8\n89 c2\n31 ca\n21 ea\n31 ca\n44 01 e3\n8d 9c 1a 53 14 44 02\nc1 c3 09\n01 c3\n89 da\n31 c2\n21 ca\n31 c2\n01 f5\n8d ac 2a 81 e6 a1 d8\nc1 c5 0e\n01 dd\n89 ea\n31 da\n21 c2\n45 89 d8\n44 89 44 24 ac\n44 01 c1\n31 da\n8d 8c 0a c8 fb d3 e7\nc1 c1 14\n01 e9\n89 ca\n31 ea\n21 da\n31 ea\n44 01 c8\n8d 84 02 e6 cd e1 21\nc1 c0 05\n01 c8\n89 c2\n31 ca\n21 ea\n31 ca\n45 89 fb\n44 89 5c 24 9c\n44 01 db\n8d 9c 1a d6 07 37 c3\nc1 c3 09\n01 c3\n89 da\n31 c2\n21 ca\n31 c2\n4c 8b 74 24 e0\n44 01 f5\n8d ac 2a 87 0d d5 f4\nc1 c5 0e\n01 dd\n89 ea\n31 da\n21 c2\n44 8b 7c 24 84\n44 01 f9\n31 da\n8d 8c 0a ed 14 5a 45\nc1 c1 14\n01 e9\n89 ca\n31 ea\n21 da\n31 ea\n44 8b 4c 24 a0\n44 01 c8\n8d 84 02 05 e9 e3 a9\nc1 c0 05\n01 c8\n89 c2\n31 ca\n21 ea\n31 ca\n03 5c 24 90\n8d 9c 1a f8 a3 ef fc\nc1 c3 09\n01 c3\n89 da\n31 c2\n21 ca\n31 c2\n44 8b 64 24 b4\n44 01 e5\n8d ac 2a d9 02 6f 67\nc1 c5 0e\n01 dd\n89 ee\n31 de\n89 f2\n21 c2\n44 8b 6c 24 a8\n44 01 e9\n31 da\n8d 94 0a 8a 4c 2a 8d\nc1 c2 14\n01 ea\n31 d6\n44 01 d0\n8d 84 06 42 39 fa ff\nc1 c0 04\n01 d0\n89 d1\n31 e9\n31 c1\n44 01 fb\n8d 8c 19 81 f6 71 87\nc1 c1 0b\n01 c1\n89 c6\n31 d6\n31 ce\n03 6c 24 88\n8d 9c 2e 22 61 9d 6d\nc1 c3 10\n01 cb\n89 ce\n31 c6\n31 de\n44 01 da\n8d ac 16 0c 38 e5 fd\nc1 c5 17\n01 dd\n89 da\n31 ca\n31 ea\n03 44 24 c8\n8d 84 02 44 ea be a4\nc1 c0 04\n01 e8\n89 ea\n31 da\n31 c2\n44 01 c1\n8d 8c 0a a9 cf de 4b\nc1 c1 0b\n01 c1\n89 c2\n31 ea\n31 ca\n44 01 e3\n45 89 e2\n8d 9c 1a 60 4b bb f6\nc1 c3 10\n01 cb\n89 ca\n31 c2\n31 da\n44 8b 44 24 a4\n44 01 c5\n8d ac 2a 70 bc bf be\nc1 c5 17\n01 dd\n89 da\n31 ca\n31 ea\n44 01 c8\n8d 84 02 c6 7e 9b 28\nc1 c0 04\n01 e8\n89 ea\n31 da\n31 c2\n4c 8b 7c 24 c0\n44 01 f9\n8d 8c 0a fa 27 a1 ea\nc1 c1 0b\n01 c1\n89 c2\n31 ea\n31 ca\n44 01 f3\n8d 94 1a 85 30 ef d4\nc1 c2 10\n01 ca\n89 ce\n31 c6\n31 d6\n44 8b 64 24 b8\n44 01 e5\n8d b4 2e 05 1d 88 04\nc1 c6 17\n01 d6\n89 d3\n31 cb\n31 f3\n03 44 24 8c\n8d 9c 03 39 d0 d4 d9\nc1 c3 04\n01 f3\n89 f0\n31 d0\n31 d8\n44 01 e9\n8d 8c 08 e5 99 db e6\nc1 c1 0b\n01 d9\n89 d8\n31 f0\n31 c8\n44 8b 5c 24 b0\n44 01 da\n8d ac 10 f8 7c a2 1f\nc1 c5 10\n01 cd\n89 c8\n31 d8\n31 e8\n03 74 24 90\n8d 84 30 65 56 ac c4\n44 01 fb\n89 ca\n44 01 d1\nc1 c0 17\n01 e8\nf7 d2\n09 c2\n31 ea\n8d 9c 1a 44 22 29 f4\nc1 c3 06\n01 c3\n89 ea\nf7 d2\n09 da\n31 c2\n8d 8c 0a 97 ff 2a 43\n03 6c 24 9c\nc1 c1 0a\n01 d9\n89 c2\nf7 d2\n09 ca\n31 da\n8d ac 2a a7 23 94 ab\n03 44 24 80\nc1 c5 0f\n01 cd\n89 da\nf7 d2\n09 ea\n31 ca\n8d 84 02 39 a0 93 fc\n44 01 eb\n89 ca\n44 01 f1\nc1 c0 15\n01 e8\nf7 d2\n09 c2\n31 ea\n8d b4 1a c3 59 5b 65\nc1 c6 06\n01 c6\n89 ea\nf7 d2\n09 f2\n31 c2\n8d 94 0a 92 cc 0c 8f\n44 01 c5\n4c 8b 44 24 d8\nc1 c2 0a\n01 f2\n89 c1\nf7 d1\n09 d1\n31 f1\n8d ac 29 7d f4 ef ff\nc1 c5 0f\n03 44 24 c8\n89 f1\n01 d5\nf7 d1\n09 e9\n31 d1\n8d 84 01 d1 5d 84 85\nc1 c0 15\n03 74 24 84\n89 d1\nf7 d1\n01 e8\n09 c1\n31 e9\n8d 9c 31 4f 7e a8 6f\nc1 c3 06\n01 c3\n44 01 da\n89 ee\nf7 d6\n09 de\n31 c6\n8d 94 16 e0 e6 2c fe\nc1 c2 0a\n01 da\n44 01 e5\n89 c6\nf7 d6\n09 d6\n31 de\n8d b4 2e 14 43 01 a3\nc1 c6 0f\n44 01 c8\n4c 8b 54 24 e8\n44 8b 4c 24 bc\n89 d9\n01 d6\nf7 d1\n09 f1\n31 d1\n8d ac 01 a1 11 08 4e\nc1 c5 15\n03 5c 24 ac\n89 d0\nf7 d0\n01 f5\n09 e8\n31 f0\n8d 8c 18 82 7e 53 f7\nc1 c1 06\n01 e9\n03 54 24 88\n89 f0\nf7 d0\n09 c8\n31 e8\n8d 94 10 35 f2 3a bd\nc1 c2 0a\n01 ca\n03 74 24 90\n89 e8\nf7 d0\n09 d0\n31 c8\n8d 84 30 bb d2 d7 2a\n03 6c 24 8c\nc1 c0 0f\n01 d0\n41 01 c9\nf7 d1\n09 c1\n31 d1\n8d 8c 29 91 d3 86 eb\nc1 c1 15\n41 01 c2\n41 01 ca\n03 44 24 f0\n03 54 24 f8\n48 83 c7 40\n89 c5\n89 d3\n4c 39 c7\n0f 82 56 f9 ff ff\neb 04\n89 da\n89 e8\n48 8b 4c 24 d0\n44 89 09\n44 89 51 04\n89 41 08\n89 51 0c\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2217
S'.text:000000000040a1f0\n.text:000000000040a1f1\n.text:000000000040a1f3\n.text:000000000040a1f5\n.text:000000000040a1f7\n.text:000000000040a1f9\n.text:000000000040a1fa\n.text:000000000040a1fd\n.text:000000000040a201\n.text:000000000040a204\n.text:000000000040a207\n.text:000000000040a20b\n.text:000000000040a20e\n.text:000000000040a211\n.text:000000000040a214\n.text:000000000040a218\n.text:000000000040a21b\n.text:000000000040a21d\n.text:000000000040a220\n.text:000000000040a223\n.text:000000000040a228\n.text:000000000040a22b\n.text:000000000040a22e\n.text:000000000040a234\n.text:000000000040a239\n.text:000000000040a240\n.text:000000000040a245\n.text:000000000040a24a\n.text:000000000040a24f\n.text:000000000040a254\n.text:000000000040a256\n.text:000000000040a258\n.text:000000000040a25b\n.text:000000000040a25d\n.text:000000000040a25f\n.text:000000000040a264\n.text:000000000040a267\n.text:000000000040a26b\n.text:000000000040a272\n.text:000000000040a275\n.text:000000000040a278\n.text:000000000040a27b\n.text:000000000040a27d\n.text:000000000040a27f\n.text:000000000040a283\n.text:000000000040a288\n.text:000000000040a28a\n.text:000000000040a291\n.text:000000000040a294\n.text:000000000040a296\n.text:000000000040a299\n.text:000000000040a29b\n.text:000000000040a29d\n.text:000000000040a2a0\n.text:000000000040a2a5\n.text:000000000040a2a9\n.text:000000000040a2ac\n.text:000000000040a2b3\n.text:000000000040a2b6\n.text:000000000040a2b8\n.text:000000000040a2ba\n.text:000000000040a2bc\n.text:000000000040a2be\n.text:000000000040a2c1\n.text:000000000040a2c6\n.text:000000000040a2ca\n.text:000000000040a2cc\n.text:000000000040a2d3\n.text:000000000040a2d6\n.text:000000000040a2d8\n.text:000000000040a2da\n.text:000000000040a2dc\n.text:000000000040a2de\n.text:000000000040a2e1\n.text:000000000040a2e3\n.text:000000000040a2e6\n.text:000000000040a2e8\n.text:000000000040a2ef\n.text:000000000040a2f2\n.text:000000000040a2f4\n.text:000000000040a2f6\n.text:000000000040a2f8\n.text:000000000040a2fa\n.text:000000000040a2fd\n.text:000000000040a301\n.text:000000000040a303\n.text:000000000040a305\n.text:000000000040a30c\n.text:000000000040a30f\n.text:000000000040a311\n.text:000000000040a313\n.text:000000000040a315\n.text:000000000040a317\n.text:000000000040a31b\n.text:000000000040a31e\n.text:000000000040a323\n.text:000000000040a325\n.text:000000000040a32c\n.text:000000000040a32f\n.text:000000000040a331\n.text:000000000040a333\n.text:000000000040a335\n.text:000000000040a337\n.text:000000000040a33a\n.text:000000000040a33e\n.text:000000000040a340\n.text:000000000040a342\n.text:000000000040a349\n.text:000000000040a34c\n.text:000000000040a34e\n.text:000000000040a350\n.text:000000000040a352\n.text:000000000040a354\n.text:000000000040a357\n.text:000000000040a35b\n.text:000000000040a35d\n.text:000000000040a35f\n.text:000000000040a366\n.text:000000000040a369\n.text:000000000040a36b\n.text:000000000040a36d\n.text:000000000040a36f\n.text:000000000040a371\n.text:000000000040a375\n.text:000000000040a378\n.text:000000000040a37d\n.text:000000000040a37f\n.text:000000000040a386\n.text:000000000040a389\n.text:000000000040a38b\n.text:000000000040a38d\n.text:000000000040a38f\n.text:000000000040a391\n.text:000000000040a395\n.text:000000000040a398\n.text:000000000040a39d\n.text:000000000040a39f\n.text:000000000040a3a6\n.text:000000000040a3a9\n.text:000000000040a3ab\n.text:000000000040a3ad\n.text:000000000040a3af\n.text:000000000040a3b1\n.text:000000000040a3b5\n.text:000000000040a3b8\n.text:000000000040a3bd\n.text:000000000040a3bf\n.text:000000000040a3c6\n.text:000000000040a3c9\n.text:000000000040a3cb\n.text:000000000040a3cd\n.text:000000000040a3cf\n.text:000000000040a3d1\n.text:000000000040a3d4\n.text:000000000040a3d8\n.text:000000000040a3da\n.text:000000000040a3dc\n.text:000000000040a3e3\n.text:000000000040a3e6\n.text:000000000040a3e8\n.text:000000000040a3ea\n.text:000000000040a3ec\n.text:000000000040a3ee\n.text:000000000040a3f1\n.text:000000000040a3f5\n.text:000000000040a3f7\n.text:000000000040a3f9\n.text:000000000040a400\n.text:000000000040a403\n.text:000000000040a405\n.text:000000000040a407\n.text:000000000040a409\n.text:000000000040a40b\n.text:000000000040a40f\n.text:000000000040a412\n.text:000000000040a414\n.text:000000000040a41b\n.text:000000000040a41e\n.text:000000000040a420\n.text:000000000040a422\n.text:000000000040a424\n.text:000000000040a426\n.text:000000000040a429\n.text:000000000040a42b\n.text:000000000040a42f\n.text:000000000040a431\n.text:000000000040a438\n.text:000000000040a43b\n.text:000000000040a43d\n.text:000000000040a43f\n.text:000000000040a441\n.text:000000000040a443\n.text:000000000040a445\n.text:000000000040a448\n.text:000000000040a44f\n.text:000000000040a452\n.text:000000000040a454\n.text:000000000040a456\n.text:000000000040a458\n.text:000000000040a45a\n.text:000000000040a45c\n.text:000000000040a45f\n.text:000000000040a466\n.text:000000000040a469\n.text:000000000040a46b\n.text:000000000040a46d\n.text:000000000040a46f\n.text:000000000040a471\n.text:000000000040a473\n.text:000000000040a476\n.text:000000000040a47d\n.text:000000000040a480\n.text:000000000040a482\n.text:000000000040a484\n.text:000000000040a486\n.text:000000000040a488\n.text:000000000040a48c\n.text:000000000040a48e\n.text:000000000040a495\n.text:000000000040a498\n.text:000000000040a49a\n.text:000000000040a49c\n.text:000000000040a49e\n.text:000000000040a4a0\n.text:000000000040a4a2\n.text:000000000040a4a7\n.text:000000000040a4aa\n.text:000000000040a4b1\n.text:000000000040a4b4\n.text:000000000040a4b6\n.text:000000000040a4b8\n.text:000000000040a4ba\n.text:000000000040a4bc\n.text:000000000040a4be\n.text:000000000040a4c1\n.text:000000000040a4c8\n.text:000000000040a4cb\n.text:000000000040a4cd\n.text:000000000040a4cf\n.text:000000000040a4d1\n.text:000000000040a4d3\n.text:000000000040a4d5\n.text:000000000040a4d7\n.text:000000000040a4de\n.text:000000000040a4e1\n.text:000000000040a4e3\n.text:000000000040a4e5\n.text:000000000040a4e7\n.text:000000000040a4e9\n.text:000000000040a4ec\n.text:000000000040a4f1\n.text:000000000040a4f4\n.text:000000000040a4f6\n.text:000000000040a4fd\n.text:000000000040a500\n.text:000000000040a502\n.text:000000000040a504\n.text:000000000040a506\n.text:000000000040a508\n.text:000000000040a50a\n.text:000000000040a50d\n.text:000000000040a514\n.text:000000000040a517\n.text:000000000040a519\n.text:000000000040a51b\n.text:000000000040a51d\n.text:000000000040a51f\n.text:000000000040a521\n.text:000000000040a524\n.text:000000000040a529\n.text:000000000040a52c\n.text:000000000040a533\n.text:000000000040a536\n.text:000000000040a538\n.text:000000000040a53a\n.text:000000000040a53c\n.text:000000000040a53e\n.text:000000000040a540\n.text:000000000040a545\n.text:000000000040a548\n.text:000000000040a54f\n.text:000000000040a552\n.text:000000000040a554\n.text:000000000040a556\n.text:000000000040a558\n.text:000000000040a55a\n.text:000000000040a55f\n.text:000000000040a562\n.text:000000000040a564\n.text:000000000040a56b\n.text:000000000040a56e\n.text:000000000040a570\n.text:000000000040a572\n.text:000000000040a574\n.text:000000000040a576\n.text:000000000040a578\n.text:000000000040a57d\n.text:000000000040a580\n.text:000000000040a587\n.text:000000000040a58a\n.text:000000000040a58c\n.text:000000000040a58e\n.text:000000000040a590\n.text:000000000040a592\n.text:000000000040a594\n.text:000000000040a598\n.text:000000000040a59f\n.text:000000000040a5a2\n.text:000000000040a5a4\n.text:000000000040a5a6\n.text:000000000040a5a8\n.text:000000000040a5aa\n.text:000000000040a5ac\n.text:000000000040a5b1\n.text:000000000040a5b4\n.text:000000000040a5bb\n.text:000000000040a5be\n.text:000000000040a5c0\n.text:000000000040a5c2\n.text:000000000040a5c4\n.text:000000000040a5c6\n.text:000000000040a5c8\n.text:000000000040a5cd\n.text:000000000040a5d0\n.text:000000000040a5d2\n.text:000000000040a5d9\n.text:000000000040a5dc\n.text:000000000040a5de\n.text:000000000040a5e0\n.text:000000000040a5e3\n.text:000000000040a5ea\n.text:000000000040a5ed\n.text:000000000040a5ef\n.text:000000000040a5f1\n.text:000000000040a5f3\n.text:000000000040a5f5\n.text:000000000040a5f8\n.text:000000000040a5ff\n.text:000000000040a602\n.text:000000000040a604\n.text:000000000040a606\n.text:000000000040a608\n.text:000000000040a60a\n.text:000000000040a60e\n.text:000000000040a615\n.text:000000000040a618\n.text:000000000040a61a\n.text:000000000040a61c\n.text:000000000040a61e\n.text:000000000040a620\n.text:000000000040a623\n.text:000000000040a62a\n.text:000000000040a62d\n.text:000000000040a62f\n.text:000000000040a631\n.text:000000000040a633\n.text:000000000040a635\n.text:000000000040a639\n.text:000000000040a640\n.text:000000000040a643\n.text:000000000040a645\n.text:000000000040a647\n.text:000000000040a649\n.text:000000000040a64b\n.text:000000000040a64e\n.text:000000000040a655\n.text:000000000040a658\n.text:000000000040a65a\n.text:000000000040a65c\n.text:000000000040a65e\n.text:000000000040a660\n.text:000000000040a663\n.text:000000000040a666\n.text:000000000040a66d\n.text:000000000040a670\n.text:000000000040a672\n.text:000000000040a674\n.text:000000000040a676\n.text:000000000040a678\n.text:000000000040a67d\n.text:000000000040a680\n.text:000000000040a687\n.text:000000000040a68a\n.text:000000000040a68c\n.text:000000000040a68e\n.text:000000000040a690\n.text:000000000040a692\n.text:000000000040a695\n.text:000000000040a69c\n.text:000000000040a69f\n.text:000000000040a6a1\n.text:000000000040a6a3\n.text:000000000040a6a5\n.text:000000000040a6a7\n.text:000000000040a6ac\n.text:000000000040a6af\n.text:000000000040a6b6\n.text:000000000040a6b9\n.text:000000000040a6bb\n.text:000000000040a6bd\n.text:000000000040a6bf\n.text:000000000040a6c1\n.text:000000000040a6c4\n.text:000000000040a6cb\n.text:000000000040a6ce\n.text:000000000040a6d0\n.text:000000000040a6d2\n.text:000000000040a6d4\n.text:000000000040a6d6\n.text:000000000040a6db\n.text:000000000040a6de\n.text:000000000040a6e5\n.text:000000000040a6e8\n.text:000000000040a6ea\n.text:000000000040a6ec\n.text:000000000040a6ee\n.text:000000000040a6f0\n.text:000000000040a6f4\n.text:000000000040a6fb\n.text:000000000040a6fe\n.text:000000000040a700\n.text:000000000040a702\n.text:000000000040a704\n.text:000000000040a706\n.text:000000000040a709\n.text:000000000040a710\n.text:000000000040a713\n.text:000000000040a715\n.text:000000000040a717\n.text:000000000040a719\n.text:000000000040a71b\n.text:000000000040a720\n.text:000000000040a723\n.text:000000000040a72a\n.text:000000000040a72d\n.text:000000000040a72f\n.text:000000000040a731\n.text:000000000040a733\n.text:000000000040a735\n.text:000000000040a739\n.text:000000000040a740\n.text:000000000040a743\n.text:000000000040a745\n.text:000000000040a748\n.text:000000000040a74b\n.text:000000000040a74d\n.text:000000000040a74f\n.text:000000000040a751\n.text:000000000040a753\n.text:000000000040a75a\n.text:000000000040a75d\n.text:000000000040a75f\n.text:000000000040a761\n.text:000000000040a763\n.text:000000000040a765\n.text:000000000040a767\n.text:000000000040a76e\n.text:000000000040a772\n.text:000000000040a775\n.text:000000000040a777\n.text:000000000040a779\n.text:000000000040a77b\n.text:000000000040a77d\n.text:000000000040a77f\n.text:000000000040a786\n.text:000000000040a78a\n.text:000000000040a78d\n.text:000000000040a78f\n.text:000000000040a791\n.text:000000000040a793\n.text:000000000040a795\n.text:000000000040a797\n.text:000000000040a79e\n.text:000000000040a7a1\n.text:000000000040a7a3\n.text:000000000040a7a6\n.text:000000000040a7a9\n.text:000000000040a7ab\n.text:000000000040a7ad\n.text:000000000040a7af\n.text:000000000040a7b1\n.text:000000000040a7b8\n.text:000000000040a7bb\n.text:000000000040a7bd\n.text:000000000040a7bf\n.text:000000000040a7c1\n.text:000000000040a7c3\n.text:000000000040a7c5\n.text:000000000040a7cc\n.text:000000000040a7cf\n.text:000000000040a7d4\n.text:000000000040a7d7\n.text:000000000040a7d9\n.text:000000000040a7db\n.text:000000000040a7dd\n.text:000000000040a7df\n.text:000000000040a7e1\n.text:000000000040a7e8\n.text:000000000040a7eb\n.text:000000000040a7ef\n.text:000000000040a7f1\n.text:000000000040a7f3\n.text:000000000040a7f5\n.text:000000000040a7f7\n.text:000000000040a7f9\n.text:000000000040a800\n.text:000000000040a803\n.text:000000000040a807\n.text:000000000040a809\n.text:000000000040a80b\n.text:000000000040a80d\n.text:000000000040a80f\n.text:000000000040a811\n.text:000000000040a818\n.text:000000000040a81b\n.text:000000000040a81d\n.text:000000000040a820\n.text:000000000040a822\n.text:000000000040a824\n.text:000000000040a826\n.text:000000000040a828\n.text:000000000040a82f\n.text:000000000040a832\n.text:000000000040a834\n.text:000000000040a837\n.text:000000000040a839\n.text:000000000040a83b\n.text:000000000040a83d\n.text:000000000040a83f\n.text:000000000040a846\n.text:000000000040a849\n.text:000000000040a84c\n.text:000000000040a851\n.text:000000000040a856\n.text:000000000040a858\n.text:000000000040a85a\n.text:000000000040a85c\n.text:000000000040a85e\n.text:000000000040a860\n.text:000000000040a867\n.text:000000000040a86a\n.text:000000000040a86e\n.text:000000000040a870\n.text:000000000040a872\n.text:000000000040a874\n.text:000000000040a876\n.text:000000000040a878\n.text:000000000040a87f\n.text:000000000040a882\n.text:000000000040a884\n.text:000000000040a888\n.text:000000000040a88a\n.text:000000000040a88c\n.text:000000000040a88e\n.text:000000000040a890\n.text:000000000040a897\n.text:000000000040a89a\n.text:000000000040a89c\n.text:000000000040a8a0\n.text:000000000040a8a2\n.text:000000000040a8a4\n.text:000000000040a8a6\n.text:000000000040a8a8\n.text:000000000040a8af\n.text:000000000040a8b3\n.text:000000000040a8b6\n.text:000000000040a8b8\n.text:000000000040a8bb\n.text:000000000040a8bd\n.text:000000000040a8bf\n.text:000000000040a8c1\n.text:000000000040a8c8\n.text:000000000040a8cb\n.text:000000000040a8ce\n.text:000000000040a8d1\n.text:000000000040a8d5\n.text:000000000040a8d9\n.text:000000000040a8dd\n.text:000000000040a8df\n.text:000000000040a8e1\n.text:000000000040a8e4\n.text:000000000040a8ea\n.text:000000000040a8ec\n.text:000000000040a8ee\n.text:000000000040a8f0\n.text:000000000040a8f5\n.text:000000000040a8f8\n.text:000000000040a8fc\n.text:000000000040a8ff\n.text:000000000040a902\n.text:000000000040a903\n.text:000000000040a905\n.text:000000000040a907\n.text:000000000040a909\n.text:000000000040a90b\n.text:000000000040a90c\n'
p2218
tp2219
sS'quotearg_alloc'
p2220
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p2221
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p2222
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x0040d830\n'
p2223
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p2224
S'.text:000000000040d820\n.text:000000000040d823\n.text:000000000040d825\n.text:000000000040d828\n'
p2225
tp2226
sS'execlp'
p2227
(S'\n__stdcall execlp(char * __file, char * __arg)\n'
p2228
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint execlp(char *__file,char *__arg,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_execlp_0061a390)();\u000a  return iVar1;\u000a}\u000a\u000a
p2229
S'JMP qword ptr [0x0061a390]\n'
p2230
S'ff 25 ca 78 21 00\n'
p2231
S'.plt:0000000000402ac0\n'
p2232
tp2233
sS'sigismember'
p2234
(S'\n__stdcall sigismember(sigset_t * __set, int __signo)\n'
p2235
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigismember(sigset_t *__set,int __signo)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigismember_0061a350)();\u000a  return iVar1;\u000a}\u000a\u000a
p2236
S'JMP qword ptr [0x0061a350]\n'
p2237
S'ff 25 0a 79 21 00\n'
p2238
S'.plt:0000000000402a40\n'
p2239
tp2240
sS'check_tuning'
p2241
(S'\n__stdcall check_tuning(Hash_table * table)\n'
p2242
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000a_Bool check_tuning(Hash_table *table)\u000a\u000a{\u000a  float fVar1;\u000a  Hash_tuning *pHVar2;\u000a  undefined uVar3;\u000a  float fVar4;\u000a  \u000a  pHVar2 = table->tuning;\u000a  uVar3 = 1;\u000a  if ((pHVar2 != &default_tuning) &&\u000a     ((((fVar1 = pHVar2->growth_threshold, fVar1 <= _DAT_0041414c || (DAT_00414150 <= fVar1)) ||\u000a       (pHVar2->growth_factor <= _DAT_00414154)) ||\u000a      (((pHVar2->shrink_threshold < 0.00000000 ||\u000a        (fVar4 = pHVar2->shrink_threshold + _DAT_0041414c, fVar1 <= fVar4)) ||\u000a       ((DAT_00414158 < pHVar2->shrink_factor || (pHVar2->shrink_factor <= fVar4)))))))) {\u000a    table->tuning = &default_tuning;\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p2243
S'MOV RCX,qword ptr [RDI + 0x28]\nMOV EDX,0x4141d0\nMOV AL,0x1\nCMP RCX,RDX\nJZ 0x0040b6e3\nMOVSS XMM0,dword ptr [RCX + 0x8]\nUCOMISS XMM0,dword ptr [0x0041414c]\nJBE 0x0040b6d9\nMOVSS XMM1,dword ptr [0x00414150]\nUCOMISS XMM1,XMM0\nJBE 0x0040b6d9\nMOVSS XMM1,dword ptr [RCX + 0xc]\nUCOMISS XMM1,dword ptr [0x00414154]\nJBE 0x0040b6d9\nMOVSS XMM1,dword ptr [RCX]\nXORPS XMM2,XMM2\nUCOMISS XMM1,XMM2\nJC 0x0040b6d9\nADDSS XMM1,dword ptr [0x0041414c]\nUCOMISS XMM0,XMM1\nJBE 0x0040b6d9\nMOVSS XMM0,dword ptr [RCX + 0x4]\nMOVSS XMM2,dword ptr [0x00414158]\nUCOMISS XMM2,XMM0\nJC 0x0040b6d9\nUCOMISS XMM0,XMM1\nJA 0x0040b6e3\nMOV qword ptr [RDI + 0x28],0x4141d0\nXOR EAX,EAX\nRET\n'
p2244
S'48 8b 4f 28\nba d0 41 41 00\nb0 01\n48 39 d1\n74 63\nf3 0f 10 41 08\n0f 2e 05 c0 8a 00 00\n76 4b\nf3 0f 10 0d ba 8a 00 00\n0f 2e c8\n76 3e\nf3 0f 10 49 0c\n0f 2e 0d ad 8a 00 00\n76 30\nf3 0f 10 09\n0f 57 d2\n0f 2e ca\n72 24\nf3 0f 58 0d 8f 8a 00 00\n0f 2e c1\n76 17\nf3 0f 10 41 04\nf3 0f 10 15 89 8a 00 00\n0f 2e d0\n72 05\n0f 2e c1\n77 0a\n48 c7 47 28 d0 41 41 00\n31 c0\nc3\n'
p2245
S'.text:000000000040b670\n.text:000000000040b674\n.text:000000000040b679\n.text:000000000040b67b\n.text:000000000040b67e\n.text:000000000040b680\n.text:000000000040b685\n.text:000000000040b68c\n.text:000000000040b68e\n.text:000000000040b696\n.text:000000000040b699\n.text:000000000040b69b\n.text:000000000040b6a0\n.text:000000000040b6a7\n.text:000000000040b6a9\n.text:000000000040b6ad\n.text:000000000040b6b0\n.text:000000000040b6b3\n.text:000000000040b6b5\n.text:000000000040b6bd\n.text:000000000040b6c0\n.text:000000000040b6c2\n.text:000000000040b6c7\n.text:000000000040b6cf\n.text:000000000040b6d2\n.text:000000000040b6d4\n.text:000000000040b6d7\n.text:000000000040b6d9\n.text:000000000040b6e1\n.text:000000000040b6e3\n'
p2246
tp2247
sS'pthread_join'
p2248
(S'\n__stdcall pthread_join(pthread_t __th, void * * __thread_return)\n'
p2249
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint pthread_join(pthread_t __th,void **__thread_return)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_pthread_join_0061a318)();\u000a  return iVar1;\u000a}\u000a\u000a
p2250
S'JMP qword ptr [0x0061a318]\n'
p2251
S'ff 25 42 79 21 00\n'
p2252
S'.plt:00000000004029d0\n'
p2253
tp2254
sS'fflush_unlocked'
p2255
(S'\n__stdcall fflush_unlocked(FILE * __stream)\n'
p2256
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fflush_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fflush_unlocked_0061a380)();\u000a  return iVar1;\u000a}\u000a\u000a
p2257
S'JMP qword ptr [0x0061a380]\n'
p2258
S'ff 25 da 78 21 00\n'
p2259
S'.plt:0000000000402aa0\n'
p2260
tp2261
sS'argmatch_to_argument'
p2262
(S'\n__stdcall argmatch_to_argument(char * value, char * * arglist, char * vallist, size_t valsize)\n'
p2263
V\u000achar * argmatch_to_argument(char *value,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = *arglist;\u000a  if (pcVar2 != (char *)0x0) {\u000a    arglist = arglist + 1;\u000a    do {\u000a      iVar1 = memcmp(value,vallist,valsize);\u000a      if (iVar1 == 0) {\u000a        return pcVar2;\u000a      }\u000a      pcVar2 = *arglist;\u000a      arglist = arglist + 1;\u000a      vallist = vallist + valsize;\u000a    } while (pcVar2 != (char *)0x0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p2264
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R13,RDI\nMOV R15,qword ptr [RBX]\nTEST R15,R15\nJZ 0x00409fc1\nADD RBX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00402710\nTEST EAX,EAX\nJZ 0x00409fc4\nMOV R15,qword ptr [RBX]\nADD RBX,0x8\nADD R12,R14\nTEST R15,R15\nJNZ 0x00409fa0\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p2265
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 fd\n4c 8b 3b\n4d 85 ff\n74 34\n48 83 c3 08\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\n4c 89 e6\n4c 89 f2\ne8 62 87 ff ff\n85 c0\n74 12\n4c 8b 3b\n48 83 c3 08\n4d 01 f4\n4d 85 ff\n75 df\n45 31 ff\n4c 89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p2266
S'.text:0000000000409f70\n.text:0000000000409f72\n.text:0000000000409f74\n.text:0000000000409f76\n.text:0000000000409f78\n.text:0000000000409f79\n.text:0000000000409f7c\n.text:0000000000409f7f\n.text:0000000000409f82\n.text:0000000000409f85\n.text:0000000000409f88\n.text:0000000000409f8b\n.text:0000000000409f8d\n.text:0000000000409f91\n.text:0000000000409fa0\n.text:0000000000409fa3\n.text:0000000000409fa6\n.text:0000000000409fa9\n.text:0000000000409fae\n.text:0000000000409fb0\n.text:0000000000409fb2\n.text:0000000000409fb5\n.text:0000000000409fb9\n.text:0000000000409fbc\n.text:0000000000409fbf\n.text:0000000000409fc1\n.text:0000000000409fc4\n.text:0000000000409fc7\n.text:0000000000409fc8\n.text:0000000000409fca\n.text:0000000000409fcc\n.text:0000000000409fce\n.text:0000000000409fd0\n'
p2267
tp2268
sS'readtokens0'
p2269
(S'\n__stdcall readtokens0(FILE * in, Tokens * t)\n'
p2270
V\u000a_Bool readtokens0(FILE *in,Tokens *t)\u000a\u000a{\u000a  uint *puVar1;\u000a  char *pcVar2;\u000a  char **ppcVar3;\u000a  ulong uVar4;\u000a  _obstack_chunk *p_Var5;\u000a  size_t *psVar6;\u000a  size_t *psVar7;\u000a  int iVar8;\u000a  char **ppcVar9;\u000a  char *pcVar10;\u000a  \u000a  iVar8 = fgetc((FILE *)in);\u000a  if (iVar8 != -1) {\u000a    do {\u000a      if ((t->o_data).chunk_limit == (t->o_data).next_free) {\u000a        _obstack_newchunk(&t->o_data,1);\u000a      }\u000a      pcVar2 = (t->o_data).next_free;\u000a      (t->o_data).next_free = pcVar2 + 1;\u000a      *pcVar2 = (char)iVar8;\u000a      if (iVar8 == 0) {\u000a        save_token(t);\u000a      }\u000a      iVar8 = fgetc((FILE *)in);\u000a    } while (iVar8 != -1);\u000a  }\u000a  pcVar2 = (t->o_data).next_free;\u000a  if (pcVar2 != (t->o_data).object_base) {\u000a    if ((t->o_data).chunk_limit == pcVar2) {\u000a      _obstack_newchunk(&t->o_data,1);\u000a    }\u000a    pcVar2 = (t->o_data).next_free;\u000a    (t->o_data).next_free = pcVar2 + 1;\u000a    *pcVar2 = 0;\u000a    save_token(t);\u000a  }\u000a  if ((t->o_tok).chunk_limit + -(long)(t->o_tok).next_free < &DAT_00000008) {\u000a    _obstack_newchunk(&t->o_tok,8);\u000a  }\u000a  *(undefined8 *)(t->o_tok).next_free = 0;\u000a  ppcVar9 = (char **)((t->o_tok).next_free + 8);\u000a  *(char ***)&(t->o_tok).next_free = ppcVar9;\u000a  ppcVar3 = (char **)(t->o_tok).object_base;\u000a  if (ppcVar9 == ppcVar3) {\u000a    puVar1 = &(t->o_tok).use_extra_arg_bitfield;\u000a    *(byte *)puVar1 = *(byte *)puVar1 | 2;\u000a  }\u000a  uVar4 = (t->o_tok).alignment_mask;\u000a  pcVar10 = (char *)(~uVar4 & (ulong)((t->o_tok).next_free + uVar4));\u000a  (t->o_tok).next_free = pcVar10;\u000a  p_Var5 = (t->o_tok).chunk;\u000a  pcVar2 = (t->o_tok).chunk_limit;\u000a  if (pcVar2 + -(long)p_Var5 < pcVar10 + -(long)p_Var5) {\u000a    (t->o_tok).next_free = pcVar2;\u000a  }\u000a  (t->o_tok).object_base = (t->o_tok).next_free;\u000a  t->tok = ppcVar3;\u000a  psVar6 = (size_t *)(t->o_tok_len).object_base;\u000a  psVar7 = (size_t *)(t->o_tok_len).next_free;\u000a  if (psVar7 == psVar6) {\u000a    puVar1 = &(t->o_tok_len).use_extra_arg_bitfield;\u000a    *(byte *)puVar1 = *(byte *)puVar1 | 2;\u000a  }\u000a  uVar4 = (t->o_tok_len).alignment_mask;\u000a  pcVar10 = (char *)(~uVar4 & (long)psVar7 + uVar4);\u000a  (t->o_tok_len).next_free = pcVar10;\u000a  p_Var5 = (t->o_tok_len).chunk;\u000a  pcVar2 = (t->o_tok_len).chunk_limit;\u000a  if (pcVar2 + -(long)p_Var5 < pcVar10 + -(long)p_Var5) {\u000a    (t->o_tok_len).next_free = pcVar2;\u000a  }\u000a  (t->o_tok_len).object_base = (t->o_tok_len).next_free;\u000a  t->tok_len = psVar6;\u000a  iVar8 = ferror((FILE *)in);\u000a  return (_Bool)(iVar8 == 0);\u000a}\u000a\u000a
p2271
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x004026b0\nMOV EBP,EAX\nCMP EBP,-0x1\nJZ 0x0040ef61\nLEA R15,[RBX + 0x18]\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [RBX + 0x38]\nCMP RAX,qword ptr [RBX + 0x30]\nJNZ 0x0040ef37\nMOV ESI,0x1\nMOV RDI,R15\nCALL 0x00410a60\nMOV RAX,qword ptr [RBX + 0x30]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RBX + 0x30],RCX\nMOV byte ptr [RAX],BPL\nTEST EBP,EBP\nJNZ 0x0040ef52\nMOV RDI,RBX\nCALL 0x0040f0c0\nMOV RDI,R14\nCALL 0x004026b0\nMOV EBP,EAX\nCMP EBP,-0x1\nJNZ 0x0040ef20\nMOV RAX,qword ptr [RBX + 0x30]\nCMP RAX,qword ptr [RBX + 0x28]\nJZ 0x0040ef96\nCMP qword ptr [RBX + 0x38],RAX\nJNZ 0x0040ef7f\nLEA RDI,[RBX + 0x18]\nMOV ESI,0x1\nCALL 0x00410a60\nMOV RAX,qword ptr [RBX + 0x30]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RBX + 0x30],RCX\nMOV byte ptr [RAX],0x0\nMOV RDI,RBX\nCALL 0x0040f0c0\nMOV RAX,qword ptr [0x90 + RBX]\nSUB RAX,qword ptr [0x88 + RBX]\nCMP RAX,0x7\nJA 0x0040efb8\nLEA RDI,[RBX + 0x70]\nMOV ESI,0x8\nCALL 0x00410a60\nMOV RAX,qword ptr [0x88 + RBX]\nMOV qword ptr [RAX],0x0\nMOV RCX,qword ptr [0x88 + RBX]\nADD RCX,0x8\nMOV qword ptr [0x88 + RBX],RCX\nMOV RAX,qword ptr [0x80 + RBX]\nCMP RCX,RAX\nJNZ 0x0040efeb\nOR byte ptr [0xc0 + RBX],0x2\nMOV RDX,qword ptr [0xa0 + RBX]\nMOV RCX,qword ptr [0x88 + RBX]\nADD RCX,RDX\nNOT RDX\nAND RDX,RCX\nMOV qword ptr [0x88 + RBX],RDX\nMOV RSI,qword ptr [RBX + 0x78]\nMOV RCX,qword ptr [0x90 + RBX]\nSUB RDX,RSI\nMOV RDI,RCX\nSUB RDI,RSI\nCMP RDX,RDI\nJBE 0x0040f029\nMOV qword ptr [0x88 + RBX],RCX\nMOV RCX,qword ptr [0x88 + RBX]\nMOV qword ptr [0x80 + RBX],RCX\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [0xd8 + RBX]\nMOV RCX,qword ptr [0xe0 + RBX]\nCMP RCX,RAX\nJNZ 0x0040f055\nOR byte ptr [0x118 + RBX],0x2\nMOV RDX,qword ptr [0xf8 + RBX]\nADD RCX,RDX\nNOT RDX\nAND RDX,RCX\nMOV qword ptr [0xe0 + RBX],RDX\nMOV RSI,qword ptr [0xd0 + RBX]\nMOV RCX,qword ptr [0xe8 + RBX]\nSUB RDX,RSI\nMOV RDI,RCX\nSUB RDI,RSI\nCMP RDX,RDI\nJBE 0x0040f08f\nMOV qword ptr [0xe0 + RBX],RCX\nMOV RCX,qword ptr [0xe0 + RBX]\nMOV qword ptr [0xd8 + RBX],RCX\nMOV qword ptr [RBX + 0x10],RAX\nMOV RDI,R14\nCALL 0x004024a0\nTEST EAX,EAX\nSETZ AL\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2272
S'55\n41 57\n41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 9e 37 ff ff\n89 c5\n83 fd ff\n74 48\n4c 8d 7b 18\n0f 1f 00\n48 8b 43 38\n48 3b 43 30\n75 0d\nbe 01 00 00 00\n4c 89 ff\ne8 29 1b 00 00\n48 8b 43 30\n48 8d 48 01\n48 89 4b 30\n40 88 28\n85 ed\n75 08\n48 89 df\ne8 6e 01 00 00\n4c 89 f7\ne8 56 37 ff ff\n89 c5\n83 fd ff\n75 bf\n48 8b 43 30\n48 3b 43 28\n74 2b\n48 39 43 38\n75 0e\n48 8d 7b 18\nbe 01 00 00 00\ne8 e1 1a 00 00\n48 8b 43 30\n48 8d 48 01\n48 89 4b 30\nc6 00 00\n48 89 df\ne8 2a 01 00 00\n48 8b 83 90 00 00 00\n48 2b 83 88 00 00 00\n48 83 f8 07\n77 0e\n48 8d 7b 70\nbe 08 00 00 00\ne8 a8 1a 00 00\n48 8b 83 88 00 00 00\n48 c7 00 00 00 00 00\n48 8b 8b 88 00 00 00\n48 83 c1 08\n48 89 8b 88 00 00 00\n48 8b 83 80 00 00 00\n48 39 c1\n75 07\n80 8b c0 00 00 00 02\n48 8b 93 a0 00 00 00\n48 8b 8b 88 00 00 00\n48 01 d1\n48 f7 d2\n48 21 ca\n48 89 93 88 00 00 00\n48 8b 73 78\n48 8b 8b 90 00 00 00\n48 29 f2\n48 89 cf\n48 29 f7\n48 39 fa\n76 07\n48 89 8b 88 00 00 00\n48 8b 8b 88 00 00 00\n48 89 8b 80 00 00 00\n48 89 43 08\n48 8b 83 d8 00 00 00\n48 8b 8b e0 00 00 00\n48 39 c1\n75 07\n80 8b 18 01 00 00 02\n48 8b 93 f8 00 00 00\n48 01 d1\n48 f7 d2\n48 21 ca\n48 89 93 e0 00 00 00\n48 8b b3 d0 00 00 00\n48 8b 8b e8 00 00 00\n48 29 f2\n48 89 cf\n48 29 f7\n48 39 fa\n76 07\n48 89 8b e0 00 00 00\n48 8b 8b e0 00 00 00\n48 89 8b d8 00 00 00\n48 89 43 10\n4c 89 f7\ne8 f7 33 ff ff\n85 c0\n0f 94 c0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p2273
S'.text:000000000040ef00\n.text:000000000040ef01\n.text:000000000040ef03\n.text:000000000040ef05\n.text:000000000040ef06\n.text:000000000040ef07\n.text:000000000040ef0a\n.text:000000000040ef0d\n.text:000000000040ef12\n.text:000000000040ef14\n.text:000000000040ef17\n.text:000000000040ef19\n.text:000000000040ef1d\n.text:000000000040ef20\n.text:000000000040ef24\n.text:000000000040ef28\n.text:000000000040ef2a\n.text:000000000040ef2f\n.text:000000000040ef32\n.text:000000000040ef37\n.text:000000000040ef3b\n.text:000000000040ef3f\n.text:000000000040ef43\n.text:000000000040ef46\n.text:000000000040ef48\n.text:000000000040ef4a\n.text:000000000040ef4d\n.text:000000000040ef52\n.text:000000000040ef55\n.text:000000000040ef5a\n.text:000000000040ef5c\n.text:000000000040ef5f\n.text:000000000040ef61\n.text:000000000040ef65\n.text:000000000040ef69\n.text:000000000040ef6b\n.text:000000000040ef6f\n.text:000000000040ef71\n.text:000000000040ef75\n.text:000000000040ef7a\n.text:000000000040ef7f\n.text:000000000040ef83\n.text:000000000040ef87\n.text:000000000040ef8b\n.text:000000000040ef8e\n.text:000000000040ef91\n.text:000000000040ef96\n.text:000000000040ef9d\n.text:000000000040efa4\n.text:000000000040efa8\n.text:000000000040efaa\n.text:000000000040efae\n.text:000000000040efb3\n.text:000000000040efb8\n.text:000000000040efbf\n.text:000000000040efc6\n.text:000000000040efcd\n.text:000000000040efd1\n.text:000000000040efd8\n.text:000000000040efdf\n.text:000000000040efe2\n.text:000000000040efe4\n.text:000000000040efeb\n.text:000000000040eff2\n.text:000000000040eff9\n.text:000000000040effc\n.text:000000000040efff\n.text:000000000040f002\n.text:000000000040f009\n.text:000000000040f00d\n.text:000000000040f014\n.text:000000000040f017\n.text:000000000040f01a\n.text:000000000040f01d\n.text:000000000040f020\n.text:000000000040f022\n.text:000000000040f029\n.text:000000000040f030\n.text:000000000040f037\n.text:000000000040f03b\n.text:000000000040f042\n.text:000000000040f049\n.text:000000000040f04c\n.text:000000000040f04e\n.text:000000000040f055\n.text:000000000040f05c\n.text:000000000040f05f\n.text:000000000040f062\n.text:000000000040f065\n.text:000000000040f06c\n.text:000000000040f073\n.text:000000000040f07a\n.text:000000000040f07d\n.text:000000000040f080\n.text:000000000040f083\n.text:000000000040f086\n.text:000000000040f088\n.text:000000000040f08f\n.text:000000000040f096\n.text:000000000040f09d\n.text:000000000040f0a1\n.text:000000000040f0a4\n.text:000000000040f0a9\n.text:000000000040f0ab\n.text:000000000040f0ae\n.text:000000000040f0b2\n.text:000000000040f0b3\n.text:000000000040f0b5\n.text:000000000040f0b7\n.text:000000000040f0b8\n'
p2274
tp2275
sS'hash_do_for_each'
p2276
(S'\n__stdcall hash_do_for_each(Hash_table * table, Hash_processor * processor, void * processor_data)\n'
p2277
V\u000asize_t hash_do_for_each(Hash_table *table,_Bool (*processor)(void *,void *),void *processor_data)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  _Bool _Var2;\u000a  size_t sVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    sVar3 = 0;\u000a    do {\u000a      phVar1 = phVar4;\u000a      if (phVar4->data != (void *)0x0) {\u000a        while (phVar1 != (hash_entry *)0x0) {\u000a          _Var2 = (*processor)(phVar1->data,processor_data);\u000a          if (_Var2 == false) {\u000a            return sVar3;\u000a          }\u000a          sVar3 = sVar3 + 1;\u000a          phVar1 = phVar1->next;\u000a        }\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p2278
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV R12,RDI\nMOV R13,qword ptr [R12]\nCMP R13,qword ptr [R12 + 0x8]\nJNC 0x0040b4e7\nXOR EBX,EBX\nCMP qword ptr [R13],0x0\nJZ 0x0040b4da\nTEST R13,R13\nJZ 0x0040b4da\nMOV RBP,R13\nMOV RDI,qword ptr [RBP]\nMOV RSI,R14\nCALL R15\nTEST AL,AL\nJZ 0x0040b4e9\nINC RBX\nMOV RBP,qword ptr [RBP + 0x8]\nTEST RBP,RBP\nJNZ 0x0040b4c0\nADD R13,0x10\nCMP R13,qword ptr [R12 + 0x8]\nJC 0x0040b4b1\nJMP 0x0040b4e9\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2279
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n49 89 fc\n4d 8b 2c 24\n4d 3b 6c 24 08\n73 38\n31 db\n49 83 7d 00 00\n74 22\n4d 85 ed\n74 1d\n4c 89 ed\n48 8b 7d 00\n4c 89 f6\n41 ff d7\n84 c0\n74 1b\n48 ff c3\n48 8b 6d 08\n48 85 ed\n75 e6\n49 83 c5 10\n4d 3b 6c 24 08\n72 cc\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2280
S'.text:000000000040b490\n.text:000000000040b491\n.text:000000000040b493\n.text:000000000040b495\n.text:000000000040b497\n.text:000000000040b499\n.text:000000000040b49a\n.text:000000000040b49b\n.text:000000000040b49e\n.text:000000000040b4a1\n.text:000000000040b4a4\n.text:000000000040b4a8\n.text:000000000040b4ad\n.text:000000000040b4af\n.text:000000000040b4b1\n.text:000000000040b4b6\n.text:000000000040b4b8\n.text:000000000040b4bb\n.text:000000000040b4bd\n.text:000000000040b4c0\n.text:000000000040b4c4\n.text:000000000040b4c7\n.text:000000000040b4ca\n.text:000000000040b4cc\n.text:000000000040b4ce\n.text:000000000040b4d1\n.text:000000000040b4d5\n.text:000000000040b4d8\n.text:000000000040b4da\n.text:000000000040b4de\n.text:000000000040b4e3\n.text:000000000040b4e5\n.text:000000000040b4e7\n.text:000000000040b4e9\n.text:000000000040b4ec\n.text:000000000040b4f0\n.text:000000000040b4f1\n.text:000000000040b4f3\n.text:000000000040b4f5\n.text:000000000040b4f7\n.text:000000000040b4f9\n.text:000000000040b4fa\n'
p2281
tp2282
sS'usage'
p2283
(S'\n__stdcall usage()\n'
p2284
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,0x412620,5);\u000a    __printf_chk(1,uVar1,program_name,program_name);\u000a    __s = (char *)dcgettext(0,"Write sorted concatenation of all FILE(s) to standard output.\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_stdin_note();\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,"Ordering options:\u005cn\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -b, --ignore-leading-blanks  ignore leading blanks\u005cn  -d, --dictionary-order      consider only blanks and alphanumeric characters\u005cn  -f, --ignore-case           fold lower case to upper case characters\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -g, --general-numeric-sort  compare according to general numerical value\u005cn  -i, --ignore-nonprinting    consider only printable characters\u005cn  -M, --month-sort            compare (unknown) < \u005c'JAN\u005c' < ... < \u005c'DEC\u005c'\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -h, --human-numeric-sort    compare human readable numbers (e.g., 2K 1G)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -n, --numeric-sort          compare according to string numerical value\u005cn  -R, --random-sort           shuffle, but group identical keys.  See shuf(1)\u005cn      --random-source=FILE    get random bytes from FILE\u005cn  -r, --reverse               reverse the result of comparisons\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --sort=WORD             sort according to WORD:\u005cn                                general-numeric -g, human-numeric -h, month -M,\u005cn                                numeric -n, random -R, version -V\u005cn  -V, --version-sort          natural sort of (version) numbers within text\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"Other options:\u005cn\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --batch-size=NMERGE   merge at most NMERGE inputs at once;\u005cn                            for more use temp files\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -c, --check, --check=diagnose-first  check for sorted input; do not sort\u005cn  -C, --check=quiet, --check=silent  like -c, but do not report first bad line\u005cn      --compress-program=PROG  compress temporaries with PROG;\u005cn                              decompress them with PROG -d\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --debug               annotate the part of the line used to sort,\u005cn                              and warn about questionable usage to stderr\u005cn      --files0-from=F       read input from the files specified by\u005cn                            NUL-terminated names in file F;\u005cn                            If F is - then read names from standard input\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -k, --key=KEYDEF          sort via a key; KEYDEF gives location and type\u005cn  -m, --merge               merge already sorted files; do not sort\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -o, --output=FILE         write result to FILE instead of standard output\u005cn  -s, --stable              stabilize sort by disabling last-resort comparison\u005cn  -S, --buffer-size=SIZE    use SIZE for main memory buffer\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    uVar1 = dcgettext(0,\u000a                      "  -t, --field-separator=SEP  use SEP instead of non-blank to blank transition\u005cn  -T, --temporary-directory=DIR  use DIR for temporaries, not $TMPDIR or %s;\u005cn                              multiple options specify multiple directories\u005cn      --parallel=N          change the number of sorts run concurrently to N\u005cn  -u, --unique              with -c, check for strict ordering;\u005cn                              without -c, output only the first of an equal run\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,&DAT_004130f2,uVar1);\u000a    __s = (char *)dcgettext(0,"  -z, --zero-terminated     line delimiter is NUL, not newline\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnKEYDEF is F[.C][OPTS][,F[.C][OPTS]] for start and stop position, where F is a\u005cnfield number and C a character position in the field; both are origin 1, and\u005cnthe stop position defaults to the line\u005c's end.  If neither -t nor -b is in\u005cneffect, characters in a field are counted from the beginning of the preceding\u005cnwhitespace.  OPTS is one or more single-letter ordering options [bdfgiMhnRrV],\u005cnwhich override global ordering options for that key.  If no key is given, use\u005cnthe entire line as the key.  Use --debug to diagnose incorrect key usage.\u005cn\u005cnSIZE may be followed by the following multiplicative suffixes:\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "% 1% of memory, b 1, K 1024 (default), and so on for M, G, T, P, E, Z, Y.\u005cn\u005cn*** WARNING ***\u005cnThe locale specified by the environment affects sort order.\u005cnSet LC_ALL=C to get the traditional sort order that uses\u005cnnative byte values.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p2285
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00402ef6\nXOR EDI,EDI\nMOV ESI,0x412620\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0061ab78]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nCALL 0x00402920\nXOR EDI,EDI\nMOV ESI,0x412667\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nCALL 0x00402f50\nCALL 0x00402f80\nXOR EDI,EDI\nMOV ESI,0x4126a6\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x4126ba\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x412786\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x412859\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x4128a5\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x4129b7\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x412acd\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x412ade\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x412b54\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x412c69\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x412dc5\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x412e55\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x412f2d\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4130f2\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00402920\nXOR EDI,EDI\nMOV ESI,0x4130f7\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x413137\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x413164\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x41319a\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV ESI,0x4133f6\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nCALL 0x00402730\nCALL 0x00402fb0\nMOV EDI,EBX\nCALL 0x00402a50\nCALL 0x00402f10\nMOV EDI,EBX\nCALL 0x00402a50\n'
p2286
S'53\n89 fb\n85 db\n0f 85 ab 02 00 00\n31 ff\nbe 20 26 41 00\nba 05 00 00 00\ne8 54 f9 ff ff\n48 89 c1\n48 8b 15 12 7f 21 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\ne8 a8 fc ff ff\n31 ff\nbe 67 26 41 00\nba 05 00 00 00\ne8 27 f9 ff ff\n48 8b 35 d8 78 21 00\n48 89 c7\ne8 98 fa ff ff\ne8 b3 02 00 00\ne8 de 02 00 00\n31 ff\nbe a6 26 41 00\nba 05 00 00 00\ne8 fd f8 ff ff\n48 8b 35 ae 78 21 00\n48 89 c7\ne8 6e fa ff ff\n31 ff\nbe ba 26 41 00\nba 05 00 00 00\ne8 dd f8 ff ff\n48 8b 35 8e 78 21 00\n48 89 c7\ne8 4e fa ff ff\n31 ff\nbe 86 27 41 00\nba 05 00 00 00\ne8 bd f8 ff ff\n48 8b 35 6e 78 21 00\n48 89 c7\ne8 2e fa ff ff\n31 ff\nbe 59 28 41 00\nba 05 00 00 00\ne8 9d f8 ff ff\n48 8b 35 4e 78 21 00\n48 89 c7\ne8 0e fa ff ff\n31 ff\nbe a5 28 41 00\nba 05 00 00 00\ne8 7d f8 ff ff\n48 8b 35 2e 78 21 00\n48 89 c7\ne8 ee f9 ff ff\n31 ff\nbe b7 29 41 00\nba 05 00 00 00\ne8 5d f8 ff ff\n48 8b 35 0e 78 21 00\n48 89 c7\ne8 ce f9 ff ff\n31 ff\nbe cd 2a 41 00\nba 05 00 00 00\ne8 3d f8 ff ff\n48 8b 35 ee 77 21 00\n48 89 c7\ne8 ae f9 ff ff\n31 ff\nbe de 2a 41 00\nba 05 00 00 00\ne8 1d f8 ff ff\n48 8b 35 ce 77 21 00\n48 89 c7\ne8 8e f9 ff ff\n31 ff\nbe 54 2b 41 00\nba 05 00 00 00\ne8 fd f7 ff ff\n48 8b 35 ae 77 21 00\n48 89 c7\ne8 6e f9 ff ff\n31 ff\nbe 69 2c 41 00\nba 05 00 00 00\ne8 dd f7 ff ff\n48 8b 35 8e 77 21 00\n48 89 c7\ne8 4e f9 ff ff\n31 ff\nbe c5 2d 41 00\nba 05 00 00 00\ne8 bd f7 ff ff\n48 8b 35 6e 77 21 00\n48 89 c7\ne8 2e f9 ff ff\n31 ff\nbe 55 2e 41 00\nba 05 00 00 00\ne8 9d f7 ff ff\n48 8b 35 4e 77 21 00\n48 89 c7\ne8 0e f9 ff ff\n31 ff\nbe 2d 2f 41 00\nba 05 00 00 00\ne8 7d f7 ff ff\n48 89 c1\nbf 01 00 00 00\nba f2 30 41 00\n31 c0\n48 89 ce\ne8 d6 fa ff ff\n31 ff\nbe f7 30 41 00\nba 05 00 00 00\ne8 55 f7 ff ff\n48 8b 35 06 77 21 00\n48 89 c7\ne8 c6 f8 ff ff\n31 ff\nbe 37 31 41 00\nba 05 00 00 00\ne8 35 f7 ff ff\n48 8b 35 e6 76 21 00\n48 89 c7\ne8 a6 f8 ff ff\n31 ff\nbe 64 31 41 00\nba 05 00 00 00\ne8 15 f7 ff ff\n48 8b 35 c6 76 21 00\n48 89 c7\ne8 86 f8 ff ff\n31 ff\nbe 9a 31 41 00\nba 05 00 00 00\ne8 f5 f6 ff ff\n48 8b 35 a6 76 21 00\n48 89 c7\ne8 66 f8 ff ff\n31 ff\nbe f6 33 41 00\nba 05 00 00 00\ne8 d5 f6 ff ff\n48 8b 35 86 76 21 00\n48 89 c7\ne8 46 f8 ff ff\ne8 c1 00 00 00\n89 df\ne8 5a fb ff ff\ne8 15 00 00 00\n89 df\ne8 4e fb ff ff\n'
p2287
S'.text:0000000000402c40\n.text:0000000000402c41\n.text:0000000000402c43\n.text:0000000000402c45\n.text:0000000000402c4b\n.text:0000000000402c4d\n.text:0000000000402c52\n.text:0000000000402c57\n.text:0000000000402c5c\n.text:0000000000402c5f\n.text:0000000000402c66\n.text:0000000000402c6b\n.text:0000000000402c6d\n.text:0000000000402c70\n.text:0000000000402c73\n.text:0000000000402c78\n.text:0000000000402c7a\n.text:0000000000402c7f\n.text:0000000000402c84\n.text:0000000000402c89\n.text:0000000000402c90\n.text:0000000000402c93\n.text:0000000000402c98\n.text:0000000000402c9d\n.text:0000000000402ca2\n.text:0000000000402ca4\n.text:0000000000402ca9\n.text:0000000000402cae\n.text:0000000000402cb3\n.text:0000000000402cba\n.text:0000000000402cbd\n.text:0000000000402cc2\n.text:0000000000402cc4\n.text:0000000000402cc9\n.text:0000000000402cce\n.text:0000000000402cd3\n.text:0000000000402cda\n.text:0000000000402cdd\n.text:0000000000402ce2\n.text:0000000000402ce4\n.text:0000000000402ce9\n.text:0000000000402cee\n.text:0000000000402cf3\n.text:0000000000402cfa\n.text:0000000000402cfd\n.text:0000000000402d02\n.text:0000000000402d04\n.text:0000000000402d09\n.text:0000000000402d0e\n.text:0000000000402d13\n.text:0000000000402d1a\n.text:0000000000402d1d\n.text:0000000000402d22\n.text:0000000000402d24\n.text:0000000000402d29\n.text:0000000000402d2e\n.text:0000000000402d33\n.text:0000000000402d3a\n.text:0000000000402d3d\n.text:0000000000402d42\n.text:0000000000402d44\n.text:0000000000402d49\n.text:0000000000402d4e\n.text:0000000000402d53\n.text:0000000000402d5a\n.text:0000000000402d5d\n.text:0000000000402d62\n.text:0000000000402d64\n.text:0000000000402d69\n.text:0000000000402d6e\n.text:0000000000402d73\n.text:0000000000402d7a\n.text:0000000000402d7d\n.text:0000000000402d82\n.text:0000000000402d84\n.text:0000000000402d89\n.text:0000000000402d8e\n.text:0000000000402d93\n.text:0000000000402d9a\n.text:0000000000402d9d\n.text:0000000000402da2\n.text:0000000000402da4\n.text:0000000000402da9\n.text:0000000000402dae\n.text:0000000000402db3\n.text:0000000000402dba\n.text:0000000000402dbd\n.text:0000000000402dc2\n.text:0000000000402dc4\n.text:0000000000402dc9\n.text:0000000000402dce\n.text:0000000000402dd3\n.text:0000000000402dda\n.text:0000000000402ddd\n.text:0000000000402de2\n.text:0000000000402de4\n.text:0000000000402de9\n.text:0000000000402dee\n.text:0000000000402df3\n.text:0000000000402dfa\n.text:0000000000402dfd\n.text:0000000000402e02\n.text:0000000000402e04\n.text:0000000000402e09\n.text:0000000000402e0e\n.text:0000000000402e13\n.text:0000000000402e1a\n.text:0000000000402e1d\n.text:0000000000402e22\n.text:0000000000402e24\n.text:0000000000402e29\n.text:0000000000402e2e\n.text:0000000000402e33\n.text:0000000000402e36\n.text:0000000000402e3b\n.text:0000000000402e40\n.text:0000000000402e42\n.text:0000000000402e45\n.text:0000000000402e4a\n.text:0000000000402e4c\n.text:0000000000402e51\n.text:0000000000402e56\n.text:0000000000402e5b\n.text:0000000000402e62\n.text:0000000000402e65\n.text:0000000000402e6a\n.text:0000000000402e6c\n.text:0000000000402e71\n.text:0000000000402e76\n.text:0000000000402e7b\n.text:0000000000402e82\n.text:0000000000402e85\n.text:0000000000402e8a\n.text:0000000000402e8c\n.text:0000000000402e91\n.text:0000000000402e96\n.text:0000000000402e9b\n.text:0000000000402ea2\n.text:0000000000402ea5\n.text:0000000000402eaa\n.text:0000000000402eac\n.text:0000000000402eb1\n.text:0000000000402eb6\n.text:0000000000402ebb\n.text:0000000000402ec2\n.text:0000000000402ec5\n.text:0000000000402eca\n.text:0000000000402ecc\n.text:0000000000402ed1\n.text:0000000000402ed6\n.text:0000000000402edb\n.text:0000000000402ee2\n.text:0000000000402ee5\n.text:0000000000402eea\n.text:0000000000402eef\n.text:0000000000402ef1\n.text:0000000000402ef6\n.text:0000000000402efb\n.text:0000000000402efd\n'
p2288
tp2289
sS'quoting_options_from_style'
p2290
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p2291
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p2292
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040dc3d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00402420\n'
p2293
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 de 47 ff ff\n'
p2294
S'.text:000000000040dbf0\n.text:000000000040dbf4\n.text:000000000040dbf7\n.text:000000000040dbfc\n.text:000000000040dc01\n.text:000000000040dc05\n.text:000000000040dc0d\n.text:000000000040dc10\n.text:000000000040dc12\n.text:000000000040dc14\n.text:000000000040dc18\n.text:000000000040dc1b\n.text:000000000040dc1f\n.text:000000000040dc24\n.text:000000000040dc29\n.text:000000000040dc2d\n.text:000000000040dc31\n.text:000000000040dc35\n.text:000000000040dc38\n.text:000000000040dc3c\n.text:000000000040dc3d\n'
p2295
tp2296
sS'strcpy'
p2297
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p2298
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0061a068)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2299
S'JMP qword ptr [0x0061a068]\n'
p2300
S'ff 25 f2 7b 21 00\n'
p2301
S'.plt:0000000000402470\n'
p2302
tp2303
sS'key_numeric'
p2304
(S'\n__stdcall key_numeric(keyfield * key)\n'
p2305
V\u000a_Bool key_numeric(keyfield *key)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  _Var1 = true;\u000a  if ((key->numeric == false) && (key->general_numeric == false)) {\u000a    _Var1 = (_Bool)(key->human_numeric != false);\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p2306
S'MOV AL,0x1\nCMP byte ptr [RDI + 0x32],0x0\nJNZ 0x00405db5\nCMP byte ptr [RDI + 0x34],0x0\nJNZ 0x00405db5\nCMP byte ptr [RDI + 0x35],0x0\nSETNZ AL\nRET\n'
p2307
S'b0 01\n80 7f 32 00\n75 0d\n80 7f 34 00\n75 07\n80 7f 35 00\n0f 95 c0\nc3\n'
p2308
S'.text:0000000000405da0\n.text:0000000000405da2\n.text:0000000000405da6\n.text:0000000000405da8\n.text:0000000000405dac\n.text:0000000000405dae\n.text:0000000000405db2\n.text:0000000000405db5\n'
p2309
tp2310
sS'rotl8'
p2311
(S'\n__stdcall rotl8()\n'
p2312
V\u000auint8_t rotl8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI >> (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p2313
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p2314
S'89 f8\n89 f1\nd3 e0\nb9 08 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p2315
S'.text:0000000000410d50\n.text:0000000000410d52\n.text:0000000000410d54\n.text:0000000000410d56\n.text:0000000000410d5b\n.text:0000000000410d5d\n.text:0000000000410d5f\n.text:0000000000410d61\n.text:0000000000410d63\n'
p2316
tp2317
sS'sysconf'
p2318
(S'\n__stdcall sysconf(int __name)\n'
p2319
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along sysconf(int __name)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_sysconf_0061a310)();\u000a  return lVar1;\u000a}\u000a\u000a
p2320
S'JMP qword ptr [0x0061a310]\n'
p2321
S'ff 25 4a 79 21 00\n'
p2322
S'.plt:00000000004029c0\n'
p2323
tp2324
sS'fillbuf'
p2325
(S'\n__stdcall fillbuf(buffer * buf, FILE * fp, char * file)\n'
p2326
V\u000a_Bool fillbuf(buffer *buf,FILE *fp,char *file)\u000a\u000a{\u000a  char *__s;\u000a  size_t sVar1;\u000a  keyfield *key_00;\u000a  byte bVar2;\u000a  int iVar3;\u000a  uint uVar4;\u000a  size_t sVar5;\u000a  line *line;\u000a  ulong __n;\u000a  size_t __n_00;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  ulong uVar8;\u000a  line *plVar9;\u000a  char *pcVar10;\u000a  char *message;\u000a  char *pcVar11;\u000a  char eol;\u000a  keyfield *key;\u000a  size_t line_bytes;\u000a  int local_80;\u000a  char *local_78;\u000a  ulong local_50;\u000a  char *local_48;\u000a  long local_40;\u000a  ulong local_38;\u000a  \u000a  key_00 = keylist;\u000a  sVar5 = merge_buffer_size;\u000a  local_80 = 0;\u000a  if (eolchar == 0) {\u000a    local_80 = 10;\u000a  }\u000a  if (buf->eof == false) {\u000a    sVar1 = buf->line_bytes;\u000a    __n_00 = buf->left;\u000a    local_48 = file;\u000a    if (buf->used != __n_00) {\u000a      local_48 = file;\u000a      memmove(buf->buf,buf->buf + (buf->used - __n_00),__n_00);\u000a      buf->used = buf->left;\u000a      buf->nlines = 0;\u000a    }\u000a    message = (char *)(sVar5 - 0x22);\u000a    local_40 = -sVar1;\u000a    local_38 = sVar1 + 1;\u000aLAB_00406055:\u000a    do {\u000a      pcVar11 = buf->buf;\u000a      local_78 = pcVar11 + buf->used;\u000a      line = buffer_linelim(buf);\u000a      sVar5 = buf->nlines;\u000a      plVar9 = line + sVar5 * 0x7ffffffffffffff;\u000a      if (sVar5 != 0) {\u000a        pcVar11 = plVar9->text + line[sVar5 * 0x7ffffffffffffff].length;\u000a      }\u000a      uVar8 = (long)line + (sVar5 * local_40 - (long)local_78);\u000a      do {\u000a        if (uVar8 <= local_38) goto LAB_00405fe8;\u000a        __n = (uVar8 - 1) / local_38;\u000a        __n_00 = fread_unlocked(local_78,1,__n,(FILE *)fp);\u000a        pcVar7 = local_78 + __n_00;\u000a        uVar8 = uVar8 - __n_00;\u000a        if (__n_00 == __n) {\u000aLAB_0040615b:\u000a          pcVar6 = (char *)memchr(local_78,local_80,(size_t)(pcVar7 + -(long)local_78));\u000a          while (pcVar6 != (char *)0x0) {\u000a            *pcVar6 = 0;\u000a            __s = pcVar6 + 1;\u000a            line = plVar9 + -1;\u000a            plVar9[-1].text = pcVar11;\u000a            pcVar10 = __s + -(long)pcVar11;\u000a            *(char **)&plVar9[-1].length = pcVar10;\u000a            if (pcVar10 < message) {\u000a              pcVar10 = message;\u000a            }\u000a            if (key_00 != (keyfield *)0x0) {\u000a              if (key_00->eword != 0xffffffffffffffff) {\u000a                pcVar6 = limfield(line,key_00);\u000a              }\u000a              plVar9[-1].keylim = pcVar6;\u000a              if (key_00->sword == 0xffffffffffffffff) {\u000a                if (key_00->skipsblanks != false) {\u000a                  pcVar11 = pcVar11 + -1;\u000a                  do {\u000a                    pcVar11 = pcVar11 + 1;\u000a                    bVar2 = to_uchar();\u000a                  } while (blanks[(ulong)bVar2] != false);\u000a                }\u000a              }\u000a              else {\u000a                pcVar11 = begfield(line,key_00);\u000a              }\u000a              plVar9[-1].keybeg = pcVar11;\u000a            }\u000a            uVar8 = uVar8 - sVar1;\u000a            pcVar6 = (char *)memchr(__s,local_80,(size_t)(pcVar7 + -(long)__s));\u000a            plVar9 = line;\u000a            message = pcVar10;\u000a            pcVar11 = __s;\u000a          }\u000a          uVar4 = (uint)buf->eof + (uint)buf->eof * 4;\u000a          local_78 = pcVar7;\u000a        }\u000a        else {\u000a          iVar3 = ferror_unlocked((FILE *)fp);\u000a          if (iVar3 != 0) {\u000a            message = (char *)dcgettext(0,"read failed",5);\u000a                    /* WARNING: Subroutine does not return */\u000a            die(message,local_48);\u000a          }\u000a          iVar3 = feof_unlocked((FILE *)fp);\u000a          if (iVar3 == 0) goto LAB_0040615b;\u000a          buf->eof = true;\u000a          if (buf->buf != pcVar7) {\u000a            if ((pcVar11 != pcVar7) && ((int)pcVar7[-1] != local_80)) {\u000a              *pcVar7 = (char)local_80;\u000a              pcVar7 = pcVar7 + 1;\u000a            }\u000a            goto LAB_0040615b;\u000a          }\u000a          uVar4 = 1;\u000a        }\u000a      } while ((uVar4 & 7) == 0);\u000a      if (((byte)uVar4 & 7) == 5) {\u000aLAB_00405fe8:\u000a        *(char **)&buf->used = local_78 + -(long)buf->buf;\u000a        line = buffer_linelim(buf);\u000a        sVar5 = (long)((long)line - (long)plVar9) >> 5;\u000a        buf->nlines = sVar5;\u000a        if (sVar5 != 0) {\u000a          *(char **)&buf->left = local_78 + -(long)pcVar11;\u000a          merge_buffer_size = (size_t)(message + 0x22);\u000a          return true;\u000a        }\u000a        local_50 = buf->alloc >> 5;\u000a        pcVar11 = (char *)x2nrealloc(buf->buf,&local_50,0x20);\u000a        buf->buf = pcVar11;\u000a        buf->alloc = local_50 << 5;\u000a        goto LAB_00406055;\u000a      }\u000a    } while (uVar4 == 0);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p2327
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x58\nMOV qword ptr [RSP + 0x20],RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [0x0061a650]\nMOV qword ptr [RSP + 0x28],RAX\nMOV CL,byte ptr [0x0061a64b]\nXOR EAX,EAX\nTEST CL,CL\nMOV dword ptr [RSP + 0x8],0x0\nJNZ 0x00405f5c\nMOV CL,0xa\nMOV dword ptr [RSP + 0x8],ECX\nCMP byte ptr [RBX + 0x30],0x0\nJNZ 0x0040628d\nMOV qword ptr [RSP + 0x40],RDX\nMOV RAX,qword ptr [RBX + 0x28]\nMOV qword ptr [RSP + 0x30],RAX\nMOV R13,qword ptr [0x0061a4c0]\nMOV RSI,qword ptr [RBX + 0x8]\nMOV RDX,qword ptr [RBX + 0x20]\nCMP RSI,RDX\nJZ 0x00405fa6\nMOV RDI,qword ptr [RBX]\nADD RSI,RDI\nSUB RSI,RDX\nCALL 0x00402940\nMOV RAX,qword ptr [RBX + 0x20]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [RBX + 0x10],0x0\nADD R13,-0x22\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RCX,RAX\nNEG RCX\nMOV qword ptr [RSP + 0x48],RCX\nINC RAX\nMOV qword ptr [RSP + 0x50],RAX\nMOVZX EAX,byte ptr [RSP + 0x8]\nMOV dword ptr [RSP + 0xc],EAX\nMOV qword ptr [RSP + 0x18],RBX\nJMP 0x00406055\nMOV RDX,RDI\nMOV RBX,qword ptr [RSP + 0x18]\nMOV RBP,RDX\nMOV RAX,RBP\nSUB RAX,qword ptr [RBX]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RDI,RBX\nCALL 0x004062c0\nSUB RAX,R12\nSAR RAX,0x5\nMOV qword ptr [RBX + 0x10],RAX\nJNZ 0x00406275\nMOV RAX,qword ptr [RBX + 0x18]\nSHR RAX,0x5\nMOV qword ptr [RSP + 0x38],RAX\nMOV RDI,qword ptr [RBX]\nMOV EDX,0x20\nLEA RSI,[RSP + 0x38]\nCALL 0x0040fbf0\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP + 0x38]\nSHL RAX,0x5\nMOV qword ptr [RBX + 0x18],RAX\nJMP 0x00406055\nMOV RDX,RDI\nCMP BL,0x5\nMOV RBX,qword ptr [RSP + 0x18]\nJZ 0x00405fe8\nTEST EAX,EAX\nJNZ 0x0040628b\nMOV R14,qword ptr [RBX]\nMOV R15,qword ptr [RBX + 0x8]\nADD R15,R14\nMOV RDI,RBX\nCALL 0x004062c0\nMOV RCX,qword ptr [RBX + 0x10]\nMOV RDX,RCX\nSHL RDX,0x5\nMOV R12,RAX\nSUB R12,RDX\nMOV RBP,RCX\nIMUL RBP,qword ptr [RSP + 0x48]\nADD RBP,RAX\nTEST RCX,RCX\nJZ 0x00406099\nNEG RCX\nMOV R14,qword ptr [R12]\nSHL RCX,0x5\nADD R14,qword ptr [RAX + RCX*0x1 + 0x8]\nMOV RDI,R15\nSUB RBP,RDI\nMOV RCX,qword ptr [RSP + 0x20]\nJMP 0x004060c0\nMOV EAX,0x1\nMOV RDI,qword ptr [RSP + 0x10]\nJMP 0x00406260\nMOV RSI,qword ptr [RSP + 0x50]\nCMP RSI,RBP\nJNC 0x00405fe0\nLEA RAX,[RBP + -0x1]\nXOR EDX,EDX\nDIV RSI\nMOV R15,RAX\nMOV ESI,0x1\nMOV RBX,RDI\nMOV RDX,R15\nCALL 0x00402540\nLEA RCX,[RBX + RAX*0x1]\nSUB RBP,RAX\nCMP RAX,R15\nJZ 0x0040615b\nMOV qword ptr [RSP + 0x10],RBX\nMOV R15,RCX\nMOV RBX,qword ptr [RSP + 0x20]\nMOV RDI,RBX\nCALL 0x00402740\nTEST EAX,EAX\nJNZ 0x0040629c\nMOV RDI,RBX\nCALL 0x00402b10\nTEST EAX,EAX\nJZ 0x00406153\nMOV RAX,qword ptr [RSP + 0x18]\nMOV byte ptr [RAX + 0x30],0x1\nMOV RCX,R15\nCMP qword ptr [RAX],RCX\nJZ 0x004060a6\nCMP R14,RCX\nMOV RBX,qword ptr [RSP + 0x10]\nJZ 0x0040615b\nMOVSX EAX,byte ptr [RCX + -0x1]\nCMP EAX,dword ptr [RSP + 0xc]\nJZ 0x0040615b\nMOV EAX,dword ptr [RSP + 0x8]\nMOV byte ptr [RCX],AL\nINC RCX\nJMP 0x0040615b\nMOV RCX,R15\nMOV RBX,qword ptr [RSP + 0x10]\nMOV qword ptr [RSP + 0x10],RCX\nMOV RDX,RCX\nSUB RDX,RBX\nMOV RDI,RBX\nMOV ESI,dword ptr [RSP + 0xc]\nCALL 0x004026f0\nTEST RAX,RAX\nJZ 0x00406240\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,R13\nMOV byte ptr [RAX],0x0\nLEA R15,[RAX + 0x1]\nLEA RBX,[R12 + -0x20]\nMOV qword ptr [R12 + -0x20],R14\nMOV R13,R15\nSUB R13,R14\nMOV qword ptr [R12 + -0x18],R13\nCMP RCX,R13\nCMOVA R13,RCX\nCMP qword ptr [RSP + 0x28],0x0\nJZ 0x0040620e\nMOV RSI,qword ptr [RSP + 0x28]\nCMP qword ptr [RSI + 0x10],-0x1\nJZ 0x004061c7\nMOV RDI,RBX\nCALL 0x00406610\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [R12 + -0x8],RAX\nCMP qword ptr [RSI],-0x1\nJZ 0x004061e0\nMOV RDI,RBX\nCALL 0x00406750\nMOV R14,RAX\nJMP 0x00406209\nCMP byte ptr [RSI + 0x30],0x0\nJZ 0x00406209\nDEC R14\nNOP dword ptr [RAX]\nMOVSX EDI,byte ptr [R14 + 0x1]\nINC R14\nCALL 0x004042c0\nMOVZX EAX,AL\nCMP byte ptr [0x61a670 + RAX],0x0\nJNZ 0x004061f0\nMOV qword ptr [R12 + -0x10],R14\nSUB RBP,qword ptr [RSP + 0x30]\nMOV RDX,qword ptr [RSP + 0x10]\nSUB RDX,R15\nMOV RDI,R15\nMOV ESI,dword ptr [RSP + 0xc]\nCALL 0x004026f0\nTEST RAX,RAX\nMOV R14,R15\nMOV R12,RBX\nJNZ 0x00406180\nJMP 0x00406246\nMOV RBX,R12\nMOV R15,R14\nMOV RAX,qword ptr [RSP + 0x18]\nMOVZX EAX,byte ptr [RAX + 0x30]\nLEA EAX,[RAX + RAX*0x4]\nMOV RCX,qword ptr [RSP + 0x10]\nMOV R12,RBX\nMOV RDI,RCX\nMOV R14,R15\nMOV RCX,qword ptr [RSP + 0x20]\nMOV EBX,EAX\nAND BL,0x7\nJZ 0x004060c0\nJMP 0x00406040\nSUB RBP,R14\nMOV qword ptr [RBX + 0x20],RBP\nADD R13,0x22\nMOV qword ptr [0x0061a4c0],R13\nMOV AL,0x1\nJMP 0x0040628d\nXOR EAX,EAX\nADD RSP,0x58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x413ea8\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDI,RAX\nMOV RSI,qword ptr [RSP + 0x40]\nCALL 0x00405c70\n'
p2328
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 58\n48 89 74 24 20\n48 89 fb\n48 8b 05 13 47 21 00\n48 89 44 24 28\n8a 0d 03 47 21 00\n31 c0\n84 c9\nc7 44 24 08 00 00 00 00\n75 06\nb1 0a\n89 4c 24 08\n80 7b 30 00\n0f 85 27 03 00 00\n48 89 54 24 40\n48 8b 43 28\n48 89 44 24 30\n4c 8b 2d 45 45 21 00\n48 8b 73 08\n48 8b 53 20\n48 39 d6\n74 1e\n48 8b 3b\n48 01 fe\n48 29 d6\ne8 aa c9 ff ff\n48 8b 43 20\n48 89 43 08\n48 c7 43 10 00 00 00 00\n49 83 c5 de\n48 8b 44 24 30\n48 89 c1\n48 f7 d9\n48 89 4c 24 48\n48 ff c0\n48 89 44 24 50\n0f b6 44 24 08\n89 44 24 0c\n48 89 5c 24 18\ne9 80 00 00 00\n48 89 fa\n48 8b 5c 24 18\n48 89 d5\n48 89 e8\n48 2b 03\n48 89 43 08\n48 89 df\ne8 c3 02 00 00\n4c 29 e0\n48 c1 f8 05\n48 89 43 10\n0f 85 67 02 00 00\n48 8b 43 18\n48 c1 e8 05\n48 89 44 24 38\n48 8b 3b\nba 20 00 00 00\n48 8d 74 24 38\ne8 c3 9b 00 00\n48 89 03\n48 8b 44 24 38\n48 c1 e0 05\n48 89 43 18\neb 16\n48 89 fa\n80 fb 05\n48 8b 5c 24 18\n74 9b\n85 c0\n0f 85 36 02 00 00\n4c 8b 33\n4c 8b 7b 08\n4d 01 f7\n48 89 df\ne8 59 02 00 00\n48 8b 4b 10\n48 89 ca\n48 c1 e2 05\n49 89 c4\n49 29 d4\n48 89 cd\n48 0f af 6c 24 48\n48 01 c5\n48 85 c9\n74 10\n48 f7 d9\n4d 8b 34 24\n48 c1 e1 05\n4c 03 74 08 08\n4c 89 ff\n48 29 fd\n48 8b 4c 24 20\neb 1a\nb8 01 00 00 00\n48 8b 7c 24 10\ne9 ab 01 00 00\n48 8b 74 24 50\n48 39 ee\n0f 83 12 ff ff ff\n48 8d 45 ff\n31 d2\n48 f7 f6\n49 89 c7\nbe 01 00 00 00\n48 89 fb\n4c 89 fa\ne8 56 c4 ff ff\n48 8d 0c 03\n48 29 c5\n4c 39 f8\n74 65\n48 89 5c 24 10\n49 89 cf\n48 8b 5c 24 20\n48 89 df\ne8 35 c6 ff ff\n85 c0\n0f 85 89 01 00 00\n48 89 df\ne8 f5 c9 ff ff\n85 c0\n74 34\n48 8b 44 24 18\nc6 40 30 01\n4c 89 f9\n48 39 08\n0f 84 72 ff ff ff\n49 39 ce\n48 8b 5c 24 10\n74 1d\n0f be 41 ff\n3b 44 24 0c\n74 13\n8b 44 24 08\n88 01\n48 ff c1\neb 08\n4c 89 f9\n48 8b 5c 24 10\n48 89 4c 24 10\n48 89 ca\n48 29 da\n48 89 df\n8b 74 24 0c\ne8 7e c5 ff ff\n48 85 c0\n0f 84 c5 00 00 00\n0f 1f 44 00 00\n4c 89 e9\nc6 00 00\n4c 8d 78 01\n49 8d 5c 24 e0\n4d 89 74 24 e0\n4d 89 fd\n4d 29 f5\n4d 89 6c 24 e8\n4c 39 e9\n4c 0f 47 e9\n48 83 7c 24 28 00\n74 60\n48 8b 74 24 28\n48 83 7e 10 ff\n74 0d\n48 89 df\ne8 4e 04 00 00\n48 8b 74 24 28\n49 89 44 24 f8\n48 83 3e ff\n74 0e\n48 89 df\ne8 76 05 00 00\n49 89 c6\neb 2a\n80 7e 30 00\n74 23\n49 ff ce\n0f 1f 80 00 00 00 00\n41 0f be 7e 01\n49 ff c6\ne8 c3 e0 ff ff\n0f b6 c0\n80 b8 70 a6 61 00 00\n75 e7\n4d 89 74 24 f0\n48 2b 6c 24 30\n48 8b 54 24 10\n4c 29 fa\n4c 89 ff\n8b 74 24 0c\ne8 c9 c4 ff ff\n48 85 c0\n4d 89 fe\n49 89 dc\n0f 85 4a ff ff ff\neb 0e\n4c 89 e3\n4d 89 f7\n48 8b 44 24 18\n0f b6 40 30\n8d 04 80\n48 8b 4c 24 10\n49 89 dc\n48 89 cf\n4d 89 fe\n48 8b 4c 24 20\n89 c3\n80 e3 07\n0f 84 50 fe ff ff\ne9 cb fd ff ff\n4c 29 f5\n48 89 6b 20\n49 83 c5 22\n4c 89 2d 39 42 21 00\nb0 01\neb 02\n31 c0\n48 83 c4 58\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe a8 3e 41 00\nba 05 00 00 00\ne8 03 c3 ff ff\n48 89 c7\n48 8b 74 24 40\ne8 b6 f9 ff ff\n'
p2329
S'.text:0000000000405f20\n.text:0000000000405f21\n.text:0000000000405f23\n.text:0000000000405f25\n.text:0000000000405f27\n.text:0000000000405f29\n.text:0000000000405f2a\n.text:0000000000405f2e\n.text:0000000000405f33\n.text:0000000000405f36\n.text:0000000000405f3d\n.text:0000000000405f42\n.text:0000000000405f48\n.text:0000000000405f4a\n.text:0000000000405f4c\n.text:0000000000405f54\n.text:0000000000405f56\n.text:0000000000405f58\n.text:0000000000405f5c\n.text:0000000000405f60\n.text:0000000000405f66\n.text:0000000000405f6b\n.text:0000000000405f6f\n.text:0000000000405f74\n.text:0000000000405f7b\n.text:0000000000405f7f\n.text:0000000000405f83\n.text:0000000000405f86\n.text:0000000000405f88\n.text:0000000000405f8b\n.text:0000000000405f8e\n.text:0000000000405f91\n.text:0000000000405f96\n.text:0000000000405f9a\n.text:0000000000405f9e\n.text:0000000000405fa6\n.text:0000000000405faa\n.text:0000000000405faf\n.text:0000000000405fb2\n.text:0000000000405fb5\n.text:0000000000405fba\n.text:0000000000405fbd\n.text:0000000000405fc2\n.text:0000000000405fc7\n.text:0000000000405fcb\n.text:0000000000405fd0\n.text:0000000000405fe0\n.text:0000000000405fe3\n.text:0000000000405fe8\n.text:0000000000405feb\n.text:0000000000405fee\n.text:0000000000405ff1\n.text:0000000000405ff5\n.text:0000000000405ff8\n.text:0000000000405ffd\n.text:0000000000406000\n.text:0000000000406004\n.text:0000000000406008\n.text:000000000040600e\n.text:0000000000406012\n.text:0000000000406016\n.text:000000000040601b\n.text:000000000040601e\n.text:0000000000406023\n.text:0000000000406028\n.text:000000000040602d\n.text:0000000000406030\n.text:0000000000406035\n.text:0000000000406039\n.text:000000000040603d\n.text:0000000000406040\n.text:0000000000406043\n.text:0000000000406046\n.text:000000000040604b\n.text:000000000040604d\n.text:000000000040604f\n.text:0000000000406055\n.text:0000000000406058\n.text:000000000040605c\n.text:000000000040605f\n.text:0000000000406062\n.text:0000000000406067\n.text:000000000040606b\n.text:000000000040606e\n.text:0000000000406072\n.text:0000000000406075\n.text:0000000000406078\n.text:000000000040607b\n.text:0000000000406081\n.text:0000000000406084\n.text:0000000000406087\n.text:0000000000406089\n.text:000000000040608c\n.text:0000000000406090\n.text:0000000000406094\n.text:0000000000406099\n.text:000000000040609c\n.text:000000000040609f\n.text:00000000004060a4\n.text:00000000004060a6\n.text:00000000004060ab\n.text:00000000004060b0\n.text:00000000004060c0\n.text:00000000004060c5\n.text:00000000004060c8\n.text:00000000004060ce\n.text:00000000004060d2\n.text:00000000004060d4\n.text:00000000004060d7\n.text:00000000004060da\n.text:00000000004060df\n.text:00000000004060e2\n.text:00000000004060e5\n.text:00000000004060ea\n.text:00000000004060ee\n.text:00000000004060f1\n.text:00000000004060f4\n.text:00000000004060f6\n.text:00000000004060fb\n.text:00000000004060fe\n.text:0000000000406103\n.text:0000000000406106\n.text:000000000040610b\n.text:000000000040610d\n.text:0000000000406113\n.text:0000000000406116\n.text:000000000040611b\n.text:000000000040611d\n.text:000000000040611f\n.text:0000000000406124\n.text:0000000000406128\n.text:000000000040612b\n.text:000000000040612e\n.text:0000000000406134\n.text:0000000000406137\n.text:000000000040613c\n.text:000000000040613e\n.text:0000000000406142\n.text:0000000000406146\n.text:0000000000406148\n.text:000000000040614c\n.text:000000000040614e\n.text:0000000000406151\n.text:0000000000406153\n.text:0000000000406156\n.text:000000000040615b\n.text:0000000000406160\n.text:0000000000406163\n.text:0000000000406166\n.text:0000000000406169\n.text:000000000040616d\n.text:0000000000406172\n.text:0000000000406175\n.text:000000000040617b\n.text:0000000000406180\n.text:0000000000406183\n.text:0000000000406186\n.text:000000000040618a\n.text:000000000040618f\n.text:0000000000406194\n.text:0000000000406197\n.text:000000000040619a\n.text:000000000040619f\n.text:00000000004061a2\n.text:00000000004061a6\n.text:00000000004061ac\n.text:00000000004061ae\n.text:00000000004061b3\n.text:00000000004061b8\n.text:00000000004061ba\n.text:00000000004061bd\n.text:00000000004061c2\n.text:00000000004061c7\n.text:00000000004061cc\n.text:00000000004061d0\n.text:00000000004061d2\n.text:00000000004061d5\n.text:00000000004061da\n.text:00000000004061dd\n.text:00000000004061e0\n.text:00000000004061e4\n.text:00000000004061e6\n.text:00000000004061e9\n.text:00000000004061f0\n.text:00000000004061f5\n.text:00000000004061f8\n.text:00000000004061fd\n.text:0000000000406200\n.text:0000000000406207\n.text:0000000000406209\n.text:000000000040620e\n.text:0000000000406213\n.text:0000000000406218\n.text:000000000040621b\n.text:000000000040621e\n.text:0000000000406222\n.text:0000000000406227\n.text:000000000040622a\n.text:000000000040622d\n.text:0000000000406230\n.text:0000000000406236\n.text:0000000000406240\n.text:0000000000406243\n.text:0000000000406246\n.text:000000000040624b\n.text:000000000040624f\n.text:0000000000406252\n.text:0000000000406257\n.text:000000000040625a\n.text:000000000040625d\n.text:0000000000406260\n.text:0000000000406265\n.text:0000000000406267\n.text:000000000040626a\n.text:0000000000406270\n.text:0000000000406275\n.text:0000000000406278\n.text:000000000040627c\n.text:0000000000406280\n.text:0000000000406287\n.text:0000000000406289\n.text:000000000040628b\n.text:000000000040628d\n.text:0000000000406291\n.text:0000000000406292\n.text:0000000000406294\n.text:0000000000406296\n.text:0000000000406298\n.text:000000000040629a\n.text:000000000040629b\n.text:000000000040629c\n.text:000000000040629e\n.text:00000000004062a3\n.text:00000000004062a8\n.text:00000000004062ad\n.text:00000000004062b0\n.text:00000000004062b5\n'
p2330
tp2331
sS'hard_locale'
p2332
(S'\n__stdcall hard_locale()\n'
p2333
V\u000a_Bool hard_locale(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  undefined uVar2;\u000a  int __category;\u000a  \u000a  __s1 = setlocale(__category,(char *)0x0);\u000a  uVar2 = 1;\u000a  if (__s1 != (char *)0x0) {\u000a    if (((*__s1 != 'C') || (__s1[1] != 0)) && (iVar1 = strcmp(__s1,"POSIX"), iVar1 != 0)) {\u000a      return true;\u000a    }\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p2334
S'PUSH RBX\nXOR ESI,ESI\nCALL 0x00402910\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x0040b11d\nCMP byte ptr [RAX],0x43\nJNZ 0x0040b10a\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x0040b11b\nMOV ESI,0x414143\nMOV RDI,RAX\nCALL 0x00402770\nTEST EAX,EAX\nJNZ 0x0040b11d\nXOR EBX,EBX\nMOV EAX,EBX\nPOP RBX\nRET\n'
p2335
S'53\n31 f6\ne8 18 78 ff ff\nb3 01\n48 85 c0\n74 1e\n80 38 43\n75 06\n80 78 01 00\n74 11\nbe 43 41 41 00\n48 89 c7\ne8 59 76 ff ff\n85 c0\n75 02\n31 db\n89 d8\n5b\nc3\n'
p2336
S'.text:000000000040b0f0\n.text:000000000040b0f1\n.text:000000000040b0f3\n.text:000000000040b0f8\n.text:000000000040b0fa\n.text:000000000040b0fd\n.text:000000000040b0ff\n.text:000000000040b102\n.text:000000000040b104\n.text:000000000040b108\n.text:000000000040b10a\n.text:000000000040b10f\n.text:000000000040b112\n.text:000000000040b117\n.text:000000000040b119\n.text:000000000040b11b\n.text:000000000040b11d\n.text:000000000040b11f\n.text:000000000040b120\n'
p2337
tp2338
sS'simple_new'
p2339
(S'\n__stdcall simple_new(FILE * source, void * handler_arg)\n'
p2340
V\u000arandread_source * simple_new(FILE *source,void *handler_arg)\u000a\u000a{\u000a  randread_source *prVar1;\u000a  \u000a  prVar1 = (randread_source *)xmalloc(0x1038);\u000a  prVar1->source = source;\u000a  prVar1->handler = randread_error;\u000a  prVar1->handler_arg = handler_arg;\u000a  return prVar1;\u000a}\u000a\u000a
p2341
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV EDI,0x1038\nCALL 0x0040fb80\nMOV qword ptr [RAX],RBX\nMOV qword ptr [RAX + 0x8],0x40e720\nMOV qword ptr [RAX + 0x10],R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2342
S'41 56\n53\n50\n49 89 f6\n48 89 fb\nbf 38 10 00 00\ne8 fc 17 00 00\n48 89 18\n48 c7 40 08 20 e7 40 00\n4c 89 70 10\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2343
S'.text:000000000040e370\n.text:000000000040e372\n.text:000000000040e373\n.text:000000000040e374\n.text:000000000040e377\n.text:000000000040e37a\n.text:000000000040e37f\n.text:000000000040e384\n.text:000000000040e387\n.text:000000000040e38f\n.text:000000000040e393\n.text:000000000040e397\n.text:000000000040e398\n.text:000000000040e39a\n'
p2344
tp2345
sS'random_md5_state_init'
p2346
(S'\n__stdcall random_md5_state_init(char * random_source)\n'
p2347
V\u000avoid random_md5_state_init(char *random_source)\u000a\u000a{\u000a  int iVar1;\u000a  randread_source *s;\u000a  char *message;\u000a  uchar buf [16];\u000a  undefined auStack40 [24];\u000a  \u000a  s = randread_new(random_source,0x10);\u000a  if (s == (randread_source *)0x0) {\u000a    message = "open failed";\u000a  }\u000a  else {\u000a    randread(s,auStack40,0x10);\u000a    iVar1 = randread_free(s);\u000a    if (iVar1 == 0) {\u000a      md5_init_ctx(&random_md5_state);\u000a      md5_process_bytes(auStack40,0x10,&random_md5_state);\u000a      return;\u000a    }\u000a    message = "close failed";\u000a  }\u000a  message = (char *)dcgettext(0,message,5);\u000a                    /* WARNING: Subroutine does not return */\u000a  die(message,random_source);\u000a}\u000a\u000a
p2348
S'PUSH R14\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RDI\nMOV ESI,0x10\nCALL 0x0040e2c0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004051cc\nMOV RSI,RSP\nMOV EDX,0x10\nMOV RDI,RBX\nCALL 0x0040e560\nMOV RDI,RBX\nCALL 0x0040e700\nTEST EAX,EAX\nJNZ 0x004051d5\nMOV EDI,0x61aa88\nCALL 0x0040a0c0\nMOV RDI,RSP\nMOV ESI,0x10\nMOV EDX,0x61aa88\nCALL 0x0040aa20\nADD RSP,0x18\nPOP RBX\nPOP R14\nRET\nXOR EDI,EDI\nMOV ESI,0x413e0b\nJMP 0x004051dc\nXOR EDI,EDI\nMOV ESI,0x413822\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00405c70\n'
p2349
S'41 56\n53\n48 83 ec 18\n49 89 fe\nbe 10 00 00 00\ne8 3c 91 00 00\n48 89 c3\n48 85 db\n74 40\n48 89 e6\nba 10 00 00 00\n48 89 df\ne8 c4 93 00 00\n48 89 df\ne8 5c 95 00 00\n85 c0\n75 2d\nbf 88 aa 61 00\ne8 0e 4f 00 00\n48 89 e7\nbe 10 00 00 00\nba 88 aa 61 00\ne8 5c 58 00 00\n48 83 c4 18\n5b\n41 5e\nc3\n31 ff\nbe 0b 3e 41 00\neb 07\n31 ff\nbe 22 38 41 00\nba 05 00 00 00\ne8 ca d3 ff ff\n48 89 c7\n4c 89 f6\ne8 7f 0a 00 00\n'
p2350
S'.text:0000000000405170\n.text:0000000000405172\n.text:0000000000405173\n.text:0000000000405177\n.text:000000000040517a\n.text:000000000040517f\n.text:0000000000405184\n.text:0000000000405187\n.text:000000000040518a\n.text:000000000040518c\n.text:000000000040518f\n.text:0000000000405194\n.text:0000000000405197\n.text:000000000040519c\n.text:000000000040519f\n.text:00000000004051a4\n.text:00000000004051a6\n.text:00000000004051a8\n.text:00000000004051ad\n.text:00000000004051b2\n.text:00000000004051b5\n.text:00000000004051ba\n.text:00000000004051bf\n.text:00000000004051c4\n.text:00000000004051c8\n.text:00000000004051c9\n.text:00000000004051cb\n.text:00000000004051cc\n.text:00000000004051ce\n.text:00000000004051d3\n.text:00000000004051d5\n.text:00000000004051d7\n.text:00000000004051dc\n.text:00000000004051e1\n.text:00000000004051e6\n.text:00000000004051e9\n.text:00000000004051ec\n'
p2351
tp2352
sS'key_init'
p2353
(S'\n__stdcall key_init(keyfield * key)\n'
p2354
V\u000akeyfield * key_init(keyfield *key)\u000a\u000a{\u000a  *(undefined4 *)&key->skipsblanks = 0;\u000a  *(undefined4 *)&key->general_numeric = 0;\u000a  *(undefined4 *)&key->version = 0;\u000a  *(undefined4 *)&key->field_0x3c = 0;\u000a  *(undefined4 *)&key->ignore = 0;\u000a  *(undefined4 *)((long)&key->ignore + 4) = 0;\u000a  *(undefined4 *)&key->translate = 0;\u000a  *(undefined4 *)((long)&key->translate + 4) = 0;\u000a  *(undefined4 *)&key->eword = 0;\u000a  *(undefined4 *)((long)&key->eword + 4) = 0;\u000a  *(undefined4 *)&key->echar = 0;\u000a  *(undefined4 *)((long)&key->echar + 4) = 0;\u000a  *(undefined4 *)&key->sword = 0;\u000a  *(undefined4 *)((long)&key->sword + 4) = 0;\u000a  *(undefined4 *)&key->schar = 0;\u000a  *(undefined4 *)((long)&key->schar + 4) = 0;\u000a  key->next = (keyfield *)0x0;\u000a  key->eword = 0xffffffffffffffff;\u000a  return key;\u000a}\u000a\u000a
p2355
S'XORPS XMM0,XMM0\nMOVUPS xmmword ptr [RDI + 0x30],XMM0\nMOVUPS xmmword ptr [RDI + 0x20],XMM0\nMOVUPS xmmword ptr [RDI + 0x10],XMM0\nMOVUPS xmmword ptr [RDI],XMM0\nMOV qword ptr [RDI + 0x40],0x0\nMOV qword ptr [RDI + 0x10],-0x1\nMOV RAX,RDI\nRET\n'
p2356
S'0f 57 c0\n0f 11 47 30\n0f 11 47 20\n0f 11 47 10\n0f 11 07\n48 c7 47 40 00 00 00 00\n48 c7 47 10 ff ff ff ff\n48 89 f8\nc3\n'
p2357
S'.text:00000000004044a0\n.text:00000000004044a3\n.text:00000000004044a7\n.text:00000000004044ab\n.text:00000000004044af\n.text:00000000004044b2\n.text:00000000004044ba\n.text:00000000004044c2\n.text:00000000004044c5\n'
p2358
tp2359
sS'textdomain'
p2360
(S'\n__stdcall textdomain()\n'
p2361
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0061a0d8)();\u000a  return;\u000a}\u000a\u000a
p2362
S'JMP qword ptr [0x0061a0d8]\n'
p2363
S'ff 25 82 7b 21 00\n'
p2364
S'.plt:0000000000402550\n'
p2365
tp2366
sS'__stpcpy_chk'
p2367
(S'\n__stdcall __stpcpy_chk()\n'
p2368
V\u000avoid __stpcpy_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___stpcpy_chk_0061a228)();\u000a  return;\u000a}\u000a\u000a
p2369
S'JMP qword ptr [0x0061a228]\n'
p2370
S'ff 25 32 7a 21 00\n'
p2371
S'.plt:00000000004027f0\n'
p2372
tp2373
sS'ferror_unlocked'
p2374
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p2375
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0061a1d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2376
S'JMP qword ptr [0x0061a1d0]\n'
p2377
S'ff 25 8a 7a 21 00\n'
p2378
S'.plt:0000000000402740\n'
p2379
tp2380
sS'mergelines_node'
p2381
(S'\n__stdcall mergelines_node(merge_node * node, size_t total_lines, FILE * tfp, char * temp_output)\n'
p2382
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000avoid mergelines_node(merge_node *node,size_t total_lines,FILE *tfp,char *temp_output)\u000a\u000a{\u000a  line *plVar1;\u000a  line *plVar2;\u000a  line *plVar3;\u000a  long lVar4;\u000a  int iVar5;\u000a  line *b;\u000a  line *b_00;\u000a  line *a;\u000a  long lVar6;\u000a  line *a_00;\u000a  bool bVar7;\u000a  undefined4 uVar8;\u000a  undefined4 uVar9;\u000a  undefined4 uVar10;\u000a  undefined4 uVar11;\u000a  undefined4 uVar12;\u000a  undefined4 uVar13;\u000a  undefined4 uVar14;\u000a  undefined4 uVar15;\u000a  \u000a  plVar1 = node->lo;\u000a  plVar2 = node->hi;\u000a  lVar6 = (total_lines >> ((char)node->level * 2 + 2U & 0x3f)) + 1;\u000a  if (node->level < 2) {\u000a    a = node->lo;\u000a    b = node->hi;\u000a    lVar4 = lVar6;\u000a    if (a != node->end_lo) {\u000a      do {\u000a        lVar6 = lVar4;\u000a        if (b == node->end_hi) goto LAB_00409a00;\u000a        if (lVar6 == 0) break;\u000a        a = a + -1;\u000a        b = b + -1;\u000a        iVar5 = compare(a,b);\u000a        if (iVar5 < 1) {\u000a          node->lo = a;\u000a        }\u000a        else {\u000a          node->hi = b;\u000a          a = b;\u000a        }\u000a        write_unique(a,tfp,temp_output);\u000a        a = node->lo;\u000a        b = node->hi;\u000a        lVar4 = lVar6 + -1;\u000a      } while (a != node->end_lo);\u000a      lVar6 = lVar6 + -1;\u000a    }\u000aLAB_00409a00:\u000a    if (node->nhi == (long)((long)plVar2 - (long)b) >> 5) {\u000a      if ((lVar6 != 0) && (a = node->lo, a != node->end_lo)) {\u000a        lVar6 = -lVar6;\u000a        do {\u000a          lVar6 = lVar6 + 1;\u000a          node->lo = a + -1;\u000a          write_unique(a + -1,tfp,temp_output);\u000a          if (lVar6 == 0) break;\u000a          a = node->lo;\u000a        } while (a != node->end_lo);\u000a      }\u000a    }\u000a    else {\u000a      if (((node->nlo == (long)((long)plVar1 - (long)a) >> 5) && (lVar6 != 0)) &&\u000a         (a = node->hi, a != node->end_hi)) {\u000a        lVar6 = -lVar6;\u000a        do {\u000a          lVar6 = lVar6 + 1;\u000a          node->hi = a + -1;\u000a          write_unique(a + -1,tfp,temp_output);\u000a          if (lVar6 == 0) break;\u000a          a = node->hi;\u000a        } while (a != node->end_hi);\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    a = *node->dest;\u000a    while( true ) {\u000a      b = node->lo;\u000a      plVar3 = node->hi;\u000a      if (((b == node->end_lo) || (plVar3 == node->end_hi)) ||\u000a         (bVar7 = lVar6 == 0, lVar6 = lVar6 + -1, bVar7)) break;\u000a      a_00 = b + -1;\u000a      b_00 = plVar3 + -1;\u000a      iVar5 = compare(a_00,b_00);\u000a      if (iVar5 < 1) {\u000a        node->lo = a_00;\u000a        uVar8 = *(undefined4 *)&a_00->text;\u000a        uVar9 = *(undefined4 *)((long)&b[-1].text + 4);\u000a        uVar10 = *(undefined4 *)&b[-1].length;\u000a        uVar11 = *(undefined4 *)((long)&b[-1].length + 4);\u000a        uVar12 = *(undefined4 *)&b[-1].keybeg;\u000a        uVar13 = *(undefined4 *)((long)&b[-1].keybeg + 4);\u000a        uVar14 = *(undefined4 *)&b[-1].keylim;\u000a        uVar15 = *(undefined4 *)((long)&b[-1].keylim + 4);\u000a      }\u000a      else {\u000a        node->hi = b_00;\u000a        uVar8 = *(undefined4 *)&b_00->text;\u000a        uVar9 = *(undefined4 *)((long)&plVar3[-1].text + 4);\u000a        uVar10 = *(undefined4 *)&plVar3[-1].length;\u000a        uVar11 = *(undefined4 *)((long)&plVar3[-1].length + 4);\u000a        uVar12 = *(undefined4 *)&plVar3[-1].keybeg;\u000a        uVar13 = *(undefined4 *)((long)&plVar3[-1].keybeg + 4);\u000a        uVar14 = *(undefined4 *)&plVar3[-1].keylim;\u000a        uVar15 = *(undefined4 *)((long)&plVar3[-1].keylim + 4);\u000a      }\u000a      *(undefined4 *)&a[-1].keybeg = uVar12;\u000a      *(undefined4 *)((long)&a[-1].keybeg + 4) = uVar13;\u000a      *(undefined4 *)&a[-1].keylim = uVar14;\u000a      *(undefined4 *)((long)&a[-1].keylim + 4) = uVar15;\u000a      *(undefined4 *)&a[-1].text = uVar8;\u000a      *(undefined4 *)((long)&a[-1].text + 4) = uVar9;\u000a      *(undefined4 *)&a[-1].length = uVar10;\u000a      *(undefined4 *)((long)&a[-1].length + 4) = uVar11;\u000a      a = a + -1;\u000a    }\u000a    if (node->nhi == (long)((long)plVar2 - (long)plVar3) >> 5) {\u000a      if ((lVar6 != 0) && (b = node->lo, b != node->end_lo)) {\u000a        lVar6 = -lVar6;\u000a        do {\u000a          lVar6 = lVar6 + 1;\u000a          node->lo = b + -1;\u000a          uVar8 = *(undefined4 *)&b[-1].text;\u000a          uVar12 = *(undefined4 *)((long)&b[-1].text + 4);\u000a          uVar13 = *(undefined4 *)&b[-1].length;\u000a          uVar14 = *(undefined4 *)((long)&b[-1].length + 4);\u000a          uVar9 = *(undefined4 *)((long)&b[-1].keybeg + 4);\u000a          uVar10 = *(undefined4 *)&b[-1].keylim;\u000a          uVar11 = *(undefined4 *)((long)&b[-1].keylim + 4);\u000a          *(undefined4 *)&a[-1].keybeg = *(undefined4 *)&b[-1].keybeg;\u000a          *(undefined4 *)((long)&a[-1].keybeg + 4) = uVar9;\u000a          *(undefined4 *)&a[-1].keylim = uVar10;\u000a          *(undefined4 *)((long)&a[-1].keylim + 4) = uVar11;\u000a          *(undefined4 *)&a[-1].text = uVar8;\u000a          *(undefined4 *)((long)&a[-1].text + 4) = uVar12;\u000a          *(undefined4 *)&a[-1].length = uVar13;\u000a          *(undefined4 *)((long)&a[-1].length + 4) = uVar14;\u000a          a = a + -1;\u000a          if (lVar6 == 0) break;\u000a          b = node->lo;\u000a        } while (b != node->end_lo);\u000a      }\u000a    }\u000a    else {\u000a      if (((node->nlo == (long)((long)plVar1 - (long)b) >> 5) && (lVar6 != 0)) &&\u000a         (b = node->hi, b != node->end_hi)) {\u000a        lVar6 = -lVar6;\u000a        do {\u000a          lVar6 = lVar6 + 1;\u000a          node->hi = b + -1;\u000a          uVar8 = *(undefined4 *)&b[-1].text;\u000a          uVar12 = *(undefined4 *)((long)&b[-1].text + 4);\u000a          uVar13 = *(undefined4 *)&b[-1].length;\u000a          uVar14 = *(undefined4 *)((long)&b[-1].length + 4);\u000a          uVar9 = *(undefined4 *)((long)&b[-1].keybeg + 4);\u000a          uVar10 = *(undefined4 *)&b[-1].keylim;\u000a          uVar11 = *(undefined4 *)((long)&b[-1].keylim + 4);\u000a          *(undefined4 *)&a[-1].keybeg = *(undefined4 *)&b[-1].keybeg;\u000a          *(undefined4 *)((long)&a[-1].keybeg + 4) = uVar9;\u000a          *(undefined4 *)&a[-1].keylim = uVar10;\u000a          *(undefined4 *)((long)&a[-1].keylim + 4) = uVar11;\u000a          *(undefined4 *)&a[-1].text = uVar8;\u000a          *(undefined4 *)((long)&a[-1].text + 4) = uVar12;\u000a          *(undefined4 *)&a[-1].length = uVar13;\u000a          *(undefined4 *)((long)&a[-1].length + 4) = uVar14;\u000a          a = a + -1;\u000a          if (lVar6 == 0) break;\u000a          b = node->hi;\u000a        } while (b != node->end_hi);\u000a      }\u000a    }\u000a    *(line **)&((line *)node->dest)->text = a;\u000a  }\u000a  node->nlo = node->nlo - ((long)((long)plVar1 - (long)node->lo) >> 5);\u000a  node->nhi = node->nhi - ((long)((long)plVar2 - (long)node->hi) >> 5);\u000a  return;\u000a}\u000a\u000a
p2383
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV RBP,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nMOV R14,qword ptr [R13]\nMOV RAX,qword ptr [R13 + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EAX,dword ptr [R13 + 0x50]\nLEA ECX,[RAX + RAX*0x1 + 0x2]\nSHR R12,CL\nINC R12\nCMP EAX,0x1\nJBE 0x0040997f\nMOV RAX,qword ptr [R13 + 0x20]\nMOV RBP,qword ptr [RAX]\nJMP 0x00409918\nMOVUPS xmmword ptr [RBP + 0x10],XMM1\nMOVUPS xmmword ptr [RBP],XMM0\nMOV R15,qword ptr [R13]\nMOV RBX,qword ptr [R13 + 0x8]\nCMP R15,qword ptr [R13 + 0x10]\nJZ 0x00409a6e\nCMP RBX,qword ptr [R13 + 0x18]\nJZ 0x00409a6e\nTEST R12,R12\nLEA R12,[R12 + -0x1]\nJZ 0x00409a6e\nADD R15,-0x20\nADD RBX,-0x20\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x004062d0\nADD RBP,-0x20\nTEST EAX,EAX\nJLE 0x00409970\nMOV qword ptr [R13 + 0x8],RBX\nMOVUPS XMM0,xmmword ptr [RBX]\nMOVUPS XMM1,xmmword ptr [RBX + 0x10]\nJMP 0x00409910\nMOV qword ptr [R13],R15\nMOVUPS XMM0,xmmword ptr [R15]\nMOVUPS XMM1,xmmword ptr [R15 + 0x10]\nJMP 0x00409910\nMOV qword ptr [RSP],RBP\nMOV RBX,qword ptr [R13]\nMOV RBP,qword ptr [R13 + 0x8]\nCMP RBX,qword ptr [R13 + 0x10]\nJZ 0x00409a00\nMOV qword ptr [RSP + 0x10],R14\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV R14,R12\nCMP RBP,qword ptr [R13 + 0x18]\nJZ 0x004099f8\nTEST R14,R14\nJZ 0x004099f5\nADD RBX,-0x20\nADD RBP,-0x20\nMOV RDI,RBX\nMOV RSI,RBP\nCALL 0x004062d0\nTEST EAX,EAX\nJLE 0x004099d0\nMOV qword ptr [R13 + 0x8],RBP\nMOV RDI,RBP\nJMP 0x004099d7\nMOV qword ptr [R13],RBX\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP]\nCALL 0x004091f0\nLEA R12,[R14 + -0x1]\nMOV RBX,qword ptr [R13]\nMOV RBP,qword ptr [R13 + 0x8]\nCMP RBX,qword ptr [R13 + 0x10]\nJNZ 0x004099a0\nDEC R14\nMOV R12,R14\nMOV R14,qword ptr [RSP + 0x10]\nMOV RAX,qword ptr [RSP + 0x8]\nSUB RAX,RBP\nSAR RAX,0x5\nCMP qword ptr [R13 + 0x30],RAX\nJNZ 0x00409ae7\nTEST R12,R12\nMOV RBP,qword ptr [RSP]\nJZ 0x00409ba5\nMOV RDI,qword ptr [R13]\nCMP RDI,qword ptr [R13 + 0x10]\nJZ 0x00409ba5\nMOV EBX,0x1\nSUB RBX,R12\nNOP dword ptr [RAX]\nADD RDI,-0x20\nMOV qword ptr [R13],RDI\nMOV RSI,R15\nMOV RDX,RBP\nCALL 0x004091f0\nTEST RBX,RBX\nJZ 0x00409ba5\nMOV RDI,qword ptr [R13]\nINC RBX\nCMP RDI,qword ptr [R13 + 0x10]\nJNZ 0x00409a40\nJMP 0x00409ba5\nMOV RAX,qword ptr [RSP + 0x8]\nSUB RAX,RBX\nSAR RAX,0x5\nCMP qword ptr [R13 + 0x30],RAX\nJNZ 0x00409b47\nTEST R12,R12\nJZ 0x00409b9e\nMOV RCX,qword ptr [R13]\nCMP RCX,qword ptr [R13 + 0x10]\nJZ 0x00409b9e\nMOV EAX,0x1\nSUB RAX,R12\nNOP dword ptr CS:[RAX + RAX*0x1]\nLEA RDX,[RCX + -0x20]\nMOV qword ptr [R13],RDX\nMOVUPS XMM0,xmmword ptr [RCX + -0x20]\nMOVUPS XMM1,xmmword ptr [RCX + -0x10]\nMOVUPS xmmword ptr [RBP + -0x10],XMM1\nMOVUPS xmmword ptr [RBP + -0x20],XMM0\nLEA RBP,[RBP + -0x20]\nTEST RAX,RAX\nJZ 0x00409b9e\nMOV RCX,qword ptr [R13]\nINC RAX\nCMP RCX,qword ptr [R13 + 0x10]\nJNZ 0x00409ab0\nJMP 0x00409b9e\nMOV RAX,R14\nSUB RAX,RBX\nSAR RAX,0x5\nCMP qword ptr [R13 + 0x28],RAX\nMOV RBP,qword ptr [RSP]\nJNZ 0x00409ba5\nTEST R12,R12\nJZ 0x00409ba5\nMOV RDI,qword ptr [R13 + 0x8]\nCMP RDI,qword ptr [R13 + 0x18]\nJZ 0x00409ba5\nMOV EBX,0x1\nSUB RBX,R12\nNOP\nADD RDI,-0x20\nMOV qword ptr [R13 + 0x8],RDI\nMOV RSI,R15\nMOV RDX,RBP\nCALL 0x004091f0\nTEST RBX,RBX\nJZ 0x00409ba5\nMOV RDI,qword ptr [R13 + 0x8]\nINC RBX\nCMP RDI,qword ptr [R13 + 0x18]\nJNZ 0x00409b20\nJMP 0x00409ba5\nMOV RAX,R14\nSUB RAX,R15\nSAR RAX,0x5\nCMP qword ptr [R13 + 0x28],RAX\nJNZ 0x00409b9e\nTEST R12,R12\nJZ 0x00409b9e\nMOV RCX,qword ptr [R13 + 0x8]\nCMP RCX,qword ptr [R13 + 0x18]\nJZ 0x00409b9e\nMOV EAX,0x1\nSUB RAX,R12\nNOP\nLEA RDX,[RCX + -0x20]\nMOV qword ptr [R13 + 0x8],RDX\nMOVUPS XMM0,xmmword ptr [RCX + -0x20]\nMOVUPS XMM1,xmmword ptr [RCX + -0x10]\nMOVUPS xmmword ptr [RBP + -0x10],XMM1\nMOVUPS xmmword ptr [RBP + -0x20],XMM0\nLEA RBP,[RBP + -0x20]\nTEST RAX,RAX\nJZ 0x00409b9e\nMOV RCX,qword ptr [R13 + 0x8]\nINC RAX\nCMP RCX,qword ptr [R13 + 0x18]\nJNZ 0x00409b70\nMOV RAX,qword ptr [R13 + 0x20]\nMOV qword ptr [RAX],RBP\nSUB R14,qword ptr [R13]\nSAR R14,0x5\nMOV RAX,qword ptr [RSP + 0x8]\nSUB RAX,qword ptr [R13 + 0x8]\nSAR RAX,0x5\nSUB qword ptr [R13 + 0x28],R14\nSUB qword ptr [R13 + 0x30],RAX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2384
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 cd\n49 89 d7\n49 89 f4\n49 89 fd\n4d 8b 75 00\n49 8b 45 08\n48 89 44 24 08\n41 8b 45 50\n8d 4c 00 02\n49 d3 ec\n49 ff c4\n83 f8 01\n0f 86 81 00 00 00\n49 8b 45 20\n48 8b 28\neb 11\n0f 11 4d 10\n0f 11 45 00\n4d 8b 7d 00\n49 8b 5d 08\n4d 3b 7d 10\n0f 84 44 01 00 00\n49 3b 5d 18\n0f 84 3a 01 00 00\n4d 85 e4\n4d 8d 64 24 ff\n0f 84 2c 01 00 00\n49 83 c7 e0\n48 83 c3 e0\n4c 89 ff\n48 89 de\ne8 7b c9 ff ff\n48 83 c5 e0\n85 c0\n7e 13\n49 89 5d 08\n0f 10 03\n0f 10 4b 10\neb a6\n4d 89 7d 00\n41 0f 10 07\n41 0f 10 4f 10\neb 91\n48 89 2c 24\n49 8b 5d 00\n49 8b 6d 08\n49 3b 5d 10\n74 6f\n4c 89 74 24 10\n66 2e 0f 1f 84 00 00 00 00 00\n4d 89 e6\n49 3b 6d 18\n74 4f\n4d 85 f6\n74 47\n48 83 c3 e0\n48 83 c5 e0\n48 89 df\n48 89 ee\ne8 0f c9 ff ff\n85 c0\n7e 0b\n49 89 6d 08\n48 89 ef\neb 09\n49 89 5d 00\n48 89 df\n4c 89 fe\n48 8b 14 24\ne8 0d f8 ff ff\n4d 8d 66 ff\n49 8b 5d 00\n49 8b 6d 08\n49 3b 5d 10\n75 ab\n49 ff ce\n4d 89 f4\n4c 8b 74 24 10\n48 8b 44 24 08\n48 29 e8\n48 c1 f8 05\n49 39 45 30\n0f 85 d1 00 00 00\n4d 85 e4\n48 8b 2c 24\n0f 84 82 01 00 00\n49 8b 7d 00\n49 3b 7d 10\n0f 84 74 01 00 00\nbb 01 00 00 00\n4c 29 e3\n0f 1f 80 00 00 00 00\n48 83 c7 e0\n49 89 7d 00\n4c 89 fe\n48 89 ea\ne8 9d f7 ff ff\n48 85 db\n0f 84 49 01 00 00\n49 8b 7d 00\n48 ff c3\n49 3b 7d 10\n75 d7\ne9 37 01 00 00\n48 8b 44 24 08\n48 29 d8\n48 c1 f8 05\n49 39 45 30\n0f 85 c3 00 00 00\n4d 85 e4\n0f 84 11 01 00 00\n49 8b 4d 00\n49 3b 4d 10\n0f 84 03 01 00 00\nb8 01 00 00 00\n4c 29 e0\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8d 51 e0\n49 89 55 00\n0f 10 41 e0\n0f 10 49 f0\n0f 11 4d f0\n0f 11 45 e0\n48 8d 6d e0\n48 85 c0\n0f 84 c9 00 00 00\n49 8b 4d 00\n48 ff c0\n49 3b 4d 10\n75 ce\ne9 b7 00 00 00\n4c 89 f0\n48 29 d8\n48 c1 f8 05\n49 39 45 28\n48 8b 2c 24\n0f 85 a6 00 00 00\n4d 85 e4\n0f 84 9d 00 00 00\n49 8b 7d 08\n49 3b 7d 18\n0f 84 8f 00 00 00\nbb 01 00 00 00\n4c 29 e3\n66 90\n48 83 c7 e0\n49 89 7d 08\n4c 89 fe\n48 89 ea\ne8 bd f6 ff ff\n48 85 db\n74 6d\n49 8b 7d 08\n48 ff c3\n49 3b 7d 18\n75 db\neb 5e\n4c 89 f0\n4c 29 f8\n48 c1 f8 05\n49 39 45 28\n75 47\n4d 85 e4\n74 42\n49 8b 4d 08\n49 3b 4d 18\n74 38\nb8 01 00 00 00\n4c 29 e0\n66 90\n48 8d 51 e0\n49 89 55 08\n0f 10 41 e0\n0f 10 49 f0\n0f 11 4d f0\n0f 11 45 e0\n48 8d 6d e0\n48 85 c0\n74 0d\n49 8b 4d 08\n48 ff c0\n49 3b 4d 18\n75 d2\n49 8b 45 20\n48 89 28\n4d 2b 75 00\n49 c1 fe 05\n48 8b 44 24 08\n49 2b 45 08\n48 c1 f8 05\n4d 29 75 28\n49 29 45 30\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2385
S'.text:00000000004098c0\n.text:00000000004098c1\n.text:00000000004098c3\n.text:00000000004098c5\n.text:00000000004098c7\n.text:00000000004098c9\n.text:00000000004098ca\n.text:00000000004098ce\n.text:00000000004098d1\n.text:00000000004098d4\n.text:00000000004098d7\n.text:00000000004098da\n.text:00000000004098de\n.text:00000000004098e2\n.text:00000000004098e7\n.text:00000000004098eb\n.text:00000000004098ef\n.text:00000000004098f2\n.text:00000000004098f5\n.text:00000000004098f8\n.text:00000000004098fe\n.text:0000000000409902\n.text:0000000000409905\n.text:0000000000409910\n.text:0000000000409914\n.text:0000000000409918\n.text:000000000040991c\n.text:0000000000409920\n.text:0000000000409924\n.text:000000000040992a\n.text:000000000040992e\n.text:0000000000409934\n.text:0000000000409937\n.text:000000000040993c\n.text:0000000000409942\n.text:0000000000409946\n.text:000000000040994a\n.text:000000000040994d\n.text:0000000000409950\n.text:0000000000409955\n.text:0000000000409959\n.text:000000000040995b\n.text:000000000040995d\n.text:0000000000409961\n.text:0000000000409964\n.text:0000000000409968\n.text:0000000000409970\n.text:0000000000409974\n.text:0000000000409978\n.text:000000000040997d\n.text:000000000040997f\n.text:0000000000409983\n.text:0000000000409987\n.text:000000000040998b\n.text:000000000040998f\n.text:0000000000409991\n.text:0000000000409996\n.text:00000000004099a0\n.text:00000000004099a3\n.text:00000000004099a7\n.text:00000000004099a9\n.text:00000000004099ac\n.text:00000000004099ae\n.text:00000000004099b2\n.text:00000000004099b6\n.text:00000000004099b9\n.text:00000000004099bc\n.text:00000000004099c1\n.text:00000000004099c3\n.text:00000000004099c5\n.text:00000000004099c9\n.text:00000000004099cc\n.text:00000000004099d0\n.text:00000000004099d4\n.text:00000000004099d7\n.text:00000000004099da\n.text:00000000004099de\n.text:00000000004099e3\n.text:00000000004099e7\n.text:00000000004099eb\n.text:00000000004099ef\n.text:00000000004099f3\n.text:00000000004099f5\n.text:00000000004099f8\n.text:00000000004099fb\n.text:0000000000409a00\n.text:0000000000409a05\n.text:0000000000409a08\n.text:0000000000409a0c\n.text:0000000000409a10\n.text:0000000000409a16\n.text:0000000000409a19\n.text:0000000000409a1d\n.text:0000000000409a23\n.text:0000000000409a27\n.text:0000000000409a2b\n.text:0000000000409a31\n.text:0000000000409a36\n.text:0000000000409a39\n.text:0000000000409a40\n.text:0000000000409a44\n.text:0000000000409a48\n.text:0000000000409a4b\n.text:0000000000409a4e\n.text:0000000000409a53\n.text:0000000000409a56\n.text:0000000000409a5c\n.text:0000000000409a60\n.text:0000000000409a63\n.text:0000000000409a67\n.text:0000000000409a69\n.text:0000000000409a6e\n.text:0000000000409a73\n.text:0000000000409a76\n.text:0000000000409a7a\n.text:0000000000409a7e\n.text:0000000000409a84\n.text:0000000000409a87\n.text:0000000000409a8d\n.text:0000000000409a91\n.text:0000000000409a95\n.text:0000000000409a9b\n.text:0000000000409aa0\n.text:0000000000409aa3\n.text:0000000000409ab0\n.text:0000000000409ab4\n.text:0000000000409ab8\n.text:0000000000409abc\n.text:0000000000409ac0\n.text:0000000000409ac4\n.text:0000000000409ac8\n.text:0000000000409acc\n.text:0000000000409acf\n.text:0000000000409ad5\n.text:0000000000409ad9\n.text:0000000000409adc\n.text:0000000000409ae0\n.text:0000000000409ae2\n.text:0000000000409ae7\n.text:0000000000409aea\n.text:0000000000409aed\n.text:0000000000409af1\n.text:0000000000409af5\n.text:0000000000409af9\n.text:0000000000409aff\n.text:0000000000409b02\n.text:0000000000409b08\n.text:0000000000409b0c\n.text:0000000000409b10\n.text:0000000000409b16\n.text:0000000000409b1b\n.text:0000000000409b1e\n.text:0000000000409b20\n.text:0000000000409b24\n.text:0000000000409b28\n.text:0000000000409b2b\n.text:0000000000409b2e\n.text:0000000000409b33\n.text:0000000000409b36\n.text:0000000000409b38\n.text:0000000000409b3c\n.text:0000000000409b3f\n.text:0000000000409b43\n.text:0000000000409b45\n.text:0000000000409b47\n.text:0000000000409b4a\n.text:0000000000409b4d\n.text:0000000000409b51\n.text:0000000000409b55\n.text:0000000000409b57\n.text:0000000000409b5a\n.text:0000000000409b5c\n.text:0000000000409b60\n.text:0000000000409b64\n.text:0000000000409b66\n.text:0000000000409b6b\n.text:0000000000409b6e\n.text:0000000000409b70\n.text:0000000000409b74\n.text:0000000000409b78\n.text:0000000000409b7c\n.text:0000000000409b80\n.text:0000000000409b84\n.text:0000000000409b88\n.text:0000000000409b8c\n.text:0000000000409b8f\n.text:0000000000409b91\n.text:0000000000409b95\n.text:0000000000409b98\n.text:0000000000409b9c\n.text:0000000000409b9e\n.text:0000000000409ba2\n.text:0000000000409ba5\n.text:0000000000409ba9\n.text:0000000000409bad\n.text:0000000000409bb2\n.text:0000000000409bb6\n.text:0000000000409bba\n.text:0000000000409bbe\n.text:0000000000409bc2\n.text:0000000000409bc6\n.text:0000000000409bc7\n.text:0000000000409bc9\n.text:0000000000409bcb\n.text:0000000000409bcd\n.text:0000000000409bcf\n.text:0000000000409bd0\n'
p2386
tp2387
sS'locale_charset'
p2388
(S'\n__stdcall locale_charset()\n'
p2389
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0041108d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0041108d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p2390
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00402880\nTEST RAX,RAX\nMOV R14D,0x414bf9\nCMOVNZ R14,RAX\nCALL 0x004110a0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00411065\nJMP 0x0041108d\nMOV RDI,RBX\nCALL 0x004025d0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004025d0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0041108d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00402770\nTEST EAX,EAX\nJZ 0x00411080\nCMP BPL,0x2a\nJNZ 0x00411040\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00411040\nMOV RDI,RBX\nCALL 0x004025d0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x415798\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2391
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 62 18 ff ff\n48 85 c0\n41 be f9 4b 41 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 88 15 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 7a 15 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 00 17 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 48 15 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 98 57 41 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p2392
S'.text:0000000000411010\n.text:0000000000411011\n.text:0000000000411013\n.text:0000000000411014\n.text:0000000000411019\n.text:000000000041101e\n.text:0000000000411021\n.text:0000000000411027\n.text:000000000041102b\n.text:0000000000411030\n.text:0000000000411033\n.text:0000000000411036\n.text:0000000000411039\n.text:000000000041103b\n.text:0000000000411040\n.text:0000000000411043\n.text:0000000000411048\n.text:000000000041104c\n.text:0000000000411051\n.text:0000000000411056\n.text:000000000041105b\n.text:0000000000411060\n.text:0000000000411063\n.text:0000000000411065\n.text:0000000000411068\n.text:000000000041106b\n.text:0000000000411070\n.text:0000000000411072\n.text:0000000000411074\n.text:0000000000411078\n.text:000000000041107a\n.text:000000000041107e\n.text:0000000000411080\n.text:0000000000411083\n.text:0000000000411088\n.text:000000000041108d\n.text:0000000000411091\n.text:0000000000411096\n.text:000000000041109a\n.text:000000000041109b\n.text:000000000041109d\n.text:000000000041109e\n'
p2393
tp2394
sS'set_program_name'
p2395
(S'\n__stdcall set_program_name(char * argv0)\n'
p2396
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p2397
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040ca41\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00402640\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040ca2b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x414540\nMOV EDX,0x7\nCALL 0x00402450\nTEST EAX,EAX\nJNZ 0x0040ca2b\nMOV ESI,0x414548\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00402450\nTEST EAX,EAX\nJNZ 0x0040ca28\nADD R14,0x3\nMOV qword ptr [0x0061a560],R14\nMOV RBX,R14\nMOV qword ptr [0x0061ab78],RBX\nMOV qword ptr [0x0061a588],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0061a5a0]\nMOV EDI,0x414508\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00402a60\nCALL 0x00402420\n'
p2398
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 67 5c ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 40 45 41 00\nba 07 00 00 00\ne8 4d 5a ff ff\n85 c0\n75 24\nbe 48 45 41 00\nba 03 00 00 00\n4c 89 f7\ne8 37 5a ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 38 db 20 00\n4c 89 f3\n48 89 1d 46 e1 20 00\n48 89 1d 4f db 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 58 db 20 00\nbf 08 45 41 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 04 60 ff ff\ne8 bf 59 ff ff\n'
p2399
S'.text:000000000040c9c0\n.text:000000000040c9c2\n.text:000000000040c9c3\n.text:000000000040c9c4\n.text:000000000040c9c7\n.text:000000000040c9ca\n.text:000000000040c9cc\n.text:000000000040c9d1\n.text:000000000040c9d4\n.text:000000000040c9d9\n.text:000000000040c9dc\n.text:000000000040c9e0\n.text:000000000040c9e4\n.text:000000000040c9e7\n.text:000000000040c9ea\n.text:000000000040c9ee\n.text:000000000040c9f0\n.text:000000000040c9f4\n.text:000000000040c9f9\n.text:000000000040c9fe\n.text:000000000040ca03\n.text:000000000040ca05\n.text:000000000040ca07\n.text:000000000040ca0c\n.text:000000000040ca11\n.text:000000000040ca14\n.text:000000000040ca19\n.text:000000000040ca1b\n.text:000000000040ca1d\n.text:000000000040ca21\n.text:000000000040ca28\n.text:000000000040ca2b\n.text:000000000040ca32\n.text:000000000040ca39\n.text:000000000040ca3d\n.text:000000000040ca3e\n.text:000000000040ca40\n.text:000000000040ca41\n.text:000000000040ca48\n.text:000000000040ca4d\n.text:000000000040ca52\n.text:000000000040ca57\n.text:000000000040ca5c\n'
p2400
tp2401
sS'quotearg_buffer'
p2402
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p2403
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p2404
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x61ab80\nCMOVNZ RBP,R8\nCALL 0x00402430\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x0040cbe0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2405
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 80 ab 61 00\n49 0f 45 e8\ne8 a8 58 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2406
S'.text:000000000040cb60\n.text:000000000040cb61\n.text:000000000040cb63\n.text:000000000040cb65\n.text:000000000040cb67\n.text:000000000040cb69\n.text:000000000040cb6a\n.text:000000000040cb6b\n.text:000000000040cb6e\n.text:000000000040cb71\n.text:000000000040cb74\n.text:000000000040cb77\n.text:000000000040cb7a\n.text:000000000040cb7f\n.text:000000000040cb83\n.text:000000000040cb88\n.text:000000000040cb8b\n.text:000000000040cb8d\n.text:000000000040cb91\n.text:000000000040cb95\n.text:000000000040cb99\n.text:000000000040cb9d\n.text:000000000040cba0\n.text:000000000040cba3\n.text:000000000040cba6\n.text:000000000040cba9\n.text:000000000040cbac\n.text:000000000040cbaf\n.text:000000000040cbb3\n.text:000000000040cbb4\n.text:000000000040cbb9\n.text:000000000040cbbd\n.text:000000000040cbc1\n.text:000000000040cbc3\n.text:000000000040cbc7\n.text:000000000040cbc8\n.text:000000000040cbca\n.text:000000000040cbcc\n.text:000000000040cbce\n.text:000000000040cbd0\n.text:000000000040cbd1\n'
p2407
tp2408
sS'specify_sort_size'
p2409
(S'\n__stdcall specify_sort_size(char * s)\n'
p2410
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid specify_sort_size(char *s)\u000a\u000a{\u000a  option **ppoVar1;\u000a  strtol_error sVar2;\u000a  char *s_00;\u000a  option *long_options;\u000a  double dVar3;\u000a  undefined auVar4 [16];\u000a  ulong local_28;\u000a  char *local_20;\u000a  \u000a  sVar2 = xstrtoumax(s_00,&local_20,(uintmax_t *)0xa,(char *)&local_28);\u000a  if (sVar2 == LONGINT_INVALID_SUFFIX_CHAR) {\u000a    sVar2 = LONGINT_INVALID_SUFFIX_CHAR;\u000a    if ((9 < (int)local_20[-1] - 0x30U) || (local_20[1] != 0)) goto LAB_004049ef;\u000a    if (*local_20 == 'b') goto LAB_004049bc;\u000a    if (*local_20 != '%') goto LAB_004049ef;\u000a    dVar3 = physmem_total();\u000a    auVar4 = subpd(CONCAT88(SUB168(CONCAT412(DAT_004125c4,\u000a                                             ZEXT812(local_28) & (undefined  [12])0xffffffffffffffff\u000a                                             | (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                            CONCAT44(DAT_004125c0,\u000a                                     SUB124(ZEXT812(local_28) & (undefined  [12])0xffffffffffffffff,\u000a                                            0))),_DAT_004125d0);\u000a    auVar4 = addpd(CONCAT412(SUB164(auVar4 >> 0x20,0),\u000a                             CONCAT48(SUB164(auVar4,0),SUB168(auVar4 >> 0x40,0))),auVar4);\u000a    dVar3 = (SUB168(auVar4,0) * dVar3) / _DAT_004125f0;\u000a    if (dVar3 < DAT_004125f8) {\u000a      local_28 = (long)dVar3;\u000a      if (DAT_00412600 <= dVar3) {\u000a        local_28 = (long)(dVar3 - DAT_00412600) ^ 0x8000000000000000;\u000a      }\u000a      goto LAB_004049bc;\u000a    }\u000a  }\u000a  else {\u000a    if (sVar2 != LONGINT_OK) goto LAB_004049ef;\u000a    if (9 < (int)local_20[-1] - 0x30U) {\u000aLAB_004049bc:\u000a      if ((sort_size <= local_28) && (sort_size = (ulong)nmerge * 0x22, sort_size < local_28)) {\u000a        sort_size = local_28;\u000a      }\u000a      return;\u000a    }\u000a    if (local_28 >> 0x36 == 0) {\u000a      local_28 = local_28 << 10;\u000a      goto LAB_004049bc;\u000a    }\u000a  }\u000a  sVar2 = LONGINT_OVERFLOW;\u000aLAB_004049ef:\u000a  long_options = (option *)(ulong)sVar2;\u000a  xstrtol_fatal(long_options,(char *)((ulong)s & 0xffffffff));\u000a  if (temp_dir_count == temp_dir_alloc) {\u000a    temp_dirs = (char **)x2nrealloc(temp_dirs,&temp_dir_alloc,8);\u000a  }\u000a  ppoVar1 = (option **)(temp_dirs + temp_dir_count);\u000a  temp_dir_count = temp_dir_count + 1;\u000a  *ppoVar1 = long_options;\u000a  return;\u000a}\u000a\u000a
p2411
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV RBX,RDX\nMOV EBP,ESI\nMOV R14D,EDI\nLEA RSI,[RSP + 0x8]\nMOV RCX,RSP\nMOV EDX,0xa\nMOV R8D,0x413c9e\nMOV RDI,RBX\nCALL 0x004102c0\nCMP EAX,0x2\nJZ 0x00404917\nTEST EAX,EAX\nJNZ 0x004049ef\nMOV RAX,qword ptr [RSP + 0x8]\nMOVSX EAX,byte ptr [RAX + -0x1]\nADD EAX,-0x30\nCMP EAX,0x9\nJA 0x004049bc\nMOV RAX,qword ptr [RSP]\nMOV RCX,RAX\nSHR RCX,0x36\nJNZ 0x004049ea\nSHL RAX,0xa\nJMP 0x004049b8\nMOV RCX,qword ptr [RSP + 0x8]\nMOVSX EDX,byte ptr [RCX + -0x1]\nADD EDX,-0x30\nMOV EAX,0x2\nCMP EDX,0x9\nJA 0x004049ef\nCMP byte ptr [RCX + 0x1],0x0\nJNZ 0x004049ef\nMOVSX ECX,byte ptr [RCX]\nCMP ECX,0x62\nJZ 0x004049bc\nCMP ECX,0x25\nJNZ 0x004049ef\nCALL 0x0040c830\nMOVQ XMM2,qword ptr [RSP]\nPUNPCKLDQ XMM2,xmmword ptr [0x004125c0]\nSUBPD XMM2,xmmword ptr [0x004125d0]\nPSHUFD XMM1,XMM2,0x4e\nADDPD XMM1,XMM2\nMULSD XMM1,XMM0\nDIVSD XMM1,qword ptr [0x004125f0]\nMOVSD XMM0,qword ptr [0x004125f8]\nUCOMISD XMM0,XMM1\nJBE 0x004049ea\nMOVSD XMM0,qword ptr [0x00412600]\nMOVAPD XMM2,XMM1\nSUBSD XMM2,XMM0\nCVTTSD2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSD2SI RAX,XMM1\nUCOMISD XMM1,XMM0\nCMOVNC RAX,RCX\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [RSP]\nCMP RAX,qword ptr [0x0061a668]\nJC 0x004049e1\nMOV ECX,dword ptr [0x0061a3f0]\nIMUL RCX,RCX,0x22\nCMP RAX,RCX\nCMOVA RCX,RAX\nMOV qword ptr [0x0061a668],RCX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV EAX,0x1\nMOVSX EDX,BPL\nMOV ECX,0x412000\nMOV EDI,EAX\nMOV ESI,R14D\nMOV R8,RBX\nCALL 0x00410210\nNOP dword ptr CS:[RAX + RAX*0x1]\n'
p2412
S'55\n41 56\n53\n48 83 ec 10\n48 89 d3\n89 f5\n41 89 fe\n48 8d 74 24 08\n48 89 e1\nba 0a 00 00 00\n41 b8 9e 3c 41 00\n48 89 df\ne8 e5 b9 00 00\n83 f8 02\n74 37\n85 c0\n0f 85 07 01 00 00\n48 8b 44 24 08\n0f be 40 ff\n83 c0 d0\n83 f8 09\n0f 87 bf 00 00 00\n48 8b 04 24\n48 89 c1\n48 c1 e9 36\n0f 85 dc 00 00 00\n48 c1 e0 0a\ne9 a1 00 00 00\n48 8b 4c 24 08\n0f be 51 ff\n83 c2 d0\nb8 02 00 00 00\n83 fa 09\n0f 87 be 00 00 00\n80 79 01 00\n0f 85 b4 00 00 00\n0f be 09\n83 f9 62\n74 79\n83 f9 25\n0f 85 a3 00 00 00\ne8 df 7e 00 00\nf3 0f 7e 14 24\n66 0f 62 15 62 dc 00 00\n66 0f 5c 15 6a dc 00 00\n66 0f 70 ca 4e\n66 0f 58 ca\nf2 0f 59 c8\nf2 0f 5e 0d 75 dc 00 00\nf2 0f 10 05 75 dc 00 00\n66 0f 2e c1\n76 61\nf2 0f 10 05 6f dc 00 00\n66 0f 28 d1\nf2 0f 5c d0\nf2 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf2 48 0f 2c c1\n66 0f 2e c8\n48 0f 43 c1\n48 89 04 24\n48 8b 04 24\n48 3b 05 a1 5c 21 00\n72 18\n8b 0d 21 5a 21 00\n48 6b c9 22\n48 39 c8\n48 0f 47 c8\n48 89 0d 87 5c 21 00\n48 83 c4 10\n5b\n41 5e\n5d\nc3\nb8 01 00 00 00\n40 0f be d5\nb9 00 20 41 00\n89 c7\n44 89 f6\n49 89 d8\ne8 0b b8 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n'
p2413
S'.text:00000000004048b0\n.text:00000000004048b1\n.text:00000000004048b3\n.text:00000000004048b4\n.text:00000000004048b8\n.text:00000000004048bb\n.text:00000000004048bd\n.text:00000000004048c0\n.text:00000000004048c5\n.text:00000000004048c8\n.text:00000000004048cd\n.text:00000000004048d3\n.text:00000000004048d6\n.text:00000000004048db\n.text:00000000004048de\n.text:00000000004048e0\n.text:00000000004048e2\n.text:00000000004048e8\n.text:00000000004048ed\n.text:00000000004048f1\n.text:00000000004048f4\n.text:00000000004048f7\n.text:00000000004048fd\n.text:0000000000404901\n.text:0000000000404904\n.text:0000000000404908\n.text:000000000040490e\n.text:0000000000404912\n.text:0000000000404917\n.text:000000000040491c\n.text:0000000000404920\n.text:0000000000404923\n.text:0000000000404928\n.text:000000000040492b\n.text:0000000000404931\n.text:0000000000404935\n.text:000000000040493b\n.text:000000000040493e\n.text:0000000000404941\n.text:0000000000404943\n.text:0000000000404946\n.text:000000000040494c\n.text:0000000000404951\n.text:0000000000404956\n.text:000000000040495e\n.text:0000000000404966\n.text:000000000040496b\n.text:000000000040496f\n.text:0000000000404973\n.text:000000000040497b\n.text:0000000000404983\n.text:0000000000404987\n.text:0000000000404989\n.text:0000000000404991\n.text:0000000000404995\n.text:0000000000404999\n.text:000000000040499e\n.text:00000000004049a8\n.text:00000000004049ab\n.text:00000000004049b0\n.text:00000000004049b4\n.text:00000000004049b8\n.text:00000000004049bc\n.text:00000000004049c0\n.text:00000000004049c7\n.text:00000000004049c9\n.text:00000000004049cf\n.text:00000000004049d3\n.text:00000000004049d6\n.text:00000000004049da\n.text:00000000004049e1\n.text:00000000004049e5\n.text:00000000004049e6\n.text:00000000004049e8\n.text:00000000004049e9\n.text:00000000004049ea\n.text:00000000004049ef\n.text:00000000004049f3\n.text:00000000004049f8\n.text:00000000004049fa\n.text:00000000004049fd\n.text:0000000000404a00\n.text:0000000000404a05\n'
p2414
tp2415
sS'queue_check_insert'
p2416
(S'\n__stdcall queue_check_insert(merge_node_queue * queue, merge_node * node)\n'
p2417
V\u000avoid queue_check_insert(merge_node_queue *queue,merge_node *node)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  if (node->queued == false) {\u000a    if (node->lo == node->end_lo) {\u000a      if (node->hi == node->end_hi) {\u000a        return;\u000a      }\u000a      sVar1 = node->nlo;\u000a    }\u000a    else {\u000a      if (node->hi != node->end_hi) goto LAB_00409c12;\u000a      sVar1 = node->nhi;\u000a    }\u000a    if (sVar1 == 0) {\u000aLAB_00409c12:\u000a      queue_insert(queue,node);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p2418
S'CMP byte ptr [RSI + 0x54],0x0\nJZ 0x00409be7\nRET\nMOV RCX,qword ptr [RSI]\nMOV RAX,qword ptr [RSI + 0x8]\nCMP RCX,qword ptr [RSI + 0x10]\nMOV RCX,qword ptr [RSI + 0x18]\nJNZ 0x00409c06\nCMP RAX,RCX\nJZ 0x00409be6\nCMP qword ptr [RSI + 0x28],0x0\nJNZ 0x00409be6\nJMP 0x00409c12\nCMP RAX,RCX\nJNZ 0x00409c12\nCMP qword ptr [RSI + 0x30],0x0\nJNZ 0x00409be6\nJMP 0x00409690\n'
p2419
S'80 7e 54 00\n74 01\nc3\n48 8b 0e\n48 8b 46 08\n48 3b 4e 10\n48 8b 4e 18\n75 0e\n48 39 c8\n74 e9\n48 83 7e 28 00\n75 e2\neb 0c\n48 39 c8\n75 07\n48 83 7e 30 00\n75 d4\ne9 79 fa ff ff\n'
p2420
S'.text:0000000000409be0\n.text:0000000000409be4\n.text:0000000000409be6\n.text:0000000000409be7\n.text:0000000000409bea\n.text:0000000000409bee\n.text:0000000000409bf2\n.text:0000000000409bf6\n.text:0000000000409bf8\n.text:0000000000409bfb\n.text:0000000000409bfd\n.text:0000000000409c02\n.text:0000000000409c04\n.text:0000000000409c06\n.text:0000000000409c09\n.text:0000000000409c0b\n.text:0000000000409c10\n.text:0000000000409c12\n'
p2421
tp2422
sS'debug_width'
p2423
(S'\n__stdcall debug_width(char * text, char * lim)\n'
p2424
V\u000asize_t debug_width(char *text,char *lim)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  size_t sVar3;\u000a  \u000a  iVar2 = mbsnwidth(text,(size_t)(lim + -(long)text));\u000a  sVar3 = SEXT48(iVar2);\u000a  if (text < lim) {\u000a    do {\u000a      cVar1 = *text;\u000a      text = text + 1;\u000a      sVar3 = sVar3 + (ulong)(cVar1 == '\u005ct');\u000a    } while (lim != text);\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p2425
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nSUB RSI,RBX\nXOR EDX,EDX\nCALL 0x0040c480\nCDQE\nCMP RBX,R14\nJNC 0x00407ad4\nNOP dword ptr [RAX + RAX*0x1]\nXOR ECX,ECX\nCMP byte ptr [RBX],0x9\nLEA RBX,[RBX + 0x1]\nSETZ CL\nADD RAX,RCX\nCMP R14,RBX\nJNZ 0x00407ac0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p2426
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 29 de\n31 d2\ne8 cc 49 00 00\n48 98\n4c 39 f3\n73 19\n0f 1f 44 00 00\n31 c9\n80 3b 09\n48 8d 5b 01\n0f 94 c1\n48 01 c8\n49 39 de\n75 ec\n48 83 c4 08\n5b\n41 5e\nc3\n'
p2427
S'.text:0000000000407aa0\n.text:0000000000407aa2\n.text:0000000000407aa3\n.text:0000000000407aa4\n.text:0000000000407aa7\n.text:0000000000407aaa\n.text:0000000000407aad\n.text:0000000000407aaf\n.text:0000000000407ab4\n.text:0000000000407ab6\n.text:0000000000407ab9\n.text:0000000000407abb\n.text:0000000000407ac0\n.text:0000000000407ac2\n.text:0000000000407ac5\n.text:0000000000407ac9\n.text:0000000000407acc\n.text:0000000000407acf\n.text:0000000000407ad2\n.text:0000000000407ad4\n.text:0000000000407ad8\n.text:0000000000407ad9\n.text:0000000000407adb\n'
p2428
tp2429
sS'rpl_fflush'
p2430
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p2431
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0061a268)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p2432
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0041084d\nMOV RDI,RBX\nCALL 0x004028d0\nTEST EAX,EAX\nJZ 0x0041084d\nMOV RDI,RBX\nCALL 0x00410860\nMOV RDI,RBX\nPOP RBX\nJMP 0x00402870\n'
p2433
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 8f 20 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 1a 20 ff ff\n'
p2434
S'.text:0000000000410830\n.text:0000000000410831\n.text:0000000000410834\n.text:0000000000410837\n.text:0000000000410839\n.text:000000000041083c\n.text:0000000000410841\n.text:0000000000410843\n.text:0000000000410845\n.text:0000000000410848\n.text:000000000041084d\n.text:0000000000410850\n.text:0000000000410851\n'
p2435
tp2436
sS'initbuf'
p2437
(S'\n__stdcall initbuf(buffer * buf, size_t line_bytes, size_t alloc)\n'
p2438
V\u000avoid initbuf(buffer *buf,size_t line_bytes,size_t alloc)\u000a\u000a{\u000a  char *pcVar1;\u000a  ulong __size;\u000a  \u000a  do {\u000a    __size = (0x20 - (ulong)((uint)alloc & 0x1f)) + alloc;\u000a    pcVar1 = (char *)malloc(__size);\u000a    buf->buf = pcVar1;\u000a    if (pcVar1 != (char *)0x0) {\u000a      buf->line_bytes = line_bytes;\u000a      buf->alloc = __size;\u000a      buf->left = 0;\u000a      buf->eof = false;\u000a      *(undefined4 *)&buf->used = 0;\u000a      *(undefined4 *)((long)&buf->used + 4) = 0;\u000a      *(undefined4 *)&buf->nlines = 0;\u000a      *(undefined4 *)((long)&buf->nlines + 4) = 0;\u000a      return;\u000a    }\u000a    alloc = __size >> 1;\u000a  } while (line_bytes + 1 < alloc);\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p2439
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV R15,RDI\nLEA R12,[R14 + 0x1]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV EAX,EDX\nAND EAX,0x1f\nMOV EBX,0x20\nSUB RBX,RAX\nADD RBX,RDX\nMOV RDI,RBX\nCALL 0x00402860\nMOV qword ptr [R15],RAX\nTEST RAX,RAX\nJNZ 0x00405ef0\nSHR RBX,1\nCMP RBX,R12\nMOV RDX,RBX\nJA 0x00405ec0\nCALL 0x0040fd10\nMOV qword ptr [R15 + 0x28],R14\nMOV qword ptr [R15 + 0x18],RBX\nMOV qword ptr [R15 + 0x20],0x0\nMOV byte ptr [R15 + 0x30],0x0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15 + 0x8],XMM0\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p2440
S'41 57\n41 56\n41 54\n53\n50\n49 89 f6\n49 89 ff\n4d 8d 66 01\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n89 d0\n83 e0 1f\nbb 20 00 00 00\n48 29 c3\n48 01 d3\n48 89 df\ne8 88 c9 ff ff\n49 89 07\n48 85 c0\n75 10\n48 d1 eb\n4c 39 e3\n48 89 da\n77 d5\ne8 20 9e 00 00\n4d 89 77 28\n49 89 5f 18\n49 c7 47 20 00 00 00 00\n41 c6 47 30 00\n0f 57 c0\n41 0f 11 47 08\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p2441
S'.text:0000000000405ea0\n.text:0000000000405ea2\n.text:0000000000405ea4\n.text:0000000000405ea6\n.text:0000000000405ea7\n.text:0000000000405ea8\n.text:0000000000405eab\n.text:0000000000405eae\n.text:0000000000405eb2\n.text:0000000000405ec0\n.text:0000000000405ec2\n.text:0000000000405ec5\n.text:0000000000405eca\n.text:0000000000405ecd\n.text:0000000000405ed0\n.text:0000000000405ed3\n.text:0000000000405ed8\n.text:0000000000405edb\n.text:0000000000405ede\n.text:0000000000405ee0\n.text:0000000000405ee3\n.text:0000000000405ee6\n.text:0000000000405ee9\n.text:0000000000405eeb\n.text:0000000000405ef0\n.text:0000000000405ef4\n.text:0000000000405ef8\n.text:0000000000405f00\n.text:0000000000405f05\n.text:0000000000405f08\n.text:0000000000405f0d\n.text:0000000000405f11\n.text:0000000000405f12\n.text:0000000000405f14\n.text:0000000000405f16\n.text:0000000000405f18\n'
p2442
tp2443
sS'timespectod'
p2444
(S'\n__stdcall timespectod()\n'
p2445
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000adouble timespectod(void)\u000a\u000a{\u000a  long in_RSI;\u000a  long in_RDI;\u000a  \u000a  return (double)in_RSI / _DAT_00415668 + (double)in_RDI;\u000a}\u000a\u000a
p2446
S'CVTSI2SD XMM1,RDI\nCVTSI2SD XMM0,RSI\nDIVSD XMM0,qword ptr [0x00415668]\nADDSD XMM0,XMM1\nRET\n'
p2447
S'f2 48 0f 2a cf\nf2 48 0f 2a c6\nf2 0f 5e 05 66 41 00 00\nf2 0f 58 c1\nc3\n'
p2448
S'.text:00000000004114f0\n.text:00000000004114f5\n.text:00000000004114fa\n.text:0000000000411502\n.text:0000000000411506\n'
p2449
tp2450
sS'quotearg_n'
p2451
(S'\n__stdcall quotearg_n(char * arg)\n'
p2452
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p2453
S'MOV RDX,-0x1\nMOV ECX,0x61ab80\nJMP 0x0040d9c0\n'
p2454
S'48 c7 c2 ff ff ff ff\nb9 80 ab 61 00\neb 02\n'
p2455
S'.text:000000000040d9b0\n.text:000000000040d9b7\n.text:000000000040d9bc\n'
p2456
tp2457
sS'close_stream'
p2458
(S'\n__stdcall close_stream(FILE * stream)\n'
p2459
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p2460
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00402480\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00402740\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x004105f0\nTEST EBP,EBP\nJZ 0x00410f1b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x00410f3f\nCALL 0x00402430\nMOV dword ptr [RAX],0x0\nJMP 0x00410f3f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x00410f3f\nTEST CL,CL\nJNZ 0x00410f3f\nCALL 0x00402430\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2461
S'55\n41 56\n53\n48 89 fb\ne8 94 15 ff ff\n49 89 c6\n48 89 df\ne8 49 18 ff ff\n89 c5\n48 89 df\ne8 ef f6 ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 1d 15 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 fe 14 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p2462
S'.text:0000000000410ee0\n.text:0000000000410ee1\n.text:0000000000410ee3\n.text:0000000000410ee4\n.text:0000000000410ee7\n.text:0000000000410eec\n.text:0000000000410eef\n.text:0000000000410ef2\n.text:0000000000410ef7\n.text:0000000000410ef9\n.text:0000000000410efc\n.text:0000000000410f01\n.text:0000000000410f03\n.text:0000000000410f05\n.text:0000000000410f0a\n.text:0000000000410f0c\n.text:0000000000410f0e\n.text:0000000000410f13\n.text:0000000000410f19\n.text:0000000000410f1b\n.text:0000000000410f1d\n.text:0000000000410f20\n.text:0000000000410f22\n.text:0000000000410f24\n.text:0000000000410f27\n.text:0000000000410f29\n.text:0000000000410f2b\n.text:0000000000410f2d\n.text:0000000000410f32\n.text:0000000000410f34\n.text:0000000000410f37\n.text:0000000000410f3c\n.text:0000000000410f3f\n.text:0000000000410f41\n.text:0000000000410f42\n.text:0000000000410f44\n.text:0000000000410f45\n'
p2463
tp2464
sS'quotearg_colon_mem'
p2465
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p2466
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p2467
S'MOV EDX,0x3a\nJMP 0x0040dcd0\n'
p2468
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p2469
S'.text:000000000040dd60\n.text:000000000040dd65\n'
p2470
tp2471
sS'strcoll'
p2472
(S'\n__stdcall strcoll(char * __s1, char * __s2)\n'
p2473
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcoll(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcoll_0061a288)();\u000a  return iVar1;\u000a}\u000a\u000a
p2474
S'JMP qword ptr [0x0061a288]\n'
p2475
S'ff 25 d2 79 21 00\n'
p2476
S'.plt:00000000004028b0\n'
p2477
tp2478
sS'specify_nthreads'
p2479
(S'\n__stdcall specify_nthreads(char * s)\n'
p2480
V\u000asize_t specify_nthreads(char *s)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  undefined8 uVar2;\u000a  char *s_00;\u000a  size_t local_20;\u000a  \u000a  sVar1 = xstrtoul(s_00,(char **)0x0,(ulong *)0xa,(char *)&local_20);\u000a  if (sVar1 != LONGINT_OK) {\u000a    if (sVar1 == LONGINT_OVERFLOW) {\u000a      return 0xffffffffffffffff;\u000a    }\u000a    xstrtol_fatal((option *)(ulong)sVar1,(char *)((ulong)s & 0xffffffff));\u000a  }\u000a  if (local_20 == 0) {\u000a    uVar2 = dcgettext(0,"number in parallel must be nonzero",5);\u000a    error(2,0,uVar2,uVar2);\u000a  }\u000a  return local_20;\u000a}\u000a\u000a
p2481
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV RBX,RDX\nMOV EBP,ESI\nMOV R14D,EDI\nLEA RCX,[RSP + 0x8]\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x414bf9\nMOV RDI,RBX\nCALL 0x0040ff30\nTEST EAX,EAX\nJZ 0x00404ab0\nMOV RCX,-0x1\nCMP EAX,0x1\nJZ 0x00404ae2\nMOVSX EDX,BPL\nMOV ECX,0x412000\nMOV EDI,EAX\nMOV ESI,R14D\nMOV R8,RBX\nCALL 0x00410210\nCMP qword ptr [RSP + 0x8],0x0\nJNZ 0x00404add\nXOR EDI,EDI\nMOV ESI,0x413cab\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00402960\nMOV RCX,qword ptr [RSP + 0x8]\nMOV RAX,RCX\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2482
S'55\n41 56\n53\n48 83 ec 10\n48 89 d3\n89 f5\n41 89 fe\n48 8d 4c 24 08\n31 f6\nba 0a 00 00 00\n41 b8 f9 4b 41 00\n48 89 df\ne8 a6 b4 00 00\n85 c0\n74 22\n48 c7 c1 ff ff ff ff\n83 f8 01\n74 48\n40 0f be d5\nb9 00 20 41 00\n89 c7\n44 89 f6\n49 89 d8\ne8 60 b7 00 00\n48 83 7c 24 08 00\n75 25\n31 ff\nbe ab 3c 41 00\nba 05 00 00 00\ne8 e7 da ff ff\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 83 de ff ff\n48 8b 4c 24 08\n48 89 c8\n48 83 c4 10\n5b\n41 5e\n5d\nc3\n'
p2483
S'.text:0000000000404a60\n.text:0000000000404a61\n.text:0000000000404a63\n.text:0000000000404a64\n.text:0000000000404a68\n.text:0000000000404a6b\n.text:0000000000404a6d\n.text:0000000000404a70\n.text:0000000000404a75\n.text:0000000000404a77\n.text:0000000000404a7c\n.text:0000000000404a82\n.text:0000000000404a85\n.text:0000000000404a8a\n.text:0000000000404a8c\n.text:0000000000404a8e\n.text:0000000000404a95\n.text:0000000000404a98\n.text:0000000000404a9a\n.text:0000000000404a9e\n.text:0000000000404aa3\n.text:0000000000404aa5\n.text:0000000000404aa8\n.text:0000000000404aab\n.text:0000000000404ab0\n.text:0000000000404ab6\n.text:0000000000404ab8\n.text:0000000000404aba\n.text:0000000000404abf\n.text:0000000000404ac4\n.text:0000000000404ac9\n.text:0000000000404acc\n.text:0000000000404ad1\n.text:0000000000404ad3\n.text:0000000000404ad5\n.text:0000000000404ad8\n.text:0000000000404add\n.text:0000000000404ae2\n.text:0000000000404ae5\n.text:0000000000404ae9\n.text:0000000000404aea\n.text:0000000000404aec\n.text:0000000000404aed\n'
p2484
tp2485
sS'memcoll0'
p2486
(S'\n__stdcall memcoll0(char * s1, size_t s1size, char * s2, size_t s2size)\n'
p2487
V\u000aint memcoll0(char *s1,size_t s1size,char *s2,size_t s2size)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  \u000a  if (s1size == s2size) {\u000a    iVar1 = memcmp(s1,s2,s1size);\u000a    if (iVar1 == 0) {\u000a      piVar2 = __errno_location();\u000a      *piVar2 = 0;\u000a      return 0;\u000a    }\u000a  }\u000a  iVar1 = strcoll_loop(s1,s1size,s2,s2size);\u000a  return iVar1;\u000a}\u000a\u000a
p2488
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RCX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R12,RDI\nCMP RBX,R15\nJNZ 0x0041146b\nMOV RDI,R12\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x00402710\nTEST EAX,EAX\nJZ 0x00411487\nMOV RDI,R12\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004113c0\nCALL 0x00402430\nMOV dword ptr [RAX],0x0\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p2489
S'41 57\n41 56\n41 54\n53\n50\n49 89 cf\n49 89 d6\n48 89 f3\n49 89 fc\n4c 39 fb\n75 12\n4c 89 e7\n4c 89 f6\n48 89 da\ne8 a9 12 ff ff\n85 c0\n74 1c\n4c 89 e7\n48 89 de\n4c 89 f2\n4c 89 f9\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 39 ff ff ff\ne8 a4 0f ff ff\nc7 00 00 00 00 00\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p2490
S'.text:0000000000411440\n.text:0000000000411442\n.text:0000000000411444\n.text:0000000000411446\n.text:0000000000411447\n.text:0000000000411448\n.text:000000000041144b\n.text:000000000041144e\n.text:0000000000411451\n.text:0000000000411454\n.text:0000000000411457\n.text:0000000000411459\n.text:000000000041145c\n.text:000000000041145f\n.text:0000000000411462\n.text:0000000000411467\n.text:0000000000411469\n.text:000000000041146b\n.text:000000000041146e\n.text:0000000000411471\n.text:0000000000411474\n.text:0000000000411477\n.text:000000000041147b\n.text:000000000041147c\n.text:000000000041147e\n.text:0000000000411480\n.text:0000000000411482\n.text:0000000000411487\n.text:000000000041148c\n.text:0000000000411492\n.text:0000000000411494\n.text:0000000000411498\n.text:0000000000411499\n.text:000000000041149b\n.text:000000000041149d\n.text:000000000041149f\n'
p2491
tp2492
sS'strtol'
p2493
(S'\n__stdcall strtol(char * __nptr, char * * __endptr, int __base)\n'
p2494
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along strtol(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_strtol_0061a208)();\u000a  return lVar1;\u000a}\u000a\u000a
p2495
S'JMP qword ptr [0x0061a208]\n'
p2496
S'ff 25 52 7a 21 00\n'
p2497
S'.plt:00000000004027b0\n'
p2498
tp2499
sS'stream_open'
p2500
(S'\n__stdcall stream_open(char * file, char * how)\n'
p2501
V\u000aFILE * stream_open(char *file,char *how)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  FILE *fp;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  \u000a  if (*how == 'w') {\u000a    fp = stdout;\u000a    if ((file != (char *)0x0) && (iVar2 = ftruncate(1,0), fp = stdout, iVar2 != 0)) {\u000a      puVar3 = (uint *)__errno_location();\u000a      uVar1 = *puVar3;\u000a      uVar4 = dcgettext(0,"%s: error truncating",5);\u000a      pcVar5 = quotearg_n_style_colon((char *)0x0);\u000a      error(2,(ulong)uVar1,uVar4,pcVar5);\u000a      fp = stdout;\u000a    }\u000a  }\u000a  else {\u000a    if (*how != 'r') {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("!\u005c"unexpected mode passed to stream_open\u005c"","src/sort.c",0x3c4,\u000a                    "FILE *stream_open(const char *, const char *)");\u000a    }\u000a    if ((*file == '-') && (file[1] == 0)) {\u000a      have_read_stdin = 1;\u000a      fp = stdin;\u000a    }\u000a    else {\u000a      fp = fopen_safer(file,how);\u000a    }\u000a    fadvise(fp);\u000a  }\u000a  return fp;\u000a}\u000a\u000a
p2502
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV AL,byte ptr [RSI]\nCMP AL,0x77\nJZ 0x0040657a\nCMP AL,0x72\nJNZ 0x004065f1\nCMP byte ptr [RBX],0x2d\nJNZ 0x00406560\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x004065de\nMOV RDI,RBX\nCALL 0x0040b060\nMOV RBX,RAX\nMOV ESI,0x2\nMOV RDI,RBX\nCALL 0x0040ac20\nJMP 0x004065d6\nTEST RBX,RBX\nJZ 0x004065cf\nMOV EDI,0x1\nXOR ESI,ESI\nCALL 0x00402650\nTEST EAX,EAX\nJZ 0x004065cf\nCALL 0x00402430\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x413e3c\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBX\nCALL 0x0040dd70\nMOV RCX,RAX\nMOV EDI,0x2\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nCALL 0x00402960\nMOV RBX,qword ptr [0x0061a568]\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV byte ptr [0x0061a5bc],0x1\nMOV RBX,qword ptr [0x0061a570]\nJMP 0x0040656b\nMOV EDI,0x413e51\nMOV ESI,0x41351c\nMOV EDX,0x3c4\nMOV ECX,0x413e7a\nCALL 0x00402680\n'
p2503
S'55\n41 56\n53\n48 89 fb\n8a 06\n3c 77\n74 2d\n3c 72\n0f 85 9c 00 00 00\n80 3b 2d\n75 06\n80 7b 01 00\n74 7e\n48 89 df\ne8 f8 4a 00 00\n48 89 c3\nbe 02 00 00 00\n48 89 df\ne8 a8 46 00 00\neb 5c\n48 85 db\n74 50\nbf 01 00 00 00\n31 f6\ne8 c5 c0 ff ff\n85 c0\n74 40\ne8 9c be ff ff\n44 8b 30\n31 ff\nbe 3c 3e 41 00\nba 05 00 00 00\ne8 08 c0 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n48 89 da\ne8 b6 77 00 00\n48 89 c1\nbf 02 00 00 00\n31 c0\n44 89 f6\n48 89 ea\ne8 91 c3 ff ff\n48 8b 1d 92 3f 21 00\n48 89 d8\n5b\n41 5e\n5d\nc3\nc6 05 d7 3f 21 00 01\n48 8b 1d 84 3f 21 00\ne9 7a ff ff ff\nbf 51 3e 41 00\nbe 1c 35 41 00\nba c4 03 00 00\nb9 7a 3e 41 00\ne8 76 c0 ff ff\n'
p2504
S'.text:0000000000406540\n.text:0000000000406541\n.text:0000000000406543\n.text:0000000000406544\n.text:0000000000406547\n.text:0000000000406549\n.text:000000000040654b\n.text:000000000040654d\n.text:000000000040654f\n.text:0000000000406555\n.text:0000000000406558\n.text:000000000040655a\n.text:000000000040655e\n.text:0000000000406560\n.text:0000000000406563\n.text:0000000000406568\n.text:000000000040656b\n.text:0000000000406570\n.text:0000000000406573\n.text:0000000000406578\n.text:000000000040657a\n.text:000000000040657d\n.text:000000000040657f\n.text:0000000000406584\n.text:0000000000406586\n.text:000000000040658b\n.text:000000000040658d\n.text:000000000040658f\n.text:0000000000406594\n.text:0000000000406597\n.text:0000000000406599\n.text:000000000040659e\n.text:00000000004065a3\n.text:00000000004065a8\n.text:00000000004065ab\n.text:00000000004065ad\n.text:00000000004065b2\n.text:00000000004065b5\n.text:00000000004065ba\n.text:00000000004065bd\n.text:00000000004065c2\n.text:00000000004065c4\n.text:00000000004065c7\n.text:00000000004065ca\n.text:00000000004065cf\n.text:00000000004065d6\n.text:00000000004065d9\n.text:00000000004065da\n.text:00000000004065dc\n.text:00000000004065dd\n.text:00000000004065de\n.text:00000000004065e5\n.text:00000000004065ec\n.text:00000000004065f1\n.text:00000000004065f6\n.text:00000000004065fb\n.text:0000000000406600\n.text:0000000000406605\n'
p2505
tp2506
sS'mark_key'
p2507
(S'\n__stdcall mark_key(size_t offset, size_t width)\n'
p2508
V\u000avoid mark_key(size_t offset,size_t width)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  \u000a  if (offset != 0) {\u000a    do {\u000a      putchar_unlocked(0x20);\u000a      offset = offset - 1;\u000a    } while (offset != 0);\u000a  }\u000a  if (width == 0) {\u000a    auVar1 = dcgettext(0,"^ no match for key\u005cn",5);\u000a    __printf_chk(1,SUB168(auVar1,0),SUB168(auVar1 >> 0x40,0),SUB168(auVar1,0));\u000a    return;\u000a  }\u000a  do {\u000a    putchar_unlocked(0x5f);\u000a    width = width - 1;\u000a  } while (width != 0);\u000a  putchar_unlocked(10);\u000a  return;\u000a}\u000a\u000a
p2509
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00407aff\nNOP\nMOV EDI,0x20\nCALL 0x004027d0\nDEC RBX\nJNZ 0x00407af0\nTEST R14,R14\nJZ 0x00407b30\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV EDI,0x5f\nCALL 0x004027d0\nDEC R14\nJNZ 0x00407b10\nMOV EDI,0xa\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004027d0\nXOR EDI,EDI\nMOV ESI,0x413f28\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00402920\n'
p2510
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 85 db\n74 10\n90\nbf 20 00 00 00\ne8 d6 ac ff ff\n48 ff cb\n75 f1\n4d 85 f6\n74 2c\n66 66 66 2e 0f 1f 84 00 00 00 00 00\nbf 5f 00 00 00\ne8 b6 ac ff ff\n49 ff ce\n75 f1\nbf 0a 00 00 00\n48 83 c4 08\n5b\n41 5e\ne9 a0 ac ff ff\n31 ff\nbe 28 3f 41 00\nba 05 00 00 00\ne8 6f aa ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 83 c4 08\n5b\n41 5e\ne9 c6 ad ff ff\n'
p2511
S'.text:0000000000407ae0\n.text:0000000000407ae2\n.text:0000000000407ae3\n.text:0000000000407ae4\n.text:0000000000407ae7\n.text:0000000000407aea\n.text:0000000000407aed\n.text:0000000000407aef\n.text:0000000000407af0\n.text:0000000000407af5\n.text:0000000000407afa\n.text:0000000000407afd\n.text:0000000000407aff\n.text:0000000000407b02\n.text:0000000000407b04\n.text:0000000000407b10\n.text:0000000000407b15\n.text:0000000000407b1a\n.text:0000000000407b1d\n.text:0000000000407b1f\n.text:0000000000407b24\n.text:0000000000407b28\n.text:0000000000407b29\n.text:0000000000407b2b\n.text:0000000000407b30\n.text:0000000000407b32\n.text:0000000000407b37\n.text:0000000000407b3c\n.text:0000000000407b41\n.text:0000000000407b44\n.text:0000000000407b49\n.text:0000000000407b4b\n.text:0000000000407b4e\n.text:0000000000407b52\n.text:0000000000407b53\n.text:0000000000407b55\n'
p2512
tp2513
sS'hash_string'
p2514
(S'\n__stdcall hash_string(char * string, size_t n_buckets)\n'
p2515
V\u000asize_t hash_string(char *string,size_t n_buckets)\u000a\u000a{\u000a  byte bVar1;\u000a  ulong uVar2;\u000a  byte *pbVar3;\u000a  \u000a  bVar1 = *string;\u000a  if (bVar1 != 0) {\u000a    pbVar3 = (byte *)(string + 1);\u000a    uVar2 = 0;\u000a    do {\u000a      uVar2 = ((ulong)bVar1 + uVar2 * 0x1f) % n_buckets;\u000a      bVar1 = *pbVar3;\u000a      pbVar3 = pbVar3 + 1;\u000a    } while (bVar1 != 0);\u000a    return uVar2;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p2516
S'MOV AL,byte ptr [RDI]\nTEST AL,AL\nJZ 0x0040b533\nINC RDI\nXOR EDX,EDX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,RDX\nSHL RCX,0x5\nSUB RCX,RDX\nMOVZX EAX,AL\nADD RAX,RCX\nXOR EDX,EDX\nDIV RSI\nMOVZX EAX,byte ptr [RDI]\nINC RDI\nTEST AL,AL\nJNZ 0x0040b510\nMOV RAX,RDX\nRET\nXOR EDX,EDX\nMOV RAX,RDX\nRET\n'
p2517
S'8a 07\n84 c0\n74 2d\n48 ff c7\n31 d2\n0f 1f 44 00 00\n48 89 d1\n48 c1 e1 05\n48 29 d1\n0f b6 c0\n48 01 c8\n31 d2\n48 f7 f6\n0f b6 07\n48 ff c7\n84 c0\n75 e1\n48 89 d0\nc3\n31 d2\n48 89 d0\nc3\n'
p2518
S'.text:000000000040b500\n.text:000000000040b502\n.text:000000000040b504\n.text:000000000040b506\n.text:000000000040b509\n.text:000000000040b50b\n.text:000000000040b510\n.text:000000000040b513\n.text:000000000040b517\n.text:000000000040b51a\n.text:000000000040b51d\n.text:000000000040b520\n.text:000000000040b522\n.text:000000000040b525\n.text:000000000040b528\n.text:000000000040b52b\n.text:000000000040b52d\n.text:000000000040b52f\n.text:000000000040b532\n.text:000000000040b533\n.text:000000000040b535\n.text:000000000040b538\n'
p2519
tp2520
sS'argmatch_invalid'
p2521
(S'\n__stdcall argmatch_invalid(char * context, char * value, ptrdiff_t problem)\n'
p2522
V\u000avoid argmatch_invalid(char *context,char *value,ptrdiff_t problem)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = "ambiguous argument %s for %s";\u000a  if (problem == -1) {\u000a    pcVar2 = "invalid argument %s for %s";\u000a  }\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quotearg_n_style((char *)0x0);\u000a  pcVar3 = quote_n((char *)0x1);\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p2523
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nCMP RDX,-0x1\nMOV EAX,0x414094\nMOV ESI,0x4140af\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004025b0\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x0040dbb0\nMOV R15,RAX\nMOV EDI,0x1\nMOV RSI,R14\nCALL 0x0040dea0\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402960\n'
p2524
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n48 83 fa ff\nb8 94 40 41 00\nbe af 40 41 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 e4 87 ff ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 d2 3d 00 00\n49 89 c7\nbf 01 00 00 00\n4c 89 f6\ne8 b2 40 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 50 8b ff ff\n'
p2525
S'.text:0000000000409da0\n.text:0000000000409da2\n.text:0000000000409da4\n.text:0000000000409da6\n.text:0000000000409da7\n.text:0000000000409da8\n.text:0000000000409dab\n.text:0000000000409dae\n.text:0000000000409db2\n.text:0000000000409db7\n.text:0000000000409dbc\n.text:0000000000409dc0\n.text:0000000000409dc2\n.text:0000000000409dc7\n.text:0000000000409dcc\n.text:0000000000409dcf\n.text:0000000000409dd1\n.text:0000000000409dd6\n.text:0000000000409dd9\n.text:0000000000409dde\n.text:0000000000409de1\n.text:0000000000409de6\n.text:0000000000409de9\n.text:0000000000409dee\n.text:0000000000409df1\n.text:0000000000409df3\n.text:0000000000409df5\n.text:0000000000409df7\n.text:0000000000409dfa\n.text:0000000000409dfd\n.text:0000000000409e00\n.text:0000000000409e04\n.text:0000000000409e05\n.text:0000000000409e07\n.text:0000000000409e09\n.text:0000000000409e0b\n'
p2526
tp2527
sS'c_tolower'
p2528
(S'\n__stdcall c_tolower()\n'
p2529
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p2530
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p2531
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p2532
S'.text:0000000000410ec0\n.text:0000000000410ec3\n.text:0000000000410ec6\n.text:0000000000410ec9\n.text:0000000000410ecc\n'
p2533
tp2534
sS'toupper'
p2535
(S'\n__stdcall toupper(int __c)\n'
p2536
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint toupper(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_toupper_0061a078)();\u000a  return iVar1;\u000a}\u000a\u000a
p2537
S'JMP qword ptr [0x0061a078]\n'
p2538
S'ff 25 e2 7b 21 00\n'
p2539
S'.plt:0000000000402490\n'
p2540
tp2541
sS'getopt_long'
p2542
(S'\n__stdcall getopt_long()\n'
p2543
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0061a128)();\u000a  return;\u000a}\u000a\u000a
p2544
S'JMP qword ptr [0x0061a128]\n'
p2545
S'ff 25 32 7b 21 00\n'
p2546
S'.plt:00000000004025f0\n'
p2547
tp2548
sS'quotearg_style'
p2549
(S'\n__stdcall quotearg_style(char * arg)\n'
p2550
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p2551
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x0040dbb0\n'
p2552
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p2553
S'.text:000000000040dc90\n.text:000000000040dc93\n.text:000000000040dc95\n.text:000000000040dc97\n.text:000000000040dc99\n.text:000000000040dc9c\n'
p2554
tp2555
sS'sigprocmask'
p2556
(S'\n__stdcall sigprocmask(int __how, sigset_t * __set, sigset_t * __oset)\n'
p2557
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigprocmask(int __how,sigset_t *__set,sigset_t *__oset)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigprocmask_0061a020)();\u000a  return iVar1;\u000a}\u000a\u000a
p2558
S'JMP qword ptr [0x0061a020]\n'
p2559
S'ff 25 3a 7c 21 00\n'
p2560
S'.plt:00000000004023e0\n'
p2561
tp2562
sS'reap_some'
p2563
(S'\n__stdcall reap_some()\n'
p2564
V\u000avoid reap_some(void)\u000a\u000a{\u000a  reap();\u000a  reap_exited();\u000a  return;\u000a}\u000a\u000a
p2565
S'PUSH RAX\nMOV EDI,0xffffffff\nCALL 0x00408ac0\nPOP RAX\nJMP 0x00408bb0\n'
p2566
S'50\nbf ff ff ff ff\ne8 15 ff ff ff\n58\neb 02\n'
p2567
S'.text:0000000000408ba0\n.text:0000000000408ba1\n.text:0000000000408ba6\n.text:0000000000408bab\n.text:0000000000408bac\n'
p2568
tp2569
sS'__argmatch_die'
p2570
(S'\n__stdcall __argmatch_die()\n'
p2571
V\u000avoid __argmatch_die(void)\u000a\u000a{\u000a  usage(1);\u000a  return;\u000a}\u000a\u000a
p2572
S'MOV EDI,0x1\nJMP 0x00402c40\n'
p2573
S'bf 01 00 00 00\ne9 a6 8f ff ff\n'
p2574
S'.text:0000000000409c90\n.text:0000000000409c95\n'
p2575
tp2576
sS'init_node'
p2577
(S'\n__stdcall init_node(merge_node * parent, merge_node * node_pool, line * dest, size_t nthreads, size_t total_lines)\n'
p2578
V\u000amerge_node *\u000ainit_node(merge_node *parent,merge_node *node_pool,line *dest,size_t nthreads,size_t total_lines)\u000a\u000a{\u000a  merge_node *node_pool_00;\u000a  ulong *puVar1;\u000a  ulong nthreads_00;\u000a  ulong uVar2;\u000a  line *dest_00;\u000a  line *plVar3;\u000a  ulong in_R9;\u000a  \u000a  while( true ) {\u000a    plVar3 = (line *)&parent->end_hi;\u000a    if ((in_R9 & 1) != 0) {\u000a      plVar3 = (line *)&parent->end_lo;\u000a    }\u000a    puVar1 = &parent->nhi;\u000a    if ((in_R9 & 1) != 0) {\u000a      puVar1 = &parent->nlo;\u000a    }\u000a    nthreads_00 = *puVar1;\u000a    uVar2 = nthreads_00 >> 1;\u000a    dest_00 = dest + total_lines * 0x7ffffffffffffff;\u000a    dest = dest_00 + uVar2 * 0x7ffffffffffffff;\u000a    node_pool_00 = node_pool + 1;\u000a    node_pool->end_lo = dest_00;\u000a    node_pool->lo = dest_00;\u000a    node_pool->end_hi = dest;\u000a    node_pool->hi = dest;\u000a    *(line **)&node_pool->dest = plVar3;\u000a    node_pool->nlo = uVar2;\u000a    node_pool->nhi = nthreads_00 - uVar2;\u000a    node_pool->parent = parent;\u000a    node_pool->level = parent->level + 1;\u000a    node_pool->queued = false;\u000a    pthread_mutex_init((pthread_mutex_t *)node_pool->lock,(pthread_mutexattr_t *)0x0);\u000a    if (nthreads < 2) break;\u000a    nthreads_00 = nthreads >> 1;\u000a    nthreads = nthreads - nthreads_00;\u000a    node_pool->lo_child = node_pool_00;\u000a    node_pool_00 = init_node(node_pool,node_pool_00,dest_00,nthreads_00,total_lines);\u000a    node_pool->hi_child = node_pool_00;\u000a    in_R9 = 0;\u000a    parent = node_pool;\u000a    node_pool = node_pool_00;\u000a  }\u000a  *(undefined4 *)&node_pool->lo_child = 0;\u000a  *(undefined4 *)((long)&node_pool->lo_child + 4) = 0;\u000a  *(undefined4 *)&node_pool->hi_child = 0;\u000a  *(undefined4 *)((long)&node_pool->hi_child + 4) = 0;\u000a  return node_pool_00;\u000a}\u000a\u000a
p2579
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R8\nMOV R15,RCX\nMOV R12,RDX\nMOV R13,RSI\nMOV qword ptr [RSP],R14\nNEG R14\nSHL R14,0x5\nJMP 0x00409462\nMOV RCX,R15\nSHR RCX,1\nSUB R15,RCX\nMOV qword ptr [R13 + 0x40],RBP\nMOV R9D,0x1\nMOV RDI,R13\nMOV RSI,RBP\nMOV RDX,RBX\nMOV R8,qword ptr [RSP]\nCALL 0x00409400\nMOV qword ptr [R13 + 0x48],RAX\nXOR R9D,R9D\nMOV RDI,R13\nMOV R13,RAX\nLEA RAX,[RDI + 0x30]\nLEA RCX,[RDI + 0x28]\nLEA RDX,[RDI + 0x10]\nLEA RSI,[RDI + 0x18]\nAND R9B,0x1\nCMOVNZ RSI,RDX\nTEST R9B,R9B\nCMOVNZ RAX,RCX\nMOV RAX,qword ptr [RAX]\nMOV RCX,RAX\nSHR RCX,1\nSUB RAX,RCX\nMOV RBX,R12\nADD RBX,R14\nMOV RDX,RCX\nSHL RDX,0x5\nMOV R12,RBX\nSUB R12,RDX\nMOV RBP,R13\nSUB RBP,-0x80\nMOV qword ptr [R13 + 0x10],RBX\nMOV qword ptr [R13],RBX\nMOV qword ptr [R13 + 0x18],R12\nMOV qword ptr [R13 + 0x8],R12\nMOV qword ptr [R13 + 0x20],RSI\nMOV qword ptr [R13 + 0x28],RCX\nMOV qword ptr [R13 + 0x30],RAX\nMOV qword ptr [R13 + 0x38],RDI\nMOV EAX,dword ptr [RDI + 0x50]\nINC EAX\nMOV dword ptr [R13 + 0x50],EAX\nMOV byte ptr [R13 + 0x54],0x0\nLEA RDI,[R13 + 0x58]\nXOR ESI,ESI\nCALL 0x00402ae0\nCMP R15,0x2\nJNC 0x00409430\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R13 + 0x40],XMM0\nMOV RAX,RBP\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2580
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 c6\n49 89 cf\n49 89 d4\n49 89 f5\n4c 89 34 24\n49 f7 de\n49 c1 e6 05\neb 3e\n4c 89 f9\n48 d1 e9\n49 29 cf\n49 89 6d 40\n41 b9 01 00 00 00\n4c 89 ef\n48 89 ee\n48 89 da\n4c 8b 04 24\ne8 ab ff ff ff\n49 89 45 48\n45 31 c9\n4c 89 ef\n49 89 c5\n48 8d 47 30\n48 8d 4f 28\n48 8d 57 10\n48 8d 77 18\n41 80 e1 01\n48 0f 45 f2\n45 84 c9\n48 0f 45 c1\n48 8b 00\n48 89 c1\n48 d1 e9\n48 29 c8\n4c 89 e3\n4c 01 f3\n48 89 ca\n48 c1 e2 05\n49 89 dc\n49 29 d4\n4c 89 ed\n48 83 ed 80\n49 89 5d 10\n49 89 5d 00\n4d 89 65 18\n4d 89 65 08\n49 89 75 20\n49 89 4d 28\n49 89 45 30\n49 89 7d 38\n8b 47 50\nff c0\n41 89 45 50\n41 c6 45 54 00\n49 8d 7d 58\n31 f6\ne8 00 96 ff ff\n49 83 ff 02\n0f 83 46 ff ff ff\n0f 57 c0\n41 0f 11 45 40\n48 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2581
S'.text:0000000000409400\n.text:0000000000409401\n.text:0000000000409403\n.text:0000000000409405\n.text:0000000000409407\n.text:0000000000409409\n.text:000000000040940a\n.text:000000000040940b\n.text:000000000040940e\n.text:0000000000409411\n.text:0000000000409414\n.text:0000000000409417\n.text:000000000040941b\n.text:000000000040941e\n.text:0000000000409422\n.text:0000000000409430\n.text:0000000000409433\n.text:0000000000409436\n.text:0000000000409439\n.text:000000000040943d\n.text:0000000000409443\n.text:0000000000409446\n.text:0000000000409449\n.text:000000000040944c\n.text:0000000000409450\n.text:0000000000409455\n.text:0000000000409459\n.text:000000000040945c\n.text:000000000040945f\n.text:0000000000409462\n.text:0000000000409466\n.text:000000000040946a\n.text:000000000040946e\n.text:0000000000409472\n.text:0000000000409476\n.text:000000000040947a\n.text:000000000040947d\n.text:0000000000409481\n.text:0000000000409484\n.text:0000000000409487\n.text:000000000040948a\n.text:000000000040948d\n.text:0000000000409490\n.text:0000000000409493\n.text:0000000000409496\n.text:000000000040949a\n.text:000000000040949d\n.text:00000000004094a0\n.text:00000000004094a3\n.text:00000000004094a7\n.text:00000000004094ab\n.text:00000000004094af\n.text:00000000004094b3\n.text:00000000004094b7\n.text:00000000004094bb\n.text:00000000004094bf\n.text:00000000004094c3\n.text:00000000004094c7\n.text:00000000004094ca\n.text:00000000004094cc\n.text:00000000004094d0\n.text:00000000004094d5\n.text:00000000004094d9\n.text:00000000004094db\n.text:00000000004094e0\n.text:00000000004094e4\n.text:00000000004094ea\n.text:00000000004094ed\n.text:00000000004094f2\n.text:00000000004094f5\n.text:00000000004094f9\n.text:00000000004094fa\n.text:00000000004094fc\n.text:00000000004094fe\n.text:0000000000409500\n.text:0000000000409502\n.text:0000000000409503\n'
p2582
tp2583
sS'emit_try_help'
p2584
(S'\n__stdcall emit_try_help()\n'
p2585
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p2586
S'PUSH RBX\nMOV RBX,qword ptr [0x0061a5a0]\nXOR EDI,EDI\nMOV ESI,0x41382f\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0061ab78]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00402a70\n'
p2587
S'53\n48 8b 1d 88 76 21 00\n31 ff\nbe 2f 38 41 00\nba 05 00 00 00\ne8 87 f6 ff ff\n48 89 c2\n48 8b 0d 45 7c 21 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 2d fb ff ff\n'
p2588
S'.text:0000000000402f10\n.text:0000000000402f11\n.text:0000000000402f18\n.text:0000000000402f1a\n.text:0000000000402f1f\n.text:0000000000402f24\n.text:0000000000402f29\n.text:0000000000402f2c\n.text:0000000000402f33\n.text:0000000000402f38\n.text:0000000000402f3a\n.text:0000000000402f3d\n.text:0000000000402f3e\n'
p2589
tp2590
sS'strrchr'
p2591
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p2592
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0061a150)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2593
S'JMP qword ptr [0x0061a150]\n'
p2594
S'ff 25 0a 7b 21 00\n'
p2595
S'.plt:0000000000402640\n'
p2596
tp2597
sS'quotearg_alloc_mem'
p2598
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p2599
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p2600
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x61ab80\nCMOVNZ R12,RCX\nCALL 0x00402430\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x0040cbe0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x0040fc50\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x0040cbe0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040d90a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2601
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 80 ab 61 00\n4c 0f 45 e1\ne8 c8 4b ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 91 23 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2602
S'.text:000000000040d830\n.text:000000000040d831\n.text:000000000040d833\n.text:000000000040d835\n.text:000000000040d837\n.text:000000000040d839\n.text:000000000040d83a\n.text:000000000040d83e\n.text:000000000040d841\n.text:000000000040d846\n.text:000000000040d849\n.text:000000000040d84e\n.text:000000000040d851\n.text:000000000040d856\n.text:000000000040d859\n.text:000000000040d85f\n.text:000000000040d863\n.text:000000000040d868\n.text:000000000040d86d\n.text:000000000040d86f\n.text:000000000040d873\n.text:000000000040d875\n.text:000000000040d878\n.text:000000000040d87c\n.text:000000000040d881\n.text:000000000040d885\n.text:000000000040d88a\n.text:000000000040d88e\n.text:000000000040d890\n.text:000000000040d892\n.text:000000000040d895\n.text:000000000040d898\n.text:000000000040d89b\n.text:000000000040d8a0\n.text:000000000040d8a5\n.text:000000000040d8a7\n.text:000000000040d8ac\n.text:000000000040d8b0\n.text:000000000040d8b3\n.text:000000000040d8b7\n.text:000000000040d8ba\n.text:000000000040d8bf\n.text:000000000040d8c2\n.text:000000000040d8c6\n.text:000000000040d8ca\n.text:000000000040d8cd\n.text:000000000040d8d0\n.text:000000000040d8d5\n.text:000000000040d8da\n.text:000000000040d8dd\n.text:000000000040d8e2\n.text:000000000040d8e7\n.text:000000000040d8e9\n.text:000000000040d8ee\n.text:000000000040d8f3\n.text:000000000040d8f7\n.text:000000000040d8fa\n.text:000000000040d8fe\n.text:000000000040d903\n.text:000000000040d905\n.text:000000000040d907\n.text:000000000040d90a\n.text:000000000040d90d\n.text:000000000040d911\n.text:000000000040d912\n.text:000000000040d914\n.text:000000000040d916\n.text:000000000040d918\n.text:000000000040d91a\n.text:000000000040d91b\n'
p2603
tp2604
sS'pipe_fork'
p2605
(S'\n__stdcall pipe_fork(int * pipefds, size_t tries)\n'
p2606
V\u000apid_t pipe_fork(int *pipefds,size_t tries)\u000a\u000a{\u000a  tempnode *ptVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int *piVar4;\u000a  long lVar5;\u000a  undefined8 *puVar6;\u000a  undefined8 *puVar7;\u000a  __pid_t unaff_R13D;\u000a  byte bVar8;\u000a  cs_status cs;\u000a  cs_status status;\u000a  double local_150;\u000a  int *local_148;\u000a  cs_status local_140;\u000a  undefined8 local_b8 [17];\u000a  \u000a  bVar8 = 0;\u000a  iVar2 = pipe(pipefds);\u000a  if (iVar2 < 0) {\u000a    unaff_R13D = -1;\u000a  }\u000a  else {\u000a    if (nmerge + 1 < (uint)nprocs) {\u000a      reap_some();\u000a    }\u000a    local_148 = pipefds;\u000a    if (tries != 0) {\u000a      local_150 = DAT_00412608;\u000a      local_148 = pipefds;\u000a      do {\u000a        cs_enter(&local_140);\u000a        memcpy(local_b8,&local_140,0x88);\u000a        ptVar1 = temphead;\u000a        temphead = (tempnode *)0x0;\u000a        unaff_R13D = fork();\u000a        piVar3 = __errno_location();\u000a        iVar2 = *piVar3;\u000a        if (unaff_R13D != 0) {\u000a          temphead = ptVar1;\u000a        }\u000a        lVar5 = 0x11;\u000a        puVar6 = local_b8;\u000a        puVar7 = (undefined8 *)&stack0xfffffffffffffe28;\u000a        while (lVar5 != 0) {\u000a          lVar5 = lVar5 + -1;\u000a          *puVar7 = *puVar6;\u000a          puVar6 = puVar6 + (ulong)bVar8 * 0x1ffffffffffffffe + 1;\u000a          puVar7 = puVar7 + (ulong)bVar8 * 0x1ffffffffffffffe + 1;\u000a        }\u000a        cs_leave(status);\u000a        *piVar3 = iVar2;\u000a        if ((-1 < unaff_R13D) || (iVar2 != 0xb)) {\u000a          if (-1 < unaff_R13D) {\u000a            if (unaff_R13D != 0) {\u000a              nprocs = nprocs + 1;\u000a              return unaff_R13D;\u000a            }\u000a            close(0);\u000a            close(1);\u000a            return 0;\u000a          }\u000a          break;\u000a        }\u000a        tries = tries - 1;\u000a        xnanosleep(local_150);\u000a        local_150 = local_150 + local_150;\u000a        reap_exited();\u000a      } while (tries != 0);\u000a    }\u000a    piVar4 = __errno_location();\u000a    piVar3 = local_148;\u000a    iVar2 = *piVar4;\u000a    close(*local_148);\u000a    close(piVar3[1]);\u000a    *piVar4 = iVar2;\u000a  }\u000a  return (pid_t)unaff_R13D;\u000a}\u000a\u000a
p2607
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x1a8\nMOV RBX,RSI\nMOV RBP,RDI\nCALL 0x004026d0\nTEST EAX,EAX\nJS 0x0040893b\nMOV EAX,dword ptr [0x0061a3f0]\nINC EAX\nCMP EAX,dword ptr [0x0061ab30]\nJNC 0x00408859\nCALL 0x00408ba0\nMOV qword ptr [0x90 + RSP],RBP\nTEST RBX,RBX\nJZ 0x00408943\nMOVSD XMM0,qword ptr [0x00412608]\nMOVSD qword ptr [0x88 + RSP],XMM0\nLEA R12,[0x120 + RSP]\nNOP dword ptr CS:[RAX + RAX*0x1]\nLEA RBP,[0x98 + RSP]\nMOV RDI,RBP\nCALL 0x00405d30\nMOV EDX,0x88\nMOV RDI,R12\nMOV RSI,RBP\nCALL 0x004027c0\nMOV R15,qword ptr [0x0061aa70]\nMOV qword ptr [0x0061aa70],0x0\nCALL 0x00402b00\nMOV R13D,EAX\nCALL 0x00402430\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nTEST R13D,R13D\nJZ 0x004088e2\nMOV qword ptr [0x0061aa70],R15\nMOV ECX,0x11\nMOV RDI,RSP\nMOV RSI,R12\nMOVSQ.REP RDI,RSI\nCALL 0x00405d80\nMOV dword ptr [RBP],R14D\nTEST R13D,R13D\nJNS 0x00408945\nCMP R14D,0xb\nJNZ 0x00408945\nDEC RBX\nMOVSD XMM0,qword ptr [0x88 + RSP]\nCALL 0x0040feb0\nMOVSD XMM0,qword ptr [0x88 + RSP]\nADDSD XMM0,XMM0\nMOVSD qword ptr [0x88 + RSP],XMM0\nCALL 0x00408bb0\nTEST RBX,RBX\nJNZ 0x00408890\nJMP 0x00408954\nMOV R13D,0xffffffff\nJMP 0x0040897a\nJMP 0x00408954\nTEST R13D,R13D\nJS 0x00408954\nJZ 0x0040898f\nINC dword ptr [0x0061ab30]\nJMP 0x0040897a\nCALL 0x00402430\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV RBP,qword ptr [0x90 + RSP]\nMOV EDI,dword ptr [RBP]\nCALL 0x004026c0\nMOV EDI,dword ptr [RBP + 0x4]\nCALL 0x004026c0\nMOV dword ptr [RBX],R14D\nMOV EAX,R13D\nADD RSP,0x1a8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR R13D,R13D\nXOR EDI,EDI\nCALL 0x004026c0\nMOV EDI,0x1\nCALL 0x004026c0\nJMP 0x0040897a\n'
p2608
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 01 00 00\n48 89 f3\n48 89 fd\ne8 94 9e ff ff\n85 c0\n0f 88 f7 00 00 00\n8b 05 a6 1b 21 00\nff c0\n3b 05 de 22 21 00\n73 05\ne8 47 03 00 00\n48 89 ac 24 90 00 00 00\n48 85 db\n0f 84 d9 00 00 00\nf2 0f 10 05 96 9d 00 00\nf2 0f 11 84 24 88 00 00 00\n4c 8d a4 24 20 01 00 00\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8d ac 24 98 00 00 00\n48 89 ef\ne8 90 d4 ff ff\nba 88 00 00 00\n4c 89 e7\n48 89 ee\ne8 10 9f ff ff\n4c 8b 3d b9 21 21 00\n48 c7 05 ae 21 21 00 00 00 00 00\ne8 39 a2 ff ff\n41 89 c5\ne8 61 9b ff ff\n48 89 c5\n44 8b 75 00\n45 85 ed\n74 07\n4c 89 3d 8e 21 21 00\nb9 11 00 00 00\n48 89 e7\n4c 89 e6\nf3 48 a5\ne8 8b d4 ff ff\n44 89 75 00\n45 85 ed\n79 47\n41 83 fe 0b\n75 41\n48 ff cb\nf2 0f 10 84 24 88 00 00 00\ne8 9b 75 00 00\nf2 0f 10 84 24 88 00 00 00\nf2 0f 58 c0\nf2 0f 11 84 24 88 00 00 00\ne8 80 02 00 00\n48 85 db\n0f 85 57 ff ff ff\neb 19\n41 bd ff ff ff ff\neb 37\neb 0f\n45 85 ed\n78 0a\n74 43\nff 05 de 21 21 00\neb 26\ne8 d7 9a ff ff\n48 89 c3\n44 8b 33\n48 8b ac 24 90 00 00 00\n8b 7d 00\ne8 51 9d ff ff\n8b 7d 04\ne8 49 9d ff ff\n44 89 33\n44 89 e8\n48 81 c4 a8 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 31 ed\n31 ff\ne8 27 9d ff ff\nbf 01 00 00 00\ne8 1d 9d ff ff\neb d5\n'
p2609
S'.text:0000000000408820\n.text:0000000000408821\n.text:0000000000408823\n.text:0000000000408825\n.text:0000000000408827\n.text:0000000000408829\n.text:000000000040882a\n.text:0000000000408831\n.text:0000000000408834\n.text:0000000000408837\n.text:000000000040883c\n.text:000000000040883e\n.text:0000000000408844\n.text:000000000040884a\n.text:000000000040884c\n.text:0000000000408852\n.text:0000000000408854\n.text:0000000000408859\n.text:0000000000408861\n.text:0000000000408864\n.text:000000000040886a\n.text:0000000000408872\n.text:000000000040887b\n.text:0000000000408883\n.text:0000000000408890\n.text:0000000000408898\n.text:000000000040889b\n.text:00000000004088a0\n.text:00000000004088a5\n.text:00000000004088a8\n.text:00000000004088ab\n.text:00000000004088b0\n.text:00000000004088b7\n.text:00000000004088c2\n.text:00000000004088c7\n.text:00000000004088ca\n.text:00000000004088cf\n.text:00000000004088d2\n.text:00000000004088d6\n.text:00000000004088d9\n.text:00000000004088db\n.text:00000000004088e2\n.text:00000000004088e7\n.text:00000000004088ea\n.text:00000000004088ed\n.text:00000000004088f0\n.text:00000000004088f5\n.text:00000000004088f9\n.text:00000000004088fc\n.text:00000000004088fe\n.text:0000000000408902\n.text:0000000000408904\n.text:0000000000408907\n.text:0000000000408910\n.text:0000000000408915\n.text:000000000040891e\n.text:0000000000408922\n.text:000000000040892b\n.text:0000000000408930\n.text:0000000000408933\n.text:0000000000408939\n.text:000000000040893b\n.text:0000000000408941\n.text:0000000000408943\n.text:0000000000408945\n.text:0000000000408948\n.text:000000000040894a\n.text:000000000040894c\n.text:0000000000408952\n.text:0000000000408954\n.text:0000000000408959\n.text:000000000040895c\n.text:000000000040895f\n.text:0000000000408967\n.text:000000000040896a\n.text:000000000040896f\n.text:0000000000408972\n.text:0000000000408977\n.text:000000000040897a\n.text:000000000040897d\n.text:0000000000408984\n.text:0000000000408985\n.text:0000000000408987\n.text:0000000000408989\n.text:000000000040898b\n.text:000000000040898d\n.text:000000000040898e\n.text:000000000040898f\n.text:0000000000408992\n.text:0000000000408994\n.text:0000000000408999\n.text:000000000040899e\n.text:00000000004089a3\n'
p2610
tp2611
sS'sched_getaffinity'
p2612
(S'\n__stdcall sched_getaffinity(__pid_t __pid, size_t __cpusetsize, cpu_set_t * __cpuset)\n'
p2613
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sched_getaffinity(__pid_t __pid,size_t __cpusetsize,cpu_set_t *__cpuset)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sched_getaffinity_0061a378)();\u000a  return iVar1;\u000a}\u000a\u000a
p2614
S'JMP qword ptr [0x0061a378]\n'
p2615
S'ff 25 e2 78 21 00\n'
p2616
S'.plt:0000000000402a90\n'
p2617
tp2618
sS'__freading'
p2619
(S'\n__stdcall __freading()\n'
p2620
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0061a298)();\u000a  return;\u000a}\u000a\u000a
p2621
S'JMP qword ptr [0x0061a298]\n'
p2622
S'ff 25 c2 79 21 00\n'
p2623
S'.plt:00000000004028d0\n'
p2624
tp2625
sS'parse_field_count'
p2626
(S'\n__stdcall parse_field_count(char * string, size_t * val, char * msgid)\n'
p2627
V\u000achar * parse_field_count(char *string,size_t *val,char *msgid)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  undefined8 uVar2;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  size_t sVar5;\u000a  size_t local_30;\u000a  char *local_28;\u000a  \u000a  sVar1 = xstrtoumax(string,&local_28,(uintmax_t *)0xa,(char *)&local_30);\u000a  if (sVar1 < (LONGINT_OVERFLOW|LONGINT_INVALID)) {\u000a    sVar5 = 0xffffffffffffffff;\u000a    switch(sVar1) {\u000a    default:\u000a      sVar5 = local_30;\u000a    case LONGINT_OVERFLOW:\u000a    case LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW:\u000a      *val = sVar5;\u000a      break;\u000a    case LONGINT_INVALID:\u000a      local_28 = (char *)0x0;\u000a      if (msgid != (char *)0x0) {\u000a        uVar2 = dcgettext(0,"%s: invalid count at start of %s",5);\u000a        uVar3 = dcgettext(0,msgid,5);\u000a        pcVar4 = quote(string);\u000a        error(2,0,uVar2,uVar3,pcVar4);\u000a      }\u000a    }\u000a  }\u000a  return local_28;\u000a}\u000a\u000a
p2628
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RDX\nMOV RBX,RSI\nMOV R15,RDI\nLEA RSI,[RSP + 0x10]\nLEA RCX,[RSP + 0x8]\nMOV EDX,0xa\nMOV R8D,0x414bf9\nCALL 0x004102c0\nCMP EAX,0x4\nJA 0x0040451b\nMOV RCX,-0x1\nMOV EAX,EAX\nJMP qword ptr [0x411e58 + RAX*0x8]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX],RCX\nMOV RBX,qword ptr [RSP + 0x10]\nMOV RAX,RBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nXOR EBX,EBX\nTEST R14,R14\nJZ 0x00404520\nXOR EDI,EDI\nMOV ESI,0x413b79\nMOV EDX,0x5\nCALL 0x004025b0\nMOV R12,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,R14\nCALL 0x004025b0\nMOV R14,RAX\nMOV RDI,R15\nCALL 0x0040deb0\nMOV R8,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R14\nCALL 0x00402960\nJMP 0x00404520\n'
p2629
S'41 57\n41 56\n41 54\n53\n48 83 ec 18\n49 89 d6\n48 89 f3\n49 89 ff\n48 8d 74 24 10\n48 8d 4c 24 08\nba 0a 00 00 00\n41 b8 f9 4b 41 00\ne8 c2 bd 00 00\n83 f8 04\n77 18\n48 c7 c1 ff ff ff ff\n89 c0\nff 24 c5 58 1e 41 00\n48 8b 4c 24 08\n48 89 0b\n48 8b 5c 24 10\n48 89 d8\n48 83 c4 18\n5b\n41 5c\n41 5e\n41 5f\nc3\n31 db\n4d 85 f6\n74 ea\n31 ff\nbe 79 3b 41 00\nba 05 00 00 00\ne8 69 e0 ff ff\n49 89 c4\n31 ff\nba 05 00 00 00\n4c 89 f6\ne8 57 e0 ff ff\n49 89 c6\n4c 89 ff\ne8 4c 99 00 00\n49 89 c0\nbf 02 00 00 00\n31 f6\n31 c0\n4c 89 e2\n4c 89 f1\ne8 e5 e3 ff ff\neb a3\n'
p2630
S'.text:00000000004044d0\n.text:00000000004044d2\n.text:00000000004044d4\n.text:00000000004044d6\n.text:00000000004044d7\n.text:00000000004044db\n.text:00000000004044de\n.text:00000000004044e1\n.text:00000000004044e4\n.text:00000000004044e9\n.text:00000000004044ee\n.text:00000000004044f3\n.text:00000000004044f9\n.text:00000000004044fe\n.text:0000000000404501\n.text:0000000000404503\n.text:000000000040450a\n.text:000000000040450c\n.text:0000000000404513\n.text:0000000000404518\n.text:000000000040451b\n.text:0000000000404520\n.text:0000000000404523\n.text:0000000000404527\n.text:0000000000404528\n.text:000000000040452a\n.text:000000000040452c\n.text:000000000040452e\n.text:000000000040452f\n.text:0000000000404531\n.text:0000000000404534\n.text:0000000000404536\n.text:0000000000404538\n.text:000000000040453d\n.text:0000000000404542\n.text:0000000000404547\n.text:000000000040454a\n.text:000000000040454c\n.text:0000000000404551\n.text:0000000000404554\n.text:0000000000404559\n.text:000000000040455c\n.text:000000000040455f\n.text:0000000000404564\n.text:0000000000404567\n.text:000000000040456c\n.text:000000000040456e\n.text:0000000000404570\n.text:0000000000404573\n.text:0000000000404576\n.text:000000000040457b\n'
p2631
tp2632
sS'iswcntrl'
p2633
(S'\n__stdcall iswcntrl(wint_t __wc)\n'
p2634
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswcntrl(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswcntrl_0061a0a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2635
S'JMP qword ptr [0x0061a0a0]\n'
p2636
S'ff 25 ba 7b 21 00\n'
p2637
S'.plt:00000000004024e0\n'
p2638
tp2639
sS'fputs_unlocked'
p2640
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p2641
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0061a1c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p2642
S'JMP qword ptr [0x0061a1c8]\n'
p2643
S'ff 25 92 7a 21 00\n'
p2644
S'.plt:0000000000402730\n'
p2645
tp2646
sS'xcharalloc'
p2647
(S'\n__stdcall xcharalloc(size_t n)\n'
p2648
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p2649
S'JMP 0x0040fb80\n'
p2650
S'e9 2b ff ff ff\n'
p2651
S'.text:000000000040fc50\n'
p2652
tp2653
sS'randread_set_handler'
p2654
(S'\n__stdcall randread_set_handler(randread_source * s, anon_subr_void_void_ptr * handler)\n'
p2655
V\u000avoid randread_set_handler(randread_source *s,void (*handler)(void *))\u000a\u000a{\u000a  s->handler = handler;\u000a  return;\u000a}\u000a\u000a
p2656
S'MOV qword ptr [RDI + 0x8],RSI\nRET\n'
p2657
S'48 89 77 08\nc3\n'
p2658
S'.text:000000000040e540\n.text:000000000040e544\n'
p2659
tp2660
sS'c_isalnum'
p2661
(S'\n__stdcall c_isalnum()\n'
p2662
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p2663
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00410dab\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00410dab\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00410daa\nXOR EAX,EAX\nRET\n'
p2664
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p2665
S'.text:0000000000410d90\n.text:0000000000410d92\n.text:0000000000410d95\n.text:0000000000410d98\n.text:0000000000410d9a\n.text:0000000000410da4\n.text:0000000000410da8\n.text:0000000000410daa\n.text:0000000000410dab\n.text:0000000000410dae\n.text:0000000000410db1\n.text:0000000000410db3\n.text:0000000000410db5\n'
p2666
tp2667
sS'timespec_sign'
p2668
(S'\n__stdcall timespec_sign()\n'
p2669
V\u000aint timespec_sign(void)\u000a\u000a{\u000a  uint uVar1;\u000a  ulong in_RSI;\u000a  ulong in_RDI;\u000a  \u000a  uVar1 = 0xffffffff;\u000a  if (-1 < (long)in_RDI) {\u000a    uVar1 = (uint)((in_RSI | in_RDI) != 0);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p2670
S'XOR ECX,ECX\nOR RSI,RDI\nSETNZ CL\nTEST RDI,RDI\nMOV EAX,0xffffffff\nCMOVNS EAX,ECX\nRET\n'
p2671
S'31 c9\n48 09 fe\n0f 95 c1\n48 85 ff\nb8 ff ff ff ff\n0f 49 c1\nc3\n'
p2672
S'.text:00000000004114d0\n.text:00000000004114d2\n.text:00000000004114d5\n.text:00000000004114d8\n.text:00000000004114db\n.text:00000000004114e0\n.text:00000000004114e3\n'
p2673
tp2674
sS'__errno_location'
p2675
(S'\n__stdcall __errno_location()\n'
p2676
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0061a048)();\u000a  return piVar1;\u000a}\u000a\u000a
p2677
S'JMP qword ptr [0x0061a048]\n'
p2678
S'ff 25 12 7c 21 00\n'
p2679
S'.plt:0000000000402430\n'
p2680
tp2681
sS'x2nrealloc'
p2682
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p2683
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p2684
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x0040fc1c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x0040fc49\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x0040fc3a\nTEST RCX,RCX\nJNZ 0x0040fc3a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x0040fbc0\nPUSH RAX\nCALL 0x0040fd10\n'
p2685
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p2686
S'.text:000000000040fbf0\n.text:000000000040fbf3\n.text:000000000040fbf6\n.text:000000000040fbf9\n.text:000000000040fbfb\n.text:000000000040fc05\n.text:000000000040fc07\n.text:000000000040fc0a\n.text:000000000040fc0d\n.text:000000000040fc0f\n.text:000000000040fc12\n.text:000000000040fc15\n.text:000000000040fc1a\n.text:000000000040fc1c\n.text:000000000040fc1f\n.text:000000000040fc21\n.text:000000000040fc26\n.text:000000000040fc28\n.text:000000000040fc2b\n.text:000000000040fc2d\n.text:000000000040fc34\n.text:000000000040fc37\n.text:000000000040fc3a\n.text:000000000040fc3d\n.text:000000000040fc41\n.text:000000000040fc44\n.text:000000000040fc49\n.text:000000000040fc4a\n'
p2687
tp2688
sS'quotearg_n_options'
p2689
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p2690
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p2691
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00402430\nTEST R12D,R12D\nJS 0x0040db71\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0061a4e8]\nCMP dword ptr [0x0061a4f0],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040da8b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x61a4f8\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x0040fbc0\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0061a4e8],R15\nJNZ 0x0040da52\nMOVUPS XMM0,xmmword ptr [0x0061a4f8]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0061a4f0]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00402690\nMOV dword ptr [0x0061a4f0],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x0040cbe0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040daed\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040db5b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x61abc0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x0040db18\nCALL 0x00402400\nMOV RDI,R15\nCALL 0x0040fc50\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x0040cbe0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402420\n'
p2692
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 51 4a ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 ee ca 20 00\n44 39 25 ef ca 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd f8 a4 61 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 88 21 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d a3 ca 20 00\n75 0b\n0f 10 05 aa ca 20 00\n41 0f 11 07\n8b 05 98 ca 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 1d 4c ff ff\n89 1d 77 ca 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 c0 ab 61 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 e8 48 ff ff\n4c 89 ff\ne8 30 21 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 aa 48 ff ff\n'
p2693
S'.text:000000000040d9c0\n.text:000000000040d9c1\n.text:000000000040d9c3\n.text:000000000040d9c5\n.text:000000000040d9c7\n.text:000000000040d9c9\n.text:000000000040d9ca\n.text:000000000040d9ce\n.text:000000000040d9d1\n.text:000000000040d9d4\n.text:000000000040d9d7\n.text:000000000040d9da\n.text:000000000040d9df\n.text:000000000040d9e2\n.text:000000000040d9e8\n.text:000000000040d9ed\n.text:000000000040d9ef\n.text:000000000040d9f3\n.text:000000000040d9fa\n.text:000000000040da01\n.text:000000000040da06\n.text:000000000040da0b\n.text:000000000040da10\n.text:000000000040da12\n.text:000000000040da17\n.text:000000000040da1a\n.text:000000000040da1d\n.text:000000000040da23\n.text:000000000040da25\n.text:000000000040da28\n.text:000000000040da2c\n.text:000000000040da2f\n.text:000000000040da33\n.text:000000000040da38\n.text:000000000040da3b\n.text:000000000040da3e\n.text:000000000040da45\n.text:000000000040da47\n.text:000000000040da4e\n.text:000000000040da52\n.text:000000000040da58\n.text:000000000040da5b\n.text:000000000040da5f\n.text:000000000040da62\n.text:000000000040da65\n.text:000000000040da69\n.text:000000000040da6b\n.text:000000000040da6e\n.text:000000000040da73\n.text:000000000040da79\n.text:000000000040da7c\n.text:000000000040da81\n.text:000000000040da86\n.text:000000000040da8b\n.text:000000000040da8e\n.text:000000000040da92\n.text:000000000040da96\n.text:000000000040da9b\n.text:000000000040da9f\n.text:000000000040daa3\n.text:000000000040daa7\n.text:000000000040daab\n.text:000000000040daaf\n.text:000000000040dab4\n.text:000000000040dab7\n.text:000000000040daba\n.text:000000000040dabd\n.text:000000000040dac2\n.text:000000000040dac5\n.text:000000000040dac8\n.text:000000000040dacb\n.text:000000000040dacc\n.text:000000000040dad1\n.text:000000000040dad5\n.text:000000000040dad8\n.text:000000000040dadb\n.text:000000000040dadd\n.text:000000000040dae2\n.text:000000000040dae6\n.text:000000000040daeb\n.text:000000000040daed\n.text:000000000040daf1\n.text:000000000040daf6\n.text:000000000040daf9\n.text:000000000040dafc\n.text:000000000040db01\n.text:000000000040db06\n.text:000000000040db09\n.text:000000000040db0e\n.text:000000000040db11\n.text:000000000040db13\n.text:000000000040db18\n.text:000000000040db1b\n.text:000000000040db20\n.text:000000000040db23\n.text:000000000040db26\n.text:000000000040db2b\n.text:000000000040db2e\n.text:000000000040db32\n.text:000000000040db35\n.text:000000000040db38\n.text:000000000040db3d\n.text:000000000040db42\n.text:000000000040db47\n.text:000000000040db4a\n.text:000000000040db4d\n.text:000000000040db4e\n.text:000000000040db53\n.text:000000000040db57\n.text:000000000040db5b\n.text:000000000040db5f\n.text:000000000040db62\n.text:000000000040db66\n.text:000000000040db67\n.text:000000000040db69\n.text:000000000040db6b\n.text:000000000040db6d\n.text:000000000040db6f\n.text:000000000040db70\n.text:000000000040db71\n'
p2694
tp2695
sS'strcmp'
p2696
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p2697
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0061a1e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p2698
S'JMP qword ptr [0x0061a1e8]\n'
p2699
S'ff 25 72 7a 21 00\n'
p2700
S'.plt:0000000000402770\n'
p2701
tp2702
sS'num_processors'
p2703
(S'\n__stdcall num_processors()\n'
p2704
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000aulong num_processors(void)\u000a\u000a{\u000a  char cVar1;\u000a  _Bool _Var2;\u000a  char *in_RAX;\u000a  char *__nptr;\u000a  ulong uVar3;\u000a  int in_EDI;\u000a  char *local_18;\u000a  \u000a  local_18 = in_RAX;\u000a  if (in_EDI != 1) {\u000a    if (in_EDI != 2) {\u000a      uVar3 = sysconf(0x53);\u000a      if ((uVar3 == 1) && (uVar3 = num_processors_via_affinity_mask(), uVar3 == 0)) {\u000a        return 1;\u000a      }\u000a      goto LAB_0040c7bf;\u000a    }\u000a    local_18 = in_RAX;\u000a    __nptr = getenv("OMP_NUM_THREADS");\u000a    if (__nptr != (char *)0x0) {\u000a      cVar1 = *__nptr;\u000a      while ((cVar1 != 0 && (_Var2 = c_isspace(), _Var2 != false))) {\u000a        cVar1 = __nptr[1];\u000a        __nptr = __nptr + 1;\u000a      }\u000a      _Var2 = c_isdigit();\u000a      if (_Var2 != false) {\u000a        local_18 = (char *)0x0;\u000a        uVar3 = strtoul(__nptr,&local_18,10);\u000a        if (local_18 != (char *)0x0) {\u000a          cVar1 = *local_18;\u000a          __nptr = local_18;\u000a          while (cVar1 != 0) {\u000a            _Var2 = c_isspace();\u000a            if (_Var2 == false) {\u000a              cVar1 = *__nptr;\u000a              goto joined_r0x0040c7a9;\u000a            }\u000a            cVar1 = __nptr[1];\u000a            __nptr = __nptr + 1;\u000a          }\u000a          cVar1 = *__nptr;\u000ajoined_r0x0040c7a9:\u000a          local_18 = __nptr;\u000a          if (cVar1 == 0) {\u000a            if (uVar3 == 0) {\u000a              return 1;\u000a            }\u000a            return uVar3;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  uVar3 = num_processors_via_affinity_mask();\u000a  if (uVar3 != 0) {\u000a    return uVar3;\u000a  }\u000a  uVar3 = sysconf(0x54);\u000aLAB_0040c7bf:\u000a  if ((long)uVar3 < 1) {\u000a    return 1;\u000a  }\u000a  return uVar3;\u000a}\u000a\u000a
p2705
S'PUSH R14\nPUSH RBX\nPUSH RAX\nCMP EDI,0x1\nJZ 0x0040c7ab\nCMP EDI,0x2\nJNZ 0x0040c786\nMOV EDI,0x4144e0\nCALL 0x004023d0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040c7ab\nMOV AL,byte ptr [RBX]\nTEST AL,AL\nJNZ 0x0040c70b\nJMP 0x0040c717\nMOVZX EAX,byte ptr [RBX + 0x1]\nINC RBX\nTEST AL,AL\nJZ 0x0040c717\nMOVSX EDI,AL\nCALL 0x00410e70\nTEST AL,AL\nJNZ 0x0040c700\nMOVSX EDI,byte ptr [RBX]\nCALL 0x00410e10\nTEST AL,AL\nJZ 0x0040c7ab\nMOV qword ptr [RSP],0x0\nMOV RSI,RSP\nMOV EDX,0xa\nMOV RDI,RBX\nCALL 0x00402a00\nMOV R14,RAX\nCMP qword ptr [RSP],0x0\nJZ 0x0040c7ab\nMOV RAX,qword ptr [RSP]\nMOV AL,byte ptr [RAX]\nTEST AL,AL\nJZ 0x0040c77b\nMOV RBX,qword ptr [RSP]\nNOP word ptr [RAX + RAX*0x1]\nMOVSX EDI,AL\nCALL 0x00410e70\nTEST AL,AL\nJZ 0x0040c7a2\nMOVZX EAX,byte ptr [RBX + 0x1]\nINC RBX\nTEST AL,AL\nJNZ 0x0040c760\nMOV qword ptr [RSP],RBX\nMOV RBX,qword ptr [RSP]\nCMP byte ptr [RBX],0x0\nJNZ 0x0040c7ab\nJMP 0x0040c7d1\nMOV EDI,0x53\nCALL 0x004029c0\nCMP RAX,0x1\nJNZ 0x0040c7bf\nCALL 0x0040c7e0\nTEST RAX,RAX\nJNZ 0x0040c7bf\nJMP 0x0040c7c4\nMOV qword ptr [RSP],RBX\nCMP byte ptr [RBX],0x0\nJZ 0x0040c7d1\nCALL 0x0040c7e0\nTEST RAX,RAX\nJNZ 0x0040c7c9\nMOV EDI,0x54\nCALL 0x004029c0\nTEST RAX,RAX\nJG 0x0040c7c9\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nTEST R14,R14\nMOV EAX,0x1\nCMOVNZ RAX,R14\nJMP 0x0040c7c9\n'
p2706
S'41 56\n53\n50\n83 ff 01\n0f 84 de 00 00 00\n83 ff 02\n0f 85 b0 00 00 00\nbf e0 44 41 00\ne8 f0 5c ff ff\n48 89 c3\n48 85 db\n0f 84 bf 00 00 00\n8a 03\n84 c0\n75 19\neb 23\n0f b6 43 01\n48 ff c3\n84 c0\n74 0c\n0f be f8\ne8 5d 47 00 00\n84 c0\n75 e9\n0f be 3b\ne8 f1 46 00 00\n84 c0\n0f 84 84 00 00 00\n48 c7 04 24 00 00 00 00\n48 89 e6\nba 0a 00 00 00\n48 89 df\ne8 c1 62 ff ff\n49 89 c6\n48 83 3c 24 00\n74 62\n48 8b 04 24\n8a 00\n84 c0\n74 28\n48 8b 1c 24\n66 0f 1f 84 00 00 00 00 00\n0f be f8\ne8 08 47 00 00\n84 c0\n74 36\n0f b6 43 01\n48 ff c3\n84 c0\n75 e9\n48 89 1c 24\n48 8b 1c 24\n80 3b 00\n75 27\neb 4b\nbf 53 00 00 00\ne8 30 62 ff ff\n48 83 f8 01\n75 29\ne8 45 00 00 00\n48 85 c0\n75 1f\neb 22\n48 89 1c 24\n80 3b 00\n74 26\ne8 30 00 00 00\n48 85 c0\n75 14\nbf 54 00 00 00\ne8 01 62 ff ff\n48 85 c0\n7f 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\nc3\n4d 85 f6\nb8 01 00 00 00\n49 0f 45 c6\neb ea\n'
p2707
S'.text:000000000040c6c0\n.text:000000000040c6c2\n.text:000000000040c6c3\n.text:000000000040c6c4\n.text:000000000040c6c7\n.text:000000000040c6cd\n.text:000000000040c6d0\n.text:000000000040c6d6\n.text:000000000040c6db\n.text:000000000040c6e0\n.text:000000000040c6e3\n.text:000000000040c6e6\n.text:000000000040c6ec\n.text:000000000040c6ee\n.text:000000000040c6f0\n.text:000000000040c6f2\n.text:000000000040c700\n.text:000000000040c704\n.text:000000000040c707\n.text:000000000040c709\n.text:000000000040c70b\n.text:000000000040c70e\n.text:000000000040c713\n.text:000000000040c715\n.text:000000000040c717\n.text:000000000040c71a\n.text:000000000040c71f\n.text:000000000040c721\n.text:000000000040c727\n.text:000000000040c72f\n.text:000000000040c732\n.text:000000000040c737\n.text:000000000040c73a\n.text:000000000040c73f\n.text:000000000040c742\n.text:000000000040c747\n.text:000000000040c749\n.text:000000000040c74d\n.text:000000000040c74f\n.text:000000000040c751\n.text:000000000040c753\n.text:000000000040c757\n.text:000000000040c760\n.text:000000000040c763\n.text:000000000040c768\n.text:000000000040c76a\n.text:000000000040c76c\n.text:000000000040c770\n.text:000000000040c773\n.text:000000000040c775\n.text:000000000040c777\n.text:000000000040c77b\n.text:000000000040c77f\n.text:000000000040c782\n.text:000000000040c784\n.text:000000000040c786\n.text:000000000040c78b\n.text:000000000040c790\n.text:000000000040c794\n.text:000000000040c796\n.text:000000000040c79b\n.text:000000000040c79e\n.text:000000000040c7a0\n.text:000000000040c7a2\n.text:000000000040c7a6\n.text:000000000040c7a9\n.text:000000000040c7ab\n.text:000000000040c7b0\n.text:000000000040c7b3\n.text:000000000040c7b5\n.text:000000000040c7ba\n.text:000000000040c7bf\n.text:000000000040c7c2\n.text:000000000040c7c4\n.text:000000000040c7c9\n.text:000000000040c7cd\n.text:000000000040c7ce\n.text:000000000040c7d0\n.text:000000000040c7d1\n.text:000000000040c7d4\n.text:000000000040c7d9\n.text:000000000040c7dd\n'
p2708
tp2709
sS'physmem_available'
p2710
(S'\n__stdcall physmem_available()\n'
p2711
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000adouble physmem_available(void)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  ulong uVar3;\u000a  undefined auVar4 [16];\u000a  double dVar5;\u000a  undefined4 uVar6;\u000a  undefined auVar7 [16];\u000a  undefined auStack120 [40];\u000a  ulong local_50;\u000a  ulong local_40;\u000a  uint local_10;\u000a  \u000a  uVar2 = sysconf(0x56);\u000a  uVar3 = sysconf(0x1e);\u000a  if ((long)(uVar3 | uVar2) < 0) {\u000a    iVar1 = sysinfo((sysinfo *)auStack120);\u000a    if (iVar1 != 0) {\u000a      dVar5 = physmem_total();\u000a      return dVar5 * DAT_00412608;\u000a    }\u000a    uVar6 = SUB164(_DAT_004125c0 >> 0x20,0);\u000a    auVar4 = subpd(CONCAT88(SUB168(CONCAT412(uVar6,ZEXT812(local_50) &\u000a                                                   (undefined  [12])0xffffffffffffffff |\u000a                                                   (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                            CONCAT44(SUB164(_DAT_004125c0,0),\u000a                                     SUB124(ZEXT812(local_50) & (undefined  [12])0xffffffffffffffff,\u000a                                            0))),CONCAT88(DAT_004125d8,DAT_004125d0));\u000a    auVar7 = addpd(CONCAT412(SUB164(auVar4 >> 0x20,0),\u000a                             CONCAT48(SUB164(auVar4,0),SUB168(auVar4 >> 0x40,0))),auVar4);\u000a    auVar4 = subpd(CONCAT88(SUB168(CONCAT412(uVar6,ZEXT812(local_40) &\u000a                                                   (undefined  [12])0xffffffffffffffff |\u000a                                                   (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                            CONCAT44(SUB164(_DAT_004125c0,0),\u000a                                     SUB124(ZEXT812(local_40) & (undefined  [12])0xffffffffffffffff,\u000a                                            0))),CONCAT88(DAT_004125d8,DAT_004125d0));\u000a    auVar4 = addpd(CONCAT412(SUB164(auVar4 >> 0x20,0),\u000a                             CONCAT48(SUB164(auVar4,0),SUB168(auVar4 >> 0x40,0))),auVar4);\u000a    dVar5 = SUB168(auVar4,0) + SUB168(auVar7,0);\u000a    uVar2 = (ulong)local_10;\u000a  }\u000a  else {\u000a    dVar5 = (double)uVar3;\u000a  }\u000a  return (double)uVar2 * dVar5;\u000a}\u000a\u000a
p2712
S'PUSH RBX\nSUB RSP,0x70\nMOV EDI,0x56\nCALL 0x004029c0\nMOV RBX,RAX\nMOV EDI,0x1e\nCALL 0x004029c0\nMOV RCX,RAX\nOR RCX,RBX\nJS 0x0040c8e4\nCVTSI2SD XMM1,RAX\nCVTSI2SD XMM0,RBX\nMULSD XMM0,XMM1\nJMP 0x0040c8fd\nMOV RDI,RSP\nCALL 0x00402a20\nTEST EAX,EAX\nJZ 0x0040c903\nCALL 0x0040c830\nMULSD XMM0,qword ptr [0x00412608]\nADD RSP,0x70\nPOP RBX\nRET\nMOVQ XMM0,qword ptr [RSP + 0x28]\nMOVDQA XMM1,xmmword ptr [0x004125c0]\nPUNPCKLDQ XMM0,XMM1\nMOVAPD XMM2,xmmword ptr [0x004125d0]\nSUBPD XMM0,XMM2\nPSHUFD XMM3,XMM0,0x4e\nADDPD XMM3,XMM0\nMOVQ XMM0,qword ptr [RSP + 0x38]\nPUNPCKLDQ XMM0,XMM1\nSUBPD XMM0,XMM2\nPSHUFD XMM1,XMM0,0x4e\nADDPD XMM1,XMM0\nADDSD XMM1,XMM3\nMOV EAX,dword ptr [RSP + 0x68]\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,RAX\nJMP 0x0040c8de\n'
p2713
S'53\n48 83 ec 70\nbf 56 00 00 00\ne8 01 61 ff ff\n48 89 c3\nbf 1e 00 00 00\ne8 f4 60 ff ff\n48 89 c1\n48 09 d9\n78 10\nf2 48 0f 2a c8\nf2 48 0f 2a c3\nf2 0f 59 c1\neb 19\n48 89 e7\ne8 34 61 ff ff\n85 c0\n74 13\ne8 3b ff ff ff\nf2 0f 59 05 0b 5d 00 00\n48 83 c4 70\n5b\nc3\nf3 0f 7e 44 24 28\n66 0f 6f 0d af 5c 00 00\n66 0f 62 c1\n66 0f 28 15 b3 5c 00 00\n66 0f 5c c2\n66 0f 70 d8 4e\n66 0f 58 d8\nf3 0f 7e 44 24 38\n66 0f 62 c1\n66 0f 5c c2\n66 0f 70 c8 4e\n66 0f 58 c8\nf2 0f 58 cb\n8b 44 24 68\n0f 57 c0\nf2 48 0f 2a c0\neb 8b\n'
p2714
S'.text:000000000040c8b0\n.text:000000000040c8b1\n.text:000000000040c8b5\n.text:000000000040c8ba\n.text:000000000040c8bf\n.text:000000000040c8c2\n.text:000000000040c8c7\n.text:000000000040c8cc\n.text:000000000040c8cf\n.text:000000000040c8d2\n.text:000000000040c8d4\n.text:000000000040c8d9\n.text:000000000040c8de\n.text:000000000040c8e2\n.text:000000000040c8e4\n.text:000000000040c8e7\n.text:000000000040c8ec\n.text:000000000040c8ee\n.text:000000000040c8f0\n.text:000000000040c8f5\n.text:000000000040c8fd\n.text:000000000040c901\n.text:000000000040c902\n.text:000000000040c903\n.text:000000000040c909\n.text:000000000040c911\n.text:000000000040c915\n.text:000000000040c91d\n.text:000000000040c921\n.text:000000000040c926\n.text:000000000040c92a\n.text:000000000040c930\n.text:000000000040c934\n.text:000000000040c938\n.text:000000000040c93d\n.text:000000000040c941\n.text:000000000040c945\n.text:000000000040c949\n.text:000000000040c94c\n.text:000000000040c951\n'
p2715
tp2716
sS'create_temp'
p2717
(S'\n__stdcall create_temp(FILE * * pfp)\n'
p2718
V\u000atempnode * create_temp(FILE **pfp)\u000a\u000a{\u000a  tempnode *ptVar1;\u000a  \u000a  ptVar1 = maybe_create_temp(pfp);\u000a  return ptVar1;\u000a}\u000a\u000a
p2719
S'XOR ESI,ESI\nJMP 0x004085b0\n'
p2720
S'31 f6\ne9 29 0a 00 00\n'
p2721
S'.text:0000000000407b80\n.text:0000000000407b82\n'
p2722
tp2723
sS'quotearg_custom_mem'
p2724
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p2725
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p2726
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x0040ddd0\n'
p2727
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p2728
S'.text:000000000040de60\n.text:000000000040de63\n.text:000000000040de66\n.text:000000000040de69\n.text:000000000040de6c\n.text:000000000040de6e\n.text:000000000040de71\n'
p2729
tp2730
sS'dcngettext'
p2731
(S'\n__stdcall dcngettext()\n'
p2732
V\u000avoid dcngettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcngettext_0061a308)();\u000a  return;\u000a}\u000a\u000a
p2733
S'JMP qword ptr [0x0061a308]\n'
p2734
S'ff 25 52 79 21 00\n'
p2735
S'.plt:00000000004029b0\n'
p2736
tp2737
sS'mergefps'
p2738
(S'\n__stdcall mergefps(sortfile * files, size_t ntemps, size_t nfiles, FILE * ofp, char * output_file, FILE * * fps)\n'
p2739
V\u000avoid mergefps(sortfile *files,size_t ntemps,size_t nfiles,FILE *ofp,char *output_file,FILE **fps)\u000a\u000a{\u000a  buffer *buf;\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  void *__ptr;\u000a  void *__ptr_00;\u000a  void *__ptr_01;\u000a  ulong *__ptr_02;\u000a  ulong uVar6;\u000a  ulong uVar7;\u000a  line *line;\u000a  line **pplVar8;\u000a  ulong *puVar9;\u000a  size_t alloc;\u000a  sortfile *psVar10;\u000a  long lVar11;\u000a  ulong uVar12;\u000a  ulong uVar13;\u000a  undefined4 *puVar14;\u000a  long lVar15;\u000a  ulong uVar16;\u000a  ulong uVar17;\u000a  long lVar18;\u000a  sortfile *psVar19;\u000a  bool bVar20;\u000a  keyfield *key;\u000a  ulong local_e0;\u000a  line *local_d0;\u000a  size_t local_b0;\u000a  sortfile *local_a8;\u000a  line local_88;\u000a  long local_68;\u000a  FILE **local_60;\u000a  sortfile *local_58;\u000a  long local_50;\u000a  long local_48;\u000a  long local_40;\u000a  keyfield *local_38;\u000a  \u000a  __ptr = xnmalloc(nfiles,0x38);\u000a  __ptr_00 = xnmalloc(nfiles,8);\u000a  __ptr_01 = xnmalloc(nfiles,8);\u000a  __ptr_02 = (ulong *)xnmalloc(nfiles,8);\u000a  local_38 = keylist;\u000a  local_88.text = (char *)0x0;\u000a  if (nfiles != 0) {\u000a    uVar7 = 0;\u000a    local_e0 = 1;\u000a    local_b0 = ntemps;\u000a    local_a8 = files;\u000a    do {\u000a      buf = (buffer *)((long)__ptr + uVar7 * 0x38);\u000a      psVar19 = files + uVar7;\u000a      while( true ) {\u000a        alloc = merge_buffer_size;\u000a        if (merge_buffer_size <= sort_size / nfiles) {\u000a          alloc = sort_size / nfiles;\u000a        }\u000a        initbuf(buf,0x20,alloc);\u000a        _Var4 = fillbuf(buf,fps[uVar7],psVar19->name);\u000a        if (_Var4 != false) break;\u000a        uVar13 = nfiles - 1;\u000a        xfclose(fps[uVar7],psVar19->name);\u000a        if (uVar7 < local_b0) {\u000a          local_b0 = local_b0 - 1;\u000a          zaptemp(psVar19->name);\u000a        }\u000a        free(buf->buf);\u000a        uVar6 = local_e0;\u000a        psVar10 = local_a8;\u000a        if (uVar7 < uVar13) {\u000a          do {\u000a            uVar1 = *(undefined4 *)((long)&psVar10[1].name + 4);\u000a            uVar2 = *(undefined4 *)&psVar10[1].temp;\u000a            uVar3 = *(undefined4 *)((long)&psVar10[1].temp + 4);\u000a            *(undefined4 *)&psVar10->name = *(undefined4 *)&psVar10[1].name;\u000a            *(undefined4 *)((long)&psVar10->name + 4) = uVar1;\u000a            *(undefined4 *)&psVar10->temp = uVar2;\u000a            *(undefined4 *)((long)&psVar10->temp + 4) = uVar3;\u000a            fps[uVar6 - 1] = fps[uVar6];\u000a            uVar6 = uVar6 + 1;\u000a            psVar10 = psVar10 + 1;\u000a          } while (nfiles != uVar6);\u000a        }\u000a        nfiles = uVar13;\u000a        if (uVar13 <= uVar7) goto LAB_0040800b;\u000a      }\u000a      line = buffer_linelim(buf);\u000a      *(line **)((long)__ptr_00 + uVar7 * 8) = line + -1;\u000a      *(line **)((long)__ptr_01 + uVar7 * 8) =\u000a           line + *(long *)((long)__ptr + uVar7 * 0x38 + 0x10) * 0x7ffffffffffffff;\u000a      uVar7 = uVar7 + 1;\u000a      local_a8 = local_a8 + 1;\u000a      local_e0 = local_e0 + 1;\u000a      uVar13 = nfiles;\u000a    } while (uVar7 < nfiles);\u000aLAB_0040800b:\u000a    if (uVar13 != 0) {\u000a      uVar7 = 0;\u000a      do {\u000a        __ptr_02[uVar7] = uVar7;\u000a        uVar7 = uVar7 + 1;\u000a      } while (uVar13 != uVar7);\u000a      if (1 < uVar13) {\u000a        uVar7 = 1;\u000a        do {\u000a          iVar5 = compare(*(line **)((long)__ptr_00 + __ptr_02[uVar7 - 1] * 8),\u000a                          *(line **)((long)__ptr_00 + __ptr_02[uVar7] * 8));\u000a          if (0 < iVar5) {\u000a            uVar6 = __ptr_02[uVar7 - 1];\u000a            __ptr_02[uVar7 - 1] = __ptr_02[uVar7];\u000a            __ptr_02[uVar7] = uVar6;\u000a            uVar7 = 0;\u000a          }\u000a          uVar7 = uVar7 + 1;\u000a        } while (uVar7 < uVar13);\u000a      }\u000a      if (uVar13 != 0) {\u000a        local_68 = uVar13 - 1;\u000a        local_40 = (long)__ptr_01 + 8;\u000a        local_48 = (long)__ptr_00 + 8;\u000a        local_50 = (long)__ptr + 0x38;\u000a        local_58 = files + 1;\u000a        local_60 = fps + 1;\u000a        local_d0 = (line *)0x0;\u000a        alloc = 0;\u000aLAB_00408120:\u000a        uVar7 = uVar13 - 1;\u000a        do {\u000a          line = *(line **)((long)__ptr_00 + *__ptr_02 * 8);\u000a          if ((unique & 1) == 0) {\u000a            write_line(line,ofp,output_file);\u000a          }\u000a          else {\u000a            if (local_d0 != (line *)0x0) {\u000a              iVar5 = compare(local_d0,line);\u000a              if (iVar5 == 0) goto LAB_00408238;\u000a              write_line(&local_88,ofp,output_file);\u000a            }\u000a            if (alloc < line->length) {\u000a              do {\u000a                if (alloc == 0) {\u000a                  alloc = line->length;\u000a                  break;\u000a                }\u000a                alloc = alloc * 2;\u000a              } while (alloc < line->length);\u000a              free(local_88.text);\u000a              local_88.text = (char *)xmalloc(alloc);\u000a            }\u000a            local_88.length = line->length;\u000a            memcpy(local_88.text,line->text,local_88.length);\u000a            if (local_38 != (keyfield *)0x0) {\u000a              local_88.keybeg = line->keybeg + -(long)line->text + (long)local_88.text;\u000a              local_88.keylim = line->keylim + -(long)line->text + (long)local_88.text;\u000a            }\u000a            local_d0 = &local_88;\u000a          }\u000aLAB_00408238:\u000a          uVar6 = *__ptr_02;\u000a          if (*(line **)((long)__ptr_01 + uVar6 * 8) < line) {\u000a            line = line + -1;\u000a            pplVar8 = (line **)((long)__ptr_00 + uVar6 * 8);\u000a          }\u000a          else {\u000a            _Var4 = fillbuf((buffer *)(uVar6 * 0x38 + (long)__ptr),fps[uVar6],files[uVar6].name);\u000a            if (_Var4 == false) goto LAB_004083a0;\u000a            uVar6 = *__ptr_02;\u000a            line = buffer_linelim((buffer *)((long)__ptr + uVar6 * 0x38));\u000a            *(line **)((long)__ptr_00 + uVar6 * 8) = line + -1;\u000a            line = line + *(long *)((long)__ptr + uVar6 * 0x38 + 0x10) * 0x7ffffffffffffff;\u000a            pplVar8 = (line **)((long)__ptr_01 + uVar6 * 8);\u000a          }\u000a          *pplVar8 = line;\u000a          uVar6 = *__ptr_02;\u000a          if (uVar13 < 2) {\u000a            lVar18 = 0;\u000a          }\u000a          else {\u000a            uVar17 = 1;\u000a            uVar16 = uVar13;\u000a            uVar12 = 1;\u000a            do {\u000a              iVar5 = compare(*(line **)((long)__ptr_00 + uVar6 * 8),\u000a                              *(line **)((long)__ptr_00 + __ptr_02[uVar12] * 8));\u000a              if ((-1 < iVar5) && ((iVar5 != 0 || (__ptr_02[uVar12] <= uVar6)))) {\u000a                uVar17 = uVar12 + 1;\u000a                uVar12 = uVar16;\u000a              }\u000a              bVar20 = uVar17 < uVar12;\u000a              uVar16 = uVar12;\u000a              uVar12 = uVar12 + uVar17 >> 1;\u000a            } while (bVar20);\u000a            lVar18 = uVar17 - 1;\u000a            lVar11 = lVar18;\u000a            puVar9 = __ptr_02;\u000a            if (lVar18 == 0) {\u000a              lVar18 = 0;\u000a            }\u000a            else {\u000a              do {\u000a                *puVar9 = puVar9[1];\u000a                lVar11 = lVar11 + -1;\u000a                puVar9 = puVar9 + 1;\u000a              } while (lVar11 != 0);\u000a            }\u000a          }\u000a          __ptr_02[lVar18] = uVar6;\u000a        } while( true );\u000a      }\u000a    }\u000a  }\u000aLAB_00408563:\u000a  xfclose(ofp,output_file);\u000a  free(fps);\u000a  free(__ptr);\u000a  free(__ptr_02);\u000a  free(__ptr_01);\u000a  free(__ptr_00);\u000a  return;\u000aLAB_004083a0:\u000a  uVar6 = *__ptr_02;\u000a  if (1 < uVar13) {\u000a    uVar12 = 1;\u000a    do {\u000a      if (uVar6 < __ptr_02[uVar12]) {\u000a        __ptr_02[uVar12] = __ptr_02[uVar12] - 1;\u000a      }\u000a      uVar12 = uVar12 + 1;\u000a      uVar6 = *__ptr_02;\u000a    } while (uVar13 != uVar12);\u000a  }\u000a  xfclose(fps[uVar6],files[uVar6].name);\u000a  if (*__ptr_02 < local_b0) {\u000a    local_b0 = local_b0 - 1;\u000a    zaptemp(files[*__ptr_02].name);\u000a  }\u000a  uVar6 = *__ptr_02;\u000a  free(*(void **)((long)__ptr + uVar6 * 0x38));\u000a  if (uVar6 < uVar7) {\u000a    lVar18 = local_40 + uVar6 * 8;\u000a    lVar11 = local_48 + uVar6 * 8;\u000a    puVar14 = (undefined4 *)(uVar6 * 0x38 + local_50);\u000a    psVar19 = local_58 + uVar6;\u000a    lVar15 = 0;\u000a    do {\u000a      (local_60 + uVar6)[lVar15 + -1] = (local_60 + uVar6)[lVar15];\u000a      uVar1 = *(undefined4 *)((long)&psVar19->name + 4);\u000a      uVar2 = *(undefined4 *)&psVar19->temp;\u000a      uVar3 = *(undefined4 *)((long)&psVar19->temp + 4);\u000a      *(undefined4 *)&psVar19[-1].name = *(undefined4 *)&psVar19->name;\u000a      *(undefined4 *)((long)&psVar19[-1].name + 4) = uVar1;\u000a      *(undefined4 *)&psVar19[-1].temp = uVar2;\u000a      *(undefined4 *)((long)&psVar19[-1].temp + 4) = uVar3;\u000a      *(undefined8 *)(puVar14 + -2) = *(undefined8 *)(puVar14 + 0xc);\u000a      puVar14[-6] = puVar14[8];\u000a      puVar14[-5] = puVar14[9];\u000a      puVar14[-4] = puVar14[10];\u000a      puVar14[-3] = puVar14[0xb];\u000a      puVar14[-10] = puVar14[4];\u000a      puVar14[-9] = puVar14[5];\u000a      puVar14[-8] = puVar14[6];\u000a      puVar14[-7] = puVar14[7];\u000a      puVar14[-0xe] = *puVar14;\u000a      puVar14[-0xd] = puVar14[1];\u000a      puVar14[-0xc] = puVar14[2];\u000a      puVar14[-0xb] = puVar14[3];\u000a      *(undefined8 *)(lVar11 + -8 + lVar15 * 8) = *(undefined8 *)(lVar11 + lVar15 * 8);\u000a      *(undefined8 *)(lVar18 + -8 + lVar15 * 8) = *(undefined8 *)(lVar18 + lVar15 * 8);\u000a      lVar15 = lVar15 + 1;\u000a      puVar14 = puVar14 + 0xe;\u000a      psVar19 = psVar19 + 1;\u000a    } while (local_68 - uVar6 != lVar15);\u000a  }\u000a  if (uVar7 == 0) goto LAB_00408539;\u000a  uVar6 = 1;\u000a  do {\u000a    __ptr_02[uVar6 - 1] = __ptr_02[uVar6];\u000a    uVar6 = uVar6 + 1;\u000a  } while (uVar13 != uVar6);\u000a  local_68 = local_68 + -1;\u000a  uVar13 = uVar7;\u000a  if (uVar7 == 0) goto LAB_00408539;\u000a  goto LAB_00408120;\u000aLAB_00408539:\u000a  if ((local_d0 != (line *)0x0) && ((unique & 1) != 0)) {\u000a    write_line(&local_88,ofp,output_file);\u000a    free(local_88.text);\u000a  }\u000a  goto LAB_00408563;\u000a}\u000a\u000a
p2740
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xc8\nMOV RBX,R9\nMOV qword ptr [RSP + 0x68],R8\nMOV qword ptr [RSP + 0x60],RCX\nMOV RBP,RDX\nMOV qword ptr [RSP + 0x48],RSI\nMOV qword ptr [RSP + 0x58],RDI\nMOV ESI,0x38\nMOV RDI,RBP\nCALL 0x0040fb60\nMOV R13,RAX\nMOV ESI,0x8\nMOV RDI,RBP\nCALL 0x0040fb60\nMOV qword ptr [RSP + 0x10],RAX\nMOV ESI,0x8\nMOV RDI,RBP\nCALL 0x0040fb60\nMOV R15,RAX\nMOV ESI,0x8\nMOV RDI,RBP\nCALL 0x0040fb60\nMOV qword ptr [RSP + 0x8],RAX\nMOV RAX,qword ptr [0x0061a650]\nMOV qword ptr [0xc0 + RSP],RAX\nMOV qword ptr [RSP + 0x70],0x0\nTEST RBP,RBP\nJZ 0x00408563\nMOV qword ptr [RSP + 0x20],RBX\nMOV qword ptr [RSP + 0x40],R13\nXOR R13D,R13D\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x18],RAX\nMOV RAX,qword ptr [RSP + 0x58]\nMOV qword ptr [RSP + 0x50],RAX\nMOV R12,qword ptr [RSP + 0x20]\nIMUL RCX,R13,0x38\nMOV RAX,qword ptr [RSP + 0x40]\nMOV qword ptr [RSP + 0x38],RCX\nLEA RAX,[RAX + RCX*0x1]\nMOV qword ptr [RSP + 0x30],RAX\nMOV R14,R13\nSHL R14,0x4\nADD R14,qword ptr [RSP + 0x58]\nMOV RSI,RBP\nMOV qword ptr [RSP + 0x28],R14\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBP,RSI\nMOV RCX,qword ptr [0x0061a4c0]\nMOV RAX,qword ptr [0x0061a668]\nXOR EDX,EDX\nDIV RBP\nCMP RCX,RAX\nCMOVBE RCX,RAX\nMOV ESI,0x20\nMOV RBX,qword ptr [RSP + 0x30]\nMOV RDI,RBX\nMOV RDX,RCX\nCALL 0x00405ea0\nMOV RSI,qword ptr [R12 + R13*0x8]\nMOV RDX,qword ptr [R14]\nMOV RDI,RBX\nCALL 0x00405f20\nTEST AL,AL\nJNZ 0x00407fc0\nMOV RBX,R14\nLEA R14,[RBP + -0x1]\nMOV RDI,qword ptr [R12 + R13*0x8]\nMOV RSI,qword ptr [RBX]\nCALL 0x004064c0\nMOV RAX,qword ptr [RSP + 0x48]\nCMP R13,RAX\nJNC 0x00407f66\nDEC RAX\nMOV qword ptr [RSP + 0x48],RAX\nMOV RDI,qword ptr [RBX]\nCALL 0x00408c00\nMOV RBX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RDI,qword ptr [RAX]\nCALL 0x00402400\nMOV RSI,R14\nCMP R13,RSI\nJNC 0x00407fac\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RCX,qword ptr [RSP + 0x50]\nNOP word ptr [RAX + RAX*0x1]\nMOVUPS XMM0,xmmword ptr [RCX + 0x10]\nMOVUPS xmmword ptr [RCX],XMM0\nLEA RCX,[RCX + 0x10]\nMOV RDX,qword ptr [RBX + RAX*0x8]\nMOV qword ptr [RBX + RAX*0x8 + -0x8],RDX\nINC RAX\nCMP RBP,RAX\nJNZ 0x00407f90\nCMP R13,RSI\nMOV R14,qword ptr [RSP + 0x28]\nJC 0x00407ef0\nJMP 0x0040800b\nMOV RDI,qword ptr [RSP + 0x30]\nCALL 0x004062c0\nLEA RCX,[RAX + -0x20]\nMOV RDX,qword ptr [RSP + 0x10]\nMOV qword ptr [RDX + R13*0x8],RCX\nMOV RCX,qword ptr [RSP + 0x40]\nMOV RDX,qword ptr [RSP + 0x38]\nMOV RCX,qword ptr [RCX + RDX*0x1 + 0x10]\nSHL RCX,0x5\nSUB RAX,RCX\nMOV qword ptr [R15 + R13*0x8],RAX\nINC R13\nADD qword ptr [RSP + 0x50],0x10\nINC qword ptr [RSP + 0x18]\nCMP R13,RBP\nMOV RSI,RBP\nJC 0x00407eb6\nTEST RSI,RSI\nMOV R13,qword ptr [RSP + 0x40]\nMOV RBX,qword ptr [RSP + 0x20]\nJZ 0x00408563\nXOR EAX,EAX\nMOV RDX,qword ptr [RSP + 0x8]\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV qword ptr [RDX + RAX*0x8],RAX\nINC RAX\nCMP RSI,RAX\nJNZ 0x00408030\nCMP RSI,0x2\nJC 0x00408097\nMOV EBP,0x1\nNOP word ptr [RAX + RAX*0x1]\nMOV R12,RSI\nMOV RAX,qword ptr [RDX + RBP*0x8 + -0x8]\nMOV RCX,qword ptr [RSP + 0x10]\nMOV RDI,qword ptr [RCX + RAX*0x8]\nMOV RAX,qword ptr [RDX + RBP*0x8]\nMOV R14,RDX\nMOV RSI,qword ptr [RCX + RAX*0x8]\nCALL 0x004062d0\nTEST EAX,EAX\nJLE 0x00408089\nMOV RAX,qword ptr [R14 + RBP*0x8 + -0x8]\nMOV RCX,qword ptr [R14 + RBP*0x8]\nMOV qword ptr [R14 + RBP*0x8 + -0x8],RCX\nMOV qword ptr [R14 + RBP*0x8],RAX\nXOR EBP,EBP\nMOV RDX,R14\nMOV RSI,R12\nINC RBP\nCMP RBP,RSI\nJC 0x00408050\nTEST RSI,RSI\nJZ 0x00408563\nMOV AL,byte ptr [0x0061a64a]\nMOV RDX,RSI\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RCX,RSI\nADD RCX,0x8\nMOV qword ptr [RSP + 0x50],RCX\nLEA RCX,[RDX + -0x1]\nMOV qword ptr [0x90 + RSP],RCX\nLEA RCX,[R15 + 0x8]\nMOV qword ptr [0xb8 + RSP],RCX\nMOV RCX,qword ptr [RSP + 0x10]\nLEA RCX,[RCX + 0x8]\nMOV qword ptr [0xb0 + RSP],RCX\nLEA RCX,[R13 + 0x38]\nMOV qword ptr [0xa8 + RSP],RCX\nMOV RCX,qword ptr [RSP + 0x58]\nLEA RCX,[RCX + 0x10]\nMOV qword ptr [0xa0 + RSP],RCX\nLEA RCX,[RBX + 0x8]\nMOV qword ptr [0x98 + RSP],RCX\nXOR ECX,ECX\nMOV qword ptr [RSP + 0x28],RCX\nXOR R12D,R12D\nMOV qword ptr [RSP + 0x18],R15\nNOP dword ptr [RAX + RAX*0x1]\nMOV R14,RDX\nLEA RCX,[R14 + -0x1]\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],R14\nJMP 0x0040814f\nMOV qword ptr [RSI + R14*0x8],RBP\nMOV AL,byte ptr [0x0061a64a]\nMOV R14,qword ptr [RSP + 0x30]\nMOV RCX,qword ptr [RSI]\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RBP,qword ptr [RDX + RCX*0x8]\nTEST AL,0x1\nJZ 0x004081b0\nMOV RDI,qword ptr [RSP + 0x28]\nTEST RDI,RDI\nJZ 0x0040818d\nMOV RSI,RBP\nCALL 0x004062d0\nTEST EAX,EAX\nJZ 0x00408238\nLEA RDI,[RSP + 0x70]\nMOV RSI,qword ptr [RSP + 0x60]\nMOV RDX,qword ptr [RSP + 0x68]\nCALL 0x004063a0\nMOV RAX,qword ptr [RBP + 0x8]\nCMP R12,RAX\nJNC 0x004081df\nNOP word ptr CS:[RAX + RAX*0x1]\nTEST R12,R12\nJZ 0x004081c4\nADD R12,R12\nCMP R12,RAX\nJC 0x004081a0\nJMP 0x004081c8\nMOV RDI,RBP\nMOV RSI,qword ptr [RSP + 0x60]\nMOV RDX,qword ptr [RSP + 0x68]\nCALL 0x004063a0\nJMP 0x00408238\nMOV R12,qword ptr [RBP + 0x8]\nMOV RDI,qword ptr [RSP + 0x70]\nCALL 0x00402400\nMOV RDI,R12\nCALL 0x0040fb80\nMOV qword ptr [RSP + 0x70],RAX\nMOV RDX,qword ptr [RBP + 0x8]\nMOV qword ptr [RSP + 0x78],RDX\nMOV RDI,qword ptr [RSP + 0x70]\nMOV RSI,qword ptr [RBP]\nCALL 0x004027c0\nCMP qword ptr [0xc0 + RSP],0x0\nJZ 0x0040822e\nMOV RAX,qword ptr [RSP + 0x70]\nMOV RCX,qword ptr [RBP]\nMOV RDX,qword ptr [RBP + 0x10]\nSUB RDX,RCX\nADD RDX,RAX\nMOV qword ptr [0x80 + RSP],RDX\nMOV RDX,qword ptr [RBP + 0x18]\nSUB RDX,RCX\nADD RDX,RAX\nMOV qword ptr [0x88 + RSP],RDX\nLEA RAX,[RSP + 0x70]\nMOV qword ptr [RSP + 0x28],RAX\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RAX,qword ptr [RSI]\nCMP qword ptr [R15 + RAX*0x8],RBP\nJNC 0x00408260\nADD RBP,-0x20\nMOV RCX,qword ptr [RSP + 0x10]\nLEA RAX,[RCX + RAX*0x8]\nJMP 0x004082ca\nIMUL RDI,RAX,0x38\nADD RDI,R13\nMOV RSI,qword ptr [RBX + RAX*0x8]\nSHL RAX,0x4\nMOV RBP,qword ptr [RSP + 0x58]\nMOV RDX,qword ptr [RBP + RAX*0x1]\nCALL 0x00405f20\nTEST AL,AL\nJZ 0x004083a0\nMOV RBP,qword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RBP]\nIMUL R14,RBX,0x38\nLEA RDI,[R13 + R14*0x1]\nCALL 0x004062c0\nMOV RSI,RBP\nMOV RBP,RAX\nLEA RAX,[RBP + -0x20]\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RCX + RBX*0x8],RAX\nMOV RAX,qword ptr [R13 + R14*0x1 + 0x10]\nMOV R14,qword ptr [RSP + 0x30]\nSHL RAX,0x5\nSUB RBP,RAX\nLEA RAX,[R15 + RBX*0x8]\nMOV RBX,qword ptr [RSP + 0x20]\nMOV qword ptr [RAX],RBP\nMOV RBP,qword ptr [RSI]\nCMP R14,0x2\nJC 0x00408380\nMOV R15D,0x1\nMOV R13,R14\nMOV R14D,0x1\nNOP dword ptr [RAX]\nMOV RCX,qword ptr [RSP + 0x10]\nMOV RDI,qword ptr [RCX + RBP*0x8]\nMOV RAX,qword ptr [RSI + R15*0x8]\nMOV RSI,qword ptr [RCX + RAX*0x8]\nCALL 0x004062d0\nTEST EAX,EAX\nJS 0x00408330\nMOV RSI,qword ptr [RSP + 0x8]\nJNZ 0x00408320\nCMP RBP,qword ptr [RSI + R15*0x8]\nJNC 0x00408320\nMOV R13,R15\nJMP 0x00408338\nINC R15\nMOV R14,R15\nJMP 0x00408338\nMOV R13,R15\nMOV RSI,qword ptr [RSP + 0x8]\nLEA R15,[R13 + R14*0x1]\nSHR R15,1\nCMP R14,R13\nJC 0x004082f0\nDEC R14\nJZ 0x00408388\nMOV RAX,qword ptr [RSP + 0x50]\nMOV RCX,R14\nMOV R13,qword ptr [RSP + 0x40]\nMOV R15,qword ptr [RSP + 0x18]\nNOP dword ptr [RAX]\nMOV RDX,qword ptr [RAX]\nMOV qword ptr [RAX + -0x8],RDX\nADD RAX,0x8\nDEC RCX\nJNZ 0x00408360\nJMP 0x00408140\nXOR R14D,R14D\nJMP 0x00408140\nXOR R14D,R14D\nMOV R13,qword ptr [RSP + 0x40]\nMOV R15,qword ptr [RSP + 0x18]\nJMP 0x00408140\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RAX,qword ptr [RSI]\nCMP R14,0x2\nJC 0x004083db\nMOV ECX,0x1\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDX,qword ptr [RSI + RCX*0x8]\nCMP RDX,RAX\nJBE 0x004083d0\nDEC RDX\nMOV qword ptr [RSI + RCX*0x8],RDX\nINC RCX\nMOV RAX,qword ptr [RSI]\nCMP R14,RCX\nJNZ 0x004083c0\nMOV RDI,qword ptr [RBX + RAX*0x8]\nSHL RAX,0x4\nMOV RSI,qword ptr [RBP + RAX*0x1]\nCALL 0x004064c0\nMOV RCX,qword ptr [RSP + 0x8]\nMOV RAX,qword ptr [RCX]\nMOV RDX,qword ptr [RSP + 0x48]\nCMP RAX,RDX\nJNC 0x0040841a\nDEC RDX\nMOV qword ptr [RSP + 0x48],RDX\nSHL RAX,0x4\nMOV RDI,qword ptr [RBP + RAX*0x1]\nCALL 0x00408c00\nMOV RCX,qword ptr [RSP + 0x8]\nMOV R15,qword ptr [RCX]\nIMUL RBP,R15,0x38\nMOV RDI,qword ptr [R13 + RBP*0x1]\nCALL 0x00402400\nCMP R15,qword ptr [RSP + 0x38]\nJNC 0x004084d4\nMOV RAX,qword ptr [0x90 + RSP]\nSUB RAX,R15\nMOV RCX,qword ptr [0xb8 + RSP]\nLEA RCX,[RCX + R15*0x8]\nMOV RDX,qword ptr [0xb0 + RSP]\nLEA RDX,[RDX + R15*0x8]\nADD RBP,qword ptr [0xa8 + RSP]\nMOV RSI,qword ptr [0x98 + RSP]\nLEA RSI,[RSI + R15*0x8]\nSHL R15,0x4\nADD R15,qword ptr [0xa0 + RSP]\nXOR EDI,EDI\nNOP dword ptr [RAX + RAX*0x1]\nMOV RBX,qword ptr [RSI + RDI*0x8]\nMOV qword ptr [RSI + RDI*0x8 + -0x8],RBX\nMOVUPS XMM0,xmmword ptr [R15]\nMOVUPS xmmword ptr [R15 + -0x10],XMM0\nMOV RBX,qword ptr [RBP + 0x30]\nMOV qword ptr [RBP + -0x8],RBX\nMOVUPS XMM0,xmmword ptr [RBP]\nMOVUPS XMM1,xmmword ptr [RBP + 0x10]\nMOVUPS XMM2,xmmword ptr [RBP + 0x20]\nMOVUPS xmmword ptr [RBP + -0x18],XMM2\nMOVUPS xmmword ptr [RBP + -0x28],XMM1\nMOVUPS xmmword ptr [RBP + -0x38],XMM0\nMOV RBX,qword ptr [RDX + RDI*0x8]\nMOV qword ptr [RDX + RDI*0x8 + -0x8],RBX\nMOV RBX,qword ptr [RCX + RDI*0x8]\nMOV qword ptr [RCX + RDI*0x8 + -0x8],RBX\nINC RDI\nADD RBP,0x38\nADD R15,0x10\nCMP RAX,RDI\nJNZ 0x00408480\nCMP qword ptr [RSP + 0x38],0x0\nJZ 0x00408529\nMOV EAX,0x1\nMOV RSI,qword ptr [RSP + 0x8]\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RCX,qword ptr [RSI + RAX*0x8]\nMOV qword ptr [RSI + RAX*0x8 + -0x8],RCX\nINC RAX\nCMP R14,RAX\nJNZ 0x004084f0\nMOV AL,byte ptr [0x0061a64a]\nDEC qword ptr [0x90 + RSP]\nMOV RDX,qword ptr [RSP + 0x38]\nTEST RDX,RDX\nMOV RBX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RSP + 0x18]\nJNZ 0x00408120\nJMP 0x00408539\nMOV AL,byte ptr [0x0061a64a]\nMOV RBX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RSP + 0x18]\nCMP qword ptr [RSP + 0x28],0x0\nJZ 0x00408563\nTEST AL,0x1\nJZ 0x00408563\nLEA RDI,[RSP + 0x70]\nMOV RSI,qword ptr [RSP + 0x60]\nMOV RDX,qword ptr [RSP + 0x68]\nCALL 0x004063a0\nMOV RDI,qword ptr [RSP + 0x70]\nCALL 0x00402400\nMOV RDI,qword ptr [RSP + 0x60]\nMOV RSI,qword ptr [RSP + 0x68]\nCALL 0x004064c0\nMOV RDI,RBX\nCALL 0x00402400\nMOV RDI,R13\nCALL 0x00402400\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x00402400\nMOV RDI,R15\nCALL 0x00402400\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00402400\nADD RSP,0xc8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2741
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec c8 00 00 00\n4c 89 cb\n4c 89 44 24 68\n48 89 4c 24 60\n48 89 d5\n48 89 74 24 48\n48 89 7c 24 58\nbe 38 00 00 00\n48 89 ef\ne8 28 7d 00 00\n49 89 c5\nbe 08 00 00 00\n48 89 ef\ne8 18 7d 00 00\n48 89 44 24 10\nbe 08 00 00 00\n48 89 ef\ne8 06 7d 00 00\n49 89 c7\nbe 08 00 00 00\n48 89 ef\ne8 f6 7c 00 00\n48 89 44 24 08\n48 8b 05 da 27 21 00\n48 89 84 24 c0 00 00 00\n48 c7 44 24 70 00 00 00 00\n48 85 ed\n0f 84 d3 06 00 00\n48 89 5c 24 20\n4c 89 6c 24 40\n45 31 ed\nb8 01 00 00 00\n48 89 44 24 18\n48 8b 44 24 58\n48 89 44 24 50\n4c 8b 64 24 20\n49 6b cd 38\n48 8b 44 24 40\n48 89 4c 24 38\n48 8d 04 08\n48 89 44 24 30\n4d 89 ee\n49 c1 e6 04\n4c 03 74 24 58\n48 89 ee\n4c 89 74 24 28\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 f5\n48 8b 0d c6 25 21 00\n48 8b 05 67 27 21 00\n31 d2\n48 f7 f5\n48 39 c1\n48 0f 46 c8\nbe 20 00 00 00\n48 8b 5c 24 30\n48 89 df\n48 89 ca\ne8 7e df ff ff\n4b 8b 34 ec\n49 8b 16\n48 89 df\ne8 ef df ff ff\n84 c0\n0f 85 87 00 00 00\n4c 89 f3\n4c 8d 75 ff\n4b 8b 3c ec\n48 8b 33\ne8 74 e5 ff ff\n48 8b 44 24 48\n49 39 c5\n73 10\n48 ff c8\n48 89 44 24 48\n48 8b 3b\ne8 9a 0c 00 00\n48 8b 5c 24 20\n48 8b 44 24 30\n48 8b 38\ne8 88 a4 ff ff\n4c 89 f6\n49 39 f5\n73 2c\n48 8b 44 24 18\n48 8b 4c 24 50\n66 0f 1f 44 00 00\n0f 10 41 10\n0f 11 01\n48 8d 49 10\n48 8b 14 c3\n48 89 54 c3 f8\n48 ff c0\n48 39 c5\n75 e4\n49 39 f5\n4c 8b 74 24 28\n0f 82 36 ff ff ff\neb 4f\n48 8b 7c 24 30\ne8 f6 e2 ff ff\n48 8d 48 e0\n48 8b 54 24 10\n4a 89 0c ea\n48 8b 4c 24 40\n48 8b 54 24 38\n48 8b 4c 11 10\n48 c1 e1 05\n48 29 c8\n4b 89 04 ef\n49 ff c5\n48 83 44 24 50 10\n48 ff 44 24 18\n49 39 ed\n48 89 ee\n0f 82 ab fe ff ff\n48 85 f6\n4c 8b 6c 24 40\n48 8b 5c 24 20\n0f 84 45 05 00 00\n31 c0\n48 8b 54 24 08\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 04 c2\n48 ff c0\n48 39 c6\n75 f4\n48 83 fe 02\n72 55\nbd 01 00 00 00\n66 0f 1f 84 00 00 00 00 00\n49 89 f4\n48 8b 44 ea f8\n48 8b 4c 24 10\n48 8b 3c c1\n48 8b 04 ea\n49 89 d6\n48 8b 34 c1\ne8 5f e2 ff ff\n85 c0\n7e 14\n49 8b 44 ee f8\n49 8b 0c ee\n49 89 4c ee f8\n49 89 04 ee\n31 ed\n4c 89 f2\n4c 89 e6\n48 ff c5\n48 39 f5\n72 b9\n48 85 f6\n0f 84 c3 04 00 00\n8a 05 a4 25 21 00\n48 89 f2\n48 8b 74 24 08\n48 89 f1\n48 83 c1 08\n48 89 4c 24 50\n48 8d 4a ff\n48 89 8c 24 90 00 00 00\n49 8d 4f 08\n48 89 8c 24 b8 00 00 00\n48 8b 4c 24 10\n48 8d 49 08\n48 89 8c 24 b0 00 00 00\n49 8d 4d 38\n48 89 8c 24 a8 00 00 00\n48 8b 4c 24 58\n48 8d 49 10\n48 89 8c 24 a0 00 00 00\n48 8d 4b 08\n48 89 8c 24 98 00 00 00\n31 c9\n48 89 4c 24 28\n45 31 e4\n4c 89 7c 24 18\n0f 1f 44 00 00\n49 89 d6\n49 8d 4e ff\n48 89 4c 24 38\n4c 89 74 24 30\neb 1c\n4a 89 2c f6\n8a 05 00 25 21 00\n4c 8b 74 24 30\n48 8b 0e\n48 8b 54 24 10\n48 8b 2c ca\na8 01\n74 51\n48 8b 7c 24 28\n48 85 ff\n74 24\n48 89 ee\ne8 5f e1 ff ff\n85 c0\n0f 84 bf 00 00 00\n48 8d 7c 24 70\n48 8b 74 24 60\n48 8b 54 24 68\ne8 13 e2 ff ff\n48 8b 45 08\n49 39 c4\n73 49\n66 2e 0f 1f 84 00 00 00 00 00\n4d 85 e4\n74 1f\n4d 01 e4\n49 39 c4\n72 f3\neb 19\n48 89 ef\n48 8b 74 24 60\n48 8b 54 24 68\ne8 de e1 ff ff\neb 74\n4c 8b 65 08\n48 8b 7c 24 70\ne8 2e a2 ff ff\n4c 89 e7\ne8 a6 79 00 00\n48 89 44 24 70\n48 8b 55 08\n48 89 54 24 78\n48 8b 7c 24 70\n48 8b 75 00\ne8 ca a5 ff ff\n48 83 bc 24 c0 00 00 00 00\n74 2d\n48 8b 44 24 70\n48 8b 4d 00\n48 8b 55 10\n48 29 ca\n48 01 c2\n48 89 94 24 80 00 00 00\n48 8b 55 18\n48 29 ca\n48 01 c2\n48 89 94 24 88 00 00 00\n48 8d 44 24 70\n48 89 44 24 28\n48 8b 74 24 08\n48 8b 06\n49 39 2c c7\n73 1a\n48 83 c5 e0\n48 8b 4c 24 10\n48 8d 04 c1\neb 75\n48 6b f8 38\n4c 01 ef\n48 8b 34 c3\n48 c1 e0 04\n48 8b 6c 24 58\n48 8b 54 05 00\ne8 a2 dc ff ff\n84 c0\n0f 84 1a 01 00 00\n48 8b 6c 24 08\n48 8b 5d 00\n4c 6b f3 38\n4b 8d 7c 35 00\ne8 23 e0 ff ff\n48 89 ee\n48 89 c5\n48 8d 45 e0\n48 8b 4c 24 10\n48 89 04 d9\n4b 8b 44 35 10\n4c 8b 74 24 30\n48 c1 e0 05\n48 29 c5\n49 8d 04 df\n48 8b 5c 24 20\n48 89 28\n48 8b 2e\n49 83 fe 02\n0f 82 a6 00 00 00\n41 bf 01 00 00 00\n4d 89 f5\n41 be 01 00 00 00\n0f 1f 80 00 00 00 00\n48 8b 4c 24 10\n48 8b 3c e9\n4a 8b 04 fe\n48 8b 34 c1\ne8 ca df ff ff\n85 c0\n78 26\n48 8b 74 24 08\n75 0f\n4a 3b 2c fe\n73 09\n4d 89 fd\neb 1c\n49 ff c7\n4d 89 fe\neb 10\n4d 89 fd\n48 8b 74 24 08\n4f 8d 7c 35 00\n49 d1 ef\n4d 39 ee\n72 ab\n49 ff ce\n74 3e\n48 8b 44 24 50\n4c 89 f1\n4c 8b 6c 24 40\n4c 8b 7c 24 18\n0f 1f 40 00\n48 8b 10\n48 89 50 f8\n48 83 c0 08\n48 ff c9\n75 f0\ne9 cb fd ff ff\n45 31 f6\ne9 b8 fd ff ff\n45 31 f6\n4c 8b 6c 24 40\n4c 8b 7c 24 18\ne9 a6 fd ff ff\n48 8b 74 24 08\n48 8b 06\n49 83 fe 02\n72 2d\nb9 01 00 00 00\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 14 ce\n48 39 c2\n76 07\n48 ff ca\n48 89 14 ce\n48 ff c1\n48 8b 06\n49 39 ce\n75 e5\n48 8b 3c c3\n48 c1 e0 04\n48 8b 74 05 00\ne8 d3 e0 ff ff\n48 8b 4c 24 08\n48 8b 01\n48 8b 54 24 48\n48 39 d0\n73 1b\n48 ff ca\n48 89 54 24 48\n48 c1 e0 04\n48 8b 7c 05 00\ne8 eb 07 00 00\n48 8b 4c 24 08\n4c 8b 39\n49 6b ef 38\n49 8b 7c 2d 00\ne8 d5 9f ff ff\n4c 3b 7c 24 38\n0f 83 9e 00 00 00\n48 8b 84 24 90 00 00 00\n4c 29 f8\n48 8b 8c 24 b8 00 00 00\n4a 8d 0c f9\n48 8b 94 24 b0 00 00 00\n4a 8d 14 fa\n48 03 ac 24 a8 00 00 00\n48 8b b4 24 98 00 00 00\n4a 8d 34 fe\n49 c1 e7 04\n4c 03 bc 24 a0 00 00 00\n31 ff\n0f 1f 44 00 00\n48 8b 1c fe\n48 89 5c fe f8\n41 0f 10 07\n41 0f 11 47 f0\n48 8b 5d 30\n48 89 5d f8\n0f 10 45 00\n0f 10 4d 10\n0f 10 55 20\n0f 11 55 e8\n0f 11 4d d8\n0f 11 45 c8\n48 8b 1c fa\n48 89 5c fa f8\n48 8b 1c f9\n48 89 5c f9 f8\n48 ff c7\n48 83 c5 38\n49 83 c7 10\n48 39 f8\n75 ac\n48 83 7c 24 38 00\n74 4d\nb8 01 00 00 00\n48 8b 74 24 08\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 0c c6\n48 89 4c c6 f8\n48 ff c0\n49 39 c6\n75 ef\n8a 05 43 21 21 00\n48 ff 8c 24 90 00 00 00\n48 8b 54 24 38\n48 85 d2\n48 8b 5c 24 20\n4c 8b 7c 24 18\n0f 85 f9 fb ff ff\neb 10\n8a 05 1b 21 21 00\n48 8b 5c 24 20\n4c 8b 7c 24 18\n48 83 7c 24 28 00\n74 22\na8 01\n74 1e\n48 8d 7c 24 70\n48 8b 74 24 60\n48 8b 54 24 68\ne8 47 de ff ff\n48 8b 7c 24 70\ne8 9d 9e ff ff\n48 8b 7c 24 60\n48 8b 74 24 68\ne8 4e df ff ff\n48 89 df\ne8 86 9e ff ff\n4c 89 ef\ne8 7e 9e ff ff\n48 8b 7c 24 08\ne8 74 9e ff ff\n4c 89 ff\ne8 6c 9e ff ff\n48 8b 7c 24 10\ne8 62 9e ff ff\n48 81 c4 c8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2742
S'.text:0000000000407e00\n.text:0000000000407e01\n.text:0000000000407e03\n.text:0000000000407e05\n.text:0000000000407e07\n.text:0000000000407e09\n.text:0000000000407e0a\n.text:0000000000407e11\n.text:0000000000407e14\n.text:0000000000407e19\n.text:0000000000407e1e\n.text:0000000000407e21\n.text:0000000000407e26\n.text:0000000000407e2b\n.text:0000000000407e30\n.text:0000000000407e33\n.text:0000000000407e38\n.text:0000000000407e3b\n.text:0000000000407e40\n.text:0000000000407e43\n.text:0000000000407e48\n.text:0000000000407e4d\n.text:0000000000407e52\n.text:0000000000407e55\n.text:0000000000407e5a\n.text:0000000000407e5d\n.text:0000000000407e62\n.text:0000000000407e65\n.text:0000000000407e6a\n.text:0000000000407e6f\n.text:0000000000407e76\n.text:0000000000407e7e\n.text:0000000000407e87\n.text:0000000000407e8a\n.text:0000000000407e90\n.text:0000000000407e95\n.text:0000000000407e9a\n.text:0000000000407e9d\n.text:0000000000407ea2\n.text:0000000000407ea7\n.text:0000000000407eac\n.text:0000000000407eb1\n.text:0000000000407eb6\n.text:0000000000407eba\n.text:0000000000407ebf\n.text:0000000000407ec4\n.text:0000000000407ec8\n.text:0000000000407ecd\n.text:0000000000407ed0\n.text:0000000000407ed4\n.text:0000000000407ed9\n.text:0000000000407edc\n.text:0000000000407ee1\n.text:0000000000407ef0\n.text:0000000000407ef3\n.text:0000000000407efa\n.text:0000000000407f01\n.text:0000000000407f03\n.text:0000000000407f06\n.text:0000000000407f09\n.text:0000000000407f0d\n.text:0000000000407f12\n.text:0000000000407f17\n.text:0000000000407f1a\n.text:0000000000407f1d\n.text:0000000000407f22\n.text:0000000000407f26\n.text:0000000000407f29\n.text:0000000000407f2c\n.text:0000000000407f31\n.text:0000000000407f33\n.text:0000000000407f39\n.text:0000000000407f3c\n.text:0000000000407f40\n.text:0000000000407f44\n.text:0000000000407f47\n.text:0000000000407f4c\n.text:0000000000407f51\n.text:0000000000407f54\n.text:0000000000407f56\n.text:0000000000407f59\n.text:0000000000407f5e\n.text:0000000000407f61\n.text:0000000000407f66\n.text:0000000000407f6b\n.text:0000000000407f70\n.text:0000000000407f73\n.text:0000000000407f78\n.text:0000000000407f7b\n.text:0000000000407f7e\n.text:0000000000407f80\n.text:0000000000407f85\n.text:0000000000407f8a\n.text:0000000000407f90\n.text:0000000000407f94\n.text:0000000000407f97\n.text:0000000000407f9b\n.text:0000000000407f9f\n.text:0000000000407fa4\n.text:0000000000407fa7\n.text:0000000000407faa\n.text:0000000000407fac\n.text:0000000000407faf\n.text:0000000000407fb4\n.text:0000000000407fba\n.text:0000000000407fc0\n.text:0000000000407fc5\n.text:0000000000407fca\n.text:0000000000407fce\n.text:0000000000407fd3\n.text:0000000000407fd7\n.text:0000000000407fdc\n.text:0000000000407fe1\n.text:0000000000407fe6\n.text:0000000000407fea\n.text:0000000000407fed\n.text:0000000000407ff1\n.text:0000000000407ff4\n.text:0000000000407ffa\n.text:0000000000407fff\n.text:0000000000408002\n.text:0000000000408005\n.text:000000000040800b\n.text:000000000040800e\n.text:0000000000408013\n.text:0000000000408018\n.text:000000000040801e\n.text:0000000000408020\n.text:0000000000408025\n.text:0000000000408030\n.text:0000000000408034\n.text:0000000000408037\n.text:000000000040803a\n.text:000000000040803c\n.text:0000000000408040\n.text:0000000000408042\n.text:0000000000408047\n.text:0000000000408050\n.text:0000000000408053\n.text:0000000000408058\n.text:000000000040805d\n.text:0000000000408061\n.text:0000000000408065\n.text:0000000000408068\n.text:000000000040806c\n.text:0000000000408071\n.text:0000000000408073\n.text:0000000000408075\n.text:000000000040807a\n.text:000000000040807e\n.text:0000000000408083\n.text:0000000000408087\n.text:0000000000408089\n.text:000000000040808c\n.text:000000000040808f\n.text:0000000000408092\n.text:0000000000408095\n.text:0000000000408097\n.text:000000000040809a\n.text:00000000004080a0\n.text:00000000004080a6\n.text:00000000004080a9\n.text:00000000004080ae\n.text:00000000004080b1\n.text:00000000004080b5\n.text:00000000004080ba\n.text:00000000004080be\n.text:00000000004080c6\n.text:00000000004080ca\n.text:00000000004080d2\n.text:00000000004080d7\n.text:00000000004080db\n.text:00000000004080e3\n.text:00000000004080e7\n.text:00000000004080ef\n.text:00000000004080f4\n.text:00000000004080f8\n.text:0000000000408100\n.text:0000000000408104\n.text:000000000040810c\n.text:000000000040810e\n.text:0000000000408113\n.text:0000000000408116\n.text:000000000040811b\n.text:0000000000408120\n.text:0000000000408123\n.text:0000000000408127\n.text:000000000040812c\n.text:0000000000408131\n.text:0000000000408140\n.text:0000000000408144\n.text:000000000040814a\n.text:000000000040814f\n.text:0000000000408152\n.text:0000000000408157\n.text:000000000040815b\n.text:000000000040815d\n.text:000000000040815f\n.text:0000000000408164\n.text:0000000000408167\n.text:0000000000408169\n.text:000000000040816c\n.text:0000000000408171\n.text:0000000000408173\n.text:0000000000408179\n.text:000000000040817e\n.text:0000000000408183\n.text:0000000000408188\n.text:000000000040818d\n.text:0000000000408191\n.text:0000000000408194\n.text:0000000000408196\n.text:00000000004081a0\n.text:00000000004081a3\n.text:00000000004081a5\n.text:00000000004081a8\n.text:00000000004081ab\n.text:00000000004081ad\n.text:00000000004081b0\n.text:00000000004081b3\n.text:00000000004081b8\n.text:00000000004081bd\n.text:00000000004081c2\n.text:00000000004081c4\n.text:00000000004081c8\n.text:00000000004081cd\n.text:00000000004081d2\n.text:00000000004081d5\n.text:00000000004081da\n.text:00000000004081df\n.text:00000000004081e3\n.text:00000000004081e8\n.text:00000000004081ed\n.text:00000000004081f1\n.text:00000000004081f6\n.text:00000000004081ff\n.text:0000000000408201\n.text:0000000000408206\n.text:000000000040820a\n.text:000000000040820e\n.text:0000000000408211\n.text:0000000000408214\n.text:000000000040821c\n.text:0000000000408220\n.text:0000000000408223\n.text:0000000000408226\n.text:000000000040822e\n.text:0000000000408233\n.text:0000000000408238\n.text:000000000040823d\n.text:0000000000408240\n.text:0000000000408244\n.text:0000000000408246\n.text:000000000040824a\n.text:000000000040824f\n.text:0000000000408253\n.text:0000000000408260\n.text:0000000000408264\n.text:0000000000408267\n.text:000000000040826b\n.text:000000000040826f\n.text:0000000000408274\n.text:0000000000408279\n.text:000000000040827e\n.text:0000000000408280\n.text:0000000000408286\n.text:000000000040828b\n.text:000000000040828f\n.text:0000000000408293\n.text:0000000000408298\n.text:000000000040829d\n.text:00000000004082a0\n.text:00000000004082a3\n.text:00000000004082a7\n.text:00000000004082ac\n.text:00000000004082b0\n.text:00000000004082b5\n.text:00000000004082ba\n.text:00000000004082be\n.text:00000000004082c1\n.text:00000000004082c5\n.text:00000000004082ca\n.text:00000000004082cd\n.text:00000000004082d0\n.text:00000000004082d4\n.text:00000000004082da\n.text:00000000004082e0\n.text:00000000004082e3\n.text:00000000004082e9\n.text:00000000004082f0\n.text:00000000004082f5\n.text:00000000004082f9\n.text:00000000004082fd\n.text:0000000000408301\n.text:0000000000408306\n.text:0000000000408308\n.text:000000000040830a\n.text:000000000040830f\n.text:0000000000408311\n.text:0000000000408315\n.text:0000000000408317\n.text:000000000040831a\n.text:0000000000408320\n.text:0000000000408323\n.text:0000000000408326\n.text:0000000000408330\n.text:0000000000408333\n.text:0000000000408338\n.text:000000000040833d\n.text:0000000000408340\n.text:0000000000408343\n.text:0000000000408345\n.text:0000000000408348\n.text:000000000040834a\n.text:000000000040834f\n.text:0000000000408352\n.text:0000000000408357\n.text:000000000040835c\n.text:0000000000408360\n.text:0000000000408363\n.text:0000000000408367\n.text:000000000040836b\n.text:000000000040836e\n.text:0000000000408370\n.text:0000000000408380\n.text:0000000000408383\n.text:0000000000408388\n.text:000000000040838b\n.text:0000000000408390\n.text:0000000000408395\n.text:00000000004083a0\n.text:00000000004083a5\n.text:00000000004083a8\n.text:00000000004083ac\n.text:00000000004083ae\n.text:00000000004083b3\n.text:00000000004083c0\n.text:00000000004083c4\n.text:00000000004083c7\n.text:00000000004083c9\n.text:00000000004083cc\n.text:00000000004083d0\n.text:00000000004083d3\n.text:00000000004083d6\n.text:00000000004083d9\n.text:00000000004083db\n.text:00000000004083df\n.text:00000000004083e3\n.text:00000000004083e8\n.text:00000000004083ed\n.text:00000000004083f2\n.text:00000000004083f5\n.text:00000000004083fa\n.text:00000000004083fd\n.text:00000000004083ff\n.text:0000000000408402\n.text:0000000000408407\n.text:000000000040840b\n.text:0000000000408410\n.text:0000000000408415\n.text:000000000040841a\n.text:000000000040841d\n.text:0000000000408421\n.text:0000000000408426\n.text:000000000040842b\n.text:0000000000408430\n.text:0000000000408436\n.text:000000000040843e\n.text:0000000000408441\n.text:0000000000408449\n.text:000000000040844d\n.text:0000000000408455\n.text:0000000000408459\n.text:0000000000408461\n.text:0000000000408469\n.text:000000000040846d\n.text:0000000000408471\n.text:0000000000408479\n.text:000000000040847b\n.text:0000000000408480\n.text:0000000000408484\n.text:0000000000408489\n.text:000000000040848d\n.text:0000000000408492\n.text:0000000000408496\n.text:000000000040849a\n.text:000000000040849e\n.text:00000000004084a2\n.text:00000000004084a6\n.text:00000000004084aa\n.text:00000000004084ae\n.text:00000000004084b2\n.text:00000000004084b6\n.text:00000000004084bb\n.text:00000000004084bf\n.text:00000000004084c4\n.text:00000000004084c7\n.text:00000000004084cb\n.text:00000000004084cf\n.text:00000000004084d2\n.text:00000000004084d4\n.text:00000000004084da\n.text:00000000004084dc\n.text:00000000004084e1\n.text:00000000004084e6\n.text:00000000004084f0\n.text:00000000004084f4\n.text:00000000004084f9\n.text:00000000004084fc\n.text:00000000004084ff\n.text:0000000000408501\n.text:0000000000408507\n.text:000000000040850f\n.text:0000000000408514\n.text:0000000000408517\n.text:000000000040851c\n.text:0000000000408521\n.text:0000000000408527\n.text:0000000000408529\n.text:000000000040852f\n.text:0000000000408534\n.text:0000000000408539\n.text:000000000040853f\n.text:0000000000408541\n.text:0000000000408543\n.text:0000000000408545\n.text:000000000040854a\n.text:000000000040854f\n.text:0000000000408554\n.text:0000000000408559\n.text:000000000040855e\n.text:0000000000408563\n.text:0000000000408568\n.text:000000000040856d\n.text:0000000000408572\n.text:0000000000408575\n.text:000000000040857a\n.text:000000000040857d\n.text:0000000000408582\n.text:0000000000408587\n.text:000000000040858c\n.text:000000000040858f\n.text:0000000000408594\n.text:0000000000408599\n.text:000000000040859e\n.text:00000000004085a5\n.text:00000000004085a6\n.text:00000000004085a8\n.text:00000000004085aa\n.text:00000000004085ac\n.text:00000000004085ae\n.text:00000000004085af\n'
p2743
tp2744
sS'hash_get_max_bucket_length'
p2745
(S'\n__stdcall hash_get_max_bucket_length(Hash_table * table)\n'
p2746
V\u000asize_t hash_get_max_bucket_length(Hash_table *table)\u000a\u000a{\u000a  ulong uVar1;\u000a  hash_entry *phVar2;\u000a  ulong uVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar2 = table->bucket;\u000a  if (phVar2 < table->bucket_limit) {\u000a    uVar1 = 0;\u000a    do {\u000a      if (phVar2->data != (void *)0x0) {\u000a        uVar3 = 0;\u000a        phVar4 = phVar2;\u000a        do {\u000a          phVar4 = phVar4->next;\u000a          uVar3 = uVar3 + 1;\u000a        } while (phVar4 != (hash_entry *)0x0);\u000a        if (uVar1 < uVar3) {\u000a          uVar1 = uVar3;\u000a        }\u000a      }\u000a      phVar2 = phVar2 + 1;\u000a    } while (phVar2 < table->bucket_limit);\u000a    return uVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p2747
S'MOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x0040b19d\nMOV RDX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nNOP\nCMP qword ptr [RCX],0x0\nJZ 0x0040b193\nXOR ESI,ESI\nMOV RDI,RCX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RDI + 0x8]\nINC RSI\nTEST RDI,RDI\nJNZ 0x0040b180\nCMP RSI,RAX\nCMOVA RAX,RSI\nADD RCX,0x10\nCMP RCX,RDX\nJC 0x0040b170\nRET\nXOR EAX,EAX\nRET\n'
p2748
S'48 8b 0f\n48 3b 4f 08\n73 34\n48 8b 57 08\n31 c0\n90\n48 83 39 00\n74 1d\n31 f6\n48 89 cf\n0f 1f 44 00 00\n48 8b 7f 08\n48 ff c6\n48 85 ff\n75 f4\n48 39 c6\n48 0f 47 c6\n48 83 c1 10\n48 39 d1\n72 d4\nc3\n31 c0\nc3\n'
p2749
S'.text:000000000040b160\n.text:000000000040b163\n.text:000000000040b167\n.text:000000000040b169\n.text:000000000040b16d\n.text:000000000040b16f\n.text:000000000040b170\n.text:000000000040b174\n.text:000000000040b176\n.text:000000000040b178\n.text:000000000040b17b\n.text:000000000040b180\n.text:000000000040b184\n.text:000000000040b187\n.text:000000000040b18a\n.text:000000000040b18c\n.text:000000000040b18f\n.text:000000000040b193\n.text:000000000040b197\n.text:000000000040b19a\n.text:000000000040b19c\n.text:000000000040b19d\n.text:000000000040b19f\n'
p2750
tp2751
sS'sigaction'
p2752
(S'\n__stdcall sigaction(int __sig, sigaction * __act, sigaction * __oact)\n'
p2753
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sigaction(int __sig,sigaction *__act,sigaction *__oact)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sigaction_0061a098)();\u000a  return iVar1;\u000a}\u000a\u000a
p2754
S'JMP qword ptr [0x0061a098]\n'
p2755
S'ff 25 c2 7b 21 00\n'
p2756
S'.plt:00000000004024d0\n'
p2757
tp2758
sS'num_processors_via_affinity_mask'
p2759
(S'\n__stdcall num_processors_via_affinity_mask()\n'
p2760
V\u000aulong num_processors_via_affinity_mask(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined local_80 [128];\u000a  \u000a  iVar1 = sched_getaffinity(0,0x80,(cpu_set_t *)local_80);\u000a  if (iVar1 == 0) {\u000a    iVar1 = __sched_cpucount(0x80,(cpu_set_t *)local_80);\u000a    if (iVar1 != 0) {\u000a      return (long)iVar1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p2761
S'SUB RSP,0x88\nLEA RDX,[RSP + 0x8]\nXOR EDI,EDI\nMOV ESI,0x80\nCALL 0x00402a90\nTEST EAX,EAX\nJZ 0x0040c806\nXOR EAX,EAX\nADD RSP,0x88\nRET\nLEA RSI,[RSP + 0x8]\nMOV EDI,0x80\nCALL 0x00402580\nTEST EAX,EAX\nJZ 0x0040c7fc\nCDQE\nADD RSP,0x88\nRET\n'
p2762
S'48 81 ec 88 00 00 00\n48 8d 54 24 08\n31 ff\nbe 80 00 00 00\ne8 98 62 ff ff\n85 c0\n74 0a\n31 c0\n48 81 c4 88 00 00 00\nc3\n48 8d 74 24 08\nbf 80 00 00 00\ne8 6b 5d ff ff\n85 c0\n74 e3\n48 98\n48 81 c4 88 00 00 00\nc3\n'
p2763
S'.text:000000000040c7e0\n.text:000000000040c7e7\n.text:000000000040c7ec\n.text:000000000040c7ee\n.text:000000000040c7f3\n.text:000000000040c7f8\n.text:000000000040c7fa\n.text:000000000040c7fc\n.text:000000000040c7fe\n.text:000000000040c805\n.text:000000000040c806\n.text:000000000040c80b\n.text:000000000040c810\n.text:000000000040c815\n.text:000000000040c817\n.text:000000000040c819\n.text:000000000040c81b\n.text:000000000040c822\n'
p2764
tp2765
sS'getc_unlocked'
p2766
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p2767
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0061a088)();\u000a  return iVar1;\u000a}\u000a\u000a
p2768
S'JMP qword ptr [0x0061a088]\n'
p2769
S'ff 25 d2 7b 21 00\n'
p2770
S'.plt:00000000004024b0\n'
p2771
tp2772
sS'memmove'
p2773
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p2774
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_0061a2d0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p2775
S'JMP qword ptr [0x0061a2d0]\n'
p2776
S'ff 25 8a 79 21 00\n'
p2777
S'.plt:0000000000402940\n'
p2778
tp2779
sS'hash_insert_if_absent'
p2780
(S'\n__stdcall hash_insert_if_absent(Hash_table * table, void * entry, void * * matched_ent)\n'
p2781
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint hash_insert_if_absent(Hash_table *table,void *entry,void **matched_ent)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  Hash_tuning *pHVar3;\u000a  _Bool _Var4;\u000a  hash_entry *in_RAX;\u000a  void *pvVar5;\u000a  hash_entry *phVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_28;\u000a  \u000a  if (entry != (void *)0x0) {\u000a    local_28 = in_RAX;\u000a    pvVar5 = hash_find_entry(table,entry,&local_28);\u000a    if (pvVar5 != (void *)0x0) {\u000a      if (matched_ent == (void **)0x0) {\u000a        return 0;\u000a      }\u000a      *matched_ent = pvVar5;\u000a      return 0;\u000a    }\u000a    uVar1 = table->n_buckets;\u000a    uVar2 = table->n_buckets_used;\u000a    if ((long)uVar2 < 0) {\u000a      fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a      fVar7 = fVar7 + fVar7;\u000a    }\u000a    else {\u000a      fVar7 = (float)uVar2;\u000a    }\u000a    if ((long)uVar1 < 0) {\u000a      fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a      fVar8 = fVar8 + fVar8;\u000a    }\u000a    else {\u000a      fVar8 = (float)uVar1;\u000a    }\u000a    if (fVar8 * table->tuning->growth_threshold < fVar7) {\u000a      check_tuning(table);\u000a      uVar1 = table->n_buckets;\u000a      uVar2 = table->n_buckets_used;\u000a      if ((long)uVar2 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar2;\u000a      }\u000a      pHVar3 = table->tuning;\u000a      if ((long)uVar1 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar1;\u000a      }\u000a      if (pHVar3->growth_threshold * fVar8 < fVar7) {\u000a        fVar8 = fVar8 * pHVar3->growth_factor;\u000a        if (pHVar3->is_n_buckets == false) {\u000a          fVar8 = fVar8 * pHVar3->growth_threshold;\u000a        }\u000a        if (_DAT_00414160 <= fVar8) {\u000a          return -1;\u000a        }\u000a        candidate = (long)fVar8;\u000a        if (DAT_0041415c <= fVar8) {\u000a          candidate = (long)(fVar8 - DAT_0041415c) ^ 0x8000000000000000;\u000a        }\u000a        _Var4 = hash_rehash(table,candidate);\u000a        if (_Var4 == false) {\u000a          return -1;\u000a        }\u000a        pvVar5 = hash_find_entry(table,entry,&local_28);\u000a        if (pvVar5 != (void *)0x0) goto LAB_0040bd2d;\u000a      }\u000a    }\u000a    if (local_28->data == (void *)0x0) {\u000a      local_28->data = entry;\u000a      table->n_entries = table->n_entries + 1;\u000a      table->n_buckets_used = table->n_buckets_used + 1;\u000a    }\u000a    else {\u000a      phVar6 = allocate_entry(table);\u000a      if (phVar6 == (hash_entry *)0x0) {\u000a        return -1;\u000a      }\u000a      phVar6->data = entry;\u000a      phVar6->next = local_28->next;\u000a      local_28->next = phVar6;\u000a      table->n_entries = table->n_entries + 1;\u000a    }\u000a    return 1;\u000a  }\u000aLAB_0040bd2d:\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p2782
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST R14,R14\nJZ 0x0040bd2d\nMOV RDX,RSP\nXOR EBP,EBP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x0040bd40\nTEST RAX,RAX\nJZ 0x0040bba1\nTEST RBX,RBX\nJZ 0x0040bd20\nMOV qword ptr [RBX],RAX\nJMP 0x0040bd20\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x0040bbb5\nCVTSI2SS XMM0,RCX\nJMP 0x0040bbca\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM0,RCX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x0040bbda\nCVTSI2SS XMM1,RAX\nJMP 0x0040bbef\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nCVTSI2SS XMM1,RAX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RCX + 0x8]\nUCOMISS XMM0,XMM1\nJBE 0x0040bcd9\nMOV RDI,R15\nCALL 0x0040b670\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x0040bc19\nCVTSI2SS XMM2,RCX\nJMP 0x0040bc2e\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM2,RCX\nADDSS XMM2,XMM2\nMOV RCX,qword ptr [R15 + 0x28]\nMOVSS XMM1,dword ptr [RCX + 0x8]\nTEST RAX,RAX\nJS 0x0040bc46\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x0040bc5e\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVAPS XMM3,XMM1\nMULSS XMM3,XMM0\nUCOMISS XMM2,XMM3\nJBE 0x0040bcd9\nCMP byte ptr [RCX + 0x10],0x0\nMULSS XMM0,dword ptr [RCX + 0xc]\nJNZ 0x0040bc79\nMULSS XMM0,XMM1\nMOV EBP,0xffffffff\nUCOMISS XMM0,dword ptr [0x00414160]\nJNC 0x0040bd20\nMOVSS XMM1,dword ptr [0x0041415c]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x0040b910\nTEST AL,AL\nJZ 0x0040bd20\nMOV RDX,RSP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x0040bd40\nTEST RAX,RAX\nJNZ 0x0040bd2d\nMOV RAX,qword ptr [RSP]\nCMP qword ptr [RAX],0x0\nJZ 0x0040bd09\nMOV RDI,R15\nCALL 0x0040be00\nTEST RAX,RAX\nJZ 0x0040bd1b\nMOV qword ptr [RAX],R14\nMOV RCX,qword ptr [RSP]\nMOV RDX,qword ptr [RCX + 0x8]\nMOV qword ptr [RAX + 0x8],RDX\nMOV qword ptr [RCX + 0x8],RAX\nINC qword ptr [R15 + 0x20]\nJMP 0x0040bd14\nMOV qword ptr [RAX],R14\nINC qword ptr [R15 + 0x20]\nINC qword ptr [R15 + 0x18]\nMOV EBP,0x1\nJMP 0x0040bd20\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00402420\n'
p2783
S'55\n41 57\n41 56\n53\n50\n48 89 d3\n49 89 f6\n49 89 ff\n4d 85 f6\n0f 84 b4 01 00 00\n48 89 e2\n31 ed\n31 c9\n4c 89 ff\n4c 89 f6\ne8 b5 01 00 00\n48 85 c0\n74 11\n48 85 db\n0f 84 87 01 00 00\n48 89 03\ne9 7f 01 00 00\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a c1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c1\nf3 0f 58 c0\n49 8b 4f 28\n48 85 c0\n78 07\nf3 48 0f 2a c8\neb 15\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\nf3 48 0f 2a c8\nf3 0f 58 c9\nf3 0f 59 49 08\n0f 2e c1\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b fa ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a d1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a d1\nf3 0f 58 d2\n49 8b 4f 28\nf3 0f 10 49 08\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\n0f 28 d9\nf3 0f 59 d8\n0f 2e d3\n76 6f\n80 79 10 00\nf3 0f 59 41 0c\n75 04\nf3 0f 59 c1\nbd ff ff ff ff\n0f 2e 05 db 84 00 00\n0f 83 95 00 00 00\nf3 0f 10 0d c9 84 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 50 fc ff ff\n84 c0\n74 5c\n48 89 e2\n31 c9\n4c 89 ff\n4c 89 f6\ne8 6c 00 00 00\n48 85 c0\n75 54\n48 8b 04 24\n48 83 38 00\n74 26\n4c 89 ff\ne8 15 01 00 00\n48 85 c0\n74 2b\n4c 89 30\n48 8b 0c 24\n48 8b 51 08\n48 89 50 08\n48 89 41 08\n49 ff 47 20\neb 0b\n4c 89 30\n49 ff 47 20\n49 ff 47 18\nbd 01 00 00 00\neb 05\nbd ff ff ff ff\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 ee 66 ff ff\n'
p2784
S'.text:000000000040bb60\n.text:000000000040bb61\n.text:000000000040bb63\n.text:000000000040bb65\n.text:000000000040bb66\n.text:000000000040bb67\n.text:000000000040bb6a\n.text:000000000040bb6d\n.text:000000000040bb70\n.text:000000000040bb73\n.text:000000000040bb79\n.text:000000000040bb7c\n.text:000000000040bb7e\n.text:000000000040bb80\n.text:000000000040bb83\n.text:000000000040bb86\n.text:000000000040bb8b\n.text:000000000040bb8e\n.text:000000000040bb90\n.text:000000000040bb93\n.text:000000000040bb99\n.text:000000000040bb9c\n.text:000000000040bba1\n.text:000000000040bba5\n.text:000000000040bba9\n.text:000000000040bbac\n.text:000000000040bbae\n.text:000000000040bbb3\n.text:000000000040bbb5\n.text:000000000040bbb8\n.text:000000000040bbbb\n.text:000000000040bbbe\n.text:000000000040bbc1\n.text:000000000040bbc6\n.text:000000000040bbca\n.text:000000000040bbce\n.text:000000000040bbd1\n.text:000000000040bbd3\n.text:000000000040bbd8\n.text:000000000040bbda\n.text:000000000040bbdd\n.text:000000000040bbe0\n.text:000000000040bbe3\n.text:000000000040bbe6\n.text:000000000040bbeb\n.text:000000000040bbef\n.text:000000000040bbf4\n.text:000000000040bbf7\n.text:000000000040bbfd\n.text:000000000040bc00\n.text:000000000040bc05\n.text:000000000040bc09\n.text:000000000040bc0d\n.text:000000000040bc10\n.text:000000000040bc12\n.text:000000000040bc17\n.text:000000000040bc19\n.text:000000000040bc1c\n.text:000000000040bc1f\n.text:000000000040bc22\n.text:000000000040bc25\n.text:000000000040bc2a\n.text:000000000040bc2e\n.text:000000000040bc32\n.text:000000000040bc37\n.text:000000000040bc3a\n.text:000000000040bc3c\n.text:000000000040bc3f\n.text:000000000040bc44\n.text:000000000040bc46\n.text:000000000040bc49\n.text:000000000040bc4c\n.text:000000000040bc4f\n.text:000000000040bc52\n.text:000000000040bc55\n.text:000000000040bc5a\n.text:000000000040bc5e\n.text:000000000040bc61\n.text:000000000040bc65\n.text:000000000040bc68\n.text:000000000040bc6a\n.text:000000000040bc6e\n.text:000000000040bc73\n.text:000000000040bc75\n.text:000000000040bc79\n.text:000000000040bc7e\n.text:000000000040bc85\n.text:000000000040bc8b\n.text:000000000040bc93\n.text:000000000040bc96\n.text:000000000040bc9a\n.text:000000000040bc9f\n.text:000000000040bca9\n.text:000000000040bcac\n.text:000000000040bcb1\n.text:000000000040bcb4\n.text:000000000040bcb8\n.text:000000000040bcbb\n.text:000000000040bcc0\n.text:000000000040bcc2\n.text:000000000040bcc4\n.text:000000000040bcc7\n.text:000000000040bcc9\n.text:000000000040bccc\n.text:000000000040bccf\n.text:000000000040bcd4\n.text:000000000040bcd7\n.text:000000000040bcd9\n.text:000000000040bcdd\n.text:000000000040bce1\n.text:000000000040bce3\n.text:000000000040bce6\n.text:000000000040bceb\n.text:000000000040bcee\n.text:000000000040bcf0\n.text:000000000040bcf3\n.text:000000000040bcf7\n.text:000000000040bcfb\n.text:000000000040bcff\n.text:000000000040bd03\n.text:000000000040bd07\n.text:000000000040bd09\n.text:000000000040bd0c\n.text:000000000040bd10\n.text:000000000040bd14\n.text:000000000040bd19\n.text:000000000040bd1b\n.text:000000000040bd20\n.text:000000000040bd22\n.text:000000000040bd26\n.text:000000000040bd27\n.text:000000000040bd29\n.text:000000000040bd2b\n.text:000000000040bd2c\n.text:000000000040bd2d\n'
p2785
tp2786
sS'c_isascii'
p2787
(S'\n__stdcall c_isascii()\n'
p2788
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p2789
S'CMP EDI,0x80\nSETC AL\nRET\n'
p2790
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p2791
S'.text:0000000000410de0\n.text:0000000000410de6\n.text:0000000000410de9\n'
p2792
tp2793
sS'heap_free'
p2794
(S'\n__stdcall heap_free(heap * heap)\n'
p2795
V\u000avoid heap_free(heap *heap)\u000a\u000a{\u000a  free(heap->array);\u000a  free(heap);\u000a  return;\u000a}\u000a\u000a
p2796
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00402400\nMOV RDI,RBX\nPOP RBX\nJMP 0x00402400\n'
p2797
S'53\n48 89 fb\n48 8b 3b\ne8 94 62 ff ff\n48 89 df\n5b\ne9 8b 62 ff ff\n'
p2798
S'.text:000000000040c160\n.text:000000000040c161\n.text:000000000040c164\n.text:000000000040c167\n.text:000000000040c16c\n.text:000000000040c16f\n.text:000000000040c170\n'
p2799
tp2800
sS'__sched_cpucount'
p2801
(S'\n__stdcall __sched_cpucount(size_t __setsize, cpu_set_t * __setp)\n'
p2802
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint __sched_cpucount(size_t __setsize,cpu_set_t *__setp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___sched_cpucount_0061a0f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p2803
S'JMP qword ptr [0x0061a0f0]\n'
p2804
S'ff 25 6a 7b 21 00\n'
p2805
S'.plt:0000000000402580\n'
p2806
tp2807
sS'incompatible_options'
p2808
(S'\n__stdcall incompatible_options(char * opts)\n'
p2809
V\u000avoid incompatible_options(char *opts)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  \u000a  uVar1 = dcgettext(0,"options \u005c'-%s\u005c' are incompatible",5);\u000a  error(2,0,uVar1,opts);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p2810
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x413bfd\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00402960\nCALL 0x00402420\n'
p2811
S'53\n48 89 fb\n31 ff\nbe fd 3b 41 00\nba 05 00 00 00\ne8 cb de ff ff\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ca\n48 89 d9\ne8 64 e2 ff ff\ne8 1f dd ff ff\n'
p2812
S'.text:00000000004046d0\n.text:00000000004046d1\n.text:00000000004046d4\n.text:00000000004046d6\n.text:00000000004046db\n.text:00000000004046e0\n.text:00000000004046e5\n.text:00000000004046e8\n.text:00000000004046ed\n.text:00000000004046ef\n.text:00000000004046f1\n.text:00000000004046f4\n.text:00000000004046f7\n.text:00000000004046fc\n'
p2813
tp2814
sS'setvbuf'
p2815
(S'\n__stdcall setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n'
p2816
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setvbuf(FILE *__stream,char *__buf,int __modes,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setvbuf_0061a2c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p2817
S'JMP qword ptr [0x0061a2c8]\n'
p2818
S'ff 25 92 79 21 00\n'
p2819
S'.plt:0000000000402930\n'
p2820
tp2821
sS'physmem_total'
p2822
(S'\n__stdcall physmem_total()\n'
p2823
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000adouble physmem_total(void)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  ulong uVar3;\u000a  undefined auVar4 [16];\u000a  double dVar5;\u000a  undefined auStack120 [32];\u000a  ulong local_58;\u000a  uint local_10;\u000a  \u000a  uVar2 = sysconf(0x55);\u000a  uVar3 = sysconf(0x1e);\u000a  if ((long)(uVar3 | uVar2) < 0) {\u000a    iVar1 = sysinfo((sysinfo *)auStack120);\u000a    if (iVar1 != 0) {\u000a      return _DAT_004144f0;\u000a    }\u000a    auVar4 = subpd(CONCAT88(SUB168(CONCAT412(DAT_004125c4,\u000a                                             ZEXT812(local_58) & (undefined  [12])0xffffffffffffffff\u000a                                             | (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                            CONCAT44(DAT_004125c0,\u000a                                     SUB124(ZEXT812(local_58) & (undefined  [12])0xffffffffffffffff,\u000a                                            0))),_DAT_004125d0);\u000a    auVar4 = addpd(CONCAT412(SUB164(auVar4 >> 0x20,0),\u000a                             CONCAT48(SUB164(auVar4,0),SUB168(auVar4 >> 0x40,0))),auVar4);\u000a    dVar5 = SUB168(auVar4,0);\u000a    uVar2 = (ulong)local_10;\u000a  }\u000a  else {\u000a    dVar5 = (double)uVar3;\u000a  }\u000a  return (double)uVar2 * dVar5;\u000a}\u000a\u000a
p2824
S'PUSH RBX\nSUB RSP,0x70\nMOV EDI,0x55\nCALL 0x004029c0\nMOV RBX,RAX\nMOV EDI,0x1e\nCALL 0x004029c0\nMOV RCX,RAX\nOR RCX,RBX\nJS 0x0040c864\nCVTSI2SD XMM1,RAX\nCVTSI2SD XMM0,RBX\nMULSD XMM0,XMM1\nJMP 0x0040c878\nMOV RDI,RSP\nCALL 0x00402a20\nTEST EAX,EAX\nJZ 0x0040c87e\nMOVSD XMM0,qword ptr [0x004144f0]\nADD RSP,0x70\nPOP RBX\nRET\nMOVQ XMM0,qword ptr [RSP + 0x20]\nPUNPCKLDQ XMM0,xmmword ptr [0x004125c0]\nSUBPD XMM0,xmmword ptr [0x004125d0]\nPSHUFD XMM1,XMM0,0x4e\nADDPD XMM1,XMM0\nMOV EAX,dword ptr [RSP + 0x68]\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,RAX\nJMP 0x0040c85e\n'
p2825
S'53\n48 83 ec 70\nbf 55 00 00 00\ne8 81 61 ff ff\n48 89 c3\nbf 1e 00 00 00\ne8 74 61 ff ff\n48 89 c1\n48 09 d9\n78 10\nf2 48 0f 2a c8\nf2 48 0f 2a c3\nf2 0f 59 c1\neb 14\n48 89 e7\ne8 b4 61 ff ff\n85 c0\n74 0e\nf2 0f 10 05 78 7c 00 00\n48 83 c4 70\n5b\nc3\nf3 0f 7e 44 24 20\n66 0f 62 05 34 5d 00 00\n66 0f 5c 05 3c 5d 00 00\n66 0f 70 c8 4e\n66 0f 58 c8\n8b 44 24 68\n0f 57 c0\nf2 48 0f 2a c0\neb b3\n'
p2826
S'.text:000000000040c830\n.text:000000000040c831\n.text:000000000040c835\n.text:000000000040c83a\n.text:000000000040c83f\n.text:000000000040c842\n.text:000000000040c847\n.text:000000000040c84c\n.text:000000000040c84f\n.text:000000000040c852\n.text:000000000040c854\n.text:000000000040c859\n.text:000000000040c85e\n.text:000000000040c862\n.text:000000000040c864\n.text:000000000040c867\n.text:000000000040c86c\n.text:000000000040c86e\n.text:000000000040c870\n.text:000000000040c878\n.text:000000000040c87c\n.text:000000000040c87d\n.text:000000000040c87e\n.text:000000000040c884\n.text:000000000040c88c\n.text:000000000040c894\n.text:000000000040c899\n.text:000000000040c89d\n.text:000000000040c8a1\n.text:000000000040c8a4\n.text:000000000040c8a9\n'
p2827
tp2828
sS'_start'
p2829
(S'\n__stdcall _start()\n'
p2830
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00619ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p2831
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x411580\nMOV RCX,0x411510\nMOV RDI,0x4030e0\nCALL qword ptr [0x00619ff0]\nHLT\n'
p2832
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 80 15 41 00\n48 c7 c1 10 15 41 00\n48 c7 c7 e0 30 40 00\nff 15 86 74 21 00\nf4\n'
p2833
S'.text:0000000000402b40\n.text:0000000000402b42\n.text:0000000000402b45\n.text:0000000000402b46\n.text:0000000000402b49\n.text:0000000000402b4d\n.text:0000000000402b4e\n.text:0000000000402b4f\n.text:0000000000402b56\n.text:0000000000402b5d\n.text:0000000000402b64\n.text:0000000000402b6a\n'
p2834
tp2835
sS'stpcpy'
p2836
(S'\n__stdcall stpcpy(char * __dest, char * __src)\n'
p2837
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * stpcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_stpcpy_0061a100)();\u000a  return pcVar1;\u000a}\u000a\u000a
p2838
S'JMP qword ptr [0x0061a100]\n'
p2839
S'ff 25 5a 7b 21 00\n'
p2840
S'.plt:00000000004025a0\n'
p2841
tp2842
sS'atexit'
p2843
(S'\n__stdcall atexit(__func * __func)\n'
p2844
V\u000a/* WARNING: Removing unreachable block (ram,0x004115b0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0061a338)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p2845
S'MOV RAX,0x61a3d8\nTEST RAX,RAX\nJZ 0x004115b0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00402a10\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00402a10\n'
p2846
S'48 c7 c0 d8 a3 61 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 6a 14 ff ff\n31 d2\n31 f6\ne9 57 14 ff ff\n'
p2847
S'.text:0000000000411590\n.text:0000000000411597\n.text:000000000041159a\n.text:000000000041159c\n.text:000000000041159f\n.text:00000000004115a1\n.text:00000000004115b0\n.text:00000000004115b2\n.text:00000000004115b4\n'
p2848
tp2849
sS'fdopen'
p2850
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p2851
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0061a2b0)();\u000a  return pFVar1;\u000a}\u000a\u000a
p2852
S'JMP qword ptr [0x0061a2b0]\n'
p2853
S'ff 25 aa 79 21 00\n'
p2854
S'.plt:0000000000402900\n'
p2855
tp2856
sS'hash_find_entry'
p2857
(S'\n__stdcall hash_find_entry(Hash_table * table, void * entry, hash_entry * * bucket_head)\n'
p2858
V\u000avoid * hash_find_entry(Hash_table *table,void *entry,hash_entry **bucket_head)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  _Bool _Var4;\u000a  hash_entry *phVar5;\u000a  hash_entry *entry_00;\u000a  char in_CL;\u000a  hash_entry **pphVar6;\u000a  void *pvVar7;\u000a  \u000a  phVar5 = safe_hasher(table,entry);\u000a  *bucket_head = phVar5;\u000a  pvVar7 = phVar5->data;\u000a  if (pvVar7 == (void *)0x0) {\u000a    return (void *)0x0;\u000a  }\u000a  if ((pvVar7 == entry) || (_Var4 = (*table->comparator)(entry,pvVar7), _Var4 != false)) {\u000a    pvVar7 = phVar5->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      phVar5->data = (void *)0x0;\u000a      return pvVar7;\u000a    }\u000a    uVar1 = *(undefined4 *)((long)&entry_00->data + 4);\u000a    uVar2 = *(undefined4 *)&entry_00->next;\u000a    uVar3 = *(undefined4 *)((long)&entry_00->next + 4);\u000a    *(undefined4 *)&phVar5->data = *(undefined4 *)&entry_00->data;\u000a    *(undefined4 *)((long)&phVar5->data + 4) = uVar1;\u000a    *(undefined4 *)&phVar5->next = uVar2;\u000a    *(undefined4 *)((long)&phVar5->next + 4) = uVar3;\u000a  }\u000a  else {\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      return (void *)0x0;\u000a    }\u000a    while( true ) {\u000a      pphVar6 = &phVar5->next;\u000a      if ((entry_00->data == entry) ||\u000a         (_Var4 = (*table->comparator)(entry,entry_00->data), _Var4 != false)) break;\u000a      phVar5 = *pphVar6;\u000a      entry_00 = phVar5->next;\u000a      if (entry_00 == (hash_entry *)0x0) {\u000a        return (void *)0x0;\u000a      }\u000a    }\u000a    entry_00 = *pphVar6;\u000a    pvVar7 = entry_00->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    *pphVar6 = entry_00->next;\u000a  }\u000a  free_entry(table,entry_00);\u000a  return pvVar7;\u000a}\u000a\u000a
p2859
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R12D,ECX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R15,RDI\nCALL 0x0040b350\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RSI,qword ptr [RBX]\nTEST RSI,RSI\nJZ 0x0040bdc5\nCMP RSI,RBP\nJZ 0x0040bd77\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJZ 0x0040bd90\nMOV R14,qword ptr [RBX]\nTEST R12B,R12B\nJZ 0x0040bded\nMOV RSI,qword ptr [RBX + 0x8]\nTEST RSI,RSI\nJZ 0x0040bdca\nMOVUPS XMM0,xmmword ptr [RSI]\nMOVUPS xmmword ptr [RBX],XMM0\nJMP 0x0040bde5\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nJZ 0x0040bdc5\nADD RBX,0x8\nXOR R14D,R14D\nMOV RSI,qword ptr [RAX]\nCMP RSI,RBP\nJZ 0x0040bdd3\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x0040bdd3\nMOV RBX,qword ptr [RBX]\nMOV RAX,qword ptr [RBX + 0x8]\nADD RBX,0x8\nTEST RAX,RAX\nJNZ 0x0040bda0\nJMP 0x0040bded\nXOR R14D,R14D\nJMP 0x0040bded\nMOV qword ptr [RBX],0x0\nJMP 0x0040bded\nMOV RSI,qword ptr [RBX]\nMOV R14,qword ptr [RSI]\nTEST R12B,R12B\nJZ 0x0040bded\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RDI,R15\nCALL 0x0040c0c0\nMOV RAX,R14\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2860
S'55\n41 57\n41 56\n41 54\n53\n41 89 cc\n49 89 d6\n48 89 f5\n49 89 ff\ne8 f7 f5 ff ff\n48 89 c3\n49 89 1e\n48 8b 33\n48 85 f6\n74 5e\n48 39 ee\n74 0b\n48 89 ef\n41 ff 57 38\n84 c0\n74 19\n4c 8b 33\n45 84 e4\n74 6e\n48 8b 73 08\n48 85 f6\n74 42\n0f 10 06\n0f 11 03\neb 55\n48 8b 43 08\n48 85 c0\n74 2c\n48 83 c3 08\n45 31 f6\n48 8b 30\n48 39 ee\n74 2b\n48 89 ef\n41 ff 57 38\n84 c0\n75 20\n48 8b 1b\n48 8b 43 08\n48 83 c3 08\n48 85 c0\n75 dd\neb 28\n45 31 f6\neb 23\n48 c7 03 00 00 00 00\neb 1a\n48 8b 33\n4c 8b 36\n45 84 e4\n74 0f\n48 8b 46 08\n48 89 03\n4c 89 ff\ne8 d3 02 00 00\n4c 89 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p2861
S'.text:000000000040bd40\n.text:000000000040bd41\n.text:000000000040bd43\n.text:000000000040bd45\n.text:000000000040bd47\n.text:000000000040bd48\n.text:000000000040bd4b\n.text:000000000040bd4e\n.text:000000000040bd51\n.text:000000000040bd54\n.text:000000000040bd59\n.text:000000000040bd5c\n.text:000000000040bd5f\n.text:000000000040bd62\n.text:000000000040bd65\n.text:000000000040bd67\n.text:000000000040bd6a\n.text:000000000040bd6c\n.text:000000000040bd6f\n.text:000000000040bd73\n.text:000000000040bd75\n.text:000000000040bd77\n.text:000000000040bd7a\n.text:000000000040bd7d\n.text:000000000040bd7f\n.text:000000000040bd83\n.text:000000000040bd86\n.text:000000000040bd88\n.text:000000000040bd8b\n.text:000000000040bd8e\n.text:000000000040bd90\n.text:000000000040bd94\n.text:000000000040bd97\n.text:000000000040bd99\n.text:000000000040bd9d\n.text:000000000040bda0\n.text:000000000040bda3\n.text:000000000040bda6\n.text:000000000040bda8\n.text:000000000040bdab\n.text:000000000040bdaf\n.text:000000000040bdb1\n.text:000000000040bdb3\n.text:000000000040bdb6\n.text:000000000040bdba\n.text:000000000040bdbe\n.text:000000000040bdc1\n.text:000000000040bdc3\n.text:000000000040bdc5\n.text:000000000040bdc8\n.text:000000000040bdca\n.text:000000000040bdd1\n.text:000000000040bdd3\n.text:000000000040bdd6\n.text:000000000040bdd9\n.text:000000000040bddc\n.text:000000000040bdde\n.text:000000000040bde2\n.text:000000000040bde5\n.text:000000000040bde8\n.text:000000000040bded\n.text:000000000040bdf0\n.text:000000000040bdf1\n.text:000000000040bdf3\n.text:000000000040bdf5\n.text:000000000040bdf7\n.text:000000000040bdf8\n'
p2862
tp2863
sS'error'
p2864
(S'\n__stdcall error()\n'
p2865
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0061a2e0)();\u000a  return;\u000a}\u000a\u000a
p2866
S'JMP qword ptr [0x0061a2e0]\n'
p2867
S'ff 25 7a 79 21 00\n'
p2868
S'.plt:0000000000402960\n'
p2869
tp2870
sS'raw_comparator'
p2871
(S'\n__stdcall raw_comparator(void * a, void * b)\n'
p2872
V\u000a_Bool raw_comparator(void *a,void *b)\u000a\u000a{\u000a  return (_Bool)(a == b);\u000a}\u000a\u000a
p2873
S'CMP RDI,RSI\nSETZ AL\nRET\n'
p2874
S'48 39 f7\n0f 94 c0\nc3\n'
p2875
S'.text:000000000040b660\n.text:000000000040b663\n.text:000000000040b666\n'
p2876
tp2877
sS'strcaseeq6'
p2878
(S'\n__stdcall strcaseeq6()\n'
p2879
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p2880
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410e90\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x0040e252\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040e259\nJMP 0x0040e26e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040e26e\nTEST BPL,BPL\nJZ 0x0040e269\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x0040e280\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p2881
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 51 2c 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p2882
S'.text:000000000040e230\n.text:000000000040e231\n.text:000000000040e232\n.text:000000000040e233\n.text:000000000040e235\n.text:000000000040e238\n.text:000000000040e23a\n.text:000000000040e23f\n.text:000000000040e243\n.text:000000000040e245\n.text:000000000040e247\n.text:000000000040e24a\n.text:000000000040e24c\n.text:000000000040e24e\n.text:000000000040e250\n.text:000000000040e252\n.text:000000000040e254\n.text:000000000040e257\n.text:000000000040e259\n.text:000000000040e25c\n.text:000000000040e25e\n.text:000000000040e261\n.text:000000000040e265\n.text:000000000040e266\n.text:000000000040e267\n.text:000000000040e269\n.text:000000000040e26e\n.text:000000000040e272\n.text:000000000040e273\n.text:000000000040e274\n'
p2883
tp2884
sS'strcaseeq5'
p2885
(S'\n__stdcall strcaseeq5()\n'
p2886
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p2887
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410e90\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x0040e206\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040e20d\nJMP 0x0040e224\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040e224\nTEST BPL,BPL\nJZ 0x0040e21f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x0040e230\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p2888
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 9d 2c 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p2889
S'.text:000000000040e1e0\n.text:000000000040e1e1\n.text:000000000040e1e3\n.text:000000000040e1e4\n.text:000000000040e1e7\n.text:000000000040e1e9\n.text:000000000040e1ec\n.text:000000000040e1ee\n.text:000000000040e1f3\n.text:000000000040e1f7\n.text:000000000040e1f9\n.text:000000000040e1fb\n.text:000000000040e1fe\n.text:000000000040e200\n.text:000000000040e202\n.text:000000000040e204\n.text:000000000040e206\n.text:000000000040e208\n.text:000000000040e20b\n.text:000000000040e20d\n.text:000000000040e210\n.text:000000000040e212\n.text:000000000040e216\n.text:000000000040e219\n.text:000000000040e21a\n.text:000000000040e21c\n.text:000000000040e21d\n.text:000000000040e21f\n.text:000000000040e224\n.text:000000000040e225\n.text:000000000040e227\n.text:000000000040e228\n'
p2890
tp2891
sS'strcaseeq7'
p2892
(S'\n__stdcall strcaseeq7()\n'
p2893
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p2894
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00410e90\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x0040e2a2\nTEST ECX,0xffffffdf\nJNZ 0x0040e2a6\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040e2aa\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p2895
S'53\n48 89 fb\n31 ff\ne8 05 2c 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p2896
S'.text:000000000040e280\n.text:000000000040e281\n.text:000000000040e284\n.text:000000000040e286\n.text:000000000040e28b\n.text:000000000040e28f\n.text:000000000040e291\n.text:000000000040e293\n.text:000000000040e299\n.text:000000000040e29b\n.text:000000000040e2a0\n.text:000000000040e2a1\n.text:000000000040e2a2\n.text:000000000040e2a4\n.text:000000000040e2a6\n.text:000000000040e2a8\n.text:000000000040e2a9\n.text:000000000040e2aa\n.text:000000000040e2af\n.text:000000000040e2b0\n'
p2897
tp2898
sS'strtoul'
p2899
(S'\n__stdcall strtoul(char * __nptr, char * * __endptr, int __base)\n'
p2900
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulong strtoul(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoul_0061a330)();\u000a  return uVar1;\u000a}\u000a\u000a
p2901
S'JMP qword ptr [0x0061a330]\n'
p2902
S'ff 25 2a 79 21 00\n'
p2903
S'.plt:0000000000402a00\n'
p2904
tp2905
sS'default_sort_size'
p2906
(S'\n__stdcall default_sort_size()\n'
p2907
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000asize_t default_sort_size(void)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  ulong uVar3;\u000a  double dVar4;\u000a  undefined auVar5 [16];\u000a  undefined4 uVar6;\u000a  undefined auVar7 [16];\u000a  rlimit local_28;\u000a  double local_18;\u000a  \u000a  iVar1 = getrlimit(RLIMIT_DATA,&local_28);\u000a  uVar3 = ~-(ulong)(iVar1 == 0) | local_28.rlim_cur;\u000a  iVar1 = getrlimit(RLIMIT_AS,&local_28);\u000a  if ((iVar1 == 0) && (local_28.rlim_cur < uVar3)) {\u000a    uVar3 = local_28.rlim_cur;\u000a  }\u000a  uVar3 = uVar3 >> 1;\u000a  iVar1 = getrlimit(__RLIMIT_RSS,&local_28);\u000a  if ((iVar1 == 0) && (uVar2 = (local_28.rlim_cur >> 4) * 0xf, uVar2 < uVar3)) {\u000a    uVar3 = uVar2;\u000a  }\u000a  local_18 = physmem_available();\u000a  dVar4 = physmem_total();\u000a  auVar7 = maxsd(ZEXT816((ulong)local_18),ZEXT816((ulong)(DAT_00412610 * dVar4)));\u000a  dVar4 = dVar4 * _DAT_00412618;\u000a  uVar6 = SUB164(_DAT_004125c0 >> 0x20,0);\u000a  auVar5 = subpd(CONCAT88(SUB168(CONCAT412(uVar6,ZEXT812(uVar3) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_004125c0,0),\u000a                                   SUB124(ZEXT812(uVar3) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_004125d8,DAT_004125d0));\u000a  auVar5 = addpd(CONCAT412(SUB164(auVar5 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar5,0),SUB168(auVar5 >> 0x40,0))),auVar5);\u000a  uVar2 = (long)dVar4;\u000a  if (DAT_00412600 <= dVar4) {\u000a    uVar2 = (long)(dVar4 - DAT_00412600) ^ 0x8000000000000000;\u000a  }\u000a  if (SUB168(auVar5,0) <= dVar4) {\u000a    uVar2 = uVar3;\u000a  }\u000a  auVar5 = subpd(CONCAT88(SUB168(CONCAT412(uVar6,ZEXT812(uVar2) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_004125c0,0),\u000a                                   SUB124(ZEXT812(uVar2) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_004125d8,DAT_004125d0));\u000a  auVar5 = addpd(CONCAT412(SUB164(auVar5 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar5,0),SUB168(auVar5 >> 0x40,0))),auVar5);\u000a  dVar4 = SUB168(auVar7,0);\u000a  uVar3 = (long)dVar4;\u000a  if (DAT_00412600 <= dVar4) {\u000a    uVar3 = (long)(dVar4 - DAT_00412600) ^ 0x8000000000000000;\u000a  }\u000a  if (SUB168(auVar5,0) <= dVar4) {\u000a    uVar3 = uVar2;\u000a  }\u000a  if (uVar3 <= (ulong)nmerge * 0x22) {\u000a    uVar3 = (ulong)nmerge * 0x22;\u000a  }\u000a  return uVar3;\u000a}\u000a\u000a
p2908
S'PUSH R14\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RSP\nMOV EDI,0x2\nMOV RSI,R14\nCALL 0x00402a80\nCMP EAX,0x1\nSBB RBX,RBX\nNOT RBX\nOR RBX,qword ptr [RSP]\nMOV EDI,0x9\nMOV RSI,R14\nCALL 0x00402a80\nTEST EAX,EAX\nJNZ 0x004092c0\nMOV RAX,qword ptr [RSP]\nCMP RAX,RBX\nCMOVC RBX,RAX\nSHR RBX,1\nMOV RSI,RSP\nMOV EDI,0x5\nCALL 0x00402a80\nTEST EAX,EAX\nJNZ 0x004092eb\nMOV RAX,qword ptr [RSP]\nSHR RAX,0x4\nLEA RAX,[RAX + RAX*0x4]\nLEA RAX,[RAX + RAX*0x2]\nCMP RAX,RBX\nCMOVC RBX,RAX\nCALL 0x0040c8b0\nMOVSD qword ptr [RSP + 0x10],XMM0\nCALL 0x0040c830\nMOVSD XMM1,qword ptr [0x00412610]\nMULSD XMM1,XMM0\nMOVSD XMM6,qword ptr [RSP + 0x10]\nMAXSD XMM6,XMM1\nMULSD XMM0,qword ptr [0x00412618]\nMOVQ XMM1,RBX\nMOVDQA XMM2,xmmword ptr [0x004125c0]\nPUNPCKLDQ XMM1,XMM2\nMOVAPD XMM3,xmmword ptr [0x004125d0]\nSUBPD XMM1,XMM3\nPSHUFD XMM4,XMM1,0x4e\nADDPD XMM4,XMM1\nMOVSD XMM1,qword ptr [0x00412600]\nMOVAPD XMM5,XMM0\nSUBSD XMM5,XMM1\nCVTTSD2SI RAX,XMM5\nMOV RCX,-0x8000000000000000\nXOR RAX,RCX\nCVTTSD2SI RDX,XMM0\nUCOMISD XMM0,XMM1\nCMOVNC RDX,RAX\nUCOMISD XMM4,XMM0\nCMOVBE RDX,RBX\nMOVQ XMM0,RDX\nPUNPCKLDQ XMM0,XMM2\nSUBPD XMM0,XMM3\nPSHUFD XMM2,XMM0,0x4e\nADDPD XMM2,XMM0\nMOVAPD XMM3,XMM6\nMOVAPD XMM0,XMM3\nSUBSD XMM0,XMM1\nCVTTSD2SI RSI,XMM0\nXOR RSI,RCX\nCVTTSD2SI RAX,XMM3\nUCOMISD XMM3,XMM1\nCMOVNC RAX,RSI\nUCOMISD XMM2,XMM3\nCMOVBE RAX,RDX\nMOV ECX,dword ptr [0x0061a3f0]\nIMUL RCX,RCX,0x22\nCMP RAX,RCX\nCMOVBE RAX,RCX\nADD RSP,0x18\nPOP RBX\nPOP R14\nRET\n'
p2909
S'41 56\n53\n48 83 ec 18\n49 89 e6\nbf 02 00 00 00\n4c 89 f6\ne8 e9 97 ff ff\n83 f8 01\n48 19 db\n48 f7 d3\n48 0b 1c 24\nbf 09 00 00 00\n4c 89 f6\ne8 cf 97 ff ff\n85 c0\n75 0b\n48 8b 04 24\n48 39 d8\n48 0f 42 d8\n48 d1 eb\n48 89 e6\nbf 05 00 00 00\ne8 b0 97 ff ff\n85 c0\n75 17\n48 8b 04 24\n48 c1 e8 04\n48 8d 04 80\n48 8d 04 40\n48 39 d8\n48 0f 42 d8\ne8 c0 35 00 00\nf2 0f 11 44 24 10\ne8 35 35 00 00\nf2 0f 10 0d 0d 93 00 00\nf2 0f 59 c8\nf2 0f 10 74 24 10\nf2 0f 5f f1\nf2 0f 59 05 ff 92 00 00\n66 48 0f 6e cb\n66 0f 6f 15 9a 92 00 00\n66 0f 62 ca\n66 0f 28 1d 9e 92 00 00\n66 0f 5c cb\n66 0f 70 e1 4e\n66 0f 58 e1\nf2 0f 10 0d b9 92 00 00\n66 0f 28 e8\nf2 0f 5c e9\nf2 48 0f 2c c5\n48 b9 00 00 00 00 00 00 00 80\n48 31 c8\nf2 48 0f 2c d0\n66 0f 2e c1\n48 0f 43 d0\n66 0f 2e e0\n48 0f 46 d3\n66 48 0f 6e c2\n66 0f 62 c2\n66 0f 5c c3\n66 0f 70 d0 4e\n66 0f 58 d0\n66 0f 28 de\n66 0f 28 c3\nf2 0f 5c c1\nf2 48 0f 2c f0\n48 31 ce\nf2 48 0f 2c c3\n66 0f 2e d9\n48 0f 43 c6\n66 0f 2e d3\n48 0f 46 c2\n8b 0d 35 10 21 00\n48 6b c9 22\n48 39 c8\n48 0f 46 c1\n48 83 c4 18\n5b\n41 5e\nc3\n'
p2910
S'.text:0000000000409280\n.text:0000000000409282\n.text:0000000000409283\n.text:0000000000409287\n.text:000000000040928a\n.text:000000000040928f\n.text:0000000000409292\n.text:0000000000409297\n.text:000000000040929a\n.text:000000000040929d\n.text:00000000004092a0\n.text:00000000004092a4\n.text:00000000004092a9\n.text:00000000004092ac\n.text:00000000004092b1\n.text:00000000004092b3\n.text:00000000004092b5\n.text:00000000004092b9\n.text:00000000004092bc\n.text:00000000004092c0\n.text:00000000004092c3\n.text:00000000004092c6\n.text:00000000004092cb\n.text:00000000004092d0\n.text:00000000004092d2\n.text:00000000004092d4\n.text:00000000004092d8\n.text:00000000004092dc\n.text:00000000004092e0\n.text:00000000004092e4\n.text:00000000004092e7\n.text:00000000004092eb\n.text:00000000004092f0\n.text:00000000004092f6\n.text:00000000004092fb\n.text:0000000000409303\n.text:0000000000409307\n.text:000000000040930d\n.text:0000000000409311\n.text:0000000000409319\n.text:000000000040931e\n.text:0000000000409326\n.text:000000000040932a\n.text:0000000000409332\n.text:0000000000409336\n.text:000000000040933b\n.text:000000000040933f\n.text:0000000000409347\n.text:000000000040934b\n.text:000000000040934f\n.text:0000000000409354\n.text:000000000040935e\n.text:0000000000409361\n.text:0000000000409366\n.text:000000000040936a\n.text:000000000040936e\n.text:0000000000409372\n.text:0000000000409376\n.text:000000000040937b\n.text:000000000040937f\n.text:0000000000409383\n.text:0000000000409388\n.text:000000000040938c\n.text:0000000000409390\n.text:0000000000409394\n.text:0000000000409398\n.text:000000000040939d\n.text:00000000004093a0\n.text:00000000004093a5\n.text:00000000004093a9\n.text:00000000004093ad\n.text:00000000004093b1\n.text:00000000004093b5\n.text:00000000004093bb\n.text:00000000004093bf\n.text:00000000004093c2\n.text:00000000004093c6\n.text:00000000004093ca\n.text:00000000004093cb\n.text:00000000004093cd\n'
p2911
tp2912
sS'emit_mandatory_arg_note'
p2913
(S'\n__stdcall emit_mandatory_arg_note()\n'
p2914
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p2915
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x41388e\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [0x0061a568]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00402730\n'
p2916
S'50\n31 ff\nbe 8e 38 41 00\nba 05 00 00 00\ne8 1e f6 ff ff\n48 8b 35 cf 75 21 00\n48 89 c7\n58\ne9 8e f7 ff ff\n'
p2917
S'.text:0000000000402f80\n.text:0000000000402f81\n.text:0000000000402f83\n.text:0000000000402f88\n.text:0000000000402f8d\n.text:0000000000402f92\n.text:0000000000402f99\n.text:0000000000402f9c\n.text:0000000000402f9d\n'
p2918
tp2919
sS'match_suffix'
p2920
(S'\n__stdcall match_suffix(char * * str)\n'
p2921
V\u000achar * match_suffix(char **str)\u000a\u000a{\u000a  char *pcVar1;\u000a  _Bool _Var2;\u000a  char *pcVar3;\u000a  char cVar4;\u000a  char *pcVar5;\u000a  char *pcVar6;\u000a  \u000a  pcVar3 = *str;\u000a  cVar4 = *pcVar3;\u000a  if (cVar4 == 0) {\u000a    pcVar6 = (char *)0x0;\u000a  }\u000a  else {\u000a    pcVar5 = (char *)0x0;\u000a    pcVar6 = (char *)0x0;\u000a    do {\u000a      if (pcVar5 == (char *)0x0) {\u000a        if (cVar4 == '.') {\u000a          if (pcVar6 == (char *)0x0) {\u000a            pcVar6 = pcVar3;\u000a          }\u000a          pcVar5 = (char *)0x1;\u000a        }\u000a        else {\u000a          _Var2 = c_isalnum();\u000a          if ((_Var2 == false) && (**str != '~')) {\u000a            pcVar6 = (char *)0x0;\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        _Var2 = c_isalpha();\u000a        if (_Var2 == false) {\u000a          pcVar5 = (char *)0x0;\u000a          if (**str != '~') {\u000a            pcVar6 = pcVar5;\u000a          }\u000a        }\u000a        else {\u000a          pcVar5 = (char *)0x0;\u000a        }\u000a      }\u000a      pcVar1 = *str;\u000a      pcVar3 = pcVar1 + 1;\u000a      *str = pcVar3;\u000a      cVar4 = pcVar1[1];\u000a    } while (cVar4 != 0);\u000a  }\u000a  return pcVar6;\u000a}\u000a\u000a
p2922
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RDI\nMOV RAX,qword ptr [R12]\nMOV CL,byte ptr [RAX]\nTEST CL,CL\nJZ 0x0040ae33\nXOR R15D,R15D\nXOR EBX,EBX\nXOR R14D,R14D\nNOP dword ptr [RAX]\nTEST BL,0x1\nMOVSX EDI,CL\nJNZ 0x0040ade0\nCMP CL,0x2e\nJNZ 0x0040adf0\nTEST R14,R14\nCMOVZ R14,RAX\nMOV BL,0x1\nJMP 0x0040ae1d\nCALL 0x00410dc0\nTEST AL,AL\nJZ 0x0040ae10\nXOR EBX,EBX\nJMP 0x0040ae1d\nCALL 0x00410d90\nTEST AL,AL\nJNZ 0x0040ae1d\nMOV RAX,qword ptr [R12]\nCMP byte ptr [RAX],0x7e\nCMOVNZ R14,R15\nJMP 0x0040ae1d\nMOV RAX,qword ptr [R12]\nXOR EBX,EBX\nCMP byte ptr [RAX],0x7e\nCMOVNZ R14,RBX\nMOV RCX,qword ptr [R12]\nLEA RAX,[RCX + 0x1]\nMOV qword ptr [R12],RAX\nMOVZX ECX,byte ptr [RCX + 0x1]\nTEST CL,CL\nJNZ 0x0040adc0\nJMP 0x0040ae36\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p2923
S'41 57\n41 56\n41 54\n53\n50\n49 89 fc\n49 8b 04 24\n8a 08\n84 c9\n74 7e\n45 31 ff\n31 db\n45 31 f6\n0f 1f 00\nf6 c3 01\n0f be f9\n75 18\n80 f9 2e\n75 23\n4d 85 f6\n4c 0f 44 f0\nb3 01\neb 45\ne8 db 5f 00 00\n84 c0\n74 27\n31 db\neb 30\ne8 9b 5f 00 00\n84 c0\n75 24\n49 8b 04 24\n80 38 7e\n4d 0f 45 f7\neb 17\n49 8b 04 24\n31 db\n80 38 7e\n4c 0f 45 f3\n49 8b 0c 24\n48 8d 41 01\n49 89 04 24\n0f b6 49 01\n84 c9\n75 8f\neb 03\n45 31 f6\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p2924
S'.text:000000000040ada0\n.text:000000000040ada2\n.text:000000000040ada4\n.text:000000000040ada6\n.text:000000000040ada7\n.text:000000000040ada8\n.text:000000000040adab\n.text:000000000040adaf\n.text:000000000040adb1\n.text:000000000040adb3\n.text:000000000040adb5\n.text:000000000040adb8\n.text:000000000040adba\n.text:000000000040adbd\n.text:000000000040adc0\n.text:000000000040adc3\n.text:000000000040adc6\n.text:000000000040adc8\n.text:000000000040adcb\n.text:000000000040adcd\n.text:000000000040add0\n.text:000000000040add4\n.text:000000000040add6\n.text:000000000040ade0\n.text:000000000040ade5\n.text:000000000040ade7\n.text:000000000040ade9\n.text:000000000040adeb\n.text:000000000040adf0\n.text:000000000040adf5\n.text:000000000040adf7\n.text:000000000040adf9\n.text:000000000040adfd\n.text:000000000040ae00\n.text:000000000040ae04\n.text:000000000040ae10\n.text:000000000040ae14\n.text:000000000040ae16\n.text:000000000040ae19\n.text:000000000040ae1d\n.text:000000000040ae21\n.text:000000000040ae25\n.text:000000000040ae29\n.text:000000000040ae2d\n.text:000000000040ae2f\n.text:000000000040ae31\n.text:000000000040ae33\n.text:000000000040ae36\n.text:000000000040ae39\n.text:000000000040ae3d\n.text:000000000040ae3e\n.text:000000000040ae40\n.text:000000000040ae42\n.text:000000000040ae44\n'
p2925
tp2926
sS'strcaseeq0'
p2927
(S'\n__stdcall strcaseeq0()\n'
p2928
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p2929
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410e90\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x0040dfb5\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040dfbc\nJMP 0x0040dff0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040dff0\nTEST BPL,BPL\nJZ 0x0040dfeb\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x0040e000\nJMP 0x0040dff0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2930
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 ed 2e 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2931
S'.text:000000000040df80\n.text:000000000040df81\n.text:000000000040df83\n.text:000000000040df85\n.text:000000000040df87\n.text:000000000040df89\n.text:000000000040df8a\n.text:000000000040df8b\n.text:000000000040df8e\n.text:000000000040df91\n.text:000000000040df94\n.text:000000000040df97\n.text:000000000040df99\n.text:000000000040df9c\n.text:000000000040df9e\n.text:000000000040dfa3\n.text:000000000040dfa6\n.text:000000000040dfa8\n.text:000000000040dfaa\n.text:000000000040dfad\n.text:000000000040dfaf\n.text:000000000040dfb1\n.text:000000000040dfb3\n.text:000000000040dfb5\n.text:000000000040dfb7\n.text:000000000040dfba\n.text:000000000040dfbc\n.text:000000000040dfbf\n.text:000000000040dfc1\n.text:000000000040dfc5\n.text:000000000040dfca\n.text:000000000040dfcd\n.text:000000000040dfd1\n.text:000000000040dfd5\n.text:000000000040dfd9\n.text:000000000040dfdd\n.text:000000000040dfe1\n.text:000000000040dfe4\n.text:000000000040dfe9\n.text:000000000040dfeb\n.text:000000000040dff0\n.text:000000000040dff4\n.text:000000000040dff5\n.text:000000000040dff7\n.text:000000000040dff9\n.text:000000000040dffb\n.text:000000000040dffd\n.text:000000000040dffe\n'
p2932
tp2933
sS'hash_table_ok'
p2934
(S'\n__stdcall hash_table_ok(Hash_table * table)\n'
p2935
V\u000a_Bool hash_table_ok(Hash_table *table)\u000a\u000a{\u000a  hash_entry **pphVar1;\u000a  undefined uVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  hash_entry *phVar5;\u000a  hash_entry *phVar6;\u000a  \u000a  phVar6 = table->bucket;\u000a  if (phVar6 < table->bucket_limit) {\u000a    sVar4 = 0;\u000a    sVar3 = 0;\u000a    do {\u000a      phVar5 = phVar6;\u000a      if (phVar6->data != (void *)0x0) {\u000a        do {\u000a          sVar4 = sVar4 + 1;\u000a          pphVar1 = &phVar5->next;\u000a          phVar5 = *pphVar1;\u000a        } while (*pphVar1 != (hash_entry *)0x0);\u000a        sVar3 = sVar3 + 1;\u000a      }\u000a      phVar6 = phVar6 + 1;\u000a    } while (phVar6 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    sVar4 = 0;\u000a  }\u000a  if ((sVar3 != table->n_buckets_used) || (uVar2 = 1, sVar4 != table->n_entries)) {\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p2936
S'MOV RSI,qword ptr [RDI]\nCMP RSI,qword ptr [RDI + 0x8]\nJNC 0x0040b1ea\nMOV R8,qword ptr [RDI + 0x8]\nXOR ECX,ECX\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RSI],0x0\nJZ 0x0040b1df\nMOV RDX,RSI\nNOP dword ptr [RAX]\nINC RCX\nMOV RDX,qword ptr [RDX + 0x8]\nTEST RDX,RDX\nJNZ 0x0040b1d0\nINC RAX\nADD RSI,0x10\nCMP RSI,R8\nJC 0x0040b1c0\nJMP 0x0040b1ee\nXOR EAX,EAX\nXOR ECX,ECX\nCMP RAX,qword ptr [RDI + 0x18]\nJNZ 0x0040b1fc\nMOV AL,0x1\nCMP RCX,qword ptr [RDI + 0x20]\nJZ 0x0040b1fe\nXOR EAX,EAX\nRET\n'
p2937
S'48 8b 37\n48 3b 77 08\n73 41\n4c 8b 47 08\n31 c9\n31 c0\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 83 3e 00\n74 19\n48 89 f2\n0f 1f 80 00 00 00 00\n48 ff c1\n48 8b 52 08\n48 85 d2\n75 f4\n48 ff c0\n48 83 c6 10\n4c 39 c6\n72 d8\neb 04\n31 c0\n31 c9\n48 3b 47 18\n75 08\nb0 01\n48 3b 4f 20\n74 02\n31 c0\nc3\n'
p2938
S'.text:000000000040b1a0\n.text:000000000040b1a3\n.text:000000000040b1a7\n.text:000000000040b1a9\n.text:000000000040b1ad\n.text:000000000040b1af\n.text:000000000040b1b1\n.text:000000000040b1c0\n.text:000000000040b1c4\n.text:000000000040b1c6\n.text:000000000040b1c9\n.text:000000000040b1d0\n.text:000000000040b1d3\n.text:000000000040b1d7\n.text:000000000040b1da\n.text:000000000040b1dc\n.text:000000000040b1df\n.text:000000000040b1e3\n.text:000000000040b1e6\n.text:000000000040b1e8\n.text:000000000040b1ea\n.text:000000000040b1ec\n.text:000000000040b1ee\n.text:000000000040b1f2\n.text:000000000040b1f4\n.text:000000000040b1f6\n.text:000000000040b1fa\n.text:000000000040b1fc\n.text:000000000040b1fe\n'
p2939
tp2940
sS'strcaseeq2'
p2941
(S'\n__stdcall strcaseeq2()\n'
p2942
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p2943
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410e90\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x0040e0c6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040e0cd\nJMP 0x0040e0fa\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040e0fa\nTEST BPL,BPL\nJZ 0x0040e0f5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040e110\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2944
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 dd 2d 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2945
S'.text:000000000040e090\n.text:000000000040e091\n.text:000000000040e093\n.text:000000000040e095\n.text:000000000040e097\n.text:000000000040e099\n.text:000000000040e09a\n.text:000000000040e09b\n.text:000000000040e09e\n.text:000000000040e0a1\n.text:000000000040e0a4\n.text:000000000040e0a7\n.text:000000000040e0a9\n.text:000000000040e0ac\n.text:000000000040e0ae\n.text:000000000040e0b3\n.text:000000000040e0b7\n.text:000000000040e0b9\n.text:000000000040e0bb\n.text:000000000040e0be\n.text:000000000040e0c0\n.text:000000000040e0c2\n.text:000000000040e0c4\n.text:000000000040e0c6\n.text:000000000040e0c8\n.text:000000000040e0cb\n.text:000000000040e0cd\n.text:000000000040e0d0\n.text:000000000040e0d2\n.text:000000000040e0d6\n.text:000000000040e0da\n.text:000000000040e0de\n.text:000000000040e0e2\n.text:000000000040e0e5\n.text:000000000040e0e9\n.text:000000000040e0ea\n.text:000000000040e0ec\n.text:000000000040e0ee\n.text:000000000040e0f0\n.text:000000000040e0f2\n.text:000000000040e0f3\n.text:000000000040e0f5\n.text:000000000040e0fa\n.text:000000000040e0fe\n.text:000000000040e0ff\n.text:000000000040e101\n.text:000000000040e103\n.text:000000000040e105\n.text:000000000040e107\n.text:000000000040e108\n'
p2946
tp2947
sS'sortlines'
p2948
(S'\n__stdcall sortlines(line * lines, size_t nthreads, size_t total_lines, merge_node * node, merge_node_queue * queue, FILE * tfp, char * temp_output)\n'
p2949
V\u000avoid sortlines(line *lines,size_t nthreads,size_t total_lines,merge_node *node,\u000a              merge_node_queue *queue,FILE *tfp,char *temp_output)\u000a\u000a{\u000a  ulong nlines;\u000a  int iVar1;\u000a  ulong nlines_00;\u000a  pthread_t local_70;\u000a  line *local_68;\u000a  ulong local_60;\u000a  size_t local_58;\u000a  merge_node *local_50;\u000a  merge_node_queue *local_48;\u000a  FILE *local_40;\u000a  char *local_38;\u000a  \u000a  nlines_00 = nthreads >> 1;\u000a  local_50 = node->lo_child;\u000a  local_38 = temp_output;\u000a  local_68 = lines;\u000a  local_60 = nlines_00;\u000a  local_58 = total_lines;\u000a  local_48 = queue;\u000a  local_40 = tfp;\u000a  if (((1 < nthreads) &&\u000a      (local_68 = lines, local_60 = nlines_00, local_58 = total_lines, local_48 = queue,\u000a      local_40 = tfp, 0x1ffff < node->nhi + node->nlo)) &&\u000a     (local_68 = lines, local_60 = nlines_00, local_58 = total_lines, local_48 = queue,\u000a     local_40 = tfp,\u000a     iVar1 = pthread_create(&local_70,(pthread_attr_t *)0x0,sortlines_thread,&local_68), iVar1 == 0)\u000a     ) {\u000a    sortlines(lines + node->nlo * 0x7ffffffffffffff,nthreads - nlines_00,total_lines,node->hi_child,\u000a              queue,tfp,temp_output);\u000a    pthread_join(local_70,(void **)0x0);\u000a    return;\u000a  }\u000a  nlines_00 = node->nlo;\u000a  nlines = node->nhi;\u000a  if (1 < nlines) {\u000a    sequential_sort(lines + nlines_00 * 0x7ffffffffffffff,nlines,\u000a                    (line *)((long)(lines + total_lines * 0x7ffffffffffffff) +\u000a                            (nlines_00 & 0xffffffffffffffe) * -0x10));\u000a  }\u000a  if (1 < nlines_00) {\u000a    sequential_sort(lines,nlines_00,lines + total_lines * 0x7ffffffffffffff);\u000a  }\u000a  node->lo = lines;\u000a  lines = lines + nlines_00 * 0x7ffffffffffffff;\u000a  node->hi = lines;\u000a  node->end_lo = lines;\u000a  node->end_hi = lines + nlines * 0x7ffffffffffffff;\u000a  queue_insert(queue,node);\u000a  merge_loop(queue,total_lines,tfp,temp_output);\u000a  return;\u000a}\u000a\u000a
p2950
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x58\nMOV R15,R9\nMOV RBP,RCX\nMOV R13,RDX\nMOV R12,RSI\nMOV RBX,RDI\nMOV RDX,qword ptr [0x90 + RSP]\nMOV RAX,qword ptr [RBP + 0x30]\nADD RAX,qword ptr [RBP + 0x28]\nMOV R14,R12\nSHR R14,1\nMOV qword ptr [RSP + 0x20],RBX\nMOV qword ptr [RSP + 0x28],R14\nMOV qword ptr [RSP + 0x30],R13\nMOV RCX,qword ptr [RBP + 0x40]\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x8],R8\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x48],R15\nMOV qword ptr [RSP + 0x50],RDX\nCMP R12,0x2\nJC 0x004090fb\nCMP RAX,0x20000\nJC 0x004090fb\nLEA RDI,[RSP + 0x18]\nLEA RCX,[RSP + 0x20]\nXOR ESI,ESI\nMOV EDX,0x409510\nCALL 0x00402410\nTEST EAX,EAX\nJZ 0x004091ae\nMOV qword ptr [RSP + 0x10],R15\nMOV R14,qword ptr [RBP + 0x28]\nMOV R12,qword ptr [RBP + 0x30]\nMOV RAX,R13\nSHL RAX,0x5\nMOV R15,RBX\nSUB R15,RAX\nCMP R12,0x2\nJC 0x00409143\nMOV RAX,R14\nSHL RAX,0x5\nMOV RDI,RBX\nSUB RDI,RAX\nMOV RAX,R14\nSHL RAX,0x4\nAND RAX,-0x20\nMOV RDX,R15\nSUB RDX,RAX\nXOR ECX,ECX\nMOV RSI,R12\nCALL 0x00409540\nCMP R14,0x2\nJC 0x00409159\nXOR ECX,ECX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00409540\nMOV qword ptr [RBP],RBX\nSHL R14,0x5\nSUB RBX,R14\nMOV qword ptr [RBP + 0x8],RBX\nMOV qword ptr [RBP + 0x10],RBX\nSHL R12,0x5\nSUB RBX,R12\nMOV qword ptr [RBP + 0x18],RBX\nMOV RBX,qword ptr [RSP + 0x8]\nMOV RDI,RBX\nMOV RSI,RBP\nCALL 0x00409690\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [0x90 + RSP]\nCALL 0x004096d0\nADD RSP,0x58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nSUB R12,R14\nMOV RAX,qword ptr [RBP + 0x28]\nMOV RCX,qword ptr [RBP + 0x48]\nSHL RAX,0x5\nSUB RBX,RAX\nMOV RAX,qword ptr [0x90 + RSP]\nMOV qword ptr [RSP],RAX\nMOV RDI,RBX\nMOV RSI,R12\nMOV RDX,R13\nMOV R8,qword ptr [RSP + 0x8]\nMOV R9,R15\nCALL 0x00409070\nMOV RDI,qword ptr [RSP + 0x18]\nXOR ESI,ESI\nCALL 0x004029d0\nJMP 0x0040919f\n'
p2951
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 58\n4d 89 cf\n48 89 cd\n49 89 d5\n49 89 f4\n48 89 fb\n48 8b 94 24 90 00 00 00\n48 8b 45 30\n48 03 45 28\n4d 89 e6\n49 d1 ee\n48 89 5c 24 20\n4c 89 74 24 28\n4c 89 6c 24 30\n48 8b 4d 40\n48 89 4c 24 38\n4c 89 44 24 08\n4c 89 44 24 40\n4c 89 7c 24 48\n48 89 54 24 50\n49 83 fc 02\n72 26\n48 3d 00 00 02 00\n72 1e\n48 8d 7c 24 18\n48 8d 4c 24 20\n31 f6\nba 10 95 40 00\ne8 1d 93 ff ff\n85 c0\n0f 84 b3 00 00 00\n4c 89 7c 24 10\n4c 8b 75 28\n4c 8b 65 30\n4c 89 e8\n48 c1 e0 05\n49 89 df\n49 29 c7\n49 83 fc 02\n72 28\n4c 89 f0\n48 c1 e0 05\n48 89 df\n48 29 c7\n4c 89 f0\n48 c1 e0 04\n48 83 e0 e0\n4c 89 fa\n48 29 c2\n31 c9\n4c 89 e6\ne8 fd 03 00 00\n49 83 fe 02\n72 10\n31 c9\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 e7 03 00 00\n48 89 5d 00\n49 c1 e6 05\n4c 29 f3\n48 89 5d 08\n48 89 5d 10\n49 c1 e4 05\n4c 29 e3\n48 89 5d 18\n48 8b 5c 24 08\n48 89 df\n48 89 ee\ne8 09 05 00 00\n48 89 df\n4c 89 ee\n48 8b 54 24 10\n48 8b 8c 24 90 00 00 00\ne8 31 05 00 00\n48 83 c4 58\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4d 29 f4\n48 8b 45 28\n48 8b 4d 48\n48 c1 e0 05\n48 29 c3\n48 8b 84 24 90 00 00 00\n48 89 04 24\n48 89 df\n4c 89 e6\n4c 89 ea\n4c 8b 44 24 08\n4d 89 f9\ne8 8e fe ff ff\n48 8b 7c 24 18\n31 f6\ne8 e2 97 ff ff\neb af\n'
p2952
S'.text:0000000000409070\n.text:0000000000409071\n.text:0000000000409073\n.text:0000000000409075\n.text:0000000000409077\n.text:0000000000409079\n.text:000000000040907a\n.text:000000000040907e\n.text:0000000000409081\n.text:0000000000409084\n.text:0000000000409087\n.text:000000000040908a\n.text:000000000040908d\n.text:0000000000409095\n.text:0000000000409099\n.text:000000000040909d\n.text:00000000004090a0\n.text:00000000004090a3\n.text:00000000004090a8\n.text:00000000004090ad\n.text:00000000004090b2\n.text:00000000004090b6\n.text:00000000004090bb\n.text:00000000004090c0\n.text:00000000004090c5\n.text:00000000004090ca\n.text:00000000004090cf\n.text:00000000004090d3\n.text:00000000004090d5\n.text:00000000004090db\n.text:00000000004090dd\n.text:00000000004090e2\n.text:00000000004090e7\n.text:00000000004090e9\n.text:00000000004090ee\n.text:00000000004090f3\n.text:00000000004090f5\n.text:00000000004090fb\n.text:0000000000409100\n.text:0000000000409104\n.text:0000000000409108\n.text:000000000040910b\n.text:000000000040910f\n.text:0000000000409112\n.text:0000000000409115\n.text:0000000000409119\n.text:000000000040911b\n.text:000000000040911e\n.text:0000000000409122\n.text:0000000000409125\n.text:0000000000409128\n.text:000000000040912b\n.text:000000000040912f\n.text:0000000000409133\n.text:0000000000409136\n.text:0000000000409139\n.text:000000000040913b\n.text:000000000040913e\n.text:0000000000409143\n.text:0000000000409147\n.text:0000000000409149\n.text:000000000040914b\n.text:000000000040914e\n.text:0000000000409151\n.text:0000000000409154\n.text:0000000000409159\n.text:000000000040915d\n.text:0000000000409161\n.text:0000000000409164\n.text:0000000000409168\n.text:000000000040916c\n.text:0000000000409170\n.text:0000000000409173\n.text:0000000000409177\n.text:000000000040917c\n.text:000000000040917f\n.text:0000000000409182\n.text:0000000000409187\n.text:000000000040918a\n.text:000000000040918d\n.text:0000000000409192\n.text:000000000040919a\n.text:000000000040919f\n.text:00000000004091a3\n.text:00000000004091a4\n.text:00000000004091a6\n.text:00000000004091a8\n.text:00000000004091aa\n.text:00000000004091ac\n.text:00000000004091ad\n.text:00000000004091ae\n.text:00000000004091b1\n.text:00000000004091b5\n.text:00000000004091b9\n.text:00000000004091bd\n.text:00000000004091c0\n.text:00000000004091c8\n.text:00000000004091cc\n.text:00000000004091cf\n.text:00000000004091d2\n.text:00000000004091d5\n.text:00000000004091da\n.text:00000000004091dd\n.text:00000000004091e2\n.text:00000000004091e7\n.text:00000000004091e9\n.text:00000000004091ee\n'
p2953
tp2954
sS'strcaseeq1'
p2955
(S'\n__stdcall strcaseeq1()\n'
p2956
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p2957
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00410e90\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040e03d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040e044\nJMP 0x0040e077\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040e077\nTEST BPL,BPL\nJZ 0x0040e072\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040e090\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2958
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 66 2e 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2959
S'.text:000000000040e000\n.text:000000000040e001\n.text:000000000040e003\n.text:000000000040e005\n.text:000000000040e007\n.text:000000000040e009\n.text:000000000040e00a\n.text:000000000040e00b\n.text:000000000040e010\n.text:000000000040e013\n.text:000000000040e016\n.text:000000000040e019\n.text:000000000040e01b\n.text:000000000040e01e\n.text:000000000040e023\n.text:000000000040e025\n.text:000000000040e02a\n.text:000000000040e02e\n.text:000000000040e030\n.text:000000000040e032\n.text:000000000040e035\n.text:000000000040e037\n.text:000000000040e039\n.text:000000000040e03b\n.text:000000000040e03d\n.text:000000000040e03f\n.text:000000000040e042\n.text:000000000040e044\n.text:000000000040e047\n.text:000000000040e049\n.text:000000000040e04d\n.text:000000000040e051\n.text:000000000040e055\n.text:000000000040e05b\n.text:000000000040e05f\n.text:000000000040e062\n.text:000000000040e066\n.text:000000000040e067\n.text:000000000040e069\n.text:000000000040e06b\n.text:000000000040e06d\n.text:000000000040e06f\n.text:000000000040e070\n.text:000000000040e072\n.text:000000000040e077\n.text:000000000040e07b\n.text:000000000040e07c\n.text:000000000040e07e\n.text:000000000040e080\n.text:000000000040e082\n.text:000000000040e084\n.text:000000000040e085\n'
p2960
tp2961
sS'strcaseeq4'
p2962
(S'\n__stdcall strcaseeq4()\n'
p2963
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p2964
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410e90\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040e1ac\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040e1b3\nJMP 0x0040e1d4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040e1d4\nTEST BPL,BPL\nJZ 0x0040e1cf\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040e1e0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2965
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 f7 2c 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p2966
S'.text:000000000040e180\n.text:000000000040e181\n.text:000000000040e183\n.text:000000000040e185\n.text:000000000040e186\n.text:000000000040e187\n.text:000000000040e18a\n.text:000000000040e18d\n.text:000000000040e18f\n.text:000000000040e192\n.text:000000000040e194\n.text:000000000040e199\n.text:000000000040e19d\n.text:000000000040e19f\n.text:000000000040e1a1\n.text:000000000040e1a4\n.text:000000000040e1a6\n.text:000000000040e1a8\n.text:000000000040e1aa\n.text:000000000040e1ac\n.text:000000000040e1ae\n.text:000000000040e1b1\n.text:000000000040e1b3\n.text:000000000040e1b6\n.text:000000000040e1b8\n.text:000000000040e1bc\n.text:000000000040e1c0\n.text:000000000040e1c3\n.text:000000000040e1c7\n.text:000000000040e1c8\n.text:000000000040e1ca\n.text:000000000040e1cc\n.text:000000000040e1cd\n.text:000000000040e1cf\n.text:000000000040e1d4\n.text:000000000040e1d8\n.text:000000000040e1d9\n.text:000000000040e1db\n.text:000000000040e1dd\n.text:000000000040e1de\n'
p2967
tp2968
sS'ind'
p2969
(S'\n__stdcall ind(isaac_word * m, isaac_word x)\n'
p2970
V\u000aisaac_word ind(isaac_word *m,isaac_word x)\u000a\u000a{\u000a  return *(isaac_word *)((long)m + (ulong)((uint)x & 0x7f8));\u000a}\u000a\u000a
p2971
S'AND ESI,0x7f8\nMOV RAX,qword ptr [RDI + RSI*0x1]\nRET\n'
p2972
S'81 e6 f8 07 00 00\n48 8b 04 37\nc3\n'
p2973
S'.text:000000000040eb20\n.text:000000000040eb26\n.text:000000000040eb2a\n'
p2974
tp2975
sS'sort_buffer_size'
p2976
(S'\n__stdcall sort_buffer_size()\n'
p2977
V\u000asize_t sort_buffer_size(void)\u000a\u000a{\u000a  ulong uVar1;\u000a  size_t size_bound;\u000a  int __fd;\u000a  char *message;\u000a  long in_RCX;\u000a  ulong uVar2;\u000a  ulong in_RDX;\u000a  ulong uVar3;\u000a  long in_RSI;\u000a  FILE **in_RDI;\u000a  size_t sVar4;\u000a  stat local_c0;\u000a  \u000a  sVar4 = in_RCX + 2;\u000a  if (in_RDX == 0) {\u000a    return sVar4;\u000a  }\u000a  uVar3 = 0;\u000a  do {\u000a    if (uVar3 == 0) {\u000a      __fd = fileno(*in_RDI);\u000aLAB_00408ec3:\u000a      __fd = fstat(__fd,&local_c0);\u000a    }\u000a    else {\u000a      message = *(char **)(in_RSI + uVar3 * 8);\u000a      if ((*message == '-') && (message[1] == 0)) {\u000a        __fd = 0;\u000a        goto LAB_00408ec3;\u000a      }\u000a      __fd = stat(*(char **)(in_RSI + uVar3 * 8),&local_c0);\u000a    }\u000a    if (__fd != 0) {\u000a      message = (char *)dcgettext(0,"stat failed",5);\u000a                    /* WARNING: Subroutine does not return */\u000a      die(message,*(char **)(in_RSI + uVar3 * 8));\u000a    }\u000a    uVar1 = local_c0.st_size;\u000a    if ((local_c0.st_mode & 0xf000) != 0x8000) {\u000a      if (sort_size != 0) {\u000a        return sort_size;\u000a      }\u000a      uVar1 = 0x20000;\u000a    }\u000a    if ((size_bound == 0) && (size_bound = sort_size, sort_size == 0)) {\u000a      size_bound = sort_size;\u000a      size_bound = default_sort_size();\u000a    }\u000a    uVar2 = uVar1 * (in_RCX + 1U) + 1;\u000a    if (uVar1 != uVar2 / (in_RCX + 1U)) {\u000a      return size_bound;\u000a    }\u000a    if (size_bound - sVar4 <= uVar2) {\u000a      return size_bound;\u000a    }\u000a    sVar4 = sVar4 + uVar2;\u000a    uVar3 = uVar3 + 1;\u000a    if (in_RDX <= uVar3) {\u000a      return sVar4;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p2978
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV RBX,RCX\nMOV R15,RDX\nMOV R14,RSI\nMOV qword ptr [RSP],RDI\nLEA R12,[RBX + 0x2]\nTEST R15,R15\nJZ 0x00408f80\nINC RBX\nXOR EBP,EBP\nTEST RBP,RBP\nJZ 0x00408eb0\nMOV RAX,qword ptr [R14 + RBP*0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00408e94\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00408ec1\nMOV RDI,qword ptr [R14 + RBP*0x8]\nLEA RSI,[RSP + 0x8]\nCALL 0x004115c0\nTEST EAX,EAX\nJZ 0x00408ed5\nJMP 0x00408f95\nMOV RAX,qword ptr [RSP]\nMOV RDI,qword ptr [RAX + RBP*0x8]\nCALL 0x004027e0\nMOV EDI,EAX\nJMP 0x00408ec3\nXOR EDI,EDI\nLEA RSI,[RSP + 0x8]\nCALL 0x004115d0\nTEST EAX,EAX\nJNZ 0x00408f95\nMOV EAX,dword ptr [RSP + 0x20]\nMOV ECX,0xf000\nAND EAX,ECX\nCMP EAX,0x8000\nJNZ 0x00408f00\nMOV R13,qword ptr [RSP + 0x38]\nCMP qword ptr [0x0061ab60],0x0\nJNZ 0x00408f40\nJMP 0x00408f1c\nMOV RAX,qword ptr [0x0061a668]\nTEST RAX,RAX\nJNZ 0x00408f83\nMOV R13D,0x20000\nCMP qword ptr [0x0061ab60],0x0\nJNZ 0x00408f40\nMOV RAX,qword ptr [0x0061a668]\nMOV qword ptr [0x0061ab60],RAX\nTEST RAX,RAX\nJNZ 0x00408f40\nCALL 0x00409280\nMOV qword ptr [0x0061ab60],RAX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,R13\nIMUL RCX,RBX\nINC RCX\nXOR EDX,EDX\nMOV RAX,RCX\nDIV RBX\nMOV RDX,RAX\nMOV RAX,qword ptr [0x0061ab60]\nCMP R13,RDX\nJNZ 0x00408f83\nMOV RDX,RAX\nSUB RDX,R12\nCMP RDX,RCX\nJBE 0x00408f83\nADD R12,RCX\nINC RBP\nCMP RBP,R15\nMOV RAX,R12\nJC 0x00408e80\nJMP 0x00408f83\nMOV RAX,R12\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x41406c\nMOV EDX,0x5\nCALL 0x004025b0\nMOV RSI,qword ptr [R14 + RBP*0x8]\nMOV RDI,RAX\nCALL 0x00405c70\n'
p2979
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n48 89 cb\n49 89 d7\n49 89 f6\n48 89 3c 24\n4c 8d 63 02\n4d 85 ff\n0f 84 05 01 00 00\n48 ff c3\n31 ed\n48 85 ed\n74 2b\n49 8b 04 ee\n80 38 2d\n75 06\n80 78 01 00\n74 2d\n49 8b 3c ee\n48 8d 74 24 08\ne8 1e 87 00 00\n85 c0\n74 2f\ne9 ea 00 00 00\n48 8b 04 24\n48 8b 3c e8\ne8 23 99 ff ff\n89 c7\neb 02\n31 ff\n48 8d 74 24 08\ne8 03 87 00 00\n85 c0\n0f 85 c0 00 00 00\n8b 44 24 20\nb9 00 f0 00 00\n21 c8\n3d 00 80 00 00\n75 19\n4c 8b 6c 24 38\n48 83 3d 6c 1c 21 00 00\n75 4a\neb 24\n48 8b 05 61 17 21 00\n48 85 c0\n75 77\n41 bd 00 00 02 00\n48 83 3d 46 1c 21 00 00\n75 24\n48 8b 05 45 17 21 00\n48 89 05 36 1c 21 00\n48 85 c0\n75 11\ne8 4c 03 00 00\n48 89 05 25 1c 21 00\n0f 1f 44 00 00\n4c 89 e9\n48 0f af cb\n48 ff c1\n31 d2\n48 89 c8\n48 f7 f3\n48 89 c2\n48 8b 05 04 1c 21 00\n49 39 d5\n75 22\n48 89 c2\n4c 29 e2\n48 39 ca\n76 17\n49 01 cc\n48 ff c5\n4c 39 fd\n4c 89 e0\n0f 82 02 ff ff ff\neb 03\n4c 89 e0\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe 6c 40 41 00\nba 05 00 00 00\ne8 0a 96 ff ff\n49 8b 34 ee\n48 89 c7\ne8 be cc ff ff\n'
p2980
S'.text:0000000000408e50\n.text:0000000000408e51\n.text:0000000000408e53\n.text:0000000000408e55\n.text:0000000000408e57\n.text:0000000000408e59\n.text:0000000000408e5a\n.text:0000000000408e61\n.text:0000000000408e64\n.text:0000000000408e67\n.text:0000000000408e6a\n.text:0000000000408e6e\n.text:0000000000408e72\n.text:0000000000408e75\n.text:0000000000408e7b\n.text:0000000000408e7e\n.text:0000000000408e80\n.text:0000000000408e83\n.text:0000000000408e85\n.text:0000000000408e89\n.text:0000000000408e8c\n.text:0000000000408e8e\n.text:0000000000408e92\n.text:0000000000408e94\n.text:0000000000408e98\n.text:0000000000408e9d\n.text:0000000000408ea2\n.text:0000000000408ea4\n.text:0000000000408ea6\n.text:0000000000408eb0\n.text:0000000000408eb4\n.text:0000000000408eb8\n.text:0000000000408ebd\n.text:0000000000408ebf\n.text:0000000000408ec1\n.text:0000000000408ec3\n.text:0000000000408ec8\n.text:0000000000408ecd\n.text:0000000000408ecf\n.text:0000000000408ed5\n.text:0000000000408ed9\n.text:0000000000408ede\n.text:0000000000408ee0\n.text:0000000000408ee5\n.text:0000000000408ee7\n.text:0000000000408eec\n.text:0000000000408ef4\n.text:0000000000408ef6\n.text:0000000000408f00\n.text:0000000000408f07\n.text:0000000000408f0a\n.text:0000000000408f0c\n.text:0000000000408f12\n.text:0000000000408f1a\n.text:0000000000408f1c\n.text:0000000000408f23\n.text:0000000000408f2a\n.text:0000000000408f2d\n.text:0000000000408f2f\n.text:0000000000408f34\n.text:0000000000408f3b\n.text:0000000000408f40\n.text:0000000000408f43\n.text:0000000000408f47\n.text:0000000000408f4a\n.text:0000000000408f4c\n.text:0000000000408f4f\n.text:0000000000408f52\n.text:0000000000408f55\n.text:0000000000408f5c\n.text:0000000000408f5f\n.text:0000000000408f61\n.text:0000000000408f64\n.text:0000000000408f67\n.text:0000000000408f6a\n.text:0000000000408f6c\n.text:0000000000408f6f\n.text:0000000000408f72\n.text:0000000000408f75\n.text:0000000000408f78\n.text:0000000000408f7e\n.text:0000000000408f80\n.text:0000000000408f83\n.text:0000000000408f8a\n.text:0000000000408f8b\n.text:0000000000408f8d\n.text:0000000000408f8f\n.text:0000000000408f91\n.text:0000000000408f93\n.text:0000000000408f94\n.text:0000000000408f95\n.text:0000000000408f97\n.text:0000000000408f9c\n.text:0000000000408fa1\n.text:0000000000408fa6\n.text:0000000000408faa\n.text:0000000000408fad\n'
p2981
tp2982
sS'strcaseeq3'
p2983
(S'\n__stdcall strcaseeq3()\n'
p2984
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p2985
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00410e90\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x0040e140\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040e147\nJMP 0x0040e16a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040e16a\nTEST BPL,BPL\nJZ 0x0040e165\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x0040e180\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2986
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 63 2d 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p2987
S'.text:000000000040e110\n.text:000000000040e111\n.text:000000000040e113\n.text:000000000040e115\n.text:000000000040e117\n.text:000000000040e118\n.text:000000000040e11b\n.text:000000000040e11e\n.text:000000000040e121\n.text:000000000040e123\n.text:000000000040e126\n.text:000000000040e128\n.text:000000000040e12d\n.text:000000000040e131\n.text:000000000040e133\n.text:000000000040e135\n.text:000000000040e138\n.text:000000000040e13a\n.text:000000000040e13c\n.text:000000000040e13e\n.text:000000000040e140\n.text:000000000040e142\n.text:000000000040e145\n.text:000000000040e147\n.text:000000000040e14a\n.text:000000000040e14c\n.text:000000000040e150\n.text:000000000040e154\n.text:000000000040e158\n.text:000000000040e15b\n.text:000000000040e15c\n.text:000000000040e15e\n.text:000000000040e160\n.text:000000000040e162\n.text:000000000040e163\n.text:000000000040e165\n.text:000000000040e16a\n.text:000000000040e16b\n.text:000000000040e16d\n.text:000000000040e16f\n.text:000000000040e171\n.text:000000000040e172\n'
p2988
tp2989
sS'register_tm_clones'
p2990
(S'\n__stdcall register_tm_clones()\n'
p2991
V\u000a/* WARNING: Removing unreachable block (ram,0x00402bd3) */\u000a/* WARNING: Removing unreachable block (ram,0x00402bdd) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p2992
S'MOV ESI,0x61a548\nPUSH RBP\nSUB RSI,0x61a548\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00402be8\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00402be8\nPOP RBP\nMOV EDI,0x61a548\nJMP RAX\nPOP RBP\nRET\n'
p2993
S'be 48 a5 61 00\n55\n48 81 ee 48 a5 61 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 48 a5 61 00\nff e0\n5d\nc3\n'
p2994
S'.text:0000000000402bb0\n.text:0000000000402bb5\n.text:0000000000402bb6\n.text:0000000000402bbd\n.text:0000000000402bc1\n.text:0000000000402bc4\n.text:0000000000402bc7\n.text:0000000000402bcb\n.text:0000000000402bce\n.text:0000000000402bd1\n.text:0000000000402bd3\n.text:0000000000402bd8\n.text:0000000000402bdb\n.text:0000000000402bdd\n.text:0000000000402bde\n.text:0000000000402be3\n.text:0000000000402be8\n.text:0000000000402be9\n'
p2995
tp2996
sS'c_islower'
p2997
(S'\n__stdcall c_islower()\n'
p2998
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p2999
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p3000
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p3001
S'.text:0000000000410e30\n.text:0000000000410e33\n.text:0000000000410e36\n.text:0000000000410e39\n'
p3002
tp3003
sS'call_chunkfun'
p3004
(S'\n__stdcall call_chunkfun(obstack * h, size_t size)\n'
p3005
V\u000avoid * call_chunkfun(obstack *h,size_t size)\u000a\u000a{\u000a  void *pvVar1;\u000a  undefined8 in_RDX;\u000a  \u000a  if ((*(byte *)&h->use_extra_arg_bitfield & 1) == 0) {\u000a                    /* WARNING: Could not recover jumptable at 0x00410b7c. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a    pvVar1 = (void *)(*(code *)h->chunkfun)(size);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Could not recover jumptable at 0x00410b87. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a  pvVar1 = (void *)(*(code *)h->chunkfun)(h->extra_arg,size,in_RDX,(code *)h->chunkfun);\u000a  return pvVar1;\u000a}\u000a\u000a
p3006
S'MOV RAX,RDI\nTEST byte ptr [RAX + 0x50],0x1\nJNZ 0x00410b7f\nMOV RDI,RSI\nJMP qword ptr [RAX + 0x38]\nMOV RCX,qword ptr [RAX + 0x38]\nMOV RDI,qword ptr [RAX + 0x48]\nJMP RCX\n'
p3007
S'48 89 f8\nf6 40 50 01\n75 06\n48 89 f7\nff 60 38\n48 8b 48 38\n48 8b 78 48\nff e1\n'
p3008
S'.text:0000000000410b70\n.text:0000000000410b73\n.text:0000000000410b77\n.text:0000000000410b79\n.text:0000000000410b7c\n.text:0000000000410b7f\n.text:0000000000410b83\n.text:0000000000410b87\n'
p3009
tp3010
sS'fwrite'
p3011
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p3012
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0061a360)();\u000a  return sVar1;\u000a}\u000a\u000a
p3013
S'JMP qword ptr [0x0061a360]\n'
p3014
S'ff 25 fa 78 21 00\n'
p3015
S'.plt:0000000000402a60\n'
p3016
tp3017
sS'sequential_sort'
p3018
(S'\n__stdcall sequential_sort(line * lines, size_t nlines, line * temp)\n'
p3019
V\u000avoid sequential_sort(line *lines,size_t nlines,line *temp)\u000a\u000a{\u000a  line *b;\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  undefined4 uVar6;\u000a  undefined4 uVar7;\u000a  int iVar8;\u000a  ulong uVar9;\u000a  char in_CL;\u000a  long lVar10;\u000a  ulong nlines_00;\u000a  line *lo;\u000a  \u000a  if (nlines != 2) {\u000a    nlines_00 = nlines >> 1;\u000a    lVar10 = 0;\u000a    if (in_CL != 0) {\u000a      lVar10 = -nlines_00;\u000a    }\u000a    sequential_sort(lines + nlines_00 * 0x7ffffffffffffff,nlines - nlines_00,temp + lVar10);\u000a    if (nlines < 4) {\u000a      if (in_CL == 0) {\u000a        uVar1 = *(undefined4 *)&lines[-1].text;\u000a        uVar2 = *(undefined4 *)((long)&lines[-1].text + 4);\u000a        uVar4 = *(undefined4 *)&lines[-1].length;\u000a        uVar6 = *(undefined4 *)((long)&lines[-1].length + 4);\u000a        uVar3 = *(undefined4 *)((long)&lines[-1].keybeg + 4);\u000a        uVar5 = *(undefined4 *)&lines[-1].keylim;\u000a        uVar7 = *(undefined4 *)((long)&lines[-1].keylim + 4);\u000a        *(undefined4 *)&temp[-1].keybeg = *(undefined4 *)&lines[-1].keybeg;\u000a        *(undefined4 *)((long)&temp[-1].keybeg + 4) = uVar3;\u000a        *(undefined4 *)&temp[-1].keylim = uVar5;\u000a        *(undefined4 *)((long)&temp[-1].keylim + 4) = uVar7;\u000a        *(undefined4 *)&temp[-1].text = uVar1;\u000a        *(undefined4 *)((long)&temp[-1].text + 4) = uVar2;\u000a        *(undefined4 *)&temp[-1].length = uVar4;\u000a        *(undefined4 *)((long)&temp[-1].length + 4) = uVar6;\u000a      }\u000a    }\u000a    else {\u000a      sequential_sort(lines,nlines_00,temp);\u000a    }\u000a    lo = temp;\u000a    if (in_CL != 0) {\u000a      lo = lines;\u000a      lines = temp;\u000a    }\u000a    mergelines(lines,nlines,lo);\u000a    return;\u000a  }\u000a  lo = lines + -1;\u000a  b = lines + -2;\u000a  iVar8 = compare(lo,b);\u000a  if (in_CL == 0) {\u000a    if (0 < iVar8) {\u000a      uVar1 = *(undefined4 *)&lo->text;\u000a      uVar2 = *(undefined4 *)((long)&lines[-1].text + 4);\u000a      uVar4 = *(undefined4 *)&lines[-1].length;\u000a      uVar6 = *(undefined4 *)((long)&lines[-1].length + 4);\u000a      uVar3 = *(undefined4 *)((long)&lines[-1].keybeg + 4);\u000a      uVar5 = *(undefined4 *)&lines[-1].keylim;\u000a      uVar7 = *(undefined4 *)((long)&lines[-1].keylim + 4);\u000a      *(undefined4 *)&temp[-1].keybeg = *(undefined4 *)&lines[-1].keybeg;\u000a      *(undefined4 *)((long)&temp[-1].keybeg + 4) = uVar3;\u000a      *(undefined4 *)&temp[-1].keylim = uVar5;\u000a      *(undefined4 *)((long)&temp[-1].keylim + 4) = uVar7;\u000a      *(undefined4 *)&temp[-1].text = uVar1;\u000a      *(undefined4 *)((long)&temp[-1].text + 4) = uVar2;\u000a      *(undefined4 *)&temp[-1].length = uVar4;\u000a      *(undefined4 *)((long)&temp[-1].length + 4) = uVar6;\u000a      uVar1 = *(undefined4 *)&b->text;\u000a      uVar2 = *(undefined4 *)((long)&lines[-2].text + 4);\u000a      uVar4 = *(undefined4 *)&lines[-2].length;\u000a      uVar6 = *(undefined4 *)((long)&lines[-2].length + 4);\u000a      uVar3 = *(undefined4 *)((long)&lines[-2].keybeg + 4);\u000a      uVar5 = *(undefined4 *)&lines[-2].keylim;\u000a      uVar7 = *(undefined4 *)((long)&lines[-2].keylim + 4);\u000a      *(undefined4 *)&lines[-1].keybeg = *(undefined4 *)&lines[-2].keybeg;\u000a      *(undefined4 *)((long)&lines[-1].keybeg + 4) = uVar3;\u000a      *(undefined4 *)&lines[-1].keylim = uVar5;\u000a      *(undefined4 *)((long)&lines[-1].keylim + 4) = uVar7;\u000a      *(undefined4 *)&lo->text = uVar1;\u000a      *(undefined4 *)((long)&lines[-1].text + 4) = uVar2;\u000a      *(undefined4 *)&lines[-1].length = uVar4;\u000a      *(undefined4 *)((long)&lines[-1].length + 4) = uVar6;\u000a      uVar1 = *(undefined4 *)&temp[-1].text;\u000a      uVar2 = *(undefined4 *)((long)&temp[-1].text + 4);\u000a      uVar4 = *(undefined4 *)&temp[-1].length;\u000a      uVar6 = *(undefined4 *)((long)&temp[-1].length + 4);\u000a      uVar3 = *(undefined4 *)((long)&temp[-1].keybeg + 4);\u000a      uVar5 = *(undefined4 *)&temp[-1].keylim;\u000a      uVar7 = *(undefined4 *)((long)&temp[-1].keylim + 4);\u000a      *(undefined4 *)&lines[-2].keybeg = *(undefined4 *)&temp[-1].keybeg;\u000a      *(undefined4 *)((long)&lines[-2].keybeg + 4) = uVar3;\u000a      *(undefined4 *)&lines[-2].keylim = uVar5;\u000a      *(undefined4 *)((long)&lines[-2].keylim + 4) = uVar7;\u000a      *(undefined4 *)&b->text = uVar1;\u000a      *(undefined4 *)((long)&lines[-2].text + 4) = uVar2;\u000a      *(undefined4 *)&lines[-2].length = uVar4;\u000a      *(undefined4 *)((long)&lines[-2].length + 4) = uVar6;\u000a    }\u000a  }\u000a  else {\u000a    nlines_00 = (ulong)(0 < iVar8);\u000a    uVar9 = ~nlines_00;\u000a    uVar1 = *(undefined4 *)&lines[uVar9].text;\u000a    uVar2 = *(undefined4 *)((long)&lines[uVar9].text + 4);\u000a    uVar4 = *(undefined4 *)&lines[uVar9].length;\u000a    uVar6 = *(undefined4 *)((long)&lines[uVar9].length + 4);\u000a    uVar3 = *(undefined4 *)((long)&lines[uVar9].keybeg + 4);\u000a    uVar5 = *(undefined4 *)&lines[uVar9].keylim;\u000a    uVar7 = *(undefined4 *)((long)&lines[uVar9].keylim + 4);\u000a    *(undefined4 *)&temp[-1].keybeg = *(undefined4 *)&lines[uVar9].keybeg;\u000a    *(undefined4 *)((long)&temp[-1].keybeg + 4) = uVar3;\u000a    *(undefined4 *)&temp[-1].keylim = uVar5;\u000a    *(undefined4 *)((long)&temp[-1].keylim + 4) = uVar7;\u000a    *(undefined4 *)&temp[-1].text = uVar1;\u000a    *(undefined4 *)((long)&temp[-1].text + 4) = uVar2;\u000a    *(undefined4 *)&temp[-1].length = uVar4;\u000a    *(undefined4 *)((long)&temp[-1].length + 4) = uVar6;\u000a    uVar1 = *(undefined4 *)&lines[nlines_00 - 2].text;\u000a    uVar2 = *(undefined4 *)((long)&lines[nlines_00 - 2].text + 4);\u000a    uVar4 = *(undefined4 *)&lines[nlines_00 - 2].length;\u000a    uVar6 = *(undefined4 *)((long)&lines[nlines_00 - 2].length + 4);\u000a    uVar3 = *(undefined4 *)((long)&lines[nlines_00 - 2].keybeg + 4);\u000a    uVar5 = *(undefined4 *)&lines[nlines_00 - 2].keylim;\u000a    uVar7 = *(undefined4 *)((long)&lines[nlines_00 - 2].keylim + 4);\u000a    *(undefined4 *)&temp[-2].keybeg = *(undefined4 *)&lines[nlines_00 - 2].keybeg;\u000a    *(undefined4 *)((long)&temp[-2].keybeg + 4) = uVar3;\u000a    *(undefined4 *)&temp[-2].keylim = uVar5;\u000a    *(undefined4 *)((long)&temp[-2].keylim + 4) = uVar7;\u000a    *(undefined4 *)&temp[-2].text = uVar1;\u000a    *(undefined4 *)((long)&temp[-2].text + 4) = uVar2;\u000a    *(undefined4 *)&temp[-2].length = uVar4;\u000a    *(undefined4 *)((long)&temp[-2].length + 4) = uVar6;\u000a  }\u000a  return;\u000a}\u000a\u000a
p3020
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R15D,ECX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCMP RBP,0x2\nJNZ 0x004095bd\nLEA RBP,[R12 + -0x20]\nLEA RBX,[R12 + -0x40]\nMOV RDI,RBP\nMOV RSI,RBX\nCALL 0x004062d0\nTEST R15B,R15B\nJZ 0x00409613\nXOR ECX,ECX\nTEST EAX,EAX\nSETG CL\nMOV RAX,RCX\nNOT RAX\nSHL RAX,0x5\nMOVUPS XMM0,xmmword ptr [R12 + RAX*0x1]\nMOVUPS XMM1,xmmword ptr [R12 + RAX*0x1 + 0x10]\nMOVUPS xmmword ptr [R14 + -0x10],XMM1\nMOVUPS xmmword ptr [R14 + -0x20],XMM0\nSHL RCX,0x5\nMOVUPS XMM0,xmmword ptr [R12 + RCX*0x1 + -0x40]\nMOVUPS XMM1,xmmword ptr [R12 + RCX*0x1 + -0x30]\nMOVUPS xmmword ptr [R14 + -0x30],XMM1\nMOVUPS xmmword ptr [R14 + -0x40],XMM0\nJMP 0x00409649\nMOV RBX,RBP\nSHR RBX,1\nMOV RSI,RBP\nSUB RSI,RBX\nMOV RAX,RBX\nNEG RAX\nMOV RCX,RBX\nSHL RCX,0x5\nMOV RDI,R12\nSUB RDI,RCX\nXOR EDX,EDX\nTEST R15B,R15B\nCMOVNZ RDX,RAX\nSHL RDX,0x5\nADD RDX,R14\nMOVZX ECX,R15B\nCALL 0x00409540\nCMP RBP,0x4\nJC 0x00409652\nMOV EAX,R15D\nXOR AL,0x1\nMOVZX ECX,AL\nMOV RDI,R12\nMOV RSI,RBX\nMOV RDX,R14\nCALL 0x00409540\nJMP 0x0040966d\nTEST EAX,EAX\nJLE 0x00409649\nMOVUPS XMM0,xmmword ptr [RBP]\nMOVUPS XMM1,xmmword ptr [RBP + 0x10]\nMOVUPS xmmword ptr [R14 + -0x10],XMM1\nMOVUPS xmmword ptr [R14 + -0x20],XMM0\nMOVUPS XMM0,xmmword ptr [RBX]\nMOVUPS XMM1,xmmword ptr [RBX + 0x10]\nMOVUPS xmmword ptr [RBP + 0x10],XMM1\nMOVUPS xmmword ptr [RBP],XMM0\nMOVUPS XMM0,xmmword ptr [R14 + -0x20]\nMOVUPS XMM1,xmmword ptr [R14 + -0x10]\nMOVUPS xmmword ptr [RBX + 0x10],XMM1\nMOVUPS xmmword ptr [RBX],XMM0\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nTEST R15B,R15B\nJNZ 0x0040966d\nMOVUPS XMM0,xmmword ptr [R12 + -0x20]\nMOVUPS XMM1,xmmword ptr [R12 + -0x10]\nMOVUPS xmmword ptr [R14 + -0x10],XMM1\nMOVUPS xmmword ptr [R14 + -0x20],XMM0\nTEST R15B,R15B\nMOV RDI,R12\nCMOVNZ RDI,R14\nCMOVNZ R14,R12\nMOV RSI,RBP\nMOV RDX,R14\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00409750\n'
p3021
S'55\n41 57\n41 56\n41 54\n53\n41 89 cf\n49 89 d6\n48 89 f5\n49 89 fc\n48 83 fd 02\n75 63\n49 8d 6c 24 e0\n49 8d 5c 24 c0\n48 89 ef\n48 89 de\ne8 61 cd ff ff\n45 84 ff\n0f 84 9b 00 00 00\n31 c9\n85 c0\n0f 9f c1\n48 89 c8\n48 f7 d0\n48 c1 e0 05\n41 0f 10 04 04\n41 0f 10 4c 04 10\n41 0f 11 4e f0\n41 0f 11 46 e0\n48 c1 e1 05\n41 0f 10 44 0c c0\n41 0f 10 4c 0c d0\n41 0f 11 4e d0\n41 0f 11 46 c0\ne9 8c 00 00 00\n48 89 eb\n48 d1 eb\n48 89 ee\n48 29 de\n48 89 d8\n48 f7 d8\n48 89 d9\n48 c1 e1 05\n4c 89 e7\n48 29 cf\n31 d2\n45 84 ff\n48 0f 45 d0\n48 c1 e2 05\n4c 01 f2\n41 0f b6 cf\ne8 4b ff ff ff\n48 83 fd 04\n72 57\n44 89 f8\n34 01\n0f b6 c8\n4c 89 e7\n48 89 de\n4c 89 f2\ne8 2f ff ff ff\neb 5a\n85 c0\n7e 32\n0f 10 45 00\n0f 10 4d 10\n41 0f 11 4e f0\n41 0f 11 46 e0\n0f 10 03\n0f 10 4b 10\n0f 11 4d 10\n0f 11 45 00\n41 0f 10 46 e0\n41 0f 10 4e f0\n0f 11 4b 10\n0f 11 03\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n45 84 ff\n75 16\n41 0f 10 44 24 e0\n41 0f 10 4c 24 f0\n41 0f 11 4e f0\n41 0f 11 46 e0\n45 84 ff\n4c 89 e7\n49 0f 45 fe\n4d 0f 45 f4\n48 89 ee\n4c 89 f2\n5b\n41 5c\n41 5e\n41 5f\n5d\ne9 c2 00 00 00\n'
p3022
S'.text:0000000000409540\n.text:0000000000409541\n.text:0000000000409543\n.text:0000000000409545\n.text:0000000000409547\n.text:0000000000409548\n.text:000000000040954b\n.text:000000000040954e\n.text:0000000000409551\n.text:0000000000409554\n.text:0000000000409558\n.text:000000000040955a\n.text:000000000040955f\n.text:0000000000409564\n.text:0000000000409567\n.text:000000000040956a\n.text:000000000040956f\n.text:0000000000409572\n.text:0000000000409578\n.text:000000000040957a\n.text:000000000040957c\n.text:000000000040957f\n.text:0000000000409582\n.text:0000000000409585\n.text:0000000000409589\n.text:000000000040958e\n.text:0000000000409594\n.text:0000000000409599\n.text:000000000040959e\n.text:00000000004095a2\n.text:00000000004095a8\n.text:00000000004095ae\n.text:00000000004095b3\n.text:00000000004095b8\n.text:00000000004095bd\n.text:00000000004095c0\n.text:00000000004095c3\n.text:00000000004095c6\n.text:00000000004095c9\n.text:00000000004095cc\n.text:00000000004095cf\n.text:00000000004095d2\n.text:00000000004095d6\n.text:00000000004095d9\n.text:00000000004095dc\n.text:00000000004095de\n.text:00000000004095e1\n.text:00000000004095e5\n.text:00000000004095e9\n.text:00000000004095ec\n.text:00000000004095f0\n.text:00000000004095f5\n.text:00000000004095f9\n.text:00000000004095fb\n.text:00000000004095fe\n.text:0000000000409600\n.text:0000000000409603\n.text:0000000000409606\n.text:0000000000409609\n.text:000000000040960c\n.text:0000000000409611\n.text:0000000000409613\n.text:0000000000409615\n.text:0000000000409617\n.text:000000000040961b\n.text:000000000040961f\n.text:0000000000409624\n.text:0000000000409629\n.text:000000000040962c\n.text:0000000000409630\n.text:0000000000409634\n.text:0000000000409638\n.text:000000000040963d\n.text:0000000000409642\n.text:0000000000409646\n.text:0000000000409649\n.text:000000000040964a\n.text:000000000040964c\n.text:000000000040964e\n.text:0000000000409650\n.text:0000000000409651\n.text:0000000000409652\n.text:0000000000409655\n.text:0000000000409657\n.text:000000000040965d\n.text:0000000000409663\n.text:0000000000409668\n.text:000000000040966d\n.text:0000000000409670\n.text:0000000000409673\n.text:0000000000409677\n.text:000000000040967b\n.text:000000000040967e\n.text:0000000000409681\n.text:0000000000409682\n.text:0000000000409684\n.text:0000000000409686\n.text:0000000000409688\n.text:0000000000409689\n'
p3023
tp3024
sS'pthread_cond_wait'
p3025
(S'\n__stdcall pthread_cond_wait(pthread_cond_t * __cond, pthread_mutex_t * __mutex)\n'
p3026
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint pthread_cond_wait(pthread_cond_t *__cond,pthread_mutex_t *__mutex)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_pthread_cond_wait_0061a0e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p3027
S'JMP qword ptr [0x0061a0e0]\n'
p3028
S'ff 25 7a 7b 21 00\n'
p3029
S'.plt:0000000000402560\n'
p3030
tp3031
sS'unlink'
p3032
(S'\n__stdcall unlink(char * __name)\n'
p3033
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint unlink(char *__name)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_unlink_0061a050)();\u000a  return iVar1;\u000a}\u000a\u000a
p3034
S'JMP qword ptr [0x0061a050]\n'
p3035
S'ff 25 0a 7c 21 00\n'
p3036
S'.plt:0000000000402440\n'
p3037
tp3038
sS'move_fd_or_die'
p3039
(S'\n__stdcall move_fd_or_die()\n'
p3040
V\u000avoid move_fd_or_die(int iParm1,int iParm2)\u000a\u000a{\u000a  if (iParm1 == iParm2) {\u000a    return;\u000a  }\u000a  dup2(iParm1,iParm2);\u000a  close(iParm1);\u000a  return;\u000a}\u000a\u000a
p3041
S'PUSH RBX\nMOV EBX,EDI\nCMP EBX,ESI\nJNZ 0x00407b69\nPOP RBX\nRET\nMOV EDI,EBX\nCALL 0x00402610\nMOV EDI,EBX\nPOP RBX\nJMP 0x004026c0\n'
p3042
S'53\n89 fb\n39 f3\n75 02\n5b\nc3\n89 df\ne8 a0 aa ff ff\n89 df\n5b\ne9 48 ab ff ff\n'
p3043
S'.text:0000000000407b60\n.text:0000000000407b61\n.text:0000000000407b63\n.text:0000000000407b65\n.text:0000000000407b67\n.text:0000000000407b68\n.text:0000000000407b69\n.text:0000000000407b6b\n.text:0000000000407b70\n.text:0000000000407b72\n.text:0000000000407b73\n'
p3044
tp3045
sS'rotl_sz'
p3046
(S'\n__stdcall rotl_sz(size_t x)\n'
p3047
V\u000asize_t rotl_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p3048
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p3049
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p3050
S'.text:0000000000410cf0\n.text:0000000000410cf2\n.text:0000000000410cf5\n.text:0000000000410cf8\n'
p3051
tp3052
sS'readtokens0_init'
p3053
(S'\n__stdcall readtokens0_init(Tokens * t)\n'
p3054
V\u000avoid readtokens0_init(Tokens *t)\u000a\u000a{\u000a  *(undefined4 *)&t->n_tok = 0;\u000a  *(undefined4 *)((long)&t->n_tok + 4) = 0;\u000a  *(undefined4 *)&t->tok = 0;\u000a  *(undefined4 *)((long)&t->tok + 4) = 0;\u000a  t->tok_len = (size_t *)0x0;\u000a  _obstack_begin(&t->o_data,0,0,malloc,free);\u000a  _obstack_begin(&t->o_tok,0,0,malloc,free);\u000a  _obstack_begin(&t->o_tok_len,0,0,malloc,free);\u000a  return;\u000a}\u000a\u000a
p3055
S'PUSH RBX\nMOV RBX,RDI\nLEA RDI,[RBX + 0x18]\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX],XMM0\nMOV qword ptr [RBX + 0x10],0x0\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x402860\nMOV R8D,0x402400\nCALL 0x00410990\nLEA RDI,[RBX + 0x70]\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x402860\nMOV R8D,0x402400\nCALL 0x00410990\nADD RBX,0xc8\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x402860\nMOV R8D,0x402400\nMOV RDI,RBX\nPOP RBX\nJMP 0x00410990\n'
p3056
S'53\n48 89 fb\n48 8d 7b 18\n0f 57 c0\n0f 11 03\n48 c7 43 10 00 00 00 00\n31 f6\n31 d2\nb9 60 28 40 00\n41 b8 00 24 40 00\ne8 06 1b 00 00\n48 8d 7b 70\n31 f6\n31 d2\nb9 60 28 40 00\n41 b8 00 24 40 00\ne8 ee 1a 00 00\n48 81 c3 c8 00 00 00\n31 f6\n31 d2\nb9 60 28 40 00\n41 b8 00 24 40 00\n48 89 df\n5b\ne9 cf 1a 00 00\n'
p3057
S'.text:000000000040ee60\n.text:000000000040ee61\n.text:000000000040ee64\n.text:000000000040ee68\n.text:000000000040ee6b\n.text:000000000040ee6e\n.text:000000000040ee76\n.text:000000000040ee78\n.text:000000000040ee7a\n.text:000000000040ee7f\n.text:000000000040ee85\n.text:000000000040ee8a\n.text:000000000040ee8e\n.text:000000000040ee90\n.text:000000000040ee92\n.text:000000000040ee97\n.text:000000000040ee9d\n.text:000000000040eea2\n.text:000000000040eea9\n.text:000000000040eeab\n.text:000000000040eead\n.text:000000000040eeb2\n.text:000000000040eeb8\n.text:000000000040eebb\n.text:000000000040eebc\n'
p3058
tp3059
sS'__do_global_dtors_aux'
p3060
(S'\n__stdcall __do_global_dtors_aux()\n'
p3061
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p3062
S'CMP byte ptr [0x0061a5a8],0x0\nJNZ 0x00402c0a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00402b70\nPOP RBP\nMOV byte ptr [0x0061a5a8],0x1\nRET\n'
p3063
S'80 3d b1 79 21 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 9e 79 21 00 01\nf3 c3\n'
p3064
S'.text:0000000000402bf0\n.text:0000000000402bf7\n.text:0000000000402bf9\n.text:0000000000402bfa\n.text:0000000000402bfd\n.text:0000000000402c02\n.text:0000000000402c03\n.text:0000000000402c0a\n'
p3065
tp3066
sS'c_isprint'
p3067
(S'\n__stdcall c_isprint()\n'
p3068
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p3069
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p3070
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p3071
S'.text:0000000000410e40\n.text:0000000000410e43\n.text:0000000000410e46\n.text:0000000000410e49\n'
p3072
tp3073
sS'xmemcoll0'
p3074
(S'\n__stdcall xmemcoll0(char * s1, size_t s1size, char * s2, size_t s2size)\n'
p3075
V\u000aint xmemcoll0(char *s1,size_t s1size,char *s2,size_t s2size)\u000a\u000a{\u000a  int iVar1;\u000a  uint *puVar2;\u000a  \u000a  iVar1 = memcoll0(s1,s1size,s2,s2size);\u000a  puVar2 = (uint *)__errno_location();\u000a  if (*puVar2 != 0) {\u000a    collate_error((char *)(ulong)*puVar2,(size_t)s1,(char *)(s1size - 1),(size_t)s2);\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p3076
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R15,RCX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R12,RDI\nCALL 0x00411440\nMOV EBP,EAX\nCALL 0x00402430\nMOV EDI,dword ptr [RAX]\nTEST EDI,EDI\nJZ 0x0040fe9d\nDEC RBX\nDEC R15\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R14\nMOV R8,R15\nCALL 0x0040fd90\nMOV EAX,EBP\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p3077
S'55\n41 57\n41 56\n41 54\n53\n49 89 cf\n49 89 d6\n48 89 f3\n49 89 fc\ne8 c7 15 00 00\n89 c5\ne8 b0 25 ff ff\n8b 38\n85 ff\n74 17\n48 ff cb\n49 ff cf\n4c 89 e6\n48 89 da\n4c 89 f1\n4d 89 f8\ne8 f3 fe ff ff\n89 e8\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p3078
S'.text:000000000040fe60\n.text:000000000040fe61\n.text:000000000040fe63\n.text:000000000040fe65\n.text:000000000040fe67\n.text:000000000040fe68\n.text:000000000040fe6b\n.text:000000000040fe6e\n.text:000000000040fe71\n.text:000000000040fe74\n.text:000000000040fe79\n.text:000000000040fe7b\n.text:000000000040fe80\n.text:000000000040fe82\n.text:000000000040fe84\n.text:000000000040fe86\n.text:000000000040fe89\n.text:000000000040fe8c\n.text:000000000040fe8f\n.text:000000000040fe92\n.text:000000000040fe95\n.text:000000000040fe98\n.text:000000000040fe9d\n.text:000000000040fe9f\n.text:000000000040fea0\n.text:000000000040fea2\n.text:000000000040fea4\n.text:000000000040fea6\n.text:000000000040fea7\n'
p3079
tp3080
sS'rpl_nanosleep'
p3081
(S'\n__stdcall rpl_nanosleep(timespec * requested_delay, timespec * remaining_delay)\n'
p3082
V\u000aint rpl_nanosleep(timespec *requested_delay,timespec *remaining_delay)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  long lVar3;\u000a  timespec local_28;\u000a  \u000a  if ((ulong)requested_delay->tv_nsec < 1000000000) {\u000a    lVar3 = requested_delay->tv_sec;\u000a    local_28.tv_nsec = requested_delay->tv_nsec;\u000a    do {\u000a      if (lVar3 < 0x1fa401) {\u000a        local_28.tv_sec = lVar3;\u000a        iVar1 = nanosleep(&local_28,(timespec *)remaining_delay);\u000a        return iVar1;\u000a      }\u000a      local_28.tv_sec = 0x1fa400;\u000a      iVar1 = nanosleep(&local_28,(timespec *)remaining_delay);\u000a      lVar3 = lVar3 + 0xffe05c00;\u000a      local_28.tv_nsec = 0;\u000a    } while (iVar1 == 0);\u000a    if (remaining_delay != (timespec *)0x0) {\u000a      remaining_delay->tv_sec = remaining_delay->tv_sec + lVar3;\u000a    }\u000a  }\u000a  else {\u000a    piVar2 = __errno_location();\u000a    *piVar2 = 0x16;\u000a    iVar1 = -1;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p3083
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RSI\nCMP qword ptr [RDI + 0x8],0x3b9aca00\nJC 0x00410918\nCALL 0x00402430\nMOV dword ptr [RAX],0x16\nMOV EAX,0xffffffff\nJMP 0x0041097a\nMOV RBX,qword ptr [RDI]\nMOV RCX,qword ptr [RDI + 0x8]\nMOV R14,RSP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV qword ptr [RSP + 0x8],RCX\nCMP RBX,0x1fa401\nJL 0x0041096b\nMOV qword ptr [RSP],0x1fa400\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00402630\nADD RBX,0xffe05c00\nTEST EAX,EAX\nMOV ECX,0x0\nJZ 0x00410930\nTEST R15,R15\nJZ 0x0041097a\nADD qword ptr [R15],RBX\nJMP 0x0041097a\nMOV qword ptr [RSP],RBX\nMOV RDI,RSP\nMOV RSI,R15\nCALL 0x00402630\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p3084
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 f7\n48 81 7f 08 00 ca 9a 3b\n72 12\ne8 25 1b ff ff\nc7 00 16 00 00 00\nb8 ff ff ff ff\neb 62\n48 8b 1f\n48 8b 4f 08\n49 89 e6\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 4c 24 08\n48 81 fb 01 a4 1f 00\n7c 2d\n48 c7 04 24 00 a4 1f 00\n4c 89 f7\n4c 89 fe\ne8 df 1c ff ff\n48 81 c3 00 5c e0 ff\n85 c0\nb9 00 00 00 00\n74 cf\n4d 85 ff\n74 14\n49 01 1f\neb 0f\n48 89 1c 24\n48 89 e7\n4c 89 fe\ne8 b6 1c ff ff\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p3085
S'.text:00000000004108f0\n.text:00000000004108f2\n.text:00000000004108f4\n.text:00000000004108f5\n.text:00000000004108f9\n.text:00000000004108fc\n.text:0000000000410904\n.text:0000000000410906\n.text:000000000041090b\n.text:0000000000410911\n.text:0000000000410916\n.text:0000000000410918\n.text:000000000041091b\n.text:000000000041091f\n.text:0000000000410922\n.text:0000000000410930\n.text:0000000000410935\n.text:000000000041093c\n.text:000000000041093e\n.text:0000000000410946\n.text:0000000000410949\n.text:000000000041094c\n.text:0000000000410951\n.text:0000000000410958\n.text:000000000041095a\n.text:000000000041095f\n.text:0000000000410961\n.text:0000000000410964\n.text:0000000000410966\n.text:0000000000410969\n.text:000000000041096b\n.text:000000000041096f\n.text:0000000000410972\n.text:0000000000410975\n.text:000000000041097a\n.text:000000000041097e\n.text:000000000041097f\n.text:0000000000410981\n.text:0000000000410983\n'
p3086
tp3087
sS'_fini'
p3088
(S'\n__stdcall _fini()\n'
p3089
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p3090
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p3091
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p3092
S'.fini:00000000004115e0\n.fini:00000000004115e4\n.fini:00000000004115e8\n'
p3093
tp3094
sS'getpid'
p3095
(S'\n__stdcall getpid()\n'
p3096
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t getpid(void)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getpid_0061a0c8)();\u000a  return _Var1;\u000a}\u000a\u000a
p3097
S'JMP qword ptr [0x0061a0c8]\n'
p3098
S'ff 25 92 7b 21 00\n'
p3099
S'.plt:0000000000402530\n'
p3100
tp3101
s.