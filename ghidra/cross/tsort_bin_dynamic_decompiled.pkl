(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x607e08]\nPUSH RBP\nLEA RBP,[0x607e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401218\nTEST RBP,RBP\nJZ 0x00404ed6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00404ec0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 76 2f 20 00\n55\n48 8d 2d 76 2f 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 67 c3 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000404e80\n.text:0000000000404e82\n.text:0000000000404e84\n.text:0000000000404e87\n.text:0000000000404e89\n.text:0000000000404e8b\n.text:0000000000404e92\n.text:0000000000404e93\n.text:0000000000404e9a\n.text:0000000000404e9b\n.text:0000000000404e9e\n.text:0000000000404ea1\n.text:0000000000404ea4\n.text:0000000000404ea8\n.text:0000000000404eac\n.text:0000000000404eb1\n.text:0000000000404eb4\n.text:0000000000404eb6\n.text:0000000000404eb8\n.text:0000000000404ec0\n.text:0000000000404ec3\n.text:0000000000404ec6\n.text:0000000000404ec9\n.text:0000000000404ecd\n.text:0000000000404ed1\n.text:0000000000404ed4\n.text:0000000000404ed6\n.text:0000000000404eda\n.text:0000000000404edb\n.text:0000000000404edc\n.text:0000000000404ede\n.text:0000000000404ee0\n.text:0000000000404ee2\n.text:0000000000404ee4\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00608140)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x00608140]\n'
p11
S'ff 25 aa 6c 20 00\n'
p12
S'.plt:0000000000401490\n'
p13
tp14
sS'c_isdigit'
p15
(S'\n__stdcall c_isdigit()\n'
p16
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p17
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p18
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p19
S'.text:0000000000404a10\n.text:0000000000404a13\n.text:0000000000404a16\n.text:0000000000404a19\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_004059eb,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x4042c7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x404348;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x4043dc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00404158\nMOV EDX,0x4059d8\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401550\nJMP 0x0040416d\nMOV EDX,0x4059e4\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401550\nXOR EDI,EDI\nMOV ESI,0x4059eb\nMOV EDX,0x5\nCALL 0x00401310\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x405cc0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401550\nXOR EDI,EDI\nMOV ESI,0x4059ef\nMOV EDX,0x5\nCALL 0x00401310\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401400\nCMP R12,0x9\nJA 0x004041f6\nJMP qword ptr [0x405988 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x405aba\nMOV EDX,0x5\nCALL 0x00401310\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401550\nXOR EDI,EDI\nMOV ESI,0x405bf9\nMOV EDX,0x5\nCALL 0x00401310\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401550\nADD RSP,0x38\nJMP 0x00404467\nXOR EDI,EDI\nMOV ESI,0x405aca\nMOV EDX,0x5\nCALL 0x00401310\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401550\nXOR EDI,EDI\nMOV ESI,0x405ae1\nMOV EDX,0x5\nCALL 0x00401310\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401550\nXOR EDI,EDI\nMOV ESI,0x405afd\nMOV EDX,0x5\nCALL 0x00401310\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401550\nADD RSP,0x18\nJMP 0x00404467\nXOR EDI,EDI\nMOV ESI,0x405b1d\nMOV EDX,0x5\nCALL 0x00401310\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401550\nADD RSP,0x18\nJMP 0x00404467\nXOR EDI,EDI\nMOV ESI,0x405b41\nMOV EDX,0x5\nCALL 0x00401310\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401550\nADD RSP,0x28\nJMP 0x00404467\nXOR EDI,EDI\nMOV ESI,0x405b69\nMOV EDX,0x5\nCALL 0x00401310\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401550\nADD RSP,0x28\nJMP 0x00404467\nXOR EDI,EDI\nMOV ESI,0x405b95\nMOV EDX,0x5\nCALL 0x00401310\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401550\nADD RSP,0x38\nJMP 0x00404467\nXOR EDI,EDI\nMOV ESI,0x405bc5\nMOV EDX,0x5\nCALL 0x00401310\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401550\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401260\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba d8 59 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 fa d3 ff ff\neb 15\nba e4 59 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 e3 d3 ff ff\n31 ff\nbe eb 59 40 00\nba 05 00 00 00\ne8 92 d1 ff ff\n48 89 c1\nbe 01 00 00 00\nba c0 5c 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 b5 d3 ff ff\n31 ff\nbe ef 59 40 00\nba 05 00 00 00\ne8 64 d1 ff ff\n48 89 c7\n4c 89 f6\ne8 49 d2 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 88 59 40 00\n31 ff\nbe ba 5a 40 00\nba 05 00 00 00\ne8 3a d1 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 5a d3 ff ff\n31 ff\nbe f9 5b 40 00\nba 05 00 00 00\ne8 09 d1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 11 d3 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe ca 5a 40 00\nba 05 00 00 00\ne8 b7 d0 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 d3 d2 ff ff\n31 ff\nbe e1 5a 40 00\nba 05 00 00 00\ne8 82 d0 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 9a d2 ff ff\n31 ff\nbe fd 5a 40 00\nba 05 00 00 00\ne8 49 d0 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 64 d2 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 1d 5b 40 00\nba 05 00 00 00\ne8 0a d0 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 22 d2 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 41 5b 40 00\nba 05 00 00 00\ne8 c8 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 d8 d1 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 69 5b 40 00\nba 05 00 00 00\ne8 7e cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 8e d1 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 95 5b 40 00\nba 05 00 00 00\ne8 34 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 3c d1 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe c5 5b 40 00\nba 05 00 00 00\ne8 e5 ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 ed d0 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 ec cd ff ff\n'
p26
S'.text:0000000000404120\n.text:0000000000404122\n.text:0000000000404124\n.text:0000000000404126\n.text:0000000000404127\n.text:0000000000404128\n.text:000000000040412b\n.text:000000000040412e\n.text:0000000000404131\n.text:0000000000404134\n.text:0000000000404137\n.text:000000000040413a\n.text:000000000040413f\n.text:0000000000404142\n.text:0000000000404144\n.text:0000000000404149\n.text:000000000040414b\n.text:000000000040414e\n.text:0000000000404151\n.text:0000000000404156\n.text:0000000000404158\n.text:000000000040415d\n.text:000000000040415f\n.text:0000000000404162\n.text:0000000000404165\n.text:0000000000404168\n.text:000000000040416d\n.text:000000000040416f\n.text:0000000000404174\n.text:0000000000404179\n.text:000000000040417e\n.text:0000000000404181\n.text:0000000000404186\n.text:000000000040418b\n.text:0000000000404191\n.text:0000000000404193\n.text:0000000000404196\n.text:000000000040419b\n.text:000000000040419d\n.text:00000000004041a2\n.text:00000000004041a7\n.text:00000000004041ac\n.text:00000000004041af\n.text:00000000004041b2\n.text:00000000004041b7\n.text:00000000004041bb\n.text:00000000004041bd\n.text:00000000004041c5\n.text:00000000004041c7\n.text:00000000004041cc\n.text:00000000004041d1\n.text:00000000004041d6\n.text:00000000004041d9\n.text:00000000004041dc\n.text:00000000004041e1\n.text:00000000004041e3\n.text:00000000004041e6\n.text:00000000004041ea\n.text:00000000004041eb\n.text:00000000004041ed\n.text:00000000004041ef\n.text:00000000004041f1\n.text:00000000004041f6\n.text:00000000004041f8\n.text:00000000004041fd\n.text:0000000000404202\n.text:0000000000404207\n.text:000000000040420a\n.text:000000000040420d\n.text:0000000000404211\n.text:0000000000404215\n.text:000000000040421a\n.text:000000000040421f\n.text:0000000000404222\n.text:0000000000404226\n.text:000000000040422a\n.text:000000000040422e\n.text:0000000000404232\n.text:0000000000404236\n.text:000000000040423a\n.text:000000000040423f\n.text:0000000000404243\n.text:0000000000404248\n.text:000000000040424a\n.text:000000000040424f\n.text:0000000000404254\n.text:0000000000404259\n.text:000000000040425c\n.text:000000000040425f\n.text:0000000000404263\n.text:0000000000404268\n.text:000000000040426a\n.text:000000000040426d\n.text:0000000000404271\n.text:0000000000404272\n.text:0000000000404274\n.text:0000000000404276\n.text:0000000000404278\n.text:000000000040427d\n.text:000000000040427f\n.text:0000000000404284\n.text:0000000000404289\n.text:000000000040428e\n.text:0000000000404291\n.text:0000000000404294\n.text:0000000000404298\n.text:000000000040429c\n.text:00000000004042a1\n.text:00000000004042a3\n.text:00000000004042a6\n.text:00000000004042aa\n.text:00000000004042ab\n.text:00000000004042ad\n.text:00000000004042af\n.text:00000000004042b1\n.text:00000000004042b6\n.text:00000000004042b8\n.text:00000000004042bd\n.text:00000000004042c2\n.text:00000000004042c7\n.text:00000000004042ca\n.text:00000000004042cd\n.text:00000000004042d1\n.text:00000000004042d5\n.text:00000000004042d9\n.text:00000000004042de\n.text:00000000004042e0\n.text:00000000004042e3\n.text:00000000004042e7\n.text:00000000004042ec\n.text:00000000004042f0\n.text:00000000004042f5\n.text:00000000004042f7\n.text:00000000004042fc\n.text:0000000000404301\n.text:0000000000404306\n.text:0000000000404309\n.text:000000000040430c\n.text:0000000000404310\n.text:0000000000404314\n.text:0000000000404319\n.text:000000000040431e\n.text:0000000000404321\n.text:0000000000404325\n.text:0000000000404329\n.text:000000000040432e\n.text:0000000000404332\n.text:0000000000404337\n.text:0000000000404339\n.text:000000000040433e\n.text:0000000000404343\n.text:0000000000404348\n.text:000000000040434b\n.text:000000000040434e\n.text:0000000000404352\n.text:0000000000404356\n.text:000000000040435a\n.text:000000000040435f\n.text:0000000000404364\n.text:0000000000404367\n.text:000000000040436b\n.text:000000000040436f\n.text:0000000000404373\n.text:0000000000404378\n.text:000000000040437c\n.text:0000000000404381\n.text:0000000000404383\n.text:0000000000404388\n.text:000000000040438d\n.text:0000000000404392\n.text:0000000000404395\n.text:0000000000404398\n.text:000000000040439c\n.text:00000000004043a0\n.text:00000000004043a5\n.text:00000000004043aa\n.text:00000000004043ad\n.text:00000000004043b1\n.text:00000000004043b5\n.text:00000000004043b9\n.text:00000000004043bd\n.text:00000000004043c2\n.text:00000000004043c6\n.text:00000000004043cb\n.text:00000000004043cd\n.text:00000000004043d2\n.text:00000000004043d7\n.text:00000000004043dc\n.text:00000000004043df\n.text:00000000004043e2\n.text:00000000004043e6\n.text:00000000004043ea\n.text:00000000004043ee\n.text:00000000004043f3\n.text:00000000004043f8\n.text:00000000004043fb\n.text:00000000004043ff\n.text:0000000000404403\n.text:0000000000404407\n.text:000000000040440b\n.text:000000000040440f\n.text:0000000000404414\n.text:0000000000404418\n.text:000000000040441a\n.text:000000000040441c\n.text:0000000000404421\n.text:0000000000404426\n.text:000000000040442b\n.text:000000000040442e\n.text:0000000000404431\n.text:0000000000404435\n.text:0000000000404439\n.text:000000000040443e\n.text:0000000000404443\n.text:0000000000404446\n.text:000000000040444a\n.text:000000000040444e\n.text:0000000000404452\n.text:0000000000404456\n.text:000000000040445a\n.text:000000000040445e\n.text:0000000000404463\n.text:0000000000404467\n.text:0000000000404468\n.text:000000000040446a\n.text:000000000040446c\n.text:000000000040446e\n.text:000000000040446f\n'
p27
tp28
sS'usage'
p29
(S'\n__stdcall usage()\n'
p30
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,\u000a                      "Usage: %s [OPTION] [FILE]\u005cnWrite totally ordered list consistent with the partial ordering in FILE.\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    emit_stdin_note();\u000a    __s = (char *)dcgettext(0,&DAT_004051ef,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p31
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401736\nXOR EDI,EDI\nMOV ESI,0x404f44\nMOV EDX,0x5\nCALL 0x00401310\nMOV RCX,RAX\nMOV RDX,qword ptr [0x006082e0]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004014e0\nCALL 0x00401790\nXOR EDI,EDI\nMOV ESI,0x4051ef\nMOV EDX,0x5\nCALL 0x00401310\nMOV RSI,qword ptr [0x00608248]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x404fa8\nMOV EDX,0x5\nCALL 0x00401310\nMOV RSI,qword ptr [0x00608248]\nMOV RDI,RAX\nCALL 0x00401400\nXOR EDI,EDI\nMOV ESI,0x404fd5\nMOV EDX,0x5\nCALL 0x00401310\nMOV RSI,qword ptr [0x00608248]\nMOV RDI,RAX\nCALL 0x00401400\nCALL 0x004017c0\nMOV EDI,EBX\nCALL 0x00401530\nCALL 0x00401750\nMOV EDI,EBX\nCALL 0x00401530\n'
p32
S'53\n89 fb\n85 db\n0f 85 9b 00 00 00\n31 ff\nbe 44 4f 40 00\nba 05 00 00 00\ne8 64 fc ff ff\n48 89 c1\n48 8b 15 2a 6c 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 1b fe ff ff\ne8 c6 00 00 00\n31 ff\nbe ef 51 40 00\nba 05 00 00 00\ne8 35 fc ff ff\n48 8b 35 66 6b 20 00\n48 89 c7\ne8 16 fd ff ff\n31 ff\nbe a8 4f 40 00\nba 05 00 00 00\ne8 15 fc ff ff\n48 8b 35 46 6b 20 00\n48 89 c7\ne8 f6 fc ff ff\n31 ff\nbe d5 4f 40 00\nba 05 00 00 00\ne8 f5 fb ff ff\n48 8b 35 26 6b 20 00\n48 89 c7\ne8 d6 fc ff ff\ne8 91 00 00 00\n89 df\ne8 fa fd ff ff\ne8 15 00 00 00\n89 df\ne8 ee fd ff ff\n'
p33
S'.text:0000000000401690\n.text:0000000000401691\n.text:0000000000401693\n.text:0000000000401695\n.text:000000000040169b\n.text:000000000040169d\n.text:00000000004016a2\n.text:00000000004016a7\n.text:00000000004016ac\n.text:00000000004016af\n.text:00000000004016b6\n.text:00000000004016bb\n.text:00000000004016bd\n.text:00000000004016c0\n.text:00000000004016c5\n.text:00000000004016ca\n.text:00000000004016cc\n.text:00000000004016d1\n.text:00000000004016d6\n.text:00000000004016db\n.text:00000000004016e2\n.text:00000000004016e5\n.text:00000000004016ea\n.text:00000000004016ec\n.text:00000000004016f1\n.text:00000000004016f6\n.text:00000000004016fb\n.text:0000000000401702\n.text:0000000000401705\n.text:000000000040170a\n.text:000000000040170c\n.text:0000000000401711\n.text:0000000000401716\n.text:000000000040171b\n.text:0000000000401722\n.text:0000000000401725\n.text:000000000040172a\n.text:000000000040172f\n.text:0000000000401731\n.text:0000000000401736\n.text:000000000040173b\n.text:000000000040173d\n'
p34
tp35
sS'quoting_options_from_style'
p36
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p37
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p38
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x004037bd\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401260\n'
p39
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 9e da ff ff\n'
p40
S'.text:0000000000403770\n.text:0000000000403774\n.text:0000000000403777\n.text:000000000040377c\n.text:0000000000403781\n.text:0000000000403785\n.text:000000000040378d\n.text:0000000000403790\n.text:0000000000403792\n.text:0000000000403794\n.text:0000000000403798\n.text:000000000040379b\n.text:000000000040379f\n.text:00000000004037a4\n.text:00000000004037a9\n.text:00000000004037ad\n.text:00000000004037b1\n.text:00000000004037b5\n.text:00000000004037b8\n.text:00000000004037bc\n.text:00000000004037bd\n'
p41
tp42
sS'rpl_fclose'
p43
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p44
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_004048b9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_004048b9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p45
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401450\nTEST EAX,EAX\nJS 0x004048b9\nMOV RDI,RBX\nCALL 0x004014a0\nTEST EAX,EAX\nJZ 0x00404887\nMOV RDI,RBX\nCALL 0x00401450\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401380\nCMP RAX,-0x1\nJZ 0x004048b9\nMOV RDI,RBX\nCALL 0x004048d0\nTEST EAX,EAX\nJZ 0x004048b9\nCALL 0x00401270\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004012f0\nTEST EBP,EBP\nJZ 0x004048b2\nCALL 0x00401270\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004012f0\n'
p46
S'55\n53\n50\n48 89 fb\ne8 f5 cb ff ff\n85 c0\n78 5a\n48 89 df\ne8 39 cc ff ff\n85 c0\n74 1c\n48 89 df\ne8 dd cb ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 ff ca ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 d8 c9 ff ff\n8b 28\n48 89 df\ne8 4e ca ff ff\n85 ed\n74 0c\ne8 c5 c9 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 29 ca ff ff\n'
p47
S'.text:0000000000404850\n.text:0000000000404851\n.text:0000000000404852\n.text:0000000000404853\n.text:0000000000404856\n.text:000000000040485b\n.text:000000000040485d\n.text:000000000040485f\n.text:0000000000404862\n.text:0000000000404867\n.text:0000000000404869\n.text:000000000040486b\n.text:000000000040486e\n.text:0000000000404873\n.text:0000000000404875\n.text:000000000040487a\n.text:000000000040487c\n.text:0000000000404881\n.text:0000000000404885\n.text:0000000000404887\n.text:000000000040488a\n.text:000000000040488f\n.text:0000000000404891\n.text:0000000000404893\n.text:0000000000404898\n.text:000000000040489a\n.text:000000000040489d\n.text:00000000004048a2\n.text:00000000004048a4\n.text:00000000004048a6\n.text:00000000004048ab\n.text:00000000004048ad\n.text:00000000004048b2\n.text:00000000004048b6\n.text:00000000004048b7\n.text:00000000004048b8\n.text:00000000004048b9\n.text:00000000004048bc\n.text:00000000004048c0\n.text:00000000004048c1\n.text:00000000004048c2\n'
p48
tp49
sS'strcpy'
p50
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p51
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00608048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x00608048]\n'
p53
S'ff 25 a2 6d 20 00\n'
p54
S'.plt:00000000004012a0\n'
p55
tp56
sS'strncmp'
p57
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00608038)();\u000a  return iVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x00608038]\n'
p60
S'ff 25 b2 6d 20 00\n'
p61
S'.plt:0000000000401280\n'
p62
tp63
sS'xnrealloc'
p64
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p65
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p66
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00404674\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00404680\nPUSH RAX\nCALL 0x004047d0\n'
p67
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p68
S'.text:0000000000404660\n.text:0000000000404663\n.text:0000000000404666\n.text:0000000000404669\n.text:000000000040466b\n.text:000000000040466f\n.text:0000000000404672\n.text:0000000000404674\n.text:0000000000404675\n'
p69
tp70
sS'quote'
p71
(S'\n__stdcall quote(char * arg)\n'
p72
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p73
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403a20\n'
p74
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p75
S'.text:0000000000403a30\n.text:0000000000403a33\n.text:0000000000403a35\n.text:0000000000403a38\n'
p76
tp77
sS'emit_bug_reporting_address'
p78
(S'\n__stdcall emit_bug_reporting_address()\n'
p79
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p80
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x405c35\nMOV EDX,0x5\nCALL 0x00401310\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x405c4a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004014e0\nXOR EDI,EDI\nMOV ESI,0x405c60\nMOV EDX,0x5\nCALL 0x00401310\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40511d\nMOV ECX,0x40512b\nXOR EAX,EAX\nCALL 0x004014e0\nXOR EDI,EDI\nMOV ESI,0x405c74\nMOV EDX,0x5\nCALL 0x00401310\nMOV RSI,qword ptr [0x00608248]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401400\n'
p81
S'50\n31 ff\nbe 35 5c 40 00\nba 05 00 00 00\ne8 5e cd ff ff\n48 89 c1\nbf 01 00 00 00\nba 4a 5c 40 00\n31 c0\n48 89 ce\ne8 17 cf ff ff\n31 ff\nbe 60 5c 40 00\nba 05 00 00 00\ne8 36 cd ff ff\n48 89 c6\nbf 01 00 00 00\nba 1d 51 40 00\nb9 2b 51 40 00\n31 c0\ne8 ed ce ff ff\n31 ff\nbe 74 5c 40 00\nba 05 00 00 00\ne8 0c cd ff ff\n48 8b 35 3d 3c 20 00\n48 89 c7\n58\ne9 ec cd ff ff\n'
p82
S'.text:00000000004045a0\n.text:00000000004045a1\n.text:00000000004045a3\n.text:00000000004045a8\n.text:00000000004045ad\n.text:00000000004045b2\n.text:00000000004045b5\n.text:00000000004045ba\n.text:00000000004045bf\n.text:00000000004045c1\n.text:00000000004045c4\n.text:00000000004045c9\n.text:00000000004045cb\n.text:00000000004045d0\n.text:00000000004045d5\n.text:00000000004045da\n.text:00000000004045dd\n.text:00000000004045e2\n.text:00000000004045e7\n.text:00000000004045ec\n.text:00000000004045ee\n.text:00000000004045f3\n.text:00000000004045f5\n.text:00000000004045fa\n.text:00000000004045ff\n.text:0000000000404604\n.text:000000000040460b\n.text:000000000040460e\n.text:000000000040460f\n'
p83
tp84
sS'clone_quoting_options'
p85
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p86
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p87
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401270\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x6082f0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00404780\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p88
S'55\n41 56\n53\n48 89 fb\ne8 74 ec ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 f0 82 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 65 21 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p89
S'.text:00000000004025f0\n.text:00000000004025f1\n.text:00000000004025f3\n.text:00000000004025f4\n.text:00000000004025f7\n.text:00000000004025fc\n.text:00000000004025ff\n.text:0000000000402602\n.text:0000000000402605\n.text:000000000040260a\n.text:000000000040260e\n.text:0000000000402613\n.text:0000000000402616\n.text:000000000040261b\n.text:000000000040261e\n.text:000000000040261f\n.text:0000000000402621\n.text:0000000000402622\n'
p90
tp91
sS'xmalloc'
p92
(S'\n__stdcall xmalloc(size_t n)\n'
p93
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p94
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401460\nTEST RBX,RBX\nJZ 0x00404653\nTEST RAX,RAX\nJZ 0x00404655\nPOP RBX\nRET\nCALL 0x004047d0\n'
p95
S'53\n48 89 fb\ne8 17 ce ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p96
S'.text:0000000000404640\n.text:0000000000404641\n.text:0000000000404644\n.text:0000000000404649\n.text:000000000040464c\n.text:000000000040464e\n.text:0000000000404651\n.text:0000000000404653\n.text:0000000000404654\n.text:0000000000404655\n'
p97
tp98
sS'quotearg_char_mem'
p99
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p100
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p101
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x00608320]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x00608310]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00608300]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006082f0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00402650\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403540\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p102
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d b8 4a 20 00\n48 89 4c 24 30\n0f 10 05 9c 4a 20 00\n0f 29 44 24 20\n0f 10 05 80 4a 20 00\n0f 29 44 24 10\n0f 10 05 64 4a 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p103
S'.text:0000000000403850\n.text:0000000000403852\n.text:0000000000403854\n.text:0000000000403855\n.text:0000000000403859\n.text:000000000040385b\n.text:000000000040385e\n.text:0000000000403861\n.text:0000000000403868\n.text:000000000040386d\n.text:0000000000403874\n.text:0000000000403879\n.text:0000000000403880\n.text:0000000000403885\n.text:000000000040388c\n.text:0000000000403890\n.text:0000000000403893\n.text:0000000000403898\n.text:000000000040389b\n.text:000000000040389d\n.text:00000000004038a2\n.text:00000000004038a4\n.text:00000000004038a7\n.text:00000000004038aa\n.text:00000000004038ad\n.text:00000000004038b2\n.text:00000000004038b6\n.text:00000000004038b7\n.text:00000000004038b9\n.text:00000000004038bb\n'
p104
tp105
sS'c_isgraph'
p106
(S'\n__stdcall c_isgraph()\n'
p107
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p108
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p109
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p110
S'.text:0000000000404a20\n.text:0000000000404a23\n.text:0000000000404a26\n.text:0000000000404a29\n'
p111
tp112
sS'frame_dummy'
p113
(S'\n__stdcall frame_dummy()\n'
p114
V\u000a/* WARNING: Removing unreachable block (ram,0x0040167a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p115
S'MOV EDI,0x607e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401670\nJMP 0x00401600\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040166b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401600\n'
p116
S'bf 18 7e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p117
S'.text:0000000000401660\n.text:0000000000401665\n.text:0000000000401669\n.text:000000000040166b\n.text:0000000000401670\n.text:0000000000401675\n.text:0000000000401678\n.text:000000000040167a\n.text:000000000040167b\n.text:000000000040167e\n.text:0000000000401680\n.text:0000000000401681\n'
p118
tp119
sS'walk_tree'
p120
(S'\n__stdcall walk_tree(item * root, anon_subr__Bool_item_ptr * action)\n'
p121
V\u000avoid walk_tree(item *root,_Bool (*action)(item *))\u000a\u000a{\u000a  if (root->right != (item *)0x0) {\u000a    recurse_tree(root->right,action);\u000a  }\u000a  return;\u000a}\u000a\u000a
p122
S'MOV RDI,qword ptr [RDI + 0x10]\nTEST RDI,RDI\nJZ 0x00402013\nPUSH RAX\nCALL 0x00402160\nADD RSP,0x8\nRET\n'
p123
S'48 8b 7f 10\n48 85 ff\n74 0a\n50\ne8 51 01 00 00\n48 83 c4 08\nc3\n'
p124
S'.text:0000000000402000\n.text:0000000000402004\n.text:0000000000402007\n.text:0000000000402009\n.text:000000000040200a\n.text:000000000040200f\n.text:0000000000402013\n'
p125
tp126
sS'recurse_tree'
p127
(S'\n__stdcall recurse_tree(item * root, anon_subr__Bool_item_ptr * action)\n'
p128
V\u000a_Bool recurse_tree(item *root,_Bool (*action)(item *))\u000a\u000a{\u000a  _Bool _Var1;\u000a  undefined uVar2;\u000a  \u000a  if (root->left == (item *)0x0) {\u000a    if (root->right == (item *)0x0) {\u000a                    /* WARNING: Could not recover jumptable at 0x004021c1. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a      _Var1 = (*action)(root);\u000a      return _Var1;\u000a    }\u000a  }\u000a  else {\u000a    _Var1 = recurse_tree(root->left,action);\u000a    if (_Var1 != false) {\u000a      return true;\u000a    }\u000a  }\u000a  _Var1 = (*action)(root);\u000a  uVar2 = 1;\u000a  if ((_Var1 == false) &&\u000a     ((root->right == (item *)0x0 || (_Var1 = recurse_tree(root->right,action), _Var1 == false)))) {\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p129
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX + 0x8]\nTEST RDI,RDI\nJZ 0x00402184\nMOV RBP,RSI\nCALL 0x00402160\nMOV RSI,RBP\nMOV R14B,0x1\nTEST AL,AL\nJZ 0x0040218b\nJMP 0x004021b2\nCMP qword ptr [RBX + 0x10],0x0\nJZ 0x004021ba\nMOV RDI,RBX\nMOV RBP,RSI\nCALL RBP\nMOV R14B,0x1\nTEST AL,AL\nJNZ 0x004021b2\nMOV RDI,qword ptr [RBX + 0x10]\nTEST RDI,RDI\nMOV RSI,RBP\nJZ 0x004021af\nCALL 0x00402160\nTEST AL,AL\nJNZ 0x004021b2\nXOR R14D,R14D\nMOV EAX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP RSI\n'
p130
S'55\n41 56\n53\n48 89 fb\n48 8b 7b 08\n48 85 ff\n74 14\n48 89 f5\ne8 e8 ff ff ff\n48 89 ee\n41 b6 01\n84 c0\n74 09\neb 2e\n48 83 7b 10 00\n74 2f\n48 89 df\n48 89 f5\nff d5\n41 b6 01\n84 c0\n75 18\n48 8b 7b 10\n48 85 ff\n48 89 ee\n74 09\ne8 b5 ff ff ff\n84 c0\n75 03\n45 31 f6\n44 89 f0\n5b\n41 5e\n5d\nc3\n48 89 df\n5b\n41 5e\n5d\nff e6\n'
p131
S'.text:0000000000402160\n.text:0000000000402161\n.text:0000000000402163\n.text:0000000000402164\n.text:0000000000402167\n.text:000000000040216b\n.text:000000000040216e\n.text:0000000000402170\n.text:0000000000402173\n.text:0000000000402178\n.text:000000000040217b\n.text:000000000040217e\n.text:0000000000402180\n.text:0000000000402182\n.text:0000000000402184\n.text:0000000000402189\n.text:000000000040218b\n.text:000000000040218e\n.text:0000000000402191\n.text:0000000000402193\n.text:0000000000402196\n.text:0000000000402198\n.text:000000000040219a\n.text:000000000040219e\n.text:00000000004021a1\n.text:00000000004021a4\n.text:00000000004021a6\n.text:00000000004021ab\n.text:00000000004021ad\n.text:00000000004021af\n.text:00000000004021b2\n.text:00000000004021b5\n.text:00000000004021b6\n.text:00000000004021b8\n.text:00000000004021b9\n.text:00000000004021ba\n.text:00000000004021bd\n.text:00000000004021be\n.text:00000000004021c0\n.text:00000000004021c1\n'
p132
tp133
sS'quotearg_buffer_restyled'
p134
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p135
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_004027ec_caseD_7;\u000a  case 2:\u000a    goto switchD_004027ec_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_004027ec_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_004027ec_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_004027ec_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_004027ec_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_004027ec_caseD_7;\u000aswitchD_004027ec_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_004027ec_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_004027ec_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_004032b0;\u000aLAB_004029d0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_004032b9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_004032c8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_004029db:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_00402a1f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_00402a1f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_004032c8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_004031f5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00403100;\u000a    }\u000a    goto LAB_004032c8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040322a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_004032c8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403259;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00402d18;\u000a  case '\u005ca':\u000a    goto joined_r0x00402c08;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00402c08;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00402a36_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00402c08;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00402c08;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00402a36_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00402c08:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040316e;\u000a    }\u000a    goto LAB_004032c8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_004032c8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_004032c8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_004032c8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_004032c8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_004032c8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00402a36_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_004031c6;\u000a      goto joined_r0x004031b8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00402cc1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x004031b8;\u000a      goto LAB_004031c6;\u000a    }\u000a    goto LAB_004032c8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_004032c8;\u000a  }\u000a  goto joined_r0x00403100;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040322a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403259;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403259:\u000a  if (1 < uVar10) {\u000aLAB_00402d36:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00402df2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00402cc1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00402df2:\u000a        if (bVar6 != 0) goto LAB_004032c8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00402d18:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00402d36;\u000ajoined_r0x00403100:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00403100:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403127;\u000aLAB_00403160:\u000a    if (bVar22) goto LAB_00403165;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00403160;\u000aLAB_00403127:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00403165:\u000a      if (bVar6 != 0) goto LAB_004032c8;\u000aLAB_0040316e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x004031b8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_004031c6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x004031b8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_004031f5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_004029d0;\u000aLAB_004032b0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_004032b9;\u000a  goto LAB_004029db;\u000a}\u000a\u000a
p136
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401320\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00403395\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x405440 + RAX*0x8]\nMOV EDI,0x405966\nMOV ESI,R15D\nCALL 0x00403a40\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x405968\nMOV ESI,R15D\nCALL 0x00403a40\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040284d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00402850\nNOP\nCMP R12,RSI\nJNC 0x0040283e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00402830\nJMP 0x00402850\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401330\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040291c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040291c\nMOV ECX,0x405964\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00402916\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x004028b7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x004028e4\nTEST RSI,RSI\nJZ 0x004028d1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x405968\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x004028f2\nMOV ECX,0x405968\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040291c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040336c\nMOV ECX,0x405964\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x004032b0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x004032b9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x00402a1f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x00402a1a\nCMP R11,-0x1\nJNZ 0x00402a1a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401330\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00402a70\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00402ccc\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x405498 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x004032c8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403120\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403127\nJMP 0x00403160\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x004013f0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x00402abd\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00402a21\nJMP 0x004032c8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00402a21\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x00402a4b\nCMP EBX,0x2\nJNZ 0x00402a4b\nTEST R13,R13\nJNZ 0x00402a4b\nJMP 0x004032c8\nCMP R11,-0x1\nJZ 0x00402ea3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00402ec3\nJMP 0x00402a4b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402ed4\nTEST R8B,R8B\nJNZ 0x004032c8\nCMP EBX,0x2\nJNZ 0x00402b78\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00402b78\nCMP R12,RSI\nJNC 0x00402b53\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402b62\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402b71\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00402b82\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403048\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403048\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403048\nCMP RCX,RSI\nJNC 0x00402bbc\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x00402bcb\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402a56\nJMP 0x00403120\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402a49\nJMP 0x00402c2a\nMOV DL,0x74\nJMP 0x00402c12\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402a49\nJMP 0x00402c2a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402a49\nJMP 0x00402c2a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x004032c8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402a49\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040316e\nJMP 0x004032c8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00402a49\nTEST R8B,R8B\nJNZ 0x004032c8\nCMP R12,RSI\nJNC 0x00402c5a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402c69\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402c78\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00402a49\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040305b\nCMP EBX,0x2\nJNZ 0x00402a49\nTEST R8B,R8B\nJZ 0x00402a49\nJMP 0x004032c8\nCMP EBX,0x2\nJNZ 0x00402ef4\nTEST R8B,R8B\nJNZ 0x004032c8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x004031c6\nJMP 0x004031e9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00402f15\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401580\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403108\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00403108\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00402df2\nJMP 0x00402dc0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00402da9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00402da6\nCMP R12,RSI\nJNC 0x00402d8b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x00402d9a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00402de0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00402de0\nTEST BPL,0x1\nJZ 0x00402e83\nCMP R12,RSI\nJNC 0x00402dd4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00402e83\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00402dc0\nTEST R8B,R8B\nJNZ 0x004032c8\nCMP EBX,0x2\nJNZ 0x00402e3a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x00402e3a\nCMP R12,RSI\nJNC 0x00402e12\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402e21\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402e30\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00402e44\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402e5b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402e75\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00402d70\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x004031c6\nJMP 0x004031e9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x00402a4b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x00402a4b\nJMP 0x004032c8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x004031f5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402a56\nJMP 0x00403120\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00402c12\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x004031c6\nJMP 0x004031e9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00402f37\nMOV RDI,R10\nCALL 0x00401330\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401350\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040320f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403207\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403216\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00402ffe\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00402ff6\nBT RDI,RDX\nJC 0x00403362\nINC RCX\nCMP RCX,R14\nJC 0x00402fe0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401570\nTEST EAX,EAX\nJNZ 0x00403013\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401560\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00402f55\nJMP 0x00403259\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402a56\nJMP 0x00403120\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00402a49\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00402a49\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00402a49\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x00402a4b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00403292\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x004032c8\nCMP R12,RSI\nJNC 0x004030be\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x004030d1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004030e0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x004030ef\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402a56\nJMP 0x00403120\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402a56\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00403160\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00403165\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x004031c0\nJMP 0x00403165\nTEST BPL,BPL\nJZ 0x004031c0\nTEST R8B,R8B\nJNZ 0x004032c8\nCMP EBX,0x2\nJNZ 0x004031a8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004031a8\nCMP R12,RSI\nJNC 0x00403183\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403192\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004031a1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004031b2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x004031f2\nJMP 0x004031ee\nTEST DIL,0x1\nJZ 0x004031e9\nAND AL,0x1\nJNZ 0x004031e9\nCMP R12,RSI\nJNC 0x004031d4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004031e3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x004031f2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x004032b0\nJMP 0x004029d0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403254\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040324c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00403288\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040322a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403259\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00402d18\nJMP 0x00402d36\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403259\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402a56\nJMP 0x00403120\nCMP R13,R11\nJNZ 0x004029db\nTEST R8B,R8B\nJZ 0x00403322\nCMP EBX,0x2\nJNZ 0x00403322\nTEST R12,R12\nJNZ 0x00403322\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00402760\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00403356\nTEST R8B,R8B\nJNZ 0x00403356\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00403356\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00403349\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00403340\nCMP R12,RSI\nJNC 0x0040330d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040330d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x004032c8\nTEST RSI,RSI\nJZ 0x00403379\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x405964\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040291c\nCALL 0x00401260\n'
p137
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 92 eb ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 40 54 40 00\nbf 66 59 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 68 59 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 d3 ea ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 64 59 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 68 59 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 68 59 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 64 59 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 33 e9 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 98 54 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 67 e9 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 97 e8 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 01 e4 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 d3 e3 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 69 e5 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 32 e5 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 64 59 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 c6 de ff ff\n'
p138
S'.text:0000000000402760\n.text:0000000000402761\n.text:0000000000402763\n.text:0000000000402765\n.text:0000000000402767\n.text:0000000000402769\n.text:000000000040276a\n.text:0000000000402771\n.text:0000000000402774\n.text:0000000000402777\n.text:000000000040277a\n.text:000000000040277f\n.text:0000000000402784\n.text:0000000000402789\n.text:000000000040278e\n.text:0000000000402796\n.text:000000000040279a\n.text:00000000004027a0\n.text:00000000004027a8\n.text:00000000004027ad\n.text:00000000004027b5\n.text:00000000004027ba\n.text:00000000004027be\n.text:00000000004027c0\n.text:00000000004027c3\n.text:00000000004027c6\n.text:00000000004027c9\n.text:00000000004027ce\n.text:00000000004027d1\n.text:00000000004027d4\n.text:00000000004027d7\n.text:00000000004027da\n.text:00000000004027dc\n.text:00000000004027df\n.text:00000000004027e4\n.text:00000000004027e7\n.text:00000000004027ec\n.text:00000000004027f3\n.text:00000000004027f8\n.text:00000000004027fb\n.text:0000000000402800\n.text:0000000000402805\n.text:000000000040280a\n.text:000000000040280d\n.text:0000000000402812\n.text:0000000000402817\n.text:000000000040281c\n.text:000000000040281e\n.text:0000000000402820\n.text:0000000000402825\n.text:0000000000402827\n.text:000000000040282a\n.text:000000000040282c\n.text:000000000040282e\n.text:0000000000402830\n.text:0000000000402833\n.text:0000000000402835\n.text:000000000040283a\n.text:000000000040283e\n.text:0000000000402844\n.text:0000000000402847\n.text:0000000000402849\n.text:000000000040284b\n.text:000000000040284d\n.text:0000000000402850\n.text:0000000000402855\n.text:0000000000402858\n.text:000000000040285d\n.text:0000000000402862\n.text:0000000000402865\n.text:0000000000402868\n.text:000000000040286b\n.text:000000000040286e\n.text:0000000000402873\n.text:0000000000402876\n.text:0000000000402879\n.text:000000000040287e\n.text:0000000000402881\n.text:0000000000402883\n.text:0000000000402886\n.text:0000000000402888\n.text:000000000040288a\n.text:000000000040288d\n.text:0000000000402892\n.text:0000000000402897\n.text:000000000040289c\n.text:000000000040289f\n.text:00000000004028a5\n.text:00000000004028a7\n.text:00000000004028aa\n.text:00000000004028ad\n.text:00000000004028b0\n.text:00000000004028b2\n.text:00000000004028b4\n.text:00000000004028b7\n.text:00000000004028ba\n.text:00000000004028bf\n.text:00000000004028c2\n.text:00000000004028c4\n.text:00000000004028c7\n.text:00000000004028c9\n.text:00000000004028ce\n.text:00000000004028d1\n.text:00000000004028d6\n.text:00000000004028dc\n.text:00000000004028e2\n.text:00000000004028e4\n.text:00000000004028e9\n.text:00000000004028ef\n.text:00000000004028f2\n.text:00000000004028f5\n.text:00000000004028f8\n.text:00000000004028fa\n.text:00000000004028ff\n.text:0000000000402902\n.text:0000000000402908\n.text:000000000040290d\n.text:0000000000402913\n.text:0000000000402916\n.text:0000000000402919\n.text:000000000040291c\n.text:0000000000402924\n.text:0000000000402926\n.text:0000000000402928\n.text:000000000040292b\n.text:000000000040292f\n.text:0000000000402931\n.text:0000000000402934\n.text:0000000000402938\n.text:000000000040293a\n.text:000000000040293d\n.text:0000000000402940\n.text:0000000000402943\n.text:0000000000402945\n.text:0000000000402949\n.text:000000000040294b\n.text:000000000040294f\n.text:0000000000402952\n.text:0000000000402955\n.text:0000000000402958\n.text:000000000040295a\n.text:000000000040295e\n.text:0000000000402967\n.text:000000000040296a\n.text:000000000040296c\n.text:0000000000402970\n.text:0000000000402972\n.text:0000000000402976\n.text:0000000000402978\n.text:000000000040297b\n.text:000000000040297f\n.text:0000000000402981\n.text:0000000000402984\n.text:0000000000402988\n.text:000000000040298d\n.text:0000000000402990\n.text:0000000000402994\n.text:000000000040299c\n.text:000000000040299f\n.text:00000000004029a2\n.text:00000000004029a4\n.text:00000000004029a8\n.text:00000000004029ab\n.text:00000000004029ad\n.text:00000000004029b2\n.text:00000000004029b6\n.text:00000000004029bb\n.text:00000000004029c0\n.text:00000000004029c4\n.text:00000000004029ca\n.text:00000000004029d0\n.text:00000000004029d5\n.text:00000000004029db\n.text:00000000004029e0\n.text:00000000004029e2\n.text:00000000004029e7\n.text:00000000004029eb\n.text:00000000004029ed\n.text:00000000004029f1\n.text:00000000004029f3\n.text:00000000004029f5\n.text:00000000004029f8\n.text:00000000004029fd\n.text:00000000004029ff\n.text:0000000000402a04\n.text:0000000000402a09\n.text:0000000000402a0d\n.text:0000000000402a12\n.text:0000000000402a17\n.text:0000000000402a1a\n.text:0000000000402a1d\n.text:0000000000402a1f\n.text:0000000000402a21\n.text:0000000000402a26\n.text:0000000000402a2a\n.text:0000000000402a30\n.text:0000000000402a32\n.text:0000000000402a34\n.text:0000000000402a36\n.text:0000000000402a3e\n.text:0000000000402a43\n.text:0000000000402a49\n.text:0000000000402a4b\n.text:0000000000402a50\n.text:0000000000402a56\n.text:0000000000402a5f\n.text:0000000000402a65\n.text:0000000000402a70\n.text:0000000000402a72\n.text:0000000000402a75\n.text:0000000000402a79\n.text:0000000000402a81\n.text:0000000000402a84\n.text:0000000000402a89\n.text:0000000000402a8b\n.text:0000000000402a8e\n.text:0000000000402a90\n.text:0000000000402a95\n.text:0000000000402a98\n.text:0000000000402a9d\n.text:0000000000402aa0\n.text:0000000000402aa5\n.text:0000000000402aa9\n.text:0000000000402aae\n.text:0000000000402ab0\n.text:0000000000402ab2\n.text:0000000000402ab8\n.text:0000000000402abd\n.text:0000000000402ac2\n.text:0000000000402ac5\n.text:0000000000402aca\n.text:0000000000402ace\n.text:0000000000402ad3\n.text:0000000000402ad8\n.text:0000000000402ada\n.text:0000000000402adc\n.text:0000000000402ae1\n.text:0000000000402ae3\n.text:0000000000402ae6\n.text:0000000000402aec\n.text:0000000000402aef\n.text:0000000000402af5\n.text:0000000000402af8\n.text:0000000000402afe\n.text:0000000000402b03\n.text:0000000000402b07\n.text:0000000000402b0d\n.text:0000000000402b10\n.text:0000000000402b13\n.text:0000000000402b17\n.text:0000000000402b1a\n.text:0000000000402b1c\n.text:0000000000402b1f\n.text:0000000000402b25\n.text:0000000000402b2a\n.text:0000000000402b2f\n.text:0000000000402b35\n.text:0000000000402b38\n.text:0000000000402b3e\n.text:0000000000402b41\n.text:0000000000402b43\n.text:0000000000402b45\n.text:0000000000402b47\n.text:0000000000402b49\n.text:0000000000402b4c\n.text:0000000000402b4e\n.text:0000000000402b53\n.text:0000000000402b58\n.text:0000000000402b5b\n.text:0000000000402b5d\n.text:0000000000402b62\n.text:0000000000402b67\n.text:0000000000402b6a\n.text:0000000000402b6c\n.text:0000000000402b71\n.text:0000000000402b75\n.text:0000000000402b78\n.text:0000000000402b7b\n.text:0000000000402b7d\n.text:0000000000402b82\n.text:0000000000402b87\n.text:0000000000402b89\n.text:0000000000402b8c\n.text:0000000000402b8f\n.text:0000000000402b95\n.text:0000000000402b99\n.text:0000000000402b9c\n.text:0000000000402ba2\n.text:0000000000402ba6\n.text:0000000000402ba9\n.text:0000000000402bac\n.text:0000000000402bb2\n.text:0000000000402bb5\n.text:0000000000402bb7\n.text:0000000000402bbc\n.text:0000000000402bc1\n.text:0000000000402bc4\n.text:0000000000402bc6\n.text:0000000000402bcb\n.text:0000000000402bcf\n.text:0000000000402bd4\n.text:0000000000402bda\n.text:0000000000402bdf\n.text:0000000000402be1\n.text:0000000000402be6\n.text:0000000000402bec\n.text:0000000000402bee\n.text:0000000000402bf0\n.text:0000000000402bf2\n.text:0000000000402bf4\n.text:0000000000402bf9\n.text:0000000000402bff\n.text:0000000000402c01\n.text:0000000000402c03\n.text:0000000000402c08\n.text:0000000000402c0e\n.text:0000000000402c10\n.text:0000000000402c12\n.text:0000000000402c17\n.text:0000000000402c19\n.text:0000000000402c1f\n.text:0000000000402c24\n.text:0000000000402c2a\n.text:0000000000402c2d\n.text:0000000000402c30\n.text:0000000000402c36\n.text:0000000000402c3b\n.text:0000000000402c3e\n.text:0000000000402c41\n.text:0000000000402c47\n.text:0000000000402c4a\n.text:0000000000402c50\n.text:0000000000402c53\n.text:0000000000402c55\n.text:0000000000402c5a\n.text:0000000000402c5f\n.text:0000000000402c62\n.text:0000000000402c64\n.text:0000000000402c69\n.text:0000000000402c6e\n.text:0000000000402c71\n.text:0000000000402c73\n.text:0000000000402c78\n.text:0000000000402c7c\n.text:0000000000402c7e\n.text:0000000000402c83\n.text:0000000000402c86\n.text:0000000000402c89\n.text:0000000000402c8f\n.text:0000000000402c92\n.text:0000000000402c98\n.text:0000000000402c9b\n.text:0000000000402ca1\n.text:0000000000402ca6\n.text:0000000000402ca9\n.text:0000000000402caf\n.text:0000000000402cb2\n.text:0000000000402cb8\n.text:0000000000402cbb\n.text:0000000000402cbd\n.text:0000000000402cc1\n.text:0000000000402cc7\n.text:0000000000402ccc\n.text:0000000000402cd0\n.text:0000000000402cd9\n.text:0000000000402cdf\n.text:0000000000402ce4\n.text:0000000000402ce9\n.text:0000000000402cee\n.text:0000000000402cf1\n.text:0000000000402cf6\n.text:0000000000402cf9\n.text:0000000000402cfc\n.text:0000000000402d01\n.text:0000000000402d06\n.text:0000000000402d0a\n.text:0000000000402d0f\n.text:0000000000402d14\n.text:0000000000402d18\n.text:0000000000402d1a\n.text:0000000000402d1f\n.text:0000000000402d25\n.text:0000000000402d28\n.text:0000000000402d2a\n.text:0000000000402d2d\n.text:0000000000402d30\n.text:0000000000402d36\n.text:0000000000402d3b\n.text:0000000000402d3e\n.text:0000000000402d41\n.text:0000000000402d44\n.text:0000000000402d47\n.text:0000000000402d49\n.text:0000000000402d4d\n.text:0000000000402d4f\n.text:0000000000402d54\n.text:0000000000402d59\n.text:0000000000402d5f\n.text:0000000000402d70\n.text:0000000000402d75\n.text:0000000000402d77\n.text:0000000000402d7a\n.text:0000000000402d7c\n.text:0000000000402d7f\n.text:0000000000402d81\n.text:0000000000402d84\n.text:0000000000402d86\n.text:0000000000402d8b\n.text:0000000000402d90\n.text:0000000000402d93\n.text:0000000000402d95\n.text:0000000000402d9a\n.text:0000000000402d9e\n.text:0000000000402da6\n.text:0000000000402da9\n.text:0000000000402dac\n.text:0000000000402dae\n.text:0000000000402db2\n.text:0000000000402dc0\n.text:0000000000402dc4\n.text:0000000000402dca\n.text:0000000000402dcd\n.text:0000000000402dcf\n.text:0000000000402dd4\n.text:0000000000402dd7\n.text:0000000000402dd9\n.text:0000000000402de0\n.text:0000000000402de3\n.text:0000000000402de8\n.text:0000000000402deb\n.text:0000000000402df0\n.text:0000000000402df2\n.text:0000000000402df5\n.text:0000000000402dfb\n.text:0000000000402dfe\n.text:0000000000402e00\n.text:0000000000402e04\n.text:0000000000402e06\n.text:0000000000402e08\n.text:0000000000402e0b\n.text:0000000000402e0d\n.text:0000000000402e12\n.text:0000000000402e17\n.text:0000000000402e1a\n.text:0000000000402e1c\n.text:0000000000402e21\n.text:0000000000402e26\n.text:0000000000402e29\n.text:0000000000402e2b\n.text:0000000000402e30\n.text:0000000000402e34\n.text:0000000000402e36\n.text:0000000000402e3a\n.text:0000000000402e3d\n.text:0000000000402e3f\n.text:0000000000402e44\n.text:0000000000402e49\n.text:0000000000402e4c\n.text:0000000000402e4e\n.text:0000000000402e51\n.text:0000000000402e54\n.text:0000000000402e57\n.text:0000000000402e5b\n.text:0000000000402e60\n.text:0000000000402e63\n.text:0000000000402e65\n.text:0000000000402e68\n.text:0000000000402e6b\n.text:0000000000402e6e\n.text:0000000000402e71\n.text:0000000000402e75\n.text:0000000000402e79\n.text:0000000000402e7d\n.text:0000000000402e81\n.text:0000000000402e83\n.text:0000000000402e87\n.text:0000000000402e8a\n.text:0000000000402e90\n.text:0000000000402e94\n.text:0000000000402e98\n.text:0000000000402e9e\n.text:0000000000402ea3\n.text:0000000000402ea6\n.text:0000000000402ea9\n.text:0000000000402eae\n.text:0000000000402eb1\n.text:0000000000402eb3\n.text:0000000000402eb6\n.text:0000000000402ebd\n.text:0000000000402ec3\n.text:0000000000402ec5\n.text:0000000000402ec9\n.text:0000000000402ecf\n.text:0000000000402ed4\n.text:0000000000402ed9\n.text:0000000000402edf\n.text:0000000000402ee2\n.text:0000000000402ee4\n.text:0000000000402ee9\n.text:0000000000402eef\n.text:0000000000402ef4\n.text:0000000000402ef6\n.text:0000000000402efb\n.text:0000000000402f01\n.text:0000000000402f03\n.text:0000000000402f06\n.text:0000000000402f0a\n.text:0000000000402f10\n.text:0000000000402f15\n.text:0000000000402f21\n.text:0000000000402f25\n.text:0000000000402f27\n.text:0000000000402f2a\n.text:0000000000402f2f\n.text:0000000000402f34\n.text:0000000000402f37\n.text:0000000000402f3b\n.text:0000000000402f40\n.text:0000000000402f42\n.text:0000000000402f46\n.text:0000000000402f48\n.text:0000000000402f50\n.text:0000000000402f55\n.text:0000000000402f5a\n.text:0000000000402f5e\n.text:0000000000402f62\n.text:0000000000402f6a\n.text:0000000000402f6d\n.text:0000000000402f72\n.text:0000000000402f75\n.text:0000000000402f78\n.text:0000000000402f7d\n.text:0000000000402f80\n.text:0000000000402f83\n.text:0000000000402f89\n.text:0000000000402f8d\n.text:0000000000402f97\n.text:0000000000402f9d\n.text:0000000000402fa1\n.text:0000000000402fa6\n.text:0000000000402fac\n.text:0000000000402fb0\n.text:0000000000402fb3\n.text:0000000000402fb7\n.text:0000000000402fb9\n.text:0000000000402fbe\n.text:0000000000402fc3\n.text:0000000000402fc7\n.text:0000000000402fc9\n.text:0000000000402fce\n.text:0000000000402fd3\n.text:0000000000402fd7\n.text:0000000000402fdc\n.text:0000000000402fe0\n.text:0000000000402fe4\n.text:0000000000402fe7\n.text:0000000000402fea\n.text:0000000000402fec\n.text:0000000000402ff0\n.text:0000000000402ff6\n.text:0000000000402ff9\n.text:0000000000402ffc\n.text:0000000000402ffe\n.text:0000000000403002\n.text:0000000000403007\n.text:0000000000403009\n.text:000000000040300b\n.text:0000000000403013\n.text:0000000000403018\n.text:000000000040301b\n.text:0000000000403023\n.text:0000000000403026\n.text:0000000000403029\n.text:000000000040302e\n.text:0000000000403031\n.text:0000000000403033\n.text:0000000000403038\n.text:000000000040303d\n.text:0000000000403043\n.text:0000000000403048\n.text:000000000040304b\n.text:0000000000403050\n.text:0000000000403056\n.text:000000000040305b\n.text:0000000000403060\n.text:0000000000403066\n.text:000000000040306a\n.text:000000000040306d\n.text:0000000000403073\n.text:0000000000403079\n.text:000000000040307f\n.text:0000000000403084\n.text:0000000000403086\n.text:0000000000403089\n.text:000000000040308f\n.text:0000000000403093\n.text:0000000000403095\n.text:000000000040309f\n.text:00000000004030a3\n.text:00000000004030a9\n.text:00000000004030ac\n.text:00000000004030ae\n.text:00000000004030b4\n.text:00000000004030b7\n.text:00000000004030b9\n.text:00000000004030be\n.text:00000000004030c3\n.text:00000000004030c6\n.text:00000000004030ca\n.text:00000000004030cc\n.text:00000000004030d1\n.text:00000000004030d6\n.text:00000000004030d9\n.text:00000000004030db\n.text:00000000004030e0\n.text:00000000004030e5\n.text:00000000004030e8\n.text:00000000004030ea\n.text:00000000004030ef\n.text:00000000004030f3\n.text:00000000004030f5\n.text:00000000004030f8\n.text:00000000004030fb\n.text:0000000000403100\n.text:0000000000403106\n.text:0000000000403108\n.text:000000000040310d\n.text:0000000000403112\n.text:0000000000403118\n.text:0000000000403120\n.text:0000000000403125\n.text:0000000000403127\n.text:000000000040312c\n.text:000000000040312f\n.text:0000000000403131\n.text:0000000000403134\n.text:0000000000403136\n.text:0000000000403139\n.text:000000000040313c\n.text:000000000040313f\n.text:0000000000403141\n.text:0000000000403149\n.text:000000000040314c\n.text:000000000040314e\n.text:0000000000403150\n.text:0000000000403160\n.text:0000000000403163\n.text:0000000000403165\n.text:0000000000403168\n.text:000000000040316e\n.text:0000000000403171\n.text:0000000000403173\n.text:0000000000403175\n.text:0000000000403177\n.text:0000000000403179\n.text:000000000040317c\n.text:000000000040317e\n.text:0000000000403183\n.text:0000000000403188\n.text:000000000040318b\n.text:000000000040318d\n.text:0000000000403192\n.text:0000000000403197\n.text:000000000040319a\n.text:000000000040319c\n.text:00000000004031a1\n.text:00000000004031a5\n.text:00000000004031a8\n.text:00000000004031ab\n.text:00000000004031ad\n.text:00000000004031b2\n.text:00000000004031b5\n.text:00000000004031b8\n.text:00000000004031ba\n.text:00000000004031c0\n.text:00000000004031c4\n.text:00000000004031c6\n.text:00000000004031c8\n.text:00000000004031ca\n.text:00000000004031cd\n.text:00000000004031cf\n.text:00000000004031d4\n.text:00000000004031d9\n.text:00000000004031dc\n.text:00000000004031de\n.text:00000000004031e3\n.text:00000000004031e7\n.text:00000000004031e9\n.text:00000000004031ec\n.text:00000000004031ee\n.text:00000000004031f2\n.text:00000000004031f5\n.text:00000000004031f8\n.text:00000000004031fc\n.text:0000000000403202\n.text:0000000000403207\n.text:000000000040320f\n.text:0000000000403214\n.text:0000000000403216\n.text:000000000040321e\n.text:0000000000403223\n.text:0000000000403225\n.text:000000000040322a\n.text:000000000040322f\n.text:0000000000403233\n.text:0000000000403235\n.text:000000000040323a\n.text:000000000040323d\n.text:0000000000403240\n.text:0000000000403242\n.text:000000000040324a\n.text:000000000040324c\n.text:0000000000403254\n.text:0000000000403259\n.text:000000000040325d\n.text:0000000000403262\n.text:0000000000403267\n.text:000000000040326b\n.text:0000000000403270\n.text:0000000000403275\n.text:0000000000403279\n.text:000000000040327d\n.text:0000000000403283\n.text:0000000000403288\n.text:0000000000403290\n.text:0000000000403292\n.text:0000000000403294\n.text:0000000000403298\n.text:000000000040329d\n.text:00000000004032a3\n.text:00000000004032b0\n.text:00000000004032b3\n.text:00000000004032b9\n.text:00000000004032bc\n.text:00000000004032be\n.text:00000000004032c1\n.text:00000000004032c3\n.text:00000000004032c6\n.text:00000000004032c8\n.text:00000000004032d0\n.text:00000000004032d6\n.text:00000000004032da\n.text:00000000004032dd\n.text:00000000004032e1\n.text:00000000004032e6\n.text:00000000004032ea\n.text:00000000004032ee\n.text:00000000004032f1\n.text:00000000004032f4\n.text:00000000004032f7\n.text:00000000004032fb\n.text:00000000004032ff\n.text:0000000000403301\n.text:0000000000403306\n.text:000000000040330a\n.text:000000000040330d\n.text:0000000000403310\n.text:0000000000403317\n.text:0000000000403318\n.text:000000000040331a\n.text:000000000040331c\n.text:000000000040331e\n.text:0000000000403320\n.text:0000000000403321\n.text:0000000000403322\n.text:000000000040332a\n.text:000000000040332d\n.text:000000000040332f\n.text:0000000000403332\n.text:0000000000403334\n.text:0000000000403336\n.text:0000000000403338\n.text:000000000040333a\n.text:000000000040333d\n.text:0000000000403340\n.text:0000000000403343\n.text:0000000000403345\n.text:0000000000403349\n.text:000000000040334c\n.text:000000000040334f\n.text:0000000000403352\n.text:0000000000403354\n.text:0000000000403356\n.text:0000000000403359\n.text:000000000040335b\n.text:0000000000403360\n.text:0000000000403362\n.text:0000000000403367\n.text:000000000040336c\n.text:000000000040336f\n.text:0000000000403371\n.text:0000000000403376\n.text:0000000000403379\n.text:000000000040337e\n.text:0000000000403381\n.text:0000000000403387\n.text:000000000040338d\n.text:0000000000403390\n.text:0000000000403395\n'
p139
tp140
sS'set_quoting_style'
p141
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p142
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p143
S'TEST RDI,RDI\nMOV EAX,0x6082f0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p144
S'48 85 ff\nb8 f0 82 60 00\n48 0f 45 c7\n89 30\nc3\n'
p145
S'.text:0000000000402640\n.text:0000000000402643\n.text:0000000000402648\n.text:000000000040264c\n.text:000000000040264e\n'
p146
tp147
sS'quotearg_n_style_colon'
p148
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p149
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p150
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00403770\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00402650\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00403540\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p151
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p152
S'.text:00000000004038f0\n.text:00000000004038f1\n.text:00000000004038f3\n.text:00000000004038f4\n.text:00000000004038f8\n.text:00000000004038fb\n.text:00000000004038fd\n.text:0000000000403902\n.text:0000000000403905\n.text:000000000040390a\n.text:000000000040390f\n.text:0000000000403914\n.text:0000000000403917\n.text:000000000040391c\n.text:0000000000403923\n.text:0000000000403925\n.text:0000000000403928\n.text:000000000040392b\n.text:0000000000403930\n.text:0000000000403934\n.text:0000000000403935\n.text:0000000000403937\n.text:0000000000403938\n'
p153
tp154
sS'textdomain'
p155
(S'\n__stdcall textdomain()\n'
p156
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00608068)();\u000a  return;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x00608068]\n'
p158
S'ff 25 82 6d 20 00\n'
p159
S'.plt:00000000004012e0\n'
p160
tp161
sS'xmemdup'
p162
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p163
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p164
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00404640\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401440\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p165
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 9c cc ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p166
S'.text:0000000000404780\n.text:0000000000404782\n.text:0000000000404784\n.text:0000000000404785\n.text:0000000000404788\n.text:000000000040478b\n.text:000000000040478e\n.text:0000000000404793\n.text:0000000000404796\n.text:0000000000404799\n.text:000000000040479c\n.text:000000000040479f\n.text:00000000004047a4\n.text:00000000004047a7\n.text:00000000004047a8\n.text:00000000004047aa\n.text:00000000004047ac\n'
p167
tp168
sS'count_items'
p169
(S'\n__stdcall count_items(item * unused)\n'
p170
V\u000a_Bool count_items(item *unused)\u000a\u000a{\u000a  n_strings = n_strings + 1;\u000a  return false;\u000a}\u000a\u000a
p171
S'INC qword ptr [0x006082b0]\nXOR EAX,EAX\nRET\n'
p172
S'48 ff 05 89 62 20 00\n31 c0\nc3\n'
p173
S'.text:0000000000402020\n.text:0000000000402027\n.text:0000000000402029\n'
p174
tp175
sS'get_quoting_style'
p176
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p177
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p178
S'TEST RDI,RDI\nMOV EAX,0x6082f0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p179
S'48 85 ff\nb8 f0 82 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p180
S'.text:0000000000402630\n.text:0000000000402633\n.text:0000000000402638\n.text:000000000040263c\n.text:000000000040263e\n'
p181
tp182
sS'ferror_unlocked'
p183
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p184
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_00608100)();\u000a  return iVar1;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x00608100]\n'
p186
S'ff 25 ea 6c 20 00\n'
p187
S'.plt:0000000000401410\n'
p188
tp189
sS'exit'
p190
(S'\n__stdcall exit(int __status)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_00608190)();\u000a  return;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x00608190]\n'
p193
S'ff 25 5a 6c 20 00\n'
p194
S'.plt:0000000000401530\n'
p195
tp196
sS'quote_mem'
p197
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p198
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p199
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403a00\n'
p200
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p201
S'.text:0000000000403a10\n.text:0000000000403a13\n.text:0000000000403a16\n.text:0000000000403a18\n.text:0000000000403a1b\n.text:0000000000403a1e\n'
p202
tp203
sS'locale_charset'
p204
(S'\n__stdcall locale_charset()\n'
p205
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = "";\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00404bcd:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00404bcd;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p206
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401480\nTEST RAX,RAX\nMOV R14D,0x4051f0\nCMOVNZ R14,RAX\nCALL 0x00404be0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00404ba5\nJMP 0x00404bcd\nMOV RDI,RBX\nCALL 0x00401330\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401330\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00404bcd\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401430\nTEST EAX,EAX\nJZ 0x00404bc0\nCMP BPL,0x2a\nJNZ 0x00404b80\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00404b80\nMOV RDI,RBX\nCALL 0x00401330\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x406118\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p207
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 22 c9 ff ff\n48 85 c0\n41 be f0 51 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 a8 c7 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 9a c7 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 80 c8 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 68 c7 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 18 61 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p208
S'.text:0000000000404b50\n.text:0000000000404b51\n.text:0000000000404b53\n.text:0000000000404b54\n.text:0000000000404b59\n.text:0000000000404b5e\n.text:0000000000404b61\n.text:0000000000404b67\n.text:0000000000404b6b\n.text:0000000000404b70\n.text:0000000000404b73\n.text:0000000000404b76\n.text:0000000000404b79\n.text:0000000000404b7b\n.text:0000000000404b80\n.text:0000000000404b83\n.text:0000000000404b88\n.text:0000000000404b8c\n.text:0000000000404b91\n.text:0000000000404b96\n.text:0000000000404b9b\n.text:0000000000404ba0\n.text:0000000000404ba3\n.text:0000000000404ba5\n.text:0000000000404ba8\n.text:0000000000404bab\n.text:0000000000404bb0\n.text:0000000000404bb2\n.text:0000000000404bb4\n.text:0000000000404bb8\n.text:0000000000404bba\n.text:0000000000404bbe\n.text:0000000000404bc0\n.text:0000000000404bc3\n.text:0000000000404bc8\n.text:0000000000404bcd\n.text:0000000000404bd1\n.text:0000000000404bd6\n.text:0000000000404bda\n.text:0000000000404bdb\n.text:0000000000404bdd\n.text:0000000000404bde\n'
p209
tp210
sS'fadvise'
p211
(S'\n__stdcall fadvise(FILE * fp)\n'
p212
V\u000avoid fadvise(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int __advise;\u000a  \u000a  if (fp != (FILE *)0x0) {\u000a    __fd = fileno((FILE *)fp);\u000a    fdadvise(__fd,0,0,__advise);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p213
S'PUSH RBX\nMOV EBX,ESI\nTEST RDI,RDI\nJZ 0x004022d8\nCALL 0x00401450\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,EAX\nMOV ECX,EBX\nPOP RBX\nJMP 0x004022b0\nPOP RBX\nRET\n'
p214
S'53\n89 f3\n48 85 ff\n74 10\ne8 83 f1 ff ff\n31 f6\n31 d2\n89 c7\n89 d9\n5b\neb d8\n5b\nc3\n'
p215
S'.text:00000000004022c0\n.text:00000000004022c1\n.text:00000000004022c3\n.text:00000000004022c6\n.text:00000000004022c8\n.text:00000000004022cd\n.text:00000000004022cf\n.text:00000000004022d1\n.text:00000000004022d3\n.text:00000000004022d5\n.text:00000000004022d6\n.text:00000000004022d8\n.text:00000000004022d9\n'
p216
tp217
sS'set_program_name'
p218
(S'\n__stdcall set_program_name(char * argv0)\n'
p219
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p220
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004025c1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401370\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x004025ab\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x405428\nMOV EDX,0x7\nCALL 0x00401280\nTEST EAX,EAX\nJNZ 0x004025ab\nMOV ESI,0x405430\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401280\nTEST EAX,EAX\nJNZ 0x004025a8\nADD R14,0x3\nMOV qword ptr [0x00608240],R14\nMOV RBX,R14\nMOV qword ptr [0x006082e0],RBX\nMOV qword ptr [0x00608260],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x006082a0]\nMOV EDI,0x4053f0\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401540\nCALL 0x00401260\n'
p221
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 17 ee ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 28 54 40 00\nba 07 00 00 00\ne8 fd ec ff ff\n85 c0\n75 24\nbe 30 54 40 00\nba 03 00 00 00\n4c 89 f7\ne8 e7 ec ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 98 5c 20 00\n4c 89 f3\n48 89 1d 2e 5d 20 00\n48 89 1d a7 5c 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d d8 5c 20 00\nbf f0 53 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 64 ef ff ff\ne8 7f ec ff ff\n'
p222
S'.text:0000000000402540\n.text:0000000000402542\n.text:0000000000402543\n.text:0000000000402544\n.text:0000000000402547\n.text:000000000040254a\n.text:000000000040254c\n.text:0000000000402551\n.text:0000000000402554\n.text:0000000000402559\n.text:000000000040255c\n.text:0000000000402560\n.text:0000000000402564\n.text:0000000000402567\n.text:000000000040256a\n.text:000000000040256e\n.text:0000000000402570\n.text:0000000000402574\n.text:0000000000402579\n.text:000000000040257e\n.text:0000000000402583\n.text:0000000000402585\n.text:0000000000402587\n.text:000000000040258c\n.text:0000000000402591\n.text:0000000000402594\n.text:0000000000402599\n.text:000000000040259b\n.text:000000000040259d\n.text:00000000004025a1\n.text:00000000004025a8\n.text:00000000004025ab\n.text:00000000004025b2\n.text:00000000004025b9\n.text:00000000004025bd\n.text:00000000004025be\n.text:00000000004025c0\n.text:00000000004025c1\n.text:00000000004025c8\n.text:00000000004025cd\n.text:00000000004025d2\n.text:00000000004025d7\n.text:00000000004025dc\n'
p223
tp224
sS'fileno'
p225
(S'\n__stdcall fileno(FILE * __stream)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00608120)();\u000a  return iVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x00608120]\n'
p228
S'ff 25 ca 6c 20 00\n'
p229
S'.plt:0000000000401450\n'
p230
tp231
sS'quotearg_buffer'
p232
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p233
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p234
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x6082f0\nCMOVNZ RBP,R8\nCALL 0x00401270\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00402760\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p235
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd f0 82 60 00\n49 0f 45 e8\ne8 68 eb ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p236
S'.text:00000000004026e0\n.text:00000000004026e1\n.text:00000000004026e3\n.text:00000000004026e5\n.text:00000000004026e7\n.text:00000000004026e9\n.text:00000000004026ea\n.text:00000000004026eb\n.text:00000000004026ee\n.text:00000000004026f1\n.text:00000000004026f4\n.text:00000000004026f7\n.text:00000000004026fa\n.text:00000000004026ff\n.text:0000000000402703\n.text:0000000000402708\n.text:000000000040270b\n.text:000000000040270d\n.text:0000000000402711\n.text:0000000000402715\n.text:0000000000402719\n.text:000000000040271d\n.text:0000000000402720\n.text:0000000000402723\n.text:0000000000402726\n.text:0000000000402729\n.text:000000000040272c\n.text:000000000040272f\n.text:0000000000402733\n.text:0000000000402734\n.text:0000000000402739\n.text:000000000040273d\n.text:0000000000402741\n.text:0000000000402743\n.text:0000000000402747\n.text:0000000000402748\n.text:000000000040274a\n.text:000000000040274c\n.text:000000000040274e\n.text:0000000000402750\n.text:0000000000402751\n'
p237
tp238
sS'quotearg_colon'
p239
(S'\n__stdcall quotearg_colon(char * arg)\n'
p240
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p241
S'MOV ESI,0x3a\nJMP 0x004038c0\n'
p242
S'be 3a 00 00 00\neb e9\n'
p243
S'.text:00000000004038d0\n.text:00000000004038d5\n'
p244
tp245
sS'mbrtowc'
p246
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006080a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x006080a0]\n'
p249
S'ff 25 4a 6d 20 00\n'
p250
S'.plt:0000000000401350\n'
p251
tp252
sS'dup2'
p253
(S'\n__stdcall dup2(int __fd, int __fd2)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dup2(int __fd,int __fd2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dup2_006080a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x006080a8]\n'
p256
S'ff 25 42 6d 20 00\n'
p257
S'.plt:0000000000401360\n'
p258
tp259
sS'rpl_fflush'
p260
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p261
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00608130)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p262
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004048ed\nMOV RDI,RBX\nCALL 0x004014a0\nTEST EAX,EAX\nJZ 0x004048ed\nMOV RDI,RBX\nCALL 0x00404900\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401470\n'
p263
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 bf cb ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 7a cb ff ff\n'
p264
S'.text:00000000004048d0\n.text:00000000004048d1\n.text:00000000004048d4\n.text:00000000004048d7\n.text:00000000004048d9\n.text:00000000004048dc\n.text:00000000004048e1\n.text:00000000004048e3\n.text:00000000004048e5\n.text:00000000004048e8\n.text:00000000004048ed\n.text:00000000004048f0\n.text:00000000004048f1\n'
p265
tp266
sS'__assert_fail'
p267
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_006080c0)();\u000a  return;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x006080c0]\n'
p270
S'ff 25 2a 6d 20 00\n'
p271
S'.plt:0000000000401390\n'
p272
tp273
sS'scan_zeros'
p274
(S'\n__stdcall scan_zeros(item * k)\n'
p275
V\u000a_Bool scan_zeros(item *k)\u000a\u000a{\u000a  item **ppiVar1;\u000a  \u000a  if ((k->count == 0) && (k->str != (char *)0x0)) {\u000a    ppiVar1 = &zeros->qlink;\u000a    if (head == (item *)0x0) {\u000a      ppiVar1 = &head;\u000a    }\u000a    *ppiVar1 = k;\u000a    zeros = k;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p276
S'CMP qword ptr [RDI + 0x20],0x0\nJNZ 0x00402063\nCMP qword ptr [RDI],0x0\nJZ 0x00402063\nMOV RAX,qword ptr [0x006082c0]\nADD RAX,0x28\nCMP qword ptr [0x006082b8],0x0\nMOV ECX,0x6082b8\nCMOVZ RAX,RCX\nMOV qword ptr [RAX],RDI\nMOV qword ptr [0x006082c0],RDI\nXOR EAX,EAX\nRET\n'
p277
S'48 83 7f 20 00\n75 2c\n48 83 3f 00\n74 26\n48 8b 05 7c 62 20 00\n48 83 c0 28\n48 83 3d 68 62 20 00 00\nb9 b8 82 60 00\n48 0f 44 c1\n48 89 38\n48 89 3d 5d 62 20 00\n31 c0\nc3\n'
p278
S'.text:0000000000402030\n.text:0000000000402035\n.text:0000000000402037\n.text:000000000040203b\n.text:000000000040203d\n.text:0000000000402044\n.text:0000000000402048\n.text:0000000000402050\n.text:0000000000402055\n.text:0000000000402059\n.text:000000000040205c\n.text:0000000000402063\n.text:0000000000402065\n'
p279
tp280
sS'setlocale'
p281
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p282
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_00608160)();\u000a  return pcVar1;\u000a}\u000a\u000a
p283
S'JMP qword ptr [0x00608160]\n'
p284
S'ff 25 8a 6c 20 00\n'
p285
S'.plt:00000000004014d0\n'
p286
tp287
sS'new_item'
p288
(S'\n__stdcall new_item(char * str)\n'
p289
V\u000aitem * new_item(char *str)\u000a\u000a{\u000a  item *piVar1;\u000a  char *pcVar2;\u000a  \u000a  piVar1 = (item *)xmalloc(0x38);\u000a  if (str == (char *)0x0) {\u000a    pcVar2 = (char *)0x0;\u000a  }\u000a  else {\u000a    pcVar2 = xstrdup(str);\u000a  }\u000a  piVar1->str = pcVar2;\u000a  *(undefined4 *)&piVar1->left = 0;\u000a  *(undefined4 *)((long)&piVar1->left + 4) = 0;\u000a  *(undefined4 *)&piVar1->right = 0;\u000a  *(undefined4 *)((long)&piVar1->right + 4) = 0;\u000a  piVar1->balance = 0;\u000a  *(undefined4 *)&piVar1->count = 0;\u000a  *(undefined4 *)((long)&piVar1->count + 4) = 0;\u000a  *(undefined4 *)&piVar1->qlink = 0;\u000a  *(undefined4 *)((long)&piVar1->qlink + 4) = 0;\u000a  piVar1->top = (successor *)0x0;\u000a  return piVar1;\u000a}\u000a\u000a
p290
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV EDI,0x38\nCALL 0x00404640\nMOV RBX,RAX\nTEST R14,R14\nJZ 0x00401d13\nMOV RDI,R14\nCALL 0x004047b0\nJMP 0x00401d15\nXOR EAX,EAX\nMOV qword ptr [RBX],RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x8],XMM0\nMOV dword ptr [RBX + 0x18],0x0\nMOVUPS xmmword ptr [RBX + 0x20],XMM0\nMOV qword ptr [RBX + 0x30],0x0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p291
S'41 56\n53\n50\n49 89 fe\nbf 38 00 00 00\ne8 3f 29 00 00\n48 89 c3\n4d 85 f6\n74 0a\n4c 89 f7\ne8 9f 2a 00 00\neb 02\n31 c0\n48 89 03\n0f 57 c0\n0f 11 43 08\nc7 43 18 00 00 00 00\n0f 11 43 20\n48 c7 43 30 00 00 00 00\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p292
S'.text:0000000000401cf0\n.text:0000000000401cf2\n.text:0000000000401cf3\n.text:0000000000401cf4\n.text:0000000000401cf7\n.text:0000000000401cfc\n.text:0000000000401d01\n.text:0000000000401d04\n.text:0000000000401d07\n.text:0000000000401d09\n.text:0000000000401d0c\n.text:0000000000401d11\n.text:0000000000401d13\n.text:0000000000401d15\n.text:0000000000401d18\n.text:0000000000401d1b\n.text:0000000000401d1f\n.text:0000000000401d26\n.text:0000000000401d2a\n.text:0000000000401d32\n.text:0000000000401d35\n.text:0000000000401d39\n.text:0000000000401d3a\n.text:0000000000401d3c\n'
p293
tp294
sS'c_toupper'
p295
(S'\n__stdcall c_toupper()\n'
p296
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p297
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p298
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p299
S'.text:0000000000404ad0\n.text:0000000000404ad3\n.text:0000000000404ad6\n.text:0000000000404ad9\n.text:0000000000404adc\n'
p300
tp301
sS'bindtextdomain'
p302
(S'\n__stdcall bindtextdomain()\n'
p303
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00608078)();\u000a  return;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x00608078]\n'
p305
S'ff 25 72 6d 20 00\n'
p306
S'.plt:0000000000401300\n'
p307
tp308
sS'set_char_quoting'
p309
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p310
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p311
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x6082f0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p312
S'89 f1\n48 85 ff\nbe f0 82 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p313
S'.text:0000000000402650\n.text:0000000000402652\n.text:0000000000402655\n.text:000000000040265a\n.text:000000000040265e\n.text:0000000000402660\n.text:0000000000402663\n.text:0000000000402667\n.text:000000000040266c\n.text:000000000040266f\n.text:0000000000402671\n.text:0000000000402673\n.text:0000000000402676\n.text:0000000000402678\n.text:000000000040267b\n.text:000000000040267d\n.text:0000000000402680\n.text:0000000000402685\n'
p314
tp315
sS'quotearg_n'
p316
(S'\n__stdcall quotearg_n(char * arg)\n'
p317
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p318
S'MOV RDX,-0x1\nMOV ECX,0x6082f0\nJMP 0x00403540\n'
p319
S'48 c7 c2 ff ff ff ff\nb9 f0 82 60 00\neb 02\n'
p320
S'.text:0000000000403530\n.text:0000000000403537\n.text:000000000040353c\n'
p321
tp322
sS'mbsinit'
p323
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p324
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_006081a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x006081a8]\n'
p326
S'ff 25 42 6c 20 00\n'
p327
S'.plt:0000000000401560\n'
p328
tp329
sS'dcgettext'
p330
(S'\n__stdcall dcgettext()\n'
p331
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00608080)();\u000a  return;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x00608080]\n'
p333
S'ff 25 6a 6d 20 00\n'
p334
S'.plt:0000000000401310\n'
p335
tp336
sS'close_stream'
p337
(S'\n__stdcall close_stream(FILE * stream)\n'
p338
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004012b0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401410\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00404850\nTEST EBP,EBP\nJZ 0x00404b1b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x00404b3f\nCALL 0x00401270\nMOV dword ptr [RAX],0x0\nJMP 0x00404b3f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x00404b3f\nTEST CL,CL\nJNZ 0x00404b3f\nCALL 0x00401270\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p340
S'55\n41 56\n53\n48 89 fb\ne8 c4 c7 ff ff\n49 89 c6\n48 89 df\ne8 19 c9 ff ff\n89 c5\n48 89 df\ne8 4f fd ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 5d c7 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 3e c7 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p341
S'.text:0000000000404ae0\n.text:0000000000404ae1\n.text:0000000000404ae3\n.text:0000000000404ae4\n.text:0000000000404ae7\n.text:0000000000404aec\n.text:0000000000404aef\n.text:0000000000404af2\n.text:0000000000404af7\n.text:0000000000404af9\n.text:0000000000404afc\n.text:0000000000404b01\n.text:0000000000404b03\n.text:0000000000404b05\n.text:0000000000404b0a\n.text:0000000000404b0c\n.text:0000000000404b0e\n.text:0000000000404b13\n.text:0000000000404b19\n.text:0000000000404b1b\n.text:0000000000404b1d\n.text:0000000000404b20\n.text:0000000000404b22\n.text:0000000000404b24\n.text:0000000000404b27\n.text:0000000000404b29\n.text:0000000000404b2b\n.text:0000000000404b2d\n.text:0000000000404b32\n.text:0000000000404b34\n.text:0000000000404b37\n.text:0000000000404b3c\n.text:0000000000404b3f\n.text:0000000000404b41\n.text:0000000000404b42\n.text:0000000000404b44\n.text:0000000000404b45\n'
p342
tp343
sS'quotearg_colon_mem'
p344
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p345
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'MOV EDX,0x3a\nJMP 0x00403850\n'
p347
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p348
S'.text:00000000004038e0\n.text:00000000004038e5\n'
p349
tp350
sS'quotearg_free'
p351
(S'\n__stdcall quotearg_free()\n'
p352
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p353
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x006081e0]\nCMP dword ptr [0x006081e8],0x2\nJC 0x004034da\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401250\nINC RBX\nMOV EAX,dword ptr [0x006081e8]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x004034c0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x608330\nCMP RDI,RAX\nJZ 0x00403503\nCALL 0x00401250\nMOV qword ptr [0x006081f0],0x100\nMOV qword ptr [0x006081f8],0x608330\nMOV EAX,0x6081f0\nCMP R14,RAX\nJZ 0x00403520\nMOV RDI,R14\nCALL 0x00401250\nMOV qword ptr [0x006081e0],0x6081f0\nMOV dword ptr [0x006081e8],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p354
S'41 57\n41 56\n53\n4c 8b 35 34 4d 20 00\n83 3d 35 4d 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 88 dd ff ff\n48 ff c3\n8b 05 17 4d 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 30 83 60 00\n48 39 c7\n74 1b\ne8 63 dd ff ff\n48 c7 05 f8 4c 20 00 00 01 00 00\n48 c7 05 f5 4c 20 00 30 83 60 00\nb8 f0 81 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 3b dd ff ff\n48 c7 05 c0 4c 20 00 f0 81 60 00\nc7 05 be 4c 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p355
S'.text:00000000004034a0\n.text:00000000004034a2\n.text:00000000004034a4\n.text:00000000004034a5\n.text:00000000004034ac\n.text:00000000004034b3\n.text:00000000004034b5\n.text:00000000004034b9\n.text:00000000004034be\n.text:00000000004034c0\n.text:00000000004034c3\n.text:00000000004034c8\n.text:00000000004034cb\n.text:00000000004034d1\n.text:00000000004034d5\n.text:00000000004034d8\n.text:00000000004034da\n.text:00000000004034de\n.text:00000000004034e3\n.text:00000000004034e6\n.text:00000000004034e8\n.text:00000000004034ed\n.text:00000000004034f8\n.text:0000000000403503\n.text:0000000000403508\n.text:000000000040350b\n.text:000000000040350d\n.text:0000000000403510\n.text:0000000000403515\n.text:0000000000403520\n.text:000000000040352a\n.text:000000000040352b\n.text:000000000040352d\n.text:000000000040352f\n'
p356
tp357
sS'quotearg_mem'
p358
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p359
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p360
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403700\n'
p361
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p362
S'.text:0000000000403720\n.text:0000000000403723\n.text:0000000000403726\n.text:0000000000403728\n.text:000000000040372b\n.text:000000000040372e\n'
p363
tp364
sS'xcalloc'
p365
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p366
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p367
S'PUSH RAX\nCALL 0x00404800\nTEST RAX,RAX\nJZ 0x0040476d\nPOP RCX\nRET\nCALL 0x004047d0\n'
p368
S'50\ne8 9a 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p369
S'.text:0000000000404760\n.text:0000000000404761\n.text:0000000000404766\n.text:0000000000404769\n.text:000000000040476b\n.text:000000000040476c\n.text:000000000040476d\n'
p370
tp371
sS'deregister_tm_clones'
p372
(S'\n__stdcall deregister_tm_clones()\n'
p373
V\u000a/* WARNING: Removing unreachable block (ram,0x004015d5) */\u000a/* WARNING: Removing unreachable block (ram,0x004015df) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p374
S'MOV EAX,0x60823f\nPUSH RBP\nSUB RAX,0x608238\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x004015f0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004015f0\nPOP RBP\nMOV EDI,0x608238\nJMP RAX\nPOP RBP\nRET\n'
p375
S'b8 3f 82 60 00\n55\n48 2d 38 82 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 38 82 60 00\nff e0\n5d\nc3\n'
p376
S'.text:00000000004015c0\n.text:00000000004015c5\n.text:00000000004015c6\n.text:00000000004015cc\n.text:00000000004015d0\n.text:00000000004015d3\n.text:00000000004015d5\n.text:00000000004015da\n.text:00000000004015dd\n.text:00000000004015df\n.text:00000000004015e0\n.text:00000000004015e5\n.text:00000000004015f0\n.text:00000000004015f1\n'
p377
tp378
sS'detect_loop'
p379
(S'\n__stdcall detect_loop(item * k)\n'
p380
V\u000a_Bool detect_loop(item *k)\u000a\u000a{\u000a  size_t *psVar1;\u000a  item *piVar2;\u000a  item *piVar3;\u000a  successor *psVar4;\u000a  successor **ppsVar5;\u000a  \u000a  piVar2 = loop;\u000a  if (((k->count != 0) && (piVar2 = k, loop != (item *)0x0)) &&\u000a     (psVar4 = k->top, piVar2 = loop, psVar4 != (successor *)0x0)) {\u000a    ppsVar5 = &k->top;\u000a    do {\u000a      if (psVar4->suc == loop) {\u000a        if (k->qlink == (item *)0x0) {\u000a          k->qlink = loop;\u000a          loop = k;\u000a          return false;\u000a        }\u000a        goto LAB_004020c0;\u000a      }\u000a      ppsVar5 = &psVar4->next;\u000a      psVar4 = *ppsVar5;\u000a      piVar2 = loop;\u000a    } while (psVar4 != (successor *)0x0);\u000a  }\u000a  loop = piVar2;\u000a  return false;\u000a  while (loop->qlink = (item *)0x0, loop = piVar2, piVar2 != (item *)0x0) {\u000aLAB_004020c0:\u000a    piVar2 = loop->qlink;\u000a    error(0,0,0x405365,loop->str);\u000a    if (loop == k) {\u000a      psVar4 = *ppsVar5;\u000a      psVar1 = &psVar4->suc->count;\u000a      *psVar1 = *psVar1 - 1;\u000a      *ppsVar5 = psVar4->next;\u000a      piVar2 = loop;\u000a      break;\u000a    }\u000a  }\u000a  while (piVar2 != (item *)0x0) {\u000a    piVar3 = piVar2->qlink;\u000a    piVar2->qlink = (item *)0x0;\u000a    piVar2 = piVar3;\u000a  }\u000a  loop = piVar2;\u000a  return true;\u000a}\u000a\u000a
p381
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nCMP qword ptr [R14 + 0x20],0x0\nJZ 0x0040210b\nMOV RAX,qword ptr [0x006082c8]\nTEST RAX,RAX\nJZ 0x00402104\nMOV RCX,qword ptr [R14 + 0x30]\nTEST RCX,RCX\nJZ 0x0040210b\nLEA RBX,[R14 + 0x30]\nNOP dword ptr [RAX]\nCMP qword ptr [RCX],RAX\nJZ 0x004020b6\nMOV RBX,RCX\nADD RBX,0x8\nMOV RCX,qword ptr [RBX]\nTEST RCX,RCX\nJNZ 0x004020a0\nJMP 0x0040210b\nCMP qword ptr [R14 + 0x28],0x0\nJZ 0x00402100\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [0x006082c8]\nMOV RCX,qword ptr [RAX]\nMOV R15,qword ptr [RAX + 0x28]\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EDX,0x405365\nXOR EAX,EAX\nCALL 0x004014f0\nMOV RAX,qword ptr [0x006082c8]\nCMP RAX,R14\nJZ 0x00402113\nMOV qword ptr [RAX + 0x28],0x0\nMOV qword ptr [0x006082c8],R15\nTEST R15,R15\nJNZ 0x004020c0\nJMP 0x0040212b\nMOV qword ptr [R14 + 0x28],RAX\nMOV qword ptr [0x006082c8],R14\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV RAX,qword ptr [RBX]\nMOV RCX,qword ptr [RAX]\nDEC qword ptr [RCX + 0x20]\nMOV RAX,qword ptr [RAX + 0x8]\nMOV qword ptr [RBX],RAX\nMOV R15,qword ptr [0x006082c8]\nMOV AL,0x1\nTEST R15,R15\nJZ 0x0040210d\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RCX,R15\nMOV R15,qword ptr [RCX + 0x28]\nMOV qword ptr [RCX + 0x28],0x0\nTEST R15,R15\nJNZ 0x00402140\nMOV qword ptr [0x006082c8],R15\nJMP 0x0040210d\n'
p382
S'41 57\n41 56\n53\n49 89 fe\n49 83 7e 20 00\n0f 84 88 00 00 00\n48 8b 05 3e 62 20 00\n48 85 c0\n74 75\n49 8b 4e 30\n48 85 c9\n74 73\n49 8d 5e 30\n0f 1f 40 00\n48 39 01\n74 11\n48 89 cb\n48 83 c3 08\n48 8b 0b\n48 85 c9\n75 ec\neb 55\n49 83 7e 28 00\n74 43\n0f 1f 00\n48 8b 05 01 62 20 00\n48 8b 08\n4c 8b 78 28\n31 ff\n31 f6\nba 65 53 40 00\n31 c0\ne8 12 f4 ff ff\n48 8b 05 e3 61 20 00\n4c 39 f0\n74 29\n48 c7 40 28 00 00 00 00\n4c 89 3d cf 61 20 00\n4d 85 ff\n75 c2\neb 2b\n49 89 46 28\n4c 89 35 bd 61 20 00\n31 c0\n5b\n41 5e\n41 5f\nc3\n48 8b 03\n48 8b 08\n48 ff 49 20\n48 8b 40 08\n48 89 03\n4c 8b 3d 9d 61 20 00\nb0 01\n4d 85 ff\n74 db\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 f9\n4c 8b 79 28\n48 c7 41 28 00 00 00 00\n4d 85 ff\n75 ec\n4c 89 3d 6d 61 20 00\neb b0\n'
p383
S'.text:0000000000402070\n.text:0000000000402072\n.text:0000000000402074\n.text:0000000000402075\n.text:0000000000402078\n.text:000000000040207d\n.text:0000000000402083\n.text:000000000040208a\n.text:000000000040208d\n.text:000000000040208f\n.text:0000000000402093\n.text:0000000000402096\n.text:0000000000402098\n.text:000000000040209c\n.text:00000000004020a0\n.text:00000000004020a3\n.text:00000000004020a5\n.text:00000000004020a8\n.text:00000000004020ac\n.text:00000000004020af\n.text:00000000004020b2\n.text:00000000004020b4\n.text:00000000004020b6\n.text:00000000004020bb\n.text:00000000004020bd\n.text:00000000004020c0\n.text:00000000004020c7\n.text:00000000004020ca\n.text:00000000004020ce\n.text:00000000004020d0\n.text:00000000004020d2\n.text:00000000004020d7\n.text:00000000004020d9\n.text:00000000004020de\n.text:00000000004020e5\n.text:00000000004020e8\n.text:00000000004020ea\n.text:00000000004020f2\n.text:00000000004020f9\n.text:00000000004020fc\n.text:00000000004020fe\n.text:0000000000402100\n.text:0000000000402104\n.text:000000000040210b\n.text:000000000040210d\n.text:000000000040210e\n.text:0000000000402110\n.text:0000000000402112\n.text:0000000000402113\n.text:0000000000402116\n.text:0000000000402119\n.text:000000000040211d\n.text:0000000000402121\n.text:0000000000402124\n.text:000000000040212b\n.text:000000000040212d\n.text:0000000000402130\n.text:0000000000402132\n.text:0000000000402140\n.text:0000000000402143\n.text:0000000000402147\n.text:000000000040214f\n.text:0000000000402152\n.text:0000000000402154\n.text:000000000040215b\n'
p384
tp385
sS'clear_ungetc_buffer_preserving_position'
p386
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p387
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p388
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00404907\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00404920\n'
p389
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p390
S'.text:0000000000404900\n.text:0000000000404904\n.text:0000000000404906\n.text:0000000000404907\n.text:0000000000404909\n.text:000000000040490e\n'
p391
tp392
sS'xnmalloc'
p393
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p394
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p395
S'MOV RAX,RDI\nMUL RSI\nJO 0x00404631\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00404640\nPUSH RAX\nCALL 0x004047d0\n'
p396
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p397
S'.text:0000000000404620\n.text:0000000000404623\n.text:0000000000404626\n.text:0000000000404628\n.text:000000000040462c\n.text:000000000040462f\n.text:0000000000404631\n.text:0000000000404632\n'
p398
tp399
sS'quotearg_custom'
p400
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p401
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p402
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403940\n'
p403
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p404
S'.text:00000000004039c0\n.text:00000000004039c3\n.text:00000000004039c6\n.text:00000000004039c9\n.text:00000000004039cb\n.text:00000000004039ce\n.text:00000000004039d1\n.text:00000000004039d4\n'
p405
tp406
sS'free'
p407
(S'\n__stdcall free(void * __ptr)\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00608020)();\u000a  return;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x00608020]\n'
p410
S'ff 25 ca 6d 20 00\n'
p411
S'.plt:0000000000401250\n'
p412
tp413
sS'close'
p414
(S'\n__stdcall close(int __fd)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006080e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x006080e0]\n'
p417
S'ff 25 0a 6d 20 00\n'
p418
S'.plt:00000000004013d0\n'
p419
tp420
sS'getenv'
p421
(S'\n__stdcall getenv(char * __name)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00608018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x00608018]\n'
p424
S'ff 25 d2 6d 20 00\n'
p425
S'.plt:0000000000401240\n'
p426
tp427
sS'quotearg_char'
p428
(S'\n__stdcall quotearg_char(char * arg)\n'
p429
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00403850\n'
p431
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p432
S'.text:00000000004038c0\n.text:00000000004038c2\n.text:00000000004038c9\n.text:00000000004038cb\n'
p433
tp434
sS'malloc'
p435
(S'\n__stdcall malloc(size_t __size)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00608128)();\u000a  return pvVar1;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x00608128]\n'
p438
S'ff 25 c2 6c 20 00\n'
p439
S'.plt:0000000000401460\n'
p440
tp441
sS'c_tolower'
p442
(S'\n__stdcall c_tolower()\n'
p443
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p445
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p446
S'.text:0000000000404ac0\n.text:0000000000404ac3\n.text:0000000000404ac6\n.text:0000000000404ac9\n.text:0000000000404acc\n'
p447
tp448
sS'rpl_fseeko'
p449
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p450
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_00608180)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p451
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00404948\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00404948\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0040495a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401510\nMOV RDI,RBX\nCALL 0x00401450\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401380\nCMP RAX,-0x1\nJZ 0x00404983\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00404988\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p452
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 b6 cb ff ff\n48 89 df\ne8 ee ca ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 11 ca ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p453
S'.text:0000000000404920\n.text:0000000000404921\n.text:0000000000404923\n.text:0000000000404924\n.text:0000000000404927\n.text:000000000040492a\n.text:000000000040492d\n.text:0000000000404931\n.text:0000000000404935\n.text:0000000000404937\n.text:000000000040493b\n.text:000000000040493f\n.text:0000000000404941\n.text:0000000000404946\n.text:0000000000404948\n.text:000000000040494b\n.text:000000000040494e\n.text:0000000000404951\n.text:0000000000404952\n.text:0000000000404954\n.text:0000000000404955\n.text:000000000040495a\n.text:000000000040495d\n.text:0000000000404962\n.text:0000000000404964\n.text:0000000000404967\n.text:000000000040496a\n.text:000000000040496f\n.text:0000000000404973\n.text:0000000000404975\n.text:0000000000404978\n.text:000000000040497f\n.text:0000000000404981\n.text:0000000000404983\n.text:0000000000404988\n.text:0000000000404989\n.text:000000000040498b\n.text:000000000040498c\n'
p454
tp455
sS'getopt_long'
p456
(S'\n__stdcall getopt_long()\n'
p457
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_00608098)();\u000a  return;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x00608098]\n'
p459
S'ff 25 52 6d 20 00\n'
p460
S'.plt:0000000000401340\n'
p461
tp462
sS'quote_n_mem'
p463
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p464
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p465
S'MOV ECX,0x608200\nJMP 0x00403540\n'
p466
S'b9 00 82 60 00\ne9 36 fb ff ff\n'
p467
S'.text:0000000000403a00\n.text:0000000000403a05\n'
p468
tp469
sS'xstrdup'
p470
(S'\n__stdcall xstrdup(char * string)\n'
p471
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p472
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401330\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00404780\n'
p473
S'53\n48 89 fb\ne8 77 cb ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p474
S'.text:00000000004047b0\n.text:00000000004047b1\n.text:00000000004047b4\n.text:00000000004047b9\n.text:00000000004047bd\n.text:00000000004047c0\n.text:00000000004047c1\n'
p475
tp476
sS'c_ispunct'
p477
(S'\n__stdcall c_ispunct()\n'
p478
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p479
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00404a62\nMOV AL,0x1\nJMP qword ptr [0x405d00 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p480
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 00 5d 40 00\nc3\n31 c0\nc3\n'
p481
S'.text:0000000000404a50\n.text:0000000000404a53\n.text:0000000000404a56\n.text:0000000000404a58\n.text:0000000000404a5a\n.text:0000000000404a61\n.text:0000000000404a62\n.text:0000000000404a64\n'
p482
tp483
sS'quotearg_style'
p484
(S'\n__stdcall quotearg_style(char * arg)\n'
p485
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p486
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00403730\n'
p487
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p488
S'.text:0000000000403810\n.text:0000000000403813\n.text:0000000000403815\n.text:0000000000403817\n.text:0000000000403819\n.text:000000000040381c\n'
p489
tp490
sS'puts'
p491
(S'\n__stdcall puts(char * __s)\n'
p492
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint puts(char *__s)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_puts_00608058)();\u000a  return iVar1;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x00608058]\n'
p494
S'ff 25 92 6d 20 00\n'
p495
S'.plt:00000000004012c0\n'
p496
tp497
sS'fscanf'
p498
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p499
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006080d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p500
S'JMP qword ptr [0x006080d8]\n'
p501
S'ff 25 12 6d 20 00\n'
p502
S'.plt:00000000004013c0\n'
p503
tp504
sS'emit_try_help'
p505
(S'\n__stdcall emit_try_help()\n'
p506
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p507
S'PUSH RBX\nMOV RBX,qword ptr [0x006082a0]\nXOR EDI,EDI\nMOV ESI,0x405048\nMOV EDX,0x5\nCALL 0x00401310\nMOV RDX,RAX\nMOV RCX,qword ptr [0x006082e0]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401550\n'
p508
S'53\n48 8b 1d 48 6b 20 00\n31 ff\nbe 48 50 40 00\nba 05 00 00 00\ne8 a7 fb ff ff\n48 89 c2\n48 8b 0d 6d 6b 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 cd fd ff ff\n'
p509
S'.text:0000000000401750\n.text:0000000000401751\n.text:0000000000401758\n.text:000000000040175a\n.text:000000000040175f\n.text:0000000000401764\n.text:0000000000401769\n.text:000000000040176c\n.text:0000000000401773\n.text:0000000000401778\n.text:000000000040177a\n.text:000000000040177d\n.text:000000000040177e\n'
p510
tp511
sS'memcpy'
p512
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00608118)();\u000a  return pvVar1;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x00608118]\n'
p515
S'ff 25 d2 6c 20 00\n'
p516
S'.plt:0000000000401440\n'
p517
tp518
sS'strrchr'
p519
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p520
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006080b0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x006080b0]\n'
p522
S'ff 25 3a 6d 20 00\n'
p523
S'.plt:0000000000401370\n'
p524
tp525
sS'close_stdout_set_ignore_EPIPE'
p526
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p527
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p528
S'MOV byte ptr [0x006082d8],DIL\nRET\n'
p529
S'40 88 3d f1 60 20 00\nc3\n'
p530
S'.text:00000000004021e0\n.text:00000000004021e7\n'
p531
tp532
sS'quotearg_alloc_mem'
p533
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p534
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p535
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x6082f0\nCMOVNZ R12,RCX\nCALL 0x00401270\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402760\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00404710\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402760\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040348a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p536
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc f0 82 60 00\n4c 0f 45 e1\ne8 88 de ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 d1 12 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p537
S'.text:00000000004033b0\n.text:00000000004033b1\n.text:00000000004033b3\n.text:00000000004033b5\n.text:00000000004033b7\n.text:00000000004033b9\n.text:00000000004033ba\n.text:00000000004033be\n.text:00000000004033c1\n.text:00000000004033c6\n.text:00000000004033c9\n.text:00000000004033ce\n.text:00000000004033d1\n.text:00000000004033d6\n.text:00000000004033d9\n.text:00000000004033df\n.text:00000000004033e3\n.text:00000000004033e8\n.text:00000000004033ed\n.text:00000000004033ef\n.text:00000000004033f3\n.text:00000000004033f5\n.text:00000000004033f8\n.text:00000000004033fc\n.text:0000000000403401\n.text:0000000000403405\n.text:000000000040340a\n.text:000000000040340e\n.text:0000000000403410\n.text:0000000000403412\n.text:0000000000403415\n.text:0000000000403418\n.text:000000000040341b\n.text:0000000000403420\n.text:0000000000403425\n.text:0000000000403427\n.text:000000000040342c\n.text:0000000000403430\n.text:0000000000403433\n.text:0000000000403437\n.text:000000000040343a\n.text:000000000040343f\n.text:0000000000403442\n.text:0000000000403446\n.text:000000000040344a\n.text:000000000040344d\n.text:0000000000403450\n.text:0000000000403455\n.text:000000000040345a\n.text:000000000040345d\n.text:0000000000403462\n.text:0000000000403467\n.text:0000000000403469\n.text:000000000040346e\n.text:0000000000403473\n.text:0000000000403477\n.text:000000000040347a\n.text:000000000040347e\n.text:0000000000403483\n.text:0000000000403485\n.text:0000000000403487\n.text:000000000040348a\n.text:000000000040348d\n.text:0000000000403491\n.text:0000000000403492\n.text:0000000000403494\n.text:0000000000403496\n.text:0000000000403498\n.text:000000000040349a\n.text:000000000040349b\n'
p538
tp539
sS'iswprint'
p540
(S'\n__stdcall iswprint(wint_t __wc)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_006081b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x006081b0]\n'
p543
S'ff 25 3a 6c 20 00\n'
p544
S'.plt:0000000000401570\n'
p545
tp546
sS'quotearg_style_mem'
p547
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p548
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p549
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004037d0\n'
p550
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p551
S'.text:0000000000403830\n.text:0000000000403833\n.text:0000000000403836\n.text:0000000000403838\n.text:000000000040383a\n.text:000000000040383c\n.text:000000000040383f\n.text:0000000000403842\n'
p552
tp553
sS'xalloc_die'
p554
(S'\n__stdcall xalloc_die()\n'
p555
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x405365,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p556
S'PUSH RBX\nMOV EBX,dword ptr [0x006081d8]\nXOR EDI,EDI\nMOV ESI,0x405cef\nMOV EDX,0x5\nCALL 0x00401310\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x405365\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004014f0\nCALL 0x00401260\n'
p557
S'53\n8b 1d 01 3a 20 00\n31 ff\nbe ef 5c 40 00\nba 05 00 00 00\ne8 28 cb ff ff\n48 89 c1\n31 f6\nba 65 53 40 00\n31 c0\n89 df\ne8 f5 cc ff ff\ne8 60 ca ff ff\n'
p558
S'.text:00000000004047d0\n.text:00000000004047d1\n.text:00000000004047d7\n.text:00000000004047d9\n.text:00000000004047de\n.text:00000000004047e3\n.text:00000000004047e8\n.text:00000000004047eb\n.text:00000000004047ed\n.text:00000000004047f2\n.text:00000000004047f4\n.text:00000000004047f6\n.text:00000000004047fb\n'
p559
tp560
sS'c_isspace'
p561
(S'\n__stdcall c_isspace()\n'
p562
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p563
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00404a85\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p564
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p565
S'.text:0000000000404a70\n.text:0000000000404a73\n.text:0000000000404a76\n.text:0000000000404a78\n.text:0000000000404a7d\n.text:0000000000404a7f\n.text:0000000000404a81\n.text:0000000000404a84\n.text:0000000000404a85\n.text:0000000000404a87\n'
p566
tp567
sS'quotearg_n_custom'
p568
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p569
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p570
S'MOV R8,-0x1\nJMP 0x00403950\n'
p571
S'49 c7 c0 ff ff ff ff\neb 07\n'
p572
S'.text:0000000000403940\n.text:0000000000403947\n'
p573
tp574
sS'open'
p575
(S'\n__stdcall open(char * __file, int __oflag)\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_00608178)();\u000a  return iVar1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x00608178]\n'
p578
S'ff 25 72 6c 20 00\n'
p579
S'.plt:0000000000401500\n'
p580
tp581
sS'quotearg_n_custom_mem'
p582
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p583
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p584
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x00608320]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x00608310]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00608300]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006082f0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004026b0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403540\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p585
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 b7 49 20 00\n48 89 44 24 30\n0f 10 05 9b 49 20 00\n0f 29 44 24 20\n0f 10 05 7f 49 20 00\n0f 29 44 24 10\n0f 10 05 63 49 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p586
S'.text:0000000000403950\n.text:0000000000403951\n.text:0000000000403953\n.text:0000000000403955\n.text:0000000000403956\n.text:000000000040395a\n.text:000000000040395d\n.text:0000000000403960\n.text:0000000000403962\n.text:0000000000403969\n.text:000000000040396e\n.text:0000000000403975\n.text:000000000040397a\n.text:0000000000403981\n.text:0000000000403986\n.text:000000000040398d\n.text:0000000000403991\n.text:0000000000403994\n.text:0000000000403997\n.text:000000000040399c\n.text:000000000040399e\n.text:00000000004039a1\n.text:00000000004039a4\n.text:00000000004039a7\n.text:00000000004039ac\n.text:00000000004039b0\n.text:00000000004039b1\n.text:00000000004039b3\n.text:00000000004039b5\n.text:00000000004039b6\n'
p587
tp588
sS'_init'
p589
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p590
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00607ff8;\u000a  if (PTR___gmon_start___00607ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00607ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p591
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00607ff8]\nTEST RAX,RAX\nJZ 0x0040122a\nCALL RAX\nADD RSP,0x8\nRET\n'
p592
S'48 83 ec 08\n48 8b 05 d5 6d 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p593
S'.init:0000000000401218\n.init:000000000040121c\n.init:0000000000401223\n.init:0000000000401226\n.init:0000000000401228\n.init:000000000040122a\n.init:000000000040122e\n'
p594
tp595
sS'__freading'
p596
(S'\n__stdcall __freading()\n'
p597
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00608148)();\u000a  return;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x00608148]\n'
p599
S'ff 25 a2 6c 20 00\n'
p600
S'.plt:00000000004014a0\n'
p601
tp602
sS'readtokens'
p603
(S'\n__stdcall readtokens(FILE * stream, size_t projected_n_tokens, char * delim, size_t n_delim, char * * * tokens_out, size_t * * token_lengths)\n'
p604
V\u000asize_t readtokens(FILE *stream,size_t projected_n_tokens,char *delim,size_t n_delim,\u000a                 char ***tokens_out,size_t **token_lengths)\u000a\u000a{\u000a  char *__dest;\u000a  size_t n;\u000a  ulong uVar1;\u000a  size_t *p;\u000a  char **p_00;\u000a  size_t local_70;\u000a  char ***local_68;\u000a  size_t **local_60;\u000a  FILE *local_58;\u000a  char *local_50;\u000a  size_t local_48;\u000a  token_buffer local_40;\u000a  \u000a  n = 0x40;\u000a  if (projected_n_tokens != 0) {\u000a    n = projected_n_tokens + 1;\u000a  }\u000a  local_70 = n;\u000a  local_68 = tokens_out;\u000a  local_60 = token_lengths;\u000a  local_58 = stream;\u000a  local_50 = delim;\u000a  local_48 = n_delim;\u000a  p_00 = (char **)xnmalloc(n,8);\u000a  p = (size_t *)xnmalloc(n,8);\u000a  init_tokenbuffer(&local_40);\u000a  uVar1 = 0;\u000a  while( true ) {\u000a    n = readtoken(local_58,local_50,local_48,&local_40);\u000a    if (local_70 <= uVar1) {\u000a      p_00 = (char **)x2nrealloc(p_00,&local_70,8);\u000a      p = (size_t *)xnrealloc(p,local_70,8);\u000a    }\u000a    if (n == 0xffffffffffffffff) break;\u000a    __dest = (char *)xnmalloc(n + 1,1);\u000a    p[uVar1] = n;\u000a    memcpy(__dest,local_40.buffer,n + 1);\u000a    p_00[uVar1] = __dest;\u000a    uVar1 = uVar1 + 1;\u000a  }\u000a  p_00[uVar1] = (char *)0x0;\u000a  p[uVar1] = 0;\u000a  free(local_40.buffer);\u000a  *local_68 = p_00;\u000a  if (local_60 == (size_t **)0x0) {\u000a    free(p);\u000a  }\u000a  else {\u000a    *local_60 = p;\u000a  }\u000a  return uVar1;\u000a}\u000a\u000a
p605
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV qword ptr [RSP + 0x18],R9\nMOV qword ptr [RSP + 0x10],R8\nMOV qword ptr [RSP + 0x30],RCX\nMOV qword ptr [RSP + 0x28],RDX\nMOV qword ptr [RSP + 0x20],RDI\nTEST RSI,RSI\nLEA RAX,[RSI + 0x1]\nMOV EBP,0x40\nCMOVNZ RBP,RAX\nMOV qword ptr [RSP + 0x8],RBP\nMOV ESI,0x8\nMOV RDI,RBP\nCALL 0x00404620\nMOV R15,RAX\nMOV ESI,0x8\nMOV RDI,RBP\nCALL 0x00404620\nMOV R14,RAX\nLEA RDI,[RSP + 0x38]\nCALL 0x00403e40\nXOR EBP,EBP\nJMP 0x00404071\nMOV R13,R12\nINC R13\nMOV ESI,0x1\nMOV RDI,R13\nCALL 0x00404620\nMOV RBX,RAX\nMOV qword ptr [R14 + RBP*0x8],R12\nMOV RSI,qword ptr [RSP + 0x40]\nMOV RDI,RBX\nMOV RDX,R13\nCALL 0x00401440\nMOV qword ptr [R15 + RBP*0x8],RBX\nINC RBP\nMOV RDI,qword ptr [RSP + 0x20]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV RDX,qword ptr [RSP + 0x30]\nLEA RCX,[RSP + 0x38]\nCALL 0x00403e50\nMOV R12,RAX\nCMP RBP,qword ptr [RSP + 0x8]\nJC 0x004040be\nMOV EDX,0x8\nMOV RDI,R15\nLEA RSI,[RSP + 0x8]\nCALL 0x004046b0\nMOV R15,RAX\nMOV RSI,qword ptr [RSP + 0x8]\nMOV EDX,0x8\nMOV RDI,R14\nCALL 0x00404660\nMOV R14,RAX\nCMP R12,-0x1\nJNZ 0x00404040\nMOV qword ptr [R15 + RBP*0x8],0x0\nMOV qword ptr [R14 + RBP*0x8],0x0\nMOV RDI,qword ptr [RSP + 0x40]\nCALL 0x00401250\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RAX],R15\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x004040f9\nMOV qword ptr [RAX],R14\nJMP 0x00404101\nMOV RDI,R14\nCALL 0x00401250\nMOV RAX,RBP\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p606
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n4c 89 4c 24 18\n4c 89 44 24 10\n48 89 4c 24 30\n48 89 54 24 28\n48 89 7c 24 20\n48 85 f6\n48 8d 46 01\nbd 40 00 00 00\n48 0f 45 e8\n48 89 6c 24 08\nbe 08 00 00 00\n48 89 ef\ne8 07 06 00 00\n49 89 c7\nbe 08 00 00 00\n48 89 ef\ne8 f7 05 00 00\n49 89 c6\n48 8d 7c 24 38\ne8 0a fe ff ff\n31 ed\neb 37\n4d 89 e5\n49 ff c5\nbe 01 00 00 00\n4c 89 ef\ne8 cd 05 00 00\n48 89 c3\n4d 89 24 ee\n48 8b 74 24 40\n48 89 df\n4c 89 ea\ne8 d6 d3 ff ff\n49 89 1c ef\n48 ff c5\n48 8b 7c 24 20\n48 8b 74 24 28\n48 8b 54 24 30\n48 8d 4c 24 38\ne8 c6 fd ff ff\n49 89 c4\n48 3b 6c 24 08\n72 2a\nba 08 00 00 00\n4c 89 ff\n48 8d 74 24 08\ne8 0a 06 00 00\n49 89 c7\n48 8b 74 24 08\nba 08 00 00 00\n4c 89 f7\ne8 a5 05 00 00\n49 89 c6\n49 83 fc ff\n0f 85 78 ff ff ff\n49 c7 04 ef 00 00 00 00\n49 c7 04 ee 00 00 00 00\n48 8b 7c 24 40\ne8 6e d1 ff ff\n48 8b 44 24 10\n4c 89 38\n48 8b 44 24 18\n48 85 c0\n74 05\n4c 89 30\neb 08\n4c 89 f7\ne8 4f d1 ff ff\n48 89 e8\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p607
S'.text:0000000000403fd0\n.text:0000000000403fd1\n.text:0000000000403fd3\n.text:0000000000403fd5\n.text:0000000000403fd7\n.text:0000000000403fd9\n.text:0000000000403fda\n.text:0000000000403fde\n.text:0000000000403fe3\n.text:0000000000403fe8\n.text:0000000000403fed\n.text:0000000000403ff2\n.text:0000000000403ff7\n.text:0000000000403ffa\n.text:0000000000403ffe\n.text:0000000000404003\n.text:0000000000404007\n.text:000000000040400c\n.text:0000000000404011\n.text:0000000000404014\n.text:0000000000404019\n.text:000000000040401c\n.text:0000000000404021\n.text:0000000000404024\n.text:0000000000404029\n.text:000000000040402c\n.text:0000000000404031\n.text:0000000000404036\n.text:0000000000404038\n.text:0000000000404040\n.text:0000000000404043\n.text:0000000000404046\n.text:000000000040404b\n.text:000000000040404e\n.text:0000000000404053\n.text:0000000000404056\n.text:000000000040405a\n.text:000000000040405f\n.text:0000000000404062\n.text:0000000000404065\n.text:000000000040406a\n.text:000000000040406e\n.text:0000000000404071\n.text:0000000000404076\n.text:000000000040407b\n.text:0000000000404080\n.text:0000000000404085\n.text:000000000040408a\n.text:000000000040408d\n.text:0000000000404092\n.text:0000000000404094\n.text:0000000000404099\n.text:000000000040409c\n.text:00000000004040a1\n.text:00000000004040a6\n.text:00000000004040a9\n.text:00000000004040ae\n.text:00000000004040b3\n.text:00000000004040b6\n.text:00000000004040bb\n.text:00000000004040be\n.text:00000000004040c2\n.text:00000000004040c8\n.text:00000000004040d0\n.text:00000000004040d8\n.text:00000000004040dd\n.text:00000000004040e2\n.text:00000000004040e7\n.text:00000000004040ea\n.text:00000000004040ef\n.text:00000000004040f2\n.text:00000000004040f4\n.text:00000000004040f7\n.text:00000000004040f9\n.text:00000000004040fc\n.text:0000000000404101\n.text:0000000000404104\n.text:0000000000404108\n.text:0000000000404109\n.text:000000000040410b\n.text:000000000040410d\n.text:000000000040410f\n.text:0000000000404111\n.text:0000000000404112\n'
p608
tp609
sS'set_quoting_flags'
p610
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p611
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p612
S'TEST RDI,RDI\nMOV ECX,0x6082f0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p613
S'48 85 ff\nb9 f0 82 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p614
S'.text:0000000000402690\n.text:0000000000402693\n.text:0000000000402698\n.text:000000000040269c\n.text:000000000040269f\n.text:00000000004026a2\n'
p615
tp616
sS'fputs_unlocked'
p617
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p618
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_006080f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p619
S'JMP qword ptr [0x006080f8]\n'
p620
S'ff 25 f2 6c 20 00\n'
p621
S'.plt:0000000000401400\n'
p622
tp623
sS'main'
p624
(S'\n__stdcall main(char * * argv)\n'
p625
V\u000aint main(char **argv)\u000a\u000a{\u000a  size_t *psVar1;\u000a  char cVar2;\u000a  successor *psVar3;\u000a  byte bVar4;\u000a  bool bVar5;\u000a  _Bool _Var6;\u000a  int iVar7;\u000a  uint uVar8;\u000a  undefined8 uVar9;\u000a  char *name;\u000a  item *root;\u000a  FILE *pFVar10;\u000a  uint *puVar11;\u000a  item *j;\u000a  size_t sVar12;\u000a  item *k;\u000a  char **command_name;\u000a  token_buffer tStack88;\u000a  undefined8 uStack32;\u000a  \u000a  argv = (char **)((ulong)argv & 0xffffffff);\u000a  uStack32 = 0x401900;\u000a  set_program_name(*command_name);\u000a  uStack32 = 0x40190f;\u000a  setlocale(6,"");\u000a  uStack32 = 0x40191e;\u000a  bindtextdomain(0x405121,"/usr/local/share/locale");\u000a  uStack32 = 0x401928;\u000a  textdomain(0x405121);\u000a  uStack32 = 0x401932;\u000a  atexit(close_stdout);\u000a  uStack32 = 0;\u000a  parse_long_options(argv,(char *)command_name,"tsort","coreutils",(void (*)(int))Version,usage);\u000a  uStack32 = 0x401977;\u000a  iVar7 = getopt_long(argv);\u000a  if (iVar7 == -1) {\u000a    if ((int)argv - optind < 2) {\u000a      if (optind == (int)argv) {\u000a        name = "-";\u000a      }\u000a      else {\u000a        name = command_name[(long)optind];\u000a      }\u000a      uStack32 = 0x4019a0;\u000a      _Var6 = tsort(name);\u000a      return (int)(uint)(_Var6 ^ 1);\u000a    }\u000a  }\u000a  else {\u000a    uStack32 = 0x4019b6;\u000a    usage(1);\u000a  }\u000a  uStack32 = 0x4019c7;\u000a  uVar9 = dcgettext(0,"extra operand %s",5);\u000a  uStack32 = 0x4019db;\u000a  name = quote(command_name[(long)optind + 1]);\u000a  uStack32 = 0x4019ec;\u000a  error(0,0,uVar9,name);\u000a  name = (char *)0x1;\u000a  uStack32 = 0x4019f6;\u000a  usage();\u000a  if (*name == '-') {\u000a    cVar2 = name[1];\u000a    uStack32 = uVar9;\u000a    root = new_item((char *)0x0);\u000a    if (cVar2 == 0) {\u000a      bVar5 = true;\u000a      goto LAB_00401a87;\u000a    }\u000a  }\u000a  else {\u000a    uStack32 = uVar9;\u000a    root = new_item((char *)0x0);\u000a  }\u000a  pFVar10 = freopen_safer(name,"r",stdin);\u000a  if (pFVar10 == (FILE *)0x0) {\u000a    puVar11 = (uint *)__errno_location();\u000a    uVar8 = *puVar11;\u000a    bVar5 = false;\u000a    name = quotearg_n_style_colon((char *)0x0);\u000a    error(1,(ulong)uVar8,0x405365,name);\u000a  }\u000a  else {\u000a    bVar5 = false;\u000a  }\u000aLAB_00401a87:\u000a  fadvise(stdin);\u000a  init_tokenbuffer(&tStack88);\u000a  do {\u000a    k = (item *)0x0;\u000a    do {\u000a      j = k;\u000a      sVar12 = readtoken(stdin," \u005ct\u005cn",3,&tStack88);\u000a      if (sVar12 == 0xffffffffffffffff) {\u000a        if (j != (item *)0x0) {\u000a          uVar9 = dcgettext(0,"%s: input contains an odd number of tokens",5);\u000a          name = quotearg_n_style_colon((char *)0x0);\u000a          error(1,0,uVar9,name);\u000a        }\u000a        walk_tree(root,count_items);\u000a        bVar4 = 1;\u000a        sVar12 = n_strings;\u000a        while (sVar12 != 0) {\u000a          walk_tree(root,scan_zeros);\u000a          while (head != (item *)0x0) {\u000a            psVar3 = head->top;\u000a            puts(head->str);\u000a            head->str = (char *)0x0;\u000a            n_strings = n_strings - 1;\u000a            while (psVar3 != (successor *)0x0) {\u000a              k = psVar3->suc;\u000a              psVar1 = &k->count;\u000a              *psVar1 = *psVar1 - 1;\u000a              if (*psVar1 == 0) {\u000a                zeros->qlink = k;\u000a                zeros = k;\u000a              }\u000a              psVar3 = psVar3->next;\u000a            }\u000a            head = head->qlink;\u000a          }\u000a          sVar12 = 0;\u000a          if (n_strings != 0) {\u000a            uVar9 = dcgettext(0,"%s: input contains a loop:",5);\u000a            name = quotearg_n_style_colon((char *)0x0);\u000a            error(0,0,uVar9,name);\u000a            do {\u000a              walk_tree(root,detect_loop);\u000a            } while (loop != (item *)0x0);\u000a            bVar4 = 0;\u000a            sVar12 = n_strings;\u000a          }\u000a        }\u000a        uVar8 = rpl_fclose(stdin);\u000a        if (uVar8 != 0) {\u000a          puVar11 = (uint *)__errno_location();\u000a          uVar8 = *puVar11;\u000a          if (bVar5) {\u000a            name = (char *)dcgettext(0,"standard input",5);\u000a          }\u000a          else {\u000a            name = quotearg_n_style_colon((char *)0x0);\u000a          }\u000a          uVar8 = error(1,(ulong)uVar8,0x405365,name);\u000a        }\u000a        return (int)(uVar8 & 0xffffff00 | (uint)bVar4);\u000a      }\u000a      if (sVar12 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("len != 0","src/tsort.c",0x1cd,"_Bool tsort(const char *)");\u000a      }\u000a      k = search_item(root,tStack88.buffer);\u000a    } while (j == (item *)0x0);\u000a    record_relation(j,k);\u000a  } while( true );\u000a}\u000a\u000a
p626
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV EBP,EDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00402540\nMOV EDI,0x6\nMOV ESI,0x4051f0\nCALL 0x004014d0\nMOV EDI,0x405121\nMOV ESI,0x405011\nCALL 0x00401300\nMOV EDI,0x405121\nCALL 0x004012e0\nMOV EDI,0x4021f0\nCALL 0x00404f00\nMOV R8,qword ptr [0x006081d0]\nMOV EDX,0x40500b\nMOV ECX,0x405121\nMOV R9D,0x401690\nMOV EAX,0x0\nMOV EDI,EBP\nMOV RSI,RBX\nPUSH 0x0\nPUSH 0x405029\nCALL 0x00402450\nADD RSP,0x10\nMOV EDX,0x4051f0\nXOR ECX,ECX\nXOR R8D,R8D\nMOV EDI,EBP\nMOV RSI,RBX\nCALL 0x00401340\nCMP EAX,-0x1\nJNZ 0x004019ac\nMOVSXD RAX,dword ptr [0x00608258]\nMOV ECX,EBP\nSUB ECX,EAX\nCMP ECX,0x2\nJGE 0x004019b6\nCMP EAX,EBP\nJNZ 0x00401997\nMOV EDI,0x405432\nJMP 0x0040199b\nMOV RDI,qword ptr [RBX + RAX*0x8]\nCALL 0x00401a00\nXOR AL,0x1\nMOVZX EAX,AL\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV EDI,0x1\nCALL 0x00401690\nXOR EDI,EDI\nMOV ESI,0x405037\nMOV EDX,0x5\nCALL 0x00401310\nMOV RBP,RAX\nMOVSXD RAX,dword ptr [0x00608258]\nMOV RDI,qword ptr [RBX + RAX*0x8 + 0x8]\nCALL 0x00403a30\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x004014f0\nMOV EDI,0x1\nCALL 0x00401690\nNOP word ptr CS:[RAX + RAX*0x1]\n'
p627
S'55\n53\n50\n48 89 f3\n89 fd\n48 8b 3b\ne8 40 0c 00 00\nbf 06 00 00 00\nbe f0 51 40 00\ne8 c1 fb ff ff\nbf 21 51 40 00\nbe 11 50 40 00\ne8 e2 f9 ff ff\nbf 21 51 40 00\ne8 b8 f9 ff ff\nbf f0 21 40 00\ne8 ce 35 00 00\n4c 8b 05 97 68 20 00\nba 0b 50 40 00\nb9 21 51 40 00\n41 b9 90 16 40 00\nb8 00 00 00 00\n89 ef\n48 89 de\n6a 00\n68 29 50 40 00\ne8 f1 0a 00 00\n48 83 c4 10\nba f0 51 40 00\n31 c9\n45 31 c0\n89 ef\n48 89 de\ne8 c9 f9 ff ff\n83 f8 ff\n75 30\n48 63 05 d5 68 20 00\n89 e9\n29 c1\n83 f9 02\n7d 2a\n39 e8\n75 07\nbf 32 54 40 00\neb 04\n48 8b 3c c3\ne8 60 00 00 00\n34 01\n0f b6 c0\n48 83 c4 08\n5b\n5d\nc3\nbf 01 00 00 00\ne8 da fc ff ff\n31 ff\nbe 37 50 40 00\nba 05 00 00 00\ne8 49 f9 ff ff\n48 89 c5\n48 63 05 87 68 20 00\n48 8b 7c c3 08\ne8 55 20 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 04 fb ff ff\nbf 01 00 00 00\ne8 9a fc ff ff\n66 2e 0f 1f 84 00 00 00 00 00\n'
p628
S'.text:00000000004018f0\n.text:00000000004018f1\n.text:00000000004018f2\n.text:00000000004018f3\n.text:00000000004018f6\n.text:00000000004018f8\n.text:00000000004018fb\n.text:0000000000401900\n.text:0000000000401905\n.text:000000000040190a\n.text:000000000040190f\n.text:0000000000401914\n.text:0000000000401919\n.text:000000000040191e\n.text:0000000000401923\n.text:0000000000401928\n.text:000000000040192d\n.text:0000000000401932\n.text:0000000000401939\n.text:000000000040193e\n.text:0000000000401943\n.text:0000000000401949\n.text:000000000040194e\n.text:0000000000401950\n.text:0000000000401953\n.text:0000000000401955\n.text:000000000040195a\n.text:000000000040195f\n.text:0000000000401963\n.text:0000000000401968\n.text:000000000040196a\n.text:000000000040196d\n.text:000000000040196f\n.text:0000000000401972\n.text:0000000000401977\n.text:000000000040197a\n.text:000000000040197c\n.text:0000000000401983\n.text:0000000000401985\n.text:0000000000401987\n.text:000000000040198a\n.text:000000000040198c\n.text:000000000040198e\n.text:0000000000401990\n.text:0000000000401995\n.text:0000000000401997\n.text:000000000040199b\n.text:00000000004019a0\n.text:00000000004019a2\n.text:00000000004019a5\n.text:00000000004019a9\n.text:00000000004019aa\n.text:00000000004019ab\n.text:00000000004019ac\n.text:00000000004019b1\n.text:00000000004019b6\n.text:00000000004019b8\n.text:00000000004019bd\n.text:00000000004019c2\n.text:00000000004019c7\n.text:00000000004019ca\n.text:00000000004019d1\n.text:00000000004019d6\n.text:00000000004019db\n.text:00000000004019de\n.text:00000000004019e0\n.text:00000000004019e2\n.text:00000000004019e4\n.text:00000000004019e7\n.text:00000000004019ec\n.text:00000000004019f1\n.text:00000000004019f6\n'
p629
tp630
sS'tsort'
p631
(S'\n__stdcall tsort(char * file)\n'
p632
V\u000a_Bool tsort(char *file)\u000a\u000a{\u000a  size_t *psVar1;\u000a  char cVar2;\u000a  uint uVar3;\u000a  successor *psVar4;\u000a  undefined uVar5;\u000a  bool bVar6;\u000a  int iVar7;\u000a  item *root;\u000a  FILE *pFVar8;\u000a  uint *puVar9;\u000a  item *j;\u000a  size_t sVar10;\u000a  item *k;\u000a  undefined8 uVar11;\u000a  char *pcVar12;\u000a  token_buffer local_40;\u000a  \u000a  if (*file == '-') {\u000a    cVar2 = file[1];\u000a    root = new_item((char *)0x0);\u000a    if (cVar2 == 0) {\u000a      bVar6 = true;\u000a      goto LAB_00401a87;\u000a    }\u000a  }\u000a  else {\u000a    root = new_item((char *)0x0);\u000a  }\u000a  pFVar8 = freopen_safer(file,"r",stdin);\u000a  if (pFVar8 == (FILE *)0x0) {\u000a    puVar9 = (uint *)__errno_location();\u000a    uVar3 = *puVar9;\u000a    bVar6 = false;\u000a    pcVar12 = quotearg_n_style_colon((char *)0x0);\u000a    error(1,(ulong)uVar3,0x405365,pcVar12);\u000a  }\u000a  else {\u000a    bVar6 = false;\u000a  }\u000aLAB_00401a87:\u000a  fadvise(stdin);\u000a  init_tokenbuffer(&local_40);\u000a  do {\u000a    k = (item *)0x0;\u000a    do {\u000a      j = k;\u000a      sVar10 = readtoken(stdin," \u005ct\u005cn",3,&local_40);\u000a      if (sVar10 == 0xffffffffffffffff) {\u000a        if (j != (item *)0x0) {\u000a          uVar11 = dcgettext(0,"%s: input contains an odd number of tokens",5);\u000a          pcVar12 = quotearg_n_style_colon((char *)0x0);\u000a          error(1,0,uVar11,pcVar12);\u000a        }\u000a        walk_tree(root,count_items);\u000a        uVar5 = 1;\u000a        sVar10 = n_strings;\u000a        while (sVar10 != 0) {\u000a          walk_tree(root,scan_zeros);\u000a          while (head != (item *)0x0) {\u000a            psVar4 = head->top;\u000a            puts(head->str);\u000a            head->str = (char *)0x0;\u000a            n_strings = n_strings - 1;\u000a            while (psVar4 != (successor *)0x0) {\u000a              k = psVar4->suc;\u000a              psVar1 = &k->count;\u000a              *psVar1 = *psVar1 - 1;\u000a              if (*psVar1 == 0) {\u000a                zeros->qlink = k;\u000a                zeros = k;\u000a              }\u000a              psVar4 = psVar4->next;\u000a            }\u000a            head = head->qlink;\u000a          }\u000a          sVar10 = 0;\u000a          if (n_strings != 0) {\u000a            uVar11 = dcgettext(0,"%s: input contains a loop:",5);\u000a            pcVar12 = quotearg_n_style_colon((char *)0x0);\u000a            error(0,0,uVar11,pcVar12);\u000a            do {\u000a              walk_tree(root,detect_loop);\u000a            } while (loop != (item *)0x0);\u000a            uVar5 = 0;\u000a            sVar10 = n_strings;\u000a          }\u000a        }\u000a        iVar7 = rpl_fclose(stdin);\u000a        if (iVar7 != 0) {\u000a          puVar9 = (uint *)__errno_location();\u000a          uVar3 = *puVar9;\u000a          if (bVar6) {\u000a            pcVar12 = (char *)dcgettext(0,"standard input",5);\u000a          }\u000a          else {\u000a            pcVar12 = quotearg_n_style_colon((char *)0x0);\u000a          }\u000a          error(1,(ulong)uVar3,0x405365,pcVar12);\u000a        }\u000a        return (_Bool)uVar5;\u000a      }\u000a      if (sVar10 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("len != 0","src/tsort.c",0x1cd,"_Bool tsort(const char *)");\u000a      }\u000a      k = search_item(root,local_40.buffer);\u000a    } while (j == (item *)0x0);\u000a    record_relation(j,k);\u000a  } while( true );\u000a}\u000a\u000a
p633
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RDI\nCMP byte ptr [R14],0x2d\nJNZ 0x00401a30\nMOV BPL,byte ptr [R14 + 0x1]\nXOR EDI,EDI\nCALL 0x00401cf0\nMOV RBX,RAX\nCMP BPL,0x0\nJNZ 0x00401a3a\nMOV R13B,0x1\nJMP 0x00401a87\nXOR EDI,EDI\nCALL 0x00401cf0\nMOV RBX,RAX\nMOV RDX,qword ptr [0x00608250]\nMOV ESI,0x40535f\nMOV RDI,R14\nCALL 0x004022e0\nTEST RAX,RAX\nJZ 0x00401a58\nXOR R13D,R13D\nJMP 0x00401a87\nCALL 0x00401270\nMOV EBP,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R14\nCALL 0x004038f0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x405365\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x004014f0\nMOV RDI,qword ptr [0x00608250]\nMOV ESI,0x2\nCALL 0x004022c0\nLEA R15,[RSP + 0x8]\nMOV RDI,R15\nCALL 0x00403e40\nJMP 0x00401abb\nMOV RDI,R12\nMOV RSI,RAX\nCALL 0x00401fc0\nXOR EAX,EAX\nMOV R12,RAX\nMOV RDI,qword ptr [0x00608250]\nMOV ESI,0x4051ed\nMOV EDX,0x3\nMOV RCX,R15\nCALL 0x00403e50\nCMP RAX,-0x1\nJZ 0x00401afc\nTEST RAX,RAX\nJZ 0x00401cd5\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00401d40\nTEST R12,R12\nJZ 0x00401abd\nJMP 0x00401ab0\nTEST R12,R12\nJZ 0x00401b38\nXOR EDI,EDI\nMOV ESI,0x405220\nMOV EDX,0x5\nCALL 0x00401310\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R14\nCALL 0x004038f0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x004014f0\nMOV ESI,0x402020\nMOV RDI,RBX\nCALL 0x00402000\nMOV R15B,0x1\nJMP 0x00401b53\nXOR R15D,R15D\nMOV RAX,qword ptr [0x006082b0]\nNOP word ptr [RAX + RAX*0x1]\nTEST RAX,RAX\nJZ 0x00401c6c\nMOV ESI,0x402030\nMOV RDI,RBX\nCALL 0x00402000\nMOV RAX,qword ptr [0x006082b8]\nTEST RAX,RAX\nJNZ 0x00401ba7\nJMP 0x00401c00\nMOV RAX,qword ptr [0x006082b8]\nMOV RAX,qword ptr [RAX + 0x28]\nMOV qword ptr [0x006082b8],RAX\nTEST RAX,RAX\nJZ 0x00401c00\nMOV RDI,qword ptr [RAX]\nMOV RBP,qword ptr [RAX + 0x30]\nCALL 0x004012c0\nMOV RAX,qword ptr [0x006082b8]\nMOV qword ptr [RAX],0x0\nDEC qword ptr [0x006082b0]\nTEST RBP,RBP\nJNZ 0x00401bd9\nJMP 0x00401b90\nMOV RBP,qword ptr [RBP + 0x8]\nTEST RBP,RBP\nJZ 0x00401b90\nMOV RAX,qword ptr [RBP]\nDEC qword ptr [RAX + 0x20]\nJNZ 0x00401bd0\nMOV RCX,qword ptr [0x006082c0]\nMOV qword ptr [RCX + 0x28],RAX\nMOV qword ptr [0x006082c0],RAX\nJMP 0x00401bd0\nCMP qword ptr [0x006082b0],0x0\nMOV EAX,0x0\nJZ 0x00401b60\nXOR EDI,EDI\nMOV ESI,0x40524b\nMOV EDX,0x5\nCALL 0x00401310\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R14\nCALL 0x004038f0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x004014f0\nNOP word ptr [RAX + RAX*0x1]\nMOV ESI,0x402070\nMOV RDI,RBX\nCALL 0x00402000\nCMP qword ptr [0x006082c8],0x0\nJNZ 0x00401c50\nJMP 0x00401b50\nMOV RDI,qword ptr [0x00608250]\nCALL 0x00404850\nTEST EAX,EAX\nJZ 0x00401cc0\nCALL 0x00401270\nMOV EBX,dword ptr [RAX]\nTEST R13B,R13B\nJZ 0x00401c9b\nXOR EDI,EDI\nMOV ESI,0x405266\nMOV EDX,0x5\nCALL 0x00401310\nJMP 0x00401caa\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R14\nCALL 0x004038f0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x405365\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x004014f0\nTEST R15B,R15B\nSETNZ AL\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4051f1\nMOV ESI,0x4051fa\nMOV EDX,0x1cd\nMOV ECX,0x405206\nCALL 0x00401390\n'
p634
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 fe\n41 80 3e 2d\n75 19\n41 8a 6e 01\n31 ff\ne8 ce 02 00 00\n48 89 c3\n40 80 fd 00\n75 0f\n41 b5 01\neb 57\n31 ff\ne8 b9 02 00 00\n48 89 c3\n48 8b 15 0f 68 20 00\nbe 5f 53 40 00\n4c 89 f7\ne8 92 08 00 00\n48 85 c0\n74 05\n45 31 ed\neb 2f\ne8 13 f8 ff ff\n8b 28\n45 31 ed\n31 ff\nbe 03 00 00 00\n4c 89 f2\ne8 7f 1e 00 00\n48 89 c1\nbf 01 00 00 00\nba 65 53 40 00\n31 c0\n89 ee\ne8 69 fa ff ff\n48 8b 3d c2 67 20 00\nbe 02 00 00 00\ne8 28 08 00 00\n4c 8d 7c 24 08\n4c 89 ff\ne8 9b 23 00 00\neb 14\n4c 89 e7\n48 89 c6\ne8 05 05 00 00\n31 c0\n49 89 c4\n48 8b 3d 89 67 20 00\nbe ed 51 40 00\nba 03 00 00 00\n4c 89 f9\ne8 77 23 00 00\n48 83 f8 ff\n74 1d\n48 85 c0\n0f 84 ed 01 00 00\n48 8b 74 24 10\n48 89 df\ne8 4b 02 00 00\n4d 85 e4\n74 c3\neb b4\n4d 85 e4\n74 37\n31 ff\nbe 20 52 40 00\nba 05 00 00 00\ne8 fe f7 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n4c 89 f2\ne8 cc 1d 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ea\ne8 b8 f9 ff ff\nbe 20 20 40 00\n48 89 df\ne8 bb 04 00 00\n41 b7 01\neb 09\n45 31 ff\n48 8b 05 56 67 20 00\n66 0f 1f 44 00 00\n48 85 c0\n0f 84 03 01 00 00\nbe 30 20 40 00\n48 89 df\ne8 8a 04 00 00\n48 8b 05 3b 67 20 00\n48 85 c0\n75 25\neb 7c\n48 8b 05 21 67 20 00\n48 8b 40 28\n48 89 05 16 67 20 00\n48 85 c0\n74 59\n48 8b 38\n48 8b 68 30\ne8 0d f7 ff ff\n48 8b 05 fe 66 20 00\n48 c7 00 00 00 00 00\n48 ff 0d e8 66 20 00\n48 85 ed\n75 0c\neb c1\n48 8b 6d 08\n48 85 ed\n74 b7\n48 8b 45 00\n48 ff 48 20\n75 ed\n48 8b 0d d6 66 20 00\n48 89 41 28\n48 89 05 cb 66 20 00\neb d9\n48 83 3d a8 66 20 00 00\nb8 00 00 00 00\n0f 84 4d ff ff ff\n31 ff\nbe 4b 52 40 00\nba 05 00 00 00\ne8 ec f6 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n4c 89 f2\ne8 ba 1c 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 a9 f8 ff ff\n66 0f 1f 84 00 00 00 00 00\nbe 70 20 40 00\n48 89 df\ne8 a3 03 00 00\n48 83 3d 63 66 20 00 00\n75 e9\ne9 e4 fe ff ff\n48 8b 3d dd 65 20 00\ne8 d8 2b 00 00\n85 c0\n74 44\ne8 ef f5 ff ff\n8b 18\n45 84 ed\n74 13\n31 ff\nbe 66 52 40 00\nba 05 00 00 00\ne8 77 f6 ff ff\neb 0f\n31 ff\nbe 03 00 00 00\n4c 89 f2\ne8 46 1c 00 00\n48 89 c1\nbf 01 00 00 00\nba 65 53 40 00\n31 c0\n89 de\ne8 30 f8 ff ff\n45 84 ff\n0f 95 c0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf f1 51 40 00\nbe fa 51 40 00\nba cd 01 00 00\nb9 06 52 40 00\ne8 a2 f6 ff ff\n'
p635
S'.text:0000000000401a00\n.text:0000000000401a01\n.text:0000000000401a03\n.text:0000000000401a05\n.text:0000000000401a07\n.text:0000000000401a09\n.text:0000000000401a0a\n.text:0000000000401a0e\n.text:0000000000401a11\n.text:0000000000401a15\n.text:0000000000401a17\n.text:0000000000401a1b\n.text:0000000000401a1d\n.text:0000000000401a22\n.text:0000000000401a25\n.text:0000000000401a29\n.text:0000000000401a2b\n.text:0000000000401a2e\n.text:0000000000401a30\n.text:0000000000401a32\n.text:0000000000401a37\n.text:0000000000401a3a\n.text:0000000000401a41\n.text:0000000000401a46\n.text:0000000000401a49\n.text:0000000000401a4e\n.text:0000000000401a51\n.text:0000000000401a53\n.text:0000000000401a56\n.text:0000000000401a58\n.text:0000000000401a5d\n.text:0000000000401a5f\n.text:0000000000401a62\n.text:0000000000401a64\n.text:0000000000401a69\n.text:0000000000401a6c\n.text:0000000000401a71\n.text:0000000000401a74\n.text:0000000000401a79\n.text:0000000000401a7e\n.text:0000000000401a80\n.text:0000000000401a82\n.text:0000000000401a87\n.text:0000000000401a8e\n.text:0000000000401a93\n.text:0000000000401a98\n.text:0000000000401a9d\n.text:0000000000401aa0\n.text:0000000000401aa5\n.text:0000000000401ab0\n.text:0000000000401ab3\n.text:0000000000401ab6\n.text:0000000000401abb\n.text:0000000000401abd\n.text:0000000000401ac0\n.text:0000000000401ac7\n.text:0000000000401acc\n.text:0000000000401ad1\n.text:0000000000401ad4\n.text:0000000000401ad9\n.text:0000000000401add\n.text:0000000000401adf\n.text:0000000000401ae2\n.text:0000000000401ae8\n.text:0000000000401aed\n.text:0000000000401af0\n.text:0000000000401af5\n.text:0000000000401af8\n.text:0000000000401afa\n.text:0000000000401afc\n.text:0000000000401aff\n.text:0000000000401b01\n.text:0000000000401b03\n.text:0000000000401b08\n.text:0000000000401b0d\n.text:0000000000401b12\n.text:0000000000401b15\n.text:0000000000401b17\n.text:0000000000401b1c\n.text:0000000000401b1f\n.text:0000000000401b24\n.text:0000000000401b27\n.text:0000000000401b2c\n.text:0000000000401b2e\n.text:0000000000401b30\n.text:0000000000401b33\n.text:0000000000401b38\n.text:0000000000401b3d\n.text:0000000000401b40\n.text:0000000000401b45\n.text:0000000000401b48\n.text:0000000000401b50\n.text:0000000000401b53\n.text:0000000000401b5a\n.text:0000000000401b60\n.text:0000000000401b63\n.text:0000000000401b69\n.text:0000000000401b6e\n.text:0000000000401b71\n.text:0000000000401b76\n.text:0000000000401b7d\n.text:0000000000401b80\n.text:0000000000401b82\n.text:0000000000401b90\n.text:0000000000401b97\n.text:0000000000401b9b\n.text:0000000000401ba2\n.text:0000000000401ba5\n.text:0000000000401ba7\n.text:0000000000401baa\n.text:0000000000401bae\n.text:0000000000401bb3\n.text:0000000000401bba\n.text:0000000000401bc1\n.text:0000000000401bc8\n.text:0000000000401bcb\n.text:0000000000401bcd\n.text:0000000000401bd0\n.text:0000000000401bd4\n.text:0000000000401bd7\n.text:0000000000401bd9\n.text:0000000000401bdd\n.text:0000000000401be1\n.text:0000000000401be3\n.text:0000000000401bea\n.text:0000000000401bee\n.text:0000000000401bf5\n.text:0000000000401c00\n.text:0000000000401c08\n.text:0000000000401c0d\n.text:0000000000401c13\n.text:0000000000401c15\n.text:0000000000401c1a\n.text:0000000000401c1f\n.text:0000000000401c24\n.text:0000000000401c27\n.text:0000000000401c29\n.text:0000000000401c2e\n.text:0000000000401c31\n.text:0000000000401c36\n.text:0000000000401c39\n.text:0000000000401c3b\n.text:0000000000401c3d\n.text:0000000000401c3f\n.text:0000000000401c42\n.text:0000000000401c47\n.text:0000000000401c50\n.text:0000000000401c55\n.text:0000000000401c58\n.text:0000000000401c5d\n.text:0000000000401c65\n.text:0000000000401c67\n.text:0000000000401c6c\n.text:0000000000401c73\n.text:0000000000401c78\n.text:0000000000401c7a\n.text:0000000000401c7c\n.text:0000000000401c81\n.text:0000000000401c83\n.text:0000000000401c86\n.text:0000000000401c88\n.text:0000000000401c8a\n.text:0000000000401c8f\n.text:0000000000401c94\n.text:0000000000401c99\n.text:0000000000401c9b\n.text:0000000000401c9d\n.text:0000000000401ca2\n.text:0000000000401ca5\n.text:0000000000401caa\n.text:0000000000401cad\n.text:0000000000401cb2\n.text:0000000000401cb7\n.text:0000000000401cb9\n.text:0000000000401cbb\n.text:0000000000401cc0\n.text:0000000000401cc3\n.text:0000000000401cc6\n.text:0000000000401cca\n.text:0000000000401ccb\n.text:0000000000401ccd\n.text:0000000000401ccf\n.text:0000000000401cd1\n.text:0000000000401cd3\n.text:0000000000401cd4\n.text:0000000000401cd5\n.text:0000000000401cda\n.text:0000000000401cdf\n.text:0000000000401ce4\n.text:0000000000401ce9\n'
p636
tp637
sS'realloc'
p638
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p639
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00608150)();\u000a  return pvVar1;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x00608150]\n'
p641
S'ff 25 9a 6c 20 00\n'
p642
S'.plt:00000000004014b0\n'
p643
tp644
sS'xcharalloc'
p645
(S'\n__stdcall xcharalloc(size_t n)\n'
p646
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p647
S'JMP 0x00404640\n'
p648
S'e9 2b ff ff ff\n'
p649
S'.text:0000000000404710\n'
p650
tp651
sS'c_isupper'
p652
(S'\n__stdcall c_isupper()\n'
p653
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p654
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p655
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p656
S'.text:0000000000404a90\n.text:0000000000404a93\n.text:0000000000404a96\n.text:0000000000404a99\n'
p657
tp658
sS'__fprintf_chk'
p659
(S'\n__stdcall __fprintf_chk()\n'
p660
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_006081a0)();\u000a  return;\u000a}\u000a\u000a
p661
S'JMP qword ptr [0x006081a0]\n'
p662
S'ff 25 4a 6c 20 00\n'
p663
S'.plt:0000000000401550\n'
p664
tp665
sS'get_charset_aliases'
p666
(S'\n__stdcall get_charset_aliases()\n'
p667
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases = "";\u000a    return "";\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00404df4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00404df4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00404df4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00404df4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00404df4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00404df4_caseD_9;\u000a      case -1:\u000a        goto switchD_00404df4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00404e4d:\u000a  __s = "";\u000aLAB_00404e53:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00404df4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00404e53;\u000a  }\u000a  goto LAB_00404e4d;\u000a}\u000a\u000a
p668
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x00608430]\nTEST R15,R15\nJNZ 0x00404e62\nMOV EDI,0x40612c\nCALL 0x00401240\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00404c18\nCMP byte ptr [RBX],0x0\nJNZ 0x00404c1d\nMOV EBX,0x40613c\nMOV RDI,RBX\nCALL 0x00401330\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00404c37\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00404c39\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401460\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00404c8d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401440\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00404c98\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00404cb5\nMOV R15D,0x4051f0\nJMP 0x00404e5b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401500\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00404e4d\nMOV ESI,0x40535f\nMOV EDI,EBP\nCALL 0x004014c0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00404e14\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00404de0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004012a0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004012a0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00404de0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401490\nMOV ESI,0x40614b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x004013c0\nCMP EAX,0x2\nJL 0x00404e34\nMOV RDI,R12\nCALL 0x00401330\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401330\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00404dbd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x004014b0\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00404d04\nJMP 0x00404e1d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401460\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00404d04\nJMP 0x00404e1d\nMOV RDI,RBX\nCALL 0x004012d0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00404d47\nJMP qword ptr [0x405ff0 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004012d0\nCMP EAX,-0x1\nJZ 0x00404e34\nCMP EAX,0xa\nJNZ 0x00404e00\nJMP 0x00404de0\nMOV EDI,EBP\nCALL 0x004013d0\nJMP 0x00404e4d\nMOV RDI,R15\nCALL 0x00401250\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00404850\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00404e4d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00404e53\nMOV R15D,0x4051f0\nMOV RDI,R13\nCALL 0x00401250\nMOV qword ptr [0x00608430],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p669
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 38 38 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 2c 61 40 00\ne8 35 c6 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 3c 61 40 00\n48 89 df\ne8 0b c7 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 19 c8 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 e3 c7 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf f0 51 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 3c c8 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 5f 53 40 00\n89 ef\ne8 e6 c7 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 7b c5 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 6b c5 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 3f c7 ff ff\nbe 4b 61 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 5a c6 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 b9 c5 ff ff\n49 89 c4\n48 89 ef\ne8 ae c5 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 06 c7 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 95 c6 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 e8 c4 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd f0 5f 40 00\n48 89 df\ne8 c8 c4 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 b5 c5 ff ff\neb 30\n4c 89 ff\ne8 2b c4 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 14 fa ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf f0 51 40 00\n4c 89 ef\ne8 f5 c3 ff ff\n4c 89 3d ce 35 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p670
S'.text:0000000000404be0\n.text:0000000000404be1\n.text:0000000000404be3\n.text:0000000000404be5\n.text:0000000000404be7\n.text:0000000000404be9\n.text:0000000000404bea\n.text:0000000000404bf1\n.text:0000000000404bf8\n.text:0000000000404bfb\n.text:0000000000404c01\n.text:0000000000404c06\n.text:0000000000404c0b\n.text:0000000000404c0e\n.text:0000000000404c11\n.text:0000000000404c13\n.text:0000000000404c16\n.text:0000000000404c18\n.text:0000000000404c1d\n.text:0000000000404c20\n.text:0000000000404c25\n.text:0000000000404c28\n.text:0000000000404c2b\n.text:0000000000404c2d\n.text:0000000000404c32\n.text:0000000000404c35\n.text:0000000000404c37\n.text:0000000000404c39\n.text:0000000000404c3d\n.text:0000000000404c42\n.text:0000000000404c47\n.text:0000000000404c4a\n.text:0000000000404c4d\n.text:0000000000404c4f\n.text:0000000000404c52\n.text:0000000000404c55\n.text:0000000000404c58\n.text:0000000000404c5d\n.text:0000000000404c60\n.text:0000000000404c63\n.text:0000000000404c66\n.text:0000000000404c68\n.text:0000000000404c6e\n.text:0000000000404c78\n.text:0000000000404c7d\n.text:0000000000404c87\n.text:0000000000404c8b\n.text:0000000000404c8d\n.text:0000000000404c93\n.text:0000000000404c98\n.text:0000000000404ca2\n.text:0000000000404ca7\n.text:0000000000404cb1\n.text:0000000000404cb5\n.text:0000000000404cba\n.text:0000000000404cbc\n.text:0000000000404cbf\n.text:0000000000404cc4\n.text:0000000000404cc6\n.text:0000000000404cc8\n.text:0000000000404cce\n.text:0000000000404cd3\n.text:0000000000404cd5\n.text:0000000000404cda\n.text:0000000000404cdd\n.text:0000000000404ce0\n.text:0000000000404ce6\n.text:0000000000404ceb\n.text:0000000000404cf0\n.text:0000000000404cf2\n.text:0000000000404cf7\n.text:0000000000404cfa\n.text:0000000000404cff\n.text:0000000000404d04\n.text:0000000000404d09\n.text:0000000000404d0c\n.text:0000000000404d0f\n.text:0000000000404d12\n.text:0000000000404d15\n.text:0000000000404d18\n.text:0000000000404d1d\n.text:0000000000404d20\n.text:0000000000404d25\n.text:0000000000404d28\n.text:0000000000404d2d\n.text:0000000000404d30\n.text:0000000000404d35\n.text:0000000000404d3a\n.text:0000000000404d3d\n.text:0000000000404d42\n.text:0000000000404d47\n.text:0000000000404d49\n.text:0000000000404d4c\n.text:0000000000404d51\n.text:0000000000404d56\n.text:0000000000404d58\n.text:0000000000404d5b\n.text:0000000000404d5e\n.text:0000000000404d61\n.text:0000000000404d66\n.text:0000000000404d69\n.text:0000000000404d6f\n.text:0000000000404d72\n.text:0000000000404d77\n.text:0000000000404d7a\n.text:0000000000404d7d\n.text:0000000000404d82\n.text:0000000000404d85\n.text:0000000000404d8a\n.text:0000000000404d8f\n.text:0000000000404d92\n.text:0000000000404d94\n.text:0000000000404d98\n.text:0000000000404d9d\n.text:0000000000404da2\n.text:0000000000404da5\n.text:0000000000404daa\n.text:0000000000404dad\n.text:0000000000404db2\n.text:0000000000404db5\n.text:0000000000404dbb\n.text:0000000000404dbd\n.text:0000000000404dc2\n.text:0000000000404dc6\n.text:0000000000404dcb\n.text:0000000000404dce\n.text:0000000000404dd1\n.text:0000000000404dd7\n.text:0000000000404de0\n.text:0000000000404de3\n.text:0000000000404de8\n.text:0000000000404deb\n.text:0000000000404dee\n.text:0000000000404df4\n.text:0000000000404e00\n.text:0000000000404e03\n.text:0000000000404e08\n.text:0000000000404e0b\n.text:0000000000404e0d\n.text:0000000000404e10\n.text:0000000000404e12\n.text:0000000000404e14\n.text:0000000000404e16\n.text:0000000000404e1b\n.text:0000000000404e1d\n.text:0000000000404e20\n.text:0000000000404e25\n.text:0000000000404e27\n.text:0000000000404e2c\n.text:0000000000404e2f\n.text:0000000000404e34\n.text:0000000000404e37\n.text:0000000000404e3c\n.text:0000000000404e41\n.text:0000000000404e44\n.text:0000000000404e46\n.text:0000000000404e4b\n.text:0000000000404e4d\n.text:0000000000404e53\n.text:0000000000404e56\n.text:0000000000404e5b\n.text:0000000000404e62\n.text:0000000000404e65\n.text:0000000000404e6c\n.text:0000000000404e6d\n.text:0000000000404e6f\n.text:0000000000404e71\n.text:0000000000404e73\n.text:0000000000404e75\n.text:0000000000404e76\n'
p671
tp672
sS'nl_langinfo'
p673
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p674
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00608138)();\u000a  return pcVar1;\u000a}\u000a\u000a
p675
S'JMP qword ptr [0x00608138]\n'
p676
S'ff 25 b2 6c 20 00\n'
p677
S'.plt:0000000000401480\n'
p678
tp679
sS'c_isalnum'
p680
(S'\n__stdcall c_isalnum()\n'
p681
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p682
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x004049ab\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x004049ab\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x004049aa\nXOR EAX,EAX\nRET\n'
p683
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p684
S'.text:0000000000404990\n.text:0000000000404992\n.text:0000000000404995\n.text:0000000000404998\n.text:000000000040499a\n.text:00000000004049a4\n.text:00000000004049a8\n.text:00000000004049aa\n.text:00000000004049ab\n.text:00000000004049ae\n.text:00000000004049b1\n.text:00000000004049b3\n.text:00000000004049b5\n'
p685
tp686
sS'x2realloc'
p687
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p688
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p689
S'MOV EDX,0x1\nJMP 0x004046b0\n'
p690
S'ba 01 00 00 00\neb 89\n'
p691
S'.text:0000000000404720\n.text:0000000000404725\n'
p692
tp693
sS'strlen'
p694
(S'\n__stdcall strlen(char * __s)\n'
p695
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_00608090)();\u000a  return sVar1;\u000a}\u000a\u000a
p696
S'JMP qword ptr [0x00608090]\n'
p697
S'ff 25 5a 6d 20 00\n'
p698
S'.plt:0000000000401330\n'
p699
tp700
sS'get_nth_bit'
p701
(S'\n__stdcall get_nth_bit(size_t n, word * bitset)\n'
p702
V\u000a_Bool get_nth_bit(size_t n,word *bitset)\u000a\u000a{\u000a  return (_Bool)((bitset[n >> 6] >> (n & 0x1f) & 1) != 0);\u000a}\u000a\u000a
p703
S'MOV RAX,RDI\nSHR RAX,0x6\nMOV RAX,qword ptr [RSI + RAX*0x8]\nBT RAX,RDI\nSETC AL\nRET\n'
p704
S'48 89 f8\n48 c1 e8 06\n48 8b 04 c6\n48 0f a3 f8\n0f 92 c0\nc3\n'
p705
S'.text:0000000000403fb0\n.text:0000000000403fb3\n.text:0000000000403fb7\n.text:0000000000403fbb\n.text:0000000000403fbf\n.text:0000000000403fc2\n'
p706
tp707
sS'memcmp'
p708
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p709
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_006080f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x006080f0]\n'
p711
S'ff 25 fa 6c 20 00\n'
p712
S'.plt:00000000004013f0\n'
p713
tp714
sS'quotearg_n_style_mem'
p715
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p716
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p717
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403770\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403540\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p718
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p719
S'.text:00000000004037d0\n.text:00000000004037d1\n.text:00000000004037d3\n.text:00000000004037d5\n.text:00000000004037d6\n.text:00000000004037da\n.text:00000000004037dd\n.text:00000000004037e0\n.text:00000000004037e2\n.text:00000000004037e5\n.text:00000000004037e8\n.text:00000000004037ed\n.text:00000000004037ef\n.text:00000000004037f2\n.text:00000000004037f5\n.text:00000000004037f8\n.text:00000000004037fd\n.text:0000000000403801\n.text:0000000000403802\n.text:0000000000403804\n.text:0000000000403806\n.text:0000000000403807\n'
p720
tp721
sS'_exit'
p722
(S'\n__stdcall _exit(int __status)\n'
p723
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00608040)();\u000a  return;\u000a}\u000a\u000a
p724
S'JMP qword ptr [0x00608040]\n'
p725
S'ff 25 aa 6d 20 00\n'
p726
S'.plt:0000000000401290\n'
p727
tp728
sS'emit_stdin_note'
p729
(S'\n__stdcall emit_stdin_note()\n'
p730
V\u000avoid emit_stdin_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,"\u005cnWith no FILE, or when FILE is -, read standard input.\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p731
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40506f\nMOV EDX,0x5\nCALL 0x00401310\nMOV RSI,qword ptr [0x00608248]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401400\n'
p732
S'50\n31 ff\nbe 6f 50 40 00\nba 05 00 00 00\ne8 6e fb ff ff\n48 8b 35 9f 6a 20 00\n48 89 c7\n58\ne9 4e fc ff ff\n'
p733
S'.text:0000000000401790\n.text:0000000000401791\n.text:0000000000401793\n.text:0000000000401798\n.text:000000000040179d\n.text:00000000004017a2\n.text:00000000004017a9\n.text:00000000004017ac\n.text:00000000004017ad\n'
p734
tp735
sS'__errno_location'
p736
(S'\n__stdcall __errno_location()\n'
p737
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00608030)();\u000a  return piVar1;\u000a}\u000a\u000a
p738
S'JMP qword ptr [0x00608030]\n'
p739
S'ff 25 ba 6d 20 00\n'
p740
S'.plt:0000000000401270\n'
p741
tp742
sS'x2nrealloc'
p743
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p744
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p745
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x004046dc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404709\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004046fa\nTEST RCX,RCX\nJNZ 0x004046fa\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00404680\nPUSH RAX\nCALL 0x004047d0\n'
p746
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p747
S'.text:00000000004046b0\n.text:00000000004046b3\n.text:00000000004046b6\n.text:00000000004046b9\n.text:00000000004046bb\n.text:00000000004046c5\n.text:00000000004046c7\n.text:00000000004046ca\n.text:00000000004046cd\n.text:00000000004046cf\n.text:00000000004046d2\n.text:00000000004046d5\n.text:00000000004046da\n.text:00000000004046dc\n.text:00000000004046df\n.text:00000000004046e1\n.text:00000000004046e6\n.text:00000000004046e8\n.text:00000000004046eb\n.text:00000000004046ed\n.text:00000000004046f4\n.text:00000000004046f7\n.text:00000000004046fa\n.text:00000000004046fd\n.text:0000000000404701\n.text:0000000000404704\n.text:0000000000404709\n.text:000000000040470a\n'
p748
tp749
sS'xrealloc'
p750
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p751
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p752
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00404697\nTEST RBX,RBX\nJNZ 0x00404697\nCALL 0x00401250\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x004014b0\nTEST RBX,RBX\nJZ 0x004046a9\nTEST RAX,RAX\nJZ 0x004046ab\nPOP RBX\nRET\nCALL 0x004047d0\n'
p753
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 bd cb ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 11 ce ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p754
S'.text:0000000000404680\n.text:0000000000404681\n.text:0000000000404684\n.text:0000000000404687\n.text:0000000000404689\n.text:000000000040468c\n.text:000000000040468e\n.text:0000000000404693\n.text:0000000000404695\n.text:0000000000404696\n.text:0000000000404697\n.text:000000000040469a\n.text:000000000040469f\n.text:00000000004046a2\n.text:00000000004046a4\n.text:00000000004046a7\n.text:00000000004046a9\n.text:00000000004046aa\n.text:00000000004046ab\n'
p755
tp756
sS'search_item'
p757
(S'\n__stdcall search_item(item * root, char * str)\n'
p758
V\u000aitem * search_item(item *root,char *str)\u000a\u000a{\u000a  uint uVar1;\u000a  item *piVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  item *piVar5;\u000a  item **ppiVar6;\u000a  item *piVar7;\u000a  uint uVar8;\u000a  item *piVar9;\u000a  item **ppiVar10;\u000a  uint uVar11;\u000a  item *piVar12;\u000a  item *piVar13;\u000a  bool bVar14;\u000a  \u000a  if (root == (item *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("root","src/tsort.c",0x84,"struct item *search_item(struct item *, const char *)")\u000a    ;\u000a  }\u000a  piVar13 = root->right;\u000a  if (piVar13 == (item *)0x0) {\u000a    piVar5 = new_item(str);\u000a    root->right = piVar5;\u000a  }\u000a  else {\u000a    iVar3 = strcmp(str,piVar13->str);\u000a    piVar5 = piVar13;\u000a    while (iVar3 != 0) {\u000a      ppiVar10 = &piVar5->right;\u000a      if (iVar3 < 0) {\u000a        ppiVar10 = &piVar5->left;\u000a      }\u000a      piVar2 = *ppiVar10;\u000a      if (piVar2 == (item *)0x0) {\u000a        piVar5 = new_item(str);\u000a        *ppiVar10 = piVar5;\u000a        iVar3 = strcmp(str,piVar13->str);\u000a        if (iVar3 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("!STREQ (str, s->str)","src/tsort.c",0xa8,\u000a                        "struct item *search_item(struct item *, const char *)");\u000a        }\u000a        ppiVar10 = &piVar13->left;\u000a        ppiVar6 = &piVar13->right;\u000a        if (iVar3 < 0) {\u000a          ppiVar6 = ppiVar10;\u000a        }\u000a        piVar2 = *ppiVar6;\u000a        piVar7 = piVar2;\u000a        while (piVar7 != piVar5) {\u000a          iVar4 = strcmp(str,piVar7->str);\u000a          if (iVar4 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a            __assert_fail("!STREQ (str, p->str)","src/tsort.c",0xb6,\u000a                          "struct item *search_item(struct item *, const char *)");\u000a          }\u000a          if (iVar4 < 0) {\u000a            piVar7->balance = -1;\u000a            ppiVar6 = &piVar7->left;\u000a          }\u000a          else {\u000a            piVar7->balance = 1;\u000a            ppiVar6 = &piVar7->right;\u000a          }\u000a          piVar7 = *ppiVar6;\u000a        }\u000a        uVar11 = iVar3 >> 0x1f | 1;\u000a        uVar1 = piVar13->balance;\u000a        if ((uVar1 != 0) && (uVar8 = -uVar11, uVar1 != uVar8)) {\u000a          if (piVar2->balance == uVar11) {\u000a            ppiVar6 = &piVar2->right;\u000a            ppiVar10 = &piVar13->left;\u000a            if (-1 < (int)uVar11) {\u000a              ppiVar6 = &piVar2->left;\u000a              ppiVar10 = &piVar13->right;\u000a            }\u000a            *ppiVar10 = *ppiVar6;\u000a            *ppiVar6 = piVar13;\u000a            piVar2->balance = 0;\u000a            piVar7 = piVar2;\u000a            piVar9 = piVar13;\u000a          }\u000a          else {\u000a            if ((int)uVar11 < 0) {\u000a              piVar7 = piVar2->right;\u000a              piVar2->right = piVar7->left;\u000a              piVar7->left = piVar2;\u000a              ppiVar6 = &piVar7->right;\u000a            }\u000a            else {\u000a              piVar7 = piVar2->left;\u000a              piVar2->left = piVar7->right;\u000a              piVar7->right = piVar2;\u000a              ppiVar6 = &piVar7->left;\u000a              ppiVar10 = &piVar13->right;\u000a            }\u000a            *ppiVar10 = *ppiVar6;\u000a            *ppiVar6 = piVar13;\u000a            piVar13->balance = 0;\u000a            piVar2->balance = 0;\u000a            piVar12 = piVar13;\u000a            if ((piVar7->balance == uVar11) ||\u000a               (bVar14 = piVar7->balance == uVar8, piVar9 = piVar7, piVar12 = piVar2, uVar8 = uVar11\u000a               , bVar14)) {\u000a              piVar12->balance = uVar8;\u000a              piVar9 = piVar7;\u000a            }\u000a          }\u000a          piVar9->balance = 0;\u000a          ppiVar10 = &root->right;\u000a          if (piVar13 != root->right) {\u000a            ppiVar10 = &root->left;\u000a          }\u000a          *ppiVar10 = piVar7;\u000a          return piVar5;\u000a        }\u000a        piVar13->balance = uVar1 + uVar11;\u000a        return piVar5;\u000a      }\u000a      if (piVar2->balance != 0) {\u000a        piVar13 = piVar2;\u000a        root = piVar5;\u000a      }\u000a      iVar3 = strcmp(str,piVar2->str);\u000a      piVar5 = piVar2;\u000a    }\u000a  }\u000a  return piVar5;\u000a}\u000a\u000a
p759
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RSI\nMOV R14,RDI\nTEST R14,R14\nJZ 0x00401f81\nMOV RBX,qword ptr [R14 + 0x10]\nTEST RBX,RBX\nJZ 0x00401dbc\nMOV RSI,qword ptr [RBX]\nMOV RDI,R15\nCALL 0x00401430\nTEST EAX,EAX\nJZ 0x00401dd0\nMOV R12,RBX\nNOP dword ptr [RAX + RAX*0x1]\nLEA RCX,[RBX + 0x8]\nLEA RBP,[RBX + 0x10]\nTEST EAX,EAX\nCMOVS RBP,RCX\nMOV R13,qword ptr [RBP]\nTEST R13,R13\nJZ 0x00401dd8\nCMP dword ptr [R13 + 0x18],0x0\nCMOVNZ R14,RBX\nCMOVNZ R12,R13\nMOV RSI,qword ptr [R13]\nMOV RDI,R15\nCALL 0x00401430\nTEST EAX,EAX\nMOV RBX,R13\nJNZ 0x00401d80\nJMP 0x00401f56\nMOV RDI,R15\nCALL 0x00401cf0\nMOV R13,RAX\nMOV qword ptr [R14 + 0x10],R13\nJMP 0x00401f56\nMOV R13,RBX\nJMP 0x00401f56\nMOV RDI,R15\nCALL 0x00401cf0\nMOV R13,RAX\nMOV qword ptr [RBP],R13\nMOV RSI,qword ptr [R12]\nMOV RDI,R15\nCALL 0x00401430\nMOV EBP,EAX\nTEST EBP,EBP\nJZ 0x00401f9a\nLEA RAX,[R12 + 0x10]\nLEA RCX,[R12 + 0x8]\nTEST EBP,EBP\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x8],RCX\nCMOVS RAX,RCX\nMOV RAX,qword ptr [RAX]\nMOV qword ptr [RSP],RAX\nCMP RAX,R13\nJZ 0x00401e73\nMOV RBX,qword ptr [RSP]\nNOP word ptr [RAX + RAX*0x1]\nMOV RSI,qword ptr [RBX]\nMOV RDI,R15\nCALL 0x00401430\nTEST EAX,EAX\nJZ 0x00401f68\nJS 0x00401e60\nMOV dword ptr [RBX + 0x18],0x1\nADD RBX,0x10\nJMP 0x00401e6b\nMOV dword ptr [RBX + 0x18],0xffffffff\nADD RBX,0x8\nMOV RBX,qword ptr [RBX]\nCMP RBX,R13\nJNZ 0x00401e30\nSAR EBP,0x1f\nOR EBP,0x1\nMOV EAX,dword ptr [R12 + 0x18]\nTEST EAX,EAX\nJZ 0x00401e8a\nMOV ECX,EBP\nNEG ECX\nCMP EAX,ECX\nJNZ 0x00401e96\nADD EAX,EBP\nMOV dword ptr [R12 + 0x18],EAX\nJMP 0x00401f56\nMOV RDI,qword ptr [RSP]\nCMP dword ptr [RDI + 0x18],EBP\nJNZ 0x00401ed3\nLEA RAX,[RDI + 0x8]\nLEA RCX,[R12 + 0x10]\nLEA RDX,[RDI + 0x10]\nLEA RSI,[R12 + 0x8]\nTEST EBP,EBP\nCMOVNS RSI,RCX\nCMOVNS RDX,RAX\nMOV RAX,qword ptr [RDX]\nMOV qword ptr [RSI],RAX\nMOV qword ptr [RDX],R12\nMOV dword ptr [RDI + 0x18],0x0\nMOV RAX,RDI\nMOV RCX,R12\nJMP 0x00401f3c\nTEST EBP,EBP\nJS 0x00401ef2\nMOV RAX,qword ptr [RDI + 0x8]\nMOV RDX,qword ptr [RAX + 0x10]\nMOV qword ptr [RDI + 0x8],RDX\nMOV qword ptr [RAX + 0x10],RDI\nLEA RDX,[RAX + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00401f0b\nMOV RAX,qword ptr [RDI + 0x10]\nMOV RDX,qword ptr [RAX + 0x8]\nMOV qword ptr [RDI + 0x10],RDX\nMOV qword ptr [RAX + 0x8],RDI\nLEA RDX,[RAX + 0x10]\nMOV RBX,qword ptr [RSP + 0x8]\nMOV RSI,qword ptr [RDX]\nMOV qword ptr [RBX],RSI\nMOV qword ptr [RDX],R12\nMOV dword ptr [R12 + 0x18],0x0\nMOV dword ptr [RDI + 0x18],0x0\nMOV EDX,dword ptr [RAX + 0x18]\nCMP EDX,EBP\nJNZ 0x00401f32\nMOV RDI,R12\nMOV EBP,ECX\nJMP 0x00401f36\nCMP EDX,ECX\nJNZ 0x00401f39\nMOV dword ptr [RDI + 0x18],EBP\nMOV RCX,RAX\nMOV dword ptr [RCX + 0x18],0x0\nLEA RCX,[R14 + 0x8]\nCMP R12,qword ptr [R14 + 0x10]\nLEA RDX,[R14 + 0x10]\nCMOVNZ RDX,RCX\nMOV qword ptr [RDX],RAX\nMOV RAX,R13\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4052c5\nMOV ESI,0x4051fa\nMOV EDX,0xb6\nMOV ECX,0x40527a\nCALL 0x00401390\nMOV EDI,0x405275\nMOV ESI,0x4051fa\nMOV EDX,0x84\nMOV ECX,0x40527a\nCALL 0x00401390\nMOV EDI,0x4052b0\nMOV ESI,0x4051fa\nMOV EDX,0xa8\nMOV ECX,0x40527a\nCALL 0x00401390\n'
p760
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f7\n49 89 fe\n4d 85 f6\n0f 84 24 02 00 00\n49 8b 5e 10\n48 85 db\n74 56\n48 8b 33\n4c 89 ff\ne8 bf f6 ff ff\n85 c0\n74 5b\n49 89 dc\n0f 1f 84 00 00 00 00 00\n48 8d 4b 08\n48 8d 6b 10\n85 c0\n48 0f 48 e9\n4c 8b 6d 00\n4d 85 ed\n74 41\n41 83 7d 18 00\n4c 0f 45 f3\n4d 0f 45 e5\n49 8b 75 00\n4c 89 ff\ne8 80 f6 ff ff\n85 c0\n4c 89 eb\n75 c9\ne9 9a 01 00 00\n4c 89 ff\ne8 2c ff ff ff\n49 89 c5\n4d 89 6e 10\ne9 86 01 00 00\n49 89 dd\ne9 7e 01 00 00\n4c 89 ff\ne8 10 ff ff ff\n49 89 c5\n4c 89 6d 00\n49 8b 34 24\n4c 89 ff\ne8 3d f6 ff ff\n89 c5\n85 ed\n0f 84 9d 01 00 00\n49 8d 44 24 10\n49 8d 4c 24 08\n85 ed\n48 89 44 24 10\n48 89 4c 24 08\n48 0f 48 c1\n48 8b 00\n48 89 04 24\n4c 39 e8\n74 50\n48 8b 1c 24\n66 0f 1f 84 00 00 00 00 00\n48 8b 33\n4c 89 ff\ne8 f5 f5 ff ff\n85 c0\n0f 84 25 01 00 00\n78 1b\nc7 43 18 01 00 00 00\n48 83 c3 10\neb 19\nc7 43 18 ff ff ff ff\n48 83 c3 08\n48 8b 1b\n4c 39 eb\n75 bd\nc1 fd 1f\n83 cd 01\n41 8b 44 24 18\n85 c0\n74 08\n89 e9\nf7 d9\n39 c8\n75 0c\n01 e8\n41 89 44 24 18\ne9 c0 00 00 00\n48 8b 3c 24\n39 6f 18\n75 34\n48 8d 47 08\n49 8d 4c 24 10\n48 8d 57 10\n49 8d 74 24 08\n85 ed\n48 0f 49 f1\n48 0f 49 d0\n48 8b 02\n48 89 06\n4c 89 22\nc7 47 18 00 00 00 00\n48 89 f8\n4c 89 e1\neb 69\n85 ed\n78 1b\n48 8b 47 08\n48 8b 50 10\n48 89 57 08\n48 89 78 10\n48 8d 50 08\n48 8b 5c 24 10\neb 19\n48 8b 47 10\n48 8b 50 08\n48 89 57 10\n48 89 78 08\n48 8d 50 10\n48 8b 5c 24 08\n48 8b 32\n48 89 33\n4c 89 22\n41 c7 44 24 18 00 00 00 00\nc7 47 18 00 00 00 00\n8b 50 18\n39 ea\n75 07\n4c 89 e7\n89 cd\neb 04\n39 ca\n75 03\n89 6f 18\n48 89 c1\nc7 41 18 00 00 00 00\n49 8d 4e 08\n4d 3b 66 10\n49 8d 56 10\n48 0f 45 d1\n48 89 02\n4c 89 e8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf c5 52 40 00\nbe fa 51 40 00\nba b6 00 00 00\nb9 7a 52 40 00\ne8 0f f4 ff ff\nbf 75 52 40 00\nbe fa 51 40 00\nba 84 00 00 00\nb9 7a 52 40 00\ne8 f6 f3 ff ff\nbf b0 52 40 00\nbe fa 51 40 00\nba a8 00 00 00\nb9 7a 52 40 00\ne8 dd f3 ff ff\n'
p761
S'.text:0000000000401d40\n.text:0000000000401d41\n.text:0000000000401d43\n.text:0000000000401d45\n.text:0000000000401d47\n.text:0000000000401d49\n.text:0000000000401d4a\n.text:0000000000401d4e\n.text:0000000000401d51\n.text:0000000000401d54\n.text:0000000000401d57\n.text:0000000000401d5d\n.text:0000000000401d61\n.text:0000000000401d64\n.text:0000000000401d66\n.text:0000000000401d69\n.text:0000000000401d6c\n.text:0000000000401d71\n.text:0000000000401d73\n.text:0000000000401d75\n.text:0000000000401d78\n.text:0000000000401d80\n.text:0000000000401d84\n.text:0000000000401d88\n.text:0000000000401d8a\n.text:0000000000401d8e\n.text:0000000000401d92\n.text:0000000000401d95\n.text:0000000000401d97\n.text:0000000000401d9c\n.text:0000000000401da0\n.text:0000000000401da4\n.text:0000000000401da8\n.text:0000000000401dab\n.text:0000000000401db0\n.text:0000000000401db2\n.text:0000000000401db5\n.text:0000000000401db7\n.text:0000000000401dbc\n.text:0000000000401dbf\n.text:0000000000401dc4\n.text:0000000000401dc7\n.text:0000000000401dcb\n.text:0000000000401dd0\n.text:0000000000401dd3\n.text:0000000000401dd8\n.text:0000000000401ddb\n.text:0000000000401de0\n.text:0000000000401de3\n.text:0000000000401de7\n.text:0000000000401deb\n.text:0000000000401dee\n.text:0000000000401df3\n.text:0000000000401df5\n.text:0000000000401df7\n.text:0000000000401dfd\n.text:0000000000401e02\n.text:0000000000401e07\n.text:0000000000401e09\n.text:0000000000401e0e\n.text:0000000000401e13\n.text:0000000000401e17\n.text:0000000000401e1a\n.text:0000000000401e1e\n.text:0000000000401e21\n.text:0000000000401e23\n.text:0000000000401e27\n.text:0000000000401e30\n.text:0000000000401e33\n.text:0000000000401e36\n.text:0000000000401e3b\n.text:0000000000401e3d\n.text:0000000000401e43\n.text:0000000000401e45\n.text:0000000000401e4c\n.text:0000000000401e50\n.text:0000000000401e60\n.text:0000000000401e67\n.text:0000000000401e6b\n.text:0000000000401e6e\n.text:0000000000401e71\n.text:0000000000401e73\n.text:0000000000401e76\n.text:0000000000401e79\n.text:0000000000401e7e\n.text:0000000000401e80\n.text:0000000000401e82\n.text:0000000000401e84\n.text:0000000000401e86\n.text:0000000000401e88\n.text:0000000000401e8a\n.text:0000000000401e8c\n.text:0000000000401e91\n.text:0000000000401e96\n.text:0000000000401e9a\n.text:0000000000401e9d\n.text:0000000000401e9f\n.text:0000000000401ea3\n.text:0000000000401ea8\n.text:0000000000401eac\n.text:0000000000401eb1\n.text:0000000000401eb3\n.text:0000000000401eb7\n.text:0000000000401ebb\n.text:0000000000401ebe\n.text:0000000000401ec1\n.text:0000000000401ec4\n.text:0000000000401ecb\n.text:0000000000401ece\n.text:0000000000401ed1\n.text:0000000000401ed3\n.text:0000000000401ed5\n.text:0000000000401ed7\n.text:0000000000401edb\n.text:0000000000401edf\n.text:0000000000401ee3\n.text:0000000000401ee7\n.text:0000000000401eeb\n.text:0000000000401ef0\n.text:0000000000401ef2\n.text:0000000000401ef6\n.text:0000000000401efa\n.text:0000000000401efe\n.text:0000000000401f02\n.text:0000000000401f06\n.text:0000000000401f0b\n.text:0000000000401f0e\n.text:0000000000401f11\n.text:0000000000401f14\n.text:0000000000401f1d\n.text:0000000000401f24\n.text:0000000000401f27\n.text:0000000000401f29\n.text:0000000000401f2b\n.text:0000000000401f2e\n.text:0000000000401f30\n.text:0000000000401f32\n.text:0000000000401f34\n.text:0000000000401f36\n.text:0000000000401f39\n.text:0000000000401f3c\n.text:0000000000401f43\n.text:0000000000401f47\n.text:0000000000401f4b\n.text:0000000000401f4f\n.text:0000000000401f53\n.text:0000000000401f56\n.text:0000000000401f59\n.text:0000000000401f5d\n.text:0000000000401f5e\n.text:0000000000401f60\n.text:0000000000401f62\n.text:0000000000401f64\n.text:0000000000401f66\n.text:0000000000401f67\n.text:0000000000401f68\n.text:0000000000401f6d\n.text:0000000000401f72\n.text:0000000000401f77\n.text:0000000000401f7c\n.text:0000000000401f81\n.text:0000000000401f86\n.text:0000000000401f8b\n.text:0000000000401f90\n.text:0000000000401f95\n.text:0000000000401f9a\n.text:0000000000401f9f\n.text:0000000000401fa4\n.text:0000000000401fa9\n.text:0000000000401fae\n'
p762
tp763
sS'freopen_safer'
p764
(S'\n__stdcall freopen_safer(char * name, char * mode, FILE * f)\n'
p765
V\u000aFILE * freopen_safer(char *name,char *mode,FILE *f)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  int *piVar5;\u000a  FILE *pFVar6;\u000a  bool bVar7;\u000a  bool bVar8;\u000a  \u000a  iVar4 = fileno((FILE *)f);\u000a  bVar7 = false;\u000a  bVar8 = false;\u000a  if (iVar4 == 0) {\u000a    bVar1 = false;\u000a    bVar2 = false;\u000aLAB_004023a4:\u000a    pFVar6 = (FILE *)freopen(name,mode,(FILE *)f);\u000a    bVar8 = bVar7;\u000a  }\u000a  else {\u000a    if (iVar4 == 1) {\u000a      bVar1 = false;\u000a    }\u000a    else {\u000a      if (iVar4 != 2) {\u000a        iVar4 = dup2(2,2);\u000a        bVar7 = iVar4 != 2;\u000a      }\u000a      iVar4 = dup2(1,1);\u000a      bVar8 = iVar4 != 1;\u000a      bVar1 = bVar7;\u000a    }\u000a    bVar2 = false;\u000a    iVar4 = dup2(0,0);\u000a    if (iVar4 != 0) {\u000a      pFVar6 = (FILE *)0x0;\u000a      _Var3 = protect_fd();\u000a      bVar2 = true;\u000a      if (_Var3 == false) {\u000a        bVar2 = true;\u000a        goto LAB_004023c2;\u000a      }\u000a    }\u000a    if ((bVar8) && (_Var3 = protect_fd(), _Var3 == false)) {\u000a      bVar8 = true;\u000a    }\u000a    else {\u000a      bVar7 = bVar8;\u000a      if ((!bVar1) || (_Var3 = protect_fd(), bVar7 = bVar8, _Var3 != false)) goto LAB_004023a4;\u000a    }\u000a    pFVar6 = (FILE *)0x0;\u000a  }\u000aLAB_004023c2:\u000a  piVar5 = __errno_location();\u000a  iVar4 = *piVar5;\u000a  if (bVar1) {\u000a    close(2);\u000a  }\u000a  if (bVar8) {\u000a    close(1);\u000a  }\u000a  if (bVar2) {\u000a    close(0);\u000a  }\u000a  if (pFVar6 == (FILE *)0x0) {\u000a    *piVar5 = iVar4;\u000a  }\u000a  return pFVar6;\u000a}\u000a\u000a
p766
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBP,RDX\nMOV R13,RSI\nMOV RBX,RDI\nMOV RDI,RBP\nCALL 0x00401450\nXOR R14D,R14D\nTEST EAX,EAX\nJZ 0x0040233e\nCMP EAX,0x1\nJZ 0x00402346\nCMP EAX,0x2\nJZ 0x00402323\nMOV EDI,0x2\nMOV ESI,0x2\nCALL 0x00401360\nCMP EAX,0x2\nSETNZ R14B\nMOV R15B,R14B\nMOV EDI,0x1\nMOV ESI,0x1\nCALL 0x00401360\nCMP EAX,0x1\nSETNZ R14B\nJMP 0x00402349\nXOR R15D,R15D\nXOR R12D,R12D\nJMP 0x004023a4\nXOR R15D,R15D\nXOR R12D,R12D\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x00401360\nTEST EAX,EAX\nJZ 0x0040237e\nMOV qword ptr [RSP],RBP\nMOV RBP,RBX\nMOV RBX,R13\nXOR R13D,R13D\nXOR EDI,EDI\nCALL 0x00402410\nMOV R12B,0x1\nTEST AL,AL\nJZ 0x004023b7\nMOV R13,RBX\nMOV RBX,RBP\nMOV RBP,qword ptr [RSP]\nTEST R14B,R14B\nJZ 0x00402391\nMOV EDI,0x1\nCALL 0x00402410\nTEST AL,AL\nJZ 0x004023bc\nTEST R15B,R15B\nJZ 0x004023a4\nMOV EDI,0x2\nCALL 0x00402410\nTEST AL,AL\nJZ 0x004023bf\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,RBP\nCALL 0x004013b0\nMOV R13,RAX\nJMP 0x004023c2\nMOV R12B,0x1\nJMP 0x004023c2\nMOV R14B,0x1\nXOR R13D,R13D\nCALL 0x00401270\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nTEST R15B,R15B\nJZ 0x004023db\nMOV EDI,0x2\nCALL 0x004013d0\nTEST R14B,R14B\nJZ 0x004023ea\nMOV EDI,0x1\nCALL 0x004013d0\nTEST R12B,R12B\nJZ 0x004023f6\nXOR EDI,EDI\nCALL 0x004013d0\nTEST R13,R13\nJNZ 0x004023fd\nMOV dword ptr [RBX],EBP\nMOV RAX,R13\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p767
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d5\n49 89 f5\n48 89 fb\n48 89 ef\ne8 54 f1 ff ff\n45 31 f6\n85 c0\n74 3b\n83 f8 01\n74 3e\n83 f8 02\n74 16\nbf 02 00 00 00\nbe 02 00 00 00\ne8 44 f0 ff ff\n83 f8 02\n41 0f 95 c6\n45 88 f7\nbf 01 00 00 00\nbe 01 00 00 00\ne8 2b f0 ff ff\n83 f8 01\n41 0f 95 c6\neb 0b\n45 31 ff\n45 31 e4\neb 5e\n45 31 ff\n45 31 e4\n31 ff\n31 f6\ne8 0b f0 ff ff\n85 c0\n74 25\n48 89 2c 24\n48 89 dd\n4c 89 eb\n45 31 ed\n31 ff\ne8 a3 00 00 00\n41 b4 01\n84 c0\n74 43\n49 89 dd\n48 89 eb\n48 8b 2c 24\n45 84 f6\n74 0e\nbf 01 00 00 00\ne8 83 00 00 00\n84 c0\n74 2b\n45 84 ff\n74 0e\nbf 02 00 00 00\ne8 70 00 00 00\n84 c0\n74 1b\n48 89 df\n4c 89 ee\n48 89 ea\ne8 fe ef ff ff\n49 89 c5\neb 0b\n41 b4 01\neb 06\n41 b6 01\n45 31 ed\ne8 a9 ee ff ff\n48 89 c3\n8b 2b\n45 84 ff\n74 0a\nbf 02 00 00 00\ne8 f5 ef ff ff\n45 84 f6\n74 0a\nbf 01 00 00 00\ne8 e6 ef ff ff\n45 84 e4\n74 07\n31 ff\ne8 da ef ff ff\n4d 85 ed\n75 02\n89 2b\n4c 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p768
S'.text:00000000004022e0\n.text:00000000004022e1\n.text:00000000004022e3\n.text:00000000004022e5\n.text:00000000004022e7\n.text:00000000004022e9\n.text:00000000004022ea\n.text:00000000004022eb\n.text:00000000004022ee\n.text:00000000004022f1\n.text:00000000004022f4\n.text:00000000004022f7\n.text:00000000004022fc\n.text:00000000004022ff\n.text:0000000000402301\n.text:0000000000402303\n.text:0000000000402306\n.text:0000000000402308\n.text:000000000040230b\n.text:000000000040230d\n.text:0000000000402312\n.text:0000000000402317\n.text:000000000040231c\n.text:000000000040231f\n.text:0000000000402323\n.text:0000000000402326\n.text:000000000040232b\n.text:0000000000402330\n.text:0000000000402335\n.text:0000000000402338\n.text:000000000040233c\n.text:000000000040233e\n.text:0000000000402341\n.text:0000000000402344\n.text:0000000000402346\n.text:0000000000402349\n.text:000000000040234c\n.text:000000000040234e\n.text:0000000000402350\n.text:0000000000402355\n.text:0000000000402357\n.text:0000000000402359\n.text:000000000040235d\n.text:0000000000402360\n.text:0000000000402363\n.text:0000000000402366\n.text:0000000000402368\n.text:000000000040236d\n.text:0000000000402370\n.text:0000000000402372\n.text:0000000000402374\n.text:0000000000402377\n.text:000000000040237a\n.text:000000000040237e\n.text:0000000000402381\n.text:0000000000402383\n.text:0000000000402388\n.text:000000000040238d\n.text:000000000040238f\n.text:0000000000402391\n.text:0000000000402394\n.text:0000000000402396\n.text:000000000040239b\n.text:00000000004023a0\n.text:00000000004023a2\n.text:00000000004023a4\n.text:00000000004023a7\n.text:00000000004023aa\n.text:00000000004023ad\n.text:00000000004023b2\n.text:00000000004023b5\n.text:00000000004023b7\n.text:00000000004023ba\n.text:00000000004023bc\n.text:00000000004023bf\n.text:00000000004023c2\n.text:00000000004023c7\n.text:00000000004023ca\n.text:00000000004023cc\n.text:00000000004023cf\n.text:00000000004023d1\n.text:00000000004023d6\n.text:00000000004023db\n.text:00000000004023de\n.text:00000000004023e0\n.text:00000000004023e5\n.text:00000000004023ea\n.text:00000000004023ed\n.text:00000000004023ef\n.text:00000000004023f1\n.text:00000000004023f6\n.text:00000000004023f9\n.text:00000000004023fb\n.text:00000000004023fd\n.text:0000000000402400\n.text:0000000000402404\n.text:0000000000402405\n.text:0000000000402407\n.text:0000000000402409\n.text:000000000040240b\n.text:000000000040240d\n.text:000000000040240e\n'
p769
tp770
sS'quotearg_n_options'
p771
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p772
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p773
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401270\nTEST R12D,R12D\nJS 0x004036f1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x006081e0]\nCMP dword ptr [0x006081e8],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040360b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x6081f0\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00404680\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x006081e0],R15\nJNZ 0x004035d2\nMOVUPS XMM0,xmmword ptr [0x006081f0]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x006081e8]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x004013a0\nMOV dword ptr [0x006081e8],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00402760\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040366d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x004036db\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x608330\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00403698\nCALL 0x00401250\nMOV RDI,R15\nCALL 0x00404710\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00402760\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401260\n'
p774
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 11 dd ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 66 4c 20 00\n44 39 25 67 4c 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd f0 81 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 c8 10 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 1b 4c 20 00\n75 0b\n0f 10 05 22 4c 20 00\n41 0f 11 07\n8b 05 10 4c 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 ad dd ff ff\n89 1d ef 4b 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 30 83 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 b8 db ff ff\n4c 89 ff\ne8 70 10 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 6a db ff ff\n'
p775
S'.text:0000000000403540\n.text:0000000000403541\n.text:0000000000403543\n.text:0000000000403545\n.text:0000000000403547\n.text:0000000000403549\n.text:000000000040354a\n.text:000000000040354e\n.text:0000000000403551\n.text:0000000000403554\n.text:0000000000403557\n.text:000000000040355a\n.text:000000000040355f\n.text:0000000000403562\n.text:0000000000403568\n.text:000000000040356d\n.text:000000000040356f\n.text:0000000000403573\n.text:000000000040357a\n.text:0000000000403581\n.text:0000000000403586\n.text:000000000040358b\n.text:0000000000403590\n.text:0000000000403592\n.text:0000000000403597\n.text:000000000040359a\n.text:000000000040359d\n.text:00000000004035a3\n.text:00000000004035a5\n.text:00000000004035a8\n.text:00000000004035ac\n.text:00000000004035af\n.text:00000000004035b3\n.text:00000000004035b8\n.text:00000000004035bb\n.text:00000000004035be\n.text:00000000004035c5\n.text:00000000004035c7\n.text:00000000004035ce\n.text:00000000004035d2\n.text:00000000004035d8\n.text:00000000004035db\n.text:00000000004035df\n.text:00000000004035e2\n.text:00000000004035e5\n.text:00000000004035e9\n.text:00000000004035eb\n.text:00000000004035ee\n.text:00000000004035f3\n.text:00000000004035f9\n.text:00000000004035fc\n.text:0000000000403601\n.text:0000000000403606\n.text:000000000040360b\n.text:000000000040360e\n.text:0000000000403612\n.text:0000000000403616\n.text:000000000040361b\n.text:000000000040361f\n.text:0000000000403623\n.text:0000000000403627\n.text:000000000040362b\n.text:000000000040362f\n.text:0000000000403634\n.text:0000000000403637\n.text:000000000040363a\n.text:000000000040363d\n.text:0000000000403642\n.text:0000000000403645\n.text:0000000000403648\n.text:000000000040364b\n.text:000000000040364c\n.text:0000000000403651\n.text:0000000000403655\n.text:0000000000403658\n.text:000000000040365b\n.text:000000000040365d\n.text:0000000000403662\n.text:0000000000403666\n.text:000000000040366b\n.text:000000000040366d\n.text:0000000000403671\n.text:0000000000403676\n.text:0000000000403679\n.text:000000000040367c\n.text:0000000000403681\n.text:0000000000403686\n.text:0000000000403689\n.text:000000000040368e\n.text:0000000000403691\n.text:0000000000403693\n.text:0000000000403698\n.text:000000000040369b\n.text:00000000004036a0\n.text:00000000004036a3\n.text:00000000004036a6\n.text:00000000004036ab\n.text:00000000004036ae\n.text:00000000004036b2\n.text:00000000004036b5\n.text:00000000004036b8\n.text:00000000004036bd\n.text:00000000004036c2\n.text:00000000004036c7\n.text:00000000004036ca\n.text:00000000004036cd\n.text:00000000004036ce\n.text:00000000004036d3\n.text:00000000004036d7\n.text:00000000004036db\n.text:00000000004036df\n.text:00000000004036e2\n.text:00000000004036e6\n.text:00000000004036e7\n.text:00000000004036e9\n.text:00000000004036eb\n.text:00000000004036ed\n.text:00000000004036ef\n.text:00000000004036f0\n.text:00000000004036f1\n'
p776
tp777
sS'strcmp'
p778
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p779
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00608110)();\u000a  return iVar1;\u000a}\u000a\u000a
p780
S'JMP qword ptr [0x00608110]\n'
p781
S'ff 25 da 6c 20 00\n'
p782
S'.plt:0000000000401430\n'
p783
tp784
sS'set_custom_quoting'
p785
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p786
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p787
S'TEST RDI,RDI\nMOV EAX,0x6082f0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x004026d5\nTEST RDX,RDX\nJZ 0x004026d5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401260\n'
p788
S'48 85 ff\nb8 f0 82 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 85 eb ff ff\n'
p789
S'.text:00000000004026b0\n.text:00000000004026b3\n.text:00000000004026b8\n.text:00000000004026bc\n.text:00000000004026c2\n.text:00000000004026c5\n.text:00000000004026c7\n.text:00000000004026ca\n.text:00000000004026cc\n.text:00000000004026d0\n.text:00000000004026d4\n.text:00000000004026d5\n.text:00000000004026d6\n'
p790
tp791
sS'c_isalpha'
p792
(S'\n__stdcall c_isalpha()\n'
p793
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p794
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x004049db\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p795
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p796
S'.text:00000000004049c0\n.text:00000000004049c3\n.text:00000000004049c6\n.text:00000000004049c8\n.text:00000000004049d2\n.text:00000000004049d4\n.text:00000000004049d7\n.text:00000000004049da\n.text:00000000004049db\n.text:00000000004049dd\n'
p797
tp798
sS'quotearg_custom_mem'
p799
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p800
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p801
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00403950\n'
p802
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p803
S'.text:00000000004039e0\n.text:00000000004039e3\n.text:00000000004039e6\n.text:00000000004039e9\n.text:00000000004039ec\n.text:00000000004039ee\n.text:00000000004039f1\n'
p804
tp805
sS'close_stdout'
p806
(S'\n__stdcall close_stdout()\n'
p807
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402217;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x405365,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402217:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p808
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x00608248]\nCALL 0x00404ae0\nTEST EAX,EAX\nJZ 0x00402217\nCMP byte ptr [0x006082d8],0x0\nJZ 0x0040222c\nCALL 0x00401270\nCMP dword ptr [RAX],0x20\nJNZ 0x0040222c\nMOV RDI,qword ptr [0x006082a0]\nCALL 0x00404ae0\nTEST EAX,EAX\nJNZ 0x00402271\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x405355\nMOV EDX,0x5\nCALL 0x00401310\nMOV R14,RAX\nMOV RBX,qword ptr [0x006082d0]\nCALL 0x00401270\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x0040227c\nXOR EDI,EDI\nMOV EDX,0x405365\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004014f0\nMOV EDI,dword ptr [0x006081d8]\nCALL 0x00401290\nMOV EDI,dword ptr [0x006081d8]\nCALL 0x00401290\nMOV RDI,RBX\nCALL 0x004038d0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x405361\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004014f0\nMOV EDI,dword ptr [0x006081d8]\nCALL 0x00401290\n'
p809
S'55\n41 56\n53\n48 8b 3d 4d 60 20 00\ne8 e0 28 00 00\n85 c0\n74 13\n80 3d cd 60 20 00 00\n74 1f\ne8 5e f0 ff ff\n83 38 20\n75 15\n48 8b 3d 82 60 20 00\ne8 bd 28 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 55 53 40 00\nba 05 00 00 00\ne8 d3 f0 ff ff\n49 89 c6\n48 8b 1d 89 60 20 00\ne8 24 f0 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 65 53 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 8a f2 ff ff\n8b 3d 6c 5f 20 00\ne8 1f f0 ff ff\n8b 3d 61 5f 20 00\ne8 14 f0 ff ff\n48 89 df\ne8 4c 16 00 00\n48 89 c1\n31 ff\nba 61 53 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 56 f2 ff ff\n8b 3d 38 5f 20 00\ne8 eb ef ff ff\n'
p810
S'.text:00000000004021f0\n.text:00000000004021f1\n.text:00000000004021f3\n.text:00000000004021f4\n.text:00000000004021fb\n.text:0000000000402200\n.text:0000000000402202\n.text:0000000000402204\n.text:000000000040220b\n.text:000000000040220d\n.text:0000000000402212\n.text:0000000000402215\n.text:0000000000402217\n.text:000000000040221e\n.text:0000000000402223\n.text:0000000000402225\n.text:0000000000402227\n.text:0000000000402228\n.text:000000000040222a\n.text:000000000040222b\n.text:000000000040222c\n.text:000000000040222e\n.text:0000000000402233\n.text:0000000000402238\n.text:000000000040223d\n.text:0000000000402240\n.text:0000000000402247\n.text:000000000040224c\n.text:000000000040224f\n.text:0000000000402251\n.text:0000000000402253\n.text:0000000000402255\n.text:000000000040225a\n.text:000000000040225c\n.text:000000000040225e\n.text:0000000000402261\n.text:0000000000402266\n.text:000000000040226c\n.text:0000000000402271\n.text:0000000000402277\n.text:000000000040227c\n.text:000000000040227f\n.text:0000000000402284\n.text:0000000000402287\n.text:0000000000402289\n.text:000000000040228e\n.text:0000000000402290\n.text:0000000000402292\n.text:0000000000402295\n.text:000000000040229a\n.text:00000000004022a0\n'
p811
tp812
sS'version_etc_ar'
p813
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p814
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p815
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00404490\nJMP 0x00404120\n'
p816
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p817
S'.text:0000000000404480\n.text:0000000000404487\n.text:0000000000404490\n.text:0000000000404496\n.text:000000000040449a\n.text:000000000040449c\n'
p818
tp819
sS'rpl_calloc'
p820
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p821
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00608108)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p822
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x0040483b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00404840\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00404840\nPUSH RAX\nCALL 0x00401270\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401420\n'
p823
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 3f ca ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 d5 cb ff ff\n'
p824
S'.text:0000000000404800\n.text:0000000000404803\n.text:0000000000404808\n.text:000000000040480a\n.text:000000000040480d\n.text:0000000000404812\n.text:0000000000404814\n.text:0000000000404817\n.text:000000000040481b\n.text:000000000040481d\n.text:0000000000404820\n.text:0000000000404823\n.text:0000000000404826\n.text:0000000000404829\n.text:000000000040482b\n.text:000000000040482c\n.text:0000000000404831\n.text:0000000000404837\n.text:0000000000404839\n.text:000000000040483a\n.text:000000000040483b\n.text:0000000000404840\n.text:0000000000404843\n.text:0000000000404846\n'
p825
tp826
sS'memset'
p827
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p828
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006080c8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p829
S'JMP qword ptr [0x006080c8]\n'
p830
S'ff 25 22 6d 20 00\n'
p831
S'.plt:00000000004013a0\n'
p832
tp833
sS'c_isxdigit'
p834
(S'\n__stdcall c_isxdigit()\n'
p835
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p836
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00404abb\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p837
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p838
S'.text:0000000000404aa0\n.text:0000000000404aa3\n.text:0000000000404aa6\n.text:0000000000404aa8\n.text:0000000000404ab2\n.text:0000000000404ab4\n.text:0000000000404ab7\n.text:0000000000404aba\n.text:0000000000404abb\n.text:0000000000404abd\n'
p839
tp840
sS'__libc_csu_fini'
p841
(S'\n__stdcall __libc_csu_fini()\n'
p842
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p843
S'RET\n'
p844
S'f3 c3\n'
p845
S'.text:0000000000404ef0\n'
p846
tp847
sS'getc_unlocked'
p848
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p849
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00608060)();\u000a  return iVar1;\u000a}\u000a\u000a
p850
S'JMP qword ptr [0x00608060]\n'
p851
S'ff 25 8a 6d 20 00\n'
p852
S'.plt:00000000004012d0\n'
p853
tp854
sS'abort'
p855
(S'\n__stdcall abort()\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00608028)();\u000a  return;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x00608028]\n'
p858
S'ff 25 c2 6d 20 00\n'
p859
S'.plt:0000000000401260\n'
p860
tp861
sS'c_isascii'
p862
(S'\n__stdcall c_isascii()\n'
p863
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p864
S'CMP EDI,0x80\nSETC AL\nRET\n'
p865
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p866
S'.text:00000000004049e0\n.text:00000000004049e6\n.text:00000000004049e9\n'
p867
tp868
sS'FUN_00401230'
p869
(S'\n__stdcall FUN_00401230()\n'
p870
V\u000avoid FUN_00401230(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00608010)();\u000a  return;\u000a}\u000a\u000a
p871
S'PUSH qword ptr [0x00608008]\nJMP qword ptr [0x00608010]\n'
p872
S'ff 35 d2 6d 20 00\nff 25 d4 6d 20 00\n'
p873
S'.plt:0000000000401230\n.plt:0000000000401236\n'
p874
tp875
sS'version_etc'
p876
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p877
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p878
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404552\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x004044b0\nADD RSP,0xd8\nRET\n'
p879
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p880
S'.text:0000000000404510\n.text:0000000000404517\n.text:0000000000404519\n.text:000000000040451b\n.text:0000000000404520\n.text:0000000000404525\n.text:000000000040452a\n.text:0000000000404532\n.text:000000000040453a\n.text:0000000000404542\n.text:000000000040454a\n.text:0000000000404552\n.text:0000000000404557\n.text:000000000040455c\n.text:0000000000404561\n.text:0000000000404566\n.text:000000000040456e\n.text:0000000000404573\n.text:000000000040457b\n.text:0000000000404582\n.text:0000000000404585\n.text:000000000040458a\n.text:0000000000404591\n'
p881
tp882
sS'protect_fd'
p883
(S'\n__stdcall protect_fd()\n'
p884
V\u000a_Bool protect_fd(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int __fd;\u000a  int *piVar2;\u000a  int in_EDI;\u000a  \u000a  __fd = open("/dev/null",0);\u000a  uVar1 = 1;\u000a  if (__fd != in_EDI) {\u000a    if (-1 < __fd) {\u000a      close(__fd);\u000a      piVar2 = __errno_location();\u000a      *piVar2 = 9;\u000a    }\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p885
S'PUSH RBX\nMOV EBX,EDI\nMOV EDI,0x405368\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00401500\nMOV ECX,EAX\nMOV AL,0x1\nCMP ECX,EBX\nJZ 0x00402441\nTEST ECX,ECX\nJS 0x0040243f\nMOV EDI,ECX\nCALL 0x004013d0\nCALL 0x00401270\nMOV dword ptr [RAX],0x9\nXOR EAX,EAX\nPOP RBX\nRET\n'
p886
S'53\n89 fb\nbf 68 53 40 00\n31 f6\n31 c0\ne8 df f0 ff ff\n89 c1\nb0 01\n39 d9\n74 18\n85 c9\n78 12\n89 cf\ne8 9c ef ff ff\ne8 37 ee ff ff\nc7 00 09 00 00 00\n31 c0\n5b\nc3\n'
p887
S'.text:0000000000402410\n.text:0000000000402411\n.text:0000000000402413\n.text:0000000000402418\n.text:000000000040241a\n.text:000000000040241c\n.text:0000000000402421\n.text:0000000000402423\n.text:0000000000402425\n.text:0000000000402427\n.text:0000000000402429\n.text:000000000040242b\n.text:000000000040242d\n.text:000000000040242f\n.text:0000000000402434\n.text:0000000000402439\n.text:000000000040243f\n.text:0000000000402441\n.text:0000000000402442\n'
p888
tp889
sS'posix_fadvise'
p890
(S'\n__stdcall posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_006080e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x006080e8]\n'
p893
S'ff 25 02 6d 20 00\n'
p894
S'.plt:00000000004013e0\n'
p895
tp896
sS'__ctype_b_loc'
p897
(S'\n__stdcall __ctype_b_loc()\n'
p898
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_006081b8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p899
S'JMP qword ptr [0x006081b8]\n'
p900
S'ff 25 32 6c 20 00\n'
p901
S'.plt:0000000000401580\n'
p902
tp903
sS'lseek'
p904
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p905
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006080b8)();\u000a  return _Var1;\u000a}\u000a\u000a
p906
S'JMP qword ptr [0x006080b8]\n'
p907
S'ff 25 32 6d 20 00\n'
p908
S'.plt:0000000000401380\n'
p909
tp910
sS'fdadvise'
p911
(S'\n__stdcall fdadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p912
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fdadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_006080e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p913
S'JMP 0x004013e0\n'
p914
S'e9 2b f1 ff ff\n'
p915
S'.text:00000000004022b0\n'
p916
tp917
sS'quotearg'
p918
(S'\n__stdcall quotearg(char * arg)\n'
p919
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p920
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403530\n'
p921
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p922
S'.text:0000000000403710\n.text:0000000000403713\n.text:0000000000403715\n.text:0000000000403718\n'
p923
tp924
sS'_start'
p925
(S'\n__stdcall _start()\n'
p926
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00607ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p927
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x404ef0\nMOV RCX,0x404e80\nMOV RDI,0x4018f0\nCALL qword ptr [0x00607ff0]\nHLT\n'
p928
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 f0 4e 40 00\n48 c7 c1 80 4e 40 00\n48 c7 c7 f0 18 40 00\nff 15 36 6a 20 00\nf4\n'
p929
S'.text:0000000000401590\n.text:0000000000401592\n.text:0000000000401595\n.text:0000000000401596\n.text:0000000000401599\n.text:000000000040159d\n.text:000000000040159e\n.text:000000000040159f\n.text:00000000004015a6\n.text:00000000004015ad\n.text:00000000004015b4\n.text:00000000004015ba\n'
p930
tp931
sS'c_iscntrl'
p932
(S'\n__stdcall c_iscntrl()\n'
p933
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p934
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00404a08\nRET\nCMP EDI,0x7f\nJZ 0x00404a07\nXOR EAX,EAX\nRET\n'
p935
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p936
S'.text:0000000000404a00\n.text:0000000000404a02\n.text:0000000000404a05\n.text:0000000000404a07\n.text:0000000000404a08\n.text:0000000000404a0b\n.text:0000000000404a0d\n.text:0000000000404a0f\n'
p937
tp938
sS'c_isblank'
p939
(S'\n__stdcall c_isblank()\n'
p940
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p941
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p942
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p943
S'.text:00000000004049f0\n.text:00000000004049f3\n.text:00000000004049f6\n.text:00000000004049f9\n.text:00000000004049fc\n.text:00000000004049fe\n'
p944
tp945
sS'quotearg_n_mem'
p946
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p947
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p948
S'MOV ECX,0x6082f0\nJMP 0x00403540\n'
p949
S'b9 f0 82 60 00\ne9 36 fe ff ff\n'
p950
S'.text:0000000000403700\n.text:0000000000403705\n'
p951
tp952
sS'atexit'
p953
(S'\n__stdcall atexit(__func * __func)\n'
p954
V\u000a/* WARNING: Removing unreachable block (ram,0x00404f20) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_00608188)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p955
S'MOV RAX,0x6081c8\nTEST RAX,RAX\nJZ 0x00404f20\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401520\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401520\n'
p956
S'48 c7 c0 c8 81 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 0a c6 ff ff\n31 d2\n31 f6\ne9 f7 c5 ff ff\n'
p957
S'.text:0000000000404f00\n.text:0000000000404f07\n.text:0000000000404f0a\n.text:0000000000404f0c\n.text:0000000000404f0f\n.text:0000000000404f11\n.text:0000000000404f20\n.text:0000000000404f22\n.text:0000000000404f24\n'
p958
tp959
sS'__printf_chk'
p960
(S'\n__stdcall __printf_chk()\n'
p961
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_00608168)();\u000a  return;\u000a}\u000a\u000a
p962
S'JMP qword ptr [0x00608168]\n'
p963
S'ff 25 82 6c 20 00\n'
p964
S'.plt:00000000004014e0\n'
p965
tp966
sS'fdopen'
p967
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p968
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_00608158)();\u000a  return pFVar1;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x00608158]\n'
p970
S'ff 25 92 6c 20 00\n'
p971
S'.plt:00000000004014c0\n'
p972
tp973
sS'error'
p974
(S'\n__stdcall error()\n'
p975
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_00608170)();\u000a  return;\u000a}\u000a\u000a
p976
S'JMP qword ptr [0x00608170]\n'
p977
S'ff 25 7a 6c 20 00\n'
p978
S'.plt:00000000004014f0\n'
p979
tp980
sS'strcaseeq6'
p981
(S'\n__stdcall strcaseeq6()\n'
p982
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p983
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404a90\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00403dd2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403dd9\nJMP 0x00403dee\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403dee\nTEST BPL,BPL\nJZ 0x00403de9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00403e00\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p984
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 d1 0c 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p985
S'.text:0000000000403db0\n.text:0000000000403db1\n.text:0000000000403db2\n.text:0000000000403db3\n.text:0000000000403db5\n.text:0000000000403db8\n.text:0000000000403dba\n.text:0000000000403dbf\n.text:0000000000403dc3\n.text:0000000000403dc5\n.text:0000000000403dc7\n.text:0000000000403dca\n.text:0000000000403dcc\n.text:0000000000403dce\n.text:0000000000403dd0\n.text:0000000000403dd2\n.text:0000000000403dd4\n.text:0000000000403dd7\n.text:0000000000403dd9\n.text:0000000000403ddc\n.text:0000000000403dde\n.text:0000000000403de1\n.text:0000000000403de5\n.text:0000000000403de6\n.text:0000000000403de7\n.text:0000000000403de9\n.text:0000000000403dee\n.text:0000000000403df2\n.text:0000000000403df3\n.text:0000000000403df4\n'
p986
tp987
sS'strcaseeq5'
p988
(S'\n__stdcall strcaseeq5()\n'
p989
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p990
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404a90\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00403d86\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403d8d\nJMP 0x00403da4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403da4\nTEST BPL,BPL\nJZ 0x00403d9f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00403db0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p991
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 1d 0d 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p992
S'.text:0000000000403d60\n.text:0000000000403d61\n.text:0000000000403d63\n.text:0000000000403d64\n.text:0000000000403d67\n.text:0000000000403d69\n.text:0000000000403d6c\n.text:0000000000403d6e\n.text:0000000000403d73\n.text:0000000000403d77\n.text:0000000000403d79\n.text:0000000000403d7b\n.text:0000000000403d7e\n.text:0000000000403d80\n.text:0000000000403d82\n.text:0000000000403d84\n.text:0000000000403d86\n.text:0000000000403d88\n.text:0000000000403d8b\n.text:0000000000403d8d\n.text:0000000000403d90\n.text:0000000000403d92\n.text:0000000000403d96\n.text:0000000000403d99\n.text:0000000000403d9a\n.text:0000000000403d9c\n.text:0000000000403d9d\n.text:0000000000403d9f\n.text:0000000000403da4\n.text:0000000000403da5\n.text:0000000000403da7\n.text:0000000000403da8\n'
p993
tp994
sS'emit_ancillary_info'
p995
(S'\n__stdcall emit_ancillary_info()\n'
p996
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined *puVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x004052e0;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("tsort",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "tsort";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,"tsort",uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/","tsort");\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  puVar3 = &DAT_004051f0;\u000a  if (__s2 == "tsort") {\u000a    puVar3 = (undefined *)0x4050c3;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,puVar3);\u000a  return;\u000a}\u000a\u000a
p997
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x4052e0\nMOV ESI,0x4050a7\nNOP\nMOV EDI,0x40500b\nCALL 0x00401430\nTEST EAX,EAX\nJZ 0x004017eb\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x004017d0\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x40500b\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x405106\nMOV EDX,0x5\nCALL 0x00401310\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40511d\nMOV ECX,0x40512b\nXOR EAX,EAX\nCALL 0x004014e0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x004014d0\nTEST RAX,RAX\nJZ 0x00401874\nMOV ESI,0x405152\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401280\nTEST EAX,EAX\nJZ 0x00401874\nXOR EDI,EDI\nMOV ESI,0x405156\nMOV EDX,0x5\nCALL 0x00401310\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40500b\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004014e0\nXOR EDI,EDI\nMOV ESI,0x40519b\nMOV EDX,0x5\nCALL 0x00401310\nMOV RSI,RAX\nMOV R14D,0x40500b\nMOV EDI,0x1\nMOV EDX,0x40512b\nMOV ECX,0x40500b\nXOR EAX,EAX\nCALL 0x004014e0\nXOR EDI,EDI\nMOV ESI,0x4051ba\nMOV EDX,0x5\nCALL 0x00401310\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x4050c3\nMOV ECX,0x4051f0\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004014e0\n'
p998
S'41 56\n53\n50\nbb e0 52 40 00\nbe a7 50 40 00\n66 90\nbf 0b 50 40 00\ne8 56 fc ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 0b 50 40 00\n48 0f 45 d8\n31 ff\nbe 06 51 40 00\nba 05 00 00 00\ne8 04 fb ff ff\n48 89 c6\nbf 01 00 00 00\nba 1d 51 40 00\nb9 2b 51 40 00\n31 c0\ne8 bb fc ff ff\nbf 05 00 00 00\n31 f6\ne8 9f fc ff ff\n48 85 c0\n74 3e\nbe 52 51 40 00\nba 03 00 00 00\n48 89 c7\ne8 38 fa ff ff\n85 c0\n74 28\n31 ff\nbe 56 51 40 00\nba 05 00 00 00\ne8 b3 fa ff ff\n48 89 c1\nbf 01 00 00 00\nba 0b 50 40 00\n31 c0\n48 89 ce\ne8 6c fc ff ff\n31 ff\nbe 9b 51 40 00\nba 05 00 00 00\ne8 8b fa ff ff\n48 89 c6\n41 be 0b 50 40 00\nbf 01 00 00 00\nba 2b 51 40 00\nb9 0b 50 40 00\n31 c0\ne8 3c fc ff ff\n31 ff\nbe ba 51 40 00\nba 05 00 00 00\ne8 5b fa ff ff\n48 89 c2\n4c 39 f3\nb8 c3 50 40 00\nb9 f0 51 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 fe fb ff ff\n'
p999
S'.text:00000000004017c0\n.text:00000000004017c2\n.text:00000000004017c3\n.text:00000000004017c4\n.text:00000000004017c9\n.text:00000000004017ce\n.text:00000000004017d0\n.text:00000000004017d5\n.text:00000000004017da\n.text:00000000004017dc\n.text:00000000004017de\n.text:00000000004017e2\n.text:00000000004017e6\n.text:00000000004017e9\n.text:00000000004017eb\n.text:00000000004017ef\n.text:00000000004017f2\n.text:00000000004017f7\n.text:00000000004017fb\n.text:00000000004017fd\n.text:0000000000401802\n.text:0000000000401807\n.text:000000000040180c\n.text:000000000040180f\n.text:0000000000401814\n.text:0000000000401819\n.text:000000000040181e\n.text:0000000000401820\n.text:0000000000401825\n.text:000000000040182a\n.text:000000000040182c\n.text:0000000000401831\n.text:0000000000401834\n.text:0000000000401836\n.text:000000000040183b\n.text:0000000000401840\n.text:0000000000401843\n.text:0000000000401848\n.text:000000000040184a\n.text:000000000040184c\n.text:000000000040184e\n.text:0000000000401853\n.text:0000000000401858\n.text:000000000040185d\n.text:0000000000401860\n.text:0000000000401865\n.text:000000000040186a\n.text:000000000040186c\n.text:000000000040186f\n.text:0000000000401874\n.text:0000000000401876\n.text:000000000040187b\n.text:0000000000401880\n.text:0000000000401885\n.text:0000000000401888\n.text:000000000040188e\n.text:0000000000401893\n.text:0000000000401898\n.text:000000000040189d\n.text:000000000040189f\n.text:00000000004018a4\n.text:00000000004018a6\n.text:00000000004018ab\n.text:00000000004018b0\n.text:00000000004018b5\n.text:00000000004018b8\n.text:00000000004018bb\n.text:00000000004018c0\n.text:00000000004018c5\n.text:00000000004018c9\n.text:00000000004018ce\n.text:00000000004018d0\n.text:00000000004018d3\n.text:00000000004018d6\n.text:00000000004018da\n.text:00000000004018db\n.text:00000000004018dd\n'
p1000
tp1001
sS'strcaseeq7'
p1002
(S'\n__stdcall strcaseeq7()\n'
p1003
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1004
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00404a90\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00403e22\nTEST ECX,0xffffffdf\nJNZ 0x00403e26\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x00403e2a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1005
S'53\n48 89 fb\n31 ff\ne8 85 0c 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1006
S'.text:0000000000403e00\n.text:0000000000403e01\n.text:0000000000403e04\n.text:0000000000403e06\n.text:0000000000403e0b\n.text:0000000000403e0f\n.text:0000000000403e11\n.text:0000000000403e13\n.text:0000000000403e19\n.text:0000000000403e1b\n.text:0000000000403e20\n.text:0000000000403e21\n.text:0000000000403e22\n.text:0000000000403e24\n.text:0000000000403e26\n.text:0000000000403e28\n.text:0000000000403e29\n.text:0000000000403e2a\n.text:0000000000403e2f\n.text:0000000000403e30\n'
p1007
tp1008
sS'version_etc_va'
p1009
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p1010
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p1011
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x004044e0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x004044ec\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404501\nINC R9\nCMP R9,0xa\nJC 0x004044c0\nMOV R8,RSP\nCALL 0x00404120\nADD RSP,0x58\nRET\n'
p1012
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p1013
S'.text:00000000004044b0\n.text:00000000004044b4\n.text:00000000004044b7\n.text:00000000004044c0\n.text:00000000004044c3\n.text:00000000004044c7\n.text:00000000004044c9\n.text:00000000004044cc\n.text:00000000004044d0\n.text:00000000004044d4\n.text:00000000004044d7\n.text:00000000004044e0\n.text:00000000004044e4\n.text:00000000004044e8\n.text:00000000004044ec\n.text:00000000004044ef\n.text:00000000004044f3\n.text:00000000004044f6\n.text:00000000004044f8\n.text:00000000004044fb\n.text:00000000004044ff\n.text:0000000000404501\n.text:0000000000404504\n.text:0000000000404509\n.text:000000000040450d\n'
p1014
tp1015
sS'xzalloc'
p1016
(S'\n__stdcall xzalloc(size_t s)\n'
p1017
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p1018
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00404640\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x004013a0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1019
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 54 cc ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1020
S'.text:0000000000404730\n.text:0000000000404732\n.text:0000000000404733\n.text:0000000000404734\n.text:0000000000404737\n.text:000000000040473c\n.text:000000000040473f\n.text:0000000000404741\n.text:0000000000404744\n.text:0000000000404747\n.text:000000000040474c\n.text:000000000040474f\n.text:0000000000404753\n.text:0000000000404754\n.text:0000000000404756\n'
p1021
tp1022
sS'strcaseeq0'
p1023
(S'\n__stdcall strcaseeq0()\n'
p1024
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1025
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404a90\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00403b35\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403b3c\nJMP 0x00403b70\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403b70\nTEST BPL,BPL\nJZ 0x00403b6b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00403b80\nJMP 0x00403b70\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1026
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 6d 0f 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1027
S'.text:0000000000403b00\n.text:0000000000403b01\n.text:0000000000403b03\n.text:0000000000403b05\n.text:0000000000403b07\n.text:0000000000403b09\n.text:0000000000403b0a\n.text:0000000000403b0b\n.text:0000000000403b0e\n.text:0000000000403b11\n.text:0000000000403b14\n.text:0000000000403b17\n.text:0000000000403b19\n.text:0000000000403b1c\n.text:0000000000403b1e\n.text:0000000000403b23\n.text:0000000000403b26\n.text:0000000000403b28\n.text:0000000000403b2a\n.text:0000000000403b2d\n.text:0000000000403b2f\n.text:0000000000403b31\n.text:0000000000403b33\n.text:0000000000403b35\n.text:0000000000403b37\n.text:0000000000403b3a\n.text:0000000000403b3c\n.text:0000000000403b3f\n.text:0000000000403b41\n.text:0000000000403b45\n.text:0000000000403b4a\n.text:0000000000403b4d\n.text:0000000000403b51\n.text:0000000000403b55\n.text:0000000000403b59\n.text:0000000000403b5d\n.text:0000000000403b61\n.text:0000000000403b64\n.text:0000000000403b69\n.text:0000000000403b6b\n.text:0000000000403b70\n.text:0000000000403b74\n.text:0000000000403b75\n.text:0000000000403b77\n.text:0000000000403b79\n.text:0000000000403b7b\n.text:0000000000403b7d\n.text:0000000000403b7e\n'
p1028
tp1029
sS'init_tokenbuffer'
p1030
(S'\n__stdcall init_tokenbuffer(token_buffer * tokenbuffer)\n'
p1031
V\u000avoid init_tokenbuffer(token_buffer *tokenbuffer)\u000a\u000a{\u000a  *(undefined4 *)&tokenbuffer->size = 0;\u000a  *(undefined4 *)((long)&tokenbuffer->size + 4) = 0;\u000a  *(undefined4 *)&tokenbuffer->buffer = 0;\u000a  *(undefined4 *)((long)&tokenbuffer->buffer + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p1032
S'XORPS XMM0,XMM0\nMOVUPS xmmword ptr [RDI],XMM0\nRET\n'
p1033
S'0f 57 c0\n0f 11 07\nc3\n'
p1034
S'.text:0000000000403e40\n.text:0000000000403e43\n.text:0000000000403e46\n'
p1035
tp1036
sS'strcaseeq2'
p1037
(S'\n__stdcall strcaseeq2()\n'
p1038
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1039
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404a90\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00403c46\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403c4d\nJMP 0x00403c7a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403c7a\nTEST BPL,BPL\nJZ 0x00403c75\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403c90\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1040
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 5d 0e 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1041
S'.text:0000000000403c10\n.text:0000000000403c11\n.text:0000000000403c13\n.text:0000000000403c15\n.text:0000000000403c17\n.text:0000000000403c19\n.text:0000000000403c1a\n.text:0000000000403c1b\n.text:0000000000403c1e\n.text:0000000000403c21\n.text:0000000000403c24\n.text:0000000000403c27\n.text:0000000000403c29\n.text:0000000000403c2c\n.text:0000000000403c2e\n.text:0000000000403c33\n.text:0000000000403c37\n.text:0000000000403c39\n.text:0000000000403c3b\n.text:0000000000403c3e\n.text:0000000000403c40\n.text:0000000000403c42\n.text:0000000000403c44\n.text:0000000000403c46\n.text:0000000000403c48\n.text:0000000000403c4b\n.text:0000000000403c4d\n.text:0000000000403c50\n.text:0000000000403c52\n.text:0000000000403c56\n.text:0000000000403c5a\n.text:0000000000403c5e\n.text:0000000000403c62\n.text:0000000000403c65\n.text:0000000000403c69\n.text:0000000000403c6a\n.text:0000000000403c6c\n.text:0000000000403c6e\n.text:0000000000403c70\n.text:0000000000403c72\n.text:0000000000403c73\n.text:0000000000403c75\n.text:0000000000403c7a\n.text:0000000000403c7e\n.text:0000000000403c7f\n.text:0000000000403c81\n.text:0000000000403c83\n.text:0000000000403c85\n.text:0000000000403c87\n.text:0000000000403c88\n'
p1042
tp1043
sS'strcaseeq1'
p1044
(S'\n__stdcall strcaseeq1()\n'
p1045
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1046
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00404a90\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x00403bbd\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403bc4\nJMP 0x00403bf7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403bf7\nTEST BPL,BPL\nJZ 0x00403bf2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403c10\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1047
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 e6 0e 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1048
S'.text:0000000000403b80\n.text:0000000000403b81\n.text:0000000000403b83\n.text:0000000000403b85\n.text:0000000000403b87\n.text:0000000000403b89\n.text:0000000000403b8a\n.text:0000000000403b8b\n.text:0000000000403b90\n.text:0000000000403b93\n.text:0000000000403b96\n.text:0000000000403b99\n.text:0000000000403b9b\n.text:0000000000403b9e\n.text:0000000000403ba3\n.text:0000000000403ba5\n.text:0000000000403baa\n.text:0000000000403bae\n.text:0000000000403bb0\n.text:0000000000403bb2\n.text:0000000000403bb5\n.text:0000000000403bb7\n.text:0000000000403bb9\n.text:0000000000403bbb\n.text:0000000000403bbd\n.text:0000000000403bbf\n.text:0000000000403bc2\n.text:0000000000403bc4\n.text:0000000000403bc7\n.text:0000000000403bc9\n.text:0000000000403bcd\n.text:0000000000403bd1\n.text:0000000000403bd5\n.text:0000000000403bdb\n.text:0000000000403bdf\n.text:0000000000403be2\n.text:0000000000403be6\n.text:0000000000403be7\n.text:0000000000403be9\n.text:0000000000403beb\n.text:0000000000403bed\n.text:0000000000403bef\n.text:0000000000403bf0\n.text:0000000000403bf2\n.text:0000000000403bf7\n.text:0000000000403bfb\n.text:0000000000403bfc\n.text:0000000000403bfe\n.text:0000000000403c00\n.text:0000000000403c02\n.text:0000000000403c04\n.text:0000000000403c05\n'
p1049
tp1050
sS'strcaseeq4'
p1051
(S'\n__stdcall strcaseeq4()\n'
p1052
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1053
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404a90\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00403d2c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403d33\nJMP 0x00403d54\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403d54\nTEST BPL,BPL\nJZ 0x00403d4f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403d60\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1054
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 77 0d 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1055
S'.text:0000000000403d00\n.text:0000000000403d01\n.text:0000000000403d03\n.text:0000000000403d05\n.text:0000000000403d06\n.text:0000000000403d07\n.text:0000000000403d0a\n.text:0000000000403d0d\n.text:0000000000403d0f\n.text:0000000000403d12\n.text:0000000000403d14\n.text:0000000000403d19\n.text:0000000000403d1d\n.text:0000000000403d1f\n.text:0000000000403d21\n.text:0000000000403d24\n.text:0000000000403d26\n.text:0000000000403d28\n.text:0000000000403d2a\n.text:0000000000403d2c\n.text:0000000000403d2e\n.text:0000000000403d31\n.text:0000000000403d33\n.text:0000000000403d36\n.text:0000000000403d38\n.text:0000000000403d3c\n.text:0000000000403d40\n.text:0000000000403d43\n.text:0000000000403d47\n.text:0000000000403d48\n.text:0000000000403d4a\n.text:0000000000403d4c\n.text:0000000000403d4d\n.text:0000000000403d4f\n.text:0000000000403d54\n.text:0000000000403d58\n.text:0000000000403d59\n.text:0000000000403d5b\n.text:0000000000403d5d\n.text:0000000000403d5e\n'
p1056
tp1057
sS'set_nth_bit'
p1058
(S'\n__stdcall set_nth_bit(size_t n, word * bitset)\n'
p1059
V\u000avoid set_nth_bit(size_t n,word *bitset)\u000a\u000a{\u000a  bitset[n >> 6] = bitset[n >> 6] | 1 << ((byte)n & 0x3f);\u000a  return;\u000a}\u000a\u000a
p1060
S'MOV EAX,0x1\nMOV ECX,EDI\nSHL RAX,CL\nSHR RDI,0x6\nOR qword ptr [RSI + RDI*0x8],RAX\nRET\n'
p1061
S'b8 01 00 00 00\n89 f9\n48 d3 e0\n48 c1 ef 06\n48 09 04 fe\nc3\n'
p1062
S'.text:0000000000403f90\n.text:0000000000403f95\n.text:0000000000403f97\n.text:0000000000403f9a\n.text:0000000000403f9e\n.text:0000000000403fa2\n'
p1063
tp1064
sS'strcaseeq3'
p1065
(S'\n__stdcall strcaseeq3()\n'
p1066
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1067
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404a90\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00403cc0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403cc7\nJMP 0x00403cea\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403cea\nTEST BPL,BPL\nJZ 0x00403ce5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403d00\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1068
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 e3 0d 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1069
S'.text:0000000000403c90\n.text:0000000000403c91\n.text:0000000000403c93\n.text:0000000000403c95\n.text:0000000000403c97\n.text:0000000000403c98\n.text:0000000000403c9b\n.text:0000000000403c9e\n.text:0000000000403ca1\n.text:0000000000403ca3\n.text:0000000000403ca6\n.text:0000000000403ca8\n.text:0000000000403cad\n.text:0000000000403cb1\n.text:0000000000403cb3\n.text:0000000000403cb5\n.text:0000000000403cb8\n.text:0000000000403cba\n.text:0000000000403cbc\n.text:0000000000403cbe\n.text:0000000000403cc0\n.text:0000000000403cc2\n.text:0000000000403cc5\n.text:0000000000403cc7\n.text:0000000000403cca\n.text:0000000000403ccc\n.text:0000000000403cd0\n.text:0000000000403cd4\n.text:0000000000403cd8\n.text:0000000000403cdb\n.text:0000000000403cdc\n.text:0000000000403cde\n.text:0000000000403ce0\n.text:0000000000403ce2\n.text:0000000000403ce3\n.text:0000000000403ce5\n.text:0000000000403cea\n.text:0000000000403ceb\n.text:0000000000403ced\n.text:0000000000403cef\n.text:0000000000403cf1\n.text:0000000000403cf2\n'
p1070
tp1071
sS'register_tm_clones'
p1072
(S'\n__stdcall register_tm_clones()\n'
p1073
V\u000a/* WARNING: Removing unreachable block (ram,0x00401623) */\u000a/* WARNING: Removing unreachable block (ram,0x0040162d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1074
S'MOV ESI,0x608238\nPUSH RBP\nSUB RSI,0x608238\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401638\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401638\nPOP RBP\nMOV EDI,0x608238\nJMP RAX\nPOP RBP\nRET\n'
p1075
S'be 38 82 60 00\n55\n48 81 ee 38 82 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 38 82 60 00\nff e0\n5d\nc3\n'
p1076
S'.text:0000000000401600\n.text:0000000000401605\n.text:0000000000401606\n.text:000000000040160d\n.text:0000000000401611\n.text:0000000000401614\n.text:0000000000401617\n.text:000000000040161b\n.text:000000000040161e\n.text:0000000000401621\n.text:0000000000401623\n.text:0000000000401628\n.text:000000000040162b\n.text:000000000040162d\n.text:000000000040162e\n.text:0000000000401633\n.text:0000000000401638\n.text:0000000000401639\n'
p1077
tp1078
sS'gettext_quote'
p1079
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1080
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00405980;\u000a        pcVar2 = &DAT_00405984;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1081
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401310\nCMP RAX,RBX\nJNZ 0x00403af8\nCALL 0x00404b50\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00403b00\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403aa8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x405970\nMOV EAX,0x405974\nJMP 0x00403af4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00403b00\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403ae6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x405980\nMOV EAX,0x405984\nJMP 0x00403af4\nCMP R14D,0x9\nMOV ECX,0x405964\nMOV EAX,0x405968\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1082
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 b7 d8 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 e9 10 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 70 59 40 00\nb8 74 59 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 80 59 40 00\nb8 84 59 40 00\neb 0e\n41 83 fe 09\nb9 64 59 40 00\nb8 68 59 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1083
S'.text:0000000000403a40\n.text:0000000000403a41\n.text:0000000000403a43\n.text:0000000000403a44\n.text:0000000000403a47\n.text:0000000000403a4a\n.text:0000000000403a4c\n.text:0000000000403a51\n.text:0000000000403a54\n.text:0000000000403a59\n.text:0000000000403a5c\n.text:0000000000403a62\n.text:0000000000403a67\n.text:0000000000403a6a\n.text:0000000000403a6f\n.text:0000000000403a74\n.text:0000000000403a79\n.text:0000000000403a7f\n.text:0000000000403a85\n.text:0000000000403a88\n.text:0000000000403a8a\n.text:0000000000403a8c\n.text:0000000000403a91\n.text:0000000000403a95\n.text:0000000000403a97\n.text:0000000000403a99\n.text:0000000000403a9c\n.text:0000000000403aa1\n.text:0000000000403aa6\n.text:0000000000403aa8\n.text:0000000000403aad\n.text:0000000000403ab2\n.text:0000000000403ab7\n.text:0000000000403abd\n.text:0000000000403ac3\n.text:0000000000403ac6\n.text:0000000000403ac8\n.text:0000000000403aca\n.text:0000000000403acf\n.text:0000000000403ad3\n.text:0000000000403ad5\n.text:0000000000403ad7\n.text:0000000000403ada\n.text:0000000000403adf\n.text:0000000000403ae4\n.text:0000000000403ae6\n.text:0000000000403aea\n.text:0000000000403aef\n.text:0000000000403af4\n.text:0000000000403af8\n.text:0000000000403af9\n.text:0000000000403afb\n.text:0000000000403afc\n'
p1084
tp1085
sS'record_relation'
p1086
(S'\n__stdcall record_relation(item * j, item * k)\n'
p1087
V\u000avoid record_relation(item *j,item *k)\u000a\u000a{\u000a  int iVar1;\u000a  successor *psVar2;\u000a  \u000a  iVar1 = strcmp(j->str,k->str);\u000a  if (iVar1 != 0) {\u000a    k->count = k->count + 1;\u000a    psVar2 = (successor *)xmalloc(0x10);\u000a    psVar2->suc = k;\u000a    psVar2->next = j->top;\u000a    j->top = psVar2;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1088
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nMOV RDI,qword ptr [R14]\nMOV RSI,qword ptr [RBX]\nCALL 0x00401430\nTEST EAX,EAX\nJZ 0x00401ff6\nINC qword ptr [RBX + 0x20]\nMOV EDI,0x10\nCALL 0x00404640\nMOV qword ptr [RAX],RBX\nMOV RCX,qword ptr [R14 + 0x30]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [R14 + 0x30],RAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1089
S'41 56\n53\n50\n48 89 f3\n49 89 fe\n49 8b 3e\n48 8b 33\ne8 5b f4 ff ff\n85 c0\n74 1d\n48 ff 43 20\nbf 10 00 00 00\ne8 59 26 00 00\n48 89 18\n49 8b 4e 30\n48 89 48 08\n49 89 46 30\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1090
S'.text:0000000000401fc0\n.text:0000000000401fc2\n.text:0000000000401fc3\n.text:0000000000401fc4\n.text:0000000000401fc7\n.text:0000000000401fca\n.text:0000000000401fcd\n.text:0000000000401fd0\n.text:0000000000401fd5\n.text:0000000000401fd7\n.text:0000000000401fd9\n.text:0000000000401fdd\n.text:0000000000401fe2\n.text:0000000000401fe7\n.text:0000000000401fea\n.text:0000000000401fee\n.text:0000000000401ff2\n.text:0000000000401ff6\n.text:0000000000401ffa\n.text:0000000000401ffb\n.text:0000000000401ffd\n'
p1091
tp1092
sS'c_islower'
p1093
(S'\n__stdcall c_islower()\n'
p1094
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1095
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1096
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1097
S'.text:0000000000404a30\n.text:0000000000404a33\n.text:0000000000404a36\n.text:0000000000404a39\n'
p1098
tp1099
sS'freopen'
p1100
(S'\n__stdcall freopen(char * __filename, char * __modes, FILE * __stream)\n'
p1101
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * freopen(char *__filename,char *__modes,FILE *__stream)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_freopen_006080d0)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1102
S'JMP qword ptr [0x006080d0]\n'
p1103
S'ff 25 1a 6d 20 00\n'
p1104
S'.plt:00000000004013b0\n'
p1105
tp1106
sS'readtoken'
p1107
(S'\n__stdcall readtoken(FILE * stream, char * delim, size_t n_delim, token_buffer * tokenbuffer)\n'
p1108
V\u000asize_t readtoken(FILE *stream,char *delim,size_t n_delim,token_buffer *tokenbuffer)\u000a\u000a{\u000a  size_t sVar1;\u000a  _Bool _Var2;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  ulong uVar5;\u000a  size_t sVar6;\u000a  char *p;\u000a  word isdelim [4];\u000a  size_t local_68;\u000a  token_buffer *local_60;\u000a  undefined4 local_58;\u000a  undefined4 uStack84;\u000a  undefined4 uStack80;\u000a  undefined4 uStack76;\u000a  undefined4 local_48;\u000a  undefined4 uStack68;\u000a  undefined4 uStack64;\u000a  undefined4 uStack60;\u000a  \u000a  local_48 = 0;\u000a  uStack68 = 0;\u000a  uStack64 = 0;\u000a  uStack60 = 0;\u000a  local_58 = 0;\u000a  uStack84 = 0;\u000a  uStack80 = 0;\u000a  uStack76 = 0;\u000a  if (n_delim != 0) {\u000a    do {\u000a      set_nth_bit((ulong)(byte)*delim,(word *)&local_58);\u000a      delim = (char *)((byte *)delim + 1);\u000a      n_delim = n_delim - 1;\u000a    } while (n_delim != 0);\u000a  }\u000a  do {\u000a    uVar3 = getc_unlocked((FILE *)stream);\u000a    uVar5 = (ulong)uVar3;\u000a    if ((int)uVar3 < 0) {\u000a      return 0xffffffffffffffff;\u000a    }\u000a    _Var2 = get_nth_bit((long)(int)uVar3,(word *)&local_58);\u000a  } while (_Var2 != false);\u000a  local_68 = tokenbuffer->size;\u000a  p = tokenbuffer->buffer;\u000a  uVar3 = 0;\u000a  sVar1 = 0;\u000a  local_60 = tokenbuffer;\u000a  while( true ) {\u000a    sVar6 = sVar1;\u000a    if (sVar6 == local_68) {\u000a      p = (char *)x2nrealloc(p,&local_68,1);\u000a    }\u000a    if ((uVar3 != 0) || (_Var2 = get_nth_bit((long)(int)uVar5,(word *)&local_58), _Var2 != false))\u000a    break;\u000a    p[sVar6] = (char)uVar5;\u000a    uVar4 = getc_unlocked((FILE *)stream);\u000a    uVar5 = (ulong)uVar4;\u000a    uVar3 = uVar4 >> 0x1f;\u000a    sVar1 = sVar6 + 1;\u000a    if (((int)uVar4 < 0) && (sVar1 = sVar6 + 1, sVar6 == 0xffffffffffffffff)) {\u000a      return 0xffffffffffffffff;\u000a    }\u000a  }\u000a  p[sVar6] = 0;\u000a  local_60->buffer = p;\u000a  local_60->size = local_68;\u000a  return sVar6;\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV R12,RCX\nMOV RBP,RDX\nMOV RBX,RSI\nMOV R14,RDI\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nTEST RBP,RBP\nJZ 0x00403ea3\nLEA R15,[RSP + 0x10]\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EDI,byte ptr [RBX]\nMOV RSI,R15\nCALL 0x00403f90\nINC RBX\nDEC RBP\nJNZ 0x00403e90\nLEA RBX,[RSP + 0x10]\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R14\nCALL 0x004012d0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00403f4d\nMOVSXD RDI,EBP\nMOV RSI,RBX\nCALL 0x00403fb0\nTEST AL,AL\nJNZ 0x00403eb0\nMOV RAX,qword ptr [R12]\nMOV qword ptr [RSP + 0x8],R12\nMOV R15,qword ptr [R12 + 0x8]\nMOV qword ptr [RSP],RAX\nXOR EBX,EBX\nXOR R13D,R13D\nNOP dword ptr [RAX + RAX*0x1]\nMOV R12,R13\nCMP R12,qword ptr [RSP]\nJNZ 0x00403f0c\nMOV EDX,0x1\nMOV RDI,R15\nMOV RSI,RSP\nCALL 0x004046b0\nMOV R15,RAX\nTEST BL,0x1\nJNZ 0x00403f5e\nMOVSXD RDI,EBP\nLEA RSI,[RSP + 0x10]\nCALL 0x00403fb0\nTEST AL,AL\nJNZ 0x00403f5e\nLEA R13,[R12 + 0x1]\nMOV byte ptr [R15 + R12*0x1],BPL\nMOV RDI,R14\nCALL 0x004012d0\nMOV EBP,EAX\nMOV EBX,EBP\nSHR EBX,0x1f\nTEST EBP,EBP\nJNS 0x00403ef0\nCMP R12,-0x1\nJNZ 0x00403ef0\nMOV R12,-0x1\nJMP 0x00403f73\nMOV RAX,qword ptr [R12]\nMOV qword ptr [RSP],RAX\nMOV R12,-0x1\nJMP 0x00403f73\nMOV byte ptr [R15 + R12*0x1],0x0\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX + 0x8],R15\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RCX],RAX\nMOV RAX,R12\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1110
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n49 89 cc\n48 89 d5\n48 89 f3\n49 89 fe\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n48 85 ed\n74 27\n4c 8d 7c 24 10\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 3b\n4c 89 fe\ne8 f5 00 00 00\n48 ff c3\n48 ff cd\n75 ed\n48 8d 5c 24 10\n0f 1f 84 00 00 00 00 00\n4c 89 f7\ne8 18 d4 ff ff\n89 c5\n85 ed\n0f 88 8b 00 00 00\n48 63 fd\n48 89 de\ne8 e3 00 00 00\n84 c0\n75 df\n49 8b 04 24\n4c 89 64 24 08\n4d 8b 7c 24 08\n48 89 04 24\n31 db\n45 31 ed\n0f 1f 84 00 00 00 00 00\n4d 89 ec\n4c 3b 24 24\n75 13\nba 01 00 00 00\n4c 89 ff\n48 89 e6\ne8 a7 07 00 00\n49 89 c7\nf6 c3 01\n75 4d\n48 63 fd\n48 8d 74 24 10\ne8 92 00 00 00\n84 c0\n75 3c\n4d 8d 6c 24 01\n43 88 2c 27\n4c 89 f7\ne8 9d d3 ff ff\n89 c5\n89 eb\nc1 eb 1f\n85 ed\n79 b2\n49 83 fc ff\n75 ac\n49 c7 c4 ff ff ff ff\neb 26\n49 8b 04 24\n48 89 04 24\n49 c7 c4 ff ff ff ff\neb 15\n43 c6 04 27 00\n48 8b 4c 24 08\n4c 89 79 08\n48 8b 04 24\n48 89 01\n4c 89 e0\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1111
S'.text:0000000000403e50\n.text:0000000000403e51\n.text:0000000000403e53\n.text:0000000000403e55\n.text:0000000000403e57\n.text:0000000000403e59\n.text:0000000000403e5a\n.text:0000000000403e5e\n.text:0000000000403e61\n.text:0000000000403e64\n.text:0000000000403e67\n.text:0000000000403e6a\n.text:0000000000403e6d\n.text:0000000000403e72\n.text:0000000000403e77\n.text:0000000000403e7a\n.text:0000000000403e7c\n.text:0000000000403e81\n.text:0000000000403e90\n.text:0000000000403e93\n.text:0000000000403e96\n.text:0000000000403e9b\n.text:0000000000403e9e\n.text:0000000000403ea1\n.text:0000000000403ea3\n.text:0000000000403ea8\n.text:0000000000403eb0\n.text:0000000000403eb3\n.text:0000000000403eb8\n.text:0000000000403eba\n.text:0000000000403ebc\n.text:0000000000403ec2\n.text:0000000000403ec5\n.text:0000000000403ec8\n.text:0000000000403ecd\n.text:0000000000403ecf\n.text:0000000000403ed1\n.text:0000000000403ed5\n.text:0000000000403eda\n.text:0000000000403edf\n.text:0000000000403ee3\n.text:0000000000403ee5\n.text:0000000000403ee8\n.text:0000000000403ef0\n.text:0000000000403ef3\n.text:0000000000403ef7\n.text:0000000000403ef9\n.text:0000000000403efe\n.text:0000000000403f01\n.text:0000000000403f04\n.text:0000000000403f09\n.text:0000000000403f0c\n.text:0000000000403f0f\n.text:0000000000403f11\n.text:0000000000403f14\n.text:0000000000403f19\n.text:0000000000403f1e\n.text:0000000000403f20\n.text:0000000000403f22\n.text:0000000000403f27\n.text:0000000000403f2b\n.text:0000000000403f2e\n.text:0000000000403f33\n.text:0000000000403f35\n.text:0000000000403f37\n.text:0000000000403f3a\n.text:0000000000403f3c\n.text:0000000000403f3e\n.text:0000000000403f42\n.text:0000000000403f44\n.text:0000000000403f4b\n.text:0000000000403f4d\n.text:0000000000403f51\n.text:0000000000403f55\n.text:0000000000403f5c\n.text:0000000000403f5e\n.text:0000000000403f63\n.text:0000000000403f68\n.text:0000000000403f6c\n.text:0000000000403f70\n.text:0000000000403f73\n.text:0000000000403f76\n.text:0000000000403f7a\n.text:0000000000403f7b\n.text:0000000000403f7d\n.text:0000000000403f7f\n.text:0000000000403f81\n.text:0000000000403f83\n.text:0000000000403f84\n'
p1112
tp1113
sS'fclose'
p1114
(S'\n__stdcall fclose(FILE * __stream)\n'
p1115
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00608070)();\u000a  return iVar1;\u000a}\u000a\u000a
p1116
S'JMP qword ptr [0x00608070]\n'
p1117
S'ff 25 7a 6d 20 00\n'
p1118
S'.plt:00000000004012f0\n'
p1119
tp1120
sS'__ctype_get_mb_cur_max'
p1121
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1122
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_00608088)();\u000a  return sVar1;\u000a}\u000a\u000a
p1123
S'JMP qword ptr [0x00608088]\n'
p1124
S'ff 25 62 6d 20 00\n'
p1125
S'.plt:0000000000401320\n'
p1126
tp1127
sS'quotearg_n_style'
p1128
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1129
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1130
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00403770\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00403540\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1131
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1132
S'.text:0000000000403730\n.text:0000000000403731\n.text:0000000000403733\n.text:0000000000403734\n.text:0000000000403738\n.text:000000000040373b\n.text:000000000040373d\n.text:0000000000403742\n.text:0000000000403745\n.text:000000000040374a\n.text:0000000000403751\n.text:0000000000403753\n.text:0000000000403756\n.text:0000000000403759\n.text:000000000040375e\n.text:0000000000403762\n.text:0000000000403763\n.text:0000000000403765\n.text:0000000000403766\n'
p1133
tp1134
sS'fwrite'
p1135
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1136
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_00608198)();\u000a  return sVar1;\u000a}\u000a\u000a
p1137
S'JMP qword ptr [0x00608198]\n'
p1138
S'ff 25 52 6c 20 00\n'
p1139
S'.plt:0000000000401540\n'
p1140
tp1141
sS'quote_n'
p1142
(S'\n__stdcall quote_n(char * arg)\n'
p1143
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1144
S'MOV RDX,-0x1\nJMP 0x00403a00\n'
p1145
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1146
S'.text:0000000000403a20\n.text:0000000000403a27\n'
p1147
tp1148
sS'quotearg_alloc'
p1149
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1150
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1151
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x004033b0\n'
p1152
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1153
S'.text:00000000004033a0\n.text:00000000004033a3\n.text:00000000004033a5\n.text:00000000004033a8\n'
p1154
tp1155
sS'__do_global_dtors_aux'
p1156
(S'\n__stdcall __do_global_dtors_aux()\n'
p1157
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1158
S'CMP byte ptr [0x006082a8],0x0\nJNZ 0x0040165a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x004015c0\nPOP RBP\nMOV byte ptr [0x006082a8],0x1\nRET\n'
p1159
S'80 3d 61 6c 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 4e 6c 20 00 01\nf3 c3\n'
p1160
S'.text:0000000000401640\n.text:0000000000401647\n.text:0000000000401649\n.text:000000000040164a\n.text:000000000040164d\n.text:0000000000401652\n.text:0000000000401653\n.text:000000000040165a\n'
p1161
tp1162
sS'close_stdout_set_file_name'
p1163
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1164
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1165
S'MOV qword ptr [0x006082d0],RDI\nRET\n'
p1166
S'48 89 3d f9 60 20 00\nc3\n'
p1167
S'.text:00000000004021d0\n.text:00000000004021d7\n'
p1168
tp1169
sS'c_isprint'
p1170
(S'\n__stdcall c_isprint()\n'
p1171
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1172
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1173
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1174
S'.text:0000000000404a40\n.text:0000000000404a43\n.text:0000000000404a46\n.text:0000000000404a49\n'
p1175
tp1176
sS'_fini'
p1177
(S'\n__stdcall _fini()\n'
p1178
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1179
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1180
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1181
S'.fini:0000000000404f2c\n.fini:0000000000404f30\n.fini:0000000000404f34\n'
p1182
tp1183
sS'parse_long_options'
p1184
(S'\n__stdcall parse_long_options(char * * argv, char * command_name, char * package, char * version, anon_subr_void_int * usage_func)\n'
p1185
V\u000avoid parse_long_options(char **argv,char *command_name,char *package,char *version,\u000a                       void (*usage_func)(int),...)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  char in_AL;\u000a  int iVar2;\u000a  code *in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_f8;\u000a  undefined local_d8 [48];\u000a  undefined4 local_a8;\u000a  undefined4 local_98;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  \u000a  uVar1 = opterr;\u000a  if (in_AL != 0) {\u000a    local_a8 = in_XMM0_Da;\u000a    local_98 = in_XMM1_Da;\u000a    local_88 = in_XMM2_Da;\u000a    local_78 = in_XMM3_Da;\u000a    local_68 = in_XMM4_Da;\u000a    local_58 = in_XMM5_Da;\u000a    local_48 = in_XMM6_Da;\u000a    local_38 = in_XMM7_Da;\u000a  }\u000a  opterr = 0;\u000a  if ((int)argv != 2) {\u000a    optind = 0;\u000a    opterr = uVar1;\u000a    return;\u000a  }\u000a  iVar2 = getopt_long(argv,command_name,&DAT_00405372,long_options,0);\u000a  if (iVar2 != 0x76) {\u000a    if (iVar2 != 0x68) {\u000a      optind = 0;\u000a      opterr = uVar1;\u000a      return;\u000a    }\u000a    (*in_R9)(0);\u000a  }\u000a  local_f8.reg_save_area = local_d8;\u000a  local_f8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_f8.fp_offset = 0x30;\u000a  local_f8.gp_offset = 0x30;\u000a  version_etc_va(stdout,package,version,(char *)usage_func,&local_f8);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p1186
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0xd0\nMOV RBX,R9\nMOV R14,R8\nMOV R15,RCX\nMOV R12,RDX\nTEST AL,AL\nJZ 0x004024a6\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV EBP,dword ptr [0x00608280]\nMOV dword ptr [0x00608280],0x0\nCMP EDI,0x2\nJNZ 0x004024d7\nMOV EDX,0x405372\nMOV ECX,0x405390\nXOR R8D,R8D\nCALL 0x00401340\nCMP EAX,0x76\nJZ 0x004024fb\nCMP EAX,0x68\nJZ 0x004024f7\nMOV dword ptr [0x00608280],EBP\nMOV dword ptr [0x00608258],0x0\nADD RSP,0xd0\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nCALL RBX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x30\nMOV RDI,qword ptr [0x00608248]\nMOV R8,RSP\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x004044b0\nXOR EDI,EDI\nCALL 0x00401530\n'
p1187
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec d0 00 00 00\n4c 89 cb\n4d 89 c6\n49 89 cf\n49 89 d4\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n8b 2d d4 5d 20 00\nc7 05 ca 5d 20 00 00 00 00 00\n83 ff 02\n75 1c\nba 72 53 40 00\nb9 90 53 40 00\n45 31 c0\ne8 73 ee ff ff\n83 f8 76\n74 29\n83 f8 68\n74 20\n89 2d a3 5d 20 00\nc7 05 71 5d 20 00 00 00 00 00\n48 81 c4 d0 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n31 ff\nff d3\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 30 00 00 00\n48 8b 3d 20 5d 20 00\n49 89 e0\n4c 89 e6\n4c 89 fa\n4c 89 f1\ne8 77 1f 00 00\n31 ff\ne8 f0 ef ff ff\n'
p1188
S'.text:0000000000402450\n.text:0000000000402451\n.text:0000000000402453\n.text:0000000000402455\n.text:0000000000402457\n.text:0000000000402458\n.text:000000000040245f\n.text:0000000000402462\n.text:0000000000402465\n.text:0000000000402468\n.text:000000000040246b\n.text:000000000040246d\n.text:000000000040246f\n.text:0000000000402474\n.text:0000000000402479\n.text:000000000040247e\n.text:0000000000402486\n.text:000000000040248e\n.text:0000000000402496\n.text:000000000040249e\n.text:00000000004024a6\n.text:00000000004024ac\n.text:00000000004024b6\n.text:00000000004024b9\n.text:00000000004024bb\n.text:00000000004024c0\n.text:00000000004024c5\n.text:00000000004024c8\n.text:00000000004024cd\n.text:00000000004024d0\n.text:00000000004024d2\n.text:00000000004024d5\n.text:00000000004024d7\n.text:00000000004024dd\n.text:00000000004024e7\n.text:00000000004024ee\n.text:00000000004024ef\n.text:00000000004024f1\n.text:00000000004024f3\n.text:00000000004024f5\n.text:00000000004024f6\n.text:00000000004024f7\n.text:00000000004024f9\n.text:00000000004024fb\n.text:0000000000402500\n.text:0000000000402505\n.text:000000000040250d\n.text:0000000000402512\n.text:000000000040251a\n.text:0000000000402521\n.text:0000000000402528\n.text:000000000040252b\n.text:000000000040252e\n.text:0000000000402531\n.text:0000000000402534\n.text:0000000000402539\n.text:000000000040253b\n'
p1189
tp1190
sS'__fpending'
p1191
(S'\n__stdcall __fpending()\n'
p1192
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00608050)();\u000a  return;\u000a}\u000a\u000a
p1193
S'JMP qword ptr [0x00608050]\n'
p1194
S'ff 25 9a 6d 20 00\n'
p1195
S'.plt:00000000004012b0\n'
p1196
tp1197
s.