(dp0
S'XRRSetOutputPrimary'
p1
(S'\n__stdcall XRRSetOutputPrimary()\n'
p2
V\u000avoid XRRSetOutputPrimary(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRSetOutputPrimary_0060d098)();\u000a  return;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0060d098]\n'
p4
S'ff 25 12 b5 20 00\n'
p5
S'.plt:0000000000401b80\n'
p6
tp7
sS'XRRGetPanning'
p8
(S'\n__stdcall XRRGetPanning()\n'
p9
V\u000avoid XRRGetPanning(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetPanning_0060d1b0)();\u000a  return;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x0060d1b0]\n'
p11
S'ff 25 fa b3 20 00\n'
p12
S'.plt:0000000000401db0\n'
p13
tp14
sS'__libc_csu_init'
p15
(S'\n__stdcall __libc_csu_init()\n'
p16
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p17
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60cdc8]\nPUSH RBP\nLEA RBP,[0x60cdd0]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401a50\nTEST RBP,RBP\nJZ 0x004098b6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x004098a0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p18
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 56 35 20 00\n55\n48 8d 2d 56 35 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 bf 81 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p19
S'.text:0000000000409860\n.text:0000000000409862\n.text:0000000000409864\n.text:0000000000409867\n.text:0000000000409869\n.text:000000000040986b\n.text:0000000000409872\n.text:0000000000409873\n.text:000000000040987a\n.text:000000000040987b\n.text:000000000040987e\n.text:0000000000409881\n.text:0000000000409884\n.text:0000000000409888\n.text:000000000040988c\n.text:0000000000409891\n.text:0000000000409894\n.text:0000000000409896\n.text:0000000000409898\n.text:00000000004098a0\n.text:00000000004098a3\n.text:00000000004098a6\n.text:00000000004098a9\n.text:00000000004098ad\n.text:00000000004098b1\n.text:00000000004098b4\n.text:00000000004098b6\n.text:00000000004098ba\n.text:00000000004098bb\n.text:00000000004098bc\n.text:00000000004098be\n.text:00000000004098c0\n.text:00000000004098c2\n.text:00000000004098c4\n'
p20
tp21
sS'equal_transform'
p22
(S'\n__stdcall equal_transform(transform_t * a, transform_t * b)\n'
p23
V\u000aint equal_transform(transform_t *a,transform_t *b)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  \u000a  iVar1 = memcmp(a,b,0x24);\u000a  uVar2 = 0;\u000a  if (iVar1 == 0) {\u000a    iVar1 = strcmp(a->filter,b->filter);\u000a    if ((iVar1 == 0) && (a->nparams == b->nparams)) {\u000a      iVar1 = memcmp(a->params,b->params,(ulong)(uint)a->nparams << 2);\u000a      uVar2 = (uint)(iVar1 == 0);\u000a    }\u000a  }\u000a  return (int)uVar2;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV EDX,0x24\nCALL 0x00401c50\nXOR R14D,R14D\nTEST EAX,EAX\nJNZ 0x0040909f\nMOV RDI,qword ptr [RBP + 0x28]\nMOV RSI,qword ptr [RBX + 0x28]\nCALL 0x00401c70\nTEST EAX,EAX\nJNZ 0x0040909f\nMOVSXD RDX,dword ptr [RBP + 0x30]\nCMP EDX,dword ptr [RBX + 0x30]\nJNZ 0x0040909f\nMOV RDI,qword ptr [RBP + 0x38]\nMOV RSI,qword ptr [RBX + 0x38]\nSHL RDX,0x2\nCALL 0x00401c50\nXOR R14D,R14D\nTEST EAX,EAX\nSETZ R14B\nMOV EAX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p25
S'55\n41 56\n53\n48 89 f3\n48 89 fd\nba 24 00 00 00\ne8 ec 8b ff ff\n45 31 f6\n85 c0\n75 34\n48 8b 7d 28\n48 8b 73 28\ne8 f8 8b ff ff\n85 c0\n75 23\n48 63 55 30\n3b 53 30\n75 1a\n48 8b 7d 38\n48 8b 73 38\n48 c1 e2 02\ne8 ba 8b ff ff\n45 31 f6\n85 c0\n41 0f 94 c6\n44 89 f0\n5b\n41 5e\n5d\nc3\n'
p26
S'.text:0000000000409050\n.text:0000000000409051\n.text:0000000000409053\n.text:0000000000409054\n.text:0000000000409057\n.text:000000000040905a\n.text:000000000040905f\n.text:0000000000409064\n.text:0000000000409067\n.text:0000000000409069\n.text:000000000040906b\n.text:000000000040906f\n.text:0000000000409073\n.text:0000000000409078\n.text:000000000040907a\n.text:000000000040907c\n.text:0000000000409080\n.text:0000000000409083\n.text:0000000000409085\n.text:0000000000409089\n.text:000000000040908d\n.text:0000000000409091\n.text:0000000000409096\n.text:0000000000409099\n.text:000000000040909b\n.text:000000000040909f\n.text:00000000004090a2\n.text:00000000004090a3\n.text:00000000004090a5\n.text:00000000004090a6\n'
p27
tp28
sS'XRRSetPanning'
p29
(S'\n__stdcall XRRSetPanning()\n'
p30
V\u000avoid XRRSetPanning(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRSetPanning_0060d290)();\u000a  return;\u000a}\u000a\u000a
p31
S'JMP qword ptr [0x0060d290]\n'
p32
S'ff 25 1a b3 20 00\n'
p33
S'.plt:0000000000401f70\n'
p34
tp35
sS'output_rotations'
p36
(S'\n__stdcall output_rotations(output_t * output)\n'
p37
V\u000aRotation output_rotations(output_t *output)\u000a\u000a{\u000a  XRROutputInfo *pXVar1;\u000a  bool bVar2;\u000a  crtc_t *pcVar3;\u000a  ushort uVar4;\u000a  long lVar5;\u000a  \u000a  pXVar1 = output->output_info;\u000a  if (pXVar1->ncrtc < 1) {\u000a    uVar4 = 1;\u000a  }\u000a  else {\u000a    uVar4 = 1;\u000a    lVar5 = 0;\u000a    bVar2 = false;\u000a    do {\u000a      pcVar3 = find_crtc_by_xid(pXVar1->crtcs[lVar5]);\u000a      if ((pcVar3 != (crtc_t *)0x0) &&\u000a         (uVar4 = (-(ushort)!bVar2 | uVar4) & pcVar3->crtc_info->rotations, !bVar2)) {\u000a        bVar2 = true;\u000a      }\u000a      lVar5 = lVar5 + 1;\u000a    } while (lVar5 < (long)pXVar1->ncrtc);\u000a  }\u000a  return (Rotation)uVar4;\u000a}\u000a\u000a
p38
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R12,qword ptr [RDI + 0x38]\nCMP dword ptr [R12 + 0x34],0x0\nJLE 0x0040768c\nMOV R14W,0x1\nXOR EBP,EBP\nMOV R15D,0x1\nXOR EBX,EBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [R12 + 0x38]\nMOV RDI,qword ptr [RAX + RBP*0x8]\nCALL 0x00407730\nTEST RAX,RAX\nJZ 0x0040767d\nMOV RAX,qword ptr [RAX + 0x28]\nCMP EBX,0x1\nSBB ECX,ECX\nOR ECX,R14D\nAND CX,word ptr [RAX + 0x30]\nTEST EBX,EBX\nCMOVZ EBX,R15D\nMOV R14W,CX\nINC RBP\nMOVSXD RAX,dword ptr [R12 + 0x34]\nCMP RBP,RAX\nJL 0x00407650\nJMP 0x00407691\nMOV R14W,0x1\nMOV EAX,R14D\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p39
S'55\n41 57\n41 56\n41 54\n53\n4c 8b 67 38\n41 83 7c 24 34 00\n7e 58\n66 41 be 01 00\n31 ed\n41 bf 01 00 00 00\n31 db\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 44 24 38\n48 8b 3c e8\ne8 d2 00 00 00\n48 85 c0\n74 1a\n48 8b 40 28\n83 fb 01\n19 c9\n44 09 f1\n66 23 48 30\n85 db\n41 0f 44 df\n66 41 89 ce\n48 ff c5\n49 63 44 24 34\n48 39 c5\n7c c6\neb 05\n66 41 be 01 00\n44 89 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p40
S'.text:0000000000407620\n.text:0000000000407621\n.text:0000000000407623\n.text:0000000000407625\n.text:0000000000407627\n.text:0000000000407628\n.text:000000000040762c\n.text:0000000000407632\n.text:0000000000407634\n.text:0000000000407639\n.text:000000000040763b\n.text:0000000000407641\n.text:0000000000407643\n.text:0000000000407650\n.text:0000000000407655\n.text:0000000000407659\n.text:000000000040765e\n.text:0000000000407661\n.text:0000000000407663\n.text:0000000000407667\n.text:000000000040766a\n.text:000000000040766c\n.text:000000000040766f\n.text:0000000000407673\n.text:0000000000407675\n.text:0000000000407679\n.text:000000000040767d\n.text:0000000000407680\n.text:0000000000407685\n.text:0000000000407688\n.text:000000000040768a\n.text:000000000040768c\n.text:0000000000407691\n.text:0000000000407694\n.text:0000000000407695\n.text:0000000000407697\n.text:0000000000407699\n.text:000000000040769b\n.text:000000000040769c\n'
p41
tp42
sS'mode_geometry'
p43
(S'\n__stdcall mode_geometry(XRRModeInfo * mode_info, XTransform * transform, box_t * bounds)\n'
p44
V\u000avoid mode_geometry(XRRModeInfo *mode_info,XTransform *transform,box_t *bounds)\u000a\u000a{\u000a  point_t rect [4];\u000a  undefined4 local_48;\u000a  undefined4 local_44;\u000a  int local_40;\u000a  undefined4 local_3c;\u000a  int local_38;\u000a  int local_34;\u000a  undefined4 local_30;\u000a  int local_2c;\u000a  \u000a  local_40 = mode_width(mode_info);\u000a  local_34 = mode_height(mode_info);\u000a  local_48 = 0;\u000a  local_44 = 0;\u000a  local_3c = 0;\u000a  local_30 = 0;\u000a  local_38 = local_40;\u000a  local_2c = local_34;\u000a  path_bounds(bounds,&local_48);\u000a  return;\u000a}\u000a\u000a
p45
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x20\nMOV R14,RCX\nMOV R15,RDX\nMOV EBP,ESI\nMOV RBX,RDI\nCALL 0x00408a50\nMOV R12D,EAX\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00408a80\nMOV dword ptr [RSP],0x0\nMOV dword ptr [RSP + 0x4],0x0\nMOV dword ptr [RSP + 0x8],R12D\nMOV dword ptr [RSP + 0xc],0x0\nMOV dword ptr [RSP + 0x10],R12D\nMOV dword ptr [RSP + 0x14],EAX\nMOV dword ptr [RSP + 0x18],0x0\nMOV dword ptr [RSP + 0x1c],EAX\nMOV RSI,RSP\nMOV RDI,R15\nMOV RDX,R14\nCALL 0x00408b30\nADD RSP,0x20\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p46
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 20\n49 89 ce\n49 89 d7\n89 f5\n48 89 fb\ne8 84 ff ff ff\n41 89 c4\n48 89 df\n89 ee\ne8 a7 ff ff ff\nc7 04 24 00 00 00 00\nc7 44 24 04 00 00 00 00\n44 89 64 24 08\nc7 44 24 0c 00 00 00 00\n44 89 64 24 10\n89 44 24 14\nc7 44 24 18 00 00 00 00\n89 44 24 1c\n48 89 e6\n4c 89 ff\n4c 89 f2\ne8 18 00 00 00\n48 83 c4 20\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p47
S'.text:0000000000408ab0\n.text:0000000000408ab1\n.text:0000000000408ab3\n.text:0000000000408ab5\n.text:0000000000408ab7\n.text:0000000000408ab8\n.text:0000000000408abc\n.text:0000000000408abf\n.text:0000000000408ac2\n.text:0000000000408ac4\n.text:0000000000408ac7\n.text:0000000000408acc\n.text:0000000000408acf\n.text:0000000000408ad2\n.text:0000000000408ad4\n.text:0000000000408ad9\n.text:0000000000408ae0\n.text:0000000000408ae8\n.text:0000000000408aed\n.text:0000000000408af5\n.text:0000000000408afa\n.text:0000000000408afe\n.text:0000000000408b06\n.text:0000000000408b0a\n.text:0000000000408b0d\n.text:0000000000408b10\n.text:0000000000408b13\n.text:0000000000408b18\n.text:0000000000408b1c\n.text:0000000000408b1d\n.text:0000000000408b1f\n.text:0000000000408b21\n.text:0000000000408b23\n.text:0000000000408b24\n'
p48
tp49
sS'XRRFreeScreenConfigInfo'
p50
(S'\n__stdcall XRRFreeScreenConfigInfo()\n'
p51
V\u000avoid XRRFreeScreenConfigInfo(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRFreeScreenConfigInfo_0060d020)();\u000a  return;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x0060d020]\n'
p53
S'ff 25 8a b5 20 00\n'
p54
S'.plt:0000000000401a90\n'
p55
tp56
sS'usage'
p57
(S'\n__stdcall usage()\n'
p58
V\u000avoid usage(void)\u000a\u000a{\u000a  printf("usage: %s [options]\u005cn%s",program_name,\u000a                  \u000a         "  where options are:\u005cn  --display <display> or -d <display>\u005cn  --help\u005cn  -o <normal,inverted,left,right,0,1,2,3>\u005cn            or --orientation <normal,inverted,left,right,0,1,2,3>\u005cn  -q        or --query\u005cn  -s <size>/<width>x<height> or --size <size>/<width>x<height>\u005cn  -r <rate> or --rate <rate> or --refresh <rate>\u005cn  -v        or --version\u005cn  -x        (reflect in x)\u005cn  -y        (reflect in y)\u005cn  --screen <screen>\u005cn  --verbose\u005cn  --current\u005cn  --dryrun\u005cn  --nograb\u005cn  --prop or --properties\u005cn  --fb <width>x<height>\u005cn  --fbmm <width>x<height>\u005cn  --dpi <dpi>/<output>\u005cn  --output <output>\u005cn      --auto\u005cn      --mode <mode>\u005cn      --preferred\u005cn      --pos <x>x<y>\u005cn      --rate <rate> or --refresh <rate>\u005cn      --reflect normal,x,y,xy\u005cn      --rotate normal,inverted,left,right\u005cn      --left-of <output>\u005cn      --right-of <output>\u005cn      --above <output>\u005cn      --below <output>\u005cn      --same-as <output>\u005cn      --set <property> <value>\u005cn      --scale <x>x<y>\u005cn      --scale-from <w>x<h>\u005cn      --transform <a>,<b>,<c>,<d>,<e>,<f>,<g>,<h>,<i>\u005cn      --off\u005cn      --crtc <crtc>\u005cn      --panning <w>x<h>[+<x>+<y>[/<track:w>x<h>+<x>+<y>[/<border:l>/<t>/<r>/<b>]]]\u005cn      --gamma <r>:<g>:<b>\u005cn      --brightness <value>\u005cn      --primary\u005cn  --noprimary\u005cn  --newmode <name> <clock MHz>\u005cn            <hdisp> <hsync-start> <hsync-end> <htotal>\u005cn            <vdisp> <vsync-start> <vsync-end> <vtotal>\u005cn            [flags...]\u005cn            Valid flags: +HSync -HSync +VSync -VSync\u005cn                         +CSync -CSync CSync Interlace DoubleScan\u005cn  --rmmode <name>\u005cn  --addmode <output> <name>\u005cn  --delmode <output> <name>\u005cn  --listproviders\u005cn  --setprovideroutputsource <prov-xid> <source-xid>\u005cn  --setprovideroffloadsink <prov-xid> <sink-xid>\u005cn  --listmonitors\u005cn  --listactivemonitors\u005cn  --setmonitor <name> {auto|<w>/<mmw>x<h>/<mmh>+<x>+<y>} {none|<output>,<output>,...}\u005cn  --delmonitor <name>\u005cn"\u000a        );\u000a  return;\u000a}\u000a\u000a
p59
S'MOV RSI,qword ptr [0x0060d2f0]\nMOV EDI,0x40aa47\nMOV EDX,0x40aa5e\nXOR EAX,EAX\nJMP 0x00401bb0\n'
p60
S'48 8b 35 49 76 20 00\nbf 47 aa 40 00\nba 5e aa 40 00\n31 c0\ne9 f8 be ff ff\n'
p61
S'.text:0000000000405ca0\n.text:0000000000405ca7\n.text:0000000000405cac\n.text:0000000000405cb1\n.text:0000000000405cb3\n'
p62
tp63
sS'XRRQueryExtension'
p64
(S'\n__stdcall XRRQueryExtension()\n'
p65
V\u000avoid XRRQueryExtension(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRQueryExtension_0060d050)();\u000a  return;\u000a}\u000a\u000a
p66
S'JMP qword ptr [0x0060d050]\n'
p67
S'ff 25 5a b5 20 00\n'
p68
S'.plt:0000000000401af0\n'
p69
tp70
sS'get_outputs'
p71
(S'\n__stdcall get_outputs()\n'
p72
V\u000avoid get_outputs(void)\u000a\u000a{\u000a  Connection CVar1;\u000a  XRROutputInfo *output_info;\u000a  output_t *output;\u000a  long lVar2;\u000a  name_t local_40;\u000a  \u000a  output = all_outputs;\u000a  if (0 < res->noutput) {\u000a    lVar2 = 0;\u000a    do {\u000a      output_info = (XRROutputInfo *)XRRGetOutputInfo(dpy,res,res->outputs[lVar2]);\u000a      if (output_info == (XRROutputInfo *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        fatal("could not get output 0x%lx information\u005cn");\u000a      }\u000a      set_name_xid(&local_40,res->outputs[lVar2]);\u000a      set_name_index(&local_40);\u000a      set_name_string(&local_40,output_info->name);\u000a      output = find_output(&local_40);\u000a      if (output == (output_t *)0x0) {\u000a        output = add_output();\u000a        set_name_all(&output->output,&local_40);\u000a        if (automatic == 1) {\u000a          if (output_info->connection == 1) {\u000a            if (output_info->crtc != 0) goto LAB_0040622a;\u000a          }\u000a          else {\u000a            if ((output_info->connection == 0) && (output_info->crtc == 0)) {\u000aLAB_0040622a:\u000a              *(byte *)&output->changes = *(byte *)&output->changes | 0x40;\u000a              output->automatic = 1;\u000a            }\u000a          }\u000a        }\u000a      }\u000a      output->found = 1;\u000a      if (output->automatic != 0) {\u000a        CVar1 = output_info->connection;\u000a        if (CVar1 == 2) {\u000aLAB_0040626e:\u000a          if ((*(byte *)&output->changes & 2) == 0) {\u000a            set_name_preferred(&output->mode);\u000a            *(byte *)&output->changes = *(byte *)&output->changes | 2;\u000a          }\u000a        }\u000a        else {\u000a          if (CVar1 == 1) {\u000a            if ((*(byte *)&output->changes & 2) == 0) {\u000a              set_name_xid(&output->mode,0);\u000a              set_name_xid(&output->crtc,0);\u000a              *(byte *)&output->changes = *(byte *)&output->changes | 3;\u000a            }\u000a          }\u000a          else {\u000a            if (CVar1 == 0) goto LAB_0040626e;\u000a          }\u000a        }\u000a      }\u000a      set_output_info(output,res->outputs[lVar2],output_info);\u000a      lVar2 = lVar2 + 1;\u000a      output = all_outputs;\u000a    } while (lVar2 < (long)res->noutput);\u000a  }\u000a  while (output != (output_t *)0x0) {\u000a    if (output->found == 0) {\u000a      fprintf(stderr,"warning: output %s not found; ignoring\u005cn",(output->output).string);\u000a    }\u000a    output = (output_t *)output->next;\u000a  }\u000a  return;\u000a}\u000a\u000a
p73
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RSI,qword ptr [0x0060d3e8]\nCMP dword ptr [RSI + 0x20],0x0\nJLE 0x004062e1\nXOR EBX,EBX\nLEA R14,[RSP + 0x8]\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RAX,qword ptr [RSI + 0x28]\nMOV RDX,qword ptr [RAX + RBX*0x8]\nCALL 0x00401fc0\nMOV R15,RAX\nMOV RAX,qword ptr [0x0060d3e8]\nMOV RAX,qword ptr [RAX + 0x28]\nMOV RSI,qword ptr [RAX + RBX*0x8]\nTEST R15,R15\nJZ 0x00406326\nMOV RDI,R14\nCALL 0x00405eb0\nMOV RDI,R14\nMOV ESI,EBX\nCALL 0x00407b80\nMOV RSI,qword ptr [R15 + 0x10]\nMOV RDI,R14\nCALL 0x00407b70\nMOV RDI,R14\nCALL 0x004064d0\nMOV R12,RAX\nTEST R12,R12\nJNZ 0x00406240\nCALL 0x00405d70\nMOV R12,RAX\nLEA RDI,[R12 + 0x18]\nMOV RSI,R14\nCALL 0x00407c00\nCMP byte ptr [0x0060d330],0x1\nJNZ 0x00406240\nMOVZX EAX,word ptr [R15 + 0x30]\nCMP EAX,0x1\nJZ 0x00406223\nTEST AX,AX\nJNZ 0x00406240\nCMP qword ptr [R15 + 0x8],0x0\nJNZ 0x00406240\nJMP 0x0040622a\nCMP qword ptr [R15 + 0x8],0x0\nJZ 0x00406240\nOR byte ptr [R12 + 0x8],0x40\nMOV dword ptr [0x118 + R12],0x1\nNOP dword ptr [RAX]\nMOV dword ptr [0x17c + R12],0x1\nCMP dword ptr [0x118 + R12],0x0\nJZ 0x004062b0\nMOVZX EAX,word ptr [R15 + 0x30]\nCMP EAX,0x2\nJZ 0x0040626e\nMOVZX ECX,AX\nCMP ECX,0x1\nJZ 0x00406288\nTEST AX,AX\nJNZ 0x004062b0\nTEST byte ptr [R12 + 0x8],0x2\nJNZ 0x004062b0\nLEA RDI,[R12 + 0x70]\nCALL 0x00405e50\nOR byte ptr [R12 + 0x8],0x2\nJMP 0x004062b0\nTEST byte ptr [R12 + 0x8],0x2\nJNZ 0x004062b0\nLEA RDI,[R12 + 0x70]\nXOR ESI,ESI\nCALL 0x00405eb0\nLEA RDI,[R12 + 0x40]\nXOR ESI,ESI\nCALL 0x00405eb0\nOR byte ptr [R12 + 0x8],0x3\nNOP\nMOV RAX,qword ptr [0x0060d3e8]\nMOV RAX,qword ptr [RAX + 0x28]\nMOV RSI,qword ptr [RAX + RBX*0x8]\nMOV RDI,R12\nMOV RDX,R15\nCALL 0x00407c30\nINC RBX\nMOV RSI,qword ptr [0x0060d3e8]\nMOVSXD RAX,dword ptr [RSI + 0x20]\nCMP RBX,RAX\nJL 0x00406190\nMOV RBX,qword ptr [0x0060d3c8]\nTEST RBX,RBX\nJNZ 0x004062f8\nJMP 0x0040631a\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nJZ 0x0040631a\nCMP dword ptr [0x17c + RBX],0x0\nJNZ 0x004062f0\nMOV RDI,qword ptr [0x0060d2e0]\nMOV RDX,qword ptr [RBX + 0x20]\nMOV ESI,0x40b2aa\nXOR EAX,EAX\nCALL 0x00401ca0\nJMP 0x004062f0\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nMOV EDI,0x40b282\nXOR EAX,EAX\nCALL 0x00406410\n'
p74
S'41 57\n41 56\n41 54\n53\n48 83 ec 28\n48 8b 35 76 72 20 00\n83 7e 20 00\n0f 8e 65 01 00 00\n31 db\n4c 8d 74 24 08\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 3d 11 72 20 00\n48 8b 46 28\n48 8b 14 d8\ne8 1c be ff ff\n49 89 c7\n48 8b 05 3a 72 20 00\n48 8b 40 28\n48 8b 34 d8\n4d 85 ff\n0f 84 67 01 00 00\n4c 89 f7\ne8 e9 fc ff ff\n4c 89 f7\n89 de\ne8 af 19 00 00\n49 8b 77 10\n4c 89 f7\ne8 93 19 00 00\n4c 89 f7\ne8 eb 02 00 00\n49 89 c4\n4d 85 e4\n75 53\ne8 7e fb ff ff\n49 89 c4\n49 8d 7c 24 18\n4c 89 f6\ne8 fe 19 00 00\n80 3d 27 71 20 00 01\n75 35\n41 0f b7 47 30\n83 f8 01\n74 0e\n66 85 c0\n75 26\n49 83 7f 08 00\n75 1f\neb 07\n49 83 7f 08 00\n74 16\n41 80 4c 24 08 40\n41 c7 84 24 18 01 00 00 01 00 00 00\n0f 1f 40 00\n41 c7 84 24 7c 01 00 00 01 00 00 00\n41 83 bc 24 18 01 00 00 00\n74 59\n41 0f b7 47 30\n83 f8 02\n74 0d\n0f b7 c8\n83 f9 01\n74 1f\n66 85 c0\n75 42\n41 f6 44 24 08 02\n75 3a\n49 8d 7c 24 70\ne8 d0 fb ff ff\n41 80 4c 24 08 02\neb 28\n41 f6 44 24 08 02\n75 20\n49 8d 7c 24 70\n31 f6\ne8 14 fc ff ff\n49 8d 7c 24 40\n31 f6\ne8 08 fc ff ff\n41 80 4c 24 08 03\n66 90\n48 8b 05 31 71 20 00\n48 8b 40 28\n48 8b 34 d8\n4c 89 e7\n4c 89 fa\ne8 66 19 00 00\n48 ff c3\n48 8b 35 14 71 20 00\n48 63 46 20\n48 39 c3\n0f 8c af fe ff ff\n48 8b 1d e0 70 20 00\n48 85 db\n75 0b\neb 2b\n48 8b 1b\n48 85 db\n74 22\n83 bb 7c 01 00 00 00\n75 ef\n48 8b 3d d8 6f 20 00\n48 8b 53 20\nbe aa b2 40 00\n31 c0\ne8 88 b9 ff ff\neb d6\n48 83 c4 28\n5b\n41 5c\n41 5e\n41 5f\nc3\nbf 82 b2 40 00\n31 c0\ne8 de 00 00 00\n'
p75
S'.text:0000000000406160\n.text:0000000000406162\n.text:0000000000406164\n.text:0000000000406166\n.text:0000000000406167\n.text:000000000040616b\n.text:0000000000406172\n.text:0000000000406176\n.text:000000000040617c\n.text:000000000040617e\n.text:0000000000406183\n.text:0000000000406190\n.text:0000000000406197\n.text:000000000040619b\n.text:000000000040619f\n.text:00000000004061a4\n.text:00000000004061a7\n.text:00000000004061ae\n.text:00000000004061b2\n.text:00000000004061b6\n.text:00000000004061b9\n.text:00000000004061bf\n.text:00000000004061c2\n.text:00000000004061c7\n.text:00000000004061ca\n.text:00000000004061cc\n.text:00000000004061d1\n.text:00000000004061d5\n.text:00000000004061d8\n.text:00000000004061dd\n.text:00000000004061e0\n.text:00000000004061e5\n.text:00000000004061e8\n.text:00000000004061eb\n.text:00000000004061ed\n.text:00000000004061f2\n.text:00000000004061f5\n.text:00000000004061fa\n.text:00000000004061fd\n.text:0000000000406202\n.text:0000000000406209\n.text:000000000040620b\n.text:0000000000406210\n.text:0000000000406213\n.text:0000000000406215\n.text:0000000000406218\n.text:000000000040621a\n.text:000000000040621f\n.text:0000000000406221\n.text:0000000000406223\n.text:0000000000406228\n.text:000000000040622a\n.text:0000000000406230\n.text:000000000040623c\n.text:0000000000406240\n.text:000000000040624c\n.text:0000000000406255\n.text:0000000000406257\n.text:000000000040625c\n.text:000000000040625f\n.text:0000000000406261\n.text:0000000000406264\n.text:0000000000406267\n.text:0000000000406269\n.text:000000000040626c\n.text:000000000040626e\n.text:0000000000406274\n.text:0000000000406276\n.text:000000000040627b\n.text:0000000000406280\n.text:0000000000406286\n.text:0000000000406288\n.text:000000000040628e\n.text:0000000000406290\n.text:0000000000406295\n.text:0000000000406297\n.text:000000000040629c\n.text:00000000004062a1\n.text:00000000004062a3\n.text:00000000004062a8\n.text:00000000004062ae\n.text:00000000004062b0\n.text:00000000004062b7\n.text:00000000004062bb\n.text:00000000004062bf\n.text:00000000004062c2\n.text:00000000004062c5\n.text:00000000004062ca\n.text:00000000004062cd\n.text:00000000004062d4\n.text:00000000004062d8\n.text:00000000004062db\n.text:00000000004062e1\n.text:00000000004062e8\n.text:00000000004062eb\n.text:00000000004062ed\n.text:00000000004062f0\n.text:00000000004062f3\n.text:00000000004062f6\n.text:00000000004062f8\n.text:00000000004062ff\n.text:0000000000406301\n.text:0000000000406308\n.text:000000000040630c\n.text:0000000000406311\n.text:0000000000406313\n.text:0000000000406318\n.text:000000000040631a\n.text:000000000040631e\n.text:000000000040631f\n.text:0000000000406321\n.text:0000000000406323\n.text:0000000000406325\n.text:0000000000406326\n.text:000000000040632b\n.text:000000000040632d\n'
p76
tp77
sS'XRRGetScreenInfo'
p78
(S'\n__stdcall XRRGetScreenInfo()\n'
p79
V\u000avoid XRRGetScreenInfo(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetScreenInfo_0060d258)();\u000a  return;\u000a}\u000a\u000a
p80
S'JMP qword ptr [0x0060d258]\n'
p81
S'ff 25 52 b3 20 00\n'
p82
S'.plt:0000000000401f00\n'
p83
tp84
sS'XRRQueryOutputProperty'
p85
(S'\n__stdcall XRRQueryOutputProperty()\n'
p86
V\u000avoid XRRQueryOutputProperty(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRQueryOutputProperty_0060d228)();\u000a  return;\u000a}\u000a\u000a
p87
S'JMP qword ptr [0x0060d228]\n'
p88
S'ff 25 82 b3 20 00\n'
p89
S'.plt:0000000000401ea0\n'
p90
tp91
sS'property_values_from_string'
p92
(S'\n__stdcall property_values_from_string(char * str, Atom type, int * returned_nitems)\n'
p93
V\u000avoid * property_values_from_string(char *str,Atom type,int *returned_nitems)\u000a\u000a{\u000a  int iVar1;\u000a  size_t sVar2;\u000a  char *__s;\u000a  char *__nptr;\u000a  long lVar3;\u000a  void *__ptr;\u000a  undefined4 *in_RCX;\u000a  size_t __size;\u000a  undefined4 uVar4;\u000a  bool bVar5;\u000a  bool bVar6;\u000a  char *local_38;\u000a  \u000a  iVar1 = (int)returned_nitems;\u000a  if ((type == 0x13) || (type == 6)) {\u000a    uVar4 = 0;\u000a    if (iVar1 == 8) {\u000a      sVar2 = 1;\u000a    }\u000a    else {\u000a      if (iVar1 == 0x20) {\u000a        sVar2 = 8;\u000a      }\u000a      else {\u000a        if (iVar1 != 0x10) goto LAB_004066f2;\u000a        sVar2 = 2;\u000a      }\u000a    }\u000a    __s = (char *)__strdup();\u000a    __nptr = strtok(__s,",");\u000a    if (__nptr == (char *)0x0) {\u000a      __ptr = (void *)0x0;\u000a    }\u000a    else {\u000a      bVar5 = type != 0x13;\u000a      bVar6 = type == 6;\u000a      _uVar4 = 0;\u000a      __ptr = (void *)0x0;\u000a      __size = sVar2;\u000a      do {\u000a        lVar3 = strtol(__nptr,&local_38,0);\u000a        if ((__nptr == local_38) || (*local_38 != 0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a          argerr("failed to parse \u005c'%s\u005c' as a number\u005cn",__nptr);\u000a        }\u000a        __ptr = realloc(__ptr,__size);\u000a        if (iVar1 != 8 || bVar5) {\u000a          if (bVar5 || iVar1 != 0x10) {\u000a            if (bVar5 || iVar1 != 0x20) {\u000a              if (iVar1 == 8 && bVar6) {\u000a                *(undefined *)((long)__ptr + _uVar4) = (char)lVar3;\u000a                goto LAB_004066b0;\u000a              }\u000a              if (iVar1 == 0x10 && bVar6) goto LAB_00406687;\u000a              if (!bVar6 || iVar1 != 0x20) {\u000a                free(__s);\u000a                free(__ptr);\u000a                goto LAB_004066f2;\u000a              }\u000a            }\u000a            *(long *)((long)__ptr + _uVar4 * 8) = lVar3;\u000a          }\u000a          else {\u000aLAB_00406687:\u000a            *(undefined2 *)((long)__ptr + _uVar4 * 2) = (short)lVar3;\u000a          }\u000a        }\u000a        else {\u000a          *(undefined *)((long)__ptr + _uVar4) = (char)lVar3;\u000a        }\u000aLAB_004066b0:\u000a        _uVar4 = _uVar4 + 1;\u000a        uVar4 = (undefined4)_uVar4;\u000a        __nptr = strtok((char *)0x0,",");\u000a        __size = __size + sVar2;\u000a      } while (__nptr != (char *)0x0);\u000a    }\u000a    free(__s);\u000a    *in_RCX = uVar4;\u000a  }\u000a  else {\u000aLAB_004066f2:\u000a    __ptr = (void *)0x0;\u000a  }\u000a  return __ptr;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R12,RCX\nMOV R13D,EDX\nMOV R14,RSI\nCMP R14,0x13\nJZ 0x00406577\nCMP R14,0x6\nJNZ 0x004066f2\nXOR R15D,R15D\nCMP R13D,0x8\nJZ 0x00406597\nCMP R13D,0x20\nJZ 0x0040659e\nCMP R13D,0x10\nJNZ 0x004066f2\nMOV EAX,0x2\nJMP 0x004065a3\nMOV EAX,0x1\nJMP 0x004065a3\nMOV EAX,0x8\nMOV qword ptr [RSP + 0x8],RAX\nCALL 0x00401c30\nMOV ESI,0x40a1fe\nMOV qword ptr [RSP + 0x10],RAX\nMOV RDI,RAX\nCALL 0x00401ec0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x004066fe\nMOV qword ptr [RSP + 0x18],R12\nCMP R14,0x13\nSETZ BL\nCMP R13D,0x8\nSETZ DL\nMOV R12D,EBX\nAND R12B,DL\nCMP R13D,0x10\nSETZ AL\nMOV ECX,EBX\nAND CL,AL\nMOV byte ptr [RSP + 0x7],CL\nCMP R13D,0x20\nSETZ CL\nAND BL,CL\nMOV byte ptr [RSP + 0x6],BL\nCMP R14,0x6\nSETZ BL\nAND DL,BL\nMOV byte ptr [RSP + 0x5],DL\nAND AL,BL\nMOV byte ptr [RSP + 0x4],AL\nAND BL,CL\nMOV byte ptr [RSP + 0x3],BL\nXOR R15D,R15D\nMOV RBX,qword ptr [RSP + 0x8]\nXOR R13D,R13D\nNOP word ptr CS:[RAX + RAX*0x1]\nXOR EDX,EDX\nMOV RDI,RBP\nLEA RSI,[RSP + 0x20]\nCALL 0x00401cd0\nMOV R14,RAX\nMOV RAX,qword ptr [RSP + 0x20]\nCMP RBP,RAX\nJZ 0x00406721\nCMP byte ptr [RAX],0x0\nJNZ 0x00406721\nMOV RDI,R13\nMOV RSI,RBX\nCALL 0x00401e40\nMOV R13,RAX\nTEST R12B,R12B\nJZ 0x00406680\nMOV byte ptr [R13 + R15*0x1],R14B\nJMP 0x004066b0\nCMP byte ptr [RSP + 0x7],0x0\nJZ 0x00406690\nMOV word ptr [R13 + R15*0x2],R14W\nJMP 0x004066b0\nCMP byte ptr [RSP + 0x6],0x0\nJZ 0x0040669e\nMOV qword ptr [R13 + R15*0x8],R14\nJMP 0x004066b0\nCMP byte ptr [RSP + 0x5],0x0\nJZ 0x004066d2\nMOV byte ptr [R13 + R15*0x1],R14B\nNOP word ptr [RAX + RAX*0x1]\nINC R15\nXOR EDI,EDI\nMOV ESI,0x40a1fe\nCALL 0x00401ec0\nMOV RBP,RAX\nADD RBX,qword ptr [RSP + 0x8]\nTEST RBP,RBP\nJNZ 0x00406630\nJMP 0x004066f7\nCMP byte ptr [RSP + 0x4],0x0\nJNZ 0x00406687\nCMP byte ptr [RSP + 0x3],0x0\nJNZ 0x00406697\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00401a80\nMOV RDI,R13\nCALL 0x00401a80\nXOR R13D,R13D\nJMP 0x0040670f\nMOV R12,qword ptr [RSP + 0x18]\nJMP 0x00406701\nXOR R13D,R13D\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00401a80\nMOV dword ptr [R12],R15D\nMOV RAX,R13\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40b18a\nXOR EAX,EAX\nMOV RSI,RBP\nCALL 0x00405bc0\n'
p95
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cc\n41 89 d5\n49 89 f6\n49 83 fe 13\n74 0a\n49 83 fe 06\n0f 85 7b 01 00 00\n45 31 ff\n41 83 fd 08\n74 17\n41 83 fd 20\n74 18\n41 83 fd 10\n0f 85 62 01 00 00\nb8 02 00 00 00\neb 0c\nb8 01 00 00 00\neb 05\nb8 08 00 00 00\n48 89 44 24 08\ne8 83 b6 ff ff\nbe fe a1 40 00\n48 89 44 24 10\n48 89 c7\ne8 01 b9 ff ff\n48 89 c5\n48 85 ed\n0f 84 33 01 00 00\n4c 89 64 24 18\n49 83 fe 13\n0f 94 c3\n41 83 fd 08\n0f 94 c2\n41 89 dc\n41 20 d4\n41 83 fd 10\n0f 94 c0\n89 d9\n20 c1\n88 4c 24 07\n41 83 fd 20\n0f 94 c1\n20 cb\n88 5c 24 06\n49 83 fe 06\n0f 94 c3\n20 da\n88 54 24 05\n20 d8\n88 44 24 04\n20 cb\n88 5c 24 03\n45 31 ff\n48 8b 5c 24 08\n45 31 ed\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n31 d2\n48 89 ef\n48 8d 74 24 20\ne8 91 b6 ff ff\n49 89 c6\n48 8b 44 24 20\n48 39 c5\n0f 84 d1 00 00 00\n80 38 00\n0f 85 c8 00 00 00\n4c 89 ef\n48 89 de\ne8 dc b7 ff ff\n49 89 c5\n45 84 e4\n74 14\n47 88 74 3d 00\neb 3d\n80 7c 24 07 00\n74 09\n66 47 89 74 7d 00\neb 21\n80 7c 24 06 00\n74 07\n4f 89 74 fd 00\neb 12\n80 7c 24 05 00\n74 2d\n47 88 74 3d 00\n66 0f 1f 44 00 00\n49 ff c7\n31 ff\nbe fe a1 40 00\ne8 01 b8 ff ff\n48 89 c5\n48 03 5c 24 08\n48 85 ed\n0f 85 60 ff ff ff\neb 25\n80 7c 24 04 00\n75 ae\n80 7c 24 03 00\n75 b7\n48 8b 7c 24 10\ne8 96 b3 ff ff\n4c 89 ef\ne8 8e b3 ff ff\n45 31 ed\neb 18\n4c 8b 64 24 18\neb 03\n45 31 ed\n48 8b 7c 24 10\ne8 75 b3 ff ff\n45 89 3c 24\n4c 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 8a b1 40 00\n31 c0\n48 89 ee\ne8 90 f4 ff ff\n'
p96
S'.text:0000000000406550\n.text:0000000000406551\n.text:0000000000406553\n.text:0000000000406555\n.text:0000000000406557\n.text:0000000000406559\n.text:000000000040655a\n.text:000000000040655e\n.text:0000000000406561\n.text:0000000000406564\n.text:0000000000406567\n.text:000000000040656b\n.text:000000000040656d\n.text:0000000000406571\n.text:0000000000406577\n.text:000000000040657a\n.text:000000000040657e\n.text:0000000000406580\n.text:0000000000406584\n.text:0000000000406586\n.text:000000000040658a\n.text:0000000000406590\n.text:0000000000406595\n.text:0000000000406597\n.text:000000000040659c\n.text:000000000040659e\n.text:00000000004065a3\n.text:00000000004065a8\n.text:00000000004065ad\n.text:00000000004065b2\n.text:00000000004065b7\n.text:00000000004065ba\n.text:00000000004065bf\n.text:00000000004065c2\n.text:00000000004065c5\n.text:00000000004065cb\n.text:00000000004065d0\n.text:00000000004065d4\n.text:00000000004065d7\n.text:00000000004065db\n.text:00000000004065de\n.text:00000000004065e1\n.text:00000000004065e4\n.text:00000000004065e8\n.text:00000000004065eb\n.text:00000000004065ed\n.text:00000000004065ef\n.text:00000000004065f3\n.text:00000000004065f7\n.text:00000000004065fa\n.text:00000000004065fc\n.text:0000000000406600\n.text:0000000000406604\n.text:0000000000406607\n.text:0000000000406609\n.text:000000000040660d\n.text:000000000040660f\n.text:0000000000406613\n.text:0000000000406615\n.text:0000000000406619\n.text:000000000040661c\n.text:0000000000406621\n.text:0000000000406624\n.text:0000000000406630\n.text:0000000000406632\n.text:0000000000406635\n.text:000000000040663a\n.text:000000000040663f\n.text:0000000000406642\n.text:0000000000406647\n.text:000000000040664a\n.text:0000000000406650\n.text:0000000000406653\n.text:0000000000406659\n.text:000000000040665c\n.text:000000000040665f\n.text:0000000000406664\n.text:0000000000406667\n.text:000000000040666a\n.text:000000000040666c\n.text:0000000000406671\n.text:0000000000406680\n.text:0000000000406685\n.text:0000000000406687\n.text:000000000040668d\n.text:0000000000406690\n.text:0000000000406695\n.text:0000000000406697\n.text:000000000040669c\n.text:000000000040669e\n.text:00000000004066a3\n.text:00000000004066a5\n.text:00000000004066aa\n.text:00000000004066b0\n.text:00000000004066b3\n.text:00000000004066b5\n.text:00000000004066ba\n.text:00000000004066bf\n.text:00000000004066c2\n.text:00000000004066c7\n.text:00000000004066ca\n.text:00000000004066d0\n.text:00000000004066d2\n.text:00000000004066d7\n.text:00000000004066d9\n.text:00000000004066de\n.text:00000000004066e0\n.text:00000000004066e5\n.text:00000000004066ea\n.text:00000000004066ed\n.text:00000000004066f2\n.text:00000000004066f5\n.text:00000000004066f7\n.text:00000000004066fc\n.text:00000000004066fe\n.text:0000000000406701\n.text:0000000000406706\n.text:000000000040670b\n.text:000000000040670f\n.text:0000000000406712\n.text:0000000000406716\n.text:0000000000406717\n.text:0000000000406719\n.text:000000000040671b\n.text:000000000040671d\n.text:000000000040671f\n.text:0000000000406720\n.text:0000000000406721\n.text:0000000000406726\n.text:0000000000406728\n.text:000000000040672b\n'
p97
tp98
sS'print_edid'
p99
(S'\n__stdcall print_edid(uchar * prop)\n'
p100
V\u000avoid print_edid(uchar *prop)\u000a\u000a{\u000a  ulong uVar1;\u000a  long in_RSI;\u000a  \u000a  printf("\u005cn\u005ct\u005ct");\u000a  if (0 < (int)((ulong)prop & 0xffffffff)) {\u000a    uVar1 = 0;\u000a    do {\u000a      if ((uVar1 != 0) && ((uVar1 & 0xf) == 0)) {\u000a        printf("\u005cn\u005ct\u005ct");\u000a      }\u000a      printf("%02x",(ulong)*(byte *)(in_RSI + uVar1));\u000a      uVar1 = uVar1 + 1;\u000a    } while (((ulong)prop & 0xffffffff) != uVar1);\u000a  }\u000a  putchar(10);\u000a  return;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV EBP,EDI\nMOV EDI,0x40b7fd\nXOR EAX,EAX\nCALL 0x00401bb0\nTEST EBP,EBP\nJLE 0x004097a4\nMOV EBP,EBP\nXOR EBX,EBX\nNOP dword ptr [RAX]\nTEST RBX,RBX\nJZ 0x0040978b\nMOV EAX,EBX\nAND EAX,0xf\nTEST RAX,RAX\nJNZ 0x0040978b\nMOV EDI,0x40b7fd\nXOR EAX,EAX\nCALL 0x00401bb0\nMOVZX ESI,byte ptr [R14 + RBX*0x1]\nMOV EDI,0x40b801\nXOR EAX,EAX\nCALL 0x00401bb0\nINC RBX\nCMP RBP,RBX\nJNZ 0x00409770\nMOV EDI,0xa\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401aa0\n'
p102
S'55\n41 56\n53\n49 89 f6\n89 fd\nbf fd b7 40 00\n31 c0\ne8 4b 84 ff ff\n85 ed\n7e 3b\n89 ed\n31 db\n0f 1f 00\n48 85 db\n74 16\n89 d8\n83 e0 0f\n48 85 c0\n75 0c\nbf fd b7 40 00\n31 c0\ne8 25 84 ff ff\n41 0f b6 34 1e\nbf 01 b8 40 00\n31 c0\ne8 14 84 ff ff\n48 ff c3\n48 39 dd\n75 cc\nbf 0a 00 00 00\n5b\n41 5e\n5d\ne9 ee 82 ff ff\n'
p103
S'.text:0000000000409750\n.text:0000000000409751\n.text:0000000000409753\n.text:0000000000409754\n.text:0000000000409757\n.text:0000000000409759\n.text:000000000040975e\n.text:0000000000409760\n.text:0000000000409765\n.text:0000000000409767\n.text:0000000000409769\n.text:000000000040976b\n.text:000000000040976d\n.text:0000000000409770\n.text:0000000000409773\n.text:0000000000409775\n.text:0000000000409777\n.text:000000000040977a\n.text:000000000040977d\n.text:000000000040977f\n.text:0000000000409784\n.text:0000000000409786\n.text:000000000040978b\n.text:0000000000409790\n.text:0000000000409795\n.text:0000000000409797\n.text:000000000040979c\n.text:000000000040979f\n.text:00000000004097a2\n.text:00000000004097a4\n.text:00000000004097a9\n.text:00000000004097aa\n.text:00000000004097ac\n.text:00000000004097ad\n'
p104
tp105
sS'strncmp'
p106
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p107
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060d038)();\u000a  return iVar1;\u000a}\u000a\u000a
p108
S'JMP qword ptr [0x0060d038]\n'
p109
S'ff 25 72 b5 20 00\n'
p110
S'.plt:0000000000401ac0\n'
p111
tp112
sS'XRRGetOutputProperty'
p113
(S'\n__stdcall XRRGetOutputProperty()\n'
p114
V\u000avoid XRRGetOutputProperty(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetOutputProperty_0060d230)();\u000a  return;\u000a}\u000a\u000a
p115
S'JMP qword ptr [0x0060d230]\n'
p116
S'ff 25 7a b3 20 00\n'
p117
S'.plt:0000000000401eb0\n'
p118
tp119
sS'set_name'
p120
(S'\n__stdcall set_name(name_t * name, char * string)\n'
p121
V\u000avoid set_name(name_t *name,char *string)\u000a\u000a{\u000a  int iVar1;\u000a  ulong in_RDX;\u000a  uint xid;\u000a  undefined local_20 [4];\u000a  uint local_1c;\u000a  \u000a  if (((in_RDX & 2) != 0) && (iVar1 = __isoc99_sscanf(string,0x40a614,&local_1c), iVar1 == 1)) {\u000a    set_name_xid(name,(ulong)local_1c);\u000a    return;\u000a  }\u000a  if (((in_RDX & 4) != 0) && (iVar1 = __isoc99_sscanf(string,0x40b4b5,local_20), iVar1 == 1)) {\u000a    set_name_index(name);\u000a    return;\u000a  }\u000a  if ((in_RDX & 1) != 0) {\u000a    set_name_string(name,string);\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  argerr("invalid name \u005c'%s\u005c'\u005cn",string);\u000a}\u000a\u000a
p122
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV EBP,EDX\nMOV RBX,RSI\nMOV R14,RDI\nTEST BPL,0x2\nJZ 0x00405ded\nLEA RDX,[RSP + 0xc]\nMOV ESI,0x40a614\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401da0\nCMP EAX,0x1\nJNZ 0x00405ded\nMOV ESI,dword ptr [RSP + 0xc]\nMOV RDI,R14\nCALL 0x00405eb0\nJMP 0x00405e2b\nTEST BPL,0x4\nJZ 0x00405e1a\nLEA RDX,[RSP + 0x8]\nMOV ESI,0x40b4b5\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401da0\nCMP EAX,0x1\nJNZ 0x00405e1a\nMOV ESI,dword ptr [RSP + 0x8]\nMOV RDI,R14\nCALL 0x00407b80\nJMP 0x00405e2b\nTEST BPL,0x1\nJZ 0x00405e34\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00407b70\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV EDI,0x40b1c7\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00405bc0\n'
p123
S'55\n41 56\n53\n48 83 ec 10\n89 d5\n48 89 f3\n49 89 fe\n40 f6 c5 02\n74 27\n48 8d 54 24 0c\nbe 14 a6 40 00\n31 c0\n48 89 df\ne8 c6 bf ff ff\n83 f8 01\n75 0e\n8b 74 24 0c\n4c 89 f7\ne8 c5 00 00 00\neb 3e\n40 f6 c5 04\n74 27\n48 8d 54 24 08\nbe b5 b4 40 00\n31 c0\n48 89 df\ne8 99 bf ff ff\n83 f8 01\n75 0e\n8b 74 24 08\n4c 89 f7\ne8 68 1d 00 00\neb 11\n40 f6 c5 01\n74 14\n4c 89 f7\n48 89 de\ne8 45 1d 00 00\n48 83 c4 10\n5b\n41 5e\n5d\nc3\nbf c7 b1 40 00\n31 c0\n48 89 de\ne8 7d fd ff ff\n'
p124
S'.text:0000000000405db0\n.text:0000000000405db1\n.text:0000000000405db3\n.text:0000000000405db4\n.text:0000000000405db8\n.text:0000000000405dba\n.text:0000000000405dbd\n.text:0000000000405dc0\n.text:0000000000405dc4\n.text:0000000000405dc6\n.text:0000000000405dcb\n.text:0000000000405dd0\n.text:0000000000405dd2\n.text:0000000000405dd5\n.text:0000000000405dda\n.text:0000000000405ddd\n.text:0000000000405ddf\n.text:0000000000405de3\n.text:0000000000405de6\n.text:0000000000405deb\n.text:0000000000405ded\n.text:0000000000405df1\n.text:0000000000405df3\n.text:0000000000405df8\n.text:0000000000405dfd\n.text:0000000000405dff\n.text:0000000000405e02\n.text:0000000000405e07\n.text:0000000000405e0a\n.text:0000000000405e0c\n.text:0000000000405e10\n.text:0000000000405e13\n.text:0000000000405e18\n.text:0000000000405e1a\n.text:0000000000405e1e\n.text:0000000000405e20\n.text:0000000000405e23\n.text:0000000000405e26\n.text:0000000000405e2b\n.text:0000000000405e2f\n.text:0000000000405e30\n.text:0000000000405e32\n.text:0000000000405e33\n.text:0000000000405e34\n.text:0000000000405e39\n.text:0000000000405e3b\n.text:0000000000405e3e\n'
p125
tp126
sS'XRRConfigCurrentConfiguration'
p127
(S'\n__stdcall XRRConfigCurrentConfiguration()\n'
p128
V\u000avoid XRRConfigCurrentConfiguration(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRConfigCurrentConfiguration_0060d178)();\u000a  return;\u000a}\u000a\u000a
p129
S'JMP qword ptr [0x0060d178]\n'
p130
S'ff 25 32 b4 20 00\n'
p131
S'.plt:0000000000401d40\n'
p132
tp133
sS'vfprintf'
p134
(S'\n__stdcall vfprintf(FILE * __s, char * __format, __gnuc_va_list __arg)\n'
p135
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_vfprintf_0060d250)();\u000a  return iVar1;\u000a}\u000a\u000a
p136
S'JMP qword ptr [0x0060d250]\n'
p137
S'ff 25 5a b3 20 00\n'
p138
S'.plt:0000000000401ef0\n'
p139
tp140
sS'putchar'
p141
(S'\n__stdcall putchar(int __c)\n'
p142
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_0060d028)();\u000a  return iVar1;\u000a}\u000a\u000a
p143
S'JMP qword ptr [0x0060d028]\n'
p144
S'ff 25 82 b5 20 00\n'
p145
S'.plt:0000000000401aa0\n'
p146
tp147
sS'exp'
p148
(S'\n__stdcall exp(double __x)\n'
p149
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adouble exp(double __x)\u000a\u000a{\u000a  double dVar1;\u000a  \u000a  dVar1 = (double)(*(code *)PTR_exp_0060d070)();\u000a  return dVar1;\u000a}\u000a\u000a
p150
S'JMP qword ptr [0x0060d070]\n'
p151
S'ff 25 3a b5 20 00\n'
p152
S'.plt:0000000000401b30\n'
p153
tp154
sS'XFree'
p155
(S'\n__stdcall XFree()\n'
p156
V\u000avoid XFree(void)\u000a\u000a{\u000a  (*(code *)PTR_XFree_0060d0b8)();\u000a  return;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x0060d0b8]\n'
p158
S'ff 25 f2 b4 20 00\n'
p159
S'.plt:0000000000401bc0\n'
p160
tp161
sS'frame_dummy'
p162
(S'\n__stdcall frame_dummy()\n'
p163
V\u000a/* WARNING: Removing unreachable block (ram,0x004020ba) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p164
S'MOV EDI,0x60cdd8\nCMP qword ptr [RDI],0x0\nJNZ 0x004020b0\nJMP 0x00402040\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004020ab\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00402040\n'
p165
S'bf d8 cd 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p166
S'.text:00000000004020a0\n.text:00000000004020a5\n.text:00000000004020a9\n.text:00000000004020ab\n.text:00000000004020b0\n.text:00000000004020b5\n.text:00000000004020b8\n.text:00000000004020ba\n.text:00000000004020bb\n.text:00000000004020be\n.text:00000000004020c0\n.text:00000000004020c1\n'
p167
tp168
sS'print_verbose_mode'
p169
(S'\n__stdcall print_verbose_mode(XRRModeInfo * mode)\n'
p170
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid print_verbose_mode(XRRModeInfo *mode)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  uint uVar5;\u000a  undefined auVar6 [12];\u000a  int in_EDX;\u000a  long lVar7;\u000a  int in_ESI;\u000a  double dVar8;\u000a  undefined8 extraout_XMM0_Qb;\u000a  undefined auVar9 [16];\u000a  \u000a  auVar6 = ZEXT812(mode->dotClock) & (undefined  [12])0xffffffffffffffff;\u000a  auVar9 = subpd(CONCAT88(SUB168(CONCAT412(DAT_00409964,auVar6 | (undefined  [12])0x0 << 0x40) >>\u000a                                 0x40,0),CONCAT44(DAT_00409960,SUB124(auVar6,0))),_DAT_00409970);\u000a  auVar9 = addpd(CONCAT412(SUB164(auVar9 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar9,0),SUB168(auVar9 >> 0x40,0))),auVar9);\u000a  printf((char *)CONCAT88(SUB168(auVar9 >> 0x40,0),SUB168(auVar9,0) / _DAT_004098f0),\u000a         "  %s (0x%x) %6.3fMHz",mode->name,(ulong)*(uint *)&mode->id);\u000a  lVar7 = -0x90;\u000a  do {\u000a    if ((*(ulong *)((long)&mode_flags[9].flag + lVar7) & mode->modeFlags) != 0) {\u000a      printf(" %s",*(undefined8 *)((long)&mode_flags[9].string + lVar7));\u000a    }\u000a    lVar7 = lVar7 + 0x10;\u000a  } while (lVar7 != 0);\u000a  if (in_ESI != 0) {\u000a    printf(" *current");\u000a  }\u000a  if (in_EDX != 0) {\u000a    printf(" +preferred");\u000a  }\u000a  putchar(10);\u000a  uVar1 = mode->width;\u000a  uVar2 = mode->hSyncStart;\u000a  uVar3 = mode->hSyncEnd;\u000a  uVar4 = mode->hTotal;\u000a  uVar5 = mode->hSkew;\u000a  dVar8 = mode_hsync(mode);\u000a  printf((char *)CONCAT88(extraout_XMM0_Qb,dVar8 / _DAT_00409928),\u000a         "        h: width  %4d start %4d end %4d total %4d skew %4d clock %6.2fKHz\u005cn",(ulong)uVar1,\u000a         (ulong)uVar2,(ulong)uVar3,(ulong)uVar4,(ulong)uVar5);\u000a  uVar1 = mode->height;\u000a  uVar2 = mode->vSyncStart;\u000a  uVar3 = mode->vSyncEnd;\u000a  uVar4 = mode->vTotal;\u000a  mode_refresh(mode);\u000a  printf("        v: height %4d start %4d end %4d total %4d           clock %6.2fHz\u005cn",(ulong)uVar1,\u000a         (ulong)uVar2,(ulong)uVar3,(ulong)uVar4);\u000a  return;\u000a}\u000a\u000a
p171
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,EDX\nMOV R15D,ESI\nMOV RBX,RDI\nMOV RSI,qword ptr [RBX + 0x38]\nMOV EDX,dword ptr [RBX]\nMOVQ XMM1,qword ptr [RBX + 0x10]\nPUNPCKLDQ XMM1,xmmword ptr [0x00409960]\nSUBPD XMM1,xmmword ptr [0x00409970]\nPSHUFD XMM0,XMM1,0x4e\nADDPD XMM0,XMM1\nDIVSD XMM0,qword ptr [0x004098f0]\nMOV EDI,0x40b81f\nMOV AL,0x1\nCALL 0x00401bb0\nMOV RBP,-0x90\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [RBX + 0x48]\nTEST qword ptr [0x409b98 + RBP],RAX\nJZ 0x00407a20\nMOV RSI,qword ptr [0x409b90 + RBP]\nMOV EDI,0x40a61a\nXOR EAX,EAX\nCALL 0x00401bb0\nADD RBP,0x10\nJNZ 0x00407a00\nTEST R15D,R15D\nJZ 0x00407a37\nMOV EDI,0x40b834\nXOR EAX,EAX\nCALL 0x00401bb0\nTEST R14D,R14D\nJZ 0x00407a48\nMOV EDI,0x40b83e\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV EDI,0xa\nCALL 0x00401aa0\nMOV R14D,dword ptr [RBX + 0x8]\nMOV R15D,dword ptr [RBX + 0x18]\nMOV R12D,dword ptr [RBX + 0x1c]\nMOV R13D,dword ptr [RBX + 0x20]\nMOV EBP,dword ptr [RBX + 0x24]\nMOV RDI,RBX\nCALL 0x00409820\nDIVSD XMM0,qword ptr [0x00409928]\nMOV EDI,0x40b84a\nMOV AL,0x1\nMOV ESI,R14D\nMOV EDX,R15D\nMOV ECX,R12D\nMOV R8D,R13D\nMOV R9D,EBP\nCALL 0x00401bb0\nMOV R12D,dword ptr [RBX + 0xc]\nMOV R14D,dword ptr [RBX + 0x28]\nMOV R15D,dword ptr [RBX + 0x2c]\nMOV EBP,dword ptr [RBX + 0x30]\nMOV RDI,RBX\nCALL 0x00407ad0\nMOV EDI,0x40b895\nMOV AL,0x1\nMOV ESI,R12D\nMOV EDX,R14D\nMOV ECX,R15D\nMOV R8D,EBP\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401bb0\n'
p172
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 d6\n41 89 f7\n48 89 fb\n48 8b 73 38\n8b 13\nf3 0f 7e 4b 10\n66 0f 62 0d 99 1f 00 00\n66 0f 5c 0d a1 1f 00 00\n66 0f 70 c1 4e\n66 0f 58 c1\nf2 0f 5e 05 10 1f 00 00\nbf 1f b8 40 00\nb0 01\ne8 c4 a1 ff ff\n48 c7 c5 70 ff ff ff\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 43 48\n48 85 85 98 9b 40 00\n74 13\n48 8b b5 90 9b 40 00\nbf 1a a6 40 00\n31 c0\ne8 90 a1 ff ff\n48 83 c5 10\n75 da\n45 85 ff\n74 0c\nbf 34 b8 40 00\n31 c0\ne8 79 a1 ff ff\n45 85 f6\n74 0c\nbf 3e b8 40 00\n31 c0\ne8 68 a1 ff ff\nbf 0a 00 00 00\ne8 4e a0 ff ff\n44 8b 73 08\n44 8b 7b 18\n44 8b 63 1c\n44 8b 6b 20\n8b 6b 24\n48 89 df\ne8 b3 1d 00 00\nf2 0f 5e 05 b3 1e 00 00\nbf 4a b8 40 00\nb0 01\n44 89 f6\n44 89 fa\n44 89 e1\n45 89 e8\n41 89 e9\ne8 20 a1 ff ff\n44 8b 63 0c\n44 8b 73 28\n44 8b 7b 2c\n8b 6b 30\n48 89 df\ne8 29 00 00 00\nbf 95 b8 40 00\nb0 01\n44 89 e6\n44 89 f2\n44 89 f9\n41 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 e3 a0 ff ff\n'
p173
S'.text:00000000004079a0\n.text:00000000004079a1\n.text:00000000004079a3\n.text:00000000004079a5\n.text:00000000004079a7\n.text:00000000004079a9\n.text:00000000004079aa\n.text:00000000004079ab\n.text:00000000004079ae\n.text:00000000004079b1\n.text:00000000004079b4\n.text:00000000004079b8\n.text:00000000004079ba\n.text:00000000004079bf\n.text:00000000004079c7\n.text:00000000004079cf\n.text:00000000004079d4\n.text:00000000004079d8\n.text:00000000004079e0\n.text:00000000004079e5\n.text:00000000004079e7\n.text:00000000004079ec\n.text:00000000004079f3\n.text:0000000000407a00\n.text:0000000000407a04\n.text:0000000000407a0b\n.text:0000000000407a0d\n.text:0000000000407a14\n.text:0000000000407a19\n.text:0000000000407a1b\n.text:0000000000407a20\n.text:0000000000407a24\n.text:0000000000407a26\n.text:0000000000407a29\n.text:0000000000407a2b\n.text:0000000000407a30\n.text:0000000000407a32\n.text:0000000000407a37\n.text:0000000000407a3a\n.text:0000000000407a3c\n.text:0000000000407a41\n.text:0000000000407a43\n.text:0000000000407a48\n.text:0000000000407a4d\n.text:0000000000407a52\n.text:0000000000407a56\n.text:0000000000407a5a\n.text:0000000000407a5e\n.text:0000000000407a62\n.text:0000000000407a65\n.text:0000000000407a68\n.text:0000000000407a6d\n.text:0000000000407a75\n.text:0000000000407a7a\n.text:0000000000407a7c\n.text:0000000000407a7f\n.text:0000000000407a82\n.text:0000000000407a85\n.text:0000000000407a88\n.text:0000000000407a8b\n.text:0000000000407a90\n.text:0000000000407a94\n.text:0000000000407a98\n.text:0000000000407a9c\n.text:0000000000407a9f\n.text:0000000000407aa2\n.text:0000000000407aa7\n.text:0000000000407aac\n.text:0000000000407aae\n.text:0000000000407ab1\n.text:0000000000407ab4\n.text:0000000000407ab7\n.text:0000000000407aba\n.text:0000000000407abe\n.text:0000000000407abf\n.text:0000000000407ac1\n.text:0000000000407ac3\n.text:0000000000407ac5\n.text:0000000000407ac7\n.text:0000000000407ac8\n'
p174
tp175
sS'XRRConfigCurrentRate'
p176
(S'\n__stdcall XRRConfigCurrentRate()\n'
p177
V\u000avoid XRRConfigCurrentRate(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRConfigCurrentRate_0060d158)();\u000a  return;\u000a}\u000a\u000a
p178
S'JMP qword ptr [0x0060d158]\n'
p179
S'ff 25 52 b4 20 00\n'
p180
S'.plt:0000000000401d00\n'
p181
tp182
sS'XRRSetProviderOutputSource'
p183
(S'\n__stdcall XRRSetProviderOutputSource()\n'
p184
V\u000avoid XRRSetProviderOutputSource(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRSetProviderOutputSource_0060d200)();\u000a  return;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x0060d200]\n'
p186
S'ff 25 aa b3 20 00\n'
p187
S'.plt:0000000000401e50\n'
p188
tp189
sS'find_crtc_by_xid'
p190
(S'\n__stdcall find_crtc_by_xid(RRCrtc crtc)\n'
p191
V\u000acrtc_t * find_crtc_by_xid(RRCrtc crtc)\u000a\u000a{\u000a  crtc_t *pcVar1;\u000a  name_t crtc_name;\u000a  name_t local_30;\u000a  \u000a  init_name(&local_30);\u000a  set_name_xid(&local_30,crtc);\u000a  pcVar1 = find_crtc(&local_30);\u000a  return pcVar1;\u000a}\u000a\u000a
p192
S'PUSH R14\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00407b60\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00405eb0\nMOV RDI,R14\nCALL 0x00408210\nADD RSP,0x28\nPOP RBX\nPOP R14\nRET\n'
p193
S'41 56\n53\n48 83 ec 28\n48 89 fb\n4c 8d 74 24 08\n4c 89 f7\ne8 19 04 00 00\n4c 89 f7\n48 89 de\ne8 5e e7 ff ff\n4c 89 f7\ne8 b6 0a 00 00\n48 83 c4 28\n5b\n41 5e\nc3\n'
p194
S'.text:0000000000407730\n.text:0000000000407732\n.text:0000000000407733\n.text:0000000000407737\n.text:000000000040773a\n.text:000000000040773f\n.text:0000000000407742\n.text:0000000000407747\n.text:000000000040774a\n.text:000000000040774d\n.text:0000000000407752\n.text:0000000000407755\n.text:000000000040775a\n.text:000000000040775e\n.text:000000000040775f\n.text:0000000000407761\n'
p195
tp196
sS'XRRGetCrtcTransform'
p197
(S'\n__stdcall XRRGetCrtcTransform()\n'
p198
V\u000avoid XRRGetCrtcTransform(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetCrtcTransform_0060d2a0)();\u000a  return;\u000a}\u000a\u000a
p199
S'JMP qword ptr [0x0060d2a0]\n'
p200
S'ff 25 0a b3 20 00\n'
p201
S'.plt:0000000000401f90\n'
p202
tp203
sS'XRRGetCrtcInfo'
p204
(S'\n__stdcall XRRGetCrtcInfo()\n'
p205
V\u000avoid XRRGetCrtcInfo(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetCrtcInfo_0060d040)();\u000a  return;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x0060d040]\n'
p207
S'ff 25 6a b5 20 00\n'
p208
S'.plt:0000000000401ad0\n'
p209
tp210
sS'ceil'
p211
(S'\n__stdcall ceil(double __x)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adouble ceil(double __x)\u000a\u000a{\u000a  double dVar1;\u000a  \u000a  dVar1 = (double)(*(code *)PTR_ceil_0060d2a8)();\u000a  return dVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x0060d2a8]\n'
p214
S'ff 25 02 b3 20 00\n'
p215
S'.plt:0000000000401fa0\n'
p216
tp217
sS'check_crtc_for_output'
p218
(S'\n__stdcall check_crtc_for_output(crtc_t * crtc, output_t * output)\n'
p219
V\u000aint check_crtc_for_output(crtc_t *crtc,output_t *output)\u000a\u000a{\u000a  XRRCrtcInfo *pXVar1;\u000a  _output **pp_Var2;\u000a  int iVar3;\u000a  ulong uVar4;\u000a  XRRModeInfo *pXVar5;\u000a  uint uVar6;\u000a  long lVar7;\u000a  _output *p_Var8;\u000a  uint uVar9;\u000a  XRROutputInfo *pXVar10;\u000a  \u000a  pXVar10 = output->output_info;\u000a  uVar9 = pXVar10->ncrtc;\u000a  uVar4 = (ulong)uVar9;\u000a  if ((int)uVar9 < 1) {\u000a    uVar6 = 0;\u000a  }\u000a  else {\u000a    lVar7 = 0;\u000a    do {\u000a      uVar9 = (uint)uVar4;\u000a      uVar6 = (uint)lVar7;\u000a      if (pXVar10->crtcs[lVar7] == (crtc->crtc).xid) break;\u000a      lVar7 = lVar7 + 1;\u000a      uVar6 = (uint)lVar7;\u000a      pXVar10 = output->output_info;\u000a      uVar9 = pXVar10->ncrtc;\u000a      uVar4 = SEXT48((int)uVar9);\u000a    } while (lVar7 < (long)uVar4);\u000a  }\u000a  if (uVar6 == uVar9) {\u000aLAB_00409044:\u000a    iVar3 = 0;\u000a  }\u000a  else {\u000a    p_Var8 = (_output *)all_outputs;\u000a    if (all_outputs != (output_t *)0x0) {\u000a      do {\u000a        if (((p_Var8 != (_output *)output) &&\u000a            (((output_t *)p_Var8)->mode_info != (XRRModeInfo *)0x0)) &&\u000a           (((output_t *)p_Var8)->crtc_info == crtc)) {\u000a          pXVar10 = output->output_info;\u000a          uVar9 = pXVar10->nclone;\u000a          uVar4 = (ulong)uVar9;\u000a          if ((int)uVar9 < 1) {\u000a            uVar6 = 0;\u000a          }\u000a          else {\u000a            lVar7 = 0;\u000a            do {\u000a              uVar6 = (uint)lVar7;\u000a              uVar9 = (uint)uVar4;\u000a              if (pXVar10->clones[lVar7] == (((output_t *)p_Var8)->output).xid) break;\u000a              lVar7 = lVar7 + 1;\u000a              uVar6 = (uint)lVar7;\u000a              pXVar10 = output->output_info;\u000a              uVar9 = pXVar10->nclone;\u000a              uVar4 = SEXT48((int)uVar9);\u000a            } while (lVar7 < (long)uVar4);\u000a          }\u000a          if (uVar6 == uVar9) {\u000a            return 0;\u000a          }\u000a        }\u000a        pp_Var2 = &((output_t *)p_Var8)->next;\u000a        p_Var8 = *pp_Var2;\u000a      } while (*pp_Var2 != (_output *)0x0);\u000a    }\u000a    if (crtc->noutput == 0) {\u000a      if (crtc->crtc_info->noutput != 0) {\u000a        pXVar5 = find_mode_by_xid(crtc->crtc_info->mode);\u000a        if (((pXVar5 != output->mode_info) || (pXVar1 = crtc->crtc_info, pXVar1->x != output->x)) ||\u000a           (pXVar1->y != output->y)) goto LAB_00409044;\u000a        if (pXVar1->rotation != output->rotation) {\u000a          return 0;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if (((crtc->mode_info != output->mode_info) || (crtc->x != output->x)) ||\u000a         ((crtc->y != output->y || (crtc->rotation != output->rotation)))) goto LAB_00409044;\u000a      iVar3 = equal_transform(&crtc->current_transform,&output->transform);\u000a      if (iVar3 == 0) {\u000a        return 0;\u000a      }\u000a    }\u000a    iVar3 = 1;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p220
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RSI,qword ptr [R15 + 0x38]\nMOV EAX,dword ptr [RSI + 0x34]\nTEST EAX,EAX\nJLE 0x00408efc\nMOV RDX,qword ptr [R14 + 0x10]\nXOR ECX,ECX\nNOP dword ptr [RAX]\nMOV RSI,qword ptr [RSI + 0x38]\nCMP qword ptr [RSI + RCX*0x8],RDX\nJZ 0x00408efe\nINC RCX\nMOV RSI,qword ptr [R15 + 0x38]\nMOVSXD RAX,dword ptr [RSI + 0x34]\nCMP RCX,RAX\nJL 0x00408ee0\nJMP 0x00408efe\nXOR ECX,ECX\nCMP ECX,EAX\nJZ 0x00409044\nMOV RCX,qword ptr [0x0060d3c8]\nTEST RCX,RCX\nJZ 0x00408f88\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP RCX,R15\nJZ 0x00408f80\nCMP qword ptr [0x98 + RCX],0x0\nJZ 0x00408f80\nCMP qword ptr [RCX + 0x60],R14\nJNZ 0x00408f80\nMOV RBX,qword ptr [R15 + 0x38]\nMOV EDX,dword ptr [RBX + 0x40]\nXOR EAX,EAX\nTEST EDX,EDX\nJLE 0x00408f6c\nMOV RDI,qword ptr [RCX + 0x28]\nXOR ESI,ESI\nNOP dword ptr [RAX + RAX*0x1]\nMOV RBX,qword ptr [RBX + 0x48]\nCMP qword ptr [RBX + RSI*0x8],RDI\nJZ 0x00408f6e\nINC RSI\nMOV RBX,qword ptr [R15 + 0x38]\nMOVSXD RDX,dword ptr [RBX + 0x40]\nCMP RSI,RDX\nJL 0x00408f50\nJMP 0x00408f6e\nXOR ESI,ESI\nCMP ESI,EDX\nJZ 0x00409046\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RCX,qword ptr [RCX]\nTEST RCX,RCX\nJNZ 0x00408f20\nCMP dword ptr [R14 + 0x58],0x0\nJZ 0x00408ff2\nMOV RAX,qword ptr [R14 + 0x30]\nCMP RAX,qword ptr [0x98 + R15]\nJNZ 0x00409044\nMOV EAX,dword ptr [R14 + 0x40]\nCMP EAX,dword ptr [0xd0 + R15]\nJNZ 0x00409044\nMOV EAX,dword ptr [R14 + 0x44]\nCMP EAX,dword ptr [0xd4 + R15]\nJNZ 0x00409044\nMOVZX EAX,word ptr [R14 + 0x48]\nCMP AX,word ptr [0xd8 + R15]\nJNZ 0x00409044\nADD R14,0x60\nADD R15,0x128\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00409050\nTEST EAX,EAX\nMOV EAX,0x0\nJNZ 0x0040903d\nJMP 0x00409046\nMOV RAX,qword ptr [R14 + 0x28]\nCMP dword ptr [RAX + 0x24],0x0\nJZ 0x0040903d\nMOV RDI,qword ptr [RAX + 0x18]\nCALL 0x00407960\nCMP RAX,qword ptr [0x98 + R15]\nJNZ 0x00409044\nMOV RAX,qword ptr [R14 + 0x28]\nMOV ECX,dword ptr [RAX + 0x8]\nCMP ECX,dword ptr [0xd0 + R15]\nJNZ 0x00409044\nMOV ECX,dword ptr [RAX + 0xc]\nCMP ECX,dword ptr [0xd4 + R15]\nJNZ 0x00409044\nMOVZX EAX,word ptr [RAX + 0x20]\nCMP AX,word ptr [0xd8 + R15]\nMOV EAX,0x0\nJNZ 0x00409046\nMOV EAX,0x1\nJMP 0x00409046\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p221
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n49 8b 77 38\n8b 46 34\n85 c0\n7e 26\n49 8b 56 10\n31 c9\n0f 1f 40 00\n48 8b 76 38\n48 39 14 ce\n74 14\n48 ff c1\n49 8b 77 38\n48 63 46 34\n48 39 c1\n7c e6\neb 02\n31 c9\n39 c1\n0f 84 3e 01 00 00\n48 8b 0d bb 44 20 00\n48 85 c9\n74 76\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 39 f9\n74 5b\n48 83 b9 98 00 00 00 00\n74 51\n4c 39 71 60\n75 4b\n49 8b 5f 38\n8b 53 40\n31 c0\n85 d2\n7e 2a\n48 8b 79 28\n31 f6\n0f 1f 84 00 00 00 00 00\n48 8b 5b 48\n48 39 3c f3\n74 14\n48 ff c6\n49 8b 5f 38\n48 63 53 40\n48 39 d6\n7c e6\neb 02\n31 f6\n39 d6\n0f 84 d0 00 00 00\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 09\n48 85 c9\n75 98\n41 83 7e 58 00\n74 63\n49 8b 46 30\n49 3b 87 98 00 00 00\n0f 85 a4 00 00 00\n41 8b 46 40\n41 3b 87 d0 00 00 00\n0f 85 93 00 00 00\n41 8b 46 44\n41 3b 87 d4 00 00 00\n0f 85 82 00 00 00\n41 0f b7 46 48\n66 41 3b 87 d8 00 00 00\n75 73\n49 83 c6 60\n49 81 c7 28 01 00 00\n4c 89 f7\n4c 89 fe\ne8 69 00 00 00\n85 c0\nb8 00 00 00 00\n75 4d\neb 54\n49 8b 46 28\n83 78 24 00\n74 41\n48 8b 78 18\ne8 5b e9 ff ff\n49 3b 87 98 00 00 00\n75 36\n49 8b 46 28\n8b 48 08\n41 3b 8f d0 00 00 00\n75 26\n8b 48 0c\n41 3b 8f d4 00 00 00\n75 1a\n0f b7 40 20\n66 41 3b 87 d8 00 00 00\nb8 00 00 00 00\n75 09\nb8 01 00 00 00\neb 02\n31 c0\n5b\n41 5e\n41 5f\nc3\n'
p222
S'.text:0000000000408ec0\n.text:0000000000408ec2\n.text:0000000000408ec4\n.text:0000000000408ec5\n.text:0000000000408ec8\n.text:0000000000408ecb\n.text:0000000000408ecf\n.text:0000000000408ed2\n.text:0000000000408ed4\n.text:0000000000408ed6\n.text:0000000000408eda\n.text:0000000000408edc\n.text:0000000000408ee0\n.text:0000000000408ee4\n.text:0000000000408ee8\n.text:0000000000408eea\n.text:0000000000408eed\n.text:0000000000408ef1\n.text:0000000000408ef5\n.text:0000000000408ef8\n.text:0000000000408efa\n.text:0000000000408efc\n.text:0000000000408efe\n.text:0000000000408f00\n.text:0000000000408f06\n.text:0000000000408f0d\n.text:0000000000408f10\n.text:0000000000408f12\n.text:0000000000408f20\n.text:0000000000408f23\n.text:0000000000408f25\n.text:0000000000408f2d\n.text:0000000000408f2f\n.text:0000000000408f33\n.text:0000000000408f35\n.text:0000000000408f39\n.text:0000000000408f3c\n.text:0000000000408f3e\n.text:0000000000408f40\n.text:0000000000408f42\n.text:0000000000408f46\n.text:0000000000408f48\n.text:0000000000408f50\n.text:0000000000408f54\n.text:0000000000408f58\n.text:0000000000408f5a\n.text:0000000000408f5d\n.text:0000000000408f61\n.text:0000000000408f65\n.text:0000000000408f68\n.text:0000000000408f6a\n.text:0000000000408f6c\n.text:0000000000408f6e\n.text:0000000000408f70\n.text:0000000000408f76\n.text:0000000000408f80\n.text:0000000000408f83\n.text:0000000000408f86\n.text:0000000000408f88\n.text:0000000000408f8d\n.text:0000000000408f8f\n.text:0000000000408f93\n.text:0000000000408f9a\n.text:0000000000408fa0\n.text:0000000000408fa4\n.text:0000000000408fab\n.text:0000000000408fb1\n.text:0000000000408fb5\n.text:0000000000408fbc\n.text:0000000000408fc2\n.text:0000000000408fc7\n.text:0000000000408fcf\n.text:0000000000408fd1\n.text:0000000000408fd5\n.text:0000000000408fdc\n.text:0000000000408fdf\n.text:0000000000408fe2\n.text:0000000000408fe7\n.text:0000000000408fe9\n.text:0000000000408fee\n.text:0000000000408ff0\n.text:0000000000408ff2\n.text:0000000000408ff6\n.text:0000000000408ffa\n.text:0000000000408ffc\n.text:0000000000409000\n.text:0000000000409005\n.text:000000000040900c\n.text:000000000040900e\n.text:0000000000409012\n.text:0000000000409015\n.text:000000000040901c\n.text:000000000040901e\n.text:0000000000409021\n.text:0000000000409028\n.text:000000000040902a\n.text:000000000040902e\n.text:0000000000409036\n.text:000000000040903b\n.text:000000000040903d\n.text:0000000000409042\n.text:0000000000409044\n.text:0000000000409046\n.text:0000000000409047\n.text:0000000000409049\n.text:000000000040904b\n'
p223
tp224
sS'panic'
p225
(S'\n__stdcall panic(crtc_t * crtc)\n'
p226
V\u000avoid panic(crtc_t *crtc)\u000a\u000a{\u000a  long in_RAX;\u000a  long in_RSI;\u000a  char *pcVar1;\u000a  undefined8 in_R9;\u000a  \u000a  if ((uint)crtc < 0xc) {\u000a    in_RAX = (long)(int)(uint)crtc;\u000a    pcVar1 = (&PTR_s_succeeded_00409c50)[in_RAX];\u000a  }\u000a  else {\u000a    pcVar1 = "unknown failure";\u000a  }\u000a  fprintf(stderr,"%s: Configure crtc %d %s\u005cn",program_name,(ulong)*(uint *)(in_RSI + 0x18),pcVar1,\u000a          in_R9,in_RAX);\u000a  revert();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p227
S'MOV ECX,dword ptr [RSI + 0x18]\nCMP EDI,0xb\nJA 0x004091b5\nMOVSXD RAX,EDI\nMOV R8,qword ptr [0x409c50 + RAX*0x8]\nJMP 0x004091bb\nMOV R8D,0x40b67b\nPUSH RAX\nMOV RDI,qword ptr [0x0060d2e0]\nMOV RDX,qword ptr [0x0060d2f0]\nMOV ESI,0x40b68b\nXOR EAX,EAX\nCALL 0x00401ca0\nCALL 0x00409540\nMOV EDI,0x1\nCALL 0x00401f40\n'
p228
S'8b 4e 18\n83 ff 0b\n77 0d\n48 63 c7\n4c 8b 04 c5 50 9c 40 00\neb 06\n41 b8 7b b6 40 00\n50\n48 8b 3d 1d 41 20 00\n48 8b 15 26 41 20 00\nbe 8b b6 40 00\n31 c0\ne8 ca 8a ff ff\ne8 65 03 00 00\nbf 01 00 00 00\ne8 5b 8d ff ff\n'
p229
S'.text:00000000004091a0\n.text:00000000004091a3\n.text:00000000004091a6\n.text:00000000004091a8\n.text:00000000004091ab\n.text:00000000004091b3\n.text:00000000004091b5\n.text:00000000004091bb\n.text:00000000004091bc\n.text:00000000004091c3\n.text:00000000004091ca\n.text:00000000004091cf\n.text:00000000004091d1\n.text:00000000004091d6\n.text:00000000004091db\n.text:00000000004091e0\n'
p230
tp231
sS'XRRGetProviderInfo'
p232
(S'\n__stdcall XRRGetProviderInfo()\n'
p233
V\u000avoid XRRGetProviderInfo(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetProviderInfo_0060d090)();\u000a  return;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x0060d090]\n'
p235
S'ff 25 1a b5 20 00\n'
p236
S'.plt:0000000000401b70\n'
p237
tp238
sS'pick_crtcs'
p239
(S'\n__stdcall pick_crtcs()\n'
p240
V\u000avoid pick_crtcs(void)\u000a\u000a{\u000a  int iVar1;\u000a  XRRCrtcInfo *pXVar2;\u000a  RROutput output;\u000a  char *pcVar3;\u000a  long lVar4;\u000a  output_t *outputs;\u000a  output_t *poVar5;\u000a  crtc_t *pcVar6;\u000a  XRRCrtcInfo **ppXVar7;\u000a  long lVar8;\u000a  long lVar9;\u000a  _output *output_00;\u000a  undefined8 uStack32;\u000a  \u000a  lVar4 = -((ulong)(uint)num_crtcs * 4 + 0xf & 0x7fffffff0);\u000a  output_00 = (_output *)all_outputs;\u000a  if (all_outputs != (output_t *)0x0) {\u000a    do {\u000a      if ((((output_t *)output_00)->changes != changes_none) &&\u000a         (((output_t *)output_00)->mode_info != (XRRModeInfo *)0x0)) {\u000a        if (((output_t *)output_00)->crtc_info == (crtc_t *)0x0) {\u000a          *(undefined8 *)((long)&uStack32 + lVar4) = 0x406e10;\u000a          pcVar6 = find_crtc_for_output(output_00,*(undefined *)((long)&uStack32 + lVar4));\u000a          ((output_t *)output_00)->crtc_info = pcVar6;\u000a          outputs = all_outputs;\u000a          if (pcVar6 == (crtc_t *)0x0) goto joined_r0x00406e23;\u000a        }\u000a        else {\u000a          pXVar2 = ((output_t *)output_00)->crtc_info->crtc_info;\u000a          iVar1 = pXVar2->noutput;\u000a          if (0 < iVar1) {\u000a            outputs = all_outputs;\u000a            if (iVar1 != 1) {\u000ajoined_r0x00406e23:\u000a              while (outputs != (output_t *)0x0) {\u000a                outputs->current_crtc_info = outputs->crtc_info;\u000a                outputs = (output_t *)outputs->next;\u000a              }\u000a              if (0 < num_crtcs) {\u000a                lVar8 = (long)num_crtcs;\u000a                ppXVar7 = &crtcs->crtc_info;\u000a                lVar9 = 0;\u000a                do {\u000a                  pXVar2 = *ppXVar7;\u000a                  *(int *)(&stack0xffffffffffffffe8 + lVar4 + lVar9 * 4) = pXVar2->noutput;\u000a                  pXVar2->noutput = 0;\u000a                  lVar9 = lVar9 + 1;\u000a                  ppXVar7 = ppXVar7 + 0x1c;\u000a                } while (lVar9 < lVar8);\u000a              }\u000a              outputs = all_outputs;\u000a              *(undefined8 *)((long)&uStack32 + lVar4) = 0x406e8b;\u000a              pick_crtcs_score(outputs,*(undefined *)((long)&uStack32 + lVar4));\u000a              outputs = all_outputs;\u000a              if (0 < num_crtcs) {\u000a                lVar8 = (long)num_crtcs;\u000a                ppXVar7 = &crtcs->crtc_info;\u000a                lVar9 = 0;\u000a                do {\u000a                  (*ppXVar7)->noutput = *(int *)(&stack0xffffffffffffffe8 + lVar4 + lVar9 * 4);\u000a                  lVar9 = lVar9 + 1;\u000a                  ppXVar7 = ppXVar7 + 0x1c;\u000a                  outputs = all_outputs;\u000a                } while (lVar9 < lVar8);\u000a              }\u000a              while( true ) {\u000a                if (outputs == (output_t *)0x0) {\u000a                  return;\u000a                }\u000a                if ((outputs->mode_info != (XRRModeInfo *)0x0) &&\u000a                   (outputs->crtc_info == (crtc_t *)0x0)) break;\u000a                if ((outputs->changes == changes_none) &&\u000a                   (outputs->crtc_info != outputs->current_crtc_info)) {\u000a                  outputs->changes = changes_crtc;\u000a                }\u000a                outputs = (output_t *)outputs->next;\u000a              }\u000a              pcVar3 = (outputs->output).string;\u000a                    /* WARNING: Subroutine does not return */\u000a              *(undefined8 *)((long)&uStack32 + lVar4) = 0x406f2b;\u000a              fatal("cannot find crtc for output %s\u005cn",pcVar3);\u000a            }\u000a            output = *pXVar2->outputs;\u000a            *(undefined8 *)((long)&uStack32 + lVar4) = 0x406e01;\u000a            poVar5 = find_output_by_xid(output,*(undefined *)((long)&uStack32 + lVar4));\u000a            outputs = all_outputs;\u000a            if (output_00 != (_output *)poVar5) goto joined_r0x00406e23;\u000a          }\u000a        }\u000a      }\u000a      output_00 = ((output_t *)output_00)->next;\u000a    } while (output_00 != (_output *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p241
S'PUSH RBP\nMOV RBP,RSP\nPUSH R14\nPUSH RBX\nMOV EAX,dword ptr [0x0060d3fc]\nLEA RAX,[0xf + RAX*0x4]\nMOV RCX,0x7fffffff0\nAND RCX,RAX\nMOV R14,RSP\nSUB R14,RCX\nMOV RSP,R14\nMOV RBX,qword ptr [0x0060d3c8]\nTEST RBX,RBX\nJNZ 0x00406dcc\nJMP 0x00406f12\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nJZ 0x00406f12\nCMP dword ptr [RBX + 0x8],0x0\nJZ 0x00406dc0\nCMP qword ptr [0x98 + RBX],0x0\nJZ 0x00406dc0\nMOV RAX,qword ptr [RBX + 0x60]\nTEST RAX,RAX\nJZ 0x00406e08\nMOV RAX,qword ptr [RAX + 0x28]\nMOV ECX,dword ptr [RAX + 0x24]\nTEST ECX,ECX\nJLE 0x00406dc0\nCMP ECX,0x1\nJNZ 0x00406e19\nMOV RAX,qword ptr [RAX + 0x28]\nMOV RDI,qword ptr [RAX]\nCALL 0x004076f0\nCMP RBX,RAX\nJZ 0x00406dc0\nJMP 0x00406e19\nMOV RDI,RBX\nCALL 0x00408d20\nMOV qword ptr [RBX + 0x60],RAX\nTEST RAX,RAX\nJNZ 0x00406dc0\nMOV RAX,qword ptr [0x0060d3c8]\nTEST RAX,RAX\nJZ 0x00406e40\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RCX,qword ptr [RAX + 0x60]\nMOV qword ptr [RAX + 0x68],RCX\nMOV RAX,qword ptr [RAX]\nTEST RAX,RAX\nJNZ 0x00406e30\nCMP dword ptr [0x0060d3fc],0x0\nJLE 0x00406e7f\nMOV RAX,qword ptr [0x0060d400]\nMOVSXD RCX,dword ptr [0x0060d3fc]\nADD RAX,0x28\nXOR EDX,EDX\nNOP dword ptr [RAX]\nMOV RSI,qword ptr [RAX]\nMOV EDI,dword ptr [RSI + 0x24]\nMOV dword ptr [R14 + RDX*0x4],EDI\nMOV dword ptr [RSI + 0x24],0x0\nINC RDX\nADD RAX,0xe0\nCMP RDX,RCX\nJL 0x00406e60\nMOV RDI,qword ptr [0x0060d3c8]\nCALL 0x00408da0\nCMP dword ptr [0x0060d3fc],0x0\nJLE 0x00406ec8\nMOV RAX,qword ptr [0x0060d400]\nMOVSXD RCX,dword ptr [0x0060d3fc]\nADD RAX,0x28\nXOR EDX,EDX\nNOP dword ptr [RAX + RAX*0x1]\nMOV ESI,dword ptr [R14 + RDX*0x4]\nMOV RDI,qword ptr [RAX]\nMOV dword ptr [RDI + 0x24],ESI\nINC RDX\nADD RAX,0xe0\nCMP RDX,RCX\nJL 0x00406eb0\nMOV RAX,qword ptr [0x0060d3c8]\nTEST RAX,RAX\nJNZ 0x00406ee8\nJMP 0x00406f12\nMOV RAX,qword ptr [RAX]\nTEST RAX,RAX\nJZ 0x00406f12\nCMP qword ptr [0x98 + RAX],0x0\nJZ 0x00406ef9\nCMP qword ptr [RAX + 0x60],0x0\nJZ 0x00406f1b\nMOV ECX,dword ptr [RAX + 0x8]\nTEST ECX,ECX\nJNZ 0x00406ee0\nMOV RDX,qword ptr [RAX + 0x60]\nCMP RDX,qword ptr [RAX + 0x68]\nJZ 0x00406ee0\nOR ECX,0x1\nMOV dword ptr [RAX + 0x8],ECX\nJMP 0x00406ee0\nLEA RSP,[RBP + -0x10]\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV RSI,qword ptr [RAX + 0x20]\nMOV EDI,0x40b58c\nXOR EAX,EAX\nCALL 0x00406410\n'
p242
S'55\n48 89 e5\n41 56\n53\n8b 05 6f 66 20 00\n48 8d 04 85 0f 00 00 00\n48 b9 f0 ff ff ff 07 00 00 00\n48 21 c1\n49 89 e6\n49 29 ce\n4c 89 f4\n48 8b 1d 16 66 20 00\n48 85 db\n75 15\ne9 56 01 00 00\n48 8b 1b\n48 85 db\n0f 84 46 01 00 00\n83 7b 08 00\n74 ee\n48 83 bb 98 00 00 00 00\n74 e4\n48 8b 43 60\n48 85 c0\n74 23\n48 8b 40 28\n8b 48 24\n85 c9\n7e d0\n83 f9 01\n75 24\n48 8b 40 28\n48 8b 38\ne8 ef 08 00 00\n48 39 c3\n74 ba\neb 11\n48 89 df\ne8 10 1f 00 00\n48 89 43 60\n48 85 c0\n75 a7\n48 8b 05 a8 65 20 00\n48 85 c0\n74 1b\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 48 60\n48 89 48 68\n48 8b 00\n48 85 c0\n75 f0\n83 3d b5 65 20 00 00\n7e 36\n48 8b 05 b0 65 20 00\n48 63 0d a5 65 20 00\n48 83 c0 28\n31 d2\n0f 1f 00\n48 8b 30\n8b 7e 24\n41 89 3c 96\nc7 46 24 00 00 00 00\n48 ff c2\n48 05 e0 00 00 00\n48 39 ca\n7c e1\n48 8b 3d 42 65 20 00\ne8 15 1f 00 00\n83 3d 6a 65 20 00 00\n7e 34\n48 8b 05 65 65 20 00\n48 63 0d 5a 65 20 00\n48 83 c0 28\n31 d2\n0f 1f 84 00 00 00 00 00\n41 8b 34 96\n48 8b 38\n89 77 24\n48 ff c2\n48 05 e0 00 00 00\n48 39 ca\n7c e8\n48 8b 05 f9 64 20 00\n48 85 c0\n75 14\neb 3c\n48 8b 00\n48 85 c0\n74 2a\n48 83 b8 98 00 00 00 00\n74 07\n48 83 78 60 00\n74 22\n8b 48 08\n85 c9\n75 e0\n48 8b 50 60\n48 3b 50 68\n74 d6\n83 c9 01\n89 48 08\neb ce\n48 8d 65 f0\n5b\n41 5e\n5d\nc3\n48 8b 70 20\nbf 8c b5 40 00\n31 c0\ne8 e5 f4 ff ff\n'
p243
S'.text:0000000000406d80\n.text:0000000000406d81\n.text:0000000000406d84\n.text:0000000000406d86\n.text:0000000000406d87\n.text:0000000000406d8d\n.text:0000000000406d95\n.text:0000000000406d9f\n.text:0000000000406da2\n.text:0000000000406da5\n.text:0000000000406da8\n.text:0000000000406dab\n.text:0000000000406db2\n.text:0000000000406db5\n.text:0000000000406db7\n.text:0000000000406dc0\n.text:0000000000406dc3\n.text:0000000000406dc6\n.text:0000000000406dcc\n.text:0000000000406dd0\n.text:0000000000406dd2\n.text:0000000000406dda\n.text:0000000000406ddc\n.text:0000000000406de0\n.text:0000000000406de3\n.text:0000000000406de5\n.text:0000000000406de9\n.text:0000000000406dec\n.text:0000000000406dee\n.text:0000000000406df0\n.text:0000000000406df3\n.text:0000000000406df5\n.text:0000000000406df9\n.text:0000000000406dfc\n.text:0000000000406e01\n.text:0000000000406e04\n.text:0000000000406e06\n.text:0000000000406e08\n.text:0000000000406e0b\n.text:0000000000406e10\n.text:0000000000406e14\n.text:0000000000406e17\n.text:0000000000406e19\n.text:0000000000406e20\n.text:0000000000406e23\n.text:0000000000406e25\n.text:0000000000406e30\n.text:0000000000406e34\n.text:0000000000406e38\n.text:0000000000406e3b\n.text:0000000000406e3e\n.text:0000000000406e40\n.text:0000000000406e47\n.text:0000000000406e49\n.text:0000000000406e50\n.text:0000000000406e57\n.text:0000000000406e5b\n.text:0000000000406e5d\n.text:0000000000406e60\n.text:0000000000406e63\n.text:0000000000406e66\n.text:0000000000406e6a\n.text:0000000000406e71\n.text:0000000000406e74\n.text:0000000000406e7a\n.text:0000000000406e7d\n.text:0000000000406e7f\n.text:0000000000406e86\n.text:0000000000406e8b\n.text:0000000000406e92\n.text:0000000000406e94\n.text:0000000000406e9b\n.text:0000000000406ea2\n.text:0000000000406ea6\n.text:0000000000406ea8\n.text:0000000000406eb0\n.text:0000000000406eb4\n.text:0000000000406eb7\n.text:0000000000406eba\n.text:0000000000406ebd\n.text:0000000000406ec3\n.text:0000000000406ec6\n.text:0000000000406ec8\n.text:0000000000406ecf\n.text:0000000000406ed2\n.text:0000000000406ed4\n.text:0000000000406ee0\n.text:0000000000406ee3\n.text:0000000000406ee6\n.text:0000000000406ee8\n.text:0000000000406ef0\n.text:0000000000406ef2\n.text:0000000000406ef7\n.text:0000000000406ef9\n.text:0000000000406efc\n.text:0000000000406efe\n.text:0000000000406f00\n.text:0000000000406f04\n.text:0000000000406f08\n.text:0000000000406f0a\n.text:0000000000406f0d\n.text:0000000000406f10\n.text:0000000000406f12\n.text:0000000000406f16\n.text:0000000000406f17\n.text:0000000000406f19\n.text:0000000000406f1a\n.text:0000000000406f1b\n.text:0000000000406f1f\n.text:0000000000406f24\n.text:0000000000406f26\n'
p244
tp245
sS'exit'
p246
(S'\n__stdcall exit(int __status)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060d278)();\u000a  return;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x0060d278]\n'
p249
S'ff 25 32 b3 20 00\n'
p250
S'.plt:0000000000401f40\n'
p251
tp252
sS'mode_height'
p253
(S'\n__stdcall mode_height(XRRModeInfo * mode_info)\n'
p254
V\u000aint mode_height(XRRModeInfo *mode_info)\u000a\u000a{\u000a  uint uVar1;\u000a  byte in_SIL;\u000a  \u000a  uVar1 = 0;\u000a  switch(in_SIL & 0xf) {\u000a  case 1:\u000a  case 4:\u000a    return (int)mode_info->height;\u000a  case 2:\u000a  case 8:\u000a    uVar1 = mode_info->width;\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p255
S'AND SIL,0xf\nXOR EAX,EAX\nDEC SIL\nCMP SIL,0x7\nJA 0x00408aa1\nMOVZX ECX,SIL\nJMP qword ptr [0x409a58 + RCX*0x8]\nMOV EAX,dword ptr [RDI + 0xc]\nRET\nMOV EAX,dword ptr [RDI + 0x8]\nRET\n'
p256
S'40 80 e6 0f\n31 c0\n40 fe ce\n40 80 fe 07\n77 12\n40 0f b6 ce\nff 24 cd 58 9a 40 00\n8b 47 0c\nc3\n8b 47 08\nc3\n'
p257
S'.text:0000000000408a80\n.text:0000000000408a84\n.text:0000000000408a86\n.text:0000000000408a89\n.text:0000000000408a8d\n.text:0000000000408a8f\n.text:0000000000408a93\n.text:0000000000408a9a\n.text:0000000000408a9d\n.text:0000000000408a9e\n.text:0000000000408aa1\n'
p258
tp259
sS'__isoc99_sscanf'
p260
(S'\n__stdcall __isoc99_sscanf()\n'
p261
V\u000avoid __isoc99_sscanf(void)\u000a\u000a{\u000a  (*(code *)PTR___isoc99_sscanf_0060d1a8)();\u000a  return;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x0060d1a8]\n'
p263
S'ff 25 02 b4 20 00\n'
p264
S'.plt:0000000000401da0\n'
p265
tp266
sS'XRRGetScreenSizeRange'
p267
(S'\n__stdcall XRRGetScreenSizeRange()\n'
p268
V\u000avoid XRRGetScreenSizeRange(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetScreenSizeRange_0060d208)();\u000a  return;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x0060d208]\n'
p270
S'ff 25 a2 b3 20 00\n'
p271
S'.plt:0000000000401e60\n'
p272
tp273
sS'find_mode_for_output'
p274
(S'\n__stdcall find_mode_for_output(output_t * output, name_t * name)\n'
p275
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aXRRModeInfo * find_mode_for_output(output_t *output,name_t *name)\u000a\u000a{\u000a  XRROutputInfo *pXVar1;\u000a  bool bVar2;\u000a  int iVar3;\u000a  XRRModeInfo *mode_info;\u000a  long lVar4;\u000a  XRRModeInfo *pXVar5;\u000a  double dVar6;\u000a  double dVar7;\u000a  \u000a  pXVar1 = output->output_info;\u000a  if (pXVar1->nmode < 1) {\u000a    pXVar5 = (XRRModeInfo *)0x0;\u000a  }\u000a  else {\u000a    lVar4 = 0;\u000a    pXVar5 = (XRRModeInfo *)0x0;\u000a    dVar6 = 0.00000000;\u000a    do {\u000a      mode_info = find_mode_by_xid(pXVar1->modes[lVar4]);\u000a      if (mode_info != (XRRModeInfo *)0x0) {\u000a        if (((name->kind & name_xid) != name_none) && (name->xid == mode_info->id)) {\u000a          return mode_info;\u000a        }\u000a        if (((name->kind & name_string) != name_none) &&\u000a           (iVar3 = strcmp(name->string,mode_info->name), iVar3 == 0)) {\u000a          if (output->refresh == _DAT_00409938) {\u000a            dVar7 = 0.00000000;\u000a            if ((*(byte *)&mode_info->modeFlags & 0x20) != 0) goto LAB_004084f0;\u000a          }\u000a          else {\u000a            dVar7 = mode_refresh(mode_info);\u000a            dVar7 = (double)((ulong)(dVar7 - output->refresh) & _DAT_00409990);\u000a          }\u000a          bVar2 = dVar7 < dVar6;\u000a          if (dVar6 <= dVar7 && pXVar5 != (XRRModeInfo *)0x0) {\u000a            dVar7 = dVar6;\u000a          }\u000a          dVar6 = dVar7;\u000a          if (bVar2 || pXVar5 == (XRRModeInfo *)0x0) {\u000a            pXVar5 = mode_info;\u000a          }\u000a        }\u000a      }\u000aLAB_004084f0:\u000a      lVar4 = lVar4 + 1;\u000a    } while (lVar4 < (long)pXVar1->nmode);\u000a  }\u000a  return pXVar5;\u000a}\u000a\u000a
p276
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R14,RDI\nMOV R13,qword ptr [R14 + 0x38]\nCMP dword ptr [R13 + 0x50],0x0\nJLE 0x00408417\nXOR EBP,EBP\nXOR R15D,R15D\nXORPD XMM0,XMM0\nJMP 0x00408430\nXOR R15D,R15D\nJMP 0x00408505\nMOVSD XMM0,qword ptr [RSP]\nJMP 0x004084f0\nMOVSD qword ptr [RSP],XMM0\nMOV RAX,qword ptr [R13 + 0x58]\nMOV RDI,qword ptr [RAX + RBP*0x8]\nCALL 0x00407960\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408464\nMOV EAX,dword ptr [R12]\nTEST AL,0x2\nJZ 0x00408460\nMOV RCX,qword ptr [R12 + 0x10]\nCMP RCX,qword ptr [RBX]\nJZ 0x00408502\nTEST AL,0x1\nJNZ 0x00408470\nMOVSD XMM0,qword ptr [RSP]\nJMP 0x004084f0\nMOV RDI,qword ptr [R12 + 0x8]\nMOV RSI,qword ptr [RBX + 0x38]\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00408489\nMOVSD XMM0,qword ptr [RSP]\nJMP 0x004084f0\nMOVSD XMM0,qword ptr [0x90 + R14]\nUCOMISD XMM0,qword ptr [0x00409938]\nJNZ 0x0040849f\nJNP 0x004084ba\nMOV RDI,RBX\nCALL 0x00407ad0\nSUBSD XMM0,qword ptr [0x90 + R14]\nANDPD XMM0,xmmword ptr [0x00409990]\nJMP 0x004084c8\nXORPD XMM0,XMM0\nTEST byte ptr [RBX + 0x48],0x20\nJNZ 0x0040841f\nTEST R15,R15\nSETZ AL\nMOVSD XMM1,qword ptr [RSP]\nUCOMISD XMM1,XMM0\nSETA CL\nOR CL,AL\nJNZ 0x004084e2\nMOVAPD XMM0,XMM1\nCMOVNZ R15,RBX\nNOP word ptr CS:[RAX + RAX*0x1]\nINC RBP\nMOVSXD RAX,dword ptr [R13 + 0x50]\nCMP RBP,RAX\nJL 0x00408430\nJMP 0x00408505\nMOV R15,RBX\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p277
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f4\n49 89 fe\n4d 8b 6e 38\n41 83 7d 50 00\n7e 0b\n31 ed\n45 31 ff\n66 0f 57 c0\neb 19\n45 31 ff\ne9 e6 00 00 00\nf2 0f 10 04 24\ne9 c7 00 00 00\nf2 0f 11 04 24\n49 8b 45 58\n48 8b 3c e8\ne8 1e f5 ff ff\n48 89 c3\n48 85 db\n74 1a\n41 8b 04 24\na8 02\n74 0e\n49 8b 4c 24 10\n48 3b 0b\n0f 84 a2 00 00 00\na8 01\n75 0c\nf2 0f 10 04 24\ne9 82 00 00 00\n49 8b 7c 24 08\n48 8b 73 38\ne8 f2 97 ff ff\n85 c0\n74 07\nf2 0f 10 04 24\neb 67\nf2 41 0f 10 86 90 00 00 00\n66 0f 2e 04 25 38 99 40 00\n75 02\n7b 1b\n48 89 df\ne8 29 f6 ff ff\nf2 41 0f 5c 86 90 00 00 00\n66 0f 54 05 d8 14 00 00\neb 0e\n66 0f 57 c0\nf6 43 48 20\n0f 85 57 ff ff ff\n4d 85 ff\n0f 94 c0\nf2 0f 10 0c 24\n66 0f 2e c8\n0f 97 c1\n08 c1\n75 04\n66 0f 28 c1\n4c 0f 45 fb\n66 2e 0f 1f 84 00 00 00 00 00\n48 ff c5\n49 63 45 50\n48 39 c5\n0f 8c 30 ff ff ff\neb 03\n49 89 df\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p278
S'.text:00000000004083f0\n.text:00000000004083f1\n.text:00000000004083f3\n.text:00000000004083f5\n.text:00000000004083f7\n.text:00000000004083f9\n.text:00000000004083fa\n.text:00000000004083fb\n.text:00000000004083fe\n.text:0000000000408401\n.text:0000000000408405\n.text:000000000040840a\n.text:000000000040840c\n.text:000000000040840e\n.text:0000000000408411\n.text:0000000000408415\n.text:0000000000408417\n.text:000000000040841a\n.text:000000000040841f\n.text:0000000000408424\n.text:0000000000408430\n.text:0000000000408435\n.text:0000000000408439\n.text:000000000040843d\n.text:0000000000408442\n.text:0000000000408445\n.text:0000000000408448\n.text:000000000040844a\n.text:000000000040844e\n.text:0000000000408450\n.text:0000000000408452\n.text:0000000000408457\n.text:000000000040845a\n.text:0000000000408460\n.text:0000000000408462\n.text:0000000000408464\n.text:0000000000408469\n.text:0000000000408470\n.text:0000000000408475\n.text:0000000000408479\n.text:000000000040847e\n.text:0000000000408480\n.text:0000000000408482\n.text:0000000000408487\n.text:0000000000408489\n.text:0000000000408492\n.text:000000000040849b\n.text:000000000040849d\n.text:000000000040849f\n.text:00000000004084a2\n.text:00000000004084a7\n.text:00000000004084b0\n.text:00000000004084b8\n.text:00000000004084ba\n.text:00000000004084be\n.text:00000000004084c2\n.text:00000000004084c8\n.text:00000000004084cb\n.text:00000000004084ce\n.text:00000000004084d3\n.text:00000000004084d7\n.text:00000000004084da\n.text:00000000004084dc\n.text:00000000004084de\n.text:00000000004084e2\n.text:00000000004084e6\n.text:00000000004084f0\n.text:00000000004084f3\n.text:00000000004084f7\n.text:00000000004084fa\n.text:0000000000408500\n.text:0000000000408502\n.text:0000000000408505\n.text:0000000000408508\n.text:000000000040850c\n.text:000000000040850d\n.text:000000000040850f\n.text:0000000000408511\n.text:0000000000408513\n.text:0000000000408515\n.text:0000000000408516\n'
p279
tp280
sS'find_provider'
p281
(S'\n__stdcall find_provider(name_t * name)\n'
p282
V\u000aprovider_t * find_provider(name_t *name)\u000a\u000a{\u000a  name_kind_t nVar1;\u000a  int iVar2;\u000a  provider_t *ppVar3;\u000a  name_kind_t nVar4;\u000a  long lVar5;\u000a  long lVar6;\u000a  \u000a  if (((*(byte *)&name->kind & 2) != 0) && (name->xid == 0)) {\u000a    return (provider_t *)0x0;\u000a  }\u000a  if (0 < num_providers) {\u000a    nVar1 = name->kind;\u000a    lVar6 = (long)num_providers;\u000a    lVar5 = 0;\u000a    ppVar3 = providers;\u000a    do {\u000a      nVar4 = (ppVar3->provider).kind & nVar1;\u000a      if (((nVar4 & name_xid) != name_none) && (name->xid == (ppVar3->provider).xid)) {\u000a        return ppVar3;\u000a      }\u000a      if (((nVar4 & name_string) != name_none) &&\u000a         (iVar2 = strcmp(name->string,(ppVar3->provider).string), iVar2 == 0)) {\u000a        return ppVar3;\u000a      }\u000a      if (((nVar4 & name_index) != name_none) && (name->index == (ppVar3->provider).index)) {\u000a        return ppVar3;\u000a      }\u000a      lVar5 = lVar5 + 1;\u000a      ppVar3 = ppVar3 + 1;\u000a    } while (lVar5 < lVar6);\u000a  }\u000a  printf("Could not find provider with ");\u000a  print_name();\u000a  putchar(10);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p283
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nTEST byte ptr [R14],0x2\nJZ 0x0040684f\nCMP qword ptr [R14 + 0x10],0x0\nJZ 0x004068df\nCMP dword ptr [0x0060d3f8],0x0\nJLE 0x004068b7\nMOV RBX,qword ptr [0x0060d3f0]\nMOV R12D,dword ptr [R14]\nMOVSXD R15,dword ptr [0x0060d3f8]\nXOR R13D,R13D\nNOP dword ptr [RAX]\nMOV EBP,dword ptr [RBX]\nAND EBP,R12D\nTEST BPL,0x2\nJZ 0x00406885\nMOV RAX,qword ptr [R14 + 0x10]\nCMP RAX,qword ptr [RBX + 0x10]\nJZ 0x004068e1\nTEST BPL,0x1\nJZ 0x0040689c\nMOV RDI,qword ptr [R14 + 0x8]\nMOV RSI,qword ptr [RBX + 0x8]\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x004068e1\nTEST BPL,0x4\nJZ 0x004068ab\nMOV EAX,dword ptr [R14 + 0x18]\nCMP EAX,dword ptr [RBX + 0x18]\nJZ 0x004068e1\nINC R13\nADD RBX,0x28\nCMP R13,R15\nJL 0x00406870\nMOV EDI,0x40b480\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV RDI,R14\nCALL 0x00408a00\nMOV EDI,0xa\nCALL 0x00401aa0\nMOV EDI,0x1\nCALL 0x00401f40\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p284
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fe\n41 f6 06 02\n74 0b\n49 83 7e 10 00\n0f 84 90 00 00 00\n83 3d a2 6b 20 00 00\n7e 5f\n48 8b 1d 91 6b 20 00\n45 8b 26\n4c 63 3d 8f 6b 20 00\n45 31 ed\n0f 1f 40 00\n8b 2b\n44 21 e5\n40 f6 c5 02\n74 0a\n49 8b 46 10\n48 3b 43 10\n74 5c\n40 f6 c5 01\n74 11\n49 8b 7e 08\n48 8b 73 08\ne8 d8 b3 ff ff\n85 c0\n74 45\n40 f6 c5 04\n74 09\n41 8b 46 18\n3b 43 18\n74 36\n49 ff c5\n48 83 c3 28\n4d 39 fd\n7c b9\nbf 80 b4 40 00\n31 c0\ne8 ed b2 ff ff\n4c 89 f7\ne8 35 21 00 00\nbf 0a 00 00 00\ne8 cb b1 ff ff\nbf 01 00 00 00\ne8 61 b6 ff ff\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p285
S'.text:0000000000406830\n.text:0000000000406831\n.text:0000000000406833\n.text:0000000000406835\n.text:0000000000406837\n.text:0000000000406839\n.text:000000000040683a\n.text:000000000040683b\n.text:000000000040683e\n.text:0000000000406842\n.text:0000000000406844\n.text:0000000000406849\n.text:000000000040684f\n.text:0000000000406856\n.text:0000000000406858\n.text:000000000040685f\n.text:0000000000406862\n.text:0000000000406869\n.text:000000000040686c\n.text:0000000000406870\n.text:0000000000406872\n.text:0000000000406875\n.text:0000000000406879\n.text:000000000040687b\n.text:000000000040687f\n.text:0000000000406883\n.text:0000000000406885\n.text:0000000000406889\n.text:000000000040688b\n.text:000000000040688f\n.text:0000000000406893\n.text:0000000000406898\n.text:000000000040689a\n.text:000000000040689c\n.text:00000000004068a0\n.text:00000000004068a2\n.text:00000000004068a6\n.text:00000000004068a9\n.text:00000000004068ab\n.text:00000000004068ae\n.text:00000000004068b2\n.text:00000000004068b5\n.text:00000000004068b7\n.text:00000000004068bc\n.text:00000000004068be\n.text:00000000004068c3\n.text:00000000004068c6\n.text:00000000004068cb\n.text:00000000004068d0\n.text:00000000004068d5\n.text:00000000004068da\n.text:00000000004068df\n.text:00000000004068e1\n.text:00000000004068e4\n.text:00000000004068e8\n.text:00000000004068e9\n.text:00000000004068eb\n.text:00000000004068ed\n.text:00000000004068ef\n.text:00000000004068f1\n.text:00000000004068f2\n'
p286
tp287
sS'disable_outputs'
p288
(S'\n__stdcall disable_outputs(output_t * outputs)\n'
p289
V\u000avoid disable_outputs(output_t *outputs)\u000a\u000a{\u000a  if (outputs != (output_t *)0x0) {\u000a    do {\u000a      outputs->crtc_info = (crtc_t *)0x0;\u000a      outputs = (output_t *)outputs->next;\u000a    } while (outputs != (output_t *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p290
S'TEST RDI,RDI\nJZ 0x004090d0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV qword ptr [RDI + 0x60],0x0\nMOV RDI,qword ptr [RDI]\nTEST RDI,RDI\nJNZ 0x004090c0\nRET\n'
p291
S'48 85 ff\n74 1b\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 c7 47 60 00 00 00 00\n48 8b 3f\n48 85 ff\n75 f0\nc3\n'
p292
S'.text:00000000004090b0\n.text:00000000004090b3\n.text:00000000004090b5\n.text:00000000004090c0\n.text:00000000004090c8\n.text:00000000004090cb\n.text:00000000004090ce\n.text:00000000004090d0\n'
p293
tp294
sS'init_transform'
p295
(S'\n__stdcall init_transform(transform_t * transform)\n'
p296
V\u000avoid init_transform(transform_t *transform)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  (transform->transform).matrix[4] = 0;\u000a  (transform->transform).matrix[5] = 0;\u000a  (transform->transform).matrix[6] = 0;\u000a  (transform->transform).matrix[7] = 0;\u000a  (transform->transform).matrix[0] = 0;\u000a  (transform->transform).matrix[1] = 0;\u000a  (transform->transform).matrix[2] = 0;\u000a  (transform->transform).matrix[3] = 0;\u000a  (transform->transform).matrix[8] = 0;\u000a  lVar1 = 0;\u000a  do {\u000a    *(undefined4 *)((long)(transform->transform).matrix + lVar1) = 0x10000;\u000a    lVar1 = lVar1 + 0x10;\u000a  } while (lVar1 != 0x30);\u000a  transform->filter = "";\u000a  transform->nparams = 0;\u000a  transform->params = (XFixed *)0x0;\u000a  return;\u000a}\u000a\u000a
p297
S'XORPS XMM0,XMM0\nMOVUPS xmmword ptr [RDI + 0x10],XMM0\nMOVUPS xmmword ptr [RDI],XMM0\nMOV dword ptr [RDI + 0x20],0x0\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV dword ptr [RDI + RAX*0x1],0x10000\nADD RAX,0x10\nCMP RAX,0x30\nJNZ 0x00405e80\nMOV qword ptr [RDI + 0x28],0x40b800\nMOV dword ptr [RDI + 0x30],0x0\nMOV qword ptr [RDI + 0x38],0x0\nRET\n'
p298
S'0f 57 c0\n0f 11 47 10\n0f 11 07\nc7 47 20 00 00 00 00\n31 c0\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nc7 04 07 00 00 01 00\n48 83 c0 10\n48 83 f8 30\n75 ef\n48 c7 47 28 00 b8 40 00\nc7 47 30 00 00 00 00\n48 c7 47 38 00 00 00 00\nc3\n'
p299
S'.text:0000000000405e60\n.text:0000000000405e63\n.text:0000000000405e67\n.text:0000000000405e6a\n.text:0000000000405e71\n.text:0000000000405e73\n.text:0000000000405e80\n.text:0000000000405e87\n.text:0000000000405e8b\n.text:0000000000405e8f\n.text:0000000000405e91\n.text:0000000000405e99\n.text:0000000000405ea0\n.text:0000000000405ea8\n'
p300
tp301
sS'set_panning'
p302
(S'\n__stdcall set_panning()\n'
p303
V\u000avoid set_panning(void)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  uint uVar2;\u000a  undefined4 uVar3;\u000a  uint uVar4;\u000a  uint uVar5;\u000a  uint uVar6;\u000a  uint uVar7;\u000a  int iVar8;\u000a  uint uVar9;\u000a  uint uVar10;\u000a  int iVar11;\u000a  XRRPanning *pXVar12;\u000a  _output *p_Var13;\u000a  \u000a  p_Var13 = (_output *)all_outputs;\u000a  if (all_outputs != (output_t *)0x0) {\u000a    do {\u000a      if ((((output_t *)p_Var13)->crtc_info != (crtc_t *)0x0) &&\u000a         ((*(byte *)((long)&((output_t *)p_Var13)->changes + 1) & 4) != 0)) {\u000a        if (((output_t *)p_Var13)->crtc_info->panning_info == (XRRPanning *)0x0) {\u000a          pXVar12 = (XRRPanning *)malloc(0x38);\u000a          ((output_t *)p_Var13)->crtc_info->panning_info = pXVar12;\u000a        }\u000a        pXVar12 = ((output_t *)p_Var13)->crtc_info->panning_info;\u000a        *(undefined8 *)&pXVar12->border_right =\u000a             *(undefined8 *)&(((output_t *)p_Var13)->panning).border_right;\u000a        uVar1 = *(undefined4 *)&(((output_t *)p_Var13)->panning).timestamp;\u000a        uVar3 = *(undefined4 *)((long)&(((output_t *)p_Var13)->panning).timestamp + 4);\u000a        uVar6 = (((output_t *)p_Var13)->panning).left;\u000a        uVar9 = (((output_t *)p_Var13)->panning).top;\u000a        uVar2 = (((output_t *)p_Var13)->panning).width;\u000a        uVar4 = (((output_t *)p_Var13)->panning).height;\u000a        uVar7 = (((output_t *)p_Var13)->panning).track_left;\u000a        uVar10 = (((output_t *)p_Var13)->panning).track_top;\u000a        uVar5 = (((output_t *)p_Var13)->panning).track_height;\u000a        iVar8 = (((output_t *)p_Var13)->panning).border_left;\u000a        iVar11 = (((output_t *)p_Var13)->panning).border_top;\u000a        pXVar12->track_width = (((output_t *)p_Var13)->panning).track_width;\u000a        pXVar12->track_height = uVar5;\u000a        pXVar12->border_left = iVar8;\u000a        pXVar12->border_top = iVar11;\u000a        pXVar12->width = uVar2;\u000a        pXVar12->height = uVar4;\u000a        pXVar12->track_left = uVar7;\u000a        pXVar12->track_top = uVar10;\u000a        *(undefined4 *)&pXVar12->timestamp = uVar1;\u000a        *(undefined4 *)((long)&pXVar12->timestamp + 4) = uVar3;\u000a        pXVar12->left = uVar6;\u000a        pXVar12->top = uVar9;\u000a        ((output_t *)p_Var13)->crtc_info->changing = 1;\u000a      }\u000a      p_Var13 = ((output_t *)p_Var13)->next;\u000a    } while (p_Var13 != (_output *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p304
S'PUSH RBX\nMOV RBX,qword ptr [0x0060d3c8]\nTEST RBX,RBX\nJNZ 0x00407068\nJMP 0x004070d0\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nJZ 0x004070d0\nMOV RAX,qword ptr [RBX + 0x60]\nTEST RAX,RAX\nJZ 0x00407060\nTEST byte ptr [RBX + 0x9],0x4\nJZ 0x00407060\nCMP qword ptr [RAX + 0x38],0x0\nJNZ 0x00407090\nMOV EDI,0x38\nCALL 0x00401d70\nMOV RCX,qword ptr [RBX + 0x60]\nMOV qword ptr [RCX + 0x38],RAX\nMOV RAX,qword ptr [RBX + 0x60]\nMOV RAX,qword ptr [RAX + 0x38]\nMOV RCX,qword ptr [0x110 + RBX]\nMOV qword ptr [RAX + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0xe0 + RBX]\nMOVUPS XMM1,xmmword ptr [0xf0 + RBX]\nMOVUPS XMM2,xmmword ptr [0x100 + RBX]\nMOVUPS xmmword ptr [RAX + 0x20],XMM2\nMOVUPS xmmword ptr [RAX + 0x10],XMM1\nMOVUPS xmmword ptr [RAX],XMM0\nMOV RAX,qword ptr [RBX + 0x60]\nMOV dword ptr [RAX + 0x20],0x1\nJMP 0x00407060\nPOP RBX\nRET\n'
p305
S'53\n48 8b 1d 70 63 20 00\n48 85 db\n75 0b\neb 71\n48 8b 1b\n48 85 db\n74 68\n48 8b 43 60\n48 85 c0\n74 ef\nf6 43 09 04\n74 e9\n48 83 78 38 00\n75 12\nbf 38 00 00 00\ne8 e8 ac ff ff\n48 8b 4b 60\n48 89 41 38\n48 8b 43 60\n48 8b 40 38\n48 8b 8b 10 01 00 00\n48 89 48 30\n0f 10 83 e0 00 00 00\n0f 10 8b f0 00 00 00\n0f 10 93 00 01 00 00\n0f 11 50 20\n0f 11 48 10\n0f 11 00\n48 8b 43 60\nc7 40 20 01 00 00 00\neb 90\n5b\nc3\n'
p306
S'.text:0000000000407050\n.text:0000000000407051\n.text:0000000000407058\n.text:000000000040705b\n.text:000000000040705d\n.text:0000000000407060\n.text:0000000000407063\n.text:0000000000407066\n.text:0000000000407068\n.text:000000000040706c\n.text:000000000040706f\n.text:0000000000407071\n.text:0000000000407075\n.text:0000000000407077\n.text:000000000040707c\n.text:000000000040707e\n.text:0000000000407083\n.text:0000000000407088\n.text:000000000040708c\n.text:0000000000407090\n.text:0000000000407094\n.text:0000000000407098\n.text:000000000040709f\n.text:00000000004070a3\n.text:00000000004070aa\n.text:00000000004070b1\n.text:00000000004070b8\n.text:00000000004070bc\n.text:00000000004070c0\n.text:00000000004070c3\n.text:00000000004070c7\n.text:00000000004070ce\n.text:00000000004070d0\n.text:00000000004070d1\n'
p307
tp308
sS'XNextEvent'
p309
(S'\n__stdcall XNextEvent()\n'
p310
V\u000avoid XNextEvent(void)\u000a\u000a{\u000a  (*(code *)PTR_XNextEvent_0060d188)();\u000a  return;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x0060d188]\n'
p312
S'ff 25 22 b4 20 00\n'
p313
S'.plt:0000000000401d60\n'
p314
tp315
sS'mark_changing_crtcs'
p316
(S'\n__stdcall mark_changing_crtcs()\n'
p317
V\u000avoid mark_changing_crtcs(void)\u000a\u000a{\u000a  XRRCrtcInfo **ppXVar1;\u000a  int *piVar2;\u000a  crtc_t *pcVar3;\u000a  XRRCrtcInfo *pXVar4;\u000a  output_t *poVar5;\u000a  long lVar6;\u000a  long lVar7;\u000a  \u000a  if (0 < num_crtcs) {\u000a    lVar7 = 0;\u000a    do {\u000a      pcVar3 = crtcs;\u000a      pXVar4 = crtcs[lVar7].crtc_info;\u000a      if (0 < pXVar4->noutput) {\u000a        ppXVar1 = &crtcs[lVar7].crtc_info;\u000a        lVar6 = 0;\u000a        do {\u000a          poVar5 = find_output_by_xid(pXVar4->outputs[lVar6]);\u000a          if (poVar5 == (output_t *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a            fatal("cannot find output 0x%lx\u005cn",(*ppXVar1)->outputs[lVar6]);\u000a          }\u000a          if (poVar5->changes != changes_none) {\u000a            *(undefined4 *)(ppXVar1 + -1) = 1;\u000a          }\u000a          lVar6 = lVar6 + 1;\u000a          pXVar4 = *ppXVar1;\u000a        } while (lVar6 < (long)pXVar4->noutput);\u000a      }\u000a      if (0 < pcVar3[lVar7].noutput) {\u000a        piVar2 = &pcVar3[lVar7].noutput;\u000a        lVar6 = 0;\u000a        do {\u000a          if (*(int *)(*(long *)(*(long *)(piVar2 + -2) + lVar6 * 8) + 8) != 0) {\u000a            piVar2[-0xe] = 1;\u000a          }\u000a          lVar6 = lVar6 + 1;\u000a        } while (lVar6 < (long)*piVar2);\u000a      }\u000a      lVar7 = lVar7 + 1;\u000a    } while (lVar7 < (long)num_crtcs);\u000a  }\u000a  return;\u000a}\u000a\u000a
p318
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nCMP dword ptr [0x0060d3fc],0x0\nJLE 0x00407023\nXOR R12D,R12D\nNOP dword ptr [RAX]\nMOV R14,qword ptr [0x0060d400]\nIMUL R15,R12,0xe0\nMOV RAX,qword ptr [R14 + R15*0x1 + 0x28]\nCMP dword ptr [RAX + 0x24],0x0\nJLE 0x00406fe0\nLEA R13,[R14 + R15*0x1 + 0x28]\nXOR EBX,EBX\nMOV RAX,qword ptr [RAX + 0x28]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nCALL 0x004076f0\nTEST RAX,RAX\nJZ 0x0040702d\nCMP dword ptr [RAX + 0x8],0x0\nJZ 0x00406fd0\nMOV dword ptr [R13 + -0x8],0x1\nINC RBX\nMOV RAX,qword ptr [R13]\nMOVSXD RCX,dword ptr [RAX + 0x24]\nCMP RBX,RCX\nJL 0x00406fb0\nCMP dword ptr [R14 + R15*0x1 + 0x58],0x0\nJLE 0x00407010\nLEA RAX,[R14 + R15*0x1 + 0x58]\nXOR ECX,ECX\nNOP\nMOV RDX,qword ptr [RAX + -0x8]\nMOV RDX,qword ptr [RDX + RCX*0x8]\nCMP dword ptr [RDX + 0x8],0x0\nJZ 0x00407005\nMOV dword ptr [RAX + -0x38],0x1\nINC RCX\nMOVSXD RDX,dword ptr [RAX]\nCMP RCX,RDX\nJL 0x00406ff0\nINC R12\nMOVSXD RAX,dword ptr [0x0060d3fc]\nCMP R12,RAX\nJL 0x00406f90\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV RAX,qword ptr [R13]\nMOV RAX,qword ptr [RAX + 0x28]\nMOV RSI,qword ptr [RAX + RBX*0x8]\nMOV EDI,0x40b5ac\nXOR EAX,EAX\nCALL 0x00406410\n'
p319
S'41 57\n41 56\n41 55\n41 54\n53\n83 3d 7c 64 20 00 00\n0f 8e 9d 00 00 00\n45 31 e4\n0f 1f 80 00 00 00 00\n4c 8b 35 69 64 20 00\n4d 69 fc e0 00 00 00\n4b 8b 44 3e 28\n83 78 24 00\n7e 37\n4f 8d 6c 3e 28\n31 db\n48 8b 40 28\n48 8b 3c d8\ne8 33 07 00 00\n48 85 c0\n74 6b\n83 78 08 00\n74 08\n41 c7 45 f8 01 00 00 00\n48 ff c3\n49 8b 45 00\n48 63 48 24\n48 39 cb\n7c d0\n43 83 7c 3e 58 00\n7e 28\n4b 8d 44 3e 58\n31 c9\n90\n48 8b 50 f8\n48 8b 14 ca\n83 7a 08 00\n74 07\nc7 40 c8 01 00 00 00\n48 ff c1\n48 63 10\n48 39 d1\n7c e0\n49 ff c4\n48 63 05 e2 63 20 00\n49 39 c4\n0f 8c 6d ff ff ff\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n49 8b 45 00\n48 8b 40 28\n48 8b 34 d8\nbf ac b5 40 00\n31 c0\ne8 cb f3 ff ff\n'
p320
S'.text:0000000000406f70\n.text:0000000000406f72\n.text:0000000000406f74\n.text:0000000000406f76\n.text:0000000000406f78\n.text:0000000000406f79\n.text:0000000000406f80\n.text:0000000000406f86\n.text:0000000000406f89\n.text:0000000000406f90\n.text:0000000000406f97\n.text:0000000000406f9e\n.text:0000000000406fa3\n.text:0000000000406fa7\n.text:0000000000406fa9\n.text:0000000000406fae\n.text:0000000000406fb0\n.text:0000000000406fb4\n.text:0000000000406fb8\n.text:0000000000406fbd\n.text:0000000000406fc0\n.text:0000000000406fc2\n.text:0000000000406fc6\n.text:0000000000406fc8\n.text:0000000000406fd0\n.text:0000000000406fd3\n.text:0000000000406fd7\n.text:0000000000406fdb\n.text:0000000000406fde\n.text:0000000000406fe0\n.text:0000000000406fe6\n.text:0000000000406fe8\n.text:0000000000406fed\n.text:0000000000406fef\n.text:0000000000406ff0\n.text:0000000000406ff4\n.text:0000000000406ff8\n.text:0000000000406ffc\n.text:0000000000406ffe\n.text:0000000000407005\n.text:0000000000407008\n.text:000000000040700b\n.text:000000000040700e\n.text:0000000000407010\n.text:0000000000407013\n.text:000000000040701a\n.text:000000000040701d\n.text:0000000000407023\n.text:0000000000407024\n.text:0000000000407026\n.text:0000000000407028\n.text:000000000040702a\n.text:000000000040702c\n.text:000000000040702d\n.text:0000000000407031\n.text:0000000000407035\n.text:0000000000407039\n.text:000000000040703e\n.text:0000000000407040\n'
p321
tp322
sS'output_can_use_mode'
p323
(S'\n__stdcall output_can_use_mode(output_t * output, XRRModeInfo * mode)\n'
p324
V\u000aint output_can_use_mode(output_t *output,XRRModeInfo *mode)\u000a\u000a{\u000a  XRROutputInfo *pXVar1;\u000a  long lVar2;\u000a  \u000a  pXVar1 = output->output_info;\u000a  if (pXVar1->nmode < 1) {\u000a    return 0;\u000a  }\u000a  lVar2 = 0;\u000a  do {\u000a    if (pXVar1->modes[lVar2] == mode->id) {\u000a      return 1;\u000a    }\u000a    lVar2 = lVar2 + 1;\u000a  } while (lVar2 < (long)pXVar1->nmode);\u000a  return 0;\u000a}\u000a\u000a
p325
S'MOV RAX,qword ptr [RDI + 0x38]\nCMP dword ptr [RAX + 0x50],0x0\nJLE 0x00408555\nMOV RCX,qword ptr [RAX + 0x58]\nMOV RDX,qword ptr [RSI]\nXOR ESI,ESI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RCX + RSI*0x8],RDX\nJZ 0x00408558\nINC RSI\nMOVSXD RDI,dword ptr [RAX + 0x50]\nCMP RSI,RDI\nJL 0x00408540\nXOR EAX,EAX\nRET\nXOR EAX,EAX\nRET\nMOV EAX,0x1\nRET\n'
p326
S'48 8b 47 38\n83 78 50 00\n7e 2b\n48 8b 48 58\n48 8b 16\n31 f6\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 14 f1\n74 12\n48 ff c6\n48 63 78 50\n48 39 fe\n7c ee\n31 c0\nc3\n31 c0\nc3\nb8 01 00 00 00\nc3\n'
p327
S'.text:0000000000408520\n.text:0000000000408524\n.text:0000000000408528\n.text:000000000040852a\n.text:000000000040852e\n.text:0000000000408531\n.text:0000000000408533\n.text:0000000000408540\n.text:0000000000408544\n.text:0000000000408546\n.text:0000000000408549\n.text:000000000040854d\n.text:0000000000408550\n.text:0000000000408552\n.text:0000000000408554\n.text:0000000000408555\n.text:0000000000408557\n.text:0000000000408558\n.text:000000000040855d\n'
p328
tp329
sS'dmin'
p330
(S'\n__stdcall dmin()\n'
p331
V\u000adouble dmin(void)\u000a\u000a{\u000a  undefined in_XMM0 [16];\u000a  undefined auVar1 [16];\u000a  \u000a  auVar1 = minsd(in_XMM0,DAT_00409908);\u000a  return SUB168(auVar1,0);\u000a}\u000a\u000a
p332
S'MINSD XMM0,qword ptr [0x00409908]\nRET\n'
p333
S'f2 0f 5d 05 70 07 00 00\nc3\n'
p334
S'.text:0000000000409190\n.text:0000000000409198\n'
p335
tp336
sS'set_name_all'
p337
(S'\n__stdcall set_name_all(name_t * name, name_t * old)\n'
p338
V\u000avoid set_name_all(name_t *name,name_t *old)\u000a\u000a{\u000a  if ((*(byte *)&old->kind & 2) != 0) {\u000a    name->xid = old->xid;\u000a  }\u000a  if ((*(byte *)&old->kind & 1) != 0) {\u000a    name->string = old->string;\u000a  }\u000a  if ((*(byte *)&old->kind & 4) != 0) {\u000a    name->index = old->index;\u000a  }\u000a  name->kind = name->kind | old->kind;\u000a  return;\u000a}\u000a\u000a
p339
S'TEST byte ptr [RSI],0x2\nJZ 0x00407c0d\nMOV RAX,qword ptr [RSI + 0x10]\nMOV qword ptr [RDI + 0x10],RAX\nTEST byte ptr [RSI],0x1\nJZ 0x00407c1a\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [RDI + 0x8],RAX\nTEST byte ptr [RSI],0x4\nJZ 0x00407c25\nMOV EAX,dword ptr [RSI + 0x18]\nMOV dword ptr [RDI + 0x18],EAX\nMOV EAX,dword ptr [RSI]\nOR dword ptr [RDI],EAX\nRET\n'
p340
S'f6 06 02\n74 08\n48 8b 46 10\n48 89 47 10\nf6 06 01\n74 08\n48 8b 46 08\n48 89 47 08\nf6 06 04\n74 06\n8b 46 18\n89 47 18\n8b 06\n09 07\nc3\n'
p341
S'.text:0000000000407c00\n.text:0000000000407c03\n.text:0000000000407c05\n.text:0000000000407c09\n.text:0000000000407c0d\n.text:0000000000407c10\n.text:0000000000407c12\n.text:0000000000407c16\n.text:0000000000407c1a\n.text:0000000000407c1d\n.text:0000000000407c1f\n.text:0000000000407c22\n.text:0000000000407c25\n.text:0000000000407c27\n.text:0000000000407c29\n'
p342
tp343
sS'output_is_primary'
p344
(S'\n__stdcall output_is_primary(output_t * output)\n'
p345
V\u000aint output_is_primary(output_t *output)\u000a\u000a{\u000a  uint uVar1;\u000a  XID XVar2;\u000a  \u000a  uVar1 = 0;\u000a  if (has_1_3 == 1) {\u000a    XVar2 = XRRGetOutputPrimary(dpy,root);\u000a    uVar1 = (uint)(XVar2 == (output->output).xid);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p346
S'PUSH RBX\nMOV RBX,RDI\nXOR EAX,EAX\nCMP byte ptr [0x0060d3bc],0x1\nJNZ 0x0040899e\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nCALL 0x00401cb0\nMOV RCX,RAX\nXOR EAX,EAX\nCMP RCX,qword ptr [RBX + 0x28]\nSETZ AL\nPOP RBX\nRET\n'
p347
S'53\n48 89 fb\n31 c0\n80 3d 3f 4a 20 00 01\n75 1f\n48 8b 3d 22 4a 20 00\n48 8b 35 23 4a 20 00\ne8 1e 93 ff ff\n48 89 c1\n31 c0\n48 3b 4b 28\n0f 94 c0\n5b\nc3\n'
p348
S'.text:0000000000408970\n.text:0000000000408971\n.text:0000000000408974\n.text:0000000000408976\n.text:000000000040897d\n.text:000000000040897f\n.text:0000000000408986\n.text:000000000040898d\n.text:0000000000408992\n.text:0000000000408995\n.text:0000000000408997\n.text:000000000040899b\n.text:000000000040899e\n.text:000000000040899f\n'
p349
tp350
sS'log'
p351
(S'\n__stdcall log(double __x)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adouble log(double __x)\u000a\u000a{\u000a  double dVar1;\u000a  \u000a  dVar1 = (double)(*(code *)PTR_log_0060d0e0)();\u000a  return dVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x0060d0e0]\n'
p354
S'ff 25 ca b4 20 00\n'
p355
S'.plt:0000000000401c10\n'
p356
tp357
sS'XRRAllocateMonitor'
p358
(S'\n__stdcall XRRAllocateMonitor()\n'
p359
V\u000avoid XRRAllocateMonitor(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRAllocateMonitor_0060d210)();\u000a  return;\u000a}\u000a\u000a
p360
S'JMP qword ptr [0x0060d210]\n'
p361
S'ff 25 9a b3 20 00\n'
p362
S'.plt:0000000000401e70\n'
p363
tp364
sS'copy_transform'
p365
(S'\n__stdcall copy_transform(transform_t * dest, transform_t * src)\n'
p366
V\u000avoid copy_transform(transform_t *dest,transform_t *src)\u000a\u000a{\u000a  set_transform(dest,(XTransform *)src,src->filter,src->params);\u000a  return;\u000a}\u000a\u000a
p367
S'MOV RDX,qword ptr [RSI + 0x28]\nMOV RCX,qword ptr [RSI + 0x38]\nMOV R8D,dword ptr [RSI + 0x30]\nJMP 0x00407b90\n'
p368
S'48 8b 56 28\n48 8b 4e 38\n44 8b 46 30\neb 92\n'
p369
S'.text:0000000000407bf0\n.text:0000000000407bf4\n.text:0000000000407bf8\n.text:0000000000407bfc\n'
p370
tp371
sS'set_gamma_info'
p372
(S'\n__stdcall set_gamma_info(output_t * output)\n'
p373
V\u000avoid set_gamma_info(output_t *output)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  long lVar5;\u000a  long *plVar6;\u000a  uint uVar7;\u000a  uint uVar8;\u000a  char *pcVar9;\u000a  char *format;\u000a  float fVar10;\u000a  double __x;\u000a  double dVar11;\u000a  double dVar12;\u000a  double dVar13;\u000a  double __x_00;\u000a  double __x_01;\u000a  double __x_02;\u000a  \u000a  if (output->crtc_info == (crtc_t *)0x0) {\u000a    return;\u000a  }\u000a  iVar1 = XRRGetCrtcGammaSize(dpy,(output->crtc_info->crtc).xid);\u000a  if (iVar1 == 0) {\u000a    pcVar9 = (output->output).string;\u000a    format = "Failed to get size of gamma for output %s\u005cn";\u000a  }\u000a  else {\u000a    lVar5 = XRRGetCrtcGamma(dpy,(output->crtc_info->crtc).xid);\u000a    if (lVar5 != 0) {\u000a      uVar2 = find_last_non_clamped(*(CARD16 **)(lVar5 + 8));\u000a      uVar3 = find_last_non_clamped(*(CARD16 **)(lVar5 + 0x10));\u000a      uVar4 = find_last_non_clamped(*(CARD16 **)(lVar5 + 0x18));\u000a      uVar7 = uVar2;\u000a      if ((int)uVar2 <= (int)uVar3) {\u000a        uVar7 = uVar3;\u000a      }\u000a      plVar6 = (long *)(lVar5 + 8);\u000a      if ((int)uVar2 < (int)uVar3) {\u000a        plVar6 = (long *)(lVar5 + 0x10);\u000a      }\u000a      uVar8 = uVar7;\u000a      if ((int)uVar7 <= (int)uVar4) {\u000a        uVar8 = uVar4;\u000a      }\u000a      if ((int)uVar7 < (int)uVar4) {\u000a        plVar6 = (long *)(lVar5 + 0x18);\u000a      }\u000a      uVar7 = 1;\u000a      if (uVar8 != 0) {\u000a        uVar7 = uVar8;\u000a      }\u000a      __x = (double)(uint)*(ushort *)(*plVar6 + (long)(int)uVar7 * 2) / DAT_00409920;\u000a      if (DAT_00409940 <= __x) {\u000a        dVar13 = (double)iVar1;\u000a        if (uVar7 + 1 != iVar1) {\u000a          iVar1 = (int)((uVar7 >> 0x1f) + uVar7) >> 1;\u000a          __x_01 = (double)(iVar1 + 1) / dVar13;\u000a          __x_02 = (double)(uint)*(ushort *)(*plVar6 + (long)iVar1 * 2) / DAT_00409920;\u000a          __x_00 = (double)(uVar7 + 1) / dVar13;\u000a          __x = log(__x);\u000a          dVar11 = log(__x_01);\u000a          __x_02 = log(__x_02);\u000a          dVar12 = log(__x_00);\u000a          __x_00 = log(__x_01 / __x_00);\u000a          __x = exp((dVar11 * __x - dVar12 * __x_02) / __x_00);\u000a        }\u000a        dVar11 = DAT_00409920;\u000a        output->brightness = (float)__x;\u000a        iVar1 = (int)((uVar2 >> 0x1f) + uVar2) >> 1;\u000a        __x = log(((double)(uint)*(ushort *)(*(long *)(lVar5 + 8) + (long)iVar1 * 2) /\u000a                  (double)(float)__x) / dVar11);\u000a        dVar11 = log((double)(iVar1 + 1) / dVar13);\u000a        (output->gamma).red = (float)(__x / dVar11);\u000a        iVar1 = (int)((uVar3 >> 0x1f) + uVar3) >> 1;\u000a        __x = log(((double)(uint)*(ushort *)(*(long *)(lVar5 + 0x10) + (long)iVar1 * 2) /\u000a                  (double)output->brightness) / DAT_00409920);\u000a        dVar11 = log((double)(iVar1 + 1) / dVar13);\u000a        (output->gamma).green = (float)(__x / dVar11);\u000a        iVar1 = (int)((uVar4 >> 0x1f) + uVar4) >> 1;\u000a        __x = log(((double)(uint)*(ushort *)(*(long *)(lVar5 + 0x18) + (long)iVar1 * 2) /\u000a                  (double)output->brightness) / DAT_00409920);\u000a        dVar13 = log((double)(iVar1 + 1) / dVar13);\u000a        fVar10 = (float)(__x / dVar13);\u000a      }\u000a      else {\u000a        output->brightness = 0.00000000;\u000a        *(undefined8 *)&output->gamma = 0x3f8000003f800000;\u000a        fVar10 = DAT_00409cb0;\u000a      }\u000a      (output->gamma).blue = fVar10;\u000a      (*(code *)PTR_XRRFreeGamma_0060d248)(lVar5);\u000a      return;\u000a    }\u000a    pcVar9 = (output->output).string;\u000a    format = "Failed to get gamma for output %s\u005cn";\u000a  }\u000a  warning(format,pcVar9);\u000a  return;\u000a}\u000a\u000a
p374
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x58\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x60]\nTEST RAX,RAX\nJZ 0x004086e2\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [RAX + 0x10]\nCALL 0x00401b50\nMOV EBP,EAX\nTEST EBP,EBP\nJZ 0x004086f1\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RAX,qword ptr [RBX + 0x60]\nMOV RSI,qword ptr [RAX + 0x10]\nCALL 0x00401f60\nTEST RAX,RAX\nJZ 0x004086fc\nMOV qword ptr [RSP + 0x38],RBX\nMOV RDI,qword ptr [RAX + 0x8]\nMOV ESI,EBP\nMOV R14,RAX\nCALL 0x004089d0\nMOV dword ptr [RSP + 0x8],EAX\nMOV RDI,qword ptr [R14 + 0x10]\nMOV ESI,EBP\nCALL 0x004089d0\nMOV R13D,EAX\nLEA R15,[R14 + 0x8]\nLEA R12,[R14 + 0x10]\nLEA RBX,[R14 + 0x18]\nMOV qword ptr [RSP + 0x50],R14\nMOV RDI,qword ptr [R14 + 0x18]\nMOV ESI,EBP\nCALL 0x004089d0\nMOV RDI,R12\nMOV R12,R15\nMOV R14D,dword ptr [RSP + 0x8]\nMOV RSI,RBX\nMOV R15D,EAX\nCMP R13D,R14D\nMOV EDX,R14D\nCMOVGE EDX,R13D\nMOV RAX,R12\nCMOVG RAX,RDI\nCMP R15D,EDX\nCMOVGE EDX,R15D\nCMOVG RAX,RSI\nMOV RAX,qword ptr [RAX]\nTEST EDX,EDX\nMOV ECX,0x1\nCMOVNZ ECX,EDX\nMOVSD XMM2,qword ptr [0x00409920]\nMOVSXD RDX,ECX\nMOVZX EDX,word ptr [RAX + RDX*0x2]\nCVTSI2SD XMM0,EDX\nDIVSD XMM0,XMM2\nMOVSD XMM1,qword ptr [0x00409940]\nUCOMISD XMM1,XMM0\nJBE 0x0040871a\nMOV RBX,qword ptr [RSP + 0x38]\nMOV dword ptr [0x174 + RBX],0x0\nMOV RAX,0x3f8000003f800000\nMOV qword ptr [0x168 + RBX],RAX\nMOVSS XMM0,dword ptr [0x00409cb0]\nJMP 0x0040894e\nADD RSP,0x58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RSI,qword ptr [RBX + 0x20]\nMOV EDI,0x40b432\nJMP 0x00408705\nMOV RSI,qword ptr [RBX + 0x20]\nMOV EDI,0x40b45d\nXOR EAX,EAX\nADD RSP,0x58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00408150\nMOV qword ptr [RSP + 0x40],RDI\nMOV qword ptr [RSP + 0x48],RSI\nXORPS XMM1,XMM1\nCVTSI2SD XMM1,EBP\nLEA EDX,[RCX + 0x1]\nCMP EDX,EBP\nMOV RBX,qword ptr [RSP + 0x38]\nMOVSD qword ptr [RSP + 0x20],XMM1\nJZ 0x00408804\nMOV ESI,ECX\nSHR ESI,0x1f\nADD ESI,ECX\nSAR ESI,1\nLEA ECX,[RSI + 0x1]\nCVTSI2SD XMM3,ECX\nDIVSD XMM3,XMM1\nMOVSD qword ptr [RSP + 0x30],XMM3\nMOVSXD RCX,ESI\nMOVZX EAX,word ptr [RAX + RCX*0x2]\nXORPS XMM3,XMM3\nCVTSI2SD XMM3,EAX\nDIVSD XMM3,XMM2\nMOVSD qword ptr [RSP + 0x18],XMM3\nXORPS XMM2,XMM2\nCVTSI2SD XMM2,EDX\nDIVSD XMM2,XMM1\nMOVSD qword ptr [RSP + 0x28],XMM2\nCALL 0x00401c10\nMOVSD qword ptr [RSP + 0x10],XMM0\nMOVSD XMM0,qword ptr [RSP + 0x30]\nCALL 0x00401c10\nMULSD XMM0,qword ptr [RSP + 0x10]\nMOVSD qword ptr [RSP + 0x10],XMM0\nMOVSD XMM0,qword ptr [RSP + 0x18]\nCALL 0x00401c10\nMOVSD qword ptr [RSP + 0x18],XMM0\nMOVSD XMM0,qword ptr [RSP + 0x28]\nCALL 0x00401c10\nMULSD XMM0,qword ptr [RSP + 0x18]\nMOVSD XMM1,qword ptr [RSP + 0x10]\nSUBSD XMM1,XMM0\nMOVSD qword ptr [RSP + 0x10],XMM1\nMOVSD XMM0,qword ptr [RSP + 0x30]\nDIVSD XMM0,qword ptr [RSP + 0x28]\nCALL 0x00401c10\nMOVSD XMM1,qword ptr [RSP + 0x10]\nDIVSD XMM1,XMM0\nMOVAPD XMM0,XMM1\nCALL 0x00401b30\nMOVSD XMM2,qword ptr [0x00409920]\nXORPS XMM1,XMM1\nCVTSD2SS XMM1,XMM0\nMOVSS dword ptr [0x174 + RBX],XMM1\nMOV RAX,qword ptr [R12]\nMOV ECX,R14D\nSHR ECX,0x1f\nADD ECX,R14D\nSAR ECX,1\nMOVSXD RBP,ECX\nMOVZX EAX,word ptr [RAX + RBP*0x2]\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EAX\nCVTSS2SD XMM1,XMM1\nDIVSD XMM0,XMM1\nDIVSD XMM0,XMM2\nCALL 0x00401c10\nMOVSD qword ptr [RSP + 0x8],XMM0\nINC EBP\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EBP\nDIVSD XMM0,qword ptr [RSP + 0x20]\nCALL 0x00401c10\nMOVSD XMM1,qword ptr [RSP + 0x8]\nDIVSD XMM1,XMM0\nXORPS XMM0,XMM0\nCVTSD2SS XMM0,XMM1\nMOVSS dword ptr [0x168 + RBX],XMM0\nMOV RAX,qword ptr [RSP + 0x40]\nMOV RAX,qword ptr [RAX]\nMOV ECX,R13D\nSHR ECX,0x1f\nADD ECX,R13D\nSAR ECX,1\nMOVSXD RBP,ECX\nMOVZX EAX,word ptr [RAX + RBP*0x2]\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EAX\nMOVSS XMM1,dword ptr [0x174 + RBX]\nCVTSS2SD XMM1,XMM1\nDIVSD XMM0,XMM1\nDIVSD XMM0,qword ptr [0x00409920]\nCALL 0x00401c10\nMOVSD qword ptr [RSP + 0x8],XMM0\nINC EBP\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EBP\nDIVSD XMM0,qword ptr [RSP + 0x20]\nCALL 0x00401c10\nMOVSD XMM1,qword ptr [RSP + 0x8]\nDIVSD XMM1,XMM0\nXORPS XMM0,XMM0\nCVTSD2SS XMM0,XMM1\nMOVSS dword ptr [0x16c + RBX],XMM0\nMOV RAX,qword ptr [RSP + 0x48]\nMOV RAX,qword ptr [RAX]\nMOV ECX,R15D\nSHR ECX,0x1f\nADD ECX,R15D\nSAR ECX,1\nMOVSXD RBP,ECX\nMOVZX EAX,word ptr [RAX + RBP*0x2]\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EAX\nMOVSS XMM1,dword ptr [0x174 + RBX]\nCVTSS2SD XMM1,XMM1\nDIVSD XMM0,XMM1\nDIVSD XMM0,qword ptr [0x00409920]\nCALL 0x00401c10\nMOVSD qword ptr [RSP + 0x8],XMM0\nINC EBP\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EBP\nDIVSD XMM0,qword ptr [RSP + 0x20]\nCALL 0x00401c10\nMOVSD XMM1,qword ptr [RSP + 0x8]\nDIVSD XMM1,XMM0\nXORPS XMM0,XMM0\nCVTSD2SS XMM0,XMM1\nMOVSS dword ptr [0x170 + RBX],XMM0\nMOV RDI,qword ptr [RSP + 0x50]\nADD RSP,0x58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401ee0\n'
p375
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 58\n48 89 fb\n48 8b 43 60\n48 85 c0\n0f 84 04 01 00 00\n48 8b 3d c3 4d 20 00\n48 8b 70 10\ne8 62 95 ff ff\n89 c5\n85 ed\n0f 84 f9 00 00 00\n48 8b 3d a9 4d 20 00\n48 8b 43 60\n48 8b 70 10\ne8 54 99 ff ff\n48 85 c0\n0f 84 e7 00 00 00\n48 89 5c 24 38\n48 8b 78 08\n89 ee\n49 89 c6\ne8 a8 03 00 00\n89 44 24 08\n49 8b 7e 10\n89 ee\ne8 99 03 00 00\n41 89 c5\n4d 8d 7e 08\n4d 8d 66 10\n49 8d 5e 18\n4c 89 74 24 50\n49 8b 7e 18\n89 ee\ne8 7a 03 00 00\n4c 89 e7\n4d 89 fc\n44 8b 74 24 08\n48 89 de\n41 89 c7\n45 39 f5\n44 89 f2\n41 0f 4d d5\n4c 89 e0\n48 0f 4f c7\n41 39 d7\n41 0f 4d d7\n48 0f 4f c6\n48 8b 00\n85 d2\nb9 01 00 00 00\n0f 45 ca\nf2 0f 10 15 88 12 00 00\n48 63 d1\n0f b7 14 50\nf2 0f 2a c2\nf2 0f 5e c2\nf2 0f 10 0d 91 12 00 00\n66 0f 2e c8\n76 65\n48 8b 5c 24 38\nc7 83 74 01 00 00 00 00 00 00\n48 b8 00 00 80 3f 00 00 80 3f\n48 89 83 68 01 00 00\nf3 0f 10 05 d3 15 00 00\ne9 6c 02 00 00\n48 83 c4 58\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 73 20\nbf 32 b4 40 00\neb 09\n48 8b 73 20\nbf 5d b4 40 00\n31 c0\n48 83 c4 58\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 36 fa ff ff\n48 89 7c 24 40\n48 89 74 24 48\n0f 57 c9\nf2 0f 2a cd\n8d 51 01\n39 ea\n48 8b 5c 24 38\nf2 0f 11 4c 24 20\n0f 84 c3 00 00 00\n89 ce\nc1 ee 1f\n01 ce\nd1 fe\n8d 4e 01\nf2 0f 2a d9\nf2 0f 5e d9\nf2 0f 11 5c 24 30\n48 63 ce\n0f b7 04 48\n0f 57 db\nf2 0f 2a d8\nf2 0f 5e da\nf2 0f 11 5c 24 18\n0f 57 d2\nf2 0f 2a d2\nf2 0f 5e d1\nf2 0f 11 54 24 28\ne8 87 94 ff ff\nf2 0f 11 44 24 10\nf2 0f 10 44 24 30\ne8 76 94 ff ff\nf2 0f 59 44 24 10\nf2 0f 11 44 24 10\nf2 0f 10 44 24 18\ne8 5f 94 ff ff\nf2 0f 11 44 24 18\nf2 0f 10 44 24 28\ne8 4e 94 ff ff\nf2 0f 59 44 24 18\nf2 0f 10 4c 24 10\nf2 0f 5c c8\nf2 0f 11 4c 24 10\nf2 0f 10 44 24 30\nf2 0f 5e 44 24 28\ne8 27 94 ff ff\nf2 0f 10 4c 24 10\nf2 0f 5e c8\n66 0f 28 c1\ne8 34 93 ff ff\nf2 0f 10 15 1c 11 00 00\n0f 57 c9\nf2 0f 5a c8\nf3 0f 11 8b 74 01 00 00\n49 8b 04 24\n44 89 f1\nc1 e9 1f\n44 01 f1\nd1 f9\n48 63 e9\n0f b7 04 68\n0f 57 c0\nf2 0f 2a c0\nf3 0f 5a c9\nf2 0f 5e c1\nf2 0f 5e c2\ne8 cf 93 ff ff\nf2 0f 11 44 24 08\nff c5\n0f 57 c0\nf2 0f 2a c5\nf2 0f 5e 44 24 20\ne8 b5 93 ff ff\nf2 0f 10 4c 24 08\nf2 0f 5e c8\n0f 57 c0\nf2 0f 5a c1\nf3 0f 11 83 68 01 00 00\n48 8b 44 24 40\n48 8b 00\n44 89 e9\nc1 e9 1f\n44 01 e9\nd1 f9\n48 63 e9\n0f b7 04 68\n0f 57 c0\nf2 0f 2a c0\nf3 0f 10 8b 74 01 00 00\nf3 0f 5a c9\nf2 0f 5e c1\nf2 0f 5e 05 73 10 00 00\ne8 5e 93 ff ff\nf2 0f 11 44 24 08\nff c5\n0f 57 c0\nf2 0f 2a c5\nf2 0f 5e 44 24 20\ne8 44 93 ff ff\nf2 0f 10 4c 24 08\nf2 0f 5e c8\n0f 57 c0\nf2 0f 5a c1\nf3 0f 11 83 6c 01 00 00\n48 8b 44 24 48\n48 8b 00\n44 89 f9\nc1 e9 1f\n44 01 f9\nd1 f9\n48 63 e9\n0f b7 04 68\n0f 57 c0\nf2 0f 2a c0\nf3 0f 10 8b 74 01 00 00\nf3 0f 5a c9\nf2 0f 5e c1\nf2 0f 5e 05 02 10 00 00\ne8 ed 92 ff ff\nf2 0f 11 44 24 08\nff c5\n0f 57 c0\nf2 0f 2a c5\nf2 0f 5e 44 24 20\ne8 d3 92 ff ff\nf2 0f 10 4c 24 08\nf2 0f 5e c8\n0f 57 c0\nf2 0f 5a c1\nf3 0f 11 83 70 01 00 00\n48 8b 7c 24 50\n48 83 c4 58\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 72 95 ff ff\n'
p376
S'.text:00000000004085c0\n.text:00000000004085c1\n.text:00000000004085c3\n.text:00000000004085c5\n.text:00000000004085c7\n.text:00000000004085c9\n.text:00000000004085ca\n.text:00000000004085ce\n.text:00000000004085d1\n.text:00000000004085d5\n.text:00000000004085d8\n.text:00000000004085de\n.text:00000000004085e5\n.text:00000000004085e9\n.text:00000000004085ee\n.text:00000000004085f0\n.text:00000000004085f2\n.text:00000000004085f8\n.text:00000000004085ff\n.text:0000000000408603\n.text:0000000000408607\n.text:000000000040860c\n.text:000000000040860f\n.text:0000000000408615\n.text:000000000040861a\n.text:000000000040861e\n.text:0000000000408620\n.text:0000000000408623\n.text:0000000000408628\n.text:000000000040862c\n.text:0000000000408630\n.text:0000000000408632\n.text:0000000000408637\n.text:000000000040863a\n.text:000000000040863e\n.text:0000000000408642\n.text:0000000000408646\n.text:000000000040864b\n.text:000000000040864f\n.text:0000000000408651\n.text:0000000000408656\n.text:0000000000408659\n.text:000000000040865c\n.text:0000000000408661\n.text:0000000000408664\n.text:0000000000408667\n.text:000000000040866a\n.text:000000000040866d\n.text:0000000000408671\n.text:0000000000408674\n.text:0000000000408678\n.text:000000000040867b\n.text:000000000040867f\n.text:0000000000408683\n.text:0000000000408686\n.text:0000000000408688\n.text:000000000040868d\n.text:0000000000408690\n.text:0000000000408698\n.text:000000000040869b\n.text:000000000040869f\n.text:00000000004086a3\n.text:00000000004086a7\n.text:00000000004086af\n.text:00000000004086b3\n.text:00000000004086b5\n.text:00000000004086ba\n.text:00000000004086c4\n.text:00000000004086ce\n.text:00000000004086d5\n.text:00000000004086dd\n.text:00000000004086e2\n.text:00000000004086e6\n.text:00000000004086e7\n.text:00000000004086e9\n.text:00000000004086eb\n.text:00000000004086ed\n.text:00000000004086ef\n.text:00000000004086f0\n.text:00000000004086f1\n.text:00000000004086f5\n.text:00000000004086fa\n.text:00000000004086fc\n.text:0000000000408700\n.text:0000000000408705\n.text:0000000000408707\n.text:000000000040870b\n.text:000000000040870c\n.text:000000000040870e\n.text:0000000000408710\n.text:0000000000408712\n.text:0000000000408714\n.text:0000000000408715\n.text:000000000040871a\n.text:000000000040871f\n.text:0000000000408724\n.text:0000000000408727\n.text:000000000040872b\n.text:000000000040872e\n.text:0000000000408730\n.text:0000000000408735\n.text:000000000040873b\n.text:0000000000408741\n.text:0000000000408743\n.text:0000000000408746\n.text:0000000000408748\n.text:000000000040874a\n.text:000000000040874d\n.text:0000000000408751\n.text:0000000000408755\n.text:000000000040875b\n.text:000000000040875e\n.text:0000000000408762\n.text:0000000000408765\n.text:0000000000408769\n.text:000000000040876d\n.text:0000000000408773\n.text:0000000000408776\n.text:000000000040877a\n.text:000000000040877e\n.text:0000000000408784\n.text:0000000000408789\n.text:000000000040878f\n.text:0000000000408795\n.text:000000000040879a\n.text:00000000004087a0\n.text:00000000004087a6\n.text:00000000004087ac\n.text:00000000004087b1\n.text:00000000004087b7\n.text:00000000004087bd\n.text:00000000004087c2\n.text:00000000004087c8\n.text:00000000004087ce\n.text:00000000004087d2\n.text:00000000004087d8\n.text:00000000004087de\n.text:00000000004087e4\n.text:00000000004087e9\n.text:00000000004087ef\n.text:00000000004087f3\n.text:00000000004087f7\n.text:00000000004087fc\n.text:0000000000408804\n.text:0000000000408807\n.text:000000000040880b\n.text:0000000000408813\n.text:0000000000408817\n.text:000000000040881a\n.text:000000000040881d\n.text:0000000000408820\n.text:0000000000408822\n.text:0000000000408825\n.text:0000000000408829\n.text:000000000040882c\n.text:0000000000408830\n.text:0000000000408834\n.text:0000000000408838\n.text:000000000040883c\n.text:0000000000408841\n.text:0000000000408847\n.text:0000000000408849\n.text:000000000040884c\n.text:0000000000408850\n.text:0000000000408856\n.text:000000000040885b\n.text:0000000000408861\n.text:0000000000408865\n.text:0000000000408868\n.text:000000000040886c\n.text:0000000000408874\n.text:0000000000408879\n.text:000000000040887c\n.text:000000000040887f\n.text:0000000000408882\n.text:0000000000408885\n.text:0000000000408887\n.text:000000000040888a\n.text:000000000040888e\n.text:0000000000408891\n.text:0000000000408895\n.text:000000000040889d\n.text:00000000004088a1\n.text:00000000004088a5\n.text:00000000004088ad\n.text:00000000004088b2\n.text:00000000004088b8\n.text:00000000004088ba\n.text:00000000004088bd\n.text:00000000004088c1\n.text:00000000004088c7\n.text:00000000004088cc\n.text:00000000004088d2\n.text:00000000004088d6\n.text:00000000004088d9\n.text:00000000004088dd\n.text:00000000004088e5\n.text:00000000004088ea\n.text:00000000004088ed\n.text:00000000004088f0\n.text:00000000004088f3\n.text:00000000004088f6\n.text:00000000004088f8\n.text:00000000004088fb\n.text:00000000004088ff\n.text:0000000000408902\n.text:0000000000408906\n.text:000000000040890e\n.text:0000000000408912\n.text:0000000000408916\n.text:000000000040891e\n.text:0000000000408923\n.text:0000000000408929\n.text:000000000040892b\n.text:000000000040892e\n.text:0000000000408932\n.text:0000000000408938\n.text:000000000040893d\n.text:0000000000408943\n.text:0000000000408947\n.text:000000000040894a\n.text:000000000040894e\n.text:0000000000408956\n.text:000000000040895b\n.text:000000000040895f\n.text:0000000000408960\n.text:0000000000408962\n.text:0000000000408964\n.text:0000000000408966\n.text:0000000000408968\n.text:0000000000408969\n'
p377
tp378
sS'pick_crtcs_score'
p379
(S'\n__stdcall pick_crtcs_score(output_t * outputs)\n'
p380
V\u000aint pick_crtcs_score(output_t *outputs)\u000a\u000a{\u000a  output_t *outputs_00;\u000a  crtc_t *pcVar1;\u000a  bool bVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  int iVar5;\u000a  XRROutputInfo *pXVar6;\u000a  crtc_t *crtc;\u000a  long lVar7;\u000a  crtc_t *pcVar8;\u000a  \u000a  if (outputs == (output_t *)0x0) {\u000a    iVar3 = 0;\u000a  }\u000a  else {\u000a    outputs_00 = (output_t *)outputs->next;\u000a    outputs->crtc_info = (crtc_t *)0x0;\u000a    iVar3 = pick_crtcs_score(outputs_00);\u000a    if (outputs->mode_info != (XRRModeInfo *)0x0) {\u000a      pXVar6 = outputs->output_info;\u000a      if (pXVar6->ncrtc < 1) {\u000a        pcVar8 = (crtc_t *)0x0;\u000a      }\u000a      else {\u000a        lVar7 = 0;\u000a        pcVar8 = (crtc_t *)0x0;\u000a        do {\u000a          crtc = find_crtc_by_xid(pXVar6->crtcs[lVar7]);\u000a          if (crtc == (crtc_t *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a            fatal("cannot find crtc 0x%lx\u005cn",outputs->output_info->crtcs[lVar7]);\u000a          }\u000a          disable_outputs(outputs_00);\u000a          iVar4 = check_crtc_for_output(crtc,outputs);\u000a          if (iVar4 != 0) {\u000a            pcVar1 = outputs->current_crtc_info;\u000a            outputs->crtc_info = crtc;\u000a            iVar5 = pick_crtcs_score(outputs_00);\u000a            iVar5 = (uint)(crtc == pcVar1) + 1000 + iVar5;\u000a            iVar4 = iVar3;\u000a            if (iVar3 <= iVar5) {\u000a              iVar4 = iVar5;\u000a            }\u000a            bVar2 = iVar3 < iVar5;\u000a            iVar3 = iVar4;\u000a            if (bVar2) {\u000a              pcVar8 = crtc;\u000a              iVar3 = iVar4;\u000a            }\u000a          }\u000a          lVar7 = lVar7 + 1;\u000a          pXVar6 = outputs->output_info;\u000a        } while (lVar7 < (long)pXVar6->ncrtc);\u000a      }\u000a      if (outputs->crtc_info != pcVar8) {\u000a        outputs->crtc_info = pcVar8;\u000a      }\u000a      pick_crtcs_score(outputs_00);\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p381
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,RDI\nTEST R13,R13\nJZ 0x00408e72\nMOV R14,qword ptr [R13]\nMOV qword ptr [R13 + 0x60],0x0\nMOV RDI,R14\nCALL 0x00408da0\nMOV R15D,EAX\nCMP qword ptr [0x98 + R13],0x0\nJZ 0x00408e8c\nMOV RAX,qword ptr [R13 + 0x38]\nCMP dword ptr [RAX + 0x34],0x0\nJLE 0x00408e77\nXOR EBX,EBX\nXOR R12D,R12D\nNOP\nMOV RAX,qword ptr [RAX + 0x38]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nCALL 0x00407730\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00408e9e\nMOV RDI,R14\nCALL 0x004090b0\nMOV RDI,RBP\nMOV RSI,R13\nCALL 0x00408ec0\nTEST EAX,EAX\nJZ 0x00408e60\nMOV dword ptr [RSP + 0x4],R15D\nMOV R15,R14\nMOV R14,R12\nXOR R12D,R12D\nCMP RBP,qword ptr [R13 + 0x68]\nSETZ R12B\nMOV qword ptr [R13 + 0x60],RBP\nMOV RDI,R15\nCALL 0x00408da0\nLEA EAX,[0x3e8 + R12 + RAX*0x1]\nMOV R12,R14\nMOV R14,R15\nMOV R15D,dword ptr [RSP + 0x4]\nCMP EAX,R15D\nCMOVGE R15D,EAX\nCMOVG R12,RBP\nINC RBX\nMOV RAX,qword ptr [R13 + 0x38]\nMOVSXD RCX,dword ptr [RAX + 0x34]\nCMP RBX,RCX\nJL 0x00408df0\nJMP 0x00408e7a\nXOR R15D,R15D\nJMP 0x00408e8c\nXOR R12D,R12D\nCMP qword ptr [R13 + 0x60],R12\nJZ 0x00408e84\nMOV qword ptr [R13 + 0x60],R12\nMOV RDI,R14\nCALL 0x00408da0\nMOV EAX,R15D\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RAX,qword ptr [R13 + 0x38]\nMOV RAX,qword ptr [RAX + 0x38]\nMOV RSI,qword ptr [RAX + RBX*0x8]\nMOV EDI,0x40b302\nXOR EAX,EAX\nCALL 0x00406410\n'
p382
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fd\n4d 85 ed\n0f 84 bb 00 00 00\n4d 8b 75 00\n49 c7 45 60 00 00 00 00\n4c 89 f7\ne8 d5 ff ff ff\n41 89 c7\n49 83 bd 98 00 00 00 00\n0f 84 b0 00 00 00\n49 8b 45 38\n83 78 34 00\n0f 8e 8d 00 00 00\n31 db\n45 31 e4\n90\n48 8b 40 38\n48 8b 3c d8\ne8 33 e9 ff ff\n48 89 c5\n48 85 ed\n0f 84 95 00 00 00\n4c 89 f7\ne8 9f 02 00 00\n48 89 ef\n4c 89 ee\ne8 a4 00 00 00\n85 c0\n74 40\n44 89 7c 24 04\n4d 89 f7\n4d 89 e6\n45 31 e4\n49 3b 6d 68\n41 0f 94 c4\n49 89 6d 60\n4c 89 ff\ne8 5e ff ff ff\n41 8d 84 04 e8 03 00 00\n4d 89 f4\n4d 89 fe\n44 8b 7c 24 04\n44 39 f8\n44 0f 4d f8\n4c 0f 4f e5\n48 ff c3\n49 8b 45 38\n48 63 48 34\n48 39 cb\n7c 80\neb 08\n45 31 ff\neb 15\n45 31 e4\n4d 39 65 60\n74 04\n4d 89 65 60\n4c 89 f7\ne8 14 ff ff ff\n44 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 8b 45 38\n48 8b 40 38\n48 8b 34 d8\nbf 02 b3 40 00\n31 c0\ne8 5a d5 ff ff\n'
p383
S'.text:0000000000408da0\n.text:0000000000408da1\n.text:0000000000408da3\n.text:0000000000408da5\n.text:0000000000408da7\n.text:0000000000408da9\n.text:0000000000408daa\n.text:0000000000408dab\n.text:0000000000408dae\n.text:0000000000408db1\n.text:0000000000408db7\n.text:0000000000408dbb\n.text:0000000000408dc3\n.text:0000000000408dc6\n.text:0000000000408dcb\n.text:0000000000408dce\n.text:0000000000408dd6\n.text:0000000000408ddc\n.text:0000000000408de0\n.text:0000000000408de4\n.text:0000000000408dea\n.text:0000000000408dec\n.text:0000000000408def\n.text:0000000000408df0\n.text:0000000000408df4\n.text:0000000000408df8\n.text:0000000000408dfd\n.text:0000000000408e00\n.text:0000000000408e03\n.text:0000000000408e09\n.text:0000000000408e0c\n.text:0000000000408e11\n.text:0000000000408e14\n.text:0000000000408e17\n.text:0000000000408e1c\n.text:0000000000408e1e\n.text:0000000000408e20\n.text:0000000000408e25\n.text:0000000000408e28\n.text:0000000000408e2b\n.text:0000000000408e2e\n.text:0000000000408e32\n.text:0000000000408e36\n.text:0000000000408e3a\n.text:0000000000408e3d\n.text:0000000000408e42\n.text:0000000000408e4a\n.text:0000000000408e4d\n.text:0000000000408e50\n.text:0000000000408e55\n.text:0000000000408e58\n.text:0000000000408e5c\n.text:0000000000408e60\n.text:0000000000408e63\n.text:0000000000408e67\n.text:0000000000408e6b\n.text:0000000000408e6e\n.text:0000000000408e70\n.text:0000000000408e72\n.text:0000000000408e75\n.text:0000000000408e77\n.text:0000000000408e7a\n.text:0000000000408e7e\n.text:0000000000408e80\n.text:0000000000408e84\n.text:0000000000408e87\n.text:0000000000408e8c\n.text:0000000000408e8f\n.text:0000000000408e93\n.text:0000000000408e94\n.text:0000000000408e96\n.text:0000000000408e98\n.text:0000000000408e9a\n.text:0000000000408e9c\n.text:0000000000408e9d\n.text:0000000000408e9e\n.text:0000000000408ea2\n.text:0000000000408ea6\n.text:0000000000408eaa\n.text:0000000000408eaf\n.text:0000000000408eb1\n'
p384
tp385
sS'set_name_preferred'
p386
(S'\n__stdcall set_name_preferred(name_t * name)\n'
p387
V\u000avoid set_name_preferred(name_t *name)\u000a\u000a{\u000a  *(byte *)&name->kind = *(byte *)&name->kind | 8;\u000a  return;\u000a}\u000a\u000a
p388
S'OR byte ptr [RDI],0x8\nRET\n'
p389
S'80 0f 08\nc3\n'
p390
S'.text:0000000000405e50\n.text:0000000000405e53\n'
p391
tp392
sS'reflection_name'
p393
(S'\n__stdcall reflection_name()\n'
p394
V\u000achar * reflection_name(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (&PTR_s_Y_axis_00409bf0)[(ulong)((in_EDI >> 4 ^ 2) & 3)];\u000a}\u000a\u000a
p395
S'SHR EDI,0x4\nXOR EDI,0x2\nAND EDI,0x3\nMOV RAX,qword ptr [0x409bf0 + RDI*0x8]\nRET\n'
p396
S'c1 ef 04\n83 f7 02\n83 e7 03\n48 8b 04 fd f0 9b 40 00\nc3\n'
p397
S'.text:00000000004076d0\n.text:00000000004076d3\n.text:00000000004076d6\n.text:00000000004076d9\n.text:00000000004076e1\n'
p398
tp399
sS'deregister_tm_clones'
p400
(S'\n__stdcall deregister_tm_clones()\n'
p401
V\u000a/* WARNING: Removing unreachable block (ram,0x00402015) */\u000a/* WARNING: Removing unreachable block (ram,0x0040201f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p402
S'MOV EAX,0x60d2e7\nPUSH RBP\nSUB RAX,0x60d2e0\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00402030\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00402030\nPOP RBP\nMOV EDI,0x60d2e0\nJMP RAX\nPOP RBP\nRET\n'
p403
S'b8 e7 d2 60 00\n55\n48 2d e0 d2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf e0 d2 60 00\nff e0\n5d\nc3\n'
p404
S'.text:0000000000402000\n.text:0000000000402005\n.text:0000000000402006\n.text:000000000040200c\n.text:0000000000402010\n.text:0000000000402013\n.text:0000000000402015\n.text:000000000040201a\n.text:000000000040201d\n.text:000000000040201f\n.text:0000000000402020\n.text:0000000000402025\n.text:0000000000402030\n.text:0000000000402031\n'
p405
tp406
sS'XRRSelectInput'
p407
(S'\n__stdcall XRRSelectInput()\n'
p408
V\u000avoid XRRSelectInput(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRSelectInput_0060d298)();\u000a  return;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x0060d298]\n'
p410
S'ff 25 12 b3 20 00\n'
p411
S'.plt:0000000000401f80\n'
p412
tp413
sS'XDisplayName'
p414
(S'\n__stdcall XDisplayName()\n'
p415
V\u000avoid XDisplayName(void)\u000a\u000a{\u000a  (*(code *)PTR_XDisplayName_0060d1c0)();\u000a  return;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x0060d1c0]\n'
p417
S'ff 25 ea b3 20 00\n'
p418
S'.plt:0000000000401dd0\n'
p419
tp420
sS'path_bounds'
p421
(S'\n__stdcall path_bounds()\n'
p422
V\u000avoid path_bounds(undefined8 uParm1,long lParm2,int *piParm3)\u000a\u000a{\u000a  int iVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  double __x;\u000a  double __x_00;\u000a  double dVar5;\u000a  \u000a  lVar2 = 0;\u000a  do {\u000a    __x = (double)*(int *)(lParm2 + lVar2 * 8);\u000a    __x_00 = (double)*(int *)(lParm2 + 4 + lVar2 * 8);\u000a    transform_point();\u000a    dVar5 = floor(__x);\u000a    iVar4 = (int)dVar5;\u000a    dVar5 = floor(__x_00);\u000a    iVar1 = (int)dVar5;\u000a    __x = ceil(__x);\u000a    iVar3 = (int)__x;\u000a    __x = ceil(__x_00);\u000a    if (lVar2 == 0) {\u000a      *piParm3 = iVar4;\u000a      piParm3[1] = iVar1;\u000a      piParm3[2] = iVar3;\u000aLAB_00408c1a:\u000a      piParm3[3] = (int)__x;\u000a    }\u000a    else {\u000a      if (iVar4 < *piParm3) {\u000a        *piParm3 = iVar4;\u000a      }\u000a      if (iVar1 < piParm3[1]) {\u000a        piParm3[1] = iVar1;\u000a      }\u000a      if (piParm3[2] < iVar3) {\u000a        piParm3[2] = iVar3;\u000a      }\u000a      if (piParm3[3] < (int)__x) goto LAB_00408c1a;\u000a    }\u000a    lVar2 = lVar2 + 1;\u000a    if (lVar2 == 4) {\u000a      return;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p423
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBX,RDX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x20],RDI\nLEA RAX,[RBX + 0xc]\nMOV qword ptr [RSP + 0x8],RAX\nXOR R12D,R12D\nNOP dword ptr CS:[RAX + RAX*0x1]\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,dword ptr [R14 + R12*0x8]\nMOVSD qword ptr [RSP + 0x18],XMM0\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,dword ptr [R14 + R12*0x8 + 0x4]\nMOVSD qword ptr [RSP + 0x10],XMM0\nMOV RDI,qword ptr [RSP + 0x20]\nLEA RSI,[RSP + 0x18]\nLEA RDX,[RSP + 0x10]\nCALL 0x00408c40\nMOVSD XMM0,qword ptr [RSP + 0x18]\nMOVSD qword ptr [RSP + 0x30],XMM0\nCALL 0x00401f10\nCVTTSD2SI R15D,XMM0\nMOVSD XMM0,qword ptr [RSP + 0x10]\nMOVSD qword ptr [RSP + 0x28],XMM0\nCALL 0x00401f10\nCVTTSD2SI EBP,XMM0\nMOVSD XMM0,qword ptr [RSP + 0x30]\nCALL 0x00401fa0\nCVTTSD2SI R13D,XMM0\nMOVSD XMM0,qword ptr [RSP + 0x28]\nCALL 0x00401fa0\nCVTTSD2SI EAX,XMM0\nTEST R12,R12\nJZ 0x00408c10\nCMP R15D,dword ptr [RBX]\nJGE 0x00408bea\nMOV dword ptr [RBX],R15D\nCMP EBP,dword ptr [RBX + 0x4]\nJGE 0x00408bf2\nMOV dword ptr [RBX + 0x4],EBP\nCMP R13D,dword ptr [RBX + 0x8]\nJLE 0x00408bfc\nMOV dword ptr [RBX + 0x8],R13D\nMOV RCX,qword ptr [RSP + 0x8]\nCMP EAX,dword ptr [RCX]\nJG 0x00408c1a\nJMP 0x00408c21\nMOV dword ptr [RBX],R15D\nMOV dword ptr [RBX + 0x4],EBP\nMOV dword ptr [RBX + 0x8],R13D\nMOV RCX,qword ptr [RSP + 0x8]\nMOV dword ptr [RCX],EAX\nINC R12\nCMP R12,0x4\nJNZ 0x00408b60\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p424
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 d3\n49 89 f6\n48 89 7c 24 20\n48 8d 43 0c\n48 89 44 24 08\n45 31 e4\n66 66 2e 0f 1f 84 00 00 00 00 00\n0f 57 c0\nf2 43 0f 2a 04 e6\nf2 0f 11 44 24 18\n0f 57 c0\nf2 43 0f 2a 44 e6 04\nf2 0f 11 44 24 10\n48 8b 7c 24 20\n48 8d 74 24 18\n48 8d 54 24 10\ne8 ad 00 00 00\nf2 0f 10 44 24 18\nf2 0f 11 44 24 30\ne8 6c 93 ff ff\nf2 44 0f 2c f8\nf2 0f 10 44 24 10\nf2 0f 11 44 24 28\ne8 56 93 ff ff\nf2 0f 2c e8\nf2 0f 10 44 24 30\ne8 d7 93 ff ff\nf2 44 0f 2c e8\nf2 0f 10 44 24 28\ne8 c7 93 ff ff\nf2 0f 2c c0\n4d 85 e4\n74 2e\n44 3b 3b\n7d 03\n44 89 3b\n3b 6b 04\n7d 03\n89 6b 04\n44 3b 6b 08\n7e 04\n44 89 6b 08\n48 8b 4c 24 08\n3b 01\n7f 15\neb 1a\n44 89 3b\n89 6b 04\n44 89 6b 08\n48 8b 4c 24 08\n89 01\n49 ff c4\n49 83 fc 04\n0f 85 32 ff ff ff\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p425
S'.text:0000000000408b30\n.text:0000000000408b31\n.text:0000000000408b33\n.text:0000000000408b35\n.text:0000000000408b37\n.text:0000000000408b39\n.text:0000000000408b3a\n.text:0000000000408b3e\n.text:0000000000408b41\n.text:0000000000408b44\n.text:0000000000408b49\n.text:0000000000408b4d\n.text:0000000000408b52\n.text:0000000000408b55\n.text:0000000000408b60\n.text:0000000000408b63\n.text:0000000000408b69\n.text:0000000000408b6f\n.text:0000000000408b72\n.text:0000000000408b79\n.text:0000000000408b7f\n.text:0000000000408b84\n.text:0000000000408b89\n.text:0000000000408b8e\n.text:0000000000408b93\n.text:0000000000408b99\n.text:0000000000408b9f\n.text:0000000000408ba4\n.text:0000000000408ba9\n.text:0000000000408baf\n.text:0000000000408bb5\n.text:0000000000408bba\n.text:0000000000408bbe\n.text:0000000000408bc4\n.text:0000000000408bc9\n.text:0000000000408bce\n.text:0000000000408bd4\n.text:0000000000408bd9\n.text:0000000000408bdd\n.text:0000000000408be0\n.text:0000000000408be2\n.text:0000000000408be5\n.text:0000000000408be7\n.text:0000000000408bea\n.text:0000000000408bed\n.text:0000000000408bef\n.text:0000000000408bf2\n.text:0000000000408bf6\n.text:0000000000408bf8\n.text:0000000000408bfc\n.text:0000000000408c01\n.text:0000000000408c03\n.text:0000000000408c05\n.text:0000000000408c10\n.text:0000000000408c13\n.text:0000000000408c16\n.text:0000000000408c1a\n.text:0000000000408c1f\n.text:0000000000408c21\n.text:0000000000408c24\n.text:0000000000408c28\n.text:0000000000408c2e\n.text:0000000000408c32\n.text:0000000000408c33\n.text:0000000000408c35\n.text:0000000000408c37\n.text:0000000000408c39\n.text:0000000000408c3b\n.text:0000000000408c3c\n'
p426
tp427
sS'XRRListOutputProperties'
p428
(S'\n__stdcall XRRListOutputProperties()\n'
p429
V\u000avoid XRRListOutputProperties(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRListOutputProperties_0060d048)();\u000a  return;\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x0060d048]\n'
p431
S'ff 25 62 b5 20 00\n'
p432
S'.plt:0000000000401ae0\n'
p433
tp434
sS'set_crtcs'
p435
(S'\n__stdcall set_crtcs()\n'
p436
V\u000avoid set_crtcs(void)\u000a\u000a{\u000a  _output *output;\u000a  \u000a  output = (_output *)all_outputs;\u000a  if (all_outputs != (output_t *)0x0) {\u000a    do {\u000a      if (((output_t *)output)->mode_info != (XRRModeInfo *)0x0) {\u000a        crtc_add_output(((output_t *)output)->crtc_info,(output_t *)output);\u000a      }\u000a      output = ((output_t *)output)->next;\u000a    } while (output != (_output *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p437
S'PUSH RBX\nMOV RBX,qword ptr [0x0060d3c8]\nTEST RBX,RBX\nJNZ 0x00406f48\nJMP 0x00406f60\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nJZ 0x00406f60\nCMP qword ptr [0x98 + RBX],0x0\nJZ 0x00406f40\nMOV RDI,qword ptr [RBX + 0x60]\nMOV RSI,RBX\nCALL 0x004090e0\nJMP 0x00406f40\nPOP RBX\nRET\n'
p438
S'53\n48 8b 1d 90 64 20 00\n48 85 db\n75 0b\neb 21\n48 8b 1b\n48 85 db\n74 18\n48 83 bb 98 00 00 00 00\n74 ee\n48 8b 7b 60\n48 89 de\ne8 82 21 00 00\neb e0\n5b\nc3\n'
p439
S'.text:0000000000406f30\n.text:0000000000406f31\n.text:0000000000406f38\n.text:0000000000406f3b\n.text:0000000000406f3d\n.text:0000000000406f40\n.text:0000000000406f43\n.text:0000000000406f46\n.text:0000000000406f48\n.text:0000000000406f50\n.text:0000000000406f52\n.text:0000000000406f56\n.text:0000000000406f59\n.text:0000000000406f5e\n.text:0000000000406f60\n.text:0000000000406f61\n'
p440
tp441
sS'strtol'
p442
(S'\n__stdcall strtol(char * __nptr, char * * __endptr, int __base)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along strtol(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_strtol_0060d140)();\u000a  return lVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x0060d140]\n'
p445
S'ff 25 6a b4 20 00\n'
p446
S'.plt:0000000000401cd0\n'
p447
tp448
sS'set_gamma'
p449
(S'\n__stdcall set_gamma()\n'
p450
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid set_gamma(void)\u000a\u000a{\u000a  crtc_t *pcVar1;\u000a  uint uVar2;\u000a  void *__ptr;\u000a  int iVar3;\u000a  ulong uVar4;\u000a  _output *p_Var5;\u000a  float fVar6;\u000a  double __x;\u000a  float fVar7;\u000a  float fVar8;\u000a  float fVar9;\u000a  double dVar10;\u000a  \u000a  p_Var5 = (_output *)all_outputs;\u000a  if (all_outputs != (output_t *)0x0) {\u000a    do {\u000a      if ((*(byte *)((long)&((output_t *)p_Var5)->changes + 1) & 8) != 0) {\u000a        pcVar1 = ((output_t *)p_Var5)->crtc_info;\u000a        if (pcVar1 == (crtc_t *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a          fatal("Need crtc to set gamma on.\u005cn");\u000a        }\u000a        uVar2 = XRRGetCrtcGammaSize(dpy,(pcVar1->crtc).xid);\u000a        if (uVar2 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a          fatal("Gamma size is 0.\u005cn");\u000a        }\u000a        if (0x10000 < (int)uVar2) {\u000a                    /* WARNING: Subroutine does not return */\u000a          fatal("Gamma correction table is impossibly large.\u005cn");\u000a        }\u000a        __ptr = (void *)XRRAllocGamma((ulong)uVar2);\u000a        fVar8 = DAT_00409cb0;\u000a        if (__ptr == (void *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a          fatal("Gamma allocation failed.\u005cn");\u000a        }\u000a        if ((((output_t *)p_Var5)->gamma).red == _DAT_00409cb4) {\u000a          (((output_t *)p_Var5)->gamma).red = 1.00000000;\u000a        }\u000a        if ((((output_t *)p_Var5)->gamma).green == _DAT_00409cb4) {\u000a          (((output_t *)p_Var5)->gamma).green = 1.00000000;\u000a        }\u000a        if ((((output_t *)p_Var5)->gamma).blue == _DAT_00409cb4) {\u000a          (((output_t *)p_Var5)->gamma).blue = 1.00000000;\u000a        }\u000a        if (0 < (int)uVar2) {\u000a          fVar6 = fVar8 / (((output_t *)p_Var5)->gamma).red;\u000a          fVar7 = fVar8 / (((output_t *)p_Var5)->gamma).green;\u000a          fVar9 = fVar8 / (((output_t *)p_Var5)->gamma).blue;\u000a          dVar10 = (double)(uVar2 - 1);\u000a          uVar4 = 0;\u000a          do {\u000a            iVar3 = (int)uVar4;\u000a            if ((fVar6 == fVar8) && (((output_t *)p_Var5)->brightness == fVar8)) {\u000a              __x = (double)iVar3 / dVar10;\u000a            }\u000a            else {\u000a              pow((double)iVar3 / dVar10,(double)fVar6);\u000a              __x = dmin();\u000a              fVar8 = DAT_00409cb0;\u000a            }\u000a            *(undefined2 *)(*(long *)((long)__ptr + 8) + uVar4 * 2) =\u000a                 (short)(int)(__x * DAT_00409920);\u000a            if ((fVar7 == fVar8) && (((output_t *)p_Var5)->brightness == fVar8)) {\u000a              __x = (double)iVar3 / dVar10;\u000a            }\u000a            else {\u000a              pow((double)iVar3 / dVar10,(double)fVar7);\u000a              __x = dmin();\u000a              fVar8 = DAT_00409cb0;\u000a            }\u000a            *(undefined2 *)(*(long *)((long)__ptr + 0x10) + uVar4 * 2) =\u000a                 (short)(int)(__x * DAT_00409920);\u000a            __x = (double)iVar3 / dVar10;\u000a            if ((fVar9 != fVar8) || (((output_t *)p_Var5)->brightness != fVar8)) {\u000a              pow(__x,(double)fVar9);\u000a              __x = dmin();\u000a              fVar8 = DAT_00409cb0;\u000a            }\u000a            *(undefined2 *)(*(long *)((long)__ptr + 0x18) + uVar4 * 2) =\u000a                 (short)(int)(__x * DAT_00409920);\u000a            uVar4 = uVar4 + 1;\u000a          } while ((ulong)uVar2 != uVar4);\u000a        }\u000a        XRRSetCrtcGamma(dpy,(pcVar1->crtc).xid,__ptr);\u000a        free(__ptr);\u000a      }\u000a      p_Var5 = ((output_t *)p_Var5)->next;\u000a    } while (p_Var5 != (_output *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p451
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x30\nMOV R13,qword ptr [0x0060d3c8]\nTEST R13,R13\nJNZ 0x00407129\nJMP 0x004073d9\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [R12 + 0x10]\nMOV RDX,R15\nCALL 0x00401e30\nMOV RDI,R15\nCALL 0x00401a80\nMOV R13,qword ptr [R13]\nTEST R13,R13\nJZ 0x004073d9\nTEST byte ptr [R13 + 0x9],0x8\nJZ 0x0040711c\nMOV R12,qword ptr [R13 + 0x60]\nTEST R12,R12\nJZ 0x004073e7\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [R12 + 0x10]\nCALL 0x00401b50\nMOV R14D,EAX\nTEST R14D,R14D\nJZ 0x004073f3\nCMP R14D,0x10001\nJGE 0x004073ff\nMOV EDI,R14D\nCALL 0x00401c20\nMOV R15,RAX\nTEST R15,R15\nJZ 0x0040740b\nMOVSS XMM0,dword ptr [0x168 + R13]\nUCOMISS XMM0,dword ptr [0x00409cb4]\nMOVSS XMM2,dword ptr [0x00409cb0]\nJNZ 0x004071a3\nJP 0x004071a3\nMOV dword ptr [0x168 + R13],0x3f800000\nMOVSS XMM0,dword ptr [0x16c + R13]\nUCOMISS XMM0,dword ptr [0x00409cb4]\nJNZ 0x004071c3\nJP 0x004071c3\nMOV dword ptr [0x16c + R13],0x3f800000\nMOVSS XMM0,dword ptr [0x170 + R13]\nUCOMISS XMM0,dword ptr [0x00409cb4]\nJNZ 0x004071e3\nJP 0x004071e3\nMOV dword ptr [0x170 + R13],0x3f800000\nTEST R14D,R14D\nJLE 0x00407100\nMOVAPS XMM0,XMM2\nDIVSS XMM0,dword ptr [0x168 + R13]\nMOVAPS XMM1,XMM2\nDIVSS XMM1,dword ptr [0x16c + R13]\nMOVAPS XMM3,XMM2\nDIVSS XMM3,dword ptr [0x170 + R13]\nMOVSS dword ptr [RSP + 0x14],XMM0\nCVTSS2SD XMM0,XMM0\nMOVSD qword ptr [RSP + 0x28],XMM0\nLEA EAX,[R14 + -0x1]\nCVTSI2SD XMM4,EAX\nMOVSS dword ptr [RSP + 0x10],XMM1\nXORPS XMM0,XMM0\nCVTSS2SD XMM0,XMM1\nMOVSD qword ptr [RSP + 0x20],XMM0\nMOVSS dword ptr [RSP + 0xc],XMM3\nXORPS XMM0,XMM0\nCVTSS2SD XMM0,XMM3\nMOVSD qword ptr [RSP + 0x18],XMM0\nMOV R14D,R14D\nXOR EBX,EBX\nMOVSD qword ptr [RSP],XMM4\nNOP dword ptr [RAX + RAX*0x1]\nMOVSS XMM0,dword ptr [RSP + 0x14]\nUCOMISS XMM0,XMM2\nJNZ 0x00407290\nJP 0x00407290\nMOVSS XMM0,dword ptr [0x174 + R13]\nUCOMISS XMM0,XMM2\nJNZ 0x00407290\nJP 0x00407290\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EBX\nDIVSD XMM0,XMM4\nJMP 0x004072c4\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EBX\nDIVSD XMM0,XMM4\nMOVSD XMM1,qword ptr [RSP + 0x28]\nCALL 0x00401c00\nMOVSS XMM1,dword ptr [0x174 + R13]\nCVTSS2SD XMM1,XMM1\nMULSD XMM0,XMM1\nCALL 0x00409190\nMOVSS XMM2,dword ptr [0x00409cb0]\nMULSD XMM0,qword ptr [0x00409920]\nCVTTSD2SI EAX,XMM0\nMOV RCX,qword ptr [R15 + 0x8]\nMOV word ptr [RCX + RBX*0x2],AX\nMOVSS XMM0,dword ptr [RSP + 0x10]\nUCOMISS XMM0,XMM2\nJNZ 0x00407310\nJP 0x00407310\nMOVSS XMM0,dword ptr [0x174 + R13]\nUCOMISS XMM0,XMM2\nJNZ 0x00407310\nJP 0x00407310\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EBX\nMOVSD XMM4,qword ptr [RSP]\nDIVSD XMM0,XMM4\nJMP 0x0040734a\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EBX\nDIVSD XMM0,qword ptr [RSP]\nMOVSD XMM1,qword ptr [RSP + 0x20]\nCALL 0x00401c00\nMOVSS XMM1,dword ptr [0x174 + R13]\nCVTSS2SD XMM1,XMM1\nMULSD XMM0,XMM1\nCALL 0x00409190\nMOVSD XMM4,qword ptr [RSP]\nMOVSS XMM2,dword ptr [0x00409cb0]\nMULSD XMM0,qword ptr [0x00409920]\nCVTTSD2SI EAX,XMM0\nMOV RCX,qword ptr [R15 + 0x10]\nMOV word ptr [RCX + RBX*0x2],AX\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EBX\nDIVSD XMM0,XMM4\nMOVSS XMM1,dword ptr [RSP + 0xc]\nUCOMISS XMM1,XMM2\nJNZ 0x00407386\nJP 0x00407386\nMOVSS XMM1,dword ptr [0x174 + R13]\nUCOMISS XMM1,XMM2\nJNZ 0x00407386\nJNP 0x004073b4\nMOVSD XMM1,qword ptr [RSP + 0x18]\nCALL 0x00401c00\nMOVSS XMM1,dword ptr [0x174 + R13]\nCVTSS2SD XMM1,XMM1\nMULSD XMM0,XMM1\nCALL 0x00409190\nMOVSD XMM4,qword ptr [RSP]\nMOVSS XMM2,dword ptr [0x00409cb0]\nMULSD XMM0,qword ptr [0x00409920]\nCVTTSD2SI EAX,XMM0\nMOV RCX,qword ptr [R15 + 0x18]\nMOV word ptr [RCX + RBX*0x2],AX\nINC RBX\nCMP R14,RBX\nJNZ 0x00407260\nJMP 0x00407100\nADD RSP,0x30\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV EDI,0x40b5c6\nXOR EAX,EAX\nCALL 0x00406410\nMOV EDI,0x40b5e2\nXOR EAX,EAX\nCALL 0x00406410\nMOV EDI,0x40b5f4\nXOR EAX,EAX\nCALL 0x00406410\nMOV EDI,0x40b621\nXOR EAX,EAX\nCALL 0x00406410\n'
p452
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 30\n4c 8b 2d d4 62 20 00\n4d 85 ed\n75 30\ne9 db 02 00 00\n48 8b 3d a1 62 20 00\n49 8b 74 24 10\n4c 89 fa\ne8 1c ad ff ff\n4c 89 ff\ne8 64 a9 ff ff\n4d 8b 6d 00\n4d 85 ed\n0f 84 b0 02 00 00\n41 f6 45 09 08\n74 ec\n4d 8b 65 60\n4d 85 e4\n0f 84 aa 02 00 00\n48 8b 3d 64 62 20 00\n49 8b 74 24 10\ne8 02 aa ff ff\n41 89 c6\n45 85 f6\n0f 84 99 02 00 00\n41 81 fe 01 00 01 00\n0f 8d 98 02 00 00\n44 89 f7\ne8 b1 aa ff ff\n49 89 c7\n4d 85 ff\n0f 84 90 02 00 00\nf3 41 0f 10 85 68 01 00 00\n0f 2e 04 25 b4 9c 40 00\nf3 0f 10 15 1c 2b 00 00\n75 0d\n7a 0b\n41 c7 85 68 01 00 00 00 00 80 3f\nf3 41 0f 10 85 6c 01 00 00\n0f 2e 04 25 b4 9c 40 00\n75 0d\n7a 0b\n41 c7 85 6c 01 00 00 00 00 80 3f\nf3 41 0f 10 85 70 01 00 00\n0f 2e 04 25 b4 9c 40 00\n75 0d\n7a 0b\n41 c7 85 70 01 00 00 00 00 80 3f\n45 85 f6\n0f 8e 14 ff ff ff\n0f 28 c2\nf3 41 0f 5e 85 68 01 00 00\n0f 28 ca\nf3 41 0f 5e 8d 6c 01 00 00\n0f 28 da\nf3 41 0f 5e 9d 70 01 00 00\nf3 0f 11 44 24 14\nf3 0f 5a c0\nf2 0f 11 44 24 28\n41 8d 46 ff\nf2 0f 2a e0\nf3 0f 11 4c 24 10\n0f 57 c0\nf3 0f 5a c1\nf2 0f 11 44 24 20\nf3 0f 11 5c 24 0c\n0f 57 c0\nf3 0f 5a c3\nf2 0f 11 44 24 18\n45 89 f6\n31 db\nf2 0f 11 24 24\n0f 1f 84 00 00 00 00 00\nf3 0f 10 44 24 14\n0f 2e c2\n75 25\n7a 23\nf3 41 0f 10 85 74 01 00 00\n0f 2e c2\n75 15\n7a 13\n0f 57 c0\nf2 0f 2a c3\nf2 0f 5e c4\neb 3a\n0f 57 c0\nf2 0f 2a c3\nf2 0f 5e c4\nf2 0f 10 4c 24 28\ne8 5a a9 ff ff\nf3 41 0f 10 8d 74 01 00 00\nf3 0f 5a c9\nf2 0f 59 c1\ne8 d4 1e 00 00\nf3 0f 10 15 ec 29 00 00\nf2 0f 59 05 54 26 00 00\nf2 0f 2c c0\n49 8b 4f 08\n66 89 04 59\nf3 0f 10 44 24 10\n0f 2e c2\n75 2d\n7a 2b\nf3 41 0f 10 85 74 01 00 00\n0f 2e c2\n75 1d\n7a 1b\n0f 57 c0\nf2 0f 2a c3\nf2 0f 10 24 24\nf2 0f 5e c4\neb 43\n0f 57 c0\nf2 0f 2a c3\nf2 0f 5e 04 24\nf2 0f 10 4c 24 20\ne8 d9 a8 ff ff\nf3 41 0f 10 8d 74 01 00 00\nf3 0f 5a c9\nf2 0f 59 c1\ne8 53 1e 00 00\nf2 0f 10 24 24\nf3 0f 10 15 66 29 00 00\nf2 0f 59 05 ce 25 00 00\nf2 0f 2c c0\n49 8b 4f 10\n66 89 04 59\n0f 57 c0\nf2 0f 2a c3\nf2 0f 5e c4\nf3 0f 10 4c 24 0c\n0f 2e ca\n75 12\n7a 10\nf3 41 0f 10 8d 74 01 00 00\n0f 2e ca\n75 02\n7b 2e\nf2 0f 10 4c 24 18\ne8 6f a8 ff ff\nf3 41 0f 10 8d 74 01 00 00\nf3 0f 5a c9\nf2 0f 59 c1\ne8 e9 1d 00 00\nf2 0f 10 24 24\nf3 0f 10 15 fc 28 00 00\nf2 0f 59 05 64 25 00 00\nf2 0f 2c c0\n49 8b 4f 18\n66 89 04 59\n48 ff c3\n49 39 de\n0f 85 8c fe ff ff\ne9 27 fd ff ff\n48 83 c4 30\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\nbf c6 b5 40 00\n31 c0\ne8 1d f0 ff ff\nbf e2 b5 40 00\n31 c0\ne8 11 f0 ff ff\nbf f4 b5 40 00\n31 c0\ne8 05 f0 ff ff\nbf 21 b6 40 00\n31 c0\ne8 f9 ef ff ff\n'
p453
S'.text:00000000004070e0\n.text:00000000004070e2\n.text:00000000004070e4\n.text:00000000004070e6\n.text:00000000004070e8\n.text:00000000004070e9\n.text:00000000004070ed\n.text:00000000004070f4\n.text:00000000004070f7\n.text:00000000004070f9\n.text:0000000000407100\n.text:0000000000407107\n.text:000000000040710c\n.text:000000000040710f\n.text:0000000000407114\n.text:0000000000407117\n.text:000000000040711c\n.text:0000000000407120\n.text:0000000000407123\n.text:0000000000407129\n.text:000000000040712e\n.text:0000000000407130\n.text:0000000000407134\n.text:0000000000407137\n.text:000000000040713d\n.text:0000000000407144\n.text:0000000000407149\n.text:000000000040714e\n.text:0000000000407151\n.text:0000000000407154\n.text:000000000040715a\n.text:0000000000407161\n.text:0000000000407167\n.text:000000000040716a\n.text:000000000040716f\n.text:0000000000407172\n.text:0000000000407175\n.text:000000000040717b\n.text:0000000000407184\n.text:000000000040718c\n.text:0000000000407194\n.text:0000000000407196\n.text:0000000000407198\n.text:00000000004071a3\n.text:00000000004071ac\n.text:00000000004071b4\n.text:00000000004071b6\n.text:00000000004071b8\n.text:00000000004071c3\n.text:00000000004071cc\n.text:00000000004071d4\n.text:00000000004071d6\n.text:00000000004071d8\n.text:00000000004071e3\n.text:00000000004071e6\n.text:00000000004071ec\n.text:00000000004071ef\n.text:00000000004071f8\n.text:00000000004071fb\n.text:0000000000407204\n.text:0000000000407207\n.text:0000000000407210\n.text:0000000000407216\n.text:000000000040721a\n.text:0000000000407220\n.text:0000000000407224\n.text:0000000000407228\n.text:000000000040722e\n.text:0000000000407231\n.text:0000000000407235\n.text:000000000040723b\n.text:0000000000407241\n.text:0000000000407244\n.text:0000000000407248\n.text:000000000040724e\n.text:0000000000407251\n.text:0000000000407253\n.text:0000000000407258\n.text:0000000000407260\n.text:0000000000407266\n.text:0000000000407269\n.text:000000000040726b\n.text:000000000040726d\n.text:0000000000407276\n.text:0000000000407279\n.text:000000000040727b\n.text:000000000040727d\n.text:0000000000407280\n.text:0000000000407284\n.text:0000000000407288\n.text:0000000000407290\n.text:0000000000407293\n.text:0000000000407297\n.text:000000000040729b\n.text:00000000004072a1\n.text:00000000004072a6\n.text:00000000004072af\n.text:00000000004072b3\n.text:00000000004072b7\n.text:00000000004072bc\n.text:00000000004072c4\n.text:00000000004072cc\n.text:00000000004072d0\n.text:00000000004072d4\n.text:00000000004072d8\n.text:00000000004072de\n.text:00000000004072e1\n.text:00000000004072e3\n.text:00000000004072e5\n.text:00000000004072ee\n.text:00000000004072f1\n.text:00000000004072f3\n.text:00000000004072f5\n.text:00000000004072f8\n.text:00000000004072fc\n.text:0000000000407301\n.text:0000000000407305\n.text:0000000000407310\n.text:0000000000407313\n.text:0000000000407317\n.text:000000000040731c\n.text:0000000000407322\n.text:0000000000407327\n.text:0000000000407330\n.text:0000000000407334\n.text:0000000000407338\n.text:000000000040733d\n.text:0000000000407342\n.text:000000000040734a\n.text:0000000000407352\n.text:0000000000407356\n.text:000000000040735a\n.text:000000000040735e\n.text:0000000000407361\n.text:0000000000407365\n.text:0000000000407369\n.text:000000000040736f\n.text:0000000000407372\n.text:0000000000407374\n.text:0000000000407376\n.text:000000000040737f\n.text:0000000000407382\n.text:0000000000407384\n.text:0000000000407386\n.text:000000000040738c\n.text:0000000000407391\n.text:000000000040739a\n.text:000000000040739e\n.text:00000000004073a2\n.text:00000000004073a7\n.text:00000000004073ac\n.text:00000000004073b4\n.text:00000000004073bc\n.text:00000000004073c0\n.text:00000000004073c4\n.text:00000000004073c8\n.text:00000000004073cb\n.text:00000000004073ce\n.text:00000000004073d4\n.text:00000000004073d9\n.text:00000000004073dd\n.text:00000000004073de\n.text:00000000004073e0\n.text:00000000004073e2\n.text:00000000004073e4\n.text:00000000004073e6\n.text:00000000004073e7\n.text:00000000004073ec\n.text:00000000004073ee\n.text:00000000004073f3\n.text:00000000004073f8\n.text:00000000004073fa\n.text:00000000004073ff\n.text:0000000000407404\n.text:0000000000407406\n.text:000000000040740b\n.text:0000000000407410\n.text:0000000000407412\n'
p454
tp455
sS'pow'
p456
(S'\n__stdcall pow(double __x, double __y)\n'
p457
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adouble pow(double __x,double __y)\u000a\u000a{\u000a  double dVar1;\u000a  \u000a  dVar1 = (double)(*(code *)PTR_pow_0060d0d8)();\u000a  return dVar1;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x0060d0d8]\n'
p459
S'ff 25 d2 b4 20 00\n'
p460
S'.plt:0000000000401c00\n'
p461
tp462
sS'set_positions'
p463
(S'\n__stdcall set_positions()\n'
p464
V\u000avoid set_positions(void)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  bool bVar3;\u000a  int iVar4;\u000a  int iVar5;\u000a  uint uVar6;\u000a  output_t *poVar7;\u000a  _output *p_Var8;\u000a  uint uVar9;\u000a  name_t nStack72;\u000a  \u000a  uVar9 = 0x8000;\u000a  do {\u000a    if (all_outputs == (output_t *)0x0) {\u000a      uVar6 = 0x8000;\u000a      goto LAB_00406b3a;\u000a    }\u000a    bVar3 = false;\u000a    p_Var8 = (_output *)all_outputs;\u000a    bVar2 = false;\u000a    do {\u000a      bVar1 = bVar2;\u000a      if (((*(byte *)&((output_t *)p_Var8)->changes & 4) == 0) ||\u000a         (bVar1 = bVar2, ((output_t *)p_Var8)->mode_info == (XRRModeInfo *)0x0)) goto LAB_00406abc;\u000a      init_name(&nStack72);\u000a      set_name_string(&nStack72,((output_t *)p_Var8)->relative_to);\u000a      poVar7 = find_output(&nStack72);\u000a      if (poVar7 == (output_t *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        fatal("cannot find output \u005c"%s\u005c"\u005cn",((output_t *)p_Var8)->relative_to);\u000a      }\u000a      if (poVar7->mode_info == (XRRModeInfo *)0x0) {\u000a        *(undefined8 *)&((output_t *)p_Var8)->x = 0;\u000a        goto switchD_004069b0_caseD_5;\u000a      }\u000a      bVar1 = true;\u000a      if ((poVar7->changes & (changes_relation|changes_position)) == changes_relation)\u000a      goto LAB_00406abc;\u000a      switch(((output_t *)p_Var8)->relation) {\u000a      case relation_left_of:\u000a        ((output_t *)p_Var8)->y = poVar7->y;\u000a        iVar5 = poVar7->x;\u000a        iVar4 = mode_width(((output_t *)p_Var8)->mode_info);\u000a        ((output_t *)p_Var8)->x = iVar5 - iVar4;\u000a        break;\u000a      case relation_right_of:\u000a        ((output_t *)p_Var8)->y = poVar7->y;\u000a        iVar5 = poVar7->x;\u000a        iVar4 = mode_width(poVar7->mode_info);\u000a        ((output_t *)p_Var8)->x = iVar4 + iVar5;\u000a        break;\u000a      case relation_above:\u000a        ((output_t *)p_Var8)->x = poVar7->x;\u000a        iVar5 = poVar7->y;\u000a        iVar4 = mode_height(((output_t *)p_Var8)->mode_info);\u000a        ((output_t *)p_Var8)->y = iVar5 - iVar4;\u000a        break;\u000a      case relation_below:\u000a        ((output_t *)p_Var8)->x = poVar7->x;\u000a        iVar4 = poVar7->y;\u000a        iVar5 = mode_height(poVar7->mode_info);\u000a        iVar5 = iVar5 + iVar4;\u000a        goto LAB_00406a9f;\u000a      case relation_same_as:\u000a        ((output_t *)p_Var8)->x = poVar7->x;\u000a        iVar5 = poVar7->y;\u000aLAB_00406a9f:\u000a        ((output_t *)p_Var8)->y = iVar5;\u000a      }\u000aswitchD_004069b0_caseD_5:\u000a      *(byte *)&((output_t *)p_Var8)->changes = *(byte *)&((output_t *)p_Var8)->changes | 8;\u000a      bVar3 = true;\u000a      bVar1 = bVar2;\u000aLAB_00406abc:\u000a      p_Var8 = ((output_t *)p_Var8)->next;\u000a      bVar2 = bVar1;\u000a    } while (p_Var8 != (_output *)0x0);\u000a    if (!bVar1) {\u000a      uVar6 = 0x8000;\u000a      if (all_outputs != (output_t *)0x0) {\u000a        uVar6 = 0x8000;\u000a        uVar9 = 0x8000;\u000a        p_Var8 = (_output *)all_outputs;\u000a        do {\u000a          if (((output_t *)p_Var8)->mode_info != (XRRModeInfo *)0x0) {\u000a            if (((output_t *)p_Var8)->x <= (int)uVar9) {\u000a              uVar9 = ((output_t *)p_Var8)->x;\u000a            }\u000a            if (((output_t *)p_Var8)->y <= (int)uVar6) {\u000a              uVar6 = ((output_t *)p_Var8)->y;\u000a            }\u000a          }\u000a          p_Var8 = ((output_t *)p_Var8)->next;\u000a        } while (p_Var8 != (_output *)0x0);\u000a      }\u000aLAB_00406b3a:\u000a      poVar7 = all_outputs;\u000a      if ((uVar6 | uVar9) != 0) {\u000a        while (poVar7 != (output_t *)0x0) {\u000a          if (poVar7->mode_info != (XRRModeInfo *)0x0) {\u000a            poVar7->x = poVar7->x - uVar9;\u000a            poVar7->y = poVar7->y - uVar6;\u000a            *(byte *)&poVar7->changes = *(byte *)&poVar7->changes | 8;\u000a          }\u000a          poVar7 = (output_t *)poVar7->next;\u000a        }\u000a      }\u000a      return;\u000a    }\u000a    if (!bVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      fatal("loop in relative position specifications\u005cn");\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p465
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x20\nMOV R15,RSP\nMOV R14D,0x8000\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBP,qword ptr [0x0060d3c8]\nTEST RBP,RBP\nJZ 0x00406ae2\nXOR R12D,R12D\nXOR ECX,ECX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV EBX,ECX\nTEST byte ptr [RBP + 0x8],0x4\nJZ 0x00406aba\nCMP qword ptr [0x98 + RBP],0x0\nJZ 0x00406aba\nMOV RDI,R15\nCALL 0x00407b60\nMOV RSI,qword ptr [0xc8 + RBP]\nMOV RDI,R15\nCALL 0x00407b70\nMOV RDI,R15\nCALL 0x004064d0\nTEST RAX,RAX\nJZ 0x00406b82\nCMP qword ptr [0x98 + RAX],0x0\nJZ 0x004069ec\nMOV EDX,dword ptr [RAX + 0x8]\nAND EDX,0xc\nMOV ECX,0x1\nCMP EDX,0x4\nJZ 0x00406abc\nMOV ECX,dword ptr [0xc0 + RBP]\nCMP RCX,0x4\nJA 0x00406ab0\nJMP qword ptr [0x4099f0 + RCX*0x8]\nMOV ECX,dword ptr [0xd4 + RAX]\nMOV dword ptr [0xd4 + RBP],ECX\nMOV R12D,dword ptr [0xd0 + RAX]\nMOV RDI,qword ptr [0x98 + RBP]\nMOVZX ESI,word ptr [0xd8 + RBP]\nCALL 0x00408a50\nSUB R12D,EAX\nMOV dword ptr [0xd0 + RBP],R12D\nJMP 0x00406ab0\nMOV qword ptr [0xd0 + RBP],0x0\nJMP 0x00406ab0\nMOV ECX,dword ptr [0xd4 + RAX]\nMOV dword ptr [0xd4 + RBP],ECX\nMOV R12D,dword ptr [0xd0 + RAX]\nMOV RDI,qword ptr [0x98 + RAX]\nMOVZX ESI,word ptr [0xd8 + RAX]\nCALL 0x00408a50\nADD EAX,R12D\nMOV dword ptr [0xd0 + RBP],EAX\nJMP 0x00406ab0\nMOV ECX,dword ptr [0xd0 + RAX]\nMOV dword ptr [0xd0 + RBP],ECX\nMOV R12D,dword ptr [0xd4 + RAX]\nMOV RDI,qword ptr [0x98 + RBP]\nMOVZX ESI,word ptr [0xd8 + RBP]\nCALL 0x00408a80\nSUB R12D,EAX\nMOV dword ptr [0xd4 + RBP],R12D\nJMP 0x00406ab0\nMOV ECX,dword ptr [0xd0 + RAX]\nMOV dword ptr [0xd0 + RBP],ECX\nMOV R12D,dword ptr [0xd4 + RAX]\nMOV RDI,qword ptr [0x98 + RAX]\nMOVZX ESI,word ptr [0xd8 + RAX]\nCALL 0x00408a80\nADD EAX,R12D\nJMP 0x00406a9f\nMOV ECX,dword ptr [0xd0 + RAX]\nMOV dword ptr [0xd0 + RBP],ECX\nMOV EAX,dword ptr [0xd4 + RAX]\nMOV dword ptr [0xd4 + RBP],EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nOR byte ptr [RBP + 0x8],0x8\nMOV R12D,0x1\nMOV ECX,EBX\nMOV RBP,qword ptr [RBP]\nTEST RBP,RBP\nJNZ 0x00406940\nTEST ECX,ECX\nJZ 0x00406ae9\nTEST R12D,R12D\nJNZ 0x00406920\nMOV EDI,0x40b4c5\nXOR EAX,EAX\nCALL 0x00406410\nMOV EAX,0x8000\nJMP 0x00406b3a\nMOV RCX,qword ptr [0x0060d3c8]\nTEST RCX,RCX\nMOV EAX,0x8000\nJZ 0x00406b3a\nMOV EAX,0x8000\nMOV R14D,0x8000\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [0x98 + RCX],0x0\nJZ 0x00406b32\nMOV EDX,dword ptr [0xd0 + RCX]\nMOV ESI,dword ptr [0xd4 + RCX]\nCMP EDX,R14D\nCMOVLE R14D,EDX\nCMP ESI,EAX\nCMOVLE EAX,ESI\nMOV RCX,qword ptr [RCX]\nTEST RCX,RCX\nJNZ 0x00406b10\nMOV ECX,EAX\nOR ECX,R14D\nJZ 0x00406b75\nMOV RCX,qword ptr [0x0060d3c8]\nTEST RCX,RCX\nJNZ 0x00406b58\nJMP 0x00406b75\nMOV RCX,qword ptr [RCX]\nTEST RCX,RCX\nJZ 0x00406b75\nCMP qword ptr [0x98 + RCX],0x0\nJZ 0x00406b50\nSUB dword ptr [0xd0 + RCX],R14D\nSUB dword ptr [0xd4 + RCX],EAX\nOR byte ptr [RCX + 0x8],0x8\nJMP 0x00406b50\nADD RSP,0x20\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RSI,qword ptr [0xc8 + RBP]\nMOV EDI,0x40a2dd\nXOR EAX,EAX\nCALL 0x00406410\n'
p466
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 20\n49 89 e7\n41 be 00 80 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 2d a1 6a 20 00\n48 85 ed\n0f 84 b2 01 00 00\n45 31 e4\n31 c9\n66 66 2e 0f 1f 84 00 00 00 00 00\n89 cb\nf6 45 08 04\n0f 84 6e 01 00 00\n48 83 bd 98 00 00 00 00\n0f 84 60 01 00 00\n4c 89 ff\ne8 fe 11 00 00\n48 8b b5 c8 00 00 00\n4c 89 ff\ne8 ff 11 00 00\n4c 89 ff\ne8 57 fb ff ff\n48 85 c0\n0f 84 00 02 00 00\n48 83 b8 98 00 00 00 00\n74 60\n8b 50 08\n83 e2 0c\nb9 01 00 00 00\n83 fa 04\n0f 84 1c 01 00 00\n8b 8d c0 00 00 00\n48 83 f9 04\n0f 87 00 01 00 00\nff 24 cd f0 99 40 00\n8b 88 d4 00 00 00\n89 8d d4 00 00 00\n44 8b a0 d0 00 00 00\n48 8b bd 98 00 00 00\n0f b7 b5 d8 00 00 00\ne8 73 20 00 00\n41 29 c4\n44 89 a5 d0 00 00 00\ne9 c4 00 00 00\n48 c7 85 d0 00 00 00 00 00 00 00\ne9 b4 00 00 00\n8b 88 d4 00 00 00\n89 8d d4 00 00 00\n44 8b a0 d0 00 00 00\n48 8b b8 98 00 00 00\n0f b7 b0 d8 00 00 00\ne8 2e 20 00 00\n44 01 e0\n89 85 d0 00 00 00\ne9 80 00 00 00\n8b 88 d0 00 00 00\n89 8d d0 00 00 00\n44 8b a0 d4 00 00 00\n48 8b bd 98 00 00 00\n0f b7 b5 d8 00 00 00\ne8 2a 20 00 00\n41 29 c4\n44 89 a5 d4 00 00 00\neb 4e\n8b 88 d0 00 00 00\n89 8d d0 00 00 00\n44 8b a0 d4 00 00 00\n48 8b b8 98 00 00 00\n0f b7 b0 d8 00 00 00\ne8 f8 1f 00 00\n44 01 e0\neb 12\n8b 88 d0 00 00 00\n89 8d d0 00 00 00\n8b 80 d4 00 00 00\n89 85 d4 00 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n80 4d 08 08\n41 bc 01 00 00 00\n89 d9\n48 8b 6d 00\n48 85 ed\n0f 85 77 fe ff ff\n85 c9\n74 1c\n45 85 e4\n0f 85 4a fe ff ff\nbf c5 b4 40 00\n31 c0\ne8 2e f9 ff ff\nb8 00 80 00 00\neb 51\n48 8b 0d d8 68 20 00\n48 85 c9\nb8 00 80 00 00\n74 40\nb8 00 80 00 00\n41 be 00 80 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 83 b9 98 00 00 00 00\n74 18\n8b 91 d0 00 00 00\n8b b1 d4 00 00 00\n44 39 f2\n44 0f 4e f2\n39 c6\n0f 4e c6\n48 8b 09\n48 85 c9\n75 d6\n89 c1\n44 09 f1\n74 34\n48 8b 0d 80 68 20 00\n48 85 c9\n75 0b\neb 26\n48 8b 09\n48 85 c9\n74 1d\n48 83 b9 98 00 00 00 00\n74 ee\n44 29 b1 d0 00 00 00\n29 81 d4 00 00 00\n80 49 08 08\neb db\n48 83 c4 20\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n48 8b b5 c8 00 00 00\nbf dd a2 40 00\n31 c0\ne8 7b f8 ff ff\n'
p467
S'.text:0000000000406900\n.text:0000000000406901\n.text:0000000000406903\n.text:0000000000406905\n.text:0000000000406907\n.text:0000000000406908\n.text:000000000040690c\n.text:000000000040690f\n.text:0000000000406915\n.text:0000000000406920\n.text:0000000000406927\n.text:000000000040692a\n.text:0000000000406930\n.text:0000000000406933\n.text:0000000000406935\n.text:0000000000406940\n.text:0000000000406942\n.text:0000000000406946\n.text:000000000040694c\n.text:0000000000406954\n.text:000000000040695a\n.text:000000000040695d\n.text:0000000000406962\n.text:0000000000406969\n.text:000000000040696c\n.text:0000000000406971\n.text:0000000000406974\n.text:0000000000406979\n.text:000000000040697c\n.text:0000000000406982\n.text:000000000040698a\n.text:000000000040698c\n.text:000000000040698f\n.text:0000000000406992\n.text:0000000000406997\n.text:000000000040699a\n.text:00000000004069a0\n.text:00000000004069a6\n.text:00000000004069aa\n.text:00000000004069b0\n.text:00000000004069b7\n.text:00000000004069bd\n.text:00000000004069c3\n.text:00000000004069ca\n.text:00000000004069d1\n.text:00000000004069d8\n.text:00000000004069dd\n.text:00000000004069e0\n.text:00000000004069e7\n.text:00000000004069ec\n.text:00000000004069f7\n.text:00000000004069fc\n.text:0000000000406a02\n.text:0000000000406a08\n.text:0000000000406a0f\n.text:0000000000406a16\n.text:0000000000406a1d\n.text:0000000000406a22\n.text:0000000000406a25\n.text:0000000000406a2b\n.text:0000000000406a30\n.text:0000000000406a36\n.text:0000000000406a3c\n.text:0000000000406a43\n.text:0000000000406a4a\n.text:0000000000406a51\n.text:0000000000406a56\n.text:0000000000406a59\n.text:0000000000406a60\n.text:0000000000406a62\n.text:0000000000406a68\n.text:0000000000406a6e\n.text:0000000000406a75\n.text:0000000000406a7c\n.text:0000000000406a83\n.text:0000000000406a88\n.text:0000000000406a8b\n.text:0000000000406a8d\n.text:0000000000406a93\n.text:0000000000406a99\n.text:0000000000406a9f\n.text:0000000000406aa5\n.text:0000000000406ab0\n.text:0000000000406ab4\n.text:0000000000406aba\n.text:0000000000406abc\n.text:0000000000406ac0\n.text:0000000000406ac3\n.text:0000000000406ac9\n.text:0000000000406acb\n.text:0000000000406acd\n.text:0000000000406ad0\n.text:0000000000406ad6\n.text:0000000000406adb\n.text:0000000000406add\n.text:0000000000406ae2\n.text:0000000000406ae7\n.text:0000000000406ae9\n.text:0000000000406af0\n.text:0000000000406af3\n.text:0000000000406af8\n.text:0000000000406afa\n.text:0000000000406aff\n.text:0000000000406b05\n.text:0000000000406b10\n.text:0000000000406b18\n.text:0000000000406b1a\n.text:0000000000406b20\n.text:0000000000406b26\n.text:0000000000406b29\n.text:0000000000406b2d\n.text:0000000000406b2f\n.text:0000000000406b32\n.text:0000000000406b35\n.text:0000000000406b38\n.text:0000000000406b3a\n.text:0000000000406b3c\n.text:0000000000406b3f\n.text:0000000000406b41\n.text:0000000000406b48\n.text:0000000000406b4b\n.text:0000000000406b4d\n.text:0000000000406b50\n.text:0000000000406b53\n.text:0000000000406b56\n.text:0000000000406b58\n.text:0000000000406b60\n.text:0000000000406b62\n.text:0000000000406b69\n.text:0000000000406b6f\n.text:0000000000406b73\n.text:0000000000406b75\n.text:0000000000406b79\n.text:0000000000406b7a\n.text:0000000000406b7c\n.text:0000000000406b7e\n.text:0000000000406b80\n.text:0000000000406b81\n.text:0000000000406b82\n.text:0000000000406b89\n.text:0000000000406b8e\n.text:0000000000406b90\n'
p468
tp469
sS'XRRSetCrtcConfig'
p470
(S'\n__stdcall XRRSetCrtcConfig()\n'
p471
V\u000avoid XRRSetCrtcConfig(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRSetCrtcConfig_0060d170)();\u000a  return;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x0060d170]\n'
p473
S'ff 25 3a b4 20 00\n'
p474
S'.plt:0000000000401d30\n'
p475
tp476
sS'XRRAddOutputMode'
p477
(S'\n__stdcall XRRAddOutputMode()\n'
p478
V\u000avoid XRRAddOutputMode(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRAddOutputMode_0060d180)();\u000a  return;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x0060d180]\n'
p480
S'ff 25 2a b4 20 00\n'
p481
S'.plt:0000000000401d50\n'
p482
tp483
sS'add_output'
p484
(S'\n__stdcall add_output()\n'
p485
V\u000aoutput_t * add_output(void)\u000a\u000a{\u000a  output_t *poVar1;\u000a  \u000a  poVar1 = (output_t *)calloc(1,0x180);\u000a  if (poVar1 != (output_t *)0x0) {\u000a    poVar1->brightness = 1.00000000;\u000a    *all_outputs_tail = poVar1;\u000a    all_outputs_tail = (output_t **)poVar1;\u000a    return poVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  fatal("out of memory\u005cn");\u000a}\u000a\u000a
p486
S'PUSH RAX\nMOV EDI,0x1\nMOV ESI,0x180\nCALL 0x00401c60\nTEST RAX,RAX\nJZ 0x00405da2\nMOV dword ptr [0x174 + RAX],0x3f800000\nMOV RCX,qword ptr [0x0060d2d8]\nMOV qword ptr [RCX],RAX\nMOV qword ptr [0x0060d2d8],RAX\nPOP RCX\nRET\nMOV EDI,0x40a5a6\nXOR EAX,EAX\nCALL 0x00406410\n'
p487
S'50\nbf 01 00 00 00\nbe 80 01 00 00\ne8 e0 be ff ff\n48 85 c0\n74 1d\nc7 80 74 01 00 00 00 00 80 3f\n48 8b 0d 42 75 20 00\n48 89 01\n48 89 05 38 75 20 00\n59\nc3\nbf a6 a5 40 00\n31 c0\ne8 62 06 00 00\n'
p488
S'.text:0000000000405d70\n.text:0000000000405d71\n.text:0000000000405d76\n.text:0000000000405d7b\n.text:0000000000405d80\n.text:0000000000405d83\n.text:0000000000405d85\n.text:0000000000405d8f\n.text:0000000000405d96\n.text:0000000000405d99\n.text:0000000000405da0\n.text:0000000000405da1\n.text:0000000000405da2\n.text:0000000000405da7\n.text:0000000000405da9\n'
p489
tp490
sS'XRRConfigSizes'
p491
(S'\n__stdcall XRRConfigSizes()\n'
p492
V\u000avoid XRRConfigSizes(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRConfigSizes_0060d0d0)();\u000a  return;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x0060d0d0]\n'
p494
S'ff 25 da b4 20 00\n'
p495
S'.plt:0000000000401bf0\n'
p496
tp497
sS'find_output'
p498
(S'\n__stdcall find_output(name_t * name)\n'
p499
V\u000aoutput_t * find_output(name_t *name)\u000a\u000a{\u000a  name_kind_t nVar1;\u000a  int iVar2;\u000a  _output *p_Var3;\u000a  name_kind_t nVar4;\u000a  \u000a  if (all_outputs != (output_t *)0x0) {\u000a    nVar1 = name->kind;\u000a    p_Var3 = (_output *)all_outputs;\u000a    do {\u000a      nVar4 = (((output_t *)p_Var3)->output).kind & nVar1;\u000a      if (((nVar4 & name_xid) != name_none) && (name->xid == (((output_t *)p_Var3)->output).xid)) {\u000a        return (output_t *)p_Var3;\u000a      }\u000a      if (((nVar4 & name_string) != name_none) &&\u000a         (iVar2 = strcmp(name->string,(((output_t *)p_Var3)->output).string), iVar2 == 0)) {\u000a        return (output_t *)p_Var3;\u000a      }\u000a      if (((nVar4 & name_index) != name_none) &&\u000a         (name->index == (((output_t *)p_Var3)->output).index)) {\u000a        return (output_t *)p_Var3;\u000a      }\u000a      p_Var3 = ((output_t *)p_Var3)->next;\u000a    } while (p_Var3 != (_output *)0x0);\u000a  }\u000a  return (output_t *)0x0;\u000a}\u000a\u000a
p500
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RBX,qword ptr [0x0060d3c8]\nTEST RBX,RBX\nJZ 0x00406534\nMOV R15D,dword ptr [R14]\nNOP dword ptr [RAX]\nMOV EBP,dword ptr [RBX + 0x18]\nAND EBP,R15D\nTEST BPL,0x2\nJZ 0x00406506\nMOV RAX,qword ptr [R14 + 0x10]\nCMP RAX,qword ptr [RBX + 0x28]\nJZ 0x00406536\nTEST BPL,0x1\nJZ 0x0040651d\nMOV RDI,qword ptr [R14 + 0x8]\nMOV RSI,qword ptr [RBX + 0x20]\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00406536\nTEST BPL,0x4\nJZ 0x0040652c\nMOV EAX,dword ptr [R14 + 0x18]\nCMP EAX,dword ptr [RBX + 0x30]\nJZ 0x00406536\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nJNZ 0x004064f0\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p501
S'55\n41 57\n41 56\n53\n50\n49 89 fe\n48 8b 1d e7 6e 20 00\n48 85 db\n74 4e\n45 8b 3e\n0f 1f 80 00 00 00 00\n8b 6b 18\n44 21 fd\n40 f6 c5 02\n74 0a\n49 8b 46 10\n48 3b 43 28\n74 30\n40 f6 c5 01\n74 11\n49 8b 7e 08\n48 8b 73 20\ne8 57 b7 ff ff\n85 c0\n74 19\n40 f6 c5 04\n74 09\n41 8b 46 18\n3b 43 30\n74 0a\n48 8b 1b\n48 85 db\n75 bc\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p502
S'.text:00000000004064d0\n.text:00000000004064d1\n.text:00000000004064d3\n.text:00000000004064d5\n.text:00000000004064d6\n.text:00000000004064d7\n.text:00000000004064da\n.text:00000000004064e1\n.text:00000000004064e4\n.text:00000000004064e6\n.text:00000000004064e9\n.text:00000000004064f0\n.text:00000000004064f3\n.text:00000000004064f6\n.text:00000000004064fa\n.text:00000000004064fc\n.text:0000000000406500\n.text:0000000000406504\n.text:0000000000406506\n.text:000000000040650a\n.text:000000000040650c\n.text:0000000000406510\n.text:0000000000406514\n.text:0000000000406519\n.text:000000000040651b\n.text:000000000040651d\n.text:0000000000406521\n.text:0000000000406523\n.text:0000000000406527\n.text:000000000040652a\n.text:000000000040652c\n.text:000000000040652f\n.text:0000000000406532\n.text:0000000000406534\n.text:0000000000406536\n.text:0000000000406539\n.text:000000000040653d\n.text:000000000040653e\n.text:0000000000406540\n.text:0000000000406542\n.text:0000000000406543\n'
p503
tp504
sS'XRRDestroyMode'
p505
(S'\n__stdcall XRRDestroyMode()\n'
p506
V\u000avoid XRRDestroyMode(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRDestroyMode_0060d160)();\u000a  return;\u000a}\u000a\u000a
p507
S'JMP qword ptr [0x0060d160]\n'
p508
S'ff 25 4a b4 20 00\n'
p509
S'.plt:0000000000401d10\n'
p510
tp511
sS'free'
p512
(S'\n__stdcall free(void * __ptr)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060d018)();\u000a  return;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x0060d018]\n'
p515
S'ff 25 92 b5 20 00\n'
p516
S'.plt:0000000000401a80\n'
p517
tp518
sS'set_name_string'
p519
(S'\n__stdcall set_name_string(name_t * name, char * string)\n'
p520
V\u000avoid set_name_string(name_t *name,char *string)\u000a\u000a{\u000a  *(byte *)&name->kind = *(byte *)&name->kind | 1;\u000a  name->string = string;\u000a  return;\u000a}\u000a\u000a
p521
S'OR byte ptr [RDI],0x1\nMOV qword ptr [RDI + 0x8],RSI\nRET\n'
p522
S'80 0f 01\n48 89 77 08\nc3\n'
p523
S'.text:0000000000407b70\n.text:0000000000407b73\n.text:0000000000407b77\n'
p524
tp525
sS'set_screen_size'
p526
(S'\n__stdcall set_screen_size()\n'
p527
V\u000avoid set_screen_size(void)\u000a\u000a{\u000a  _output **pp_Var1;\u000a  XRRPanning *pXVar2;\u000a  uint uVar3;\u000a  _output *p_Var4;\u000a  int iVar5;\u000a  bool bVar6;\u000a  bool bVar7;\u000a  box_t bounds;\u000a  int local_28;\u000a  int local_24;\u000a  \u000a  bVar6 = fb_width == 0;\u000a  bVar7 = fb_height == 0;\u000a  p_Var4 = (_output *)all_outputs;\u000a  if (all_outputs != (output_t *)0x0) {\u000a    do {\u000a      if (((output_t *)p_Var4)->mode_info != (XRRModeInfo *)0x0) {\u000a        mode_geometry(((output_t *)p_Var4)->mode_info,\u000a                      (XTransform *)(ulong)((output_t *)p_Var4)->rotation,\u000a                      (box_t *)&((output_t *)p_Var4)->transform);\u000a        iVar5 = local_28 + ((output_t *)p_Var4)->x;\u000a        if (bVar7 || bVar6) {\u000a          if (fb_width < iVar5) {\u000a            fb_width = iVar5;\u000a          }\u000a          iVar5 = local_24 + ((output_t *)p_Var4)->y;\u000a          if (fb_height < iVar5) {\u000a            fb_height = iVar5;\u000a          }\u000a          if ((*(byte *)((long)&((output_t *)p_Var4)->changes + 1) & 4) == 0) {\u000a            if ((((output_t *)p_Var4)->crtc_info == (crtc_t *)0x0) ||\u000a               (pXVar2 = ((output_t *)p_Var4)->crtc_info->panning_info, pXVar2 == (XRRPanning *)0x0)\u000a               ) goto LAB_00406cf0;\u000a          }\u000a          else {\u000a            pXVar2 = &((output_t *)p_Var4)->panning;\u000a          }\u000a          uVar3 = pXVar2->width + pXVar2->left;\u000a          if ((uint)fb_width < uVar3) {\u000a            fb_width = uVar3;\u000a          }\u000a          uVar3 = pXVar2->height + pXVar2->top;\u000a          if ((uint)fb_height < uVar3) {\u000a            fb_height = uVar3;\u000a          }\u000a        }\u000a        else {\u000a          if ((fb_width < iVar5) || (fb_height < local_24 + ((output_t *)p_Var4)->y)) {\u000a            warning("specified screen %dx%d not large enough for output %s (%dx%d+%d+%d)\u005cn");\u000a          }\u000a        }\u000a      }\u000aLAB_00406cf0:\u000a      pp_Var1 = &((output_t *)p_Var4)->next;\u000a      p_Var4 = *pp_Var1;\u000a    } while (*pp_Var1 != (_output *)0x0);\u000a  }\u000a  if ((maxWidth < fb_width) || (maxHeight < fb_height)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    fatal("screen cannot be larger than %dx%d (desired size %dx%d)\u005cn");\u000a  }\u000a  if (bVar7 || bVar6) {\u000a    if (fb_width < minWidth) {\u000a      fb_width = minWidth;\u000a    }\u000a    if (fb_height < minHeight) {\u000a      fb_height = minHeight;\u000a    }\u000a  }\u000a  else {\u000a    if ((fb_width < minWidth) || (fb_height < minHeight)) {\u000a                    /* WARNING: Subroutine does not return */\u000a      fatal("screen must be at least %dx%d\u005cn");\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p528
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x18\nCMP dword ptr [0x0060d30c],0x0\nSETNZ AL\nCMP dword ptr [0x0060d310],0x0\nSETNZ R15B\nAND R15B,AL\nMOV RBX,qword ptr [0x0060d3c8]\nTEST RBX,RBX\nJZ 0x00406cfc\nLEA R14,[RSP + 0x8]\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [0x98 + RBX]\nTEST RDI,RDI\nJZ 0x00406cf0\nLEA RDX,[0x128 + RBX]\nMOVZX ESI,word ptr [0xd8 + RBX]\nMOV RCX,R14\nCALL 0x00408ab0\nMOV EBP,dword ptr [0xd0 + RBX]\nMOV R10D,dword ptr [0xd4 + RBX]\nMOV R8D,dword ptr [RSP + 0x10]\nMOV R9D,dword ptr [RSP + 0x14]\nLEA EDI,[R8 + RBP*0x1]\nMOV ESI,dword ptr [0x0060d30c]\nMOV EDX,dword ptr [0x0060d310]\nTEST R15B,R15B\nJZ 0x00406c80\nMOV ECX,dword ptr [RSP + 0x8]\nMOV EAX,dword ptr [RSP + 0xc]\nCMP EDI,ESI\nJG 0x00406c4a\nLEA EDI,[R9 + R10*0x1]\nCMP EDI,EDX\nJLE 0x00406cf0\nADD EBP,ECX\nADD R10D,EAX\nSUB R8D,ECX\nSUB R9D,EAX\nMOV RCX,qword ptr [RBX + 0x20]\nMOV EDI,0x40b4ef\nMOV EAX,0x0\nPUSH R10\nPUSH RBP\nCALL 0x00408150\nADD RSP,0x10\nJMP 0x00406cf0\nCMP EDI,ESI\nJLE 0x00406c8a\nMOV dword ptr [0x0060d30c],EDI\nADD R9D,R10D\nCMP R9D,EDX\nJLE 0x00406c99\nMOV dword ptr [0x0060d310],R9D\nTEST byte ptr [RBX + 0x9],0x4\nJNZ 0x00406cb3\nMOV RAX,qword ptr [RBX + 0x60]\nTEST RAX,RAX\nJZ 0x00406cf0\nMOV RAX,qword ptr [RAX + 0x38]\nTEST RAX,RAX\nJNZ 0x00406cba\nJMP 0x00406cf0\nLEA RAX,[0xe0 + RBX]\nMOV ECX,dword ptr [RAX + 0x10]\nADD ECX,dword ptr [RAX + 0x8]\nCMP ECX,dword ptr [0x0060d30c]\nJBE 0x00406cce\nMOV dword ptr [0x0060d30c],ECX\nMOV ECX,dword ptr [RAX + 0x14]\nADD ECX,dword ptr [RAX + 0xc]\nCMP ECX,dword ptr [0x0060d310]\nJBE 0x00406cf0\nMOV dword ptr [0x0060d310],ECX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nJNZ 0x00406be0\nMOV ECX,dword ptr [0x0060d30c]\nMOV ESI,dword ptr [0x0060d3e0]\nCMP ECX,ESI\nMOV EDX,dword ptr [0x0060d3e4]\nMOV R8D,dword ptr [0x0060d310]\nJG 0x00406d67\nCMP R8D,EDX\nJG 0x00406d67\nMOV ESI,dword ptr [0x0060d3d8]\nMOV EDX,dword ptr [0x0060d3dc]\nTEST R15B,R15B\nJZ 0x00406d44\nCMP ECX,ESI\nJL 0x00406d38\nCMP R8D,EDX\nJGE 0x00406d5c\nMOV EDI,0x40b56d\nXOR EAX,EAX\nCALL 0x00406410\nCMP ECX,ESI\nJGE 0x00406d4e\nMOV dword ptr [0x0060d30c],ESI\nCMP dword ptr [0x0060d310],EDX\nJGE 0x00406d5c\nMOV dword ptr [0x0060d310],EDX\nADD RSP,0x18\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40b534\nXOR EAX,EAX\nCALL 0x00406410\n'
p529
S'55\n41 57\n41 56\n53\n48 83 ec 18\n83 3d 5b 67 20 00 00\n0f 95 c0\n83 3d 55 67 20 00 00\n41 0f 95 c7\n41 20 c7\n48 8b 1d ff 67 20 00\n48 85 db\n0f 84 2a 01 00 00\n4c 8d 74 24 08\n66 0f 1f 84 00 00 00 00 00\n48 8b bb 98 00 00 00\n48 85 ff\n0f 84 00 01 00 00\n48 8d 93 28 01 00 00\n0f b7 b3 d8 00 00 00\n4c 89 f1\ne8 aa 1e 00 00\n8b ab d0 00 00 00\n44 8b 93 d4 00 00 00\n44 8b 44 24 10\n44 8b 4c 24 14\n41 8d 3c 28\n8b 35 e5 66 20 00\n8b 15 e3 66 20 00\n45 84 ff\n74 4e\n8b 4c 24 08\n8b 44 24 0c\n39 f7\n7f 0c\n43 8d 3c 11\n39 d7\n0f 8e a6 00 00 00\n01 cd\n41 01 c2\n41 29 c8\n41 29 c1\n48 8b 4b 20\nbf ef b4 40 00\nb8 00 00 00 00\n41 52\n55\ne8 e5 14 00 00\n48 83 c4 10\neb 7f\n39 f7\n7e 06\n89 3d 82 66 20 00\n45 01 d1\n41 39 d1\n7e 07\n44 89 0d 77 66 20 00\nf6 43 09 04\n75 14\n48 8b 43 60\n48 85 c0\n74 48\n48 8b 40 38\n48 85 c0\n75 09\neb 3d\n48 8d 83 e0 00 00 00\n8b 48 10\n03 48 08\n3b 0d 46 66 20 00\n76 06\n89 0d 3e 66 20 00\n8b 48 14\n03 48 0c\n3b 0d 36 66 20 00\n76 14\n89 0d 2e 66 20 00\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 1b\n48 85 db\n0f 85 e4 fe ff ff\n8b 0d 0a 66 20 00\n8b 35 d8 66 20 00\n39 f1\n8b 15 d4 66 20 00\n44 8b 05 f9 65 20 00\n7f 4e\n41 39 d0\n7f 49\n8b 35 b4 66 20 00\n8b 15 b2 66 20 00\n45 84 ff\n74 15\n39 f1\n7c 05\n41 39 d0\n7d 24\nbf 6d b5 40 00\n31 c0\ne8 cc f6 ff ff\n39 f1\n7d 06\n89 35 be 65 20 00\n39 15 bc 65 20 00\n7d 06\n89 15 b4 65 20 00\n48 83 c4 18\n5b\n41 5e\n41 5f\n5d\nc3\nbf 34 b5 40 00\n31 c0\ne8 9d f6 ff ff\n'
p530
S'.text:0000000000406ba0\n.text:0000000000406ba1\n.text:0000000000406ba3\n.text:0000000000406ba5\n.text:0000000000406ba6\n.text:0000000000406baa\n.text:0000000000406bb1\n.text:0000000000406bb4\n.text:0000000000406bbb\n.text:0000000000406bbf\n.text:0000000000406bc2\n.text:0000000000406bc9\n.text:0000000000406bcc\n.text:0000000000406bd2\n.text:0000000000406bd7\n.text:0000000000406be0\n.text:0000000000406be7\n.text:0000000000406bea\n.text:0000000000406bf0\n.text:0000000000406bf7\n.text:0000000000406bfe\n.text:0000000000406c01\n.text:0000000000406c06\n.text:0000000000406c0c\n.text:0000000000406c13\n.text:0000000000406c18\n.text:0000000000406c1d\n.text:0000000000406c21\n.text:0000000000406c27\n.text:0000000000406c2d\n.text:0000000000406c30\n.text:0000000000406c32\n.text:0000000000406c36\n.text:0000000000406c3a\n.text:0000000000406c3c\n.text:0000000000406c3e\n.text:0000000000406c42\n.text:0000000000406c44\n.text:0000000000406c4a\n.text:0000000000406c4c\n.text:0000000000406c4f\n.text:0000000000406c52\n.text:0000000000406c55\n.text:0000000000406c59\n.text:0000000000406c5e\n.text:0000000000406c63\n.text:0000000000406c65\n.text:0000000000406c66\n.text:0000000000406c6b\n.text:0000000000406c6f\n.text:0000000000406c80\n.text:0000000000406c82\n.text:0000000000406c84\n.text:0000000000406c8a\n.text:0000000000406c8d\n.text:0000000000406c90\n.text:0000000000406c92\n.text:0000000000406c99\n.text:0000000000406c9d\n.text:0000000000406c9f\n.text:0000000000406ca3\n.text:0000000000406ca6\n.text:0000000000406ca8\n.text:0000000000406cac\n.text:0000000000406caf\n.text:0000000000406cb1\n.text:0000000000406cb3\n.text:0000000000406cba\n.text:0000000000406cbd\n.text:0000000000406cc0\n.text:0000000000406cc6\n.text:0000000000406cc8\n.text:0000000000406cce\n.text:0000000000406cd1\n.text:0000000000406cd4\n.text:0000000000406cda\n.text:0000000000406cdc\n.text:0000000000406ce2\n.text:0000000000406cf0\n.text:0000000000406cf3\n.text:0000000000406cf6\n.text:0000000000406cfc\n.text:0000000000406d02\n.text:0000000000406d08\n.text:0000000000406d0a\n.text:0000000000406d10\n.text:0000000000406d17\n.text:0000000000406d19\n.text:0000000000406d1c\n.text:0000000000406d1e\n.text:0000000000406d24\n.text:0000000000406d2a\n.text:0000000000406d2d\n.text:0000000000406d2f\n.text:0000000000406d31\n.text:0000000000406d33\n.text:0000000000406d36\n.text:0000000000406d38\n.text:0000000000406d3d\n.text:0000000000406d3f\n.text:0000000000406d44\n.text:0000000000406d46\n.text:0000000000406d48\n.text:0000000000406d4e\n.text:0000000000406d54\n.text:0000000000406d56\n.text:0000000000406d5c\n.text:0000000000406d60\n.text:0000000000406d61\n.text:0000000000406d63\n.text:0000000000406d65\n.text:0000000000406d66\n.text:0000000000406d67\n.text:0000000000406d6c\n.text:0000000000406d6e\n'
p531
tp532
sS'set_transform'
p533
(S'\n__stdcall set_transform(transform_t * dest, XTransform * transform, char * filter, XFixed * params)\n'
p534
V\u000avoid set_transform(transform_t *dest,XTransform *transform,char *filter,XFixed *params)\u000a\u000a{\u000a  XFixed XVar1;\u000a  XFixed XVar2;\u000a  XFixed XVar3;\u000a  XFixed XVar4;\u000a  XFixed XVar5;\u000a  XFixed XVar6;\u000a  XFixed XVar7;\u000a  char *pcVar8;\u000a  XFixed *pXVar9;\u000a  int in_R8D;\u000a  \u000a  (dest->transform).matrix[8] = transform->matrix[8];\u000a  XVar1 = transform->matrix[0];\u000a  XVar2 = transform->matrix[1];\u000a  XVar4 = transform->matrix[2];\u000a  XVar6 = transform->matrix[3];\u000a  XVar3 = transform->matrix[5];\u000a  XVar5 = transform->matrix[6];\u000a  XVar7 = transform->matrix[7];\u000a  (dest->transform).matrix[4] = transform->matrix[4];\u000a  (dest->transform).matrix[5] = XVar3;\u000a  (dest->transform).matrix[6] = XVar5;\u000a  (dest->transform).matrix[7] = XVar7;\u000a  (dest->transform).matrix[0] = XVar1;\u000a  (dest->transform).matrix[1] = XVar2;\u000a  (dest->transform).matrix[2] = XVar4;\u000a  (dest->transform).matrix[3] = XVar6;\u000a  pcVar8 = (char *)__strdup(filter);\u000a  dest->filter = pcVar8;\u000a  dest->nparams = in_R8D;\u000a  pXVar9 = (XFixed *)malloc((long)in_R8D << 2);\u000a  dest->params = pXVar9;\u000a  (*(code *)PTR_memcpy_0060d148)(pXVar9,params,(long)in_R8D << 2);\u000a  return;\u000a}\u000a\u000a
p535
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EBP,R8D\nMOV R14,RCX\nMOV RBX,RDI\nMOV EAX,dword ptr [RSI + 0x20]\nMOV dword ptr [RBX + 0x20],EAX\nMOVUPS XMM0,xmmword ptr [RSI]\nMOVUPS XMM1,xmmword ptr [RSI + 0x10]\nMOVUPS xmmword ptr [RBX + 0x10],XMM1\nMOVUPS xmmword ptr [RBX],XMM0\nMOV RDI,RDX\nCALL 0x00401c30\nMOV qword ptr [RBX + 0x28],RAX\nMOV dword ptr [RBX + 0x30],EBP\nMOVSXD RBP,EBP\nSHL RBP,0x2\nMOV RDI,RBP\nCALL 0x00401d70\nMOV qword ptr [RBX + 0x38],RAX\nMOV RDI,RAX\nMOV RSI,R14\nMOV RDX,RBP\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401ce0\n'
p536
S'55\n41 56\n53\n44 89 c5\n49 89 ce\n48 89 fb\n8b 46 20\n89 43 20\n0f 10 06\n0f 10 4e 10\n0f 11 4b 10\n0f 11 03\n48 89 d7\ne8 77 a0 ff ff\n48 89 43 28\n89 6b 30\n48 63 ed\n48 c1 e5 02\n48 89 ef\ne8 a1 a1 ff ff\n48 89 43 38\n48 89 c7\n4c 89 f6\n48 89 ea\n5b\n41 5e\n5d\ne9 fb a0 ff ff\n'
p537
S'.text:0000000000407b90\n.text:0000000000407b91\n.text:0000000000407b93\n.text:0000000000407b94\n.text:0000000000407b97\n.text:0000000000407b9a\n.text:0000000000407b9d\n.text:0000000000407ba0\n.text:0000000000407ba3\n.text:0000000000407ba6\n.text:0000000000407baa\n.text:0000000000407bae\n.text:0000000000407bb1\n.text:0000000000407bb4\n.text:0000000000407bb9\n.text:0000000000407bbd\n.text:0000000000407bc0\n.text:0000000000407bc3\n.text:0000000000407bc7\n.text:0000000000407bca\n.text:0000000000407bcf\n.text:0000000000407bd3\n.text:0000000000407bd6\n.text:0000000000407bd9\n.text:0000000000407bdc\n.text:0000000000407bdd\n.text:0000000000407bdf\n.text:0000000000407be0\n'
p538
tp539
sS'transform_point'
p540
(S'\n__stdcall transform_point()\n'
p541
V\u000aint transform_point(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  double dVar3;\u000a  int iVar4;\u000a  int *piVar5;\u000a  undefined8 *in_RDX;\u000a  undefined8 *in_RSI;\u000a  int *in_RDI;\u000a  long lVar6;\u000a  double dVar7;\u000a  double dVar8;\u000a  double vector [3];\u000a  double result [3];\u000a  \u000a  dVar8 = DAT_00409918;\u000a  uVar1 = *in_RSI;\u000a  uVar2 = *in_RDX;\u000a  lVar6 = 0;\u000a  do {\u000a    dVar7 = 0.00000000;\u000a    _iVar4 = 0;\u000a    piVar5 = in_RDI;\u000a    do {\u000a      dVar7 = dVar7 + (double)*piVar5 * dVar8 * vector[_iVar4];\u000a      _iVar4 = _iVar4 + 1;\u000a      iVar4 = (int)_iVar4;\u000a      piVar5 = piVar5 + 1;\u000a    } while (_iVar4 != 3);\u000a    result[lVar6] = dVar7;\u000a    dVar3 = DAT_00409950;\u000a    dVar7 = DAT_00409948;\u000a    lVar6 = lVar6 + 1;\u000a    in_RDI = in_RDI + 3;\u000a  } while (lVar6 != 3);\u000a  if (result[2] != 0.00000000) {\u000a    lVar6 = 0;\u000a    do {\u000a      dVar8 = result[lVar6] / result[2];\u000a      vector[lVar6] = dVar8;\u000a      if (dVar7 < dVar8) {\u000a        return (int)lVar6;\u000a      }\u000a      if (dVar8 < dVar3) {\u000a        return (int)lVar6;\u000a      }\u000a      lVar6 = lVar6 + 1;\u000a    } while (lVar6 < 2);\u000a    *in_RSI = uVar1;\u000a    iVar4 = (int)uVar2;\u000a    *in_RDX = uVar2;\u000a  }\u000a  return iVar4;\u000a}\u000a\u000a
p542
S'MOV RAX,qword ptr [RSI]\nMOV qword ptr [RSP + -0x38],RAX\nMOV RAX,qword ptr [RDX]\nMOV qword ptr [RSP + -0x30],RAX\nMOV RAX,0x3ff0000000000000\nMOV qword ptr [RSP + -0x28],RAX\nXOR R8D,R8D\nMOVSD XMM0,qword ptr [0x00409918]\nNOP word ptr [RAX + RAX*0x1]\nXORPD XMM1,XMM1\nMOV RCX,RDI\nXOR EAX,EAX\nNOP dword ptr [RAX]\nXORPS XMM2,XMM2\nCVTSI2SD XMM2,dword ptr [RCX]\nMULSD XMM2,XMM0\nMULSD XMM2,qword ptr [RSP + RAX*0x8 + -0x38]\nADDSD XMM1,XMM2\nINC RAX\nADD RCX,0x4\nCMP RAX,0x3\nJNZ 0x00408c80\nMOVSD qword ptr [RSP + R8*0x8 + -0x18],XMM1\nINC R8\nADD RDI,0xc\nCMP R8,0x3\nJNZ 0x00408c70\nMOVSD XMM0,qword ptr [RSP + -0x8]\nXORPD XMM1,XMM1\nUCOMISD XMM0,XMM1\nJNZ 0x00408cc8\nJNP 0x00408d15\nMOVSD XMM0,qword ptr [RSP + -0x8]\nXOR EAX,EAX\nMOVSD XMM1,qword ptr [0x00409948]\nMOVSD XMM2,qword ptr [0x00409950]\nMOVSD XMM3,qword ptr [RSP + RAX*0x8 + -0x18]\nDIVSD XMM3,XMM0\nMOVSD qword ptr [RSP + RAX*0x8 + -0x38],XMM3\nUCOMISD XMM3,XMM1\nJA 0x00408d15\nUCOMISD XMM2,XMM3\nJA 0x00408d15\nINC RAX\nCMP RAX,0x1\nJLE 0x00408ce0\nMOV RAX,qword ptr [RSP + -0x38]\nMOV qword ptr [RSI],RAX\nMOV RAX,qword ptr [RSP + -0x30]\nMOV qword ptr [RDX],RAX\nRET\n'
p543
S'48 8b 06\n48 89 44 24 c8\n48 8b 02\n48 89 44 24 d0\n48 b8 00 00 00 00 00 00 f0 3f\n48 89 44 24 d8\n45 31 c0\nf2 0f 10 05 ae 0c 00 00\n66 0f 1f 44 00 00\n66 0f 57 c9\n48 89 f9\n31 c0\n0f 1f 80 00 00 00 00\n0f 57 d2\nf2 0f 2a 11\nf2 0f 59 d0\nf2 0f 59 54 c4 c8\nf2 0f 58 ca\n48 ff c0\n48 83 c1 04\n48 83 f8 03\n75 de\nf2 42 0f 11 4c c4 e8\n49 ff c0\n48 83 c7 0c\n49 83 f8 03\n75 ba\nf2 0f 10 44 24 f8\n66 0f 57 c9\n66 0f 2e c1\n75 02\n7b 4d\nf2 0f 10 44 24 f8\n31 c0\nf2 0f 10 0d 70 0c 00 00\nf2 0f 10 15 70 0c 00 00\nf2 0f 10 5c c4 e8\nf2 0f 5e d8\nf2 0f 11 5c c4 c8\n66 0f 2e d9\n77 1f\n66 0f 2e d3\n77 19\n48 ff c0\n48 83 f8 01\n7e db\n48 8b 44 24 c8\n48 89 06\n48 8b 44 24 d0\n48 89 02\nc3\n'
p544
S'.text:0000000000408c40\n.text:0000000000408c43\n.text:0000000000408c48\n.text:0000000000408c4b\n.text:0000000000408c50\n.text:0000000000408c5a\n.text:0000000000408c5f\n.text:0000000000408c62\n.text:0000000000408c6a\n.text:0000000000408c70\n.text:0000000000408c74\n.text:0000000000408c77\n.text:0000000000408c79\n.text:0000000000408c80\n.text:0000000000408c83\n.text:0000000000408c87\n.text:0000000000408c8b\n.text:0000000000408c91\n.text:0000000000408c95\n.text:0000000000408c98\n.text:0000000000408c9c\n.text:0000000000408ca0\n.text:0000000000408ca2\n.text:0000000000408ca9\n.text:0000000000408cac\n.text:0000000000408cb0\n.text:0000000000408cb4\n.text:0000000000408cb6\n.text:0000000000408cbc\n.text:0000000000408cc0\n.text:0000000000408cc4\n.text:0000000000408cc6\n.text:0000000000408cc8\n.text:0000000000408cce\n.text:0000000000408cd0\n.text:0000000000408cd8\n.text:0000000000408ce0\n.text:0000000000408ce6\n.text:0000000000408cea\n.text:0000000000408cf0\n.text:0000000000408cf4\n.text:0000000000408cf6\n.text:0000000000408cfa\n.text:0000000000408cfc\n.text:0000000000408cff\n.text:0000000000408d03\n.text:0000000000408d05\n.text:0000000000408d0a\n.text:0000000000408d0d\n.text:0000000000408d12\n.text:0000000000408d15\n'
p545
tp546
sS'malloc'
p547
(S'\n__stdcall malloc(size_t __size)\n'
p548
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060d190)();\u000a  return pvVar1;\u000a}\u000a\u000a
p549
S'JMP qword ptr [0x0060d190]\n'
p550
S'ff 25 1a b4 20 00\n'
p551
S'.plt:0000000000401d70\n'
p552
tp553
sS'XRRUpdateConfiguration'
p554
(S'\n__stdcall XRRUpdateConfiguration()\n'
p555
V\u000avoid XRRUpdateConfiguration(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRUpdateConfiguration_0060d0a0)();\u000a  return;\u000a}\u000a\u000a
p556
S'JMP qword ptr [0x0060d0a0]\n'
p557
S'ff 25 0a b5 20 00\n'
p558
S'.plt:0000000000401b90\n'
p559
tp560
sS'XRRConfigRates'
p561
(S'\n__stdcall XRRConfigRates()\n'
p562
V\u000avoid XRRConfigRates(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRConfigRates_0060d220)();\u000a  return;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x0060d220]\n'
p564
S'ff 25 8a b3 20 00\n'
p565
S'.plt:0000000000401e90\n'
p566
tp567
sS'XRRChangeOutputProperty'
p568
(S'\n__stdcall XRRChangeOutputProperty()\n'
p569
V\u000avoid XRRChangeOutputProperty(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRChangeOutputProperty_0060d270)();\u000a  return;\u000a}\u000a\u000a
p570
S'JMP qword ptr [0x0060d270]\n'
p571
S'ff 25 3a b3 20 00\n'
p572
S'.plt:0000000000401f30\n'
p573
tp574
sS'XRRGetScreenResources'
p575
(S'\n__stdcall XRRGetScreenResources()\n'
p576
V\u000avoid XRRGetScreenResources(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetScreenResources_0060d0c8)();\u000a  return;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x0060d0c8]\n'
p578
S'ff 25 e2 b4 20 00\n'
p579
S'.plt:0000000000401be0\n'
p580
tp581
sS'fprintf'
p582
(S'\n__stdcall fprintf(FILE * __stream, char * __format)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fprintf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fprintf_0060d128)();\u000a  return iVar1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x0060d128]\n'
p585
S'ff 25 82 b4 20 00\n'
p586
S'.plt:0000000000401ca0\n'
p587
tp588
sS'puts'
p589
(S'\n__stdcall puts(char * __s)\n'
p590
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint puts(char *__s)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_puts_0060d058)();\u000a  return iVar1;\u000a}\u000a\u000a
p591
S'JMP qword ptr [0x0060d058]\n'
p592
S'ff 25 52 b5 20 00\n'
p593
S'.plt:0000000000401b00\n'
p594
tp595
sS'XInternAtom'
p596
(S'\n__stdcall XInternAtom()\n'
p597
V\u000avoid XInternAtom(void)\u000a\u000a{\u000a  (*(code *)PTR_XInternAtom_0060d1a0)();\u000a  return;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x0060d1a0]\n'
p599
S'ff 25 0a b4 20 00\n'
p600
S'.plt:0000000000401d90\n'
p601
tp602
sS'set_name_xid'
p603
(S'\n__stdcall set_name_xid(name_t * name, XID xid)\n'
p604
V\u000avoid set_name_xid(name_t *name,XID xid)\u000a\u000a{\u000a  *(byte *)&name->kind = *(byte *)&name->kind | 2;\u000a  name->xid = xid;\u000a  return;\u000a}\u000a\u000a
p605
S'OR byte ptr [RDI],0x2\nMOV qword ptr [RDI + 0x10],RSI\nRET\n'
p606
S'80 0f 02\n48 89 77 10\nc3\n'
p607
S'.text:0000000000405eb0\n.text:0000000000405eb3\n.text:0000000000405eb7\n'
p608
tp609
sS'XGrabServer'
p610
(S'\n__stdcall XGrabServer()\n'
p611
V\u000avoid XGrabServer(void)\u000a\u000a{\u000a  (*(code *)PTR_XGrabServer_0060d1e8)();\u000a  return;\u000a}\u000a\u000a
p612
S'JMP qword ptr [0x0060d1e8]\n'
p613
S'ff 25 c2 b3 20 00\n'
p614
S'.plt:0000000000401e20\n'
p615
tp616
sS'crtc_can_use_rotation'
p617
(S'\n__stdcall crtc_can_use_rotation(crtc_t * crtc)\n'
p618
V\u000aint crtc_can_use_rotation(crtc_t *crtc)\u000a\u000a{\u000a  ushort uVar1;\u000a  int iVar2;\u000a  ushort in_SI;\u000a  \u000a  uVar1 = crtc->crtc_info->rotations;\u000a  if (((in_SI & uVar1 & 0xf) == 0) || (iVar2 = 1, (uVar1 & in_SI & 0x30) != (in_SI & 0x30))) {\u000a    iVar2 = 0;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p619
S'MOV RAX,qword ptr [RDI + 0x28]\nMOVZX ECX,word ptr [RAX + 0x30]\nMOV EAX,ESI\nAND EAX,ECX\nTEST AL,0xf\nJZ 0x004089bf\nAND ESI,0x30\nAND ECX,ESI\nMOV EAX,0x1\nCMP CX,SI\nJZ 0x004089c1\nXOR EAX,EAX\nRET\n'
p620
S'48 8b 47 28\n0f b7 48 30\n89 f0\n21 c8\na8 0f\n74 0f\n83 e6 30\n21 f1\nb8 01 00 00 00\n66 39 f1\n74 02\n31 c0\nc3\n'
p621
S'.text:00000000004089a0\n.text:00000000004089a4\n.text:00000000004089a8\n.text:00000000004089aa\n.text:00000000004089ac\n.text:00000000004089ae\n.text:00000000004089b0\n.text:00000000004089b3\n.text:00000000004089b5\n.text:00000000004089ba\n.text:00000000004089bd\n.text:00000000004089bf\n.text:00000000004089c1\n'
p622
tp623
sS'find_crtc'
p624
(S'\n__stdcall find_crtc(name_t * name)\n'
p625
V\u000acrtc_t * find_crtc(name_t *name)\u000a\u000a{\u000a  name_kind_t nVar1;\u000a  crtc_t *pcVar2;\u000a  int iVar3;\u000a  crtc_t *pcVar4;\u000a  long lVar5;\u000a  long lVar6;\u000a  name_kind_t nVar7;\u000a  \u000a  pcVar2 = crtcs;\u000a  if (0 < num_crtcs) {\u000a    nVar1 = name->kind;\u000a    lVar5 = (long)num_crtcs;\u000a    lVar6 = 0;\u000a    pcVar4 = crtcs;\u000a    do {\u000a      nVar7 = (pcVar4->crtc).kind & nVar1;\u000a      if (((nVar7 & name_xid) != name_none) && (name->xid == (pcVar4->crtc).xid)) {\u000a        return pcVar2 + lVar6;\u000a      }\u000a      if (((nVar7 & name_string) != name_none) &&\u000a         (iVar3 = strcmp(name->string,(pcVar4->crtc).string), iVar3 == 0)) {\u000a        return pcVar2 + lVar6;\u000a      }\u000a      if (((nVar7 & name_index) != name_none) && (name->index == (pcVar4->crtc).index)) {\u000a        return pcVar4;\u000a      }\u000a      lVar6 = lVar6 + 1;\u000a      pcVar4 = pcVar4 + 1;\u000a    } while (lVar6 < lVar5);\u000a  }\u000a  return (crtc_t *)0x0;\u000a}\u000a\u000a
p626
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RDI\nCMP dword ptr [0x0060d3fc],0x0\nJLE 0x004082af\nMOV R14,qword ptr [0x0060d400]\nMOV ECX,dword ptr [R15]\nMOVSXD RSI,dword ptr [0x0060d3fc]\nMOV RBP,R14\nXOR R12D,R12D\nMOV dword ptr [RSP + 0xc],ECX\nMOV qword ptr [RSP + 0x10],RSI\nNOP\nIMUL RBX,R12,0xe0\nADD RBX,R14\nMOV R13D,dword ptr [RBP]\nAND R13D,ECX\nTEST R13B,0x2\nJZ 0x00408271\nMOV RAX,qword ptr [R15 + 0x10]\nCMP RAX,qword ptr [RBP + 0x10]\nJZ 0x004082b1\nTEST R13B,0x1\nJZ 0x00408291\nMOV RDI,qword ptr [R15 + 0x8]\nMOV RSI,qword ptr [RBP + 0x8]\nCALL 0x00401c70\nMOV RSI,qword ptr [RSP + 0x10]\nMOV ECX,dword ptr [RSP + 0xc]\nTEST EAX,EAX\nJZ 0x004082b1\nTEST R13B,0x4\nJZ 0x004082a0\nMOV EAX,dword ptr [R15 + 0x18]\nCMP EAX,dword ptr [RBP + 0x18]\nJZ 0x004082c3\nINC R12\nADD RBP,0xe0\nCMP R12,RSI\nJL 0x00408250\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RBX,RBP\nJMP 0x004082b1\n'
p627
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 ff\n83 3d d4 51 20 00 00\n0f 8e 81 00 00 00\n4c 8b 35 cb 51 20 00\n41 8b 0f\n48 63 35 bd 51 20 00\n4c 89 f5\n45 31 e4\n89 4c 24 0c\n48 89 74 24 10\n66 90\n49 69 dc e0 00 00 00\n4c 01 f3\n44 8b 6d 00\n41 21 cd\n41 f6 c5 02\n74 0a\n49 8b 47 10\n48 3b 45 10\n74 40\n41 f6 c5 01\n74 1a\n49 8b 7f 08\n48 8b 75 08\ne8 ec 99 ff ff\n48 8b 74 24 10\n8b 4c 24 0c\n85 c0\n74 20\n41 f6 c5 04\n74 09\n41 8b 47 18\n3b 45 18\n74 23\n49 ff c4\n48 81 c5 e0 00 00 00\n49 39 f4\n7c a1\n31 db\n48 89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 89 eb\neb e9\n'
p628
S'.text:0000000000408210\n.text:0000000000408211\n.text:0000000000408213\n.text:0000000000408215\n.text:0000000000408217\n.text:0000000000408219\n.text:000000000040821a\n.text:000000000040821e\n.text:0000000000408221\n.text:0000000000408228\n.text:000000000040822e\n.text:0000000000408235\n.text:0000000000408238\n.text:000000000040823f\n.text:0000000000408242\n.text:0000000000408245\n.text:0000000000408249\n.text:000000000040824e\n.text:0000000000408250\n.text:0000000000408257\n.text:000000000040825a\n.text:000000000040825e\n.text:0000000000408261\n.text:0000000000408265\n.text:0000000000408267\n.text:000000000040826b\n.text:000000000040826f\n.text:0000000000408271\n.text:0000000000408275\n.text:0000000000408277\n.text:000000000040827b\n.text:000000000040827f\n.text:0000000000408284\n.text:0000000000408289\n.text:000000000040828d\n.text:000000000040828f\n.text:0000000000408291\n.text:0000000000408295\n.text:0000000000408297\n.text:000000000040829b\n.text:000000000040829e\n.text:00000000004082a0\n.text:00000000004082a3\n.text:00000000004082aa\n.text:00000000004082ad\n.text:00000000004082af\n.text:00000000004082b1\n.text:00000000004082b4\n.text:00000000004082b8\n.text:00000000004082b9\n.text:00000000004082bb\n.text:00000000004082bd\n.text:00000000004082bf\n.text:00000000004082c1\n.text:00000000004082c2\n.text:00000000004082c3\n.text:00000000004082c6\n'
p629
tp630
sS'mode_refresh'
p631
(S'\n__stdcall mode_refresh(XRRModeInfo * mode_info)\n'
p632
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000adouble mode_refresh(XRRModeInfo *mode_info)\u000a\u000a{\u000a  undefined auVar1 [12];\u000a  double dVar2;\u000a  double dVar3;\u000a  undefined auVar4 [16];\u000a  \u000a  dVar3 = (double)(ulong)mode_info->vTotal;\u000a  if ((mode_info->modeFlags & 0x20) != 0) {\u000a    dVar3 = dVar3 + dVar3;\u000a  }\u000a  if ((mode_info->modeFlags & 0x10) != 0) {\u000a    dVar3 = dVar3 * _DAT_00409930;\u000a  }\u000a  dVar2 = 0.00000000;\u000a  if ((mode_info->hTotal != 0) && (dVar3 != 0.00000000)) {\u000a    auVar1 = ZEXT812(mode_info->dotClock) & (undefined  [12])0xffffffffffffffff;\u000a    auVar4 = subpd(CONCAT88(SUB168(CONCAT412(DAT_00409964,auVar1 | (undefined  [12])0x0 << 0x40) >>\u000a                                   0x40,0),CONCAT44(DAT_00409960,SUB124(auVar1,0))),_DAT_00409970);\u000a    auVar4 = addpd(CONCAT412(SUB164(auVar4 >> 0x20,0),\u000a                             CONCAT48(SUB164(auVar4,0),SUB168(auVar4 >> 0x40,0))) &\u000a                   (undefined  [16])0xffffffffffffffff,auVar4);\u000a    dVar2 = SUB168(auVar4,0) / ((double)(ulong)mode_info->hTotal * dVar3);\u000a  }\u000a  return dVar2;\u000a}\u000a\u000a
p633
S'MOV EAX,dword ptr [RDI + 0x20]\nMOV ECX,dword ptr [RDI + 0x30]\nCVTSI2SD XMM1,RCX\nMOV RCX,qword ptr [RDI + 0x48]\nTEST CL,0x20\nJZ 0x00407ae8\nADDSD XMM1,XMM1\nTEST CL,0x10\nJZ 0x00407af5\nMULSD XMM1,qword ptr [0x00409930]\nXORPD XMM0,XMM0\nTEST EAX,EAX\nJZ 0x00407b39\nXORPD XMM2,XMM2\nUCOMISD XMM1,XMM2\nJNZ 0x00407b09\nJNP 0x00407b39\nMOVQ XMM2,qword ptr [RDI + 0x10]\nPUNPCKLDQ XMM2,xmmword ptr [0x00409960]\nSUBPD XMM2,xmmword ptr [0x00409970]\nPSHUFD XMM0,XMM2,0x4e\nADDPD XMM0,XMM2\nMOV EAX,EAX\nXORPS XMM2,XMM2\nCVTSI2SD XMM2,RAX\nMULSD XMM2,XMM1\nDIVSD XMM0,XMM2\nRET\n'
p634
S'8b 47 20\n8b 4f 30\nf2 48 0f 2a c9\n48 8b 4f 48\nf6 c1 20\n74 04\nf2 0f 58 c9\nf6 c1 10\n74 08\nf2 0f 59 0d 3b 1e 00 00\n66 0f 57 c0\n85 c0\n74 3c\n66 0f 57 d2\n66 0f 2e ca\n75 02\n7b 30\nf3 0f 7e 57 10\n66 0f 62 15 4a 1e 00 00\n66 0f 5c 15 52 1e 00 00\n66 0f 70 c2 4e\n66 0f 58 c2\n89 c0\n0f 57 d2\nf2 48 0f 2a d0\nf2 0f 59 d1\nf2 0f 5e c2\nc3\n'
p635
S'.text:0000000000407ad0\n.text:0000000000407ad3\n.text:0000000000407ad6\n.text:0000000000407adb\n.text:0000000000407adf\n.text:0000000000407ae2\n.text:0000000000407ae4\n.text:0000000000407ae8\n.text:0000000000407aeb\n.text:0000000000407aed\n.text:0000000000407af5\n.text:0000000000407af9\n.text:0000000000407afb\n.text:0000000000407afd\n.text:0000000000407b01\n.text:0000000000407b05\n.text:0000000000407b07\n.text:0000000000407b09\n.text:0000000000407b0e\n.text:0000000000407b16\n.text:0000000000407b1e\n.text:0000000000407b23\n.text:0000000000407b27\n.text:0000000000407b29\n.text:0000000000407b2c\n.text:0000000000407b31\n.text:0000000000407b35\n.text:0000000000407b39\n'
p636
tp637
sS'_init'
p638
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p639
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060cff8;\u000a  if (PTR___gmon_start___0060cff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060cff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p640
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060cff8]\nTEST RAX,RAX\nJZ 0x00401a62\nCALL RAX\nADD RSP,0x8\nRET\n'
p641
S'48 83 ec 08\n48 8b 05 9d b5 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p642
S'.init:0000000000401a50\n.init:0000000000401a54\n.init:0000000000401a5b\n.init:0000000000401a5e\n.init:0000000000401a60\n.init:0000000000401a62\n.init:0000000000401a66\n'
p643
tp644
sS'rotation_name'
p645
(S'\n__stdcall rotation_name()\n'
p646
V\u000achar * rotation_name(void)\u000a\u000a{\u000a  long lVar1;\u000a  uint in_EDI;\u000a  \u000a  if ((in_EDI & 0xf) == 0) {\u000a    return "normal";\u000a  }\u000a  lVar1 = 0;\u000a  do {\u000a    if ((in_EDI >> ((uint)lVar1 & 0x1f) & 1) != 0) {\u000a      return direction[lVar1];\u000a    }\u000a    lVar1 = lVar1 + 1;\u000a  } while ((int)lVar1 < 4);\u000a  return "invalid rotation";\u000a}\u000a\u000a
p647
S'TEST DIL,0xf\nJZ 0x004076be\nXOR ECX,ECX\nMOV EAX,0x40b76e\nNOP dword ptr [RAX]\nBT EDI,ECX\nJC 0x004076c4\nINC RCX\nCMP ECX,0x4\nJL 0x004076b0\nRET\nMOV EAX,0x40b1ac\nRET\nMOV RAX,qword ptr [0x409aa0 + RCX*0x8]\nRET\n'
p648
S'40 f6 c7 0f\n74 18\n31 c9\nb8 6e b7 40 00\n0f 1f 00\n0f a3 cf\n72 0f\n48 ff c1\n83 f9 04\n7c f3\nc3\nb8 ac b1 40 00\nc3\n48 8b 04 cd a0 9a 40 00\nc3\n'
p649
S'.text:00000000004076a0\n.text:00000000004076a4\n.text:00000000004076a6\n.text:00000000004076a8\n.text:00000000004076ad\n.text:00000000004076b0\n.text:00000000004076b3\n.text:00000000004076b5\n.text:00000000004076b8\n.text:00000000004076bb\n.text:00000000004076bd\n.text:00000000004076be\n.text:00000000004076c3\n.text:00000000004076c4\n.text:00000000004076cc\n'
p650
tp651
sS'screen_apply'
p652
(S'\n__stdcall screen_apply()\n'
p653
V\u000avoid screen_apply(void)\u000a\u000a{\u000a  Screen *pSVar1;\u000a  long lVar2;\u000a  \u000a  pSVar1 = dpy->screens;\u000a  lVar2 = (long)screen;\u000a  if ((((fb_width != pSVar1[lVar2].width) || (fb_height != pSVar1[lVar2].height)) ||\u000a      (fb_width_mm != pSVar1[lVar2].mwidth)) || (fb_height_mm != pSVar1[lVar2].mheight)) {\u000a    if (verbose == 1) {\u000a      printf((char *)dpi,"screen %d: %dx%d %dx%d mm %6.2fdpi\u005cn",(ulong)(uint)screen,\u000a             (ulong)(uint)fb_width,(ulong)(uint)fb_height,(ulong)(uint)fb_width_mm,\u000a             (ulong)(uint)fb_height_mm,pSVar1);\u000a    }\u000a    if (dryrun == 0) {\u000a      (*(code *)PTR_XRRSetScreenSize_0060d0f8)\u000a                (dpy,root,(ulong)(uint)fb_width,(ulong)(uint)fb_height,(ulong)(uint)fb_width_mm,\u000a                 (ulong)(uint)fb_height_mm);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p654
S'MOV EDX,dword ptr [0x0060d30c]\nMOV RAX,qword ptr [0x0060d3a8]\nMOV RAX,qword ptr [0xe8 + RAX]\nMOVSXD RCX,dword ptr [0x0060d2d0]\nSHL RCX,0x7\nCMP EDX,dword ptr [RAX + RCX*0x1 + 0x18]\nJNZ 0x00409299\nMOV EDX,dword ptr [0x0060d310]\nCMP EDX,dword ptr [RAX + RCX*0x1 + 0x1c]\nJNZ 0x00409299\nMOV EDX,dword ptr [0x0060d314]\nCMP EDX,dword ptr [RAX + RCX*0x1 + 0x20]\nJNZ 0x00409299\nMOV EDX,dword ptr [0x0060d318]\nCMP EDX,dword ptr [RAX + RCX*0x1 + 0x24]\nJZ 0x004092e5\nCMP byte ptr [0x0060d2f8],0x1\nJNZ 0x004092db\nPUSH RAX\nMOV ESI,dword ptr [0x0060d2d0]\nMOV EDX,dword ptr [0x0060d30c]\nMOV ECX,dword ptr [0x0060d310]\nMOV R8D,dword ptr [0x0060d314]\nMOV R9D,dword ptr [0x0060d318]\nMOVSD XMM0,qword ptr [0x0060d320]\nMOV EDI,0x40b6db\nMOV AL,0x1\nCALL 0x00401bb0\nADD RSP,0x8\nMOV AL,byte ptr [0x0060d2fc]\nTEST AL,AL\nJZ 0x004092e6\nRET\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nMOV EDX,dword ptr [0x0060d30c]\nMOV ECX,dword ptr [0x0060d310]\nMOV R8D,dword ptr [0x0060d314]\nMOV R9D,dword ptr [0x0060d318]\nJMP 0x00401c40\n'
p655
S'8b 15 b6 40 20 00\n48 8b 05 4b 41 20 00\n48 8b 80 e8 00 00 00\n48 63 0d 65 40 20 00\n48 c1 e1 07\n3b 54 08 18\n75 24\n8b 15 95 40 20 00\n3b 54 08 1c\n75 18\n8b 15 8d 40 20 00\n3b 54 08 20\n75 0c\n8b 15 85 40 20 00\n3b 54 08 24\n74 4c\n80 3d 58 40 20 00 01\n75 39\n50\n8b 35 27 40 20 00\n8b 15 5d 40 20 00\n8b 0d 5b 40 20 00\n44 8b 05 58 40 20 00\n44 8b 0d 55 40 20 00\nf2 0f 10 05 55 40 20 00\nbf db b6 40 00\nb0 01\ne8 d9 88 ff ff\n48 83 c4 08\n8a 05 1b 40 20 00\n84 c0\n74 01\nc3\n48 8b 3d bb 40 20 00\n48 8b 35 bc 40 20 00\n8b 15 12 40 20 00\n8b 0d 10 40 20 00\n44 8b 05 0d 40 20 00\n44 8b 0d 0a 40 20 00\ne9 2d 89 ff ff\n'
p656
S'.text:0000000000409250\n.text:0000000000409256\n.text:000000000040925d\n.text:0000000000409264\n.text:000000000040926b\n.text:000000000040926f\n.text:0000000000409273\n.text:0000000000409275\n.text:000000000040927b\n.text:000000000040927f\n.text:0000000000409281\n.text:0000000000409287\n.text:000000000040928b\n.text:000000000040928d\n.text:0000000000409293\n.text:0000000000409297\n.text:0000000000409299\n.text:00000000004092a0\n.text:00000000004092a2\n.text:00000000004092a3\n.text:00000000004092a9\n.text:00000000004092af\n.text:00000000004092b5\n.text:00000000004092bc\n.text:00000000004092c3\n.text:00000000004092cb\n.text:00000000004092d0\n.text:00000000004092d2\n.text:00000000004092d7\n.text:00000000004092db\n.text:00000000004092e1\n.text:00000000004092e3\n.text:00000000004092e5\n.text:00000000004092e6\n.text:00000000004092ed\n.text:00000000004092f4\n.text:00000000004092fa\n.text:0000000000409300\n.text:0000000000409307\n.text:000000000040930e\n'
p657
tp658
sS'XRRFreeMonitors'
p659
(S'\n__stdcall XRRFreeMonitors()\n'
p660
V\u000avoid XRRFreeMonitors(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRFreeMonitors_0060d218)();\u000a  return;\u000a}\u000a\u000a
p661
S'JMP qword ptr [0x0060d218]\n'
p662
S'ff 25 92 b3 20 00\n'
p663
S'.plt:0000000000401e80\n'
p664
tp665
sS'main'
p666
(S'\n__stdcall main(char * * argv)\n'
p667
V\u000a/* WARNING: Removing unreachable block (ram,0x00402aac) */\u000a/* WARNING: Removing unreachable block (ram,0x0040472b) */\u000a/* WARNING: Removing unreachable block (ram,0x00402ab8) */\u000a/* WARNING: Type propagation algorithm not settling */\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint main(char **argv)\u000a\u000a{\u000a  byte *pbVar1;\u000a  ulong *puVar2;\u000a  float fVar3;\u000a  uint uVar4;\u000a  uint uVar5;\u000a  umonitor_t *puVar6;\u000a  _umode *p_Var7;\u000a  _output *output;\u000a  XRROutputInfo *pXVar8;\u000a  XRRPanning *pXVar9;\u000a  Screen *pSVar10;\u000a  _umonitor *p_Var11;\u000a  XRRProviderInfo *pXVar12;\u000a  bool bVar13;\u000a  bool bVar14;\u000a  FILE *__stream;\u000a  Rotation RVar15;\u000a  ushort uVar16;\u000a  short sVar17;\u000a  int iVar18;\u000a  int __c;\u000a  output_prop_t *poVar19;\u000a  char **__ptr;\u000a  void *pvVar20;\u000a  void *__ptr_00;\u000a  size_t sVar21;\u000a  undefined8 uVar22;\u000a  provider_t *ppVar23;\u000a  provider_t *ppVar24;\u000a  output_t *poVar25;\u000a  crtc_t *pcVar26;\u000a  XRRModeInfo *mode;\u000a  XRRModeInfo *mode_info;\u000a  undefined8 *puVar27;\u000a  Atom type;\u000a  char *__s2;\u000a  XRRMonitorInfo *pXVar28;\u000a  umonitor_t **ppuVar29;\u000a  ulong uVar30;\u000a  long lVar31;\u000a  ulong uVar32;\u000a  XID XVar33;\u000a  char *format;\u000a  byte bVar34;\u000a  int iVar35;\u000a  umode_t *puVar36;\u000a  char **__s;\u000a  XRRCrtcInfo *pXVar37;\u000a  undefined *puVar38;\u000a  uint uVar39;\u000a  transform_t *ptVar40;\u000a  long lVar41;\u000a  char **in_RSI;\u000a  undefined *puVar42;\u000a  uint *puVar43;\u000a  transform_t *transform;\u000a  long lVar44;\u000a  ulong uVar45;\u000a  uint uVar46;\u000a  int iVar47;\u000a  long lVar48;\u000a  bool bVar49;\u000a  double dVar50;\u000a  FILE *__stream_00;\u000a  undefined auVar51 [16];\u000a  XRRScreenSize *sizes;\u000a  SizeID current_size;\u000a  uchar *prop_data;\u000a  int nprop;\u000a  int minor;\u000a  ulong nitems;\u000a  ulong bytes_after;\u000a  int event_base;\u000a  int error_base;\u000a  XEvent event;\u000a  undefined8 uVar52;\u000a  FILE *local_208;\u000a  output_t *local_1f0;\u000a  uint local_1e8;\u000a  char *local_1e0;\u000a  uint local_1d8;\u000a  uint local_1c8;\u000a  undefined4 uStack452;\u000a  uint local_1c0;\u000a  uint local_1bc;\u000a  ushort local_1b8;\u000a  undefined2 uStack438;\u000a  undefined4 uStack436;\u000a  int local_1ac;\u000a  int local_1a8;\u000a  uint local_1a4;\u000a  int local_1a0;\u000a  int local_19c;\u000a  uint local_198;\u000a  int local_194;\u000a  undefined8 local_190;\u000a  int local_188 [2];\u000a  uint local_180;\u000a  undefined4 uStack380;\u000a  int local_178;\u000a  uint local_174;\u000a  uint local_170;\u000a  int local_16c;\u000a  int local_168;\u000a  uint local_164;\u000a  uint local_160;\u000a  uint local_15c;\u000a  ulong local_158;\u000a  int local_150;\u000a  int local_14c;\u000a  undefined8 local_148;\u000a  int local_13c;\u000a  long local_138;\u000a  uint *local_130;\u000a  uint *local_128;\u000a  int *local_120;\u000a  uint *local_118;\u000a  uint *local_110;\u000a  long local_108;\u000a  undefined local_fc [4];\u000a  char *local_f8;\u000a  undefined local_f0 [8];\u000a  undefined local_e8 [8];\u000a  undefined local_e0 [8];\u000a  uint local_d8 [2];\u000a  uint local_d0 [2];\u000a  undefined8 local_c8;\u000a  undefined8 local_c0;\u000a  ushort local_b8;\u000a  ushort local_b6;\u000a  ushort local_b4;\u000a  uint local_b0;\u000a  uint local_ac;\u000a  uint local_a8;\u000a  uint local_a4;\u000a  \u000a  __c = (int)argv;\u000a  local_15c = 0;\u000a  local_160 = 0;\u000a  program_name = *in_RSI;\u000a  if (__c < 2) {\u000a    uVar45 = 0xffffffff;\u000a    local_148 = 0;\u000a    local_16c = 0;\u000a    local_1a4 = 0;\u000a    local_170 = 0;\u000a    local_174 = 0;\u000a    local_190 = (ulong)local_190._4_4_ << 0x20;\u000a    local_1a0 = 0;\u000a    local_19c = 0;\u000a    local_178 = 0;\u000a    local_1c0 = 0;\u000a    local_198 = 0;\u000a    bVar14 = false;\u000a    local_1a8 = 0;\u000a    local_1e8 = 0;\u000a    local_168 = 0;\u000a    local_1ac = 0;\u000a    bVar13 = false;\u000a    local_1e0 = (char *)0x0;\u000a    bVar49 = false;\u000a    local_1d8 = 0;\u000a    local_158 = 0xffffffff;\u000a    __stream_00 = DAT_004098e8;\u000a  }\u000a  else {\u000a    local_108 = (long)__c;\u000a    iVar47 = 1;\u000a    local_158 = 0xffffffff;\u000a    local_1d8 = 0;\u000a    bVar49 = false;\u000a    local_1e0 = (char *)0x0;\u000a    uVar45 = 0xffffffff;\u000a    bVar13 = false;\u000a    local_1ac = 0;\u000a    local_168 = 0;\u000a    local_1f0 = (output_t *)0x0;\u000a    local_1e8 = 0;\u000a    local_1a8 = 0;\u000a    bVar14 = false;\u000a    local_198 = 0;\u000a    local_1c0 = 0;\u000a    local_178 = 0;\u000a    local_19c = 0;\u000a    local_1a0 = 0;\u000a    local_190 = (ulong)local_190._4_4_ << 0x20;\u000a    local_174 = 0;\u000a    local_170 = 0;\u000a    local_1a4 = 0;\u000a    local_16c = 0;\u000a    local_148 = 0;\u000a    __stream_00 = DAT_004098e8;\u000a    do {\u000a      lVar44 = (long)iVar47;\u000a      __s2 = in_RSI[lVar44];\u000a      iVar18 = strcmp("-display",__s2);\u000a      if (((iVar18 == 0) || (iVar18 = strcmp("--display",__s2), iVar18 == 0)) ||\u000a         ((*__s2 == '-' && ((__s2[1] == 'd' && (__s2[2] == 0)))))) {\u000a        iVar47 = iVar47 + 1;\u000a        if (__c <= iVar47) goto LAB_0040592e;\u000a        local_1e0 = in_RSI[(long)iVar47];\u000a      }\u000a      else {\u000a        __s2 = in_RSI[lVar44];\u000a        iVar18 = strcmp("-help",__s2);\u000a        if ((iVar18 == 0) || (iVar18 = strcmp("--help",__s2), iVar18 == 0)) {\u000a          usage();\u000a                    /* WARNING: Subroutine does not return */\u000a          exit(0);\u000a        }\u000a        iVar18 = strcmp("--verbose",__s2);\u000a        if (iVar18 == 0) {\u000a          verbose = 1;\u000a        }\u000a        else {\u000a          iVar18 = strcmp("--dryrun",__s2);\u000a          if (iVar18 == 0) {\u000a            dryrun = 1;\u000a            verbose = 1;\u000a          }\u000a          else {\u000a            iVar18 = strcmp("--nograb",__s2);\u000a            if (iVar18 == 0) {\u000a              grab_server = 1;\u000a            }\u000a            else {\u000a              iVar18 = strcmp("--current",__s2);\u000a              if (iVar18 != 0) {\u000a                if (((*__s2 == '-') && (__s2[1] == 's')) && (__s2[2] == 0)) {\u000aLAB_00402238:\u000a                  iVar47 = iVar47 + 1;\u000a                  if (iVar47 < __c) {\u000a                    iVar18 = __isoc99_sscanf(in_RSI[(long)iVar47],"%dx%d",&local_15c);\u000a                    bVar13 = true;\u000a                    if (iVar18 == 2) {\u000a                      local_168 = 1;\u000a                      bVar49 = true;\u000a                    }\u000a                    else {\u000a                      uVar46 = check_strtol(in_RSI[(long)iVar47]);\u000a                      uVar45 = (ulong)uVar46;\u000a                      bVar49 = true;\u000a                      if ((int)uVar46 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a                        argerr("--size argument must be nonnegative\u005cn");\u000a                      }\u000a                    }\u000a                    goto LAB_0040395e;\u000a                  }\u000a                }\u000a                else {\u000a                  __s2 = in_RSI[lVar44];\u000a                  iVar18 = strcmp("--size",__s2);\u000a                  if (iVar18 == 0) goto LAB_00402238;\u000a                  if (((*__s2 == '-') && (__s2[1] == 'r')) && (__s2[2] == 0)) {\u000aLAB_0040228d:\u000a                    iVar47 = iVar47 + 1;\u000a                    if (iVar47 < __c) {\u000a                      __stream_00 = (FILE *)check_strtod(in_RSI[(long)iVar47]);\u000a                      if (local_1f0 == (output_t *)0x0) {\u000a                        bVar13 = true;\u000a                        local_1f0 = (output_t *)0x0;\u000a                        bVar49 = true;\u000a                      }\u000a                      else {\u000a                        *(FILE **)&local_1f0->refresh = __stream_00;\u000a                        *(byte *)&local_1f0->changes = *(byte *)&local_1f0->changes | 0x80;\u000a                        local_1e8 = 1;\u000aLAB_004022c4:\u000a                        bVar13 = true;\u000a                        bVar49 = true;\u000a                      }\u000a                      goto LAB_0040395e;\u000a                    }\u000a                  }\u000a                  else {\u000a                    __s2 = in_RSI[lVar44];\u000a                    iVar18 = strcmp("--rate",__s2);\u000a                    if ((iVar18 == 0) || (iVar18 = strcmp("--refresh",__s2), iVar18 == 0))\u000a                    goto LAB_0040228d;\u000a                    if ((*__s2 == '-') && ((__s2[1] == 'v' && (__s2[2] == 0)))) {\u000aLAB_0040231d:\u000a                      local_1ac = 1;\u000a                      bVar49 = true;\u000a                      goto LAB_0040395e;\u000a                    }\u000a                    __s2 = in_RSI[lVar44];\u000a                    iVar18 = strcmp("--version",__s2);\u000a                    if (iVar18 == 0) goto LAB_0040231d;\u000a                    if (((*__s2 == '-') && (__s2[1] == 'x')) && (__s2[2] == 0)) {\u000a                      local_16c = 1;\u000a                      goto LAB_004022c4;\u000a                    }\u000a                    __s2 = in_RSI[lVar44];\u000a                    if (((*__s2 == '-') && (__s2[1] == 'y')) && (__s2[2] == 0)) {\u000a                      local_148 = 1;\u000a                      goto LAB_004022c4;\u000a                    }\u000a                    __s2 = in_RSI[lVar44];\u000a                    iVar18 = strcmp("--screen",__s2);\u000a                    if (iVar18 == 0) {\u000a                      iVar47 = iVar47 + 1;\u000a                      if (__c <= iVar47) goto LAB_00405a41;\u000a                      screen = check_strtol(in_RSI[(long)iVar47]);\u000a                      if (screen < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a                        argerr("--screen argument must be nonnegative\u005cn");\u000a                      }\u000a                      goto LAB_0040395e;\u000a                    }\u000a                    if (((*__s2 == '-') && (__s2[1] == 'q')) && (__s2[2] == 0)) {\u000aLAB_00402363:\u000a                      local_1d8 = 1;\u000a                      goto LAB_0040395e;\u000a                    }\u000a                    __s2 = in_RSI[lVar44];\u000a                    iVar18 = strcmp("--query",__s2);\u000a                    if (iVar18 == 0) goto LAB_00402363;\u000a                    if (((*__s2 == '-') && (__s2[1] == 'o')) && (__s2[2] == 0)) {\u000aLAB_0040238c:\u000a                      iVar47 = iVar47 + 1;\u000a                      if (iVar47 < __c) {\u000a                        lVar41 = (long)iVar47;\u000a                        uVar32 = strtol(in_RSI[lVar41],&local_f8,10);\u000a                        if (in_RSI[lVar41] == local_f8) {\u000a                          __s2 = in_RSI[lVar41];\u000a                          uVar32 = 0;\u000a                          while (iVar18 = strcmp(direction[uVar32],__s2), iVar18 != 0) {\u000a                            uVar32 = uVar32 + 1;\u000a                            if (3 < (long)uVar32) goto LAB_00405a26;\u000a                          }\u000a                        }\u000a                        if (3 < (uint)uVar32) {\u000aLAB_00405a26:\u000a                          __s2 = in_RSI[lVar44];\u000aLAB_00405a30:\u000a                          format = in_RSI[lVar41];\u000aLAB_00405a35:\u000a                    /* WARNING: Subroutine does not return */\u000a                          argerr("%s: invalid argument \u005c'%s\u005c'\u005cn",__s2,format);\u000a                        }\u000a                        bVar13 = true;\u000a                        local_158 = uVar32;\u000aLAB_00402433:\u000a                        bVar49 = true;\u000a                        goto LAB_0040395e;\u000a                      }\u000a                    }\u000a                    else {\u000a                      __s2 = in_RSI[lVar44];\u000a                      iVar18 = strcmp("--orientation",__s2);\u000a                      if (iVar18 == 0) goto LAB_0040238c;\u000a                      iVar18 = strcmp("--prop",__s2);\u000a                      if (((iVar18 == 0) || (iVar18 = strcmp("--props",__s2), iVar18 == 0)) ||\u000a                         ((iVar18 = strcmp("--madprops",__s2), iVar18 == 0 ||\u000a                          (iVar18 = strcmp("--properties",__s2), iVar18 == 0)))) {\u000a                        properties = 1;\u000a                        local_1a8 = 1;\u000a                        bVar49 = true;\u000a                        goto LAB_0040395e;\u000a                      }\u000a                      iVar18 = strcmp("--output",__s2);\u000a                      if (iVar18 == 0) {\u000a                        iVar47 = iVar47 + 1;\u000a                        if (__c <= iVar47) goto LAB_00405a41;\u000a                        local_1f0 = find_output_by_name(in_RSI[(long)iVar47]);\u000a                        local_1e8 = 1;\u000a                        if (local_1f0 == (output_t *)0x0) {\u000a                          local_1f0 = add_output();\u000a                          set_name(&local_1f0->output,in_RSI[(long)iVar47]);\u000a                          bVar49 = true;\u000a                        }\u000a                        else {\u000a                          bVar49 = true;\u000a                        }\u000a                        goto LAB_0040395e;\u000a                      }\u000a                      iVar18 = strcmp("--crtc",__s2);\u000a                      if (iVar18 == 0) {\u000a                        if (local_1f0 == (output_t *)0x0) goto LAB_00405b21;\u000a                        iVar47 = iVar47 + 1;\u000a                        if (__c <= iVar47) goto LAB_00405933;\u000a                        set_name(&local_1f0->crtc,in_RSI[(long)iVar47]);\u000a                        *(byte *)&local_1f0->changes = *(byte *)&local_1f0->changes | 1;\u000a                        goto LAB_0040395e;\u000a                      }\u000a                      iVar18 = strcmp("--mode",__s2);\u000a                      if (iVar18 == 0) {\u000a                        if (local_1f0 == (output_t *)0x0) goto LAB_00405b21;\u000a                        iVar47 = iVar47 + 1;\u000a                        if (__c <= iVar47) goto LAB_00405933;\u000a                        set_name(&local_1f0->mode,in_RSI[(long)iVar47]);\u000a                        *(byte *)&local_1f0->changes = *(byte *)&local_1f0->changes | 2;\u000a                        goto LAB_0040395e;\u000a                      }\u000a                      iVar18 = strcmp("--preferred",__s2);\u000a                      if (iVar18 == 0) {\u000a                        if (local_1f0 == (output_t *)0x0) goto LAB_00405b21;\u000a                        set_name_preferred(&local_1f0->mode);\u000a                        *(byte *)&local_1f0->changes = *(byte *)&local_1f0->changes | 2;\u000a                        goto LAB_0040395e;\u000a                      }\u000a                      iVar18 = strcmp("--pos",__s2);\u000a                      if (iVar18 == 0) {\u000a                        if (local_1f0 == (output_t *)0x0) goto LAB_00405b21;\u000a                        iVar47 = iVar47 + 1;\u000a                        if (__c <= iVar47) goto LAB_00405933;\u000a                        iVar18 = __isoc99_sscanf(in_RSI[(long)iVar47],"%dx%d",&local_1f0->x);\u000a                        if (iVar18 != 2) {\u000a                    /* WARNING: Subroutine does not return */\u000a                          argerr("failed to parse \u005c'%s\u005c' as a position\u005cn",in_RSI[(long)iVar47]);\u000a                        }\u000a                        *(byte *)&local_1f0->changes = *(byte *)&local_1f0->changes | 8;\u000a                        goto LAB_0040395e;\u000a                      }\u000a                      iVar18 = strcmp("--rotation",__s2);\u000a                      if ((iVar18 != 0) && (iVar18 = strcmp("--rotate",__s2), iVar18 != 0)) {\u000a                        iVar18 = strcmp("--reflect",__s2);\u000a                        if ((iVar18 == 0) || (iVar18 = strcmp("--reflection",__s2), iVar18 == 0)) {\u000a                          if (local_1f0 == (output_t *)0x0) goto LAB_00405b1c;\u000a                          iVar47 = iVar47 + 1;\u000a                          if (__c <= iVar47) goto LAB_0040592e;\u000a                          __s2 = in_RSI[(long)iVar47];\u000a                          lVar41 = 0;\u000a                          do {\u000a                            iVar35 = (int)lVar41;\u000a                            iVar18 = strcmp(reflections[lVar41],__s2);\u000a                            if (iVar18 == 0) goto LAB_0040266d;\u000a                            lVar41 = lVar41 + 1;\u000a                            iVar35 = (int)lVar41;\u000a                          } while (lVar41 < 4);\u000a                          if (iVar35 == 4) {\u000a                            __s2 = in_RSI[lVar44];\u000a                            format = in_RSI[(long)iVar47];\u000a                            goto LAB_00405a35;\u000a                          }\u000aLAB_0040266d:\u000a                          local_1f0->rotation = (ushort)(iVar35 << 4) | local_1f0->rotation & 0xffcf\u000a                          ;\u000a                          *(byte *)&local_1f0->changes = *(byte *)&local_1f0->changes | 0x20;\u000a                          goto LAB_0040395e;\u000a                        }\u000a                        iVar18 = strcmp("--left-of",__s2);\u000a                        if (iVar18 == 0) {\u000a                          if (local_1f0 == (output_t *)0x0) {\u000aLAB_00405b3e:\u000a                            format = "%s must be used after --output\u005cn";\u000a                            goto LAB_00405a46;\u000a                          }\u000a                          if (iVar47 + 1 < __c) {\u000a                            local_1f0->relation = relation_left_of;\u000aLAB_00402776:\u000a                            iVar47 = iVar47 + 1;\u000a                            local_1f0->relative_to = in_RSI[(long)iVar47];\u000a                            *(byte *)&local_1f0->changes = *(byte *)&local_1f0->changes | 4;\u000a                            goto LAB_0040395e;\u000a                          }\u000aLAB_00405a41:\u000a                          format = "%s requires an argument\u005cn";\u000aLAB_00405a46:\u000a                    /* WARNING: Subroutine does not return */\u000a                          argerr(format,__s2);\u000a                        }\u000a                        iVar18 = strcmp("--right-of",__s2);\u000a                        if (iVar18 == 0) {\u000a                          if (local_1f0 == (output_t *)0x0) goto LAB_00405b3e;\u000a                          if (iVar47 + 1 < __c) {\u000a                            local_1f0->relation = relation_right_of;\u000a                            goto LAB_00402776;\u000a                          }\u000a                          goto LAB_00405a41;\u000a                        }\u000a                        iVar18 = strcmp("--above",__s2);\u000a                        if (iVar18 == 0) {\u000a                          if (local_1f0 == (output_t *)0x0) goto LAB_00405b3e;\u000a                          if (iVar47 + 1 < __c) {\u000a                            local_1f0->relation = relation_above;\u000a                            goto LAB_00402776;\u000a                          }\u000a                          goto LAB_00405a41;\u000a                        }\u000a                        iVar18 = strcmp("--below",__s2);\u000a                        if (iVar18 == 0) {\u000a                          if (local_1f0 == (output_t *)0x0) goto LAB_00405b3e;\u000a                          if (iVar47 + 1 < __c) {\u000a                            local_1f0->relation = relation_below;\u000a                            goto LAB_00402776;\u000a                          }\u000a                          goto LAB_00405a41;\u000a                        }\u000a                        iVar18 = strcmp("--same-as",__s2);\u000a                        if (iVar18 == 0) {\u000a                          if (local_1f0 == (output_t *)0x0) goto LAB_00405b3e;\u000a                          if (iVar47 + 1 < __c) {\u000a                            local_1f0->relation = relation_same_as;\u000a                            goto LAB_00402776;\u000a                          }\u000a                          goto LAB_00405a41;\u000a                        }\u000a                        iVar18 = strcmp("--panning",__s2);\u000a                        if (iVar18 == 0) {\u000a                          if (local_1f0 == (output_t *)0x0) goto LAB_00405b3e;\u000a                          iVar47 = iVar47 + 1;\u000a                          if (iVar47 < __c) {\u000a                            local_138 = (long)iVar47;\u000a                            local_128 = &(local_1f0->panning).left;\u000a                            local_130 = &(local_1f0->panning).top;\u000a                            local_110 = &(local_1f0->panning).track_height;\u000a                            local_118 = &(local_1f0->panning).track_top;\u000a                            local_120 = &(local_1f0->panning).border_top;\u000a                            iVar18 = __isoc99_sscanf(in_RSI[local_138],\u000a                                                     "%dx%d+%d+%d/%dx%d+%d+%d/%d/%d/%d/%d",\u000a                                                     &(local_1f0->panning).width);\u000a                            switch(iVar18 - 2U >> 1 | (uint)((iVar18 - 2U & 1) != 0) << 0x1f) {\u000a                            case 0:\u000a                              *local_130 = 0;\u000a                              *local_128 = 0;\u000a                            case 1:\u000a                              *(undefined8 *)&(local_1f0->panning).track_left = 0;\u000a                              *(undefined8 *)&(local_1f0->panning).track_width = 0;\u000a                            case 3:\u000a                              *(undefined8 *)&(local_1f0->panning).border_left = 0;\u000a                              *(undefined8 *)&(local_1f0->panning).border_right = 0;\u000a                            case 5:\u000a                              pbVar1 = (byte *)((long)&local_1f0->changes + 1);\u000a                              *pbVar1 = *pbVar1 | 4;\u000a                              break;\u000a                            default:\u000a                              __s2 = in_RSI[lVar44];\u000a                              lVar41 = local_138;\u000a                              goto LAB_00405a30;\u000a                            }\u000a                            goto LAB_0040395e;\u000a                          }\u000a                          goto LAB_00405a41;\u000a                        }\u000a                        iVar18 = strcmp("--gamma",__s2);\u000a                        if (iVar18 == 0) {\u000a                          if (local_1f0 == (output_t *)0x0) goto LAB_00405b3e;\u000a                          if (iVar47 + 1 < __c) {\u000a                            lVar41 = (long)(iVar47 + 1);\u000a                            iVar18 = __isoc99_sscanf(in_RSI[lVar41],"%f:%f:%f",&local_1f0->gamma,\u000a                                                     &(local_1f0->gamma).green,\u000a                                                     &(local_1f0->gamma).blue);\u000a                            if (iVar18 != 3) {\u000aLAB_00405ad5:\u000a                              __s2 = in_RSI[lVar44];\u000a                              format = in_RSI[lVar41];\u000a                              goto LAB_00405a35;\u000a                            }\u000aLAB_00402954:\u000a                            iVar47 = iVar47 + 1;\u000a                            pbVar1 = (byte *)((long)&local_1f0->changes + 1);\u000a                            *pbVar1 = *pbVar1 | 8;\u000a                            goto LAB_0040295d;\u000a                          }\u000a                          goto LAB_00405a41;\u000a                        }\u000a                        iVar18 = strcmp("--brightness",__s2);\u000a                        if (iVar18 == 0) {\u000a                          if (local_1f0 == (output_t *)0x0) goto LAB_00405b3e;\u000a                          if (iVar47 + 1 < __c) {\u000a                            lVar41 = (long)(iVar47 + 1);\u000a                            iVar18 = __isoc99_sscanf(in_RSI[lVar41],&DAT_0040a55a,\u000a                                                     &local_1f0->brightness);\u000a                            if (iVar18 != 1) goto LAB_00405ad5;\u000a                            goto LAB_00402954;\u000a                          }\u000a                          goto LAB_00405a41;\u000a                        }\u000a                        iVar18 = strcmp("--primary",__s2);\u000a                        if (iVar18 == 0) {\u000a                          if (local_1f0 == (output_t *)0x0) goto LAB_00405b3e;\u000a                          pbVar1 = (byte *)((long)&local_1f0->changes + 1);\u000a                          *pbVar1 = *pbVar1 | 0x10;\u000a                          local_1f0->primary = 1;\u000aLAB_0040295d:\u000a                          local_1e8 = 1;\u000a                          goto LAB_0040395e;\u000a                        }\u000a                        iVar18 = strcmp("--noprimary",__s2);\u000a                        if (iVar18 == 0) {\u000a                          no_primary = 1;\u000a                          goto LAB_0040295d;\u000a                        }\u000a                        iVar18 = strcmp("--set",__s2);\u000a                        if (iVar18 == 0) {\u000a                          if (local_1f0 == (output_t *)0x0) goto LAB_00405b3e;\u000a                          iVar47 = iVar47 + 2;\u000a                          if (__c <= iVar47) {\u000a                            format = "%s requires two arguments\u005cn";\u000a                            goto LAB_00405a46;\u000a                          }\u000a                          poVar19 = (output_prop_t *)malloc(0x18);\u000a                          *(output_prop_t **)&poVar19->next = local_1f0->props;\u000a                          local_1f0->props = poVar19;\u000a                          poVar19->name = in_RSI[lVar44 + 1];\u000a                          poVar19->value = in_RSI[(long)iVar47];\u000a                          pbVar1 = (byte *)((long)&local_1f0->changes + 1);\u000a                          *pbVar1 = *pbVar1 | 1;\u000a                          local_198 = 1;\u000a                          goto LAB_0040295d;\u000a                        }\u000a                        iVar18 = strcmp("--scale",__s2);\u000a                        if (iVar18 == 0) {\u000a                          if (local_1f0 == (output_t *)0x0) goto LAB_00405b1c;\u000a                          iVar47 = iVar47 + 1;\u000a                          if (__c <= iVar47) goto LAB_0040592e;\u000a                          iVar18 = __isoc99_sscanf(in_RSI[(long)iVar47],"%lfx%lf",&local_f8,\u000a                                                   &local_1c8);\u000a                          if (iVar18 != 2) {\u000a                    /* WARNING: Subroutine does not return */\u000a                            argerr("failed to parse \u005c'%s\u005c' as a scaling factor\u005cn",\u000a                                   in_RSI[(long)iVar47]);\u000a                          }\u000a                          init_transform(&local_1f0->transform);\u000a                          dVar50 = DAT_00409900;\u000a                          (local_1f0->transform).transform.matrix[0] =\u000a                               (int)((double)local_f8 * DAT_00409900);\u000a                          (local_1f0->transform).transform.matrix[4] =\u000a                               (int)((double)CONCAT44(uStack452,local_1c8) * dVar50);\u000a                          (local_1f0->transform).transform.matrix[8] = 0x10000;\u000a                          __s2 = "nearest";\u000a                          if ((double)CONCAT44(uStack452,local_1c8) != DAT_00409908) {\u000a                            __s2 = "bilinear";\u000a                          }\u000a                          if ((double)local_f8 != DAT_00409908) {\u000a                            __s2 = "bilinear";\u000a                          }\u000a                          (local_1f0->transform).filter = __s2;\u000a                          (local_1f0->transform).nparams = 0;\u000a                          (local_1f0->transform).params = (XFixed *)0x0;\u000a                          pbVar1 = (byte *)((long)&local_1f0->changes + 1);\u000a                          *pbVar1 = *pbVar1 | 2;\u000a                          goto LAB_0040395e;\u000a                        }\u000a                        iVar18 = strcmp("--scale-from",__s2);\u000a                        if (iVar18 == 0) {\u000a                          if (local_1f0 == (output_t *)0x0) goto LAB_00405b1c;\u000a                          iVar47 = iVar47 + 1;\u000a                          if (__c <= iVar47) goto LAB_0040592e;\u000a                          iVar18 = __isoc99_sscanf(in_RSI[(long)iVar47],"%dx%d",&local_f8);\u000a                          if (iVar18 != 2) {\u000a                    /* WARNING: Subroutine does not return */\u000a                            argerr("failed to parse \u005c'%s\u005c' as a scale-from size\u005cn",\u000a                                   in_RSI[(long)iVar47]);\u000a                          }\u000a                          if (((int)local_f8 < 1) || ((int)local_1c8 < 1)) {\u000a                    /* WARNING: Subroutine does not return */\u000a                            argerr("--scale-from dimensions must be nonnegative\u005cn");\u000a                          }\u000a                          local_1f0->scale_from_w = (int)local_f8;\u000a                          local_1f0->scale_from_h = local_1c8;\u000a                          pbVar1 = (byte *)((long)&local_1f0->changes + 1);\u000a                          *pbVar1 = *pbVar1 | 2;\u000a                          goto LAB_0040395e;\u000a                        }\u000a                        iVar18 = strcmp("--transform",__s2);\u000a                        if (iVar18 == 0) {\u000a                          if (local_1f0 == (output_t *)0x0) goto LAB_00405b1c;\u000a                          iVar47 = iVar47 + 1;\u000a                          if (__c <= iVar47) goto LAB_0040592e;\u000a                          transform = &local_1f0->transform;\u000a                          init_transform(transform);\u000a                          __s2 = in_RSI[(long)iVar47];\u000a                          uVar22 = 0x402b99;\u000a                          iVar18 = strcmp(__s2,"none");\u000a                          if (iVar18 != 0) {\u000a                            iVar18 = __isoc99_sscanf(__s2,"%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf,%lf",\u000a                                                     &local_f8,local_f0,local_e8,local_e0,local_d8,\u000a                                                     local_d0,&local_c8,&local_c0,&local_b8,uVar22);\u000a                            if (iVar18 != 9) {\u000a                    /* WARNING: Subroutine does not return */\u000a                              argerr("failed to parse \u005c'%s\u005c' as a transformation\u005cn",\u000a                                     in_RSI[(long)iVar47]);\u000a                            }\u000a                            init_transform(transform);\u000a                            __ptr = &local_f8;\u000a                            lVar44 = 0;\u000a                            do {\u000a                              lVar41 = 3;\u000a                              ptVar40 = transform;\u000a                              __s = __ptr;\u000a                              do {\u000a                                (ptVar40->transform).matrix[0] = (int)((double)*__s * DAT_00409900);\u000a                                __s = __s + 1;\u000a                                ptVar40 = (transform_t *)((ptVar40->transform).matrix + 1);\u000a                                lVar41 = lVar41 + -1;\u000a                              } while (lVar41 != 0);\u000a                              lVar44 = lVar44 + 1;\u000a                              __ptr = __ptr + 3;\u000a                              transform = (transform_t *)((transform->transform).matrix + 3);\u000a                            } while (lVar44 != 3);\u000a                            (local_1f0->transform).filter = "bilinear";\u000a                            (local_1f0->transform).nparams = 0;\u000a                            (local_1f0->transform).params = (XFixed *)0x0;\u000a                          }\u000a                          pbVar1 = (byte *)((long)&local_1f0->changes + 1);\u000a                          *pbVar1 = *pbVar1 | 2;\u000a                          goto LAB_0040395e;\u000a                        }\u000a                        iVar18 = strcmp("--off",__s2);\u000a                        if (iVar18 == 0) {\u000a                          if (local_1f0 == (output_t *)0x0) goto LAB_00405b3e;\u000a                          set_name_xid(&local_1f0->mode,0);\u000a                          set_name_xid(&local_1f0->crtc,0);\u000a                          *(byte *)&local_1f0->changes = *(byte *)&local_1f0->changes | 3;\u000a                          goto LAB_0040395e;\u000a                        }\u000a                        iVar18 = strcmp("--fb",__s2);\u000a                        if (iVar18 == 0) {\u000a                          iVar47 = iVar47 + 1;\u000a                          if (__c <= iVar47) goto LAB_00405a41;\u000a                          iVar18 = __isoc99_sscanf(in_RSI[(long)iVar47],"%dx%d",&fb_width);\u000a                          local_1e8 = 1;\u000a                          bVar49 = true;\u000a                          if (iVar18 != 2) {\u000a                    /* WARNING: Subroutine does not return */\u000a                            argerr("failed to parse \u005c'%s\u005c' as a framebuffer size\u005cn",\u000a                                   in_RSI[(long)iVar47]);\u000a                          }\u000a                          goto LAB_0040395e;\u000a                        }\u000a                        iVar18 = strcmp("--fbmm",__s2);\u000a                        if (iVar18 == 0) {\u000a                          iVar47 = iVar47 + 1;\u000a                          if (__c <= iVar47) goto LAB_00405a41;\u000a                          iVar18 = __isoc99_sscanf(in_RSI[(long)iVar47],"%dx%d",&fb_width_mm);\u000a                          local_1e8 = 1;\u000a                          bVar49 = true;\u000a                          if (iVar18 != 2) {\u000a                    /* WARNING: Subroutine does not return */\u000a                            argerr("failed to parse \u005c'%s\u005c' as a physical size\u005cn",\u000a                                   in_RSI[(long)iVar47]);\u000a                          }\u000a                          goto LAB_0040395e;\u000a                        }\u000a                        iVar18 = strcmp("--dpi",__s2);\u000a                        if (iVar18 == 0) {\u000a                          iVar47 = iVar47 + 1;\u000a                          if (__c <= iVar47) goto LAB_0040592e;\u000a                          lVar44 = (long)iVar47;\u000a                          dpi = strtod(in_RSI[lVar44],&local_f8);\u000a                          if (in_RSI[lVar44] == local_f8) {\u000a                            dpi = 0.00000000;\u000a                            dpi_output_name = in_RSI[lVar44];\u000a                          }\u000aLAB_00402dd4:\u000a                          local_1e8 = 1;\u000a                        }\u000a                        else {\u000a                          iVar18 = strcmp("--auto",__s2);\u000a                          if (iVar18 == 0) {\u000a                            if (local_1f0 == (output_t *)0x0) {\u000a                              automatic = 1;\u000a                              local_1e8 = 1;\u000a                              local_1f0 = (output_t *)0x0;\u000a                              goto LAB_00402433;\u000a                            }\u000a                            local_1f0->automatic = 1;\u000a                            *(byte *)&local_1f0->changes = *(byte *)&local_1f0->changes | 0x40;\u000a                            goto LAB_00402dd4;\u000a                          }\u000a                          iVar18 = strcmp("--q12",__s2);\u000a                          if (iVar18 == 0) {\u000a                            local_1a8 = 1;\u000a                            goto LAB_0040395e;\u000a                          }\u000a                          iVar18 = strcmp("--q1",__s2);\u000a                          if (iVar18 == 0) {\u000a                            local_1c0 = 1;\u000a                            goto LAB_0040395e;\u000a                          }\u000a                          iVar18 = strcmp("--newmode",__s2);\u000a                          if (iVar18 == 0) {\u000a                            puVar36 = (umode_t *)calloc(1,0xa0);\u000a                            iVar18 = iVar47 + 10;\u000a                            if (__c <= iVar18) {\u000a                    /* WARNING: Subroutine does not return */\u000a                              argerr("failed to parse \u005c'%s\u005c' as a mode specification\u005cn");\u000a                            }\u000a                            (puVar36->mode).name = in_RSI[lVar44 + 1];\u000a                            sVar21 = strlen(in_RSI[lVar44 + 1]);\u000a                            (puVar36->mode).nameLength = (uint)sVar21;\u000a                            dVar50 = check_strtod(in_RSI[lVar44 + 2]);\u000a                            dVar50 = dVar50 * _DAT_004098f0;\u000a                            uVar32 = (long)dVar50;\u000a                            if (DAT_004098f8 <= dVar50) {\u000a                              uVar32 = (long)(dVar50 - DAT_004098f8) ^ 0x8000000000000000;\u000a                            }\u000a                            (puVar36->mode).dotClock = uVar32;\u000a                            uVar46 = check_strtol(in_RSI[lVar44 + 3]);\u000a                            (puVar36->mode).width = uVar46;\u000a                            uVar46 = check_strtol(in_RSI[lVar44 + 4]);\u000a                            (puVar36->mode).hSyncStart = uVar46;\u000a                            uVar46 = check_strtol(in_RSI[lVar44 + 5]);\u000a                            (puVar36->mode).hSyncEnd = uVar46;\u000a                            uVar46 = check_strtol(in_RSI[lVar44 + 6]);\u000a                            (puVar36->mode).hTotal = uVar46;\u000a                            uVar46 = check_strtol(in_RSI[lVar44 + 7]);\u000a                            (puVar36->mode).height = uVar46;\u000a                            uVar46 = check_strtol(in_RSI[lVar44 + 8]);\u000a                            (puVar36->mode).vSyncStart = uVar46;\u000a                            uVar46 = check_strtol(in_RSI[lVar44 + 9]);\u000a                            (puVar36->mode).vSyncEnd = uVar46;\u000a                            iVar47 = iVar47 + 0xb;\u000a                            uVar46 = check_strtol(in_RSI[(long)iVar18]);\u000a                            (puVar36->mode).vTotal = uVar46;\u000a                            (puVar36->mode).modeFlags = 0;\u000a                            if (iVar47 < __c) {\u000a                              lVar44 = (long)iVar47;\u000a                              do {\u000a                                iVar47 = (int)lVar44;\u000a                                __s2 = in_RSI[lVar44];\u000a                                lVar41 = -0x90;\u000a                                while (iVar18 = strcasecmp(*(char **)((long)&mode_flags[9].string +\u000a                                                                     lVar41),__s2), iVar18 != 0) {\u000a                                  lVar41 = lVar41 + 0x10;\u000a                                  if (lVar41 == 0) goto LAB_00402f65;\u000a                                }\u000a                                puVar2 = &(puVar36->mode).modeFlags;\u000a                                *puVar2 = *puVar2 | *(ulong *)((long)&mode_flags[9].flag + lVar41);\u000a                                lVar44 = lVar44 + 1;\u000a                                iVar47 = (int)lVar44;\u000a                              } while (lVar44 < local_108);\u000a                            }\u000aLAB_00402f65:\u000a                            *(umode_t **)&puVar36->next = umodes;\u000a                            puVar36->action = umode_create;\u000a                            umodes = puVar36;\u000aLAB_00403081:\u000a                            bVar14 = true;\u000a                          }\u000a                          else {\u000a                            iVar18 = strcmp("--rmmode",__s2);\u000a                            if (iVar18 == 0) {\u000a                              puVar36 = (umode_t *)calloc(1,0xa0);\u000a                              iVar47 = iVar47 + 1;\u000a                              if (__c <= iVar47) goto LAB_0040592e;\u000a                              set_name(&puVar36->name,in_RSI[(long)iVar47]);\u000a                              puVar36->action = umode_destroy;\u000aLAB_00403070:\u000a                              *(umode_t **)&puVar36->next = umodes;\u000a                              umodes = puVar36;\u000a                              goto LAB_00403081;\u000a                            }\u000a                            iVar18 = strcmp("--addmode",__s2);\u000a                            if (iVar18 == 0) {\u000a                              puVar36 = (umode_t *)calloc(1,0xa0);\u000a                              iVar47 = iVar47 + 2;\u000a                              if (__c <= iVar47) {\u000aLAB_00405b76:\u000a                    /* WARNING: Subroutine does not return */\u000a                                argerr("%s requires two arguments\u005cn",in_RSI[lVar44]);\u000a                              }\u000a                              set_name(&puVar36->output,in_RSI[lVar44 + 1]);\u000a                              set_name(&puVar36->name,in_RSI[(long)iVar47]);\u000a                              puVar36->action = umode_add;\u000a                              goto LAB_00403070;\u000a                            }\u000a                            iVar18 = strcmp("--delmode",__s2);\u000a                            if (iVar18 == 0) {\u000a                              puVar36 = (umode_t *)calloc(1,0xa0);\u000a                              iVar47 = iVar47 + 2;\u000a                              if (__c <= iVar47) goto LAB_00405b76;\u000a                              set_name(&puVar36->output,in_RSI[lVar44 + 1]);\u000a                              set_name(&puVar36->name,in_RSI[(long)iVar47]);\u000a                              puVar36->action = umode_delete;\u000a                              goto LAB_00403070;\u000a                            }\u000a                            iVar18 = strcmp("--listproviders",__s2);\u000a                            if (iVar18 == 0) {\u000a                              local_178 = 1;\u000a                            }\u000a                            else {\u000a                              iVar18 = strcmp("--setprovideroutputsource",__s2);\u000a                              if (iVar18 == 0) {\u000a                                if (__c <= iVar47 + 1) goto LAB_00405a41;\u000a                                set_name(&provider_name,in_RSI[(long)(iVar47 + 1)]);\u000a                                iVar47 = iVar47 + 2;\u000a                                if (iVar47 < __c) {\u000a                                  set_name(&output_source_provider_name,in_RSI[(long)iVar47]);\u000a                                }\u000a                                else {\u000a                                  set_name_xid(&output_source_provider_name,0);\u000a                                }\u000a                                local_19c = 1;\u000a                              }\u000a                              else {\u000a                                iVar18 = strcmp("--setprovideroffloadsink",__s2);\u000a                                if (iVar18 == 0) {\u000a                                  if (__c <= iVar47 + 1) goto LAB_00405a41;\u000a                                  set_name(&provider_name,in_RSI[(long)(iVar47 + 1)]);\u000a                                  iVar47 = iVar47 + 2;\u000a                                  if (iVar47 < __c) {\u000a                                    set_name(&offload_sink_provider_name,in_RSI[(long)iVar47]);\u000a                                  }\u000a                                  else {\u000a                                    set_name_xid(&offload_sink_provider_name,0);\u000a                                  }\u000a                                  local_1a0 = 1;\u000a                                }\u000a                                else {\u000a                                  iVar18 = strcmp("--listmonitors",__s2);\u000a                                  if (iVar18 == 0) {\u000a                                    local_174 = 1;\u000a                                  }\u000a                                  else {\u000a                                    iVar18 = strcmp("--listactivemonitors",__s2);\u000a                                    if (iVar18 == 0) {\u000a                                      local_170 = 1;\u000a                                    }\u000a                                    else {\u000a                                      iVar18 = strcmp("--setmonitor",__s2);\u000a                                      if (iVar18 == 0) {\u000a                                        __ptr_00 = calloc(1,0x40);\u000a                                        iVar47 = iVar47 + 3;\u000a                                        if (__c <= iVar47) {\u000a                    /* WARNING: Subroutine does not return */\u000a                                          argerr("%s requires three argument\u005cn",in_RSI[lVar44]);\u000a                                        }\u000a                                        __s2 = in_RSI[lVar44 + 1];\u000a                                        if (*__s2 == '*') {\u000a                                          *(undefined4 *)((long)__ptr_00 + 0x14) = 1;\u000a                                          __s2 = __s2 + 1;\u000a                                        }\u000a                                        *(char **)((long)__ptr_00 + 8) = __s2;\u000a                                        *(undefined4 *)((long)__ptr_00 + 0x10) = 1;\u000a                                        __s2 = in_RSI[lVar44 + 2];\u000a                                        iVar18 = strncmp(__s2,"auto",4);\u000a                                        if ((iVar18 != 0) &&\u000a                                           (iVar18 = __isoc99_sscanf(__s2,"%d/%dx%d/%d+%d+%d",\u000a                                                                     (long)__ptr_00 + 0x20,\u000a                                                                     (long)__ptr_00 + 0x28,\u000a                                                                     (long)__ptr_00 + 0x24,\u000a                                                                     (long)__ptr_00 + 0x2c,\u000a                                                                     (long)__ptr_00 + 0x18,\u000a                                                                     (long)__ptr_00 + 0x1c),\u000a                                           iVar18 != 6)) {\u000a                    /* WARNING: Subroutine does not return */\u000a                                          argerr("failed to parse \u005c'%s\u005c' as monitor geometry\u005cn",\u000a                                                 in_RSI[lVar44 + 2]);\u000a                                        }\u000a                                        __s2 = in_RSI[(long)iVar47];\u000a                                        iVar18 = strcmp(__s2,"none");\u000a                                        if (iVar18 != 0) {\u000a                                          printf("output list %s\u005cn",__s2);\u000a                                          while( true ) {\u000a                                            __s2 = strtok(__s2,",");\u000a                                            if (__s2 == (char *)0x0) break;\u000a                                            pvVar20 = realloc(*(void **)((long)__ptr_00 + 0x38),\u000a                                                              (long)*(int *)((long)__ptr_00 + 0x30)\u000a                                                              * 0x20 + 0x20);\u000a                                            *(void **)((long)__ptr_00 + 0x38) = pvVar20;\u000a                                            printf("add monitor %s\u005cn",__s2);\u000a                                            iVar18 = *(int *)((long)__ptr_00 + 0x30);\u000a                                            *(int *)((long)__ptr_00 + 0x30) = iVar18 + 1;\u000a                                            set_name((name_t *)\u000a                                                     ((long)iVar18 * 0x20 +\u000a                                                     *(long *)((long)__ptr_00 + 0x38)),__s2);\u000a                                            printf("output name %s\u005cn",\u000a                                                   *(undefined8 *)\u000a                                                    (*(long *)((long)__ptr_00 + 0x38) + -0x18 +\u000a                                                    (long)*(int *)((long)__ptr_00 + 0x30) * 0x20));\u000a                                            __s2 = (char *)0x0;\u000a                                          }\u000a                                        }\u000a                                        puVar6 = (umonitor_t *)&umonitors;\u000a                                        do {\u000a                                          ppuVar29 = (umonitor_t **)puVar6;\u000a                                          puVar6 = *ppuVar29;\u000a                                        } while (puVar6 != (umonitor_t *)0x0);\u000a                                        *ppuVar29 = __ptr_00;\u000a                                      }\u000a                                      else {\u000a                                        iVar18 = strcmp("--delmonitor",__s2);\u000a                                        if (iVar18 != 0) {\u000a                                          format = "unrecognized option \u005c'%s\u005c'\u005cn";\u000a                                          goto LAB_00405a46;\u000a                                        }\u000a                                        __ptr_00 = calloc(1,0x40);\u000a                                        iVar47 = iVar47 + 1;\u000a                                        if (__c <= iVar47) goto LAB_0040592e;\u000a                                        *(char **)((long)__ptr_00 + 8) = in_RSI[(long)iVar47];\u000a                                        puVar6 = (umonitor_t *)&umonitors;\u000a                                        do {\u000a                                          ppuVar29 = (umonitor_t **)puVar6;\u000a                                          puVar6 = *ppuVar29;\u000a                                        } while (puVar6 != (umonitor_t *)0x0);\u000a                                        *ppuVar29 = __ptr_00;\u000a                                      }\u000a                                      local_190 = CONCAT44(local_190._4_4_,1);\u000a                                    }\u000a                                  }\u000a                                }\u000a                              }\u000a                            }\u000a                          }\u000a                        }\u000a                        goto LAB_00402433;\u000a                      }\u000a                      if (local_1f0 == (output_t *)0x0) {\u000aLAB_00405b1c:\u000a                        __s2 = in_RSI[lVar44];\u000aLAB_00405b21:\u000a                    /* WARNING: Subroutine does not return */\u000a                        argerr("%s must be used after --output\u005cn",__s2);\u000a                      }\u000a                      iVar47 = iVar47 + 1;\u000a                      if (iVar47 < __c) {\u000a                        lVar41 = (long)iVar47;\u000a                        __s2 = in_RSI[lVar41];\u000a                        lVar48 = 0;\u000a                        do {\u000a                          bVar34 = (byte)lVar48;\u000a                          iVar18 = strcmp(direction[lVar48],__s2);\u000a                          if (iVar18 == 0) goto LAB_0040259a;\u000a                          lVar48 = lVar48 + 1;\u000a                          bVar34 = (byte)lVar48;\u000a                        } while (lVar48 < 4);\u000a                        if ((int)lVar48 != 4) {\u000aLAB_0040259a:\u000a                          local_1f0->rotation =\u000a                               (ushort)(1 << (bVar34 & 0x1f)) | local_1f0->rotation & 0xfff0;\u000a                          *(byte *)&local_1f0->changes = *(byte *)&local_1f0->changes | 0x10;\u000a                          goto LAB_0040395e;\u000a                        }\u000a                        __s2 = in_RSI[lVar44];\u000a                        goto LAB_00405a30;\u000a                      }\u000a                    }\u000a                  }\u000a                }\u000aLAB_0040592e:\u000a                __s2 = in_RSI[lVar44];\u000aLAB_00405933:\u000a                    /* WARNING: Subroutine does not return */\u000a                argerr("%s requires an argument\u005cn",__s2);\u000a              }\u000a              local_1a4 = 1;\u000a            }\u000a          }\u000a        }\u000a      }\u000aLAB_0040395e:\u000a      iVar47 = iVar47 + 1;\u000a    } while (iVar47 < __c);\u000a  }\u000a  uVar46 = local_198;\u000a  if (!bVar49) {\u000a    local_1d8 = 1;\u000a  }\u000a  if (verbose == 1) {\u000a    uVar39 = 1;\u000a    if (!bVar13) {\u000a      uVar39 = local_1c0;\u000a    }\u000a    local_1d8 = 1;\u000a    if (local_1e8 == 0) {\u000a      local_1c0 = uVar39;\u000a      local_1d8 = 1;\u000a    }\u000a  }\u000a  if (local_1ac != 0) {\u000a    puts("xrandr program version       1.5.0");\u000a  }\u000a  dpy = (Display *)XOpenDisplay(local_1e0);\u000a  __stream = stderr;\u000a  if (dpy == (Display *)0x0) {\u000a    uVar22 = XDisplayName(local_1e0);\u000a    fprintf(__stream,"Can\u005c't open display %s\u005cn",uVar22,uVar22);\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(1);\u000a  }\u000a  if (screen < 0) {\u000a    screen = dpy->default_screen;\u000a  }\u000a  uVar32 = SEXT48(screen);\u000a  uVar30 = (ulong)(uint)dpy->nscreens;\u000a  if (dpy->nscreens <= screen) {\u000a    __s2 = "Invalid screen number %d (display has %d)\u005cn";\u000a    goto LAB_004059cf;\u000a  }\u000a  root = dpy->screens[uVar32].root;\u000a  __c = XRRQueryExtension(dpy,&local_13c,local_fc);\u000a  if ((__c == 0) || (__c = XRRQueryVersion(dpy,&local_14c,&local_194), __c == 0)) {\u000a    fwrite("RandR extension missing\u005cn",0x18,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(1);\u000a  }\u000a  if (local_14c < 2) {\u000a    if ((local_14c == 1) && (1 < local_194)) {\u000a      has_1_2 = 1;\u000a    }\u000a    if ((local_14c == 1) && (2 < local_194)) goto LAB_00403b72;\u000a  }\u000a  else {\u000a    has_1_2 = 1;\u000aLAB_00403b72:\u000a    has_1_3 = 1;\u000a  }\u000a  if (local_14c < 2) {\u000a    if ((local_14c == 1) && (3 < local_194)) {\u000a      has_1_4 = 1;\u000a    }\u000a    if ((local_14c == 1) && (4 < local_194)) goto LAB_00403bad;\u000a  }\u000a  else {\u000a    has_1_4 = 1;\u000aLAB_00403bad:\u000a    has_1_5 = 1;\u000a  }\u000a  if ((bVar14) && ((has_1_2 & 1) != 0)) {\u000a    get_screen(1);\u000a    get_crtcs();\u000a    get_outputs();\u000a    p_Var7 = (_umode *)umodes;\u000a    while (p_Var7 != (_umode *)0x0) {\u000a      switch(*(umode_action_t *)((long)p_Var7 + 8)) {\u000a      case umode_create:\u000a        XRRCreateMode(dpy,root,(XRRModeInfo *)((long)p_Var7 + 0x10));\u000a        p_Var7 = *(_umode **)p_Var7;\u000a        break;\u000a      case umode_destroy:\u000a        mode = find_mode();\u000a        if (mode == (XRRModeInfo *)0x0) goto LAB_0040593f;\u000a        XRRDestroyMode(dpy);\u000a        p_Var7 = *(_umode **)p_Var7;\u000a        break;\u000a      case umode_add:\u000a        poVar25 = find_output((name_t *)((long)p_Var7 + 0x60));\u000a        if (poVar25 == (output_t *)0x0) {\u000aLAB_00405952:\u000a                    /* WARNING: Subroutine does not return */\u000a          fatal("cannot find output \u005c"%s\u005c"\u005cn",((name_t *)((long)p_Var7 + 0x60))->string);\u000a        }\u000a        mode = find_mode();\u000a        if (mode == (XRRModeInfo *)0x0) {\u000aLAB_0040593f:\u000a                    /* WARNING: Subroutine does not return */\u000a          fatal("cannot find mode \u005c"%s\u005c"\u005cn",((name_t *)((long)p_Var7 + 0x80))->string);\u000a        }\u000a        XRRAddOutputMode(dpy,(poVar25->output).xid,mode->id);\u000a        p_Var7 = *(_umode **)p_Var7;\u000a        break;\u000a      case umode_delete:\u000a        poVar25 = find_output((name_t *)((long)p_Var7 + 0x60));\u000a        if (poVar25 == (output_t *)0x0) goto LAB_00405952;\u000a        mode = find_mode();\u000a        if (mode == (XRRModeInfo *)0x0) goto LAB_0040593f;\u000a        XRRDeleteOutputMode(dpy,(poVar25->output).xid,mode->id);\u000a      default:\u000a        p_Var7 = *(_umode **)p_Var7;\u000a      }\u000a    }\u000a    if ((uVar46 | (uint)local_190 | local_1e8) == 0) goto LAB_00404f09;\u000a  }\u000a  if ((uVar46 != 0) && ((has_1_2 & 1) != 0)) {\u000a    get_screen(1);\u000a    get_crtcs();\u000a    get_outputs();\u000a    output = (_output *)all_outputs;\u000a    while (output != (_output *)0x0) {\u000a      poVar19 = ((output_t *)output)->props;\u000a      while (poVar19 != (output_prop_t *)0x0) {\u000a        type = 0;\u000a        uVar52 = 0x403e85;\u000a        uVar22 = XInternAtom(dpy,poVar19->name,0);\u000a        __c = XRRGetOutputProperty\u000a                        (dpy,(((output_t *)output)->output).xid,uVar22,0,100,0,0,0,&local_1b8,\u000a                         &local_164,local_188,&local_180,&local_1c8,uVar52);\u000a        uVar46 = 0;\u000a        if (__c == 0) {\u000a          lVar44 = XRRQueryOutputProperty(dpy,(((output_t *)output)->output).xid,uVar22);\u000a          if (lVar44 == 0) {\u000a            type = 0;\u000a            uVar46 = 0;\u000a          }\u000a          else {\u000a            type = CONCAT44(uStack436,CONCAT22(uStack438,local_1b8));\u000a            uVar46 = local_164;\u000a          }\u000a        }\u000a        __ptr = (char **)property_values_from_string(poVar19->value,type,(int *)(ulong)local_164);\u000a        if (__ptr == (char **)0x0) {\u000a          if (type == 0x1f) {\u000aLAB_00403e0a:\u000a            __s = (char **)poVar19->value;\u000a            sVar21 = strlen((char *)__s);\u000a            local_1bc = (uint)sVar21;\u000a            uVar46 = 8;\u000a            uVar52 = 0x1f;\u000a            goto LAB_00403f57;\u000a          }\u000a          if (type == 4) {\u000a            local_f8 = (char *)XInternAtom(dpy,poVar19->value,0);\u000a            local_1bc = 1;\u000a            uVar52 = 4;\u000a            __s = &local_f8;\u000a            goto LAB_00403f57;\u000a          }\u000a          if (type == 0) {\u000a            __c = __isoc99_sscanf(poVar19->value,0x40b4b5,&local_150);\u000a            if ((__c != 1) && (__c = __isoc99_sscanf(poVar19->value,0x40a614,&local_150), __c != 1))\u000a            goto LAB_00403e0a;\u000a            local_f8 = (char *)(long)local_150;\u000a            local_1bc = 1;\u000a            uVar46 = 0x20;\u000a            uVar52 = 0x13;\u000a            __s = &local_f8;\u000a            goto LAB_00403f57;\u000a          }\u000a        }\u000a        else {\u000a          uVar52 = CONCAT44(uStack436,CONCAT22(uStack438,local_1b8));\u000a          __s = __ptr;\u000a          uVar46 = local_164;\u000aLAB_00403f57:\u000a          XRRChangeOutputProperty\u000a                    (dpy,(((output_t *)output)->output).xid,uVar22,uVar52,(ulong)uVar46,0,__s,\u000a                     (ulong)local_1bc);\u000a          free(__ptr);\u000a        }\u000a        poVar19 = (output_prop_t *)poVar19->next;\u000a      }\u000a      output = ((output_t *)output)->next;\u000a    }\u000a    if (local_1e8 == 0) goto LAB_00404f09;\u000a  }\u000a  if (local_19c != 0) {\u000a    if (has_1_4 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      fatal("--setprovideroutputsource requires RandR 1.4\u005cn");\u000a    }\u000a    get_screen(1);\u000a    get_providers();\u000a    ppVar23 = find_provider(&provider_name);\u000a    ppVar24 = find_provider(&output_source_provider_name);\u000a    if (ppVar24 == (provider_t *)0x0) {\u000a      XVar33 = 0;\u000a    }\u000a    else {\u000a      XVar33 = (ppVar24->provider).xid;\u000a    }\u000a    XRRSetProviderOutputSource(dpy,(ppVar23->provider).xid,XVar33);\u000a  }\u000a  if (local_1a0 != 0) {\u000a    if (has_1_4 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      fatal("--setprovideroffloadsink requires RandR 1.4\u005cn");\u000a    }\u000a    get_screen(1);\u000a    get_providers();\u000a    ppVar23 = find_provider(&provider_name);\u000a    ppVar24 = find_provider(&offload_sink_provider_name);\u000a    if (ppVar24 == (provider_t *)0x0) {\u000a      XVar33 = 0;\u000a    }\u000a    else {\u000a      XVar33 = (ppVar24->provider).xid;\u000a    }\u000a    XRRSetProviderOffloadSink(dpy,(ppVar23->provider).xid,XVar33);\u000a  }\u000a  uVar46 = local_1a4;\u000a  if (local_1e8 == 0) {\u000a    if ((uint)local_190 == 0) {\u000a      if ((local_1a8 != 0) || ((local_1c0 == 0 && ((local_1d8 == 0 | (has_1_2 ^ 1) & 1) == 0)))) {\u000a        get_screen((ulong)local_1a4);\u000a        get_crtcs();\u000a        get_outputs();\u000a        lVar44 = (long)screen;\u000a        printf("Screen %d: minimum %d x %d, current %d x %d, maximum %d x %d\u005cn",lVar44,\u000a               (ulong)(uint)minWidth,(ulong)(uint)minHeight,(ulong)(uint)dpy->screens[lVar44].width,\u000a               (ulong)(uint)dpy->screens[lVar44].height,(ulong)(uint)maxWidth,(ulong)(uint)maxHeight\u000a              );\u000a        output = (_output *)all_outputs;\u000a        do {\u000a          if (output == (_output *)0x0) {\u000a            if (0 < res->nmode) {\u000a              lVar44 = 0;\u000a              lVar41 = 0;\u000a              do {\u000a                if (-1 < *(int *)((long)&res->modes->modeFlags + lVar44)) {\u000a                  print_verbose_mode((XRRModeInfo *)((long)&res->modes->id + lVar44));\u000a                }\u000a                lVar41 = lVar41 + 1;\u000a                lVar44 = lVar44 + 0x50;\u000a              } while (lVar41 < (long)res->nmode);\u000a            }\u000a                    /* WARNING: Subroutine does not return */\u000a            exit(0);\u000a          }\u000a          pXVar8 = ((output_t *)output)->output_info;\u000a          pcVar26 = ((output_t *)output)->crtc_info;\u000a          if (pcVar26 == (crtc_t *)0x0) {\u000a            pXVar37 = (XRRCrtcInfo *)0x0;\u000a          }\u000a          else {\u000a            pXVar37 = pcVar26->crtc_info;\u000a          }\u000a          mode = ((output_t *)output)->mode_info;\u000a          RVar15 = output_rotations((output_t *)output);\u000a          printf("%s %s",pXVar8->name,connection[(ulong)pXVar8->connection]);\u000a          if (((output_t *)output)->primary != 0) {\u000a            printf(" primary");\u000a          }\u000a          if (mode != (XRRModeInfo *)0x0) {\u000a            if (pXVar37 == (XRRCrtcInfo *)0x0) {\u000a              uVar4 = mode->width;\u000a              uVar5 = mode->height;\u000a              uVar39 = ((output_t *)output)->x;\u000a              uVar46 = ((output_t *)output)->y;\u000a            }\u000a            else {\u000a              uVar4 = pXVar37->width;\u000a              uVar5 = pXVar37->height;\u000a              uVar39 = pXVar37->x;\u000a              uVar46 = pXVar37->y;\u000a            }\u000a            printf(" %dx%d+%d+%d",(ulong)uVar4,(ulong)uVar5,(ulong)uVar39,(ulong)uVar46);\u000a            if (verbose == 1) {\u000a              printf(" (0x%x)");\u000a            }\u000a            if ((((output_t *)output)->rotation != 1) || ((verbose & 1) != 0)) {\u000a              rotation_name();\u000a              printf(" %s");\u000a              if ((((output_t *)output)->rotation & 0x30) != 0) {\u000a                reflection_name();\u000a                printf(" %s");\u000a              }\u000a            }\u000a          }\u000a          if ((RVar15 != 1) || ((verbose & 1) != 0)) {\u000a            printf(" (");\u000a            bVar49 = true;\u000a            lVar44 = 0;\u000a            do {\u000a              if (((int)register0x00000020 - 0x208U >> ((uint)lVar44 & 0x1f) & 1) != 0) {\u000a                if (!bVar49) {\u000a                  putchar(0x20);\u000a                }\u000a                bVar49 = false;\u000a                printf("%s");\u000a              }\u000a              lVar44 = lVar44 + 1;\u000a            } while (lVar44 != 4);\u000a            if ((RVar15 & 0x10) != 0) {\u000a              if (!bVar49) {\u000a                putchar(0x20);\u000a              }\u000a              bVar49 = false;\u000a              printf("x axis");\u000a            }\u000a            if ((RVar15 & 0x20) != 0) {\u000a              if (!bVar49) {\u000a                putchar(0x20);\u000a              }\u000a              printf("y axis");\u000a            }\u000a            putchar(0x29);\u000a          }\u000a          if (mode != (XRRModeInfo *)0x0) {\u000a            printf(" %dmm x %dmm",(ulong)*(uint *)&pXVar8->mm_width,\u000a                   (ulong)*(uint *)&pXVar8->mm_height);\u000a          }\u000a          if (((pcVar26 != (crtc_t *)0x0) &&\u000a              (pXVar9 = pcVar26->panning_info, pXVar9 != (XRRPanning *)0x0)) && (pXVar9->width != 0)\u000a             ) {\u000a            uVar22 = 0x40440f;\u000a            printf(" panning %dx%d+%d+%d",(ulong)pXVar9->width,(ulong)pXVar9->height,\u000a                   (ulong)pXVar9->left,(ulong)pXVar9->top);\u000a            if (((pXVar9->track_width != 0) &&\u000a                (((pXVar9->track_left != pXVar9->left || (pXVar9->track_width != pXVar9->width)) ||\u000a                 ((pXVar9->border_left != 0 || (pXVar9->border_right != 0)))))) ||\u000a               ((pXVar9->track_height != 0 &&\u000a                (((pXVar9->track_top != pXVar9->top || (pXVar9->track_height != pXVar9->height)) ||\u000a                 ((pXVar9->border_top != 0 || (pXVar9->border_bottom != 0)))))))) {\u000a              printf(" tracking %dx%d+%d+%d border %d/%d/%d/%d",(ulong)pXVar9->track_width,\u000a                     (ulong)pXVar9->track_height,(ulong)pXVar9->track_left,(ulong)pXVar9->track_top,\u000a                     (ulong)(uint)pXVar9->border_left,(ulong)(uint)pXVar9->border_top,\u000a                     (ulong)(uint)pXVar9->border_right,(ulong)(uint)pXVar9->border_bottom,uVar22);\u000a            }\u000a          }\u000a          putchar(10);\u000a          if (verbose == 1) {\u000a            printf("\u005ctIdentifier: 0x%x\u005cn",(ulong)*(uint *)&(((output_t *)output)->output).xid);\u000a            printf("\u005ctTimestamp:  %d\u005cn",(ulong)*(uint *)&pXVar8->timestamp);\u000a            printf("\u005ctSubpixel:   %s\u005cn",order[(ulong)pXVar8->subpixel_order]);\u000a            fVar3 = (((output_t *)output)->gamma).red;\u000a            if (((fVar3 != 0.00000000) && ((((output_t *)output)->gamma).green != 0.00000000)) &&\u000a               ((((output_t *)output)->gamma).blue != 0.00000000)) {\u000a              printf((char *)(double)fVar3,"\u005ctGamma:      %#.2g:%#.2g:%#.2g\u005cn");\u000a              printf((char *)(double)((output_t *)output)->brightness,"\u005ctBrightness: %#.2g\u005cn");\u000a            }\u000a            printf("\u005ctClones:    ");\u000a            if (0 < pXVar8->nclone) {\u000a              lVar44 = 0;\u000a              do {\u000a                poVar25 = find_output_by_xid(pXVar8->clones[lVar44]);\u000a                if (poVar25 != (output_t *)0x0) {\u000a                  printf(" %s",(poVar25->output).string);\u000a                }\u000a                lVar44 = lVar44 + 1;\u000a              } while (lVar44 < (long)pXVar8->nclone);\u000a            }\u000a            putchar(10);\u000a            if (((output_t *)output)->crtc_info != (crtc_t *)0x0) {\u000a              printf("\u005ctCRTC:       %d\u005cn",(ulong)(uint)(((output_t *)output)->crtc_info->crtc).index\u000a                    );\u000a            }\u000a            printf("\u005ctCRTCs:     ");\u000a            if (0 < pXVar8->ncrtc) {\u000a              lVar44 = 0;\u000a              do {\u000a                pcVar26 = find_crtc_by_xid(pXVar8->crtcs[lVar44]);\u000a                if (pcVar26 != (crtc_t *)0x0) {\u000a                  printf(" %d",(ulong)(uint)(pcVar26->crtc).index);\u000a                }\u000a                lVar44 = lVar44 + 1;\u000a              } while (lVar44 < (long)pXVar8->ncrtc);\u000a            }\u000a            putchar(10);\u000a            if ((((output_t *)output)->crtc_info != (crtc_t *)0x0) &&\u000a               (pXVar9 = ((output_t *)output)->crtc_info->panning_info, pXVar9 != (XRRPanning *)0x0)\u000a               ) {\u000a              printf("\u005ctPanning:    %dx%d+%d+%d\u005cn",(ulong)pXVar9->width,(ulong)pXVar9->height,\u000a                     (ulong)pXVar9->left,(ulong)pXVar9->top);\u000a              printf("\u005ctTracking:   %dx%d+%d+%d\u005cn",(ulong)pXVar9->track_width,\u000a                     (ulong)pXVar9->track_height);\u000a              printf("\u005ctBorder:     %d/%d/%d/%d\u005cn",(ulong)(uint)pXVar9->border_left,\u000a                     (ulong)(uint)pXVar9->border_top);\u000a            }\u000a            if (verbose != 1) {\u000a              bVar34 = 0;\u000a              goto LAB_00404736;\u000a            }\u000a            printf("\u005ctTransform: ");\u000a            transform = &((output_t *)output)->transform;\u000a            lVar44 = 0;\u000a            do {\u000a              lVar41 = 3;\u000a              ptVar40 = transform;\u000a              do {\u000a                printf((char *)((double)(ptVar40->transform).matrix[0] * DAT_00409918),&DAT_0040a559\u000a                      );\u000a                ptVar40 = (transform_t *)((ptVar40->transform).matrix + 1);\u000a                lVar41 = lVar41 + -1;\u000a              } while (lVar41 != 0);\u000a              if (lVar44 < 2) {\u000a                printf("\u005cn\u005ct           ");\u000a              }\u000a              lVar44 = lVar44 + 1;\u000a              transform = (transform_t *)((transform->transform).matrix + 3);\u000a            } while (lVar44 != 3);\u000a            if ((((output_t *)output)->transform).filter != (char *)0x0) {\u000a              printf("\u005cn\u005ct           filter: %s");\u000a            }\u000a            putchar(10);\u000a            bVar34 = verbose;\u000a            if ((verbose & 1) == 0) goto LAB_00404736;\u000aLAB_00404750:\u000a            lVar44 = XRRListOutputProperties(dpy,(((output_t *)output)->output).xid,&local_1b8);\u000a            if (0 < CONCAT22(uStack438,local_1b8)) {\u000a              lVar41 = 0;\u000a              do {\u000a                uVar22 = 0x404794;\u000a                __s2 = (char *)XGetAtomName(dpy,*(undefined8 *)(lVar44 + lVar41 * 8));\u000a                XRRGetOutputProperty\u000a                          (dpy,(((output_t *)output)->output).xid,\u000a                           *(undefined8 *)(lVar44 + lVar41 * 8),0,100,0,0,0,&local_180,&local_1bc,\u000a                           &local_1c8,local_188,&local_f8,uVar22);\u000a                __ptr_00 = (void *)XRRQueryOutputProperty\u000a                                             (dpy,(((output_t *)output)->output).xid,\u000a                                              *(undefined8 *)(lVar44 + lVar41 * 8));\u000a                printf("\u005ct%s: ");\u000a                print_output_property(__s2,(ulong)local_1bc,(uchar *)CONCAT44(uStack380,local_180));\u000a                if (*(int *)((long)__ptr_00 + 4) == 0) {\u000aLAB_0040493a:\u000a                  if (0 < *(int *)((long)__ptr_00 + 0xc)) {\u000a                    printf("\u005ct\u005ctsupported: ");\u000a                    if (0 < *(int *)((long)__ptr_00 + 0xc)) {\u000a                      lVar48 = 0;\u000a                      do {\u000a                        print_output_property_value(0x20,(void *)CONCAT44(uStack380,local_180));\u000a                        if (lVar48 < (long)*(int *)((long)__ptr_00 + 0xc) + -1) {\u000a                          printf(", ");\u000a                        }\u000a                        lVar48 = lVar48 + 1;\u000a                      } while (lVar48 < (long)*(int *)((long)__ptr_00 + 0xc));\u000a                    }\u000a                    putchar(10);\u000a                  }\u000a                }\u000a                else {\u000a                  if (0 < *(int *)((long)__ptr_00 + 0xc)) {\u000a                    puVar42 = (undefined *)0x40aa5c;\u000a                    if (*(int *)((long)__ptr_00 + 0xc) == 2) {\u000a                      puVar42 = &DAT_0040b800;\u000a                    }\u000a                    printf("\u005ct\u005ctrange%s: ",puVar42);\u000a                    if (1 < *(int *)((long)__ptr_00 + 0xc)) {\u000a                      lVar48 = 0;\u000a                      do {\u000a                        putchar(0x28);\u000a                        print_output_property_value(0x20,(void *)CONCAT44(uStack380,local_180));\u000a                        printf(", ");\u000a                        print_output_property_value(0x20,(void *)CONCAT44(uStack380,local_180));\u000a                        putchar(0x29);\u000a                        if (lVar48 < (long)(((int)((*(uint *)((long)__ptr_00 + 0xc) >> 0x1f) +\u000a                                                  *(uint *)((long)__ptr_00 + 0xc)) >> 1) + -1)) {\u000a                          printf(", ");\u000a                        }\u000a                        lVar48 = lVar48 + 1;\u000a                      } while (lVar48 < (long)((int)((*(uint *)((long)__ptr_00 + 0xc) >> 0x1f) +\u000a                                                    *(uint *)((long)__ptr_00 + 0xc)) >> 1));\u000a                    }\u000a                    putchar(10);\u000a                  }\u000a                  if (*(int *)((long)__ptr_00 + 4) == 0) goto LAB_0040493a;\u000a                }\u000a                free(__ptr_00);\u000a                lVar41 = lVar41 + 1;\u000a              } while (lVar41 < (long)CONCAT22(uStack438,local_1b8));\u000a            }\u000a            if (verbose == 0) goto LAB_00404a40;\u000aLAB_004049d1:\u000a            if (0 < pXVar8->nmode) {\u000a              lVar44 = 0;\u000a              do {\u000a                mode = find_mode_by_xid(pXVar8->modes[lVar44]);\u000a                print_verbose_mode(mode);\u000a                mode->modeFlags = mode->modeFlags | 0x80000000;\u000a                lVar44 = lVar44 + 1;\u000a              } while (lVar44 < (long)pXVar8->nmode);\u000a            }\u000a          }\u000a          else {\u000a            bVar34 = 0;\u000aLAB_00404736:\u000a            if ((properties & 1) != 0) goto LAB_00404750;\u000a            if ((bVar34 & 1) != 0) goto LAB_004049d1;\u000aLAB_00404a40:\u000a            __ptr_00 = calloc((long)pXVar8->nmode,4);\u000a            if (__ptr_00 == (void *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a              fatal("out of memory\u005cn");\u000a            }\u000a            if (0 < pXVar8->nmode) {\u000a              lVar44 = 0;\u000a              do {\u000a                if (*(int *)((long)__ptr_00 + lVar44 * 4) == 0) {\u000a                  mode = find_mode_by_xid(pXVar8->modes[lVar44]);\u000a                  putchar(0x20);\u000a                  printf("  %-12s",mode->name);\u000a                  lVar41 = lVar44;\u000a                  if (lVar44 < (long)pXVar8->nmode) {\u000a                    do {\u000a                      if (*(int *)((long)__ptr_00 + lVar41 * 4) == 0) {\u000a                        mode_info = find_mode_by_xid(pXVar8->modes[lVar41]);\u000a                        __c = strcmp(mode->name,mode_info->name);\u000a                        if (__c == 0) {\u000a                          *(undefined4 *)((long)__ptr_00 + lVar41 * 4) = 1;\u000a                          mode_info->modeFlags = mode_info->modeFlags | 0x80000000;\u000a                          mode_refresh(mode_info);\u000a                          printf(" %6.2f");\u000a                          if (mode_info == ((output_t *)output)->mode_info) {\u000a                            __c = 0x2a;\u000a                          }\u000a                          else {\u000a                            __c = 0x20;\u000a                          }\u000a                          putchar(__c);\u000a                          if (lVar41 < (long)pXVar8->npreferred) {\u000a                            __c = 0x2b;\u000a                          }\u000a                          else {\u000a                            __c = 0x20;\u000a                          }\u000a                          putchar(__c);\u000a                        }\u000a                      }\u000a                      lVar41 = lVar41 + 1;\u000a                    } while (lVar41 < (long)pXVar8->nmode);\u000a                  }\u000a                  putchar(10);\u000a                }\u000a                lVar44 = lVar44 + 1;\u000a              } while (lVar44 < (long)pXVar8->nmode);\u000a            }\u000a            free(__ptr_00);\u000a          }\u000a          output = ((output_t *)output)->next;\u000a        } while( true );\u000a      }\u000a      if (local_178 != 0) {\u000a        if (has_1_4 == 0) {\u000a          __s2 = "RandR 1.4 not supported";\u000a          goto LAB_004059e3;\u000a        }\u000a        get_screen((ulong)local_1a4);\u000a        get_providers();\u000a        if ((providers != (provider_t *)0x0) &&\u000a           (printf("Providers: number : %d\u005cn",(ulong)(uint)num_providers), 0 < num_providers)) {\u000a          uVar32 = 0;\u000a          do {\u000a            pXVar12 = providers[uVar32].info;\u000a            printf("Provider %d: id: 0x%x cap: 0x%x",uVar32 & 0xffffffff,\u000a                   (ulong)*(uint *)&providers[uVar32].provider.xid);\u000a            uVar39 = 0;\u000a            do {\u000a              if ((pXVar12->capabilities >> (uVar39 & 0x1f) & 1) != 0) {\u000a                __s2 = capability_name();\u000a                printf(", %s",__s2);\u000a              }\u000a              uVar39 = uVar39 + 1;\u000a            } while (uVar39 != 4);\u000a            printf(" crtcs: %d outputs: %d associated providers: %d name:%s\u005cn",\u000a                   (ulong)(uint)pXVar12->ncrtcs,(ulong)(uint)pXVar12->noutputs,\u000a                   (ulong)(uint)pXVar12->nassociatedproviders,pXVar12->name);\u000a            uVar32 = uVar32 + 1;\u000a          } while ((long)uVar32 < (long)num_providers);\u000a        }\u000a      }\u000a      local_174 = local_174 | local_170;\u000a      if (local_174 != 0) {\u000a        if (has_1_5 == 0) {\u000a          __s2 = "RandR 1.5 not supported";\u000a          goto LAB_004059e3;\u000a        }\u000a        bVar49 = local_170 != 0;\u000a        get_screen((ulong)uVar46);\u000a        get_monitors((ulong)bVar49);\u000a        get_crtcs();\u000a        get_outputs();\u000a        if ((monitors != (monitors_t *)0x0) &&\u000a           (printf("Monitors: %d\u005cn",(ulong)(uint)monitors->n), 0 < monitors->n)) {\u000a          uVar32 = 0;\u000a          do {\u000a            pXVar28 = monitors->monitors;\u000a            puVar42 = &DAT_0040b800;\u000a            if (pXVar28[uVar32].automatic != 0) {\u000a              puVar42 = &DAT_0040a5c6;\u000a            }\u000a            puVar38 = &DAT_0040b800;\u000a            if (pXVar28[uVar32].primary != 0) {\u000a              puVar38 = &DAT_0040a5c4;\u000a            }\u000a            uVar52 = 0x4050df;\u000a            uVar22 = XGetAtomName(dpy,pXVar28[uVar32].name);\u000a            pXVar28 = monitors->monitors;\u000a            printf(" %d: %s%s%s %d/%dx%d/%d+%d+%d ",uVar32 & 0xffffffff,puVar42,puVar38,uVar22,\u000a                   (ulong)(uint)pXVar28[uVar32].width,(ulong)(uint)pXVar28[uVar32].mwidth,\u000a                   (ulong)(uint)pXVar28[uVar32].height,(ulong)(uint)pXVar28[uVar32].mheight,\u000a                   (ulong)(uint)pXVar28[uVar32].x,(ulong)(uint)pXVar28[uVar32].y,uVar52);\u000a            pXVar28 = monitors->monitors;\u000a            if (0 < pXVar28[uVar32].noutput) {\u000a              lVar44 = 0;\u000a              do {\u000a                poVar25 = find_output_by_xid(pXVar28[uVar32].outputs[lVar44]);\u000a                if (poVar25 == (output_t *)0x0) {\u000a                  printf(" unknown output 0x%x\u005cn",\u000a                         (ulong)*(uint *)(monitors->monitors[uVar32].outputs + lVar44));\u000a                }\u000a                else {\u000a                  printf(" %s",(poVar25->output).string);\u000a                }\u000a                lVar44 = lVar44 + 1;\u000a                pXVar28 = monitors->monitors;\u000a              } while (lVar44 < (long)pXVar28[uVar32].noutput);\u000a            }\u000a            putchar(10);\u000a            uVar32 = uVar32 + 1;\u000a          } while ((long)uVar32 < (long)monitors->n);\u000a        }\u000a      }\u000a      lVar44 = XRRGetScreenInfo(dpy,root);\u000a      if (lVar44 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        exit(1);\u000a      }\u000a      uVar16 = XRRConfigCurrentConfiguration(lVar44,&local_1b8);\u000a      lVar41 = XRRConfigSizes(lVar44);\u000a      if (local_168 != 0) {\u000a        if (0 < (int)local_1c8) {\u000a          puVar43 = (uint *)(lVar41 + 4);\u000a          uVar45 = 0;\u000a          do {\u000a            if ((puVar43[-1] == local_15c) && (*puVar43 == local_160)) goto LAB_004052c6;\u000a            uVar45 = uVar45 + 1;\u000a            puVar43 = puVar43 + 4;\u000a          } while ((long)uVar45 < (long)(int)local_1c8);\u000a        }\u000a        uVar30 = (ulong)local_160;\u000a        __s2 = "Size %dx%d not found in available modes\u005cn";\u000a        uVar32 = (ulong)local_15c;\u000aLAB_004059cf:\u000a        fprintf(stderr,__s2,uVar32,uVar30);\u000a                    /* WARNING: Subroutine does not return */\u000a        exit(1);\u000a      }\u000a      if ((int)uVar45 < 0) {\u000a        uVar45 = (ulong)uVar16;\u000a      }\u000a      else {\u000a        uVar30 = (ulong)local_1c8;\u000a        if ((int)local_1c8 <= (int)uVar45) {\u000a          __s2 = "Size index %d is too large, there are only %d sizes\u005cn";\u000a          uVar32 = uVar45;\u000a          goto LAB_004059cf;\u000a        }\u000a      }\u000aLAB_004052c6:\u000a      uVar32 = local_158;\u000a      if ((int)local_158 < 0) {\u000a        uVar32 = 0;\u000a        do {\u000a          if (1 << ((byte)uVar32 & 0x1f) == ((uint)local_1b8 & 0xf)) break;\u000a          uVar46 = (int)uVar32 + 1;\u000a          uVar32 = (ulong)uVar46;\u000a        } while ((int)uVar46 < 4);\u000a      }\u000a      sVar17 = XRRConfigCurrentRate(lVar44);\u000a      local_208 = (FILE *)0x0;\u000a      if (0.00000000 <= (double)__stream_00) {\u000a        lVar48 = XRRConfigRates(lVar44,uVar45 & 0xffffffff,local_188);\u000a        if (local_188[0] < 1) {\u000a          __c = 0;\u000a        }\u000a        else {\u000a          lVar31 = 0;\u000a          do {\u000a            __c = (int)lVar31;\u000a            if ((double)__stream_00 == (double)(int)*(short *)(lVar48 + lVar31 * 2))\u000a            goto joined_r0x0040537d;\u000a            lVar31 = lVar31 + 1;\u000a          } while (lVar31 < (long)local_188[0]);\u000a          __c = (int)lVar31;\u000a        }\u000ajoined_r0x0040537d:\u000a        local_208 = __stream_00;\u000a        if (__c == local_188[0]) {\u000a          fprintf(__stream_00,(char *)stderr,"Rate %.2f Hz not available for this size\u005cn");\u000a                    /* WARNING: Subroutine does not return */\u000a          exit(1);\u000a        }\u000a      }\u000a      else {\u000a        if ((uint)uVar45 == (uint)uVar16) {\u000a          local_208 = (FILE *)(double)(int)sVar17;\u000a        }\u000a      }\u000a      local_158 = uVar32;\u000a      if (local_1ac != 0) {\u000a        local_158 = uVar32;\u000a        XRRQueryVersion(dpy,&local_f8,&local_180);\u000a        printf("Server reports RandR version %d.%d\u005cn",(ulong)local_f8 & 0xffffffff,(ulong)local_180)\u000a        ;\u000a      }\u000a      local_1c0 = local_1c0 | local_1d8;\u000a      if (local_1c0 != 0) {\u000a        uVar22 = 0x4053e8;\u000a        puts(" SZ:    Pixels          Physical       Refresh");\u000a        if (0 < (int)local_1c8) {\u000a          uVar32 = 0;\u000a          local_190 = lVar44;\u000a          do {\u000a            lVar44 = local_190;\u000a            uVar52 = 0x20;\u000a            if (uVar32 == (ulong)uVar16) {\u000a              uVar52 = 0x2a;\u000a            }\u000a            lVar48 = uVar32 * 0x10;\u000a            printf("%c%-2d %5d x %-5d  (%4dmm x%4dmm )",uVar52,uVar32 & 0xffffffff,\u000a                   (ulong)*(uint *)(lVar41 + lVar48),(ulong)*(uint *)(lVar41 + 4 + lVar48),\u000a                   (ulong)*(uint *)(lVar41 + 8 + lVar48),(ulong)*(uint *)(lVar41 + 0xc + lVar48),\u000a                   uVar22);\u000a            lVar44 = XRRConfigRates(lVar44,uVar32 & 0xffffffff,local_188);\u000a            if ((local_188[0] != 0) && (printf("  "), 0 < local_188[0])) {\u000a              lVar48 = 0;\u000a              do {\u000a                uVar22 = 0x20;\u000a                if (*(short *)(lVar44 + lVar48 * 2) == sVar17) {\u000a                  uVar22 = 0x2a;\u000a                }\u000a                if (uVar32 != (ulong)uVar16) {\u000a                  uVar22 = 0x20;\u000a                }\u000a                printf("%c%-4d",uVar22);\u000a                lVar48 = lVar48 + 1;\u000a              } while (lVar48 < (long)local_188[0]);\u000a            }\u000a            uVar22 = 0x4054e4;\u000a            putchar(10);\u000a            uVar32 = uVar32 + 1;\u000a            lVar44 = local_190;\u000a          } while ((long)uVar32 < (long)(int)local_1c8);\u000a        }\u000a      }\u000a      uVar46 = XRRConfigRotations(lVar44,&local_1b8);\u000a      if (local_16c == 0) {\u000a        uVar39 = 0;\u000a      }\u000a      else {\u000a        uVar39 = ~(uint)local_1b8 & 0x10;\u000a      }\u000a      if ((int)local_148 != 0) {\u000a        uVar39 = uVar39 | ~(uint)local_1b8 & 0x20;\u000a      }\u000a      if (local_1d8 != 0) {\u000a        __s2 = rotation_name();\u000a        printf("Current rotation - %s\u005cn",__s2);\u000a        __s2 = reflection_name();\u000a        printf("Current reflection - %s\u005cn",__s2);\u000a        printf("Rotations possible - ");\u000a        lVar41 = 0;\u000a        do {\u000a          if (((uVar46 & 0xffff) >> ((uint)lVar41 & 0x1f) & 1) != 0) {\u000a            printf("%s ",direction[lVar41]);\u000a          }\u000a          lVar41 = lVar41 + 1;\u000a        } while (lVar41 != 4);\u000a        putchar(10);\u000a        printf("Reflections possible - ");\u000a        if ((uVar46 & 0x30) == 0) {\u000a          __s2 = "none";\u000aLAB_004055ff:\u000a          printf(__s2);\u000a        }\u000a        else {\u000a          if ((uVar46 & 0x10) != 0) {\u000a            printf("X Axis ");\u000a          }\u000a          if ((uVar46 & 0x20) != 0) {\u000a            __s2 = "Y Axis";\u000a            goto LAB_004055ff;\u000a          }\u000a        }\u000a        putchar(10);\u000a      }\u000a      if (verbose != 1) goto LAB_0040567e;\u000a      printf("Setting size to %d, rotation to %s\u005cn",uVar45 & 0xffffffff,\u000a             direction[(long)(int)local_158]);\u000a      printf("Setting reflection on ");\u000a      if (uVar39 == 0) {\u000a        __s2 = "neither axis";\u000aLAB_0040566d:\u000a        printf(__s2);\u000a      }\u000a      else {\u000a        if ((uVar39 & 0x10) != 0) {\u000a          printf("X Axis ");\u000a        }\u000a        if ((uVar39 & 0x20) != 0) {\u000a          __s2 = "Y Axis";\u000a          goto LAB_0040566d;\u000a        }\u000a      }\u000a      putchar(10);\u000aLAB_0040567e:\u000a      uVar22 = 0x405696;\u000a      XSelectInput(dpy,root,0x20000);\u000a      if ((bVar13) && ((dryrun & 1) == 0)) {\u000a        uVar22 = 0x4056be;\u000a        XRRSelectInput(dpy,root,1);\u000a      }\u000a      __c = 3;\u000a      if ((bVar13) && ((dryrun & 1) == 0)) {\u000a        __c = XRRSetScreenConfigAndRate\u000a                        (dpy,lVar44,root,uVar45 & 0xffff,\u000a                         (ulong)(uVar39 | 1 << ((byte)local_158 & 0x1f)) & 0xffff,\u000a                         (ulong)(uint)(int)(short)(int)(double)local_208,0,uVar22);\u000a      }\u000a      iVar47 = 0;\u000a      if ((__c == 3) && (iVar47 = 0, (bVar13 & (dryrun ^ 1)) != 0)) {\u000a        puts("Failed to change the screen configuration!");\u000a        iVar47 = 1;\u000a      }\u000a      if ((((dryrun == 0) && ((!bVar13 | (verbose ^ 1) & 1) == 0)) && ((uint)uVar45 != (uint)uVar16)\u000a          ) && (__c == 0)) {\u000a        while( true ) {\u000a          XNextEvent(dpy);\u000a          printf("Event received, type = %d\u005cn");\u000a          XRRUpdateConfiguration(&local_f8);\u000a          if ((int)local_f8 == 0x16) {\u000a            puts("Received ConfigureNotify Event!");\u000a          }\u000a          if ((int)local_f8 == local_13c) break;\u000a          if ((int)local_f8 != 0x16) {\u000a            printf("unknown event received, type = %d!\u005cn");\u000a          }\u000a        }\u000a        puts("Got a screen change notify event!");\u000a        printf(" window = %d\u005cn root = %d\u005cn size_index = %d\u005cn rotation %d\u005cn",(ulong)local_d8[0],\u000a               (ulong)local_d0[0],(ulong)local_b8,(ulong)local_b4);\u000a        printf(" timestamp = %ld, config_timestamp = %ld\u005cn",local_c8,local_c0);\u000a        printf(" Rotation = %x\u005cn");\u000a        printf(" %d X %d pixels, %d X %d mm\u005cn",(ulong)local_b0,(ulong)local_ac,(ulong)local_a8,\u000a               (ulong)local_a4);\u000a        printf("Display width   %d, height   %d\u005cn",(ulong)(uint)dpy->screens[(long)screen].width,\u000a               (ulong)(uint)dpy->screens[(long)screen].height);\u000a        printf("Display widthmm %d, heightmm %d\u005cn",(ulong)(uint)dpy->screens[(long)screen].mwidth,\u000a               (ulong)(uint)dpy->screens[(long)screen].mheight);\u000a        if (local_b6 < 6) {\u000a          printf("new Subpixel rendering model is %s\u005cn",order[(ulong)local_b6]);\u000a        }\u000a        else {\u000a          printf("Unknown subpixel order, value = %d\u005cn");\u000a        }\u000a      }\u000a      XRRFreeScreenConfigInfo(lVar44);\u000a      return iVar47;\u000a    }\u000a  }\u000a  else {\u000a    get_screen(1);\u000a    get_crtcs();\u000a    get_outputs();\u000a    set_positions();\u000a    set_screen_size();\u000a    pick_crtcs();\u000a    set_crtcs();\u000a    mark_changing_crtcs();\u000a    if (dpi_output_name == (char *)0x0) {\u000aLAB_00404c1e:\u000a      if (fb_width_mm == 0) goto LAB_00404c35;\u000aLAB_00404c27:\u000a      if (fb_height_mm == 0) goto LAB_00404c35;\u000a    }\u000a    else {\u000a      poVar25 = find_output_by_name(dpi_output_name);\u000a      if (poVar25 == (output_t *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        fatal("Cannot find output %s\u005cn",dpi_output_name);\u000a      }\u000a      pXVar8 = poVar25->output_info;\u000a      if (((pXVar8 == (XRROutputInfo *)0x0) ||\u000a          (mode = poVar25->mode_info, mode == (XRRModeInfo *)0x0)) ||\u000a         (uVar45 = pXVar8->mm_height, uVar45 == 0)) goto LAB_00404c1e;\u000a      if ((fb_width != mode->width) || (fb_height != mode->height)) {\u000a        auVar51 = subpd(CONCAT88(SUB168(CONCAT412(DAT_00409964,\u000a                                                  ZEXT812(uVar45) &\u000a                                                  (undefined  [12])0xffffffffffffffff |\u000a                                                  (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                                 CONCAT44(DAT_00409960,\u000a                                          SUB124(ZEXT812(uVar45) &\u000a                                                 (undefined  [12])0xffffffffffffffff,0))),\u000a                        _DAT_00409970);\u000a        auVar51 = addpd(CONCAT412(SUB164(auVar51 >> 0x20,0),\u000a                                  CONCAT48(SUB164(auVar51,0),SUB168(auVar51 >> 0x40,0))),auVar51);\u000a        dpi = ((double)(ulong)mode->height * DAT_00409910) / SUB168(auVar51,0);\u000a        goto LAB_00404c1e;\u000a      }\u000a      fb_width_mm = *(int *)&pXVar8->mm_width;\u000a      fb_height_mm = (int)uVar45;\u000a      if (fb_width_mm != 0) goto LAB_00404c27;\u000aLAB_00404c35:\u000a      pSVar10 = dpy->screens;\u000a      lVar44 = (long)screen;\u000a      if (((fb_width == pSVar10[lVar44].width) && (fb_height == pSVar10[lVar44].height)) &&\u000a         (dpi == 0.00000000)) {\u000a        fb_width_mm = pSVar10[lVar44].mwidth;\u000a        fb_height_mm = dpy->screens[lVar44].mheight;\u000a      }\u000a      else {\u000a        if (dpi <= 0.00000000) {\u000a          dpi = ((double)pSVar10[lVar44].height * DAT_00409910) / (double)pSVar10[lVar44].mheight;\u000a        }\u000a        fb_width_mm = (int)(((double)fb_width * DAT_00409910) / dpi);\u000a        fb_height_mm = (int)(((double)fb_height * DAT_00409910) / dpi);\u000a      }\u000a    }\u000a    set_panning();\u000a    set_gamma();\u000a    apply();\u000a    if ((uint)local_190 == 0) goto LAB_00404f09;\u000a  }\u000a  if (has_1_5 == 0) {\u000a    __s2 = "RandR 1.5 not supported";\u000aLAB_004059e3:\u000a    puts(__s2);\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  get_screen(1);\u000a  get_monitors(1);\u000a  get_crtcs();\u000a  get_outputs();\u000a  p_Var11 = (_umonitor *)umonitors;\u000a  while (p_Var11 != (_umonitor *)0x0) {\u000a    if (((umonitor_t *)p_Var11)->set == 0) {\u000a      type = XInternAtom(dpy,((umonitor_t *)p_Var11)->name,1);\u000a      if (type == 0) {\u000aLAB_00404d86:\u000a        printf("No monitor named \u005c'%s\u005c'\u005cn",((umonitor_t *)p_Var11)->name);\u000a      }\u000a      else {\u000a        if (monitors == (monitors_t *)0x0) {\u000a          puts("No monitors");\u000a        }\u000a        else {\u000a          if (monitors->n < 1) {\u000a            __c = 0;\u000a          }\u000a          else {\u000a            pXVar28 = monitors->monitors;\u000a            lVar44 = 0;\u000a            do {\u000a              __c = (int)lVar44;\u000a              if (pXVar28->name == type) break;\u000a              lVar44 = lVar44 + 1;\u000a              __c = (int)lVar44;\u000a              pXVar28 = pXVar28 + 1;\u000a            } while (lVar44 < (long)monitors->n);\u000a          }\u000a          if (__c == monitors->n) goto LAB_00404d86;\u000a          XRRDeleteMonitor(dpy,root,type);\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      uVar22 = XInternAtom(dpy,((umonitor_t *)p_Var11)->name,0);\u000a      puVar27 = (undefined8 *)XRRAllocateMonitor(dpy,(ulong)(uint)((umonitor_t *)p_Var11)->noutput);\u000a      *puVar27 = uVar22;\u000a      *(int *)(puVar27 + 1) = ((umonitor_t *)p_Var11)->primary;\u000a      *(int *)((long)puVar27 + 0x14) = ((umonitor_t *)p_Var11)->x;\u000a      *(int *)(puVar27 + 3) = ((umonitor_t *)p_Var11)->y;\u000a      *(int *)((long)puVar27 + 0x1c) = ((umonitor_t *)p_Var11)->width;\u000a      *(int *)(puVar27 + 4) = ((umonitor_t *)p_Var11)->height;\u000a      *(int *)((long)puVar27 + 0x24) = ((umonitor_t *)p_Var11)->mmwidth;\u000a      *(int *)(puVar27 + 5) = ((umonitor_t *)p_Var11)->mmheight;\u000a      if (0 < ((umonitor_t *)p_Var11)->noutput) {\u000a        lVar41 = 0;\u000a        lVar44 = 0;\u000a        do {\u000a          poVar25 = find_output((name_t *)((long)&((umonitor_t *)p_Var11)->outputs->kind + lVar41));\u000a          if (poVar25 == (output_t *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a            fatal("cannot find output\u005cn");\u000a          }\u000a          *(XID *)(puVar27[6] + lVar44 * 8) = (poVar25->output).xid;\u000a          lVar44 = lVar44 + 1;\u000a          lVar41 = lVar41 + 0x20;\u000a        } while (lVar44 < (long)((umonitor_t *)p_Var11)->noutput);\u000a      }\u000a      XRRSetMonitor(dpy,root,puVar27);\u000a      XRRFreeMonitors(puVar27);\u000a    }\u000a    p_Var11 = ((umonitor_t *)p_Var11)->next;\u000a  }\u000aLAB_00404f09:\u000a  XSync(dpy,0);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p668
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x1d8\nMOV RBP,RSI\nMOV R14D,EDI\nMOV dword ptr [0xac + RSP],0x0\nMOV dword ptr [0xa8 + RSP],0x0\nMOV RAX,qword ptr [RBP]\nMOV qword ptr [0x0060d2f0],RAX\nCMP R14D,0x2\nJL 0x0040396f\nMOVSXD RAX,R14D\nMOV qword ptr [0x100 + RSP],RAX\nMOVSD XMM0,qword ptr [0x004098e8]\nMOV R15D,0x1\nMOV EAX,0xffffffff\nMOV qword ptr [0xb0 + RSP],RAX\nMOV dword ptr [RSP + 0x30],0x0\nMOV dword ptr [RSP + 0x8],0x0\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x28],RAX\nMOV R13D,0xffffffff\nMOV dword ptr [RSP + 0x24],0x0\nMOV dword ptr [RSP + 0x5c],0x0\nMOV dword ptr [0xa0 + RSP],0x0\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x18],RAX\nMOV dword ptr [RSP + 0x20],0x0\nMOV dword ptr [RSP + 0x60],0x0\nMOV dword ptr [RSP + 0x34],0x0\nMOV dword ptr [RSP + 0x70],0x0\nMOV dword ptr [RSP + 0x48],0x0\nMOV dword ptr [0x90 + RSP],0x0\nMOV dword ptr [RSP + 0x6c],0x0\nMOV dword ptr [RSP + 0x68],0x0\nMOV dword ptr [RSP + 0x78],0x0\nMOV dword ptr [0x94 + RSP],0x0\nMOV dword ptr [0x98 + RSP],0x0\nMOV dword ptr [RSP + 0x64],0x0\nMOV dword ptr [0x9c + RSP],0x0\nXOR EAX,EAX\nMOV qword ptr [0xc0 + RSP],RAX\nJMP 0x00403300\nMOV byte ptr [0x0060d2f8],0x1\nJMP 0x00403959\nMOV byte ptr [0x0060d2fc],0x1\nMOV byte ptr [0x0060d2f8],0x1\nJMP 0x00403959\nMOV byte ptr [0x0060d300],0x1\nJMP 0x00403959\nMOV dword ptr [RSP + 0x64],0x1\nJMP 0x00403959\nINC R15D\nCMP R15D,R14D\nJGE 0x0040592e\nMOVSXD RBX,R15D\nMOV RDI,qword ptr [RBP + RBX*0x8]\nMOV ESI,0x409d15\nXOR EAX,EAX\nLEA RDX,[0xac + RSP]\nLEA RCX,[0xa8 + RSP]\nCALL 0x00401da0\nMOV dword ptr [RSP + 0x24],0x1\nCMP EAX,0x2\nJNZ 0x004022d9\nMOV dword ptr [0xa0 + RSP],0x1\nMOV dword ptr [RSP + 0x8],0x1\nJMP 0x00403959\nINC R15D\nCMP R15D,R14D\nJGE 0x0040592e\nMOVSXD RAX,R15D\nMOV RDI,qword ptr [RBP + RAX*0x8]\nCALL 0x00405d00\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x00402301\nMOVSD qword ptr [0x90 + RAX],XMM0\nOR byte ptr [RAX + 0x8],0x80\nMOV dword ptr [RSP + 0x20],0x1\nMOV dword ptr [RSP + 0x24],0x1\nMOV dword ptr [RSP + 0x8],0x1\nJMP 0x0040395e\nMOV RDI,qword ptr [RBP + RBX*0x8]\nCALL 0x00405cc0\nMOV R13D,EAX\nTEST R13D,R13D\nMOV dword ptr [RSP + 0x8],0x1\nMOVSD XMM0,qword ptr [RSP]\nJNS 0x0040395e\nJMP 0x00405a1a\nMOV dword ptr [RSP + 0x24],0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nMOV dword ptr [RSP + 0x8],0x1\nJMP 0x0040395e\nMOV dword ptr [RSP + 0x5c],0x1\nMOV dword ptr [RSP + 0x8],0x1\nJMP 0x00403959\nINC R15D\nCMP R15D,R14D\nJGE 0x00405a41\nMOVSXD RAX,R15D\nMOV RDI,qword ptr [RBP + RAX*0x8]\nCALL 0x00405cc0\nMOV dword ptr [0x0060d2d0],EAX\nTEST EAX,EAX\nMOVSD XMM0,qword ptr [RSP]\nJNS 0x0040395e\nJMP 0x00405a50\nMOV dword ptr [RSP + 0x30],0x1\nJMP 0x00403959\nMOV byte ptr [0x0060d304],0x1\nMOV dword ptr [RSP + 0x60],0x1\nMOV dword ptr [RSP + 0x8],0x1\nJMP 0x00403959\nINC R15D\nCMP R15D,R14D\nJGE 0x0040592e\nMOV qword ptr [RSP + 0x10],R13\nMOVSXD RBX,R15D\nMOV RDI,qword ptr [RBP + RBX*0x8]\nMOV EDX,0xa\nLEA RSI,[0x110 + RSP]\nCALL 0x00401cd0\nMOV RCX,qword ptr [RBP + RBX*0x8]\nCMP RCX,qword ptr [0x110 + RSP]\nMOV qword ptr [RSP + 0x8],RBX\nJNZ 0x0040241a\nMOV RBX,qword ptr [RBP + RBX*0x8]\nXOR R13D,R13D\nMOV RDI,qword ptr [0x409aa0 + R13*0x8]\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402417\nINC R13\nCMP R13,0x4\nJL 0x004023d3\nJMP 0x00405a26\nMOV dword ptr [0x9c + RSP],0x1\nJMP 0x004022c4\nMOV EAX,0x1\nMOV qword ptr [0xc0 + RSP],RAX\nJMP 0x004022c4\nMOV RAX,R13\nCMP EAX,0x4\nJNC 0x00405a26\nMOV qword ptr [0xb0 + RSP],RAX\nMOV dword ptr [RSP + 0x24],0x1\nMOV dword ptr [RSP + 0x8],0x1\nMOVSD XMM0,qword ptr [RSP]\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x0040395e\nINC R15D\nCMP R15D,R14D\nJGE 0x00405a41\nMOVSXD RBX,R15D\nMOV RDI,qword ptr [RBP + RBX*0x8]\nCALL 0x00405d30\nMOV dword ptr [RSP + 0x20],0x1\nMOV RCX,RAX\nMOV qword ptr [RSP + 0x18],RCX\nTEST RAX,RAX\nJZ 0x004024fc\nMOV dword ptr [RSP + 0x8],0x1\nJMP 0x00403959\nMOV RSI,RBX\nMOV RBX,qword ptr [RSP + 0x18]\nTEST RBX,RBX\nJZ 0x00405b21\nINC R15D\nCMP R15D,R14D\nJGE 0x00405933\nLEA RDI,[RBX + 0x40]\nMOVSXD RAX,R15D\nMOV RSI,qword ptr [RBP + RAX*0x8]\nMOV EDX,0x6\nCALL 0x00405db0\nOR byte ptr [RBX + 0x8],0x1\nJMP 0x00403959\nMOV RSI,RAX\nTEST RBX,RBX\nJZ 0x00405b21\nINC R15D\nCMP R15D,R14D\nJGE 0x00405933\nLEA RDI,[RBX + 0x70]\nMOVSXD RAX,R15D\nMOV RSI,qword ptr [RBP + RAX*0x8]\nMOV EDX,0x3\nCALL 0x00405db0\nOR byte ptr [RBX + 0x8],0x2\nJMP 0x00403959\nCALL 0x00405d70\nMOV RCX,RAX\nMOV qword ptr [RSP + 0x18],RCX\nLEA RDI,[RAX + 0x18]\nMOV RSI,qword ptr [RBP + RBX*0x8]\nMOV EDX,0x3\nCALL 0x00405db0\nMOV dword ptr [RSP + 0x8],0x1\nJMP 0x00403959\nMOV RSI,qword ptr [RSP + 0x38]\nTEST RBX,RBX\nJZ 0x00405b21\nLEA RDI,[RBX + 0x70]\nCALL 0x00405e50\nOR byte ptr [RBX + 0x8],0x2\nJMP 0x00403959\nTEST RBX,RBX\nJZ 0x00405b1c\nINC R15D\nCMP R15D,R14D\nJGE 0x0040592e\nMOVSXD RAX,R15D\nMOV qword ptr [RSP + 0x38],RAX\nMOV RAX,qword ptr [RBP + RAX*0x8]\nMOV qword ptr [RSP + 0x10],RAX\nXOR EBX,EBX\nMOV RDI,qword ptr [0x409aa0 + RBX*0x8]\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040259a\nINC RBX\nCMP RBX,0x4\nJL 0x00402572\nCMP EBX,0x4\nJZ 0x00405a97\nMOVSD XMM0,qword ptr [RSP]\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RSI,RAX\nMOVZX EAX,word ptr [0xd8 + RSI]\nAND EAX,0xfff0\nMOV EDX,0x1\nMOV ECX,EBX\nSHL EDX,CL\nOR EDX,EAX\nMOV word ptr [0xd8 + RSI],DX\nOR byte ptr [RSI + 0x8],0x10\nJMP 0x0040395e\nMOV RSI,qword ptr [RSP + 0x38]\nTEST RBX,RBX\nJZ 0x00405b21\nINC R15D\nCMP R15D,R14D\nJGE 0x00405933\nMOVSXD R12,R15D\nMOV RDI,qword ptr [RBP + R12*0x8]\nMOV RBX,qword ptr [RSP + 0x18]\nLEA RDX,[0xd0 + RBX]\nLEA RCX,[0xd4 + RBX]\nMOV ESI,0x409d15\nXOR EAX,EAX\nCALL 0x00401da0\nCMP EAX,0x2\nJNZ 0x00405aa3\nOR byte ptr [RBX + 0x8],0x8\nJMP 0x00403959\nTEST RBX,RBX\nJZ 0x00405b1c\nINC R15D\nCMP R15D,R14D\nJGE 0x0040592e\nMOVSXD R13,R15D\nMOV RAX,qword ptr [RBP + R13*0x8]\nMOV qword ptr [RSP + 0x38],RAX\nXOR EBX,EBX\nMOV RDI,qword ptr [0x409ad0 + RBX*0x8]\nMOV RSI,qword ptr [RSP + 0x38]\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040266d\nINC RBX\nCMP RBX,0x4\nJL 0x00402645\nCMP EBX,0x4\nJZ 0x00405ab4\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RCX,RAX\nMOVZX EAX,word ptr [0xd8 + RCX]\nAND EAX,0xffcf\nSHL EBX,0x4\nOR EBX,EAX\nMOV word ptr [0xd8 + RCX],BX\nOR byte ptr [RCX + 0x8],0x20\nJMP 0x0040243b\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00405b3e\nINC R15D\nCMP R15D,R14D\nJGE 0x00405a41\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RCX,RAX\nMOV dword ptr [0xc0 + RCX],0x0\nJMP 0x00402776\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00405b3e\nINC R15D\nCMP R15D,R14D\nJGE 0x00405a41\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RCX,RAX\nMOV dword ptr [0xc0 + RCX],0x1\nJMP 0x00402776\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00405b3e\nINC R15D\nCMP R15D,R14D\nJGE 0x00405a41\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RCX,RAX\nMOV dword ptr [0xc0 + RCX],0x2\nJMP 0x00402776\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00405b3e\nINC R15D\nCMP R15D,R14D\nJGE 0x00405a41\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RCX,RAX\nMOV dword ptr [0xc0 + RCX],0x3\nJMP 0x00402776\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00405b3e\nINC R15D\nCMP R15D,R14D\nJGE 0x00405a41\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RCX,RAX\nMOV dword ptr [0xc0 + RCX],0x4\nMOVSXD RAX,R15D\nMOV RAX,qword ptr [RBP + RAX*0x8]\nMOV qword ptr [0xc8 + RCX],RAX\nOR byte ptr [RCX + 0x8],0x4\nJMP 0x0040243b\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00405b3e\nINC R15D\nCMP R15D,R14D\nJGE 0x00405a41\nMOVSXD RAX,R15D\nMOV qword ptr [0xd0 + RSP],RAX\nMOV RDI,qword ptr [RBP + RAX*0x8]\nMOV RAX,qword ptr [RSP + 0x18]\nLEA RDX,[0xf0 + RAX]\nLEA RCX,[0xf4 + RAX]\nLEA R8,[0xe8 + RAX]\nLEA R9,[0xec + RAX]\nLEA RSI,[0x100 + RAX]\nMOV qword ptr [RSP + 0x38],RSI\nLEA RSI,[0x104 + RAX]\nMOV qword ptr [0xf8 + RSP],RSI\nLEA R10,[0xf8 + RAX]\nLEA RSI,[0xfc + RAX]\nMOV qword ptr [0xf0 + RSP],RSI\nLEA RBX,[0x108 + RAX]\nLEA RSI,[0x10c + RAX]\nMOV qword ptr [0xe8 + RSP],RSI\nLEA R13,[0x110 + RAX]\nLEA R11,[0x114 + RAX]\nMOV ESI,0x409ec6\nMOV EAX,0x0\nMOV qword ptr [0xe0 + RSP],R8\nMOV qword ptr [0xd8 + RSP],R9\nPUSH R11\nPUSH R13\nPUSH qword ptr [0xf8 + RSP]\nPUSH RBX\nPUSH qword ptr [0x110 + RSP]\nMOV R13,R10\nPUSH R10\nPUSH qword ptr [0x128 + RSP]\nPUSH qword ptr [RSP + 0x70]\nCALL 0x00401da0\nADD RSP,0x40\nADD EAX,-0x2\nROR EAX,1\nCMP EAX,0x5\nJA 0x00405ac3\nJMP qword ptr [0x4099a0 + RAX*0x8]\nMOV RAX,qword ptr [0xd8 + RSP]\nMOV dword ptr [RAX],0x0\nMOV RAX,qword ptr [0xe0 + RSP]\nMOV dword ptr [RAX],0x0\nXORPD XMM0,XMM0\nMOVUPD xmmword ptr [R13],XMM0\nXORPD XMM0,XMM0\nMOVUPD xmmword ptr [RBX],XMM0\nMOV RAX,qword ptr [RSP + 0x18]\nOR byte ptr [RAX + 0x9],0x4\nJMP 0x0040243b\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00405b3e\nINC R15D\nCMP R15D,R14D\nJGE 0x00405a41\nMOVSXD RBX,R15D\nMOV RDI,qword ptr [RBP + RBX*0x8]\nMOV RAX,qword ptr [RSP + 0x18]\nLEA RDX,[0x168 + RAX]\nLEA RCX,[0x16c + RAX]\nLEA R8,[0x170 + RAX]\nMOV ESI,0x409ef2\nXOR EAX,EAX\nCALL 0x00401da0\nCMP EAX,0x3\nJZ 0x00402954\nJMP 0x00405ad5\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00405b3e\nINC R15D\nCMP R15D,R14D\nJGE 0x00405a41\nMOVSXD RBX,R15D\nMOV RDI,qword ptr [RBP + RBX*0x8]\nMOV RAX,qword ptr [RSP + 0x18]\nLEA RDX,[0x174 + RAX]\nMOV ESI,0x40a55a\nXOR EAX,EAX\nCALL 0x00401da0\nCMP EAX,0x1\nJNZ 0x00405ad5\nMOV RAX,qword ptr [RSP + 0x18]\nOR byte ptr [RAX + 0x9],0x8\nMOV dword ptr [RSP + 0x20],0x1\nJMP 0x0040243b\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00405b3e\nMOV RAX,qword ptr [RSP + 0x18]\nOR byte ptr [RAX + 0x9],0x10\nMOV dword ptr [0x178 + RAX],0x1\nJMP 0x0040295d\nMOV byte ptr [0x0060d308],0x1\nJMP 0x0040295d\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00405b3e\nADD R15D,0x2\nCMP R15D,R14D\nJGE 0x00405ae4\nMOV EDI,0x18\nCALL 0x00401d70\nMOV RCX,qword ptr [RSP + 0x18]\nMOV RDX,RCX\nMOV RCX,qword ptr [RDX + 0x10]\nMOV qword ptr [RAX],RCX\nMOV qword ptr [RDX + 0x10],RAX\nMOV RCX,qword ptr [RBP + R12*0x8 + 0x8]\nMOV qword ptr [RAX + 0x8],RCX\nMOVSXD RCX,R15D\nMOV RCX,qword ptr [RBP + RCX*0x8]\nMOV qword ptr [RAX + 0x10],RCX\nOR byte ptr [RDX + 0x9],0x1\nMOV dword ptr [RSP + 0x70],0x1\nJMP 0x0040295d\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00405b1c\nINC R15D\nCMP R15D,R14D\nJGE 0x0040592e\nMOVSXD RBX,R15D\nMOV RDI,qword ptr [RBP + RBX*0x8]\nMOV ESI,0x409f47\nXOR EAX,EAX\nLEA RDX,[0x110 + RSP]\nLEA RCX,[RSP + 0x40]\nCALL 0x00401da0\nCMP EAX,0x2\nJNZ 0x00405aee\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RBX,RAX\nLEA RDI,[0x128 + RBX]\nCALL 0x00405e60\nMOVSD XMM0,qword ptr [0x110 + RSP]\nMOVSD XMM1,qword ptr [0x00409900]\nMULSD XMM0,XMM1\nCVTTSD2SI EAX,XMM0\nMOV dword ptr [0x128 + RBX],EAX\nMOVSD XMM0,qword ptr [RSP + 0x40]\nMULSD XMM0,XMM1\nCVTTSD2SI EAX,XMM0\nMOV dword ptr [0x138 + RBX],EAX\nMOV dword ptr [0x148 + RBX],0x10000\nMOVSD XMM0,qword ptr [0x110 + RSP]\nMOVSD XMM1,qword ptr [RSP + 0x40]\nMOVSD XMM2,qword ptr [0x00409908]\nUCOMISD XMM1,XMM2\nMOV EAX,0x409f82\nMOV ECX,0x409f79\nCMOVNZ RAX,RCX\nCMOVP RAX,RCX\nUCOMISD XMM0,XMM2\nCMOVNZ RAX,RCX\nCMOVP RAX,RCX\nMOV qword ptr [0x150 + RBX],RAX\nMOV dword ptr [0x158 + RBX],0x0\nMOV qword ptr [0x160 + RBX],0x0\nOR byte ptr [RBX + 0x9],0x2\nJMP 0x0040243b\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00405b1c\nINC R15D\nCMP R15D,R14D\nJGE 0x0040592e\nMOVSXD RBX,R15D\nMOV RDI,qword ptr [RBP + RBX*0x8]\nMOV ESI,0x409d15\nXOR EAX,EAX\nLEA RDX,[0x110 + RSP]\nLEA RCX,[RSP + 0x40]\nCALL 0x00401da0\nCMP EAX,0x2\nJNZ 0x00405aff\nMOV EAX,dword ptr [0x110 + RSP]\nTEST EAX,EAX\nJLE 0x00405b10\nMOV ECX,dword ptr [RSP + 0x40]\nTEST ECX,ECX\nJLE 0x00405b10\nMOV RDX,qword ptr [RSP + 0x18]\nMOV dword ptr [0x11c + RDX],EAX\nMOV dword ptr [0x120 + RDX],ECX\nOR byte ptr [RDX + 0x9],0x2\nJMP 0x0040243b\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00405b1c\nINC R15D\nCMP R15D,R14D\nJGE 0x0040592e\nMOV RAX,qword ptr [RSP + 0x18]\nLEA R12,[0x128 + RAX]\nMOV RDI,R12\nCALL 0x00405e60\nMOVSXD R13,R15D\nMOV RBX,qword ptr [RBP + R13*0x8]\nMOV ESI,0x409ffb\nMOV RDI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402c83\nSUB RSP,0x8\nMOV ESI,0x40a000\nMOV EAX,0x0\nMOV RDI,RBX\nLEA RDX,[0x118 + RSP]\nLEA RCX,[0x120 + RSP]\nLEA R8,[0x128 + RSP]\nLEA R9,[0x130 + RSP]\nLEA RBX,[0x158 + RSP]\nPUSH RBX\nLEA RBX,[0x158 + RSP]\nPUSH RBX\nLEA RBX,[0x158 + RSP]\nPUSH RBX\nLEA RBX,[0x158 + RSP]\nPUSH RBX\nLEA RBX,[0x158 + RSP]\nPUSH RBX\nCALL 0x00401da0\nADD RSP,0x30\nCMP EAX,0x9\nJNZ 0x00405b2d\nMOV RDI,R12\nCALL 0x00405e60\nLEA RAX,[0x110 + RSP]\nXOR ECX,ECX\nMOV EDX,0x3\nMOV RSI,R12\nMOV RDI,RAX\nMOVSD XMM0,qword ptr [RDI]\nMULSD XMM0,qword ptr [0x00409900]\nCVTTSD2SI EBX,XMM0\nMOV dword ptr [RSI],EBX\nADD RDI,0x8\nADD RSI,0x4\nDEC RDX\nJNZ 0x00402c2e\nINC RCX\nADD RAX,0x18\nADD R12,0xc\nCMP RCX,0x3\nJNZ 0x00402c23\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [0x150 + RAX],0x409f79\nMOV dword ptr [0x158 + RAX],0x0\nMOV qword ptr [0x160 + RAX],0x0\nMOV RAX,qword ptr [RSP + 0x18]\nOR byte ptr [RAX + 0x9],0x2\nJMP 0x0040243b\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00405b3e\nMOV RAX,qword ptr [RSP + 0x18]\nMOV RBX,RAX\nLEA RDI,[RBX + 0x70]\nXOR ESI,ESI\nCALL 0x00405eb0\nLEA RDI,[RBX + 0x40]\nXOR ESI,ESI\nCALL 0x00405eb0\nOR byte ptr [RBX + 0x8],0x3\nJMP 0x0040243b\nINC R15D\nCMP R15D,R14D\nJGE 0x00405a41\nMOVSXD RBX,R15D\nMOV RDI,qword ptr [RBP + RBX*0x8]\nMOV ESI,0x409d15\nMOV EDX,0x60d30c\nMOV ECX,0x60d310\nXOR EAX,EAX\nCALL 0x00401da0\nMOV dword ptr [RSP + 0x20],0x1\nCMP EAX,0x2\nMOV dword ptr [RSP + 0x8],0x1\nMOVSD XMM0,qword ptr [RSP]\nMOV R13,qword ptr [RSP + 0x10]\nJZ 0x0040395e\nJMP 0x00405b48\nINC R15D\nCMP R15D,R14D\nJGE 0x00405a41\nMOVSXD RBX,R15D\nMOV RDI,qword ptr [RBP + RBX*0x8]\nMOV ESI,0x409d15\nMOV EDX,0x60d314\nMOV ECX,0x60d318\nXOR EAX,EAX\nCALL 0x00401da0\nMOV dword ptr [RSP + 0x20],0x1\nCMP EAX,0x2\nMOV dword ptr [RSP + 0x8],0x1\nMOVSD XMM0,qword ptr [RSP]\nMOV R13,qword ptr [RSP + 0x10]\nJZ 0x0040395e\nJMP 0x00405b59\nINC R15D\nCMP R15D,R14D\nJGE 0x0040592e\nMOVSXD RBX,R15D\nMOV RDI,qword ptr [RBP + RBX*0x8]\nLEA RSI,[0x110 + RSP]\nCALL 0x00401b20\nMOVSD qword ptr [0x0060d320],XMM0\nMOV RAX,qword ptr [RBP + RBX*0x8]\nCMP RAX,qword ptr [0x110 + RSP]\nJNZ 0x00402dd4\nMOV qword ptr [0x0060d320],0x0\nMOV RAX,qword ptr [RBP + RBX*0x8]\nMOV qword ptr [0x0060d328],RAX\nJMP 0x00402dd4\nCMP qword ptr [RSP + 0x18],0x0\nJZ 0x00402dfb\nMOV RAX,qword ptr [RSP + 0x18]\nMOV dword ptr [0x118 + RAX],0x1\nOR byte ptr [RAX + 0x8],0x40\nMOV dword ptr [RSP + 0x20],0x1\nJMP 0x00402433\nMOV dword ptr [RSP + 0x60],0x1\nJMP 0x0040243b\nMOV dword ptr [RSP + 0x48],0x1\nJMP 0x0040243b\nMOV byte ptr [0x0060d330],0x1\nMOV dword ptr [RSP + 0x20],0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nJMP 0x00402433\nMOV EDI,0x1\nMOV ESI,0xa0\nCALL 0x00401c60\nMOV qword ptr [RSP + 0x8],RAX\nLEA EAX,[R15 + 0xa]\nMOV dword ptr [RSP + 0x34],EAX\nCMP EAX,R14D\nMOV RSI,qword ptr [RBP + R12*0x8 + 0x8]\nJGE 0x00405b6a\nLEA RAX,[R12 + 0x1]\nMOV RBX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x48],RSI\nMOV RDI,qword ptr [RBP + RAX*0x8]\nCALL 0x00401ba0\nMOV dword ptr [RBX + 0x50],EAX\nMOV RDI,qword ptr [RBP + R12*0x8 + 0x10]\nCALL 0x00405d00\nMULSD XMM0,qword ptr [0x004098f0]\nMOVAPD XMM1,XMM0\nMOVSD XMM2,qword ptr [0x004098f8]\nSUBSD XMM1,XMM2\nCVTTSD2SI RAX,XMM1\nMOV RCX,-0x8000000000000000\nXOR RAX,RCX\nCVTTSD2SI RCX,XMM0\nUCOMISD XMM0,XMM2\nCMOVNC RCX,RAX\nMOV qword ptr [RBX + 0x20],RCX\nMOV RDI,qword ptr [RBP + R12*0x8 + 0x18]\nCALL 0x00405cc0\nMOV dword ptr [RBX + 0x18],EAX\nMOV RDI,qword ptr [RBP + R12*0x8 + 0x20]\nCALL 0x00405cc0\nMOV dword ptr [RBX + 0x28],EAX\nMOV RDI,qword ptr [RBP + R12*0x8 + 0x28]\nCALL 0x00405cc0\nMOV dword ptr [RBX + 0x2c],EAX\nMOV RDI,qword ptr [RBP + R12*0x8 + 0x30]\nCALL 0x00405cc0\nMOV dword ptr [RBX + 0x30],EAX\nMOV RDI,qword ptr [RBP + R12*0x8 + 0x38]\nCALL 0x00405cc0\nMOV dword ptr [RBX + 0x1c],EAX\nMOV RDI,qword ptr [RBP + R12*0x8 + 0x40]\nCALL 0x00405cc0\nMOV dword ptr [RBX + 0x38],EAX\nMOV RDI,qword ptr [RBP + R12*0x8 + 0x48]\nCALL 0x00405cc0\nMOV dword ptr [RBX + 0x3c],EAX\nADD R15D,0xb\nMOVSXD RAX,dword ptr [RSP + 0x34]\nMOV RDI,qword ptr [RBP + RAX*0x8]\nCALL 0x00405cc0\nMOV dword ptr [RBX + 0x40],EAX\nMOV qword ptr [RBX + 0x58],0x0\nCMP R15D,R14D\nJGE 0x00402f65\nMOVSXD R15,R15D\nMOV R12,qword ptr [RBP + R15*0x8]\nMOV RBX,-0x90\nMOV RDI,qword ptr [0x409b90 + RBX]\nMOV RSI,R12\nCALL 0x00401ab0\nTEST EAX,EAX\nJZ 0x00402f48\nADD RBX,0x10\nJNZ 0x00402f2d\nJMP 0x00402f65\nMOV RAX,qword ptr [0x409b98 + RBX]\nMOV RCX,qword ptr [RSP + 0x8]\nOR qword ptr [RCX + 0x58],RAX\nINC R15\nCMP R15,qword ptr [0x100 + RSP]\nJL 0x00402f21\nMOV RAX,qword ptr [0x0060d338]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV dword ptr [RCX + 0x8],0x0\nMOV qword ptr [0x0060d338],RCX\nJMP 0x00403081\nMOV EDI,0x1\nMOV ESI,0xa0\nCALL 0x00401c60\nMOV RBX,RAX\nINC R15D\nCMP R15D,R14D\nJGE 0x0040592e\nMOV RDI,RBX\nSUB RDI,-0x80\nMOVSXD RAX,R15D\nMOV RSI,qword ptr [RBP + RAX*0x8]\nMOV EDX,0x3\nCALL 0x00405db0\nMOV dword ptr [RBX + 0x8],0x1\nJMP 0x00403070\nMOV EDI,0x1\nMOV ESI,0xa0\nCALL 0x00401c60\nMOV RBX,RAX\nADD R15D,0x2\nCMP R15D,R14D\nJGE 0x00405b76\nLEA RDI,[RBX + 0x60]\nMOV RSI,qword ptr [RBP + R12*0x8 + 0x8]\nMOV EDX,0x3\nCALL 0x00405db0\nMOV RDI,RBX\nSUB RDI,-0x80\nMOVSXD RAX,R15D\nMOV RSI,qword ptr [RBP + RAX*0x8]\nMOV EDX,0x3\nCALL 0x00405db0\nMOV dword ptr [RBX + 0x8],0x2\nJMP 0x00403070\nMOV EDI,0x1\nMOV ESI,0xa0\nCALL 0x00401c60\nMOV RBX,RAX\nADD R15D,0x2\nCMP R15D,R14D\nJGE 0x00405b76\nLEA RDI,[RBX + 0x60]\nMOV RSI,qword ptr [RBP + R12*0x8 + 0x8]\nMOV EDX,0x3\nCALL 0x00405db0\nMOV RDI,RBX\nSUB RDI,-0x80\nMOVSXD RAX,R15D\nMOV RSI,qword ptr [RBP + RAX*0x8]\nMOV EDX,0x3\nCALL 0x00405db0\nMOV dword ptr [RBX + 0x8],0x3\nMOV RAX,qword ptr [0x0060d338]\nMOV qword ptr [RBX],RAX\nMOV qword ptr [0x0060d338],RBX\nMOV dword ptr [RSP + 0x34],0x1\nJMP 0x00402433\nMOV dword ptr [0x90 + RSP],0x1\nJMP 0x00402433\nLEA EAX,[R15 + 0x1]\nCMP EAX,R14D\nJGE 0x00405a41\nCDQE\nMOV RSI,qword ptr [RBP + RAX*0x8]\nMOV EDI,0x60d340\nMOV EDX,0x7\nCALL 0x00405db0\nADD R15D,0x2\nCMP R15D,R14D\nJGE 0x00403128\nMOVSXD RAX,R15D\nMOV RSI,qword ptr [RBP + RAX*0x8]\nMOV EDI,0x60d360\nMOV EDX,0x7\nCALL 0x00405db0\nJMP 0x00403134\nLEA EAX,[R15 + 0x1]\nCMP EAX,R14D\nJGE 0x00405a41\nCDQE\nMOV RSI,qword ptr [RBP + RAX*0x8]\nMOV EDI,0x60d340\nMOV EDX,0x7\nCALL 0x00405db0\nADD R15D,0x2\nCMP R15D,R14D\nJGE 0x00403151\nMOVSXD RAX,R15D\nMOV RSI,qword ptr [RBP + RAX*0x8]\nMOV EDI,0x60d380\nMOV EDX,0x7\nCALL 0x00405db0\nJMP 0x0040315d\nMOV EDI,0x60d360\nXOR ESI,ESI\nCALL 0x00405eb0\nMOV dword ptr [RSP + 0x6c],0x1\nJMP 0x00402433\nMOV dword ptr [0x94 + RSP],0x1\nJMP 0x00402433\nMOV EDI,0x60d380\nXOR ESI,ESI\nCALL 0x00405eb0\nMOV dword ptr [RSP + 0x68],0x1\nJMP 0x00402433\nMOV dword ptr [0x98 + RSP],0x1\nJMP 0x00402433\nMOV EDI,0x1\nMOV ESI,0x40\nCALL 0x00401c60\nMOV qword ptr [RSP + 0x8],RAX\nADD R15D,0x3\nCMP R15D,R14D\nJGE 0x00405b87\nMOV RAX,qword ptr [RBP + R12*0x8 + 0x8]\nCMP byte ptr [RAX],0x2a\nJNZ 0x004031b4\nMOV RCX,qword ptr [RSP + 0x8]\nMOV dword ptr [RCX + 0x14],0x1\nINC RAX\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX + 0x8],RAX\nMOV dword ptr [RCX + 0x10],0x1\nMOV RBX,qword ptr [RBP + R12*0x8 + 0x10]\nMOV ESI,0x40a0bd\nMOV EDX,0x4\nMOV RDI,RBX\nCALL 0x00401ac0\nTEST EAX,EAX\nJZ 0x0040321f\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RDX,[RAX + 0x20]\nLEA RCX,[RAX + 0x28]\nLEA R8,[RAX + 0x24]\nLEA R9,[RAX + 0x2c]\nLEA R10,[RAX + 0x18]\nLEA R11,[RAX + 0x1c]\nMOV ESI,0x40a1b2\nMOV EAX,0x0\nMOV RDI,RBX\nPUSH R11\nPUSH R10\nCALL 0x00401da0\nADD RSP,0x10\nCMP EAX,0x6\nJNZ 0x00405b98\nMOVSXD RAX,R15D\nMOV RBX,qword ptr [RBP + RAX*0x8]\nMOV ESI,0x409ffb\nMOV RDI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x004032d2\nMOV EDI,0x40a1ee\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00401bb0\nMOV ESI,0x40a1fe\nMOV RDI,RBX\nJMP 0x004032c5\nMOV RBX,qword ptr [RSP + 0x8]\nMOV RDI,qword ptr [RBX + 0x38]\nMOVSXD RSI,dword ptr [RBX + 0x30]\nSHL RSI,0x5\nADD RSI,0x20\nCALL 0x00401e40\nMOV qword ptr [RBX + 0x38],RAX\nMOV EDI,0x40a200\nXOR EAX,EAX\nMOV RSI,R12\nCALL 0x00401bb0\nMOVSXD RDI,dword ptr [RBX + 0x30]\nLEA EAX,[RDI + 0x1]\nSHL RDI,0x5\nADD RDI,qword ptr [RBX + 0x38]\nMOV dword ptr [RBX + 0x30],EAX\nMOV EDX,0x7\nMOV RSI,R12\nCALL 0x00405db0\nMOV RAX,qword ptr [RBX + 0x38]\nMOVSXD RCX,dword ptr [RBX + 0x30]\nSHL RCX,0x5\nMOV RSI,qword ptr [RAX + RCX*0x1 + -0x18]\nMOV EDI,0x40a210\nXOR EAX,EAX\nCALL 0x00401bb0\nXOR EDI,EDI\nMOV ESI,0x40a1fe\nCALL 0x00401ec0\nMOV R12,RAX\nTEST R12,R12\nJNZ 0x00403255\nMOV ECX,0x60d3a0\nMOV RAX,RCX\nMOV RCX,qword ptr [RAX]\nTEST RCX,RCX\nJNZ 0x004032d7\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RAX],RCX\nMOV dword ptr [RSP + 0x78],0x1\nJMP 0x00402433\nMOVSD qword ptr [RSP],XMM0\nMOVSXD R12,R15D\nMOV RBX,qword ptr [RBP + R12*0x8]\nMOV EDI,0x409cb9\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00403940\nMOV EDI,0x409cb8\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00403940\nCMP byte ptr [RBX],0x2d\nJNZ 0x00403350\nCMP byte ptr [RBX + 0x1],0x64\nJNZ 0x00403350\nCMP byte ptr [RBX + 0x2],0x0\nJZ 0x00403940\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [RBP + R12*0x8]\nMOV EDI,0x409cdf\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00405922\nMOV EDI,0x409cde\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00405922\nMOV EDI,0x409ce5\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402200\nMOV EDI,0x409cef\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040220c\nMOV EDI,0x409cf8\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040221f\nMOV EDI,0x409d01\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040222b\nCMP byte ptr [RBX],0x2d\nJNZ 0x004033e8\nCMP byte ptr [RBX + 0x1],0x73\nJNZ 0x004033e8\nCMP byte ptr [RBX + 0x2],0x0\nJZ 0x00402238\nMOV RBX,qword ptr [RBP + R12*0x8]\nMOV EDI,0x409d0e\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402238\nCMP byte ptr [RBX],0x2d\nJNZ 0x00403417\nCMP byte ptr [RBX + 0x1],0x72\nJNZ 0x00403417\nCMP byte ptr [RBX + 0x2],0x0\nJZ 0x0040228d\nMOV RBX,qword ptr [RBP + R12*0x8]\nMOV EDI,0x409d43\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040228d\nMOV EDI,0x409d4a\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040228d\nCMP byte ptr [RBX],0x2d\nJNZ 0x0040345b\nCMP byte ptr [RBX + 0x1],0x76\nJNZ 0x0040345b\nCMP byte ptr [RBX + 0x2],0x0\nJZ 0x0040231d\nMOV RBX,qword ptr [RBP + R12*0x8]\nMOV EDI,0x409d57\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040231d\nCMP byte ptr [RBX],0x2d\nMOVSD XMM0,qword ptr [RSP]\nJNZ 0x0040348f\nCMP byte ptr [RBX + 0x1],0x78\nJNZ 0x0040348f\nCMP byte ptr [RBX + 0x2],0x0\nJZ 0x004023f5\nMOV RAX,qword ptr [RBP + R12*0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x004034a9\nCMP byte ptr [RAX + 0x1],0x79\nJNZ 0x004034a9\nCMP byte ptr [RAX + 0x2],0x0\nJZ 0x00402405\nMOV RBX,qword ptr [RBP + R12*0x8]\nMOV EDI,0x409d67\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402332\nCMP byte ptr [RBX],0x2d\nJNZ 0x004034d8\nCMP byte ptr [RBX + 0x1],0x71\nJNZ 0x004034d8\nCMP byte ptr [RBX + 0x2],0x0\nJZ 0x00402363\nMOV RBX,qword ptr [RBP + R12*0x8]\nMOV EDI,0x409d9a\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402363\nCMP byte ptr [RBX],0x2d\nJNZ 0x00403507\nCMP byte ptr [RBX + 0x1],0x6f\nJNZ 0x00403507\nCMP byte ptr [RBX + 0x2],0x0\nJZ 0x0040238c\nMOV RBX,qword ptr [RBP + R12*0x8]\nMOV EDI,0x409da5\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040238c\nMOV EDI,0x409dce\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402370\nMOV EDI,0x409dd5\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402370\nMOV EDI,0x409ddd\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402370\nMOV EDI,0x409de8\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402370\nMOV EDI,0x409df5\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040244a\nMOV EDI,0x409dfe\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402489\nMOV EDI,0x409e25\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nMOV RAX,RBX\nMOV RBX,qword ptr [RSP + 0x18]\nJZ 0x004024c5\nMOV EDI,0x409e2c\nMOV qword ptr [RSP + 0x38],RAX\nMOV RSI,RAX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402529\nMOV EDI,0x409e38\nMOV RSI,qword ptr [RSP + 0x38]\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x004025ce\nMOV EDI,0x409e62\nMOV RSI,qword ptr [RSP + 0x38]\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402549\nMOV EDI,0x409e6d\nMOV RSI,qword ptr [RSP + 0x38]\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402549\nMOV qword ptr [RSP + 0x10],R13\nMOV EDI,0x409e76\nMOV RSI,qword ptr [RSP + 0x38]\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402621\nMOV EDI,0x409e80\nMOV RSI,qword ptr [RSP + 0x38]\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402621\nMOV EDI,0x409e8d\nMOV RSI,qword ptr [RSP + 0x38]\nMOV RBX,RSI\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402696\nMOV EDI,0x409e97\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x004026c5\nMOV EDI,0x409ea2\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x004026f4\nMOV EDI,0x409eaa\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402720\nMOV EDI,0x409eb2\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040274c\nMOV EDI,0x409ebc\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040278e\nMOV EDI,0x409eea\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x004028c3\nMOV EDI,0x409efb\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402913\nMOV EDI,0x409f08\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040296a\nMOV EDI,0x409f12\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040298b\nMOV EDI,0x409f1e\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402994\nMOV EDI,0x409f3f\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x004029f0\nMOV EDI,0x409f8a\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402ae1\nMOV EDI,0x409fef\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402b58\nMOV EDI,0x40a04e\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402c91\nMOV EDI,0x40a054\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402cc4\nMOV EDI,0x40a085\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402d16\nMOV EDI,0x40a0b5\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402d68\nMOV EDI,0x40a0bb\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402db9\nMOV EDI,0x40a0c2\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402de1\nMOV EDI,0x40a0c8\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402dee\nMOV EDI,0x40a0cd\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402e16\nMOV EDI,0x40a105\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402f87\nMOV EDI,0x40a10e\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00402fca\nMOV EDI,0x40a118\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040301e\nMOV EDI,0x40a122\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040308e\nMOV EDI,0x40a132\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040309e\nMOV EDI,0x40a14c\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x004030e3\nMOV EDI,0x40a165\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x00403141\nMOV EDI,0x40a174\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040316a\nMOV EDI,0x40a189\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJZ 0x0040317a\nMOV EDI,0x40a220\nMOV RSI,RBX\nCALL 0x00401c70\nTEST EAX,EAX\nJNZ 0x00405bad\nMOV EDI,0x1\nMOV ESI,0x40\nCALL 0x00401c60\nINC R15D\nCMP R15D,R14D\nJGE 0x0040592e\nMOVSXD RCX,R15D\nMOV RCX,qword ptr [RBP + RCX*0x8]\nMOV qword ptr [RAX + 0x8],RCX\nMOV EDX,0x60d3a0\nMOV RCX,RDX\nMOV RDX,qword ptr [RCX]\nTEST RDX,RDX\nJNZ 0x0040391f\nMOV qword ptr [RCX],RAX\nJMP 0x004032ea\nINC R15D\nCMP R15D,R14D\nJGE 0x0040592e\nMOVSXD RAX,R15D\nMOV RAX,qword ptr [RBP + RAX*0x8]\nMOV qword ptr [RSP + 0x28],RAX\nMOVSD XMM0,qword ptr [RSP]\nINC R15D\nCMP R15D,R14D\nJL 0x00403300\nJMP 0x00403a3a\nMOVSD XMM0,qword ptr [0x004098e8]\nMOV R13D,0xffffffff\nXOR EAX,EAX\nMOV qword ptr [0xc0 + RSP],RAX\nMOV dword ptr [0x9c + RSP],0x0\nMOV dword ptr [RSP + 0x64],0x0\nMOV dword ptr [0x98 + RSP],0x0\nMOV dword ptr [0x94 + RSP],0x0\nMOV dword ptr [RSP + 0x78],0x0\nMOV dword ptr [RSP + 0x68],0x0\nMOV dword ptr [RSP + 0x6c],0x0\nMOV dword ptr [0x90 + RSP],0x0\nMOV dword ptr [RSP + 0x48],0x0\nMOV dword ptr [RSP + 0x70],0x0\nMOV dword ptr [RSP + 0x34],0x0\nMOV dword ptr [RSP + 0x60],0x0\nMOV dword ptr [RSP + 0x20],0x0\nMOV dword ptr [0xa0 + RSP],0x0\nMOV dword ptr [RSP + 0x5c],0x0\nMOV dword ptr [RSP + 0x24],0x0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x28],RAX\nMOV dword ptr [RSP + 0x8],0x0\nMOV dword ptr [RSP + 0x30],0x0\nMOV EAX,0xffffffff\nMOV qword ptr [0xb0 + RSP],RAX\nMOVSD qword ptr [RSP],XMM0\nCMP dword ptr [RSP + 0x8],0x0\nMOV R12D,0x1\nMOV EAX,dword ptr [RSP + 0x30]\nCMOVZ EAX,R12D\nCMP byte ptr [0x0060d2f8],0x1\nJNZ 0x00403a7d\nCMP dword ptr [RSP + 0x24],0x0\nMOV EAX,0x1\nMOV ECX,dword ptr [RSP + 0x48]\nCMOVZ EAX,ECX\nMOV R14D,dword ptr [RSP + 0x20]\nTEST R14D,R14D\nCMOVZ ECX,EAX\nMOV dword ptr [RSP + 0x48],ECX\nJMP 0x00403a85\nMOV R12D,EAX\nMOV R14D,dword ptr [RSP + 0x20]\nMOV R15D,dword ptr [RSP + 0x70]\nMOV RBP,qword ptr [RSP + 0x28]\nCMP dword ptr [RSP + 0x5c],0x0\nJZ 0x00403aa0\nMOV EDI,0x40ba30\nCALL 0x00401b00\nMOV RDI,RBP\nCALL 0x00401c80\nMOV qword ptr [0x0060d3a8],RAX\nTEST RAX,RAX\nJZ 0x00405993\nCMP dword ptr [0x0060d2d0],0x0\nJNS 0x00403acd\nMOV EAX,dword ptr [0xe0 + RAX]\nMOV dword ptr [0x0060d2d0],EAX\nMOVSXD RDX,dword ptr [0x0060d2d0]\nMOV RDI,qword ptr [0x0060d3a8]\nMOV ECX,dword ptr [0xe4 + RDI]\nCMP EDX,ECX\nJGE 0x004059c1\nMOV RAX,qword ptr [0xe8 + RDI]\nSHL RDX,0x7\nMOV RAX,qword ptr [RAX + RDX*0x1 + 0x10]\nMOV qword ptr [0x0060d3b0],RAX\nLEA RSI,[0xcc + RSP]\nLEA RDX,[0x10c + RSP]\nCALL 0x00401af0\nTEST EAX,EAX\nJZ 0x00405962\nMOV RDI,qword ptr [0x0060d3a8]\nLEA RSI,[0xbc + RSP]\nLEA RDX,[RSP + 0x74]\nCALL 0x00401b10\nTEST EAX,EAX\nJZ 0x00405962\nMOV EAX,dword ptr [0xbc + RSP]\nCMP EAX,0x2\nJL 0x00403b53\nMOV byte ptr [0x0060d3b8],0x1\nJMP 0x00403b72\nCMP EAX,0x1\nJNZ 0x00403b66\nCMP dword ptr [RSP + 0x74],0x2\nJL 0x00403b66\nMOV byte ptr [0x0060d3b8],0x1\nCMP EAX,0x1\nJNZ 0x00403b79\nCMP dword ptr [RSP + 0x74],0x3\nJL 0x00403b79\nMOV byte ptr [0x0060d3bc],0x1\nMOV EAX,dword ptr [0xbc + RSP]\nCMP EAX,0x2\nJL 0x00403b8e\nMOV byte ptr [0x0060d3c0],0x1\nJMP 0x00403bad\nCMP EAX,0x1\nJNZ 0x00403ba1\nCMP dword ptr [RSP + 0x74],0x4\nJL 0x00403ba1\nMOV byte ptr [0x0060d3c0],0x1\nCMP EAX,0x1\nJNZ 0x00403bb4\nCMP dword ptr [RSP + 0x74],0x5\nJL 0x00403bb4\nMOV byte ptr [0x0060d3c4],0x1\nCMP dword ptr [RSP + 0x34],0x0\nJZ 0x00403d0d\nTEST byte ptr [0x0060d3b8],0x1\nJZ 0x00403d0d\nMOV EDI,0x1\nCALL 0x00405ec0\nCALL 0x00405f50\nCALL 0x00406160\nMOV RBP,qword ptr [0x0060d338]\nTEST RBP,RBP\nJZ 0x00403cfd\nMOV EAX,dword ptr [RBP + 0x8]\nCMP RAX,0x3\nJA 0x00403cbd\nJMP qword ptr [0x4099d0 + RAX*0x8]\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nLEA RDX,[RBP + 0x10]\nCALL 0x00401cf0\nMOV RBP,qword ptr [RBP]\nTEST RBP,RBP\nJNZ 0x00403bf0\nJMP 0x00403cfd\nLEA RDI,[RBP + 0x60]\nCALL 0x004064d0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405952\nMOV RDI,RBP\nSUB RDI,-0x80\nCALL 0x00406340\nTEST RAX,RAX\nJZ 0x0040593f\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [RBX + 0x28]\nMOV RDX,qword ptr [RAX]\nCALL 0x00401d50\nMOV RBP,qword ptr [RBP]\nTEST RBP,RBP\nJNZ 0x00403bf0\nJMP 0x00403cfd\nLEA RDI,[RBP + 0x60]\nCALL 0x004064d0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405952\nMOV RDI,RBP\nSUB RDI,-0x80\nCALL 0x00406340\nTEST RAX,RAX\nJZ 0x0040593f\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [RBX + 0x28]\nMOV RDX,qword ptr [RAX]\nCALL 0x00401fb0\nMOV RBP,qword ptr [RBP]\nTEST RBP,RBP\nJNZ 0x00403bf0\nJMP 0x00403cfd\nMOV RDI,RBP\nSUB RDI,-0x80\nCALL 0x00406340\nTEST RAX,RAX\nJZ 0x0040593f\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [RAX]\nCALL 0x00401d10\nMOV RBP,qword ptr [RBP]\nTEST RBP,RBP\nJNZ 0x00403bf0\nMOV EAX,R15D\nOR EAX,dword ptr [RSP + 0x78]\nOR EAX,R14D\nJZ 0x00404f09\nTEST R15D,R15D\nJZ 0x00403fbe\nTEST byte ptr [0x0060d3b8],0x1\nJZ 0x00403fbe\nMOV dword ptr [RSP + 0x8],R12D\nMOV qword ptr [RSP + 0x10],R13\nMOV EDI,0x1\nCALL 0x00405ec0\nCALL 0x00405f50\nCALL 0x00406160\nMOV RBX,qword ptr [0x0060d3c8]\nTEST RBX,RBX\nJZ 0x00403fa6\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R13,qword ptr [RBX + 0x10]\nTEST R13,R13\nJZ 0x00403f9a\nMOV qword ptr [RSP + 0x28],RBX\nJMP 0x00403e70\nCMP R12,0x1f\nJZ 0x00403e0a\nCMP R12,0x4\nJZ 0x00403e2d\nTEST R12,R12\nJNZ 0x00403f8d\nMOV RDI,qword ptr [R13 + 0x10]\nMOV ESI,0x40b4b5\nXOR EAX,EAX\nLEA RDX,[0xb8 + RSP]\nCALL 0x00401da0\nCMP EAX,0x1\nJZ 0x00403dd7\nMOV RDI,qword ptr [R13 + 0x10]\nMOV ESI,0x40a614\nXOR EAX,EAX\nLEA RDX,[0xb8 + RSP]\nCALL 0x00401da0\nCMP EAX,0x1\nJNZ 0x00403e0a\nMOV R12,RBP\nMOVSXD RAX,dword ptr [0xb8 + RSP]\nMOV qword ptr [0x110 + RSP],RAX\nMOV dword ptr [RSP + 0x4c],0x1\nMOV R14D,0x20\nMOV ECX,0x13\nLEA RBX,[0x110 + RSP]\nJMP 0x00403f57\nMOV R12,RBP\nMOV RBX,qword ptr [R13 + 0x10]\nMOV RDI,RBX\nCALL 0x00401ba0\nMOV dword ptr [RSP + 0x4c],EAX\nMOV R14D,0x8\nMOV ECX,0x1f\nJMP 0x00403f57\nMOV R12,RBP\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [R13 + 0x10]\nXOR EDX,EDX\nCALL 0x00401d90\nMOV qword ptr [0x110 + RSP],RAX\nMOV dword ptr [RSP + 0x4c],0x1\nMOV ECX,0x4\nLEA RBX,[0x110 + RSP]\nJMP 0x00403f57\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [R13 + 0x8]\nXOR R12D,R12D\nXOR EDX,EDX\nCALL 0x00401d90\nMOV RBP,RAX\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [RBX + 0x28]\nSUB RSP,0x8\nMOV ECX,0x0\nMOV R8D,0x64\nMOV R9D,0x0\nMOV RDX,RBP\nLEA RAX,[RSP + 0x48]\nPUSH RAX\nLEA RAX,[0x98 + RSP]\nPUSH RAX\nLEA RAX,[0x98 + RSP]\nPUSH RAX\nLEA RAX,[0xc4 + RSP]\nPUSH RAX\nLEA RAX,[RSP + 0x78]\nPUSH RAX\nPUSH 0x0\nPUSH 0x0\nCALL 0x00401eb0\nADD RSP,0x40\nTEST EAX,EAX\nMOV R14D,0x0\nJNZ 0x00403f20\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [RBX + 0x28]\nMOV RDX,RBP\nCALL 0x00401ea0\nTEST RAX,RAX\nJZ 0x00403f10\nMOV R12,qword ptr [RSP + 0x50]\nMOV R14D,dword ptr [0xa4 + RSP]\nJMP 0x00403f20\nXOR R12D,R12D\nXOR R14D,R14D\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [R13 + 0x10]\nMOV EDX,dword ptr [0xa4 + RSP]\nMOV RSI,R12\nLEA RCX,[RSP + 0x4c]\nCALL 0x00406550\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00403d80\nMOV R12,RBP\nMOV RCX,qword ptr [RSP + 0x50]\nMOV R14D,dword ptr [0xa4 + RSP]\nMOV RBX,R15\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RBP,qword ptr [RSP + 0x28]\nMOV RSI,qword ptr [RBP + 0x28]\nMOV EAX,dword ptr [RSP + 0x4c]\nMOV R9D,0x0\nMOV RDX,R12\nMOV R8D,R14D\nPUSH RAX\nPUSH RBX\nMOV RBX,RBP\nCALL 0x00401f30\nADD RSP,0x10\nMOV RDI,R15\nCALL 0x00401a80\nMOV R13,qword ptr [R13]\nTEST R13,R13\nJNZ 0x00403e70\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nJNZ 0x00403d60\nMOV R14D,dword ptr [RSP + 0x20]\nTEST R14D,R14D\nMOV R13,qword ptr [RSP + 0x10]\nMOV R12D,dword ptr [RSP + 0x8]\nJZ 0x00404f09\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00404016\nMOV AL,byte ptr [0x0060d3c0]\nTEST AL,AL\nJZ 0x004059ef\nMOV EDI,0x1\nCALL 0x00405ec0\nCALL 0x00406730\nMOV EDI,0x60d340\nCALL 0x00406830\nMOV RBX,RAX\nMOV EDI,0x60d360\nCALL 0x00406830\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [RBX + 0x10]\nTEST RAX,RAX\nJZ 0x0040400f\nMOV RDX,qword ptr [RAX + 0x10]\nJMP 0x00404011\nXOR EDX,EDX\nCALL 0x00401e50\nCMP dword ptr [RSP + 0x68],0x0\nJZ 0x0040406e\nMOV AL,byte ptr [0x0060d3c0]\nTEST AL,AL\nJZ 0x004059fb\nMOV EDI,0x1\nCALL 0x00405ec0\nCALL 0x00406730\nMOV EDI,0x60d340\nCALL 0x00406830\nMOV RBX,RAX\nMOV EDI,0x60d380\nCALL 0x00406830\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [RBX + 0x10]\nTEST RAX,RAX\nJZ 0x00404067\nMOV RDX,qword ptr [RAX + 0x10]\nJMP 0x00404069\nXOR EDX,EDX\nCALL 0x00401dc0\nTEST R14D,R14D\nJZ 0x0040412b\nMOV EDI,0x1\nCALL 0x00405ec0\nCALL 0x00405f50\nCALL 0x00406160\nCALL 0x00406900\nCALL 0x00406ba0\nCALL 0x00406d80\nCALL 0x00406f30\nCALL 0x00406f70\nMOV RDI,qword ptr [0x0060d328]\nTEST RDI,RDI\nJZ 0x00404c1e\nCALL 0x00405d30\nTEST RAX,RAX\nJZ 0x00405a07\nMOV RCX,qword ptr [RAX + 0x38]\nTEST RCX,RCX\nJZ 0x00404c1e\nMOV RDX,qword ptr [0x98 + RAX]\nTEST RDX,RDX\nJZ 0x00404c1e\nMOV RAX,qword ptr [RCX + 0x28]\nTEST RAX,RAX\nJZ 0x00404c1e\nMOV EDI,dword ptr [0x0060d30c]\nMOV ESI,dword ptr [RDX + 0xc]\nCMP EDI,dword ptr [RDX + 0x8]\nJNZ 0x00404be5\nCMP dword ptr [0x0060d310],ESI\nJNZ 0x00404be5\nMOV ECX,dword ptr [RCX + 0x20]\nMOV dword ptr [0x0060d314],ECX\nMOV dword ptr [0x0060d318],EAX\nCMP dword ptr [0x0060d314],0x0\nJNZ 0x00404c27\nJMP 0x00404c35\nCMP dword ptr [RSP + 0x78],0x0\nJNZ 0x00404d30\nCMP dword ptr [RSP + 0x60],0x0\nJNZ 0x00404161\nTEST R12D,R12D\nSETZ AL\nCMP dword ptr [RSP + 0x48],0x0\nJNZ 0x00404f1e\nMOV CL,byte ptr [0x0060d3b8]\nXOR CL,0x1\nOR AL,CL\nTEST AL,0x1\nJNZ 0x00404f1e\nMOV EDI,dword ptr [RSP + 0x64]\nCALL 0x00405ec0\nCALL 0x00405f50\nCALL 0x00406160\nMOVSXD RSI,dword ptr [0x0060d2d0]\nMOV EDX,dword ptr [0x0060d3d8]\nMOV ECX,dword ptr [0x0060d3dc]\nMOV RAX,qword ptr [0x0060d3a8]\nMOV RAX,qword ptr [0xe8 + RAX]\nMOV RDI,RSI\nSHL RDI,0x7\nMOV R8D,dword ptr [RAX + RDI*0x1 + 0x18]\nMOV R9D,dword ptr [RAX + RDI*0x1 + 0x1c]\nMOV EBP,dword ptr [0x0060d3e0]\nMOV EBX,dword ptr [0x0060d3e4]\nMOV EDI,0x40a3b9\nMOV EAX,0x0\nPUSH RBX\nPUSH RBP\nCALL 0x00401bb0\nADD RSP,0x10\nMOV R15,qword ptr [0x0060d3c8]\nTEST R15,R15\nJZ 0x00404b93\nNOP word ptr [RAX + RAX*0x1]\nMOV R14,qword ptr [R15 + 0x38]\nMOV qword ptr [RSP + 0x28],R15\nMOV R15,qword ptr [R15 + 0x60]\nTEST R15,R15\nJZ 0x00404200\nMOV RBX,qword ptr [R15 + 0x28]\nJMP 0x00404202\nXOR EBX,EBX\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R13,qword ptr [0x98 + RBP]\nMOV RDI,RBP\nCALL 0x00407620\nMOV R12D,EAX\nMOV RSI,qword ptr [R14 + 0x10]\nMOVZX EAX,word ptr [R14 + 0x30]\nMOV RDX,qword ptr [0x409ba0 + RAX*0x8]\nMOV EDI,0x40a3f7\nXOR EAX,EAX\nCALL 0x00401bb0\nCMP dword ptr [0x178 + RBP],0x0\nJZ 0x0040424b\nMOV EDI,0x40a3fd\nXOR EAX,EAX\nCALL 0x00401bb0\nTEST R13,R13\nJZ 0x00404310\nTEST RBX,RBX\nJZ 0x00404270\nMOV ESI,dword ptr [RBX + 0x10]\nMOV EDX,dword ptr [RBX + 0x14]\nMOV ECX,dword ptr [RBX + 0x8]\nMOV R8D,dword ptr [RBX + 0xc]\nJMP 0x0040428a\nMOV ESI,dword ptr [R13 + 0x8]\nMOV EDX,dword ptr [R13 + 0xc]\nMOV RAX,qword ptr [RSP + 0x28]\nMOV ECX,dword ptr [0xd0 + RAX]\nMOV R8D,dword ptr [0xd4 + RAX]\nMOV EDI,0x40a434\nXOR EAX,EAX\nCALL 0x00401bb0\nCMP byte ptr [0x0060d2f8],0x1\nJNZ 0x004042af\nMOV ESI,dword ptr [R13]\nMOV EDI,0x40a406\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV RAX,qword ptr [RSP + 0x28]\nMOVZX EAX,word ptr [0xd8 + RAX]\nCMP EAX,0x1\nJNZ 0x004042c9\nTEST byte ptr [0x0060d2f8],0x1\nJZ 0x00404310\nMOVZX EDI,AX\nCALL 0x004076a0\nMOV RCX,RAX\nMOV EDI,0x40a61a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401bb0\nMOV RAX,qword ptr [RSP + 0x28]\nMOVZX EAX,word ptr [0xd8 + RAX]\nTEST AL,0x30\nJZ 0x00404310\nMOVZX EDI,AX\nCALL 0x004076d0\nMOV RCX,RAX\nMOV EDI,0x40a61a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401bb0\nNOP dword ptr [RAX]\nMOVZX R12D,R12W\nCMP R12D,0x1\nJNZ 0x00404327\nTEST byte ptr [0x0060d2f8],0x1\nJZ 0x004043bf\nMOV EDI,0x40a40e\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV EBP,0x1\nXOR EBX,EBX\nNOP word ptr [RAX + RAX*0x1]\nBT ESP,EBX\nJNC 0x0040436a\nTEST EBP,EBP\nJNZ 0x00404354\nMOV EDI,0x20\nCALL 0x00401aa0\nMOV RSI,qword ptr [0x409aa0 + RBX*0x8]\nXOR EBP,EBP\nMOV EDI,0x40aa5b\nXOR EAX,EAX\nCALL 0x00401bb0\nINC RBX\nCMP RBX,0x4\nJNZ 0x00404340\nTEST R12B,0x10\nJZ 0x00404395\nTEST EBP,EBP\nJNZ 0x00404387\nMOV EDI,0x20\nCALL 0x00401aa0\nXOR EBP,EBP\nMOV EDI,0x40a411\nXOR EAX,EAX\nCALL 0x00401bb0\nTEST R12B,0x20\nJZ 0x004043b5\nTEST EBP,EBP\nJNZ 0x004043a9\nMOV EDI,0x20\nCALL 0x00401aa0\nMOV EDI,0x40a418\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV EDI,0x29\nCALL 0x00401aa0\nTEST R13,R13\nJZ 0x004043d8\nMOV ESI,dword ptr [R14 + 0x20]\nMOV EDX,dword ptr [R14 + 0x28]\nMOV EDI,0x40a41f\nXOR EAX,EAX\nCALL 0x00401bb0\nTEST R15,R15\nJZ 0x00404486\nMOV RBX,qword ptr [R15 + 0x38]\nTEST RBX,RBX\nJZ 0x00404486\nMOV ESI,dword ptr [RBX + 0x10]\nTEST ESI,ESI\nJZ 0x00404486\nMOV EDX,dword ptr [RBX + 0x14]\nMOV ECX,dword ptr [RBX + 0x8]\nMOV R8D,dword ptr [RBX + 0xc]\nMOV EDI,0x40a42c\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV EAX,dword ptr [RBX + 0x20]\nTEST EAX,EAX\nJZ 0x0040442f\nMOV ECX,dword ptr [RBX + 0x18]\nCMP ECX,dword ptr [RBX + 0x8]\nJNZ 0x00404450\nCMP EAX,dword ptr [RBX + 0x10]\nJNZ 0x00404450\nCMP dword ptr [RBX + 0x28],0x0\nJNZ 0x00404450\nCMP dword ptr [RBX + 0x30],0x0\nJNZ 0x00404450\nMOV EAX,dword ptr [RBX + 0x24]\nTEST EAX,EAX\nJZ 0x00404486\nMOV ECX,dword ptr [RBX + 0x1c]\nCMP ECX,dword ptr [RBX + 0xc]\nJNZ 0x00404450\nCMP EAX,dword ptr [RBX + 0x14]\nJNZ 0x00404450\nCMP dword ptr [RBX + 0x2c],0x0\nJNZ 0x00404450\nCMP dword ptr [RBX + 0x34],0x0\nJZ 0x00404486\nNOP\nMOV ESI,dword ptr [RBX + 0x20]\nMOV EDX,dword ptr [RBX + 0x24]\nMOV ECX,dword ptr [RBX + 0x18]\nMOV R8D,dword ptr [RBX + 0x1c]\nMOV R9D,dword ptr [RBX + 0x28]\nMOV R10D,dword ptr [RBX + 0x2c]\nMOV EBP,dword ptr [RBX + 0x30]\nMOV EBX,dword ptr [RBX + 0x34]\nSUB RSP,0x8\nMOV EDI,0x40a441\nMOV EAX,0x0\nPUSH RBX\nPUSH RBP\nPUSH R10\nCALL 0x00401bb0\nADD RSP,0x20\nMOV EDI,0xa\nCALL 0x00401aa0\nCMP byte ptr [0x0060d2f8],0x1\nJNZ 0x00404720\nMOV R15,qword ptr [RSP + 0x28]\nMOV ESI,dword ptr [R15 + 0x28]\nMOV EDI,0x40a46a\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV ESI,dword ptr [R14]\nMOV EDI,0x40a47d\nXOR EAX,EAX\nCALL 0x00401bb0\nMOVZX EAX,word ptr [R14 + 0x32]\nMOV RSI,qword ptr [0x409bc0 + RAX*0x8]\nMOV EDI,0x40a48e\nXOR EAX,EAX\nCALL 0x00401bb0\nMOVSS XMM0,dword ptr [0x168 + R15]\nXORPS XMM3,XMM3\nUCOMISS XMM0,XMM3\nJNZ 0x004044ed\nJNP 0x0040453e\nMOVSS XMM1,dword ptr [0x16c + R15]\nUCOMISS XMM1,XMM3\nJNZ 0x004044fd\nJNP 0x0040453e\nMOVSS XMM2,dword ptr [0x170 + R15]\nUCOMISS XMM2,XMM3\nJNZ 0x0040450d\nJNP 0x0040453e\nCVTSS2SD XMM0,XMM0\nCVTSS2SD XMM1,XMM1\nCVTSS2SD XMM2,XMM2\nMOV EDI,0x40a49f\nMOV AL,0x3\nCALL 0x00401bb0\nMOVSS XMM0,dword ptr [0x174 + R15]\nCVTSS2SD XMM0,XMM0\nMOV EDI,0x40a4bf\nMOV AL,0x1\nCALL 0x00401bb0\nMOV EDI,0x40a4d3\nXOR EAX,EAX\nCALL 0x00401bb0\nCMP dword ptr [R14 + 0x40],0x0\nJLE 0x0040458e\nXOR EBX,EBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [R14 + 0x48]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nCALL 0x004076f0\nTEST RAX,RAX\nJZ 0x00404582\nMOV RSI,qword ptr [RAX + 0x20]\nMOV EDI,0x40a61a\nXOR EAX,EAX\nCALL 0x00401bb0\nINC RBX\nMOVSXD RAX,dword ptr [R14 + 0x40]\nCMP RBX,RAX\nJL 0x00404560\nMOV EDI,0xa\nCALL 0x00401aa0\nMOV RAX,qword ptr [R15 + 0x60]\nTEST RAX,RAX\nJZ 0x004045b0\nMOV ESI,dword ptr [RAX + 0x18]\nMOV EDI,0x40a4e0\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV EDI,0x40a4f1\nXOR EAX,EAX\nCALL 0x00401bb0\nCMP dword ptr [R14 + 0x34],0x0\nJLE 0x004045fd\nXOR EBX,EBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [R14 + 0x38]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nCALL 0x00407730\nTEST RAX,RAX\nJZ 0x004045f1\nMOV ESI,dword ptr [RAX + 0x18]\nMOV EDI,0x40b4b4\nXOR EAX,EAX\nCALL 0x00401bb0\nINC RBX\nMOVSXD RAX,dword ptr [R14 + 0x34]\nCMP RBX,RAX\nJL 0x004045d0\nMOV EDI,0xa\nCALL 0x00401aa0\nMOV RAX,qword ptr [R15 + 0x60]\nTEST RAX,RAX\nJZ 0x00404664\nMOV RBX,qword ptr [RAX + 0x38]\nTEST RBX,RBX\nJZ 0x00404664\nMOV ESI,dword ptr [RBX + 0x10]\nMOV EDX,dword ptr [RBX + 0x14]\nMOV ECX,dword ptr [RBX + 0x8]\nMOV R8D,dword ptr [RBX + 0xc]\nMOV EDI,0x40a4fe\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV ESI,dword ptr [RBX + 0x20]\nMOV EDX,dword ptr [RBX + 0x24]\nMOV ECX,dword ptr [RBX + 0x18]\nMOV R8D,dword ptr [RBX + 0x1c]\nMOV EDI,0x40a518\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV ESI,dword ptr [RBX + 0x28]\nMOV EDX,dword ptr [RBX + 0x2c]\nMOV ECX,dword ptr [RBX + 0x30]\nMOV R8D,dword ptr [RBX + 0x34]\nMOV EDI,0x40a532\nXOR EAX,EAX\nCALL 0x00401bb0\nCMP byte ptr [0x0060d2f8],0x1\nJNZ 0x00404730\nMOV EDI,0x40a54c\nXOR EAX,EAX\nCALL 0x00401bb0\nLEA R15,[0x128 + R15]\nXOR R12D,R12D\nNOP word ptr [RAX + RAX*0x1]\nMOV EBX,0x3\nMOV RBP,R15\nNOP dword ptr [RAX + RAX*0x1]\nMOV EAX,dword ptr [RBP]\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EAX\nMULSD XMM0,qword ptr [0x00409918]\nMOV EDI,0x40a559\nMOV AL,0x1\nCALL 0x00401bb0\nADD RBP,0x4\nDEC RBX\nJNZ 0x004046a0\nCMP R12,0x1\nJG 0x004046d9\nMOV EDI,0x40a55d\nXOR EAX,EAX\nCALL 0x00401bb0\nINC R12\nADD R15,0xc\nCMP R12,0x3\nJNZ 0x00404690\nMOV R15,qword ptr [RSP + 0x28]\nMOV RSI,qword ptr [0x150 + R15]\nTEST RSI,RSI\nJZ 0x00404703\nMOV EDI,0x40a56b\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV EDI,0xa\nCALL 0x00401aa0\nMOV AL,byte ptr [0x0060d2f8]\nTEST AL,0x1\nJZ 0x00404736\nJMP 0x00404750\nXOR EAX,EAX\nMOV R15,qword ptr [RSP + 0x28]\nTEST AL,0x1\nJZ 0x00404736\nJMP 0x00404750\nXOR EAX,EAX\nTEST AL,0x1\nJNZ 0x00404750\nTEST byte ptr [0x0060d304],0x1\nJNZ 0x00404750\nTEST AL,0x1\nJNZ 0x004049d1\nJMP 0x00404a40\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [R15 + 0x28]\nLEA RDX,[RSP + 0x50]\nCALL 0x00401ae0\nMOV qword ptr [RSP],RAX\nCMP dword ptr [RSP + 0x50],0x0\nJLE 0x004049c7\nXOR R13D,R13D\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RBX,qword ptr [RSP]\nMOV RSI,qword ptr [RBX + R13*0x8]\nCALL 0x00401df0\nMOV RBP,RAX\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [R15 + 0x28]\nMOV RDX,qword ptr [RBX + R13*0x8]\nSUB RSP,0x8\nMOV ECX,0x0\nMOV R8D,0x64\nMOV R9D,0x0\nLEA RAX,[0x118 + RSP]\nPUSH RAX\nLEA RAX,[0x90 + RSP]\nPUSH RAX\nLEA RAX,[RSP + 0x58]\nPUSH RAX\nLEA RAX,[RSP + 0x6c]\nPUSH RAX\nLEA RAX,[0xb0 + RSP]\nPUSH RAX\nPUSH 0x0\nPUSH 0x0\nCALL 0x00401eb0\nADD RSP,0x40\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [R15 + 0x28]\nMOV RDX,qword ptr [RBX + R13*0x8]\nCALL 0x00401ea0\nMOV R12,RAX\nMOV EDI,0x40a583\nXOR EAX,EAX\nMOV RSI,RBP\nCALL 0x00401bb0\nMOV ESI,dword ptr [RSP + 0x4c]\nMOV RDX,qword ptr [0x88 + RSP]\nMOV ECX,dword ptr [RSP + 0x40]\nMOV R8,qword ptr [0x110 + RSP]\nMOV RDI,RBP\nCALL 0x00407770\nCMP dword ptr [R12 + 0x4],0x0\nJZ 0x0040493a\nMOV EAX,dword ptr [R12 + 0xc]\nTEST EAX,EAX\nJLE 0x00404932\nCMP EAX,0x2\nMOV ESI,0x40aa5c\nMOV EAX,0x40b800\nCMOVZ RSI,RAX\nMOV EDI,0x40a589\nXOR EAX,EAX\nCALL 0x00401bb0\nCMP dword ptr [R12 + 0xc],0x2\nJL 0x00404923\nMOV EBP,0x1\nXOR R15D,R15D\nNOP\nMOV EDI,0x28\nCALL 0x00401aa0\nMOV RSI,qword ptr [0x88 + RSP]\nLEA EAX,[RBP + -0x1]\nMOVSXD RDX,EAX\nSHL RDX,0x3\nADD RDX,qword ptr [R12 + 0x10]\nMOV EDI,0x20\nCALL 0x004078a0\nMOV EDI,0x40a595\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV RSI,qword ptr [0x88 + RSP]\nMOVSXD RDX,EBP\nSHL RDX,0x3\nADD RDX,qword ptr [R12 + 0x10]\nMOV EDI,0x20\nCALL 0x004078a0\nMOV EDI,0x29\nCALL 0x00401aa0\nMOV EAX,dword ptr [R12 + 0xc]\nMOV ECX,EAX\nSHR ECX,0x1f\nADD ECX,EAX\nSAR ECX,1\nDEC ECX\nMOVSXD RAX,ECX\nCMP R15,RAX\nJGE 0x00404903\nMOV EDI,0x40a595\nXOR EAX,EAX\nCALL 0x00401bb0\nINC R15\nMOV EAX,dword ptr [R12 + 0xc]\nMOV ECX,EAX\nSHR ECX,0x1f\nADD ECX,EAX\nSAR ECX,1\nMOVSXD RAX,ECX\nADD EBP,0x2\nCMP R15,RAX\nJL 0x00404880\nMOV EDI,0xa\nCALL 0x00401aa0\nMOV R15,qword ptr [RSP + 0x28]\nCMP dword ptr [R12 + 0x4],0x0\nJNZ 0x004049ae\nCMP dword ptr [R12 + 0xc],0x0\nJLE 0x004049ae\nMOV EDI,0x40a598\nXOR EAX,EAX\nCALL 0x00401bb0\nCMP dword ptr [R12 + 0xc],0x0\nJLE 0x004049a4\nXOR EBP,EBP\nXOR EBX,EBX\nNOP word ptr [RAX + RAX*0x1]\nMOV RSI,qword ptr [0x88 + RSP]\nMOV RDX,qword ptr [R12 + 0x10]\nADD RDX,RBP\nMOV EDI,0x20\nCALL 0x004078a0\nMOVSXD RAX,dword ptr [R12 + 0xc]\nDEC RAX\nCMP RBX,RAX\nJGE 0x00404993\nMOV EDI,0x40a595\nXOR EAX,EAX\nCALL 0x00401bb0\nINC RBX\nMOVSXD RAX,dword ptr [R12 + 0xc]\nADD RBP,0x8\nCMP RBX,RAX\nJL 0x00404960\nMOV EDI,0xa\nCALL 0x00401aa0\nMOV RDI,R12\nCALL 0x00401a80\nINC R13\nMOVSXD RAX,dword ptr [RSP + 0x50]\nCMP R13,RAX\nJL 0x00404780\nMOV AL,byte ptr [0x0060d2f8]\nTEST AL,AL\nJZ 0x00404a40\nCMP dword ptr [R14 + 0x50],0x0\nMOV R12D,0x80000000\nJLE 0x00404b87\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [R14 + 0x58]\nMOV RDI,qword ptr [RAX + RBP*0x8]\nCALL 0x00407960\nMOV RBX,RAX\nXOR ESI,ESI\nCMP RBX,qword ptr [0x98 + R15]\nSETZ SIL\nMOVSXD RAX,dword ptr [R14 + 0x54]\nXOR EDX,EDX\nCMP RBP,RAX\nSETL DL\nMOV RDI,RBX\nCALL 0x004079a0\nOR qword ptr [RBX + 0x48],R12\nINC RBP\nMOVSXD RAX,dword ptr [R14 + 0x50]\nCMP RBP,RAX\nJL 0x004049f0\nJMP 0x00404b87\nMOVSXD RDI,dword ptr [R14 + 0x50]\nMOV ESI,0x4\nCALL 0x00401c60\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00405987\nCMP dword ptr [R14 + 0x50],0x0\nJLE 0x00404b7a\nXOR R15D,R15D\nNOP dword ptr [RAX + RAX*0x1]\nCMP dword ptr [R13 + R15*0x4],0x0\nJNZ 0x00404b6a\nMOV RAX,qword ptr [R14 + 0x58]\nMOV RDI,qword ptr [RAX + R15*0x8]\nCALL 0x00407960\nMOV R12,RAX\nMOV EDI,0x20\nCALL 0x00401aa0\nMOV RSI,qword ptr [R12 + 0x38]\nMOV EDI,0x40a5b5\nXOR EAX,EAX\nCALL 0x00401bb0\nMOVSXD RAX,dword ptr [R14 + 0x50]\nCMP R15,RAX\nJGE 0x00404b60\nMOV RBX,R15\nNOP word ptr [RAX + RAX*0x1]\nCMP dword ptr [R13 + RBX*0x4],0x0\nJNZ 0x00404b50\nMOV RAX,qword ptr [R14 + 0x58]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nCALL 0x00407960\nMOV RBP,RAX\nMOV RDI,qword ptr [R12 + 0x38]\nMOV RSI,qword ptr [RBP + 0x38]\nCALL 0x00401c70\nTEST EAX,EAX\nJNZ 0x00404b50\nMOV dword ptr [R13 + RBX*0x4],0x1\nMOV EAX,0x80000000\nOR qword ptr [RBP + 0x48],RAX\nMOV RDI,RBP\nCALL 0x00407ad0\nMOV EDI,0x40a5bd\nMOV AL,0x1\nCALL 0x00401bb0\nMOV RAX,qword ptr [RSP + 0x28]\nCMP RBP,qword ptr [0x98 + RAX]\nJZ 0x00404b29\nMOV EDI,0x20\nJMP 0x00404b2e\nMOV EDI,0x2a\nCALL 0x00401aa0\nMOVSXD RAX,dword ptr [R14 + 0x54]\nCMP RBX,RAX\nJGE 0x00404b43\nMOV EDI,0x2b\nJMP 0x00404b48\nMOV EDI,0x20\nCALL 0x00401aa0\nNOP dword ptr [RAX]\nINC RBX\nMOVSXD RAX,dword ptr [R14 + 0x50]\nCMP RBX,RAX\nJL 0x00404ac0\nMOV EDI,0xa\nCALL 0x00401aa0\nINC R15\nMOVSXD RAX,dword ptr [R14 + 0x50]\nCMP R15,RAX\nJL 0x00404a70\nMOV RDI,R13\nCALL 0x00401a80\nMOV R15,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [R15]\nTEST R15,R15\nJNZ 0x004041e0\nMOV RAX,qword ptr [0x0060d3e8]\nCMP dword ptr [RAX + 0x30],0x0\nJLE 0x00404bde\nXOR EBX,EBX\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [RAX + 0x38]\nCMP dword ptr [RDI + RBX*0x1 + 0x48],0x0\nJS 0x00404bc7\nADD RDI,RBX\nXOR ESI,ESI\nXOR EDX,EDX\nCALL 0x004079a0\nINC RBP\nMOV RAX,qword ptr [0x0060d3e8]\nMOVSXD RCX,dword ptr [RAX + 0x30]\nADD RBX,0x50\nCMP RBP,RCX\nJL 0x00404bb0\nXOR EDI,EDI\nCALL 0x00401f40\nMOV ECX,ESI\nCVTSI2SD XMM0,RCX\nMULSD XMM0,qword ptr [0x00409910]\nMOVQ XMM1,RAX\nPUNPCKLDQ XMM1,xmmword ptr [0x00409960]\nSUBPD XMM1,xmmword ptr [0x00409970]\nPSHUFD XMM2,XMM1,0x4e\nADDPD XMM2,XMM1\nDIVSD XMM0,XMM2\nMOVSD qword ptr [0x0060d320],XMM0\nCMP dword ptr [0x0060d314],0x0\nJZ 0x00404c35\nMOV EAX,dword ptr [0x0060d318]\nTEST EAX,EAX\nJNZ 0x00404d16\nMOV EAX,dword ptr [0x0060d30c]\nMOV RCX,qword ptr [0x0060d3a8]\nMOV RDX,qword ptr [0xe8 + RCX]\nMOVSXD RCX,dword ptr [0x0060d2d0]\nSHL RCX,0x7\nCMP EAX,dword ptr [RDX + RCX*0x1 + 0x18]\nJNZ 0x00404c98\nMOV ESI,dword ptr [0x0060d310]\nCMP ESI,dword ptr [RDX + RCX*0x1 + 0x1c]\nMOVSD XMM0,qword ptr [0x0060d320]\nJNZ 0x00404ca0\nXORPD XMM1,XMM1\nUCOMISD XMM0,XMM1\nJNZ 0x00404ca0\nJP 0x00404ca0\nMOV EAX,dword ptr [RDX + RCX*0x1 + 0x20]\nMOV dword ptr [0x0060d314],EAX\nMOV RAX,qword ptr [0x0060d3a8]\nMOV RAX,qword ptr [0xe8 + RAX]\nMOV EAX,dword ptr [RAX + RCX*0x1 + 0x24]\nJMP 0x00404d10\nMOVSD XMM0,qword ptr [0x0060d320]\nXORPD XMM1,XMM1\nUCOMISD XMM1,XMM0\nJC 0x00404cd0\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,dword ptr [RDX + RCX*0x1 + 0x1c]\nMULSD XMM0,qword ptr [0x00409910]\nXORPS XMM1,XMM1\nCVTSI2SD XMM1,dword ptr [RDX + RCX*0x1 + 0x24]\nDIVSD XMM0,XMM1\nMOVSD qword ptr [0x0060d320],XMM0\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EAX\nMOVSD XMM1,qword ptr [0x00409910]\nMULSD XMM0,XMM1\nMOVSD XMM2,qword ptr [0x0060d320]\nDIVSD XMM0,XMM2\nCVTTSD2SI EAX,XMM0\nMOV dword ptr [0x0060d314],EAX\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,dword ptr [0x0060d310]\nMULSD XMM0,XMM1\nDIVSD XMM0,XMM2\nCVTTSD2SI EAX,XMM0\nMOV dword ptr [0x0060d318],EAX\nCALL 0x00407050\nCALL 0x004070e0\nCALL 0x00407420\nCMP dword ptr [RSP + 0x78],0x0\nJZ 0x00404f09\nMOV AL,byte ptr [0x0060d3c4]\nTEST AL,AL\nJZ 0x004059de\nMOV EDI,0x1\nCALL 0x00405ec0\nMOV EDI,0x1\nCALL 0x004075a0\nCALL 0x00405f50\nCALL 0x00406160\nMOV R15,qword ptr [0x0060d3a0]\nTEST R15,R15\nJNZ 0x00404dbc\nJMP 0x00404f09\nMOV EDI,0x40b929\nCALL 0x00401b00\nJMP 0x00404db0\nXOR ECX,ECX\nMOV RDX,qword ptr [0x0060d3d0]\nCMP ECX,dword ptr [RDX]\nJNZ 0x00404d98\nMOV RSI,qword ptr [R15 + 0x8]\nMOV EDI,0x40a395\nXOR EAX,EAX\nCALL 0x00401bb0\nJMP 0x00404db0\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nMOV RDX,RAX\nCALL 0x00401ed0\nNOP\nMOV R15,qword ptr [R15]\nTEST R15,R15\nJZ 0x00404f09\nCMP dword ptr [R15 + 0x10],0x0\nMOV RSI,qword ptr [R15 + 0x8]\nMOV RDI,qword ptr [0x0060d3a8]\nJZ 0x00404ea0\nXOR EDX,EDX\nCALL 0x00401d90\nMOV R14,RAX\nMOV RDI,qword ptr [0x0060d3a8]\nMOV ESI,dword ptr [R15 + 0x30]\nCALL 0x00401e70\nMOV R12,RAX\nMOV qword ptr [R12],R14\nMOV EAX,dword ptr [R15 + 0x14]\nMOV dword ptr [R12 + 0x8],EAX\nMOV EAX,dword ptr [R15 + 0x18]\nMOV dword ptr [R12 + 0x14],EAX\nMOV EAX,dword ptr [R15 + 0x1c]\nMOV dword ptr [R12 + 0x18],EAX\nMOV EAX,dword ptr [R15 + 0x20]\nMOV dword ptr [R12 + 0x1c],EAX\nMOV EAX,dword ptr [R15 + 0x24]\nMOV dword ptr [R12 + 0x20],EAX\nMOV EAX,dword ptr [R15 + 0x28]\nMOV dword ptr [R12 + 0x24],EAX\nMOV EAX,dword ptr [R15 + 0x2c]\nMOV dword ptr [R12 + 0x28],EAX\nCMP dword ptr [R15 + 0x30],0x0\nJLE 0x00404e72\nXOR EBP,EBP\nXOR EBX,EBX\nNOP dword ptr [RAX]\nMOV RDI,qword ptr [R15 + 0x38]\nADD RDI,RBP\nCALL 0x004064d0\nTEST RAX,RAX\nJZ 0x00404efd\nMOV RAX,qword ptr [RAX + 0x28]\nMOV RCX,qword ptr [R12 + 0x30]\nMOV qword ptr [RCX + RBX*0x8],RAX\nINC RBX\nMOVSXD RAX,dword ptr [R15 + 0x30]\nADD RBP,0x20\nCMP RBX,RAX\nJL 0x00404e40\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nMOV RDX,R12\nCALL 0x00401bd0\nMOV RDI,R12\nCALL 0x00401e80\nJMP 0x00404db0\nMOV EDX,0x1\nCALL 0x00401d90\nTEST RAX,RAX\nJZ 0x00404d86\nMOV RDX,qword ptr [0x0060d3d0]\nTEST RDX,RDX\nJZ 0x00404d6d\nCMP dword ptr [RDX],0x0\nJLE 0x00404d79\nMOV RSI,qword ptr [RDX + 0x8]\nXOR ECX,ECX\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RSI],RAX\nJZ 0x00404d7b\nINC RCX\nMOVSXD RDI,dword ptr [RDX]\nADD RSI,0x38\nCMP RCX,RDI\nJL 0x00404ee0\nJMP 0x00404d7b\nMOV EDI,0x40a381\nXOR EAX,EAX\nCALL 0x00406410\nMOV RDI,qword ptr [0x0060d3a8]\nXOR ESI,ESI\nCALL 0x00401e00\nXOR EDI,EDI\nCALL 0x00401f40\nMOV qword ptr [RSP + 0x10],R13\nCMP dword ptr [0x90 + RSP],0x0\nMOV R15D,dword ptr [RSP + 0x64]\nJZ 0x0040501a\nMOV AL,byte ptr [0x0060d3c0]\nTEST AL,AL\nJZ 0x00405a66\nMOV EDI,R15D\nCALL 0x00405ec0\nCALL 0x00406730\nCMP qword ptr [0x0060d3f0],0x0\nJZ 0x0040501a\nMOV ESI,dword ptr [0x0060d3f8]\nMOV EDI,0x40a5e1\nXOR EAX,EAX\nCALL 0x00401bb0\nCMP dword ptr [0x0060d3f8],0x0\nJLE 0x0040501a\nXOR R14D,R14D\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [0x0060d3f0]\nLEA RCX,[R14 + R14*0x4]\nMOV RBX,qword ptr [RAX + RCX*0x8 + 0x20]\nMOV EDX,dword ptr [RAX + RCX*0x8 + 0x10]\nMOV ECX,dword ptr [RBX]\nMOV EDI,0x40a5f9\nXOR EAX,EAX\nMOV ESI,R14D\nCALL 0x00401bb0\nXOR EBP,EBP\nNOP word ptr [RAX + RAX*0x1]\nMOV EAX,dword ptr [RBX]\nMOV EDI,0x1\nMOV ECX,EBP\nSHL EDI,CL\nBT EAX,EBP\nJNC 0x00404fe7\nCALL 0x00407b40\nMOV RCX,RAX\nMOV EDI,0x40a619\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401bb0\nINC EBP\nCMP EBP,0x4\nJNZ 0x00404fc0\nMOV ESI,dword ptr [RBX + 0x4]\nMOV EDX,dword ptr [RBX + 0x10]\nMOV ECX,dword ptr [RBX + 0x28]\nMOV R8,qword ptr [RBX + 0x20]\nMOV EDI,0x40a61e\nXOR EAX,EAX\nCALL 0x00401bb0\nINC R14\nMOVSXD RAX,dword ptr [0x0060d3f8]\nCMP R14,RAX\nJL 0x00404f90\nMOV dword ptr [RSP + 0x8],R12D\nMOV ECX,dword ptr [0x98 + RSP]\nOR dword ptr [0x94 + RSP],ECX\nJZ 0x004051d7\nMOV AL,byte ptr [0x0060d3c4]\nTEST AL,AL\nJZ 0x00405a70\nXOR EBX,EBX\nTEST ECX,ECX\nSETNZ BL\nMOV EDI,R15D\nCALL 0x00405ec0\nMOV EDI,EBX\nCALL 0x004075a0\nCALL 0x00405f50\nCALL 0x00406160\nMOV RAX,qword ptr [0x0060d3d0]\nTEST RAX,RAX\nJZ 0x004051d7\nMOV ESI,dword ptr [RAX]\nMOV EDI,0x40a657\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV RAX,qword ptr [0x0060d3d0]\nCMP dword ptr [RAX],0x0\nJLE 0x004051d7\nXOR R14D,R14D\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [RAX + 0x8]\nIMUL RBP,R14,0x38\nCMP dword ptr [RAX + RBP*0x1 + 0xc],0x0\nMOV R13D,0x40b800\nMOV ECX,0x40a5c6\nCMOVNZ R13,RCX\nCMP dword ptr [RAX + RBP*0x1 + 0x8],0x0\nMOV EBX,0x40b800\nMOV ECX,0x40a5c4\nCMOVNZ RBX,RCX\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [RAX + RBP*0x1]\nCALL 0x00401df0\nMOV R8,RAX\nMOV RAX,qword ptr [0x0060d3d0]\nMOV RAX,qword ptr [RAX + 0x8]\nMOV R9D,dword ptr [RAX + RBP*0x1 + 0x1c]\nMOV ECX,dword ptr [RAX + RBP*0x1 + 0x24]\nMOV qword ptr [RSP + 0x28],RCX\nMOV R11D,dword ptr [RAX + RBP*0x1 + 0x20]\nMOV R15D,dword ptr [RAX + RBP*0x1 + 0x28]\nMOV R12D,dword ptr [RAX + RBP*0x1 + 0x14]\nMOV R10D,dword ptr [RAX + RBP*0x1 + 0x18]\nSUB RSP,0x8\nMOV EDI,0x40a665\nMOV EAX,0x0\nMOV ESI,R14D\nMOV RDX,R13\nMOV RCX,RBX\nPUSH R10\nPUSH R12\nPUSH R15\nPUSH R11\nPUSH qword ptr [RSP + 0x50]\nCALL 0x00401bb0\nADD RSP,0x30\nMOV RAX,qword ptr [0x0060d3d0]\nMOV RAX,qword ptr [RAX + 0x8]\nCMP dword ptr [RAX + RBP*0x1 + 0x10],0x0\nJLE 0x004051b7\nXOR EBX,EBX\nNOP\nMOV RAX,qword ptr [RAX + RBP*0x1 + 0x30]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nCALL 0x004076f0\nTEST RAX,RAX\nJZ 0x00405180\nMOV RSI,qword ptr [RAX + 0x20]\nMOV EDI,0x40a61a\nXOR EAX,EAX\nCALL 0x00401bb0\nJMP 0x0040519f\nMOV RAX,qword ptr [0x0060d3d0]\nMOV RAX,qword ptr [RAX + 0x8]\nMOV RAX,qword ptr [RAX + RBP*0x1 + 0x30]\nMOV ESI,dword ptr [RAX + RBX*0x8]\nMOV EDI,0x40a684\nXOR EAX,EAX\nCALL 0x00401bb0\nINC RBX\nMOV RAX,qword ptr [0x0060d3d0]\nMOV RAX,qword ptr [RAX + 0x8]\nMOVSXD RCX,dword ptr [RAX + RBP*0x1 + 0x10]\nCMP RBX,RCX\nJL 0x00405150\nMOV EDI,0xa\nCALL 0x00401aa0\nINC R14\nMOV RAX,qword ptr [0x0060d3d0]\nMOVSXD RCX,dword ptr [RAX]\nCMP R14,RCX\nJL 0x004050a0\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nCALL 0x00401f00\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00405a5c\nLEA RSI,[RSP + 0x50]\nMOV RDI,R12\nCALL 0x00401d40\nMOV word ptr [RSP + 0x30],AX\nLEA RSI,[RSP + 0x40]\nMOV RDI,R12\nCALL 0x00401bf0\nMOV qword ptr [RSP + 0x28],RAX\nCMP dword ptr [0xa0 + RSP],0x0\nMOV R14,qword ptr [0xb0 + RSP]\nMOV RBX,qword ptr [RSP + 0x10]\nJZ 0x00405296\nCMP dword ptr [RSP + 0x40],0x0\nMOV R15D,dword ptr [RSP + 0x8]\nJLE 0x00405275\nMOV EAX,dword ptr [0xac + RSP]\nMOV ECX,dword ptr [0xa8 + RSP]\nMOVSXD RDX,dword ptr [RSP + 0x40]\nMOV RSI,qword ptr [RSP + 0x28]\nLEA RSI,[RSI + 0x4]\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nCMP dword ptr [RSI + -0x4],EAX\nJNZ 0x00405269\nCMP dword ptr [RSI],ECX\nJZ 0x004052c6\nINC RBX\nADD RSI,0x10\nCMP RBX,RDX\nJL 0x00405260\nMOV RDI,qword ptr [0x0060d2e0]\nMOV EDX,dword ptr [0xac + RSP]\nMOV ECX,dword ptr [0xa8 + RSP]\nMOV ESI,0x40a69a\nXOR EAX,EAX\nJMP 0x004059cf\nTEST EBX,EBX\nJS 0x004052bc\nMOV ECX,dword ptr [RSP + 0x40]\nCMP EBX,ECX\nMOV R15D,dword ptr [RSP + 0x8]\nJL 0x004052c6\nMOV RDI,qword ptr [0x0060d2e0]\nMOV ESI,0x40a6c3\nXOR EAX,EAX\nMOV EDX,EBX\nJMP 0x004059cf\nMOVZX EBX,word ptr [RSP + 0x30]\nMOV R15D,dword ptr [RSP + 0x8]\nTEST R14D,R14D\nJNS 0x004052ed\nMOVZX EAX,word ptr [RSP + 0x50]\nAND EAX,0xf\nXOR R14D,R14D\nMOV EDX,0x1\nMOV ECX,R14D\nSHL EDX,CL\nCMP EDX,EAX\nJZ 0x004052ed\nINC R14D\nCMP R14D,0x4\nJL 0x004052d6\nMOV RDI,R12\nCALL 0x00401d00\nMOV R13D,EAX\nXORPD XMM0,XMM0\nUCOMISD XMM0,qword ptr [RSP]\nJBE 0x0040531e\nMOVZX EAX,word ptr [RSP + 0x30]\nCMP EBX,EAX\nJNZ 0x00405317\nMOVSX EAX,R13W\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,EAX\nMOVSD qword ptr [RSP],XMM0\nJMP 0x00405383\nLEA RDX,[0x80 + RSP]\nMOV RDI,R12\nMOV ESI,EBX\nCALL 0x00401e90\nMOV EDX,dword ptr [0x80 + RSP]\nTEST EDX,EDX\nJLE 0x00405374\nMOV ESI,dword ptr [0x80 + RSP]\nMOVSXD RDI,ESI\nXOR ECX,ECX\nMOVSD XMM0,qword ptr [RSP]\nMOVSX EBP,word ptr [RAX + RCX*0x2]\nXORPS XMM1,XMM1\nCVTSI2SD XMM1,EBP\nUCOMISD XMM0,XMM1\nJNZ 0x0040535f\nJNP 0x0040537b\nINC RCX\nCMP RCX,RDI\nMOV EDX,ESI\nJL 0x0040534c\nMOV EDX,ESI\nCMP ECX,EDX\nJNZ 0x00405383\nJMP 0x00405a7a\nXOR ECX,ECX\nMOVSD XMM0,qword ptr [RSP]\nCMP ECX,EDX\nJZ 0x00405a7a\nMOV word ptr [RSP + 0x20],R13W\nMOV qword ptr [RSP + 0x10],RBX\nMOV qword ptr [0xb0 + RSP],R14\nCMP dword ptr [RSP + 0x5c],0x0\nJZ 0x004053d3\nMOV RDI,qword ptr [0x0060d3a8]\nLEA RSI,[0x110 + RSP]\nLEA RDX,[0x88 + RSP]\nCALL 0x00401b10\nMOV ESI,dword ptr [0x110 + RSP]\nMOV EDX,dword ptr [0x88 + RSP]\nMOV EDI,0x40a722\nXOR EAX,EAX\nCALL 0x00401bb0\nOR dword ptr [RSP + 0x48],R15D\nJZ 0x004054ff\nMOV EDI,0x40b9c0\nCALL 0x00401b00\nCMP dword ptr [RSP + 0x40],0x0\nJLE 0x004054ff\nMOVZX EBX,word ptr [RSP + 0x30]\nMOV EAX,0x2a\nXOR R13D,R13D\nMOV qword ptr [RSP + 0x78],R12\nMOVZX R14D,word ptr [RSP + 0x20]\nMOV R15D,0x20\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP R13,RBX\nMOV ESI,0x20\nCMOVZ ESI,EAX\nMOV RAX,R13\nSHL RAX,0x4\nMOV RDX,qword ptr [RSP + 0x28]\nMOV ECX,dword ptr [RDX + RAX*0x1]\nMOV R8D,dword ptr [RDX + RAX*0x1 + 0x4]\nMOV R9D,dword ptr [RDX + RAX*0x1 + 0x8]\nMOV EBP,dword ptr [RDX + RAX*0x1 + 0xc]\nSUB RSP,0x8\nMOV EDI,0x40a776\nXOR EAX,EAX\nMOV EDX,R13D\nPUSH RBP\nCALL 0x00401bb0\nADD RSP,0x10\nMOV RDI,R12\nMOV ESI,R13D\nLEA RDX,[0x80 + RSP]\nCALL 0x00401e90\nMOV RBP,RAX\nCMP dword ptr [0x80 + RSP],0x0\nJZ 0x004054da\nMOV EDI,0x40a568\nXOR EAX,EAX\nCALL 0x00401bb0\nCMP dword ptr [0x80 + RSP],0x0\nJLE 0x004054da\nXOR R12D,R12D\nNOP dword ptr [RAX]\nMOVSX EDX,word ptr [RBP + R12*0x2]\nCMP DX,R14W\nMOV ESI,0x20\nMOV EAX,0x2a\nCMOVZ ESI,EAX\nCMP R13,RBX\nCMOVNZ ESI,R15D\nMOV EDI,0x40a799\nXOR EAX,EAX\nCALL 0x00401bb0\nINC R12\nMOVSXD RAX,dword ptr [0x80 + RSP]\nCMP R12,RAX\nJL 0x004054a0\nMOV EDI,0xa\nCALL 0x00401aa0\nINC R13\nMOVSXD RAX,dword ptr [RSP + 0x40]\nCMP R13,RAX\nMOV R12,qword ptr [RSP + 0x78]\nMOV EAX,0x2a\nJL 0x00405420\nLEA RSI,[RSP + 0x50]\nMOV RDI,R12\nCALL 0x00401b60\nMOV EBX,EAX\nCMP dword ptr [0x9c + RSP],0x0\nJZ 0x00405527\nMOVZX R14D,word ptr [RSP + 0x50]\nNOT R14D\nAND R14D,0x10\nJMP 0x0040552a\nXOR R14D,R14D\nMOV R15,qword ptr [RSP + 0x10]\nCMP dword ptr [0xc0 + RSP],0x0\nMOV ECX,dword ptr [RSP + 0x8]\nJZ 0x0040554a\nMOVZX EAX,word ptr [RSP + 0x50]\nNOT EAX\nAND EAX,0x20\nOR R14D,EAX\nTEST ECX,ECX\nJZ 0x00405610\nMOVZX EDI,word ptr [RSP + 0x50]\nCALL 0x004076a0\nMOV RCX,RAX\nMOV EDI,0x40a7a0\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401bb0\nMOVZX EDI,word ptr [RSP + 0x50]\nCALL 0x004076d0\nMOV RCX,RAX\nMOV EDI,0x40a7b7\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401bb0\nMOV EDI,0x40a7d0\nXOR EAX,EAX\nCALL 0x00401bb0\nMOVZX EBX,BX\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nBT EBX,EBP\nJNC 0x004055b9\nMOV RSI,qword ptr [0x409aa0 + RBP*0x8]\nMOV EDI,0x40a7e6\nXOR EAX,EAX\nCALL 0x00401bb0\nINC RBP\nCMP RBP,0x4\nJNZ 0x004055a0\nMOV EDI,0xa\nCALL 0x00401aa0\nMOV EDI,0x40a7ea\nXOR EAX,EAX\nCALL 0x00401bb0\nTEST BL,0x30\nJZ 0x004055fa\nTEST BL,0x10\nJZ 0x004055ee\nMOV EDI,0x40a802\nXOR EAX,EAX\nCALL 0x00401bb0\nTEST BL,0x20\nJZ 0x00405606\nMOV EDI,0x40a80a\nJMP 0x004055ff\nMOV EDI,0x409ffb\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV EDI,0xa\nCALL 0x00401aa0\nCMP byte ptr [0x0060d2f8],0x1\nJNZ 0x0040567e\nMOVSXD RAX,dword ptr [0xb0 + RSP]\nMOV RDX,qword ptr [0x409aa0 + RAX*0x8]\nMOV EDI,0x40a811\nXOR EAX,EAX\nMOV ESI,R15D\nCALL 0x00401bb0\nMOV EDI,0x40a835\nXOR EAX,EAX\nCALL 0x00401bb0\nTEST R14D,R14D\nJZ 0x00405668\nTEST R14B,0x10\nJZ 0x0040565b\nMOV EDI,0x40a802\nXOR EAX,EAX\nCALL 0x00401bb0\nTEST R14B,0x20\nJZ 0x00405674\nMOV EDI,0x40a80a\nJMP 0x0040566d\nMOV EDI,0x40a84c\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV EDI,0xa\nCALL 0x00401aa0\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nMOV EDX,0x20000\nCALL 0x00401e10\nCMP dword ptr [RSP + 0x24],0x0\nJZ 0x004056be\nTEST byte ptr [0x0060d2fc],0x1\nJNZ 0x004056be\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nMOV EDX,0x1\nCALL 0x00401f80\nCMP dword ptr [RSP + 0x24],0x0\nMOV EBX,0x3\nJZ 0x00405718\nTEST byte ptr [0x0060d2fc],0x1\nJNZ 0x00405718\nMOV EAX,0x1\nMOV RCX,qword ptr [0xb0 + RSP]\nSHL EAX,CL\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RDX,qword ptr [0x0060d3b0]\nMOVZX ECX,R15W\nOR R14D,EAX\nCVTTSD2SI EAX,qword ptr [RSP]\nSUB RSP,0x8\nMOVZX R8D,R14W\nMOVSX R9D,AX\nMOV RSI,R12\nPUSH 0x0\nCALL 0x00401c90\nADD RSP,0x10\nMOV EBX,EAX\nCMP dword ptr [RSP + 0x24],0x0\nSETNZ AL\nXOR EBP,EBP\nCMP EBX,0x3\nJNZ 0x00405743\nMOV CL,byte ptr [0x0060d2fc]\nXOR CL,0x1\nAND AL,CL\nJZ 0x00405743\nMOV EDI,0x40b990\nCALL 0x00401b00\nMOV EBP,0x1\nCMP dword ptr [RSP + 0x24],0x0\nSETZ AL\nMOV CL,byte ptr [0x0060d2fc]\nTEST CL,CL\nJNZ 0x00405906\nMOV CL,byte ptr [0x0060d2f8]\nXOR CL,0x1\nOR AL,CL\nTEST AL,0x1\nJNZ 0x00405906\nMOVZX EAX,word ptr [RSP + 0x30]\nCMP R15D,EAX\nJZ 0x00405906\nTEST EBX,EBX\nJNZ 0x00405906\nLEA RBX,[0x110 + RSP]\nJMP 0x00405798\nMOV EDI,0x40a9fc\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,RBX\nCALL 0x00401d60\nMOV ESI,dword ptr [0x110 + RSP]\nMOV EDI,0x40a885\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV RDI,RBX\nCALL 0x00401b90\nMOV ESI,dword ptr [0x110 + RSP]\nCMP ESI,0x16\nJNZ 0x004057df\nMOV EDI,0x40b970\nCALL 0x00401b00\nMOV ESI,dword ptr [0x110 + RSP]\nCMP ESI,dword ptr [0xcc + RSP]\nJZ 0x004057ef\nCMP ESI,0x16\nJZ 0x00405798\nJMP 0x0040578c\nMOV EDI,0x40b940\nCALL 0x00401b00\nMOV ESI,dword ptr [0x130 + RSP]\nMOV EDX,dword ptr [0x138 + RSP]\nMOVZX ECX,word ptr [0x150 + RSP]\nMOVZX R8D,word ptr [0x154 + RSP]\nMOV EDI,0x40a8e4\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV RSI,qword ptr [0x140 + RSP]\nMOV RDX,qword ptr [0x148 + RSP]\nMOV EDI,0x40a91b\nXOR EAX,EAX\nCALL 0x00401bb0\nMOVZX ESI,word ptr [0x154 + RSP]\nMOV EDI,0x40a945\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV ESI,dword ptr [0x158 + RSP]\nMOV EDX,dword ptr [0x15c + RSP]\nMOV ECX,dword ptr [0x160 + RSP]\nMOV R8D,dword ptr [0x164 + RSP]\nMOV EDI,0x40a955\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV RAX,qword ptr [0x0060d3a8]\nMOV RAX,qword ptr [0xe8 + RAX]\nMOVSXD RCX,dword ptr [0x0060d2d0]\nSHL RCX,0x7\nMOV ESI,dword ptr [RAX + RCX*0x1 + 0x18]\nMOV EDX,dword ptr [RAX + RCX*0x1 + 0x1c]\nMOV EDI,0x40a972\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV RAX,qword ptr [0x0060d3a8]\nMOV RAX,qword ptr [0xe8 + RAX]\nMOVSXD RCX,dword ptr [0x0060d2d0]\nSHL RCX,0x7\nMOV ESI,dword ptr [RAX + RCX*0x1 + 0x20]\nMOV EDX,dword ptr [RAX + RCX*0x1 + 0x24]\nMOV EDI,0x40a993\nXOR EAX,EAX\nCALL 0x00401bb0\nMOVZX ESI,word ptr [0x152 + RSP]\nCMP ESI,0x6\nJC 0x004058f2\nMOV EDI,0x40a9b4\nXOR EAX,EAX\nCALL 0x00401bb0\nJMP 0x00405906\nMOV RSI,qword ptr [0x409bc0 + RSI*0x8]\nMOV EDI,0x40a9d8\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV RDI,R12\nCALL 0x00401a90\nMOV EAX,EBP\nADD RSP,0x1d8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00405ca0\nXOR EDI,EDI\nCALL 0x00401f40\nMOV RSI,qword ptr [RBP + R12*0x8]\nMOV EDI,0x409cc5\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV RSI,qword ptr [0x88 + RBP]\nMOV EDI,0x40a2c6\nXOR EAX,EAX\nCALL 0x00406410\nMOV RSI,qword ptr [RBP + 0x68]\nMOV EDI,0x40a2dd\nXOR EAX,EAX\nCALL 0x00406410\nMOV RCX,qword ptr [0x0060d2e0]\nMOV EDI,0x40a2ad\nMOV ESI,0x18\nMOV EDX,0x1\nCALL 0x00401f50\nMOV EDI,0x1\nCALL 0x00401f40\nMOV EDI,0x40a5a6\nXOR EAX,EAX\nCALL 0x00406410\nMOV RBX,qword ptr [0x0060d2e0]\nMOV RDI,RBP\nCALL 0x00401dd0\nMOV RCX,RAX\nMOV ESI,0x40a26b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,RCX\nCALL 0x00401ca0\nMOV EDI,0x1\nCALL 0x00401f40\nMOV RDI,qword ptr [0x0060d2e0]\nMOV ESI,0x40a282\nXOR EAX,EAX\nCALL 0x00401ca0\nMOV EDI,0x1\nCALL 0x00401f40\nMOV EDI,0x40b9f0\nCALL 0x00401b00\nXOR EDI,EDI\nCALL 0x00401f40\nMOV EDI,0x40a2f6\nXOR EAX,EAX\nCALL 0x00406410\nMOV EDI,0x40a324\nXOR EAX,EAX\nCALL 0x00406410\nMOV RSI,qword ptr [0x0060d328]\nMOV EDI,0x40a351\nXOR EAX,EAX\nCALL 0x00406410\nMOV EDI,0x409d1b\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV RSI,qword ptr [RBP + R12*0x8]\nMOV RAX,qword ptr [RSP + 0x8]\nMOV RDX,qword ptr [RBP + RAX*0x8]\nMOV EDI,0x409db3\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV EDI,0x409cc5\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00405bc0\nMOV EDI,0x409d70\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV EDI,0x1\nCALL 0x00401f40\nMOV EDI,0x40ba10\nJMP 0x004059e3\nMOV EDI,0x40b9f0\nJMP 0x004059e3\nMOV RDI,qword ptr [0x0060d2e0]\nMOV ESI,0x40a6f8\nMOV AL,0x1\nCALL 0x00401ca0\nMOV EDI,0x1\nCALL 0x00401f40\nMOV RSI,qword ptr [RBP + R12*0x8]\nMOV RAX,qword ptr [RSP + 0x38]\nJMP 0x00405a30\nMOV RSI,qword ptr [RBP + R12*0x8]\nMOV EDI,0x409e3e\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV RSI,qword ptr [RBP + R12*0x8]\nMOV RDX,qword ptr [RBP + R13*0x8]\nJMP 0x00405a35\nMOV RSI,qword ptr [RBP + R12*0x8]\nMOV RAX,qword ptr [0xd0 + RSP]\nJMP 0x00405a30\nMOV RSI,qword ptr [RBP + R12*0x8]\nMOV RDX,qword ptr [RBP + RBX*0x8]\nJMP 0x00405a35\nMOV EDI,0x409f24\nJMP 0x00405a46\nMOV RSI,qword ptr [RBP + RBX*0x8]\nMOV EDI,0x409f4f\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV RSI,qword ptr [RBP + RBX*0x8]\nMOV EDI,0x409f97\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV EDI,0x409fc2\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV RSI,qword ptr [RBP + R12*0x8]\nMOV EDI,0x409e05\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV RSI,qword ptr [RBP + R13*0x8]\nMOV EDI,0x40a024\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV EDI,0x409e05\nJMP 0x00405a46\nMOV RSI,qword ptr [RBP + RBX*0x8]\nMOV EDI,0x40a059\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV RSI,qword ptr [RBP + RBX*0x8]\nMOV EDI,0x40a08c\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV EDI,0x40a0d7\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV RSI,qword ptr [RBP + R12*0x8]\nMOV EDI,0x409f24\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV RSI,qword ptr [RBP + R12*0x8]\nMOV EDI,0x40a196\nXOR EAX,EAX\nCALL 0x00405bc0\nADD R12,0x2\nMOV RSI,qword ptr [RBP + R12*0x8]\nMOV EDI,0x40a1c4\nXOR EAX,EAX\nCALL 0x00405bc0\nMOV EDI,0x40a22d\nJMP 0x00405a46\n'
p669
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 01 00 00\n48 89 f5\n41 89 fe\nc7 84 24 ac 00 00 00 00 00 00 00\nc7 84 24 a8 00 00 00 00 00 00 00\n48 8b 45 00\n48 89 05 e8 b1 20 00\n41 83 fe 02\n0f 8c 5d 18 00 00\n49 63 c6\n48 89 84 24 00 01 00 00\nf2 0f 10 05 c3 77 00 00\n41 bf 01 00 00 00\nb8 ff ff ff ff\n48 89 84 24 b0 00 00 00\nc7 44 24 30 00 00 00 00\nc7 44 24 08 00 00 00 00\nb8 00 00 00 00\n48 89 44 24 28\n41 bd ff ff ff ff\nc7 44 24 24 00 00 00 00\nc7 44 24 5c 00 00 00 00\nc7 84 24 a0 00 00 00 00 00 00 00\nb8 00 00 00 00\n48 89 44 24 18\nc7 44 24 20 00 00 00 00\nc7 44 24 60 00 00 00 00\nc7 44 24 34 00 00 00 00\nc7 44 24 70 00 00 00 00\nc7 44 24 48 00 00 00 00\nc7 84 24 90 00 00 00 00 00 00 00\nc7 44 24 6c 00 00 00 00\nc7 44 24 68 00 00 00 00\nc7 44 24 78 00 00 00 00\nc7 84 24 94 00 00 00 00 00 00 00\nc7 84 24 98 00 00 00 00 00 00 00\nc7 44 24 64 00 00 00 00\nc7 84 24 9c 00 00 00 00 00 00 00\n31 c0\n48 89 84 24 c0 00 00 00\ne9 00 11 00 00\nc6 05 f1 b0 20 00 01\ne9 4d 17 00 00\nc6 05 e9 b0 20 00 01\nc6 05 de b0 20 00 01\ne9 3a 17 00 00\nc6 05 da b0 20 00 01\ne9 2e 17 00 00\nc7 44 24 64 01 00 00 00\ne9 21 17 00 00\n41 ff c7\n45 39 f7\n0f 8d ea 36 00 00\n49 63 df\n48 8b 7c dd 00\nbe 15 9d 40 00\n31 c0\n48 8d 94 24 ac 00 00 00\n48 8d 8c 24 a8 00 00 00\ne8 38 fb ff ff\nc7 44 24 24 01 00 00 00\n83 f8 02\n75 64\nc7 84 24 a0 00 00 00 01 00 00 00\nc7 44 24 08 01 00 00 00\ne9 cc 16 00 00\n41 ff c7\n45 39 f7\n0f 8d 95 36 00 00\n49 63 c7\n48 8b 7c c5 00\ne8 5a 3a 00 00\n48 8b 44 24 18\n48 85 c0\n74 51\nf2 0f 11 80 90 00 00 00\n80 48 08 80\nc7 44 24 20 01 00 00 00\nc7 44 24 24 01 00 00 00\nc7 44 24 08 01 00 00 00\ne9 85 16 00 00\n48 8b 7c dd 00\ne8 dd 39 00 00\n41 89 c5\n45 85 ed\nc7 44 24 08 01 00 00 00\nf2 0f 10 04 24\n0f 89 62 16 00 00\ne9 19 37 00 00\nc7 44 24 24 01 00 00 00\n31 c0\n48 89 44 24 18\nc7 44 24 08 01 00 00 00\ne9 41 16 00 00\nc7 44 24 5c 01 00 00 00\nc7 44 24 08 01 00 00 00\ne9 27 16 00 00\n41 ff c7\n45 39 f7\n0f 8d 03 37 00 00\n49 63 c7\n48 8b 7c c5 00\ne8 75 39 00 00\n89 05 7f af 20 00\n85 c0\nf2 0f 10 04 24\n0f 89 00 16 00 00\ne9 ed 36 00 00\nc7 44 24 30 01 00 00 00\ne9 e9 15 00 00\nc6 05 8d af 20 00 01\nc7 44 24 60 01 00 00 00\nc7 44 24 08 01 00 00 00\ne9 cd 15 00 00\n41 ff c7\n45 39 f7\n0f 8d 96 35 00 00\n4c 89 6c 24 10\n49 63 df\n48 8b 7c dd 00\nba 0a 00 00 00\n48 8d b4 24 10 01 00 00\ne8 19 f9 ff ff\n48 8b 4c dd 00\n48 3b 8c 24 10 01 00 00\n48 89 5c 24 08\n75 4f\n48 8b 5c dd 00\n45 31 ed\n4a 8b 3c ed a0 9a 40 00\n48 89 de\ne8 8d f8 ff ff\n85 c0\n74 30\n49 ff c5\n49 83 fd 04\n7c e3\ne9 31 36 00 00\nc7 84 24 9c 00 00 00 01 00 00 00\ne9 bf fe ff ff\nb8 01 00 00 00\n48 89 84 24 c0 00 00 00\ne9 ad fe ff ff\n4c 89 e8\n83 f8 04\n0f 83 03 36 00 00\n48 89 84 24 b0 00 00 00\nc7 44 24 24 01 00 00 00\nc7 44 24 08 01 00 00 00\nf2 0f 10 04 24\n4c 8b 6c 24 10\ne9 14 15 00 00\n41 ff c7\n45 39 f7\n0f 8d eb 35 00 00\n49 63 df\n48 8b 7c dd 00\ne8 cd 38 00 00\nc7 44 24 20 01 00 00 00\n48 89 c1\n48 89 4c 24 18\n48 85 c0\n0f 84 80 00 00 00\nc7 44 24 08 01 00 00 00\ne9 d0 14 00 00\n48 89 de\n48 8b 5c 24 18\n48 85 db\n0f 84 87 36 00 00\n41 ff c7\n45 39 f7\n0f 8d 8d 34 00 00\n48 8d 7b 40\n49 63 c7\n48 8b 74 c5 00\nba 06 00 00 00\ne8 f4 38 00 00\n80 4b 08 01\ne9 94 14 00 00\n48 89 c6\n48 85 db\n0f 84 50 36 00 00\n41 ff c7\n45 39 f7\n0f 8d 56 34 00 00\n48 8d 7b 70\n49 63 c7\n48 8b 74 c5 00\nba 03 00 00 00\ne8 bd 38 00 00\n80 4b 08 02\ne9 5d 14 00 00\ne8 6f 38 00 00\n48 89 c1\n48 89 4c 24 18\n48 8d 78 18\n48 8b 74 dd 00\nba 03 00 00 00\ne8 94 38 00 00\nc7 44 24 08 01 00 00 00\ne9 30 14 00 00\n48 8b 74 24 38\n48 85 db\n0f 84 ea 35 00 00\n48 8d 7b 70\ne8 10 39 00 00\n80 4b 08 02\ne9 10 14 00 00\n48 85 db\n0f 84 ca 35 00 00\n41 ff c7\n45 39 f7\n0f 8d d0 33 00 00\n49 63 c7\n48 89 44 24 38\n48 8b 44 c5 00\n48 89 44 24 10\n31 db\n48 8b 3c dd a0 9a 40 00\n48 8b 74 24 10\ne8 ec f6 ff ff\n85 c0\n74 12\n48 ff c3\n48 83 fb 04\n7c e1\n83 fb 04\n0f 84 fd 34 00 00\nf2 0f 10 04 24\n48 8b 44 24 18\n48 89 c6\n0f b7 86 d8 00 00 00\n25 f0 ff 00 00\nba 01 00 00 00\n89 d9\nd3 e2\n09 c2\n66 89 96 d8 00 00 00\n80 4e 08 10\ne9 90 13 00 00\n48 8b 74 24 38\n48 85 db\n0f 84 45 35 00 00\n41 ff c7\n45 39 f7\n0f 8d 4b 33 00 00\n4d 63 e7\n4a 8b 7c e5 00\n48 8b 5c 24 18\n48 8d 93 d0 00 00 00\n48 8d 8b d4 00 00 00\nbe 15 9d 40 00\n31 c0\ne8 91 f7 ff ff\n83 f8 02\n0f 85 8b 34 00 00\n80 4b 08 08\ne9 38 13 00 00\n48 85 db\n0f 84 f2 34 00 00\n41 ff c7\n45 39 f7\n0f 8d f8 32 00 00\n4d 63 ef\n4a 8b 44 ed 00\n48 89 44 24 38\n31 db\n48 8b 3c dd d0 9a 40 00\n48 8b 74 24 38\ne8 19 f6 ff ff\n85 c0\n74 12\n48 ff c3\n48 83 fb 04\n7c e1\n83 fb 04\n0f 84 47 34 00 00\n48 8b 44 24 18\n48 89 c1\n0f b7 81 d8 00 00 00\n25 cf ff 00 00\nc1 e3 04\n09 c3\n66 89 99 d8 00 00 00\n80 49 08 20\ne9 a5 fd ff ff\n48 83 7c 24 18 00\n0f 84 9c 34 00 00\n41 ff c7\n45 39 f7\n0f 8d 93 33 00 00\n48 8b 44 24 18\n48 89 c1\nc7 81 c0 00 00 00 00 00 00 00\ne9 b1 00 00 00\n48 83 7c 24 18 00\n0f 84 6d 34 00 00\n41 ff c7\n45 39 f7\n0f 8d 64 33 00 00\n48 8b 44 24 18\n48 89 c1\nc7 81 c0 00 00 00 01 00 00 00\ne9 82 00 00 00\n48 83 7c 24 18 00\n0f 84 3e 34 00 00\n41 ff c7\n45 39 f7\n0f 8d 35 33 00 00\n48 8b 44 24 18\n48 89 c1\nc7 81 c0 00 00 00 02 00 00 00\neb 56\n48 83 7c 24 18 00\n0f 84 12 34 00 00\n41 ff c7\n45 39 f7\n0f 8d 09 33 00 00\n48 8b 44 24 18\n48 89 c1\nc7 81 c0 00 00 00 03 00 00 00\neb 2a\n48 83 7c 24 18 00\n0f 84 e6 33 00 00\n41 ff c7\n45 39 f7\n0f 8d dd 32 00 00\n48 8b 44 24 18\n48 89 c1\nc7 81 c0 00 00 00 04 00 00 00\n49 63 c7\n48 8b 44 c5 00\n48 89 81 c8 00 00 00\n80 49 08 04\ne9 ad fc ff ff\n48 83 7c 24 18 00\n0f 84 a4 33 00 00\n41 ff c7\n45 39 f7\n0f 8d 9b 32 00 00\n49 63 c7\n48 89 84 24 d0 00 00 00\n48 8b 7c c5 00\n48 8b 44 24 18\n48 8d 90 f0 00 00 00\n48 8d 88 f4 00 00 00\n4c 8d 80 e8 00 00 00\n4c 8d 88 ec 00 00 00\n48 8d b0 00 01 00 00\n48 89 74 24 38\n48 8d b0 04 01 00 00\n48 89 b4 24 f8 00 00 00\n4c 8d 90 f8 00 00 00\n48 8d b0 fc 00 00 00\n48 89 b4 24 f0 00 00 00\n48 8d 98 08 01 00 00\n48 8d b0 0c 01 00 00\n48 89 b4 24 e8 00 00 00\n4c 8d a8 10 01 00 00\n4c 8d 98 14 01 00 00\nbe c6 9e 40 00\nb8 00 00 00 00\n4c 89 84 24 e0 00 00 00\n4c 89 8c 24 d8 00 00 00\n41 53\n41 55\nff b4 24 f8 00 00 00\n53\nff b4 24 10 01 00 00\n4d 89 d5\n41 52\nff b4 24 28 01 00 00\nff 74 24 70\ne8 32 f5 ff ff\n48 83 c4 40\n83 c0 fe\nd1 c8\n83 f8 05\n0f 87 43 32 00 00\nff 24 c5 a0 99 40 00\n48 8b 84 24 d8 00 00 00\nc7 00 00 00 00 00\n48 8b 84 24 e0 00 00 00\nc7 00 00 00 00 00\n66 0f 57 c0\n66 41 0f 11 45 00\n66 0f 57 c0\n66 0f 11 03\n48 8b 44 24 18\n80 48 09 04\ne9 78 fb ff ff\n48 83 7c 24 18 00\n0f 84 6f 32 00 00\n41 ff c7\n45 39 f7\n0f 8d 66 31 00 00\n49 63 df\n48 8b 7c dd 00\n48 8b 44 24 18\n48 8d 90 68 01 00 00\n48 8d 88 6c 01 00 00\n4c 8d 80 70 01 00 00\nbe f2 9e 40 00\n31 c0\ne8 97 f4 ff ff\n83 f8 03\n74 46\ne9 c2 31 00 00\n48 83 7c 24 18 00\n0f 84 1f 32 00 00\n41 ff c7\n45 39 f7\n0f 8d 16 31 00 00\n49 63 df\n48 8b 7c dd 00\n48 8b 44 24 18\n48 8d 90 74 01 00 00\nbe 5a a5 40 00\n31 c0\ne8 55 f4 ff ff\n83 f8 01\n0f 85 81 31 00 00\n48 8b 44 24 18\n80 48 09 08\nc7 44 24 20 01 00 00 00\ne9 d1 fa ff ff\n48 83 7c 24 18 00\n0f 84 c8 31 00 00\n48 8b 44 24 18\n80 48 09 10\nc7 80 78 01 00 00 01 00 00 00\neb d2\nc6 05 76 a9 20 00 01\neb c9\n48 83 7c 24 18 00\n0f 84 9e 31 00 00\n41 83 c7 02\n45 39 f7\n0f 8d 37 31 00 00\nbf 18 00 00 00\ne8 b9 f3 ff ff\n48 8b 4c 24 18\n48 89 ca\n48 8b 4a 10\n48 89 08\n48 89 42 10\n4a 8b 4c e5 08\n48 89 48 08\n49 63 cf\n48 8b 4c cd 00\n48 89 48 10\n80 4a 09 01\nc7 44 24 70 01 00 00 00\ne9 6d ff ff ff\n48 83 7c 24 18 00\n0f 84 20 31 00 00\n41 ff c7\n45 39 f7\n0f 8d 26 2f 00 00\n49 63 df\n48 8b 7c dd 00\nbe 47 9f 40 00\n31 c0\n48 8d 94 24 10 01 00 00\n48 8d 4c 24 40\ne8 77 f3 ff ff\n83 f8 02\n0f 85 bc 30 00 00\n48 8b 44 24 18\n48 89 c3\n48 8d bb 28 01 00 00\ne8 1a 34 00 00\nf2 0f 10 84 24 10 01 00 00\nf2 0f 10 0d a9 6e 00 00\nf2 0f 59 c1\nf2 0f 2c c0\n89 83 28 01 00 00\nf2 0f 10 44 24 40\nf2 0f 59 c1\nf2 0f 2c c0\n89 83 38 01 00 00\nc7 83 48 01 00 00 00 00 01 00\nf2 0f 10 84 24 10 01 00 00\nf2 0f 10 4c 24 40\nf2 0f 10 15 6e 6e 00 00\n66 0f 2e ca\nb8 82 9f 40 00\nb9 79 9f 40 00\n48 0f 45 c1\n48 0f 4a c1\n66 0f 2e c2\n48 0f 45 c1\n48 0f 4a c1\n48 89 83 50 01 00 00\nc7 83 58 01 00 00 00 00 00 00\n48 c7 83 60 01 00 00 00 00 00 00\n80 4b 09 02\ne9 5a f9 ff ff\n48 83 7c 24 18 00\n0f 84 2f 30 00 00\n41 ff c7\n45 39 f7\n0f 8d 35 2e 00 00\n49 63 df\n48 8b 7c dd 00\nbe 15 9d 40 00\n31 c0\n48 8d 94 24 10 01 00 00\n48 8d 4c 24 40\ne8 86 f2 ff ff\n83 f8 02\n0f 85 dc 2f 00 00\n8b 84 24 10 01 00 00\n85 c0\n0f 8e de 2f 00 00\n8b 4c 24 40\n85 c9\n0f 8e d2 2f 00 00\n48 8b 54 24 18\n89 82 1c 01 00 00\n89 8a 20 01 00 00\n80 4a 09 02\ne9 e3 f8 ff ff\n48 83 7c 24 18 00\n0f 84 b8 2f 00 00\n41 ff c7\n45 39 f7\n0f 8d be 2d 00 00\n48 8b 44 24 18\n4c 8d a0 28 01 00 00\n4c 89 e7\ne8 dc 32 00 00\n4d 63 ef\n4a 8b 5c ed 00\nbe fb 9f 40 00\n48 89 df\ne8 d7 f0 ff ff\n85 c0\n0f 84 e2 00 00 00\n48 83 ec 08\nbe 00 a0 40 00\nb8 00 00 00 00\n48 89 df\n48 8d 94 24 18 01 00 00\n48 8d 8c 24 20 01 00 00\n4c 8d 84 24 28 01 00 00\n4c 8d 8c 24 30 01 00 00\n48 8d 9c 24 58 01 00 00\n53\n48 8d 9c 24 58 01 00 00\n53\n48 8d 9c 24 58 01 00 00\n53\n48 8d 9c 24 58 01 00 00\n53\n48 8d 9c 24 58 01 00 00\n53\ne8 9c f1 ff ff\n48 83 c4 30\n83 f8 09\n0f 85 1c 2f 00 00\n4c 89 e7\ne8 47 32 00 00\n48 8d 84 24 10 01 00 00\n31 c9\nba 03 00 00 00\n4c 89 e6\n48 89 c7\nf2 0f 10 07\nf2 0f 59 05 c6 6c 00 00\nf2 0f 2c d8\n89 1e\n48 83 c7 08\n48 83 c6 04\n48 ff ca\n75 e1\n48 ff c1\n48 83 c0 18\n49 83 c4 0c\n48 83 f9 03\n75 c5\n48 8b 44 24 18\n48 c7 80 50 01 00 00 79 9f 40 00\nc7 80 58 01 00 00 00 00 00 00\n48 c7 80 60 01 00 00 00 00 00 00\n48 8b 44 24 18\n80 48 09 02\ne9 aa f7 ff ff\n48 83 7c 24 18 00\n0f 84 a1 2e 00 00\n48 8b 44 24 18\n48 89 c3\n48 8d 7b 70\n31 f6\ne8 00 32 00 00\n48 8d 7b 40\n31 f6\ne8 f5 31 00 00\n80 4b 08 03\ne9 77 f7 ff ff\n41 ff c7\n45 39 f7\n0f 8d 71 2d 00 00\n49 63 df\n48 8b 7c dd 00\nbe 15 9d 40 00\nba 0c d3 60 00\nb9 10 d3 60 00\n31 c0\ne8 b2 f0 ff ff\nc7 44 24 20 01 00 00 00\n83 f8 02\nc7 44 24 08 01 00 00 00\nf2 0f 10 04 24\n4c 8b 6c 24 10\n0f 84 4d 0c 00 00\ne9 32 2e 00 00\n41 ff c7\n45 39 f7\n0f 8d 1f 2d 00 00\n49 63 df\n48 8b 7c dd 00\nbe 15 9d 40 00\nba 14 d3 60 00\nb9 18 d3 60 00\n31 c0\ne8 60 f0 ff ff\nc7 44 24 20 01 00 00 00\n83 f8 02\nc7 44 24 08 01 00 00 00\nf2 0f 10 04 24\n4c 8b 6c 24 10\n0f 84 fb 0b 00 00\ne9 f1 2d 00 00\n41 ff c7\n45 39 f7\n0f 8d ba 2b 00 00\n49 63 df\n48 8b 7c dd 00\n48 8d b4 24 10 01 00 00\ne8 97 ed ff ff\nf2 0f 11 05 8f a5 20 00\n48 8b 44 dd 00\n48 3b 84 24 10 01 00 00\n75 34\n48 c7 05 75 a5 20 00 00 00 00 00\n48 8b 44 dd 00\n48 89 05 71 a5 20 00\neb 1b\n48 83 7c 24 18 00\n74 3a\n48 8b 44 24 18\nc7 80 18 01 00 00 01 00 00 00\n80 48 08 40\nc7 44 24 20 01 00 00 00\ne9 52 f6 ff ff\nc7 44 24 60 01 00 00 00\ne9 4d f6 ff ff\nc7 44 24 48 01 00 00 00\ne9 40 f6 ff ff\nc6 05 2e a5 20 00 01\nc7 44 24 20 01 00 00 00\n31 c0\n48 89 44 24 18\ne9 1d f6 ff ff\nbf 01 00 00 00\nbe a0 00 00 00\ne8 3b ee ff ff\n48 89 44 24 08\n41 8d 47 0a\n89 44 24 34\n44 39 f0\n4a 8b 74 e5 08\n0f 8d 2a 2d 00 00\n49 8d 44 24 01\n48 8b 5c 24 08\n48 89 73 48\n48 8b 7c c5 00\ne8 48 ed ff ff\n89 43 50\n4a 8b 7c e5 10\ne8 9b 2e 00 00\nf2 0f 59 05 83 6a 00 00\n66 0f 28 c8\nf2 0f 10 15 7f 6a 00 00\nf2 0f 5c ca\nf2 48 0f 2c c1\n48 b9 00 00 00 00 00 00 00 80\n48 31 c8\nf2 48 0f 2c c8\n66 0f 2e c2\n48 0f 43 c8\n48 89 4b 20\n4a 8b 7c e5 18\ne8 16 2e 00 00\n89 43 18\n4a 8b 7c e5 20\ne8 09 2e 00 00\n89 43 28\n4a 8b 7c e5 28\ne8 fc 2d 00 00\n89 43 2c\n4a 8b 7c e5 30\ne8 ef 2d 00 00\n89 43 30\n4a 8b 7c e5 38\ne8 e2 2d 00 00\n89 43 1c\n4a 8b 7c e5 40\ne8 d5 2d 00 00\n89 43 38\n4a 8b 7c e5 48\ne8 c8 2d 00 00\n89 43 3c\n41 83 c7 0b\n48 63 44 24 34\n48 8b 7c c5 00\ne8 b2 2d 00 00\n89 43 40\n48 c7 43 58 00 00 00 00\n45 39 f7\n7d 47\n4d 63 ff\n4e 8b 64 fd 00\n48 c7 c3 70 ff ff ff\n48 8b bb 90 9b 40 00\n4c 89 e6\ne8 74 eb ff ff\n85 c0\n74 08\n48 83 c3 10\n75 e7\neb 1d\n48 8b 83 98 9b 40 00\n48 8b 4c 24 08\n48 09 41 58\n49 ff c7\n4c 3b bc 24 00 01 00 00\n7c bc\n48 8b 05 cc a3 20 00\n48 8b 4c 24 08\n48 89 01\nc7 41 08 00 00 00 00\n48 89 0d b6 a3 20 00\ne9 fa 00 00 00\nbf 01 00 00 00\nbe a0 00 00 00\ne8 ca ec ff ff\n48 89 c3\n41 ff c7\n45 39 f7\n0f 8d 89 29 00 00\n48 89 df\n48 83 ef 80\n49 63 c7\n48 8b 74 c5 00\nba 03 00 00 00\ne8 f2 2d 00 00\nc7 43 08 01 00 00 00\ne9 a6 00 00 00\nbf 01 00 00 00\nbe a0 00 00 00\ne8 87 ec ff ff\n48 89 c3\n41 83 c7 02\n45 39 f7\n0f 8d 8d 2b 00 00\n48 8d 7b 60\n4a 8b 74 e5 08\nba 03 00 00 00\ne8 b4 2d 00 00\n48 89 df\n48 83 ef 80\n49 63 c7\n48 8b 74 c5 00\nba 03 00 00 00\ne8 9b 2d 00 00\nc7 43 08 02 00 00 00\neb 52\nbf 01 00 00 00\nbe a0 00 00 00\ne8 33 ec ff ff\n48 89 c3\n41 83 c7 02\n45 39 f7\n0f 8d 39 2b 00 00\n48 8d 7b 60\n4a 8b 74 e5 08\nba 03 00 00 00\ne8 60 2d 00 00\n48 89 df\n48 83 ef 80\n49 63 c7\n48 8b 74 c5 00\nba 03 00 00 00\ne8 47 2d 00 00\nc7 43 08 03 00 00 00\n48 8b 05 c1 a2 20 00\n48 89 03\n48 89 1d b7 a2 20 00\nc7 44 24 34 01 00 00 00\ne9 a5 f3 ff ff\nc7 84 24 90 00 00 00 01 00 00 00\ne9 95 f3 ff ff\n41 8d 47 01\n44 39 f0\n0f 8d 96 29 00 00\n48 98\n48 8b 74 c5 00\nbf 40 d3 60 00\nba 07 00 00 00\ne8 ef 2c 00 00\n41 83 c7 02\n45 39 f7\n7d 5e\n49 63 c7\n48 8b 74 c5 00\nbf 60 d3 60 00\nba 07 00 00 00\ne8 cf 2c 00 00\neb 51\n41 8d 47 01\n44 39 f0\n0f 8d 51 29 00 00\n48 98\n48 8b 74 c5 00\nbf 40 d3 60 00\nba 07 00 00 00\ne8 aa 2c 00 00\n41 83 c7 02\n45 39 f7\n7d 42\n49 63 c7\n48 8b 74 c5 00\nbf 80 d3 60 00\nba 07 00 00 00\ne8 8a 2c 00 00\neb 35\nbf 60 d3 60 00\n31 f6\ne8 7c 2d 00 00\nc7 44 24 6c 01 00 00 00\ne9 f2 f2 ff ff\nc7 84 24 94 00 00 00 01 00 00 00\ne9 e2 f2 ff ff\nbf 80 d3 60 00\n31 f6\ne8 53 2d 00 00\nc7 44 24 68 01 00 00 00\ne9 c9 f2 ff ff\nc7 84 24 98 00 00 00 01 00 00 00\ne9 b9 f2 ff ff\nbf 01 00 00 00\nbe 40 00 00 00\ne8 d7 ea ff ff\n48 89 44 24 08\n41 83 c7 03\n45 39 f7\n0f 8d ec 29 00 00\n4a 8b 44 e5 08\n80 38 2a\n75 0f\n48 8b 4c 24 08\nc7 41 14 01 00 00 00\n48 ff c0\n48 8b 4c 24 08\n48 89 41 08\nc7 41 10 01 00 00 00\n4a 8b 5c e5 10\nbe bd a0 40 00\nba 04 00 00 00\n48 89 df\ne8 e5 e8 ff ff\n85 c0\n74 40\n48 8b 44 24 08\n48 8d 50 20\n48 8d 48 28\n4c 8d 40 24\n4c 8d 48 2c\n4c 8d 50 18\n4c 8d 58 1c\nbe b2 a1 40 00\nb8 00 00 00 00\n48 89 df\n41 53\n41 52\ne8 8e eb ff ff\n48 83 c4 10\n83 f8 06\n0f 85 79 29 00 00\n49 63 c7\n48 8b 5c c5 00\nbe fb 9f 40 00\n48 89 df\ne8 3c ea ff ff\n85 c0\n0f 84 96 00 00 00\nbf ee a1 40 00\n31 c0\n48 89 de\ne8 65 e9 ff ff\nbe fe a1 40 00\n48 89 df\neb 70\n48 8b 5c 24 08\n48 8b 7b 38\n48 63 73 30\n48 c1 e6 05\n48 83 c6 20\ne8 d1 eb ff ff\n48 89 43 38\nbf 00 a2 40 00\n31 c0\n4c 89 e6\ne8 2e e9 ff ff\n48 63 7b 30\n8d 47 01\n48 c1 e7 05\n48 03 7b 38\n89 43 30\nba 07 00 00 00\n4c 89 e6\ne8 0f 2b 00 00\n48 8b 43 38\n48 63 4b 30\n48 c1 e1 05\n48 8b 74 08 e8\nbf 10 a2 40 00\n31 c0\ne8 f2 e8 ff ff\n31 ff\nbe fe a1 40 00\ne8 f6 eb ff ff\n49 89 c4\n4d 85 e4\n75 83\nb9 a0 d3 60 00\n48 89 c8\n48 8b 08\n48 85 c9\n75 f5\n48 8b 4c 24 08\n48 89 08\nc7 44 24 78 01 00 00 00\ne9 3c f1 ff ff\nf2 0f 11 04 24\n4d 63 e7\n4a 8b 5c e5 00\nbf b9 9c 40 00\n48 89 de\ne8 56 e9 ff ff\n85 c0\n0f 84 1e 06 00 00\nbf b8 9c 40 00\n48 89 de\ne8 41 e9 ff ff\n85 c0\n0f 84 09 06 00 00\n80 3b 2d\n75 14\n80 7b 01 64\n75 0e\n80 7b 02 00\n0f 84 f4 05 00 00\n0f 1f 40 00\n4a 8b 5c e5 00\nbf df 9c 40 00\n48 89 de\ne8 0e e9 ff ff\n85 c0\n0f 84 b8 25 00 00\nbf de 9c 40 00\n48 89 de\ne8 f9 e8 ff ff\n85 c0\n0f 84 a3 25 00 00\nbf e5 9c 40 00\n48 89 de\ne8 e4 e8 ff ff\n85 c0\n0f 84 6c ee ff ff\nbf ef 9c 40 00\n48 89 de\ne8 cf e8 ff ff\n85 c0\n0f 84 63 ee ff ff\nbf f8 9c 40 00\n48 89 de\ne8 ba e8 ff ff\n85 c0\n0f 84 61 ee ff ff\nbf 01 9d 40 00\n48 89 de\ne8 a5 e8 ff ff\n85 c0\n0f 84 58 ee ff ff\n80 3b 2d\n75 10\n80 7b 01 73\n75 0a\n80 7b 02 00\n0f 84 50 ee ff ff\n4a 8b 5c e5 00\nbf 0e 9d 40 00\n48 89 de\ne8 76 e8 ff ff\n85 c0\n0f 84 36 ee ff ff\n80 3b 2d\n75 10\n80 7b 01 72\n75 0a\n80 7b 02 00\n0f 84 76 ee ff ff\n4a 8b 5c e5 00\nbf 43 9d 40 00\n48 89 de\ne8 47 e8 ff ff\n85 c0\n0f 84 5c ee ff ff\nbf 4a 9d 40 00\n48 89 de\ne8 32 e8 ff ff\n85 c0\n0f 84 47 ee ff ff\n80 3b 2d\n75 10\n80 7b 01 76\n75 0a\n80 7b 02 00\n0f 84 c2 ee ff ff\n4a 8b 5c e5 00\nbf 57 9d 40 00\n48 89 de\ne8 03 e8 ff ff\n85 c0\n0f 84 a8 ee ff ff\n80 3b 2d\nf2 0f 10 04 24\n75 10\n80 7b 01 78\n75 0a\n80 7b 02 00\n0f 84 66 ef ff ff\n4a 8b 44 e5 00\n80 38 2d\n75 10\n80 78 01 79\n75 0a\n80 78 02 00\n0f 84 5c ef ff ff\n4a 8b 5c e5 00\nbf 67 9d 40 00\n48 89 de\ne8 b5 e7 ff ff\n85 c0\n0f 84 6f ee ff ff\n80 3b 2d\n75 10\n80 7b 01 71\n75 0a\n80 7b 02 00\n0f 84 8b ee ff ff\n4a 8b 5c e5 00\nbf 9a 9d 40 00\n48 89 de\ne8 86 e7 ff ff\n85 c0\n0f 84 71 ee ff ff\n80 3b 2d\n75 10\n80 7b 01 6f\n75 0a\n80 7b 02 00\n0f 84 85 ee ff ff\n4a 8b 5c e5 00\nbf a5 9d 40 00\n48 89 de\ne8 57 e7 ff ff\n85 c0\n0f 84 6b ee ff ff\nbf ce 9d 40 00\n48 89 de\ne8 42 e7 ff ff\n85 c0\n0f 84 3a ee ff ff\nbf d5 9d 40 00\n48 89 de\ne8 2d e7 ff ff\n85 c0\n0f 84 25 ee ff ff\nbf dd 9d 40 00\n48 89 de\ne8 18 e7 ff ff\n85 c0\n0f 84 10 ee ff ff\nbf e8 9d 40 00\n48 89 de\ne8 03 e7 ff ff\n85 c0\n0f 84 fb ed ff ff\nbf f5 9d 40 00\n48 89 de\ne8 ee e6 ff ff\n85 c0\n0f 84 c0 ee ff ff\nbf fe 9d 40 00\n48 89 de\ne8 d9 e6 ff ff\n85 c0\n0f 84 ea ee ff ff\nbf 25 9e 40 00\n48 89 de\ne8 c4 e6 ff ff\n85 c0\n48 89 d8\n48 8b 5c 24 18\n0f 84 09 ef ff ff\nbf 2c 9e 40 00\n48 89 44 24 38\n48 89 c6\ne8 a2 e6 ff ff\n85 c0\n0f 84 53 ef ff ff\nbf 38 9e 40 00\n48 8b 74 24 38\ne8 8b e6 ff ff\n85 c0\n0f 84 e1 ef ff ff\nbf 62 9e 40 00\n48 8b 74 24 38\ne8 74 e6 ff ff\n85 c0\n0f 84 45 ef ff ff\nbf 6d 9e 40 00\n48 8b 74 24 38\ne8 5d e6 ff ff\n85 c0\n0f 84 2e ef ff ff\n4c 89 6c 24 10\nbf 76 9e 40 00\n48 8b 74 24 38\ne8 41 e6 ff ff\n85 c0\n0f 84 ea ef ff ff\nbf 80 9e 40 00\n48 8b 74 24 38\ne8 2a e6 ff ff\n85 c0\n0f 84 d3 ef ff ff\nbf 8d 9e 40 00\n48 8b 74 24 38\n48 89 f3\ne8 10 e6 ff ff\n85 c0\n0f 84 2e f0 ff ff\nbf 97 9e 40 00\n48 89 de\ne8 fb e5 ff ff\n85 c0\n0f 84 48 f0 ff ff\nbf a2 9e 40 00\n48 89 de\ne8 e6 e5 ff ff\n85 c0\n0f 84 62 f0 ff ff\nbf aa 9e 40 00\n48 89 de\ne8 d1 e5 ff ff\n85 c0\n0f 84 79 f0 ff ff\nbf b2 9e 40 00\n48 89 de\ne8 bc e5 ff ff\n85 c0\n0f 84 90 f0 ff ff\nbf bc 9e 40 00\n48 89 de\ne8 a7 e5 ff ff\n85 c0\n0f 84 bd f0 ff ff\nbf ea 9e 40 00\n48 89 de\ne8 92 e5 ff ff\n85 c0\n0f 84 dd f1 ff ff\nbf fb 9e 40 00\n48 89 de\ne8 7d e5 ff ff\n85 c0\n0f 84 18 f2 ff ff\nbf 08 9f 40 00\n48 89 de\ne8 68 e5 ff ff\n85 c0\n0f 84 5a f2 ff ff\nbf 12 9f 40 00\n48 89 de\ne8 53 e5 ff ff\n85 c0\n0f 84 66 f2 ff ff\nbf 1e 9f 40 00\n48 89 de\ne8 3e e5 ff ff\n85 c0\n0f 84 5a f2 ff ff\nbf 3f 9f 40 00\n48 89 de\ne8 29 e5 ff ff\n85 c0\n0f 84 a1 f2 ff ff\nbf 8a 9f 40 00\n48 89 de\ne8 14 e5 ff ff\n85 c0\n0f 84 7d f3 ff ff\nbf ef 9f 40 00\n48 89 de\ne8 ff e4 ff ff\n85 c0\n0f 84 df f3 ff ff\nbf 4e a0 40 00\n48 89 de\ne8 ea e4 ff ff\n85 c0\n0f 84 03 f5 ff ff\nbf 54 a0 40 00\n48 89 de\ne8 d5 e4 ff ff\n85 c0\n0f 84 21 f5 ff ff\nbf 85 a0 40 00\n48 89 de\ne8 c0 e4 ff ff\n85 c0\n0f 84 5e f5 ff ff\nbf b5 a0 40 00\n48 89 de\ne8 ab e4 ff ff\n85 c0\n0f 84 9b f5 ff ff\nbf bb a0 40 00\n48 89 de\ne8 96 e4 ff ff\n85 c0\n0f 84 d7 f5 ff ff\nbf c2 a0 40 00\n48 89 de\ne8 81 e4 ff ff\n85 c0\n0f 84 ea f5 ff ff\nbf c8 a0 40 00\n48 89 de\ne8 6c e4 ff ff\n85 c0\n0f 84 e2 f5 ff ff\nbf cd a0 40 00\n48 89 de\ne8 57 e4 ff ff\n85 c0\n0f 84 f5 f5 ff ff\nbf 05 a1 40 00\n48 89 de\ne8 42 e4 ff ff\n85 c0\n0f 84 51 f7 ff ff\nbf 0e a1 40 00\n48 89 de\ne8 2d e4 ff ff\n85 c0\n0f 84 7f f7 ff ff\nbf 18 a1 40 00\n48 89 de\ne8 18 e4 ff ff\n85 c0\n0f 84 be f7 ff ff\nbf 22 a1 40 00\n48 89 de\ne8 03 e4 ff ff\n85 c0\n0f 84 19 f8 ff ff\nbf 32 a1 40 00\n48 89 de\ne8 ee e3 ff ff\n85 c0\n0f 84 14 f8 ff ff\nbf 4c a1 40 00\n48 89 de\ne8 d9 e3 ff ff\n85 c0\n0f 84 44 f8 ff ff\nbf 65 a1 40 00\n48 89 de\ne8 c4 e3 ff ff\n85 c0\n0f 84 8d f8 ff ff\nbf 74 a1 40 00\n48 89 de\ne8 af e3 ff ff\n85 c0\n0f 84 a1 f8 ff ff\nbf 89 a1 40 00\n48 89 de\ne8 9a e3 ff ff\n85 c0\n0f 84 9c f8 ff ff\nbf 20 a2 40 00\n48 89 de\ne8 85 e3 ff ff\n85 c0\n0f 85 ba 22 00 00\nbf 01 00 00 00\nbe 40 00 00 00\ne8 5e e3 ff ff\n41 ff c7\n45 39 f7\n0f 8d 20 20 00 00\n49 63 cf\n48 8b 4c cd 00\n48 89 48 08\nba a0 d3 60 00\n48 89 d1\n48 8b 11\n48 85 d2\n75 f5\n48 89 01\ne9 b8 f9 ff ff\n41 ff c7\n45 39 f7\n0f 8d e2 1f 00 00\n49 63 c7\n48 8b 44 c5 00\n48 89 44 24 28\nf2 0f 10 04 24\n41 ff c7\n45 39 f7\n0f 8c 96 f9 ff ff\ne9 cb 00 00 00\nf2 0f 10 05 71 5f 00 00\n41 bd ff ff ff ff\n31 c0\n48 89 84 24 c0 00 00 00\nc7 84 24 9c 00 00 00 00 00 00 00\nc7 44 24 64 00 00 00 00\nc7 84 24 98 00 00 00 00 00 00 00\nc7 84 24 94 00 00 00 00 00 00 00\nc7 44 24 78 00 00 00 00\nc7 44 24 68 00 00 00 00\nc7 44 24 6c 00 00 00 00\nc7 84 24 90 00 00 00 00 00 00 00\nc7 44 24 48 00 00 00 00\nc7 44 24 70 00 00 00 00\nc7 44 24 34 00 00 00 00\nc7 44 24 60 00 00 00 00\nc7 44 24 20 00 00 00 00\nc7 84 24 a0 00 00 00 00 00 00 00\nc7 44 24 5c 00 00 00 00\nc7 44 24 24 00 00 00 00\n31 c0\n48 89 44 24 28\nc7 44 24 08 00 00 00 00\nc7 44 24 30 00 00 00 00\nb8 ff ff ff ff\n48 89 84 24 b0 00 00 00\nf2 0f 11 04 24\n83 7c 24 08 00\n41 bc 01 00 00 00\n8b 44 24 30\n41 0f 44 c4\n80 3d 9f 98 20 00 01\n75 22\n83 7c 24 24 00\nb8 01 00 00 00\n8b 4c 24 48\n0f 44 c1\n44 8b 74 24 20\n45 85 f6\n0f 44 c8\n89 4c 24 48\neb 08\n41 89 c4\n44 8b 74 24 20\n44 8b 7c 24 70\n48 8b 6c 24 28\n83 7c 24 5c 00\n74 0a\nbf 30 ba 40 00\ne8 60 e0 ff ff\n48 89 ef\ne8 d8 e1 ff ff\n48 89 05 f9 98 20 00\n48 85 c0\n0f 84 db 1e 00 00\n83 3d 11 98 20 00 00\n79 0c\n8b 80 e0 00 00 00\n89 05 03 98 20 00\n48 63 15 fc 97 20 00\n48 8b 3d cd 98 20 00\n8b 8f e4 00 00 00\n39 ca\n0f 8d d8 1e 00 00\n48 8b 87 e8 00 00 00\n48 c1 e2 07\n48 8b 44 10 10\n48 89 05 b0 98 20 00\n48 8d b4 24 cc 00 00 00\n48 8d 94 24 0c 01 00 00\ne8 db df ff ff\n85 c0\n0f 84 45 1e 00 00\n48 8b 3d 84 98 20 00\n48 8d b4 24 bc 00 00 00\n48 8d 54 24 74\ne8 da df ff ff\n85 c0\n0f 84 24 1e 00 00\n8b 84 24 bc 00 00 00\n83 f8 02\n7c 09\nc6 05 67 98 20 00 01\neb 1f\n83 f8 01\n75 0e\n83 7c 24 74 02\n7c 07\nc6 05 52 98 20 00 01\n83 f8 01\n75 0e\n83 7c 24 74 03\n7c 07\nc6 05 43 98 20 00 01\n8b 84 24 bc 00 00 00\n83 f8 02\n7c 09\nc6 05 34 98 20 00 01\neb 1f\n83 f8 01\n75 0e\n83 7c 24 74 04\n7c 07\nc6 05 1f 98 20 00 01\n83 f8 01\n75 0e\n83 7c 24 74 05\n7c 07\nc6 05 10 98 20 00 01\n83 7c 24 34 00\n0f 84 4e 01 00 00\nf6 05 f2 97 20 00 01\n0f 84 41 01 00 00\nbf 01 00 00 00\ne8 ea 22 00 00\ne8 75 23 00 00\ne8 80 25 00 00\n48 8b 2d 51 97 20 00\n48 85 ed\n0f 84 0d 01 00 00\n8b 45 08\n48 83 f8 03\n0f 87 c0 00 00 00\nff 24 c5 d0 99 40 00\n48 8b 3d 9d 97 20 00\n48 8b 35 9e 97 20 00\n48 8d 55 10\ne8 d5 e0 ff ff\n48 8b 6d 00\n48 85 ed\n75 cc\ne9 d4 00 00 00\n48 8d 7d 60\ne8 97 28 00 00\n48 89 c3\n48 85 db\n0f 84 0d 1d 00 00\n48 89 ef\n48 83 ef 80\ne8 ef 26 00 00\n48 85 c0\n0f 84 e5 1c 00 00\n48 8b 3d 47 97 20 00\n48 8b 73 28\n48 8b 10\ne8 e3 e0 ff ff\n48 8b 6d 00\n48 85 ed\n0f 85 76 ff ff ff\ne9 7e 00 00 00\n48 8d 7d 60\ne8 47 28 00 00\n48 89 c3\n48 85 db\n0f 84 bd 1c 00 00\n48 89 ef\n48 83 ef 80\ne8 9f 26 00 00\n48 85 c0\n0f 84 95 1c 00 00\n48 8b 3d f7 96 20 00\n48 8b 73 28\n48 8b 10\ne8 f3 e2 ff ff\n48 8b 6d 00\n48 85 ed\n0f 85 26 ff ff ff\neb 31\n48 89 ef\n48 83 ef 80\ne8 68 26 00 00\n48 85 c0\n0f 84 5e 1c 00 00\n48 8b 3d c0 96 20 00\n48 8b 30\ne8 20 e0 ff ff\n48 8b 6d 00\n48 85 ed\n0f 85 f3 fe ff ff\n44 89 f8\n0b 44 24 78\n44 09 f0\n0f 84 fc 11 00 00\n45 85 ff\n0f 84 a8 02 00 00\nf6 05 9b 96 20 00 01\n0f 84 9b 02 00 00\n44 89 64 24 08\n4c 89 6c 24 10\nbf 01 00 00 00\ne8 89 21 00 00\ne8 14 22 00 00\ne8 1f 24 00 00\n48 8b 1d 80 96 20 00\n48 85 db\n0f 84 55 02 00 00\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 8b 6b 10\n4d 85 ed\n0f 84 2d 02 00 00\n48 89 5c 24 28\ne9 f9 00 00 00\n49 83 fc 1f\n0f 84 80 00 00 00\n49 83 fc 04\n0f 84 99 00 00 00\n4d 85 e4\n0f 85 f0 01 00 00\n49 8b 7d 10\nbe b5 b4 40 00\n31 c0\n48 8d 94 24 b8 00 00 00\ne8 eb df ff ff\n83 f8 01\n74 1d\n49 8b 7d 10\nbe 14 a6 40 00\n31 c0\n48 8d 94 24 b8 00 00 00\ne8 ce df ff ff\n83 f8 01\n75 33\n49 89 ec\n48 63 84 24 b8 00 00 00\n48 89 84 24 10 01 00 00\nc7 44 24 4c 01 00 00 00\n41 be 20 00 00 00\nb9 13 00 00 00\n48 8d 9c 24 10 01 00 00\ne9 4d 01 00 00\n49 89 ec\n49 8b 5d 10\n48 89 df\ne8 87 dd ff ff\n89 44 24 4c\n41 be 08 00 00 00\nb9 1f 00 00 00\ne9 2a 01 00 00\n49 89 ec\n48 8b 3d 71 95 20 00\n49 8b 75 10\n31 d2\ne8 4e df ff ff\n48 89 84 24 10 01 00 00\nc7 44 24 4c 01 00 00 00\nb9 04 00 00 00\n48 8d 9c 24 10 01 00 00\ne9 f3 00 00 00\n48 8b 3d 31 95 20 00\n49 8b 75 08\n45 31 e4\n31 d2\ne8 0b df ff ff\n48 89 c5\n48 8b 3d 19 95 20 00\n48 8b 73 28\n48 83 ec 08\nb9 00 00 00 00\n41 b8 64 00 00 00\n41 b9 00 00 00 00\n48 89 ea\n48 8d 44 24 48\n50\n48 8d 84 24 98 00 00 00\n50\n48 8d 84 24 98 00 00 00\n50\n48 8d 84 24 c4 00 00 00\n50\n48 8d 44 24 78\n50\n6a 00\n6a 00\ne8 d5 df ff ff\n48 83 c4 40\n85 c0\n41 be 00 00 00 00\n75 37\n48 8b 3d b8 94 20 00\n48 8b 73 28\n48 89 ea\ne8 a4 df ff ff\n48 85 c0\n74 0f\n4c 8b 64 24 50\n44 8b b4 24 a4 00 00 00\neb 10\n45 31 e4\n45 31 f6\n66 2e 0f 1f 84 00 00 00 00 00\n49 8b 7d 10\n8b 94 24 a4 00 00 00\n4c 89 e6\n48 8d 4c 24 4c\ne8 18 26 00 00\n49 89 c7\n4d 85 ff\n0f 84 3c fe ff ff\n49 89 ec\n48 8b 4c 24 50\n44 8b b4 24 a4 00 00 00\n4c 89 fb\n48 8b 3d 4a 94 20 00\n48 8b 6c 24 28\n48 8b 75 28\n8b 44 24 4c\n41 b9 00 00 00 00\n4c 89 e2\n45 89 f0\n50\n53\n48 89 eb\ne8 af df ff ff\n48 83 c4 10\n4c 89 ff\ne8 f3 da ff ff\n4d 8b 6d 00\n4d 85 ed\n0f 85 d6 fe ff ff\n48 8b 1b\n48 85 db\n0f 85 ba fd ff ff\n44 8b 74 24 20\n45 85 f6\n4c 8b 6c 24 10\n44 8b 64 24 08\n0f 84 4b 0f 00 00\n83 7c 24 6c 00\n74 51\n8a 05 f5 93 20 00\n84 c0\n0f 84 1c 1a 00 00\nbf 01 00 00 00\ne8 e3 1e 00 00\ne8 4e 27 00 00\nbf 40 d3 60 00\ne8 44 28 00 00\n48 89 c3\nbf 60 d3 60 00\ne8 37 28 00 00\n48 8b 3d a8 93 20 00\n48 8b 73 10\n48 85 c0\n74 06\n48 8b 50 10\neb 02\n31 d2\ne8 3a de ff ff\n83 7c 24 68 00\n74 51\n8a 05 9d 93 20 00\n84 c0\n0f 84 d0 19 00 00\nbf 01 00 00 00\ne8 8b 1e 00 00\ne8 f6 26 00 00\nbf 40 d3 60 00\ne8 ec 27 00 00\n48 89 c3\nbf 80 d3 60 00\ne8 df 27 00 00\n48 8b 3d 50 93 20 00\n48 8b 73 10\n48 85 c0\n74 06\n48 8b 50 10\neb 02\n31 d2\ne8 52 dd ff ff\n45 85 f6\n0f 84 b4 00 00 00\nbf 01 00 00 00\ne8 3f 1e 00 00\ne8 ca 1e 00 00\ne8 d5 20 00 00\ne8 70 28 00 00\ne8 0b 2b 00 00\ne8 e6 2c 00 00\ne8 91 2e 00 00\ne8 cc 2e 00 00\n48 8b 3d 7d 92 20 00\n48 85 ff\n0f 84 6a 0b 00 00\ne8 77 1c 00 00\n48 85 c0\n0f 84 45 19 00 00\n48 8b 48 38\n48 85 c9\n0f 84 4f 0b 00 00\n48 8b 90 98 00 00 00\n48 85 d2\n0f 84 3f 0b 00 00\n48 8b 41 28\n48 85 c0\n0f 84 32 0b 00 00\n8b 3d 1a 92 20 00\n8b 72 0c\n3b 7a 08\n0f 85 e7 0a 00 00\n39 35 0c 92 20 00\n0f 85 db 0a 00 00\n8b 49 20\n89 0d 01 92 20 00\n89 05 ff 91 20 00\n83 3d f4 91 20 00 00\n0f 85 01 0b 00 00\ne9 0a 0b 00 00\n83 7c 24 78 00\n0f 85 fa 0b 00 00\n83 7c 24 60 00\n75 24\n45 85 e4\n0f 94 c0\n83 7c 24 48 00\n0f 85 d0 0d 00 00\n8a 0d 64 92 20 00\n80 f1 01\n08 c8\na8 01\n0f 85 bd 0d 00 00\n8b 7c 24 64\ne8 56 1d 00 00\ne8 e1 1d 00 00\ne8 ec 1f 00 00\n48 63 35 55 91 20 00\n8b 15 57 92 20 00\n8b 0d 55 92 20 00\n48 8b 05 1a 92 20 00\n48 8b 80 e8 00 00 00\n48 89 f7\n48 c1 e7 07\n44 8b 44 38 18\n44 8b 4c 38 1c\n8b 2d 34 92 20 00\n8b 1d 32 92 20 00\nbf b9 a3 40 00\nb8 00 00 00 00\n53\n55\ne8 ed d9 ff ff\n48 83 c4 10\n4c 8b 3d fa 91 20 00\n4d 85 ff\n0f 84 bc 09 00 00\n66 0f 1f 84 00 00 00 00 00\n4d 8b 77 38\n4c 89 7c 24 28\n4d 8b 7f 60\n4d 85 ff\n74 0e\n49 8b 5f 28\neb 0a\n31 db\n48 8b 6c 24 28\n4c 8b ad 98 00 00 00\n48 89 ef\ne8 0a 34 00 00\n41 89 c4\n49 8b 76 10\n41 0f b7 46 30\n48 8b 14 c5 a0 9b 40 00\nbf f7 a3 40 00\n31 c0\ne8 7a d9 ff ff\n83 bd 78 01 00 00 00\n74 0c\nbf fd a3 40 00\n31 c0\ne8 65 d9 ff ff\n4d 85 ed\n0f 84 bc 00 00 00\n48 85 db\n74 17\n8b 73 10\n8b 53 14\n8b 4b 08\n44 8b 43 0c\neb 22\n41 8b 75 08\n41 8b 55 0c\n48 8b 44 24 28\n8b 88 d0 00 00 00\n44 8b 80 d4 00 00 00\nbf 34 a4 40 00\n31 c0\ne8 1a d9 ff ff\n80 3d 5b 90 20 00 01\n75 10\n41 8b 75 00\nbf 06 a4 40 00\n31 c0\ne8 01 d9 ff ff\n48 8b 44 24 28\n0f b7 80 d8 00 00 00\n83 f8 01\n75 09\nf6 05 31 90 20 00 01\n74 47\n0f b7 f8\ne8 cf 33 00 00\n48 89 c1\nbf 1a a6 40 00\n31 c0\n48 89 ce\ne8 cd d8 ff ff\n48 8b 44 24 28\n0f b7 80 d8 00 00 00\na8 30\n74 1d\n0f b7 f8\ne8 d5 33 00 00\n48 89 c1\nbf 1a a6 40 00\n31 c0\n48 89 ce\ne8 a3 d8 ff ff\n0f 1f 00\n45 0f b7 e4\n41 83 fc 01\n75 0d\nf6 05 d7 8f 20 00 01\n0f 84 98 00 00 00\nbf 0e a4 40 00\n31 c0\ne8 7d d8 ff ff\nbd 01 00 00 00\n31 db\n66 0f 1f 44 00 00\n41 0f a3 dc\n73 24\n85 ed\n75 0a\nbf 20 00 00 00\ne8 4c d7 ff ff\n48 8b 34 dd a0 9a 40 00\n31 ed\nbf 5b aa 40 00\n31 c0\ne8 46 d8 ff ff\n48 ff c3\n48 83 fb 04\n75 cd\n41 f6 c4 10\n74 1c\n85 ed\n75 0a\nbf 20 00 00 00\ne8 19 d7 ff ff\n31 ed\nbf 11 a4 40 00\n31 c0\ne8 1b d8 ff ff\n41 f6 c4 20\n74 1a\n85 ed\n75 0a\nbf 20 00 00 00\ne8 f7 d6 ff ff\nbf 18 a4 40 00\n31 c0\ne8 fb d7 ff ff\nbf 29 00 00 00\ne8 e1 d6 ff ff\n4d 85 ed\n74 14\n41 8b 76 20\n41 8b 56 28\nbf 1f a4 40 00\n31 c0\ne8 d8 d7 ff ff\n4d 85 ff\n0f 84 a5 00 00 00\n49 8b 5f 38\n48 85 db\n0f 84 98 00 00 00\n8b 73 10\n85 f6\n0f 84 8d 00 00 00\n8b 53 14\n8b 4b 08\n44 8b 43 0c\nbf 2c a4 40 00\n31 c0\ne8 a1 d7 ff ff\n8b 43 20\n85 c0\n74 19\n8b 4b 18\n3b 4b 08\n75 32\n3b 43 10\n75 2d\n83 7b 28 00\n75 27\n83 7b 30 00\n75 21\n8b 43 24\n85 c0\n74 50\n8b 4b 1c\n3b 4b 0c\n75 12\n3b 43 14\n75 0d\n83 7b 2c 00\n75 07\n83 7b 34 00\n74 37\n90\n8b 73 20\n8b 53 24\n8b 4b 18\n44 8b 43 1c\n44 8b 4b 28\n44 8b 53 2c\n8b 6b 30\n8b 5b 34\n48 83 ec 08\nbf 41 a4 40 00\nb8 00 00 00 00\n53\n55\n41 52\ne8 2e d7 ff ff\n48 83 c4 20\nbf 0a 00 00 00\ne8 10 d6 ff ff\n80 3d 61 8e 20 00 01\n0f 85 83 02 00 00\n4c 8b 7c 24 28\n41 8b 77 28\nbf 6a a4 40 00\n31 c0\ne8 fe d6 ff ff\n41 8b 36\nbf 7d a4 40 00\n31 c0\ne8 ef d6 ff ff\n41 0f b7 46 32\n48 8b 34 c5 c0 9b 40 00\nbf 8e a4 40 00\n31 c0\ne8 d6 d6 ff ff\nf3 41 0f 10 87 68 01 00 00\n0f 57 db\n0f 2e c3\n75 02\n7b 51\nf3 41 0f 10 8f 6c 01 00 00\n0f 2e cb\n75 02\n7b 41\nf3 41 0f 10 97 70 01 00 00\n0f 2e d3\n75 02\n7b 31\nf3 0f 5a c0\nf3 0f 5a c9\nf3 0f 5a d2\nbf 9f a4 40 00\nb0 03\ne8 8b d6 ff ff\nf3 41 0f 10 87 74 01 00 00\nf3 0f 5a c0\nbf bf a4 40 00\nb0 01\ne8 72 d6 ff ff\nbf d3 a4 40 00\n31 c0\ne8 66 d6 ff ff\n41 83 7e 40 00\n7e 3d\n31 db\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 46 48\n48 8b 3c d8\ne8 83 31 00 00\n48 85 c0\n74 10\n48 8b 70 20\nbf 1a a6 40 00\n31 c0\ne8 2e d6 ff ff\n48 ff c3\n49 63 46 40\n48 39 c3\n7c d2\nbf 0a 00 00 00\ne8 08 d5 ff ff\n49 8b 47 60\n48 85 c0\n74 0f\n8b 70 18\nbf e0 a4 40 00\n31 c0\ne8 00 d6 ff ff\nbf f1 a4 40 00\n31 c0\ne8 f4 d5 ff ff\n41 83 7e 34 00\n7e 3a\n31 db\n66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 46 38\n48 8b 3c d8\ne8 53 31 00 00\n48 85 c0\n74 0f\n8b 70 18\nbf b4 b4 40 00\n31 c0\ne8 bf d5 ff ff\n48 ff c3\n49 63 46 34\n48 39 c3\n7c d3\nbf 0a 00 00 00\ne8 99 d4 ff ff\n49 8b 47 60\n48 85 c0\n74 54\n48 8b 58 38\n48 85 db\n74 4b\n8b 73 10\n8b 53 14\n8b 4b 08\n44 8b 43 0c\nbf fe a4 40 00\n31 c0\ne8 7e d5 ff ff\n8b 73 20\n8b 53 24\n8b 4b 18\n44 8b 43 1c\nbf 18 a5 40 00\n31 c0\ne8 65 d5 ff ff\n8b 73 28\n8b 53 2c\n8b 4b 30\n44 8b 43 34\nbf 32 a5 40 00\n31 c0\ne8 4c d5 ff ff\n80 3d 8d 8c 20 00 01\n0f 85 bf 00 00 00\nbf 4c a5 40 00\n31 c0\ne8 33 d5 ff ff\n4d 8d bf 28 01 00 00\n45 31 e4\n66 0f 1f 84 00 00 00 00 00\nbb 03 00 00 00\n4c 89 fd\n0f 1f 84 00 00 00 00 00\n8b 45 00\n0f 57 c0\nf2 0f 2a c0\nf2 0f 59 05 66 52 00 00\nbf 59 a5 40 00\nb0 01\ne8 f2 d4 ff ff\n48 83 c5 04\n48 ff cb\n75 d9\n49 83 fc 01\n7f 0c\nbf 5d a5 40 00\n31 c0\ne8 d7 d4 ff ff\n49 ff c4\n49 83 c7 0c\n49 83 fc 03\n75 aa\n4c 8b 7c 24 28\n49 8b b7 50 01 00 00\n48 85 f6\n74 0c\nbf 6b a5 40 00\n31 c0\ne8 ad d4 ff ff\nbf 0a 00 00 00\ne8 93 d3 ff ff\n8a 05 e5 8b 20 00\na8 01\n74 1f\neb 37\n31 c0\n4c 8b 7c 24 28\na8 01\n74 0b\neb 23\n31 c0\na8 01\n75 1a\nf6 05 c7 8b 20 00 01\n75 11\na8 01\n0f 85 8a 02 00 00\ne9 f4 02 00 00\n48 8b 3d 51 8c 20 00\n49 8b 77 28\n48 8d 54 24 50\ne8 7b d3 ff ff\n48 89 04 24\n83 7c 24 50 00\n0f 8e 53 02 00 00\n45 31 ed\n66 0f 1f 84 00 00 00 00 00\n48 8b 3d 21 8c 20 00\n48 8b 1c 24\n4a 8b 34 eb\ne8 5c d6 ff ff\n48 89 c5\n48 8b 3d 0a 8c 20 00\n49 8b 77 28\n4a 8b 14 eb\n48 83 ec 08\nb9 00 00 00 00\n41 b8 64 00 00 00\n41 b9 00 00 00 00\n48 8d 84 24 18 01 00 00\n50\n48 8d 84 24 90 00 00 00\n50\n48 8d 44 24 58\n50\n48 8d 44 24 6c\n50\n48 8d 84 24 b0 00 00 00\n50\n6a 00\n6a 00\ne8 c5 d6 ff ff\n48 83 c4 40\n48 8b 3d b2 8b 20 00\n49 8b 77 28\n4a 8b 14 eb\ne8 9d d6 ff ff\n49 89 c4\nbf 83 a5 40 00\n31 c0\n48 89 ee\ne8 9b d3 ff ff\n8b 74 24 4c\n48 8b 94 24 88 00 00 00\n8b 4c 24 40\n4c 8b 84 24 10 01 00 00\n48 89 ef\ne8 3b 2f 00 00\n41 83 7c 24 04 00\n0f 84 f9 00 00 00\n41 8b 44 24 0c\n85 c0\n0f 8e e4 00 00 00\n83 f8 02\nbe 5c aa 40 00\nb8 00 b8 40 00\n48 0f 44 f0\nbf 89 a5 40 00\n31 c0\ne8 45 d3 ff ff\n41 83 7c 24 0c 02\n0f 8c ac 00 00 00\nbd 01 00 00 00\n45 31 ff\n90\nbf 28 00 00 00\ne8 16 d2 ff ff\n48 8b b4 24 88 00 00 00\n8d 45 ff\n48 63 d0\n48 c1 e2 03\n49 03 54 24 10\nbf 20 00 00 00\ne8 f5 2f 00 00\nbf 95 a5 40 00\n31 c0\ne8 f9 d2 ff ff\n48 8b b4 24 88 00 00 00\n48 63 d5\n48 c1 e2 03\n49 03 54 24 10\nbf 20 00 00 00\ne8 cb 2f 00 00\nbf 29 00 00 00\ne8 c1 d1 ff ff\n41 8b 44 24 0c\n89 c1\nc1 e9 1f\n01 c1\nd1 f9\nff c9\n48 63 c1\n49 39 c7\n7d 0c\nbf 95 a5 40 00\n31 c0\ne8 ad d2 ff ff\n49 ff c7\n41 8b 44 24 0c\n89 c1\nc1 e9 1f\n01 c1\nd1 f9\n48 63 c1\n83 c5 02\n49 39 c7\n0f 8c 5d ff ff ff\nbf 0a 00 00 00\ne8 73 d1 ff ff\n4c 8b 7c 24 28\n41 83 7c 24 04 00\n75 74\n41 83 7c 24 0c 00\n7e 6c\nbf 98 a5 40 00\n31 c0\ne8 62 d2 ff ff\n41 83 7c 24 0c 00\n7e 4e\n31 ed\n31 db\n66 0f 1f 44 00 00\n48 8b b4 24 88 00 00 00\n49 8b 54 24 10\n48 01 ea\nbf 20 00 00 00\ne8 26 2f 00 00\n49 63 44 24 0c\n48 ff c8\n48 39 c3\n7d 0c\nbf 95 a5 40 00\n31 c0\ne8 1d d2 ff ff\n48 ff c3\n49 63 44 24 0c\n48 83 c5 08\n48 39 c3\n7c bc\nbf 0a 00 00 00\ne8 f2 d0 ff ff\n4c 89 e7\ne8 ca d0 ff ff\n49 ff c5\n48 63 44 24 50\n49 39 c5\n0f 8c b9 fd ff ff\n8a 05 2b 89 20 00\n84 c0\n74 6f\n41 83 7e 50 00\n41 bc 00 00 00 80\n0f 8e a5 01 00 00\n31 ed\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 46 58\n48 8b 3c e8\ne8 63 2f 00 00\n48 89 c3\n31 f6\n49 3b 9f 98 00 00 00\n40 0f 94 c6\n49 63 46 54\n31 d2\n48 39 c5\n0f 9c c2\n48 89 df\ne8 7f 2f 00 00\n4c 09 63 48\n48 ff c5\n49 63 46 50\n48 39 c5\n7c bf\ne9 51 01 00 00\n49 63 7e 50\nbe 04 00 00 00\ne8 12 d2 ff ff\n49 89 c5\n4d 85 ed\n0f 84 2d 0f 00 00\n41 83 7e 50 00\n0f 8e 15 01 00 00\n45 31 ff\n0f 1f 84 00 00 00 00 00\n43 83 7c bd 00 00\n0f 85 ee 00 00 00\n49 8b 46 58\n4a 8b 3c f8\ne8 d7 2e 00 00\n49 89 c4\nbf 20 00 00 00\ne8 0a d0 ff ff\n49 8b 74 24 38\nbf b5 a5 40 00\n31 c0\ne8 09 d1 ff ff\n49 63 46 50\n49 39 c7\n0f 8d ac 00 00 00\n4c 89 fb\n66 0f 1f 84 00 00 00 00 00\n41 83 7c 9d 00 00\n0f 85 84 00 00 00\n49 8b 46 58\n48 8b 3c d8\ne8 87 2e 00 00\n48 89 c5\n49 8b 7c 24 38\n48 8b 75 38\ne8 86 d1 ff ff\n85 c0\n75 62\n41 c7 44 9d 00 01 00 00 00\nb8 00 00 00 80\n48 09 45 48\n48 89 ef\ne8 c8 2f 00 00\nbf bd a5 40 00\nb0 01\ne8 9c d0 ff ff\n48 8b 44 24 28\n48 3b a8 98 00 00 00\n74 07\nbf 20 00 00 00\neb 05\nbf 2a 00 00 00\ne8 6d cf ff ff\n49 63 46 54\n48 39 c3\n7d 07\nbf 2b 00 00 00\neb 05\nbf 20 00 00 00\ne8 53 cf ff ff\n0f 1f 00\n48 ff c3\n49 63 46 50\n48 39 c3\n0f 8c 60 ff ff ff\nbf 0a 00 00 00\ne8 36 cf ff ff\n49 ff c7\n49 63 46 50\n49 39 c7\n0f 8c f6 fe ff ff\n4c 89 ef\ne8 fe ce ff ff\n4c 8b 7c 24 28\n4d 8b 3f\n4d 85 ff\n0f 85 4d f6 ff ff\n48 8b 05 4e 88 20 00\n83 78 30 00\n7e 3e\n31 db\n31 ed\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 78 38\n83 7c 1f 48 00\n78 0c\n48 01 df\n31 f6\n31 d2\ne8 d9 2d 00 00\n48 ff c5\n48 8b 05 17 88 20 00\n48 63 48 30\n48 83 c3 50\n48 39 cd\n7c d2\n31 ff\ne8 5b d3 ff ff\n89 f1\nf2 48 0f 2a c1\nf2 0f 59 05 1c 4d 00 00\n66 48 0f 6e c8\n66 0f 62 0d 5f 4d 00 00\n66 0f 5c 0d 67 4d 00 00\n66 0f 70 d1 4e\n66 0f 58 d1\nf2 0f 5e c2\nf2 0f 11 05 02 87 20 00\n83 3d ef 86 20 00 00\n74 0e\n8b 05 eb 86 20 00\n85 c0\n0f 85 e1 00 00 00\n8b 05 d1 86 20 00\n48 8b 0d 66 87 20 00\n48 8b 91 e8 00 00 00\n48 63 0d 80 86 20 00\n48 c1 e1 07\n3b 44 0a 18\n75 3e\n8b 35 b0 86 20 00\n3b 74 0a 1c\nf2 0f 10 05 b4 86 20 00\n75 32\n66 0f 57 c9\n66 0f 2e c1\n75 28\n7a 26\n8b 44 0a 20\n89 05 90 86 20 00\n48 8b 05 1d 87 20 00\n48 8b 80 e8 00 00 00\n8b 44 08 24\neb 78\nf2 0f 10 05 80 86 20 00\n66 0f 57 c9\n66 0f 2e c8\n72 26\n0f 57 c0\nf2 0f 2a 44 0a 1c\nf2 0f 59 05 55 4c 00 00\n0f 57 c9\nf2 0f 2a 4c 0a 24\nf2 0f 5e c1\nf2 0f 11 05 50 86 20 00\n0f 57 c0\nf2 0f 2a c0\nf2 0f 10 0d 31 4c 00 00\nf2 0f 59 c1\nf2 0f 10 15 35 86 20 00\nf2 0f 5e c2\nf2 0f 2c c0\n89 05 1b 86 20 00\n0f 57 c0\nf2 0f 2a 05 0c 86 20 00\nf2 0f 59 c1\nf2 0f 5e c2\nf2 0f 2c c0\n89 05 02 86 20 00\ne8 35 23 00 00\ne8 c0 23 00 00\ne8 fb 26 00 00\n83 7c 24 78 00\n0f 84 d9 01 00 00\n8a 05 8e 86 20 00\n84 c0\n0f 84 a0 0c 00 00\nbf 01 00 00 00\ne8 78 11 00 00\nbf 01 00 00 00\ne8 4e 28 00 00\ne8 f9 11 00 00\ne8 04 14 00 00\n4c 8b 3d 3d 86 20 00\n4d 85 ff\n75 54\ne9 9c 01 00 00\nbf 29 b9 40 00\ne8 89 cd ff ff\neb 37\n31 c9\n48 8b 15 4e 86 20 00\n3b 0a\n75 12\n49 8b 77 08\nbf 95 a3 40 00\n31 c0\ne8 1a ce ff ff\neb 18\n48 8b 3d 09 86 20 00\n48 8b 35 0a 86 20 00\n48 89 c2\ne8 22 d1 ff ff\n66 90\n4d 8b 3f\n4d 85 ff\n0f 84 4d 01 00 00\n41 83 7f 10 00\n49 8b 77 08\n48 8b 3d dc 85 20 00\n0f 84 ce 00 00 00\n31 d2\ne8 b7 cf ff ff\n49 89 c6\n48 8b 3d c5 85 20 00\n41 8b 77 30\ne8 84 d0 ff ff\n49 89 c4\n4d 89 34 24\n41 8b 47 14\n41 89 44 24 08\n41 8b 47 18\n41 89 44 24 14\n41 8b 47 1c\n41 89 44 24 18\n41 8b 47 20\n41 89 44 24 1c\n41 8b 47 24\n41 89 44 24 20\n41 8b 47 28\n41 89 44 24 24\n41 8b 47 2c\n41 89 44 24 28\n41 83 7f 30 00\n7e 39\n31 ed\n31 db\n0f 1f 00\n49 8b 7f 38\n48 01 ef\ne8 84 16 00 00\n48 85 c0\n0f 84 a8 00 00 00\n48 8b 40 28\n49 8b 4c 24 30\n48 89 04 d9\n48 ff c3\n49 63 47 30\n48 83 c5 20\n48 39 c3\n7c ce\n48 8b 3d 2f 85 20 00\n48 8b 35 30 85 20 00\n4c 89 e2\ne8 48 cd ff ff\n4c 89 e7\ne8 f0 cf ff ff\ne9 1b ff ff ff\nba 01 00 00 00\ne8 e6 ce ff ff\n48 85 c0\n0f 84 d3 fe ff ff\n48 8b 15 16 85 20 00\n48 85 d2\n0f 84 aa fe ff ff\n83 3a 00\n0f 8e ad fe ff ff\n48 8b 72 08\n31 c9\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 06\n0f 84 92 fe ff ff\n48 ff c1\n48 63 3a\n48 83 c6 38\n48 39 f9\n7c e8\ne9 7e fe ff ff\nbf 81 a3 40 00\n31 c0\ne8 07 15 00 00\n48 8b 3d 98 84 20 00\n31 f6\ne8 e9 ce ff ff\n31 ff\ne8 22 d0 ff ff\n4c 89 6c 24 10\n83 bc 24 90 00 00 00 00\n44 8b 7c 24 64\n0f 84 e4 00 00 00\n8a 05 84 84 20 00\n84 c0\n0f 84 22 0b 00 00\n44 89 ff\ne8 74 0f 00 00\ne8 df 17 00 00\n48 83 3d 97 84 20 00 00\n0f 84 bb 00 00 00\n8b 35 93 84 20 00\nbf e1 a5 40 00\n31 c0\ne8 3f cc ff ff\n83 3d 80 84 20 00 00\n0f 8e 9c 00 00 00\n45 31 f6\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 05 59 84 20 00\n4b 8d 0c b6\n48 8b 5c c8 20\n8b 54 c8 10\n8b 0b\nbf f9 a5 40 00\n31 c0\n44 89 f6\ne8 fb cb ff ff\n31 ed\n66 0f 1f 84 00 00 00 00 00\n8b 03\nbf 01 00 00 00\n89 e9\nd3 e7\n0f a3 e8\n73 17\ne8 6b 2b 00 00\n48 89 c1\nbf 19 a6 40 00\n31 c0\n48 89 ce\ne8 c9 cb ff ff\nff c5\n83 fd 04\n75 d2\n8b 73 04\n8b 53 10\n8b 4b 28\n4c 8b 43 20\nbf 1e a6 40 00\n31 c0\ne8 a9 cb ff ff\n49 ff c6\n48 63 05 e7 83 20 00\n49 39 c6\n0f 8c 76 ff ff ff\n44 89 64 24 08\n8b 8c 24 98 00 00 00\n09 8c 24 94 00 00 00\n0f 84 a4 01 00 00\n8a 05 8b 83 20 00\n84 c0\n0f 84 2f 0a 00 00\n31 db\n85 c9\n0f 95 c3\n44 89 ff\ne8 70 0e 00 00\n89 df\ne8 49 25 00 00\ne8 f4 0e 00 00\ne8 ff 10 00 00\n48 8b 05 68 83 20 00\n48 85 c0\n0f 84 66 01 00 00\n8b 30\nbf 57 a6 40 00\n31 c0\ne8 31 cb ff ff\n48 8b 05 4a 83 20 00\n83 38 00\n0f 8e 48 01 00 00\n45 31 f6\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 40 08\n49 6b ee 38\n83 7c 28 0c 00\n41 bd 00 b8 40 00\nb9 c6 a5 40 00\n4c 0f 45 e9\n83 7c 28 08 00\nbb 00 b8 40 00\nb9 c4 a5 40 00\n48 0f 45 d9\n48 8b 3d d2 82 20 00\n48 8b 34 28\ne8 11 cd ff ff\n49 89 c0\n48 8b 05 e7 82 20 00\n48 8b 40 08\n44 8b 4c 28 1c\n8b 4c 28 24\n48 89 4c 24 28\n44 8b 5c 28 20\n44 8b 7c 28 28\n44 8b 64 28 14\n44 8b 54 28 18\n48 83 ec 08\nbf 65 a6 40 00\nb8 00 00 00 00\n44 89 f6\n4c 89 ea\n48 89 d9\n41 52\n41 54\n41 57\n41 53\nff 74 24 50\ne8 79 ca ff ff\n48 83 c4 30\n48 8b 05 8e 82 20 00\n48 8b 40 08\n83 7c 28 10 00\n7e 6a\n31 db\n90\n48 8b 44 28 30\n48 8b 3c d8\ne8 92 25 00 00\n48 85 c0\n74 1d\n48 8b 70 20\nbf 1a a6 40 00\n31 c0\ne8 3d ca ff ff\neb 2a\n48 8b 05 49 82 20 00\n48 8b 40 08\n48 8b 44 28 30\n8b 34 d8\nbf 84 a6 40 00\n31 c0\ne8 11 ca ff ff\n48 ff c3\n48 8b 05 27 82 20 00\n48 8b 40 08\n48 63 4c 28 10\n48 39 cb\n7c 99\nbf 0a 00 00 00\ne8 df c8 ff ff\n49 ff c6\n48 8b 05 05 82 20 00\n48 63 08\n49 39 ce\n0f 8c c9 fe ff ff\n48 8b 3d ca 81 20 00\n48 8b 35 cb 81 20 00\ne8 16 cd ff ff\n49 89 c4\n4d 85 e4\n0f 84 66 08 00 00\n48 8d 74 24 50\n4c 89 e7\ne8 3d cb ff ff\n66 89 44 24 30\n48 8d 74 24 40\n4c 89 e7\ne8 db c9 ff ff\n48 89 44 24 28\n83 bc 24 a0 00 00 00 00\n4c 8b b4 24 b0 00 00 00\n48 8b 5c 24 10\n74 65\n83 7c 24 40 00\n44 8b 7c 24 08\n7e 38\n8b 84 24 ac 00 00 00\n8b 8c 24 a8 00 00 00\n48 63 54 24 40\n48 8b 74 24 28\n48 8d 76 04\n31 db\n0f 1f 44 00 00\n39 46 fc\n75 04\n39 0e\n74 5d\n48 ff c3\n48 83 c6 10\n48 39 d3\n7c eb\n48 8b 3d 64 80 20 00\n8b 94 24 ac 00 00 00\n8b 8c 24 a8 00 00 00\nbe 9a a6 40 00\n31 c0\ne9 39 07 00 00\n85 db\n78 22\n8b 4c 24 40\n39 cb\n44 8b 7c 24 08\n7c 1f\n48 8b 3d 32 80 20 00\nbe c3 a6 40 00\n31 c0\n89 da\ne9 13 07 00 00\n0f b7 5c 24 30\n44 8b 7c 24 08\n45 85 f6\n79 22\n0f b7 44 24 50\n83 e0 0f\n45 31 f6\nba 01 00 00 00\n44 89 f1\nd3 e2\n39 c2\n74 09\n41 ff c6\n41 83 fe 04\n7c e9\n4c 89 e7\ne8 0b ca ff ff\n41 89 c5\n66 0f 57 c0\n66 0f 2e 04 24\n76 1b\n0f b7 44 24 30\n39 c3\n75 0b\n41 0f bf c5\n0f 57 c0\nf2 0f 2a c0\nf2 0f 11 04 24\neb 65\n48 8d 94 24 80 00 00 00\n4c 89 e7\n89 de\ne8 60 cb ff ff\n8b 94 24 80 00 00 00\n85 d2\n7e 39\n8b b4 24 80 00 00 00\n48 63 fe\n31 c9\nf2 0f 10 04 24\n0f bf 2c 48\n0f 57 c9\nf2 0f 2a cd\n66 0f 2e c1\n75 02\n7b 1c\n48 ff c1\n48 39 f9\n89 f2\n7c e3\n89 f2\n39 d1\n75 14\ne9 06 07 00 00\n31 c9\nf2 0f 10 04 24\n39 d1\n0f 84 f7 06 00 00\n66 44 89 6c 24 20\n48 89 5c 24 10\n4c 89 b4 24 b0 00 00 00\n83 7c 24 5c 00\n74 36\n48 8b 3d 04 80 20 00\n48 8d b4 24 10 01 00 00\n48 8d 94 24 88 00 00 00\ne8 57 c7 ff ff\n8b b4 24 10 01 00 00\n8b 94 24 88 00 00 00\nbf 22 a7 40 00\n31 c0\ne8 dd c7 ff ff\n44 09 7c 24 48\n0f 84 21 01 00 00\nbf c0 b9 40 00\ne8 18 c7 ff ff\n83 7c 24 40 00\n0f 8e 0c 01 00 00\n0f b7 5c 24 30\nb8 2a 00 00 00\n45 31 ed\n4c 89 64 24 78\n44 0f b7 74 24 20\n41 bf 20 00 00 00\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 39 dd\nbe 20 00 00 00\n0f 44 f0\n4c 89 e8\n48 c1 e0 04\n48 8b 54 24 28\n8b 0c 02\n44 8b 44 02 04\n44 8b 4c 02 08\n8b 6c 02 0c\n48 83 ec 08\nbf 76 a7 40 00\n31 c0\n44 89 ea\n55\ne8 54 c7 ff ff\n48 83 c4 10\n4c 89 e7\n44 89 ee\n48 8d 94 24 80 00 00 00\ne8 1d ca ff ff\n48 89 c5\n83 bc 24 80 00 00 00 00\n74 5a\nbf 68 a5 40 00\n31 c0\ne8 24 c7 ff ff\n83 bc 24 80 00 00 00 00\n7e 44\n45 31 e4\n0f 1f 80 00 00 00 00\n42 0f bf 54 65 00\n66 44 39 f2\nbe 20 00 00 00\nb8 2a 00 00 00\n0f 44 f0\n49 39 dd\n41 0f 45 f7\nbf 99 a7 40 00\n31 c0\ne8 e6 c6 ff ff\n49 ff c4\n48 63 84 24 80 00 00 00\n49 39 c4\n7c c6\nbf 0a 00 00 00\ne8 bc c5 ff ff\n49 ff c5\n48 63 44 24 40\n49 39 c5\n4c 8b 64 24 78\nb8 2a 00 00 00\n0f 8c 21 ff ff ff\n48 8d 74 24 50\n4c 89 e7\ne8 54 c6 ff ff\n89 c3\n83 bc 24 9c 00 00 00 00\n74 0f\n44 0f b7 74 24 50\n41 f7 d6\n41 83 e6 10\neb 03\n45 31 f6\n4c 8b 7c 24 10\n83 bc 24 c0 00 00 00 00\n8b 4c 24 08\n74 0d\n0f b7 44 24 50\nf7 d0\n83 e0 20\n41 09 c6\n85 c9\n0f 84 be 00 00 00\n0f b7 7c 24 50\ne8 44 21 00 00\n48 89 c1\nbf a0 a7 40 00\n31 c0\n48 89 ce\ne8 42 c6 ff ff\n0f b7 7c 24 50\ne8 58 21 00 00\n48 89 c1\nbf b7 a7 40 00\n31 c0\n48 89 ce\ne8 26 c6 ff ff\nbf d0 a7 40 00\n31 c0\ne8 1a c6 ff ff\n0f b7 db\n31 ed\n0f 1f 44 00 00\n0f a3 eb\n73 14\n48 8b 34 ed a0 9a 40 00\nbf e6 a7 40 00\n31 c0\ne8 f7 c5 ff ff\n48 ff c5\n48 83 fd 04\n75 de\nbf 0a 00 00 00\ne8 d4 c4 ff ff\nbf ea a7 40 00\n31 c0\ne8 d8 c5 ff ff\nf6 c3 30\n74 1d\nf6 c3 10\n74 0c\nbf 02 a8 40 00\n31 c0\ne8 c2 c5 ff ff\nf6 c3 20\n74 13\nbf 0a a8 40 00\neb 05\nbf fb 9f 40 00\n31 c0\ne8 aa c5 ff ff\nbf 0a 00 00 00\ne8 90 c4 ff ff\n80 3d e1 7c 20 00 01\n75 65\n48 63 84 24 b0 00 00 00\n48 8b 14 c5 a0 9a 40 00\nbf 11 a8 40 00\n31 c0\n44 89 fe\ne8 78 c5 ff ff\nbf 35 a8 40 00\n31 c0\ne8 6c c5 ff ff\n45 85 f6\n74 1f\n41 f6 c6 10\n74 0c\nbf 02 a8 40 00\n31 c0\ne8 55 c5 ff ff\n41 f6 c6 20\n74 13\nbf 0a a8 40 00\neb 05\nbf 4c a8 40 00\n31 c0\ne8 3c c5 ff ff\nbf 0a 00 00 00\ne8 22 c4 ff ff\n48 8b 3d 23 7d 20 00\n48 8b 35 24 7d 20 00\nba 00 00 02 00\ne8 7a c7 ff ff\n83 7c 24 24 00\n74 21\nf6 05 58 7c 20 00 01\n75 18\n48 8b 3d fb 7c 20 00\n48 8b 35 fc 7c 20 00\nba 01 00 00 00\ne8 c2 c8 ff ff\n83 7c 24 24 00\nbb 03 00 00 00\n74 4e\nf6 05 2b 7c 20 00 01\n75 45\nb8 01 00 00 00\n48 8b 8c 24 b0 00 00 00\nd3 e0\n48 8b 3d bf 7c 20 00\n48 8b 15 c0 7c 20 00\n41 0f b7 cf\n41 09 c6\nf2 0f 2c 04 24\n48 83 ec 08\n45 0f b7 c6\n44 0f bf c8\n4c 89 e6\n6a 00\ne8 7e c5 ff ff\n48 83 c4 10\n89 c3\n83 7c 24 24 00\n0f 95 c0\n31 ed\n83 fb 03\n75 1c\n8a 0d cf 7b 20 00\n80 f1 01\n20 c8\n74 0f\nbf 90 b9 40 00\ne8 c2 c3 ff ff\nbd 01 00 00 00\n83 7c 24 24 00\n0f 94 c0\n8a 0d ab 7b 20 00\n84 c9\n0f 85 ad 01 00 00\n8a 0d 99 7b 20 00\n80 f1 01\n08 c8\na8 01\n0f 85 9a 01 00 00\n0f b7 44 24 30\n41 39 c7\n0f 84 8c 01 00 00\n85 db\n0f 85 84 01 00 00\n48 8d 9c 24 10 01 00 00\neb 0c\nbf fc a9 40 00\n31 c0\ne8 18 c4 ff ff\n48 8b 3d 09 7c 20 00\n48 89 de\ne8 b9 c5 ff ff\n8b b4 24 10 01 00 00\nbf 85 a8 40 00\n31 c0\ne8 f6 c3 ff ff\n48 89 df\ne8 ce c3 ff ff\n8b b4 24 10 01 00 00\n83 fe 16\n75 11\nbf 70 b9 40 00\ne8 28 c3 ff ff\n8b b4 24 10 01 00 00\n3b b4 24 cc 00 00 00\n74 07\n83 fe 16\n74 ab\neb 9d\nbf 40 b9 40 00\ne8 07 c3 ff ff\n8b b4 24 30 01 00 00\n8b 94 24 38 01 00 00\n0f b7 8c 24 50 01 00 00\n44 0f b7 84 24 54 01 00 00\nbf e4 a8 40 00\n31 c0\ne8 8c c3 ff ff\n48 8b b4 24 40 01 00 00\n48 8b 94 24 48 01 00 00\nbf 1b a9 40 00\n31 c0\ne8 70 c3 ff ff\n0f b7 b4 24 54 01 00 00\nbf 45 a9 40 00\n31 c0\ne8 5c c3 ff ff\n8b b4 24 58 01 00 00\n8b 94 24 5c 01 00 00\n8b 8c 24 60 01 00 00\n44 8b 84 24 64 01 00 00\nbf 55 a9 40 00\n31 c0\ne8 33 c3 ff ff\n48 8b 05 24 7b 20 00\n48 8b 80 e8 00 00 00\n48 63 0d 3e 7a 20 00\n48 c1 e1 07\n8b 74 08 18\n8b 54 08 1c\nbf 72 a9 40 00\n31 c0\ne8 06 c3 ff ff\n48 8b 05 f7 7a 20 00\n48 8b 80 e8 00 00 00\n48 63 0d 11 7a 20 00\n48 c1 e1 07\n8b 74 08 20\n8b 54 08 24\nbf 93 a9 40 00\n31 c0\ne8 d9 c2 ff ff\n0f b7 b4 24 52 01 00 00\n83 fe 06\n72 0e\nbf b4 a9 40 00\n31 c0\ne8 c0 c2 ff ff\neb 14\n48 8b 34 f5 c0 9b 40 00\nbf d8 a9 40 00\n31 c0\ne8 aa c2 ff ff\n4c 89 e7\ne8 82 c1 ff ff\n89 e8\n48 81 c4 d8 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 79 03 00 00\n31 ff\ne8 12 c6 ff ff\n4a 8b 74 e5 00\nbf c5 9c 40 00\n31 c0\ne8 81 02 00 00\n48 8b b5 88 00 00 00\nbf c6 a2 40 00\n31 c0\ne8 be 0a 00 00\n48 8b 75 68\nbf dd a2 40 00\n31 c0\ne8 ae 0a 00 00\n48 8b 0d 77 79 20 00\nbf ad a2 40 00\nbe 18 00 00 00\nba 01 00 00 00\ne8 d3 c5 ff ff\nbf 01 00 00 00\ne8 b9 c5 ff ff\nbf a6 a5 40 00\n31 c0\ne8 7d 0a 00 00\n48 8b 1d 46 79 20 00\n48 89 ef\ne8 2e c4 ff ff\n48 89 c1\nbe 6b a2 40 00\n31 c0\n48 89 df\n48 89 ca\ne8 e9 c2 ff ff\nbf 01 00 00 00\ne8 7f c5 ff ff\n48 8b 3d 18 79 20 00\nbe 82 a2 40 00\n31 c0\ne8 cc c2 ff ff\nbf 01 00 00 00\ne8 62 c5 ff ff\nbf f0 b9 40 00\ne8 18 c1 ff ff\n31 ff\ne8 51 c5 ff ff\nbf f6 a2 40 00\n31 c0\ne8 15 0a 00 00\nbf 24 a3 40 00\n31 c0\ne8 09 0a 00 00\n48 8b 35 1a 79 20 00\nbf 51 a3 40 00\n31 c0\ne8 f6 09 00 00\nbf 1b 9d 40 00\n31 c0\ne8 9a 01 00 00\n4a 8b 74 e5 00\n48 8b 44 24 08\n48 8b 54 c5 00\nbf b3 9d 40 00\n31 c0\ne8 7f 01 00 00\nbf c5 9c 40 00\n31 c0\n48 89 de\ne8 70 01 00 00\nbf 70 9d 40 00\n31 c0\ne8 64 01 00 00\nbf 01 00 00 00\ne8 da c4 ff ff\nbf 10 ba 40 00\ne9 73 ff ff ff\nbf f0 b9 40 00\ne9 69 ff ff ff\n48 8b 3d 5f 78 20 00\nbe f8 a6 40 00\nb0 01\ne8 13 c2 ff ff\nbf 01 00 00 00\ne8 a9 c4 ff ff\n4a 8b 74 e5 00\n48 8b 44 24 38\neb 8d\n4a 8b 74 e5 00\nbf 3e 9e 40 00\n31 c0\ne8 0c 01 00 00\n4a 8b 74 e5 00\n4a 8b 54 ed 00\ne9 72 ff ff ff\n4a 8b 74 e5 00\n48 8b 84 24 d0 00 00 00\ne9 5b ff ff ff\n4a 8b 74 e5 00\n48 8b 54 dd 00\ne9 51 ff ff ff\nbf 24 9f 40 00\ne9 58 ff ff ff\n48 8b 74 dd 00\nbf 4f 9f 40 00\n31 c0\ne8 c1 00 00 00\n48 8b 74 dd 00\nbf 97 9f 40 00\n31 c0\ne8 b0 00 00 00\nbf c2 9f 40 00\n31 c0\ne8 a4 00 00 00\n4a 8b 74 e5 00\nbf 05 9e 40 00\n31 c0\ne8 93 00 00 00\n4a 8b 74 ed 00\nbf 24 a0 40 00\n31 c0\ne8 82 00 00 00\nbf 05 9e 40 00\ne9 fe fe ff ff\n48 8b 74 dd 00\nbf 59 a0 40 00\n31 c0\ne8 67 00 00 00\n48 8b 74 dd 00\nbf 8c a0 40 00\n31 c0\ne8 56 00 00 00\nbf d7 a0 40 00\n31 c0\ne8 4a 00 00 00\n4a 8b 74 e5 00\nbf 24 9f 40 00\n31 c0\ne8 39 00 00 00\n4a 8b 74 e5 00\nbf 96 a1 40 00\n31 c0\ne8 28 00 00 00\n49 83 c4 02\n4a 8b 74 e5 00\nbf c4 a1 40 00\n31 c0\ne8 13 00 00 00\nbf 2d a2 40 00\ne9 8f fe ff ff\n'
p670
S'.text:00000000004020d0\n.text:00000000004020d1\n.text:00000000004020d3\n.text:00000000004020d5\n.text:00000000004020d7\n.text:00000000004020d9\n.text:00000000004020da\n.text:00000000004020e1\n.text:00000000004020e4\n.text:00000000004020e7\n.text:00000000004020f2\n.text:00000000004020fd\n.text:0000000000402101\n.text:0000000000402108\n.text:000000000040210c\n.text:0000000000402112\n.text:0000000000402115\n.text:000000000040211d\n.text:0000000000402125\n.text:000000000040212b\n.text:0000000000402130\n.text:0000000000402138\n.text:0000000000402140\n.text:0000000000402148\n.text:000000000040214d\n.text:0000000000402152\n.text:0000000000402158\n.text:0000000000402160\n.text:0000000000402168\n.text:0000000000402173\n.text:0000000000402178\n.text:000000000040217d\n.text:0000000000402185\n.text:000000000040218d\n.text:0000000000402195\n.text:000000000040219d\n.text:00000000004021a5\n.text:00000000004021b0\n.text:00000000004021b8\n.text:00000000004021c0\n.text:00000000004021c8\n.text:00000000004021d3\n.text:00000000004021de\n.text:00000000004021e6\n.text:00000000004021f1\n.text:00000000004021f3\n.text:00000000004021fb\n.text:0000000000402200\n.text:0000000000402207\n.text:000000000040220c\n.text:0000000000402213\n.text:000000000040221a\n.text:000000000040221f\n.text:0000000000402226\n.text:000000000040222b\n.text:0000000000402233\n.text:0000000000402238\n.text:000000000040223b\n.text:000000000040223e\n.text:0000000000402244\n.text:0000000000402247\n.text:000000000040224c\n.text:0000000000402251\n.text:0000000000402253\n.text:000000000040225b\n.text:0000000000402263\n.text:0000000000402268\n.text:0000000000402270\n.text:0000000000402273\n.text:0000000000402275\n.text:0000000000402280\n.text:0000000000402288\n.text:000000000040228d\n.text:0000000000402290\n.text:0000000000402293\n.text:0000000000402299\n.text:000000000040229c\n.text:00000000004022a1\n.text:00000000004022a6\n.text:00000000004022ab\n.text:00000000004022ae\n.text:00000000004022b0\n.text:00000000004022b8\n.text:00000000004022bc\n.text:00000000004022c4\n.text:00000000004022cc\n.text:00000000004022d4\n.text:00000000004022d9\n.text:00000000004022de\n.text:00000000004022e3\n.text:00000000004022e6\n.text:00000000004022e9\n.text:00000000004022f1\n.text:00000000004022f6\n.text:00000000004022fc\n.text:0000000000402301\n.text:0000000000402309\n.text:000000000040230b\n.text:0000000000402310\n.text:0000000000402318\n.text:000000000040231d\n.text:0000000000402325\n.text:000000000040232d\n.text:0000000000402332\n.text:0000000000402335\n.text:0000000000402338\n.text:000000000040233e\n.text:0000000000402341\n.text:0000000000402346\n.text:000000000040234b\n.text:0000000000402351\n.text:0000000000402353\n.text:0000000000402358\n.text:000000000040235e\n.text:0000000000402363\n.text:000000000040236b\n.text:0000000000402370\n.text:0000000000402377\n.text:000000000040237f\n.text:0000000000402387\n.text:000000000040238c\n.text:000000000040238f\n.text:0000000000402392\n.text:0000000000402398\n.text:000000000040239d\n.text:00000000004023a0\n.text:00000000004023a5\n.text:00000000004023aa\n.text:00000000004023b2\n.text:00000000004023b7\n.text:00000000004023bc\n.text:00000000004023c4\n.text:00000000004023c9\n.text:00000000004023cb\n.text:00000000004023d0\n.text:00000000004023d3\n.text:00000000004023db\n.text:00000000004023de\n.text:00000000004023e3\n.text:00000000004023e5\n.text:00000000004023e7\n.text:00000000004023ea\n.text:00000000004023ee\n.text:00000000004023f0\n.text:00000000004023f5\n.text:0000000000402400\n.text:0000000000402405\n.text:000000000040240a\n.text:0000000000402412\n.text:0000000000402417\n.text:000000000040241a\n.text:000000000040241d\n.text:0000000000402423\n.text:000000000040242b\n.text:0000000000402433\n.text:000000000040243b\n.text:0000000000402440\n.text:0000000000402445\n.text:000000000040244a\n.text:000000000040244d\n.text:0000000000402450\n.text:0000000000402456\n.text:0000000000402459\n.text:000000000040245e\n.text:0000000000402463\n.text:000000000040246b\n.text:000000000040246e\n.text:0000000000402473\n.text:0000000000402476\n.text:000000000040247c\n.text:0000000000402484\n.text:0000000000402489\n.text:000000000040248c\n.text:0000000000402491\n.text:0000000000402494\n.text:000000000040249a\n.text:000000000040249d\n.text:00000000004024a0\n.text:00000000004024a6\n.text:00000000004024aa\n.text:00000000004024ad\n.text:00000000004024b2\n.text:00000000004024b7\n.text:00000000004024bc\n.text:00000000004024c0\n.text:00000000004024c5\n.text:00000000004024c8\n.text:00000000004024cb\n.text:00000000004024d1\n.text:00000000004024d4\n.text:00000000004024d7\n.text:00000000004024dd\n.text:00000000004024e1\n.text:00000000004024e4\n.text:00000000004024e9\n.text:00000000004024ee\n.text:00000000004024f3\n.text:00000000004024f7\n.text:00000000004024fc\n.text:0000000000402501\n.text:0000000000402504\n.text:0000000000402509\n.text:000000000040250d\n.text:0000000000402512\n.text:0000000000402517\n.text:000000000040251c\n.text:0000000000402524\n.text:0000000000402529\n.text:000000000040252e\n.text:0000000000402531\n.text:0000000000402537\n.text:000000000040253b\n.text:0000000000402540\n.text:0000000000402544\n.text:0000000000402549\n.text:000000000040254c\n.text:0000000000402552\n.text:0000000000402555\n.text:0000000000402558\n.text:000000000040255e\n.text:0000000000402561\n.text:0000000000402566\n.text:000000000040256b\n.text:0000000000402570\n.text:0000000000402572\n.text:000000000040257a\n.text:000000000040257f\n.text:0000000000402584\n.text:0000000000402586\n.text:0000000000402588\n.text:000000000040258b\n.text:000000000040258f\n.text:0000000000402591\n.text:0000000000402594\n.text:000000000040259a\n.text:000000000040259f\n.text:00000000004025a4\n.text:00000000004025a7\n.text:00000000004025ae\n.text:00000000004025b3\n.text:00000000004025b8\n.text:00000000004025ba\n.text:00000000004025bc\n.text:00000000004025be\n.text:00000000004025c5\n.text:00000000004025c9\n.text:00000000004025ce\n.text:00000000004025d3\n.text:00000000004025d6\n.text:00000000004025dc\n.text:00000000004025df\n.text:00000000004025e2\n.text:00000000004025e8\n.text:00000000004025eb\n.text:00000000004025f0\n.text:00000000004025f5\n.text:00000000004025fc\n.text:0000000000402603\n.text:0000000000402608\n.text:000000000040260a\n.text:000000000040260f\n.text:0000000000402612\n.text:0000000000402618\n.text:000000000040261c\n.text:0000000000402621\n.text:0000000000402624\n.text:000000000040262a\n.text:000000000040262d\n.text:0000000000402630\n.text:0000000000402636\n.text:0000000000402639\n.text:000000000040263e\n.text:0000000000402643\n.text:0000000000402645\n.text:000000000040264d\n.text:0000000000402652\n.text:0000000000402657\n.text:0000000000402659\n.text:000000000040265b\n.text:000000000040265e\n.text:0000000000402662\n.text:0000000000402664\n.text:0000000000402667\n.text:000000000040266d\n.text:0000000000402672\n.text:0000000000402675\n.text:000000000040267c\n.text:0000000000402681\n.text:0000000000402684\n.text:0000000000402686\n.text:000000000040268d\n.text:0000000000402691\n.text:0000000000402696\n.text:000000000040269c\n.text:00000000004026a2\n.text:00000000004026a5\n.text:00000000004026a8\n.text:00000000004026ae\n.text:00000000004026b3\n.text:00000000004026b6\n.text:00000000004026c0\n.text:00000000004026c5\n.text:00000000004026cb\n.text:00000000004026d1\n.text:00000000004026d4\n.text:00000000004026d7\n.text:00000000004026dd\n.text:00000000004026e2\n.text:00000000004026e5\n.text:00000000004026ef\n.text:00000000004026f4\n.text:00000000004026fa\n.text:0000000000402700\n.text:0000000000402703\n.text:0000000000402706\n.text:000000000040270c\n.text:0000000000402711\n.text:0000000000402714\n.text:000000000040271e\n.text:0000000000402720\n.text:0000000000402726\n.text:000000000040272c\n.text:000000000040272f\n.text:0000000000402732\n.text:0000000000402738\n.text:000000000040273d\n.text:0000000000402740\n.text:000000000040274a\n.text:000000000040274c\n.text:0000000000402752\n.text:0000000000402758\n.text:000000000040275b\n.text:000000000040275e\n.text:0000000000402764\n.text:0000000000402769\n.text:000000000040276c\n.text:0000000000402776\n.text:0000000000402779\n.text:000000000040277e\n.text:0000000000402785\n.text:0000000000402789\n.text:000000000040278e\n.text:0000000000402794\n.text:000000000040279a\n.text:000000000040279d\n.text:00000000004027a0\n.text:00000000004027a6\n.text:00000000004027a9\n.text:00000000004027b1\n.text:00000000004027b6\n.text:00000000004027bb\n.text:00000000004027c2\n.text:00000000004027c9\n.text:00000000004027d0\n.text:00000000004027d7\n.text:00000000004027de\n.text:00000000004027e3\n.text:00000000004027ea\n.text:00000000004027f2\n.text:00000000004027f9\n.text:0000000000402800\n.text:0000000000402808\n.text:000000000040280f\n.text:0000000000402816\n.text:000000000040281e\n.text:0000000000402825\n.text:000000000040282c\n.text:0000000000402831\n.text:0000000000402836\n.text:000000000040283e\n.text:0000000000402846\n.text:0000000000402848\n.text:000000000040284a\n.text:0000000000402851\n.text:0000000000402852\n.text:0000000000402859\n.text:000000000040285c\n.text:000000000040285e\n.text:0000000000402865\n.text:0000000000402869\n.text:000000000040286e\n.text:0000000000402872\n.text:0000000000402875\n.text:0000000000402877\n.text:000000000040287a\n.text:0000000000402880\n.text:0000000000402887\n.text:000000000040288f\n.text:0000000000402895\n.text:000000000040289d\n.text:00000000004028a3\n.text:00000000004028a7\n.text:00000000004028ad\n.text:00000000004028b1\n.text:00000000004028b5\n.text:00000000004028ba\n.text:00000000004028be\n.text:00000000004028c3\n.text:00000000004028c9\n.text:00000000004028cf\n.text:00000000004028d2\n.text:00000000004028d5\n.text:00000000004028db\n.text:00000000004028de\n.text:00000000004028e3\n.text:00000000004028e8\n.text:00000000004028ef\n.text:00000000004028f6\n.text:00000000004028fd\n.text:0000000000402902\n.text:0000000000402904\n.text:0000000000402909\n.text:000000000040290c\n.text:000000000040290e\n.text:0000000000402913\n.text:0000000000402919\n.text:000000000040291f\n.text:0000000000402922\n.text:0000000000402925\n.text:000000000040292b\n.text:000000000040292e\n.text:0000000000402933\n.text:0000000000402938\n.text:000000000040293f\n.text:0000000000402944\n.text:0000000000402946\n.text:000000000040294b\n.text:000000000040294e\n.text:0000000000402954\n.text:0000000000402959\n.text:000000000040295d\n.text:0000000000402965\n.text:000000000040296a\n.text:0000000000402970\n.text:0000000000402976\n.text:000000000040297b\n.text:000000000040297f\n.text:0000000000402989\n.text:000000000040298b\n.text:0000000000402992\n.text:0000000000402994\n.text:000000000040299a\n.text:00000000004029a0\n.text:00000000004029a4\n.text:00000000004029a7\n.text:00000000004029ad\n.text:00000000004029b2\n.text:00000000004029b7\n.text:00000000004029bc\n.text:00000000004029bf\n.text:00000000004029c3\n.text:00000000004029c6\n.text:00000000004029ca\n.text:00000000004029cf\n.text:00000000004029d3\n.text:00000000004029d6\n.text:00000000004029db\n.text:00000000004029df\n.text:00000000004029e3\n.text:00000000004029eb\n.text:00000000004029f0\n.text:00000000004029f6\n.text:00000000004029fc\n.text:00000000004029ff\n.text:0000000000402a02\n.text:0000000000402a08\n.text:0000000000402a0b\n.text:0000000000402a10\n.text:0000000000402a15\n.text:0000000000402a17\n.text:0000000000402a1f\n.text:0000000000402a24\n.text:0000000000402a29\n.text:0000000000402a2c\n.text:0000000000402a32\n.text:0000000000402a37\n.text:0000000000402a3a\n.text:0000000000402a41\n.text:0000000000402a46\n.text:0000000000402a4f\n.text:0000000000402a57\n.text:0000000000402a5b\n.text:0000000000402a5f\n.text:0000000000402a65\n.text:0000000000402a6b\n.text:0000000000402a6f\n.text:0000000000402a73\n.text:0000000000402a79\n.text:0000000000402a83\n.text:0000000000402a8c\n.text:0000000000402a92\n.text:0000000000402a9a\n.text:0000000000402a9e\n.text:0000000000402aa3\n.text:0000000000402aa8\n.text:0000000000402aac\n.text:0000000000402ab0\n.text:0000000000402ab4\n.text:0000000000402ab8\n.text:0000000000402abc\n.text:0000000000402ac3\n.text:0000000000402acd\n.text:0000000000402ad8\n.text:0000000000402adc\n.text:0000000000402ae1\n.text:0000000000402ae7\n.text:0000000000402aed\n.text:0000000000402af0\n.text:0000000000402af3\n.text:0000000000402af9\n.text:0000000000402afc\n.text:0000000000402b01\n.text:0000000000402b06\n.text:0000000000402b08\n.text:0000000000402b10\n.text:0000000000402b15\n.text:0000000000402b1a\n.text:0000000000402b1d\n.text:0000000000402b23\n.text:0000000000402b2a\n.text:0000000000402b2c\n.text:0000000000402b32\n.text:0000000000402b36\n.text:0000000000402b38\n.text:0000000000402b3e\n.text:0000000000402b43\n.text:0000000000402b49\n.text:0000000000402b4f\n.text:0000000000402b53\n.text:0000000000402b58\n.text:0000000000402b5e\n.text:0000000000402b64\n.text:0000000000402b67\n.text:0000000000402b6a\n.text:0000000000402b70\n.text:0000000000402b75\n.text:0000000000402b7c\n.text:0000000000402b7f\n.text:0000000000402b84\n.text:0000000000402b87\n.text:0000000000402b8c\n.text:0000000000402b91\n.text:0000000000402b94\n.text:0000000000402b99\n.text:0000000000402b9b\n.text:0000000000402ba1\n.text:0000000000402ba5\n.text:0000000000402baa\n.text:0000000000402baf\n.text:0000000000402bb2\n.text:0000000000402bba\n.text:0000000000402bc2\n.text:0000000000402bca\n.text:0000000000402bd2\n.text:0000000000402bda\n.text:0000000000402bdb\n.text:0000000000402be3\n.text:0000000000402be4\n.text:0000000000402bec\n.text:0000000000402bed\n.text:0000000000402bf5\n.text:0000000000402bf6\n.text:0000000000402bfe\n.text:0000000000402bff\n.text:0000000000402c04\n.text:0000000000402c08\n.text:0000000000402c0b\n.text:0000000000402c11\n.text:0000000000402c14\n.text:0000000000402c19\n.text:0000000000402c21\n.text:0000000000402c23\n.text:0000000000402c28\n.text:0000000000402c2b\n.text:0000000000402c2e\n.text:0000000000402c32\n.text:0000000000402c3a\n.text:0000000000402c3e\n.text:0000000000402c40\n.text:0000000000402c44\n.text:0000000000402c48\n.text:0000000000402c4b\n.text:0000000000402c4d\n.text:0000000000402c50\n.text:0000000000402c54\n.text:0000000000402c58\n.text:0000000000402c5c\n.text:0000000000402c5e\n.text:0000000000402c63\n.text:0000000000402c6e\n.text:0000000000402c78\n.text:0000000000402c83\n.text:0000000000402c88\n.text:0000000000402c8c\n.text:0000000000402c91\n.text:0000000000402c97\n.text:0000000000402c9d\n.text:0000000000402ca2\n.text:0000000000402ca5\n.text:0000000000402ca9\n.text:0000000000402cab\n.text:0000000000402cb0\n.text:0000000000402cb4\n.text:0000000000402cb6\n.text:0000000000402cbb\n.text:0000000000402cbf\n.text:0000000000402cc4\n.text:0000000000402cc7\n.text:0000000000402cca\n.text:0000000000402cd0\n.text:0000000000402cd3\n.text:0000000000402cd8\n.text:0000000000402cdd\n.text:0000000000402ce2\n.text:0000000000402ce7\n.text:0000000000402ce9\n.text:0000000000402cee\n.text:0000000000402cf6\n.text:0000000000402cf9\n.text:0000000000402d01\n.text:0000000000402d06\n.text:0000000000402d0b\n.text:0000000000402d11\n.text:0000000000402d16\n.text:0000000000402d19\n.text:0000000000402d1c\n.text:0000000000402d22\n.text:0000000000402d25\n.text:0000000000402d2a\n.text:0000000000402d2f\n.text:0000000000402d34\n.text:0000000000402d39\n.text:0000000000402d3b\n.text:0000000000402d40\n.text:0000000000402d48\n.text:0000000000402d4b\n.text:0000000000402d53\n.text:0000000000402d58\n.text:0000000000402d5d\n.text:0000000000402d63\n.text:0000000000402d68\n.text:0000000000402d6b\n.text:0000000000402d6e\n.text:0000000000402d74\n.text:0000000000402d77\n.text:0000000000402d7c\n.text:0000000000402d84\n.text:0000000000402d89\n.text:0000000000402d91\n.text:0000000000402d96\n.text:0000000000402d9e\n.text:0000000000402da0\n.text:0000000000402dab\n.text:0000000000402db0\n.text:0000000000402db7\n.text:0000000000402db9\n.text:0000000000402dbf\n.text:0000000000402dc1\n.text:0000000000402dc6\n.text:0000000000402dd0\n.text:0000000000402dd4\n.text:0000000000402ddc\n.text:0000000000402de1\n.text:0000000000402de9\n.text:0000000000402dee\n.text:0000000000402df6\n.text:0000000000402dfb\n.text:0000000000402e02\n.text:0000000000402e0a\n.text:0000000000402e0c\n.text:0000000000402e11\n.text:0000000000402e16\n.text:0000000000402e1b\n.text:0000000000402e20\n.text:0000000000402e25\n.text:0000000000402e2a\n.text:0000000000402e2e\n.text:0000000000402e32\n.text:0000000000402e35\n.text:0000000000402e3a\n.text:0000000000402e40\n.text:0000000000402e45\n.text:0000000000402e4a\n.text:0000000000402e4e\n.text:0000000000402e53\n.text:0000000000402e58\n.text:0000000000402e5b\n.text:0000000000402e60\n.text:0000000000402e65\n.text:0000000000402e6d\n.text:0000000000402e71\n.text:0000000000402e79\n.text:0000000000402e7d\n.text:0000000000402e82\n.text:0000000000402e8c\n.text:0000000000402e8f\n.text:0000000000402e94\n.text:0000000000402e98\n.text:0000000000402e9c\n.text:0000000000402ea0\n.text:0000000000402ea5\n.text:0000000000402eaa\n.text:0000000000402ead\n.text:0000000000402eb2\n.text:0000000000402eb7\n.text:0000000000402eba\n.text:0000000000402ebf\n.text:0000000000402ec4\n.text:0000000000402ec7\n.text:0000000000402ecc\n.text:0000000000402ed1\n.text:0000000000402ed4\n.text:0000000000402ed9\n.text:0000000000402ede\n.text:0000000000402ee1\n.text:0000000000402ee6\n.text:0000000000402eeb\n.text:0000000000402eee\n.text:0000000000402ef3\n.text:0000000000402ef8\n.text:0000000000402efb\n.text:0000000000402eff\n.text:0000000000402f04\n.text:0000000000402f09\n.text:0000000000402f0e\n.text:0000000000402f11\n.text:0000000000402f19\n.text:0000000000402f1c\n.text:0000000000402f1e\n.text:0000000000402f21\n.text:0000000000402f26\n.text:0000000000402f2d\n.text:0000000000402f34\n.text:0000000000402f37\n.text:0000000000402f3c\n.text:0000000000402f3e\n.text:0000000000402f40\n.text:0000000000402f44\n.text:0000000000402f46\n.text:0000000000402f48\n.text:0000000000402f4f\n.text:0000000000402f54\n.text:0000000000402f58\n.text:0000000000402f5b\n.text:0000000000402f63\n.text:0000000000402f65\n.text:0000000000402f6c\n.text:0000000000402f71\n.text:0000000000402f74\n.text:0000000000402f7b\n.text:0000000000402f82\n.text:0000000000402f87\n.text:0000000000402f8c\n.text:0000000000402f91\n.text:0000000000402f96\n.text:0000000000402f99\n.text:0000000000402f9c\n.text:0000000000402f9f\n.text:0000000000402fa5\n.text:0000000000402fa8\n.text:0000000000402fac\n.text:0000000000402faf\n.text:0000000000402fb4\n.text:0000000000402fb9\n.text:0000000000402fbe\n.text:0000000000402fc5\n.text:0000000000402fca\n.text:0000000000402fcf\n.text:0000000000402fd4\n.text:0000000000402fd9\n.text:0000000000402fdc\n.text:0000000000402fe0\n.text:0000000000402fe3\n.text:0000000000402fe9\n.text:0000000000402fed\n.text:0000000000402ff2\n.text:0000000000402ff7\n.text:0000000000402ffc\n.text:0000000000402fff\n.text:0000000000403003\n.text:0000000000403006\n.text:000000000040300b\n.text:0000000000403010\n.text:0000000000403015\n.text:000000000040301c\n.text:000000000040301e\n.text:0000000000403023\n.text:0000000000403028\n.text:000000000040302d\n.text:0000000000403030\n.text:0000000000403034\n.text:0000000000403037\n.text:000000000040303d\n.text:0000000000403041\n.text:0000000000403046\n.text:000000000040304b\n.text:0000000000403050\n.text:0000000000403053\n.text:0000000000403057\n.text:000000000040305a\n.text:000000000040305f\n.text:0000000000403064\n.text:0000000000403069\n.text:0000000000403070\n.text:0000000000403077\n.text:000000000040307a\n.text:0000000000403081\n.text:0000000000403089\n.text:000000000040308e\n.text:0000000000403099\n.text:000000000040309e\n.text:00000000004030a2\n.text:00000000004030a5\n.text:00000000004030ab\n.text:00000000004030ad\n.text:00000000004030b2\n.text:00000000004030b7\n.text:00000000004030bc\n.text:00000000004030c1\n.text:00000000004030c5\n.text:00000000004030c8\n.text:00000000004030ca\n.text:00000000004030cd\n.text:00000000004030d2\n.text:00000000004030d7\n.text:00000000004030dc\n.text:00000000004030e1\n.text:00000000004030e3\n.text:00000000004030e7\n.text:00000000004030ea\n.text:00000000004030f0\n.text:00000000004030f2\n.text:00000000004030f7\n.text:00000000004030fc\n.text:0000000000403101\n.text:0000000000403106\n.text:000000000040310a\n.text:000000000040310d\n.text:000000000040310f\n.text:0000000000403112\n.text:0000000000403117\n.text:000000000040311c\n.text:0000000000403121\n.text:0000000000403126\n.text:0000000000403128\n.text:000000000040312d\n.text:000000000040312f\n.text:0000000000403134\n.text:000000000040313c\n.text:0000000000403141\n.text:000000000040314c\n.text:0000000000403151\n.text:0000000000403156\n.text:0000000000403158\n.text:000000000040315d\n.text:0000000000403165\n.text:000000000040316a\n.text:0000000000403175\n.text:000000000040317a\n.text:000000000040317f\n.text:0000000000403184\n.text:0000000000403189\n.text:000000000040318e\n.text:0000000000403192\n.text:0000000000403195\n.text:000000000040319b\n.text:00000000004031a0\n.text:00000000004031a3\n.text:00000000004031a5\n.text:00000000004031aa\n.text:00000000004031b1\n.text:00000000004031b4\n.text:00000000004031b9\n.text:00000000004031bd\n.text:00000000004031c4\n.text:00000000004031c9\n.text:00000000004031ce\n.text:00000000004031d3\n.text:00000000004031d6\n.text:00000000004031db\n.text:00000000004031dd\n.text:00000000004031df\n.text:00000000004031e4\n.text:00000000004031e8\n.text:00000000004031ec\n.text:00000000004031f0\n.text:00000000004031f4\n.text:00000000004031f8\n.text:00000000004031fc\n.text:0000000000403201\n.text:0000000000403206\n.text:0000000000403209\n.text:000000000040320b\n.text:000000000040320d\n.text:0000000000403212\n.text:0000000000403216\n.text:0000000000403219\n.text:000000000040321f\n.text:0000000000403222\n.text:0000000000403227\n.text:000000000040322c\n.text:000000000040322f\n.text:0000000000403234\n.text:0000000000403236\n.text:000000000040323c\n.text:0000000000403241\n.text:0000000000403243\n.text:0000000000403246\n.text:000000000040324b\n.text:0000000000403250\n.text:0000000000403253\n.text:0000000000403255\n.text:000000000040325a\n.text:000000000040325e\n.text:0000000000403262\n.text:0000000000403266\n.text:000000000040326a\n.text:000000000040326f\n.text:0000000000403273\n.text:0000000000403278\n.text:000000000040327a\n.text:000000000040327d\n.text:0000000000403282\n.text:0000000000403286\n.text:0000000000403289\n.text:000000000040328d\n.text:0000000000403291\n.text:0000000000403294\n.text:0000000000403299\n.text:000000000040329c\n.text:00000000004032a1\n.text:00000000004032a5\n.text:00000000004032a9\n.text:00000000004032ad\n.text:00000000004032b2\n.text:00000000004032b7\n.text:00000000004032b9\n.text:00000000004032be\n.text:00000000004032c0\n.text:00000000004032c5\n.text:00000000004032ca\n.text:00000000004032cd\n.text:00000000004032d0\n.text:00000000004032d2\n.text:00000000004032d7\n.text:00000000004032da\n.text:00000000004032dd\n.text:00000000004032e0\n.text:00000000004032e2\n.text:00000000004032e7\n.text:00000000004032ea\n.text:00000000004032f2\n.text:0000000000403300\n.text:0000000000403305\n.text:0000000000403308\n.text:000000000040330d\n.text:0000000000403312\n.text:0000000000403315\n.text:000000000040331a\n.text:000000000040331c\n.text:0000000000403322\n.text:0000000000403327\n.text:000000000040332a\n.text:000000000040332f\n.text:0000000000403331\n.text:0000000000403337\n.text:000000000040333a\n.text:000000000040333c\n.text:0000000000403340\n.text:0000000000403342\n.text:0000000000403346\n.text:000000000040334c\n.text:0000000000403350\n.text:0000000000403355\n.text:000000000040335a\n.text:000000000040335d\n.text:0000000000403362\n.text:0000000000403364\n.text:000000000040336a\n.text:000000000040336f\n.text:0000000000403372\n.text:0000000000403377\n.text:0000000000403379\n.text:000000000040337f\n.text:0000000000403384\n.text:0000000000403387\n.text:000000000040338c\n.text:000000000040338e\n.text:0000000000403394\n.text:0000000000403399\n.text:000000000040339c\n.text:00000000004033a1\n.text:00000000004033a3\n.text:00000000004033a9\n.text:00000000004033ae\n.text:00000000004033b1\n.text:00000000004033b6\n.text:00000000004033b8\n.text:00000000004033be\n.text:00000000004033c3\n.text:00000000004033c6\n.text:00000000004033cb\n.text:00000000004033cd\n.text:00000000004033d3\n.text:00000000004033d6\n.text:00000000004033d8\n.text:00000000004033dc\n.text:00000000004033de\n.text:00000000004033e2\n.text:00000000004033e8\n.text:00000000004033ed\n.text:00000000004033f2\n.text:00000000004033f5\n.text:00000000004033fa\n.text:00000000004033fc\n.text:0000000000403402\n.text:0000000000403405\n.text:0000000000403407\n.text:000000000040340b\n.text:000000000040340d\n.text:0000000000403411\n.text:0000000000403417\n.text:000000000040341c\n.text:0000000000403421\n.text:0000000000403424\n.text:0000000000403429\n.text:000000000040342b\n.text:0000000000403431\n.text:0000000000403436\n.text:0000000000403439\n.text:000000000040343e\n.text:0000000000403440\n.text:0000000000403446\n.text:0000000000403449\n.text:000000000040344b\n.text:000000000040344f\n.text:0000000000403451\n.text:0000000000403455\n.text:000000000040345b\n.text:0000000000403460\n.text:0000000000403465\n.text:0000000000403468\n.text:000000000040346d\n.text:000000000040346f\n.text:0000000000403475\n.text:0000000000403478\n.text:000000000040347d\n.text:000000000040347f\n.text:0000000000403483\n.text:0000000000403485\n.text:0000000000403489\n.text:000000000040348f\n.text:0000000000403494\n.text:0000000000403497\n.text:0000000000403499\n.text:000000000040349d\n.text:000000000040349f\n.text:00000000004034a3\n.text:00000000004034a9\n.text:00000000004034ae\n.text:00000000004034b3\n.text:00000000004034b6\n.text:00000000004034bb\n.text:00000000004034bd\n.text:00000000004034c3\n.text:00000000004034c6\n.text:00000000004034c8\n.text:00000000004034cc\n.text:00000000004034ce\n.text:00000000004034d2\n.text:00000000004034d8\n.text:00000000004034dd\n.text:00000000004034e2\n.text:00000000004034e5\n.text:00000000004034ea\n.text:00000000004034ec\n.text:00000000004034f2\n.text:00000000004034f5\n.text:00000000004034f7\n.text:00000000004034fb\n.text:00000000004034fd\n.text:0000000000403501\n.text:0000000000403507\n.text:000000000040350c\n.text:0000000000403511\n.text:0000000000403514\n.text:0000000000403519\n.text:000000000040351b\n.text:0000000000403521\n.text:0000000000403526\n.text:0000000000403529\n.text:000000000040352e\n.text:0000000000403530\n.text:0000000000403536\n.text:000000000040353b\n.text:000000000040353e\n.text:0000000000403543\n.text:0000000000403545\n.text:000000000040354b\n.text:0000000000403550\n.text:0000000000403553\n.text:0000000000403558\n.text:000000000040355a\n.text:0000000000403560\n.text:0000000000403565\n.text:0000000000403568\n.text:000000000040356d\n.text:000000000040356f\n.text:0000000000403575\n.text:000000000040357a\n.text:000000000040357d\n.text:0000000000403582\n.text:0000000000403584\n.text:000000000040358a\n.text:000000000040358f\n.text:0000000000403592\n.text:0000000000403597\n.text:0000000000403599\n.text:000000000040359f\n.text:00000000004035a4\n.text:00000000004035a7\n.text:00000000004035ac\n.text:00000000004035ae\n.text:00000000004035b1\n.text:00000000004035b6\n.text:00000000004035bc\n.text:00000000004035c1\n.text:00000000004035c6\n.text:00000000004035c9\n.text:00000000004035ce\n.text:00000000004035d0\n.text:00000000004035d6\n.text:00000000004035db\n.text:00000000004035e0\n.text:00000000004035e5\n.text:00000000004035e7\n.text:00000000004035ed\n.text:00000000004035f2\n.text:00000000004035f7\n.text:00000000004035fc\n.text:00000000004035fe\n.text:0000000000403604\n.text:0000000000403609\n.text:000000000040360e\n.text:0000000000403613\n.text:0000000000403615\n.text:000000000040361b\n.text:0000000000403620\n.text:0000000000403625\n.text:000000000040362a\n.text:000000000040362f\n.text:0000000000403631\n.text:0000000000403637\n.text:000000000040363c\n.text:0000000000403641\n.text:0000000000403646\n.text:0000000000403648\n.text:000000000040364e\n.text:0000000000403653\n.text:0000000000403658\n.text:000000000040365b\n.text:0000000000403660\n.text:0000000000403662\n.text:0000000000403668\n.text:000000000040366d\n.text:0000000000403670\n.text:0000000000403675\n.text:0000000000403677\n.text:000000000040367d\n.text:0000000000403682\n.text:0000000000403685\n.text:000000000040368a\n.text:000000000040368c\n.text:0000000000403692\n.text:0000000000403697\n.text:000000000040369a\n.text:000000000040369f\n.text:00000000004036a1\n.text:00000000004036a7\n.text:00000000004036ac\n.text:00000000004036af\n.text:00000000004036b4\n.text:00000000004036b6\n.text:00000000004036bc\n.text:00000000004036c1\n.text:00000000004036c4\n.text:00000000004036c9\n.text:00000000004036cb\n.text:00000000004036d1\n.text:00000000004036d6\n.text:00000000004036d9\n.text:00000000004036de\n.text:00000000004036e0\n.text:00000000004036e6\n.text:00000000004036eb\n.text:00000000004036ee\n.text:00000000004036f3\n.text:00000000004036f5\n.text:00000000004036fb\n.text:0000000000403700\n.text:0000000000403703\n.text:0000000000403708\n.text:000000000040370a\n.text:0000000000403710\n.text:0000000000403715\n.text:0000000000403718\n.text:000000000040371d\n.text:000000000040371f\n.text:0000000000403725\n.text:000000000040372a\n.text:000000000040372d\n.text:0000000000403732\n.text:0000000000403734\n.text:000000000040373a\n.text:000000000040373f\n.text:0000000000403742\n.text:0000000000403747\n.text:0000000000403749\n.text:000000000040374f\n.text:0000000000403754\n.text:0000000000403757\n.text:000000000040375c\n.text:000000000040375e\n.text:0000000000403764\n.text:0000000000403769\n.text:000000000040376c\n.text:0000000000403771\n.text:0000000000403773\n.text:0000000000403779\n.text:000000000040377e\n.text:0000000000403781\n.text:0000000000403786\n.text:0000000000403788\n.text:000000000040378e\n.text:0000000000403793\n.text:0000000000403796\n.text:000000000040379b\n.text:000000000040379d\n.text:00000000004037a3\n.text:00000000004037a8\n.text:00000000004037ab\n.text:00000000004037b0\n.text:00000000004037b2\n.text:00000000004037b8\n.text:00000000004037bd\n.text:00000000004037c0\n.text:00000000004037c5\n.text:00000000004037c7\n.text:00000000004037cd\n.text:00000000004037d2\n.text:00000000004037d5\n.text:00000000004037da\n.text:00000000004037dc\n.text:00000000004037e2\n.text:00000000004037e7\n.text:00000000004037ea\n.text:00000000004037ef\n.text:00000000004037f1\n.text:00000000004037f7\n.text:00000000004037fc\n.text:00000000004037ff\n.text:0000000000403804\n.text:0000000000403806\n.text:000000000040380c\n.text:0000000000403811\n.text:0000000000403814\n.text:0000000000403819\n.text:000000000040381b\n.text:0000000000403821\n.text:0000000000403826\n.text:0000000000403829\n.text:000000000040382e\n.text:0000000000403830\n.text:0000000000403836\n.text:000000000040383b\n.text:000000000040383e\n.text:0000000000403843\n.text:0000000000403845\n.text:000000000040384b\n.text:0000000000403850\n.text:0000000000403853\n.text:0000000000403858\n.text:000000000040385a\n.text:0000000000403860\n.text:0000000000403865\n.text:0000000000403868\n.text:000000000040386d\n.text:000000000040386f\n.text:0000000000403875\n.text:000000000040387a\n.text:000000000040387d\n.text:0000000000403882\n.text:0000000000403884\n.text:000000000040388a\n.text:000000000040388f\n.text:0000000000403892\n.text:0000000000403897\n.text:0000000000403899\n.text:000000000040389f\n.text:00000000004038a4\n.text:00000000004038a7\n.text:00000000004038ac\n.text:00000000004038ae\n.text:00000000004038b4\n.text:00000000004038b9\n.text:00000000004038bc\n.text:00000000004038c1\n.text:00000000004038c3\n.text:00000000004038c9\n.text:00000000004038ce\n.text:00000000004038d1\n.text:00000000004038d6\n.text:00000000004038d8\n.text:00000000004038de\n.text:00000000004038e3\n.text:00000000004038e6\n.text:00000000004038eb\n.text:00000000004038ed\n.text:00000000004038f3\n.text:00000000004038f8\n.text:00000000004038fd\n.text:0000000000403902\n.text:0000000000403905\n.text:0000000000403908\n.text:000000000040390e\n.text:0000000000403911\n.text:0000000000403916\n.text:000000000040391a\n.text:000000000040391f\n.text:0000000000403922\n.text:0000000000403925\n.text:0000000000403928\n.text:000000000040392a\n.text:000000000040392d\n.text:0000000000403940\n.text:0000000000403943\n.text:0000000000403946\n.text:000000000040394c\n.text:000000000040394f\n.text:0000000000403954\n.text:0000000000403959\n.text:000000000040395e\n.text:0000000000403961\n.text:0000000000403964\n.text:000000000040396a\n.text:000000000040396f\n.text:0000000000403977\n.text:000000000040397d\n.text:000000000040397f\n.text:0000000000403987\n.text:0000000000403992\n.text:000000000040399a\n.text:00000000004039a5\n.text:00000000004039b0\n.text:00000000004039b8\n.text:00000000004039c0\n.text:00000000004039c8\n.text:00000000004039d3\n.text:00000000004039db\n.text:00000000004039e3\n.text:00000000004039eb\n.text:00000000004039f3\n.text:00000000004039fb\n.text:0000000000403a06\n.text:0000000000403a0e\n.text:0000000000403a16\n.text:0000000000403a18\n.text:0000000000403a1d\n.text:0000000000403a25\n.text:0000000000403a2d\n.text:0000000000403a32\n.text:0000000000403a3a\n.text:0000000000403a3f\n.text:0000000000403a44\n.text:0000000000403a4a\n.text:0000000000403a4e\n.text:0000000000403a52\n.text:0000000000403a59\n.text:0000000000403a5b\n.text:0000000000403a60\n.text:0000000000403a65\n.text:0000000000403a69\n.text:0000000000403a6c\n.text:0000000000403a71\n.text:0000000000403a74\n.text:0000000000403a77\n.text:0000000000403a7b\n.text:0000000000403a7d\n.text:0000000000403a80\n.text:0000000000403a85\n.text:0000000000403a8a\n.text:0000000000403a8f\n.text:0000000000403a94\n.text:0000000000403a96\n.text:0000000000403a9b\n.text:0000000000403aa0\n.text:0000000000403aa3\n.text:0000000000403aa8\n.text:0000000000403aaf\n.text:0000000000403ab2\n.text:0000000000403ab8\n.text:0000000000403abf\n.text:0000000000403ac1\n.text:0000000000403ac7\n.text:0000000000403acd\n.text:0000000000403ad4\n.text:0000000000403adb\n.text:0000000000403ae1\n.text:0000000000403ae3\n.text:0000000000403ae9\n.text:0000000000403af0\n.text:0000000000403af4\n.text:0000000000403af9\n.text:0000000000403b00\n.text:0000000000403b08\n.text:0000000000403b10\n.text:0000000000403b15\n.text:0000000000403b17\n.text:0000000000403b1d\n.text:0000000000403b24\n.text:0000000000403b2c\n.text:0000000000403b31\n.text:0000000000403b36\n.text:0000000000403b38\n.text:0000000000403b3e\n.text:0000000000403b45\n.text:0000000000403b48\n.text:0000000000403b4a\n.text:0000000000403b51\n.text:0000000000403b53\n.text:0000000000403b56\n.text:0000000000403b58\n.text:0000000000403b5d\n.text:0000000000403b5f\n.text:0000000000403b66\n.text:0000000000403b69\n.text:0000000000403b6b\n.text:0000000000403b70\n.text:0000000000403b72\n.text:0000000000403b79\n.text:0000000000403b80\n.text:0000000000403b83\n.text:0000000000403b85\n.text:0000000000403b8c\n.text:0000000000403b8e\n.text:0000000000403b91\n.text:0000000000403b93\n.text:0000000000403b98\n.text:0000000000403b9a\n.text:0000000000403ba1\n.text:0000000000403ba4\n.text:0000000000403ba6\n.text:0000000000403bab\n.text:0000000000403bad\n.text:0000000000403bb4\n.text:0000000000403bb9\n.text:0000000000403bbf\n.text:0000000000403bc6\n.text:0000000000403bcc\n.text:0000000000403bd1\n.text:0000000000403bd6\n.text:0000000000403bdb\n.text:0000000000403be0\n.text:0000000000403be7\n.text:0000000000403bea\n.text:0000000000403bf0\n.text:0000000000403bf3\n.text:0000000000403bf7\n.text:0000000000403bfd\n.text:0000000000403c04\n.text:0000000000403c0b\n.text:0000000000403c12\n.text:0000000000403c16\n.text:0000000000403c1b\n.text:0000000000403c1f\n.text:0000000000403c22\n.text:0000000000403c24\n.text:0000000000403c30\n.text:0000000000403c34\n.text:0000000000403c39\n.text:0000000000403c3c\n.text:0000000000403c3f\n.text:0000000000403c45\n.text:0000000000403c48\n.text:0000000000403c4c\n.text:0000000000403c51\n.text:0000000000403c54\n.text:0000000000403c5a\n.text:0000000000403c61\n.text:0000000000403c65\n.text:0000000000403c68\n.text:0000000000403c6d\n.text:0000000000403c71\n.text:0000000000403c74\n.text:0000000000403c7a\n.text:0000000000403c80\n.text:0000000000403c84\n.text:0000000000403c89\n.text:0000000000403c8c\n.text:0000000000403c8f\n.text:0000000000403c95\n.text:0000000000403c98\n.text:0000000000403c9c\n.text:0000000000403ca1\n.text:0000000000403ca4\n.text:0000000000403caa\n.text:0000000000403cb1\n.text:0000000000403cb5\n.text:0000000000403cb8\n.text:0000000000403cbd\n.text:0000000000403cc1\n.text:0000000000403cc4\n.text:0000000000403cca\n.text:0000000000403ccc\n.text:0000000000403ccf\n.text:0000000000403cd3\n.text:0000000000403cd8\n.text:0000000000403cdb\n.text:0000000000403ce1\n.text:0000000000403ce8\n.text:0000000000403ceb\n.text:0000000000403cf0\n.text:0000000000403cf4\n.text:0000000000403cf7\n.text:0000000000403cfd\n.text:0000000000403d00\n.text:0000000000403d04\n.text:0000000000403d07\n.text:0000000000403d0d\n.text:0000000000403d10\n.text:0000000000403d16\n.text:0000000000403d1d\n.text:0000000000403d23\n.text:0000000000403d28\n.text:0000000000403d2d\n.text:0000000000403d32\n.text:0000000000403d37\n.text:0000000000403d3c\n.text:0000000000403d41\n.text:0000000000403d48\n.text:0000000000403d4b\n.text:0000000000403d51\n.text:0000000000403d60\n.text:0000000000403d64\n.text:0000000000403d67\n.text:0000000000403d6d\n.text:0000000000403d72\n.text:0000000000403d80\n.text:0000000000403d84\n.text:0000000000403d8a\n.text:0000000000403d8e\n.text:0000000000403d94\n.text:0000000000403d97\n.text:0000000000403d9d\n.text:0000000000403da1\n.text:0000000000403da6\n.text:0000000000403da8\n.text:0000000000403db0\n.text:0000000000403db5\n.text:0000000000403db8\n.text:0000000000403dba\n.text:0000000000403dbe\n.text:0000000000403dc3\n.text:0000000000403dc5\n.text:0000000000403dcd\n.text:0000000000403dd2\n.text:0000000000403dd5\n.text:0000000000403dd7\n.text:0000000000403dda\n.text:0000000000403de2\n.text:0000000000403dea\n.text:0000000000403df2\n.text:0000000000403df8\n.text:0000000000403dfd\n.text:0000000000403e05\n.text:0000000000403e0a\n.text:0000000000403e0d\n.text:0000000000403e11\n.text:0000000000403e14\n.text:0000000000403e19\n.text:0000000000403e1d\n.text:0000000000403e23\n.text:0000000000403e28\n.text:0000000000403e2d\n.text:0000000000403e30\n.text:0000000000403e37\n.text:0000000000403e3b\n.text:0000000000403e3d\n.text:0000000000403e42\n.text:0000000000403e4a\n.text:0000000000403e52\n.text:0000000000403e57\n.text:0000000000403e5f\n.text:0000000000403e70\n.text:0000000000403e77\n.text:0000000000403e7b\n.text:0000000000403e7e\n.text:0000000000403e80\n.text:0000000000403e85\n.text:0000000000403e88\n.text:0000000000403e8f\n.text:0000000000403e93\n.text:0000000000403e97\n.text:0000000000403e9c\n.text:0000000000403ea2\n.text:0000000000403ea8\n.text:0000000000403eab\n.text:0000000000403eb0\n.text:0000000000403eb1\n.text:0000000000403eb9\n.text:0000000000403eba\n.text:0000000000403ec2\n.text:0000000000403ec3\n.text:0000000000403ecb\n.text:0000000000403ecc\n.text:0000000000403ed1\n.text:0000000000403ed2\n.text:0000000000403ed4\n.text:0000000000403ed6\n.text:0000000000403edb\n.text:0000000000403edf\n.text:0000000000403ee1\n.text:0000000000403ee7\n.text:0000000000403ee9\n.text:0000000000403ef0\n.text:0000000000403ef4\n.text:0000000000403ef7\n.text:0000000000403efc\n.text:0000000000403eff\n.text:0000000000403f01\n.text:0000000000403f06\n.text:0000000000403f0e\n.text:0000000000403f10\n.text:0000000000403f13\n.text:0000000000403f16\n.text:0000000000403f20\n.text:0000000000403f24\n.text:0000000000403f2b\n.text:0000000000403f2e\n.text:0000000000403f33\n.text:0000000000403f38\n.text:0000000000403f3b\n.text:0000000000403f3e\n.text:0000000000403f44\n.text:0000000000403f47\n.text:0000000000403f4c\n.text:0000000000403f54\n.text:0000000000403f57\n.text:0000000000403f5e\n.text:0000000000403f63\n.text:0000000000403f67\n.text:0000000000403f6b\n.text:0000000000403f71\n.text:0000000000403f74\n.text:0000000000403f77\n.text:0000000000403f78\n.text:0000000000403f79\n.text:0000000000403f7c\n.text:0000000000403f81\n.text:0000000000403f85\n.text:0000000000403f88\n.text:0000000000403f8d\n.text:0000000000403f91\n.text:0000000000403f94\n.text:0000000000403f9a\n.text:0000000000403f9d\n.text:0000000000403fa0\n.text:0000000000403fa6\n.text:0000000000403fab\n.text:0000000000403fae\n.text:0000000000403fb3\n.text:0000000000403fb8\n.text:0000000000403fbe\n.text:0000000000403fc3\n.text:0000000000403fc5\n.text:0000000000403fcb\n.text:0000000000403fcd\n.text:0000000000403fd3\n.text:0000000000403fd8\n.text:0000000000403fdd\n.text:0000000000403fe2\n.text:0000000000403fe7\n.text:0000000000403fec\n.text:0000000000403fef\n.text:0000000000403ff4\n.text:0000000000403ff9\n.text:0000000000404000\n.text:0000000000404004\n.text:0000000000404007\n.text:0000000000404009\n.text:000000000040400d\n.text:000000000040400f\n.text:0000000000404011\n.text:0000000000404016\n.text:000000000040401b\n.text:000000000040401d\n.text:0000000000404023\n.text:0000000000404025\n.text:000000000040402b\n.text:0000000000404030\n.text:0000000000404035\n.text:000000000040403a\n.text:000000000040403f\n.text:0000000000404044\n.text:0000000000404047\n.text:000000000040404c\n.text:0000000000404051\n.text:0000000000404058\n.text:000000000040405c\n.text:000000000040405f\n.text:0000000000404061\n.text:0000000000404065\n.text:0000000000404067\n.text:0000000000404069\n.text:000000000040406e\n.text:0000000000404071\n.text:0000000000404077\n.text:000000000040407c\n.text:0000000000404081\n.text:0000000000404086\n.text:000000000040408b\n.text:0000000000404090\n.text:0000000000404095\n.text:000000000040409a\n.text:000000000040409f\n.text:00000000004040a4\n.text:00000000004040ab\n.text:00000000004040ae\n.text:00000000004040b4\n.text:00000000004040b9\n.text:00000000004040bc\n.text:00000000004040c2\n.text:00000000004040c6\n.text:00000000004040c9\n.text:00000000004040cf\n.text:00000000004040d6\n.text:00000000004040d9\n.text:00000000004040df\n.text:00000000004040e3\n.text:00000000004040e6\n.text:00000000004040ec\n.text:00000000004040f2\n.text:00000000004040f5\n.text:00000000004040f8\n.text:00000000004040fe\n.text:0000000000404104\n.text:000000000040410a\n.text:000000000040410d\n.text:0000000000404113\n.text:0000000000404119\n.text:0000000000404120\n.text:0000000000404126\n.text:000000000040412b\n.text:0000000000404130\n.text:0000000000404136\n.text:000000000040413b\n.text:000000000040413d\n.text:0000000000404140\n.text:0000000000404143\n.text:0000000000404148\n.text:000000000040414e\n.text:0000000000404154\n.text:0000000000404157\n.text:0000000000404159\n.text:000000000040415b\n.text:0000000000404161\n.text:0000000000404165\n.text:000000000040416a\n.text:000000000040416f\n.text:0000000000404174\n.text:000000000040417b\n.text:0000000000404181\n.text:0000000000404187\n.text:000000000040418e\n.text:0000000000404195\n.text:0000000000404198\n.text:000000000040419c\n.text:00000000004041a1\n.text:00000000004041a6\n.text:00000000004041ac\n.text:00000000004041b2\n.text:00000000004041b7\n.text:00000000004041bc\n.text:00000000004041bd\n.text:00000000004041be\n.text:00000000004041c3\n.text:00000000004041c7\n.text:00000000004041ce\n.text:00000000004041d1\n.text:00000000004041d7\n.text:00000000004041e0\n.text:00000000004041e4\n.text:00000000004041e9\n.text:00000000004041ed\n.text:00000000004041f0\n.text:00000000004041f2\n.text:00000000004041f6\n.text:0000000000404200\n.text:0000000000404202\n.text:0000000000404207\n.text:000000000040420e\n.text:0000000000404211\n.text:0000000000404216\n.text:0000000000404219\n.text:000000000040421d\n.text:0000000000404222\n.text:000000000040422a\n.text:000000000040422f\n.text:0000000000404231\n.text:0000000000404236\n.text:000000000040423d\n.text:000000000040423f\n.text:0000000000404244\n.text:0000000000404246\n.text:000000000040424b\n.text:000000000040424e\n.text:0000000000404254\n.text:0000000000404257\n.text:0000000000404259\n.text:000000000040425c\n.text:000000000040425f\n.text:0000000000404262\n.text:0000000000404266\n.text:0000000000404270\n.text:0000000000404274\n.text:0000000000404278\n.text:000000000040427d\n.text:0000000000404283\n.text:000000000040428a\n.text:000000000040428f\n.text:0000000000404291\n.text:0000000000404296\n.text:000000000040429d\n.text:000000000040429f\n.text:00000000004042a3\n.text:00000000004042a8\n.text:00000000004042aa\n.text:00000000004042af\n.text:00000000004042b4\n.text:00000000004042bb\n.text:00000000004042be\n.text:00000000004042c0\n.text:00000000004042c7\n.text:00000000004042c9\n.text:00000000004042cc\n.text:00000000004042d1\n.text:00000000004042d4\n.text:00000000004042d9\n.text:00000000004042db\n.text:00000000004042de\n.text:00000000004042e3\n.text:00000000004042e8\n.text:00000000004042ef\n.text:00000000004042f1\n.text:00000000004042f3\n.text:00000000004042f6\n.text:00000000004042fb\n.text:00000000004042fe\n.text:0000000000404303\n.text:0000000000404305\n.text:0000000000404308\n.text:000000000040430d\n.text:0000000000404310\n.text:0000000000404314\n.text:0000000000404318\n.text:000000000040431a\n.text:0000000000404321\n.text:0000000000404327\n.text:000000000040432c\n.text:000000000040432e\n.text:0000000000404333\n.text:0000000000404338\n.text:000000000040433a\n.text:0000000000404340\n.text:0000000000404344\n.text:0000000000404346\n.text:0000000000404348\n.text:000000000040434a\n.text:000000000040434f\n.text:0000000000404354\n.text:000000000040435c\n.text:000000000040435e\n.text:0000000000404363\n.text:0000000000404365\n.text:000000000040436a\n.text:000000000040436d\n.text:0000000000404371\n.text:0000000000404373\n.text:0000000000404377\n.text:0000000000404379\n.text:000000000040437b\n.text:000000000040437d\n.text:0000000000404382\n.text:0000000000404387\n.text:0000000000404389\n.text:000000000040438e\n.text:0000000000404390\n.text:0000000000404395\n.text:0000000000404399\n.text:000000000040439b\n.text:000000000040439d\n.text:000000000040439f\n.text:00000000004043a4\n.text:00000000004043a9\n.text:00000000004043ae\n.text:00000000004043b0\n.text:00000000004043b5\n.text:00000000004043ba\n.text:00000000004043bf\n.text:00000000004043c2\n.text:00000000004043c4\n.text:00000000004043c8\n.text:00000000004043cc\n.text:00000000004043d1\n.text:00000000004043d3\n.text:00000000004043d8\n.text:00000000004043db\n.text:00000000004043e1\n.text:00000000004043e5\n.text:00000000004043e8\n.text:00000000004043ee\n.text:00000000004043f1\n.text:00000000004043f3\n.text:00000000004043f9\n.text:00000000004043fc\n.text:00000000004043ff\n.text:0000000000404403\n.text:0000000000404408\n.text:000000000040440a\n.text:000000000040440f\n.text:0000000000404412\n.text:0000000000404414\n.text:0000000000404416\n.text:0000000000404419\n.text:000000000040441c\n.text:000000000040441e\n.text:0000000000404421\n.text:0000000000404423\n.text:0000000000404427\n.text:0000000000404429\n.text:000000000040442d\n.text:000000000040442f\n.text:0000000000404432\n.text:0000000000404434\n.text:0000000000404436\n.text:0000000000404439\n.text:000000000040443c\n.text:000000000040443e\n.text:0000000000404441\n.text:0000000000404443\n.text:0000000000404447\n.text:0000000000404449\n.text:000000000040444d\n.text:000000000040444f\n.text:0000000000404450\n.text:0000000000404453\n.text:0000000000404456\n.text:0000000000404459\n.text:000000000040445d\n.text:0000000000404461\n.text:0000000000404465\n.text:0000000000404468\n.text:000000000040446b\n.text:000000000040446f\n.text:0000000000404474\n.text:0000000000404479\n.text:000000000040447a\n.text:000000000040447b\n.text:000000000040447d\n.text:0000000000404482\n.text:0000000000404486\n.text:000000000040448b\n.text:0000000000404490\n.text:0000000000404497\n.text:000000000040449d\n.text:00000000004044a2\n.text:00000000004044a6\n.text:00000000004044ab\n.text:00000000004044ad\n.text:00000000004044b2\n.text:00000000004044b5\n.text:00000000004044ba\n.text:00000000004044bc\n.text:00000000004044c1\n.text:00000000004044c6\n.text:00000000004044ce\n.text:00000000004044d3\n.text:00000000004044d5\n.text:00000000004044da\n.text:00000000004044e3\n.text:00000000004044e6\n.text:00000000004044e9\n.text:00000000004044eb\n.text:00000000004044ed\n.text:00000000004044f6\n.text:00000000004044f9\n.text:00000000004044fb\n.text:00000000004044fd\n.text:0000000000404506\n.text:0000000000404509\n.text:000000000040450b\n.text:000000000040450d\n.text:0000000000404511\n.text:0000000000404515\n.text:0000000000404519\n.text:000000000040451e\n.text:0000000000404520\n.text:0000000000404525\n.text:000000000040452e\n.text:0000000000404532\n.text:0000000000404537\n.text:0000000000404539\n.text:000000000040453e\n.text:0000000000404543\n.text:0000000000404545\n.text:000000000040454a\n.text:000000000040454f\n.text:0000000000404551\n.text:0000000000404553\n.text:0000000000404560\n.text:0000000000404564\n.text:0000000000404568\n.text:000000000040456d\n.text:0000000000404570\n.text:0000000000404572\n.text:0000000000404576\n.text:000000000040457b\n.text:000000000040457d\n.text:0000000000404582\n.text:0000000000404585\n.text:0000000000404589\n.text:000000000040458c\n.text:000000000040458e\n.text:0000000000404593\n.text:0000000000404598\n.text:000000000040459c\n.text:000000000040459f\n.text:00000000004045a1\n.text:00000000004045a4\n.text:00000000004045a9\n.text:00000000004045ab\n.text:00000000004045b0\n.text:00000000004045b5\n.text:00000000004045b7\n.text:00000000004045bc\n.text:00000000004045c1\n.text:00000000004045c3\n.text:00000000004045c5\n.text:00000000004045d0\n.text:00000000004045d4\n.text:00000000004045d8\n.text:00000000004045dd\n.text:00000000004045e0\n.text:00000000004045e2\n.text:00000000004045e5\n.text:00000000004045ea\n.text:00000000004045ec\n.text:00000000004045f1\n.text:00000000004045f4\n.text:00000000004045f8\n.text:00000000004045fb\n.text:00000000004045fd\n.text:0000000000404602\n.text:0000000000404607\n.text:000000000040460b\n.text:000000000040460e\n.text:0000000000404610\n.text:0000000000404614\n.text:0000000000404617\n.text:0000000000404619\n.text:000000000040461c\n.text:000000000040461f\n.text:0000000000404622\n.text:0000000000404626\n.text:000000000040462b\n.text:000000000040462d\n.text:0000000000404632\n.text:0000000000404635\n.text:0000000000404638\n.text:000000000040463b\n.text:000000000040463f\n.text:0000000000404644\n.text:0000000000404646\n.text:000000000040464b\n.text:000000000040464e\n.text:0000000000404651\n.text:0000000000404654\n.text:0000000000404658\n.text:000000000040465d\n.text:000000000040465f\n.text:0000000000404664\n.text:000000000040466b\n.text:0000000000404671\n.text:0000000000404676\n.text:0000000000404678\n.text:000000000040467d\n.text:0000000000404684\n.text:0000000000404687\n.text:0000000000404690\n.text:0000000000404695\n.text:0000000000404698\n.text:00000000004046a0\n.text:00000000004046a3\n.text:00000000004046a6\n.text:00000000004046aa\n.text:00000000004046b2\n.text:00000000004046b7\n.text:00000000004046b9\n.text:00000000004046be\n.text:00000000004046c2\n.text:00000000004046c5\n.text:00000000004046c7\n.text:00000000004046cb\n.text:00000000004046cd\n.text:00000000004046d2\n.text:00000000004046d4\n.text:00000000004046d9\n.text:00000000004046dc\n.text:00000000004046e0\n.text:00000000004046e4\n.text:00000000004046e6\n.text:00000000004046eb\n.text:00000000004046f2\n.text:00000000004046f5\n.text:00000000004046f7\n.text:00000000004046fc\n.text:00000000004046fe\n.text:0000000000404703\n.text:0000000000404708\n.text:000000000040470d\n.text:0000000000404713\n.text:0000000000404715\n.text:0000000000404717\n.text:0000000000404720\n.text:0000000000404722\n.text:0000000000404727\n.text:0000000000404729\n.text:000000000040472b\n.text:0000000000404730\n.text:0000000000404732\n.text:0000000000404734\n.text:0000000000404736\n.text:000000000040473d\n.text:000000000040473f\n.text:0000000000404741\n.text:0000000000404747\n.text:0000000000404750\n.text:0000000000404757\n.text:000000000040475b\n.text:0000000000404760\n.text:0000000000404765\n.text:0000000000404769\n.text:000000000040476e\n.text:0000000000404774\n.text:0000000000404777\n.text:0000000000404780\n.text:0000000000404787\n.text:000000000040478b\n.text:000000000040478f\n.text:0000000000404794\n.text:0000000000404797\n.text:000000000040479e\n.text:00000000004047a2\n.text:00000000004047a6\n.text:00000000004047aa\n.text:00000000004047af\n.text:00000000004047b5\n.text:00000000004047bb\n.text:00000000004047c3\n.text:00000000004047c4\n.text:00000000004047cc\n.text:00000000004047cd\n.text:00000000004047d2\n.text:00000000004047d3\n.text:00000000004047d8\n.text:00000000004047d9\n.text:00000000004047e1\n.text:00000000004047e2\n.text:00000000004047e4\n.text:00000000004047e6\n.text:00000000004047eb\n.text:00000000004047ef\n.text:00000000004047f6\n.text:00000000004047fa\n.text:00000000004047fe\n.text:0000000000404803\n.text:0000000000404806\n.text:000000000040480b\n.text:000000000040480d\n.text:0000000000404810\n.text:0000000000404815\n.text:0000000000404819\n.text:0000000000404821\n.text:0000000000404825\n.text:000000000040482d\n.text:0000000000404830\n.text:0000000000404835\n.text:000000000040483b\n.text:0000000000404841\n.text:0000000000404846\n.text:0000000000404848\n.text:000000000040484e\n.text:0000000000404851\n.text:0000000000404856\n.text:000000000040485b\n.text:000000000040485f\n.text:0000000000404864\n.text:0000000000404866\n.text:000000000040486b\n.text:0000000000404871\n.text:0000000000404877\n.text:000000000040487c\n.text:000000000040487f\n.text:0000000000404880\n.text:0000000000404885\n.text:000000000040488a\n.text:0000000000404892\n.text:0000000000404895\n.text:0000000000404898\n.text:000000000040489c\n.text:00000000004048a1\n.text:00000000004048a6\n.text:00000000004048ab\n.text:00000000004048b0\n.text:00000000004048b2\n.text:00000000004048b7\n.text:00000000004048bf\n.text:00000000004048c2\n.text:00000000004048c6\n.text:00000000004048cb\n.text:00000000004048d0\n.text:00000000004048d5\n.text:00000000004048da\n.text:00000000004048df\n.text:00000000004048e4\n.text:00000000004048e6\n.text:00000000004048e9\n.text:00000000004048eb\n.text:00000000004048ed\n.text:00000000004048ef\n.text:00000000004048f2\n.text:00000000004048f5\n.text:00000000004048f7\n.text:00000000004048fc\n.text:00000000004048fe\n.text:0000000000404903\n.text:0000000000404906\n.text:000000000040490b\n.text:000000000040490d\n.text:0000000000404910\n.text:0000000000404912\n.text:0000000000404914\n.text:0000000000404917\n.text:000000000040491a\n.text:000000000040491d\n.text:0000000000404923\n.text:0000000000404928\n.text:000000000040492d\n.text:0000000000404932\n.text:0000000000404938\n.text:000000000040493a\n.text:0000000000404940\n.text:0000000000404942\n.text:0000000000404947\n.text:0000000000404949\n.text:000000000040494e\n.text:0000000000404954\n.text:0000000000404956\n.text:0000000000404958\n.text:000000000040495a\n.text:0000000000404960\n.text:0000000000404968\n.text:000000000040496d\n.text:0000000000404970\n.text:0000000000404975\n.text:000000000040497a\n.text:000000000040497f\n.text:0000000000404982\n.text:0000000000404985\n.text:0000000000404987\n.text:000000000040498c\n.text:000000000040498e\n.text:0000000000404993\n.text:0000000000404996\n.text:000000000040499b\n.text:000000000040499f\n.text:00000000004049a2\n.text:00000000004049a4\n.text:00000000004049a9\n.text:00000000004049ae\n.text:00000000004049b1\n.text:00000000004049b6\n.text:00000000004049b9\n.text:00000000004049be\n.text:00000000004049c1\n.text:00000000004049c7\n.text:00000000004049cd\n.text:00000000004049cf\n.text:00000000004049d1\n.text:00000000004049d6\n.text:00000000004049dc\n.text:00000000004049e2\n.text:00000000004049e4\n.text:00000000004049f0\n.text:00000000004049f4\n.text:00000000004049f8\n.text:00000000004049fd\n.text:0000000000404a00\n.text:0000000000404a02\n.text:0000000000404a09\n.text:0000000000404a0d\n.text:0000000000404a11\n.text:0000000000404a13\n.text:0000000000404a16\n.text:0000000000404a19\n.text:0000000000404a1c\n.text:0000000000404a21\n.text:0000000000404a25\n.text:0000000000404a28\n.text:0000000000404a2c\n.text:0000000000404a2f\n.text:0000000000404a31\n.text:0000000000404a40\n.text:0000000000404a44\n.text:0000000000404a49\n.text:0000000000404a4e\n.text:0000000000404a51\n.text:0000000000404a54\n.text:0000000000404a5a\n.text:0000000000404a5f\n.text:0000000000404a65\n.text:0000000000404a68\n.text:0000000000404a70\n.text:0000000000404a76\n.text:0000000000404a7c\n.text:0000000000404a80\n.text:0000000000404a84\n.text:0000000000404a89\n.text:0000000000404a8c\n.text:0000000000404a91\n.text:0000000000404a96\n.text:0000000000404a9b\n.text:0000000000404aa0\n.text:0000000000404aa2\n.text:0000000000404aa7\n.text:0000000000404aab\n.text:0000000000404aae\n.text:0000000000404ab4\n.text:0000000000404ab7\n.text:0000000000404ac0\n.text:0000000000404ac6\n.text:0000000000404acc\n.text:0000000000404ad0\n.text:0000000000404ad4\n.text:0000000000404ad9\n.text:0000000000404adc\n.text:0000000000404ae1\n.text:0000000000404ae5\n.text:0000000000404aea\n.text:0000000000404aec\n.text:0000000000404aee\n.text:0000000000404af7\n.text:0000000000404afc\n.text:0000000000404b00\n.text:0000000000404b03\n.text:0000000000404b08\n.text:0000000000404b0d\n.text:0000000000404b0f\n.text:0000000000404b14\n.text:0000000000404b19\n.text:0000000000404b20\n.text:0000000000404b22\n.text:0000000000404b27\n.text:0000000000404b29\n.text:0000000000404b2e\n.text:0000000000404b33\n.text:0000000000404b37\n.text:0000000000404b3a\n.text:0000000000404b3c\n.text:0000000000404b41\n.text:0000000000404b43\n.text:0000000000404b48\n.text:0000000000404b4d\n.text:0000000000404b50\n.text:0000000000404b53\n.text:0000000000404b57\n.text:0000000000404b5a\n.text:0000000000404b60\n.text:0000000000404b65\n.text:0000000000404b6a\n.text:0000000000404b6d\n.text:0000000000404b71\n.text:0000000000404b74\n.text:0000000000404b7a\n.text:0000000000404b7d\n.text:0000000000404b82\n.text:0000000000404b87\n.text:0000000000404b8a\n.text:0000000000404b8d\n.text:0000000000404b93\n.text:0000000000404b9a\n.text:0000000000404b9e\n.text:0000000000404ba0\n.text:0000000000404ba2\n.text:0000000000404ba4\n.text:0000000000404bb0\n.text:0000000000404bb4\n.text:0000000000404bb9\n.text:0000000000404bbb\n.text:0000000000404bbe\n.text:0000000000404bc0\n.text:0000000000404bc2\n.text:0000000000404bc7\n.text:0000000000404bca\n.text:0000000000404bd1\n.text:0000000000404bd5\n.text:0000000000404bd9\n.text:0000000000404bdc\n.text:0000000000404bde\n.text:0000000000404be0\n.text:0000000000404be5\n.text:0000000000404be7\n.text:0000000000404bec\n.text:0000000000404bf4\n.text:0000000000404bf9\n.text:0000000000404c01\n.text:0000000000404c09\n.text:0000000000404c0e\n.text:0000000000404c12\n.text:0000000000404c16\n.text:0000000000404c1e\n.text:0000000000404c25\n.text:0000000000404c27\n.text:0000000000404c2d\n.text:0000000000404c2f\n.text:0000000000404c35\n.text:0000000000404c3b\n.text:0000000000404c42\n.text:0000000000404c49\n.text:0000000000404c50\n.text:0000000000404c54\n.text:0000000000404c58\n.text:0000000000404c5a\n.text:0000000000404c60\n.text:0000000000404c64\n.text:0000000000404c6c\n.text:0000000000404c6e\n.text:0000000000404c72\n.text:0000000000404c76\n.text:0000000000404c78\n.text:0000000000404c7a\n.text:0000000000404c7e\n.text:0000000000404c84\n.text:0000000000404c8b\n.text:0000000000404c92\n.text:0000000000404c96\n.text:0000000000404c98\n.text:0000000000404ca0\n.text:0000000000404ca4\n.text:0000000000404ca8\n.text:0000000000404caa\n.text:0000000000404cad\n.text:0000000000404cb3\n.text:0000000000404cbb\n.text:0000000000404cbe\n.text:0000000000404cc4\n.text:0000000000404cc8\n.text:0000000000404cd0\n.text:0000000000404cd3\n.text:0000000000404cd7\n.text:0000000000404cdf\n.text:0000000000404ce3\n.text:0000000000404ceb\n.text:0000000000404cef\n.text:0000000000404cf3\n.text:0000000000404cf9\n.text:0000000000404cfc\n.text:0000000000404d04\n.text:0000000000404d08\n.text:0000000000404d0c\n.text:0000000000404d10\n.text:0000000000404d16\n.text:0000000000404d1b\n.text:0000000000404d20\n.text:0000000000404d25\n.text:0000000000404d2a\n.text:0000000000404d30\n.text:0000000000404d36\n.text:0000000000404d38\n.text:0000000000404d3e\n.text:0000000000404d43\n.text:0000000000404d48\n.text:0000000000404d4d\n.text:0000000000404d52\n.text:0000000000404d57\n.text:0000000000404d5c\n.text:0000000000404d63\n.text:0000000000404d66\n.text:0000000000404d68\n.text:0000000000404d6d\n.text:0000000000404d72\n.text:0000000000404d77\n.text:0000000000404d79\n.text:0000000000404d7b\n.text:0000000000404d82\n.text:0000000000404d84\n.text:0000000000404d86\n.text:0000000000404d8a\n.text:0000000000404d8f\n.text:0000000000404d91\n.text:0000000000404d96\n.text:0000000000404d98\n.text:0000000000404d9f\n.text:0000000000404da6\n.text:0000000000404da9\n.text:0000000000404dae\n.text:0000000000404db0\n.text:0000000000404db3\n.text:0000000000404db6\n.text:0000000000404dbc\n.text:0000000000404dc1\n.text:0000000000404dc5\n.text:0000000000404dcc\n.text:0000000000404dd2\n.text:0000000000404dd4\n.text:0000000000404dd9\n.text:0000000000404ddc\n.text:0000000000404de3\n.text:0000000000404de7\n.text:0000000000404dec\n.text:0000000000404def\n.text:0000000000404df3\n.text:0000000000404df7\n.text:0000000000404dfc\n.text:0000000000404e00\n.text:0000000000404e05\n.text:0000000000404e09\n.text:0000000000404e0e\n.text:0000000000404e12\n.text:0000000000404e17\n.text:0000000000404e1b\n.text:0000000000404e20\n.text:0000000000404e24\n.text:0000000000404e29\n.text:0000000000404e2d\n.text:0000000000404e32\n.text:0000000000404e37\n.text:0000000000404e39\n.text:0000000000404e3b\n.text:0000000000404e3d\n.text:0000000000404e40\n.text:0000000000404e44\n.text:0000000000404e47\n.text:0000000000404e4c\n.text:0000000000404e4f\n.text:0000000000404e55\n.text:0000000000404e59\n.text:0000000000404e5e\n.text:0000000000404e62\n.text:0000000000404e65\n.text:0000000000404e69\n.text:0000000000404e6d\n.text:0000000000404e70\n.text:0000000000404e72\n.text:0000000000404e79\n.text:0000000000404e80\n.text:0000000000404e83\n.text:0000000000404e88\n.text:0000000000404e8b\n.text:0000000000404e90\n.text:0000000000404ea0\n.text:0000000000404ea5\n.text:0000000000404eaa\n.text:0000000000404ead\n.text:0000000000404eb3\n.text:0000000000404eba\n.text:0000000000404ebd\n.text:0000000000404ec3\n.text:0000000000404ec6\n.text:0000000000404ecc\n.text:0000000000404ed0\n.text:0000000000404ed2\n.text:0000000000404ee0\n.text:0000000000404ee3\n.text:0000000000404ee9\n.text:0000000000404eec\n.text:0000000000404eef\n.text:0000000000404ef3\n.text:0000000000404ef6\n.text:0000000000404ef8\n.text:0000000000404efd\n.text:0000000000404f02\n.text:0000000000404f04\n.text:0000000000404f09\n.text:0000000000404f10\n.text:0000000000404f12\n.text:0000000000404f17\n.text:0000000000404f19\n.text:0000000000404f1e\n.text:0000000000404f23\n.text:0000000000404f2b\n.text:0000000000404f30\n.text:0000000000404f36\n.text:0000000000404f3c\n.text:0000000000404f3e\n.text:0000000000404f44\n.text:0000000000404f47\n.text:0000000000404f4c\n.text:0000000000404f51\n.text:0000000000404f59\n.text:0000000000404f5f\n.text:0000000000404f65\n.text:0000000000404f6a\n.text:0000000000404f6c\n.text:0000000000404f71\n.text:0000000000404f78\n.text:0000000000404f7e\n.text:0000000000404f81\n.text:0000000000404f90\n.text:0000000000404f97\n.text:0000000000404f9b\n.text:0000000000404fa0\n.text:0000000000404fa4\n.text:0000000000404fa6\n.text:0000000000404fab\n.text:0000000000404fad\n.text:0000000000404fb0\n.text:0000000000404fb5\n.text:0000000000404fb7\n.text:0000000000404fc0\n.text:0000000000404fc2\n.text:0000000000404fc7\n.text:0000000000404fc9\n.text:0000000000404fcb\n.text:0000000000404fce\n.text:0000000000404fd0\n.text:0000000000404fd5\n.text:0000000000404fd8\n.text:0000000000404fdd\n.text:0000000000404fdf\n.text:0000000000404fe2\n.text:0000000000404fe7\n.text:0000000000404fe9\n.text:0000000000404fec\n.text:0000000000404fee\n.text:0000000000404ff1\n.text:0000000000404ff4\n.text:0000000000404ff7\n.text:0000000000404ffb\n.text:0000000000405000\n.text:0000000000405002\n.text:0000000000405007\n.text:000000000040500a\n.text:0000000000405011\n.text:0000000000405014\n.text:000000000040501a\n.text:000000000040501f\n.text:0000000000405026\n.text:000000000040502d\n.text:0000000000405033\n.text:0000000000405039\n.text:000000000040503b\n.text:0000000000405041\n.text:0000000000405043\n.text:0000000000405045\n.text:0000000000405048\n.text:000000000040504b\n.text:0000000000405050\n.text:0000000000405052\n.text:0000000000405057\n.text:000000000040505c\n.text:0000000000405061\n.text:0000000000405068\n.text:000000000040506b\n.text:0000000000405071\n.text:0000000000405073\n.text:0000000000405078\n.text:000000000040507a\n.text:000000000040507f\n.text:0000000000405086\n.text:0000000000405089\n.text:000000000040508f\n.text:0000000000405092\n.text:00000000004050a0\n.text:00000000004050a4\n.text:00000000004050a8\n.text:00000000004050ad\n.text:00000000004050b3\n.text:00000000004050b8\n.text:00000000004050bc\n.text:00000000004050c1\n.text:00000000004050c6\n.text:00000000004050cb\n.text:00000000004050cf\n.text:00000000004050d6\n.text:00000000004050da\n.text:00000000004050df\n.text:00000000004050e2\n.text:00000000004050e9\n.text:00000000004050ed\n.text:00000000004050f2\n.text:00000000004050f6\n.text:00000000004050fb\n.text:0000000000405100\n.text:0000000000405105\n.text:000000000040510a\n.text:000000000040510f\n.text:0000000000405113\n.text:0000000000405118\n.text:000000000040511d\n.text:0000000000405120\n.text:0000000000405123\n.text:0000000000405126\n.text:0000000000405128\n.text:000000000040512a\n.text:000000000040512c\n.text:000000000040512e\n.text:0000000000405132\n.text:0000000000405137\n.text:000000000040513b\n.text:0000000000405142\n.text:0000000000405146\n.text:000000000040514b\n.text:000000000040514d\n.text:000000000040514f\n.text:0000000000405150\n.text:0000000000405155\n.text:0000000000405159\n.text:000000000040515e\n.text:0000000000405161\n.text:0000000000405163\n.text:0000000000405167\n.text:000000000040516c\n.text:000000000040516e\n.text:0000000000405173\n.text:0000000000405180\n.text:0000000000405187\n.text:000000000040518b\n.text:0000000000405190\n.text:0000000000405193\n.text:0000000000405198\n.text:000000000040519a\n.text:000000000040519f\n.text:00000000004051a2\n.text:00000000004051a9\n.text:00000000004051ad\n.text:00000000004051b2\n.text:00000000004051b5\n.text:00000000004051b7\n.text:00000000004051bc\n.text:00000000004051c1\n.text:00000000004051c4\n.text:00000000004051cb\n.text:00000000004051ce\n.text:00000000004051d1\n.text:00000000004051d7\n.text:00000000004051de\n.text:00000000004051e5\n.text:00000000004051ea\n.text:00000000004051ed\n.text:00000000004051f0\n.text:00000000004051f6\n.text:00000000004051fb\n.text:00000000004051fe\n.text:0000000000405203\n.text:0000000000405208\n.text:000000000040520d\n.text:0000000000405210\n.text:0000000000405215\n.text:000000000040521a\n.text:0000000000405222\n.text:000000000040522a\n.text:000000000040522f\n.text:0000000000405231\n.text:0000000000405236\n.text:000000000040523b\n.text:000000000040523d\n.text:0000000000405244\n.text:000000000040524b\n.text:0000000000405250\n.text:0000000000405255\n.text:0000000000405259\n.text:000000000040525b\n.text:0000000000405260\n.text:0000000000405263\n.text:0000000000405265\n.text:0000000000405267\n.text:0000000000405269\n.text:000000000040526c\n.text:0000000000405270\n.text:0000000000405273\n.text:0000000000405275\n.text:000000000040527c\n.text:0000000000405283\n.text:000000000040528a\n.text:000000000040528f\n.text:0000000000405291\n.text:0000000000405296\n.text:0000000000405298\n.text:000000000040529a\n.text:000000000040529e\n.text:00000000004052a0\n.text:00000000004052a5\n.text:00000000004052a7\n.text:00000000004052ae\n.text:00000000004052b3\n.text:00000000004052b5\n.text:00000000004052b7\n.text:00000000004052bc\n.text:00000000004052c1\n.text:00000000004052c6\n.text:00000000004052c9\n.text:00000000004052cb\n.text:00000000004052d0\n.text:00000000004052d3\n.text:00000000004052d6\n.text:00000000004052db\n.text:00000000004052de\n.text:00000000004052e0\n.text:00000000004052e2\n.text:00000000004052e4\n.text:00000000004052e7\n.text:00000000004052eb\n.text:00000000004052ed\n.text:00000000004052f0\n.text:00000000004052f5\n.text:00000000004052f8\n.text:00000000004052fc\n.text:0000000000405301\n.text:0000000000405303\n.text:0000000000405308\n.text:000000000040530a\n.text:000000000040530c\n.text:0000000000405310\n.text:0000000000405313\n.text:0000000000405317\n.text:000000000040531c\n.text:000000000040531e\n.text:0000000000405326\n.text:0000000000405329\n.text:000000000040532b\n.text:0000000000405330\n.text:0000000000405337\n.text:0000000000405339\n.text:000000000040533b\n.text:0000000000405342\n.text:0000000000405345\n.text:0000000000405347\n.text:000000000040534c\n.text:0000000000405350\n.text:0000000000405353\n.text:0000000000405357\n.text:000000000040535b\n.text:000000000040535d\n.text:000000000040535f\n.text:0000000000405362\n.text:0000000000405365\n.text:0000000000405367\n.text:0000000000405369\n.text:000000000040536b\n.text:000000000040536d\n.text:000000000040536f\n.text:0000000000405374\n.text:0000000000405376\n.text:000000000040537b\n.text:000000000040537d\n.text:0000000000405383\n.text:0000000000405389\n.text:000000000040538e\n.text:0000000000405396\n.text:000000000040539b\n.text:000000000040539d\n.text:00000000004053a4\n.text:00000000004053ac\n.text:00000000004053b4\n.text:00000000004053b9\n.text:00000000004053c0\n.text:00000000004053c7\n.text:00000000004053cc\n.text:00000000004053ce\n.text:00000000004053d3\n.text:00000000004053d8\n.text:00000000004053de\n.text:00000000004053e3\n.text:00000000004053e8\n.text:00000000004053ed\n.text:00000000004053f3\n.text:00000000004053f8\n.text:00000000004053fd\n.text:0000000000405400\n.text:0000000000405405\n.text:000000000040540b\n.text:0000000000405411\n.text:0000000000405420\n.text:0000000000405423\n.text:0000000000405428\n.text:000000000040542b\n.text:000000000040542e\n.text:0000000000405432\n.text:0000000000405437\n.text:000000000040543a\n.text:000000000040543f\n.text:0000000000405444\n.text:0000000000405448\n.text:000000000040544c\n.text:0000000000405451\n.text:0000000000405453\n.text:0000000000405456\n.text:0000000000405457\n.text:000000000040545c\n.text:0000000000405460\n.text:0000000000405463\n.text:0000000000405466\n.text:000000000040546e\n.text:0000000000405473\n.text:0000000000405476\n.text:000000000040547e\n.text:0000000000405480\n.text:0000000000405485\n.text:0000000000405487\n.text:000000000040548c\n.text:0000000000405494\n.text:0000000000405496\n.text:0000000000405499\n.text:00000000004054a0\n.text:00000000004054a6\n.text:00000000004054aa\n.text:00000000004054af\n.text:00000000004054b4\n.text:00000000004054b7\n.text:00000000004054ba\n.text:00000000004054be\n.text:00000000004054c3\n.text:00000000004054c5\n.text:00000000004054ca\n.text:00000000004054cd\n.text:00000000004054d5\n.text:00000000004054d8\n.text:00000000004054da\n.text:00000000004054df\n.text:00000000004054e4\n.text:00000000004054e7\n.text:00000000004054ec\n.text:00000000004054ef\n.text:00000000004054f4\n.text:00000000004054f9\n.text:00000000004054ff\n.text:0000000000405504\n.text:0000000000405507\n.text:000000000040550c\n.text:000000000040550e\n.text:0000000000405516\n.text:0000000000405518\n.text:000000000040551e\n.text:0000000000405521\n.text:0000000000405525\n.text:0000000000405527\n.text:000000000040552a\n.text:000000000040552f\n.text:0000000000405537\n.text:000000000040553b\n.text:000000000040553d\n.text:0000000000405542\n.text:0000000000405544\n.text:0000000000405547\n.text:000000000040554a\n.text:000000000040554c\n.text:0000000000405552\n.text:0000000000405557\n.text:000000000040555c\n.text:000000000040555f\n.text:0000000000405564\n.text:0000000000405566\n.text:0000000000405569\n.text:000000000040556e\n.text:0000000000405573\n.text:0000000000405578\n.text:000000000040557b\n.text:0000000000405580\n.text:0000000000405582\n.text:0000000000405585\n.text:000000000040558a\n.text:000000000040558f\n.text:0000000000405591\n.text:0000000000405596\n.text:0000000000405599\n.text:000000000040559b\n.text:00000000004055a0\n.text:00000000004055a3\n.text:00000000004055a5\n.text:00000000004055ad\n.text:00000000004055b2\n.text:00000000004055b4\n.text:00000000004055b9\n.text:00000000004055bc\n.text:00000000004055c0\n.text:00000000004055c2\n.text:00000000004055c7\n.text:00000000004055cc\n.text:00000000004055d1\n.text:00000000004055d3\n.text:00000000004055d8\n.text:00000000004055db\n.text:00000000004055dd\n.text:00000000004055e0\n.text:00000000004055e2\n.text:00000000004055e7\n.text:00000000004055e9\n.text:00000000004055ee\n.text:00000000004055f1\n.text:00000000004055f3\n.text:00000000004055f8\n.text:00000000004055fa\n.text:00000000004055ff\n.text:0000000000405601\n.text:0000000000405606\n.text:000000000040560b\n.text:0000000000405610\n.text:0000000000405617\n.text:0000000000405619\n.text:0000000000405621\n.text:0000000000405629\n.text:000000000040562e\n.text:0000000000405630\n.text:0000000000405633\n.text:0000000000405638\n.text:000000000040563d\n.text:000000000040563f\n.text:0000000000405644\n.text:0000000000405647\n.text:0000000000405649\n.text:000000000040564d\n.text:000000000040564f\n.text:0000000000405654\n.text:0000000000405656\n.text:000000000040565b\n.text:000000000040565f\n.text:0000000000405661\n.text:0000000000405666\n.text:0000000000405668\n.text:000000000040566d\n.text:000000000040566f\n.text:0000000000405674\n.text:0000000000405679\n.text:000000000040567e\n.text:0000000000405685\n.text:000000000040568c\n.text:0000000000405691\n.text:0000000000405696\n.text:000000000040569b\n.text:000000000040569d\n.text:00000000004056a4\n.text:00000000004056a6\n.text:00000000004056ad\n.text:00000000004056b4\n.text:00000000004056b9\n.text:00000000004056be\n.text:00000000004056c3\n.text:00000000004056c8\n.text:00000000004056ca\n.text:00000000004056d1\n.text:00000000004056d3\n.text:00000000004056d8\n.text:00000000004056e0\n.text:00000000004056e2\n.text:00000000004056e9\n.text:00000000004056f0\n.text:00000000004056f4\n.text:00000000004056f7\n.text:00000000004056fc\n.text:0000000000405700\n.text:0000000000405704\n.text:0000000000405708\n.text:000000000040570b\n.text:000000000040570d\n.text:0000000000405712\n.text:0000000000405716\n.text:0000000000405718\n.text:000000000040571d\n.text:0000000000405720\n.text:0000000000405722\n.text:0000000000405725\n.text:0000000000405727\n.text:000000000040572d\n.text:0000000000405730\n.text:0000000000405732\n.text:0000000000405734\n.text:0000000000405739\n.text:000000000040573e\n.text:0000000000405743\n.text:0000000000405748\n.text:000000000040574b\n.text:0000000000405751\n.text:0000000000405753\n.text:0000000000405759\n.text:000000000040575f\n.text:0000000000405762\n.text:0000000000405764\n.text:0000000000405766\n.text:000000000040576c\n.text:0000000000405771\n.text:0000000000405774\n.text:000000000040577a\n.text:000000000040577c\n.text:0000000000405782\n.text:000000000040578a\n.text:000000000040578c\n.text:0000000000405791\n.text:0000000000405793\n.text:0000000000405798\n.text:000000000040579f\n.text:00000000004057a2\n.text:00000000004057a7\n.text:00000000004057ae\n.text:00000000004057b3\n.text:00000000004057b5\n.text:00000000004057ba\n.text:00000000004057bd\n.text:00000000004057c2\n.text:00000000004057c9\n.text:00000000004057cc\n.text:00000000004057ce\n.text:00000000004057d3\n.text:00000000004057d8\n.text:00000000004057df\n.text:00000000004057e6\n.text:00000000004057e8\n.text:00000000004057eb\n.text:00000000004057ed\n.text:00000000004057ef\n.text:00000000004057f4\n.text:00000000004057f9\n.text:0000000000405800\n.text:0000000000405807\n.text:000000000040580f\n.text:0000000000405818\n.text:000000000040581d\n.text:000000000040581f\n.text:0000000000405824\n.text:000000000040582c\n.text:0000000000405834\n.text:0000000000405839\n.text:000000000040583b\n.text:0000000000405840\n.text:0000000000405848\n.text:000000000040584d\n.text:000000000040584f\n.text:0000000000405854\n.text:000000000040585b\n.text:0000000000405862\n.text:0000000000405869\n.text:0000000000405871\n.text:0000000000405876\n.text:0000000000405878\n.text:000000000040587d\n.text:0000000000405884\n.text:000000000040588b\n.text:0000000000405892\n.text:0000000000405896\n.text:000000000040589a\n.text:000000000040589e\n.text:00000000004058a3\n.text:00000000004058a5\n.text:00000000004058aa\n.text:00000000004058b1\n.text:00000000004058b8\n.text:00000000004058bf\n.text:00000000004058c3\n.text:00000000004058c7\n.text:00000000004058cb\n.text:00000000004058d0\n.text:00000000004058d2\n.text:00000000004058d7\n.text:00000000004058df\n.text:00000000004058e2\n.text:00000000004058e4\n.text:00000000004058e9\n.text:00000000004058eb\n.text:00000000004058f0\n.text:00000000004058f2\n.text:00000000004058fa\n.text:00000000004058ff\n.text:0000000000405901\n.text:0000000000405906\n.text:0000000000405909\n.text:000000000040590e\n.text:0000000000405910\n.text:0000000000405917\n.text:0000000000405918\n.text:000000000040591a\n.text:000000000040591c\n.text:000000000040591e\n.text:0000000000405920\n.text:0000000000405921\n.text:0000000000405922\n.text:0000000000405927\n.text:0000000000405929\n.text:000000000040592e\n.text:0000000000405933\n.text:0000000000405938\n.text:000000000040593a\n.text:000000000040593f\n.text:0000000000405946\n.text:000000000040594b\n.text:000000000040594d\n.text:0000000000405952\n.text:0000000000405956\n.text:000000000040595b\n.text:000000000040595d\n.text:0000000000405962\n.text:0000000000405969\n.text:000000000040596e\n.text:0000000000405973\n.text:0000000000405978\n.text:000000000040597d\n.text:0000000000405982\n.text:0000000000405987\n.text:000000000040598c\n.text:000000000040598e\n.text:0000000000405993\n.text:000000000040599a\n.text:000000000040599d\n.text:00000000004059a2\n.text:00000000004059a5\n.text:00000000004059aa\n.text:00000000004059ac\n.text:00000000004059af\n.text:00000000004059b2\n.text:00000000004059b7\n.text:00000000004059bc\n.text:00000000004059c1\n.text:00000000004059c8\n.text:00000000004059cd\n.text:00000000004059cf\n.text:00000000004059d4\n.text:00000000004059d9\n.text:00000000004059de\n.text:00000000004059e3\n.text:00000000004059e8\n.text:00000000004059ea\n.text:00000000004059ef\n.text:00000000004059f4\n.text:00000000004059f6\n.text:00000000004059fb\n.text:0000000000405a00\n.text:0000000000405a02\n.text:0000000000405a07\n.text:0000000000405a0e\n.text:0000000000405a13\n.text:0000000000405a15\n.text:0000000000405a1a\n.text:0000000000405a1f\n.text:0000000000405a21\n.text:0000000000405a26\n.text:0000000000405a2b\n.text:0000000000405a30\n.text:0000000000405a35\n.text:0000000000405a3a\n.text:0000000000405a3c\n.text:0000000000405a41\n.text:0000000000405a46\n.text:0000000000405a48\n.text:0000000000405a4b\n.text:0000000000405a50\n.text:0000000000405a55\n.text:0000000000405a57\n.text:0000000000405a5c\n.text:0000000000405a61\n.text:0000000000405a66\n.text:0000000000405a6b\n.text:0000000000405a70\n.text:0000000000405a75\n.text:0000000000405a7a\n.text:0000000000405a81\n.text:0000000000405a86\n.text:0000000000405a88\n.text:0000000000405a8d\n.text:0000000000405a92\n.text:0000000000405a97\n.text:0000000000405a9c\n.text:0000000000405aa1\n.text:0000000000405aa3\n.text:0000000000405aa8\n.text:0000000000405aad\n.text:0000000000405aaf\n.text:0000000000405ab4\n.text:0000000000405ab9\n.text:0000000000405abe\n.text:0000000000405ac3\n.text:0000000000405ac8\n.text:0000000000405ad0\n.text:0000000000405ad5\n.text:0000000000405ada\n.text:0000000000405adf\n.text:0000000000405ae4\n.text:0000000000405ae9\n.text:0000000000405aee\n.text:0000000000405af3\n.text:0000000000405af8\n.text:0000000000405afa\n.text:0000000000405aff\n.text:0000000000405b04\n.text:0000000000405b09\n.text:0000000000405b0b\n.text:0000000000405b10\n.text:0000000000405b15\n.text:0000000000405b17\n.text:0000000000405b1c\n.text:0000000000405b21\n.text:0000000000405b26\n.text:0000000000405b28\n.text:0000000000405b2d\n.text:0000000000405b32\n.text:0000000000405b37\n.text:0000000000405b39\n.text:0000000000405b3e\n.text:0000000000405b43\n.text:0000000000405b48\n.text:0000000000405b4d\n.text:0000000000405b52\n.text:0000000000405b54\n.text:0000000000405b59\n.text:0000000000405b5e\n.text:0000000000405b63\n.text:0000000000405b65\n.text:0000000000405b6a\n.text:0000000000405b6f\n.text:0000000000405b71\n.text:0000000000405b76\n.text:0000000000405b7b\n.text:0000000000405b80\n.text:0000000000405b82\n.text:0000000000405b87\n.text:0000000000405b8c\n.text:0000000000405b91\n.text:0000000000405b93\n.text:0000000000405b98\n.text:0000000000405b9c\n.text:0000000000405ba1\n.text:0000000000405ba6\n.text:0000000000405ba8\n.text:0000000000405bad\n.text:0000000000405bb2\n'
p671
tp672
sS'realloc'
p673
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p674
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060d1f8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p675
S'JMP qword ptr [0x0060d1f8]\n'
p676
S'ff 25 b2 b3 20 00\n'
p677
S'.plt:0000000000401e40\n'
p678
tp679
sS'XRRSetScreenConfigAndRate'
p680
(S'\n__stdcall XRRSetScreenConfigAndRate()\n'
p681
V\u000avoid XRRSetScreenConfigAndRate(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRSetScreenConfigAndRate_0060d120)();\u000a  return;\u000a}\u000a\u000a
p682
S'JMP qword ptr [0x0060d120]\n'
p683
S'ff 25 8a b4 20 00\n'
p684
S'.plt:0000000000401c90\n'
p685
tp686
sS'crtc_set_transform'
p687
(S'\n__stdcall crtc_set_transform(crtc_t * crtc, transform_t * transform)\n'
p688
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000avoid crtc_set_transform(crtc_t *crtc,transform_t *transform)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  int major;\u000a  undefined8 local_18;\u000a  \u000a  local_18 = in_RAX;\u000a  XRRQueryVersion(dpy,(long)&local_18 + 4,&local_18);\u000a  if ((1 < local_18._4_4_) || ((local_18._4_4_ == 1 && (2 < (int)local_18)))) {\u000a    XRRSetCrtcTransform(dpy,(crtc->crtc).xid,transform,transform->filter,transform->params,\u000a                        (ulong)(uint)transform->nparams);\u000a  }\u000a  return;\u000a}\u000a\u000a
p689
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nMOV RDI,qword ptr [0x0060d3a8]\nLEA RSI,[RSP + 0x4]\nMOV RDX,RSP\nCALL 0x00401b10\nCMP dword ptr [RSP + 0x4],0x1\nJG 0x0040971d\nJNZ 0x0040973c\nCMP dword ptr [RSP],0x3\nJL 0x0040973c\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [R14 + 0x10]\nMOV RCX,qword ptr [RBX + 0x28]\nMOV R8,qword ptr [RBX + 0x38]\nMOV R9D,dword ptr [RBX + 0x30]\nMOV RDX,RBX\nCALL 0x00401b40\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p690
S'41 56\n53\n50\n48 89 f3\n49 89 fe\n48 8b 3d a7 3c 20 00\n48 8d 74 24 04\n48 89 e2\ne8 02 84 ff ff\n83 7c 24 04 01\n7f 08\n75 25\n83 3c 24 03\n7c 1f\n48 8b 3d 84 3c 20 00\n49 8b 76 10\n48 8b 4b 28\n4c 8b 43 38\n44 8b 4b 30\n48 89 da\ne8 04 84 ff ff\n48 83 c4 08\n5b\n41 5e\nc3\n'
p691
S'.text:00000000004096f0\n.text:00000000004096f2\n.text:00000000004096f3\n.text:00000000004096f4\n.text:00000000004096f7\n.text:00000000004096fa\n.text:0000000000409701\n.text:0000000000409706\n.text:0000000000409709\n.text:000000000040970e\n.text:0000000000409713\n.text:0000000000409715\n.text:0000000000409717\n.text:000000000040971b\n.text:000000000040971d\n.text:0000000000409724\n.text:0000000000409728\n.text:000000000040972c\n.text:0000000000409730\n.text:0000000000409734\n.text:0000000000409737\n.text:000000000040973c\n.text:0000000000409740\n.text:0000000000409741\n.text:0000000000409743\n'
p692
tp693
sS'XRRSetCrtcGamma'
p694
(S'\n__stdcall XRRSetCrtcGamma()\n'
p695
V\u000avoid XRRSetCrtcGamma(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRSetCrtcGamma_0060d1f0)();\u000a  return;\u000a}\u000a\u000a
p696
S'JMP qword ptr [0x0060d1f0]\n'
p697
S'ff 25 ba b3 20 00\n'
p698
S'.plt:0000000000401e30\n'
p699
tp700
sS'find_mode_by_xid'
p701
(S'\n__stdcall find_mode_by_xid(RRMode mode)\n'
p702
V\u000aXRRModeInfo * find_mode_by_xid(RRMode mode)\u000a\u000a{\u000a  XRRModeInfo *pXVar1;\u000a  name_t mode_name;\u000a  name_t local_30;\u000a  \u000a  init_name(&local_30);\u000a  set_name_xid(&local_30,mode);\u000a  pXVar1 = find_mode();\u000a  return pXVar1;\u000a}\u000a\u000a
p703
S'PUSH R14\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00407b60\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00405eb0\nMOV RDI,R14\nCALL 0x00406340\nADD RSP,0x28\nPOP RBX\nPOP R14\nRET\n'
p704
S'41 56\n53\n48 83 ec 28\n48 89 fb\n4c 8d 74 24 08\n4c 89 f7\ne8 e9 01 00 00\n4c 89 f7\n48 89 de\ne8 2e e5 ff ff\n4c 89 f7\ne8 b6 e9 ff ff\n48 83 c4 28\n5b\n41 5e\nc3\n'
p705
S'.text:0000000000407960\n.text:0000000000407962\n.text:0000000000407963\n.text:0000000000407967\n.text:000000000040796a\n.text:000000000040796f\n.text:0000000000407972\n.text:0000000000407977\n.text:000000000040797a\n.text:000000000040797d\n.text:0000000000407982\n.text:0000000000407985\n.text:000000000040798a\n.text:000000000040798e\n.text:000000000040798f\n.text:0000000000407991\n'
p706
tp707
sS'XRRQueryVersion'
p708
(S'\n__stdcall XRRQueryVersion()\n'
p709
V\u000avoid XRRQueryVersion(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRQueryVersion_0060d060)();\u000a  return;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x0060d060]\n'
p711
S'ff 25 4a b5 20 00\n'
p712
S'.plt:0000000000401b10\n'
p713
tp714
sS'strlen'
p715
(S'\n__stdcall strlen(char * __s)\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060d0a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x0060d0a8]\n'
p718
S'ff 25 02 b5 20 00\n'
p719
S'.plt:0000000000401ba0\n'
p720
tp721
sS'XRRConfigRotations'
p722
(S'\n__stdcall XRRConfigRotations()\n'
p723
V\u000avoid XRRConfigRotations(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRConfigRotations_0060d088)();\u000a  return;\u000a}\u000a\u000a
p724
S'JMP qword ptr [0x0060d088]\n'
p725
S'ff 25 22 b5 20 00\n'
p726
S'.plt:0000000000401b60\n'
p727
tp728
sS'memcmp'
p729
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p730
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060d100)();\u000a  return iVar1;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x0060d100]\n'
p732
S'ff 25 aa b4 20 00\n'
p733
S'.plt:0000000000401c50\n'
p734
tp735
sS'crtc_apply'
p736
(S'\n__stdcall crtc_apply(crtc_t * crtc)\n'
p737
V\u000aint crtc_apply(crtc_t *crtc)\u000a\u000a{\u000a  uint uVar1;\u000a  XRRModeInfo *mode_info;\u000a  RRMode RVar2;\u000a  char *pcVar3;\u000a  int iVar4;\u000a  void *__ptr;\u000a  ulong uVar5;\u000a  ulong uVar6;\u000a  long lVar7;\u000a  \u000a  iVar4 = 0;\u000a  if ((crtc->changing != 0) && (crtc->mode_info != (XRRModeInfo *)0x0)) {\u000a    iVar4 = crtc->noutput;\u000a    __ptr = calloc((long)iVar4,8);\u000a    if (__ptr == (void *)0x0) {\u000a      iVar4 = 0xb;\u000a    }\u000a    else {\u000a      uVar5 = (long)iVar4 & 0xffffffff;\u000a      if (0 < (int)uVar5) {\u000a        uVar6 = 0;\u000a        do {\u000a          *(XID *)((long)__ptr + uVar6 * 8) = (crtc->outputs[uVar6]->output).xid;\u000a          uVar6 = uVar6 + 1;\u000a        } while (uVar5 != uVar6);\u000a      }\u000a      mode_info = crtc->mode_info;\u000a      RVar2 = mode_info->id;\u000a      if (verbose == 1) {\u000a        uVar1 = (crtc->crtc).index;\u000a        pcVar3 = mode_info->name;\u000a        mode_refresh(mode_info);\u000a        printf("crtc %d: %12s %6.2f +%d+%d",(ulong)uVar1,pcVar3,(ulong)(uint)crtc->x,\u000a               (ulong)(uint)crtc->y);\u000a        if (0 < crtc->noutput) {\u000a          lVar7 = 0;\u000a          do {\u000a            printf(" \u005c"%s\u005c"",(crtc->outputs[lVar7]->output).string);\u000a            lVar7 = lVar7 + 1;\u000a          } while (lVar7 < (long)crtc->noutput);\u000a        }\u000a        putchar(10);\u000a      }\u000a      iVar4 = 0;\u000a      if (dryrun == 0) {\u000a        iVar4 = equal_transform(&crtc->current_transform,&crtc->pending_transform);\u000a        if (iVar4 == 0) {\u000a          crtc_set_transform(crtc,&crtc->pending_transform);\u000a        }\u000a        iVar4 = XRRSetCrtcConfig(dpy,res,(crtc->crtc).xid,0,(ulong)(uint)crtc->x,\u000a                                 (ulong)(uint)crtc->y,RVar2,(ulong)crtc->rotation,__ptr,\u000a                                 (ulong)(uint)crtc->noutput);\u000a        if (iVar4 == 0) {\u000a          iVar4 = 0;\u000a          if (crtc->panning_info != (XRRPanning *)0x0) {\u000a            if (has_1_3 != 1) {\u000a                    /* WARNING: Subroutine does not return */\u000a              fatal("panning needs RandR 1.3\u005cn");\u000a            }\u000a            iVar4 = XRRSetPanning(dpy,res,(crtc->crtc).xid);\u000a          }\u000a        }\u000a      }\u000a      free(__ptr);\u000a    }\u000a  }\u000a  return iVar4;\u000a}\u000a\u000a
p738
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV RBX,RDI\nXOR EBP,EBP\nCMP dword ptr [RBX + 0x20],0x0\nJZ 0x004094aa\nCMP qword ptr [RBX + 0x30],0x0\nJZ 0x004094aa\nMOVSXD RBP,dword ptr [RBX + 0x58]\nMOV ESI,0x8\nMOV RDI,RBP\nCALL 0x00401c60\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004094a5\nMOV EAX,EBP\nTEST EAX,EAX\nJLE 0x00409388\nXOR ECX,ECX\nNOP word ptr [RAX + RAX*0x1]\nMOV RDX,qword ptr [RBX + 0x50]\nMOV RDX,qword ptr [RDX + RCX*0x8]\nMOV RDX,qword ptr [RDX + 0x28]\nMOV qword ptr [R14 + RCX*0x8],RDX\nINC RCX\nCMP RAX,RCX\nJNZ 0x00409370\nMOV RDI,qword ptr [RBX + 0x30]\nMOV R12,qword ptr [RDI]\nCMP byte ptr [0x0060d2f8],0x1\nJNZ 0x004093fe\nMOV R15D,dword ptr [RBX + 0x18]\nMOV RBP,qword ptr [RDI + 0x38]\nCALL 0x00407ad0\nMOV ECX,dword ptr [RBX + 0x40]\nMOV R8D,dword ptr [RBX + 0x44]\nMOV EDI,0x40b6ff\nMOV AL,0x1\nMOV ESI,R15D\nMOV RDX,RBP\nCALL 0x00401bb0\nCMP dword ptr [RBX + 0x58],0x0\nJLE 0x004093f4\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [RBX + 0x50]\nMOV RAX,qword ptr [RAX + RBP*0x8]\nMOV RSI,qword ptr [RAX + 0x20]\nMOV EDI,0x40b71a\nXOR EAX,EAX\nCALL 0x00401bb0\nINC RBP\nMOVSXD RAX,dword ptr [RBX + 0x58]\nCMP RBP,RAX\nJL 0x004093d0\nMOV EDI,0xa\nCALL 0x00401aa0\nXOR EBP,EBP\nMOV AL,byte ptr [0x0060d2fc]\nTEST AL,AL\nJNZ 0x0040949b\nLEA RDI,[RBX + 0x60]\nLEA RBP,[0xa0 + RBX]\nMOV RSI,RBP\nCALL 0x00409050\nTEST EAX,EAX\nJNZ 0x00409430\nMOV RDI,RBX\nMOV RSI,RBP\nCALL 0x004096f0\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3e8]\nMOV RDX,qword ptr [RBX + 0x10]\nMOV R8D,dword ptr [RBX + 0x40]\nMOV R9D,dword ptr [RBX + 0x44]\nMOV EAX,dword ptr [RBX + 0x58]\nMOVZX EBP,word ptr [RBX + 0x48]\nMOV ECX,0x0\nPUSH RAX\nPUSH R14\nPUSH RBP\nPUSH R12\nCALL 0x00401d30\nADD RSP,0x20\nMOV EBP,EAX\nTEST EBP,EBP\nJNZ 0x0040949b\nMOV RCX,qword ptr [RBX + 0x38]\nTEST RCX,RCX\nMOV EBP,0x0\nJZ 0x0040949b\nCMP byte ptr [0x0060d3bc],0x1\nJNZ 0x004094b5\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3e8]\nMOV RDX,qword ptr [RBX + 0x10]\nCALL 0x00401f70\nMOV EBP,EAX\nMOV RDI,R14\nCALL 0x00401a80\nJMP 0x004094aa\nMOV EBP,0xb\nMOV EAX,EBP\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40b720\nXOR EAX,EAX\nCALL 0x00406410\n'
p739
S'55\n41 57\n41 56\n41 54\n53\n48 89 fb\n31 ed\n83 7b 20 00\n0f 84 73 01 00 00\n48 83 7b 30 00\n0f 84 68 01 00 00\n48 63 6b 58\nbe 08 00 00 00\n48 89 ef\ne8 0d 89 ff ff\n49 89 c6\n4d 85 f6\n0f 84 46 01 00 00\n89 e8\n85 c0\n7e 23\n31 c9\n66 0f 1f 84 00 00 00 00 00\n48 8b 53 50\n48 8b 14 ca\n48 8b 52 28\n49 89 14 ce\n48 ff c1\n48 39 c8\n75 e8\n48 8b 7b 30\n4c 8b 27\n80 3d 62 3f 20 00 01\n75 66\n44 8b 7b 18\n48 8b 6f 38\ne8 2b e7 ff ff\n8b 4b 40\n44 8b 43 44\nbf ff b6 40 00\nb0 01\n44 89 fe\n48 89 ea\ne8 f2 87 ff ff\n83 7b 58 00\n7e 30\n31 ed\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 43 50\n48 8b 04 e8\n48 8b 70 20\nbf 1a b7 40 00\n31 c0\ne8 c8 87 ff ff\n48 ff c5\n48 63 43 58\n48 39 c5\n7c dc\nbf 0a 00 00 00\ne8 a2 86 ff ff\n31 ed\n8a 05 f6 3e 20 00\n84 c0\n0f 85 8d 00 00 00\n48 8d 7b 60\n48 8d ab a0 00 00 00\n48 89 ee\ne8 2f fc ff ff\n85 c0\n75 0b\n48 89 df\n48 89 ee\ne8 c0 02 00 00\n48 8b 3d 71 3f 20 00\n48 8b 35 aa 3f 20 00\n48 8b 53 10\n44 8b 43 40\n44 8b 4b 44\n8b 43 58\n0f b7 6b 48\nb9 00 00 00 00\n50\n41 56\n55\n41 54\ne8 cf 88 ff ff\n48 83 c4 20\n89 c5\n85 ed\n75 30\n48 8b 4b 38\n48 85 c9\nbd 00 00 00 00\n74 22\n80 3d 3c 3f 20 00 01\n75 33\n48 8b 3d 1f 3f 20 00\n48 8b 35 58 3f 20 00\n48 8b 53 10\ne8 d7 8a ff ff\n89 c5\n4c 89 f7\ne8 dd 85 ff ff\neb 05\nbd 0b 00 00 00\n89 e8\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\nbf 20 b7 40 00\n31 c0\ne8 4f cf ff ff\n'
p740
S'.text:0000000000409320\n.text:0000000000409321\n.text:0000000000409323\n.text:0000000000409325\n.text:0000000000409327\n.text:0000000000409328\n.text:000000000040932b\n.text:000000000040932d\n.text:0000000000409331\n.text:0000000000409337\n.text:000000000040933c\n.text:0000000000409342\n.text:0000000000409346\n.text:000000000040934b\n.text:000000000040934e\n.text:0000000000409353\n.text:0000000000409356\n.text:0000000000409359\n.text:000000000040935f\n.text:0000000000409361\n.text:0000000000409363\n.text:0000000000409365\n.text:0000000000409367\n.text:0000000000409370\n.text:0000000000409374\n.text:0000000000409378\n.text:000000000040937c\n.text:0000000000409380\n.text:0000000000409383\n.text:0000000000409386\n.text:0000000000409388\n.text:000000000040938c\n.text:000000000040938f\n.text:0000000000409396\n.text:0000000000409398\n.text:000000000040939c\n.text:00000000004093a0\n.text:00000000004093a5\n.text:00000000004093a8\n.text:00000000004093ac\n.text:00000000004093b1\n.text:00000000004093b3\n.text:00000000004093b6\n.text:00000000004093b9\n.text:00000000004093be\n.text:00000000004093c2\n.text:00000000004093c4\n.text:00000000004093c6\n.text:00000000004093d0\n.text:00000000004093d4\n.text:00000000004093d8\n.text:00000000004093dc\n.text:00000000004093e1\n.text:00000000004093e3\n.text:00000000004093e8\n.text:00000000004093eb\n.text:00000000004093ef\n.text:00000000004093f2\n.text:00000000004093f4\n.text:00000000004093f9\n.text:00000000004093fe\n.text:0000000000409400\n.text:0000000000409406\n.text:0000000000409408\n.text:000000000040940e\n.text:0000000000409412\n.text:0000000000409419\n.text:000000000040941c\n.text:0000000000409421\n.text:0000000000409423\n.text:0000000000409425\n.text:0000000000409428\n.text:000000000040942b\n.text:0000000000409430\n.text:0000000000409437\n.text:000000000040943e\n.text:0000000000409442\n.text:0000000000409446\n.text:000000000040944a\n.text:000000000040944d\n.text:0000000000409451\n.text:0000000000409456\n.text:0000000000409457\n.text:0000000000409459\n.text:000000000040945a\n.text:000000000040945c\n.text:0000000000409461\n.text:0000000000409465\n.text:0000000000409467\n.text:0000000000409469\n.text:000000000040946b\n.text:000000000040946f\n.text:0000000000409472\n.text:0000000000409477\n.text:0000000000409479\n.text:0000000000409480\n.text:0000000000409482\n.text:0000000000409489\n.text:0000000000409490\n.text:0000000000409494\n.text:0000000000409499\n.text:000000000040949b\n.text:000000000040949e\n.text:00000000004094a3\n.text:00000000004094a5\n.text:00000000004094aa\n.text:00000000004094ac\n.text:00000000004094ad\n.text:00000000004094af\n.text:00000000004094b1\n.text:00000000004094b3\n.text:00000000004094b4\n.text:00000000004094b5\n.text:00000000004094ba\n.text:00000000004094bc\n'
p741
tp742
sS'XRRGetCrtcGamma'
p743
(S'\n__stdcall XRRGetCrtcGamma()\n'
p744
V\u000avoid XRRGetCrtcGamma(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetCrtcGamma_0060d288)();\u000a  return;\u000a}\u000a\u000a
p745
S'JMP qword ptr [0x0060d288]\n'
p746
S'ff 25 22 b3 20 00\n'
p747
S'.plt:0000000000401f60\n'
p748
tp749
sS'preferred_mode'
p750
(S'\n__stdcall preferred_mode(output_t * output)\n'
p751
V\u000aXRRModeInfo * preferred_mode(output_t *output)\u000a\u000a{\u000a  XRROutputInfo *pXVar1;\u000a  int iVar2;\u000a  XRRModeInfo *pXVar3;\u000a  long lVar4;\u000a  int iVar5;\u000a  XRRModeInfo *pXVar6;\u000a  int iVar7;\u000a  \u000a  pXVar1 = output->output_info;\u000a  iVar7 = 0;\u000a  if (pXVar1->nmode < 1) {\u000a    pXVar6 = (XRRModeInfo *)0x0;\u000a  }\u000a  else {\u000a    lVar4 = 0;\u000a    pXVar6 = (XRRModeInfo *)0x0;\u000a    do {\u000a      pXVar3 = find_mode_by_xid(pXVar1->modes[lVar4]);\u000a      iVar5 = 0;\u000a      if ((long)pXVar1->npreferred <= lVar4) {\u000a        iVar5 = dpy->screens[(long)screen].height;\u000a        if (pXVar1->mm_height == 0) {\u000a          iVar5 = iVar5 - pXVar3->height;\u000a        }\u000a        else {\u000a          iVar5 = (iVar5 * 1000) / dpy->screens[(long)screen].mheight -\u000a                  SUB164(ZEXT416(pXVar3->height * 1000) / ZEXT816(pXVar1->mm_height),0);\u000a        }\u000a      }\u000a      iVar2 = -iVar5;\u000a      if (0 < iVar5) {\u000a        iVar2 = iVar5;\u000a      }\u000a      if (iVar2 < iVar7 || pXVar6 == (XRRModeInfo *)0x0) {\u000a        iVar7 = iVar2;\u000a        pXVar6 = pXVar3;\u000a      }\u000a      lVar4 = lVar4 + 1;\u000a    } while (lVar4 < (long)pXVar1->nmode);\u000a  }\u000a  return pXVar6;\u000a}\u000a\u000a
p752
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,qword ptr [RDI + 0x38]\nXOR R15D,R15D\nCMP dword ptr [R14 + 0x50],0x0\nJLE 0x004083cf\nXOR EBX,EBX\nXOR R12D,R12D\nNOP\nMOV RAX,qword ptr [R14 + 0x58]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nCALL 0x00407960\nMOV R10,RAX\nMOVSXD RAX,dword ptr [R14 + 0x54]\nXOR ESI,ESI\nCMP RBX,RAX\nJL 0x004083a0\nMOV R9,qword ptr [R14 + 0x28]\nMOVSXD RDI,dword ptr [0x0060d2d0]\nSHL RDI,0x7\nTEST R9,R9\nMOV RAX,qword ptr [0x0060d3a8]\nMOV RCX,qword ptr [0xe8 + RAX]\nMOV ESI,dword ptr [RCX + RDI*0x1 + 0x1c]\nMOV R8D,dword ptr [R10 + 0xc]\nJZ 0x00408395\nIMUL EAX,ESI,0x3e8\nCDQ\nIDIV dword ptr [RCX + RDI*0x1 + 0x24]\nIMUL R8D,R8D,0x3e8\nXOR EDX,EDX\nMOV ESI,EAX\nMOV RAX,R8\nDIV R9\nSUB ESI,EAX\nJMP 0x004083a0\nSUB ESI,R8D\nNOP dword ptr [RAX + RAX*0x1]\nMOV EAX,ESI\nNEG EAX\nCMOVL EAX,ESI\nTEST R12,R12\nSETZ CL\nCMP EAX,R15D\nSETL DL\nOR DL,CL\nCMOVNZ R12,R10\nCMOVNZ R15D,EAX\nINC RBX\nMOVSXD RAX,dword ptr [R14 + 0x50]\nCMP RBX,RAX\nJL 0x00408330\nJMP 0x004083d2\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p753
S'41 57\n41 56\n41 54\n53\n50\n4c 8b 77 38\n45 31 ff\n41 83 7e 50 00\n0f 8e a5 00 00 00\n31 db\n45 31 e4\n90\n49 8b 46 58\n48 8b 3c d8\ne8 23 f6 ff ff\n49 89 c2\n49 63 46 54\n31 f6\n48 39 c3\n7c 55\n4d 8b 4e 28\n48 63 3d 7a 4f 20 00\n48 c1 e7 07\n4d 85 c9\n48 8b 05 44 50 20 00\n48 8b 88 e8 00 00 00\n8b 74 39 1c\n45 8b 42 0c\n74 20\n69 c6 e8 03 00 00\n99\nf7 7c 39 24\n45 69 c0 e8 03 00 00\n31 d2\n89 c6\n4c 89 c0\n49 f7 f1\n29 c6\neb 0b\n44 29 c6\n0f 1f 84 00 00 00 00 00\n89 f0\nf7 d8\n0f 4c c6\n4d 85 e4\n0f 94 c1\n44 39 f8\n0f 9c c2\n08 ca\n4d 0f 45 e2\n44 0f 45 f8\n48 ff c3\n49 63 46 50\n48 39 c3\n0f 8c 63 ff ff ff\neb 03\n45 31 e4\n4c 89 e0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p754
S'.text:0000000000408310\n.text:0000000000408312\n.text:0000000000408314\n.text:0000000000408316\n.text:0000000000408317\n.text:0000000000408318\n.text:000000000040831c\n.text:000000000040831f\n.text:0000000000408324\n.text:000000000040832a\n.text:000000000040832c\n.text:000000000040832f\n.text:0000000000408330\n.text:0000000000408334\n.text:0000000000408338\n.text:000000000040833d\n.text:0000000000408340\n.text:0000000000408344\n.text:0000000000408346\n.text:0000000000408349\n.text:000000000040834b\n.text:000000000040834f\n.text:0000000000408356\n.text:000000000040835a\n.text:000000000040835d\n.text:0000000000408364\n.text:000000000040836b\n.text:000000000040836f\n.text:0000000000408373\n.text:0000000000408375\n.text:000000000040837b\n.text:000000000040837c\n.text:0000000000408380\n.text:0000000000408387\n.text:0000000000408389\n.text:000000000040838b\n.text:000000000040838e\n.text:0000000000408391\n.text:0000000000408393\n.text:0000000000408395\n.text:0000000000408398\n.text:00000000004083a0\n.text:00000000004083a2\n.text:00000000004083a4\n.text:00000000004083a7\n.text:00000000004083aa\n.text:00000000004083ad\n.text:00000000004083b0\n.text:00000000004083b3\n.text:00000000004083b5\n.text:00000000004083b9\n.text:00000000004083bd\n.text:00000000004083c0\n.text:00000000004083c4\n.text:00000000004083c7\n.text:00000000004083cd\n.text:00000000004083cf\n.text:00000000004083d2\n.text:00000000004083d5\n.text:00000000004083d9\n.text:00000000004083da\n.text:00000000004083dc\n.text:00000000004083de\n.text:00000000004083e0\n'
p755
tp756
sS'warning'
p757
(S'\n__stdcall warning(char * format)\n'
p758
V\u000avoid warning(char *format,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_RCX;\u000a  undefined8 in_RDX;\u000a  undefined8 in_RSI;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list ap;\u000a  undefined4 local_d8;\u000a  undefined4 local_d4;\u000a  void **local_d0;\u000a  undefined *local_c8;\u000a  undefined local_b8 [8];\u000a  undefined8 local_b0;\u000a  undefined8 local_a8;\u000a  undefined8 local_a0;\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_c8 = local_b8;\u000a  local_d0 = &ap[0].overflow_arg_area;\u000a  local_d4 = 0x30;\u000a  local_d8 = 8;\u000a  local_b0 = in_RSI;\u000a  local_a8 = in_RDX;\u000a  local_a0 = in_RCX;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  fprintf(stderr,"%s: ",program_name);\u000a  vfprintf(stderr,format,&local_d8);\u000a  return;\u000a}\u000a\u000a
p759
S'PUSH RBX\nSUB RSP,0xd0\nMOV RBX,RDI\nTEST AL,AL\nJZ 0x00408196\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nMOV qword ptr [RSP + 0x28],RSI\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x8\nMOV RDI,qword ptr [0x0060d2e0]\nMOV RDX,qword ptr [0x0060d2f0]\nMOV ESI,0x40a584\nXOR EAX,EAX\nCALL 0x00401ca0\nMOV RDI,qword ptr [0x0060d2e0]\nMOV RDX,RSP\nMOV RSI,RBX\nCALL 0x00401ef0\nADD RSP,0xd0\nPOP RBX\nRET\n'
p760
S'53\n48 81 ec d0 00 00 00\n48 89 fb\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 89 74 24 28\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 08 00 00 00\n48 8b 3d 04 51 20 00\n48 8b 15 0d 51 20 00\nbe 84 a5 40 00\n31 c0\ne8 b1 9a ff ff\n48 8b 3d ea 50 20 00\n48 89 e2\n48 89 de\ne8 ef 9c ff ff\n48 81 c4 d0 00 00 00\n5b\nc3\n'
p761
S'.text:0000000000408150\n.text:0000000000408151\n.text:0000000000408158\n.text:000000000040815b\n.text:000000000040815d\n.text:000000000040815f\n.text:0000000000408164\n.text:0000000000408169\n.text:000000000040816e\n.text:0000000000408176\n.text:000000000040817e\n.text:0000000000408186\n.text:000000000040818e\n.text:0000000000408196\n.text:000000000040819b\n.text:00000000004081a0\n.text:00000000004081a5\n.text:00000000004081aa\n.text:00000000004081af\n.text:00000000004081b4\n.text:00000000004081b9\n.text:00000000004081c1\n.text:00000000004081c6\n.text:00000000004081ce\n.text:00000000004081d5\n.text:00000000004081dc\n.text:00000000004081e3\n.text:00000000004081e8\n.text:00000000004081ea\n.text:00000000004081ef\n.text:00000000004081f6\n.text:00000000004081f9\n.text:00000000004081fc\n.text:0000000000408201\n.text:0000000000408208\n.text:0000000000408209\n'
p762
tp763
sS'print_name'
p764
(S'\n__stdcall print_name()\n'
p765
V\u000aint print_name(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *in_RDI;\u000a  \u000a  uVar1 = *in_RDI;\u000a  if ((uVar1 & 2) != 0) {\u000a    iVar2 = printf("XID 0x%x",(ulong)in_RDI[4]);\u000a    return iVar2;\u000a  }\u000a  if ((uVar1 & 1) == 0) {\u000a    if ((uVar1 & 4) == 0) {\u000a      iVar2 = printf("unknown name");\u000a      return iVar2;\u000a    }\u000a    iVar2 = printf("index %d",(ulong)in_RDI[6]);\u000a    return iVar2;\u000a  }\u000a  iVar2 = printf("name %s",*(undefined8 *)(in_RDI + 2));\u000a  return iVar2;\u000a}\u000a\u000a
p766
S'MOV EAX,dword ptr [RDI]\nTEST AL,0x2\nJNZ 0x00408a1a\nTEST AL,0x1\nJNZ 0x00408a29\nTEST AL,0x4\nJNZ 0x00408a39\nMOV EDI,0x40b4b8\nXOR EAX,EAX\nJMP 0x00401bb0\nMOV ESI,dword ptr [RDI + 0x10]\nMOV EDI,0x40b49e\nXOR EAX,EAX\nJMP 0x00401bb0\nMOV RSI,qword ptr [RDI + 0x8]\nMOV EDI,0x40b4a7\nXOR EAX,EAX\nJMP 0x00401bb0\nMOV ESI,dword ptr [RDI + 0x18]\nMOV EDI,0x40b4af\nXOR EAX,EAX\nJMP 0x00401bb0\n'
p767
S'8b 07\na8 02\n75 14\na8 01\n75 1f\na8 04\n75 2b\nbf b8 b4 40 00\n31 c0\ne9 96 91 ff ff\n8b 77 10\nbf 9e b4 40 00\n31 c0\ne9 87 91 ff ff\n48 8b 77 08\nbf a7 b4 40 00\n31 c0\ne9 77 91 ff ff\n8b 77 18\nbf af b4 40 00\n31 c0\ne9 68 91 ff ff\n'
p768
S'.text:0000000000408a00\n.text:0000000000408a02\n.text:0000000000408a04\n.text:0000000000408a06\n.text:0000000000408a08\n.text:0000000000408a0a\n.text:0000000000408a0c\n.text:0000000000408a0e\n.text:0000000000408a13\n.text:0000000000408a15\n.text:0000000000408a1a\n.text:0000000000408a1d\n.text:0000000000408a22\n.text:0000000000408a24\n.text:0000000000408a29\n.text:0000000000408a2d\n.text:0000000000408a32\n.text:0000000000408a34\n.text:0000000000408a39\n.text:0000000000408a3c\n.text:0000000000408a41\n.text:0000000000408a43\n'
p769
tp770
sS'print_guid'
p771
(S'\n__stdcall print_guid(uchar * prop)\n'
p772
V\u000avoid print_guid(uchar *prop)\u000a\u000a{\u000a  long lVar1;\u000a  uint uVar2;\u000a  \u000a  putchar(0x7b);\u000a  lVar1 = 0;\u000a  do {\u000a    uVar2 = (uint)prop[lVar1];\u000a    printf("%02X");\u000a    if (((uint)lVar1 < 10) && ((uVar2 >> ((uint)lVar1 & 0x1f) & 1) != 0)) {\u000a      putchar(0x2d);\u000a    }\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 0x10);\u000a  puts("}");\u000a  return;\u000a}\u000a\u000a
p773
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV EDI,0x7b\nCALL 0x00401aa0\nMOV R14D,0x2a8\nXOR EBP,EBP\nNOP dword ptr [RAX]\nMOVZX ESI,byte ptr [RBX + RBP*0x1]\nMOV EDI,0x40b808\nXOR EAX,EAX\nCALL 0x00401bb0\nCMP EBP,0x9\nJA 0x00409805\nBT ESI,EBP\nJNC 0x00409805\nMOV EDI,0x2d\nCALL 0x00401aa0\nINC RBP\nCMP RBP,0x10\nJNZ 0x004097e0\nMOV EDI,0x40b935\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401b00\n'
p774
S'55\n41 56\n53\n48 89 fb\nbf 7b 00 00 00\ne8 cf 82 ff ff\n41 be a8 02 00 00\n31 ed\n0f 1f 80 00 00 00 00\n0f b6 34 2b\nbf 08 b8 40 00\n31 c0\ne8 c0 83 ff ff\n83 fd 09\n77 10\n41 0f a3 ee\n73 0a\nbf 2d 00 00 00\ne8 9b 82 ff ff\n48 ff c5\n48 83 fd 10\n75 d2\nbf 35 b9 40 00\n5b\n41 5e\n5d\ne9 e4 82 ff ff\n'
p775
S'.text:00000000004097c0\n.text:00000000004097c1\n.text:00000000004097c3\n.text:00000000004097c4\n.text:00000000004097c7\n.text:00000000004097cc\n.text:00000000004097d1\n.text:00000000004097d7\n.text:00000000004097d9\n.text:00000000004097e0\n.text:00000000004097e4\n.text:00000000004097e9\n.text:00000000004097eb\n.text:00000000004097f0\n.text:00000000004097f3\n.text:00000000004097f5\n.text:00000000004097f9\n.text:00000000004097fb\n.text:0000000000409800\n.text:0000000000409805\n.text:0000000000409808\n.text:000000000040980c\n.text:000000000040980e\n.text:0000000000409813\n.text:0000000000409814\n.text:0000000000409816\n.text:0000000000409817\n'
p776
tp777
sS'get_crtcs'
p778
(S'\n__stdcall get_crtcs()\n'
p779
V\u000avoid get_crtcs(void)\u000a\u000a{\u000a  transform_t *transform;\u000a  XRRScreenResources *pXVar1;\u000a  crtc_t *pcVar2;\u000a  int iVar3;\u000a  long lVar4;\u000a  long lVar5;\u000a  long lVar6;\u000a  long *__s1;\u000a  long local_68;\u000a  undefined4 local_60;\u000a  undefined4 uStack92;\u000a  undefined4 uStack88;\u000a  undefined4 uStack84;\u000a  undefined4 local_50;\u000a  undefined4 uStack76;\u000a  undefined4 uStack72;\u000a  undefined4 uStack68;\u000a  undefined4 local_40;\u000a  undefined4 uStack60;\u000a  undefined4 uStack56;\u000a  undefined4 uStack52;\u000a  \u000a  num_crtcs = res->ncrtc;\u000a  crtcs = (crtc_t *)calloc((long)num_crtcs,0xe0);\u000a  if (crtcs == (crtc_t *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    fatal("out of memory\u005cn");\u000a  }\u000a  if (0 < res->ncrtc) {\u000a    lVar6 = 0;\u000a    lVar5 = 0;\u000a    do {\u000a      lVar4 = XRRGetCrtcInfo(dpy,res,res->crtcs[lVar5]);\u000a      if (has_1_3 == 1) {\u000a        local_40 = 0;\u000a        uStack60 = 0;\u000a        uStack56 = 0;\u000a        uStack52 = 0;\u000a        local_50 = 0;\u000a        uStack76 = 0;\u000a        uStack72 = 0;\u000a        uStack68 = 0;\u000a        local_60 = 0;\u000a        uStack92 = 0;\u000a        uStack88 = 0;\u000a        uStack84 = 0;\u000a        __s1 = (long *)XRRGetPanning(dpy,res,res->crtcs[lVar5]);\u000a        local_68 = *__s1;\u000a        iVar3 = memcmp(__s1,&local_68,0x38);\u000a        if (iVar3 == 0) {\u000a          free(__s1);\u000a          goto LAB_00406024;\u000a        }\u000a      }\u000a      else {\u000aLAB_00406024:\u000a        __s1 = (long *)0x0;\u000a      }\u000a      set_name_xid((name_t *)((long)&(crtcs->crtc).kind + lVar6),res->crtcs[lVar5]);\u000a      set_name_index((name_t *)((long)&(crtcs->crtc).kind + lVar6));\u000a      pcVar2 = crtcs;\u000a      pXVar1 = res;\u000a      if (lVar4 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        fatal("could not get crtc 0x%lx information\u005cn",res->crtcs[lVar5]);\u000a      }\u000a      *(long *)((long)&crtcs->crtc_info + lVar6) = lVar4;\u000a      *(long **)((long)&pcVar2->panning_info + lVar6) = __s1;\u000a      if (*(long *)(lVar4 + 0x18) == 0) {\u000a        *(undefined8 *)((long)&pcVar2->mode_info + lVar6) = 0;\u000a        *(undefined4 *)((long)&pcVar2->x + lVar6) = 0;\u000a        *(undefined4 *)((long)&pcVar2->y + lVar6) = 0;\u000a        *(undefined2 *)((long)&pcVar2->rotation + lVar6) = 1;\u000a      }\u000a      iVar3 = XRRGetCrtcTransform(dpy,pXVar1->crtcs[lVar5],&local_68);\u000a      transform = (transform_t *)((long)(crtcs->current_transform).transform.matrix + lVar6);\u000a      if ((iVar3 == 0) || (local_68 == 0)) {\u000a        init_transform(transform);\u000a      }\u000a      else {\u000a        set_transform(transform,(XTransform *)(local_68 + 0x40),*(char **)(local_68 + 0x68),\u000a                      *(XFixed **)(local_68 + 0x78));\u000a        XFree(local_68);\u000a      }\u000a      copy_transform((transform_t *)((long)(crtcs->pending_transform).transform.matrix + lVar6),\u000a                     (transform_t *)((long)(crtcs->current_transform).transform.matrix + lVar6));\u000a      lVar5 = lVar5 + 1;\u000a      lVar6 = lVar6 + 0xe0;\u000a    } while (lVar5 < (long)res->ncrtc);\u000a  }\u000a  return;\u000a}\u000a\u000a
p780
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RAX,qword ptr [0x0060d3e8]\nMOVSXD RDI,dword ptr [RAX + 0x10]\nMOV dword ptr [0x0060d3fc],EDI\nMOV ESI,0xe0\nCALL 0x00401c60\nMOV qword ptr [0x0060d400],RAX\nTEST RAX,RAX\nJZ 0x0040614f\nMOV RSI,qword ptr [0x0060d3e8]\nCMP dword ptr [RSI + 0x10],0x0\nJLE 0x0040612c\nLEA R13,[RSP + 0x8]\nXOR EBP,EBP\nMOV R14,RSP\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RAX,qword ptr [RSI + 0x18]\nMOV RDX,qword ptr [RAX + RBX*0x8]\nCALL 0x00401ad0\nMOV R15,RAX\nCMP byte ptr [0x0060d3bc],0x1\nJNZ 0x00406024\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R13 + 0x20],XMM0\nMOVUPS xmmword ptr [R13 + 0x10],XMM0\nMOVUPS xmmword ptr [R13],XMM0\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3e8]\nMOV RAX,qword ptr [RSI + 0x18]\nMOV RDX,qword ptr [RAX + RBX*0x8]\nCALL 0x00401db0\nMOV R12,RAX\nMOV RAX,qword ptr [R12]\nMOV qword ptr [RSP],RAX\nMOV EDX,0x38\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x00401c50\nTEST EAX,EAX\nJNZ 0x00406027\nMOV RDI,R12\nCALL 0x00401a80\nXOR R12D,R12D\nMOV RDI,qword ptr [0x0060d400]\nADD RDI,RBP\nMOV RAX,qword ptr [0x0060d3e8]\nMOV RAX,qword ptr [RAX + 0x18]\nMOV RSI,qword ptr [RAX + RBX*0x8]\nCALL 0x00405eb0\nMOV RDI,qword ptr [0x0060d400]\nADD RDI,RBP\nMOV ESI,EBX\nCALL 0x00407b80\nMOV RAX,qword ptr [0x0060d3e8]\nTEST R15,R15\nJZ 0x0040613b\nMOV RCX,qword ptr [0x0060d400]\nMOV qword ptr [RCX + RBP*0x1 + 0x28],R15\nMOV qword ptr [RCX + RBP*0x1 + 0x38],R12\nCMP qword ptr [R15 + 0x18],0x0\nJNZ 0x0040609e\nMOV qword ptr [RCX + RBP*0x1 + 0x30],0x0\nMOV dword ptr [RCX + RBP*0x1 + 0x40],0x0\nMOV dword ptr [RCX + RBP*0x1 + 0x44],0x0\nMOV word ptr [RCX + RBP*0x1 + 0x48],0x1\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RAX,qword ptr [RAX + 0x18]\nMOV RSI,qword ptr [RAX + RBX*0x8]\nMOV RDX,R14\nCALL 0x00401f90\nMOV RCX,qword ptr [0x0060d400]\nLEA RDI,[RCX + RBP*0x1 + 0x60]\nTEST EAX,EAX\nJZ 0x004060f0\nMOV RAX,qword ptr [RSP]\nTEST RAX,RAX\nJZ 0x004060f0\nMOV RDX,qword ptr [RAX + 0x68]\nMOV RCX,qword ptr [RAX + 0x78]\nMOV R8D,dword ptr [RAX + 0x70]\nLEA RSI,[RAX + 0x40]\nCALL 0x00407b90\nMOV RDI,qword ptr [RSP]\nCALL 0x00401bc0\nJMP 0x004060f5\nCALL 0x00405e60\nMOV RAX,qword ptr [0x0060d400]\nLEA RDI,[0xa0 + RAX + RBP*0x1]\nLEA RSI,[RAX + RBP*0x1 + 0x60]\nCALL 0x00407bf0\nINC RBX\nMOV RSI,qword ptr [0x0060d3e8]\nMOVSXD RAX,dword ptr [RSI + 0x10]\nADD RBP,0xe0\nCMP RBX,RAX\nJL 0x00405fb0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RAX,qword ptr [RAX + 0x18]\nMOV RSI,qword ptr [RAX + RBX*0x8]\nMOV EDI,0x40b25c\nXOR EAX,EAX\nCALL 0x00406410\nMOV EDI,0x40a5a6\nXOR EAX,EAX\nCALL 0x00406410\n'
p781
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 8b 05 83 74 20 00\n48 63 78 10\n89 3d 8d 74 20 00\nbe e0 00 00 00\ne8 e7 bc ff ff\n48 89 05 80 74 20 00\n48 85 c0\n0f 84 c6 01 00 00\n48 8b 35 58 74 20 00\n83 7e 10 00\n0f 8e 92 01 00 00\n4c 8d 6c 24 08\n31 ed\n49 89 e6\n31 db\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 3d f1 73 20 00\n48 8b 46 18\n48 8b 14 d8\ne8 0c bb ff ff\n49 89 c7\n80 3d ee 73 20 00 01\n75 54\n0f 57 c0\n41 0f 11 45 20\n41 0f 11 45 10\n41 0f 11 45 00\n48 8b 3d bf 73 20 00\n48 8b 35 f8 73 20 00\n48 8b 46 18\n48 8b 14 d8\ne8 b3 bd ff ff\n49 89 c4\n49 8b 04 24\n48 89 04 24\nba 38 00 00 00\n4c 89 e7\n4c 89 f6\ne8 38 bc ff ff\n85 c0\n75 0b\n4c 89 e7\ne8 5c ba ff ff\n45 31 e4\n48 8b 3d d2 73 20 00\n48 01 ef\n48 8b 05 b0 73 20 00\n48 8b 40 18\n48 8b 34 d8\ne8 6b fe ff ff\n48 8b 3d b4 73 20 00\n48 01 ef\n89 de\ne8 2a 1b 00 00\n48 8b 05 8b 73 20 00\n4d 85 ff\n0f 84 d5 00 00 00\n48 8b 0d 93 73 20 00\n4c 89 7c 29 28\n4c 89 64 29 38\n49 83 7f 18 00\n75 20\n48 c7 44 29 30 00 00 00 00\nc7 44 29 40 00 00 00 00\nc7 44 29 44 00 00 00 00\n66 c7 44 29 48 01 00\n48 8b 3d 03 73 20 00\n48 8b 40 18\n48 8b 34 d8\n4c 89 f2\ne8 db be ff ff\n48 8b 0d 44 73 20 00\n48 8d 7c 29 60\n85 c0\n74 2b\n48 8b 04 24\n48 85 c0\n74 22\n48 8b 50 68\n48 8b 48 78\n44 8b 40 70\n48 8d 70 40\ne8 ad 1a 00 00\n48 8b 3c 24\ne8 d4 ba ff ff\neb 07\ne8 6b fd ff ff\n48 8b 05 04 73 20 00\n48 8d bc 28 a0 00 00 00\n48 8d 74 28 60\ne8 e2 1a 00 00\n48 ff c3\n48 8b 35 d0 72 20 00\n48 63 46 10\n48 81 c5 e0 00 00 00\n48 39 c3\n0f 8c 84 fe ff ff\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 40 18\n48 8b 34 d8\nbf 5c b2 40 00\n31 c0\ne8 c1 02 00 00\nbf a6 a5 40 00\n31 c0\ne8 b5 02 00 00\n'
p782
S'.text:0000000000405f50\n.text:0000000000405f51\n.text:0000000000405f53\n.text:0000000000405f55\n.text:0000000000405f57\n.text:0000000000405f59\n.text:0000000000405f5a\n.text:0000000000405f5e\n.text:0000000000405f65\n.text:0000000000405f69\n.text:0000000000405f6f\n.text:0000000000405f74\n.text:0000000000405f79\n.text:0000000000405f80\n.text:0000000000405f83\n.text:0000000000405f89\n.text:0000000000405f90\n.text:0000000000405f94\n.text:0000000000405f9a\n.text:0000000000405f9f\n.text:0000000000405fa1\n.text:0000000000405fa4\n.text:0000000000405fa6\n.text:0000000000405fb0\n.text:0000000000405fb7\n.text:0000000000405fbb\n.text:0000000000405fbf\n.text:0000000000405fc4\n.text:0000000000405fc7\n.text:0000000000405fce\n.text:0000000000405fd0\n.text:0000000000405fd3\n.text:0000000000405fd8\n.text:0000000000405fdd\n.text:0000000000405fe2\n.text:0000000000405fe9\n.text:0000000000405ff0\n.text:0000000000405ff4\n.text:0000000000405ff8\n.text:0000000000405ffd\n.text:0000000000406000\n.text:0000000000406004\n.text:0000000000406008\n.text:000000000040600d\n.text:0000000000406010\n.text:0000000000406013\n.text:0000000000406018\n.text:000000000040601a\n.text:000000000040601c\n.text:000000000040601f\n.text:0000000000406024\n.text:0000000000406027\n.text:000000000040602e\n.text:0000000000406031\n.text:0000000000406038\n.text:000000000040603c\n.text:0000000000406040\n.text:0000000000406045\n.text:000000000040604c\n.text:000000000040604f\n.text:0000000000406051\n.text:0000000000406056\n.text:000000000040605d\n.text:0000000000406060\n.text:0000000000406066\n.text:000000000040606d\n.text:0000000000406072\n.text:0000000000406077\n.text:000000000040607c\n.text:000000000040607e\n.text:0000000000406087\n.text:000000000040608f\n.text:0000000000406097\n.text:000000000040609e\n.text:00000000004060a5\n.text:00000000004060a9\n.text:00000000004060ad\n.text:00000000004060b0\n.text:00000000004060b5\n.text:00000000004060bc\n.text:00000000004060c1\n.text:00000000004060c3\n.text:00000000004060c5\n.text:00000000004060c9\n.text:00000000004060cc\n.text:00000000004060ce\n.text:00000000004060d2\n.text:00000000004060d6\n.text:00000000004060da\n.text:00000000004060de\n.text:00000000004060e3\n.text:00000000004060e7\n.text:00000000004060ec\n.text:00000000004060f0\n.text:00000000004060f5\n.text:00000000004060fc\n.text:0000000000406104\n.text:0000000000406109\n.text:000000000040610e\n.text:0000000000406111\n.text:0000000000406118\n.text:000000000040611c\n.text:0000000000406123\n.text:0000000000406126\n.text:000000000040612c\n.text:0000000000406130\n.text:0000000000406131\n.text:0000000000406133\n.text:0000000000406135\n.text:0000000000406137\n.text:0000000000406139\n.text:000000000040613a\n.text:000000000040613b\n.text:000000000040613f\n.text:0000000000406143\n.text:0000000000406148\n.text:000000000040614a\n.text:000000000040614f\n.text:0000000000406154\n.text:0000000000406156\n'
p783
tp784
sS'strcasecmp'
p785
(S'\n__stdcall strcasecmp(char * __s1, char * __s2)\n'
p786
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcasecmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcasecmp_0060d030)();\u000a  return iVar1;\u000a}\u000a\u000a
p787
S'JMP qword ptr [0x0060d030]\n'
p788
S'ff 25 7a b5 20 00\n'
p789
S'.plt:0000000000401ab0\n'
p790
tp791
sS'find_output_by_name'
p792
(S'\n__stdcall find_output_by_name(char * name)\n'
p793
V\u000aoutput_t * find_output_by_name(char *name)\u000a\u000a{\u000a  output_t *poVar1;\u000a  name_t output_name;\u000a  name_t local_30;\u000a  \u000a  init_name(&local_30);\u000a  set_name_string(&local_30,name);\u000a  poVar1 = find_output(&local_30);\u000a  return poVar1;\u000a}\u000a\u000a
p794
S'PUSH R14\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00407b60\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00407b70\nMOV RDI,R14\nCALL 0x004064d0\nADD RSP,0x28\nPOP RBX\nPOP R14\nRET\n'
p795
S'41 56\n53\n48 83 ec 28\n48 89 fb\n4c 8d 74 24 08\n4c 89 f7\ne8 19 1e 00 00\n4c 89 f7\n48 89 de\ne8 1e 1e 00 00\n4c 89 f7\ne8 76 07 00 00\n48 83 c4 28\n5b\n41 5e\nc3\n'
p796
S'.text:0000000000405d30\n.text:0000000000405d32\n.text:0000000000405d33\n.text:0000000000405d37\n.text:0000000000405d3a\n.text:0000000000405d3f\n.text:0000000000405d42\n.text:0000000000405d47\n.text:0000000000405d4a\n.text:0000000000405d4d\n.text:0000000000405d52\n.text:0000000000405d55\n.text:0000000000405d5a\n.text:0000000000405d5e\n.text:0000000000405d5f\n.text:0000000000405d61\n'
p797
tp798
sS'get_screen'
p799
(S'\n__stdcall get_screen()\n'
p800
V\u000avoid get_screen(int iParm1)\u000a\u000a{\u000a  if (has_1_2 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    fatal("Server RandR version before 1.2\u005cn");\u000a  }\u000a  if (res == (XRRScreenResources *)0x0) {\u000a    XRRGetScreenSizeRange(dpy,root,&minWidth,&minHeight,&maxWidth,&maxHeight);\u000a    if (iParm1 == 0) {\u000a      res = (XRRScreenResources *)XRRGetScreenResources(dpy,root);\u000a    }\u000a    else {\u000a      res = (XRRScreenResources *)XRRGetScreenResourcesCurrent();\u000a    }\u000a    if (res == (XRRScreenResources *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      fatal("could not get screen resources");\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p801
S'PUSH RBX\nMOV EBX,EDI\nMOV AL,byte ptr [0x0060d3b8]\nTEST AL,AL\nJZ 0x00405f2c\nCMP qword ptr [0x0060d3e8],0x0\nJNZ 0x00405f2a\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nMOV EDX,0x60d3d8\nMOV ECX,0x60d3dc\nMOV R8D,0x60d3e0\nMOV R9D,0x60d3e4\nCALL 0x00401e60\nTEST EBX,EBX\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nJZ 0x00405f19\nCALL 0x00401de0\nJMP 0x00405f1e\nCALL 0x00401be0\nMOV qword ptr [0x0060d3e8],RAX\nTEST RAX,RAX\nJZ 0x00405f38\nPOP RBX\nRET\nMOV EDI,0x40b21c\nXOR EAX,EAX\nCALL 0x00406410\nMOV EDI,0x40b23d\nXOR EAX,EAX\nCALL 0x00406410\n'
p802
S'53\n89 fb\n8a 05 ef 74 20 00\n84 c0\n74 5f\n48 83 3d 13 75 20 00 00\n75 53\n48 8b 3d ca 74 20 00\n48 8b 35 cb 74 20 00\nba d8 d3 60 00\nb9 dc d3 60 00\n41 b8 e0 d3 60 00\n41 b9 e4 d3 60 00\ne8 60 bf ff ff\n85 db\n48 8b 3d 9f 74 20 00\n48 8b 35 a0 74 20 00\n74 07\ne8 c9 be ff ff\neb 05\ne8 c2 bc ff ff\n48 89 05 c3 74 20 00\n48 85 c0\n74 0e\n5b\nc3\nbf 1c b2 40 00\n31 c0\ne8 d8 04 00 00\nbf 3d b2 40 00\n31 c0\ne8 cc 04 00 00\n'
p803
S'.text:0000000000405ec0\n.text:0000000000405ec1\n.text:0000000000405ec3\n.text:0000000000405ec9\n.text:0000000000405ecb\n.text:0000000000405ecd\n.text:0000000000405ed5\n.text:0000000000405ed7\n.text:0000000000405ede\n.text:0000000000405ee5\n.text:0000000000405eea\n.text:0000000000405eef\n.text:0000000000405ef5\n.text:0000000000405efb\n.text:0000000000405f00\n.text:0000000000405f02\n.text:0000000000405f09\n.text:0000000000405f10\n.text:0000000000405f12\n.text:0000000000405f17\n.text:0000000000405f19\n.text:0000000000405f1e\n.text:0000000000405f25\n.text:0000000000405f28\n.text:0000000000405f2a\n.text:0000000000405f2b\n.text:0000000000405f2c\n.text:0000000000405f31\n.text:0000000000405f33\n.text:0000000000405f38\n.text:0000000000405f3d\n.text:0000000000405f3f\n'
p804
tp805
sS'strcmp'
p806
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p807
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060d110)();\u000a  return iVar1;\u000a}\u000a\u000a
p808
S'JMP qword ptr [0x0060d110]\n'
p809
S'ff 25 9a b4 20 00\n'
p810
S'.plt:0000000000401c70\n'
p811
tp812
sS'set_primary'
p813
(S'\n__stdcall set_primary()\n'
p814
V\u000avoid set_primary(void)\u000a\u000a{\u000a  _output *p_Var1;\u000a  \u000a  if (no_primary == 0) {\u000a    p_Var1 = (_output *)all_outputs;\u000a    if (all_outputs != (output_t *)0x0) {\u000a      do {\u000a        if (((*(byte *)((long)&((output_t *)p_Var1)->changes + 1) & 0x10) != 0) &&\u000a           (((output_t *)p_Var1)->primary != 0)) {\u000a          XRRSetOutputPrimary(dpy,root,(((output_t *)p_Var1)->output).xid);\u000a        }\u000a        p_Var1 = ((output_t *)p_Var1)->next;\u000a      } while (p_Var1 != (_output *)0x0);\u000a    }\u000a    return;\u000a  }\u000a  XRRSetOutputPrimary(dpy,root,0);\u000a  return;\u000a}\u000a\u000a
p815
S'MOV AL,byte ptr [0x0060d308]\nTEST AL,AL\nJZ 0x004094ef\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nXOR EDX,EDX\nJMP 0x00401b80\nPUSH RBX\nMOV RBX,qword ptr [0x0060d3c8]\nTEST RBX,RBX\nJNZ 0x00409508\nJMP 0x00409530\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nJZ 0x00409530\nTEST byte ptr [RBX + 0x9],0x10\nJZ 0x00409500\nCMP dword ptr [0x178 + RBX],0x0\nJZ 0x00409500\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nMOV RDX,qword ptr [RBX + 0x28]\nCALL 0x00401b80\nJMP 0x00409500\nPOP RBX\nRET\n'
p816
S'8a 05 32 3e 20 00\n84 c0\n74 15\n48 8b 3d c7 3e 20 00\n48 8b 35 c8 3e 20 00\n31 d2\ne9 91 86 ff ff\n53\n48 8b 1d d1 3e 20 00\n48 85 db\n75 0c\neb 32\n48 8b 1b\n48 85 db\n74 28\nf6 43 09 10\n74 f2\n83 bb 78 01 00 00 00\n74 e9\n48 8b 3d 8a 3e 20 00\n48 8b 35 8b 3e 20 00\n48 8b 53 28\ne8 52 86 ff ff\neb d0\n5b\nc3\n'
p817
S'.text:00000000004094d0\n.text:00000000004094d6\n.text:00000000004094d8\n.text:00000000004094da\n.text:00000000004094e1\n.text:00000000004094e8\n.text:00000000004094ea\n.text:00000000004094ef\n.text:00000000004094f0\n.text:00000000004094f7\n.text:00000000004094fa\n.text:00000000004094fc\n.text:0000000000409500\n.text:0000000000409503\n.text:0000000000409506\n.text:0000000000409508\n.text:000000000040950c\n.text:000000000040950e\n.text:0000000000409515\n.text:0000000000409517\n.text:000000000040951e\n.text:0000000000409525\n.text:0000000000409529\n.text:000000000040952e\n.text:0000000000409530\n.text:0000000000409531\n'
p818
tp819
sS'XRRSetMonitor'
p820
(S'\n__stdcall XRRSetMonitor()\n'
p821
V\u000avoid XRRSetMonitor(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRSetMonitor_0060d0c0)();\u000a  return;\u000a}\u000a\u000a
p822
S'JMP qword ptr [0x0060d0c0]\n'
p823
S'ff 25 ea b4 20 00\n'
p824
S'.plt:0000000000401bd0\n'
p825
tp826
sS'XRRGetOutputPrimary'
p827
(S'\n__stdcall XRRGetOutputPrimary()\n'
p828
V\u000avoid XRRGetOutputPrimary(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetOutputPrimary_0060d130)();\u000a  return;\u000a}\u000a\u000a
p829
S'JMP qword ptr [0x0060d130]\n'
p830
S'ff 25 7a b4 20 00\n'
p831
S'.plt:0000000000401cb0\n'
p832
tp833
sS'print_output_property_value'
p834
(S'\n__stdcall print_output_property_value(Atom value_type, void * value_bytes)\n'
p835
V\u000avoid print_output_property_value(Atom value_type,void *value_bytes)\u000a\u000a{\u000a  long lVar1;\u000a  undefined8 *in_RDX;\u000a  uint uVar2;\u000a  undefined8 uVar3;\u000a  int iVar4;\u000a  char *__format;\u000a  \u000a  iVar4 = (int)value_type;\u000a  if ((iVar4 == 0x20) && (value_bytes == (void *)0x4)) {\u000a    lVar1 = XGetAtomName(dpy,*in_RDX);\u000a    if (lVar1 != 0) {\u000a      printf("%s",lVar1);\u000a      XFree(lVar1);\u000a      return;\u000a    }\u000aLAB_00407947:\u000a    putchar(0x3f);\u000a    return;\u000a  }\u000a  if (value_bytes == (void *)0x6) {\u000a    if (iVar4 == 0x10) {\u000a      _uVar2 = (ulong)*(ushort *)in_RDX;\u000a    }\u000a    else {\u000a      if (iVar4 != 8) {\u000a        if (iVar4 == 0x20) {\u000a          uVar3 = *in_RDX;\u000a          __format = "%lu";\u000aLAB_0040793f:\u000a          printf(__format,uVar3);\u000a          return;\u000a        }\u000a        goto LAB_00407947;\u000a      }\u000a      _uVar2 = (ulong)*(byte *)in_RDX;\u000a    }\u000a    __format = "%u";\u000a  }\u000a  else {\u000a    if (value_bytes != (void *)0x13) goto LAB_00407947;\u000a    if (iVar4 == 0x10) {\u000a      uVar2 = SEXT24((short)*(ushort *)in_RDX);\u000a    }\u000a    else {\u000a      if (iVar4 != 8) {\u000a        if (iVar4 == 0x20) {\u000a          uVar3 = *in_RDX;\u000a          __format = "%ld";\u000a          goto LAB_0040793f;\u000a        }\u000a        goto LAB_00407947;\u000a      }\u000a      uVar2 = SEXT14((char)*(byte *)in_RDX);\u000a    }\u000a    _uVar2 = (ulong)uVar2;\u000a    __format = "%d";\u000a  }\u000a  printf(__format,_uVar2);\u000a  return;\u000a}\u000a\u000a
p836
S'PUSH RBX\nCMP EDI,0x20\nJNZ 0x004078df\nCMP RSI,0x4\nJNZ 0x004078df\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [RDX]\nCALL 0x00401df0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00407947\nMOV EDI,0x40aa5b\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00401bb0\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401bc0\nCMP RSI,0x6\nJZ 0x004078fa\nCMP RSI,0x13\nJNZ 0x00407947\nCMP EDI,0x10\nJZ 0x00407909\nCMP EDI,0x8\nJNZ 0x00407913\nMOVSX ESI,byte ptr [RDX]\nJMP 0x0040790c\nCMP EDI,0x10\nJZ 0x00407922\nCMP EDI,0x8\nJNZ 0x00407932\nMOVZX ESI,byte ptr [RDX]\nJMP 0x00407925\nMOVSX ESI,word ptr [RDX]\nMOV EDI,0x40b4b5\nJMP 0x0040792a\nCMP EDI,0x20\nJNZ 0x00407947\nMOV RSI,qword ptr [RDX]\nMOV EDI,0x40b812\nJMP 0x0040793f\nMOVZX ESI,word ptr [RDX]\nMOV EDI,0x40b816\nXOR EAX,EAX\nPOP RBX\nJMP 0x00401bb0\nCMP EDI,0x20\nJNZ 0x00407947\nMOV RSI,qword ptr [RDX]\nMOV EDI,0x40b819\nXOR EAX,EAX\nPOP RBX\nJMP 0x00401bb0\nMOV EDI,0x3f\nPOP RBX\nJMP 0x00401aa0\n'
p837
S'53\n83 ff 20\n75 39\n48 83 fe 04\n75 33\n48 8b 3d f5 5a 20 00\n48 8b 32\ne8 35 a5 ff ff\n48 89 c3\n48 85 db\n0f 84 80 00 00 00\nbf 5b aa 40 00\n31 c0\n48 89 de\ne8 da a2 ff ff\n48 89 df\n5b\ne9 e1 a2 ff ff\n48 83 fe 06\n74 15\n48 83 fe 13\n75 5c\n83 ff 10\n74 19\n83 ff 08\n75 1e\n0f be 32\neb 12\n83 ff 10\n74 23\n83 ff 08\n75 2e\n0f b6 32\neb 1c\n0f bf 32\nbf b5 b4 40 00\neb 17\n83 ff 20\n75 2f\n48 8b 32\nbf 12 b8 40 00\neb 1d\n0f b7 32\nbf 16 b8 40 00\n31 c0\n5b\ne9 7e a2 ff ff\n83 ff 20\n75 10\n48 8b 32\nbf 19 b8 40 00\n31 c0\n5b\ne9 69 a2 ff ff\nbf 3f 00 00 00\n5b\ne9 4e a1 ff ff\n'
p838
S'.text:00000000004078a0\n.text:00000000004078a1\n.text:00000000004078a4\n.text:00000000004078a6\n.text:00000000004078aa\n.text:00000000004078ac\n.text:00000000004078b3\n.text:00000000004078b6\n.text:00000000004078bb\n.text:00000000004078be\n.text:00000000004078c1\n.text:00000000004078c7\n.text:00000000004078cc\n.text:00000000004078ce\n.text:00000000004078d1\n.text:00000000004078d6\n.text:00000000004078d9\n.text:00000000004078da\n.text:00000000004078df\n.text:00000000004078e3\n.text:00000000004078e5\n.text:00000000004078e9\n.text:00000000004078eb\n.text:00000000004078ee\n.text:00000000004078f0\n.text:00000000004078f3\n.text:00000000004078f5\n.text:00000000004078f8\n.text:00000000004078fa\n.text:00000000004078fd\n.text:00000000004078ff\n.text:0000000000407902\n.text:0000000000407904\n.text:0000000000407907\n.text:0000000000407909\n.text:000000000040790c\n.text:0000000000407911\n.text:0000000000407913\n.text:0000000000407916\n.text:0000000000407918\n.text:000000000040791b\n.text:0000000000407920\n.text:0000000000407922\n.text:0000000000407925\n.text:000000000040792a\n.text:000000000040792c\n.text:000000000040792d\n.text:0000000000407932\n.text:0000000000407935\n.text:0000000000407937\n.text:000000000040793a\n.text:000000000040793f\n.text:0000000000407941\n.text:0000000000407942\n.text:0000000000407947\n.text:000000000040794c\n.text:000000000040794d\n'
p839
tp840
sS'XRRAllocGamma'
p841
(S'\n__stdcall XRRAllocGamma()\n'
p842
V\u000avoid XRRAllocGamma(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRAllocGamma_0060d0e8)();\u000a  return;\u000a}\u000a\u000a
p843
S'JMP qword ptr [0x0060d0e8]\n'
p844
S'ff 25 c2 b4 20 00\n'
p845
S'.plt:0000000000401c20\n'
p846
tp847
sS'FUN_00401a70'
p848
(S'\n__stdcall FUN_00401a70()\n'
p849
V\u000avoid FUN_00401a70(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060d010)();\u000a  return;\u000a}\u000a\u000a
p850
S'PUSH qword ptr [0x0060d008]\nJMP qword ptr [0x0060d010]\n'
p851
S'ff 35 92 b5 20 00\nff 25 94 b5 20 00\n'
p852
S'.plt:0000000000401a70\n.plt:0000000000401a76\n'
p853
tp854
sS'XRRGetScreenResourcesCurrent'
p855
(S'\n__stdcall XRRGetScreenResourcesCurrent()\n'
p856
V\u000avoid XRRGetScreenResourcesCurrent(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetScreenResourcesCurrent_0060d1c8)();\u000a  return;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x0060d1c8]\n'
p858
S'ff 25 e2 b3 20 00\n'
p859
S'.plt:0000000000401de0\n'
p860
tp861
sS'strtok'
p862
(S'\n__stdcall strtok(char * __s, char * __delim)\n'
p863
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strtok(char *__s,char *__delim)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strtok_0060d238)();\u000a  return pcVar1;\u000a}\u000a\u000a
p864
S'JMP qword ptr [0x0060d238]\n'
p865
S'ff 25 72 b3 20 00\n'
p866
S'.plt:0000000000401ec0\n'
p867
tp868
sS'revert'
p869
(S'\n__stdcall revert()\n'
p870
V\u000avoid revert(void)\u000a\u000a{\u000a  long lVar1;\u000a  long lVar2;\u000a  \u000a  if (0 < res->ncrtc) {\u000a    lVar2 = 0;\u000a    lVar1 = 0;\u000a    do {\u000a      crtc_disable((crtc_t *)((long)&(crtcs->crtc).kind + lVar2));\u000a      lVar1 = lVar1 + 1;\u000a      lVar2 = lVar2 + 0xe0;\u000a    } while (lVar1 < (long)res->ncrtc);\u000a  }\u000a  screen_revert();\u000a  if (0 < res->ncrtc) {\u000a    lVar1 = 0;\u000a    do {\u000a      crtc_revert();\u000a      lVar1 = lVar1 + 1;\u000a    } while (lVar1 < (long)res->ncrtc);\u000a  }\u000a  return;\u000a}\u000a\u000a
p871
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RAX,qword ptr [0x0060d3e8]\nCMP dword ptr [RAX + 0x10],0x0\nJLE 0x00409589\nXOR R14D,R14D\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [0x0060d400]\nADD RDI,R14\nCALL 0x004091f0\nINC RBX\nMOV RAX,qword ptr [0x0060d3e8]\nMOVSXD RAX,dword ptr [RAX + 0x10]\nADD R14,0xe0\nCMP RBX,RAX\nJL 0x00409560\nCALL 0x004095e0\nMOV RAX,qword ptr [0x0060d3e8]\nCMP dword ptr [RAX + 0x10],0x0\nJLE 0x004095c9\nXOR R14D,R14D\nXOR EBX,EBX\nMOV RDI,qword ptr [0x0060d400]\nADD RDI,R14\nCALL 0x00409650\nINC RBX\nMOV RAX,qword ptr [0x0060d3e8]\nMOVSXD RAX,dword ptr [RAX + 0x10]\nADD R14,0xe0\nCMP RBX,RAX\nJL 0x004095a0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p872
S'41 56\n53\n50\n48 8b 05 9d 3e 20 00\n83 78 10 00\n7e 38\n45 31 f6\n31 db\n66 2e 0f 1f 84 00 00 00 00 00\n48 8b 3d 99 3e 20 00\n4c 01 f7\ne8 81 fc ff ff\n48 ff c3\n48 8b 05 6f 3e 20 00\n48 63 40 10\n49 81 c6 e0 00 00 00\n48 39 c3\n7c d7\ne8 52 00 00 00\n48 8b 05 53 3e 20 00\n83 78 10 00\n7e 2e\n45 31 f6\n31 db\n48 8b 3d 59 3e 20 00\n4c 01 f7\ne8 a1 00 00 00\n48 ff c3\n48 8b 05 2f 3e 20 00\n48 63 40 10\n49 81 c6 e0 00 00 00\n48 39 c3\n7c d7\n48 83 c4 08\n5b\n41 5e\nc3\n'
p873
S'.text:0000000000409540\n.text:0000000000409542\n.text:0000000000409543\n.text:0000000000409544\n.text:000000000040954b\n.text:000000000040954f\n.text:0000000000409551\n.text:0000000000409554\n.text:0000000000409556\n.text:0000000000409560\n.text:0000000000409567\n.text:000000000040956a\n.text:000000000040956f\n.text:0000000000409572\n.text:0000000000409579\n.text:000000000040957d\n.text:0000000000409584\n.text:0000000000409587\n.text:0000000000409589\n.text:000000000040958e\n.text:0000000000409595\n.text:0000000000409599\n.text:000000000040959b\n.text:000000000040959e\n.text:00000000004095a0\n.text:00000000004095a7\n.text:00000000004095aa\n.text:00000000004095af\n.text:00000000004095b2\n.text:00000000004095b9\n.text:00000000004095bd\n.text:00000000004095c4\n.text:00000000004095c7\n.text:00000000004095c9\n.text:00000000004095cd\n.text:00000000004095ce\n.text:00000000004095d0\n'
p874
tp875
sS'find_output_by_xid'
p876
(S'\n__stdcall find_output_by_xid(RROutput output)\n'
p877
V\u000aoutput_t * find_output_by_xid(RROutput output)\u000a\u000a{\u000a  output_t *poVar1;\u000a  name_t output_name;\u000a  name_t local_30;\u000a  \u000a  init_name(&local_30);\u000a  set_name_xid(&local_30,output);\u000a  poVar1 = find_output(&local_30);\u000a  return poVar1;\u000a}\u000a\u000a
p878
S'PUSH R14\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00407b60\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00405eb0\nMOV RDI,R14\nCALL 0x004064d0\nADD RSP,0x28\nPOP RBX\nPOP R14\nRET\n'
p879
S'41 56\n53\n48 83 ec 28\n48 89 fb\n4c 8d 74 24 08\n4c 89 f7\ne8 59 04 00 00\n4c 89 f7\n48 89 de\ne8 9e e7 ff ff\n4c 89 f7\ne8 b6 ed ff ff\n48 83 c4 28\n5b\n41 5e\nc3\n'
p880
S'.text:00000000004076f0\n.text:00000000004076f2\n.text:00000000004076f3\n.text:00000000004076f7\n.text:00000000004076fa\n.text:00000000004076ff\n.text:0000000000407702\n.text:0000000000407707\n.text:000000000040770a\n.text:000000000040770d\n.text:0000000000407712\n.text:0000000000407715\n.text:000000000040771a\n.text:000000000040771e\n.text:000000000040771f\n.text:0000000000407721\n'
p881
tp882
sS'strtod'
p883
(S'\n__stdcall strtod(char * __nptr, char * * __endptr)\n'
p884
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adouble strtod(char *__nptr,char **__endptr)\u000a\u000a{\u000a  double dVar1;\u000a  \u000a  dVar1 = (double)(*(code *)PTR_strtod_0060d068)();\u000a  return dVar1;\u000a}\u000a\u000a
p885
S'JMP qword ptr [0x0060d068]\n'
p886
S'ff 25 42 b5 20 00\n'
p887
S'.plt:0000000000401b20\n'
p888
tp889
sS'XSelectInput'
p890
(S'\n__stdcall XSelectInput()\n'
p891
V\u000avoid XSelectInput(void)\u000a\u000a{\u000a  (*(code *)PTR_XSelectInput_0060d1e0)();\u000a  return;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x0060d1e0]\n'
p893
S'ff 25 ca b3 20 00\n'
p894
S'.plt:0000000000401e10\n'
p895
tp896
sS'mode_hsync'
p897
(S'\n__stdcall mode_hsync(XRRModeInfo * mode_info)\n'
p898
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000adouble mode_hsync(XRRModeInfo *mode_info)\u000a\u000a{\u000a  undefined auVar1 [12];\u000a  undefined auVar2 [16];\u000a  \u000a  if (mode_info->hTotal != 0) {\u000a    auVar1 = ZEXT812(mode_info->dotClock) & (undefined  [12])0xffffffffffffffff;\u000a    auVar2 = subpd(CONCAT88(SUB168(CONCAT412(DAT_00409964,auVar1 | (undefined  [12])0x0 << 0x40) >>\u000a                                   0x40,0),CONCAT44(DAT_00409960,SUB124(auVar1,0))),_DAT_00409970);\u000a    auVar2 = addpd(CONCAT412(SUB164(auVar2 >> 0x20,0),\u000a                             CONCAT48(SUB164(auVar2,0),SUB168(auVar2 >> 0x40,0))),auVar2);\u000a    return SUB168(auVar2,0) / (double)(ulong)mode_info->hTotal;\u000a  }\u000a  return 0.00000000;\u000a}\u000a\u000a
p899
S'MOV EAX,dword ptr [RDI + 0x20]\nTEST EAX,EAX\nJZ 0x00409854\nMOVQ XMM1,qword ptr [RDI + 0x10]\nPUNPCKLDQ XMM1,xmmword ptr [0x00409960]\nSUBPD XMM1,xmmword ptr [0x00409970]\nPSHUFD XMM0,XMM1,0x4e\nADDPD XMM0,XMM1\nMOV EAX,EAX\nXORPS XMM1,XMM1\nCVTSI2SD XMM1,RAX\nDIVSD XMM0,XMM1\nRET\nXORPS XMM0,XMM0\nRET\n'
p900
S'8b 47 20\n85 c0\n74 2d\nf3 0f 7e 4f 10\n66 0f 62 0d 2c 01 00 00\n66 0f 5c 0d 34 01 00 00\n66 0f 70 c1 4e\n66 0f 58 c1\n89 c0\n0f 57 c9\nf2 48 0f 2a c8\nf2 0f 5e c1\nc3\n0f 57 c0\nc3\n'
p901
S'.text:0000000000409820\n.text:0000000000409823\n.text:0000000000409825\n.text:0000000000409827\n.text:000000000040982c\n.text:0000000000409834\n.text:000000000040983c\n.text:0000000000409841\n.text:0000000000409845\n.text:0000000000409847\n.text:000000000040984a\n.text:000000000040984f\n.text:0000000000409853\n.text:0000000000409854\n.text:0000000000409857\n'
p902
tp903
sS'crtc_disable'
p904
(S'\n__stdcall crtc_disable(crtc_t * crtc)\n'
p905
V\u000aint crtc_disable(crtc_t *crtc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (verbose == 1) {\u000a    printf("crtc %d: disable\u005cn",(ulong)(uint)(crtc->crtc).index);\u000a  }\u000a  if (dryrun != 0) {\u000a    return 0;\u000a  }\u000a  iVar1 = XRRSetCrtcConfig(dpy,res,(crtc->crtc).xid,0,0,0,0,1,0,0);\u000a  return iVar1;\u000a}\u000a\u000a
p906
S'PUSH RBX\nMOV RBX,RDI\nCMP byte ptr [0x0060d2f8],0x1\nJNZ 0x0040920c\nMOV ESI,dword ptr [RBX + 0x18]\nMOV EDI,0x40b6c9\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV AL,byte ptr [0x0060d2fc]\nTEST AL,AL\nJZ 0x0040921a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3e8]\nMOV RDX,qword ptr [RBX + 0x10]\nMOV ECX,0x0\nMOV R8D,0x0\nMOV R9D,0x0\nPUSH 0x0\nPUSH 0x0\nPUSH 0x1\nPUSH 0x0\nCALL 0x00401d30\nADD RSP,0x20\nPOP RBX\nRET\n'
p907
S'53\n48 89 fb\n80 3d fd 40 20 00 01\n75 0f\n8b 73 18\nbf c9 b6 40 00\n31 c0\ne8 a4 89 ff ff\n8a 05 ea 40 20 00\n84 c0\n74 04\n31 c0\n5b\nc3\n48 8b 3d 87 41 20 00\n48 8b 35 c0 41 20 00\n48 8b 53 10\nb9 00 00 00 00\n41 b8 00 00 00 00\n41 b9 00 00 00 00\n6a 00\n6a 00\n6a 01\n6a 00\ne8 e6 8a ff ff\n48 83 c4 20\n5b\nc3\n'
p908
S'.text:00000000004091f0\n.text:00000000004091f1\n.text:00000000004091f4\n.text:00000000004091fb\n.text:00000000004091fd\n.text:0000000000409200\n.text:0000000000409205\n.text:0000000000409207\n.text:000000000040920c\n.text:0000000000409212\n.text:0000000000409214\n.text:0000000000409216\n.text:0000000000409218\n.text:0000000000409219\n.text:000000000040921a\n.text:0000000000409221\n.text:0000000000409228\n.text:000000000040922c\n.text:0000000000409231\n.text:0000000000409237\n.text:000000000040923d\n.text:000000000040923f\n.text:0000000000409241\n.text:0000000000409243\n.text:0000000000409245\n.text:000000000040924a\n.text:000000000040924e\n.text:000000000040924f\n'
p909
tp910
sS'__libc_csu_fini'
p911
(S'\n__stdcall __libc_csu_fini()\n'
p912
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p913
S'RET\n'
p914
S'f3 c3\n'
p915
S'.text:00000000004098d0\n'
p916
tp917
sS'argerr'
p918
(S'\n__stdcall argerr(char * format)\n'
p919
V\u000avoid argerr(char *format,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_RCX;\u000a  undefined8 in_RDX;\u000a  undefined8 in_RSI;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list ap;\u000a  undefined4 local_d8;\u000a  undefined4 local_d4;\u000a  void **local_d0;\u000a  undefined *local_c8;\u000a  undefined local_b8 [8];\u000a  undefined8 local_b0;\u000a  undefined8 local_a8;\u000a  undefined8 local_a0;\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_c8 = local_b8;\u000a  local_d0 = &ap[0].overflow_arg_area;\u000a  local_d4 = 0x30;\u000a  local_d8 = 8;\u000a  local_b0 = in_RSI;\u000a  local_a8 = in_RDX;\u000a  local_a0 = in_RCX;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  fprintf(stderr,"%s: ",program_name);\u000a  vfprintf(stderr,format,&local_d8);\u000a  fprintf(stderr,"Try \u005c'%s --help\u005c' for more information.\u005cn",program_name);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p920
S'PUSH RBX\nSUB RSP,0xd0\nMOV RBX,RDI\nTEST AL,AL\nJZ 0x00405c06\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nMOV qword ptr [RSP + 0x28],RSI\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x8\nMOV RDI,qword ptr [0x0060d2e0]\nMOV RDX,qword ptr [0x0060d2f0]\nMOV ESI,0x40a584\nXOR EAX,EAX\nCALL 0x00401ca0\nMOV RDI,qword ptr [0x0060d2e0]\nMOV RDX,RSP\nMOV RSI,RBX\nCALL 0x00401ef0\nMOV RDI,qword ptr [0x0060d2e0]\nMOV RDX,qword ptr [0x0060d2f0]\nMOV ESI,0x40aa20\nXOR EAX,EAX\nCALL 0x00401ca0\nMOV EDI,0x1\nCALL 0x00401f40\n'
p921
S'53\n48 81 ec d0 00 00 00\n48 89 fb\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 89 74 24 28\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 08 00 00 00\n48 8b 3d 94 76 20 00\n48 8b 15 9d 76 20 00\nbe 84 a5 40 00\n31 c0\ne8 41 c0 ff ff\n48 8b 3d 7a 76 20 00\n48 89 e2\n48 89 de\ne8 7f c2 ff ff\n48 8b 3d 68 76 20 00\n48 8b 15 71 76 20 00\nbe 20 aa 40 00\n31 c0\ne8 15 c0 ff ff\nbf 01 00 00 00\ne8 ab c2 ff ff\n'
p922
S'.text:0000000000405bc0\n.text:0000000000405bc1\n.text:0000000000405bc8\n.text:0000000000405bcb\n.text:0000000000405bcd\n.text:0000000000405bcf\n.text:0000000000405bd4\n.text:0000000000405bd9\n.text:0000000000405bde\n.text:0000000000405be6\n.text:0000000000405bee\n.text:0000000000405bf6\n.text:0000000000405bfe\n.text:0000000000405c06\n.text:0000000000405c0b\n.text:0000000000405c10\n.text:0000000000405c15\n.text:0000000000405c1a\n.text:0000000000405c1f\n.text:0000000000405c24\n.text:0000000000405c29\n.text:0000000000405c31\n.text:0000000000405c36\n.text:0000000000405c3e\n.text:0000000000405c45\n.text:0000000000405c4c\n.text:0000000000405c53\n.text:0000000000405c58\n.text:0000000000405c5a\n.text:0000000000405c5f\n.text:0000000000405c66\n.text:0000000000405c69\n.text:0000000000405c6c\n.text:0000000000405c71\n.text:0000000000405c78\n.text:0000000000405c7f\n.text:0000000000405c84\n.text:0000000000405c86\n.text:0000000000405c8b\n.text:0000000000405c90\n'
p923
tp924
sS'crtc_add_output'
p925
(S'\n__stdcall crtc_add_output(crtc_t * crtc, output_t * output)\n'
p926
V\u000avoid crtc_add_output(crtc_t *crtc,output_t *output)\u000a\u000a{\u000a  int iVar1;\u000a  output_t *poVar2;\u000a  output_t **ppoVar3;\u000a  \u000a  if (crtc->outputs == (output_t **)0x0) {\u000a    ppoVar3 = (output_t **)malloc(8);\u000a    crtc->outputs = ppoVar3;\u000a    crtc->x = output->x;\u000a    crtc->y = output->y;\u000a    crtc->rotation = output->rotation;\u000a    crtc->mode_info = output->mode_info;\u000a    copy_transform(&crtc->pending_transform,&output->transform);\u000a    poVar2 = (output_t *)crtc->outputs;\u000a  }\u000a  else {\u000a    poVar2 = (output_t *)realloc(crtc->outputs,(long)crtc->noutput * 8 + 8);\u000a    *(output_t **)&crtc->outputs = poVar2;\u000a  }\u000a  if (poVar2 == (output_t *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    fatal("out of memory\u005cn");\u000a  }\u000a  iVar1 = crtc->noutput;\u000a  crtc->noutput = iVar1 + 1;\u000a  *(output_t **)((output_t **)poVar2 + (long)iVar1) = output;\u000a  return;\u000a}\u000a\u000a
p927
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX + 0x50]\nTEST RDI,RDI\nJZ 0x0040910f\nMOVSXD RAX,dword ptr [RBX + 0x58]\nLEA RSI,[0x8 + RAX*0x8]\nCALL 0x00401e40\nMOV qword ptr [RBX + 0x50],RAX\nTEST RAX,RAX\nJNZ 0x00409164\nJMP 0x0040917a\nMOV EDI,0x8\nCALL 0x00401d70\nMOV qword ptr [RBX + 0x50],RAX\nMOV EAX,dword ptr [0xd0 + R14]\nMOV dword ptr [RBX + 0x40],EAX\nMOV EAX,dword ptr [0xd4 + R14]\nMOV dword ptr [RBX + 0x44],EAX\nMOVZX EAX,word ptr [0xd8 + R14]\nMOV word ptr [RBX + 0x48],AX\nMOV RAX,qword ptr [0x98 + R14]\nMOV qword ptr [RBX + 0x30],RAX\nLEA RDI,[0xa0 + RBX]\nLEA RSI,[0x128 + R14]\nCALL 0x00407bf0\nMOV RAX,qword ptr [RBX + 0x50]\nTEST RAX,RAX\nJZ 0x0040917a\nMOVSXD RCX,dword ptr [RBX + 0x58]\nLEA EDX,[RCX + 0x1]\nMOV dword ptr [RBX + 0x58],EDX\nMOV qword ptr [RAX + RCX*0x8],R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x40a5a6\nXOR EAX,EAX\nCALL 0x00406410\n'
p928
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 8b 7b 50\n48 85 ff\n74 1c\n48 63 43 58\n48 8d 34 c5 08 00 00 00\ne8 3c 8d ff ff\n48 89 43 50\n48 85 c0\n75 57\neb 6b\nbf 08 00 00 00\ne8 57 8c ff ff\n48 89 43 50\n41 8b 86 d0 00 00 00\n89 43 40\n41 8b 86 d4 00 00 00\n89 43 44\n41 0f b7 86 d8 00 00 00\n66 89 43 48\n49 8b 86 98 00 00 00\n48 89 43 30\n48 8d bb a0 00 00 00\n49 8d b6 28 01 00 00\ne8 95 ea ff ff\n48 8b 43 50\n48 85 c0\n74 16\n48 63 4b 58\n8d 51 01\n89 53 58\n4c 89 34 c8\n48 83 c4 08\n5b\n41 5e\nc3\nbf a6 a5 40 00\n31 c0\ne8 8a d2 ff ff\n'
p929
S'.text:00000000004090e0\n.text:00000000004090e2\n.text:00000000004090e3\n.text:00000000004090e4\n.text:00000000004090e7\n.text:00000000004090ea\n.text:00000000004090ee\n.text:00000000004090f1\n.text:00000000004090f3\n.text:00000000004090f7\n.text:00000000004090ff\n.text:0000000000409104\n.text:0000000000409108\n.text:000000000040910b\n.text:000000000040910d\n.text:000000000040910f\n.text:0000000000409114\n.text:0000000000409119\n.text:000000000040911d\n.text:0000000000409124\n.text:0000000000409127\n.text:000000000040912e\n.text:0000000000409131\n.text:0000000000409139\n.text:000000000040913d\n.text:0000000000409144\n.text:0000000000409148\n.text:000000000040914f\n.text:0000000000409156\n.text:000000000040915b\n.text:000000000040915f\n.text:0000000000409162\n.text:0000000000409164\n.text:0000000000409168\n.text:000000000040916b\n.text:000000000040916e\n.text:0000000000409172\n.text:0000000000409176\n.text:0000000000409177\n.text:0000000000409179\n.text:000000000040917a\n.text:000000000040917f\n.text:0000000000409181\n'
p930
tp931
sS'XRRGetCrtcGammaSize'
p932
(S'\n__stdcall XRRGetCrtcGammaSize()\n'
p933
V\u000avoid XRRGetCrtcGammaSize(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetCrtcGammaSize_0060d080)();\u000a  return;\u000a}\u000a\u000a
p934
S'JMP qword ptr [0x0060d080]\n'
p935
S'ff 25 2a b5 20 00\n'
p936
S'.plt:0000000000401b50\n'
p937
tp938
sS'mode_width'
p939
(S'\n__stdcall mode_width(XRRModeInfo * mode_info)\n'
p940
V\u000aint mode_width(XRRModeInfo *mode_info)\u000a\u000a{\u000a  uint uVar1;\u000a  byte in_SIL;\u000a  \u000a  uVar1 = 0;\u000a  switch(in_SIL & 0xf) {\u000a  case 1:\u000a  case 4:\u000a    return (int)mode_info->width;\u000a  case 2:\u000a  case 8:\u000a    uVar1 = mode_info->height;\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p941
S'AND SIL,0xf\nXOR EAX,EAX\nDEC SIL\nCMP SIL,0x7\nJA 0x00408a71\nMOVZX ECX,SIL\nJMP qword ptr [0x409a18 + RCX*0x8]\nMOV EAX,dword ptr [RDI + 0x8]\nRET\nMOV EAX,dword ptr [RDI + 0xc]\nRET\n'
p942
S'40 80 e6 0f\n31 c0\n40 fe ce\n40 80 fe 07\n77 12\n40 0f b6 ce\nff 24 cd 18 9a 40 00\n8b 47 08\nc3\n8b 47 0c\nc3\n'
p943
S'.text:0000000000408a50\n.text:0000000000408a54\n.text:0000000000408a56\n.text:0000000000408a59\n.text:0000000000408a5d\n.text:0000000000408a5f\n.text:0000000000408a63\n.text:0000000000408a6a\n.text:0000000000408a6d\n.text:0000000000408a6e\n.text:0000000000408a71\n'
p944
tp945
sS'find_crtc_for_output'
p946
(S'\n__stdcall find_crtc_for_output(output_t * output)\n'
p947
V\u000acrtc_t * find_crtc_for_output(output_t *output)\u000a\u000a{\u000a  int iVar1;\u000a  XRROutputInfo *pXVar2;\u000a  crtc_t *crtc;\u000a  long lVar3;\u000a  \u000a  pXVar2 = output->output_info;\u000a  if (0 < pXVar2->ncrtc) {\u000a    lVar3 = 0;\u000a    do {\u000a      crtc = find_crtc_by_xid(pXVar2->crtcs[lVar3]);\u000a      if (crtc == (crtc_t *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        fatal("cannot find crtc 0x%lx\u005cn",output->output_info->crtcs[lVar3]);\u000a      }\u000a      iVar1 = check_crtc_for_output(crtc,output);\u000a      if (iVar1 != 0) {\u000a        return crtc;\u000a      }\u000a      lVar3 = lVar3 + 1;\u000a      pXVar2 = output->output_info;\u000a    } while (lVar3 < (long)pXVar2->ncrtc);\u000a  }\u000a  return (crtc_t *)0x0;\u000a}\u000a\u000a
p948
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nMOV RAX,qword ptr [R14 + 0x38]\nCMP dword ptr [RAX + 0x34],0x0\nJLE 0x00408d74\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [RAX + 0x38]\nMOV RDI,qword ptr [RAX + RBX*0x8]\nCALL 0x00407730\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00408d80\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00408ec0\nTEST EAX,EAX\nJNZ 0x00408d77\nINC RBX\nMOV RAX,qword ptr [R14 + 0x38]\nMOVSXD RCX,dword ptr [RAX + 0x34]\nCMP RBX,RCX\nJL 0x00408d40\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV RAX,qword ptr [R14 + 0x38]\nMOV RAX,qword ptr [RAX + 0x38]\nMOV RSI,qword ptr [RAX + RBX*0x8]\nMOV EDI,0x40b302\nXOR EAX,EAX\nCALL 0x00406410\n'
p949
S'41 57\n41 56\n53\n49 89 fe\n49 8b 46 38\n83 78 34 00\n7e 42\n31 db\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 40 38\n48 8b 3c d8\ne8 e3 e9 ff ff\n49 89 c7\n4d 85 ff\n74 2b\n4c 89 ff\n4c 89 f6\ne8 60 01 00 00\n85 c0\n75 13\n48 ff c3\n49 8b 46 38\n48 63 48 34\n48 39 cb\n7c cc\n45 31 ff\n4c 89 f8\n5b\n41 5e\n41 5f\nc3\n49 8b 46 38\n48 8b 40 38\n48 8b 34 d8\nbf 02 b3 40 00\n31 c0\ne8 78 d6 ff ff\n'
p950
S'.text:0000000000408d20\n.text:0000000000408d22\n.text:0000000000408d24\n.text:0000000000408d25\n.text:0000000000408d28\n.text:0000000000408d2c\n.text:0000000000408d30\n.text:0000000000408d32\n.text:0000000000408d34\n.text:0000000000408d40\n.text:0000000000408d44\n.text:0000000000408d48\n.text:0000000000408d4d\n.text:0000000000408d50\n.text:0000000000408d53\n.text:0000000000408d55\n.text:0000000000408d58\n.text:0000000000408d5b\n.text:0000000000408d60\n.text:0000000000408d62\n.text:0000000000408d64\n.text:0000000000408d67\n.text:0000000000408d6b\n.text:0000000000408d6f\n.text:0000000000408d72\n.text:0000000000408d74\n.text:0000000000408d77\n.text:0000000000408d7a\n.text:0000000000408d7b\n.text:0000000000408d7d\n.text:0000000000408d7f\n.text:0000000000408d80\n.text:0000000000408d84\n.text:0000000000408d88\n.text:0000000000408d8c\n.text:0000000000408d91\n.text:0000000000408d93\n'
p951
tp952
sS'XOpenDisplay'
p953
(S'\n__stdcall XOpenDisplay()\n'
p954
V\u000avoid XOpenDisplay(void)\u000a\u000a{\u000a  (*(code *)PTR_XOpenDisplay_0060d118)();\u000a  return;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x0060d118]\n'
p956
S'ff 25 92 b4 20 00\n'
p957
S'.plt:0000000000401c80\n'
p958
tp959
sS'_start'
p960
(S'\n__stdcall _start()\n'
p961
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060cff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p962
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x4098d0\nMOV RCX,0x409860\nMOV RDI,0x4020d0\nCALL qword ptr [0x0060cff0]\nHLT\n'
p963
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 d0 98 40 00\n48 c7 c1 60 98 40 00\n48 c7 c7 d0 20 40 00\nff 15 f6 af 20 00\nf4\n'
p964
S'.text:0000000000401fd0\n.text:0000000000401fd2\n.text:0000000000401fd5\n.text:0000000000401fd6\n.text:0000000000401fd9\n.text:0000000000401fdd\n.text:0000000000401fde\n.text:0000000000401fdf\n.text:0000000000401fe6\n.text:0000000000401fed\n.text:0000000000401ff4\n.text:0000000000401ffa\n'
p965
tp966
sS'output_can_use_crtc'
p967
(S'\n__stdcall output_can_use_crtc(output_t * output, crtc_t * crtc)\n'
p968
V\u000aint output_can_use_crtc(output_t *output,crtc_t *crtc)\u000a\u000a{\u000a  XRROutputInfo *pXVar1;\u000a  long lVar2;\u000a  \u000a  pXVar1 = output->output_info;\u000a  if (pXVar1->ncrtc < 1) {\u000a    return 0;\u000a  }\u000a  lVar2 = 0;\u000a  do {\u000a    if (pXVar1->crtcs[lVar2] == (crtc->crtc).xid) {\u000a      return 1;\u000a    }\u000a    lVar2 = lVar2 + 1;\u000a  } while (lVar2 < (long)pXVar1->ncrtc);\u000a  return 0;\u000a}\u000a\u000a
p969
S'MOV RAX,qword ptr [RDI + 0x38]\nCMP dword ptr [RAX + 0x34],0x0\nJLE 0x00408305\nMOV RCX,qword ptr [RAX + 0x38]\nMOV RDX,qword ptr [RSI + 0x10]\nXOR ESI,ESI\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RCX + RSI*0x8],RDX\nJZ 0x00408308\nINC RSI\nMOVSXD RDI,dword ptr [RAX + 0x34]\nCMP RSI,RDI\nJL 0x004082f0\nXOR EAX,EAX\nRET\nXOR EAX,EAX\nRET\nMOV EAX,0x1\nRET\n'
p970
S'48 8b 47 38\n83 78 34 00\n7e 2b\n48 8b 48 38\n48 8b 56 10\n31 f6\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 14 f1\n74 12\n48 ff c6\n48 63 78 34\n48 39 fe\n7c ee\n31 c0\nc3\n31 c0\nc3\nb8 01 00 00 00\nc3\n'
p971
S'.text:00000000004082d0\n.text:00000000004082d4\n.text:00000000004082d8\n.text:00000000004082da\n.text:00000000004082de\n.text:00000000004082e2\n.text:00000000004082e4\n.text:00000000004082f0\n.text:00000000004082f4\n.text:00000000004082f6\n.text:00000000004082f9\n.text:00000000004082fd\n.text:0000000000408300\n.text:0000000000408302\n.text:0000000000408304\n.text:0000000000408305\n.text:0000000000408307\n.text:0000000000408308\n.text:000000000040830d\n'
p972
tp973
sS'XRRSetCrtcTransform'
p974
(S'\n__stdcall XRRSetCrtcTransform()\n'
p975
V\u000avoid XRRSetCrtcTransform(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRSetCrtcTransform_0060d078)();\u000a  return;\u000a}\u000a\u000a
p976
S'JMP qword ptr [0x0060d078]\n'
p977
S'ff 25 32 b5 20 00\n'
p978
S'.plt:0000000000401b40\n'
p979
tp980
sS'calloc'
p981
(S'\n__stdcall calloc(size_t __nmemb, size_t __size)\n'
p982
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * calloc(size_t __nmemb,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060d108)();\u000a  return pvVar1;\u000a}\u000a\u000a
p983
S'JMP qword ptr [0x0060d108]\n'
p984
S'ff 25 a2 b4 20 00\n'
p985
S'.plt:0000000000401c60\n'
p986
tp987
sS'printf'
p988
(S'\n__stdcall printf(char * __format)\n'
p989
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint printf(char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_printf_0060d0b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p990
S'JMP qword ptr [0x0060d0b0]\n'
p991
S'ff 25 fa b4 20 00\n'
p992
S'.plt:0000000000401bb0\n'
p993
tp994
sS'fatal'
p995
(S'\n__stdcall fatal(char * format)\n'
p996
V\u000avoid fatal(char *format,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_RCX;\u000a  undefined8 in_RDX;\u000a  undefined8 in_RSI;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list ap;\u000a  undefined4 local_d8;\u000a  undefined4 local_d4;\u000a  void **local_d0;\u000a  undefined *local_c8;\u000a  undefined local_b8 [8];\u000a  undefined8 local_b0;\u000a  undefined8 local_a8;\u000a  undefined8 local_a0;\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_c8 = local_b8;\u000a  local_d0 = &ap[0].overflow_arg_area;\u000a  local_d4 = 0x30;\u000a  local_d8 = 8;\u000a  local_b0 = in_RSI;\u000a  local_a8 = in_RDX;\u000a  local_a0 = in_RCX;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  fprintf(stderr,"%s: ",program_name);\u000a  vfprintf(stderr,format,&local_d8);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p997
S'PUSH RBX\nSUB RSP,0xd0\nMOV RBX,RDI\nTEST AL,AL\nJZ 0x00406456\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nMOV qword ptr [RSP + 0x28],RSI\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x8\nMOV RDI,qword ptr [0x0060d2e0]\nMOV RDX,qword ptr [0x0060d2f0]\nMOV ESI,0x40a584\nXOR EAX,EAX\nCALL 0x00401ca0\nMOV RDI,qword ptr [0x0060d2e0]\nMOV RDX,RSP\nMOV RSI,RBX\nCALL 0x00401ef0\nMOV EDI,0x1\nCALL 0x00401f40\n'
p998
S'53\n48 81 ec d0 00 00 00\n48 89 fb\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 89 74 24 28\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 08 00 00 00\n48 8b 3d 44 6e 20 00\n48 8b 15 4d 6e 20 00\nbe 84 a5 40 00\n31 c0\ne8 f1 b7 ff ff\n48 8b 3d 2a 6e 20 00\n48 89 e2\n48 89 de\ne8 2f ba ff ff\nbf 01 00 00 00\ne8 75 ba ff ff\n'
p999
S'.text:0000000000406410\n.text:0000000000406411\n.text:0000000000406418\n.text:000000000040641b\n.text:000000000040641d\n.text:000000000040641f\n.text:0000000000406424\n.text:0000000000406429\n.text:000000000040642e\n.text:0000000000406436\n.text:000000000040643e\n.text:0000000000406446\n.text:000000000040644e\n.text:0000000000406456\n.text:000000000040645b\n.text:0000000000406460\n.text:0000000000406465\n.text:000000000040646a\n.text:000000000040646f\n.text:0000000000406474\n.text:0000000000406479\n.text:0000000000406481\n.text:0000000000406486\n.text:000000000040648e\n.text:0000000000406495\n.text:000000000040649c\n.text:00000000004064a3\n.text:00000000004064a8\n.text:00000000004064aa\n.text:00000000004064af\n.text:00000000004064b6\n.text:00000000004064b9\n.text:00000000004064bc\n.text:00000000004064c1\n.text:00000000004064c6\n'
p1000
tp1001
sS'XRRGetMonitors'
p1002
(S'\n__stdcall XRRGetMonitors()\n'
p1003
V\u000avoid XRRGetMonitors(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetMonitors_0060d138)();\u000a  return;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x0060d138]\n'
p1005
S'ff 25 72 b4 20 00\n'
p1006
S'.plt:0000000000401cc0\n'
p1007
tp1008
sS'__strdup'
p1009
(S'\n__stdcall __strdup()\n'
p1010
V\u000avoid __strdup(void)\u000a\u000a{\u000a  (*(code *)PTR___strdup_0060d0f0)();\u000a  return;\u000a}\u000a\u000a
p1011
S'JMP qword ptr [0x0060d0f0]\n'
p1012
S'ff 25 ba b4 20 00\n'
p1013
S'.plt:0000000000401c30\n'
p1014
tp1015
sS'floor'
p1016
(S'\n__stdcall floor(double __x)\n'
p1017
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adouble floor(double __x)\u000a\u000a{\u000a  double dVar1;\u000a  \u000a  dVar1 = (double)(*(code *)PTR_floor_0060d260)();\u000a  return dVar1;\u000a}\u000a\u000a
p1018
S'JMP qword ptr [0x0060d260]\n'
p1019
S'ff 25 4a b3 20 00\n'
p1020
S'.plt:0000000000401f10\n'
p1021
tp1022
sS'crtc_revert'
p1023
(S'\n__stdcall crtc_revert()\n'
p1024
V\u000aint crtc_revert(void)\u000a\u000a{\u000a  XRRCrtcInfo *pXVar1;\u000a  uint in_EAX;\u000a  int iVar2;\u000a  uint uVar3;\u000a  crtc_t *crtc;\u000a  \u000a  pXVar1 = crtc->crtc_info;\u000a  if (verbose == 1) {\u000a    in_EAX = printf("crtc %d: revert\u005cn",(ulong)(uint)(crtc->crtc).index);\u000a  }\u000a  uVar3 = in_EAX & 0xffffff00 | (uint)dryrun;\u000a  if (dryrun == 0) {\u000a    iVar2 = equal_transform(&crtc->current_transform,&crtc->pending_transform);\u000a    if (iVar2 == 0) {\u000a      crtc_set_transform(crtc,&crtc->current_transform);\u000a    }\u000a    uVar3 = XRRSetCrtcConfig(dpy,res,(crtc->crtc).xid,0,(ulong)(uint)pXVar1->x,\u000a                             (ulong)(uint)pXVar1->y,pXVar1->mode,(ulong)pXVar1->rotation,\u000a                             pXVar1->outputs,(ulong)(uint)pXVar1->noutput);\u000a  }\u000a  return (int)uVar3;\u000a}\u000a\u000a
p1025
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV R15,qword ptr [RBX + 0x28]\nCMP byte ptr [0x0060d2f8],0x1\nJNZ 0x00409674\nMOV ESI,dword ptr [RBX + 0x18]\nMOV EDI,0x40b6b8\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV AL,byte ptr [0x0060d2fc]\nTEST AL,AL\nJNZ 0x004096db\nLEA R14,[RBX + 0x60]\nLEA RSI,[0xa0 + RBX]\nMOV RDI,R14\nCALL 0x00409050\nTEST EAX,EAX\nJNZ 0x004096a0\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x004096f0\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3e8]\nMOV RDX,qword ptr [RBX + 0x10]\nMOV R8D,dword ptr [R15 + 0x8]\nMOV R9D,dword ptr [R15 + 0xc]\nMOV EAX,dword ptr [R15 + 0x24]\nMOVZX EBX,word ptr [R15 + 0x20]\nMOV ECX,0x0\nPUSH RAX\nPUSH qword ptr [R15 + 0x28]\nPUSH RBX\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401d30\nADD RSP,0x20\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1026
S'41 57\n41 56\n53\n48 89 fb\n4c 8b 7b 28\n80 3d 95 3c 20 00 01\n75 0f\n8b 73 18\nbf b8 b6 40 00\n31 c0\ne8 3c 85 ff ff\n8a 05 82 3c 20 00\n84 c0\n75 5d\n4c 8d 73 60\n48 8d b3 a0 00 00 00\n4c 89 f7\ne8 bf f9 ff ff\n85 c0\n75 0b\n48 89 df\n4c 89 f6\ne8 50 00 00 00\n48 8b 3d 01 3d 20 00\n48 8b 35 3a 3d 20 00\n48 8b 53 10\n45 8b 47 08\n45 8b 4f 0c\n41 8b 47 24\n41 0f b7 5f 20\nb9 00 00 00 00\n50\n41 ff 77 28\n53\n41 ff 77 18\ne8 59 86 ff ff\n48 83 c4 20\n5b\n41 5e\n41 5f\nc3\n'
p1027
S'.text:0000000000409650\n.text:0000000000409652\n.text:0000000000409654\n.text:0000000000409655\n.text:0000000000409658\n.text:000000000040965c\n.text:0000000000409663\n.text:0000000000409665\n.text:0000000000409668\n.text:000000000040966d\n.text:000000000040966f\n.text:0000000000409674\n.text:000000000040967a\n.text:000000000040967c\n.text:000000000040967e\n.text:0000000000409682\n.text:0000000000409689\n.text:000000000040968c\n.text:0000000000409691\n.text:0000000000409693\n.text:0000000000409695\n.text:0000000000409698\n.text:000000000040969b\n.text:00000000004096a0\n.text:00000000004096a7\n.text:00000000004096ae\n.text:00000000004096b2\n.text:00000000004096b6\n.text:00000000004096ba\n.text:00000000004096be\n.text:00000000004096c3\n.text:00000000004096c8\n.text:00000000004096c9\n.text:00000000004096cd\n.text:00000000004096ce\n.text:00000000004096d2\n.text:00000000004096d7\n.text:00000000004096db\n.text:00000000004096dc\n.text:00000000004096de\n.text:00000000004096e0\n'
p1028
tp1029
sS'output_can_use_rotation'
p1030
(S'\n__stdcall output_can_use_rotation(output_t * output)\n'
p1031
V\u000aint output_can_use_rotation(output_t *output)\u000a\u000a{\u000a  XRROutputInfo *pXVar1;\u000a  int iVar2;\u000a  crtc_t *crtc;\u000a  long lVar3;\u000a  \u000a  pXVar1 = output->output_info;\u000a  if (0 < pXVar1->ncrtc) {\u000a    lVar3 = 0;\u000a    do {\u000a      crtc = find_crtc_by_xid(pXVar1->crtcs[lVar3]);\u000a      if ((crtc != (crtc_t *)0x0) && (iVar2 = crtc_can_use_rotation(crtc), iVar2 == 0)) {\u000a        return 0;\u000a      }\u000a      lVar3 = lVar3 + 1;\u000a    } while (lVar3 < (long)pXVar1->ncrtc);\u000a  }\u000a  return 1;\u000a}\u000a\u000a
p1032
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,qword ptr [RDI + 0x38]\nMOV R14D,0x1\nCMP dword ptr [RBX + 0x34],0x0\nJLE 0x004085b2\nXOR EBP,EBP\nMOVZX R15D,SI\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [RBX + 0x38]\nMOV RDI,qword ptr [RAX + RBP*0x8]\nCALL 0x00407730\nTEST RAX,RAX\nJZ 0x004085a1\nMOV RDI,RAX\nMOV ESI,R15D\nCALL 0x004089a0\nTEST EAX,EAX\nJZ 0x004085af\nINC RBP\nMOVSXD RAX,dword ptr [RBX + 0x34]\nCMP RBP,RAX\nJL 0x00408580\nJMP 0x004085b2\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1033
S'55\n41 57\n41 56\n53\n50\n48 8b 5f 38\n41 be 01 00 00 00\n83 7b 34 00\n7e 3b\n31 ed\n44 0f b7 fe\n0f 1f 00\n48 8b 43 38\n48 8b 3c e8\ne8 a3 f1 ff ff\n48 85 c0\n74 0f\n48 89 c7\n44 89 fe\ne8 03 04 00 00\n85 c0\n74 0e\n48 ff c5\n48 63 43 34\n48 39 c5\n7c d3\neb 03\n45 31 f6\n44 89 f0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1034
S'.text:0000000000408560\n.text:0000000000408561\n.text:0000000000408563\n.text:0000000000408565\n.text:0000000000408566\n.text:0000000000408567\n.text:000000000040856b\n.text:0000000000408571\n.text:0000000000408575\n.text:0000000000408577\n.text:0000000000408579\n.text:000000000040857d\n.text:0000000000408580\n.text:0000000000408584\n.text:0000000000408588\n.text:000000000040858d\n.text:0000000000408590\n.text:0000000000408592\n.text:0000000000408595\n.text:0000000000408598\n.text:000000000040859d\n.text:000000000040859f\n.text:00000000004085a1\n.text:00000000004085a4\n.text:00000000004085a8\n.text:00000000004085ab\n.text:00000000004085ad\n.text:00000000004085af\n.text:00000000004085b2\n.text:00000000004085b5\n.text:00000000004085b9\n.text:00000000004085ba\n.text:00000000004085bc\n.text:00000000004085be\n.text:00000000004085bf\n'
p1035
tp1036
sS'find_last_non_clamped'
p1037
(S'\n__stdcall find_last_non_clamped(CARD16 * array)\n'
p1038
V\u000aint find_last_non_clamped(CARD16 *array)\u000a\u000a{\u000a  long lVar1;\u000a  long lVar2;\u000a  int in_ESI;\u000a  \u000a  lVar2 = (long)in_ESI;\u000a  do {\u000a    if (lVar2 < 2) {\u000a      return 0;\u000a    }\u000a    lVar1 = lVar2 + -1;\u000a    lVar2 = lVar2 + -1;\u000a  } while (array[lVar1] == 0xffff);\u000a  return (int)lVar2;\u000a}\u000a\u000a
p1039
S'MOVSXD RAX,ESI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP RAX,0x2\nJL 0x004089f7\nMOVZX ECX,word ptr [RDI + RAX*0x2 + -0x2]\nDEC RAX\nCMP ECX,0xffff\nJZ 0x004089e0\nRET\nXOR EAX,EAX\nRET\n'
p1040
S'48 63 c6\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 83 f8 02\n7c 11\n0f b7 4c 47 fe\n48 ff c8\n81 f9 ff ff 00 00\n74 ea\nc3\n31 c0\nc3\n'
p1041
S'.text:00000000004089d0\n.text:00000000004089d3\n.text:00000000004089e0\n.text:00000000004089e4\n.text:00000000004089e6\n.text:00000000004089eb\n.text:00000000004089ee\n.text:00000000004089f4\n.text:00000000004089f6\n.text:00000000004089f7\n.text:00000000004089f9\n'
p1042
tp1043
sS'check_strtod'
p1044
(S'\n__stdcall check_strtod(char * s)\n'
p1045
V\u000adouble check_strtod(char *s)\u000a\u000a{\u000a  double dVar1;\u000a  char *endptr;\u000a  char *local_10;\u000a  \u000a  dVar1 = strtod(s,&local_10);\u000a  if (local_10 != s) {\u000a    return dVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  argerr("failed to parse \u005c'%s\u005c' as a number\u005cn",s);\u000a}\u000a\u000a
p1046
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nLEA RSI,[RSP + 0x8]\nCALL 0x00401b20\nCMP qword ptr [RSP + 0x8],RBX\nJZ 0x00405d1f\nADD RSP,0x10\nPOP RBX\nRET\nMOV EDI,0x40b18a\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00405bc0\n'
p1047
S'53\n48 83 ec 10\n48 89 fb\n48 8d 74 24 08\ne8 0e be ff ff\n48 39 5c 24 08\n74 06\n48 83 c4 10\n5b\nc3\nbf 8a b1 40 00\n31 c0\n48 89 de\ne8 92 fe ff ff\n'
p1048
S'.text:0000000000405d00\n.text:0000000000405d01\n.text:0000000000405d05\n.text:0000000000405d08\n.text:0000000000405d0d\n.text:0000000000405d12\n.text:0000000000405d17\n.text:0000000000405d19\n.text:0000000000405d1d\n.text:0000000000405d1e\n.text:0000000000405d1f\n.text:0000000000405d24\n.text:0000000000405d26\n.text:0000000000405d29\n'
p1049
tp1050
sS'register_tm_clones'
p1051
(S'\n__stdcall register_tm_clones()\n'
p1052
V\u000a/* WARNING: Removing unreachable block (ram,0x00402063) */\u000a/* WARNING: Removing unreachable block (ram,0x0040206d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1053
S'MOV ESI,0x60d2e0\nPUSH RBP\nSUB RSI,0x60d2e0\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00402078\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00402078\nPOP RBP\nMOV EDI,0x60d2e0\nJMP RAX\nPOP RBP\nRET\n'
p1054
S'be e0 d2 60 00\n55\n48 81 ee e0 d2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf e0 d2 60 00\nff e0\n5d\nc3\n'
p1055
S'.text:0000000000402040\n.text:0000000000402045\n.text:0000000000402046\n.text:000000000040204d\n.text:0000000000402051\n.text:0000000000402054\n.text:0000000000402057\n.text:000000000040205b\n.text:000000000040205e\n.text:0000000000402061\n.text:0000000000402063\n.text:0000000000402068\n.text:000000000040206b\n.text:000000000040206d\n.text:000000000040206e\n.text:0000000000402073\n.text:0000000000402078\n.text:0000000000402079\n'
p1056
tp1057
sS'set_name_index'
p1058
(S'\n__stdcall set_name_index(name_t * name)\n'
p1059
V\u000avoid set_name_index(name_t *name)\u000a\u000a{\u000a  int in_ESI;\u000a  \u000a  *(byte *)&name->kind = *(byte *)&name->kind | 4;\u000a  name->index = in_ESI;\u000a  return;\u000a}\u000a\u000a
p1060
S'OR byte ptr [RDI],0x4\nMOV dword ptr [RDI + 0x18],ESI\nRET\n'
p1061
S'80 0f 04\n89 77 18\nc3\n'
p1062
S'.text:0000000000407b80\n.text:0000000000407b83\n.text:0000000000407b86\n'
p1063
tp1064
sS'XRRSetProviderOffloadSink'
p1065
(S'\n__stdcall XRRSetProviderOffloadSink()\n'
p1066
V\u000avoid XRRSetProviderOffloadSink(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRSetProviderOffloadSink_0060d1b8)();\u000a  return;\u000a}\u000a\u000a
p1067
S'JMP qword ptr [0x0060d1b8]\n'
p1068
S'ff 25 f2 b3 20 00\n'
p1069
S'.plt:0000000000401dc0\n'
p1070
tp1071
sS'XRRDeleteMonitor'
p1072
(S'\n__stdcall XRRDeleteMonitor()\n'
p1073
V\u000avoid XRRDeleteMonitor(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRDeleteMonitor_0060d240)();\u000a  return;\u000a}\u000a\u000a
p1074
S'JMP qword ptr [0x0060d240]\n'
p1075
S'ff 25 6a b3 20 00\n'
p1076
S'.plt:0000000000401ed0\n'
p1077
tp1078
sS'XRRDeleteOutputMode'
p1079
(S'\n__stdcall XRRDeleteOutputMode()\n'
p1080
V\u000avoid XRRDeleteOutputMode(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRDeleteOutputMode_0060d2b0)();\u000a  return;\u000a}\u000a\u000a
p1081
S'JMP qword ptr [0x0060d2b0]\n'
p1082
S'ff 25 fa b2 20 00\n'
p1083
S'.plt:0000000000401fb0\n'
p1084
tp1085
sS'apply'
p1086
(S'\n__stdcall apply()\n'
p1087
V\u000avoid apply(void)\u000a\u000a{\u000a  long lVar1;\u000a  name_t *pnVar2;\u000a  crtc_t *pcVar3;\u000a  uint uVar4;\u000a  XRRModeInfo *mode_info;\u000a  long lVar5;\u000a  long lVar6;\u000a  box_t bounds;\u000a  int local_38;\u000a  int local_34;\u000a  \u000a  if (grab_server == 0) {\u000a    XGrabServer(dpy);\u000a  }\u000a  if (0 < res->ncrtc) {\u000a    lVar5 = 0;\u000a    lVar6 = 0;\u000a    do {\u000a      pcVar3 = crtcs;\u000a      lVar1 = *(long *)((long)&crtcs->crtc_info + lVar5);\u000a      if (*(RRMode *)(lVar1 + 0x18) != 0) {\u000a        pnVar2 = &crtcs->crtc;\u000a        if (*(long *)((long)&crtcs->mode_info + lVar5) != 0) {\u000a          mode_info = find_mode_by_xid(*(RRMode *)(lVar1 + 0x18));\u000a          if (mode_info == (XRRModeInfo *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a            panic((crtc_t *)0x3);\u000a          }\u000a          mode_geometry(mode_info,(XTransform *)(ulong)*(ushort *)(lVar1 + 0x20),\u000a                        (box_t *)((long)(pcVar3->current_transform).transform.matrix + lVar5));\u000a          if ((local_38 + *(int *)(lVar1 + 8) <= fb_width) &&\u000a             (*(int *)(lVar1 + 0xc) + local_34 <= fb_height)) goto LAB_004074db;\u000a          *(undefined4 *)((long)&pcVar3->changing + lVar5) = 1;\u000a        }\u000a        uVar4 = crtc_disable((crtc_t *)((long)&pnVar2->kind + lVar5));\u000a        if (uVar4 != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a          panic((crtc_t *)(ulong)uVar4);\u000a        }\u000a      }\u000aLAB_004074db:\u000a      lVar6 = lVar6 + 1;\u000a      lVar5 = lVar5 + 0xe0;\u000a    } while (lVar6 < (long)res->ncrtc);\u000a  }\u000a  screen_apply();\u000a  if (0 < res->ncrtc) {\u000a    lVar6 = 0;\u000a    lVar5 = 0;\u000a    do {\u000a      uVar4 = crtc_apply((crtc_t *)((long)&(crtcs->crtc).kind + lVar6));\u000a      if (uVar4 != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        panic((crtc_t *)(ulong)uVar4);\u000a      }\u000a      lVar5 = lVar5 + 1;\u000a      lVar6 = lVar6 + 0xe0;\u000a    } while (lVar5 < (long)res->ncrtc);\u000a  }\u000a  set_primary();\u000a  if (grab_server != 0) {\u000a    return;\u000a  }\u000a  (*(code *)PTR_XUngrabServer_0060d168)(dpy);\u000a  return;\u000a}\u000a\u000a
p1088
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV AL,byte ptr [0x0060d300]\nTEST AL,AL\nJNZ 0x00407444\nMOV RDI,qword ptr [0x0060d3a8]\nCALL 0x00401e20\nMOV RAX,qword ptr [0x0060d3e8]\nCMP dword ptr [RAX + 0x10],0x0\nJLE 0x004074f9\nXOR EBX,EBX\nLEA R14,[RSP + 0x8]\nXOR R12D,R12D\nNOP\nMOV R13,qword ptr [0x0060d400]\nMOV RBP,qword ptr [R13 + RBX*0x1 + 0x28]\nMOV RDI,qword ptr [RBP + 0x18]\nTEST RDI,RDI\nJZ 0x004074db\nLEA R15,[R13 + RBX*0x1]\nCMP qword ptr [R13 + RBX*0x1 + 0x30],0x0\nJZ 0x004074cb\nCALL 0x00407960\nTEST RAX,RAX\nJZ 0x0040758c\nLEA RDX,[R13 + RBX*0x1 + 0x60]\nMOVZX ESI,word ptr [RBP + 0x20]\nMOV RDI,RAX\nMOV RCX,R14\nCALL 0x00408ab0\nMOV EAX,dword ptr [RSP + 0x10]\nADD EAX,dword ptr [RBP + 0x8]\nCMP EAX,dword ptr [0x0060d30c]\nJG 0x004074c2\nMOV EAX,dword ptr [RBP + 0xc]\nADD EAX,dword ptr [RSP + 0x14]\nCMP EAX,dword ptr [0x0060d310]\nJLE 0x004074db\nMOV dword ptr [R13 + RBX*0x1 + 0x20],0x1\nMOV RDI,R15\nCALL 0x004091f0\nTEST EAX,EAX\nJNZ 0x00407582\nINC R12\nMOV RAX,qword ptr [0x0060d3e8]\nMOVSXD RAX,dword ptr [RAX + 0x10]\nADD RBX,0xe0\nCMP R12,RAX\nJL 0x00407460\nCALL 0x00409250\nMOV RAX,qword ptr [0x0060d3e8]\nCMP dword ptr [RAX + 0x10],0x0\nJLE 0x00407540\nXOR R14D,R14D\nXOR EBP,EBP\nMOV RBX,qword ptr [0x0060d400]\nADD RBX,R14\nMOV RDI,RBX\nCALL 0x00409320\nTEST EAX,EAX\nJNZ 0x00407578\nINC RBP\nMOV RAX,qword ptr [0x0060d3e8]\nMOVSXD RAX,dword ptr [RAX + 0x10]\nADD R14,0xe0\nCMP RBP,RAX\nJL 0x00407510\nCALL 0x004094d0\nMOV AL,byte ptr [0x0060d300]\nTEST AL,AL\nJZ 0x0040755e\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [0x0060d3a8]\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401d20\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x004091a0\nMOV EDI,EAX\nMOV RSI,R15\nCALL 0x004091a0\nMOV EDI,0x3\nMOV RSI,R15\nCALL 0x004091a0\n'
p1089
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n8a 05 cc 5e 20 00\n84 c0\n75 0c\n48 8b 3d 69 5f 20 00\ne8 dc a9 ff ff\n48 8b 05 9d 5f 20 00\n83 78 10 00\n0f 8e a4 00 00 00\n31 db\n4c 8d 74 24 08\n45 31 e4\n90\n4c 8b 2d 99 5f 20 00\n49 8b 6c 1d 28\n48 8b 7d 18\n48 85 ff\n74 66\n4d 8d 7c 1d 00\n49 83 7c 1d 30 00\n74 49\ne8 d9 04 00 00\n48 85 c0\n0f 84 fc 00 00 00\n49 8d 54 1d 60\n0f b7 75 20\n48 89 c7\n4c 89 f1\ne8 0c 16 00 00\n8b 44 24 10\n03 45 08\n3b 05 5b 5e 20 00\n7f 0f\n8b 45 0c\n03 44 24 14\n3b 05 50 5e 20 00\n7e 19\n41 c7 44 1d 20 01 00 00 00\n4c 89 ff\ne8 1d 1d 00 00\n85 c0\n0f 85 a7 00 00 00\n49 ff c4\n48 8b 05 03 5f 20 00\n48 63 40 10\n48 81 c3 e0 00 00 00\n49 39 c4\n0f 8c 67 ff ff ff\ne8 52 1d 00 00\n48 8b 05 e3 5e 20 00\n83 78 10 00\n7e 35\n45 31 f6\n31 ed\n48 8b 1d e9 5e 20 00\n4c 01 f3\n48 89 df\ne8 fe 1d 00 00\n85 c0\n75 52\n48 ff c5\n48 8b 05 b8 5e 20 00\n48 63 40 10\n49 81 c6 e0 00 00 00\n48 39 c5\n7c d0\ne8 8b 1f 00 00\n8a 05 b5 5d 20 00\n84 c0\n74 0f\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 3d 43 5e 20 00\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 a8 a7 ff ff\n89 c7\n48 89 de\ne8 1e 1c 00 00\n89 c7\n4c 89 fe\ne8 14 1c 00 00\nbf 03 00 00 00\n4c 89 fe\ne8 07 1c 00 00\n'
p1090
S'.text:0000000000407420\n.text:0000000000407421\n.text:0000000000407423\n.text:0000000000407425\n.text:0000000000407427\n.text:0000000000407429\n.text:000000000040742a\n.text:000000000040742e\n.text:0000000000407434\n.text:0000000000407436\n.text:0000000000407438\n.text:000000000040743f\n.text:0000000000407444\n.text:000000000040744b\n.text:000000000040744f\n.text:0000000000407455\n.text:0000000000407457\n.text:000000000040745c\n.text:000000000040745f\n.text:0000000000407460\n.text:0000000000407467\n.text:000000000040746c\n.text:0000000000407470\n.text:0000000000407473\n.text:0000000000407475\n.text:000000000040747a\n.text:0000000000407480\n.text:0000000000407482\n.text:0000000000407487\n.text:000000000040748a\n.text:0000000000407490\n.text:0000000000407495\n.text:0000000000407499\n.text:000000000040749c\n.text:000000000040749f\n.text:00000000004074a4\n.text:00000000004074a8\n.text:00000000004074ab\n.text:00000000004074b1\n.text:00000000004074b3\n.text:00000000004074b6\n.text:00000000004074ba\n.text:00000000004074c0\n.text:00000000004074c2\n.text:00000000004074cb\n.text:00000000004074ce\n.text:00000000004074d3\n.text:00000000004074d5\n.text:00000000004074db\n.text:00000000004074de\n.text:00000000004074e5\n.text:00000000004074e9\n.text:00000000004074f0\n.text:00000000004074f3\n.text:00000000004074f9\n.text:00000000004074fe\n.text:0000000000407505\n.text:0000000000407509\n.text:000000000040750b\n.text:000000000040750e\n.text:0000000000407510\n.text:0000000000407517\n.text:000000000040751a\n.text:000000000040751d\n.text:0000000000407522\n.text:0000000000407524\n.text:0000000000407526\n.text:0000000000407529\n.text:0000000000407530\n.text:0000000000407534\n.text:000000000040753b\n.text:000000000040753e\n.text:0000000000407540\n.text:0000000000407545\n.text:000000000040754b\n.text:000000000040754d\n.text:000000000040754f\n.text:0000000000407553\n.text:0000000000407554\n.text:0000000000407556\n.text:0000000000407558\n.text:000000000040755a\n.text:000000000040755c\n.text:000000000040755d\n.text:000000000040755e\n.text:0000000000407565\n.text:0000000000407569\n.text:000000000040756a\n.text:000000000040756c\n.text:000000000040756e\n.text:0000000000407570\n.text:0000000000407572\n.text:0000000000407573\n.text:0000000000407578\n.text:000000000040757a\n.text:000000000040757d\n.text:0000000000407582\n.text:0000000000407584\n.text:0000000000407587\n.text:000000000040758c\n.text:0000000000407591\n.text:0000000000407594\n'
p1091
tp1092
sS'get_monitors'
p1093
(S'\n__stdcall get_monitors()\n'
p1094
V\u000avoid get_monitors(uint uParm1)\u000a\u000a{\u000a  XRRMonitorInfo *pXVar1;\u000a  monitors_t *pmVar2;\u000a  int local_c;\u000a  \u000a  if ((monitors == (monitors_t *)0x0) && (((has_1_5 ^ 1) & 1) == 0)) {\u000a    pXVar1 = (XRRMonitorInfo *)XRRGetMonitors(dpy,root,(ulong)uParm1);\u000a    if (local_c == -1) {\u000a                    /* WARNING: Subroutine does not return */\u000a      fatal("get monitors failed\u005cn");\u000a    }\u000a    pmVar2 = (monitors_t *)calloc(1,0x10);\u000a    monitors = pmVar2;\u000a    pmVar2->n = local_c;\u000a    pmVar2->monitors = pXVar1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1095
S'PUSH RBX\nSUB RSP,0x10\nMOV EAX,EDI\nCMP qword ptr [0x0060d3d0],0x0\nJNZ 0x00407603\nMOV CL,byte ptr [0x0060d3c4]\nXOR CL,0x1\nTEST CL,0x1\nJNZ 0x00407603\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nLEA RCX,[RSP + 0xc]\nMOV EDX,EAX\nCALL 0x00401cc0\nMOV RBX,RAX\nCMP dword ptr [RSP + 0xc],-0x1\nJZ 0x00407609\nMOV EDI,0x1\nMOV ESI,0x10\nCALL 0x00401c60\nMOV qword ptr [0x0060d3d0],RAX\nMOV ECX,dword ptr [RSP + 0xc]\nMOV dword ptr [RAX],ECX\nMOV qword ptr [RAX + 0x8],RBX\nADD RSP,0x10\nPOP RBX\nRET\nMOV EDI,0x40b739\nXOR EAX,EAX\nCALL 0x00406410\n'
p1096
S'53\n48 83 ec 10\n89 f8\n48 83 3d 21 5e 20 00 00\n75 52\n8a 0d 0d 5e 20 00\n80 f1 01\nf6 c1 01\n75 44\n48 8b 3d e2 5d 20 00\n48 8b 35 e3 5d 20 00\n48 8d 4c 24 0c\n89 c2\ne8 e7 a6 ff ff\n48 89 c3\n83 7c 24 0c ff\n74 26\nbf 01 00 00 00\nbe 10 00 00 00\ne8 6e a6 ff ff\n48 89 05 d7 5d 20 00\n8b 4c 24 0c\n89 08\n48 89 58 08\n48 83 c4 10\n5b\nc3\nbf 39 b7 40 00\n31 c0\ne8 fb ed ff ff\n'
p1097
S'.text:00000000004075a0\n.text:00000000004075a1\n.text:00000000004075a5\n.text:00000000004075a7\n.text:00000000004075af\n.text:00000000004075b1\n.text:00000000004075b7\n.text:00000000004075ba\n.text:00000000004075bd\n.text:00000000004075bf\n.text:00000000004075c6\n.text:00000000004075cd\n.text:00000000004075d2\n.text:00000000004075d4\n.text:00000000004075d9\n.text:00000000004075dc\n.text:00000000004075e1\n.text:00000000004075e3\n.text:00000000004075e8\n.text:00000000004075ed\n.text:00000000004075f2\n.text:00000000004075f9\n.text:00000000004075fd\n.text:00000000004075ff\n.text:0000000000407603\n.text:0000000000407607\n.text:0000000000407608\n.text:0000000000407609\n.text:000000000040760e\n.text:0000000000407610\n'
p1098
tp1099
sS'fwrite'
p1100
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1101
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060d280)();\u000a  return sVar1;\u000a}\u000a\u000a
p1102
S'JMP qword ptr [0x0060d280]\n'
p1103
S'ff 25 2a b3 20 00\n'
p1104
S'.plt:0000000000401f50\n'
p1105
tp1106
sS'XRRGetOutputInfo'
p1107
(S'\n__stdcall XRRGetOutputInfo()\n'
p1108
V\u000avoid XRRGetOutputInfo(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetOutputInfo_0060d2b8)();\u000a  return;\u000a}\u000a\u000a
p1109
S'JMP qword ptr [0x0060d2b8]\n'
p1110
S'ff 25 f2 b2 20 00\n'
p1111
S'.plt:0000000000401fc0\n'
p1112
tp1113
sS'XRRCreateMode'
p1114
(S'\n__stdcall XRRCreateMode()\n'
p1115
V\u000avoid XRRCreateMode(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRCreateMode_0060d150)();\u000a  return;\u000a}\u000a\u000a
p1116
S'JMP qword ptr [0x0060d150]\n'
p1117
S'ff 25 5a b4 20 00\n'
p1118
S'.plt:0000000000401cf0\n'
p1119
tp1120
sS'XSync'
p1121
(S'\n__stdcall XSync()\n'
p1122
V\u000avoid XSync(void)\u000a\u000a{\u000a  (*(code *)PTR_XSync_0060d1d8)();\u000a  return;\u000a}\u000a\u000a
p1123
S'JMP qword ptr [0x0060d1d8]\n'
p1124
S'ff 25 d2 b3 20 00\n'
p1125
S'.plt:0000000000401e00\n'
p1126
tp1127
sS'XGetAtomName'
p1128
(S'\n__stdcall XGetAtomName()\n'
p1129
V\u000avoid XGetAtomName(void)\u000a\u000a{\u000a  (*(code *)PTR_XGetAtomName_0060d1d0)();\u000a  return;\u000a}\u000a\u000a
p1130
S'JMP qword ptr [0x0060d1d0]\n'
p1131
S'ff 25 da b3 20 00\n'
p1132
S'.plt:0000000000401df0\n'
p1133
tp1134
sS'get_providers'
p1135
(S'\n__stdcall get_providers()\n'
p1136
V\u000avoid get_providers(void)\u000a\u000a{\u000a  name_t *name;\u000a  provider_t *ppVar1;\u000a  long lVar2;\u000a  long lVar3;\u000a  long lVar4;\u000a  long lVar5;\u000a  \u000a  if ((providers == (provider_t *)0x0) && (((has_1_4 ^ 1) & 1) == 0)) {\u000a    lVar2 = XRRGetProviderResources(dpy,root);\u000a    num_providers = *(int *)(lVar2 + 8);\u000a    providers = (provider_t *)calloc((long)num_providers,0x28);\u000a    if (providers != (provider_t *)0x0) {\u000a      if (0 < num_providers) {\u000a        lVar5 = 0;\u000a        lVar4 = 0;\u000a        do {\u000a          ppVar1 = providers;\u000a          lVar3 = XRRGetProviderInfo(dpy,res,*(undefined8 *)(*(long *)(lVar2 + 0x10) + lVar4 * 8));\u000a          *(long *)((long)&ppVar1->info + lVar5) = lVar3;\u000a          name = (name_t *)((long)&(ppVar1->provider).kind + lVar5);\u000a          set_name_xid(name,*(XID *)(*(long *)(lVar2 + 0x10) + lVar4 * 8));\u000a          set_name_index(name);\u000a          set_name_string(name,*(char **)(lVar3 + 0x20));\u000a          lVar4 = lVar4 + 1;\u000a          lVar5 = lVar5 + 0x28;\u000a        } while (lVar4 < (long)num_providers);\u000a      }\u000a      (*(code *)PTR_XRRFreeProviderResources_0060d198)(lVar2);\u000a      return;\u000a    }\u000a                    /* WARNING: Subroutine does not return */\u000a    fatal("out of memory\u005cn");\u000a  }\u000a  return;\u000a}\u000a\u000a
p1137
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nCMP qword ptr [0x0060d3f0],0x0\nJNZ 0x00406818\nMOV AL,byte ptr [0x0060d3c0]\nXOR AL,0x1\nTEST AL,0x1\nJNZ 0x00406818\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nCALL 0x00401f20\nMOV R14,RAX\nMOVSXD RDI,dword ptr [R14 + 0x8]\nMOV dword ptr [0x0060d3f8],EDI\nMOV ESI,0x28\nCALL 0x00401c60\nMOV qword ptr [0x0060d3f0],RAX\nTEST RAX,RAX\nJZ 0x00406822\nCMP dword ptr [0x0060d3f8],0x0\nJLE 0x00406807\nXOR R13D,R13D\nXOR EBX,EBX\nNOP\nMOV R12,qword ptr [0x0060d3f0]\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3e8]\nMOV RAX,qword ptr [R14 + 0x10]\nMOV RDX,qword ptr [RAX + RBX*0x8]\nCALL 0x00401b70\nMOV R15,RAX\nMOV qword ptr [R12 + R13*0x1 + 0x20],R15\nLEA R12,[R12 + R13*0x1]\nMOV RAX,qword ptr [R14 + 0x10]\nMOV RSI,qword ptr [RAX + RBX*0x8]\nMOV RDI,R12\nCALL 0x00405eb0\nMOV RDI,R12\nMOV ESI,EBX\nCALL 0x00407b80\nMOV RSI,qword ptr [R15 + 0x20]\nMOV RDI,R12\nCALL 0x00407b70\nINC RBX\nMOVSXD RAX,dword ptr [0x0060d3f8]\nADD R13,0x28\nCMP RBX,RAX\nJL 0x004067a0\nMOV RDI,R14\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nJMP 0x00401d80\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV EDI,0x40a5a6\nXOR EAX,EAX\nCALL 0x00406410\n'
p1138
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 3d af 6c 20 00 00\n0f 85 d1 00 00 00\n8a 05 73 6c 20 00\n34 01\na8 01\n0f 85 c1 00 00 00\n48 8b 3d 4a 6c 20 00\n48 8b 35 4b 6c 20 00\ne8 b6 b7 ff ff\n49 89 c6\n49 63 7e 08\n89 3d 81 6c 20 00\nbe 28 00 00 00\ne8 df b4 ff ff\n48 89 05 68 6c 20 00\n48 85 c0\n0f 84 91 00 00 00\n83 3d 60 6c 20 00 00\n7e 6d\n45 31 ed\n31 db\n90\n4c 8b 25 49 6c 20 00\n48 8b 3d fa 6b 20 00\n48 8b 35 33 6c 20 00\n49 8b 46 10\n48 8b 14 d8\ne8 ae b3 ff ff\n49 89 c7\n4f 89 7c 2c 20\n4f 8d 24 2c\n49 8b 46 10\n48 8b 34 d8\n4c 89 e7\ne8 d2 f6 ff ff\n4c 89 e7\n89 de\ne8 98 13 00 00\n49 8b 77 20\n4c 89 e7\ne8 7c 13 00 00\n48 ff c3\n48 63 05 fa 6b 20 00\n49 83 c5 28\n48 39 c3\n7c 99\n4c 89 f7\n5b\n41 5c\n41 5d\n41 5e\n41 5f\ne9 68 b5 ff ff\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\nbf a6 a5 40 00\n31 c0\ne8 e2 fb ff ff\n'
p1139
S'.text:0000000000406730\n.text:0000000000406732\n.text:0000000000406734\n.text:0000000000406736\n.text:0000000000406738\n.text:0000000000406739\n.text:0000000000406741\n.text:0000000000406747\n.text:000000000040674d\n.text:000000000040674f\n.text:0000000000406751\n.text:0000000000406757\n.text:000000000040675e\n.text:0000000000406765\n.text:000000000040676a\n.text:000000000040676d\n.text:0000000000406771\n.text:0000000000406777\n.text:000000000040677c\n.text:0000000000406781\n.text:0000000000406788\n.text:000000000040678b\n.text:0000000000406791\n.text:0000000000406798\n.text:000000000040679a\n.text:000000000040679d\n.text:000000000040679f\n.text:00000000004067a0\n.text:00000000004067a7\n.text:00000000004067ae\n.text:00000000004067b5\n.text:00000000004067b9\n.text:00000000004067bd\n.text:00000000004067c2\n.text:00000000004067c5\n.text:00000000004067ca\n.text:00000000004067ce\n.text:00000000004067d2\n.text:00000000004067d6\n.text:00000000004067d9\n.text:00000000004067de\n.text:00000000004067e1\n.text:00000000004067e3\n.text:00000000004067e8\n.text:00000000004067ec\n.text:00000000004067ef\n.text:00000000004067f4\n.text:00000000004067f7\n.text:00000000004067fe\n.text:0000000000406802\n.text:0000000000406805\n.text:0000000000406807\n.text:000000000040680a\n.text:000000000040680b\n.text:000000000040680d\n.text:000000000040680f\n.text:0000000000406811\n.text:0000000000406813\n.text:0000000000406818\n.text:0000000000406819\n.text:000000000040681b\n.text:000000000040681d\n.text:000000000040681f\n.text:0000000000406821\n.text:0000000000406822\n.text:0000000000406827\n.text:0000000000406829\n'
p1140
tp1141
sS'capability_name'
p1142
(S'\n__stdcall capability_name()\n'
p1143
V\u000achar * capability_name(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 1U < 8) {\u000a    return (&PTR_s_Source_Output_00409c10)[(long)(int)(in_EDI - 1U)];\u000a  }\u000a  return "invalid capability";\u000a}\u000a\u000a
p1144
S'DEC EDI\nCMP EDI,0x7\nJA 0x00407b53\nMOVSXD RAX,EDI\nMOV RAX,qword ptr [0x409c10 + RAX*0x8]\nRET\nMOV EAX,0x40b916\nRET\n'
p1145
S'ff cf\n83 ff 07\n77 0c\n48 63 c7\n48 8b 04 c5 10 9c 40 00\nc3\nb8 16 b9 40 00\nc3\n'
p1146
S'.text:0000000000407b40\n.text:0000000000407b42\n.text:0000000000407b45\n.text:0000000000407b47\n.text:0000000000407b4a\n.text:0000000000407b52\n.text:0000000000407b53\n.text:0000000000407b58\n'
p1147
tp1148
sS'__do_global_dtors_aux'
p1149
(S'\n__stdcall __do_global_dtors_aux()\n'
p1150
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1151
S'CMP byte ptr [0x0060d2e8],0x0\nJNZ 0x0040209a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00402000\nPOP RBP\nMOV byte ptr [0x0060d2e8],0x1\nRET\n'
p1152
S'80 3d 61 b2 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 4e b2 20 00 01\nf3 c3\n'
p1153
S'.text:0000000000402080\n.text:0000000000402087\n.text:0000000000402089\n.text:000000000040208a\n.text:000000000040208d\n.text:0000000000402092\n.text:0000000000402093\n.text:000000000040209a\n'
p1154
tp1155
sS'find_mode'
p1156
(S'\n__stdcall find_mode()\n'
p1157
V\u000aXRRModeInfo * find_mode(void)\u000a\u000a{\u000a  XRRModeInfo *pXVar1;\u000a  uint uVar2;\u000a  XRRModeInfo *pXVar3;\u000a  XRRScreenResources *pXVar4;\u000a  int iVar5;\u000a  long lVar6;\u000a  uint *in_RDI;\u000a  long lVar7;\u000a  XRRModeInfo *local_40;\u000a  \u000a  pXVar4 = res;\u000a  if (res->nmode < 1) {\u000a    local_40 = (XRRModeInfo *)0x0;\u000a  }\u000a  else {\u000a    uVar2 = *in_RDI;\u000a    lVar6 = 0;\u000a    lVar7 = 0;\u000a    local_40 = (XRRModeInfo *)0x0;\u000a    do {\u000a      pXVar3 = pXVar4->modes;\u000a      pXVar1 = (XRRModeInfo *)((long)&pXVar3->id + lVar6);\u000a      if (((uVar2 & 2) != 0) && (*(long *)(in_RDI + 4) == *(long *)((long)&pXVar3->id + lVar6))) {\u000a        return pXVar1;\u000a      }\u000a      if ((((uVar2 & 1) != 0) &&\u000a          (iVar5 = strcmp(*(char **)(in_RDI + 2),*(char **)((long)&pXVar3->name + lVar6)),\u000a          iVar5 == 0)) && (local_40 == (XRRModeInfo *)0x0)) {\u000a        local_40 = pXVar1;\u000a      }\u000a      lVar7 = lVar7 + 1;\u000a      lVar6 = lVar6 + 0x50;\u000a    } while (lVar7 < (long)pXVar4->nmode);\u000a  }\u000a  return local_40;\u000a}\u000a\u000a
p1158
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV RAX,qword ptr [0x0060d3e8]\nCMP dword ptr [RAX + 0x30],0x0\nJLE 0x004063ed\nMOV ESI,dword ptr [RDI]\nMOV R13D,ESI\nAND R13D,0x2\nAND ESI,0x1\nMOV RBX,qword ptr [0x0060d3e8]\nXOR EBP,EBP\nXOR R14D,R14D\nXOR ECX,ECX\nMOV qword ptr [RSP + 0x8],RCX\nMOV dword ptr [RSP + 0x14],ESI\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [RAX + 0x38]\nLEA R15,[RAX + RBP*0x1]\nTEST R13D,R13D\nJZ 0x004063a7\nMOV RCX,qword ptr [RDI + 0x10]\nCMP RCX,qword ptr [RAX + RBP*0x1]\nJZ 0x004063f6\nTEST ESI,ESI\nJZ 0x004063d8\nMOV R12,RDI\nMOV RDI,qword ptr [RDI + 0x8]\nMOV RSI,qword ptr [RAX + RBP*0x1 + 0x38]\nCALL 0x00401c70\nTEST EAX,EAX\nJNZ 0x004063d1\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nCMOVZ RAX,R15\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDI,R12\nMOV ESI,dword ptr [RSP + 0x14]\nINC R14\nMOVSXD RAX,dword ptr [RBX + 0x30]\nADD RBP,0x50\nCMP R14,RAX\nMOV RAX,RBX\nJL 0x00406390\nJMP 0x004063fb\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nJMP 0x004063fb\nMOV qword ptr [RSP + 0x8],R15\nMOV RAX,qword ptr [RSP + 0x8]\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1159
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 8b 05 93 70 20 00\n83 78 30 00\n0f 8e 8e 00 00 00\n8b 37\n41 89 f5\n41 83 e5 02\n83 e6 01\n48 8b 1d 76 70 20 00\n31 ed\n45 31 f6\n31 c9\n48 89 4c 24 08\n89 74 24 14\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 40 38\n4c 8d 3c 28\n45 85 ed\n74 0a\n48 8b 4f 10\n48 3b 0c 28\n74 4f\n85 f6\n74 2d\n49 89 fc\n48 8b 7f 08\n48 8b 74 28 38\ne8 b4 b8 ff ff\n85 c0\n75 11\n48 8b 44 24 08\n48 85 c0\n49 0f 44 c7\n48 89 44 24 08\n4c 89 e7\n8b 74 24 14\n49 ff c6\n48 63 43 30\n48 83 c5 50\n49 39 c6\n48 89 d8\n7c a5\neb 0e\n31 c0\n48 89 44 24 08\neb 05\n4c 89 7c 24 08\n48 8b 44 24 08\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1160
S'.text:0000000000406340\n.text:0000000000406341\n.text:0000000000406343\n.text:0000000000406345\n.text:0000000000406347\n.text:0000000000406349\n.text:000000000040634a\n.text:000000000040634e\n.text:0000000000406355\n.text:0000000000406359\n.text:000000000040635f\n.text:0000000000406361\n.text:0000000000406364\n.text:0000000000406368\n.text:000000000040636b\n.text:0000000000406372\n.text:0000000000406374\n.text:0000000000406377\n.text:0000000000406379\n.text:000000000040637e\n.text:0000000000406382\n.text:0000000000406390\n.text:0000000000406394\n.text:0000000000406398\n.text:000000000040639b\n.text:000000000040639d\n.text:00000000004063a1\n.text:00000000004063a5\n.text:00000000004063a7\n.text:00000000004063a9\n.text:00000000004063ab\n.text:00000000004063ae\n.text:00000000004063b2\n.text:00000000004063b7\n.text:00000000004063bc\n.text:00000000004063be\n.text:00000000004063c0\n.text:00000000004063c5\n.text:00000000004063c8\n.text:00000000004063cc\n.text:00000000004063d1\n.text:00000000004063d4\n.text:00000000004063d8\n.text:00000000004063db\n.text:00000000004063df\n.text:00000000004063e3\n.text:00000000004063e6\n.text:00000000004063e9\n.text:00000000004063eb\n.text:00000000004063ed\n.text:00000000004063ef\n.text:00000000004063f4\n.text:00000000004063f6\n.text:00000000004063fb\n.text:0000000000406400\n.text:0000000000406404\n.text:0000000000406405\n.text:0000000000406407\n.text:0000000000406409\n.text:000000000040640b\n.text:000000000040640d\n.text:000000000040640e\n'
p1161
tp1162
sS'screen_revert'
p1163
(S'\n__stdcall screen_revert()\n'
p1164
V\u000avoid screen_revert(void)\u000a\u000a{\u000a  Screen *pSVar1;\u000a  long lVar2;\u000a  \u000a  if (verbose == 1) {\u000a    printf("screen %d: revert\u005cn",(ulong)(uint)screen);\u000a  }\u000a  if (dryrun != 0) {\u000a    return;\u000a  }\u000a  pSVar1 = dpy->screens;\u000a  lVar2 = (long)screen;\u000a  (*(code *)PTR_XRRSetScreenSize_0060d0f8)\u000a            (dpy,root,(ulong)(uint)pSVar1[lVar2].width,(ulong)(uint)pSVar1[lVar2].height,\u000a             (ulong)(uint)pSVar1[lVar2].mwidth,(ulong)(uint)pSVar1[lVar2].mheight);\u000a  return;\u000a}\u000a\u000a
p1165
S'CMP byte ptr [0x0060d2f8],0x1\nJNZ 0x00409600\nPUSH RAX\nMOV ESI,dword ptr [0x0060d2d0]\nMOV EDI,0x40b6a5\nXOR EAX,EAX\nCALL 0x00401bb0\nADD RSP,0x8\nMOV AL,byte ptr [0x0060d2fc]\nTEST AL,AL\nJZ 0x0040960b\nRET\nMOV RDI,qword ptr [0x0060d3a8]\nMOV RSI,qword ptr [0x0060d3b0]\nMOV R9,qword ptr [0xe8 + RDI]\nMOVSXD RAX,dword ptr [0x0060d2d0]\nSHL RAX,0x7\nMOV EDX,dword ptr [R9 + RAX*0x1 + 0x18]\nMOV ECX,dword ptr [R9 + RAX*0x1 + 0x1c]\nMOV R8D,dword ptr [R9 + RAX*0x1 + 0x20]\nMOV R9D,dword ptr [R9 + RAX*0x1 + 0x24]\nJMP 0x00401c40\n'
p1166
S'80 3d 11 3d 20 00 01\n75 17\n50\n8b 35 e0 3c 20 00\nbf a5 b6 40 00\n31 c0\ne8 b4 85 ff ff\n48 83 c4 08\n8a 05 f6 3c 20 00\n84 c0\n74 01\nc3\n48 8b 3d 96 3d 20 00\n48 8b 35 97 3d 20 00\n4c 8b 8f e8 00 00 00\n48 63 05 a9 3c 20 00\n48 c1 e0 07\n41 8b 54 01 18\n41 8b 4c 01 1c\n45 8b 44 01 20\n45 8b 4c 01 24\ne9 fc 85 ff ff\n'
p1167
S'.text:00000000004095e0\n.text:00000000004095e7\n.text:00000000004095e9\n.text:00000000004095ea\n.text:00000000004095f0\n.text:00000000004095f5\n.text:00000000004095f7\n.text:00000000004095fc\n.text:0000000000409600\n.text:0000000000409606\n.text:0000000000409608\n.text:000000000040960a\n.text:000000000040960b\n.text:0000000000409612\n.text:0000000000409619\n.text:0000000000409620\n.text:0000000000409627\n.text:000000000040962b\n.text:0000000000409630\n.text:0000000000409635\n.text:000000000040963a\n.text:000000000040963f\n'
p1168
tp1169
sS'_fini'
p1170
(S'\n__stdcall _fini()\n'
p1171
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1172
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1173
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1174
S'.fini:00000000004098d4\n.fini:00000000004098d8\n.fini:00000000004098dc\n'
p1175
tp1176
sS'XRRGetProviderResources'
p1177
(S'\n__stdcall XRRGetProviderResources()\n'
p1178
V\u000avoid XRRGetProviderResources(void)\u000a\u000a{\u000a  (*(code *)PTR_XRRGetProviderResources_0060d268)();\u000a  return;\u000a}\u000a\u000a
p1179
S'JMP qword ptr [0x0060d268]\n'
p1180
S'ff 25 42 b3 20 00\n'
p1181
S'.plt:0000000000401f20\n'
p1182
tp1183
sS'check_strtol'
p1184
(S'\n__stdcall check_strtol(char * s)\n'
p1185
V\u000aint check_strtol(char *s)\u000a\u000a{\u000a  long lVar1;\u000a  char *endptr;\u000a  char *local_10;\u000a  \u000a  lVar1 = strtol(s,&local_10,10);\u000a  if (local_10 != s) {\u000a    return (int)lVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  argerr("failed to parse \u005c'%s\u005c' as a number\u005cn",s);\u000a}\u000a\u000a
p1186
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nLEA RSI,[RSP + 0x8]\nMOV EDX,0xa\nCALL 0x00401cd0\nCMP qword ptr [RSP + 0x8],RBX\nJZ 0x00405ce4\nADD RSP,0x10\nPOP RBX\nRET\nMOV EDI,0x40b18a\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x00405bc0\n'
p1187
S'53\n48 83 ec 10\n48 89 fb\n48 8d 74 24 08\nba 0a 00 00 00\ne8 f9 bf ff ff\n48 39 5c 24 08\n74 06\n48 83 c4 10\n5b\nc3\nbf 8a b1 40 00\n31 c0\n48 89 de\ne8 cd fe ff ff\n'
p1188
S'.text:0000000000405cc0\n.text:0000000000405cc1\n.text:0000000000405cc5\n.text:0000000000405cc8\n.text:0000000000405ccd\n.text:0000000000405cd2\n.text:0000000000405cd7\n.text:0000000000405cdc\n.text:0000000000405cde\n.text:0000000000405ce2\n.text:0000000000405ce3\n.text:0000000000405ce4\n.text:0000000000405ce9\n.text:0000000000405ceb\n.text:0000000000405cee\n'
p1189
tp1190
sS'init_name'
p1191
(S'\n__stdcall init_name(name_t * name)\n'
p1192
V\u000avoid init_name(name_t *name)\u000a\u000a{\u000a  name->kind = name_none;\u000a  return;\u000a}\u000a\u000a
p1193
S'MOV dword ptr [RDI],0x0\nRET\n'
p1194
S'c7 07 00 00 00 00\nc3\n'
p1195
S'.text:0000000000407b60\n.text:0000000000407b66\n'
p1196
tp1197
sS'set_output_info'
p1198
(S'\n__stdcall set_output_info(output_t * output, RROutput xid, XRROutputInfo * output_info)\n'
p1199
V\u000a/* WARNING: Removing unreachable block (ram,0x00408043) */\u000a/* WARNING: Removing unreachable block (ram,0x0040804f) */\u000a\u000avoid set_output_info(output_t *output,RROutput xid,XRROutputInfo *output_info)\u000a\u000a{\u000a  name_t *name;\u000a  byte bVar1;\u000a  name_kind_t nVar2;\u000a  double dVar3;\u000a  int iVar4;\u000a  crtc_t *crtc;\u000a  XRRModeInfo *mode;\u000a  char *pcVar5;\u000a  char *pcVar6;\u000a  ushort uVar7;\u000a  RRMode xid_00;\u000a  char *__format;\u000a  double dVar8;\u000a  \u000a  if ((output_info->connection != 1) && (output_info->nmode == 0)) {\u000a    warning("Output %s is not disconnected but has no modes\u005cn");\u000a  }\u000a  name = &output->output;\u000a  if ((*(byte *)&(output->output).kind & 2) == 0) {\u000a    set_name_xid(name,xid);\u000a  }\u000a  if ((*(byte *)&name->kind & 1) == 0) {\u000a    set_name_string(name,output_info->name);\u000a  }\u000a  output->output_info = output_info;\u000a  if ((*(byte *)&output->changes & 1) == 0) {\u000a    set_name_xid(&output->crtc,output_info->crtc);\u000a  }\u000a  if (((output->crtc).kind == name_xid) && ((output->crtc).xid == 0)) {\u000a    output->crtc_info = (crtc_t *)0x0;\u000a    if ((*(byte *)&output->changes & 2) == 0) goto LAB_00407d07;\u000aLAB_00407d62:\u000a    nVar2 = (output->mode).kind;\u000a    if (nVar2 != name_preferred) {\u000a      if ((nVar2 != name_xid) || ((output->mode).xid != 0)) {\u000a        mode = find_mode_for_output(output,&output->mode);\u000a        goto LAB_00407d9a;\u000a      }\u000a      goto LAB_00407e2d;\u000a    }\u000a    mode = preferred_mode(output);\u000aLAB_00407d9a:\u000a    output->mode_info = mode;\u000a    if (mode == (XRRModeInfo *)0x0) {\u000a      nVar2 = (output->mode).kind;\u000a      if ((nVar2 & name_preferred) != name_none) {\u000a                    /* WARNING: Subroutine does not return */\u000a        fatal("cannot find preferred mode\u005cn");\u000a      }\u000a      if ((nVar2 & name_string) != name_none) {\u000a                    /* WARNING: Subroutine does not return */\u000a        fatal("cannot find mode %s\u005cn",(output->mode).string);\u000a      }\u000a      if ((nVar2 & name_xid) != name_none) {\u000a                    /* WARNING: Subroutine does not return */\u000a        fatal("cannot find mode 0x%lx\u005cn",(output->mode).xid);\u000a      }\u000a    }\u000a    mode = output->mode_info;\u000a    iVar4 = output_can_use_mode(output,mode);\u000a    if (iVar4 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      fatal("output %s cannot use mode %s\u005cn",(output->output).string,mode->name);\u000a    }\u000a  }\u000a  else {\u000a    crtc = find_crtc(&output->crtc);\u000a    output->crtc_info = crtc;\u000a    if (crtc == (crtc_t *)0x0) {\u000a      nVar2 = (output->crtc).kind;\u000a      if ((nVar2 & name_xid) != name_none) {\u000a                    /* WARNING: Subroutine does not return */\u000a        fatal("cannot find crtc 0x%lx\u005cn",(output->crtc).xid);\u000a      }\u000a      if ((nVar2 & name_index) != name_none) {\u000a                    /* WARNING: Subroutine does not return */\u000a        fatal("cannot find crtc %d\u005cn",(ulong)(uint)(output->crtc).index);\u000a      }\u000a    }\u000a    crtc = output->crtc_info;\u000a    iVar4 = output_can_use_crtc(output,crtc);\u000a    if (iVar4 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      fatal("output %s cannot use crtc 0x%lx\u005cn",(output->output).string,(crtc->crtc).xid);\u000a    }\u000a    if ((*(byte *)&output->changes & 2) != 0) goto LAB_00407d62;\u000aLAB_00407d07:\u000a    if (((output_info->crtc == 0) ||\u000a        (crtc = find_crtc_by_xid(output_info->crtc), crtc == (crtc_t *)0x0)) ||\u000a       (crtc->crtc_info == (XRRCrtcInfo *)0x0)) {\u000a      if (output->crtc_info == (crtc_t *)0x0) {\u000a        xid_00 = 0;\u000a      }\u000a      else {\u000a        xid_00 = output->crtc_info->crtc_info->mode;\u000a      }\u000a    }\u000a    else {\u000a      xid_00 = crtc->crtc_info->mode;\u000a    }\u000a    set_name_xid(&output->mode,xid_00);\u000a    xid_00 = (output->mode).xid;\u000a    if (xid_00 == 0) {\u000aLAB_00407e2d:\u000a      output->mode_info = (XRRModeInfo *)0x0;\u000a    }\u000a    else {\u000a      mode = find_mode_by_xid(xid_00);\u000a      output->mode_info = mode;\u000a      if (mode == (XRRModeInfo *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        fatal("server did not report mode 0x%lx for output %s\u005cn",(output->mode).xid,\u000a              (output->output).string);\u000a      }\u000a    }\u000a  }\u000a  if ((*(byte *)&output->changes & 8) == 0) {\u000a    crtc = output->crtc_info;\u000a    if (crtc == (crtc_t *)0x0) {\u000a      output->x = 0;\u000a      iVar4 = 0;\u000a    }\u000a    else {\u000a      output->x = crtc->crtc_info->x;\u000a      iVar4 = crtc->crtc_info->y;\u000a    }\u000a    output->y = iVar4;\u000a  }\u000a  if ((output->changes & changes_rotation) == changes_none) {\u000a    uVar7 = output->rotation & 0xfff0;\u000a    output->rotation = uVar7;\u000a    if (output->crtc_info == (crtc_t *)0x0) {\u000a      uVar7 = 1;\u000a    }\u000a    else {\u000a      uVar7 = uVar7 | output->crtc_info->crtc_info->rotation & 0xf;\u000a    }\u000a    output->rotation = uVar7;\u000a  }\u000a  if ((output->changes & changes_reflection) == changes_none) {\u000a    uVar7 = output->rotation & 0xffcf;\u000a    output->rotation = uVar7;\u000a    if (output->crtc_info != (crtc_t *)0x0) {\u000a      output->rotation = uVar7 | output->crtc_info->crtc_info->rotation & 0x30;\u000a    }\u000a  }\u000a  iVar4 = output_can_use_rotation(output);\u000a  if (iVar4 == 0) {\u000a    __format = (output->output).string;\u000a    pcVar5 = rotation_name();\u000a    pcVar6 = reflection_name();\u000a                    /* WARNING: Subroutine does not return */\u000a    fatal("output %s cannot use rotation \u005c"%s\u005c" reflection \u005c"%s\u005c"\u005cn",__format,pcVar5,pcVar6);\u000a  }\u000a  if ((*(byte *)((long)&output->changes + 1) & 8) == 0) {\u000a    set_gamma_info(output);\u000a  }\u000a  if ((*(byte *)((long)&output->changes + 1) & 2) == 0) {\u000a    if (output->crtc_info != (crtc_t *)0x0) {\u000a      copy_transform(&output->transform,&output->crtc_info->current_transform);\u000a      bVar1 = *(byte *)((long)&output->changes + 1);\u000a      goto joined_r0x00408088;\u000a    }\u000a    init_transform(&output->transform);\u000a  }\u000a  else {\u000a    if ((0 < output->scale_from_w) && (mode = output->mode_info, mode != (XRRModeInfo *)0x0)) {\u000a      __format = (char *)((double)output->scale_from_w / (double)(ulong)mode->width);\u000a      dVar8 = (double)output->scale_from_h / (double)(ulong)mode->height;\u000a      if (verbose == 1) {\u000a        printf(__format,dVar8,"scaling %s by %lfx%lf\u005cn",(output->output).string);\u000a      }\u000a      init_transform(&output->transform);\u000a      dVar3 = DAT_00409900;\u000a      (output->transform).transform.matrix[0] = (int)((double)__format * DAT_00409900);\u000a      (output->transform).transform.matrix[4] = (int)(dVar3 * dVar8);\u000a      (output->transform).transform.matrix[8] = 0x10000;\u000a      pcVar5 = "nearest";\u000a      if (dVar8 != DAT_00409908) {\u000a        pcVar5 = "bilinear";\u000a      }\u000a      if ((double)__format != DAT_00409908) {\u000a        pcVar5 = "bilinear";\u000a      }\u000a      (output->transform).filter = pcVar5;\u000a      (output->transform).nparams = 0;\u000a      (output->transform).params = (XFixed *)0x0;\u000a      bVar1 = *(byte *)((long)&output->changes + 1);\u000a      goto joined_r0x00408088;\u000a    }\u000a  }\u000a  bVar1 = *(byte *)((long)&output->changes + 1);\u000ajoined_r0x00408088:\u000a  if ((bVar1 & 0x10) == 0) {\u000a    iVar4 = output_is_primary(output);\u000a    output->primary = iVar4;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1200
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RDX\nMOV R15,RSI\nMOV R12,RDI\nMOVZX EAX,word ptr [R14 + 0x30]\nCMP EAX,0x1\nJZ 0x00407c66\nCMP dword ptr [R14 + 0x50],0x0\nJNZ 0x00407c66\nMOV RSI,qword ptr [R14 + 0x10]\nMOV EDI,0x40b2d2\nXOR EAX,EAX\nCALL 0x00408150\nLEA RBX,[R12 + 0x18]\nTEST byte ptr [R12 + 0x18],0x2\nJNZ 0x00407c7e\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00405eb0\nTEST byte ptr [RBX],0x1\nJNZ 0x00407c8f\nMOV RSI,qword ptr [R14 + 0x10]\nMOV RDI,RBX\nCALL 0x00407b70\nMOV qword ptr [R12 + 0x38],R14\nTEST byte ptr [R12 + 0x8],0x1\nJNZ 0x00407caa\nLEA RDI,[R12 + 0x40]\nMOV RSI,qword ptr [R14 + 0x8]\nCALL 0x00405eb0\nCMP dword ptr [R12 + 0x40],0x2\nJNZ 0x00407cbe\nCMP qword ptr [R12 + 0x50],0x0\nJZ 0x00407d51\nLEA RBX,[R12 + 0x40]\nMOV RDI,RBX\nCALL 0x00408210\nMOV qword ptr [R12 + 0x60],RAX\nTEST RAX,RAX\nJNZ 0x00407ce7\nMOV EAX,dword ptr [RBX]\nTEST AL,0x2\nJNZ 0x004080f0\nTEST AL,0x4\nJNZ 0x00408101\nMOV RBX,qword ptr [R12 + 0x60]\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x004082d0\nTEST EAX,EAX\nJZ 0x004080db\nTEST byte ptr [R12 + 0x8],0x2\nJNZ 0x00407d62\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00407d31\nCALL 0x00407730\nTEST RAX,RAX\nJZ 0x00407d31\nMOV RAX,qword ptr [RAX + 0x28]\nTEST RAX,RAX\nJZ 0x00407d31\nLEA RDI,[R12 + 0x70]\nMOV RSI,qword ptr [RAX + 0x18]\nJMP 0x00407df0\nMOV RAX,qword ptr [R12 + 0x60]\nLEA RDI,[R12 + 0x70]\nTEST RAX,RAX\nJZ 0x00407dee\nMOV RAX,qword ptr [RAX + 0x28]\nMOV RSI,qword ptr [RAX + 0x18]\nJMP 0x00407df0\nMOV qword ptr [R12 + 0x60],0x0\nTEST byte ptr [R12 + 0x8],0x2\nJZ 0x00407d07\nLEA R14,[R12 + 0x70]\nMOV EAX,dword ptr [R12 + 0x70]\nCMP EAX,0x8\nJZ 0x00407d92\nCMP EAX,0x2\nJNZ 0x00407d85\nCMP qword ptr [0x80 + R12],0x0\nJZ 0x00407e2d\nMOV RDI,R12\nMOV RSI,R14\nCALL 0x004083f0\nJMP 0x00407d9a\nMOV RDI,R12\nCALL 0x00408310\nMOV qword ptr [0x98 + R12],RAX\nTEST RAX,RAX\nJNZ 0x00407dc2\nMOV EAX,dword ptr [R14]\nTEST AL,0x8\nJNZ 0x00408112\nTEST AL,0x1\nJNZ 0x0040811e\nTEST AL,0x2\nJNZ 0x0040812f\nMOV RBX,qword ptr [0x98 + R12]\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00408520\nTEST EAX,EAX\nJNZ 0x00407e39\nMOV RSI,qword ptr [R12 + 0x20]\nMOV RDX,qword ptr [RBX + 0x38]\nMOV EDI,0x40b3c9\nXOR EAX,EAX\nCALL 0x00406410\nXOR ESI,ESI\nCALL 0x00405eb0\nMOV RDI,qword ptr [0x80 + R12]\nTEST RDI,RDI\nJZ 0x00407e2d\nCALL 0x00407960\nMOV qword ptr [0x98 + R12],RAX\nTEST RAX,RAX\nJNZ 0x00407e39\nMOV RDX,qword ptr [R12 + 0x20]\nMOV RSI,qword ptr [0x80 + R12]\nMOV EDI,0x40b350\nXOR EAX,EAX\nCALL 0x00406410\nMOV qword ptr [0x98 + R12],0x0\nTEST byte ptr [R12 + 0x8],0x8\nJNZ 0x00407e79\nMOV RAX,qword ptr [R12 + 0x60]\nTEST RAX,RAX\nJZ 0x00407e63\nMOV RCX,qword ptr [RAX + 0x28]\nMOV ECX,dword ptr [RCX + 0x8]\nMOV dword ptr [0xd0 + R12],ECX\nMOV RAX,qword ptr [RAX + 0x28]\nMOV EAX,dword ptr [RAX + 0xc]\nJMP 0x00407e71\nMOV dword ptr [0xd0 + R12],0x0\nXOR EAX,EAX\nMOV dword ptr [0xd4 + R12],EAX\nMOV EAX,dword ptr [R12 + 0x8]\nTEST AL,0x10\nJNZ 0x00407ec0\nMOVZX ECX,word ptr [0xd8 + R12]\nAND ECX,0xfff0\nMOV word ptr [0xd8 + R12],CX\nMOV RDX,qword ptr [R12 + 0x60]\nTEST RDX,RDX\nJZ 0x00407eb3\nMOV RDX,qword ptr [RDX + 0x28]\nMOVZX EDX,word ptr [RDX + 0x20]\nAND EDX,0xf\nOR ECX,EDX\nJMP 0x00407eb7\nMOV CX,0x1\nMOV word ptr [0xd8 + R12],CX\nTEST AL,0x20\nJNZ 0x00407efb\nMOVZX EAX,word ptr [0xd8 + R12]\nAND EAX,0xffcf\nMOV word ptr [0xd8 + R12],AX\nMOV RCX,qword ptr [R12 + 0x60]\nTEST RCX,RCX\nJZ 0x00407efb\nMOV RCX,qword ptr [RCX + 0x28]\nMOVZX ECX,word ptr [RCX + 0x20]\nAND ECX,0x30\nOR EAX,ECX\nMOV word ptr [0xd8 + R12],AX\nMOVZX ESI,word ptr [0xd8 + R12]\nMOV RDI,R12\nCALL 0x00408560\nTEST EAX,EAX\nJZ 0x004080a7\nTEST byte ptr [R12 + 0x9],0x8\nJNZ 0x00407f24\nMOV RDI,R12\nCALL 0x004085c0\nTEST byte ptr [R12 + 0x9],0x2\nJNZ 0x00407f5c\nMOV RSI,qword ptr [R12 + 0x60]\nLEA RDI,[0x128 + R12]\nTEST RSI,RSI\nJZ 0x0040807d\nADD RSI,0x60\nCALL 0x00407bf0\nTEST byte ptr [R12 + 0x9],0x10\nJZ 0x0040808a\nJMP 0x0040809a\nMOV EAX,dword ptr [0x11c + R12]\nTEST EAX,EAX\nJLE 0x00408082\nMOV RCX,qword ptr [0x98 + R12]\nTEST RCX,RCX\nJZ 0x00408082\nCVTSI2SD XMM1,EAX\nMOV EAX,dword ptr [RCX + 0x8]\nMOV ECX,dword ptr [RCX + 0xc]\nCVTSI2SD XMM0,RAX\nDIVSD XMM1,XMM0\nMOVSD qword ptr [RSP + 0x8],XMM1\nXORPS XMM1,XMM1\nCVTSI2SD XMM1,dword ptr [0x120 + R12]\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,RCX\nDIVSD XMM1,XMM0\nMOVSD qword ptr [RSP],XMM1\nCMP byte ptr [0x0060d2f8],0x1\nJNZ 0x00407fd9\nMOV RSI,qword ptr [R12 + 0x20]\nMOV EDI,0x40b41b\nMOV AL,0x2\nMOVSD XMM0,qword ptr [RSP + 0x8]\nMOVSD XMM1,qword ptr [RSP]\nCALL 0x00401bb0\nLEA RDI,[0x128 + R12]\nCALL 0x00405e60\nMOVSD XMM0,qword ptr [0x00409900]\nMOVSD XMM2,qword ptr [RSP + 0x8]\nMOVAPD XMM1,XMM2\nMULSD XMM1,XMM0\nCVTTSD2SI EAX,XMM1\nMOV dword ptr [0x128 + R12],EAX\nMOVSD XMM1,qword ptr [RSP]\nMULSD XMM0,XMM1\nCVTTSD2SI EAX,XMM0\nMOV dword ptr [0x138 + R12],EAX\nMOV dword ptr [0x148 + R12],0x10000\nMOVSD XMM0,qword ptr [0x00409908]\nUCOMISD XMM1,XMM0\nMOV EAX,0x409f79\nMOV ECX,0x409f82\nCMOVNZ RCX,RAX\nCMOVP RCX,RAX\nUCOMISD XMM2,XMM0\nCMOVNZ RCX,RAX\nCMOVP RCX,RAX\nMOV qword ptr [0x150 + R12],RCX\nMOV dword ptr [0x158 + R12],0x0\nMOV qword ptr [0x160 + R12],0x0\nTEST byte ptr [R12 + 0x9],0x10\nJZ 0x0040808a\nJMP 0x0040809a\nCALL 0x00405e60\nTEST byte ptr [R12 + 0x9],0x10\nJNZ 0x0040809a\nMOV RDI,R12\nCALL 0x00408970\nMOV dword ptr [0x178 + R12],EAX\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R14,qword ptr [R12 + 0x20]\nMOVZX EBP,word ptr [0xd8 + R12]\nMOV EDI,EBP\nCALL 0x004076a0\nMOV RBX,RAX\nMOV EDI,EBP\nCALL 0x004076d0\nMOV RCX,RAX\nMOV EDI,0x40b3e7\nXOR EAX,EAX\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x00406410\nMOV RSI,qword ptr [R12 + 0x20]\nMOV RDX,qword ptr [RBX + 0x10]\nMOV EDI,0x40b32f\nXOR EAX,EAX\nCALL 0x00406410\nMOV RSI,qword ptr [R12 + 0x50]\nMOV EDI,0x40b302\nXOR EAX,EAX\nCALL 0x00406410\nMOV ESI,dword ptr [R12 + 0x58]\nMOV EDI,0x40b31a\nXOR EAX,EAX\nCALL 0x00406410\nMOV EDI,0x40b380\nXOR EAX,EAX\nCALL 0x00406410\nMOV RSI,qword ptr [R12 + 0x78]\nMOV EDI,0x40b39c\nXOR EAX,EAX\nCALL 0x00406410\nMOV RSI,qword ptr [0x80 + R12]\nMOV EDI,0x40b3b1\nXOR EAX,EAX\nCALL 0x00406410\n'
p1201
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n49 89 d6\n49 89 f7\n49 89 fc\n41 0f b7 46 30\n83 f8 01\n74 17\n41 83 7e 50 00\n75 10\n49 8b 76 10\nbf d2 b2 40 00\n31 c0\ne8 ea 04 00 00\n49 8d 5c 24 18\n41 f6 44 24 18 02\n75 0b\n48 89 df\n4c 89 fe\ne8 32 e2 ff ff\nf6 03 01\n75 0c\n49 8b 76 10\n48 89 df\ne8 e1 fe ff ff\n4d 89 74 24 38\n41 f6 44 24 08 01\n75 0e\n49 8d 7c 24 40\n49 8b 76 08\ne8 06 e2 ff ff\n41 83 7c 24 40 02\n75 0c\n49 83 7c 24 50 00\n0f 84 93 00 00 00\n49 8d 5c 24 40\n48 89 df\ne8 45 05 00 00\n49 89 44 24 60\n48 85 c0\n75 12\n8b 03\na8 02\n0f 85 11 04 00 00\na8 04\n0f 85 1a 04 00 00\n49 8b 5c 24 60\n4c 89 e7\n48 89 de\ne8 d9 05 00 00\n85 c0\n0f 84 dc 03 00 00\n41 f6 44 24 08 02\n75 5b\n49 8b 7e 08\n48 85 ff\n74 21\ne8 1b fa ff ff\n48 85 c0\n74 17\n48 8b 40 28\n48 85 c0\n74 0e\n49 8d 7c 24 70\n48 8b 70 18\ne9 bf 00 00 00\n49 8b 44 24 60\n49 8d 7c 24 70\n48 85 c0\n0f 84 aa 00 00 00\n48 8b 40 28\n48 8b 70 18\ne9 9f 00 00 00\n49 c7 44 24 60 00 00 00 00\n41 f6 44 24 08 02\n74 a5\n4d 8d 74 24 70\n41 8b 44 24 70\n83 f8 08\n74 21\n83 f8 02\n75 0f\n49 83 bc 24 80 00 00 00 00\n0f 84 a8 00 00 00\n4c 89 e7\n4c 89 f6\ne8 60 06 00 00\neb 08\n4c 89 e7\ne8 76 05 00 00\n49 89 84 24 98 00 00 00\n48 85 c0\n75 1b\n41 8b 06\na8 08\n0f 85 60 03 00 00\na8 01\n0f 85 64 03 00 00\na8 02\n0f 85 6d 03 00 00\n49 8b 9c 24 98 00 00 00\n4c 89 e7\n48 89 de\ne8 4b 07 00 00\n85 c0\n75 60\n49 8b 74 24 20\n48 8b 53 38\nbf c9 b3 40 00\n31 c0\ne8 22 e6 ff ff\n31 f6\ne8 bb e0 ff ff\n49 8b bc 24 80 00 00 00\n48 85 ff\n74 2b\ne8 59 fb ff ff\n49 89 84 24 98 00 00 00\n48 85 c0\n75 25\n49 8b 54 24 20\n49 8b b4 24 80 00 00 00\nbf 50 b3 40 00\n31 c0\ne8 e3 e5 ff ff\n49 c7 84 24 98 00 00 00 00 00 00 00\n41 f6 44 24 08 08\n75 38\n49 8b 44 24 60\n48 85 c0\n74 18\n48 8b 48 28\n8b 49 08\n41 89 8c 24 d0 00 00 00\n48 8b 40 28\n8b 40 0c\neb 0e\n41 c7 84 24 d0 00 00 00 00 00 00 00\n31 c0\n41 89 84 24 d4 00 00 00\n41 8b 44 24 08\na8 10\n75 3e\n41 0f b7 8c 24 d8 00 00 00\n81 e1 f0 ff 00 00\n66 41 89 8c 24 d8 00 00 00\n49 8b 54 24 60\n48 85 d2\n74 0f\n48 8b 52 28\n0f b7 52 20\n83 e2 0f\n09 d1\neb 04\n66 b9 01 00\n66 41 89 8c 24 d8 00 00 00\na8 20\n75 37\n41 0f b7 84 24 d8 00 00 00\n25 cf ff 00 00\n66 41 89 84 24 d8 00 00 00\n49 8b 4c 24 60\n48 85 c9\n74 16\n48 8b 49 28\n0f b7 49 20\n83 e1 30\n09 c8\n66 41 89 84 24 d8 00 00 00\n41 0f b7 b4 24 d8 00 00 00\n4c 89 e7\ne8 54 06 00 00\n85 c0\n0f 84 93 01 00 00\n41 f6 44 24 09 08\n75 08\n4c 89 e7\ne8 9c 06 00 00\n41 f6 44 24 09 02\n75 30\n49 8b 74 24 60\n49 8d bc 24 28 01 00 00\n48 85 f6\n0f 84 3b 01 00 00\n48 83 c6 60\ne8 a5 fc ff ff\n41 f6 44 24 09 10\n0f 84 33 01 00 00\ne9 3e 01 00 00\n41 8b 84 24 1c 01 00 00\n85 c0\n0f 8e 16 01 00 00\n49 8b 8c 24 98 00 00 00\n48 85 c9\n0f 84 05 01 00 00\nf2 0f 2a c8\n8b 41 08\n8b 49 0c\nf2 48 0f 2a c0\nf2 0f 5e c8\nf2 0f 11 4c 24 08\n0f 57 c9\nf2 41 0f 2a 8c 24 20 01 00 00\n0f 57 c0\nf2 48 0f 2a c1\nf2 0f 5e c8\nf2 0f 11 0c 24\n80 3d 3d 53 20 00 01\n75 1c\n49 8b 74 24 20\nbf 1b b4 40 00\nb0 02\nf2 0f 10 44 24 08\nf2 0f 10 0c 24\ne8 d7 9b ff ff\n49 8d bc 24 28 01 00 00\ne8 7a de ff ff\nf2 0f 10 05 12 19 00 00\nf2 0f 10 54 24 08\n66 0f 28 ca\nf2 0f 59 c8\nf2 0f 2c c1\n41 89 84 24 28 01 00 00\nf2 0f 10 0c 24\nf2 0f 59 c1\nf2 0f 2c c0\n41 89 84 24 38 01 00 00\n41 c7 84 24 48 01 00 00 00 00 01 00\nf2 0f 10 05 d7 18 00 00\n66 0f 2e c8\nb8 79 9f 40 00\nb9 82 9f 40 00\n48 0f 45 c8\n48 0f 4a c8\n66 0f 2e d0\n48 0f 45 c8\n48 0f 4a c8\n49 89 8c 24 50 01 00 00\n41 c7 84 24 58 01 00 00 00 00 00 00\n49 c7 84 24 60 01 00 00 00 00 00 00\n41 f6 44 24 09 10\n74 0f\neb 1d\ne8 de dd ff ff\n41 f6 44 24 09 10\n75 10\n4c 89 e7\ne8 de 08 00 00\n41 89 84 24 78 01 00 00\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n4d 8b 74 24 20\n41 0f b7 ac 24 d8 00 00 00\n89 ef\ne8 e4 f5 ff ff\n48 89 c3\n89 ef\ne8 0a f6 ff ff\n48 89 c1\nbf e7 b3 40 00\n31 c0\n4c 89 f6\n48 89 da\ne8 35 e3 ff ff\n49 8b 74 24 20\n48 8b 53 10\nbf 2f b3 40 00\n31 c0\ne8 20 e3 ff ff\n49 8b 74 24 50\nbf 02 b3 40 00\n31 c0\ne8 0f e3 ff ff\n41 8b 74 24 58\nbf 1a b3 40 00\n31 c0\ne8 fe e2 ff ff\nbf 80 b3 40 00\n31 c0\ne8 f2 e2 ff ff\n49 8b 74 24 78\nbf 9c b3 40 00\n31 c0\ne8 e1 e2 ff ff\n49 8b b4 24 80 00 00 00\nbf b1 b3 40 00\n31 c0\ne8 cd e2 ff ff\n'
p1202
S'.text:0000000000407c30\n.text:0000000000407c31\n.text:0000000000407c33\n.text:0000000000407c35\n.text:0000000000407c37\n.text:0000000000407c38\n.text:0000000000407c3c\n.text:0000000000407c3f\n.text:0000000000407c42\n.text:0000000000407c45\n.text:0000000000407c4a\n.text:0000000000407c4d\n.text:0000000000407c4f\n.text:0000000000407c54\n.text:0000000000407c56\n.text:0000000000407c5a\n.text:0000000000407c5f\n.text:0000000000407c61\n.text:0000000000407c66\n.text:0000000000407c6b\n.text:0000000000407c71\n.text:0000000000407c73\n.text:0000000000407c76\n.text:0000000000407c79\n.text:0000000000407c7e\n.text:0000000000407c81\n.text:0000000000407c83\n.text:0000000000407c87\n.text:0000000000407c8a\n.text:0000000000407c8f\n.text:0000000000407c94\n.text:0000000000407c9a\n.text:0000000000407c9c\n.text:0000000000407ca1\n.text:0000000000407ca5\n.text:0000000000407caa\n.text:0000000000407cb0\n.text:0000000000407cb2\n.text:0000000000407cb8\n.text:0000000000407cbe\n.text:0000000000407cc3\n.text:0000000000407cc6\n.text:0000000000407ccb\n.text:0000000000407cd0\n.text:0000000000407cd3\n.text:0000000000407cd5\n.text:0000000000407cd7\n.text:0000000000407cd9\n.text:0000000000407cdf\n.text:0000000000407ce1\n.text:0000000000407ce7\n.text:0000000000407cec\n.text:0000000000407cef\n.text:0000000000407cf2\n.text:0000000000407cf7\n.text:0000000000407cf9\n.text:0000000000407cff\n.text:0000000000407d05\n.text:0000000000407d07\n.text:0000000000407d0b\n.text:0000000000407d0e\n.text:0000000000407d10\n.text:0000000000407d15\n.text:0000000000407d18\n.text:0000000000407d1a\n.text:0000000000407d1e\n.text:0000000000407d21\n.text:0000000000407d23\n.text:0000000000407d28\n.text:0000000000407d2c\n.text:0000000000407d31\n.text:0000000000407d36\n.text:0000000000407d3b\n.text:0000000000407d3e\n.text:0000000000407d44\n.text:0000000000407d48\n.text:0000000000407d4c\n.text:0000000000407d51\n.text:0000000000407d5a\n.text:0000000000407d60\n.text:0000000000407d62\n.text:0000000000407d67\n.text:0000000000407d6c\n.text:0000000000407d6f\n.text:0000000000407d71\n.text:0000000000407d74\n.text:0000000000407d76\n.text:0000000000407d7f\n.text:0000000000407d85\n.text:0000000000407d88\n.text:0000000000407d8b\n.text:0000000000407d90\n.text:0000000000407d92\n.text:0000000000407d95\n.text:0000000000407d9a\n.text:0000000000407da2\n.text:0000000000407da5\n.text:0000000000407da7\n.text:0000000000407daa\n.text:0000000000407dac\n.text:0000000000407db2\n.text:0000000000407db4\n.text:0000000000407dba\n.text:0000000000407dbc\n.text:0000000000407dc2\n.text:0000000000407dca\n.text:0000000000407dcd\n.text:0000000000407dd0\n.text:0000000000407dd5\n.text:0000000000407dd7\n.text:0000000000407dd9\n.text:0000000000407dde\n.text:0000000000407de2\n.text:0000000000407de7\n.text:0000000000407de9\n.text:0000000000407dee\n.text:0000000000407df0\n.text:0000000000407df5\n.text:0000000000407dfd\n.text:0000000000407e00\n.text:0000000000407e02\n.text:0000000000407e07\n.text:0000000000407e0f\n.text:0000000000407e12\n.text:0000000000407e14\n.text:0000000000407e19\n.text:0000000000407e21\n.text:0000000000407e26\n.text:0000000000407e28\n.text:0000000000407e2d\n.text:0000000000407e39\n.text:0000000000407e3f\n.text:0000000000407e41\n.text:0000000000407e46\n.text:0000000000407e49\n.text:0000000000407e4b\n.text:0000000000407e4f\n.text:0000000000407e52\n.text:0000000000407e5a\n.text:0000000000407e5e\n.text:0000000000407e61\n.text:0000000000407e63\n.text:0000000000407e6f\n.text:0000000000407e71\n.text:0000000000407e79\n.text:0000000000407e7e\n.text:0000000000407e80\n.text:0000000000407e82\n.text:0000000000407e8b\n.text:0000000000407e91\n.text:0000000000407e9a\n.text:0000000000407e9f\n.text:0000000000407ea2\n.text:0000000000407ea4\n.text:0000000000407ea8\n.text:0000000000407eac\n.text:0000000000407eaf\n.text:0000000000407eb1\n.text:0000000000407eb3\n.text:0000000000407eb7\n.text:0000000000407ec0\n.text:0000000000407ec2\n.text:0000000000407ec4\n.text:0000000000407ecd\n.text:0000000000407ed2\n.text:0000000000407edb\n.text:0000000000407ee0\n.text:0000000000407ee3\n.text:0000000000407ee5\n.text:0000000000407ee9\n.text:0000000000407eed\n.text:0000000000407ef0\n.text:0000000000407ef2\n.text:0000000000407efb\n.text:0000000000407f04\n.text:0000000000407f07\n.text:0000000000407f0c\n.text:0000000000407f0e\n.text:0000000000407f14\n.text:0000000000407f1a\n.text:0000000000407f1c\n.text:0000000000407f1f\n.text:0000000000407f24\n.text:0000000000407f2a\n.text:0000000000407f2c\n.text:0000000000407f31\n.text:0000000000407f39\n.text:0000000000407f3c\n.text:0000000000407f42\n.text:0000000000407f46\n.text:0000000000407f4b\n.text:0000000000407f51\n.text:0000000000407f57\n.text:0000000000407f5c\n.text:0000000000407f64\n.text:0000000000407f66\n.text:0000000000407f6c\n.text:0000000000407f74\n.text:0000000000407f77\n.text:0000000000407f7d\n.text:0000000000407f81\n.text:0000000000407f84\n.text:0000000000407f87\n.text:0000000000407f8c\n.text:0000000000407f90\n.text:0000000000407f96\n.text:0000000000407f99\n.text:0000000000407fa3\n.text:0000000000407fa6\n.text:0000000000407fab\n.text:0000000000407faf\n.text:0000000000407fb4\n.text:0000000000407fbb\n.text:0000000000407fbd\n.text:0000000000407fc2\n.text:0000000000407fc7\n.text:0000000000407fc9\n.text:0000000000407fcf\n.text:0000000000407fd4\n.text:0000000000407fd9\n.text:0000000000407fe1\n.text:0000000000407fe6\n.text:0000000000407fee\n.text:0000000000407ff4\n.text:0000000000407ff8\n.text:0000000000407ffc\n.text:0000000000408000\n.text:0000000000408008\n.text:000000000040800d\n.text:0000000000408011\n.text:0000000000408015\n.text:000000000040801d\n.text:0000000000408029\n.text:0000000000408031\n.text:0000000000408035\n.text:000000000040803a\n.text:000000000040803f\n.text:0000000000408043\n.text:0000000000408047\n.text:000000000040804b\n.text:000000000040804f\n.text:0000000000408053\n.text:000000000040805b\n.text:0000000000408067\n.text:0000000000408073\n.text:0000000000408079\n.text:000000000040807b\n.text:000000000040807d\n.text:0000000000408082\n.text:0000000000408088\n.text:000000000040808a\n.text:000000000040808d\n.text:0000000000408092\n.text:000000000040809a\n.text:000000000040809e\n.text:000000000040809f\n.text:00000000004080a1\n.text:00000000004080a3\n.text:00000000004080a5\n.text:00000000004080a6\n.text:00000000004080a7\n.text:00000000004080ac\n.text:00000000004080b5\n.text:00000000004080b7\n.text:00000000004080bc\n.text:00000000004080bf\n.text:00000000004080c1\n.text:00000000004080c6\n.text:00000000004080c9\n.text:00000000004080ce\n.text:00000000004080d0\n.text:00000000004080d3\n.text:00000000004080d6\n.text:00000000004080db\n.text:00000000004080e0\n.text:00000000004080e4\n.text:00000000004080e9\n.text:00000000004080eb\n.text:00000000004080f0\n.text:00000000004080f5\n.text:00000000004080fa\n.text:00000000004080fc\n.text:0000000000408101\n.text:0000000000408106\n.text:000000000040810b\n.text:000000000040810d\n.text:0000000000408112\n.text:0000000000408117\n.text:0000000000408119\n.text:000000000040811e\n.text:0000000000408123\n.text:0000000000408128\n.text:000000000040812a\n.text:000000000040812f\n.text:0000000000408137\n.text:000000000040813c\n.text:000000000040813e\n'
p1203
tp1204
sS'print_output_property'
p1205
(S'\n__stdcall print_output_property(char * atom_name, Atom value_type, uchar * prop)\n'
p1206
V\u000avoid print_output_property(char *atom_name,Atom value_type,uchar *prop)\u000a\u000a{\u000a  int iVar1;\u000a  uint in_ECX;\u000a  ulong uVar2;\u000a  uchar *prop_00;\u000a  int iVar3;\u000a  \u000a  iVar3 = (int)(value_type & 0xffffffff);\u000a  if (((iVar3 != 8) && (iVar3 != 0x20)) && (iVar3 != 0x10)) {\u000a    return;\u000a  }\u000a  iVar1 = strcmp(atom_name,"EDID");\u000a  if (((prop == (uchar *)0x13) && (iVar3 == 8)) && (iVar1 == 0)) {\u000a    print_edid((uchar *)(ulong)in_ECX);\u000a    return;\u000a  }\u000a  iVar1 = strcmp(atom_name,"GUID");\u000a  if (((in_ECX == 0x10) && (prop == (uchar *)0x13)) && ((iVar3 == 8 && (iVar1 == 0)))) {\u000a    print_guid(prop_00);\u000a    return;\u000a  }\u000a  if (0 < (int)in_ECX) {\u000a    uVar2 = 0;\u000a    do {\u000a      if ((uVar2 != 0) && ((uVar2 & 0xf) == 0)) {\u000a        printf("\u005cn\u005ct\u005ct");\u000a      }\u000a      print_output_property_value(value_type & 0xffffffff,prop);\u000a      putchar(0x20);\u000a      uVar2 = uVar2 + 1;\u000a    } while ((ulong)in_ECX != uVar2);\u000a  }\u000a  putchar(10);\u000a  return;\u000a}\u000a\u000a
p1207
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,R8\nMOV R15D,ECX\nMOV R14,RDX\nMOV R12D,ESI\nMOV RBP,RDI\nCMP R12D,0x8\nJZ 0x004077a8\nCMP R12D,0x20\nJZ 0x004077b0\nCMP R12D,0x10\nJNZ 0x00407825\nMOV R13D,0x2\nJMP 0x004077b6\nMOV R13D,0x1\nJMP 0x004077b6\nMOV R13D,0x8\nMOV ESI,0x40b7f3\nMOV RDI,RBP\nCALL 0x00401c70\nCMP R14,0x13\nJNZ 0x004077ec\nCMP R12D,0x8\nJNZ 0x004077ec\nTEST EAX,EAX\nJNZ 0x004077ec\nMOV EDI,R15D\nMOV RSI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00409750\nMOV ESI,0x40b7f8\nMOV RDI,RBP\nCALL 0x00401c70\nCMP R15D,0x10\nJNZ 0x00407834\nCMP R14,0x13\nJNZ 0x00407834\nCMP R12D,0x8\nJNZ 0x00407834\nTEST EAX,EAX\nJNZ 0x00407834\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004097c0\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nTEST R15D,R15D\nJLE 0x0040787e\nMOV R15D,R15D\nXOR EBP,EBP\nNOP\nTEST RBP,RBP\nJZ 0x0040785b\nMOV EAX,EBP\nAND EAX,0xf\nTEST RAX,RAX\nJNZ 0x0040785b\nMOV EDI,0x40b7fd\nXOR EAX,EAX\nCALL 0x00401bb0\nMOV EDI,R12D\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x004078a0\nMOV EDI,0x20\nCALL 0x00401aa0\nINC RBP\nADD RBX,R13\nCMP R15,RBP\nJNZ 0x00407840\nMOV EDI,0xa\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401aa0\n'
p1208
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4c 89 c3\n41 89 cf\n49 89 d6\n41 89 f4\n48 89 fd\n41 83 fc 08\n74 18\n41 83 fc 20\n74 1a\n41 83 fc 10\n0f 85 85 00 00 00\n41 bd 02 00 00 00\neb 0e\n41 bd 01 00 00 00\neb 06\n41 bd 08 00 00 00\nbe f3 b7 40 00\n48 89 ef\ne8 ad a4 ff ff\n49 83 fe 13\n75 23\n41 83 fc 08\n75 1d\n85 c0\n75 19\n44 89 ff\n48 89 de\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 64 1f 00 00\nbe f8 b7 40 00\n48 89 ef\ne8 77 a4 ff ff\n41 83 ff 10\n75 35\n49 83 fe 13\n75 2f\n41 83 fc 08\n75 29\n85 c0\n75 25\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 9b 1f 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 85 ff\n7e 45\n45 89 ff\n31 ed\n66 90\n48 85 ed\n74 16\n89 e8\n83 e0 0f\n48 85 c0\n75 0c\nbf fd b7 40 00\n31 c0\ne8 55 a3 ff ff\n44 89 e7\n4c 89 f6\n48 89 da\ne8 37 00 00 00\nbf 20 00 00 00\ne8 2d a2 ff ff\n48 ff c5\n4c 01 eb\n49 39 ef\n75 c2\nbf 0a 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 0a a2 ff ff\n'
p1209
S'.text:0000000000407770\n.text:0000000000407771\n.text:0000000000407773\n.text:0000000000407775\n.text:0000000000407777\n.text:0000000000407779\n.text:000000000040777a\n.text:000000000040777b\n.text:000000000040777e\n.text:0000000000407781\n.text:0000000000407784\n.text:0000000000407787\n.text:000000000040778a\n.text:000000000040778e\n.text:0000000000407790\n.text:0000000000407794\n.text:0000000000407796\n.text:000000000040779a\n.text:00000000004077a0\n.text:00000000004077a6\n.text:00000000004077a8\n.text:00000000004077ae\n.text:00000000004077b0\n.text:00000000004077b6\n.text:00000000004077bb\n.text:00000000004077be\n.text:00000000004077c3\n.text:00000000004077c7\n.text:00000000004077c9\n.text:00000000004077cd\n.text:00000000004077cf\n.text:00000000004077d1\n.text:00000000004077d3\n.text:00000000004077d6\n.text:00000000004077d9\n.text:00000000004077dd\n.text:00000000004077de\n.text:00000000004077e0\n.text:00000000004077e2\n.text:00000000004077e4\n.text:00000000004077e6\n.text:00000000004077e7\n.text:00000000004077ec\n.text:00000000004077f1\n.text:00000000004077f4\n.text:00000000004077f9\n.text:00000000004077fd\n.text:00000000004077ff\n.text:0000000000407803\n.text:0000000000407805\n.text:0000000000407809\n.text:000000000040780b\n.text:000000000040780d\n.text:000000000040780f\n.text:0000000000407812\n.text:0000000000407816\n.text:0000000000407817\n.text:0000000000407819\n.text:000000000040781b\n.text:000000000040781d\n.text:000000000040781f\n.text:0000000000407820\n.text:0000000000407825\n.text:0000000000407829\n.text:000000000040782a\n.text:000000000040782c\n.text:000000000040782e\n.text:0000000000407830\n.text:0000000000407832\n.text:0000000000407833\n.text:0000000000407834\n.text:0000000000407837\n.text:0000000000407839\n.text:000000000040783c\n.text:000000000040783e\n.text:0000000000407840\n.text:0000000000407843\n.text:0000000000407845\n.text:0000000000407847\n.text:000000000040784a\n.text:000000000040784d\n.text:000000000040784f\n.text:0000000000407854\n.text:0000000000407856\n.text:000000000040785b\n.text:000000000040785e\n.text:0000000000407861\n.text:0000000000407864\n.text:0000000000407869\n.text:000000000040786e\n.text:0000000000407873\n.text:0000000000407876\n.text:0000000000407879\n.text:000000000040787c\n.text:000000000040787e\n.text:0000000000407883\n.text:0000000000407887\n.text:0000000000407888\n.text:000000000040788a\n.text:000000000040788c\n.text:000000000040788e\n.text:0000000000407890\n.text:0000000000407891\n'
p1210
tp1211
s.