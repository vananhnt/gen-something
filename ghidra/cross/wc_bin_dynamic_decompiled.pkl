(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060a178)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0060a178]\n'
p4
S'ff 25 62 87 20 00\n'
p5
S'.plt:0000000000401a10\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_004077db,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x4055a7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x405628;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x4056bc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00405438\nMOV EDX,0x4077c8\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401b40\nJMP 0x0040544d\nMOV EDX,0x4077d4\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401b40\nXOR EDI,EDI\nMOV ESI,0x4077db\nMOV EDX,0x5\nCALL 0x00401830\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x407ab0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401b40\nXOR EDI,EDI\nMOV ESI,0x4077df\nMOV EDX,0x5\nCALL 0x00401830\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401940\nCMP R12,0x9\nJA 0x004054d6\nJMP qword ptr [0x407778 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x4078aa\nMOV EDX,0x5\nCALL 0x00401830\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b40\nXOR EDI,EDI\nMOV ESI,0x4079e9\nMOV EDX,0x5\nCALL 0x00401830\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b40\nADD RSP,0x38\nJMP 0x00405747\nXOR EDI,EDI\nMOV ESI,0x4078ba\nMOV EDX,0x5\nCALL 0x00401830\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b40\nXOR EDI,EDI\nMOV ESI,0x4078d1\nMOV EDX,0x5\nCALL 0x00401830\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b40\nXOR EDI,EDI\nMOV ESI,0x4078ed\nMOV EDX,0x5\nCALL 0x00401830\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b40\nADD RSP,0x18\nJMP 0x00405747\nXOR EDI,EDI\nMOV ESI,0x40790d\nMOV EDX,0x5\nCALL 0x00401830\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b40\nADD RSP,0x18\nJMP 0x00405747\nXOR EDI,EDI\nMOV ESI,0x407931\nMOV EDX,0x5\nCALL 0x00401830\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b40\nADD RSP,0x28\nJMP 0x00405747\nXOR EDI,EDI\nMOV ESI,0x407959\nMOV EDX,0x5\nCALL 0x00401830\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b40\nADD RSP,0x28\nJMP 0x00405747\nXOR EDI,EDI\nMOV ESI,0x407985\nMOV EDX,0x5\nCALL 0x00401830\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b40\nADD RSP,0x38\nJMP 0x00405747\nXOR EDI,EDI\nMOV ESI,0x4079b5\nMOV EDX,0x5\nCALL 0x00401830\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b40\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401770\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba c8 77 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 0a c7 ff ff\neb 15\nba d4 77 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 f3 c6 ff ff\n31 ff\nbe db 77 40 00\nba 05 00 00 00\ne8 d2 c3 ff ff\n48 89 c1\nbe 01 00 00 00\nba b0 7a 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 c5 c6 ff ff\n31 ff\nbe df 77 40 00\nba 05 00 00 00\ne8 a4 c3 ff ff\n48 89 c7\n4c 89 f6\ne8 a9 c4 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 78 77 40 00\n31 ff\nbe aa 78 40 00\nba 05 00 00 00\ne8 7a c3 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 6a c6 ff ff\n31 ff\nbe e9 79 40 00\nba 05 00 00 00\ne8 49 c3 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 21 c6 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe ba 78 40 00\nba 05 00 00 00\ne8 f7 c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 e3 c5 ff ff\n31 ff\nbe d1 78 40 00\nba 05 00 00 00\ne8 c2 c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 aa c5 ff ff\n31 ff\nbe ed 78 40 00\nba 05 00 00 00\ne8 89 c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 74 c5 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 0d 79 40 00\nba 05 00 00 00\ne8 4a c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 32 c5 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 31 79 40 00\nba 05 00 00 00\ne8 08 c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 e8 c4 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 59 79 40 00\nba 05 00 00 00\ne8 be c1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 9e c4 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 85 79 40 00\nba 05 00 00 00\ne8 74 c1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 4c c4 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe b5 79 40 00\nba 05 00 00 00\ne8 25 c1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 fd c3 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 1c c0 ff ff\n'
p12
S'.text:0000000000405400\n.text:0000000000405402\n.text:0000000000405404\n.text:0000000000405406\n.text:0000000000405407\n.text:0000000000405408\n.text:000000000040540b\n.text:000000000040540e\n.text:0000000000405411\n.text:0000000000405414\n.text:0000000000405417\n.text:000000000040541a\n.text:000000000040541f\n.text:0000000000405422\n.text:0000000000405424\n.text:0000000000405429\n.text:000000000040542b\n.text:000000000040542e\n.text:0000000000405431\n.text:0000000000405436\n.text:0000000000405438\n.text:000000000040543d\n.text:000000000040543f\n.text:0000000000405442\n.text:0000000000405445\n.text:0000000000405448\n.text:000000000040544d\n.text:000000000040544f\n.text:0000000000405454\n.text:0000000000405459\n.text:000000000040545e\n.text:0000000000405461\n.text:0000000000405466\n.text:000000000040546b\n.text:0000000000405471\n.text:0000000000405473\n.text:0000000000405476\n.text:000000000040547b\n.text:000000000040547d\n.text:0000000000405482\n.text:0000000000405487\n.text:000000000040548c\n.text:000000000040548f\n.text:0000000000405492\n.text:0000000000405497\n.text:000000000040549b\n.text:000000000040549d\n.text:00000000004054a5\n.text:00000000004054a7\n.text:00000000004054ac\n.text:00000000004054b1\n.text:00000000004054b6\n.text:00000000004054b9\n.text:00000000004054bc\n.text:00000000004054c1\n.text:00000000004054c3\n.text:00000000004054c6\n.text:00000000004054ca\n.text:00000000004054cb\n.text:00000000004054cd\n.text:00000000004054cf\n.text:00000000004054d1\n.text:00000000004054d6\n.text:00000000004054d8\n.text:00000000004054dd\n.text:00000000004054e2\n.text:00000000004054e7\n.text:00000000004054ea\n.text:00000000004054ed\n.text:00000000004054f1\n.text:00000000004054f5\n.text:00000000004054fa\n.text:00000000004054ff\n.text:0000000000405502\n.text:0000000000405506\n.text:000000000040550a\n.text:000000000040550e\n.text:0000000000405512\n.text:0000000000405516\n.text:000000000040551a\n.text:000000000040551f\n.text:0000000000405523\n.text:0000000000405528\n.text:000000000040552a\n.text:000000000040552f\n.text:0000000000405534\n.text:0000000000405539\n.text:000000000040553c\n.text:000000000040553f\n.text:0000000000405543\n.text:0000000000405548\n.text:000000000040554a\n.text:000000000040554d\n.text:0000000000405551\n.text:0000000000405552\n.text:0000000000405554\n.text:0000000000405556\n.text:0000000000405558\n.text:000000000040555d\n.text:000000000040555f\n.text:0000000000405564\n.text:0000000000405569\n.text:000000000040556e\n.text:0000000000405571\n.text:0000000000405574\n.text:0000000000405578\n.text:000000000040557c\n.text:0000000000405581\n.text:0000000000405583\n.text:0000000000405586\n.text:000000000040558a\n.text:000000000040558b\n.text:000000000040558d\n.text:000000000040558f\n.text:0000000000405591\n.text:0000000000405596\n.text:0000000000405598\n.text:000000000040559d\n.text:00000000004055a2\n.text:00000000004055a7\n.text:00000000004055aa\n.text:00000000004055ad\n.text:00000000004055b1\n.text:00000000004055b5\n.text:00000000004055b9\n.text:00000000004055be\n.text:00000000004055c0\n.text:00000000004055c3\n.text:00000000004055c7\n.text:00000000004055cc\n.text:00000000004055d0\n.text:00000000004055d5\n.text:00000000004055d7\n.text:00000000004055dc\n.text:00000000004055e1\n.text:00000000004055e6\n.text:00000000004055e9\n.text:00000000004055ec\n.text:00000000004055f0\n.text:00000000004055f4\n.text:00000000004055f9\n.text:00000000004055fe\n.text:0000000000405601\n.text:0000000000405605\n.text:0000000000405609\n.text:000000000040560e\n.text:0000000000405612\n.text:0000000000405617\n.text:0000000000405619\n.text:000000000040561e\n.text:0000000000405623\n.text:0000000000405628\n.text:000000000040562b\n.text:000000000040562e\n.text:0000000000405632\n.text:0000000000405636\n.text:000000000040563a\n.text:000000000040563f\n.text:0000000000405644\n.text:0000000000405647\n.text:000000000040564b\n.text:000000000040564f\n.text:0000000000405653\n.text:0000000000405658\n.text:000000000040565c\n.text:0000000000405661\n.text:0000000000405663\n.text:0000000000405668\n.text:000000000040566d\n.text:0000000000405672\n.text:0000000000405675\n.text:0000000000405678\n.text:000000000040567c\n.text:0000000000405680\n.text:0000000000405685\n.text:000000000040568a\n.text:000000000040568d\n.text:0000000000405691\n.text:0000000000405695\n.text:0000000000405699\n.text:000000000040569d\n.text:00000000004056a2\n.text:00000000004056a6\n.text:00000000004056ab\n.text:00000000004056ad\n.text:00000000004056b2\n.text:00000000004056b7\n.text:00000000004056bc\n.text:00000000004056bf\n.text:00000000004056c2\n.text:00000000004056c6\n.text:00000000004056ca\n.text:00000000004056ce\n.text:00000000004056d3\n.text:00000000004056d8\n.text:00000000004056db\n.text:00000000004056df\n.text:00000000004056e3\n.text:00000000004056e7\n.text:00000000004056eb\n.text:00000000004056ef\n.text:00000000004056f4\n.text:00000000004056f8\n.text:00000000004056fa\n.text:00000000004056fc\n.text:0000000000405701\n.text:0000000000405706\n.text:000000000040570b\n.text:000000000040570e\n.text:0000000000405711\n.text:0000000000405715\n.text:0000000000405719\n.text:000000000040571e\n.text:0000000000405723\n.text:0000000000405726\n.text:000000000040572a\n.text:000000000040572e\n.text:0000000000405732\n.text:0000000000405736\n.text:000000000040573a\n.text:000000000040573e\n.text:0000000000405743\n.text:0000000000405747\n.text:0000000000405748\n.text:000000000040574a\n.text:000000000040574c\n.text:000000000040574e\n.text:000000000040574f\n'
p13
tp14
sS'strchr'
p15
(S'\n__stdcall strchr(char * __s, int __c)\n'
p16
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0060a0b0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p17
S'JMP qword ptr [0x0060a0b0]\n'
p18
S'ff 25 2a 88 20 00\n'
p19
S'.plt:0000000000401880\n'
p20
tp21
sS'rpl_fclose'
p22
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p23
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00405b99;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00405b99:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004019b0\nTEST EAX,EAX\nJS 0x00405b99\nMOV RDI,RBX\nCALL 0x00401a30\nTEST EAX,EAX\nJZ 0x00405b67\nMOV RDI,RBX\nCALL 0x004019b0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x004018a0\nCMP RAX,-0x1\nJZ 0x00405b99\nMOV RDI,RBX\nCALL 0x00405bb0\nTEST EAX,EAX\nJZ 0x00405b99\nCALL 0x00401780\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401810\nTEST EBP,EBP\nJZ 0x00405b92\nCALL 0x00401780\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401810\n'
p25
S'55\n53\n50\n48 89 fb\ne8 75 be ff ff\n85 c0\n78 5a\n48 89 df\ne8 e9 be ff ff\n85 c0\n74 1c\n48 89 df\ne8 5d be ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 3f bd ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 08 bc ff ff\n8b 28\n48 89 df\ne8 8e bc ff ff\n85 ed\n74 0c\ne8 f5 bb ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 69 bc ff ff\n'
p26
S'.text:0000000000405b30\n.text:0000000000405b31\n.text:0000000000405b32\n.text:0000000000405b33\n.text:0000000000405b36\n.text:0000000000405b3b\n.text:0000000000405b3d\n.text:0000000000405b3f\n.text:0000000000405b42\n.text:0000000000405b47\n.text:0000000000405b49\n.text:0000000000405b4b\n.text:0000000000405b4e\n.text:0000000000405b53\n.text:0000000000405b55\n.text:0000000000405b5a\n.text:0000000000405b5c\n.text:0000000000405b61\n.text:0000000000405b65\n.text:0000000000405b67\n.text:0000000000405b6a\n.text:0000000000405b6f\n.text:0000000000405b71\n.text:0000000000405b73\n.text:0000000000405b78\n.text:0000000000405b7a\n.text:0000000000405b7d\n.text:0000000000405b82\n.text:0000000000405b84\n.text:0000000000405b86\n.text:0000000000405b8b\n.text:0000000000405b8d\n.text:0000000000405b92\n.text:0000000000405b96\n.text:0000000000405b97\n.text:0000000000405b98\n.text:0000000000405b99\n.text:0000000000405b9c\n.text:0000000000405ba0\n.text:0000000000405ba1\n.text:0000000000405ba2\n'
p27
tp28
sS'to_uchar'
p29
(S'\n__stdcall to_uchar()\n'
p30
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p31
S'MOV EAX,EDI\nRET\n'
p32
S'89 f8\nc3\n'
p33
S'.text:00000000004032d0\n.text:00000000004032d2\n'
p34
tp35
sS'strncmp'
p36
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p37
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060a038)();\u000a  return iVar1;\u000a}\u000a\u000a
p38
S'JMP qword ptr [0x0060a038]\n'
p39
S'ff 25 a2 88 20 00\n'
p40
S'.plt:0000000000401790\n'
p41
tp42
sS'xnrealloc'
p43
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p44
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p45
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00405954\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00405960\nPUSH RAX\nCALL 0x00405ab0\n'
p46
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p47
S'.text:0000000000405940\n.text:0000000000405943\n.text:0000000000405946\n.text:0000000000405949\n.text:000000000040594b\n.text:000000000040594f\n.text:0000000000405952\n.text:0000000000405954\n.text:0000000000405955\n'
p48
tp49
sS'quote'
p50
(S'\n__stdcall quote(char * arg)\n'
p51
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p52
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404c20\n'
p53
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p54
S'.text:0000000000404c30\n.text:0000000000404c33\n.text:0000000000404c35\n.text:0000000000404c38\n'
p55
tp56
sS'emit_bug_reporting_address'
p57
(S'\n__stdcall emit_bug_reporting_address()\n'
p58
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p59
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x407a25\nMOV EDX,0x5\nCALL 0x00401830\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x407a3a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401a70\nXOR EDI,EDI\nMOV ESI,0x407a50\nMOV EDX,0x5\nCALL 0x00401830\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406e22\nMOV ECX,0x407064\nXOR EAX,EAX\nCALL 0x00401a70\nXOR EDI,EDI\nMOV ESI,0x407a64\nMOV EDX,0x5\nCALL 0x00401830\nMOV RSI,qword ptr [0x0060a2c8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401940\n'
p60
S'50\n31 ff\nbe 25 7a 40 00\nba 05 00 00 00\ne8 9e bf ff ff\n48 89 c1\nbf 01 00 00 00\nba 3a 7a 40 00\n31 c0\n48 89 ce\ne8 c7 c1 ff ff\n31 ff\nbe 50 7a 40 00\nba 05 00 00 00\ne8 76 bf ff ff\n48 89 c6\nbf 01 00 00 00\nba 22 6e 40 00\nb9 64 70 40 00\n31 c0\ne8 9d c1 ff ff\n31 ff\nbe 64 7a 40 00\nba 05 00 00 00\ne8 4c bf ff ff\n48 8b 35 dd 49 20 00\n48 89 c7\n58\ne9 4c c0 ff ff\n'
p61
S'.text:0000000000405880\n.text:0000000000405881\n.text:0000000000405883\n.text:0000000000405888\n.text:000000000040588d\n.text:0000000000405892\n.text:0000000000405895\n.text:000000000040589a\n.text:000000000040589f\n.text:00000000004058a1\n.text:00000000004058a4\n.text:00000000004058a9\n.text:00000000004058ab\n.text:00000000004058b0\n.text:00000000004058b5\n.text:00000000004058ba\n.text:00000000004058bd\n.text:00000000004058c2\n.text:00000000004058c7\n.text:00000000004058cc\n.text:00000000004058ce\n.text:00000000004058d3\n.text:00000000004058d5\n.text:00000000004058da\n.text:00000000004058df\n.text:00000000004058e4\n.text:00000000004058eb\n.text:00000000004058ee\n.text:00000000004058ef\n'
p62
tp63
sS'clone_quoting_options'
p64
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p65
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p66
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401780\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60a370\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00405a60\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p67
S'55\n41 56\n53\n48 89 fb\ne8 84 df ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 70 a3 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 45 22 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p68
S'.text:00000000004037f0\n.text:00000000004037f1\n.text:00000000004037f3\n.text:00000000004037f4\n.text:00000000004037f7\n.text:00000000004037fc\n.text:00000000004037ff\n.text:0000000000403802\n.text:0000000000403805\n.text:000000000040380a\n.text:000000000040380e\n.text:0000000000403813\n.text:0000000000403816\n.text:000000000040381b\n.text:000000000040381e\n.text:000000000040381f\n.text:0000000000403821\n.text:0000000000403822\n'
p69
tp70
sS'xmalloc'
p71
(S'\n__stdcall xmalloc(size_t n)\n'
p72
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p73
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004019e0\nTEST RBX,RBX\nJZ 0x00405933\nTEST RAX,RAX\nJZ 0x00405935\nPOP RBX\nRET\nCALL 0x00405ab0\n'
p74
S'53\n48 89 fb\ne8 b7 c0 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p75
S'.text:0000000000405920\n.text:0000000000405921\n.text:0000000000405924\n.text:0000000000405929\n.text:000000000040592c\n.text:000000000040592e\n.text:0000000000405931\n.text:0000000000405933\n.text:0000000000405934\n.text:0000000000405935\n'
p76
tp77
sS'quotearg_char_mem'
p78
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p79
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p80
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060a3a0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060a390]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a380]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a370]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00403850\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404740\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p81
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 38 59 20 00\n48 89 4c 24 30\n0f 10 05 1c 59 20 00\n0f 29 44 24 20\n0f 10 05 00 59 20 00\n0f 29 44 24 10\n0f 10 05 e4 58 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p82
S'.text:0000000000404a50\n.text:0000000000404a52\n.text:0000000000404a54\n.text:0000000000404a55\n.text:0000000000404a59\n.text:0000000000404a5b\n.text:0000000000404a5e\n.text:0000000000404a61\n.text:0000000000404a68\n.text:0000000000404a6d\n.text:0000000000404a74\n.text:0000000000404a79\n.text:0000000000404a80\n.text:0000000000404a85\n.text:0000000000404a8c\n.text:0000000000404a90\n.text:0000000000404a93\n.text:0000000000404a98\n.text:0000000000404a9b\n.text:0000000000404a9d\n.text:0000000000404aa2\n.text:0000000000404aa4\n.text:0000000000404aa7\n.text:0000000000404aaa\n.text:0000000000404aad\n.text:0000000000404ab2\n.text:0000000000404ab6\n.text:0000000000404ab7\n.text:0000000000404ab9\n.text:0000000000404abb\n'
p83
tp84
sS'frame_dummy'
p85
(S'\n__stdcall frame_dummy()\n'
p86
V\u000a/* WARNING: Removing unreachable block (ram,0x00401c7a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p87
S'MOV EDI,0x609e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401c70\nJMP 0x00401c00\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401c6b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401c00\n'
p88
S'bf 18 9e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p89
S'.text:0000000000401c60\n.text:0000000000401c65\n.text:0000000000401c69\n.text:0000000000401c6b\n.text:0000000000401c70\n.text:0000000000401c75\n.text:0000000000401c78\n.text:0000000000401c7a\n.text:0000000000401c7b\n.text:0000000000401c7e\n.text:0000000000401c80\n.text:0000000000401c81\n'
p90
tp91
sS'_obstack_begin_1'
p92
(S'\n__stdcall _obstack_begin_1(obstack * h, size_t size, size_t alignment, anon_subr_void_ptr_void_ptr_size_t * chunkfun, anon_subr_void_void_ptr_void_ptr * freefun, void * arg)\n'
p93
V\u000aint _obstack_begin_1(obstack *h,size_t size,size_t alignment,void *(*chunkfun)(void *,size_t),\u000a                    void (*freefun)(void *,void *),void *arg)\u000a\u000a{\u000a  *(void *(**)(void *,size_t))&h->chunkfun = chunkfun;\u000a  *(void (**)(void *,void *))&h->freefun = freefun;\u000a  h->extra_arg = arg;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield | 1;\u000a  _obstack_begin_worker();\u000a  return 1;\u000a}\u000a\u000a
p94
S'PUSH RAX\nMOV qword ptr [RDI + 0x38],RCX\nMOV qword ptr [RDI + 0x40],R8\nMOV qword ptr [RDI + 0x48],R9\nOR byte ptr [RDI + 0x50],0x1\nCALL 0x00405c90\nMOV EAX,0x1\nPOP RCX\nRET\n'
p95
S'50\n48 89 4f 38\n4c 89 47 40\n4c 89 4f 48\n80 4f 50 01\ne8 5a ff ff ff\nb8 01 00 00 00\n59\nc3\n'
p96
S'.text:0000000000405d20\n.text:0000000000405d21\n.text:0000000000405d25\n.text:0000000000405d29\n.text:0000000000405d2d\n.text:0000000000405d31\n.text:0000000000405d36\n.text:0000000000405d3b\n.text:0000000000405d3c\n'
p97
tp98
sS'quotearg_n_style_colon'
p99
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p100
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00404970\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00403850\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00404740\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p102
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p103
S'.text:0000000000404af0\n.text:0000000000404af1\n.text:0000000000404af3\n.text:0000000000404af4\n.text:0000000000404af8\n.text:0000000000404afb\n.text:0000000000404afd\n.text:0000000000404b02\n.text:0000000000404b05\n.text:0000000000404b0a\n.text:0000000000404b0f\n.text:0000000000404b14\n.text:0000000000404b17\n.text:0000000000404b1c\n.text:0000000000404b23\n.text:0000000000404b25\n.text:0000000000404b28\n.text:0000000000404b2b\n.text:0000000000404b30\n.text:0000000000404b34\n.text:0000000000404b35\n.text:0000000000404b37\n.text:0000000000404b38\n'
p104
tp105
sS'quote_mem'
p106
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p107
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p108
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404c00\n'
p109
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p110
S'.text:0000000000404c10\n.text:0000000000404c13\n.text:0000000000404c16\n.text:0000000000404c18\n.text:0000000000404c1b\n.text:0000000000404c1e\n'
p111
tp112
sS'fadvise'
p113
(S'\n__stdcall fadvise(FILE * fp)\n'
p114
V\u000avoid fadvise(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int __advise;\u000a  \u000a  if (fp != (FILE *)0x0) {\u000a    __fd = fileno((FILE *)fp);\u000a    fdadvise(__fd,0,0,__advise);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p115
S'PUSH RBX\nMOV EBX,ESI\nTEST RDI,RDI\nJZ 0x00403518\nCALL 0x004019b0\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,EAX\nMOV ECX,EBX\nPOP RBX\nJMP 0x004034f0\nPOP RBX\nRET\n'
p116
S'53\n89 f3\n48 85 ff\n74 10\ne8 a3 e4 ff ff\n31 f6\n31 d2\n89 c7\n89 d9\n5b\neb d8\n5b\nc3\n'
p117
S'.text:0000000000403500\n.text:0000000000403501\n.text:0000000000403503\n.text:0000000000403506\n.text:0000000000403508\n.text:000000000040350d\n.text:000000000040350f\n.text:0000000000403511\n.text:0000000000403513\n.text:0000000000403515\n.text:0000000000403516\n.text:0000000000403518\n.text:0000000000403519\n'
p118
tp119
sS'fileno'
p120
(S'\n__stdcall fileno(FILE * __stream)\n'
p121
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060a148)();\u000a  return iVar1;\u000a}\u000a\u000a
p122
S'JMP qword ptr [0x0060a148]\n'
p123
S'ff 25 92 87 20 00\n'
p124
S'.plt:00000000004019b0\n'
p125
tp126
sS'mbrtowc'
p127
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p128
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060a0a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p129
S'JMP qword ptr [0x0060a0a8]\n'
p130
S'ff 25 32 88 20 00\n'
p131
S'.plt:0000000000401870\n'
p132
tp133
sS'_obstack_free'
p134
(S'\n__stdcall _obstack_free(obstack * h, void * obj)\n'
p135
V\u000avoid _obstack_free(obstack *h,void *obj)\u000a\u000a{\u000a  _obstack_chunk *p_Var1;\u000a  _obstack_chunk *old_chunk;\u000a  \u000a  old_chunk = h->chunk;\u000a  while( true ) {\u000a    if (old_chunk == (_obstack_chunk *)0x0) {\u000a      if (obj == (void *)0x0) {\u000a        return;\u000a      }\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    }\u000a    if ((old_chunk < obj) && (obj <= old_chunk->limit)) break;\u000a    p_Var1 = old_chunk->prev;\u000a    call_freefun(h,old_chunk);\u000a    *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield | 2;\u000a    old_chunk = p_Var1;\u000a  }\u000a  h->next_free = obj;\u000a  h->object_base = obj;\u000a  h->chunk_limit = old_chunk->limit;\u000a  h->chunk = old_chunk;\u000a  return;\u000a}\u000a\u000a
p136
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nMOV RSI,qword ptr [R15 + 0x8]\nTEST RSI,RSI\nJZ 0x00405f03\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP RSI,R14\nJNC 0x00405eea\nCMP qword ptr [RSI],R14\nJNC 0x00405f0d\nMOV RBX,qword ptr [RSI + 0x8]\nMOV RDI,R15\nCALL 0x00405e70\nOR byte ptr [R15 + 0x50],0x2\nTEST RBX,RBX\nMOV RSI,RBX\nJNZ 0x00405ee0\nTEST R14,R14\nJZ 0x00405f20\nCALL 0x00401770\nMOV qword ptr [R15 + 0x18],R14\nMOV qword ptr [R15 + 0x10],R14\nMOV RAX,qword ptr [RSI]\nMOV qword ptr [R15 + 0x20],RAX\nMOV qword ptr [R15 + 0x8],RSI\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p137
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n49 8b 77 08\n48 85 f6\n74 2f\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 39 f6\n73 05\n4c 39 36\n73 23\n48 8b 5e 08\n4c 89 ff\ne8 7a ff ff ff\n41 80 4f 50 02\n48 85 db\n48 89 de\n75 dd\n4d 85 f6\n74 18\ne8 63 b8 ff ff\n4d 89 77 18\n4d 89 77 10\n48 8b 06\n49 89 47 20\n49 89 77 08\n5b\n41 5e\n41 5f\nc3\n'
p138
S'.text:0000000000405ec0\n.text:0000000000405ec2\n.text:0000000000405ec4\n.text:0000000000405ec5\n.text:0000000000405ec8\n.text:0000000000405ecb\n.text:0000000000405ecf\n.text:0000000000405ed2\n.text:0000000000405ed4\n.text:0000000000405ee0\n.text:0000000000405ee3\n.text:0000000000405ee5\n.text:0000000000405ee8\n.text:0000000000405eea\n.text:0000000000405eee\n.text:0000000000405ef1\n.text:0000000000405ef6\n.text:0000000000405efb\n.text:0000000000405efe\n.text:0000000000405f01\n.text:0000000000405f03\n.text:0000000000405f06\n.text:0000000000405f08\n.text:0000000000405f0d\n.text:0000000000405f11\n.text:0000000000405f15\n.text:0000000000405f18\n.text:0000000000405f1c\n.text:0000000000405f20\n.text:0000000000405f21\n.text:0000000000405f23\n.text:0000000000405f25\n'
p139
tp140
sS'print_and_abort'
p141
(S'\n__stdcall print_and_abort()\n'
p142
V\u000avoid print_and_abort(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  __fprintf_chk(uVar1,1,0x4077d0,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(exit_failure);\u000a}\u000a\u000a
p143
S'PUSH RBX\nMOV RBX,qword ptr [0x0060a300]\nXOR EDI,EDI\nMOV ESI,0x407adf\nMOV EDX,0x5\nCALL 0x00401830\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4077d0\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401b40\nMOV EDI,dword ptr [0x0060a250]\nCALL 0x00401b20\n'
p144
S'53\n48 8b 1d a8 43 20 00\n31 ff\nbe df 7a 40 00\nba 05 00 00 00\ne8 c7 b8 ff ff\n48 89 c1\nbe 01 00 00 00\nba d0 77 40 00\n31 c0\n48 89 df\ne8 c0 bb ff ff\n8b 3d ca 42 20 00\ne8 95 bb ff ff\n'
p145
S'.text:0000000000405f50\n.text:0000000000405f51\n.text:0000000000405f58\n.text:0000000000405f5a\n.text:0000000000405f5f\n.text:0000000000405f64\n.text:0000000000405f69\n.text:0000000000405f6c\n.text:0000000000405f71\n.text:0000000000405f76\n.text:0000000000405f78\n.text:0000000000405f7b\n.text:0000000000405f80\n.text:0000000000405f86\n'
p146
tp147
sS'setlocale'
p148
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p149
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060a1a0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p150
S'JMP qword ptr [0x0060a1a0]\n'
p151
S'ff 25 3a 87 20 00\n'
p152
S'.plt:0000000000401a60\n'
p153
tp154
sS'c_toupper'
p155
(S'\n__stdcall c_toupper()\n'
p156
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p157
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p158
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p159
S'.text:00000000004060d0\n.text:00000000004060d3\n.text:00000000004060d6\n.text:00000000004060d9\n.text:00000000004060dc\n'
p160
tp161
sS'mbsinit'
p162
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060a218)();\u000a  return iVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0060a218]\n'
p165
S'ff 25 c2 86 20 00\n'
p166
S'.plt:0000000000401b50\n'
p167
tp168
sS'dcgettext'
p169
(S'\n__stdcall dcgettext()\n'
p170
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060a088)();\u000a  return;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x0060a088]\n'
p172
S'ff 25 52 88 20 00\n'
p173
S'.plt:0000000000401830\n'
p174
tp175
sS'quotearg_free'
p176
(S'\n__stdcall quotearg_free()\n'
p177
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p178
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060a258]\nCMP dword ptr [0x0060a260],0x2\nJC 0x004046da\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401760\nINC RBX\nMOV EAX,dword ptr [0x0060a260]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x004046c0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60a3b0\nCMP RDI,RAX\nJZ 0x00404703\nCALL 0x00401760\nMOV qword ptr [0x0060a268],0x100\nMOV qword ptr [0x0060a270],0x60a3b0\nMOV EAX,0x60a268\nCMP R14,RAX\nJZ 0x00404720\nMOV RDI,R14\nCALL 0x00401760\nMOV qword ptr [0x0060a258],0x60a268\nMOV dword ptr [0x0060a260],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p179
S'41 57\n41 56\n53\n4c 8b 35 ac 5b 20 00\n83 3d ad 5b 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 98 d0 ff ff\n48 ff c3\n8b 05 8f 5b 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 b0 a3 60 00\n48 39 c7\n74 1b\ne8 73 d0 ff ff\n48 c7 05 70 5b 20 00 00 01 00 00\n48 c7 05 6d 5b 20 00 b0 a3 60 00\nb8 68 a2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 4b d0 ff ff\n48 c7 05 38 5b 20 00 68 a2 60 00\nc7 05 36 5b 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p180
S'.text:00000000004046a0\n.text:00000000004046a2\n.text:00000000004046a4\n.text:00000000004046a5\n.text:00000000004046ac\n.text:00000000004046b3\n.text:00000000004046b5\n.text:00000000004046b9\n.text:00000000004046be\n.text:00000000004046c0\n.text:00000000004046c3\n.text:00000000004046c8\n.text:00000000004046cb\n.text:00000000004046d1\n.text:00000000004046d5\n.text:00000000004046d8\n.text:00000000004046da\n.text:00000000004046de\n.text:00000000004046e3\n.text:00000000004046e6\n.text:00000000004046e8\n.text:00000000004046ed\n.text:00000000004046f8\n.text:0000000000404703\n.text:0000000000404708\n.text:000000000040470b\n.text:000000000040470d\n.text:0000000000404710\n.text:0000000000404715\n.text:0000000000404720\n.text:000000000040472a\n.text:000000000040472b\n.text:000000000040472d\n.text:000000000040472f\n'
p181
tp182
sS'quotearg_mem'
p183
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p184
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p185
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404900\n'
p186
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p187
S'.text:0000000000404920\n.text:0000000000404923\n.text:0000000000404926\n.text:0000000000404928\n.text:000000000040492b\n.text:000000000040492e\n'
p188
tp189
sS'deregister_tm_clones'
p190
(S'\n__stdcall deregister_tm_clones()\n'
p191
V\u000a/* WARNING: Removing unreachable block (ram,0x00401bd5) */\u000a/* WARNING: Removing unreachable block (ram,0x00401bdf) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p192
S'MOV EAX,0x60a2bf\nPUSH RBP\nSUB RAX,0x60a2b8\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401bf0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401bf0\nPOP RBP\nMOV EDI,0x60a2b8\nJMP RAX\nPOP RBP\nRET\n'
p193
S'b8 bf a2 60 00\n55\n48 2d b8 a2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf b8 a2 60 00\nff e0\n5d\nc3\n'
p194
S'.text:0000000000401bc0\n.text:0000000000401bc5\n.text:0000000000401bc6\n.text:0000000000401bcc\n.text:0000000000401bd0\n.text:0000000000401bd3\n.text:0000000000401bd5\n.text:0000000000401bda\n.text:0000000000401bdd\n.text:0000000000401bdf\n.text:0000000000401be0\n.text:0000000000401be5\n.text:0000000000401bf0\n.text:0000000000401bf1\n'
p195
tp196
sS'wc_file'
p197
(S'\n__stdcall wc_file(char * file, fstatus * fstatus)\n'
p198
V\u000a_Bool wc_file(char *file,fstatus *fstatus)\u000a\u000a{\u000a  _Bool _Var1;\u000a  uint __fd;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  char *pcVar4;\u000a  \u000a  if ((file != (char *)0x0) && ((*file != '-' || (file[1] != 0)))) {\u000a    __fd = open(file,0);\u000a    if (__fd != 0xffffffff) {\u000a      _Var1 = wc((char *)(ulong)__fd,(fstatus *)file,(off_t)fstatus);\u000a      iVar2 = close(__fd);\u000a      if (iVar2 == 0) {\u000a        return _Var1;\u000a      }\u000a    }\u000a    puVar3 = (uint *)__errno_location();\u000a    __fd = *puVar3;\u000a    pcVar4 = quotearg_n_style_colon((char *)0x0);\u000a    error(0,(ulong)__fd,0x40717f,pcVar4);\u000a    return false;\u000a  }\u000a  have_read_stdin = 1;\u000a  _Var1 = wc((char *)0x0,(fstatus *)file,(off_t)fstatus);\u000a  return _Var1;\u000a}\u000a\u000a
p199
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004028be\nCMP byte ptr [RBX],0x2d\nJNZ 0x0040285a\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x004028be\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401ac0\nMOV EBP,EAX\nCMP EBP,-0x1\nJZ 0x0040288a\nXOR ECX,ECX\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nCALL 0x00402a80\nMOV R14B,AL\nMOV EDI,EBP\nCALL 0x004018f0\nTEST EAX,EAX\nJZ 0x004028b6\nCALL 0x00401780\nMOV EBP,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBX\nCALL 0x00404af0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40717f\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00401ab0\nMOV EAX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV byte ptr [0x0060a34c],0x1\nXOR EDI,EDI\nMOV RCX,-0x1\nMOV RSI,RBX\nMOV RDX,R14\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00402a80\n'
p200
S'55\n41 56\n53\n49 89 f6\n48 89 fb\n48 85 db\n74 6f\n80 3b 2d\n75 06\n80 7b 01 00\n74 64\n31 f6\n31 c0\n48 89 df\ne8 5a f2 ff ff\n89 c5\n83 fd ff\n74 1d\n31 c9\n89 ef\n48 89 de\n4c 89 f2\ne8 04 02 00 00\n41 88 c6\n89 ef\ne8 6a f0 ff ff\n85 c0\n74 2c\ne8 f1 ee ff ff\n8b 28\n45 31 f6\n31 ff\nbe 03 00 00 00\n48 89 da\ne8 4d 22 00 00\n48 89 c1\n31 ff\nba 7f 71 40 00\n31 c0\n89 ee\ne8 fa f1 ff ff\n44 89 f0\n5b\n41 5e\n5d\nc3\nc6 05 87 7a 20 00 01\n31 ff\n48 c7 c1 ff ff ff ff\n48 89 de\n4c 89 f2\n5b\n41 5e\n5d\ne9 a3 01 00 00\n'
p201
S'.text:0000000000402840\n.text:0000000000402841\n.text:0000000000402843\n.text:0000000000402844\n.text:0000000000402847\n.text:000000000040284a\n.text:000000000040284d\n.text:000000000040284f\n.text:0000000000402852\n.text:0000000000402854\n.text:0000000000402858\n.text:000000000040285a\n.text:000000000040285c\n.text:000000000040285e\n.text:0000000000402861\n.text:0000000000402866\n.text:0000000000402868\n.text:000000000040286b\n.text:000000000040286d\n.text:000000000040286f\n.text:0000000000402871\n.text:0000000000402874\n.text:0000000000402877\n.text:000000000040287c\n.text:000000000040287f\n.text:0000000000402881\n.text:0000000000402886\n.text:0000000000402888\n.text:000000000040288a\n.text:000000000040288f\n.text:0000000000402891\n.text:0000000000402894\n.text:0000000000402896\n.text:000000000040289b\n.text:000000000040289e\n.text:00000000004028a3\n.text:00000000004028a6\n.text:00000000004028a8\n.text:00000000004028ad\n.text:00000000004028af\n.text:00000000004028b1\n.text:00000000004028b6\n.text:00000000004028b9\n.text:00000000004028ba\n.text:00000000004028bc\n.text:00000000004028bd\n.text:00000000004028be\n.text:00000000004028c5\n.text:00000000004028c7\n.text:00000000004028ce\n.text:00000000004028d1\n.text:00000000004028d4\n.text:00000000004028d5\n.text:00000000004028d7\n.text:00000000004028d8\n'
p202
tp203
sS'get_input_fstatus'
p204
(S'\n__stdcall get_input_fstatus(size_t nfiles, char * * file)\n'
p205
V\u000afstatus * get_input_fstatus(size_t nfiles,char **file)\u000a\u000a{\u000a  char *pcVar1;\u000a  fstatus *pfVar2;\u000a  int iVar3;\u000a  fstatus *pfVar4;\u000a  stat *__buf;\u000a  size_t n;\u000a  \u000a  n = 1;\u000a  if (nfiles != 0) {\u000a    n = nfiles;\u000a  }\u000a  pfVar4 = (fstatus *)xnmalloc(n,0x98);\u000a  if ((nfiles == 0) ||\u000a     ((pfVar2 = pfVar4, nfiles == 1 &&\u000a      (pfVar2 = pfVar4,\u000a      (uint)print_linelength +\u000a      (uint)print_bytes + (uint)print_chars + (uint)print_words + (uint)print_lines == 1)))) {\u000a    pfVar4->failed = 1;\u000a  }\u000a  else {\u000a    do {\u000a      __buf = &pfVar2->st;\u000a      pcVar1 = *file;\u000a      if ((pcVar1 == (char *)0x0) || ((*pcVar1 == '-' && (pcVar1[1] == 0)))) {\u000a        iVar3 = fstat(0,(stat *)__buf);\u000a      }\u000a      else {\u000a        iVar3 = stat(*file,(stat *)__buf);\u000a      }\u000a      *(int *)&__buf->st_ino = iVar3;\u000a      file = file + 1;\u000a      nfiles = nfiles - 1;\u000a      pfVar2 = (fstatus *)(__buf + 1);\u000a    } while (nfiles != 0);\u000a  }\u000a  return pfVar4;\u000a}\u000a\u000a
p206
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R14,RDI\nTEST R14,R14\nMOV EDI,0x1\nCMOVNZ RDI,R14\nMOV ESI,0x98\nCALL 0x00405900\nMOV R15,RAX\nTEST R14,R14\nJZ 0x00402722\nCMP R14,0x1\nJNZ 0x0040272b\nMOVZX EAX,byte ptr [0x0060a313]\nMOVZX ECX,byte ptr [0x0060a312]\nADD ECX,EAX\nMOVZX EAX,byte ptr [0x0060a311]\nADD EAX,ECX\nMOVZX ECX,byte ptr [0x0060a310]\nADD ECX,EAX\nMOVZX EAX,byte ptr [0x0060a314]\nADD EAX,ECX\nCMP EAX,0x1\nJNZ 0x0040272b\nMOV dword ptr [R15],0x1\nJMP 0x0040278d\nMOV RBX,R15\nADD RBX,0x8\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [R12]\nTEST RAX,RAX\nJZ 0x00402770\nCMP byte ptr [RAX],0x2d\nJNZ 0x00402754\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00402770\nMOV RDI,qword ptr [R12]\nMOV RSI,RBX\nCALL 0x00406530\nJMP 0x0040277a\nXOR EDI,EDI\nMOV RSI,RBX\nCALL 0x00406540\nMOV dword ptr [RBX + -0x8],EAX\nADD RBX,0x98\nADD R12,0x8\nDEC R14\nJNZ 0x00402740\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p207
S'41 57\n41 56\n41 54\n53\n50\n49 89 f4\n49 89 fe\n4d 85 f6\nbf 01 00 00 00\n49 0f 45 fe\nbe 98 00 00 00\ne8 1c 32 00 00\n49 89 c7\n4d 85 f6\n74 36\n49 83 fe 01\n75 39\n0f b6 05 1a 7c 20 00\n0f b6 0d 12 7c 20 00\n01 c1\n0f b6 05 08 7c 20 00\n01 c8\n0f b6 0d fe 7b 20 00\n01 c1\n0f b6 05 f9 7b 20 00\n01 c8\n83 f8 01\n75 09\n41 c7 07 01 00 00 00\neb 62\n4c 89 fb\n48 83 c3 08\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 04 24\n48 85 c0\n74 27\n80 38 2d\n75 06\n80 78 01 00\n74 1c\n49 8b 3c 24\n48 89 de\ne8 d0 3d 00 00\neb 18\n31 ff\n48 89 de\ne8 c6 3d 00 00\n89 43 f8\n48 81 c3 98 00 00 00\n49 83 c4 08\n49 ff ce\n75 b3\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p208
S'.text:00000000004026c0\n.text:00000000004026c2\n.text:00000000004026c4\n.text:00000000004026c6\n.text:00000000004026c7\n.text:00000000004026c8\n.text:00000000004026cb\n.text:00000000004026ce\n.text:00000000004026d1\n.text:00000000004026d6\n.text:00000000004026da\n.text:00000000004026df\n.text:00000000004026e4\n.text:00000000004026e7\n.text:00000000004026ea\n.text:00000000004026ec\n.text:00000000004026f0\n.text:00000000004026f2\n.text:00000000004026f9\n.text:0000000000402700\n.text:0000000000402702\n.text:0000000000402709\n.text:000000000040270b\n.text:0000000000402712\n.text:0000000000402714\n.text:000000000040271b\n.text:000000000040271d\n.text:0000000000402720\n.text:0000000000402722\n.text:0000000000402729\n.text:000000000040272b\n.text:000000000040272e\n.text:0000000000402732\n.text:0000000000402740\n.text:0000000000402744\n.text:0000000000402747\n.text:0000000000402749\n.text:000000000040274c\n.text:000000000040274e\n.text:0000000000402752\n.text:0000000000402754\n.text:0000000000402758\n.text:000000000040275b\n.text:0000000000402760\n.text:0000000000402770\n.text:0000000000402772\n.text:0000000000402775\n.text:000000000040277a\n.text:000000000040277d\n.text:0000000000402784\n.text:0000000000402788\n.text:000000000040278b\n.text:000000000040278d\n.text:0000000000402790\n.text:0000000000402794\n.text:0000000000402795\n.text:0000000000402797\n.text:0000000000402799\n.text:000000000040279b\n'
p209
tp210
sS'readtokens0_free'
p211
(S'\n__stdcall readtokens0_free(Tokens * t)\n'
p212
V\u000avoid readtokens0_free(Tokens *t)\u000a\u000a{\u000a  _obstack_free(&t->o_data,(void *)0x0);\u000a  _obstack_free(&t->o_tok,(void *)0x0);\u000a  _obstack_free(&t->o_tok_len,(void *)0x0);\u000a  return;\u000a}\u000a\u000a
p213
S'PUSH RBX\nMOV RBX,RDI\nLEA RDI,[RBX + 0x18]\nXOR ESI,ESI\nCALL 0x00405ec0\nLEA RDI,[RBX + 0x70]\nXOR ESI,ESI\nCALL 0x00405ec0\nADD RBX,0xc8\nXOR ESI,ESI\nMOV RDI,RBX\nPOP RBX\nJMP 0x00405ec0\n'
p214
S'53\n48 89 fb\n48 8d 7b 18\n31 f6\ne8 01 0e 00 00\n48 8d 7b 70\n31 f6\ne8 f6 0d 00 00\n48 81 c3 c8 00 00 00\n31 f6\n48 89 df\n5b\ne9 e4 0d 00 00\n'
p215
S'.text:00000000004050b0\n.text:00000000004050b1\n.text:00000000004050b4\n.text:00000000004050b8\n.text:00000000004050ba\n.text:00000000004050bf\n.text:00000000004050c3\n.text:00000000004050c5\n.text:00000000004050ca\n.text:00000000004050d1\n.text:00000000004050d3\n.text:00000000004050d6\n.text:00000000004050d7\n'
p216
tp217
sS'argv_iter_n_args'
p218
(S'\n__stdcall argv_iter_n_args(argv_iterator * ai)\n'
p219
V\u000asize_t argv_iter_n_args(argv_iterator *ai)\u000a\u000a{\u000a  if (ai->fp != (FILE *)0x0) {\u000a    return ai->item_idx;\u000a  }\u000a  return (long)((long)ai->p - (long)ai->arg_list) >> 3;\u000a}\u000a\u000a
p220
S'CMP qword ptr [RDI],0x0\nJZ 0x004033db\nMOV RAX,qword ptr [RDI + 0x8]\nRET\nMOV RAX,qword ptr [RDI + 0x28]\nSUB RAX,qword ptr [RDI + 0x20]\nSAR RAX,0x3\nRET\n'
p221
S'48 83 3f 00\n74 05\n48 8b 47 08\nc3\n48 8b 47 28\n48 2b 47 20\n48 c1 f8 03\nc3\n'
p222
S'.text:00000000004033d0\n.text:00000000004033d4\n.text:00000000004033d6\n.text:00000000004033da\n.text:00000000004033db\n.text:00000000004033df\n.text:00000000004033e3\n.text:00000000004033e7\n'
p223
tp224
sS'quotearg_custom'
p225
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p226
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p227
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404b40\n'
p228
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p229
S'.text:0000000000404bc0\n.text:0000000000404bc3\n.text:0000000000404bc6\n.text:0000000000404bc9\n.text:0000000000404bcb\n.text:0000000000404bce\n.text:0000000000404bd1\n.text:0000000000404bd4\n'
p230
tp231
sS'free'
p232
(S'\n__stdcall free(void * __ptr)\n'
p233
V\u000a/* WARNING: Switch with 1 destination removed at 0x00401760 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x0060a020]\n'
p235
S'ff 25 ba 88 20 00\n'
p236
S'.plt:0000000000401760\n'
p237
tp238
sS'close'
p239
(S'\n__stdcall close(int __fd)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060a0e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x0060a0e8]\n'
p242
S'ff 25 f2 87 20 00\n'
p243
S'.plt:00000000004018f0\n'
p244
tp245
sS'getenv'
p246
(S'\n__stdcall getenv(char * __name)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060a018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x0060a018]\n'
p249
S'ff 25 c2 88 20 00\n'
p250
S'.plt:0000000000401750\n'
p251
tp252
sS'putchar_unlocked'
p253
(S'\n__stdcall putchar_unlocked(int __c)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_0060a140)();\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x0060a140]\n'
p256
S'ff 25 9a 87 20 00\n'
p257
S'.plt:00000000004019a0\n'
p258
tp259
sS'fopen'
p260
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_0060a1e0)();\u000a  return pFVar1;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x0060a1e0]\n'
p263
S'ff 25 fa 86 20 00\n'
p264
S'.plt:0000000000401ae0\n'
p265
tp266
sS'stat'
p267
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p268
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_0060a150)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p269
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x004019c0\n'
p270
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 80 b4 ff ff\n'
p271
S'.text:0000000000406530\n.text:0000000000406533\n.text:0000000000406536\n.text:000000000040653b\n'
p272
tp273
sS'rpl_fseeko'
p274
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p275
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060a1d8)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p276
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00405c28\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00405c28\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x00405c3a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401ad0\nMOV RDI,RBX\nCALL 0x004019b0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x004018a0\nCMP RAX,-0x1\nJZ 0x00405c63\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00405c68\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p277
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 96 be ff ff\n48 89 df\ne8 6e bd ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 51 bc ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p278
S'.text:0000000000405c00\n.text:0000000000405c01\n.text:0000000000405c03\n.text:0000000000405c04\n.text:0000000000405c07\n.text:0000000000405c0a\n.text:0000000000405c0d\n.text:0000000000405c11\n.text:0000000000405c15\n.text:0000000000405c17\n.text:0000000000405c1b\n.text:0000000000405c1f\n.text:0000000000405c21\n.text:0000000000405c26\n.text:0000000000405c28\n.text:0000000000405c2b\n.text:0000000000405c2e\n.text:0000000000405c31\n.text:0000000000405c32\n.text:0000000000405c34\n.text:0000000000405c35\n.text:0000000000405c3a\n.text:0000000000405c3d\n.text:0000000000405c42\n.text:0000000000405c44\n.text:0000000000405c47\n.text:0000000000405c4a\n.text:0000000000405c4f\n.text:0000000000405c53\n.text:0000000000405c55\n.text:0000000000405c58\n.text:0000000000405c5f\n.text:0000000000405c61\n.text:0000000000405c63\n.text:0000000000405c68\n.text:0000000000405c69\n.text:0000000000405c6b\n.text:0000000000405c6c\n'
p279
tp280
sS'quote_n_mem'
p281
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p282
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p283
S'MOV ECX,0x60a278\nJMP 0x00404740\n'
p284
S'b9 78 a2 60 00\ne9 36 fb ff ff\n'
p285
S'.text:0000000000404c00\n.text:0000000000404c05\n'
p286
tp287
sS'xstrdup'
p288
(S'\n__stdcall xstrdup(char * string)\n'
p289
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p290
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401850\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00405a60\n'
p291
S'53\n48 89 fb\ne8 b7 bd ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p292
S'.text:0000000000405a90\n.text:0000000000405a91\n.text:0000000000405a94\n.text:0000000000405a99\n.text:0000000000405a9d\n.text:0000000000405aa0\n.text:0000000000405aa1\n'
p293
tp294
sS'c_ispunct'
p295
(S'\n__stdcall c_ispunct()\n'
p296
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p297
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00406062\nMOV AL,0x1\nJMP qword ptr [0x407af0 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p298
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd f0 7a 40 00\nc3\n31 c0\nc3\n'
p299
S'.text:0000000000406050\n.text:0000000000406053\n.text:0000000000406056\n.text:0000000000406058\n.text:000000000040605a\n.text:0000000000406061\n.text:0000000000406062\n.text:0000000000406064\n'
p300
tp301
sS'fstat'
p302
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p303
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_0060a180)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p304
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00401a20\n'
p305
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 d1 b4 ff ff\n'
p306
S'.text:0000000000406540\n.text:0000000000406543\n.text:0000000000406545\n.text:000000000040654a\n'
p307
tp308
sS'fscanf'
p309
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060a0d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x0060a0d8]\n'
p312
S'ff 25 02 88 20 00\n'
p313
S'.plt:00000000004018d0\n'
p314
tp315
sS'memcpy'
p316
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060a138)();\u000a  return pvVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x0060a138]\n'
p319
S'ff 25 a2 87 20 00\n'
p320
S'.plt:0000000000401990\n'
p321
tp322
sS'call_freefun'
p323
(S'\n__stdcall call_freefun(obstack * h, void * old_chunk)\n'
p324
V\u000avoid call_freefun(obstack *h,void *old_chunk)\u000a\u000a{\u000a  undefined8 in_RDX;\u000a  \u000a  if ((*(byte *)&h->use_extra_arg_bitfield & 1) == 0) {\u000a                    /* WARNING: Could not recover jumptable at 0x00405e7c. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a    (*(code *)h->freefun)(old_chunk);\u000a    return;\u000a  }\u000a                    /* WARNING: Could not recover jumptable at 0x00405e87. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)h->freefun)(h->extra_arg,old_chunk,in_RDX,(code *)h->freefun);\u000a  return;\u000a}\u000a\u000a
p325
S'MOV RAX,RDI\nTEST byte ptr [RAX + 0x50],0x1\nJNZ 0x00405e7f\nMOV RDI,RSI\nJMP qword ptr [RAX + 0x40]\nMOV RCX,qword ptr [RAX + 0x40]\nMOV RDI,qword ptr [RAX + 0x48]\nJMP RCX\n'
p326
S'48 89 f8\nf6 40 50 01\n75 06\n48 89 f7\nff 60 40\n48 8b 48 40\n48 8b 78 48\nff e1\n'
p327
S'.text:0000000000405e70\n.text:0000000000405e73\n.text:0000000000405e77\n.text:0000000000405e79\n.text:0000000000405e7c\n.text:0000000000405e7f\n.text:0000000000405e83\n.text:0000000000405e87\n'
p328
tp329
sS'close_stdout_set_ignore_EPIPE'
p330
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p331
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p332
S'MOV byte ptr [0x0060a358],DIL\nRET\n'
p333
S'40 88 3d 31 6f 20 00\nc3\n'
p334
S'.text:0000000000403420\n.text:0000000000403427\n'
p335
tp336
sS'iswprint'
p337
(S'\n__stdcall iswprint(wint_t __wc)\n'
p338
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060a220)();\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'JMP qword ptr [0x0060a220]\n'
p340
S'ff 25 ba 86 20 00\n'
p341
S'.plt:0000000000401b60\n'
p342
tp343
sS'c_isspace'
p344
(S'\n__stdcall c_isspace()\n'
p345
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p346
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00406085\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p347
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p348
S'.text:0000000000406070\n.text:0000000000406073\n.text:0000000000406076\n.text:0000000000406078\n.text:000000000040607d\n.text:000000000040607f\n.text:0000000000406081\n.text:0000000000406084\n.text:0000000000406085\n.text:0000000000406087\n'
p349
tp350
sS'open'
p351
(S'\n__stdcall open(char * __file, int __oflag)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060a1d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x0060a1d0]\n'
p354
S'ff 25 0a 87 20 00\n'
p355
S'.plt:0000000000401ac0\n'
p356
tp357
sS'quotearg_n_custom_mem'
p358
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p359
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p360
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060a3a0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060a390]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a380]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a370]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004038b0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404740\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p361
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 37 58 20 00\n48 89 44 24 30\n0f 10 05 1b 58 20 00\n0f 29 44 24 20\n0f 10 05 ff 57 20 00\n0f 29 44 24 10\n0f 10 05 e3 57 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p362
S'.text:0000000000404b50\n.text:0000000000404b51\n.text:0000000000404b53\n.text:0000000000404b55\n.text:0000000000404b56\n.text:0000000000404b5a\n.text:0000000000404b5d\n.text:0000000000404b60\n.text:0000000000404b62\n.text:0000000000404b69\n.text:0000000000404b6e\n.text:0000000000404b75\n.text:0000000000404b7a\n.text:0000000000404b81\n.text:0000000000404b86\n.text:0000000000404b8d\n.text:0000000000404b91\n.text:0000000000404b94\n.text:0000000000404b97\n.text:0000000000404b9c\n.text:0000000000404b9e\n.text:0000000000404ba1\n.text:0000000000404ba4\n.text:0000000000404ba7\n.text:0000000000404bac\n.text:0000000000404bb0\n.text:0000000000404bb1\n.text:0000000000404bb3\n.text:0000000000404bb5\n.text:0000000000404bb6\n'
p363
tp364
sS'_init'
p365
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p366
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00609ff8;\u000a  if (PTR___gmon_start___00609ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00609ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p367
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00609ff8]\nTEST RAX,RAX\nJZ 0x00401732\nCALL RAX\nADD RSP,0x8\nRET\n'
p368
S'48 83 ec 08\n48 8b 05 cd 88 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p369
S'.init:0000000000401720\n.init:0000000000401724\n.init:000000000040172b\n.init:000000000040172e\n.init:0000000000401730\n.init:0000000000401732\n.init:0000000000401736\n'
p370
tp371
sS'_obstack_allocated_p'
p372
(S'\n__stdcall _obstack_allocated_p(obstack * h, void * obj)\n'
p373
V\u000aint _obstack_allocated_p(obstack *h,void *obj)\u000a\u000a{\u000a  _obstack_chunk *p_Var1;\u000a  \u000a  p_Var1 = h->chunk;\u000a  while( true ) {\u000a    if (p_Var1 == (_obstack_chunk *)0x0) {\u000a      return 0;\u000a    }\u000a    if ((p_Var1 < obj) && (obj <= p_Var1->limit)) break;\u000a    p_Var1 = p_Var1->prev;\u000a  }\u000a  return 1;\u000a}\u000a\u000a
p374
S'MOV RCX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nTEST RCX,RCX\nJNZ 0x00405ea9\nJMP 0x00405eb8\nMOV RCX,qword ptr [RCX + 0x8]\nTEST RCX,RCX\nJZ 0x00405eb8\nCMP RCX,RSI\nJNC 0x00405ea0\nCMP qword ptr [RCX],RSI\nJC 0x00405ea0\nMOV EAX,0x1\nRET\n'
p375
S'48 8b 4f 08\n31 c0\n48 85 c9\n75 0e\neb 1b\n48 8b 49 08\n48 85 c9\n74 0f\n48 39 f1\n73 f2\n48 39 31\n72 ed\nb8 01 00 00 00\nc3\n'
p376
S'.text:0000000000405e90\n.text:0000000000405e94\n.text:0000000000405e96\n.text:0000000000405e99\n.text:0000000000405e9b\n.text:0000000000405ea0\n.text:0000000000405ea4\n.text:0000000000405ea7\n.text:0000000000405ea9\n.text:0000000000405eac\n.text:0000000000405eae\n.text:0000000000405eb1\n.text:0000000000405eb3\n.text:0000000000405eb8\n'
p377
tp378
sS'save_token'
p379
(S'\n__stdcall save_token(Tokens * t)\n'
p380
V\u000avoid save_token(Tokens *t)\u000a\u000a{\u000a  uint *puVar1;\u000a  char **ppcVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  ulong uVar5;\u000a  _obstack_chunk *p_Var6;\u000a  char *pcVar7;\u000a  char *pcVar8;\u000a  \u000a  pcVar3 = (t->o_data).object_base;\u000a  pcVar4 = (t->o_data).next_free;\u000a  if (pcVar4 == pcVar3) {\u000a    puVar1 = &(t->o_data).use_extra_arg_bitfield;\u000a    *(byte *)puVar1 = *(byte *)puVar1 | 2;\u000a  }\u000a  uVar5 = (t->o_data).alignment_mask;\u000a  pcVar8 = (char *)(~uVar5 & (ulong)((t->o_data).next_free + uVar5));\u000a  (t->o_data).next_free = pcVar8;\u000a  p_Var6 = (t->o_data).chunk;\u000a  pcVar7 = (t->o_data).chunk_limit;\u000a  if (pcVar7 + -(long)p_Var6 < pcVar8 + -(long)p_Var6) {\u000a    (t->o_data).next_free = pcVar7;\u000a  }\u000a  (t->o_data).object_base = (t->o_data).next_free;\u000a  if ((t->o_tok).chunk_limit + -(long)(t->o_tok).next_free < &DAT_00000008) {\u000a    _obstack_newchunk(&t->o_tok,8);\u000a  }\u000a  *(char **)(t->o_tok).next_free = pcVar3;\u000a  ppcVar2 = &(t->o_tok).next_free;\u000a  *ppcVar2 = *ppcVar2 + 8;\u000a  if ((t->o_tok_len).chunk_limit + -(long)(t->o_tok_len).next_free < &DAT_00000008) {\u000a    _obstack_newchunk(&t->o_tok_len,8);\u000a  }\u000a  *(char **)(t->o_tok_len).next_free = pcVar4 + (-1 - (long)pcVar3);\u000a  ppcVar2 = &(t->o_tok_len).next_free;\u000a  *ppcVar2 = *ppcVar2 + 8;\u000a  t->n_tok = t->n_tok + 1;\u000a  return;\u000a}\u000a\u000a
p381
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV R15,qword ptr [RBX + 0x28]\nMOV R14,qword ptr [RBX + 0x30]\nCMP R14,R15\nJNZ 0x004052b9\nOR byte ptr [RBX + 0x68],0x2\nMOV RCX,qword ptr [RBX + 0x48]\nMOV RAX,qword ptr [RBX + 0x30]\nADD RAX,RCX\nNOT RCX\nAND RCX,RAX\nMOV qword ptr [RBX + 0x30],RCX\nMOV RDX,qword ptr [RBX + 0x20]\nMOV RAX,qword ptr [RBX + 0x38]\nSUB RCX,RDX\nMOV RSI,RAX\nSUB RSI,RDX\nCMP RCX,RSI\nJBE 0x004052e8\nMOV qword ptr [RBX + 0x30],RAX\nDEC R14\nMOV RAX,qword ptr [RBX + 0x30]\nMOV qword ptr [RBX + 0x28],RAX\nMOV RAX,qword ptr [0x90 + RBX]\nSUB RAX,qword ptr [0x88 + RBX]\nCMP RAX,0x7\nJA 0x00405315\nLEA RDI,[RBX + 0x70]\nMOV ESI,0x8\nCALL 0x00405d40\nMOV RAX,qword ptr [0x88 + RBX]\nMOV qword ptr [RAX],R15\nADD qword ptr [0x88 + RBX],0x8\nSUB R14,R15\nMOV RAX,qword ptr [0xe8 + RBX]\nSUB RAX,qword ptr [0xe0 + RBX]\nCMP RAX,0x7\nJA 0x0040534f\nLEA RDI,[0xc8 + RBX]\nMOV ESI,0x8\nCALL 0x00405d40\nMOV RAX,qword ptr [0xe0 + RBX]\nMOV qword ptr [RAX],R14\nADD qword ptr [0xe0 + RBX],0x8\nINC qword ptr [RBX]\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p382
S'41 57\n41 56\n53\n48 89 fb\n4c 8b 7b 28\n4c 8b 73 30\n4d 39 fe\n75 04\n80 4b 68 02\n48 8b 4b 48\n48 8b 43 30\n48 01 c8\n48 f7 d1\n48 21 c1\n48 89 4b 30\n48 8b 53 20\n48 8b 43 38\n48 29 d1\n48 89 c6\n48 29 d6\n48 39 f1\n76 04\n48 89 43 30\n49 ff ce\n48 8b 43 30\n48 89 43 28\n48 8b 83 90 00 00 00\n48 2b 83 88 00 00 00\n48 83 f8 07\n77 0e\n48 8d 7b 70\nbe 08 00 00 00\ne8 2b 0a 00 00\n48 8b 83 88 00 00 00\n4c 89 38\n48 83 83 88 00 00 00 08\n4d 29 fe\n48 8b 83 e8 00 00 00\n48 2b 83 e0 00 00 00\n48 83 f8 07\n77 11\n48 8d bb c8 00 00 00\nbe 08 00 00 00\ne8 f1 09 00 00\n48 8b 83 e0 00 00 00\n4c 89 30\n48 83 83 e0 00 00 00 08\n48 ff 03\n5b\n41 5e\n41 5f\nc3\n'
p383
S'.text:00000000004052a0\n.text:00000000004052a2\n.text:00000000004052a4\n.text:00000000004052a5\n.text:00000000004052a8\n.text:00000000004052ac\n.text:00000000004052b0\n.text:00000000004052b3\n.text:00000000004052b5\n.text:00000000004052b9\n.text:00000000004052bd\n.text:00000000004052c1\n.text:00000000004052c4\n.text:00000000004052c7\n.text:00000000004052ca\n.text:00000000004052ce\n.text:00000000004052d2\n.text:00000000004052d6\n.text:00000000004052d9\n.text:00000000004052dc\n.text:00000000004052df\n.text:00000000004052e2\n.text:00000000004052e4\n.text:00000000004052e8\n.text:00000000004052eb\n.text:00000000004052ef\n.text:00000000004052f3\n.text:00000000004052fa\n.text:0000000000405301\n.text:0000000000405305\n.text:0000000000405307\n.text:000000000040530b\n.text:0000000000405310\n.text:0000000000405315\n.text:000000000040531c\n.text:000000000040531f\n.text:0000000000405327\n.text:000000000040532a\n.text:0000000000405331\n.text:0000000000405338\n.text:000000000040533c\n.text:000000000040533e\n.text:0000000000405345\n.text:000000000040534a\n.text:000000000040534f\n.text:0000000000405356\n.text:0000000000405359\n.text:0000000000405361\n.text:0000000000405364\n.text:0000000000405365\n.text:0000000000405367\n.text:0000000000405369\n'
p384
tp385
sS'set_quoting_flags'
p386
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p387
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p388
S'TEST RDI,RDI\nMOV ECX,0x60a370\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p389
S'48 85 ff\nb9 70 a3 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p390
S'.text:0000000000403890\n.text:0000000000403893\n.text:0000000000403898\n.text:000000000040389c\n.text:000000000040389f\n.text:00000000004038a2\n'
p391
tp392
sS'argv_iter'
p393
(S'\n__stdcall argv_iter(argv_iterator * ai, argv_iter_err * err)\n'
p394
V\u000achar * argv_iter(argv_iterator *ai,argv_iter_err *err)\u000a\u000a{\u000a  char **ppcVar1;\u000a  int iVar2;\u000a  __ssize_t _Var3;\u000a  \u000a  if (ai->fp == (FILE *)0x0) {\u000a    if (*ai->p != (char *)0x0) {\u000a      *err = AI_ERR_OK;\u000a      ppcVar1 = ai->p;\u000a      ai->p = ppcVar1 + 1;\u000a      return *ppcVar1;\u000a    }\u000a    *err = AI_ERR_EOF;\u000a  }\u000a  else {\u000a    _Var3 = getdelim(&ai->tok,&ai->buf_len,0,(FILE *)ai->fp);\u000a    if (-1 < _Var3) {\u000a      *err = AI_ERR_OK;\u000a      ai->item_idx = ai->item_idx + 1;\u000a      return ai->tok;\u000a    }\u000a    iVar2 = feof((FILE *)ai->fp);\u000a    *err = (uint)(iVar2 == 0) + 2 + (uint)(iVar2 == 0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p395
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [RBX]\nTEST RCX,RCX\nJZ 0x00403377\nLEA RDI,[RBX + 0x10]\nLEA RSI,[RBX + 0x18]\nXOR EDX,EDX\nCALL 0x00401b70\nTEST RAX,RAX\nJS 0x00403399\nMOV dword ptr [R14],0x1\nINC qword ptr [RBX + 0x8]\nMOV RAX,qword ptr [RBX + 0x10]\nJMP 0x004033ba\nMOV RAX,qword ptr [RBX + 0x28]\nCMP qword ptr [RAX],0x0\nJZ 0x004033b1\nMOV dword ptr [R14],0x1\nMOV RAX,qword ptr [RBX + 0x28]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RBX + 0x28],RCX\nMOV RAX,qword ptr [RAX]\nJMP 0x004033ba\nMOV RDI,qword ptr [RBX]\nCALL 0x00401980\nXOR ECX,ECX\nTEST EAX,EAX\nSETZ CL\nLEA EAX,[RCX + RCX*0x1 + 0x2]\nMOV dword ptr [R14],EAX\nJMP 0x004033b8\nMOV dword ptr [R14],0x2\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p396
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 8b 0b\n48 85 c9\n74 25\n48 8d 7b 10\n48 8d 73 18\n31 d2\ne8 0f e8 ff ff\n48 85 c0\n78 33\n41 c7 06 01 00 00 00\n48 ff 43 08\n48 8b 43 10\neb 43\n48 8b 43 28\n48 83 38 00\n74 30\n41 c7 06 01 00 00 00\n48 8b 43 28\n48 8d 48 08\n48 89 4b 28\n48 8b 00\neb 21\n48 8b 3b\ne8 df e5 ff ff\n31 c9\n85 c0\n0f 94 c1\n8d 44 09 02\n41 89 06\neb 07\n41 c7 06 02 00 00 00\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p397
S'.text:0000000000403340\n.text:0000000000403342\n.text:0000000000403343\n.text:0000000000403344\n.text:0000000000403347\n.text:000000000040334a\n.text:000000000040334d\n.text:0000000000403350\n.text:0000000000403352\n.text:0000000000403356\n.text:000000000040335a\n.text:000000000040335c\n.text:0000000000403361\n.text:0000000000403364\n.text:0000000000403366\n.text:000000000040336d\n.text:0000000000403371\n.text:0000000000403375\n.text:0000000000403377\n.text:000000000040337b\n.text:000000000040337f\n.text:0000000000403381\n.text:0000000000403388\n.text:000000000040338c\n.text:0000000000403390\n.text:0000000000403394\n.text:0000000000403397\n.text:0000000000403399\n.text:000000000040339c\n.text:00000000004033a1\n.text:00000000004033a3\n.text:00000000004033a5\n.text:00000000004033a8\n.text:00000000004033ac\n.text:00000000004033af\n.text:00000000004033b1\n.text:00000000004033b8\n.text:00000000004033ba\n.text:00000000004033be\n.text:00000000004033bf\n.text:00000000004033c1\n'
p398
tp399
sS'realloc'
p400
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060a190)();\u000a  return pvVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x0060a190]\n'
p403
S'ff 25 4a 87 20 00\n'
p404
S'.plt:0000000000401a40\n'
p405
tp406
sS'__fprintf_chk'
p407
(S'\n__stdcall __fprintf_chk()\n'
p408
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060a210)();\u000a  return;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x0060a210]\n'
p410
S'ff 25 ca 86 20 00\n'
p411
S'.plt:0000000000401b40\n'
p412
tp413
sS'get_charset_aliases'
p414
(S'\n__stdcall get_charset_aliases()\n'
p415
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_004063f4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_004063f4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_004063f4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_004063f4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_004063f4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_004063f4_caseD_9;\u000a      case -1:\u000a        goto switchD_004063f4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040644d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00406453:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_004063f4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00406453;\u000a  }\u000a  goto LAB_0040644d;\u000a}\u000a\u000a
p416
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060a4b0]\nTEST R15,R15\nJNZ 0x00406462\nMOV EDI,0x407f1c\nCALL 0x00401750\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00406218\nCMP byte ptr [RBX],0x0\nJNZ 0x0040621d\nMOV EBX,0x407f2c\nMOV RDI,RBX\nCALL 0x00401850\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00406237\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00406239\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x004019e0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040628d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401990\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00406298\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x004062b5\nMOV R15D,0x4078a9\nJMP 0x0040645b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401ac0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040644d\nMOV ESI,0x406ed7\nMOV EDI,EBP\nCALL 0x00401a50\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00406414\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x004063e0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004017b0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004017b0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x004063e0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401a10\nMOV ESI,0x407f3b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x004018d0\nCMP EAX,0x2\nJL 0x00406434\nMOV RDI,R12\nCALL 0x00401850\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401850\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004063bd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401a40\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00406304\nJMP 0x0040641d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x004019e0\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00406304\nJMP 0x0040641d\nMOV RDI,RBX\nCALL 0x004017e0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00406347\nJMP qword ptr [0x407de0 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004017e0\nCMP EAX,-0x1\nJZ 0x00406434\nCMP EAX,0xa\nJNZ 0x00406400\nJMP 0x004063e0\nMOV EDI,EBP\nCALL 0x004018f0\nJMP 0x0040644d\nMOV RDI,R15\nCALL 0x00401760\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00405b30\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040644d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00406453\nMOV R15D,0x4078a9\nMOV RDI,R13\nCALL 0x00401760\nMOV qword ptr [0x0060a4b0],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p417
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d b8 42 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 1c 7f 40 00\ne8 45 b5 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 2c 7f 40 00\n48 89 df\ne8 2b b6 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 99 b7 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 33 b7 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf a9 78 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 fc b7 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe d7 6e 40 00\n89 ef\ne8 76 b7 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 8b b4 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 7b b4 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 bf b6 ff ff\nbe 3b 7f 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 6a b5 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 d9 b4 ff ff\n49 89 c4\n48 89 ef\ne8 ce b4 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 96 b6 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 15 b6 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 f8 b3 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd e0 7d 40 00\n48 89 df\ne8 d8 b3 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 d5 b4 ff ff\neb 30\n4c 89 ff\ne8 3b b3 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 f4 f6 ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf a9 78 40 00\n4c 89 ef\ne8 05 b3 ff ff\n4c 89 3d 4e 40 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p418
S'.text:00000000004061e0\n.text:00000000004061e1\n.text:00000000004061e3\n.text:00000000004061e5\n.text:00000000004061e7\n.text:00000000004061e9\n.text:00000000004061ea\n.text:00000000004061f1\n.text:00000000004061f8\n.text:00000000004061fb\n.text:0000000000406201\n.text:0000000000406206\n.text:000000000040620b\n.text:000000000040620e\n.text:0000000000406211\n.text:0000000000406213\n.text:0000000000406216\n.text:0000000000406218\n.text:000000000040621d\n.text:0000000000406220\n.text:0000000000406225\n.text:0000000000406228\n.text:000000000040622b\n.text:000000000040622d\n.text:0000000000406232\n.text:0000000000406235\n.text:0000000000406237\n.text:0000000000406239\n.text:000000000040623d\n.text:0000000000406242\n.text:0000000000406247\n.text:000000000040624a\n.text:000000000040624d\n.text:000000000040624f\n.text:0000000000406252\n.text:0000000000406255\n.text:0000000000406258\n.text:000000000040625d\n.text:0000000000406260\n.text:0000000000406263\n.text:0000000000406266\n.text:0000000000406268\n.text:000000000040626e\n.text:0000000000406278\n.text:000000000040627d\n.text:0000000000406287\n.text:000000000040628b\n.text:000000000040628d\n.text:0000000000406293\n.text:0000000000406298\n.text:00000000004062a2\n.text:00000000004062a7\n.text:00000000004062b1\n.text:00000000004062b5\n.text:00000000004062ba\n.text:00000000004062bc\n.text:00000000004062bf\n.text:00000000004062c4\n.text:00000000004062c6\n.text:00000000004062c8\n.text:00000000004062ce\n.text:00000000004062d3\n.text:00000000004062d5\n.text:00000000004062da\n.text:00000000004062dd\n.text:00000000004062e0\n.text:00000000004062e6\n.text:00000000004062eb\n.text:00000000004062f0\n.text:00000000004062f2\n.text:00000000004062f7\n.text:00000000004062fa\n.text:00000000004062ff\n.text:0000000000406304\n.text:0000000000406309\n.text:000000000040630c\n.text:000000000040630f\n.text:0000000000406312\n.text:0000000000406315\n.text:0000000000406318\n.text:000000000040631d\n.text:0000000000406320\n.text:0000000000406325\n.text:0000000000406328\n.text:000000000040632d\n.text:0000000000406330\n.text:0000000000406335\n.text:000000000040633a\n.text:000000000040633d\n.text:0000000000406342\n.text:0000000000406347\n.text:0000000000406349\n.text:000000000040634c\n.text:0000000000406351\n.text:0000000000406356\n.text:0000000000406358\n.text:000000000040635b\n.text:000000000040635e\n.text:0000000000406361\n.text:0000000000406366\n.text:0000000000406369\n.text:000000000040636f\n.text:0000000000406372\n.text:0000000000406377\n.text:000000000040637a\n.text:000000000040637d\n.text:0000000000406382\n.text:0000000000406385\n.text:000000000040638a\n.text:000000000040638f\n.text:0000000000406392\n.text:0000000000406394\n.text:0000000000406398\n.text:000000000040639d\n.text:00000000004063a2\n.text:00000000004063a5\n.text:00000000004063aa\n.text:00000000004063ad\n.text:00000000004063b2\n.text:00000000004063b5\n.text:00000000004063bb\n.text:00000000004063bd\n.text:00000000004063c2\n.text:00000000004063c6\n.text:00000000004063cb\n.text:00000000004063ce\n.text:00000000004063d1\n.text:00000000004063d7\n.text:00000000004063e0\n.text:00000000004063e3\n.text:00000000004063e8\n.text:00000000004063eb\n.text:00000000004063ee\n.text:00000000004063f4\n.text:0000000000406400\n.text:0000000000406403\n.text:0000000000406408\n.text:000000000040640b\n.text:000000000040640d\n.text:0000000000406410\n.text:0000000000406412\n.text:0000000000406414\n.text:0000000000406416\n.text:000000000040641b\n.text:000000000040641d\n.text:0000000000406420\n.text:0000000000406425\n.text:0000000000406427\n.text:000000000040642c\n.text:000000000040642f\n.text:0000000000406434\n.text:0000000000406437\n.text:000000000040643c\n.text:0000000000406441\n.text:0000000000406444\n.text:0000000000406446\n.text:000000000040644b\n.text:000000000040644d\n.text:0000000000406453\n.text:0000000000406456\n.text:000000000040645b\n.text:0000000000406462\n.text:0000000000406465\n.text:000000000040646c\n.text:000000000040646d\n.text:000000000040646f\n.text:0000000000406471\n.text:0000000000406473\n.text:0000000000406475\n.text:0000000000406476\n'
p419
tp420
sS'nl_langinfo'
p421
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060a170)();\u000a  return pcVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x0060a170]\n'
p424
S'ff 25 6a 87 20 00\n'
p425
S'.plt:0000000000401a00\n'
p426
tp427
sS'x2realloc'
p428
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p429
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p430
S'MOV EDX,0x1\nJMP 0x00405990\n'
p431
S'ba 01 00 00 00\neb 89\n'
p432
S'.text:0000000000405a00\n.text:0000000000405a05\n'
p433
tp434
sS'_obstack_begin'
p435
(S'\n__stdcall _obstack_begin(obstack * h, size_t size, size_t alignment, anon_subr_void_ptr_size_t * chunkfun, anon_subr_void_void_ptr * freefun)\n'
p436
V\u000aint _obstack_begin(obstack *h,size_t size,size_t alignment,void *(*chunkfun)(size_t),\u000a                  void (*freefun)(void *))\u000a\u000a{\u000a  *(void *(**)(size_t))&h->chunkfun = chunkfun;\u000a  *(void (**)(void *))&h->freefun = freefun;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield & 0xfe;\u000a  _obstack_begin_worker();\u000a  return 1;\u000a}\u000a\u000a
p437
S'PUSH RAX\nMOV qword ptr [RDI + 0x38],RCX\nMOV qword ptr [RDI + 0x40],R8\nAND byte ptr [RDI + 0x50],0xfe\nCALL 0x00405c90\nMOV EAX,0x1\nPOP RCX\nRET\n'
p438
S'50\n48 89 4f 38\n4c 89 47 40\n80 67 50 fe\ne8 0e 00 00 00\nb8 01 00 00 00\n59\nc3\n'
p439
S'.text:0000000000405c70\n.text:0000000000405c71\n.text:0000000000405c75\n.text:0000000000405c79\n.text:0000000000405c7d\n.text:0000000000405c82\n.text:0000000000405c87\n.text:0000000000405c88\n'
p440
tp441
sS'strlen'
p442
(S'\n__stdcall strlen(char * __s)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060a098)();\u000a  return sVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x0060a098]\n'
p445
S'ff 25 42 88 20 00\n'
p446
S'.plt:0000000000401850\n'
p447
tp448
sS'memcmp'
p449
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060a108)();\u000a  return iVar1;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x0060a108]\n'
p452
S'ff 25 d2 87 20 00\n'
p453
S'.plt:0000000000401930\n'
p454
tp455
sS'quotearg_n_style_mem'
p456
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p457
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p458
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00404970\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404740\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p459
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p460
S'.text:00000000004049d0\n.text:00000000004049d1\n.text:00000000004049d3\n.text:00000000004049d5\n.text:00000000004049d6\n.text:00000000004049da\n.text:00000000004049dd\n.text:00000000004049e0\n.text:00000000004049e2\n.text:00000000004049e5\n.text:00000000004049e8\n.text:00000000004049ed\n.text:00000000004049ef\n.text:00000000004049f2\n.text:00000000004049f5\n.text:00000000004049f8\n.text:00000000004049fd\n.text:0000000000404a01\n.text:0000000000404a02\n.text:0000000000404a04\n.text:0000000000404a06\n.text:0000000000404a07\n'
p461
tp462
sS'_exit'
p463
(S'\n__stdcall _exit(int __status)\n'
p464
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060a040)();\u000a  return;\u000a}\u000a\u000a
p465
S'JMP qword ptr [0x0060a040]\n'
p466
S'ff 25 9a 88 20 00\n'
p467
S'.plt:00000000004017a0\n'
p468
tp469
sS'sysinfo'
p470
(S'\n__stdcall sysinfo(sysinfo * __info)\n'
p471
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint sysinfo(sysinfo *__info)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_sysinfo_0060a1f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x0060a1f8]\n'
p473
S'ff 25 e2 86 20 00\n'
p474
S'.plt:0000000000401b10\n'
p475
tp476
sS'emit_stdin_note'
p477
(S'\n__stdcall emit_stdin_note()\n'
p478
V\u000avoid emit_stdin_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,"\u005cnWith no FILE, or when FILE is -, read standard input.\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p479
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x406fb6\nMOV EDX,0x5\nCALL 0x00401830\nMOV RSI,qword ptr [0x0060a2c8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401940\n'
p480
S'50\n31 ff\nbe b6 6f 40 00\nba 05 00 00 00\ne8 4e fa ff ff\n48 8b 35 df 84 20 00\n48 89 c7\n58\ne9 4e fb ff ff\n'
p481
S'.text:0000000000401dd0\n.text:0000000000401dd1\n.text:0000000000401dd3\n.text:0000000000401dd8\n.text:0000000000401ddd\n.text:0000000000401de2\n.text:0000000000401de9\n.text:0000000000401dec\n.text:0000000000401ded\n'
p482
tp483
sS'xrealloc'
p484
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p485
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p486
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00405977\nTEST RBX,RBX\nJNZ 0x00405977\nCALL 0x00401760\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401a40\nTEST RBX,RBX\nJZ 0x00405989\nTEST RAX,RAX\nJZ 0x0040598b\nPOP RBX\nRET\nCALL 0x00405ab0\n'
p487
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 ed bd ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 c1 c0 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p488
S'.text:0000000000405960\n.text:0000000000405961\n.text:0000000000405964\n.text:0000000000405967\n.text:0000000000405969\n.text:000000000040596c\n.text:000000000040596e\n.text:0000000000405973\n.text:0000000000405975\n.text:0000000000405976\n.text:0000000000405977\n.text:000000000040597a\n.text:000000000040597f\n.text:0000000000405982\n.text:0000000000405984\n.text:0000000000405987\n.text:0000000000405989\n.text:000000000040598a\n.text:000000000040598b\n'
p489
tp490
sS'close_stdout'
p491
(S'\n__stdcall close_stdout()\n'
p492
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00403457;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x40717f,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00403457:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p493
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060a2c8]\nCALL 0x004060e0\nTEST EAX,EAX\nJZ 0x00403457\nCMP byte ptr [0x0060a358],0x0\nJZ 0x0040346c\nCALL 0x00401780\nCMP dword ptr [RAX],0x20\nJNZ 0x0040346c\nMOV RDI,qword ptr [0x0060a300]\nCALL 0x004060e0\nTEST EAX,EAX\nJNZ 0x004034b1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40716f\nMOV EDX,0x5\nCALL 0x00401830\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060a350]\nCALL 0x00401780\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x004034bc\nXOR EDI,EDI\nMOV EDX,0x40717f\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401ab0\nMOV EDI,dword ptr [0x0060a250]\nCALL 0x004017a0\nMOV EDI,dword ptr [0x0060a250]\nCALL 0x004017a0\nMOV RDI,RBX\nCALL 0x00404ad0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40717b\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401ab0\nMOV EDI,dword ptr [0x0060a250]\nCALL 0x004017a0\n'
p494
S'55\n41 56\n53\n48 8b 3d 8d 6e 20 00\ne8 a0 2c 00 00\n85 c0\n74 13\n80 3d 0d 6f 20 00 00\n74 1f\ne8 2e e3 ff ff\n83 38 20\n75 15\n48 8b 3d a2 6e 20 00\ne8 7d 2c 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 6f 71 40 00\nba 05 00 00 00\ne8 b3 e3 ff ff\n49 89 c6\n48 8b 1d c9 6e 20 00\ne8 f4 e2 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 7f 71 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 0a e6 ff ff\n8b 3d a4 6d 20 00\ne8 ef e2 ff ff\n8b 3d 99 6d 20 00\ne8 e4 e2 ff ff\n48 89 df\ne8 0c 16 00 00\n48 89 c1\n31 ff\nba 7b 71 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 d6 e5 ff ff\n8b 3d 70 6d 20 00\ne8 bb e2 ff ff\n'
p495
S'.text:0000000000403430\n.text:0000000000403431\n.text:0000000000403433\n.text:0000000000403434\n.text:000000000040343b\n.text:0000000000403440\n.text:0000000000403442\n.text:0000000000403444\n.text:000000000040344b\n.text:000000000040344d\n.text:0000000000403452\n.text:0000000000403455\n.text:0000000000403457\n.text:000000000040345e\n.text:0000000000403463\n.text:0000000000403465\n.text:0000000000403467\n.text:0000000000403468\n.text:000000000040346a\n.text:000000000040346b\n.text:000000000040346c\n.text:000000000040346e\n.text:0000000000403473\n.text:0000000000403478\n.text:000000000040347d\n.text:0000000000403480\n.text:0000000000403487\n.text:000000000040348c\n.text:000000000040348f\n.text:0000000000403491\n.text:0000000000403493\n.text:0000000000403495\n.text:000000000040349a\n.text:000000000040349c\n.text:000000000040349e\n.text:00000000004034a1\n.text:00000000004034a6\n.text:00000000004034ac\n.text:00000000004034b1\n.text:00000000004034b7\n.text:00000000004034bc\n.text:00000000004034bf\n.text:00000000004034c4\n.text:00000000004034c7\n.text:00000000004034c9\n.text:00000000004034ce\n.text:00000000004034d0\n.text:00000000004034d2\n.text:00000000004034d5\n.text:00000000004034da\n.text:00000000004034e0\n'
p496
tp497
sS'version_etc_ar'
p498
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p499
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p500
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00405770\nJMP 0x00405400\n'
p501
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p502
S'.text:0000000000405760\n.text:0000000000405767\n.text:0000000000405770\n.text:0000000000405776\n.text:000000000040577a\n.text:000000000040577c\n'
p503
tp504
sS'is_basic'
p505
(S'\n__stdcall is_basic()\n'
p506
V\u000a_Bool is_basic(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)((*(uint *)((long)is_basic_table + (ulong)(in_EDI >> 3 & 0x1c)) >> (in_EDI & 0x1f) &\u000a                 1) != 0);\u000a}\u000a\u000a
p507
S'MOV EAX,EDI\nSHR EAX,0x3\nAND EAX,0x1c\nMOV EAX,dword ptr [0x407190 + RAX]\nBT EAX,EDI\nSETC AL\nRET\n'
p508
S'89 f8\nc1 e8 03\n83 e0 1c\n8b 80 90 71 40 00\n0f a3 f8\n0f 92 c0\nc3\n'
p509
S'.text:00000000004035f0\n.text:00000000004035f2\n.text:00000000004035f5\n.text:00000000004035f8\n.text:00000000004035fe\n.text:0000000000403601\n.text:0000000000403604\n'
p510
tp511
sS'c_isxdigit'
p512
(S'\n__stdcall c_isxdigit()\n'
p513
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p514
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x004060bb\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p515
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p516
S'.text:00000000004060a0\n.text:00000000004060a3\n.text:00000000004060a6\n.text:00000000004060a8\n.text:00000000004060b2\n.text:00000000004060b4\n.text:00000000004060b7\n.text:00000000004060ba\n.text:00000000004060bb\n.text:00000000004060bd\n'
p517
tp518
sS'ferror'
p519
(S'\n__stdcall ferror(FILE * __stream)\n'
p520
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_0060a058)();\u000a  return iVar1;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x0060a058]\n'
p522
S'ff 25 82 88 20 00\n'
p523
S'.plt:00000000004017d0\n'
p524
tp525
sS'__libc_csu_fini'
p526
(S'\n__stdcall __libc_csu_fini()\n'
p527
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p528
S'RET\n'
p529
S'f3 c3\n'
p530
S'.text:00000000004064f0\n'
p531
tp532
sS'write_counts'
p533
(S'\n__stdcall write_counts(uintmax_t lines, uintmax_t words, uintmax_t chars, uintmax_t bytes, uintmax_t linelength, char * file)\n'
p534
V\u000avoid write_counts(uintmax_t lines,uintmax_t words,uintmax_t chars,uintmax_t bytes,\u000a                 uintmax_t linelength,char *file)\u000a\u000a{\u000a  int iVar1;\u000a  char " %*s" [5];\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  char buf [21];\u000a  char acStack72 [24];\u000a  \u000a  iVar1 = number_width;\u000a  if (print_lines == 1) {\u000a    pcVar2 = umaxtostr(lines,acStack72);\u000a    __printf_chk(1,0x406a41,(ulong)(uint)iVar1,pcVar2);\u000a    pcVar2 = " %*s";\u000a    if (print_words != 1) goto LAB_0040298e;\u000a  }\u000a  else {\u000a    pcVar2 = "%*s";\u000a    if (print_words != 1) goto LAB_0040298e;\u000a  }\u000a  iVar1 = number_width;\u000a  pcVar3 = umaxtostr(words,acStack72);\u000a  __printf_chk(1,pcVar2,(ulong)(uint)iVar1,pcVar3);\u000a  pcVar2 = " %*s";\u000aLAB_0040298e:\u000a  iVar1 = number_width;\u000a  if (print_chars == 1) {\u000a    pcVar3 = umaxtostr(chars,acStack72);\u000a    __printf_chk(1,pcVar2,(ulong)(uint)iVar1,pcVar3);\u000a    pcVar2 = " %*s";\u000a  }\u000a  iVar1 = number_width;\u000a  if (print_bytes == 1) {\u000a    pcVar3 = umaxtostr(bytes,acStack72);\u000a    __printf_chk(1,pcVar2,(ulong)(uint)iVar1,pcVar3);\u000a    pcVar2 = " %*s";\u000a  }\u000a  iVar1 = number_width;\u000a  if (print_linelength == 1) {\u000a    pcVar3 = umaxtostr(linelength,acStack72);\u000a    __printf_chk(1,pcVar2,(ulong)(uint)iVar1,pcVar3);\u000a  }\u000a  if (file != (char *)0x0) {\u000a    pcVar2 = strchr(file,10);\u000a    if (pcVar2 != (char *)0x0) {\u000a      file = quotearg_n_style_colon((char *)0x0);\u000a    }\u000a    __printf_chk(1,0x40717e,file);\u000a  }\u000a  putchar_unlocked(10);\u000a  return;\u000a}\u000a\u000a
p535
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13,R9\nMOV R14,R8\nMOV R12,RCX\nMOV RBP,RDX\nMOV RAX,RSI\nCMP byte ptr [0x0060a313],0x1\nJNZ 0x00402942\nMOV R15D,dword ptr [0x0060a348]\nMOV RSI,RSP\nMOV RBX,RAX\nCALL 0x00403520\nMOV RCX,RAX\nMOV EDI,0x1\nMOV ESI,0x406a41\nXOR EAX,EAX\nMOV EDX,R15D\nCALL 0x00401a70\nMOV RAX,RBX\nMOV EBX,0x406a40\nCMP byte ptr [0x0060a312],0x1\nJZ 0x00402950\nJMP 0x0040298e\nMOV EBX,0x406a41\nCMP byte ptr [0x0060a312],0x1\nJNZ 0x0040298e\nMOV R15,R13\nMOV R13,R12\nMOV R12,R14\nMOV R14D,dword ptr [0x0060a348]\nMOV RSI,RSP\nMOV RDI,RAX\nCALL 0x00403520\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV EDX,R14D\nMOV R14,R12\nMOV R12,R13\nMOV R13,R15\nCALL 0x00401a70\nMOV EBX,0x406a40\nCMP byte ptr [0x0060a311],0x1\nJNZ 0x004029c3\nMOV R15D,dword ptr [0x0060a348]\nMOV RSI,RSP\nMOV RDI,RBP\nCALL 0x00403520\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV EDX,R15D\nCALL 0x00401a70\nMOV EBX,0x406a40\nCMP byte ptr [0x0060a310],0x1\nJNZ 0x004029f6\nMOV EBP,dword ptr [0x0060a348]\nMOV RSI,RSP\nMOV RDI,R12\nCALL 0x00403520\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV EDX,EBP\nCALL 0x00401a70\nMOV EBX,0x406a40\nCMP byte ptr [0x0060a314],0x1\nJNZ 0x00402a24\nMOV EBP,dword ptr [0x0060a348]\nMOV RSI,RSP\nMOV RDI,R14\nCALL 0x00403520\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV EDX,EBP\nCALL 0x00401a70\nTEST R13,R13\nJZ 0x00402a61\nMOV ESI,0xa\nMOV RDI,R13\nCALL 0x00401880\nTEST RAX,RAX\nJZ 0x00402a4d\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R13\nCALL 0x00404af0\nMOV R13,RAX\nMOV EDI,0x1\nMOV ESI,0x40717e\nXOR EAX,EAX\nMOV RDX,R13\nCALL 0x00401a70\nMOV EDI,0xa\nCALL 0x004019a0\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p536
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 cd\n4d 89 c6\n49 89 cc\n48 89 d5\n48 89 f0\n80 3d 0f 7a 20 00 01\n75 3c\n44 8b 3d 3b 7a 20 00\n48 89 e6\n48 89 c3\ne8 08 0c 00 00\n48 89 c1\nbf 01 00 00 00\nbe 41 6a 40 00\n31 c0\n44 89 fa\ne8 41 f1 ff ff\n48 89 d8\nbb 40 6a 40 00\n80 3d d4 79 20 00 01\n74 10\neb 4c\nbb 41 6a 40 00\n80 3d c4 79 20 00 01\n75 3e\n4d 89 ef\n4d 89 e5\n4d 89 f4\n44 8b 35 e8 79 20 00\n48 89 e6\n48 89 c7\ne8 b5 0b 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n44 89 f2\n4d 89 e6\n4d 89 ec\n4d 89 fd\ne8 e7 f0 ff ff\nbb 40 6a 40 00\n80 3d 7c 79 20 00 01\n75 2c\n44 8b 3d aa 79 20 00\n48 89 e6\n48 89 ef\ne8 77 0b 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n44 89 fa\ne8 b2 f0 ff ff\nbb 40 6a 40 00\n80 3d 46 79 20 00 01\n75 2a\n8b 2d 76 79 20 00\n48 89 e6\n4c 89 e7\ne8 43 0b 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n89 ea\ne8 7f f0 ff ff\nbb 40 6a 40 00\n80 3d 17 79 20 00 01\n75 25\n8b 2d 43 79 20 00\n48 89 e6\n4c 89 f7\ne8 10 0b 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n89 ea\ne8 4c f0 ff ff\n4d 85 ed\n74 38\nbe 0a 00 00 00\n4c 89 ef\ne8 4a ee ff ff\n48 85 c0\n74 12\n31 ff\nbe 03 00 00 00\n4c 89 ea\ne8 a6 20 00 00\n49 89 c5\nbf 01 00 00 00\nbe 7e 71 40 00\n31 c0\n4c 89 ea\ne8 0f f0 ff ff\nbf 0a 00 00 00\ne8 35 ef ff ff\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p537
S'.text:00000000004028e0\n.text:00000000004028e1\n.text:00000000004028e3\n.text:00000000004028e5\n.text:00000000004028e7\n.text:00000000004028e9\n.text:00000000004028ea\n.text:00000000004028ee\n.text:00000000004028f1\n.text:00000000004028f4\n.text:00000000004028f7\n.text:00000000004028fa\n.text:00000000004028fd\n.text:0000000000402904\n.text:0000000000402906\n.text:000000000040290d\n.text:0000000000402910\n.text:0000000000402913\n.text:0000000000402918\n.text:000000000040291b\n.text:0000000000402920\n.text:0000000000402925\n.text:0000000000402927\n.text:000000000040292a\n.text:000000000040292f\n.text:0000000000402932\n.text:0000000000402937\n.text:000000000040293e\n.text:0000000000402940\n.text:0000000000402942\n.text:0000000000402947\n.text:000000000040294e\n.text:0000000000402950\n.text:0000000000402953\n.text:0000000000402956\n.text:0000000000402959\n.text:0000000000402960\n.text:0000000000402963\n.text:0000000000402966\n.text:000000000040296b\n.text:000000000040296e\n.text:0000000000402973\n.text:0000000000402975\n.text:0000000000402978\n.text:000000000040297b\n.text:000000000040297e\n.text:0000000000402981\n.text:0000000000402984\n.text:0000000000402989\n.text:000000000040298e\n.text:0000000000402995\n.text:0000000000402997\n.text:000000000040299e\n.text:00000000004029a1\n.text:00000000004029a4\n.text:00000000004029a9\n.text:00000000004029ac\n.text:00000000004029b1\n.text:00000000004029b3\n.text:00000000004029b6\n.text:00000000004029b9\n.text:00000000004029be\n.text:00000000004029c3\n.text:00000000004029ca\n.text:00000000004029cc\n.text:00000000004029d2\n.text:00000000004029d5\n.text:00000000004029d8\n.text:00000000004029dd\n.text:00000000004029e0\n.text:00000000004029e5\n.text:00000000004029e7\n.text:00000000004029ea\n.text:00000000004029ec\n.text:00000000004029f1\n.text:00000000004029f6\n.text:00000000004029fd\n.text:00000000004029ff\n.text:0000000000402a05\n.text:0000000000402a08\n.text:0000000000402a0b\n.text:0000000000402a10\n.text:0000000000402a13\n.text:0000000000402a18\n.text:0000000000402a1a\n.text:0000000000402a1d\n.text:0000000000402a1f\n.text:0000000000402a24\n.text:0000000000402a27\n.text:0000000000402a29\n.text:0000000000402a2e\n.text:0000000000402a31\n.text:0000000000402a36\n.text:0000000000402a39\n.text:0000000000402a3b\n.text:0000000000402a3d\n.text:0000000000402a42\n.text:0000000000402a45\n.text:0000000000402a4a\n.text:0000000000402a4d\n.text:0000000000402a52\n.text:0000000000402a57\n.text:0000000000402a59\n.text:0000000000402a5c\n.text:0000000000402a61\n.text:0000000000402a66\n.text:0000000000402a6b\n.text:0000000000402a6f\n.text:0000000000402a70\n.text:0000000000402a72\n.text:0000000000402a74\n.text:0000000000402a76\n.text:0000000000402a78\n.text:0000000000402a79\n'
p538
tp539
sS'abort'
p540
(S'\n__stdcall abort()\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060a028)();\u000a  return;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x0060a028]\n'
p543
S'ff 25 b2 88 20 00\n'
p544
S'.plt:0000000000401770\n'
p545
tp546
sS'usable_st_size'
p547
(S'\n__stdcall usable_st_size(stat * sb)\n'
p548
V\u000a_Bool usable_st_size(stat *sb)\u000a\u000a{\u000a  if ((*(ushort *)&sb->st_mode & 0xf000 | 0x2000) == 0xa000) {\u000a    return true;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p549
S'MOVZX EAX,word ptr [RDI + 0x18]\nOR EAX,0x2000\nAND EAX,0xf000\nCMP EAX,0xa000\nJNZ 0x004032c8\nMOV AL,0x1\nRET\nXOR EAX,EAX\nRET\n'
p550
S'0f b7 47 18\n0d 00 20 00 00\n25 00 f0 00 00\n3d 00 a0 00 00\n75 03\nb0 01\nc3\n31 c0\nc3\n'
p551
S'.text:00000000004032b0\n.text:00000000004032b4\n.text:00000000004032b9\n.text:00000000004032be\n.text:00000000004032c3\n.text:00000000004032c5\n.text:00000000004032c7\n.text:00000000004032c8\n.text:00000000004032ca\n'
p552
tp553
sS'version_etc'
p554
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p555
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p556
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00405832\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00405790\nADD RSP,0xd8\nRET\n'
p557
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p558
S'.text:00000000004057f0\n.text:00000000004057f7\n.text:00000000004057f9\n.text:00000000004057fb\n.text:0000000000405800\n.text:0000000000405805\n.text:000000000040580a\n.text:0000000000405812\n.text:000000000040581a\n.text:0000000000405822\n.text:000000000040582a\n.text:0000000000405832\n.text:0000000000405837\n.text:000000000040583c\n.text:0000000000405841\n.text:0000000000405846\n.text:000000000040584e\n.text:0000000000405853\n.text:000000000040585b\n.text:0000000000405862\n.text:0000000000405865\n.text:000000000040586a\n.text:0000000000405871\n'
p559
tp560
sS'posix_fadvise'
p561
(S'\n__stdcall posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p562
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_0060a0f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x0060a0f0]\n'
p564
S'ff 25 ea 87 20 00\n'
p565
S'.plt:0000000000401900\n'
p566
tp567
sS'mb_width_aux'
p568
(S'\n__stdcall mb_width_aux()\n'
p569
V\u000aint mb_width_aux(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  wint_t __wc;\u000a  \u000a  uVar1 = wcwidth(__wc);\u000a  if ((int)uVar1 < 0) {\u000a    iVar2 = iswcntrl(__wc);\u000a    uVar1 = (uint)(iVar2 == 0);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p570
S'PUSH RBX\nMOV EBX,EDI\nCALL 0x004019d0\nTEST EAX,EAX\nJNS 0x0040359c\nMOV EDI,EBX\nCALL 0x004017f0\nMOV ECX,EAX\nXOR EAX,EAX\nTEST ECX,ECX\nSETZ AL\nPOP RBX\nRET\n'
p571
S'53\n89 fb\ne8 48 e4 ff ff\n85 c0\n79 10\n89 df\ne8 5d e2 ff ff\n89 c1\n31 c0\n85 c9\n0f 94 c0\n5b\nc3\n'
p572
S'.text:0000000000403580\n.text:0000000000403581\n.text:0000000000403583\n.text:0000000000403588\n.text:000000000040358a\n.text:000000000040358c\n.text:000000000040358e\n.text:0000000000403593\n.text:0000000000403595\n.text:0000000000403597\n.text:0000000000403599\n.text:000000000040359c\n.text:000000000040359d\n'
p573
tp574
sS'lseek'
p575
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060a0c0)();\u000a  return _Var1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x0060a0c0]\n'
p578
S'ff 25 1a 88 20 00\n'
p579
S'.plt:00000000004018a0\n'
p580
tp581
sS'getdelim'
p582
(S'\n__stdcall getdelim(char * * __lineptr, size_t * __n, int __delimiter, FILE * __stream)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__ssize_t getdelim(char **__lineptr,size_t *__n,int __delimiter,FILE *__stream)\u000a\u000a{\u000a  __ssize_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getdelim_0060a228)();\u000a  return _Var1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x0060a228]\n'
p585
S'ff 25 b2 86 20 00\n'
p586
S'.plt:0000000000401b70\n'
p587
tp588
sS'wcwidth'
p589
(S'\n__stdcall wcwidth(wchar_t __c)\n'
p590
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint wcwidth(wchar_t __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_wcwidth_0060a158)();\u000a  return iVar1;\u000a}\u000a\u000a
p591
S'JMP qword ptr [0x0060a158]\n'
p592
S'ff 25 82 87 20 00\n'
p593
S'.plt:00000000004019d0\n'
p594
tp595
sS'quotearg_n_mem'
p596
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p597
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p598
S'MOV ECX,0x60a370\nJMP 0x00404740\n'
p599
S'b9 70 a3 60 00\ne9 36 fe ff ff\n'
p600
S'.text:0000000000404900\n.text:0000000000404905\n'
p601
tp602
sS'__printf_chk'
p603
(S'\n__stdcall __printf_chk()\n'
p604
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060a1a8)();\u000a  return;\u000a}\u000a\u000a
p605
S'JMP qword ptr [0x0060a1a8]\n'
p606
S'ff 25 32 87 20 00\n'
p607
S'.plt:0000000000401a70\n'
p608
tp609
sS'wc'
p610
(S'\n__stdcall wc(char * file_x, fstatus * fstatus, off_t current_pos)\n'
p611
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000a_Bool wc(char *file_x,fstatus *fstatus,off_t current_pos)\u000a\u000a{\u000a  uint uVar1;\u000a  ulong uVar2;\u000a  ushort *puVar3;\u000a  void *buf_00;\u000a  uintmax_t uVar4;\u000a  mbstate_t mVar5;\u000a  _Bool _Var6;\u000a  byte bVar7;\u000a  int iVar8;\u000a  size_t __n;\u000a  size_t __n_00;\u000a  undefined4 extraout_var;\u000a  long __offset;\u000a  __off_t _Var9;\u000a  void *pvVar10;\u000a  size_t sVar11;\u000a  ushort **ppuVar12;\u000a  uint *puVar13;\u000a  __off_t in_RCX;\u000a  byte bVar14;\u000a  ulong uVar15;\u000a  byte bVar16;\u000a  size_t __n_01;\u000a  char *__src;\u000a  uintmax_t lines;\u000a  char *__s;\u000a  ulong uVar17;\u000a  bool bVar18;\u000a  uintmax_t words;\u000a  char *file;\u000a  char buf [16385];\u000a  int local_4090;\u000a  ulong local_4088;\u000a  wint_t local_407c;\u000a  ulong local_4078;\u000a  uintmax_t local_4070;\u000a  size_t local_4068;\u000a  uintmax_t local_4060;\u000a  fstatus *local_4058;\u000a  fstatus *local_4050;\u000a  mbstate_t local_4048;\u000a  long local_4040;\u000a  char local_4038 [16392];\u000a  \u000a  buf_00 = (void *)((ulong)file_x & 0xffffffff);\u000a  local_4050 = fstatus;\u000a  if (fstatus == (fstatus *)0x0) {\u000a    local_4050 = (fstatus *)dcgettext(0,"standard input",5);\u000a  }\u000a  __n = __ctype_get_mb_cur_max();\u000a  bVar7 = print_bytes;\u000a  bVar14 = print_chars;\u000a  if (__n < 2) {\u000a    bVar7 = (print_bytes | print_chars) & 1;\u000a    bVar14 = 0;\u000a  }\u000a  bVar16 = print_linelength | print_words;\u000a  bVar18 = bVar14 != 0 || bVar7 == 0;\u000a  local_4090 = (int)buf_00;\u000a  if (((print_lines != 0) || ((bVar16 & 1) != 0)) || (bVar18)) {\u000a    fdadvise(local_4090,0,0,2);\u000a  }\u000a  if (((print_lines | bVar16) & 1 | bVar18) == 0) {\u000a    iVar8 = *(int *)current_pos;\u000a    if (0 < iVar8) {\u000a      iVar8 = fstat(local_4090,(stat *)(current_pos + 8));\u000a      *(int *)current_pos = iVar8;\u000a    }\u000a    if (((iVar8 == 0) && (_Var6 = usable_st_size((stat *)(current_pos + 8)), _Var6 != false)) &&\u000a       (uVar17 = *(ulong *)(current_pos + 0x38), -1 < (long)uVar17)) {\u000a      uVar2 = *(ulong *)(current_pos + 0x40);\u000a      uVar15 = uVar2 + 1;\u000a      if (0x2000000000000000 < uVar2) {\u000a        uVar15 = 0x201;\u000a      }\u000a      if ((long)uVar2 < 1) {\u000a        uVar15 = 0x201;\u000a      }\u000a      if (in_RCX < 0) {\u000a        in_RCX = lseek(local_4090,0,1);\u000a      }\u000a      local_4070 = 0;\u000a      if (-1 < in_RCX) {\u000a        __offset = uVar17 - uVar17 % uVar15;\u000a        local_4070 = 0;\u000a        if (__offset - in_RCX != 0 && in_RCX <= __offset) {\u000a          _Var9 = lseek(local_4090,__offset,1);\u000a          local_4070 = 0;\u000a          if (-1 < _Var9) {\u000a            local_4070 = __offset - in_RCX;\u000a          }\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      local_4070 = 0;\u000a    }\u000a    fdadvise(local_4090,0,0,2);\u000a    while (__n_00 = safe_read(buf_00,(size_t)local_4038), __n_00 != 0) {\u000a      if (__n_00 == 0xffffffffffffffff) {\u000a        puVar13 = (uint *)__errno_location();\u000a        uVar1 = *puVar13;\u000a        quotearg_n_style_colon((char *)0x0);\u000a        error(0,(ulong)uVar1,0x40717f);\u000a        local_4090._0_1_ = 0;\u000a        goto LAB_00402fd0;\u000a      }\u000a      local_4070 = local_4070 + __n_00;\u000a    }\u000a    local_4090._0_1_ = 1;\u000aLAB_00402fd0:\u000a    local_4088 = 0;\u000a    words = 0;\u000a    lines = 0;\u000a    __n_00 = 0;\u000a  }\u000a  else {\u000a    if ((bVar16 & 1 | bVar14 != 0) == 0) {\u000a      local_4070 = 0;\u000a      bVar18 = false;\u000a      lines = 0;\u000a      local_4058 = fstatus;\u000a      while (__n_00 = safe_read(buf_00,(size_t)local_4038), __n_00 != 0) {\u000a        if (__n_00 == 0xffffffffffffffff) {\u000a          puVar13 = (uint *)__errno_location();\u000a          uVar1 = *puVar13;\u000a          quotearg_n_style_colon((char *)0x0);\u000a          error(0,(ulong)uVar1,0x40717f);\u000a          local_4090._0_1_ = 0;\u000a          goto LAB_00403159;\u000a        }\u000a        sVar11 = __n_00;\u000a        __s = local_4038;\u000a        words = lines;\u000a        if (bVar18) {\u000a          pvVar10 = memchr(local_4038,10,__n_00);\u000a          words = lines;\u000a          while (pvVar10 != (void *)0x0) {\u000a            words = words + 1;\u000a            pvVar10 = memchr((void *)((long)pvVar10 + 1),10,\u000a                             (size_t)(local_4038 + (__n_00 - (long)(void *)((long)pvVar10 + 1))));\u000a          }\u000a        }\u000a        else {\u000a          do {\u000a            words = words + (ulong)(*__s == '\u005cn');\u000a            sVar11 = sVar11 - 1;\u000a            __s = __s + 1;\u000a          } while (sVar11 != 0);\u000a        }\u000a        local_4070 = local_4070 + __n_00;\u000a        bVar18 = words - lines <= __n_00 / 0xf;\u000a        lines = words;\u000a      }\u000a      local_4090._0_1_ = 1;\u000aLAB_00403159:\u000a      local_4088 = 0;\u000a      words = 0;\u000a      __n_00 = 0;\u000a      fstatus = local_4058;\u000a    }\u000a    else {\u000a      local_4058 = fstatus;\u000a      __n = __ctype_get_mb_cur_max();\u000a      if (__n < 2) {\u000a        local_4088 = 0;\u000a        words = 0;\u000a        uVar15 = 0;\u000a        lines = 0;\u000a        __offset = 0;\u000a        uVar17 = 0;\u000a        while( true ) {\u000a          __s = local_4038;\u000a          __n_00 = safe_read(buf_00,(size_t)__s);\u000a          if (__n_00 == 0xffffffffffffffff) break;\u000a          local_4070 = words;\u000a          sVar11 = __n_00;\u000a          if (__n_00 == 0) {\u000a            local_4090._0_1_ = 1;\u000a            local_4070 = words;\u000a            goto LAB_00403215;\u000a          }\u000a          do {\u000a            local_4068 = sVar11;\u000a            switch(*__s) {\u000a            case '\u005ct':\u000a              uVar17 = (uVar17 + 8) - (ulong)((uint)uVar17 & 7);\u000a              break;\u000a            case '\u005cn':\u000a              lines = lines + 1;\u000a            case '\u005cf':\u000a            case '\u005cr':\u000a              if (local_4088 < uVar17) {\u000a                local_4088 = uVar17;\u000a              }\u000a              uVar17 = 0;\u000a              break;\u000a            case '\u005cv':\u000a              break;\u000a            default:\u000a              local_4078 = uVar15;\u000a              local_4060 = lines;\u000a              ppuVar12 = __ctype_b_loc();\u000a              puVar3 = *ppuVar12;\u000a              bVar7 = to_uchar();\u000a              uVar15 = local_4078;\u000a              lines = local_4060;\u000a              if ((puVar3[(ulong)bVar7] & 0x4000) != 0) {\u000a                uVar17 = uVar17 + 1;\u000a                uVar15 = local_4078;\u000a                lines = local_4060;\u000a                if ((puVar3[(ulong)bVar7] & 0x2000) != 0) break;\u000a                __offset = 1;\u000a                uVar15 = local_4078;\u000a                lines = local_4060;\u000a              }\u000a              goto LAB_004030fd;\u000a            case ' ':\u000a              uVar17 = uVar17 + 1;\u000a            }\u000a            uVar15 = uVar15 + __offset;\u000a            __offset = 0;\u000aLAB_004030fd:\u000a            __s = __s + 1;\u000a            __n_00 = __n_00 - 1;\u000a            sVar11 = local_4068;\u000a          } while (__n_00 != 0);\u000a          words = local_4070 + local_4068;\u000a        }\u000a        local_4070 = words;\u000a        puVar13 = (uint *)__errno_location();\u000a        uVar1 = *puVar13;\u000a        local_4090._0_1_ = 0;\u000a        __s = quotearg_n_style_colon((char *)0x0);\u000a        error(0,(ulong)uVar1,0x40717f,__s);\u000aLAB_00403215:\u000a        if (local_4088 < uVar17) {\u000a          local_4088 = uVar17;\u000a        }\u000a        words = __offset + uVar15;\u000a        __n_00 = 0;\u000a        fstatus = local_4058;\u000a      }\u000a      else {\u000a        local_4048 = (mbstate_t)0x0;\u000a        local_4088 = 0;\u000a        local_4070 = 0;\u000a        local_4068 = 0;\u000a        local_4040 = 0;\u000a        local_4060 = 0;\u000a        bVar7 = 0;\u000a        local_4078 = 0;\u000a        bVar18 = false;\u000aLAB_00402bb0:\u000a        __n = 0;\u000a        while (__n_00 = safe_read(buf_00,(size_t)(local_4038 + __n)), __n_00 != 0xffffffffffffffff)\u000a        {\u000a          if (__n_00 == 0) {\u000a            local_4090._0_1_ = 1;\u000a            goto LAB_004031a5;\u000a          }\u000a          local_4070 = local_4070 + __n_00;\u000a          __n_01 = __n + __n_00;\u000a          __s = local_4038;\u000a          while ((!bVar18 && (_Var6 = is_basic(), _Var6 != false))) {\u000a            local_407c = SEXT14(*__s);\u000a            __n = 1;\u000aLAB_00402cb6:\u000a            __s = __s + __n;\u000a            __n_01 = __n_01 - __n;\u000a            local_4068 = local_4068 + 1;\u000a            switch(local_407c) {\u000a            case 9:\u000a              local_4078 = (local_4078 + 8) - (ulong)((uint)local_4078 & 7);\u000a              break;\u000a            case 10:\u000a              local_4060 = local_4060 + 1;\u000a            case 0xc:\u000a            case 0xd:\u000a              if (local_4088 < local_4078) {\u000a                local_4088 = local_4078;\u000a              }\u000a              local_4078 = 0;\u000a              break;\u000a            case 0xb:\u000a              break;\u000a            default:\u000aswitchD_00402cc9_caseD_e:\u000a              iVar8 = iswprint(local_407c);\u000a              if (iVar8 != 0) {\u000a                iVar8 = wcwidth(local_407c);\u000a                __offset = CONCAT44(extraout_var,iVar8);\u000a                if (iVar8 < 0) {\u000a                  __offset = 0;\u000a                }\u000a                local_4078 = local_4078 + __offset;\u000a                iVar8 = iswspace(local_407c);\u000a                if (iVar8 != 0) break;\u000a                bVar7 = 1;\u000a              }\u000a              goto LAB_00402d80;\u000a            case 0x20:\u000a              local_4078 = local_4078 + 1;\u000a            }\u000a            local_4040 = local_4040 + (ulong)bVar7;\u000a            bVar7 = 0;\u000aLAB_00402d80:\u000a            if (__n_01 == 0) goto LAB_00402bb0;\u000a          }\u000a          mVar5 = local_4048;\u000a          __n = mbrtowc((wchar_t *)&local_407c,__s,__n_01,&local_4048);\u000a          if (__n == 0xffffffffffffffff) {\u000a            __s = __s + 1;\u000a            __n_01 = __n_01 - 1;\u000a            bVar18 = true;\u000a            goto LAB_00402d80;\u000a          }\u000a          if (__n != 0xfffffffffffffffe) {\u000a            iVar8 = mbsinit(&local_4048);\u000a            bVar18 = iVar8 == 0;\u000a            if (__n != 0) goto LAB_00402cb6;\u000a            local_407c = 0;\u000a            __s = __s + 1;\u000a            __n_01 = __n_01 - 1;\u000a            local_4068 = local_4068 + 1;\u000a            goto switchD_00402cc9_caseD_e;\u000a          }\u000a          bVar18 = true;\u000a          __n = 0;\u000a          local_4048 = mVar5;\u000a          if (__n_01 != 0) {\u000a            __src = __s + 1;\u000a            if (__n_01 != 0x4000) {\u000a              __src = __s;\u000a            }\u000a            __n = __n_01 - (ulong)(__n_01 == 0x4000);\u000a            local_4048 = mVar5;\u000a            memmove(local_4038,__src,__n);\u000a          }\u000a        }\u000a        puVar13 = (uint *)__errno_location();\u000a        uVar1 = *puVar13;\u000a        local_4090._0_1_ = 0;\u000a        __s = quotearg_n_style_colon((char *)0x0);\u000a        error(0,(ulong)uVar1,0x40717f,__s);\u000aLAB_004031a5:\u000a        if (local_4088 < local_4078) {\u000a          local_4088 = local_4078;\u000a        }\u000a        words = (ulong)bVar7 + local_4040;\u000a        __n_00 = local_4068;\u000a        lines = local_4060;\u000a        fstatus = local_4058;\u000a      }\u000a    }\u000a  }\u000a  uVar4 = local_4070;\u000a  if (bVar14 < print_chars) {\u000a    __n_00 = local_4070;\u000a  }\u000a  write_counts(lines,words,__n_00,local_4070,local_4088,(char *)fstatus);\u000a  total_lines = total_lines + lines;\u000a  total_words = total_words + words;\u000a  total_chars = total_chars + __n_00;\u000a  total_bytes = total_bytes + uVar4;\u000a  if (max_line_length < local_4088) {\u000a    max_line_length = local_4088;\u000a  }\u000a  return (_Bool)(undefined)local_4090;\u000a}\u000a\u000a
p612
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x4068\nMOV R15,RCX\nMOV RBP,RDX\nMOV R13,RSI\nMOV dword ptr [RSP + 0x8],EDI\nTEST R13,R13\nMOV RAX,R13\nJNZ 0x00402ab7\nXOR EDI,EDI\nMOV ESI,0x40715b\nMOV EDX,0x5\nCALL 0x00401830\nMOV qword ptr [RSP + 0x48],RAX\nCALL 0x00401840\nMOV CL,byte ptr [0x0060a310]\nCMP RAX,0x2\nJC 0x00402ad5\nMOV DL,byte ptr [0x0060a311]\nJMP 0x00402ae0\nOR CL,byte ptr [0x0060a311]\nAND CL,0x1\nXOR EDX,EDX\nMOV BL,byte ptr [0x0060a314]\nOR BL,byte ptr [0x0060a312]\nTEST CL,CL\nSETZ AL\nTEST DL,DL\nSETNZ R14B\nOR R14B,AL\nMOV AL,byte ptr [0x0060a313]\nTEST AL,AL\nMOV dword ptr [RSP + 0x4],EDX\nJNZ 0x00402b12\nTEST BL,0x1\nJNZ 0x00402b12\nTEST R14B,R14B\nJZ 0x00402b28\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x2\nMOV EDI,dword ptr [RSP + 0x8]\nCALL 0x004034f0\nMOV EDX,dword ptr [RSP + 0x4]\nMOV AL,byte ptr [0x0060a313]\nOR AL,BL\nOR AL,R14B\nTEST AL,0x1\nJZ 0x00402d8e\nTEST DL,DL\nSETNZ AL\nOR BL,AL\nTEST BL,0x1\nMOV qword ptr [RSP + 0x40],R13\nJZ 0x00402eca\nCALL 0x00401840\nCMP RAX,0x1\nJBE 0x00402fd9\nMOV qword ptr [RSP + 0x50],0x0\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x10],RAX\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x28],RAX\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,0x0\nMOV qword ptr [RSP + 0x58],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x38],RAX\nXOR R12D,R12D\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nXOR R14D,R14D\nNOP word ptr CS:[RAX + RAX*0x1]\nXOR EBX,EBX\nJMP 0x00402c02\nLEA RSI,[R13 + 0x1]\nXOR EAX,EAX\nCMP R15,0x4000\nSETZ AL\nCMOVNZ RSI,R13\nSUB R15,RAX\nLEA RDI,[RSP + 0x60]\nMOV RDX,R15\nCALL 0x00401aa0\nMOV RBX,R15\nJMP 0x00402c02\nMOV qword ptr [RSP + 0x50],RBX\nMOV R14B,0x1\nTEST R15,R15\nMOV EBX,0x0\nJNZ 0x00402bc0\nLEA RSI,[RSP + RBX*0x1 + 0x60]\nMOV EDX,0x4000\nSUB RDX,RBX\nMOV EDI,dword ptr [RSP + 0x8]\nCALL 0x00405370\nCMP RAX,-0x1\nJZ 0x0040316a\nTEST RAX,RAX\nJZ 0x0040319e\nADD qword ptr [RSP + 0x28],RAX\nADD RBX,RAX\nMOV R15,RBX\nLEA R13,[RSP + 0x60]\nNOP dword ptr [RAX + RAX*0x1]\nTEST R14B,0x1\nJNZ 0x00402c70\nMOVSX EDI,byte ptr [R13]\nCALL 0x004035f0\nTEST AL,AL\nJZ 0x00402c70\nMOVSX EDI,byte ptr [R13]\nMOV dword ptr [RSP + 0x1c],EDI\nMOV EBP,0x1\nJMP 0x00402cb6\nMOV RBX,qword ptr [RSP + 0x50]\nLEA RDI,[RSP + 0x1c]\nMOV RSI,R13\nMOV RDX,R15\nLEA RCX,[RSP + 0x50]\nCALL 0x00401870\nMOV RBP,RAX\nCMP RBP,-0x1\nJZ 0x00402cf0\nCMP RBP,-0x2\nJZ 0x00402bf0\nLEA RDI,[RSP + 0x50]\nCALL 0x00401b50\nTEST EAX,EAX\nSETZ R14B\nTEST RBP,RBP\nJZ 0x00402cfe\nMOV EDI,dword ptr [RSP + 0x1c]\nADD R13,RBP\nSUB R15,RBP\nINC qword ptr [RSP + 0x30]\nLEA EAX,[RDI + -0x9]\nCMP EAX,0x17\nJA 0x00402d13\nJMP qword ptr [0x4067e8 + RAX*0x8]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,RAX\nAND EAX,0x7\nNEG RAX\nLEA RCX,[RCX + RAX*0x1 + 0x8]\nMOV qword ptr [RSP + 0x20],RCX\nJMP 0x00402d70\nINC R13\nDEC R15\nMOV R14B,0x1\nJMP 0x00402d80\nMOV dword ptr [RSP + 0x1c],0x0\nINC R13\nDEC R15\nINC qword ptr [RSP + 0x30]\nXOR EDI,EDI\nCALL 0x00401b60\nTEST EAX,EAX\nJZ 0x00402d80\nMOV EDI,dword ptr [RSP + 0x1c]\nCALL 0x004019d0\nTEST EAX,EAX\nMOV ECX,0x0\nCMOVS EAX,ECX\nADD qword ptr [RSP + 0x20],RAX\nMOV EDI,dword ptr [RSP + 0x1c]\nCALL 0x00401a90\nTEST EAX,EAX\nJNZ 0x00402d70\nMOV R12B,0x1\nJMP 0x00402d80\nINC qword ptr [RSP + 0x38]\nMOV RAX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,RAX\nCMOVA RAX,RCX\nMOV qword ptr [RSP + 0x10],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x00402d70\nINC qword ptr [RSP + 0x20]\nNOP\nAND R12B,0x1\nMOVZX EAX,R12B\nADD qword ptr [RSP + 0x58],RAX\nXOR R12D,R12D\nTEST R15,R15\nJNZ 0x00402c40\nJMP 0x00402bb0\nMOV EAX,dword ptr [RBP]\nTEST EAX,EAX\nJLE 0x00402da5\nLEA RSI,[RBP + 0x8]\nMOV EDI,dword ptr [RSP + 0x8]\nCALL 0x00406540\nMOV dword ptr [RBP],EAX\nTEST EAX,EAX\nJNZ 0x00402e39\nLEA RDI,[RBP + 0x8]\nCALL 0x004032b0\nTEST AL,AL\nJZ 0x00402e39\nMOV R14,qword ptr [RBP + 0x38]\nTEST R14,R14\nJS 0x00402e39\nMOV RAX,qword ptr [RBP + 0x40]\nLEA RCX,[RAX + 0x1]\nMOV RDX,0x2000000000000001\nCMP RAX,RDX\nMOV EDX,0x201\nCMOVNC RCX,RDX\nTEST RAX,RAX\nCMOVLE RCX,RDX\nXOR EDX,EDX\nMOV RAX,R14\nDIV RCX\nMOV RBX,RDX\nTEST R15,R15\nJNS 0x00402e0b\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,dword ptr [RSP + 0x8]\nCALL 0x004018a0\nMOV R15,RAX\nXOR EBP,EBP\nTEST R15,R15\nJS 0x00402e3b\nSUB R14,RBX\nMOV RBX,R14\nSUB RBX,R15\nJLE 0x00402e3b\nMOV EDX,0x1\nMOV EDI,dword ptr [RSP + 0x8]\nMOV RSI,R14\nCALL 0x004018a0\nXOR EBP,EBP\nTEST RAX,RAX\nCMOVNS RBP,RBX\nJMP 0x00402e3b\nXOR EBP,EBP\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x2\nMOV EDI,dword ptr [RSP + 0x8]\nCALL 0x004034f0\nLEA RBX,[RSP + 0x60]\nJMP 0x00402e63\nADD RBP,RAX\nMOV EDX,0x4000\nMOV EDI,dword ptr [RSP + 0x8]\nMOV RSI,RBX\nCALL 0x00405370\nTEST RAX,RAX\nJZ 0x00402fb9\nCMP RAX,-0x1\nJNZ 0x00402e60\nMOV qword ptr [RSP + 0x28],RBP\nCALL 0x00401780\nMOV EBX,dword ptr [RAX]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,qword ptr [RSP + 0x48]\nCALL 0x00404af0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40717f\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x00401ab0\nXOR EBP,EBP\nXOR R14D,R14D\nXOR R12D,R12D\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nJMP 0x00402fd0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x28],RAX\nLEA R15,[RSP + 0x60]\nMOV R14,-0x7777777777777777\nXOR R13D,R13D\nXOR EBP,EBP\nJMP 0x00402f0f\nADD qword ptr [RSP + 0x28],R12\nMOV RCX,RBX\nSUB RCX,R13\nMOV RAX,R12\nMUL R14\nSHR RDX,0x3\nCMP RCX,RDX\nSETBE BPL\nMOV R13,RBX\nMOV EDX,0x4000\nMOV EDI,dword ptr [RSP + 0x8]\nMOV RSI,R15\nCALL 0x00405370\nMOV R12,RAX\nTEST R12,R12\nJZ 0x0040310e\nCMP R12,-0x1\nJZ 0x0040311f\nTEST BPL,BPL\nJZ 0x00402f90\nMOV ESI,0xa\nMOV RDI,R15\nMOV RDX,R12\nCALL 0x00401910\nTEST RAX,RAX\nMOV RBX,R13\nJZ 0x00402ef0\nLEA RBP,[RSP + R12*0x1 + 0x60]\nMOV RBX,R13\nNOP dword ptr [RAX + RAX*0x1]\nINC RAX\nINC RBX\nMOV RDX,RBP\nSUB RDX,RAX\nMOV ESI,0xa\nMOV RDI,RAX\nCALL 0x00401910\nTEST RAX,RAX\nJNZ 0x00402f60\nJMP 0x00402ef0\nMOV RAX,R12\nMOV RCX,R15\nMOV RBX,R13\nNOP dword ptr [RAX]\nXOR EDX,EDX\nCMP byte ptr [RCX],0xa\nLEA RCX,[RCX + 0x1]\nSETZ DL\nADD RBX,RDX\nDEC RAX\nJNZ 0x00402fa0\nJMP 0x00402ef0\nMOV qword ptr [RSP + 0x28],RBP\nMOV AL,0x1\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nXOR EBP,EBP\nXOR R14D,R14D\nXOR R12D,R12D\nMOV EAX,dword ptr [RSP + 0x4]\nJMP 0x0040323a\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nLEA R14,[RSP + 0x60]\nXOR EBX,EBX\nXOR R15D,R15D\nXOR R12D,R12D\nXOR EBP,EBP\nXOR R13D,R13D\nJMP 0x00403017\nMOV R15,RDX\nMOV qword ptr [RSP + 0x10],RCX\nMOV RBX,qword ptr [RSP + 0x28]\nADD RBX,qword ptr [RSP + 0x30]\nLEA R14,[RSP + 0x60]\nMOV EDX,0x4000\nMOV EDI,dword ptr [RSP + 0x8]\nMOV RSI,R14\nCALL 0x00405370\nCMP RAX,-0x1\nMOV qword ptr [RSP + 0x28],RBX\nJZ 0x004031d8\nTEST RAX,RAX\nJZ 0x0040320e\nMOV qword ptr [RSP + 0x30],RAX\nMOV RBX,RAX\nMOV RCX,qword ptr [RSP + 0x10]\nMOV RDX,R15\nMOVSX R15D,byte ptr [R14]\nLEA EAX,[R15 + -0x9]\nCMP EAX,0x17\nJA 0x00403083\nJMP qword ptr [0x406728 + RAX*0x8]\nMOV EAX,R13D\nAND EAX,0x7\nNEG RAX\nLEA R13,[R13 + RAX*0x1 + 0x8]\nJMP 0x004030f0\nINC R12\nCMP R13,RCX\nCMOVA RCX,R13\nXOR R13D,R13D\nJMP 0x004030f0\nMOV qword ptr [RSP + 0x20],RDX\nMOV qword ptr [RSP + 0x10],RCX\nMOV qword ptr [RSP + 0x38],R12\nCALL 0x00401b80\nMOV R12,qword ptr [RAX]\nMOVSX EDI,R15B\nCALL 0x004032d0\nMOVZX EAX,AL\nMOVZX EAX,word ptr [R12 + RAX*0x2]\nTEST AH,0x40\nJNZ 0x004030c6\nMOV R12,qword ptr [RSP + 0x38]\nMOV RCX,qword ptr [RSP + 0x10]\nMOV RDX,qword ptr [RSP + 0x20]\nJMP 0x004030fd\nINC R13\nJMP 0x004030f0\nINC R13\nTEST AH,0x20\nMOV R12,qword ptr [RSP + 0x38]\nMOV RCX,qword ptr [RSP + 0x10]\nMOV RDX,qword ptr [RSP + 0x20]\nJNZ 0x004030f0\nMOV BPL,0x1\nJMP 0x004030fd\nAND BPL,0x1\nMOVZX EAX,BPL\nADD RDX,RAX\nXOR EBP,EBP\nINC R14\nDEC RBX\nJNZ 0x00403050\nJMP 0x00403000\nMOV AL,0x1\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nXOR EBP,EBP\nXOR R14D,R14D\nJMP 0x00403159\nCALL 0x00401780\nMOV EBX,dword ptr [RAX]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,qword ptr [RSP + 0x48]\nCALL 0x00404af0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40717f\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x00401ab0\nXOR EBP,EBP\nXOR R14D,R14D\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nMOV EAX,dword ptr [RSP + 0x4]\nMOV R12,R13\nMOV R13,qword ptr [RSP + 0x40]\nJMP 0x0040323a\nCALL 0x00401780\nMOV EBP,dword ptr [RAX]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,qword ptr [RSP + 0x48]\nCALL 0x00404af0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40717f\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x00401ab0\nJMP 0x004031a5\nMOV AL,0x1\nMOV qword ptr [RSP + 0x8],RAX\nMOV EAX,dword ptr [RSP + 0x4]\nMOV RBP,qword ptr [RSP + 0x30]\nMOV R15,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,R15\nCMOVA R15,RCX\nAND R12B,0x1\nMOVZX R14D,R12B\nADD R14,qword ptr [RSP + 0x58]\nMOV R13,qword ptr [RSP + 0x40]\nMOV R12,qword ptr [RSP + 0x38]\nJMP 0x0040323a\nCALL 0x00401780\nMOV R14D,dword ptr [RAX]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,qword ptr [RSP + 0x48]\nCALL 0x00404af0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40717f\nXOR EAX,EAX\nMOV ESI,R14D\nCALL 0x00401ab0\nJMP 0x00403215\nMOV AL,0x1\nMOV qword ptr [RSP + 0x8],RAX\nMOV EAX,dword ptr [RSP + 0x4]\nMOV RCX,qword ptr [RSP + 0x10]\nCMP R13,RCX\nCMOVA RCX,R13\nAND BPL,0x1\nMOVZX R14D,BPL\nADD R14,R15\nMOV R13,qword ptr [RSP + 0x40]\nMOV R15,RCX\nXOR EBP,EBP\nMOVZX EAX,AL\nMOVZX ECX,byte ptr [0x0060a311]\nCMP EAX,ECX\nMOV RBX,qword ptr [RSP + 0x28]\nCMOVC RBP,RBX\nMOV RDI,R12\nMOV RSI,R14\nMOV RDX,RBP\nMOV RCX,RBX\nMOV R8,R15\nMOV R9,R13\nCALL 0x004028e0\nADD qword ptr [0x0060a338],R12\nADD qword ptr [0x0060a330],R14\nADD qword ptr [0x0060a328],RBP\nADD qword ptr [0x0060a320],RBX\nCMP R15,qword ptr [0x0060a318]\nJBE 0x00403292\nMOV qword ptr [0x0060a318],R15\nMOV RAX,qword ptr [RSP + 0x8]\nADD RSP,0x4068\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p613
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 68 40 00 00\n49 89 cf\n48 89 d5\n49 89 f5\n89 7c 24 08\n4d 85 ed\n4c 89 e8\n75 11\n31 ff\nbe 5b 71 40 00\nba 05 00 00 00\ne8 79 ed ff ff\n48 89 44 24 48\ne8 7f ed ff ff\n8a 0d 49 78 20 00\n48 83 f8 02\n72 08\n8a 15 3e 78 20 00\neb 0b\n0a 0d 36 78 20 00\n80 e1 01\n31 d2\n8a 1d 2e 78 20 00\n0a 1d 26 78 20 00\n84 c9\n0f 94 c0\n84 d2\n41 0f 95 c6\n41 08 c6\n8a 05 13 78 20 00\n84 c0\n89 54 24 04\n75 0a\nf6 c3 01\n75 05\n45 84 f6\n74 16\n31 f6\n31 d2\nb9 02 00 00 00\n8b 7c 24 08\ne8 cc 09 00 00\n8b 54 24 04\n8a 05 e5 77 20 00\n08 d8\n44 08 f0\na8 01\n0f 84 53 02 00 00\n84 d2\n0f 95 c0\n08 c3\nf6 c3 01\n4c 89 6c 24 40\n0f 84 7a 03 00 00\ne8 eb ec ff ff\n48 83 f8 01\n0f 86 7a 04 00 00\n48 c7 44 24 50 00 00 00 00\nb8 00 00 00 00\n48 89 44 24 10\nb8 00 00 00 00\n48 89 44 24 28\nb8 00 00 00 00\n48 89 44 24 30\nb8 00 00 00 00\n48 89 44 24 58\n31 c0\n48 89 44 24 38\n45 31 e4\n31 c0\n48 89 44 24 20\n45 31 f6\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n31 db\neb 4e\n49 8d 75 01\n31 c0\n49 81 ff 00 40 00 00\n0f 94 c0\n49 0f 45 f5\n49 29 c7\n48 8d 7c 24 60\n4c 89 fa\ne8 bc ee ff ff\n4c 89 fb\neb 19\n48 89 5c 24 50\n41 b6 01\n4d 85 ff\nbb 00 00 00 00\n75 be\n48 8d 74 1c 60\nba 00 40 00 00\n48 29 da\n8b 7c 24 08\ne8 58 27 00 00\n48 83 f8 ff\n0f 84 48 05 00 00\n48 85 c0\n0f 84 73 05 00 00\n48 01 44 24 28\n48 01 c3\n49 89 df\n4c 8d 6c 24 60\n0f 1f 44 00 00\n41 f6 c6 01\n75 2a\n41 0f be 7d 00\ne8 a0 09 00 00\n84 c0\n74 1c\n41 0f be 7d 00\n89 7c 24 1c\nbd 01 00 00 00\neb 52\n48 8b 5c 24 50\n48 8d 7c 24 1c\n4c 89 ee\n4c 89 fa\n48 8d 4c 24 50\ne8 e6 eb ff ff\n48 89 c5\n48 83 fd ff\n74 5d\n48 83 fd fe\n0f 84 53 ff ff ff\n48 8d 7c 24 50\ne8 a9 ee ff ff\n85 c0\n41 0f 94 c6\n48 85 ed\n74 4c\n8b 7c 24 1c\n49 01 ed\n49 29 ef\n48 ff 44 24 30\n8d 47 f7\n83 f8 17\n77 4a\nff 24 c5 e8 67 40 00\n48 8b 44 24 20\n48 89 c1\n83 e0 07\n48 f7 d8\n48 8d 4c 01 08\n48 89 4c 24 20\ne9 83 00 00 00\n49 ff c5\n49 ff cf\n41 b6 01\ne9 82 00 00 00\nc7 44 24 1c 00 00 00 00\n49 ff c5\n49 ff cf\n48 ff 44 24 30\n31 ff\ne8 48 ee ff ff\n85 c0\n74 64\n8b 7c 24 1c\ne8 ab ec ff ff\n85 c0\nb9 00 00 00 00\n0f 48 c1\n48 01 44 24 20\n8b 7c 24 1c\ne8 53 ed ff ff\n85 c0\n75 2f\n41 b4 01\neb 3a\n48 ff 44 24 38\n48 8b 44 24 10\n48 8b 4c 24 20\n48 39 c1\n48 0f 47 c1\n48 89 44 24 10\n31 c0\n48 89 44 24 20\neb 06\n48 ff 44 24 20\n90\n41 80 e4 01\n41 0f b6 c4\n48 01 44 24 58\n45 31 e4\n4d 85 ff\n0f 85 b7 fe ff ff\ne9 22 fe ff ff\n8b 45 00\n85 c0\n7e 10\n48 8d 75 08\n8b 7c 24 08\ne8 9e 37 00 00\n89 45 00\n85 c0\n0f 85 8c 00 00 00\n48 8d 7d 08\ne8 fa 04 00 00\n84 c0\n74 7f\n4c 8b 75 38\n4d 85 f6\n78 76\n48 8b 45 40\n48 8d 48 01\n48 ba 01 00 00 00 00 00 00 20\n48 39 d0\nba 01 02 00 00\n48 0f 43 ca\n48 85 c0\n48 0f 4e ca\n31 d2\n4c 89 f0\n48 f7 f1\n48 89 d3\n4d 85 ff\n79 13\n31 f6\nba 01 00 00 00\n8b 7c 24 08\ne8 98 ea ff ff\n49 89 c7\n31 ed\n4d 85 ff\n78 29\n49 29 de\n4c 89 f3\n4c 29 fb\n7e 1e\nba 01 00 00 00\n8b 7c 24 08\n4c 89 f6\ne8 72 ea ff ff\n31 ed\n48 85 c0\n48 0f 49 eb\neb 02\n31 ed\n31 f6\n31 d2\nb9 02 00 00 00\n8b 7c 24 08\ne8 a3 06 00 00\n48 8d 5c 24 60\neb 0f\n48 01 c5\nba 00 40 00 00\n8b 7c 24 08\n48 89 de\ne8 fc 24 00 00\n48 85 c0\n0f 84 3c 01 00 00\n48 83 f8 ff\n75 dd\n48 89 6c 24 28\ne8 f3 e8 ff ff\n8b 18\n45 31 ff\n31 ff\nbe 03 00 00 00\n48 8b 54 24 48\ne8 4d 1c 00 00\n48 89 c1\n31 ff\nba 7f 71 40 00\n31 c0\n89 de\ne8 fa eb ff ff\n31 ed\n45 31 f6\n45 31 e4\n31 c0\n48 89 44 24 08\ne9 06 01 00 00\n31 c0\n48 89 44 24 28\n4c 8d 7c 24 60\n49 be 89 88 88 88 88 88 88 88\n45 31 ed\n31 ed\neb 28\n4c 01 64 24 28\n48 89 d9\n4c 29 e9\n4c 89 e0\n49 f7 e6\n48 c1 ea 03\n48 39 d1\n40 0f 96 c5\n49 89 dd\nba 00 40 00 00\n8b 7c 24 08\n4c 89 fe\ne8 50 24 00 00\n49 89 c4\n4d 85 e4\n0f 84 e2 01 00 00\n49 83 fc ff\n0f 84 e9 01 00 00\n40 84 ed\n74 55\nbe 0a 00 00 00\n4c 89 ff\n4c 89 e2\ne8 c5 e9 ff ff\n48 85 c0\n4c 89 eb\n74 9d\n4a 8d 6c 24 60\n4c 89 eb\n0f 1f 44 00 00\n48 ff c0\n48 ff c3\n48 89 ea\n48 29 c2\nbe 0a 00 00 00\n48 89 c7\ne8 97 e9 ff ff\n48 85 c0\n75 e2\ne9 6d ff ff ff\n4c 89 e0\n4c 89 f9\n4c 89 eb\n0f 1f 80 00 00 00 00\n31 d2\n80 39 0a\n48 8d 49 01\n0f 94 c2\n48 01 d3\n48 ff c8\n75 ec\ne9 37 ff ff ff\n48 89 6c 24 28\nb0 01\n48 89 44 24 08\n45 31 ff\n31 ed\n45 31 f6\n45 31 e4\n8b 44 24 04\ne9 61 02 00 00\n31 c0\n48 89 44 24 10\n4c 8d 74 24 60\n31 db\n45 31 ff\n45 31 e4\n31 ed\n45 31 ed\neb 23\n49 89 d7\n48 89 4c 24 10\n48 8b 5c 24 28\n48 03 5c 24 30\n4c 8d 74 24 60\nba 00 40 00 00\n8b 7c 24 08\n4c 89 f6\ne8 48 23 00 00\n48 83 f8 ff\n48 89 5c 24 28\n0f 84 a1 01 00 00\n48 85 c0\n0f 84 ce 01 00 00\n48 89 44 24 30\n48 89 c3\n48 8b 4c 24 10\n4c 89 fa\n45 0f be 3e\n41 8d 47 f7\n83 f8 17\n77 26\nff 24 c5 28 67 40 00\n44 89 e8\n83 e0 07\n48 f7 d8\n4d 8d 6c 05 08\neb 7c\n49 ff c4\n49 39 cd\n49 0f 47 cd\n45 31 ed\neb 6d\n48 89 54 24 20\n48 89 4c 24 10\n4c 89 64 24 38\ne8 e9 ea ff ff\n4c 8b 20\n41 0f be ff\ne8 2d 02 00 00\n0f b6 c0\n41 0f b7 04 44\nf6 c4 40\n75 16\n4c 8b 64 24 38\n48 8b 4c 24 10\n48 8b 54 24 20\neb 3c\n49 ff c5\neb 2a\n49 ff c5\nf6 c4 20\n4c 8b 64 24 38\n48 8b 4c 24 10\n48 8b 54 24 20\n75 13\n40 b5 01\neb 1b\n40 80 e5 01\n40 0f b6 c5\n48 01 c2\n31 ed\n49 ff c6\n48 ff cb\n0f 85 47 ff ff ff\ne9 f2 fe ff ff\nb0 01\n48 89 44 24 08\n45 31 ff\n31 ed\n45 31 f6\neb 3a\ne8 5c e6 ff ff\n8b 18\n45 31 ff\n31 ff\nbe 03 00 00 00\n48 8b 54 24 48\ne8 b6 19 00 00\n48 89 c1\n31 ff\nba 7f 71 40 00\n31 c0\n89 de\ne8 63 e9 ff ff\n31 ed\n45 31 f6\n31 c0\n48 89 44 24 08\n8b 44 24 04\n4d 89 ec\n4c 8b 6c 24 40\ne9 d0 00 00 00\ne8 11 e6 ff ff\n8b 28\n31 c0\n48 89 44 24 08\n31 ff\nbe 03 00 00 00\n48 8b 54 24 48\ne8 67 19 00 00\n48 89 c1\n31 ff\nba 7f 71 40 00\n31 c0\n89 ee\ne8 14 e9 ff ff\neb 07\nb0 01\n48 89 44 24 08\n8b 44 24 04\n48 8b 6c 24 30\n4c 8b 7c 24 10\n48 8b 4c 24 20\n4c 39 f9\n4c 0f 47 f9\n41 80 e4 01\n45 0f b6 f4\n4c 03 74 24 58\n4c 8b 6c 24 40\n4c 8b 64 24 38\neb 62\ne8 a3 e5 ff ff\n44 8b 30\n31 c0\n48 89 44 24 08\n31 ff\nbe 03 00 00 00\n48 8b 54 24 48\ne8 f8 18 00 00\n48 89 c1\n31 ff\nba 7f 71 40 00\n31 c0\n44 89 f6\ne8 a4 e8 ff ff\neb 07\nb0 01\n48 89 44 24 08\n8b 44 24 04\n48 8b 4c 24 10\n49 39 cd\n49 0f 47 cd\n40 80 e5 01\n44 0f b6 f5\n4d 01 fe\n4c 8b 6c 24 40\n49 89 cf\n31 ed\n0f b6 c0\n0f b6 0d cd 70 20 00\n39 c8\n48 8b 5c 24 28\n48 0f 42 eb\n4c 89 e7\n4c 89 f6\n48 89 ea\n48 89 d9\n4d 89 f8\n4d 89 e9\ne8 7a f6 ff ff\n4c 01 25 cb 70 20 00\n4c 01 35 bc 70 20 00\n48 01 2d ad 70 20 00\n48 01 1d 9e 70 20 00\n4c 3b 3d 8f 70 20 00\n76 07\n4c 89 3d 86 70 20 00\n48 8b 44 24 08\n48 81 c4 68 40 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p614
S'.text:0000000000402a80\n.text:0000000000402a81\n.text:0000000000402a83\n.text:0000000000402a85\n.text:0000000000402a87\n.text:0000000000402a89\n.text:0000000000402a8a\n.text:0000000000402a91\n.text:0000000000402a94\n.text:0000000000402a97\n.text:0000000000402a9a\n.text:0000000000402a9e\n.text:0000000000402aa1\n.text:0000000000402aa4\n.text:0000000000402aa6\n.text:0000000000402aa8\n.text:0000000000402aad\n.text:0000000000402ab2\n.text:0000000000402ab7\n.text:0000000000402abc\n.text:0000000000402ac1\n.text:0000000000402ac7\n.text:0000000000402acb\n.text:0000000000402acd\n.text:0000000000402ad3\n.text:0000000000402ad5\n.text:0000000000402adb\n.text:0000000000402ade\n.text:0000000000402ae0\n.text:0000000000402ae6\n.text:0000000000402aec\n.text:0000000000402aee\n.text:0000000000402af1\n.text:0000000000402af3\n.text:0000000000402af7\n.text:0000000000402afa\n.text:0000000000402b00\n.text:0000000000402b02\n.text:0000000000402b06\n.text:0000000000402b08\n.text:0000000000402b0b\n.text:0000000000402b0d\n.text:0000000000402b10\n.text:0000000000402b12\n.text:0000000000402b14\n.text:0000000000402b16\n.text:0000000000402b1b\n.text:0000000000402b1f\n.text:0000000000402b24\n.text:0000000000402b28\n.text:0000000000402b2e\n.text:0000000000402b30\n.text:0000000000402b33\n.text:0000000000402b35\n.text:0000000000402b3b\n.text:0000000000402b3d\n.text:0000000000402b40\n.text:0000000000402b42\n.text:0000000000402b45\n.text:0000000000402b4a\n.text:0000000000402b50\n.text:0000000000402b55\n.text:0000000000402b59\n.text:0000000000402b5f\n.text:0000000000402b68\n.text:0000000000402b6d\n.text:0000000000402b72\n.text:0000000000402b77\n.text:0000000000402b7c\n.text:0000000000402b81\n.text:0000000000402b86\n.text:0000000000402b8b\n.text:0000000000402b90\n.text:0000000000402b92\n.text:0000000000402b97\n.text:0000000000402b9a\n.text:0000000000402b9c\n.text:0000000000402ba1\n.text:0000000000402ba4\n.text:0000000000402bb0\n.text:0000000000402bb2\n.text:0000000000402bc0\n.text:0000000000402bc4\n.text:0000000000402bc6\n.text:0000000000402bcd\n.text:0000000000402bd0\n.text:0000000000402bd4\n.text:0000000000402bd7\n.text:0000000000402bdc\n.text:0000000000402bdf\n.text:0000000000402be4\n.text:0000000000402be7\n.text:0000000000402bf0\n.text:0000000000402bf5\n.text:0000000000402bf8\n.text:0000000000402bfb\n.text:0000000000402c00\n.text:0000000000402c02\n.text:0000000000402c07\n.text:0000000000402c0c\n.text:0000000000402c0f\n.text:0000000000402c13\n.text:0000000000402c18\n.text:0000000000402c1c\n.text:0000000000402c22\n.text:0000000000402c25\n.text:0000000000402c2b\n.text:0000000000402c30\n.text:0000000000402c33\n.text:0000000000402c36\n.text:0000000000402c3b\n.text:0000000000402c40\n.text:0000000000402c44\n.text:0000000000402c46\n.text:0000000000402c4b\n.text:0000000000402c50\n.text:0000000000402c52\n.text:0000000000402c54\n.text:0000000000402c59\n.text:0000000000402c5d\n.text:0000000000402c62\n.text:0000000000402c70\n.text:0000000000402c75\n.text:0000000000402c7a\n.text:0000000000402c7d\n.text:0000000000402c80\n.text:0000000000402c85\n.text:0000000000402c8a\n.text:0000000000402c8d\n.text:0000000000402c91\n.text:0000000000402c93\n.text:0000000000402c97\n.text:0000000000402c9d\n.text:0000000000402ca2\n.text:0000000000402ca7\n.text:0000000000402ca9\n.text:0000000000402cad\n.text:0000000000402cb0\n.text:0000000000402cb2\n.text:0000000000402cb6\n.text:0000000000402cb9\n.text:0000000000402cbc\n.text:0000000000402cc1\n.text:0000000000402cc4\n.text:0000000000402cc7\n.text:0000000000402cc9\n.text:0000000000402cd0\n.text:0000000000402cd5\n.text:0000000000402cd8\n.text:0000000000402cdb\n.text:0000000000402cde\n.text:0000000000402ce3\n.text:0000000000402ce8\n.text:0000000000402cf0\n.text:0000000000402cf3\n.text:0000000000402cf6\n.text:0000000000402cf9\n.text:0000000000402cfe\n.text:0000000000402d06\n.text:0000000000402d09\n.text:0000000000402d0c\n.text:0000000000402d11\n.text:0000000000402d13\n.text:0000000000402d18\n.text:0000000000402d1a\n.text:0000000000402d1c\n.text:0000000000402d20\n.text:0000000000402d25\n.text:0000000000402d27\n.text:0000000000402d2c\n.text:0000000000402d2f\n.text:0000000000402d34\n.text:0000000000402d38\n.text:0000000000402d3d\n.text:0000000000402d3f\n.text:0000000000402d41\n.text:0000000000402d44\n.text:0000000000402d46\n.text:0000000000402d4b\n.text:0000000000402d50\n.text:0000000000402d55\n.text:0000000000402d58\n.text:0000000000402d5c\n.text:0000000000402d61\n.text:0000000000402d63\n.text:0000000000402d68\n.text:0000000000402d6a\n.text:0000000000402d6f\n.text:0000000000402d70\n.text:0000000000402d74\n.text:0000000000402d78\n.text:0000000000402d7d\n.text:0000000000402d80\n.text:0000000000402d83\n.text:0000000000402d89\n.text:0000000000402d8e\n.text:0000000000402d91\n.text:0000000000402d93\n.text:0000000000402d95\n.text:0000000000402d99\n.text:0000000000402d9d\n.text:0000000000402da2\n.text:0000000000402da5\n.text:0000000000402da7\n.text:0000000000402dad\n.text:0000000000402db1\n.text:0000000000402db6\n.text:0000000000402db8\n.text:0000000000402dba\n.text:0000000000402dbe\n.text:0000000000402dc1\n.text:0000000000402dc3\n.text:0000000000402dc7\n.text:0000000000402dcb\n.text:0000000000402dd5\n.text:0000000000402dd8\n.text:0000000000402ddd\n.text:0000000000402de1\n.text:0000000000402de4\n.text:0000000000402de8\n.text:0000000000402dea\n.text:0000000000402ded\n.text:0000000000402df0\n.text:0000000000402df3\n.text:0000000000402df6\n.text:0000000000402df8\n.text:0000000000402dfa\n.text:0000000000402dff\n.text:0000000000402e03\n.text:0000000000402e08\n.text:0000000000402e0b\n.text:0000000000402e0d\n.text:0000000000402e10\n.text:0000000000402e12\n.text:0000000000402e15\n.text:0000000000402e18\n.text:0000000000402e1b\n.text:0000000000402e1d\n.text:0000000000402e22\n.text:0000000000402e26\n.text:0000000000402e29\n.text:0000000000402e2e\n.text:0000000000402e30\n.text:0000000000402e33\n.text:0000000000402e37\n.text:0000000000402e39\n.text:0000000000402e3b\n.text:0000000000402e3d\n.text:0000000000402e3f\n.text:0000000000402e44\n.text:0000000000402e48\n.text:0000000000402e4d\n.text:0000000000402e52\n.text:0000000000402e60\n.text:0000000000402e63\n.text:0000000000402e68\n.text:0000000000402e6c\n.text:0000000000402e6f\n.text:0000000000402e74\n.text:0000000000402e77\n.text:0000000000402e7d\n.text:0000000000402e81\n.text:0000000000402e83\n.text:0000000000402e88\n.text:0000000000402e8d\n.text:0000000000402e8f\n.text:0000000000402e92\n.text:0000000000402e94\n.text:0000000000402e99\n.text:0000000000402e9e\n.text:0000000000402ea3\n.text:0000000000402ea6\n.text:0000000000402ea8\n.text:0000000000402ead\n.text:0000000000402eaf\n.text:0000000000402eb1\n.text:0000000000402eb6\n.text:0000000000402eb8\n.text:0000000000402ebb\n.text:0000000000402ebe\n.text:0000000000402ec0\n.text:0000000000402ec5\n.text:0000000000402eca\n.text:0000000000402ecc\n.text:0000000000402ed1\n.text:0000000000402ed6\n.text:0000000000402ee0\n.text:0000000000402ee3\n.text:0000000000402ee5\n.text:0000000000402ef0\n.text:0000000000402ef5\n.text:0000000000402ef8\n.text:0000000000402efb\n.text:0000000000402efe\n.text:0000000000402f01\n.text:0000000000402f05\n.text:0000000000402f08\n.text:0000000000402f0c\n.text:0000000000402f0f\n.text:0000000000402f14\n.text:0000000000402f18\n.text:0000000000402f1b\n.text:0000000000402f20\n.text:0000000000402f23\n.text:0000000000402f26\n.text:0000000000402f2c\n.text:0000000000402f30\n.text:0000000000402f36\n.text:0000000000402f39\n.text:0000000000402f3b\n.text:0000000000402f40\n.text:0000000000402f43\n.text:0000000000402f46\n.text:0000000000402f4b\n.text:0000000000402f4e\n.text:0000000000402f51\n.text:0000000000402f53\n.text:0000000000402f58\n.text:0000000000402f5b\n.text:0000000000402f60\n.text:0000000000402f63\n.text:0000000000402f66\n.text:0000000000402f69\n.text:0000000000402f6c\n.text:0000000000402f71\n.text:0000000000402f74\n.text:0000000000402f79\n.text:0000000000402f7c\n.text:0000000000402f7e\n.text:0000000000402f90\n.text:0000000000402f93\n.text:0000000000402f96\n.text:0000000000402f99\n.text:0000000000402fa0\n.text:0000000000402fa2\n.text:0000000000402fa5\n.text:0000000000402fa9\n.text:0000000000402fac\n.text:0000000000402faf\n.text:0000000000402fb2\n.text:0000000000402fb4\n.text:0000000000402fb9\n.text:0000000000402fbe\n.text:0000000000402fc0\n.text:0000000000402fc5\n.text:0000000000402fc8\n.text:0000000000402fca\n.text:0000000000402fcd\n.text:0000000000402fd0\n.text:0000000000402fd4\n.text:0000000000402fd9\n.text:0000000000402fdb\n.text:0000000000402fe0\n.text:0000000000402fe5\n.text:0000000000402fe7\n.text:0000000000402fea\n.text:0000000000402fed\n.text:0000000000402fef\n.text:0000000000402ff2\n.text:0000000000403000\n.text:0000000000403003\n.text:0000000000403008\n.text:000000000040300d\n.text:0000000000403012\n.text:0000000000403017\n.text:000000000040301c\n.text:0000000000403020\n.text:0000000000403023\n.text:0000000000403028\n.text:000000000040302c\n.text:0000000000403031\n.text:0000000000403037\n.text:000000000040303a\n.text:0000000000403040\n.text:0000000000403045\n.text:0000000000403048\n.text:000000000040304d\n.text:0000000000403050\n.text:0000000000403054\n.text:0000000000403058\n.text:000000000040305b\n.text:000000000040305d\n.text:0000000000403064\n.text:0000000000403067\n.text:000000000040306a\n.text:000000000040306d\n.text:0000000000403072\n.text:0000000000403074\n.text:0000000000403077\n.text:000000000040307a\n.text:000000000040307e\n.text:0000000000403081\n.text:0000000000403083\n.text:0000000000403088\n.text:000000000040308d\n.text:0000000000403092\n.text:0000000000403097\n.text:000000000040309a\n.text:000000000040309e\n.text:00000000004030a3\n.text:00000000004030a6\n.text:00000000004030ab\n.text:00000000004030ae\n.text:00000000004030b0\n.text:00000000004030b5\n.text:00000000004030ba\n.text:00000000004030bf\n.text:00000000004030c1\n.text:00000000004030c4\n.text:00000000004030c6\n.text:00000000004030c9\n.text:00000000004030cc\n.text:00000000004030d1\n.text:00000000004030d6\n.text:00000000004030db\n.text:00000000004030dd\n.text:00000000004030e0\n.text:00000000004030f0\n.text:00000000004030f4\n.text:00000000004030f8\n.text:00000000004030fb\n.text:00000000004030fd\n.text:0000000000403100\n.text:0000000000403103\n.text:0000000000403109\n.text:000000000040310e\n.text:0000000000403110\n.text:0000000000403115\n.text:0000000000403118\n.text:000000000040311a\n.text:000000000040311d\n.text:000000000040311f\n.text:0000000000403124\n.text:0000000000403126\n.text:0000000000403129\n.text:000000000040312b\n.text:0000000000403130\n.text:0000000000403135\n.text:000000000040313a\n.text:000000000040313d\n.text:000000000040313f\n.text:0000000000403144\n.text:0000000000403146\n.text:0000000000403148\n.text:000000000040314d\n.text:000000000040314f\n.text:0000000000403152\n.text:0000000000403154\n.text:0000000000403159\n.text:000000000040315d\n.text:0000000000403160\n.text:0000000000403165\n.text:000000000040316a\n.text:000000000040316f\n.text:0000000000403171\n.text:0000000000403173\n.text:0000000000403178\n.text:000000000040317a\n.text:000000000040317f\n.text:0000000000403184\n.text:0000000000403189\n.text:000000000040318c\n.text:000000000040318e\n.text:0000000000403193\n.text:0000000000403195\n.text:0000000000403197\n.text:000000000040319c\n.text:000000000040319e\n.text:00000000004031a0\n.text:00000000004031a5\n.text:00000000004031a9\n.text:00000000004031ae\n.text:00000000004031b3\n.text:00000000004031b8\n.text:00000000004031bb\n.text:00000000004031bf\n.text:00000000004031c3\n.text:00000000004031c7\n.text:00000000004031cc\n.text:00000000004031d1\n.text:00000000004031d6\n.text:00000000004031d8\n.text:00000000004031dd\n.text:00000000004031e0\n.text:00000000004031e2\n.text:00000000004031e7\n.text:00000000004031e9\n.text:00000000004031ee\n.text:00000000004031f3\n.text:00000000004031f8\n.text:00000000004031fb\n.text:00000000004031fd\n.text:0000000000403202\n.text:0000000000403204\n.text:0000000000403207\n.text:000000000040320c\n.text:000000000040320e\n.text:0000000000403210\n.text:0000000000403215\n.text:0000000000403219\n.text:000000000040321e\n.text:0000000000403221\n.text:0000000000403225\n.text:0000000000403229\n.text:000000000040322d\n.text:0000000000403230\n.text:0000000000403235\n.text:0000000000403238\n.text:000000000040323a\n.text:000000000040323d\n.text:0000000000403244\n.text:0000000000403246\n.text:000000000040324b\n.text:000000000040324f\n.text:0000000000403252\n.text:0000000000403255\n.text:0000000000403258\n.text:000000000040325b\n.text:000000000040325e\n.text:0000000000403261\n.text:0000000000403266\n.text:000000000040326d\n.text:0000000000403274\n.text:000000000040327b\n.text:0000000000403282\n.text:0000000000403289\n.text:000000000040328b\n.text:0000000000403292\n.text:0000000000403297\n.text:000000000040329e\n.text:000000000040329f\n.text:00000000004032a1\n.text:00000000004032a3\n.text:00000000004032a5\n.text:00000000004032a7\n.text:00000000004032a8\n'
p615
tp616
sS'emit_ancillary_info'
p617
(S'\n__stdcall emit_ancillary_info()\n'
p618
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x004069d0;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("wc",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "wc";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00406e01,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00406e01);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x4078a9;\u000a  if (__s2 == "wc") {\u000a    uVar3 = 0x40700a;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p619
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x4069d0\nMOV ESI,0x406fee\nNOP\nMOV EDI,0x406e01\nCALL 0x00401970\nTEST EAX,EAX\nJZ 0x00401e2b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401e10\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x406e01\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x40704d\nMOV EDX,0x5\nCALL 0x00401830\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406e22\nMOV ECX,0x407064\nXOR EAX,EAX\nCALL 0x00401a70\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401a60\nTEST RAX,RAX\nJZ 0x00401eb4\nMOV ESI,0x40708b\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401790\nTEST EAX,EAX\nJZ 0x00401eb4\nXOR EDI,EDI\nMOV ESI,0x40708f\nMOV EDX,0x5\nCALL 0x00401830\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406e01\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401a70\nXOR EDI,EDI\nMOV ESI,0x4070d4\nMOV EDX,0x5\nCALL 0x00401830\nMOV RSI,RAX\nMOV R14D,0x406e01\nMOV EDI,0x1\nMOV EDX,0x407064\nMOV ECX,0x406e01\nXOR EAX,EAX\nCALL 0x00401a70\nXOR EDI,EDI\nMOV ESI,0x4070f3\nMOV EDX,0x5\nCALL 0x00401830\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x40700a\nMOV ECX,0x4078a9\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401a70\n'
p620
S'41 56\n53\n50\nbb d0 69 40 00\nbe ee 6f 40 00\n66 90\nbf 01 6e 40 00\ne8 56 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 01 6e 40 00\n48 0f 45 d8\n31 ff\nbe 4d 70 40 00\nba 05 00 00 00\ne8 e4 f9 ff ff\n48 89 c6\nbf 01 00 00 00\nba 22 6e 40 00\nb9 64 70 40 00\n31 c0\ne8 0b fc ff ff\nbf 05 00 00 00\n31 f6\ne8 ef fb ff ff\n48 85 c0\n74 3e\nbe 8b 70 40 00\nba 03 00 00 00\n48 89 c7\ne8 08 f9 ff ff\n85 c0\n74 28\n31 ff\nbe 8f 70 40 00\nba 05 00 00 00\ne8 93 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 01 6e 40 00\n31 c0\n48 89 ce\ne8 bc fb ff ff\n31 ff\nbe d4 70 40 00\nba 05 00 00 00\ne8 6b f9 ff ff\n48 89 c6\n41 be 01 6e 40 00\nbf 01 00 00 00\nba 64 70 40 00\nb9 01 6e 40 00\n31 c0\ne8 8c fb ff ff\n31 ff\nbe f3 70 40 00\nba 05 00 00 00\ne8 3b f9 ff ff\n48 89 c2\n4c 39 f3\nb8 0a 70 40 00\nb9 a9 78 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 4e fb ff ff\n'
p621
S'.text:0000000000401e00\n.text:0000000000401e02\n.text:0000000000401e03\n.text:0000000000401e04\n.text:0000000000401e09\n.text:0000000000401e0e\n.text:0000000000401e10\n.text:0000000000401e15\n.text:0000000000401e1a\n.text:0000000000401e1c\n.text:0000000000401e1e\n.text:0000000000401e22\n.text:0000000000401e26\n.text:0000000000401e29\n.text:0000000000401e2b\n.text:0000000000401e2f\n.text:0000000000401e32\n.text:0000000000401e37\n.text:0000000000401e3b\n.text:0000000000401e3d\n.text:0000000000401e42\n.text:0000000000401e47\n.text:0000000000401e4c\n.text:0000000000401e4f\n.text:0000000000401e54\n.text:0000000000401e59\n.text:0000000000401e5e\n.text:0000000000401e60\n.text:0000000000401e65\n.text:0000000000401e6a\n.text:0000000000401e6c\n.text:0000000000401e71\n.text:0000000000401e74\n.text:0000000000401e76\n.text:0000000000401e7b\n.text:0000000000401e80\n.text:0000000000401e83\n.text:0000000000401e88\n.text:0000000000401e8a\n.text:0000000000401e8c\n.text:0000000000401e8e\n.text:0000000000401e93\n.text:0000000000401e98\n.text:0000000000401e9d\n.text:0000000000401ea0\n.text:0000000000401ea5\n.text:0000000000401eaa\n.text:0000000000401eac\n.text:0000000000401eaf\n.text:0000000000401eb4\n.text:0000000000401eb6\n.text:0000000000401ebb\n.text:0000000000401ec0\n.text:0000000000401ec5\n.text:0000000000401ec8\n.text:0000000000401ece\n.text:0000000000401ed3\n.text:0000000000401ed8\n.text:0000000000401edd\n.text:0000000000401edf\n.text:0000000000401ee4\n.text:0000000000401ee6\n.text:0000000000401eeb\n.text:0000000000401ef0\n.text:0000000000401ef5\n.text:0000000000401ef8\n.text:0000000000401efb\n.text:0000000000401f00\n.text:0000000000401f05\n.text:0000000000401f09\n.text:0000000000401f0e\n.text:0000000000401f10\n.text:0000000000401f13\n.text:0000000000401f16\n.text:0000000000401f1a\n.text:0000000000401f1b\n.text:0000000000401f1d\n'
p622
tp623
sS'version_etc_va'
p624
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p625
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p626
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x004057c0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x004057cc\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x004057e1\nINC R9\nCMP R9,0xa\nJC 0x004057a0\nMOV R8,RSP\nCALL 0x00405400\nADD RSP,0x58\nRET\n'
p627
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p628
S'.text:0000000000405790\n.text:0000000000405794\n.text:0000000000405797\n.text:00000000004057a0\n.text:00000000004057a3\n.text:00000000004057a7\n.text:00000000004057a9\n.text:00000000004057ac\n.text:00000000004057b0\n.text:00000000004057b4\n.text:00000000004057b7\n.text:00000000004057c0\n.text:00000000004057c4\n.text:00000000004057c8\n.text:00000000004057cc\n.text:00000000004057cf\n.text:00000000004057d3\n.text:00000000004057d6\n.text:00000000004057d8\n.text:00000000004057db\n.text:00000000004057df\n.text:00000000004057e1\n.text:00000000004057e4\n.text:00000000004057e9\n.text:00000000004057ed\n'
p629
tp630
sS'xzalloc'
p631
(S'\n__stdcall xzalloc(size_t s)\n'
p632
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p633
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00405920\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x004018c0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p634
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 94 be ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p635
S'.text:0000000000405a10\n.text:0000000000405a12\n.text:0000000000405a13\n.text:0000000000405a14\n.text:0000000000405a17\n.text:0000000000405a1c\n.text:0000000000405a1f\n.text:0000000000405a21\n.text:0000000000405a24\n.text:0000000000405a27\n.text:0000000000405a2c\n.text:0000000000405a2f\n.text:0000000000405a33\n.text:0000000000405a34\n.text:0000000000405a36\n'
p636
tp637
sS'umaxtostr'
p638
(S'\n__stdcall umaxtostr(uintmax_t i, char * buf)\n'
p639
V\u000achar * umaxtostr(uintmax_t i,char *buf)\u000a\u000a{\u000a  bool bVar1;\u000a  \u000a  buf[0x14] = 0;\u000a  buf = buf + 0x14;\u000a  do {\u000a    buf[-1] = (char)i + ((byte)((SUB168(ZEXT816(i) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                                0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a    buf = buf + -1;\u000a    bVar1 = 9 < i;\u000a    i = i / 10;\u000a  } while (bVar1);\u000a  return buf;\u000a}\u000a\u000a
p640
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nADD RSI,0x14\nMOV R8,-0x3333333333333333\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,RCX\nMUL R8\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV EDI,ECX\nSUB EDI,EAX\nOR DIL,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nSHR RDX,0x3\nCMP RCX,0x9\nMOV RCX,RDX\nJA 0x00403540\nMOV RAX,RSI\nRET\n'
p641
S'48 89 f9\nc6 46 14 00\n48 83 c6 14\n49 b8 cd cc cc cc cc cc cc cc\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 c8\n49 f7 e0\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n89 cf\n29 c7\n40 80 cf 30\n40 88 7e ff\n48 ff ce\n48 c1 ea 03\n48 83 f9 09\n48 89 d1\n77 d1\n48 89 f0\nc3\n'
p642
S'.text:0000000000403520\n.text:0000000000403523\n.text:0000000000403527\n.text:000000000040352b\n.text:0000000000403535\n.text:0000000000403540\n.text:0000000000403543\n.text:0000000000403546\n.text:0000000000403548\n.text:000000000040354b\n.text:0000000000403550\n.text:0000000000403553\n.text:0000000000403555\n.text:0000000000403557\n.text:000000000040355b\n.text:000000000040355f\n.text:0000000000403562\n.text:0000000000403566\n.text:000000000040356a\n.text:000000000040356d\n.text:000000000040356f\n.text:0000000000403572\n'
p643
tp644
sS'gettext_quote'
p645
(S'\n__stdcall gettext_quote(char * msgid)\n'
p646
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_0040776e;\u000a        pcVar2 = &DAT_00407772;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401830\nCMP RAX,RBX\nJNZ 0x00404cf8\nCALL 0x00406150\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00404d00\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404ca8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40775e\nMOV EAX,0x407762\nJMP 0x00404cf4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00404d00\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404ce6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40776e\nMOV EAX,0x407772\nJMP 0x00404cf4\nCMP R14D,0x9\nMOV ECX,0x406eff\nMOV EAX,0x407756\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p648
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 d7 cb ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 e9 14 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 5e 77 40 00\nb8 62 77 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 6e 77 40 00\nb8 72 77 40 00\neb 0e\n41 83 fe 09\nb9 ff 6e 40 00\nb8 56 77 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p649
S'.text:0000000000404c40\n.text:0000000000404c41\n.text:0000000000404c43\n.text:0000000000404c44\n.text:0000000000404c47\n.text:0000000000404c4a\n.text:0000000000404c4c\n.text:0000000000404c51\n.text:0000000000404c54\n.text:0000000000404c59\n.text:0000000000404c5c\n.text:0000000000404c62\n.text:0000000000404c67\n.text:0000000000404c6a\n.text:0000000000404c6f\n.text:0000000000404c74\n.text:0000000000404c79\n.text:0000000000404c7f\n.text:0000000000404c85\n.text:0000000000404c88\n.text:0000000000404c8a\n.text:0000000000404c8c\n.text:0000000000404c91\n.text:0000000000404c95\n.text:0000000000404c97\n.text:0000000000404c99\n.text:0000000000404c9c\n.text:0000000000404ca1\n.text:0000000000404ca6\n.text:0000000000404ca8\n.text:0000000000404cad\n.text:0000000000404cb2\n.text:0000000000404cb7\n.text:0000000000404cbd\n.text:0000000000404cc3\n.text:0000000000404cc6\n.text:0000000000404cc8\n.text:0000000000404cca\n.text:0000000000404ccf\n.text:0000000000404cd3\n.text:0000000000404cd5\n.text:0000000000404cd7\n.text:0000000000404cda\n.text:0000000000404cdf\n.text:0000000000404ce4\n.text:0000000000404ce6\n.text:0000000000404cea\n.text:0000000000404cef\n.text:0000000000404cf4\n.text:0000000000404cf8\n.text:0000000000404cf9\n.text:0000000000404cfb\n.text:0000000000404cfc\n'
p650
tp651
sS'fclose'
p652
(S'\n__stdcall fclose(FILE * __stream)\n'
p653
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060a078)();\u000a  return iVar1;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x0060a078]\n'
p655
S'ff 25 62 88 20 00\n'
p656
S'.plt:0000000000401810\n'
p657
tp658
sS'__ctype_get_mb_cur_max'
p659
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p660
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060a090)();\u000a  return sVar1;\u000a}\u000a\u000a
p661
S'JMP qword ptr [0x0060a090]\n'
p662
S'ff 25 4a 88 20 00\n'
p663
S'.plt:0000000000401840\n'
p664
tp665
sS'quotearg_n_style'
p666
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p667
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p668
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00404970\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00404740\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p669
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p670
S'.text:0000000000404930\n.text:0000000000404931\n.text:0000000000404933\n.text:0000000000404934\n.text:0000000000404938\n.text:000000000040493b\n.text:000000000040493d\n.text:0000000000404942\n.text:0000000000404945\n.text:000000000040494a\n.text:0000000000404951\n.text:0000000000404953\n.text:0000000000404956\n.text:0000000000404959\n.text:000000000040495e\n.text:0000000000404962\n.text:0000000000404963\n.text:0000000000404965\n.text:0000000000404966\n'
p671
tp672
sS'quote_n'
p673
(S'\n__stdcall quote_n(char * arg)\n'
p674
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p675
S'MOV RDX,-0x1\nJMP 0x00404c00\n'
p676
S'48 c7 c2 ff ff ff ff\neb d7\n'
p677
S'.text:0000000000404c20\n.text:0000000000404c27\n'
p678
tp679
sS'quotearg_alloc'
p680
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p681
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p682
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x004045b0\n'
p683
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p684
S'.text:00000000004045a0\n.text:00000000004045a3\n.text:00000000004045a5\n.text:00000000004045a8\n'
p685
tp686
sS'close_stdout_set_file_name'
p687
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p688
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p689
S'MOV qword ptr [0x0060a350],RDI\nRET\n'
p690
S'48 89 3d 39 6f 20 00\nc3\n'
p691
S'.text:0000000000403410\n.text:0000000000403417\n'
p692
tp693
sS'iswspace'
p694
(S'\n__stdcall iswspace(wint_t __wc)\n'
p695
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswspace(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswspace_0060a1b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p696
S'JMP qword ptr [0x0060a1b8]\n'
p697
S'ff 25 22 87 20 00\n'
p698
S'.plt:0000000000401a90\n'
p699
tp700
sS'feof'
p701
(S'\n__stdcall feof(FILE * __stream)\n'
p702
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint feof(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_feof_0060a130)();\u000a  return iVar1;\u000a}\u000a\u000a
p703
S'JMP qword ptr [0x0060a130]\n'
p704
S'ff 25 aa 87 20 00\n'
p705
S'.plt:0000000000401980\n'
p706
tp707
sS'compute_number_width'
p708
(S'\n__stdcall compute_number_width(size_t nfiles, fstatus * fstatus)\n'
p709
V\u000aint compute_number_width(size_t nfiles,fstatus *fstatus)\u000a\u000a{\u000a  bool bVar1;\u000a  int iVar2;\u000a  long *plVar3;\u000a  ulong uVar4;\u000a  int iVar5;\u000a  \u000a  iVar2 = 1;\u000a  if ((nfiles != 0) && (iVar2 = 1, fstatus->failed < 1)) {\u000a    plVar3 = &(fstatus->st).st_size;\u000a    iVar5 = 1;\u000a    uVar4 = 0;\u000a    do {\u000a      if (*(int *)(plVar3 + -7) == 0) {\u000a        if ((*(uint *)(plVar3 + -3) & 0xf000) == 0x8000) {\u000a          uVar4 = uVar4 + *plVar3;\u000a        }\u000a        else {\u000a          iVar5 = 7;\u000a        }\u000a      }\u000a      plVar3 = plVar3 + 0x13;\u000a      nfiles = nfiles - 1;\u000a    } while (nfiles != 0);\u000a    iVar2 = 1;\u000a    if (9 < uVar4) {\u000a      iVar2 = 1;\u000a      do {\u000a        iVar2 = iVar2 + 1;\u000a        bVar1 = 99 < uVar4;\u000a        uVar4 = uVar4 / 10;\u000a      } while (bVar1);\u000a    }\u000a    if (iVar2 < iVar5) {\u000a      iVar2 = iVar5;\u000a    }\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p710
S'MOV ECX,0x1\nTEST RDI,RDI\nJZ 0x0040283c\nCMP dword ptr [RSI],0x0\nJG 0x0040283c\nADD RSI,0x38\nMOV R9D,0x1\nXOR R8D,R8D\nMOV EAX,0xf000\nNOP dword ptr [RAX]\nCMP dword ptr [RSI + -0x38],0x0\nJNZ 0x004027f0\nMOV ECX,dword ptr [RSI + -0x18]\nAND ECX,EAX\nCMP ECX,0x8000\nJNZ 0x004027e8\nADD R8,qword ptr [RSI]\nJMP 0x004027f0\nMOV R9D,0x7\nNOP\nADD RSI,0x98\nDEC RDI\nJNZ 0x004027d0\nMOV ECX,0x1\nCMP R8,0xa\nJC 0x00402835\nMOV ECX,0x1\nMOV RSI,-0x3333333333333333\nNOP word ptr CS:[RAX + RAX*0x1]\nINC ECX\nMOV RAX,R8\nMUL RSI\nSHR RDX,0x3\nCMP R8,0x63\nMOV R8,RDX\nJA 0x00402820\nCMP ECX,R9D\nCMOVL ECX,R9D\nMOV EAX,ECX\nRET\n'
p711
S'b9 01 00 00 00\n48 85 ff\n0f 84 8e 00 00 00\n83 3e 00\n0f 8f 85 00 00 00\n48 83 c6 38\n41 b9 01 00 00 00\n45 31 c0\nb8 00 f0 00 00\n0f 1f 80 00 00 00 00\n83 7e c8 00\n75 1a\n8b 4e e8\n21 c1\n81 f9 00 80 00 00\n75 05\n4c 03 06\neb 08\n41 b9 07 00 00 00\n66 90\n48 81 c6 98 00 00 00\n48 ff cf\n75 d4\nb9 01 00 00 00\n49 83 f8 0a\n72 2e\nb9 01 00 00 00\n48 be cd cc cc cc cc cc cc cc\n66 2e 0f 1f 84 00 00 00 00 00\nff c1\n4c 89 c0\n48 f7 e6\n48 c1 ea 03\n49 83 f8 63\n49 89 d0\n77 eb\n44 39 c9\n41 0f 4c c9\n89 c8\nc3\n'
p712
S'.text:00000000004027a0\n.text:00000000004027a5\n.text:00000000004027a8\n.text:00000000004027ae\n.text:00000000004027b1\n.text:00000000004027b7\n.text:00000000004027bb\n.text:00000000004027c1\n.text:00000000004027c4\n.text:00000000004027c9\n.text:00000000004027d0\n.text:00000000004027d4\n.text:00000000004027d6\n.text:00000000004027d9\n.text:00000000004027db\n.text:00000000004027e1\n.text:00000000004027e3\n.text:00000000004027e6\n.text:00000000004027e8\n.text:00000000004027ee\n.text:00000000004027f0\n.text:00000000004027f7\n.text:00000000004027fa\n.text:00000000004027fc\n.text:0000000000402801\n.text:0000000000402805\n.text:0000000000402807\n.text:000000000040280c\n.text:0000000000402816\n.text:0000000000402820\n.text:0000000000402822\n.text:0000000000402825\n.text:0000000000402828\n.text:000000000040282c\n.text:0000000000402830\n.text:0000000000402833\n.text:0000000000402835\n.text:0000000000402838\n.text:000000000040283c\n.text:000000000040283e\n'
p713
tp714
sS'fgetc'
p715
(S'\n__stdcall fgetc(FILE * __stream)\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fgetc(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fgetc_0060a0e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x0060a0e0]\n'
p718
S'ff 25 fa 87 20 00\n'
p719
S'.plt:00000000004018e0\n'
p720
tp721
sS'__libc_csu_init'
p722
(S'\n__stdcall __libc_csu_init()\n'
p723
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p724
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x609e08]\nPUSH RBP\nLEA RBP,[0x609e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401720\nTEST RBP,RBP\nJZ 0x004064d6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x004064c0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p725
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 76 39 20 00\n55\n48 8d 2d 76 39 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 6f b2 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p726
S'.text:0000000000406480\n.text:0000000000406482\n.text:0000000000406484\n.text:0000000000406487\n.text:0000000000406489\n.text:000000000040648b\n.text:0000000000406492\n.text:0000000000406493\n.text:000000000040649a\n.text:000000000040649b\n.text:000000000040649e\n.text:00000000004064a1\n.text:00000000004064a4\n.text:00000000004064a8\n.text:00000000004064ac\n.text:00000000004064b1\n.text:00000000004064b4\n.text:00000000004064b6\n.text:00000000004064b8\n.text:00000000004064c0\n.text:00000000004064c3\n.text:00000000004064c6\n.text:00000000004064c9\n.text:00000000004064cd\n.text:00000000004064d1\n.text:00000000004064d4\n.text:00000000004064d6\n.text:00000000004064da\n.text:00000000004064db\n.text:00000000004064dc\n.text:00000000004064de\n.text:00000000004064e0\n.text:00000000004064e2\n.text:00000000004064e4\n'
p727
tp728
sS'c_isdigit'
p729
(S'\n__stdcall c_isdigit()\n'
p730
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p731
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p732
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p733
S'.text:0000000000406010\n.text:0000000000406013\n.text:0000000000406016\n.text:0000000000406019\n'
p734
tp735
sS'readtokens0'
p736
(S'\n__stdcall readtokens0(FILE * in, Tokens * t)\n'
p737
V\u000a_Bool readtokens0(FILE *in,Tokens *t)\u000a\u000a{\u000a  uint *puVar1;\u000a  char *pcVar2;\u000a  char **ppcVar3;\u000a  ulong uVar4;\u000a  _obstack_chunk *p_Var5;\u000a  size_t *psVar6;\u000a  size_t *psVar7;\u000a  int iVar8;\u000a  char **ppcVar9;\u000a  char *pcVar10;\u000a  \u000a  iVar8 = fgetc((FILE *)in);\u000a  if (iVar8 != -1) {\u000a    do {\u000a      if ((t->o_data).chunk_limit == (t->o_data).next_free) {\u000a        _obstack_newchunk(&t->o_data,1);\u000a      }\u000a      pcVar2 = (t->o_data).next_free;\u000a      (t->o_data).next_free = pcVar2 + 1;\u000a      *pcVar2 = (char)iVar8;\u000a      if (iVar8 == 0) {\u000a        save_token(t);\u000a      }\u000a      iVar8 = fgetc((FILE *)in);\u000a    } while (iVar8 != -1);\u000a  }\u000a  pcVar2 = (t->o_data).next_free;\u000a  if (pcVar2 != (t->o_data).object_base) {\u000a    if ((t->o_data).chunk_limit == pcVar2) {\u000a      _obstack_newchunk(&t->o_data,1);\u000a    }\u000a    pcVar2 = (t->o_data).next_free;\u000a    (t->o_data).next_free = pcVar2 + 1;\u000a    *pcVar2 = 0;\u000a    save_token(t);\u000a  }\u000a  if ((t->o_tok).chunk_limit + -(long)(t->o_tok).next_free < &DAT_00000008) {\u000a    _obstack_newchunk(&t->o_tok,8);\u000a  }\u000a  *(undefined8 *)(t->o_tok).next_free = 0;\u000a  ppcVar9 = (char **)((t->o_tok).next_free + 8);\u000a  *(char ***)&(t->o_tok).next_free = ppcVar9;\u000a  ppcVar3 = (char **)(t->o_tok).object_base;\u000a  if (ppcVar9 == ppcVar3) {\u000a    puVar1 = &(t->o_tok).use_extra_arg_bitfield;\u000a    *(byte *)puVar1 = *(byte *)puVar1 | 2;\u000a  }\u000a  uVar4 = (t->o_tok).alignment_mask;\u000a  pcVar10 = (char *)(~uVar4 & (ulong)((t->o_tok).next_free + uVar4));\u000a  (t->o_tok).next_free = pcVar10;\u000a  p_Var5 = (t->o_tok).chunk;\u000a  pcVar2 = (t->o_tok).chunk_limit;\u000a  if (pcVar2 + -(long)p_Var5 < pcVar10 + -(long)p_Var5) {\u000a    (t->o_tok).next_free = pcVar2;\u000a  }\u000a  (t->o_tok).object_base = (t->o_tok).next_free;\u000a  t->tok = ppcVar3;\u000a  psVar6 = (size_t *)(t->o_tok_len).object_base;\u000a  psVar7 = (size_t *)(t->o_tok_len).next_free;\u000a  if (psVar7 == psVar6) {\u000a    puVar1 = &(t->o_tok_len).use_extra_arg_bitfield;\u000a    *(byte *)puVar1 = *(byte *)puVar1 | 2;\u000a  }\u000a  uVar4 = (t->o_tok_len).alignment_mask;\u000a  pcVar10 = (char *)(~uVar4 & (long)psVar7 + uVar4);\u000a  (t->o_tok_len).next_free = pcVar10;\u000a  p_Var5 = (t->o_tok_len).chunk;\u000a  pcVar2 = (t->o_tok_len).chunk_limit;\u000a  if (pcVar2 + -(long)p_Var5 < pcVar10 + -(long)p_Var5) {\u000a    (t->o_tok_len).next_free = pcVar2;\u000a  }\u000a  (t->o_tok_len).object_base = (t->o_tok_len).next_free;\u000a  t->tok_len = psVar6;\u000a  iVar8 = ferror((FILE *)in);\u000a  return (_Bool)(iVar8 == 0);\u000a}\u000a\u000a
p738
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x004018e0\nMOV EBP,EAX\nCMP EBP,-0x1\nJZ 0x00405141\nLEA R15,[RBX + 0x18]\nNOP dword ptr [RAX]\nMOV RAX,qword ptr [RBX + 0x38]\nCMP RAX,qword ptr [RBX + 0x30]\nJNZ 0x00405117\nMOV ESI,0x1\nMOV RDI,R15\nCALL 0x00405d40\nMOV RAX,qword ptr [RBX + 0x30]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RBX + 0x30],RCX\nMOV byte ptr [RAX],BPL\nTEST EBP,EBP\nJNZ 0x00405132\nMOV RDI,RBX\nCALL 0x004052a0\nMOV RDI,R14\nCALL 0x004018e0\nMOV EBP,EAX\nCMP EBP,-0x1\nJNZ 0x00405100\nMOV RAX,qword ptr [RBX + 0x30]\nCMP RAX,qword ptr [RBX + 0x28]\nJZ 0x00405176\nCMP qword ptr [RBX + 0x38],RAX\nJNZ 0x0040515f\nLEA RDI,[RBX + 0x18]\nMOV ESI,0x1\nCALL 0x00405d40\nMOV RAX,qword ptr [RBX + 0x30]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RBX + 0x30],RCX\nMOV byte ptr [RAX],0x0\nMOV RDI,RBX\nCALL 0x004052a0\nMOV RAX,qword ptr [0x90 + RBX]\nSUB RAX,qword ptr [0x88 + RBX]\nCMP RAX,0x7\nJA 0x00405198\nLEA RDI,[RBX + 0x70]\nMOV ESI,0x8\nCALL 0x00405d40\nMOV RAX,qword ptr [0x88 + RBX]\nMOV qword ptr [RAX],0x0\nMOV RCX,qword ptr [0x88 + RBX]\nADD RCX,0x8\nMOV qword ptr [0x88 + RBX],RCX\nMOV RAX,qword ptr [0x80 + RBX]\nCMP RCX,RAX\nJNZ 0x004051cb\nOR byte ptr [0xc0 + RBX],0x2\nMOV RDX,qword ptr [0xa0 + RBX]\nMOV RCX,qword ptr [0x88 + RBX]\nADD RCX,RDX\nNOT RDX\nAND RDX,RCX\nMOV qword ptr [0x88 + RBX],RDX\nMOV RSI,qword ptr [RBX + 0x78]\nMOV RCX,qword ptr [0x90 + RBX]\nSUB RDX,RSI\nMOV RDI,RCX\nSUB RDI,RSI\nCMP RDX,RDI\nJBE 0x00405209\nMOV qword ptr [0x88 + RBX],RCX\nMOV RCX,qword ptr [0x88 + RBX]\nMOV qword ptr [0x80 + RBX],RCX\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [0xd8 + RBX]\nMOV RCX,qword ptr [0xe0 + RBX]\nCMP RCX,RAX\nJNZ 0x00405235\nOR byte ptr [0x118 + RBX],0x2\nMOV RDX,qword ptr [0xf8 + RBX]\nADD RCX,RDX\nNOT RDX\nAND RDX,RCX\nMOV qword ptr [0xe0 + RBX],RDX\nMOV RSI,qword ptr [0xd0 + RBX]\nMOV RCX,qword ptr [0xe8 + RBX]\nSUB RDX,RSI\nMOV RDI,RCX\nSUB RDI,RSI\nCMP RDX,RDI\nJBE 0x0040526f\nMOV qword ptr [0xe0 + RBX],RCX\nMOV RCX,qword ptr [0xe0 + RBX]\nMOV qword ptr [0xd8 + RBX],RCX\nMOV qword ptr [RBX + 0x10],RAX\nMOV RDI,R14\nCALL 0x004017d0\nTEST EAX,EAX\nSETZ AL\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p739
S'55\n41 57\n41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 ee c7 ff ff\n89 c5\n83 fd ff\n74 48\n4c 8d 7b 18\n0f 1f 00\n48 8b 43 38\n48 3b 43 30\n75 0d\nbe 01 00 00 00\n4c 89 ff\ne8 29 0c 00 00\n48 8b 43 30\n48 8d 48 01\n48 89 4b 30\n40 88 28\n85 ed\n75 08\n48 89 df\ne8 6e 01 00 00\n4c 89 f7\ne8 a6 c7 ff ff\n89 c5\n83 fd ff\n75 bf\n48 8b 43 30\n48 3b 43 28\n74 2b\n48 39 43 38\n75 0e\n48 8d 7b 18\nbe 01 00 00 00\ne8 e1 0b 00 00\n48 8b 43 30\n48 8d 48 01\n48 89 4b 30\nc6 00 00\n48 89 df\ne8 2a 01 00 00\n48 8b 83 90 00 00 00\n48 2b 83 88 00 00 00\n48 83 f8 07\n77 0e\n48 8d 7b 70\nbe 08 00 00 00\ne8 a8 0b 00 00\n48 8b 83 88 00 00 00\n48 c7 00 00 00 00 00\n48 8b 8b 88 00 00 00\n48 83 c1 08\n48 89 8b 88 00 00 00\n48 8b 83 80 00 00 00\n48 39 c1\n75 07\n80 8b c0 00 00 00 02\n48 8b 93 a0 00 00 00\n48 8b 8b 88 00 00 00\n48 01 d1\n48 f7 d2\n48 21 ca\n48 89 93 88 00 00 00\n48 8b 73 78\n48 8b 8b 90 00 00 00\n48 29 f2\n48 89 cf\n48 29 f7\n48 39 fa\n76 07\n48 89 8b 88 00 00 00\n48 8b 8b 88 00 00 00\n48 89 8b 80 00 00 00\n48 89 43 08\n48 8b 83 d8 00 00 00\n48 8b 8b e0 00 00 00\n48 39 c1\n75 07\n80 8b 18 01 00 00 02\n48 8b 93 f8 00 00 00\n48 01 d1\n48 f7 d2\n48 21 ca\n48 89 93 e0 00 00 00\n48 8b b3 d0 00 00 00\n48 8b 8b e8 00 00 00\n48 29 f2\n48 89 cf\n48 29 f7\n48 39 fa\n76 07\n48 89 8b e0 00 00 00\n48 8b 8b e0 00 00 00\n48 89 8b d8 00 00 00\n48 89 43 10\n4c 89 f7\ne8 47 c5 ff ff\n85 c0\n0f 94 c0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p740
S'.text:00000000004050e0\n.text:00000000004050e1\n.text:00000000004050e3\n.text:00000000004050e5\n.text:00000000004050e6\n.text:00000000004050e7\n.text:00000000004050ea\n.text:00000000004050ed\n.text:00000000004050f2\n.text:00000000004050f4\n.text:00000000004050f7\n.text:00000000004050f9\n.text:00000000004050fd\n.text:0000000000405100\n.text:0000000000405104\n.text:0000000000405108\n.text:000000000040510a\n.text:000000000040510f\n.text:0000000000405112\n.text:0000000000405117\n.text:000000000040511b\n.text:000000000040511f\n.text:0000000000405123\n.text:0000000000405126\n.text:0000000000405128\n.text:000000000040512a\n.text:000000000040512d\n.text:0000000000405132\n.text:0000000000405135\n.text:000000000040513a\n.text:000000000040513c\n.text:000000000040513f\n.text:0000000000405141\n.text:0000000000405145\n.text:0000000000405149\n.text:000000000040514b\n.text:000000000040514f\n.text:0000000000405151\n.text:0000000000405155\n.text:000000000040515a\n.text:000000000040515f\n.text:0000000000405163\n.text:0000000000405167\n.text:000000000040516b\n.text:000000000040516e\n.text:0000000000405171\n.text:0000000000405176\n.text:000000000040517d\n.text:0000000000405184\n.text:0000000000405188\n.text:000000000040518a\n.text:000000000040518e\n.text:0000000000405193\n.text:0000000000405198\n.text:000000000040519f\n.text:00000000004051a6\n.text:00000000004051ad\n.text:00000000004051b1\n.text:00000000004051b8\n.text:00000000004051bf\n.text:00000000004051c2\n.text:00000000004051c4\n.text:00000000004051cb\n.text:00000000004051d2\n.text:00000000004051d9\n.text:00000000004051dc\n.text:00000000004051df\n.text:00000000004051e2\n.text:00000000004051e9\n.text:00000000004051ed\n.text:00000000004051f4\n.text:00000000004051f7\n.text:00000000004051fa\n.text:00000000004051fd\n.text:0000000000405200\n.text:0000000000405202\n.text:0000000000405209\n.text:0000000000405210\n.text:0000000000405217\n.text:000000000040521b\n.text:0000000000405222\n.text:0000000000405229\n.text:000000000040522c\n.text:000000000040522e\n.text:0000000000405235\n.text:000000000040523c\n.text:000000000040523f\n.text:0000000000405242\n.text:0000000000405245\n.text:000000000040524c\n.text:0000000000405253\n.text:000000000040525a\n.text:000000000040525d\n.text:0000000000405260\n.text:0000000000405263\n.text:0000000000405266\n.text:0000000000405268\n.text:000000000040526f\n.text:0000000000405276\n.text:000000000040527d\n.text:0000000000405281\n.text:0000000000405284\n.text:0000000000405289\n.text:000000000040528b\n.text:000000000040528e\n.text:0000000000405292\n.text:0000000000405293\n.text:0000000000405295\n.text:0000000000405297\n.text:0000000000405298\n'
p741
tp742
sS'usage'
p743
(S'\n__stdcall usage()\n'
p744
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... [FILE]...\u005cn  or:  %s [OPTION]... --files0-from=F\u005cn",5\u000a                     );\u000a    __printf_chk(1,uVar1,program_name,program_name);\u000a    __s = (char *)dcgettext(0,\u000a                            "Print newline, word, and byte counts for each FILE, and a total line if\u005cnmore than one FILE is specified.  A word is a non-zero-length sequence of\u005cncharacters delimited by white space.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_stdin_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnThe options below may be used to select which counts are printed, always in\u005cnthe following order: newline, word, character, byte, maximum line length.\u005cn  -c, --bytes            print the byte counts\u005cn  -m, --chars            print the character counts\u005cn  -l, --lines            print the newline counts\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --files0-from=F    read input from the files specified by\u005cn                           NUL-terminated names in file F;\u005cn                           If F is - then read names from standard input\u005cn  -L, --max-line-length  print the maximum display width\u005cn  -w, --words            print the word counts\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p745
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401d79\nXOR EDI,EDI\nMOV ESI,0x406a45\nMOV EDX,0x5\nCALL 0x00401830\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060a360]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nCALL 0x00401a70\nXOR EDI,EDI\nMOV ESI,0x406a8c\nMOV EDX,0x5\nCALL 0x00401830\nMOV RSI,qword ptr [0x0060a2c8]\nMOV RDI,RAX\nCALL 0x00401940\nCALL 0x00401dd0\nXOR EDI,EDI\nMOV ESI,0x406b44\nMOV EDX,0x5\nCALL 0x00401830\nMOV RSI,qword ptr [0x0060a2c8]\nMOV RDI,RAX\nCALL 0x00401940\nXOR EDI,EDI\nMOV ESI,0x406c71\nMOV EDX,0x5\nCALL 0x00401830\nMOV RSI,qword ptr [0x0060a2c8]\nMOV RDI,RAX\nCALL 0x00401940\nXOR EDI,EDI\nMOV ESI,0x406d9e\nMOV EDX,0x5\nCALL 0x00401830\nMOV RSI,qword ptr [0x0060a2c8]\nMOV RDI,RAX\nCALL 0x00401940\nXOR EDI,EDI\nMOV ESI,0x406dcb\nMOV EDX,0x5\nCALL 0x00401830\nMOV RSI,qword ptr [0x0060a2c8]\nMOV RDI,RAX\nCALL 0x00401940\nCALL 0x00401e00\nMOV EDI,EBX\nCALL 0x00401b20\nCALL 0x00401d90\nMOV EDI,EBX\nCALL 0x00401b20\n'
p746
S'53\n89 fb\n85 db\n0f 85 de 00 00 00\n31 ff\nbe 45 6a 40 00\nba 05 00 00 00\ne8 84 fb ff ff\n48 89 c1\n48 8b 15 aa 86 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\ne8 a8 fd ff ff\n31 ff\nbe 8c 6a 40 00\nba 05 00 00 00\ne8 57 fb ff ff\n48 8b 35 e8 85 20 00\n48 89 c7\ne8 58 fc ff ff\ne8 e3 00 00 00\n31 ff\nbe 44 6b 40 00\nba 05 00 00 00\ne8 32 fb ff ff\n48 8b 35 c3 85 20 00\n48 89 c7\ne8 33 fc ff ff\n31 ff\nbe 71 6c 40 00\nba 05 00 00 00\ne8 12 fb ff ff\n48 8b 35 a3 85 20 00\n48 89 c7\ne8 13 fc ff ff\n31 ff\nbe 9e 6d 40 00\nba 05 00 00 00\ne8 f2 fa ff ff\n48 8b 35 83 85 20 00\n48 89 c7\ne8 f3 fb ff ff\n31 ff\nbe cb 6d 40 00\nba 05 00 00 00\ne8 d2 fa ff ff\n48 8b 35 63 85 20 00\n48 89 c7\ne8 d3 fb ff ff\ne8 8e 00 00 00\n89 df\ne8 a7 fd ff ff\ne8 12 00 00 00\n89 df\ne8 9b fd ff ff\n'
p747
S'.text:0000000000401c90\n.text:0000000000401c91\n.text:0000000000401c93\n.text:0000000000401c95\n.text:0000000000401c9b\n.text:0000000000401c9d\n.text:0000000000401ca2\n.text:0000000000401ca7\n.text:0000000000401cac\n.text:0000000000401caf\n.text:0000000000401cb6\n.text:0000000000401cbb\n.text:0000000000401cbd\n.text:0000000000401cc0\n.text:0000000000401cc3\n.text:0000000000401cc8\n.text:0000000000401cca\n.text:0000000000401ccf\n.text:0000000000401cd4\n.text:0000000000401cd9\n.text:0000000000401ce0\n.text:0000000000401ce3\n.text:0000000000401ce8\n.text:0000000000401ced\n.text:0000000000401cef\n.text:0000000000401cf4\n.text:0000000000401cf9\n.text:0000000000401cfe\n.text:0000000000401d05\n.text:0000000000401d08\n.text:0000000000401d0d\n.text:0000000000401d0f\n.text:0000000000401d14\n.text:0000000000401d19\n.text:0000000000401d1e\n.text:0000000000401d25\n.text:0000000000401d28\n.text:0000000000401d2d\n.text:0000000000401d2f\n.text:0000000000401d34\n.text:0000000000401d39\n.text:0000000000401d3e\n.text:0000000000401d45\n.text:0000000000401d48\n.text:0000000000401d4d\n.text:0000000000401d4f\n.text:0000000000401d54\n.text:0000000000401d59\n.text:0000000000401d5e\n.text:0000000000401d65\n.text:0000000000401d68\n.text:0000000000401d6d\n.text:0000000000401d72\n.text:0000000000401d74\n.text:0000000000401d79\n.text:0000000000401d7e\n.text:0000000000401d80\n'
p748
tp749
sS'quoting_options_from_style'
p750
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p751
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p752
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x004049bd\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401770\n'
p753
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 ae cd ff ff\n'
p754
S'.text:0000000000404970\n.text:0000000000404974\n.text:0000000000404977\n.text:000000000040497c\n.text:0000000000404981\n.text:0000000000404985\n.text:000000000040498d\n.text:0000000000404990\n.text:0000000000404992\n.text:0000000000404994\n.text:0000000000404998\n.text:000000000040499b\n.text:000000000040499f\n.text:00000000004049a4\n.text:00000000004049a9\n.text:00000000004049ad\n.text:00000000004049b1\n.text:00000000004049b5\n.text:00000000004049b8\n.text:00000000004049bc\n.text:00000000004049bd\n'
p755
tp756
sS'strcpy'
p757
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p758
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060a048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p759
S'JMP qword ptr [0x0060a048]\n'
p760
S'ff 25 92 88 20 00\n'
p761
S'.plt:00000000004017b0\n'
p762
tp763
sS'c_isgraph'
p764
(S'\n__stdcall c_isgraph()\n'
p765
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p766
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p767
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p768
S'.text:0000000000406020\n.text:0000000000406023\n.text:0000000000406026\n.text:0000000000406029\n'
p769
tp770
sS'sysconf'
p771
(S'\n__stdcall sysconf(int __name)\n'
p772
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along sysconf(int __name)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_sysconf_0060a1e8)();\u000a  return lVar1;\u000a}\u000a\u000a
p773
S'JMP qword ptr [0x0060a1e8]\n'
p774
S'ff 25 f2 86 20 00\n'
p775
S'.plt:0000000000401af0\n'
p776
tp777
sS'quotearg_buffer_restyled'
p778
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p779
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_004039ec_caseD_7;\u000a  case 2:\u000a    goto switchD_004039ec_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_004039ec_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_004039ec_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_004039ec_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_004039ec_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_004039ec_caseD_7;\u000aswitchD_004039ec_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_004039ec_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_004039ec_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_004044b0;\u000aLAB_00403bd0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_004044b9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_004044c8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_00403bdb:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_00403c1f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_00403c1f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_004044c8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_004043f5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00404300;\u000a    }\u000a    goto LAB_004044c8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040442a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_004044c8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00404459;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403f18;\u000a  case '\u005ca':\u000a    goto joined_r0x00403e08;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00403e08;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00403c36_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00403e08;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00403e08;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00403c36_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00403e08:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040436e;\u000a    }\u000a    goto LAB_004044c8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_004044c8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_004044c8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_004044c8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_004044c8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_004044c8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00403c36_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_004043c6;\u000a      goto joined_r0x004043b8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403ec1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x004043b8;\u000a      goto LAB_004043c6;\u000a    }\u000a    goto LAB_004044c8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_004044c8;\u000a  }\u000a  goto joined_r0x00404300;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040442a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00404459;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00404459:\u000a  if (1 < uVar10) {\u000aLAB_00403f36:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403ff2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403ec1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403ff2:\u000a        if (bVar6 != 0) goto LAB_004044c8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403f18:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403f36;\u000ajoined_r0x00404300:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00404300:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00404327;\u000aLAB_00404360:\u000a    if (bVar22) goto LAB_00404365;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00404360;\u000aLAB_00404327:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00404365:\u000a      if (bVar6 != 0) goto LAB_004044c8;\u000aLAB_0040436e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x004043b8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_004043c6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x004043b8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_004043f5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00403bd0;\u000aLAB_004044b0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_004044b9;\u000a  goto LAB_00403bdb;\u000a}\u000a\u000a
p780
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401840\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00404595\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x407230 + RAX*0x8]\nMOV EDI,0x407754\nMOV ESI,R15D\nCALL 0x00404c40\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x407756\nMOV ESI,R15D\nCALL 0x00404c40\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x00403a4d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00403a50\nNOP\nCMP R12,RSI\nJNC 0x00403a3e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00403a30\nJMP 0x00403a50\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401850\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x00403b1c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x00403b1c\nMOV ECX,0x406eff\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00403b16\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00403ab7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00403ae4\nTEST RSI,RSI\nJZ 0x00403ad1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x407756\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00403af2\nMOV ECX,0x407756\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x00403b1c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040456c\nMOV ECX,0x406eff\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x004044b0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x004044b9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x00403c1f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x00403c1a\nCMP R11,-0x1\nJNZ 0x00403c1a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401850\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00403c70\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00403ecc\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x407288 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x004044c8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00404320\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00404327\nJMP 0x00404360\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401930\nTEST EAX,EAX\nSETZ AL\nJNZ 0x00403cbd\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00403c21\nJMP 0x004044c8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00403c21\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x00403c4b\nCMP EBX,0x2\nJNZ 0x00403c4b\nTEST R13,R13\nJNZ 0x00403c4b\nJMP 0x004044c8\nCMP R11,-0x1\nJZ 0x004040a3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x004040c3\nJMP 0x00403c4b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004040d4\nTEST R8B,R8B\nJNZ 0x004044c8\nCMP EBX,0x2\nJNZ 0x00403d78\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403d78\nCMP R12,RSI\nJNC 0x00403d53\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403d62\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403d71\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403d82\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00404248\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00404248\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00404248\nCMP RCX,RSI\nJNC 0x00403dbc\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x00403dcb\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403c56\nJMP 0x00404320\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403c49\nJMP 0x00403e2a\nMOV DL,0x74\nJMP 0x00403e12\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403c49\nJMP 0x00403e2a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403c49\nJMP 0x00403e2a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x004044c8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403c49\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040436e\nJMP 0x004044c8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00403c49\nTEST R8B,R8B\nJNZ 0x004044c8\nCMP R12,RSI\nJNC 0x00403e5a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403e69\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403e78\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00403c49\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040425b\nCMP EBX,0x2\nJNZ 0x00403c49\nTEST R8B,R8B\nJZ 0x00403c49\nJMP 0x004044c8\nCMP EBX,0x2\nJNZ 0x004040f4\nTEST R8B,R8B\nJNZ 0x004044c8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x004043c6\nJMP 0x004043e9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00404115\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401b80\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404308\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00404308\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403ff2\nJMP 0x00403fc0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403fa9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403fa6\nCMP R12,RSI\nJNC 0x00403f8b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x00403f9a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403fe0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403fe0\nTEST BPL,0x1\nJZ 0x00404083\nCMP R12,RSI\nJNC 0x00403fd4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00404083\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403fc0\nTEST R8B,R8B\nJNZ 0x004044c8\nCMP EBX,0x2\nJNZ 0x0040403a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040403a\nCMP R12,RSI\nJNC 0x00404012\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404021\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404030\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00404044\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040405b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404075\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403f70\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x004043c6\nJMP 0x004043e9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x00403c4b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x00403c4b\nJMP 0x004044c8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x004043f5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403c56\nJMP 0x00404320\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00403e12\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x004043c6\nJMP 0x004043e9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00404137\nMOV RDI,R10\nCALL 0x00401850\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401870\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040440f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00404407\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00404416\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x004041fe\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x004041f6\nBT RDI,RDX\nJC 0x00404562\nINC RCX\nCMP RCX,R14\nJC 0x004041e0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401b60\nTEST EAX,EAX\nJNZ 0x00404213\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401b50\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00404155\nJMP 0x00404459\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403c56\nJMP 0x00404320\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00403c49\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00403c49\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00403c49\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x00403c4b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00404492\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x004044c8\nCMP R12,RSI\nJNC 0x004042be\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x004042d1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004042e0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x004042ef\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403c56\nJMP 0x00404320\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403c56\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00404360\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00404365\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x004043c0\nJMP 0x00404365\nTEST BPL,BPL\nJZ 0x004043c0\nTEST R8B,R8B\nJNZ 0x004044c8\nCMP EBX,0x2\nJNZ 0x004043a8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004043a8\nCMP R12,RSI\nJNC 0x00404383\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404392\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004043a1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004043b2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x004043f2\nJMP 0x004043ee\nTEST DIL,0x1\nJZ 0x004043e9\nAND AL,0x1\nJNZ 0x004043e9\nCMP R12,RSI\nJNC 0x004043d4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004043e3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x004043f2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x004044b0\nJMP 0x00403bd0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00404454\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040444c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00404488\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040442a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00404459\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403f18\nJMP 0x00403f36\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00404459\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403c56\nJMP 0x00404320\nCMP R13,R11\nJNZ 0x00403bdb\nTEST R8B,R8B\nJZ 0x00404522\nCMP EBX,0x2\nJNZ 0x00404522\nTEST R12,R12\nJNZ 0x00404522\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00403960\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00404556\nTEST R8B,R8B\nJNZ 0x00404556\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00404556\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00404549\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00404540\nCMP R12,RSI\nJNC 0x0040450d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040450d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x004044c8\nTEST RSI,RSI\nJZ 0x00404579\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x406eff\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x00403b1c\nCALL 0x00401770\n'
p781
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 b2 de ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 30 72 40 00\nbf 54 77 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 56 77 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 f3 dd ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 ff 6e 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 56 77 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 56 77 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 ff 6e 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 53 dc ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 88 72 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 a7 dc ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 97 dc ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 21 d7 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 f3 d6 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 59 d9 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 22 d9 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 ff 6e 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 d6 d1 ff ff\n'
p782
S'.text:0000000000403960\n.text:0000000000403961\n.text:0000000000403963\n.text:0000000000403965\n.text:0000000000403967\n.text:0000000000403969\n.text:000000000040396a\n.text:0000000000403971\n.text:0000000000403974\n.text:0000000000403977\n.text:000000000040397a\n.text:000000000040397f\n.text:0000000000403984\n.text:0000000000403989\n.text:000000000040398e\n.text:0000000000403996\n.text:000000000040399a\n.text:00000000004039a0\n.text:00000000004039a8\n.text:00000000004039ad\n.text:00000000004039b5\n.text:00000000004039ba\n.text:00000000004039be\n.text:00000000004039c0\n.text:00000000004039c3\n.text:00000000004039c6\n.text:00000000004039c9\n.text:00000000004039ce\n.text:00000000004039d1\n.text:00000000004039d4\n.text:00000000004039d7\n.text:00000000004039da\n.text:00000000004039dc\n.text:00000000004039df\n.text:00000000004039e4\n.text:00000000004039e7\n.text:00000000004039ec\n.text:00000000004039f3\n.text:00000000004039f8\n.text:00000000004039fb\n.text:0000000000403a00\n.text:0000000000403a05\n.text:0000000000403a0a\n.text:0000000000403a0d\n.text:0000000000403a12\n.text:0000000000403a17\n.text:0000000000403a1c\n.text:0000000000403a1e\n.text:0000000000403a20\n.text:0000000000403a25\n.text:0000000000403a27\n.text:0000000000403a2a\n.text:0000000000403a2c\n.text:0000000000403a2e\n.text:0000000000403a30\n.text:0000000000403a33\n.text:0000000000403a35\n.text:0000000000403a3a\n.text:0000000000403a3e\n.text:0000000000403a44\n.text:0000000000403a47\n.text:0000000000403a49\n.text:0000000000403a4b\n.text:0000000000403a4d\n.text:0000000000403a50\n.text:0000000000403a55\n.text:0000000000403a58\n.text:0000000000403a5d\n.text:0000000000403a62\n.text:0000000000403a65\n.text:0000000000403a68\n.text:0000000000403a6b\n.text:0000000000403a6e\n.text:0000000000403a73\n.text:0000000000403a76\n.text:0000000000403a79\n.text:0000000000403a7e\n.text:0000000000403a81\n.text:0000000000403a83\n.text:0000000000403a86\n.text:0000000000403a88\n.text:0000000000403a8a\n.text:0000000000403a8d\n.text:0000000000403a92\n.text:0000000000403a97\n.text:0000000000403a9c\n.text:0000000000403a9f\n.text:0000000000403aa5\n.text:0000000000403aa7\n.text:0000000000403aaa\n.text:0000000000403aad\n.text:0000000000403ab0\n.text:0000000000403ab2\n.text:0000000000403ab4\n.text:0000000000403ab7\n.text:0000000000403aba\n.text:0000000000403abf\n.text:0000000000403ac2\n.text:0000000000403ac4\n.text:0000000000403ac7\n.text:0000000000403ac9\n.text:0000000000403ace\n.text:0000000000403ad1\n.text:0000000000403ad6\n.text:0000000000403adc\n.text:0000000000403ae2\n.text:0000000000403ae4\n.text:0000000000403ae9\n.text:0000000000403aef\n.text:0000000000403af2\n.text:0000000000403af5\n.text:0000000000403af8\n.text:0000000000403afa\n.text:0000000000403aff\n.text:0000000000403b02\n.text:0000000000403b08\n.text:0000000000403b0d\n.text:0000000000403b13\n.text:0000000000403b16\n.text:0000000000403b19\n.text:0000000000403b1c\n.text:0000000000403b24\n.text:0000000000403b26\n.text:0000000000403b28\n.text:0000000000403b2b\n.text:0000000000403b2f\n.text:0000000000403b31\n.text:0000000000403b34\n.text:0000000000403b38\n.text:0000000000403b3a\n.text:0000000000403b3d\n.text:0000000000403b40\n.text:0000000000403b43\n.text:0000000000403b45\n.text:0000000000403b49\n.text:0000000000403b4b\n.text:0000000000403b4f\n.text:0000000000403b52\n.text:0000000000403b55\n.text:0000000000403b58\n.text:0000000000403b5a\n.text:0000000000403b5e\n.text:0000000000403b67\n.text:0000000000403b6a\n.text:0000000000403b6c\n.text:0000000000403b70\n.text:0000000000403b72\n.text:0000000000403b76\n.text:0000000000403b78\n.text:0000000000403b7b\n.text:0000000000403b7f\n.text:0000000000403b81\n.text:0000000000403b84\n.text:0000000000403b88\n.text:0000000000403b8d\n.text:0000000000403b90\n.text:0000000000403b94\n.text:0000000000403b9c\n.text:0000000000403b9f\n.text:0000000000403ba2\n.text:0000000000403ba4\n.text:0000000000403ba8\n.text:0000000000403bab\n.text:0000000000403bad\n.text:0000000000403bb2\n.text:0000000000403bb6\n.text:0000000000403bbb\n.text:0000000000403bc0\n.text:0000000000403bc4\n.text:0000000000403bca\n.text:0000000000403bd0\n.text:0000000000403bd5\n.text:0000000000403bdb\n.text:0000000000403be0\n.text:0000000000403be2\n.text:0000000000403be7\n.text:0000000000403beb\n.text:0000000000403bed\n.text:0000000000403bf1\n.text:0000000000403bf3\n.text:0000000000403bf5\n.text:0000000000403bf8\n.text:0000000000403bfd\n.text:0000000000403bff\n.text:0000000000403c04\n.text:0000000000403c09\n.text:0000000000403c0d\n.text:0000000000403c12\n.text:0000000000403c17\n.text:0000000000403c1a\n.text:0000000000403c1d\n.text:0000000000403c1f\n.text:0000000000403c21\n.text:0000000000403c26\n.text:0000000000403c2a\n.text:0000000000403c30\n.text:0000000000403c32\n.text:0000000000403c34\n.text:0000000000403c36\n.text:0000000000403c3e\n.text:0000000000403c43\n.text:0000000000403c49\n.text:0000000000403c4b\n.text:0000000000403c50\n.text:0000000000403c56\n.text:0000000000403c5f\n.text:0000000000403c65\n.text:0000000000403c70\n.text:0000000000403c72\n.text:0000000000403c75\n.text:0000000000403c79\n.text:0000000000403c81\n.text:0000000000403c84\n.text:0000000000403c89\n.text:0000000000403c8b\n.text:0000000000403c8e\n.text:0000000000403c90\n.text:0000000000403c95\n.text:0000000000403c98\n.text:0000000000403c9d\n.text:0000000000403ca0\n.text:0000000000403ca5\n.text:0000000000403ca9\n.text:0000000000403cae\n.text:0000000000403cb0\n.text:0000000000403cb2\n.text:0000000000403cb8\n.text:0000000000403cbd\n.text:0000000000403cc2\n.text:0000000000403cc5\n.text:0000000000403cca\n.text:0000000000403cce\n.text:0000000000403cd3\n.text:0000000000403cd8\n.text:0000000000403cda\n.text:0000000000403cdc\n.text:0000000000403ce1\n.text:0000000000403ce3\n.text:0000000000403ce6\n.text:0000000000403cec\n.text:0000000000403cef\n.text:0000000000403cf5\n.text:0000000000403cf8\n.text:0000000000403cfe\n.text:0000000000403d03\n.text:0000000000403d07\n.text:0000000000403d0d\n.text:0000000000403d10\n.text:0000000000403d13\n.text:0000000000403d17\n.text:0000000000403d1a\n.text:0000000000403d1c\n.text:0000000000403d1f\n.text:0000000000403d25\n.text:0000000000403d2a\n.text:0000000000403d2f\n.text:0000000000403d35\n.text:0000000000403d38\n.text:0000000000403d3e\n.text:0000000000403d41\n.text:0000000000403d43\n.text:0000000000403d45\n.text:0000000000403d47\n.text:0000000000403d49\n.text:0000000000403d4c\n.text:0000000000403d4e\n.text:0000000000403d53\n.text:0000000000403d58\n.text:0000000000403d5b\n.text:0000000000403d5d\n.text:0000000000403d62\n.text:0000000000403d67\n.text:0000000000403d6a\n.text:0000000000403d6c\n.text:0000000000403d71\n.text:0000000000403d75\n.text:0000000000403d78\n.text:0000000000403d7b\n.text:0000000000403d7d\n.text:0000000000403d82\n.text:0000000000403d87\n.text:0000000000403d89\n.text:0000000000403d8c\n.text:0000000000403d8f\n.text:0000000000403d95\n.text:0000000000403d99\n.text:0000000000403d9c\n.text:0000000000403da2\n.text:0000000000403da6\n.text:0000000000403da9\n.text:0000000000403dac\n.text:0000000000403db2\n.text:0000000000403db5\n.text:0000000000403db7\n.text:0000000000403dbc\n.text:0000000000403dc1\n.text:0000000000403dc4\n.text:0000000000403dc6\n.text:0000000000403dcb\n.text:0000000000403dcf\n.text:0000000000403dd4\n.text:0000000000403dda\n.text:0000000000403ddf\n.text:0000000000403de1\n.text:0000000000403de6\n.text:0000000000403dec\n.text:0000000000403dee\n.text:0000000000403df0\n.text:0000000000403df2\n.text:0000000000403df4\n.text:0000000000403df9\n.text:0000000000403dff\n.text:0000000000403e01\n.text:0000000000403e03\n.text:0000000000403e08\n.text:0000000000403e0e\n.text:0000000000403e10\n.text:0000000000403e12\n.text:0000000000403e17\n.text:0000000000403e19\n.text:0000000000403e1f\n.text:0000000000403e24\n.text:0000000000403e2a\n.text:0000000000403e2d\n.text:0000000000403e30\n.text:0000000000403e36\n.text:0000000000403e3b\n.text:0000000000403e3e\n.text:0000000000403e41\n.text:0000000000403e47\n.text:0000000000403e4a\n.text:0000000000403e50\n.text:0000000000403e53\n.text:0000000000403e55\n.text:0000000000403e5a\n.text:0000000000403e5f\n.text:0000000000403e62\n.text:0000000000403e64\n.text:0000000000403e69\n.text:0000000000403e6e\n.text:0000000000403e71\n.text:0000000000403e73\n.text:0000000000403e78\n.text:0000000000403e7c\n.text:0000000000403e7e\n.text:0000000000403e83\n.text:0000000000403e86\n.text:0000000000403e89\n.text:0000000000403e8f\n.text:0000000000403e92\n.text:0000000000403e98\n.text:0000000000403e9b\n.text:0000000000403ea1\n.text:0000000000403ea6\n.text:0000000000403ea9\n.text:0000000000403eaf\n.text:0000000000403eb2\n.text:0000000000403eb8\n.text:0000000000403ebb\n.text:0000000000403ebd\n.text:0000000000403ec1\n.text:0000000000403ec7\n.text:0000000000403ecc\n.text:0000000000403ed0\n.text:0000000000403ed9\n.text:0000000000403edf\n.text:0000000000403ee4\n.text:0000000000403ee9\n.text:0000000000403eee\n.text:0000000000403ef1\n.text:0000000000403ef6\n.text:0000000000403ef9\n.text:0000000000403efc\n.text:0000000000403f01\n.text:0000000000403f06\n.text:0000000000403f0a\n.text:0000000000403f0f\n.text:0000000000403f14\n.text:0000000000403f18\n.text:0000000000403f1a\n.text:0000000000403f1f\n.text:0000000000403f25\n.text:0000000000403f28\n.text:0000000000403f2a\n.text:0000000000403f2d\n.text:0000000000403f30\n.text:0000000000403f36\n.text:0000000000403f3b\n.text:0000000000403f3e\n.text:0000000000403f41\n.text:0000000000403f44\n.text:0000000000403f47\n.text:0000000000403f49\n.text:0000000000403f4d\n.text:0000000000403f4f\n.text:0000000000403f54\n.text:0000000000403f59\n.text:0000000000403f5f\n.text:0000000000403f70\n.text:0000000000403f75\n.text:0000000000403f77\n.text:0000000000403f7a\n.text:0000000000403f7c\n.text:0000000000403f7f\n.text:0000000000403f81\n.text:0000000000403f84\n.text:0000000000403f86\n.text:0000000000403f8b\n.text:0000000000403f90\n.text:0000000000403f93\n.text:0000000000403f95\n.text:0000000000403f9a\n.text:0000000000403f9e\n.text:0000000000403fa6\n.text:0000000000403fa9\n.text:0000000000403fac\n.text:0000000000403fae\n.text:0000000000403fb2\n.text:0000000000403fc0\n.text:0000000000403fc4\n.text:0000000000403fca\n.text:0000000000403fcd\n.text:0000000000403fcf\n.text:0000000000403fd4\n.text:0000000000403fd7\n.text:0000000000403fd9\n.text:0000000000403fe0\n.text:0000000000403fe3\n.text:0000000000403fe8\n.text:0000000000403feb\n.text:0000000000403ff0\n.text:0000000000403ff2\n.text:0000000000403ff5\n.text:0000000000403ffb\n.text:0000000000403ffe\n.text:0000000000404000\n.text:0000000000404004\n.text:0000000000404006\n.text:0000000000404008\n.text:000000000040400b\n.text:000000000040400d\n.text:0000000000404012\n.text:0000000000404017\n.text:000000000040401a\n.text:000000000040401c\n.text:0000000000404021\n.text:0000000000404026\n.text:0000000000404029\n.text:000000000040402b\n.text:0000000000404030\n.text:0000000000404034\n.text:0000000000404036\n.text:000000000040403a\n.text:000000000040403d\n.text:000000000040403f\n.text:0000000000404044\n.text:0000000000404049\n.text:000000000040404c\n.text:000000000040404e\n.text:0000000000404051\n.text:0000000000404054\n.text:0000000000404057\n.text:000000000040405b\n.text:0000000000404060\n.text:0000000000404063\n.text:0000000000404065\n.text:0000000000404068\n.text:000000000040406b\n.text:000000000040406e\n.text:0000000000404071\n.text:0000000000404075\n.text:0000000000404079\n.text:000000000040407d\n.text:0000000000404081\n.text:0000000000404083\n.text:0000000000404087\n.text:000000000040408a\n.text:0000000000404090\n.text:0000000000404094\n.text:0000000000404098\n.text:000000000040409e\n.text:00000000004040a3\n.text:00000000004040a6\n.text:00000000004040a9\n.text:00000000004040ae\n.text:00000000004040b1\n.text:00000000004040b3\n.text:00000000004040b6\n.text:00000000004040bd\n.text:00000000004040c3\n.text:00000000004040c5\n.text:00000000004040c9\n.text:00000000004040cf\n.text:00000000004040d4\n.text:00000000004040d9\n.text:00000000004040df\n.text:00000000004040e2\n.text:00000000004040e4\n.text:00000000004040e9\n.text:00000000004040ef\n.text:00000000004040f4\n.text:00000000004040f6\n.text:00000000004040fb\n.text:0000000000404101\n.text:0000000000404103\n.text:0000000000404106\n.text:000000000040410a\n.text:0000000000404110\n.text:0000000000404115\n.text:0000000000404121\n.text:0000000000404125\n.text:0000000000404127\n.text:000000000040412a\n.text:000000000040412f\n.text:0000000000404134\n.text:0000000000404137\n.text:000000000040413b\n.text:0000000000404140\n.text:0000000000404142\n.text:0000000000404146\n.text:0000000000404148\n.text:0000000000404150\n.text:0000000000404155\n.text:000000000040415a\n.text:000000000040415e\n.text:0000000000404162\n.text:000000000040416a\n.text:000000000040416d\n.text:0000000000404172\n.text:0000000000404175\n.text:0000000000404178\n.text:000000000040417d\n.text:0000000000404180\n.text:0000000000404183\n.text:0000000000404189\n.text:000000000040418d\n.text:0000000000404197\n.text:000000000040419d\n.text:00000000004041a1\n.text:00000000004041a6\n.text:00000000004041ac\n.text:00000000004041b0\n.text:00000000004041b3\n.text:00000000004041b7\n.text:00000000004041b9\n.text:00000000004041be\n.text:00000000004041c3\n.text:00000000004041c7\n.text:00000000004041c9\n.text:00000000004041ce\n.text:00000000004041d3\n.text:00000000004041d7\n.text:00000000004041dc\n.text:00000000004041e0\n.text:00000000004041e4\n.text:00000000004041e7\n.text:00000000004041ea\n.text:00000000004041ec\n.text:00000000004041f0\n.text:00000000004041f6\n.text:00000000004041f9\n.text:00000000004041fc\n.text:00000000004041fe\n.text:0000000000404202\n.text:0000000000404207\n.text:0000000000404209\n.text:000000000040420b\n.text:0000000000404213\n.text:0000000000404218\n.text:000000000040421b\n.text:0000000000404223\n.text:0000000000404226\n.text:0000000000404229\n.text:000000000040422e\n.text:0000000000404231\n.text:0000000000404233\n.text:0000000000404238\n.text:000000000040423d\n.text:0000000000404243\n.text:0000000000404248\n.text:000000000040424b\n.text:0000000000404250\n.text:0000000000404256\n.text:000000000040425b\n.text:0000000000404260\n.text:0000000000404266\n.text:000000000040426a\n.text:000000000040426d\n.text:0000000000404273\n.text:0000000000404279\n.text:000000000040427f\n.text:0000000000404284\n.text:0000000000404286\n.text:0000000000404289\n.text:000000000040428f\n.text:0000000000404293\n.text:0000000000404295\n.text:000000000040429f\n.text:00000000004042a3\n.text:00000000004042a9\n.text:00000000004042ac\n.text:00000000004042ae\n.text:00000000004042b4\n.text:00000000004042b7\n.text:00000000004042b9\n.text:00000000004042be\n.text:00000000004042c3\n.text:00000000004042c6\n.text:00000000004042ca\n.text:00000000004042cc\n.text:00000000004042d1\n.text:00000000004042d6\n.text:00000000004042d9\n.text:00000000004042db\n.text:00000000004042e0\n.text:00000000004042e5\n.text:00000000004042e8\n.text:00000000004042ea\n.text:00000000004042ef\n.text:00000000004042f3\n.text:00000000004042f5\n.text:00000000004042f8\n.text:00000000004042fb\n.text:0000000000404300\n.text:0000000000404306\n.text:0000000000404308\n.text:000000000040430d\n.text:0000000000404312\n.text:0000000000404318\n.text:0000000000404320\n.text:0000000000404325\n.text:0000000000404327\n.text:000000000040432c\n.text:000000000040432f\n.text:0000000000404331\n.text:0000000000404334\n.text:0000000000404336\n.text:0000000000404339\n.text:000000000040433c\n.text:000000000040433f\n.text:0000000000404341\n.text:0000000000404349\n.text:000000000040434c\n.text:000000000040434e\n.text:0000000000404350\n.text:0000000000404360\n.text:0000000000404363\n.text:0000000000404365\n.text:0000000000404368\n.text:000000000040436e\n.text:0000000000404371\n.text:0000000000404373\n.text:0000000000404375\n.text:0000000000404377\n.text:0000000000404379\n.text:000000000040437c\n.text:000000000040437e\n.text:0000000000404383\n.text:0000000000404388\n.text:000000000040438b\n.text:000000000040438d\n.text:0000000000404392\n.text:0000000000404397\n.text:000000000040439a\n.text:000000000040439c\n.text:00000000004043a1\n.text:00000000004043a5\n.text:00000000004043a8\n.text:00000000004043ab\n.text:00000000004043ad\n.text:00000000004043b2\n.text:00000000004043b5\n.text:00000000004043b8\n.text:00000000004043ba\n.text:00000000004043c0\n.text:00000000004043c4\n.text:00000000004043c6\n.text:00000000004043c8\n.text:00000000004043ca\n.text:00000000004043cd\n.text:00000000004043cf\n.text:00000000004043d4\n.text:00000000004043d9\n.text:00000000004043dc\n.text:00000000004043de\n.text:00000000004043e3\n.text:00000000004043e7\n.text:00000000004043e9\n.text:00000000004043ec\n.text:00000000004043ee\n.text:00000000004043f2\n.text:00000000004043f5\n.text:00000000004043f8\n.text:00000000004043fc\n.text:0000000000404402\n.text:0000000000404407\n.text:000000000040440f\n.text:0000000000404414\n.text:0000000000404416\n.text:000000000040441e\n.text:0000000000404423\n.text:0000000000404425\n.text:000000000040442a\n.text:000000000040442f\n.text:0000000000404433\n.text:0000000000404435\n.text:000000000040443a\n.text:000000000040443d\n.text:0000000000404440\n.text:0000000000404442\n.text:000000000040444a\n.text:000000000040444c\n.text:0000000000404454\n.text:0000000000404459\n.text:000000000040445d\n.text:0000000000404462\n.text:0000000000404467\n.text:000000000040446b\n.text:0000000000404470\n.text:0000000000404475\n.text:0000000000404479\n.text:000000000040447d\n.text:0000000000404483\n.text:0000000000404488\n.text:0000000000404490\n.text:0000000000404492\n.text:0000000000404494\n.text:0000000000404498\n.text:000000000040449d\n.text:00000000004044a3\n.text:00000000004044b0\n.text:00000000004044b3\n.text:00000000004044b9\n.text:00000000004044bc\n.text:00000000004044be\n.text:00000000004044c1\n.text:00000000004044c3\n.text:00000000004044c6\n.text:00000000004044c8\n.text:00000000004044d0\n.text:00000000004044d6\n.text:00000000004044da\n.text:00000000004044dd\n.text:00000000004044e1\n.text:00000000004044e6\n.text:00000000004044ea\n.text:00000000004044ee\n.text:00000000004044f1\n.text:00000000004044f4\n.text:00000000004044f7\n.text:00000000004044fb\n.text:00000000004044ff\n.text:0000000000404501\n.text:0000000000404506\n.text:000000000040450a\n.text:000000000040450d\n.text:0000000000404510\n.text:0000000000404517\n.text:0000000000404518\n.text:000000000040451a\n.text:000000000040451c\n.text:000000000040451e\n.text:0000000000404520\n.text:0000000000404521\n.text:0000000000404522\n.text:000000000040452a\n.text:000000000040452d\n.text:000000000040452f\n.text:0000000000404532\n.text:0000000000404534\n.text:0000000000404536\n.text:0000000000404538\n.text:000000000040453a\n.text:000000000040453d\n.text:0000000000404540\n.text:0000000000404543\n.text:0000000000404545\n.text:0000000000404549\n.text:000000000040454c\n.text:000000000040454f\n.text:0000000000404552\n.text:0000000000404554\n.text:0000000000404556\n.text:0000000000404559\n.text:000000000040455b\n.text:0000000000404560\n.text:0000000000404562\n.text:0000000000404567\n.text:000000000040456c\n.text:000000000040456f\n.text:0000000000404571\n.text:0000000000404576\n.text:0000000000404579\n.text:000000000040457e\n.text:0000000000404581\n.text:0000000000404587\n.text:000000000040458d\n.text:0000000000404590\n.text:0000000000404595\n'
p783
tp784
sS'set_quoting_style'
p785
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p786
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p787
S'TEST RDI,RDI\nMOV EAX,0x60a370\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p788
S'48 85 ff\nb8 70 a3 60 00\n48 0f 45 c7\n89 30\nc3\n'
p789
S'.text:0000000000403840\n.text:0000000000403843\n.text:0000000000403848\n.text:000000000040384c\n.text:000000000040384e\n'
p790
tp791
sS'textdomain'
p792
(S'\n__stdcall textdomain()\n'
p793
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060a070)();\u000a  return;\u000a}\u000a\u000a
p794
S'JMP qword ptr [0x0060a070]\n'
p795
S'ff 25 6a 88 20 00\n'
p796
S'.plt:0000000000401800\n'
p797
tp798
sS'xmemdup'
p799
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p800
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p801
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00405920\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401990\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p802
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 0c bf ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p803
S'.text:0000000000405a60\n.text:0000000000405a62\n.text:0000000000405a64\n.text:0000000000405a65\n.text:0000000000405a68\n.text:0000000000405a6b\n.text:0000000000405a6e\n.text:0000000000405a73\n.text:0000000000405a76\n.text:0000000000405a79\n.text:0000000000405a7c\n.text:0000000000405a7f\n.text:0000000000405a84\n.text:0000000000405a87\n.text:0000000000405a88\n.text:0000000000405a8a\n.text:0000000000405a8c\n'
p804
tp805
sS'argv_iter_init_argv'
p806
(S'\n__stdcall argv_iter_init_argv(char * * argv)\n'
p807
V\u000aargv_iterator * argv_iter_init_argv(char **argv)\u000a\u000a{\u000a  argv_iterator *paVar1;\u000a  \u000a  paVar1 = (argv_iterator *)malloc(0x30);\u000a  if (paVar1 != (argv_iterator *)0x0) {\u000a    paVar1->fp = (FILE *)0x0;\u000a    paVar1->arg_list = argv;\u000a    paVar1->p = argv;\u000a    return paVar1;\u000a  }\u000a  return (argv_iterator *)0x0;\u000a}\u000a\u000a
p808
S'PUSH RBX\nMOV RBX,RDI\nMOV EDI,0x30\nCALL 0x004019e0\nTEST RAX,RAX\nJZ 0x00403304\nMOV qword ptr [RAX],0x0\nMOV qword ptr [RAX + 0x20],RBX\nMOV qword ptr [RAX + 0x28],RBX\nPOP RBX\nRET\nXOR EAX,EAX\nPOP RBX\nRET\n'
p809
S'53\n48 89 fb\nbf 30 00 00 00\ne8 f2 e6 ff ff\n48 85 c0\n74 11\n48 c7 00 00 00 00 00\n48 89 58 20\n48 89 58 28\n5b\nc3\n31 c0\n5b\nc3\n'
p810
S'.text:00000000004032e0\n.text:00000000004032e1\n.text:00000000004032e4\n.text:00000000004032e9\n.text:00000000004032ee\n.text:00000000004032f1\n.text:00000000004032f3\n.text:00000000004032fa\n.text:00000000004032fe\n.text:0000000000403302\n.text:0000000000403303\n.text:0000000000403304\n.text:0000000000403306\n.text:0000000000403307\n'
p811
tp812
sS'get_quoting_style'
p813
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p814
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p815
S'TEST RDI,RDI\nMOV EAX,0x60a370\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p816
S'48 85 ff\nb8 70 a3 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p817
S'.text:0000000000403830\n.text:0000000000403833\n.text:0000000000403838\n.text:000000000040383c\n.text:000000000040383e\n'
p818
tp819
sS'ferror_unlocked'
p820
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p821
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060a118)();\u000a  return iVar1;\u000a}\u000a\u000a
p822
S'JMP qword ptr [0x0060a118]\n'
p823
S'ff 25 c2 87 20 00\n'
p824
S'.plt:0000000000401950\n'
p825
tp826
sS'exit'
p827
(S'\n__stdcall exit(int __status)\n'
p828
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060a200)();\u000a  return;\u000a}\u000a\u000a
p829
S'JMP qword ptr [0x0060a200]\n'
p830
S'ff 25 da 86 20 00\n'
p831
S'.plt:0000000000401b20\n'
p832
tp833
sS'locale_charset'
p834
(S'\n__stdcall locale_charset()\n'
p835
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_004061cd:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_004061cd;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p836
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401a00\nTEST RAX,RAX\nMOV R14D,0x4078a9\nCMOVNZ R14,RAX\nCALL 0x004061e0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x004061a5\nJMP 0x004061cd\nMOV RDI,RBX\nCALL 0x00401850\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401850\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x004061cd\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401970\nTEST EAX,EAX\nJZ 0x004061c0\nCMP BPL,0x2a\nJNZ 0x00406180\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00406180\nMOV RDI,RBX\nCALL 0x00401850\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x407f08\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p837
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 a2 b8 ff ff\n48 85 c0\n41 be a9 78 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 c8 b6 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 ba b6 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 c0 b7 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 88 b6 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 08 7f 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p838
S'.text:0000000000406150\n.text:0000000000406151\n.text:0000000000406153\n.text:0000000000406154\n.text:0000000000406159\n.text:000000000040615e\n.text:0000000000406161\n.text:0000000000406167\n.text:000000000040616b\n.text:0000000000406170\n.text:0000000000406173\n.text:0000000000406176\n.text:0000000000406179\n.text:000000000040617b\n.text:0000000000406180\n.text:0000000000406183\n.text:0000000000406188\n.text:000000000040618c\n.text:0000000000406191\n.text:0000000000406196\n.text:000000000040619b\n.text:00000000004061a0\n.text:00000000004061a3\n.text:00000000004061a5\n.text:00000000004061a8\n.text:00000000004061ab\n.text:00000000004061b0\n.text:00000000004061b2\n.text:00000000004061b4\n.text:00000000004061b8\n.text:00000000004061ba\n.text:00000000004061be\n.text:00000000004061c0\n.text:00000000004061c3\n.text:00000000004061c8\n.text:00000000004061cd\n.text:00000000004061d1\n.text:00000000004061d6\n.text:00000000004061da\n.text:00000000004061db\n.text:00000000004061dd\n.text:00000000004061de\n'
p839
tp840
sS'set_program_name'
p841
(S'\n__stdcall set_program_name(char * argv0)\n'
p842
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p843
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004037c1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401890\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x004037ab\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x407218\nMOV EDX,0x7\nCALL 0x00401790\nTEST EAX,EAX\nJNZ 0x004037ab\nMOV ESI,0x407220\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401790\nTEST EAX,EAX\nJNZ 0x004037a8\nADD R14,0x3\nMOV qword ptr [0x0060a2c0],R14\nMOV RBX,R14\nMOV qword ptr [0x0060a360],RBX\nMOV qword ptr [0x0060a2e8],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060a300]\nMOV EDI,0x4071e0\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401b30\nCALL 0x00401770\n'
p844
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 37 e1 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 18 72 40 00\nba 07 00 00 00\ne8 0d e0 ff ff\n85 c0\n75 24\nbe 20 72 40 00\nba 03 00 00 00\n4c 89 f7\ne8 f7 df ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 18 6b 20 00\n4c 89 f3\n48 89 1d ae 6b 20 00\n48 89 1d 2f 6b 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 38 6b 20 00\nbf e0 71 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 54 e3 ff ff\ne8 8f df ff ff\n'
p845
S'.text:0000000000403740\n.text:0000000000403742\n.text:0000000000403743\n.text:0000000000403744\n.text:0000000000403747\n.text:000000000040374a\n.text:000000000040374c\n.text:0000000000403751\n.text:0000000000403754\n.text:0000000000403759\n.text:000000000040375c\n.text:0000000000403760\n.text:0000000000403764\n.text:0000000000403767\n.text:000000000040376a\n.text:000000000040376e\n.text:0000000000403770\n.text:0000000000403774\n.text:0000000000403779\n.text:000000000040377e\n.text:0000000000403783\n.text:0000000000403785\n.text:0000000000403787\n.text:000000000040378c\n.text:0000000000403791\n.text:0000000000403794\n.text:0000000000403799\n.text:000000000040379b\n.text:000000000040379d\n.text:00000000004037a1\n.text:00000000004037a8\n.text:00000000004037ab\n.text:00000000004037b2\n.text:00000000004037b9\n.text:00000000004037bd\n.text:00000000004037be\n.text:00000000004037c0\n.text:00000000004037c1\n.text:00000000004037c8\n.text:00000000004037cd\n.text:00000000004037d2\n.text:00000000004037d7\n.text:00000000004037dc\n'
p846
tp847
sS'quotearg_buffer'
p848
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p849
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p850
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60a370\nCMOVNZ RBP,R8\nCALL 0x00401780\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00403960\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p851
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 70 a3 60 00\n49 0f 45 e8\ne8 78 de ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p852
S'.text:00000000004038e0\n.text:00000000004038e1\n.text:00000000004038e3\n.text:00000000004038e5\n.text:00000000004038e7\n.text:00000000004038e9\n.text:00000000004038ea\n.text:00000000004038eb\n.text:00000000004038ee\n.text:00000000004038f1\n.text:00000000004038f4\n.text:00000000004038f7\n.text:00000000004038fa\n.text:00000000004038ff\n.text:0000000000403903\n.text:0000000000403908\n.text:000000000040390b\n.text:000000000040390d\n.text:0000000000403911\n.text:0000000000403915\n.text:0000000000403919\n.text:000000000040391d\n.text:0000000000403920\n.text:0000000000403923\n.text:0000000000403926\n.text:0000000000403929\n.text:000000000040392c\n.text:000000000040392f\n.text:0000000000403933\n.text:0000000000403934\n.text:0000000000403939\n.text:000000000040393d\n.text:0000000000403941\n.text:0000000000403943\n.text:0000000000403947\n.text:0000000000403948\n.text:000000000040394a\n.text:000000000040394c\n.text:000000000040394e\n.text:0000000000403950\n.text:0000000000403951\n'
p853
tp854
sS'quotearg_colon'
p855
(S'\n__stdcall quotearg_colon(char * arg)\n'
p856
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p857
S'MOV ESI,0x3a\nJMP 0x00404ac0\n'
p858
S'be 3a 00 00 00\neb e9\n'
p859
S'.text:0000000000404ad0\n.text:0000000000404ad5\n'
p860
tp861
sS'rpl_fflush'
p862
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p863
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060a168)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p864
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00405bcd\nMOV RDI,RBX\nCALL 0x00401a30\nTEST EAX,EAX\nJZ 0x00405bcd\nMOV RDI,RBX\nCALL 0x00405be0\nMOV RDI,RBX\nPOP RBX\nJMP 0x004019f0\n'
p865
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 6f be ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 1a be ff ff\n'
p866
S'.text:0000000000405bb0\n.text:0000000000405bb1\n.text:0000000000405bb4\n.text:0000000000405bb7\n.text:0000000000405bb9\n.text:0000000000405bbc\n.text:0000000000405bc1\n.text:0000000000405bc3\n.text:0000000000405bc5\n.text:0000000000405bc8\n.text:0000000000405bcd\n.text:0000000000405bd0\n.text:0000000000405bd1\n'
p867
tp868
sS'__assert_fail'
p869
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p870
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060a0c8)();\u000a  return;\u000a}\u000a\u000a
p871
S'JMP qword ptr [0x0060a0c8]\n'
p872
S'ff 25 12 88 20 00\n'
p873
S'.plt:00000000004018b0\n'
p874
tp875
sS'bindtextdomain'
p876
(S'\n__stdcall bindtextdomain()\n'
p877
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060a080)();\u000a  return;\u000a}\u000a\u000a
p878
S'JMP qword ptr [0x0060a080]\n'
p879
S'ff 25 5a 88 20 00\n'
p880
S'.plt:0000000000401820\n'
p881
tp882
sS'set_char_quoting'
p883
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p884
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p885
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60a370\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p886
S'89 f1\n48 85 ff\nbe 70 a3 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p887
S'.text:0000000000403850\n.text:0000000000403852\n.text:0000000000403855\n.text:000000000040385a\n.text:000000000040385e\n.text:0000000000403860\n.text:0000000000403863\n.text:0000000000403867\n.text:000000000040386c\n.text:000000000040386f\n.text:0000000000403871\n.text:0000000000403873\n.text:0000000000403876\n.text:0000000000403878\n.text:000000000040387b\n.text:000000000040387d\n.text:0000000000403880\n.text:0000000000403885\n'
p888
tp889
sS'quotearg_n'
p890
(S'\n__stdcall quotearg_n(char * arg)\n'
p891
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p892
S'MOV RDX,-0x1\nMOV ECX,0x60a370\nJMP 0x00404740\n'
p893
S'48 c7 c2 ff ff ff ff\nb9 70 a3 60 00\neb 02\n'
p894
S'.text:0000000000404730\n.text:0000000000404737\n.text:000000000040473c\n'
p895
tp896
sS'close_stream'
p897
(S'\n__stdcall close_stream(FILE * stream)\n'
p898
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p899
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004017c0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401950\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00405b30\nTEST EBP,EBP\nJZ 0x0040611b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040613f\nCALL 0x00401780\nMOV dword ptr [RAX],0x0\nJMP 0x0040613f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040613f\nTEST CL,CL\nJNZ 0x0040613f\nCALL 0x00401780\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p900
S'55\n41 56\n53\n48 89 fb\ne8 d4 b6 ff ff\n49 89 c6\n48 89 df\ne8 59 b8 ff ff\n89 c5\n48 89 df\ne8 2f fa ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 6d b6 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 4e b6 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p901
S'.text:00000000004060e0\n.text:00000000004060e1\n.text:00000000004060e3\n.text:00000000004060e4\n.text:00000000004060e7\n.text:00000000004060ec\n.text:00000000004060ef\n.text:00000000004060f2\n.text:00000000004060f7\n.text:00000000004060f9\n.text:00000000004060fc\n.text:0000000000406101\n.text:0000000000406103\n.text:0000000000406105\n.text:000000000040610a\n.text:000000000040610c\n.text:000000000040610e\n.text:0000000000406113\n.text:0000000000406119\n.text:000000000040611b\n.text:000000000040611d\n.text:0000000000406120\n.text:0000000000406122\n.text:0000000000406124\n.text:0000000000406127\n.text:0000000000406129\n.text:000000000040612b\n.text:000000000040612d\n.text:0000000000406132\n.text:0000000000406134\n.text:0000000000406137\n.text:000000000040613c\n.text:000000000040613f\n.text:0000000000406141\n.text:0000000000406142\n.text:0000000000406144\n.text:0000000000406145\n'
p902
tp903
sS'quotearg_colon_mem'
p904
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p905
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p906
S'MOV EDX,0x3a\nJMP 0x00404a50\n'
p907
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p908
S'.text:0000000000404ae0\n.text:0000000000404ae5\n'
p909
tp910
sS'xcalloc'
p911
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p912
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p913
S'PUSH RAX\nCALL 0x00405ae0\nTEST RAX,RAX\nJZ 0x00405a4d\nPOP RCX\nRET\nCALL 0x00405ab0\n'
p914
S'50\ne8 9a 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p915
S'.text:0000000000405a40\n.text:0000000000405a41\n.text:0000000000405a46\n.text:0000000000405a49\n.text:0000000000405a4b\n.text:0000000000405a4c\n.text:0000000000405a4d\n'
p916
tp917
sS'clear_ungetc_buffer_preserving_position'
p918
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p919
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p920
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405be7\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00405c00\n'
p921
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p922
S'.text:0000000000405be0\n.text:0000000000405be4\n.text:0000000000405be6\n.text:0000000000405be7\n.text:0000000000405be9\n.text:0000000000405bee\n'
p923
tp924
sS'xnmalloc'
p925
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p926
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p927
S'MOV RAX,RDI\nMUL RSI\nJO 0x00405911\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00405920\nPUSH RAX\nCALL 0x00405ab0\n'
p928
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p929
S'.text:0000000000405900\n.text:0000000000405903\n.text:0000000000405906\n.text:0000000000405908\n.text:000000000040590c\n.text:000000000040590f\n.text:0000000000405911\n.text:0000000000405912\n'
p930
tp931
sS'FUN_00401740'
p932
(S'\n__stdcall FUN_00401740()\n'
p933
V\u000avoid FUN_00401740(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060a010)();\u000a  return;\u000a}\u000a\u000a
p934
S'PUSH qword ptr [0x0060a008]\nJMP qword ptr [0x0060a010]\n'
p935
S'ff 35 c2 88 20 00\nff 25 c4 88 20 00\n'
p936
S'.plt:0000000000401740\n.plt:0000000000401746\n'
p937
tp938
sS'quotearg_char'
p939
(S'\n__stdcall quotearg_char(char * arg)\n'
p940
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p941
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00404a50\n'
p942
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p943
S'.text:0000000000404ac0\n.text:0000000000404ac2\n.text:0000000000404ac9\n.text:0000000000404acb\n'
p944
tp945
sS'malloc'
p946
(S'\n__stdcall malloc(size_t __size)\n'
p947
V\u000a/* WARNING: Switch with 1 destination removed at 0x004019e0 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p948
S'JMP qword ptr [0x0060a160]\n'
p949
S'ff 25 7a 87 20 00\n'
p950
S'.plt:00000000004019e0\n'
p951
tp952
sS'c_tolower'
p953
(S'\n__stdcall c_tolower()\n'
p954
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p955
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p956
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p957
S'.text:00000000004060c0\n.text:00000000004060c3\n.text:00000000004060c6\n.text:00000000004060c9\n.text:00000000004060cc\n'
p958
tp959
sS'getopt_long'
p960
(S'\n__stdcall getopt_long()\n'
p961
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060a0a0)();\u000a  return;\u000a}\u000a\u000a
p962
S'JMP qword ptr [0x0060a0a0]\n'
p963
S'ff 25 3a 88 20 00\n'
p964
S'.plt:0000000000401860\n'
p965
tp966
sS'quotearg_style'
p967
(S'\n__stdcall quotearg_style(char * arg)\n'
p968
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p969
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00404930\n'
p970
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p971
S'.text:0000000000404a10\n.text:0000000000404a13\n.text:0000000000404a15\n.text:0000000000404a17\n.text:0000000000404a19\n.text:0000000000404a1c\n'
p972
tp973
sS'emit_try_help'
p974
(S'\n__stdcall emit_try_help()\n'
p975
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p976
S'PUSH RBX\nMOV RBX,qword ptr [0x0060a300]\nXOR EDI,EDI\nMOV ESI,0x406f8f\nMOV EDX,0x5\nCALL 0x00401830\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060a360]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401b40\n'
p977
S'53\n48 8b 1d 68 85 20 00\n31 ff\nbe 8f 6f 40 00\nba 05 00 00 00\ne8 87 fa ff ff\n48 89 c2\n48 8b 0d ad 85 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 7d fd ff ff\n'
p978
S'.text:0000000000401d90\n.text:0000000000401d91\n.text:0000000000401d98\n.text:0000000000401d9a\n.text:0000000000401d9f\n.text:0000000000401da4\n.text:0000000000401da9\n.text:0000000000401dac\n.text:0000000000401db3\n.text:0000000000401db8\n.text:0000000000401dba\n.text:0000000000401dbd\n.text:0000000000401dbe\n'
p979
tp980
sS'mb_copy'
p981
(S'\n__stdcall mb_copy(mbchar_t * new_mbc, mbchar_t * old_mbc)\n'
p982
V\u000avoid mb_copy(mbchar_t *new_mbc,mbchar_t *old_mbc)\u000a\u000a{\u000a  _Bool _Var1;\u000a  char *__dest;\u000a  \u000a  __dest = old_mbc->ptr;\u000a  if (__dest == old_mbc->buf) {\u000a    __dest = new_mbc->buf;\u000a    memcpy(__dest,old_mbc->buf,old_mbc->bytes);\u000a  }\u000a  new_mbc->ptr = __dest;\u000a  new_mbc->bytes = old_mbc->bytes;\u000a  _Var1 = old_mbc->wc_valid;\u000a  new_mbc->wc_valid = _Var1;\u000a  if (_Var1 != false) {\u000a    new_mbc->wc = old_mbc->wc;\u000a  }\u000a  return;\u000a}\u000a\u000a
p983
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBX]\nLEA RSI,[RBX + 0x18]\nCMP R15,RSI\nJNZ 0x004035c7\nLEA R15,[R14 + 0x18]\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RDI,R15\nCALL 0x00401990\nMOV qword ptr [R14],R15\nMOV RAX,qword ptr [RBX + 0x8]\nMOV qword ptr [R14 + 0x8],RAX\nMOV AL,byte ptr [RBX + 0x10]\nTEST AL,AL\nMOV byte ptr [R14 + 0x10],AL\nJZ 0x004035e4\nMOV EAX,dword ptr [RBX + 0x14]\nMOV dword ptr [R14 + 0x14],EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p984
S'41 57\n41 56\n53\n48 89 f3\n49 89 fe\n4c 8b 3b\n48 8d 73 18\n49 39 f7\n75 10\n4d 8d 7e 18\n48 8b 53 08\n4c 89 ff\ne8 c9 e3 ff ff\n4d 89 3e\n48 8b 43 08\n49 89 46 08\n8a 43 10\n84 c0\n41 88 46 10\n74 07\n8b 43 14\n41 89 46 14\n5b\n41 5e\n41 5f\nc3\n'
p985
S'.text:00000000004035a0\n.text:00000000004035a2\n.text:00000000004035a4\n.text:00000000004035a5\n.text:00000000004035a8\n.text:00000000004035ab\n.text:00000000004035ae\n.text:00000000004035b2\n.text:00000000004035b5\n.text:00000000004035b7\n.text:00000000004035bb\n.text:00000000004035bf\n.text:00000000004035c2\n.text:00000000004035c7\n.text:00000000004035ca\n.text:00000000004035ce\n.text:00000000004035d2\n.text:00000000004035d5\n.text:00000000004035d7\n.text:00000000004035db\n.text:00000000004035dd\n.text:00000000004035e0\n.text:00000000004035e4\n.text:00000000004035e5\n.text:00000000004035e7\n.text:00000000004035e9\n'
p986
tp987
sS'strrchr'
p988
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p989
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060a0b8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p990
S'JMP qword ptr [0x0060a0b8]\n'
p991
S'ff 25 22 88 20 00\n'
p992
S'.plt:0000000000401890\n'
p993
tp994
sS'quotearg_alloc_mem'
p995
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p996
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p997
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60a370\nCMOVNZ R12,RCX\nCALL 0x00401780\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403960\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x004059f0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403960\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040468a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p998
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 70 a3 60 00\n4c 0f 45 e1\ne8 98 d1 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 b1 13 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p999
S'.text:00000000004045b0\n.text:00000000004045b1\n.text:00000000004045b3\n.text:00000000004045b5\n.text:00000000004045b7\n.text:00000000004045b9\n.text:00000000004045ba\n.text:00000000004045be\n.text:00000000004045c1\n.text:00000000004045c6\n.text:00000000004045c9\n.text:00000000004045ce\n.text:00000000004045d1\n.text:00000000004045d6\n.text:00000000004045d9\n.text:00000000004045df\n.text:00000000004045e3\n.text:00000000004045e8\n.text:00000000004045ed\n.text:00000000004045ef\n.text:00000000004045f3\n.text:00000000004045f5\n.text:00000000004045f8\n.text:00000000004045fc\n.text:0000000000404601\n.text:0000000000404605\n.text:000000000040460a\n.text:000000000040460e\n.text:0000000000404610\n.text:0000000000404612\n.text:0000000000404615\n.text:0000000000404618\n.text:000000000040461b\n.text:0000000000404620\n.text:0000000000404625\n.text:0000000000404627\n.text:000000000040462c\n.text:0000000000404630\n.text:0000000000404633\n.text:0000000000404637\n.text:000000000040463a\n.text:000000000040463f\n.text:0000000000404642\n.text:0000000000404646\n.text:000000000040464a\n.text:000000000040464d\n.text:0000000000404650\n.text:0000000000404655\n.text:000000000040465a\n.text:000000000040465d\n.text:0000000000404662\n.text:0000000000404667\n.text:0000000000404669\n.text:000000000040466e\n.text:0000000000404673\n.text:0000000000404677\n.text:000000000040467a\n.text:000000000040467e\n.text:0000000000404683\n.text:0000000000404685\n.text:0000000000404687\n.text:000000000040468a\n.text:000000000040468d\n.text:0000000000404691\n.text:0000000000404692\n.text:0000000000404694\n.text:0000000000404696\n.text:0000000000404698\n.text:000000000040469a\n.text:000000000040469b\n'
p1000
tp1001
sS'memchr'
p1002
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p1003
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_0060a0f8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x0060a0f8]\n'
p1005
S'ff 25 e2 87 20 00\n'
p1006
S'.plt:0000000000401910\n'
p1007
tp1008
sS'quotearg_style_mem'
p1009
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1010
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1011
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004049d0\n'
p1012
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1013
S'.text:0000000000404a30\n.text:0000000000404a33\n.text:0000000000404a36\n.text:0000000000404a38\n.text:0000000000404a3a\n.text:0000000000404a3c\n.text:0000000000404a3f\n.text:0000000000404a42\n'
p1014
tp1015
sS'xalloc_die'
p1016
(S'\n__stdcall xalloc_die()\n'
p1017
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x40717f,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1018
S'PUSH RBX\nMOV EBX,dword ptr [0x0060a250]\nXOR EDI,EDI\nMOV ESI,0x407adf\nMOV EDX,0x5\nCALL 0x00401830\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40717f\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401ab0\nCALL 0x00401770\n'
p1019
S'53\n8b 1d 99 47 20 00\n31 ff\nbe df 7a 40 00\nba 05 00 00 00\ne8 68 bd ff ff\n48 89 c1\n31 f6\nba 7f 71 40 00\n31 c0\n89 df\ne8 d5 bf ff ff\ne8 90 bc ff ff\n'
p1020
S'.text:0000000000405ab0\n.text:0000000000405ab1\n.text:0000000000405ab7\n.text:0000000000405ab9\n.text:0000000000405abe\n.text:0000000000405ac3\n.text:0000000000405ac8\n.text:0000000000405acb\n.text:0000000000405acd\n.text:0000000000405ad2\n.text:0000000000405ad4\n.text:0000000000405ad6\n.text:0000000000405adb\n'
p1021
tp1022
sS'quotearg_n_custom'
p1023
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1024
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1025
S'MOV R8,-0x1\nJMP 0x00404b50\n'
p1026
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1027
S'.text:0000000000404b40\n.text:0000000000404b47\n'
p1028
tp1029
sS'__freading'
p1030
(S'\n__stdcall __freading()\n'
p1031
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060a188)();\u000a  return;\u000a}\u000a\u000a
p1032
S'JMP qword ptr [0x0060a188]\n'
p1033
S'ff 25 52 87 20 00\n'
p1034
S'.plt:0000000000401a30\n'
p1035
tp1036
sS'iswcntrl'
p1037
(S'\n__stdcall iswcntrl(wint_t __wc)\n'
p1038
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswcntrl(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswcntrl_0060a068)();\u000a  return iVar1;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x0060a068]\n'
p1040
S'ff 25 72 88 20 00\n'
p1041
S'.plt:00000000004017f0\n'
p1042
tp1043
sS'main'
p1044
(S'\n__stdcall main(char * * argv)\n'
p1045
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint main(char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  bool bVar3;\u000a  uintmax_t linelength;\u000a  uintmax_t bytes;\u000a  uintmax_t chars;\u000a  uintmax_t words;\u000a  uintmax_t lines;\u000a  char *stdin_only [1];\u000a  _Bool _Var4;\u000a  byte bVar5;\u000a  int __fd;\u000a  uint *puVar6;\u000a  undefined8 uVar7;\u000a  argv_iterator *ai;\u000a  fstatus *fstatus;\u000a  char *file;\u000a  size_t sVar8;\u000a  char *__filename;\u000a  undefined8 uVar9;\u000a  undefined1 *puVar10;\u000a  int iVar11;\u000a  FILE *in;\u000a  char **in_RSI;\u000a  size_t sVar12;\u000a  double dVar13;\u000a  double dVar14;\u000a  stat st;\u000a  size_t local_200;\u000a  argv_iter_err local_1e0;\u000a  uint local_1c8;\u000a  long local_1b0;\u000a  Tokens local_150;\u000a  \u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x406e26);\u000a  textdomain(0x406e26);\u000a  atexit(close_stdout);\u000a  setvbuf((FILE *)stdout,(char *)0x0,1,0);\u000a  print_bytes = 0;\u000a  print_chars = 0;\u000a  print_words = 0;\u000a  print_lines = 0;\u000a  print_linelength = 0;\u000a  max_line_length = 0;\u000a  total_bytes = 0;\u000a  total_chars = 0;\u000a  total_words = 0;\u000a  total_lines = 0;\u000a  __filename = (char *)0x0;\u000a  while( true ) {\u000a    iVar11 = (int)((ulong)argv & 0xffffffff);\u000a    __fd = getopt_long((ulong)argv & 0xffffffff);\u000a    if (__fd < 0x4c) break;\u000a    puVar10 = &print_chars;\u000a    switch(__fd) {\u000a    case 0x4c:\u000a      puVar10 = &print_linelength;\u000a    case 0x6d:\u000a      *puVar10 = 1;\u000a      break;\u000a    default:\u000a      goto switchD_0040203d_caseD_4d;\u000a    case 99:\u000a      print_bytes = 1;\u000a      break;\u000a    case 0x6c:\u000a      print_lines = 1;\u000a      break;\u000a    case 0x77:\u000a      print_words = 1;\u000a      break;\u000a    case 0x80:\u000a      __filename = optarg;\u000a    }\u000a  }\u000a  if (__fd == -1) {\u000a    if ((((print_lines == 0) && (print_words == 0)) && (print_chars == 0)) &&\u000a       ((print_bytes == 0 && (print_linelength == 0)))) {\u000a      print_bytes = 1;\u000a      print_words = 1;\u000a      print_lines = 1;\u000a    }\u000a    if (__filename == (char *)0x0) {\u000a      __fd = iVar11 - optind;\u000a      local_150.tok = (char **)&ram0x0060a340;\u000a      if (__fd != 0 && optind <= iVar11) {\u000a        local_150.tok = in_RSI + (long)optind;\u000a      }\u000a      local_150.n_tok = 1;\u000a      if (__fd != 0 && optind <= iVar11) {\u000a        local_150.n_tok = (long)__fd;\u000a      }\u000a      ai = argv_iter_init_argv(local_150.tok);\u000a      bVar3 = false;\u000a    }\u000a    else {\u000a      if (optind < iVar11) {\u000a        uVar7 = dcgettext(0,"extra operand %s",5);\u000a        __filename = quotearg_style((char *)0x4);\u000a        error(0,0,uVar7,__filename);\u000a        uVar7 = stderr;\u000a        uVar9 = dcgettext(0,"file operands cannot be combined with --files0-from",5);\u000a        __fprintf_chk(uVar7,1,0x4077d0,uVar9);\u000a        usage(1);\u000a        goto LAB_0040269c;\u000a      }\u000a      if (((*__filename != '-') || (in = stdin, __filename[1] != 0)) &&\u000a         (in = (FILE *)fopen(__filename,"r"), in == (FILE *)0x0)) {\u000a        puVar6 = (uint *)__errno_location();\u000a        uVar1 = *puVar6;\u000a        uVar7 = dcgettext(0,"cannot open %s for reading",5);\u000a        quotearg_style((char *)0x4);\u000a        error(1,(ulong)uVar1,uVar7);\u000a        in = (FILE *)0x0;\u000a      }\u000a      __fd = fileno((FILE *)in);\u000a      __fd = fstat(__fd,&local_1e0);\u000a      if ((__fd == 0) && ((local_1c8 & 0xf000) == 0x8000)) {\u000a        dVar13 = physmem_available();\u000a        dVar14 = DAT_00406570;\u000a        if (dVar13 * _DAT_00406568 <= DAT_00406570) {\u000a          dVar14 = physmem_available();\u000a          dVar14 = dVar14 * _DAT_00406568;\u000a        }\u000a        if ((double)local_1b0 <= dVar14) {\u000a          readtokens0_init(&local_150);\u000a          _Var4 = readtokens0(in,&local_150);\u000a          if ((_Var4 == false) || (__fd = rpl_fclose(in), __fd != 0)) {\u000a            uVar7 = dcgettext(0,"cannot read file names from %s",5);\u000a            quotearg_style((char *)0x4);\u000a            error(1,0,uVar7);\u000a          }\u000a          ai = argv_iter_init_argv(local_150.tok);\u000a          bVar3 = true;\u000a          goto joined_r0x0040216c;\u000a        }\u000a      }\u000a      ai = argv_iter_init_stream(in);\u000a      bVar3 = false;\u000a      local_150.tok = (char **)0x0;\u000a      local_200 = 0;\u000a      local_150.n_tok = local_200;\u000a    }\u000ajoined_r0x0040216c:\u000a    if (ai == (argv_iterator *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die();\u000a    }\u000a    fstatus = get_input_fstatus(local_150.n_tok,local_150.tok);\u000a    number_width = compute_number_width(local_150.n_tok,fstatus);\u000a    file = argv_iter(ai,(argv_iter_err *)&local_1e0);\u000a    bVar5 = 1;\u000a    if (file != (char *)0x0) {\u000a      sVar12 = 0;\u000a      do {\u000a        if (((__filename == (char *)0x0) || (*__filename != '-')) || (__filename[1] != 0)) {\u000aLAB_00402272:\u000a          bVar2 = false;\u000aLAB_00402274:\u000a          if (*file != 0) goto LAB_00402280;\u000aLAB_00402330:\u000a          if (__filename == (char *)0x0) {\u000a            bVar5 = 0;\u000a            dcgettext(0,"invalid zero-length file name",5);\u000a            error(0,0,0x40717f);\u000a          }\u000a          else {\u000a            sVar8 = argv_iter_n_args(ai);\u000a            file = quotearg_n_style_colon((char *)0x0);\u000a            uVar7 = dcgettext(0,"invalid zero-length file name",5);\u000a            bVar5 = 0;\u000a            error(0,0,"%s:%lu: %s",file,sVar8,uVar7);\u000a          }\u000a        }\u000a        else {\u000a          if (*file == '-') {\u000a            if (file[1] != 0) goto LAB_00402272;\u000a            uVar7 = dcgettext(0,"when reading file names from stdin, no file name of %s allowed",5);\u000a            quotearg_style((char *)0x4);\u000a            error(0,0,uVar7);\u000a            bVar2 = true;\u000a            goto LAB_00402274;\u000a          }\u000a          bVar2 = false;\u000a          if (*file == 0) goto LAB_00402330;\u000aLAB_00402280:\u000a          if (bVar2) {\u000a            bVar5 = 0;\u000a          }\u000a          else {\u000a            sVar8 = sVar12;\u000a            if (local_150.n_tok == 0) {\u000a              sVar8 = local_150.n_tok;\u000a            }\u000a            _Var4 = wc_file(file,fstatus + sVar8);\u000a            bVar5 = _Var4 & bVar5;\u000a          }\u000a        }\u000a        sVar12 = sVar12 + 1;\u000a        file = argv_iter(ai,(argv_iter_err *)&local_1e0);\u000a      } while (file != (char *)0x0);\u000a    }\u000a    if (local_1e0 == AI_ERR_EOF) {\u000a      if (((__filename == (char *)0x0) && (bVar5 != 0)) &&\u000a         (sVar12 = argv_iter_n_args(ai), sVar12 == 0)) {\u000a        _Var4 = wc_file((char *)0x0,fstatus);\u000a        bVar5 = _Var4 & bVar5;\u000a      }\u000ajoined_r0x00402469:\u000a      if (bVar3) {\u000a        readtokens0_free(&local_150);\u000a      }\u000a      sVar12 = argv_iter_n_args(ai);\u000a      lines = total_lines;\u000a      words = total_words;\u000a      chars = total_chars;\u000a      bytes = total_bytes;\u000a      linelength = max_line_length;\u000a      if (1 < sVar12) {\u000a        __filename = (char *)dcgettext(0,"total",5);\u000a        write_counts(lines,words,chars,bytes,linelength,__filename);\u000a      }\u000a      argv_iter_free(ai);\u000a      free(fstatus);\u000a      if ((have_read_stdin == 1) && (__fd = close(0), __fd != 0)) {\u000a        puVar6 = (uint *)__errno_location();\u000a        error(1,(ulong)*puVar6,&DAT_00407222);\u000a      }\u000a      return (int)(uint)(bVar5 ^ 1);\u000a    }\u000a    if (local_1e0 == AI_ERR_READ) {\u000a      puVar6 = (uint *)__errno_location();\u000a      uVar1 = *puVar6;\u000a      bVar5 = 0;\u000a      uVar7 = dcgettext(0,"%s: read error",5);\u000a      __filename = quotearg_n_style_colon((char *)0x0);\u000a      error(0,(ulong)uVar1,uVar7,__filename);\u000a      goto joined_r0x00402469;\u000a    }\u000a  }\u000a  else {\u000a    if (__fd == -0x83) {\u000aLAB_004025db:\u000a      version_etc(stdout,"wc","GNU coreutils",Version,"Paul Rubin","David MacKenzie",0);\u000a                    /* WARNING: Subroutine does not return */\u000a      exit(0);\u000a    }\u000a    if (__fd == -0x82) {\u000a      usage(0);\u000a      goto LAB_004025db;\u000a    }\u000aswitchD_0040203d_caseD_4d:\u000a    local_1e0 = usage(1);\u000a  }\u000a  if (local_1e0 == AI_ERR_MEM) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000aLAB_0040269c:\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("!\u005c"unexpected error code from argv_iter\u005c"","src/wc.c",0x304,\u000a                "int main(int, char **)");\u000a}\u000a\u000a
p1046
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x1d8\nMOV R14,RSI\nMOV EBP,EDI\nMOV RDI,qword ptr [R14]\nCALL 0x00403740\nMOV EDI,0x6\nMOV ESI,0x4078a9\nCALL 0x00401a60\nMOV EDI,0x406e26\nMOV ESI,0x406e04\nCALL 0x00401820\nMOV EDI,0x406e26\nCALL 0x00401800\nMOV EDI,0x403430\nCALL 0x00406500\nMOV RDI,qword ptr [0x0060a2c8]\nXOR R15D,R15D\nXOR ESI,ESI\nMOV EDX,0x1\nXOR ECX,ECX\nCALL 0x00401a80\nMOV byte ptr [0x0060a310],0x0\nMOV byte ptr [0x0060a311],0x0\nMOV byte ptr [0x0060a312],0x0\nMOV byte ptr [0x0060a313],0x0\nMOV byte ptr [0x0060a314],0x0\nMOV qword ptr [0x0060a318],0x0\nMOV qword ptr [0x0060a320],0x0\nMOV qword ptr [0x0060a328],0x0\nMOV qword ptr [0x0060a330],0x0\nMOV qword ptr [0x0060a338],0x0\nJMP 0x00402010\nMOV byte ptr [RCX],0x1\nJMP 0x00402010\nMOV ECX,0x60a314\nJMP 0x00402000\nMOV EDX,0x406e1c\nMOV ECX,0x4068b0\nXOR R8D,R8D\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00401860\nCMP EAX,0x4b\nJLE 0x0040206b\nADD EAX,-0x4c\nCMP EAX,0x34\nJA 0x00402615\nMOV ECX,0x60a311\nJMP qword ptr [0x406580 + RAX*0x8]\nMOV ECX,0x60a310\nMOV byte ptr [RCX],0x1\nJMP 0x00402010\nMOV ECX,0x60a313\nMOV byte ptr [RCX],0x1\nJMP 0x00402010\nMOV ECX,0x60a312\nMOV byte ptr [RCX],0x1\nJMP 0x00402010\nMOV R15,qword ptr [0x0060a2e0]\nJMP 0x00402010\nCMP EAX,-0x1\nJNZ 0x004025c6\nMOV AL,byte ptr [0x0060a313]\nTEST AL,AL\nJNZ 0x004020bb\nMOV AL,byte ptr [0x0060a312]\nTEST AL,AL\nJNZ 0x004020bb\nMOV AL,byte ptr [0x0060a311]\nTEST AL,AL\nJNZ 0x004020bb\nMOV AL,byte ptr [0x0060a310]\nTEST AL,AL\nJNZ 0x004020bb\nMOV AL,byte ptr [0x0060a314]\nTEST AL,AL\nJNZ 0x004020bb\nMOV byte ptr [0x0060a310],0x1\nMOV byte ptr [0x0060a312],0x1\nMOV byte ptr [0x0060a313],0x1\nMOVSXD RAX,dword ptr [0x0060a2d8]\nTEST R15,R15\nJZ 0x0040213b\nCMP EAX,EBP\nJL 0x00402629\nCMP byte ptr [R15],0x2d\nJNZ 0x004020e0\nCMP byte ptr [R15 + 0x1],0x0\nJZ 0x00402177\nMOV ESI,0x406ed7\nMOV RDI,R15\nCALL 0x00401ae0\nMOV RBP,RAX\nTEST RBP,RBP\nJNZ 0x0040217e\nCALL 0x00401780\nMOV R14D,dword ptr [RAX]\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x406e90\nMOV EDX,0x5\nCALL 0x00401830\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x00404a10\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBX\nCALL 0x00401ab0\nJMP 0x0040217e\nSUB EBP,EAX\nLEA RAX,[R14 + RAX*0x8]\nMOV R14D,0x60a340\nCMOVG R14,RAX\nMOVSXD RAX,EBP\nMOV ECX,0x1\nCMOVG RCX,RAX\nMOV qword ptr [RSP + 0x8],RCX\nMOV RDI,R14\nCALL 0x004032e0\nMOV R12,RAX\nXOR EAX,EAX\nTEST R12,R12\nJNZ 0x0040220e\nJMP 0x004025c1\nMOV RBP,qword ptr [0x0060a2d0]\nMOV RDI,RBP\nCALL 0x004019b0\nLEA RSI,[RSP + 0x28]\nMOV EDI,EAX\nCALL 0x00406540\nTEST EAX,EAX\nJNZ 0x004021ee\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x40]\nCMP EAX,0x8000\nJNZ 0x004021ee\nMOV RAX,qword ptr [RSP + 0x58]\nCVTSI2SD XMM0,RAX\nMOVSD qword ptr [RSP + 0x10],XMM0\nCALL 0x00403690\nMOVAPD XMM1,XMM0\nMULSD XMM1,qword ptr [0x00406568]\nMOVSD XMM0,qword ptr [0x00406570]\nUCOMISD XMM1,XMM0\nJA 0x004021e2\nCALL 0x00403690\nMULSD XMM0,qword ptr [0x00406568]\nUCOMISD XMM0,qword ptr [RSP + 0x10]\nJNC 0x00402536\nMOV RDI,RBP\nCALL 0x00403310\nMOV R12,RAX\nXOR EAX,EAX\nXOR R14D,R14D\nXOR ECX,ECX\nMOV qword ptr [RSP + 0x8],RCX\nTEST R12,R12\nJZ 0x004025c1\nMOV qword ptr [RSP + 0x20],RAX\nMOV RBP,qword ptr [RSP + 0x8]\nMOV RDI,RBP\nMOV RSI,R14\nCALL 0x004026c0\nMOV RDI,RBP\nMOV qword ptr [RSP + 0x10],RAX\nMOV RSI,RAX\nCALL 0x004027a0\nMOV dword ptr [0x0060a348],EAX\nLEA RSI,[RSP + 0x28]\nMOV RDI,R12\nCALL 0x00403340\nMOV RBP,RAX\nMOV R13B,0x1\nTEST RBP,RBP\nJZ 0x004023da\nLEA RBX,[RSP + 0x28]\nXOR R14D,R14D\nNOP dword ptr [RAX]\nTEST R15,R15\nJZ 0x00402272\nCMP byte ptr [R15],0x2d\nJNZ 0x00402272\nCMP byte ptr [R15 + 0x1],0x0\nJZ 0x004022c1\nXOR EAX,EAX\nMOVZX ECX,byte ptr [RBP]\nTEST CL,CL\nJZ 0x00402330\nTEST AL,AL\nJZ 0x00402290\nXOR R13D,R13D\nJMP 0x004023c0\nMOV RAX,qword ptr [RSP + 0x8]\nMOV RCX,RAX\nTEST RCX,RCX\nMOV RAX,R14\nCMOVZ RAX,RCX\nIMUL RSI,RAX,0x98\nADD RSI,qword ptr [RSP + 0x10]\nMOV RDI,RBP\nCALL 0x00402840\nAND AL,R13B\nMOV R13B,AL\nJMP 0x004023c0\nMOVZX ECX,byte ptr [RBP]\nCMP CL,0x2d\nJNZ 0x00402319\nCMP byte ptr [RBP + 0x1],0x0\nJNZ 0x00402272\nXOR EDI,EDI\nMOV ESI,0x406f21\nMOV EDX,0x5\nCALL 0x00401830\nMOV qword ptr [RSP + 0x18],R15\nMOV R15,RBX\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,RBP\nCALL 0x00404a10\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nMOV RBX,R15\nMOV R15,qword ptr [RSP + 0x18]\nCALL 0x00401ab0\nMOV AL,0x1\nJMP 0x00402274\nXOR EAX,EAX\nTEST CL,CL\nJNZ 0x00402280\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST R15,R15\nJZ 0x0040238f\nMOV RDI,R12\nCALL 0x004033d0\nMOV R13,R12\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x00404af0\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x406f60\nMOV EDX,0x5\nCALL 0x00401830\nMOV RBP,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EDX,0x406f7e\nXOR EAX,EAX\nMOV RCX,RBX\nMOV R8,R12\nLEA RBX,[RSP + 0x28]\nMOV R12,R13\nXOR R13D,R13D\nMOV R9,RBP\nCALL 0x00401ab0\nJMP 0x004023c0\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x406f60\nMOV EDX,0x5\nCALL 0x00401830\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EDX,0x40717f\nXOR EAX,EAX\nCALL 0x00401ab0\nNOP word ptr CS:[RAX + RAX*0x1]\nINC R14\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00403340\nMOV RBP,RAX\nTEST RBP,RBP\nJNZ 0x00402260\nMOV EAX,dword ptr [RSP + 0x28]\nCMP EAX,0x2\nJZ 0x0040243b\nMOV RBX,R12\nCMP EAX,0x4\nJNZ 0x0040261f\nCALL 0x00401780\nMOV R12D,dword ptr [RAX]\nXOR R13D,R13D\nXOR EDI,EDI\nMOV ESI,0x406eca\nMOV EDX,0x5\nCALL 0x00401830\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x00404af0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,RBP\nCALL 0x00401ab0\nMOV R12,RBX\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x0040246b\nJMP 0x00402478\nTEST R15,R15\nJNZ 0x00402464\nTEST R13B,R13B\nJZ 0x00402464\nMOV RDI,R12\nCALL 0x004033d0\nTEST RAX,RAX\nJNZ 0x00402464\nXOR EDI,EDI\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00402840\nAND AL,R13B\nMOV R13B,AL\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00402478\nLEA RDI,[0xb8 + RSP]\nCALL 0x004050b0\nMOV RDI,R12\nCALL 0x004033d0\nCMP RAX,0x2\nJC 0x004024de\nMOV R14,qword ptr [0x0060a338]\nMOV RBP,qword ptr [0x0060a330]\nMOV R15,qword ptr [0x0060a328]\nMOV RBX,R12\nMOV R12,qword ptr [0x0060a320]\nMOV RAX,qword ptr [0x0060a318]\nMOV qword ptr [RSP + 0x8],RAX\nXOR EDI,EDI\nMOV ESI,0x406f89\nMOV EDX,0x5\nCALL 0x00401830\nMOV RDI,R14\nMOV RSI,RBP\nMOV RDX,R15\nMOV RCX,R12\nMOV R12,RBX\nMOV R8,qword ptr [RSP + 0x8]\nMOV R9,RAX\nCALL 0x004028e0\nMOV RDI,R12\nCALL 0x004033f0\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00401760\nCMP byte ptr [0x0060a34c],0x1\nJNZ 0x0040251c\nXOR EDI,EDI\nCALL 0x004018f0\nTEST EAX,EAX\nJZ 0x0040251c\nCALL 0x00401780\nMOV ESI,dword ptr [RAX]\nMOV EDI,0x1\nMOV EDX,0x407222\nXOR EAX,EAX\nCALL 0x00401ab0\nXOR R13B,0x1\nMOVZX EAX,R13B\nADD RSP,0x1d8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nLEA R14,[0xb8 + RSP]\nMOV RDI,R14\nCALL 0x00405040\nMOV RDI,RBP\nMOV RSI,R14\nCALL 0x004050e0\nTEST AL,AL\nJZ 0x00402561\nMOV RDI,RBP\nCALL 0x00405b30\nTEST EAX,EAX\nJZ 0x00402596\nXOR EDI,EDI\nMOV ESI,0x406eab\nMOV EDX,0x5\nCALL 0x00401830\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R15\nCALL 0x00404a10\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401ab0\nMOV RAX,qword ptr [0xb8 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV R14,qword ptr [0xc0 + RSP]\nMOV RDI,R14\nCALL 0x004032e0\nMOV R12,RAX\nMOV AL,0x1\nTEST R12,R12\nJNZ 0x0040220e\nCALL 0x00405ab0\nCMP EAX,0xffffff7d\nJZ 0x004025db\nCMP EAX,0xffffff7e\nJNZ 0x00402615\nXOR EDI,EDI\nCALL 0x00401c90\nMOV RDI,qword ptr [0x0060a2c8]\nMOV RCX,qword ptr [0x0060a248]\nMOV qword ptr [RSP],0x0\nMOV ESI,0x406e01\nMOV EDX,0x406e22\nMOV R8D,0x406e30\nMOV R9D,0x406e3b\nXOR EAX,EAX\nCALL 0x004057f0\nXOR EDI,EDI\nCALL 0x00401b20\nMOV EDI,0x1\nCALL 0x00401c90\nCMP EAX,0x3\nJNZ 0x0040269c\nCALL 0x00405ab0\nXOR EDI,EDI\nMOV ESI,0x406e4b\nMOV EDX,0x5\nCALL 0x00401830\nMOV RBX,RAX\nMOVSXD RAX,dword ptr [0x0060a2d8]\nMOV RSI,qword ptr [R14 + RAX*0x8]\nMOV EDI,0x4\nCALL 0x00404a10\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401ab0\nMOV RBX,qword ptr [0x0060a300]\nXOR EDI,EDI\nMOV ESI,0x406e5c\nMOV EDX,0x5\nCALL 0x00401830\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4077d0\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401b40\nMOV EDI,0x1\nCALL 0x00401c90\nMOV EDI,0x406ed9\nMOV ESI,0x406f01\nMOV EDX,0x304\nMOV ECX,0x406f0a\nCALL 0x004018b0\n'
p1047
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 01 00 00\n49 89 f6\n89 fd\n49 8b 3e\ne8 f2 17 00 00\nbf 06 00 00 00\nbe a9 78 40 00\ne8 03 fb ff ff\nbf 26 6e 40 00\nbe 04 6e 40 00\ne8 b4 f8 ff ff\nbf 26 6e 40 00\ne8 8a f8 ff ff\nbf 30 34 40 00\ne8 80 45 00 00\n48 8b 3d 41 83 20 00\n45 31 ff\n31 f6\nba 01 00 00 00\n31 c9\ne8 e8 fa ff ff\nc6 05 71 83 20 00 00\nc6 05 6b 83 20 00 00\nc6 05 65 83 20 00 00\nc6 05 5f 83 20 00 00\nc6 05 59 83 20 00 00\n48 c7 05 52 83 20 00 00 00 00 00\n48 c7 05 4f 83 20 00 00 00 00 00\n48 c7 05 4c 83 20 00 00 00 00 00\n48 c7 05 49 83 20 00 00 00 00 00\n48 c7 05 46 83 20 00 00 00 00 00\neb 1c\nc6 01 01\neb 0b\nb9 14 a3 60 00\neb f4\nba 1c 6e 40 00\nb9 b0 68 40 00\n45 31 c0\n89 ef\n4c 89 f6\ne8 39 f8 ff ff\n83 f8 4b\n7e 3f\n83 c0 b4\n83 f8 34\n0f 87 dd 05 00 00\nb9 11 a3 60 00\nff 24 c5 80 65 40 00\nb9 10 a3 60 00\nc6 01 01\neb c2\nb9 13 a3 60 00\nc6 01 01\neb b8\nb9 12 a3 60 00\nc6 01 01\neb ae\n4c 8b 3d 77 82 20 00\neb a5\n83 f8 ff\n0f 85 52 05 00 00\n8a 05 99 82 20 00\n84 c0\n75 3d\n8a 05 8e 82 20 00\n84 c0\n75 33\n8a 05 83 82 20 00\n84 c0\n75 29\n8a 05 78 82 20 00\n84 c0\n75 1f\n8a 05 72 82 20 00\n84 c0\n75 15\nc6 05 63 82 20 00 01\nc6 05 5e 82 20 00 01\nc6 05 58 82 20 00 01\n48 63 05 16 82 20 00\n4d 85 ff\n74 74\n39 e8\n0f 8c 5a 05 00 00\n41 80 3f 2d\n75 0b\n41 80 7f 01 00\n0f 84 97 00 00 00\nbe d7 6e 40 00\n4c 89 ff\ne8 f3 f9 ff ff\n48 89 c5\n48 85 ed\n0f 85 85 00 00 00\ne8 82 f6 ff ff\n44 8b 30\n31 ed\n31 ff\nbe 90 6e 40 00\nba 05 00 00 00\ne8 1c f7 ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 fe\ne8 ec 28 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 f6\n48 89 da\ne8 77 f9 ff ff\neb 43\n29 c5\n49 8d 04 c6\n41 be 40 a3 60 00\n4c 0f 4f f0\n48 63 c5\nb9 01 00 00 00\n48 0f 4f c8\n48 89 4c 24 08\n4c 89 f7\ne8 7c 11 00 00\n49 89 c4\n31 c0\n4d 85 e4\n0f 85 9c 00 00 00\ne9 4a 04 00 00\n48 8b 2d 52 81 20 00\n48 89 ef\ne8 2a f8 ff ff\n48 8d 74 24 28\n89 c7\ne8 ae 43 00 00\n85 c0\n75 58\nb8 00 f0 00 00\n23 44 24 40\n3d 00 80 00 00\n75 48\n48 8b 44 24 58\nf2 48 0f 2a c0\nf2 0f 11 44 24 10\ne8 d5 14 00 00\n66 0f 28 c8\nf2 0f 59 0d a1 43 00 00\nf2 0f 10 05 a1 43 00 00\n66 0f 2e c8\n77 0d\ne8 b6 14 00 00\nf2 0f 59 05 86 43 00 00\n66 0f 2e 44 24 10\n0f 83 48 03 00 00\n48 89 ef\ne8 1a 11 00 00\n49 89 c4\n31 c0\n45 31 f6\n31 c9\n48 89 4c 24 08\n4d 85 e4\n0f 84 b3 03 00 00\n48 89 44 24 20\n48 8b 6c 24 08\n48 89 ef\n4c 89 f6\ne8 9d 04 00 00\n48 89 ef\n48 89 44 24 10\n48 89 c6\ne8 6d 05 00 00\n89 05 0f 81 20 00\n48 8d 74 24 28\n4c 89 e7\ne8 fa 10 00 00\n48 89 c5\n41 b5 01\n48 85 ed\n0f 84 85 01 00 00\n48 8d 5c 24 28\n45 31 f6\n0f 1f 00\n4d 85 ff\n74 0d\n41 80 3f 2d\n75 07\n41 80 7f 01 00\n74 4f\n31 c0\n0f b6 4d 00\n84 c9\n0f 84 b0 00 00 00\n84 c0\n74 0c\n45 31 ed\ne9 34 01 00 00\n48 8b 44 24 08\n48 89 c1\n48 85 c9\n4c 89 f0\n48 0f 44 c1\n48 69 f0 98 00 00 00\n48 03 74 24 10\n48 89 ef\ne8 8a 05 00 00\n44 20 e8\n41 88 c5\ne9 ff 00 00 00\n0f b6 4d 00\n80 f9 2d\n75 4f\n80 7d 01 00\n75 a2\n31 ff\nbe 21 6f 40 00\nba 05 00 00 00\ne8 4f f5 ff ff\n4c 89 7c 24 18\n49 89 df\n48 89 c3\nbf 04 00 00 00\n48 89 ee\ne8 17 27 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\n4c 89 fb\n4c 8b 7c 24 18\ne8 9e f7 ff ff\nb0 01\ne9 5b ff ff ff\n31 c0\n84 c9\n0f 85 5d ff ff ff\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4d 85 ff\n74 5a\n4c 89 e7\ne8 93 10 00 00\n4d 89 e5\n49 89 c4\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 9e 27 00 00\n48 89 c3\n31 ff\nbe 60 6f 40 00\nba 05 00 00 00\ne8 ca f4 ff ff\n48 89 c5\n31 ff\n31 f6\nba 7e 6f 40 00\n31 c0\n48 89 d9\n4d 89 e0\n48 8d 5c 24 28\n4d 89 ec\n45 31 ed\n49 89 e9\ne8 23 f7 ff ff\neb 31\n45 31 ed\n31 ff\nbe 60 6f 40 00\nba 05 00 00 00\ne8 8d f4 ff ff\n48 89 c1\n31 ff\n31 f6\nba 7f 71 40 00\n31 c0\ne8 fa f6 ff ff\n66 2e 0f 1f 84 00 00 00 00 00\n49 ff c6\n4c 89 e7\n48 89 de\ne8 72 0f 00 00\n48 89 c5\n48 85 ed\n0f 85 86 fe ff ff\n8b 44 24 28\n83 f8 02\n74 58\n4c 89 e3\n83 f8 04\n0f 85 30 02 00 00\ne8 8c f3 ff ff\n44 8b 20\n45 31 ed\n31 ff\nbe ca 6e 40 00\nba 05 00 00 00\ne8 25 f4 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 d3 26 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 e6\n48 89 ea\ne8 81 f6 ff ff\n49 89 dc\n80 7c 24 20 00\n75 32\neb 3d\n4d 85 ff\n75 24\n45 84 ed\n74 1f\n4c 89 e7\ne8 83 0f 00 00\n48 85 c0\n75 12\n31 ff\n48 8b 74 24 10\ne8 e2 03 00 00\n44 20 e8\n41 88 c5\n80 7c 24 20 00\n74 0d\n48 8d bc 24 b8 00 00 00\ne8 38 2c 00 00\n4c 89 e7\ne8 50 0f 00 00\n48 83 f8 02\n72 58\n4c 8b 35 ab 7e 20 00\n48 8b 2d 9c 7e 20 00\n4c 8b 3d 8d 7e 20 00\n4c 89 e3\n4c 8b 25 7b 7e 20 00\n48 8b 05 6c 7e 20 00\n48 89 44 24 08\n31 ff\nbe 89 6f 40 00\nba 05 00 00 00\ne8 6e f3 ff ff\n4c 89 f7\n48 89 ee\n4c 89 fa\n4c 89 e1\n49 89 dc\n4c 8b 44 24 08\n49 89 c1\ne8 02 04 00 00\n4c 89 e7\ne8 0a 0f 00 00\n48 8b 7c 24 10\ne8 70 f2 ff ff\n80 3d 55 7e 20 00 01\n75 23\n31 ff\ne8 f0 f3 ff ff\n85 c0\n74 18\ne8 77 f2 ff ff\n8b 30\nbf 01 00 00 00\nba 22 72 40 00\n31 c0\ne8 94 f5 ff ff\n41 80 f5 01\n41 0f b6 c5\n48 81 c4 d8 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4c 8d b4 24 b8 00 00 00\n4c 89 f7\ne8 fa 2a 00 00\n48 89 ef\n4c 89 f6\ne8 8f 2b 00 00\n84 c0\n74 0c\n48 89 ef\ne8 d3 35 00 00\n85 c0\n74 35\n31 ff\nbe ab 6e 40 00\nba 05 00 00 00\ne8 be f2 ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 fe\ne8 8e 24 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ea\ne8 1a f5 ff ff\n48 8b 84 24 b8 00 00 00\n48 89 44 24 08\n4c 8b b4 24 c0 00 00 00\n4c 89 f7\ne8 2d 0d 00 00\n49 89 c4\nb0 01\n4d 85 e4\n0f 85 4d fc ff ff\ne8 ea 34 00 00\n3d 7d ff ff ff\n74 0e\n3d 7e ff ff ff\n75 41\n31 ff\ne8 b5 f6 ff ff\n48 8b 3d e6 7c 20 00\n48 8b 0d 5f 7c 20 00\n48 c7 04 24 00 00 00 00\nbe 01 6e 40 00\nba 22 6e 40 00\n41 b8 30 6e 40 00\n41 b9 3b 6e 40 00\n31 c0\ne8 e2 31 00 00\n31 ff\ne8 0b f5 ff ff\nbf 01 00 00 00\ne8 71 f6 ff ff\n83 f8 03\n75 78\ne8 87 34 00 00\n31 ff\nbe 4b 6e 40 00\nba 05 00 00 00\ne8 f6 f1 ff ff\n48 89 c3\n48 63 05 94 7c 20 00\n49 8b 34 c6\nbf 04 00 00 00\ne8 be 23 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 4d f4 ff ff\n48 8b 1d 96 7c 20 00\n31 ff\nbe 5c 6e 40 00\nba 05 00 00 00\ne8 b5 f1 ff ff\n48 89 c1\nbe 01 00 00 00\nba d0 77 40 00\n31 c0\n48 89 df\ne8 ae f4 ff ff\nbf 01 00 00 00\ne8 f4 f5 ff ff\nbf d9 6e 40 00\nbe 01 6f 40 00\nba 04 03 00 00\nb9 0a 6f 40 00\ne8 fb f1 ff ff\n'
p1048
S'.text:0000000000401f30\n.text:0000000000401f31\n.text:0000000000401f33\n.text:0000000000401f35\n.text:0000000000401f37\n.text:0000000000401f39\n.text:0000000000401f3a\n.text:0000000000401f41\n.text:0000000000401f44\n.text:0000000000401f46\n.text:0000000000401f49\n.text:0000000000401f4e\n.text:0000000000401f53\n.text:0000000000401f58\n.text:0000000000401f5d\n.text:0000000000401f62\n.text:0000000000401f67\n.text:0000000000401f6c\n.text:0000000000401f71\n.text:0000000000401f76\n.text:0000000000401f7b\n.text:0000000000401f80\n.text:0000000000401f87\n.text:0000000000401f8a\n.text:0000000000401f8c\n.text:0000000000401f91\n.text:0000000000401f93\n.text:0000000000401f98\n.text:0000000000401f9f\n.text:0000000000401fa6\n.text:0000000000401fad\n.text:0000000000401fb4\n.text:0000000000401fbb\n.text:0000000000401fc6\n.text:0000000000401fd1\n.text:0000000000401fdc\n.text:0000000000401fe7\n.text:0000000000401ff2\n.text:0000000000402000\n.text:0000000000402003\n.text:0000000000402005\n.text:000000000040200a\n.text:0000000000402010\n.text:0000000000402015\n.text:000000000040201a\n.text:000000000040201d\n.text:000000000040201f\n.text:0000000000402022\n.text:0000000000402027\n.text:000000000040202a\n.text:000000000040202c\n.text:000000000040202f\n.text:0000000000402032\n.text:0000000000402038\n.text:000000000040203d\n.text:0000000000402044\n.text:0000000000402049\n.text:000000000040204c\n.text:000000000040204e\n.text:0000000000402053\n.text:0000000000402056\n.text:0000000000402058\n.text:000000000040205d\n.text:0000000000402060\n.text:0000000000402062\n.text:0000000000402069\n.text:000000000040206b\n.text:000000000040206e\n.text:0000000000402074\n.text:000000000040207a\n.text:000000000040207c\n.text:000000000040207e\n.text:0000000000402084\n.text:0000000000402086\n.text:0000000000402088\n.text:000000000040208e\n.text:0000000000402090\n.text:0000000000402092\n.text:0000000000402098\n.text:000000000040209a\n.text:000000000040209c\n.text:00000000004020a2\n.text:00000000004020a4\n.text:00000000004020a6\n.text:00000000004020ad\n.text:00000000004020b4\n.text:00000000004020bb\n.text:00000000004020c2\n.text:00000000004020c5\n.text:00000000004020c7\n.text:00000000004020c9\n.text:00000000004020cf\n.text:00000000004020d3\n.text:00000000004020d5\n.text:00000000004020da\n.text:00000000004020e0\n.text:00000000004020e5\n.text:00000000004020e8\n.text:00000000004020ed\n.text:00000000004020f0\n.text:00000000004020f3\n.text:00000000004020f9\n.text:00000000004020fe\n.text:0000000000402101\n.text:0000000000402103\n.text:0000000000402105\n.text:000000000040210a\n.text:000000000040210f\n.text:0000000000402114\n.text:0000000000402117\n.text:000000000040211c\n.text:000000000040211f\n.text:0000000000402124\n.text:0000000000402127\n.text:000000000040212c\n.text:000000000040212e\n.text:0000000000402131\n.text:0000000000402134\n.text:0000000000402139\n.text:000000000040213b\n.text:000000000040213d\n.text:0000000000402141\n.text:0000000000402147\n.text:000000000040214b\n.text:000000000040214e\n.text:0000000000402153\n.text:0000000000402157\n.text:000000000040215c\n.text:000000000040215f\n.text:0000000000402164\n.text:0000000000402167\n.text:0000000000402169\n.text:000000000040216c\n.text:0000000000402172\n.text:0000000000402177\n.text:000000000040217e\n.text:0000000000402181\n.text:0000000000402186\n.text:000000000040218b\n.text:000000000040218d\n.text:0000000000402192\n.text:0000000000402194\n.text:0000000000402196\n.text:000000000040219b\n.text:000000000040219f\n.text:00000000004021a4\n.text:00000000004021a6\n.text:00000000004021ab\n.text:00000000004021b0\n.text:00000000004021b6\n.text:00000000004021bb\n.text:00000000004021bf\n.text:00000000004021c7\n.text:00000000004021cf\n.text:00000000004021d3\n.text:00000000004021d5\n.text:00000000004021da\n.text:00000000004021e2\n.text:00000000004021e8\n.text:00000000004021ee\n.text:00000000004021f1\n.text:00000000004021f6\n.text:00000000004021f9\n.text:00000000004021fb\n.text:00000000004021fe\n.text:0000000000402200\n.text:0000000000402205\n.text:0000000000402208\n.text:000000000040220e\n.text:0000000000402213\n.text:0000000000402218\n.text:000000000040221b\n.text:000000000040221e\n.text:0000000000402223\n.text:0000000000402226\n.text:000000000040222b\n.text:000000000040222e\n.text:0000000000402233\n.text:0000000000402239\n.text:000000000040223e\n.text:0000000000402241\n.text:0000000000402246\n.text:0000000000402249\n.text:000000000040224c\n.text:000000000040224f\n.text:0000000000402255\n.text:000000000040225a\n.text:000000000040225d\n.text:0000000000402260\n.text:0000000000402263\n.text:0000000000402265\n.text:0000000000402269\n.text:000000000040226b\n.text:0000000000402270\n.text:0000000000402272\n.text:0000000000402274\n.text:0000000000402278\n.text:000000000040227a\n.text:0000000000402280\n.text:0000000000402282\n.text:0000000000402284\n.text:0000000000402287\n.text:0000000000402290\n.text:0000000000402295\n.text:0000000000402298\n.text:000000000040229b\n.text:000000000040229e\n.text:00000000004022a2\n.text:00000000004022a9\n.text:00000000004022ae\n.text:00000000004022b1\n.text:00000000004022b6\n.text:00000000004022b9\n.text:00000000004022bc\n.text:00000000004022c1\n.text:00000000004022c5\n.text:00000000004022c8\n.text:00000000004022ca\n.text:00000000004022ce\n.text:00000000004022d0\n.text:00000000004022d2\n.text:00000000004022d7\n.text:00000000004022dc\n.text:00000000004022e1\n.text:00000000004022e6\n.text:00000000004022e9\n.text:00000000004022ec\n.text:00000000004022f1\n.text:00000000004022f4\n.text:00000000004022f9\n.text:00000000004022fc\n.text:00000000004022fe\n.text:0000000000402300\n.text:0000000000402302\n.text:0000000000402305\n.text:0000000000402308\n.text:000000000040230d\n.text:0000000000402312\n.text:0000000000402314\n.text:0000000000402319\n.text:000000000040231b\n.text:000000000040231d\n.text:0000000000402323\n.text:0000000000402330\n.text:0000000000402333\n.text:0000000000402335\n.text:0000000000402338\n.text:000000000040233d\n.text:0000000000402340\n.text:0000000000402343\n.text:0000000000402345\n.text:000000000040234a\n.text:000000000040234d\n.text:0000000000402352\n.text:0000000000402355\n.text:0000000000402357\n.text:000000000040235c\n.text:0000000000402361\n.text:0000000000402366\n.text:0000000000402369\n.text:000000000040236b\n.text:000000000040236d\n.text:0000000000402372\n.text:0000000000402374\n.text:0000000000402377\n.text:000000000040237a\n.text:000000000040237f\n.text:0000000000402382\n.text:0000000000402385\n.text:0000000000402388\n.text:000000000040238d\n.text:000000000040238f\n.text:0000000000402392\n.text:0000000000402394\n.text:0000000000402399\n.text:000000000040239e\n.text:00000000004023a3\n.text:00000000004023a6\n.text:00000000004023a8\n.text:00000000004023aa\n.text:00000000004023af\n.text:00000000004023b1\n.text:00000000004023b6\n.text:00000000004023c0\n.text:00000000004023c3\n.text:00000000004023c6\n.text:00000000004023c9\n.text:00000000004023ce\n.text:00000000004023d1\n.text:00000000004023d4\n.text:00000000004023da\n.text:00000000004023de\n.text:00000000004023e1\n.text:00000000004023e3\n.text:00000000004023e6\n.text:00000000004023e9\n.text:00000000004023ef\n.text:00000000004023f4\n.text:00000000004023f7\n.text:00000000004023fa\n.text:00000000004023fc\n.text:0000000000402401\n.text:0000000000402406\n.text:000000000040240b\n.text:000000000040240e\n.text:0000000000402410\n.text:0000000000402415\n.text:0000000000402418\n.text:000000000040241d\n.text:0000000000402420\n.text:0000000000402422\n.text:0000000000402424\n.text:0000000000402427\n.text:000000000040242a\n.text:000000000040242f\n.text:0000000000402432\n.text:0000000000402437\n.text:0000000000402439\n.text:000000000040243b\n.text:000000000040243e\n.text:0000000000402440\n.text:0000000000402443\n.text:0000000000402445\n.text:0000000000402448\n.text:000000000040244d\n.text:0000000000402450\n.text:0000000000402452\n.text:0000000000402454\n.text:0000000000402459\n.text:000000000040245e\n.text:0000000000402461\n.text:0000000000402464\n.text:0000000000402469\n.text:000000000040246b\n.text:0000000000402473\n.text:0000000000402478\n.text:000000000040247b\n.text:0000000000402480\n.text:0000000000402484\n.text:0000000000402486\n.text:000000000040248d\n.text:0000000000402494\n.text:000000000040249b\n.text:000000000040249e\n.text:00000000004024a5\n.text:00000000004024ac\n.text:00000000004024b1\n.text:00000000004024b3\n.text:00000000004024b8\n.text:00000000004024bd\n.text:00000000004024c2\n.text:00000000004024c5\n.text:00000000004024c8\n.text:00000000004024cb\n.text:00000000004024ce\n.text:00000000004024d1\n.text:00000000004024d6\n.text:00000000004024d9\n.text:00000000004024de\n.text:00000000004024e1\n.text:00000000004024e6\n.text:00000000004024eb\n.text:00000000004024f0\n.text:00000000004024f7\n.text:00000000004024f9\n.text:00000000004024fb\n.text:0000000000402500\n.text:0000000000402502\n.text:0000000000402504\n.text:0000000000402509\n.text:000000000040250b\n.text:0000000000402510\n.text:0000000000402515\n.text:0000000000402517\n.text:000000000040251c\n.text:0000000000402520\n.text:0000000000402524\n.text:000000000040252b\n.text:000000000040252c\n.text:000000000040252e\n.text:0000000000402530\n.text:0000000000402532\n.text:0000000000402534\n.text:0000000000402535\n.text:0000000000402536\n.text:000000000040253e\n.text:0000000000402541\n.text:0000000000402546\n.text:0000000000402549\n.text:000000000040254c\n.text:0000000000402551\n.text:0000000000402553\n.text:0000000000402555\n.text:0000000000402558\n.text:000000000040255d\n.text:000000000040255f\n.text:0000000000402561\n.text:0000000000402563\n.text:0000000000402568\n.text:000000000040256d\n.text:0000000000402572\n.text:0000000000402575\n.text:000000000040257a\n.text:000000000040257d\n.text:0000000000402582\n.text:0000000000402585\n.text:000000000040258a\n.text:000000000040258c\n.text:000000000040258e\n.text:0000000000402591\n.text:0000000000402596\n.text:000000000040259e\n.text:00000000004025a3\n.text:00000000004025ab\n.text:00000000004025ae\n.text:00000000004025b3\n.text:00000000004025b6\n.text:00000000004025b8\n.text:00000000004025bb\n.text:00000000004025c1\n.text:00000000004025c6\n.text:00000000004025cb\n.text:00000000004025cd\n.text:00000000004025d2\n.text:00000000004025d4\n.text:00000000004025d6\n.text:00000000004025db\n.text:00000000004025e2\n.text:00000000004025e9\n.text:00000000004025f1\n.text:00000000004025f6\n.text:00000000004025fb\n.text:0000000000402601\n.text:0000000000402607\n.text:0000000000402609\n.text:000000000040260e\n.text:0000000000402610\n.text:0000000000402615\n.text:000000000040261a\n.text:000000000040261f\n.text:0000000000402622\n.text:0000000000402624\n.text:0000000000402629\n.text:000000000040262b\n.text:0000000000402630\n.text:0000000000402635\n.text:000000000040263a\n.text:000000000040263d\n.text:0000000000402644\n.text:0000000000402648\n.text:000000000040264d\n.text:0000000000402652\n.text:0000000000402655\n.text:0000000000402657\n.text:0000000000402659\n.text:000000000040265b\n.text:000000000040265e\n.text:0000000000402663\n.text:000000000040266a\n.text:000000000040266c\n.text:0000000000402671\n.text:0000000000402676\n.text:000000000040267b\n.text:000000000040267e\n.text:0000000000402683\n.text:0000000000402688\n.text:000000000040268a\n.text:000000000040268d\n.text:0000000000402692\n.text:0000000000402697\n.text:000000000040269c\n.text:00000000004026a1\n.text:00000000004026a6\n.text:00000000004026ab\n.text:00000000004026b0\n'
p1049
tp1050
sS'fputs_unlocked'
p1051
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1052
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060a110)();\u000a  return iVar1;\u000a}\u000a\u000a
p1053
S'JMP qword ptr [0x0060a110]\n'
p1054
S'ff 25 ca 87 20 00\n'
p1055
S'.plt:0000000000401940\n'
p1056
tp1057
sS'_obstack_memory_used'
p1058
(S'\n__stdcall _obstack_memory_used(obstack * h)\n'
p1059
V\u000asize_t _obstack_memory_used(obstack *h)\u000a\u000a{\u000a  _obstack_chunk *p_Var1;\u000a  char *pcVar2;\u000a  \u000a  p_Var1 = h->chunk;\u000a  pcVar2 = (char *)0x0;\u000a  while (p_Var1 != (_obstack_chunk *)0x0) {\u000a    pcVar2 = p_Var1->limit + (long)(pcVar2 + -(long)p_Var1);\u000a    p_Var1 = p_Var1->prev;\u000a  }\u000a  return (size_t)pcVar2;\u000a}\u000a\u000a
p1060
S'MOV RCX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nTEST RCX,RCX\nJZ 0x00405f4f\nNOP dword ptr [RAX + RAX*0x1]\nSUB RAX,RCX\nADD RAX,qword ptr [RCX]\nMOV RCX,qword ptr [RCX + 0x8]\nTEST RCX,RCX\nJNZ 0x00405f40\nRET\n'
p1061
S'48 8b 4f 08\n31 c0\n48 85 c9\n74 14\n0f 1f 44 00 00\n48 29 c8\n48 03 01\n48 8b 49 08\n48 85 c9\n75 f1\nc3\n'
p1062
S'.text:0000000000405f30\n.text:0000000000405f34\n.text:0000000000405f36\n.text:0000000000405f39\n.text:0000000000405f3b\n.text:0000000000405f40\n.text:0000000000405f43\n.text:0000000000405f46\n.text:0000000000405f4a\n.text:0000000000405f4d\n.text:0000000000405f4f\n'
p1063
tp1064
sS'xcharalloc'
p1065
(S'\n__stdcall xcharalloc(size_t n)\n'
p1066
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1067
S'JMP 0x00405920\n'
p1068
S'e9 2b ff ff ff\n'
p1069
S'.text:00000000004059f0\n'
p1070
tp1071
sS'c_isupper'
p1072
(S'\n__stdcall c_isupper()\n'
p1073
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1074
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1075
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1076
S'.text:0000000000406090\n.text:0000000000406093\n.text:0000000000406096\n.text:0000000000406099\n'
p1077
tp1078
sS'c_isalnum'
p1079
(S'\n__stdcall c_isalnum()\n'
p1080
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1081
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00405fab\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00405fab\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00405faa\nXOR EAX,EAX\nRET\n'
p1082
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1083
S'.text:0000000000405f90\n.text:0000000000405f92\n.text:0000000000405f95\n.text:0000000000405f98\n.text:0000000000405f9a\n.text:0000000000405fa4\n.text:0000000000405fa8\n.text:0000000000405faa\n.text:0000000000405fab\n.text:0000000000405fae\n.text:0000000000405fb1\n.text:0000000000405fb3\n.text:0000000000405fb5\n'
p1084
tp1085
sS'_obstack_begin_worker'
p1086
(S'\n__stdcall _obstack_begin_worker()\n'
p1087
V\u000aint _obstack_begin_worker(void)\u000a\u000a{\u000a  size_t size;\u000a  _obstack_chunk *p_Var1;\u000a  long in_RDX;\u000a  long lVar2;\u000a  char *pcVar3;\u000a  size_t in_RSI;\u000a  obstack *h;\u000a  \u000a  lVar2 = 0x10;\u000a  if (in_RDX != 0) {\u000a    lVar2 = in_RDX;\u000a  }\u000a  size = 0xfe0;\u000a  if (in_RSI != 0) {\u000a    size = in_RSI;\u000a  }\u000a  h->chunk_size = size;\u000a  h->alignment_mask = lVar2 - 1;\u000a  p_Var1 = (_obstack_chunk *)call_chunkfun(h,size);\u000a  h->chunk = p_Var1;\u000a  if (p_Var1 == (_obstack_chunk *)0x0) {\u000a    (*obstack_alloc_failed_handler)();\u000a  }\u000a  pcVar3 = (char *)(-lVar2 & (long)&p_Var1->prev + lVar2 + 7);\u000a  h->object_base = pcVar3;\u000a  h->next_free = pcVar3;\u000a  pcVar3 = (char *)((long)&p_Var1->limit + h->chunk_size);\u000a  p_Var1->limit = pcVar3;\u000a  h->chunk_limit = pcVar3;\u000a  p_Var1->prev = (_obstack_chunk *)0x0;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield & 0xf9;\u000a  return (int)pcVar3;\u000a}\u000a\u000a
p1088
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBX,0x10\nCMOVNZ RBX,RDX\nTEST RSI,RSI\nMOV EAX,0xfe0\nCMOVNZ RAX,RSI\nMOV qword ptr [R15],RAX\nLEA R12,[RBX + -0x1]\nMOV qword ptr [R15 + 0x30],R12\nMOV RSI,RAX\nCALL 0x00405e50\nMOV R14,RAX\nMOV qword ptr [R15 + 0x8],R14\nTEST R14,R14\nJNZ 0x00405cd8\nCALL qword ptr [0x0060a2b0]\nLEA RAX,[R14 + R12*0x1 + 0x10]\nNEG RBX\nAND RBX,RAX\nMOV qword ptr [R15 + 0x10],RBX\nMOV qword ptr [R15 + 0x18],RBX\nMOV RAX,qword ptr [R15]\nADD RAX,R14\nMOV qword ptr [R14],RAX\nMOV qword ptr [R15 + 0x20],RAX\nMOV qword ptr [R14 + 0x8],0x0\nAND byte ptr [R15 + 0x50],0xf9\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1089
S'41 57\n41 56\n41 54\n53\n50\n49 89 ff\n48 85 d2\nbb 10 00 00 00\n48 0f 45 da\n48 85 f6\nb8 e0 0f 00 00\n48 0f 45 c6\n49 89 07\n4c 8d 63 ff\n4d 89 67 30\n48 89 c6\ne8 8a 01 00 00\n49 89 c6\n4d 89 77 08\n4d 85 f6\n75 06\nff 15 d8 45 20 00\n4b 8d 44 26 10\n48 f7 db\n48 21 c3\n49 89 5f 10\n49 89 5f 18\n49 8b 07\n4c 01 f0\n49 89 06\n49 89 47 20\n49 c7 46 08 00 00 00 00\n41 80 67 50 f9\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1090
S'.text:0000000000405c90\n.text:0000000000405c92\n.text:0000000000405c94\n.text:0000000000405c96\n.text:0000000000405c97\n.text:0000000000405c98\n.text:0000000000405c9b\n.text:0000000000405c9e\n.text:0000000000405ca3\n.text:0000000000405ca7\n.text:0000000000405caa\n.text:0000000000405caf\n.text:0000000000405cb3\n.text:0000000000405cb6\n.text:0000000000405cba\n.text:0000000000405cbe\n.text:0000000000405cc1\n.text:0000000000405cc6\n.text:0000000000405cc9\n.text:0000000000405ccd\n.text:0000000000405cd0\n.text:0000000000405cd2\n.text:0000000000405cd8\n.text:0000000000405cdd\n.text:0000000000405ce0\n.text:0000000000405ce3\n.text:0000000000405ce7\n.text:0000000000405ceb\n.text:0000000000405cee\n.text:0000000000405cf1\n.text:0000000000405cf4\n.text:0000000000405cf8\n.text:0000000000405d00\n.text:0000000000405d05\n.text:0000000000405d09\n.text:0000000000405d0a\n.text:0000000000405d0c\n.text:0000000000405d0e\n.text:0000000000405d10\n'
p1091
tp1092
sS'__errno_location'
p1093
(S'\n__stdcall __errno_location()\n'
p1094
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060a030)();\u000a  return piVar1;\u000a}\u000a\u000a
p1095
S'JMP qword ptr [0x0060a030]\n'
p1096
S'ff 25 aa 88 20 00\n'
p1097
S'.plt:0000000000401780\n'
p1098
tp1099
sS'x2nrealloc'
p1100
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1101
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1102
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x004059bc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x004059e9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004059da\nTEST RCX,RCX\nJNZ 0x004059da\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00405960\nPUSH RAX\nCALL 0x00405ab0\n'
p1103
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1104
S'.text:0000000000405990\n.text:0000000000405993\n.text:0000000000405996\n.text:0000000000405999\n.text:000000000040599b\n.text:00000000004059a5\n.text:00000000004059a7\n.text:00000000004059aa\n.text:00000000004059ad\n.text:00000000004059af\n.text:00000000004059b2\n.text:00000000004059b5\n.text:00000000004059ba\n.text:00000000004059bc\n.text:00000000004059bf\n.text:00000000004059c1\n.text:00000000004059c6\n.text:00000000004059c8\n.text:00000000004059cb\n.text:00000000004059cd\n.text:00000000004059d4\n.text:00000000004059d7\n.text:00000000004059da\n.text:00000000004059dd\n.text:00000000004059e1\n.text:00000000004059e4\n.text:00000000004059e9\n.text:00000000004059ea\n'
p1105
tp1106
sS'safe_read'
p1107
(S'\n__stdcall safe_read(void * buf, size_t count)\n'
p1108
V\u000asize_t safe_read(void *buf,size_t count)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  int *piVar4;\u000a  ulong __nbytes;\u000a  size_t unaff_R14;\u000a  \u000a  while( true ) {\u000a    do {\u000a      sVar3 = read((int)buf,(void *)count,__nbytes);\u000a      if (-1 < (long)sVar3) {\u000a        return sVar3;\u000a      }\u000a      piVar4 = __errno_location();\u000a      iVar1 = *piVar4;\u000a    } while (iVar1 == 4);\u000a    uVar2 = __nbytes;\u000a    if (0x7fffe000 < __nbytes && iVar1 == 0x16) {\u000a      sVar3 = unaff_R14;\u000a      uVar2 = 0x7fffe000;\u000a    }\u000a    if (__nbytes < 0x7fffe001) break;\u000a    __nbytes = uVar2;\u000a    unaff_R14 = sVar3;\u000a    if (iVar1 != 0x16) {\u000a      return sVar3;\u000a    }\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R15,RSI\nMOV R12D,EDI\nMOV R13D,0x7fffe000\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,R12D\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00401920\nMOV RBP,RAX\nTEST RBP,RBP\nJNS 0x004053e4\nCALL 0x00401780\nMOV EAX,dword ptr [RAX]\nCMP EAX,0x4\nJZ 0x00405390\nCMP EAX,0x16\nSETZ CL\nCMP RBX,0x7fffe000\nSETA DL\nAND DL,CL\nMOV RCX,RBX\nCMOVNZ RCX,R13\nTEST DL,DL\nCMOVZ R14,RBP\nCMP RBX,0x7fffe001\nJC 0x004053e7\nCMP EAX,0x16\nMOV RBX,RCX\nJZ 0x00405390\nJMP 0x004053e7\nMOV R14,RBP\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1110
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d3\n49 89 f7\n41 89 fc\n41 bd 00 e0 ff 7f\n66 0f 1f 44 00 00\n44 89 e7\n4c 89 fe\n48 89 da\ne8 82 c5 ff ff\n48 89 c5\n48 85 ed\n79 3e\ne8 d5 c3 ff ff\n8b 00\n83 f8 04\n74 de\n83 f8 16\n0f 94 c1\n48 81 fb 00 e0 ff 7f\n0f 97 c2\n20 ca\n48 89 d9\n49 0f 45 cd\n84 d2\n4c 0f 44 f5\n48 81 fb 01 e0 ff 7f\n72 0d\n83 f8 16\n48 89 cb\n74 ae\neb 03\n49 89 ee\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1111
S'.text:0000000000405370\n.text:0000000000405371\n.text:0000000000405373\n.text:0000000000405375\n.text:0000000000405377\n.text:0000000000405379\n.text:000000000040537a\n.text:000000000040537b\n.text:000000000040537e\n.text:0000000000405381\n.text:0000000000405384\n.text:000000000040538a\n.text:0000000000405390\n.text:0000000000405393\n.text:0000000000405396\n.text:0000000000405399\n.text:000000000040539e\n.text:00000000004053a1\n.text:00000000004053a4\n.text:00000000004053a6\n.text:00000000004053ab\n.text:00000000004053ad\n.text:00000000004053b0\n.text:00000000004053b2\n.text:00000000004053b5\n.text:00000000004053b8\n.text:00000000004053bf\n.text:00000000004053c2\n.text:00000000004053c4\n.text:00000000004053c7\n.text:00000000004053cb\n.text:00000000004053cd\n.text:00000000004053d1\n.text:00000000004053d8\n.text:00000000004053da\n.text:00000000004053dd\n.text:00000000004053e0\n.text:00000000004053e2\n.text:00000000004053e4\n.text:00000000004053e7\n.text:00000000004053ea\n.text:00000000004053ee\n.text:00000000004053ef\n.text:00000000004053f1\n.text:00000000004053f3\n.text:00000000004053f5\n.text:00000000004053f7\n.text:00000000004053f8\n'
p1112
tp1113
sS'quotearg_n_options'
p1114
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1115
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1116
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401780\nTEST R12D,R12D\nJS 0x004048f1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060a258]\nCMP dword ptr [0x0060a260],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040480b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60a268\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00405960\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060a258],R15\nJNZ 0x004047d2\nMOVUPS XMM0,xmmword ptr [0x0060a268]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060a260]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x004018c0\nMOV dword ptr [0x0060a260],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00403960\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040486d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x004048db\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60a3b0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00404898\nCALL 0x00401760\nMOV RDI,R15\nCALL 0x004059f0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00403960\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401770\n'
p1117
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 21 d0 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 de 5a 20 00\n44 39 25 df 5a 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 68 a2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 a8 11 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 93 5a 20 00\n75 0b\n0f 10 05 9a 5a 20 00\n41 0f 11 07\n8b 05 88 5a 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 cd d0 ff ff\n89 1d 67 5a 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 b0 a3 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 c8 ce ff ff\n4c 89 ff\ne8 50 11 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 7a ce ff ff\n'
p1118
S'.text:0000000000404740\n.text:0000000000404741\n.text:0000000000404743\n.text:0000000000404745\n.text:0000000000404747\n.text:0000000000404749\n.text:000000000040474a\n.text:000000000040474e\n.text:0000000000404751\n.text:0000000000404754\n.text:0000000000404757\n.text:000000000040475a\n.text:000000000040475f\n.text:0000000000404762\n.text:0000000000404768\n.text:000000000040476d\n.text:000000000040476f\n.text:0000000000404773\n.text:000000000040477a\n.text:0000000000404781\n.text:0000000000404786\n.text:000000000040478b\n.text:0000000000404790\n.text:0000000000404792\n.text:0000000000404797\n.text:000000000040479a\n.text:000000000040479d\n.text:00000000004047a3\n.text:00000000004047a5\n.text:00000000004047a8\n.text:00000000004047ac\n.text:00000000004047af\n.text:00000000004047b3\n.text:00000000004047b8\n.text:00000000004047bb\n.text:00000000004047be\n.text:00000000004047c5\n.text:00000000004047c7\n.text:00000000004047ce\n.text:00000000004047d2\n.text:00000000004047d8\n.text:00000000004047db\n.text:00000000004047df\n.text:00000000004047e2\n.text:00000000004047e5\n.text:00000000004047e9\n.text:00000000004047eb\n.text:00000000004047ee\n.text:00000000004047f3\n.text:00000000004047f9\n.text:00000000004047fc\n.text:0000000000404801\n.text:0000000000404806\n.text:000000000040480b\n.text:000000000040480e\n.text:0000000000404812\n.text:0000000000404816\n.text:000000000040481b\n.text:000000000040481f\n.text:0000000000404823\n.text:0000000000404827\n.text:000000000040482b\n.text:000000000040482f\n.text:0000000000404834\n.text:0000000000404837\n.text:000000000040483a\n.text:000000000040483d\n.text:0000000000404842\n.text:0000000000404845\n.text:0000000000404848\n.text:000000000040484b\n.text:000000000040484c\n.text:0000000000404851\n.text:0000000000404855\n.text:0000000000404858\n.text:000000000040485b\n.text:000000000040485d\n.text:0000000000404862\n.text:0000000000404866\n.text:000000000040486b\n.text:000000000040486d\n.text:0000000000404871\n.text:0000000000404876\n.text:0000000000404879\n.text:000000000040487c\n.text:0000000000404881\n.text:0000000000404886\n.text:0000000000404889\n.text:000000000040488e\n.text:0000000000404891\n.text:0000000000404893\n.text:0000000000404898\n.text:000000000040489b\n.text:00000000004048a0\n.text:00000000004048a3\n.text:00000000004048a6\n.text:00000000004048ab\n.text:00000000004048ae\n.text:00000000004048b2\n.text:00000000004048b5\n.text:00000000004048b8\n.text:00000000004048bd\n.text:00000000004048c2\n.text:00000000004048c7\n.text:00000000004048ca\n.text:00000000004048cd\n.text:00000000004048ce\n.text:00000000004048d3\n.text:00000000004048d7\n.text:00000000004048db\n.text:00000000004048df\n.text:00000000004048e2\n.text:00000000004048e6\n.text:00000000004048e7\n.text:00000000004048e9\n.text:00000000004048eb\n.text:00000000004048ed\n.text:00000000004048ef\n.text:00000000004048f0\n.text:00000000004048f1\n'
p1119
tp1120
sS'strcmp'
p1121
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1122
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060a128)();\u000a  return iVar1;\u000a}\u000a\u000a
p1123
S'JMP qword ptr [0x0060a128]\n'
p1124
S'ff 25 b2 87 20 00\n'
p1125
S'.plt:0000000000401970\n'
p1126
tp1127
sS'physmem_available'
p1128
(S'\n__stdcall physmem_available()\n'
p1129
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000adouble physmem_available(void)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  ulong uVar3;\u000a  undefined auVar4 [16];\u000a  double dVar5;\u000a  undefined4 uVar6;\u000a  undefined auVar7 [16];\u000a  undefined auStack120 [40];\u000a  ulong local_50;\u000a  ulong local_40;\u000a  uint local_10;\u000a  \u000a  uVar2 = sysconf(0x56);\u000a  uVar3 = sysconf(0x1e);\u000a  if ((long)(uVar3 | uVar2) < 0) {\u000a    iVar1 = sysinfo((sysinfo *)auStack120);\u000a    if (iVar1 != 0) {\u000a      dVar5 = physmem_total();\u000a      return dVar5 * _DAT_004071b8;\u000a    }\u000a    uVar6 = SUB164(_DAT_004071c0 >> 0x20,0);\u000a    auVar4 = subpd(CONCAT88(SUB168(CONCAT412(uVar6,ZEXT812(local_50) &\u000a                                                   (undefined  [12])0xffffffffffffffff |\u000a                                                   (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                            CONCAT44(SUB164(_DAT_004071c0,0),\u000a                                     SUB124(ZEXT812(local_50) & (undefined  [12])0xffffffffffffffff,\u000a                                            0))),CONCAT88(_DAT_004071d8,DAT_004071d0));\u000a    auVar7 = addpd(CONCAT412(SUB164(auVar4 >> 0x20,0),\u000a                             CONCAT48(SUB164(auVar4,0),SUB168(auVar4 >> 0x40,0))),auVar4);\u000a    auVar4 = subpd(CONCAT88(SUB168(CONCAT412(uVar6,ZEXT812(local_40) &\u000a                                                   (undefined  [12])0xffffffffffffffff |\u000a                                                   (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                            CONCAT44(SUB164(_DAT_004071c0,0),\u000a                                     SUB124(ZEXT812(local_40) & (undefined  [12])0xffffffffffffffff,\u000a                                            0))),CONCAT88(_DAT_004071d8,DAT_004071d0));\u000a    auVar4 = addpd(CONCAT412(SUB164(auVar4 >> 0x20,0),\u000a                             CONCAT48(SUB164(auVar4,0),SUB168(auVar4 >> 0x40,0))),auVar4);\u000a    dVar5 = SUB168(auVar4,0) + SUB168(auVar7,0);\u000a    uVar2 = (ulong)local_10;\u000a  }\u000a  else {\u000a    dVar5 = (double)uVar3;\u000a  }\u000a  return (double)uVar2 * dVar5;\u000a}\u000a\u000a
p1130
S'PUSH RBX\nSUB RSP,0x70\nMOV EDI,0x56\nCALL 0x00401af0\nMOV RBX,RAX\nMOV EDI,0x1e\nCALL 0x00401af0\nMOV RCX,RAX\nOR RCX,RBX\nJS 0x004036c4\nCVTSI2SD XMM1,RAX\nCVTSI2SD XMM0,RBX\nMULSD XMM0,XMM1\nJMP 0x004036dd\nMOV RDI,RSP\nCALL 0x00401b10\nTEST EAX,EAX\nJZ 0x004036e3\nCALL 0x00403610\nMULSD XMM0,qword ptr [0x004071b8]\nADD RSP,0x70\nPOP RBX\nRET\nMOVQ XMM0,qword ptr [RSP + 0x28]\nMOVDQA XMM1,xmmword ptr [0x004071c0]\nPUNPCKLDQ XMM0,XMM1\nMOVAPD XMM2,xmmword ptr [0x004071d0]\nSUBPD XMM0,XMM2\nPSHUFD XMM3,XMM0,0x4e\nADDPD XMM3,XMM0\nMOVQ XMM0,qword ptr [RSP + 0x38]\nPUNPCKLDQ XMM0,XMM1\nSUBPD XMM0,XMM2\nPSHUFD XMM1,XMM0,0x4e\nADDPD XMM1,XMM0\nADDSD XMM1,XMM3\nMOV EAX,dword ptr [RSP + 0x68]\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,RAX\nJMP 0x004036be\n'
p1131
S'53\n48 83 ec 70\nbf 56 00 00 00\ne8 51 e4 ff ff\n48 89 c3\nbf 1e 00 00 00\ne8 44 e4 ff ff\n48 89 c1\n48 09 d9\n78 10\nf2 48 0f 2a c8\nf2 48 0f 2a c3\nf2 0f 59 c1\neb 19\n48 89 e7\ne8 44 e4 ff ff\n85 c0\n74 13\ne8 3b ff ff ff\nf2 0f 59 05 db 3a 00 00\n48 83 c4 70\n5b\nc3\nf3 0f 7e 44 24 28\n66 0f 6f 0d cf 3a 00 00\n66 0f 62 c1\n66 0f 28 15 d3 3a 00 00\n66 0f 5c c2\n66 0f 70 d8 4e\n66 0f 58 d8\nf3 0f 7e 44 24 38\n66 0f 62 c1\n66 0f 5c c2\n66 0f 70 c8 4e\n66 0f 58 c8\nf2 0f 58 cb\n8b 44 24 68\n0f 57 c0\nf2 48 0f 2a c0\neb 8b\n'
p1132
S'.text:0000000000403690\n.text:0000000000403691\n.text:0000000000403695\n.text:000000000040369a\n.text:000000000040369f\n.text:00000000004036a2\n.text:00000000004036a7\n.text:00000000004036ac\n.text:00000000004036af\n.text:00000000004036b2\n.text:00000000004036b4\n.text:00000000004036b9\n.text:00000000004036be\n.text:00000000004036c2\n.text:00000000004036c4\n.text:00000000004036c7\n.text:00000000004036cc\n.text:00000000004036ce\n.text:00000000004036d0\n.text:00000000004036d5\n.text:00000000004036dd\n.text:00000000004036e1\n.text:00000000004036e2\n.text:00000000004036e3\n.text:00000000004036e9\n.text:00000000004036f1\n.text:00000000004036f5\n.text:00000000004036fd\n.text:0000000000403701\n.text:0000000000403706\n.text:000000000040370a\n.text:0000000000403710\n.text:0000000000403714\n.text:0000000000403718\n.text:000000000040371d\n.text:0000000000403721\n.text:0000000000403725\n.text:0000000000403729\n.text:000000000040372c\n.text:0000000000403731\n'
p1133
tp1134
sS'read'
p1135
(S'\n__stdcall read(int __fd, void * __buf, size_t __nbytes)\n'
p1136
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t read(int __fd,void *__buf,size_t __nbytes)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_read_0060a100)();\u000a  return sVar1;\u000a}\u000a\u000a
p1137
S'JMP qword ptr [0x0060a100]\n'
p1138
S'ff 25 da 87 20 00\n'
p1139
S'.plt:0000000000401920\n'
p1140
tp1141
sS'set_custom_quoting'
p1142
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1143
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1144
S'TEST RDI,RDI\nMOV EAX,0x60a370\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x004038d5\nTEST RDX,RDX\nJZ 0x004038d5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401770\n'
p1145
S'48 85 ff\nb8 70 a3 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 95 de ff ff\n'
p1146
S'.text:00000000004038b0\n.text:00000000004038b3\n.text:00000000004038b8\n.text:00000000004038bc\n.text:00000000004038c2\n.text:00000000004038c5\n.text:00000000004038c7\n.text:00000000004038ca\n.text:00000000004038cc\n.text:00000000004038d0\n.text:00000000004038d4\n.text:00000000004038d5\n.text:00000000004038d6\n'
p1147
tp1148
sS'c_isalpha'
p1149
(S'\n__stdcall c_isalpha()\n'
p1150
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1151
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00405fdb\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1152
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1153
S'.text:0000000000405fc0\n.text:0000000000405fc3\n.text:0000000000405fc6\n.text:0000000000405fc8\n.text:0000000000405fd2\n.text:0000000000405fd4\n.text:0000000000405fd7\n.text:0000000000405fda\n.text:0000000000405fdb\n.text:0000000000405fdd\n'
p1154
tp1155
sS'quotearg_custom_mem'
p1156
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1157
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1158
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00404b50\n'
p1159
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1160
S'.text:0000000000404be0\n.text:0000000000404be3\n.text:0000000000404be6\n.text:0000000000404be9\n.text:0000000000404bec\n.text:0000000000404bee\n.text:0000000000404bf1\n'
p1161
tp1162
sS'rpl_calloc'
p1163
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1164
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060a120)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1165
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00405b1b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00405b20\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00405b20\nPUSH RAX\nCALL 0x00401780\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401960\n'
p1166
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 6f bc ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 35 be ff ff\n'
p1167
S'.text:0000000000405ae0\n.text:0000000000405ae3\n.text:0000000000405ae8\n.text:0000000000405aea\n.text:0000000000405aed\n.text:0000000000405af2\n.text:0000000000405af4\n.text:0000000000405af7\n.text:0000000000405afb\n.text:0000000000405afd\n.text:0000000000405b00\n.text:0000000000405b03\n.text:0000000000405b06\n.text:0000000000405b09\n.text:0000000000405b0b\n.text:0000000000405b0c\n.text:0000000000405b11\n.text:0000000000405b17\n.text:0000000000405b19\n.text:0000000000405b1a\n.text:0000000000405b1b\n.text:0000000000405b20\n.text:0000000000405b23\n.text:0000000000405b26\n'
p1168
tp1169
sS'memset'
p1170
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1171
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060a0d0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1172
S'JMP qword ptr [0x0060a0d0]\n'
p1173
S'ff 25 0a 88 20 00\n'
p1174
S'.plt:00000000004018c0\n'
p1175
tp1176
sS'getc_unlocked'
p1177
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1178
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060a060)();\u000a  return iVar1;\u000a}\u000a\u000a
p1179
S'JMP qword ptr [0x0060a060]\n'
p1180
S'ff 25 7a 88 20 00\n'
p1181
S'.plt:00000000004017e0\n'
p1182
tp1183
sS'memmove'
p1184
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p1185
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_0060a1c0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1186
S'JMP qword ptr [0x0060a1c0]\n'
p1187
S'ff 25 1a 87 20 00\n'
p1188
S'.plt:0000000000401aa0\n'
p1189
tp1190
sS'c_isascii'
p1191
(S'\n__stdcall c_isascii()\n'
p1192
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1193
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1194
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1195
S'.text:0000000000405fe0\n.text:0000000000405fe6\n.text:0000000000405fe9\n'
p1196
tp1197
sS'setvbuf'
p1198
(S'\n__stdcall setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n'
p1199
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setvbuf(FILE *__stream,char *__buf,int __modes,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setvbuf_0060a1b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1200
S'JMP qword ptr [0x0060a1b0]\n'
p1201
S'ff 25 2a 87 20 00\n'
p1202
S'.plt:0000000000401a80\n'
p1203
tp1204
sS'physmem_total'
p1205
(S'\n__stdcall physmem_total()\n'
p1206
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000adouble physmem_total(void)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  ulong uVar3;\u000a  undefined auVar4 [16];\u000a  double dVar5;\u000a  undefined auStack120 [32];\u000a  ulong local_58;\u000a  uint local_10;\u000a  \u000a  uVar2 = sysconf(0x55);\u000a  uVar3 = sysconf(0x1e);\u000a  if ((long)(uVar3 | uVar2) < 0) {\u000a    iVar1 = sysinfo((sysinfo *)auStack120);\u000a    if (iVar1 != 0) {\u000a      return DAT_004071b0;\u000a    }\u000a    auVar4 = subpd(CONCAT88(SUB168(CONCAT412(DAT_004071c4,\u000a                                             ZEXT812(local_58) & (undefined  [12])0xffffffffffffffff\u000a                                             | (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                            CONCAT44(DAT_004071c0,\u000a                                     SUB124(ZEXT812(local_58) & (undefined  [12])0xffffffffffffffff,\u000a                                            0))),_DAT_004071d0);\u000a    auVar4 = addpd(CONCAT412(SUB164(auVar4 >> 0x20,0),\u000a                             CONCAT48(SUB164(auVar4,0),SUB168(auVar4 >> 0x40,0))),auVar4);\u000a    dVar5 = SUB168(auVar4,0);\u000a    uVar2 = (ulong)local_10;\u000a  }\u000a  else {\u000a    dVar5 = (double)uVar3;\u000a  }\u000a  return (double)uVar2 * dVar5;\u000a}\u000a\u000a
p1207
S'PUSH RBX\nSUB RSP,0x70\nMOV EDI,0x55\nCALL 0x00401af0\nMOV RBX,RAX\nMOV EDI,0x1e\nCALL 0x00401af0\nMOV RCX,RAX\nOR RCX,RBX\nJS 0x00403644\nCVTSI2SD XMM1,RAX\nCVTSI2SD XMM0,RBX\nMULSD XMM0,XMM1\nJMP 0x00403658\nMOV RDI,RSP\nCALL 0x00401b10\nTEST EAX,EAX\nJZ 0x0040365e\nMOVSD XMM0,qword ptr [0x004071b0]\nADD RSP,0x70\nPOP RBX\nRET\nMOVQ XMM0,qword ptr [RSP + 0x20]\nPUNPCKLDQ XMM0,xmmword ptr [0x004071c0]\nSUBPD XMM0,xmmword ptr [0x004071d0]\nPSHUFD XMM1,XMM0,0x4e\nADDPD XMM1,XMM0\nMOV EAX,dword ptr [RSP + 0x68]\nXORPS XMM0,XMM0\nCVTSI2SD XMM0,RAX\nJMP 0x0040363e\n'
p1208
S'53\n48 83 ec 70\nbf 55 00 00 00\ne8 d1 e4 ff ff\n48 89 c3\nbf 1e 00 00 00\ne8 c4 e4 ff ff\n48 89 c1\n48 09 d9\n78 10\nf2 48 0f 2a c8\nf2 48 0f 2a c3\nf2 0f 59 c1\neb 14\n48 89 e7\ne8 c4 e4 ff ff\n85 c0\n74 0e\nf2 0f 10 05 58 3b 00 00\n48 83 c4 70\n5b\nc3\nf3 0f 7e 44 24 20\n66 0f 62 05 54 3b 00 00\n66 0f 5c 05 5c 3b 00 00\n66 0f 70 c8 4e\n66 0f 58 c8\n8b 44 24 68\n0f 57 c0\nf2 48 0f 2a c0\neb b3\n'
p1209
S'.text:0000000000403610\n.text:0000000000403611\n.text:0000000000403615\n.text:000000000040361a\n.text:000000000040361f\n.text:0000000000403622\n.text:0000000000403627\n.text:000000000040362c\n.text:000000000040362f\n.text:0000000000403632\n.text:0000000000403634\n.text:0000000000403639\n.text:000000000040363e\n.text:0000000000403642\n.text:0000000000403644\n.text:0000000000403647\n.text:000000000040364c\n.text:000000000040364e\n.text:0000000000403650\n.text:0000000000403658\n.text:000000000040365c\n.text:000000000040365d\n.text:000000000040365e\n.text:0000000000403664\n.text:000000000040366c\n.text:0000000000403674\n.text:0000000000403679\n.text:000000000040367d\n.text:0000000000403681\n.text:0000000000403684\n.text:0000000000403689\n'
p1210
tp1211
sS'__ctype_b_loc'
p1212
(S'\n__stdcall __ctype_b_loc()\n'
p1213
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060a230)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1214
S'JMP qword ptr [0x0060a230]\n'
p1215
S'ff 25 aa 86 20 00\n'
p1216
S'.plt:0000000000401b80\n'
p1217
tp1218
sS'fdadvise'
p1219
(S'\n__stdcall fdadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p1220
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fdadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_0060a0f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1221
S'JMP 0x00401900\n'
p1222
S'e9 0b e4 ff ff\n'
p1223
S'.text:00000000004034f0\n'
p1224
tp1225
sS'quotearg'
p1226
(S'\n__stdcall quotearg(char * arg)\n'
p1227
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1228
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404730\n'
p1229
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1230
S'.text:0000000000404910\n.text:0000000000404913\n.text:0000000000404915\n.text:0000000000404918\n'
p1231
tp1232
sS'_start'
p1233
(S'\n__stdcall _start()\n'
p1234
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00609ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1235
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x4064f0\nMOV RCX,0x406480\nMOV RDI,0x401f30\nCALL qword ptr [0x00609ff0]\nHLT\n'
p1236
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 f0 64 40 00\n48 c7 c1 80 64 40 00\n48 c7 c7 30 1f 40 00\nff 15 36 84 20 00\nf4\n'
p1237
S'.text:0000000000401b90\n.text:0000000000401b92\n.text:0000000000401b95\n.text:0000000000401b96\n.text:0000000000401b99\n.text:0000000000401b9d\n.text:0000000000401b9e\n.text:0000000000401b9f\n.text:0000000000401ba6\n.text:0000000000401bad\n.text:0000000000401bb4\n.text:0000000000401bba\n'
p1238
tp1239
sS'c_iscntrl'
p1240
(S'\n__stdcall c_iscntrl()\n'
p1241
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1242
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00406008\nRET\nCMP EDI,0x7f\nJZ 0x00406007\nXOR EAX,EAX\nRET\n'
p1243
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1244
S'.text:0000000000406000\n.text:0000000000406002\n.text:0000000000406005\n.text:0000000000406007\n.text:0000000000406008\n.text:000000000040600b\n.text:000000000040600d\n.text:000000000040600f\n'
p1245
tp1246
sS'c_isblank'
p1247
(S'\n__stdcall c_isblank()\n'
p1248
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1249
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1250
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1251
S'.text:0000000000405ff0\n.text:0000000000405ff3\n.text:0000000000405ff6\n.text:0000000000405ff9\n.text:0000000000405ffc\n.text:0000000000405ffe\n'
p1252
tp1253
sS'atexit'
p1254
(S'\n__stdcall atexit(__func * __func)\n'
p1255
V\u000a/* WARNING: Removing unreachable block (ram,0x00406520) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060a1f0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1256
S'MOV RAX,0x60a240\nTEST RAX,RAX\nJZ 0x00406520\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401b00\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401b00\n'
p1257
S'48 c7 c0 40 a2 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 ea b5 ff ff\n31 d2\n31 f6\ne9 d7 b5 ff ff\n'
p1258
S'.text:0000000000406500\n.text:0000000000406507\n.text:000000000040650a\n.text:000000000040650c\n.text:000000000040650f\n.text:0000000000406511\n.text:0000000000406520\n.text:0000000000406522\n.text:0000000000406524\n'
p1259
tp1260
sS'fdopen'
p1261
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1262
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060a198)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1263
S'JMP qword ptr [0x0060a198]\n'
p1264
S'ff 25 42 87 20 00\n'
p1265
S'.plt:0000000000401a50\n'
p1266
tp1267
sS'error'
p1268
(S'\n__stdcall error()\n'
p1269
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060a1c8)();\u000a  return;\u000a}\u000a\u000a
p1270
S'JMP qword ptr [0x0060a1c8]\n'
p1271
S'ff 25 12 87 20 00\n'
p1272
S'.plt:0000000000401ab0\n'
p1273
tp1274
sS'strcaseeq6'
p1275
(S'\n__stdcall strcaseeq6()\n'
p1276
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1277
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406090\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404fd2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404fd9\nJMP 0x00404fee\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404fee\nTEST BPL,BPL\nJZ 0x00404fe9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00405000\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1278
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 d1 10 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1279
S'.text:0000000000404fb0\n.text:0000000000404fb1\n.text:0000000000404fb2\n.text:0000000000404fb3\n.text:0000000000404fb5\n.text:0000000000404fb8\n.text:0000000000404fba\n.text:0000000000404fbf\n.text:0000000000404fc3\n.text:0000000000404fc5\n.text:0000000000404fc7\n.text:0000000000404fca\n.text:0000000000404fcc\n.text:0000000000404fce\n.text:0000000000404fd0\n.text:0000000000404fd2\n.text:0000000000404fd4\n.text:0000000000404fd7\n.text:0000000000404fd9\n.text:0000000000404fdc\n.text:0000000000404fde\n.text:0000000000404fe1\n.text:0000000000404fe5\n.text:0000000000404fe6\n.text:0000000000404fe7\n.text:0000000000404fe9\n.text:0000000000404fee\n.text:0000000000404ff2\n.text:0000000000404ff3\n.text:0000000000404ff4\n'
p1280
tp1281
sS'strcaseeq5'
p1282
(S'\n__stdcall strcaseeq5()\n'
p1283
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1284
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406090\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404f86\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404f8d\nJMP 0x00404fa4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404fa4\nTEST BPL,BPL\nJZ 0x00404f9f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404fb0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1285
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 1d 11 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1286
S'.text:0000000000404f60\n.text:0000000000404f61\n.text:0000000000404f63\n.text:0000000000404f64\n.text:0000000000404f67\n.text:0000000000404f69\n.text:0000000000404f6c\n.text:0000000000404f6e\n.text:0000000000404f73\n.text:0000000000404f77\n.text:0000000000404f79\n.text:0000000000404f7b\n.text:0000000000404f7e\n.text:0000000000404f80\n.text:0000000000404f82\n.text:0000000000404f84\n.text:0000000000404f86\n.text:0000000000404f88\n.text:0000000000404f8b\n.text:0000000000404f8d\n.text:0000000000404f90\n.text:0000000000404f92\n.text:0000000000404f96\n.text:0000000000404f99\n.text:0000000000404f9a\n.text:0000000000404f9c\n.text:0000000000404f9d\n.text:0000000000404f9f\n.text:0000000000404fa4\n.text:0000000000404fa5\n.text:0000000000404fa7\n.text:0000000000404fa8\n'
p1287
tp1288
sS'strcaseeq7'
p1289
(S'\n__stdcall strcaseeq7()\n'
p1290
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1291
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00406090\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00405022\nTEST ECX,0xffffffdf\nJNZ 0x00405026\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040502a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1292
S'53\n48 89 fb\n31 ff\ne8 85 10 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1293
S'.text:0000000000405000\n.text:0000000000405001\n.text:0000000000405004\n.text:0000000000405006\n.text:000000000040500b\n.text:000000000040500f\n.text:0000000000405011\n.text:0000000000405013\n.text:0000000000405019\n.text:000000000040501b\n.text:0000000000405020\n.text:0000000000405021\n.text:0000000000405022\n.text:0000000000405024\n.text:0000000000405026\n.text:0000000000405028\n.text:0000000000405029\n.text:000000000040502a\n.text:000000000040502f\n.text:0000000000405030\n'
p1294
tp1295
sS'strcaseeq0'
p1296
(S'\n__stdcall strcaseeq0()\n'
p1297
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1298
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406090\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404d35\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404d3c\nJMP 0x00404d70\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404d70\nTEST BPL,BPL\nJZ 0x00404d6b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404d80\nJMP 0x00404d70\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1299
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 6d 13 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1300
S'.text:0000000000404d00\n.text:0000000000404d01\n.text:0000000000404d03\n.text:0000000000404d05\n.text:0000000000404d07\n.text:0000000000404d09\n.text:0000000000404d0a\n.text:0000000000404d0b\n.text:0000000000404d0e\n.text:0000000000404d11\n.text:0000000000404d14\n.text:0000000000404d17\n.text:0000000000404d19\n.text:0000000000404d1c\n.text:0000000000404d1e\n.text:0000000000404d23\n.text:0000000000404d26\n.text:0000000000404d28\n.text:0000000000404d2a\n.text:0000000000404d2d\n.text:0000000000404d2f\n.text:0000000000404d31\n.text:0000000000404d33\n.text:0000000000404d35\n.text:0000000000404d37\n.text:0000000000404d3a\n.text:0000000000404d3c\n.text:0000000000404d3f\n.text:0000000000404d41\n.text:0000000000404d45\n.text:0000000000404d4a\n.text:0000000000404d4d\n.text:0000000000404d51\n.text:0000000000404d55\n.text:0000000000404d59\n.text:0000000000404d5d\n.text:0000000000404d61\n.text:0000000000404d64\n.text:0000000000404d69\n.text:0000000000404d6b\n.text:0000000000404d70\n.text:0000000000404d74\n.text:0000000000404d75\n.text:0000000000404d77\n.text:0000000000404d79\n.text:0000000000404d7b\n.text:0000000000404d7d\n.text:0000000000404d7e\n'
p1301
tp1302
sS'strcaseeq2'
p1303
(S'\n__stdcall strcaseeq2()\n'
p1304
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1305
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406090\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404e46\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404e4d\nJMP 0x00404e7a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404e7a\nTEST BPL,BPL\nJZ 0x00404e75\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404e90\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1306
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 5d 12 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1307
S'.text:0000000000404e10\n.text:0000000000404e11\n.text:0000000000404e13\n.text:0000000000404e15\n.text:0000000000404e17\n.text:0000000000404e19\n.text:0000000000404e1a\n.text:0000000000404e1b\n.text:0000000000404e1e\n.text:0000000000404e21\n.text:0000000000404e24\n.text:0000000000404e27\n.text:0000000000404e29\n.text:0000000000404e2c\n.text:0000000000404e2e\n.text:0000000000404e33\n.text:0000000000404e37\n.text:0000000000404e39\n.text:0000000000404e3b\n.text:0000000000404e3e\n.text:0000000000404e40\n.text:0000000000404e42\n.text:0000000000404e44\n.text:0000000000404e46\n.text:0000000000404e48\n.text:0000000000404e4b\n.text:0000000000404e4d\n.text:0000000000404e50\n.text:0000000000404e52\n.text:0000000000404e56\n.text:0000000000404e5a\n.text:0000000000404e5e\n.text:0000000000404e62\n.text:0000000000404e65\n.text:0000000000404e69\n.text:0000000000404e6a\n.text:0000000000404e6c\n.text:0000000000404e6e\n.text:0000000000404e70\n.text:0000000000404e72\n.text:0000000000404e73\n.text:0000000000404e75\n.text:0000000000404e7a\n.text:0000000000404e7e\n.text:0000000000404e7f\n.text:0000000000404e81\n.text:0000000000404e83\n.text:0000000000404e85\n.text:0000000000404e87\n.text:0000000000404e88\n'
p1308
tp1309
sS'strcaseeq1'
p1310
(S'\n__stdcall strcaseeq1()\n'
p1311
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1312
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00406090\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x00404dbd\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404dc4\nJMP 0x00404df7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404df7\nTEST BPL,BPL\nJZ 0x00404df2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404e10\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1313
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 e6 12 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1314
S'.text:0000000000404d80\n.text:0000000000404d81\n.text:0000000000404d83\n.text:0000000000404d85\n.text:0000000000404d87\n.text:0000000000404d89\n.text:0000000000404d8a\n.text:0000000000404d8b\n.text:0000000000404d90\n.text:0000000000404d93\n.text:0000000000404d96\n.text:0000000000404d99\n.text:0000000000404d9b\n.text:0000000000404d9e\n.text:0000000000404da3\n.text:0000000000404da5\n.text:0000000000404daa\n.text:0000000000404dae\n.text:0000000000404db0\n.text:0000000000404db2\n.text:0000000000404db5\n.text:0000000000404db7\n.text:0000000000404db9\n.text:0000000000404dbb\n.text:0000000000404dbd\n.text:0000000000404dbf\n.text:0000000000404dc2\n.text:0000000000404dc4\n.text:0000000000404dc7\n.text:0000000000404dc9\n.text:0000000000404dcd\n.text:0000000000404dd1\n.text:0000000000404dd5\n.text:0000000000404ddb\n.text:0000000000404ddf\n.text:0000000000404de2\n.text:0000000000404de6\n.text:0000000000404de7\n.text:0000000000404de9\n.text:0000000000404deb\n.text:0000000000404ded\n.text:0000000000404def\n.text:0000000000404df0\n.text:0000000000404df2\n.text:0000000000404df7\n.text:0000000000404dfb\n.text:0000000000404dfc\n.text:0000000000404dfe\n.text:0000000000404e00\n.text:0000000000404e02\n.text:0000000000404e04\n.text:0000000000404e05\n'
p1315
tp1316
sS'strcaseeq4'
p1317
(S'\n__stdcall strcaseeq4()\n'
p1318
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1319
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406090\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00404f2c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404f33\nJMP 0x00404f54\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404f54\nTEST BPL,BPL\nJZ 0x00404f4f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404f60\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1320
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 77 11 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1321
S'.text:0000000000404f00\n.text:0000000000404f01\n.text:0000000000404f03\n.text:0000000000404f05\n.text:0000000000404f06\n.text:0000000000404f07\n.text:0000000000404f0a\n.text:0000000000404f0d\n.text:0000000000404f0f\n.text:0000000000404f12\n.text:0000000000404f14\n.text:0000000000404f19\n.text:0000000000404f1d\n.text:0000000000404f1f\n.text:0000000000404f21\n.text:0000000000404f24\n.text:0000000000404f26\n.text:0000000000404f28\n.text:0000000000404f2a\n.text:0000000000404f2c\n.text:0000000000404f2e\n.text:0000000000404f31\n.text:0000000000404f33\n.text:0000000000404f36\n.text:0000000000404f38\n.text:0000000000404f3c\n.text:0000000000404f40\n.text:0000000000404f43\n.text:0000000000404f47\n.text:0000000000404f48\n.text:0000000000404f4a\n.text:0000000000404f4c\n.text:0000000000404f4d\n.text:0000000000404f4f\n.text:0000000000404f54\n.text:0000000000404f58\n.text:0000000000404f59\n.text:0000000000404f5b\n.text:0000000000404f5d\n.text:0000000000404f5e\n'
p1322
tp1323
sS'strcaseeq3'
p1324
(S'\n__stdcall strcaseeq3()\n'
p1325
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1326
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406090\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404ec0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404ec7\nJMP 0x00404eea\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404eea\nTEST BPL,BPL\nJZ 0x00404ee5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404f00\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1327
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 e3 11 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1328
S'.text:0000000000404e90\n.text:0000000000404e91\n.text:0000000000404e93\n.text:0000000000404e95\n.text:0000000000404e97\n.text:0000000000404e98\n.text:0000000000404e9b\n.text:0000000000404e9e\n.text:0000000000404ea1\n.text:0000000000404ea3\n.text:0000000000404ea6\n.text:0000000000404ea8\n.text:0000000000404ead\n.text:0000000000404eb1\n.text:0000000000404eb3\n.text:0000000000404eb5\n.text:0000000000404eb8\n.text:0000000000404eba\n.text:0000000000404ebc\n.text:0000000000404ebe\n.text:0000000000404ec0\n.text:0000000000404ec2\n.text:0000000000404ec5\n.text:0000000000404ec7\n.text:0000000000404eca\n.text:0000000000404ecc\n.text:0000000000404ed0\n.text:0000000000404ed4\n.text:0000000000404ed8\n.text:0000000000404edb\n.text:0000000000404edc\n.text:0000000000404ede\n.text:0000000000404ee0\n.text:0000000000404ee2\n.text:0000000000404ee3\n.text:0000000000404ee5\n.text:0000000000404eea\n.text:0000000000404eeb\n.text:0000000000404eed\n.text:0000000000404eef\n.text:0000000000404ef1\n.text:0000000000404ef2\n'
p1329
tp1330
sS'register_tm_clones'
p1331
(S'\n__stdcall register_tm_clones()\n'
p1332
V\u000a/* WARNING: Removing unreachable block (ram,0x00401c23) */\u000a/* WARNING: Removing unreachable block (ram,0x00401c2d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1333
S'MOV ESI,0x60a2b8\nPUSH RBP\nSUB RSI,0x60a2b8\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401c38\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401c38\nPOP RBP\nMOV EDI,0x60a2b8\nJMP RAX\nPOP RBP\nRET\n'
p1334
S'be b8 a2 60 00\n55\n48 81 ee b8 a2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf b8 a2 60 00\nff e0\n5d\nc3\n'
p1335
S'.text:0000000000401c00\n.text:0000000000401c05\n.text:0000000000401c06\n.text:0000000000401c0d\n.text:0000000000401c11\n.text:0000000000401c14\n.text:0000000000401c17\n.text:0000000000401c1b\n.text:0000000000401c1e\n.text:0000000000401c21\n.text:0000000000401c23\n.text:0000000000401c28\n.text:0000000000401c2b\n.text:0000000000401c2d\n.text:0000000000401c2e\n.text:0000000000401c33\n.text:0000000000401c38\n.text:0000000000401c39\n'
p1336
tp1337
sS'c_islower'
p1338
(S'\n__stdcall c_islower()\n'
p1339
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1340
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1341
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1342
S'.text:0000000000406030\n.text:0000000000406033\n.text:0000000000406036\n.text:0000000000406039\n'
p1343
tp1344
sS'call_chunkfun'
p1345
(S'\n__stdcall call_chunkfun(obstack * h, size_t size)\n'
p1346
V\u000avoid * call_chunkfun(obstack *h,size_t size)\u000a\u000a{\u000a  void *pvVar1;\u000a  undefined8 in_RDX;\u000a  \u000a  if ((*(byte *)&h->use_extra_arg_bitfield & 1) == 0) {\u000a                    /* WARNING: Could not recover jumptable at 0x00405e5c. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a    pvVar1 = (void *)(*(code *)h->chunkfun)(size);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Could not recover jumptable at 0x00405e67. Too many branches */\u000a                    /* WARNING: Treating indirect jump as call */\u000a  pvVar1 = (void *)(*(code *)h->chunkfun)(h->extra_arg,size,in_RDX,(code *)h->chunkfun);\u000a  return pvVar1;\u000a}\u000a\u000a
p1347
S'MOV RAX,RDI\nTEST byte ptr [RAX + 0x50],0x1\nJNZ 0x00405e5f\nMOV RDI,RSI\nJMP qword ptr [RAX + 0x38]\nMOV RCX,qword ptr [RAX + 0x38]\nMOV RDI,qword ptr [RAX + 0x48]\nJMP RCX\n'
p1348
S'48 89 f8\nf6 40 50 01\n75 06\n48 89 f7\nff 60 38\n48 8b 48 38\n48 8b 78 48\nff e1\n'
p1349
S'.text:0000000000405e50\n.text:0000000000405e53\n.text:0000000000405e57\n.text:0000000000405e59\n.text:0000000000405e5c\n.text:0000000000405e5f\n.text:0000000000405e63\n.text:0000000000405e67\n'
p1350
tp1351
sS'fwrite'
p1352
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1353
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060a208)();\u000a  return sVar1;\u000a}\u000a\u000a
p1354
S'JMP qword ptr [0x0060a208]\n'
p1355
S'ff 25 d2 86 20 00\n'
p1356
S'.plt:0000000000401b30\n'
p1357
tp1358
sS'readtokens0_init'
p1359
(S'\n__stdcall readtokens0_init(Tokens * t)\n'
p1360
V\u000avoid readtokens0_init(Tokens *t)\u000a\u000a{\u000a  *(undefined4 *)&t->n_tok = 0;\u000a  *(undefined4 *)((long)&t->n_tok + 4) = 0;\u000a  *(undefined4 *)&t->tok = 0;\u000a  *(undefined4 *)((long)&t->tok + 4) = 0;\u000a  t->tok_len = (size_t *)0x0;\u000a  _obstack_begin(&t->o_data,0,0,malloc,free);\u000a  _obstack_begin(&t->o_tok,0,0,malloc,free);\u000a  _obstack_begin(&t->o_tok_len,0,0,malloc,free);\u000a  return;\u000a}\u000a\u000a
p1361
S'PUSH RBX\nMOV RBX,RDI\nLEA RDI,[RBX + 0x18]\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX],XMM0\nMOV qword ptr [RBX + 0x10],0x0\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x4019e0\nMOV R8D,0x401760\nCALL 0x00405c70\nLEA RDI,[RBX + 0x70]\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x4019e0\nMOV R8D,0x401760\nCALL 0x00405c70\nADD RBX,0xc8\nXOR ESI,ESI\nXOR EDX,EDX\nMOV ECX,0x4019e0\nMOV R8D,0x401760\nMOV RDI,RBX\nPOP RBX\nJMP 0x00405c70\n'
p1362
S'53\n48 89 fb\n48 8d 7b 18\n0f 57 c0\n0f 11 03\n48 c7 43 10 00 00 00 00\n31 f6\n31 d2\nb9 e0 19 40 00\n41 b8 60 17 40 00\ne8 06 0c 00 00\n48 8d 7b 70\n31 f6\n31 d2\nb9 e0 19 40 00\n41 b8 60 17 40 00\ne8 ee 0b 00 00\n48 81 c3 c8 00 00 00\n31 f6\n31 d2\nb9 e0 19 40 00\n41 b8 60 17 40 00\n48 89 df\n5b\ne9 cf 0b 00 00\n'
p1363
S'.text:0000000000405040\n.text:0000000000405041\n.text:0000000000405044\n.text:0000000000405048\n.text:000000000040504b\n.text:000000000040504e\n.text:0000000000405056\n.text:0000000000405058\n.text:000000000040505a\n.text:000000000040505f\n.text:0000000000405065\n.text:000000000040506a\n.text:000000000040506e\n.text:0000000000405070\n.text:0000000000405072\n.text:0000000000405077\n.text:000000000040507d\n.text:0000000000405082\n.text:0000000000405089\n.text:000000000040508b\n.text:000000000040508d\n.text:0000000000405092\n.text:0000000000405098\n.text:000000000040509b\n.text:000000000040509c\n'
p1364
tp1365
sS'__do_global_dtors_aux'
p1366
(S'\n__stdcall __do_global_dtors_aux()\n'
p1367
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1368
S'CMP byte ptr [0x0060a308],0x0\nJNZ 0x00401c5a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401bc0\nPOP RBP\nMOV byte ptr [0x0060a308],0x1\nRET\n'
p1369
S'80 3d c1 86 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 ae 86 20 00 01\nf3 c3\n'
p1370
S'.text:0000000000401c40\n.text:0000000000401c47\n.text:0000000000401c49\n.text:0000000000401c4a\n.text:0000000000401c4d\n.text:0000000000401c52\n.text:0000000000401c53\n.text:0000000000401c5a\n'
p1371
tp1372
sS'c_isprint'
p1373
(S'\n__stdcall c_isprint()\n'
p1374
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1375
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1376
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1377
S'.text:0000000000406040\n.text:0000000000406043\n.text:0000000000406046\n.text:0000000000406049\n'
p1378
tp1379
sS'_fini'
p1380
(S'\n__stdcall _fini()\n'
p1381
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1382
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1383
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1384
S'.fini:0000000000406550\n.fini:0000000000406554\n.fini:0000000000406558\n'
p1385
tp1386
sS'argv_iter_init_stream'
p1387
(S'\n__stdcall argv_iter_init_stream(FILE * fp)\n'
p1388
V\u000aargv_iterator * argv_iter_init_stream(FILE *fp)\u000a\u000a{\u000a  argv_iterator *paVar1;\u000a  \u000a  paVar1 = (argv_iterator *)malloc(0x30);\u000a  if (paVar1 != (argv_iterator *)0x0) {\u000a    paVar1->fp = fp;\u000a    *(undefined4 *)&paVar1->buf_len = 0;\u000a    *(undefined4 *)((long)&paVar1->buf_len + 4) = 0;\u000a    *(undefined4 *)&paVar1->arg_list = 0;\u000a    *(undefined4 *)((long)&paVar1->arg_list + 4) = 0;\u000a    *(undefined4 *)&paVar1->item_idx = 0;\u000a    *(undefined4 *)((long)&paVar1->item_idx + 4) = 0;\u000a    *(undefined4 *)&paVar1->tok = 0;\u000a    *(undefined4 *)((long)&paVar1->tok + 4) = 0;\u000a    return paVar1;\u000a  }\u000a  return (argv_iterator *)0x0;\u000a}\u000a\u000a
p1389
S'PUSH RBX\nMOV RBX,RDI\nMOV EDI,0x30\nCALL 0x004019e0\nTEST RAX,RAX\nJZ 0x00403333\nMOV qword ptr [RAX],RBX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RAX + 0x18],XMM0\nMOVUPS xmmword ptr [RAX + 0x8],XMM0\nPOP RBX\nRET\nXOR EAX,EAX\nPOP RBX\nRET\n'
p1390
S'53\n48 89 fb\nbf 30 00 00 00\ne8 c2 e6 ff ff\n48 85 c0\n74 10\n48 89 18\n0f 57 c0\n0f 11 40 18\n0f 11 40 08\n5b\nc3\n31 c0\n5b\nc3\n'
p1391
S'.text:0000000000403310\n.text:0000000000403311\n.text:0000000000403314\n.text:0000000000403319\n.text:000000000040331e\n.text:0000000000403321\n.text:0000000000403323\n.text:0000000000403326\n.text:0000000000403329\n.text:000000000040332d\n.text:0000000000403331\n.text:0000000000403332\n.text:0000000000403333\n.text:0000000000403335\n.text:0000000000403336\n'
p1392
tp1393
sS'argv_iter_free'
p1394
(S'\n__stdcall argv_iter_free(argv_iterator * ai)\n'
p1395
V\u000avoid argv_iter_free(argv_iterator *ai)\u000a\u000a{\u000a  if (ai->fp != (FILE *)0x0) {\u000a    free(ai->tok);\u000a  }\u000a  free(ai);\u000a  return;\u000a}\u000a\u000a
p1396
S'PUSH RBX\nMOV RBX,RDI\nCMP qword ptr [RBX],0x0\nJZ 0x00403403\nMOV RDI,qword ptr [RBX + 0x10]\nCALL 0x00401760\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401760\n'
p1397
S'53\n48 89 fb\n48 83 3b 00\n74 09\n48 8b 7b 10\ne8 5d e3 ff ff\n48 89 df\n5b\ne9 54 e3 ff ff\n'
p1398
S'.text:00000000004033f0\n.text:00000000004033f1\n.text:00000000004033f4\n.text:00000000004033f8\n.text:00000000004033fa\n.text:00000000004033fe\n.text:0000000000403403\n.text:0000000000403406\n.text:0000000000403407\n'
p1399
tp1400
sS'_obstack_newchunk'
p1401
(S'\n__stdcall _obstack_newchunk(obstack * h, size_t length)\n'
p1402
V\u000avoid _obstack_newchunk(obstack *h,size_t length)\u000a\u000a{\u000a  _obstack_chunk *old_chunk;\u000a  char *__dest;\u000a  ulong uVar1;\u000a  char *__src;\u000a  _obstack_chunk *p_Var2;\u000a  char *__n;\u000a  \u000a  old_chunk = h->chunk;\u000a  __n = h->next_free + -(long)h->object_base;\u000a  __dest = __n + length + h->alignment_mask;\u000a  uVar1 = ((ulong)__n >> 3) + 100;\u000a  __src = __dest + uVar1;\u000a  if (CARRY8(uVar1,(ulong)__dest)) {\u000a    __src = __dest;\u000a  }\u000a  if (__src < (char *)h->chunk_size) {\u000a    __src = (char *)h->chunk_size;\u000a  }\u000a  if ((!CARRY8(length,(ulong)__n)) && (CARRY8((ulong)(__n + length),h->alignment_mask) == false)) {\u000a    p_Var2 = (_obstack_chunk *)call_chunkfun(h,(size_t)__src);\u000a    if (p_Var2 != (_obstack_chunk *)0x0) goto LAB_00405dae;\u000a  }\u000a  (*obstack_alloc_failed_handler)();\u000a  p_Var2 = (_obstack_chunk *)0x0;\u000aLAB_00405dae:\u000a  h->chunk = p_Var2;\u000a  p_Var2->prev = old_chunk;\u000a  __src = (char *)((long)&p_Var2->limit + (long)__src);\u000a  h->chunk_limit = __src;\u000a  p_Var2->limit = __src;\u000a  __src = h->object_base;\u000a  uVar1 = h->alignment_mask;\u000a  __dest = (char *)((ulong)(p_Var2->contents + uVar1) & ~uVar1);\u000a  memcpy(__dest,__src,(size_t)__n);\u000a  if (((*(byte *)&h->use_extra_arg_bitfield & 2) == 0) &&\u000a     (__src == (char *)((ulong)(old_chunk->contents + uVar1) & ~uVar1))) {\u000a    p_Var2->prev = old_chunk->prev;\u000a    call_freefun(h,old_chunk);\u000a  }\u000a  h->object_base = __dest;\u000a  h->next_free = __n + (long)__dest;\u000a  *(byte *)&h->use_extra_arg_bitfield = *(byte *)&h->use_extra_arg_bitfield & 0xfd;\u000a  return;\u000a}\u000a\u000a
p1403
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,RDI\nMOV RCX,qword ptr [R12]\nMOV R15,qword ptr [R12 + 0x8]\nMOV R14,qword ptr [R12 + 0x18]\nSUB R14,qword ptr [R12 + 0x10]\nLEA RDX,[R14 + RSI*0x1]\nADD RDX,qword ptr [R12 + 0x30]\nSETC AL\nMOV RBX,R14\nSHR RBX,0x3\nADD RBX,0x64\nADD RBX,RDX\nCMOVC RBX,RDX\nCMP RBX,RCX\nCMOVC RBX,RCX\nADD RSI,R14\nJC 0x00405da5\nTEST AL,AL\nJNZ 0x00405da5\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00405e50\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00405dae\nCALL qword ptr [0x0060a2b0]\nXOR R13D,R13D\nMOV qword ptr [R12 + 0x8],R13\nMOV qword ptr [R13 + 0x8],R15\nADD RBX,R13\nMOV qword ptr [R12 + 0x20],RBX\nMOV qword ptr [R13],RBX\nMOV RSI,qword ptr [R12 + 0x10]\nMOV RBP,qword ptr [R12 + 0x30]\nLEA RBX,[RBP + R13*0x1 + 0x10]\nMOV qword ptr [RSP + 0x8],R15\nMOV R15,RBP\nNOT R15\nAND RBX,R15\nMOV RDI,RBX\nMOV qword ptr [RSP + 0x10],RSI\nMOV RDX,R14\nCALL 0x00401990\nTEST byte ptr [R12 + 0x50],0x2\nJNZ 0x00405e21\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RAX,[RBP + RAX*0x1 + 0x10]\nAND RAX,R15\nCMP qword ptr [RSP + 0x10],RAX\nJNZ 0x00405e21\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [R13 + 0x8],RAX\nMOV RDI,R12\nCALL 0x00405e70\nMOV qword ptr [R12 + 0x10],RBX\nADD R14,RBX\nMOV qword ptr [R12 + 0x18],R14\nAND byte ptr [R12 + 0x50],0xfd\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1404
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 fc\n49 8b 0c 24\n4d 8b 7c 24 08\n4d 8b 74 24 18\n4d 2b 74 24 10\n49 8d 14 36\n49 03 54 24 30\n0f 92 c0\n4c 89 f3\n48 c1 eb 03\n48 83 c3 64\n48 01 d3\n48 0f 42 da\n48 39 cb\n48 0f 42 d9\n4c 01 f6\n72 17\n84 c0\n75 13\n4c 89 e7\n48 89 de\ne8 b3 00 00 00\n49 89 c5\n4d 85 ed\n75 09\nff 15 05 45 20 00\n45 31 ed\n4d 89 6c 24 08\n4d 89 7d 08\n4c 01 eb\n49 89 5c 24 20\n49 89 5d 00\n49 8b 74 24 10\n49 8b 6c 24 30\n4a 8d 5c 2d 10\n4c 89 7c 24 08\n49 89 ef\n49 f7 d7\n4c 21 fb\n48 89 df\n48 89 74 24 10\n4c 89 f2\ne8 a0 bb ff ff\n41 f6 44 24 50 02\n75 29\n48 8b 44 24 08\n48 8d 44 05 10\n4c 21 f8\n48 39 44 24 10\n75 15\n48 8b 74 24 08\n48 8b 46 08\n49 89 45 08\n4c 89 e7\ne8 4f 00 00 00\n49 89 5c 24 10\n49 01 de\n4d 89 74 24 18\n41 80 64 24 50 fd\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1405
S'.text:0000000000405d40\n.text:0000000000405d41\n.text:0000000000405d43\n.text:0000000000405d45\n.text:0000000000405d47\n.text:0000000000405d49\n.text:0000000000405d4a\n.text:0000000000405d4e\n.text:0000000000405d51\n.text:0000000000405d55\n.text:0000000000405d5a\n.text:0000000000405d5f\n.text:0000000000405d64\n.text:0000000000405d68\n.text:0000000000405d6d\n.text:0000000000405d70\n.text:0000000000405d73\n.text:0000000000405d77\n.text:0000000000405d7b\n.text:0000000000405d7e\n.text:0000000000405d82\n.text:0000000000405d85\n.text:0000000000405d89\n.text:0000000000405d8c\n.text:0000000000405d8e\n.text:0000000000405d90\n.text:0000000000405d92\n.text:0000000000405d95\n.text:0000000000405d98\n.text:0000000000405d9d\n.text:0000000000405da0\n.text:0000000000405da3\n.text:0000000000405da5\n.text:0000000000405dab\n.text:0000000000405dae\n.text:0000000000405db3\n.text:0000000000405db7\n.text:0000000000405dba\n.text:0000000000405dbf\n.text:0000000000405dc3\n.text:0000000000405dc8\n.text:0000000000405dcd\n.text:0000000000405dd2\n.text:0000000000405dd7\n.text:0000000000405dda\n.text:0000000000405ddd\n.text:0000000000405de0\n.text:0000000000405de3\n.text:0000000000405de8\n.text:0000000000405deb\n.text:0000000000405df0\n.text:0000000000405df6\n.text:0000000000405df8\n.text:0000000000405dfd\n.text:0000000000405e02\n.text:0000000000405e05\n.text:0000000000405e0a\n.text:0000000000405e0c\n.text:0000000000405e11\n.text:0000000000405e15\n.text:0000000000405e19\n.text:0000000000405e1c\n.text:0000000000405e21\n.text:0000000000405e26\n.text:0000000000405e29\n.text:0000000000405e2e\n.text:0000000000405e34\n.text:0000000000405e38\n.text:0000000000405e39\n.text:0000000000405e3b\n.text:0000000000405e3d\n.text:0000000000405e3f\n.text:0000000000405e41\n.text:0000000000405e42\n'
p1406
tp1407
sS'__fpending'
p1408
(S'\n__stdcall __fpending()\n'
p1409
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060a050)();\u000a  return;\u000a}\u000a\u000a
p1410
S'JMP qword ptr [0x0060a050]\n'
p1411
S'ff 25 8a 88 20 00\n'
p1412
S'.plt:00000000004017c0\n'
p1413
tp1414
s.