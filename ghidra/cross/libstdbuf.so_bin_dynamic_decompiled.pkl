(dp0
S'setvbuf'
p1
(S'\n__stdcall setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setvbuf(FILE *__stream,char *__buf,int __modes,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setvbuf_00301040)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x00301040]\n'
p4
S'ff 25 5a 08 20 00\n'
p5
S'.plt:00000000001007e0\n'
p6
tp7
sS'__cxa_finalize'
p8
(S'\n__stdcall __cxa_finalize()\n'
p9
V\u000avoid __cxa_finalize(void)\u000a\u000a{\u000a  (*(code *)PTR___cxa_finalize_00300fe8)();\u000a  return;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x00300fe8]\n'
p11
S'ff 25 d2 07 20 00\n'
p12
S'.plt.got:0000000000100810\n'
p13
tp14
sS'malloc'
p15
(S'\n__stdcall malloc(size_t __size)\n'
p16
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00301038)();\u000a  return pvVar1;\u000a}\u000a\u000a
p17
S'JMP qword ptr [0x00301038]\n'
p18
S'ff 25 62 08 20 00\n'
p19
S'.plt:00000000001007d0\n'
p20
tp21
sS'register_tm_clones'
p22
(S'\n__stdcall register_tm_clones()\n'
p23
V\u000a/* WARNING: Removing unreachable block (ram,0x00100888) */\u000a/* WARNING: Removing unreachable block (ram,0x00100894) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p24
S'LEA RDI,[0x301060]\nLEA RSI,[0x301060]\nPUSH RBP\nSUB RSI,RDI\nMOV RBP,RSP\nSAR RSI,0x3\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x001008a0\nMOV RAX,qword ptr [0x00300fe0]\nTEST RAX,RAX\nJZ 0x001008a0\nPOP RBP\nJMP RAX\nPOP RBP\nRET\n'
p25
S'48 8d 3d f9 07 20 00\n48 8d 35 f2 07 20 00\n55\n48 29 fe\n48 89 e5\n48 c1 fe 03\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 18\n48 8b 05 51 07 20 00\n48 85 c0\n74 0c\n5d\nff e0\n5d\nc3\n'
p26
S'.text:0000000000100860\n.text:0000000000100867\n.text:000000000010086e\n.text:000000000010086f\n.text:0000000000100872\n.text:0000000000100875\n.text:0000000000100879\n.text:000000000010087c\n.text:0000000000100880\n.text:0000000000100883\n.text:0000000000100886\n.text:0000000000100888\n.text:000000000010088f\n.text:0000000000100892\n.text:0000000000100894\n.text:0000000000100895\n.text:00000000001008a0\n.text:00000000001008a1\n'
p27
tp28
sS'_init'
p29
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p30
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00300fd0;\u000a  if (PTR___gmon_start___00300fd0 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00300fd0)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p31
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00300fd0]\nTEST RAX,RAX\nJZ 0x0010077a\nCALL RAX\nADD RSP,0x8\nRET\n'
p32
S'48 83 ec 08\n48 8b 05 5d 08 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p33
S'.init:0000000000100768\n.init:000000000010076c\n.init:0000000000100773\n.init:0000000000100776\n.init:0000000000100778\n.init:000000000010077a\n.init:000000000010077e\n'
p34
tp35
sS'apply_mode'
p36
(S'\n__stdcall apply_mode()\n'
p37
V\u000avoid apply_mode(FILE *pFParm1,char *pcParm2)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  int __modes;\u000a  uint uVar2;\u000a  undefined8 uVar3;\u000a  undefined8 uVar4;\u000a  ulong __size;\u000a  char *__buf;\u000a  \u000a  if (*pcParm2 == '0') {\u000a    __modes = 2;\u000a  }\u000a  else {\u000a    if (*pcParm2 != 'L') {\u000a      __modes = 0;\u000a      __size = strtoul(pcParm2,(char **)0x0,10);\u000a      if (__size == 0) {\u000a        uVar1 = *(undefined8 *)PTR_stderr_00300ff0;\u000a        uVar3 = dcgettext(0,"invalid buffering mode %s for %s\u005cn",5);\u000a        uVar2 = fileno(pFParm1);\u000a        uVar4 = fileno_to_name((ulong)uVar2);\u000a        __fprintf_chk(uVar1,1,uVar3,pcParm2,uVar4);\u000a        return;\u000a      }\u000a      __buf = (char *)malloc(__size);\u000a      if (__buf == (char *)0x0) {\u000a        uVar1 = *(undefined8 *)PTR_stderr_00300ff0;\u000a        uVar3 = dcgettext(0,"failed to allocate a %lu byte stdio buffer\u005cn",5);\u000a        __fprintf_chk(uVar1,1,uVar3,__size);\u000a        return;\u000a      }\u000a      goto LAB_001009d1;\u000a    }\u000a    __modes = 1;\u000a  }\u000a  __buf = (char *)0x0;\u000a  __size = 0;\u000aLAB_001009d1:\u000a  __modes = setvbuf(pFParm1,__buf,__modes,__size);\u000a  if (__modes != 0) {\u000a    uVar1 = *(undefined8 *)PTR_stderr_00300ff0;\u000a    uVar3 = dcgettext(0,"could not set buffering of %s to mode %s\u005cn",5);\u000a    uVar2 = fileno(pFParm1);\u000a    uVar4 = fileno_to_name((ulong)uVar2);\u000a    __fprintf_chk(uVar1,1,uVar3,uVar4,pcParm2);\u000a    (*(code *)PTR_free_00301020)(__buf);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p38
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nMOV AL,byte ptr [R14]\nCMP AL,0x30\nJZ 0x001009c6\nCMP AL,0x4c\nJNZ 0x00100a42\nMOV R13D,0x1\nJMP 0x001009cc\nMOV R13D,0x2\nXOR R12D,R12D\nXOR EBX,EBX\nMOV RDI,R15\nMOV RSI,R12\nMOV EDX,R13D\nMOV RCX,RBX\nCALL 0x001007e0\nTEST EAX,EAX\nJZ 0x00100aae\nMOV RAX,qword ptr [0x00300ff0]\nMOV R13,qword ptr [RAX]\nLEA RSI,[0x100ba1]\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x001007b0\nMOV RBX,RAX\nMOV RDI,R15\nCALL 0x001007c0\nMOV EDI,EAX\nCALL 0x00100b10\nMOV RCX,RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R13\nMOV RDX,RBX\nMOV R8,R14\nCALL 0x00100800\nMOV RDI,R12\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nJMP 0x001007a0\nXOR R13D,R13D\nXOR ESI,ESI\nMOV EDX,0xa\nMOV RDI,R14\nCALL 0x001007f0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00100ab8\nMOV RDI,RBX\nCALL 0x001007d0\nMOV R12,RAX\nTEST R12,R12\nJNZ 0x001009d1\nMOV RAX,qword ptr [0x00300ff0]\nMOV R14,qword ptr [RAX]\nLEA RSI,[0x100b53]\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x001007b0\nMOV RCX,RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,RCX\nMOV RCX,RBX\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nJMP 0x00100800\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV RAX,qword ptr [0x00300ff0]\nMOV R12,qword ptr [RAX]\nLEA RSI,[0x100b7f]\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x001007b0\nMOV R13,RAX\nMOV RDI,R15\nCALL 0x001007c0\nMOV EDI,EAX\nCALL 0x00100b10\nMOV RBX,RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R12\nMOV RDX,R13\nMOV RCX,R14\nMOV R8,RBX\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nJMP 0x00100800\n'
p39
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 f6\n49 89 ff\n41 8a 06\n3c 30\n74 10\n3c 4c\n0f 85 84 00 00 00\n41 bd 01 00 00 00\neb 06\n41 bd 02 00 00 00\n45 31 e4\n31 db\n4c 89 ff\n4c 89 e6\n44 89 ea\n48 89 d9\ne8 fe fd ff ff\n85 c0\n0f 84 c4 00 00 00\n48 8b 05 ff 05 20 00\n4c 8b 28\n48 8d 35 a6 01 00 00\n31 ff\nba 05 00 00 00\ne8 a9 fd ff ff\n48 89 c3\n4c 89 ff\ne8 ae fd ff ff\n89 c7\ne8 f7 00 00 00\n48 89 c1\nbe 01 00 00 00\n31 c0\n4c 89 ef\n48 89 da\n4d 89 f0\ne8 cf fd ff ff\n4c 89 e7\n5b\n41 5c\n41 5d\n41 5e\n41 5f\ne9 5e fd ff ff\n45 31 ed\n31 f6\nba 0a 00 00 00\n4c 89 f7\ne8 9c fd ff ff\n48 89 c3\n48 85 db\n74 5c\n48 89 df\ne8 6c fd ff ff\n49 89 c4\n4d 85 e4\n0f 85 61 ff ff ff\n48 8b 05 79 05 20 00\n4c 8b 30\n48 8d 35 d2 00 00 00\n31 ff\nba 05 00 00 00\ne8 23 fd ff ff\n48 89 c1\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 89 ca\n48 89 d9\n5b\n41 5c\n41 5d\n41 5e\n41 5f\ne9 52 fd ff ff\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n48 8b 05 31 05 20 00\n4c 8b 20\n48 8d 35 b6 00 00 00\n31 ff\nba 05 00 00 00\ne8 db fc ff ff\n49 89 c5\n4c 89 ff\ne8 e0 fc ff ff\n89 c7\ne8 29 00 00 00\n48 89 c3\nbe 01 00 00 00\n31 c0\n4c 89 e7\n4c 89 ea\n4c 89 f1\n49 89 d8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\ne9 f5 fc ff ff\n'
p40
S'.text:00000000001009a0\n.text:00000000001009a2\n.text:00000000001009a4\n.text:00000000001009a6\n.text:00000000001009a8\n.text:00000000001009a9\n.text:00000000001009ac\n.text:00000000001009af\n.text:00000000001009b2\n.text:00000000001009b4\n.text:00000000001009b6\n.text:00000000001009b8\n.text:00000000001009be\n.text:00000000001009c4\n.text:00000000001009c6\n.text:00000000001009cc\n.text:00000000001009cf\n.text:00000000001009d1\n.text:00000000001009d4\n.text:00000000001009d7\n.text:00000000001009da\n.text:00000000001009dd\n.text:00000000001009e2\n.text:00000000001009e4\n.text:00000000001009ea\n.text:00000000001009f1\n.text:00000000001009f4\n.text:00000000001009fb\n.text:00000000001009fd\n.text:0000000000100a02\n.text:0000000000100a07\n.text:0000000000100a0a\n.text:0000000000100a0d\n.text:0000000000100a12\n.text:0000000000100a14\n.text:0000000000100a19\n.text:0000000000100a1c\n.text:0000000000100a21\n.text:0000000000100a23\n.text:0000000000100a26\n.text:0000000000100a29\n.text:0000000000100a2c\n.text:0000000000100a31\n.text:0000000000100a34\n.text:0000000000100a35\n.text:0000000000100a37\n.text:0000000000100a39\n.text:0000000000100a3b\n.text:0000000000100a3d\n.text:0000000000100a42\n.text:0000000000100a45\n.text:0000000000100a47\n.text:0000000000100a4c\n.text:0000000000100a4f\n.text:0000000000100a54\n.text:0000000000100a57\n.text:0000000000100a5a\n.text:0000000000100a5c\n.text:0000000000100a5f\n.text:0000000000100a64\n.text:0000000000100a67\n.text:0000000000100a6a\n.text:0000000000100a70\n.text:0000000000100a77\n.text:0000000000100a7a\n.text:0000000000100a81\n.text:0000000000100a83\n.text:0000000000100a88\n.text:0000000000100a8d\n.text:0000000000100a90\n.text:0000000000100a95\n.text:0000000000100a97\n.text:0000000000100a9a\n.text:0000000000100a9d\n.text:0000000000100aa0\n.text:0000000000100aa1\n.text:0000000000100aa3\n.text:0000000000100aa5\n.text:0000000000100aa7\n.text:0000000000100aa9\n.text:0000000000100aae\n.text:0000000000100aaf\n.text:0000000000100ab1\n.text:0000000000100ab3\n.text:0000000000100ab5\n.text:0000000000100ab7\n.text:0000000000100ab8\n.text:0000000000100abf\n.text:0000000000100ac2\n.text:0000000000100ac9\n.text:0000000000100acb\n.text:0000000000100ad0\n.text:0000000000100ad5\n.text:0000000000100ad8\n.text:0000000000100adb\n.text:0000000000100ae0\n.text:0000000000100ae2\n.text:0000000000100ae7\n.text:0000000000100aea\n.text:0000000000100aef\n.text:0000000000100af1\n.text:0000000000100af4\n.text:0000000000100af7\n.text:0000000000100afa\n.text:0000000000100afd\n.text:0000000000100afe\n.text:0000000000100b00\n.text:0000000000100b02\n.text:0000000000100b04\n.text:0000000000100b06\n'
p41
tp42
sS'dcgettext'
p43
(S'\n__stdcall dcgettext()\n'
p44
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00301028)();\u000a  return;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x00301028]\n'
p46
S'ff 25 72 08 20 00\n'
p47
S'.plt:00000000001007b0\n'
p48
tp49
sS'__fprintf_chk'
p50
(S'\n__stdcall __fprintf_chk()\n'
p51
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_00301050)();\u000a  return;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x00301050]\n'
p53
S'ff 25 4a 08 20 00\n'
p54
S'.plt:0000000000100800\n'
p55
tp56
sS'deregister_tm_clones'
p57
(S'\n__stdcall deregister_tm_clones()\n'
p58
V\u000a/* WARNING: Removing unreachable block (ram,0x0010083b) */\u000a/* WARNING: Removing unreachable block (ram,0x00100847) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p59
S'LEA RDI,[0x301060]\nLEA RAX,[0x301067]\nPUSH RBP\nSUB RAX,RDI\nMOV RBP,RSP\nCMP RAX,0xe\nJBE 0x00100850\nMOV RAX,qword ptr [0x00300fb8]\nTEST RAX,RAX\nJZ 0x00100850\nPOP RBP\nJMP RAX\nPOP RBP\nRET\n'
p60
S'48 8d 3d 39 08 20 00\n48 8d 05 39 08 20 00\n55\n48 29 f8\n48 89 e5\n48 83 f8 0e\n76 15\n48 8b 05 76 07 20 00\n48 85 c0\n74 09\n5d\nff e0\n5d\nc3\n'
p61
S'.text:0000000000100820\n.text:0000000000100827\n.text:000000000010082e\n.text:000000000010082f\n.text:0000000000100832\n.text:0000000000100835\n.text:0000000000100839\n.text:000000000010083b\n.text:0000000000100842\n.text:0000000000100845\n.text:0000000000100847\n.text:0000000000100848\n.text:0000000000100850\n.text:0000000000100851\n'
p62
tp63
sS'fileno_to_name'
p64
(S'\n__stdcall fileno_to_name()\n'
p65
V\u000achar * fileno_to_name(uint uParm1)\u000a\u000a{\u000a  if (uParm1 < 3) {\u000a    return (&PTR_s_stdin_00300de0)[(long)(int)uParm1];\u000a  }\u000a  return "unknown";\u000a}\u000a\u000a
p66
S'CMP EDI,0x2\nJA 0x00100b24\nMOVSXD RAX,EDI\nLEA RCX,[0x300de0]\nMOV RAX,qword ptr [RCX + RAX*0x8]\nRET\nLEA RAX,[0x100bdf]\nRET\n'
p67
S'83 ff 02\n77 0f\n48 63 c7\n48 8d 0d c1 02 20 00\n48 8b 04 c1\nc3\n48 8d 05 b4 00 00 00\nc3\n'
p68
S'.text:0000000000100b10\n.text:0000000000100b13\n.text:0000000000100b15\n.text:0000000000100b18\n.text:0000000000100b1f\n.text:0000000000100b23\n.text:0000000000100b24\n.text:0000000000100b2b\n'
p69
tp70
sS'fileno'
p71
(S'\n__stdcall fileno(FILE * __stream)\n'
p72
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00301030)();\u000a  return iVar1;\u000a}\u000a\u000a
p73
S'JMP qword ptr [0x00301030]\n'
p74
S'ff 25 6a 08 20 00\n'
p75
S'.plt:00000000001007c0\n'
p76
tp77
sS'__do_global_dtors_aux'
p78
(S'\n__stdcall __do_global_dtors_aux()\n'
p79
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    if (PTR___cxa_finalize_00300fe8 != (undefined *)0x0) {\u000a      __cxa_finalize(__dso_handle);\u000a    }\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p80
S'CMP byte ptr [0x00301060],0x0\nJNZ 0x001008e0\nCMP qword ptr [0x00300fe8],0x0\nPUSH RBP\nMOV RBP,RSP\nJZ 0x001008d3\nMOV RDI,qword ptr [0x00301058]\nCALL 0x00100810\nCALL 0x00100820\nPOP RBP\nMOV byte ptr [0x00301060],0x1\nRET\n'
p81
S'80 3d a9 07 20 00 00\n75 27\n48 83 3d 27 07 20 00 00\n55\n48 89 e5\n74 0c\n48 8b 3d 8a 07 20 00\ne8 3d ff ff ff\ne8 48 ff ff ff\n5d\nc6 05 80 07 20 00 01\nf3 c3\n'
p82
S'.text:00000000001008b0\n.text:00000000001008b7\n.text:00000000001008b9\n.text:00000000001008c1\n.text:00000000001008c2\n.text:00000000001008c5\n.text:00000000001008c7\n.text:00000000001008ce\n.text:00000000001008d3\n.text:00000000001008d8\n.text:00000000001008d9\n.text:00000000001008e0\n'
p83
tp84
sS'_fini'
p85
(S'\n__stdcall _fini()\n'
p86
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p87
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p88
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p89
S'.fini:0000000000100b2c\n.fini:0000000000100b30\n.fini:0000000000100b34\n'
p90
tp91
sS'strtoul'
p92
(S'\n__stdcall strtoul(char * __nptr, char * * __endptr, int __base)\n'
p93
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulong strtoul(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoul_00301048)();\u000a  return uVar1;\u000a}\u000a\u000a
p94
S'JMP qword ptr [0x00301048]\n'
p95
S'ff 25 52 08 20 00\n'
p96
S'.plt:00000000001007f0\n'
p97
tp98
sS'FUN_00100780'
p99
(S'\n__stdcall FUN_00100780()\n'
p100
V\u000avoid FUN_00100780(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00301010)();\u000a  return;\u000a}\u000a\u000a
p101
S'PUSH qword ptr [0x00301008]\nJMP qword ptr [0x00301010]\n'
p102
S'ff 35 82 08 20 00\nff 25 84 08 20 00\n'
p103
S'.plt:0000000000100780\n.plt:0000000000100786\n'
p104
tp105
sS'frame_dummy'
p106
(S'\n__stdcall frame_dummy()\n'
p107
V\u000avoid frame_dummy(void)\u000a\u000a{\u000a  if ((__JCR_END__ != 0) && (PTR__Jv_RegisterClasses_00300fd8 != (undefined *)0x0)) {\u000a    (*(code *)PTR__Jv_RegisterClasses_00300fd8)();\u000a    register_tm_clones();\u000a    return;\u000a  }\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p108
S'LEA RDI,[0x300dd8]\nCMP qword ptr [RDI],0x0\nJNZ 0x00100908\nJMP 0x00100860\nMOV RAX,qword ptr [0x00300fd8]\nTEST RAX,RAX\nJZ 0x001008fd\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00100860\n'
p109
S'48 8d 3d e1 04 20 00\n48 83 3f 00\n75 0b\ne9 5e ff ff ff\n48 8b 05 c9 06 20 00\n48 85 c0\n74 e9\n55\n48 89 e5\nff d0\n5d\ne9 40 ff ff ff\n'
p110
S'.text:00000000001008f0\n.text:00000000001008f7\n.text:00000000001008fb\n.text:00000000001008fd\n.text:0000000000100908\n.text:000000000010090f\n.text:0000000000100912\n.text:0000000000100914\n.text:0000000000100915\n.text:0000000000100918\n.text:000000000010091a\n.text:000000000010091b\n'
p111
tp112
sS'stdbuf'
p113
(S'\n__stdcall stdbuf()\n'
p114
V\u000avoid stdbuf(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar1 = getenv("_STDBUF_E");\u000a  pcVar2 = getenv("_STDBUF_I");\u000a  pcVar3 = getenv("_STDBUF_O");\u000a  if (pcVar1 != (char *)0x0) {\u000a    apply_mode(*(undefined8 *)PTR_stderr_00300ff0,pcVar1);\u000a  }\u000a  if (pcVar2 != (char *)0x0) {\u000a    apply_mode(*(undefined8 *)PTR_stdin_00300fc8,pcVar2);\u000a  }\u000a  if (pcVar3 != (char *)0x0) {\u000a    apply_mode(*(undefined8 *)PTR_stdout_00300fc0,pcVar3);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p115
S'PUSH R15\nPUSH R14\nPUSH RBX\nLEA RDI,[0x100b35]\nCALL 0x00100790\nMOV RBX,RAX\nLEA RDI,[0x100b3f]\nCALL 0x00100790\nMOV R15,RAX\nLEA RDI,[0x100b49]\nCALL 0x00100790\nMOV R14,RAX\nTEST RBX,RBX\nJZ 0x00100969\nMOV RAX,qword ptr [0x00300ff0]\nMOV RDI,qword ptr [RAX]\nMOV RSI,RBX\nCALL 0x001009a0\nTEST R15,R15\nJZ 0x00100980\nMOV RAX,qword ptr [0x00300fc8]\nMOV RDI,qword ptr [RAX]\nMOV RSI,R15\nCALL 0x001009a0\nTEST R14,R14\nJZ 0x00100999\nMOV RAX,qword ptr [0x00300fc0]\nMOV RDI,qword ptr [RAX]\nMOV RSI,R14\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x001009a0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p116
S'41 57\n41 56\n53\n48 8d 3d 09 02 00 00\ne8 5f fe ff ff\n48 89 c3\n48 8d 3d 04 02 00 00\ne8 50 fe ff ff\n49 89 c7\n48 8d 3d ff 01 00 00\ne8 41 fe ff ff\n49 89 c6\n48 85 db\n74 12\n48 8b 05 92 06 20 00\n48 8b 38\n48 89 de\ne8 37 00 00 00\n4d 85 ff\n74 12\n48 8b 05 53 06 20 00\n48 8b 38\n4c 89 fe\ne8 20 00 00 00\n4d 85 f6\n74 14\n48 8b 05 34 06 20 00\n48 8b 38\n4c 89 f6\n5b\n41 5e\n41 5f\neb 07\n5b\n41 5e\n41 5f\nc3\n'
p117
S'.text:0000000000100920\n.text:0000000000100922\n.text:0000000000100924\n.text:0000000000100925\n.text:000000000010092c\n.text:0000000000100931\n.text:0000000000100934\n.text:000000000010093b\n.text:0000000000100940\n.text:0000000000100943\n.text:000000000010094a\n.text:000000000010094f\n.text:0000000000100952\n.text:0000000000100955\n.text:0000000000100957\n.text:000000000010095e\n.text:0000000000100961\n.text:0000000000100964\n.text:0000000000100969\n.text:000000000010096c\n.text:000000000010096e\n.text:0000000000100975\n.text:0000000000100978\n.text:000000000010097b\n.text:0000000000100980\n.text:0000000000100983\n.text:0000000000100985\n.text:000000000010098c\n.text:000000000010098f\n.text:0000000000100992\n.text:0000000000100993\n.text:0000000000100995\n.text:0000000000100997\n.text:0000000000100999\n.text:000000000010099a\n.text:000000000010099c\n.text:000000000010099e\n'
p118
tp119
sS'getenv'
p120
(S'\n__stdcall getenv(char * __name)\n'
p121
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00301018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p122
S'JMP qword ptr [0x00301018]\n'
p123
S'ff 25 82 08 20 00\n'
p124
S'.plt:0000000000100790\n'
p125
tp126
s.