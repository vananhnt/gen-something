(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00609160)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x00609160]\n'
p4
S'ff 25 ea 79 20 00\n'
p5
S'.plt:0000000000401770\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_004070b3,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x404a07;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x404a88;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x404b1c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00404898\nMOV EDX,0x4070a0\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x004018b0\nJMP 0x004048ad\nMOV EDX,0x4070ac\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x004018b0\nXOR EDI,EDI\nMOV ESI,0x4070b3\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x407380\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x004018b0\nXOR EDI,EDI\nMOV ESI,0x4070b7\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x004016b0\nCMP R12,0x9\nJA 0x00404936\nJMP qword ptr [0x407050 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x407182\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004018b0\nXOR EDI,EDI\nMOV ESI,0x4072c1\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004018b0\nADD RSP,0x38\nJMP 0x00404ba7\nXOR EDI,EDI\nMOV ESI,0x407192\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004018b0\nXOR EDI,EDI\nMOV ESI,0x4071a9\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004018b0\nXOR EDI,EDI\nMOV ESI,0x4071c5\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004018b0\nADD RSP,0x18\nJMP 0x00404ba7\nXOR EDI,EDI\nMOV ESI,0x4071e5\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004018b0\nADD RSP,0x18\nJMP 0x00404ba7\nXOR EDI,EDI\nMOV ESI,0x407209\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004018b0\nADD RSP,0x28\nJMP 0x00404ba7\nXOR EDI,EDI\nMOV ESI,0x407231\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004018b0\nADD RSP,0x28\nJMP 0x00404ba7\nXOR EDI,EDI\nMOV ESI,0x40725d\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004018b0\nADD RSP,0x38\nJMP 0x00404ba7\nXOR EDI,EDI\nMOV ESI,0x40728d\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004018b0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401520\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba a0 70 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 1a d0 ff ff\neb 15\nba ac 70 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 03 d0 ff ff\n31 ff\nbe b3 70 40 00\nba 05 00 00 00\ne8 22 cd ff ff\n48 89 c1\nbe 01 00 00 00\nba 80 73 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 d5 cf ff ff\n31 ff\nbe b7 70 40 00\nba 05 00 00 00\ne8 f4 cc ff ff\n48 89 c7\n4c 89 f6\ne8 b9 cd ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 50 70 40 00\n31 ff\nbe 82 71 40 00\nba 05 00 00 00\ne8 ca cc ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 7a cf ff ff\n31 ff\nbe c1 72 40 00\nba 05 00 00 00\ne8 99 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 31 cf ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 92 71 40 00\nba 05 00 00 00\ne8 47 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 f3 ce ff ff\n31 ff\nbe a9 71 40 00\nba 05 00 00 00\ne8 12 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 ba ce ff ff\n31 ff\nbe c5 71 40 00\nba 05 00 00 00\ne8 d9 cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 84 ce ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe e5 71 40 00\nba 05 00 00 00\ne8 9a cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 42 ce ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 09 72 40 00\nba 05 00 00 00\ne8 58 cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 f8 cd ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 31 72 40 00\nba 05 00 00 00\ne8 0e cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 ae cd ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 5d 72 40 00\nba 05 00 00 00\ne8 c4 ca ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 5c cd ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 8d 72 40 00\nba 05 00 00 00\ne8 75 ca ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 0d cd ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 6c c9 ff ff\n'
p12
S'.text:0000000000404860\n.text:0000000000404862\n.text:0000000000404864\n.text:0000000000404866\n.text:0000000000404867\n.text:0000000000404868\n.text:000000000040486b\n.text:000000000040486e\n.text:0000000000404871\n.text:0000000000404874\n.text:0000000000404877\n.text:000000000040487a\n.text:000000000040487f\n.text:0000000000404882\n.text:0000000000404884\n.text:0000000000404889\n.text:000000000040488b\n.text:000000000040488e\n.text:0000000000404891\n.text:0000000000404896\n.text:0000000000404898\n.text:000000000040489d\n.text:000000000040489f\n.text:00000000004048a2\n.text:00000000004048a5\n.text:00000000004048a8\n.text:00000000004048ad\n.text:00000000004048af\n.text:00000000004048b4\n.text:00000000004048b9\n.text:00000000004048be\n.text:00000000004048c1\n.text:00000000004048c6\n.text:00000000004048cb\n.text:00000000004048d1\n.text:00000000004048d3\n.text:00000000004048d6\n.text:00000000004048db\n.text:00000000004048dd\n.text:00000000004048e2\n.text:00000000004048e7\n.text:00000000004048ec\n.text:00000000004048ef\n.text:00000000004048f2\n.text:00000000004048f7\n.text:00000000004048fb\n.text:00000000004048fd\n.text:0000000000404905\n.text:0000000000404907\n.text:000000000040490c\n.text:0000000000404911\n.text:0000000000404916\n.text:0000000000404919\n.text:000000000040491c\n.text:0000000000404921\n.text:0000000000404923\n.text:0000000000404926\n.text:000000000040492a\n.text:000000000040492b\n.text:000000000040492d\n.text:000000000040492f\n.text:0000000000404931\n.text:0000000000404936\n.text:0000000000404938\n.text:000000000040493d\n.text:0000000000404942\n.text:0000000000404947\n.text:000000000040494a\n.text:000000000040494d\n.text:0000000000404951\n.text:0000000000404955\n.text:000000000040495a\n.text:000000000040495f\n.text:0000000000404962\n.text:0000000000404966\n.text:000000000040496a\n.text:000000000040496e\n.text:0000000000404972\n.text:0000000000404976\n.text:000000000040497a\n.text:000000000040497f\n.text:0000000000404983\n.text:0000000000404988\n.text:000000000040498a\n.text:000000000040498f\n.text:0000000000404994\n.text:0000000000404999\n.text:000000000040499c\n.text:000000000040499f\n.text:00000000004049a3\n.text:00000000004049a8\n.text:00000000004049aa\n.text:00000000004049ad\n.text:00000000004049b1\n.text:00000000004049b2\n.text:00000000004049b4\n.text:00000000004049b6\n.text:00000000004049b8\n.text:00000000004049bd\n.text:00000000004049bf\n.text:00000000004049c4\n.text:00000000004049c9\n.text:00000000004049ce\n.text:00000000004049d1\n.text:00000000004049d4\n.text:00000000004049d8\n.text:00000000004049dc\n.text:00000000004049e1\n.text:00000000004049e3\n.text:00000000004049e6\n.text:00000000004049ea\n.text:00000000004049eb\n.text:00000000004049ed\n.text:00000000004049ef\n.text:00000000004049f1\n.text:00000000004049f6\n.text:00000000004049f8\n.text:00000000004049fd\n.text:0000000000404a02\n.text:0000000000404a07\n.text:0000000000404a0a\n.text:0000000000404a0d\n.text:0000000000404a11\n.text:0000000000404a15\n.text:0000000000404a19\n.text:0000000000404a1e\n.text:0000000000404a20\n.text:0000000000404a23\n.text:0000000000404a27\n.text:0000000000404a2c\n.text:0000000000404a30\n.text:0000000000404a35\n.text:0000000000404a37\n.text:0000000000404a3c\n.text:0000000000404a41\n.text:0000000000404a46\n.text:0000000000404a49\n.text:0000000000404a4c\n.text:0000000000404a50\n.text:0000000000404a54\n.text:0000000000404a59\n.text:0000000000404a5e\n.text:0000000000404a61\n.text:0000000000404a65\n.text:0000000000404a69\n.text:0000000000404a6e\n.text:0000000000404a72\n.text:0000000000404a77\n.text:0000000000404a79\n.text:0000000000404a7e\n.text:0000000000404a83\n.text:0000000000404a88\n.text:0000000000404a8b\n.text:0000000000404a8e\n.text:0000000000404a92\n.text:0000000000404a96\n.text:0000000000404a9a\n.text:0000000000404a9f\n.text:0000000000404aa4\n.text:0000000000404aa7\n.text:0000000000404aab\n.text:0000000000404aaf\n.text:0000000000404ab3\n.text:0000000000404ab8\n.text:0000000000404abc\n.text:0000000000404ac1\n.text:0000000000404ac3\n.text:0000000000404ac8\n.text:0000000000404acd\n.text:0000000000404ad2\n.text:0000000000404ad5\n.text:0000000000404ad8\n.text:0000000000404adc\n.text:0000000000404ae0\n.text:0000000000404ae5\n.text:0000000000404aea\n.text:0000000000404aed\n.text:0000000000404af1\n.text:0000000000404af5\n.text:0000000000404af9\n.text:0000000000404afd\n.text:0000000000404b02\n.text:0000000000404b06\n.text:0000000000404b0b\n.text:0000000000404b0d\n.text:0000000000404b12\n.text:0000000000404b17\n.text:0000000000404b1c\n.text:0000000000404b1f\n.text:0000000000404b22\n.text:0000000000404b26\n.text:0000000000404b2a\n.text:0000000000404b2e\n.text:0000000000404b33\n.text:0000000000404b38\n.text:0000000000404b3b\n.text:0000000000404b3f\n.text:0000000000404b43\n.text:0000000000404b47\n.text:0000000000404b4b\n.text:0000000000404b4f\n.text:0000000000404b54\n.text:0000000000404b58\n.text:0000000000404b5a\n.text:0000000000404b5c\n.text:0000000000404b61\n.text:0000000000404b66\n.text:0000000000404b6b\n.text:0000000000404b6e\n.text:0000000000404b71\n.text:0000000000404b75\n.text:0000000000404b79\n.text:0000000000404b7e\n.text:0000000000404b83\n.text:0000000000404b86\n.text:0000000000404b8a\n.text:0000000000404b8e\n.text:0000000000404b92\n.text:0000000000404b96\n.text:0000000000404b9a\n.text:0000000000404b9e\n.text:0000000000404ba3\n.text:0000000000404ba7\n.text:0000000000404ba8\n.text:0000000000404baa\n.text:0000000000404bac\n.text:0000000000404bae\n.text:0000000000404baf\n'
p13
tp14
sS'mkancesdirs'
p15
(S'\n__stdcall mkancesdirs(char * file, savewd * wd, anon_subr_int_char_ptr_char_ptr_void_ptr * make_dir, void * make_dir_arg)\n'
p16
V\u000aptrdiff_t mkancesdirs(char *file,savewd *wd,int (*make_dir)(char *,char *,void *),void *make_dir_arg\u000a                     )\u000a\u000a{\u000a  char cVar1;\u000a  byte bVar2;\u000a  int iVar3;\u000a  int *piVar4;\u000a  char *pcVar5;\u000a  char *dir;\u000a  char *pcVar6;\u000a  byte bVar7;\u000a  int local_44;\u000a  \u000a  pcVar5 = (char *)0x0;\u000a  pcVar6 = file;\u000a  bVar7 = 0;\u000aLAB_00405569:\u000a  dir = pcVar6;\u000a  cVar1 = *dir;\u000a  pcVar6 = dir;\u000a  while (cVar1 != 0) {\u000a    while( true ) {\u000a      pcVar6 = pcVar6 + 1;\u000a      if (*pcVar6 == '/') break;\u000a      if (((cVar1 == '/') && (pcVar5 != (char *)0x0)) && (*pcVar6 != 0)) {\u000a        if (pcVar5 + -(long)dir == (char *)0x1) {\u000a          if (*dir == '.') goto LAB_00405569;\u000a          *pcVar5 = 0;\u000aLAB_00405620:\u000a          iVar3 = (*make_dir)(file,dir,make_dir_arg);\u000a          if (iVar3 < 0) {\u000a            piVar4 = __errno_location();\u000a            local_44 = *piVar4;\u000a            bVar2 = bVar7;\u000a          }\u000a          else {\u000a            local_44 = 0;\u000a            bVar2 = 1;\u000a          }\u000a        }\u000a        else {\u000a          *pcVar5 = 0;\u000a          if ((pcVar5 + -(long)dir != (char *)0x2) || (*dir != '.')) goto LAB_00405620;\u000a          local_44 = 0;\u000a          bVar2 = 0;\u000a          if (dir[1] != '.') goto LAB_00405620;\u000a        }\u000a        iVar3 = savewd_chdir(wd,dir,(int *)(ulong)bVar2);\u000a        if ((iVar3 == -1) || (*pcVar5 = '/', bVar7 = bVar2, iVar3 != 0)) {\u000a          if ((local_44 != 0) && (piVar4 = __errno_location(), *piVar4 == 2)) {\u000a            *piVar4 = local_44;\u000a          }\u000a          return (long)iVar3;\u000a        }\u000a        goto LAB_00405569;\u000a      }\u000a      cVar1 = *pcVar6;\u000a      if (cVar1 == 0) goto LAB_004056a4;\u000a    }\u000a    if (cVar1 != '/') {\u000a      pcVar5 = pcVar6;\u000a    }\u000a    cVar1 = *pcVar6;\u000a  }\u000aLAB_004056a4:\u000a  return (ptrdiff_t)(dir + -(long)file);\u000a}\u000a\u000a
p17
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13,RDI\nXOR EBP,EBP\nMOV R14,R13\nXOR R15D,R15D\nMOV R12,R14\nMOV AL,byte ptr [R12]\nTEST AL,AL\nJZ 0x004056a4\nMOV R14,R12\nINC R14\nNOP\nMOVZX EBX,byte ptr [R14]\nCMP BL,0x2f\nJZ 0x004055b0\nCMP AL,0x2f\nJNZ 0x00405596\nTEST RBP,RBP\nJZ 0x00405596\nTEST BL,BL\nJNZ 0x004055d0\nMOVZX EAX,byte ptr [R14]\nINC R14\nTEST AL,AL\nJNZ 0x00405580\nJMP 0x004056a4\nCMP AL,0x2f\nCMOVNZ RBP,R14\nMOV AL,byte ptr [R14]\nTEST AL,AL\nJNZ 0x0040557b\nJMP 0x004056a4\nMOV RAX,RBP\nSUB RAX,R12\nCMP RAX,0x1\nJNZ 0x004055f3\nCMP byte ptr [R12],0x2e\nJZ 0x00405569\nMOV qword ptr [RSP + 0x8],RDX\nMOV qword ptr [RSP + 0x10],RCX\nMOV byte ptr [RBP],0x0\nJMP 0x00405620\nMOV qword ptr [RSP + 0x8],RDX\nMOV qword ptr [RSP + 0x10],RCX\nMOV byte ptr [RBP],0x0\nCMP RAX,0x2\nJNZ 0x00405620\nCMP byte ptr [R12],0x2e\nJNZ 0x00405620\nXOR EAX,EAX\nCMP byte ptr [R12 + 0x1],0x2e\nMOV dword ptr [RSP + 0x4],0x0\nJZ 0x00405653\nMOV RBX,RSI\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,qword ptr [RSP + 0x10]\nCALL qword ptr [RSP + 0x8]\nTEST EAX,EAX\nJS 0x00405642\nMOV dword ptr [RSP + 0x4],0x0\nMOV AL,0x1\nJMP 0x00405650\nCALL 0x00401530\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV AL,R15B\nMOV RSI,RBX\nMOV R15D,EAX\nAND AL,0x1\nMOVZX EDX,AL\nXOR ECX,ECX\nMOV RDI,RSI\nMOV RBX,RSI\nMOV RSI,R12\nCALL 0x004043b0\nMOV RSI,RBX\nMOV EBX,EAX\nCMP EBX,-0x1\nMOV RCX,qword ptr [RSP + 0x10]\nMOV RDX,qword ptr [RSP + 0x8]\nJZ 0x0040568b\nMOV byte ptr [RBP],0x2f\nTEST EBX,EBX\nJZ 0x00405569\nMOV EBP,dword ptr [RSP + 0x4]\nTEST EBP,EBP\nJZ 0x0040569f\nCALL 0x00401530\nCMP dword ptr [RAX],0x2\nJNZ 0x0040569f\nMOV dword ptr [RAX],EBP\nMOVSXD R12,EBX\nJMP 0x004056a7\nSUB R12,R13\nMOV RAX,R12\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p18
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 fd\n31 ed\n4d 89 ee\n45 31 ff\n4d 89 f4\n41 8a 04 24\n84 c0\n0f 84 2c 01 00 00\n4d 89 e6\n49 ff c6\n66 90\n41 0f b6 1e\n80 fb 2f\n74 27\n3c 2f\n75 09\n48 85 ed\n74 04\n84 db\n75 3a\n41 0f b6 06\n49 ff c6\n84 c0\n75 df\ne9 fe 00 00 00\n3c 2f\n49 0f 45 ee\n41 8a 06\n84 c0\n75 be\ne9 e2 00 00 00\n48 89 e8\n4c 29 e0\n48 83 f8 01\n75 17\n41 80 3c 24 2e\n74 86\n48 89 54 24 08\n48 89 4c 24 10\nc6 45 00 00\neb 2d\n48 89 54 24 08\n48 89 4c 24 10\nc6 45 00 00\n48 83 f8 02\n75 19\n41 80 3c 24 2e\n75 12\n31 c0\n41 80 7c 24 01 2e\nc7 44 24 04 00 00 00 00\n74 33\n48 89 f3\n4c 89 ef\n4c 89 e6\n48 8b 54 24 10\nff 54 24 08\n85 c0\n78 0c\nc7 44 24 04 00 00 00 00\nb0 01\neb 0e\ne8 e9 be ff ff\n8b 00\n89 44 24 04\n44 88 f8\n48 89 de\n41 89 c7\n24 01\n0f b6 d0\n31 c9\n48 89 f7\n48 89 f3\n4c 89 e6\ne8 45 ed ff ff\n48 89 de\n89 c3\n83 fb ff\n48 8b 4c 24 10\n48 8b 54 24 08\n74 0c\nc6 45 00 2f\n85 db\n0f 84 de fe ff ff\n8b 6c 24 04\n85 ed\n74 0c\ne8 98 be ff ff\n83 38 02\n75 02\n89 28\n4c 63 e3\neb 03\n4d 29 ec\n4c 89 e0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p19
S'.text:0000000000405550\n.text:0000000000405551\n.text:0000000000405553\n.text:0000000000405555\n.text:0000000000405557\n.text:0000000000405559\n.text:000000000040555a\n.text:000000000040555e\n.text:0000000000405561\n.text:0000000000405563\n.text:0000000000405566\n.text:0000000000405569\n.text:000000000040556c\n.text:0000000000405570\n.text:0000000000405572\n.text:0000000000405578\n.text:000000000040557b\n.text:000000000040557e\n.text:0000000000405580\n.text:0000000000405584\n.text:0000000000405587\n.text:0000000000405589\n.text:000000000040558b\n.text:000000000040558d\n.text:0000000000405590\n.text:0000000000405592\n.text:0000000000405594\n.text:0000000000405596\n.text:000000000040559a\n.text:000000000040559d\n.text:000000000040559f\n.text:00000000004055a1\n.text:00000000004055b0\n.text:00000000004055b2\n.text:00000000004055b6\n.text:00000000004055b9\n.text:00000000004055bb\n.text:00000000004055bd\n.text:00000000004055d0\n.text:00000000004055d3\n.text:00000000004055d6\n.text:00000000004055da\n.text:00000000004055dc\n.text:00000000004055e1\n.text:00000000004055e3\n.text:00000000004055e8\n.text:00000000004055ed\n.text:00000000004055f1\n.text:00000000004055f3\n.text:00000000004055f8\n.text:00000000004055fd\n.text:0000000000405601\n.text:0000000000405605\n.text:0000000000405607\n.text:000000000040560c\n.text:000000000040560e\n.text:0000000000405610\n.text:0000000000405616\n.text:000000000040561e\n.text:0000000000405620\n.text:0000000000405623\n.text:0000000000405626\n.text:0000000000405629\n.text:000000000040562e\n.text:0000000000405632\n.text:0000000000405634\n.text:0000000000405636\n.text:000000000040563e\n.text:0000000000405640\n.text:0000000000405642\n.text:0000000000405647\n.text:0000000000405649\n.text:000000000040564d\n.text:0000000000405650\n.text:0000000000405653\n.text:0000000000405656\n.text:0000000000405658\n.text:000000000040565b\n.text:000000000040565d\n.text:0000000000405660\n.text:0000000000405663\n.text:0000000000405666\n.text:000000000040566b\n.text:000000000040566e\n.text:0000000000405670\n.text:0000000000405673\n.text:0000000000405678\n.text:000000000040567d\n.text:000000000040567f\n.text:0000000000405683\n.text:0000000000405685\n.text:000000000040568b\n.text:000000000040568f\n.text:0000000000405691\n.text:0000000000405693\n.text:0000000000405698\n.text:000000000040569b\n.text:000000000040569d\n.text:000000000040569f\n.text:00000000004056a2\n.text:00000000004056a4\n.text:00000000004056a7\n.text:00000000004056aa\n.text:00000000004056ae\n.text:00000000004056af\n.text:00000000004056b1\n.text:00000000004056b3\n.text:00000000004056b5\n.text:00000000004056b7\n.text:00000000004056b8\n'
p20
tp21
sS'rpl_fclose'
p22
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p23
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_004058f9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_004058f9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401720\nTEST EAX,EAX\nJS 0x004058f9\nMOV RDI,RBX\nCALL 0x004017a0\nTEST EAX,EAX\nJZ 0x004058c7\nMOV RDI,RBX\nCALL 0x00401720\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401650\nCMP RAX,-0x1\nJZ 0x004058f9\nMOV RDI,RBX\nCALL 0x00405910\nTEST EAX,EAX\nJZ 0x004058f9\nCALL 0x00401530\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004015c0\nTEST EBP,EBP\nJZ 0x004058f2\nCALL 0x00401530\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004015c0\n'
p25
S'55\n53\n50\n48 89 fb\ne8 85 be ff ff\n85 c0\n78 5a\n48 89 df\ne8 f9 be ff ff\n85 c0\n74 1c\n48 89 df\ne8 6d be ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 8f bd ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 58 bc ff ff\n8b 28\n48 89 df\ne8 de bc ff ff\n85 ed\n74 0c\ne8 45 bc ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 b9 bc ff ff\n'
p26
S'.text:0000000000405890\n.text:0000000000405891\n.text:0000000000405892\n.text:0000000000405893\n.text:0000000000405896\n.text:000000000040589b\n.text:000000000040589d\n.text:000000000040589f\n.text:00000000004058a2\n.text:00000000004058a7\n.text:00000000004058a9\n.text:00000000004058ab\n.text:00000000004058ae\n.text:00000000004058b3\n.text:00000000004058b5\n.text:00000000004058ba\n.text:00000000004058bc\n.text:00000000004058c1\n.text:00000000004058c5\n.text:00000000004058c7\n.text:00000000004058ca\n.text:00000000004058cf\n.text:00000000004058d1\n.text:00000000004058d3\n.text:00000000004058d8\n.text:00000000004058da\n.text:00000000004058dd\n.text:00000000004058e2\n.text:00000000004058e4\n.text:00000000004058e6\n.text:00000000004058eb\n.text:00000000004058ed\n.text:00000000004058f2\n.text:00000000004058f6\n.text:00000000004058f7\n.text:00000000004058f8\n.text:00000000004058f9\n.text:00000000004058fc\n.text:0000000000405900\n.text:0000000000405901\n.text:0000000000405902\n'
p27
tp28
sS'strncmp'
p29
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p30
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00609048)();\u000a  return iVar1;\u000a}\u000a\u000a
p31
S'JMP qword ptr [0x00609048]\n'
p32
S'ff 25 02 7b 20 00\n'
p33
S'.plt:0000000000401540\n'
p34
tp35
sS'xnrealloc'
p36
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p37
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p38
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00404db4\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00404dc0\nPUSH RAX\nCALL 0x00404f10\n'
p39
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p40
S'.text:0000000000404da0\n.text:0000000000404da3\n.text:0000000000404da6\n.text:0000000000404da9\n.text:0000000000404dab\n.text:0000000000404daf\n.text:0000000000404db2\n.text:0000000000404db4\n.text:0000000000404db5\n'
p41
tp42
sS'quote'
p43
(S'\n__stdcall quote(char * arg)\n'
p44
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p45
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403f70\n'
p46
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p47
S'.text:0000000000403f80\n.text:0000000000403f83\n.text:0000000000403f85\n.text:0000000000403f88\n'
p48
tp49
sS'emit_bug_reporting_address'
p50
(S'\n__stdcall emit_bug_reporting_address()\n'
p51
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p52
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x4072fd\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x407312\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401800\nXOR EDI,EDI\nMOV ESI,0x407328\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x4061e4\nMOV ECX,0x40630a\nXOR EAX,EAX\nCALL 0x00401800\nXOR EDI,EDI\nMOV ESI,0x40733c\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004016b0\n'
p53
S'50\n31 ff\nbe fd 72 40 00\nba 05 00 00 00\ne8 ee c8 ff ff\n48 89 c1\nbf 01 00 00 00\nba 12 73 40 00\n31 c0\n48 89 ce\ne8 f7 ca ff ff\n31 ff\nbe 28 73 40 00\nba 05 00 00 00\ne8 c6 c8 ff ff\n48 89 c6\nbf 01 00 00 00\nba e4 61 40 00\nb9 0a 63 40 00\n31 c0\ne8 cd ca ff ff\n31 ff\nbe 3c 73 40 00\nba 05 00 00 00\ne8 9c c8 ff ff\n48 8b 35 5d 45 20 00\n48 89 c7\n58\ne9 5c c9 ff ff\n'
p54
S'.text:0000000000404ce0\n.text:0000000000404ce1\n.text:0000000000404ce3\n.text:0000000000404ce8\n.text:0000000000404ced\n.text:0000000000404cf2\n.text:0000000000404cf5\n.text:0000000000404cfa\n.text:0000000000404cff\n.text:0000000000404d01\n.text:0000000000404d04\n.text:0000000000404d09\n.text:0000000000404d0b\n.text:0000000000404d10\n.text:0000000000404d15\n.text:0000000000404d1a\n.text:0000000000404d1d\n.text:0000000000404d22\n.text:0000000000404d27\n.text:0000000000404d2c\n.text:0000000000404d2e\n.text:0000000000404d33\n.text:0000000000404d35\n.text:0000000000404d3a\n.text:0000000000404d3f\n.text:0000000000404d44\n.text:0000000000404d4b\n.text:0000000000404d4e\n.text:0000000000404d4f\n'
p55
tp56
sS'clone_quoting_options'
p57
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p58
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p59
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401530\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x609310\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00404ec0\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p60
S'55\n41 56\n53\n48 89 fb\ne8 e4 e9 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 10 93 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 55 23 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p61
S'.text:0000000000402b40\n.text:0000000000402b41\n.text:0000000000402b43\n.text:0000000000402b44\n.text:0000000000402b47\n.text:0000000000402b4c\n.text:0000000000402b4f\n.text:0000000000402b52\n.text:0000000000402b55\n.text:0000000000402b5a\n.text:0000000000402b5e\n.text:0000000000402b63\n.text:0000000000402b66\n.text:0000000000402b6b\n.text:0000000000402b6e\n.text:0000000000402b6f\n.text:0000000000402b71\n.text:0000000000402b72\n'
p62
tp63
sS'xmalloc'
p64
(S'\n__stdcall xmalloc(size_t n)\n'
p65
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p66
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401740\nTEST RBX,RBX\nJZ 0x00404d93\nTEST RAX,RAX\nJZ 0x00404d95\nPOP RBX\nRET\nCALL 0x00404f10\n'
p67
S'53\n48 89 fb\ne8 b7 c9 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p68
S'.text:0000000000404d80\n.text:0000000000404d81\n.text:0000000000404d84\n.text:0000000000404d89\n.text:0000000000404d8c\n.text:0000000000404d8e\n.text:0000000000404d91\n.text:0000000000404d93\n.text:0000000000404d94\n.text:0000000000404d95\n'
p69
tp70
sS'quotearg_char_mem'
p71
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p72
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p73
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x00609340]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x00609330]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609320]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609310]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00402ba0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403a90\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p74
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 88 55 20 00\n48 89 4c 24 30\n0f 10 05 6c 55 20 00\n0f 29 44 24 20\n0f 10 05 50 55 20 00\n0f 29 44 24 10\n0f 10 05 34 55 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p75
S'.text:0000000000403da0\n.text:0000000000403da2\n.text:0000000000403da4\n.text:0000000000403da5\n.text:0000000000403da9\n.text:0000000000403dab\n.text:0000000000403dae\n.text:0000000000403db1\n.text:0000000000403db8\n.text:0000000000403dbd\n.text:0000000000403dc4\n.text:0000000000403dc9\n.text:0000000000403dd0\n.text:0000000000403dd5\n.text:0000000000403ddc\n.text:0000000000403de0\n.text:0000000000403de3\n.text:0000000000403de8\n.text:0000000000403deb\n.text:0000000000403ded\n.text:0000000000403df2\n.text:0000000000403df4\n.text:0000000000403df7\n.text:0000000000403dfa\n.text:0000000000403dfd\n.text:0000000000403e02\n.text:0000000000403e06\n.text:0000000000403e07\n.text:0000000000403e09\n.text:0000000000403e0b\n'
p76
tp77
sS'mkdir'
p78
(S'\n__stdcall mkdir(char * __path, __mode_t __mode)\n'
p79
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mkdir(char *__path,__mode_t __mode)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mkdir_00609068)();\u000a  return iVar1;\u000a}\u000a\u000a
p80
S'JMP qword ptr [0x00609068]\n'
p81
S'ff 25 e2 7a 20 00\n'
p82
S'.plt:0000000000401580\n'
p83
tp84
sS'frame_dummy'
p85
(S'\n__stdcall frame_dummy()\n'
p86
V\u000a/* WARNING: Removing unreachable block (ram,0x004019ea) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p87
S'MOV EDI,0x608e18\nCMP qword ptr [RDI],0x0\nJNZ 0x004019e0\nJMP 0x00401970\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004019db\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401970\n'
p88
S'bf 18 8e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p89
S'.text:00000000004019d0\n.text:00000000004019d5\n.text:00000000004019d9\n.text:00000000004019db\n.text:00000000004019e0\n.text:00000000004019e5\n.text:00000000004019e8\n.text:00000000004019ea\n.text:00000000004019eb\n.text:00000000004019ee\n.text:00000000004019f0\n.text:00000000004019f1\n'
p90
tp91
sS'FUN_004014d0'
p92
(S'\n__stdcall FUN_004014d0()\n'
p93
V\u000avoid FUN_004014d0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00609010)();\u000a  return;\u000a}\u000a\u000a
p94
S'PUSH qword ptr [0x00609008]\nJMP qword ptr [0x00609010]\n'
p95
S'ff 35 32 7b 20 00\nff 25 34 7b 20 00\n'
p96
S'.plt:00000000004014d0\n.plt:00000000004014d6\n'
p97
tp98
sS'quotearg_n_style_colon'
p99
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p100
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00403cc0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00402ba0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00403a90\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p102
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p103
S'.text:0000000000403e40\n.text:0000000000403e41\n.text:0000000000403e43\n.text:0000000000403e44\n.text:0000000000403e48\n.text:0000000000403e4b\n.text:0000000000403e4d\n.text:0000000000403e52\n.text:0000000000403e55\n.text:0000000000403e5a\n.text:0000000000403e5f\n.text:0000000000403e64\n.text:0000000000403e67\n.text:0000000000403e6c\n.text:0000000000403e73\n.text:0000000000403e75\n.text:0000000000403e78\n.text:0000000000403e7b\n.text:0000000000403e80\n.text:0000000000403e84\n.text:0000000000403e85\n.text:0000000000403e87\n.text:0000000000403e88\n'
p104
tp105
sS'savewd_init'
p106
(S'\n__stdcall savewd_init(savewd * wd)\n'
p107
V\u000avoid savewd_init(savewd *wd)\u000a\u000a{\u000a  wd->state = INITIAL_STATE;\u000a  return;\u000a}\u000a\u000a
p108
S'MOV dword ptr [RDI],0x0\nRET\n'
p109
S'c7 07 00 00 00 00\nc3\n'
p110
S'.text:0000000000404390\n.text:0000000000404396\n'
p111
tp112
sS'quote_mem'
p113
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p114
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403f50\n'
p116
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p117
S'.text:0000000000403f60\n.text:0000000000403f63\n.text:0000000000403f66\n.text:0000000000403f68\n.text:0000000000403f6b\n.text:0000000000403f6e\n'
p118
tp119
sS'fileno'
p120
(S'\n__stdcall fileno(FILE * __stream)\n'
p121
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00609138)();\u000a  return iVar1;\u000a}\u000a\u000a
p122
S'JMP qword ptr [0x00609138]\n'
p123
S'ff 25 12 7a 20 00\n'
p124
S'.plt:0000000000401720\n'
p125
tp126
sS'restorecon'
p127
(S'\n__stdcall restorecon()\n'
p128
V\u000a_Bool restorecon(void)\u000a\u000a{\u000a  undefined in_AL;\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return (_Bool)in_AL;\u000a}\u000a\u000a
p129
S'PUSH RAX\nCALL 0x00401530\nMOV dword ptr [RAX],0x5f\nPOP RAX\nRET\n'
p130
S'50\ne8 ca f3 ff ff\nc7 00 5f 00 00 00\n58\nc3\n'
p131
S'.text:0000000000402160\n.text:0000000000402161\n.text:0000000000402166\n.text:000000000040216c\n.text:000000000040216d\n'
p132
tp133
sS'mbrtowc'
p134
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p135
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006090c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p136
S'JMP qword ptr [0x006090c0]\n'
p137
S'ff 25 8a 7a 20 00\n'
p138
S'.plt:0000000000401630\n'
p139
tp140
sS'setlocale'
p141
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p142
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_006091a0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p143
S'JMP qword ptr [0x006091a0]\n'
p144
S'ff 25 aa 79 20 00\n'
p145
S'.plt:00000000004017f0\n'
p146
tp147
sS'umask'
p148
(S'\n__stdcall umask(__mode_t __mask)\n'
p149
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__mode_t umask(__mode_t __mask)\u000a\u000a{\u000a  __mode_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_umask_00609128)();\u000a  return _Var1;\u000a}\u000a\u000a
p150
S'JMP qword ptr [0x00609128]\n'
p151
S'ff 25 22 7a 20 00\n'
p152
S'.plt:0000000000401700\n'
p153
tp154
sS'make_dir_parents'
p155
(S'\n__stdcall make_dir_parents(char * dir, savewd * wd, anon_subr_int_char_ptr_char_ptr_void_ptr * make_ancestor, void * options, anon_subr_void_char_ptr_void_ptr * announce)\n'
p156
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000a_Bool make_dir_parents(char *dir,savewd *wd,int (*make_ancestor)(char *,char *,void *),void *options\u000a                      ,void (*announce)(char *,void *))\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  ptrdiff_t pVar4;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  char *__path;\u000a  int *open_result;\u000a  uint uVar7;\u000a  uint __mode;\u000a  ulong uVar8;\u000a  code *in_R9;\u000a  uint in_stack_00000008;\u000a  uint in_stack_00000010;\u000a  uint in_stack_00000018;\u000a  char in_stack_00000020;\u000a  stat st;\u000a  uint local_c0 [6];\u000a  uint local_a8;\u000a  \u000a  uVar1 = (uint)announce;\u000a  if (*dir == '/') {\u000aLAB_0040235f:\u000a    if (make_ancestor == (int (*)(char *,char *,void *))0x0) {\u000a      pVar4 = 0;\u000a    }\u000a    else {\u000a      pVar4 = mkancesdirs(dir,wd,make_ancestor,options);\u000a      if (pVar4 < 0) {\u000a        if (pVar4 != -1) {\u000a          return true;\u000a        }\u000a        puVar5 = (uint *)__errno_location();\u000a        uVar8 = (ulong)*puVar5;\u000a        goto LAB_00402531;\u000a      }\u000a    }\u000a    uVar7 = in_stack_00000018 & in_stack_00000010;\u000a    uVar2 = uVar1 & 0x200 | in_stack_00000008 & 0xc00;\u000a    if (uVar7 == 0xffffffff) {\u000a      __mode = uVar1 & 0xffffffed;\u000a      if (uVar2 == 0) {\u000a        __mode = uVar1;\u000a      }\u000a    }\u000a    else {\u000a      __mode = uVar1 & 0xffffffc0;\u000a    }\u000a    __path = dir + pVar4;\u000a    iVar3 = mkdir(__path,__mode);\u000a    if (iVar3 == 0) {\u000a      (*in_R9)(dir,options);\u000a      __mode = 0;\u000a      open_result = (int *)0x3;\u000a      if (uVar7 != 0xffffffff || (uVar2 | uVar1 & in_stack_00000008 & 0x1ff) != 0)\u000a      goto LAB_004024b3;\u000aLAB_0040246d:\u000a      if ((__mode == 0) ||\u000a         ((((make_ancestor != (int (*)(char *,char *,void *))0x0 && (__mode != 2)) &&\u000a           (iVar3 = stat(__path,(stat *)local_c0), iVar3 == 0)) && ((local_a8 & 0xf000) == 0x4000)))\u000a         ) {\u000a        return true;\u000a      }\u000a    }\u000a    else {\u000a      puVar5 = (uint *)__errno_location();\u000a      __mode = *puVar5;\u000a      open_result = (int *)0x2;\u000a      if (in_stack_00000020 != 0) goto LAB_0040246d;\u000aLAB_004024b3:\u000a      iVar3 = savewd_chdir(wd,__path,open_result);\u000a      if (iVar3 < -1) {\u000a        return true;\u000a      }\u000a      iVar3 = dirchownmod((char *)(ulong)local_c0[0]);\u000a      if (iVar3 == 0) {\u000a        return true;\u000a      }\u000a      if ((__mode == 0) ||\u000a         (((make_ancestor != (int (*)(char *,char *,void *))0x0 && (__mode != 2)) &&\u000a          (open_result = __errno_location(), *open_result != 0x14)))) {\u000a        puVar5 = (uint *)__errno_location();\u000a        uVar1 = *puVar5;\u000a        __path = "cannot change owner and permissions of %s";\u000a        if (uVar7 == 0xffffffff) {\u000a          __path = "cannot change permissions of %s";\u000a        }\u000a        uVar6 = dcgettext(0,__path,5);\u000a        __path = quote(dir);\u000a        uVar8 = (ulong)uVar1;\u000a        goto LAB_0040255d;\u000a      }\u000a    }\u000a    uVar8 = (ulong)__mode;\u000a  }\u000a  else {\u000a    uVar2 = savewd_errno(wd);\u000a    uVar8 = (ulong)uVar2;\u000a    if (uVar2 == 0) goto LAB_0040235f;\u000a  }\u000aLAB_00402531:\u000a  uVar6 = dcgettext(0,"cannot create directory %s",5);\u000a  __path = quote(dir);\u000aLAB_0040255d:\u000a  error(0,uVar8,uVar6,__path);\u000a  return false;\u000a}\u000a\u000a
p157
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xd8\nMOV RBX,R9\nMOV R13D,R8D\nMOV qword ptr [RSP + 0x30],RCX\nMOV R15,RDX\nMOV RBP,RSI\nMOV R14,RDI\nCMP byte ptr [R14],0x2f\nJZ 0x0040235f\nMOV RDI,RBP\nCALL 0x004043a0\nMOV R12D,EAX\nTEST R12D,R12D\nJNZ 0x00402531\nTEST R15,R15\nMOV qword ptr [RSP + 0x40],RBP\nMOV qword ptr [RSP + 0x38],RBX\nJZ 0x004023a3\nMOV RDI,R14\nMOV RSI,RBP\nMOV RDX,R15\nMOV RCX,qword ptr [RSP + 0x30]\nCALL 0x00405550\nMOV R12,RAX\nTEST R12,R12\nJNS 0x004023a6\nMOV R15B,0x1\nCMP R12,-0x1\nJNZ 0x00402562\nCALL 0x00401530\nMOV R12D,dword ptr [RAX]\nJMP 0x00402531\nXOR R12D,R12D\nMOV EBP,dword ptr [0x120 + RSP]\nMOV EAX,dword ptr [0x110 + RSP]\nAND EBP,dword ptr [0x118 + RSP]\nAND EAX,0xc00\nMOV EBX,R13D\nAND EBX,0x200\nOR EBX,EAX\nCMP EBP,-0x1\nMOV qword ptr [RSP + 0x18],R14\nMOV qword ptr [RSP + 0x28],R15\nMOV dword ptr [RSP + 0x14],R13D\nJZ 0x004023e8\nMOV R15D,R13D\nAND R15D,0xffffffc0\nJMP 0x004023f5\nMOV R15D,R13D\nAND R15D,0xffffffed\nTEST EBX,EBX\nCMOVZ R15D,R13D\nMOV R14,qword ptr [RSP + 0x18]\nADD R12,R14\nMOV RDI,R12\nMOV ESI,R15D\nCALL 0x00401580\nTEST EAX,EAX\nMOV dword ptr [RSP + 0x24],EBP\nJZ 0x00402432\nMOV BL,byte ptr [0x128 + RSP]\nCALL 0x00401530\nMOV EBP,dword ptr [RAX]\nMOV R15D,0xffffffff\nMOV EDX,0x2\nTEST BL,BL\nJNZ 0x0040246d\nJMP 0x004024b3\nCMP EBP,-0x1\nSETZ BPL\nMOV R13D,dword ptr [RSP + 0x14]\nAND R13D,dword ptr [0x110 + RSP]\nAND R13D,0x1ff\nMOV RDI,R14\nMOV RSI,qword ptr [RSP + 0x30]\nCALL qword ptr [RSP + 0x38]\nOR EBX,R13D\nSETZ BL\nAND BL,BPL\nXOR EBP,EBP\nMOV EDX,0x3\nTEST BL,BL\nJZ 0x004024b3\nTEST EBP,EBP\nJZ 0x004024ab\nCMP qword ptr [RSP + 0x28],0x0\nJZ 0x00402529\nCMP EBP,0x2\nJZ 0x00402529\nLEA RSI,[RSP + 0x48]\nMOV RDI,R12\nCALL 0x00405c50\nTEST EAX,EAX\nJNZ 0x00402529\nMOV EAX,0xf000\nAND EAX,dword ptr [RSP + 0x60]\nCMP EAX,0x4000\nJNZ 0x00402529\nMOV R15B,0x1\nJMP 0x00402562\nLEA RCX,[RSP + 0x48]\nMOV RDI,qword ptr [RSP + 0x40]\nMOV RSI,R12\nCALL 0x004043b0\nCMP EAX,-0x2\nJG 0x004024d2\nMOV R15B,0x1\nJMP 0x00402562\nTEST EAX,EAX\nMOV EAX,0x406460\nCMOVZ R12,RAX\nMOV EDI,dword ptr [RSP + 0x48]\nMOV EAX,dword ptr [0x110 + RSP]\nMOV dword ptr [RSP],EAX\nMOV RSI,R12\nMOV EDX,R15D\nMOV ECX,dword ptr [0x118 + RSP]\nMOV R8D,dword ptr [0x120 + RSP]\nMOV R9D,dword ptr [RSP + 0x14]\nCALL 0x004056c0\nTEST EAX,EAX\nJZ 0x00402577\nTEST EBP,EBP\nJZ 0x0040257c\nCMP qword ptr [RSP + 0x28],0x0\nJZ 0x00402529\nCMP EBP,0x2\nJZ 0x00402529\nCALL 0x00401530\nCMP dword ptr [RAX],0x14\nJNZ 0x0040257c\nMOV R14,qword ptr [RSP + 0x18]\nMOV R12D,EBP\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x4064ac\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RBX,RAX\nMOV RDI,R14\nCALL 0x00403f80\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R12D\nMOV RDX,RBX\nCALL 0x00401830\nMOV EAX,R15D\nADD RSP,0xd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R15B,0x1\nJMP 0x00402562\nCALL 0x00401530\nCMP dword ptr [RSP + 0x24],-0x1\nMOV R14D,dword ptr [RAX]\nMOV EAX,0x406462\nMOV ESI,0x406482\nCMOVZ RSI,RAX\nXOR R15D,R15D\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RBP,RAX\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x00403f80\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nJMP 0x0040255d\n'
p158
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 00 00 00\n4c 89 cb\n45 89 c5\n48 89 4c 24 30\n49 89 d7\n48 89 f5\n49 89 fe\n41 80 3e 2f\n74 14\n48 89 ef\ne8 4d 20 00 00\n41 89 c4\n45 85 e4\n0f 85 d2 01 00 00\n4d 85 ff\n48 89 6c 24 40\n48 89 5c 24 38\n74 35\n4c 89 f7\n48 89 ee\n4c 89 fa\n48 8b 4c 24 30\ne8 cf 31 00 00\n49 89 c4\n4d 85 e4\n79 1d\n41 b7 01\n49 83 fc ff\n0f 85 cc 01 00 00\ne8 95 f1 ff ff\n44 8b 20\ne9 8e 01 00 00\n45 31 e4\n8b ac 24 20 01 00 00\n8b 84 24 10 01 00 00\n23 ac 24 18 01 00 00\n25 00 0c 00 00\n44 89 eb\n81 e3 00 02 00 00\n09 c3\n83 fd ff\n4c 89 74 24 18\n4c 89 7c 24 28\n44 89 6c 24 14\n74 09\n45 89 ef\n41 83 e7 c0\neb 0d\n45 89 ef\n41 83 e7 ed\n85 db\n45 0f 44 fd\n4c 8b 74 24 18\n4d 01 f4\n4c 89 e7\n44 89 fe\ne8 78 f1 ff ff\n85 c0\n89 6c 24 24\n74 22\n8a 9c 24 28 01 00 00\ne8 14 f1 ff ff\n8b 28\n41 bf ff ff ff ff\nba 02 00 00 00\n84 db\n75 40\ne9 81 00 00 00\n83 fd ff\n40 0f 94 c5\n44 8b 6c 24 14\n44 23 ac 24 10 01 00 00\n41 81 e5 ff 01 00 00\n4c 89 f7\n48 8b 74 24 30\nff 54 24 38\n44 09 eb\n0f 94 c3\n40 20 eb\n31 ed\nba 03 00 00 00\n84 db\n74 46\n85 ed\n74 3a\n48 83 7c 24 28 00\n0f 84 ac 00 00 00\n83 fd 02\n0f 84 a3 00 00 00\n48 8d 74 24 48\n4c 89 e7\ne8 bd 37 00 00\n85 c0\n0f 85 8e 00 00 00\nb8 00 f0 00 00\n23 44 24 60\n3d 00 40 00 00\n75 7e\n41 b7 01\ne9 af 00 00 00\n48 8d 4c 24 48\n48 8b 7c 24 40\n4c 89 e6\ne8 eb 1e 00 00\n83 f8 fe\n7f 08\n41 b7 01\ne9 90 00 00 00\n85 c0\nb8 60 64 40 00\n4c 0f 44 e0\n8b 7c 24 48\n8b 84 24 10 01 00 00\n89 04 24\n4c 89 e6\n44 89 fa\n8b 8c 24 18 01 00 00\n44 8b 84 24 20 01 00 00\n44 8b 4c 24 14\ne8 b6 31 00 00\n85 c0\n74 69\n85 ed\n74 6a\n48 83 7c 24 28 00\n74 0f\n83 fd 02\n74 0a\ne8 0c f0 ff ff\n83 38 14\n75 53\n4c 8b 74 24 18\n41 89 ec\n45 31 ff\n31 ff\nbe ac 64 40 00\nba 05 00 00 00\ne8 9b f0 ff ff\n48 89 c3\n4c 89 f7\ne8 30 1a 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 e6\n48 89 da\ne8 ce f2 ff ff\n44 89 f8\n48 81 c4 d8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n41 b7 01\neb e6\ne8 af ef ff ff\n83 7c 24 24 ff\n44 8b 30\nb8 62 64 40 00\nbe 82 64 40 00\n48 0f 44 f0\n45 31 ff\n31 ff\nba 05 00 00 00\ne8 3a f0 ff ff\n48 89 c5\n48 8b 7c 24 18\ne8 cd 19 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ea\neb 9b\n'
p159
S'.text:0000000000402320\n.text:0000000000402321\n.text:0000000000402323\n.text:0000000000402325\n.text:0000000000402327\n.text:0000000000402329\n.text:000000000040232a\n.text:0000000000402331\n.text:0000000000402334\n.text:0000000000402337\n.text:000000000040233c\n.text:000000000040233f\n.text:0000000000402342\n.text:0000000000402345\n.text:0000000000402349\n.text:000000000040234b\n.text:000000000040234e\n.text:0000000000402353\n.text:0000000000402356\n.text:0000000000402359\n.text:000000000040235f\n.text:0000000000402362\n.text:0000000000402367\n.text:000000000040236c\n.text:000000000040236e\n.text:0000000000402371\n.text:0000000000402374\n.text:0000000000402377\n.text:000000000040237c\n.text:0000000000402381\n.text:0000000000402384\n.text:0000000000402387\n.text:0000000000402389\n.text:000000000040238c\n.text:0000000000402390\n.text:0000000000402396\n.text:000000000040239b\n.text:000000000040239e\n.text:00000000004023a3\n.text:00000000004023a6\n.text:00000000004023ad\n.text:00000000004023b4\n.text:00000000004023bb\n.text:00000000004023c0\n.text:00000000004023c3\n.text:00000000004023c9\n.text:00000000004023cb\n.text:00000000004023ce\n.text:00000000004023d3\n.text:00000000004023d8\n.text:00000000004023dd\n.text:00000000004023df\n.text:00000000004023e2\n.text:00000000004023e6\n.text:00000000004023e8\n.text:00000000004023eb\n.text:00000000004023ef\n.text:00000000004023f1\n.text:00000000004023f5\n.text:00000000004023fa\n.text:00000000004023fd\n.text:0000000000402400\n.text:0000000000402403\n.text:0000000000402408\n.text:000000000040240a\n.text:000000000040240e\n.text:0000000000402410\n.text:0000000000402417\n.text:000000000040241c\n.text:000000000040241e\n.text:0000000000402424\n.text:0000000000402429\n.text:000000000040242b\n.text:000000000040242d\n.text:0000000000402432\n.text:0000000000402435\n.text:0000000000402439\n.text:000000000040243e\n.text:0000000000402446\n.text:000000000040244d\n.text:0000000000402450\n.text:0000000000402455\n.text:0000000000402459\n.text:000000000040245c\n.text:000000000040245f\n.text:0000000000402462\n.text:0000000000402464\n.text:0000000000402469\n.text:000000000040246b\n.text:000000000040246d\n.text:000000000040246f\n.text:0000000000402471\n.text:0000000000402477\n.text:000000000040247d\n.text:0000000000402480\n.text:0000000000402486\n.text:000000000040248b\n.text:000000000040248e\n.text:0000000000402493\n.text:0000000000402495\n.text:000000000040249b\n.text:00000000004024a0\n.text:00000000004024a4\n.text:00000000004024a9\n.text:00000000004024ab\n.text:00000000004024ae\n.text:00000000004024b3\n.text:00000000004024b8\n.text:00000000004024bd\n.text:00000000004024c0\n.text:00000000004024c5\n.text:00000000004024c8\n.text:00000000004024ca\n.text:00000000004024cd\n.text:00000000004024d2\n.text:00000000004024d4\n.text:00000000004024d9\n.text:00000000004024dd\n.text:00000000004024e1\n.text:00000000004024e8\n.text:00000000004024eb\n.text:00000000004024ee\n.text:00000000004024f1\n.text:00000000004024f8\n.text:0000000000402500\n.text:0000000000402505\n.text:000000000040250a\n.text:000000000040250c\n.text:000000000040250e\n.text:0000000000402510\n.text:0000000000402512\n.text:0000000000402518\n.text:000000000040251a\n.text:000000000040251d\n.text:000000000040251f\n.text:0000000000402524\n.text:0000000000402527\n.text:0000000000402529\n.text:000000000040252e\n.text:0000000000402531\n.text:0000000000402534\n.text:0000000000402536\n.text:000000000040253b\n.text:0000000000402540\n.text:0000000000402545\n.text:0000000000402548\n.text:000000000040254b\n.text:0000000000402550\n.text:0000000000402553\n.text:0000000000402555\n.text:0000000000402557\n.text:000000000040255a\n.text:000000000040255d\n.text:0000000000402562\n.text:0000000000402565\n.text:000000000040256c\n.text:000000000040256d\n.text:000000000040256f\n.text:0000000000402571\n.text:0000000000402573\n.text:0000000000402575\n.text:0000000000402576\n.text:0000000000402577\n.text:000000000040257a\n.text:000000000040257c\n.text:0000000000402581\n.text:0000000000402586\n.text:0000000000402589\n.text:000000000040258e\n.text:0000000000402593\n.text:0000000000402597\n.text:000000000040259a\n.text:000000000040259c\n.text:00000000004025a1\n.text:00000000004025a6\n.text:00000000004025a9\n.text:00000000004025ae\n.text:00000000004025b3\n.text:00000000004025b6\n.text:00000000004025b8\n.text:00000000004025ba\n.text:00000000004025bd\n.text:00000000004025c0\n'
p160
tp161
sS'c_toupper'
p162
(S'\n__stdcall c_toupper()\n'
p163
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p164
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p165
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p166
S'.text:00000000004050d0\n.text:00000000004050d3\n.text:00000000004050d6\n.text:00000000004050d9\n.text:00000000004050dc\n'
p167
tp168
sS'fcntl'
p169
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p170
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_00609078)();\u000a  return iVar1;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x00609078]\n'
p172
S'ff 25 d2 7a 20 00\n'
p173
S'.plt:00000000004015a0\n'
p174
tp175
sS'mbsinit'
p176
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p177
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_00609208)();\u000a  return iVar1;\u000a}\u000a\u000a
p178
S'JMP qword ptr [0x00609208]\n'
p179
S'ff 25 42 79 20 00\n'
p180
S'.plt:00000000004018c0\n'
p181
tp182
sS'dcgettext'
p183
(S'\n__stdcall dcgettext()\n'
p184
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00609098)();\u000a  return;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x00609098]\n'
p186
S'ff 25 b2 7a 20 00\n'
p187
S'.plt:00000000004015e0\n'
p188
tp189
sS'quotearg_free'
p190
(S'\n__stdcall quotearg_free()\n'
p191
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p192
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x00609248]\nCMP dword ptr [0x00609250],0x2\nJC 0x00403a2a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401500\nINC RBX\nMOV EAX,dword ptr [0x00609250]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00403a10\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x609350\nCMP RDI,RAX\nJZ 0x00403a53\nCALL 0x00401500\nMOV qword ptr [0x00609258],0x100\nMOV qword ptr [0x00609260],0x609350\nMOV EAX,0x609258\nCMP R14,RAX\nJZ 0x00403a70\nMOV RDI,R14\nCALL 0x00401500\nMOV qword ptr [0x00609248],0x609258\nMOV dword ptr [0x00609250],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p193
S'41 57\n41 56\n53\n4c 8b 35 4c 58 20 00\n83 3d 4d 58 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 e8 da ff ff\n48 ff c3\n8b 05 2f 58 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 50 93 60 00\n48 39 c7\n74 1b\ne8 c3 da ff ff\n48 c7 05 10 58 20 00 00 01 00 00\n48 c7 05 0d 58 20 00 50 93 60 00\nb8 58 92 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 9b da ff ff\n48 c7 05 d8 57 20 00 58 92 60 00\nc7 05 d6 57 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p194
S'.text:00000000004039f0\n.text:00000000004039f2\n.text:00000000004039f4\n.text:00000000004039f5\n.text:00000000004039fc\n.text:0000000000403a03\n.text:0000000000403a05\n.text:0000000000403a09\n.text:0000000000403a0e\n.text:0000000000403a10\n.text:0000000000403a13\n.text:0000000000403a18\n.text:0000000000403a1b\n.text:0000000000403a21\n.text:0000000000403a25\n.text:0000000000403a28\n.text:0000000000403a2a\n.text:0000000000403a2e\n.text:0000000000403a33\n.text:0000000000403a36\n.text:0000000000403a38\n.text:0000000000403a3d\n.text:0000000000403a48\n.text:0000000000403a53\n.text:0000000000403a58\n.text:0000000000403a5b\n.text:0000000000403a5d\n.text:0000000000403a60\n.text:0000000000403a65\n.text:0000000000403a70\n.text:0000000000403a7a\n.text:0000000000403a7b\n.text:0000000000403a7d\n.text:0000000000403a7f\n'
p195
tp196
sS'quotearg_mem'
p197
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p198
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p199
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403c50\n'
p200
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p201
S'.text:0000000000403c70\n.text:0000000000403c73\n.text:0000000000403c76\n.text:0000000000403c78\n.text:0000000000403c7b\n.text:0000000000403c7e\n'
p202
tp203
sS'deregister_tm_clones'
p204
(S'\n__stdcall deregister_tm_clones()\n'
p205
V\u000a/* WARNING: Removing unreachable block (ram,0x00401945) */\u000a/* WARNING: Removing unreachable block (ram,0x0040194f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p206
S'MOV EAX,0x6092a7\nPUSH RBP\nSUB RAX,0x6092a0\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401960\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401960\nPOP RBP\nMOV EDI,0x6092a0\nJMP RAX\nPOP RBP\nRET\n'
p207
S'b8 a7 92 60 00\n55\n48 2d a0 92 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf a0 92 60 00\nff e0\n5d\nc3\n'
p208
S'.text:0000000000401930\n.text:0000000000401935\n.text:0000000000401936\n.text:000000000040193c\n.text:0000000000401940\n.text:0000000000401943\n.text:0000000000401945\n.text:000000000040194a\n.text:000000000040194d\n.text:000000000040194f\n.text:0000000000401950\n.text:0000000000401955\n.text:0000000000401960\n.text:0000000000401961\n'
p209
tp210
sS'fputc_unlocked'
p211
(S'\n__stdcall fputc_unlocked(int __c, FILE * __stream)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputc_unlocked(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputc_unlocked_00609120)();\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x00609120]\n'
p214
S'ff 25 2a 7a 20 00\n'
p215
S'.plt:00000000004016f0\n'
p216
tp217
sS'quotearg_custom'
p218
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p219
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p220
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403e90\n'
p221
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p222
S'.text:0000000000403f10\n.text:0000000000403f13\n.text:0000000000403f16\n.text:0000000000403f19\n.text:0000000000403f1b\n.text:0000000000403f1e\n.text:0000000000403f21\n.text:0000000000403f24\n'
p223
tp224
sS'dirchownmod'
p225
(S'\n__stdcall dirchownmod(char * dir)\n'
p226
V\u000aint dirchownmod(char *dir)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  uint __mode;\u000a  int __fd;\u000a  int *piVar3;\u000a  __uid_t __owner;\u000a  int in_EDX;\u000a  char *__file;\u000a  __gid_t __group;\u000a  uint in_R9D;\u000a  uint in_stack_00000008;\u000a  stat local_c0;\u000a  \u000a  __fd = (int)dir;\u000a  if (__fd < 0) {\u000a    iVar2 = stat(__file,&local_c0);\u000a  }\u000a  else {\u000a    iVar2 = fstat(__fd,&local_c0);\u000a  }\u000a  if (iVar2 == 0) {\u000a    if ((local_c0.st_mode & 0xf000) == 0x4000) {\u000a      if (((__owner != 0xffffffff) && (local_c0.st_uid != __owner)) ||\u000a         ((__mode = 0, __group != 0xffffffff && (local_c0.st_gid != __group)))) {\u000a        if (__fd < 0) {\u000a          if (in_EDX == -1) {\u000a            iVar2 = chown(__file,__owner,__group);\u000a          }\u000a          else {\u000a            iVar2 = lchown(__file,__owner,__group);\u000a          }\u000a        }\u000a        else {\u000a          iVar2 = fchown(__fd,__owner,__group);\u000a        }\u000a        __mode = 0;\u000a        if (iVar2 == 0) {\u000a          __mode = local_c0.st_mode & 0xc00;\u000a        }\u000a        if ((local_c0.st_mode & 0x49) == 0) {\u000a          __mode = local_c0.st_mode & 0x49;\u000a        }\u000a        if (iVar2 != 0) goto joined_r0x0040576a;\u000a      }\u000a      if (((local_c0.st_mode ^ in_R9D | __mode) & in_stack_00000008) != 0) {\u000a        __mode = ~in_stack_00000008 & local_c0.st_mode & 0xfff | in_R9D;\u000a        if (__fd < 0) {\u000a          __fd = chmod(__file,__mode);\u000a          return __fd;\u000a        }\u000a        iVar2 = fchmod(__fd,__mode);\u000a        goto joined_r0x004057fb;\u000a      }\u000a      iVar2 = 0;\u000a    }\u000a    else {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0x14;\u000a      iVar2 = -1;\u000a    }\u000a  }\u000ajoined_r0x0040576a:\u000a  if (__fd < 0) {\u000a    return iVar2;\u000a  }\u000ajoined_r0x004057fb:\u000a  if (iVar2 == 0) {\u000a    iVar2 = close(__fd);\u000a  }\u000a  else {\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(__fd);\u000a    *piVar3 = iVar1;\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p227
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV R12D,R8D\nMOV R13D,ECX\nMOV R15D,EDX\nMOV RAX,RSI\nMOV R14D,EDI\nTEST R14D,R14D\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x14],R9D\nLEA RSI,[RSP + 0x18]\nJS 0x004056fe\nMOV EDI,R14D\nCALL 0x00405c60\nJMP 0x00405706\nMOV RDI,RAX\nCALL 0x00405c50\nMOV EBP,EAX\nTEST EBP,EBP\nJNZ 0x004057f4\nMOV EBX,dword ptr [RSP + 0x30]\nMOV EAX,EBX\nAND EAX,0xf000\nCMP EAX,0x4000\nJNZ 0x00405757\nCMP R13D,-0x1\nJZ 0x0040572f\nCMP dword ptr [RSP + 0x34],R13D\nJNZ 0x00405742\nXOR EAX,EAX\nCMP R12D,-0x1\nJZ 0x004057bc\nCMP dword ptr [RSP + 0x38],R12D\nJZ 0x004057bc\nTEST R14D,R14D\nJS 0x00405775\nMOV EDI,R14D\nMOV ESI,R13D\nMOV EDX,R12D\nCALL 0x00401870\nJMP 0x0040579d\nCALL 0x00401530\nMOV dword ptr [RAX],0x14\nMOV EBP,0xffffffff\nTEST R14D,R14D\nJNS 0x004057f9\nJMP 0x0040581f\nCMP R15D,-0x1\nJZ 0x0040578d\nMOV RDI,qword ptr [RSP + 0x8]\nMOV ESI,R13D\nMOV EDX,R12D\nCALL 0x00401790\nJMP 0x0040579d\nMOV RDI,qword ptr [RSP + 0x8]\nMOV ESI,R13D\nMOV EDX,R12D\nCALL 0x004017c0\nMOV EBP,EAX\nMOV ECX,EBX\nAND ECX,0x49\nMOV EDX,EBX\nAND EDX,0xc00\nXOR EAX,EAX\nTEST EBP,EBP\nCMOVZ EAX,EDX\nTEST ECX,ECX\nCMOVZ EAX,ECX\nTEST EBP,EBP\nJNZ 0x004057f4\nMOV ESI,dword ptr [0xe0 + RSP]\nMOV ECX,EBX\nMOV EDX,dword ptr [RSP + 0x14]\nXOR ECX,EDX\nOR ECX,EAX\nTEST ECX,ESI\nJZ 0x004057f2\nNOT ESI\nAND ESI,EBX\nAND ESI,0xfff\nOR ESI,EDX\nTEST R14D,R14D\nJS 0x00405833\nMOV EDI,R14D\nCALL 0x00401810\nMOV EBP,EAX\nTEST EBP,EBP\nJNZ 0x004057fd\nJMP 0x00405815\nXOR EBP,EBP\nTEST R14D,R14D\nJS 0x0040581f\nTEST EBP,EBP\nJZ 0x00405815\nCALL 0x00401530\nMOV RBX,RAX\nMOV R15D,dword ptr [RBX]\nMOV EDI,R14D\nCALL 0x00401690\nMOV dword ptr [RBX],R15D\nJMP 0x0040581f\nMOV EDI,R14D\nCALL 0x00401690\nMOV EBP,EAX\nMOV EAX,EBP\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x00401820\nJMP 0x0040581d\n'
p228
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n45 89 c4\n41 89 cd\n41 89 d7\n48 89 f0\n41 89 fe\n45 85 f6\n48 89 44 24 08\n44 89 4c 24 14\n48 8d 74 24 18\n78 0a\n44 89 f7\ne8 64 05 00 00\neb 08\n48 89 c7\ne8 4a 05 00 00\n89 c5\n85 ed\n0f 85 e4 00 00 00\n8b 5c 24 30\n89 d8\n25 00 f0 00 00\n3d 00 40 00 00\n75 35\n41 83 fd ff\n74 07\n44 39 6c 24 34\n75 13\n31 c0\n41 83 fc ff\n0f 84 81 00 00 00\n44 39 64 24 38\n74 7a\n45 85 f6\n78 2e\n44 89 f7\n44 89 ee\n44 89 e2\ne8 1b c1 ff ff\neb 46\ne8 d4 bd ff ff\nc7 00 14 00 00 00\nbd ff ff ff ff\n45 85 f6\n0f 89 89 00 00 00\ne9 aa 00 00 00\n41 83 ff ff\n74 12\n48 8b 7c 24 08\n44 89 ee\n44 89 e2\ne8 05 c0 ff ff\neb 10\n48 8b 7c 24 08\n44 89 ee\n44 89 e2\ne8 23 c0 ff ff\n89 c5\n89 d9\n83 e1 49\n89 da\n81 e2 00 0c 00 00\n31 c0\n85 ed\n0f 44 c2\n85 c9\n0f 44 c1\n85 ed\n75 38\n8b b4 24 e0 00 00 00\n89 d9\n8b 54 24 14\n31 d1\n09 c1\n85 f1\n74 21\nf7 d6\n21 de\n81 e6 ff 0f 00 00\n09 d6\n45 85 f6\n78 51\n44 89 f7\ne8 26 c0 ff ff\n89 c5\n85 ed\n75 0d\neb 23\n31 ed\n45 85 f6\n78 26\n85 ed\n74 18\ne8 2e bd ff ff\n48 89 c3\n44 8b 3b\n44 89 f7\ne8 80 be ff ff\n44 89 3b\neb 0a\n44 89 f7\ne8 73 be ff ff\n89 c5\n89 e8\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 7c 24 08\ne8 e3 bf ff ff\neb de\n'
p229
S'.text:00000000004056c0\n.text:00000000004056c1\n.text:00000000004056c3\n.text:00000000004056c5\n.text:00000000004056c7\n.text:00000000004056c9\n.text:00000000004056ca\n.text:00000000004056d1\n.text:00000000004056d4\n.text:00000000004056d7\n.text:00000000004056da\n.text:00000000004056dd\n.text:00000000004056e0\n.text:00000000004056e3\n.text:00000000004056e8\n.text:00000000004056ed\n.text:00000000004056f2\n.text:00000000004056f4\n.text:00000000004056f7\n.text:00000000004056fc\n.text:00000000004056fe\n.text:0000000000405701\n.text:0000000000405706\n.text:0000000000405708\n.text:000000000040570a\n.text:0000000000405710\n.text:0000000000405714\n.text:0000000000405716\n.text:000000000040571b\n.text:0000000000405720\n.text:0000000000405722\n.text:0000000000405726\n.text:0000000000405728\n.text:000000000040572d\n.text:000000000040572f\n.text:0000000000405731\n.text:0000000000405735\n.text:000000000040573b\n.text:0000000000405740\n.text:0000000000405742\n.text:0000000000405745\n.text:0000000000405747\n.text:000000000040574a\n.text:000000000040574d\n.text:0000000000405750\n.text:0000000000405755\n.text:0000000000405757\n.text:000000000040575c\n.text:0000000000405762\n.text:0000000000405767\n.text:000000000040576a\n.text:0000000000405770\n.text:0000000000405775\n.text:0000000000405779\n.text:000000000040577b\n.text:0000000000405780\n.text:0000000000405783\n.text:0000000000405786\n.text:000000000040578b\n.text:000000000040578d\n.text:0000000000405792\n.text:0000000000405795\n.text:0000000000405798\n.text:000000000040579d\n.text:000000000040579f\n.text:00000000004057a1\n.text:00000000004057a4\n.text:00000000004057a6\n.text:00000000004057ac\n.text:00000000004057ae\n.text:00000000004057b0\n.text:00000000004057b3\n.text:00000000004057b5\n.text:00000000004057b8\n.text:00000000004057ba\n.text:00000000004057bc\n.text:00000000004057c3\n.text:00000000004057c5\n.text:00000000004057c9\n.text:00000000004057cb\n.text:00000000004057cd\n.text:00000000004057cf\n.text:00000000004057d1\n.text:00000000004057d3\n.text:00000000004057d5\n.text:00000000004057db\n.text:00000000004057dd\n.text:00000000004057e0\n.text:00000000004057e2\n.text:00000000004057e5\n.text:00000000004057ea\n.text:00000000004057ec\n.text:00000000004057ee\n.text:00000000004057f0\n.text:00000000004057f2\n.text:00000000004057f4\n.text:00000000004057f7\n.text:00000000004057f9\n.text:00000000004057fb\n.text:00000000004057fd\n.text:0000000000405802\n.text:0000000000405805\n.text:0000000000405808\n.text:000000000040580b\n.text:0000000000405810\n.text:0000000000405813\n.text:0000000000405815\n.text:0000000000405818\n.text:000000000040581d\n.text:000000000040581f\n.text:0000000000405821\n.text:0000000000405828\n.text:0000000000405829\n.text:000000000040582b\n.text:000000000040582d\n.text:000000000040582f\n.text:0000000000405831\n.text:0000000000405832\n.text:0000000000405833\n.text:0000000000405838\n.text:000000000040583d\n'
p230
tp231
sS'free'
p232
(S'\n__stdcall free(void * __ptr)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00609028)();\u000a  return;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x00609028]\n'
p235
S'ff 25 22 7b 20 00\n'
p236
S'.plt:0000000000401500\n'
p237
tp238
sS'close'
p239
(S'\n__stdcall close(int __fd)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006090f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x006090f0]\n'
p242
S'ff 25 5a 7a 20 00\n'
p243
S'.plt:0000000000401690\n'
p244
tp245
sS'getenv'
p246
(S'\n__stdcall getenv(char * __name)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00609018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x00609018]\n'
p249
S'ff 25 32 7b 20 00\n'
p250
S'.plt:00000000004014e0\n'
p251
tp252
sS'stat'
p253
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p254
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_00609140)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00401730\n'
p256
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 d0 ba ff ff\n'
p257
S'.text:0000000000405c50\n.text:0000000000405c53\n.text:0000000000405c56\n.text:0000000000405c5b\n'
p258
tp259
sS'rpl_fseeko'
p260
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p261
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_006091d8)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p262
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00405988\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00405988\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0040599a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401860\nMOV RDI,RBX\nCALL 0x00401720\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401650\nCMP RAX,-0x1\nJZ 0x004059c3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x004059c8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p263
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 c6 be ff ff\n48 89 df\ne8 7e bd ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 a1 bc ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p264
S'.text:0000000000405960\n.text:0000000000405961\n.text:0000000000405963\n.text:0000000000405964\n.text:0000000000405967\n.text:000000000040596a\n.text:000000000040596d\n.text:0000000000405971\n.text:0000000000405975\n.text:0000000000405977\n.text:000000000040597b\n.text:000000000040597f\n.text:0000000000405981\n.text:0000000000405986\n.text:0000000000405988\n.text:000000000040598b\n.text:000000000040598e\n.text:0000000000405991\n.text:0000000000405992\n.text:0000000000405994\n.text:0000000000405995\n.text:000000000040599a\n.text:000000000040599d\n.text:00000000004059a2\n.text:00000000004059a4\n.text:00000000004059a7\n.text:00000000004059aa\n.text:00000000004059af\n.text:00000000004059b3\n.text:00000000004059b5\n.text:00000000004059b8\n.text:00000000004059bf\n.text:00000000004059c1\n.text:00000000004059c3\n.text:00000000004059c8\n.text:00000000004059c9\n.text:00000000004059cb\n.text:00000000004059cc\n'
p265
tp266
sS'fchmod'
p267
(S'\n__stdcall fchmod(int __fd, __mode_t __mode)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fchmod(int __fd,__mode_t __mode)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fchmod_006091b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x006091b0]\n'
p270
S'ff 25 9a 79 20 00\n'
p271
S'.plt:0000000000401810\n'
p272
tp273
sS'quote_n_mem'
p274
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p275
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p276
S'MOV ECX,0x609268\nJMP 0x00403a90\n'
p277
S'b9 68 92 60 00\ne9 36 fb ff ff\n'
p278
S'.text:0000000000403f50\n.text:0000000000403f55\n'
p279
tp280
sS'xstrdup'
p281
(S'\n__stdcall xstrdup(char * string)\n'
p282
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p283
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401600\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00404ec0\n'
p284
S'53\n48 89 fb\ne8 07 c7 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p285
S'.text:0000000000404ef0\n.text:0000000000404ef1\n.text:0000000000404ef4\n.text:0000000000404ef9\n.text:0000000000404efd\n.text:0000000000404f00\n.text:0000000000404f01\n'
p286
tp287
sS'c_ispunct'
p288
(S'\n__stdcall c_ispunct()\n'
p289
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p290
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00405062\nMOV AL,0x1\nJMP qword ptr [0x4073c0 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p291
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd c0 73 40 00\nc3\n31 c0\nc3\n'
p292
S'.text:0000000000405050\n.text:0000000000405053\n.text:0000000000405056\n.text:0000000000405058\n.text:000000000040505a\n.text:0000000000405061\n.text:0000000000405062\n.text:0000000000405064\n'
p293
tp294
sS'fstat'
p295
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p296
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_00609168)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p297
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00401780\n'
p298
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 11 bb ff ff\n'
p299
S'.text:0000000000405c60\n.text:0000000000405c63\n.text:0000000000405c65\n.text:0000000000405c6a\n'
p300
tp301
sS'fscanf'
p302
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006090e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x006090e8]\n'
p305
S'ff 25 62 7a 20 00\n'
p306
S'.plt:0000000000401680\n'
p307
tp308
sS'memcpy'
p309
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00609130)();\u000a  return pvVar1;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x00609130]\n'
p312
S'ff 25 1a 7a 20 00\n'
p313
S'.plt:0000000000401710\n'
p314
tp315
sS'close_stdout_set_ignore_EPIPE'
p316
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p317
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p318
S'MOV byte ptr [0x006092f8],DIL\nRET\n'
p319
S'40 88 3d a1 70 20 00\nc3\n'
p320
S'.text:0000000000402250\n.text:0000000000402257\n'
p321
tp322
sS'iswprint'
p323
(S'\n__stdcall iswprint(wint_t __wc)\n'
p324
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_00609210)();\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x00609210]\n'
p326
S'ff 25 3a 79 20 00\n'
p327
S'.plt:00000000004018d0\n'
p328
tp329
sS'c_isspace'
p330
(S'\n__stdcall c_isspace()\n'
p331
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p332
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00405085\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p333
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p334
S'.text:0000000000405070\n.text:0000000000405073\n.text:0000000000405076\n.text:0000000000405078\n.text:000000000040507d\n.text:000000000040507f\n.text:0000000000405081\n.text:0000000000405084\n.text:0000000000405085\n.text:0000000000405087\n'
p335
tp336
sS'open'
p337
(S'\n__stdcall open(char * __file, int __oflag)\n'
p338
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_006091d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'JMP qword ptr [0x006091d0]\n'
p340
S'ff 25 7a 79 20 00\n'
p341
S'.plt:0000000000401850\n'
p342
tp343
sS'make_node_op_equals'
p344
(S'\n__stdcall make_node_op_equals()\n'
p345
V\u000amode_change * make_node_op_equals(void)\u000a\u000a{\u000a  mode_change *pmVar1;\u000a  mode_t in_ESI;\u000a  mode_t in_EDI;\u000a  \u000a  pmVar1 = (mode_change *)xmalloc(0x20);\u000a  pmVar1->op = '=';\u000a  pmVar1->flag = 1;\u000a  pmVar1->affected = 0xfff;\u000a  pmVar1->value = in_EDI;\u000a  pmVar1->mentioned = in_ESI;\u000a  pmVar1[1].flag = 0;\u000a  return pmVar1;\u000a}\u000a\u000a
p346
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBX,ESI\nMOV EBP,EDI\nMOV EDI,0x20\nCALL 0x00404d80\nMOV byte ptr [RAX],0x3d\nMOV byte ptr [RAX + 0x1],0x1\nMOV dword ptr [RAX + 0x4],0xfff\nMOV dword ptr [RAX + 0x8],EBP\nMOV dword ptr [RAX + 0xc],EBX\nMOV byte ptr [RAX + 0x11],0x0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p347
S'55\n53\n50\n89 f3\n89 fd\nbf 20 00 00 00\ne8 8f 24 00 00\nc6 00 3d\nc6 40 01 01\nc7 40 04 ff 0f 00 00\n89 68 08\n89 58 0c\nc6 40 11 00\n48 83 c4 08\n5b\n5d\nc3\n'
p348
S'.text:00000000004028e0\n.text:00000000004028e1\n.text:00000000004028e2\n.text:00000000004028e3\n.text:00000000004028e5\n.text:00000000004028e7\n.text:00000000004028ec\n.text:00000000004028f1\n.text:00000000004028f4\n.text:00000000004028f8\n.text:00000000004028ff\n.text:0000000000402902\n.text:0000000000402905\n.text:0000000000402909\n.text:000000000040290d\n.text:000000000040290e\n.text:000000000040290f\n'
p349
tp350
sS'quotearg_n_custom_mem'
p351
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p352
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p353
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x00609340]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x00609330]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609320]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609310]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00402c00\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403a90\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p354
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 87 54 20 00\n48 89 44 24 30\n0f 10 05 6b 54 20 00\n0f 29 44 24 20\n0f 10 05 4f 54 20 00\n0f 29 44 24 10\n0f 10 05 33 54 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p355
S'.text:0000000000403ea0\n.text:0000000000403ea1\n.text:0000000000403ea3\n.text:0000000000403ea5\n.text:0000000000403ea6\n.text:0000000000403eaa\n.text:0000000000403ead\n.text:0000000000403eb0\n.text:0000000000403eb2\n.text:0000000000403eb9\n.text:0000000000403ebe\n.text:0000000000403ec5\n.text:0000000000403eca\n.text:0000000000403ed1\n.text:0000000000403ed6\n.text:0000000000403edd\n.text:0000000000403ee1\n.text:0000000000403ee4\n.text:0000000000403ee7\n.text:0000000000403eec\n.text:0000000000403eee\n.text:0000000000403ef1\n.text:0000000000403ef4\n.text:0000000000403ef7\n.text:0000000000403efc\n.text:0000000000403f00\n.text:0000000000403f01\n.text:0000000000403f03\n.text:0000000000403f05\n.text:0000000000403f06\n'
p356
tp357
sS'_init'
p358
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p359
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00608ff8;\u000a  if (PTR___gmon_start___00608ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00608ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p360
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00608ff8]\nTEST RAX,RAX\nJZ 0x004014ca\nCALL RAX\nADD RSP,0x8\nRET\n'
p361
S'48 83 ec 08\n48 8b 05 35 7b 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p362
S'.init:00000000004014b8\n.init:00000000004014bc\n.init:00000000004014c3\n.init:00000000004014c6\n.init:00000000004014c8\n.init:00000000004014ca\n.init:00000000004014ce\n'
p363
tp364
sS'set_quoting_flags'
p365
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p366
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p367
S'TEST RDI,RDI\nMOV ECX,0x609310\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p368
S'48 85 ff\nb9 10 93 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p369
S'.text:0000000000402be0\n.text:0000000000402be3\n.text:0000000000402be8\n.text:0000000000402bec\n.text:0000000000402bef\n.text:0000000000402bf2\n'
p370
tp371
sS'ignorable_ctx_err'
p372
(S'\n__stdcall ignorable_ctx_err()\n'
p373
V\u000a_Bool ignorable_ctx_err(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 0x3d || in_EDI == 0x5f);\u000a}\u000a\u000a
p374
S'CMP EDI,0x5f\nSETZ CL\nCMP EDI,0x3d\nSETZ AL\nOR AL,CL\nRET\n'
p375
S'83 ff 5f\n0f 94 c1\n83 ff 3d\n0f 94 c0\n08 c8\nc3\n'
p376
S'.text:0000000000402100\n.text:0000000000402103\n.text:0000000000402106\n.text:0000000000402109\n.text:000000000040210c\n.text:000000000040210e\n'
p377
tp378
sS'realloc'
p379
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p380
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00609190)();\u000a  return pvVar1;\u000a}\u000a\u000a
p381
S'JMP qword ptr [0x00609190]\n'
p382
S'ff 25 ba 79 20 00\n'
p383
S'.plt:00000000004017d0\n'
p384
tp385
sS'__fprintf_chk'
p386
(S'\n__stdcall __fprintf_chk()\n'
p387
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_00609200)();\u000a  return;\u000a}\u000a\u000a
p388
S'JMP qword ptr [0x00609200]\n'
p389
S'ff 25 4a 79 20 00\n'
p390
S'.plt:00000000004018b0\n'
p391
tp392
sS'get_charset_aliases'
p393
(S'\n__stdcall get_charset_aliases()\n'
p394
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_004054c4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_004054c4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_004054c4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_004054c4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_004054c4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_004054c4_caseD_9;\u000a      case -1:\u000a        goto switchD_004054c4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040551d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00405523:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_004054c4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00405523;\u000a  }\u000a  goto LAB_0040551d;\u000a}\u000a\u000a
p395
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x00609450]\nTEST R15,R15\nJNZ 0x00405532\nMOV EDI,0x4077ec\nCALL 0x004014e0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004052e8\nCMP byte ptr [RBX],0x0\nJNZ 0x004052ed\nMOV EBX,0x4077fc\nMOV RDI,RBX\nCALL 0x00401600\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00405307\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00405309\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401740\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040535d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401710\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00405368\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00405385\nMOV R15D,0x407181\nJMP 0x0040552b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401850\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040551d\nMOV ESI,0x406166\nMOV EDI,EBP\nCALL 0x004017e0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004054e4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x004054b0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401560\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401560\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x004054b0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401770\nMOV ESI,0x40780b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401680\nCMP EAX,0x2\nJL 0x00405504\nMOV RDI,R12\nCALL 0x00401600\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401600\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040548d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x004017d0\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x004053d4\nJMP 0x004054ed\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401740\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x004053d4\nJMP 0x004054ed\nMOV RDI,RBX\nCALL 0x00401590\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00405417\nJMP qword ptr [0x4076b0 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401590\nCMP EAX,-0x1\nJZ 0x00405504\nCMP EAX,0xa\nJNZ 0x004054d0\nJMP 0x004054b0\nMOV EDI,EBP\nCALL 0x00401690\nJMP 0x0040551d\nMOV RDI,R15\nCALL 0x00401500\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00405890\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040551d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00405523\nMOV R15D,0x407181\nMOV RDI,R13\nCALL 0x00401500\nMOV qword ptr [0x00609450],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p396
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 88 41 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf ec 77 40 00\ne8 05 c2 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb fc 77 40 00\n48 89 df\ne8 0b c3 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 29 c4 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 e3 c3 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 81 71 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 bc c4 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 66 61 40 00\n89 ef\ne8 36 c4 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 6b c1 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 5b c1 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 4f c3 ff ff\nbe 0b 78 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 4a c2 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 b9 c1 ff ff\n49 89 c4\n48 89 ef\ne8 ae c1 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 56 c3 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 a5 c2 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 d8 c0 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd b0 76 40 00\n48 89 df\ne8 b8 c0 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 a5 c1 ff ff\neb 30\n4c 89 ff\ne8 0b c0 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 84 03 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 81 71 40 00\n4c 89 ef\ne8 d5 bf ff ff\n4c 89 3d 1e 3f 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p397
S'.text:00000000004052b0\n.text:00000000004052b1\n.text:00000000004052b3\n.text:00000000004052b5\n.text:00000000004052b7\n.text:00000000004052b9\n.text:00000000004052ba\n.text:00000000004052c1\n.text:00000000004052c8\n.text:00000000004052cb\n.text:00000000004052d1\n.text:00000000004052d6\n.text:00000000004052db\n.text:00000000004052de\n.text:00000000004052e1\n.text:00000000004052e3\n.text:00000000004052e6\n.text:00000000004052e8\n.text:00000000004052ed\n.text:00000000004052f0\n.text:00000000004052f5\n.text:00000000004052f8\n.text:00000000004052fb\n.text:00000000004052fd\n.text:0000000000405302\n.text:0000000000405305\n.text:0000000000405307\n.text:0000000000405309\n.text:000000000040530d\n.text:0000000000405312\n.text:0000000000405317\n.text:000000000040531a\n.text:000000000040531d\n.text:000000000040531f\n.text:0000000000405322\n.text:0000000000405325\n.text:0000000000405328\n.text:000000000040532d\n.text:0000000000405330\n.text:0000000000405333\n.text:0000000000405336\n.text:0000000000405338\n.text:000000000040533e\n.text:0000000000405348\n.text:000000000040534d\n.text:0000000000405357\n.text:000000000040535b\n.text:000000000040535d\n.text:0000000000405363\n.text:0000000000405368\n.text:0000000000405372\n.text:0000000000405377\n.text:0000000000405381\n.text:0000000000405385\n.text:000000000040538a\n.text:000000000040538c\n.text:000000000040538f\n.text:0000000000405394\n.text:0000000000405396\n.text:0000000000405398\n.text:000000000040539e\n.text:00000000004053a3\n.text:00000000004053a5\n.text:00000000004053aa\n.text:00000000004053ad\n.text:00000000004053b0\n.text:00000000004053b6\n.text:00000000004053bb\n.text:00000000004053c0\n.text:00000000004053c2\n.text:00000000004053c7\n.text:00000000004053ca\n.text:00000000004053cf\n.text:00000000004053d4\n.text:00000000004053d9\n.text:00000000004053dc\n.text:00000000004053df\n.text:00000000004053e2\n.text:00000000004053e5\n.text:00000000004053e8\n.text:00000000004053ed\n.text:00000000004053f0\n.text:00000000004053f5\n.text:00000000004053f8\n.text:00000000004053fd\n.text:0000000000405400\n.text:0000000000405405\n.text:000000000040540a\n.text:000000000040540d\n.text:0000000000405412\n.text:0000000000405417\n.text:0000000000405419\n.text:000000000040541c\n.text:0000000000405421\n.text:0000000000405426\n.text:0000000000405428\n.text:000000000040542b\n.text:000000000040542e\n.text:0000000000405431\n.text:0000000000405436\n.text:0000000000405439\n.text:000000000040543f\n.text:0000000000405442\n.text:0000000000405447\n.text:000000000040544a\n.text:000000000040544d\n.text:0000000000405452\n.text:0000000000405455\n.text:000000000040545a\n.text:000000000040545f\n.text:0000000000405462\n.text:0000000000405464\n.text:0000000000405468\n.text:000000000040546d\n.text:0000000000405472\n.text:0000000000405475\n.text:000000000040547a\n.text:000000000040547d\n.text:0000000000405482\n.text:0000000000405485\n.text:000000000040548b\n.text:000000000040548d\n.text:0000000000405492\n.text:0000000000405496\n.text:000000000040549b\n.text:000000000040549e\n.text:00000000004054a1\n.text:00000000004054a7\n.text:00000000004054b0\n.text:00000000004054b3\n.text:00000000004054b8\n.text:00000000004054bb\n.text:00000000004054be\n.text:00000000004054c4\n.text:00000000004054d0\n.text:00000000004054d3\n.text:00000000004054d8\n.text:00000000004054db\n.text:00000000004054dd\n.text:00000000004054e0\n.text:00000000004054e2\n.text:00000000004054e4\n.text:00000000004054e6\n.text:00000000004054eb\n.text:00000000004054ed\n.text:00000000004054f0\n.text:00000000004054f5\n.text:00000000004054f7\n.text:00000000004054fc\n.text:00000000004054ff\n.text:0000000000405504\n.text:0000000000405507\n.text:000000000040550c\n.text:0000000000405511\n.text:0000000000405514\n.text:0000000000405516\n.text:000000000040551b\n.text:000000000040551d\n.text:0000000000405523\n.text:0000000000405526\n.text:000000000040552b\n.text:0000000000405532\n.text:0000000000405535\n.text:000000000040553c\n.text:000000000040553d\n.text:000000000040553f\n.text:0000000000405541\n.text:0000000000405543\n.text:0000000000405545\n.text:0000000000405546\n'
p398
tp399
sS'nl_langinfo'
p400
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00609158)();\u000a  return pcVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x00609158]\n'
p403
S'ff 25 f2 79 20 00\n'
p404
S'.plt:0000000000401760\n'
p405
tp406
sS'x2realloc'
p407
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p408
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p409
S'MOV EDX,0x1\nJMP 0x00404df0\n'
p410
S'ba 01 00 00 00\neb 89\n'
p411
S'.text:0000000000404e60\n.text:0000000000404e65\n'
p412
tp413
sS'strlen'
p414
(S'\n__stdcall strlen(char * __s)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_006090a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x006090a8]\n'
p417
S'ff 25 a2 7a 20 00\n'
p418
S'.plt:0000000000401600\n'
p419
tp420
sS'memcmp'
p421
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_006090f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x006090f8]\n'
p424
S'ff 25 52 7a 20 00\n'
p425
S'.plt:00000000004016a0\n'
p426
tp427
sS'quotearg_n_style_mem'
p428
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p429
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403cc0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403a90\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p431
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p432
S'.text:0000000000403d20\n.text:0000000000403d21\n.text:0000000000403d23\n.text:0000000000403d25\n.text:0000000000403d26\n.text:0000000000403d2a\n.text:0000000000403d2d\n.text:0000000000403d30\n.text:0000000000403d32\n.text:0000000000403d35\n.text:0000000000403d38\n.text:0000000000403d3d\n.text:0000000000403d3f\n.text:0000000000403d42\n.text:0000000000403d45\n.text:0000000000403d48\n.text:0000000000403d4d\n.text:0000000000403d51\n.text:0000000000403d52\n.text:0000000000403d54\n.text:0000000000403d56\n.text:0000000000403d57\n'
p433
tp434
sS'_exit'
p435
(S'\n__stdcall _exit(int __status)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00609050)();\u000a  return;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x00609050]\n'
p438
S'ff 25 fa 7a 20 00\n'
p439
S'.plt:0000000000401550\n'
p440
tp441
sS'xrealloc'
p442
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p443
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p444
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00404dd7\nTEST RBX,RBX\nJNZ 0x00404dd7\nCALL 0x00401500\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x004017d0\nTEST RBX,RBX\nJZ 0x00404de9\nTEST RAX,RAX\nJZ 0x00404deb\nPOP RBX\nRET\nCALL 0x00404f10\n'
p445
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 2d c7 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 f1 c9 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p446
S'.text:0000000000404dc0\n.text:0000000000404dc1\n.text:0000000000404dc4\n.text:0000000000404dc7\n.text:0000000000404dc9\n.text:0000000000404dcc\n.text:0000000000404dce\n.text:0000000000404dd3\n.text:0000000000404dd5\n.text:0000000000404dd6\n.text:0000000000404dd7\n.text:0000000000404dda\n.text:0000000000404ddf\n.text:0000000000404de2\n.text:0000000000404de4\n.text:0000000000404de7\n.text:0000000000404de9\n.text:0000000000404dea\n.text:0000000000404deb\n'
p447
tp448
sS'savewd_save'
p449
(S'\n__stdcall savewd_save(savewd * wd)\n'
p450
V\u000a_Bool savewd_save(savewd *wd)\u000a\u000a{\u000a  anon_enum_32 aVar1;\u000a  int iVar2;\u000a  __pid_t _Var3;\u000a  int *piVar4;\u000a  \u000a  aVar1 = wd->state;\u000a  if (FINAL_STATE < aVar1) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0","lib/savewd.c",0x5b,"_Bool savewd_save(struct savewd *)");\u000a  }\u000a  if ((0x36U >> (aVar1 & 0x1f) & 1) != 0) {\u000a    return false;\u000a  }\u000a  if (aVar1 == INITIAL_STATE) {\u000a    iVar2 = open_safer(".",0);\u000a    if (-1 < iVar2) {\u000a      wd->state = FD_STATE;\u000a      wd->val = iVar2;\u000a      return false;\u000a    }\u000a    piVar4 = __errno_location();\u000a    iVar2 = *piVar4;\u000a    if ((iVar2 != 0xd) && (iVar2 != 0x74)) {\u000a      wd->state = ERROR_STATE;\u000a      wd->val = iVar2;\u000a      return false;\u000a    }\u000a    *wd = (savewd)0xffffffff00000003;\u000a  }\u000a  if ((int)wd->val < 0) {\u000a    _Var3 = fork();\u000a    wd->val = _Var3;\u000a    if (_Var3 != 0) {\u000a      if (0 < _Var3) {\u000a        return true;\u000a      }\u000a      wd->state = ERROR_STATE;\u000a      piVar4 = __errno_location();\u000a      wd->val = *piVar4;\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p451
S'PUSH RBX\nMOV RBX,RDI\nMOV EAX,dword ptr [RBX]\nCMP EAX,0x5\nJA 0x0040457f\nMOV ECX,0x36\nBT ECX,EAX\nJNC 0x0040450d\nXOR EAX,EAX\nPOP RBX\nRET\nTEST EAX,EAX\nJNZ 0x0040454c\nMOV EDI,0x406460\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00405150\nTEST EAX,EAX\nJS 0x0040452e\nMOV dword ptr [RBX],0x1\nMOV dword ptr [RBX + 0x4],EAX\nJMP 0x00404509\nCALL 0x00401530\nMOV EAX,dword ptr [RAX]\nCMP EAX,0xd\nJZ 0x0040453f\nCMP EAX,0x74\nJNZ 0x00404574\nMOV RAX,-0xfffffffd\nMOV qword ptr [RBX],RAX\nCMP dword ptr [RBX + 0x4],0x0\nJNS 0x00404509\nCALL 0x004018e0\nMOV dword ptr [RBX + 0x4],EAX\nTEST EAX,EAX\nJZ 0x00404509\nMOV AL,0x1\nJG 0x0040450b\nMOV dword ptr [RBX],0x4\nCALL 0x00401530\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RBX + 0x4],EAX\nJMP 0x00404509\nMOV dword ptr [RBX],0x4\nMOV dword ptr [RBX + 0x4],EAX\nJMP 0x00404509\nMOV EDI,0x407001\nMOV ESI,0x406f63\nMOV EDX,0x5b\nMOV ECX,0x407027\nCALL 0x00401660\n'
p452
S'53\n48 89 fb\n8b 03\n83 f8 05\n0f 87 80 00 00 00\nb9 36 00 00 00\n0f a3 c1\n73 04\n31 c0\n5b\nc3\n85 c0\n75 3b\nbf 60 64 40 00\n31 f6\n31 c0\ne8 31 0c 00 00\n85 c0\n78 0b\nc7 03 01 00 00 00\n89 43 04\neb db\ne8 fd cf ff ff\n8b 00\n83 f8 0d\n74 05\n83 f8 74\n75 35\n48 b8 03 00 00 00 ff ff ff ff\n48 89 03\n83 7b 04 00\n79 b7\ne8 89 d3 ff ff\n89 43 04\n85 c0\n74 ab\nb0 01\n7f a9\nc7 03 04 00 00 00\ne8 c3 cf ff ff\n8b 00\n89 43 04\neb 95\nc7 03 04 00 00 00\n89 43 04\neb 8a\nbf 01 70 40 00\nbe 63 6f 40 00\nba 5b 00 00 00\nb9 27 70 40 00\ne8 c8 d0 ff ff\n'
p453
S'.text:00000000004044f0\n.text:00000000004044f1\n.text:00000000004044f4\n.text:00000000004044f6\n.text:00000000004044f9\n.text:00000000004044ff\n.text:0000000000404504\n.text:0000000000404507\n.text:0000000000404509\n.text:000000000040450b\n.text:000000000040450c\n.text:000000000040450d\n.text:000000000040450f\n.text:0000000000404511\n.text:0000000000404516\n.text:0000000000404518\n.text:000000000040451a\n.text:000000000040451f\n.text:0000000000404521\n.text:0000000000404523\n.text:0000000000404529\n.text:000000000040452c\n.text:000000000040452e\n.text:0000000000404533\n.text:0000000000404535\n.text:0000000000404538\n.text:000000000040453a\n.text:000000000040453d\n.text:000000000040453f\n.text:0000000000404549\n.text:000000000040454c\n.text:0000000000404550\n.text:0000000000404552\n.text:0000000000404557\n.text:000000000040455a\n.text:000000000040455c\n.text:000000000040455e\n.text:0000000000404560\n.text:0000000000404562\n.text:0000000000404568\n.text:000000000040456d\n.text:000000000040456f\n.text:0000000000404572\n.text:0000000000404574\n.text:000000000040457a\n.text:000000000040457d\n.text:000000000040457f\n.text:0000000000404584\n.text:0000000000404589\n.text:000000000040458e\n.text:0000000000404593\n'
p454
tp455
sS'chown'
p456
(S'\n__stdcall chown(char * __file, __uid_t __owner, __gid_t __group)\n'
p457
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint chown(char *__file,__uid_t __owner,__gid_t __group)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_chown_00609188)();\u000a  return iVar1;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x00609188]\n'
p459
S'ff 25 c2 79 20 00\n'
p460
S'.plt:00000000004017c0\n'
p461
tp462
sS'close_stdout'
p463
(S'\n__stdcall close_stdout()\n'
p464
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402287;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x40645d,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402287:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p465
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x006092a8]\nCALL 0x004050e0\nTEST EAX,EAX\nJZ 0x00402287\nCMP byte ptr [0x006092f8],0x0\nJZ 0x0040229c\nCALL 0x00401530\nCMP dword ptr [RAX],0x20\nJNZ 0x0040229c\nMOV RDI,qword ptr [0x006092e0]\nCALL 0x004050e0\nTEST EAX,EAX\nJNZ 0x004022e1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40644d\nMOV EDX,0x5\nCALL 0x004015e0\nMOV R14,RAX\nMOV RBX,qword ptr [0x006092f0]\nCALL 0x00401530\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x004022ec\nXOR EDI,EDI\nMOV EDX,0x40645d\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401830\nMOV EDI,dword ptr [0x00609240]\nCALL 0x00401550\nMOV EDI,dword ptr [0x00609240]\nCALL 0x00401550\nMOV RDI,RBX\nCALL 0x00403e20\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x406459\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401830\nMOV EDI,dword ptr [0x00609240]\nCALL 0x00401550\n'
p466
S'55\n41 56\n53\n48 8b 3d 3d 70 20 00\ne8 70 2e 00 00\n85 c0\n74 13\n80 3d 7d 70 20 00 00\n74 1f\ne8 ae f2 ff ff\n83 38 20\n75 15\n48 8b 3d 52 70 20 00\ne8 4d 2e 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 4d 64 40 00\nba 05 00 00 00\ne8 33 f3 ff ff\n49 89 c6\n48 8b 1d 39 70 20 00\ne8 74 f2 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 5d 64 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 5a f5 ff ff\n8b 3d 64 6f 20 00\ne8 6f f2 ff ff\n8b 3d 59 6f 20 00\ne8 64 f2 ff ff\n48 89 df\ne8 2c 1b 00 00\n48 89 c1\n31 ff\nba 59 64 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 26 f5 ff ff\n8b 3d 30 6f 20 00\ne8 3b f2 ff ff\n'
p467
S'.text:0000000000402260\n.text:0000000000402261\n.text:0000000000402263\n.text:0000000000402264\n.text:000000000040226b\n.text:0000000000402270\n.text:0000000000402272\n.text:0000000000402274\n.text:000000000040227b\n.text:000000000040227d\n.text:0000000000402282\n.text:0000000000402285\n.text:0000000000402287\n.text:000000000040228e\n.text:0000000000402293\n.text:0000000000402295\n.text:0000000000402297\n.text:0000000000402298\n.text:000000000040229a\n.text:000000000040229b\n.text:000000000040229c\n.text:000000000040229e\n.text:00000000004022a3\n.text:00000000004022a8\n.text:00000000004022ad\n.text:00000000004022b0\n.text:00000000004022b7\n.text:00000000004022bc\n.text:00000000004022bf\n.text:00000000004022c1\n.text:00000000004022c3\n.text:00000000004022c5\n.text:00000000004022ca\n.text:00000000004022cc\n.text:00000000004022ce\n.text:00000000004022d1\n.text:00000000004022d6\n.text:00000000004022dc\n.text:00000000004022e1\n.text:00000000004022e7\n.text:00000000004022ec\n.text:00000000004022ef\n.text:00000000004022f4\n.text:00000000004022f7\n.text:00000000004022f9\n.text:00000000004022fe\n.text:0000000000402300\n.text:0000000000402302\n.text:0000000000402305\n.text:000000000040230a\n.text:0000000000402310\n'
p468
tp469
sS'version_etc_ar'
p470
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p471
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p472
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00404bd0\nJMP 0x00404860\n'
p473
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p474
S'.text:0000000000404bc0\n.text:0000000000404bc7\n.text:0000000000404bd0\n.text:0000000000404bd6\n.text:0000000000404bda\n.text:0000000000404bdc\n'
p475
tp476
sS'process_dir'
p477
(S'\n__stdcall process_dir(char * dir, savewd * wd, void * options)\n'
p478
V\u000aint process_dir(char *dir,savewd *wd,void *options)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  _Bool _Var3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  \u000a  if ((*(char *)((long)options + 0x14) != 0) && (*(long *)options == 0)) {\u000a    defaultcon();\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    _Var2 = ignorable_ctx_err();\u000a    if (_Var2 == false) {\u000a      uVar5 = dcgettext(0,"failed to set default creation context for %s",5);\u000a      pcVar6 = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar1,uVar5,pcVar6);\u000a    }\u000a  }\u000a  _Var2 = make_dir_parents(dir,wd,*(int (**)(char *,char *,void *))options,options,\u000a                           (void (*)(char *,void *))(ulong)*(uint *)((long)options + 0xc));\u000a  if ((((_Var2 ^ 1U) == 0) && (*(char *)((long)options + 0x14) != 0)) && (*(long *)options != 0)) {\u000a    restorecon();\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    _Var3 = ignorable_ctx_err();\u000a    if (_Var3 == false) {\u000a      uVar5 = dcgettext(0,"failed to restore context for %s",5);\u000a      pcVar6 = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar1,uVar5,pcVar6);\u000a    }\u000a  }\u000a  return (int)(uint)(_Var2 ^ 1U);\u000a}\u000a\u000a
p479
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV RBX,RDX\nMOV R15,RSI\nMOV R14,RDI\nCMP byte ptr [RBX + 0x14],0x0\nJZ 0x00402056\nCMP qword ptr [RBX],0x0\nJNZ 0x00402056\nCALL 0x004020f0\nCALL 0x00401530\nMOV EBP,dword ptr [RAX]\nMOV EDI,EBP\nCALL 0x00402100\nTEST AL,AL\nJNZ 0x00402056\nXOR EDI,EDI\nMOV ESI,0x4063f6\nMOV EDX,0x5\nCALL 0x004015e0\nMOV R12,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x00403d60\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,R12\nCALL 0x00401830\nMOV RDX,qword ptr [RBX]\nMOV R8D,dword ptr [RBX + 0xc]\nMOV EAX,dword ptr [RBX + 0x10]\nMOV R9D,0x402110\nMOV RDI,R14\nMOV RSI,R15\nMOV RCX,RBX\nPUSH 0x1\nPUSH -0x1\nPUSH -0x1\nPUSH RAX\nCALL 0x00402320\nADD RSP,0x20\nXOR AL,0x1\nMOVZX EBP,AL\nJNZ 0x004020db\nCMP byte ptr [RBX + 0x14],0x0\nJZ 0x004020db\nCMP qword ptr [RBX],0x0\nJZ 0x004020db\nCALL 0x00402160\nCALL 0x00401530\nMOV EBX,dword ptr [RAX]\nMOV EDI,EBX\nCALL 0x00402100\nTEST AL,AL\nJNZ 0x004020db\nXOR EDI,EDI\nMOV ESI,0x406424\nMOV EDX,0x5\nCALL 0x004015e0\nMOV R15,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x00403d60\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,R15\nCALL 0x00401830\nMOV EAX,EBP\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p480
S'55\n41 57\n41 56\n41 54\n53\n48 89 d3\n49 89 f7\n49 89 fe\n80 7b 14 00\n74 4f\n48 83 3b 00\n75 49\ne8 de 00 00 00\ne8 19 f5 ff ff\n8b 28\n89 ef\ne8 e0 00 00 00\n84 c0\n75 32\n31 ff\nbe f6 63 40 00\nba 05 00 00 00\ne8 ab f5 ff ff\n49 89 c4\nbf 04 00 00 00\n4c 89 f6\ne8 1b 1d 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n4c 89 e2\ne8 da f7 ff ff\n48 8b 13\n44 8b 43 0c\n8b 43 10\n41 b9 10 21 40 00\n4c 89 f7\n4c 89 fe\n48 89 d9\n6a 01\n6a ff\n6a ff\n50\ne8 a5 02 00 00\n48 83 c4 20\n34 01\n0f b6 e8\n75 55\n80 7b 14 00\n74 4f\n48 83 3b 00\n74 49\ne8 c9 00 00 00\ne8 94 f4 ff ff\n8b 18\n89 df\ne8 5b 00 00 00\n84 c0\n75 32\n31 ff\nbe 24 64 40 00\nba 05 00 00 00\ne8 26 f5 ff ff\n49 89 c7\nbf 04 00 00 00\n4c 89 f6\ne8 96 1c 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n4c 89 fa\ne8 55 f7 ff ff\n89 e8\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p481
S'.text:0000000000401ff0\n.text:0000000000401ff1\n.text:0000000000401ff3\n.text:0000000000401ff5\n.text:0000000000401ff7\n.text:0000000000401ff8\n.text:0000000000401ffb\n.text:0000000000401ffe\n.text:0000000000402001\n.text:0000000000402005\n.text:0000000000402007\n.text:000000000040200b\n.text:000000000040200d\n.text:0000000000402012\n.text:0000000000402017\n.text:0000000000402019\n.text:000000000040201b\n.text:0000000000402020\n.text:0000000000402022\n.text:0000000000402024\n.text:0000000000402026\n.text:000000000040202b\n.text:0000000000402030\n.text:0000000000402035\n.text:0000000000402038\n.text:000000000040203d\n.text:0000000000402040\n.text:0000000000402045\n.text:0000000000402048\n.text:000000000040204a\n.text:000000000040204c\n.text:000000000040204e\n.text:0000000000402051\n.text:0000000000402056\n.text:0000000000402059\n.text:000000000040205d\n.text:0000000000402060\n.text:0000000000402066\n.text:0000000000402069\n.text:000000000040206c\n.text:000000000040206f\n.text:0000000000402071\n.text:0000000000402073\n.text:0000000000402075\n.text:0000000000402076\n.text:000000000040207b\n.text:000000000040207f\n.text:0000000000402081\n.text:0000000000402084\n.text:0000000000402086\n.text:000000000040208a\n.text:000000000040208c\n.text:0000000000402090\n.text:0000000000402092\n.text:0000000000402097\n.text:000000000040209c\n.text:000000000040209e\n.text:00000000004020a0\n.text:00000000004020a5\n.text:00000000004020a7\n.text:00000000004020a9\n.text:00000000004020ab\n.text:00000000004020b0\n.text:00000000004020b5\n.text:00000000004020ba\n.text:00000000004020bd\n.text:00000000004020c2\n.text:00000000004020c5\n.text:00000000004020ca\n.text:00000000004020cd\n.text:00000000004020cf\n.text:00000000004020d1\n.text:00000000004020d3\n.text:00000000004020d6\n.text:00000000004020db\n.text:00000000004020dd\n.text:00000000004020de\n.text:00000000004020e0\n.text:00000000004020e2\n.text:00000000004020e4\n.text:00000000004020e5\n'
p482
tp483
sS'c_isxdigit'
p484
(S'\n__stdcall c_isxdigit()\n'
p485
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p486
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x004050bb\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p487
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p488
S'.text:00000000004050a0\n.text:00000000004050a3\n.text:00000000004050a6\n.text:00000000004050a8\n.text:00000000004050b2\n.text:00000000004050b4\n.text:00000000004050b7\n.text:00000000004050ba\n.text:00000000004050bb\n.text:00000000004050bd\n'
p489
tp490
sS'__libc_csu_fini'
p491
(S'\n__stdcall __libc_csu_fini()\n'
p492
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p493
S'RET\n'
p494
S'f3 c3\n'
p495
S'.text:0000000000405c10\n'
p496
tp497
sS'abort'
p498
(S'\n__stdcall abort()\n'
p499
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00609038)();\u000a  return;\u000a}\u000a\u000a
p500
S'JMP qword ptr [0x00609038]\n'
p501
S'ff 25 12 7b 20 00\n'
p502
S'.plt:0000000000401520\n'
p503
tp504
sS'version_etc'
p505
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p506
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p507
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404c92\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00404bf0\nADD RSP,0xd8\nRET\n'
p508
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p509
S'.text:0000000000404c50\n.text:0000000000404c57\n.text:0000000000404c59\n.text:0000000000404c5b\n.text:0000000000404c60\n.text:0000000000404c65\n.text:0000000000404c6a\n.text:0000000000404c72\n.text:0000000000404c7a\n.text:0000000000404c82\n.text:0000000000404c8a\n.text:0000000000404c92\n.text:0000000000404c97\n.text:0000000000404c9c\n.text:0000000000404ca1\n.text:0000000000404ca6\n.text:0000000000404cae\n.text:0000000000404cb3\n.text:0000000000404cbb\n.text:0000000000404cc2\n.text:0000000000404cc5\n.text:0000000000404cca\n.text:0000000000404cd1\n'
p510
tp511
sS'lseek'
p512
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006090d0)();\u000a  return _Var1;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x006090d0]\n'
p515
S'ff 25 7a 7a 20 00\n'
p516
S'.plt:0000000000401650\n'
p517
tp518
sS'quotearg_n_mem'
p519
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p520
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p521
S'MOV ECX,0x609310\nJMP 0x00403a90\n'
p522
S'b9 10 93 60 00\ne9 36 fe ff ff\n'
p523
S'.text:0000000000403c50\n.text:0000000000403c55\n'
p524
tp525
sS'__printf_chk'
p526
(S'\n__stdcall __printf_chk()\n'
p527
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_006091a8)();\u000a  return;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x006091a8]\n'
p529
S'ff 25 a2 79 20 00\n'
p530
S'.plt:0000000000401800\n'
p531
tp532
sS'fchdir'
p533
(S'\n__stdcall fchdir(int __fd)\n'
p534
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fchdir(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fchdir_00609180)();\u000a  return iVar1;\u000a}\u000a\u000a
p535
S'JMP qword ptr [0x00609180]\n'
p536
S'ff 25 ca 79 20 00\n'
p537
S'.plt:00000000004017b0\n'
p538
tp539
sS'emit_ancillary_info'
p540
(S'\n__stdcall emit_ancillary_info()\n'
p541
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00405e60;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("mkdir",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "mkdir";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00406162,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00406162);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x407181;\u000a  if (__s2 == "mkdir") {\u000a    uVar3 = 0x4062b0;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p542
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x405e60\nMOV ESI,0x406294\nNOP\nMOV EDI,0x406162\nCALL 0x004016e0\nTEST EAX,EAX\nJZ 0x00401b9b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401b80\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x406162\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x4062f3\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x4061e4\nMOV ECX,0x40630a\nXOR EAX,EAX\nCALL 0x00401800\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x004017f0\nTEST RAX,RAX\nJZ 0x00401c24\nMOV ESI,0x406331\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401540\nTEST EAX,EAX\nJZ 0x00401c24\nXOR EDI,EDI\nMOV ESI,0x406335\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406162\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401800\nXOR EDI,EDI\nMOV ESI,0x40637a\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RSI,RAX\nMOV R14D,0x406162\nMOV EDI,0x1\nMOV EDX,0x40630a\nMOV ECX,0x406162\nXOR EAX,EAX\nCALL 0x00401800\nXOR EDI,EDI\nMOV ESI,0x406399\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x4062b0\nMOV ECX,0x407181\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401800\n'
p543
S'41 56\n53\n50\nbb 60 5e 40 00\nbe 94 62 40 00\n66 90\nbf 62 61 40 00\ne8 56 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 62 61 40 00\n48 0f 45 d8\n31 ff\nbe f3 62 40 00\nba 05 00 00 00\ne8 24 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba e4 61 40 00\nb9 0a 63 40 00\n31 c0\ne8 2b fc ff ff\nbf 05 00 00 00\n31 f6\ne8 0f fc ff ff\n48 85 c0\n74 3e\nbe 31 63 40 00\nba 03 00 00 00\n48 89 c7\ne8 48 f9 ff ff\n85 c0\n74 28\n31 ff\nbe 35 63 40 00\nba 05 00 00 00\ne8 d3 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 62 61 40 00\n31 c0\n48 89 ce\ne8 dc fb ff ff\n31 ff\nbe 7a 63 40 00\nba 05 00 00 00\ne8 ab f9 ff ff\n48 89 c6\n41 be 62 61 40 00\nbf 01 00 00 00\nba 0a 63 40 00\nb9 62 61 40 00\n31 c0\ne8 ac fb ff ff\n31 ff\nbe 99 63 40 00\nba 05 00 00 00\ne8 7b f9 ff ff\n48 89 c2\n4c 39 f3\nb8 b0 62 40 00\nb9 81 71 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 6e fb ff ff\n'
p544
S'.text:0000000000401b70\n.text:0000000000401b72\n.text:0000000000401b73\n.text:0000000000401b74\n.text:0000000000401b79\n.text:0000000000401b7e\n.text:0000000000401b80\n.text:0000000000401b85\n.text:0000000000401b8a\n.text:0000000000401b8c\n.text:0000000000401b8e\n.text:0000000000401b92\n.text:0000000000401b96\n.text:0000000000401b99\n.text:0000000000401b9b\n.text:0000000000401b9f\n.text:0000000000401ba2\n.text:0000000000401ba7\n.text:0000000000401bab\n.text:0000000000401bad\n.text:0000000000401bb2\n.text:0000000000401bb7\n.text:0000000000401bbc\n.text:0000000000401bbf\n.text:0000000000401bc4\n.text:0000000000401bc9\n.text:0000000000401bce\n.text:0000000000401bd0\n.text:0000000000401bd5\n.text:0000000000401bda\n.text:0000000000401bdc\n.text:0000000000401be1\n.text:0000000000401be4\n.text:0000000000401be6\n.text:0000000000401beb\n.text:0000000000401bf0\n.text:0000000000401bf3\n.text:0000000000401bf8\n.text:0000000000401bfa\n.text:0000000000401bfc\n.text:0000000000401bfe\n.text:0000000000401c03\n.text:0000000000401c08\n.text:0000000000401c0d\n.text:0000000000401c10\n.text:0000000000401c15\n.text:0000000000401c1a\n.text:0000000000401c1c\n.text:0000000000401c1f\n.text:0000000000401c24\n.text:0000000000401c26\n.text:0000000000401c2b\n.text:0000000000401c30\n.text:0000000000401c35\n.text:0000000000401c38\n.text:0000000000401c3e\n.text:0000000000401c43\n.text:0000000000401c48\n.text:0000000000401c4d\n.text:0000000000401c4f\n.text:0000000000401c54\n.text:0000000000401c56\n.text:0000000000401c5b\n.text:0000000000401c60\n.text:0000000000401c65\n.text:0000000000401c68\n.text:0000000000401c6b\n.text:0000000000401c70\n.text:0000000000401c75\n.text:0000000000401c79\n.text:0000000000401c7e\n.text:0000000000401c80\n.text:0000000000401c83\n.text:0000000000401c86\n.text:0000000000401c8a\n.text:0000000000401c8b\n.text:0000000000401c8d\n'
p545
tp546
sS'version_etc_va'
p547
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p548
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p549
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00404c20\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00404c2c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404c41\nINC R9\nCMP R9,0xa\nJC 0x00404c00\nMOV R8,RSP\nCALL 0x00404860\nADD RSP,0x58\nRET\n'
p550
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p551
S'.text:0000000000404bf0\n.text:0000000000404bf4\n.text:0000000000404bf7\n.text:0000000000404c00\n.text:0000000000404c03\n.text:0000000000404c07\n.text:0000000000404c09\n.text:0000000000404c0c\n.text:0000000000404c10\n.text:0000000000404c14\n.text:0000000000404c17\n.text:0000000000404c20\n.text:0000000000404c24\n.text:0000000000404c28\n.text:0000000000404c2c\n.text:0000000000404c2f\n.text:0000000000404c33\n.text:0000000000404c36\n.text:0000000000404c38\n.text:0000000000404c3b\n.text:0000000000404c3f\n.text:0000000000404c41\n.text:0000000000404c44\n.text:0000000000404c49\n.text:0000000000404c4d\n'
p552
tp553
sS'xzalloc'
p554
(S'\n__stdcall xzalloc(size_t s)\n'
p555
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p556
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00404d80\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401670\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p557
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 e4 c7 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p558
S'.text:0000000000404e70\n.text:0000000000404e72\n.text:0000000000404e73\n.text:0000000000404e74\n.text:0000000000404e77\n.text:0000000000404e7c\n.text:0000000000404e7f\n.text:0000000000404e81\n.text:0000000000404e84\n.text:0000000000404e87\n.text:0000000000404e8c\n.text:0000000000404e8f\n.text:0000000000404e93\n.text:0000000000404e94\n.text:0000000000404e96\n'
p559
tp560
sS'__vfprintf_chk'
p561
(S'\n__stdcall __vfprintf_chk()\n'
p562
V\u000avoid __vfprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___vfprintf_chk_00609030)();\u000a  return;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x00609030]\n'
p564
S'ff 25 1a 7b 20 00\n'
p565
S'.plt:0000000000401510\n'
p566
tp567
sS'gettext_quote'
p568
(S'\n__stdcall gettext_quote(char * msgid)\n'
p569
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00406ed0;\u000a        pcVar2 = &DAT_00406ed4;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p570
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004015e0\nCMP RAX,RBX\nJNZ 0x00404048\nCALL 0x00405220\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00404050\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403ff8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406ec0\nMOV EAX,0x406ec4\nJMP 0x00404044\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00404050\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404036\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406ed0\nMOV EAX,0x406ed4\nJMP 0x00404044\nCMP R14D,0x9\nMOV ECX,0x406eb4\nMOV EAX,0x406eb8\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p571
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 37 d6 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 69 12 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 c0 6e 40 00\nb8 c4 6e 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 d0 6e 40 00\nb8 d4 6e 40 00\neb 0e\n41 83 fe 09\nb9 b4 6e 40 00\nb8 b8 6e 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p572
S'.text:0000000000403f90\n.text:0000000000403f91\n.text:0000000000403f93\n.text:0000000000403f94\n.text:0000000000403f97\n.text:0000000000403f9a\n.text:0000000000403f9c\n.text:0000000000403fa1\n.text:0000000000403fa4\n.text:0000000000403fa9\n.text:0000000000403fac\n.text:0000000000403fb2\n.text:0000000000403fb7\n.text:0000000000403fba\n.text:0000000000403fbf\n.text:0000000000403fc4\n.text:0000000000403fc9\n.text:0000000000403fcf\n.text:0000000000403fd5\n.text:0000000000403fd8\n.text:0000000000403fda\n.text:0000000000403fdc\n.text:0000000000403fe1\n.text:0000000000403fe5\n.text:0000000000403fe7\n.text:0000000000403fe9\n.text:0000000000403fec\n.text:0000000000403ff1\n.text:0000000000403ff6\n.text:0000000000403ff8\n.text:0000000000403ffd\n.text:0000000000404002\n.text:0000000000404007\n.text:000000000040400d\n.text:0000000000404013\n.text:0000000000404016\n.text:0000000000404018\n.text:000000000040401a\n.text:000000000040401f\n.text:0000000000404023\n.text:0000000000404025\n.text:0000000000404027\n.text:000000000040402a\n.text:000000000040402f\n.text:0000000000404034\n.text:0000000000404036\n.text:000000000040403a\n.text:000000000040403f\n.text:0000000000404044\n.text:0000000000404048\n.text:0000000000404049\n.text:000000000040404b\n.text:000000000040404c\n'
p573
tp574
sS'fclose'
p575
(S'\n__stdcall fclose(FILE * __stream)\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00609088)();\u000a  return iVar1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x00609088]\n'
p578
S'ff 25 c2 7a 20 00\n'
p579
S'.plt:00000000004015c0\n'
p580
tp581
sS'__ctype_get_mb_cur_max'
p582
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_006090a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x006090a0]\n'
p585
S'ff 25 aa 7a 20 00\n'
p586
S'.plt:00000000004015f0\n'
p587
tp588
sS'quotearg_n_style'
p589
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p590
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p591
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00403cc0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00403a90\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p592
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p593
S'.text:0000000000403c80\n.text:0000000000403c81\n.text:0000000000403c83\n.text:0000000000403c84\n.text:0000000000403c88\n.text:0000000000403c8b\n.text:0000000000403c8d\n.text:0000000000403c92\n.text:0000000000403c95\n.text:0000000000403c9a\n.text:0000000000403ca1\n.text:0000000000403ca3\n.text:0000000000403ca6\n.text:0000000000403ca9\n.text:0000000000403cae\n.text:0000000000403cb2\n.text:0000000000403cb3\n.text:0000000000403cb5\n.text:0000000000403cb6\n'
p594
tp595
sS'fork'
p596
(S'\n__stdcall fork()\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t fork(void)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_fork_00609218)();\u000a  return _Var1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x00609218]\n'
p599
S'ff 25 32 79 20 00\n'
p600
S'.plt:00000000004018e0\n'
p601
tp602
sS'quote_n'
p603
(S'\n__stdcall quote_n(char * arg)\n'
p604
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p605
S'MOV RDX,-0x1\nJMP 0x00403f50\n'
p606
S'48 c7 c2 ff ff ff ff\neb d7\n'
p607
S'.text:0000000000403f70\n.text:0000000000403f77\n'
p608
tp609
sS'quotearg_alloc'
p610
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p611
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p612
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00403900\n'
p613
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p614
S'.text:00000000004038f0\n.text:00000000004038f3\n.text:00000000004038f5\n.text:00000000004038f8\n'
p615
tp616
sS'close_stdout_set_file_name'
p617
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p618
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p619
S'MOV qword ptr [0x006092f0],RDI\nRET\n'
p620
S'48 89 3d a9 70 20 00\nc3\n'
p621
S'.text:0000000000402240\n.text:0000000000402247\n'
p622
tp623
sS'__libc_csu_init'
p624
(S'\n__stdcall __libc_csu_init()\n'
p625
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p626
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x608e08]\nPUSH RBP\nLEA RBP,[0x608e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x004014b8\nTEST RBP,RBP\nJZ 0x00405bf6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00405be0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p627
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 56 32 20 00\n55\n48 8d 2d 56 32 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 e7 b8 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p628
S'.text:0000000000405ba0\n.text:0000000000405ba2\n.text:0000000000405ba4\n.text:0000000000405ba7\n.text:0000000000405ba9\n.text:0000000000405bab\n.text:0000000000405bb2\n.text:0000000000405bb3\n.text:0000000000405bba\n.text:0000000000405bbb\n.text:0000000000405bbe\n.text:0000000000405bc1\n.text:0000000000405bc4\n.text:0000000000405bc8\n.text:0000000000405bcc\n.text:0000000000405bd1\n.text:0000000000405bd4\n.text:0000000000405bd6\n.text:0000000000405bd8\n.text:0000000000405be0\n.text:0000000000405be3\n.text:0000000000405be6\n.text:0000000000405be9\n.text:0000000000405bed\n.text:0000000000405bf1\n.text:0000000000405bf4\n.text:0000000000405bf6\n.text:0000000000405bfa\n.text:0000000000405bfb\n.text:0000000000405bfc\n.text:0000000000405bfe\n.text:0000000000405c00\n.text:0000000000405c02\n.text:0000000000405c04\n'
p629
tp630
sS'c_isdigit'
p631
(S'\n__stdcall c_isdigit()\n'
p632
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p633
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p634
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p635
S'.text:0000000000405010\n.text:0000000000405013\n.text:0000000000405016\n.text:0000000000405019\n'
p636
tp637
sS'usage'
p638
(S'\n__stdcall usage()\n'
p639
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... DIRECTORY...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,"Create the DIRECTORY(ies), if they do not already exist.\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "  -m, --mode=MODE   set file mode (as in chmod), not a=rwx - umask\u005cn  -p, --parents     no error if existing, make parent directories as needed\u005cn  -v, --verbose     print a message for each created directory\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -Z                   set SELinux security context of each created directory\u005cn                         to the default type\u005cn      --context[=CTX]  like -Z, or if CTX is specified then set the SELinux\u005cn                         or SMACK security context to CTX\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p640
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401ae6\nXOR EDI,EDI\nMOV ESI,0x405ed0\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x00609300]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401800\nXOR EDI,EDI\nMOV ESI,0x405ef4\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016b0\nCALL 0x00401b40\nXOR EDI,EDI\nMOV ESI,0x405f2e\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016b0\nXOR EDI,EDI\nMOV ESI,0x405ffd\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016b0\nXOR EDI,EDI\nMOV ESI,0x4060ff\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016b0\nXOR EDI,EDI\nMOV ESI,0x40612c\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016b0\nCALL 0x00401b70\nMOV EDI,EBX\nCALL 0x00401890\nCALL 0x00401b00\nMOV EDI,EBX\nCALL 0x00401890\n'
p641
S'53\n89 fb\n85 db\n0f 85 db 00 00 00\n31 ff\nbe d0 5e 40 00\nba 05 00 00 00\ne8 c4 fb ff ff\n48 89 c1\n48 8b 15 da 78 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 cb fd ff ff\n31 ff\nbe f4 5e 40 00\nba 05 00 00 00\ne8 9a fb ff ff\n48 8b 35 5b 78 20 00\n48 89 c7\ne8 5b fc ff ff\ne8 e6 00 00 00\n31 ff\nbe 2e 5f 40 00\nba 05 00 00 00\ne8 75 fb ff ff\n48 8b 35 36 78 20 00\n48 89 c7\ne8 36 fc ff ff\n31 ff\nbe fd 5f 40 00\nba 05 00 00 00\ne8 55 fb ff ff\n48 8b 35 16 78 20 00\n48 89 c7\ne8 16 fc ff ff\n31 ff\nbe ff 60 40 00\nba 05 00 00 00\ne8 35 fb ff ff\n48 8b 35 f6 77 20 00\n48 89 c7\ne8 f6 fb ff ff\n31 ff\nbe 2c 61 40 00\nba 05 00 00 00\ne8 15 fb ff ff\n48 8b 35 d6 77 20 00\n48 89 c7\ne8 d6 fb ff ff\ne8 91 00 00 00\n89 df\ne8 aa fd ff ff\ne8 15 00 00 00\n89 df\ne8 9e fd ff ff\n'
p642
S'.text:0000000000401a00\n.text:0000000000401a01\n.text:0000000000401a03\n.text:0000000000401a05\n.text:0000000000401a0b\n.text:0000000000401a0d\n.text:0000000000401a12\n.text:0000000000401a17\n.text:0000000000401a1c\n.text:0000000000401a1f\n.text:0000000000401a26\n.text:0000000000401a2b\n.text:0000000000401a2d\n.text:0000000000401a30\n.text:0000000000401a35\n.text:0000000000401a37\n.text:0000000000401a3c\n.text:0000000000401a41\n.text:0000000000401a46\n.text:0000000000401a4d\n.text:0000000000401a50\n.text:0000000000401a55\n.text:0000000000401a5a\n.text:0000000000401a5c\n.text:0000000000401a61\n.text:0000000000401a66\n.text:0000000000401a6b\n.text:0000000000401a72\n.text:0000000000401a75\n.text:0000000000401a7a\n.text:0000000000401a7c\n.text:0000000000401a81\n.text:0000000000401a86\n.text:0000000000401a8b\n.text:0000000000401a92\n.text:0000000000401a95\n.text:0000000000401a9a\n.text:0000000000401a9c\n.text:0000000000401aa1\n.text:0000000000401aa6\n.text:0000000000401aab\n.text:0000000000401ab2\n.text:0000000000401ab5\n.text:0000000000401aba\n.text:0000000000401abc\n.text:0000000000401ac1\n.text:0000000000401ac6\n.text:0000000000401acb\n.text:0000000000401ad2\n.text:0000000000401ad5\n.text:0000000000401ada\n.text:0000000000401adf\n.text:0000000000401ae1\n.text:0000000000401ae6\n.text:0000000000401aeb\n.text:0000000000401aed\n'
p643
tp644
sS'make_ancestor'
p645
(S'\n__stdcall make_ancestor(char * dir, char * component, void * options)\n'
p646
V\u000aint make_ancestor(char *dir,char *component,void *options)\u000a\u000a{\u000a  int iVar1;\u000a  _Bool _Var2;\u000a  uint uVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  int *piVar7;\u000a  \u000a  if (*(char *)((long)options + 0x14) != 0) {\u000a    defaultcon();\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar3 = *puVar4;\u000a    _Var2 = ignorable_ctx_err();\u000a    if (_Var2 == false) {\u000a      uVar5 = dcgettext(0,"failed to set default creation context for %s",5);\u000a      pcVar6 = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar3,uVar5,pcVar6);\u000a    }\u000a  }\u000a  if ((*(uint *)((long)options + 8) & 0xc0) == 0) {\u000a    uVar3 = mkdir(component,0x1ff);\u000a  }\u000a  else {\u000a    umask(*(uint *)((long)options + 8) & 0xffffff3f);\u000a    uVar3 = mkdir(component,0x1ff);\u000a    piVar7 = __errno_location();\u000a    iVar1 = *piVar7;\u000a    umask(*(__mode_t *)((long)options + 8));\u000a    *piVar7 = iVar1;\u000a  }\u000a  if (uVar3 == 0) {\u000a    uVar3 = *(uint *)((long)options + 8) >> 8 & 1;\u000a    announce_mkdir(dir,options);\u000a  }\u000a  return (int)uVar3;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,RDX\nMOV R15,RSI\nMOV R14,RDI\nCMP byte ptr [R13 + 0x14],0x0\nJZ 0x00401f74\nCALL 0x004020f0\nCALL 0x00401530\nMOV EBP,dword ptr [RAX]\nMOV EDI,EBP\nCALL 0x00402100\nTEST AL,AL\nJNZ 0x00401f74\nXOR EDI,EDI\nMOV ESI,0x4063f6\nMOV EDX,0x5\nCALL 0x004015e0\nMOV R12,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x00403d60\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,R12\nCALL 0x00401830\nMOV EDI,dword ptr [R13 + 0x8]\nTEST DIL,0xc0\nJZ 0x00401fb5\nAND EDI,0xffffff3f\nCALL 0x00401700\nMOV ESI,0x1ff\nMOV RDI,R15\nCALL 0x00401580\nMOV EBP,EAX\nCALL 0x00401530\nMOV RBX,RAX\nMOV R15D,dword ptr [RBX]\nMOV EDI,dword ptr [R13 + 0x8]\nCALL 0x00401700\nMOV dword ptr [RBX],R15D\nTEST EBP,EBP\nJNZ 0x00401fdd\nJMP 0x00401fc8\nMOV ESI,0x1ff\nMOV RDI,R15\nCALL 0x00401580\nMOV EBP,EAX\nTEST EBP,EBP\nJNZ 0x00401fdd\nMOV EBP,dword ptr [R13 + 0x8]\nSHR EBP,0x8\nAND EBP,0x1\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00402110\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p648
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d5\n49 89 f7\n49 89 fe\n41 80 7d 14 00\n74 49\ne8 c0 01 00 00\ne8 fb f5 ff ff\n8b 28\n89 ef\ne8 c2 01 00 00\n84 c0\n75 32\n31 ff\nbe f6 63 40 00\nba 05 00 00 00\ne8 8d f6 ff ff\n49 89 c4\nbf 04 00 00 00\n4c 89 f6\ne8 fd 1d 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n4c 89 e2\ne8 bc f8 ff ff\n41 8b 7d 08\n40 f6 c7 c0\n74 37\n81 e7 3f ff ff ff\ne8 77 f7 ff ff\nbe ff 01 00 00\n4c 89 ff\ne8 ea f5 ff ff\n89 c5\ne8 93 f5 ff ff\n48 89 c3\n44 8b 3b\n41 8b 7d 08\ne8 54 f7 ff ff\n44 89 3b\n85 ed\n75 2a\neb 13\nbe ff 01 00 00\n4c 89 ff\ne8 be f5 ff ff\n89 c5\n85 ed\n75 15\n41 8b 6d 08\nc1 ed 08\n83 e5 01\n4c 89 f7\n4c 89 ee\ne8 33 01 00 00\n89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p649
S'.text:0000000000401f10\n.text:0000000000401f11\n.text:0000000000401f13\n.text:0000000000401f15\n.text:0000000000401f17\n.text:0000000000401f19\n.text:0000000000401f1a\n.text:0000000000401f1b\n.text:0000000000401f1e\n.text:0000000000401f21\n.text:0000000000401f24\n.text:0000000000401f29\n.text:0000000000401f2b\n.text:0000000000401f30\n.text:0000000000401f35\n.text:0000000000401f37\n.text:0000000000401f39\n.text:0000000000401f3e\n.text:0000000000401f40\n.text:0000000000401f42\n.text:0000000000401f44\n.text:0000000000401f49\n.text:0000000000401f4e\n.text:0000000000401f53\n.text:0000000000401f56\n.text:0000000000401f5b\n.text:0000000000401f5e\n.text:0000000000401f63\n.text:0000000000401f66\n.text:0000000000401f68\n.text:0000000000401f6a\n.text:0000000000401f6c\n.text:0000000000401f6f\n.text:0000000000401f74\n.text:0000000000401f78\n.text:0000000000401f7c\n.text:0000000000401f7e\n.text:0000000000401f84\n.text:0000000000401f89\n.text:0000000000401f8e\n.text:0000000000401f91\n.text:0000000000401f96\n.text:0000000000401f98\n.text:0000000000401f9d\n.text:0000000000401fa0\n.text:0000000000401fa3\n.text:0000000000401fa7\n.text:0000000000401fac\n.text:0000000000401faf\n.text:0000000000401fb1\n.text:0000000000401fb3\n.text:0000000000401fb5\n.text:0000000000401fba\n.text:0000000000401fbd\n.text:0000000000401fc2\n.text:0000000000401fc4\n.text:0000000000401fc6\n.text:0000000000401fc8\n.text:0000000000401fcc\n.text:0000000000401fcf\n.text:0000000000401fd2\n.text:0000000000401fd5\n.text:0000000000401fd8\n.text:0000000000401fdd\n.text:0000000000401fdf\n.text:0000000000401fe3\n.text:0000000000401fe4\n.text:0000000000401fe6\n.text:0000000000401fe8\n.text:0000000000401fea\n.text:0000000000401fec\n.text:0000000000401fed\n'
p650
tp651
sS'quoting_options_from_style'
p652
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p653
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p654
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00403d0d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401520\n'
p655
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 0e d8 ff ff\n'
p656
S'.text:0000000000403cc0\n.text:0000000000403cc4\n.text:0000000000403cc7\n.text:0000000000403ccc\n.text:0000000000403cd1\n.text:0000000000403cd5\n.text:0000000000403cdd\n.text:0000000000403ce0\n.text:0000000000403ce2\n.text:0000000000403ce4\n.text:0000000000403ce8\n.text:0000000000403ceb\n.text:0000000000403cef\n.text:0000000000403cf4\n.text:0000000000403cf9\n.text:0000000000403cfd\n.text:0000000000403d01\n.text:0000000000403d05\n.text:0000000000403d08\n.text:0000000000403d0c\n.text:0000000000403d0d\n'
p657
tp658
sS'strcpy'
p659
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p660
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00609058)();\u000a  return pcVar1;\u000a}\u000a\u000a
p661
S'JMP qword ptr [0x00609058]\n'
p662
S'ff 25 f2 7a 20 00\n'
p663
S'.plt:0000000000401560\n'
p664
tp665
sS'c_isgraph'
p666
(S'\n__stdcall c_isgraph()\n'
p667
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p668
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p669
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p670
S'.text:0000000000405020\n.text:0000000000405023\n.text:0000000000405026\n.text:0000000000405029\n'
p671
tp672
sS'quotearg_buffer_restyled'
p673
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p674
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_00402d3c_caseD_7;\u000a  case 2:\u000a    goto switchD_00402d3c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_00402d3c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_00402d3c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_00402d3c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_00402d3c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_00402d3c_caseD_7;\u000aswitchD_00402d3c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_00402d3c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_00402d3c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00403800;\u000aLAB_00402f20:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00403809:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00403818:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_00402f2b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_00402f6f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_00402f6f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00403818;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00403745;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00403650;\u000a    }\u000a    goto LAB_00403818;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040377a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00403818;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_004037a9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403268;\u000a  case '\u005ca':\u000a    goto joined_r0x00403158;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00403158;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00402f86_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00403158;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00403158;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00402f86_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00403158:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_004036be;\u000a    }\u000a    goto LAB_00403818;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00403818;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00403818;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00403818;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00403818;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00403818;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00402f86_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00403716;\u000a      goto joined_r0x00403708;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403211:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403708;\u000a      goto LAB_00403716;\u000a    }\u000a    goto LAB_00403818;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00403818;\u000a  }\u000a  goto joined_r0x00403650;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040377a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_004037a9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_004037a9:\u000a  if (1 < uVar10) {\u000aLAB_00403286:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403342;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403211;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403342:\u000a        if (bVar6 != 0) goto LAB_00403818;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403268:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403286;\u000ajoined_r0x00403650:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00403650:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403677;\u000aLAB_004036b0:\u000a    if (bVar22) goto LAB_004036b5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_004036b0;\u000aLAB_00403677:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_004036b5:\u000a      if (bVar6 != 0) goto LAB_00403818;\u000aLAB_004036be:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403708;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00403716:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403708:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00403745:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00402f20;\u000aLAB_00403800:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00403809;\u000a  goto LAB_00402f2b;\u000a}\u000a\u000a
p675
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004015f0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x004038e5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x406990 + RAX*0x8]\nMOV EDI,0x406eb6\nMOV ESI,R15D\nCALL 0x00403f90\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x406eb8\nMOV ESI,R15D\nCALL 0x00403f90\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x00402d9d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00402da0\nNOP\nCMP R12,RSI\nJNC 0x00402d8e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00402d80\nJMP 0x00402da0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401600\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x00402e6c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x00402e6c\nMOV ECX,0x406eb4\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00402e66\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00402e07\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00402e34\nTEST RSI,RSI\nJZ 0x00402e21\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x406eb8\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00402e42\nMOV ECX,0x406eb8\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x00402e6c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x004038bc\nMOV ECX,0x406eb4\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00403800\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00403809\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x00402f6f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x00402f6a\nCMP R11,-0x1\nJNZ 0x00402f6a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401600\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00402fc0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040321c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x4069e8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00403818\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403670\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403677\nJMP 0x004036b0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x004016a0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040300d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00402f71\nJMP 0x00403818\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00402f71\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x00402f9b\nCMP EBX,0x2\nJNZ 0x00402f9b\nTEST R13,R13\nJNZ 0x00402f9b\nJMP 0x00403818\nCMP R11,-0x1\nJZ 0x004033f3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403413\nJMP 0x00402f9b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403424\nTEST R8B,R8B\nJNZ 0x00403818\nCMP EBX,0x2\nJNZ 0x004030c8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004030c8\nCMP R12,RSI\nJNC 0x004030a3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004030b2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004030c1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004030d2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403598\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403598\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403598\nCMP RCX,RSI\nJNC 0x0040310c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040311b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402fa6\nJMP 0x00403670\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402f99\nJMP 0x0040317a\nMOV DL,0x74\nJMP 0x00403162\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402f99\nJMP 0x0040317a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402f99\nJMP 0x0040317a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00403818\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402f99\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x004036be\nJMP 0x00403818\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00402f99\nTEST R8B,R8B\nJNZ 0x00403818\nCMP R12,RSI\nJNC 0x004031aa\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004031b9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004031c8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00402f99\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x004035ab\nCMP EBX,0x2\nJNZ 0x00402f99\nTEST R8B,R8B\nJZ 0x00402f99\nJMP 0x00403818\nCMP EBX,0x2\nJNZ 0x00403444\nTEST R8B,R8B\nJNZ 0x00403818\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00403716\nJMP 0x00403739\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403465\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x004018f0\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403658\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00403658\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403342\nJMP 0x00403310\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x004032f9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x004032f6\nCMP R12,RSI\nJNC 0x004032db\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x004032ea\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403330\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403330\nTEST BPL,0x1\nJZ 0x004033d3\nCMP R12,RSI\nJNC 0x00403324\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x004033d3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403310\nTEST R8B,R8B\nJNZ 0x00403818\nCMP EBX,0x2\nJNZ 0x0040338a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040338a\nCMP R12,RSI\nJNC 0x00403362\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403371\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403380\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403394\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004033ab\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004033c5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x004032c0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00403716\nJMP 0x00403739\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x00402f9b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x00402f9b\nJMP 0x00403818\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00403745\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402fa6\nJMP 0x00403670\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00403162\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00403716\nJMP 0x00403739\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403487\nMOV RDI,R10\nCALL 0x00401600\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401630\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040375f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403757\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403766\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040354e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403546\nBT RDI,RDX\nJC 0x004038b2\nINC RCX\nCMP RCX,R14\nJC 0x00403530\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x004018d0\nTEST EAX,EAX\nJNZ 0x00403563\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x004018c0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004034a5\nJMP 0x004037a9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402fa6\nJMP 0x00403670\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00402f99\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00402f99\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00402f99\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x00402f9b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x004037e2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00403818\nCMP R12,RSI\nJNC 0x0040360e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00403621\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403630\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040363f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402fa6\nJMP 0x00403670\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402fa6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x004036b0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x004036b5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00403710\nJMP 0x004036b5\nTEST BPL,BPL\nJZ 0x00403710\nTEST R8B,R8B\nJNZ 0x00403818\nCMP EBX,0x2\nJNZ 0x004036f8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004036f8\nCMP R12,RSI\nJNC 0x004036d3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004036e2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004036f1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403702\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00403742\nJMP 0x0040373e\nTEST DIL,0x1\nJZ 0x00403739\nAND AL,0x1\nJNZ 0x00403739\nCMP R12,RSI\nJNC 0x00403724\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403733\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00403742\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00403800\nJMP 0x00402f20\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x004037a4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040379c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x004037d8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040377a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004037a9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403268\nJMP 0x00403286\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004037a9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402fa6\nJMP 0x00403670\nCMP R13,R11\nJNZ 0x00402f2b\nTEST R8B,R8B\nJZ 0x00403872\nCMP EBX,0x2\nJNZ 0x00403872\nTEST R12,R12\nJNZ 0x00403872\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00402cb0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x004038a6\nTEST R8B,R8B\nJNZ 0x004038a6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x004038a6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00403899\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00403890\nCMP R12,RSI\nJNC 0x0040385d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040385d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00403818\nTEST RSI,RSI\nJZ 0x004038c9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x406eb4\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x00402e6c\nCALL 0x00401520\n'
p676
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 12 e9 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 90 69 40 00\nbf b6 6e 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf b8 6e 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 53 e8 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 b4 6e 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 b8 6e 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 b8 6e 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 b4 6e 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 b3 e6 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd e8 69 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 c7 e6 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 b7 e6 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 81 e1 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 63 e1 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 79 e3 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 42 e3 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 b4 6e 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 36 dc ff ff\n'
p677
S'.text:0000000000402cb0\n.text:0000000000402cb1\n.text:0000000000402cb3\n.text:0000000000402cb5\n.text:0000000000402cb7\n.text:0000000000402cb9\n.text:0000000000402cba\n.text:0000000000402cc1\n.text:0000000000402cc4\n.text:0000000000402cc7\n.text:0000000000402cca\n.text:0000000000402ccf\n.text:0000000000402cd4\n.text:0000000000402cd9\n.text:0000000000402cde\n.text:0000000000402ce6\n.text:0000000000402cea\n.text:0000000000402cf0\n.text:0000000000402cf8\n.text:0000000000402cfd\n.text:0000000000402d05\n.text:0000000000402d0a\n.text:0000000000402d0e\n.text:0000000000402d10\n.text:0000000000402d13\n.text:0000000000402d16\n.text:0000000000402d19\n.text:0000000000402d1e\n.text:0000000000402d21\n.text:0000000000402d24\n.text:0000000000402d27\n.text:0000000000402d2a\n.text:0000000000402d2c\n.text:0000000000402d2f\n.text:0000000000402d34\n.text:0000000000402d37\n.text:0000000000402d3c\n.text:0000000000402d43\n.text:0000000000402d48\n.text:0000000000402d4b\n.text:0000000000402d50\n.text:0000000000402d55\n.text:0000000000402d5a\n.text:0000000000402d5d\n.text:0000000000402d62\n.text:0000000000402d67\n.text:0000000000402d6c\n.text:0000000000402d6e\n.text:0000000000402d70\n.text:0000000000402d75\n.text:0000000000402d77\n.text:0000000000402d7a\n.text:0000000000402d7c\n.text:0000000000402d7e\n.text:0000000000402d80\n.text:0000000000402d83\n.text:0000000000402d85\n.text:0000000000402d8a\n.text:0000000000402d8e\n.text:0000000000402d94\n.text:0000000000402d97\n.text:0000000000402d99\n.text:0000000000402d9b\n.text:0000000000402d9d\n.text:0000000000402da0\n.text:0000000000402da5\n.text:0000000000402da8\n.text:0000000000402dad\n.text:0000000000402db2\n.text:0000000000402db5\n.text:0000000000402db8\n.text:0000000000402dbb\n.text:0000000000402dbe\n.text:0000000000402dc3\n.text:0000000000402dc6\n.text:0000000000402dc9\n.text:0000000000402dce\n.text:0000000000402dd1\n.text:0000000000402dd3\n.text:0000000000402dd6\n.text:0000000000402dd8\n.text:0000000000402dda\n.text:0000000000402ddd\n.text:0000000000402de2\n.text:0000000000402de7\n.text:0000000000402dec\n.text:0000000000402def\n.text:0000000000402df5\n.text:0000000000402df7\n.text:0000000000402dfa\n.text:0000000000402dfd\n.text:0000000000402e00\n.text:0000000000402e02\n.text:0000000000402e04\n.text:0000000000402e07\n.text:0000000000402e0a\n.text:0000000000402e0f\n.text:0000000000402e12\n.text:0000000000402e14\n.text:0000000000402e17\n.text:0000000000402e19\n.text:0000000000402e1e\n.text:0000000000402e21\n.text:0000000000402e26\n.text:0000000000402e2c\n.text:0000000000402e32\n.text:0000000000402e34\n.text:0000000000402e39\n.text:0000000000402e3f\n.text:0000000000402e42\n.text:0000000000402e45\n.text:0000000000402e48\n.text:0000000000402e4a\n.text:0000000000402e4f\n.text:0000000000402e52\n.text:0000000000402e58\n.text:0000000000402e5d\n.text:0000000000402e63\n.text:0000000000402e66\n.text:0000000000402e69\n.text:0000000000402e6c\n.text:0000000000402e74\n.text:0000000000402e76\n.text:0000000000402e78\n.text:0000000000402e7b\n.text:0000000000402e7f\n.text:0000000000402e81\n.text:0000000000402e84\n.text:0000000000402e88\n.text:0000000000402e8a\n.text:0000000000402e8d\n.text:0000000000402e90\n.text:0000000000402e93\n.text:0000000000402e95\n.text:0000000000402e99\n.text:0000000000402e9b\n.text:0000000000402e9f\n.text:0000000000402ea2\n.text:0000000000402ea5\n.text:0000000000402ea8\n.text:0000000000402eaa\n.text:0000000000402eae\n.text:0000000000402eb7\n.text:0000000000402eba\n.text:0000000000402ebc\n.text:0000000000402ec0\n.text:0000000000402ec2\n.text:0000000000402ec6\n.text:0000000000402ec8\n.text:0000000000402ecb\n.text:0000000000402ecf\n.text:0000000000402ed1\n.text:0000000000402ed4\n.text:0000000000402ed8\n.text:0000000000402edd\n.text:0000000000402ee0\n.text:0000000000402ee4\n.text:0000000000402eec\n.text:0000000000402eef\n.text:0000000000402ef2\n.text:0000000000402ef4\n.text:0000000000402ef8\n.text:0000000000402efb\n.text:0000000000402efd\n.text:0000000000402f02\n.text:0000000000402f06\n.text:0000000000402f0b\n.text:0000000000402f10\n.text:0000000000402f14\n.text:0000000000402f1a\n.text:0000000000402f20\n.text:0000000000402f25\n.text:0000000000402f2b\n.text:0000000000402f30\n.text:0000000000402f32\n.text:0000000000402f37\n.text:0000000000402f3b\n.text:0000000000402f3d\n.text:0000000000402f41\n.text:0000000000402f43\n.text:0000000000402f45\n.text:0000000000402f48\n.text:0000000000402f4d\n.text:0000000000402f4f\n.text:0000000000402f54\n.text:0000000000402f59\n.text:0000000000402f5d\n.text:0000000000402f62\n.text:0000000000402f67\n.text:0000000000402f6a\n.text:0000000000402f6d\n.text:0000000000402f6f\n.text:0000000000402f71\n.text:0000000000402f76\n.text:0000000000402f7a\n.text:0000000000402f80\n.text:0000000000402f82\n.text:0000000000402f84\n.text:0000000000402f86\n.text:0000000000402f8e\n.text:0000000000402f93\n.text:0000000000402f99\n.text:0000000000402f9b\n.text:0000000000402fa0\n.text:0000000000402fa6\n.text:0000000000402faf\n.text:0000000000402fb5\n.text:0000000000402fc0\n.text:0000000000402fc2\n.text:0000000000402fc5\n.text:0000000000402fc9\n.text:0000000000402fd1\n.text:0000000000402fd4\n.text:0000000000402fd9\n.text:0000000000402fdb\n.text:0000000000402fde\n.text:0000000000402fe0\n.text:0000000000402fe5\n.text:0000000000402fe8\n.text:0000000000402fed\n.text:0000000000402ff0\n.text:0000000000402ff5\n.text:0000000000402ff9\n.text:0000000000402ffe\n.text:0000000000403000\n.text:0000000000403002\n.text:0000000000403008\n.text:000000000040300d\n.text:0000000000403012\n.text:0000000000403015\n.text:000000000040301a\n.text:000000000040301e\n.text:0000000000403023\n.text:0000000000403028\n.text:000000000040302a\n.text:000000000040302c\n.text:0000000000403031\n.text:0000000000403033\n.text:0000000000403036\n.text:000000000040303c\n.text:000000000040303f\n.text:0000000000403045\n.text:0000000000403048\n.text:000000000040304e\n.text:0000000000403053\n.text:0000000000403057\n.text:000000000040305d\n.text:0000000000403060\n.text:0000000000403063\n.text:0000000000403067\n.text:000000000040306a\n.text:000000000040306c\n.text:000000000040306f\n.text:0000000000403075\n.text:000000000040307a\n.text:000000000040307f\n.text:0000000000403085\n.text:0000000000403088\n.text:000000000040308e\n.text:0000000000403091\n.text:0000000000403093\n.text:0000000000403095\n.text:0000000000403097\n.text:0000000000403099\n.text:000000000040309c\n.text:000000000040309e\n.text:00000000004030a3\n.text:00000000004030a8\n.text:00000000004030ab\n.text:00000000004030ad\n.text:00000000004030b2\n.text:00000000004030b7\n.text:00000000004030ba\n.text:00000000004030bc\n.text:00000000004030c1\n.text:00000000004030c5\n.text:00000000004030c8\n.text:00000000004030cb\n.text:00000000004030cd\n.text:00000000004030d2\n.text:00000000004030d7\n.text:00000000004030d9\n.text:00000000004030dc\n.text:00000000004030df\n.text:00000000004030e5\n.text:00000000004030e9\n.text:00000000004030ec\n.text:00000000004030f2\n.text:00000000004030f6\n.text:00000000004030f9\n.text:00000000004030fc\n.text:0000000000403102\n.text:0000000000403105\n.text:0000000000403107\n.text:000000000040310c\n.text:0000000000403111\n.text:0000000000403114\n.text:0000000000403116\n.text:000000000040311b\n.text:000000000040311f\n.text:0000000000403124\n.text:000000000040312a\n.text:000000000040312f\n.text:0000000000403131\n.text:0000000000403136\n.text:000000000040313c\n.text:000000000040313e\n.text:0000000000403140\n.text:0000000000403142\n.text:0000000000403144\n.text:0000000000403149\n.text:000000000040314f\n.text:0000000000403151\n.text:0000000000403153\n.text:0000000000403158\n.text:000000000040315e\n.text:0000000000403160\n.text:0000000000403162\n.text:0000000000403167\n.text:0000000000403169\n.text:000000000040316f\n.text:0000000000403174\n.text:000000000040317a\n.text:000000000040317d\n.text:0000000000403180\n.text:0000000000403186\n.text:000000000040318b\n.text:000000000040318e\n.text:0000000000403191\n.text:0000000000403197\n.text:000000000040319a\n.text:00000000004031a0\n.text:00000000004031a3\n.text:00000000004031a5\n.text:00000000004031aa\n.text:00000000004031af\n.text:00000000004031b2\n.text:00000000004031b4\n.text:00000000004031b9\n.text:00000000004031be\n.text:00000000004031c1\n.text:00000000004031c3\n.text:00000000004031c8\n.text:00000000004031cc\n.text:00000000004031ce\n.text:00000000004031d3\n.text:00000000004031d6\n.text:00000000004031d9\n.text:00000000004031df\n.text:00000000004031e2\n.text:00000000004031e8\n.text:00000000004031eb\n.text:00000000004031f1\n.text:00000000004031f6\n.text:00000000004031f9\n.text:00000000004031ff\n.text:0000000000403202\n.text:0000000000403208\n.text:000000000040320b\n.text:000000000040320d\n.text:0000000000403211\n.text:0000000000403217\n.text:000000000040321c\n.text:0000000000403220\n.text:0000000000403229\n.text:000000000040322f\n.text:0000000000403234\n.text:0000000000403239\n.text:000000000040323e\n.text:0000000000403241\n.text:0000000000403246\n.text:0000000000403249\n.text:000000000040324c\n.text:0000000000403251\n.text:0000000000403256\n.text:000000000040325a\n.text:000000000040325f\n.text:0000000000403264\n.text:0000000000403268\n.text:000000000040326a\n.text:000000000040326f\n.text:0000000000403275\n.text:0000000000403278\n.text:000000000040327a\n.text:000000000040327d\n.text:0000000000403280\n.text:0000000000403286\n.text:000000000040328b\n.text:000000000040328e\n.text:0000000000403291\n.text:0000000000403294\n.text:0000000000403297\n.text:0000000000403299\n.text:000000000040329d\n.text:000000000040329f\n.text:00000000004032a4\n.text:00000000004032a9\n.text:00000000004032af\n.text:00000000004032c0\n.text:00000000004032c5\n.text:00000000004032c7\n.text:00000000004032ca\n.text:00000000004032cc\n.text:00000000004032cf\n.text:00000000004032d1\n.text:00000000004032d4\n.text:00000000004032d6\n.text:00000000004032db\n.text:00000000004032e0\n.text:00000000004032e3\n.text:00000000004032e5\n.text:00000000004032ea\n.text:00000000004032ee\n.text:00000000004032f6\n.text:00000000004032f9\n.text:00000000004032fc\n.text:00000000004032fe\n.text:0000000000403302\n.text:0000000000403310\n.text:0000000000403314\n.text:000000000040331a\n.text:000000000040331d\n.text:000000000040331f\n.text:0000000000403324\n.text:0000000000403327\n.text:0000000000403329\n.text:0000000000403330\n.text:0000000000403333\n.text:0000000000403338\n.text:000000000040333b\n.text:0000000000403340\n.text:0000000000403342\n.text:0000000000403345\n.text:000000000040334b\n.text:000000000040334e\n.text:0000000000403350\n.text:0000000000403354\n.text:0000000000403356\n.text:0000000000403358\n.text:000000000040335b\n.text:000000000040335d\n.text:0000000000403362\n.text:0000000000403367\n.text:000000000040336a\n.text:000000000040336c\n.text:0000000000403371\n.text:0000000000403376\n.text:0000000000403379\n.text:000000000040337b\n.text:0000000000403380\n.text:0000000000403384\n.text:0000000000403386\n.text:000000000040338a\n.text:000000000040338d\n.text:000000000040338f\n.text:0000000000403394\n.text:0000000000403399\n.text:000000000040339c\n.text:000000000040339e\n.text:00000000004033a1\n.text:00000000004033a4\n.text:00000000004033a7\n.text:00000000004033ab\n.text:00000000004033b0\n.text:00000000004033b3\n.text:00000000004033b5\n.text:00000000004033b8\n.text:00000000004033bb\n.text:00000000004033be\n.text:00000000004033c1\n.text:00000000004033c5\n.text:00000000004033c9\n.text:00000000004033cd\n.text:00000000004033d1\n.text:00000000004033d3\n.text:00000000004033d7\n.text:00000000004033da\n.text:00000000004033e0\n.text:00000000004033e4\n.text:00000000004033e8\n.text:00000000004033ee\n.text:00000000004033f3\n.text:00000000004033f6\n.text:00000000004033f9\n.text:00000000004033fe\n.text:0000000000403401\n.text:0000000000403403\n.text:0000000000403406\n.text:000000000040340d\n.text:0000000000403413\n.text:0000000000403415\n.text:0000000000403419\n.text:000000000040341f\n.text:0000000000403424\n.text:0000000000403429\n.text:000000000040342f\n.text:0000000000403432\n.text:0000000000403434\n.text:0000000000403439\n.text:000000000040343f\n.text:0000000000403444\n.text:0000000000403446\n.text:000000000040344b\n.text:0000000000403451\n.text:0000000000403453\n.text:0000000000403456\n.text:000000000040345a\n.text:0000000000403460\n.text:0000000000403465\n.text:0000000000403471\n.text:0000000000403475\n.text:0000000000403477\n.text:000000000040347a\n.text:000000000040347f\n.text:0000000000403484\n.text:0000000000403487\n.text:000000000040348b\n.text:0000000000403490\n.text:0000000000403492\n.text:0000000000403496\n.text:0000000000403498\n.text:00000000004034a0\n.text:00000000004034a5\n.text:00000000004034aa\n.text:00000000004034ae\n.text:00000000004034b2\n.text:00000000004034ba\n.text:00000000004034bd\n.text:00000000004034c2\n.text:00000000004034c5\n.text:00000000004034c8\n.text:00000000004034cd\n.text:00000000004034d0\n.text:00000000004034d3\n.text:00000000004034d9\n.text:00000000004034dd\n.text:00000000004034e7\n.text:00000000004034ed\n.text:00000000004034f1\n.text:00000000004034f6\n.text:00000000004034fc\n.text:0000000000403500\n.text:0000000000403503\n.text:0000000000403507\n.text:0000000000403509\n.text:000000000040350e\n.text:0000000000403513\n.text:0000000000403517\n.text:0000000000403519\n.text:000000000040351e\n.text:0000000000403523\n.text:0000000000403527\n.text:000000000040352c\n.text:0000000000403530\n.text:0000000000403534\n.text:0000000000403537\n.text:000000000040353a\n.text:000000000040353c\n.text:0000000000403540\n.text:0000000000403546\n.text:0000000000403549\n.text:000000000040354c\n.text:000000000040354e\n.text:0000000000403552\n.text:0000000000403557\n.text:0000000000403559\n.text:000000000040355b\n.text:0000000000403563\n.text:0000000000403568\n.text:000000000040356b\n.text:0000000000403573\n.text:0000000000403576\n.text:0000000000403579\n.text:000000000040357e\n.text:0000000000403581\n.text:0000000000403583\n.text:0000000000403588\n.text:000000000040358d\n.text:0000000000403593\n.text:0000000000403598\n.text:000000000040359b\n.text:00000000004035a0\n.text:00000000004035a6\n.text:00000000004035ab\n.text:00000000004035b0\n.text:00000000004035b6\n.text:00000000004035ba\n.text:00000000004035bd\n.text:00000000004035c3\n.text:00000000004035c9\n.text:00000000004035cf\n.text:00000000004035d4\n.text:00000000004035d6\n.text:00000000004035d9\n.text:00000000004035df\n.text:00000000004035e3\n.text:00000000004035e5\n.text:00000000004035ef\n.text:00000000004035f3\n.text:00000000004035f9\n.text:00000000004035fc\n.text:00000000004035fe\n.text:0000000000403604\n.text:0000000000403607\n.text:0000000000403609\n.text:000000000040360e\n.text:0000000000403613\n.text:0000000000403616\n.text:000000000040361a\n.text:000000000040361c\n.text:0000000000403621\n.text:0000000000403626\n.text:0000000000403629\n.text:000000000040362b\n.text:0000000000403630\n.text:0000000000403635\n.text:0000000000403638\n.text:000000000040363a\n.text:000000000040363f\n.text:0000000000403643\n.text:0000000000403645\n.text:0000000000403648\n.text:000000000040364b\n.text:0000000000403650\n.text:0000000000403656\n.text:0000000000403658\n.text:000000000040365d\n.text:0000000000403662\n.text:0000000000403668\n.text:0000000000403670\n.text:0000000000403675\n.text:0000000000403677\n.text:000000000040367c\n.text:000000000040367f\n.text:0000000000403681\n.text:0000000000403684\n.text:0000000000403686\n.text:0000000000403689\n.text:000000000040368c\n.text:000000000040368f\n.text:0000000000403691\n.text:0000000000403699\n.text:000000000040369c\n.text:000000000040369e\n.text:00000000004036a0\n.text:00000000004036b0\n.text:00000000004036b3\n.text:00000000004036b5\n.text:00000000004036b8\n.text:00000000004036be\n.text:00000000004036c1\n.text:00000000004036c3\n.text:00000000004036c5\n.text:00000000004036c7\n.text:00000000004036c9\n.text:00000000004036cc\n.text:00000000004036ce\n.text:00000000004036d3\n.text:00000000004036d8\n.text:00000000004036db\n.text:00000000004036dd\n.text:00000000004036e2\n.text:00000000004036e7\n.text:00000000004036ea\n.text:00000000004036ec\n.text:00000000004036f1\n.text:00000000004036f5\n.text:00000000004036f8\n.text:00000000004036fb\n.text:00000000004036fd\n.text:0000000000403702\n.text:0000000000403705\n.text:0000000000403708\n.text:000000000040370a\n.text:0000000000403710\n.text:0000000000403714\n.text:0000000000403716\n.text:0000000000403718\n.text:000000000040371a\n.text:000000000040371d\n.text:000000000040371f\n.text:0000000000403724\n.text:0000000000403729\n.text:000000000040372c\n.text:000000000040372e\n.text:0000000000403733\n.text:0000000000403737\n.text:0000000000403739\n.text:000000000040373c\n.text:000000000040373e\n.text:0000000000403742\n.text:0000000000403745\n.text:0000000000403748\n.text:000000000040374c\n.text:0000000000403752\n.text:0000000000403757\n.text:000000000040375f\n.text:0000000000403764\n.text:0000000000403766\n.text:000000000040376e\n.text:0000000000403773\n.text:0000000000403775\n.text:000000000040377a\n.text:000000000040377f\n.text:0000000000403783\n.text:0000000000403785\n.text:000000000040378a\n.text:000000000040378d\n.text:0000000000403790\n.text:0000000000403792\n.text:000000000040379a\n.text:000000000040379c\n.text:00000000004037a4\n.text:00000000004037a9\n.text:00000000004037ad\n.text:00000000004037b2\n.text:00000000004037b7\n.text:00000000004037bb\n.text:00000000004037c0\n.text:00000000004037c5\n.text:00000000004037c9\n.text:00000000004037cd\n.text:00000000004037d3\n.text:00000000004037d8\n.text:00000000004037e0\n.text:00000000004037e2\n.text:00000000004037e4\n.text:00000000004037e8\n.text:00000000004037ed\n.text:00000000004037f3\n.text:0000000000403800\n.text:0000000000403803\n.text:0000000000403809\n.text:000000000040380c\n.text:000000000040380e\n.text:0000000000403811\n.text:0000000000403813\n.text:0000000000403816\n.text:0000000000403818\n.text:0000000000403820\n.text:0000000000403826\n.text:000000000040382a\n.text:000000000040382d\n.text:0000000000403831\n.text:0000000000403836\n.text:000000000040383a\n.text:000000000040383e\n.text:0000000000403841\n.text:0000000000403844\n.text:0000000000403847\n.text:000000000040384b\n.text:000000000040384f\n.text:0000000000403851\n.text:0000000000403856\n.text:000000000040385a\n.text:000000000040385d\n.text:0000000000403860\n.text:0000000000403867\n.text:0000000000403868\n.text:000000000040386a\n.text:000000000040386c\n.text:000000000040386e\n.text:0000000000403870\n.text:0000000000403871\n.text:0000000000403872\n.text:000000000040387a\n.text:000000000040387d\n.text:000000000040387f\n.text:0000000000403882\n.text:0000000000403884\n.text:0000000000403886\n.text:0000000000403888\n.text:000000000040388a\n.text:000000000040388d\n.text:0000000000403890\n.text:0000000000403893\n.text:0000000000403895\n.text:0000000000403899\n.text:000000000040389c\n.text:000000000040389f\n.text:00000000004038a2\n.text:00000000004038a4\n.text:00000000004038a6\n.text:00000000004038a9\n.text:00000000004038ab\n.text:00000000004038b0\n.text:00000000004038b2\n.text:00000000004038b7\n.text:00000000004038bc\n.text:00000000004038bf\n.text:00000000004038c1\n.text:00000000004038c6\n.text:00000000004038c9\n.text:00000000004038ce\n.text:00000000004038d1\n.text:00000000004038d7\n.text:00000000004038dd\n.text:00000000004038e0\n.text:00000000004038e5\n'
p678
tp679
sS'mode_compile'
p680
(S'\n__stdcall mode_compile(char * mode_string)\n'
p681
V\u000amode_change * mode_compile(char *mode_string)\u000a\u000a{\u000a  byte *pbVar1;\u000a  char cVar2;\u000a  byte bVar3;\u000a  char cVar4;\u000a  uint uVar5;\u000a  uint uVar6;\u000a  mode_change *__ptr;\u000a  char *pcVar7;\u000a  uint uVar8;\u000a  long lVar9;\u000a  char cVar10;\u000a  mode_t mVar11;\u000a  size_t n;\u000a  long lVar12;\u000a  undefined auStack56 [8];\u000a  \u000a  if ((*mode_string & 0xf8U) == 0x30) {\u000a    uVar8 = 0;\u000a    do {\u000a      uVar8 = (int)*mode_string + -0x30 + uVar8 * 8;\u000a      if (0xfff < uVar8) {\u000a        return (mode_change *)0x0;\u000a      }\u000a      pbVar1 = (byte *)(mode_string + 1);\u000a      mode_string = mode_string + 1;\u000a    } while ((*pbVar1 & 0xf8) == 0x30);\u000a    if (*pbVar1 != 0) {\u000a      return (mode_change *)0x0;\u000a    }\u000a    octal_to_mode();\u000a    __ptr = make_node_op_equals();\u000a    return __ptr;\u000a  }\u000a  n = 1;\u000a  pcVar7 = mode_string;\u000a  do {\u000a    cVar2 = *pcVar7;\u000a    if (cVar2 < '-') {\u000a      lVar9 = 1;\u000a      if (cVar2 != '+') {\u000a        if (cVar2 == 0) break;\u000aLAB_0040268e:\u000a        lVar9 = 0;\u000a      }\u000a    }\u000a    else {\u000a      if (cVar2 == '-') {\u000a        lVar9 = 1;\u000a      }\u000a      else {\u000a        lVar9 = 1;\u000a        if (cVar2 != '=') goto LAB_0040268e;\u000a      }\u000a    }\u000a    n = n + lVar9;\u000a    pcVar7 = pcVar7 + 1;\u000a  } while( true );\u000a  __ptr = (mode_change *)xnmalloc(n,0x10);\u000a  lVar9 = 0;\u000aLAB_004026d0:\u000a  uVar8 = 0;\u000a  while (uVar5 = SEXT14(*mode_string), uVar5 - 0x61 < 0x15) {\u000a    uVar6 = 0x438;\u000a    switch(uVar5) {\u000a    case 0x61:\u000a      uVar6 = 0xfff;\u000a      break;\u000a    default:\u000a      goto switchD_004026f6_caseD_62;\u000a    case 0x67:\u000a      break;\u000a    case 0x6f:\u000a      uVar6 = 0x207;\u000a      break;\u000a    case 0x75:\u000a      uVar6 = 0x9c0;\u000a    }\u000a    uVar8 = uVar8 | uVar6;\u000a    mode_string = mode_string + 1;\u000a  }\u000a  if ((0x3d < uVar5) || (lVar12 = lVar9, ((ulong)auStack56 >> ((ulong)uVar5 & 0x1f) & 1) == 0)) {\u000aswitchD_004026f6_caseD_62:\u000a    free(__ptr);\u000a    return (mode_change *)0x0;\u000a  }\u000aswitchD_0040288b_caseD_2b:\u000a  pcVar7 = mode_string + 1;\u000a  cVar2 = *mode_string;\u000a  switch(mode_string[1]) {\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a    uVar5 = 0;\u000a    do {\u000a      uVar5 = (int)*pcVar7 + -0x30 + uVar5 * 8;\u000a      if (0xfff < uVar5) goto switchD_004026f6_caseD_62;\u000a      bVar3 = pcVar7[1];\u000a      pcVar7 = pcVar7 + 1;\u000a    } while ((bVar3 & 0xf8) == 0x30);\u000a    if ((uVar8 == 0) && ((bVar3 == 0x2c || (bVar3 == 0)))) {\u000a      uVar5 = octal_to_mode();\u000a      cVar10 = 1;\u000a      uVar8 = 0xfff;\u000a      mVar11 = 0xfff;\u000a      break;\u000a    }\u000a    goto switchD_004026f6_caseD_62;\u000a  default:\u000a    cVar10 = 1;\u000a    uVar5 = 0;\u000a    do {\u000a      cVar4 = 2;\u000a      switch(*pcVar7) {\u000a      case 'r':\u000a        uVar5 = uVar5 | 0x124;\u000a        cVar4 = cVar10;\u000a        break;\u000a      case 's':\u000a        uVar5 = uVar5 | 0xc00;\u000a        cVar4 = cVar10;\u000a        break;\u000a      case 't':\u000a        uVar5 = uVar5 | 0x200;\u000a        cVar4 = cVar10;\u000a        break;\u000a      case 'w':\u000a        uVar5 = uVar5 | 0x92;\u000a        cVar4 = cVar10;\u000a        break;\u000a      case 'x':\u000a        uVar5 = uVar5 | 0x49;\u000a        cVar4 = cVar10;\u000a        break;\u000a      default:\u000a        goto switchD_004027e2_caseD_59;\u000a      case 'X':\u000a        break;\u000a      }\u000a      cVar10 = cVar4;\u000a      pcVar7 = pcVar7 + 1;\u000a    } while( true );\u000a  case 'g':\u000a    pcVar7 = mode_string + 2;\u000a    cVar10 = 3;\u000a    mVar11 = 0;\u000a    uVar5 = 0x38;\u000a    break;\u000a  case 'o':\u000a    pcVar7 = mode_string + 2;\u000a    cVar10 = 3;\u000a    mVar11 = 0;\u000a    uVar5 = 7;\u000a    break;\u000a  case 'u':\u000a    pcVar7 = mode_string + 2;\u000a    cVar10 = 3;\u000a    mVar11 = 0;\u000a    uVar5 = 0x1c0;\u000a  }\u000a  goto LAB_00402850;\u000aswitchD_004027e2_caseD_59:\u000a  mVar11 = 0;\u000aLAB_00402850:\u000a  __ptr[lVar12].op = cVar2;\u000a  __ptr[lVar12].flag = cVar10;\u000a  __ptr[lVar12].affected = uVar8;\u000a  __ptr[lVar12].value = uVar5;\u000a  if (mVar11 == 0) {\u000a    mVar11 = (-(uint)(uVar8 == 0) | uVar8) & uVar5;\u000a  }\u000a  lVar9 = lVar12 + 1;\u000a  __ptr[lVar12].mentioned = mVar11;\u000a  mode_string = pcVar7;\u000a  lVar12 = lVar9;\u000a  switch(*pcVar7) {\u000a  case '+':\u000a  case '-':\u000a  case '=':\u000a    goto switchD_0040288b_caseD_2b;\u000a  case ',':\u000a    break;\u000a  default:\u000a    if (*pcVar7 == 0) {\u000a      __ptr[lVar9].flag = 0;\u000a      return __ptr;\u000a    }\u000a    goto switchD_004026f6_caseD_62;\u000a  }\u000a  mode_string = pcVar7 + 1;\u000a  goto LAB_004026d0;\u000a}\u000a\u000a
p682
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBP,RDI\nMOV AL,byte ptr [RBP]\nAND AL,0xf8\nCMP AL,0x30\nJNZ 0x00402653\nXOR R14D,R14D\nXOR EDI,EDI\nMOV RBX,RBP\nNOP\nMOVSX EAX,byte ptr [RBX]\nLEA EDI,[RAX + RDI*0x8 + -0x30]\nCMP EDI,0xfff\nJA 0x004028a3\nMOVZX EAX,byte ptr [RBX + 0x1]\nINC RBX\nMOV ECX,EAX\nAND CL,0xf8\nCMP CL,0x30\nJZ 0x004025f0\nTEST AL,AL\nJNZ 0x004028a0\nCALL 0x004028d0\nSUB RBX,RBP\nMOV ECX,EAX\nAND ECX,0xc00\nOR ECX,0x3ff\nCMP RBX,0x5\nMOV ESI,0xfff\nCMOVL ESI,ECX\nMOV EDI,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004028e0\nMOV EDI,0x1\nMOV RAX,RBP\nJMP 0x00402666\nADD RDI,RDX\nINC RAX\nMOVZX ECX,byte ptr [RAX]\nCMP CL,0x2c\nJLE 0x00402680\nCMP CL,0x2d\nJZ 0x004026a0\nCMP CL,0x3d\nMOV EDX,0x1\nJZ 0x00402660\nJMP 0x0040268e\nCMP CL,0x2b\nMOV EDX,0x1\nJZ 0x00402660\nTEST CL,CL\nJZ 0x004026a7\nXOR EDX,EDX\nJMP 0x00402660\nMOV EDX,0x1\nJMP 0x00402660\nMOV ESI,0x10\nCALL 0x00404d60\nMOV R14,RAX\nXOR R15D,R15D\nMOV R12,0x2000280000000000\nJMP 0x004026d0\nINC RBP\nNOP word ptr CS:[RAX + RAX*0x1]\nXOR ECX,ECX\nJMP 0x004026e5\nOR ECX,EAX\nINC RBP\nMOVSX EAX,byte ptr [RBP]\nLEA EDX,[RAX + -0x61]\nCMP EDX,0x14\nJA 0x00402730\nMOV EAX,0x438\nJMP qword ptr [0x4064c8 + RDX*0x8]\nMOV EAX,0xfff\nJMP 0x004026e0\nMOV EAX,0x207\nJMP 0x004026e0\nMOV EAX,0x9c0\nJMP 0x004026e0\nCMP EAX,0x3d\nJA 0x00402898\nMOV EAX,EAX\nBT RSP,RAX\nJNC 0x00402898\nLEA RSI,[RBP + 0x1]\nMOV R13B,byte ptr [RBP]\nMOVSX EAX,byte ptr [RBP + 0x1]\nADD EAX,-0x30\nCMP EAX,0x45\nJA 0x004027bf\nJMP qword ptr [0x406570 + RAX*0x8]\nXOR EDI,EDI\nMOV RBP,RSI\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RBP]\nLEA EDI,[RAX + RDI*0x8 + -0x30]\nCMP EDI,0xfff\nJA 0x00402898\nMOVZX EAX,byte ptr [RBP + 0x1]\nINC RBP\nMOV EDX,EAX\nAND DL,0xf8\nCMP DL,0x30\nJZ 0x00402770\nTEST ECX,ECX\nJNZ 0x00402898\nCMP AL,0x2c\nJZ 0x004027a9\nTEST AL,AL\nJNZ 0x00402898\nCALL 0x004028d0\nMOV BL,0x1\nMOV ECX,0xfff\nMOV EDI,0xfff\nJMP 0x00402850\nMOV BL,0x1\nXOR EAX,EAX\nJMP 0x004027d5\nINC RSI\nMOV EBX,EDX\nMOVSX EDI,byte ptr [RSI]\nADD EDI,-0x58\nCMP EDI,0x20\nJA 0x00402841\nMOV DL,0x2\nJMP qword ptr [0x4067a0 + RDI*0x8]\nOR EAX,0x124\nJMP 0x00402810\nOR EAX,0xc00\nJMP 0x00402810\nOR EAX,0x200\nJMP 0x00402810\nOR EAX,0x92\nJMP 0x00402810\nOR EAX,0x49\nNOP dword ptr [RAX + RAX*0x1]\nMOV EDX,EBX\nJMP 0x004027d0\nADD RBP,0x2\nMOV BL,0x3\nXOR EDI,EDI\nMOV EAX,0x38\nJMP 0x00402850\nADD RBP,0x2\nMOV BL,0x3\nXOR EDI,EDI\nMOV EAX,0x7\nJMP 0x00402850\nADD RBP,0x2\nMOV BL,0x3\nXOR EDI,EDI\nMOV EAX,0x1c0\nJMP 0x00402850\nXOR EDI,EDI\nMOV RBP,RSI\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,R15\nSHL RSI,0x4\nMOV byte ptr [R14 + RSI*0x1],R13B\nMOV byte ptr [R14 + RSI*0x1 + 0x1],BL\nMOV dword ptr [R14 + RSI*0x1 + 0x4],ECX\nMOV dword ptr [R14 + RSI*0x1 + 0x8],EAX\nTEST EDI,EDI\nJNZ 0x00402877\nCMP ECX,0x1\nSBB EDI,EDI\nOR EDI,ECX\nAND EDI,EAX\nINC R15\nMOV dword ptr [R14 + RSI*0x1 + 0xc],EDI\nMOV AL,byte ptr [RBP]\nADD AL,0xd5\nCMP AL,0x12\nJA 0x00402892\nMOVZX EAX,AL\nJMP qword ptr [0x4068a8 + RAX*0x8]\nCMP byte ptr [RBP],0x0\nJZ 0x004028b5\nMOV RDI,R14\nCALL 0x00401500\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nSHL R15,0x4\nMOV byte ptr [R14 + R15*0x1 + 0x1],0x0\nJMP 0x004028a3\n'
p683
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 fd\n8a 45 00\n24 f8\n3c 30\n75 6c\n45 31 f6\n31 ff\n48 89 eb\n90\n0f be 03\n8d 7c f8 d0\n81 ff ff 0f 00 00\n0f 87 a0 02 00 00\n0f b6 43 01\n48 ff c3\n89 c1\n80 e1 f8\n80 f9 30\n74 dc\n84 c0\n0f 85 84 02 00 00\ne8 af 02 00 00\n48 29 eb\n89 c1\n81 e1 00 0c 00 00\n81 c9 ff 03 00 00\n48 83 fb 05\nbe ff 0f 00 00\n0f 4c f1\n89 c7\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 8d 02 00 00\nbf 01 00 00 00\n48 89 e8\neb 09\n48 01 d7\n48 ff c0\n0f b6 08\n80 f9 2c\n7e 12\n80 f9 2d\n74 2d\n80 f9 3d\nba 01 00 00 00\n74 e3\neb 0f\n80 f9 2b\nba 01 00 00 00\n74 d6\n84 c9\n74 19\n31 d2\neb ce\nba 01 00 00 00\neb b9\nbe 10 00 00 00\ne8 af 26 00 00\n49 89 c6\n45 31 ff\n49 bc 00 00 00 00 00 28 00 20\neb 0d\n48 ff c5\n66 2e 0f 1f 84 00 00 00 00 00\n31 c9\neb 11\n09 c1\n48 ff c5\n0f be 45 00\n8d 50 9f\n83 fa 14\n77 3f\nb8 38 04 00 00\nff 24 d5 c8 64 40 00\nb8 ff 0f 00 00\neb dc\nb8 07 02 00 00\neb c9\nb8 c0 09 00 00\neb b9\n83 f8 3d\n0f 87 5f 01 00 00\n89 c0\n49 0f a3 c4\n0f 83 53 01 00 00\n48 8d 75 01\n44 8a 6d 00\n0f be 45 01\n83 c0 d0\n83 f8 45\n77 66\nff 24 c5 70 65 40 00\n31 ff\n48 89 f5\n66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 45 00\n8d 7c f8 d0\n81 ff ff 0f 00 00\n0f 87 14 01 00 00\n0f b6 45 01\n48 ff c5\n89 c2\n80 e2 f8\n80 fa 30\n74 db\n85 c9\n0f 85 fb 00 00 00\n3c 2c\n74 08\n84 c0\n0f 85 ef 00 00 00\ne8 22 01 00 00\nb3 01\nb9 ff 0f 00 00\nbf ff 0f 00 00\ne9 91 00 00 00\nb3 01\n31 c0\neb 10\n48 ff c6\n89 d3\n0f be 3e\n83 c7 a8\n83 ff 20\n77 61\nb2 02\nff 24 fd a0 67 40 00\n0d 24 01 00 00\neb 20\n0d 00 0c 00 00\neb 19\n0d 00 02 00 00\neb 12\n0d 92 00 00 00\neb 0b\n83 c8 49\n0f 1f 84 00 00 00 00 00\n89 da\neb bc\n48 83 c5 02\nb3 03\n31 ff\nb8 38 00 00 00\neb 2d\n48 83 c5 02\nb3 03\n31 ff\nb8 07 00 00 00\neb 1e\n48 83 c5 02\nb3 03\n31 ff\nb8 c0 01 00 00\neb 0f\n31 ff\n48 89 f5\n66 2e 0f 1f 84 00 00 00 00 00\n4c 89 fe\n48 c1 e6 04\n45 88 2c 36\n41 88 5c 36 01\n41 89 4c 36 04\n41 89 44 36 08\n85 ff\n75 09\n83 f9 01\n19 ff\n09 cf\n21 c7\n49 ff c7\n41 89 7c 36 0c\n8a 45 00\n04 d5\n3c 12\n77 0a\n0f b6 c0\nff 24 c5 a8 68 40 00\n80 7d 00 00\n74 1d\n4c 89 f7\ne8 60 ec ff ff\n45 31 f6\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 c1 e7 04\n43 c6 44 3e 01 00\neb e2\n'
p684
S'.text:00000000004025d0\n.text:00000000004025d1\n.text:00000000004025d3\n.text:00000000004025d5\n.text:00000000004025d7\n.text:00000000004025d9\n.text:00000000004025da\n.text:00000000004025db\n.text:00000000004025de\n.text:00000000004025e1\n.text:00000000004025e3\n.text:00000000004025e5\n.text:00000000004025e7\n.text:00000000004025ea\n.text:00000000004025ec\n.text:00000000004025ef\n.text:00000000004025f0\n.text:00000000004025f3\n.text:00000000004025f7\n.text:00000000004025fd\n.text:0000000000402603\n.text:0000000000402607\n.text:000000000040260a\n.text:000000000040260c\n.text:000000000040260f\n.text:0000000000402612\n.text:0000000000402614\n.text:0000000000402616\n.text:000000000040261c\n.text:0000000000402621\n.text:0000000000402624\n.text:0000000000402626\n.text:000000000040262c\n.text:0000000000402632\n.text:0000000000402636\n.text:000000000040263b\n.text:000000000040263e\n.text:0000000000402640\n.text:0000000000402644\n.text:0000000000402645\n.text:0000000000402647\n.text:0000000000402649\n.text:000000000040264b\n.text:000000000040264d\n.text:000000000040264e\n.text:0000000000402653\n.text:0000000000402658\n.text:000000000040265b\n.text:0000000000402660\n.text:0000000000402663\n.text:0000000000402666\n.text:0000000000402669\n.text:000000000040266c\n.text:000000000040266e\n.text:0000000000402671\n.text:0000000000402673\n.text:0000000000402676\n.text:000000000040267b\n.text:000000000040267d\n.text:0000000000402680\n.text:0000000000402683\n.text:0000000000402688\n.text:000000000040268a\n.text:000000000040268c\n.text:000000000040268e\n.text:0000000000402690\n.text:00000000004026a0\n.text:00000000004026a5\n.text:00000000004026a7\n.text:00000000004026ac\n.text:00000000004026b1\n.text:00000000004026b4\n.text:00000000004026b7\n.text:00000000004026c1\n.text:00000000004026c3\n.text:00000000004026c6\n.text:00000000004026d0\n.text:00000000004026d2\n.text:00000000004026e0\n.text:00000000004026e2\n.text:00000000004026e5\n.text:00000000004026e9\n.text:00000000004026ec\n.text:00000000004026ef\n.text:00000000004026f1\n.text:00000000004026f6\n.text:00000000004026fd\n.text:0000000000402702\n.text:0000000000402710\n.text:0000000000402715\n.text:0000000000402720\n.text:0000000000402725\n.text:0000000000402730\n.text:0000000000402733\n.text:0000000000402739\n.text:000000000040273b\n.text:000000000040273f\n.text:0000000000402745\n.text:0000000000402749\n.text:000000000040274d\n.text:0000000000402751\n.text:0000000000402754\n.text:0000000000402757\n.text:0000000000402759\n.text:0000000000402760\n.text:0000000000402762\n.text:0000000000402765\n.text:0000000000402770\n.text:0000000000402774\n.text:0000000000402778\n.text:000000000040277e\n.text:0000000000402784\n.text:0000000000402788\n.text:000000000040278b\n.text:000000000040278d\n.text:0000000000402790\n.text:0000000000402793\n.text:0000000000402795\n.text:0000000000402797\n.text:000000000040279d\n.text:000000000040279f\n.text:00000000004027a1\n.text:00000000004027a3\n.text:00000000004027a9\n.text:00000000004027ae\n.text:00000000004027b0\n.text:00000000004027b5\n.text:00000000004027ba\n.text:00000000004027bf\n.text:00000000004027c1\n.text:00000000004027c3\n.text:00000000004027d0\n.text:00000000004027d3\n.text:00000000004027d5\n.text:00000000004027d8\n.text:00000000004027db\n.text:00000000004027de\n.text:00000000004027e0\n.text:00000000004027e2\n.text:00000000004027e9\n.text:00000000004027ee\n.text:00000000004027f0\n.text:00000000004027f5\n.text:00000000004027f7\n.text:00000000004027fc\n.text:00000000004027fe\n.text:0000000000402803\n.text:0000000000402805\n.text:0000000000402808\n.text:0000000000402810\n.text:0000000000402812\n.text:0000000000402814\n.text:0000000000402818\n.text:000000000040281a\n.text:000000000040281c\n.text:0000000000402821\n.text:0000000000402823\n.text:0000000000402827\n.text:0000000000402829\n.text:000000000040282b\n.text:0000000000402830\n.text:0000000000402832\n.text:0000000000402836\n.text:0000000000402838\n.text:000000000040283a\n.text:000000000040283f\n.text:0000000000402841\n.text:0000000000402843\n.text:0000000000402846\n.text:0000000000402850\n.text:0000000000402853\n.text:0000000000402857\n.text:000000000040285b\n.text:0000000000402860\n.text:0000000000402865\n.text:000000000040286a\n.text:000000000040286c\n.text:000000000040286e\n.text:0000000000402871\n.text:0000000000402873\n.text:0000000000402875\n.text:0000000000402877\n.text:000000000040287a\n.text:000000000040287f\n.text:0000000000402882\n.text:0000000000402884\n.text:0000000000402886\n.text:0000000000402888\n.text:000000000040288b\n.text:0000000000402892\n.text:0000000000402896\n.text:0000000000402898\n.text:000000000040289b\n.text:00000000004028a0\n.text:00000000004028a3\n.text:00000000004028a6\n.text:00000000004028aa\n.text:00000000004028ab\n.text:00000000004028ad\n.text:00000000004028af\n.text:00000000004028b1\n.text:00000000004028b3\n.text:00000000004028b4\n.text:00000000004028b5\n.text:00000000004028b9\n.text:00000000004028bf\n'
p685
tp686
sS'set_quoting_style'
p687
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p688
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p689
S'TEST RDI,RDI\nMOV EAX,0x609310\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p690
S'48 85 ff\nb8 10 93 60 00\n48 0f 45 c7\n89 30\nc3\n'
p691
S'.text:0000000000402b90\n.text:0000000000402b93\n.text:0000000000402b98\n.text:0000000000402b9c\n.text:0000000000402b9e\n'
p692
tp693
sS'textdomain'
p694
(S'\n__stdcall textdomain()\n'
p695
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00609080)();\u000a  return;\u000a}\u000a\u000a
p696
S'JMP qword ptr [0x00609080]\n'
p697
S'ff 25 ca 7a 20 00\n'
p698
S'.plt:00000000004015b0\n'
p699
tp700
sS'xmemdup'
p701
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p702
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p703
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00404d80\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401710\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p704
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 2c c8 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p705
S'.text:0000000000404ec0\n.text:0000000000404ec2\n.text:0000000000404ec4\n.text:0000000000404ec5\n.text:0000000000404ec8\n.text:0000000000404ecb\n.text:0000000000404ece\n.text:0000000000404ed3\n.text:0000000000404ed6\n.text:0000000000404ed9\n.text:0000000000404edc\n.text:0000000000404edf\n.text:0000000000404ee4\n.text:0000000000404ee7\n.text:0000000000404ee8\n.text:0000000000404eea\n.text:0000000000404eec\n'
p706
tp707
sS'get_quoting_style'
p708
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p709
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p710
S'TEST RDI,RDI\nMOV EAX,0x609310\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p711
S'48 85 ff\nb8 10 93 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p712
S'.text:0000000000402b80\n.text:0000000000402b83\n.text:0000000000402b88\n.text:0000000000402b8c\n.text:0000000000402b8e\n'
p713
tp714
sS'ferror_unlocked'
p715
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_00609108)();\u000a  return iVar1;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x00609108]\n'
p718
S'ff 25 42 7a 20 00\n'
p719
S'.plt:00000000004016c0\n'
p720
tp721
sS'exit'
p722
(S'\n__stdcall exit(int __status)\n'
p723
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006091f0)();\u000a  return;\u000a}\u000a\u000a
p724
S'JMP qword ptr [0x006091f0]\n'
p725
S'ff 25 5a 79 20 00\n'
p726
S'.plt:0000000000401890\n'
p727
tp728
sS'locale_charset'
p729
(S'\n__stdcall locale_charset()\n'
p730
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0040529d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0040529d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p731
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401760\nTEST RAX,RAX\nMOV R14D,0x407181\nCMOVNZ R14,RAX\nCALL 0x004052b0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00405275\nJMP 0x0040529d\nMOV RDI,RBX\nCALL 0x00401600\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401600\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0040529d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004016e0\nTEST EAX,EAX\nJZ 0x00405290\nCMP BPL,0x2a\nJNZ 0x00405250\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00405250\nMOV RDI,RBX\nCALL 0x00401600\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x4077d8\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p732
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 32 c5 ff ff\n48 85 c0\n41 be 81 71 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 a8 c3 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 9a c3 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 60 c4 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 68 c3 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 d8 77 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p733
S'.text:0000000000405220\n.text:0000000000405221\n.text:0000000000405223\n.text:0000000000405224\n.text:0000000000405229\n.text:000000000040522e\n.text:0000000000405231\n.text:0000000000405237\n.text:000000000040523b\n.text:0000000000405240\n.text:0000000000405243\n.text:0000000000405246\n.text:0000000000405249\n.text:000000000040524b\n.text:0000000000405250\n.text:0000000000405253\n.text:0000000000405258\n.text:000000000040525c\n.text:0000000000405261\n.text:0000000000405266\n.text:000000000040526b\n.text:0000000000405270\n.text:0000000000405273\n.text:0000000000405275\n.text:0000000000405278\n.text:000000000040527b\n.text:0000000000405280\n.text:0000000000405282\n.text:0000000000405284\n.text:0000000000405288\n.text:000000000040528a\n.text:000000000040528e\n.text:0000000000405290\n.text:0000000000405293\n.text:0000000000405298\n.text:000000000040529d\n.text:00000000004052a1\n.text:00000000004052a6\n.text:00000000004052aa\n.text:00000000004052ab\n.text:00000000004052ad\n.text:00000000004052ae\n'
p734
tp735
sS'set_program_name'
p736
(S'\n__stdcall set_program_name(char * argv0)\n'
p737
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p738
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402b11\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401640\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00402afb\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x406978\nMOV EDX,0x7\nCALL 0x00401540\nTEST EAX,EAX\nJNZ 0x00402afb\nMOV ESI,0x406980\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401540\nTEST EAX,EAX\nJNZ 0x00402af8\nADD R14,0x3\nMOV qword ptr [0x006092a0],R14\nMOV RBX,R14\nMOV qword ptr [0x00609300],RBX\nMOV qword ptr [0x006092c0],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x006092e0]\nMOV EDI,0x406940\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x004018a0\nCALL 0x00401520\n'
p739
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 97 eb ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 78 69 40 00\nba 07 00 00 00\ne8 6d ea ff ff\n85 c0\n75 24\nbe 80 69 40 00\nba 03 00 00 00\n4c 89 f7\ne8 57 ea ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 a8 67 20 00\n4c 89 f3\n48 89 1d fe 67 20 00\n48 89 1d b7 67 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d c8 67 20 00\nbf 40 69 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 74 ed ff ff\ne8 ef e9 ff ff\n'
p740
S'.text:0000000000402a90\n.text:0000000000402a92\n.text:0000000000402a93\n.text:0000000000402a94\n.text:0000000000402a97\n.text:0000000000402a9a\n.text:0000000000402a9c\n.text:0000000000402aa1\n.text:0000000000402aa4\n.text:0000000000402aa9\n.text:0000000000402aac\n.text:0000000000402ab0\n.text:0000000000402ab4\n.text:0000000000402ab7\n.text:0000000000402aba\n.text:0000000000402abe\n.text:0000000000402ac0\n.text:0000000000402ac4\n.text:0000000000402ac9\n.text:0000000000402ace\n.text:0000000000402ad3\n.text:0000000000402ad5\n.text:0000000000402ad7\n.text:0000000000402adc\n.text:0000000000402ae1\n.text:0000000000402ae4\n.text:0000000000402ae9\n.text:0000000000402aeb\n.text:0000000000402aed\n.text:0000000000402af1\n.text:0000000000402af8\n.text:0000000000402afb\n.text:0000000000402b02\n.text:0000000000402b09\n.text:0000000000402b0d\n.text:0000000000402b0e\n.text:0000000000402b10\n.text:0000000000402b11\n.text:0000000000402b18\n.text:0000000000402b1d\n.text:0000000000402b22\n.text:0000000000402b27\n.text:0000000000402b2c\n'
p741
tp742
sS'quotearg_buffer'
p743
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p744
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p745
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x609310\nCMOVNZ RBP,R8\nCALL 0x00401530\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00402cb0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p746
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 10 93 60 00\n49 0f 45 e8\ne8 d8 e8 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p747
S'.text:0000000000402c30\n.text:0000000000402c31\n.text:0000000000402c33\n.text:0000000000402c35\n.text:0000000000402c37\n.text:0000000000402c39\n.text:0000000000402c3a\n.text:0000000000402c3b\n.text:0000000000402c3e\n.text:0000000000402c41\n.text:0000000000402c44\n.text:0000000000402c47\n.text:0000000000402c4a\n.text:0000000000402c4f\n.text:0000000000402c53\n.text:0000000000402c58\n.text:0000000000402c5b\n.text:0000000000402c5d\n.text:0000000000402c61\n.text:0000000000402c65\n.text:0000000000402c69\n.text:0000000000402c6d\n.text:0000000000402c70\n.text:0000000000402c73\n.text:0000000000402c76\n.text:0000000000402c79\n.text:0000000000402c7c\n.text:0000000000402c7f\n.text:0000000000402c83\n.text:0000000000402c84\n.text:0000000000402c89\n.text:0000000000402c8d\n.text:0000000000402c91\n.text:0000000000402c93\n.text:0000000000402c97\n.text:0000000000402c98\n.text:0000000000402c9a\n.text:0000000000402c9c\n.text:0000000000402c9e\n.text:0000000000402ca0\n.text:0000000000402ca1\n'
p748
tp749
sS'quotearg_colon'
p750
(S'\n__stdcall quotearg_colon(char * arg)\n'
p751
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p752
S'MOV ESI,0x3a\nJMP 0x00403e10\n'
p753
S'be 3a 00 00 00\neb e9\n'
p754
S'.text:0000000000403e20\n.text:0000000000403e25\n'
p755
tp756
sS'savewd_chdir'
p757
(S'\n__stdcall savewd_chdir(savewd * wd, char * dir, int * open_result)\n'
p758
V\u000aint savewd_chdir(savewd *wd,char *dir,int *open_result)\u000a\u000a{\u000a  int iVar1;\u000a  _Bool _Var2;\u000a  int __fd;\u000a  int iVar3;\u000a  int *piVar4;\u000a  int *in_RCX;\u000a  \u000a  if ((((ulong)open_result & 1) != 0) || (__fd = -1, in_RCX != (int *)0x0)) {\u000a    __fd = open(dir,((uint)open_result & 1) << 0x11 | 0x10900);\u000a    if (in_RCX != (int *)0x0) {\u000a      *in_RCX = __fd;\u000a      piVar4 = __errno_location();\u000a      in_RCX[1] = *piVar4;\u000a    }\u000a    if (__fd < 0) {\u000a      piVar4 = __errno_location();\u000a      if (*piVar4 != 0xd) {\u000a        return -1;\u000a      }\u000a    }\u000a    else {\u000a      iVar3 = 0;\u000a      if (((ulong)open_result & 2) != 0) goto joined_r0x00404482;\u000a    }\u000a  }\u000a  _Var2 = savewd_save(wd);\u000a  if (_Var2 == false) {\u000a    if (__fd < 0) {\u000a      iVar3 = chdir(dir);\u000a    }\u000a    else {\u000a      iVar3 = fchdir(__fd);\u000a    }\u000a    if (iVar3 == 0) {\u000a      if (4 < wd->state + ~INITIAL_STATE) {\u000a                    /* WARNING: Subroutine does not return */\u000a        __assert_fail("0","lib/savewd.c",0x97,\u000a                      "int savewd_chdir(struct savewd *, const char *, int, int *)");\u000a      }\u000a      iVar3 = 0;\u000a      switch(wd->state) {\u000a      case FD_STATE:\u000a        wd->state = FD_POST_CHDIR_STATE;\u000a        iVar3 = 0;\u000a        break;\u000a      case FORKING_STATE:\u000a        iVar3 = 0;\u000a        if (wd->val != 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("wd->val.child == 0","lib/savewd.c",0x93,\u000a                        "int savewd_chdir(struct savewd *, const char *, int, int *)");\u000a        }\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    in_RCX = (int *)0x0;\u000a    iVar3 = -2;\u000a  }\u000ajoined_r0x00404482:\u000a  if ((-1 < __fd) && (in_RCX == (int *)0x0)) {\u000a    piVar4 = __errno_location();\u000a    iVar1 = *piVar4;\u000a    close(__fd);\u000a    *piVar4 = iVar1;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p759
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RCX\nMOV EBX,EDX\nMOV R12,RSI\nMOV RBP,RDI\nTEST R15,R15\nSETZ AL\nMOV ESI,EBX\nAND ESI,0x1\nJNZ 0x004043dd\nMOV R14D,0xffffffff\nTEST AL,AL\nJNZ 0x00404429\nSHL ESI,0x11\nOR ESI,0x10900\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401850\nMOV R14D,EAX\nTEST R15,R15\nJZ 0x00404406\nMOV dword ptr [R15],R14D\nCALL 0x00401530\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R15 + 0x4],EAX\nTEST R14D,R14D\nJS 0x00404415\nXOR R13D,R13D\nTEST BL,0x2\nJZ 0x00404429\nJMP 0x0040448c\nCALL 0x00401530\nCMP dword ptr [RAX],0xd\nMOV R13D,0xffffffff\nJNZ 0x004044aa\nMOV RDI,RBP\nCALL 0x004044f0\nTEST AL,AL\nJZ 0x00404445\nMOV R13D,0xfffffffe\nXOR R15D,R15D\nTEST R14D,R14D\nJNS 0x00404491\nJMP 0x004044aa\nTEST R14D,R14D\nJS 0x00404454\nMOV EDI,R14D\nCALL 0x004017b0\nJMP 0x0040445c\nMOV RDI,R12\nCALL 0x00401610\nMOV R13D,EAX\nTEST R13D,R13D\nJNZ 0x0040448c\nMOV EAX,dword ptr [RBP]\nDEC EAX\nCMP EAX,0x4\nJA 0x004044bc\nXOR R13D,R13D\nJMP qword ptr [0x406ed8 + RAX*0x8]\nMOV dword ptr [RBP],0x2\nTEST R14D,R14D\nJNS 0x00404491\nJMP 0x004044aa\nCMP dword ptr [RBP + 0x4],0x0\nJNZ 0x004044d5\nTEST R14D,R14D\nJS 0x004044aa\nTEST R15,R15\nJNZ 0x004044aa\nCALL 0x00401530\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nMOV EDI,R14D\nCALL 0x00401690\nMOV dword ptr [RBX],EBP\nMOV EAX,R13D\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x407001\nMOV ESI,0x406f63\nMOV EDX,0x97\nMOV ECX,0x406f70\nCALL 0x00401660\nMOV EDI,0x406f50\nMOV ESI,0x406f63\nMOV EDX,0x93\nMOV ECX,0x406f70\nCALL 0x00401660\n'
p760
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 cf\n89 d3\n49 89 f4\n48 89 fd\n4d 85 ff\n0f 94 c0\n89 de\n83 e6 01\n75 0a\n41 be ff ff ff ff\n84 c0\n75 4c\nc1 e6 11\n81 ce 00 09 01 00\n31 c0\n4c 89 e7\ne8 60 d4 ff ff\n41 89 c6\n4d 85 ff\n74 0e\n45 89 37\ne8 30 d1 ff ff\n8b 00\n41 89 47 04\n45 85 f6\n78 0a\n45 31 ed\nf6 c3 02\n74 16\neb 77\ne8 16 d1 ff ff\n83 38 0d\n41 bd ff ff ff ff\n0f 85 81 00 00 00\n48 89 ef\ne8 bf 00 00 00\n84 c0\n74 10\n41 bd fe ff ff ff\n45 31 ff\n45 85 f6\n79 4e\neb 65\n45 85 f6\n78 0a\n44 89 f7\ne8 5e d3 ff ff\neb 08\n4c 89 e7\ne8 b4 d1 ff ff\n41 89 c5\n45 85 ed\n75 28\n8b 45 00\nff c8\n83 f8 04\n77 4e\n45 31 ed\nff 24 c5 d8 6e 40 00\nc7 45 00 02 00 00 00\n45 85 f6\n79 0d\neb 24\n83 7d 04 00\n75 49\n45 85 f6\n78 19\n4d 85 ff\n75 14\ne8 95 d0 ff ff\n48 89 c3\n8b 2b\n44 89 f7\ne8 e8 d1 ff ff\n89 2b\n44 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 01 70 40 00\nbe 63 6f 40 00\nba 97 00 00 00\nb9 70 6f 40 00\ne8 8b d1 ff ff\nbf 50 6f 40 00\nbe 63 6f 40 00\nba 93 00 00 00\nb9 70 6f 40 00\ne8 72 d1 ff ff\n'
p761
S'.text:00000000004043b0\n.text:00000000004043b1\n.text:00000000004043b3\n.text:00000000004043b5\n.text:00000000004043b7\n.text:00000000004043b9\n.text:00000000004043ba\n.text:00000000004043bb\n.text:00000000004043be\n.text:00000000004043c0\n.text:00000000004043c3\n.text:00000000004043c6\n.text:00000000004043c9\n.text:00000000004043cc\n.text:00000000004043ce\n.text:00000000004043d1\n.text:00000000004043d3\n.text:00000000004043d9\n.text:00000000004043db\n.text:00000000004043dd\n.text:00000000004043e0\n.text:00000000004043e6\n.text:00000000004043e8\n.text:00000000004043eb\n.text:00000000004043f0\n.text:00000000004043f3\n.text:00000000004043f6\n.text:00000000004043f8\n.text:00000000004043fb\n.text:0000000000404400\n.text:0000000000404402\n.text:0000000000404406\n.text:0000000000404409\n.text:000000000040440b\n.text:000000000040440e\n.text:0000000000404411\n.text:0000000000404413\n.text:0000000000404415\n.text:000000000040441a\n.text:000000000040441d\n.text:0000000000404423\n.text:0000000000404429\n.text:000000000040442c\n.text:0000000000404431\n.text:0000000000404433\n.text:0000000000404435\n.text:000000000040443b\n.text:000000000040443e\n.text:0000000000404441\n.text:0000000000404443\n.text:0000000000404445\n.text:0000000000404448\n.text:000000000040444a\n.text:000000000040444d\n.text:0000000000404452\n.text:0000000000404454\n.text:0000000000404457\n.text:000000000040445c\n.text:000000000040445f\n.text:0000000000404462\n.text:0000000000404464\n.text:0000000000404467\n.text:0000000000404469\n.text:000000000040446c\n.text:000000000040446e\n.text:0000000000404471\n.text:0000000000404478\n.text:000000000040447f\n.text:0000000000404482\n.text:0000000000404484\n.text:0000000000404486\n.text:000000000040448a\n.text:000000000040448c\n.text:000000000040448f\n.text:0000000000404491\n.text:0000000000404494\n.text:0000000000404496\n.text:000000000040449b\n.text:000000000040449e\n.text:00000000004044a0\n.text:00000000004044a3\n.text:00000000004044a8\n.text:00000000004044aa\n.text:00000000004044ad\n.text:00000000004044b1\n.text:00000000004044b2\n.text:00000000004044b4\n.text:00000000004044b6\n.text:00000000004044b8\n.text:00000000004044ba\n.text:00000000004044bb\n.text:00000000004044bc\n.text:00000000004044c1\n.text:00000000004044c6\n.text:00000000004044cb\n.text:00000000004044d0\n.text:00000000004044d5\n.text:00000000004044da\n.text:00000000004044df\n.text:00000000004044e4\n.text:00000000004044e9\n'
p762
tp763
sS'rpl_fflush'
p764
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p765
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00609150)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p766
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040592d\nMOV RDI,RBX\nCALL 0x004017a0\nTEST EAX,EAX\nJZ 0x0040592d\nMOV RDI,RBX\nCALL 0x00405940\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401750\n'
p767
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 7f be ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 1a be ff ff\n'
p768
S'.text:0000000000405910\n.text:0000000000405911\n.text:0000000000405914\n.text:0000000000405917\n.text:0000000000405919\n.text:000000000040591c\n.text:0000000000405921\n.text:0000000000405923\n.text:0000000000405925\n.text:0000000000405928\n.text:000000000040592d\n.text:0000000000405930\n.text:0000000000405931\n'
p769
tp770
sS'__assert_fail'
p771
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p772
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_006090d8)();\u000a  return;\u000a}\u000a\u000a
p773
S'JMP qword ptr [0x006090d8]\n'
p774
S'ff 25 72 7a 20 00\n'
p775
S'.plt:0000000000401660\n'
p776
tp777
sS'bindtextdomain'
p778
(S'\n__stdcall bindtextdomain()\n'
p779
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00609090)();\u000a  return;\u000a}\u000a\u000a
p780
S'JMP qword ptr [0x00609090]\n'
p781
S'ff 25 ba 7a 20 00\n'
p782
S'.plt:00000000004015d0\n'
p783
tp784
sS'set_char_quoting'
p785
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p786
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p787
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x609310\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p788
S'89 f1\n48 85 ff\nbe 10 93 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p789
S'.text:0000000000402ba0\n.text:0000000000402ba2\n.text:0000000000402ba5\n.text:0000000000402baa\n.text:0000000000402bae\n.text:0000000000402bb0\n.text:0000000000402bb3\n.text:0000000000402bb7\n.text:0000000000402bbc\n.text:0000000000402bbf\n.text:0000000000402bc1\n.text:0000000000402bc3\n.text:0000000000402bc6\n.text:0000000000402bc8\n.text:0000000000402bcb\n.text:0000000000402bcd\n.text:0000000000402bd0\n.text:0000000000402bd5\n'
p790
tp791
sS'quotearg_n'
p792
(S'\n__stdcall quotearg_n(char * arg)\n'
p793
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p794
S'MOV RDX,-0x1\nMOV ECX,0x609310\nJMP 0x00403a90\n'
p795
S'48 c7 c2 ff ff ff ff\nb9 10 93 60 00\neb 02\n'
p796
S'.text:0000000000403a80\n.text:0000000000403a87\n.text:0000000000403a8c\n'
p797
tp798
sS'close_stream'
p799
(S'\n__stdcall close_stream(FILE * stream)\n'
p800
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p801
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401570\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004016c0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00405890\nTEST EBP,EBP\nJZ 0x0040511b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040513f\nCALL 0x00401530\nMOV dword ptr [RAX],0x0\nJMP 0x0040513f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040513f\nTEST CL,CL\nJNZ 0x0040513f\nCALL 0x00401530\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p802
S'55\n41 56\n53\n48 89 fb\ne8 84 c4 ff ff\n49 89 c6\n48 89 df\ne8 c9 c5 ff ff\n89 c5\n48 89 df\ne8 8f 07 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 1d c4 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 fe c3 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p803
S'.text:00000000004050e0\n.text:00000000004050e1\n.text:00000000004050e3\n.text:00000000004050e4\n.text:00000000004050e7\n.text:00000000004050ec\n.text:00000000004050ef\n.text:00000000004050f2\n.text:00000000004050f7\n.text:00000000004050f9\n.text:00000000004050fc\n.text:0000000000405101\n.text:0000000000405103\n.text:0000000000405105\n.text:000000000040510a\n.text:000000000040510c\n.text:000000000040510e\n.text:0000000000405113\n.text:0000000000405119\n.text:000000000040511b\n.text:000000000040511d\n.text:0000000000405120\n.text:0000000000405122\n.text:0000000000405124\n.text:0000000000405127\n.text:0000000000405129\n.text:000000000040512b\n.text:000000000040512d\n.text:0000000000405132\n.text:0000000000405134\n.text:0000000000405137\n.text:000000000040513c\n.text:000000000040513f\n.text:0000000000405141\n.text:0000000000405142\n.text:0000000000405144\n.text:0000000000405145\n'
p804
tp805
sS'quotearg_colon_mem'
p806
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p807
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p808
S'MOV EDX,0x3a\nJMP 0x00403da0\n'
p809
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p810
S'.text:0000000000403e30\n.text:0000000000403e35\n'
p811
tp812
sS'xcalloc'
p813
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p814
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p815
S'PUSH RAX\nCALL 0x00404f40\nTEST RAX,RAX\nJZ 0x00404ead\nPOP RCX\nRET\nCALL 0x00404f10\n'
p816
S'50\ne8 9a 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p817
S'.text:0000000000404ea0\n.text:0000000000404ea1\n.text:0000000000404ea6\n.text:0000000000404ea9\n.text:0000000000404eab\n.text:0000000000404eac\n.text:0000000000404ead\n'
p818
tp819
sS'clear_ungetc_buffer_preserving_position'
p820
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p821
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p822
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405947\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00405960\n'
p823
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p824
S'.text:0000000000405940\n.text:0000000000405944\n.text:0000000000405946\n.text:0000000000405947\n.text:0000000000405949\n.text:000000000040594e\n'
p825
tp826
sS'xnmalloc'
p827
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p828
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p829
S'MOV RAX,RDI\nMUL RSI\nJO 0x00404d71\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00404d80\nPUSH RAX\nCALL 0x00404f10\n'
p830
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p831
S'.text:0000000000404d60\n.text:0000000000404d63\n.text:0000000000404d66\n.text:0000000000404d68\n.text:0000000000404d6c\n.text:0000000000404d6f\n.text:0000000000404d71\n.text:0000000000404d72\n'
p832
tp833
sS'quotearg_char'
p834
(S'\n__stdcall quotearg_char(char * arg)\n'
p835
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p836
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00403da0\n'
p837
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p838
S'.text:0000000000403e10\n.text:0000000000403e12\n.text:0000000000403e19\n.text:0000000000403e1b\n'
p839
tp840
sS'malloc'
p841
(S'\n__stdcall malloc(size_t __size)\n'
p842
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00609148)();\u000a  return pvVar1;\u000a}\u000a\u000a
p843
S'JMP qword ptr [0x00609148]\n'
p844
S'ff 25 02 7a 20 00\n'
p845
S'.plt:0000000000401740\n'
p846
tp847
sS'savewd_delegating'
p848
(S'\n__stdcall savewd_delegating(savewd * wd)\n'
p849
V\u000a_Bool savewd_delegating(savewd *wd)\u000a\u000a{\u000a  if (wd->state == FORKING_STATE) {\u000a    return (_Bool)(0 < (int)wd->val);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p850
S'CMP dword ptr [RDI],0x3\nJNZ 0x0040485d\nCMP dword ptr [RDI + 0x4],0x0\nSETG AL\nRET\nXOR EAX,EAX\nRET\n'
p851
S'83 3f 03\n75 08\n83 7f 04 00\n0f 9f c0\nc3\n31 c0\nc3\n'
p852
S'.text:0000000000404850\n.text:0000000000404853\n.text:0000000000404855\n.text:0000000000404859\n.text:000000000040485c\n.text:000000000040485d\n.text:000000000040485f\n'
p853
tp854
sS'octal_to_mode'
p855
(S'\n__stdcall octal_to_mode()\n'
p856
V\u000amode_t octal_to_mode(void)\u000a\u000a{\u000a  mode_t in_EDI;\u000a  \u000a  return in_EDI;\u000a}\u000a\u000a
p857
S'MOV EAX,EDI\nRET\n'
p858
S'89 f8\nc3\n'
p859
S'.text:00000000004028d0\n.text:00000000004028d2\n'
p860
tp861
sS'c_tolower'
p862
(S'\n__stdcall c_tolower()\n'
p863
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p864
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p865
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p866
S'.text:00000000004050c0\n.text:00000000004050c3\n.text:00000000004050c6\n.text:00000000004050c9\n.text:00000000004050cc\n'
p867
tp868
sS'savewd_restore'
p869
(S'\n__stdcall savewd_restore(savewd * wd)\n'
p870
V\u000aint savewd_restore(savewd *wd)\u000a\u000a{\u000a  __pid_t __pid;\u000a  int iVar1;\u000a  __pid_t _Var2;\u000a  int *piVar3;\u000a  uint uVar4;\u000a  int __status;\u000a  uint local_1c;\u000a  \u000a  if (ERROR_STATE < wd->state) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0","lib/savewd.c",0xda,"int savewd_restore(struct savewd *, int)");\u000a  }\u000a  uVar4 = 0;\u000a  switch(wd->state) {\u000a  case FD_POST_CHDIR_STATE:\u000a    iVar1 = fchdir(wd->val);\u000a    if (iVar1 == 0) {\u000a      wd->state = FD_STATE;\u000a      return 0;\u000a    }\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(wd->val);\u000a    wd->state = ERROR_STATE;\u000a    wd->val = iVar1;\u000a  case ERROR_STATE:\u000a    iVar1 = wd->val;\u000a    piVar3 = __errno_location();\u000a    *piVar3 = iVar1;\u000a    uVar4 = 0xffffffff;\u000a    break;\u000a  case FORKING_STATE:\u000a    __pid = wd->val;\u000a    if (__pid == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(__status);\u000a    }\u000a    if (0 < __pid) {\u000a      while (_Var2 = waitpid(__pid,(int *)&local_1c,0), _Var2 < 0) {\u000a        piVar3 = __errno_location();\u000a        if (*piVar3 != 4) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("(*__errno_location ()) == 4","lib/savewd.c",0xd0,\u000a                        "int savewd_restore(struct savewd *, int)");\u000a        }\u000a      }\u000a      wd->val = 0xffffffff;\u000a      if ((local_1c & 0x7f) != 0) {\u000a        raise(local_1c & 0x7f);\u000a      }\u000a      uVar4 = local_1c >> 8 & 0xff;\u000a    }\u000a  }\u000a  return (int)uVar4;\u000a}\u000a\u000a
p871
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RDI\nMOV EAX,dword ptr [R14]\nCMP RAX,0x4\nJA 0x00404684\nXOR EBP,EBP\nJMP qword ptr [0x406f00 + RAX*0x8]\nMOV EDI,dword ptr [R14 + 0x4]\nCALL 0x004017b0\nTEST EAX,EAX\nJZ 0x00404672\nCALL 0x00401530\nMOV EBX,dword ptr [RAX]\nMOV EDI,dword ptr [R14 + 0x4]\nCALL 0x00401690\nMOV dword ptr [R14],0x4\nMOV dword ptr [R14 + 0x4],EBX\nMOV EBX,dword ptr [R14 + 0x4]\nCALL 0x00401530\nMOV dword ptr [RAX],EBX\nMOV EBP,0xffffffff\nJMP 0x00404679\nMOV EBX,dword ptr [R14 + 0x4]\nTEST EBX,EBX\nJZ 0x0040469d\nJLE 0x00404679\nLEA RBP,[RSP + 0xc]\nNOP word ptr CS:[RAX + RAX*0x1]\nXOR EDX,EDX\nMOV EDI,EBX\nMOV RSI,RBP\nCALL 0x00401840\nTEST EAX,EAX\nJNS 0x00404653\nCALL 0x00401530\nCMP dword ptr [RAX],0x4\nJZ 0x00404620\nMOV EDI,0x406fac\nMOV ESI,0x406f63\nMOV EDX,0xd0\nMOV ECX,0x406fc8\nCALL 0x00401660\nMOV dword ptr [R14 + 0x4],0xffffffff\nMOV EDI,dword ptr [RSP + 0xc]\nAND EDI,0x7f\nJZ 0x00404669\nCALL 0x004014f0\nMOV EAX,dword ptr [RSP + 0xc]\nMOVZX EBP,AH\nJMP 0x00404679\nMOV dword ptr [R14],0x1\nMOV EAX,EBP\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV EDI,0x407001\nMOV ESI,0x406f63\nMOV EDX,0xda\nMOV ECX,0x406fc8\nCALL 0x00401660\nMOV EDI,ESI\nCALL 0x00401550\n'
p872
S'55\n41 56\n53\n48 83 ec 10\n49 89 fe\n41 8b 06\n48 83 f8 04\n0f 87 cc 00 00 00\n31 ed\nff 24 c5 00 6f 40 00\n41 8b 7e 04\ne8 e6 d1 ff ff\n85 c0\n0f 84 a0 00 00 00\ne8 59 cf ff ff\n8b 18\n41 8b 7e 04\ne8 ae d0 ff ff\n41 c7 06 04 00 00 00\n41 89 5e 04\n41 8b 5e 04\ne8 3a cf ff ff\n89 18\nbd ff ff ff ff\neb 7a\n41 8b 5e 04\n85 db\n0f 84 92 00 00 00\n7e 6c\n48 8d 6c 24 0c\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n31 d2\n89 df\n48 89 ee\ne8 14 d2 ff ff\n85 c0\n79 23\ne8 fb ce ff ff\n83 38 04\n74 e6\nbf ac 6f 40 00\nbe 63 6f 40 00\nba d0 00 00 00\nb9 c8 6f 40 00\ne8 0d d0 ff ff\n41 c7 46 04 ff ff ff ff\n8b 7c 24 0c\n83 e7 7f\n74 05\ne8 87 ce ff ff\n8b 44 24 0c\n0f b6 ec\neb 07\n41 c7 06 01 00 00 00\n89 e8\n48 83 c4 10\n5b\n41 5e\n5d\nc3\nbf 01 70 40 00\nbe 63 6f 40 00\nba da 00 00 00\nb9 c8 6f 40 00\ne8 c3 cf ff ff\n89 f7\ne8 ac ce ff ff\n'
p873
S'.text:00000000004045a0\n.text:00000000004045a1\n.text:00000000004045a3\n.text:00000000004045a4\n.text:00000000004045a8\n.text:00000000004045ab\n.text:00000000004045ae\n.text:00000000004045b2\n.text:00000000004045b8\n.text:00000000004045ba\n.text:00000000004045c1\n.text:00000000004045c5\n.text:00000000004045ca\n.text:00000000004045cc\n.text:00000000004045d2\n.text:00000000004045d7\n.text:00000000004045d9\n.text:00000000004045dd\n.text:00000000004045e2\n.text:00000000004045e9\n.text:00000000004045ed\n.text:00000000004045f1\n.text:00000000004045f6\n.text:00000000004045f8\n.text:00000000004045fd\n.text:00000000004045ff\n.text:0000000000404603\n.text:0000000000404605\n.text:000000000040460b\n.text:000000000040460d\n.text:0000000000404612\n.text:0000000000404620\n.text:0000000000404622\n.text:0000000000404624\n.text:0000000000404627\n.text:000000000040462c\n.text:000000000040462e\n.text:0000000000404630\n.text:0000000000404635\n.text:0000000000404638\n.text:000000000040463a\n.text:000000000040463f\n.text:0000000000404644\n.text:0000000000404649\n.text:000000000040464e\n.text:0000000000404653\n.text:000000000040465b\n.text:000000000040465f\n.text:0000000000404662\n.text:0000000000404664\n.text:0000000000404669\n.text:000000000040466d\n.text:0000000000404670\n.text:0000000000404672\n.text:0000000000404679\n.text:000000000040467b\n.text:000000000040467f\n.text:0000000000404680\n.text:0000000000404682\n.text:0000000000404683\n.text:0000000000404684\n.text:0000000000404689\n.text:000000000040468e\n.text:0000000000404693\n.text:0000000000404698\n.text:000000000040469d\n.text:000000000040469f\n'
p874
tp875
sS'getopt_long'
p876
(S'\n__stdcall getopt_long()\n'
p877
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_006090b8)();\u000a  return;\u000a}\u000a\u000a
p878
S'JMP qword ptr [0x006090b8]\n'
p879
S'ff 25 92 7a 20 00\n'
p880
S'.plt:0000000000401620\n'
p881
tp882
sS'quotearg_style'
p883
(S'\n__stdcall quotearg_style(char * arg)\n'
p884
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p885
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00403c80\n'
p886
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p887
S'.text:0000000000403d60\n.text:0000000000403d63\n.text:0000000000403d65\n.text:0000000000403d67\n.text:0000000000403d69\n.text:0000000000403d6c\n'
p888
tp889
sS'emit_try_help'
p890
(S'\n__stdcall emit_try_help()\n'
p891
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p892
S'PUSH RBX\nMOV RBX,qword ptr [0x006092e0]\nXOR EDI,EDI\nMOV ESI,0x406222\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x00609300]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x004018b0\n'
p893
S'53\n48 8b 1d d8 77 20 00\n31 ff\nbe 22 62 40 00\nba 05 00 00 00\ne8 c7 fa ff ff\n48 89 c2\n48 8b 0d dd 77 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 7d fd ff ff\n'
p894
S'.text:0000000000401b00\n.text:0000000000401b01\n.text:0000000000401b08\n.text:0000000000401b0a\n.text:0000000000401b0f\n.text:0000000000401b14\n.text:0000000000401b19\n.text:0000000000401b1c\n.text:0000000000401b23\n.text:0000000000401b28\n.text:0000000000401b2a\n.text:0000000000401b2d\n.text:0000000000401b2e\n'
p895
tp896
sS'strrchr'
p897
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p898
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006090c8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p899
S'JMP qword ptr [0x006090c8]\n'
p900
S'ff 25 82 7a 20 00\n'
p901
S'.plt:0000000000401640\n'
p902
tp903
sS'quotearg_alloc_mem'
p904
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p905
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p906
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x609310\nCMOVNZ R12,RCX\nCALL 0x00401530\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402cb0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00404e50\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402cb0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x004039da\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p907
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 10 93 60 00\n4c 0f 45 e1\ne8 f8 db ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 c1 14 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p908
S'.text:0000000000403900\n.text:0000000000403901\n.text:0000000000403903\n.text:0000000000403905\n.text:0000000000403907\n.text:0000000000403909\n.text:000000000040390a\n.text:000000000040390e\n.text:0000000000403911\n.text:0000000000403916\n.text:0000000000403919\n.text:000000000040391e\n.text:0000000000403921\n.text:0000000000403926\n.text:0000000000403929\n.text:000000000040392f\n.text:0000000000403933\n.text:0000000000403938\n.text:000000000040393d\n.text:000000000040393f\n.text:0000000000403943\n.text:0000000000403945\n.text:0000000000403948\n.text:000000000040394c\n.text:0000000000403951\n.text:0000000000403955\n.text:000000000040395a\n.text:000000000040395e\n.text:0000000000403960\n.text:0000000000403962\n.text:0000000000403965\n.text:0000000000403968\n.text:000000000040396b\n.text:0000000000403970\n.text:0000000000403975\n.text:0000000000403977\n.text:000000000040397c\n.text:0000000000403980\n.text:0000000000403983\n.text:0000000000403987\n.text:000000000040398a\n.text:000000000040398f\n.text:0000000000403992\n.text:0000000000403996\n.text:000000000040399a\n.text:000000000040399d\n.text:00000000004039a0\n.text:00000000004039a5\n.text:00000000004039aa\n.text:00000000004039ad\n.text:00000000004039b2\n.text:00000000004039b7\n.text:00000000004039b9\n.text:00000000004039be\n.text:00000000004039c3\n.text:00000000004039c7\n.text:00000000004039ca\n.text:00000000004039ce\n.text:00000000004039d3\n.text:00000000004039d5\n.text:00000000004039d7\n.text:00000000004039da\n.text:00000000004039dd\n.text:00000000004039e1\n.text:00000000004039e2\n.text:00000000004039e4\n.text:00000000004039e6\n.text:00000000004039e8\n.text:00000000004039ea\n.text:00000000004039eb\n'
p909
tp910
sS'quotearg_style_mem'
p911
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p912
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p913
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403d20\n'
p914
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p915
S'.text:0000000000403d80\n.text:0000000000403d83\n.text:0000000000403d86\n.text:0000000000403d88\n.text:0000000000403d8a\n.text:0000000000403d8c\n.text:0000000000403d8f\n.text:0000000000403d92\n'
p916
tp917
sS'xalloc_die'
p918
(S'\n__stdcall xalloc_die()\n'
p919
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x40645d,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p920
S'PUSH RBX\nMOV EBX,dword ptr [0x00609240]\nXOR EDI,EDI\nMOV ESI,0x4073af\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40645d\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401830\nCALL 0x00401520\n'
p921
S'53\n8b 1d 29 43 20 00\n31 ff\nbe af 73 40 00\nba 05 00 00 00\ne8 b8 c6 ff ff\n48 89 c1\n31 f6\nba 5d 64 40 00\n31 c0\n89 df\ne8 f5 c8 ff ff\ne8 e0 c5 ff ff\n'
p922
S'.text:0000000000404f10\n.text:0000000000404f11\n.text:0000000000404f17\n.text:0000000000404f19\n.text:0000000000404f1e\n.text:0000000000404f23\n.text:0000000000404f28\n.text:0000000000404f2b\n.text:0000000000404f2d\n.text:0000000000404f32\n.text:0000000000404f34\n.text:0000000000404f36\n.text:0000000000404f3b\n'
p923
tp924
sS'open_safer'
p925
(S'\n__stdcall open_safer(char * file)\n'
p926
V\u000a/* WARNING: Removing unreachable block (ram,0x004051ee) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff58 : 0x004051fc */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint open_safer(char *file,...)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  uint __oflag;\u000a  va_list ap;\u000a  uint local_a8;\u000a  \u000a  uVar2 = 0;\u000a  if ((__oflag & 0x40) != 0) {\u000a    uVar2 = (ulong)local_a8;\u000a  }\u000a  open(file,__oflag,uVar2);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p927
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00405192\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nXOR EDX,EDX\nTEST SIL,0x40\nJZ 0x004051fe\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x004051ee\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x004051fc\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV EDX,dword ptr [RAX]\nXOR EAX,EAX\nCALL 0x00401850\nMOV EDI,EAX\nCALL 0x00405840\nADD RSP,0xd8\nRET\n'
p928
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n31 d2\n40 f6 c6 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 10\n31 c0\ne8 4b c6 ff ff\n89 c7\ne8 34 06 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p929
S'.text:0000000000405150\n.text:0000000000405157\n.text:0000000000405159\n.text:000000000040515b\n.text:0000000000405160\n.text:0000000000405165\n.text:000000000040516a\n.text:0000000000405172\n.text:000000000040517a\n.text:0000000000405182\n.text:000000000040518a\n.text:0000000000405192\n.text:0000000000405197\n.text:000000000040519c\n.text:00000000004051a1\n.text:00000000004051a6\n.text:00000000004051a8\n.text:00000000004051ac\n.text:00000000004051ae\n.text:00000000004051b3\n.text:00000000004051b8\n.text:00000000004051c0\n.text:00000000004051c5\n.text:00000000004051cd\n.text:00000000004051d4\n.text:00000000004051d8\n.text:00000000004051dc\n.text:00000000004051de\n.text:00000000004051e1\n.text:00000000004051e6\n.text:00000000004051e9\n.text:00000000004051ec\n.text:00000000004051ee\n.text:00000000004051f3\n.text:00000000004051f7\n.text:00000000004051fc\n.text:00000000004051fe\n.text:0000000000405200\n.text:0000000000405205\n.text:0000000000405207\n.text:000000000040520c\n.text:0000000000405213\n'
p930
tp931
sS'quotearg_n_custom'
p932
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p933
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p934
S'MOV R8,-0x1\nJMP 0x00403ea0\n'
p935
S'49 c7 c0 ff ff ff ff\neb 07\n'
p936
S'.text:0000000000403e90\n.text:0000000000403e97\n'
p937
tp938
sS'waitpid'
p939
(S'\n__stdcall waitpid(__pid_t __pid, int * __stat_loc, int __options)\n'
p940
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t waitpid(__pid_t __pid,int *__stat_loc,int __options)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_waitpid_006091c8)();\u000a  return _Var1;\u000a}\u000a\u000a
p941
S'JMP qword ptr [0x006091c8]\n'
p942
S'ff 25 82 79 20 00\n'
p943
S'.plt:0000000000401840\n'
p944
tp945
sS'fd_safer'
p946
(S'\n__stdcall fd_safer()\n'
p947
V\u000aint fd_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int *piVar3;\u000a  uint __fd;\u000a  \u000a  if (__fd < 3) {\u000a    uVar2 = dup_safer();\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(__fd);\u000a    *piVar3 = iVar1;\u000a    __fd = uVar2;\u000a  }\u000a  return (int)__fd;\u000a}\u000a\u000a
p948
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nCMP EBX,0x2\nJA 0x00405874\nMOV EDI,EBX\nCALL 0x004059d0\nMOV R14D,EAX\nCALL 0x00401530\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV EDI,EBX\nCALL 0x00401690\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nJMP 0x00405876\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p949
S'55\n41 57\n41 56\n53\n50\n89 fb\n83 fb 02\n77 26\n89 df\ne8 7b 01 00 00\n41 89 c6\ne8 d3 bc ff ff\n48 89 c5\n44 8b 7d 00\n89 df\ne8 25 be ff ff\n44 89 7d 00\n44 89 f0\neb 02\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p950
S'.text:0000000000405840\n.text:0000000000405841\n.text:0000000000405843\n.text:0000000000405845\n.text:0000000000405846\n.text:0000000000405847\n.text:0000000000405849\n.text:000000000040584c\n.text:000000000040584e\n.text:0000000000405850\n.text:0000000000405855\n.text:0000000000405858\n.text:000000000040585d\n.text:0000000000405860\n.text:0000000000405864\n.text:0000000000405866\n.text:000000000040586b\n.text:000000000040586f\n.text:0000000000405872\n.text:0000000000405874\n.text:0000000000405876\n.text:000000000040587a\n.text:000000000040587b\n.text:000000000040587d\n.text:000000000040587f\n.text:0000000000405880\n'
p951
tp952
sS'__freading'
p953
(S'\n__stdcall __freading()\n'
p954
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00609178)();\u000a  return;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x00609178]\n'
p956
S'ff 25 d2 79 20 00\n'
p957
S'.plt:00000000004017a0\n'
p958
tp959
sS'prog_fprintf'
p960
(S'\n__stdcall prog_fprintf(FILE * fp, char * fmt)\n'
p961
V\u000avoid prog_fprintf(FILE *fp,char *fmt,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_RCX;\u000a  undefined8 in_RDX;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list ap;\u000a  undefined4 local_e8;\u000a  undefined4 local_e4;\u000a  void **local_e0;\u000a  undefined *local_d8;\u000a  undefined local_c8 [16];\u000a  undefined8 local_b8;\u000a  undefined8 local_b0;\u000a  undefined8 local_a8;\u000a  undefined8 local_a0;\u000a  undefined4 local_98;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  \u000a  if (in_AL != 0) {\u000a    local_98 = in_XMM0_Da;\u000a    local_88 = in_XMM1_Da;\u000a    local_78 = in_XMM2_Da;\u000a    local_68 = in_XMM3_Da;\u000a    local_58 = in_XMM4_Da;\u000a    local_48 = in_XMM5_Da;\u000a    local_38 = in_XMM6_Da;\u000a    local_28 = in_XMM7_Da;\u000a  }\u000a  local_b8 = in_RDX;\u000a  local_b0 = in_RCX;\u000a  local_a8 = in_R8;\u000a  local_a0 = in_R9;\u000a  fputs_unlocked(program_name,(FILE *)fp);\u000a  fputs_unlocked(": ",(FILE *)fp);\u000a  local_d8 = local_c8;\u000a  local_e0 = &ap[0].overflow_arg_area;\u000a  local_e4 = 0x30;\u000a  local_e8 = 0x10;\u000a  __vfprintf_chk(fp,1,fmt,&local_e8);\u000a  fputc_unlocked(10,(FILE *)fp);\u000a  return;\u000a}\u000a\u000a
p962
S'PUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14,RSI\nMOV RBX,RDI\nTEST AL,AL\nJZ 0x004021bb\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nMOV RDI,qword ptr [0x00609300]\nMOV RSI,RBX\nCALL 0x004016b0\nMOV EDI,0x406445\nMOV RSI,RBX\nCALL 0x004016b0\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xf0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOV RCX,RSP\nMOV ESI,0x1\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401510\nMOV EDI,0xa\nMOV RSI,RBX\nCALL 0x004016f0\nADD RSP,0xd8\nPOP RBX\nPOP R14\nRET\n'
p963
S'41 56\n53\n48 81 ec d8 00 00 00\n49 89 f6\n48 89 fb\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8b 3d 2a 71 20 00\n48 89 de\ne8 d2 f4 ff ff\nbf 45 64 40 00\n48 89 de\ne8 c5 f4 ff ff\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 f0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 89 e1\nbe 01 00 00 00\n48 89 df\n4c 89 f2\ne8 ec f2 ff ff\nbf 0a 00 00 00\n48 89 de\ne8 bf f4 ff ff\n48 81 c4 d8 00 00 00\n5b\n41 5e\nc3\n'
p964
S'.text:0000000000402170\n.text:0000000000402172\n.text:0000000000402173\n.text:000000000040217a\n.text:000000000040217d\n.text:0000000000402180\n.text:0000000000402182\n.text:0000000000402184\n.text:0000000000402189\n.text:000000000040218e\n.text:0000000000402193\n.text:000000000040219b\n.text:00000000004021a3\n.text:00000000004021ab\n.text:00000000004021b3\n.text:00000000004021bb\n.text:00000000004021c0\n.text:00000000004021c5\n.text:00000000004021ca\n.text:00000000004021cf\n.text:00000000004021d6\n.text:00000000004021d9\n.text:00000000004021de\n.text:00000000004021e3\n.text:00000000004021e6\n.text:00000000004021eb\n.text:00000000004021f0\n.text:00000000004021f5\n.text:00000000004021fd\n.text:0000000000402202\n.text:000000000040220a\n.text:0000000000402211\n.text:0000000000402214\n.text:0000000000402219\n.text:000000000040221c\n.text:000000000040221f\n.text:0000000000402224\n.text:0000000000402229\n.text:000000000040222c\n.text:0000000000402231\n.text:0000000000402238\n.text:0000000000402239\n.text:000000000040223b\n'
p965
tp966
sS'main'
p967
(S'\n__stdcall main(char * * argv)\n'
p968
V\u000aint main(char **argv)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  __mode_t __mask;\u000a  uint uVar3;\u000a  mode_change *__ptr;\u000a  char *mode_string;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *pcVar6;\u000a  int *piVar7;\u000a  void *options;\u000a  char **in_RSI;\u000a  char *dir;\u000a  code *local_50;\u000a  \u000a  local_50 = (code *)0x0;\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x4061e8,"/usr/local/share/locale");\u000a  textdomain(0x4061e8);\u000a  atexit(close_stdout);\u000a  mode_string = (char *)0x0;\u000a  while (iVar2 = getopt_long(), 0x59 < iVar2) {\u000a    switch(iVar2) {\u000a    case 0x5a:\u000a      if (optarg != (char *)0x0) {\u000a        uVar4 = dcgettext(0,\u000a                          "warning: ignoring --context; it requires an SELinux/SMACK-enabled kernel"\u000a                          ,5);\u000a        error(0,0,uVar4,uVar4);\u000a      }\u000a      break;\u000a    default:\u000a      goto switchD_00401d68_caseD_5b;\u000a    case 0x6d:\u000a      mode_string = optarg;\u000a      break;\u000a    case 0x70:\u000a      local_50 = make_ancestor;\u000a      break;\u000a    case 0x76:\u000a      dcgettext(0,"created directory %s",5);\u000a    }\u000a  }\u000a  if (iVar2 == -1) {\u000a    if (optind != (int)argv) {\u000a      if ((mode_string != (char *)0x0) || (local_50 != (code *)0x0)) {\u000a        __mask = umask(0);\u000a        umask(__mask);\u000a        if (mode_string != (char *)0x0) {\u000a          __ptr = mode_compile(mode_string);\u000a          if (__ptr == (mode_change *)0x0) {\u000a            uVar4 = dcgettext(0,"invalid mode %s",5);\u000a            mode_string = quote(mode_string);\u000a            error(1,0,uVar4,mode_string);\u000a          }\u000a          mode_adjust((mode_change *)0x1ff,(mode_t *)0x1);\u000a          free(__ptr);\u000a        }\u000a      }\u000a      iVar2 = savewd_process_files\u000a                        ((char **)(ulong)(uint)((int)argv - optind),\u000a                         (int (*)(char *,savewd *,void *))(in_RSI + (long)optind),process_dir);\u000a      return iVar2;\u000a    }\u000aLAB_00401edf:\u000a    uVar4 = dcgettext(0,"missing operand",5);\u000a    mode_string = (char *)0x0;\u000a    error(0,0,uVar4,uVar4);\u000a    dir = (char *)0x1;\u000a    usage();\u000a    if (*(char *)((long)options + 0x14) != 0) {\u000a      defaultcon();\u000a      puVar5 = (uint *)__errno_location();\u000a      uVar3 = *puVar5;\u000a      _Var1 = ignorable_ctx_err();\u000a      if (_Var1 == false) {\u000a        uVar4 = dcgettext(0,"failed to set default creation context for %s",5);\u000a        pcVar6 = quotearg_style((char *)0x4);\u000a        error(0,(ulong)uVar3,uVar4,pcVar6);\u000a      }\u000a    }\u000a    if ((*(uint *)((long)options + 8) & 0xc0) == 0) {\u000a      uVar3 = mkdir(mode_string,0x1ff);\u000a    }\u000a    else {\u000a      umask(*(uint *)((long)options + 8) & 0xffffff3f);\u000a      uVar3 = mkdir(mode_string,0x1ff);\u000a      piVar7 = __errno_location();\u000a      iVar2 = *piVar7;\u000a      umask(*(__mode_t *)((long)options + 8));\u000a      *piVar7 = iVar2;\u000a    }\u000a    if (uVar3 == 0) {\u000a      uVar3 = *(uint *)((long)options + 8) >> 8 & 1;\u000a      announce_mkdir(dir,options);\u000a    }\u000a    return (int)uVar3;\u000a  }\u000a  if (iVar2 != -0x83) {\u000a    if (iVar2 != -0x82) {\u000aswitchD_00401d68_caseD_5b:\u000a      usage(1);\u000a      goto LAB_00401edf;\u000a    }\u000a    usage(0);\u000a  }\u000a  version_etc(stdout,"mkdir","GNU coreutils",Version,"David MacKenzie",0);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p969
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R14,RSI\nMOV EBX,EDI\nMOV qword ptr [RSP + 0x8],0x0\nMOV dword ptr [RSP + 0x14],0x1ff\nLEA R15,[RSP + 0x18]\nMOV dword ptr [RSP + 0x18],0x0\nMOV qword ptr [RSP + 0x20],0x0\nMOV byte ptr [RSP + 0x1c],0x0\nMOV RDI,qword ptr [R14]\nCALL 0x00402a90\nMOV EDI,0x6\nMOV ESI,0x407181\nCALL 0x004017f0\nMOV EDI,0x4061e8\nMOV ESI,0x406168\nCALL 0x004015d0\nMOV EDI,0x4061e8\nCALL 0x004015b0\nMOV EDI,0x402260\nCALL 0x00405c20\nXOR R12D,R12D\nJMP 0x00401d40\nXOR EDI,EDI\nMOV ESI,0x406186\nMOV EDX,0x5\nCALL 0x004015e0\nMOV qword ptr [RSP + 0x20],RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV EDX,0x406180\nMOV ECX,0x405d80\nXOR R8D,R8D\nMOV EDI,EBX\nMOV RSI,R14\nCALL 0x00401620\nCMP EAX,0x59\nJLE 0x00401db1\nADD EAX,-0x5a\nCMP EAX,0x1c\nJA 0x00401ed5\nJMP qword ptr [0x405c90 + RAX*0x8]\nCMP qword ptr [0x006092b8],0x0\nJZ 0x00401d40\nXOR EDI,EDI\nMOV ESI,0x40619b\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401830\nJMP 0x00401d40\nMOV R12,qword ptr [0x006092b8]\nJMP 0x00401d40\nMOV qword ptr [RSP + 0x8],0x401f10\nJMP 0x00401d40\nCMP EAX,-0x1\nJNZ 0x00401e91\nCMP dword ptr [0x006092b0],EBX\nJZ 0x00401edf\nTEST R12,R12\nJNZ 0x00401dd9\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00401e64\nXOR EDI,EDI\nCALL 0x00401700\nMOV EBP,EAX\nMOV EDI,EBP\nCALL 0x00401700\nMOV dword ptr [RSP + 0x10],EBP\nTEST R12,R12\nJZ 0x00401e5c\nMOV RDI,R12\nCALL 0x004025d0\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00401e37\nXOR EDI,EDI\nMOV ESI,0x406212\nMOV EDX,0x5\nCALL 0x004015e0\nMOV R15,RAX\nMOV RDI,R12\nCALL 0x00403f80\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nLEA R15,[RSP + 0x18]\nCALL 0x00401830\nMOV EDI,0x1ff\nMOV ESI,0x1\nMOV EDX,EBP\nMOV RCX,R13\nMOV R8,R15\nCALL 0x00402950\nMOV dword ptr [RSP + 0x14],EAX\nMOV RDI,R13\nCALL 0x00401500\nJMP 0x00401e64\nMOV dword ptr [RSP + 0x14],0x1ff\nMOVSXD RAX,dword ptr [0x006092b0]\nSUB EBX,EAX\nLEA RSI,[R14 + RAX*0x8]\nLEA RCX,[RSP + 0x8]\nMOV EDX,0x401ff0\nMOV EDI,EBX\nCALL 0x00404710\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x00401ea6\nCMP EAX,0xffffff7e\nJNZ 0x00401ed5\nXOR EDI,EDI\nCALL 0x00401a00\nMOV RDI,qword ptr [0x006092a8]\nMOV RCX,qword ptr [0x00609238]\nMOV ESI,0x406162\nMOV EDX,0x4061e4\nMOV R8D,0x4061f2\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x00404c50\nXOR EDI,EDI\nCALL 0x00401890\nMOV EDI,0x1\nCALL 0x00401a00\nXOR EDI,EDI\nMOV ESI,0x406202\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401830\nMOV EDI,0x1\nCALL 0x00401a00\nNOP dword ptr [RAX + RAX*0x1]\n'
p970
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 f6\n89 fb\n48 c7 44 24 08 00 00 00 00\nc7 44 24 14 ff 01 00 00\n4c 8d 7c 24 18\nc7 44 24 18 00 00 00 00\n48 c7 44 24 20 00 00 00 00\nc6 44 24 1c 00\n49 8b 3e\ne8 a9 0d 00 00\nbf 06 00 00 00\nbe 81 71 40 00\ne8 fa fa ff ff\nbf e8 61 40 00\nbe 68 61 40 00\ne8 cb f8 ff ff\nbf e8 61 40 00\ne8 a1 f8 ff ff\nbf 60 22 40 00\ne8 07 3f 00 00\n45 31 e4\neb 22\n31 ff\nbe 86 61 40 00\nba 05 00 00 00\ne8 b1 f8 ff ff\n48 89 44 24 20\n66 66 66 2e 0f 1f 84 00 00 00 00 00\nba 80 61 40 00\nb9 80 5d 40 00\n45 31 c0\n89 df\n4c 89 f6\ne8 c9 f8 ff ff\n83 f8 59\n7e 55\n83 c0 a6\n83 f8 1c\n0f 87 6d 01 00 00\nff 24 c5 90 5c 40 00\n48 83 3d 41 75 20 00 00\n74 c7\n31 ff\nbe 9b 61 40 00\nba 05 00 00 00\ne8 56 f8 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 95 fa ff ff\neb a3\n4c 8b 25 14 75 20 00\neb 9a\n48 c7 44 24 08 10 1f 40 00\neb 8f\n83 f8 ff\n0f 85 d7 00 00 00\n39 1d f0 74 20 00\n0f 84 19 01 00 00\n4d 85 e4\n75 0e\n48 8b 44 24 08\n48 85 c0\n0f 84 8b 00 00 00\n31 ff\ne8 20 f9 ff ff\n89 c5\n89 ef\ne8 17 f9 ff ff\n89 6c 24 10\n4d 85 e4\n74 6a\n4c 89 e7\ne8 d6 07 00 00\n49 89 c5\n4d 85 ed\n75 35\n31 ff\nbe 12 62 40 00\nba 05 00 00 00\ne8 cd f7 ff ff\n49 89 c7\n4c 89 e7\ne8 62 21 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 fa\n4c 8d 7c 24 18\ne8 f9 f9 ff ff\nbf ff 01 00 00\nbe 01 00 00 00\n89 ea\n4c 89 e9\n4d 89 f8\ne8 02 0b 00 00\n89 44 24 14\n4c 89 ef\ne8 a6 f6 ff ff\neb 08\nc7 44 24 14 ff 01 00 00\n48 63 05 45 74 20 00\n29 c3\n49 8d 34 c6\n48 8d 4c 24 08\nba f0 1f 40 00\n89 df\ne8 8e 28 00 00\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n3d 7d ff ff ff\n74 0e\n3d 7e ff ff ff\n75 36\n31 ff\ne8 5a fb ff ff\n48 8b 3d fb 73 20 00\n48 8b 0d 84 73 20 00\nbe 62 61 40 00\nba e4 61 40 00\n41 b8 f2 61 40 00\n45 31 c9\n31 c0\ne8 82 2d 00 00\n31 ff\ne8 bb f9 ff ff\nbf 01 00 00 00\ne8 21 fb ff ff\n31 ff\nbe 02 62 40 00\nba 05 00 00 00\ne8 f0 f6 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 2f f9 ff ff\nbf 01 00 00 00\ne8 f5 fa ff ff\n0f 1f 44 00 00\n'
p971
S'.text:0000000000401ca0\n.text:0000000000401ca1\n.text:0000000000401ca3\n.text:0000000000401ca5\n.text:0000000000401ca7\n.text:0000000000401ca9\n.text:0000000000401caa\n.text:0000000000401cae\n.text:0000000000401cb1\n.text:0000000000401cb3\n.text:0000000000401cbc\n.text:0000000000401cc4\n.text:0000000000401cc9\n.text:0000000000401cd1\n.text:0000000000401cda\n.text:0000000000401cdf\n.text:0000000000401ce2\n.text:0000000000401ce7\n.text:0000000000401cec\n.text:0000000000401cf1\n.text:0000000000401cf6\n.text:0000000000401cfb\n.text:0000000000401d00\n.text:0000000000401d05\n.text:0000000000401d0a\n.text:0000000000401d0f\n.text:0000000000401d14\n.text:0000000000401d19\n.text:0000000000401d1c\n.text:0000000000401d1e\n.text:0000000000401d20\n.text:0000000000401d25\n.text:0000000000401d2a\n.text:0000000000401d2f\n.text:0000000000401d34\n.text:0000000000401d40\n.text:0000000000401d45\n.text:0000000000401d4a\n.text:0000000000401d4d\n.text:0000000000401d4f\n.text:0000000000401d52\n.text:0000000000401d57\n.text:0000000000401d5a\n.text:0000000000401d5c\n.text:0000000000401d5f\n.text:0000000000401d62\n.text:0000000000401d68\n.text:0000000000401d6f\n.text:0000000000401d77\n.text:0000000000401d79\n.text:0000000000401d7b\n.text:0000000000401d80\n.text:0000000000401d85\n.text:0000000000401d8a\n.text:0000000000401d8d\n.text:0000000000401d8f\n.text:0000000000401d91\n.text:0000000000401d93\n.text:0000000000401d96\n.text:0000000000401d9b\n.text:0000000000401d9d\n.text:0000000000401da4\n.text:0000000000401da6\n.text:0000000000401daf\n.text:0000000000401db1\n.text:0000000000401db4\n.text:0000000000401dba\n.text:0000000000401dc0\n.text:0000000000401dc6\n.text:0000000000401dc9\n.text:0000000000401dcb\n.text:0000000000401dd0\n.text:0000000000401dd3\n.text:0000000000401dd9\n.text:0000000000401ddb\n.text:0000000000401de0\n.text:0000000000401de2\n.text:0000000000401de4\n.text:0000000000401de9\n.text:0000000000401ded\n.text:0000000000401df0\n.text:0000000000401df2\n.text:0000000000401df5\n.text:0000000000401dfa\n.text:0000000000401dfd\n.text:0000000000401e00\n.text:0000000000401e02\n.text:0000000000401e04\n.text:0000000000401e09\n.text:0000000000401e0e\n.text:0000000000401e13\n.text:0000000000401e16\n.text:0000000000401e19\n.text:0000000000401e1e\n.text:0000000000401e21\n.text:0000000000401e26\n.text:0000000000401e28\n.text:0000000000401e2a\n.text:0000000000401e2d\n.text:0000000000401e32\n.text:0000000000401e37\n.text:0000000000401e3c\n.text:0000000000401e41\n.text:0000000000401e43\n.text:0000000000401e46\n.text:0000000000401e49\n.text:0000000000401e4e\n.text:0000000000401e52\n.text:0000000000401e55\n.text:0000000000401e5a\n.text:0000000000401e5c\n.text:0000000000401e64\n.text:0000000000401e6b\n.text:0000000000401e6d\n.text:0000000000401e71\n.text:0000000000401e76\n.text:0000000000401e7b\n.text:0000000000401e7d\n.text:0000000000401e82\n.text:0000000000401e86\n.text:0000000000401e87\n.text:0000000000401e89\n.text:0000000000401e8b\n.text:0000000000401e8d\n.text:0000000000401e8f\n.text:0000000000401e90\n.text:0000000000401e91\n.text:0000000000401e96\n.text:0000000000401e98\n.text:0000000000401e9d\n.text:0000000000401e9f\n.text:0000000000401ea1\n.text:0000000000401ea6\n.text:0000000000401ead\n.text:0000000000401eb4\n.text:0000000000401eb9\n.text:0000000000401ebe\n.text:0000000000401ec4\n.text:0000000000401ec7\n.text:0000000000401ec9\n.text:0000000000401ece\n.text:0000000000401ed0\n.text:0000000000401ed5\n.text:0000000000401eda\n.text:0000000000401edf\n.text:0000000000401ee1\n.text:0000000000401ee6\n.text:0000000000401eeb\n.text:0000000000401ef0\n.text:0000000000401ef3\n.text:0000000000401ef5\n.text:0000000000401ef7\n.text:0000000000401ef9\n.text:0000000000401efc\n.text:0000000000401f01\n.text:0000000000401f06\n.text:0000000000401f0b\n'
p972
tp973
sS'fputs_unlocked'
p974
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p975
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_00609100)();\u000a  return iVar1;\u000a}\u000a\u000a
p976
S'JMP qword ptr [0x00609100]\n'
p977
S'ff 25 4a 7a 20 00\n'
p978
S'.plt:00000000004016b0\n'
p979
tp980
sS'xcharalloc'
p981
(S'\n__stdcall xcharalloc(size_t n)\n'
p982
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p983
S'JMP 0x00404d80\n'
p984
S'e9 2b ff ff ff\n'
p985
S'.text:0000000000404e50\n'
p986
tp987
sS'c_isupper'
p988
(S'\n__stdcall c_isupper()\n'
p989
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p990
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p991
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p992
S'.text:0000000000405090\n.text:0000000000405093\n.text:0000000000405096\n.text:0000000000405099\n'
p993
tp994
sS'c_isalnum'
p995
(S'\n__stdcall c_isalnum()\n'
p996
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p997
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00404fab\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00404fab\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00404faa\nXOR EAX,EAX\nRET\n'
p998
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p999
S'.text:0000000000404f90\n.text:0000000000404f92\n.text:0000000000404f95\n.text:0000000000404f98\n.text:0000000000404f9a\n.text:0000000000404fa4\n.text:0000000000404fa8\n.text:0000000000404faa\n.text:0000000000404fab\n.text:0000000000404fae\n.text:0000000000404fb1\n.text:0000000000404fb3\n.text:0000000000404fb5\n'
p1000
tp1001
sS'raise'
p1002
(S'\n__stdcall raise(int __sig)\n'
p1003
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint raise(int __sig)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_raise_00609020)();\u000a  return iVar1;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x00609020]\n'
p1005
S'ff 25 2a 7b 20 00\n'
p1006
S'.plt:00000000004014f0\n'
p1007
tp1008
sS'__errno_location'
p1009
(S'\n__stdcall __errno_location()\n'
p1010
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00609040)();\u000a  return piVar1;\u000a}\u000a\u000a
p1011
S'JMP qword ptr [0x00609040]\n'
p1012
S'ff 25 0a 7b 20 00\n'
p1013
S'.plt:0000000000401530\n'
p1014
tp1015
sS'mode_create_from_ref'
p1016
(S'\n__stdcall mode_create_from_ref(char * ref_file)\n'
p1017
V\u000amode_change * mode_create_from_ref(char *ref_file)\u000a\u000a{\u000a  int iVar1;\u000a  mode_change *pmVar2;\u000a  stat ref_stats;\u000a  stat local_90;\u000a  \u000a  iVar1 = stat(ref_file,&local_90);\u000a  if (iVar1 != 0) {\u000a    return (mode_change *)0x0;\u000a  }\u000a  pmVar2 = make_node_op_equals();\u000a  return pmVar2;\u000a}\u000a\u000a
p1018
S'SUB RSP,0x98\nLEA RSI,[RSP + 0x8]\nCALL 0x00405c50\nTEST EAX,EAX\nJZ 0x0040292f\nXOR EAX,EAX\nADD RSP,0x98\nRET\nMOV EDI,dword ptr [RSP + 0x20]\nMOV ESI,0xfff\nCALL 0x004028e0\nADD RSP,0x98\nRET\n'
p1019
S'48 81 ec 98 00 00 00\n48 8d 74 24 08\ne8 2f 33 00 00\n85 c0\n74 0a\n31 c0\n48 81 c4 98 00 00 00\nc3\n8b 7c 24 20\nbe ff 0f 00 00\ne8 a3 ff ff ff\n48 81 c4 98 00 00 00\nc3\n'
p1020
S'.text:0000000000402910\n.text:0000000000402917\n.text:000000000040291c\n.text:0000000000402921\n.text:0000000000402923\n.text:0000000000402925\n.text:0000000000402927\n.text:000000000040292e\n.text:000000000040292f\n.text:0000000000402933\n.text:0000000000402938\n.text:000000000040293d\n.text:0000000000402944\n'
p1021
tp1022
sS'x2nrealloc'
p1023
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1024
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1025
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00404e1c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404e49\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00404e3a\nTEST RCX,RCX\nJNZ 0x00404e3a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00404dc0\nPUSH RAX\nCALL 0x00404f10\n'
p1026
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1027
S'.text:0000000000404df0\n.text:0000000000404df3\n.text:0000000000404df6\n.text:0000000000404df9\n.text:0000000000404dfb\n.text:0000000000404e05\n.text:0000000000404e07\n.text:0000000000404e0a\n.text:0000000000404e0d\n.text:0000000000404e0f\n.text:0000000000404e12\n.text:0000000000404e15\n.text:0000000000404e1a\n.text:0000000000404e1c\n.text:0000000000404e1f\n.text:0000000000404e21\n.text:0000000000404e26\n.text:0000000000404e28\n.text:0000000000404e2b\n.text:0000000000404e2d\n.text:0000000000404e34\n.text:0000000000404e37\n.text:0000000000404e3a\n.text:0000000000404e3d\n.text:0000000000404e41\n.text:0000000000404e44\n.text:0000000000404e49\n.text:0000000000404e4a\n'
p1028
tp1029
sS'quotearg_n_options'
p1030
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1031
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1032
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401530\nTEST R12D,R12D\nJS 0x00403c41\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x00609248]\nCMP dword ptr [0x00609250],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00403b5b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x609258\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00404dc0\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x00609248],R15\nJNZ 0x00403b22\nMOVUPS XMM0,xmmword ptr [0x00609258]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x00609250]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401670\nMOV dword ptr [0x00609250],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00402cb0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00403bbd\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00403c2b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x609350\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00403be8\nCALL 0x00401500\nMOV RDI,R15\nCALL 0x00404e50\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00402cb0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401520\n'
p1033
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 81 da ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 7e 57 20 00\n44 39 25 7f 57 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 58 92 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 b8 12 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 33 57 20 00\n75 0b\n0f 10 05 3a 57 20 00\n41 0f 11 07\n8b 05 28 57 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 2d db ff ff\n89 1d 07 57 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 50 93 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 18 d9 ff ff\n4c 89 ff\ne8 60 12 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 da d8 ff ff\n'
p1034
S'.text:0000000000403a90\n.text:0000000000403a91\n.text:0000000000403a93\n.text:0000000000403a95\n.text:0000000000403a97\n.text:0000000000403a99\n.text:0000000000403a9a\n.text:0000000000403a9e\n.text:0000000000403aa1\n.text:0000000000403aa4\n.text:0000000000403aa7\n.text:0000000000403aaa\n.text:0000000000403aaf\n.text:0000000000403ab2\n.text:0000000000403ab8\n.text:0000000000403abd\n.text:0000000000403abf\n.text:0000000000403ac3\n.text:0000000000403aca\n.text:0000000000403ad1\n.text:0000000000403ad6\n.text:0000000000403adb\n.text:0000000000403ae0\n.text:0000000000403ae2\n.text:0000000000403ae7\n.text:0000000000403aea\n.text:0000000000403aed\n.text:0000000000403af3\n.text:0000000000403af5\n.text:0000000000403af8\n.text:0000000000403afc\n.text:0000000000403aff\n.text:0000000000403b03\n.text:0000000000403b08\n.text:0000000000403b0b\n.text:0000000000403b0e\n.text:0000000000403b15\n.text:0000000000403b17\n.text:0000000000403b1e\n.text:0000000000403b22\n.text:0000000000403b28\n.text:0000000000403b2b\n.text:0000000000403b2f\n.text:0000000000403b32\n.text:0000000000403b35\n.text:0000000000403b39\n.text:0000000000403b3b\n.text:0000000000403b3e\n.text:0000000000403b43\n.text:0000000000403b49\n.text:0000000000403b4c\n.text:0000000000403b51\n.text:0000000000403b56\n.text:0000000000403b5b\n.text:0000000000403b5e\n.text:0000000000403b62\n.text:0000000000403b66\n.text:0000000000403b6b\n.text:0000000000403b6f\n.text:0000000000403b73\n.text:0000000000403b77\n.text:0000000000403b7b\n.text:0000000000403b7f\n.text:0000000000403b84\n.text:0000000000403b87\n.text:0000000000403b8a\n.text:0000000000403b8d\n.text:0000000000403b92\n.text:0000000000403b95\n.text:0000000000403b98\n.text:0000000000403b9b\n.text:0000000000403b9c\n.text:0000000000403ba1\n.text:0000000000403ba5\n.text:0000000000403ba8\n.text:0000000000403bab\n.text:0000000000403bad\n.text:0000000000403bb2\n.text:0000000000403bb6\n.text:0000000000403bbb\n.text:0000000000403bbd\n.text:0000000000403bc1\n.text:0000000000403bc6\n.text:0000000000403bc9\n.text:0000000000403bcc\n.text:0000000000403bd1\n.text:0000000000403bd6\n.text:0000000000403bd9\n.text:0000000000403bde\n.text:0000000000403be1\n.text:0000000000403be3\n.text:0000000000403be8\n.text:0000000000403beb\n.text:0000000000403bf0\n.text:0000000000403bf3\n.text:0000000000403bf6\n.text:0000000000403bfb\n.text:0000000000403bfe\n.text:0000000000403c02\n.text:0000000000403c05\n.text:0000000000403c08\n.text:0000000000403c0d\n.text:0000000000403c12\n.text:0000000000403c17\n.text:0000000000403c1a\n.text:0000000000403c1d\n.text:0000000000403c1e\n.text:0000000000403c23\n.text:0000000000403c27\n.text:0000000000403c2b\n.text:0000000000403c2f\n.text:0000000000403c32\n.text:0000000000403c36\n.text:0000000000403c37\n.text:0000000000403c39\n.text:0000000000403c3b\n.text:0000000000403c3d\n.text:0000000000403c3f\n.text:0000000000403c40\n.text:0000000000403c41\n'
p1035
tp1036
sS'strcmp'
p1037
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1038
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00609118)();\u000a  return iVar1;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x00609118]\n'
p1040
S'ff 25 32 7a 20 00\n'
p1041
S'.plt:00000000004016e0\n'
p1042
tp1043
sS'set_custom_quoting'
p1044
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1045
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1046
S'TEST RDI,RDI\nMOV EAX,0x609310\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00402c25\nTEST RDX,RDX\nJZ 0x00402c25\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401520\n'
p1047
S'48 85 ff\nb8 10 93 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 f5 e8 ff ff\n'
p1048
S'.text:0000000000402c00\n.text:0000000000402c03\n.text:0000000000402c08\n.text:0000000000402c0c\n.text:0000000000402c12\n.text:0000000000402c15\n.text:0000000000402c17\n.text:0000000000402c1a\n.text:0000000000402c1c\n.text:0000000000402c20\n.text:0000000000402c24\n.text:0000000000402c25\n.text:0000000000402c26\n'
p1049
tp1050
sS'c_isalpha'
p1051
(S'\n__stdcall c_isalpha()\n'
p1052
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1053
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00404fdb\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1054
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1055
S'.text:0000000000404fc0\n.text:0000000000404fc3\n.text:0000000000404fc6\n.text:0000000000404fc8\n.text:0000000000404fd2\n.text:0000000000404fd4\n.text:0000000000404fd7\n.text:0000000000404fda\n.text:0000000000404fdb\n.text:0000000000404fdd\n'
p1056
tp1057
sS'quotearg_custom_mem'
p1058
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1059
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1060
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00403ea0\n'
p1061
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1062
S'.text:0000000000403f30\n.text:0000000000403f33\n.text:0000000000403f36\n.text:0000000000403f39\n.text:0000000000403f3c\n.text:0000000000403f3e\n.text:0000000000403f41\n'
p1063
tp1064
sS'savewd_finish'
p1065
(S'\n__stdcall savewd_finish(savewd * wd)\n'
p1066
V\u000avoid savewd_finish(savewd *wd)\u000a\u000a{\u000a  switch(wd->state) {\u000a  case INITIAL_STATE:\u000a  case ERROR_STATE:\u000a    break;\u000a  case FD_STATE:\u000a  case FD_POST_CHDIR_STATE:\u000a    close(wd->val);\u000a    break;\u000a  case FORKING_STATE:\u000a    if (-1 < (int)wd->val) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("wd->val.child < 0","lib/savewd.c",0xef,"void savewd_finish(struct savewd *)");\u000a    }\u000a    break;\u000a  default:\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0","lib/savewd.c",0xf3,"void savewd_finish(struct savewd *)");\u000a  }\u000a  wd->state = FINAL_STATE;\u000a  return;\u000a}\u000a\u000a
p1067
S'PUSH RBX\nMOV RBX,RDI\nMOV EAX,dword ptr [RBX]\nCMP RAX,0x4\nJA 0x004046db\nJMP qword ptr [0x406f28 + RAX*0x8]\nMOV EDI,dword ptr [RBX + 0x4]\nCALL 0x00401690\nJMP 0x004046d3\nCMP dword ptr [RBX + 0x4],0x0\nJNS 0x004046f4\nMOV dword ptr [RBX],0x5\nPOP RBX\nRET\nMOV EDI,0x407001\nMOV ESI,0x406f63\nMOV EDX,0xf3\nMOV ECX,0x407003\nCALL 0x00401660\nMOV EDI,0x406ff1\nMOV ESI,0x406f63\nMOV EDX,0xef\nMOV ECX,0x407003\nCALL 0x00401660\n'
p1068
S'53\n48 89 fb\n8b 03\n48 83 f8 04\n77 1f\nff 24 c5 28 6f 40 00\n8b 7b 04\ne8 c5 cf ff ff\neb 06\n83 7b 04 00\n79 21\nc7 03 05 00 00 00\n5b\nc3\nbf 01 70 40 00\nbe 63 6f 40 00\nba f3 00 00 00\nb9 03 70 40 00\ne8 6c cf ff ff\nbf f1 6f 40 00\nbe 63 6f 40 00\nba ef 00 00 00\nb9 03 70 40 00\ne8 53 cf ff ff\n'
p1069
S'.text:00000000004046b0\n.text:00000000004046b1\n.text:00000000004046b4\n.text:00000000004046b6\n.text:00000000004046ba\n.text:00000000004046bc\n.text:00000000004046c3\n.text:00000000004046c6\n.text:00000000004046cb\n.text:00000000004046cd\n.text:00000000004046d1\n.text:00000000004046d3\n.text:00000000004046d9\n.text:00000000004046da\n.text:00000000004046db\n.text:00000000004046e0\n.text:00000000004046e5\n.text:00000000004046ea\n.text:00000000004046ef\n.text:00000000004046f4\n.text:00000000004046f9\n.text:00000000004046fe\n.text:0000000000404703\n.text:0000000000404708\n'
p1070
tp1071
sS'chdir'
p1072
(S'\n__stdcall chdir(char * __path)\n'
p1073
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint chdir(char *__path)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_chdir_006090b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1074
S'JMP qword ptr [0x006090b0]\n'
p1075
S'ff 25 9a 7a 20 00\n'
p1076
S'.plt:0000000000401610\n'
p1077
tp1078
sS'rpl_calloc'
p1079
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1080
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00609110)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1081
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00404f7b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00404f80\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00404f80\nPUSH RAX\nCALL 0x00401530\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004016d0\n'
p1082
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 bf c5 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 45 c7 ff ff\n'
p1083
S'.text:0000000000404f40\n.text:0000000000404f43\n.text:0000000000404f48\n.text:0000000000404f4a\n.text:0000000000404f4d\n.text:0000000000404f52\n.text:0000000000404f54\n.text:0000000000404f57\n.text:0000000000404f5b\n.text:0000000000404f5d\n.text:0000000000404f60\n.text:0000000000404f63\n.text:0000000000404f66\n.text:0000000000404f69\n.text:0000000000404f6b\n.text:0000000000404f6c\n.text:0000000000404f71\n.text:0000000000404f77\n.text:0000000000404f79\n.text:0000000000404f7a\n.text:0000000000404f7b\n.text:0000000000404f80\n.text:0000000000404f83\n.text:0000000000404f86\n'
p1084
tp1085
sS'memset'
p1086
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1087
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006090e0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1088
S'JMP qword ptr [0x006090e0]\n'
p1089
S'ff 25 6a 7a 20 00\n'
p1090
S'.plt:0000000000401670\n'
p1091
tp1092
sS'getc_unlocked'
p1093
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1094
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00609070)();\u000a  return iVar1;\u000a}\u000a\u000a
p1095
S'JMP qword ptr [0x00609070]\n'
p1096
S'ff 25 da 7a 20 00\n'
p1097
S'.plt:0000000000401590\n'
p1098
tp1099
sS'c_isascii'
p1100
(S'\n__stdcall c_isascii()\n'
p1101
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1102
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1103
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1104
S'.text:0000000000404fe0\n.text:0000000000404fe6\n.text:0000000000404fe9\n'
p1105
tp1106
sS'dup_safer'
p1107
(S'\n__stdcall dup_safer()\n'
p1108
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1109
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x004059e0\n'
p1110
S'31 f6\nba 03 00 00 00\n31 c0\ne9 02 00 00 00\n'
p1111
S'.text:00000000004059d0\n.text:00000000004059d2\n.text:00000000004059d7\n.text:00000000004059d9\n'
p1112
tp1113
sS'savewd_errno'
p1114
(S'\n__stdcall savewd_errno(savewd * wd)\n'
p1115
V\u000aint savewd_errno(savewd *wd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = 0;\u000a  if (wd->state == ERROR_STATE) {\u000a    iVar1 = wd->val;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1116
S'XOR EAX,EAX\nCMP dword ptr [RDI],0x4\nJNZ 0x004043aa\nMOV EAX,dword ptr [RDI + 0x4]\nRET\n'
p1117
S'31 c0\n83 3f 04\n75 03\n8b 47 04\nc3\n'
p1118
S'.text:00000000004043a0\n.text:00000000004043a2\n.text:00000000004043a5\n.text:00000000004043a7\n.text:00000000004043aa\n'
p1119
tp1120
sS'__ctype_b_loc'
p1121
(S'\n__stdcall __ctype_b_loc()\n'
p1122
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_00609220)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1123
S'JMP qword ptr [0x00609220]\n'
p1124
S'ff 25 2a 79 20 00\n'
p1125
S'.plt:00000000004018f0\n'
p1126
tp1127
sS'quotearg'
p1128
(S'\n__stdcall quotearg(char * arg)\n'
p1129
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1130
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403a80\n'
p1131
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1132
S'.text:0000000000403c60\n.text:0000000000403c63\n.text:0000000000403c65\n.text:0000000000403c68\n'
p1133
tp1134
sS'_start'
p1135
(S'\n__stdcall _start()\n'
p1136
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00608ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1137
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405c10\nMOV RCX,0x405ba0\nMOV RDI,0x401ca0\nCALL qword ptr [0x00608ff0]\nHLT\n'
p1138
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 10 5c 40 00\n48 c7 c1 a0 5b 40 00\n48 c7 c7 a0 1c 40 00\nff 15 c6 76 20 00\nf4\n'
p1139
S'.text:0000000000401900\n.text:0000000000401902\n.text:0000000000401905\n.text:0000000000401906\n.text:0000000000401909\n.text:000000000040190d\n.text:000000000040190e\n.text:000000000040190f\n.text:0000000000401916\n.text:000000000040191d\n.text:0000000000401924\n.text:000000000040192a\n'
p1140
tp1141
sS'c_iscntrl'
p1142
(S'\n__stdcall c_iscntrl()\n'
p1143
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1144
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00405008\nRET\nCMP EDI,0x7f\nJZ 0x00405007\nXOR EAX,EAX\nRET\n'
p1145
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1146
S'.text:0000000000405000\n.text:0000000000405002\n.text:0000000000405005\n.text:0000000000405007\n.text:0000000000405008\n.text:000000000040500b\n.text:000000000040500d\n.text:000000000040500f\n'
p1147
tp1148
sS'c_isblank'
p1149
(S'\n__stdcall c_isblank()\n'
p1150
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1151
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1152
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1153
S'.text:0000000000404ff0\n.text:0000000000404ff3\n.text:0000000000404ff6\n.text:0000000000404ff9\n.text:0000000000404ffc\n.text:0000000000404ffe\n'
p1154
tp1155
sS'atexit'
p1156
(S'\n__stdcall atexit(__func * __func)\n'
p1157
V\u000a/* WARNING: Removing unreachable block (ram,0x00405c40) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_006091e8)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1158
S'MOV RAX,0x609230\nTEST RAX,RAX\nJZ 0x00405c40\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401880\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401880\n'
p1159
S'48 c7 c0 30 92 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 4a bc ff ff\n31 d2\n31 f6\ne9 37 bc ff ff\n'
p1160
S'.text:0000000000405c20\n.text:0000000000405c27\n.text:0000000000405c2a\n.text:0000000000405c2c\n.text:0000000000405c2f\n.text:0000000000405c31\n.text:0000000000405c40\n.text:0000000000405c42\n.text:0000000000405c44\n'
p1161
tp1162
sS'fdopen'
p1163
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1164
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_00609198)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1165
S'JMP qword ptr [0x00609198]\n'
p1166
S'ff 25 b2 79 20 00\n'
p1167
S'.plt:00000000004017e0\n'
p1168
tp1169
sS'error'
p1170
(S'\n__stdcall error()\n'
p1171
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_006091c0)();\u000a  return;\u000a}\u000a\u000a
p1172
S'JMP qword ptr [0x006091c0]\n'
p1173
S'ff 25 8a 79 20 00\n'
p1174
S'.plt:0000000000401830\n'
p1175
tp1176
sS'strcaseeq6'
p1177
(S'\n__stdcall strcaseeq6()\n'
p1178
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1179
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405090\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404322\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404329\nJMP 0x0040433e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040433e\nTEST BPL,BPL\nJZ 0x00404339\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404350\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1180
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 81 0d 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1181
S'.text:0000000000404300\n.text:0000000000404301\n.text:0000000000404302\n.text:0000000000404303\n.text:0000000000404305\n.text:0000000000404308\n.text:000000000040430a\n.text:000000000040430f\n.text:0000000000404313\n.text:0000000000404315\n.text:0000000000404317\n.text:000000000040431a\n.text:000000000040431c\n.text:000000000040431e\n.text:0000000000404320\n.text:0000000000404322\n.text:0000000000404324\n.text:0000000000404327\n.text:0000000000404329\n.text:000000000040432c\n.text:000000000040432e\n.text:0000000000404331\n.text:0000000000404335\n.text:0000000000404336\n.text:0000000000404337\n.text:0000000000404339\n.text:000000000040433e\n.text:0000000000404342\n.text:0000000000404343\n.text:0000000000404344\n'
p1182
tp1183
sS'strcaseeq5'
p1184
(S'\n__stdcall strcaseeq5()\n'
p1185
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1186
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405090\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x004042d6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004042dd\nJMP 0x004042f4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004042f4\nTEST BPL,BPL\nJZ 0x004042ef\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404300\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1187
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 cd 0d 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1188
S'.text:00000000004042b0\n.text:00000000004042b1\n.text:00000000004042b3\n.text:00000000004042b4\n.text:00000000004042b7\n.text:00000000004042b9\n.text:00000000004042bc\n.text:00000000004042be\n.text:00000000004042c3\n.text:00000000004042c7\n.text:00000000004042c9\n.text:00000000004042cb\n.text:00000000004042ce\n.text:00000000004042d0\n.text:00000000004042d2\n.text:00000000004042d4\n.text:00000000004042d6\n.text:00000000004042d8\n.text:00000000004042db\n.text:00000000004042dd\n.text:00000000004042e0\n.text:00000000004042e2\n.text:00000000004042e6\n.text:00000000004042e9\n.text:00000000004042ea\n.text:00000000004042ec\n.text:00000000004042ed\n.text:00000000004042ef\n.text:00000000004042f4\n.text:00000000004042f5\n.text:00000000004042f7\n.text:00000000004042f8\n'
p1189
tp1190
sS'defaultcon'
p1191
(S'\n__stdcall defaultcon()\n'
p1192
V\u000aint defaultcon(void)\u000a\u000a{\u000a  int in_EAX;\u000a  int *piVar1;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0x5f;\u000a  return in_EAX;\u000a}\u000a\u000a
p1193
S'PUSH RAX\nCALL 0x00401530\nMOV dword ptr [RAX],0x5f\nPOP RAX\nRET\n'
p1194
S'50\ne8 3a f4 ff ff\nc7 00 5f 00 00 00\n58\nc3\n'
p1195
S'.text:00000000004020f0\n.text:00000000004020f1\n.text:00000000004020f6\n.text:00000000004020fc\n.text:00000000004020fd\n'
p1196
tp1197
sS'strcaseeq7'
p1198
(S'\n__stdcall strcaseeq7()\n'
p1199
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1200
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00405090\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404372\nTEST ECX,0xffffffdf\nJNZ 0x00404376\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040437a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1201
S'53\n48 89 fb\n31 ff\ne8 35 0d 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1202
S'.text:0000000000404350\n.text:0000000000404351\n.text:0000000000404354\n.text:0000000000404356\n.text:000000000040435b\n.text:000000000040435f\n.text:0000000000404361\n.text:0000000000404363\n.text:0000000000404369\n.text:000000000040436b\n.text:0000000000404370\n.text:0000000000404371\n.text:0000000000404372\n.text:0000000000404374\n.text:0000000000404376\n.text:0000000000404378\n.text:0000000000404379\n.text:000000000040437a\n.text:000000000040437f\n.text:0000000000404380\n'
p1203
tp1204
sS'mode_adjust'
p1205
(S'\n__stdcall mode_adjust(mode_change * changes, mode_t * pmode_bits)\n'
p1206
V\u000amode_t mode_adjust(mode_change *changes,mode_t *pmode_bits)\u000a\u000a{\u000a  uint uVar1;\u000a  char cVar2;\u000a  char *in_RCX;\u000a  uint in_EDX;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  uint uVar5;\u000a  uint uVar6;\u000a  uint *in_R8;\u000a  uint uVar7;\u000a  uint uVar8;\u000a  uint uVar9;\u000a  \u000a  uVar6 = (uint)changes & 0xfff;\u000a  cVar2 = in_RCX[1];\u000a  uVar9 = 0;\u000a  if (cVar2 != 0) {\u000a    uVar7 = 0xc00;\u000a    if ((char)pmode_bits == 0) {\u000a      uVar7 = 0;\u000a    }\u000a    do {\u000a      uVar1 = *(uint *)(in_RCX + 4);\u000a      uVar4 = *(uint *)(in_RCX + 8);\u000a      if (cVar2 == 2) {\u000a        if ((uVar6 & 0x49 | (uint)pmode_bits & 0xff) != 0) {\u000a          uVar4 = uVar4 | 0x49;\u000a        }\u000a      }\u000a      else {\u000a        if (cVar2 == 3) {\u000a          uVar4 = uVar4 & uVar6;\u000a          uVar3 = uVar4 & 0x124;\u000a          if (uVar3 != 0) {\u000a            uVar3 = 0x124;\u000a          }\u000a          uVar8 = uVar4 & 0x92;\u000a          if (uVar8 != 0) {\u000a            uVar8 = 0x92;\u000a          }\u000a          uVar5 = uVar4 & 0x49;\u000a          if (uVar5 != 0) {\u000a            uVar5 = 0x49;\u000a          }\u000a          uVar4 = uVar5 | uVar3 | uVar8 | uVar4;\u000a        }\u000a      }\u000a      uVar3 = ~in_EDX;\u000a      if (uVar1 != 0) {\u000a        uVar3 = uVar1;\u000a      }\u000a      uVar3 = (*(uint *)(in_RCX + 0xc) | ~uVar7) & uVar4 & uVar3;\u000a      cVar2 = *in_RCX;\u000a      if (cVar2 == '+') {\u000a        uVar9 = uVar9 | uVar3;\u000a        uVar6 = uVar6 | uVar3;\u000a      }\u000a      else {\u000a        if (cVar2 == '-') {\u000a          uVar9 = uVar9 | uVar3;\u000a          uVar6 = uVar6 & ~uVar3;\u000a        }\u000a        else {\u000a          if (cVar2 == '=') {\u000a            uVar4 = ~uVar1;\u000a            if (uVar1 == 0) {\u000a              uVar4 = uVar1;\u000a            }\u000a            uVar4 = uVar4 | ~*(uint *)(in_RCX + 0xc) & uVar7;\u000a            uVar9 = uVar9 | ~uVar4 & 0xfff;\u000a            uVar6 = uVar3 | uVar4 & uVar6;\u000a          }\u000a        }\u000a      }\u000a      cVar2 = in_RCX[0x11];\u000a      in_RCX = in_RCX + 0x10;\u000a    } while (cVar2 != 0);\u000a  }\u000a  if (in_R8 != (uint *)0x0) {\u000a    *in_R8 = uVar9;\u000a  }\u000a  return (mode_t)uVar6;\u000a}\u000a\u000a
p1207
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV qword ptr [RSP + -0x8],R8\nAND EDI,0xfff\nMOV AL,byte ptr [RCX + 0x1]\nXOR R13D,R13D\nTEST AL,AL\nJZ 0x00402a75\nTEST SIL,SIL\nMOV R9D,0xc00\nCMOVZ R9D,R13D\nNOT EDX\nMOV R10D,R9D\nNOT R10D\nMOVZX R12D,SIL\nMOV R14D,0x92\nMOV R15D,0x49\nNOP dword ptr [RAX + RAX*0x1]\nMOVSX EBP,AL\nMOV EBX,dword ptr [RCX + 0x4]\nMOV ESI,dword ptr [RCX + 0x8]\nMOV R8D,dword ptr [RCX + 0xc]\nCMP EBP,0x2\nJZ 0x004029f0\nCMP EBP,0x3\nJNZ 0x00402a00\nAND ESI,EDI\nMOV EBP,ESI\nAND EBP,0x124\nMOV EAX,0x124\nCMOVNZ EBP,EAX\nMOV R11D,ESI\nAND R11D,0x92\nCMOVNZ R11D,R14D\nOR R11D,ESI\nAND ESI,0x49\nCMOVNZ ESI,R15D\nOR ESI,EBP\nOR ESI,R11D\nJMP 0x00402a00\nMOV EBP,EDI\nAND EBP,0x49\nMOV EAX,ESI\nOR EAX,0x49\nOR EBP,R12D\nCMOVNZ ESI,EAX\nTEST EBX,EBX\nMOV EAX,EDX\nCMOVNZ EAX,EBX\nMOV EBP,R8D\nOR EBP,R10D\nAND EBP,ESI\nAND EBP,EAX\nMOVSX ESI,byte ptr [RCX]\nCMP ESI,0x2b\nJZ 0x00402a60\nCMP ESI,0x2d\nJZ 0x00402a50\nCMP ESI,0x3d\nJNZ 0x00402a65\nNOT R8D\nAND R8D,R9D\nTEST EBX,EBX\nMOV EAX,EBX\nNOT EAX\nCMOVZ EAX,EBX\nOR EAX,R8D\nMOV ESI,EAX\nNOT ESI\nAND ESI,0xfff\nOR R13D,ESI\nAND EAX,EDI\nOR EBP,EAX\nMOV EDI,EBP\nJMP 0x00402a65\nOR R13D,EBP\nNOT EBP\nAND EDI,EBP\nJMP 0x00402a65\nOR R13D,EBP\nOR EDI,EBP\nMOVZX EAX,byte ptr [RCX + 0x11]\nADD RCX,0x10\nTEST AL,AL\nJNZ 0x004029a0\nMOV RAX,qword ptr [RSP + -0x8]\nTEST RAX,RAX\nJZ 0x00402a82\nMOV dword ptr [RAX],R13D\nMOV EAX,EDI\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1208
S'55\n41 57\n41 56\n41 55\n41 54\n53\n4c 89 44 24 f8\n81 e7 ff 0f 00 00\n8a 41 01\n45 31 ed\n84 c0\n0f 84 02 01 00 00\n40 84 f6\n41 b9 00 0c 00 00\n45 0f 44 cd\nf7 d2\n45 89 ca\n41 f7 d2\n44 0f b6 e6\n41 be 92 00 00 00\n41 bf 49 00 00 00\n0f 1f 84 00 00 00 00 00\n0f be e8\n8b 59 04\n8b 71 08\n44 8b 41 0c\n83 fd 02\n74 3e\n83 fd 03\n75 49\n21 fe\n89 f5\n81 e5 24 01 00 00\nb8 24 01 00 00\n0f 45 e8\n41 89 f3\n41 81 e3 92 00 00 00\n45 0f 45 de\n41 09 f3\n83 e6 49\n41 0f 45 f7\n09 ee\n44 09 de\neb 18\n89 fd\n83 e5 49\n89 f0\n83 c8 49\n44 09 e5\n0f 45 f0\n85 db\n89 d0\n0f 45 c3\n44 89 c5\n44 09 d5\n21 f5\n21 c5\n0f be 31\n83 fe 2b\n74 47\n83 fe 2d\n74 32\n83 fe 3d\n75 42\n41 f7 d0\n45 21 c8\n85 db\n89 d8\nf7 d0\n0f 44 c3\n44 09 c0\n89 c6\nf7 d6\n81 e6 ff 0f 00 00\n41 09 f5\n21 f8\n09 c5\n89 ef\neb 1b\n41 09 ed\nf7 d5\n21 ef\neb 0c\n41 09 ed\n09 ef\n0f b6 41 11\n48 83 c1 10\n84 c0\n0f 85 2b ff ff ff\n48 8b 44 24 f8\n48 85 c0\n74 03\n44 89 28\n89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1209
S'.text:0000000000402950\n.text:0000000000402951\n.text:0000000000402953\n.text:0000000000402955\n.text:0000000000402957\n.text:0000000000402959\n.text:000000000040295a\n.text:000000000040295f\n.text:0000000000402965\n.text:0000000000402968\n.text:000000000040296b\n.text:000000000040296d\n.text:0000000000402973\n.text:0000000000402976\n.text:000000000040297c\n.text:0000000000402980\n.text:0000000000402982\n.text:0000000000402985\n.text:0000000000402988\n.text:000000000040298c\n.text:0000000000402992\n.text:0000000000402998\n.text:00000000004029a0\n.text:00000000004029a3\n.text:00000000004029a6\n.text:00000000004029a9\n.text:00000000004029ad\n.text:00000000004029b0\n.text:00000000004029b2\n.text:00000000004029b5\n.text:00000000004029b7\n.text:00000000004029b9\n.text:00000000004029bb\n.text:00000000004029c1\n.text:00000000004029c6\n.text:00000000004029c9\n.text:00000000004029cc\n.text:00000000004029d3\n.text:00000000004029d7\n.text:00000000004029da\n.text:00000000004029dd\n.text:00000000004029e1\n.text:00000000004029e3\n.text:00000000004029e6\n.text:00000000004029f0\n.text:00000000004029f2\n.text:00000000004029f5\n.text:00000000004029f7\n.text:00000000004029fa\n.text:00000000004029fd\n.text:0000000000402a00\n.text:0000000000402a02\n.text:0000000000402a04\n.text:0000000000402a07\n.text:0000000000402a0a\n.text:0000000000402a0d\n.text:0000000000402a0f\n.text:0000000000402a11\n.text:0000000000402a14\n.text:0000000000402a17\n.text:0000000000402a19\n.text:0000000000402a1c\n.text:0000000000402a1e\n.text:0000000000402a21\n.text:0000000000402a23\n.text:0000000000402a26\n.text:0000000000402a29\n.text:0000000000402a2b\n.text:0000000000402a2d\n.text:0000000000402a2f\n.text:0000000000402a32\n.text:0000000000402a35\n.text:0000000000402a37\n.text:0000000000402a39\n.text:0000000000402a3f\n.text:0000000000402a42\n.text:0000000000402a44\n.text:0000000000402a46\n.text:0000000000402a48\n.text:0000000000402a50\n.text:0000000000402a53\n.text:0000000000402a55\n.text:0000000000402a57\n.text:0000000000402a60\n.text:0000000000402a63\n.text:0000000000402a65\n.text:0000000000402a69\n.text:0000000000402a6d\n.text:0000000000402a6f\n.text:0000000000402a75\n.text:0000000000402a7a\n.text:0000000000402a7d\n.text:0000000000402a7f\n.text:0000000000402a82\n.text:0000000000402a84\n.text:0000000000402a85\n.text:0000000000402a87\n.text:0000000000402a89\n.text:0000000000402a8b\n.text:0000000000402a8d\n.text:0000000000402a8e\n'
p1210
tp1211
sS'chmod'
p1212
(S'\n__stdcall chmod(char * __file, __mode_t __mode)\n'
p1213
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint chmod(char *__file,__mode_t __mode)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_chmod_006091b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1214
S'JMP qword ptr [0x006091b8]\n'
p1215
S'ff 25 92 79 20 00\n'
p1216
S'.plt:0000000000401820\n'
p1217
tp1218
sS'emit_mandatory_arg_note'
p1219
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1220
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1221
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x406249\nMOV EDX,0x5\nCALL 0x004015e0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004016b0\n'
p1222
S'50\n31 ff\nbe 49 62 40 00\nba 05 00 00 00\ne8 8e fa ff ff\n48 8b 35 4f 77 20 00\n48 89 c7\n58\ne9 4e fb ff ff\n'
p1223
S'.text:0000000000401b40\n.text:0000000000401b41\n.text:0000000000401b43\n.text:0000000000401b48\n.text:0000000000401b4d\n.text:0000000000401b52\n.text:0000000000401b59\n.text:0000000000401b5c\n.text:0000000000401b5d\n'
p1224
tp1225
sS'strcaseeq0'
p1226
(S'\n__stdcall strcaseeq0()\n'
p1227
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1228
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405090\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404085\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040408c\nJMP 0x004040c0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004040c0\nTEST BPL,BPL\nJZ 0x004040bb\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x004040d0\nJMP 0x004040c0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1229
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 1d 10 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1230
S'.text:0000000000404050\n.text:0000000000404051\n.text:0000000000404053\n.text:0000000000404055\n.text:0000000000404057\n.text:0000000000404059\n.text:000000000040405a\n.text:000000000040405b\n.text:000000000040405e\n.text:0000000000404061\n.text:0000000000404064\n.text:0000000000404067\n.text:0000000000404069\n.text:000000000040406c\n.text:000000000040406e\n.text:0000000000404073\n.text:0000000000404076\n.text:0000000000404078\n.text:000000000040407a\n.text:000000000040407d\n.text:000000000040407f\n.text:0000000000404081\n.text:0000000000404083\n.text:0000000000404085\n.text:0000000000404087\n.text:000000000040408a\n.text:000000000040408c\n.text:000000000040408f\n.text:0000000000404091\n.text:0000000000404095\n.text:000000000040409a\n.text:000000000040409d\n.text:00000000004040a1\n.text:00000000004040a5\n.text:00000000004040a9\n.text:00000000004040ad\n.text:00000000004040b1\n.text:00000000004040b4\n.text:00000000004040b9\n.text:00000000004040bb\n.text:00000000004040c0\n.text:00000000004040c4\n.text:00000000004040c5\n.text:00000000004040c7\n.text:00000000004040c9\n.text:00000000004040cb\n.text:00000000004040cd\n.text:00000000004040ce\n'
p1231
tp1232
sS'announce_mkdir'
p1233
(S'\n__stdcall announce_mkdir(char * dir, void * options)\n'
p1234
V\u000avoid announce_mkdir(char *dir,void *options)\u000a\u000a{\u000a  char *fmt;\u000a  FILE *fp;\u000a  char *pcVar1;\u000a  \u000a  fp = stdout;\u000a  fmt = *(char **)((long)options + 0x18);\u000a  if (fmt != (char *)0x0) {\u000a    pcVar1 = quotearg_style((char *)0x4);\u000a    prog_fprintf(fp,fmt,pcVar1,pcVar1);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1235
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RAX,RDI\nMOV RBX,qword ptr [RSI + 0x18]\nTEST RBX,RBX\nJZ 0x0040214e\nMOV R14,qword ptr [0x006092a8]\nMOV EDI,0x4\nMOV RSI,RAX\nCALL 0x00403d60\nMOV RCX,RAX\nXOR EAX,EAX\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00402170\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1236
S'41 56\n53\n50\n48 89 f8\n48 8b 5e 18\n48 85 db\n74 2e\n4c 8b 35 81 71 20 00\nbf 04 00 00 00\n48 89 c6\ne8 2c 1c 00 00\n48 89 c1\n31 c0\n4c 89 f7\n48 89 de\n48 89 ca\n48 83 c4 08\n5b\n41 5e\ne9 22 00 00 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1237
S'.text:0000000000402110\n.text:0000000000402112\n.text:0000000000402113\n.text:0000000000402114\n.text:0000000000402117\n.text:000000000040211b\n.text:000000000040211e\n.text:0000000000402120\n.text:0000000000402127\n.text:000000000040212c\n.text:000000000040212f\n.text:0000000000402134\n.text:0000000000402137\n.text:0000000000402139\n.text:000000000040213c\n.text:000000000040213f\n.text:0000000000402142\n.text:0000000000402146\n.text:0000000000402147\n.text:0000000000402149\n.text:000000000040214e\n.text:0000000000402152\n.text:0000000000402153\n.text:0000000000402155\n'
p1238
tp1239
sS'strcaseeq2'
p1240
(S'\n__stdcall strcaseeq2()\n'
p1241
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1242
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405090\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404196\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040419d\nJMP 0x004041ca\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004041ca\nTEST BPL,BPL\nJZ 0x004041c5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004041e0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1243
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 0d 0f 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1244
S'.text:0000000000404160\n.text:0000000000404161\n.text:0000000000404163\n.text:0000000000404165\n.text:0000000000404167\n.text:0000000000404169\n.text:000000000040416a\n.text:000000000040416b\n.text:000000000040416e\n.text:0000000000404171\n.text:0000000000404174\n.text:0000000000404177\n.text:0000000000404179\n.text:000000000040417c\n.text:000000000040417e\n.text:0000000000404183\n.text:0000000000404187\n.text:0000000000404189\n.text:000000000040418b\n.text:000000000040418e\n.text:0000000000404190\n.text:0000000000404192\n.text:0000000000404194\n.text:0000000000404196\n.text:0000000000404198\n.text:000000000040419b\n.text:000000000040419d\n.text:00000000004041a0\n.text:00000000004041a2\n.text:00000000004041a6\n.text:00000000004041aa\n.text:00000000004041ae\n.text:00000000004041b2\n.text:00000000004041b5\n.text:00000000004041b9\n.text:00000000004041ba\n.text:00000000004041bc\n.text:00000000004041be\n.text:00000000004041c0\n.text:00000000004041c2\n.text:00000000004041c3\n.text:00000000004041c5\n.text:00000000004041ca\n.text:00000000004041ce\n.text:00000000004041cf\n.text:00000000004041d1\n.text:00000000004041d3\n.text:00000000004041d5\n.text:00000000004041d7\n.text:00000000004041d8\n'
p1245
tp1246
sS'strcaseeq1'
p1247
(S'\n__stdcall strcaseeq1()\n'
p1248
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1249
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00405090\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040410d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404114\nJMP 0x00404147\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404147\nTEST BPL,BPL\nJZ 0x00404142\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404160\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1250
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 96 0f 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1251
S'.text:00000000004040d0\n.text:00000000004040d1\n.text:00000000004040d3\n.text:00000000004040d5\n.text:00000000004040d7\n.text:00000000004040d9\n.text:00000000004040da\n.text:00000000004040db\n.text:00000000004040e0\n.text:00000000004040e3\n.text:00000000004040e6\n.text:00000000004040e9\n.text:00000000004040eb\n.text:00000000004040ee\n.text:00000000004040f3\n.text:00000000004040f5\n.text:00000000004040fa\n.text:00000000004040fe\n.text:0000000000404100\n.text:0000000000404102\n.text:0000000000404105\n.text:0000000000404107\n.text:0000000000404109\n.text:000000000040410b\n.text:000000000040410d\n.text:000000000040410f\n.text:0000000000404112\n.text:0000000000404114\n.text:0000000000404117\n.text:0000000000404119\n.text:000000000040411d\n.text:0000000000404121\n.text:0000000000404125\n.text:000000000040412b\n.text:000000000040412f\n.text:0000000000404132\n.text:0000000000404136\n.text:0000000000404137\n.text:0000000000404139\n.text:000000000040413b\n.text:000000000040413d\n.text:000000000040413f\n.text:0000000000404140\n.text:0000000000404142\n.text:0000000000404147\n.text:000000000040414b\n.text:000000000040414c\n.text:000000000040414e\n.text:0000000000404150\n.text:0000000000404152\n.text:0000000000404154\n.text:0000000000404155\n'
p1252
tp1253
sS'strcaseeq4'
p1254
(S'\n__stdcall strcaseeq4()\n'
p1255
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1256
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405090\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040427c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404283\nJMP 0x004042a4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004042a4\nTEST BPL,BPL\nJZ 0x0040429f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004042b0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1257
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 27 0e 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1258
S'.text:0000000000404250\n.text:0000000000404251\n.text:0000000000404253\n.text:0000000000404255\n.text:0000000000404256\n.text:0000000000404257\n.text:000000000040425a\n.text:000000000040425d\n.text:000000000040425f\n.text:0000000000404262\n.text:0000000000404264\n.text:0000000000404269\n.text:000000000040426d\n.text:000000000040426f\n.text:0000000000404271\n.text:0000000000404274\n.text:0000000000404276\n.text:0000000000404278\n.text:000000000040427a\n.text:000000000040427c\n.text:000000000040427e\n.text:0000000000404281\n.text:0000000000404283\n.text:0000000000404286\n.text:0000000000404288\n.text:000000000040428c\n.text:0000000000404290\n.text:0000000000404293\n.text:0000000000404297\n.text:0000000000404298\n.text:000000000040429a\n.text:000000000040429c\n.text:000000000040429d\n.text:000000000040429f\n.text:00000000004042a4\n.text:00000000004042a8\n.text:00000000004042a9\n.text:00000000004042ab\n.text:00000000004042ad\n.text:00000000004042ae\n'
p1259
tp1260
sS'strcaseeq3'
p1261
(S'\n__stdcall strcaseeq3()\n'
p1262
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1263
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405090\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404210\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404217\nJMP 0x0040423a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040423a\nTEST BPL,BPL\nJZ 0x00404235\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404250\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1264
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 93 0e 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1265
S'.text:00000000004041e0\n.text:00000000004041e1\n.text:00000000004041e3\n.text:00000000004041e5\n.text:00000000004041e7\n.text:00000000004041e8\n.text:00000000004041eb\n.text:00000000004041ee\n.text:00000000004041f1\n.text:00000000004041f3\n.text:00000000004041f6\n.text:00000000004041f8\n.text:00000000004041fd\n.text:0000000000404201\n.text:0000000000404203\n.text:0000000000404205\n.text:0000000000404208\n.text:000000000040420a\n.text:000000000040420c\n.text:000000000040420e\n.text:0000000000404210\n.text:0000000000404212\n.text:0000000000404215\n.text:0000000000404217\n.text:000000000040421a\n.text:000000000040421c\n.text:0000000000404220\n.text:0000000000404224\n.text:0000000000404228\n.text:000000000040422b\n.text:000000000040422c\n.text:000000000040422e\n.text:0000000000404230\n.text:0000000000404232\n.text:0000000000404233\n.text:0000000000404235\n.text:000000000040423a\n.text:000000000040423b\n.text:000000000040423d\n.text:000000000040423f\n.text:0000000000404241\n.text:0000000000404242\n'
p1266
tp1267
sS'register_tm_clones'
p1268
(S'\n__stdcall register_tm_clones()\n'
p1269
V\u000a/* WARNING: Removing unreachable block (ram,0x00401993) */\u000a/* WARNING: Removing unreachable block (ram,0x0040199d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1270
S'MOV ESI,0x6092a0\nPUSH RBP\nSUB RSI,0x6092a0\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x004019a8\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004019a8\nPOP RBP\nMOV EDI,0x6092a0\nJMP RAX\nPOP RBP\nRET\n'
p1271
S'be a0 92 60 00\n55\n48 81 ee a0 92 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf a0 92 60 00\nff e0\n5d\nc3\n'
p1272
S'.text:0000000000401970\n.text:0000000000401975\n.text:0000000000401976\n.text:000000000040197d\n.text:0000000000401981\n.text:0000000000401984\n.text:0000000000401987\n.text:000000000040198b\n.text:000000000040198e\n.text:0000000000401991\n.text:0000000000401993\n.text:0000000000401998\n.text:000000000040199b\n.text:000000000040199d\n.text:000000000040199e\n.text:00000000004019a3\n.text:00000000004019a8\n.text:00000000004019a9\n'
p1273
tp1274
sS'c_islower'
p1275
(S'\n__stdcall c_islower()\n'
p1276
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1277
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1278
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1279
S'.text:0000000000405030\n.text:0000000000405033\n.text:0000000000405036\n.text:0000000000405039\n'
p1280
tp1281
sS'savewd_process_files'
p1282
(S'\n__stdcall savewd_process_files(char * * file, anon_subr_int_char_ptr_savewd_ptr_void_ptr * act, void * options)\n'
p1283
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aint savewd_process_files(char **file,int (*act)(char *,savewd *,void *),void *options)\u000a\u000a{\u000a  code *pcVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  int iVar4;\u000a  long lVar5;\u000a  undefined8 in_RCX;\u000a  int iVar6;\u000a  undefined8 *puVar7;\u000a  long lVar8;\u000a  long lVar9;\u000a  int iVar10;\u000a  long lVar11;\u000a  savewd local_50;\u000a  undefined8 local_48;\u000a  code *local_40;\u000a  ulong local_38;\u000a  \u000a  local_38 = (ulong)file & 0xffffffff;\u000a  local_40 = (code *)options;\u000a  savewd_init(&local_50);\u000a  iVar10 = (int)local_38;\u000a  lVar5 = (long)iVar10;\u000a  lVar8 = lVar5 << 0x20;\u000a  lVar11 = 0;\u000a  do {\u000a    lVar9 = lVar11;\u000a    lVar8 = lVar8 + -0x100000000;\u000a    if (lVar5 + lVar9 < 1) break;\u000a    lVar11 = lVar9 + -1;\u000a  } while (**(char **)(act + lVar9 * 8 + lVar5 * 8 + -8) == '/');\u000a  iVar6 = 0;\u000a  iVar3 = 0;\u000a  if (1 < (int)lVar9 + iVar10) {\u000a    lVar11 = 0;\u000a    iVar6 = 0;\u000a    local_48 = in_RCX;\u000a    do {\u000a      _Var2 = savewd_delegating(&local_50);\u000a      if ((_Var2 == false) &&\u000a         (iVar3 = (*local_40)(*(undefined8 *)(act + lVar11 * 8),&local_50,local_48), iVar6 < iVar3))\u000a      {\u000a        iVar6 = iVar3;\u000a      }\u000a      lVar5 = lVar11 * 8;\u000a      lVar11 = lVar11 + 1;\u000a      iVar3 = (int)lVar11;\u000a      if ((**(char **)(act + lVar5 + 8) != '/') &&\u000a         (iVar4 = savewd_restore(&local_50), iVar6 < iVar4)) {\u000a        iVar6 = iVar4;\u000a      }\u000a      in_RCX = local_48;\u000a    } while (lVar11 < lVar8 >> 0x20);\u000a  }\u000a  savewd_finish(&local_50);\u000a  pcVar1 = local_40;\u000a  if (iVar3 < (int)local_38) {\u000a    puVar7 = (undefined8 *)(act + (long)iVar3 * 8);\u000a    iVar10 = iVar10 - iVar3;\u000a    do {\u000a      iVar3 = (*pcVar1)(*puVar7,&local_50,in_RCX);\u000a      if (iVar6 < iVar3) {\u000a        iVar6 = iVar3;\u000a      }\u000a      puVar7 = puVar7 + 1;\u000a      iVar10 = iVar10 + -1;\u000a    } while (iVar10 != 0);\u000a  }\u000a  return iVar6;\u000a}\u000a\u000a
p1284
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV RBP,RSI\nMOV R12D,EDI\nMOV R15,-0x100000000\nLEA RDI,[RSP + 0x8]\nCALL 0x00404390\nMOVSXD RAX,R12D\nMOV RSI,RAX\nSHL RSI,0x20\nADD RSI,R15\nLEA RCX,[RBP + RAX*0x8 + -0x8]\nMOV EDX,EAX\nMOV qword ptr [RSP + 0x20],RDX\nXOR EDI,EDI\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,RDI\nMOV R14,RSI\nLEA RSI,[RAX + RDX*0x1]\nTEST RSI,RSI\nJLE 0x00404780\nMOV RBX,qword ptr [RCX + RDX*0x8]\nLEA RDI,[RDX + -0x1]\nLEA RSI,[R14 + R15*0x1]\nCMP byte ptr [RBX],0x2f\nJZ 0x00404760\nADD EDX,R12D\nXOR EBX,EBX\nCMP EDX,0x2\nMOV R15D,0x0\nJL 0x004047f8\nMOV qword ptr [RSP + 0x10],R13\nSAR R14,0x20\nXOR R15D,R15D\nLEA R13,[RSP + 0x8]\nXOR EBX,EBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nCALL 0x00404850\nTEST AL,AL\nJNZ 0x004047d2\nMOV RDI,qword ptr [RBP + R15*0x8]\nMOV RSI,R13\nMOV RDX,qword ptr [RSP + 0x10]\nCALL qword ptr [RSP + 0x18]\nCMP EBX,EAX\nCMOVL EBX,EAX\nMOV RAX,qword ptr [RBP + R15*0x8 + 0x8]\nINC R15\nCMP byte ptr [RAX],0x2f\nJZ 0x004047ee\nMOV RDI,R13\nMOV ESI,EBX\nCALL 0x004045a0\nCMP EBX,EAX\nCMOVL EBX,EAX\nCMP R15,R14\nJL 0x004047b0\nMOV R13,qword ptr [RSP + 0x10]\nLEA RDI,[RSP + 0x8]\nCALL 0x004046b0\nCMP R15D,dword ptr [RSP + 0x20]\nJGE 0x0040483b\nMOVSXD RAX,R15D\nLEA RBP,[RBP + RAX*0x8]\nSUB R12D,R15D\nLEA R14,[RSP + 0x8]\nMOV R15,qword ptr [RSP + 0x18]\nNOP\nMOV RDI,qword ptr [RBP]\nMOV RSI,R14\nMOV RDX,R13\nCALL R15\nCMP EBX,EAX\nCMOVL EBX,EAX\nADD RBP,0x8\nDEC R12D\nJNZ 0x00404820\nMOV EAX,EBX\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1285
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n48 89 54 24 18\n48 89 f5\n41 89 fc\n49 bf 00 00 00 00 ff ff ff ff\n48 8d 7c 24 08\ne8 50 fc ff ff\n49 63 c4\n48 89 c6\n48 c1 e6 20\n4c 01 fe\n48 8d 4c c5 f8\n89 c2\n48 89 54 24 20\n31 ff\n0f 1f 44 00 00\n48 89 fa\n49 89 f6\n48 8d 34 10\n48 85 f6\n7e 11\n48 8b 1c d1\n48 8d 7a ff\n4b 8d 34 3e\n80 3b 2f\n74 e0\n44 01 e2\n31 db\n83 fa 02\n41 bf 00 00 00 00\n7c 68\n4c 89 6c 24 10\n49 c1 fe 20\n45 31 ff\n4c 8d 6c 24 08\n31 db\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\ne8 98 00 00 00\n84 c0\n75 16\n4a 8b 7c fd 00\n4c 89 ee\n48 8b 54 24 10\nff 54 24 18\n39 c3\n0f 4c d8\n4a 8b 44 fd 08\n49 ff c7\n80 38 2f\n74 0f\n4c 89 ef\n89 de\ne8 b7 fd ff ff\n39 c3\n0f 4c d8\n4d 39 f7\n7c bd\n4c 8b 6c 24 10\n48 8d 7c 24 08\ne8 ae fe ff ff\n44 3b 7c 24 20\n7d 32\n49 63 c7\n48 8d 6c c5 00\n45 29 fc\n4c 8d 74 24 08\n4c 8b 7c 24 18\n66 90\n48 8b 7d 00\n4c 89 f6\n4c 89 ea\n41 ff d7\n39 c3\n0f 4c d8\n48 83 c5 08\n41 ff cc\n75 e5\n89 d8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1286
S'.text:0000000000404710\n.text:0000000000404711\n.text:0000000000404713\n.text:0000000000404715\n.text:0000000000404717\n.text:0000000000404719\n.text:000000000040471a\n.text:000000000040471e\n.text:0000000000404721\n.text:0000000000404726\n.text:0000000000404729\n.text:000000000040472c\n.text:0000000000404736\n.text:000000000040473b\n.text:0000000000404740\n.text:0000000000404743\n.text:0000000000404746\n.text:000000000040474a\n.text:000000000040474d\n.text:0000000000404752\n.text:0000000000404754\n.text:0000000000404759\n.text:000000000040475b\n.text:0000000000404760\n.text:0000000000404763\n.text:0000000000404766\n.text:000000000040476a\n.text:000000000040476d\n.text:000000000040476f\n.text:0000000000404773\n.text:0000000000404777\n.text:000000000040477b\n.text:000000000040477e\n.text:0000000000404780\n.text:0000000000404783\n.text:0000000000404785\n.text:0000000000404788\n.text:000000000040478e\n.text:0000000000404790\n.text:0000000000404795\n.text:0000000000404799\n.text:000000000040479c\n.text:00000000004047a1\n.text:00000000004047a3\n.text:00000000004047b0\n.text:00000000004047b3\n.text:00000000004047b8\n.text:00000000004047ba\n.text:00000000004047bc\n.text:00000000004047c1\n.text:00000000004047c4\n.text:00000000004047c9\n.text:00000000004047cd\n.text:00000000004047cf\n.text:00000000004047d2\n.text:00000000004047d7\n.text:00000000004047da\n.text:00000000004047dd\n.text:00000000004047df\n.text:00000000004047e2\n.text:00000000004047e4\n.text:00000000004047e9\n.text:00000000004047eb\n.text:00000000004047ee\n.text:00000000004047f1\n.text:00000000004047f3\n.text:00000000004047f8\n.text:00000000004047fd\n.text:0000000000404802\n.text:0000000000404807\n.text:0000000000404809\n.text:000000000040480c\n.text:0000000000404811\n.text:0000000000404814\n.text:0000000000404819\n.text:000000000040481e\n.text:0000000000404820\n.text:0000000000404824\n.text:0000000000404827\n.text:000000000040482a\n.text:000000000040482d\n.text:000000000040482f\n.text:0000000000404832\n.text:0000000000404836\n.text:0000000000404839\n.text:000000000040483b\n.text:000000000040483d\n.text:0000000000404841\n.text:0000000000404842\n.text:0000000000404844\n.text:0000000000404846\n.text:0000000000404848\n.text:000000000040484a\n.text:000000000040484b\n'
p1287
tp1288
sS'fchown'
p1289
(S'\n__stdcall fchown(int __fd, __uid_t __owner, __gid_t __group)\n'
p1290
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fchown(int __fd,__uid_t __owner,__gid_t __group)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fchown_006091e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1291
S'JMP qword ptr [0x006091e0]\n'
p1292
S'ff 25 6a 79 20 00\n'
p1293
S'.plt:0000000000401870\n'
p1294
tp1295
sS'fwrite'
p1296
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1297
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_006091f8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1298
S'JMP qword ptr [0x006091f8]\n'
p1299
S'ff 25 52 79 20 00\n'
p1300
S'.plt:00000000004018a0\n'
p1301
tp1302
sS'__do_global_dtors_aux'
p1303
(S'\n__stdcall __do_global_dtors_aux()\n'
p1304
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1305
S'CMP byte ptr [0x006092e8],0x0\nJNZ 0x004019ca\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401930\nPOP RBP\nMOV byte ptr [0x006092e8],0x1\nRET\n'
p1306
S'80 3d 31 79 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 1e 79 20 00 01\nf3 c3\n'
p1307
S'.text:00000000004019b0\n.text:00000000004019b7\n.text:00000000004019b9\n.text:00000000004019ba\n.text:00000000004019bd\n.text:00000000004019c2\n.text:00000000004019c3\n.text:00000000004019ca\n'
p1308
tp1309
sS'c_isprint'
p1310
(S'\n__stdcall c_isprint()\n'
p1311
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1312
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1313
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1314
S'.text:0000000000405040\n.text:0000000000405043\n.text:0000000000405046\n.text:0000000000405049\n'
p1315
tp1316
sS'_fini'
p1317
(S'\n__stdcall _fini()\n'
p1318
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1319
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1320
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1321
S'.fini:0000000000405c70\n.fini:0000000000405c74\n.fini:0000000000405c78\n'
p1322
tp1323
sS'lchown'
p1324
(S'\n__stdcall lchown(char * __file, __uid_t __owner, __gid_t __group)\n'
p1325
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint lchown(char *__file,__uid_t __owner,__gid_t __group)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_lchown_00609170)();\u000a  return iVar1;\u000a}\u000a\u000a
p1326
S'JMP qword ptr [0x00609170]\n'
p1327
S'ff 25 da 79 20 00\n'
p1328
S'.plt:0000000000401790\n'
p1329
tp1330
sS'rpl_fcntl'
p1331
(S'\n__stdcall rpl_fcntl()\n'
p1332
V\u000a/* WARNING: Removing unreachable block (ram,0x00405a9b) */\u000a/* WARNING: Removing unreachable block (ram,0x00405b04) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x00405aa9 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1333
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x00405a2b\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x00405a86\nCMP EAX,0x28\nJA 0x00405a9b\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00405aa9\nCMP EAX,0x28\nJA 0x00405b04\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00405b12\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x00609458],0x0\nJS 0x00405b23\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x004015a0\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00405af4\nCALL 0x00401530\nCMP dword ptr [RAX],0x16\nJNZ 0x00405af4\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x004059e0\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x00405b86\nMOV dword ptr [0x00609458],R15D\nTEST EBP,EBP\nJNS 0x00405b37\nJMP 0x00405b86\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x004015a0\nMOV EBP,EAX\nJMP 0x00405b86\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x004059e0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00405b86\nCMP dword ptr [0x00609458],-0x1\nJNZ 0x00405b86\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x004015a0\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x00405b6c\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x004015a0\nCMP EAX,-0x1\nJNZ 0x00405b86\nCALL 0x00401530\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401690\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1334
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d a6 39 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 e0 ba ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 5f ba ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d 5d 39 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 81 ba ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d 1a 39 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 52 ba ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 39 ba ff ff\n83 f8 ff\n75 1a\ne8 bf b9 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 12 bb ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1335
S'.text:00000000004059e0\n.text:00000000004059e1\n.text:00000000004059e3\n.text:00000000004059e5\n.text:00000000004059e6\n.text:00000000004059ed\n.text:00000000004059f0\n.text:00000000004059f2\n.text:00000000004059f4\n.text:00000000004059f9\n.text:00000000004059fe\n.text:0000000000405a03\n.text:0000000000405a0b\n.text:0000000000405a13\n.text:0000000000405a1b\n.text:0000000000405a23\n.text:0000000000405a2b\n.text:0000000000405a30\n.text:0000000000405a35\n.text:0000000000405a3a\n.text:0000000000405a3f\n.text:0000000000405a44\n.text:0000000000405a49\n.text:0000000000405a51\n.text:0000000000405a56\n.text:0000000000405a5e\n.text:0000000000405a65\n.text:0000000000405a69\n.text:0000000000405a6f\n.text:0000000000405a71\n.text:0000000000405a74\n.text:0000000000405a76\n.text:0000000000405a7b\n.text:0000000000405a7e\n.text:0000000000405a81\n.text:0000000000405a84\n.text:0000000000405a86\n.text:0000000000405a89\n.text:0000000000405a8b\n.text:0000000000405a8e\n.text:0000000000405a93\n.text:0000000000405a96\n.text:0000000000405a99\n.text:0000000000405a9b\n.text:0000000000405aa0\n.text:0000000000405aa4\n.text:0000000000405aa9\n.text:0000000000405aab\n.text:0000000000405ab2\n.text:0000000000405ab4\n.text:0000000000405ab6\n.text:0000000000405ab9\n.text:0000000000405abb\n.text:0000000000405ac0\n.text:0000000000405ac2\n.text:0000000000405ac8\n.text:0000000000405aca\n.text:0000000000405acc\n.text:0000000000405ad1\n.text:0000000000405ad4\n.text:0000000000405ad6\n.text:0000000000405ad8\n.text:0000000000405ada\n.text:0000000000405add\n.text:0000000000405adf\n.text:0000000000405ae4\n.text:0000000000405ae6\n.text:0000000000405aec\n.text:0000000000405aee\n.text:0000000000405af4\n.text:0000000000405afb\n.text:0000000000405afd\n.text:0000000000405aff\n.text:0000000000405b04\n.text:0000000000405b09\n.text:0000000000405b0d\n.text:0000000000405b12\n.text:0000000000405b15\n.text:0000000000405b17\n.text:0000000000405b1a\n.text:0000000000405b1f\n.text:0000000000405b21\n.text:0000000000405b23\n.text:0000000000405b25\n.text:0000000000405b27\n.text:0000000000405b2a\n.text:0000000000405b2c\n.text:0000000000405b31\n.text:0000000000405b33\n.text:0000000000405b35\n.text:0000000000405b37\n.text:0000000000405b3e\n.text:0000000000405b40\n.text:0000000000405b45\n.text:0000000000405b47\n.text:0000000000405b49\n.text:0000000000405b4e\n.text:0000000000405b50\n.text:0000000000405b52\n.text:0000000000405b54\n.text:0000000000405b57\n.text:0000000000405b5c\n.text:0000000000405b5e\n.text:0000000000405b60\n.text:0000000000405b62\n.text:0000000000405b67\n.text:0000000000405b6a\n.text:0000000000405b6c\n.text:0000000000405b71\n.text:0000000000405b74\n.text:0000000000405b77\n.text:0000000000405b79\n.text:0000000000405b7e\n.text:0000000000405b81\n.text:0000000000405b86\n.text:0000000000405b88\n.text:0000000000405b8f\n.text:0000000000405b90\n.text:0000000000405b92\n.text:0000000000405b94\n.text:0000000000405b95\n'
p1336
tp1337
sS'__fpending'
p1338
(S'\n__stdcall __fpending()\n'
p1339
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00609060)();\u000a  return;\u000a}\u000a\u000a
p1340
S'JMP qword ptr [0x00609060]\n'
p1341
S'ff 25 ea 7a 20 00\n'
p1342
S'.plt:0000000000401570\n'
p1343
tp1344
s.