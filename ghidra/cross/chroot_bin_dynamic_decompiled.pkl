(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x608e08]\nPUSH RBP\nLEA RBP,[0x608e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401520\nTEST RBP,RBP\nJZ 0x00405746\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00405730\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 06 37 20 00\n55\n48 8d 2d 06 37 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 ff bd ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:00000000004056f0\n.text:00000000004056f2\n.text:00000000004056f4\n.text:00000000004056f7\n.text:00000000004056f9\n.text:00000000004056fb\n.text:0000000000405702\n.text:0000000000405703\n.text:000000000040570a\n.text:000000000040570b\n.text:000000000040570e\n.text:0000000000405711\n.text:0000000000405714\n.text:0000000000405718\n.text:000000000040571c\n.text:0000000000405721\n.text:0000000000405724\n.text:0000000000405726\n.text:0000000000405728\n.text:0000000000405730\n.text:0000000000405733\n.text:0000000000405736\n.text:0000000000405739\n.text:000000000040573d\n.text:0000000000405741\n.text:0000000000405744\n.text:0000000000405746\n.text:000000000040574a\n.text:000000000040574b\n.text:000000000040574c\n.text:000000000040574e\n.text:0000000000405750\n.text:0000000000405752\n.text:0000000000405754\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00609178)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x00609178]\n'
p11
S'ff 25 62 79 20 00\n'
p12
S'.plt:0000000000401810\n'
p13
tp14
sS'c_isdigit'
p15
(S'\n__stdcall c_isdigit()\n'
p16
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p17
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p18
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p19
S'.text:0000000000404ed0\n.text:0000000000404ed3\n.text:0000000000404ed6\n.text:0000000000404ed9\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_00406433,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x4045c7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x404648;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x4046dc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00404458\nMOV EDX,0x406420\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401930\nJMP 0x0040446d\nMOV EDX,0x40642c\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401930\nXOR EDI,EDI\nMOV ESI,0x406433\nMOV EDX,0x5\nCALL 0x00401640\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x406700\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401930\nXOR EDI,EDI\nMOV ESI,0x406437\nMOV EDX,0x5\nCALL 0x00401640\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401750\nCMP R12,0x9\nJA 0x004044f6\nJMP qword ptr [0x4063d0 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x406502\nMOV EDX,0x5\nCALL 0x00401640\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401930\nXOR EDI,EDI\nMOV ESI,0x406641\nMOV EDX,0x5\nCALL 0x00401640\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401930\nADD RSP,0x38\nJMP 0x00404767\nXOR EDI,EDI\nMOV ESI,0x406512\nMOV EDX,0x5\nCALL 0x00401640\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401930\nXOR EDI,EDI\nMOV ESI,0x406529\nMOV EDX,0x5\nCALL 0x00401640\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401930\nXOR EDI,EDI\nMOV ESI,0x406545\nMOV EDX,0x5\nCALL 0x00401640\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401930\nADD RSP,0x18\nJMP 0x00404767\nXOR EDI,EDI\nMOV ESI,0x406565\nMOV EDX,0x5\nCALL 0x00401640\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401930\nADD RSP,0x18\nJMP 0x00404767\nXOR EDI,EDI\nMOV ESI,0x406589\nMOV EDX,0x5\nCALL 0x00401640\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401930\nADD RSP,0x28\nJMP 0x00404767\nXOR EDI,EDI\nMOV ESI,0x4065b1\nMOV EDX,0x5\nCALL 0x00401640\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401930\nADD RSP,0x28\nJMP 0x00404767\nXOR EDI,EDI\nMOV ESI,0x4065dd\nMOV EDX,0x5\nCALL 0x00401640\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401930\nADD RSP,0x38\nJMP 0x00404767\nXOR EDI,EDI\nMOV ESI,0x40660d\nMOV EDX,0x5\nCALL 0x00401640\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401930\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401580\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 20 64 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 da d4 ff ff\neb 15\nba 2c 64 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 c3 d4 ff ff\n31 ff\nbe 33 64 40 00\nba 05 00 00 00\ne8 c2 d1 ff ff\n48 89 c1\nbe 01 00 00 00\nba 00 67 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 95 d4 ff ff\n31 ff\nbe 37 64 40 00\nba 05 00 00 00\ne8 94 d1 ff ff\n48 89 c7\n4c 89 f6\ne8 99 d2 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 d0 63 40 00\n31 ff\nbe 02 65 40 00\nba 05 00 00 00\ne8 6a d1 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 3a d4 ff ff\n31 ff\nbe 41 66 40 00\nba 05 00 00 00\ne8 39 d1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 f1 d3 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 12 65 40 00\nba 05 00 00 00\ne8 e7 d0 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 b3 d3 ff ff\n31 ff\nbe 29 65 40 00\nba 05 00 00 00\ne8 b2 d0 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 7a d3 ff ff\n31 ff\nbe 45 65 40 00\nba 05 00 00 00\ne8 79 d0 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 44 d3 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 65 65 40 00\nba 05 00 00 00\ne8 3a d0 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 02 d3 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 89 65 40 00\nba 05 00 00 00\ne8 f8 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 b8 d2 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe b1 65 40 00\nba 05 00 00 00\ne8 ae cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 6e d2 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe dd 65 40 00\nba 05 00 00 00\ne8 64 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 1c d2 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 0d 66 40 00\nba 05 00 00 00\ne8 15 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 cd d1 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 0c ce ff ff\n'
p26
S'.text:0000000000404420\n.text:0000000000404422\n.text:0000000000404424\n.text:0000000000404426\n.text:0000000000404427\n.text:0000000000404428\n.text:000000000040442b\n.text:000000000040442e\n.text:0000000000404431\n.text:0000000000404434\n.text:0000000000404437\n.text:000000000040443a\n.text:000000000040443f\n.text:0000000000404442\n.text:0000000000404444\n.text:0000000000404449\n.text:000000000040444b\n.text:000000000040444e\n.text:0000000000404451\n.text:0000000000404456\n.text:0000000000404458\n.text:000000000040445d\n.text:000000000040445f\n.text:0000000000404462\n.text:0000000000404465\n.text:0000000000404468\n.text:000000000040446d\n.text:000000000040446f\n.text:0000000000404474\n.text:0000000000404479\n.text:000000000040447e\n.text:0000000000404481\n.text:0000000000404486\n.text:000000000040448b\n.text:0000000000404491\n.text:0000000000404493\n.text:0000000000404496\n.text:000000000040449b\n.text:000000000040449d\n.text:00000000004044a2\n.text:00000000004044a7\n.text:00000000004044ac\n.text:00000000004044af\n.text:00000000004044b2\n.text:00000000004044b7\n.text:00000000004044bb\n.text:00000000004044bd\n.text:00000000004044c5\n.text:00000000004044c7\n.text:00000000004044cc\n.text:00000000004044d1\n.text:00000000004044d6\n.text:00000000004044d9\n.text:00000000004044dc\n.text:00000000004044e1\n.text:00000000004044e3\n.text:00000000004044e6\n.text:00000000004044ea\n.text:00000000004044eb\n.text:00000000004044ed\n.text:00000000004044ef\n.text:00000000004044f1\n.text:00000000004044f6\n.text:00000000004044f8\n.text:00000000004044fd\n.text:0000000000404502\n.text:0000000000404507\n.text:000000000040450a\n.text:000000000040450d\n.text:0000000000404511\n.text:0000000000404515\n.text:000000000040451a\n.text:000000000040451f\n.text:0000000000404522\n.text:0000000000404526\n.text:000000000040452a\n.text:000000000040452e\n.text:0000000000404532\n.text:0000000000404536\n.text:000000000040453a\n.text:000000000040453f\n.text:0000000000404543\n.text:0000000000404548\n.text:000000000040454a\n.text:000000000040454f\n.text:0000000000404554\n.text:0000000000404559\n.text:000000000040455c\n.text:000000000040455f\n.text:0000000000404563\n.text:0000000000404568\n.text:000000000040456a\n.text:000000000040456d\n.text:0000000000404571\n.text:0000000000404572\n.text:0000000000404574\n.text:0000000000404576\n.text:0000000000404578\n.text:000000000040457d\n.text:000000000040457f\n.text:0000000000404584\n.text:0000000000404589\n.text:000000000040458e\n.text:0000000000404591\n.text:0000000000404594\n.text:0000000000404598\n.text:000000000040459c\n.text:00000000004045a1\n.text:00000000004045a3\n.text:00000000004045a6\n.text:00000000004045aa\n.text:00000000004045ab\n.text:00000000004045ad\n.text:00000000004045af\n.text:00000000004045b1\n.text:00000000004045b6\n.text:00000000004045b8\n.text:00000000004045bd\n.text:00000000004045c2\n.text:00000000004045c7\n.text:00000000004045ca\n.text:00000000004045cd\n.text:00000000004045d1\n.text:00000000004045d5\n.text:00000000004045d9\n.text:00000000004045de\n.text:00000000004045e0\n.text:00000000004045e3\n.text:00000000004045e7\n.text:00000000004045ec\n.text:00000000004045f0\n.text:00000000004045f5\n.text:00000000004045f7\n.text:00000000004045fc\n.text:0000000000404601\n.text:0000000000404606\n.text:0000000000404609\n.text:000000000040460c\n.text:0000000000404610\n.text:0000000000404614\n.text:0000000000404619\n.text:000000000040461e\n.text:0000000000404621\n.text:0000000000404625\n.text:0000000000404629\n.text:000000000040462e\n.text:0000000000404632\n.text:0000000000404637\n.text:0000000000404639\n.text:000000000040463e\n.text:0000000000404643\n.text:0000000000404648\n.text:000000000040464b\n.text:000000000040464e\n.text:0000000000404652\n.text:0000000000404656\n.text:000000000040465a\n.text:000000000040465f\n.text:0000000000404664\n.text:0000000000404667\n.text:000000000040466b\n.text:000000000040466f\n.text:0000000000404673\n.text:0000000000404678\n.text:000000000040467c\n.text:0000000000404681\n.text:0000000000404683\n.text:0000000000404688\n.text:000000000040468d\n.text:0000000000404692\n.text:0000000000404695\n.text:0000000000404698\n.text:000000000040469c\n.text:00000000004046a0\n.text:00000000004046a5\n.text:00000000004046aa\n.text:00000000004046ad\n.text:00000000004046b1\n.text:00000000004046b5\n.text:00000000004046b9\n.text:00000000004046bd\n.text:00000000004046c2\n.text:00000000004046c6\n.text:00000000004046cb\n.text:00000000004046cd\n.text:00000000004046d2\n.text:00000000004046d7\n.text:00000000004046dc\n.text:00000000004046df\n.text:00000000004046e2\n.text:00000000004046e6\n.text:00000000004046ea\n.text:00000000004046ee\n.text:00000000004046f3\n.text:00000000004046f8\n.text:00000000004046fb\n.text:00000000004046ff\n.text:0000000000404703\n.text:0000000000404707\n.text:000000000040470b\n.text:000000000040470f\n.text:0000000000404714\n.text:0000000000404718\n.text:000000000040471a\n.text:000000000040471c\n.text:0000000000404721\n.text:0000000000404726\n.text:000000000040472b\n.text:000000000040472e\n.text:0000000000404731\n.text:0000000000404735\n.text:0000000000404739\n.text:000000000040473e\n.text:0000000000404743\n.text:0000000000404746\n.text:000000000040474a\n.text:000000000040474e\n.text:0000000000404752\n.text:0000000000404756\n.text:000000000040475a\n.text:000000000040475e\n.text:0000000000404763\n.text:0000000000404767\n.text:0000000000404768\n.text:000000000040476a\n.text:000000000040476c\n.text:000000000040476e\n.text:000000000040476f\n'
p27
tp28
sS'usage'
p29
(S'\n__stdcall usage()\n'
p30
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION] NEWROOT [COMMAND [ARG]...]\u005cn  or:  %s OPTION\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,program_name);\u000a    __s = (char *)dcgettext(0,"Run COMMAND with root directory set to NEWROOT.\u005cn\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  --groups=G_LIST        specify supplementary groups as g1,g2,..,gN\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  --userspec=USER:GROUP  specify user and group (ID or name) to use\u005cn",\u000a                            5);\u000a    fputs_unlocked(__s,stdout);\u000a    uVar1 = dcgettext(0,"  --skip-chdir           do not change working directory to %s\u005cn",5);\u000a    __s = quotearg_style((char *)0x4);\u000a    __printf_chk(1,uVar1,__s,__s);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnIf no command is given, run \u005c'${SHELL} -i\u005c' (default: \u005c'/bin/sh -i\u005c').\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,EDI\nTEST EBP,EBP\nJNZ 0x00401bbe\nXOR EDI,EDI\nMOV ESI,0x4057b4\nMOV EDX,0x5\nCALL 0x00401640\nMOV RCX,RAX\nMOV RDX,qword ptr [0x00609320]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nCALL 0x00401870\nXOR EDI,EDI\nMOV ESI,0x4057f4\nMOV EDX,0x5\nCALL 0x00401640\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nCALL 0x00401750\nXOR EDI,EDI\nMOV ESI,0x405826\nMOV EDX,0x5\nCALL 0x00401640\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nCALL 0x00401750\nXOR EDI,EDI\nMOV ESI,0x40586c\nMOV EDX,0x5\nCALL 0x00401640\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nCALL 0x00401750\nXOR EDI,EDI\nMOV ESI,0x4058b1\nMOV EDX,0x5\nCALL 0x00401640\nMOV RBX,RAX\nMOV EDI,0x4\nMOV ESI,0x405e56\nCALL 0x00403a80\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV RDX,RCX\nCALL 0x00401870\nXOR EDI,EDI\nMOV ESI,0x4058f1\nMOV EDX,0x5\nCALL 0x00401640\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nCALL 0x00401750\nXOR EDI,EDI\nMOV ESI,0x40591e\nMOV EDX,0x5\nCALL 0x00401640\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nCALL 0x00401750\nXOR EDI,EDI\nMOV ESI,0x405954\nMOV EDX,0x5\nCALL 0x00401640\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nCALL 0x00401750\nCALL 0x00401c10\nMOV EDI,EBP\nCALL 0x00401910\nCALL 0x00401bd0\nMOV EDI,EBP\nCALL 0x00401910\n'
p32
S'55\n53\n50\n89 fd\n85 ed\n0f 85 31 01 00 00\n31 ff\nbe b4 57 40 00\nba 05 00 00 00\ne8 a2 fb ff ff\n48 89 c1\n48 8b 15 78 78 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\ne8 b6 fd ff ff\n31 ff\nbe f4 57 40 00\nba 05 00 00 00\ne8 75 fb ff ff\n48 8b 35 f6 77 20 00\n48 89 c7\ne8 76 fc ff ff\n31 ff\nbe 26 58 40 00\nba 05 00 00 00\ne8 55 fb ff ff\n48 8b 35 d6 77 20 00\n48 89 c7\ne8 56 fc ff ff\n31 ff\nbe 6c 58 40 00\nba 05 00 00 00\ne8 35 fb ff ff\n48 8b 35 b6 77 20 00\n48 89 c7\ne8 36 fc ff ff\n31 ff\nbe b1 58 40 00\nba 05 00 00 00\ne8 15 fb ff ff\n48 89 c3\nbf 04 00 00 00\nbe 56 5e 40 00\ne8 43 1f 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n48 89 ca\ne8 1e fd ff ff\n31 ff\nbe f1 58 40 00\nba 05 00 00 00\ne8 dd fa ff ff\n48 8b 35 5e 77 20 00\n48 89 c7\ne8 de fb ff ff\n31 ff\nbe 1e 59 40 00\nba 05 00 00 00\ne8 bd fa ff ff\n48 8b 35 3e 77 20 00\n48 89 c7\ne8 be fb ff ff\n31 ff\nbe 54 59 40 00\nba 05 00 00 00\ne8 9d fa ff ff\n48 8b 35 1e 77 20 00\n48 89 c7\ne8 9e fb ff ff\ne8 59 00 00 00\n89 ef\ne8 52 fd ff ff\ne8 0d 00 00 00\n89 ef\ne8 46 fd ff ff\n'
p33
S'.text:0000000000401a80\n.text:0000000000401a81\n.text:0000000000401a82\n.text:0000000000401a83\n.text:0000000000401a85\n.text:0000000000401a87\n.text:0000000000401a8d\n.text:0000000000401a8f\n.text:0000000000401a94\n.text:0000000000401a99\n.text:0000000000401a9e\n.text:0000000000401aa1\n.text:0000000000401aa8\n.text:0000000000401aad\n.text:0000000000401aaf\n.text:0000000000401ab2\n.text:0000000000401ab5\n.text:0000000000401aba\n.text:0000000000401abc\n.text:0000000000401ac1\n.text:0000000000401ac6\n.text:0000000000401acb\n.text:0000000000401ad2\n.text:0000000000401ad5\n.text:0000000000401ada\n.text:0000000000401adc\n.text:0000000000401ae1\n.text:0000000000401ae6\n.text:0000000000401aeb\n.text:0000000000401af2\n.text:0000000000401af5\n.text:0000000000401afa\n.text:0000000000401afc\n.text:0000000000401b01\n.text:0000000000401b06\n.text:0000000000401b0b\n.text:0000000000401b12\n.text:0000000000401b15\n.text:0000000000401b1a\n.text:0000000000401b1c\n.text:0000000000401b21\n.text:0000000000401b26\n.text:0000000000401b2b\n.text:0000000000401b2e\n.text:0000000000401b33\n.text:0000000000401b38\n.text:0000000000401b3d\n.text:0000000000401b40\n.text:0000000000401b45\n.text:0000000000401b47\n.text:0000000000401b4a\n.text:0000000000401b4d\n.text:0000000000401b52\n.text:0000000000401b54\n.text:0000000000401b59\n.text:0000000000401b5e\n.text:0000000000401b63\n.text:0000000000401b6a\n.text:0000000000401b6d\n.text:0000000000401b72\n.text:0000000000401b74\n.text:0000000000401b79\n.text:0000000000401b7e\n.text:0000000000401b83\n.text:0000000000401b8a\n.text:0000000000401b8d\n.text:0000000000401b92\n.text:0000000000401b94\n.text:0000000000401b99\n.text:0000000000401b9e\n.text:0000000000401ba3\n.text:0000000000401baa\n.text:0000000000401bad\n.text:0000000000401bb2\n.text:0000000000401bb7\n.text:0000000000401bb9\n.text:0000000000401bbe\n.text:0000000000401bc3\n.text:0000000000401bc5\n'
p34
tp35
sS'quoting_options_from_style'
p36
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p37
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p38
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00403a2d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401580\n'
p39
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 4e db ff ff\n'
p40
S'.text:00000000004039e0\n.text:00000000004039e4\n.text:00000000004039e7\n.text:00000000004039ec\n.text:00000000004039f1\n.text:00000000004039f5\n.text:00000000004039fd\n.text:0000000000403a00\n.text:0000000000403a02\n.text:0000000000403a04\n.text:0000000000403a08\n.text:0000000000403a0b\n.text:0000000000403a0f\n.text:0000000000403a14\n.text:0000000000403a19\n.text:0000000000403a1d\n.text:0000000000403a21\n.text:0000000000403a25\n.text:0000000000403a28\n.text:0000000000403a2c\n.text:0000000000403a2d\n'
p41
tp42
sS'strchr'
p43
(S'\n__stdcall strchr(char * __s, int __c)\n'
p44
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_006090c0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x006090c0]\n'
p46
S'ff 25 1a 7a 20 00\n'
p47
S'.plt:00000000004016a0\n'
p48
tp49
sS'rpl_fclose'
p50
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p51
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00405619;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00405619:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p52
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004017c0\nTEST EAX,EAX\nJS 0x00405619\nMOV RDI,RBX\nCALL 0x00401830\nTEST EAX,EAX\nJZ 0x004055e7\nMOV RDI,RBX\nCALL 0x004017c0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x004016d0\nCMP RAX,-0x1\nJZ 0x00405619\nMOV RDI,RBX\nCALL 0x00405630\nTEST EAX,EAX\nJZ 0x00405619\nCALL 0x00401590\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401610\nTEST EBP,EBP\nJZ 0x00405612\nCALL 0x00401590\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401610\n'
p53
S'55\n53\n50\n48 89 fb\ne8 05 c2 ff ff\n85 c0\n78 5a\n48 89 df\ne8 69 c2 ff ff\n85 c0\n74 1c\n48 89 df\ne8 ed c1 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 ef c0 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 98 bf ff ff\n8b 28\n48 89 df\ne8 0e c0 ff ff\n85 ed\n74 0c\ne8 85 bf ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 e9 bf ff ff\n'
p54
S'.text:00000000004055b0\n.text:00000000004055b1\n.text:00000000004055b2\n.text:00000000004055b3\n.text:00000000004055b6\n.text:00000000004055bb\n.text:00000000004055bd\n.text:00000000004055bf\n.text:00000000004055c2\n.text:00000000004055c7\n.text:00000000004055c9\n.text:00000000004055cb\n.text:00000000004055ce\n.text:00000000004055d3\n.text:00000000004055d5\n.text:00000000004055da\n.text:00000000004055dc\n.text:00000000004055e1\n.text:00000000004055e5\n.text:00000000004055e7\n.text:00000000004055ea\n.text:00000000004055ef\n.text:00000000004055f1\n.text:00000000004055f3\n.text:00000000004055f8\n.text:00000000004055fa\n.text:00000000004055fd\n.text:0000000000405602\n.text:0000000000405604\n.text:0000000000405606\n.text:000000000040560b\n.text:000000000040560d\n.text:0000000000405612\n.text:0000000000405616\n.text:0000000000405617\n.text:0000000000405618\n.text:0000000000405619\n.text:000000000040561c\n.text:0000000000405620\n.text:0000000000405621\n.text:0000000000405622\n'
p55
tp56
sS'strcpy'
p57
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00609050)();\u000a  return pcVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x00609050]\n'
p60
S'ff 25 8a 7a 20 00\n'
p61
S'.plt:00000000004015c0\n'
p62
tp63
sS'to_uchar'
p64
(S'\n__stdcall to_uchar()\n'
p65
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p66
S'MOV EAX,EDI\nRET\n'
p67
S'89 f8\nc3\n'
p68
S'.text:00000000004026c0\n.text:00000000004026c2\n'
p69
tp70
sS'strncmp'
p71
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p72
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00609040)();\u000a  return iVar1;\u000a}\u000a\u000a
p73
S'JMP qword ptr [0x00609040]\n'
p74
S'ff 25 9a 7a 20 00\n'
p75
S'.plt:00000000004015a0\n'
p76
tp77
sS'xnrealloc'
p78
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p79
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p80
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00404974\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00404980\nPUSH RAX\nCALL 0x00404ad0\n'
p81
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p82
S'.text:0000000000404960\n.text:0000000000404963\n.text:0000000000404966\n.text:0000000000404969\n.text:000000000040496b\n.text:000000000040496f\n.text:0000000000404972\n.text:0000000000404974\n.text:0000000000404975\n'
p83
tp84
sS'quote'
p85
(S'\n__stdcall quote(char * arg)\n'
p86
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p87
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403c90\n'
p88
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p89
S'.text:0000000000403ca0\n.text:0000000000403ca3\n.text:0000000000403ca5\n.text:0000000000403ca8\n'
p90
tp91
sS'emit_bug_reporting_address'
p92
(S'\n__stdcall emit_bug_reporting_address()\n'
p93
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p94
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40667d\nMOV EDX,0x5\nCALL 0x00401640\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406692\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401870\nXOR EDI,EDI\nMOV ESI,0x4066a8\nMOV EDX,0x5\nCALL 0x00401640\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x4059ba\nMOV ECX,0x405bc0\nXOR EAX,EAX\nCALL 0x00401870\nXOR EDI,EDI\nMOV ESI,0x4066bc\nMOV EDX,0x5\nCALL 0x00401640\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401750\n'
p95
S'50\n31 ff\nbe 7d 66 40 00\nba 05 00 00 00\ne8 8e cd ff ff\n48 89 c1\nbf 01 00 00 00\nba 92 66 40 00\n31 c0\n48 89 ce\ne8 a7 cf ff ff\n31 ff\nbe a8 66 40 00\nba 05 00 00 00\ne8 66 cd ff ff\n48 89 c6\nbf 01 00 00 00\nba ba 59 40 00\nb9 c0 5b 40 00\n31 c0\ne8 7d cf ff ff\n31 ff\nbe bc 66 40 00\nba 05 00 00 00\ne8 3c cd ff ff\n48 8b 35 bd 49 20 00\n48 89 c7\n58\ne9 3c ce ff ff\n'
p96
S'.text:00000000004048a0\n.text:00000000004048a1\n.text:00000000004048a3\n.text:00000000004048a8\n.text:00000000004048ad\n.text:00000000004048b2\n.text:00000000004048b5\n.text:00000000004048ba\n.text:00000000004048bf\n.text:00000000004048c1\n.text:00000000004048c4\n.text:00000000004048c9\n.text:00000000004048cb\n.text:00000000004048d0\n.text:00000000004048d5\n.text:00000000004048da\n.text:00000000004048dd\n.text:00000000004048e2\n.text:00000000004048e7\n.text:00000000004048ec\n.text:00000000004048ee\n.text:00000000004048f3\n.text:00000000004048f5\n.text:00000000004048fa\n.text:00000000004048ff\n.text:0000000000404904\n.text:000000000040490b\n.text:000000000040490e\n.text:000000000040490f\n'
p97
tp98
sS'clone_quoting_options'
p99
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p100
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401590\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x609330\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00404a80\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p102
S'55\n41 56\n53\n48 89 fb\ne8 24 ed ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 30 93 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 f5 21 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p103
S'.text:0000000000402860\n.text:0000000000402861\n.text:0000000000402863\n.text:0000000000402864\n.text:0000000000402867\n.text:000000000040286c\n.text:000000000040286f\n.text:0000000000402872\n.text:0000000000402875\n.text:000000000040287a\n.text:000000000040287e\n.text:0000000000402883\n.text:0000000000402886\n.text:000000000040288b\n.text:000000000040288e\n.text:000000000040288f\n.text:0000000000402891\n.text:0000000000402892\n'
p104
tp105
sS'xmalloc'
p106
(S'\n__stdcall xmalloc(size_t n)\n'
p107
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p108
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004017e0\nTEST RBX,RBX\nJZ 0x00404953\nTEST RAX,RAX\nJZ 0x00404955\nPOP RBX\nRET\nCALL 0x00404ad0\n'
p109
S'53\n48 89 fb\ne8 97 ce ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p110
S'.text:0000000000404940\n.text:0000000000404941\n.text:0000000000404944\n.text:0000000000404949\n.text:000000000040494c\n.text:000000000040494e\n.text:0000000000404951\n.text:0000000000404953\n.text:0000000000404954\n.text:0000000000404955\n'
p111
tp112
sS'chroot'
p113
(S'\n__stdcall chroot(char * __path)\n'
p114
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint chroot(char *__path)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_chroot_00609058)();\u000a  return iVar1;\u000a}\u000a\u000a
p115
S'JMP qword ptr [0x00609058]\n'
p116
S'ff 25 82 7a 20 00\n'
p117
S'.plt:00000000004015d0\n'
p118
tp119
sS'quotearg_char_mem'
p120
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p121
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p122
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x00609360]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x00609350]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609340]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609330]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x004028c0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004037b0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p123
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 88 58 20 00\n48 89 4c 24 30\n0f 10 05 6c 58 20 00\n0f 29 44 24 20\n0f 10 05 50 58 20 00\n0f 29 44 24 10\n0f 10 05 34 58 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p124
S'.text:0000000000403ac0\n.text:0000000000403ac2\n.text:0000000000403ac4\n.text:0000000000403ac5\n.text:0000000000403ac9\n.text:0000000000403acb\n.text:0000000000403ace\n.text:0000000000403ad1\n.text:0000000000403ad8\n.text:0000000000403add\n.text:0000000000403ae4\n.text:0000000000403ae9\n.text:0000000000403af0\n.text:0000000000403af5\n.text:0000000000403afc\n.text:0000000000403b00\n.text:0000000000403b03\n.text:0000000000403b08\n.text:0000000000403b0b\n.text:0000000000403b0d\n.text:0000000000403b12\n.text:0000000000403b14\n.text:0000000000403b17\n.text:0000000000403b1a\n.text:0000000000403b1d\n.text:0000000000403b22\n.text:0000000000403b26\n.text:0000000000403b27\n.text:0000000000403b29\n.text:0000000000403b2b\n'
p125
tp126
sS'c_isgraph'
p127
(S'\n__stdcall c_isgraph()\n'
p128
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p129
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p130
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p131
S'.text:0000000000404ee0\n.text:0000000000404ee3\n.text:0000000000404ee6\n.text:0000000000404ee9\n'
p132
tp133
sS'frame_dummy'
p134
(S'\n__stdcall frame_dummy()\n'
p135
V\u000a/* WARNING: Removing unreachable block (ram,0x00401a6a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p136
S'MOV EDI,0x608e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401a60\nJMP 0x004019f0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401a5b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x004019f0\n'
p137
S'bf 18 8e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p138
S'.text:0000000000401a50\n.text:0000000000401a55\n.text:0000000000401a59\n.text:0000000000401a5b\n.text:0000000000401a60\n.text:0000000000401a65\n.text:0000000000401a68\n.text:0000000000401a6a\n.text:0000000000401a6b\n.text:0000000000401a6e\n.text:0000000000401a70\n.text:0000000000401a71\n'
p139
tp140
sS'quotearg_buffer_restyled'
p141
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p142
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_00402a5c_caseD_7;\u000a  case 2:\u000a    goto switchD_00402a5c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_00402a5c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_00402a5c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_00402a5c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_00402a5c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_00402a5c_caseD_7;\u000aswitchD_00402a5c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_00402a5c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_00402a5c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00403520;\u000aLAB_00402c40:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00403529:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00403538:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_00402c4b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_00402c8f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_00402c8f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00403538;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00403465;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00403370;\u000a    }\u000a    goto LAB_00403538;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040349a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00403538;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_004034c9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00402f88;\u000a  case '\u005ca':\u000a    goto joined_r0x00402e78;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00402e78;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00402ca6_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00402e78;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00402e78;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00402ca6_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00402e78:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_004033de;\u000a    }\u000a    goto LAB_00403538;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00403538;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00403538;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00403538;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00403538;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00403538;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00402ca6_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00403436;\u000a      goto joined_r0x00403428;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00402f31:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403428;\u000a      goto LAB_00403436;\u000a    }\u000a    goto LAB_00403538;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00403538;\u000a  }\u000a  goto joined_r0x00403370;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040349a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_004034c9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_004034c9:\u000a  if (1 < uVar10) {\u000aLAB_00402fa6:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403062;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00402f31;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403062:\u000a        if (bVar6 != 0) goto LAB_00403538;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00402f88:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00402fa6;\u000ajoined_r0x00403370:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00403370:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403397;\u000aLAB_004033d0:\u000a    if (bVar22) goto LAB_004033d5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_004033d0;\u000aLAB_00403397:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_004033d5:\u000a      if (bVar6 != 0) goto LAB_00403538;\u000aLAB_004033de:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403428;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00403436:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403428:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00403465:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00402c40;\u000aLAB_00403520:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00403529;\u000a  goto LAB_00402c4b;\u000a}\u000a\u000a
p143
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401650\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00403605\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x405e60 + RAX*0x8]\nMOV EDI,0x406386\nMOV ESI,R15D\nCALL 0x00403cb0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x406388\nMOV ESI,R15D\nCALL 0x00403cb0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x00402abd\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00402ac0\nNOP\nCMP R12,RSI\nJNC 0x00402aae\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00402aa0\nJMP 0x00402ac0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401660\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x00402b8c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x00402b8c\nMOV ECX,0x406384\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00402b86\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00402b27\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00402b54\nTEST RSI,RSI\nJZ 0x00402b41\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x406388\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00402b62\nMOV ECX,0x406388\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x00402b8c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x004035dc\nMOV ECX,0x406384\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00403520\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00403529\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x00402c8f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x00402c8a\nCMP R11,-0x1\nJNZ 0x00402c8a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401660\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00402ce0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00402f3c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x405eb8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00403538\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403390\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403397\nJMP 0x004033d0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401740\nTEST EAX,EAX\nSETZ AL\nJNZ 0x00402d2d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00402c91\nJMP 0x00403538\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00402c91\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x00402cbb\nCMP EBX,0x2\nJNZ 0x00402cbb\nTEST R13,R13\nJNZ 0x00402cbb\nJMP 0x00403538\nCMP R11,-0x1\nJZ 0x00403113\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403133\nJMP 0x00402cbb\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403144\nTEST R8B,R8B\nJNZ 0x00403538\nCMP EBX,0x2\nJNZ 0x00402de8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00402de8\nCMP R12,RSI\nJNC 0x00402dc3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402dd2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402de1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00402df2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x004032b8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x004032b8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x004032b8\nCMP RCX,RSI\nJNC 0x00402e2c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x00402e3b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402cc6\nJMP 0x00403390\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402cb9\nJMP 0x00402e9a\nMOV DL,0x74\nJMP 0x00402e82\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402cb9\nJMP 0x00402e9a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402cb9\nJMP 0x00402e9a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00403538\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402cb9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x004033de\nJMP 0x00403538\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00402cb9\nTEST R8B,R8B\nJNZ 0x00403538\nCMP R12,RSI\nJNC 0x00402eca\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402ed9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402ee8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00402cb9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x004032cb\nCMP EBX,0x2\nJNZ 0x00402cb9\nTEST R8B,R8B\nJZ 0x00402cb9\nJMP 0x00403538\nCMP EBX,0x2\nJNZ 0x00403164\nTEST R8B,R8B\nJNZ 0x00403538\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00403436\nJMP 0x00403459\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403185\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401970\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403378\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00403378\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403062\nJMP 0x00403030\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403019\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403016\nCMP R12,RSI\nJNC 0x00402ffb\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040300a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403050\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403050\nTEST BPL,0x1\nJZ 0x004030f3\nCMP R12,RSI\nJNC 0x00403044\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x004030f3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403030\nTEST R8B,R8B\nJNZ 0x00403538\nCMP EBX,0x2\nJNZ 0x004030aa\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x004030aa\nCMP R12,RSI\nJNC 0x00403082\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403091\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004030a0\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x004030b4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004030cb\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004030e5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00402fe0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00403436\nJMP 0x00403459\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x00402cbb\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x00402cbb\nJMP 0x00403538\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00403465\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402cc6\nJMP 0x00403390\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00402e82\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00403436\nJMP 0x00403459\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x004031a7\nMOV RDI,R10\nCALL 0x00401660\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401690\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040347f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403477\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403486\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040326e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403266\nBT RDI,RDX\nJC 0x004035d2\nINC RCX\nCMP RCX,R14\nJC 0x00403250\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401960\nTEST EAX,EAX\nJNZ 0x00403283\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401950\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004031c5\nJMP 0x004034c9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402cc6\nJMP 0x00403390\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00402cb9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00402cb9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00402cb9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x00402cbb\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00403502\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00403538\nCMP R12,RSI\nJNC 0x0040332e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00403341\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403350\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040335f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402cc6\nJMP 0x00403390\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402cc6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x004033d0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x004033d5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00403430\nJMP 0x004033d5\nTEST BPL,BPL\nJZ 0x00403430\nTEST R8B,R8B\nJNZ 0x00403538\nCMP EBX,0x2\nJNZ 0x00403418\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403418\nCMP R12,RSI\nJNC 0x004033f3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403402\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403411\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403422\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00403462\nJMP 0x0040345e\nTEST DIL,0x1\nJZ 0x00403459\nAND AL,0x1\nJNZ 0x00403459\nCMP R12,RSI\nJNC 0x00403444\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403453\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00403462\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00403520\nJMP 0x00402c40\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x004034c4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x004034bc\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x004034f8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040349a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004034c9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00402f88\nJMP 0x00402fa6\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004034c9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402cc6\nJMP 0x00403390\nCMP R13,R11\nJNZ 0x00402c4b\nTEST R8B,R8B\nJZ 0x00403592\nCMP EBX,0x2\nJNZ 0x00403592\nTEST R12,R12\nJNZ 0x00403592\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x004029d0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x004035c6\nTEST R8B,R8B\nJNZ 0x004035c6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x004035c6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x004035b9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x004035b0\nCMP R12,RSI\nJNC 0x0040357d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040357d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00403538\nTEST RSI,RSI\nJZ 0x004035e9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x406384\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x00402b8c\nCALL 0x00401580\n'
p144
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 52 ec ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 60 5e 40 00\nbf 86 63 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 88 63 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 93 eb ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 84 63 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 88 63 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 88 63 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 84 63 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 f3 e9 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd b8 5e 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 47 ea ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 17 ea ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 c1 e4 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 a3 e4 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 e9 e6 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 b2 e6 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 84 63 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 76 df ff ff\n'
p145
S'.text:00000000004029d0\n.text:00000000004029d1\n.text:00000000004029d3\n.text:00000000004029d5\n.text:00000000004029d7\n.text:00000000004029d9\n.text:00000000004029da\n.text:00000000004029e1\n.text:00000000004029e4\n.text:00000000004029e7\n.text:00000000004029ea\n.text:00000000004029ef\n.text:00000000004029f4\n.text:00000000004029f9\n.text:00000000004029fe\n.text:0000000000402a06\n.text:0000000000402a0a\n.text:0000000000402a10\n.text:0000000000402a18\n.text:0000000000402a1d\n.text:0000000000402a25\n.text:0000000000402a2a\n.text:0000000000402a2e\n.text:0000000000402a30\n.text:0000000000402a33\n.text:0000000000402a36\n.text:0000000000402a39\n.text:0000000000402a3e\n.text:0000000000402a41\n.text:0000000000402a44\n.text:0000000000402a47\n.text:0000000000402a4a\n.text:0000000000402a4c\n.text:0000000000402a4f\n.text:0000000000402a54\n.text:0000000000402a57\n.text:0000000000402a5c\n.text:0000000000402a63\n.text:0000000000402a68\n.text:0000000000402a6b\n.text:0000000000402a70\n.text:0000000000402a75\n.text:0000000000402a7a\n.text:0000000000402a7d\n.text:0000000000402a82\n.text:0000000000402a87\n.text:0000000000402a8c\n.text:0000000000402a8e\n.text:0000000000402a90\n.text:0000000000402a95\n.text:0000000000402a97\n.text:0000000000402a9a\n.text:0000000000402a9c\n.text:0000000000402a9e\n.text:0000000000402aa0\n.text:0000000000402aa3\n.text:0000000000402aa5\n.text:0000000000402aaa\n.text:0000000000402aae\n.text:0000000000402ab4\n.text:0000000000402ab7\n.text:0000000000402ab9\n.text:0000000000402abb\n.text:0000000000402abd\n.text:0000000000402ac0\n.text:0000000000402ac5\n.text:0000000000402ac8\n.text:0000000000402acd\n.text:0000000000402ad2\n.text:0000000000402ad5\n.text:0000000000402ad8\n.text:0000000000402adb\n.text:0000000000402ade\n.text:0000000000402ae3\n.text:0000000000402ae6\n.text:0000000000402ae9\n.text:0000000000402aee\n.text:0000000000402af1\n.text:0000000000402af3\n.text:0000000000402af6\n.text:0000000000402af8\n.text:0000000000402afa\n.text:0000000000402afd\n.text:0000000000402b02\n.text:0000000000402b07\n.text:0000000000402b0c\n.text:0000000000402b0f\n.text:0000000000402b15\n.text:0000000000402b17\n.text:0000000000402b1a\n.text:0000000000402b1d\n.text:0000000000402b20\n.text:0000000000402b22\n.text:0000000000402b24\n.text:0000000000402b27\n.text:0000000000402b2a\n.text:0000000000402b2f\n.text:0000000000402b32\n.text:0000000000402b34\n.text:0000000000402b37\n.text:0000000000402b39\n.text:0000000000402b3e\n.text:0000000000402b41\n.text:0000000000402b46\n.text:0000000000402b4c\n.text:0000000000402b52\n.text:0000000000402b54\n.text:0000000000402b59\n.text:0000000000402b5f\n.text:0000000000402b62\n.text:0000000000402b65\n.text:0000000000402b68\n.text:0000000000402b6a\n.text:0000000000402b6f\n.text:0000000000402b72\n.text:0000000000402b78\n.text:0000000000402b7d\n.text:0000000000402b83\n.text:0000000000402b86\n.text:0000000000402b89\n.text:0000000000402b8c\n.text:0000000000402b94\n.text:0000000000402b96\n.text:0000000000402b98\n.text:0000000000402b9b\n.text:0000000000402b9f\n.text:0000000000402ba1\n.text:0000000000402ba4\n.text:0000000000402ba8\n.text:0000000000402baa\n.text:0000000000402bad\n.text:0000000000402bb0\n.text:0000000000402bb3\n.text:0000000000402bb5\n.text:0000000000402bb9\n.text:0000000000402bbb\n.text:0000000000402bbf\n.text:0000000000402bc2\n.text:0000000000402bc5\n.text:0000000000402bc8\n.text:0000000000402bca\n.text:0000000000402bce\n.text:0000000000402bd7\n.text:0000000000402bda\n.text:0000000000402bdc\n.text:0000000000402be0\n.text:0000000000402be2\n.text:0000000000402be6\n.text:0000000000402be8\n.text:0000000000402beb\n.text:0000000000402bef\n.text:0000000000402bf1\n.text:0000000000402bf4\n.text:0000000000402bf8\n.text:0000000000402bfd\n.text:0000000000402c00\n.text:0000000000402c04\n.text:0000000000402c0c\n.text:0000000000402c0f\n.text:0000000000402c12\n.text:0000000000402c14\n.text:0000000000402c18\n.text:0000000000402c1b\n.text:0000000000402c1d\n.text:0000000000402c22\n.text:0000000000402c26\n.text:0000000000402c2b\n.text:0000000000402c30\n.text:0000000000402c34\n.text:0000000000402c3a\n.text:0000000000402c40\n.text:0000000000402c45\n.text:0000000000402c4b\n.text:0000000000402c50\n.text:0000000000402c52\n.text:0000000000402c57\n.text:0000000000402c5b\n.text:0000000000402c5d\n.text:0000000000402c61\n.text:0000000000402c63\n.text:0000000000402c65\n.text:0000000000402c68\n.text:0000000000402c6d\n.text:0000000000402c6f\n.text:0000000000402c74\n.text:0000000000402c79\n.text:0000000000402c7d\n.text:0000000000402c82\n.text:0000000000402c87\n.text:0000000000402c8a\n.text:0000000000402c8d\n.text:0000000000402c8f\n.text:0000000000402c91\n.text:0000000000402c96\n.text:0000000000402c9a\n.text:0000000000402ca0\n.text:0000000000402ca2\n.text:0000000000402ca4\n.text:0000000000402ca6\n.text:0000000000402cae\n.text:0000000000402cb3\n.text:0000000000402cb9\n.text:0000000000402cbb\n.text:0000000000402cc0\n.text:0000000000402cc6\n.text:0000000000402ccf\n.text:0000000000402cd5\n.text:0000000000402ce0\n.text:0000000000402ce2\n.text:0000000000402ce5\n.text:0000000000402ce9\n.text:0000000000402cf1\n.text:0000000000402cf4\n.text:0000000000402cf9\n.text:0000000000402cfb\n.text:0000000000402cfe\n.text:0000000000402d00\n.text:0000000000402d05\n.text:0000000000402d08\n.text:0000000000402d0d\n.text:0000000000402d10\n.text:0000000000402d15\n.text:0000000000402d19\n.text:0000000000402d1e\n.text:0000000000402d20\n.text:0000000000402d22\n.text:0000000000402d28\n.text:0000000000402d2d\n.text:0000000000402d32\n.text:0000000000402d35\n.text:0000000000402d3a\n.text:0000000000402d3e\n.text:0000000000402d43\n.text:0000000000402d48\n.text:0000000000402d4a\n.text:0000000000402d4c\n.text:0000000000402d51\n.text:0000000000402d53\n.text:0000000000402d56\n.text:0000000000402d5c\n.text:0000000000402d5f\n.text:0000000000402d65\n.text:0000000000402d68\n.text:0000000000402d6e\n.text:0000000000402d73\n.text:0000000000402d77\n.text:0000000000402d7d\n.text:0000000000402d80\n.text:0000000000402d83\n.text:0000000000402d87\n.text:0000000000402d8a\n.text:0000000000402d8c\n.text:0000000000402d8f\n.text:0000000000402d95\n.text:0000000000402d9a\n.text:0000000000402d9f\n.text:0000000000402da5\n.text:0000000000402da8\n.text:0000000000402dae\n.text:0000000000402db1\n.text:0000000000402db3\n.text:0000000000402db5\n.text:0000000000402db7\n.text:0000000000402db9\n.text:0000000000402dbc\n.text:0000000000402dbe\n.text:0000000000402dc3\n.text:0000000000402dc8\n.text:0000000000402dcb\n.text:0000000000402dcd\n.text:0000000000402dd2\n.text:0000000000402dd7\n.text:0000000000402dda\n.text:0000000000402ddc\n.text:0000000000402de1\n.text:0000000000402de5\n.text:0000000000402de8\n.text:0000000000402deb\n.text:0000000000402ded\n.text:0000000000402df2\n.text:0000000000402df7\n.text:0000000000402df9\n.text:0000000000402dfc\n.text:0000000000402dff\n.text:0000000000402e05\n.text:0000000000402e09\n.text:0000000000402e0c\n.text:0000000000402e12\n.text:0000000000402e16\n.text:0000000000402e19\n.text:0000000000402e1c\n.text:0000000000402e22\n.text:0000000000402e25\n.text:0000000000402e27\n.text:0000000000402e2c\n.text:0000000000402e31\n.text:0000000000402e34\n.text:0000000000402e36\n.text:0000000000402e3b\n.text:0000000000402e3f\n.text:0000000000402e44\n.text:0000000000402e4a\n.text:0000000000402e4f\n.text:0000000000402e51\n.text:0000000000402e56\n.text:0000000000402e5c\n.text:0000000000402e5e\n.text:0000000000402e60\n.text:0000000000402e62\n.text:0000000000402e64\n.text:0000000000402e69\n.text:0000000000402e6f\n.text:0000000000402e71\n.text:0000000000402e73\n.text:0000000000402e78\n.text:0000000000402e7e\n.text:0000000000402e80\n.text:0000000000402e82\n.text:0000000000402e87\n.text:0000000000402e89\n.text:0000000000402e8f\n.text:0000000000402e94\n.text:0000000000402e9a\n.text:0000000000402e9d\n.text:0000000000402ea0\n.text:0000000000402ea6\n.text:0000000000402eab\n.text:0000000000402eae\n.text:0000000000402eb1\n.text:0000000000402eb7\n.text:0000000000402eba\n.text:0000000000402ec0\n.text:0000000000402ec3\n.text:0000000000402ec5\n.text:0000000000402eca\n.text:0000000000402ecf\n.text:0000000000402ed2\n.text:0000000000402ed4\n.text:0000000000402ed9\n.text:0000000000402ede\n.text:0000000000402ee1\n.text:0000000000402ee3\n.text:0000000000402ee8\n.text:0000000000402eec\n.text:0000000000402eee\n.text:0000000000402ef3\n.text:0000000000402ef6\n.text:0000000000402ef9\n.text:0000000000402eff\n.text:0000000000402f02\n.text:0000000000402f08\n.text:0000000000402f0b\n.text:0000000000402f11\n.text:0000000000402f16\n.text:0000000000402f19\n.text:0000000000402f1f\n.text:0000000000402f22\n.text:0000000000402f28\n.text:0000000000402f2b\n.text:0000000000402f2d\n.text:0000000000402f31\n.text:0000000000402f37\n.text:0000000000402f3c\n.text:0000000000402f40\n.text:0000000000402f49\n.text:0000000000402f4f\n.text:0000000000402f54\n.text:0000000000402f59\n.text:0000000000402f5e\n.text:0000000000402f61\n.text:0000000000402f66\n.text:0000000000402f69\n.text:0000000000402f6c\n.text:0000000000402f71\n.text:0000000000402f76\n.text:0000000000402f7a\n.text:0000000000402f7f\n.text:0000000000402f84\n.text:0000000000402f88\n.text:0000000000402f8a\n.text:0000000000402f8f\n.text:0000000000402f95\n.text:0000000000402f98\n.text:0000000000402f9a\n.text:0000000000402f9d\n.text:0000000000402fa0\n.text:0000000000402fa6\n.text:0000000000402fab\n.text:0000000000402fae\n.text:0000000000402fb1\n.text:0000000000402fb4\n.text:0000000000402fb7\n.text:0000000000402fb9\n.text:0000000000402fbd\n.text:0000000000402fbf\n.text:0000000000402fc4\n.text:0000000000402fc9\n.text:0000000000402fcf\n.text:0000000000402fe0\n.text:0000000000402fe5\n.text:0000000000402fe7\n.text:0000000000402fea\n.text:0000000000402fec\n.text:0000000000402fef\n.text:0000000000402ff1\n.text:0000000000402ff4\n.text:0000000000402ff6\n.text:0000000000402ffb\n.text:0000000000403000\n.text:0000000000403003\n.text:0000000000403005\n.text:000000000040300a\n.text:000000000040300e\n.text:0000000000403016\n.text:0000000000403019\n.text:000000000040301c\n.text:000000000040301e\n.text:0000000000403022\n.text:0000000000403030\n.text:0000000000403034\n.text:000000000040303a\n.text:000000000040303d\n.text:000000000040303f\n.text:0000000000403044\n.text:0000000000403047\n.text:0000000000403049\n.text:0000000000403050\n.text:0000000000403053\n.text:0000000000403058\n.text:000000000040305b\n.text:0000000000403060\n.text:0000000000403062\n.text:0000000000403065\n.text:000000000040306b\n.text:000000000040306e\n.text:0000000000403070\n.text:0000000000403074\n.text:0000000000403076\n.text:0000000000403078\n.text:000000000040307b\n.text:000000000040307d\n.text:0000000000403082\n.text:0000000000403087\n.text:000000000040308a\n.text:000000000040308c\n.text:0000000000403091\n.text:0000000000403096\n.text:0000000000403099\n.text:000000000040309b\n.text:00000000004030a0\n.text:00000000004030a4\n.text:00000000004030a6\n.text:00000000004030aa\n.text:00000000004030ad\n.text:00000000004030af\n.text:00000000004030b4\n.text:00000000004030b9\n.text:00000000004030bc\n.text:00000000004030be\n.text:00000000004030c1\n.text:00000000004030c4\n.text:00000000004030c7\n.text:00000000004030cb\n.text:00000000004030d0\n.text:00000000004030d3\n.text:00000000004030d5\n.text:00000000004030d8\n.text:00000000004030db\n.text:00000000004030de\n.text:00000000004030e1\n.text:00000000004030e5\n.text:00000000004030e9\n.text:00000000004030ed\n.text:00000000004030f1\n.text:00000000004030f3\n.text:00000000004030f7\n.text:00000000004030fa\n.text:0000000000403100\n.text:0000000000403104\n.text:0000000000403108\n.text:000000000040310e\n.text:0000000000403113\n.text:0000000000403116\n.text:0000000000403119\n.text:000000000040311e\n.text:0000000000403121\n.text:0000000000403123\n.text:0000000000403126\n.text:000000000040312d\n.text:0000000000403133\n.text:0000000000403135\n.text:0000000000403139\n.text:000000000040313f\n.text:0000000000403144\n.text:0000000000403149\n.text:000000000040314f\n.text:0000000000403152\n.text:0000000000403154\n.text:0000000000403159\n.text:000000000040315f\n.text:0000000000403164\n.text:0000000000403166\n.text:000000000040316b\n.text:0000000000403171\n.text:0000000000403173\n.text:0000000000403176\n.text:000000000040317a\n.text:0000000000403180\n.text:0000000000403185\n.text:0000000000403191\n.text:0000000000403195\n.text:0000000000403197\n.text:000000000040319a\n.text:000000000040319f\n.text:00000000004031a4\n.text:00000000004031a7\n.text:00000000004031ab\n.text:00000000004031b0\n.text:00000000004031b2\n.text:00000000004031b6\n.text:00000000004031b8\n.text:00000000004031c0\n.text:00000000004031c5\n.text:00000000004031ca\n.text:00000000004031ce\n.text:00000000004031d2\n.text:00000000004031da\n.text:00000000004031dd\n.text:00000000004031e2\n.text:00000000004031e5\n.text:00000000004031e8\n.text:00000000004031ed\n.text:00000000004031f0\n.text:00000000004031f3\n.text:00000000004031f9\n.text:00000000004031fd\n.text:0000000000403207\n.text:000000000040320d\n.text:0000000000403211\n.text:0000000000403216\n.text:000000000040321c\n.text:0000000000403220\n.text:0000000000403223\n.text:0000000000403227\n.text:0000000000403229\n.text:000000000040322e\n.text:0000000000403233\n.text:0000000000403237\n.text:0000000000403239\n.text:000000000040323e\n.text:0000000000403243\n.text:0000000000403247\n.text:000000000040324c\n.text:0000000000403250\n.text:0000000000403254\n.text:0000000000403257\n.text:000000000040325a\n.text:000000000040325c\n.text:0000000000403260\n.text:0000000000403266\n.text:0000000000403269\n.text:000000000040326c\n.text:000000000040326e\n.text:0000000000403272\n.text:0000000000403277\n.text:0000000000403279\n.text:000000000040327b\n.text:0000000000403283\n.text:0000000000403288\n.text:000000000040328b\n.text:0000000000403293\n.text:0000000000403296\n.text:0000000000403299\n.text:000000000040329e\n.text:00000000004032a1\n.text:00000000004032a3\n.text:00000000004032a8\n.text:00000000004032ad\n.text:00000000004032b3\n.text:00000000004032b8\n.text:00000000004032bb\n.text:00000000004032c0\n.text:00000000004032c6\n.text:00000000004032cb\n.text:00000000004032d0\n.text:00000000004032d6\n.text:00000000004032da\n.text:00000000004032dd\n.text:00000000004032e3\n.text:00000000004032e9\n.text:00000000004032ef\n.text:00000000004032f4\n.text:00000000004032f6\n.text:00000000004032f9\n.text:00000000004032ff\n.text:0000000000403303\n.text:0000000000403305\n.text:000000000040330f\n.text:0000000000403313\n.text:0000000000403319\n.text:000000000040331c\n.text:000000000040331e\n.text:0000000000403324\n.text:0000000000403327\n.text:0000000000403329\n.text:000000000040332e\n.text:0000000000403333\n.text:0000000000403336\n.text:000000000040333a\n.text:000000000040333c\n.text:0000000000403341\n.text:0000000000403346\n.text:0000000000403349\n.text:000000000040334b\n.text:0000000000403350\n.text:0000000000403355\n.text:0000000000403358\n.text:000000000040335a\n.text:000000000040335f\n.text:0000000000403363\n.text:0000000000403365\n.text:0000000000403368\n.text:000000000040336b\n.text:0000000000403370\n.text:0000000000403376\n.text:0000000000403378\n.text:000000000040337d\n.text:0000000000403382\n.text:0000000000403388\n.text:0000000000403390\n.text:0000000000403395\n.text:0000000000403397\n.text:000000000040339c\n.text:000000000040339f\n.text:00000000004033a1\n.text:00000000004033a4\n.text:00000000004033a6\n.text:00000000004033a9\n.text:00000000004033ac\n.text:00000000004033af\n.text:00000000004033b1\n.text:00000000004033b9\n.text:00000000004033bc\n.text:00000000004033be\n.text:00000000004033c0\n.text:00000000004033d0\n.text:00000000004033d3\n.text:00000000004033d5\n.text:00000000004033d8\n.text:00000000004033de\n.text:00000000004033e1\n.text:00000000004033e3\n.text:00000000004033e5\n.text:00000000004033e7\n.text:00000000004033e9\n.text:00000000004033ec\n.text:00000000004033ee\n.text:00000000004033f3\n.text:00000000004033f8\n.text:00000000004033fb\n.text:00000000004033fd\n.text:0000000000403402\n.text:0000000000403407\n.text:000000000040340a\n.text:000000000040340c\n.text:0000000000403411\n.text:0000000000403415\n.text:0000000000403418\n.text:000000000040341b\n.text:000000000040341d\n.text:0000000000403422\n.text:0000000000403425\n.text:0000000000403428\n.text:000000000040342a\n.text:0000000000403430\n.text:0000000000403434\n.text:0000000000403436\n.text:0000000000403438\n.text:000000000040343a\n.text:000000000040343d\n.text:000000000040343f\n.text:0000000000403444\n.text:0000000000403449\n.text:000000000040344c\n.text:000000000040344e\n.text:0000000000403453\n.text:0000000000403457\n.text:0000000000403459\n.text:000000000040345c\n.text:000000000040345e\n.text:0000000000403462\n.text:0000000000403465\n.text:0000000000403468\n.text:000000000040346c\n.text:0000000000403472\n.text:0000000000403477\n.text:000000000040347f\n.text:0000000000403484\n.text:0000000000403486\n.text:000000000040348e\n.text:0000000000403493\n.text:0000000000403495\n.text:000000000040349a\n.text:000000000040349f\n.text:00000000004034a3\n.text:00000000004034a5\n.text:00000000004034aa\n.text:00000000004034ad\n.text:00000000004034b0\n.text:00000000004034b2\n.text:00000000004034ba\n.text:00000000004034bc\n.text:00000000004034c4\n.text:00000000004034c9\n.text:00000000004034cd\n.text:00000000004034d2\n.text:00000000004034d7\n.text:00000000004034db\n.text:00000000004034e0\n.text:00000000004034e5\n.text:00000000004034e9\n.text:00000000004034ed\n.text:00000000004034f3\n.text:00000000004034f8\n.text:0000000000403500\n.text:0000000000403502\n.text:0000000000403504\n.text:0000000000403508\n.text:000000000040350d\n.text:0000000000403513\n.text:0000000000403520\n.text:0000000000403523\n.text:0000000000403529\n.text:000000000040352c\n.text:000000000040352e\n.text:0000000000403531\n.text:0000000000403533\n.text:0000000000403536\n.text:0000000000403538\n.text:0000000000403540\n.text:0000000000403546\n.text:000000000040354a\n.text:000000000040354d\n.text:0000000000403551\n.text:0000000000403556\n.text:000000000040355a\n.text:000000000040355e\n.text:0000000000403561\n.text:0000000000403564\n.text:0000000000403567\n.text:000000000040356b\n.text:000000000040356f\n.text:0000000000403571\n.text:0000000000403576\n.text:000000000040357a\n.text:000000000040357d\n.text:0000000000403580\n.text:0000000000403587\n.text:0000000000403588\n.text:000000000040358a\n.text:000000000040358c\n.text:000000000040358e\n.text:0000000000403590\n.text:0000000000403591\n.text:0000000000403592\n.text:000000000040359a\n.text:000000000040359d\n.text:000000000040359f\n.text:00000000004035a2\n.text:00000000004035a4\n.text:00000000004035a6\n.text:00000000004035a8\n.text:00000000004035aa\n.text:00000000004035ad\n.text:00000000004035b0\n.text:00000000004035b3\n.text:00000000004035b5\n.text:00000000004035b9\n.text:00000000004035bc\n.text:00000000004035bf\n.text:00000000004035c2\n.text:00000000004035c4\n.text:00000000004035c6\n.text:00000000004035c9\n.text:00000000004035cb\n.text:00000000004035d0\n.text:00000000004035d2\n.text:00000000004035d7\n.text:00000000004035dc\n.text:00000000004035df\n.text:00000000004035e1\n.text:00000000004035e6\n.text:00000000004035e9\n.text:00000000004035ee\n.text:00000000004035f1\n.text:00000000004035f7\n.text:00000000004035fd\n.text:0000000000403600\n.text:0000000000403605\n'
p146
tp147
sS'getgrgid'
p148
(S'\n__stdcall getgrgid(__gid_t __gid)\n'
p149
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000agroup * getgrgid(__gid_t __gid)\u000a\u000a{\u000a  group *pgVar1;\u000a  \u000a  pgVar1 = (group *)(*(code *)PTR_getgrgid_006090c8)();\u000a  return pgVar1;\u000a}\u000a\u000a
p150
S'JMP qword ptr [0x006090c8]\n'
p151
S'ff 25 12 7a 20 00\n'
p152
S'.plt:00000000004016b0\n'
p153
tp154
sS'setgid'
p155
(S'\n__stdcall setgid(__gid_t __gid)\n'
p156
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setgid(__gid_t __gid)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setgid_006091b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x006091b8]\n'
p158
S'ff 25 22 79 20 00\n'
p159
S'.plt:0000000000401890\n'
p160
tp161
sS'set_quoting_style'
p162
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p163
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p164
S'TEST RDI,RDI\nMOV EAX,0x609330\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p165
S'48 85 ff\nb8 30 93 60 00\n48 0f 45 c7\n89 30\nc3\n'
p166
S'.text:00000000004028b0\n.text:00000000004028b3\n.text:00000000004028b8\n.text:00000000004028bc\n.text:00000000004028be\n'
p167
tp168
sS'uid_unset'
p169
(S'\n__stdcall uid_unset()\n'
p170
V\u000a_Bool uid_unset(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == -1);\u000a}\u000a\u000a
p171
S'CMP EDI,-0x1\nSETZ AL\nRET\n'
p172
S'83 ff ff\n0f 94 c0\nc3\n'
p173
S'.text:0000000000402470\n.text:0000000000402473\n.text:0000000000402476\n'
p174
tp175
sS'execvp'
p176
(S'\n__stdcall execvp(char * __file, char * * __argv)\n'
p177
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint execvp(char *__file,char **__argv)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_execvp_006091e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p178
S'JMP qword ptr [0x006091e8]\n'
p179
S'ff 25 f2 78 20 00\n'
p180
S'.plt:00000000004018f0\n'
p181
tp182
sS'quotearg_n_style_colon'
p183
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p184
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p185
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x004039e0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x004028c0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x004037b0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p186
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p187
S'.text:0000000000403b60\n.text:0000000000403b61\n.text:0000000000403b63\n.text:0000000000403b64\n.text:0000000000403b68\n.text:0000000000403b6b\n.text:0000000000403b6d\n.text:0000000000403b72\n.text:0000000000403b75\n.text:0000000000403b7a\n.text:0000000000403b7f\n.text:0000000000403b84\n.text:0000000000403b87\n.text:0000000000403b8c\n.text:0000000000403b93\n.text:0000000000403b95\n.text:0000000000403b98\n.text:0000000000403b9b\n.text:0000000000403ba0\n.text:0000000000403ba4\n.text:0000000000403ba5\n.text:0000000000403ba7\n.text:0000000000403ba8\n'
p188
tp189
sS'textdomain'
p190
(S'\n__stdcall textdomain()\n'
p191
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00609070)();\u000a  return;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x00609070]\n'
p193
S'ff 25 6a 7a 20 00\n'
p194
S'.plt:0000000000401600\n'
p195
tp196
sS'xmemdup'
p197
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p198
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p199
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00404940\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004017a0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p200
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 fc cc ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p201
S'.text:0000000000404a80\n.text:0000000000404a82\n.text:0000000000404a84\n.text:0000000000404a85\n.text:0000000000404a88\n.text:0000000000404a8b\n.text:0000000000404a8e\n.text:0000000000404a93\n.text:0000000000404a96\n.text:0000000000404a99\n.text:0000000000404a9c\n.text:0000000000404a9f\n.text:0000000000404aa4\n.text:0000000000404aa7\n.text:0000000000404aa8\n.text:0000000000404aaa\n.text:0000000000404aac\n'
p202
tp203
sS'get_quoting_style'
p204
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p205
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p206
S'TEST RDI,RDI\nMOV EAX,0x609330\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p207
S'48 85 ff\nb8 30 93 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p208
S'.text:00000000004028a0\n.text:00000000004028a3\n.text:00000000004028a8\n.text:00000000004028ac\n.text:00000000004028ae\n'
p209
tp210
sS'ferror_unlocked'
p211
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_00609120)();\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x00609120]\n'
p214
S'ff 25 ba 79 20 00\n'
p215
S'.plt:0000000000401760\n'
p216
tp217
sS'exit'
p218
(S'\n__stdcall exit(int __status)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006091f8)();\u000a  return;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x006091f8]\n'
p221
S'ff 25 e2 78 20 00\n'
p222
S'.plt:0000000000401910\n'
p223
tp224
sS'quote_mem'
p225
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p226
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p227
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403c70\n'
p228
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p229
S'.text:0000000000403c80\n.text:0000000000403c83\n.text:0000000000403c86\n.text:0000000000403c88\n.text:0000000000403c8b\n.text:0000000000403c8e\n'
p230
tp231
sS'locale_charset'
p232
(S'\n__stdcall locale_charset()\n'
p233
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = "";\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_004050ed:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_004050ed;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p234
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401800\nTEST RAX,RAX\nMOV R14D,0x405825\nCMOVNZ R14,RAX\nCALL 0x00405100\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x004050c5\nJMP 0x004050ed\nMOV RDI,RBX\nCALL 0x00401660\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401660\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x004050ed\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401780\nTEST EAX,EAX\nJZ 0x004050e0\nCMP BPL,0x2a\nJNZ 0x004050a0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x004050a0\nMOV RDI,RBX\nCALL 0x00401660\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x406d90\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p235
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 82 c7 ff ff\n48 85 c0\n41 be 25 58 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 b8 c5 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 aa c5 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 b0 c6 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 78 c5 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 90 6d 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p236
S'.text:0000000000405070\n.text:0000000000405071\n.text:0000000000405073\n.text:0000000000405074\n.text:0000000000405079\n.text:000000000040507e\n.text:0000000000405081\n.text:0000000000405087\n.text:000000000040508b\n.text:0000000000405090\n.text:0000000000405093\n.text:0000000000405096\n.text:0000000000405099\n.text:000000000040509b\n.text:00000000004050a0\n.text:00000000004050a3\n.text:00000000004050a8\n.text:00000000004050ac\n.text:00000000004050b1\n.text:00000000004050b6\n.text:00000000004050bb\n.text:00000000004050c0\n.text:00000000004050c3\n.text:00000000004050c5\n.text:00000000004050c8\n.text:00000000004050cb\n.text:00000000004050d0\n.text:00000000004050d2\n.text:00000000004050d4\n.text:00000000004050d8\n.text:00000000004050da\n.text:00000000004050de\n.text:00000000004050e0\n.text:00000000004050e3\n.text:00000000004050e8\n.text:00000000004050ed\n.text:00000000004050f1\n.text:00000000004050f6\n.text:00000000004050fa\n.text:00000000004050fb\n.text:00000000004050fd\n.text:00000000004050fe\n'
p237
tp238
sS'set_program_name'
p239
(S'\n__stdcall set_program_name(char * argv0)\n'
p240
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p241
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402831\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x004016c0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040281b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x405e50\nMOV EDX,0x7\nCALL 0x004015a0\nTEST EAX,EAX\nJNZ 0x0040281b\nMOV ESI,0x405e58\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x004015a0\nTEST EAX,EAX\nJNZ 0x00402818\nADD R14,0x3\nMOV qword ptr [0x006092c0],R14\nMOV RBX,R14\nMOV qword ptr [0x00609320],RBX\nMOV qword ptr [0x006092e0],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x00609300]\nMOV EDI,0x405e18\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401920\nCALL 0x00401580\n'
p242
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 f7 ee ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 50 5e 40 00\nba 07 00 00 00\ne8 ad ed ff ff\n85 c0\n75 24\nbe 58 5e 40 00\nba 03 00 00 00\n4c 89 f7\ne8 97 ed ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 a8 6a 20 00\n4c 89 f3\n48 89 1d fe 6a 20 00\n48 89 1d b7 6a 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d c8 6a 20 00\nbf 18 5e 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 d4 f0 ff ff\ne8 2f ed ff ff\n'
p243
S'.text:00000000004027b0\n.text:00000000004027b2\n.text:00000000004027b3\n.text:00000000004027b4\n.text:00000000004027b7\n.text:00000000004027ba\n.text:00000000004027bc\n.text:00000000004027c1\n.text:00000000004027c4\n.text:00000000004027c9\n.text:00000000004027cc\n.text:00000000004027d0\n.text:00000000004027d4\n.text:00000000004027d7\n.text:00000000004027da\n.text:00000000004027de\n.text:00000000004027e0\n.text:00000000004027e4\n.text:00000000004027e9\n.text:00000000004027ee\n.text:00000000004027f3\n.text:00000000004027f5\n.text:00000000004027f7\n.text:00000000004027fc\n.text:0000000000402801\n.text:0000000000402804\n.text:0000000000402809\n.text:000000000040280b\n.text:000000000040280d\n.text:0000000000402811\n.text:0000000000402818\n.text:000000000040281b\n.text:0000000000402822\n.text:0000000000402829\n.text:000000000040282d\n.text:000000000040282e\n.text:0000000000402830\n.text:0000000000402831\n.text:0000000000402838\n.text:000000000040283d\n.text:0000000000402842\n.text:0000000000402847\n.text:000000000040284c\n'
p244
tp245
sS'fileno'
p246
(S'\n__stdcall fileno(FILE * __stream)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00609150)();\u000a  return iVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x00609150]\n'
p249
S'ff 25 8a 79 20 00\n'
p250
S'.plt:00000000004017c0\n'
p251
tp252
sS'canonicalize_file_name'
p253
(S'\n__stdcall canonicalize_file_name(char * __name)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * canonicalize_file_name(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_canonicalize_file_name_006090f8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x006090f8]\n'
p256
S'ff 25 e2 79 20 00\n'
p257
S'.plt:0000000000401710\n'
p258
tp259
sS'quotearg_buffer'
p260
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p261
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p262
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x609330\nCMOVNZ RBP,R8\nCALL 0x00401590\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x004029d0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p263
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 30 93 60 00\n49 0f 45 e8\ne8 18 ec ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p264
S'.text:0000000000402950\n.text:0000000000402951\n.text:0000000000402953\n.text:0000000000402955\n.text:0000000000402957\n.text:0000000000402959\n.text:000000000040295a\n.text:000000000040295b\n.text:000000000040295e\n.text:0000000000402961\n.text:0000000000402964\n.text:0000000000402967\n.text:000000000040296a\n.text:000000000040296f\n.text:0000000000402973\n.text:0000000000402978\n.text:000000000040297b\n.text:000000000040297d\n.text:0000000000402981\n.text:0000000000402985\n.text:0000000000402989\n.text:000000000040298d\n.text:0000000000402990\n.text:0000000000402993\n.text:0000000000402996\n.text:0000000000402999\n.text:000000000040299c\n.text:000000000040299f\n.text:00000000004029a3\n.text:00000000004029a4\n.text:00000000004029a9\n.text:00000000004029ad\n.text:00000000004029b1\n.text:00000000004029b3\n.text:00000000004029b7\n.text:00000000004029b8\n.text:00000000004029ba\n.text:00000000004029bc\n.text:00000000004029be\n.text:00000000004029c0\n.text:00000000004029c1\n'
p265
tp266
sS'quotearg_colon'
p267
(S'\n__stdcall quotearg_colon(char * arg)\n'
p268
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p269
S'MOV ESI,0x3a\nJMP 0x00403b30\n'
p270
S'be 3a 00 00 00\neb e9\n'
p271
S'.text:0000000000403b40\n.text:0000000000403b45\n'
p272
tp273
sS'mbrtowc'
p274
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006090b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x006090b8]\n'
p277
S'ff 25 22 7a 20 00\n'
p278
S'.plt:0000000000401690\n'
p279
tp280
sS'rpl_fflush'
p281
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p282
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00609168)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p283
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040564d\nMOV RDI,RBX\nCALL 0x00401830\nTEST EAX,EAX\nJZ 0x0040564d\nMOV RDI,RBX\nCALL 0x00405660\nMOV RDI,RBX\nPOP RBX\nJMP 0x004017f0\n'
p284
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 ef c1 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 9a c1 ff ff\n'
p285
S'.text:0000000000405630\n.text:0000000000405631\n.text:0000000000405634\n.text:0000000000405637\n.text:0000000000405639\n.text:000000000040563c\n.text:0000000000405641\n.text:0000000000405643\n.text:0000000000405645\n.text:0000000000405648\n.text:000000000040564d\n.text:0000000000405650\n.text:0000000000405651\n'
p286
tp287
sS'__assert_fail'
p288
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p289
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_006090e0)();\u000a  return;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x006090e0]\n'
p291
S'ff 25 fa 79 20 00\n'
p292
S'.plt:00000000004016e0\n'
p293
tp294
sS'setlocale'
p295
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p296
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_006091a0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p297
S'JMP qword ptr [0x006091a0]\n'
p298
S'ff 25 3a 79 20 00\n'
p299
S'.plt:0000000000401860\n'
p300
tp301
sS'endpwent'
p302
(S'\n__stdcall endpwent()\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid endpwent(void)\u000a\u000a{\u000a  (*(code *)PTR_endpwent_00609180)();\u000a  return;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x00609180]\n'
p305
S'ff 25 5a 79 20 00\n'
p306
S'.plt:0000000000401820\n'
p307
tp308
sS'c_toupper'
p309
(S'\n__stdcall c_toupper()\n'
p310
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p311
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p312
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p313
S'.text:0000000000404f90\n.text:0000000000404f93\n.text:0000000000404f96\n.text:0000000000404f99\n.text:0000000000404f9c\n'
p314
tp315
sS'bindtextdomain'
p316
(S'\n__stdcall bindtextdomain()\n'
p317
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00609088)();\u000a  return;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x00609088]\n'
p319
S'ff 25 52 7a 20 00\n'
p320
S'.plt:0000000000401630\n'
p321
tp322
sS'bad_cast'
p323
(S'\n__stdcall bad_cast(char * s)\n'
p324
V\u000achar * bad_cast(char *s)\u000a\u000a{\u000a  return s;\u000a}\u000a\u000a
p325
S'MOV RAX,RDI\nRET\n'
p326
S'48 89 f8\nc3\n'
p327
S'.text:00000000004026b0\n.text:00000000004026b3\n'
p328
tp329
sS'set_char_quoting'
p330
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p331
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p332
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x609330\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p333
S'89 f1\n48 85 ff\nbe 30 93 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p334
S'.text:00000000004028c0\n.text:00000000004028c2\n.text:00000000004028c5\n.text:00000000004028ca\n.text:00000000004028ce\n.text:00000000004028d0\n.text:00000000004028d3\n.text:00000000004028d7\n.text:00000000004028dc\n.text:00000000004028df\n.text:00000000004028e1\n.text:00000000004028e3\n.text:00000000004028e6\n.text:00000000004028e8\n.text:00000000004028eb\n.text:00000000004028ed\n.text:00000000004028f0\n.text:00000000004028f5\n'
p335
tp336
sS'quotearg_n'
p337
(S'\n__stdcall quotearg_n(char * arg)\n'
p338
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p339
S'MOV RDX,-0x1\nMOV ECX,0x609330\nJMP 0x004037b0\n'
p340
S'48 c7 c2 ff ff ff ff\nb9 30 93 60 00\neb 02\n'
p341
S'.text:00000000004037a0\n.text:00000000004037a7\n.text:00000000004037ac\n'
p342
tp343
sS'mbsinit'
p344
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p345
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_00609218)();\u000a  return iVar1;\u000a}\u000a\u000a
p346
S'JMP qword ptr [0x00609218]\n'
p347
S'ff 25 c2 78 20 00\n'
p348
S'.plt:0000000000401950\n'
p349
tp350
sS'dcgettext'
p351
(S'\n__stdcall dcgettext()\n'
p352
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00609090)();\u000a  return;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x00609090]\n'
p354
S'ff 25 4a 7a 20 00\n'
p355
S'.plt:0000000000401640\n'
p356
tp357
sS'close_stream'
p358
(S'\n__stdcall close_stream(FILE * stream)\n'
p359
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p360
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004015e0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401760\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x004055b0\nTEST EBP,EBP\nJZ 0x00404fdb\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x00404fff\nCALL 0x00401590\nMOV dword ptr [RAX],0x0\nJMP 0x00404fff\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x00404fff\nTEST CL,CL\nJNZ 0x00404fff\nCALL 0x00401590\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p361
S'55\n41 56\n53\n48 89 fb\ne8 34 c6 ff ff\n49 89 c6\n48 89 df\ne8 a9 c7 ff ff\n89 c5\n48 89 df\ne8 ef 05 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 bd c5 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 9e c5 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p362
S'.text:0000000000404fa0\n.text:0000000000404fa1\n.text:0000000000404fa3\n.text:0000000000404fa4\n.text:0000000000404fa7\n.text:0000000000404fac\n.text:0000000000404faf\n.text:0000000000404fb2\n.text:0000000000404fb7\n.text:0000000000404fb9\n.text:0000000000404fbc\n.text:0000000000404fc1\n.text:0000000000404fc3\n.text:0000000000404fc5\n.text:0000000000404fca\n.text:0000000000404fcc\n.text:0000000000404fce\n.text:0000000000404fd3\n.text:0000000000404fd9\n.text:0000000000404fdb\n.text:0000000000404fdd\n.text:0000000000404fe0\n.text:0000000000404fe2\n.text:0000000000404fe4\n.text:0000000000404fe7\n.text:0000000000404fe9\n.text:0000000000404feb\n.text:0000000000404fed\n.text:0000000000404ff2\n.text:0000000000404ff4\n.text:0000000000404ff7\n.text:0000000000404ffc\n.text:0000000000404fff\n.text:0000000000405001\n.text:0000000000405002\n.text:0000000000405004\n.text:0000000000405005\n'
p363
tp364
sS'quotearg_colon_mem'
p365
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p366
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p367
S'MOV EDX,0x3a\nJMP 0x00403ac0\n'
p368
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p369
S'.text:0000000000403b50\n.text:0000000000403b55\n'
p370
tp371
sS'quotearg_free'
p372
(S'\n__stdcall quotearg_free()\n'
p373
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p374
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x00609250]\nCMP dword ptr [0x00609258],0x2\nJC 0x0040374a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401570\nINC RBX\nMOV EAX,dword ptr [0x00609258]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00403730\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x609370\nCMP RDI,RAX\nJZ 0x00403773\nCALL 0x00401570\nMOV qword ptr [0x00609260],0x100\nMOV qword ptr [0x00609268],0x609370\nMOV EAX,0x609260\nCMP R14,RAX\nJZ 0x00403790\nMOV RDI,R14\nCALL 0x00401570\nMOV qword ptr [0x00609250],0x609260\nMOV dword ptr [0x00609258],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p375
S'41 57\n41 56\n53\n4c 8b 35 34 5b 20 00\n83 3d 35 5b 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 38 de ff ff\n48 ff c3\n8b 05 17 5b 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 70 93 60 00\n48 39 c7\n74 1b\ne8 13 de ff ff\n48 c7 05 f8 5a 20 00 00 01 00 00\n48 c7 05 f5 5a 20 00 70 93 60 00\nb8 60 92 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 eb dd ff ff\n48 c7 05 c0 5a 20 00 60 92 60 00\nc7 05 be 5a 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p376
S'.text:0000000000403710\n.text:0000000000403712\n.text:0000000000403714\n.text:0000000000403715\n.text:000000000040371c\n.text:0000000000403723\n.text:0000000000403725\n.text:0000000000403729\n.text:000000000040372e\n.text:0000000000403730\n.text:0000000000403733\n.text:0000000000403738\n.text:000000000040373b\n.text:0000000000403741\n.text:0000000000403745\n.text:0000000000403748\n.text:000000000040374a\n.text:000000000040374e\n.text:0000000000403753\n.text:0000000000403756\n.text:0000000000403758\n.text:000000000040375d\n.text:0000000000403768\n.text:0000000000403773\n.text:0000000000403778\n.text:000000000040377b\n.text:000000000040377d\n.text:0000000000403780\n.text:0000000000403785\n.text:0000000000403790\n.text:000000000040379a\n.text:000000000040379b\n.text:000000000040379d\n.text:000000000040379f\n'
p377
tp378
sS'quotearg_mem'
p379
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p380
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p381
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403970\n'
p382
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p383
S'.text:0000000000403990\n.text:0000000000403993\n.text:0000000000403996\n.text:0000000000403998\n.text:000000000040399b\n.text:000000000040399e\n'
p384
tp385
sS'xcalloc'
p386
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p387
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p388
S'PUSH RAX\nCALL 0x00404e00\nTEST RAX,RAX\nJZ 0x00404a6d\nPOP RCX\nRET\nCALL 0x00404ad0\n'
p389
S'50\ne8 9a 03 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p390
S'.text:0000000000404a60\n.text:0000000000404a61\n.text:0000000000404a66\n.text:0000000000404a69\n.text:0000000000404a6b\n.text:0000000000404a6c\n.text:0000000000404a6d\n'
p391
tp392
sS'deregister_tm_clones'
p393
(S'\n__stdcall deregister_tm_clones()\n'
p394
V\u000a/* WARNING: Removing unreachable block (ram,0x004019c5) */\u000a/* WARNING: Removing unreachable block (ram,0x004019cf) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p395
S'MOV EAX,0x6092af\nPUSH RBP\nSUB RAX,0x6092a8\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x004019e0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004019e0\nPOP RBP\nMOV EDI,0x6092a8\nJMP RAX\nPOP RBP\nRET\n'
p396
S'b8 af 92 60 00\n55\n48 2d a8 92 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf a8 92 60 00\nff e0\n5d\nc3\n'
p397
S'.text:00000000004019b0\n.text:00000000004019b5\n.text:00000000004019b6\n.text:00000000004019bc\n.text:00000000004019c0\n.text:00000000004019c3\n.text:00000000004019c5\n.text:00000000004019ca\n.text:00000000004019cd\n.text:00000000004019cf\n.text:00000000004019d0\n.text:00000000004019d5\n.text:00000000004019e0\n.text:00000000004019e1\n'
p398
tp399
sS'clear_ungetc_buffer_preserving_position'
p400
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p401
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p402
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405667\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00405680\n'
p403
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p404
S'.text:0000000000405660\n.text:0000000000405664\n.text:0000000000405666\n.text:0000000000405667\n.text:0000000000405669\n.text:000000000040566e\n'
p405
tp406
sS'getgroups'
p407
(S'\n__stdcall getgroups(int __size, __gid_t * __list)\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getgroups(int __size,__gid_t *__list)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getgroups_00609158)();\u000a  return iVar1;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x00609158]\n'
p410
S'ff 25 82 79 20 00\n'
p411
S'.plt:00000000004017d0\n'
p412
tp413
sS'xnmalloc'
p414
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p415
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p416
S'MOV RAX,RDI\nMUL RSI\nJO 0x00404931\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00404940\nPUSH RAX\nCALL 0x00404ad0\n'
p417
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p418
S'.text:0000000000404920\n.text:0000000000404923\n.text:0000000000404926\n.text:0000000000404928\n.text:000000000040492c\n.text:000000000040492f\n.text:0000000000404931\n.text:0000000000404932\n'
p419
tp420
sS'quotearg_custom'
p421
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p422
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p423
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403bb0\n'
p424
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p425
S'.text:0000000000403c30\n.text:0000000000403c33\n.text:0000000000403c36\n.text:0000000000403c39\n.text:0000000000403c3b\n.text:0000000000403c3e\n.text:0000000000403c41\n.text:0000000000403c44\n'
p426
tp427
sS'free'
p428
(S'\n__stdcall free(void * __ptr)\n'
p429
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00609028)();\u000a  return;\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x00609028]\n'
p431
S'ff 25 b2 7a 20 00\n'
p432
S'.plt:0000000000401570\n'
p433
tp434
sS'close'
p435
(S'\n__stdcall close(int __fd)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_00609100)();\u000a  return iVar1;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x00609100]\n'
p438
S'ff 25 da 79 20 00\n'
p439
S'.plt:0000000000401720\n'
p440
tp441
sS'getenv'
p442
(S'\n__stdcall getenv(char * __name)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00609020)();\u000a  return pcVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x00609020]\n'
p445
S'ff 25 ba 7a 20 00\n'
p446
S'.plt:0000000000401560\n'
p447
tp448
sS'quotearg_char'
p449
(S'\n__stdcall quotearg_char(char * arg)\n'
p450
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p451
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00403ac0\n'
p452
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p453
S'.text:0000000000403b30\n.text:0000000000403b32\n.text:0000000000403b39\n.text:0000000000403b3b\n'
p454
tp455
sS'malloc'
p456
(S'\n__stdcall malloc(size_t __size)\n'
p457
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00609160)();\u000a  return pvVar1;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x00609160]\n'
p459
S'ff 25 7a 79 20 00\n'
p460
S'.plt:00000000004017e0\n'
p461
tp462
sS'c_tolower'
p463
(S'\n__stdcall c_tolower()\n'
p464
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p465
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p466
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p467
S'.text:0000000000404f80\n.text:0000000000404f83\n.text:0000000000404f86\n.text:0000000000404f89\n.text:0000000000404f8c\n'
p468
tp469
sS'rpl_fseeko'
p470
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p471
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_006091d0)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p472
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x004056a8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x004056a8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x004056ba\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004018c0\nMOV RDI,RBX\nCALL 0x004017c0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x004016d0\nCMP RAX,-0x1\nJZ 0x004056e3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x004056e8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p473
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 06 c2 ff ff\n48 89 df\ne8 fe c0 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 01 c0 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p474
S'.text:0000000000405680\n.text:0000000000405681\n.text:0000000000405683\n.text:0000000000405684\n.text:0000000000405687\n.text:000000000040568a\n.text:000000000040568d\n.text:0000000000405691\n.text:0000000000405695\n.text:0000000000405697\n.text:000000000040569b\n.text:000000000040569f\n.text:00000000004056a1\n.text:00000000004056a6\n.text:00000000004056a8\n.text:00000000004056ab\n.text:00000000004056ae\n.text:00000000004056b1\n.text:00000000004056b2\n.text:00000000004056b4\n.text:00000000004056b5\n.text:00000000004056ba\n.text:00000000004056bd\n.text:00000000004056c2\n.text:00000000004056c4\n.text:00000000004056c7\n.text:00000000004056ca\n.text:00000000004056cf\n.text:00000000004056d3\n.text:00000000004056d5\n.text:00000000004056d8\n.text:00000000004056df\n.text:00000000004056e1\n.text:00000000004056e3\n.text:00000000004056e8\n.text:00000000004056e9\n.text:00000000004056eb\n.text:00000000004056ec\n'
p475
tp476
sS'getopt_long'
p477
(S'\n__stdcall getopt_long()\n'
p478
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_006090b0)();\u000a  return;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x006090b0]\n'
p480
S'ff 25 2a 7a 20 00\n'
p481
S'.plt:0000000000401680\n'
p482
tp483
sS'quote_n_mem'
p484
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p485
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p486
S'MOV ECX,0x609270\nJMP 0x004037b0\n'
p487
S'b9 70 92 60 00\ne9 36 fb ff ff\n'
p488
S'.text:0000000000403c70\n.text:0000000000403c75\n'
p489
tp490
sS'xstrdup'
p491
(S'\n__stdcall xstrdup(char * string)\n'
p492
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p493
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401660\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00404a80\n'
p494
S'53\n48 89 fb\ne8 a7 cb ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p495
S'.text:0000000000404ab0\n.text:0000000000404ab1\n.text:0000000000404ab4\n.text:0000000000404ab9\n.text:0000000000404abd\n.text:0000000000404ac0\n.text:0000000000404ac1\n'
p496
tp497
sS'c_ispunct'
p498
(S'\n__stdcall c_ispunct()\n'
p499
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p500
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00404f22\nMOV AL,0x1\nJMP qword ptr [0x406978 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p501
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 78 69 40 00\nc3\n31 c0\nc3\n'
p502
S'.text:0000000000404f10\n.text:0000000000404f13\n.text:0000000000404f16\n.text:0000000000404f18\n.text:0000000000404f1a\n.text:0000000000404f21\n.text:0000000000404f22\n.text:0000000000404f24\n'
p503
tp504
sS'quotearg_style'
p505
(S'\n__stdcall quotearg_style(char * arg)\n'
p506
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p507
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x004039a0\n'
p508
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p509
S'.text:0000000000403a80\n.text:0000000000403a83\n.text:0000000000403a85\n.text:0000000000403a87\n.text:0000000000403a89\n.text:0000000000403a8c\n'
p510
tp511
sS'endgrent'
p512
(S'\n__stdcall endgrent()\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid endgrent(void)\u000a\u000a{\u000a  (*(code *)PTR_endgrent_00609018)();\u000a  return;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x00609018]\n'
p515
S'ff 25 c2 7a 20 00\n'
p516
S'.plt:0000000000401550\n'
p517
tp518
sS'xgetgroups'
p519
(S'\n__stdcall xgetgroups(char * username, gid_t * * groups)\n'
p520
V\u000aint xgetgroups(char *username,gid_t **groups)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  \u000a  iVar1 = mgetgroups(username,groups);\u000a  if (iVar1 == -1) {\u000a    piVar2 = __errno_location();\u000a    if (*piVar2 == 0xc) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die();\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p521
S'PUSH RBX\nCALL 0x004053a0\nMOV EBX,EAX\nCMP EBX,-0x1\nJNZ 0x00404b17\nCALL 0x00401590\nCMP dword ptr [RAX],0xc\nJZ 0x00404b1b\nMOV EAX,EBX\nPOP RBX\nRET\nCALL 0x00404ad0\n'
p522
S'53\ne8 9a 08 00 00\n89 c3\n83 fb ff\n75 0a\ne8 7e ca ff ff\n83 38 0c\n74 04\n89 d8\n5b\nc3\ne8 b0 ff ff ff\n'
p523
S'.text:0000000000404b00\n.text:0000000000404b01\n.text:0000000000404b06\n.text:0000000000404b08\n.text:0000000000404b0b\n.text:0000000000404b0d\n.text:0000000000404b12\n.text:0000000000404b15\n.text:0000000000404b17\n.text:0000000000404b19\n.text:0000000000404b1a\n.text:0000000000404b1b\n'
p524
tp525
sS'fscanf'
p526
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p527
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006090f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x006090f0]\n'
p529
S'ff 25 ea 79 20 00\n'
p530
S'.plt:0000000000401700\n'
p531
tp532
sS'emit_try_help'
p533
(S'\n__stdcall emit_try_help()\n'
p534
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p535
S'PUSH RBX\nMOV RBX,qword ptr [0x00609300]\nXOR EDI,EDI\nMOV ESI,0x405b23\nMOV EDX,0x5\nCALL 0x00401640\nMOV RDX,RAX\nMOV RCX,qword ptr [0x00609320]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401930\n'
p536
S'53\n48 8b 1d 28 77 20 00\n31 ff\nbe 23 5b 40 00\nba 05 00 00 00\ne8 57 fa ff ff\n48 89 c2\n48 8b 0d 2d 77 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 2d fd ff ff\n'
p537
S'.text:0000000000401bd0\n.text:0000000000401bd1\n.text:0000000000401bd8\n.text:0000000000401bda\n.text:0000000000401bdf\n.text:0000000000401be4\n.text:0000000000401be9\n.text:0000000000401bec\n.text:0000000000401bf3\n.text:0000000000401bf8\n.text:0000000000401bfa\n.text:0000000000401bfd\n.text:0000000000401bfe\n'
p538
tp539
sS'memcpy'
p540
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00609140)();\u000a  return pvVar1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x00609140]\n'
p543
S'ff 25 9a 79 20 00\n'
p544
S'.plt:00000000004017a0\n'
p545
tp546
sS'strrchr'
p547
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p548
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006090d0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p549
S'JMP qword ptr [0x006090d0]\n'
p550
S'ff 25 0a 7a 20 00\n'
p551
S'.plt:00000000004016c0\n'
p552
tp553
sS'close_stdout_set_ignore_EPIPE'
p554
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p555
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p556
S'MOV byte ptr [0x00609318],DIL\nRET\n'
p557
S'40 88 3d 31 6c 20 00\nc3\n'
p558
S'.text:00000000004026e0\n.text:00000000004026e7\n'
p559
tp560
sS'quotearg_alloc_mem'
p561
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p562
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p563
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x609330\nCMOVNZ R12,RCX\nCALL 0x00401590\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004029d0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00404a10\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004029d0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x004036fa\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p564
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 30 93 60 00\n4c 0f 45 e1\ne8 38 df ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 61 13 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p565
S'.text:0000000000403620\n.text:0000000000403621\n.text:0000000000403623\n.text:0000000000403625\n.text:0000000000403627\n.text:0000000000403629\n.text:000000000040362a\n.text:000000000040362e\n.text:0000000000403631\n.text:0000000000403636\n.text:0000000000403639\n.text:000000000040363e\n.text:0000000000403641\n.text:0000000000403646\n.text:0000000000403649\n.text:000000000040364f\n.text:0000000000403653\n.text:0000000000403658\n.text:000000000040365d\n.text:000000000040365f\n.text:0000000000403663\n.text:0000000000403665\n.text:0000000000403668\n.text:000000000040366c\n.text:0000000000403671\n.text:0000000000403675\n.text:000000000040367a\n.text:000000000040367e\n.text:0000000000403680\n.text:0000000000403682\n.text:0000000000403685\n.text:0000000000403688\n.text:000000000040368b\n.text:0000000000403690\n.text:0000000000403695\n.text:0000000000403697\n.text:000000000040369c\n.text:00000000004036a0\n.text:00000000004036a3\n.text:00000000004036a7\n.text:00000000004036aa\n.text:00000000004036af\n.text:00000000004036b2\n.text:00000000004036b6\n.text:00000000004036ba\n.text:00000000004036bd\n.text:00000000004036c0\n.text:00000000004036c5\n.text:00000000004036ca\n.text:00000000004036cd\n.text:00000000004036d2\n.text:00000000004036d7\n.text:00000000004036d9\n.text:00000000004036de\n.text:00000000004036e3\n.text:00000000004036e7\n.text:00000000004036ea\n.text:00000000004036ee\n.text:00000000004036f3\n.text:00000000004036f5\n.text:00000000004036f7\n.text:00000000004036fa\n.text:00000000004036fd\n.text:0000000000403701\n.text:0000000000403702\n.text:0000000000403704\n.text:0000000000403706\n.text:0000000000403708\n.text:000000000040370a\n.text:000000000040370b\n'
p566
tp567
sS'iswprint'
p568
(S'\n__stdcall iswprint(wint_t __wc)\n'
p569
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_00609220)();\u000a  return iVar1;\u000a}\u000a\u000a
p570
S'JMP qword ptr [0x00609220]\n'
p571
S'ff 25 ba 78 20 00\n'
p572
S'.plt:0000000000401960\n'
p573
tp574
sS'bkm_scale'
p575
(S'\n__stdcall bkm_scale(ulong * x)\n'
p576
V\u000astrtol_error bkm_scale(ulong *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p577
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p578
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p579
S'.text:0000000000404d90\n.text:0000000000404d93\n.text:0000000000404d9a\n.text:0000000000404da1\n.text:0000000000404da3\n.text:0000000000404da6\n.text:0000000000404da9\n.text:0000000000404dad\n.text:0000000000404db0\n.text:0000000000404db4\n.text:0000000000404db6\n.text:0000000000404db9\n.text:0000000000404dbc\n'
p580
tp581
sS'quotearg_style_mem'
p582
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p583
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p584
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403a40\n'
p585
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p586
S'.text:0000000000403aa0\n.text:0000000000403aa3\n.text:0000000000403aa6\n.text:0000000000403aa8\n.text:0000000000403aaa\n.text:0000000000403aac\n.text:0000000000403aaf\n.text:0000000000403ab2\n'
p587
tp588
sS'xalloc_die'
p589
(S'\n__stdcall xalloc_die()\n'
p590
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x405e15,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p591
S'PUSH RBX\nMOV EBX,dword ptr [0x00609248]\nXOR EDI,EDI\nMOV ESI,0x40672f\nMOV EDX,0x5\nCALL 0x00401640\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x405e15\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401880\nCALL 0x00401580\n'
p592
S'53\n8b 1d 71 47 20 00\n31 ff\nbe 2f 67 40 00\nba 05 00 00 00\ne8 58 cb ff ff\n48 89 c1\n31 f6\nba 15 5e 40 00\n31 c0\n89 df\ne8 85 cd ff ff\ne8 80 ca ff ff\n'
p593
S'.text:0000000000404ad0\n.text:0000000000404ad1\n.text:0000000000404ad7\n.text:0000000000404ad9\n.text:0000000000404ade\n.text:0000000000404ae3\n.text:0000000000404ae8\n.text:0000000000404aeb\n.text:0000000000404aed\n.text:0000000000404af2\n.text:0000000000404af4\n.text:0000000000404af6\n.text:0000000000404afb\n'
p594
tp595
sS'c_isspace'
p596
(S'\n__stdcall c_isspace()\n'
p597
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p598
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00404f45\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p599
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p600
S'.text:0000000000404f30\n.text:0000000000404f33\n.text:0000000000404f36\n.text:0000000000404f38\n.text:0000000000404f3d\n.text:0000000000404f3f\n.text:0000000000404f41\n.text:0000000000404f44\n.text:0000000000404f45\n.text:0000000000404f47\n'
p601
tp602
sS'quotearg_n_custom'
p603
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p604
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p605
S'MOV R8,-0x1\nJMP 0x00403bc0\n'
p606
S'49 c7 c0 ff ff ff ff\neb 07\n'
p607
S'.text:0000000000403bb0\n.text:0000000000403bb7\n'
p608
tp609
sS'open'
p610
(S'\n__stdcall open(char * __file, int __oflag)\n'
p611
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_006091c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p612
S'JMP qword ptr [0x006091c8]\n'
p613
S'ff 25 12 79 20 00\n'
p614
S'.plt:00000000004018b0\n'
p615
tp616
sS'parse_additional_groups'
p617
(S'\n__stdcall parse_additional_groups(char * groups, gid_t * * pgids, size_t * pn_gids)\n'
p618
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aint parse_additional_groups(char *groups,gid_t **pgids,size_t *pn_gids)\u000a\u000a{\u000a  char cVar1;\u000a  uint uVar2;\u000a  ushort *puVar3;\u000a  byte bVar4;\u000a  strtol_error sVar5;\u000a  char *s;\u000a  uint *puVar6;\u000a  ushort **ppuVar7;\u000a  group *pgVar8;\u000a  undefined8 uVar9;\u000a  char in_CL;\u000a  gid_t *p;\u000a  size_t sVar10;\u000a  int local_68;\u000a  ulong local_60;\u000a  gid_t **local_58;\u000a  size_t local_50;\u000a  size_t *local_48;\u000a  char *local_40;\u000a  char *local_38;\u000a  \u000a  local_50 = 0;\u000a  local_58 = pgids;\u000a  local_48 = pn_gids;\u000a  local_40 = groups;\u000a  local_38 = xstrdup(groups);\u000a  s = strtok(local_38,",");\u000a  if (s == (char *)0x0) {\u000a    sVar10 = 0;\u000a    p = (gid_t *)0x0;\u000a    local_68 = 0;\u000a  }\u000a  else {\u000a    local_68 = 0;\u000a    p = (gid_t *)0x0;\u000a    sVar10 = 0;\u000a    do {\u000a      sVar5 = xstrtoul(s,(char **)0x0,(ulong *)0xa,(char *)&local_60);\u000a      if ((sVar5 == LONGINT_OK) && (local_60 >> 0x20 == 0)) {\u000a        ppuVar7 = __ctype_b_loc();\u000a        puVar3 = *ppuVar7;\u000a        s = s + -1;\u000a        do {\u000a          cVar1 = s[1];\u000a          s = s + 1;\u000a          bVar4 = to_uchar();\u000a        } while ((*(byte *)((long)puVar3 + (ulong)bVar4 * 2 + 1) & 0x20) != 0);\u000a        if ((cVar1 != '+') && (pgVar8 = getgrnam(s), pgVar8 != (group *)0x0)) {\u000aLAB_004025c1:\u000a          local_60 = (ulong)pgVar8->gr_gid;\u000a        }\u000a        if (sVar10 == local_50) {\u000a          p = (gid_t *)x2nrealloc(p,&local_50,4);\u000a        }\u000a        p[sVar10] = (gid_t)local_60;\u000a        sVar10 = sVar10 + 1;\u000a      }\u000a      else {\u000a        pgVar8 = getgrnam(s);\u000a        if (pgVar8 != (group *)0x0) goto LAB_004025c1;\u000a        if (in_CL == 0) goto LAB_00402667;\u000a        puVar6 = (uint *)__errno_location();\u000a        uVar2 = *puVar6;\u000a        uVar9 = dcgettext(0,"invalid group %s",5);\u000a        quote(s);\u000a        error(0,(ulong)uVar2,uVar9);\u000a        local_68 = -1;\u000a      }\u000a      s = strtok((char *)0x0,",");\u000a    } while (s != (char *)0x0);\u000a  }\u000a  if ((sVar10 == 0 && local_68 == 0) && (local_68 = -1, in_CL == 1)) {\u000a    uVar9 = dcgettext(0,"invalid group list %s",5);\u000a    s = quote(local_40);\u000a    error(0,0,uVar9,s);\u000aLAB_00402667:\u000a    *local_58 = p;\u000a    local_68 = -1;\u000a  }\u000a  else {\u000a    *local_58 = p;\u000a    if (local_68 == 0) {\u000a      *local_48 = sVar10;\u000a      local_68 = 0;\u000a    }\u000a  }\u000a  free(local_38);\u000a  return local_68;\u000a}\u000a\u000a
p619
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV dword ptr [RSP + 0x4],ECX\nMOV qword ptr [RSP + 0x20],RDX\nMOV qword ptr [RSP + 0x10],RSI\nMOV qword ptr [RSP + 0x18],0x0\nMOV qword ptr [RSP + 0x28],RDI\nCALL 0x00404ab0\nMOV ESI,0x405ca3\nMOV qword ptr [RSP + 0x30],RAX\nMOV RDI,RAX\nCALL 0x004018d0\nMOV R15,RAX\nTEST R15,R15\nJZ 0x0040260a\nLEA R12,[RSP + 0x8]\nMOV dword ptr [RSP],0x0\nXOR EBX,EBX\nXOR R13D,R13D\nJMP 0x00402540\nCMP byte ptr [RSP + 0x4],0x0\nJZ 0x00402667\nCALL 0x00401590\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x405ca5\nMOV EDX,0x5\nCALL 0x00401640\nMOV R14,RAX\nMOV RDI,R15\nCALL 0x00403ca0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,R14\nCALL 0x00401880\nMOV dword ptr [RSP],0xffffffff\nJMP 0x004025f0\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x405825\nMOV RDI,R15\nMOV RCX,R12\nCALL 0x00404b20\nTEST EAX,EAX\nJNZ 0x004025b0\nMOV RAX,qword ptr [RSP + 0x8]\nSHR RAX,0x20\nJNZ 0x004025b0\nCALL 0x00401970\nMOV RBP,qword ptr [RAX]\nDEC R15\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX R14D,byte ptr [R15 + 0x1]\nINC R15\nMOVSX EDI,R14B\nCALL 0x004026c0\nMOVZX EAX,AL\nTEST byte ptr [RBP + RAX*0x2 + 0x1],0x20\nJNZ 0x00402580\nCMP R14B,0x2b\nJZ 0x004025c9\nMOV RDI,R15\nCALL 0x004017b0\nTEST RAX,RAX\nJNZ 0x004025c1\nJMP 0x004025c9\nMOV RDI,R15\nCALL 0x004017b0\nTEST RAX,RAX\nJZ 0x004024f0\nMOV EAX,dword ptr [RAX + 0x10]\nMOV qword ptr [RSP + 0x8],RAX\nCMP R13,qword ptr [RSP + 0x18]\nJNZ 0x004025e5\nMOV EDX,0x4\nMOV RDI,RBX\nLEA RSI,[RSP + 0x18]\nCALL 0x004049b0\nMOV RBX,RAX\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [RBX + R13*0x4],EAX\nINC R13\nXOR EDI,EDI\nMOV ESI,0x405ca3\nCALL 0x004018d0\nMOV R15,RAX\nTEST R15,R15\nJNZ 0x00402540\nJMP 0x00402616\nXOR R13D,R13D\nXOR EBX,EBX\nMOV dword ptr [RSP],0x0\nMOV EDX,dword ptr [RSP]\nTEST EDX,EDX\nSETNZ AL\nTEST R13,R13\nSETNZ CL\nOR CL,AL\nMOV EBP,0xffffffff\nCMOVNZ EBP,EDX\nJNZ 0x00402676\nMOV EAX,dword ptr [RSP + 0x4]\nXOR AL,0x1\nJNZ 0x00402676\nXOR EDI,EDI\nMOV ESI,0x405cb6\nMOV EDX,0x5\nCALL 0x00401640\nMOV RBP,RAX\nMOV RDI,qword ptr [RSP + 0x28]\nCALL 0x00403ca0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401880\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RAX],RBX\nMOV EBP,0xffffffff\nJMP 0x0040268c\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RAX],RBX\nTEST EBP,EBP\nJNZ 0x0040268c\nMOV RAX,qword ptr [RSP + 0x20]\nMOV qword ptr [RAX],R13\nXOR EBP,EBP\nMOV RDI,qword ptr [RSP + 0x30]\nCALL 0x00401570\nMOV EAX,EBP\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p620
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n89 4c 24 04\n48 89 54 24 20\n48 89 74 24 10\n48 c7 44 24 18 00 00 00 00\n48 89 7c 24 28\ne8 f1 25 00 00\nbe a3 5c 40 00\n48 89 44 24 30\n48 89 c7\ne8 ff f3 ff ff\n49 89 c7\n4d 85 ff\n0f 84 2d 01 00 00\n4c 8d 64 24 08\nc7 04 24 00 00 00 00\n31 db\n45 31 ed\neb 50\n80 7c 24 04 00\n0f 84 6c 01 00 00\ne8 90 f0 ff ff\n8b 28\n31 ff\nbe a5 5c 40 00\nba 05 00 00 00\ne8 2d f1 ff ff\n49 89 c6\n4c 89 ff\ne8 82 17 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n4c 89 f2\ne8 51 f3 ff ff\nc7 04 24 ff ff ff ff\ne9 b5 00 00 00\n31 f6\nba 0a 00 00 00\n41 b8 25 58 40 00\n4c 89 ff\n4c 89 e1\ne8 c8 25 00 00\n85 c0\n75 54\n48 8b 44 24 08\n48 c1 e8 20\n75 49\ne8 04 f4 ff ff\n48 8b 28\n49 ff cf\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n45 0f b6 77 01\n49 ff c7\n41 0f be fe\ne8 2f 01 00 00\n0f b6 c0\nf6 44 45 01 20\n75 e5\n41 80 fe 2b\n74 28\n4c 89 ff\ne8 07 f2 ff ff\n48 85 c0\n75 13\neb 19\n4c 89 ff\ne8 f8 f1 ff ff\n48 85 c0\n0f 84 2f ff ff ff\n8b 40 10\n48 89 44 24 08\n4c 3b 6c 24 18\n75 15\nba 04 00 00 00\n48 89 df\n48 8d 74 24 18\ne8 ce 23 00 00\n48 89 c3\n8b 44 24 08\n42 89 04 ab\n49 ff c5\n31 ff\nbe a3 5c 40 00\ne8 d4 f2 ff ff\n49 89 c7\n4d 85 ff\n0f 85 38 ff ff ff\neb 0c\n45 31 ed\n31 db\nc7 04 24 00 00 00 00\n8b 14 24\n85 d2\n0f 95 c0\n4d 85 ed\n0f 95 c1\n08 c1\nbd ff ff ff ff\n0f 45 ea\n75 46\n8b 44 24 04\n34 01\n75 3e\n31 ff\nbe b6 5c 40 00\nba 05 00 00 00\ne8 f7 ef ff ff\n48 89 c5\n48 8b 7c 24 28\ne8 4a 16 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 19 f2 ff ff\n48 8b 44 24 10\n48 89 18\nbd ff ff ff ff\neb 16\n48 8b 44 24 10\n48 89 18\n85 ed\n75 0a\n48 8b 44 24 20\n4c 89 28\n31 ed\n48 8b 7c 24 30\ne8 da ee ff ff\n89 e8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p621
S'.text:0000000000402490\n.text:0000000000402491\n.text:0000000000402493\n.text:0000000000402495\n.text:0000000000402497\n.text:0000000000402499\n.text:000000000040249a\n.text:000000000040249e\n.text:00000000004024a2\n.text:00000000004024a7\n.text:00000000004024ac\n.text:00000000004024b5\n.text:00000000004024ba\n.text:00000000004024bf\n.text:00000000004024c4\n.text:00000000004024c9\n.text:00000000004024cc\n.text:00000000004024d1\n.text:00000000004024d4\n.text:00000000004024d7\n.text:00000000004024dd\n.text:00000000004024e2\n.text:00000000004024e9\n.text:00000000004024eb\n.text:00000000004024ee\n.text:00000000004024f0\n.text:00000000004024f5\n.text:00000000004024fb\n.text:0000000000402500\n.text:0000000000402502\n.text:0000000000402504\n.text:0000000000402509\n.text:000000000040250e\n.text:0000000000402513\n.text:0000000000402516\n.text:0000000000402519\n.text:000000000040251e\n.text:0000000000402521\n.text:0000000000402523\n.text:0000000000402525\n.text:0000000000402527\n.text:000000000040252a\n.text:000000000040252f\n.text:0000000000402536\n.text:0000000000402540\n.text:0000000000402542\n.text:0000000000402547\n.text:000000000040254d\n.text:0000000000402550\n.text:0000000000402553\n.text:0000000000402558\n.text:000000000040255a\n.text:000000000040255c\n.text:0000000000402561\n.text:0000000000402565\n.text:0000000000402567\n.text:000000000040256c\n.text:000000000040256f\n.text:0000000000402572\n.text:0000000000402580\n.text:0000000000402585\n.text:0000000000402588\n.text:000000000040258c\n.text:0000000000402591\n.text:0000000000402594\n.text:0000000000402599\n.text:000000000040259b\n.text:000000000040259f\n.text:00000000004025a1\n.text:00000000004025a4\n.text:00000000004025a9\n.text:00000000004025ac\n.text:00000000004025ae\n.text:00000000004025b0\n.text:00000000004025b3\n.text:00000000004025b8\n.text:00000000004025bb\n.text:00000000004025c1\n.text:00000000004025c4\n.text:00000000004025c9\n.text:00000000004025ce\n.text:00000000004025d0\n.text:00000000004025d5\n.text:00000000004025d8\n.text:00000000004025dd\n.text:00000000004025e2\n.text:00000000004025e5\n.text:00000000004025e9\n.text:00000000004025ed\n.text:00000000004025f0\n.text:00000000004025f2\n.text:00000000004025f7\n.text:00000000004025fc\n.text:00000000004025ff\n.text:0000000000402602\n.text:0000000000402608\n.text:000000000040260a\n.text:000000000040260d\n.text:000000000040260f\n.text:0000000000402616\n.text:0000000000402619\n.text:000000000040261b\n.text:000000000040261e\n.text:0000000000402621\n.text:0000000000402624\n.text:0000000000402626\n.text:000000000040262b\n.text:000000000040262e\n.text:0000000000402630\n.text:0000000000402634\n.text:0000000000402636\n.text:0000000000402638\n.text:000000000040263a\n.text:000000000040263f\n.text:0000000000402644\n.text:0000000000402649\n.text:000000000040264c\n.text:0000000000402651\n.text:0000000000402656\n.text:0000000000402659\n.text:000000000040265b\n.text:000000000040265d\n.text:000000000040265f\n.text:0000000000402662\n.text:0000000000402667\n.text:000000000040266c\n.text:000000000040266f\n.text:0000000000402674\n.text:0000000000402676\n.text:000000000040267b\n.text:000000000040267e\n.text:0000000000402680\n.text:0000000000402682\n.text:0000000000402687\n.text:000000000040268a\n.text:000000000040268c\n.text:0000000000402691\n.text:0000000000402696\n.text:0000000000402698\n.text:000000000040269c\n.text:000000000040269d\n.text:000000000040269f\n.text:00000000004026a1\n.text:00000000004026a3\n.text:00000000004026a5\n.text:00000000004026a6\n'
p622
tp623
sS'quotearg_n_custom_mem'
p624
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p625
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p626
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x00609360]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x00609350]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609340]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609330]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00402920\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004037b0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p627
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 87 57 20 00\n48 89 44 24 30\n0f 10 05 6b 57 20 00\n0f 29 44 24 20\n0f 10 05 4f 57 20 00\n0f 29 44 24 10\n0f 10 05 33 57 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p628
S'.text:0000000000403bc0\n.text:0000000000403bc1\n.text:0000000000403bc3\n.text:0000000000403bc5\n.text:0000000000403bc6\n.text:0000000000403bca\n.text:0000000000403bcd\n.text:0000000000403bd0\n.text:0000000000403bd2\n.text:0000000000403bd9\n.text:0000000000403bde\n.text:0000000000403be5\n.text:0000000000403bea\n.text:0000000000403bf1\n.text:0000000000403bf6\n.text:0000000000403bfd\n.text:0000000000403c01\n.text:0000000000403c04\n.text:0000000000403c07\n.text:0000000000403c0c\n.text:0000000000403c0e\n.text:0000000000403c11\n.text:0000000000403c14\n.text:0000000000403c17\n.text:0000000000403c1c\n.text:0000000000403c20\n.text:0000000000403c21\n.text:0000000000403c23\n.text:0000000000403c25\n.text:0000000000403c26\n'
p629
tp630
sS'_init'
p631
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p632
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00608ff8;\u000a  if (PTR___gmon_start___00608ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00608ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p633
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00608ff8]\nTEST RAX,RAX\nJZ 0x00401532\nCALL RAX\nADD RSP,0x8\nRET\n'
p634
S'48 83 ec 08\n48 8b 05 cd 7a 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p635
S'.init:0000000000401520\n.init:0000000000401524\n.init:000000000040152b\n.init:000000000040152e\n.init:0000000000401530\n.init:0000000000401532\n.init:0000000000401536\n'
p636
tp637
sS'__freading'
p638
(S'\n__stdcall __freading()\n'
p639
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00609188)();\u000a  return;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x00609188]\n'
p641
S'ff 25 52 79 20 00\n'
p642
S'.plt:0000000000401830\n'
p643
tp644
sS'set_quoting_flags'
p645
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p646
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p647
S'TEST RDI,RDI\nMOV ECX,0x609330\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p648
S'48 85 ff\nb9 30 93 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p649
S'.text:0000000000402900\n.text:0000000000402903\n.text:0000000000402908\n.text:000000000040290c\n.text:000000000040290f\n.text:0000000000402912\n'
p650
tp651
sS'fputs_unlocked'
p652
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p653
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_00609118)();\u000a  return iVar1;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x00609118]\n'
p655
S'ff 25 c2 79 20 00\n'
p656
S'.plt:0000000000401750\n'
p657
tp658
sS'main'
p659
(S'\n__stdcall main(char * * argv)\n'
p660
V\u000aint main(char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  __gid_t __gid;\u000a  __uid_t __uid;\u000a  char **ppcVar5;\u000a  __gid_t *p_Var6;\u000a  _Bool _Var7;\u000a  int iVar8;\u000a  int iVar9;\u000a  size_t sVar10;\u000a  uint *puVar11;\u000a  undefined8 uVar12;\u000a  char *dir;\u000a  passwd *ppVar13;\u000a  char *spec;\u000a  char cVar14;\u000a  char **in_RSI;\u000a  char *groups;\u000a  __gid_t *__groups;\u000a  uint local_68;\u000a  __uid_t local_64;\u000a  size_t local_60;\u000a  undefined8 local_58;\u000a  char *local_50;\u000a  char **local_48;\u000a  __gid_t *local_40;\u000a  __gid_t *local_38;\u000a  \u000a  iVar9 = (int)((ulong)argv & 0xffffffff);\u000a  local_64 = 0xffffffff;\u000a  local_68 = 0xffffffff;\u000a  local_38 = (__gid_t *)0x0;\u000a  local_60 = 0;\u000a  local_48 = in_RSI;\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,"");\u000a  bindtextdomain(0x4059be,"/usr/local/share/locale");\u000a  textdomain(0x4059be);\u000a  initialize_exit_failure();\u000a  atexit(close_stdout);\u000a  uVar12 = 0;\u000a  spec = (char *)0;\u000a  dir = (char *)0x0;\u000a  while( true ) {\u000a    groups = dir;\u000a    cVar14 = (char)uVar12;\u000a    iVar8 = getopt_long((ulong)argv & 0xffffffff,local_48,&DAT_004059b8,long_opts);\u000a    pcVar4 = optarg;\u000a    if (iVar8 < 0x100) break;\u000a    dir = optarg;\u000a    if (iVar8 != 0x100) {\u000a      if (iVar8 == 0x102) {\u000a        uVar12 = 1;\u000a        dir = groups;\u000a      }\u000a      else {\u000a        if (iVar8 != 0x101) goto LAB_0040240a;\u000a        sVar10 = strlen(optarg);\u000a        spec = pcVar4;\u000a        dir = groups;\u000a        if ((sVar10 != 0) && (spec = pcVar4, dir = groups, pcVar4[sVar10 - 1] == ':')) {\u000a          pcVar4[sVar10 - 1] = 0;\u000a          spec = pcVar4;\u000a          dir = groups;\u000a        }\u000a      }\u000a    }\u000a  }\u000a  if (iVar8 != -1) {\u000a    if (iVar8 == -0x83) {\u000aLAB_00402371:\u000a      version_etc(stdout,"chroot","GNU coreutils",Version,"Roland McGrath",0);\u000a                    /* WARNING: Subroutine does not return */\u000a      exit(0);\u000a    }\u000a    if (iVar8 == -0x82) {\u000a      usage(0);\u000a      goto LAB_00402371;\u000a    }\u000a    goto LAB_0040240a;\u000a  }\u000a  if (optind < iVar9) {\u000a    dir = local_48[(long)optind];\u000a    _Var7 = is_root(dir);\u000a    if ((cVar14 == 0) || (_Var7 != false)) {\u000a      if (_Var7 == false) {\u000a        if (spec != (char *)0x0) {\u000a          parse_user_spec(spec,&local_64,&local_68,(char **)0x0,(char **)0x0);\u000a        }\u000a        _Var7 = uid_unset();\u000a        if (_Var7 == false) {\u000a          if ((groups == (char *)0x0) || (_Var7 = gid_unset(), _Var7 != false)) {\u000a            local_58 = uVar12;\u000a            ppVar13 = getpwuid(local_64);\u000a            if (ppVar13 == (passwd *)0x0) {\u000a              local_50 = (char *)0x0;\u000a            }\u000a            else {\u000a              _Var7 = gid_unset();\u000a              if (_Var7 != false) {\u000a                local_68 = ppVar13->pw_gid;\u000a              }\u000a              local_50 = ppVar13->pw_name;\u000a            }\u000a            cVar14 = (char)local_58;\u000a            uVar1 = local_68;\u000a            uVar12 = local_58;\u000a            uVar3 = local_58;\u000a            goto joined_r0x00401f0d;\u000a          }\u000a          local_50 = (char *)0x0;\u000a          if (*groups == 0) goto LAB_00401f65;\u000aLAB_00401f16:\u000a          parse_additional_groups(groups,&local_38,&local_60);\u000a        }\u000a        else {\u000a          local_50 = (char *)0x0;\u000a          uVar1 = local_68;\u000a          uVar3 = local_58;\u000ajoined_r0x00401f0d:\u000a          local_58 = uVar12;\u000a          if (groups == (char *)0x0) {\u000a            local_68 = uVar1;\u000a            _Var7 = gid_unset();\u000a            if (((local_50 != (char *)0x0) && (_Var7 != true)) &&\u000a               (iVar8 = xgetgroups(local_50,(gid_t **)(ulong)uVar1), 0 < iVar8)) {\u000a              local_60 = SEXT48(iVar8);\u000a            }\u000a            cVar14 = (char)local_58;\u000a          }\u000a          else {\u000a            local_68 = uVar1;\u000a            local_58 = uVar3;\u000a            if (*groups != 0) goto LAB_00401f16;\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        local_50 = (char *)0x0;\u000a      }\u000aLAB_00401f65:\u000a      iVar8 = chroot(dir);\u000a      if (iVar8 != 0) {\u000a        puVar11 = (uint *)__errno_location();\u000a        uVar1 = *puVar11;\u000a        uVar12 = dcgettext(0,"cannot change root directory to %s",5);\u000a        quotearg_style((char *)0x4);\u000a        error(0x7d,(ulong)uVar1,uVar12);\u000a      }\u000a      if ((cVar14 == 0) && (iVar8 = chdir("/"), iVar8 != 0)) {\u000a        puVar11 = (uint *)__errno_location();\u000a        uVar1 = *puVar11;\u000a        uVar12 = dcgettext(0,"cannot chdir to root directory",5);\u000a        error(0x7d,(ulong)uVar1,uVar12);\u000a      }\u000a      if ((int)((long)optind + 1) == iVar9) {\u000a        dir = getenv("SHELL");\u000a        if (dir == (char *)0x0) {\u000a          dir = bad_cast("/bin/sh");\u000a        }\u000a        ppcVar5 = local_48;\u000a        *local_48 = dir;\u000a        dir = bad_cast("-i");\u000a        ppcVar5[1] = dir;\u000a        ppcVar5[2] = (char *)0x0;\u000a      }\u000a      else {\u000a        local_48 = local_48 + (long)optind + 1;\u000a      }\u000a      if (((spec != (char *)0x0) &&\u000a          (spec = parse_user_spec(spec,&local_64,&local_68,(char **)0x0,(char **)0x0),\u000a          spec != (char *)0x0)) &&\u000a         ((_Var7 = uid_unset(), _Var7 != false && (_Var7 = gid_unset(), _Var7 != false)))) {\u000a        puVar11 = (uint *)__errno_location();\u000a        error(0x7d,(ulong)*puVar11,0x405e15,spec);\u000a      }\u000a      _Var7 = uid_unset();\u000a      if (_Var7 == false) {\u000a        if ((groups == (char *)0x0) || (_Var7 = gid_unset(), _Var7 != false)) {\u000a          ppVar13 = getpwuid(local_64);\u000a          _Var7 = gid_unset();\u000a          if (ppVar13 == (passwd *)0x0) {\u000a            if (_Var7 != false) {\u000a              puVar11 = (uint *)__errno_location();\u000a              uVar1 = *puVar11;\u000a              uVar12 = dcgettext(0,"no group specified for unknown uid: %d",5);\u000a              error(0x7d,(ulong)uVar1,uVar12,(ulong)local_64);\u000a            }\u000a          }\u000a          else {\u000a            if (_Var7 != false) {\u000a              local_68 = ppVar13->pw_gid;\u000a            }\u000a            local_50 = ppVar13->pw_name;\u000a          }\u000a          goto LAB_00402133;\u000a        }\u000a      }\u000a      else {\u000aLAB_00402133:\u000a        __groups = local_38;\u000a        uVar1 = local_68;\u000a        local_40 = (__gid_t *)0x0;\u000a        if (groups == (char *)0x0) {\u000a          _Var7 = gid_unset();\u000a          bVar2 = false;\u000a          if ((local_50 != (char *)0x0) && (bVar2 = false, _Var7 != true)) {\u000a            iVar9 = xgetgroups(local_50,(gid_t **)(ulong)uVar1);\u000a            if (iVar9 < 1) {\u000a              if (local_60 == 0) {\u000a                puVar11 = (uint *)__errno_location();\u000a                uVar1 = *puVar11;\u000a                bVar2 = false;\u000a                uVar12 = dcgettext(0,"failed to get supplemental groups",5);\u000a                error(0x7d,(ulong)uVar1,uVar12,uVar12);\u000a                goto LAB_004021d3;\u000a              }\u000a            }\u000a            else {\u000a              local_60 = SEXT48(iVar9);\u000a              __groups = local_40;\u000a            }\u000a            bVar2 = false;\u000a          }\u000a          goto LAB_004021d3;\u000a        }\u000a      }\u000a      p_Var6 = local_38;\u000a      local_40 = (__gid_t *)0x0;\u000a      bVar2 = true;\u000a      __groups = p_Var6;\u000a      if (((*groups != 0) &&\u000a          (iVar9 = parse_additional_groups(groups,&local_40,&local_60), __groups = local_40,\u000a          iVar9 != 0)) && (__groups = p_Var6, local_60 == 0)) {\u000a        return 0x7d;\u000a      }\u000aLAB_004021d3:\u000a      _Var7 = uid_unset();\u000a      if (((bVar2) || (_Var7 != true)) && (iVar9 = setgroups(local_60,__groups), iVar9 != 0)) {\u000a        puVar11 = (uint *)__errno_location();\u000a        uVar1 = *puVar11;\u000a        uVar12 = dcgettext(0,"failed to set supplemental groups",5);\u000a        error(0x7d,(ulong)uVar1,uVar12,uVar12);\u000a      }\u000a      free(local_40);\u000a      free(local_38);\u000a      __gid = local_68;\u000a      _Var7 = gid_unset();\u000a      if ((_Var7 == false) && (iVar9 = setgid(__gid), iVar9 != 0)) {\u000a        puVar11 = (uint *)__errno_location();\u000a        uVar1 = *puVar11;\u000a        uVar12 = dcgettext(0,"failed to set group-ID",5);\u000a        error(0x7d,(ulong)uVar1,uVar12,uVar12);\u000a      }\u000a      __uid = local_64;\u000a      _Var7 = uid_unset();\u000a      if ((_Var7 == false) && (iVar9 = setuid(__uid), iVar9 != 0)) {\u000a        puVar11 = (uint *)__errno_location();\u000a        uVar1 = *puVar11;\u000a        uVar12 = dcgettext(0,"failed to set user-ID",5);\u000a        error(0x7d,(ulong)uVar1,uVar12,uVar12);\u000a      }\u000a      ppcVar5 = local_48;\u000a      execvp(*local_48,local_48);\u000a      puVar11 = (uint *)__errno_location();\u000a      uVar1 = *puVar11;\u000a      uVar12 = dcgettext(0,"failed to run command %s",5);\u000a      spec = quote(*ppcVar5);\u000a      error(0,(ulong)uVar1,uVar12,spec);\u000a      return (int)((uint)(uVar1 == 2) | 0x7e);\u000a    }\u000a  }\u000a  else {\u000a    uVar12 = dcgettext(0,"missing operand",5);\u000a    error(0,0,uVar12,uVar12);\u000a    usage(0x7d);\u000a  }\u000a  uVar12 = dcgettext(0,"option --skip-chdir only permitted if NEWROOT is old %s",5);\u000a  spec = quotearg_style((char *)0x4);\u000a  error(0,0,uVar12,spec);\u000a  usage(0x7d);\u000aLAB_0040240a:\u000a  iVar9 = usage(0x7d);\u000a  exit_failure = 0x7d;\u000a  return iVar9;\u000a}\u000a\u000a
p661
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV EBP,EDI\nMOV dword ptr [RSP + 0x4],0xffffffff\nMOV dword ptr [RSP],0xffffffff\nMOV qword ptr [RSP + 0x30],0x0\nMOV qword ptr [RSP + 0x8],0x0\nMOV qword ptr [RSP + 0x20],RSI\nMOV RDI,qword ptr [RSI]\nCALL 0x004027b0\nMOV EDI,0x6\nMOV ESI,0x405825\nCALL 0x00401860\nMOV EDI,0x4059be\nMOV ESI,0x4059a0\nCALL 0x00401630\nMOV EDI,0x4059be\nCALL 0x00401600\nCALL 0x00402420\nMOV EDI,0x4026f0\nCALL 0x00405770\nXOR EBX,EBX\nXOR R13D,R13D\nXOR R12D,R12D\nJMP 0x00401dd0\nMOV BL,0x1\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV EDX,0x4059b8\nMOV ECX,0x405cd0\nXOR R8D,R8D\nMOV EDI,EBP\nMOV RSI,qword ptr [RSP + 0x20]\nCALL 0x00401680\nCMP EAX,0xff\nJLE 0x00401e36\nCMP EAX,0x100\nJZ 0x00401e2d\nCMP EAX,0x102\nJZ 0x00401dbf\nCMP EAX,0x101\nJNZ 0x0040240a\nMOV R12,qword ptr [0x006092d8]\nMOV RDI,R12\nCALL 0x00401660\nTEST RAX,RAX\nJZ 0x00401dd0\nCMP byte ptr [R12 + RAX*0x1 + -0x1],0x3a\nJNZ 0x00401dd0\nMOV byte ptr [R12 + RAX*0x1 + -0x1],0x0\nJMP 0x00401dd0\nMOV R13,qword ptr [0x006092d8]\nJMP 0x00401dd0\nCMP EAX,-0x1\nJNZ 0x00402358\nMOVSXD RAX,dword ptr [0x006092d0]\nCMP EAX,EBP\nJGE 0x004023a0\nMOV RCX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RCX + RAX*0x8]\nMOV RDI,R15\nCALL 0x00402430\nTEST BL,BL\nJZ 0x00401e6b\nTEST AL,AL\nJZ 0x004023cc\nTEST AL,AL\nJZ 0x00401e7b\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nJMP 0x00401f65\nTEST R12,R12\nJZ 0x00401e95\nLEA RSI,[RSP + 0x4]\nMOV RDX,RSP\nXOR ECX,ECX\nXOR R8D,R8D\nMOV RDI,R12\nCALL 0x004040b0\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00402470\nTEST AL,AL\nJZ 0x00401eb0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nTEST R13,R13\nJNZ 0x00401f0f\nJMP 0x00401f2c\nTEST R13,R13\nJZ 0x00401ec1\nMOV EDI,dword ptr [RSP]\nCALL 0x00402480\nTEST AL,AL\nJZ 0x00401eee\nMOV qword ptr [RSP + 0x10],RBX\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00401620\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00401efe\nMOV EDI,dword ptr [RSP]\nCALL 0x00402480\nTEST AL,AL\nJZ 0x00401ee9\nMOV EAX,dword ptr [RBX + 0x14]\nMOV dword ptr [RSP],EAX\nMOV RAX,qword ptr [RBX]\nJMP 0x00401f00\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nCMP byte ptr [R13],0x0\nJNZ 0x00401f16\nJMP 0x00401f65\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x18],RAX\nMOV RBX,qword ptr [RSP + 0x10]\nTEST R13,R13\nJZ 0x00401f2c\nCMP byte ptr [R13],0x0\nJZ 0x00401f65\nLEA RSI,[RSP + 0x30]\nLEA RDX,[RSP + 0x8]\nXOR ECX,ECX\nMOV RDI,R13\nCALL 0x00402490\nJMP 0x00401f65\nMOV qword ptr [RSP + 0x10],RBX\nMOV EBX,dword ptr [RSP]\nMOV EDI,EBX\nCALL 0x00402480\nMOV RDI,qword ptr [RSP + 0x18]\nTEST RDI,RDI\nJZ 0x00401f60\nXOR AL,0x1\nJZ 0x00401f60\nLEA RDX,[RSP + 0x30]\nMOV ESI,EBX\nCALL 0x00404b00\nTEST EAX,EAX\nJLE 0x00401f60\nCDQE\nMOV qword ptr [RSP + 0x8],RAX\nMOV RBX,qword ptr [RSP + 0x10]\nMOV RDI,R15\nCALL 0x004015d0\nTEST EAX,EAX\nJZ 0x00401fb9\nCALL 0x00401590\nMOV R14D,EBP\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x405a1f\nMOV EDX,0x5\nCALL 0x00401640\nMOV RSI,R15\nMOV R15,RBX\nMOV RBX,RAX\nMOV EDI,0x4\nCALL 0x00403a80\nMOV RCX,RAX\nMOV EDI,0x7d\nXOR EAX,EAX\nMOV ESI,EBP\nMOV EBP,R14D\nMOV RDX,RBX\nMOV RBX,R15\nCALL 0x00401880\nTEST BL,BL\nJNZ 0x00401ff7\nMOV EDI,0x405e56\nCALL 0x00401670\nTEST EAX,EAX\nJZ 0x00401ff7\nCALL 0x00401590\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x405a42\nMOV EDX,0x5\nCALL 0x00401640\nMOV RCX,RAX\nMOV EDI,0x7d\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401880\nMOVSXD RAX,dword ptr [0x006092d0]\nINC RAX\nCMP EAX,EBP\nJNZ 0x00402043\nMOV EDI,0x405a61\nCALL 0x00401560\nTEST RAX,RAX\nJNZ 0x0040201e\nMOV EDI,0x405a67\nCALL 0x004026b0\nMOV RBX,qword ptr [RSP + 0x20]\nMOV qword ptr [RBX],RAX\nMOV EDI,0x405a6f\nCALL 0x004026b0\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [RBX + 0x10],0x0\nTEST R12,R12\nJNZ 0x00402056\nJMP 0x004020a7\nMOV RCX,qword ptr [RSP + 0x20]\nLEA RCX,[RCX + RAX*0x8]\nMOV qword ptr [RSP + 0x20],RCX\nTEST R12,R12\nJZ 0x004020a7\nLEA RSI,[RSP + 0x4]\nMOV RDX,RSP\nXOR ECX,ECX\nXOR R8D,R8D\nMOV RDI,R12\nCALL 0x004040b0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004020a7\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00402470\nTEST AL,AL\nJZ 0x004020a7\nMOV EDI,dword ptr [RSP]\nCALL 0x00402480\nTEST AL,AL\nJZ 0x004020a7\nCALL 0x00401590\nMOV ESI,dword ptr [RAX]\nMOV EDI,0x7d\nMOV EDX,0x405e15\nXOR EAX,EAX\nMOV RCX,RBX\nCALL 0x00401880\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00402470\nTEST AL,AL\nJNZ 0x00402133\nTEST R13,R13\nJZ 0x004020c5\nMOV EDI,dword ptr [RSP]\nCALL 0x00402480\nTEST AL,AL\nJZ 0x004020f2\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00401620\nMOV RBX,RAX\nMOV EDI,dword ptr [RSP]\nCALL 0x00402480\nTEST RBX,RBX\nJZ 0x00402102\nTEST AL,AL\nJZ 0x004020e8\nMOV EAX,dword ptr [RBX + 0x14]\nMOV dword ptr [RSP],EAX\nMOV RAX,qword ptr [RBX]\nMOV qword ptr [RSP + 0x18],RAX\nJMP 0x00402133\nMOV R14,qword ptr [RSP + 0x30]\nMOV qword ptr [RSP + 0x28],0x0\nJMP 0x00402146\nTEST AL,AL\nJZ 0x00402133\nCALL 0x00401590\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x405a72\nMOV EDX,0x5\nCALL 0x00401640\nMOV RDX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV EDI,0x7d\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x00401880\nMOV R14,qword ptr [RSP + 0x30]\nMOV qword ptr [RSP + 0x28],0x0\nTEST R13,R13\nJZ 0x00402186\nMOV BL,0x1\nCMP byte ptr [R13],0x0\nJZ 0x004021d3\nXOR ECX,ECX\nCMP qword ptr [RSP + 0x8],0x0\nSETZ CL\nLEA RSI,[RSP + 0x28]\nLEA RDX,[RSP + 0x8]\nMOV RDI,R13\nCALL 0x00402490\nTEST EAX,EAX\nJZ 0x004021be\nCMP qword ptr [RSP + 0x8],0x0\nJNZ 0x004021d3\nMOV EBX,0x7d\nJMP 0x00402314\nMOV EBP,dword ptr [RSP]\nMOV EDI,EBP\nCALL 0x00402480\nXOR EBX,EBX\nMOV RDI,qword ptr [RSP + 0x18]\nTEST RDI,RDI\nJZ 0x004021d3\nXOR AL,0x1\nJZ 0x004021d3\nLEA RDX,[RSP + 0x28]\nMOV ESI,EBP\nCALL 0x00404b00\nTEST EAX,EAX\nJLE 0x004021c5\nCDQE\nMOV qword ptr [RSP + 0x8],RAX\nMOV R14,qword ptr [RSP + 0x28]\nJMP 0x004021d1\nMOV R14,qword ptr [RSP + 0x28]\nJMP 0x004021d3\nCMP qword ptr [RSP + 0x8],0x0\nJZ 0x00402325\nXOR EBX,EBX\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00402470\nTEST BL,BL\nJNZ 0x004021e4\nXOR AL,0x1\nJZ 0x00402221\nMOV RDI,qword ptr [RSP + 0x8]\nMOV RSI,R14\nCALL 0x00401730\nTEST EAX,EAX\nJZ 0x00402221\nCALL 0x00401590\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x405abb\nMOV EDX,0x5\nCALL 0x00401640\nMOV RCX,RAX\nMOV EDI,0x7d\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401880\nMOV RDI,qword ptr [RSP + 0x28]\nCALL 0x00401570\nMOV RDI,qword ptr [RSP + 0x30]\nCALL 0x00401570\nMOV EBX,dword ptr [RSP]\nMOV EDI,EBX\nCALL 0x00402480\nTEST AL,AL\nJNZ 0x0040227a\nMOV EDI,EBX\nCALL 0x00401890\nTEST EAX,EAX\nJZ 0x0040227a\nCALL 0x00401590\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x405add\nMOV EDX,0x5\nCALL 0x00401640\nMOV RCX,RAX\nMOV EDI,0x7d\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401880\nMOV EBX,dword ptr [RSP + 0x4]\nMOV EDI,EBX\nCALL 0x00402470\nTEST AL,AL\nJNZ 0x004022c0\nMOV EDI,EBX\nCALL 0x00401940\nTEST EAX,EAX\nJZ 0x004022c0\nCALL 0x00401590\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x405af4\nMOV EDX,0x5\nCALL 0x00401640\nMOV RCX,RAX\nMOV EDI,0x7d\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401880\nMOV RBP,qword ptr [RSP + 0x20]\nMOV RDI,qword ptr [RBP]\nMOV RSI,RBP\nCALL 0x004018f0\nCALL 0x00401590\nMOV R15D,dword ptr [RAX]\nXOR EBX,EBX\nCMP R15D,0x2\nSETZ BL\nOR EBX,0x7e\nXOR EDI,EDI\nMOV ESI,0x405b0a\nMOV EDX,0x5\nCALL 0x00401640\nMOV R14,RAX\nMOV RDI,qword ptr [RBP]\nCALL 0x00403ca0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,R14\nCALL 0x00401880\nMOV EAX,EBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401590\nMOV EBP,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x405a99\nMOV EDX,0x5\nCALL 0x00401640\nMOV RCX,RAX\nMOV EDI,0x7d\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00401880\nJMP 0x004021d3\nCMP EAX,0xffffff7d\nJZ 0x00402371\nCMP EAX,0xffffff7e\nJNZ 0x0040240a\nXOR EDI,EDI\nCALL 0x00401a80\nMOV RDI,qword ptr [0x006092c8]\nMOV RCX,qword ptr [0x00609240]\nMOV ESI,0x405999\nMOV EDX,0x4059ba\nMOV R8D,0x4059c8\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x00404810\nXOR EDI,EDI\nCALL 0x00401910\nXOR EDI,EDI\nMOV ESI,0x4059d7\nMOV EDX,0x5\nCALL 0x00401640\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401880\nMOV EDI,0x7d\nCALL 0x00401a80\nXOR EDI,EDI\nMOV ESI,0x4059e7\nMOV EDX,0x5\nCALL 0x00401640\nMOV RBX,RAX\nMOV EDI,0x4\nMOV ESI,0x405e56\nCALL 0x00403a80\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401880\nMOV EDI,0x7d\nCALL 0x00401a80\nMOV EDI,0x7d\nCALL 0x00401a80\nNOP word ptr CS:[RAX + RAX*0x1]\n'
p662
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n89 fd\nc7 44 24 04 ff ff ff ff\nc7 04 24 ff ff ff ff\n48 c7 44 24 30 00 00 00 00\n48 c7 44 24 08 00 00 00 00\n48 89 74 24 20\n48 8b 3e\ne8 32 0a 00 00\nbf 06 00 00 00\nbe 25 58 40 00\ne8 d3 fa ff ff\nbf be 59 40 00\nbe a0 59 40 00\ne8 94 f8 ff ff\nbf be 59 40 00\ne8 5a f8 ff ff\ne8 75 06 00 00\nbf f0 26 40 00\ne8 bb 39 00 00\n31 db\n45 31 ed\n45 31 e4\neb 11\nb3 01\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nba b8 59 40 00\nb9 d0 5c 40 00\n45 31 c0\n89 ef\n48 8b 74 24 20\ne8 97 f8 ff ff\n3d ff 00 00 00\n7e 46\n3d 00 01 00 00\n74 36\n3d 02 01 00 00\n74 c1\n3d 01 01 00 00\n0f 85 01 06 00 00\n4c 8b 25 c8 74 20 00\n4c 89 e7\ne8 48 f8 ff ff\n48 85 c0\n74 b3\n41 80 7c 04 ff 3a\n75 ab\n41 c6 44 04 ff 00\neb a3\n4c 8b 2d a4 74 20 00\neb 9a\n83 f8 ff\n0f 85 19 05 00 00\n48 63 05 8a 74 20 00\n39 e8\n0f 8d 52 05 00 00\n48 8b 4c 24 20\n4c 8b 3c c1\n4c 89 ff\ne8 d1 05 00 00\n84 db\n74 08\n84 c0\n0f 84 61 05 00 00\n84 c0\n74 0c\n31 c0\n48 89 44 24 18\ne9 ea 00 00 00\n4d 85 e4\n74 15\n48 8d 74 24 04\n48 89 e2\n31 c9\n45 31 c0\n4c 89 e7\ne8 1b 22 00 00\n8b 7c 24 04\ne8 d2 05 00 00\n84 c0\n74 0e\n31 c0\n48 89 44 24 18\n4d 85 ed\n75 61\neb 7c\n4d 85 ed\n74 0c\n8b 3c 24\ne8 c3 05 00 00\n84 c0\n74 2d\n48 89 5c 24 10\n8b 7c 24 04\ne8 51 f7 ff ff\n48 89 c3\n48 85 db\n74 27\n8b 3c 24\ne8 a1 05 00 00\n84 c0\n74 06\n8b 43 14\n89 04 24\n48 8b 03\neb 12\n31 c0\n48 89 44 24 18\n41 80 7d 00 00\n75 1a\neb 67\n31 c0\n48 89 44 24 18\n48 8b 5c 24 10\n4d 85 ed\n74 1d\n41 80 7d 00 00\n74 4f\n48 8d 74 24 30\n48 8d 54 24 08\n31 c9\n4c 89 ef\ne8 66 05 00 00\neb 39\n48 89 5c 24 10\n8b 1c 24\n89 df\ne8 45 05 00 00\n48 8b 7c 24 18\n48 85 ff\n74 1b\n34 01\n74 17\n48 8d 54 24 30\n89 de\ne8 ab 2b 00 00\n85 c0\n7e 07\n48 98\n48 89 44 24 08\n48 8b 5c 24 10\n4c 89 ff\ne8 63 f6 ff ff\n85 c0\n74 48\ne8 1a f6 ff ff\n41 89 ee\n8b 28\n31 ff\nbe 1f 5a 40 00\nba 05 00 00 00\ne8 b4 f6 ff ff\n4c 89 fe\n49 89 df\n48 89 c3\nbf 04 00 00 00\ne8 e1 1a 00 00\n48 89 c1\nbf 7d 00 00 00\n31 c0\n89 ee\n44 89 f5\n48 89 da\n4c 89 fb\ne8 c7 f8 ff ff\n84 db\n75 3a\nbf 56 5e 40 00\ne8 a9 f6 ff ff\n85 c0\n74 2c\ne8 c0 f5 ff ff\n8b 18\n31 ff\nbe 42 5a 40 00\nba 05 00 00 00\ne8 5d f6 ff ff\n48 89 c1\nbf 7d 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 89 f8 ff ff\n48 63 05 d2 72 20 00\n48 ff c0\n39 e8\n75 3e\nbf 61 5a 40 00\ne8 51 f5 ff ff\n48 85 c0\n75 0a\nbf 67 5a 40 00\ne8 92 06 00 00\n48 8b 5c 24 20\n48 89 03\nbf 6f 5a 40 00\ne8 80 06 00 00\n48 89 43 08\n48 c7 43 10 00 00 00 00\n4d 85 e4\n75 15\neb 64\n48 8b 4c 24 20\n48 8d 0c c1\n48 89 4c 24 20\n4d 85 e4\n74 51\n48 8d 74 24 04\n48 89 e2\n31 c9\n45 31 c0\n4c 89 e7\ne8 45 20 00 00\n48 89 c3\n48 85 db\n74 34\n8b 7c 24 04\ne8 f4 03 00 00\n84 c0\n74 27\n8b 3c 24\ne8 f8 03 00 00\n84 c0\n74 1b\ne8 ff f4 ff ff\n8b 30\nbf 7d 00 00 00\nba 15 5e 40 00\n31 c0\n48 89 d9\ne8 d9 f7 ff ff\n8b 7c 24 04\ne8 c0 03 00 00\n84 c0\n75 7f\n4d 85 ed\n74 0c\n8b 3c 24\ne8 bf 03 00 00\n84 c0\n74 2d\n8b 7c 24 04\ne8 52 f5 ff ff\n48 89 c3\n8b 3c 24\ne8 a7 03 00 00\n48 85 db\n74 24\n84 c0\n74 06\n8b 43 14\n89 04 24\n48 8b 03\n48 89 44 24 18\neb 41\n4c 8b 74 24 30\n48 c7 44 24 28 00 00 00 00\neb 44\n84 c0\n74 2d\ne8 85 f4 ff ff\n8b 18\n31 ff\nbe 72 5a 40 00\nba 05 00 00 00\ne8 22 f5 ff ff\n48 89 c2\n8b 4c 24 04\nbf 7d 00 00 00\n31 c0\n89 de\ne8 4d f7 ff ff\n4c 8b 74 24 30\n48 c7 44 24 28 00 00 00 00\n4d 85 ed\n74 40\nb3 01\n41 80 7d 00 00\n0f 84 80 00 00 00\n31 c9\n48 83 7c 24 08 00\n0f 94 c1\n48 8d 74 24 28\n48 8d 54 24 08\n4c 89 ef\ne8 20 03 00 00\n85 c0\n74 4a\n48 83 7c 24 08 00\n75 57\nbb 7d 00 00 00\ne9 8e 01 00 00\n8b 2c 24\n89 ef\ne8 f0 02 00 00\n31 db\n48 8b 7c 24 18\n48 85 ff\n74 37\n34 01\n74 33\n48 8d 54 24 28\n89 ee\ne8 54 29 00 00\n85 c0\n7e 15\n48 98\n48 89 44 24 08\n4c 8b 74 24 28\neb 13\n4c 8b 74 24 28\neb 0e\n48 83 7c 24 08 00\n0f 84 54 01 00 00\n31 db\n8b 7c 24 04\ne8 94 02 00 00\n84 db\n75 04\n34 01\n74 3d\n48 8b 7c 24 08\n4c 89 f6\ne8 3f f5 ff ff\n85 c0\n74 2c\ne8 96 f3 ff ff\n8b 18\n31 ff\nbe bb 5a 40 00\nba 05 00 00 00\ne8 33 f4 ff ff\n48 89 c1\nbf 7d 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 5f f6 ff ff\n48 8b 7c 24 28\ne8 45 f3 ff ff\n48 8b 7c 24 30\ne8 3b f3 ff ff\n8b 1c 24\n89 df\ne8 41 02 00 00\n84 c0\n75 37\n89 df\ne8 46 f6 ff ff\n85 c0\n74 2c\ne8 3d f3 ff ff\n8b 18\n31 ff\nbe dd 5a 40 00\nba 05 00 00 00\ne8 da f3 ff ff\n48 89 c1\nbf 7d 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 06 f6 ff ff\n8b 5c 24 04\n89 df\ne8 eb 01 00 00\n84 c0\n75 37\n89 df\ne8 b0 f6 ff ff\n85 c0\n74 2c\ne8 f7 f2 ff ff\n8b 18\n31 ff\nbe f4 5a 40 00\nba 05 00 00 00\ne8 94 f3 ff ff\n48 89 c1\nbf 7d 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 c0 f5 ff ff\n48 8b 6c 24 20\n48 8b 7d 00\n48 89 ee\ne8 1f f6 ff ff\ne8 ba f2 ff ff\n44 8b 38\n31 db\n41 83 ff 02\n0f 94 c3\n83 cb 7e\n31 ff\nbe 0a 5b 40 00\nba 05 00 00 00\ne8 4a f3 ff ff\n49 89 c6\n48 8b 7d 00\ne8 9e 19 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n4c 89 f2\ne8 6c f5 ff ff\n89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 66 f2 ff ff\n8b 28\n31 db\n31 ff\nbe 99 5a 40 00\nba 05 00 00 00\ne8 01 f3 ff ff\n48 89 c1\nbf 7d 00 00 00\n31 c0\n89 ee\n48 89 ca\ne8 2d f5 ff ff\ne9 7b fe ff ff\n3d 7d ff ff ff\n74 12\n3d 7e ff ff ff\n0f 85 a0 00 00 00\n31 ff\ne8 0f f7 ff ff\n48 8b 3d 50 6f 20 00\n48 8b 0d c1 6e 20 00\nbe 99 59 40 00\nba ba 59 40 00\n41 b8 c8 59 40 00\n45 31 c9\n31 c0\ne8 77 24 00 00\n31 ff\ne8 70 f5 ff ff\n31 ff\nbe d7 59 40 00\nba 05 00 00 00\ne8 8f f2 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 be f4 ff ff\nbf 7d 00 00 00\ne8 b4 f6 ff ff\n31 ff\nbe e7 59 40 00\nba 05 00 00 00\ne8 63 f2 ff ff\n48 89 c3\nbf 04 00 00 00\nbe 56 5e 40 00\ne8 91 16 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 80 f4 ff ff\nbf 7d 00 00 00\ne8 76 f6 ff ff\nbf 7d 00 00 00\ne8 6c f6 ff ff\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n'
p663
S'.text:0000000000401d40\n.text:0000000000401d41\n.text:0000000000401d43\n.text:0000000000401d45\n.text:0000000000401d47\n.text:0000000000401d49\n.text:0000000000401d4a\n.text:0000000000401d4e\n.text:0000000000401d50\n.text:0000000000401d58\n.text:0000000000401d5f\n.text:0000000000401d68\n.text:0000000000401d71\n.text:0000000000401d76\n.text:0000000000401d79\n.text:0000000000401d7e\n.text:0000000000401d83\n.text:0000000000401d88\n.text:0000000000401d8d\n.text:0000000000401d92\n.text:0000000000401d97\n.text:0000000000401d9c\n.text:0000000000401da1\n.text:0000000000401da6\n.text:0000000000401dab\n.text:0000000000401db0\n.text:0000000000401db5\n.text:0000000000401db7\n.text:0000000000401dba\n.text:0000000000401dbd\n.text:0000000000401dbf\n.text:0000000000401dc1\n.text:0000000000401dd0\n.text:0000000000401dd5\n.text:0000000000401dda\n.text:0000000000401ddd\n.text:0000000000401ddf\n.text:0000000000401de4\n.text:0000000000401de9\n.text:0000000000401dee\n.text:0000000000401df0\n.text:0000000000401df5\n.text:0000000000401df7\n.text:0000000000401dfc\n.text:0000000000401dfe\n.text:0000000000401e03\n.text:0000000000401e09\n.text:0000000000401e10\n.text:0000000000401e13\n.text:0000000000401e18\n.text:0000000000401e1b\n.text:0000000000401e1d\n.text:0000000000401e23\n.text:0000000000401e25\n.text:0000000000401e2b\n.text:0000000000401e2d\n.text:0000000000401e34\n.text:0000000000401e36\n.text:0000000000401e39\n.text:0000000000401e3f\n.text:0000000000401e46\n.text:0000000000401e48\n.text:0000000000401e4e\n.text:0000000000401e53\n.text:0000000000401e57\n.text:0000000000401e5a\n.text:0000000000401e5f\n.text:0000000000401e61\n.text:0000000000401e63\n.text:0000000000401e65\n.text:0000000000401e6b\n.text:0000000000401e6d\n.text:0000000000401e6f\n.text:0000000000401e71\n.text:0000000000401e76\n.text:0000000000401e7b\n.text:0000000000401e7e\n.text:0000000000401e80\n.text:0000000000401e85\n.text:0000000000401e88\n.text:0000000000401e8a\n.text:0000000000401e8d\n.text:0000000000401e90\n.text:0000000000401e95\n.text:0000000000401e99\n.text:0000000000401e9e\n.text:0000000000401ea0\n.text:0000000000401ea2\n.text:0000000000401ea4\n.text:0000000000401ea9\n.text:0000000000401eac\n.text:0000000000401eae\n.text:0000000000401eb0\n.text:0000000000401eb3\n.text:0000000000401eb5\n.text:0000000000401eb8\n.text:0000000000401ebd\n.text:0000000000401ebf\n.text:0000000000401ec1\n.text:0000000000401ec6\n.text:0000000000401eca\n.text:0000000000401ecf\n.text:0000000000401ed2\n.text:0000000000401ed5\n.text:0000000000401ed7\n.text:0000000000401eda\n.text:0000000000401edf\n.text:0000000000401ee1\n.text:0000000000401ee3\n.text:0000000000401ee6\n.text:0000000000401ee9\n.text:0000000000401eec\n.text:0000000000401eee\n.text:0000000000401ef0\n.text:0000000000401ef5\n.text:0000000000401efa\n.text:0000000000401efc\n.text:0000000000401efe\n.text:0000000000401f00\n.text:0000000000401f05\n.text:0000000000401f0a\n.text:0000000000401f0d\n.text:0000000000401f0f\n.text:0000000000401f14\n.text:0000000000401f16\n.text:0000000000401f1b\n.text:0000000000401f20\n.text:0000000000401f22\n.text:0000000000401f25\n.text:0000000000401f2a\n.text:0000000000401f2c\n.text:0000000000401f31\n.text:0000000000401f34\n.text:0000000000401f36\n.text:0000000000401f3b\n.text:0000000000401f40\n.text:0000000000401f43\n.text:0000000000401f45\n.text:0000000000401f47\n.text:0000000000401f49\n.text:0000000000401f4e\n.text:0000000000401f50\n.text:0000000000401f55\n.text:0000000000401f57\n.text:0000000000401f59\n.text:0000000000401f5b\n.text:0000000000401f60\n.text:0000000000401f65\n.text:0000000000401f68\n.text:0000000000401f6d\n.text:0000000000401f6f\n.text:0000000000401f71\n.text:0000000000401f76\n.text:0000000000401f79\n.text:0000000000401f7b\n.text:0000000000401f7d\n.text:0000000000401f82\n.text:0000000000401f87\n.text:0000000000401f8c\n.text:0000000000401f8f\n.text:0000000000401f92\n.text:0000000000401f95\n.text:0000000000401f9a\n.text:0000000000401f9f\n.text:0000000000401fa2\n.text:0000000000401fa7\n.text:0000000000401fa9\n.text:0000000000401fab\n.text:0000000000401fae\n.text:0000000000401fb1\n.text:0000000000401fb4\n.text:0000000000401fb9\n.text:0000000000401fbb\n.text:0000000000401fbd\n.text:0000000000401fc2\n.text:0000000000401fc7\n.text:0000000000401fc9\n.text:0000000000401fcb\n.text:0000000000401fd0\n.text:0000000000401fd2\n.text:0000000000401fd4\n.text:0000000000401fd9\n.text:0000000000401fde\n.text:0000000000401fe3\n.text:0000000000401fe6\n.text:0000000000401feb\n.text:0000000000401fed\n.text:0000000000401fef\n.text:0000000000401ff2\n.text:0000000000401ff7\n.text:0000000000401ffe\n.text:0000000000402001\n.text:0000000000402003\n.text:0000000000402005\n.text:000000000040200a\n.text:000000000040200f\n.text:0000000000402012\n.text:0000000000402014\n.text:0000000000402019\n.text:000000000040201e\n.text:0000000000402023\n.text:0000000000402026\n.text:000000000040202b\n.text:0000000000402030\n.text:0000000000402034\n.text:000000000040203c\n.text:000000000040203f\n.text:0000000000402041\n.text:0000000000402043\n.text:0000000000402048\n.text:000000000040204c\n.text:0000000000402051\n.text:0000000000402054\n.text:0000000000402056\n.text:000000000040205b\n.text:000000000040205e\n.text:0000000000402060\n.text:0000000000402063\n.text:0000000000402066\n.text:000000000040206b\n.text:000000000040206e\n.text:0000000000402071\n.text:0000000000402073\n.text:0000000000402077\n.text:000000000040207c\n.text:000000000040207e\n.text:0000000000402080\n.text:0000000000402083\n.text:0000000000402088\n.text:000000000040208a\n.text:000000000040208c\n.text:0000000000402091\n.text:0000000000402093\n.text:0000000000402098\n.text:000000000040209d\n.text:000000000040209f\n.text:00000000004020a2\n.text:00000000004020a7\n.text:00000000004020ab\n.text:00000000004020b0\n.text:00000000004020b2\n.text:00000000004020b4\n.text:00000000004020b7\n.text:00000000004020b9\n.text:00000000004020bc\n.text:00000000004020c1\n.text:00000000004020c3\n.text:00000000004020c5\n.text:00000000004020c9\n.text:00000000004020ce\n.text:00000000004020d1\n.text:00000000004020d4\n.text:00000000004020d9\n.text:00000000004020dc\n.text:00000000004020de\n.text:00000000004020e0\n.text:00000000004020e2\n.text:00000000004020e5\n.text:00000000004020e8\n.text:00000000004020eb\n.text:00000000004020f0\n.text:00000000004020f2\n.text:00000000004020f7\n.text:0000000000402100\n.text:0000000000402102\n.text:0000000000402104\n.text:0000000000402106\n.text:000000000040210b\n.text:000000000040210d\n.text:000000000040210f\n.text:0000000000402114\n.text:0000000000402119\n.text:000000000040211e\n.text:0000000000402121\n.text:0000000000402125\n.text:000000000040212a\n.text:000000000040212c\n.text:000000000040212e\n.text:0000000000402133\n.text:0000000000402138\n.text:0000000000402141\n.text:0000000000402144\n.text:0000000000402146\n.text:0000000000402148\n.text:000000000040214d\n.text:0000000000402153\n.text:0000000000402155\n.text:000000000040215b\n.text:000000000040215e\n.text:0000000000402163\n.text:0000000000402168\n.text:000000000040216b\n.text:0000000000402170\n.text:0000000000402172\n.text:0000000000402174\n.text:000000000040217a\n.text:000000000040217c\n.text:0000000000402181\n.text:0000000000402186\n.text:0000000000402189\n.text:000000000040218b\n.text:0000000000402190\n.text:0000000000402192\n.text:0000000000402197\n.text:000000000040219a\n.text:000000000040219c\n.text:000000000040219e\n.text:00000000004021a0\n.text:00000000004021a5\n.text:00000000004021a7\n.text:00000000004021ac\n.text:00000000004021ae\n.text:00000000004021b0\n.text:00000000004021b2\n.text:00000000004021b7\n.text:00000000004021bc\n.text:00000000004021be\n.text:00000000004021c3\n.text:00000000004021c5\n.text:00000000004021cb\n.text:00000000004021d1\n.text:00000000004021d3\n.text:00000000004021d7\n.text:00000000004021dc\n.text:00000000004021de\n.text:00000000004021e0\n.text:00000000004021e2\n.text:00000000004021e4\n.text:00000000004021e9\n.text:00000000004021ec\n.text:00000000004021f1\n.text:00000000004021f3\n.text:00000000004021f5\n.text:00000000004021fa\n.text:00000000004021fc\n.text:00000000004021fe\n.text:0000000000402203\n.text:0000000000402208\n.text:000000000040220d\n.text:0000000000402210\n.text:0000000000402215\n.text:0000000000402217\n.text:0000000000402219\n.text:000000000040221c\n.text:0000000000402221\n.text:0000000000402226\n.text:000000000040222b\n.text:0000000000402230\n.text:0000000000402235\n.text:0000000000402238\n.text:000000000040223a\n.text:000000000040223f\n.text:0000000000402241\n.text:0000000000402243\n.text:0000000000402245\n.text:000000000040224a\n.text:000000000040224c\n.text:000000000040224e\n.text:0000000000402253\n.text:0000000000402255\n.text:0000000000402257\n.text:000000000040225c\n.text:0000000000402261\n.text:0000000000402266\n.text:0000000000402269\n.text:000000000040226e\n.text:0000000000402270\n.text:0000000000402272\n.text:0000000000402275\n.text:000000000040227a\n.text:000000000040227e\n.text:0000000000402280\n.text:0000000000402285\n.text:0000000000402287\n.text:0000000000402289\n.text:000000000040228b\n.text:0000000000402290\n.text:0000000000402292\n.text:0000000000402294\n.text:0000000000402299\n.text:000000000040229b\n.text:000000000040229d\n.text:00000000004022a2\n.text:00000000004022a7\n.text:00000000004022ac\n.text:00000000004022af\n.text:00000000004022b4\n.text:00000000004022b6\n.text:00000000004022b8\n.text:00000000004022bb\n.text:00000000004022c0\n.text:00000000004022c5\n.text:00000000004022c9\n.text:00000000004022cc\n.text:00000000004022d1\n.text:00000000004022d6\n.text:00000000004022d9\n.text:00000000004022db\n.text:00000000004022df\n.text:00000000004022e2\n.text:00000000004022e5\n.text:00000000004022e7\n.text:00000000004022ec\n.text:00000000004022f1\n.text:00000000004022f6\n.text:00000000004022f9\n.text:00000000004022fd\n.text:0000000000402302\n.text:0000000000402305\n.text:0000000000402307\n.text:0000000000402309\n.text:000000000040230c\n.text:000000000040230f\n.text:0000000000402314\n.text:0000000000402316\n.text:000000000040231a\n.text:000000000040231b\n.text:000000000040231d\n.text:000000000040231f\n.text:0000000000402321\n.text:0000000000402323\n.text:0000000000402324\n.text:0000000000402325\n.text:000000000040232a\n.text:000000000040232c\n.text:000000000040232e\n.text:0000000000402330\n.text:0000000000402335\n.text:000000000040233a\n.text:000000000040233f\n.text:0000000000402342\n.text:0000000000402347\n.text:0000000000402349\n.text:000000000040234b\n.text:000000000040234e\n.text:0000000000402353\n.text:0000000000402358\n.text:000000000040235d\n.text:000000000040235f\n.text:0000000000402364\n.text:000000000040236a\n.text:000000000040236c\n.text:0000000000402371\n.text:0000000000402378\n.text:000000000040237f\n.text:0000000000402384\n.text:0000000000402389\n.text:000000000040238f\n.text:0000000000402392\n.text:0000000000402394\n.text:0000000000402399\n.text:000000000040239b\n.text:00000000004023a0\n.text:00000000004023a2\n.text:00000000004023a7\n.text:00000000004023ac\n.text:00000000004023b1\n.text:00000000004023b4\n.text:00000000004023b6\n.text:00000000004023b8\n.text:00000000004023ba\n.text:00000000004023bd\n.text:00000000004023c2\n.text:00000000004023c7\n.text:00000000004023cc\n.text:00000000004023ce\n.text:00000000004023d3\n.text:00000000004023d8\n.text:00000000004023dd\n.text:00000000004023e0\n.text:00000000004023e5\n.text:00000000004023ea\n.text:00000000004023ef\n.text:00000000004023f2\n.text:00000000004023f4\n.text:00000000004023f6\n.text:00000000004023f8\n.text:00000000004023fb\n.text:0000000000402400\n.text:0000000000402405\n.text:000000000040240a\n.text:000000000040240f\n.text:0000000000402414\n'
p664
tp665
sS'realloc'
p666
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p667
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00609190)();\u000a  return pvVar1;\u000a}\u000a\u000a
p668
S'JMP qword ptr [0x00609190]\n'
p669
S'ff 25 4a 79 20 00\n'
p670
S'.plt:0000000000401840\n'
p671
tp672
sS'xcharalloc'
p673
(S'\n__stdcall xcharalloc(size_t n)\n'
p674
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p675
S'JMP 0x00404940\n'
p676
S'e9 2b ff ff ff\n'
p677
S'.text:0000000000404a10\n'
p678
tp679
sS'c_isupper'
p680
(S'\n__stdcall c_isupper()\n'
p681
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p682
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p683
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p684
S'.text:0000000000404f50\n.text:0000000000404f53\n.text:0000000000404f56\n.text:0000000000404f59\n'
p685
tp686
sS'__fprintf_chk'
p687
(S'\n__stdcall __fprintf_chk()\n'
p688
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_00609208)();\u000a  return;\u000a}\u000a\u000a
p689
S'JMP qword ptr [0x00609208]\n'
p690
S'ff 25 d2 78 20 00\n'
p691
S'.plt:0000000000401930\n'
p692
tp693
sS'get_charset_aliases'
p694
(S'\n__stdcall get_charset_aliases()\n'
p695
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases = "";\u000a    return "";\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00405314_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00405314_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00405314_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00405314_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00405314_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00405314_caseD_9;\u000a      case -1:\u000a        goto switchD_00405314_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040536d:\u000a  __s = "";\u000aLAB_00405373:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00405314_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00405373;\u000a  }\u000a  goto LAB_0040536d;\u000a}\u000a\u000a
p696
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x00609470]\nTEST R15,R15\nJNZ 0x00405382\nMOV EDI,0x406da4\nCALL 0x00401560\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405138\nCMP byte ptr [RBX],0x0\nJNZ 0x0040513d\nMOV EBX,0x406db4\nMOV RDI,RBX\nCALL 0x00401660\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00405157\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00405159\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x004017e0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x004051ad\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004017a0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x004051b8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x004051d5\nMOV R15D,0x405825\nJMP 0x0040537b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004018b0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040536d\nMOV ESI,0x4063b2\nMOV EDI,EBP\nCALL 0x00401850\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405334\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00405300\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004015c0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004015c0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00405300\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401810\nMOV ESI,0x406dc3\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401700\nCMP EAX,0x2\nJL 0x00405354\nMOV RDI,R12\nCALL 0x00401660\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401660\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004052dd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401840\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00405224\nJMP 0x0040533d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x004017e0\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00405224\nJMP 0x0040533d\nMOV RDI,RBX\nCALL 0x004015f0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00405267\nJMP qword ptr [0x406c68 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004015f0\nCMP EAX,-0x1\nJZ 0x00405354\nCMP EAX,0xa\nJNZ 0x00405320\nJMP 0x00405300\nMOV EDI,EBP\nCALL 0x00401720\nJMP 0x0040536d\nMOV RDI,R15\nCALL 0x00401570\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x004055b0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040536d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00405373\nMOV R15D,0x405825\nMOV RDI,R13\nCALL 0x00401570\nMOV qword ptr [0x00609470],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p697
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 58 43 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf a4 6d 40 00\ne8 35 c4 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb b4 6d 40 00\n48 89 df\ne8 1b c5 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 79 c6 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 23 c6 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 25 58 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 cc c6 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe b2 63 40 00\n89 ef\ne8 56 c6 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 7b c3 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 6b c3 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 9f c5 ff ff\nbe c3 6d 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 7a c4 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 c9 c3 ff ff\n49 89 c4\n48 89 ef\ne8 be c3 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 76 c5 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 f5 c4 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 e8 c2 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 68 6c 40 00\n48 89 df\ne8 c8 c2 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 e5 c3 ff ff\neb 30\n4c 89 ff\ne8 2b c2 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 54 02 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 25 58 40 00\n4c 89 ef\ne8 f5 c1 ff ff\n4c 89 3d ee 40 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p698
S'.text:0000000000405100\n.text:0000000000405101\n.text:0000000000405103\n.text:0000000000405105\n.text:0000000000405107\n.text:0000000000405109\n.text:000000000040510a\n.text:0000000000405111\n.text:0000000000405118\n.text:000000000040511b\n.text:0000000000405121\n.text:0000000000405126\n.text:000000000040512b\n.text:000000000040512e\n.text:0000000000405131\n.text:0000000000405133\n.text:0000000000405136\n.text:0000000000405138\n.text:000000000040513d\n.text:0000000000405140\n.text:0000000000405145\n.text:0000000000405148\n.text:000000000040514b\n.text:000000000040514d\n.text:0000000000405152\n.text:0000000000405155\n.text:0000000000405157\n.text:0000000000405159\n.text:000000000040515d\n.text:0000000000405162\n.text:0000000000405167\n.text:000000000040516a\n.text:000000000040516d\n.text:000000000040516f\n.text:0000000000405172\n.text:0000000000405175\n.text:0000000000405178\n.text:000000000040517d\n.text:0000000000405180\n.text:0000000000405183\n.text:0000000000405186\n.text:0000000000405188\n.text:000000000040518e\n.text:0000000000405198\n.text:000000000040519d\n.text:00000000004051a7\n.text:00000000004051ab\n.text:00000000004051ad\n.text:00000000004051b3\n.text:00000000004051b8\n.text:00000000004051c2\n.text:00000000004051c7\n.text:00000000004051d1\n.text:00000000004051d5\n.text:00000000004051da\n.text:00000000004051dc\n.text:00000000004051df\n.text:00000000004051e4\n.text:00000000004051e6\n.text:00000000004051e8\n.text:00000000004051ee\n.text:00000000004051f3\n.text:00000000004051f5\n.text:00000000004051fa\n.text:00000000004051fd\n.text:0000000000405200\n.text:0000000000405206\n.text:000000000040520b\n.text:0000000000405210\n.text:0000000000405212\n.text:0000000000405217\n.text:000000000040521a\n.text:000000000040521f\n.text:0000000000405224\n.text:0000000000405229\n.text:000000000040522c\n.text:000000000040522f\n.text:0000000000405232\n.text:0000000000405235\n.text:0000000000405238\n.text:000000000040523d\n.text:0000000000405240\n.text:0000000000405245\n.text:0000000000405248\n.text:000000000040524d\n.text:0000000000405250\n.text:0000000000405255\n.text:000000000040525a\n.text:000000000040525d\n.text:0000000000405262\n.text:0000000000405267\n.text:0000000000405269\n.text:000000000040526c\n.text:0000000000405271\n.text:0000000000405276\n.text:0000000000405278\n.text:000000000040527b\n.text:000000000040527e\n.text:0000000000405281\n.text:0000000000405286\n.text:0000000000405289\n.text:000000000040528f\n.text:0000000000405292\n.text:0000000000405297\n.text:000000000040529a\n.text:000000000040529d\n.text:00000000004052a2\n.text:00000000004052a5\n.text:00000000004052aa\n.text:00000000004052af\n.text:00000000004052b2\n.text:00000000004052b4\n.text:00000000004052b8\n.text:00000000004052bd\n.text:00000000004052c2\n.text:00000000004052c5\n.text:00000000004052ca\n.text:00000000004052cd\n.text:00000000004052d2\n.text:00000000004052d5\n.text:00000000004052db\n.text:00000000004052dd\n.text:00000000004052e2\n.text:00000000004052e6\n.text:00000000004052eb\n.text:00000000004052ee\n.text:00000000004052f1\n.text:00000000004052f7\n.text:0000000000405300\n.text:0000000000405303\n.text:0000000000405308\n.text:000000000040530b\n.text:000000000040530e\n.text:0000000000405314\n.text:0000000000405320\n.text:0000000000405323\n.text:0000000000405328\n.text:000000000040532b\n.text:000000000040532d\n.text:0000000000405330\n.text:0000000000405332\n.text:0000000000405334\n.text:0000000000405336\n.text:000000000040533b\n.text:000000000040533d\n.text:0000000000405340\n.text:0000000000405345\n.text:0000000000405347\n.text:000000000040534c\n.text:000000000040534f\n.text:0000000000405354\n.text:0000000000405357\n.text:000000000040535c\n.text:0000000000405361\n.text:0000000000405364\n.text:0000000000405366\n.text:000000000040536b\n.text:000000000040536d\n.text:0000000000405373\n.text:0000000000405376\n.text:000000000040537b\n.text:0000000000405382\n.text:0000000000405385\n.text:000000000040538c\n.text:000000000040538d\n.text:000000000040538f\n.text:0000000000405391\n.text:0000000000405393\n.text:0000000000405395\n.text:0000000000405396\n'
p699
tp700
sS'nl_langinfo'
p701
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p702
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00609170)();\u000a  return pcVar1;\u000a}\u000a\u000a
p703
S'JMP qword ptr [0x00609170]\n'
p704
S'ff 25 6a 79 20 00\n'
p705
S'.plt:0000000000401800\n'
p706
tp707
sS'c_isalnum'
p708
(S'\n__stdcall c_isalnum()\n'
p709
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p710
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00404e6b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00404e6b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00404e6a\nXOR EAX,EAX\nRET\n'
p711
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p712
S'.text:0000000000404e50\n.text:0000000000404e52\n.text:0000000000404e55\n.text:0000000000404e58\n.text:0000000000404e5a\n.text:0000000000404e64\n.text:0000000000404e68\n.text:0000000000404e6a\n.text:0000000000404e6b\n.text:0000000000404e6e\n.text:0000000000404e71\n.text:0000000000404e73\n.text:0000000000404e75\n'
p713
tp714
sS'x2realloc'
p715
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p716
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p717
S'MOV EDX,0x1\nJMP 0x004049b0\n'
p718
S'ba 01 00 00 00\neb 89\n'
p719
S'.text:0000000000404a20\n.text:0000000000404a25\n'
p720
tp721
sS'getpwuid'
p722
(S'\n__stdcall getpwuid(__uid_t __uid)\n'
p723
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000apasswd * getpwuid(__uid_t __uid)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  \u000a  ppVar1 = (passwd *)(*(code *)PTR_getpwuid_00609080)();\u000a  return ppVar1;\u000a}\u000a\u000a
p724
S'JMP qword ptr [0x00609080]\n'
p725
S'ff 25 5a 7a 20 00\n'
p726
S'.plt:0000000000401620\n'
p727
tp728
sS'strlen'
p729
(S'\n__stdcall strlen(char * __s)\n'
p730
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_006090a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x006090a0]\n'
p732
S'ff 25 3a 7a 20 00\n'
p733
S'.plt:0000000000401660\n'
p734
tp735
sS'setgroups'
p736
(S'\n__stdcall setgroups(size_t __n, __gid_t * __groups)\n'
p737
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setgroups(size_t __n,__gid_t *__groups)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setgroups_00609108)();\u000a  return iVar1;\u000a}\u000a\u000a
p738
S'JMP qword ptr [0x00609108]\n'
p739
S'ff 25 d2 79 20 00\n'
p740
S'.plt:0000000000401730\n'
p741
tp742
sS'memcmp'
p743
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p744
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_00609110)();\u000a  return iVar1;\u000a}\u000a\u000a
p745
S'JMP qword ptr [0x00609110]\n'
p746
S'ff 25 ca 79 20 00\n'
p747
S'.plt:0000000000401740\n'
p748
tp749
sS'quotearg_n_style_mem'
p750
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p751
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p752
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004039e0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004037b0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p753
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p754
S'.text:0000000000403a40\n.text:0000000000403a41\n.text:0000000000403a43\n.text:0000000000403a45\n.text:0000000000403a46\n.text:0000000000403a4a\n.text:0000000000403a4d\n.text:0000000000403a50\n.text:0000000000403a52\n.text:0000000000403a55\n.text:0000000000403a58\n.text:0000000000403a5d\n.text:0000000000403a5f\n.text:0000000000403a62\n.text:0000000000403a65\n.text:0000000000403a68\n.text:0000000000403a6d\n.text:0000000000403a71\n.text:0000000000403a72\n.text:0000000000403a74\n.text:0000000000403a76\n.text:0000000000403a77\n'
p755
tp756
sS'_exit'
p757
(S'\n__stdcall _exit(int __status)\n'
p758
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00609048)();\u000a  return;\u000a}\u000a\u000a
p759
S'JMP qword ptr [0x00609048]\n'
p760
S'ff 25 92 7a 20 00\n'
p761
S'.plt:00000000004015b0\n'
p762
tp763
sS'__errno_location'
p764
(S'\n__stdcall __errno_location()\n'
p765
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00609038)();\u000a  return piVar1;\u000a}\u000a\u000a
p766
S'JMP qword ptr [0x00609038]\n'
p767
S'ff 25 a2 7a 20 00\n'
p768
S'.plt:0000000000401590\n'
p769
tp770
sS'bkm_scale_by_power'
p771
(S'\n__stdcall bkm_scale_by_power(ulong * x)\n'
p772
V\u000astrtol_error bkm_scale_by_power(ulong *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p773
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00404df1\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00404d90\nOR EBP,EAX\nDEC EBX\nJNZ 0x00404de0\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p774
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p775
S'.text:0000000000404dc0\n.text:0000000000404dc1\n.text:0000000000404dc3\n.text:0000000000404dc5\n.text:0000000000404dc6\n.text:0000000000404dc7\n.text:0000000000404dc9\n.text:0000000000404dcc\n.text:0000000000404dcf\n.text:0000000000404dd1\n.text:0000000000404dd3\n.text:0000000000404dd5\n.text:0000000000404de0\n.text:0000000000404de3\n.text:0000000000404de6\n.text:0000000000404deb\n.text:0000000000404ded\n.text:0000000000404def\n.text:0000000000404df1\n.text:0000000000404df3\n.text:0000000000404df7\n.text:0000000000404df8\n.text:0000000000404dfa\n.text:0000000000404dfc\n.text:0000000000404dfd\n'
p776
tp777
sS'x2nrealloc'
p778
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p779
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p780
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x004049dc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404a09\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004049fa\nTEST RCX,RCX\nJNZ 0x004049fa\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00404980\nPUSH RAX\nCALL 0x00404ad0\n'
p781
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p782
S'.text:00000000004049b0\n.text:00000000004049b3\n.text:00000000004049b6\n.text:00000000004049b9\n.text:00000000004049bb\n.text:00000000004049c5\n.text:00000000004049c7\n.text:00000000004049ca\n.text:00000000004049cd\n.text:00000000004049cf\n.text:00000000004049d2\n.text:00000000004049d5\n.text:00000000004049da\n.text:00000000004049dc\n.text:00000000004049df\n.text:00000000004049e1\n.text:00000000004049e6\n.text:00000000004049e8\n.text:00000000004049eb\n.text:00000000004049ed\n.text:00000000004049f4\n.text:00000000004049f7\n.text:00000000004049fa\n.text:00000000004049fd\n.text:0000000000404a01\n.text:0000000000404a04\n.text:0000000000404a09\n.text:0000000000404a0a\n'
p783
tp784
sS'xrealloc'
p785
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p786
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p787
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00404997\nTEST RBX,RBX\nJNZ 0x00404997\nCALL 0x00401570\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401840\nTEST RBX,RBX\nJZ 0x004049a9\nTEST RAX,RAX\nJZ 0x004049ab\nPOP RBX\nRET\nCALL 0x00404ad0\n'
p788
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 dd cb ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 a1 ce ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p789
S'.text:0000000000404980\n.text:0000000000404981\n.text:0000000000404984\n.text:0000000000404987\n.text:0000000000404989\n.text:000000000040498c\n.text:000000000040498e\n.text:0000000000404993\n.text:0000000000404995\n.text:0000000000404996\n.text:0000000000404997\n.text:000000000040499a\n.text:000000000040499f\n.text:00000000004049a2\n.text:00000000004049a4\n.text:00000000004049a7\n.text:00000000004049a9\n.text:00000000004049aa\n.text:00000000004049ab\n'
p790
tp791
sS'quotearg_n_options'
p792
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p793
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p794
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401590\nTEST R12D,R12D\nJS 0x00403961\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x00609250]\nCMP dword ptr [0x00609258],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040387b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x609260\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00404980\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x00609250],R15\nJNZ 0x00403842\nMOVUPS XMM0,xmmword ptr [0x00609260]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x00609258]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x004016f0\nMOV dword ptr [0x00609258],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x004029d0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x004038dd\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040394b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x609370\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00403908\nCALL 0x00401570\nMOV RDI,R15\nCALL 0x00404a10\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x004029d0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401580\n'
p795
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 c1 dd ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 66 5a 20 00\n44 39 25 67 5a 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 60 92 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 58 11 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 1b 5a 20 00\n75 0b\n0f 10 05 22 5a 20 00\n41 0f 11 07\n8b 05 10 5a 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 8d de ff ff\n89 1d ef 59 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 70 93 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 68 dc ff ff\n4c 89 ff\ne8 00 11 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 1a dc ff ff\n'
p796
S'.text:00000000004037b0\n.text:00000000004037b1\n.text:00000000004037b3\n.text:00000000004037b5\n.text:00000000004037b7\n.text:00000000004037b9\n.text:00000000004037ba\n.text:00000000004037be\n.text:00000000004037c1\n.text:00000000004037c4\n.text:00000000004037c7\n.text:00000000004037ca\n.text:00000000004037cf\n.text:00000000004037d2\n.text:00000000004037d8\n.text:00000000004037dd\n.text:00000000004037df\n.text:00000000004037e3\n.text:00000000004037ea\n.text:00000000004037f1\n.text:00000000004037f6\n.text:00000000004037fb\n.text:0000000000403800\n.text:0000000000403802\n.text:0000000000403807\n.text:000000000040380a\n.text:000000000040380d\n.text:0000000000403813\n.text:0000000000403815\n.text:0000000000403818\n.text:000000000040381c\n.text:000000000040381f\n.text:0000000000403823\n.text:0000000000403828\n.text:000000000040382b\n.text:000000000040382e\n.text:0000000000403835\n.text:0000000000403837\n.text:000000000040383e\n.text:0000000000403842\n.text:0000000000403848\n.text:000000000040384b\n.text:000000000040384f\n.text:0000000000403852\n.text:0000000000403855\n.text:0000000000403859\n.text:000000000040385b\n.text:000000000040385e\n.text:0000000000403863\n.text:0000000000403869\n.text:000000000040386c\n.text:0000000000403871\n.text:0000000000403876\n.text:000000000040387b\n.text:000000000040387e\n.text:0000000000403882\n.text:0000000000403886\n.text:000000000040388b\n.text:000000000040388f\n.text:0000000000403893\n.text:0000000000403897\n.text:000000000040389b\n.text:000000000040389f\n.text:00000000004038a4\n.text:00000000004038a7\n.text:00000000004038aa\n.text:00000000004038ad\n.text:00000000004038b2\n.text:00000000004038b5\n.text:00000000004038b8\n.text:00000000004038bb\n.text:00000000004038bc\n.text:00000000004038c1\n.text:00000000004038c5\n.text:00000000004038c8\n.text:00000000004038cb\n.text:00000000004038cd\n.text:00000000004038d2\n.text:00000000004038d6\n.text:00000000004038db\n.text:00000000004038dd\n.text:00000000004038e1\n.text:00000000004038e6\n.text:00000000004038e9\n.text:00000000004038ec\n.text:00000000004038f1\n.text:00000000004038f6\n.text:00000000004038f9\n.text:00000000004038fe\n.text:0000000000403901\n.text:0000000000403903\n.text:0000000000403908\n.text:000000000040390b\n.text:0000000000403910\n.text:0000000000403913\n.text:0000000000403916\n.text:000000000040391b\n.text:000000000040391e\n.text:0000000000403922\n.text:0000000000403925\n.text:0000000000403928\n.text:000000000040392d\n.text:0000000000403932\n.text:0000000000403937\n.text:000000000040393a\n.text:000000000040393d\n.text:000000000040393e\n.text:0000000000403943\n.text:0000000000403947\n.text:000000000040394b\n.text:000000000040394f\n.text:0000000000403952\n.text:0000000000403956\n.text:0000000000403957\n.text:0000000000403959\n.text:000000000040395b\n.text:000000000040395d\n.text:000000000040395f\n.text:0000000000403960\n.text:0000000000403961\n'
p797
tp798
sS'strcmp'
p799
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p800
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00609130)();\u000a  return iVar1;\u000a}\u000a\u000a
p801
S'JMP qword ptr [0x00609130]\n'
p802
S'ff 25 aa 79 20 00\n'
p803
S'.plt:0000000000401780\n'
p804
tp805
sS'set_custom_quoting'
p806
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p807
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p808
S'TEST RDI,RDI\nMOV EAX,0x609330\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00402945\nTEST RDX,RDX\nJZ 0x00402945\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401580\n'
p809
S'48 85 ff\nb8 30 93 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 35 ec ff ff\n'
p810
S'.text:0000000000402920\n.text:0000000000402923\n.text:0000000000402928\n.text:000000000040292c\n.text:0000000000402932\n.text:0000000000402935\n.text:0000000000402937\n.text:000000000040293a\n.text:000000000040293c\n.text:0000000000402940\n.text:0000000000402944\n.text:0000000000402945\n.text:0000000000402946\n'
p811
tp812
sS'c_isalpha'
p813
(S'\n__stdcall c_isalpha()\n'
p814
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p815
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00404e9b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p816
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p817
S'.text:0000000000404e80\n.text:0000000000404e83\n.text:0000000000404e86\n.text:0000000000404e88\n.text:0000000000404e92\n.text:0000000000404e94\n.text:0000000000404e97\n.text:0000000000404e9a\n.text:0000000000404e9b\n.text:0000000000404e9d\n'
p818
tp819
sS'getgrouplist'
p820
(S'\n__stdcall getgrouplist(char * __user, __gid_t __group, __gid_t * __groups, int * __ngroups)\n'
p821
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getgrouplist(char *__user,__gid_t __group,__gid_t *__groups,int *__ngroups)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getgrouplist_006091c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p822
S'JMP qword ptr [0x006091c0]\n'
p823
S'ff 25 1a 79 20 00\n'
p824
S'.plt:00000000004018a0\n'
p825
tp826
sS'quotearg_custom_mem'
p827
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p828
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p829
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00403bc0\n'
p830
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p831
S'.text:0000000000403c50\n.text:0000000000403c53\n.text:0000000000403c56\n.text:0000000000403c59\n.text:0000000000403c5c\n.text:0000000000403c5e\n.text:0000000000403c61\n'
p832
tp833
sS'close_stdout'
p834
(S'\n__stdcall close_stdout()\n'
p835
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402717;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x405e15,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402717:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p836
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x006092c8]\nCALL 0x00404fa0\nTEST EAX,EAX\nJZ 0x00402717\nCMP byte ptr [0x00609318],0x0\nJZ 0x0040272c\nCALL 0x00401590\nCMP dword ptr [RAX],0x20\nJNZ 0x0040272c\nMOV RDI,qword ptr [0x00609300]\nCALL 0x00404fa0\nTEST EAX,EAX\nJNZ 0x00402771\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x405e05\nMOV EDX,0x5\nCALL 0x00401640\nMOV R14,RAX\nMOV RBX,qword ptr [0x00609310]\nCALL 0x00401590\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x0040277c\nXOR EDI,EDI\nMOV EDX,0x405e15\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401880\nMOV EDI,dword ptr [0x00609248]\nCALL 0x004015b0\nMOV EDI,dword ptr [0x00609248]\nCALL 0x004015b0\nMOV RDI,RBX\nCALL 0x00403b40\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x405e11\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401880\nMOV EDI,dword ptr [0x00609248]\nCALL 0x004015b0\n'
p837
S'55\n41 56\n53\n48 8b 3d cd 6b 20 00\ne8 a0 28 00 00\n85 c0\n74 13\n80 3d 0d 6c 20 00 00\n74 1f\ne8 7e ee ff ff\n83 38 20\n75 15\n48 8b 3d e2 6b 20 00\ne8 7d 28 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 05 5e 40 00\nba 05 00 00 00\ne8 03 ef ff ff\n49 89 c6\n48 8b 1d c9 6b 20 00\ne8 44 ee ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 15 5e 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 1a f1 ff ff\n8b 3d dc 6a 20 00\ne8 3f ee ff ff\n8b 3d d1 6a 20 00\ne8 34 ee ff ff\n48 89 df\ne8 bc 13 00 00\n48 89 c1\n31 ff\nba 11 5e 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 e6 f0 ff ff\n8b 3d a8 6a 20 00\ne8 0b ee ff ff\n'
p838
S'.text:00000000004026f0\n.text:00000000004026f1\n.text:00000000004026f3\n.text:00000000004026f4\n.text:00000000004026fb\n.text:0000000000402700\n.text:0000000000402702\n.text:0000000000402704\n.text:000000000040270b\n.text:000000000040270d\n.text:0000000000402712\n.text:0000000000402715\n.text:0000000000402717\n.text:000000000040271e\n.text:0000000000402723\n.text:0000000000402725\n.text:0000000000402727\n.text:0000000000402728\n.text:000000000040272a\n.text:000000000040272b\n.text:000000000040272c\n.text:000000000040272e\n.text:0000000000402733\n.text:0000000000402738\n.text:000000000040273d\n.text:0000000000402740\n.text:0000000000402747\n.text:000000000040274c\n.text:000000000040274f\n.text:0000000000402751\n.text:0000000000402753\n.text:0000000000402755\n.text:000000000040275a\n.text:000000000040275c\n.text:000000000040275e\n.text:0000000000402761\n.text:0000000000402766\n.text:000000000040276c\n.text:0000000000402771\n.text:0000000000402777\n.text:000000000040277c\n.text:000000000040277f\n.text:0000000000402784\n.text:0000000000402787\n.text:0000000000402789\n.text:000000000040278e\n.text:0000000000402790\n.text:0000000000402792\n.text:0000000000402795\n.text:000000000040279a\n.text:00000000004027a0\n'
p839
tp840
sS'version_etc_ar'
p841
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p842
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p843
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00404790\nJMP 0x00404420\n'
p844
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p845
S'.text:0000000000404780\n.text:0000000000404787\n.text:0000000000404790\n.text:0000000000404796\n.text:000000000040479a\n.text:000000000040479c\n'
p846
tp847
sS'strtok'
p848
(S'\n__stdcall strtok(char * __s, char * __delim)\n'
p849
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strtok(char *__s,char *__delim)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strtok_006091d8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p850
S'JMP qword ptr [0x006091d8]\n'
p851
S'ff 25 02 79 20 00\n'
p852
S'.plt:00000000004018d0\n'
p853
tp854
sS'chdir'
p855
(S'\n__stdcall chdir(char * __path)\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint chdir(char *__path)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_chdir_006090a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x006090a8]\n'
p858
S'ff 25 32 7a 20 00\n'
p859
S'.plt:0000000000401670\n'
p860
tp861
sS'setuid'
p862
(S'\n__stdcall setuid(__uid_t __uid)\n'
p863
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint setuid(__uid_t __uid)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_setuid_00609210)();\u000a  return iVar1;\u000a}\u000a\u000a
p864
S'JMP qword ptr [0x00609210]\n'
p865
S'ff 25 ca 78 20 00\n'
p866
S'.plt:0000000000401940\n'
p867
tp868
sS'rpl_calloc'
p869
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p870
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00609128)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p871
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00404e3b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00404e40\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00404e40\nPUSH RAX\nCALL 0x00401590\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401770\n'
p872
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 5f c7 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 25 c9 ff ff\n'
p873
S'.text:0000000000404e00\n.text:0000000000404e03\n.text:0000000000404e08\n.text:0000000000404e0a\n.text:0000000000404e0d\n.text:0000000000404e12\n.text:0000000000404e14\n.text:0000000000404e17\n.text:0000000000404e1b\n.text:0000000000404e1d\n.text:0000000000404e20\n.text:0000000000404e23\n.text:0000000000404e26\n.text:0000000000404e29\n.text:0000000000404e2b\n.text:0000000000404e2c\n.text:0000000000404e31\n.text:0000000000404e37\n.text:0000000000404e39\n.text:0000000000404e3a\n.text:0000000000404e3b\n.text:0000000000404e40\n.text:0000000000404e43\n.text:0000000000404e46\n'
p874
tp875
sS'memset'
p876
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p877
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006090e8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p878
S'JMP qword ptr [0x006090e8]\n'
p879
S'ff 25 f2 79 20 00\n'
p880
S'.plt:00000000004016f0\n'
p881
tp882
sS'c_isxdigit'
p883
(S'\n__stdcall c_isxdigit()\n'
p884
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p885
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00404f7b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p886
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p887
S'.text:0000000000404f60\n.text:0000000000404f63\n.text:0000000000404f66\n.text:0000000000404f68\n.text:0000000000404f72\n.text:0000000000404f74\n.text:0000000000404f77\n.text:0000000000404f7a\n.text:0000000000404f7b\n.text:0000000000404f7d\n'
p888
tp889
sS'__libc_csu_fini'
p890
(S'\n__stdcall __libc_csu_fini()\n'
p891
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p892
S'RET\n'
p893
S'f3 c3\n'
p894
S'.text:0000000000405760\n'
p895
tp896
sS'getc_unlocked'
p897
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p898
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00609068)();\u000a  return iVar1;\u000a}\u000a\u000a
p899
S'JMP qword ptr [0x00609068]\n'
p900
S'ff 25 72 7a 20 00\n'
p901
S'.plt:00000000004015f0\n'
p902
tp903
sS'abort'
p904
(S'\n__stdcall abort()\n'
p905
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00609030)();\u000a  return;\u000a}\u000a\u000a
p906
S'JMP qword ptr [0x00609030]\n'
p907
S'ff 25 aa 7a 20 00\n'
p908
S'.plt:0000000000401580\n'
p909
tp910
sS'c_isascii'
p911
(S'\n__stdcall c_isascii()\n'
p912
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p913
S'CMP EDI,0x80\nSETC AL\nRET\n'
p914
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p915
S'.text:0000000000404ea0\n.text:0000000000404ea6\n.text:0000000000404ea9\n'
p916
tp917
sS'version_etc'
p918
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p919
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p920
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404852\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x004047b0\nADD RSP,0xd8\nRET\n'
p921
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p922
S'.text:0000000000404810\n.text:0000000000404817\n.text:0000000000404819\n.text:000000000040481b\n.text:0000000000404820\n.text:0000000000404825\n.text:000000000040482a\n.text:0000000000404832\n.text:000000000040483a\n.text:0000000000404842\n.text:000000000040484a\n.text:0000000000404852\n.text:0000000000404857\n.text:000000000040485c\n.text:0000000000404861\n.text:0000000000404866\n.text:000000000040486e\n.text:0000000000404873\n.text:000000000040487b\n.text:0000000000404882\n.text:0000000000404885\n.text:000000000040488a\n.text:0000000000404891\n'
p923
tp924
sS'realloc_groupbuf'
p925
(S'\n__stdcall realloc_groupbuf(gid_t * g, size_t num)\n'
p926
V\u000agid_t * realloc_groupbuf(gid_t *g,size_t num)\u000a\u000a{\u000a  int *piVar1;\u000a  gid_t *pgVar2;\u000a  \u000a  if (SUB168(ZEXT816(num) * ZEXT816(4) >> 0x40,0) != 0) {\u000a    piVar1 = __errno_location();\u000a    *piVar1 = 0xc;\u000a    return (gid_t *)0x0;\u000a  }\u000a  pgVar2 = (gid_t *)realloc(g,num << 2);\u000a  return pgVar2;\u000a}\u000a\u000a
p927
S'PUSH RAX\nMOV ECX,0x4\nMOV RAX,RSI\nMUL RCX\nJNO 0x0040559d\nCALL 0x00401590\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nSHL RSI,0x2\nCALL 0x00401840\nPOP RCX\nRET\n'
p928
S'50\nb9 04 00 00 00\n48 89 f0\n48 f7 e1\n71 0f\ne8 fd bf ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\n48 c1 e6 02\ne8 9a c2 ff ff\n59\nc3\n'
p929
S'.text:0000000000405580\n.text:0000000000405581\n.text:0000000000405586\n.text:0000000000405589\n.text:000000000040558c\n.text:000000000040558e\n.text:0000000000405593\n.text:0000000000405599\n.text:000000000040559b\n.text:000000000040559c\n.text:000000000040559d\n.text:00000000004055a1\n.text:00000000004055a6\n.text:00000000004055a7\n'
p930
tp931
sS'__ctype_b_loc'
p932
(S'\n__stdcall __ctype_b_loc()\n'
p933
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_00609228)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p934
S'JMP qword ptr [0x00609228]\n'
p935
S'ff 25 b2 78 20 00\n'
p936
S'.plt:0000000000401970\n'
p937
tp938
sS'lseek'
p939
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p940
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006090d8)();\u000a  return _Var1;\u000a}\u000a\u000a
p941
S'JMP qword ptr [0x006090d8]\n'
p942
S'ff 25 02 7a 20 00\n'
p943
S'.plt:00000000004016d0\n'
p944
tp945
sS'quotearg'
p946
(S'\n__stdcall quotearg(char * arg)\n'
p947
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p948
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004037a0\n'
p949
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p950
S'.text:0000000000403980\n.text:0000000000403983\n.text:0000000000403985\n.text:0000000000403988\n'
p951
tp952
sS'_start'
p953
(S'\n__stdcall _start()\n'
p954
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00608ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p955
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405760\nMOV RCX,0x4056f0\nMOV RDI,0x401d40\nCALL qword ptr [0x00608ff0]\nHLT\n'
p956
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 60 57 40 00\n48 c7 c1 f0 56 40 00\n48 c7 c7 40 1d 40 00\nff 15 46 76 20 00\nf4\n'
p957
S'.text:0000000000401980\n.text:0000000000401982\n.text:0000000000401985\n.text:0000000000401986\n.text:0000000000401989\n.text:000000000040198d\n.text:000000000040198e\n.text:000000000040198f\n.text:0000000000401996\n.text:000000000040199d\n.text:00000000004019a4\n.text:00000000004019aa\n'
p958
tp959
sS'c_iscntrl'
p960
(S'\n__stdcall c_iscntrl()\n'
p961
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p962
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00404ec8\nRET\nCMP EDI,0x7f\nJZ 0x00404ec7\nXOR EAX,EAX\nRET\n'
p963
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p964
S'.text:0000000000404ec0\n.text:0000000000404ec2\n.text:0000000000404ec5\n.text:0000000000404ec7\n.text:0000000000404ec8\n.text:0000000000404ecb\n.text:0000000000404ecd\n.text:0000000000404ecf\n'
p965
tp966
sS'parse_user_spec'
p967
(S'\n__stdcall parse_user_spec(char * spec, uid_t * uid, gid_t * gid, char * * username, char * * groupname)\n'
p968
V\u000achar * parse_user_spec(char *spec,uid_t *uid,gid_t *gid,char **username,char **groupname)\u000a\u000a{\u000a  char *separator;\u000a  char *pcVar1;\u000a  char *pcVar2;\u000a  \u000a  if (gid == (gid_t *)0x0) {\u000a    separator = (char *)0x0;\u000a  }\u000a  else {\u000a    separator = strchr(spec,0x3a);\u000a  }\u000a  pcVar1 = parse_with_separator(spec,separator,uid,gid,username,groupname);\u000a  pcVar2 = pcVar1;\u000a  if ((((gid != (gid_t *)0x0) && (pcVar2 = pcVar1, separator == (char *)0x0)) &&\u000a      (pcVar2 = pcVar1, pcVar1 != (char *)0x0)) &&\u000a     ((separator = strchr(spec,0x2e), pcVar2 = pcVar1, separator != (char *)0x0 &&\u000a      (pcVar2 = parse_with_separator(spec,separator,uid,gid,username,groupname),\u000a      pcVar2 != (char *)0x0)))) {\u000a    pcVar2 = pcVar1;\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p969
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBP,R8\nMOV R15,RCX\nMOV RBX,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST RBX,RBX\nJZ 0x004040e1\nMOV ESI,0x3a\nMOV RDI,R13\nCALL 0x004016a0\nMOV R14,RAX\nJMP 0x004040e4\nXOR R14D,R14D\nMOV RDI,R13\nMOV RSI,R14\nMOV RDX,R12\nMOV RCX,RBX\nMOV R8,R15\nMOV qword ptr [RSP],RBP\nMOV R9,RBP\nCALL 0x00404160\nMOV RBP,RAX\nTEST RBX,RBX\nJZ 0x00404144\nTEST R14,R14\nJNZ 0x00404144\nTEST RBP,RBP\nJZ 0x00404144\nMOV ESI,0x2e\nMOV RDI,R13\nCALL 0x004016a0\nTEST RAX,RAX\nJZ 0x00404144\nMOV RDI,R13\nMOV RSI,RAX\nMOV RDX,R12\nMOV RCX,RBX\nMOV R8,R15\nMOV R9,qword ptr [RSP]\nCALL 0x00404160\nTEST RAX,RAX\nCMOVNZ RAX,RBP\nJMP 0x00404147\nMOV RAX,RBP\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p970
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4c 89 c5\n49 89 cf\n48 89 d3\n49 89 f4\n49 89 fd\n48 85 db\n74 12\nbe 3a 00 00 00\n4c 89 ef\ne8 c4 d5 ff ff\n49 89 c6\neb 03\n45 31 f6\n4c 89 ef\n4c 89 f6\n4c 89 e2\n48 89 d9\n4d 89 f8\n48 89 2c 24\n49 89 e9\ne8 61 00 00 00\n48 89 c5\n48 85 db\n74 3d\n4d 85 f6\n75 38\n48 85 ed\n74 33\nbe 2e 00 00 00\n4c 89 ef\ne8 82 d5 ff ff\n48 85 c0\n74 21\n4c 89 ef\n48 89 c6\n4c 89 e2\n48 89 d9\n4d 89 f8\n4c 8b 0c 24\ne8 25 00 00 00\n48 85 c0\n48 0f 45 c5\neb 03\n48 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p971
S'.text:00000000004040b0\n.text:00000000004040b1\n.text:00000000004040b3\n.text:00000000004040b5\n.text:00000000004040b7\n.text:00000000004040b9\n.text:00000000004040ba\n.text:00000000004040bb\n.text:00000000004040be\n.text:00000000004040c1\n.text:00000000004040c4\n.text:00000000004040c7\n.text:00000000004040ca\n.text:00000000004040cd\n.text:00000000004040cf\n.text:00000000004040d4\n.text:00000000004040d7\n.text:00000000004040dc\n.text:00000000004040df\n.text:00000000004040e1\n.text:00000000004040e4\n.text:00000000004040e7\n.text:00000000004040ea\n.text:00000000004040ed\n.text:00000000004040f0\n.text:00000000004040f3\n.text:00000000004040f7\n.text:00000000004040fa\n.text:00000000004040ff\n.text:0000000000404102\n.text:0000000000404105\n.text:0000000000404107\n.text:000000000040410a\n.text:000000000040410c\n.text:000000000040410f\n.text:0000000000404111\n.text:0000000000404116\n.text:0000000000404119\n.text:000000000040411e\n.text:0000000000404121\n.text:0000000000404123\n.text:0000000000404126\n.text:0000000000404129\n.text:000000000040412c\n.text:000000000040412f\n.text:0000000000404132\n.text:0000000000404136\n.text:000000000040413b\n.text:000000000040413e\n.text:0000000000404142\n.text:0000000000404144\n.text:0000000000404147\n.text:000000000040414b\n.text:000000000040414c\n.text:000000000040414e\n.text:0000000000404150\n.text:0000000000404152\n.text:0000000000404154\n.text:0000000000404155\n'
p972
tp973
sS'c_isblank'
p974
(S'\n__stdcall c_isblank()\n'
p975
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p976
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p977
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p978
S'.text:0000000000404eb0\n.text:0000000000404eb3\n.text:0000000000404eb6\n.text:0000000000404eb9\n.text:0000000000404ebc\n.text:0000000000404ebe\n'
p979
tp980
sS'quotearg_n_mem'
p981
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p982
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p983
S'MOV ECX,0x609330\nJMP 0x004037b0\n'
p984
S'b9 30 93 60 00\ne9 36 fe ff ff\n'
p985
S'.text:0000000000403970\n.text:0000000000403975\n'
p986
tp987
sS'atexit'
p988
(S'\n__stdcall atexit(__func * __func)\n'
p989
V\u000a/* WARNING: Removing unreachable block (ram,0x00405790) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_006091f0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p990
S'MOV RAX,0x609238\nTEST RAX,RAX\nJZ 0x00405790\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401900\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401900\n'
p991
S'48 c7 c0 38 92 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 7a c1 ff ff\n31 d2\n31 f6\ne9 67 c1 ff ff\n'
p992
S'.text:0000000000405770\n.text:0000000000405777\n.text:000000000040577a\n.text:000000000040577c\n.text:000000000040577f\n.text:0000000000405781\n.text:0000000000405790\n.text:0000000000405792\n.text:0000000000405794\n'
p993
tp994
sS'__printf_chk'
p995
(S'\n__stdcall __printf_chk()\n'
p996
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_006091a8)();\u000a  return;\u000a}\u000a\u000a
p997
S'JMP qword ptr [0x006091a8]\n'
p998
S'ff 25 32 79 20 00\n'
p999
S'.plt:0000000000401870\n'
p1000
tp1001
sS'fdopen'
p1002
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1003
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_00609198)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x00609198]\n'
p1005
S'ff 25 42 79 20 00\n'
p1006
S'.plt:0000000000401850\n'
p1007
tp1008
sS'is_root'
p1009
(S'\n__stdcall is_root(char * dir)\n'
p1010
V\u000a_Bool is_root(char *dir)\u000a\u000a{\u000a  byte *__ptr;\u000a  int iVar1;\u000a  bool bVar2;\u000a  \u000a  __ptr = (byte *)canonicalize_file_name(dir);\u000a  if (__ptr == (byte *)0x0) {\u000a    bVar2 = false;\u000a  }\u000a  else {\u000a    iVar1 = 0x2f - (uint)*__ptr;\u000a    if (iVar1 == 0) {\u000a      iVar1 = -(uint)__ptr[1];\u000a    }\u000a    bVar2 = iVar1 == 0;\u000a  }\u000a  free(__ptr);\u000a  return (_Bool)bVar2;\u000a}\u000a\u000a
p1011
S'PUSH RBX\nCALL 0x00401710\nTEST RAX,RAX\nJZ 0x00402454\nMOVZX EDX,byte ptr [RAX]\nMOV ECX,0x2f\nSUB ECX,EDX\nJNZ 0x0040244d\nMOVZX ECX,byte ptr [RAX + 0x1]\nNEG ECX\nTEST ECX,ECX\nSETZ BL\nJMP 0x00402456\nXOR EBX,EBX\nMOV RDI,RAX\nCALL 0x00401570\nMOV EAX,EBX\nPOP RBX\nRET\n'
p1012
S'53\ne8 da f2 ff ff\n48 85 c0\n74 19\n0f b6 10\nb9 2f 00 00 00\n29 d1\n75 06\n0f b6 48 01\nf7 d9\n85 c9\n0f 94 c3\neb 02\n31 db\n48 89 c7\ne8 12 f1 ff ff\n89 d8\n5b\nc3\n'
p1013
S'.text:0000000000402430\n.text:0000000000402431\n.text:0000000000402436\n.text:0000000000402439\n.text:000000000040243b\n.text:000000000040243e\n.text:0000000000402443\n.text:0000000000402445\n.text:0000000000402447\n.text:000000000040244b\n.text:000000000040244d\n.text:000000000040244f\n.text:0000000000402452\n.text:0000000000402454\n.text:0000000000402456\n.text:0000000000402459\n.text:000000000040245e\n.text:0000000000402460\n.text:0000000000402461\n'
p1014
tp1015
sS'error'
p1016
(S'\n__stdcall error()\n'
p1017
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_006091b0)();\u000a  return;\u000a}\u000a\u000a
p1018
S'JMP qword ptr [0x006091b0]\n'
p1019
S'ff 25 2a 79 20 00\n'
p1020
S'.plt:0000000000401880\n'
p1021
tp1022
sS'strcaseeq6'
p1023
(S'\n__stdcall strcaseeq6()\n'
p1024
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1025
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404042\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404049\nJMP 0x0040405e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040405e\nTEST BPL,BPL\nJZ 0x00404059\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404070\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1026
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 21 0f 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1027
S'.text:0000000000404020\n.text:0000000000404021\n.text:0000000000404022\n.text:0000000000404023\n.text:0000000000404025\n.text:0000000000404028\n.text:000000000040402a\n.text:000000000040402f\n.text:0000000000404033\n.text:0000000000404035\n.text:0000000000404037\n.text:000000000040403a\n.text:000000000040403c\n.text:000000000040403e\n.text:0000000000404040\n.text:0000000000404042\n.text:0000000000404044\n.text:0000000000404047\n.text:0000000000404049\n.text:000000000040404c\n.text:000000000040404e\n.text:0000000000404051\n.text:0000000000404055\n.text:0000000000404056\n.text:0000000000404057\n.text:0000000000404059\n.text:000000000040405e\n.text:0000000000404062\n.text:0000000000404063\n.text:0000000000404064\n'
p1028
tp1029
sS'strcaseeq5'
p1030
(S'\n__stdcall strcaseeq5()\n'
p1031
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1032
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00403ff6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403ffd\nJMP 0x00404014\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404014\nTEST BPL,BPL\nJZ 0x0040400f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404020\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1033
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 6d 0f 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1034
S'.text:0000000000403fd0\n.text:0000000000403fd1\n.text:0000000000403fd3\n.text:0000000000403fd4\n.text:0000000000403fd7\n.text:0000000000403fd9\n.text:0000000000403fdc\n.text:0000000000403fde\n.text:0000000000403fe3\n.text:0000000000403fe7\n.text:0000000000403fe9\n.text:0000000000403feb\n.text:0000000000403fee\n.text:0000000000403ff0\n.text:0000000000403ff2\n.text:0000000000403ff4\n.text:0000000000403ff6\n.text:0000000000403ff8\n.text:0000000000403ffb\n.text:0000000000403ffd\n.text:0000000000404000\n.text:0000000000404002\n.text:0000000000404006\n.text:0000000000404009\n.text:000000000040400a\n.text:000000000040400c\n.text:000000000040400d\n.text:000000000040400f\n.text:0000000000404014\n.text:0000000000404015\n.text:0000000000404017\n.text:0000000000404018\n'
p1035
tp1036
sS'emit_ancillary_info'
p1037
(S'\n__stdcall emit_ancillary_info()\n'
p1038
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00405d90;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("chroot",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "chroot";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,"chroot",uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/","chroot");\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x405825;\u000a  if (__s2 == "chroot") {\u000a    uVar3 = 0x405b66;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p1039
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x405d90\nMOV ESI,0x405b4a\nNOP\nMOV EDI,0x405999\nCALL 0x00401780\nTEST EAX,EAX\nJZ 0x00401c3b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401c20\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x405999\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x405ba9\nMOV EDX,0x5\nCALL 0x00401640\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x4059ba\nMOV ECX,0x405bc0\nXOR EAX,EAX\nCALL 0x00401870\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401860\nTEST RAX,RAX\nJZ 0x00401cc4\nMOV ESI,0x405be7\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x004015a0\nTEST EAX,EAX\nJZ 0x00401cc4\nXOR EDI,EDI\nMOV ESI,0x405beb\nMOV EDX,0x5\nCALL 0x00401640\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x405999\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401870\nXOR EDI,EDI\nMOV ESI,0x405c30\nMOV EDX,0x5\nCALL 0x00401640\nMOV RSI,RAX\nMOV R14D,0x405999\nMOV EDI,0x1\nMOV EDX,0x405bc0\nMOV ECX,0x405999\nXOR EAX,EAX\nCALL 0x00401870\nXOR EDI,EDI\nMOV ESI,0x405c4f\nMOV EDX,0x5\nCALL 0x00401640\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x405b66\nMOV ECX,0x405825\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401870\n'
p1040
S'41 56\n53\n50\nbb 90 5d 40 00\nbe 4a 5b 40 00\n66 90\nbf 99 59 40 00\ne8 56 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 99 59 40 00\n48 0f 45 d8\n31 ff\nbe a9 5b 40 00\nba 05 00 00 00\ne8 e4 f9 ff ff\n48 89 c6\nbf 01 00 00 00\nba ba 59 40 00\nb9 c0 5b 40 00\n31 c0\ne8 fb fb ff ff\nbf 05 00 00 00\n31 f6\ne8 df fb ff ff\n48 85 c0\n74 3e\nbe e7 5b 40 00\nba 03 00 00 00\n48 89 c7\ne8 08 f9 ff ff\n85 c0\n74 28\n31 ff\nbe eb 5b 40 00\nba 05 00 00 00\ne8 93 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 99 59 40 00\n31 c0\n48 89 ce\ne8 ac fb ff ff\n31 ff\nbe 30 5c 40 00\nba 05 00 00 00\ne8 6b f9 ff ff\n48 89 c6\n41 be 99 59 40 00\nbf 01 00 00 00\nba c0 5b 40 00\nb9 99 59 40 00\n31 c0\ne8 7c fb ff ff\n31 ff\nbe 4f 5c 40 00\nba 05 00 00 00\ne8 3b f9 ff ff\n48 89 c2\n4c 39 f3\nb8 66 5b 40 00\nb9 25 58 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 3e fb ff ff\n'
p1041
S'.text:0000000000401c10\n.text:0000000000401c12\n.text:0000000000401c13\n.text:0000000000401c14\n.text:0000000000401c19\n.text:0000000000401c1e\n.text:0000000000401c20\n.text:0000000000401c25\n.text:0000000000401c2a\n.text:0000000000401c2c\n.text:0000000000401c2e\n.text:0000000000401c32\n.text:0000000000401c36\n.text:0000000000401c39\n.text:0000000000401c3b\n.text:0000000000401c3f\n.text:0000000000401c42\n.text:0000000000401c47\n.text:0000000000401c4b\n.text:0000000000401c4d\n.text:0000000000401c52\n.text:0000000000401c57\n.text:0000000000401c5c\n.text:0000000000401c5f\n.text:0000000000401c64\n.text:0000000000401c69\n.text:0000000000401c6e\n.text:0000000000401c70\n.text:0000000000401c75\n.text:0000000000401c7a\n.text:0000000000401c7c\n.text:0000000000401c81\n.text:0000000000401c84\n.text:0000000000401c86\n.text:0000000000401c8b\n.text:0000000000401c90\n.text:0000000000401c93\n.text:0000000000401c98\n.text:0000000000401c9a\n.text:0000000000401c9c\n.text:0000000000401c9e\n.text:0000000000401ca3\n.text:0000000000401ca8\n.text:0000000000401cad\n.text:0000000000401cb0\n.text:0000000000401cb5\n.text:0000000000401cba\n.text:0000000000401cbc\n.text:0000000000401cbf\n.text:0000000000401cc4\n.text:0000000000401cc6\n.text:0000000000401ccb\n.text:0000000000401cd0\n.text:0000000000401cd5\n.text:0000000000401cd8\n.text:0000000000401cde\n.text:0000000000401ce3\n.text:0000000000401ce8\n.text:0000000000401ced\n.text:0000000000401cef\n.text:0000000000401cf4\n.text:0000000000401cf6\n.text:0000000000401cfb\n.text:0000000000401d00\n.text:0000000000401d05\n.text:0000000000401d08\n.text:0000000000401d0b\n.text:0000000000401d10\n.text:0000000000401d15\n.text:0000000000401d19\n.text:0000000000401d1e\n.text:0000000000401d20\n.text:0000000000401d23\n.text:0000000000401d26\n.text:0000000000401d2a\n.text:0000000000401d2b\n.text:0000000000401d2d\n'
p1042
tp1043
sS'strcaseeq7'
p1044
(S'\n__stdcall strcaseeq7()\n'
p1045
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1046
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404092\nTEST ECX,0xffffffdf\nJNZ 0x00404096\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040409a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1047
S'53\n48 89 fb\n31 ff\ne8 d5 0e 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1048
S'.text:0000000000404070\n.text:0000000000404071\n.text:0000000000404074\n.text:0000000000404076\n.text:000000000040407b\n.text:000000000040407f\n.text:0000000000404081\n.text:0000000000404083\n.text:0000000000404089\n.text:000000000040408b\n.text:0000000000404090\n.text:0000000000404091\n.text:0000000000404092\n.text:0000000000404094\n.text:0000000000404096\n.text:0000000000404098\n.text:0000000000404099\n.text:000000000040409a\n.text:000000000040409f\n.text:00000000004040a0\n'
p1049
tp1050
sS'initialize_exit_failure'
p1051
(S'\n__stdcall initialize_exit_failure()\n'
p1052
V\u000avoid initialize_exit_failure(void)\u000a\u000a{\u000a  exit_failure = 0x7d;\u000a  return;\u000a}\u000a\u000a
p1053
S'MOV dword ptr [0x00609248],0x7d\nRET\n'
p1054
S'c7 05 1e 6e 20 00 7d 00 00 00\nc3\n'
p1055
S'.text:0000000000402420\n.text:000000000040242a\n'
p1056
tp1057
sS'version_etc_va'
p1058
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p1059
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p1060
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x004047e0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x004047ec\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404801\nINC R9\nCMP R9,0xa\nJC 0x004047c0\nMOV R8,RSP\nCALL 0x00404420\nADD RSP,0x58\nRET\n'
p1061
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p1062
S'.text:00000000004047b0\n.text:00000000004047b4\n.text:00000000004047b7\n.text:00000000004047c0\n.text:00000000004047c3\n.text:00000000004047c7\n.text:00000000004047c9\n.text:00000000004047cc\n.text:00000000004047d0\n.text:00000000004047d4\n.text:00000000004047d7\n.text:00000000004047e0\n.text:00000000004047e4\n.text:00000000004047e8\n.text:00000000004047ec\n.text:00000000004047ef\n.text:00000000004047f3\n.text:00000000004047f6\n.text:00000000004047f8\n.text:00000000004047fb\n.text:00000000004047ff\n.text:0000000000404801\n.text:0000000000404804\n.text:0000000000404809\n.text:000000000040480d\n'
p1063
tp1064
sS'xzalloc'
p1065
(S'\n__stdcall xzalloc(size_t s)\n'
p1066
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p1067
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00404940\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x004016f0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1068
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 a4 cc ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1069
S'.text:0000000000404a30\n.text:0000000000404a32\n.text:0000000000404a33\n.text:0000000000404a34\n.text:0000000000404a37\n.text:0000000000404a3c\n.text:0000000000404a3f\n.text:0000000000404a41\n.text:0000000000404a44\n.text:0000000000404a47\n.text:0000000000404a4c\n.text:0000000000404a4f\n.text:0000000000404a53\n.text:0000000000404a54\n.text:0000000000404a56\n'
p1070
tp1071
sS'strtoul'
p1072
(S'\n__stdcall strtoul(char * __nptr, char * * __endptr, int __base)\n'
p1073
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulong strtoul(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoul_006091e0)();\u000a  return uVar1;\u000a}\u000a\u000a
p1074
S'JMP qword ptr [0x006091e0]\n'
p1075
S'ff 25 fa 78 20 00\n'
p1076
S'.plt:00000000004018e0\n'
p1077
tp1078
sS'umaxtostr'
p1079
(S'\n__stdcall umaxtostr(uintmax_t i, char * buf)\n'
p1080
V\u000achar * umaxtostr(uintmax_t i,char *buf)\u000a\u000a{\u000a  bool bVar1;\u000a  \u000a  buf[0x14] = 0;\u000a  buf = buf + 0x14;\u000a  do {\u000a    buf[-1] = (char)i + ((byte)((SUB168(ZEXT816(i) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                                0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a    buf = buf + -1;\u000a    bVar1 = 9 < i;\u000a    i = i / 10;\u000a  } while (bVar1);\u000a  return buf;\u000a}\u000a\u000a
p1081
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nADD RSI,0x14\nMOV R8,-0x3333333333333333\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,RCX\nMUL R8\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV EDI,ECX\nSUB EDI,EAX\nOR DIL,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nSHR RDX,0x3\nCMP RCX,0x9\nMOV RCX,RDX\nJA 0x00405030\nMOV RAX,RSI\nRET\n'
p1082
S'48 89 f9\nc6 46 14 00\n48 83 c6 14\n49 b8 cd cc cc cc cc cc cc cc\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 c8\n49 f7 e0\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n89 cf\n29 c7\n40 80 cf 30\n40 88 7e ff\n48 ff ce\n48 c1 ea 03\n48 83 f9 09\n48 89 d1\n77 d1\n48 89 f0\nc3\n'
p1083
S'.text:0000000000405010\n.text:0000000000405013\n.text:0000000000405017\n.text:000000000040501b\n.text:0000000000405025\n.text:0000000000405030\n.text:0000000000405033\n.text:0000000000405036\n.text:0000000000405038\n.text:000000000040503b\n.text:0000000000405040\n.text:0000000000405043\n.text:0000000000405045\n.text:0000000000405047\n.text:000000000040504b\n.text:000000000040504f\n.text:0000000000405052\n.text:0000000000405056\n.text:000000000040505a\n.text:000000000040505d\n.text:000000000040505f\n.text:0000000000405062\n'
p1084
tp1085
sS'strcaseeq0'
p1086
(S'\n__stdcall strcaseeq0()\n'
p1087
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1088
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00403da5\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403dac\nJMP 0x00403de0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403de0\nTEST BPL,BPL\nJZ 0x00403ddb\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00403df0\nJMP 0x00403de0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1089
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 bd 11 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1090
S'.text:0000000000403d70\n.text:0000000000403d71\n.text:0000000000403d73\n.text:0000000000403d75\n.text:0000000000403d77\n.text:0000000000403d79\n.text:0000000000403d7a\n.text:0000000000403d7b\n.text:0000000000403d7e\n.text:0000000000403d81\n.text:0000000000403d84\n.text:0000000000403d87\n.text:0000000000403d89\n.text:0000000000403d8c\n.text:0000000000403d8e\n.text:0000000000403d93\n.text:0000000000403d96\n.text:0000000000403d98\n.text:0000000000403d9a\n.text:0000000000403d9d\n.text:0000000000403d9f\n.text:0000000000403da1\n.text:0000000000403da3\n.text:0000000000403da5\n.text:0000000000403da7\n.text:0000000000403daa\n.text:0000000000403dac\n.text:0000000000403daf\n.text:0000000000403db1\n.text:0000000000403db5\n.text:0000000000403dba\n.text:0000000000403dbd\n.text:0000000000403dc1\n.text:0000000000403dc5\n.text:0000000000403dc9\n.text:0000000000403dcd\n.text:0000000000403dd1\n.text:0000000000403dd4\n.text:0000000000403dd9\n.text:0000000000403ddb\n.text:0000000000403de0\n.text:0000000000403de4\n.text:0000000000403de5\n.text:0000000000403de7\n.text:0000000000403de9\n.text:0000000000403deb\n.text:0000000000403ded\n.text:0000000000403dee\n'
p1091
tp1092
sS'parse_with_separator'
p1093
(S'\n__stdcall parse_with_separator(char * spec, char * separator, uid_t * uid, gid_t * gid, char * * username, char * * groupname)\n'
p1094
V\u000achar * parse_with_separator\u000a                 (char *spec,char *separator,uid_t *uid,gid_t *gid,char **username,char **groupname)\u000a\u000a{\u000a  bool bVar1;\u000a  strtol_error sVar2;\u000a  char *__name;\u000a  passwd *ppVar3;\u000a  group *pgVar4;\u000a  char *string;\u000a  char *__name_00;\u000a  char *pcVar5;\u000a  char buf [21];\u000a  __uid_t local_6c;\u000a  uint local_68;\u000a  ulong local_48 [3];\u000a  \u000a  local_6c = *uid;\u000a  if (gid == (gid_t *)0x0) {\u000a    local_68 = 0xffffffff;\u000a  }\u000a  else {\u000a    local_68 = *gid;\u000a  }\u000a  if (username != (char **)0x0) {\u000a    *username = (char *)0x0;\u000a  }\u000a  if (groupname != (char **)0x0) {\u000a    *groupname = (char *)0x0;\u000a  }\u000a  if (separator == (char *)0x0) {\u000a    if (*spec != 0) {\u000a      __name = xstrdup(spec);\u000a      __name_00 = (char *)0x0;\u000a      goto LAB_0040420e;\u000a    }\u000a    string = (char *)0x0;\u000a    __name = (char *)0x0;\u000a  }\u000a  else {\u000a    __name_00 = separator + -(long)spec;\u000a    if (__name_00 == (char *)0x0) {\u000a      __name = (char *)0x0;\u000a    }\u000a    else {\u000a      __name = (char *)xmemdup(spec,(size_t)(__name_00 + 1));\u000a      __name[(long)__name_00] = 0;\u000a    }\u000a    __name_00 = (char *)0x0;\u000a    if (separator[1] != 0) {\u000a      __name_00 = separator + 1;\u000a    }\u000aLAB_0040420e:\u000a    if (__name == (char *)0x0) {\u000a      __name = (char *)0x0;\u000a      string = (char *)0x0;\u000a      pcVar5 = (char *)0x0;\u000a    }\u000a    else {\u000a      if ((*__name == '+') || (ppVar3 = getpwnam(__name), ppVar3 == (passwd *)0x0)) {\u000a        if ((__name_00 == (char *)0x0) && (separator != (char *)0x0)) {\u000a          pcVar5 = "invalid spec";\u000a          string = (char *)0x0;\u000a        }\u000a        else {\u000a          sVar2 = xstrtoul(__name,(char **)0x0,(ulong *)0xa,(char *)local_48);\u000a          if ((sVar2 == LONGINT_OK) &&\u000a             ((local_48[0] >> 0x20 == 0 && ((__uid_t)local_48[0] != 0xffffffff)))) {\u000a            pcVar5 = (char *)0x0;\u000a            string = (char *)0x0;\u000a            local_6c = (__uid_t)local_48[0];\u000a          }\u000a          else {\u000a            pcVar5 = "invalid user";\u000a            string = (char *)0x0;\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        local_6c = ppVar3->pw_uid;\u000a        string = (char *)0x0;\u000a        if ((separator != (char *)0x0) && (__name_00 == (char *)0x0)) {\u000a          local_68 = ppVar3->pw_gid;\u000a          pgVar4 = getgrgid(local_68);\u000a          if (pgVar4 == (group *)0x0) {\u000a            string = umaxtostr((ulong)local_68,(char *)local_48);\u000a          }\u000a          else {\u000a            string = pgVar4->gr_name;\u000a          }\u000a          string = xstrdup(string);\u000a          endgrent();\u000a        }\u000a        pcVar5 = (char *)0x0;\u000a      }\u000a      endpwent();\u000a    }\u000a    if ((__name_00 != (char *)0x0) && (pcVar5 == (char *)0x0)) {\u000a      if ((*__name_00 == '+') || (pgVar4 = getgrnam(__name_00), pgVar4 == (group *)0x0)) {\u000a        sVar2 = xstrtoul(__name_00,(char **)0x0,(ulong *)0xa,(char *)local_48);\u000a        if (((sVar2 == LONGINT_OK) && (local_48[0] >> 0x20 == 0)) &&\u000a           ((uint)local_48[0] != 0xffffffff)) {\u000a          pcVar5 = (char *)0x0;\u000a          local_68 = (uint)local_48[0];\u000a        }\u000a        else {\u000a          pcVar5 = "invalid group";\u000a        }\u000a      }\u000a      else {\u000a        pcVar5 = (char *)0x0;\u000a        local_68 = pgVar4->gr_gid;\u000a      }\u000a      endgrent();\u000a      string = xstrdup(__name_00);\u000a    }\u000a    if (pcVar5 != (char *)0x0) {\u000a      bVar1 = false;\u000a      goto LAB_004043e6;\u000a    }\u000a  }\u000a  *uid = local_6c;\u000a  if (gid != (gid_t *)0x0) {\u000a    *gid = local_68;\u000a  }\u000a  if (username != (char **)0x0) {\u000a    *username = __name;\u000a    __name = (char *)0x0;\u000a  }\u000a  bVar1 = true;\u000a  if (groupname == (char **)0x0) {\u000a    pcVar5 = (char *)0x0;\u000a  }\u000a  else {\u000a    *groupname = string;\u000a    pcVar5 = (char *)0x0;\u000a    string = (char *)0x0;\u000a  }\u000aLAB_004043e6:\u000a  free(__name);\u000a  free(string);\u000a  if (bVar1) {\u000a    __name = (char *)0x0;\u000a  }\u000a  else {\u000a    __name = (char *)dcgettext(0,pcVar5,5);\u000a  }\u000a  return __name;\u000a}\u000a\u000a
p1095
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV R14,R9\nMOV R13,RCX\nMOV R12,RDX\nMOV RBP,RSI\nMOV EAX,dword ptr [R12]\nTEST R13,R13\nJZ 0x0040418e\nMOV EDX,dword ptr [R13]\nTEST R8,R8\nJNZ 0x00404198\nJMP 0x0040419f\nMOV EDX,0xffffffff\nTEST R8,R8\nJZ 0x0040419f\nMOV qword ptr [R8],0x0\nTEST R14,R14\nJZ 0x004041ab\nMOV qword ptr [R14],0x0\nTEST RBP,RBP\nMOV qword ptr [RSP + 0x28],R12\nMOV dword ptr [RSP + 0xc],EAX\nJZ 0x004041de\nMOV qword ptr [RSP + 0x10],RDX\nMOV qword ptr [RSP + 0x18],R8\nMOV RBX,RBP\nSUB RBX,RDI\nJZ 0x004041fd\nLEA RSI,[RBX + 0x1]\nCALL 0x00404a80\nMOV R15,RAX\nMOV byte ptr [R15 + RBX*0x1],0x0\nJMP 0x00404200\nCMP byte ptr [RDI],0x0\nJZ 0x004042e5\nMOV qword ptr [RSP + 0x10],RDX\nMOV qword ptr [RSP + 0x18],R8\nCALL 0x00404ab0\nMOV R15,RAX\nXOR EBX,EBX\nJMP 0x0040420e\nXOR R15D,R15D\nLEA RAX,[RBP + 0x1]\nXOR EBX,EBX\nCMP byte ptr [RBP + 0x1],0x0\nCMOVNZ RBX,RAX\nTEST R15,R15\nMOV qword ptr [RSP + 0x20],R14\nJZ 0x00404230\nCMP byte ptr [R15],0x2b\nJNZ 0x00404247\nTEST RBP,RBP\nSETNZ CL\nTEST RBX,RBX\nSETZ DL\nTEST DL,DL\nJNZ 0x00404299\nJMP 0x004042a8\nXOR R15D,R15D\nXOR R12D,R12D\nXOR R14D,R14D\nTEST RBX,RBX\nJNZ 0x00404325\nJMP 0x0040439a\nMOV RDI,R15\nCALL 0x00401790\nTEST RBP,RBP\nSETNZ CL\nTEST RBX,RBX\nSETZ DL\nTEST RAX,RAX\nJZ 0x00404295\nMOV ECX,dword ptr [RAX + 0x10]\nMOV dword ptr [RSP + 0xc],ECX\nXOR R12D,R12D\nTEST RBP,RBP\nJZ 0x00404318\nTEST RBX,RBX\nJNZ 0x00404318\nMOV EBP,dword ptr [RAX + 0x14]\nMOV EDI,EBP\nCALL 0x004016b0\nTEST RAX,RAX\nMOV qword ptr [RSP + 0x10],RBP\nJZ 0x004042fb\nMOV RDI,qword ptr [RAX]\nJMP 0x0040430b\nTEST DL,DL\nJZ 0x004042a8\nTEST CL,CL\nJZ 0x004042a8\nMOV R14D,0x4063c2\nXOR R12D,R12D\nJMP 0x0040431b\nLEA RCX,[RSP + 0x30]\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x405825\nMOV RDI,R15\nCALL 0x00404b20\nTEST EAX,EAX\nJNZ 0x004042f0\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RCX,RAX\nSHR RCX,0x20\nJNZ 0x004042f0\nCMP EAX,-0x1\nJZ 0x004042f0\nXOR R14D,R14D\nMOV dword ptr [RSP + 0xc],EAX\nXOR R12D,R12D\nJMP 0x0040431b\nXOR R12D,R12D\nXOR R15D,R15D\nJMP 0x004043b2\nMOV R14D,0x4063a7\nXOR R12D,R12D\nJMP 0x0040431b\nLEA RSI,[RSP + 0x30]\nMOV RDI,RBP\nCALL 0x00405010\nMOV RDI,RAX\nCALL 0x00404ab0\nMOV R12,RAX\nCALL 0x00401550\nXOR R14D,R14D\nCALL 0x00401820\nTEST RBX,RBX\nJZ 0x0040439a\nTEST R14,R14\nJNZ 0x0040439a\nCMP byte ptr [RBX],0x2b\nJZ 0x00404349\nMOV RDI,RBX\nCALL 0x004017b0\nTEST RAX,RAX\nJZ 0x00404349\nMOV EAX,dword ptr [RAX + 0x10]\nMOV qword ptr [RSP + 0x10],RAX\nXOR R14D,R14D\nJMP 0x0040438a\nLEA RCX,[RSP + 0x30]\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x405825\nMOV RDI,RBX\nCALL 0x00404b20\nTEST EAX,EAX\nJNZ 0x00404384\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RCX,RAX\nSHR RCX,0x20\nJNZ 0x00404384\nCMP EAX,-0x1\nJZ 0x00404384\nXOR R14D,R14D\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x0040438a\nMOV R14D,0x4063b4\nCALL 0x00401550\nMOV RDI,RBX\nCALL 0x00404ab0\nMOV R12,RAX\nMOV R8,qword ptr [RSP + 0x18]\nTEST R14,R14\nJZ 0x004043a8\nXOR EBX,EBX\nJMP 0x004043e6\nMOV R14,qword ptr [RSP + 0x20]\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RAX,qword ptr [RSP + 0x28]\nMOV ECX,dword ptr [RSP + 0xc]\nMOV dword ptr [RAX],ECX\nTEST R13,R13\nJZ 0x004043c6\nMOV dword ptr [R13],EDX\nTEST R8,R8\nJZ 0x004043d1\nMOV qword ptr [R8],R15\nXOR R15D,R15D\nMOV BL,0x1\nTEST R14,R14\nJZ 0x004043e3\nMOV qword ptr [R14],R12\nXOR R14D,R14D\nXOR R12D,R12D\nJMP 0x004043e6\nXOR R14D,R14D\nMOV RDI,R15\nCALL 0x00401570\nMOV RDI,R12\nCALL 0x00401570\nTEST BL,BL\nJZ 0x004043fe\nXOR EAX,EAX\nJMP 0x0040440d\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,R14\nCALL 0x00401640\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1096
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n4d 89 ce\n49 89 cd\n49 89 d4\n48 89 f5\n41 8b 04 24\n4d 85 ed\n74 0b\n41 8b 55 00\n4d 85 c0\n75 0c\neb 11\nba ff ff ff ff\n4d 85 c0\n74 07\n49 c7 00 00 00 00 00\n4d 85 f6\n74 07\n49 c7 06 00 00 00 00\n48 85 ed\n4c 89 64 24 28\n89 44 24 0c\n74 25\n48 89 54 24 10\n4c 89 44 24 18\n48 89 eb\n48 29 fb\n74 32\n48 8d 73 01\ne8 ac 08 00 00\n49 89 c7\n41 c6 04 1f 00\neb 22\n80 3f 00\n0f 84 fe 00 00 00\n48 89 54 24 10\n4c 89 44 24 18\ne8 ba 08 00 00\n49 89 c7\n31 db\neb 11\n45 31 ff\n48 8d 45 01\n31 db\n80 7d 01 00\n48 0f 45 d8\n4d 85 ff\n4c 89 74 24 20\n74 18\n41 80 3f 2b\n75 29\n48 85 ed\n0f 95 c1\n48 85 db\n0f 94 c2\n84 d2\n75 6b\neb 78\n45 31 ff\n45 31 e4\n45 31 f6\n48 85 db\n0f 85 e3 00 00 00\ne9 53 01 00 00\n4c 89 ff\ne8 41 d5 ff ff\n48 85 ed\n0f 95 c1\n48 85 db\n0f 94 c2\n48 85 c0\n74 35\n8b 48 10\n89 4c 24 0c\n45 31 e4\n48 85 ed\n0f 84 a5 00 00 00\n48 85 db\n0f 85 9c 00 00 00\n8b 68 14\n89 ef\ne8 2a d4 ff ff\n48 85 c0\n48 89 6c 24 10\n74 6b\n48 8b 38\neb 76\n84 d2\n74 0f\n84 c9\n74 0b\n41 be c2 63 40 00\n45 31 e4\neb 73\n48 8d 4c 24 30\n31 f6\nba 0a 00 00 00\n41 b8 25 58 40 00\n4c 89 ff\ne8 5e 08 00 00\n85 c0\n75 2a\n48 8b 44 24 30\n48 89 c1\n48 c1 e9 20\n75 1c\n83 f8 ff\n74 17\n45 31 f6\n89 44 24 0c\n45 31 e4\neb 36\n45 31 e4\n45 31 ff\ne9 c2 00 00 00\n41 be a7 63 40 00\n45 31 e4\neb 20\n48 8d 74 24 30\n48 89 ef\ne8 08 0d 00 00\n48 89 c7\ne8 a0 07 00 00\n49 89 c4\ne8 38 d2 ff ff\n45 31 f6\ne8 00 d5 ff ff\n48 85 db\n74 75\n4d 85 f6\n75 70\n80 3b 2b\n74 1a\n48 89 df\ne8 79 d4 ff ff\n48 85 c0\n74 0d\n8b 40 10\n48 89 44 24 10\n45 31 f6\neb 41\n48 8d 4c 24 30\n31 f6\nba 0a 00 00 00\n41 b8 25 58 40 00\n48 89 df\ne8 bd 07 00 00\n85 c0\n75 1d\n48 8b 44 24 30\n48 89 c1\n48 c1 e9 20\n75 0f\n83 f8 ff\n74 0a\n45 31 f6\n48 89 44 24 10\neb 06\n41 be b4 63 40 00\ne8 c1 d1 ff ff\n48 89 df\ne8 19 07 00 00\n49 89 c4\n4c 8b 44 24 18\n4d 85 f6\n74 04\n31 db\neb 3e\n4c 8b 74 24 20\n48 8b 54 24 10\n48 8b 44 24 28\n8b 4c 24 0c\n89 08\n4d 85 ed\n74 04\n41 89 55 00\n4d 85 c0\n74 06\n4d 89 38\n45 31 ff\nb3 01\n4d 85 f6\n74 0b\n4d 89 26\n45 31 f6\n45 31 e4\neb 03\n45 31 f6\n4c 89 ff\ne8 82 d1 ff ff\n4c 89 e7\ne8 7a d1 ff ff\n84 db\n74 04\n31 c0\neb 0f\n31 ff\nba 05 00 00 00\n4c 89 f6\ne8 33 d2 ff ff\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1097
S'.text:0000000000404160\n.text:0000000000404161\n.text:0000000000404163\n.text:0000000000404165\n.text:0000000000404167\n.text:0000000000404169\n.text:000000000040416a\n.text:000000000040416e\n.text:0000000000404171\n.text:0000000000404174\n.text:0000000000404177\n.text:000000000040417a\n.text:000000000040417e\n.text:0000000000404181\n.text:0000000000404183\n.text:0000000000404187\n.text:000000000040418a\n.text:000000000040418c\n.text:000000000040418e\n.text:0000000000404193\n.text:0000000000404196\n.text:0000000000404198\n.text:000000000040419f\n.text:00000000004041a2\n.text:00000000004041a4\n.text:00000000004041ab\n.text:00000000004041ae\n.text:00000000004041b3\n.text:00000000004041b7\n.text:00000000004041b9\n.text:00000000004041be\n.text:00000000004041c3\n.text:00000000004041c6\n.text:00000000004041c9\n.text:00000000004041cb\n.text:00000000004041cf\n.text:00000000004041d4\n.text:00000000004041d7\n.text:00000000004041dc\n.text:00000000004041de\n.text:00000000004041e1\n.text:00000000004041e7\n.text:00000000004041ec\n.text:00000000004041f1\n.text:00000000004041f6\n.text:00000000004041f9\n.text:00000000004041fb\n.text:00000000004041fd\n.text:0000000000404200\n.text:0000000000404204\n.text:0000000000404206\n.text:000000000040420a\n.text:000000000040420e\n.text:0000000000404211\n.text:0000000000404216\n.text:0000000000404218\n.text:000000000040421c\n.text:000000000040421e\n.text:0000000000404221\n.text:0000000000404224\n.text:0000000000404227\n.text:000000000040422a\n.text:000000000040422c\n.text:000000000040422e\n.text:0000000000404230\n.text:0000000000404233\n.text:0000000000404236\n.text:0000000000404239\n.text:000000000040423c\n.text:0000000000404242\n.text:0000000000404247\n.text:000000000040424a\n.text:000000000040424f\n.text:0000000000404252\n.text:0000000000404255\n.text:0000000000404258\n.text:000000000040425b\n.text:000000000040425e\n.text:0000000000404260\n.text:0000000000404263\n.text:0000000000404267\n.text:000000000040426a\n.text:000000000040426d\n.text:0000000000404273\n.text:0000000000404276\n.text:000000000040427c\n.text:000000000040427f\n.text:0000000000404281\n.text:0000000000404286\n.text:0000000000404289\n.text:000000000040428e\n.text:0000000000404290\n.text:0000000000404293\n.text:0000000000404295\n.text:0000000000404297\n.text:0000000000404299\n.text:000000000040429b\n.text:000000000040429d\n.text:00000000004042a3\n.text:00000000004042a6\n.text:00000000004042a8\n.text:00000000004042ad\n.text:00000000004042af\n.text:00000000004042b4\n.text:00000000004042ba\n.text:00000000004042bd\n.text:00000000004042c2\n.text:00000000004042c4\n.text:00000000004042c6\n.text:00000000004042cb\n.text:00000000004042ce\n.text:00000000004042d2\n.text:00000000004042d4\n.text:00000000004042d7\n.text:00000000004042d9\n.text:00000000004042dc\n.text:00000000004042e0\n.text:00000000004042e3\n.text:00000000004042e5\n.text:00000000004042e8\n.text:00000000004042eb\n.text:00000000004042f0\n.text:00000000004042f6\n.text:00000000004042f9\n.text:00000000004042fb\n.text:0000000000404300\n.text:0000000000404303\n.text:0000000000404308\n.text:000000000040430b\n.text:0000000000404310\n.text:0000000000404313\n.text:0000000000404318\n.text:000000000040431b\n.text:0000000000404320\n.text:0000000000404323\n.text:0000000000404325\n.text:0000000000404328\n.text:000000000040432a\n.text:000000000040432d\n.text:000000000040432f\n.text:0000000000404332\n.text:0000000000404337\n.text:000000000040433a\n.text:000000000040433c\n.text:000000000040433f\n.text:0000000000404344\n.text:0000000000404347\n.text:0000000000404349\n.text:000000000040434e\n.text:0000000000404350\n.text:0000000000404355\n.text:000000000040435b\n.text:000000000040435e\n.text:0000000000404363\n.text:0000000000404365\n.text:0000000000404367\n.text:000000000040436c\n.text:000000000040436f\n.text:0000000000404373\n.text:0000000000404375\n.text:0000000000404378\n.text:000000000040437a\n.text:000000000040437d\n.text:0000000000404382\n.text:0000000000404384\n.text:000000000040438a\n.text:000000000040438f\n.text:0000000000404392\n.text:0000000000404397\n.text:000000000040439a\n.text:000000000040439f\n.text:00000000004043a2\n.text:00000000004043a4\n.text:00000000004043a6\n.text:00000000004043a8\n.text:00000000004043ad\n.text:00000000004043b2\n.text:00000000004043b7\n.text:00000000004043bb\n.text:00000000004043bd\n.text:00000000004043c0\n.text:00000000004043c2\n.text:00000000004043c6\n.text:00000000004043c9\n.text:00000000004043cb\n.text:00000000004043ce\n.text:00000000004043d1\n.text:00000000004043d3\n.text:00000000004043d6\n.text:00000000004043d8\n.text:00000000004043db\n.text:00000000004043de\n.text:00000000004043e1\n.text:00000000004043e3\n.text:00000000004043e6\n.text:00000000004043e9\n.text:00000000004043ee\n.text:00000000004043f1\n.text:00000000004043f6\n.text:00000000004043f8\n.text:00000000004043fa\n.text:00000000004043fc\n.text:00000000004043fe\n.text:0000000000404400\n.text:0000000000404405\n.text:0000000000404408\n.text:000000000040440d\n.text:0000000000404411\n.text:0000000000404412\n.text:0000000000404414\n.text:0000000000404416\n.text:0000000000404418\n.text:000000000040441a\n.text:000000000040441b\n'
p1098
tp1099
sS'strcaseeq2'
p1100
(S'\n__stdcall strcaseeq2()\n'
p1101
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1102
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00403eb6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403ebd\nJMP 0x00403eea\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403eea\nTEST BPL,BPL\nJZ 0x00403ee5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403f00\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1103
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 ad 10 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1104
S'.text:0000000000403e80\n.text:0000000000403e81\n.text:0000000000403e83\n.text:0000000000403e85\n.text:0000000000403e87\n.text:0000000000403e89\n.text:0000000000403e8a\n.text:0000000000403e8b\n.text:0000000000403e8e\n.text:0000000000403e91\n.text:0000000000403e94\n.text:0000000000403e97\n.text:0000000000403e99\n.text:0000000000403e9c\n.text:0000000000403e9e\n.text:0000000000403ea3\n.text:0000000000403ea7\n.text:0000000000403ea9\n.text:0000000000403eab\n.text:0000000000403eae\n.text:0000000000403eb0\n.text:0000000000403eb2\n.text:0000000000403eb4\n.text:0000000000403eb6\n.text:0000000000403eb8\n.text:0000000000403ebb\n.text:0000000000403ebd\n.text:0000000000403ec0\n.text:0000000000403ec2\n.text:0000000000403ec6\n.text:0000000000403eca\n.text:0000000000403ece\n.text:0000000000403ed2\n.text:0000000000403ed5\n.text:0000000000403ed9\n.text:0000000000403eda\n.text:0000000000403edc\n.text:0000000000403ede\n.text:0000000000403ee0\n.text:0000000000403ee2\n.text:0000000000403ee3\n.text:0000000000403ee5\n.text:0000000000403eea\n.text:0000000000403eee\n.text:0000000000403eef\n.text:0000000000403ef1\n.text:0000000000403ef3\n.text:0000000000403ef5\n.text:0000000000403ef7\n.text:0000000000403ef8\n'
p1105
tp1106
sS'strcaseeq1'
p1107
(S'\n__stdcall strcaseeq1()\n'
p1108
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x00403e2d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403e34\nJMP 0x00403e67\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403e67\nTEST BPL,BPL\nJZ 0x00403e62\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403e80\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1110
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 36 11 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1111
S'.text:0000000000403df0\n.text:0000000000403df1\n.text:0000000000403df3\n.text:0000000000403df5\n.text:0000000000403df7\n.text:0000000000403df9\n.text:0000000000403dfa\n.text:0000000000403dfb\n.text:0000000000403e00\n.text:0000000000403e03\n.text:0000000000403e06\n.text:0000000000403e09\n.text:0000000000403e0b\n.text:0000000000403e0e\n.text:0000000000403e13\n.text:0000000000403e15\n.text:0000000000403e1a\n.text:0000000000403e1e\n.text:0000000000403e20\n.text:0000000000403e22\n.text:0000000000403e25\n.text:0000000000403e27\n.text:0000000000403e29\n.text:0000000000403e2b\n.text:0000000000403e2d\n.text:0000000000403e2f\n.text:0000000000403e32\n.text:0000000000403e34\n.text:0000000000403e37\n.text:0000000000403e39\n.text:0000000000403e3d\n.text:0000000000403e41\n.text:0000000000403e45\n.text:0000000000403e4b\n.text:0000000000403e4f\n.text:0000000000403e52\n.text:0000000000403e56\n.text:0000000000403e57\n.text:0000000000403e59\n.text:0000000000403e5b\n.text:0000000000403e5d\n.text:0000000000403e5f\n.text:0000000000403e60\n.text:0000000000403e62\n.text:0000000000403e67\n.text:0000000000403e6b\n.text:0000000000403e6c\n.text:0000000000403e6e\n.text:0000000000403e70\n.text:0000000000403e72\n.text:0000000000403e74\n.text:0000000000403e75\n'
p1112
tp1113
sS'strcaseeq4'
p1114
(S'\n__stdcall strcaseeq4()\n'
p1115
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1116
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00403f9c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403fa3\nJMP 0x00403fc4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403fc4\nTEST BPL,BPL\nJZ 0x00403fbf\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403fd0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1117
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 c7 0f 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1118
S'.text:0000000000403f70\n.text:0000000000403f71\n.text:0000000000403f73\n.text:0000000000403f75\n.text:0000000000403f76\n.text:0000000000403f77\n.text:0000000000403f7a\n.text:0000000000403f7d\n.text:0000000000403f7f\n.text:0000000000403f82\n.text:0000000000403f84\n.text:0000000000403f89\n.text:0000000000403f8d\n.text:0000000000403f8f\n.text:0000000000403f91\n.text:0000000000403f94\n.text:0000000000403f96\n.text:0000000000403f98\n.text:0000000000403f9a\n.text:0000000000403f9c\n.text:0000000000403f9e\n.text:0000000000403fa1\n.text:0000000000403fa3\n.text:0000000000403fa6\n.text:0000000000403fa8\n.text:0000000000403fac\n.text:0000000000403fb0\n.text:0000000000403fb3\n.text:0000000000403fb7\n.text:0000000000403fb8\n.text:0000000000403fba\n.text:0000000000403fbc\n.text:0000000000403fbd\n.text:0000000000403fbf\n.text:0000000000403fc4\n.text:0000000000403fc8\n.text:0000000000403fc9\n.text:0000000000403fcb\n.text:0000000000403fcd\n.text:0000000000403fce\n'
p1119
tp1120
sS'FUN_00401540'
p1121
(S'\n__stdcall FUN_00401540()\n'
p1122
V\u000avoid FUN_00401540(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00609010)();\u000a  return;\u000a}\u000a\u000a
p1123
S'PUSH qword ptr [0x00609008]\nJMP qword ptr [0x00609010]\n'
p1124
S'ff 35 c2 7a 20 00\nff 25 c4 7a 20 00\n'
p1125
S'.plt:0000000000401540\n.plt:0000000000401546\n'
p1126
tp1127
sS'getpwnam'
p1128
(S'\n__stdcall getpwnam(char * __name)\n'
p1129
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000apasswd * getpwnam(char *__name)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  \u000a  ppVar1 = (passwd *)(*(code *)PTR_getpwnam_00609138)();\u000a  return ppVar1;\u000a}\u000a\u000a
p1130
S'JMP qword ptr [0x00609138]\n'
p1131
S'ff 25 a2 79 20 00\n'
p1132
S'.plt:0000000000401790\n'
p1133
tp1134
sS'strcaseeq3'
p1135
(S'\n__stdcall strcaseeq3()\n'
p1136
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1137
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404f50\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00403f30\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403f37\nJMP 0x00403f5a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403f5a\nTEST BPL,BPL\nJZ 0x00403f55\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403f70\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1138
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 33 10 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1139
S'.text:0000000000403f00\n.text:0000000000403f01\n.text:0000000000403f03\n.text:0000000000403f05\n.text:0000000000403f07\n.text:0000000000403f08\n.text:0000000000403f0b\n.text:0000000000403f0e\n.text:0000000000403f11\n.text:0000000000403f13\n.text:0000000000403f16\n.text:0000000000403f18\n.text:0000000000403f1d\n.text:0000000000403f21\n.text:0000000000403f23\n.text:0000000000403f25\n.text:0000000000403f28\n.text:0000000000403f2a\n.text:0000000000403f2c\n.text:0000000000403f2e\n.text:0000000000403f30\n.text:0000000000403f32\n.text:0000000000403f35\n.text:0000000000403f37\n.text:0000000000403f3a\n.text:0000000000403f3c\n.text:0000000000403f40\n.text:0000000000403f44\n.text:0000000000403f48\n.text:0000000000403f4b\n.text:0000000000403f4c\n.text:0000000000403f4e\n.text:0000000000403f50\n.text:0000000000403f52\n.text:0000000000403f53\n.text:0000000000403f55\n.text:0000000000403f5a\n.text:0000000000403f5b\n.text:0000000000403f5d\n.text:0000000000403f5f\n.text:0000000000403f61\n.text:0000000000403f62\n'
p1140
tp1141
sS'register_tm_clones'
p1142
(S'\n__stdcall register_tm_clones()\n'
p1143
V\u000a/* WARNING: Removing unreachable block (ram,0x00401a13) */\u000a/* WARNING: Removing unreachable block (ram,0x00401a1d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1144
S'MOV ESI,0x6092a8\nPUSH RBP\nSUB RSI,0x6092a8\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401a28\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401a28\nPOP RBP\nMOV EDI,0x6092a8\nJMP RAX\nPOP RBP\nRET\n'
p1145
S'be a8 92 60 00\n55\n48 81 ee a8 92 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf a8 92 60 00\nff e0\n5d\nc3\n'
p1146
S'.text:00000000004019f0\n.text:00000000004019f5\n.text:00000000004019f6\n.text:00000000004019fd\n.text:0000000000401a01\n.text:0000000000401a04\n.text:0000000000401a07\n.text:0000000000401a0b\n.text:0000000000401a0e\n.text:0000000000401a11\n.text:0000000000401a13\n.text:0000000000401a18\n.text:0000000000401a1b\n.text:0000000000401a1d\n.text:0000000000401a1e\n.text:0000000000401a23\n.text:0000000000401a28\n.text:0000000000401a29\n'
p1147
tp1148
sS'gettext_quote'
p1149
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1150
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_004063a0;\u000a        pcVar2 = &DAT_004063a4;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1151
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401640\nCMP RAX,RBX\nJNZ 0x00403d68\nCALL 0x00405070\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00403d70\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403d18\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406390\nMOV EAX,0x406394\nJMP 0x00403d64\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00403d70\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403d56\nCMP byte ptr [RBX],0x60\nMOV ECX,0x4063a0\nMOV EAX,0x4063a4\nJMP 0x00403d64\nCMP R14D,0x9\nMOV ECX,0x406384\nMOV EAX,0x406388\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1152
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 77 d9 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 99 13 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 90 63 40 00\nb8 94 63 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 a0 63 40 00\nb8 a4 63 40 00\neb 0e\n41 83 fe 09\nb9 84 63 40 00\nb8 88 63 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1153
S'.text:0000000000403cb0\n.text:0000000000403cb1\n.text:0000000000403cb3\n.text:0000000000403cb4\n.text:0000000000403cb7\n.text:0000000000403cba\n.text:0000000000403cbc\n.text:0000000000403cc1\n.text:0000000000403cc4\n.text:0000000000403cc9\n.text:0000000000403ccc\n.text:0000000000403cd2\n.text:0000000000403cd7\n.text:0000000000403cda\n.text:0000000000403cdf\n.text:0000000000403ce4\n.text:0000000000403ce9\n.text:0000000000403cef\n.text:0000000000403cf5\n.text:0000000000403cf8\n.text:0000000000403cfa\n.text:0000000000403cfc\n.text:0000000000403d01\n.text:0000000000403d05\n.text:0000000000403d07\n.text:0000000000403d09\n.text:0000000000403d0c\n.text:0000000000403d11\n.text:0000000000403d16\n.text:0000000000403d18\n.text:0000000000403d1d\n.text:0000000000403d22\n.text:0000000000403d27\n.text:0000000000403d2d\n.text:0000000000403d33\n.text:0000000000403d36\n.text:0000000000403d38\n.text:0000000000403d3a\n.text:0000000000403d3f\n.text:0000000000403d43\n.text:0000000000403d45\n.text:0000000000403d47\n.text:0000000000403d4a\n.text:0000000000403d4f\n.text:0000000000403d54\n.text:0000000000403d56\n.text:0000000000403d5a\n.text:0000000000403d5f\n.text:0000000000403d64\n.text:0000000000403d68\n.text:0000000000403d69\n.text:0000000000403d6b\n.text:0000000000403d6c\n'
p1154
tp1155
sS'xstrtoul'
p1156
(S'\n__stdcall xstrtoul(char * s, char * * ptr, ulong * val, char * valid_suffixes)\n'
p1157
V\u000astrtol_error xstrtoul(char *s,char **ptr,ulong *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  ulong local_48;\u000a  ulong *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)"\u000a                 );\u000a  }\u000a  local_40 = (ulong *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoul(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00404d56;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00404d56;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00404c85_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00404c63:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00404c63;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00404d37;\u000a  default:\u000aswitchD_00404c85_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00404d37;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00404d37:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00404d56:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p1158
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00404d73\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401590\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401970\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00404b70\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00404d62\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x004018e0\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00404bd0\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00404c01\nCMP EAX,0x22\nJNZ 0x00404d62\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x00404c0c\nJMP 0x00404d56\nTEST R12,R12\nJZ 0x00404d62\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00404d62\nMOV RDI,R12\nCALL 0x004016a0\nTEST RAX,RAX\nJZ 0x00404d62\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x00404c0c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00404d56\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00404d56\nMOV RDI,R12\nCALL 0x004016a0\nTEST RAX,RAX\nJZ 0x00404c9e\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x004016a0\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00404c63\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x00404c6a\nCMP EAX,0x44\nJZ 0x00404c6a\nCMP EAX,0x69\nJNZ 0x00404c63\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00404c74\nMOV EBP,0x1\nJMP 0x00404c74\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00404c9e\nXOR EAX,EAX\nJMP qword ptr [0x406740 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00404dc0\nJMP 0x00404d3c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00404d62\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00404dc0\nJMP 0x00404d3c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00404dc0\nJMP 0x00404d3c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00404dc0\nJMP 0x00404d3c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00404d37\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00404dc0\nJMP 0x00404d3c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00404dc0\nJMP 0x00404d3c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00404dc0\nJMP 0x00404d3c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00404dc0\nJMP 0x00404d3c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00404d37\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00404d90\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4068f0\nMOV ESI,0x406916\nMOV EDX,0x60\nMOV ECX,0x406926\nCALL 0x004016e0\n'
p1159
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 42 ca ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 13 ce ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 3c cd ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 b4 ca ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 7c ca ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 6a ca ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd 40 67 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf f0 68 40 00\nbe 16 69 40 00\nba 60 00 00 00\nb9 26 69 40 00\ne8 54 c9 ff ff\n'
p1160
S'.text:0000000000404b20\n.text:0000000000404b21\n.text:0000000000404b23\n.text:0000000000404b25\n.text:0000000000404b27\n.text:0000000000404b29\n.text:0000000000404b2a\n.text:0000000000404b2e\n.text:0000000000404b31\n.text:0000000000404b34\n.text:0000000000404b37\n.text:0000000000404b3a\n.text:0000000000404b3e\n.text:0000000000404b44\n.text:0000000000404b49\n.text:0000000000404b4e\n.text:0000000000404b51\n.text:0000000000404b58\n.text:0000000000404b5d\n.text:0000000000404b60\n.text:0000000000404b63\n.text:0000000000404b70\n.text:0000000000404b73\n.text:0000000000404b76\n.text:0000000000404b7b\n.text:0000000000404b7d\n.text:0000000000404b80\n.text:0000000000404b85\n.text:0000000000404b89\n.text:0000000000404b8e\n.text:0000000000404b90\n.text:0000000000404b96\n.text:0000000000404b99\n.text:0000000000404b9c\n.text:0000000000404b9f\n.text:0000000000404ba4\n.text:0000000000404ba8\n.text:0000000000404bac\n.text:0000000000404baf\n.text:0000000000404bb1\n.text:0000000000404bb4\n.text:0000000000404bb6\n.text:0000000000404bb8\n.text:0000000000404bbb\n.text:0000000000404bc1\n.text:0000000000404bc6\n.text:0000000000404bc9\n.text:0000000000404bcb\n.text:0000000000404bd0\n.text:0000000000404bd3\n.text:0000000000404bd9\n.text:0000000000404bdc\n.text:0000000000404bde\n.text:0000000000404be4\n.text:0000000000404be7\n.text:0000000000404bec\n.text:0000000000404bef\n.text:0000000000404bf5\n.text:0000000000404bfd\n.text:0000000000404bff\n.text:0000000000404c01\n.text:0000000000404c03\n.text:0000000000404c06\n.text:0000000000404c0c\n.text:0000000000404c10\n.text:0000000000404c14\n.text:0000000000404c16\n.text:0000000000404c1c\n.text:0000000000404c1f\n.text:0000000000404c24\n.text:0000000000404c27\n.text:0000000000404c29\n.text:0000000000404c2e\n.text:0000000000404c31\n.text:0000000000404c36\n.text:0000000000404c3b\n.text:0000000000404c3e\n.text:0000000000404c40\n.text:0000000000404c44\n.text:0000000000404c47\n.text:0000000000404c49\n.text:0000000000404c4c\n.text:0000000000404c4e\n.text:0000000000404c51\n.text:0000000000404c53\n.text:0000000000404c55\n.text:0000000000404c59\n.text:0000000000404c5c\n.text:0000000000404c61\n.text:0000000000404c63\n.text:0000000000404c68\n.text:0000000000404c6a\n.text:0000000000404c6f\n.text:0000000000404c74\n.text:0000000000404c78\n.text:0000000000404c7b\n.text:0000000000404c7e\n.text:0000000000404c81\n.text:0000000000404c83\n.text:0000000000404c85\n.text:0000000000404c8c\n.text:0000000000404c8f\n.text:0000000000404c94\n.text:0000000000404c99\n.text:0000000000404c9e\n.text:0000000000404ca2\n.text:0000000000404ca7\n.text:0000000000404caa\n.text:0000000000404cad\n.text:0000000000404cb2\n.text:0000000000404cb5\n.text:0000000000404cba\n.text:0000000000404cbf\n.text:0000000000404cc1\n.text:0000000000404cc4\n.text:0000000000404cc9\n.text:0000000000404cce\n.text:0000000000404cd0\n.text:0000000000404cd3\n.text:0000000000404cd8\n.text:0000000000404cdd\n.text:0000000000404cdf\n.text:0000000000404ce2\n.text:0000000000404ce7\n.text:0000000000404ce9\n.text:0000000000404cec\n.text:0000000000404cf1\n.text:0000000000404cf6\n.text:0000000000404cf8\n.text:0000000000404cfb\n.text:0000000000404d00\n.text:0000000000404d05\n.text:0000000000404d07\n.text:0000000000404d0a\n.text:0000000000404d0f\n.text:0000000000404d14\n.text:0000000000404d16\n.text:0000000000404d19\n.text:0000000000404d1e\n.text:0000000000404d23\n.text:0000000000404d25\n.text:0000000000404d28\n.text:0000000000404d2d\n.text:0000000000404d2f\n.text:0000000000404d32\n.text:0000000000404d37\n.text:0000000000404d3c\n.text:0000000000404d3e\n.text:0000000000404d42\n.text:0000000000404d46\n.text:0000000000404d4a\n.text:0000000000404d4c\n.text:0000000000404d4f\n.text:0000000000404d53\n.text:0000000000404d56\n.text:0000000000404d5a\n.text:0000000000404d5f\n.text:0000000000404d62\n.text:0000000000404d64\n.text:0000000000404d68\n.text:0000000000404d69\n.text:0000000000404d6b\n.text:0000000000404d6d\n.text:0000000000404d6f\n.text:0000000000404d71\n.text:0000000000404d72\n.text:0000000000404d73\n.text:0000000000404d78\n.text:0000000000404d7d\n.text:0000000000404d82\n.text:0000000000404d87\n'
p1161
tp1162
sS'c_islower'
p1163
(S'\n__stdcall c_islower()\n'
p1164
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1165
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1166
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1167
S'.text:0000000000404ef0\n.text:0000000000404ef3\n.text:0000000000404ef6\n.text:0000000000404ef9\n'
p1168
tp1169
sS'fclose'
p1170
(S'\n__stdcall fclose(FILE * __stream)\n'
p1171
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00609078)();\u000a  return iVar1;\u000a}\u000a\u000a
p1172
S'JMP qword ptr [0x00609078]\n'
p1173
S'ff 25 62 7a 20 00\n'
p1174
S'.plt:0000000000401610\n'
p1175
tp1176
sS'__ctype_get_mb_cur_max'
p1177
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1178
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_00609098)();\u000a  return sVar1;\u000a}\u000a\u000a
p1179
S'JMP qword ptr [0x00609098]\n'
p1180
S'ff 25 42 7a 20 00\n'
p1181
S'.plt:0000000000401650\n'
p1182
tp1183
sS'quotearg_n_style'
p1184
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1185
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1186
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x004039e0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x004037b0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1187
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1188
S'.text:00000000004039a0\n.text:00000000004039a1\n.text:00000000004039a3\n.text:00000000004039a4\n.text:00000000004039a8\n.text:00000000004039ab\n.text:00000000004039ad\n.text:00000000004039b2\n.text:00000000004039b5\n.text:00000000004039ba\n.text:00000000004039c1\n.text:00000000004039c3\n.text:00000000004039c6\n.text:00000000004039c9\n.text:00000000004039ce\n.text:00000000004039d2\n.text:00000000004039d3\n.text:00000000004039d5\n.text:00000000004039d6\n'
p1189
tp1190
sS'mgetgroups'
p1191
(S'\n__stdcall mgetgroups(char * username, gid_t * * groups)\n'
p1192
V\u000aint mgetgroups(char *username,gid_t **groups)\u000a\u000a{\u000a  gid_t gVar1;\u000a  gid_t gVar2;\u000a  __gid_t __group;\u000a  int iVar3;\u000a  uint uVar4;\u000a  gid_t *__groups;\u000a  gid_t *pgVar5;\u000a  int *piVar6;\u000a  gid_t **in_RDX;\u000a  gid_t *pgVar7;\u000a  uint uVar8;\u000a  uint local_3c;\u000a  gid_t **local_38;\u000a  \u000a  __group = (__gid_t)groups;\u000a  if (username == (char *)0x0) {\u000a    local_3c = getgroups(0,(__gid_t *)0x0);\u000a    if ((int)local_3c < 0) {\u000a      piVar6 = __errno_location();\u000a      uVar8 = 0xffffffff;\u000a      if ((*piVar6 == 0x26) &&\u000a         (__groups = realloc_groupbuf((gid_t *)0x0,1), __groups != (gid_t *)0x0)) {\u000a        *in_RDX = __groups;\u000a        *__groups = __group;\u000a        uVar8 = (uint)(__group != 0xffffffff);\u000a      }\u000a    }\u000a    else {\u000a      if ((__group != 0xffffffff) || (local_3c == 0)) {\u000a        local_3c = local_3c + 1;\u000a      }\u000a      __groups = realloc_groupbuf((gid_t *)0x0,(long)(int)local_3c);\u000a      uVar8 = 0xffffffff;\u000a      if (__groups != (gid_t *)0x0) {\u000a        uVar4 = getgroups(local_3c - (uint)(__group != 0xffffffff),\u000a                          __groups + (ulong)(__group != 0xffffffff));\u000a        if ((int)uVar4 < 0) {\u000a          piVar6 = __errno_location();\u000a          iVar3 = *piVar6;\u000a          free(__groups);\u000a          *piVar6 = iVar3;\u000a        }\u000a        else {\u000a          if (__group != 0xffffffff) {\u000a            *__groups = __group;\u000a            uVar4 = uVar4 + 1;\u000a          }\u000a          *in_RDX = __groups;\u000a          uVar8 = uVar4;\u000a          if (1 < (int)uVar4) {\u000a            gVar1 = *__groups;\u000a            pgVar5 = __groups + (long)(int)uVar4;\u000a            pgVar7 = __groups + 1;\u000a            uVar8 = uVar4;\u000a            do {\u000a              gVar2 = *pgVar7;\u000a              if ((gVar2 == gVar1) || (gVar2 == *__groups)) {\u000a                uVar8 = uVar8 - 1;\u000a              }\u000a              else {\u000a                __groups[1] = gVar2;\u000a                __groups = __groups + 1;\u000a              }\u000a              pgVar7 = pgVar7 + 1;\u000a            } while (pgVar7 < pgVar5);\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    local_3c = 10;\u000a    __groups = realloc_groupbuf((gid_t *)0x0,10);\u000a    uVar8 = 0xffffffff;\u000a    local_38 = in_RDX;\u000a    if (__groups != (gid_t *)0x0) {\u000a      do {\u000a        uVar8 = local_3c;\u000a        iVar3 = getgrouplist(username,__group,__groups,(int *)&local_3c);\u000a        if ((iVar3 < 0) && (uVar8 == local_3c)) {\u000a          local_3c = local_3c * 2;\u000a        }\u000a        pgVar5 = realloc_groupbuf(__groups,(long)(int)local_3c);\u000a        if (pgVar5 == (gid_t *)0x0) {\u000a          piVar6 = __errno_location();\u000a          iVar3 = *piVar6;\u000a          free(__groups);\u000a          *piVar6 = iVar3;\u000a          return -1;\u000a        }\u000a        __groups = pgVar5;\u000a      } while (iVar3 < 0);\u000a      *local_38 = pgVar5;\u000a      uVar8 = local_3c;\u000a    }\u000a  }\u000a  return (int)uVar8;\u000a}\u000a\u000a
p1193
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RDX\nMOV R12D,ESI\nMOV RBP,RDI\nTEST RBP,RBP\nJZ 0x00405450\nMOV dword ptr [RSP + 0xc],0xa\nXOR EDI,EDI\nMOV ESI,0xa\nCALL 0x00405580\nMOV RBX,RAX\nMOV R13D,0xffffffff\nTEST RBX,RBX\nJZ 0x00405567\nMOV R15D,R12D\nMOV qword ptr [RSP + 0x10],R14\nNOP\nMOV R12D,dword ptr [RSP + 0xc]\nMOV RDI,RBP\nMOV ESI,R15D\nMOV RDX,RBX\nLEA RCX,[RSP + 0xc]\nCALL 0x004018a0\nMOV R14D,EAX\nTEST R14D,R14D\nJNS 0x00405420\nMOV EAX,dword ptr [RSP + 0xc]\nCMP R12D,EAX\nJNZ 0x00405420\nADD EAX,EAX\nMOV dword ptr [RSP + 0xc],EAX\nNOP\nMOVSXD RSI,dword ptr [RSP + 0xc]\nMOV RDI,RBX\nCALL 0x00405580\nTEST RAX,RAX\nJZ 0x004054db\nTEST R14D,R14D\nMOV RBX,RAX\nJS 0x004053f0\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RCX],RAX\nMOV R13D,dword ptr [RSP + 0xc]\nJMP 0x00405567\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x004017d0\nMOV dword ptr [RSP + 0xc],EAX\nTEST EAX,EAX\nJS 0x004054f5\nCMP R12D,-0x1\nJNZ 0x0040546f\nTEST EAX,EAX\nJNZ 0x00405473\nINC dword ptr [RSP + 0xc]\nMOVSXD RSI,dword ptr [RSP + 0xc]\nXOR EDI,EDI\nCALL 0x00405580\nMOV R15,RAX\nMOV R13D,0xffffffff\nTEST R15,R15\nJZ 0x00405567\nMOV EDI,dword ptr [RSP + 0xc]\nXOR EAX,EAX\nCMP R12D,-0x1\nSETNZ AL\nSUB EDI,EAX\nLEA RSI,[R15 + RAX*0x4]\nCALL 0x004017d0\nTEST EAX,EAX\nJS 0x00405529\nCMP R12D,-0x1\nJZ 0x004054b8\nMOV dword ptr [R15],R12D\nINC EAX\nMOV R13D,EAX\nMOV qword ptr [R14],R15\nCMP R13D,0x2\nJL 0x00405567\nMOV EAX,dword ptr [R15]\nMOVSXD RCX,R13D\nLEA RCX,[R15 + RCX*0x4]\nMOV RDX,R15\nADD RDX,0x4\nJMP 0x00405550\nCALL 0x00401590\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV RDI,RBX\nCALL 0x00401570\nMOV dword ptr [RBP],R14D\nJMP 0x00405567\nCALL 0x00401590\nMOV R13D,0xffffffff\nCMP dword ptr [RAX],0x26\nJNZ 0x00405567\nXOR EDI,EDI\nMOV ESI,0x1\nCALL 0x00405580\nTEST RAX,RAX\nJZ 0x00405567\nMOV qword ptr [R14],RAX\nMOV dword ptr [RAX],R12D\nXOR R13D,R13D\nCMP R12D,-0x1\nSETNZ R13B\nJMP 0x00405567\nCALL 0x00401590\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nMOV RDI,R15\nCALL 0x00401570\nMOV dword ptr [RBX],EBP\nJMP 0x00405567\nMOV dword ptr [R15 + 0x4],ESI\nADD R15,0x4\nJMP 0x0040555e\nMOV ESI,dword ptr [RDX]\nCMP ESI,EAX\nJZ 0x0040555b\nCMP ESI,dword ptr [R15]\nJNZ 0x0040553f\nDEC R13D\nADD RDX,0x4\nCMP RDX,RCX\nJC 0x00405550\nMOV EAX,R13D\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1194
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 d6\n41 89 f4\n48 89 fd\n48 85 ed\n0f 84 90 00 00 00\nc7 44 24 0c 0a 00 00 00\n31 ff\nbe 0a 00 00 00\ne8 ac 01 00 00\n48 89 c3\n41 bd ff ff ff ff\n48 85 db\n0f 84 81 01 00 00\n45 89 e7\n4c 89 74 24 10\n66 90\n44 8b 64 24 0c\n48 89 ef\n44 89 fe\n48 89 da\n48 8d 4c 24 0c\ne8 98 c4 ff ff\n41 89 c6\n45 85 f6\n79 10\n8b 44 24 0c\n41 39 c4\n75 07\n01 c0\n89 44 24 0c\n90\n48 63 74 24 0c\n48 89 df\ne8 53 01 00 00\n48 85 c0\n0f 84 a5 00 00 00\n45 85 f6\n48 89 c3\n78 b2\n48 8b 4c 24 10\n48 89 01\n44 8b 6c 24 0c\ne9 17 01 00 00\n31 ff\n31 f6\ne8 77 c3 ff ff\n89 44 24 0c\n85 c0\n0f 88 90 00 00 00\n41 83 fc ff\n75 04\n85 c0\n75 04\nff 44 24 0c\n48 63 74 24 0c\n31 ff\ne8 01 01 00 00\n49 89 c7\n41 bd ff ff ff ff\n4d 85 ff\n0f 84 d6 00 00 00\n8b 7c 24 0c\n31 c0\n41 83 fc ff\n0f 95 c0\n29 c7\n49 8d 34 87\ne8 27 c3 ff ff\n85 c0\n78 7c\n41 83 fc ff\n74 05\n45 89 27\nff c0\n41 89 c5\n4d 89 3e\n41 83 fd 02\n0f 8c 9f 00 00 00\n41 8b 07\n49 63 cd\n49 8d 0c 8f\n4c 89 fa\n48 83 c2 04\neb 75\ne8 b0 c0 ff ff\n48 89 c5\n44 8b 75 00\n48 89 df\ne8 81 c0 ff ff\n44 89 75 00\neb 72\ne8 96 c0 ff ff\n41 bd ff ff ff ff\n83 38 26\n75 62\n31 ff\nbe 01 00 00 00\ne8 6f 00 00 00\n48 85 c0\n74 51\n49 89 06\n44 89 20\n45 31 ed\n41 83 fc ff\n41 0f 95 c5\neb 3e\ne8 62 c0 ff ff\n48 89 c3\n8b 2b\n4c 89 ff\ne8 35 c0 ff ff\n89 2b\neb 28\n41 89 77 04\n49 83 c7 04\neb 15\n8b 32\n39 c6\n74 05\n41 3b 37\n75 e4\n41 ff cd\n48 83 c2 04\n48 39 ca\n72 e9\n44 89 e8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1195
S'.text:00000000004053a0\n.text:00000000004053a1\n.text:00000000004053a3\n.text:00000000004053a5\n.text:00000000004053a7\n.text:00000000004053a9\n.text:00000000004053aa\n.text:00000000004053ae\n.text:00000000004053b1\n.text:00000000004053b4\n.text:00000000004053b7\n.text:00000000004053ba\n.text:00000000004053c0\n.text:00000000004053c8\n.text:00000000004053ca\n.text:00000000004053cf\n.text:00000000004053d4\n.text:00000000004053d7\n.text:00000000004053dd\n.text:00000000004053e0\n.text:00000000004053e6\n.text:00000000004053e9\n.text:00000000004053ee\n.text:00000000004053f0\n.text:00000000004053f5\n.text:00000000004053f8\n.text:00000000004053fb\n.text:00000000004053fe\n.text:0000000000405403\n.text:0000000000405408\n.text:000000000040540b\n.text:000000000040540e\n.text:0000000000405410\n.text:0000000000405414\n.text:0000000000405417\n.text:0000000000405419\n.text:000000000040541b\n.text:000000000040541f\n.text:0000000000405420\n.text:0000000000405425\n.text:0000000000405428\n.text:000000000040542d\n.text:0000000000405430\n.text:0000000000405436\n.text:0000000000405439\n.text:000000000040543c\n.text:000000000040543e\n.text:0000000000405443\n.text:0000000000405446\n.text:000000000040544b\n.text:0000000000405450\n.text:0000000000405452\n.text:0000000000405454\n.text:0000000000405459\n.text:000000000040545d\n.text:000000000040545f\n.text:0000000000405465\n.text:0000000000405469\n.text:000000000040546b\n.text:000000000040546d\n.text:000000000040546f\n.text:0000000000405473\n.text:0000000000405478\n.text:000000000040547a\n.text:000000000040547f\n.text:0000000000405482\n.text:0000000000405488\n.text:000000000040548b\n.text:0000000000405491\n.text:0000000000405495\n.text:0000000000405497\n.text:000000000040549b\n.text:000000000040549e\n.text:00000000004054a0\n.text:00000000004054a4\n.text:00000000004054a9\n.text:00000000004054ab\n.text:00000000004054ad\n.text:00000000004054b1\n.text:00000000004054b3\n.text:00000000004054b6\n.text:00000000004054b8\n.text:00000000004054bb\n.text:00000000004054be\n.text:00000000004054c2\n.text:00000000004054c8\n.text:00000000004054cb\n.text:00000000004054ce\n.text:00000000004054d2\n.text:00000000004054d5\n.text:00000000004054d9\n.text:00000000004054db\n.text:00000000004054e0\n.text:00000000004054e3\n.text:00000000004054e7\n.text:00000000004054ea\n.text:00000000004054ef\n.text:00000000004054f3\n.text:00000000004054f5\n.text:00000000004054fa\n.text:0000000000405500\n.text:0000000000405503\n.text:0000000000405505\n.text:0000000000405507\n.text:000000000040550c\n.text:0000000000405511\n.text:0000000000405514\n.text:0000000000405516\n.text:0000000000405519\n.text:000000000040551c\n.text:000000000040551f\n.text:0000000000405523\n.text:0000000000405527\n.text:0000000000405529\n.text:000000000040552e\n.text:0000000000405531\n.text:0000000000405533\n.text:0000000000405536\n.text:000000000040553b\n.text:000000000040553d\n.text:000000000040553f\n.text:0000000000405543\n.text:0000000000405547\n.text:0000000000405550\n.text:0000000000405552\n.text:0000000000405554\n.text:0000000000405556\n.text:0000000000405559\n.text:000000000040555b\n.text:000000000040555e\n.text:0000000000405562\n.text:0000000000405565\n.text:0000000000405567\n.text:000000000040556a\n.text:000000000040556e\n.text:000000000040556f\n.text:0000000000405571\n.text:0000000000405573\n.text:0000000000405575\n.text:0000000000405577\n.text:0000000000405578\n'
p1196
tp1197
sS'fwrite'
p1198
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1199
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_00609200)();\u000a  return sVar1;\u000a}\u000a\u000a
p1200
S'JMP qword ptr [0x00609200]\n'
p1201
S'ff 25 da 78 20 00\n'
p1202
S'.plt:0000000000401920\n'
p1203
tp1204
sS'quote_n'
p1205
(S'\n__stdcall quote_n(char * arg)\n'
p1206
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1207
S'MOV RDX,-0x1\nJMP 0x00403c70\n'
p1208
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1209
S'.text:0000000000403c90\n.text:0000000000403c97\n'
p1210
tp1211
sS'quotearg_alloc'
p1212
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1213
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1214
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00403620\n'
p1215
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1216
S'.text:0000000000403610\n.text:0000000000403613\n.text:0000000000403615\n.text:0000000000403618\n'
p1217
tp1218
sS'__do_global_dtors_aux'
p1219
(S'\n__stdcall __do_global_dtors_aux()\n'
p1220
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1221
S'CMP byte ptr [0x00609308],0x0\nJNZ 0x00401a4a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x004019b0\nPOP RBP\nMOV byte ptr [0x00609308],0x1\nRET\n'
p1222
S'80 3d d1 78 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 be 78 20 00 01\nf3 c3\n'
p1223
S'.text:0000000000401a30\n.text:0000000000401a37\n.text:0000000000401a39\n.text:0000000000401a3a\n.text:0000000000401a3d\n.text:0000000000401a42\n.text:0000000000401a43\n.text:0000000000401a4a\n'
p1224
tp1225
sS'close_stdout_set_file_name'
p1226
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1227
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1228
S'MOV qword ptr [0x00609310],RDI\nRET\n'
p1229
S'48 89 3d 39 6c 20 00\nc3\n'
p1230
S'.text:00000000004026d0\n.text:00000000004026d7\n'
p1231
tp1232
sS'c_isprint'
p1233
(S'\n__stdcall c_isprint()\n'
p1234
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1235
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1236
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1237
S'.text:0000000000404f00\n.text:0000000000404f03\n.text:0000000000404f06\n.text:0000000000404f09\n'
p1238
tp1239
sS'_fini'
p1240
(S'\n__stdcall _fini()\n'
p1241
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1242
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1243
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1244
S'.fini:000000000040579c\n.fini:00000000004057a0\n.fini:00000000004057a4\n'
p1245
tp1246
sS'getgrnam'
p1247
(S'\n__stdcall getgrnam(char * __name)\n'
p1248
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000agroup * getgrnam(char *__name)\u000a\u000a{\u000a  group *pgVar1;\u000a  \u000a  pgVar1 = (group *)(*(code *)PTR_getgrnam_00609148)();\u000a  return pgVar1;\u000a}\u000a\u000a
p1249
S'JMP qword ptr [0x00609148]\n'
p1250
S'ff 25 92 79 20 00\n'
p1251
S'.plt:00000000004017b0\n'
p1252
tp1253
sS'gid_unset'
p1254
(S'\n__stdcall gid_unset()\n'
p1255
V\u000a_Bool gid_unset(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == -1);\u000a}\u000a\u000a
p1256
S'CMP EDI,-0x1\nSETZ AL\nRET\n'
p1257
S'83 ff ff\n0f 94 c0\nc3\n'
p1258
S'.text:0000000000402480\n.text:0000000000402483\n.text:0000000000402486\n'
p1259
tp1260
sS'__fpending'
p1261
(S'\n__stdcall __fpending()\n'
p1262
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00609060)();\u000a  return;\u000a}\u000a\u000a
p1263
S'JMP qword ptr [0x00609060]\n'
p1264
S'ff 25 7a 7a 20 00\n'
p1265
S'.plt:00000000004015e0\n'
p1266
tp1267
s.