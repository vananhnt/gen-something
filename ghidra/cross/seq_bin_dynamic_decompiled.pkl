(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x608e08]\nPUSH RBP\nLEA RBP,[0x608e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x004013a8\nTEST RBP,RBP\nJZ 0x00405576\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00405560\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 d6 38 20 00\n55\n48 8d 2d d6 38 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 57 be ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000405520\n.text:0000000000405522\n.text:0000000000405524\n.text:0000000000405527\n.text:0000000000405529\n.text:000000000040552b\n.text:0000000000405532\n.text:0000000000405533\n.text:000000000040553a\n.text:000000000040553b\n.text:000000000040553e\n.text:0000000000405541\n.text:0000000000405544\n.text:0000000000405548\n.text:000000000040554c\n.text:0000000000405551\n.text:0000000000405554\n.text:0000000000405556\n.text:0000000000405558\n.text:0000000000405560\n.text:0000000000405563\n.text:0000000000405566\n.text:0000000000405569\n.text:000000000040556d\n.text:0000000000405571\n.text:0000000000405574\n.text:0000000000405576\n.text:000000000040557a\n.text:000000000040557b\n.text:000000000040557c\n.text:000000000040557e\n.text:0000000000405580\n.text:0000000000405582\n.text:0000000000405584\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00609158)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x00609158]\n'
p11
S'ff 25 02 7b 20 00\n'
p12
S'.plt:0000000000401650\n'
p13
tp14
sS'c_isdigit'
p15
(S'\n__stdcall c_isdigit()\n'
p16
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p17
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p18
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p19
S'.text:0000000000404f70\n.text:0000000000404f73\n.text:0000000000404f76\n.text:0000000000404f79\n'
p20
tp21
sS'xstrtold'
p22
(S'\n__stdcall xstrtold(char * str, char * * ptr, longdouble * result, anon_subr_longdouble_char_ptr_char_ptr_ptr * convert)\n'
p23
V\u000a_Bool xstrtold(char *str,char **ptr,longdouble *result,longdouble (*convert)(char *,char **))\u000a\u000a{\u000a  int *piVar1;\u000a  bool bVar2;\u000a  float10 in_ST0;\u000a  char *local_30;\u000a  \u000a  piVar1 = __errno_location();\u000a  *piVar1 = 0;\u000a  (*convert)(str,&local_30);\u000a  if (local_30 == str) {\u000a    bVar2 = false;\u000a  }\u000a  else {\u000a    if ((ptr == (char **)0x0) && (*local_30 != 0)) {\u000a      bVar2 = false;\u000a      goto LAB_00404e8f;\u000a    }\u000a    if (in_ST0 == (float10)0) {\u000a      bVar2 = true;\u000a    }\u000a    else {\u000a      bVar2 = *piVar1 != 0x22;\u000a    }\u000a  }\u000a  if (ptr != (char **)0x0) {\u000a    *ptr = local_30;\u000a  }\u000aLAB_00404e8f:\u000a  *(float10 *)result = in_ST0;\u000a  return (_Bool)bVar2;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R13,RCX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nCALL 0x00401410\nMOV R12,RAX\nMOV dword ptr [R12],0x0\nLEA RSI,[RSP + 0x8]\nMOV RDI,RBX\nCALL R13\nMOV RAX,qword ptr [RSP + 0x8]\nCMP RAX,RBX\nJZ 0x00404e6e\nTEST R15,R15\nJZ 0x00404e77\nFLDZ\nFXCH\nFUCOMI ST0,ST1\nFSTP ST1\nJNZ 0x00404e5f\nJNP 0x00404e80\nCMP dword ptr [R12],0x22\nSETNZ AL\nTEST R15,R15\nJNZ 0x00404e87\nJMP 0x00404e8f\nXOR EAX,EAX\nTEST R15,R15\nJNZ 0x00404e87\nJMP 0x00404e8f\nCMP byte ptr [RAX],0x0\nJZ 0x00404e53\nXOR EAX,EAX\nJMP 0x00404e8f\nMOV AL,0x1\nTEST R15,R15\nJZ 0x00404e8f\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [R15],RCX\nFSTP tword ptr [R14]\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p25
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 10\n49 89 cd\n49 89 d6\n49 89 f7\n48 89 fb\ne8 e2 c5 ff ff\n49 89 c4\n41 c7 04 24 00 00 00 00\n48 8d 74 24 08\n48 89 df\n41 ff d5\n48 8b 44 24 08\n48 39 d8\n74 20\n4d 85 ff\n74 24\nd9 ee\nd9 c9\ndb e9\ndd d9\n75 02\n7b 21\n41 83 3c 24 22\n0f 95 c0\n4d 85 ff\n75 1b\neb 21\n31 c0\n4d 85 ff\n75 12\neb 18\n80 38 00\n74 d7\n31 c0\neb 0f\nb0 01\n4d 85 ff\n74 08\n48 8b 4c 24 08\n49 89 0f\n41 db 3e\n48 83 c4 10\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p26
S'.text:0000000000404e10\n.text:0000000000404e12\n.text:0000000000404e14\n.text:0000000000404e16\n.text:0000000000404e18\n.text:0000000000404e19\n.text:0000000000404e1d\n.text:0000000000404e20\n.text:0000000000404e23\n.text:0000000000404e26\n.text:0000000000404e29\n.text:0000000000404e2e\n.text:0000000000404e31\n.text:0000000000404e39\n.text:0000000000404e3e\n.text:0000000000404e41\n.text:0000000000404e44\n.text:0000000000404e49\n.text:0000000000404e4c\n.text:0000000000404e4e\n.text:0000000000404e51\n.text:0000000000404e53\n.text:0000000000404e55\n.text:0000000000404e57\n.text:0000000000404e59\n.text:0000000000404e5b\n.text:0000000000404e5d\n.text:0000000000404e5f\n.text:0000000000404e64\n.text:0000000000404e67\n.text:0000000000404e6a\n.text:0000000000404e6c\n.text:0000000000404e6e\n.text:0000000000404e70\n.text:0000000000404e73\n.text:0000000000404e75\n.text:0000000000404e77\n.text:0000000000404e7a\n.text:0000000000404e7c\n.text:0000000000404e7e\n.text:0000000000404e80\n.text:0000000000404e82\n.text:0000000000404e85\n.text:0000000000404e87\n.text:0000000000404e8c\n.text:0000000000404e8f\n.text:0000000000404e92\n.text:0000000000404e96\n.text:0000000000404e97\n.text:0000000000404e99\n.text:0000000000404e9b\n.text:0000000000404e9d\n.text:0000000000404e9f\n'
p27
tp28
sS'seq_fast'
p29
(S'\n__stdcall seq_fast(char * a, char * b)\n'
p30
V\u000a_Bool seq_fast(char *a,char *b)\u000a\u000a{\u000a  char *__dest;\u000a  size_t n;\u000a  long lVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  size_t b_len;\u000a  void *__ptr;\u000a  ulong n_00;\u000a  undefined uVar3;\u000a  char *p;\u000a  int iVar4;\u000a  size_t sVar5;\u000a  char *__ptr_00;\u000a  size_t local_68;\u000a  char *local_60;\u000a  char *local_58;\u000a  void *local_50;\u000a  char *local_48;\u000a  ulong local_40;\u000a  size_t local_38;\u000a  \u000a  iVar4 = 0x69 - (uint)(byte)*b;\u000a  if (((iVar4 == 0) && (iVar4 = 0x6e - (uint)(byte)b[1], iVar4 == 0)) &&\u000a     (iVar4 = 0x66 - (uint)(byte)b[2], iVar4 == 0)) {\u000a    iVar4 = -(uint)(byte)b[3];\u000a  }\u000a  __s = trim_leading_zeros(a);\u000a  local_60 = trim_leading_zeros(b);\u000a  local_68 = strlen(__s);\u000a  if (iVar4 == 0) {\u000a    b_len = 0;\u000a  }\u000a  else {\u000a    b_len = strlen(local_60);\u000a  }\u000a  n_00 = local_68 + 1;\u000a  if (local_68 + 1 <= b_len) {\u000a    n_00 = b_len;\u000a  }\u000a  sVar5 = 0x1f;\u000a  if (0x1f < n_00) {\u000a    sVar5 = n_00;\u000a  }\u000a  n = sVar5 + 1;\u000a  __ptr_00 = (char *)xmalloc(n);\u000a  local_58 = __ptr_00 + (sVar5 - local_68);\u000a  memcpy(local_58,__s,local_68 + 1);\u000a  if (iVar4 == 0) {\u000a    local_48 = (char *)0x0;\u000a    local_50 = (void *)0x0;\u000a    __ptr = local_50;\u000a    __s = local_48;\u000a  }\u000a  else {\u000a    __ptr = xmalloc(n);\u000a    __s = (char *)((long)__ptr + (sVar5 - b_len));\u000a    memcpy(__s,local_60,b_len + 1);\u000a    iVar2 = cmp(local_58,local_68,__s,b_len);\u000a    if (0 < iVar2) {\u000a      uVar3 = 0;\u000a      goto LAB_0040267b;\u000a    }\u000a  }\u000a  local_48 = __s;\u000a  local_50 = __ptr;\u000a  local_38 = 0x2000;\u000a  if (0x2000 < n * 2) {\u000a    local_38 = n * 2;\u000a  }\u000a  local_60 = __ptr_00;\u000a  local_40 = b_len;\u000a  p = (char *)xmalloc(local_38);\u000a  __s = p + local_38;\u000a  __ptr_00 = (char *)__mempcpy_chk(p,local_58,local_68,0xffffffffffffffff);\u000a  if (iVar4 != 0) goto LAB_00402572;\u000a  do {\u000a    do {\u000a      *__ptr_00 = *separator;\u000a      __ptr_00 = __ptr_00 + 1;\u000a      incr(&local_58,&local_68);\u000a      b_len = sVar5;\u000a      if (local_68 == sVar5) {\u000a        b_len = sVar5 * 2;\u000a        local_60 = (char *)xrealloc(local_60,sVar5 * 2 + 1);\u000a        __dest = local_60 + local_68;\u000a        memmove(__dest,local_60,local_68 + 1);\u000a        n_00 = sVar5 * 4 + 2;\u000a        local_58 = __dest;\u000a        if (local_38 < n_00) {\u000a          lVar1 = -(long)p;\u000a          local_58 = __dest;\u000a          p = (char *)xrealloc(p,n_00);\u000a          __ptr_00 = __ptr_00 + lVar1 + (long)p;\u000a          __s = p + n_00;\u000a          local_38 = n_00;\u000a        }\u000a      }\u000a      n_00 = local_68;\u000a      __ptr_00 = (char *)__mempcpy_chk(__ptr_00,local_58,local_68,0xffffffffffffffff);\u000a      if (__s + ~n_00 < __ptr_00) {\u000a        fwrite_unlocked(p,(size_t)(__ptr_00 + -(long)p),1,stdout);\u000a        __ptr_00 = p;\u000a      }\u000a      sVar5 = b_len;\u000a    } while (iVar4 == 0);\u000aLAB_00402572:\u000a    iVar2 = cmp(local_58,local_68,local_48,local_40);\u000a  } while (iVar2 < 0);\u000a  *__ptr_00 = '\u005cn';\u000a  fwrite_unlocked(p,(size_t)(__ptr_00 + (1 - (long)p)),1,stdout);\u000a  uVar3 = 1;\u000a  __ptr_00 = local_60;\u000a  __ptr = local_50;\u000aLAB_0040267b:\u000a  free(__ptr_00);\u000a  free(__ptr);\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV RBX,RSI\nMOVZX EAX,byte ptr [RBX]\nMOV EBP,0x69\nSUB EBP,EAX\nJNZ 0x004023fd\nMOVZX EAX,byte ptr [RBX + 0x1]\nMOV EBP,0x6e\nSUB EBP,EAX\nJNZ 0x004023fd\nMOVZX EAX,byte ptr [RBX + 0x2]\nMOV EBP,0x66\nSUB EBP,EAX\nJNZ 0x004023fd\nMOVZX EBP,byte ptr [RBX + 0x3]\nNEG EBP\nCALL 0x00402c30\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x00402c30\nMOV RBX,RAX\nMOV RDI,R15\nCALL 0x004014c0\nMOV dword ptr [RSP + 0xc],EBP\nTEST EBP,EBP\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],RBX\nJZ 0x00402437\nMOV RDI,RBX\nCALL 0x004014c0\nMOV R14,RAX\nJMP 0x0040243a\nXOR R14D,R14D\nMOV RCX,qword ptr [RSP + 0x10]\nINC RCX\nCMP RCX,R14\nCMOVBE RCX,R14\nCMP RCX,0x1f\nMOV R12D,0x1f\nCMOVA R12,RCX\nLEA RBX,[R12 + 0x1]\nMOV RDI,RBX\nCALL 0x00404c50\nMOV R13,RAX\nLEA RBP,[R13 + R12*0x1]\nMOV RDX,qword ptr [RSP + 0x10]\nSUB RBP,RDX\nINC RDX\nMOV RDI,RBP\nMOV RSI,R15\nCALL 0x00401600\nCMP dword ptr [RSP + 0xc],0x0\nMOV qword ptr [RSP + 0x20],RBP\nJZ 0x004024d3\nMOV RDI,RBX\nCALL 0x00404c50\nMOV R15,RAX\nMOV RBP,R15\nADD RBP,R12\nSUB RBP,R14\nLEA RDX,[R14 + 0x1]\nMOV RDI,RBP\nMOV RSI,qword ptr [RSP + 0x18]\nCALL 0x00401600\nMOV RDI,qword ptr [RSP + 0x20]\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDX,RBP\nMOV RCX,R14\nCALL 0x00402c70\nTEST EAX,EAX\nJLE 0x004024ed\nXOR EBX,EBX\nJMP 0x0040267b\nMOV qword ptr [RSP + 0x38],R14\nMOV qword ptr [RSP + 0x18],R13\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x30],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x28],RAX\nJMP 0x00402501\nMOV qword ptr [RSP + 0x30],RBP\nMOV qword ptr [RSP + 0x28],R15\nMOV qword ptr [RSP + 0x38],R14\nMOV qword ptr [RSP + 0x18],R13\nMOV R14D,dword ptr [RSP + 0xc]\nADD RBX,RBX\nCMP RBX,0x2000\nMOV EBP,0x2000\nCMOVA RBP,RBX\nMOV RDI,RBP\nCALL 0x00404c50\nMOV RBX,RAX\nMOV RSI,qword ptr [RSP + 0x20]\nMOV RDX,qword ptr [RSP + 0x10]\nMOV qword ptr [RSP + 0x40],RBP\nLEA R13,[RBX + RBP*0x1]\nMOV RCX,-0x1\nMOV RDI,RBX\nCALL 0x004013f0\nMOV R15,RAX\nTEST R14D,R14D\nJNZ 0x00402572\nJMP 0x00402593\nSUB R15,RBX\nMOV RCX,qword ptr [0x00609288]\nMOV EDX,0x1\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00401670\nMOV R15,RBX\nTEST R14D,R14D\nJZ 0x00402593\nMOV RDI,qword ptr [RSP + 0x20]\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDX,qword ptr [RSP + 0x30]\nMOV RCX,qword ptr [RSP + 0x38]\nCALL 0x00402c70\nTEST EAX,EAX\nJNS 0x0040264e\nMOV RAX,qword ptr [0x006092d8]\nMOVZX EAX,byte ptr [RAX]\nMOV byte ptr [R15],AL\nINC R15\nLEA RDI,[RSP + 0x20]\nLEA RSI,[RSP + 0x10]\nCALL 0x00402c90\nCMP qword ptr [RSP + 0x10],R12\nJNZ 0x0040261b\nLEA RSI,[R12 + R12*0x1 + 0x1]\nLEA R12,[R12 + R12*0x1]\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x00404c90\nMOV RDX,qword ptr [RSP + 0x10]\nLEA RBP,[RAX + RDX*0x1]\nINC RDX\nMOV RDI,RBP\nMOV qword ptr [RSP + 0x18],RAX\nMOV RSI,RAX\nCALL 0x004016c0\nMOV qword ptr [RSP + 0x20],RBP\nLEA R14,[R12 + R12*0x1 + 0x2]\nCMP qword ptr [RSP + 0x40],R14\nJNC 0x00402616\nSUB R15,RBX\nMOV RDI,RBX\nMOV RSI,R14\nCALL 0x00404c90\nMOV RBX,RAX\nADD R15,RBX\nLEA R13,[RBX + R14*0x1]\nMOV qword ptr [RSP + 0x40],R14\nMOV R14D,dword ptr [RSP + 0xc]\nMOV RSI,qword ptr [RSP + 0x20]\nMOV RBP,qword ptr [RSP + 0x10]\nMOV RCX,-0x1\nMOV RDI,R15\nMOV RDX,RBP\nCALL 0x004013f0\nMOV R15,RAX\nNOT RBP\nADD RBP,R13\nCMP RBP,R15\nJNC 0x0040256d\nJMP 0x00402550\nMOV byte ptr [R15],0xa\nINC R15\nSUB R15,RBX\nMOV RCX,qword ptr [0x00609288]\nMOV EDX,0x1\nMOV RDI,RBX\nMOV RSI,R15\nCALL 0x00401670\nMOV BL,0x1\nMOV R13,qword ptr [RSP + 0x18]\nMOV R15,qword ptr [RSP + 0x28]\nMOV RDI,R13\nCALL 0x004013e0\nMOV RDI,R15\nCALL 0x004013e0\nMOV EAX,EBX\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p32
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n48 89 f3\n0f b6 03\nbd 69 00 00 00\n29 c5\n75 20\n0f b6 43 01\nbd 6e 00 00 00\n29 c5\n75 13\n0f b6 43 02\nbd 66 00 00 00\n29 c5\n75 06\n0f b6 6b 03\nf7 dd\ne8 2e 08 00 00\n49 89 c7\n48 89 df\ne8 23 08 00 00\n48 89 c3\n4c 89 ff\ne8 a8 f0 ff ff\n89 6c 24 0c\n85 ed\n48 89 44 24 10\n48 89 5c 24 18\n74 0d\n48 89 df\ne8 8e f0 ff ff\n49 89 c6\neb 03\n45 31 f6\n48 8b 4c 24 10\n48 ff c1\n4c 39 f1\n49 0f 46 ce\n48 83 f9 1f\n41 bc 1f 00 00 00\n4c 0f 47 e1\n49 8d 5c 24 01\n48 89 df\ne8 ec 27 00 00\n49 89 c5\n4b 8d 6c 25 00\n48 8b 54 24 10\n48 29 d5\n48 ff c2\n48 89 ef\n4c 89 fe\ne8 7e f1 ff ff\n83 7c 24 0c 00\n48 89 6c 24 20\n74 45\n48 89 df\ne8 ba 27 00 00\n49 89 c7\n4c 89 fd\n4c 01 e5\n4c 29 f5\n49 8d 56 01\n48 89 ef\n48 8b 74 24 18\ne8 4d f1 ff ff\n48 8b 7c 24 20\n48 8b 74 24 10\n48 89 ea\n4c 89 f1\ne8 a8 07 00 00\n85 c0\n7e 21\n31 db\ne9 a8 01 00 00\n4c 89 74 24 38\n4c 89 6c 24 18\n31 c0\n48 89 44 24 30\n31 c0\n48 89 44 24 28\neb 14\n48 89 6c 24 30\n4c 89 7c 24 28\n4c 89 74 24 38\n4c 89 6c 24 18\n44 8b 74 24 0c\n48 01 db\n48 81 fb 00 20 00 00\nbd 00 20 00 00\n48 0f 47 eb\n48 89 ef\ne8 2f 27 00 00\n48 89 c3\n48 8b 74 24 20\n48 8b 54 24 10\n48 89 6c 24 40\n4c 8d 2c 2b\n48 c7 c1 ff ff ff ff\n48 89 df\ne8 aa ee ff ff\n49 89 c7\n45 85 f6\n75 24\neb 43\n49 29 df\n48 8b 0d 2e 6d 20 00\nba 01 00 00 00\n48 89 df\n4c 89 fe\ne8 06 f1 ff ff\n49 89 df\n45 85 f6\n74 21\n48 8b 7c 24 20\n48 8b 74 24 10\n48 8b 54 24 30\n48 8b 4c 24 38\ne8 e5 06 00 00\n85 c0\n0f 89 bb 00 00 00\n48 8b 05 3e 6d 20 00\n0f b6 00\n41 88 07\n49 ff c7\n48 8d 7c 24 20\n48 8d 74 24 10\ne8 de 06 00 00\n4c 39 64 24 10\n75 62\n4b 8d 74 24 01\n4f 8d 24 24\n48 8b 7c 24 18\ne8 c4 26 00 00\n48 8b 54 24 10\n48 8d 2c 10\n48 ff c2\n48 89 ef\n48 89 44 24 18\n48 89 c6\ne8 d8 f0 ff ff\n48 89 6c 24 20\n4f 8d 74 24 02\n4c 39 74 24 40\n73 1d\n49 29 df\n48 89 df\n4c 89 f6\ne8 89 26 00 00\n48 89 c3\n49 01 df\n4e 8d 2c 33\n4c 89 74 24 40\n44 8b 74 24 0c\n48 8b 74 24 20\n48 8b 6c 24 10\n48 c7 c1 ff ff ff ff\n4c 89 ff\n48 89 ea\ne8 b9 ed ff ff\n49 89 c7\n48 f7 d5\n4c 01 ed\n4c 39 fd\n0f 83 24 ff ff ff\ne9 02 ff ff ff\n41 c6 07 0a\n49 ff c7\n49 29 df\n48 8b 0d 29 6c 20 00\nba 01 00 00 00\n48 89 df\n4c 89 fe\ne8 01 f0 ff ff\nb3 01\n4c 8b 6c 24 18\n4c 8b 7c 24 28\n4c 89 ef\ne8 5d ed ff ff\n4c 89 ff\ne8 55 ed ff ff\n89 d8\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p33
S'.text:00000000004023c0\n.text:00000000004023c1\n.text:00000000004023c3\n.text:00000000004023c5\n.text:00000000004023c7\n.text:00000000004023c9\n.text:00000000004023ca\n.text:00000000004023ce\n.text:00000000004023d1\n.text:00000000004023d4\n.text:00000000004023d9\n.text:00000000004023db\n.text:00000000004023dd\n.text:00000000004023e1\n.text:00000000004023e6\n.text:00000000004023e8\n.text:00000000004023ea\n.text:00000000004023ee\n.text:00000000004023f3\n.text:00000000004023f5\n.text:00000000004023f7\n.text:00000000004023fb\n.text:00000000004023fd\n.text:0000000000402402\n.text:0000000000402405\n.text:0000000000402408\n.text:000000000040240d\n.text:0000000000402410\n.text:0000000000402413\n.text:0000000000402418\n.text:000000000040241c\n.text:000000000040241e\n.text:0000000000402423\n.text:0000000000402428\n.text:000000000040242a\n.text:000000000040242d\n.text:0000000000402432\n.text:0000000000402435\n.text:0000000000402437\n.text:000000000040243a\n.text:000000000040243f\n.text:0000000000402442\n.text:0000000000402445\n.text:0000000000402449\n.text:000000000040244d\n.text:0000000000402453\n.text:0000000000402457\n.text:000000000040245c\n.text:000000000040245f\n.text:0000000000402464\n.text:0000000000402467\n.text:000000000040246c\n.text:0000000000402471\n.text:0000000000402474\n.text:0000000000402477\n.text:000000000040247a\n.text:000000000040247d\n.text:0000000000402482\n.text:0000000000402487\n.text:000000000040248c\n.text:000000000040248e\n.text:0000000000402491\n.text:0000000000402496\n.text:0000000000402499\n.text:000000000040249c\n.text:000000000040249f\n.text:00000000004024a2\n.text:00000000004024a6\n.text:00000000004024a9\n.text:00000000004024ae\n.text:00000000004024b3\n.text:00000000004024b8\n.text:00000000004024bd\n.text:00000000004024c0\n.text:00000000004024c3\n.text:00000000004024c8\n.text:00000000004024ca\n.text:00000000004024cc\n.text:00000000004024ce\n.text:00000000004024d3\n.text:00000000004024d8\n.text:00000000004024dd\n.text:00000000004024df\n.text:00000000004024e4\n.text:00000000004024e6\n.text:00000000004024eb\n.text:00000000004024ed\n.text:00000000004024f2\n.text:00000000004024f7\n.text:00000000004024fc\n.text:0000000000402501\n.text:0000000000402506\n.text:0000000000402509\n.text:0000000000402510\n.text:0000000000402515\n.text:0000000000402519\n.text:000000000040251c\n.text:0000000000402521\n.text:0000000000402524\n.text:0000000000402529\n.text:000000000040252e\n.text:0000000000402533\n.text:0000000000402537\n.text:000000000040253e\n.text:0000000000402541\n.text:0000000000402546\n.text:0000000000402549\n.text:000000000040254c\n.text:000000000040254e\n.text:0000000000402550\n.text:0000000000402553\n.text:000000000040255a\n.text:000000000040255f\n.text:0000000000402562\n.text:0000000000402565\n.text:000000000040256a\n.text:000000000040256d\n.text:0000000000402570\n.text:0000000000402572\n.text:0000000000402577\n.text:000000000040257c\n.text:0000000000402581\n.text:0000000000402586\n.text:000000000040258b\n.text:000000000040258d\n.text:0000000000402593\n.text:000000000040259a\n.text:000000000040259d\n.text:00000000004025a0\n.text:00000000004025a3\n.text:00000000004025a8\n.text:00000000004025ad\n.text:00000000004025b2\n.text:00000000004025b7\n.text:00000000004025b9\n.text:00000000004025be\n.text:00000000004025c2\n.text:00000000004025c7\n.text:00000000004025cc\n.text:00000000004025d1\n.text:00000000004025d5\n.text:00000000004025d8\n.text:00000000004025db\n.text:00000000004025e0\n.text:00000000004025e3\n.text:00000000004025e8\n.text:00000000004025ed\n.text:00000000004025f2\n.text:00000000004025f7\n.text:00000000004025f9\n.text:00000000004025fc\n.text:00000000004025ff\n.text:0000000000402602\n.text:0000000000402607\n.text:000000000040260a\n.text:000000000040260d\n.text:0000000000402611\n.text:0000000000402616\n.text:000000000040261b\n.text:0000000000402620\n.text:0000000000402625\n.text:000000000040262c\n.text:000000000040262f\n.text:0000000000402632\n.text:0000000000402637\n.text:000000000040263a\n.text:000000000040263d\n.text:0000000000402640\n.text:0000000000402643\n.text:0000000000402649\n.text:000000000040264e\n.text:0000000000402652\n.text:0000000000402655\n.text:0000000000402658\n.text:000000000040265f\n.text:0000000000402664\n.text:0000000000402667\n.text:000000000040266a\n.text:000000000040266f\n.text:0000000000402671\n.text:0000000000402676\n.text:000000000040267b\n.text:000000000040267e\n.text:0000000000402683\n.text:0000000000402686\n.text:000000000040268b\n.text:000000000040268d\n.text:0000000000402691\n.text:0000000000402692\n.text:0000000000402694\n.text:0000000000402696\n.text:0000000000402698\n.text:000000000040269a\n.text:000000000040269b\n'
p34
tp35
sS'version_etc_arn'
p36
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p37
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040650b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x4048d7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x404958;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x4049ec;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p38
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00404768\nMOV EDX,0x4064f8\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401730\nJMP 0x0040477d\nMOV EDX,0x406504\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401730\nXOR EDI,EDI\nMOV ESI,0x40650b\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4067e0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401730\nXOR EDI,EDI\nMOV ESI,0x40650f\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x004015a0\nCMP R12,0x9\nJA 0x00404806\nJMP qword ptr [0x4064a8 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x4065da\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401730\nXOR EDI,EDI\nMOV ESI,0x406719\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401730\nADD RSP,0x38\nJMP 0x00404a77\nXOR EDI,EDI\nMOV ESI,0x4065ea\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401730\nXOR EDI,EDI\nMOV ESI,0x406601\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401730\nXOR EDI,EDI\nMOV ESI,0x40661d\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401730\nADD RSP,0x18\nJMP 0x00404a77\nXOR EDI,EDI\nMOV ESI,0x40663d\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401730\nADD RSP,0x18\nJMP 0x00404a77\nXOR EDI,EDI\nMOV ESI,0x406661\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401730\nADD RSP,0x28\nJMP 0x00404a77\nXOR EDI,EDI\nMOV ESI,0x406689\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401730\nADD RSP,0x28\nJMP 0x00404a77\nXOR EDI,EDI\nMOV ESI,0x4066b5\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401730\nADD RSP,0x38\nJMP 0x00404a77\nXOR EDI,EDI\nMOV ESI,0x4066e5\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401730\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401400\n'
p39
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba f8 64 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 ca cf ff ff\neb 15\nba 04 65 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 b3 cf ff ff\n31 ff\nbe 0b 65 40 00\nba 05 00 00 00\ne8 12 cd ff ff\n48 89 c1\nbe 01 00 00 00\nba e0 67 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 85 cf ff ff\n31 ff\nbe 0f 65 40 00\nba 05 00 00 00\ne8 e4 cc ff ff\n48 89 c7\n4c 89 f6\ne8 d9 cd ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 a8 64 40 00\n31 ff\nbe da 65 40 00\nba 05 00 00 00\ne8 ba cc ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 2a cf ff ff\n31 ff\nbe 19 67 40 00\nba 05 00 00 00\ne8 89 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 e1 ce ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe ea 65 40 00\nba 05 00 00 00\ne8 37 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 a3 ce ff ff\n31 ff\nbe 01 66 40 00\nba 05 00 00 00\ne8 02 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 6a ce ff ff\n31 ff\nbe 1d 66 40 00\nba 05 00 00 00\ne8 c9 cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 34 ce ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 3d 66 40 00\nba 05 00 00 00\ne8 8a cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 f2 cd ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 61 66 40 00\nba 05 00 00 00\ne8 48 cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 a8 cd ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 89 66 40 00\nba 05 00 00 00\ne8 fe ca ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 5e cd ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe b5 66 40 00\nba 05 00 00 00\ne8 b4 ca ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 0c cd ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe e5 66 40 00\nba 05 00 00 00\ne8 65 ca ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 bd cc ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 7c c9 ff ff\n'
p40
S'.text:0000000000404730\n.text:0000000000404732\n.text:0000000000404734\n.text:0000000000404736\n.text:0000000000404737\n.text:0000000000404738\n.text:000000000040473b\n.text:000000000040473e\n.text:0000000000404741\n.text:0000000000404744\n.text:0000000000404747\n.text:000000000040474a\n.text:000000000040474f\n.text:0000000000404752\n.text:0000000000404754\n.text:0000000000404759\n.text:000000000040475b\n.text:000000000040475e\n.text:0000000000404761\n.text:0000000000404766\n.text:0000000000404768\n.text:000000000040476d\n.text:000000000040476f\n.text:0000000000404772\n.text:0000000000404775\n.text:0000000000404778\n.text:000000000040477d\n.text:000000000040477f\n.text:0000000000404784\n.text:0000000000404789\n.text:000000000040478e\n.text:0000000000404791\n.text:0000000000404796\n.text:000000000040479b\n.text:00000000004047a1\n.text:00000000004047a3\n.text:00000000004047a6\n.text:00000000004047ab\n.text:00000000004047ad\n.text:00000000004047b2\n.text:00000000004047b7\n.text:00000000004047bc\n.text:00000000004047bf\n.text:00000000004047c2\n.text:00000000004047c7\n.text:00000000004047cb\n.text:00000000004047cd\n.text:00000000004047d5\n.text:00000000004047d7\n.text:00000000004047dc\n.text:00000000004047e1\n.text:00000000004047e6\n.text:00000000004047e9\n.text:00000000004047ec\n.text:00000000004047f1\n.text:00000000004047f3\n.text:00000000004047f6\n.text:00000000004047fa\n.text:00000000004047fb\n.text:00000000004047fd\n.text:00000000004047ff\n.text:0000000000404801\n.text:0000000000404806\n.text:0000000000404808\n.text:000000000040480d\n.text:0000000000404812\n.text:0000000000404817\n.text:000000000040481a\n.text:000000000040481d\n.text:0000000000404821\n.text:0000000000404825\n.text:000000000040482a\n.text:000000000040482f\n.text:0000000000404832\n.text:0000000000404836\n.text:000000000040483a\n.text:000000000040483e\n.text:0000000000404842\n.text:0000000000404846\n.text:000000000040484a\n.text:000000000040484f\n.text:0000000000404853\n.text:0000000000404858\n.text:000000000040485a\n.text:000000000040485f\n.text:0000000000404864\n.text:0000000000404869\n.text:000000000040486c\n.text:000000000040486f\n.text:0000000000404873\n.text:0000000000404878\n.text:000000000040487a\n.text:000000000040487d\n.text:0000000000404881\n.text:0000000000404882\n.text:0000000000404884\n.text:0000000000404886\n.text:0000000000404888\n.text:000000000040488d\n.text:000000000040488f\n.text:0000000000404894\n.text:0000000000404899\n.text:000000000040489e\n.text:00000000004048a1\n.text:00000000004048a4\n.text:00000000004048a8\n.text:00000000004048ac\n.text:00000000004048b1\n.text:00000000004048b3\n.text:00000000004048b6\n.text:00000000004048ba\n.text:00000000004048bb\n.text:00000000004048bd\n.text:00000000004048bf\n.text:00000000004048c1\n.text:00000000004048c6\n.text:00000000004048c8\n.text:00000000004048cd\n.text:00000000004048d2\n.text:00000000004048d7\n.text:00000000004048da\n.text:00000000004048dd\n.text:00000000004048e1\n.text:00000000004048e5\n.text:00000000004048e9\n.text:00000000004048ee\n.text:00000000004048f0\n.text:00000000004048f3\n.text:00000000004048f7\n.text:00000000004048fc\n.text:0000000000404900\n.text:0000000000404905\n.text:0000000000404907\n.text:000000000040490c\n.text:0000000000404911\n.text:0000000000404916\n.text:0000000000404919\n.text:000000000040491c\n.text:0000000000404920\n.text:0000000000404924\n.text:0000000000404929\n.text:000000000040492e\n.text:0000000000404931\n.text:0000000000404935\n.text:0000000000404939\n.text:000000000040493e\n.text:0000000000404942\n.text:0000000000404947\n.text:0000000000404949\n.text:000000000040494e\n.text:0000000000404953\n.text:0000000000404958\n.text:000000000040495b\n.text:000000000040495e\n.text:0000000000404962\n.text:0000000000404966\n.text:000000000040496a\n.text:000000000040496f\n.text:0000000000404974\n.text:0000000000404977\n.text:000000000040497b\n.text:000000000040497f\n.text:0000000000404983\n.text:0000000000404988\n.text:000000000040498c\n.text:0000000000404991\n.text:0000000000404993\n.text:0000000000404998\n.text:000000000040499d\n.text:00000000004049a2\n.text:00000000004049a5\n.text:00000000004049a8\n.text:00000000004049ac\n.text:00000000004049b0\n.text:00000000004049b5\n.text:00000000004049ba\n.text:00000000004049bd\n.text:00000000004049c1\n.text:00000000004049c5\n.text:00000000004049c9\n.text:00000000004049cd\n.text:00000000004049d2\n.text:00000000004049d6\n.text:00000000004049db\n.text:00000000004049dd\n.text:00000000004049e2\n.text:00000000004049e7\n.text:00000000004049ec\n.text:00000000004049ef\n.text:00000000004049f2\n.text:00000000004049f6\n.text:00000000004049fa\n.text:00000000004049fe\n.text:0000000000404a03\n.text:0000000000404a08\n.text:0000000000404a0b\n.text:0000000000404a0f\n.text:0000000000404a13\n.text:0000000000404a17\n.text:0000000000404a1b\n.text:0000000000404a1f\n.text:0000000000404a24\n.text:0000000000404a28\n.text:0000000000404a2a\n.text:0000000000404a2c\n.text:0000000000404a31\n.text:0000000000404a36\n.text:0000000000404a3b\n.text:0000000000404a3e\n.text:0000000000404a41\n.text:0000000000404a45\n.text:0000000000404a49\n.text:0000000000404a4e\n.text:0000000000404a53\n.text:0000000000404a56\n.text:0000000000404a5a\n.text:0000000000404a5e\n.text:0000000000404a62\n.text:0000000000404a66\n.text:0000000000404a6a\n.text:0000000000404a6e\n.text:0000000000404a73\n.text:0000000000404a77\n.text:0000000000404a78\n.text:0000000000404a7a\n.text:0000000000404a7c\n.text:0000000000404a7e\n.text:0000000000404a7f\n'
p41
tp42
sS'usage'
p43
(S'\n__stdcall usage()\n'
p44
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,\u000a                      "Usage: %s [OPTION]... LAST\u005cn  or:  %s [OPTION]... FIRST LAST\u005cn  or:  %s [OPTION]... FIRST INCREMENT LAST\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,program_name,program_name,program_name);\u000a    __s = (char *)dcgettext(0,"Print numbers from FIRST to LAST, in steps of INCREMENT.\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "  -f, --format=FORMAT      use printf style floating-point FORMAT\u005cn  -s, --separator=STRING   use STRING to separate numbers (default: \u005c\u005cn)\u005cn  -w, --equal-width        equalize width by padding with leading zeroes\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnIf FIRST or INCREMENT is omitted, it defaults to 1.  That is, an\u005cnomitted INCREMENT defaults to 1 even when LAST is smaller than FIRST.\u005cnThe sequence of numbers ends when the sum of the current number and\u005cnINCREMENT would become greater than LAST.\u005cnFIRST, INCREMENT, and LAST are interpreted as floating point values.\u005cnINCREMENT is usually positive if FIRST is smaller than LAST, and\u005cnINCREMENT is usually negative if FIRST is greater than LAST.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "FORMAT must be suitable for printing one argument of type \u005c'double\u005c';\u005cnit defaults to %.PRECf if FIRST, INCREMENT, and LAST are all fixed point\u005cndecimal numbers with maximum precision PREC, and to %g otherwise.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p45
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x0040199c\nXOR EDI,EDI\nMOV ESI,0x4055e4\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x00609318]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nMOV R8,RDX\nCALL 0x004016b0\nXOR EDI,EDI\nMOV ESI,0x40564c\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RSI,qword ptr [0x00609288]\nMOV RDI,RAX\nCALL 0x004015a0\nCALL 0x004019f0\nXOR EDI,EDI\nMOV ESI,0x405686\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RSI,qword ptr [0x00609288]\nMOV RDI,RAX\nCALL 0x004015a0\nXOR EDI,EDI\nMOV ESI,0x40575a\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RSI,qword ptr [0x00609288]\nMOV RDI,RAX\nCALL 0x004015a0\nXOR EDI,EDI\nMOV ESI,0x405787\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RSI,qword ptr [0x00609288]\nMOV RDI,RAX\nCALL 0x004015a0\nXOR EDI,EDI\nMOV ESI,0x4057bd\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RSI,qword ptr [0x00609288]\nMOV RDI,RAX\nCALL 0x004015a0\nXOR EDI,EDI\nMOV ESI,0x405977\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RSI,qword ptr [0x00609288]\nMOV RDI,RAX\nCALL 0x004015a0\nCALL 0x00401a20\nMOV EDI,EBX\nCALL 0x00401710\nCALL 0x004019b0\nMOV EDI,EBX\nCALL 0x00401710\n'
p46
S'53\n89 fb\n85 db\n0f 85 01 01 00 00\n31 ff\nbe e4 55 40 00\nba 05 00 00 00\ne8 f4 fb ff ff\n48 89 c1\n48 8b 15 62 7a 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\n49 89 d0\ne8 e5 fd ff ff\n31 ff\nbe 4c 56 40 00\nba 05 00 00 00\ne8 c4 fb ff ff\n48 8b 35 a5 79 20 00\n48 89 c7\ne8 b5 fc ff ff\ne8 00 01 00 00\n31 ff\nbe 86 56 40 00\nba 05 00 00 00\ne8 9f fb ff ff\n48 8b 35 80 79 20 00\n48 89 c7\ne8 90 fc ff ff\n31 ff\nbe 5a 57 40 00\nba 05 00 00 00\ne8 7f fb ff ff\n48 8b 35 60 79 20 00\n48 89 c7\ne8 70 fc ff ff\n31 ff\nbe 87 57 40 00\nba 05 00 00 00\ne8 5f fb ff ff\n48 8b 35 40 79 20 00\n48 89 c7\ne8 50 fc ff ff\n31 ff\nbe bd 57 40 00\nba 05 00 00 00\ne8 3f fb ff ff\n48 8b 35 20 79 20 00\n48 89 c7\ne8 30 fc ff ff\n31 ff\nbe 77 59 40 00\nba 05 00 00 00\ne8 1f fb ff ff\n48 8b 35 00 79 20 00\n48 89 c7\ne8 10 fc ff ff\ne8 8b 00 00 00\n89 df\ne8 74 fd ff ff\ne8 0f 00 00 00\n89 df\ne8 68 fd ff ff\n'
p47
S'.text:0000000000401890\n.text:0000000000401891\n.text:0000000000401893\n.text:0000000000401895\n.text:000000000040189b\n.text:000000000040189d\n.text:00000000004018a2\n.text:00000000004018a7\n.text:00000000004018ac\n.text:00000000004018af\n.text:00000000004018b6\n.text:00000000004018bb\n.text:00000000004018bd\n.text:00000000004018c0\n.text:00000000004018c3\n.text:00000000004018c6\n.text:00000000004018cb\n.text:00000000004018cd\n.text:00000000004018d2\n.text:00000000004018d7\n.text:00000000004018dc\n.text:00000000004018e3\n.text:00000000004018e6\n.text:00000000004018eb\n.text:00000000004018f0\n.text:00000000004018f2\n.text:00000000004018f7\n.text:00000000004018fc\n.text:0000000000401901\n.text:0000000000401908\n.text:000000000040190b\n.text:0000000000401910\n.text:0000000000401912\n.text:0000000000401917\n.text:000000000040191c\n.text:0000000000401921\n.text:0000000000401928\n.text:000000000040192b\n.text:0000000000401930\n.text:0000000000401932\n.text:0000000000401937\n.text:000000000040193c\n.text:0000000000401941\n.text:0000000000401948\n.text:000000000040194b\n.text:0000000000401950\n.text:0000000000401952\n.text:0000000000401957\n.text:000000000040195c\n.text:0000000000401961\n.text:0000000000401968\n.text:000000000040196b\n.text:0000000000401970\n.text:0000000000401972\n.text:0000000000401977\n.text:000000000040197c\n.text:0000000000401981\n.text:0000000000401988\n.text:000000000040198b\n.text:0000000000401990\n.text:0000000000401995\n.text:0000000000401997\n.text:000000000040199c\n.text:00000000004019a1\n.text:00000000004019a3\n'
p48
tp49
sS'FUN_004013c0'
p50
(S'\n__stdcall FUN_004013c0()\n'
p51
V\u000avoid FUN_004013c0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00609010)();\u000a  return;\u000a}\u000a\u000a
p52
S'PUSH qword ptr [0x00609008]\nJMP qword ptr [0x00609010]\n'
p53
S'ff 35 42 7c 20 00\nff 25 44 7c 20 00\n'
p54
S'.plt:00000000004013c0\n.plt:00000000004013c6\n'
p55
tp56
sS'quoting_options_from_style'
p57
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p58
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p59
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x004040ad\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401400\n'
p60
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 4e d3 ff ff\n'
p61
S'.text:0000000000404060\n.text:0000000000404064\n.text:0000000000404067\n.text:000000000040406c\n.text:0000000000404071\n.text:0000000000404075\n.text:000000000040407d\n.text:0000000000404080\n.text:0000000000404082\n.text:0000000000404084\n.text:0000000000404088\n.text:000000000040408b\n.text:000000000040408f\n.text:0000000000404094\n.text:0000000000404099\n.text:000000000040409d\n.text:00000000004040a1\n.text:00000000004040a5\n.text:00000000004040a8\n.text:00000000004040ac\n.text:00000000004040ad\n'
p62
tp63
sS'strchr'
p64
(S'\n__stdcall strchr(char * __s, int __c)\n'
p65
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_006090a8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p66
S'JMP qword ptr [0x006090a8]\n'
p67
S'ff 25 b2 7b 20 00\n'
p68
S'.plt:00000000004014f0\n'
p69
tp70
sS'rpl_fclose'
p71
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p72
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00405449;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00405449:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p73
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401610\nTEST EAX,EAX\nJS 0x00405449\nMOV RDI,RBX\nCALL 0x00401660\nTEST EAX,EAX\nJZ 0x00405417\nMOV RDI,RBX\nCALL 0x00401610\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401520\nCMP RAX,-0x1\nJZ 0x00405449\nMOV RDI,RBX\nCALL 0x00405460\nTEST EAX,EAX\nJZ 0x00405449\nCALL 0x00401410\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401480\nTEST EBP,EBP\nJZ 0x00405442\nCALL 0x00401410\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401480\n'
p74
S'55\n53\n50\n48 89 fb\ne8 25 c2 ff ff\n85 c0\n78 5a\n48 89 df\ne8 69 c2 ff ff\n85 c0\n74 1c\n48 89 df\ne8 0d c2 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 0f c1 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 e8 bf ff ff\n8b 28\n48 89 df\ne8 4e c0 ff ff\n85 ed\n74 0c\ne8 d5 bf ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 29 c0 ff ff\n'
p75
S'.text:00000000004053e0\n.text:00000000004053e1\n.text:00000000004053e2\n.text:00000000004053e3\n.text:00000000004053e6\n.text:00000000004053eb\n.text:00000000004053ed\n.text:00000000004053ef\n.text:00000000004053f2\n.text:00000000004053f7\n.text:00000000004053f9\n.text:00000000004053fb\n.text:00000000004053fe\n.text:0000000000405403\n.text:0000000000405405\n.text:000000000040540a\n.text:000000000040540c\n.text:0000000000405411\n.text:0000000000405415\n.text:0000000000405417\n.text:000000000040541a\n.text:000000000040541f\n.text:0000000000405421\n.text:0000000000405423\n.text:0000000000405428\n.text:000000000040542a\n.text:000000000040542d\n.text:0000000000405432\n.text:0000000000405434\n.text:0000000000405436\n.text:000000000040543b\n.text:000000000040543d\n.text:0000000000405442\n.text:0000000000405446\n.text:0000000000405447\n.text:0000000000405448\n.text:0000000000405449\n.text:000000000040544c\n.text:0000000000405450\n.text:0000000000405451\n.text:0000000000405452\n'
p76
tp77
sS'strcpy'
p78
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p79
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00609050)();\u000a  return pcVar1;\u000a}\u000a\u000a
p80
S'JMP qword ptr [0x00609050]\n'
p81
S'ff 25 0a 7c 20 00\n'
p82
S'.plt:0000000000401440\n'
p83
tp84
sS'fwrite_unlocked'
p85
(S'\n__stdcall fwrite_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p86
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_unlocked_00609168)();\u000a  return sVar1;\u000a}\u000a\u000a
p87
S'JMP qword ptr [0x00609168]\n'
p88
S'ff 25 f2 7a 20 00\n'
p89
S'.plt:0000000000401670\n'
p90
tp91
sS'to_uchar'
p92
(S'\n__stdcall to_uchar()\n'
p93
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p94
S'MOV EAX,EDI\nRET\n'
p95
S'89 f8\nc3\n'
p96
S'.text:0000000000402cd0\n.text:0000000000402cd2\n'
p97
tp98
sS'strncmp'
p99
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p100
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00609040)();\u000a  return iVar1;\u000a}\u000a\u000a
p101
S'JMP qword ptr [0x00609040]\n'
p102
S'ff 25 1a 7c 20 00\n'
p103
S'.plt:0000000000401420\n'
p104
tp105
sS'xnrealloc'
p106
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p107
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p108
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00404c84\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00404c90\nPUSH RAX\nCALL 0x00404de0\n'
p109
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p110
S'.text:0000000000404c70\n.text:0000000000404c73\n.text:0000000000404c76\n.text:0000000000404c79\n.text:0000000000404c7b\n.text:0000000000404c7f\n.text:0000000000404c82\n.text:0000000000404c84\n.text:0000000000404c85\n'
p111
tp112
sS'quote'
p113
(S'\n__stdcall quote(char * arg)\n'
p114
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404310\n'
p116
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p117
S'.text:0000000000404320\n.text:0000000000404323\n.text:0000000000404325\n.text:0000000000404328\n'
p118
tp119
sS'emit_bug_reporting_address'
p120
(S'\n__stdcall emit_bug_reporting_address()\n'
p121
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p122
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x406755\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40676a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004016b0\nXOR EDI,EDI\nMOV ESI,0x406780\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x405a6a\nMOV ECX,0x405be1\nXOR EAX,EAX\nCALL 0x004016b0\nXOR EDI,EDI\nMOV ESI,0x406794\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RSI,qword ptr [0x00609288]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004015a0\n'
p123
S'50\n31 ff\nbe 55 67 40 00\nba 05 00 00 00\ne8 de c8 ff ff\n48 89 c1\nbf 01 00 00 00\nba 6a 67 40 00\n31 c0\n48 89 ce\ne8 d7 ca ff ff\n31 ff\nbe 80 67 40 00\nba 05 00 00 00\ne8 b6 c8 ff ff\n48 89 c6\nbf 01 00 00 00\nba 6a 5a 40 00\nb9 e1 5b 40 00\n31 c0\ne8 ad ca ff ff\n31 ff\nbe 94 67 40 00\nba 05 00 00 00\ne8 8c c8 ff ff\n48 8b 35 6d 46 20 00\n48 89 c7\n58\ne9 7c c9 ff ff\n'
p124
S'.text:0000000000404bb0\n.text:0000000000404bb1\n.text:0000000000404bb3\n.text:0000000000404bb8\n.text:0000000000404bbd\n.text:0000000000404bc2\n.text:0000000000404bc5\n.text:0000000000404bca\n.text:0000000000404bcf\n.text:0000000000404bd1\n.text:0000000000404bd4\n.text:0000000000404bd9\n.text:0000000000404bdb\n.text:0000000000404be0\n.text:0000000000404be5\n.text:0000000000404bea\n.text:0000000000404bed\n.text:0000000000404bf2\n.text:0000000000404bf7\n.text:0000000000404bfc\n.text:0000000000404bfe\n.text:0000000000404c03\n.text:0000000000404c05\n.text:0000000000404c0a\n.text:0000000000404c0f\n.text:0000000000404c14\n.text:0000000000404c1b\n.text:0000000000404c1e\n.text:0000000000404c1f\n'
p125
tp126
sS'clone_quoting_options'
p127
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p128
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p129
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401410\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x609320\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00404d90\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p130
S'55\n41 56\n53\n48 89 fb\ne8 24 e5 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 20 93 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 85 1e 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p131
S'.text:0000000000402ee0\n.text:0000000000402ee1\n.text:0000000000402ee3\n.text:0000000000402ee4\n.text:0000000000402ee7\n.text:0000000000402eec\n.text:0000000000402eef\n.text:0000000000402ef2\n.text:0000000000402ef5\n.text:0000000000402efa\n.text:0000000000402efe\n.text:0000000000402f03\n.text:0000000000402f06\n.text:0000000000402f0b\n.text:0000000000402f0e\n.text:0000000000402f0f\n.text:0000000000402f11\n.text:0000000000402f12\n'
p132
tp133
sS'xmalloc'
p134
(S'\n__stdcall xmalloc(size_t n)\n'
p135
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p136
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401620\nTEST RBX,RBX\nJZ 0x00404c63\nTEST RAX,RAX\nJZ 0x00404c65\nPOP RBX\nRET\nCALL 0x00404de0\n'
p137
S'53\n48 89 fb\ne8 c7 c9 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p138
S'.text:0000000000404c50\n.text:0000000000404c51\n.text:0000000000404c54\n.text:0000000000404c59\n.text:0000000000404c5c\n.text:0000000000404c5e\n.text:0000000000404c61\n.text:0000000000404c63\n.text:0000000000404c64\n.text:0000000000404c65\n'
p139
tp140
sS'quotearg_char_mem'
p141
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p142
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p143
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x00609350]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x00609340]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609330]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609320]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00402f40\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403e30\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p144
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d f8 51 20 00\n48 89 4c 24 30\n0f 10 05 dc 51 20 00\n0f 29 44 24 20\n0f 10 05 c0 51 20 00\n0f 29 44 24 10\n0f 10 05 a4 51 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p145
S'.text:0000000000404140\n.text:0000000000404142\n.text:0000000000404144\n.text:0000000000404145\n.text:0000000000404149\n.text:000000000040414b\n.text:000000000040414e\n.text:0000000000404151\n.text:0000000000404158\n.text:000000000040415d\n.text:0000000000404164\n.text:0000000000404169\n.text:0000000000404170\n.text:0000000000404175\n.text:000000000040417c\n.text:0000000000404180\n.text:0000000000404183\n.text:0000000000404188\n.text:000000000040418b\n.text:000000000040418d\n.text:0000000000404192\n.text:0000000000404194\n.text:0000000000404197\n.text:000000000040419a\n.text:000000000040419d\n.text:00000000004041a2\n.text:00000000004041a6\n.text:00000000004041a7\n.text:00000000004041a9\n.text:00000000004041ab\n'
p146
tp147
sS'c_isgraph'
p148
(S'\n__stdcall c_isgraph()\n'
p149
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p150
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p151
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p152
S'.text:0000000000404f80\n.text:0000000000404f83\n.text:0000000000404f86\n.text:0000000000404f89\n'
p153
tp154
sS'frame_dummy'
p155
(S'\n__stdcall frame_dummy()\n'
p156
V\u000a/* WARNING: Removing unreachable block (ram,0x0040187a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p157
S'MOV EDI,0x608e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401870\nJMP 0x00401800\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040186b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401800\n'
p158
S'bf 18 8e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p159
S'.text:0000000000401860\n.text:0000000000401865\n.text:0000000000401869\n.text:000000000040186b\n.text:0000000000401870\n.text:0000000000401875\n.text:0000000000401878\n.text:000000000040187a\n.text:000000000040187b\n.text:000000000040187e\n.text:0000000000401880\n.text:0000000000401881\n'
p160
tp161
sS'quotearg_buffer_restyled'
p162
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p163
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_004030dc_caseD_7;\u000a  case 2:\u000a    goto switchD_004030dc_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_004030dc_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_004030dc_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_004030dc_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_004030dc_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_004030dc_caseD_7;\u000aswitchD_004030dc_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_004030dc_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_004030dc_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00403ba0;\u000aLAB_004032c0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00403ba9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00403bb8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_004032cb:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040330f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040330f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00403bb8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00403ae5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x004039f0;\u000a    }\u000a    goto LAB_00403bb8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00403b1a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00403bb8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403b49;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403608;\u000a  case '\u005ca':\u000a    goto joined_r0x004034f8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x004034f8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00403326_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x004034f8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x004034f8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00403326_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x004034f8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_00403a5e;\u000a    }\u000a    goto LAB_00403bb8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00403bb8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00403bb8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00403bb8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00403bb8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00403bb8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00403326_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00403ab6;\u000a      goto joined_r0x00403aa8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x004035b1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403aa8;\u000a      goto LAB_00403ab6;\u000a    }\u000a    goto LAB_00403bb8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00403bb8;\u000a  }\u000a  goto joined_r0x004039f0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00403b1a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403b49;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403b49:\u000a  if (1 < uVar10) {\u000aLAB_00403626:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_004036e2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x004035b1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_004036e2:\u000a        if (bVar6 != 0) goto LAB_00403bb8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403608:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403626;\u000ajoined_r0x004039f0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x004039f0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403a17;\u000aLAB_00403a50:\u000a    if (bVar22) goto LAB_00403a55;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00403a50;\u000aLAB_00403a17:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00403a55:\u000a      if (bVar6 != 0) goto LAB_00403bb8;\u000aLAB_00403a5e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403aa8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00403ab6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403aa8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00403ae5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_004032c0;\u000aLAB_00403ba0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00403ba9;\u000a  goto LAB_004032cb;\u000a}\u000a\u000a
p164
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004014b0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00403c85\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x405f60 + RAX*0x8]\nMOV EDI,0x406488\nMOV ESI,R15D\nCALL 0x00404330\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x405cf0\nMOV ESI,R15D\nCALL 0x00404330\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040313d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00403140\nNOP\nCMP R12,RSI\nJNC 0x0040312e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00403120\nJMP 0x00403140\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004014c0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040320c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040320c\nMOV ECX,0x406486\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00403206\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x004031a7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x004031d4\nTEST RSI,RSI\nJZ 0x004031c1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x405cf0\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x004031e2\nMOV ECX,0x405cf0\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040320c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00403c5c\nMOV ECX,0x406486\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00403ba0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00403ba9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040330f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040330a\nCMP R11,-0x1\nJNZ 0x0040330a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004014c0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00403360\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x004035bc\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x405fb8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00403bb8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403a10\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403a17\nJMP 0x00403a50\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401590\nTEST EAX,EAX\nSETZ AL\nJNZ 0x004033ad\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00403311\nJMP 0x00403bb8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00403311\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040333b\nCMP EBX,0x2\nJNZ 0x0040333b\nTEST R13,R13\nJNZ 0x0040333b\nJMP 0x00403bb8\nCMP R11,-0x1\nJZ 0x00403793\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x004037b3\nJMP 0x0040333b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004037c4\nTEST R8B,R8B\nJNZ 0x00403bb8\nCMP EBX,0x2\nJNZ 0x00403468\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403468\nCMP R12,RSI\nJNC 0x00403443\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403452\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403461\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403472\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403938\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403938\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403938\nCMP RCX,RSI\nJNC 0x004034ac\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x004034bb\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403346\nJMP 0x00403a10\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403339\nJMP 0x0040351a\nMOV DL,0x74\nJMP 0x00403502\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403339\nJMP 0x0040351a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403339\nJMP 0x0040351a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00403bb8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403339\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x00403a5e\nJMP 0x00403bb8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00403339\nTEST R8B,R8B\nJNZ 0x00403bb8\nCMP R12,RSI\nJNC 0x0040354a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403559\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403568\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00403339\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040394b\nCMP EBX,0x2\nJNZ 0x00403339\nTEST R8B,R8B\nJZ 0x00403339\nJMP 0x00403bb8\nCMP EBX,0x2\nJNZ 0x004037e4\nTEST R8B,R8B\nJNZ 0x00403bb8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00403ab6\nJMP 0x00403ad9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403805\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401770\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004039f8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x004039f8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x004036e2\nJMP 0x004036b0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403699\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403696\nCMP R12,RSI\nJNC 0x0040367b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040368a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x004036d0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x004036d0\nTEST BPL,0x1\nJZ 0x00403773\nCMP R12,RSI\nJNC 0x004036c4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403773\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x004036b0\nTEST R8B,R8B\nJNZ 0x00403bb8\nCMP EBX,0x2\nJNZ 0x0040372a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040372a\nCMP R12,RSI\nJNC 0x00403702\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403711\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403720\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403734\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040374b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403765\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403660\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00403ab6\nJMP 0x00403ad9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040333b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040333b\nJMP 0x00403bb8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00403ae5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403346\nJMP 0x00403a10\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00403502\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00403ab6\nJMP 0x00403ad9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403827\nMOV RDI,R10\nCALL 0x004014c0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x004014e0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00403aff\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403af7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403b06\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x004038ee\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x004038e6\nBT RDI,RDX\nJC 0x00403c52\nINC RCX\nCMP RCX,R14\nJC 0x004038d0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401760\nTEST EAX,EAX\nJNZ 0x00403903\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401750\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403845\nJMP 0x00403b49\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403346\nJMP 0x00403a10\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00403339\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00403339\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00403339\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040333b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00403b82\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00403bb8\nCMP R12,RSI\nJNC 0x004039ae\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x004039c1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004039d0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x004039df\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403346\nJMP 0x00403a10\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403346\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00403a50\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00403a55\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00403ab0\nJMP 0x00403a55\nTEST BPL,BPL\nJZ 0x00403ab0\nTEST R8B,R8B\nJNZ 0x00403bb8\nCMP EBX,0x2\nJNZ 0x00403a98\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403a98\nCMP R12,RSI\nJNC 0x00403a73\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403a82\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403a91\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403aa2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00403ae2\nJMP 0x00403ade\nTEST DIL,0x1\nJZ 0x00403ad9\nAND AL,0x1\nJNZ 0x00403ad9\nCMP R12,RSI\nJNC 0x00403ac4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403ad3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00403ae2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00403ba0\nJMP 0x004032c0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403b44\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00403b3c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00403b78\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00403b1a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403b49\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403608\nJMP 0x00403626\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403b49\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403346\nJMP 0x00403a10\nCMP R13,R11\nJNZ 0x004032cb\nTEST R8B,R8B\nJZ 0x00403c12\nCMP EBX,0x2\nJNZ 0x00403c12\nTEST R12,R12\nJNZ 0x00403c12\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00403050\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00403c46\nTEST R8B,R8B\nJNZ 0x00403c46\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00403c46\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00403c39\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00403c30\nCMP R12,RSI\nJNC 0x00403bfd\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00403bfd\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00403bb8\nTEST RSI,RSI\nJZ 0x00403c69\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x406486\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040320c\nCALL 0x00401400\n'
p165
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 32 e4 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 60 5f 40 00\nbf 88 64 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf f0 5c 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 73 e3 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 86 64 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 f0 5c 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 f0 5c 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 86 64 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 d3 e1 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd b8 5f 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 17 e2 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 97 e1 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 a1 dc ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 73 dc ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 69 de ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 32 de ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 86 64 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 76 d7 ff ff\n'
p166
S'.text:0000000000403050\n.text:0000000000403051\n.text:0000000000403053\n.text:0000000000403055\n.text:0000000000403057\n.text:0000000000403059\n.text:000000000040305a\n.text:0000000000403061\n.text:0000000000403064\n.text:0000000000403067\n.text:000000000040306a\n.text:000000000040306f\n.text:0000000000403074\n.text:0000000000403079\n.text:000000000040307e\n.text:0000000000403086\n.text:000000000040308a\n.text:0000000000403090\n.text:0000000000403098\n.text:000000000040309d\n.text:00000000004030a5\n.text:00000000004030aa\n.text:00000000004030ae\n.text:00000000004030b0\n.text:00000000004030b3\n.text:00000000004030b6\n.text:00000000004030b9\n.text:00000000004030be\n.text:00000000004030c1\n.text:00000000004030c4\n.text:00000000004030c7\n.text:00000000004030ca\n.text:00000000004030cc\n.text:00000000004030cf\n.text:00000000004030d4\n.text:00000000004030d7\n.text:00000000004030dc\n.text:00000000004030e3\n.text:00000000004030e8\n.text:00000000004030eb\n.text:00000000004030f0\n.text:00000000004030f5\n.text:00000000004030fa\n.text:00000000004030fd\n.text:0000000000403102\n.text:0000000000403107\n.text:000000000040310c\n.text:000000000040310e\n.text:0000000000403110\n.text:0000000000403115\n.text:0000000000403117\n.text:000000000040311a\n.text:000000000040311c\n.text:000000000040311e\n.text:0000000000403120\n.text:0000000000403123\n.text:0000000000403125\n.text:000000000040312a\n.text:000000000040312e\n.text:0000000000403134\n.text:0000000000403137\n.text:0000000000403139\n.text:000000000040313b\n.text:000000000040313d\n.text:0000000000403140\n.text:0000000000403145\n.text:0000000000403148\n.text:000000000040314d\n.text:0000000000403152\n.text:0000000000403155\n.text:0000000000403158\n.text:000000000040315b\n.text:000000000040315e\n.text:0000000000403163\n.text:0000000000403166\n.text:0000000000403169\n.text:000000000040316e\n.text:0000000000403171\n.text:0000000000403173\n.text:0000000000403176\n.text:0000000000403178\n.text:000000000040317a\n.text:000000000040317d\n.text:0000000000403182\n.text:0000000000403187\n.text:000000000040318c\n.text:000000000040318f\n.text:0000000000403195\n.text:0000000000403197\n.text:000000000040319a\n.text:000000000040319d\n.text:00000000004031a0\n.text:00000000004031a2\n.text:00000000004031a4\n.text:00000000004031a7\n.text:00000000004031aa\n.text:00000000004031af\n.text:00000000004031b2\n.text:00000000004031b4\n.text:00000000004031b7\n.text:00000000004031b9\n.text:00000000004031be\n.text:00000000004031c1\n.text:00000000004031c6\n.text:00000000004031cc\n.text:00000000004031d2\n.text:00000000004031d4\n.text:00000000004031d9\n.text:00000000004031df\n.text:00000000004031e2\n.text:00000000004031e5\n.text:00000000004031e8\n.text:00000000004031ea\n.text:00000000004031ef\n.text:00000000004031f2\n.text:00000000004031f8\n.text:00000000004031fd\n.text:0000000000403203\n.text:0000000000403206\n.text:0000000000403209\n.text:000000000040320c\n.text:0000000000403214\n.text:0000000000403216\n.text:0000000000403218\n.text:000000000040321b\n.text:000000000040321f\n.text:0000000000403221\n.text:0000000000403224\n.text:0000000000403228\n.text:000000000040322a\n.text:000000000040322d\n.text:0000000000403230\n.text:0000000000403233\n.text:0000000000403235\n.text:0000000000403239\n.text:000000000040323b\n.text:000000000040323f\n.text:0000000000403242\n.text:0000000000403245\n.text:0000000000403248\n.text:000000000040324a\n.text:000000000040324e\n.text:0000000000403257\n.text:000000000040325a\n.text:000000000040325c\n.text:0000000000403260\n.text:0000000000403262\n.text:0000000000403266\n.text:0000000000403268\n.text:000000000040326b\n.text:000000000040326f\n.text:0000000000403271\n.text:0000000000403274\n.text:0000000000403278\n.text:000000000040327d\n.text:0000000000403280\n.text:0000000000403284\n.text:000000000040328c\n.text:000000000040328f\n.text:0000000000403292\n.text:0000000000403294\n.text:0000000000403298\n.text:000000000040329b\n.text:000000000040329d\n.text:00000000004032a2\n.text:00000000004032a6\n.text:00000000004032ab\n.text:00000000004032b0\n.text:00000000004032b4\n.text:00000000004032ba\n.text:00000000004032c0\n.text:00000000004032c5\n.text:00000000004032cb\n.text:00000000004032d0\n.text:00000000004032d2\n.text:00000000004032d7\n.text:00000000004032db\n.text:00000000004032dd\n.text:00000000004032e1\n.text:00000000004032e3\n.text:00000000004032e5\n.text:00000000004032e8\n.text:00000000004032ed\n.text:00000000004032ef\n.text:00000000004032f4\n.text:00000000004032f9\n.text:00000000004032fd\n.text:0000000000403302\n.text:0000000000403307\n.text:000000000040330a\n.text:000000000040330d\n.text:000000000040330f\n.text:0000000000403311\n.text:0000000000403316\n.text:000000000040331a\n.text:0000000000403320\n.text:0000000000403322\n.text:0000000000403324\n.text:0000000000403326\n.text:000000000040332e\n.text:0000000000403333\n.text:0000000000403339\n.text:000000000040333b\n.text:0000000000403340\n.text:0000000000403346\n.text:000000000040334f\n.text:0000000000403355\n.text:0000000000403360\n.text:0000000000403362\n.text:0000000000403365\n.text:0000000000403369\n.text:0000000000403371\n.text:0000000000403374\n.text:0000000000403379\n.text:000000000040337b\n.text:000000000040337e\n.text:0000000000403380\n.text:0000000000403385\n.text:0000000000403388\n.text:000000000040338d\n.text:0000000000403390\n.text:0000000000403395\n.text:0000000000403399\n.text:000000000040339e\n.text:00000000004033a0\n.text:00000000004033a2\n.text:00000000004033a8\n.text:00000000004033ad\n.text:00000000004033b2\n.text:00000000004033b5\n.text:00000000004033ba\n.text:00000000004033be\n.text:00000000004033c3\n.text:00000000004033c8\n.text:00000000004033ca\n.text:00000000004033cc\n.text:00000000004033d1\n.text:00000000004033d3\n.text:00000000004033d6\n.text:00000000004033dc\n.text:00000000004033df\n.text:00000000004033e5\n.text:00000000004033e8\n.text:00000000004033ee\n.text:00000000004033f3\n.text:00000000004033f7\n.text:00000000004033fd\n.text:0000000000403400\n.text:0000000000403403\n.text:0000000000403407\n.text:000000000040340a\n.text:000000000040340c\n.text:000000000040340f\n.text:0000000000403415\n.text:000000000040341a\n.text:000000000040341f\n.text:0000000000403425\n.text:0000000000403428\n.text:000000000040342e\n.text:0000000000403431\n.text:0000000000403433\n.text:0000000000403435\n.text:0000000000403437\n.text:0000000000403439\n.text:000000000040343c\n.text:000000000040343e\n.text:0000000000403443\n.text:0000000000403448\n.text:000000000040344b\n.text:000000000040344d\n.text:0000000000403452\n.text:0000000000403457\n.text:000000000040345a\n.text:000000000040345c\n.text:0000000000403461\n.text:0000000000403465\n.text:0000000000403468\n.text:000000000040346b\n.text:000000000040346d\n.text:0000000000403472\n.text:0000000000403477\n.text:0000000000403479\n.text:000000000040347c\n.text:000000000040347f\n.text:0000000000403485\n.text:0000000000403489\n.text:000000000040348c\n.text:0000000000403492\n.text:0000000000403496\n.text:0000000000403499\n.text:000000000040349c\n.text:00000000004034a2\n.text:00000000004034a5\n.text:00000000004034a7\n.text:00000000004034ac\n.text:00000000004034b1\n.text:00000000004034b4\n.text:00000000004034b6\n.text:00000000004034bb\n.text:00000000004034bf\n.text:00000000004034c4\n.text:00000000004034ca\n.text:00000000004034cf\n.text:00000000004034d1\n.text:00000000004034d6\n.text:00000000004034dc\n.text:00000000004034de\n.text:00000000004034e0\n.text:00000000004034e2\n.text:00000000004034e4\n.text:00000000004034e9\n.text:00000000004034ef\n.text:00000000004034f1\n.text:00000000004034f3\n.text:00000000004034f8\n.text:00000000004034fe\n.text:0000000000403500\n.text:0000000000403502\n.text:0000000000403507\n.text:0000000000403509\n.text:000000000040350f\n.text:0000000000403514\n.text:000000000040351a\n.text:000000000040351d\n.text:0000000000403520\n.text:0000000000403526\n.text:000000000040352b\n.text:000000000040352e\n.text:0000000000403531\n.text:0000000000403537\n.text:000000000040353a\n.text:0000000000403540\n.text:0000000000403543\n.text:0000000000403545\n.text:000000000040354a\n.text:000000000040354f\n.text:0000000000403552\n.text:0000000000403554\n.text:0000000000403559\n.text:000000000040355e\n.text:0000000000403561\n.text:0000000000403563\n.text:0000000000403568\n.text:000000000040356c\n.text:000000000040356e\n.text:0000000000403573\n.text:0000000000403576\n.text:0000000000403579\n.text:000000000040357f\n.text:0000000000403582\n.text:0000000000403588\n.text:000000000040358b\n.text:0000000000403591\n.text:0000000000403596\n.text:0000000000403599\n.text:000000000040359f\n.text:00000000004035a2\n.text:00000000004035a8\n.text:00000000004035ab\n.text:00000000004035ad\n.text:00000000004035b1\n.text:00000000004035b7\n.text:00000000004035bc\n.text:00000000004035c0\n.text:00000000004035c9\n.text:00000000004035cf\n.text:00000000004035d4\n.text:00000000004035d9\n.text:00000000004035de\n.text:00000000004035e1\n.text:00000000004035e6\n.text:00000000004035e9\n.text:00000000004035ec\n.text:00000000004035f1\n.text:00000000004035f6\n.text:00000000004035fa\n.text:00000000004035ff\n.text:0000000000403604\n.text:0000000000403608\n.text:000000000040360a\n.text:000000000040360f\n.text:0000000000403615\n.text:0000000000403618\n.text:000000000040361a\n.text:000000000040361d\n.text:0000000000403620\n.text:0000000000403626\n.text:000000000040362b\n.text:000000000040362e\n.text:0000000000403631\n.text:0000000000403634\n.text:0000000000403637\n.text:0000000000403639\n.text:000000000040363d\n.text:000000000040363f\n.text:0000000000403644\n.text:0000000000403649\n.text:000000000040364f\n.text:0000000000403660\n.text:0000000000403665\n.text:0000000000403667\n.text:000000000040366a\n.text:000000000040366c\n.text:000000000040366f\n.text:0000000000403671\n.text:0000000000403674\n.text:0000000000403676\n.text:000000000040367b\n.text:0000000000403680\n.text:0000000000403683\n.text:0000000000403685\n.text:000000000040368a\n.text:000000000040368e\n.text:0000000000403696\n.text:0000000000403699\n.text:000000000040369c\n.text:000000000040369e\n.text:00000000004036a2\n.text:00000000004036b0\n.text:00000000004036b4\n.text:00000000004036ba\n.text:00000000004036bd\n.text:00000000004036bf\n.text:00000000004036c4\n.text:00000000004036c7\n.text:00000000004036c9\n.text:00000000004036d0\n.text:00000000004036d3\n.text:00000000004036d8\n.text:00000000004036db\n.text:00000000004036e0\n.text:00000000004036e2\n.text:00000000004036e5\n.text:00000000004036eb\n.text:00000000004036ee\n.text:00000000004036f0\n.text:00000000004036f4\n.text:00000000004036f6\n.text:00000000004036f8\n.text:00000000004036fb\n.text:00000000004036fd\n.text:0000000000403702\n.text:0000000000403707\n.text:000000000040370a\n.text:000000000040370c\n.text:0000000000403711\n.text:0000000000403716\n.text:0000000000403719\n.text:000000000040371b\n.text:0000000000403720\n.text:0000000000403724\n.text:0000000000403726\n.text:000000000040372a\n.text:000000000040372d\n.text:000000000040372f\n.text:0000000000403734\n.text:0000000000403739\n.text:000000000040373c\n.text:000000000040373e\n.text:0000000000403741\n.text:0000000000403744\n.text:0000000000403747\n.text:000000000040374b\n.text:0000000000403750\n.text:0000000000403753\n.text:0000000000403755\n.text:0000000000403758\n.text:000000000040375b\n.text:000000000040375e\n.text:0000000000403761\n.text:0000000000403765\n.text:0000000000403769\n.text:000000000040376d\n.text:0000000000403771\n.text:0000000000403773\n.text:0000000000403777\n.text:000000000040377a\n.text:0000000000403780\n.text:0000000000403784\n.text:0000000000403788\n.text:000000000040378e\n.text:0000000000403793\n.text:0000000000403796\n.text:0000000000403799\n.text:000000000040379e\n.text:00000000004037a1\n.text:00000000004037a3\n.text:00000000004037a6\n.text:00000000004037ad\n.text:00000000004037b3\n.text:00000000004037b5\n.text:00000000004037b9\n.text:00000000004037bf\n.text:00000000004037c4\n.text:00000000004037c9\n.text:00000000004037cf\n.text:00000000004037d2\n.text:00000000004037d4\n.text:00000000004037d9\n.text:00000000004037df\n.text:00000000004037e4\n.text:00000000004037e6\n.text:00000000004037eb\n.text:00000000004037f1\n.text:00000000004037f3\n.text:00000000004037f6\n.text:00000000004037fa\n.text:0000000000403800\n.text:0000000000403805\n.text:0000000000403811\n.text:0000000000403815\n.text:0000000000403817\n.text:000000000040381a\n.text:000000000040381f\n.text:0000000000403824\n.text:0000000000403827\n.text:000000000040382b\n.text:0000000000403830\n.text:0000000000403832\n.text:0000000000403836\n.text:0000000000403838\n.text:0000000000403840\n.text:0000000000403845\n.text:000000000040384a\n.text:000000000040384e\n.text:0000000000403852\n.text:000000000040385a\n.text:000000000040385d\n.text:0000000000403862\n.text:0000000000403865\n.text:0000000000403868\n.text:000000000040386d\n.text:0000000000403870\n.text:0000000000403873\n.text:0000000000403879\n.text:000000000040387d\n.text:0000000000403887\n.text:000000000040388d\n.text:0000000000403891\n.text:0000000000403896\n.text:000000000040389c\n.text:00000000004038a0\n.text:00000000004038a3\n.text:00000000004038a7\n.text:00000000004038a9\n.text:00000000004038ae\n.text:00000000004038b3\n.text:00000000004038b7\n.text:00000000004038b9\n.text:00000000004038be\n.text:00000000004038c3\n.text:00000000004038c7\n.text:00000000004038cc\n.text:00000000004038d0\n.text:00000000004038d4\n.text:00000000004038d7\n.text:00000000004038da\n.text:00000000004038dc\n.text:00000000004038e0\n.text:00000000004038e6\n.text:00000000004038e9\n.text:00000000004038ec\n.text:00000000004038ee\n.text:00000000004038f2\n.text:00000000004038f7\n.text:00000000004038f9\n.text:00000000004038fb\n.text:0000000000403903\n.text:0000000000403908\n.text:000000000040390b\n.text:0000000000403913\n.text:0000000000403916\n.text:0000000000403919\n.text:000000000040391e\n.text:0000000000403921\n.text:0000000000403923\n.text:0000000000403928\n.text:000000000040392d\n.text:0000000000403933\n.text:0000000000403938\n.text:000000000040393b\n.text:0000000000403940\n.text:0000000000403946\n.text:000000000040394b\n.text:0000000000403950\n.text:0000000000403956\n.text:000000000040395a\n.text:000000000040395d\n.text:0000000000403963\n.text:0000000000403969\n.text:000000000040396f\n.text:0000000000403974\n.text:0000000000403976\n.text:0000000000403979\n.text:000000000040397f\n.text:0000000000403983\n.text:0000000000403985\n.text:000000000040398f\n.text:0000000000403993\n.text:0000000000403999\n.text:000000000040399c\n.text:000000000040399e\n.text:00000000004039a4\n.text:00000000004039a7\n.text:00000000004039a9\n.text:00000000004039ae\n.text:00000000004039b3\n.text:00000000004039b6\n.text:00000000004039ba\n.text:00000000004039bc\n.text:00000000004039c1\n.text:00000000004039c6\n.text:00000000004039c9\n.text:00000000004039cb\n.text:00000000004039d0\n.text:00000000004039d5\n.text:00000000004039d8\n.text:00000000004039da\n.text:00000000004039df\n.text:00000000004039e3\n.text:00000000004039e5\n.text:00000000004039e8\n.text:00000000004039eb\n.text:00000000004039f0\n.text:00000000004039f6\n.text:00000000004039f8\n.text:00000000004039fd\n.text:0000000000403a02\n.text:0000000000403a08\n.text:0000000000403a10\n.text:0000000000403a15\n.text:0000000000403a17\n.text:0000000000403a1c\n.text:0000000000403a1f\n.text:0000000000403a21\n.text:0000000000403a24\n.text:0000000000403a26\n.text:0000000000403a29\n.text:0000000000403a2c\n.text:0000000000403a2f\n.text:0000000000403a31\n.text:0000000000403a39\n.text:0000000000403a3c\n.text:0000000000403a3e\n.text:0000000000403a40\n.text:0000000000403a50\n.text:0000000000403a53\n.text:0000000000403a55\n.text:0000000000403a58\n.text:0000000000403a5e\n.text:0000000000403a61\n.text:0000000000403a63\n.text:0000000000403a65\n.text:0000000000403a67\n.text:0000000000403a69\n.text:0000000000403a6c\n.text:0000000000403a6e\n.text:0000000000403a73\n.text:0000000000403a78\n.text:0000000000403a7b\n.text:0000000000403a7d\n.text:0000000000403a82\n.text:0000000000403a87\n.text:0000000000403a8a\n.text:0000000000403a8c\n.text:0000000000403a91\n.text:0000000000403a95\n.text:0000000000403a98\n.text:0000000000403a9b\n.text:0000000000403a9d\n.text:0000000000403aa2\n.text:0000000000403aa5\n.text:0000000000403aa8\n.text:0000000000403aaa\n.text:0000000000403ab0\n.text:0000000000403ab4\n.text:0000000000403ab6\n.text:0000000000403ab8\n.text:0000000000403aba\n.text:0000000000403abd\n.text:0000000000403abf\n.text:0000000000403ac4\n.text:0000000000403ac9\n.text:0000000000403acc\n.text:0000000000403ace\n.text:0000000000403ad3\n.text:0000000000403ad7\n.text:0000000000403ad9\n.text:0000000000403adc\n.text:0000000000403ade\n.text:0000000000403ae2\n.text:0000000000403ae5\n.text:0000000000403ae8\n.text:0000000000403aec\n.text:0000000000403af2\n.text:0000000000403af7\n.text:0000000000403aff\n.text:0000000000403b04\n.text:0000000000403b06\n.text:0000000000403b0e\n.text:0000000000403b13\n.text:0000000000403b15\n.text:0000000000403b1a\n.text:0000000000403b1f\n.text:0000000000403b23\n.text:0000000000403b25\n.text:0000000000403b2a\n.text:0000000000403b2d\n.text:0000000000403b30\n.text:0000000000403b32\n.text:0000000000403b3a\n.text:0000000000403b3c\n.text:0000000000403b44\n.text:0000000000403b49\n.text:0000000000403b4d\n.text:0000000000403b52\n.text:0000000000403b57\n.text:0000000000403b5b\n.text:0000000000403b60\n.text:0000000000403b65\n.text:0000000000403b69\n.text:0000000000403b6d\n.text:0000000000403b73\n.text:0000000000403b78\n.text:0000000000403b80\n.text:0000000000403b82\n.text:0000000000403b84\n.text:0000000000403b88\n.text:0000000000403b8d\n.text:0000000000403b93\n.text:0000000000403ba0\n.text:0000000000403ba3\n.text:0000000000403ba9\n.text:0000000000403bac\n.text:0000000000403bae\n.text:0000000000403bb1\n.text:0000000000403bb3\n.text:0000000000403bb6\n.text:0000000000403bb8\n.text:0000000000403bc0\n.text:0000000000403bc6\n.text:0000000000403bca\n.text:0000000000403bcd\n.text:0000000000403bd1\n.text:0000000000403bd6\n.text:0000000000403bda\n.text:0000000000403bde\n.text:0000000000403be1\n.text:0000000000403be4\n.text:0000000000403be7\n.text:0000000000403beb\n.text:0000000000403bef\n.text:0000000000403bf1\n.text:0000000000403bf6\n.text:0000000000403bfa\n.text:0000000000403bfd\n.text:0000000000403c00\n.text:0000000000403c07\n.text:0000000000403c08\n.text:0000000000403c0a\n.text:0000000000403c0c\n.text:0000000000403c0e\n.text:0000000000403c10\n.text:0000000000403c11\n.text:0000000000403c12\n.text:0000000000403c1a\n.text:0000000000403c1d\n.text:0000000000403c1f\n.text:0000000000403c22\n.text:0000000000403c24\n.text:0000000000403c26\n.text:0000000000403c28\n.text:0000000000403c2a\n.text:0000000000403c2d\n.text:0000000000403c30\n.text:0000000000403c33\n.text:0000000000403c35\n.text:0000000000403c39\n.text:0000000000403c3c\n.text:0000000000403c3f\n.text:0000000000403c42\n.text:0000000000403c44\n.text:0000000000403c46\n.text:0000000000403c49\n.text:0000000000403c4b\n.text:0000000000403c50\n.text:0000000000403c52\n.text:0000000000403c57\n.text:0000000000403c5c\n.text:0000000000403c5f\n.text:0000000000403c61\n.text:0000000000403c66\n.text:0000000000403c69\n.text:0000000000403c6e\n.text:0000000000403c71\n.text:0000000000403c77\n.text:0000000000403c7d\n.text:0000000000403c80\n.text:0000000000403c85\n'
p167
tp168
sS'newlocale'
p169
(S'\n__stdcall newlocale(int __category_mask, char * __locale, __locale_t __base)\n'
p170
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__locale_t newlocale(int __category_mask,char *__locale,__locale_t __base)\u000a\u000a{\u000a  __locale_t p_Var1;\u000a  \u000a  p_Var1 = (__locale_t)(*(code *)PTR_newlocale_006090b0)();\u000a  return p_Var1;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x006090b0]\n'
p172
S'ff 25 aa 7b 20 00\n'
p173
S'.plt:0000000000401500\n'
p174
tp175
sS'set_quoting_style'
p176
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p177
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p178
S'TEST RDI,RDI\nMOV EAX,0x609320\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p179
S'48 85 ff\nb8 20 93 60 00\n48 0f 45 c7\n89 30\nc3\n'
p180
S'.text:0000000000402f30\n.text:0000000000402f33\n.text:0000000000402f38\n.text:0000000000402f3c\n.text:0000000000402f3e\n'
p181
tp182
sS'quotearg_n_style_colon'
p183
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p184
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p185
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00404060\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00402f40\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00403e30\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p186
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p187
S'.text:00000000004041e0\n.text:00000000004041e1\n.text:00000000004041e3\n.text:00000000004041e4\n.text:00000000004041e8\n.text:00000000004041eb\n.text:00000000004041ed\n.text:00000000004041f2\n.text:00000000004041f5\n.text:00000000004041fa\n.text:00000000004041ff\n.text:0000000000404204\n.text:0000000000404207\n.text:000000000040420c\n.text:0000000000404213\n.text:0000000000404215\n.text:0000000000404218\n.text:000000000040421b\n.text:0000000000404220\n.text:0000000000404224\n.text:0000000000404225\n.text:0000000000404227\n.text:0000000000404228\n'
p188
tp189
sS'textdomain'
p190
(S'\n__stdcall textdomain()\n'
p191
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00609068)();\u000a  return;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x00609068]\n'
p193
S'ff 25 f2 7b 20 00\n'
p194
S'.plt:0000000000401470\n'
p195
tp196
sS'xmemdup'
p197
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p198
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p199
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00404c50\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401600\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p200
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 4c c8 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p201
S'.text:0000000000404d90\n.text:0000000000404d92\n.text:0000000000404d94\n.text:0000000000404d95\n.text:0000000000404d98\n.text:0000000000404d9b\n.text:0000000000404d9e\n.text:0000000000404da3\n.text:0000000000404da6\n.text:0000000000404da9\n.text:0000000000404dac\n.text:0000000000404daf\n.text:0000000000404db4\n.text:0000000000404db7\n.text:0000000000404db8\n.text:0000000000404dba\n.text:0000000000404dbc\n'
p202
tp203
sS'get_quoting_style'
p204
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p205
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p206
S'TEST RDI,RDI\nMOV EAX,0x609320\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p207
S'48 85 ff\nb8 20 93 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p208
S'.text:0000000000402f20\n.text:0000000000402f23\n.text:0000000000402f28\n.text:0000000000402f2c\n.text:0000000000402f2e\n'
p209
tp210
sS'ferror_unlocked'
p211
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_00609110)();\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x00609110]\n'
p214
S'ff 25 4a 7b 20 00\n'
p215
S'.plt:00000000004015c0\n'
p216
tp217
sS'exit'
p218
(S'\n__stdcall exit(int __status)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006091b8)();\u000a  return;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x006091b8]\n'
p221
S'ff 25 a2 7a 20 00\n'
p222
S'.plt:0000000000401710\n'
p223
tp224
sS'quote_mem'
p225
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p226
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p227
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004042f0\n'
p228
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p229
S'.text:0000000000404300\n.text:0000000000404303\n.text:0000000000404306\n.text:0000000000404308\n.text:000000000040430b\n.text:000000000040430e\n'
p230
tp231
sS'locale_charset'
p232
(S'\n__stdcall locale_charset()\n'
p233
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0040512d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0040512d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p234
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401640\nTEST RAX,RAX\nMOV R14D,0x4065d9\nCMOVNZ R14,RAX\nCALL 0x00405140\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00405105\nJMP 0x0040512d\nMOV RDI,RBX\nCALL 0x004014c0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004014c0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0040512d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004015e0\nTEST EAX,EAX\nJZ 0x00405120\nCMP BPL,0x2a\nJNZ 0x004050e0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x004050e0\nMOV RDI,RBX\nCALL 0x004014c0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x406c38\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p235
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 82 c5 ff ff\n48 85 c0\n41 be d9 65 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 d8 c3 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 ca c3 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 d0 c4 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 98 c3 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 38 6c 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p236
S'.text:00000000004050b0\n.text:00000000004050b1\n.text:00000000004050b3\n.text:00000000004050b4\n.text:00000000004050b9\n.text:00000000004050be\n.text:00000000004050c1\n.text:00000000004050c7\n.text:00000000004050cb\n.text:00000000004050d0\n.text:00000000004050d3\n.text:00000000004050d6\n.text:00000000004050d9\n.text:00000000004050db\n.text:00000000004050e0\n.text:00000000004050e3\n.text:00000000004050e8\n.text:00000000004050ec\n.text:00000000004050f1\n.text:00000000004050f6\n.text:00000000004050fb\n.text:0000000000405100\n.text:0000000000405103\n.text:0000000000405105\n.text:0000000000405108\n.text:000000000040510b\n.text:0000000000405110\n.text:0000000000405112\n.text:0000000000405114\n.text:0000000000405118\n.text:000000000040511a\n.text:000000000040511e\n.text:0000000000405120\n.text:0000000000405123\n.text:0000000000405128\n.text:000000000040512d\n.text:0000000000405131\n.text:0000000000405136\n.text:000000000040513a\n.text:000000000040513b\n.text:000000000040513d\n.text:000000000040513e\n'
p237
tp238
sS'set_program_name'
p239
(S'\n__stdcall set_program_name(char * argv0)\n'
p240
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p241
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402eb1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401510\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00402e9b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x405f52\nMOV EDX,0x7\nCALL 0x00401420\nTEST EAX,EAX\nJNZ 0x00402e9b\nMOV ESI,0x405f5a\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401420\nTEST EAX,EAX\nJNZ 0x00402e98\nADD R14,0x3\nMOV qword ptr [0x00609280],R14\nMOV RBX,R14\nMOV qword ptr [0x00609318],RBX\nMOV qword ptr [0x006092a0],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x006092c0]\nMOV EDI,0x405f1a\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401720\nCALL 0x00401400\n'
p242
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 c7 e6 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 52 5f 40 00\nba 07 00 00 00\ne8 ad e5 ff ff\n85 c0\n75 24\nbe 5a 5f 40 00\nba 03 00 00 00\n4c 89 f7\ne8 97 e5 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 e8 63 20 00\n4c 89 f3\n48 89 1d 76 64 20 00\n48 89 1d f7 63 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 08 64 20 00\nbf 1a 5f 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 54 e8 ff ff\ne8 2f e5 ff ff\n'
p243
S'.text:0000000000402e30\n.text:0000000000402e32\n.text:0000000000402e33\n.text:0000000000402e34\n.text:0000000000402e37\n.text:0000000000402e3a\n.text:0000000000402e3c\n.text:0000000000402e41\n.text:0000000000402e44\n.text:0000000000402e49\n.text:0000000000402e4c\n.text:0000000000402e50\n.text:0000000000402e54\n.text:0000000000402e57\n.text:0000000000402e5a\n.text:0000000000402e5e\n.text:0000000000402e60\n.text:0000000000402e64\n.text:0000000000402e69\n.text:0000000000402e6e\n.text:0000000000402e73\n.text:0000000000402e75\n.text:0000000000402e77\n.text:0000000000402e7c\n.text:0000000000402e81\n.text:0000000000402e84\n.text:0000000000402e89\n.text:0000000000402e8b\n.text:0000000000402e8d\n.text:0000000000402e91\n.text:0000000000402e98\n.text:0000000000402e9b\n.text:0000000000402ea2\n.text:0000000000402ea9\n.text:0000000000402ead\n.text:0000000000402eae\n.text:0000000000402eb0\n.text:0000000000402eb1\n.text:0000000000402eb8\n.text:0000000000402ebd\n.text:0000000000402ec2\n.text:0000000000402ec7\n.text:0000000000402ecc\n'
p244
tp245
sS'fileno'
p246
(S'\n__stdcall fileno(FILE * __stream)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00609138)();\u000a  return iVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x00609138]\n'
p249
S'ff 25 22 7b 20 00\n'
p250
S'.plt:0000000000401610\n'
p251
tp252
sS'strspn'
p253
(S'\n__stdcall strspn(char * __s, char * __accept)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strspn(char *__s,char *__accept)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strspn_006090e0)();\u000a  return sVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x006090e0]\n'
p256
S'ff 25 7a 7b 20 00\n'
p257
S'.plt:0000000000401560\n'
p258
tp259
sS'quotearg_buffer'
p260
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p261
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p262
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x609320\nCMOVNZ RBP,R8\nCALL 0x00401410\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00403050\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p263
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 20 93 60 00\n49 0f 45 e8\ne8 18 e4 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p264
S'.text:0000000000402fd0\n.text:0000000000402fd1\n.text:0000000000402fd3\n.text:0000000000402fd5\n.text:0000000000402fd7\n.text:0000000000402fd9\n.text:0000000000402fda\n.text:0000000000402fdb\n.text:0000000000402fde\n.text:0000000000402fe1\n.text:0000000000402fe4\n.text:0000000000402fe7\n.text:0000000000402fea\n.text:0000000000402fef\n.text:0000000000402ff3\n.text:0000000000402ff8\n.text:0000000000402ffb\n.text:0000000000402ffd\n.text:0000000000403001\n.text:0000000000403005\n.text:0000000000403009\n.text:000000000040300d\n.text:0000000000403010\n.text:0000000000403013\n.text:0000000000403016\n.text:0000000000403019\n.text:000000000040301c\n.text:000000000040301f\n.text:0000000000403023\n.text:0000000000403024\n.text:0000000000403029\n.text:000000000040302d\n.text:0000000000403031\n.text:0000000000403033\n.text:0000000000403037\n.text:0000000000403038\n.text:000000000040303a\n.text:000000000040303c\n.text:000000000040303e\n.text:0000000000403040\n.text:0000000000403041\n'
p265
tp266
sS'quotearg_colon'
p267
(S'\n__stdcall quotearg_colon(char * arg)\n'
p268
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p269
S'MOV ESI,0x3a\nJMP 0x004041b0\n'
p270
S'be 3a 00 00 00\neb e9\n'
p271
S'.text:00000000004041c0\n.text:00000000004041c5\n'
p272
tp273
sS'mbrtowc'
p274
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006090a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x006090a0]\n'
p277
S'ff 25 ba 7b 20 00\n'
p278
S'.plt:00000000004014e0\n'
p279
tp280
sS'rpl_fflush'
p281
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p282
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00609148)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p283
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040547d\nMOV RDI,RBX\nCALL 0x00401660\nTEST EAX,EAX\nJZ 0x0040547d\nMOV RDI,RBX\nCALL 0x00405490\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401630\n'
p284
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 ef c1 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 aa c1 ff ff\n'
p285
S'.text:0000000000405460\n.text:0000000000405461\n.text:0000000000405464\n.text:0000000000405467\n.text:0000000000405469\n.text:000000000040546c\n.text:0000000000405471\n.text:0000000000405473\n.text:0000000000405475\n.text:0000000000405478\n.text:000000000040547d\n.text:0000000000405480\n.text:0000000000405481\n'
p286
tp287
sS'setlocale'
p288
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p289
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_00609180)();\u000a  return pcVar1;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x00609180]\n'
p291
S'ff 25 da 7a 20 00\n'
p292
S'.plt:00000000004016a0\n'
p293
tp294
sS'c_toupper'
p295
(S'\n__stdcall c_toupper()\n'
p296
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p297
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p298
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p299
S'.text:0000000000405030\n.text:0000000000405033\n.text:0000000000405036\n.text:0000000000405039\n.text:000000000040503c\n'
p300
tp301
sS'bindtextdomain'
p302
(S'\n__stdcall bindtextdomain()\n'
p303
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00609078)();\u000a  return;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x00609078]\n'
p305
S'ff 25 e2 7b 20 00\n'
p306
S'.plt:0000000000401490\n'
p307
tp308
sS'set_char_quoting'
p309
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p310
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p311
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x609320\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p312
S'89 f1\n48 85 ff\nbe 20 93 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p313
S'.text:0000000000402f40\n.text:0000000000402f42\n.text:0000000000402f45\n.text:0000000000402f4a\n.text:0000000000402f4e\n.text:0000000000402f50\n.text:0000000000402f53\n.text:0000000000402f57\n.text:0000000000402f5c\n.text:0000000000402f5f\n.text:0000000000402f61\n.text:0000000000402f63\n.text:0000000000402f66\n.text:0000000000402f68\n.text:0000000000402f6b\n.text:0000000000402f6d\n.text:0000000000402f70\n.text:0000000000402f75\n'
p314
tp315
sS'quotearg_n'
p316
(S'\n__stdcall quotearg_n(char * arg)\n'
p317
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p318
S'MOV RDX,-0x1\nMOV ECX,0x609320\nJMP 0x00403e30\n'
p319
S'48 c7 c2 ff ff ff ff\nb9 20 93 60 00\neb 02\n'
p320
S'.text:0000000000403e20\n.text:0000000000403e27\n.text:0000000000403e2c\n'
p321
tp322
sS'mbsinit'
p323
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p324
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_006091d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x006091d8]\n'
p326
S'ff 25 82 7a 20 00\n'
p327
S'.plt:0000000000401750\n'
p328
tp329
sS'dcgettext'
p330
(S'\n__stdcall dcgettext()\n'
p331
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00609080)();\u000a  return;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x00609080]\n'
p333
S'ff 25 da 7b 20 00\n'
p334
S'.plt:00000000004014a0\n'
p335
tp336
sS'cmp'
p337
(S'\n__stdcall cmp(char * a, size_t a_len, char * b, size_t b_len)\n'
p338
V\u000aint cmp(char *a,size_t a_len,char *b,size_t b_len)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = -1;\u000a  if ((b_len <= a_len) && (iVar1 = 1, a_len <= b_len)) {\u000a    iVar1 = strcmp(a,b);\u000a    return iVar1;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'MOV EAX,0xffffffff\nCMP RSI,RCX\nJC 0x00402c84\nMOV EAX,0x1\nCMP RCX,RSI\nJNC 0x00402c85\nRET\nMOV RSI,RDX\nJMP 0x004015e0\n'
p340
S'b8 ff ff ff ff\n48 39 ce\n72 0a\nb8 01 00 00 00\n48 39 f1\n73 01\nc3\n48 89 d6\ne9 53 e9 ff ff\n'
p341
S'.text:0000000000402c70\n.text:0000000000402c75\n.text:0000000000402c78\n.text:0000000000402c7a\n.text:0000000000402c7f\n.text:0000000000402c82\n.text:0000000000402c84\n.text:0000000000402c85\n.text:0000000000402c88\n'
p342
tp343
sS'close_stream'
p344
(S'\n__stdcall close_stream(FILE * stream)\n'
p345
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p346
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401450\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004015c0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x004053e0\nTEST EBP,EBP\nJZ 0x0040507b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040509f\nCALL 0x00401410\nMOV dword ptr [RAX],0x0\nJMP 0x0040509f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040509f\nTEST CL,CL\nJNZ 0x0040509f\nCALL 0x00401410\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p347
S'55\n41 56\n53\n48 89 fb\ne8 04 c4 ff ff\n49 89 c6\n48 89 df\ne8 69 c5 ff ff\n89 c5\n48 89 df\ne8 7f 03 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 9d c3 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 7e c3 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p348
S'.text:0000000000405040\n.text:0000000000405041\n.text:0000000000405043\n.text:0000000000405044\n.text:0000000000405047\n.text:000000000040504c\n.text:000000000040504f\n.text:0000000000405052\n.text:0000000000405057\n.text:0000000000405059\n.text:000000000040505c\n.text:0000000000405061\n.text:0000000000405063\n.text:0000000000405065\n.text:000000000040506a\n.text:000000000040506c\n.text:000000000040506e\n.text:0000000000405073\n.text:0000000000405079\n.text:000000000040507b\n.text:000000000040507d\n.text:0000000000405080\n.text:0000000000405082\n.text:0000000000405084\n.text:0000000000405087\n.text:0000000000405089\n.text:000000000040508b\n.text:000000000040508d\n.text:0000000000405092\n.text:0000000000405094\n.text:0000000000405097\n.text:000000000040509c\n.text:000000000040509f\n.text:00000000004050a1\n.text:00000000004050a2\n.text:00000000004050a4\n.text:00000000004050a5\n'
p349
tp350
sS'quotearg_colon_mem'
p351
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p352
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p353
S'MOV EDX,0x3a\nJMP 0x00404140\n'
p354
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p355
S'.text:00000000004041d0\n.text:00000000004041d5\n'
p356
tp357
sS'quotearg_free'
p358
(S'\n__stdcall quotearg_free()\n'
p359
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p360
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x00609218]\nCMP dword ptr [0x00609220],0x2\nJC 0x00403dca\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004013e0\nINC RBX\nMOV EAX,dword ptr [0x00609220]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00403db0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x609360\nCMP RDI,RAX\nJZ 0x00403df3\nCALL 0x004013e0\nMOV qword ptr [0x00609228],0x100\nMOV qword ptr [0x00609230],0x609360\nMOV EAX,0x609228\nCMP R14,RAX\nJZ 0x00403e10\nMOV RDI,R14\nCALL 0x004013e0\nMOV qword ptr [0x00609218],0x609228\nMOV dword ptr [0x00609220],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p361
S'41 57\n41 56\n53\n4c 8b 35 7c 54 20 00\n83 3d 7d 54 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 28 d6 ff ff\n48 ff c3\n8b 05 5f 54 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 60 93 60 00\n48 39 c7\n74 1b\ne8 03 d6 ff ff\n48 c7 05 40 54 20 00 00 01 00 00\n48 c7 05 3d 54 20 00 60 93 60 00\nb8 28 92 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 db d5 ff ff\n48 c7 05 08 54 20 00 28 92 60 00\nc7 05 06 54 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p362
S'.text:0000000000403d90\n.text:0000000000403d92\n.text:0000000000403d94\n.text:0000000000403d95\n.text:0000000000403d9c\n.text:0000000000403da3\n.text:0000000000403da5\n.text:0000000000403da9\n.text:0000000000403dae\n.text:0000000000403db0\n.text:0000000000403db3\n.text:0000000000403db8\n.text:0000000000403dbb\n.text:0000000000403dc1\n.text:0000000000403dc5\n.text:0000000000403dc8\n.text:0000000000403dca\n.text:0000000000403dce\n.text:0000000000403dd3\n.text:0000000000403dd6\n.text:0000000000403dd8\n.text:0000000000403ddd\n.text:0000000000403de8\n.text:0000000000403df3\n.text:0000000000403df8\n.text:0000000000403dfb\n.text:0000000000403dfd\n.text:0000000000403e00\n.text:0000000000403e05\n.text:0000000000403e10\n.text:0000000000403e1a\n.text:0000000000403e1b\n.text:0000000000403e1d\n.text:0000000000403e1f\n'
p363
tp364
sS'quotearg_mem'
p365
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p366
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p367
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403ff0\n'
p368
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p369
S'.text:0000000000404010\n.text:0000000000404013\n.text:0000000000404016\n.text:0000000000404018\n.text:000000000040401b\n.text:000000000040401e\n'
p370
tp371
sS'xcalloc'
p372
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p373
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p374
S'PUSH RAX\nCALL 0x00404ea0\nTEST RAX,RAX\nJZ 0x00404d7d\nPOP RCX\nRET\nCALL 0x00404de0\n'
p375
S'50\ne8 2a 01 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p376
S'.text:0000000000404d70\n.text:0000000000404d71\n.text:0000000000404d76\n.text:0000000000404d79\n.text:0000000000404d7b\n.text:0000000000404d7c\n.text:0000000000404d7d\n'
p377
tp378
sS'deregister_tm_clones'
p379
(S'\n__stdcall deregister_tm_clones()\n'
p380
V\u000a/* WARNING: Removing unreachable block (ram,0x004017d5) */\u000a/* WARNING: Removing unreachable block (ram,0x004017df) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p381
S'MOV EAX,0x609277\nPUSH RBP\nSUB RAX,0x609270\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x004017f0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004017f0\nPOP RBP\nMOV EDI,0x609270\nJMP RAX\nPOP RBP\nRET\n'
p382
S'b8 77 92 60 00\n55\n48 2d 70 92 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 70 92 60 00\nff e0\n5d\nc3\n'
p383
S'.text:00000000004017c0\n.text:00000000004017c5\n.text:00000000004017c6\n.text:00000000004017cc\n.text:00000000004017d0\n.text:00000000004017d3\n.text:00000000004017d5\n.text:00000000004017da\n.text:00000000004017dd\n.text:00000000004017df\n.text:00000000004017e0\n.text:00000000004017e5\n.text:00000000004017f0\n.text:00000000004017f1\n'
p384
tp385
sS'strtol'
p386
(S'\n__stdcall strtol(char * __nptr, char * * __endptr, int __base)\n'
p387
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along strtol(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_strtol_00609128)();\u000a  return lVar1;\u000a}\u000a\u000a
p388
S'JMP qword ptr [0x00609128]\n'
p389
S'ff 25 32 7b 20 00\n'
p390
S'.plt:00000000004015f0\n'
p391
tp392
sS'clear_ungetc_buffer_preserving_position'
p393
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p394
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p395
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405497\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x004054b0\n'
p396
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p397
S'.text:0000000000405490\n.text:0000000000405494\n.text:0000000000405496\n.text:0000000000405497\n.text:0000000000405499\n.text:000000000040549e\n'
p398
tp399
sS'xnmalloc'
p400
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p401
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p402
S'MOV RAX,RDI\nMUL RSI\nJO 0x00404c41\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00404c50\nPUSH RAX\nCALL 0x00404de0\n'
p403
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p404
S'.text:0000000000404c30\n.text:0000000000404c33\n.text:0000000000404c36\n.text:0000000000404c38\n.text:0000000000404c3c\n.text:0000000000404c3f\n.text:0000000000404c41\n.text:0000000000404c42\n'
p405
tp406
sS'quotearg_custom'
p407
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p408
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p409
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404230\n'
p410
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p411
S'.text:00000000004042b0\n.text:00000000004042b3\n.text:00000000004042b6\n.text:00000000004042b9\n.text:00000000004042bb\n.text:00000000004042be\n.text:00000000004042c1\n.text:00000000004042c4\n'
p412
tp413
sS'free'
p414
(S'\n__stdcall free(void * __ptr)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00609020)();\u000a  return;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x00609020]\n'
p417
S'ff 25 3a 7c 20 00\n'
p418
S'.plt:00000000004013e0\n'
p419
tp420
sS'close'
p421
(S'\n__stdcall close(int __fd)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006090d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x006090d8]\n'
p424
S'ff 25 82 7b 20 00\n'
p425
S'.plt:0000000000401550\n'
p426
tp427
sS'getenv'
p428
(S'\n__stdcall getenv(char * __name)\n'
p429
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00609018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x00609018]\n'
p431
S'ff 25 42 7c 20 00\n'
p432
S'.plt:00000000004013d0\n'
p433
tp434
sS'quotearg_char'
p435
(S'\n__stdcall quotearg_char(char * arg)\n'
p436
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p437
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00404140\n'
p438
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p439
S'.text:00000000004041b0\n.text:00000000004041b2\n.text:00000000004041b9\n.text:00000000004041bb\n'
p440
tp441
sS'malloc'
p442
(S'\n__stdcall malloc(size_t __size)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00609140)();\u000a  return pvVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x00609140]\n'
p445
S'ff 25 1a 7b 20 00\n'
p446
S'.plt:0000000000401620\n'
p447
tp448
sS'c_tolower'
p449
(S'\n__stdcall c_tolower()\n'
p450
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p451
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p452
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p453
S'.text:0000000000405020\n.text:0000000000405023\n.text:0000000000405026\n.text:0000000000405029\n.text:000000000040502c\n'
p454
tp455
sS'all_digits_p'
p456
(S'\n__stdcall all_digits_p(char * s)\n'
p457
V\u000a_Bool all_digits_p(char *s)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  bool bVar3;\u000a  \u000a  if ((int)*s - 0x30U < 10) {\u000a    sVar1 = strlen(s);\u000a    sVar2 = strspn(s,"0123456789");\u000a    bVar3 = sVar1 == sVar2;\u000a  }\u000a  else {\u000a    bVar3 = false;\u000a  }\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p458
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOVSX EAX,byte ptr [RBX]\nADD EAX,-0x30\nCMP EAX,0x9\nJA 0x004023b2\nMOV RDI,RBX\nCALL 0x004014c0\nMOV R14,RAX\nMOV ESI,0x405cf2\nMOV RDI,RBX\nCALL 0x00401560\nCMP R14,RAX\nSETZ AL\nJMP 0x004023b4\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p459
S'41 56\n53\n50\n48 89 fb\n0f be 03\n83 c0 d0\n83 f8 09\n77 20\n48 89 df\ne8 26 f1 ff ff\n49 89 c6\nbe f2 5c 40 00\n48 89 df\ne8 b6 f1 ff ff\n49 39 c6\n0f 94 c0\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p460
S'.text:0000000000402380\n.text:0000000000402382\n.text:0000000000402383\n.text:0000000000402384\n.text:0000000000402387\n.text:000000000040238a\n.text:000000000040238d\n.text:0000000000402390\n.text:0000000000402392\n.text:0000000000402395\n.text:000000000040239a\n.text:000000000040239d\n.text:00000000004023a2\n.text:00000000004023a5\n.text:00000000004023aa\n.text:00000000004023ad\n.text:00000000004023b0\n.text:00000000004023b2\n.text:00000000004023b4\n.text:00000000004023b8\n.text:00000000004023b9\n.text:00000000004023bb\n'
p461
tp462
sS'scan_arg'
p463
(S'\n__stdcall scan_arg(operand * __return_storage_ptr__, char * arg)\n'
p464
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aoperand * scan_arg(operand *__return_storage_ptr__,char *arg)\u000a\u000a{\u000a  char cVar1;\u000a  uint uVar2;\u000a  ushort *puVar3;\u000a  _Bool _Var4;\u000a  byte bVar5;\u000a  bool bVar6;\u000a  int iVar7;\u000a  ushort **ppuVar8;\u000a  char *pcVar9;\u000a  char *pcVar10;\u000a  size_t sVar11;\u000a  ulong uVar12;\u000a  ulong uVar13;\u000a  undefined8 uVar14;\u000a  undefined2 *puVar15;\u000a  long lVar16;\u000a  int unaff_R14D;\u000a  long in_stack_00000000;\u000a  int in_stack_00000008;\u000a  undefined4 local_58;\u000a  undefined4 uStack84;\u000a  undefined2 uStack80;\u000a  undefined2 uStack78;\u000a  undefined4 uStack76;\u000a  undefined8 local_48;\u000a  int local_40;\u000a  undefined4 uStack60;\u000a  int iStack56;\u000a  \u000a  _Var4 = xstrtold(arg,(char **)0x0,(longdouble *)&local_58,c_strtold);\u000a  if (_Var4 != false) {\u000a    ppuVar8 = __ctype_b_loc();\u000a    puVar3 = *ppuVar8;\u000a    arg = arg + -1;\u000a    do {\u000a      do {\u000a        cVar1 = arg[1];\u000a        arg = arg + 1;\u000a        bVar5 = to_uchar();\u000a      } while (cVar1 == '+');\u000a    } while ((puVar3[(ulong)bVar5] & 0x2000) != 0);\u000a    local_48 = (char *)0x0;\u000a    local_40 = 0x7fffffff;\u000a    pcVar9 = strchr(arg,0x2e);\u000a    if ((pcVar9 == (char *)0x0) && (pcVar10 = strchr(arg,0x70), pcVar10 == (char *)0x0)) {\u000a      local_40 = 0;\u000a    }\u000a    sVar11 = strcspn(arg,"xX");\u000a    if ((arg[sVar11] == 0) &&\u000a       ((float10)CONCAT28(uStack80,CONCAT44(uStack84,local_58)) * (float10)0 == (float10)0)) {\u000a      local_48 = (char *)strlen(arg);\u000a      if (pcVar9 == (char *)0x0) {\u000a        uVar12 = 0;\u000a      }\u000a      else {\u000a        uVar12 = strcspn(pcVar9 + 1,"eE");\u000a        if ((uVar12 < 0x80000000) && (local_40 = (int)uVar12, uVar12 == 0)) {\u000a          uVar13 = 0xffffffffffffffff;\u000a        }\u000a        else {\u000a          if (pcVar9 == arg) {\u000a            bVar6 = true;\u000a          }\u000a          else {\u000a            bVar6 = 9 < (int)pcVar9[-1] - 0x30U;\u000a          }\u000a          uVar13 = (ulong)bVar6;\u000a        }\u000a        local_48 = local_48 + uVar13;\u000a      }\u000a      pcVar10 = strchr(arg,0x65);\u000a      if ((pcVar10 != (char *)0x0) || (pcVar10 = strchr(arg,0x45), pcVar10 != (char *)0x0)) {\u000a        uVar13 = strtol(pcVar10 + 1,(char **)0x0,10);\u000a        iVar7 = (int)uVar13;\u000a        if ((-1 < (long)uVar13) && (iVar7 = local_40, (long)uVar13 < (long)local_40)) {\u000a          iVar7 = (int)uVar13;\u000a        }\u000a        local_40 = local_40 - iVar7;\u000a        sVar11 = strlen(arg);\u000a        local_48 = pcVar10 + (long)(local_48 + (-sVar11 - (long)arg));\u000a        if ((long)uVar13 < 0) {\u000a          if ((pcVar10 == pcVar9 + 1) || (pcVar9 == (char *)0x0)) {\u000a            local_48 = local_48 + 1;\u000a          }\u000a          lVar16 = -uVar13;\u000a        }\u000a        else {\u000a          if (((pcVar9 != (char *)0x0) && (uVar12 != 0)) && (local_40 == 0)) {\u000a            local_48 = local_48 + -1;\u000a          }\u000a          if (uVar13 <= uVar12) {\u000a            uVar12 = uVar13;\u000a          }\u000a          lVar16 = uVar13 - uVar12;\u000a        }\u000a        local_48 = local_48 + lVar16;\u000a      }\u000a    }\u000a    *(undefined4 *)&__return_storage_ptr__->width = (undefined4)local_48;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->width + 4) = local_48._4_4_;\u000a    __return_storage_ptr__->precision = local_40;\u000a    *(undefined4 *)&__return_storage_ptr__->field_0x1c = uStack60;\u000a    *(undefined4 *)&__return_storage_ptr__->value = local_58;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->value + 4) = uStack84;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->value + 8) = CONCAT22(uStack78,uStack80);\u000a    *(undefined4 *)((long)&__return_storage_ptr__->value + 0xc) = uStack76;\u000a    return __return_storage_ptr__;\u000a  }\u000a  uVar14 = dcgettext(0,"invalid floating point argument: %s",5);\u000a  quote(arg);\u000a  error(0,0,uVar14);\u000a  uVar14 = usage();\u000a  puVar15 = (undefined2 *)&stack0xffffffffffffffd0;\u000a  if (unaff_R14D < iStack56) {\u000a    puVar15 = &uStack80;\u000a  }\u000a  uVar2 = *(uint *)(puVar15 + 0xc);\u000a  if ((uVar2 != 0x7fffffff) && (in_stack_00000008 != 0x7fffffff)) {\u000a    if (equal_width != 1) {\u000a      __sprintf_chk(format_buf,1,0x1c,"%%.%dLf",(ulong)uVar2,(ulong)uVar2,uVar14);\u000a      return (operand *)format_buf;\u000a    }\u000a    bVar6 = uVar2 != 0;\u000a    uVar13 = ((long)(int)(uVar2 - in_stack_00000008) - (ulong)(in_stack_00000008 != 0 && uVar2 == 0)\u000a             ) + (ulong)(in_stack_00000008 == 0 && bVar6) + in_stack_00000000;\u000a    uVar12 = (ulong)(iStack56 == 0 && bVar6) + (long)(int)(uVar2 - iStack56) +\u000a             CONCAT44(uStack60,local_40);\u000a    if (uVar12 <= uVar13) {\u000a      uVar12 = uVar13;\u000a    }\u000a    if (uVar12 < 0x80000000) {\u000a      __sprintf_chk(format_buf,1,0x1c,"%%0%d.%dLf",uVar12,(ulong)uVar2,uVar14);\u000a      return (operand *)format_buf;\u000a    }\u000a  }\u000a  return (operand *)&DAT_00405da2;\u000a}\u000a\u000a
p465
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R12,RSI\nMOV R14,RDI\nMOV RDX,RSP\nXOR ESI,ESI\nMOV ECX,0x402ce0\nMOV RDI,R12\nCALL 0x00404e10\nTEST AL,AL\nJZ 0x004028c6\nCALL 0x00401770\nMOV RBX,qword ptr [RAX]\nDEC R12\nNOP dword ptr [RAX]\nMOVSX EBP,byte ptr [R12 + 0x1]\nINC R12\nMOV EDI,EBP\nCALL 0x00402cd0\nMOVZX EAX,AL\nMOVZX EAX,word ptr [RBX + RAX*0x2]\nAND EAX,0x2000\nCMP EBP,0x2b\nJZ 0x004026e0\nTEST AX,AX\nJNZ 0x004026e0\nMOV qword ptr [RSP + 0x10],0x0\nMOV dword ptr [RSP + 0x18],0x7fffffff\nMOV ESI,0x2e\nMOV RDI,R12\nCALL 0x004014f0\nMOV R15,RAX\nTEST R15,R15\nJNZ 0x00402746\nMOV ESI,0x70\nMOV RDI,R12\nCALL 0x004014f0\nTEST RAX,RAX\nJNZ 0x00402746\nMOV dword ptr [RSP + 0x18],0x0\nMOV ESI,0x405d89\nMOV RDI,R12\nCALL 0x00401570\nCMP byte ptr [RAX + R12*0x1],0x0\nJNZ 0x00402896\nFLD tword ptr [RSP]\nFLDZ\nFMUL ST1\nFXCH\nFUCOMIP ST0,ST1\nFSTP ST0\nJNZ 0x00402896\nJP 0x00402896\nMOV RDI,R12\nCALL 0x004014c0\nMOV qword ptr [RSP + 0x10],RAX\nTEST R15,R15\nJZ 0x004027c5\nLEA RDI,[R15 + 0x1]\nMOV ESI,0x405d8c\nCALL 0x00401570\nMOV RBX,RAX\nCMP RBX,0x7fffffff\nJA 0x004027b0\nMOV dword ptr [RSP + 0x18],EBX\nTEST RBX,RBX\nJZ 0x004028ba\nCMP R15,R12\nJZ 0x004027c9\nMOVSX EAX,byte ptr [R15 + -0x1]\nADD EAX,-0x30\nCMP EAX,0x9\nSETA AL\nJMP 0x004027cb\nXOR EBX,EBX\nJMP 0x004027d3\nMOV AL,0x1\nMOVZX EAX,AL\nADD qword ptr [RSP + 0x10],RAX\nMOV ESI,0x65\nMOV RDI,R12\nCALL 0x004014f0\nMOV RBP,RAX\nTEST RBP,RBP\nJNZ 0x00402801\nMOV ESI,0x45\nMOV RDI,R12\nCALL 0x004014f0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00402896\nLEA RDI,[RBP + 0x1]\nXOR ESI,ESI\nMOV EDX,0xa\nCALL 0x004015f0\nMOV R13,RAX\nTEST R13,R13\nJS 0x00402827\nMOVSXD RAX,dword ptr [RSP + 0x18]\nCMP RAX,R13\nCMOVG RAX,R13\nJMP 0x0040282a\nMOV RAX,R13\nSUB dword ptr [RSP + 0x18],EAX\nMOV RDI,R12\nCALL 0x004014c0\nMOV RCX,RBP\nSUB RCX,R12\nSUB RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RSP + 0x10],RCX\nTEST R13,R13\nJS 0x00402874\nTEST R15,R15\nJZ 0x00402868\nTEST RBX,RBX\nJZ 0x00402868\nMOV EAX,dword ptr [RSP + 0x18]\nTEST EAX,EAX\nJNZ 0x00402868\nDEC RCX\nMOV qword ptr [RSP + 0x10],RCX\nCMP RBX,R13\nCMOVNC RBX,R13\nSUB R13,RBX\nJMP 0x00402891\nTEST R15,R15\nSETZ AL\nINC R15\nCMP RBP,R15\nJZ 0x00402886\nTEST AL,AL\nJZ 0x0040288e\nINC RCX\nMOV qword ptr [RSP + 0x10],RCX\nNEG R13\nADD qword ptr [RSP + 0x10],R13\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS xmmword ptr [R14 + 0x10],XMM1\nMOVAPS xmmword ptr [R14],XMM0\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RAX,-0x1\nJMP 0x004027ce\nXOR EDI,EDI\nMOV ESI,0x405d65\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RBP,RAX\nMOV RDI,R12\nCALL 0x00404320\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x004016d0\nMOV EDI,0x1\nCALL 0x00401890\nNOP dword ptr [RAX]\n'
p466
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 f4\n49 89 fe\n48 89 e2\n31 f6\nb9 e0 2c 40 00\n4c 89 e7\ne8 4a 27 00 00\n84 c0\n0f 84 f8 01 00 00\ne8 9d f0 ff ff\n48 8b 18\n49 ff cc\n0f 1f 80 00 00 00 00\n41 0f be 6c 24 01\n49 ff c4\n89 ef\ne8 e0 05 00 00\n0f b6 c0\n0f b7 04 43\n25 00 20 00 00\n83 fd 2b\n74 df\n66 85 c0\n75 da\n48 c7 44 24 10 00 00 00 00\nc7 44 24 18 ff ff ff 7f\nbe 2e 00 00 00\n4c 89 e7\ne8 cc ed ff ff\n49 89 c7\n4d 85 ff\n75 1a\nbe 70 00 00 00\n4c 89 e7\ne8 b7 ed ff ff\n48 85 c0\n75 08\nc7 44 24 18 00 00 00 00\nbe 89 5d 40 00\n4c 89 e7\ne8 1d ee ff ff\n42 80 3c 20 00\n0f 85 38 01 00 00\ndb 2c 24\nd9 ee\ndc c9\nd9 c9\ndf e9\ndd d8\n0f 85 25 01 00 00\n0f 8a 1f 01 00 00\n4c 89 e7\ne8 41 ed ff ff\n48 89 44 24 10\n4d 85 ff\n74 3c\n49 8d 7f 01\nbe 8c 5d 40 00\ne8 d9 ed ff ff\n48 89 c3\n48 81 fb ff ff ff 7f\n77 0d\n89 5c 24 18\n48 85 db\n0f 84 0a 01 00 00\n4d 39 e7\n74 14\n41 0f be 47 ff\n83 c0 d0\n83 f8 09\n0f 97 c0\neb 06\n31 db\neb 0a\nb0 01\n0f b6 c0\n48 01 44 24 10\nbe 65 00 00 00\n4c 89 e7\ne8 10 ed ff ff\n48 89 c5\n48 85 ed\n75 19\nbe 45 00 00 00\n4c 89 e7\ne8 fb ec ff ff\n48 89 c5\n48 85 ed\n0f 84 95 00 00 00\n48 8d 7d 01\n31 f6\nba 0a 00 00 00\ne8 df ed ff ff\n49 89 c5\n4d 85 ed\n78 0e\n48 63 44 24 18\n4c 39 e8\n49 0f 4f c5\neb 03\n4c 89 e8\n29 44 24 18\n4c 89 e7\ne8 8a ec ff ff\n48 89 e9\n4c 29 e1\n48 29 c1\n48 03 4c 24 10\n48 89 4c 24 10\n4d 85 ed\n78 26\n4d 85 ff\n74 15\n48 85 db\n74 10\n8b 44 24 18\n85 c0\n75 08\n48 ff c9\n48 89 4c 24 10\n4c 39 eb\n49 0f 43 dd\n49 29 dd\neb 1d\n4d 85 ff\n0f 94 c0\n49 ff c7\n4c 39 fd\n74 04\n84 c0\n74 08\n48 ff c1\n48 89 4c 24 10\n49 f7 dd\n4c 01 6c 24 10\n0f 28 04 24\n0f 28 4c 24 10\n41 0f 29 4e 10\n41 0f 29 06\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 c7 c0 ff ff ff ff\ne9 08 ff ff ff\n31 ff\nbe 65 5d 40 00\nba 05 00 00 00\ne8 c9 eb ff ff\n48 89 c5\n4c 89 e7\ne8 3e 1a 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 dd ed ff ff\nbf 01 00 00 00\ne8 93 ef ff ff\n0f 1f 00\n'
p467
S'.text:00000000004026a0\n.text:00000000004026a1\n.text:00000000004026a3\n.text:00000000004026a5\n.text:00000000004026a7\n.text:00000000004026a9\n.text:00000000004026aa\n.text:00000000004026ae\n.text:00000000004026b1\n.text:00000000004026b4\n.text:00000000004026b7\n.text:00000000004026b9\n.text:00000000004026be\n.text:00000000004026c1\n.text:00000000004026c6\n.text:00000000004026c8\n.text:00000000004026ce\n.text:00000000004026d3\n.text:00000000004026d6\n.text:00000000004026d9\n.text:00000000004026e0\n.text:00000000004026e6\n.text:00000000004026e9\n.text:00000000004026eb\n.text:00000000004026f0\n.text:00000000004026f3\n.text:00000000004026f7\n.text:00000000004026fc\n.text:00000000004026ff\n.text:0000000000402701\n.text:0000000000402704\n.text:0000000000402706\n.text:000000000040270f\n.text:0000000000402717\n.text:000000000040271c\n.text:000000000040271f\n.text:0000000000402724\n.text:0000000000402727\n.text:000000000040272a\n.text:000000000040272c\n.text:0000000000402731\n.text:0000000000402734\n.text:0000000000402739\n.text:000000000040273c\n.text:000000000040273e\n.text:0000000000402746\n.text:000000000040274b\n.text:000000000040274e\n.text:0000000000402753\n.text:0000000000402758\n.text:000000000040275e\n.text:0000000000402761\n.text:0000000000402763\n.text:0000000000402765\n.text:0000000000402767\n.text:0000000000402769\n.text:000000000040276b\n.text:0000000000402771\n.text:0000000000402777\n.text:000000000040277a\n.text:000000000040277f\n.text:0000000000402784\n.text:0000000000402787\n.text:0000000000402789\n.text:000000000040278d\n.text:0000000000402792\n.text:0000000000402797\n.text:000000000040279a\n.text:00000000004027a1\n.text:00000000004027a3\n.text:00000000004027a7\n.text:00000000004027aa\n.text:00000000004027b0\n.text:00000000004027b3\n.text:00000000004027b5\n.text:00000000004027ba\n.text:00000000004027bd\n.text:00000000004027c0\n.text:00000000004027c3\n.text:00000000004027c5\n.text:00000000004027c7\n.text:00000000004027c9\n.text:00000000004027cb\n.text:00000000004027ce\n.text:00000000004027d3\n.text:00000000004027d8\n.text:00000000004027db\n.text:00000000004027e0\n.text:00000000004027e3\n.text:00000000004027e6\n.text:00000000004027e8\n.text:00000000004027ed\n.text:00000000004027f0\n.text:00000000004027f5\n.text:00000000004027f8\n.text:00000000004027fb\n.text:0000000000402801\n.text:0000000000402805\n.text:0000000000402807\n.text:000000000040280c\n.text:0000000000402811\n.text:0000000000402814\n.text:0000000000402817\n.text:0000000000402819\n.text:000000000040281e\n.text:0000000000402821\n.text:0000000000402825\n.text:0000000000402827\n.text:000000000040282a\n.text:000000000040282e\n.text:0000000000402831\n.text:0000000000402836\n.text:0000000000402839\n.text:000000000040283c\n.text:000000000040283f\n.text:0000000000402844\n.text:0000000000402849\n.text:000000000040284c\n.text:000000000040284e\n.text:0000000000402851\n.text:0000000000402853\n.text:0000000000402856\n.text:0000000000402858\n.text:000000000040285c\n.text:000000000040285e\n.text:0000000000402860\n.text:0000000000402863\n.text:0000000000402868\n.text:000000000040286b\n.text:000000000040286f\n.text:0000000000402872\n.text:0000000000402874\n.text:0000000000402877\n.text:000000000040287a\n.text:000000000040287d\n.text:0000000000402880\n.text:0000000000402882\n.text:0000000000402884\n.text:0000000000402886\n.text:0000000000402889\n.text:000000000040288e\n.text:0000000000402891\n.text:0000000000402896\n.text:000000000040289a\n.text:000000000040289f\n.text:00000000004028a4\n.text:00000000004028a8\n.text:00000000004028ab\n.text:00000000004028af\n.text:00000000004028b0\n.text:00000000004028b2\n.text:00000000004028b4\n.text:00000000004028b6\n.text:00000000004028b8\n.text:00000000004028b9\n.text:00000000004028ba\n.text:00000000004028c1\n.text:00000000004028c6\n.text:00000000004028c8\n.text:00000000004028cd\n.text:00000000004028d2\n.text:00000000004028d7\n.text:00000000004028da\n.text:00000000004028dd\n.text:00000000004028e2\n.text:00000000004028e5\n.text:00000000004028e7\n.text:00000000004028e9\n.text:00000000004028eb\n.text:00000000004028ee\n.text:00000000004028f3\n.text:00000000004028f8\n.text:00000000004028fd\n'
p468
tp469
sS'rpl_fseeko'
p470
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p471
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_006091a8)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p472
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x004054d8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x004054d8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x004054ea\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004016f0\nMOV RDI,RBX\nCALL 0x00401610\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401520\nCMP RAX,-0x1\nJZ 0x00405513\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00405518\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p473
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 06 c2 ff ff\n48 89 df\ne8 1e c1 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 21 c0 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p474
S'.text:00000000004054b0\n.text:00000000004054b1\n.text:00000000004054b3\n.text:00000000004054b4\n.text:00000000004054b7\n.text:00000000004054ba\n.text:00000000004054bd\n.text:00000000004054c1\n.text:00000000004054c5\n.text:00000000004054c7\n.text:00000000004054cb\n.text:00000000004054cf\n.text:00000000004054d1\n.text:00000000004054d6\n.text:00000000004054d8\n.text:00000000004054db\n.text:00000000004054de\n.text:00000000004054e1\n.text:00000000004054e2\n.text:00000000004054e4\n.text:00000000004054e5\n.text:00000000004054ea\n.text:00000000004054ed\n.text:00000000004054f2\n.text:00000000004054f4\n.text:00000000004054f7\n.text:00000000004054fa\n.text:00000000004054ff\n.text:0000000000405503\n.text:0000000000405505\n.text:0000000000405508\n.text:000000000040550f\n.text:0000000000405511\n.text:0000000000405513\n.text:0000000000405518\n.text:0000000000405519\n.text:000000000040551b\n.text:000000000040551c\n'
p475
tp476
sS'getopt_long'
p477
(S'\n__stdcall getopt_long()\n'
p478
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_00609098)();\u000a  return;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x00609098]\n'
p480
S'ff 25 c2 7b 20 00\n'
p481
S'.plt:00000000004014d0\n'
p482
tp483
sS'incr'
p484
(S'\n__stdcall incr(char * * s0, size_t * s_len)\n'
p485
V\u000avoid incr(char **s0,size_t *s_len)\u000a\u000a{\u000a  char cVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = *s0;\u000a  pcVar3 = pcVar2 + (*s_len - 1);\u000a  do {\u000a    cVar1 = *pcVar3;\u000a    *pcVar3 = cVar1 + 1;\u000a    if (cVar1 < '9') {\u000a      return;\u000a    }\u000a    *pcVar3 = '0';\u000a    pcVar3 = pcVar3 + -1;\u000a  } while (pcVar2 <= pcVar3);\u000a  pcVar3 = *s0;\u000a  *s0 = pcVar3 + -1;\u000a  pcVar3[-1] = '1';\u000a  *s_len = *s_len + 1;\u000a  return;\u000a}\u000a\u000a
p486
S'MOV R8,qword ptr [RDI]\nMOV RCX,qword ptr [RSI]\nLEA RCX,[R8 + RCX*0x1 + -0x1]\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RCX]\nMOV EDX,EAX\nINC DL\nMOV byte ptr [RCX],DL\nCMP AL,0x39\nJL 0x00402cc9\nMOV byte ptr [RCX],0x30\nDEC RCX\nCMP RCX,R8\nJNC 0x00402ca0\nMOV RAX,qword ptr [RDI]\nLEA RCX,[RAX + -0x1]\nMOV qword ptr [RDI],RCX\nMOV byte ptr [RAX + -0x1],0x31\nINC qword ptr [RSI]\nRET\n'
p487
S'4c 8b 07\n48 8b 0e\n49 8d 4c 08 ff\n0f 1f 44 00 00\n0f b6 01\n89 c2\nfe c2\n88 11\n3c 39\n7c 1c\nc6 01 30\n48 ff c9\n4c 39 c1\n73 e8\n48 8b 07\n48 8d 48 ff\n48 89 0f\nc6 40 ff 31\n48 ff 06\nc3\n'
p488
S'.text:0000000000402c90\n.text:0000000000402c93\n.text:0000000000402c96\n.text:0000000000402c9b\n.text:0000000000402ca0\n.text:0000000000402ca3\n.text:0000000000402ca5\n.text:0000000000402ca7\n.text:0000000000402ca9\n.text:0000000000402cab\n.text:0000000000402cad\n.text:0000000000402cb0\n.text:0000000000402cb3\n.text:0000000000402cb6\n.text:0000000000402cb8\n.text:0000000000402cbb\n.text:0000000000402cbf\n.text:0000000000402cc2\n.text:0000000000402cc6\n.text:0000000000402cc9\n'
p489
tp490
sS'quote_n_mem'
p491
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p492
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p493
S'MOV ECX,0x609238\nJMP 0x00403e30\n'
p494
S'b9 38 92 60 00\ne9 36 fb ff ff\n'
p495
S'.text:00000000004042f0\n.text:00000000004042f5\n'
p496
tp497
sS'xstrdup'
p498
(S'\n__stdcall xstrdup(char * string)\n'
p499
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p500
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004014c0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00404d90\n'
p501
S'53\n48 89 fb\ne8 f7 c6 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p502
S'.text:0000000000404dc0\n.text:0000000000404dc1\n.text:0000000000404dc4\n.text:0000000000404dc9\n.text:0000000000404dcd\n.text:0000000000404dd0\n.text:0000000000404dd1\n'
p503
tp504
sS'c_ispunct'
p505
(S'\n__stdcall c_ispunct()\n'
p506
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p507
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00404fc2\nMOV AL,0x1\nJMP qword ptr [0x406820 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p508
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 20 68 40 00\nc3\n31 c0\nc3\n'
p509
S'.text:0000000000404fb0\n.text:0000000000404fb3\n.text:0000000000404fb6\n.text:0000000000404fb8\n.text:0000000000404fba\n.text:0000000000404fc1\n.text:0000000000404fc2\n.text:0000000000404fc4\n'
p510
tp511
sS'quotearg_style'
p512
(S'\n__stdcall quotearg_style(char * arg)\n'
p513
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p514
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00404020\n'
p515
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p516
S'.text:0000000000404100\n.text:0000000000404103\n.text:0000000000404105\n.text:0000000000404107\n.text:0000000000404109\n.text:000000000040410c\n'
p517
tp518
sS'long_double_format'
p519
(S'\n__stdcall long_double_format(char * fmt, layout * layout)\n'
p520
V\u000achar * long_double_format(char *fmt,layout *layout)\u000a\u000a{\u000a  char cVar1;\u000a  char cVar2;\u000a  size_t __n;\u000a  size_t sVar3;\u000a  undefined8 uVar4;\u000a  char *__dest;\u000a  void *pvVar5;\u000a  long lVar6;\u000a  size_t sVar7;\u000a  size_t sVar8;\u000a  \u000a  sVar8 = 0;\u000a  lVar6 = 0;\u000a  do {\u000a    if (fmt[lVar6] == 0) {\u000a      uVar4 = dcgettext(0,"format %s has no %% directive",5);\u000a      __dest = quote(fmt);\u000a      error(1,0,uVar4,__dest);\u000a    }\u000a    else {\u000a      if ((fmt[lVar6] == '%') && (fmt[lVar6 + 1] != '%')) break;\u000a    }\u000a    sVar8 = sVar8 + 1;\u000a    lVar6 = (ulong)(fmt[lVar6] == '%') + 1 + lVar6;\u000a  } while( true );\u000a  __n = strspn(fmt + lVar6 + 1,"-+#0 \u005c'");\u000a  lVar6 = __n + lVar6 + 1;\u000a  __n = strspn(fmt + lVar6,"0123456789");\u000a  __n = __n + lVar6;\u000a  if (fmt[__n] == '.') {\u000a    sVar3 = strspn(fmt + __n + 1,"0123456789");\u000a    __n = sVar3 + 1 + __n;\u000a  }\u000a  cVar1 = fmt[__n];\u000a  lVar6 = (ulong)(cVar1 == 'L') + __n;\u000a  if (fmt[lVar6] == 0) {\u000a    uVar4 = dcgettext(0,"format %s ends in %%",5);\u000a    __dest = quote(fmt);\u000a    error(1,0,uVar4,__dest);\u000a  }\u000a  pvVar5 = memchr("efgaEFGA",(int)fmt[lVar6],9);\u000a  if (pvVar5 == (void *)0x0) {\u000a    uVar4 = dcgettext(0,"format %s has unknown %%%c directive",5);\u000a    __dest = quote(fmt);\u000a    error(1,0,uVar4,__dest,(ulong)(uint)(int)fmt[lVar6]);\u000a  }\u000a  lVar6 = lVar6 + 1;\u000a  sVar7 = 0;\u000a  do {\u000a    cVar2 = fmt[lVar6];\u000a    if (cVar2 == '%') {\u000a      if (fmt[lVar6 + 1] == '%') {\u000a        cVar2 = fmt[lVar6];\u000a        goto LAB_004022e5;\u000a      }\u000a      uVar4 = dcgettext(0,"format %s has too many %% directives",5);\u000a      __dest = quote(fmt);\u000a      error(1,0,uVar4,__dest);\u000a    }\u000a    else {\u000aLAB_004022e5:\u000a      if (cVar2 == 0) {\u000a        __dest = (char *)xmalloc(lVar6 + 2);\u000a        memcpy(__dest,fmt,__n);\u000a        __dest[__n] = 'L';\u000a        strcpy(__dest + __n + 1,fmt + (ulong)(cVar1 == 'L') + __n);\u000a        layout->prefix_len = sVar8;\u000a        layout->suffix_len = sVar7;\u000a        return __dest;\u000a      }\u000a      sVar7 = sVar7 + 1;\u000a    }\u000a    lVar6 = (ulong)(fmt[lVar6] == '%') + 1 + lVar6;\u000a  } while( true );\u000a}\u000a\u000a
p521
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,RSI\nMOV R15,RDI\nXOR R14D,R14D\nXOR EBP,EBP\nJMP 0x00402172\nINC R14\nXOR EAX,EAX\nCMP byte ptr [R15 + RBP*0x1],0x25\nSETZ AL\nLEA RBP,[RAX + RBP*0x1 + 0x1]\nMOVZX EAX,byte ptr [R15 + RBP*0x1]\nTEST AL,AL\nJZ 0x00402190\nCMP AL,0x25\nJNZ 0x00402160\nCMP byte ptr [R15 + RBP*0x1 + 0x1],0x25\nJZ 0x00402160\nJMP 0x004021c2\nXOR EDI,EDI\nMOV ESI,0x405ccd\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RBX,RAX\nMOV RDI,R15\nCALL 0x00404320\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004016d0\nJMP 0x00402160\nLEA RDI,[R15 + RBP*0x1 + 0x1]\nINC RBP\nMOV ESI,0x405ceb\nCALL 0x00401560\nMOV RBX,RAX\nADD RBX,RBP\nLEA RDI,[R15 + RBX*0x1]\nMOV ESI,0x405cf2\nCALL 0x00401560\nMOV RBP,RAX\nADD RBP,RBX\nCMP byte ptr [R15 + RBP*0x1],0x2e\nMOV qword ptr [RSP + 0x10],R12\nJNZ 0x0040220e\nLEA RDI,[R15 + RBP*0x1 + 0x1]\nMOV ESI,0x405cf2\nCALL 0x00401560\nLEA RBP,[RAX + RBP*0x1 + 0x1]\nXOR EAX,EAX\nCMP byte ptr [R15 + RBP*0x1],0x4c\nSETZ AL\nMOV qword ptr [RSP + 0x8],RAX\nLEA R12,[RAX + RBP*0x1]\nCMP byte ptr [R15 + R12*0x1],0x0\nJNZ 0x00402258\nXOR EDI,EDI\nMOV ESI,0x405cfd\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RBX,RAX\nMOV RDI,R15\nCALL 0x00404320\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004016d0\nMOVSX ESI,byte ptr [R15 + R12*0x1]\nMOV EDI,0x405d12\nMOV EDX,0x9\nCALL 0x00401580\nTEST RAX,RAX\nJNZ 0x004022a6\nXOR EDI,EDI\nMOV ESI,0x405d1b\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RBX,RAX\nMOV RDI,R15\nCALL 0x00404320\nMOV RCX,RAX\nMOVSX R8D,byte ptr [R15 + R12*0x1]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004016d0\nLEA RAX,[R15 + RBP*0x1]\nMOV qword ptr [RSP],RAX\nINC R12\nXOR R13D,R13D\nJMP 0x004022cf\nXOR EAX,EAX\nCMP byte ptr [R15 + R12*0x1],0x25\nSETZ AL\nLEA R12,[RAX + R12*0x1 + 0x1]\nMOVZX EAX,byte ptr [R15 + R12*0x1]\nCMP AL,0x25\nJNZ 0x004022e5\nCMP byte ptr [R15 + R12*0x1 + 0x1],0x25\nJNZ 0x004022f0\nMOVZX EAX,byte ptr [R15 + R12*0x1]\nTEST AL,AL\nJZ 0x00402322\nINC R13\nJMP 0x004022c0\nXOR EDI,EDI\nMOV ESI,0x405d40\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RBX,RAX\nMOV RDI,R15\nCALL 0x00404320\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004016d0\nJMP 0x004022c0\nADD R12,0x2\nMOV RDI,R12\nCALL 0x00404c50\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,RBP\nCALL 0x00401600\nMOV byte ptr [RBX + RBP*0x1],0x4c\nLEA RDI,[RBX + RBP*0x1 + 0x1]\nMOV RSI,qword ptr [RSP]\nADD RSI,qword ptr [RSP + 0x8]\nCALL 0x00401440\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RAX],R14\nMOV qword ptr [RAX + 0x8],R13\nMOV RAX,RBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p522
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f4\n49 89 ff\n45 31 f6\n31 ed\neb 17\n49 ff c6\n31 c0\n41 80 3c 2f 25\n0f 94 c0\n48 8d 6c 28 01\n41 0f b6 04 2f\n84 c0\n74 15\n3c 25\n75 e1\n41 80 7c 2f 01 25\n74 d9\neb 39\n31 ff\nbe cd 5c 40 00\nba 05 00 00 00\ne8 ff f2 ff ff\n48 89 c3\n4c 89 ff\ne8 74 21 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 10 f5 ff ff\neb 9e\n49 8d 7c 2f 01\n48 ff c5\nbe eb 5c 40 00\ne8 8c f3 ff ff\n48 89 c3\n48 01 eb\n49 8d 3c 1f\nbe f2 5c 40 00\ne8 78 f3 ff ff\n48 89 c5\n48 01 dd\n41 80 3c 2f 2e\n4c 89 64 24 10\n75 14\n49 8d 7c 2f 01\nbe f2 5c 40 00\ne8 57 f3 ff ff\n48 8d 6c 28 01\n31 c0\n41 80 3c 2f 4c\n0f 94 c0\n48 89 44 24 08\n4c 8d 24 28\n43 80 3c 27 00\n75 30\n31 ff\nbe fd 5c 40 00\nba 05 00 00 00\ne8 67 f2 ff ff\n48 89 c3\n4c 89 ff\ne8 dc 20 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 78 f4 ff ff\n43 0f be 34 27\nbf 12 5d 40 00\nba 09 00 00 00\ne8 14 f3 ff ff\n48 85 c0\n75 35\n31 ff\nbe 1b 5d 40 00\nba 05 00 00 00\ne8 1e f2 ff ff\n48 89 c3\n4c 89 ff\ne8 93 20 00 00\n48 89 c1\n47 0f be 04 27\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 2a f4 ff ff\n49 8d 04 2f\n48 89 04 24\n49 ff c4\n45 31 ed\neb 19\n31 c0\n43 80 3c 27 25\n0f 94 c0\n4e 8d 64 20 01\n43 0f b6 04 27\n3c 25\n75 0d\n43 80 7c 27 01 25\n75 10\n43 0f b6 04 27\n84 c0\n74 39\n49 ff c5\neb d2\n31 ff\nbe 40 5d 40 00\nba 05 00 00 00\ne8 9f f1 ff ff\n48 89 c3\n4c 89 ff\ne8 14 20 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 b0 f3 ff ff\neb 9e\n49 83 c4 02\n4c 89 e7\ne8 22 29 00 00\n48 89 c3\n48 89 df\n4c 89 fe\n48 89 ea\ne8 c1 f2 ff ff\nc6 04 2b 4c\n48 8d 7c 2b 01\n48 8b 34 24\n48 03 74 24 08\ne8 ea f0 ff ff\n48 8b 44 24 10\n4c 89 30\n4c 89 68 08\n48 89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p523
S'.text:0000000000402140\n.text:0000000000402141\n.text:0000000000402143\n.text:0000000000402145\n.text:0000000000402147\n.text:0000000000402149\n.text:000000000040214a\n.text:000000000040214e\n.text:0000000000402151\n.text:0000000000402154\n.text:0000000000402157\n.text:0000000000402159\n.text:0000000000402160\n.text:0000000000402163\n.text:0000000000402165\n.text:000000000040216a\n.text:000000000040216d\n.text:0000000000402172\n.text:0000000000402177\n.text:0000000000402179\n.text:000000000040217b\n.text:000000000040217d\n.text:000000000040217f\n.text:0000000000402185\n.text:0000000000402187\n.text:0000000000402190\n.text:0000000000402192\n.text:0000000000402197\n.text:000000000040219c\n.text:00000000004021a1\n.text:00000000004021a4\n.text:00000000004021a7\n.text:00000000004021ac\n.text:00000000004021af\n.text:00000000004021b4\n.text:00000000004021b6\n.text:00000000004021b8\n.text:00000000004021bb\n.text:00000000004021c0\n.text:00000000004021c2\n.text:00000000004021c7\n.text:00000000004021ca\n.text:00000000004021cf\n.text:00000000004021d4\n.text:00000000004021d7\n.text:00000000004021da\n.text:00000000004021de\n.text:00000000004021e3\n.text:00000000004021e8\n.text:00000000004021eb\n.text:00000000004021ee\n.text:00000000004021f3\n.text:00000000004021f8\n.text:00000000004021fa\n.text:00000000004021ff\n.text:0000000000402204\n.text:0000000000402209\n.text:000000000040220e\n.text:0000000000402210\n.text:0000000000402215\n.text:0000000000402218\n.text:000000000040221d\n.text:0000000000402221\n.text:0000000000402226\n.text:0000000000402228\n.text:000000000040222a\n.text:000000000040222f\n.text:0000000000402234\n.text:0000000000402239\n.text:000000000040223c\n.text:000000000040223f\n.text:0000000000402244\n.text:0000000000402247\n.text:000000000040224c\n.text:000000000040224e\n.text:0000000000402250\n.text:0000000000402253\n.text:0000000000402258\n.text:000000000040225d\n.text:0000000000402262\n.text:0000000000402267\n.text:000000000040226c\n.text:000000000040226f\n.text:0000000000402271\n.text:0000000000402273\n.text:0000000000402278\n.text:000000000040227d\n.text:0000000000402282\n.text:0000000000402285\n.text:0000000000402288\n.text:000000000040228d\n.text:0000000000402290\n.text:0000000000402295\n.text:000000000040229a\n.text:000000000040229c\n.text:000000000040229e\n.text:00000000004022a1\n.text:00000000004022a6\n.text:00000000004022aa\n.text:00000000004022ae\n.text:00000000004022b1\n.text:00000000004022b4\n.text:00000000004022c0\n.text:00000000004022c2\n.text:00000000004022c7\n.text:00000000004022ca\n.text:00000000004022cf\n.text:00000000004022d4\n.text:00000000004022d6\n.text:00000000004022d8\n.text:00000000004022de\n.text:00000000004022e0\n.text:00000000004022e5\n.text:00000000004022e7\n.text:00000000004022e9\n.text:00000000004022ec\n.text:00000000004022f0\n.text:00000000004022f2\n.text:00000000004022f7\n.text:00000000004022fc\n.text:0000000000402301\n.text:0000000000402304\n.text:0000000000402307\n.text:000000000040230c\n.text:000000000040230f\n.text:0000000000402314\n.text:0000000000402316\n.text:0000000000402318\n.text:000000000040231b\n.text:0000000000402320\n.text:0000000000402322\n.text:0000000000402326\n.text:0000000000402329\n.text:000000000040232e\n.text:0000000000402331\n.text:0000000000402334\n.text:0000000000402337\n.text:000000000040233a\n.text:000000000040233f\n.text:0000000000402343\n.text:0000000000402348\n.text:000000000040234c\n.text:0000000000402351\n.text:0000000000402356\n.text:000000000040235b\n.text:000000000040235e\n.text:0000000000402362\n.text:0000000000402365\n.text:0000000000402369\n.text:000000000040236a\n.text:000000000040236c\n.text:000000000040236e\n.text:0000000000402370\n.text:0000000000402372\n.text:0000000000402373\n'
p524
tp525
sS'fscanf'
p526
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p527
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006090d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x006090d0]\n'
p529
S'ff 25 8a 7b 20 00\n'
p530
S'.plt:0000000000401540\n'
p531
tp532
sS'emit_try_help'
p533
(S'\n__stdcall emit_try_help()\n'
p534
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p535
S'PUSH RBX\nMOV RBX,qword ptr [0x006092c0]\nXOR EDI,EDI\nMOV ESI,0x405af9\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x00609318]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401730\n'
p536
S'53\n48 8b 1d 08 79 20 00\n31 ff\nbe f9 5a 40 00\nba 05 00 00 00\ne8 d7 fa ff ff\n48 89 c2\n48 8b 0d 45 79 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 4d fd ff ff\n'
p537
S'.text:00000000004019b0\n.text:00000000004019b1\n.text:00000000004019b8\n.text:00000000004019ba\n.text:00000000004019bf\n.text:00000000004019c4\n.text:00000000004019c9\n.text:00000000004019cc\n.text:00000000004019d3\n.text:00000000004019d8\n.text:00000000004019da\n.text:00000000004019dd\n.text:00000000004019de\n'
p538
tp539
sS'memcpy'
p540
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00609130)();\u000a  return pvVar1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x00609130]\n'
p543
S'ff 25 2a 7b 20 00\n'
p544
S'.plt:0000000000401600\n'
p545
tp546
sS'strrchr'
p547
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p548
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006090b8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p549
S'JMP qword ptr [0x006090b8]\n'
p550
S'ff 25 a2 7b 20 00\n'
p551
S'.plt:0000000000401510\n'
p552
tp553
sS'close_stdout_set_ignore_EPIPE'
p554
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p555
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p556
S'MOV byte ptr [0x00609310],DIL\nRET\n'
p557
S'40 88 3d a9 65 20 00\nc3\n'
p558
S'.text:0000000000402d60\n.text:0000000000402d67\n'
p559
tp560
sS'quotearg_alloc_mem'
p561
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p562
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p563
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x609320\nCMOVNZ R12,RCX\nCALL 0x00401410\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403050\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00404d20\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403050\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00403d7a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p564
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 20 93 60 00\n4c 0f 45 e1\ne8 38 d7 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 f1 0f 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p565
S'.text:0000000000403ca0\n.text:0000000000403ca1\n.text:0000000000403ca3\n.text:0000000000403ca5\n.text:0000000000403ca7\n.text:0000000000403ca9\n.text:0000000000403caa\n.text:0000000000403cae\n.text:0000000000403cb1\n.text:0000000000403cb6\n.text:0000000000403cb9\n.text:0000000000403cbe\n.text:0000000000403cc1\n.text:0000000000403cc6\n.text:0000000000403cc9\n.text:0000000000403ccf\n.text:0000000000403cd3\n.text:0000000000403cd8\n.text:0000000000403cdd\n.text:0000000000403cdf\n.text:0000000000403ce3\n.text:0000000000403ce5\n.text:0000000000403ce8\n.text:0000000000403cec\n.text:0000000000403cf1\n.text:0000000000403cf5\n.text:0000000000403cfa\n.text:0000000000403cfe\n.text:0000000000403d00\n.text:0000000000403d02\n.text:0000000000403d05\n.text:0000000000403d08\n.text:0000000000403d0b\n.text:0000000000403d10\n.text:0000000000403d15\n.text:0000000000403d17\n.text:0000000000403d1c\n.text:0000000000403d20\n.text:0000000000403d23\n.text:0000000000403d27\n.text:0000000000403d2a\n.text:0000000000403d2f\n.text:0000000000403d32\n.text:0000000000403d36\n.text:0000000000403d3a\n.text:0000000000403d3d\n.text:0000000000403d40\n.text:0000000000403d45\n.text:0000000000403d4a\n.text:0000000000403d4d\n.text:0000000000403d52\n.text:0000000000403d57\n.text:0000000000403d59\n.text:0000000000403d5e\n.text:0000000000403d63\n.text:0000000000403d67\n.text:0000000000403d6a\n.text:0000000000403d6e\n.text:0000000000403d73\n.text:0000000000403d75\n.text:0000000000403d77\n.text:0000000000403d7a\n.text:0000000000403d7d\n.text:0000000000403d81\n.text:0000000000403d82\n.text:0000000000403d84\n.text:0000000000403d86\n.text:0000000000403d88\n.text:0000000000403d8a\n.text:0000000000403d8b\n'
p566
tp567
sS'iswprint'
p568
(S'\n__stdcall iswprint(wint_t __wc)\n'
p569
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_006091e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p570
S'JMP qword ptr [0x006091e0]\n'
p571
S'ff 25 7a 7a 20 00\n'
p572
S'.plt:0000000000401760\n'
p573
tp574
sS'memchr'
p575
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_006090f0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x006090f0]\n'
p578
S'ff 25 6a 7b 20 00\n'
p579
S'.plt:0000000000401580\n'
p580
tp581
sS'quotearg_style_mem'
p582
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p583
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p584
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004040c0\n'
p585
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p586
S'.text:0000000000404120\n.text:0000000000404123\n.text:0000000000404126\n.text:0000000000404128\n.text:000000000040412a\n.text:000000000040412c\n.text:000000000040412f\n.text:0000000000404132\n'
p587
tp588
sS'xalloc_die'
p589
(S'\n__stdcall xalloc_die()\n'
p590
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x405f17,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p591
S'PUSH RBX\nMOV EBX,dword ptr [0x00609210]\nXOR EDI,EDI\nMOV ESI,0x40680f\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x405f17\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004016d0\nCALL 0x00401400\n'
p592
S'53\n8b 1d 29 44 20 00\n31 ff\nbe 0f 68 40 00\nba 05 00 00 00\ne8 a8 c6 ff ff\n48 89 c1\n31 f6\nba 17 5f 40 00\n31 c0\n89 df\ne8 c5 c8 ff ff\ne8 f0 c5 ff ff\n'
p593
S'.text:0000000000404de0\n.text:0000000000404de1\n.text:0000000000404de7\n.text:0000000000404de9\n.text:0000000000404dee\n.text:0000000000404df3\n.text:0000000000404df8\n.text:0000000000404dfb\n.text:0000000000404dfd\n.text:0000000000404e02\n.text:0000000000404e04\n.text:0000000000404e06\n.text:0000000000404e0b\n'
p594
tp595
sS'__sprintf_chk'
p596
(S'\n__stdcall __sprintf_chk()\n'
p597
V\u000avoid __sprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___sprintf_chk_006091f0)();\u000a  return;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x006091f0]\n'
p599
S'ff 25 6a 7a 20 00\n'
p600
S'.plt:0000000000401780\n'
p601
tp602
sS'c_isspace'
p603
(S'\n__stdcall c_isspace()\n'
p604
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p605
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00404fe5\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p606
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p607
S'.text:0000000000404fd0\n.text:0000000000404fd3\n.text:0000000000404fd6\n.text:0000000000404fd8\n.text:0000000000404fdd\n.text:0000000000404fdf\n.text:0000000000404fe1\n.text:0000000000404fe4\n.text:0000000000404fe5\n.text:0000000000404fe7\n'
p608
tp609
sS'quotearg_n_custom'
p610
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p611
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p612
S'MOV R8,-0x1\nJMP 0x00404240\n'
p613
S'49 c7 c0 ff ff ff ff\neb 07\n'
p614
S'.text:0000000000404230\n.text:0000000000404237\n'
p615
tp616
sS'open'
p617
(S'\n__stdcall open(char * __file, int __oflag)\n'
p618
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_006091a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p619
S'JMP qword ptr [0x006091a0]\n'
p620
S'ff 25 ba 7a 20 00\n'
p621
S'.plt:00000000004016e0\n'
p622
tp623
sS'quotearg_n_custom_mem'
p624
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p625
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p626
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x00609350]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x00609340]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609330]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609320]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00402fa0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403e30\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p627
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 f7 50 20 00\n48 89 44 24 30\n0f 10 05 db 50 20 00\n0f 29 44 24 20\n0f 10 05 bf 50 20 00\n0f 29 44 24 10\n0f 10 05 a3 50 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p628
S'.text:0000000000404240\n.text:0000000000404241\n.text:0000000000404243\n.text:0000000000404245\n.text:0000000000404246\n.text:000000000040424a\n.text:000000000040424d\n.text:0000000000404250\n.text:0000000000404252\n.text:0000000000404259\n.text:000000000040425e\n.text:0000000000404265\n.text:000000000040426a\n.text:0000000000404271\n.text:0000000000404276\n.text:000000000040427d\n.text:0000000000404281\n.text:0000000000404284\n.text:0000000000404287\n.text:000000000040428c\n.text:000000000040428e\n.text:0000000000404291\n.text:0000000000404294\n.text:0000000000404297\n.text:000000000040429c\n.text:00000000004042a0\n.text:00000000004042a1\n.text:00000000004042a3\n.text:00000000004042a5\n.text:00000000004042a6\n'
p629
tp630
sS'_init'
p631
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p632
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00608ff8;\u000a  if (PTR___gmon_start___00608ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00608ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p633
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00608ff8]\nTEST RAX,RAX\nJZ 0x004013ba\nCALL RAX\nADD RSP,0x8\nRET\n'
p634
S'48 83 ec 08\n48 8b 05 45 7c 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p635
S'.init:00000000004013a8\n.init:00000000004013ac\n.init:00000000004013b3\n.init:00000000004013b6\n.init:00000000004013b8\n.init:00000000004013ba\n.init:00000000004013be\n'
p636
tp637
sS'__freading'
p638
(S'\n__stdcall __freading()\n'
p639
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00609160)();\u000a  return;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x00609160]\n'
p641
S'ff 25 fa 7a 20 00\n'
p642
S'.plt:0000000000401660\n'
p643
tp644
sS'set_quoting_flags'
p645
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p646
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p647
S'TEST RDI,RDI\nMOV ECX,0x609320\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p648
S'48 85 ff\nb9 20 93 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p649
S'.text:0000000000402f80\n.text:0000000000402f83\n.text:0000000000402f88\n.text:0000000000402f8c\n.text:0000000000402f8f\n.text:0000000000402f92\n'
p650
tp651
sS'fputs_unlocked'
p652
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p653
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_00609100)();\u000a  return iVar1;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x00609100]\n'
p655
S'ff 25 5a 7b 20 00\n'
p656
S'.plt:00000000004015a0\n'
p657
tp658
sS'main'
p659
(S'\n__stdcall main(char * * argv)\n'
p660
V\u000aint main(char **argv)\u000a\u000a{\u000a  float10 fVar1;\u000a  float10 fVar2;\u000a  _Bool _Var3;\u000a  char cVar4;\u000a  int iVar5;\u000a  int iVar6;\u000a  char *fmt;\u000a  size_t __n;\u000a  undefined8 uVar7;\u000a  size_t sVar8;\u000a  char *a;\u000a  void *__dest;\u000a  char *pcVar9;\u000a  uint uVar10;\u000a  long lVar11;\u000a  char **in_RSI;\u000a  long *plVar12;\u000a  byte bVar13;\u000a  long lVar14;\u000a  long lVar15;\u000a  undefined4 extraout_XMM0_Da;\u000a  undefined4 extraout_XMM0_Da_00;\u000a  undefined4 extraout_XMM0_Da_01;\u000a  undefined4 uVar16;\u000a  undefined4 extraout_XMM0_Da_02;\u000a  undefined4 extraout_XMM0_Da_03;\u000a  undefined4 extraout_XMM0_Da_04;\u000a  undefined4 extraout_XMM0_Db;\u000a  undefined4 extraout_XMM0_Db_00;\u000a  undefined4 extraout_XMM0_Db_01;\u000a  undefined4 uVar17;\u000a  undefined4 extraout_XMM0_Db_02;\u000a  undefined4 extraout_XMM0_Db_03;\u000a  undefined4 extraout_XMM0_Db_04;\u000a  undefined4 extraout_XMM0_Dc;\u000a  undefined4 extraout_XMM0_Dc_00;\u000a  undefined4 extraout_XMM0_Dc_01;\u000a  undefined4 uVar18;\u000a  undefined4 extraout_XMM0_Dc_02;\u000a  undefined4 extraout_XMM0_Dc_03;\u000a  undefined4 extraout_XMM0_Dc_04;\u000a  undefined4 extraout_XMM0_Dd;\u000a  undefined4 extraout_XMM0_Dd_00;\u000a  undefined4 extraout_XMM0_Dd_01;\u000a  undefined4 uVar19;\u000a  undefined4 extraout_XMM0_Dd_02;\u000a  undefined4 extraout_XMM0_Dd_03;\u000a  undefined4 extraout_XMM0_Dd_04;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM1_Db;\u000a  int in_XMM1_Dc;\u000a  undefined4 in_XMM1_Dd;\u000a  undefined last [16];\u000a  layout layout;\u000a  ulong uVar20;\u000a  char *local_c0;\u000a  undefined4 local_b8;\u000a  undefined4 uStack180;\u000a  undefined2 uStack176;\u000a  undefined2 uStack174;\u000a  undefined4 uStack172;\u000a  undefined4 local_a8;\u000a  undefined4 uStack164;\u000a  int local_a0;\u000a  undefined4 uStack156;\u000a  char *local_90;\u000a  undefined4 local_88;\u000a  undefined4 uStack132;\u000a  undefined2 uStack128;\u000a  undefined2 uStack126;\u000a  undefined4 uStack124;\u000a  undefined4 local_78;\u000a  undefined4 uStack116;\u000a  int local_70;\u000a  undefined4 uStack108;\u000a  undefined4 local_68;\u000a  undefined4 uStack100;\u000a  undefined2 uStack96;\u000a  undefined2 uStack94;\u000a  undefined4 uStack92;\u000a  undefined4 local_58;\u000a  undefined4 uStack84;\u000a  int local_50;\u000a  undefined4 uStack76;\u000a  undefined4 local_48;\u000a  undefined4 uStack68;\u000a  undefined4 local_40;\u000a  undefined4 uStack60;\u000a  \u000a  local_78 = DAT_00405dc0;\u000a  uStack116 = DAT_00405dc4;\u000a  local_70 = DAT_00405dc8;\u000a  uStack108 = DAT_00405dcc;\u000a  local_88 = DAT_00405db0;\u000a  uStack132 = DAT_00405db4;\u000a  uStack128 = (undefined2)DAT_00405db8;\u000a  uStack126 = (undefined2)((uint)DAT_00405db8 >> 0x10);\u000a  uStack124 = DAT_00405dbc;\u000a  local_58 = DAT_00405dc0;\u000a  uStack84 = DAT_00405dc4;\u000a  local_50 = DAT_00405dc8;\u000a  uStack76 = DAT_00405dcc;\u000a  local_68 = DAT_00405db0;\u000a  uStack100 = DAT_00405db4;\u000a  uStack92 = DAT_00405dbc;\u000a  local_48 = 0;\u000a  uStack68 = 0;\u000a  local_40 = 0;\u000a  uStack60 = 0;\u000a  uStack96 = uStack128;\u000a  uStack94 = uStack126;\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x405a6e,"/usr/local/share/locale");\u000a  textdomain(0x405a6e);\u000a  atexit(close_stdout);\u000a  equal_width = 0;\u000a  separator = \u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xc9;\u000a  fmt = (char *)0x0;\u000a  iVar6 = (int)((ulong)argv & 0xffffffff);\u000ajoined_r0x00401c06:\u000a  if (optind < iVar6) {\u000a    do {\u000a      if ((*in_RSI[(long)optind] == '-') &&\u000a         ((iVar5 = (int)in_RSI[(long)optind][1], iVar5 == 0x2e || (iVar5 - 0x30U < 10)))) break;\u000a      iVar5 = getopt_long((ulong)argv & 0xffffffff);\u000a      if (iVar5 < 0x66) {\u000a        if (iVar5 == -1) break;\u000a        if (iVar5 == -0x83) goto LAB_004020d2;\u000a        if (iVar5 != -0x82) {\u000aLAB_00402101:\u000a          usage(1);\u000a          goto LAB_0040210b;\u000a        }\u000a        usage(0);\u000a        goto LAB_00402086;\u000a      }\u000a      if (iVar5 == 0x77) goto LAB_00401c90;\u000a      a = optarg;\u000a      if ((iVar5 != 0x73) && (a = separator, fmt = optarg, iVar5 != 0x66)) goto LAB_00402101;\u000a      separator = a;\u000a      if (iVar6 <= optind) break;\u000a    } while( true );\u000a  }\u000a  uVar10 = iVar6 - optind;\u000a  if (uVar10 != 0) goto code_r0x00401cbc;\u000aLAB_00402086:\u000a  fmt = "missing operand";\u000aLAB_00402112:\u000a  uVar7 = dcgettext(0,fmt,5);\u000a  plVar12 = (long *)0x0;\u000a  error(0,0,uVar7,uVar7);\u000a  fmt = (char *)0x1;\u000a  usage();\u000a  lVar15 = 0;\u000a  lVar11 = 0;\u000a  do {\u000a    if (fmt[lVar11] == 0) {\u000a      uVar7 = dcgettext(0,"format %s has no %% directive",5);\u000a      a = quote(fmt);\u000a      error(1,0,uVar7,a);\u000a    }\u000a    else {\u000a      if ((fmt[lVar11] == '%') && (fmt[lVar11 + 1] != '%')) goto LAB_004021c2;\u000a    }\u000a    lVar15 = lVar15 + 1;\u000a    lVar11 = (ulong)(fmt[lVar11] == '%') + 1 + lVar11;\u000a  } while( true );\u000aLAB_00401c90:\u000a  equal_width = 1;\u000a  goto joined_r0x00401c06;\u000aLAB_004021c2:\u000a  __n = strspn(fmt + lVar11 + 1,"-+#0 \u005c'");\u000a  lVar11 = __n + lVar11 + 1;\u000a  __n = strspn(fmt + lVar11,"0123456789");\u000a  __n = __n + lVar11;\u000a  if (fmt[__n] == '.') {\u000a    sVar8 = strspn(fmt + __n + 1,"0123456789");\u000a    __n = sVar8 + 1 + __n;\u000a  }\u000a  uVar20 = (ulong)(fmt[__n] == 'L');\u000a  lVar11 = uVar20 + __n;\u000a  if (fmt[lVar11] == 0) {\u000a    uVar7 = dcgettext(0,"format %s ends in %%",5);\u000a    a = quote(fmt);\u000a    error(1,0,uVar7,a);\u000a  }\u000a  __dest = memchr("efgaEFGA",(int)fmt[lVar11],9);\u000a  if (__dest == (void *)0x0) {\u000a    uVar7 = dcgettext(0,"format %s has unknown %%%c directive",5);\u000a    a = quote(fmt);\u000a    error(1,0,uVar7,a,(ulong)(uint)(int)fmt[lVar11]);\u000a  }\u000a  a = fmt + __n;\u000a  lVar11 = lVar11 + 1;\u000a  lVar14 = 0;\u000a  do {\u000a    cVar4 = fmt[lVar11];\u000a    if (cVar4 == '%') {\u000a      if (fmt[lVar11 + 1] == '%') {\u000a        cVar4 = fmt[lVar11];\u000a        goto LAB_004022e5;\u000a      }\u000a      uVar7 = dcgettext(0,"format %s has too many %% directives",5);\u000a      pcVar9 = quote(fmt);\u000a      error(1,0,uVar7,pcVar9);\u000a    }\u000a    else {\u000aLAB_004022e5:\u000a      if (cVar4 == 0) {\u000a        __dest = xmalloc(lVar11 + 2);\u000a        memcpy(__dest,fmt,__n);\u000a        *(undefined *)((long)__dest + __n) = 0x4c;\u000a        strcpy((char *)((long)__dest + __n + 1),a + uVar20);\u000a        *plVar12 = lVar15;\u000a        plVar12[1] = lVar14;\u000a        return (int)__dest;\u000a      }\u000a      lVar14 = lVar14 + 1;\u000a    }\u000a    lVar11 = (ulong)(fmt[lVar11] == '%') + 1 + lVar11;\u000a  } while( true );\u000acode_r0x00401cbc:\u000a  if (3 < uVar10) {\u000a    uVar7 = dcgettext(0,"extra operand %s",5);\u000a    fmt = quote(in_RSI[(long)optind + 3]);\u000a    error(0,0,uVar7,fmt);\u000a    usage(1);\u000aLAB_004020d2:\u000a    version_etc(stdout,"seq","GNU coreutils",Version,"Ulrich Drepper",0);\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  if ((fmt == (char *)0x0) ||\u000a     (fmt = long_double_format(fmt,(layout *)&local_48), fmt == (char *)0x0)) {\u000a    bVar13 = 0;\u000a    fmt = (char *)0x0;\u000a  }\u000a  else {\u000a    if (equal_width == 1) {\u000aLAB_0040210b:\u000a      fmt = "format string may not be specified when printing equal width strings";\u000a      goto LAB_00402112;\u000a    }\u000a    bVar13 = 1;\u000a  }\u000a  lVar11 = (long)optind;\u000a  _Var3 = all_digits_p(in_RSI[lVar11]);\u000a  if (_Var3 != false) {\u000a    if (uVar10 == 1) {\u000aLAB_00401d17:\u000a      if ((equal_width & 1 | bVar13) == 0) {\u000aLAB_00401d28:\u000a        __n = strlen(separator);\u000a        if (__n == 1) {\u000a          if (uVar10 == 1) {\u000a            a = "1";\u000a          }\u000a          else {\u000a            a = in_RSI[(long)optind];\u000a          }\u000a          _Var3 = seq_fast(a,in_RSI[(ulong)((uVar10 - 1) + optind)]);\u000a          if (_Var3 != false) {\u000a            return 0;\u000a          }\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      _Var3 = all_digits_p(in_RSI[lVar11 + 1]);\u000a      if (_Var3 != false) {\u000a        if (uVar10 < 3) goto LAB_00401d17;\u000a        if ((((*in_RSI[(long)optind + 1] != '1') || (in_RSI[(long)optind + 1][1] != 0)) ||\u000a            (_Var3 = all_digits_p(in_RSI[(long)optind + 2]), (equal_width & 1 | bVar13) != 0)) ||\u000a           (_Var3 != true)) goto LAB_00401db5;\u000a        goto LAB_00401d28;\u000a      }\u000a    }\u000a  }\u000aLAB_00401db5:\u000a  lVar11 = (long)optind;\u000a  optind = optind + 1;\u000a  scan_arg((operand *)&local_b8,in_RSI[lVar11]);\u000a  uVar16 = extraout_XMM0_Da;\u000a  uVar17 = extraout_XMM0_Db;\u000a  uVar18 = extraout_XMM0_Dc;\u000a  uVar19 = extraout_XMM0_Dd;\u000a  if (optind < iVar6) {\u000a    local_78 = local_a8;\u000a    uStack116 = uStack164;\u000a    local_70 = local_a0;\u000a    uStack108 = uStack156;\u000a    local_88 = local_b8;\u000a    uStack132 = uStack180;\u000a    uStack128 = uStack176;\u000a    uStack126 = uStack174;\u000a    uStack124 = uStack172;\u000a    lVar11 = (long)optind;\u000a    optind = optind + 1;\u000a    in_XMM1_Da = local_a8;\u000a    in_XMM1_Db = uStack164;\u000a    in_XMM1_Dc = local_a0;\u000a    in_XMM1_Dd = uStack156;\u000a    scan_arg((operand *)&local_b8,in_RSI[lVar11]);\u000a    uVar16 = extraout_XMM0_Da_00;\u000a    uVar17 = extraout_XMM0_Db_00;\u000a    uVar18 = extraout_XMM0_Dc_00;\u000a    uVar19 = extraout_XMM0_Dd_00;\u000a    if (optind < iVar6) {\u000a      local_58 = local_a8;\u000a      uStack84 = uStack164;\u000a      local_50 = local_a0;\u000a      uStack76 = uStack156;\u000a      local_68 = local_b8;\u000a      uStack100 = uStack180;\u000a      uStack96 = uStack176;\u000a      uStack94 = uStack174;\u000a      uStack92 = uStack172;\u000a      lVar11 = (long)optind;\u000a      optind = optind + 1;\u000a      in_XMM1_Da = local_a8;\u000a      in_XMM1_Db = uStack164;\u000a      in_XMM1_Dc = local_a0;\u000a      in_XMM1_Dd = uStack156;\u000a      scan_arg((operand *)&local_b8,in_RSI[lVar11]);\u000a      uVar16 = extraout_XMM0_Da_01;\u000a      uVar17 = extraout_XMM0_Db_01;\u000a      uVar18 = extraout_XMM0_Dc_01;\u000a      uVar19 = extraout_XMM0_Dd_01;\u000a    }\u000a  }\u000a  fVar2 = (float10)CONCAT28(uStack128,CONCAT44(uStack132,local_88));\u000a  fVar1 = (float10)0;\u000a  if (((((fVar2 * fVar1 == fVar1) && (local_70 == 0)) &&\u000a       ((local_50 == 0 && ((fVar1 <= fVar2 && (local_a0 == 0)))))) &&\u000a      ((float10)CONCAT28(uStack96,CONCAT44(uStack100,local_68)) == (float10)1)) &&\u000a     (((fVar1 <= (float10)CONCAT28(uStack176,CONCAT44(uStack180,local_b8)) &&\u000a       ((bVar13 | equal_width & 1) == 0)) &&\u000a      (__n = strlen(separator), uVar16 = extraout_XMM0_Da_03, uVar17 = extraout_XMM0_Db_03,\u000a      uVar18 = extraout_XMM0_Dc_03, uVar19 = extraout_XMM0_Dd_03, __n == 1)))) {\u000a    iVar6 = __asprintf_chk(&local_90,1,"%0.Lf");\u000a    if (iVar6 < 0) {\u000aLAB_00402013:\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die();\u000a    }\u000a    if ((float10)CONCAT28(uStack176,CONCAT44(uStack180,local_b8)) * (float10)0 == (float10)0) {\u000a      iVar6 = __asprintf_chk(&local_c0,1,"%0.Lf");\u000a      if (iVar6 < 0) goto LAB_00402013;\u000a    }\u000a    else {\u000a      local_c0 = xstrdup("inf");\u000a    }\u000a    if (((*local_90 != '-') && (*local_c0 != '-')) &&\u000a       (_Var3 = seq_fast(local_90,local_c0), _Var3 != false)) {\u000a      return 0;\u000a    }\u000a    free(local_90);\u000a    free(local_c0);\u000a    uVar16 = extraout_XMM0_Da_04;\u000a    uVar17 = extraout_XMM0_Db_04;\u000a    uVar18 = extraout_XMM0_Dc_04;\u000a    uVar19 = extraout_XMM0_Dd_04;\u000a  }\u000a  if (fmt == (char *)0x0) {\u000a    in_XMM1_Da = local_78;\u000a    in_XMM1_Db = uStack116;\u000a    in_XMM1_Dc = local_70;\u000a    in_XMM1_Dd = uStack108;\u000a    fmt = get_default_format((operand)CONCAT428(uStack108,\u000a                                                CONCAT226((short)((uint)local_70 >> 0x10),\u000a                                                          CONCAT224((short)local_70,\u000a                                                                    CONCAT420(uStack116,\u000a                                                                              CONCAT416(local_78,\u000a                                                  CONCAT412(uStack124,\u000a                                                            CONCAT210(uStack126,\u000a                                                                      CONCAT28(uStack128,\u000a                                                                               CONCAT44(uStack132,\u000a                                                                                        local_88))))\u000a                                                  ))))),\u000a                             (operand)CONCAT428(uStack76,CONCAT424(local_50,CONCAT420(uStack84,\u000a                                                  CONCAT416(local_58,CONCAT412(uStack92,CONCAT210(\u000a                                                  uStack94,CONCAT28(uStack96,CONCAT44(uStack100,\u000a                                                                                      local_68))))))\u000a                                                  )),\u000a                             (operand)CONCAT428(uStack156,\u000a                                                CONCAT424(local_a0,CONCAT420(uStack164,\u000a                                                                             CONCAT416(local_a8,\u000a                                                  CONCAT412(uStack172,\u000a                                                            CONCAT48(CONCAT22(uStack174,uStack176),\u000a                                                                     CONCAT44(uStack180,local_b8))))\u000a                                                  ))));\u000a    uVar16 = extraout_XMM0_Da_02;\u000a    uVar17 = extraout_XMM0_Db_02;\u000a    uVar18 = extraout_XMM0_Dc_02;\u000a    uVar19 = extraout_XMM0_Dd_02;\u000a  }\u000a  print_numbers(fmt,(longdouble)CONCAT412(uVar19,CONCAT48(uVar18,CONCAT44(uVar17,uVar16))),\u000a                (longdouble)\u000a                CONCAT412(in_XMM1_Dd,CONCAT48(in_XMM1_Dc,CONCAT44(in_XMM1_Db,in_XMM1_Da))),\u000a                (longdouble)last);\u000a  return 0;\u000a}\u000a\u000a
p661
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xf8\nMOV R12,RSI\nMOV R15D,EDI\nMOVAPS XMM0,xmmword ptr [0x00405dc0]\nMOVAPS xmmword ptr [0xb0 + RSP],XMM0\nMOVAPS XMM0,xmmword ptr [0x00405db0]\nMOVAPS xmmword ptr [0xa0 + RSP],XMM0\nMOVAPS XMM0,xmmword ptr [0x00405dc0]\nMOVAPS xmmword ptr [0xd0 + RSP],XMM0\nMOVAPS XMM0,xmmword ptr [0x00405db0]\nMOVAPS xmmword ptr [0xc0 + RSP],XMM0\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [0xe0 + RSP],XMM0\nMOV RDI,qword ptr [R12]\nCALL 0x00402e30\nMOV EDI,0x6\nMOV ESI,0x4065d9\nCALL 0x004016a0\nMOV EDI,0x405a6e\nMOV ESI,0x405a4b\nCALL 0x00401490\nMOV EDI,0x405a6e\nCALL 0x00401470\nMOV EDI,0x402d70\nCALL 0x004055a0\nMOV byte ptr [0x006092d0],0x0\nMOV qword ptr [0x006092d8],0x4065d8\nMOV EAX,dword ptr [0x00609290]\nXOR EBP,EBP\nCMP EAX,R15D\nJL 0x00401c30\nJMP 0x00401cad\nMOV RAX,qword ptr [0x00609298]\nMOV qword ptr [0x006092d8],RAX\nMOV EAX,dword ptr [0x00609290]\nCMP EAX,R15D\nJGE 0x00401cad\nNOP word ptr [RAX + RAX*0x1]\nCDQE\nMOV RAX,qword ptr [R12 + RAX*0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00401c4c\nMOVSX EAX,byte ptr [RAX + 0x1]\nCMP EAX,0x2e\nJZ 0x00401cad\nADD EAX,-0x30\nCMP EAX,0xa\nJC 0x00401cad\nMOV EDX,0x405a63\nMOV ECX,0x405dd0\nXOR R8D,R8D\nMOV EDI,R15D\nMOV RSI,R12\nCALL 0x004014d0\nCMP EAX,0x65\nJLE 0x00401ca4\nCMP EAX,0x77\nJZ 0x00401c90\nCMP EAX,0x73\nJZ 0x00401c0d\nCMP EAX,0x66\nJNZ 0x00402101\nMOV RBP,qword ptr [0x00609298]\nMOV EAX,dword ptr [0x00609290]\nCMP EAX,R15D\nJL 0x00401c30\nJMP 0x00401cad\nMOV byte ptr [0x006092d0],0x1\nMOV EAX,dword ptr [0x00609290]\nCMP EAX,R15D\nJL 0x00401c30\nJMP 0x00401cad\nCMP EAX,-0x1\nJNZ 0x0040206d\nMOV EBX,R15D\nSUB EBX,dword ptr [0x00609290]\nJZ 0x00402086\nCMP EBX,0x4\nJNC 0x00402092\nTEST RBP,RBP\nJZ 0x00401cf4\nLEA RSI,[0xe0 + RSP]\nMOV RDI,RBP\nCALL 0x00402140\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00401cf4\nCMP byte ptr [0x006092d0],0x1\nJZ 0x0040210b\nMOV R13B,0x1\nJMP 0x00401cfa\nXOR R13D,R13D\nXOR R14D,R14D\nMOVSXD RBP,dword ptr [0x00609290]\nMOV RDI,qword ptr [R12 + RBP*0x8]\nCALL 0x00402380\nTEST AL,AL\nJZ 0x00401db5\nCMP EBX,0x1\nJNZ 0x00401d4d\nMOV AL,byte ptr [0x006092d0]\nOR AL,R13B\nTEST AL,0x1\nJNZ 0x00401db5\nMOV RDI,qword ptr [0x006092d8]\nCALL 0x004014c0\nCMP RAX,0x1\nJNZ 0x00401db5\nCMP EBX,0x1\nMOVSXD RAX,dword ptr [0x00609290]\nJNZ 0x00401d9c\nMOV EDI,0x405aed\nJMP 0x00401da0\nMOV RDI,qword ptr [R12 + RBP*0x8 + 0x8]\nCALL 0x00402380\nTEST AL,AL\nJZ 0x00401db5\nCMP EBX,0x3\nJC 0x00401d17\nMOVSXD RAX,dword ptr [0x00609290]\nMOV RAX,qword ptr [R12 + RAX*0x8 + 0x8]\nCMP byte ptr [RAX],0x31\nJNZ 0x00401db5\nCMP byte ptr [RAX + 0x1],0x0\nJNZ 0x00401db5\nMOVSXD RAX,dword ptr [0x00609290]\nMOV RDI,qword ptr [R12 + RAX*0x8 + 0x10]\nCALL 0x00402380\nMOV CL,byte ptr [0x006092d0]\nOR CL,R13B\nTEST CL,0x1\nJNZ 0x00401db5\nXOR AL,0x1\nJZ 0x00401d28\nJMP 0x00401db5\nMOV RDI,qword ptr [R12 + RAX*0x8]\nLEA EAX,[RBX + RAX*0x1 + -0x1]\nMOV RSI,qword ptr [R12 + RAX*0x8]\nCALL 0x004023c0\nTEST AL,AL\nJNZ 0x00401f16\nMOVSXD RAX,dword ptr [0x00609290]\nLEA ECX,[RAX + 0x1]\nMOV dword ptr [0x00609290],ECX\nMOV RSI,qword ptr [R12 + RAX*0x8]\nLEA RDI,[RSP + 0x70]\nCALL 0x004026a0\nCMP dword ptr [0x00609290],R15D\nJGE 0x00401e5b\nMOVAPS XMM0,xmmword ptr [RSP + 0x70]\nMOVAPS XMM1,xmmword ptr [0x80 + RSP]\nMOVAPS xmmword ptr [0xb0 + RSP],XMM1\nMOVAPS xmmword ptr [0xa0 + RSP],XMM0\nMOVSXD RAX,dword ptr [0x00609290]\nLEA ECX,[RAX + 0x1]\nMOV dword ptr [0x00609290],ECX\nMOV RSI,qword ptr [R12 + RAX*0x8]\nLEA RDI,[RSP + 0x70]\nCALL 0x004026a0\nCMP dword ptr [0x00609290],R15D\nJGE 0x00401e5b\nMOVAPS XMM0,xmmword ptr [RSP + 0x70]\nMOVAPS XMM1,xmmword ptr [0x80 + RSP]\nMOVAPS xmmword ptr [0xd0 + RSP],XMM1\nMOVAPS xmmword ptr [0xc0 + RSP],XMM0\nMOVSXD RAX,dword ptr [0x00609290]\nLEA ECX,[RAX + 0x1]\nMOV dword ptr [0x00609290],ECX\nMOV RSI,qword ptr [R12 + RAX*0x8]\nLEA RDI,[RSP + 0x70]\nCALL 0x004026a0\nFLD tword ptr [0xa0 + RSP]\nFLDZ\nFLD ST1\nFMUL ST1\nFUCOMIP ST0,ST1\nJNZ 0x00401e86\nJP 0x00401e86\nCMP dword ptr [0xb8 + RSP],0x0\nJNZ 0x00401e86\nCMP dword ptr [0xd8 + RSP],0x0\nJZ 0x00401f2a\nFSTP ST1\nFSTP ST0\nTEST R14,R14\nJNZ 0x00401ee1\nMOVAPS XMM0,xmmword ptr [RSP + 0x70]\nMOVAPS XMM1,xmmword ptr [0x80 + RSP]\nMOVAPS xmmword ptr [RSP + 0x50],XMM1\nMOVAPS xmmword ptr [RSP + 0x40],XMM0\nMOVAPS XMM0,xmmword ptr [0xc0 + RSP]\nMOVAPS XMM1,xmmword ptr [0xd0 + RSP]\nMOVAPS xmmword ptr [RSP + 0x30],XMM1\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS XMM0,xmmword ptr [0xa0 + RSP]\nMOVAPS XMM1,xmmword ptr [0xb0 + RSP]\nMOVAPS xmmword ptr [RSP + 0x10],XMM1\nMOVAPS xmmword ptr [RSP],XMM0\nCALL 0x00402900\nMOV R14,RAX\nFLD tword ptr [0xa0 + RSP]\nFLD tword ptr [0xc0 + RSP]\nFLD tword ptr [RSP + 0x70]\nMOV RSI,qword ptr [0xe0 + RSP]\nMOV RDX,qword ptr [0xe8 + RSP]\nFSTP tword ptr [RSP + 0x20]\nFSTP tword ptr [RSP + 0x10]\nFSTP tword ptr [RSP]\nMOV RDI,R14\nCALL 0x00402a00\nXOR EAX,EAX\nADD RSP,0xf8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nFXCH\nFUCOMIP ST0,ST1\nFLDZ\nFXCH\nJC 0x00401e86\nFSTP ST1\nMOV EAX,dword ptr [0x88 + RSP]\nTEST EAX,EAX\nFLDZ\nFXCH\nJNZ 0x00401e86\nFSTP ST1\nFLD tword ptr [0xc0 + RSP]\nFLD1\nFXCH\nFUCOMIP ST0,ST1\nFSTP ST0\nFLDZ\nFXCH\nJNZ 0x00401e86\nJP 0x00401e86\nFSTP ST1\nFLD tword ptr [RSP + 0x70]\nFUCOMIP ST0,ST1\nFSTP ST0\nFLDZ\nFLDZ\nJC 0x00401e86\nFSTP ST1\nFSTP ST0\nOR R13B,byte ptr [0x006092d0]\nTEST R13B,0x1\nFLDZ\nFLDZ\nJNZ 0x00401e86\nFSTP ST1\nFSTP ST0\nMOV RDI,qword ptr [0x006092d8]\nCALL 0x004014c0\nCMP RAX,0x1\nFLDZ\nFLDZ\nJNZ 0x00401e86\nFSTP ST1\nFSTP ST0\nFLD tword ptr [0xa0 + RSP]\nFSTP tword ptr [RSP]\nLEA RDI,[0x98 + RSP]\nMOV ESI,0x1\nMOV EDX,0x405aef\nXOR EAX,EAX\nCALL 0x004015b0\nTEST EAX,EAX\nJS 0x00402013\nFLD tword ptr [RSP + 0x70]\nFLDZ\nFLD ST1\nFMUL ST1\nFUCOMIP ST0,ST1\nFSTP ST0\nJNZ 0x00402018\nJP 0x00402018\nFSTP tword ptr [RSP]\nLEA RDI,[RSP + 0x68]\nMOV ESI,0x1\nMOV EDX,0x405aef\nXOR EAX,EAX\nCALL 0x004015b0\nTEST EAX,EAX\nJNS 0x00402029\nCALL 0x00404de0\nFSTP ST0\nMOV EDI,0x405af5\nCALL 0x00404dc0\nMOV qword ptr [RSP + 0x68],RAX\nMOV RDI,qword ptr [0x98 + RSP]\nCMP byte ptr [RDI],0x2d\nJZ 0x0040204d\nMOV RSI,qword ptr [RSP + 0x68]\nCMP byte ptr [RSI],0x2d\nJZ 0x0040204d\nCALL 0x004023c0\nTEST AL,AL\nJNZ 0x00401f16\nMOV RDI,qword ptr [0x98 + RSP]\nCALL 0x004013e0\nMOV RDI,qword ptr [RSP + 0x68]\nCALL 0x004013e0\nFLDZ\nFLDZ\nJMP 0x00401e86\nCMP EAX,0xffffff7d\nJZ 0x004020d2\nCMP EAX,0xffffff7e\nJNZ 0x00402101\nXOR EDI,EDI\nCALL 0x00401890\nXOR EDI,EDI\nMOV ESI,0x405a87\nJMP 0x00402112\nXOR EDI,EDI\nMOV ESI,0x405a97\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RBP,RAX\nMOVSXD RAX,dword ptr [0x00609290]\nMOV RDI,qword ptr [R12 + RAX*0x8 + 0x18]\nCALL 0x00404320\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x004016d0\nMOV EDI,0x1\nCALL 0x00401890\nMOV RDI,qword ptr [0x00609288]\nMOV RCX,qword ptr [0x00609208]\nMOV ESI,0x405a47\nMOV EDX,0x405a6a\nMOV R8D,0x405a78\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x00404b20\nXOR EDI,EDI\nCALL 0x00401710\nMOV EDI,0x1\nCALL 0x00401890\nXOR EDI,EDI\nMOV ESI,0x405aa8\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004016d0\nMOV EDI,0x1\nCALL 0x00401890\nNOP word ptr [RAX + RAX*0x1]\n'
p662
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec f8 00 00 00\n49 89 f4\n41 89 ff\n0f 28 05 52 42 00 00\n0f 29 84 24 b0 00 00 00\n0f 28 05 33 42 00 00\n0f 29 84 24 a0 00 00 00\n0f 28 05 34 42 00 00\n0f 29 84 24 d0 00 00 00\n0f 28 05 15 42 00 00\n0f 29 84 24 c0 00 00 00\n0f 57 c0\n0f 29 84 24 e0 00 00 00\n49 8b 3c 24\ne8 79 12 00 00\nbf 06 00 00 00\nbe d9 65 40 00\ne8 da fa ff ff\nbf 6e 5a 40 00\nbe 4b 5a 40 00\ne8 bb f8 ff ff\nbf 6e 5a 40 00\ne8 91 f8 ff ff\nbf 70 2d 40 00\ne8 b7 39 00 00\nc6 05 e0 76 20 00 00\n48 c7 05 dd 76 20 00 d8 65 40 00\n8b 05 8f 76 20 00\n31 ed\n44 39 f8\n7c 28\ne9 a0 00 00 00\n48 8b 05 84 76 20 00\n48 89 05 bd 76 20 00\n8b 05 6f 76 20 00\n44 39 f8\n0f 8d 83 00 00 00\n66 0f 1f 44 00 00\n48 98\n49 8b 04 c4\n80 38 2d\n75 11\n0f be 40 01\n83 f8 2e\n74 69\n83 c0 d0\n83 f8 0a\n72 61\nba 63 5a 40 00\nb9 d0 5d 40 00\n45 31 c0\n44 89 ff\n4c 89 e6\ne8 6c f8 ff ff\n83 f8 65\n7e 3b\n83 f8 77\n74 22\n83 f8 73\n74 9a\n83 f8 66\n0f 85 85 04 00 00\n48 8b 2d 15 76 20 00\n8b 05 07 76 20 00\n44 39 f8\n7c a2\neb 1d\nc6 05 39 76 20 00 01\n8b 05 f3 75 20 00\n44 39 f8\n7c 8e\neb 09\n83 f8 ff\n0f 85 c0 03 00 00\n44 89 fb\n2b 1d da 75 20 00\n0f 84 ca 03 00 00\n83 fb 04\n0f 83 cd 03 00 00\n48 85 ed\n74 2a\n48 8d b4 24 e0 00 00 00\n48 89 ef\ne8 66 04 00 00\n49 89 c6\n4d 85 f6\n74 12\n80 3d e7 75 20 00 01\n0f 84 1c 04 00 00\n41 b5 01\neb 06\n45 31 ed\n45 31 f6\n48 63 2d 8f 75 20 00\n49 8b 3c ec\ne8 76 06 00 00\n84 c0\n0f 84 a3 00 00 00\n83 fb 01\n75 36\n8a 05 b3 75 20 00\n44 08 e8\na8 01\n0f 85 8d 00 00 00\n48 8b 3d a9 75 20 00\ne8 8c f7 ff ff\n48 83 f8 01\n75 7b\n83 fb 01\n48 63 05 4c 75 20 00\n75 56\nbf ed 5a 40 00\neb 53\n49 8b 7c ec 08\ne8 29 06 00 00\n84 c0\n74 5a\n83 fb 03\n72 b7\n48 63 05 29 75 20 00\n49 8b 44 c4 08\n80 38 31\n75 44\n80 78 01 00\n75 3e\n48 63 05 12 75 20 00\n49 8b 7c c4 10\ne8 f8 05 00 00\n8a 0d 42 75 20 00\n44 08 e9\nf6 c1 01\n75 1f\n34 01\n74 8e\neb 19\n49 8b 3c c4\n8d 44 03 ff\n49 8b 34 c4\ne8 13 06 00 00\n84 c0\n0f 85 61 01 00 00\n48 63 05 d4 74 20 00\n8d 48 01\n89 0d cb 74 20 00\n49 8b 34 c4\n48 8d 7c 24 70\ne8 cd 08 00 00\n44 39 3d b6 74 20 00\n7d 7f\n0f 28 44 24 70\n0f 28 8c 24 80 00 00 00\n0f 29 8c 24 b0 00 00 00\n0f 29 84 24 a0 00 00 00\n48 63 05 90 74 20 00\n8d 48 01\n89 0d 87 74 20 00\n49 8b 34 c4\n48 8d 7c 24 70\ne8 89 08 00 00\n44 39 3d 72 74 20 00\n7d 3b\n0f 28 44 24 70\n0f 28 8c 24 80 00 00 00\n0f 29 8c 24 d0 00 00 00\n0f 29 84 24 c0 00 00 00\n48 63 05 4c 74 20 00\n8d 48 01\n89 0d 43 74 20 00\n49 8b 34 c4\n48 8d 7c 24 70\ne8 45 08 00 00\ndb ac 24 a0 00 00 00\nd9 ee\nd9 c1\nd8 c9\ndf e9\n75 1a\n7a 18\n83 bc 24 b8 00 00 00 00\n75 0e\n83 bc 24 d8 00 00 00 00\n0f 84 a4 00 00 00\ndd d9\ndd d8\n4d 85 f6\n75 52\n0f 28 44 24 70\n0f 28 8c 24 80 00 00 00\n0f 29 4c 24 50\n0f 29 44 24 40\n0f 28 84 24 c0 00 00 00\n0f 28 8c 24 d0 00 00 00\n0f 29 4c 24 30\n0f 29 44 24 20\n0f 28 84 24 a0 00 00 00\n0f 28 8c 24 b0 00 00 00\n0f 29 4c 24 10\n0f 29 04 24\ne8 22 0a 00 00\n49 89 c6\ndb ac 24 a0 00 00 00\ndb ac 24 c0 00 00 00\ndb 6c 24 70\n48 8b b4 24 e0 00 00 00\n48 8b 94 24 e8 00 00 00\ndb 7c 24 20\ndb 7c 24 10\ndb 3c 24\n4c 89 f7\ne8 ea 0a 00 00\n31 c0\n48 81 c4 f8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nd9 c9\ndf e9\nd9 ee\nd9 c9\n0f 82 4e ff ff ff\ndd d9\n8b 84 24 88 00 00 00\n85 c0\nd9 ee\nd9 c9\n0f 85 39 ff ff ff\ndd d9\ndb ac 24 c0 00 00 00\nd9 e8\nd9 c9\ndf e9\ndd d8\nd9 ee\nd9 c9\n0f 85 1e ff ff ff\n0f 8a 18 ff ff ff\ndd d9\ndb 6c 24 70\ndf e9\ndd d8\nd9 ee\nd9 ee\n0f 82 04 ff ff ff\ndd d9\ndd d8\n44 0a 2d 43 73 20 00\n41 f6 c5 01\nd9 ee\nd9 ee\n0f 85 eb fe ff ff\ndd d9\ndd d8\n48 8b 3d 32 73 20 00\ne8 15 f5 ff ff\n48 83 f8 01\nd9 ee\nd9 ee\n0f 85 cd fe ff ff\ndd d9\ndd d8\ndb ac 24 a0 00 00 00\ndb 3c 24\n48 8d bc 24 98 00 00 00\nbe 01 00 00 00\nba ef 5a 40 00\n31 c0\ne8 d0 f5 ff ff\n85 c0\n78 2f\ndb 6c 24 70\nd9 ee\nd9 c1\nd8 c9\ndf e9\ndd d8\n75 24\n7a 22\ndb 3c 24\n48 8d 7c 24 68\nbe 01 00 00 00\nba ef 5a 40 00\n31 c0\ne8 a1 f5 ff ff\n85 c0\n79 16\ne8 c8 2d 00 00\ndd d8\nbf f5 5a 40 00\ne8 9c 2d 00 00\n48 89 44 24 68\n48 8b bc 24 98 00 00 00\n80 3f 2d\n74 17\n48 8b 74 24 68\n80 3e 2d\n74 0d\ne8 7b 03 00 00\n84 c0\n0f 85 c9 fe ff ff\n48 8b bc 24 98 00 00 00\ne8 86 f3 ff ff\n48 8b 7c 24 68\ne8 7c f3 ff ff\nd9 ee\nd9 ee\ne9 19 fe ff ff\n3d 7d ff ff ff\n74 5e\n3d 7e ff ff ff\n0f 85 82 00 00 00\n31 ff\ne8 0a f8 ff ff\n31 ff\nbe 87 5a 40 00\ne9 80 00 00 00\n31 ff\nbe 97 5a 40 00\nba 05 00 00 00\ne8 fd f3 ff ff\n48 89 c5\n48 63 05 e3 71 20 00\n49 8b 7c c4 18\ne8 69 22 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 08 f6 ff ff\nbf 01 00 00 00\ne8 be f7 ff ff\n48 8b 3d af 71 20 00\n48 8b 0d 28 71 20 00\nbe 47 5a 40 00\nba 6a 5a 40 00\n41 b8 78 5a 40 00\n45 31 c9\n31 c0\ne8 26 2a 00 00\n31 ff\ne8 0f f6 ff ff\nbf 01 00 00 00\ne8 85 f7 ff ff\n31 ff\nbe a8 5a 40 00\nba 05 00 00 00\ne8 84 f3 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 a3 f5 ff ff\nbf 01 00 00 00\ne8 59 f7 ff ff\n66 0f 1f 84 00 00 00 00 00\n'
p663
S'.text:0000000000401b50\n.text:0000000000401b51\n.text:0000000000401b53\n.text:0000000000401b55\n.text:0000000000401b57\n.text:0000000000401b59\n.text:0000000000401b5a\n.text:0000000000401b61\n.text:0000000000401b64\n.text:0000000000401b67\n.text:0000000000401b6e\n.text:0000000000401b76\n.text:0000000000401b7d\n.text:0000000000401b85\n.text:0000000000401b8c\n.text:0000000000401b94\n.text:0000000000401b9b\n.text:0000000000401ba3\n.text:0000000000401ba6\n.text:0000000000401bae\n.text:0000000000401bb2\n.text:0000000000401bb7\n.text:0000000000401bbc\n.text:0000000000401bc1\n.text:0000000000401bc6\n.text:0000000000401bcb\n.text:0000000000401bd0\n.text:0000000000401bd5\n.text:0000000000401bda\n.text:0000000000401bdf\n.text:0000000000401be4\n.text:0000000000401be9\n.text:0000000000401bf0\n.text:0000000000401bfb\n.text:0000000000401c01\n.text:0000000000401c03\n.text:0000000000401c06\n.text:0000000000401c08\n.text:0000000000401c0d\n.text:0000000000401c14\n.text:0000000000401c1b\n.text:0000000000401c21\n.text:0000000000401c24\n.text:0000000000401c2a\n.text:0000000000401c30\n.text:0000000000401c32\n.text:0000000000401c36\n.text:0000000000401c39\n.text:0000000000401c3b\n.text:0000000000401c3f\n.text:0000000000401c42\n.text:0000000000401c44\n.text:0000000000401c47\n.text:0000000000401c4a\n.text:0000000000401c4c\n.text:0000000000401c51\n.text:0000000000401c56\n.text:0000000000401c59\n.text:0000000000401c5c\n.text:0000000000401c5f\n.text:0000000000401c64\n.text:0000000000401c67\n.text:0000000000401c69\n.text:0000000000401c6c\n.text:0000000000401c6e\n.text:0000000000401c71\n.text:0000000000401c73\n.text:0000000000401c76\n.text:0000000000401c7c\n.text:0000000000401c83\n.text:0000000000401c89\n.text:0000000000401c8c\n.text:0000000000401c8e\n.text:0000000000401c90\n.text:0000000000401c97\n.text:0000000000401c9d\n.text:0000000000401ca0\n.text:0000000000401ca2\n.text:0000000000401ca4\n.text:0000000000401ca7\n.text:0000000000401cad\n.text:0000000000401cb0\n.text:0000000000401cb6\n.text:0000000000401cbc\n.text:0000000000401cbf\n.text:0000000000401cc5\n.text:0000000000401cc8\n.text:0000000000401cca\n.text:0000000000401cd2\n.text:0000000000401cd5\n.text:0000000000401cda\n.text:0000000000401cdd\n.text:0000000000401ce0\n.text:0000000000401ce2\n.text:0000000000401ce9\n.text:0000000000401cef\n.text:0000000000401cf2\n.text:0000000000401cf4\n.text:0000000000401cf7\n.text:0000000000401cfa\n.text:0000000000401d01\n.text:0000000000401d05\n.text:0000000000401d0a\n.text:0000000000401d0c\n.text:0000000000401d12\n.text:0000000000401d15\n.text:0000000000401d17\n.text:0000000000401d1d\n.text:0000000000401d20\n.text:0000000000401d22\n.text:0000000000401d28\n.text:0000000000401d2f\n.text:0000000000401d34\n.text:0000000000401d38\n.text:0000000000401d3a\n.text:0000000000401d3d\n.text:0000000000401d44\n.text:0000000000401d46\n.text:0000000000401d4b\n.text:0000000000401d4d\n.text:0000000000401d52\n.text:0000000000401d57\n.text:0000000000401d59\n.text:0000000000401d5b\n.text:0000000000401d5e\n.text:0000000000401d60\n.text:0000000000401d67\n.text:0000000000401d6c\n.text:0000000000401d6f\n.text:0000000000401d71\n.text:0000000000401d75\n.text:0000000000401d77\n.text:0000000000401d7e\n.text:0000000000401d83\n.text:0000000000401d88\n.text:0000000000401d8e\n.text:0000000000401d91\n.text:0000000000401d94\n.text:0000000000401d96\n.text:0000000000401d98\n.text:0000000000401d9a\n.text:0000000000401d9c\n.text:0000000000401da0\n.text:0000000000401da4\n.text:0000000000401da8\n.text:0000000000401dad\n.text:0000000000401daf\n.text:0000000000401db5\n.text:0000000000401dbc\n.text:0000000000401dbf\n.text:0000000000401dc5\n.text:0000000000401dc9\n.text:0000000000401dce\n.text:0000000000401dd3\n.text:0000000000401dda\n.text:0000000000401ddc\n.text:0000000000401de1\n.text:0000000000401de9\n.text:0000000000401df1\n.text:0000000000401df9\n.text:0000000000401e00\n.text:0000000000401e03\n.text:0000000000401e09\n.text:0000000000401e0d\n.text:0000000000401e12\n.text:0000000000401e17\n.text:0000000000401e1e\n.text:0000000000401e20\n.text:0000000000401e25\n.text:0000000000401e2d\n.text:0000000000401e35\n.text:0000000000401e3d\n.text:0000000000401e44\n.text:0000000000401e47\n.text:0000000000401e4d\n.text:0000000000401e51\n.text:0000000000401e56\n.text:0000000000401e5b\n.text:0000000000401e62\n.text:0000000000401e64\n.text:0000000000401e66\n.text:0000000000401e68\n.text:0000000000401e6a\n.text:0000000000401e6c\n.text:0000000000401e6e\n.text:0000000000401e76\n.text:0000000000401e78\n.text:0000000000401e80\n.text:0000000000401e86\n.text:0000000000401e88\n.text:0000000000401e8a\n.text:0000000000401e8d\n.text:0000000000401e8f\n.text:0000000000401e94\n.text:0000000000401e9c\n.text:0000000000401ea1\n.text:0000000000401ea6\n.text:0000000000401eae\n.text:0000000000401eb6\n.text:0000000000401ebb\n.text:0000000000401ec0\n.text:0000000000401ec8\n.text:0000000000401ed0\n.text:0000000000401ed5\n.text:0000000000401ed9\n.text:0000000000401ede\n.text:0000000000401ee1\n.text:0000000000401ee8\n.text:0000000000401eef\n.text:0000000000401ef3\n.text:0000000000401efb\n.text:0000000000401f03\n.text:0000000000401f07\n.text:0000000000401f0b\n.text:0000000000401f0e\n.text:0000000000401f11\n.text:0000000000401f16\n.text:0000000000401f18\n.text:0000000000401f1f\n.text:0000000000401f20\n.text:0000000000401f22\n.text:0000000000401f24\n.text:0000000000401f26\n.text:0000000000401f28\n.text:0000000000401f29\n.text:0000000000401f2a\n.text:0000000000401f2c\n.text:0000000000401f2e\n.text:0000000000401f30\n.text:0000000000401f32\n.text:0000000000401f38\n.text:0000000000401f3a\n.text:0000000000401f41\n.text:0000000000401f43\n.text:0000000000401f45\n.text:0000000000401f47\n.text:0000000000401f4d\n.text:0000000000401f4f\n.text:0000000000401f56\n.text:0000000000401f58\n.text:0000000000401f5a\n.text:0000000000401f5c\n.text:0000000000401f5e\n.text:0000000000401f60\n.text:0000000000401f62\n.text:0000000000401f68\n.text:0000000000401f6e\n.text:0000000000401f70\n.text:0000000000401f74\n.text:0000000000401f76\n.text:0000000000401f78\n.text:0000000000401f7a\n.text:0000000000401f7c\n.text:0000000000401f82\n.text:0000000000401f84\n.text:0000000000401f86\n.text:0000000000401f8d\n.text:0000000000401f91\n.text:0000000000401f93\n.text:0000000000401f95\n.text:0000000000401f9b\n.text:0000000000401f9d\n.text:0000000000401f9f\n.text:0000000000401fa6\n.text:0000000000401fab\n.text:0000000000401faf\n.text:0000000000401fb1\n.text:0000000000401fb3\n.text:0000000000401fb9\n.text:0000000000401fbb\n.text:0000000000401fbd\n.text:0000000000401fc4\n.text:0000000000401fc7\n.text:0000000000401fcf\n.text:0000000000401fd4\n.text:0000000000401fd9\n.text:0000000000401fdb\n.text:0000000000401fe0\n.text:0000000000401fe2\n.text:0000000000401fe4\n.text:0000000000401fe8\n.text:0000000000401fea\n.text:0000000000401fec\n.text:0000000000401fee\n.text:0000000000401ff0\n.text:0000000000401ff2\n.text:0000000000401ff4\n.text:0000000000401ff6\n.text:0000000000401ff9\n.text:0000000000401ffe\n.text:0000000000402003\n.text:0000000000402008\n.text:000000000040200a\n.text:000000000040200f\n.text:0000000000402011\n.text:0000000000402013\n.text:0000000000402018\n.text:000000000040201a\n.text:000000000040201f\n.text:0000000000402024\n.text:0000000000402029\n.text:0000000000402031\n.text:0000000000402034\n.text:0000000000402036\n.text:000000000040203b\n.text:000000000040203e\n.text:0000000000402040\n.text:0000000000402045\n.text:0000000000402047\n.text:000000000040204d\n.text:0000000000402055\n.text:000000000040205a\n.text:000000000040205f\n.text:0000000000402064\n.text:0000000000402066\n.text:0000000000402068\n.text:000000000040206d\n.text:0000000000402072\n.text:0000000000402074\n.text:0000000000402079\n.text:000000000040207f\n.text:0000000000402081\n.text:0000000000402086\n.text:0000000000402088\n.text:000000000040208d\n.text:0000000000402092\n.text:0000000000402094\n.text:0000000000402099\n.text:000000000040209e\n.text:00000000004020a3\n.text:00000000004020a6\n.text:00000000004020ad\n.text:00000000004020b2\n.text:00000000004020b7\n.text:00000000004020ba\n.text:00000000004020bc\n.text:00000000004020be\n.text:00000000004020c0\n.text:00000000004020c3\n.text:00000000004020c8\n.text:00000000004020cd\n.text:00000000004020d2\n.text:00000000004020d9\n.text:00000000004020e0\n.text:00000000004020e5\n.text:00000000004020ea\n.text:00000000004020f0\n.text:00000000004020f3\n.text:00000000004020f5\n.text:00000000004020fa\n.text:00000000004020fc\n.text:0000000000402101\n.text:0000000000402106\n.text:000000000040210b\n.text:000000000040210d\n.text:0000000000402112\n.text:0000000000402117\n.text:000000000040211c\n.text:000000000040211f\n.text:0000000000402121\n.text:0000000000402123\n.text:0000000000402125\n.text:0000000000402128\n.text:000000000040212d\n.text:0000000000402132\n.text:0000000000402137\n'
p664
tp665
sS'realloc'
p666
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p667
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00609170)();\u000a  return pvVar1;\u000a}\u000a\u000a
p668
S'JMP qword ptr [0x00609170]\n'
p669
S'ff 25 ea 7a 20 00\n'
p670
S'.plt:0000000000401680\n'
p671
tp672
sS'xcharalloc'
p673
(S'\n__stdcall xcharalloc(size_t n)\n'
p674
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p675
S'JMP 0x00404c50\n'
p676
S'e9 2b ff ff ff\n'
p677
S'.text:0000000000404d20\n'
p678
tp679
sS'c_isupper'
p680
(S'\n__stdcall c_isupper()\n'
p681
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p682
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p683
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p684
S'.text:0000000000404ff0\n.text:0000000000404ff3\n.text:0000000000404ff6\n.text:0000000000404ff9\n'
p685
tp686
sS'__fprintf_chk'
p687
(S'\n__stdcall __fprintf_chk()\n'
p688
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_006091c8)();\u000a  return;\u000a}\u000a\u000a
p689
S'JMP qword ptr [0x006091c8]\n'
p690
S'ff 25 92 7a 20 00\n'
p691
S'.plt:0000000000401730\n'
p692
tp693
sS'get_charset_aliases'
p694
(S'\n__stdcall get_charset_aliases()\n'
p695
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00405354_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00405354_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00405354_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00405354_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00405354_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00405354_caseD_9;\u000a      case -1:\u000a        goto switchD_00405354_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_004053ad:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_004053b3:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00405354_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_004053b3;\u000a  }\u000a  goto LAB_004053ad;\u000a}\u000a\u000a
p696
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x00609460]\nTEST R15,R15\nJNZ 0x004053c2\nMOV EDI,0x406c4c\nCALL 0x004013d0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405178\nCMP byte ptr [RBX],0x0\nJNZ 0x0040517d\nMOV EBX,0x406c5c\nMOV RDI,RBX\nCALL 0x004014c0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00405197\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00405199\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401620\nMOV R13,RAX\nTEST R13,R13\nJZ 0x004051ed\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401600\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x004051f8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00405215\nMOV R15D,0x4065d9\nJMP 0x004053bb\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004016e0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004053ad\nMOV ESI,0x405a85\nMOV EDI,EBP\nCALL 0x00401690\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405374\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00405340\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401440\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401440\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00405340\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401650\nMOV ESI,0x406c6b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401540\nCMP EAX,0x2\nJL 0x00405394\nMOV RDI,R12\nCALL 0x004014c0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004014c0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040531d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401680\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00405264\nJMP 0x0040537d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401620\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00405264\nJMP 0x0040537d\nMOV RDI,RBX\nCALL 0x00401460\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x004052a7\nJMP qword ptr [0x406b10 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401460\nCMP EAX,-0x1\nJZ 0x00405394\nCMP EAX,0xa\nJNZ 0x00405360\nJMP 0x00405340\nMOV EDI,EBP\nCALL 0x00401550\nJMP 0x004053ad\nMOV RDI,R15\nCALL 0x004013e0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x004053e0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004053ad\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x004053b3\nMOV R15D,0x4065d9\nMOV RDI,R13\nCALL 0x004013e0\nMOV qword ptr [0x00609460],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p697
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 08 43 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 4c 6c 40 00\ne8 65 c2 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 5c 6c 40 00\n48 89 df\ne8 3b c3 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 79 c4 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 43 c4 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf d9 65 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 bc c4 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 85 5a 40 00\n89 ef\ne8 56 c4 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 bb c1 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 ab c1 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 9f c3 ff ff\nbe 6b 6c 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 7a c2 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 e9 c1 ff ff\n49 89 c4\n48 89 ef\ne8 de c1 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 76 c3 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 f5 c2 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 18 c1 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 10 6b 40 00\n48 89 df\ne8 f8 c0 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 d5 c1 ff ff\neb 30\n4c 89 ff\ne8 5b c0 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 44 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf d9 65 40 00\n4c 89 ef\ne8 25 c0 ff ff\n4c 89 3d 9e 40 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p698
S'.text:0000000000405140\n.text:0000000000405141\n.text:0000000000405143\n.text:0000000000405145\n.text:0000000000405147\n.text:0000000000405149\n.text:000000000040514a\n.text:0000000000405151\n.text:0000000000405158\n.text:000000000040515b\n.text:0000000000405161\n.text:0000000000405166\n.text:000000000040516b\n.text:000000000040516e\n.text:0000000000405171\n.text:0000000000405173\n.text:0000000000405176\n.text:0000000000405178\n.text:000000000040517d\n.text:0000000000405180\n.text:0000000000405185\n.text:0000000000405188\n.text:000000000040518b\n.text:000000000040518d\n.text:0000000000405192\n.text:0000000000405195\n.text:0000000000405197\n.text:0000000000405199\n.text:000000000040519d\n.text:00000000004051a2\n.text:00000000004051a7\n.text:00000000004051aa\n.text:00000000004051ad\n.text:00000000004051af\n.text:00000000004051b2\n.text:00000000004051b5\n.text:00000000004051b8\n.text:00000000004051bd\n.text:00000000004051c0\n.text:00000000004051c3\n.text:00000000004051c6\n.text:00000000004051c8\n.text:00000000004051ce\n.text:00000000004051d8\n.text:00000000004051dd\n.text:00000000004051e7\n.text:00000000004051eb\n.text:00000000004051ed\n.text:00000000004051f3\n.text:00000000004051f8\n.text:0000000000405202\n.text:0000000000405207\n.text:0000000000405211\n.text:0000000000405215\n.text:000000000040521a\n.text:000000000040521c\n.text:000000000040521f\n.text:0000000000405224\n.text:0000000000405226\n.text:0000000000405228\n.text:000000000040522e\n.text:0000000000405233\n.text:0000000000405235\n.text:000000000040523a\n.text:000000000040523d\n.text:0000000000405240\n.text:0000000000405246\n.text:000000000040524b\n.text:0000000000405250\n.text:0000000000405252\n.text:0000000000405257\n.text:000000000040525a\n.text:000000000040525f\n.text:0000000000405264\n.text:0000000000405269\n.text:000000000040526c\n.text:000000000040526f\n.text:0000000000405272\n.text:0000000000405275\n.text:0000000000405278\n.text:000000000040527d\n.text:0000000000405280\n.text:0000000000405285\n.text:0000000000405288\n.text:000000000040528d\n.text:0000000000405290\n.text:0000000000405295\n.text:000000000040529a\n.text:000000000040529d\n.text:00000000004052a2\n.text:00000000004052a7\n.text:00000000004052a9\n.text:00000000004052ac\n.text:00000000004052b1\n.text:00000000004052b6\n.text:00000000004052b8\n.text:00000000004052bb\n.text:00000000004052be\n.text:00000000004052c1\n.text:00000000004052c6\n.text:00000000004052c9\n.text:00000000004052cf\n.text:00000000004052d2\n.text:00000000004052d7\n.text:00000000004052da\n.text:00000000004052dd\n.text:00000000004052e2\n.text:00000000004052e5\n.text:00000000004052ea\n.text:00000000004052ef\n.text:00000000004052f2\n.text:00000000004052f4\n.text:00000000004052f8\n.text:00000000004052fd\n.text:0000000000405302\n.text:0000000000405305\n.text:000000000040530a\n.text:000000000040530d\n.text:0000000000405312\n.text:0000000000405315\n.text:000000000040531b\n.text:000000000040531d\n.text:0000000000405322\n.text:0000000000405326\n.text:000000000040532b\n.text:000000000040532e\n.text:0000000000405331\n.text:0000000000405337\n.text:0000000000405340\n.text:0000000000405343\n.text:0000000000405348\n.text:000000000040534b\n.text:000000000040534e\n.text:0000000000405354\n.text:0000000000405360\n.text:0000000000405363\n.text:0000000000405368\n.text:000000000040536b\n.text:000000000040536d\n.text:0000000000405370\n.text:0000000000405372\n.text:0000000000405374\n.text:0000000000405376\n.text:000000000040537b\n.text:000000000040537d\n.text:0000000000405380\n.text:0000000000405385\n.text:0000000000405387\n.text:000000000040538c\n.text:000000000040538f\n.text:0000000000405394\n.text:0000000000405397\n.text:000000000040539c\n.text:00000000004053a1\n.text:00000000004053a4\n.text:00000000004053a6\n.text:00000000004053ab\n.text:00000000004053ad\n.text:00000000004053b3\n.text:00000000004053b6\n.text:00000000004053bb\n.text:00000000004053c2\n.text:00000000004053c5\n.text:00000000004053cc\n.text:00000000004053cd\n.text:00000000004053cf\n.text:00000000004053d1\n.text:00000000004053d3\n.text:00000000004053d5\n.text:00000000004053d6\n'
p699
tp700
sS'nl_langinfo'
p701
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p702
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00609150)();\u000a  return pcVar1;\u000a}\u000a\u000a
p703
S'JMP qword ptr [0x00609150]\n'
p704
S'ff 25 0a 7b 20 00\n'
p705
S'.plt:0000000000401640\n'
p706
tp707
sS'c_isalnum'
p708
(S'\n__stdcall c_isalnum()\n'
p709
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p710
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00404f0b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00404f0b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00404f0a\nXOR EAX,EAX\nRET\n'
p711
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p712
S'.text:0000000000404ef0\n.text:0000000000404ef2\n.text:0000000000404ef5\n.text:0000000000404ef8\n.text:0000000000404efa\n.text:0000000000404f04\n.text:0000000000404f08\n.text:0000000000404f0a\n.text:0000000000404f0b\n.text:0000000000404f0e\n.text:0000000000404f11\n.text:0000000000404f13\n.text:0000000000404f15\n'
p713
tp714
sS'trim_leading_zeros'
p715
(S'\n__stdcall trim_leading_zeros(char * s)\n'
p716
V\u000achar * trim_leading_zeros(char *s)\u000a\u000a{\u000a  long lVar1;\u000a  long lVar2;\u000a  \u000a  lVar2 = 0;\u000a  while (s[lVar2] == '0') {\u000a    lVar2 = lVar2 + 1;\u000a  }\u000a  if (s[lVar2] == 0) {\u000a    lVar1 = lVar2 + -1;\u000a    if (lVar2 == 0) {\u000a      lVar1 = lVar2;\u000a    }\u000a    return s + lVar1;\u000a  }\u000a  return s + lVar2;\u000a}\u000a\u000a
p717
S'XOR EAX,EAX\nJMP 0x00402c43\nINC RAX\nMOVZX ECX,byte ptr [RDI + RAX*0x1]\nCMP CL,0x30\nJZ 0x00402c40\nTEST CL,CL\nJNZ 0x00402c61\nLEA RCX,[RDI + RAX*0x1]\nTEST RAX,RAX\nLEA RAX,[RDI + RAX*0x1 + -0x1]\nCMOVZ RAX,RCX\nRET\nADD RDI,RAX\nMOV RAX,RDI\nRET\n'
p718
S'31 c0\neb 0f\n48 ff c0\n0f b6 0c 07\n80 f9 30\n74 f4\n84 c9\n75 11\n48 8d 0c 07\n48 85 c0\n48 8d 44 07 ff\n48 0f 44 c1\nc3\n48 01 c7\n48 89 f8\nc3\n'
p719
S'.text:0000000000402c30\n.text:0000000000402c32\n.text:0000000000402c40\n.text:0000000000402c43\n.text:0000000000402c47\n.text:0000000000402c4a\n.text:0000000000402c4c\n.text:0000000000402c4e\n.text:0000000000402c50\n.text:0000000000402c54\n.text:0000000000402c57\n.text:0000000000402c5c\n.text:0000000000402c60\n.text:0000000000402c61\n.text:0000000000402c64\n.text:0000000000402c67\n'
p720
tp721
sS'x2realloc'
p722
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p723
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p724
S'MOV EDX,0x1\nJMP 0x00404cc0\n'
p725
S'ba 01 00 00 00\neb 89\n'
p726
S'.text:0000000000404d30\n.text:0000000000404d35\n'
p727
tp728
sS'__mempcpy_chk'
p729
(S'\n__stdcall __mempcpy_chk()\n'
p730
V\u000avoid __mempcpy_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___mempcpy_chk_00609028)();\u000a  return;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x00609028]\n'
p732
S'ff 25 32 7c 20 00\n'
p733
S'.plt:00000000004013f0\n'
p734
tp735
sS'strlen'
p736
(S'\n__stdcall strlen(char * __s)\n'
p737
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_00609090)();\u000a  return sVar1;\u000a}\u000a\u000a
p738
S'JMP qword ptr [0x00609090]\n'
p739
S'ff 25 ca 7b 20 00\n'
p740
S'.plt:00000000004014c0\n'
p741
tp742
sS'memcmp'
p743
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p744
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_006090f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p745
S'JMP qword ptr [0x006090f8]\n'
p746
S'ff 25 62 7b 20 00\n'
p747
S'.plt:0000000000401590\n'
p748
tp749
sS'quotearg_n_style_mem'
p750
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p751
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p752
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00404060\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403e30\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p753
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p754
S'.text:00000000004040c0\n.text:00000000004040c1\n.text:00000000004040c3\n.text:00000000004040c5\n.text:00000000004040c6\n.text:00000000004040ca\n.text:00000000004040cd\n.text:00000000004040d0\n.text:00000000004040d2\n.text:00000000004040d5\n.text:00000000004040d8\n.text:00000000004040dd\n.text:00000000004040df\n.text:00000000004040e2\n.text:00000000004040e5\n.text:00000000004040e8\n.text:00000000004040ed\n.text:00000000004040f1\n.text:00000000004040f2\n.text:00000000004040f4\n.text:00000000004040f6\n.text:00000000004040f7\n'
p755
tp756
sS'_exit'
p757
(S'\n__stdcall _exit(int __status)\n'
p758
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00609048)();\u000a  return;\u000a}\u000a\u000a
p759
S'JMP qword ptr [0x00609048]\n'
p760
S'ff 25 12 7c 20 00\n'
p761
S'.plt:0000000000401430\n'
p762
tp763
sS'__errno_location'
p764
(S'\n__stdcall __errno_location()\n'
p765
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00609038)();\u000a  return piVar1;\u000a}\u000a\u000a
p766
S'JMP qword ptr [0x00609038]\n'
p767
S'ff 25 22 7c 20 00\n'
p768
S'.plt:0000000000401410\n'
p769
tp770
sS'x2nrealloc'
p771
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p772
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p773
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00404cec\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404d19\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00404d0a\nTEST RCX,RCX\nJNZ 0x00404d0a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00404c90\nPUSH RAX\nCALL 0x00404de0\n'
p774
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p775
S'.text:0000000000404cc0\n.text:0000000000404cc3\n.text:0000000000404cc6\n.text:0000000000404cc9\n.text:0000000000404ccb\n.text:0000000000404cd5\n.text:0000000000404cd7\n.text:0000000000404cda\n.text:0000000000404cdd\n.text:0000000000404cdf\n.text:0000000000404ce2\n.text:0000000000404ce5\n.text:0000000000404cea\n.text:0000000000404cec\n.text:0000000000404cef\n.text:0000000000404cf1\n.text:0000000000404cf6\n.text:0000000000404cf8\n.text:0000000000404cfb\n.text:0000000000404cfd\n.text:0000000000404d04\n.text:0000000000404d07\n.text:0000000000404d0a\n.text:0000000000404d0d\n.text:0000000000404d11\n.text:0000000000404d14\n.text:0000000000404d19\n.text:0000000000404d1a\n'
p776
tp777
sS'xrealloc'
p778
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p779
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p780
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00404ca7\nTEST RBX,RBX\nJNZ 0x00404ca7\nCALL 0x004013e0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401680\nTEST RBX,RBX\nJZ 0x00404cb9\nTEST RAX,RAX\nJZ 0x00404cbb\nPOP RBX\nRET\nCALL 0x00404de0\n'
p781
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 3d c7 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 d1 c9 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p782
S'.text:0000000000404c90\n.text:0000000000404c91\n.text:0000000000404c94\n.text:0000000000404c97\n.text:0000000000404c99\n.text:0000000000404c9c\n.text:0000000000404c9e\n.text:0000000000404ca3\n.text:0000000000404ca5\n.text:0000000000404ca6\n.text:0000000000404ca7\n.text:0000000000404caa\n.text:0000000000404caf\n.text:0000000000404cb2\n.text:0000000000404cb4\n.text:0000000000404cb7\n.text:0000000000404cb9\n.text:0000000000404cba\n.text:0000000000404cbb\n'
p783
tp784
sS'quotearg_n_options'
p785
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p786
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p787
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401410\nTEST R12D,R12D\nJS 0x00403fe1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x00609218]\nCMP dword ptr [0x00609220],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00403efb\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x609228\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00404c90\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x00609218],R15\nJNZ 0x00403ec2\nMOVUPS XMM0,xmmword ptr [0x00609228]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x00609220]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401530\nMOV dword ptr [0x00609220],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00403050\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00403f5d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00403fcb\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x609360\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00403f88\nCALL 0x004013e0\nMOV RDI,R15\nCALL 0x00404d20\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00403050\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401400\n'
p788
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 c1 d5 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 ae 53 20 00\n44 39 25 af 53 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 28 92 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 e8 0d 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 63 53 20 00\n75 0b\n0f 10 05 6a 53 20 00\n41 0f 11 07\n8b 05 58 53 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 4d d6 ff ff\n89 1d 37 53 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 60 93 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 58 d4 ff ff\n4c 89 ff\ne8 90 0d 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 1a d4 ff ff\n'
p789
S'.text:0000000000403e30\n.text:0000000000403e31\n.text:0000000000403e33\n.text:0000000000403e35\n.text:0000000000403e37\n.text:0000000000403e39\n.text:0000000000403e3a\n.text:0000000000403e3e\n.text:0000000000403e41\n.text:0000000000403e44\n.text:0000000000403e47\n.text:0000000000403e4a\n.text:0000000000403e4f\n.text:0000000000403e52\n.text:0000000000403e58\n.text:0000000000403e5d\n.text:0000000000403e5f\n.text:0000000000403e63\n.text:0000000000403e6a\n.text:0000000000403e71\n.text:0000000000403e76\n.text:0000000000403e7b\n.text:0000000000403e80\n.text:0000000000403e82\n.text:0000000000403e87\n.text:0000000000403e8a\n.text:0000000000403e8d\n.text:0000000000403e93\n.text:0000000000403e95\n.text:0000000000403e98\n.text:0000000000403e9c\n.text:0000000000403e9f\n.text:0000000000403ea3\n.text:0000000000403ea8\n.text:0000000000403eab\n.text:0000000000403eae\n.text:0000000000403eb5\n.text:0000000000403eb7\n.text:0000000000403ebe\n.text:0000000000403ec2\n.text:0000000000403ec8\n.text:0000000000403ecb\n.text:0000000000403ecf\n.text:0000000000403ed2\n.text:0000000000403ed5\n.text:0000000000403ed9\n.text:0000000000403edb\n.text:0000000000403ede\n.text:0000000000403ee3\n.text:0000000000403ee9\n.text:0000000000403eec\n.text:0000000000403ef1\n.text:0000000000403ef6\n.text:0000000000403efb\n.text:0000000000403efe\n.text:0000000000403f02\n.text:0000000000403f06\n.text:0000000000403f0b\n.text:0000000000403f0f\n.text:0000000000403f13\n.text:0000000000403f17\n.text:0000000000403f1b\n.text:0000000000403f1f\n.text:0000000000403f24\n.text:0000000000403f27\n.text:0000000000403f2a\n.text:0000000000403f2d\n.text:0000000000403f32\n.text:0000000000403f35\n.text:0000000000403f38\n.text:0000000000403f3b\n.text:0000000000403f3c\n.text:0000000000403f41\n.text:0000000000403f45\n.text:0000000000403f48\n.text:0000000000403f4b\n.text:0000000000403f4d\n.text:0000000000403f52\n.text:0000000000403f56\n.text:0000000000403f5b\n.text:0000000000403f5d\n.text:0000000000403f61\n.text:0000000000403f66\n.text:0000000000403f69\n.text:0000000000403f6c\n.text:0000000000403f71\n.text:0000000000403f76\n.text:0000000000403f79\n.text:0000000000403f7e\n.text:0000000000403f81\n.text:0000000000403f83\n.text:0000000000403f88\n.text:0000000000403f8b\n.text:0000000000403f90\n.text:0000000000403f93\n.text:0000000000403f96\n.text:0000000000403f9b\n.text:0000000000403f9e\n.text:0000000000403fa2\n.text:0000000000403fa5\n.text:0000000000403fa8\n.text:0000000000403fad\n.text:0000000000403fb2\n.text:0000000000403fb7\n.text:0000000000403fba\n.text:0000000000403fbd\n.text:0000000000403fbe\n.text:0000000000403fc3\n.text:0000000000403fc7\n.text:0000000000403fcb\n.text:0000000000403fcf\n.text:0000000000403fd2\n.text:0000000000403fd6\n.text:0000000000403fd7\n.text:0000000000403fd9\n.text:0000000000403fdb\n.text:0000000000403fdd\n.text:0000000000403fdf\n.text:0000000000403fe0\n.text:0000000000403fe1\n'
p790
tp791
sS'strcmp'
p792
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p793
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00609120)();\u000a  return iVar1;\u000a}\u000a\u000a
p794
S'JMP qword ptr [0x00609120]\n'
p795
S'ff 25 3a 7b 20 00\n'
p796
S'.plt:00000000004015e0\n'
p797
tp798
sS'set_custom_quoting'
p799
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p800
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p801
S'TEST RDI,RDI\nMOV EAX,0x609320\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00402fc5\nTEST RDX,RDX\nJZ 0x00402fc5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401400\n'
p802
S'48 85 ff\nb8 20 93 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 35 e4 ff ff\n'
p803
S'.text:0000000000402fa0\n.text:0000000000402fa3\n.text:0000000000402fa8\n.text:0000000000402fac\n.text:0000000000402fb2\n.text:0000000000402fb5\n.text:0000000000402fb7\n.text:0000000000402fba\n.text:0000000000402fbc\n.text:0000000000402fc0\n.text:0000000000402fc4\n.text:0000000000402fc5\n.text:0000000000402fc6\n'
p804
tp805
sS'c_isalpha'
p806
(S'\n__stdcall c_isalpha()\n'
p807
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p808
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00404f3b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p809
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p810
S'.text:0000000000404f20\n.text:0000000000404f23\n.text:0000000000404f26\n.text:0000000000404f28\n.text:0000000000404f32\n.text:0000000000404f34\n.text:0000000000404f37\n.text:0000000000404f3a\n.text:0000000000404f3b\n.text:0000000000404f3d\n'
p811
tp812
sS'print_numbers'
p813
(S'\n__stdcall print_numbers(char * fmt, longdouble first, longdouble step, longdouble last)\n'
p814
V\u000avoid print_numbers(char *fmt,longdouble first,longdouble step,longdouble last)\u000a\u000a{\u000a  bool bVar1;\u000a  char *__ptr;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  long in_RDX;\u000a  long in_RSI;\u000a  bool bVar4;\u000a  float10 fVar5;\u000a  float10 in_stack_00000008;\u000a  float10 in_stack_00000018;\u000a  float10 in_stack_00000028;\u000a  longdouble x;\u000a  longdouble x_val;\u000a  char *local_a8;\u000a  float10 local_9c;\u000a  float10 local_90;\u000a  float10 local_84;\u000a  char *local_78;\u000a  float10 local_6c;\u000a  float10 local_60;\u000a  float10 local_54;\u000a  float10 local_48 [2];\u000a  \u000a  local_6c = in_stack_00000028;\u000a  local_9c = in_stack_00000008;\u000a  local_54 = in_stack_00000018;\u000a  bVar1 = in_stack_00000008 < in_stack_00000028;\u000a  if ((float10)0 <= in_stack_00000018) {\u000a    bVar1 = in_stack_00000028 < in_stack_00000008;\u000a  }\u000a  if (!bVar1) {\u000a    __printf_chk(1,fmt);\u000a    local_90 = (float10)1;\u000a    fVar5 = local_9c;\u000a    do {\u000a      local_84 = local_9c + local_90 * local_54;\u000a      bVar1 = local_84 < local_6c;\u000a      if ((float10)0 <= local_54) {\u000a        bVar1 = local_6c < local_84;\u000a      }\u000a      if (bVar1) {\u000a        local_60 = fVar5;\u000a        setlocale(1,"C");\u000a        iVar3 = __asprintf_chk(&local_a8,1,fmt);\u000a        setlocale(1,\u000a                    "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                    + 0xca);\u000a        if (iVar3 < 0) {\u000aLAB_00402c23:\u000a                    /* WARNING: Subroutine does not return */\u000a          xalloc_die();\u000a        }\u000a        local_a8[(long)iVar3 - in_RDX] = 0;\u000a        bVar4 = false;\u000a        _Var2 = xstrtold(local_a8 + in_RSI,(char **)0x0,(longdouble *)local_48,c_strtold);\u000a        if ((_Var2 != false) && (local_48[0] == local_6c)) {\u000a          local_78 = (char *)0x0;\u000a          iVar3 = __asprintf_chk(&local_78,1,fmt);\u000a          __ptr = local_78;\u000a          if (iVar3 < 0) goto LAB_00402c23;\u000a          iVar3 = strcmp(local_78,local_a8);\u000a          bVar4 = iVar3 != 0;\u000a          free(__ptr);\u000a        }\u000a        free(local_a8);\u000a        if (!bVar4) break;\u000a      }\u000a      fputs_unlocked(separator,stdout);\u000a      local_90 = local_90 + (float10)1;\u000a      __printf_chk(1,fmt);\u000a      fVar5 = local_84;\u000a    } while (!bVar1);\u000a    fputs_unlocked("\u005cn",stdout);\u000a  }\u000a  return;\u000a}\u000a\u000a
p815
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x88\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nFLD tword ptr [0xe0 + RSP]\nFLD tword ptr [0xd0 + RSP]\nFLD tword ptr [0xc0 + RSP]\nFUCOMI ST0,ST2\nSETA AL\nFLD ST2\nFSTP tword ptr [RSP + 0x4c]\nFLD ST0\nFSTP tword ptr [RSP + 0x1c]\nFXCH ST2\nFUCOMIP ST0,ST2\nFSTP ST1\nSETA CL\nFLDZ\nFLD ST1\nFSTP tword ptr [RSP + 0x64]\nFUCOMIP ST0,ST1\nFSTP ST0\nJA 0x00402a59\nMOV ECX,EAX\nTEST CL,CL\nJNZ 0x00402c11\nFLD tword ptr [RSP + 0x1c]\nFSTP tword ptr [RSP]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x004016b0\nFLD1\nFLD tword ptr [RSP + 0x1c]\nFXCH\nFSTP tword ptr [RSP + 0x28]\nNOP dword ptr CS:[RAX + RAX*0x1]\nFLD tword ptr [RSP + 0x64]\nFLD tword ptr [RSP + 0x28]\nFMUL ST1\nFLD tword ptr [RSP + 0x1c]\nFADDP\nFLD tword ptr [RSP + 0x4c]\nFXCH\nFUCOMI ST0,ST1\nSETA AL\nFLD ST0\nFSTP tword ptr [RSP + 0x34]\nFXCH\nFUCOMIP ST0,ST1\nFSTP ST0\nSETA R12B\nFLDZ\nFUCOMIP ST0,ST1\nFSTP ST0\nJA 0x00402ac6\nMOV R12D,EAX\nCMP R12B,0x1\nJNZ 0x00402bb9\nFSTP tword ptr [RSP + 0x58]\nMOV EDI,0x1\nMOV ESI,0x405da6\nCALL 0x004016a0\nFLD tword ptr [RSP + 0x34]\nFSTP tword ptr [RSP]\nMOV ESI,0x1\nXOR EAX,EAX\nLEA RDI,[RSP + 0x10]\nMOV RDX,RBX\nCALL 0x004015b0\nMOV EBP,EAX\nMOV EDI,0x1\nMOV ESI,0x4065d9\nCALL 0x004016a0\nTEST EBP,EBP\nJS 0x00402c23\nMOV RAX,qword ptr [RSP + 0x10]\nMOVSXD RCX,EBP\nSUB RCX,R14\nMOV byte ptr [RAX + RCX*0x1],0x0\nMOV RDI,qword ptr [RSP + 0x10]\nADD RDI,R15\nXOR R13D,R13D\nXOR ESI,ESI\nMOV ECX,0x402ce0\nLEA RDX,[RSP + 0x70]\nCALL 0x00404e10\nFLD tword ptr [RSP + 0x70]\nTEST AL,AL\nJZ 0x00402ba6\nFLD tword ptr [RSP + 0x4c]\nFXCH\nFUCOMIP ST0,ST1\nFSTP ST0\nJNZ 0x00402ba8\nJP 0x00402ba8\nMOV qword ptr [RSP + 0x40],0x0\nFLD tword ptr [RSP + 0x58]\nFSTP tword ptr [RSP]\nMOV ESI,0x1\nXOR EAX,EAX\nLEA RDI,[RSP + 0x40]\nMOV RDX,RBX\nCALL 0x004015b0\nTEST EAX,EAX\nJS 0x00402c23\nMOV RBP,qword ptr [RSP + 0x40]\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDI,RBP\nCALL 0x004015e0\nTEST EAX,EAX\nSETNZ R13B\nMOV RDI,RBP\nCALL 0x004013e0\nJMP 0x00402ba8\nFSTP ST0\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x004013e0\nTEST R13B,R13B\nFLDZ\nJZ 0x00402bfe\nFSTP ST0\nMOV RDI,qword ptr [0x006092d8]\nMOV RSI,qword ptr [0x00609288]\nCALL 0x004015a0\nFLD1\nFLD tword ptr [RSP + 0x28]\nFADDP\nFSTP tword ptr [RSP + 0x28]\nFLD tword ptr [RSP + 0x34]\nFSTP tword ptr [RSP]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nCALL 0x004016b0\nTEST R12B,0x1\nFLD tword ptr [RSP + 0x34]\nJZ 0x00402a90\nFSTP ST0\nMOV RSI,qword ptr [0x00609288]\nMOV EDI,0x405f00\nCALL 0x004015a0\nADD RSP,0x88\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00404de0\n'
p816
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 88 00 00 00\n49 89 d6\n49 89 f7\n48 89 fb\ndb ac 24 e0 00 00 00\ndb ac 24 d0 00 00 00\ndb ac 24 c0 00 00 00\ndb ea\n0f 97 c0\nd9 c2\ndb 7c 24 4c\nd9 c0\ndb 7c 24 1c\nd9 ca\ndf ea\ndd d9\n0f 97 c1\nd9 ee\nd9 c1\ndb 7c 24 64\ndf e9\ndd d8\n77 02\n89 c1\n84 c9\n0f 85 b0 01 00 00\ndb 6c 24 1c\ndb 3c 24\nbf 01 00 00 00\n31 c0\n48 89 de\ne8 39 ec ff ff\nd9 e8\ndb 6c 24 1c\nd9 c9\ndb 7c 24 28\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\ndb 6c 24 64\ndb 6c 24 28\nd8 c9\ndb 6c 24 1c\nde c1\ndb 6c 24 4c\nd9 c9\ndb e9\n0f 97 c0\nd9 c0\ndb 7c 24 34\nd9 c9\ndf e9\ndd d8\n41 0f 97 c4\nd9 ee\ndf e9\ndd d8\n77 03\n41 89 c4\n41 80 fc 01\n0f 85 e9 00 00 00\ndb 7c 24 58\nbf 01 00 00 00\nbe a6 5d 40 00\ne8 bd eb ff ff\ndb 6c 24 34\ndb 3c 24\nbe 01 00 00 00\n31 c0\n48 8d 7c 24 10\n48 89 da\ne8 b2 ea ff ff\n89 c5\nbf 01 00 00 00\nbe d9 65 40 00\ne8 91 eb ff ff\n85 ed\n0f 88 0c 01 00 00\n48 8b 44 24 10\n48 63 cd\n4c 29 f1\nc6 04 08 00\n48 8b 7c 24 10\n4c 01 ff\n45 31 ed\n31 f6\nb9 e0 2c 40 00\n48 8d 54 24 70\ne8 ce 22 00 00\ndb 6c 24 70\n84 c0\n74 5c\ndb 6c 24 4c\nd9 c9\ndf e9\ndd d8\n75 52\n7a 50\n48 c7 44 24 40 00 00 00 00\ndb 6c 24 58\ndb 3c 24\nbe 01 00 00 00\n31 c0\n48 8d 7c 24 40\n48 89 da\ne8 34 ea ff ff\n85 c0\n0f 88 9f 00 00 00\n48 8b 6c 24 40\n48 8b 74 24 10\n48 89 ef\ne8 4a ea ff ff\n85 c0\n41 0f 95 c5\n48 89 ef\ne8 3c e8 ff ff\neb 02\ndd d8\n48 8b 7c 24 10\ne8 2e e8 ff ff\n45 84 ed\nd9 ee\n74 45\ndd d8\n48 8b 3d 16 67 20 00\n48 8b 35 bf 66 20 00\ne8 d2 e9 ff ff\nd9 e8\ndb 6c 24 28\nde c1\ndb 7c 24 28\ndb 6c 24 34\ndb 3c 24\nbf 01 00 00 00\n31 c0\n48 89 de\ne8 c0 ea ff ff\n41 f6 c4 01\ndb 6c 24 34\n0f 84 92 fe ff ff\ndd d8\n48 8b 35 81 66 20 00\nbf 00 5f 40 00\ne8 8f e9 ff ff\n48 81 c4 88 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 b8 21 00 00\n'
p817
S'.text:0000000000402a00\n.text:0000000000402a01\n.text:0000000000402a03\n.text:0000000000402a05\n.text:0000000000402a07\n.text:0000000000402a09\n.text:0000000000402a0a\n.text:0000000000402a11\n.text:0000000000402a14\n.text:0000000000402a17\n.text:0000000000402a1a\n.text:0000000000402a21\n.text:0000000000402a28\n.text:0000000000402a2f\n.text:0000000000402a31\n.text:0000000000402a34\n.text:0000000000402a36\n.text:0000000000402a3a\n.text:0000000000402a3c\n.text:0000000000402a40\n.text:0000000000402a42\n.text:0000000000402a44\n.text:0000000000402a46\n.text:0000000000402a49\n.text:0000000000402a4b\n.text:0000000000402a4d\n.text:0000000000402a51\n.text:0000000000402a53\n.text:0000000000402a55\n.text:0000000000402a57\n.text:0000000000402a59\n.text:0000000000402a5b\n.text:0000000000402a61\n.text:0000000000402a65\n.text:0000000000402a68\n.text:0000000000402a6d\n.text:0000000000402a6f\n.text:0000000000402a72\n.text:0000000000402a77\n.text:0000000000402a79\n.text:0000000000402a7d\n.text:0000000000402a7f\n.text:0000000000402a83\n.text:0000000000402a90\n.text:0000000000402a94\n.text:0000000000402a98\n.text:0000000000402a9a\n.text:0000000000402a9e\n.text:0000000000402aa0\n.text:0000000000402aa4\n.text:0000000000402aa6\n.text:0000000000402aa8\n.text:0000000000402aab\n.text:0000000000402aad\n.text:0000000000402ab1\n.text:0000000000402ab3\n.text:0000000000402ab5\n.text:0000000000402ab7\n.text:0000000000402abb\n.text:0000000000402abd\n.text:0000000000402abf\n.text:0000000000402ac1\n.text:0000000000402ac3\n.text:0000000000402ac6\n.text:0000000000402aca\n.text:0000000000402ad0\n.text:0000000000402ad4\n.text:0000000000402ad9\n.text:0000000000402ade\n.text:0000000000402ae3\n.text:0000000000402ae7\n.text:0000000000402aea\n.text:0000000000402aef\n.text:0000000000402af1\n.text:0000000000402af6\n.text:0000000000402af9\n.text:0000000000402afe\n.text:0000000000402b00\n.text:0000000000402b05\n.text:0000000000402b0a\n.text:0000000000402b0f\n.text:0000000000402b11\n.text:0000000000402b17\n.text:0000000000402b1c\n.text:0000000000402b1f\n.text:0000000000402b22\n.text:0000000000402b26\n.text:0000000000402b2b\n.text:0000000000402b2e\n.text:0000000000402b31\n.text:0000000000402b33\n.text:0000000000402b38\n.text:0000000000402b3d\n.text:0000000000402b42\n.text:0000000000402b46\n.text:0000000000402b48\n.text:0000000000402b4a\n.text:0000000000402b4e\n.text:0000000000402b50\n.text:0000000000402b52\n.text:0000000000402b54\n.text:0000000000402b56\n.text:0000000000402b58\n.text:0000000000402b61\n.text:0000000000402b65\n.text:0000000000402b68\n.text:0000000000402b6d\n.text:0000000000402b6f\n.text:0000000000402b74\n.text:0000000000402b77\n.text:0000000000402b7c\n.text:0000000000402b7e\n.text:0000000000402b84\n.text:0000000000402b89\n.text:0000000000402b8e\n.text:0000000000402b91\n.text:0000000000402b96\n.text:0000000000402b98\n.text:0000000000402b9c\n.text:0000000000402b9f\n.text:0000000000402ba4\n.text:0000000000402ba6\n.text:0000000000402ba8\n.text:0000000000402bad\n.text:0000000000402bb2\n.text:0000000000402bb5\n.text:0000000000402bb7\n.text:0000000000402bb9\n.text:0000000000402bbb\n.text:0000000000402bc2\n.text:0000000000402bc9\n.text:0000000000402bce\n.text:0000000000402bd0\n.text:0000000000402bd4\n.text:0000000000402bd6\n.text:0000000000402bda\n.text:0000000000402bde\n.text:0000000000402be1\n.text:0000000000402be6\n.text:0000000000402be8\n.text:0000000000402beb\n.text:0000000000402bf0\n.text:0000000000402bf4\n.text:0000000000402bf8\n.text:0000000000402bfe\n.text:0000000000402c00\n.text:0000000000402c07\n.text:0000000000402c0c\n.text:0000000000402c11\n.text:0000000000402c18\n.text:0000000000402c19\n.text:0000000000402c1b\n.text:0000000000402c1d\n.text:0000000000402c1f\n.text:0000000000402c21\n.text:0000000000402c22\n.text:0000000000402c23\n'
p818
tp819
sS'quotearg_custom_mem'
p820
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p821
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p822
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00404240\n'
p823
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p824
S'.text:00000000004042d0\n.text:00000000004042d3\n.text:00000000004042d6\n.text:00000000004042d9\n.text:00000000004042dc\n.text:00000000004042de\n.text:00000000004042e1\n'
p825
tp826
sS'close_stdout'
p827
(S'\n__stdcall close_stdout()\n'
p828
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402d97;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x405f17,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402d97:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p829
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x00609288]\nCALL 0x00405040\nTEST EAX,EAX\nJZ 0x00402d97\nCMP byte ptr [0x00609310],0x0\nJZ 0x00402dac\nCALL 0x00401410\nCMP dword ptr [RAX],0x20\nJNZ 0x00402dac\nMOV RDI,qword ptr [0x006092c0]\nCALL 0x00405040\nTEST EAX,EAX\nJNZ 0x00402df1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x405f07\nMOV EDX,0x5\nCALL 0x004014a0\nMOV R14,RAX\nMOV RBX,qword ptr [0x00609308]\nCALL 0x00401410\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00402dfc\nXOR EDI,EDI\nMOV EDX,0x405f17\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004016d0\nMOV EDI,dword ptr [0x00609210]\nCALL 0x00401430\nMOV EDI,dword ptr [0x00609210]\nCALL 0x00401430\nMOV RDI,RBX\nCALL 0x004041c0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x405f13\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004016d0\nMOV EDI,dword ptr [0x00609210]\nCALL 0x00401430\n'
p830
S'55\n41 56\n53\n48 8b 3d 0d 65 20 00\ne8 c0 22 00 00\n85 c0\n74 13\n80 3d 85 65 20 00 00\n74 1f\ne8 7e e6 ff ff\n83 38 20\n75 15\n48 8b 3d 22 65 20 00\ne8 9d 22 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 07 5f 40 00\nba 05 00 00 00\ne8 e3 e6 ff ff\n49 89 c6\n48 8b 1d 41 65 20 00\ne8 44 e6 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 17 5f 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 ea e8 ff ff\n8b 3d 24 64 20 00\ne8 3f e6 ff ff\n8b 3d 19 64 20 00\ne8 34 e6 ff ff\n48 89 df\ne8 bc 13 00 00\n48 89 c1\n31 ff\nba 13 5f 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 b6 e8 ff ff\n8b 3d f0 63 20 00\ne8 0b e6 ff ff\n'
p831
S'.text:0000000000402d70\n.text:0000000000402d71\n.text:0000000000402d73\n.text:0000000000402d74\n.text:0000000000402d7b\n.text:0000000000402d80\n.text:0000000000402d82\n.text:0000000000402d84\n.text:0000000000402d8b\n.text:0000000000402d8d\n.text:0000000000402d92\n.text:0000000000402d95\n.text:0000000000402d97\n.text:0000000000402d9e\n.text:0000000000402da3\n.text:0000000000402da5\n.text:0000000000402da7\n.text:0000000000402da8\n.text:0000000000402daa\n.text:0000000000402dab\n.text:0000000000402dac\n.text:0000000000402dae\n.text:0000000000402db3\n.text:0000000000402db8\n.text:0000000000402dbd\n.text:0000000000402dc0\n.text:0000000000402dc7\n.text:0000000000402dcc\n.text:0000000000402dcf\n.text:0000000000402dd1\n.text:0000000000402dd3\n.text:0000000000402dd5\n.text:0000000000402dda\n.text:0000000000402ddc\n.text:0000000000402dde\n.text:0000000000402de1\n.text:0000000000402de6\n.text:0000000000402dec\n.text:0000000000402df1\n.text:0000000000402df7\n.text:0000000000402dfc\n.text:0000000000402dff\n.text:0000000000402e04\n.text:0000000000402e07\n.text:0000000000402e09\n.text:0000000000402e0e\n.text:0000000000402e10\n.text:0000000000402e12\n.text:0000000000402e15\n.text:0000000000402e1a\n.text:0000000000402e20\n'
p832
tp833
sS'version_etc_ar'
p834
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p835
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p836
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00404aa0\nJMP 0x00404730\n'
p837
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p838
S'.text:0000000000404a90\n.text:0000000000404a97\n.text:0000000000404aa0\n.text:0000000000404aa6\n.text:0000000000404aaa\n.text:0000000000404aac\n'
p839
tp840
sS'c_locale'
p841
(S'\n__stdcall c_locale()\n'
p842
V\u000alocale_t c_locale(void)\u000a\u000a{\u000a  if (c_locale_cache == (locale_t)0x0) {\u000a    c_locale_cache = (locale_t)newlocale(0x1fbf,"C",(__locale_t)0x0);\u000a  }\u000a  return c_locale_cache;\u000a}\u000a\u000a
p843
S'CMP qword ptr [0x00609300],0x0\nJNZ 0x00402d47\nPUSH RAX\nMOV EDI,0x1fbf\nMOV ESI,0x405da6\nXOR EDX,EDX\nCALL 0x00401500\nMOV qword ptr [0x00609300],RAX\nADD RSP,0x8\nMOV RAX,qword ptr [0x00609300]\nRET\n'
p844
S'48 83 3d d8 65 20 00 00\n75 1d\n50\nbf bf 1f 00 00\nbe a6 5d 40 00\n31 d2\ne8 c4 e7 ff ff\n48 89 05 bd 65 20 00\n48 83 c4 08\n48 8b 05 b2 65 20 00\nc3\n'
p845
S'.text:0000000000402d20\n.text:0000000000402d28\n.text:0000000000402d2a\n.text:0000000000402d2b\n.text:0000000000402d30\n.text:0000000000402d35\n.text:0000000000402d37\n.text:0000000000402d3c\n.text:0000000000402d43\n.text:0000000000402d47\n.text:0000000000402d4e\n'
p846
tp847
sS'rpl_calloc'
p848
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p849
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00609118)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p850
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00404edb\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00404ee0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00404ee0\nPUSH RAX\nCALL 0x00401410\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004015d0\n'
p851
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 3f c5 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 e5 c6 ff ff\n'
p852
S'.text:0000000000404ea0\n.text:0000000000404ea3\n.text:0000000000404ea8\n.text:0000000000404eaa\n.text:0000000000404ead\n.text:0000000000404eb2\n.text:0000000000404eb4\n.text:0000000000404eb7\n.text:0000000000404ebb\n.text:0000000000404ebd\n.text:0000000000404ec0\n.text:0000000000404ec3\n.text:0000000000404ec6\n.text:0000000000404ec9\n.text:0000000000404ecb\n.text:0000000000404ecc\n.text:0000000000404ed1\n.text:0000000000404ed7\n.text:0000000000404ed9\n.text:0000000000404eda\n.text:0000000000404edb\n.text:0000000000404ee0\n.text:0000000000404ee3\n.text:0000000000404ee6\n'
p853
tp854
sS'memset'
p855
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006090c8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x006090c8]\n'
p858
S'ff 25 92 7b 20 00\n'
p859
S'.plt:0000000000401530\n'
p860
tp861
sS'c_isxdigit'
p862
(S'\n__stdcall c_isxdigit()\n'
p863
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p864
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0040501b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p865
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p866
S'.text:0000000000405000\n.text:0000000000405003\n.text:0000000000405006\n.text:0000000000405008\n.text:0000000000405012\n.text:0000000000405014\n.text:0000000000405017\n.text:000000000040501a\n.text:000000000040501b\n.text:000000000040501d\n'
p867
tp868
sS'__libc_csu_fini'
p869
(S'\n__stdcall __libc_csu_fini()\n'
p870
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p871
S'RET\n'
p872
S'f3 c3\n'
p873
S'.text:0000000000405590\n'
p874
tp875
sS'getc_unlocked'
p876
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p877
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00609060)();\u000a  return iVar1;\u000a}\u000a\u000a
p878
S'JMP qword ptr [0x00609060]\n'
p879
S'ff 25 fa 7b 20 00\n'
p880
S'.plt:0000000000401460\n'
p881
tp882
sS'abort'
p883
(S'\n__stdcall abort()\n'
p884
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00609030)();\u000a  return;\u000a}\u000a\u000a
p885
S'JMP qword ptr [0x00609030]\n'
p886
S'ff 25 2a 7c 20 00\n'
p887
S'.plt:0000000000401400\n'
p888
tp889
sS'memmove'
p890
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_00609190)();\u000a  return pvVar1;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x00609190]\n'
p893
S'ff 25 ca 7a 20 00\n'
p894
S'.plt:00000000004016c0\n'
p895
tp896
sS'c_isascii'
p897
(S'\n__stdcall c_isascii()\n'
p898
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p899
S'CMP EDI,0x80\nSETC AL\nRET\n'
p900
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p901
S'.text:0000000000404f40\n.text:0000000000404f46\n.text:0000000000404f49\n'
p902
tp903
sS'version_etc'
p904
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p905
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p906
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404b62\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00404ac0\nADD RSP,0xd8\nRET\n'
p907
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p908
S'.text:0000000000404b20\n.text:0000000000404b27\n.text:0000000000404b29\n.text:0000000000404b2b\n.text:0000000000404b30\n.text:0000000000404b35\n.text:0000000000404b3a\n.text:0000000000404b42\n.text:0000000000404b4a\n.text:0000000000404b52\n.text:0000000000404b5a\n.text:0000000000404b62\n.text:0000000000404b67\n.text:0000000000404b6c\n.text:0000000000404b71\n.text:0000000000404b76\n.text:0000000000404b7e\n.text:0000000000404b83\n.text:0000000000404b8b\n.text:0000000000404b92\n.text:0000000000404b95\n.text:0000000000404b9a\n.text:0000000000404ba1\n'
p909
tp910
sS'__ctype_b_loc'
p911
(S'\n__stdcall __ctype_b_loc()\n'
p912
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_006091e8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p913
S'JMP qword ptr [0x006091e8]\n'
p914
S'ff 25 72 7a 20 00\n'
p915
S'.plt:0000000000401770\n'
p916
tp917
sS'lseek'
p918
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p919
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006090c0)();\u000a  return _Var1;\u000a}\u000a\u000a
p920
S'JMP qword ptr [0x006090c0]\n'
p921
S'ff 25 9a 7b 20 00\n'
p922
S'.plt:0000000000401520\n'
p923
tp924
sS'quotearg'
p925
(S'\n__stdcall quotearg(char * arg)\n'
p926
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p927
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403e20\n'
p928
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p929
S'.text:0000000000404000\n.text:0000000000404003\n.text:0000000000404005\n.text:0000000000404008\n'
p930
tp931
sS'_start'
p932
(S'\n__stdcall _start()\n'
p933
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00608ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p934
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405590\nMOV RCX,0x405520\nMOV RDI,0x401b50\nCALL qword ptr [0x00608ff0]\nHLT\n'
p935
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 90 55 40 00\n48 c7 c1 20 55 40 00\n48 c7 c7 50 1b 40 00\nff 15 36 78 20 00\nf4\n'
p936
S'.text:0000000000401790\n.text:0000000000401792\n.text:0000000000401795\n.text:0000000000401796\n.text:0000000000401799\n.text:000000000040179d\n.text:000000000040179e\n.text:000000000040179f\n.text:00000000004017a6\n.text:00000000004017ad\n.text:00000000004017b4\n.text:00000000004017ba\n'
p937
tp938
sS'c_iscntrl'
p939
(S'\n__stdcall c_iscntrl()\n'
p940
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p941
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00404f68\nRET\nCMP EDI,0x7f\nJZ 0x00404f67\nXOR EAX,EAX\nRET\n'
p942
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p943
S'.text:0000000000404f60\n.text:0000000000404f62\n.text:0000000000404f65\n.text:0000000000404f67\n.text:0000000000404f68\n.text:0000000000404f6b\n.text:0000000000404f6d\n.text:0000000000404f6f\n'
p944
tp945
sS'c_isblank'
p946
(S'\n__stdcall c_isblank()\n'
p947
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p948
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p949
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p950
S'.text:0000000000404f50\n.text:0000000000404f53\n.text:0000000000404f56\n.text:0000000000404f59\n.text:0000000000404f5c\n.text:0000000000404f5e\n'
p951
tp952
sS'quotearg_n_mem'
p953
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p954
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p955
S'MOV ECX,0x609320\nJMP 0x00403e30\n'
p956
S'b9 20 93 60 00\ne9 36 fe ff ff\n'
p957
S'.text:0000000000403ff0\n.text:0000000000403ff5\n'
p958
tp959
sS'atexit'
p960
(S'\n__stdcall atexit(__func * __func)\n'
p961
V\u000a/* WARNING: Removing unreachable block (ram,0x004055c0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_006091b0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p962
S'MOV RAX,0x609200\nTEST RAX,RAX\nJZ 0x004055c0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401700\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401700\n'
p963
S'48 c7 c0 00 92 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 4a c1 ff ff\n31 d2\n31 f6\ne9 37 c1 ff ff\n'
p964
S'.text:00000000004055a0\n.text:00000000004055a7\n.text:00000000004055aa\n.text:00000000004055ac\n.text:00000000004055af\n.text:00000000004055b1\n.text:00000000004055c0\n.text:00000000004055c2\n.text:00000000004055c4\n'
p965
tp966
sS'__printf_chk'
p967
(S'\n__stdcall __printf_chk()\n'
p968
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_00609188)();\u000a  return;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x00609188]\n'
p970
S'ff 25 d2 7a 20 00\n'
p971
S'.plt:00000000004016b0\n'
p972
tp973
sS'__asprintf_chk'
p974
(S'\n__stdcall __asprintf_chk()\n'
p975
V\u000avoid __asprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___asprintf_chk_00609108)();\u000a  return;\u000a}\u000a\u000a
p976
S'JMP qword ptr [0x00609108]\n'
p977
S'ff 25 52 7b 20 00\n'
p978
S'.plt:00000000004015b0\n'
p979
tp980
sS'fdopen'
p981
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p982
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_00609178)();\u000a  return pFVar1;\u000a}\u000a\u000a
p983
S'JMP qword ptr [0x00609178]\n'
p984
S'ff 25 e2 7a 20 00\n'
p985
S'.plt:0000000000401690\n'
p986
tp987
sS'error'
p988
(S'\n__stdcall error()\n'
p989
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_00609198)();\u000a  return;\u000a}\u000a\u000a
p990
S'JMP qword ptr [0x00609198]\n'
p991
S'ff 25 c2 7a 20 00\n'
p992
S'.plt:00000000004016d0\n'
p993
tp994
sS'strcspn'
p995
(S'\n__stdcall strcspn(char * __s, char * __reject)\n'
p996
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strcspn(char *__s,char *__reject)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strcspn_006090e8)();\u000a  return sVar1;\u000a}\u000a\u000a
p997
S'JMP qword ptr [0x006090e8]\n'
p998
S'ff 25 72 7b 20 00\n'
p999
S'.plt:0000000000401570\n'
p1000
tp1001
sS'strcaseeq6'
p1002
(S'\n__stdcall strcaseeq6()\n'
p1003
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1004
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404ff0\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x004046c2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004046c9\nJMP 0x004046de\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004046de\nTEST BPL,BPL\nJZ 0x004046d9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004046f0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1005
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 41 09 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1006
S'.text:00000000004046a0\n.text:00000000004046a1\n.text:00000000004046a2\n.text:00000000004046a3\n.text:00000000004046a5\n.text:00000000004046a8\n.text:00000000004046aa\n.text:00000000004046af\n.text:00000000004046b3\n.text:00000000004046b5\n.text:00000000004046b7\n.text:00000000004046ba\n.text:00000000004046bc\n.text:00000000004046be\n.text:00000000004046c0\n.text:00000000004046c2\n.text:00000000004046c4\n.text:00000000004046c7\n.text:00000000004046c9\n.text:00000000004046cc\n.text:00000000004046ce\n.text:00000000004046d1\n.text:00000000004046d5\n.text:00000000004046d6\n.text:00000000004046d7\n.text:00000000004046d9\n.text:00000000004046de\n.text:00000000004046e2\n.text:00000000004046e3\n.text:00000000004046e4\n'
p1007
tp1008
sS'strcaseeq5'
p1009
(S'\n__stdcall strcaseeq5()\n'
p1010
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1011
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404ff0\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404676\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040467d\nJMP 0x00404694\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404694\nTEST BPL,BPL\nJZ 0x0040468f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004046a0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1012
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 8d 09 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1013
S'.text:0000000000404650\n.text:0000000000404651\n.text:0000000000404653\n.text:0000000000404654\n.text:0000000000404657\n.text:0000000000404659\n.text:000000000040465c\n.text:000000000040465e\n.text:0000000000404663\n.text:0000000000404667\n.text:0000000000404669\n.text:000000000040466b\n.text:000000000040466e\n.text:0000000000404670\n.text:0000000000404672\n.text:0000000000404674\n.text:0000000000404676\n.text:0000000000404678\n.text:000000000040467b\n.text:000000000040467d\n.text:0000000000404680\n.text:0000000000404682\n.text:0000000000404686\n.text:0000000000404689\n.text:000000000040468a\n.text:000000000040468c\n.text:000000000040468d\n.text:000000000040468f\n.text:0000000000404694\n.text:0000000000404695\n.text:0000000000404697\n.text:0000000000404698\n'
p1014
tp1015
sS'emit_ancillary_info'
p1016
(S'\n__stdcall emit_ancillary_info()\n'
p1017
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00405e90;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("seq",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "seq";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00405a47,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00405a47);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x4065d9;\u000a  if (__s2 == "seq") {\u000a    uVar3 = 0x405b87;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p1018
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x405e90\nMOV ESI,0x405b6b\nNOP\nMOV EDI,0x405a47\nCALL 0x004015e0\nTEST EAX,EAX\nJZ 0x00401a4b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401a30\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x405a47\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x405bca\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x405a6a\nMOV ECX,0x405be1\nXOR EAX,EAX\nCALL 0x004016b0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x004016a0\nTEST RAX,RAX\nJZ 0x00401ad4\nMOV ESI,0x405c08\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401420\nTEST EAX,EAX\nJZ 0x00401ad4\nXOR EDI,EDI\nMOV ESI,0x405c0c\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x405a47\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004016b0\nXOR EDI,EDI\nMOV ESI,0x405c51\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RSI,RAX\nMOV R14D,0x405a47\nMOV EDI,0x1\nMOV EDX,0x405be1\nMOV ECX,0x405a47\nXOR EAX,EAX\nCALL 0x004016b0\nXOR EDI,EDI\nMOV ESI,0x405c70\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x405b87\nMOV ECX,0x4065d9\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004016b0\n'
p1019
S'41 56\n53\n50\nbb 90 5e 40 00\nbe 6b 5b 40 00\n66 90\nbf 47 5a 40 00\ne8 a6 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 47 5a 40 00\n48 0f 45 d8\n31 ff\nbe ca 5b 40 00\nba 05 00 00 00\ne8 34 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba 6a 5a 40 00\nb9 e1 5b 40 00\n31 c0\ne8 2b fc ff ff\nbf 05 00 00 00\n31 f6\ne8 0f fc ff ff\n48 85 c0\n74 3e\nbe 08 5c 40 00\nba 03 00 00 00\n48 89 c7\ne8 78 f9 ff ff\n85 c0\n74 28\n31 ff\nbe 0c 5c 40 00\nba 05 00 00 00\ne8 e3 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 47 5a 40 00\n31 c0\n48 89 ce\ne8 dc fb ff ff\n31 ff\nbe 51 5c 40 00\nba 05 00 00 00\ne8 bb f9 ff ff\n48 89 c6\n41 be 47 5a 40 00\nbf 01 00 00 00\nba e1 5b 40 00\nb9 47 5a 40 00\n31 c0\ne8 ac fb ff ff\n31 ff\nbe 70 5c 40 00\nba 05 00 00 00\ne8 8b f9 ff ff\n48 89 c2\n4c 39 f3\nb8 87 5b 40 00\nb9 d9 65 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 6e fb ff ff\n'
p1020
S'.text:0000000000401a20\n.text:0000000000401a22\n.text:0000000000401a23\n.text:0000000000401a24\n.text:0000000000401a29\n.text:0000000000401a2e\n.text:0000000000401a30\n.text:0000000000401a35\n.text:0000000000401a3a\n.text:0000000000401a3c\n.text:0000000000401a3e\n.text:0000000000401a42\n.text:0000000000401a46\n.text:0000000000401a49\n.text:0000000000401a4b\n.text:0000000000401a4f\n.text:0000000000401a52\n.text:0000000000401a57\n.text:0000000000401a5b\n.text:0000000000401a5d\n.text:0000000000401a62\n.text:0000000000401a67\n.text:0000000000401a6c\n.text:0000000000401a6f\n.text:0000000000401a74\n.text:0000000000401a79\n.text:0000000000401a7e\n.text:0000000000401a80\n.text:0000000000401a85\n.text:0000000000401a8a\n.text:0000000000401a8c\n.text:0000000000401a91\n.text:0000000000401a94\n.text:0000000000401a96\n.text:0000000000401a9b\n.text:0000000000401aa0\n.text:0000000000401aa3\n.text:0000000000401aa8\n.text:0000000000401aaa\n.text:0000000000401aac\n.text:0000000000401aae\n.text:0000000000401ab3\n.text:0000000000401ab8\n.text:0000000000401abd\n.text:0000000000401ac0\n.text:0000000000401ac5\n.text:0000000000401aca\n.text:0000000000401acc\n.text:0000000000401acf\n.text:0000000000401ad4\n.text:0000000000401ad6\n.text:0000000000401adb\n.text:0000000000401ae0\n.text:0000000000401ae5\n.text:0000000000401ae8\n.text:0000000000401aee\n.text:0000000000401af3\n.text:0000000000401af8\n.text:0000000000401afd\n.text:0000000000401aff\n.text:0000000000401b04\n.text:0000000000401b06\n.text:0000000000401b0b\n.text:0000000000401b10\n.text:0000000000401b15\n.text:0000000000401b18\n.text:0000000000401b1b\n.text:0000000000401b20\n.text:0000000000401b25\n.text:0000000000401b29\n.text:0000000000401b2e\n.text:0000000000401b30\n.text:0000000000401b33\n.text:0000000000401b36\n.text:0000000000401b3a\n.text:0000000000401b3b\n.text:0000000000401b3d\n'
p1021
tp1022
sS'strcaseeq7'
p1023
(S'\n__stdcall strcaseeq7()\n'
p1024
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1025
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00404ff0\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404712\nTEST ECX,0xffffffdf\nJNZ 0x00404716\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040471a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1026
S'53\n48 89 fb\n31 ff\ne8 f5 08 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1027
S'.text:00000000004046f0\n.text:00000000004046f1\n.text:00000000004046f4\n.text:00000000004046f6\n.text:00000000004046fb\n.text:00000000004046ff\n.text:0000000000404701\n.text:0000000000404703\n.text:0000000000404709\n.text:000000000040470b\n.text:0000000000404710\n.text:0000000000404711\n.text:0000000000404712\n.text:0000000000404714\n.text:0000000000404716\n.text:0000000000404718\n.text:0000000000404719\n.text:000000000040471a\n.text:000000000040471f\n.text:0000000000404720\n'
p1028
tp1029
sS'version_etc_va'
p1030
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p1031
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p1032
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00404af0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00404afc\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404b11\nINC R9\nCMP R9,0xa\nJC 0x00404ad0\nMOV R8,RSP\nCALL 0x00404730\nADD RSP,0x58\nRET\n'
p1033
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p1034
S'.text:0000000000404ac0\n.text:0000000000404ac4\n.text:0000000000404ac7\n.text:0000000000404ad0\n.text:0000000000404ad3\n.text:0000000000404ad7\n.text:0000000000404ad9\n.text:0000000000404adc\n.text:0000000000404ae0\n.text:0000000000404ae4\n.text:0000000000404ae7\n.text:0000000000404af0\n.text:0000000000404af4\n.text:0000000000404af8\n.text:0000000000404afc\n.text:0000000000404aff\n.text:0000000000404b03\n.text:0000000000404b06\n.text:0000000000404b08\n.text:0000000000404b0b\n.text:0000000000404b0f\n.text:0000000000404b11\n.text:0000000000404b14\n.text:0000000000404b19\n.text:0000000000404b1d\n'
p1035
tp1036
sS'xzalloc'
p1037
(S'\n__stdcall xzalloc(size_t s)\n'
p1038
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p1039
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00404c50\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401530\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1040
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 d4 c7 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1041
S'.text:0000000000404d40\n.text:0000000000404d42\n.text:0000000000404d43\n.text:0000000000404d44\n.text:0000000000404d47\n.text:0000000000404d4c\n.text:0000000000404d4f\n.text:0000000000404d51\n.text:0000000000404d54\n.text:0000000000404d57\n.text:0000000000404d5c\n.text:0000000000404d5f\n.text:0000000000404d63\n.text:0000000000404d64\n.text:0000000000404d66\n'
p1042
tp1043
sS'emit_mandatory_arg_note'
p1044
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1045
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1046
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x405b20\nMOV EDX,0x5\nCALL 0x004014a0\nMOV RSI,qword ptr [0x00609288]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004015a0\n'
p1047
S'50\n31 ff\nbe 20 5b 40 00\nba 05 00 00 00\ne8 9e fa ff ff\n48 8b 35 7f 78 20 00\n48 89 c7\n58\ne9 8e fb ff ff\n'
p1048
S'.text:00000000004019f0\n.text:00000000004019f1\n.text:00000000004019f3\n.text:00000000004019f8\n.text:00000000004019fd\n.text:0000000000401a02\n.text:0000000000401a09\n.text:0000000000401a0c\n.text:0000000000401a0d\n'
p1049
tp1050
sS'strcaseeq0'
p1051
(S'\n__stdcall strcaseeq0()\n'
p1052
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1053
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404ff0\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404425\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040442c\nJMP 0x00404460\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404460\nTEST BPL,BPL\nJZ 0x0040445b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404470\nJMP 0x00404460\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1054
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 dd 0b 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1055
S'.text:00000000004043f0\n.text:00000000004043f1\n.text:00000000004043f3\n.text:00000000004043f5\n.text:00000000004043f7\n.text:00000000004043f9\n.text:00000000004043fa\n.text:00000000004043fb\n.text:00000000004043fe\n.text:0000000000404401\n.text:0000000000404404\n.text:0000000000404407\n.text:0000000000404409\n.text:000000000040440c\n.text:000000000040440e\n.text:0000000000404413\n.text:0000000000404416\n.text:0000000000404418\n.text:000000000040441a\n.text:000000000040441d\n.text:000000000040441f\n.text:0000000000404421\n.text:0000000000404423\n.text:0000000000404425\n.text:0000000000404427\n.text:000000000040442a\n.text:000000000040442c\n.text:000000000040442f\n.text:0000000000404431\n.text:0000000000404435\n.text:000000000040443a\n.text:000000000040443d\n.text:0000000000404441\n.text:0000000000404445\n.text:0000000000404449\n.text:000000000040444d\n.text:0000000000404451\n.text:0000000000404454\n.text:0000000000404459\n.text:000000000040445b\n.text:0000000000404460\n.text:0000000000404464\n.text:0000000000404465\n.text:0000000000404467\n.text:0000000000404469\n.text:000000000040446b\n.text:000000000040446d\n.text:000000000040446e\n'
p1056
tp1057
sS'strcaseeq2'
p1058
(S'\n__stdcall strcaseeq2()\n'
p1059
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1060
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404ff0\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404536\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040453d\nJMP 0x0040456a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040456a\nTEST BPL,BPL\nJZ 0x00404565\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404580\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1061
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 cd 0a 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1062
S'.text:0000000000404500\n.text:0000000000404501\n.text:0000000000404503\n.text:0000000000404505\n.text:0000000000404507\n.text:0000000000404509\n.text:000000000040450a\n.text:000000000040450b\n.text:000000000040450e\n.text:0000000000404511\n.text:0000000000404514\n.text:0000000000404517\n.text:0000000000404519\n.text:000000000040451c\n.text:000000000040451e\n.text:0000000000404523\n.text:0000000000404527\n.text:0000000000404529\n.text:000000000040452b\n.text:000000000040452e\n.text:0000000000404530\n.text:0000000000404532\n.text:0000000000404534\n.text:0000000000404536\n.text:0000000000404538\n.text:000000000040453b\n.text:000000000040453d\n.text:0000000000404540\n.text:0000000000404542\n.text:0000000000404546\n.text:000000000040454a\n.text:000000000040454e\n.text:0000000000404552\n.text:0000000000404555\n.text:0000000000404559\n.text:000000000040455a\n.text:000000000040455c\n.text:000000000040455e\n.text:0000000000404560\n.text:0000000000404562\n.text:0000000000404563\n.text:0000000000404565\n.text:000000000040456a\n.text:000000000040456e\n.text:000000000040456f\n.text:0000000000404571\n.text:0000000000404573\n.text:0000000000404575\n.text:0000000000404577\n.text:0000000000404578\n'
p1063
tp1064
sS'strcaseeq1'
p1065
(S'\n__stdcall strcaseeq1()\n'
p1066
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1067
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00404ff0\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x004044ad\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004044b4\nJMP 0x004044e7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004044e7\nTEST BPL,BPL\nJZ 0x004044e2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404500\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1068
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 56 0b 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1069
S'.text:0000000000404470\n.text:0000000000404471\n.text:0000000000404473\n.text:0000000000404475\n.text:0000000000404477\n.text:0000000000404479\n.text:000000000040447a\n.text:000000000040447b\n.text:0000000000404480\n.text:0000000000404483\n.text:0000000000404486\n.text:0000000000404489\n.text:000000000040448b\n.text:000000000040448e\n.text:0000000000404493\n.text:0000000000404495\n.text:000000000040449a\n.text:000000000040449e\n.text:00000000004044a0\n.text:00000000004044a2\n.text:00000000004044a5\n.text:00000000004044a7\n.text:00000000004044a9\n.text:00000000004044ab\n.text:00000000004044ad\n.text:00000000004044af\n.text:00000000004044b2\n.text:00000000004044b4\n.text:00000000004044b7\n.text:00000000004044b9\n.text:00000000004044bd\n.text:00000000004044c1\n.text:00000000004044c5\n.text:00000000004044cb\n.text:00000000004044cf\n.text:00000000004044d2\n.text:00000000004044d6\n.text:00000000004044d7\n.text:00000000004044d9\n.text:00000000004044db\n.text:00000000004044dd\n.text:00000000004044df\n.text:00000000004044e0\n.text:00000000004044e2\n.text:00000000004044e7\n.text:00000000004044eb\n.text:00000000004044ec\n.text:00000000004044ee\n.text:00000000004044f0\n.text:00000000004044f2\n.text:00000000004044f4\n.text:00000000004044f5\n'
p1070
tp1071
sS'strcaseeq4'
p1072
(S'\n__stdcall strcaseeq4()\n'
p1073
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1074
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404ff0\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040461c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404623\nJMP 0x00404644\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404644\nTEST BPL,BPL\nJZ 0x0040463f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404650\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1075
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 e7 09 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1076
S'.text:00000000004045f0\n.text:00000000004045f1\n.text:00000000004045f3\n.text:00000000004045f5\n.text:00000000004045f6\n.text:00000000004045f7\n.text:00000000004045fa\n.text:00000000004045fd\n.text:00000000004045ff\n.text:0000000000404602\n.text:0000000000404604\n.text:0000000000404609\n.text:000000000040460d\n.text:000000000040460f\n.text:0000000000404611\n.text:0000000000404614\n.text:0000000000404616\n.text:0000000000404618\n.text:000000000040461a\n.text:000000000040461c\n.text:000000000040461e\n.text:0000000000404621\n.text:0000000000404623\n.text:0000000000404626\n.text:0000000000404628\n.text:000000000040462c\n.text:0000000000404630\n.text:0000000000404633\n.text:0000000000404637\n.text:0000000000404638\n.text:000000000040463a\n.text:000000000040463c\n.text:000000000040463d\n.text:000000000040463f\n.text:0000000000404644\n.text:0000000000404648\n.text:0000000000404649\n.text:000000000040464b\n.text:000000000040464d\n.text:000000000040464e\n'
p1077
tp1078
sS'strcaseeq3'
p1079
(S'\n__stdcall strcaseeq3()\n'
p1080
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1081
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404ff0\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x004045b0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004045b7\nJMP 0x004045da\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004045da\nTEST BPL,BPL\nJZ 0x004045d5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004045f0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1082
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 53 0a 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1083
S'.text:0000000000404580\n.text:0000000000404581\n.text:0000000000404583\n.text:0000000000404585\n.text:0000000000404587\n.text:0000000000404588\n.text:000000000040458b\n.text:000000000040458e\n.text:0000000000404591\n.text:0000000000404593\n.text:0000000000404596\n.text:0000000000404598\n.text:000000000040459d\n.text:00000000004045a1\n.text:00000000004045a3\n.text:00000000004045a5\n.text:00000000004045a8\n.text:00000000004045aa\n.text:00000000004045ac\n.text:00000000004045ae\n.text:00000000004045b0\n.text:00000000004045b2\n.text:00000000004045b5\n.text:00000000004045b7\n.text:00000000004045ba\n.text:00000000004045bc\n.text:00000000004045c0\n.text:00000000004045c4\n.text:00000000004045c8\n.text:00000000004045cb\n.text:00000000004045cc\n.text:00000000004045ce\n.text:00000000004045d0\n.text:00000000004045d2\n.text:00000000004045d3\n.text:00000000004045d5\n.text:00000000004045da\n.text:00000000004045db\n.text:00000000004045dd\n.text:00000000004045df\n.text:00000000004045e1\n.text:00000000004045e2\n'
p1084
tp1085
sS'register_tm_clones'
p1086
(S'\n__stdcall register_tm_clones()\n'
p1087
V\u000a/* WARNING: Removing unreachable block (ram,0x00401823) */\u000a/* WARNING: Removing unreachable block (ram,0x0040182d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1088
S'MOV ESI,0x609270\nPUSH RBP\nSUB RSI,0x609270\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401838\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401838\nPOP RBP\nMOV EDI,0x609270\nJMP RAX\nPOP RBP\nRET\n'
p1089
S'be 70 92 60 00\n55\n48 81 ee 70 92 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 70 92 60 00\nff e0\n5d\nc3\n'
p1090
S'.text:0000000000401800\n.text:0000000000401805\n.text:0000000000401806\n.text:000000000040180d\n.text:0000000000401811\n.text:0000000000401814\n.text:0000000000401817\n.text:000000000040181b\n.text:000000000040181e\n.text:0000000000401821\n.text:0000000000401823\n.text:0000000000401828\n.text:000000000040182b\n.text:000000000040182d\n.text:000000000040182e\n.text:0000000000401833\n.text:0000000000401838\n.text:0000000000401839\n'
p1091
tp1092
sS'gettext_quote'
p1093
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1094
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_004064a0;\u000a        pcVar2 = &DAT_004064a4;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1095
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004014a0\nCMP RAX,RBX\nJNZ 0x004043e8\nCALL 0x004050b0\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x004043f0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404398\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406490\nMOV EAX,0x406494\nJMP 0x004043e4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x004043f0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004043d6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x4064a0\nMOV EAX,0x4064a4\nJMP 0x004043e4\nCMP R14D,0x9\nMOV ECX,0x406486\nMOV EAX,0x405cf0\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1096
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 57 d1 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 59 0d 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 90 64 40 00\nb8 94 64 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 a0 64 40 00\nb8 a4 64 40 00\neb 0e\n41 83 fe 09\nb9 86 64 40 00\nb8 f0 5c 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1097
S'.text:0000000000404330\n.text:0000000000404331\n.text:0000000000404333\n.text:0000000000404334\n.text:0000000000404337\n.text:000000000040433a\n.text:000000000040433c\n.text:0000000000404341\n.text:0000000000404344\n.text:0000000000404349\n.text:000000000040434c\n.text:0000000000404352\n.text:0000000000404357\n.text:000000000040435a\n.text:000000000040435f\n.text:0000000000404364\n.text:0000000000404369\n.text:000000000040436f\n.text:0000000000404375\n.text:0000000000404378\n.text:000000000040437a\n.text:000000000040437c\n.text:0000000000404381\n.text:0000000000404385\n.text:0000000000404387\n.text:0000000000404389\n.text:000000000040438c\n.text:0000000000404391\n.text:0000000000404396\n.text:0000000000404398\n.text:000000000040439d\n.text:00000000004043a2\n.text:00000000004043a7\n.text:00000000004043ad\n.text:00000000004043b3\n.text:00000000004043b6\n.text:00000000004043b8\n.text:00000000004043ba\n.text:00000000004043bf\n.text:00000000004043c3\n.text:00000000004043c5\n.text:00000000004043c7\n.text:00000000004043ca\n.text:00000000004043cf\n.text:00000000004043d4\n.text:00000000004043d6\n.text:00000000004043da\n.text:00000000004043df\n.text:00000000004043e4\n.text:00000000004043e8\n.text:00000000004043e9\n.text:00000000004043eb\n.text:00000000004043ec\n'
p1098
tp1099
sS'c_islower'
p1100
(S'\n__stdcall c_islower()\n'
p1101
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1102
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1103
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1104
S'.text:0000000000404f90\n.text:0000000000404f93\n.text:0000000000404f96\n.text:0000000000404f99\n'
p1105
tp1106
sS'fclose'
p1107
(S'\n__stdcall fclose(FILE * __stream)\n'
p1108
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00609070)();\u000a  return iVar1;\u000a}\u000a\u000a
p1109
S'JMP qword ptr [0x00609070]\n'
p1110
S'ff 25 ea 7b 20 00\n'
p1111
S'.plt:0000000000401480\n'
p1112
tp1113
sS'__ctype_get_mb_cur_max'
p1114
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1115
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_00609088)();\u000a  return sVar1;\u000a}\u000a\u000a
p1116
S'JMP qword ptr [0x00609088]\n'
p1117
S'ff 25 d2 7b 20 00\n'
p1118
S'.plt:00000000004014b0\n'
p1119
tp1120
sS'quotearg_n_style'
p1121
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1122
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1123
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00404060\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00403e30\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1124
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1125
S'.text:0000000000404020\n.text:0000000000404021\n.text:0000000000404023\n.text:0000000000404024\n.text:0000000000404028\n.text:000000000040402b\n.text:000000000040402d\n.text:0000000000404032\n.text:0000000000404035\n.text:000000000040403a\n.text:0000000000404041\n.text:0000000000404043\n.text:0000000000404046\n.text:0000000000404049\n.text:000000000040404e\n.text:0000000000404052\n.text:0000000000404053\n.text:0000000000404055\n.text:0000000000404056\n'
p1126
tp1127
sS'fwrite'
p1128
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1129
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_006091c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1130
S'JMP qword ptr [0x006091c0]\n'
p1131
S'ff 25 9a 7a 20 00\n'
p1132
S'.plt:0000000000401720\n'
p1133
tp1134
sS'c_strtold'
p1135
(S'\n__stdcall c_strtold(char * nptr, char * * endptr)\n'
p1136
V\u000alongdouble c_strtold(char *nptr,char **endptr)\u000a\u000a{\u000a  locale_t p_Var1;\u000a  undefined auVar2 [16];\u000a  undefined extraout_XMM0 [16];\u000a  \u000a  p_Var1 = c_locale();\u000a  if (p_Var1 != (locale_t)0x0) {\u000a    auVar2 = (*(code *)PTR_strtold_l_006091d0)(nptr,endptr,p_Var1);\u000a    return (longdouble)auVar2;\u000a  }\u000a  if (endptr != (char **)0x0) {\u000a    *endptr = nptr;\u000a  }\u000a  return (longdouble)extraout_XMM0;\u000a}\u000a\u000a
p1137
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x00402d20\nTEST RAX,RAX\nJZ 0x00402d09\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,RAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401740\nTEST RBX,RBX\nJZ 0x00402d11\nMOV qword ptr [RBX],R14\nFLDZ\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1138
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 31 00 00 00\n48 85 c0\n74 15\n4c 89 f7\n48 89 de\n48 89 c2\n48 83 c4 08\n5b\n41 5e\ne9 37 ea ff ff\n48 85 db\n74 03\n4c 89 33\nd9 ee\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1139
S'.text:0000000000402ce0\n.text:0000000000402ce2\n.text:0000000000402ce3\n.text:0000000000402ce4\n.text:0000000000402ce7\n.text:0000000000402cea\n.text:0000000000402cef\n.text:0000000000402cf2\n.text:0000000000402cf4\n.text:0000000000402cf7\n.text:0000000000402cfa\n.text:0000000000402cfd\n.text:0000000000402d01\n.text:0000000000402d02\n.text:0000000000402d04\n.text:0000000000402d09\n.text:0000000000402d0c\n.text:0000000000402d0e\n.text:0000000000402d11\n.text:0000000000402d13\n.text:0000000000402d17\n.text:0000000000402d18\n.text:0000000000402d1a\n'
p1140
tp1141
sS'quote_n'
p1142
(S'\n__stdcall quote_n(char * arg)\n'
p1143
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1144
S'MOV RDX,-0x1\nJMP 0x004042f0\n'
p1145
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1146
S'.text:0000000000404310\n.text:0000000000404317\n'
p1147
tp1148
sS'quotearg_alloc'
p1149
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1150
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1151
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00403ca0\n'
p1152
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1153
S'.text:0000000000403c90\n.text:0000000000403c93\n.text:0000000000403c95\n.text:0000000000403c98\n'
p1154
tp1155
sS'__do_global_dtors_aux'
p1156
(S'\n__stdcall __do_global_dtors_aux()\n'
p1157
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1158
S'CMP byte ptr [0x006092c8],0x0\nJNZ 0x0040185a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x004017c0\nPOP RBP\nMOV byte ptr [0x006092c8],0x1\nRET\n'
p1159
S'80 3d 81 7a 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 6e 7a 20 00 01\nf3 c3\n'
p1160
S'.text:0000000000401840\n.text:0000000000401847\n.text:0000000000401849\n.text:000000000040184a\n.text:000000000040184d\n.text:0000000000401852\n.text:0000000000401853\n.text:000000000040185a\n'
p1161
tp1162
sS'close_stdout_set_file_name'
p1163
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1164
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1165
S'MOV qword ptr [0x00609308],RDI\nRET\n'
p1166
S'48 89 3d b1 65 20 00\nc3\n'
p1167
S'.text:0000000000402d50\n.text:0000000000402d57\n'
p1168
tp1169
sS'c_isprint'
p1170
(S'\n__stdcall c_isprint()\n'
p1171
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1172
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1173
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1174
S'.text:0000000000404fa0\n.text:0000000000404fa3\n.text:0000000000404fa6\n.text:0000000000404fa9\n'
p1175
tp1176
sS'_fini'
p1177
(S'\n__stdcall _fini()\n'
p1178
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1179
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1180
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1181
S'.fini:00000000004055cc\n.fini:00000000004055d0\n.fini:00000000004055d4\n'
p1182
tp1183
sS'get_default_format'
p1184
(S'\n__stdcall get_default_format(operand first, operand step, operand last)\n'
p1185
V\u000achar * get_default_format(operand first,operand step,operand last)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  char format_buf [28];\u000a  operand *poVar3;\u000a  ulong uVar4;\u000a  ulong uVar5;\u000a  \u000a  poVar3 = &step;\u000a  if (step.precision < first.precision) {\u000a    poVar3 = &first;\u000a  }\u000a  uVar1 = poVar3->precision;\u000a  if ((uVar1 != 0x7fffffff) && (last.precision != 0x7fffffff)) {\u000a    if (equal_width != 1) {\u000a      __sprintf_chk(0x6092e0,1,0x1c,"%%.%dLf",(ulong)uVar1);\u000a      return (char *)0x6092e0;\u000a    }\u000a    bVar2 = uVar1 != 0;\u000a    uVar4 = ((long)(int)(uVar1 - last.precision) - (ulong)(last.precision != 0 && uVar1 == 0)) +\u000a            (ulong)(last.precision == 0 && bVar2) + last.width;\u000a    uVar5 = (ulong)(first.precision == 0 && bVar2) + (long)(int)(uVar1 - first.precision) +\u000a            first.width;\u000a    if (uVar5 <= uVar4) {\u000a      uVar5 = uVar4;\u000a    }\u000a    if (uVar5 < 0x80000000) {\u000a      __sprintf_chk((char *)&ram0x006092e0,1,0x1c,"%%0%d.%dLf");\u000a      return (char *)0x6092e0;\u000a    }\u000a  }\u000a  return "%Lg";\u000a}\u000a\u000a
p1186
S'PUSH R14\nPUSH RBX\nPUSH RAX\nLEA R14,[RSP + 0x20]\nMOV ECX,dword ptr [RSP + 0x38]\nCMP ECX,dword ptr [RSP + 0x58]\nLEA RDX,[RSP + 0x40]\nCMOVG RDX,R14\nMOV R9D,dword ptr [RDX + 0x18]\nCMP R9D,0x7fffffff\nJZ 0x00402938\nLEA R11,[RSP + 0x60]\nMOV ESI,dword ptr [R11 + 0x18]\nCMP ESI,0x7fffffff\nJNZ 0x00402948\nMOV EBX,0x405da2\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nCMP byte ptr [0x006092d0],0x1\nJNZ 0x004029d6\nMOV EDI,R9D\nSUB EDI,ECX\nMOVSXD RDI,EDI\nMOV EBX,R9D\nSUB EBX,ESI\nMOVSXD RBX,EBX\nTEST R9D,R9D\nSETZ R8B\nSETNZ R10B\nTEST ESI,ESI\nSETNZ DL\nSETZ AL\nAND DL,R8B\nAND AL,R10B\nMOVZX EAX,AL\nMOVZX EDX,DL\nSUB RBX,RDX\nADD RBX,RAX\nADD RBX,qword ptr [R11 + 0x10]\nTEST ECX,ECX\nSETZ AL\nAND AL,R10B\nMOVZX R8D,AL\nADD R8,RDI\nADD R8,qword ptr [R14 + 0x10]\nCMP R8,RBX\nCMOVBE R8,RBX\nCMP R8,0x7fffffff\nJA 0x00402938\nMOV EBX,0x6092e0\nMOV EDI,0x6092e0\nMOV ESI,0x1\nMOV EDX,0x1c\nMOV ECX,0x405d8f\nXOR EAX,EAX\nCALL 0x00401780\nJMP 0x0040293d\nMOV EBX,0x6092e0\nMOV EDI,0x6092e0\nMOV ESI,0x1\nMOV EDX,0x1c\nMOV ECX,0x405d9a\nXOR EAX,EAX\nMOV R8D,R9D\nCALL 0x00401780\nJMP 0x0040293d\n'
p1187
S'41 56\n53\n50\n4c 8d 74 24 20\n8b 4c 24 38\n3b 4c 24 58\n48 8d 54 24 40\n49 0f 4f d6\n44 8b 4a 18\n41 81 f9 ff ff ff 7f\n74 11\n4c 8d 5c 24 60\n41 8b 73 18\n81 fe ff ff ff 7f\n75 10\nbb a2 5d 40 00\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n80 3d 81 69 20 00 01\n0f 85 81 00 00 00\n44 89 cf\n29 cf\n48 63 ff\n44 89 cb\n29 f3\n48 63 db\n45 85 c9\n41 0f 94 c0\n41 0f 95 c2\n85 f6\n0f 95 c2\n0f 94 c0\n44 20 c2\n44 20 d0\n0f b6 c0\n0f b6 d2\n48 29 d3\n48 01 c3\n49 03 5b 10\n85 c9\n0f 94 c0\n44 20 d0\n44 0f b6 c0\n49 01 f8\n4d 03 46 10\n49 39 d8\n4c 0f 46 c3\n49 81 f8 ff ff ff 7f\n77 87\nbb e0 92 60 00\nbf e0 92 60 00\nbe 01 00 00 00\nba 1c 00 00 00\nb9 8f 5d 40 00\n31 c0\ne8 af ed ff ff\ne9 67 ff ff ff\nbb e0 92 60 00\nbf e0 92 60 00\nbe 01 00 00 00\nba 1c 00 00 00\nb9 9a 5d 40 00\n31 c0\n45 89 c8\ne8 87 ed ff ff\ne9 3f ff ff ff\n'
p1188
S'.text:0000000000402900\n.text:0000000000402902\n.text:0000000000402903\n.text:0000000000402904\n.text:0000000000402909\n.text:000000000040290d\n.text:0000000000402911\n.text:0000000000402916\n.text:000000000040291a\n.text:000000000040291e\n.text:0000000000402925\n.text:0000000000402927\n.text:000000000040292c\n.text:0000000000402930\n.text:0000000000402936\n.text:0000000000402938\n.text:000000000040293d\n.text:0000000000402940\n.text:0000000000402944\n.text:0000000000402945\n.text:0000000000402947\n.text:0000000000402948\n.text:000000000040294f\n.text:0000000000402955\n.text:0000000000402958\n.text:000000000040295a\n.text:000000000040295d\n.text:0000000000402960\n.text:0000000000402962\n.text:0000000000402965\n.text:0000000000402968\n.text:000000000040296c\n.text:0000000000402970\n.text:0000000000402972\n.text:0000000000402975\n.text:0000000000402978\n.text:000000000040297b\n.text:000000000040297e\n.text:0000000000402981\n.text:0000000000402984\n.text:0000000000402987\n.text:000000000040298a\n.text:000000000040298e\n.text:0000000000402990\n.text:0000000000402993\n.text:0000000000402996\n.text:000000000040299a\n.text:000000000040299d\n.text:00000000004029a1\n.text:00000000004029a4\n.text:00000000004029a8\n.text:00000000004029af\n.text:00000000004029b1\n.text:00000000004029b6\n.text:00000000004029bb\n.text:00000000004029c0\n.text:00000000004029c5\n.text:00000000004029ca\n.text:00000000004029cc\n.text:00000000004029d1\n.text:00000000004029d6\n.text:00000000004029db\n.text:00000000004029e0\n.text:00000000004029e5\n.text:00000000004029ea\n.text:00000000004029ef\n.text:00000000004029f1\n.text:00000000004029f4\n.text:00000000004029f9\n'
p1189
tp1190
sS'__fpending'
p1191
(S'\n__stdcall __fpending()\n'
p1192
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00609058)();\u000a  return;\u000a}\u000a\u000a
p1193
S'JMP qword ptr [0x00609058]\n'
p1194
S'ff 25 02 7c 20 00\n'
p1195
S'.plt:0000000000401450\n'
p1196
tp1197
s.