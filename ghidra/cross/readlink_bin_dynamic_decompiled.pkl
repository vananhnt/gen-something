(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060a150)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0060a150]\n'
p4
S'ff 25 5a 8c 20 00\n'
p5
S'.plt:00000000004014f0\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_00407013,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x4050a7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x405128;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x4051bc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00404f38\nMOV EDX,0x407000\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x004015c0\nJMP 0x00404f4d\nMOV EDX,0x40700c\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x407013\nMOV EDX,0x5\nCALL 0x00401350\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4072e0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x407017\nMOV EDX,0x5\nCALL 0x00401350\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401430\nCMP R12,0x9\nJA 0x00404fd6\nJMP qword ptr [0x406fb0 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x4070e2\nMOV EDX,0x5\nCALL 0x00401350\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x407221\nMOV EDX,0x5\nCALL 0x00401350\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015c0\nADD RSP,0x38\nJMP 0x00405247\nXOR EDI,EDI\nMOV ESI,0x4070f2\nMOV EDX,0x5\nCALL 0x00401350\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x407109\nMOV EDX,0x5\nCALL 0x00401350\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x407125\nMOV EDX,0x5\nCALL 0x00401350\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015c0\nADD RSP,0x18\nJMP 0x00405247\nXOR EDI,EDI\nMOV ESI,0x407145\nMOV EDX,0x5\nCALL 0x00401350\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015c0\nADD RSP,0x18\nJMP 0x00405247\nXOR EDI,EDI\nMOV ESI,0x407169\nMOV EDX,0x5\nCALL 0x00401350\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015c0\nADD RSP,0x28\nJMP 0x00405247\nXOR EDI,EDI\nMOV ESI,0x407191\nMOV EDX,0x5\nCALL 0x00401350\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015c0\nADD RSP,0x28\nJMP 0x00405247\nXOR EDI,EDI\nMOV ESI,0x4071bd\nMOV EDX,0x5\nCALL 0x00401350\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015c0\nADD RSP,0x38\nJMP 0x00405247\nXOR EDI,EDI\nMOV ESI,0x4071ed\nMOV EDX,0x5\nCALL 0x00401350\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004015c0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x004012a0\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 00 70 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 8a c6 ff ff\neb 15\nba 0c 70 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 73 c6 ff ff\n31 ff\nbe 13 70 40 00\nba 05 00 00 00\ne8 f2 c3 ff ff\n48 89 c1\nbe 01 00 00 00\nba e0 72 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 45 c6 ff ff\n31 ff\nbe 17 70 40 00\nba 05 00 00 00\ne8 c4 c3 ff ff\n48 89 c7\n4c 89 f6\ne8 99 c4 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 b0 6f 40 00\n31 ff\nbe e2 70 40 00\nba 05 00 00 00\ne8 9a c3 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 ea c5 ff ff\n31 ff\nbe 21 72 40 00\nba 05 00 00 00\ne8 69 c3 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 a1 c5 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe f2 70 40 00\nba 05 00 00 00\ne8 17 c3 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 63 c5 ff ff\n31 ff\nbe 09 71 40 00\nba 05 00 00 00\ne8 e2 c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 2a c5 ff ff\n31 ff\nbe 25 71 40 00\nba 05 00 00 00\ne8 a9 c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 f4 c4 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 45 71 40 00\nba 05 00 00 00\ne8 6a c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 b2 c4 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 69 71 40 00\nba 05 00 00 00\ne8 28 c2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 68 c4 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 91 71 40 00\nba 05 00 00 00\ne8 de c1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 1e c4 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe bd 71 40 00\nba 05 00 00 00\ne8 94 c1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 cc c3 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe ed 71 40 00\nba 05 00 00 00\ne8 45 c1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 7d c3 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 4c c0 ff ff\n'
p12
S'.text:0000000000404f00\n.text:0000000000404f02\n.text:0000000000404f04\n.text:0000000000404f06\n.text:0000000000404f07\n.text:0000000000404f08\n.text:0000000000404f0b\n.text:0000000000404f0e\n.text:0000000000404f11\n.text:0000000000404f14\n.text:0000000000404f17\n.text:0000000000404f1a\n.text:0000000000404f1f\n.text:0000000000404f22\n.text:0000000000404f24\n.text:0000000000404f29\n.text:0000000000404f2b\n.text:0000000000404f2e\n.text:0000000000404f31\n.text:0000000000404f36\n.text:0000000000404f38\n.text:0000000000404f3d\n.text:0000000000404f3f\n.text:0000000000404f42\n.text:0000000000404f45\n.text:0000000000404f48\n.text:0000000000404f4d\n.text:0000000000404f4f\n.text:0000000000404f54\n.text:0000000000404f59\n.text:0000000000404f5e\n.text:0000000000404f61\n.text:0000000000404f66\n.text:0000000000404f6b\n.text:0000000000404f71\n.text:0000000000404f73\n.text:0000000000404f76\n.text:0000000000404f7b\n.text:0000000000404f7d\n.text:0000000000404f82\n.text:0000000000404f87\n.text:0000000000404f8c\n.text:0000000000404f8f\n.text:0000000000404f92\n.text:0000000000404f97\n.text:0000000000404f9b\n.text:0000000000404f9d\n.text:0000000000404fa5\n.text:0000000000404fa7\n.text:0000000000404fac\n.text:0000000000404fb1\n.text:0000000000404fb6\n.text:0000000000404fb9\n.text:0000000000404fbc\n.text:0000000000404fc1\n.text:0000000000404fc3\n.text:0000000000404fc6\n.text:0000000000404fca\n.text:0000000000404fcb\n.text:0000000000404fcd\n.text:0000000000404fcf\n.text:0000000000404fd1\n.text:0000000000404fd6\n.text:0000000000404fd8\n.text:0000000000404fdd\n.text:0000000000404fe2\n.text:0000000000404fe7\n.text:0000000000404fea\n.text:0000000000404fed\n.text:0000000000404ff1\n.text:0000000000404ff5\n.text:0000000000404ffa\n.text:0000000000404fff\n.text:0000000000405002\n.text:0000000000405006\n.text:000000000040500a\n.text:000000000040500e\n.text:0000000000405012\n.text:0000000000405016\n.text:000000000040501a\n.text:000000000040501f\n.text:0000000000405023\n.text:0000000000405028\n.text:000000000040502a\n.text:000000000040502f\n.text:0000000000405034\n.text:0000000000405039\n.text:000000000040503c\n.text:000000000040503f\n.text:0000000000405043\n.text:0000000000405048\n.text:000000000040504a\n.text:000000000040504d\n.text:0000000000405051\n.text:0000000000405052\n.text:0000000000405054\n.text:0000000000405056\n.text:0000000000405058\n.text:000000000040505d\n.text:000000000040505f\n.text:0000000000405064\n.text:0000000000405069\n.text:000000000040506e\n.text:0000000000405071\n.text:0000000000405074\n.text:0000000000405078\n.text:000000000040507c\n.text:0000000000405081\n.text:0000000000405083\n.text:0000000000405086\n.text:000000000040508a\n.text:000000000040508b\n.text:000000000040508d\n.text:000000000040508f\n.text:0000000000405091\n.text:0000000000405096\n.text:0000000000405098\n.text:000000000040509d\n.text:00000000004050a2\n.text:00000000004050a7\n.text:00000000004050aa\n.text:00000000004050ad\n.text:00000000004050b1\n.text:00000000004050b5\n.text:00000000004050b9\n.text:00000000004050be\n.text:00000000004050c0\n.text:00000000004050c3\n.text:00000000004050c7\n.text:00000000004050cc\n.text:00000000004050d0\n.text:00000000004050d5\n.text:00000000004050d7\n.text:00000000004050dc\n.text:00000000004050e1\n.text:00000000004050e6\n.text:00000000004050e9\n.text:00000000004050ec\n.text:00000000004050f0\n.text:00000000004050f4\n.text:00000000004050f9\n.text:00000000004050fe\n.text:0000000000405101\n.text:0000000000405105\n.text:0000000000405109\n.text:000000000040510e\n.text:0000000000405112\n.text:0000000000405117\n.text:0000000000405119\n.text:000000000040511e\n.text:0000000000405123\n.text:0000000000405128\n.text:000000000040512b\n.text:000000000040512e\n.text:0000000000405132\n.text:0000000000405136\n.text:000000000040513a\n.text:000000000040513f\n.text:0000000000405144\n.text:0000000000405147\n.text:000000000040514b\n.text:000000000040514f\n.text:0000000000405153\n.text:0000000000405158\n.text:000000000040515c\n.text:0000000000405161\n.text:0000000000405163\n.text:0000000000405168\n.text:000000000040516d\n.text:0000000000405172\n.text:0000000000405175\n.text:0000000000405178\n.text:000000000040517c\n.text:0000000000405180\n.text:0000000000405185\n.text:000000000040518a\n.text:000000000040518d\n.text:0000000000405191\n.text:0000000000405195\n.text:0000000000405199\n.text:000000000040519d\n.text:00000000004051a2\n.text:00000000004051a6\n.text:00000000004051ab\n.text:00000000004051ad\n.text:00000000004051b2\n.text:00000000004051b7\n.text:00000000004051bc\n.text:00000000004051bf\n.text:00000000004051c2\n.text:00000000004051c6\n.text:00000000004051ca\n.text:00000000004051ce\n.text:00000000004051d3\n.text:00000000004051d8\n.text:00000000004051db\n.text:00000000004051df\n.text:00000000004051e3\n.text:00000000004051e7\n.text:00000000004051eb\n.text:00000000004051ef\n.text:00000000004051f4\n.text:00000000004051f8\n.text:00000000004051fa\n.text:00000000004051fc\n.text:0000000000405201\n.text:0000000000405206\n.text:000000000040520b\n.text:000000000040520e\n.text:0000000000405211\n.text:0000000000405215\n.text:0000000000405219\n.text:000000000040521e\n.text:0000000000405223\n.text:0000000000405226\n.text:000000000040522a\n.text:000000000040522e\n.text:0000000000405232\n.text:0000000000405236\n.text:000000000040523a\n.text:000000000040523e\n.text:0000000000405243\n.text:0000000000405247\n.text:0000000000405248\n.text:000000000040524a\n.text:000000000040524c\n.text:000000000040524e\n.text:000000000040524f\n'
p13
tp14
sS'transfer_entries'
p15
(S'\n__stdcall transfer_entries(Hash_table * dst, Hash_table * src)\n'
p16
V\u000a_Bool transfer_entries(Hash_table *dst,Hash_table *src)\u000a\u000a{\u000a  void *key;\u000a  hash_entry *phVar1;\u000a  hash_entry *entry;\u000a  hash_entry *phVar2;\u000a  char in_DL;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = src->bucket;\u000a  if (phVar3 < src->bucket_limit) {\u000a    do {\u000a      if (phVar3->data != (void *)0x0) {\u000a        entry = phVar3->next;\u000a        while (entry != (hash_entry *)0x0) {\u000a          key = entry->data;\u000a          phVar1 = safe_hasher(dst,key);\u000a          phVar2 = entry->next;\u000a          if (phVar1->data == (void *)0x0) {\u000a            phVar1->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a            free_entry(dst,entry);\u000a            entry = phVar2;\u000a          }\u000a          else {\u000a            entry->next = phVar1->next;\u000a            phVar1->next = entry;\u000a            entry = phVar2;\u000a          }\u000a        }\u000a        key = phVar3->data;\u000a        phVar3->next = (hash_entry *)0x0;\u000a        if (in_DL == 0) {\u000a          entry = safe_hasher(dst,key);\u000a          if (entry->data == (void *)0x0) {\u000a            entry->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a          }\u000a          else {\u000a            phVar2 = allocate_entry(dst);\u000a            if (phVar2 == (hash_entry *)0x0) {\u000a              return false;\u000a            }\u000a            phVar2->data = key;\u000a            phVar2->next = entry->next;\u000a            entry->next = phVar2;\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          src->n_buckets_used = src->n_buckets_used - 1;\u000a        }\u000a      }\u000a      phVar3 = phVar3 + 1;\u000a    } while (phVar3 < src->bucket_limit);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p17
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBP]\nMOV AL,0x1\nCMP R15,qword ptr [RBP + 0x8]\nJNC 0x00402e92\nMOV qword ptr [RSP],RBP\nNOP dword ptr [RAX + RAX*0x1]\nCMP qword ptr [R15],0x0\nJZ 0x00402e82\nMOV RBX,qword ptr [R15 + 0x8]\nTEST RBX,RBX\nJZ 0x00402e2a\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R13,qword ptr [RBX]\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x004026a0\nMOV RBP,qword ptr [RBX + 0x8]\nCMP qword ptr [RAX],0x0\nJZ 0x00402e10\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RBX + 0x8],RCX\nMOV qword ptr [RAX + 0x8],RBX\nJMP 0x00402e22\nMOV qword ptr [RAX],R13\nINC qword ptr [R14 + 0x18]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00403410\nTEST RBP,RBP\nMOV RBX,RBP\nJNZ 0x00402de0\nMOV R13,qword ptr [R15]\nMOV qword ptr [R15 + 0x8],0x0\nTEST R12B,R12B\nMOV RBP,qword ptr [RSP]\nJNZ 0x00402e82\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x004026a0\nMOV RBX,RAX\nCMP qword ptr [RBX],0x0\nJZ 0x00402e70\nMOV RDI,R14\nCALL 0x00403150\nTEST RAX,RAX\nJZ 0x00402ea1\nMOV qword ptr [RAX],R13\nMOV RCX,qword ptr [RBX + 0x8]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x00402e77\nMOV qword ptr [RBX],R13\nINC qword ptr [R14 + 0x18]\nMOV qword ptr [R15],0x0\nDEC qword ptr [RBP + 0x18]\nADD R15,0x10\nCMP R15,qword ptr [RBP + 0x8]\nJC 0x00402dc0\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x00402e92\n'
p18
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 d4\n48 89 f5\n49 89 fe\n4c 8b 7d 00\nb0 01\n4c 3b 7d 08\n0f 83 de 00 00 00\n48 89 2c 24\n0f 1f 84 00 00 00 00 00\n49 83 3f 00\n0f 84 b8 00 00 00\n49 8b 5f 08\n48 85 db\n74 57\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 8b 2b\n4c 89 f7\n4c 89 ee\ne8 b2 f8 ff ff\n48 8b 6b 08\n48 83 38 00\n74 18\n48 8b 48 08\n48 89 4b 08\n48 89 58 08\neb 1c\n4c 89 28\n49 ff 46 18\n4c 89 f7\n48 89 de\ne8 ee 05 00 00\n48 85 ed\n48 89 eb\n75 b6\n4d 8b 2f\n49 c7 47 08 00 00 00 00\n45 84 e4\n48 8b 2c 24\n75 44\n4c 89 f7\n4c 89 ee\ne8 57 f8 ff ff\n48 89 c3\n48 83 3b 00\n74 1e\n4c 89 f7\ne8 f6 02 00 00\n48 85 c0\n74 42\n4c 89 28\n48 8b 4b 08\n48 89 48 08\n48 89 43 08\neb 07\n4c 89 2b\n49 ff 46 18\n49 c7 07 00 00 00 00\n48 ff 4d 18\n49 83 c7 10\n4c 3b 7d 08\n0f 82 30 ff ff ff\nb0 01\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 c0\neb ed\n'
p19
S'.text:0000000000402d90\n.text:0000000000402d91\n.text:0000000000402d93\n.text:0000000000402d95\n.text:0000000000402d97\n.text:0000000000402d99\n.text:0000000000402d9a\n.text:0000000000402d9b\n.text:0000000000402d9e\n.text:0000000000402da1\n.text:0000000000402da4\n.text:0000000000402da8\n.text:0000000000402daa\n.text:0000000000402dae\n.text:0000000000402db4\n.text:0000000000402db8\n.text:0000000000402dc0\n.text:0000000000402dc4\n.text:0000000000402dca\n.text:0000000000402dce\n.text:0000000000402dd1\n.text:0000000000402dd3\n.text:0000000000402de0\n.text:0000000000402de3\n.text:0000000000402de6\n.text:0000000000402de9\n.text:0000000000402dee\n.text:0000000000402df2\n.text:0000000000402df6\n.text:0000000000402df8\n.text:0000000000402dfc\n.text:0000000000402e00\n.text:0000000000402e04\n.text:0000000000402e10\n.text:0000000000402e13\n.text:0000000000402e17\n.text:0000000000402e1a\n.text:0000000000402e1d\n.text:0000000000402e22\n.text:0000000000402e25\n.text:0000000000402e28\n.text:0000000000402e2a\n.text:0000000000402e2d\n.text:0000000000402e35\n.text:0000000000402e38\n.text:0000000000402e3c\n.text:0000000000402e3e\n.text:0000000000402e41\n.text:0000000000402e44\n.text:0000000000402e49\n.text:0000000000402e4c\n.text:0000000000402e50\n.text:0000000000402e52\n.text:0000000000402e55\n.text:0000000000402e5a\n.text:0000000000402e5d\n.text:0000000000402e5f\n.text:0000000000402e62\n.text:0000000000402e66\n.text:0000000000402e6a\n.text:0000000000402e6e\n.text:0000000000402e70\n.text:0000000000402e73\n.text:0000000000402e77\n.text:0000000000402e7e\n.text:0000000000402e82\n.text:0000000000402e86\n.text:0000000000402e8a\n.text:0000000000402e90\n.text:0000000000402e92\n.text:0000000000402e96\n.text:0000000000402e97\n.text:0000000000402e99\n.text:0000000000402e9b\n.text:0000000000402e9d\n.text:0000000000402e9f\n.text:0000000000402ea0\n.text:0000000000402ea1\n.text:0000000000402ea3\n'
p20
tp21
sS'rpl_fclose'
p22
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p23
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00405e29;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00405e29:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401490\nTEST EAX,EAX\nJS 0x00405e29\nMOV RDI,RBX\nCALL 0x00401500\nTEST EAX,EAX\nJZ 0x00405df7\nMOV RDI,RBX\nCALL 0x00401490\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x004013c0\nCMP RAX,-0x1\nJZ 0x00405e29\nMOV RDI,RBX\nCALL 0x00405e40\nTEST EAX,EAX\nJZ 0x00405e29\nCALL 0x004012b0\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401330\nTEST EBP,EBP\nJZ 0x00405e22\nCALL 0x004012b0\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401330\n'
p25
S'55\n53\n50\n48 89 fb\ne8 c5 b6 ff ff\n85 c0\n78 5a\n48 89 df\ne8 29 b7 ff ff\n85 c0\n74 1c\n48 89 df\ne8 ad b6 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 cf b5 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 a8 b4 ff ff\n8b 28\n48 89 df\ne8 1e b5 ff ff\n85 ed\n74 0c\ne8 95 b4 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 f9 b4 ff ff\n'
p26
S'.text:0000000000405dc0\n.text:0000000000405dc1\n.text:0000000000405dc2\n.text:0000000000405dc3\n.text:0000000000405dc6\n.text:0000000000405dcb\n.text:0000000000405dcd\n.text:0000000000405dcf\n.text:0000000000405dd2\n.text:0000000000405dd7\n.text:0000000000405dd9\n.text:0000000000405ddb\n.text:0000000000405dde\n.text:0000000000405de3\n.text:0000000000405de5\n.text:0000000000405dea\n.text:0000000000405dec\n.text:0000000000405df1\n.text:0000000000405df5\n.text:0000000000405df7\n.text:0000000000405dfa\n.text:0000000000405dff\n.text:0000000000405e01\n.text:0000000000405e03\n.text:0000000000405e08\n.text:0000000000405e0a\n.text:0000000000405e0d\n.text:0000000000405e12\n.text:0000000000405e14\n.text:0000000000405e16\n.text:0000000000405e1b\n.text:0000000000405e1d\n.text:0000000000405e22\n.text:0000000000405e26\n.text:0000000000405e27\n.text:0000000000405e28\n.text:0000000000405e29\n.text:0000000000405e2c\n.text:0000000000405e30\n.text:0000000000405e31\n.text:0000000000405e32\n'
p27
tp28
sS'strncmp'
p29
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p30
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060a038)();\u000a  return iVar1;\u000a}\u000a\u000a
p31
S'JMP qword ptr [0x0060a038]\n'
p32
S'ff 25 72 8d 20 00\n'
p33
S'.plt:00000000004012c0\n'
p34
tp35
sS'xnrealloc'
p36
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p37
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p38
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00405454\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00405460\nPUSH RAX\nCALL 0x004055b0\n'
p39
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p40
S'.text:0000000000405440\n.text:0000000000405443\n.text:0000000000405446\n.text:0000000000405449\n.text:000000000040544b\n.text:000000000040544f\n.text:0000000000405452\n.text:0000000000405454\n.text:0000000000405455\n'
p41
tp42
sS'quote'
p43
(S'\n__stdcall quote(char * arg)\n'
p44
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p45
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004049d0\n'
p46
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p47
S'.text:00000000004049e0\n.text:00000000004049e3\n.text:00000000004049e5\n.text:00000000004049e8\n'
p48
tp49
sS'emit_bug_reporting_address'
p50
(S'\n__stdcall emit_bug_reporting_address()\n'
p51
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p52
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40725d\nMOV EDX,0x5\nCALL 0x00401350\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x407272\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401540\nXOR EDI,EDI\nMOV ESI,0x407288\nMOV EDX,0x5\nCALL 0x00401350\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406703\nMOV ECX,0x4067fc\nXOR EAX,EAX\nCALL 0x00401540\nXOR EDI,EDI\nMOV ESI,0x40729c\nMOV EDX,0x5\nCALL 0x00401350\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401430\n'
p53
S'50\n31 ff\nbe 5d 72 40 00\nba 05 00 00 00\ne8 be bf ff ff\n48 89 c1\nbf 01 00 00 00\nba 72 72 40 00\n31 c0\n48 89 ce\ne8 97 c1 ff ff\n31 ff\nbe 88 72 40 00\nba 05 00 00 00\ne8 96 bf ff ff\n48 89 c6\nbf 01 00 00 00\nba 03 67 40 00\nb9 fc 67 40 00\n31 c0\ne8 6d c1 ff ff\n31 ff\nbe 9c 72 40 00\nba 05 00 00 00\ne8 6c bf ff ff\n48 8b 35 7d 4e 20 00\n48 89 c7\n58\ne9 3c c0 ff ff\n'
p54
S'.text:0000000000405380\n.text:0000000000405381\n.text:0000000000405383\n.text:0000000000405388\n.text:000000000040538d\n.text:0000000000405392\n.text:0000000000405395\n.text:000000000040539a\n.text:000000000040539f\n.text:00000000004053a1\n.text:00000000004053a4\n.text:00000000004053a9\n.text:00000000004053ab\n.text:00000000004053b0\n.text:00000000004053b5\n.text:00000000004053ba\n.text:00000000004053bd\n.text:00000000004053c2\n.text:00000000004053c7\n.text:00000000004053cc\n.text:00000000004053ce\n.text:00000000004053d3\n.text:00000000004053d5\n.text:00000000004053da\n.text:00000000004053df\n.text:00000000004053e4\n.text:00000000004053eb\n.text:00000000004053ee\n.text:00000000004053ef\n'
p55
tp56
sS'clone_quoting_options'
p57
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p58
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p59
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004012b0\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60a2b0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00405560\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p60
S'55\n41 56\n53\n48 89 fb\ne8 04 dd ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 b0 a2 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 95 1f 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p61
S'.text:00000000004035a0\n.text:00000000004035a1\n.text:00000000004035a3\n.text:00000000004035a4\n.text:00000000004035a7\n.text:00000000004035ac\n.text:00000000004035af\n.text:00000000004035b2\n.text:00000000004035b5\n.text:00000000004035ba\n.text:00000000004035be\n.text:00000000004035c3\n.text:00000000004035c6\n.text:00000000004035cb\n.text:00000000004035ce\n.text:00000000004035cf\n.text:00000000004035d1\n.text:00000000004035d2\n'
p62
tp63
sS'xmalloc'
p64
(S'\n__stdcall xmalloc(size_t n)\n'
p65
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p66
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004014c0\nTEST RBX,RBX\nJZ 0x00405433\nTEST RAX,RAX\nJZ 0x00405435\nPOP RBX\nRET\nCALL 0x004055b0\n'
p67
S'53\n48 89 fb\ne8 97 c0 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p68
S'.text:0000000000405420\n.text:0000000000405421\n.text:0000000000405424\n.text:0000000000405429\n.text:000000000040542c\n.text:000000000040542e\n.text:0000000000405431\n.text:0000000000405433\n.text:0000000000405434\n.text:0000000000405435\n'
p69
tp70
sS'quotearg_char_mem'
p71
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p72
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p73
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060a2e0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060a2d0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a2c0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a2b0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00403600\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004044f0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p74
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d c8 5a 20 00\n48 89 4c 24 30\n0f 10 05 ac 5a 20 00\n0f 29 44 24 20\n0f 10 05 90 5a 20 00\n0f 29 44 24 10\n0f 10 05 74 5a 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p75
S'.text:0000000000404800\n.text:0000000000404802\n.text:0000000000404804\n.text:0000000000404805\n.text:0000000000404809\n.text:000000000040480b\n.text:000000000040480e\n.text:0000000000404811\n.text:0000000000404818\n.text:000000000040481d\n.text:0000000000404824\n.text:0000000000404829\n.text:0000000000404830\n.text:0000000000404835\n.text:000000000040483c\n.text:0000000000404840\n.text:0000000000404843\n.text:0000000000404848\n.text:000000000040484b\n.text:000000000040484d\n.text:0000000000404852\n.text:0000000000404854\n.text:0000000000404857\n.text:000000000040485a\n.text:000000000040485d\n.text:0000000000404862\n.text:0000000000404866\n.text:0000000000404867\n.text:0000000000404869\n.text:000000000040486b\n'
p76
tp77
sS'same_name'
p78
(S'\n__stdcall same_name(char * source, char * dest)\n'
p79
V\u000a_Bool same_name(char *source,char *dest)\u000a\u000a{\u000a  int iVar1;\u000a  char *name;\u000a  char *name_00;\u000a  size_t sVar2;\u000a  size_t __n;\u000a  uint *puVar3;\u000a  bool bVar4;\u000a  stat source_dir_stats;\u000a  stat local_148;\u000a  stat local_b8;\u000a  \u000a  name = last_component(source);\u000a  name_00 = last_component(dest);\u000a  sVar2 = base_len(name);\u000a  __n = base_len(name_00);\u000a  if ((sVar2 == __n) && (iVar1 = memcmp(name,name_00,__n), iVar1 == 0)) {\u000a    name = dir_name(source);\u000a    name_00 = dir_name(dest);\u000a    iVar1 = stat(name,&local_b8);\u000a    if (iVar1 != 0) {\u000a      puVar3 = (uint *)__errno_location();\u000a      error(1,(ulong)*puVar3,0x40693d,name);\u000a    }\u000a    iVar1 = stat(name_00,&local_148);\u000a    if (iVar1 != 0) {\u000a      puVar3 = (uint *)__errno_location();\u000a      error(1,(ulong)*puVar3,0x40693d,name_00);\u000a    }\u000a    bVar4 = local_b8.st_ino == local_148.st_ino && local_b8.st_dev == local_148.st_dev;\u000a    free(name);\u000a    free(name_00);\u000a  }\u000a  else {\u000a    bVar4 = false;\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p80
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x120\nMOV R15,RSI\nMOV R14,RDI\nCALL 0x004059c0\nMOV R12,RAX\nMOV RDI,R15\nCALL 0x004059c0\nMOV RBX,RAX\nMOV RDI,R12\nCALL 0x00405a20\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00405a20\nCMP RBP,RAX\nJNZ 0x00404e42\nMOV RDI,R12\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00401420\nTEST EAX,EAX\nJZ 0x00404e56\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x120\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,R14\nCALL 0x00405900\nMOV R14,RAX\nMOV RDI,R15\nCALL 0x00405900\nMOV RBX,RAX\nLEA RSI,[0x90 + RSP]\nMOV RDI,R14\nCALL 0x00405fb0\nTEST EAX,EAX\nJZ 0x00404e9b\nCALL 0x004012b0\nMOV ESI,dword ptr [RAX]\nMOV EDI,0x1\nMOV EDX,0x40693d\nXOR EAX,EAX\nMOV RCX,R14\nCALL 0x00401560\nMOV RSI,RSP\nMOV RDI,RBX\nCALL 0x00405fb0\nTEST EAX,EAX\nJZ 0x00404ec5\nCALL 0x004012b0\nMOV ESI,dword ptr [RAX]\nMOV EDI,0x1\nMOV EDX,0x40693d\nXOR EAX,EAX\nMOV RCX,RBX\nCALL 0x00401560\nMOV RAX,qword ptr [0x98 + RSP]\nCMP RAX,qword ptr [RSP + 0x8]\nJNZ 0x00404ee6\nMOV RAX,qword ptr [0x90 + RSP]\nCMP RAX,qword ptr [RSP]\nSETZ BPL\nJMP 0x00404ee8\nXOR EBP,EBP\nMOV RDI,R14\nCALL 0x00401290\nMOV RDI,RBX\nCALL 0x00401290\nJMP 0x00404e44\n'
p81
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec 20 01 00 00\n49 89 f7\n49 89 fe\ne8 b6 0b 00 00\n49 89 c4\n4c 89 ff\ne8 ab 0b 00 00\n48 89 c3\n4c 89 e7\ne8 00 0c 00 00\n48 89 c5\n48 89 df\ne8 f5 0b 00 00\n48 39 c5\n75 12\n4c 89 e7\n48 89 de\n48 89 c2\ne8 e2 c5 ff ff\n85 c0\n74 14\n31 ed\n89 e8\n48 81 c4 20 01 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n4c 89 f7\ne8 a2 0a 00 00\n49 89 c6\n4c 89 ff\ne8 97 0a 00 00\n48 89 c3\n48 8d b4 24 90 00 00 00\n4c 89 f7\ne8 34 11 00 00\n85 c0\n74 1b\ne8 2b c4 ff ff\n8b 30\nbf 01 00 00 00\nba 3d 69 40 00\n31 c0\n4c 89 f1\ne8 c5 c6 ff ff\n48 89 e6\n48 89 df\ne8 0a 11 00 00\n85 c0\n74 1b\ne8 01 c4 ff ff\n8b 30\nbf 01 00 00 00\nba 3d 69 40 00\n31 c0\n48 89 d9\ne8 9b c6 ff ff\n48 8b 84 24 98 00 00 00\n48 3b 44 24 08\n75 12\n48 8b 84 24 90 00 00 00\n48 3b 04 24\n40 0f 94 c5\neb 02\n31 ed\n4c 89 f7\ne8 a0 c3 ff ff\n48 89 df\ne8 98 c3 ff ff\ne9 47 ff ff ff\n'
p82
S'.text:0000000000404df0\n.text:0000000000404df1\n.text:0000000000404df3\n.text:0000000000404df5\n.text:0000000000404df7\n.text:0000000000404df8\n.text:0000000000404dff\n.text:0000000000404e02\n.text:0000000000404e05\n.text:0000000000404e0a\n.text:0000000000404e0d\n.text:0000000000404e10\n.text:0000000000404e15\n.text:0000000000404e18\n.text:0000000000404e1b\n.text:0000000000404e20\n.text:0000000000404e23\n.text:0000000000404e26\n.text:0000000000404e2b\n.text:0000000000404e2e\n.text:0000000000404e30\n.text:0000000000404e33\n.text:0000000000404e36\n.text:0000000000404e39\n.text:0000000000404e3e\n.text:0000000000404e40\n.text:0000000000404e42\n.text:0000000000404e44\n.text:0000000000404e46\n.text:0000000000404e4d\n.text:0000000000404e4e\n.text:0000000000404e50\n.text:0000000000404e52\n.text:0000000000404e54\n.text:0000000000404e55\n.text:0000000000404e56\n.text:0000000000404e59\n.text:0000000000404e5e\n.text:0000000000404e61\n.text:0000000000404e64\n.text:0000000000404e69\n.text:0000000000404e6c\n.text:0000000000404e74\n.text:0000000000404e77\n.text:0000000000404e7c\n.text:0000000000404e7e\n.text:0000000000404e80\n.text:0000000000404e85\n.text:0000000000404e87\n.text:0000000000404e8c\n.text:0000000000404e91\n.text:0000000000404e93\n.text:0000000000404e96\n.text:0000000000404e9b\n.text:0000000000404e9e\n.text:0000000000404ea1\n.text:0000000000404ea6\n.text:0000000000404ea8\n.text:0000000000404eaa\n.text:0000000000404eaf\n.text:0000000000404eb1\n.text:0000000000404eb6\n.text:0000000000404ebb\n.text:0000000000404ebd\n.text:0000000000404ec0\n.text:0000000000404ec5\n.text:0000000000404ecd\n.text:0000000000404ed2\n.text:0000000000404ed4\n.text:0000000000404edc\n.text:0000000000404ee0\n.text:0000000000404ee4\n.text:0000000000404ee6\n.text:0000000000404ee8\n.text:0000000000404eeb\n.text:0000000000404ef0\n.text:0000000000404ef3\n.text:0000000000404ef8\n'
p83
tp84
sS'frame_dummy'
p85
(S'\n__stdcall frame_dummy()\n'
p86
V\u000a/* WARNING: Removing unreachable block (ram,0x004016ea) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p87
S'MOV EDI,0x609e18\nCMP qword ptr [RDI],0x0\nJNZ 0x004016e0\nJMP 0x00401670\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004016db\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401670\n'
p88
S'bf 18 9e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p89
S'.text:00000000004016d0\n.text:00000000004016d5\n.text:00000000004016d9\n.text:00000000004016db\n.text:00000000004016e0\n.text:00000000004016e5\n.text:00000000004016e8\n.text:00000000004016ea\n.text:00000000004016eb\n.text:00000000004016ee\n.text:00000000004016f0\n.text:00000000004016f1\n'
p90
tp91
sS'quotearg_n_style_colon'
p92
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p93
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00404720\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00403600\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x004044f0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p95
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p96
S'.text:00000000004048a0\n.text:00000000004048a1\n.text:00000000004048a3\n.text:00000000004048a4\n.text:00000000004048a8\n.text:00000000004048ab\n.text:00000000004048ad\n.text:00000000004048b2\n.text:00000000004048b5\n.text:00000000004048ba\n.text:00000000004048bf\n.text:00000000004048c4\n.text:00000000004048c7\n.text:00000000004048cc\n.text:00000000004048d3\n.text:00000000004048d5\n.text:00000000004048d8\n.text:00000000004048db\n.text:00000000004048e0\n.text:00000000004048e4\n.text:00000000004048e5\n.text:00000000004048e7\n.text:00000000004048e8\n'
p97
tp98
sS'rotl64'
p99
(S'\n__stdcall rotl64(uint64_t x)\n'
p100
V\u000auint64_t rotl64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p101
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p102
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p103
S'.text:0000000000405660\n.text:0000000000405662\n.text:0000000000405665\n.text:0000000000405668\n'
p104
tp105
sS'record_file'
p106
(S'\n__stdcall record_file(Hash_table * ht, char * file, stat * stats)\n'
p107
V\u000avoid record_file(Hash_table *ht,char *file,stat *stats)\u000a\u000a{\u000a  char **entry;\u000a  char *pcVar1;\u000a  char **ppcVar2;\u000a  \u000a  if (ht != (Hash_table *)0x0) {\u000a    entry = (char **)xmalloc(0x18);\u000a    pcVar1 = xstrdup(file);\u000a    *entry = pcVar1;\u000a    entry[1] = (char *)stats->st_ino;\u000a    entry[2] = (char *)stats->st_dev;\u000a    ppcVar2 = (char **)hash_insert(ht,entry);\u000a    if (ppcVar2 == (char **)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die();\u000a    }\u000a    if (ppcVar2 != entry) {\u000a      triple_free(entry);\u000a      return;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p108
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV R12,RSI\nMOV R14,RDI\nTEST R14,R14\nJZ 0x00402425\nMOV EDI,0x18\nCALL 0x00405420\nMOV RBX,RAX\nMOV RDI,R12\nCALL 0x00405590\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [R15 + 0x8]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [R15]\nMOV qword ptr [RBX + 0x10],RAX\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00403180\nTEST RAX,RAX\nJZ 0x00402431\nCMP RAX,RBX\nJZ 0x00402425\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004034d0\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x004055b0\n'
p109
S'41 57\n41 56\n41 54\n53\n50\n49 89 d7\n49 89 f4\n49 89 fe\n4d 85 f6\n74 4f\nbf 18 00 00 00\ne8 40 30 00 00\n48 89 c3\n4c 89 e7\ne8 a5 31 00 00\n48 89 03\n49 8b 47 08\n48 89 43 08\n49 8b 07\n48 89 43 10\n4c 89 f7\n48 89 de\ne8 78 0d 00 00\n48 85 c0\n74 24\n48 39 d8\n74 13\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 ab 10 00 00\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 7a 31 00 00\n'
p110
S'.text:00000000004023c0\n.text:00000000004023c2\n.text:00000000004023c4\n.text:00000000004023c6\n.text:00000000004023c7\n.text:00000000004023c8\n.text:00000000004023cb\n.text:00000000004023ce\n.text:00000000004023d1\n.text:00000000004023d4\n.text:00000000004023d6\n.text:00000000004023db\n.text:00000000004023e0\n.text:00000000004023e3\n.text:00000000004023e6\n.text:00000000004023eb\n.text:00000000004023ee\n.text:00000000004023f2\n.text:00000000004023f6\n.text:00000000004023f9\n.text:00000000004023fd\n.text:0000000000402400\n.text:0000000000402403\n.text:0000000000402408\n.text:000000000040240b\n.text:000000000040240d\n.text:0000000000402410\n.text:0000000000402412\n.text:0000000000402415\n.text:0000000000402419\n.text:000000000040241a\n.text:000000000040241c\n.text:000000000040241e\n.text:0000000000402420\n.text:0000000000402425\n.text:0000000000402429\n.text:000000000040242a\n.text:000000000040242c\n.text:000000000040242e\n.text:0000000000402430\n.text:0000000000402431\n'
p111
tp112
sS'quote_mem'
p113
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p114
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004049b0\n'
p116
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p117
S'.text:00000000004049c0\n.text:00000000004049c3\n.text:00000000004049c6\n.text:00000000004049c8\n.text:00000000004049cb\n.text:00000000004049ce\n'
p118
tp119
sS'fileno'
p120
(S'\n__stdcall fileno(FILE * __stream)\n'
p121
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060a120)();\u000a  return iVar1;\u000a}\u000a\u000a
p122
S'JMP qword ptr [0x0060a120]\n'
p123
S'ff 25 8a 8c 20 00\n'
p124
S'.plt:0000000000401490\n'
p125
tp126
sS'mbrtowc'
p127
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p128
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060a0a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p129
S'JMP qword ptr [0x0060a0a8]\n'
p130
S'ff 25 02 8d 20 00\n'
p131
S'.plt:00000000004013a0\n'
p132
tp133
sS'rotr16'
p134
(S'\n__stdcall rotr16()\n'
p135
V\u000auint16_t rotr16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI << (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p136
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p137
S'89 f8\n89 f1\nd3 e8\nb9 10 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p138
S'.text:00000000004056e0\n.text:00000000004056e2\n.text:00000000004056e4\n.text:00000000004056e6\n.text:00000000004056eb\n.text:00000000004056ed\n.text:00000000004056ef\n.text:00000000004056f1\n.text:00000000004056f3\n'
p139
tp140
sS'setlocale'
p141
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p142
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060a170)();\u000a  return pcVar1;\u000a}\u000a\u000a
p143
S'JMP qword ptr [0x0060a170]\n'
p144
S'ff 25 3a 8c 20 00\n'
p145
S'.plt:0000000000401530\n'
p146
tp147
sS'c_toupper'
p148
(S'\n__stdcall c_toupper()\n'
p149
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p150
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p151
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p152
S'.text:0000000000405880\n.text:0000000000405883\n.text:0000000000405886\n.text:0000000000405889\n.text:000000000040588c\n'
p153
tp154
sS'mbsinit'
p155
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p156
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060a1c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x0060a1c0]\n'
p158
S'ff 25 ea 8b 20 00\n'
p159
S'.plt:00000000004015d0\n'
p160
tp161
sS'dcgettext'
p162
(S'\n__stdcall dcgettext()\n'
p163
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060a080)();\u000a  return;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0060a080]\n'
p165
S'ff 25 2a 8d 20 00\n'
p166
S'.plt:0000000000401350\n'
p167
tp168
sS'seen_file'
p169
(S'\n__stdcall seen_file(Hash_table * ht, char * file, stat * stats)\n'
p170
V\u000a_Bool seen_file(Hash_table *ht,char *file,stat *stats)\u000a\u000a{\u000a  void *pvVar1;\u000a  char *local_18;\u000a  __ino_t local_10;\u000a  __dev_t local_8;\u000a  \u000a  if (ht != (Hash_table *)0x0) {\u000a    local_10 = stats->st_ino;\u000a    local_8 = stats->st_dev;\u000a    local_18 = file;\u000a    pvVar1 = hash_lookup(ht,&local_18);\u000a    return (_Bool)(pvVar1 != (void *)0x0);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p171
S'TEST RDI,RDI\nJZ 0x00402471\nSUB RSP,0x18\nMOV qword ptr [RSP],RSI\nMOV RAX,qword ptr [RDX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RAX,qword ptr [RDX]\nMOV qword ptr [RSP + 0x10],RAX\nMOV RSI,RSP\nCALL 0x00402640\nTEST RAX,RAX\nSETNZ AL\nADD RSP,0x18\nRET\nXOR EAX,EAX\nRET\n'
p172
S'48 85 ff\n74 2c\n48 83 ec 18\n48 89 34 24\n48 8b 42 08\n48 89 44 24 08\n48 8b 02\n48 89 44 24 10\n48 89 e6\ne8 da 01 00 00\n48 85 c0\n0f 95 c0\n48 83 c4 18\nc3\n31 c0\nc3\n'
p173
S'.text:0000000000402440\n.text:0000000000402443\n.text:0000000000402445\n.text:0000000000402449\n.text:000000000040244d\n.text:0000000000402451\n.text:0000000000402456\n.text:0000000000402459\n.text:000000000040245e\n.text:0000000000402461\n.text:0000000000402466\n.text:0000000000402469\n.text:000000000040246c\n.text:0000000000402470\n.text:0000000000402471\n.text:0000000000402473\n'
p174
tp175
sS'quotearg_free'
p176
(S'\n__stdcall quotearg_free()\n'
p177
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p178
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060a1f8]\nCMP dword ptr [0x0060a200],0x2\nJC 0x0040448a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401290\nINC RBX\nMOV EAX,dword ptr [0x0060a200]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00404470\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60a2f0\nCMP RDI,RAX\nJZ 0x004044b3\nCALL 0x00401290\nMOV qword ptr [0x0060a208],0x100\nMOV qword ptr [0x0060a210],0x60a2f0\nMOV EAX,0x60a208\nCMP R14,RAX\nJZ 0x004044d0\nMOV RDI,R14\nCALL 0x00401290\nMOV qword ptr [0x0060a1f8],0x60a208\nMOV dword ptr [0x0060a200],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p179
S'41 57\n41 56\n53\n4c 8b 35 9c 5d 20 00\n83 3d 9d 5d 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 18 ce ff ff\n48 ff c3\n8b 05 7f 5d 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 f0 a2 60 00\n48 39 c7\n74 1b\ne8 f3 cd ff ff\n48 c7 05 60 5d 20 00 00 01 00 00\n48 c7 05 5d 5d 20 00 f0 a2 60 00\nb8 08 a2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 cb cd ff ff\n48 c7 05 28 5d 20 00 08 a2 60 00\nc7 05 26 5d 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p180
S'.text:0000000000404450\n.text:0000000000404452\n.text:0000000000404454\n.text:0000000000404455\n.text:000000000040445c\n.text:0000000000404463\n.text:0000000000404465\n.text:0000000000404469\n.text:000000000040446e\n.text:0000000000404470\n.text:0000000000404473\n.text:0000000000404478\n.text:000000000040447b\n.text:0000000000404481\n.text:0000000000404485\n.text:0000000000404488\n.text:000000000040448a\n.text:000000000040448e\n.text:0000000000404493\n.text:0000000000404496\n.text:0000000000404498\n.text:000000000040449d\n.text:00000000004044a8\n.text:00000000004044b3\n.text:00000000004044b8\n.text:00000000004044bb\n.text:00000000004044bd\n.text:00000000004044c0\n.text:00000000004044c5\n.text:00000000004044d0\n.text:00000000004044da\n.text:00000000004044db\n.text:00000000004044dd\n.text:00000000004044df\n'
p181
tp182
sS'quotearg_mem'
p183
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p184
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p185
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004046b0\n'
p186
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p187
S'.text:00000000004046d0\n.text:00000000004046d3\n.text:00000000004046d6\n.text:00000000004046d8\n.text:00000000004046db\n.text:00000000004046de\n'
p188
tp189
sS'rotl32'
p190
(S'\n__stdcall rotl32()\n'
p191
V\u000auint32_t rotl32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI << bVar1 | in_EDI >> 0x20 - bVar1);\u000a}\u000a\u000a
p192
S'MOV ECX,ESI\nROL EDI,CL\nMOV EAX,EDI\nRET\n'
p193
S'89 f1\nd3 c7\n89 f8\nc3\n'
p194
S'.text:0000000000405680\n.text:0000000000405682\n.text:0000000000405684\n.text:0000000000405686\n'
p195
tp196
sS'deregister_tm_clones'
p197
(S'\n__stdcall deregister_tm_clones()\n'
p198
V\u000a/* WARNING: Removing unreachable block (ram,0x00401645) */\u000a/* WARNING: Removing unreachable block (ram,0x0040164f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p199
S'MOV EAX,0x60a257\nPUSH RBP\nSUB RAX,0x60a250\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401660\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401660\nPOP RBP\nMOV EDI,0x60a250\nJMP RAX\nPOP RBP\nRET\n'
p200
S'b8 57 a2 60 00\n55\n48 2d 50 a2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 50 a2 60 00\nff e0\n5d\nc3\n'
p201
S'.text:0000000000401630\n.text:0000000000401635\n.text:0000000000401636\n.text:000000000040163c\n.text:0000000000401640\n.text:0000000000401643\n.text:0000000000401645\n.text:000000000040164a\n.text:000000000040164d\n.text:000000000040164f\n.text:0000000000401650\n.text:0000000000401655\n.text:0000000000401660\n.text:0000000000401661\n'
p202
tp203
sS'quotearg_custom'
p204
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p205
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p206
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004048f0\n'
p207
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p208
S'.text:0000000000404970\n.text:0000000000404973\n.text:0000000000404976\n.text:0000000000404979\n.text:000000000040497b\n.text:000000000040497e\n.text:0000000000404981\n.text:0000000000404984\n'
p209
tp210
sS'free'
p211
(S'\n__stdcall free(void * __ptr)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060a020)();\u000a  return;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x0060a020]\n'
p214
S'ff 25 8a 8d 20 00\n'
p215
S'.plt:0000000000401290\n'
p216
tp217
sS'close'
p218
(S'\n__stdcall close(int __fd)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060a0d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x0060a0d8]\n'
p221
S'ff 25 d2 8c 20 00\n'
p222
S'.plt:0000000000401400\n'
p223
tp224
sS'getenv'
p225
(S'\n__stdcall getenv(char * __name)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060a018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x0060a018]\n'
p228
S'ff 25 92 8d 20 00\n'
p229
S'.plt:0000000000401280\n'
p230
tp231
sS'putchar_unlocked'
p232
(S'\n__stdcall putchar_unlocked(int __c)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_0060a118)();\u000a  return iVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x0060a118]\n'
p235
S'ff 25 92 8c 20 00\n'
p236
S'.plt:0000000000401480\n'
p237
tp238
sS'triple_free'
p239
(S'\n__stdcall triple_free(void * x)\n'
p240
V\u000avoid triple_free(void *x)\u000a\u000a{\u000a  free(*(void **)x);\u000a  free(x);\u000a  return;\u000a}\u000a\u000a
p241
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00401290\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401290\n'
p242
S'53\n48 89 fb\n48 8b 3b\ne8 b4 dd ff ff\n48 89 df\n5b\ne9 ab dd ff ff\n'
p243
S'.text:00000000004034d0\n.text:00000000004034d1\n.text:00000000004034d4\n.text:00000000004034d7\n.text:00000000004034dc\n.text:00000000004034df\n.text:00000000004034e0\n'
p244
tp245
sS'stat'
p246
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p247
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_0060a128)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p248
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x004014a0\n'
p249
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 e0 b4 ff ff\n'
p250
S'.text:0000000000405fb0\n.text:0000000000405fb3\n.text:0000000000405fb6\n.text:0000000000405fbb\n'
p251
tp252
sS'rpl_fseeko'
p253
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p254
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060a198)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p255
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00405eb8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00405eb8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x00405eca\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401580\nMOV RDI,RBX\nCALL 0x00401490\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x004013c0\nCMP RAX,-0x1\nJZ 0x00405ef3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00405ef8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p256
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 b6 b6 ff ff\n48 89 df\ne8 be b5 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 e1 b4 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p257
S'.text:0000000000405e90\n.text:0000000000405e91\n.text:0000000000405e93\n.text:0000000000405e94\n.text:0000000000405e97\n.text:0000000000405e9a\n.text:0000000000405e9d\n.text:0000000000405ea1\n.text:0000000000405ea5\n.text:0000000000405ea7\n.text:0000000000405eab\n.text:0000000000405eaf\n.text:0000000000405eb1\n.text:0000000000405eb6\n.text:0000000000405eb8\n.text:0000000000405ebb\n.text:0000000000405ebe\n.text:0000000000405ec1\n.text:0000000000405ec2\n.text:0000000000405ec4\n.text:0000000000405ec5\n.text:0000000000405eca\n.text:0000000000405ecd\n.text:0000000000405ed2\n.text:0000000000405ed4\n.text:0000000000405ed7\n.text:0000000000405eda\n.text:0000000000405edf\n.text:0000000000405ee3\n.text:0000000000405ee5\n.text:0000000000405ee8\n.text:0000000000405eef\n.text:0000000000405ef1\n.text:0000000000405ef3\n.text:0000000000405ef8\n.text:0000000000405ef9\n.text:0000000000405efb\n.text:0000000000405efc\n'
p258
tp259
sS'quote_n_mem'
p260
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p261
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p262
S'MOV ECX,0x60a218\nJMP 0x004044f0\n'
p263
S'b9 18 a2 60 00\ne9 36 fb ff ff\n'
p264
S'.text:00000000004049b0\n.text:00000000004049b5\n'
p265
tp266
sS'xstrdup'
p267
(S'\n__stdcall xstrdup(char * string)\n'
p268
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p269
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401370\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00405560\n'
p270
S'53\n48 89 fb\ne8 d7 bd ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p271
S'.text:0000000000405590\n.text:0000000000405591\n.text:0000000000405594\n.text:0000000000405599\n.text:000000000040559d\n.text:00000000004055a0\n.text:00000000004055a1\n'
p272
tp273
sS'rotr8'
p274
(S'\n__stdcall rotr8()\n'
p275
V\u000auint8_t rotr8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI << (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p276
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p277
S'89 f8\n89 f1\nd3 e8\nb9 08 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p278
S'.text:0000000000405720\n.text:0000000000405722\n.text:0000000000405724\n.text:0000000000405726\n.text:000000000040572b\n.text:000000000040572d\n.text:000000000040572f\n.text:0000000000405731\n.text:0000000000405733\n'
p279
tp280
sS'c_ispunct'
p281
(S'\n__stdcall c_ispunct()\n'
p282
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p283
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00405812\nMOV AL,0x1\nJMP qword ptr [0x407320 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p284
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 20 73 40 00\nc3\n31 c0\nc3\n'
p285
S'.text:0000000000405800\n.text:0000000000405803\n.text:0000000000405806\n.text:0000000000405808\n.text:000000000040580a\n.text:0000000000405811\n.text:0000000000405812\n.text:0000000000405814\n'
p286
tp287
sS'is_prime'
p288
(S'\n__stdcall is_prime(size_t candidate)\n'
p289
V\u000a_Bool is_prime(size_t candidate)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  long lVar3;\u000a  bool bVar4;\u000a  \u000a  bVar4 = candidate != (candidate / 3) * 3;\u000a  if ((9 < candidate) && (bVar4)) {\u000a    uVar2 = 9;\u000a    lVar3 = 0x10;\u000a    uVar1 = 5;\u000a    do {\u000a      uVar2 = uVar2 + lVar3;\u000a      bVar4 = candidate % uVar1 != 0;\u000a      if (candidate <= uVar2) {\u000a        return (_Bool)bVar4;\u000a      }\u000a      lVar3 = lVar3 + 8;\u000a      uVar1 = uVar1 + 2;\u000a    } while (bVar4);\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p290
S'MOV R8,RDI\nMOV RCX,-0x5555555555555555\nMOV RAX,R8\nMUL RCX\nSHR RDX,1\nLEA RAX,[RDX + RDX*0x2]\nCMP R8,RAX\nSETNZ AL\nSETZ CL\nCMP R8,0xa\nJC 0x00403405\nTEST CL,CL\nJNZ 0x00403405\nMOV ESI,0x9\nMOV EDI,0x10\nMOV ECX,0x5\nNOP dword ptr [RAX]\nADD RSI,RDI\nXOR EDX,EDX\nMOV RAX,R8\nDIV RCX\nTEST RDX,RDX\nSETNZ AL\nSETZ DL\nCMP RSI,R8\nJNC 0x00403405\nADD RDI,0x8\nADD RCX,0x2\nTEST DL,DL\nJZ 0x004033e0\nRET\n'
p291
S'49 89 f8\n48 b9 ab aa aa aa aa aa aa aa\n4c 89 c0\n48 f7 e1\n48 d1 ea\n48 8d 04 52\n49 39 c0\n0f 95 c0\n0f 94 c1\n49 83 f8 0a\n72 3c\n84 c9\n75 38\nbe 09 00 00 00\nbf 10 00 00 00\nb9 05 00 00 00\n0f 1f 40 00\n48 01 fe\n31 d2\n4c 89 c0\n48 f7 f1\n48 85 d2\n0f 95 c0\n0f 94 c2\n4c 39 c6\n73 0c\n48 83 c7 08\n48 83 c1 02\n84 d2\n74 db\nc3\n'
p292
S'.text:00000000004033a0\n.text:00000000004033a3\n.text:00000000004033ad\n.text:00000000004033b0\n.text:00000000004033b3\n.text:00000000004033b6\n.text:00000000004033ba\n.text:00000000004033bd\n.text:00000000004033c0\n.text:00000000004033c3\n.text:00000000004033c7\n.text:00000000004033c9\n.text:00000000004033cb\n.text:00000000004033cd\n.text:00000000004033d2\n.text:00000000004033d7\n.text:00000000004033dc\n.text:00000000004033e0\n.text:00000000004033e3\n.text:00000000004033e5\n.text:00000000004033e8\n.text:00000000004033eb\n.text:00000000004033ee\n.text:00000000004033f1\n.text:00000000004033f4\n.text:00000000004033f7\n.text:00000000004033f9\n.text:00000000004033fd\n.text:0000000000403401\n.text:0000000000403403\n.text:0000000000403405\n'
p293
tp294
sS'fscanf'
p295
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p296
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060a0c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p297
S'JMP qword ptr [0x0060a0c8]\n'
p298
S'ff 25 e2 8c 20 00\n'
p299
S'.plt:00000000004013e0\n'
p300
tp301
sS'memcpy'
p302
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060a110)();\u000a  return pvVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x0060a110]\n'
p305
S'ff 25 9a 8c 20 00\n'
p306
S'.plt:0000000000401470\n'
p307
tp308
sS'hash_get_n_buckets_used'
p309
(S'\n__stdcall hash_get_n_buckets_used(Hash_table * table)\n'
p310
V\u000asize_t hash_get_n_buckets_used(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets_used;\u000a}\u000a\u000a
p311
S'MOV RAX,qword ptr [RDI + 0x18]\nRET\n'
p312
S'48 8b 47 18\nc3\n'
p313
S'.text:0000000000402490\n.text:0000000000402494\n'
p314
tp315
sS'close_stdout_set_ignore_EPIPE'
p316
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p317
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p318
S'MOV byte ptr [0x0060a298],DIL\nRET\n'
p319
S'40 88 3d a1 7f 20 00\nc3\n'
p320
S'.text:00000000004022f0\n.text:00000000004022f7\n'
p321
tp322
sS'iswprint'
p323
(S'\n__stdcall iswprint(wint_t __wc)\n'
p324
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060a1c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x0060a1c8]\n'
p326
S'ff 25 e2 8b 20 00\n'
p327
S'.plt:00000000004015e0\n'
p328
tp329
sS'c_isspace'
p330
(S'\n__stdcall c_isspace()\n'
p331
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p332
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00405835\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p333
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p334
S'.text:0000000000405820\n.text:0000000000405823\n.text:0000000000405826\n.text:0000000000405828\n.text:000000000040582d\n.text:000000000040582f\n.text:0000000000405831\n.text:0000000000405834\n.text:0000000000405835\n.text:0000000000405837\n'
p335
tp336
sS'open'
p337
(S'\n__stdcall open(char * __file, int __oflag)\n'
p338
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060a190)();\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'JMP qword ptr [0x0060a190]\n'
p340
S'ff 25 1a 8c 20 00\n'
p341
S'.plt:0000000000401570\n'
p342
tp343
sS'quotearg_n_custom_mem'
p344
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p345
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060a2e0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060a2d0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a2c0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a2b0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403660\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004044f0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p347
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 c7 59 20 00\n48 89 44 24 30\n0f 10 05 ab 59 20 00\n0f 29 44 24 20\n0f 10 05 8f 59 20 00\n0f 29 44 24 10\n0f 10 05 73 59 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p348
S'.text:0000000000404900\n.text:0000000000404901\n.text:0000000000404903\n.text:0000000000404905\n.text:0000000000404906\n.text:000000000040490a\n.text:000000000040490d\n.text:0000000000404910\n.text:0000000000404912\n.text:0000000000404919\n.text:000000000040491e\n.text:0000000000404925\n.text:000000000040492a\n.text:0000000000404931\n.text:0000000000404936\n.text:000000000040493d\n.text:0000000000404941\n.text:0000000000404944\n.text:0000000000404947\n.text:000000000040494c\n.text:000000000040494e\n.text:0000000000404951\n.text:0000000000404954\n.text:0000000000404957\n.text:000000000040495c\n.text:0000000000404960\n.text:0000000000404961\n.text:0000000000404963\n.text:0000000000404965\n.text:0000000000404966\n'
p349
tp350
sS'rotl16'
p351
(S'\n__stdcall rotl16()\n'
p352
V\u000auint16_t rotl16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI >> (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p353
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p354
S'89 f8\n89 f1\nd3 e0\nb9 10 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p355
S'.text:00000000004056c0\n.text:00000000004056c2\n.text:00000000004056c4\n.text:00000000004056c6\n.text:00000000004056cb\n.text:00000000004056cd\n.text:00000000004056cf\n.text:00000000004056d1\n.text:00000000004056d3\n'
p356
tp357
sS'_init'
p358
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p359
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00609ff8;\u000a  if (PTR___gmon_start___00609ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00609ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p360
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00609ff8]\nTEST RAX,RAX\nJZ 0x0040126a\nCALL RAX\nADD RSP,0x8\nRET\n'
p361
S'48 83 ec 08\n48 8b 05 95 8d 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p362
S'.init:0000000000401258\n.init:000000000040125c\n.init:0000000000401263\n.init:0000000000401266\n.init:0000000000401268\n.init:000000000040126a\n.init:000000000040126e\n'
p363
tp364
sS'set_quoting_flags'
p365
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p366
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p367
S'TEST RDI,RDI\nMOV ECX,0x60a2b0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p368
S'48 85 ff\nb9 b0 a2 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p369
S'.text:0000000000403640\n.text:0000000000403643\n.text:0000000000403648\n.text:000000000040364c\n.text:000000000040364f\n.text:0000000000403652\n'
p370
tp371
sS'realloc'
p372
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p373
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060a160)();\u000a  return pvVar1;\u000a}\u000a\u000a
p374
S'JMP qword ptr [0x0060a160]\n'
p375
S'ff 25 4a 8c 20 00\n'
p376
S'.plt:0000000000401510\n'
p377
tp378
sS'__fprintf_chk'
p379
(S'\n__stdcall __fprintf_chk()\n'
p380
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060a1b8)();\u000a  return;\u000a}\u000a\u000a
p381
S'JMP qword ptr [0x0060a1b8]\n'
p382
S'ff 25 f2 8b 20 00\n'
p383
S'.plt:00000000004015c0\n'
p384
tp385
sS'get_charset_aliases'
p386
(S'\n__stdcall get_charset_aliases()\n'
p387
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00405d34_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00405d34_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00405d34_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00405d34_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00405d34_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00405d34_caseD_9;\u000a      case -1:\u000a        goto switchD_00405d34_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00405d8d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00405d93:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00405d34_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00405d93;\u000a  }\u000a  goto LAB_00405d8d;\u000a}\u000a\u000a
p388
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060a3f0]\nTEST R15,R15\nJNZ 0x00405da2\nMOV EDI,0x40774c\nCALL 0x00401280\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405b58\nCMP byte ptr [RBX],0x0\nJNZ 0x00405b5d\nMOV EBX,0x40775c\nMOV RDI,RBX\nCALL 0x00401370\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00405b77\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00405b79\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x004014c0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00405bcd\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401470\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00405bd8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00405bf5\nMOV R15D,0x4070e1\nJMP 0x00405d9b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401570\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00405d8d\nMOV ESI,0x406937\nMOV EDI,EBP\nCALL 0x00401520\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405d54\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00405d20\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004012e0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004012e0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00405d20\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x004014f0\nMOV ESI,0x40776b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x004013e0\nCMP EAX,0x2\nJL 0x00405d74\nMOV RDI,R12\nCALL 0x00401370\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401370\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00405cfd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401510\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00405c44\nJMP 0x00405d5d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x004014c0\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00405c44\nJMP 0x00405d5d\nMOV RDI,RBX\nCALL 0x00401300\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00405c87\nJMP qword ptr [0x407610 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401300\nCMP EAX,-0x1\nJZ 0x00405d74\nCMP EAX,0xa\nJNZ 0x00405d40\nJMP 0x00405d20\nMOV EDI,EBP\nCALL 0x00401400\nJMP 0x00405d8d\nMOV RDI,R15\nCALL 0x00401290\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00405dc0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00405d8d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00405d93\nMOV R15D,0x4070e1\nMOV RDI,R13\nCALL 0x00401290\nMOV qword ptr [0x0060a3f0],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p389
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d b8 48 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 4c 77 40 00\ne8 35 b7 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 5c 77 40 00\n48 89 df\ne8 0b b8 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 39 b9 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 d3 b8 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf e1 70 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 6c b9 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 37 69 40 00\n89 ef\ne8 06 b9 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 7b b6 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 6b b6 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 5f b8 ff ff\nbe 6b 77 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 3a b7 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 b9 b6 ff ff\n49 89 c4\n48 89 ef\ne8 ae b6 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 26 b8 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 b5 b7 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 d8 b5 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 10 76 40 00\n48 89 df\ne8 b8 b5 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 a5 b6 ff ff\neb 30\n4c 89 ff\ne8 2b b5 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 44 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf e1 70 40 00\n4c 89 ef\ne8 f5 b4 ff ff\n4c 89 3d 4e 46 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p390
S'.text:0000000000405b20\n.text:0000000000405b21\n.text:0000000000405b23\n.text:0000000000405b25\n.text:0000000000405b27\n.text:0000000000405b29\n.text:0000000000405b2a\n.text:0000000000405b31\n.text:0000000000405b38\n.text:0000000000405b3b\n.text:0000000000405b41\n.text:0000000000405b46\n.text:0000000000405b4b\n.text:0000000000405b4e\n.text:0000000000405b51\n.text:0000000000405b53\n.text:0000000000405b56\n.text:0000000000405b58\n.text:0000000000405b5d\n.text:0000000000405b60\n.text:0000000000405b65\n.text:0000000000405b68\n.text:0000000000405b6b\n.text:0000000000405b6d\n.text:0000000000405b72\n.text:0000000000405b75\n.text:0000000000405b77\n.text:0000000000405b79\n.text:0000000000405b7d\n.text:0000000000405b82\n.text:0000000000405b87\n.text:0000000000405b8a\n.text:0000000000405b8d\n.text:0000000000405b8f\n.text:0000000000405b92\n.text:0000000000405b95\n.text:0000000000405b98\n.text:0000000000405b9d\n.text:0000000000405ba0\n.text:0000000000405ba3\n.text:0000000000405ba6\n.text:0000000000405ba8\n.text:0000000000405bae\n.text:0000000000405bb8\n.text:0000000000405bbd\n.text:0000000000405bc7\n.text:0000000000405bcb\n.text:0000000000405bcd\n.text:0000000000405bd3\n.text:0000000000405bd8\n.text:0000000000405be2\n.text:0000000000405be7\n.text:0000000000405bf1\n.text:0000000000405bf5\n.text:0000000000405bfa\n.text:0000000000405bfc\n.text:0000000000405bff\n.text:0000000000405c04\n.text:0000000000405c06\n.text:0000000000405c08\n.text:0000000000405c0e\n.text:0000000000405c13\n.text:0000000000405c15\n.text:0000000000405c1a\n.text:0000000000405c1d\n.text:0000000000405c20\n.text:0000000000405c26\n.text:0000000000405c2b\n.text:0000000000405c30\n.text:0000000000405c32\n.text:0000000000405c37\n.text:0000000000405c3a\n.text:0000000000405c3f\n.text:0000000000405c44\n.text:0000000000405c49\n.text:0000000000405c4c\n.text:0000000000405c4f\n.text:0000000000405c52\n.text:0000000000405c55\n.text:0000000000405c58\n.text:0000000000405c5d\n.text:0000000000405c60\n.text:0000000000405c65\n.text:0000000000405c68\n.text:0000000000405c6d\n.text:0000000000405c70\n.text:0000000000405c75\n.text:0000000000405c7a\n.text:0000000000405c7d\n.text:0000000000405c82\n.text:0000000000405c87\n.text:0000000000405c89\n.text:0000000000405c8c\n.text:0000000000405c91\n.text:0000000000405c96\n.text:0000000000405c98\n.text:0000000000405c9b\n.text:0000000000405c9e\n.text:0000000000405ca1\n.text:0000000000405ca6\n.text:0000000000405ca9\n.text:0000000000405caf\n.text:0000000000405cb2\n.text:0000000000405cb7\n.text:0000000000405cba\n.text:0000000000405cbd\n.text:0000000000405cc2\n.text:0000000000405cc5\n.text:0000000000405cca\n.text:0000000000405ccf\n.text:0000000000405cd2\n.text:0000000000405cd4\n.text:0000000000405cd8\n.text:0000000000405cdd\n.text:0000000000405ce2\n.text:0000000000405ce5\n.text:0000000000405cea\n.text:0000000000405ced\n.text:0000000000405cf2\n.text:0000000000405cf5\n.text:0000000000405cfb\n.text:0000000000405cfd\n.text:0000000000405d02\n.text:0000000000405d06\n.text:0000000000405d0b\n.text:0000000000405d0e\n.text:0000000000405d11\n.text:0000000000405d17\n.text:0000000000405d20\n.text:0000000000405d23\n.text:0000000000405d28\n.text:0000000000405d2b\n.text:0000000000405d2e\n.text:0000000000405d34\n.text:0000000000405d40\n.text:0000000000405d43\n.text:0000000000405d48\n.text:0000000000405d4b\n.text:0000000000405d4d\n.text:0000000000405d50\n.text:0000000000405d52\n.text:0000000000405d54\n.text:0000000000405d56\n.text:0000000000405d5b\n.text:0000000000405d5d\n.text:0000000000405d60\n.text:0000000000405d65\n.text:0000000000405d67\n.text:0000000000405d6c\n.text:0000000000405d6f\n.text:0000000000405d74\n.text:0000000000405d77\n.text:0000000000405d7c\n.text:0000000000405d81\n.text:0000000000405d84\n.text:0000000000405d86\n.text:0000000000405d8b\n.text:0000000000405d8d\n.text:0000000000405d93\n.text:0000000000405d96\n.text:0000000000405d9b\n.text:0000000000405da2\n.text:0000000000405da5\n.text:0000000000405dac\n.text:0000000000405dad\n.text:0000000000405daf\n.text:0000000000405db1\n.text:0000000000405db3\n.text:0000000000405db5\n.text:0000000000405db6\n'
p391
tp392
sS'nl_langinfo'
p393
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p394
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060a148)();\u000a  return pcVar1;\u000a}\u000a\u000a
p395
S'JMP qword ptr [0x0060a148]\n'
p396
S'ff 25 62 8c 20 00\n'
p397
S'.plt:00000000004014e0\n'
p398
tp399
sS'x2realloc'
p400
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p401
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p402
S'MOV EDX,0x1\nJMP 0x00405490\n'
p403
S'ba 01 00 00 00\neb 89\n'
p404
S'.text:0000000000405500\n.text:0000000000405505\n'
p405
tp406
sS'strlen'
p407
(S'\n__stdcall strlen(char * __s)\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060a090)();\u000a  return sVar1;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x0060a090]\n'
p410
S'ff 25 1a 8d 20 00\n'
p411
S'.plt:0000000000401370\n'
p412
tp413
sS'memcmp'
p414
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060a0e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x0060a0e8]\n'
p417
S'ff 25 c2 8c 20 00\n'
p418
S'.plt:0000000000401420\n'
p419
tp420
sS'hash_free'
p421
(S'\n__stdcall hash_free(Hash_table * table)\n'
p422
V\u000avoid hash_free(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *__ptr;\u000a  hash_entry *__ptr_00;\u000a  \u000a  if (((table->data_freer != (void (*)(void *))0x0) && (table->n_entries != 0)) &&\u000a     (__ptr_00 = table->bucket, __ptr_00 < table->bucket_limit)) {\u000a    do {\u000a      __ptr = __ptr_00;\u000a      if (__ptr_00->data != (void *)0x0) {\u000a        while (__ptr != (hash_entry *)0x0) {\u000a          (*table->data_freer)(__ptr->data);\u000a          __ptr = __ptr->next;\u000a        }\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->bucket;\u000a  if (__ptr_00 < table->bucket_limit) {\u000a    do {\u000a      __ptr = __ptr_00->next;\u000a      while (__ptr != (hash_entry *)0x0) {\u000a        phVar1 = __ptr->next;\u000a        free(__ptr);\u000a        __ptr = phVar1;\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->free_entry_list;\u000a  while (__ptr_00 != (hash_entry *)0x0) {\u000a    __ptr = __ptr_00->next;\u000a    free(__ptr_00);\u000a    __ptr_00 = __ptr;\u000a  }\u000a  free(table->bucket);\u000a  free(table);\u000a  return;\u000a}\u000a\u000a
p423
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x00402be2\nCMP qword ptr [R15 + 0x20],0x0\nJZ 0x00402be2\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00402bba\nJMP 0x00402be2\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00402be2\nCMP qword ptr [R14],0x0\nJZ 0x00402bb0\nTEST R14,R14\nJZ 0x00402bb0\nMOV RBX,R14\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX]\nCALL qword ptr [R15 + 0x40]\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00402bd0\nJMP 0x00402bb0\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00402bfa\nJMP 0x00402c23\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00402c23\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00402bf0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00401290\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00402c10\nJMP 0x00402bf0\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x00402c41\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00401290\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00402c30\nMOV RDI,qword ptr [R15]\nCALL 0x00401290\nMOV RDI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00401290\n'
p424
S'41 57\n41 56\n53\n49 89 ff\n49 83 7f 40 00\n74 53\n49 83 7f 20 00\n74 4c\n4d 8b 37\n4d 3b 77 08\n72 1b\neb 41\n49 83 c6 10\n4d 3b 77 08\n73 28\n49 83 3e 00\n74 f0\n4d 85 f6\n74 eb\n4c 89 f3\n0f 1f 84 00 00 00 00 00\n48 8b 3b\n41 ff 57 40\n48 8b 5b 08\n48 85 db\n75 f0\neb ce\n4d 8b 37\n4d 3b 77 08\n72 0f\neb 36\n49 83 c6 10\n4d 3b 77 08\n73 29\n49 8b 7e 08\n48 85 ff\n74 ed\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 5f 08\ne8 77 e6 ff ff\n48 85 db\n48 89 df\n75 ef\neb cd\n49 8b 7f 48\n48 85 ff\n74 15\n0f 1f 40 00\n48 8b 5f 08\ne8 57 e6 ff ff\n48 85 db\n48 89 df\n75 ef\n49 8b 3f\ne8 47 e6 ff ff\n4c 89 ff\n5b\n41 5e\n41 5f\ne9 3a e6 ff ff\n'
p425
S'.text:0000000000402b80\n.text:0000000000402b82\n.text:0000000000402b84\n.text:0000000000402b85\n.text:0000000000402b88\n.text:0000000000402b8d\n.text:0000000000402b8f\n.text:0000000000402b94\n.text:0000000000402b96\n.text:0000000000402b99\n.text:0000000000402b9d\n.text:0000000000402b9f\n.text:0000000000402bb0\n.text:0000000000402bb4\n.text:0000000000402bb8\n.text:0000000000402bba\n.text:0000000000402bbe\n.text:0000000000402bc0\n.text:0000000000402bc3\n.text:0000000000402bc5\n.text:0000000000402bc8\n.text:0000000000402bd0\n.text:0000000000402bd3\n.text:0000000000402bd7\n.text:0000000000402bdb\n.text:0000000000402bde\n.text:0000000000402be0\n.text:0000000000402be2\n.text:0000000000402be5\n.text:0000000000402be9\n.text:0000000000402beb\n.text:0000000000402bf0\n.text:0000000000402bf4\n.text:0000000000402bf8\n.text:0000000000402bfa\n.text:0000000000402bfe\n.text:0000000000402c01\n.text:0000000000402c03\n.text:0000000000402c10\n.text:0000000000402c14\n.text:0000000000402c19\n.text:0000000000402c1c\n.text:0000000000402c1f\n.text:0000000000402c21\n.text:0000000000402c23\n.text:0000000000402c27\n.text:0000000000402c2a\n.text:0000000000402c2c\n.text:0000000000402c30\n.text:0000000000402c34\n.text:0000000000402c39\n.text:0000000000402c3c\n.text:0000000000402c3f\n.text:0000000000402c41\n.text:0000000000402c44\n.text:0000000000402c49\n.text:0000000000402c4c\n.text:0000000000402c4d\n.text:0000000000402c4f\n.text:0000000000402c51\n'
p426
tp427
sS'quotearg_n_style_mem'
p428
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p429
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00404720\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004044f0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p431
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p432
S'.text:0000000000404780\n.text:0000000000404781\n.text:0000000000404783\n.text:0000000000404785\n.text:0000000000404786\n.text:000000000040478a\n.text:000000000040478d\n.text:0000000000404790\n.text:0000000000404792\n.text:0000000000404795\n.text:0000000000404798\n.text:000000000040479d\n.text:000000000040479f\n.text:00000000004047a2\n.text:00000000004047a5\n.text:00000000004047a8\n.text:00000000004047ad\n.text:00000000004047b1\n.text:00000000004047b2\n.text:00000000004047b4\n.text:00000000004047b6\n.text:00000000004047b7\n'
p433
tp434
sS'_exit'
p435
(S'\n__stdcall _exit(int __status)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060a040)();\u000a  return;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x0060a040]\n'
p438
S'ff 25 6a 8d 20 00\n'
p439
S'.plt:00000000004012d0\n'
p440
tp441
sS'free_entry'
p442
(S'\n__stdcall free_entry(Hash_table * table, hash_entry * entry)\n'
p443
V\u000avoid free_entry(Hash_table *table,hash_entry *entry)\u000a\u000a{\u000a  entry->data = (void *)0x0;\u000a  entry->next = table->free_entry_list;\u000a  table->free_entry_list = entry;\u000a  return;\u000a}\u000a\u000a
p444
S'MOV qword ptr [RSI],0x0\nMOV RAX,qword ptr [RDI + 0x48]\nMOV qword ptr [RSI + 0x8],RAX\nMOV qword ptr [RDI + 0x48],RSI\nRET\n'
p445
S'48 c7 06 00 00 00 00\n48 8b 47 48\n48 89 46 08\n48 89 77 48\nc3\n'
p446
S'.text:0000000000403410\n.text:0000000000403417\n.text:000000000040341b\n.text:000000000040341f\n.text:0000000000403423\n'
p447
tp448
sS'hash_initialize'
p449
(S'\n__stdcall hash_initialize(size_t candidate, Hash_tuning * tuning, Hash_hasher * hasher, Hash_comparator * comparator, Hash_data_freer * data_freer)\n'
p450
V\u000aHash_table *\u000ahash_initialize(size_t candidate,Hash_tuning *tuning,size_t (*hasher)(void *,size_t),\u000a               _Bool (*comparator)(void *,void *),void (*data_freer)(void *))\u000a\u000a{\u000a  _Bool _Var1;\u000a  Hash_table *table;\u000a  size_t n;\u000a  hash_entry *phVar2;\u000a  code *pcVar3;\u000a  Hash_tuning *tuning_00;\u000a  code *pcVar4;\u000a  \u000a  pcVar3 = raw_hasher;\u000a  if (hasher != (size_t (*)(void *,size_t))0x0) {\u000a    pcVar3 = hasher;\u000a  }\u000a  pcVar4 = raw_comparator;\u000a  if (comparator != (_Bool (*)(void *,void *))0x0) {\u000a    pcVar4 = comparator;\u000a  }\u000a  table = (Hash_table *)malloc(0x50);\u000a  if (table != (Hash_table *)0x0) {\u000a    tuning_00 = &default_tuning;\u000a    if (tuning != (Hash_tuning *)0x0) {\u000a      tuning_00 = tuning;\u000a    }\u000a    table->tuning = tuning_00;\u000a    _Var1 = check_tuning(table);\u000a    if (_Var1 != false) {\u000a      n = compute_bucket_size(candidate,tuning_00);\u000a      table->n_buckets = n;\u000a      if (n != 0) {\u000a        phVar2 = (hash_entry *)rpl_calloc(n,0x10);\u000a        table->bucket = phVar2;\u000a        if (phVar2 != (hash_entry *)0x0) {\u000a          table->bucket_limit = phVar2 + table->n_buckets;\u000a          *(undefined4 *)&table->n_buckets_used = 0;\u000a          *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a          *(undefined4 *)&table->n_entries = 0;\u000a          *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a          table->hasher = pcVar3;\u000a          table->comparator = pcVar4;\u000a          table->data_freer = data_freer;\u000a          table->free_entry_list = (hash_entry *)0x0;\u000a          return table;\u000a        }\u000a      }\u000a    }\u000a    free(table);\u000a  }\u000a  return (Hash_table *)0x0;\u000a}\u000a\u000a
p451
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,R8\nMOV R12,RSI\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBP,0x402990\nCMOVNZ RBP,RDX\nTEST RCX,RCX\nMOV R14D,0x4029b0\nCMOVNZ R14,RCX\nMOV EDI,0x50\nCALL 0x004014c0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00402975\nMOV qword ptr [RSP],R13\nTEST R12,R12\nMOV R13D,0x4069fc\nCMOVNZ R13,R12\nMOV qword ptr [RBX + 0x28],R13\nMOV RDI,RBX\nCALL 0x004029c0\nTEST AL,AL\nJZ 0x0040296d\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00402a40\nMOV qword ptr [RBX + 0x10],RAX\nTEST RAX,RAX\nJZ 0x0040296d\nMOV ESI,0x10\nMOV RDI,RAX\nCALL 0x00405610\nMOV qword ptr [RBX],RAX\nTEST RAX,RAX\nJZ 0x0040296d\nMOV RCX,qword ptr [RBX + 0x10]\nSHL RCX,0x4\nADD RAX,RCX\nMOV qword ptr [RBX + 0x8],RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x18],XMM0\nMOV qword ptr [RBX + 0x30],RBP\nMOV qword ptr [RBX + 0x38],R14\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x40],RAX\nMOV qword ptr [RBX + 0x48],0x0\nJMP 0x00402977\nMOV RDI,RBX\nCALL 0x00401290\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p452
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 c5\n49 89 f4\n49 89 ff\n48 85 d2\nbd 90 29 40 00\n48 0f 45 ea\n48 85 c9\n41 be b0 29 40 00\n4c 0f 45 f1\nbf 50 00 00 00\ne8 d9 eb ff ff\n48 89 c3\n48 85 db\n0f 84 82 00 00 00\n4c 89 2c 24\n4d 85 e4\n41 bd fc 69 40 00\n4d 0f 45 ec\n4c 89 6b 28\n48 89 df\ne8 b0 00 00 00\n84 c0\n74 59\n4c 89 ff\n4c 89 ee\ne8 21 01 00 00\n48 89 43 10\n48 85 c0\n74 45\nbe 10 00 00 00\n48 89 c7\ne8 db 2c 00 00\n48 89 03\n48 85 c0\n74 30\n48 8b 4b 10\n48 c1 e1 04\n48 01 c8\n48 89 43 08\n0f 57 c0\n0f 11 43 18\n48 89 6b 30\n4c 89 73 38\n48 8b 04 24\n48 89 43 40\n48 c7 43 48 00 00 00 00\neb 0a\n48 89 df\ne8 1b e9 ff ff\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p453
S'.text:00000000004028b0\n.text:00000000004028b1\n.text:00000000004028b3\n.text:00000000004028b5\n.text:00000000004028b7\n.text:00000000004028b9\n.text:00000000004028ba\n.text:00000000004028bb\n.text:00000000004028be\n.text:00000000004028c1\n.text:00000000004028c4\n.text:00000000004028c7\n.text:00000000004028cc\n.text:00000000004028d0\n.text:00000000004028d3\n.text:00000000004028d9\n.text:00000000004028dd\n.text:00000000004028e2\n.text:00000000004028e7\n.text:00000000004028ea\n.text:00000000004028ed\n.text:00000000004028f3\n.text:00000000004028f7\n.text:00000000004028fa\n.text:0000000000402900\n.text:0000000000402904\n.text:0000000000402908\n.text:000000000040290b\n.text:0000000000402910\n.text:0000000000402912\n.text:0000000000402914\n.text:0000000000402917\n.text:000000000040291a\n.text:000000000040291f\n.text:0000000000402923\n.text:0000000000402926\n.text:0000000000402928\n.text:000000000040292d\n.text:0000000000402930\n.text:0000000000402935\n.text:0000000000402938\n.text:000000000040293b\n.text:000000000040293d\n.text:0000000000402941\n.text:0000000000402945\n.text:0000000000402948\n.text:000000000040294c\n.text:000000000040294f\n.text:0000000000402953\n.text:0000000000402957\n.text:000000000040295b\n.text:000000000040295f\n.text:0000000000402963\n.text:000000000040296b\n.text:000000000040296d\n.text:0000000000402970\n.text:0000000000402975\n.text:0000000000402977\n.text:000000000040297a\n.text:000000000040297e\n.text:000000000040297f\n.text:0000000000402981\n.text:0000000000402983\n.text:0000000000402985\n.text:0000000000402987\n.text:0000000000402988\n'
p454
tp455
sS'xrealloc'
p456
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p457
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p458
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00405477\nTEST RBX,RBX\nJNZ 0x00405477\nCALL 0x00401290\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401510\nTEST RBX,RBX\nJZ 0x00405489\nTEST RAX,RAX\nJZ 0x0040548b\nPOP RBX\nRET\nCALL 0x004055b0\n'
p459
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 1d be ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 91 c0 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p460
S'.text:0000000000405460\n.text:0000000000405461\n.text:0000000000405464\n.text:0000000000405467\n.text:0000000000405469\n.text:000000000040546c\n.text:000000000040546e\n.text:0000000000405473\n.text:0000000000405475\n.text:0000000000405476\n.text:0000000000405477\n.text:000000000040547a\n.text:000000000040547f\n.text:0000000000405482\n.text:0000000000405484\n.text:0000000000405487\n.text:0000000000405489\n.text:000000000040548a\n.text:000000000040548b\n'
p461
tp462
sS'xgetcwd'
p463
(S'\n__stdcall xgetcwd()\n'
p464
V\u000achar * xgetcwd(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  int *piVar2;\u000a  \u000a  pcVar1 = getcwd((char *)0x0,0);\u000a  if (pcVar1 == (char *)0x0) {\u000a    piVar2 = __errno_location();\u000a    if (*piVar2 == 0xc) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die();\u000a    }\u000a  }\u000a  return pcVar1;\u000a}\u000a\u000a
p465
S'PUSH RBX\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x004013f0\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x004055fc\nCALL 0x004012b0\nCMP dword ptr [RAX],0xc\nJZ 0x00405601\nMOV RAX,RBX\nPOP RBX\nRET\nCALL 0x004055b0\n'
p466
S'53\n31 ff\n31 f6\ne8 06 be ff ff\n48 89 c3\n48 85 db\n75 0a\ne8 b9 bc ff ff\n83 38 0c\n74 05\n48 89 d8\n5b\nc3\ne8 aa ff ff ff\n'
p467
S'.text:00000000004055e0\n.text:00000000004055e1\n.text:00000000004055e3\n.text:00000000004055e5\n.text:00000000004055ea\n.text:00000000004055ed\n.text:00000000004055f0\n.text:00000000004055f2\n.text:00000000004055f7\n.text:00000000004055fa\n.text:00000000004055fc\n.text:00000000004055ff\n.text:0000000000405600\n.text:0000000000405601\n'
p468
tp469
sS'dir_name'
p470
(S'\n__stdcall dir_name(char * file)\n'
p471
V\u000achar * dir_name(char *file)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = mdir_name(file);\u000a  if (pcVar1 != (char *)0x0) {\u000a    return pcVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p472
S'PUSH RAX\nCALL 0x00405960\nTEST RAX,RAX\nJZ 0x0040590d\nPOP RCX\nRET\nCALL 0x004055b0\n'
p473
S'50\ne8 5a 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 9e fc ff ff\n'
p474
S'.text:0000000000405900\n.text:0000000000405901\n.text:0000000000405906\n.text:0000000000405909\n.text:000000000040590b\n.text:000000000040590c\n.text:000000000040590d\n'
p475
tp476
sS'close_stdout'
p477
(S'\n__stdcall close_stdout()\n'
p478
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402327;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x40693d,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402327:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p479
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060a268]\nCALL 0x00405890\nTEST EAX,EAX\nJZ 0x00402327\nCMP byte ptr [0x0060a298],0x0\nJZ 0x0040233c\nCALL 0x004012b0\nCMP dword ptr [RAX],0x20\nJNZ 0x0040233c\nMOV RDI,qword ptr [0x0060a280]\nCALL 0x00405890\nTEST EAX,EAX\nJNZ 0x00402381\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40692d\nMOV EDX,0x5\nCALL 0x00401350\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060a290]\nCALL 0x004012b0\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x0040238c\nXOR EDI,EDI\nMOV EDX,0x40693d\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401560\nMOV EDI,dword ptr [0x0060a1f0]\nCALL 0x004012d0\nMOV EDI,dword ptr [0x0060a1f0]\nCALL 0x004012d0\nMOV RDI,RBX\nCALL 0x00404880\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x406939\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401560\nMOV EDI,dword ptr [0x0060a1f0]\nCALL 0x004012d0\n'
p480
S'55\n41 56\n53\n48 8b 3d 5d 7f 20 00\ne8 80 35 00 00\n85 c0\n74 13\n80 3d 7d 7f 20 00 00\n74 1f\ne8 8e ef ff ff\n83 38 20\n75 15\n48 8b 3d 52 7f 20 00\ne8 5d 35 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 2d 69 40 00\nba 05 00 00 00\ne8 03 f0 ff ff\n49 89 c6\n48 8b 1d 39 7f 20 00\ne8 54 ef ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 3d 69 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 ea f1 ff ff\n8b 3d 74 7e 20 00\ne8 4f ef ff ff\n8b 3d 69 7e 20 00\ne8 44 ef ff ff\n48 89 df\ne8 ec 24 00 00\n48 89 c1\n31 ff\nba 39 69 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 b6 f1 ff ff\n8b 3d 40 7e 20 00\ne8 1b ef ff ff\n'
p481
S'.text:0000000000402300\n.text:0000000000402301\n.text:0000000000402303\n.text:0000000000402304\n.text:000000000040230b\n.text:0000000000402310\n.text:0000000000402312\n.text:0000000000402314\n.text:000000000040231b\n.text:000000000040231d\n.text:0000000000402322\n.text:0000000000402325\n.text:0000000000402327\n.text:000000000040232e\n.text:0000000000402333\n.text:0000000000402335\n.text:0000000000402337\n.text:0000000000402338\n.text:000000000040233a\n.text:000000000040233b\n.text:000000000040233c\n.text:000000000040233e\n.text:0000000000402343\n.text:0000000000402348\n.text:000000000040234d\n.text:0000000000402350\n.text:0000000000402357\n.text:000000000040235c\n.text:000000000040235f\n.text:0000000000402361\n.text:0000000000402363\n.text:0000000000402365\n.text:000000000040236a\n.text:000000000040236c\n.text:000000000040236e\n.text:0000000000402371\n.text:0000000000402376\n.text:000000000040237c\n.text:0000000000402381\n.text:0000000000402387\n.text:000000000040238c\n.text:000000000040238f\n.text:0000000000402394\n.text:0000000000402397\n.text:0000000000402399\n.text:000000000040239e\n.text:00000000004023a0\n.text:00000000004023a2\n.text:00000000004023a5\n.text:00000000004023aa\n.text:00000000004023b0\n'
p482
tp483
sS'version_etc_ar'
p484
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p485
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p486
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00405270\nJMP 0x00404f00\n'
p487
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p488
S'.text:0000000000405260\n.text:0000000000405267\n.text:0000000000405270\n.text:0000000000405276\n.text:000000000040527a\n.text:000000000040527c\n'
p489
tp490
sS'c_isxdigit'
p491
(S'\n__stdcall c_isxdigit()\n'
p492
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p493
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0040586b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p494
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p495
S'.text:0000000000405850\n.text:0000000000405853\n.text:0000000000405856\n.text:0000000000405858\n.text:0000000000405862\n.text:0000000000405864\n.text:0000000000405867\n.text:000000000040586a\n.text:000000000040586b\n.text:000000000040586d\n'
p496
tp497
sS'__libc_csu_fini'
p498
(S'\n__stdcall __libc_csu_fini()\n'
p499
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p500
S'RET\n'
p501
S'f3 c3\n'
p502
S'.text:0000000000405f70\n'
p503
tp504
sS'__rawmemchr'
p505
(S'\n__stdcall __rawmemchr()\n'
p506
V\u000avoid __rawmemchr(void)\u000a\u000a{\u000a  (*(code *)PTR___rawmemchr_0060a130)();\u000a  return;\u000a}\u000a\u000a
p507
S'JMP qword ptr [0x0060a130]\n'
p508
S'ff 25 7a 8c 20 00\n'
p509
S'.plt:00000000004014b0\n'
p510
tp511
sS'abort'
p512
(S'\n__stdcall abort()\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060a028)();\u000a  return;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x0060a028]\n'
p515
S'ff 25 82 8d 20 00\n'
p516
S'.plt:00000000004012a0\n'
p517
tp518
sS'compute_bucket_size'
p519
(S'\n__stdcall compute_bucket_size(size_t candidate, Hash_tuning * tuning)\n'
p520
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000asize_t compute_bucket_size(size_t candidate,Hash_tuning *tuning)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  float fVar3;\u000a  \u000a  if (tuning->is_n_buckets == false) {\u000a    if ((long)candidate < 0) {\u000a      fVar3 = (float)((ulong)((uint)candidate & 1) | candidate >> 1);\u000a      fVar3 = fVar3 + fVar3;\u000a    }\u000a    else {\u000a      fVar3 = (float)candidate;\u000a    }\u000a    fVar3 = fVar3 / tuning->growth_threshold;\u000a    candidate = (long)fVar3;\u000a    if (DAT_00406988 <= fVar3) {\u000a      candidate = (long)(fVar3 - DAT_00406988) ^ 0x8000000000000000;\u000a    }\u000a    if (_DAT_0040698c <= fVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  sVar1 = next_prime(candidate);\u000a  sVar2 = 0;\u000a  if (SUB168(ZEXT816(sVar1) * ZEXT816(8) >> 0x40,0) == 0) {\u000a    sVar2 = sVar1;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p521
S'CMP byte ptr [RSI + 0x10],0x0\nJNZ 0x00402aa2\nTEST RDI,RDI\nJS 0x00402a52\nCVTSI2SS XMM0,RDI\nJMP 0x00402a67\nMOV RAX,RDI\nSHR RAX,1\nAND EDI,0x1\nOR RDI,RAX\nCVTSI2SS XMM0,RDI\nADDSS XMM0,XMM0\nDIVSS XMM0,dword ptr [RSI + 0x8]\nMOVSS XMM1,dword ptr [0x00406988]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RDI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RDI,RCX\nUCOMISS XMM0,dword ptr [0x0040698c]\nJNC 0x00402ac1\nPUSH RAX\nCALL 0x00403340\nMOV RSI,RAX\nMOV EDX,0x8\nXOR ECX,ECX\nMUL RDX\nCMOVNO RCX,RSI\nADD RSP,0x8\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\n'
p522
S'80 7e 10 00\n75 5c\n48 85 ff\n78 07\nf3 48 0f 2a c7\neb 15\n48 89 f8\n48 d1 e8\n83 e7 01\n48 09 c7\nf3 48 0f 2a c7\nf3 0f 58 c0\nf3 0f 5e 46 08\nf3 0f 10 0d 14 3f 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f8\n0f 2e c1\n48 0f 43 f9\n0f 2e 05 ec 3e 00 00\n73 1f\n50\ne8 98 08 00 00\n48 89 c6\nba 08 00 00 00\n31 c9\n48 f7 e2\n48 0f 41 ce\n48 83 c4 08\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n'
p523
S'.text:0000000000402a40\n.text:0000000000402a44\n.text:0000000000402a46\n.text:0000000000402a49\n.text:0000000000402a4b\n.text:0000000000402a50\n.text:0000000000402a52\n.text:0000000000402a55\n.text:0000000000402a58\n.text:0000000000402a5b\n.text:0000000000402a5e\n.text:0000000000402a63\n.text:0000000000402a67\n.text:0000000000402a6c\n.text:0000000000402a74\n.text:0000000000402a77\n.text:0000000000402a7b\n.text:0000000000402a80\n.text:0000000000402a8a\n.text:0000000000402a8d\n.text:0000000000402a92\n.text:0000000000402a95\n.text:0000000000402a99\n.text:0000000000402aa0\n.text:0000000000402aa2\n.text:0000000000402aa3\n.text:0000000000402aa8\n.text:0000000000402aab\n.text:0000000000402ab0\n.text:0000000000402ab2\n.text:0000000000402ab5\n.text:0000000000402ab9\n.text:0000000000402abd\n.text:0000000000402ac0\n.text:0000000000402ac1\n.text:0000000000402ac3\n.text:0000000000402ac6\n'
p524
tp525
sS'version_etc'
p526
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p527
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p528
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00405332\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00405290\nADD RSP,0xd8\nRET\n'
p529
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p530
S'.text:00000000004052f0\n.text:00000000004052f7\n.text:00000000004052f9\n.text:00000000004052fb\n.text:0000000000405300\n.text:0000000000405305\n.text:000000000040530a\n.text:0000000000405312\n.text:000000000040531a\n.text:0000000000405322\n.text:000000000040532a\n.text:0000000000405332\n.text:0000000000405337\n.text:000000000040533c\n.text:0000000000405341\n.text:0000000000405346\n.text:000000000040534e\n.text:0000000000405353\n.text:000000000040535b\n.text:0000000000405362\n.text:0000000000405365\n.text:000000000040536a\n.text:0000000000405371\n'
p531
tp532
sS'hash_rehash'
p533
(S'\n__stdcall hash_rehash(Hash_table * table, size_t candidate)\n'
p534
V\u000a_Bool hash_rehash(Hash_table *table,size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *local_68;\u000a  hash_entry *local_60;\u000a  size_t local_58;\u000a  undefined4 local_50;\u000a  undefined4 uStack76;\u000a  undefined4 uStack72;\u000a  undefined4 uStack68;\u000a  Hash_tuning *local_40;\u000a  size_t (*local_38)(void *,size_t);\u000a  _Bool (*local_30)(void *,void *);\u000a  void (*local_28)(void *);\u000a  hash_entry *local_20;\u000a  \u000a  local_58 = compute_bucket_size(candidate,table->tuning);\u000a  if (local_58 != 0) {\u000a    if (local_58 == table->n_buckets) {\u000a      return true;\u000a    }\u000a    local_68 = (hash_entry *)rpl_calloc(local_58,0x10);\u000a    if (local_68 != (hash_entry *)0x0) {\u000a      local_60 = local_68 + local_58;\u000a      local_50 = 0;\u000a      uStack76 = 0;\u000a      uStack72 = 0;\u000a      uStack68 = 0;\u000a      local_40 = table->tuning;\u000a      local_38 = table->hasher;\u000a      local_30 = table->comparator;\u000a      local_28 = table->data_freer;\u000a      local_20 = table->free_entry_list;\u000a      _Var1 = transfer_entries((Hash_table *)&local_68,table);\u000a      if (_Var1 != false) {\u000a        free(table->bucket);\u000a        table->bucket = local_68;\u000a        table->bucket_limit = local_60;\u000a        table->n_buckets = local_58;\u000a        table->n_buckets_used = CONCAT44(uStack76,local_50);\u000a        table->free_entry_list = local_20;\u000a        return true;\u000a      }\u000a      table->free_entry_list = local_20;\u000a      _Var1 = transfer_entries(table,(Hash_table *)&local_68);\u000a      if ((_Var1 == false) ||\u000a         (_Var1 = transfer_entries(table,(Hash_table *)&local_68), _Var1 == false)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      free(local_68);\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p535
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x50\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x28]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL 0x00402a40\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00402d71\nMOV R14B,0x1\nCMP RBP,qword ptr [RBX + 0x10]\nJZ 0x00402d74\nMOV ESI,0x10\nMOV RDI,RBP\nCALL 0x00405610\nMOV qword ptr [RSP],RAX\nTEST RAX,RAX\nJZ 0x00402d71\nMOV qword ptr [RSP + 0x10],RBP\nSHL RBP,0x4\nADD RBP,qword ptr [RSP]\nMOV qword ptr [RSP + 0x8],RBP\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RSP + 0x18],XMM0\nMOV RAX,qword ptr [RBX + 0x28]\nMOV qword ptr [RSP + 0x28],RAX\nMOV RAX,qword ptr [RBX + 0x30]\nMOV qword ptr [RSP + 0x30],RAX\nMOV RAX,qword ptr [RBX + 0x38]\nMOV qword ptr [RSP + 0x38],RAX\nMOV RAX,qword ptr [RBX + 0x40]\nMOV qword ptr [RSP + 0x40],RAX\nMOV RAX,qword ptr [RBX + 0x48]\nMOV qword ptr [RSP + 0x48],RAX\nMOV RDI,RSP\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x00402d90\nTEST AL,AL\nJZ 0x00402d3a\nMOV RDI,qword ptr [RBX]\nCALL 0x00401290\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RBX + 0x10],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX + 0x18],RAX\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nJMP 0x00402d74\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nMOV RSI,RSP\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00402d90\nTEST AL,AL\nJZ 0x00402d80\nMOV RSI,RSP\nXOR EDX,EDX\nMOV RDI,RBX\nCALL 0x00402d90\nTEST AL,AL\nJZ 0x00402d80\nMOV RDI,qword ptr [RSP]\nCALL 0x00401290\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x50\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x004012a0\n'
p536
S'55\n41 56\n53\n48 83 ec 50\n48 89 fb\n48 8b 43 28\n48 89 f7\n48 89 c6\ne8 c6 fd ff ff\n48 89 c5\n48 85 ed\n0f 84 eb 00 00 00\n41 b6 01\n48 3b 6b 10\n0f 84 e1 00 00 00\nbe 10 00 00 00\n48 89 ef\ne8 70 29 00 00\n48 89 04 24\n48 85 c0\n0f 84 c4 00 00 00\n48 89 6c 24 10\n48 c1 e5 04\n48 03 2c 24\n48 89 6c 24 08\n0f 57 c0\n0f 11 44 24 18\n48 8b 43 28\n48 89 44 24 28\n48 8b 43 30\n48 89 44 24 30\n48 8b 43 38\n48 89 44 24 38\n48 8b 43 40\n48 89 44 24 40\n48 8b 43 48\n48 89 44 24 48\n48 89 e7\n31 d2\n48 89 de\ne8 8f 00 00 00\n84 c0\n74 35\n48 8b 3b\ne8 83 e5 ff ff\n48 8b 04 24\n48 89 03\n48 8b 44 24 08\n48 89 43 08\n48 8b 44 24 10\n48 89 43 10\n48 8b 44 24 18\n48 89 43 18\n48 8b 44 24 48\n48 89 43 48\neb 3a\n48 8b 44 24 48\n48 89 43 48\n48 89 e6\nba 01 00 00 00\n48 89 df\ne8 3d 00 00 00\n84 c0\n74 29\n48 89 e6\n31 d2\n48 89 df\ne8 2c 00 00 00\n84 c0\n74 18\n48 8b 3c 24\ne8 1f e5 ff ff\n45 31 f6\n44 89 f0\n48 83 c4 50\n5b\n41 5e\n5d\nc3\ne8 1b e5 ff ff\n'
p537
S'.text:0000000000402c60\n.text:0000000000402c61\n.text:0000000000402c63\n.text:0000000000402c64\n.text:0000000000402c68\n.text:0000000000402c6b\n.text:0000000000402c6f\n.text:0000000000402c72\n.text:0000000000402c75\n.text:0000000000402c7a\n.text:0000000000402c7d\n.text:0000000000402c80\n.text:0000000000402c86\n.text:0000000000402c89\n.text:0000000000402c8d\n.text:0000000000402c93\n.text:0000000000402c98\n.text:0000000000402c9b\n.text:0000000000402ca0\n.text:0000000000402ca4\n.text:0000000000402ca7\n.text:0000000000402cad\n.text:0000000000402cb2\n.text:0000000000402cb6\n.text:0000000000402cba\n.text:0000000000402cbf\n.text:0000000000402cc2\n.text:0000000000402cc7\n.text:0000000000402ccb\n.text:0000000000402cd0\n.text:0000000000402cd4\n.text:0000000000402cd9\n.text:0000000000402cdd\n.text:0000000000402ce2\n.text:0000000000402ce6\n.text:0000000000402ceb\n.text:0000000000402cef\n.text:0000000000402cf4\n.text:0000000000402cf7\n.text:0000000000402cf9\n.text:0000000000402cfc\n.text:0000000000402d01\n.text:0000000000402d03\n.text:0000000000402d05\n.text:0000000000402d08\n.text:0000000000402d0d\n.text:0000000000402d11\n.text:0000000000402d14\n.text:0000000000402d19\n.text:0000000000402d1d\n.text:0000000000402d22\n.text:0000000000402d26\n.text:0000000000402d2b\n.text:0000000000402d2f\n.text:0000000000402d34\n.text:0000000000402d38\n.text:0000000000402d3a\n.text:0000000000402d3f\n.text:0000000000402d43\n.text:0000000000402d46\n.text:0000000000402d4b\n.text:0000000000402d4e\n.text:0000000000402d53\n.text:0000000000402d55\n.text:0000000000402d57\n.text:0000000000402d5a\n.text:0000000000402d5c\n.text:0000000000402d5f\n.text:0000000000402d64\n.text:0000000000402d66\n.text:0000000000402d68\n.text:0000000000402d6c\n.text:0000000000402d71\n.text:0000000000402d74\n.text:0000000000402d77\n.text:0000000000402d7b\n.text:0000000000402d7c\n.text:0000000000402d7e\n.text:0000000000402d7f\n.text:0000000000402d80\n'
p538
tp539
sS'lseek'
p540
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060a0b8)();\u000a  return _Var1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x0060a0b8]\n'
p543
S'ff 25 f2 8c 20 00\n'
p544
S'.plt:00000000004013c0\n'
p545
tp546
sS'hash_get_first'
p547
(S'\n__stdcall hash_get_first(Hash_table * table)\n'
p548
V\u000avoid * hash_get_first(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  if (table->n_entries == 0) {\u000a    return (void *)0x0;\u000a  }\u000a  phVar1 = table->bucket;\u000a  if (phVar1 < table->bucket_limit) {\u000a    do {\u000a      if (phVar1->data != (void *)0x0) {\u000a        return phVar1->data;\u000a      }\u000a      phVar1 = phVar1 + 1;\u000a    } while (phVar1 < table->bucket_limit);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p549
S'CMP qword ptr [RDI + 0x20],0x0\nJZ 0x00402703\nMOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJC 0x004026fa\nJMP 0x00402706\nADD RCX,0x10\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x00402706\nMOV RAX,qword ptr [RCX]\nTEST RAX,RAX\nJZ 0x004026f0\nRET\nXOR EAX,EAX\nRET\nPUSH RAX\nCALL 0x004012a0\n'
p550
S'48 83 7f 20 00\n74 2c\n48 8b 0f\n48 3b 4f 08\n72 1a\neb 24\n48 83 c1 10\n48 3b 4f 08\n73 0c\n48 8b 01\n48 85 c0\n74 ee\nc3\n31 c0\nc3\n50\ne8 94 eb ff ff\n'
p551
S'.text:00000000004026d0\n.text:00000000004026d5\n.text:00000000004026d7\n.text:00000000004026da\n.text:00000000004026de\n.text:00000000004026e0\n.text:00000000004026f0\n.text:00000000004026f4\n.text:00000000004026f8\n.text:00000000004026fa\n.text:00000000004026fd\n.text:0000000000402700\n.text:0000000000402702\n.text:0000000000402703\n.text:0000000000402705\n.text:0000000000402706\n.text:0000000000402707\n'
p552
tp553
sS'readlink'
p554
(S'\n__stdcall readlink(char * __path, char * __buf, size_t __len)\n'
p555
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t readlink(char *__path,char *__buf,size_t __len)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_readlink_0060a060)();\u000a  return sVar1;\u000a}\u000a\u000a
p556
S'JMP qword ptr [0x0060a060]\n'
p557
S'ff 25 4a 8d 20 00\n'
p558
S'.plt:0000000000401310\n'
p559
tp560
sS'hash_get_n_entries'
p561
(S'\n__stdcall hash_get_n_entries(Hash_table * table)\n'
p562
V\u000asize_t hash_get_n_entries(Hash_table *table)\u000a\u000a{\u000a  return table->n_entries;\u000a}\u000a\u000a
p563
S'MOV RAX,qword ptr [RDI + 0x20]\nRET\n'
p564
S'48 8b 47 20\nc3\n'
p565
S'.text:00000000004024a0\n.text:00000000004024a4\n'
p566
tp567
sS'quotearg_n_mem'
p568
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p569
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p570
S'MOV ECX,0x60a2b0\nJMP 0x004044f0\n'
p571
S'b9 b0 a2 60 00\ne9 36 fe ff ff\n'
p572
S'.text:00000000004046b0\n.text:00000000004046b5\n'
p573
tp574
sS'__printf_chk'
p575
(S'\n__stdcall __printf_chk()\n'
p576
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060a178)();\u000a  return;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x0060a178]\n'
p578
S'ff 25 32 8c 20 00\n'
p579
S'.plt:0000000000401540\n'
p580
tp581
sS'hash_lookup'
p582
(S'\n__stdcall hash_lookup(Hash_table * table, void * entry)\n'
p583
V\u000avoid * hash_lookup(Hash_table *table,void *entry)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *phVar2;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  if (phVar2->data != (void *)0x0) {\u000a    while (phVar2 != (hash_entry *)0x0) {\u000a      if ((phVar2->data == entry) ||\u000a         (_Var1 = (*table->comparator)(entry,phVar2->data), _Var1 != false)) {\u000a        return phVar2->data;\u000a      }\u000a      phVar2 = phVar2->next;\u000a    }\u000a  }\u000a  return (void *)0x0;\u000a}\u000a\u000a
p584
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R15,RDI\nCALL 0x004026a0\nMOV RBX,RAX\nXOR R14D,R14D\nCMP qword ptr [RBX],0x0\nJZ 0x00402691\nTEST RBX,RBX\nJZ 0x00402691\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nMOV RSI,qword ptr [RBX]\nCMP RSI,R12\nJZ 0x0040268e\nMOV RDI,R12\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x0040268e\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00402670\nJMP 0x00402691\nMOV R14,qword ptr [RBX]\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p585
S'41 57\n41 56\n41 54\n53\n50\n49 89 f4\n49 89 ff\ne8 4d 00 00 00\n48 89 c3\n45 31 f6\n48 83 3b 00\n74 32\n48 85 db\n74 2d\n45 31 f6\n66 0f 1f 84 00 00 00 00 00\n48 8b 33\n4c 39 e6\n74 16\n4c 89 e7\n41 ff 57 38\n84 c0\n75 0b\n48 8b 5b 08\n48 85 db\n75 e4\neb 03\n4c 8b 33\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p586
S'.text:0000000000402640\n.text:0000000000402642\n.text:0000000000402644\n.text:0000000000402646\n.text:0000000000402647\n.text:0000000000402648\n.text:000000000040264b\n.text:000000000040264e\n.text:0000000000402653\n.text:0000000000402656\n.text:0000000000402659\n.text:000000000040265d\n.text:000000000040265f\n.text:0000000000402662\n.text:0000000000402664\n.text:0000000000402667\n.text:0000000000402670\n.text:0000000000402673\n.text:0000000000402676\n.text:0000000000402678\n.text:000000000040267b\n.text:000000000040267f\n.text:0000000000402681\n.text:0000000000402683\n.text:0000000000402687\n.text:000000000040268a\n.text:000000000040268c\n.text:000000000040268e\n.text:0000000000402691\n.text:0000000000402694\n.text:0000000000402698\n.text:0000000000402699\n.text:000000000040269b\n.text:000000000040269d\n.text:000000000040269f\n'
p587
tp588
sS'base_len'
p589
(S'\n__stdcall base_len(char * name)\n'
p590
V\u000asize_t base_len(char *name)\u000a\u000a{\u000a  long lVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  \u000a  sVar2 = strlen(name);\u000a  do {\u000a    sVar3 = sVar2;\u000a    if (sVar2 < 2) {\u000a      return sVar3;\u000a    }\u000a    lVar1 = sVar2 - 1;\u000a    sVar2 = sVar2 - 1;\u000a  } while (name[lVar1] == '/');\u000a  return sVar3;\u000a}\u000a\u000a
p591
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401370\nMOV RCX,RAX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP RAX,0x2\nJC 0x00405a44\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00405a30\nPOP RBX\nRET\n'
p592
S'53\n48 89 fb\ne8 47 b9 ff ff\n48 89 c1\n0f 1f 40 00\n48 89 c8\n48 83 f8 02\n72 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ec\n5b\nc3\n'
p593
S'.text:0000000000405a20\n.text:0000000000405a21\n.text:0000000000405a24\n.text:0000000000405a29\n.text:0000000000405a2c\n.text:0000000000405a30\n.text:0000000000405a33\n.text:0000000000405a37\n.text:0000000000405a39\n.text:0000000000405a3d\n.text:0000000000405a42\n.text:0000000000405a44\n.text:0000000000405a45\n'
p594
tp595
sS'getcwd'
p596
(S'\n__stdcall getcwd(char * __buf, size_t __size)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getcwd(char *__buf,size_t __size)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getcwd_0060a0d0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x0060a0d0]\n'
p599
S'ff 25 da 8c 20 00\n'
p600
S'.plt:00000000004013f0\n'
p601
tp602
sS'emit_ancillary_info'
p603
(S'\n__stdcall emit_ancillary_info()\n'
p604
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00406200;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("readlink",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "readlink";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,"readlink",uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/","readlink");\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x4070e1;\u000a  if (__s2 == "readlink") {\u000a    uVar3 = 0x4067a2;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p605
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x406200\nMOV ESI,0x406786\nNOP\nMOV EDI,0x4066d9\nCALL 0x00401460\nTEST EAX,EAX\nJZ 0x0040185b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401840\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x4066d9\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x4067e5\nMOV EDX,0x5\nCALL 0x00401350\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406703\nMOV ECX,0x4067fc\nXOR EAX,EAX\nCALL 0x00401540\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401530\nTEST RAX,RAX\nJZ 0x004018e4\nMOV ESI,0x406823\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x004012c0\nTEST EAX,EAX\nJZ 0x004018e4\nXOR EDI,EDI\nMOV ESI,0x406827\nMOV EDX,0x5\nCALL 0x00401350\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4066d9\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401540\nXOR EDI,EDI\nMOV ESI,0x40686c\nMOV EDX,0x5\nCALL 0x00401350\nMOV RSI,RAX\nMOV R14D,0x4066d9\nMOV EDI,0x1\nMOV EDX,0x4067fc\nMOV ECX,0x4066d9\nXOR EAX,EAX\nCALL 0x00401540\nXOR EDI,EDI\nMOV ESI,0x40688b\nMOV EDX,0x5\nCALL 0x00401350\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x4067a2\nMOV ECX,0x4070e1\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401540\n'
p606
S'41 56\n53\n50\nbb 00 62 40 00\nbe 86 67 40 00\n66 90\nbf d9 66 40 00\ne8 16 fc ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb d9 66 40 00\n48 0f 45 d8\n31 ff\nbe e5 67 40 00\nba 05 00 00 00\ne8 d4 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba 03 67 40 00\nb9 fc 67 40 00\n31 c0\ne8 ab fc ff ff\nbf 05 00 00 00\n31 f6\ne8 8f fc ff ff\n48 85 c0\n74 3e\nbe 23 68 40 00\nba 03 00 00 00\n48 89 c7\ne8 08 fa ff ff\n85 c0\n74 28\n31 ff\nbe 27 68 40 00\nba 05 00 00 00\ne8 83 fa ff ff\n48 89 c1\nbf 01 00 00 00\nba d9 66 40 00\n31 c0\n48 89 ce\ne8 5c fc ff ff\n31 ff\nbe 6c 68 40 00\nba 05 00 00 00\ne8 5b fa ff ff\n48 89 c6\n41 be d9 66 40 00\nbf 01 00 00 00\nba fc 67 40 00\nb9 d9 66 40 00\n31 c0\ne8 2c fc ff ff\n31 ff\nbe 8b 68 40 00\nba 05 00 00 00\ne8 2b fa ff ff\n48 89 c2\n4c 39 f3\nb8 a2 67 40 00\nb9 e1 70 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 ee fb ff ff\n'
p607
S'.text:0000000000401830\n.text:0000000000401832\n.text:0000000000401833\n.text:0000000000401834\n.text:0000000000401839\n.text:000000000040183e\n.text:0000000000401840\n.text:0000000000401845\n.text:000000000040184a\n.text:000000000040184c\n.text:000000000040184e\n.text:0000000000401852\n.text:0000000000401856\n.text:0000000000401859\n.text:000000000040185b\n.text:000000000040185f\n.text:0000000000401862\n.text:0000000000401867\n.text:000000000040186b\n.text:000000000040186d\n.text:0000000000401872\n.text:0000000000401877\n.text:000000000040187c\n.text:000000000040187f\n.text:0000000000401884\n.text:0000000000401889\n.text:000000000040188e\n.text:0000000000401890\n.text:0000000000401895\n.text:000000000040189a\n.text:000000000040189c\n.text:00000000004018a1\n.text:00000000004018a4\n.text:00000000004018a6\n.text:00000000004018ab\n.text:00000000004018b0\n.text:00000000004018b3\n.text:00000000004018b8\n.text:00000000004018ba\n.text:00000000004018bc\n.text:00000000004018be\n.text:00000000004018c3\n.text:00000000004018c8\n.text:00000000004018cd\n.text:00000000004018d0\n.text:00000000004018d5\n.text:00000000004018da\n.text:00000000004018dc\n.text:00000000004018df\n.text:00000000004018e4\n.text:00000000004018e6\n.text:00000000004018eb\n.text:00000000004018f0\n.text:00000000004018f5\n.text:00000000004018f8\n.text:00000000004018fe\n.text:0000000000401903\n.text:0000000000401908\n.text:000000000040190d\n.text:000000000040190f\n.text:0000000000401914\n.text:0000000000401916\n.text:000000000040191b\n.text:0000000000401920\n.text:0000000000401925\n.text:0000000000401928\n.text:000000000040192b\n.text:0000000000401930\n.text:0000000000401935\n.text:0000000000401939\n.text:000000000040193e\n.text:0000000000401940\n.text:0000000000401943\n.text:0000000000401946\n.text:000000000040194a\n.text:000000000040194b\n.text:000000000040194d\n'
p608
tp609
sS'version_etc_va'
p610
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p611
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p612
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x004052c0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x004052cc\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x004052e1\nINC R9\nCMP R9,0xa\nJC 0x004052a0\nMOV R8,RSP\nCALL 0x00404f00\nADD RSP,0x58\nRET\n'
p613
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p614
S'.text:0000000000405290\n.text:0000000000405294\n.text:0000000000405297\n.text:00000000004052a0\n.text:00000000004052a3\n.text:00000000004052a7\n.text:00000000004052a9\n.text:00000000004052ac\n.text:00000000004052b0\n.text:00000000004052b4\n.text:00000000004052b7\n.text:00000000004052c0\n.text:00000000004052c4\n.text:00000000004052c8\n.text:00000000004052cc\n.text:00000000004052cf\n.text:00000000004052d3\n.text:00000000004052d6\n.text:00000000004052d8\n.text:00000000004052db\n.text:00000000004052df\n.text:00000000004052e1\n.text:00000000004052e4\n.text:00000000004052e9\n.text:00000000004052ed\n'
p615
tp616
sS'hash_print_statistics'
p617
(S'\n__stdcall hash_print_statistics(Hash_table * table, FILE * stream)\n'
p618
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid hash_print_statistics(Hash_table *table,FILE *stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  undefined auVar5 [16];\u000a  undefined auVar6 [16];\u000a  undefined4 uVar7;\u000a  \u000a  sVar1 = hash_get_n_entries(table);\u000a  sVar2 = hash_get_n_buckets(table);\u000a  sVar3 = hash_get_n_buckets_used(table);\u000a  sVar4 = hash_get_max_bucket_length(table);\u000a  __fprintf_chk(stream,1,0x406990,sVar1);\u000a  __fprintf_chk(stream,1,"# buckets:         %lu\u005cn",sVar2);\u000a  uVar7 = SUB164(_DAT_00406940 >> 0x20,0);\u000a  auVar5 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar3) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_00406940,0),\u000a                                   SUB124(ZEXT812(sVar3) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_00406958,DAT_00406950));\u000a  auVar5 = addpd(CONCAT412(SUB164(auVar5 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar5,0),SUB168(auVar5 >> 0x40,0))),auVar5);\u000a  auVar6 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar2) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_00406940,0),\u000a                                   SUB124(ZEXT812(sVar2) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_00406958,DAT_00406950));\u000a  auVar6 = addpd(CONCAT412(SUB164(auVar6 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar6,0),SUB168(auVar6 >> 0x40,0))),auVar6);\u000a  __fprintf_chk(CONCAT88(SUB168(auVar5 >> 0x40,0),\u000a                         (SUB168(auVar5,0) * _DAT_00406970) / SUB168(auVar6,0)),stream,1,\u000a                "# buckets used:    %lu (%.2f%%)\u005cn",sVar3);\u000a  __fprintf_chk(stream,1,"max bucket length: %lu\u005cn",sVar4);\u000a  return;\u000a}\u000a\u000a
p619
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,RSI\nMOV RBX,RDI\nCALL 0x004024a0\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00402480\nMOV R12,RAX\nMOV RDI,RBX\nCALL 0x00402490\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x004024b0\nMOV R14,RAX\nMOV ESI,0x1\nMOV EDX,0x406990\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,RBP\nCALL 0x004015c0\nMOV ESI,0x1\nMOV EDX,0x4069a8\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R12\nCALL 0x004015c0\nMOVQ XMM1,R15\nMOVDQA XMM2,xmmword ptr [0x00406940]\nPUNPCKLDQ XMM1,XMM2\nMOVAPD XMM3,xmmword ptr [0x00406950]\nSUBPD XMM1,XMM3\nPSHUFD XMM0,XMM1,0x4e\nADDPD XMM0,XMM1\nMULSD XMM0,qword ptr [0x00406970]\nMOVQ XMM1,R12\nPUNPCKLDQ XMM1,XMM2\nSUBPD XMM1,XMM3\nPSHUFD XMM2,XMM1,0x4e\nADDPD XMM2,XMM1\nDIVSD XMM0,XMM2\nMOV ESI,0x1\nMOV EDX,0x4069c0\nMOV AL,0x1\nMOV RDI,R13\nMOV RCX,R15\nCALL 0x004015c0\nMOV ESI,0x1\nMOV EDX,0x4069e1\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004015c0\n'
p620
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f5\n48 89 fb\ne8 3a ff ff ff\n48 89 c5\n48 89 df\ne8 0f ff ff ff\n49 89 c4\n48 89 df\ne8 14 ff ff ff\n49 89 c7\n48 89 df\ne8 29 ff ff ff\n49 89 c6\nbe 01 00 00 00\nba 90 69 40 00\n31 c0\n4c 89 ef\n48 89 e9\ne8 1f f0 ff ff\nbe 01 00 00 00\nba a8 69 40 00\n31 c0\n4c 89 ef\n4c 89 e1\ne8 08 f0 ff ff\n66 49 0f 6e cf\n66 0f 6f 15 7b 43 00 00\n66 0f 62 ca\n66 0f 28 1d 7f 43 00 00\n66 0f 5c cb\n66 0f 70 c1 4e\n66 0f 58 c1\nf2 0f 59 05 8a 43 00 00\n66 49 0f 6e cc\n66 0f 62 ca\n66 0f 5c cb\n66 0f 70 d1 4e\n66 0f 58 d1\nf2 0f 5e c2\nbe 01 00 00 00\nba c0 69 40 00\nb0 01\n4c 89 ef\n4c 89 f9\ne8 a9 ef ff ff\nbe 01 00 00 00\nba e1 69 40 00\n31 c0\n4c 89 ef\n4c 89 f1\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 84 ef ff ff\n'
p621
S'.text:0000000000402550\n.text:0000000000402551\n.text:0000000000402553\n.text:0000000000402555\n.text:0000000000402557\n.text:0000000000402559\n.text:000000000040255a\n.text:000000000040255b\n.text:000000000040255e\n.text:0000000000402561\n.text:0000000000402566\n.text:0000000000402569\n.text:000000000040256c\n.text:0000000000402571\n.text:0000000000402574\n.text:0000000000402577\n.text:000000000040257c\n.text:000000000040257f\n.text:0000000000402582\n.text:0000000000402587\n.text:000000000040258a\n.text:000000000040258f\n.text:0000000000402594\n.text:0000000000402596\n.text:0000000000402599\n.text:000000000040259c\n.text:00000000004025a1\n.text:00000000004025a6\n.text:00000000004025ab\n.text:00000000004025ad\n.text:00000000004025b0\n.text:00000000004025b3\n.text:00000000004025b8\n.text:00000000004025bd\n.text:00000000004025c5\n.text:00000000004025c9\n.text:00000000004025d1\n.text:00000000004025d5\n.text:00000000004025da\n.text:00000000004025de\n.text:00000000004025e6\n.text:00000000004025eb\n.text:00000000004025ef\n.text:00000000004025f3\n.text:00000000004025f8\n.text:00000000004025fc\n.text:0000000000402600\n.text:0000000000402605\n.text:000000000040260a\n.text:000000000040260c\n.text:000000000040260f\n.text:0000000000402612\n.text:0000000000402617\n.text:000000000040261c\n.text:0000000000402621\n.text:0000000000402623\n.text:0000000000402626\n.text:0000000000402629\n.text:000000000040262d\n.text:000000000040262e\n.text:0000000000402630\n.text:0000000000402632\n.text:0000000000402634\n.text:0000000000402636\n.text:0000000000402637\n'
p622
tp623
sS'xzalloc'
p624
(S'\n__stdcall xzalloc(size_t s)\n'
p625
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p626
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00405420\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x004013d0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p627
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 a4 be ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p628
S'.text:0000000000405510\n.text:0000000000405512\n.text:0000000000405513\n.text:0000000000405514\n.text:0000000000405517\n.text:000000000040551c\n.text:000000000040551f\n.text:0000000000405521\n.text:0000000000405524\n.text:0000000000405527\n.text:000000000040552c\n.text:000000000040552f\n.text:0000000000405533\n.text:0000000000405534\n.text:0000000000405536\n'
p629
tp630
sS'next_prime'
p631
(S'\n__stdcall next_prime(size_t candidate)\n'
p632
V\u000asize_t next_prime(size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  size_t candidate_00;\u000a  size_t sVar2;\u000a  \u000a  candidate_00 = 10;\u000a  if (10 < candidate) {\u000a    candidate_00 = candidate;\u000a  }\u000a  candidate_00 = candidate_00 | 1;\u000a  while ((sVar2 = 0xffffffffffffffff, candidate_00 != 0xffffffffffffffff &&\u000a         (_Var1 = is_prime(candidate_00), sVar2 = candidate_00, _Var1 == false))) {\u000a    candidate_00 = candidate_00 + 2;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p633
S'PUSH R14\nPUSH RBX\nPUSH RAX\nCMP RDI,0xa\nMOV EBX,0xa\nCMOVA RBX,RDI\nOR RBX,0x1\nMOV R14,-0x1\nCMP RBX,-0x1\nJNZ 0x0040337a\nJMP 0x00403389\nADD RBX,0x2\nCMP RBX,-0x1\nJZ 0x00403389\nMOV RDI,RBX\nCALL 0x004033a0\nTEST AL,AL\nJZ 0x00403370\nMOV R14,RBX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p634
S'41 56\n53\n50\n48 83 ff 0a\nbb 0a 00 00 00\n48 0f 47 df\n48 83 cb 01\n49 c7 c6 ff ff ff ff\n48 83 fb ff\n75 18\neb 25\n48 83 c3 02\n48 83 fb ff\n74 0f\n48 89 df\ne8 1e 00 00 00\n84 c0\n74 ea\n49 89 de\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p635
S'.text:0000000000403340\n.text:0000000000403342\n.text:0000000000403343\n.text:0000000000403344\n.text:0000000000403348\n.text:000000000040334d\n.text:0000000000403351\n.text:0000000000403355\n.text:000000000040335c\n.text:0000000000403360\n.text:0000000000403362\n.text:0000000000403370\n.text:0000000000403374\n.text:0000000000403378\n.text:000000000040337a\n.text:000000000040337d\n.text:0000000000403382\n.text:0000000000403384\n.text:0000000000403386\n.text:0000000000403389\n.text:000000000040338c\n.text:0000000000403390\n.text:0000000000403391\n.text:0000000000403393\n'
p636
tp637
sS'hash_insert'
p638
(S'\n__stdcall hash_insert(Hash_table * table, void * entry)\n'
p639
V\u000avoid * hash_insert(Hash_table *table,void *entry)\u000a\u000a{\u000a  int iVar1;\u000a  void *matched_ent;\u000a  void *local_10;\u000a  \u000a  iVar1 = hash_insert_if_absent(table,entry,&local_10);\u000a  if (iVar1 == -1) {\u000a    entry = (void *)0x0;\u000a  }\u000a  else {\u000a    if (iVar1 == 0) {\u000a      entry = local_10;\u000a    }\u000a  }\u000a  return entry;\u000a}\u000a\u000a
p640
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nLEA RDX,[RSP + 0x8]\nCALL 0x00402eb0\nCMP EAX,-0x1\nJZ 0x004031a1\nTEST EAX,EAX\nCMOVZ RBX,qword ptr [RSP + 0x8]\nJMP 0x004031a3\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p641
S'53\n48 83 ec 10\n48 89 f3\n48 8d 54 24 08\ne8 1e fd ff ff\n83 f8 ff\n74 0a\n85 c0\n48 0f 44 5c 24 08\neb 02\n31 db\n48 89 d8\n48 83 c4 10\n5b\nc3\n'
p642
S'.text:0000000000403180\n.text:0000000000403181\n.text:0000000000403185\n.text:0000000000403188\n.text:000000000040318d\n.text:0000000000403192\n.text:0000000000403195\n.text:0000000000403197\n.text:0000000000403199\n.text:000000000040319f\n.text:00000000004031a1\n.text:00000000004031a3\n.text:00000000004031a6\n.text:00000000004031aa\n.text:00000000004031ab\n'
p643
tp644
sS'gettext_quote'
p645
(S'\n__stdcall gettext_quote(char * msgid)\n'
p646
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00406fa2;\u000a        pcVar2 = &DAT_00406fa6;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401350\nCMP RAX,RBX\nJNZ 0x00404aa8\nCALL 0x00405a90\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00404ab0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404a58\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406f92\nMOV EAX,0x406f96\nJMP 0x00404aa4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00404ab0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404a96\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406fa2\nMOV EAX,0x406fa6\nJMP 0x00404aa4\nCMP R14D,0x9\nMOV ECX,0x406f86\nMOV EAX,0x406f8a\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p648
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 47 c9 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 79 10 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 92 6f 40 00\nb8 96 6f 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 a2 6f 40 00\nb8 a6 6f 40 00\neb 0e\n41 83 fe 09\nb9 86 6f 40 00\nb8 8a 6f 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p649
S'.text:00000000004049f0\n.text:00000000004049f1\n.text:00000000004049f3\n.text:00000000004049f4\n.text:00000000004049f7\n.text:00000000004049fa\n.text:00000000004049fc\n.text:0000000000404a01\n.text:0000000000404a04\n.text:0000000000404a09\n.text:0000000000404a0c\n.text:0000000000404a12\n.text:0000000000404a17\n.text:0000000000404a1a\n.text:0000000000404a1f\n.text:0000000000404a24\n.text:0000000000404a29\n.text:0000000000404a2f\n.text:0000000000404a35\n.text:0000000000404a38\n.text:0000000000404a3a\n.text:0000000000404a3c\n.text:0000000000404a41\n.text:0000000000404a45\n.text:0000000000404a47\n.text:0000000000404a49\n.text:0000000000404a4c\n.text:0000000000404a51\n.text:0000000000404a56\n.text:0000000000404a58\n.text:0000000000404a5d\n.text:0000000000404a62\n.text:0000000000404a67\n.text:0000000000404a6d\n.text:0000000000404a73\n.text:0000000000404a76\n.text:0000000000404a78\n.text:0000000000404a7a\n.text:0000000000404a7f\n.text:0000000000404a83\n.text:0000000000404a85\n.text:0000000000404a87\n.text:0000000000404a8a\n.text:0000000000404a8f\n.text:0000000000404a94\n.text:0000000000404a96\n.text:0000000000404a9a\n.text:0000000000404a9f\n.text:0000000000404aa4\n.text:0000000000404aa8\n.text:0000000000404aa9\n.text:0000000000404aab\n.text:0000000000404aac\n'
p650
tp651
sS'fclose'
p652
(S'\n__stdcall fclose(FILE * __stream)\n'
p653
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060a070)();\u000a  return iVar1;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x0060a070]\n'
p655
S'ff 25 3a 8d 20 00\n'
p656
S'.plt:0000000000401330\n'
p657
tp658
sS'__ctype_get_mb_cur_max'
p659
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p660
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060a088)();\u000a  return sVar1;\u000a}\u000a\u000a
p661
S'JMP qword ptr [0x0060a088]\n'
p662
S'ff 25 22 8d 20 00\n'
p663
S'.plt:0000000000401360\n'
p664
tp665
sS'lstat'
p666
(S'\n__stdcall lstat(char * __file, stat * __buf)\n'
p667
V\u000aint lstat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___lxstat_0060a098)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p668
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00401380\n'
p669
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 b0 b3 ff ff\n'
p670
S'.text:0000000000405fc0\n.text:0000000000405fc3\n.text:0000000000405fc6\n.text:0000000000405fcb\n'
p671
tp672
sS'quotearg_n_style'
p673
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p674
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p675
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00404720\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x004044f0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p676
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p677
S'.text:00000000004046e0\n.text:00000000004046e1\n.text:00000000004046e3\n.text:00000000004046e4\n.text:00000000004046e8\n.text:00000000004046eb\n.text:00000000004046ed\n.text:00000000004046f2\n.text:00000000004046f5\n.text:00000000004046fa\n.text:0000000000404701\n.text:0000000000404703\n.text:0000000000404706\n.text:0000000000404709\n.text:000000000040470e\n.text:0000000000404712\n.text:0000000000404713\n.text:0000000000404715\n.text:0000000000404716\n'
p678
tp679
sS'hash_clear'
p680
(S'\n__stdcall hash_clear(Hash_table * table)\n'
p681
V\u000avoid hash_clear(Hash_table *table)\u000a\u000a{\u000a  void (*pVar1)(void *);\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    do {\u000a      if (phVar4->data != (void *)0x0) {\u000a        pVar1 = table->data_freer;\u000a        phVar3 = phVar4->next;\u000a        while (phVar3 != (hash_entry *)0x0) {\u000a          if (pVar1 != (void (*)(void *))0x0) {\u000a            (*pVar1)(phVar3->data);\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          phVar2 = phVar3->next;\u000a          phVar3->next = table->free_entry_list;\u000a          table->free_entry_list = phVar3;\u000a          pVar1 = table->data_freer;\u000a          phVar3 = phVar2;\u000a        }\u000a        if (pVar1 != (void (*)(void *))0x0) {\u000a          (*pVar1)(phVar4->data);\u000a        }\u000a        *(undefined4 *)&phVar4->data = 0;\u000a        *(undefined4 *)((long)&phVar4->data + 4) = 0;\u000a        *(undefined4 *)&phVar4->next = 0;\u000a        *(undefined4 *)((long)&phVar4->next + 4) = 0;\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  *(undefined4 *)&table->n_buckets_used = 0;\u000a  *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a  *(undefined4 *)&table->n_entries = 0;\u000a  *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p682
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x00402b0a\nJMP 0x00402b65\nTEST CL,CL\nJZ 0x00402af9\nMOV RDI,qword ptr [R14]\nCALL RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R14],XMM0\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00402b65\nCMP qword ptr [R14],0x0\nJZ 0x00402b00\nMOV RBX,qword ptr [R14 + 0x8]\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RBX,RBX\nJZ 0x00402af0\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST CL,0x1\nJZ 0x00402b3a\nMOV RDI,qword ptr [RBX]\nCALL RAX\nMOV qword ptr [RBX],0x0\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RAX,qword ptr [R15 + 0x48]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [R15 + 0x48],RBX\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RDX,RDX\nMOV RBX,RDX\nJNZ 0x00402b30\nJMP 0x00402af0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15 + 0x18],XMM0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p683
S'41 57\n41 56\n53\n49 89 ff\n4d 8b 37\n4d 3b 77 08\n72 29\ne9 7f 00 00 00\n84 c9\n74 05\n49 8b 3e\nff d0\n0f 57 c0\n41 0f 11 06\n49 83 c6 10\n4d 3b 77 08\n73 5b\n49 83 3e 00\n74 f0\n49 8b 5e 08\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 db\n74 cd\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nf6 c1 01\n74 05\n48 8b 3b\nff d0\n48 c7 03 00 00 00 00\n48 8b 53 08\n49 8b 47 48\n48 89 43 08\n49 89 5f 48\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 d2\n48 89 d3\n75 cd\neb 8b\n0f 57 c0\n41 0f 11 47 18\n5b\n41 5e\n41 5f\nc3\n'
p684
S'.text:0000000000402ad0\n.text:0000000000402ad2\n.text:0000000000402ad4\n.text:0000000000402ad5\n.text:0000000000402ad8\n.text:0000000000402adb\n.text:0000000000402adf\n.text:0000000000402ae1\n.text:0000000000402af0\n.text:0000000000402af2\n.text:0000000000402af4\n.text:0000000000402af7\n.text:0000000000402af9\n.text:0000000000402afc\n.text:0000000000402b00\n.text:0000000000402b04\n.text:0000000000402b08\n.text:0000000000402b0a\n.text:0000000000402b0e\n.text:0000000000402b10\n.text:0000000000402b14\n.text:0000000000402b18\n.text:0000000000402b1b\n.text:0000000000402b1e\n.text:0000000000402b21\n.text:0000000000402b23\n.text:0000000000402b30\n.text:0000000000402b33\n.text:0000000000402b35\n.text:0000000000402b38\n.text:0000000000402b3a\n.text:0000000000402b41\n.text:0000000000402b45\n.text:0000000000402b49\n.text:0000000000402b4d\n.text:0000000000402b51\n.text:0000000000402b55\n.text:0000000000402b58\n.text:0000000000402b5b\n.text:0000000000402b5e\n.text:0000000000402b61\n.text:0000000000402b63\n.text:0000000000402b65\n.text:0000000000402b68\n.text:0000000000402b6d\n.text:0000000000402b6e\n.text:0000000000402b70\n.text:0000000000402b72\n'
p685
tp686
sS'dir_len'
p687
(S'\n__stdcall dir_len(char * file)\n'
p688
V\u000asize_t dir_len(char *file)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  \u000a  cVar2 = *file;\u000a  pcVar3 = last_component(file);\u000a  pcVar3 = pcVar3 + -(long)file;\u000a  do {\u000a    pcVar4 = pcVar3;\u000a    if (pcVar3 <= (char *)(ulong)(cVar2 == '/')) {\u000a      return (size_t)pcVar4;\u000a    }\u000a    pcVar1 = pcVar3 + (long)(file + -1);\u000a    pcVar3 = pcVar3 + -1;\u000a  } while (*pcVar1 == '/');\u000a  return (size_t)pcVar4;\u000a}\u000a\u000a
p689
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nXOR R14D,R14D\nCMP byte ptr [RBX],0x2f\nSETZ R14B\nCALL 0x004059c0\nMOV RCX,RAX\nSUB RCX,RBX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP R14,RAX\nJNC 0x00405953\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00405940\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p690
S'41 56\n53\n50\n48 89 fb\n45 31 f6\n80 3b 2f\n41 0f 94 c6\ne8 8a 00 00 00\n48 89 c1\n48 29 d9\n0f 1f 40 00\n48 89 c8\n49 39 c6\n73 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ed\n48 83 c4 08\n5b\n41 5e\nc3\n'
p691
S'.text:0000000000405920\n.text:0000000000405922\n.text:0000000000405923\n.text:0000000000405924\n.text:0000000000405927\n.text:000000000040592a\n.text:000000000040592d\n.text:0000000000405931\n.text:0000000000405936\n.text:0000000000405939\n.text:000000000040593c\n.text:0000000000405940\n.text:0000000000405943\n.text:0000000000405946\n.text:0000000000405948\n.text:000000000040594c\n.text:0000000000405951\n.text:0000000000405953\n.text:0000000000405957\n.text:0000000000405958\n.text:000000000040595a\n'
p692
tp693
sS'raw_hasher'
p694
(S'\n__stdcall raw_hasher(void * data, size_t n)\n'
p695
V\u000asize_t raw_hasher(void *data,size_t n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = rotr_sz((size_t)data);\u000a  return sVar1 % n;\u000a}\u000a\u000a
p696
S'PUSH RBX\nMOV RBX,RSI\nMOV ESI,0x3\nCALL 0x004056b0\nXOR EDX,EDX\nDIV RBX\nMOV RAX,RDX\nPOP RBX\nRET\n'
p697
S'53\n48 89 f3\nbe 03 00 00 00\ne8 12 2d 00 00\n31 d2\n48 f7 f3\n48 89 d0\n5b\nc3\n'
p698
S'.text:0000000000402990\n.text:0000000000402991\n.text:0000000000402994\n.text:0000000000402999\n.text:000000000040299e\n.text:00000000004029a0\n.text:00000000004029a3\n.text:00000000004029a6\n.text:00000000004029a7\n'
p699
tp700
sS'quote_n'
p701
(S'\n__stdcall quote_n(char * arg)\n'
p702
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p703
S'MOV RDX,-0x1\nJMP 0x004049b0\n'
p704
S'48 c7 c2 ff ff ff ff\neb d7\n'
p705
S'.text:00000000004049d0\n.text:00000000004049d7\n'
p706
tp707
sS'quotearg_alloc'
p708
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p709
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p710
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00404360\n'
p711
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p712
S'.text:0000000000404350\n.text:0000000000404353\n.text:0000000000404355\n.text:0000000000404358\n'
p713
tp714
sS'close_stdout_set_file_name'
p715
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p716
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p717
S'MOV qword ptr [0x0060a290],RDI\nRET\n'
p718
S'48 89 3d a9 7f 20 00\nc3\n'
p719
S'.text:00000000004022e0\n.text:00000000004022e7\n'
p720
tp721
sS'check_tuning'
p722
(S'\n__stdcall check_tuning(Hash_table * table)\n'
p723
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000a_Bool check_tuning(Hash_table *table)\u000a\u000a{\u000a  float fVar1;\u000a  Hash_tuning *pHVar2;\u000a  undefined uVar3;\u000a  float fVar4;\u000a  \u000a  pHVar2 = table->tuning;\u000a  uVar3 = 1;\u000a  if ((pHVar2 != &default_tuning) &&\u000a     ((((fVar1 = pHVar2->growth_threshold, fVar1 <= _DAT_00406978 || (DAT_0040697c <= fVar1)) ||\u000a       (pHVar2->growth_factor <= _DAT_00406980)) ||\u000a      (((pHVar2->shrink_threshold < 0.00000000 ||\u000a        (fVar4 = pHVar2->shrink_threshold + _DAT_00406978, fVar1 <= fVar4)) ||\u000a       ((DAT_00406984 < pHVar2->shrink_factor || (pHVar2->shrink_factor <= fVar4)))))))) {\u000a    table->tuning = &default_tuning;\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p724
S'MOV RCX,qword ptr [RDI + 0x28]\nMOV EDX,0x4069fc\nMOV AL,0x1\nCMP RCX,RDX\nJZ 0x00402a33\nMOVSS XMM0,dword ptr [RCX + 0x8]\nUCOMISS XMM0,dword ptr [0x00406978]\nJBE 0x00402a29\nMOVSS XMM1,dword ptr [0x0040697c]\nUCOMISS XMM1,XMM0\nJBE 0x00402a29\nMOVSS XMM1,dword ptr [RCX + 0xc]\nUCOMISS XMM1,dword ptr [0x00406980]\nJBE 0x00402a29\nMOVSS XMM1,dword ptr [RCX]\nXORPS XMM2,XMM2\nUCOMISS XMM1,XMM2\nJC 0x00402a29\nADDSS XMM1,dword ptr [0x00406978]\nUCOMISS XMM0,XMM1\nJBE 0x00402a29\nMOVSS XMM0,dword ptr [RCX + 0x4]\nMOVSS XMM2,dword ptr [0x00406984]\nUCOMISS XMM2,XMM0\nJC 0x00402a29\nUCOMISS XMM0,XMM1\nJA 0x00402a33\nMOV qword ptr [RDI + 0x28],0x4069fc\nXOR EAX,EAX\nRET\n'
p725
S'48 8b 4f 28\nba fc 69 40 00\nb0 01\n48 39 d1\n74 63\nf3 0f 10 41 08\n0f 2e 05 9c 3f 00 00\n76 4b\nf3 0f 10 0d 96 3f 00 00\n0f 2e c8\n76 3e\nf3 0f 10 49 0c\n0f 2e 0d 89 3f 00 00\n76 30\nf3 0f 10 09\n0f 57 d2\n0f 2e ca\n72 24\nf3 0f 58 0d 6b 3f 00 00\n0f 2e c1\n76 17\nf3 0f 10 41 04\nf3 0f 10 15 65 3f 00 00\n0f 2e d0\n72 05\n0f 2e c1\n77 0a\n48 c7 47 28 fc 69 40 00\n31 c0\nc3\n'
p726
S'.text:00000000004029c0\n.text:00000000004029c4\n.text:00000000004029c9\n.text:00000000004029cb\n.text:00000000004029ce\n.text:00000000004029d0\n.text:00000000004029d5\n.text:00000000004029dc\n.text:00000000004029de\n.text:00000000004029e6\n.text:00000000004029e9\n.text:00000000004029eb\n.text:00000000004029f0\n.text:00000000004029f7\n.text:00000000004029f9\n.text:00000000004029fd\n.text:0000000000402a00\n.text:0000000000402a03\n.text:0000000000402a05\n.text:0000000000402a0d\n.text:0000000000402a10\n.text:0000000000402a12\n.text:0000000000402a17\n.text:0000000000402a1f\n.text:0000000000402a22\n.text:0000000000402a24\n.text:0000000000402a27\n.text:0000000000402a29\n.text:0000000000402a31\n.text:0000000000402a33\n'
p727
tp728
sS'__libc_csu_init'
p729
(S'\n__stdcall __libc_csu_init()\n'
p730
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p731
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x609e08]\nPUSH RBP\nLEA RBP,[0x609e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401258\nTEST RBP,RBP\nJZ 0x00405f56\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00405f40\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p732
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 f6 3e 20 00\n55\n48 8d 2d f6 3e 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 27 b3 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p733
S'.text:0000000000405f00\n.text:0000000000405f02\n.text:0000000000405f04\n.text:0000000000405f07\n.text:0000000000405f09\n.text:0000000000405f0b\n.text:0000000000405f12\n.text:0000000000405f13\n.text:0000000000405f1a\n.text:0000000000405f1b\n.text:0000000000405f1e\n.text:0000000000405f21\n.text:0000000000405f24\n.text:0000000000405f28\n.text:0000000000405f2c\n.text:0000000000405f31\n.text:0000000000405f34\n.text:0000000000405f36\n.text:0000000000405f38\n.text:0000000000405f40\n.text:0000000000405f43\n.text:0000000000405f46\n.text:0000000000405f49\n.text:0000000000405f4d\n.text:0000000000405f51\n.text:0000000000405f54\n.text:0000000000405f56\n.text:0000000000405f5a\n.text:0000000000405f5b\n.text:0000000000405f5c\n.text:0000000000405f5e\n.text:0000000000405f60\n.text:0000000000405f62\n.text:0000000000405f64\n'
p734
tp735
sS'c_isdigit'
p736
(S'\n__stdcall c_isdigit()\n'
p737
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p738
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p739
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p740
S'.text:00000000004057c0\n.text:00000000004057c3\n.text:00000000004057c6\n.text:00000000004057c9\n'
p741
tp742
sS'hash_do_for_each'
p743
(S'\n__stdcall hash_do_for_each(Hash_table * table, Hash_processor * processor, void * processor_data)\n'
p744
V\u000asize_t hash_do_for_each(Hash_table *table,_Bool (*processor)(void *,void *),void *processor_data)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  _Bool _Var2;\u000a  size_t sVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    sVar3 = 0;\u000a    do {\u000a      phVar1 = phVar4;\u000a      if (phVar4->data != (void *)0x0) {\u000a        while (phVar1 != (hash_entry *)0x0) {\u000a          _Var2 = (*processor)(phVar1->data,processor_data);\u000a          if (_Var2 == false) {\u000a            return sVar3;\u000a          }\u000a          sVar3 = sVar3 + 1;\u000a          phVar1 = phVar1->next;\u000a        }\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p745
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV R12,RDI\nMOV R13,qword ptr [R12]\nCMP R13,qword ptr [R12 + 0x8]\nJNC 0x00402837\nXOR EBX,EBX\nCMP qword ptr [R13],0x0\nJZ 0x0040282a\nTEST R13,R13\nJZ 0x0040282a\nMOV RBP,R13\nMOV RDI,qword ptr [RBP]\nMOV RSI,R14\nCALL R15\nTEST AL,AL\nJZ 0x00402839\nINC RBX\nMOV RBP,qword ptr [RBP + 0x8]\nTEST RBP,RBP\nJNZ 0x00402810\nADD R13,0x10\nCMP R13,qword ptr [R12 + 0x8]\nJC 0x00402801\nJMP 0x00402839\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p746
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n49 89 fc\n4d 8b 2c 24\n4d 3b 6c 24 08\n73 38\n31 db\n49 83 7d 00 00\n74 22\n4d 85 ed\n74 1d\n4c 89 ed\n48 8b 7d 00\n4c 89 f6\n41 ff d7\n84 c0\n74 1b\n48 ff c3\n48 8b 6d 08\n48 85 ed\n75 e6\n49 83 c5 10\n4d 3b 6c 24 08\n72 cc\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p747
S'.text:00000000004027e0\n.text:00000000004027e1\n.text:00000000004027e3\n.text:00000000004027e5\n.text:00000000004027e7\n.text:00000000004027e9\n.text:00000000004027ea\n.text:00000000004027eb\n.text:00000000004027ee\n.text:00000000004027f1\n.text:00000000004027f4\n.text:00000000004027f8\n.text:00000000004027fd\n.text:00000000004027ff\n.text:0000000000402801\n.text:0000000000402806\n.text:0000000000402808\n.text:000000000040280b\n.text:000000000040280d\n.text:0000000000402810\n.text:0000000000402814\n.text:0000000000402817\n.text:000000000040281a\n.text:000000000040281c\n.text:000000000040281e\n.text:0000000000402821\n.text:0000000000402825\n.text:0000000000402828\n.text:000000000040282a\n.text:000000000040282e\n.text:0000000000402833\n.text:0000000000402835\n.text:0000000000402837\n.text:0000000000402839\n.text:000000000040283c\n.text:0000000000402840\n.text:0000000000402841\n.text:0000000000402843\n.text:0000000000402845\n.text:0000000000402847\n.text:0000000000402849\n.text:000000000040284a\n'
p748
tp749
sS'usage'
p750
(S'\n__stdcall usage()\n'
p751
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... FILE...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,"Print value of a symbolic link or canonical file name\u005cn\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -f, --canonicalize            canonicalize by following every symlink in\u005cn                                every component of the given name recursively;\u005cn                                all but the last component must exist\u005cn  -e, --canonicalize-existing   canonicalize by following every symlink in\u005cn                                every component of the given name recursively,\u005cn                                all components must exist\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -m, --canonicalize-missing    canonicalize by following every symlink in\u005cn                                every component of the given name recursively,\u005cn                                without requirements on components existence\u005cn  -n, --no-newline              do not output the trailing delimiter\u005cn  -q, --quiet,\u005cn  -s, --silent                  suppress most error messages\u005cn  -v, --verbose                 report error messages\u005cn  -z, --zero                    end each output line with NUL, not newline\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p752
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x004017e1\nXOR EDI,EDI\nMOV ESI,0x406270\nMOV EDX,0x5\nCALL 0x00401350\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060a2a0]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401540\nXOR EDI,EDI\nMOV ESI,0x40628f\nMOV EDX,0x5\nCALL 0x00401350\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401430\nXOR EDI,EDI\nMOV ESI,0x4062c7\nMOV EDX,0x5\nCALL 0x00401350\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401430\nXOR EDI,EDI\nMOV ESI,0x40647c\nMOV EDX,0x5\nCALL 0x00401350\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401430\nXOR EDI,EDI\nMOV ESI,0x406676\nMOV EDX,0x5\nCALL 0x00401350\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401430\nXOR EDI,EDI\nMOV ESI,0x4066a3\nMOV EDX,0x5\nCALL 0x00401350\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,RAX\nCALL 0x00401430\nCALL 0x00401830\nMOV EDI,EBX\nCALL 0x004015a0\nCALL 0x004017f0\nMOV EDI,EBX\nCALL 0x004015a0\n'
p753
S'53\n89 fb\n85 db\n0f 85 d6 00 00 00\n31 ff\nbe 70 62 40 00\nba 05 00 00 00\ne8 34 fc ff ff\n48 89 c1\n48 8b 15 7a 8b 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 0b fe ff ff\n31 ff\nbe 8f 62 40 00\nba 05 00 00 00\ne8 0a fc ff ff\n48 8b 35 1b 8b 20 00\n48 89 c7\ne8 db fc ff ff\n31 ff\nbe c7 62 40 00\nba 05 00 00 00\ne8 ea fb ff ff\n48 8b 35 fb 8a 20 00\n48 89 c7\ne8 bb fc ff ff\n31 ff\nbe 7c 64 40 00\nba 05 00 00 00\ne8 ca fb ff ff\n48 8b 35 db 8a 20 00\n48 89 c7\ne8 9b fc ff ff\n31 ff\nbe 76 66 40 00\nba 05 00 00 00\ne8 aa fb ff ff\n48 8b 35 bb 8a 20 00\n48 89 c7\ne8 7b fc ff ff\n31 ff\nbe a3 66 40 00\nba 05 00 00 00\ne8 8a fb ff ff\n48 8b 35 9b 8a 20 00\n48 89 c7\ne8 5b fc ff ff\ne8 56 00 00 00\n89 df\ne8 bf fd ff ff\ne8 0a 00 00 00\n89 df\ne8 b3 fd ff ff\n'
p754
S'.text:0000000000401700\n.text:0000000000401701\n.text:0000000000401703\n.text:0000000000401705\n.text:000000000040170b\n.text:000000000040170d\n.text:0000000000401712\n.text:0000000000401717\n.text:000000000040171c\n.text:000000000040171f\n.text:0000000000401726\n.text:000000000040172b\n.text:000000000040172d\n.text:0000000000401730\n.text:0000000000401735\n.text:0000000000401737\n.text:000000000040173c\n.text:0000000000401741\n.text:0000000000401746\n.text:000000000040174d\n.text:0000000000401750\n.text:0000000000401755\n.text:0000000000401757\n.text:000000000040175c\n.text:0000000000401761\n.text:0000000000401766\n.text:000000000040176d\n.text:0000000000401770\n.text:0000000000401775\n.text:0000000000401777\n.text:000000000040177c\n.text:0000000000401781\n.text:0000000000401786\n.text:000000000040178d\n.text:0000000000401790\n.text:0000000000401795\n.text:0000000000401797\n.text:000000000040179c\n.text:00000000004017a1\n.text:00000000004017a6\n.text:00000000004017ad\n.text:00000000004017b0\n.text:00000000004017b5\n.text:00000000004017b7\n.text:00000000004017bc\n.text:00000000004017c1\n.text:00000000004017c6\n.text:00000000004017cd\n.text:00000000004017d0\n.text:00000000004017d5\n.text:00000000004017da\n.text:00000000004017dc\n.text:00000000004017e1\n.text:00000000004017e6\n.text:00000000004017e8\n'
p755
tp756
sS'quoting_options_from_style'
p757
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p758
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p759
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040476d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x004012a0\n'
p760
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 2e cb ff ff\n'
p761
S'.text:0000000000404720\n.text:0000000000404724\n.text:0000000000404727\n.text:000000000040472c\n.text:0000000000404731\n.text:0000000000404735\n.text:000000000040473d\n.text:0000000000404740\n.text:0000000000404742\n.text:0000000000404744\n.text:0000000000404748\n.text:000000000040474b\n.text:000000000040474f\n.text:0000000000404754\n.text:0000000000404759\n.text:000000000040475d\n.text:0000000000404761\n.text:0000000000404765\n.text:0000000000404768\n.text:000000000040476c\n.text:000000000040476d\n'
p762
tp763
sS'strcpy'
p764
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p765
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060a048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p766
S'JMP qword ptr [0x0060a048]\n'
p767
S'ff 25 62 8d 20 00\n'
p768
S'.plt:00000000004012e0\n'
p769
tp770
sS'triple_compare_ino_str'
p771
(S'\n__stdcall triple_compare_ino_str(void * x, void * y)\n'
p772
V\u000a_Bool triple_compare_ino_str(void *x,void *y)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (*(long *)((long)x + 8) != *(long *)((long)y + 8)) {\u000a    return false;\u000a  }\u000a  if (*(long *)((long)x + 0x10) == *(long *)((long)y + 0x10)) {\u000a    iVar1 = strcmp(*(char **)x,*(char **)y);\u000a    return (_Bool)(iVar1 == 0);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p773
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,qword ptr [RSI + 0x8]\nJNZ 0x004034ca\nMOV RAX,qword ptr [RDI + 0x10]\nCMP RAX,qword ptr [RSI + 0x10]\nJNZ 0x004034cd\nPUSH RAX\nMOV RDI,qword ptr [RDI]\nMOV RSI,qword ptr [RSI]\nCALL 0x00401460\nTEST EAX,EAX\nSETZ AL\nADD RSP,0x8\nRET\nXOR EAX,EAX\nRET\nXOR EAX,EAX\nRET\n'
p774
S'48 8b 47 08\n48 3b 46 08\n75 20\n48 8b 47 10\n48 3b 46 10\n75 19\n50\n48 8b 3f\n48 8b 36\ne8 a0 df ff ff\n85 c0\n0f 94 c0\n48 83 c4 08\nc3\n31 c0\nc3\n31 c0\nc3\n'
p775
S'.text:00000000004034a0\n.text:00000000004034a4\n.text:00000000004034a8\n.text:00000000004034aa\n.text:00000000004034ae\n.text:00000000004034b2\n.text:00000000004034b4\n.text:00000000004034b5\n.text:00000000004034b8\n.text:00000000004034bb\n.text:00000000004034c0\n.text:00000000004034c2\n.text:00000000004034c5\n.text:00000000004034c9\n.text:00000000004034ca\n.text:00000000004034cc\n.text:00000000004034cd\n.text:00000000004034cf\n'
p776
tp777
sS'triple_hash_no_name'
p778
(S'\n__stdcall triple_hash_no_name(void * x, size_t table_size)\n'
p779
V\u000asize_t triple_hash_no_name(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)((long)x + 8) % table_size;\u000a}\u000a\u000a
p780
S'MOV RAX,qword ptr [RDI + 0x8]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p781
S'48 8b 47 08\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p782
S'.text:0000000000403460\n.text:0000000000403464\n.text:0000000000403466\n.text:0000000000403469\n.text:000000000040346c\n'
p783
tp784
sS'mdir_name'
p785
(S'\n__stdcall mdir_name(char * file)\n'
p786
V\u000achar * mdir_name(char *file)\u000a\u000a{\u000a  size_t __n;\u000a  char *__dest;\u000a  \u000a  __n = dir_len(file);\u000a  __dest = (char *)malloc(__n + 1 + (ulong)(__n == 0));\u000a  if (__dest == (char *)0x0) {\u000a    __dest = (char *)0x0;\u000a  }\u000a  else {\u000a    memcpy(__dest,file,__n);\u000a    if (__n == 0) {\u000a      *__dest = '.';\u000a      __n = 1;\u000a    }\u000a    __dest[__n] = 0;\u000a  }\u000a  return __dest;\u000a}\u000a\u000a
p787
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCALL 0x00405920\nMOV RBX,RAX\nXOR EAX,EAX\nTEST RBX,RBX\nSETZ AL\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004014c0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004059ae\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00401470\nTEST RBX,RBX\nJNZ 0x004059a7\nMOV byte ptr [R14 + RBX*0x1],0x2e\nMOV EBX,0x1\nMOV byte ptr [R14 + RBX*0x1],0x0\nJMP 0x004059b1\nXOR R14D,R14D\nMOV RAX,R14\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p788
S'41 57\n41 56\n53\n49 89 ff\ne8 b3 ff ff ff\n48 89 c3\n31 c0\n48 85 db\n0f 94 c0\n48 8d 7c 03 01\ne8 3e bb ff ff\n49 89 c6\n4d 85 f6\n74 24\n4c 89 f7\n4c 89 fe\n48 89 da\ne8 d8 ba ff ff\n48 85 db\n75 0a\n41 c6 04 1e 2e\nbb 01 00 00 00\n41 c6 04 1e 00\neb 03\n45 31 f6\n4c 89 f0\n5b\n41 5e\n41 5f\nc3\n'
p789
S'.text:0000000000405960\n.text:0000000000405962\n.text:0000000000405964\n.text:0000000000405965\n.text:0000000000405968\n.text:000000000040596d\n.text:0000000000405970\n.text:0000000000405972\n.text:0000000000405975\n.text:0000000000405978\n.text:000000000040597d\n.text:0000000000405982\n.text:0000000000405985\n.text:0000000000405988\n.text:000000000040598a\n.text:000000000040598d\n.text:0000000000405990\n.text:0000000000405993\n.text:0000000000405998\n.text:000000000040599b\n.text:000000000040599d\n.text:00000000004059a2\n.text:00000000004059a7\n.text:00000000004059ac\n.text:00000000004059ae\n.text:00000000004059b1\n.text:00000000004059b4\n.text:00000000004059b5\n.text:00000000004059b7\n.text:00000000004059b9\n'
p790
tp791
sS'rotl8'
p792
(S'\n__stdcall rotl8()\n'
p793
V\u000auint8_t rotl8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI >> (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p794
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p795
S'89 f8\n89 f1\nd3 e0\nb9 08 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p796
S'.text:0000000000405700\n.text:0000000000405702\n.text:0000000000405704\n.text:0000000000405706\n.text:000000000040570b\n.text:000000000040570d\n.text:000000000040570f\n.text:0000000000405711\n.text:0000000000405713\n'
p797
tp798
sS'c_isgraph'
p799
(S'\n__stdcall c_isgraph()\n'
p800
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p801
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p802
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p803
S'.text:00000000004057d0\n.text:00000000004057d3\n.text:00000000004057d6\n.text:00000000004057d9\n'
p804
tp805
sS'hash_get_next'
p806
(S'\n__stdcall hash_get_next(Hash_table * table, void * entry)\n'
p807
V\u000avoid * hash_get_next(Hash_table *table,void *entry)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  phVar3 = phVar2;\u000a  while( true ) {\u000a    phVar1 = phVar3->next;\u000a    if ((phVar3->data == entry) && (phVar1 != (hash_entry *)0x0)) break;\u000a    phVar3 = phVar1;\u000a    if (phVar1 == (hash_entry *)0x0) {\u000a      do {\u000a        phVar2 = phVar2 + 1;\u000a        if (table->bucket_limit <= phVar2) {\u000a          return (void *)0x0;\u000a        }\u000a      } while (phVar2->data == (void *)0x0);\u000a      return phVar2->data;\u000a    }\u000a  }\u000a  return phVar1->data;\u000a}\u000a\u000a
p808
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x004026a0\nMOV RCX,RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,RCX\nMOV RCX,qword ptr [RSI + 0x8]\nTEST RCX,RCX\nSETZ DL\nCMP qword ptr [RSI],RBX\nJNZ 0x00402746\nTEST DL,DL\nJZ 0x00402773\nTEST RCX,RCX\nJNZ 0x00402730\nMOV RDX,qword ptr [R14 + 0x8]\nADD RAX,0x10\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP RAX,RDX\nJNC 0x00402778\nMOV RCX,qword ptr [RAX]\nADD RAX,0x10\nTEST RCX,RCX\nJZ 0x00402760\nJMP 0x0040277a\nMOV RCX,qword ptr [RCX]\nJMP 0x0040277a\nXOR ECX,ECX\nMOV RAX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p809
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 81 ff ff ff\n48 89 c1\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ce\n48 8b 4e 08\n48 85 c9\n0f 94 c2\n48 39 1e\n75 04\n84 d2\n74 2d\n48 85 c9\n75 e5\n49 8b 56 08\n48 83 c0 10\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 d0\n73 13\n48 8b 08\n48 83 c0 10\n48 85 c9\n74 ef\neb 07\n48 8b 09\neb 02\n31 c9\n48 89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p810
S'.text:0000000000402710\n.text:0000000000402712\n.text:0000000000402713\n.text:0000000000402714\n.text:0000000000402717\n.text:000000000040271a\n.text:000000000040271f\n.text:0000000000402722\n.text:0000000000402730\n.text:0000000000402733\n.text:0000000000402737\n.text:000000000040273a\n.text:000000000040273d\n.text:0000000000402740\n.text:0000000000402742\n.text:0000000000402744\n.text:0000000000402746\n.text:0000000000402749\n.text:000000000040274b\n.text:000000000040274f\n.text:0000000000402753\n.text:0000000000402760\n.text:0000000000402763\n.text:0000000000402765\n.text:0000000000402768\n.text:000000000040276c\n.text:000000000040276f\n.text:0000000000402771\n.text:0000000000402773\n.text:0000000000402776\n.text:0000000000402778\n.text:000000000040277a\n.text:000000000040277d\n.text:0000000000402781\n.text:0000000000402782\n.text:0000000000402784\n'
p811
tp812
sS'quotearg_buffer_restyled'
p813
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p814
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040379c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040379c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040379c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040379c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040379c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040379c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040379c_caseD_7;\u000aswitchD_0040379c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040379c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040379c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00404260;\u000aLAB_00403980:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00404269:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00404278:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040398b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_004039cf:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_004039cf;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00404278;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_004041a5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x004040b0;\u000a    }\u000a    goto LAB_00404278;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_004041da;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00404278;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00404209;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403cc8;\u000a  case '\u005ca':\u000a    goto joined_r0x00403bb8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00403bb8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_004039e6_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00403bb8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00403bb8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_004039e6_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00403bb8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040411e;\u000a    }\u000a    goto LAB_00404278;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00404278;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00404278;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00404278;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00404278;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00404278;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_004039e6_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00404176;\u000a      goto joined_r0x00404168;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403c71:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00404168;\u000a      goto LAB_00404176;\u000a    }\u000a    goto LAB_00404278;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00404278;\u000a  }\u000a  goto joined_r0x004040b0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_004041da:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00404209;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00404209:\u000a  if (1 < uVar10) {\u000aLAB_00403ce6:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403da2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403c71;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403da2:\u000a        if (bVar6 != 0) goto LAB_00404278;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403cc8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403ce6;\u000ajoined_r0x004040b0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x004040b0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_004040d7;\u000aLAB_00404110:\u000a    if (bVar22) goto LAB_00404115;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00404110;\u000aLAB_004040d7:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00404115:\u000a      if (bVar6 != 0) goto LAB_00404278;\u000aLAB_0040411e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00404168;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00404176:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00404168:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_004041a5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00403980;\u000aLAB_00404260:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00404269;\u000a  goto LAB_0040398b;\u000a}\u000a\u000a
p815
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401360\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00404345\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x406a60 + RAX*0x8]\nMOV EDI,0x406f88\nMOV ESI,R15D\nCALL 0x004049f0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x406f8a\nMOV ESI,R15D\nCALL 0x004049f0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x004037fd\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00403800\nNOP\nCMP R12,RSI\nJNC 0x004037ee\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x004037e0\nJMP 0x00403800\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401370\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x004038cc\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x004038cc\nMOV ECX,0x406f86\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x004038c6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00403867\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00403894\nTEST RSI,RSI\nJZ 0x00403881\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x406f8a\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x004038a2\nMOV ECX,0x406f8a\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x004038cc\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040431c\nMOV ECX,0x406f86\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00404260\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00404269\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x004039cf\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x004039ca\nCMP R11,-0x1\nJNZ 0x004039ca\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401370\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00403a20\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00403c7c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x406ab8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00404278\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x004040d0\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x004040d7\nJMP 0x00404110\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401420\nTEST EAX,EAX\nSETZ AL\nJNZ 0x00403a6d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x004039d1\nJMP 0x00404278\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x004039d1\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x004039fb\nCMP EBX,0x2\nJNZ 0x004039fb\nTEST R13,R13\nJNZ 0x004039fb\nJMP 0x00404278\nCMP R11,-0x1\nJZ 0x00403e53\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403e73\nJMP 0x004039fb\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403e84\nTEST R8B,R8B\nJNZ 0x00404278\nCMP EBX,0x2\nJNZ 0x00403b28\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403b28\nCMP R12,RSI\nJNC 0x00403b03\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403b12\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403b21\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403b32\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403ff8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403ff8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403ff8\nCMP RCX,RSI\nJNC 0x00403b6c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x00403b7b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403a06\nJMP 0x004040d0\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004039f9\nJMP 0x00403bda\nMOV DL,0x74\nJMP 0x00403bc2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004039f9\nJMP 0x00403bda\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004039f9\nJMP 0x00403bda\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00404278\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004039f9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040411e\nJMP 0x00404278\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x004039f9\nTEST R8B,R8B\nJNZ 0x00404278\nCMP R12,RSI\nJNC 0x00403c0a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403c19\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403c28\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x004039f9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040400b\nCMP EBX,0x2\nJNZ 0x004039f9\nTEST R8B,R8B\nJZ 0x004039f9\nJMP 0x00404278\nCMP EBX,0x2\nJNZ 0x00403ea4\nTEST R8B,R8B\nJNZ 0x00404278\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00404176\nJMP 0x00404199\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403ec5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x004015f0\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004040b8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x004040b8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403da2\nJMP 0x00403d70\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403d59\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403d56\nCMP R12,RSI\nJNC 0x00403d3b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x00403d4a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403d90\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403d90\nTEST BPL,0x1\nJZ 0x00403e33\nCMP R12,RSI\nJNC 0x00403d84\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403e33\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403d70\nTEST R8B,R8B\nJNZ 0x00404278\nCMP EBX,0x2\nJNZ 0x00403dea\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x00403dea\nCMP R12,RSI\nJNC 0x00403dc2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403dd1\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403de0\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403df4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403e0b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403e25\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403d20\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00404176\nJMP 0x00404199\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x004039fb\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x004039fb\nJMP 0x00404278\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x004041a5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403a06\nJMP 0x004040d0\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00403bc2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00404176\nJMP 0x00404199\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403ee7\nMOV RDI,R10\nCALL 0x00401370\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x004013a0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004041bf\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x004041b7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004041c6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00403fae\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403fa6\nBT RDI,RDX\nJC 0x00404312\nINC RCX\nCMP RCX,R14\nJC 0x00403f90\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x004015e0\nTEST EAX,EAX\nJNZ 0x00403fc3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x004015d0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403f05\nJMP 0x00404209\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403a06\nJMP 0x004040d0\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x004039f9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x004039f9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x004039f9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x004039fb\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00404242\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00404278\nCMP R12,RSI\nJNC 0x0040406e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00404081\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404090\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040409f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403a06\nJMP 0x004040d0\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403a06\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00404110\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00404115\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00404170\nJMP 0x00404115\nTEST BPL,BPL\nJZ 0x00404170\nTEST R8B,R8B\nJNZ 0x00404278\nCMP EBX,0x2\nJNZ 0x00404158\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00404158\nCMP R12,RSI\nJNC 0x00404133\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404142\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404151\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00404162\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x004041a2\nJMP 0x0040419e\nTEST DIL,0x1\nJZ 0x00404199\nAND AL,0x1\nJNZ 0x00404199\nCMP R12,RSI\nJNC 0x00404184\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404193\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x004041a2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00404260\nJMP 0x00403980\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00404204\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x004041fc\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00404238\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x004041da\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00404209\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403cc8\nJMP 0x00403ce6\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00404209\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403a06\nJMP 0x004040d0\nCMP R13,R11\nJNZ 0x0040398b\nTEST R8B,R8B\nJZ 0x004042d2\nCMP EBX,0x2\nJNZ 0x004042d2\nTEST R12,R12\nJNZ 0x004042d2\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00403710\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00404306\nTEST R8B,R8B\nJNZ 0x00404306\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00404306\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x004042f9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x004042f0\nCMP R12,RSI\nJNC 0x004042bd\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x004042bd\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00404278\nTEST RSI,RSI\nJZ 0x00404329\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x406f86\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x004038cc\nCALL 0x004012a0\n'
p816
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 22 dc ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 60 6a 40 00\nbf 88 6f 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 8a 6f 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 63 db ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 86 6f 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 8a 6f 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 8a 6f 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 86 6f 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 c3 d9 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd b8 6a 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 e7 d9 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 57 d9 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 91 d4 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 73 d4 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 29 d6 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 f2 d5 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 86 6f 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 56 cf ff ff\n'
p817
S'.text:0000000000403710\n.text:0000000000403711\n.text:0000000000403713\n.text:0000000000403715\n.text:0000000000403717\n.text:0000000000403719\n.text:000000000040371a\n.text:0000000000403721\n.text:0000000000403724\n.text:0000000000403727\n.text:000000000040372a\n.text:000000000040372f\n.text:0000000000403734\n.text:0000000000403739\n.text:000000000040373e\n.text:0000000000403746\n.text:000000000040374a\n.text:0000000000403750\n.text:0000000000403758\n.text:000000000040375d\n.text:0000000000403765\n.text:000000000040376a\n.text:000000000040376e\n.text:0000000000403770\n.text:0000000000403773\n.text:0000000000403776\n.text:0000000000403779\n.text:000000000040377e\n.text:0000000000403781\n.text:0000000000403784\n.text:0000000000403787\n.text:000000000040378a\n.text:000000000040378c\n.text:000000000040378f\n.text:0000000000403794\n.text:0000000000403797\n.text:000000000040379c\n.text:00000000004037a3\n.text:00000000004037a8\n.text:00000000004037ab\n.text:00000000004037b0\n.text:00000000004037b5\n.text:00000000004037ba\n.text:00000000004037bd\n.text:00000000004037c2\n.text:00000000004037c7\n.text:00000000004037cc\n.text:00000000004037ce\n.text:00000000004037d0\n.text:00000000004037d5\n.text:00000000004037d7\n.text:00000000004037da\n.text:00000000004037dc\n.text:00000000004037de\n.text:00000000004037e0\n.text:00000000004037e3\n.text:00000000004037e5\n.text:00000000004037ea\n.text:00000000004037ee\n.text:00000000004037f4\n.text:00000000004037f7\n.text:00000000004037f9\n.text:00000000004037fb\n.text:00000000004037fd\n.text:0000000000403800\n.text:0000000000403805\n.text:0000000000403808\n.text:000000000040380d\n.text:0000000000403812\n.text:0000000000403815\n.text:0000000000403818\n.text:000000000040381b\n.text:000000000040381e\n.text:0000000000403823\n.text:0000000000403826\n.text:0000000000403829\n.text:000000000040382e\n.text:0000000000403831\n.text:0000000000403833\n.text:0000000000403836\n.text:0000000000403838\n.text:000000000040383a\n.text:000000000040383d\n.text:0000000000403842\n.text:0000000000403847\n.text:000000000040384c\n.text:000000000040384f\n.text:0000000000403855\n.text:0000000000403857\n.text:000000000040385a\n.text:000000000040385d\n.text:0000000000403860\n.text:0000000000403862\n.text:0000000000403864\n.text:0000000000403867\n.text:000000000040386a\n.text:000000000040386f\n.text:0000000000403872\n.text:0000000000403874\n.text:0000000000403877\n.text:0000000000403879\n.text:000000000040387e\n.text:0000000000403881\n.text:0000000000403886\n.text:000000000040388c\n.text:0000000000403892\n.text:0000000000403894\n.text:0000000000403899\n.text:000000000040389f\n.text:00000000004038a2\n.text:00000000004038a5\n.text:00000000004038a8\n.text:00000000004038aa\n.text:00000000004038af\n.text:00000000004038b2\n.text:00000000004038b8\n.text:00000000004038bd\n.text:00000000004038c3\n.text:00000000004038c6\n.text:00000000004038c9\n.text:00000000004038cc\n.text:00000000004038d4\n.text:00000000004038d6\n.text:00000000004038d8\n.text:00000000004038db\n.text:00000000004038df\n.text:00000000004038e1\n.text:00000000004038e4\n.text:00000000004038e8\n.text:00000000004038ea\n.text:00000000004038ed\n.text:00000000004038f0\n.text:00000000004038f3\n.text:00000000004038f5\n.text:00000000004038f9\n.text:00000000004038fb\n.text:00000000004038ff\n.text:0000000000403902\n.text:0000000000403905\n.text:0000000000403908\n.text:000000000040390a\n.text:000000000040390e\n.text:0000000000403917\n.text:000000000040391a\n.text:000000000040391c\n.text:0000000000403920\n.text:0000000000403922\n.text:0000000000403926\n.text:0000000000403928\n.text:000000000040392b\n.text:000000000040392f\n.text:0000000000403931\n.text:0000000000403934\n.text:0000000000403938\n.text:000000000040393d\n.text:0000000000403940\n.text:0000000000403944\n.text:000000000040394c\n.text:000000000040394f\n.text:0000000000403952\n.text:0000000000403954\n.text:0000000000403958\n.text:000000000040395b\n.text:000000000040395d\n.text:0000000000403962\n.text:0000000000403966\n.text:000000000040396b\n.text:0000000000403970\n.text:0000000000403974\n.text:000000000040397a\n.text:0000000000403980\n.text:0000000000403985\n.text:000000000040398b\n.text:0000000000403990\n.text:0000000000403992\n.text:0000000000403997\n.text:000000000040399b\n.text:000000000040399d\n.text:00000000004039a1\n.text:00000000004039a3\n.text:00000000004039a5\n.text:00000000004039a8\n.text:00000000004039ad\n.text:00000000004039af\n.text:00000000004039b4\n.text:00000000004039b9\n.text:00000000004039bd\n.text:00000000004039c2\n.text:00000000004039c7\n.text:00000000004039ca\n.text:00000000004039cd\n.text:00000000004039cf\n.text:00000000004039d1\n.text:00000000004039d6\n.text:00000000004039da\n.text:00000000004039e0\n.text:00000000004039e2\n.text:00000000004039e4\n.text:00000000004039e6\n.text:00000000004039ee\n.text:00000000004039f3\n.text:00000000004039f9\n.text:00000000004039fb\n.text:0000000000403a00\n.text:0000000000403a06\n.text:0000000000403a0f\n.text:0000000000403a15\n.text:0000000000403a20\n.text:0000000000403a22\n.text:0000000000403a25\n.text:0000000000403a29\n.text:0000000000403a31\n.text:0000000000403a34\n.text:0000000000403a39\n.text:0000000000403a3b\n.text:0000000000403a3e\n.text:0000000000403a40\n.text:0000000000403a45\n.text:0000000000403a48\n.text:0000000000403a4d\n.text:0000000000403a50\n.text:0000000000403a55\n.text:0000000000403a59\n.text:0000000000403a5e\n.text:0000000000403a60\n.text:0000000000403a62\n.text:0000000000403a68\n.text:0000000000403a6d\n.text:0000000000403a72\n.text:0000000000403a75\n.text:0000000000403a7a\n.text:0000000000403a7e\n.text:0000000000403a83\n.text:0000000000403a88\n.text:0000000000403a8a\n.text:0000000000403a8c\n.text:0000000000403a91\n.text:0000000000403a93\n.text:0000000000403a96\n.text:0000000000403a9c\n.text:0000000000403a9f\n.text:0000000000403aa5\n.text:0000000000403aa8\n.text:0000000000403aae\n.text:0000000000403ab3\n.text:0000000000403ab7\n.text:0000000000403abd\n.text:0000000000403ac0\n.text:0000000000403ac3\n.text:0000000000403ac7\n.text:0000000000403aca\n.text:0000000000403acc\n.text:0000000000403acf\n.text:0000000000403ad5\n.text:0000000000403ada\n.text:0000000000403adf\n.text:0000000000403ae5\n.text:0000000000403ae8\n.text:0000000000403aee\n.text:0000000000403af1\n.text:0000000000403af3\n.text:0000000000403af5\n.text:0000000000403af7\n.text:0000000000403af9\n.text:0000000000403afc\n.text:0000000000403afe\n.text:0000000000403b03\n.text:0000000000403b08\n.text:0000000000403b0b\n.text:0000000000403b0d\n.text:0000000000403b12\n.text:0000000000403b17\n.text:0000000000403b1a\n.text:0000000000403b1c\n.text:0000000000403b21\n.text:0000000000403b25\n.text:0000000000403b28\n.text:0000000000403b2b\n.text:0000000000403b2d\n.text:0000000000403b32\n.text:0000000000403b37\n.text:0000000000403b39\n.text:0000000000403b3c\n.text:0000000000403b3f\n.text:0000000000403b45\n.text:0000000000403b49\n.text:0000000000403b4c\n.text:0000000000403b52\n.text:0000000000403b56\n.text:0000000000403b59\n.text:0000000000403b5c\n.text:0000000000403b62\n.text:0000000000403b65\n.text:0000000000403b67\n.text:0000000000403b6c\n.text:0000000000403b71\n.text:0000000000403b74\n.text:0000000000403b76\n.text:0000000000403b7b\n.text:0000000000403b7f\n.text:0000000000403b84\n.text:0000000000403b8a\n.text:0000000000403b8f\n.text:0000000000403b91\n.text:0000000000403b96\n.text:0000000000403b9c\n.text:0000000000403b9e\n.text:0000000000403ba0\n.text:0000000000403ba2\n.text:0000000000403ba4\n.text:0000000000403ba9\n.text:0000000000403baf\n.text:0000000000403bb1\n.text:0000000000403bb3\n.text:0000000000403bb8\n.text:0000000000403bbe\n.text:0000000000403bc0\n.text:0000000000403bc2\n.text:0000000000403bc7\n.text:0000000000403bc9\n.text:0000000000403bcf\n.text:0000000000403bd4\n.text:0000000000403bda\n.text:0000000000403bdd\n.text:0000000000403be0\n.text:0000000000403be6\n.text:0000000000403beb\n.text:0000000000403bee\n.text:0000000000403bf1\n.text:0000000000403bf7\n.text:0000000000403bfa\n.text:0000000000403c00\n.text:0000000000403c03\n.text:0000000000403c05\n.text:0000000000403c0a\n.text:0000000000403c0f\n.text:0000000000403c12\n.text:0000000000403c14\n.text:0000000000403c19\n.text:0000000000403c1e\n.text:0000000000403c21\n.text:0000000000403c23\n.text:0000000000403c28\n.text:0000000000403c2c\n.text:0000000000403c2e\n.text:0000000000403c33\n.text:0000000000403c36\n.text:0000000000403c39\n.text:0000000000403c3f\n.text:0000000000403c42\n.text:0000000000403c48\n.text:0000000000403c4b\n.text:0000000000403c51\n.text:0000000000403c56\n.text:0000000000403c59\n.text:0000000000403c5f\n.text:0000000000403c62\n.text:0000000000403c68\n.text:0000000000403c6b\n.text:0000000000403c6d\n.text:0000000000403c71\n.text:0000000000403c77\n.text:0000000000403c7c\n.text:0000000000403c80\n.text:0000000000403c89\n.text:0000000000403c8f\n.text:0000000000403c94\n.text:0000000000403c99\n.text:0000000000403c9e\n.text:0000000000403ca1\n.text:0000000000403ca6\n.text:0000000000403ca9\n.text:0000000000403cac\n.text:0000000000403cb1\n.text:0000000000403cb6\n.text:0000000000403cba\n.text:0000000000403cbf\n.text:0000000000403cc4\n.text:0000000000403cc8\n.text:0000000000403cca\n.text:0000000000403ccf\n.text:0000000000403cd5\n.text:0000000000403cd8\n.text:0000000000403cda\n.text:0000000000403cdd\n.text:0000000000403ce0\n.text:0000000000403ce6\n.text:0000000000403ceb\n.text:0000000000403cee\n.text:0000000000403cf1\n.text:0000000000403cf4\n.text:0000000000403cf7\n.text:0000000000403cf9\n.text:0000000000403cfd\n.text:0000000000403cff\n.text:0000000000403d04\n.text:0000000000403d09\n.text:0000000000403d0f\n.text:0000000000403d20\n.text:0000000000403d25\n.text:0000000000403d27\n.text:0000000000403d2a\n.text:0000000000403d2c\n.text:0000000000403d2f\n.text:0000000000403d31\n.text:0000000000403d34\n.text:0000000000403d36\n.text:0000000000403d3b\n.text:0000000000403d40\n.text:0000000000403d43\n.text:0000000000403d45\n.text:0000000000403d4a\n.text:0000000000403d4e\n.text:0000000000403d56\n.text:0000000000403d59\n.text:0000000000403d5c\n.text:0000000000403d5e\n.text:0000000000403d62\n.text:0000000000403d70\n.text:0000000000403d74\n.text:0000000000403d7a\n.text:0000000000403d7d\n.text:0000000000403d7f\n.text:0000000000403d84\n.text:0000000000403d87\n.text:0000000000403d89\n.text:0000000000403d90\n.text:0000000000403d93\n.text:0000000000403d98\n.text:0000000000403d9b\n.text:0000000000403da0\n.text:0000000000403da2\n.text:0000000000403da5\n.text:0000000000403dab\n.text:0000000000403dae\n.text:0000000000403db0\n.text:0000000000403db4\n.text:0000000000403db6\n.text:0000000000403db8\n.text:0000000000403dbb\n.text:0000000000403dbd\n.text:0000000000403dc2\n.text:0000000000403dc7\n.text:0000000000403dca\n.text:0000000000403dcc\n.text:0000000000403dd1\n.text:0000000000403dd6\n.text:0000000000403dd9\n.text:0000000000403ddb\n.text:0000000000403de0\n.text:0000000000403de4\n.text:0000000000403de6\n.text:0000000000403dea\n.text:0000000000403ded\n.text:0000000000403def\n.text:0000000000403df4\n.text:0000000000403df9\n.text:0000000000403dfc\n.text:0000000000403dfe\n.text:0000000000403e01\n.text:0000000000403e04\n.text:0000000000403e07\n.text:0000000000403e0b\n.text:0000000000403e10\n.text:0000000000403e13\n.text:0000000000403e15\n.text:0000000000403e18\n.text:0000000000403e1b\n.text:0000000000403e1e\n.text:0000000000403e21\n.text:0000000000403e25\n.text:0000000000403e29\n.text:0000000000403e2d\n.text:0000000000403e31\n.text:0000000000403e33\n.text:0000000000403e37\n.text:0000000000403e3a\n.text:0000000000403e40\n.text:0000000000403e44\n.text:0000000000403e48\n.text:0000000000403e4e\n.text:0000000000403e53\n.text:0000000000403e56\n.text:0000000000403e59\n.text:0000000000403e5e\n.text:0000000000403e61\n.text:0000000000403e63\n.text:0000000000403e66\n.text:0000000000403e6d\n.text:0000000000403e73\n.text:0000000000403e75\n.text:0000000000403e79\n.text:0000000000403e7f\n.text:0000000000403e84\n.text:0000000000403e89\n.text:0000000000403e8f\n.text:0000000000403e92\n.text:0000000000403e94\n.text:0000000000403e99\n.text:0000000000403e9f\n.text:0000000000403ea4\n.text:0000000000403ea6\n.text:0000000000403eab\n.text:0000000000403eb1\n.text:0000000000403eb3\n.text:0000000000403eb6\n.text:0000000000403eba\n.text:0000000000403ec0\n.text:0000000000403ec5\n.text:0000000000403ed1\n.text:0000000000403ed5\n.text:0000000000403ed7\n.text:0000000000403eda\n.text:0000000000403edf\n.text:0000000000403ee4\n.text:0000000000403ee7\n.text:0000000000403eeb\n.text:0000000000403ef0\n.text:0000000000403ef2\n.text:0000000000403ef6\n.text:0000000000403ef8\n.text:0000000000403f00\n.text:0000000000403f05\n.text:0000000000403f0a\n.text:0000000000403f0e\n.text:0000000000403f12\n.text:0000000000403f1a\n.text:0000000000403f1d\n.text:0000000000403f22\n.text:0000000000403f25\n.text:0000000000403f28\n.text:0000000000403f2d\n.text:0000000000403f30\n.text:0000000000403f33\n.text:0000000000403f39\n.text:0000000000403f3d\n.text:0000000000403f47\n.text:0000000000403f4d\n.text:0000000000403f51\n.text:0000000000403f56\n.text:0000000000403f5c\n.text:0000000000403f60\n.text:0000000000403f63\n.text:0000000000403f67\n.text:0000000000403f69\n.text:0000000000403f6e\n.text:0000000000403f73\n.text:0000000000403f77\n.text:0000000000403f79\n.text:0000000000403f7e\n.text:0000000000403f83\n.text:0000000000403f87\n.text:0000000000403f8c\n.text:0000000000403f90\n.text:0000000000403f94\n.text:0000000000403f97\n.text:0000000000403f9a\n.text:0000000000403f9c\n.text:0000000000403fa0\n.text:0000000000403fa6\n.text:0000000000403fa9\n.text:0000000000403fac\n.text:0000000000403fae\n.text:0000000000403fb2\n.text:0000000000403fb7\n.text:0000000000403fb9\n.text:0000000000403fbb\n.text:0000000000403fc3\n.text:0000000000403fc8\n.text:0000000000403fcb\n.text:0000000000403fd3\n.text:0000000000403fd6\n.text:0000000000403fd9\n.text:0000000000403fde\n.text:0000000000403fe1\n.text:0000000000403fe3\n.text:0000000000403fe8\n.text:0000000000403fed\n.text:0000000000403ff3\n.text:0000000000403ff8\n.text:0000000000403ffb\n.text:0000000000404000\n.text:0000000000404006\n.text:000000000040400b\n.text:0000000000404010\n.text:0000000000404016\n.text:000000000040401a\n.text:000000000040401d\n.text:0000000000404023\n.text:0000000000404029\n.text:000000000040402f\n.text:0000000000404034\n.text:0000000000404036\n.text:0000000000404039\n.text:000000000040403f\n.text:0000000000404043\n.text:0000000000404045\n.text:000000000040404f\n.text:0000000000404053\n.text:0000000000404059\n.text:000000000040405c\n.text:000000000040405e\n.text:0000000000404064\n.text:0000000000404067\n.text:0000000000404069\n.text:000000000040406e\n.text:0000000000404073\n.text:0000000000404076\n.text:000000000040407a\n.text:000000000040407c\n.text:0000000000404081\n.text:0000000000404086\n.text:0000000000404089\n.text:000000000040408b\n.text:0000000000404090\n.text:0000000000404095\n.text:0000000000404098\n.text:000000000040409a\n.text:000000000040409f\n.text:00000000004040a3\n.text:00000000004040a5\n.text:00000000004040a8\n.text:00000000004040ab\n.text:00000000004040b0\n.text:00000000004040b6\n.text:00000000004040b8\n.text:00000000004040bd\n.text:00000000004040c2\n.text:00000000004040c8\n.text:00000000004040d0\n.text:00000000004040d5\n.text:00000000004040d7\n.text:00000000004040dc\n.text:00000000004040df\n.text:00000000004040e1\n.text:00000000004040e4\n.text:00000000004040e6\n.text:00000000004040e9\n.text:00000000004040ec\n.text:00000000004040ef\n.text:00000000004040f1\n.text:00000000004040f9\n.text:00000000004040fc\n.text:00000000004040fe\n.text:0000000000404100\n.text:0000000000404110\n.text:0000000000404113\n.text:0000000000404115\n.text:0000000000404118\n.text:000000000040411e\n.text:0000000000404121\n.text:0000000000404123\n.text:0000000000404125\n.text:0000000000404127\n.text:0000000000404129\n.text:000000000040412c\n.text:000000000040412e\n.text:0000000000404133\n.text:0000000000404138\n.text:000000000040413b\n.text:000000000040413d\n.text:0000000000404142\n.text:0000000000404147\n.text:000000000040414a\n.text:000000000040414c\n.text:0000000000404151\n.text:0000000000404155\n.text:0000000000404158\n.text:000000000040415b\n.text:000000000040415d\n.text:0000000000404162\n.text:0000000000404165\n.text:0000000000404168\n.text:000000000040416a\n.text:0000000000404170\n.text:0000000000404174\n.text:0000000000404176\n.text:0000000000404178\n.text:000000000040417a\n.text:000000000040417d\n.text:000000000040417f\n.text:0000000000404184\n.text:0000000000404189\n.text:000000000040418c\n.text:000000000040418e\n.text:0000000000404193\n.text:0000000000404197\n.text:0000000000404199\n.text:000000000040419c\n.text:000000000040419e\n.text:00000000004041a2\n.text:00000000004041a5\n.text:00000000004041a8\n.text:00000000004041ac\n.text:00000000004041b2\n.text:00000000004041b7\n.text:00000000004041bf\n.text:00000000004041c4\n.text:00000000004041c6\n.text:00000000004041ce\n.text:00000000004041d3\n.text:00000000004041d5\n.text:00000000004041da\n.text:00000000004041df\n.text:00000000004041e3\n.text:00000000004041e5\n.text:00000000004041ea\n.text:00000000004041ed\n.text:00000000004041f0\n.text:00000000004041f2\n.text:00000000004041fa\n.text:00000000004041fc\n.text:0000000000404204\n.text:0000000000404209\n.text:000000000040420d\n.text:0000000000404212\n.text:0000000000404217\n.text:000000000040421b\n.text:0000000000404220\n.text:0000000000404225\n.text:0000000000404229\n.text:000000000040422d\n.text:0000000000404233\n.text:0000000000404238\n.text:0000000000404240\n.text:0000000000404242\n.text:0000000000404244\n.text:0000000000404248\n.text:000000000040424d\n.text:0000000000404253\n.text:0000000000404260\n.text:0000000000404263\n.text:0000000000404269\n.text:000000000040426c\n.text:000000000040426e\n.text:0000000000404271\n.text:0000000000404273\n.text:0000000000404276\n.text:0000000000404278\n.text:0000000000404280\n.text:0000000000404286\n.text:000000000040428a\n.text:000000000040428d\n.text:0000000000404291\n.text:0000000000404296\n.text:000000000040429a\n.text:000000000040429e\n.text:00000000004042a1\n.text:00000000004042a4\n.text:00000000004042a7\n.text:00000000004042ab\n.text:00000000004042af\n.text:00000000004042b1\n.text:00000000004042b6\n.text:00000000004042ba\n.text:00000000004042bd\n.text:00000000004042c0\n.text:00000000004042c7\n.text:00000000004042c8\n.text:00000000004042ca\n.text:00000000004042cc\n.text:00000000004042ce\n.text:00000000004042d0\n.text:00000000004042d1\n.text:00000000004042d2\n.text:00000000004042da\n.text:00000000004042dd\n.text:00000000004042df\n.text:00000000004042e2\n.text:00000000004042e4\n.text:00000000004042e6\n.text:00000000004042e8\n.text:00000000004042ea\n.text:00000000004042ed\n.text:00000000004042f0\n.text:00000000004042f3\n.text:00000000004042f5\n.text:00000000004042f9\n.text:00000000004042fc\n.text:00000000004042ff\n.text:0000000000404302\n.text:0000000000404304\n.text:0000000000404306\n.text:0000000000404309\n.text:000000000040430b\n.text:0000000000404310\n.text:0000000000404312\n.text:0000000000404317\n.text:000000000040431c\n.text:000000000040431f\n.text:0000000000404321\n.text:0000000000404326\n.text:0000000000404329\n.text:000000000040432e\n.text:0000000000404331\n.text:0000000000404337\n.text:000000000040433d\n.text:0000000000404340\n.text:0000000000404345\n'
p818
tp819
sS'rotr_sz'
p820
(S'\n__stdcall rotr_sz(size_t x)\n'
p821
V\u000asize_t rotr_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p822
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p823
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p824
S'.text:00000000004056b0\n.text:00000000004056b2\n.text:00000000004056b5\n.text:00000000004056b8\n'
p825
tp826
sS'set_quoting_style'
p827
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p828
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p829
S'TEST RDI,RDI\nMOV EAX,0x60a2b0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p830
S'48 85 ff\nb8 b0 a2 60 00\n48 0f 45 c7\n89 30\nc3\n'
p831
S'.text:00000000004035f0\n.text:00000000004035f3\n.text:00000000004035f8\n.text:00000000004035fc\n.text:00000000004035fe\n'
p832
tp833
sS'hash_get_entries'
p834
(S'\n__stdcall hash_get_entries(Hash_table * table, void * * buffer, size_t buffer_size)\n'
p835
V\u000asize_t hash_get_entries(Hash_table *table,void **buffer,size_t buffer_size)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  ulong uVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = table->bucket;\u000a  if (table->bucket_limit <= phVar3) {\u000a    return 0;\u000a  }\u000a  uVar2 = 0;\u000a  do {\u000a    phVar1 = phVar3;\u000a    if (phVar3->data != (void *)0x0) {\u000a      while (phVar1 != (hash_entry *)0x0) {\u000a        if (buffer_size <= uVar2) {\u000a          return uVar2;\u000a        }\u000a        buffer[uVar2] = phVar1->data;\u000a        uVar2 = uVar2 + 1;\u000a        phVar1 = phVar1->next;\u000a      }\u000a    }\u000a    phVar3 = phVar3 + 1;\u000a  } while (phVar3 < table->bucket_limit);\u000a  return uVar2;\u000a}\u000a\u000a
p836
S'MOV R8,qword ptr [RDI]\nCMP R8,qword ptr [RDI + 0x8]\nJNC 0x004027d3\nXOR EAX,EAX\nCMP qword ptr [R8],0x0\nJZ 0x004027c8\nTEST R8,R8\nJZ 0x004027c8\nMOV R9,R8\nNOP dword ptr [RAX]\nCMP RAX,RDX\nJNC 0x004027d2\nMOV RCX,qword ptr [R9]\nMOV qword ptr [RSI + RAX*0x8],RCX\nINC RAX\nMOV R9,qword ptr [R9 + 0x8]\nTEST R9,R9\nJNZ 0x004027b0\nADD R8,0x10\nCMP R8,qword ptr [RDI + 0x8]\nJC 0x0040279b\nRET\nXOR EAX,EAX\nRET\n'
p837
S'4c 8b 07\n4c 3b 47 08\n73 3a\n31 c0\n49 83 38 00\n74 27\n4d 85 c0\n74 22\n4d 89 c1\n0f 1f 80 00 00 00 00\n48 39 d0\n73 1d\n49 8b 09\n48 89 0c c6\n48 ff c0\n4d 8b 49 08\n4d 85 c9\n75 e8\n49 83 c0 10\n4c 3b 47 08\n72 c9\nc3\n31 c0\nc3\n'
p838
S'.text:0000000000402790\n.text:0000000000402793\n.text:0000000000402797\n.text:0000000000402799\n.text:000000000040279b\n.text:000000000040279f\n.text:00000000004027a1\n.text:00000000004027a4\n.text:00000000004027a6\n.text:00000000004027a9\n.text:00000000004027b0\n.text:00000000004027b3\n.text:00000000004027b5\n.text:00000000004027b8\n.text:00000000004027bc\n.text:00000000004027bf\n.text:00000000004027c3\n.text:00000000004027c6\n.text:00000000004027c8\n.text:00000000004027cc\n.text:00000000004027d0\n.text:00000000004027d2\n.text:00000000004027d3\n.text:00000000004027d5\n'
p839
tp840
sS'textdomain'
p841
(S'\n__stdcall textdomain()\n'
p842
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060a068)();\u000a  return;\u000a}\u000a\u000a
p843
S'JMP qword ptr [0x0060a068]\n'
p844
S'ff 25 42 8d 20 00\n'
p845
S'.plt:0000000000401320\n'
p846
tp847
sS'xmemdup'
p848
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p849
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p850
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00405420\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401470\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p851
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 ec be ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p852
S'.text:0000000000405560\n.text:0000000000405562\n.text:0000000000405564\n.text:0000000000405565\n.text:0000000000405568\n.text:000000000040556b\n.text:000000000040556e\n.text:0000000000405573\n.text:0000000000405576\n.text:0000000000405579\n.text:000000000040557c\n.text:000000000040557f\n.text:0000000000405584\n.text:0000000000405587\n.text:0000000000405588\n.text:000000000040558a\n.text:000000000040558c\n'
p853
tp854
sS'get_quoting_style'
p855
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p856
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p857
S'TEST RDI,RDI\nMOV EAX,0x60a2b0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p858
S'48 85 ff\nb8 b0 a2 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p859
S'.text:00000000004035e0\n.text:00000000004035e3\n.text:00000000004035e8\n.text:00000000004035ec\n.text:00000000004035ee\n'
p860
tp861
sS'ferror_unlocked'
p862
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p863
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060a0f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p864
S'JMP qword ptr [0x0060a0f8]\n'
p865
S'ff 25 b2 8c 20 00\n'
p866
S'.plt:0000000000401440\n'
p867
tp868
sS'exit'
p869
(S'\n__stdcall exit(int __status)\n'
p870
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060a1a8)();\u000a  return;\u000a}\u000a\u000a
p871
S'JMP qword ptr [0x0060a1a8]\n'
p872
S'ff 25 02 8c 20 00\n'
p873
S'.plt:00000000004015a0\n'
p874
tp875
sS'safe_hasher'
p876
(S'\n__stdcall safe_hasher(Hash_table * table, void * key)\n'
p877
V\u000ahash_entry * safe_hasher(Hash_table *table,void *key)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*table->hasher)(key,table->n_buckets);\u000a  if (sVar1 < table->n_buckets) {\u000a    return table->bucket + sVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p878
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL qword ptr [RBX + 0x30]\nCMP RAX,qword ptr [RBX + 0x10]\nJNC 0x004026c0\nSHL RAX,0x4\nADD RAX,qword ptr [RBX]\nPOP RBX\nRET\nCALL 0x004012a0\n'
p879
S'53\n48 89 fb\n48 8b 43 10\n48 89 f7\n48 89 c6\nff 53 30\n48 3b 43 10\n73 09\n48 c1 e0 04\n48 03 03\n5b\nc3\ne8 db eb ff ff\n'
p880
S'.text:00000000004026a0\n.text:00000000004026a1\n.text:00000000004026a4\n.text:00000000004026a8\n.text:00000000004026ab\n.text:00000000004026ae\n.text:00000000004026b1\n.text:00000000004026b5\n.text:00000000004026b7\n.text:00000000004026bb\n.text:00000000004026be\n.text:00000000004026bf\n.text:00000000004026c0\n'
p881
tp882
sS'locale_charset'
p883
(S'\n__stdcall locale_charset()\n'
p884
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00405b0d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00405b0d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p885
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x004014e0\nTEST RAX,RAX\nMOV R14D,0x4070e1\nCMOVNZ R14,RAX\nCALL 0x00405b20\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00405ae5\nJMP 0x00405b0d\nMOV RDI,RBX\nCALL 0x00401370\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401370\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00405b0d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401460\nTEST EAX,EAX\nJZ 0x00405b00\nCMP BPL,0x2a\nJNZ 0x00405ac0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00405ac0\nMOV RDI,RBX\nCALL 0x00401370\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x407738\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p886
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 42 ba ff ff\n48 85 c0\n41 be e1 70 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 a8 b8 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 9a b8 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 70 b9 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 68 b8 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 38 77 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p887
S'.text:0000000000405a90\n.text:0000000000405a91\n.text:0000000000405a93\n.text:0000000000405a94\n.text:0000000000405a99\n.text:0000000000405a9e\n.text:0000000000405aa1\n.text:0000000000405aa7\n.text:0000000000405aab\n.text:0000000000405ab0\n.text:0000000000405ab3\n.text:0000000000405ab6\n.text:0000000000405ab9\n.text:0000000000405abb\n.text:0000000000405ac0\n.text:0000000000405ac3\n.text:0000000000405ac8\n.text:0000000000405acc\n.text:0000000000405ad1\n.text:0000000000405ad6\n.text:0000000000405adb\n.text:0000000000405ae0\n.text:0000000000405ae3\n.text:0000000000405ae5\n.text:0000000000405ae8\n.text:0000000000405aeb\n.text:0000000000405af0\n.text:0000000000405af2\n.text:0000000000405af4\n.text:0000000000405af8\n.text:0000000000405afa\n.text:0000000000405afe\n.text:0000000000405b00\n.text:0000000000405b03\n.text:0000000000405b08\n.text:0000000000405b0d\n.text:0000000000405b11\n.text:0000000000405b16\n.text:0000000000405b1a\n.text:0000000000405b1b\n.text:0000000000405b1d\n.text:0000000000405b1e\n'
p888
tp889
sS'set_program_name'
p890
(S'\n__stdcall set_program_name(char * argv0)\n'
p891
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p892
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00403571\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x004013b0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040355b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x406a48\nMOV EDX,0x7\nCALL 0x004012c0\nTEST EAX,EAX\nJNZ 0x0040355b\nMOV ESI,0x406a50\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x004012c0\nTEST EAX,EAX\nJNZ 0x00403558\nADD R14,0x3\nMOV qword ptr [0x0060a260],R14\nMOV RBX,R14\nMOV qword ptr [0x0060a2a0],RBX\nMOV qword ptr [0x0060a278],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060a280]\nMOV EDI,0x406a10\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x004015b0\nCALL 0x004012a0\n'
p893
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 a7 de ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 48 6a 40 00\nba 07 00 00 00\ne8 8d dd ff ff\n85 c0\n75 24\nbe 50 6a 40 00\nba 03 00 00 00\n4c 89 f7\ne8 77 dd ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 08 6d 20 00\n4c 89 f3\n48 89 1d 3e 6d 20 00\n48 89 1d 0f 6d 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 08 6d 20 00\nbf 10 6a 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 24 e0 ff ff\ne8 0f dd ff ff\n'
p894
S'.text:00000000004034f0\n.text:00000000004034f2\n.text:00000000004034f3\n.text:00000000004034f4\n.text:00000000004034f7\n.text:00000000004034fa\n.text:00000000004034fc\n.text:0000000000403501\n.text:0000000000403504\n.text:0000000000403509\n.text:000000000040350c\n.text:0000000000403510\n.text:0000000000403514\n.text:0000000000403517\n.text:000000000040351a\n.text:000000000040351e\n.text:0000000000403520\n.text:0000000000403524\n.text:0000000000403529\n.text:000000000040352e\n.text:0000000000403533\n.text:0000000000403535\n.text:0000000000403537\n.text:000000000040353c\n.text:0000000000403541\n.text:0000000000403544\n.text:0000000000403549\n.text:000000000040354b\n.text:000000000040354d\n.text:0000000000403551\n.text:0000000000403558\n.text:000000000040355b\n.text:0000000000403562\n.text:0000000000403569\n.text:000000000040356d\n.text:000000000040356e\n.text:0000000000403570\n.text:0000000000403571\n.text:0000000000403578\n.text:000000000040357d\n.text:0000000000403582\n.text:0000000000403587\n.text:000000000040358c\n'
p895
tp896
sS'FUN_00401270'
p897
(S'\n__stdcall FUN_00401270()\n'
p898
V\u000avoid FUN_00401270(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060a010)();\u000a  return;\u000a}\u000a\u000a
p899
S'PUSH qword ptr [0x0060a008]\nJMP qword ptr [0x0060a010]\n'
p900
S'ff 35 92 8d 20 00\nff 25 94 8d 20 00\n'
p901
S'.plt:0000000000401270\n.plt:0000000000401276\n'
p902
tp903
sS'strspn'
p904
(S'\n__stdcall strspn(char * __s, char * __accept)\n'
p905
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strspn(char *__s,char *__accept)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strspn_0060a0e0)();\u000a  return sVar1;\u000a}\u000a\u000a
p906
S'JMP qword ptr [0x0060a0e0]\n'
p907
S'ff 25 ca 8c 20 00\n'
p908
S'.plt:0000000000401410\n'
p909
tp910
sS'hash_delete'
p911
(S'\n__stdcall hash_delete(Hash_table * table, void * entry)\n'
p912
V\u000avoid * hash_delete(Hash_table *table,void *entry)\u000a\u000a{\u000a  ulong uVar1;\u000a  Hash_tuning *pHVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *__ptr;\u000a  _Bool _Var4;\u000a  void *pvVar5;\u000a  ulong uVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_20;\u000a  \u000a  pvVar5 = hash_find_entry(table,entry,&local_20);\u000a  if (pvVar5 == (void *)0x0) {\u000a    pvVar5 = (void *)0x0;\u000a  }\u000a  else {\u000a    table->n_entries = table->n_entries - 1;\u000a    if (local_20->data == (void *)0x0) {\u000a      uVar6 = table->n_buckets_used - 1;\u000a      table->n_buckets_used = uVar6;\u000a      if ((long)uVar6 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar6;\u000a      }\u000a      uVar6 = table->n_buckets;\u000a      if ((long)uVar6 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar6;\u000a      }\u000a      if (fVar7 < fVar8 * table->tuning->shrink_threshold) {\u000a        check_tuning(table);\u000a        uVar6 = table->n_buckets;\u000a        uVar1 = table->n_buckets_used;\u000a        if ((long)uVar1 < 0) {\u000a          fVar7 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a          fVar7 = fVar7 + fVar7;\u000a        }\u000a        else {\u000a          fVar7 = (float)uVar1;\u000a        }\u000a        pHVar2 = table->tuning;\u000a        if ((long)uVar6 < 0) {\u000a          fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a          fVar8 = fVar8 + fVar8;\u000a        }\u000a        else {\u000a          fVar8 = (float)uVar6;\u000a        }\u000a        if (fVar7 < pHVar2->shrink_threshold * fVar8) {\u000a          fVar8 = fVar8 * pHVar2->shrink_factor;\u000a          if (pHVar2->is_n_buckets == false) {\u000a            fVar8 = fVar8 * pHVar2->growth_threshold;\u000a          }\u000a          candidate = (long)fVar8;\u000a          if (DAT_00406988 <= fVar8) {\u000a            candidate = (long)(fVar8 - DAT_00406988) ^ 0x8000000000000000;\u000a          }\u000a          _Var4 = hash_rehash(table,candidate);\u000a          if (_Var4 == false) {\u000a            __ptr = table->free_entry_list;\u000a            while (__ptr != (hash_entry *)0x0) {\u000a              phVar3 = __ptr->next;\u000a              free(__ptr);\u000a              __ptr = phVar3;\u000a            }\u000a            table->free_entry_list = (hash_entry *)0x0;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return pvVar5;\u000a}\u000a\u000a
p913
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDI\nLEA RDX,[RSP + 0x8]\nMOV ECX,0x1\nCALL 0x00403090\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004031fa\nDEC qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x8]\nCMP qword ptr [RAX],0x0\nJNZ 0x00403329\nMOV RAX,qword ptr [R15 + 0x18]\nDEC RAX\nMOV qword ptr [R15 + 0x18],RAX\nJS 0x00403202\nCVTSI2SS XMM0,RAX\nJMP 0x00403217\nXOR R14D,R14D\nJMP 0x00403329\nMOV RCX,RAX\nSHR RCX,1\nAND EAX,0x1\nOR RAX,RCX\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x10]\nMOV RAX,qword ptr [R15 + 0x28]\nTEST RCX,RCX\nJS 0x0040322b\nCVTSI2SS XMM1,RCX\nJMP 0x00403240\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RAX]\nUCOMISS XMM1,XMM0\nJBE 0x00403329\nMOV RDI,R15\nCALL 0x004029c0\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x0040326c\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nJMP 0x00403284\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x00403297\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x004032af\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVSS XMM2,dword ptr [RCX]\nMULSS XMM2,XMM0\nUCOMISS XMM2,XMM1\nJBE 0x00403329\nMULSS XMM0,dword ptr [RCX + 0x4]\nCMP byte ptr [RCX + 0x10],0x0\nJNZ 0x004032cc\nMULSS XMM0,dword ptr [RCX + 0x8]\nMOVSS XMM1,dword ptr [0x00406988]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x00402c60\nTEST AL,AL\nJNZ 0x00403329\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x00403321\nNOP\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00401290\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00403310\nMOV qword ptr [R15 + 0x48],0x0\nMOV RAX,R14\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p914
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 ff\n48 8d 54 24 08\nb9 01 00 00 00\ne8 c5 fe ff ff\n49 89 c6\n4d 85 f6\n74 27\n49 ff 4f 20\n48 8b 44 24 08\n48 83 38 00\n0f 85 43 01 00 00\n49 8b 47 18\n48 ff c8\n49 89 47 18\n78 0f\nf3 48 0f 2a c0\neb 1d\n45 31 f6\ne9 27 01 00 00\n48 89 c1\n48 d1 e9\n83 e0 01\n48 09 c8\nf3 48 0f 2a c0\nf3 0f 58 c0\n49 8b 4f 10\n49 8b 47 28\n48 85 c9\n78 07\nf3 48 0f 2a c9\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c9\nf3 0f 58 c9\nf3 0f 59 08\n0f 2e c8\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b f7 ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 0a\n0f 57 c9\nf3 48 0f 2a c9\neb 18\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\n0f 57 c9\nf3 48 0f 2a c9\nf3 0f 58 c9\n49 8b 4f 28\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\nf3 0f 10 11\nf3 0f 59 d0\n0f 2e d1\n76 6d\nf3 0f 59 41 04\n80 79 10 00\n75 05\nf3 0f 59 41 08\nf3 0f 10 0d b4 36 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 5f f9 ff ff\n84 c0\n75 24\n49 8b 7f 48\n48 85 ff\n74 13\n66 90\n48 8b 5f 08\ne8 77 df ff ff\n48 85 db\n48 89 df\n75 ef\n49 c7 47 48 00 00 00 00\n4c 89 f0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p915
S'.text:00000000004031b0\n.text:00000000004031b2\n.text:00000000004031b4\n.text:00000000004031b5\n.text:00000000004031b9\n.text:00000000004031bc\n.text:00000000004031c1\n.text:00000000004031c6\n.text:00000000004031cb\n.text:00000000004031ce\n.text:00000000004031d1\n.text:00000000004031d3\n.text:00000000004031d7\n.text:00000000004031dc\n.text:00000000004031e0\n.text:00000000004031e6\n.text:00000000004031ea\n.text:00000000004031ed\n.text:00000000004031f1\n.text:00000000004031f3\n.text:00000000004031f8\n.text:00000000004031fa\n.text:00000000004031fd\n.text:0000000000403202\n.text:0000000000403205\n.text:0000000000403208\n.text:000000000040320b\n.text:000000000040320e\n.text:0000000000403213\n.text:0000000000403217\n.text:000000000040321b\n.text:000000000040321f\n.text:0000000000403222\n.text:0000000000403224\n.text:0000000000403229\n.text:000000000040322b\n.text:000000000040322e\n.text:0000000000403231\n.text:0000000000403234\n.text:0000000000403237\n.text:000000000040323c\n.text:0000000000403240\n.text:0000000000403244\n.text:0000000000403247\n.text:000000000040324d\n.text:0000000000403250\n.text:0000000000403255\n.text:0000000000403259\n.text:000000000040325d\n.text:0000000000403260\n.text:0000000000403262\n.text:0000000000403265\n.text:000000000040326a\n.text:000000000040326c\n.text:000000000040326f\n.text:0000000000403272\n.text:0000000000403275\n.text:0000000000403278\n.text:000000000040327b\n.text:0000000000403280\n.text:0000000000403284\n.text:0000000000403288\n.text:000000000040328b\n.text:000000000040328d\n.text:0000000000403290\n.text:0000000000403295\n.text:0000000000403297\n.text:000000000040329a\n.text:000000000040329d\n.text:00000000004032a0\n.text:00000000004032a3\n.text:00000000004032a6\n.text:00000000004032ab\n.text:00000000004032af\n.text:00000000004032b3\n.text:00000000004032b7\n.text:00000000004032ba\n.text:00000000004032bc\n.text:00000000004032c1\n.text:00000000004032c5\n.text:00000000004032c7\n.text:00000000004032cc\n.text:00000000004032d4\n.text:00000000004032d7\n.text:00000000004032db\n.text:00000000004032e0\n.text:00000000004032ea\n.text:00000000004032ed\n.text:00000000004032f2\n.text:00000000004032f5\n.text:00000000004032f9\n.text:00000000004032fc\n.text:0000000000403301\n.text:0000000000403303\n.text:0000000000403305\n.text:0000000000403309\n.text:000000000040330c\n.text:000000000040330e\n.text:0000000000403310\n.text:0000000000403314\n.text:0000000000403319\n.text:000000000040331c\n.text:000000000040331f\n.text:0000000000403321\n.text:0000000000403329\n.text:000000000040332c\n.text:0000000000403330\n.text:0000000000403331\n.text:0000000000403333\n.text:0000000000403335\n'
p916
tp917
sS'quotearg_buffer'
p918
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p919
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p920
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60a2b0\nCMOVNZ RBP,R8\nCALL 0x004012b0\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00403710\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p921
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd b0 a2 60 00\n49 0f 45 e8\ne8 f8 db ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p922
S'.text:0000000000403690\n.text:0000000000403691\n.text:0000000000403693\n.text:0000000000403695\n.text:0000000000403697\n.text:0000000000403699\n.text:000000000040369a\n.text:000000000040369b\n.text:000000000040369e\n.text:00000000004036a1\n.text:00000000004036a4\n.text:00000000004036a7\n.text:00000000004036aa\n.text:00000000004036af\n.text:00000000004036b3\n.text:00000000004036b8\n.text:00000000004036bb\n.text:00000000004036bd\n.text:00000000004036c1\n.text:00000000004036c5\n.text:00000000004036c9\n.text:00000000004036cd\n.text:00000000004036d0\n.text:00000000004036d3\n.text:00000000004036d6\n.text:00000000004036d9\n.text:00000000004036dc\n.text:00000000004036df\n.text:00000000004036e3\n.text:00000000004036e4\n.text:00000000004036e9\n.text:00000000004036ed\n.text:00000000004036f1\n.text:00000000004036f3\n.text:00000000004036f7\n.text:00000000004036f8\n.text:00000000004036fa\n.text:00000000004036fc\n.text:00000000004036fe\n.text:0000000000403700\n.text:0000000000403701\n'
p923
tp924
sS'quotearg_colon'
p925
(S'\n__stdcall quotearg_colon(char * arg)\n'
p926
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p927
S'MOV ESI,0x3a\nJMP 0x00404870\n'
p928
S'be 3a 00 00 00\neb e9\n'
p929
S'.text:0000000000404880\n.text:0000000000404885\n'
p930
tp931
sS'canonicalize_filename_mode'
p932
(S'\n__stdcall canonicalize_filename_mode(char * name)\n'
p933
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000achar * canonicalize_filename_mode(char *name)\u000a\u000a{\u000a  char *__src;\u000a  long lVar1;\u000a  long lVar2;\u000a  _Bool _Var3;\u000a  byte bVar4;\u000a  int iVar5;\u000a  int *piVar6;\u000a  char *__file;\u000a  uint *puVar7;\u000a  size_t __n;\u000a  size_t sVar8;\u000a  char *__s;\u000a  ulong n;\u000a  char *__n_00;\u000a  ulong in_RSI;\u000a  uint uVar9;\u000a  char *pcVar10;\u000a  uint local_124;\u000a  ulong local_120;\u000a  char *local_118;\u000a  char *local_110;\u000a  char *local_108;\u000a  Hash_table *local_100;\u000a  int local_f4;\u000a  uint local_f0;\u000a  uint local_ec;\u000a  char *local_e8;\u000a  char *local_e0;\u000a  char *local_d8;\u000a  ulong local_d0;\u000a  ulong local_c8;\u000a  stat local_c0;\u000a  \u000a  local_ec = (uint)in_RSI;\u000a  local_100 = (Hash_table *)0x0;\u000a  uVar9 = local_ec & 3;\u000a  if (((local_ec + 3 & uVar9) != 0) || (name == (char *)0x0)) {\u000a    piVar6 = __errno_location();\u000a    *piVar6 = 0x16;\u000a    return (char *)0x0;\u000a  }\u000a  if (*name == '/') {\u000a    __file = (char *)xmalloc(0x1000);\u000a    *__file = '/';\u000a    pcVar10 = __file + 1;\u000a    local_108 = __file + 0x1000;\u000a  }\u000a  else {\u000a    if (*name == 0) {\u000a      piVar6 = __errno_location();\u000a      *piVar6 = 2;\u000a      return (char *)0x0;\u000a    }\u000a    __file = xgetcwd();\u000a    if (__file == (char *)0x0) {\u000a      return (char *)0x0;\u000a    }\u000a    pcVar10 = (char *)__rawmemchr(__file,0);\u000a    lVar1 = -(long)__file;\u000a    local_108 = pcVar10;\u000a    if ((long)(pcVar10 + lVar1) < 0x1000) {\u000a      __file = (char *)xrealloc(__file,0x1000);\u000a      pcVar10 = pcVar10 + lVar1 + (long)__file;\u000a      local_108 = __file + 0x1000;\u000a    }\u000a  }\u000a  local_f0 = local_ec & 4;\u000a  local_ec = local_ec & 7;\u000a  local_c8 = (ulong)(uVar9 != 2);\u000a  local_f4 = (uint)(uVar9 != 2) * 9 + 4;\u000a  local_120 = 0;\u000a  n = in_RSI & 0xffffff03;\u000a  local_118 = (char *)0x0;\u000a  local_d0 = n;\u000a  local_110 = name;\u000aLAB_00401e51:\u000a  __s = pcVar10;\u000a  if (*name == 0) {\u000aLAB_004021c7:\u000a    if ((__file + 1 < __s) && (__s[-1] == '/')) {\u000a      __s = __s + -1;\u000a    }\u000a    *__s = 0;\u000a    if (local_108 != __s + 1) {\u000a      __file = (char *)xrealloc(__file,(size_t)(__s + (1 - (long)__file)));\u000a    }\u000a    free(local_118);\u000a    if (local_100 != (Hash_table *)0x0) {\u000a      hash_free(local_100);\u000a      return __file;\u000a    }\u000a    return __file;\u000a  }\u000a  local_124 = (uint)n;\u000a  __s = pcVar10;\u000aLAB_00401e70:\u000a  __src = name + -1;\u000a  do {\u000a    pcVar10 = __src;\u000a    __src = pcVar10 + 1;\u000a    name = __src;\u000a  } while (pcVar10[1] == '/');\u000a  while ((*name != 0 && (*name != '/'))) {\u000a    name = name + 1;\u000a  }\u000a  __n_00 = name + -(long)__src;\u000a  if (__n_00 == (char *)0x1) {\u000a    if (*__src != '.') goto LAB_00401f0f;\u000aLAB_00401ef6:\u000a    if (*name == 0) goto LAB_004021c7;\u000a    goto LAB_00401e70;\u000a  }\u000a  if (__n_00 == (char *)0x2) {\u000a    if ((*__src != '.') || (pcVar10[2] != '.')) goto LAB_00401f0f;\u000a    pcVar10 = __s;\u000a    if (__file + 1 < __s) {\u000a      do {\u000a        __s = pcVar10 + -1;\u000a        if (__s <= __file) break;\u000a        __src = pcVar10 + -2;\u000a        pcVar10 = __s;\u000a      } while (*__src != '/');\u000a    }\u000a    goto LAB_00401ef6;\u000a  }\u000a  if (__n_00 == (char *)0x0) goto LAB_004021c7;\u000aLAB_00401f0f:\u000a  if (__s[-1] != '/') {\u000a    *__s = '/';\u000a    __s = __s + 1;\u000a  }\u000a  if (local_108 <= __s + (long)__n_00) {\u000a    lVar1 = -(long)__file;\u000a    lVar2 = -(long)__file;\u000a    pcVar10 = __n_00 + 1;\u000a    if ((long)__n_00 < 0x1000) {\u000a      pcVar10 = (char *)0x1000;\u000a    }\u000a    __file = (char *)xrealloc(__file,(size_t)(pcVar10 + (long)(local_108 + lVar2)));\u000a    local_108 = __file + (long)(pcVar10 + (long)(local_108 + lVar2));\u000a    __s = __s + lVar1 + (long)__file;\u000a  }\u000a  memcpy(__s,__src,(size_t)__n_00);\u000a  pcVar10 = __s + (long)__n_00;\u000a  __s[(long)__n_00] = 0;\u000a  local_d8 = __s;\u000a  if (local_ec == 6) {\u000aLAB_00401fd4:\u000a    local_c0.st_mode = 0;\u000aLAB_00401fdf:\u000a    if ((local_c0.st_mode & 0xf000) != 0xa000) {\u000a      if ((local_c0.st_mode & 0xf000) == 0x4000) {\u000a        n = (ulong)local_124;\u000a      }\u000a      else {\u000a        n = (ulong)local_124;\u000a        if ((uVar9 != 2) && (*name != 0)) {\u000a          local_124 = 0x14;\u000aLAB_00402234:\u000a          free(local_118);\u000a          free(__file);\u000a          if (local_100 != (Hash_table *)0x0) {\u000a            hash_free(local_100);\u000a          }\u000a          puVar7 = (uint *)__errno_location();\u000a          *puVar7 = local_124;\u000a          return (char *)0x0;\u000a        }\u000a      }\u000a      goto LAB_00401e51;\u000a    }\u000a    _Var3 = seen_triple(&local_100,local_110,&local_c0);\u000a    if (_Var3 == false) {\u000a      __s = areadlink_with_size(__file,local_c0.st_size);\u000a      if (__s == (char *)0x0) {\u000a        puVar7 = (uint *)__errno_location();\u000a        local_c8._0_1_ = *puVar7 == 0xc | (byte)local_c8;\u000a        if ((byte)local_c8 != 0) {\u000a          local_124 = *puVar7;\u000a        }\u000a        n = (ulong)local_124;\u000a        bVar4 = (byte)local_c8 * '\u005ct' + 4;\u000a        goto LAB_00402087;\u000a      }\u000a      local_e8 = __s;\u000a      __n = strlen(__s);\u000a      sVar8 = strlen(name);\u000a      n = __n + 1 + sVar8;\u000a      if (local_120 == 0) {\u000a        if (n < 0x1001) {\u000a          n = 0x1000;\u000a        }\u000a        local_e0 = __file;\u000a        local_118 = (char *)xmalloc(n);\u000a        local_120 = n;\u000a      }\u000a      else {\u000a        local_e0 = __file;\u000a        if (local_120 < n) {\u000a          local_e0 = __file;\u000a          local_118 = (char *)xrealloc(local_118,n);\u000a          local_120 = n;\u000a        }\u000a      }\u000a      memmove(local_118 + __n,name,sVar8 + 1);\u000a      __s = local_e8;\u000a      memcpy(local_118,local_e8,__n);\u000a      __file = local_e0;\u000a      if (*__s == '/') {\u000a        *local_e0 = '/';\u000a        pcVar10 = local_e0 + 1;\u000a      }\u000a      else {\u000a        if (local_e0 + 1 < pcVar10) {\u000a          __src = name + (long)(local_d8 + (-1 - (long)__src));\u000a          do {\u000a            pcVar10 = __src;\u000a            if (pcVar10 <= local_e0) break;\u000a            __src = pcVar10 + -1;\u000a          } while (pcVar10[-1] != '/');\u000a        }\u000a      }\u000a      free(__s);\u000a      n = (ulong)local_124;\u000a      name = local_118;\u000a      local_110 = local_118;\u000a      goto LAB_00401e51;\u000a    }\u000a    n = (ulong)local_124;\u000a    if (uVar9 != 2) {\u000a      n = 0x28;\u000a    }\u000a    bVar4 = (byte)local_f4;\u000a  }\u000a  else {\u000a    if (local_f0 != 0) {\u000a      local_d8 = __s;\u000a      iVar5 = stat(__file,(stat *)&local_c0);\u000a      if (iVar5 != 0) goto LAB_00401fb4;\u000a      goto LAB_00401fdf;\u000a    }\u000a    local_d8 = __s;\u000a    iVar5 = lstat(__file,(stat *)&local_c0);\u000a    if (iVar5 == 0) goto LAB_00401fdf;\u000aLAB_00401fb4:\u000a    puVar7 = (uint *)__errno_location();\u000a    local_124 = *puVar7;\u000a    if ((char)local_d0 != 1) {\u000a      if ((char)local_d0 != 0) goto LAB_00401fd4;\u000a      goto LAB_00402234;\u000a    }\u000a    __n = strspn(name,"/");\u000a    bVar4 = (name[__n] != 0) * '\u005ct' + 4;\u000a    if (local_124 != 2) {\u000a      bVar4 = 0xd;\u000a    }\u000a    n = (ulong)local_124;\u000a  }\u000aLAB_00402087:\u000a  local_124 = (uint)n;\u000a  if ((bVar4 & 0xf) != 4) {\u000a    if ((bVar4 & 0xf) != 0xd) {\u000a      return __file;\u000a    }\u000a    goto LAB_00402234;\u000a  }\u000a  goto LAB_00401e51;\u000a}\u000a\u000a
p934
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xf8\nMOV EBP,ESI\nMOV R13,RDI\nMOV qword ptr [RSP + 0x28],0x0\nMOV R14D,EBP\nAND R14D,0x3\nLEA EAX,[RBP + 0x3]\nTEST EAX,R14D\nJZ 0x00401d41\nCALL 0x004012b0\nMOV dword ptr [RAX],0x16\nXOR R13D,R13D\nMOV RAX,R13\nADD RSP,0xf8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nTEST R13,R13\nJZ 0x00401d1e\nMOV AL,byte ptr [R13]\nCMP AL,0x2f\nJZ 0x00401d5f\nTEST AL,AL\nJNZ 0x00401d81\nCALL 0x004012b0\nMOV dword ptr [RAX],0x2\nJMP 0x00401d29\nMOV EDI,0x1000\nCALL 0x00405420\nMOV byte ptr [RAX],0x2f\nLEA RCX,[0x1000 + RAX]\nMOV qword ptr [RSP + 0x20],RCX\nMOV RBX,RAX\nLEA R15,[RAX + 0x1]\nJMP 0x00401dcf\nCALL 0x004055e0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00401d29\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x004014b0\nMOV R15,RAX\nSUB R15,RBX\nCMP R15,0xfff\nJG 0x00401dc7\nMOV ESI,0x1000\nMOV RDI,RBX\nCALL 0x00405460\nADD R15,RAX\nMOV RBX,RAX\nADD RAX,0x1000\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x00401dcf\nMOV qword ptr [RSP + 0x20],RAX\nMOV R15,RAX\nMOV EAX,EBP\nAND EAX,0x4\nMOV dword ptr [RSP + 0x38],EAX\nMOV EAX,EBP\nAND EAX,0x7\nMOV dword ptr [RSP + 0x3c],EAX\nXOR EAX,EAX\nCMP R14D,0x2\nSETNZ AL\nMOV qword ptr [RSP + 0x60],RAX\nLEA EAX,[RAX + RAX*0x8 + 0x4]\nMOV dword ptr [RSP + 0x34],EAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nAND BPL,0x3\nMOV qword ptr [RSP + 0x58],RBP\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R13\nJMP 0x00401e4b\nCALL 0x00401290\nMOV RAX,R13\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R13\nMOV EBP,dword ptr [RSP + 0x4]\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nJMP 0x00401e4b\nMOV RBX,R13\nMOV RAX,qword ptr [RSP + 0x8]\nMOV R13,R12\nMOV EBP,dword ptr [RSP + 0x4]\nMOV qword ptr [RSP + 0x8],RAX\nMOV R12,R13\nMOV R13,RBX\nCMP byte ptr [R12],0x0\nJZ 0x004021c7\nMOV dword ptr [RSP + 0x4],EBP\nLEA RAX,[R13 + 0x1]\nNOP word ptr CS:[RAX + RAX*0x1]\nDEC R12\nMOV RBP,R12\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RBP + 0x1],0x2f\nLEA RBP,[RBP + 0x1]\nJZ 0x00401e80\nMOV R12,RBP\nJMP 0x00401e93\nINC R12\nMOVZX ECX,byte ptr [R12]\nTEST CL,CL\nJZ 0x00401ea1\nCMP CL,0x2f\nJNZ 0x00401e90\nMOV RBX,R12\nSUB RBX,RBP\nCMP RBX,0x1\nJZ 0x00401ef0\nCMP RBX,0x2\nJNZ 0x00401f06\nCMP byte ptr [RBP],0x2e\nJNZ 0x00401f0f\nCMP byte ptr [RBP + 0x1],0x2e\nJNZ 0x00401f0f\nCMP R15,RAX\nJBE 0x00401ef6\nDEC R15\nMOV RCX,R15\nNOP word ptr [RAX + RAX*0x1]\nMOV R15,RCX\nCMP R15,R13\nJBE 0x00401ef6\nLEA RCX,[R15 + -0x1]\nCMP byte ptr [R15 + -0x1],0x2f\nJNZ 0x00401ed0\nJMP 0x00401ef6\nCMP byte ptr [RBP],0x2e\nJNZ 0x00401f0f\nCMP byte ptr [R12],0x0\nJNZ 0x00401e70\nJMP 0x004021c7\nTEST RBX,RBX\nJZ 0x004021c7\nCMP byte ptr [R15 + -0x1],0x2f\nJZ 0x00401f1d\nMOV byte ptr [R15],0x2f\nINC R15\nLEA RAX,[R15 + RBX*0x1]\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RAX,RCX\nMOV RAX,RCX\nJC 0x00401f64\nSUB R15,R13\nSUB RAX,R13\nMOV RDI,R13\nLEA R13,[RBX + 0x1]\nCMP RBX,0xfff\nMOV ECX,0x1000\nCMOVLE R13,RCX\nADD R13,RAX\nMOV RSI,R13\nCALL 0x00405460\nADD R13,RAX\nADD R15,RAX\nMOV qword ptr [RSP + 0x20],R13\nMOV R13,RAX\nMOV RDI,R15\nMOV RSI,RBP\nMOV RDX,RBX\nCALL 0x00401470\nMOV RAX,R15\nLEA R15,[RAX + RBX*0x1]\nCMP dword ptr [RSP + 0x3c],0x6\nMOV qword ptr [RSP + 0x50],RAX\nMOV byte ptr [RAX + RBX*0x1],0x0\nJZ 0x00401fd4\nCMP dword ptr [RSP + 0x38],0x0\nJNZ 0x00401fa3\nMOV RDI,R13\nLEA RSI,[RSP + 0x68]\nCALL 0x00405fc0\nTEST EAX,EAX\nJNZ 0x00401fb4\nJMP 0x00401fdf\nMOV RDI,R13\nLEA RSI,[RSP + 0x68]\nCALL 0x00405fb0\nTEST EAX,EAX\nJZ 0x00401fdf\nCALL 0x004012b0\nMOV EBX,dword ptr [RAX]\nMOV RAX,qword ptr [RSP + 0x58]\nCMP AL,0x1\nJZ 0x0040205f\nMOV dword ptr [RSP + 0x4],EBX\nTEST AL,AL\nJZ 0x00402230\nMOV dword ptr [0x80 + RSP],0x0\nMOVZX EAX,word ptr [0x80 + RSP]\nAND EAX,0xf000\nCMP EAX,0xa000\nJNZ 0x00402096\nLEA RDI,[RSP + 0x28]\nMOV RSI,qword ptr [RSP + 0x18]\nLEA RDX,[RSP + 0x68]\nCALL 0x00402270\nTEST AL,AL\nJZ 0x00402025\nCMP R14D,0x2\nMOV EBP,dword ptr [RSP + 0x4]\nMOV EAX,0x28\nCMOVNZ EBP,EAX\nMOV EAX,dword ptr [RSP + 0x34]\nJMP 0x00402087\nMOV RSI,qword ptr [0x98 + RSP]\nMOV RDI,R13\nCALL 0x00401c20\nTEST RAX,RAX\nJNZ 0x004020cf\nCALL 0x004012b0\nMOV EAX,dword ptr [RAX]\nCMP EAX,0xc\nSETZ CL\nOR CL,byte ptr [RSP + 0x60]\nMOV EBP,dword ptr [RSP + 0x4]\nCMOVNZ EBP,EAX\nMOVZX EAX,CL\nLEA EAX,[RAX + RAX*0x8 + 0x4]\nJMP 0x00402087\nMOV ESI,0x406a4e\nMOV RDI,R12\nCALL 0x00401410\nXOR ECX,ECX\nCMP byte ptr [RAX + R12*0x1],0x0\nSETNZ CL\nCMP EBX,0x2\nLEA EAX,[RCX + RCX*0x8 + 0x4]\nMOV ECX,0xd\nCMOVNZ EAX,ECX\nMOV EBP,EBX\nAND AL,0xf\nCMP AL,0x4\nJZ 0x00401e51\nJMP 0x00402227\nMOVZX EAX,AX\nCMP EAX,0x4000\nJZ 0x00401e37\nCMP R14D,0x2\nMOV EBP,dword ptr [RSP + 0x4]\nJZ 0x004020ba\nMOV AL,byte ptr [R12]\nTEST AL,AL\nJNZ 0x00402261\nMOV RBX,R13\nMOV RAX,qword ptr [RSP + 0x8]\nMOV R13,R12\nMOV qword ptr [RSP + 0x8],RAX\nJMP 0x00401e4b\nMOV qword ptr [RSP + 0x40],RAX\nMOV RDI,RAX\nCALL 0x00401370\nMOV RBX,RAX\nMOV RDI,R12\nCALL 0x00401370\nMOV qword ptr [RSP + 0x18],RBX\nLEA RCX,[RBX + RAX*0x1 + 0x1]\nMOV RBX,RAX\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nMOV qword ptr [RSP + 0x48],R13\nJZ 0x0040211c\nCMP RCX,RAX\nJBE 0x0040213e\nMOV RDI,qword ptr [RSP + 0x10]\nMOV qword ptr [RSP + 0x8],RCX\nMOV RSI,RCX\nCALL 0x00405460\nJMP 0x00402139\nCMP RCX,0x1000\nMOV EAX,0x1000\nCMOVBE RCX,RAX\nMOV qword ptr [RSP + 0x8],RCX\nMOV RDI,RCX\nCALL 0x00405420\nMOV R13,RAX\nJMP 0x00402148\nMOV qword ptr [RSP + 0x8],RAX\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,qword ptr [RSP + 0x18]\nADD RDI,R13\nINC RBX\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00401550\nMOV RDI,R13\nMOV RBX,qword ptr [RSP + 0x40]\nMOV RSI,RBX\nMOV RDX,qword ptr [RSP + 0x18]\nCALL 0x00401470\nMOV RDI,RBX\nMOV RCX,qword ptr [RSP + 0x48]\nLEA RAX,[RCX + 0x1]\nCMP byte ptr [RDI],0x2f\nJNZ 0x00402192\nMOV RBX,RCX\nMOV byte ptr [RCX],0x2f\nMOV R15,RAX\nJMP 0x00401e15\nMOV RBX,RCX\nCMP R15,RAX\nJBE 0x00401e15\nMOV RAX,qword ptr [RSP + 0x50]\nSUB RAX,RBP\nLEA RAX,[RAX + R12*0x1 + -0x1]\nMOV R15,RAX\nCMP R15,RBX\nJBE 0x00401e15\nLEA RAX,[R15 + -0x1]\nCMP byte ptr [R15 + -0x1],0x2f\nJNZ 0x004021ab\nJMP 0x00401e15\nLEA RAX,[R13 + 0x1]\nCMP R15,RAX\nJBE 0x004021dd\nLEA RAX,[R15 + -0x1]\nCMP byte ptr [R15 + -0x1],0x2f\nCMOVZ R15,RAX\nMOV RBX,qword ptr [RSP + 0x10]\nMOV byte ptr [R15],0x0\nLEA RAX,[R15 + 0x1]\nCMP qword ptr [RSP + 0x20],RAX\nJZ 0x00402207\nMOV ESI,0x1\nSUB RSI,R13\nADD RSI,R15\nMOV RDI,R13\nCALL 0x00405460\nMOV R13,RAX\nMOV RDI,RBX\nCALL 0x00401290\nMOV RDI,qword ptr [RSP + 0x28]\nTEST RDI,RDI\nJZ 0x00401d2c\nCALL 0x00402b80\nJMP 0x00401d2c\nCMP AL,0xd\nJZ 0x00402234\nJMP 0x00401d2c\nMOV EBP,dword ptr [RSP + 0x4]\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x00401290\nMOV RDI,R13\nCALL 0x00401290\nMOV RDI,qword ptr [RSP + 0x28]\nTEST RDI,RDI\nJZ 0x00402255\nCALL 0x00402b80\nCALL 0x004012b0\nMOV dword ptr [RAX],EBP\nJMP 0x00401d29\nMOV EBP,0x14\nJMP 0x00402234\n'
p935
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec f8 00 00 00\n89 f5\n49 89 fd\n48 c7 44 24 28 00 00 00 00\n41 89 ee\n41 83 e6 03\n8d 45 03\n44 85 f0\n74 23\ne8 8d f5 ff ff\nc7 00 16 00 00 00\n45 31 ed\n4c 89 e8\n48 81 c4 f8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4d 85 ed\n74 d8\n41 8a 45 00\n3c 2f\n74 11\n84 c0\n75 2f\ne8 59 f5 ff ff\nc7 00 02 00 00 00\neb ca\nbf 00 10 00 00\ne8 b7 36 00 00\nc6 00 2f\n48 8d 88 00 10 00 00\n48 89 4c 24 20\n48 89 c3\n4c 8d 78 01\neb 4e\ne8 5a 38 00 00\n48 89 c3\n48 85 db\n74 9b\n31 f6\n48 89 df\ne8 18 f7 ff ff\n49 89 c7\n49 29 df\n49 81 ff ff 0f 00 00\n7f 20\nbe 00 10 00 00\n48 89 df\ne8 ac 36 00 00\n49 01 c7\n48 89 c3\n48 05 00 10 00 00\n48 89 44 24 20\neb 08\n48 89 44 24 20\n49 89 c7\n89 e8\n83 e0 04\n89 44 24 38\n89 e8\n83 e0 07\n89 44 24 3c\n31 c0\n41 83 fe 02\n0f 95 c0\n48 89 44 24 60\n8d 44 c0 04\n89 44 24 34\n31 c0\n48 89 44 24 08\n40 80 e5 03\n48 89 6c 24 58\n31 c0\n48 89 44 24 10\n4c 89 6c 24 18\neb 36\ne8 76 f4 ff ff\n4c 89 e8\n48 89 44 24 10\n4c 89 6c 24 18\n8b 6c 24 04\n48 8b 44 24 08\n48 89 44 24 08\neb 14\n4c 89 eb\n48 8b 44 24 08\n4d 89 e5\n8b 6c 24 04\n48 89 44 24 08\n4d 89 ec\n49 89 dd\n41 80 3c 24 00\n0f 84 6b 03 00 00\n89 6c 24 04\n49 8d 45 01\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 ff cc\n4c 89 e5\n66 2e 0f 1f 84 00 00 00 00 00\n80 7d 01 2f\n48 8d 6d 01\n74 f6\n49 89 ec\neb 04\n49 ff c4\n41 0f b6 0c 24\n84 c9\n74 05\n80 f9 2f\n75 ef\n4c 89 e3\n48 29 eb\n48 83 fb 01\n74 43\n48 83 fb 02\n75 53\n80 7d 00 2e\n75 56\n80 7d 01 2e\n75 50\n49 39 c7\n76 32\n49 ff cf\n4c 89 f9\n66 0f 1f 44 00 00\n49 89 cf\n4d 39 ef\n76 1e\n49 8d 4f ff\n41 80 7f ff 2f\n75 ed\neb 11\n80 7d 00 2e\n75 19\n41 80 3c 24 00\n0f 85 6f ff ff ff\ne9 c1 02 00 00\n48 85 db\n0f 84 b8 02 00 00\n41 80 7f ff 2f\n74 07\n41 c6 07 2f\n49 ff c7\n49 8d 04 1f\n48 8b 4c 24 20\n48 39 c8\n48 89 c8\n72 36\n4d 29 ef\n4c 29 e8\n4c 89 ef\n4c 8d 6b 01\n48 81 fb ff 0f 00 00\nb9 00 10 00 00\n4c 0f 4e e9\n49 01 c5\n4c 89 ee\ne8 0a 35 00 00\n49 01 c5\n49 01 c7\n4c 89 6c 24 20\n49 89 c5\n4c 89 ff\n48 89 ee\n48 89 da\ne8 fe f4 ff ff\n4c 89 f8\n4c 8d 3c 18\n83 7c 24 3c 06\n48 89 44 24 50\nc6 04 18 00\n74 4b\n83 7c 24 38 00\n75 13\n4c 89 ef\n48 8d 74 24 68\ne8 23 40 00 00\n85 c0\n75 13\neb 3c\n4c 89 ef\n48 8d 74 24 68\ne8 00 40 00 00\n85 c0\n74 2b\ne8 f7 f2 ff ff\n8b 18\n48 8b 44 24 58\n3c 01\n0f 84 97 00 00 00\n89 5c 24 04\n84 c0\n0f 84 5c 02 00 00\nc7 84 24 80 00 00 00 00 00 00 00\n0f b7 84 24 80 00 00 00\n25 00 f0 00 00\n3d 00 a0 00 00\n0f 85 9f 00 00 00\n48 8d 7c 24 28\n48 8b 74 24 18\n48 8d 54 24 68\ne8 65 02 00 00\n84 c0\n74 16\n41 83 fe 02\n8b 6c 24 04\nb8 28 00 00 00\n0f 45 e8\n8b 44 24 34\neb 62\n48 8b b4 24 98 00 00 00\n4c 89 ef\ne8 eb fb ff ff\n48 85 c0\n0f 85 91 00 00 00\ne8 6d f2 ff ff\n8b 00\n83 f8 0c\n0f 94 c1\n0a 4c 24 60\n8b 6c 24 04\n0f 45 e8\n0f b6 c1\n8d 44 c0 04\neb 28\nbe 4e 6a 40 00\n4c 89 e7\ne8 a4 f3 ff ff\n31 c9\n42 80 3c 20 00\n0f 95 c1\n83 fb 02\n8d 44 c9 04\nb9 0d 00 00 00\n0f 45 c1\n89 dd\n24 0f\n3c 04\n0f 84 c0 fd ff ff\ne9 91 01 00 00\n0f b7 c0\n3d 00 40 00 00\n0f 84 93 fd ff ff\n41 83 fe 02\n8b 6c 24 04\n74 0c\n41 8a 04 24\n84 c0\n0f 85 a7 01 00 00\n4c 89 eb\n48 8b 44 24 08\n4d 89 e5\n48 89 44 24 08\ne9 7c fd ff ff\n48 89 44 24 40\n48 89 c7\ne8 94 f2 ff ff\n48 89 c3\n4c 89 e7\ne8 89 f2 ff ff\n48 89 5c 24 18\n48 8d 4c 03 01\n48 89 c3\n48 8b 44 24 08\n48 85 c0\n4c 89 6c 24 48\n74 19\n48 39 c1\n76 36\n48 8b 7c 24 10\n48 89 4c 24 08\n48 89 ce\ne8 46 33 00 00\neb 1d\n48 81 f9 00 10 00 00\nb8 00 10 00 00\n48 0f 46 c8\n48 89 4c 24 08\n48 89 cf\ne8 e7 32 00 00\n49 89 c5\neb 0a\n48 89 44 24 08\n4c 8b 6c 24 10\n48 8b 7c 24 18\n4c 01 ef\n48 ff c3\n4c 89 e6\n48 89 da\ne8 f2 f3 ff ff\n4c 89 ef\n48 8b 5c 24 40\n48 89 de\n48 8b 54 24 18\ne8 fd f2 ff ff\n48 89 df\n48 8b 4c 24 48\n48 8d 41 01\n80 3f 2f\n75 0e\n48 89 cb\nc6 01 2f\n49 89 c7\ne9 83 fc ff ff\n48 89 cb\n49 39 c7\n0f 86 77 fc ff ff\n48 8b 44 24 50\n48 29 e8\n4a 8d 44 20 ff\n49 89 c7\n49 39 df\n0f 86 5e fc ff ff\n49 8d 47 ff\n41 80 7f ff 2f\n75 e9\ne9 4e fc ff ff\n49 8d 45 01\n49 39 c7\n76 0d\n49 8d 47 ff\n41 80 7f ff 2f\n4c 0f 44 f8\n48 8b 5c 24 10\n41 c6 07 00\n49 8d 47 01\n48 39 44 24 20\n74 16\nbe 01 00 00 00\n4c 29 ee\n4c 01 fe\n4c 89 ef\ne8 5c 32 00 00\n49 89 c5\n48 89 df\ne8 81 f0 ff ff\n48 8b 7c 24 28\n48 85 ff\n0f 84 0f fb ff ff\ne8 5e 09 00 00\ne9 05 fb ff ff\n3c 0d\n74 09\ne9 fc fa ff ff\n8b 6c 24 04\n48 8b 7c 24 10\ne8 52 f0 ff ff\n4c 89 ef\ne8 4a f0 ff ff\n48 8b 7c 24 28\n48 85 ff\n74 05\ne8 2b 09 00 00\ne8 56 f0 ff ff\n89 28\ne9 c8 fa ff ff\nbd 14 00 00 00\neb cc\n'
p936
S'.text:0000000000401cf0\n.text:0000000000401cf1\n.text:0000000000401cf3\n.text:0000000000401cf5\n.text:0000000000401cf7\n.text:0000000000401cf9\n.text:0000000000401cfa\n.text:0000000000401d01\n.text:0000000000401d03\n.text:0000000000401d06\n.text:0000000000401d0f\n.text:0000000000401d12\n.text:0000000000401d16\n.text:0000000000401d19\n.text:0000000000401d1c\n.text:0000000000401d1e\n.text:0000000000401d23\n.text:0000000000401d29\n.text:0000000000401d2c\n.text:0000000000401d2f\n.text:0000000000401d36\n.text:0000000000401d37\n.text:0000000000401d39\n.text:0000000000401d3b\n.text:0000000000401d3d\n.text:0000000000401d3f\n.text:0000000000401d40\n.text:0000000000401d41\n.text:0000000000401d44\n.text:0000000000401d46\n.text:0000000000401d4a\n.text:0000000000401d4c\n.text:0000000000401d4e\n.text:0000000000401d50\n.text:0000000000401d52\n.text:0000000000401d57\n.text:0000000000401d5d\n.text:0000000000401d5f\n.text:0000000000401d64\n.text:0000000000401d69\n.text:0000000000401d6c\n.text:0000000000401d73\n.text:0000000000401d78\n.text:0000000000401d7b\n.text:0000000000401d7f\n.text:0000000000401d81\n.text:0000000000401d86\n.text:0000000000401d89\n.text:0000000000401d8c\n.text:0000000000401d8e\n.text:0000000000401d90\n.text:0000000000401d93\n.text:0000000000401d98\n.text:0000000000401d9b\n.text:0000000000401d9e\n.text:0000000000401da5\n.text:0000000000401da7\n.text:0000000000401dac\n.text:0000000000401daf\n.text:0000000000401db4\n.text:0000000000401db7\n.text:0000000000401dba\n.text:0000000000401dc0\n.text:0000000000401dc5\n.text:0000000000401dc7\n.text:0000000000401dcc\n.text:0000000000401dcf\n.text:0000000000401dd1\n.text:0000000000401dd4\n.text:0000000000401dd8\n.text:0000000000401dda\n.text:0000000000401ddd\n.text:0000000000401de1\n.text:0000000000401de3\n.text:0000000000401de7\n.text:0000000000401dea\n.text:0000000000401def\n.text:0000000000401df3\n.text:0000000000401df7\n.text:0000000000401df9\n.text:0000000000401dfe\n.text:0000000000401e02\n.text:0000000000401e07\n.text:0000000000401e09\n.text:0000000000401e0e\n.text:0000000000401e13\n.text:0000000000401e15\n.text:0000000000401e1a\n.text:0000000000401e1d\n.text:0000000000401e22\n.text:0000000000401e27\n.text:0000000000401e2b\n.text:0000000000401e30\n.text:0000000000401e35\n.text:0000000000401e37\n.text:0000000000401e3a\n.text:0000000000401e3f\n.text:0000000000401e42\n.text:0000000000401e46\n.text:0000000000401e4b\n.text:0000000000401e4e\n.text:0000000000401e51\n.text:0000000000401e56\n.text:0000000000401e5c\n.text:0000000000401e60\n.text:0000000000401e64\n.text:0000000000401e70\n.text:0000000000401e73\n.text:0000000000401e76\n.text:0000000000401e80\n.text:0000000000401e84\n.text:0000000000401e88\n.text:0000000000401e8a\n.text:0000000000401e8d\n.text:0000000000401e90\n.text:0000000000401e93\n.text:0000000000401e98\n.text:0000000000401e9a\n.text:0000000000401e9c\n.text:0000000000401e9f\n.text:0000000000401ea1\n.text:0000000000401ea4\n.text:0000000000401ea7\n.text:0000000000401eab\n.text:0000000000401ead\n.text:0000000000401eb1\n.text:0000000000401eb3\n.text:0000000000401eb7\n.text:0000000000401eb9\n.text:0000000000401ebd\n.text:0000000000401ebf\n.text:0000000000401ec2\n.text:0000000000401ec4\n.text:0000000000401ec7\n.text:0000000000401eca\n.text:0000000000401ed0\n.text:0000000000401ed3\n.text:0000000000401ed6\n.text:0000000000401ed8\n.text:0000000000401edc\n.text:0000000000401ee1\n.text:0000000000401ee3\n.text:0000000000401ef0\n.text:0000000000401ef4\n.text:0000000000401ef6\n.text:0000000000401efb\n.text:0000000000401f01\n.text:0000000000401f06\n.text:0000000000401f09\n.text:0000000000401f0f\n.text:0000000000401f14\n.text:0000000000401f16\n.text:0000000000401f1a\n.text:0000000000401f1d\n.text:0000000000401f21\n.text:0000000000401f26\n.text:0000000000401f29\n.text:0000000000401f2c\n.text:0000000000401f2e\n.text:0000000000401f31\n.text:0000000000401f34\n.text:0000000000401f37\n.text:0000000000401f3b\n.text:0000000000401f42\n.text:0000000000401f47\n.text:0000000000401f4b\n.text:0000000000401f4e\n.text:0000000000401f51\n.text:0000000000401f56\n.text:0000000000401f59\n.text:0000000000401f5c\n.text:0000000000401f61\n.text:0000000000401f64\n.text:0000000000401f67\n.text:0000000000401f6a\n.text:0000000000401f6d\n.text:0000000000401f72\n.text:0000000000401f75\n.text:0000000000401f79\n.text:0000000000401f7e\n.text:0000000000401f83\n.text:0000000000401f87\n.text:0000000000401f89\n.text:0000000000401f8e\n.text:0000000000401f90\n.text:0000000000401f93\n.text:0000000000401f98\n.text:0000000000401f9d\n.text:0000000000401f9f\n.text:0000000000401fa1\n.text:0000000000401fa3\n.text:0000000000401fa6\n.text:0000000000401fab\n.text:0000000000401fb0\n.text:0000000000401fb2\n.text:0000000000401fb4\n.text:0000000000401fb9\n.text:0000000000401fbb\n.text:0000000000401fc0\n.text:0000000000401fc2\n.text:0000000000401fc8\n.text:0000000000401fcc\n.text:0000000000401fce\n.text:0000000000401fd4\n.text:0000000000401fdf\n.text:0000000000401fe7\n.text:0000000000401fec\n.text:0000000000401ff1\n.text:0000000000401ff7\n.text:0000000000401ffc\n.text:0000000000402001\n.text:0000000000402006\n.text:000000000040200b\n.text:000000000040200d\n.text:000000000040200f\n.text:0000000000402013\n.text:0000000000402017\n.text:000000000040201c\n.text:000000000040201f\n.text:0000000000402023\n.text:0000000000402025\n.text:000000000040202d\n.text:0000000000402030\n.text:0000000000402035\n.text:0000000000402038\n.text:000000000040203e\n.text:0000000000402043\n.text:0000000000402045\n.text:0000000000402048\n.text:000000000040204b\n.text:000000000040204f\n.text:0000000000402053\n.text:0000000000402056\n.text:0000000000402059\n.text:000000000040205d\n.text:000000000040205f\n.text:0000000000402064\n.text:0000000000402067\n.text:000000000040206c\n.text:000000000040206e\n.text:0000000000402073\n.text:0000000000402076\n.text:0000000000402079\n.text:000000000040207d\n.text:0000000000402082\n.text:0000000000402085\n.text:0000000000402087\n.text:0000000000402089\n.text:000000000040208b\n.text:0000000000402091\n.text:0000000000402096\n.text:0000000000402099\n.text:000000000040209e\n.text:00000000004020a4\n.text:00000000004020a8\n.text:00000000004020ac\n.text:00000000004020ae\n.text:00000000004020b2\n.text:00000000004020b4\n.text:00000000004020ba\n.text:00000000004020bd\n.text:00000000004020c2\n.text:00000000004020c5\n.text:00000000004020ca\n.text:00000000004020cf\n.text:00000000004020d4\n.text:00000000004020d7\n.text:00000000004020dc\n.text:00000000004020df\n.text:00000000004020e2\n.text:00000000004020e7\n.text:00000000004020ec\n.text:00000000004020f1\n.text:00000000004020f4\n.text:00000000004020f9\n.text:00000000004020fc\n.text:0000000000402101\n.text:0000000000402103\n.text:0000000000402106\n.text:0000000000402108\n.text:000000000040210d\n.text:0000000000402112\n.text:0000000000402115\n.text:000000000040211a\n.text:000000000040211c\n.text:0000000000402123\n.text:0000000000402128\n.text:000000000040212c\n.text:0000000000402131\n.text:0000000000402134\n.text:0000000000402139\n.text:000000000040213c\n.text:000000000040213e\n.text:0000000000402143\n.text:0000000000402148\n.text:000000000040214d\n.text:0000000000402150\n.text:0000000000402153\n.text:0000000000402156\n.text:0000000000402159\n.text:000000000040215e\n.text:0000000000402161\n.text:0000000000402166\n.text:0000000000402169\n.text:000000000040216e\n.text:0000000000402173\n.text:0000000000402176\n.text:000000000040217b\n.text:000000000040217f\n.text:0000000000402182\n.text:0000000000402184\n.text:0000000000402187\n.text:000000000040218a\n.text:000000000040218d\n.text:0000000000402192\n.text:0000000000402195\n.text:0000000000402198\n.text:000000000040219e\n.text:00000000004021a3\n.text:00000000004021a6\n.text:00000000004021ab\n.text:00000000004021ae\n.text:00000000004021b1\n.text:00000000004021b7\n.text:00000000004021bb\n.text:00000000004021c0\n.text:00000000004021c2\n.text:00000000004021c7\n.text:00000000004021cb\n.text:00000000004021ce\n.text:00000000004021d0\n.text:00000000004021d4\n.text:00000000004021d9\n.text:00000000004021dd\n.text:00000000004021e2\n.text:00000000004021e6\n.text:00000000004021ea\n.text:00000000004021ef\n.text:00000000004021f1\n.text:00000000004021f6\n.text:00000000004021f9\n.text:00000000004021fc\n.text:00000000004021ff\n.text:0000000000402204\n.text:0000000000402207\n.text:000000000040220a\n.text:000000000040220f\n.text:0000000000402214\n.text:0000000000402217\n.text:000000000040221d\n.text:0000000000402222\n.text:0000000000402227\n.text:0000000000402229\n.text:000000000040222b\n.text:0000000000402230\n.text:0000000000402234\n.text:0000000000402239\n.text:000000000040223e\n.text:0000000000402241\n.text:0000000000402246\n.text:000000000040224b\n.text:000000000040224e\n.text:0000000000402250\n.text:0000000000402255\n.text:000000000040225a\n.text:000000000040225c\n.text:0000000000402261\n.text:0000000000402266\n'
p937
tp938
sS'rpl_fflush'
p939
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p940
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060a140)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p941
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00405e5d\nMOV RDI,RBX\nCALL 0x00401500\nTEST EAX,EAX\nJZ 0x00405e5d\nMOV RDI,RBX\nCALL 0x00405e70\nMOV RDI,RBX\nPOP RBX\nJMP 0x004014d0\n'
p942
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 af b6 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 6a b6 ff ff\n'
p943
S'.text:0000000000405e40\n.text:0000000000405e41\n.text:0000000000405e44\n.text:0000000000405e47\n.text:0000000000405e49\n.text:0000000000405e4c\n.text:0000000000405e51\n.text:0000000000405e53\n.text:0000000000405e55\n.text:0000000000405e58\n.text:0000000000405e5d\n.text:0000000000405e60\n.text:0000000000405e61\n'
p944
tp945
sS'bindtextdomain'
p946
(S'\n__stdcall bindtextdomain()\n'
p947
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060a078)();\u000a  return;\u000a}\u000a\u000a
p948
S'JMP qword ptr [0x0060a078]\n'
p949
S'ff 25 32 8d 20 00\n'
p950
S'.plt:0000000000401340\n'
p951
tp952
sS'set_char_quoting'
p953
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p954
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p955
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60a2b0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p956
S'89 f1\n48 85 ff\nbe b0 a2 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p957
S'.text:0000000000403600\n.text:0000000000403602\n.text:0000000000403605\n.text:000000000040360a\n.text:000000000040360e\n.text:0000000000403610\n.text:0000000000403613\n.text:0000000000403617\n.text:000000000040361c\n.text:000000000040361f\n.text:0000000000403621\n.text:0000000000403623\n.text:0000000000403626\n.text:0000000000403628\n.text:000000000040362b\n.text:000000000040362d\n.text:0000000000403630\n.text:0000000000403635\n'
p958
tp959
sS'quotearg_n'
p960
(S'\n__stdcall quotearg_n(char * arg)\n'
p961
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p962
S'MOV RDX,-0x1\nMOV ECX,0x60a2b0\nJMP 0x004044f0\n'
p963
S'48 c7 c2 ff ff ff ff\nb9 b0 a2 60 00\neb 02\n'
p964
S'.text:00000000004044e0\n.text:00000000004044e7\n.text:00000000004044ec\n'
p965
tp966
sS'close_stream'
p967
(S'\n__stdcall close_stream(FILE * stream)\n'
p968
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p969
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004012f0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401440\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00405dc0\nTEST EBP,EBP\nJZ 0x004058cb\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x004058ef\nCALL 0x004012b0\nMOV dword ptr [RAX],0x0\nJMP 0x004058ef\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x004058ef\nTEST CL,CL\nJNZ 0x004058ef\nCALL 0x004012b0\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p970
S'55\n41 56\n53\n48 89 fb\ne8 54 ba ff ff\n49 89 c6\n48 89 df\ne8 99 bb ff ff\n89 c5\n48 89 df\ne8 0f 05 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 ed b9 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 ce b9 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p971
S'.text:0000000000405890\n.text:0000000000405891\n.text:0000000000405893\n.text:0000000000405894\n.text:0000000000405897\n.text:000000000040589c\n.text:000000000040589f\n.text:00000000004058a2\n.text:00000000004058a7\n.text:00000000004058a9\n.text:00000000004058ac\n.text:00000000004058b1\n.text:00000000004058b3\n.text:00000000004058b5\n.text:00000000004058ba\n.text:00000000004058bc\n.text:00000000004058be\n.text:00000000004058c3\n.text:00000000004058c9\n.text:00000000004058cb\n.text:00000000004058cd\n.text:00000000004058d0\n.text:00000000004058d2\n.text:00000000004058d4\n.text:00000000004058d7\n.text:00000000004058d9\n.text:00000000004058db\n.text:00000000004058dd\n.text:00000000004058e2\n.text:00000000004058e4\n.text:00000000004058e7\n.text:00000000004058ec\n.text:00000000004058ef\n.text:00000000004058f1\n.text:00000000004058f2\n.text:00000000004058f4\n.text:00000000004058f5\n'
p972
tp973
sS'quotearg_colon_mem'
p974
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p975
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p976
S'MOV EDX,0x3a\nJMP 0x00404800\n'
p977
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p978
S'.text:0000000000404890\n.text:0000000000404895\n'
p979
tp980
sS'xcalloc'
p981
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p982
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p983
S'PUSH RAX\nCALL 0x00405610\nTEST RAX,RAX\nJZ 0x0040554d\nPOP RCX\nRET\nCALL 0x004055b0\n'
p984
S'50\ne8 ca 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p985
S'.text:0000000000405540\n.text:0000000000405541\n.text:0000000000405546\n.text:0000000000405549\n.text:000000000040554b\n.text:000000000040554c\n.text:000000000040554d\n'
p986
tp987
sS'clear_ungetc_buffer_preserving_position'
p988
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p989
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p990
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405e77\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00405e90\n'
p991
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p992
S'.text:0000000000405e70\n.text:0000000000405e74\n.text:0000000000405e76\n.text:0000000000405e77\n.text:0000000000405e79\n.text:0000000000405e7e\n'
p993
tp994
sS'xnmalloc'
p995
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p996
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p997
S'MOV RAX,RDI\nMUL RSI\nJO 0x00405411\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00405420\nPUSH RAX\nCALL 0x004055b0\n'
p998
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p999
S'.text:0000000000405400\n.text:0000000000405403\n.text:0000000000405406\n.text:0000000000405408\n.text:000000000040540c\n.text:000000000040540f\n.text:0000000000405411\n.text:0000000000405412\n'
p1000
tp1001
sS'hash_string'
p1002
(S'\n__stdcall hash_string(char * string, size_t n_buckets)\n'
p1003
V\u000asize_t hash_string(char *string,size_t n_buckets)\u000a\u000a{\u000a  byte bVar1;\u000a  ulong uVar2;\u000a  byte *pbVar3;\u000a  \u000a  bVar1 = *string;\u000a  if (bVar1 != 0) {\u000a    pbVar3 = (byte *)(string + 1);\u000a    uVar2 = 0;\u000a    do {\u000a      uVar2 = ((ulong)bVar1 + uVar2 * 0x1f) % n_buckets;\u000a      bVar1 = *pbVar3;\u000a      pbVar3 = pbVar3 + 1;\u000a    } while (bVar1 != 0);\u000a    return uVar2;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1004
S'MOV AL,byte ptr [RDI]\nTEST AL,AL\nJZ 0x00402883\nINC RDI\nXOR EDX,EDX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,RDX\nSHL RCX,0x5\nSUB RCX,RDX\nMOVZX EAX,AL\nADD RAX,RCX\nXOR EDX,EDX\nDIV RSI\nMOVZX EAX,byte ptr [RDI]\nINC RDI\nTEST AL,AL\nJNZ 0x00402860\nMOV RAX,RDX\nRET\nXOR EDX,EDX\nMOV RAX,RDX\nRET\n'
p1005
S'8a 07\n84 c0\n74 2d\n48 ff c7\n31 d2\n0f 1f 44 00 00\n48 89 d1\n48 c1 e1 05\n48 29 d1\n0f b6 c0\n48 01 c8\n31 d2\n48 f7 f6\n0f b6 07\n48 ff c7\n84 c0\n75 e1\n48 89 d0\nc3\n31 d2\n48 89 d0\nc3\n'
p1006
S'.text:0000000000402850\n.text:0000000000402852\n.text:0000000000402854\n.text:0000000000402856\n.text:0000000000402859\n.text:000000000040285b\n.text:0000000000402860\n.text:0000000000402863\n.text:0000000000402867\n.text:000000000040286a\n.text:000000000040286d\n.text:0000000000402870\n.text:0000000000402872\n.text:0000000000402875\n.text:0000000000402878\n.text:000000000040287b\n.text:000000000040287d\n.text:000000000040287f\n.text:0000000000402882\n.text:0000000000402883\n.text:0000000000402885\n.text:0000000000402888\n'
p1007
tp1008
sS'quotearg_char'
p1009
(S'\n__stdcall quotearg_char(char * arg)\n'
p1010
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1011
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00404800\n'
p1012
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1013
S'.text:0000000000404870\n.text:0000000000404872\n.text:0000000000404879\n.text:000000000040487b\n'
p1014
tp1015
sS'malloc'
p1016
(S'\n__stdcall malloc(size_t __size)\n'
p1017
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060a138)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1018
S'JMP qword ptr [0x0060a138]\n'
p1019
S'ff 25 72 8c 20 00\n'
p1020
S'.plt:00000000004014c0\n'
p1021
tp1022
sS'c_tolower'
p1023
(S'\n__stdcall c_tolower()\n'
p1024
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1025
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p1026
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p1027
S'.text:0000000000405870\n.text:0000000000405873\n.text:0000000000405876\n.text:0000000000405879\n.text:000000000040587c\n'
p1028
tp1029
sS'getopt_long'
p1030
(S'\n__stdcall getopt_long()\n'
p1031
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060a0a0)();\u000a  return;\u000a}\u000a\u000a
p1032
S'JMP qword ptr [0x0060a0a0]\n'
p1033
S'ff 25 0a 8d 20 00\n'
p1034
S'.plt:0000000000401390\n'
p1035
tp1036
sS'areadlink_with_size'
p1037
(S'\n__stdcall areadlink_with_size(char * file, size_t size)\n'
p1038
V\u000achar * areadlink_with_size(char *file,size_t size)\u000a\u000a{\u000a  int iVar1;\u000a  char *__buf;\u000a  ulong uVar2;\u000a  int *piVar3;\u000a  ulong __size;\u000a  bool bVar4;\u000a  \u000a  __size = 0x401;\u000a  if (size < 0x401) {\u000a    __size = size + 1;\u000a  }\u000a  while( true ) {\u000a    __buf = (char *)malloc(__size);\u000a    if (__buf == (char *)0x0) {\u000a      return (char *)0x0;\u000a    }\u000a    uVar2 = readlink(file,__buf,__size);\u000a    if ((long)uVar2 < 0) {\u000a      piVar3 = __errno_location();\u000a      iVar1 = *piVar3;\u000a      if (iVar1 != 0x22) {\u000a        free(__buf);\u000a        *piVar3 = iVar1;\u000a        return (char *)0x0;\u000a      }\u000a    }\u000a    if (uVar2 < __size) break;\u000a    free(__buf);\u000a    if (__size >> 0x3e == 0) {\u000a      __size = __size * 2;\u000a    }\u000a    else {\u000a      bVar4 = 0x7ffffffffffffffe < __size;\u000a      __size = 0x7fffffffffffffff;\u000a      if (bVar4) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = 0xc;\u000a        return (char *)0x0;\u000a      }\u000a    }\u000a  }\u000a  __buf[uVar2] = 0;\u000a  return __buf;\u000a}\u000a\u000a
p1039
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCMP RSI,0x401\nLEA RAX,[RSI + 0x1]\nMOV EBX,0x401\nCMOVC RBX,RAX\nJMP 0x00401c53\nADD RBX,RBX\nMOV RDI,RBX\nCALL 0x004014c0\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00401cd2\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00401310\nMOV R12,RAX\nTEST R12,R12\nJNS 0x00401c8a\nCALL 0x004012b0\nMOV R13,RAX\nMOV EBP,dword ptr [R13]\nCMP EBP,0x22\nJNZ 0x00401cc6\nCMP R12,RBX\nJC 0x00401cbf\nMOV RDI,R15\nCALL 0x00401290\nMOV RAX,RBX\nSHR RAX,0x3e\nJZ 0x00401c50\nMOV RAX,0x7fffffffffffffff\nCMP RBX,RAX\nMOV RBX,RAX\nJC 0x00401c53\nCALL 0x004012b0\nMOV dword ptr [RAX],0xc\nJMP 0x00401cd2\nMOV byte ptr [R15 + R12*0x1],0x0\nJMP 0x00401cd5\nMOV RDI,R15\nCALL 0x00401290\nMOV dword ptr [R13],EBP\nXOR R15D,R15D\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1040
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fe\n48 81 fe 01 04 00 00\n48 8d 46 01\nbb 01 04 00 00\n48 0f 42 d8\neb 0f\n48 01 db\n48 89 df\ne8 65 f8 ff ff\n49 89 c7\n4d 85 ff\n74 6f\n4c 89 f7\n4c 89 fe\n48 89 da\ne8 9f f6 ff ff\n49 89 c4\n4d 85 e4\n79 11\ne8 32 f6 ff ff\n49 89 c5\n41 8b 6d 00\n83 fd 22\n75 3c\n49 39 dc\n72 30\n4c 89 ff\ne8 f9 f5 ff ff\n48 89 d8\n48 c1 e8 3e\n74 b0\n48 b8 ff ff ff ff ff ff ff 7f\n48 39 c3\n48 89 c3\n72 a1\ne8 f9 f5 ff ff\nc7 00 0c 00 00 00\neb 13\n43 c6 04 27 00\neb 0f\n4c 89 ff\ne8 c2 f5 ff ff\n41 89 6d 00\n45 31 ff\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1041
S'.text:0000000000401c20\n.text:0000000000401c21\n.text:0000000000401c23\n.text:0000000000401c25\n.text:0000000000401c27\n.text:0000000000401c29\n.text:0000000000401c2a\n.text:0000000000401c2b\n.text:0000000000401c2e\n.text:0000000000401c35\n.text:0000000000401c39\n.text:0000000000401c3e\n.text:0000000000401c42\n.text:0000000000401c50\n.text:0000000000401c53\n.text:0000000000401c56\n.text:0000000000401c5b\n.text:0000000000401c5e\n.text:0000000000401c61\n.text:0000000000401c63\n.text:0000000000401c66\n.text:0000000000401c69\n.text:0000000000401c6c\n.text:0000000000401c71\n.text:0000000000401c74\n.text:0000000000401c77\n.text:0000000000401c79\n.text:0000000000401c7e\n.text:0000000000401c81\n.text:0000000000401c85\n.text:0000000000401c88\n.text:0000000000401c8a\n.text:0000000000401c8d\n.text:0000000000401c8f\n.text:0000000000401c92\n.text:0000000000401c97\n.text:0000000000401c9a\n.text:0000000000401c9e\n.text:0000000000401ca0\n.text:0000000000401caa\n.text:0000000000401cad\n.text:0000000000401cb0\n.text:0000000000401cb2\n.text:0000000000401cb7\n.text:0000000000401cbd\n.text:0000000000401cbf\n.text:0000000000401cc4\n.text:0000000000401cc6\n.text:0000000000401cc9\n.text:0000000000401cce\n.text:0000000000401cd2\n.text:0000000000401cd5\n.text:0000000000401cd8\n.text:0000000000401cdc\n.text:0000000000401cdd\n.text:0000000000401cdf\n.text:0000000000401ce1\n.text:0000000000401ce3\n.text:0000000000401ce5\n.text:0000000000401ce6\n'
p1042
tp1043
sS'quotearg_style'
p1044
(S'\n__stdcall quotearg_style(char * arg)\n'
p1045
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1046
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x004046e0\n'
p1047
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p1048
S'.text:00000000004047c0\n.text:00000000004047c3\n.text:00000000004047c5\n.text:00000000004047c7\n.text:00000000004047c9\n.text:00000000004047cc\n'
p1049
tp1050
sS'hash_get_n_buckets'
p1051
(S'\n__stdcall hash_get_n_buckets(Hash_table * table)\n'
p1052
V\u000asize_t hash_get_n_buckets(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets;\u000a}\u000a\u000a
p1053
S'MOV RAX,qword ptr [RDI + 0x10]\nRET\n'
p1054
S'48 8b 47 10\nc3\n'
p1055
S'.text:0000000000402480\n.text:0000000000402484\n'
p1056
tp1057
sS'emit_try_help'
p1058
(S'\n__stdcall emit_try_help()\n'
p1059
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p1060
S'PUSH RBX\nMOV RBX,qword ptr [0x0060a280]\nXOR EDI,EDI\nMOV ESI,0x40675f\nMOV EDX,0x5\nCALL 0x00401350\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060a2a0]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x004015c0\n'
p1061
S'53\n48 8b 1d 88 8a 20 00\n31 ff\nbe 5f 67 40 00\nba 05 00 00 00\ne8 47 fb ff ff\n48 89 c2\n48 8b 0d 8d 8a 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 9d fd ff ff\n'
p1062
S'.text:00000000004017f0\n.text:00000000004017f1\n.text:00000000004017f8\n.text:00000000004017fa\n.text:00000000004017ff\n.text:0000000000401804\n.text:0000000000401809\n.text:000000000040180c\n.text:0000000000401813\n.text:0000000000401818\n.text:000000000040181a\n.text:000000000040181d\n.text:000000000040181e\n'
p1063
tp1064
sS'strrchr'
p1065
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1066
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060a0b0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1067
S'JMP qword ptr [0x0060a0b0]\n'
p1068
S'ff 25 fa 8c 20 00\n'
p1069
S'.plt:00000000004013b0\n'
p1070
tp1071
sS'quotearg_alloc_mem'
p1072
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1073
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1074
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60a2b0\nCMOVNZ R12,RCX\nCALL 0x004012b0\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403710\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x004054f0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403710\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040443a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1075
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc b0 a2 60 00\n4c 0f 45 e1\ne8 18 cf ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 01 11 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1076
S'.text:0000000000404360\n.text:0000000000404361\n.text:0000000000404363\n.text:0000000000404365\n.text:0000000000404367\n.text:0000000000404369\n.text:000000000040436a\n.text:000000000040436e\n.text:0000000000404371\n.text:0000000000404376\n.text:0000000000404379\n.text:000000000040437e\n.text:0000000000404381\n.text:0000000000404386\n.text:0000000000404389\n.text:000000000040438f\n.text:0000000000404393\n.text:0000000000404398\n.text:000000000040439d\n.text:000000000040439f\n.text:00000000004043a3\n.text:00000000004043a5\n.text:00000000004043a8\n.text:00000000004043ac\n.text:00000000004043b1\n.text:00000000004043b5\n.text:00000000004043ba\n.text:00000000004043be\n.text:00000000004043c0\n.text:00000000004043c2\n.text:00000000004043c5\n.text:00000000004043c8\n.text:00000000004043cb\n.text:00000000004043d0\n.text:00000000004043d5\n.text:00000000004043d7\n.text:00000000004043dc\n.text:00000000004043e0\n.text:00000000004043e3\n.text:00000000004043e7\n.text:00000000004043ea\n.text:00000000004043ef\n.text:00000000004043f2\n.text:00000000004043f6\n.text:00000000004043fa\n.text:00000000004043fd\n.text:0000000000404400\n.text:0000000000404405\n.text:000000000040440a\n.text:000000000040440d\n.text:0000000000404412\n.text:0000000000404417\n.text:0000000000404419\n.text:000000000040441e\n.text:0000000000404423\n.text:0000000000404427\n.text:000000000040442a\n.text:000000000040442e\n.text:0000000000404433\n.text:0000000000404435\n.text:0000000000404437\n.text:000000000040443a\n.text:000000000040443d\n.text:0000000000404441\n.text:0000000000404442\n.text:0000000000404444\n.text:0000000000404446\n.text:0000000000404448\n.text:000000000040444a\n.text:000000000040444b\n'
p1077
tp1078
sS'quotearg_style_mem'
p1079
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1080
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1081
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404780\n'
p1082
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1083
S'.text:00000000004047e0\n.text:00000000004047e3\n.text:00000000004047e6\n.text:00000000004047e8\n.text:00000000004047ea\n.text:00000000004047ec\n.text:00000000004047ef\n.text:00000000004047f2\n'
p1084
tp1085
sS'xalloc_die'
p1086
(S'\n__stdcall xalloc_die()\n'
p1087
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x40693d,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1088
S'PUSH RBX\nMOV EBX,dword ptr [0x0060a1f0]\nXOR EDI,EDI\nMOV ESI,0x40730f\nMOV EDX,0x5\nCALL 0x00401350\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40693d\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401560\nCALL 0x004012a0\n'
p1089
S'53\n8b 1d 39 4c 20 00\n31 ff\nbe 0f 73 40 00\nba 05 00 00 00\ne8 88 bd ff ff\n48 89 c1\n31 f6\nba 3d 69 40 00\n31 c0\n89 df\ne8 85 bf ff ff\ne8 c0 bc ff ff\n'
p1090
S'.text:00000000004055b0\n.text:00000000004055b1\n.text:00000000004055b7\n.text:00000000004055b9\n.text:00000000004055be\n.text:00000000004055c3\n.text:00000000004055c8\n.text:00000000004055cb\n.text:00000000004055cd\n.text:00000000004055d2\n.text:00000000004055d4\n.text:00000000004055d6\n.text:00000000004055db\n'
p1091
tp1092
sS'quotearg_n_custom'
p1093
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1094
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1095
S'MOV R8,-0x1\nJMP 0x00404900\n'
p1096
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1097
S'.text:00000000004048f0\n.text:00000000004048f7\n'
p1098
tp1099
sS'__freading'
p1100
(S'\n__stdcall __freading()\n'
p1101
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060a158)();\u000a  return;\u000a}\u000a\u000a
p1102
S'JMP qword ptr [0x0060a158]\n'
p1103
S'ff 25 52 8c 20 00\n'
p1104
S'.plt:0000000000401500\n'
p1105
tp1106
sS'fputs_unlocked'
p1107
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1108
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060a0f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1109
S'JMP qword ptr [0x0060a0f0]\n'
p1110
S'ff 25 ba 8c 20 00\n'
p1111
S'.plt:0000000000401430\n'
p1112
tp1113
sS'main'
p1114
(S'\n__stdcall main(char * * argv)\n'
p1115
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aint main(char **argv)\u000a\u000a{\u000a  int iVar1;\u000a  uint *puVar2;\u000a  undefined8 uVar3;\u000a  char *__buf;\u000a  ulong uVar4;\u000a  int *piVar5;\u000a  int iVar6;\u000a  uint uVar7;\u000a  ulong __size;\u000a  char **in_RSI;\u000a  char *__s;\u000a  int iVar8;\u000a  bool bVar9;\u000a  undefined8 local_38;\u000a  \u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x406707,"/usr/local/share/locale");\u000a  textdomain(0x406707);\u000a  atexit(close_stdout);\u000a  bVar9 = false;\u000a  iVar8 = 0xffffffff;\u000a  do {\u000a    iVar6 = iVar8;\u000a    iVar8 = (int)((ulong)argv & 0xffffffff);\u000a    iVar1 = getopt_long((ulong)argv & 0xffffffff);\u000a    if (iVar1 < 0x65) {\u000a      if (iVar1 == -1) {\u000a        if (optind < iVar8) {\u000a          if (1 < iVar8 - optind) {\u000a            if (no_newline == 1) {\u000a              uVar3 = dcgettext(0,"ignoring --no-newline with multiple arguments",5);\u000a              error(0,0,uVar3);\u000a            }\u000a            no_newline = 0;\u000a          }\u000a          local_38._0_4_ = 0;\u000a          if (optind < iVar8) {\u000a            uVar7 = 10;\u000a            if (bVar9) {\u000a              uVar7 = 0;\u000a            }\u000a            local_38 = (ulong)uVar7 << 0x20;\u000a            do {\u000a              if (iVar6 == -1) {\u000a                __s = areadlink_with_size(in_RSI[(long)optind],0x3f);\u000a              }\u000a              else {\u000a                __s = canonicalize_filename_mode(in_RSI[(long)optind]);\u000a              }\u000a              if (__s == (char *)0x0) {\u000a                if (verbose == 1) {\u000a                  local_38 = CONCAT44(local_38._4_4_,1);\u000a                  puVar2 = (uint *)__errno_location();\u000a                  uVar7 = *puVar2;\u000a                  __s = quotearg_n_style_colon((char *)0x0);\u000a                  error(0,(ulong)uVar7,0x40693d,__s);\u000a                }\u000a                else {\u000a                  local_38 = CONCAT44(local_38._4_4_,1);\u000a                }\u000a              }\u000a              else {\u000a                fputs_unlocked(__s,(FILE *)stdout);\u000a                if (no_newline == 0) {\u000a                  putchar_unlocked(local_38._4_4_);\u000a                }\u000a                free(__s);\u000a              }\u000a              optind = optind + 1;\u000a            } while (optind < iVar8);\u000a          }\u000a          return (int)local_38;\u000a        }\u000a        goto LAB_00401be7;\u000a      }\u000a      if (iVar1 != -0x83) {\u000a        if (iVar1 != -0x82) goto switchD_00401a05_caseD_67;\u000a        usage(0);\u000a      }\u000a      version_etc(stdout,"readlink","GNU coreutils",Version,"Dmitry V. Levin",0);\u000a                    /* WARNING: Subroutine does not return */\u000a      exit(0);\u000a    }\u000a    iVar8 = 1;\u000a    switch(iVar1) {\u000a    case 0x65:\u000a      iVar8 = 0;\u000a      break;\u000a    case 0x66:\u000a      break;\u000a    default:\u000aswitchD_00401a05_caseD_67:\u000a      usage(1);\u000aLAB_00401be7:\u000a      uVar3 = dcgettext(0,"missing operand",5);\u000a      uVar4 = 0;\u000a      error(0,0,uVar3,uVar3);\u000a      __s = (char *)0x1;\u000a      usage();\u000a      __size = 0x401;\u000a      if (uVar4 < 0x401) {\u000a        __size = uVar4 + 1;\u000a      }\u000a      while( true ) {\u000a        __buf = (char *)malloc(__size);\u000a        if (__buf == (char *)0x0) {\u000a          return 0;\u000a        }\u000a        uVar4 = readlink(__s,__buf,__size);\u000a        if ((long)uVar4 < 0) {\u000a          piVar5 = __errno_location();\u000a          iVar8 = *piVar5;\u000a          if (iVar8 != 0x22) {\u000a            free(__buf);\u000a            *piVar5 = iVar8;\u000a            return 0;\u000a          }\u000a        }\u000a        if (uVar4 < __size) break;\u000a        free(__buf);\u000a        if (__size >> 0x3e == 0) {\u000a          __size = __size * 2;\u000a        }\u000a        else {\u000a          bVar9 = 0x7ffffffffffffffe < __size;\u000a          __size = 0x7fffffffffffffff;\u000a          if (bVar9) {\u000a            piVar5 = __errno_location();\u000a            *piVar5 = 0xc;\u000a            return 0;\u000a          }\u000a        }\u000a      }\u000a      __buf[uVar4] = 0;\u000a      return (int)__buf;\u000a    case 0x6d:\u000a      iVar8 = 2;\u000a      break;\u000a    case 0x6e:\u000a      no_newline = 1;\u000a      iVar8 = iVar6;\u000a      break;\u000a    case 0x71:\u000a    case 0x73:\u000a      verbose = 0;\u000a      iVar8 = iVar6;\u000a      break;\u000a    case 0x76:\u000a      verbose = 1;\u000a      iVar8 = iVar6;\u000a      break;\u000a    case 0x7a:\u000a      bVar9 = true;\u000a      iVar8 = iVar6;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p1116
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV R13D,EDI\nMOV RDI,qword ptr [R14]\nCALL 0x004034f0\nMOV EDI,0x6\nMOV ESI,0x4070e1\nCALL 0x00401530\nMOV EDI,0x406707\nMOV ESI,0x4066e2\nCALL 0x00401340\nMOV EDI,0x406707\nCALL 0x00401320\nMOV EDI,0x402300\nCALL 0x00405f80\nMOV ECX,0xffffffff\nXOR EBX,EBX\nJMP 0x004019c0\nXOR ECX,ECX\nJMP 0x004019c0\nMOV BL,0x1\nMOV ECX,R12D\nNOP dword ptr [RAX]\nMOV R12D,ECX\nJMP 0x004019d7\nMOV byte ptr [0x0060a28a],0x0\nMOV EDX,0x4066fa\nMOV ECX,0x4060a0\nXOR R8D,R8D\nMOV EDI,R13D\nMOV RSI,R14\nCALL 0x00401390\nCMP EAX,0x64\nJLE 0x00401a25\nADD EAX,-0x65\nCMP EAX,0x15\nJA 0x00401bdd\nMOV ECX,0x1\nJMP qword ptr [0x405ff0 + RAX*0x8]\nMOV byte ptr [0x0060a289],0x1\nJMP 0x004019d7\nMOV byte ptr [0x0060a28a],0x1\nJMP 0x004019d7\nMOV ECX,0x2\nJMP 0x004019c0\nCMP EAX,-0x1\nJNZ 0x00401b99\nMOV EAX,dword ptr [0x0060a270]\nCMP EAX,R13D\nJGE 0x00401be7\nMOV ECX,R13D\nSUB ECX,EAX\nCMP ECX,0x2\nJL 0x00401a79\nCMP byte ptr [0x0060a289],0x1\nJNZ 0x00401a72\nXOR EDI,EDI\nMOV ESI,0x406731\nMOV EDX,0x5\nCALL 0x00401350\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401560\nMOV byte ptr [0x0060a289],0x0\nMOV EAX,dword ptr [0x0060a270]\nMOV dword ptr [RSP],0x0\nCMP EAX,R13D\nJGE 0x00401b87\nXOR ECX,ECX\nTEST BL,BL\nMOV EDX,0xa\nCMOVNZ EDX,ECX\nMOV dword ptr [RSP + 0x4],EDX\nMOV dword ptr [RSP],0x0\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP R12D,-0x1\nCDQE\nMOV RBP,qword ptr [R14 + RAX*0x8]\nJZ 0x00401ad0\nMOV RDI,RBP\nMOV ESI,R12D\nCALL 0x00401cf0\nJMP 0x00401add\nMOV ESI,0x3f\nMOV RDI,RBP\nCALL 0x00401c20\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00401b20\nMOV RSI,qword ptr [0x0060a268]\nMOV RDI,R15\nCALL 0x00401430\nMOVZX EAX,byte ptr [0x0060a289]\nTEST AL,AL\nJNZ 0x00401b08\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00401480\nMOV RDI,R15\nCALL 0x00401290\nJMP 0x00401b70\nCMP byte ptr [0x0060a28a],0x1\nJNZ 0x00401b5b\nMOV dword ptr [RSP],0x1\nCALL 0x004012b0\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBP\nCALL 0x004048a0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40693d\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x00401560\nJMP 0x00401b70\nMOV dword ptr [RSP],0x1\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV EAX,dword ptr [0x0060a270]\nINC EAX\nMOV dword ptr [0x0060a270],EAX\nCMP EAX,R13D\nJL 0x00401ab0\nMOV EAX,dword ptr [RSP]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x00401bae\nCMP EAX,0xffffff7e\nJNZ 0x00401bdd\nXOR EDI,EDI\nCALL 0x00401700\nMOV RDI,qword ptr [0x0060a268]\nMOV RCX,qword ptr [0x0060a1e8]\nMOV ESI,0x4066d9\nMOV EDX,0x406703\nMOV R8D,0x406711\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x004052f0\nXOR EDI,EDI\nCALL 0x004015a0\nMOV EDI,0x1\nCALL 0x00401700\nXOR EDI,EDI\nMOV ESI,0x406721\nMOV EDX,0x5\nCALL 0x00401350\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401560\nMOV EDI,0x1\nCALL 0x00401700\nNOP\nNOP word ptr CS:[RAX + RAX*0x1]\nNOP\n'
p1117
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f6\n41 89 fd\n49 8b 3e\ne8 77 1b 00 00\nbf 06 00 00 00\nbe e1 70 40 00\ne8 a8 fb ff ff\nbf 07 67 40 00\nbe e2 66 40 00\ne8 a9 f9 ff ff\nbf 07 67 40 00\ne8 7f f9 ff ff\nbf 00 23 40 00\ne8 d5 45 00 00\nb9 ff ff ff ff\n31 db\neb 0c\n31 c9\neb 08\nb3 01\n44 89 e1\n0f 1f 00\n41 89 cc\neb 12\nc6 05 b3 88 20 00 00\nba fa 66 40 00\nb9 a0 60 40 00\n45 31 c0\n44 89 ef\n4c 89 f6\ne8 a1 f9 ff ff\n83 f8 64\n7e 31\n83 c0 9b\n83 f8 15\n0f 87 dd 01 00 00\nb9 01 00 00 00\nff 24 c5 f0 5f 40 00\nc6 05 76 88 20 00 01\neb c2\nc6 05 6e 88 20 00 01\neb b9\nb9 02 00 00 00\neb 9b\n83 f8 ff\n0f 85 6b 01 00 00\n8b 05 3c 88 20 00\n44 39 e8\n0f 8d aa 01 00 00\n44 89 e9\n29 c1\n83 f9 02\n7c 32\n80 3d 3b 88 20 00 01\n75 22\n31 ff\nbe 31 67 40 00\nba 05 00 00 00\ne8 ef f8 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 ee fa ff ff\nc6 05 10 88 20 00 00\n8b 05 f1 87 20 00\nc7 04 24 00 00 00 00\n44 39 e8\n0f 8d f8 00 00 00\n31 c9\n84 db\nba 0a 00 00 00\n0f 45 d1\n89 54 24 04\nc7 04 24 00 00 00 00\n66 2e 0f 1f 84 00 00 00 00 00\n41 83 fc ff\n48 98\n49 8b 2c c6\n74 14\n48 89 ef\n44 89 e6\ne8 29 02 00 00\neb 14\nbe 3f 00 00 00\n48 89 ef\ne8 43 01 00 00\n49 89 c7\n4d 85 ff\n74 3b\n48 8b 35 7c 87 20 00\n4c 89 ff\ne8 3c f9 ff ff\n0f b6 05 8e 87 20 00\n84 c0\n75 09\n8b 7c 24 04\ne8 78 f9 ff ff\n4c 89 ff\ne8 80 f7 ff ff\neb 5e\n80 3d 63 87 20 00 01\n75 32\nc7 04 24 01 00 00 00\ne8 7b f7 ff ff\n8b 18\n31 ff\nbe 03 00 00 00\n48 89 ea\ne8 5a 2d 00 00\n48 89 c1\n31 ff\nba 3d 69 40 00\n31 c0\n89 de\ne8 07 fa ff ff\neb 15\nc7 04 24 01 00 00 00\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n8b 05 fa 86 20 00\nff c0\n89 05 f2 86 20 00\n44 39 e8\n0f 8c 29 ff ff ff\n8b 04 24\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n3d 7d ff ff ff\n74 0e\n3d 7e ff ff ff\n75 36\n31 ff\ne8 52 fb ff ff\n48 8b 3d b3 86 20 00\n48 8b 0d 2c 86 20 00\nbe d9 66 40 00\nba 03 67 40 00\n41 b8 11 67 40 00\n45 31 c9\n31 c0\ne8 1a 37 00 00\n31 ff\ne8 c3 f9 ff ff\nbf 01 00 00 00\ne8 19 fb ff ff\n31 ff\nbe 21 67 40 00\nba 05 00 00 00\ne8 58 f7 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 57 f9 ff ff\nbf 01 00 00 00\ne8 ed fa ff ff\n90\n66 2e 0f 1f 84 00 00 00 00 00\n66 90\n'
p1118
S'.text:0000000000401960\n.text:0000000000401961\n.text:0000000000401963\n.text:0000000000401965\n.text:0000000000401967\n.text:0000000000401969\n.text:000000000040196a\n.text:000000000040196b\n.text:000000000040196e\n.text:0000000000401971\n.text:0000000000401974\n.text:0000000000401979\n.text:000000000040197e\n.text:0000000000401983\n.text:0000000000401988\n.text:000000000040198d\n.text:0000000000401992\n.text:0000000000401997\n.text:000000000040199c\n.text:00000000004019a1\n.text:00000000004019a6\n.text:00000000004019ab\n.text:00000000004019b0\n.text:00000000004019b2\n.text:00000000004019b4\n.text:00000000004019b6\n.text:00000000004019b8\n.text:00000000004019ba\n.text:00000000004019bd\n.text:00000000004019c0\n.text:00000000004019c3\n.text:00000000004019d0\n.text:00000000004019d7\n.text:00000000004019dc\n.text:00000000004019e1\n.text:00000000004019e4\n.text:00000000004019e7\n.text:00000000004019ea\n.text:00000000004019ef\n.text:00000000004019f2\n.text:00000000004019f4\n.text:00000000004019f7\n.text:00000000004019fa\n.text:0000000000401a00\n.text:0000000000401a05\n.text:0000000000401a0c\n.text:0000000000401a13\n.text:0000000000401a15\n.text:0000000000401a1c\n.text:0000000000401a1e\n.text:0000000000401a23\n.text:0000000000401a25\n.text:0000000000401a28\n.text:0000000000401a2e\n.text:0000000000401a34\n.text:0000000000401a37\n.text:0000000000401a3d\n.text:0000000000401a40\n.text:0000000000401a42\n.text:0000000000401a45\n.text:0000000000401a47\n.text:0000000000401a4e\n.text:0000000000401a50\n.text:0000000000401a52\n.text:0000000000401a57\n.text:0000000000401a5c\n.text:0000000000401a61\n.text:0000000000401a64\n.text:0000000000401a66\n.text:0000000000401a68\n.text:0000000000401a6a\n.text:0000000000401a6d\n.text:0000000000401a72\n.text:0000000000401a79\n.text:0000000000401a7f\n.text:0000000000401a86\n.text:0000000000401a89\n.text:0000000000401a8f\n.text:0000000000401a91\n.text:0000000000401a93\n.text:0000000000401a98\n.text:0000000000401a9b\n.text:0000000000401a9f\n.text:0000000000401aa6\n.text:0000000000401ab0\n.text:0000000000401ab4\n.text:0000000000401ab6\n.text:0000000000401aba\n.text:0000000000401abc\n.text:0000000000401abf\n.text:0000000000401ac2\n.text:0000000000401ac7\n.text:0000000000401ad0\n.text:0000000000401ad5\n.text:0000000000401ad8\n.text:0000000000401add\n.text:0000000000401ae0\n.text:0000000000401ae3\n.text:0000000000401ae5\n.text:0000000000401aec\n.text:0000000000401aef\n.text:0000000000401af4\n.text:0000000000401afb\n.text:0000000000401afd\n.text:0000000000401aff\n.text:0000000000401b03\n.text:0000000000401b08\n.text:0000000000401b0b\n.text:0000000000401b10\n.text:0000000000401b20\n.text:0000000000401b27\n.text:0000000000401b29\n.text:0000000000401b30\n.text:0000000000401b35\n.text:0000000000401b37\n.text:0000000000401b39\n.text:0000000000401b3e\n.text:0000000000401b41\n.text:0000000000401b46\n.text:0000000000401b49\n.text:0000000000401b4b\n.text:0000000000401b50\n.text:0000000000401b52\n.text:0000000000401b54\n.text:0000000000401b59\n.text:0000000000401b5b\n.text:0000000000401b62\n.text:0000000000401b70\n.text:0000000000401b76\n.text:0000000000401b78\n.text:0000000000401b7e\n.text:0000000000401b81\n.text:0000000000401b87\n.text:0000000000401b8a\n.text:0000000000401b8e\n.text:0000000000401b8f\n.text:0000000000401b91\n.text:0000000000401b93\n.text:0000000000401b95\n.text:0000000000401b97\n.text:0000000000401b98\n.text:0000000000401b99\n.text:0000000000401b9e\n.text:0000000000401ba0\n.text:0000000000401ba5\n.text:0000000000401ba7\n.text:0000000000401ba9\n.text:0000000000401bae\n.text:0000000000401bb5\n.text:0000000000401bbc\n.text:0000000000401bc1\n.text:0000000000401bc6\n.text:0000000000401bcc\n.text:0000000000401bcf\n.text:0000000000401bd1\n.text:0000000000401bd6\n.text:0000000000401bd8\n.text:0000000000401bdd\n.text:0000000000401be2\n.text:0000000000401be7\n.text:0000000000401be9\n.text:0000000000401bee\n.text:0000000000401bf3\n.text:0000000000401bf8\n.text:0000000000401bfb\n.text:0000000000401bfd\n.text:0000000000401bff\n.text:0000000000401c01\n.text:0000000000401c04\n.text:0000000000401c09\n.text:0000000000401c0e\n.text:0000000000401c13\n.text:0000000000401c14\n.text:0000000000401c1e\n'
p1119
tp1120
sS'xcharalloc'
p1121
(S'\n__stdcall xcharalloc(size_t n)\n'
p1122
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1123
S'JMP 0x00405420\n'
p1124
S'e9 2b ff ff ff\n'
p1125
S'.text:00000000004054f0\n'
p1126
tp1127
sS'c_isupper'
p1128
(S'\n__stdcall c_isupper()\n'
p1129
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1130
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1131
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1132
S'.text:0000000000405840\n.text:0000000000405843\n.text:0000000000405846\n.text:0000000000405849\n'
p1133
tp1134
sS'allocate_entry'
p1135
(S'\n__stdcall allocate_entry(Hash_table * table)\n'
p1136
V\u000ahash_entry * allocate_entry(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  phVar1 = table->free_entry_list;\u000a  if (phVar1 != (hash_entry *)0x0) {\u000a    table->free_entry_list = phVar1->next;\u000a    return phVar1;\u000a  }\u000a  phVar1 = (hash_entry *)malloc(0x10);\u000a  return phVar1;\u000a}\u000a\u000a
p1137
S'MOV RAX,qword ptr [RDI + 0x48]\nTEST RAX,RAX\nJZ 0x00403162\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RDI + 0x48],RCX\nRET\nPUSH RAX\nMOV EDI,0x10\nCALL 0x004014c0\nADD RSP,0x8\nRET\n'
p1138
S'48 8b 47 48\n48 85 c0\n74 09\n48 8b 48 08\n48 89 4f 48\nc3\n50\nbf 10 00 00 00\ne8 53 e3 ff ff\n48 83 c4 08\nc3\n'
p1139
S'.text:0000000000403150\n.text:0000000000403154\n.text:0000000000403157\n.text:0000000000403159\n.text:000000000040315d\n.text:0000000000403161\n.text:0000000000403162\n.text:0000000000403163\n.text:0000000000403168\n.text:000000000040316d\n.text:0000000000403171\n'
p1140
tp1141
sS'c_isalnum'
p1142
(S'\n__stdcall c_isalnum()\n'
p1143
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1144
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x0040575b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x0040575b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x0040575a\nXOR EAX,EAX\nRET\n'
p1145
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1146
S'.text:0000000000405740\n.text:0000000000405742\n.text:0000000000405745\n.text:0000000000405748\n.text:000000000040574a\n.text:0000000000405754\n.text:0000000000405758\n.text:000000000040575a\n.text:000000000040575b\n.text:000000000040575e\n.text:0000000000405761\n.text:0000000000405763\n.text:0000000000405765\n'
p1147
tp1148
sS'__errno_location'
p1149
(S'\n__stdcall __errno_location()\n'
p1150
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060a030)();\u000a  return piVar1;\u000a}\u000a\u000a
p1151
S'JMP qword ptr [0x0060a030]\n'
p1152
S'ff 25 7a 8d 20 00\n'
p1153
S'.plt:00000000004012b0\n'
p1154
tp1155
sS'x2nrealloc'
p1156
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1157
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1158
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x004054bc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x004054e9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004054da\nTEST RCX,RCX\nJNZ 0x004054da\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00405460\nPUSH RAX\nCALL 0x004055b0\n'
p1159
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1160
S'.text:0000000000405490\n.text:0000000000405493\n.text:0000000000405496\n.text:0000000000405499\n.text:000000000040549b\n.text:00000000004054a5\n.text:00000000004054a7\n.text:00000000004054aa\n.text:00000000004054ad\n.text:00000000004054af\n.text:00000000004054b2\n.text:00000000004054b5\n.text:00000000004054ba\n.text:00000000004054bc\n.text:00000000004054bf\n.text:00000000004054c1\n.text:00000000004054c6\n.text:00000000004054c8\n.text:00000000004054cb\n.text:00000000004054cd\n.text:00000000004054d4\n.text:00000000004054d7\n.text:00000000004054da\n.text:00000000004054dd\n.text:00000000004054e1\n.text:00000000004054e4\n.text:00000000004054e9\n.text:00000000004054ea\n'
p1161
tp1162
sS'triple_hash'
p1163
(S'\n__stdcall triple_hash(void * x, size_t table_size)\n'
p1164
V\u000asize_t triple_hash(void *x,size_t table_size)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = hash_pjw(*(void **)x,table_size);\u000a  return (sVar1 ^ *(ulong *)((long)x + 8)) % table_size;\u000a}\u000a\u000a
p1165
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00405a50\nXOR RAX,qword ptr [RBX + 0x8]\nXOR EDX,EDX\nDIV R14\nMOV RAX,RDX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1166
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 8b 3b\ne8 0e 26 00 00\n48 33 43 08\n31 d2\n49 f7 f6\n48 89 d0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1167
S'.text:0000000000403430\n.text:0000000000403432\n.text:0000000000403433\n.text:0000000000403434\n.text:0000000000403437\n.text:000000000040343a\n.text:000000000040343d\n.text:0000000000403442\n.text:0000000000403446\n.text:0000000000403448\n.text:000000000040344b\n.text:000000000040344e\n.text:0000000000403452\n.text:0000000000403453\n.text:0000000000403455\n'
p1168
tp1169
sS'quotearg_n_options'
p1170
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1171
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1172
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x004012b0\nTEST R12D,R12D\nJS 0x004046a1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060a1f8]\nCMP dword ptr [0x0060a200],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x004045bb\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60a208\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00405460\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060a1f8],R15\nJNZ 0x00404582\nMOVUPS XMM0,xmmword ptr [0x0060a208]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060a200]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x004013d0\nMOV dword ptr [0x0060a200],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00403710\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040461d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040468b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60a2f0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00404648\nCALL 0x00401290\nMOV RDI,R15\nCALL 0x004054f0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00403710\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004012a0\n'
p1173
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 a1 cd ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 ce 5c 20 00\n44 39 25 cf 5c 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 08 a2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 f8 0e 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 83 5c 20 00\n75 0b\n0f 10 05 8a 5c 20 00\n41 0f 11 07\n8b 05 78 5c 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 2d ce ff ff\n89 1d 57 5c 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 f0 a2 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 48 cc ff ff\n4c 89 ff\ne8 a0 0e 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 fa cb ff ff\n'
p1174
S'.text:00000000004044f0\n.text:00000000004044f1\n.text:00000000004044f3\n.text:00000000004044f5\n.text:00000000004044f7\n.text:00000000004044f9\n.text:00000000004044fa\n.text:00000000004044fe\n.text:0000000000404501\n.text:0000000000404504\n.text:0000000000404507\n.text:000000000040450a\n.text:000000000040450f\n.text:0000000000404512\n.text:0000000000404518\n.text:000000000040451d\n.text:000000000040451f\n.text:0000000000404523\n.text:000000000040452a\n.text:0000000000404531\n.text:0000000000404536\n.text:000000000040453b\n.text:0000000000404540\n.text:0000000000404542\n.text:0000000000404547\n.text:000000000040454a\n.text:000000000040454d\n.text:0000000000404553\n.text:0000000000404555\n.text:0000000000404558\n.text:000000000040455c\n.text:000000000040455f\n.text:0000000000404563\n.text:0000000000404568\n.text:000000000040456b\n.text:000000000040456e\n.text:0000000000404575\n.text:0000000000404577\n.text:000000000040457e\n.text:0000000000404582\n.text:0000000000404588\n.text:000000000040458b\n.text:000000000040458f\n.text:0000000000404592\n.text:0000000000404595\n.text:0000000000404599\n.text:000000000040459b\n.text:000000000040459e\n.text:00000000004045a3\n.text:00000000004045a9\n.text:00000000004045ac\n.text:00000000004045b1\n.text:00000000004045b6\n.text:00000000004045bb\n.text:00000000004045be\n.text:00000000004045c2\n.text:00000000004045c6\n.text:00000000004045cb\n.text:00000000004045cf\n.text:00000000004045d3\n.text:00000000004045d7\n.text:00000000004045db\n.text:00000000004045df\n.text:00000000004045e4\n.text:00000000004045e7\n.text:00000000004045ea\n.text:00000000004045ed\n.text:00000000004045f2\n.text:00000000004045f5\n.text:00000000004045f8\n.text:00000000004045fb\n.text:00000000004045fc\n.text:0000000000404601\n.text:0000000000404605\n.text:0000000000404608\n.text:000000000040460b\n.text:000000000040460d\n.text:0000000000404612\n.text:0000000000404616\n.text:000000000040461b\n.text:000000000040461d\n.text:0000000000404621\n.text:0000000000404626\n.text:0000000000404629\n.text:000000000040462c\n.text:0000000000404631\n.text:0000000000404636\n.text:0000000000404639\n.text:000000000040463e\n.text:0000000000404641\n.text:0000000000404643\n.text:0000000000404648\n.text:000000000040464b\n.text:0000000000404650\n.text:0000000000404653\n.text:0000000000404656\n.text:000000000040465b\n.text:000000000040465e\n.text:0000000000404662\n.text:0000000000404665\n.text:0000000000404668\n.text:000000000040466d\n.text:0000000000404672\n.text:0000000000404677\n.text:000000000040467a\n.text:000000000040467d\n.text:000000000040467e\n.text:0000000000404683\n.text:0000000000404687\n.text:000000000040468b\n.text:000000000040468f\n.text:0000000000404692\n.text:0000000000404696\n.text:0000000000404697\n.text:0000000000404699\n.text:000000000040469b\n.text:000000000040469d\n.text:000000000040469f\n.text:00000000004046a0\n.text:00000000004046a1\n'
p1175
tp1176
sS'strcmp'
p1177
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1178
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060a108)();\u000a  return iVar1;\u000a}\u000a\u000a
p1179
S'JMP qword ptr [0x0060a108]\n'
p1180
S'ff 25 a2 8c 20 00\n'
p1181
S'.plt:0000000000401460\n'
p1182
tp1183
sS'rotr64'
p1184
(S'\n__stdcall rotr64(uint64_t x)\n'
p1185
V\u000auint64_t rotr64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1186
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1187
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1188
S'.text:0000000000405670\n.text:0000000000405672\n.text:0000000000405675\n.text:0000000000405678\n'
p1189
tp1190
sS'set_custom_quoting'
p1191
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1192
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1193
S'TEST RDI,RDI\nMOV EAX,0x60a2b0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00403685\nTEST RDX,RDX\nJZ 0x00403685\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x004012a0\n'
p1194
S'48 85 ff\nb8 b0 a2 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 15 dc ff ff\n'
p1195
S'.text:0000000000403660\n.text:0000000000403663\n.text:0000000000403668\n.text:000000000040366c\n.text:0000000000403672\n.text:0000000000403675\n.text:0000000000403677\n.text:000000000040367a\n.text:000000000040367c\n.text:0000000000403680\n.text:0000000000403684\n.text:0000000000403685\n.text:0000000000403686\n'
p1196
tp1197
sS'c_isalpha'
p1198
(S'\n__stdcall c_isalpha()\n'
p1199
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1200
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x0040578b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1201
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1202
S'.text:0000000000405770\n.text:0000000000405773\n.text:0000000000405776\n.text:0000000000405778\n.text:0000000000405782\n.text:0000000000405784\n.text:0000000000405787\n.text:000000000040578a\n.text:000000000040578b\n.text:000000000040578d\n'
p1203
tp1204
sS'quotearg_custom_mem'
p1205
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1206
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1207
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00404900\n'
p1208
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1209
S'.text:0000000000404990\n.text:0000000000404993\n.text:0000000000404996\n.text:0000000000404999\n.text:000000000040499c\n.text:000000000040499e\n.text:00000000004049a1\n'
p1210
tp1211
sS'hash_get_max_bucket_length'
p1212
(S'\n__stdcall hash_get_max_bucket_length(Hash_table * table)\n'
p1213
V\u000asize_t hash_get_max_bucket_length(Hash_table *table)\u000a\u000a{\u000a  ulong uVar1;\u000a  hash_entry *phVar2;\u000a  ulong uVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar2 = table->bucket;\u000a  if (phVar2 < table->bucket_limit) {\u000a    uVar1 = 0;\u000a    do {\u000a      if (phVar2->data != (void *)0x0) {\u000a        uVar3 = 0;\u000a        phVar4 = phVar2;\u000a        do {\u000a          phVar4 = phVar4->next;\u000a          uVar3 = uVar3 + 1;\u000a        } while (phVar4 != (hash_entry *)0x0);\u000a        if (uVar1 < uVar3) {\u000a          uVar1 = uVar3;\u000a        }\u000a      }\u000a      phVar2 = phVar2 + 1;\u000a    } while (phVar2 < table->bucket_limit);\u000a    return uVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1214
S'MOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x004024ed\nMOV RDX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nNOP\nCMP qword ptr [RCX],0x0\nJZ 0x004024e3\nXOR ESI,ESI\nMOV RDI,RCX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RDI + 0x8]\nINC RSI\nTEST RDI,RDI\nJNZ 0x004024d0\nCMP RSI,RAX\nCMOVA RAX,RSI\nADD RCX,0x10\nCMP RCX,RDX\nJC 0x004024c0\nRET\nXOR EAX,EAX\nRET\n'
p1215
S'48 8b 0f\n48 3b 4f 08\n73 34\n48 8b 57 08\n31 c0\n90\n48 83 39 00\n74 1d\n31 f6\n48 89 cf\n0f 1f 44 00 00\n48 8b 7f 08\n48 ff c6\n48 85 ff\n75 f4\n48 39 c6\n48 0f 47 c6\n48 83 c1 10\n48 39 d1\n72 d4\nc3\n31 c0\nc3\n'
p1216
S'.text:00000000004024b0\n.text:00000000004024b3\n.text:00000000004024b7\n.text:00000000004024b9\n.text:00000000004024bd\n.text:00000000004024bf\n.text:00000000004024c0\n.text:00000000004024c4\n.text:00000000004024c6\n.text:00000000004024c8\n.text:00000000004024cb\n.text:00000000004024d0\n.text:00000000004024d4\n.text:00000000004024d7\n.text:00000000004024da\n.text:00000000004024dc\n.text:00000000004024df\n.text:00000000004024e3\n.text:00000000004024e7\n.text:00000000004024ea\n.text:00000000004024ec\n.text:00000000004024ed\n.text:00000000004024ef\n'
p1217
tp1218
sS'rpl_calloc'
p1219
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1220
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060a100)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1221
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x0040564b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00405650\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00405650\nPUSH RAX\nCALL 0x004012b0\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401450\n'
p1222
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 6f bc ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 f5 bd ff ff\n'
p1223
S'.text:0000000000405610\n.text:0000000000405613\n.text:0000000000405618\n.text:000000000040561a\n.text:000000000040561d\n.text:0000000000405622\n.text:0000000000405624\n.text:0000000000405627\n.text:000000000040562b\n.text:000000000040562d\n.text:0000000000405630\n.text:0000000000405633\n.text:0000000000405636\n.text:0000000000405639\n.text:000000000040563b\n.text:000000000040563c\n.text:0000000000405641\n.text:0000000000405647\n.text:0000000000405649\n.text:000000000040564a\n.text:000000000040564b\n.text:0000000000405650\n.text:0000000000405653\n.text:0000000000405656\n'
p1224
tp1225
sS'memset'
p1226
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1227
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060a0c0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1228
S'JMP qword ptr [0x0060a0c0]\n'
p1229
S'ff 25 ea 8c 20 00\n'
p1230
S'.plt:00000000004013d0\n'
p1231
tp1232
sS'getc_unlocked'
p1233
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1234
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060a058)();\u000a  return iVar1;\u000a}\u000a\u000a
p1235
S'JMP qword ptr [0x0060a058]\n'
p1236
S'ff 25 52 8d 20 00\n'
p1237
S'.plt:0000000000401300\n'
p1238
tp1239
sS'memmove'
p1240
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p1241
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_0060a180)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1242
S'JMP qword ptr [0x0060a180]\n'
p1243
S'ff 25 2a 8c 20 00\n'
p1244
S'.plt:0000000000401550\n'
p1245
tp1246
sS'hash_insert_if_absent'
p1247
(S'\n__stdcall hash_insert_if_absent(Hash_table * table, void * entry, void * * matched_ent)\n'
p1248
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint hash_insert_if_absent(Hash_table *table,void *entry,void **matched_ent)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  Hash_tuning *pHVar3;\u000a  _Bool _Var4;\u000a  hash_entry *in_RAX;\u000a  void *pvVar5;\u000a  hash_entry *phVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_28;\u000a  \u000a  if (entry != (void *)0x0) {\u000a    local_28 = in_RAX;\u000a    pvVar5 = hash_find_entry(table,entry,&local_28);\u000a    if (pvVar5 != (void *)0x0) {\u000a      if (matched_ent == (void **)0x0) {\u000a        return 0;\u000a      }\u000a      *matched_ent = pvVar5;\u000a      return 0;\u000a    }\u000a    uVar1 = table->n_buckets;\u000a    uVar2 = table->n_buckets_used;\u000a    if ((long)uVar2 < 0) {\u000a      fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a      fVar7 = fVar7 + fVar7;\u000a    }\u000a    else {\u000a      fVar7 = (float)uVar2;\u000a    }\u000a    if ((long)uVar1 < 0) {\u000a      fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a      fVar8 = fVar8 + fVar8;\u000a    }\u000a    else {\u000a      fVar8 = (float)uVar1;\u000a    }\u000a    if (fVar8 * table->tuning->growth_threshold < fVar7) {\u000a      check_tuning(table);\u000a      uVar1 = table->n_buckets;\u000a      uVar2 = table->n_buckets_used;\u000a      if ((long)uVar2 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar2;\u000a      }\u000a      pHVar3 = table->tuning;\u000a      if ((long)uVar1 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar1;\u000a      }\u000a      if (pHVar3->growth_threshold * fVar8 < fVar7) {\u000a        fVar8 = fVar8 * pHVar3->growth_factor;\u000a        if (pHVar3->is_n_buckets == false) {\u000a          fVar8 = fVar8 * pHVar3->growth_threshold;\u000a        }\u000a        if (_DAT_0040698c <= fVar8) {\u000a          return -1;\u000a        }\u000a        candidate = (long)fVar8;\u000a        if (DAT_00406988 <= fVar8) {\u000a          candidate = (long)(fVar8 - DAT_00406988) ^ 0x8000000000000000;\u000a        }\u000a        _Var4 = hash_rehash(table,candidate);\u000a        if (_Var4 == false) {\u000a          return -1;\u000a        }\u000a        pvVar5 = hash_find_entry(table,entry,&local_28);\u000a        if (pvVar5 != (void *)0x0) goto LAB_0040307d;\u000a      }\u000a    }\u000a    if (local_28->data == (void *)0x0) {\u000a      local_28->data = entry;\u000a      table->n_entries = table->n_entries + 1;\u000a      table->n_buckets_used = table->n_buckets_used + 1;\u000a    }\u000a    else {\u000a      phVar6 = allocate_entry(table);\u000a      if (phVar6 == (hash_entry *)0x0) {\u000a        return -1;\u000a      }\u000a      phVar6->data = entry;\u000a      phVar6->next = local_28->next;\u000a      local_28->next = phVar6;\u000a      table->n_entries = table->n_entries + 1;\u000a    }\u000a    return 1;\u000a  }\u000aLAB_0040307d:\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1249
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST R14,R14\nJZ 0x0040307d\nMOV RDX,RSP\nXOR EBP,EBP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00403090\nTEST RAX,RAX\nJZ 0x00402ef1\nTEST RBX,RBX\nJZ 0x00403070\nMOV qword ptr [RBX],RAX\nJMP 0x00403070\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00402f05\nCVTSI2SS XMM0,RCX\nJMP 0x00402f1a\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM0,RCX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x00402f2a\nCVTSI2SS XMM1,RAX\nJMP 0x00402f3f\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nCVTSI2SS XMM1,RAX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RCX + 0x8]\nUCOMISS XMM0,XMM1\nJBE 0x00403029\nMOV RDI,R15\nCALL 0x004029c0\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00402f69\nCVTSI2SS XMM2,RCX\nJMP 0x00402f7e\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM2,RCX\nADDSS XMM2,XMM2\nMOV RCX,qword ptr [R15 + 0x28]\nMOVSS XMM1,dword ptr [RCX + 0x8]\nTEST RAX,RAX\nJS 0x00402f96\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x00402fae\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVAPS XMM3,XMM1\nMULSS XMM3,XMM0\nUCOMISS XMM2,XMM3\nJBE 0x00403029\nCMP byte ptr [RCX + 0x10],0x0\nMULSS XMM0,dword ptr [RCX + 0xc]\nJNZ 0x00402fc9\nMULSS XMM0,XMM1\nMOV EBP,0xffffffff\nUCOMISS XMM0,dword ptr [0x0040698c]\nJNC 0x00403070\nMOVSS XMM1,dword ptr [0x00406988]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x00402c60\nTEST AL,AL\nJZ 0x00403070\nMOV RDX,RSP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00403090\nTEST RAX,RAX\nJNZ 0x0040307d\nMOV RAX,qword ptr [RSP]\nCMP qword ptr [RAX],0x0\nJZ 0x00403059\nMOV RDI,R15\nCALL 0x00403150\nTEST RAX,RAX\nJZ 0x0040306b\nMOV qword ptr [RAX],R14\nMOV RCX,qword ptr [RSP]\nMOV RDX,qword ptr [RCX + 0x8]\nMOV qword ptr [RAX + 0x8],RDX\nMOV qword ptr [RCX + 0x8],RAX\nINC qword ptr [R15 + 0x20]\nJMP 0x00403064\nMOV qword ptr [RAX],R14\nINC qword ptr [R15 + 0x20]\nINC qword ptr [R15 + 0x18]\nMOV EBP,0x1\nJMP 0x00403070\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004012a0\n'
p1250
S'55\n41 57\n41 56\n53\n50\n48 89 d3\n49 89 f6\n49 89 ff\n4d 85 f6\n0f 84 b4 01 00 00\n48 89 e2\n31 ed\n31 c9\n4c 89 ff\n4c 89 f6\ne8 b5 01 00 00\n48 85 c0\n74 11\n48 85 db\n0f 84 87 01 00 00\n48 89 03\ne9 7f 01 00 00\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a c1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c1\nf3 0f 58 c0\n49 8b 4f 28\n48 85 c0\n78 07\nf3 48 0f 2a c8\neb 15\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\nf3 48 0f 2a c8\nf3 0f 58 c9\nf3 0f 59 49 08\n0f 2e c1\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b fa ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a d1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a d1\nf3 0f 58 d2\n49 8b 4f 28\nf3 0f 10 49 08\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\n0f 28 d9\nf3 0f 59 d8\n0f 2e d3\n76 6f\n80 79 10 00\nf3 0f 59 41 0c\n75 04\nf3 0f 59 c1\nbd ff ff ff ff\n0f 2e 05 b7 39 00 00\n0f 83 95 00 00 00\nf3 0f 10 0d a5 39 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 50 fc ff ff\n84 c0\n74 5c\n48 89 e2\n31 c9\n4c 89 ff\n4c 89 f6\ne8 6c 00 00 00\n48 85 c0\n75 54\n48 8b 04 24\n48 83 38 00\n74 26\n4c 89 ff\ne8 15 01 00 00\n48 85 c0\n74 2b\n4c 89 30\n48 8b 0c 24\n48 8b 51 08\n48 89 50 08\n48 89 41 08\n49 ff 47 20\neb 0b\n4c 89 30\n49 ff 47 20\n49 ff 47 18\nbd 01 00 00 00\neb 05\nbd ff ff ff ff\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 1e e2 ff ff\n'
p1251
S'.text:0000000000402eb0\n.text:0000000000402eb1\n.text:0000000000402eb3\n.text:0000000000402eb5\n.text:0000000000402eb6\n.text:0000000000402eb7\n.text:0000000000402eba\n.text:0000000000402ebd\n.text:0000000000402ec0\n.text:0000000000402ec3\n.text:0000000000402ec9\n.text:0000000000402ecc\n.text:0000000000402ece\n.text:0000000000402ed0\n.text:0000000000402ed3\n.text:0000000000402ed6\n.text:0000000000402edb\n.text:0000000000402ede\n.text:0000000000402ee0\n.text:0000000000402ee3\n.text:0000000000402ee9\n.text:0000000000402eec\n.text:0000000000402ef1\n.text:0000000000402ef5\n.text:0000000000402ef9\n.text:0000000000402efc\n.text:0000000000402efe\n.text:0000000000402f03\n.text:0000000000402f05\n.text:0000000000402f08\n.text:0000000000402f0b\n.text:0000000000402f0e\n.text:0000000000402f11\n.text:0000000000402f16\n.text:0000000000402f1a\n.text:0000000000402f1e\n.text:0000000000402f21\n.text:0000000000402f23\n.text:0000000000402f28\n.text:0000000000402f2a\n.text:0000000000402f2d\n.text:0000000000402f30\n.text:0000000000402f33\n.text:0000000000402f36\n.text:0000000000402f3b\n.text:0000000000402f3f\n.text:0000000000402f44\n.text:0000000000402f47\n.text:0000000000402f4d\n.text:0000000000402f50\n.text:0000000000402f55\n.text:0000000000402f59\n.text:0000000000402f5d\n.text:0000000000402f60\n.text:0000000000402f62\n.text:0000000000402f67\n.text:0000000000402f69\n.text:0000000000402f6c\n.text:0000000000402f6f\n.text:0000000000402f72\n.text:0000000000402f75\n.text:0000000000402f7a\n.text:0000000000402f7e\n.text:0000000000402f82\n.text:0000000000402f87\n.text:0000000000402f8a\n.text:0000000000402f8c\n.text:0000000000402f8f\n.text:0000000000402f94\n.text:0000000000402f96\n.text:0000000000402f99\n.text:0000000000402f9c\n.text:0000000000402f9f\n.text:0000000000402fa2\n.text:0000000000402fa5\n.text:0000000000402faa\n.text:0000000000402fae\n.text:0000000000402fb1\n.text:0000000000402fb5\n.text:0000000000402fb8\n.text:0000000000402fba\n.text:0000000000402fbe\n.text:0000000000402fc3\n.text:0000000000402fc5\n.text:0000000000402fc9\n.text:0000000000402fce\n.text:0000000000402fd5\n.text:0000000000402fdb\n.text:0000000000402fe3\n.text:0000000000402fe6\n.text:0000000000402fea\n.text:0000000000402fef\n.text:0000000000402ff9\n.text:0000000000402ffc\n.text:0000000000403001\n.text:0000000000403004\n.text:0000000000403008\n.text:000000000040300b\n.text:0000000000403010\n.text:0000000000403012\n.text:0000000000403014\n.text:0000000000403017\n.text:0000000000403019\n.text:000000000040301c\n.text:000000000040301f\n.text:0000000000403024\n.text:0000000000403027\n.text:0000000000403029\n.text:000000000040302d\n.text:0000000000403031\n.text:0000000000403033\n.text:0000000000403036\n.text:000000000040303b\n.text:000000000040303e\n.text:0000000000403040\n.text:0000000000403043\n.text:0000000000403047\n.text:000000000040304b\n.text:000000000040304f\n.text:0000000000403053\n.text:0000000000403057\n.text:0000000000403059\n.text:000000000040305c\n.text:0000000000403060\n.text:0000000000403064\n.text:0000000000403069\n.text:000000000040306b\n.text:0000000000403070\n.text:0000000000403072\n.text:0000000000403076\n.text:0000000000403077\n.text:0000000000403079\n.text:000000000040307b\n.text:000000000040307c\n.text:000000000040307d\n'
p1252
tp1253
sS'c_isascii'
p1254
(S'\n__stdcall c_isascii()\n'
p1255
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1256
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1257
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1258
S'.text:0000000000405790\n.text:0000000000405796\n.text:0000000000405799\n'
p1259
tp1260
sS'rotr32'
p1261
(S'\n__stdcall rotr32()\n'
p1262
V\u000auint32_t rotr32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI >> bVar1 | in_EDI << 0x20 - bVar1);\u000a}\u000a\u000a
p1263
S'MOV ECX,ESI\nROR EDI,CL\nMOV EAX,EDI\nRET\n'
p1264
S'89 f1\nd3 cf\n89 f8\nc3\n'
p1265
S'.text:0000000000405690\n.text:0000000000405692\n.text:0000000000405694\n.text:0000000000405696\n'
p1266
tp1267
sS'__ctype_b_loc'
p1268
(S'\n__stdcall __ctype_b_loc()\n'
p1269
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060a1d0)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1270
S'JMP qword ptr [0x0060a1d0]\n'
p1271
S'ff 25 da 8b 20 00\n'
p1272
S'.plt:00000000004015f0\n'
p1273
tp1274
sS'quotearg'
p1275
(S'\n__stdcall quotearg(char * arg)\n'
p1276
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1277
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004044e0\n'
p1278
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1279
S'.text:00000000004046c0\n.text:00000000004046c3\n.text:00000000004046c5\n.text:00000000004046c8\n'
p1280
tp1281
sS'_start'
p1282
(S'\n__stdcall _start()\n'
p1283
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00609ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1284
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405f70\nMOV RCX,0x405f00\nMOV RDI,0x401960\nCALL qword ptr [0x00609ff0]\nHLT\n'
p1285
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 70 5f 40 00\n48 c7 c1 00 5f 40 00\n48 c7 c7 60 19 40 00\nff 15 c6 89 20 00\nf4\n'
p1286
S'.text:0000000000401600\n.text:0000000000401602\n.text:0000000000401605\n.text:0000000000401606\n.text:0000000000401609\n.text:000000000040160d\n.text:000000000040160e\n.text:000000000040160f\n.text:0000000000401616\n.text:000000000040161d\n.text:0000000000401624\n.text:000000000040162a\n'
p1287
tp1288
sS'c_iscntrl'
p1289
(S'\n__stdcall c_iscntrl()\n'
p1290
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1291
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x004057b8\nRET\nCMP EDI,0x7f\nJZ 0x004057b7\nXOR EAX,EAX\nRET\n'
p1292
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1293
S'.text:00000000004057b0\n.text:00000000004057b2\n.text:00000000004057b5\n.text:00000000004057b7\n.text:00000000004057b8\n.text:00000000004057bb\n.text:00000000004057bd\n.text:00000000004057bf\n'
p1294
tp1295
sS'hash_reset_tuning'
p1296
(S'\n__stdcall hash_reset_tuning(Hash_tuning * tuning)\n'
p1297
V\u000avoid hash_reset_tuning(Hash_tuning *tuning)\u000a\u000a{\u000a  float fVar1;\u000a  float fVar2;\u000a  float fVar3;\u000a  \u000a  *(undefined4 *)&tuning->is_n_buckets = default_tuning._16_4_;\u000a  fVar3 = default_tuning.growth_factor;\u000a  fVar2 = default_tuning.growth_threshold;\u000a  fVar1 = default_tuning.shrink_factor;\u000a  tuning->shrink_threshold = default_tuning.shrink_threshold;\u000a  tuning->shrink_factor = fVar1;\u000a  tuning->growth_threshold = fVar2;\u000a  tuning->growth_factor = fVar3;\u000a  return;\u000a}\u000a\u000a
p1298
S'MOV EAX,dword ptr [0x00406a0c]\nMOV dword ptr [RDI + 0x10],EAX\nMOVUPS XMM0,xmmword ptr [0x004069fc]\nMOVUPS xmmword ptr [RDI],XMM0\nRET\n'
p1299
S'8b 05 76 41 00 00\n89 47 10\n0f 10 05 5c 41 00 00\n0f 11 07\nc3\n'
p1300
S'.text:0000000000402890\n.text:0000000000402896\n.text:0000000000402899\n.text:00000000004028a0\n.text:00000000004028a3\n'
p1301
tp1302
sS'c_isblank'
p1303
(S'\n__stdcall c_isblank()\n'
p1304
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1305
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1306
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1307
S'.text:00000000004057a0\n.text:00000000004057a3\n.text:00000000004057a6\n.text:00000000004057a9\n.text:00000000004057ac\n.text:00000000004057ae\n'
p1308
tp1309
sS'atexit'
p1310
(S'\n__stdcall atexit(__func * __func)\n'
p1311
V\u000a/* WARNING: Removing unreachable block (ram,0x00405fa0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060a1a0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1312
S'MOV RAX,0x60a1e0\nTEST RAX,RAX\nJZ 0x00405fa0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401590\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401590\n'
p1313
S'48 c7 c0 e0 a1 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 fa b5 ff ff\n31 d2\n31 f6\ne9 e7 b5 ff ff\n'
p1314
S'.text:0000000000405f80\n.text:0000000000405f87\n.text:0000000000405f8a\n.text:0000000000405f8c\n.text:0000000000405f8f\n.text:0000000000405f91\n.text:0000000000405fa0\n.text:0000000000405fa2\n.text:0000000000405fa4\n'
p1315
tp1316
sS'fdopen'
p1317
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1318
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060a168)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1319
S'JMP qword ptr [0x0060a168]\n'
p1320
S'ff 25 42 8c 20 00\n'
p1321
S'.plt:0000000000401520\n'
p1322
tp1323
sS'hash_find_entry'
p1324
(S'\n__stdcall hash_find_entry(Hash_table * table, void * entry, hash_entry * * bucket_head)\n'
p1325
V\u000avoid * hash_find_entry(Hash_table *table,void *entry,hash_entry **bucket_head)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  _Bool _Var4;\u000a  hash_entry *phVar5;\u000a  hash_entry *entry_00;\u000a  char in_CL;\u000a  hash_entry **pphVar6;\u000a  void *pvVar7;\u000a  \u000a  phVar5 = safe_hasher(table,entry);\u000a  *bucket_head = phVar5;\u000a  pvVar7 = phVar5->data;\u000a  if (pvVar7 == (void *)0x0) {\u000a    return (void *)0x0;\u000a  }\u000a  if ((pvVar7 == entry) || (_Var4 = (*table->comparator)(entry,pvVar7), _Var4 != false)) {\u000a    pvVar7 = phVar5->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      phVar5->data = (void *)0x0;\u000a      return pvVar7;\u000a    }\u000a    uVar1 = *(undefined4 *)((long)&entry_00->data + 4);\u000a    uVar2 = *(undefined4 *)&entry_00->next;\u000a    uVar3 = *(undefined4 *)((long)&entry_00->next + 4);\u000a    *(undefined4 *)&phVar5->data = *(undefined4 *)&entry_00->data;\u000a    *(undefined4 *)((long)&phVar5->data + 4) = uVar1;\u000a    *(undefined4 *)&phVar5->next = uVar2;\u000a    *(undefined4 *)((long)&phVar5->next + 4) = uVar3;\u000a  }\u000a  else {\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      return (void *)0x0;\u000a    }\u000a    while( true ) {\u000a      pphVar6 = &phVar5->next;\u000a      if ((entry_00->data == entry) ||\u000a         (_Var4 = (*table->comparator)(entry,entry_00->data), _Var4 != false)) break;\u000a      phVar5 = *pphVar6;\u000a      entry_00 = phVar5->next;\u000a      if (entry_00 == (hash_entry *)0x0) {\u000a        return (void *)0x0;\u000a      }\u000a    }\u000a    entry_00 = *pphVar6;\u000a    pvVar7 = entry_00->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    *pphVar6 = entry_00->next;\u000a  }\u000a  free_entry(table,entry_00);\u000a  return pvVar7;\u000a}\u000a\u000a
p1326
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R12D,ECX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R15,RDI\nCALL 0x004026a0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RSI,qword ptr [RBX]\nTEST RSI,RSI\nJZ 0x00403115\nCMP RSI,RBP\nJZ 0x004030c7\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJZ 0x004030e0\nMOV R14,qword ptr [RBX]\nTEST R12B,R12B\nJZ 0x0040313d\nMOV RSI,qword ptr [RBX + 0x8]\nTEST RSI,RSI\nJZ 0x0040311a\nMOVUPS XMM0,xmmword ptr [RSI]\nMOVUPS xmmword ptr [RBX],XMM0\nJMP 0x00403135\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nJZ 0x00403115\nADD RBX,0x8\nXOR R14D,R14D\nMOV RSI,qword ptr [RAX]\nCMP RSI,RBP\nJZ 0x00403123\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x00403123\nMOV RBX,qword ptr [RBX]\nMOV RAX,qword ptr [RBX + 0x8]\nADD RBX,0x8\nTEST RAX,RAX\nJNZ 0x004030f0\nJMP 0x0040313d\nXOR R14D,R14D\nJMP 0x0040313d\nMOV qword ptr [RBX],0x0\nJMP 0x0040313d\nMOV RSI,qword ptr [RBX]\nMOV R14,qword ptr [RSI]\nTEST R12B,R12B\nJZ 0x0040313d\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RDI,R15\nCALL 0x00403410\nMOV RAX,R14\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1327
S'55\n41 57\n41 56\n41 54\n53\n41 89 cc\n49 89 d6\n48 89 f5\n49 89 ff\ne8 f7 f5 ff ff\n48 89 c3\n49 89 1e\n48 8b 33\n48 85 f6\n74 5e\n48 39 ee\n74 0b\n48 89 ef\n41 ff 57 38\n84 c0\n74 19\n4c 8b 33\n45 84 e4\n74 6e\n48 8b 73 08\n48 85 f6\n74 42\n0f 10 06\n0f 11 03\neb 55\n48 8b 43 08\n48 85 c0\n74 2c\n48 83 c3 08\n45 31 f6\n48 8b 30\n48 39 ee\n74 2b\n48 89 ef\n41 ff 57 38\n84 c0\n75 20\n48 8b 1b\n48 8b 43 08\n48 83 c3 08\n48 85 c0\n75 dd\neb 28\n45 31 f6\neb 23\n48 c7 03 00 00 00 00\neb 1a\n48 8b 33\n4c 8b 36\n45 84 e4\n74 0f\n48 8b 46 08\n48 89 03\n4c 89 ff\ne8 d3 02 00 00\n4c 89 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1328
S'.text:0000000000403090\n.text:0000000000403091\n.text:0000000000403093\n.text:0000000000403095\n.text:0000000000403097\n.text:0000000000403098\n.text:000000000040309b\n.text:000000000040309e\n.text:00000000004030a1\n.text:00000000004030a4\n.text:00000000004030a9\n.text:00000000004030ac\n.text:00000000004030af\n.text:00000000004030b2\n.text:00000000004030b5\n.text:00000000004030b7\n.text:00000000004030ba\n.text:00000000004030bc\n.text:00000000004030bf\n.text:00000000004030c3\n.text:00000000004030c5\n.text:00000000004030c7\n.text:00000000004030ca\n.text:00000000004030cd\n.text:00000000004030cf\n.text:00000000004030d3\n.text:00000000004030d6\n.text:00000000004030d8\n.text:00000000004030db\n.text:00000000004030de\n.text:00000000004030e0\n.text:00000000004030e4\n.text:00000000004030e7\n.text:00000000004030e9\n.text:00000000004030ed\n.text:00000000004030f0\n.text:00000000004030f3\n.text:00000000004030f6\n.text:00000000004030f8\n.text:00000000004030fb\n.text:00000000004030ff\n.text:0000000000403101\n.text:0000000000403103\n.text:0000000000403106\n.text:000000000040310a\n.text:000000000040310e\n.text:0000000000403111\n.text:0000000000403113\n.text:0000000000403115\n.text:0000000000403118\n.text:000000000040311a\n.text:0000000000403121\n.text:0000000000403123\n.text:0000000000403126\n.text:0000000000403129\n.text:000000000040312c\n.text:000000000040312e\n.text:0000000000403132\n.text:0000000000403135\n.text:0000000000403138\n.text:000000000040313d\n.text:0000000000403140\n.text:0000000000403141\n.text:0000000000403143\n.text:0000000000403145\n.text:0000000000403147\n.text:0000000000403148\n'
p1329
tp1330
sS'error'
p1331
(S'\n__stdcall error()\n'
p1332
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060a188)();\u000a  return;\u000a}\u000a\u000a
p1333
S'JMP qword ptr [0x0060a188]\n'
p1334
S'ff 25 22 8c 20 00\n'
p1335
S'.plt:0000000000401560\n'
p1336
tp1337
sS'raw_comparator'
p1338
(S'\n__stdcall raw_comparator(void * a, void * b)\n'
p1339
V\u000a_Bool raw_comparator(void *a,void *b)\u000a\u000a{\u000a  return (_Bool)(a == b);\u000a}\u000a\u000a
p1340
S'CMP RDI,RSI\nSETZ AL\nRET\n'
p1341
S'48 39 f7\n0f 94 c0\nc3\n'
p1342
S'.text:00000000004029b0\n.text:00000000004029b3\n.text:00000000004029b6\n'
p1343
tp1344
sS'strcaseeq6'
p1345
(S'\n__stdcall strcaseeq6()\n'
p1346
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1347
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405840\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404d82\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404d89\nJMP 0x00404d9e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404d9e\nTEST BPL,BPL\nJZ 0x00404d99\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404db0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1348
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 d1 0a 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1349
S'.text:0000000000404d60\n.text:0000000000404d61\n.text:0000000000404d62\n.text:0000000000404d63\n.text:0000000000404d65\n.text:0000000000404d68\n.text:0000000000404d6a\n.text:0000000000404d6f\n.text:0000000000404d73\n.text:0000000000404d75\n.text:0000000000404d77\n.text:0000000000404d7a\n.text:0000000000404d7c\n.text:0000000000404d7e\n.text:0000000000404d80\n.text:0000000000404d82\n.text:0000000000404d84\n.text:0000000000404d87\n.text:0000000000404d89\n.text:0000000000404d8c\n.text:0000000000404d8e\n.text:0000000000404d91\n.text:0000000000404d95\n.text:0000000000404d96\n.text:0000000000404d97\n.text:0000000000404d99\n.text:0000000000404d9e\n.text:0000000000404da2\n.text:0000000000404da3\n.text:0000000000404da4\n'
p1350
tp1351
sS'strcaseeq5'
p1352
(S'\n__stdcall strcaseeq5()\n'
p1353
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1354
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405840\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404d36\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404d3d\nJMP 0x00404d54\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404d54\nTEST BPL,BPL\nJZ 0x00404d4f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404d60\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1355
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 1d 0b 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1356
S'.text:0000000000404d10\n.text:0000000000404d11\n.text:0000000000404d13\n.text:0000000000404d14\n.text:0000000000404d17\n.text:0000000000404d19\n.text:0000000000404d1c\n.text:0000000000404d1e\n.text:0000000000404d23\n.text:0000000000404d27\n.text:0000000000404d29\n.text:0000000000404d2b\n.text:0000000000404d2e\n.text:0000000000404d30\n.text:0000000000404d32\n.text:0000000000404d34\n.text:0000000000404d36\n.text:0000000000404d38\n.text:0000000000404d3b\n.text:0000000000404d3d\n.text:0000000000404d40\n.text:0000000000404d42\n.text:0000000000404d46\n.text:0000000000404d49\n.text:0000000000404d4a\n.text:0000000000404d4c\n.text:0000000000404d4d\n.text:0000000000404d4f\n.text:0000000000404d54\n.text:0000000000404d55\n.text:0000000000404d57\n.text:0000000000404d58\n'
p1357
tp1358
sS'strcaseeq7'
p1359
(S'\n__stdcall strcaseeq7()\n'
p1360
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1361
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00405840\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404dd2\nTEST ECX,0xffffffdf\nJNZ 0x00404dd6\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x00404dda\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1362
S'53\n48 89 fb\n31 ff\ne8 85 0a 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1363
S'.text:0000000000404db0\n.text:0000000000404db1\n.text:0000000000404db4\n.text:0000000000404db6\n.text:0000000000404dbb\n.text:0000000000404dbf\n.text:0000000000404dc1\n.text:0000000000404dc3\n.text:0000000000404dc9\n.text:0000000000404dcb\n.text:0000000000404dd0\n.text:0000000000404dd1\n.text:0000000000404dd2\n.text:0000000000404dd4\n.text:0000000000404dd6\n.text:0000000000404dd8\n.text:0000000000404dd9\n.text:0000000000404dda\n.text:0000000000404ddf\n.text:0000000000404de0\n'
p1364
tp1365
sS'hash_pjw'
p1366
(S'\n__stdcall hash_pjw(void * x, size_t tablesize)\n'
p1367
V\u000asize_t hash_pjw(void *x,size_t tablesize)\u000a\u000a{\u000a  ulong uVar1;\u000a  char cVar2;\u000a  char *pcVar3;\u000a  \u000a  cVar2 = *(char *)x;\u000a  if (cVar2 == 0) {\u000a    uVar1 = 0;\u000a  }\u000a  else {\u000a    pcVar3 = (char *)((long)x + 1);\u000a    uVar1 = 0;\u000a    do {\u000a      uVar1 = (uVar1 << 9 | uVar1 >> 0x37) + (long)cVar2;\u000a      cVar2 = *pcVar3;\u000a      pcVar3 = pcVar3 + 1;\u000a    } while (cVar2 != 0);\u000a  }\u000a  return uVar1 % tablesize;\u000a}\u000a\u000a
p1368
S'MOV CL,byte ptr [RDI]\nTEST CL,CL\nJZ 0x00405a77\nINC RDI\nXOR EAX,EAX\nNOP dword ptr [RAX + RAX*0x1]\nMOVSX RCX,CL\nROL RAX,0x9\nADD RAX,RCX\nMOVZX ECX,byte ptr [RDI]\nINC RDI\nTEST CL,CL\nJNZ 0x00405a60\nJMP 0x00405a79\nXOR EAX,EAX\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p1369
S'8a 0f\n84 c9\n74 21\n48 ff c7\n31 c0\n0f 1f 44 00 00\n48 0f be c9\n48 c1 c0 09\n48 01 c8\n0f b6 0f\n48 ff c7\n84 c9\n75 eb\neb 02\n31 c0\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p1370
S'.text:0000000000405a50\n.text:0000000000405a52\n.text:0000000000405a54\n.text:0000000000405a56\n.text:0000000000405a59\n.text:0000000000405a5b\n.text:0000000000405a60\n.text:0000000000405a64\n.text:0000000000405a68\n.text:0000000000405a6b\n.text:0000000000405a6e\n.text:0000000000405a71\n.text:0000000000405a73\n.text:0000000000405a75\n.text:0000000000405a77\n.text:0000000000405a79\n.text:0000000000405a7b\n.text:0000000000405a7e\n.text:0000000000405a81\n'
p1371
tp1372
sS'strcaseeq0'
p1373
(S'\n__stdcall strcaseeq0()\n'
p1374
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1375
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405840\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404ae5\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404aec\nJMP 0x00404b20\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404b20\nTEST BPL,BPL\nJZ 0x00404b1b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404b30\nJMP 0x00404b20\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1376
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 6d 0d 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1377
S'.text:0000000000404ab0\n.text:0000000000404ab1\n.text:0000000000404ab3\n.text:0000000000404ab5\n.text:0000000000404ab7\n.text:0000000000404ab9\n.text:0000000000404aba\n.text:0000000000404abb\n.text:0000000000404abe\n.text:0000000000404ac1\n.text:0000000000404ac4\n.text:0000000000404ac7\n.text:0000000000404ac9\n.text:0000000000404acc\n.text:0000000000404ace\n.text:0000000000404ad3\n.text:0000000000404ad6\n.text:0000000000404ad8\n.text:0000000000404ada\n.text:0000000000404add\n.text:0000000000404adf\n.text:0000000000404ae1\n.text:0000000000404ae3\n.text:0000000000404ae5\n.text:0000000000404ae7\n.text:0000000000404aea\n.text:0000000000404aec\n.text:0000000000404aef\n.text:0000000000404af1\n.text:0000000000404af5\n.text:0000000000404afa\n.text:0000000000404afd\n.text:0000000000404b01\n.text:0000000000404b05\n.text:0000000000404b09\n.text:0000000000404b0d\n.text:0000000000404b11\n.text:0000000000404b14\n.text:0000000000404b19\n.text:0000000000404b1b\n.text:0000000000404b20\n.text:0000000000404b24\n.text:0000000000404b25\n.text:0000000000404b27\n.text:0000000000404b29\n.text:0000000000404b2b\n.text:0000000000404b2d\n.text:0000000000404b2e\n'
p1378
tp1379
sS'hash_table_ok'
p1380
(S'\n__stdcall hash_table_ok(Hash_table * table)\n'
p1381
V\u000a_Bool hash_table_ok(Hash_table *table)\u000a\u000a{\u000a  hash_entry **pphVar1;\u000a  undefined uVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  hash_entry *phVar5;\u000a  hash_entry *phVar6;\u000a  \u000a  phVar6 = table->bucket;\u000a  if (phVar6 < table->bucket_limit) {\u000a    sVar4 = 0;\u000a    sVar3 = 0;\u000a    do {\u000a      phVar5 = phVar6;\u000a      if (phVar6->data != (void *)0x0) {\u000a        do {\u000a          sVar4 = sVar4 + 1;\u000a          pphVar1 = &phVar5->next;\u000a          phVar5 = *pphVar1;\u000a        } while (*pphVar1 != (hash_entry *)0x0);\u000a        sVar3 = sVar3 + 1;\u000a      }\u000a      phVar6 = phVar6 + 1;\u000a    } while (phVar6 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    sVar4 = 0;\u000a  }\u000a  if ((sVar3 != table->n_buckets_used) || (uVar2 = 1, sVar4 != table->n_entries)) {\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p1382
S'MOV RSI,qword ptr [RDI]\nCMP RSI,qword ptr [RDI + 0x8]\nJNC 0x0040253a\nMOV R8,qword ptr [RDI + 0x8]\nXOR ECX,ECX\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RSI],0x0\nJZ 0x0040252f\nMOV RDX,RSI\nNOP dword ptr [RAX]\nINC RCX\nMOV RDX,qword ptr [RDX + 0x8]\nTEST RDX,RDX\nJNZ 0x00402520\nINC RAX\nADD RSI,0x10\nCMP RSI,R8\nJC 0x00402510\nJMP 0x0040253e\nXOR EAX,EAX\nXOR ECX,ECX\nCMP RAX,qword ptr [RDI + 0x18]\nJNZ 0x0040254c\nMOV AL,0x1\nCMP RCX,qword ptr [RDI + 0x20]\nJZ 0x0040254e\nXOR EAX,EAX\nRET\n'
p1383
S'48 8b 37\n48 3b 77 08\n73 41\n4c 8b 47 08\n31 c9\n31 c0\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 83 3e 00\n74 19\n48 89 f2\n0f 1f 80 00 00 00 00\n48 ff c1\n48 8b 52 08\n48 85 d2\n75 f4\n48 ff c0\n48 83 c6 10\n4c 39 c6\n72 d8\neb 04\n31 c0\n31 c9\n48 3b 47 18\n75 08\nb0 01\n48 3b 4f 20\n74 02\n31 c0\nc3\n'
p1384
S'.text:00000000004024f0\n.text:00000000004024f3\n.text:00000000004024f7\n.text:00000000004024f9\n.text:00000000004024fd\n.text:00000000004024ff\n.text:0000000000402501\n.text:0000000000402510\n.text:0000000000402514\n.text:0000000000402516\n.text:0000000000402519\n.text:0000000000402520\n.text:0000000000402523\n.text:0000000000402527\n.text:000000000040252a\n.text:000000000040252c\n.text:000000000040252f\n.text:0000000000402533\n.text:0000000000402536\n.text:0000000000402538\n.text:000000000040253a\n.text:000000000040253c\n.text:000000000040253e\n.text:0000000000402542\n.text:0000000000402544\n.text:0000000000402546\n.text:000000000040254a\n.text:000000000040254c\n.text:000000000040254e\n'
p1385
tp1386
sS'strcaseeq2'
p1387
(S'\n__stdcall strcaseeq2()\n'
p1388
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1389
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405840\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404bf6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404bfd\nJMP 0x00404c2a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404c2a\nTEST BPL,BPL\nJZ 0x00404c25\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404c40\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1390
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 5d 0c 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1391
S'.text:0000000000404bc0\n.text:0000000000404bc1\n.text:0000000000404bc3\n.text:0000000000404bc5\n.text:0000000000404bc7\n.text:0000000000404bc9\n.text:0000000000404bca\n.text:0000000000404bcb\n.text:0000000000404bce\n.text:0000000000404bd1\n.text:0000000000404bd4\n.text:0000000000404bd7\n.text:0000000000404bd9\n.text:0000000000404bdc\n.text:0000000000404bde\n.text:0000000000404be3\n.text:0000000000404be7\n.text:0000000000404be9\n.text:0000000000404beb\n.text:0000000000404bee\n.text:0000000000404bf0\n.text:0000000000404bf2\n.text:0000000000404bf4\n.text:0000000000404bf6\n.text:0000000000404bf8\n.text:0000000000404bfb\n.text:0000000000404bfd\n.text:0000000000404c00\n.text:0000000000404c02\n.text:0000000000404c06\n.text:0000000000404c0a\n.text:0000000000404c0e\n.text:0000000000404c12\n.text:0000000000404c15\n.text:0000000000404c19\n.text:0000000000404c1a\n.text:0000000000404c1c\n.text:0000000000404c1e\n.text:0000000000404c20\n.text:0000000000404c22\n.text:0000000000404c23\n.text:0000000000404c25\n.text:0000000000404c2a\n.text:0000000000404c2e\n.text:0000000000404c2f\n.text:0000000000404c31\n.text:0000000000404c33\n.text:0000000000404c35\n.text:0000000000404c37\n.text:0000000000404c38\n'
p1392
tp1393
sS'strcaseeq1'
p1394
(S'\n__stdcall strcaseeq1()\n'
p1395
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1396
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00405840\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x00404b6d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404b74\nJMP 0x00404ba7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404ba7\nTEST BPL,BPL\nJZ 0x00404ba2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404bc0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1397
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 e6 0c 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1398
S'.text:0000000000404b30\n.text:0000000000404b31\n.text:0000000000404b33\n.text:0000000000404b35\n.text:0000000000404b37\n.text:0000000000404b39\n.text:0000000000404b3a\n.text:0000000000404b3b\n.text:0000000000404b40\n.text:0000000000404b43\n.text:0000000000404b46\n.text:0000000000404b49\n.text:0000000000404b4b\n.text:0000000000404b4e\n.text:0000000000404b53\n.text:0000000000404b55\n.text:0000000000404b5a\n.text:0000000000404b5e\n.text:0000000000404b60\n.text:0000000000404b62\n.text:0000000000404b65\n.text:0000000000404b67\n.text:0000000000404b69\n.text:0000000000404b6b\n.text:0000000000404b6d\n.text:0000000000404b6f\n.text:0000000000404b72\n.text:0000000000404b74\n.text:0000000000404b77\n.text:0000000000404b79\n.text:0000000000404b7d\n.text:0000000000404b81\n.text:0000000000404b85\n.text:0000000000404b8b\n.text:0000000000404b8f\n.text:0000000000404b92\n.text:0000000000404b96\n.text:0000000000404b97\n.text:0000000000404b99\n.text:0000000000404b9b\n.text:0000000000404b9d\n.text:0000000000404b9f\n.text:0000000000404ba0\n.text:0000000000404ba2\n.text:0000000000404ba7\n.text:0000000000404bab\n.text:0000000000404bac\n.text:0000000000404bae\n.text:0000000000404bb0\n.text:0000000000404bb2\n.text:0000000000404bb4\n.text:0000000000404bb5\n'
p1399
tp1400
sS'strcaseeq4'
p1401
(S'\n__stdcall strcaseeq4()\n'
p1402
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1403
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405840\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00404cdc\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404ce3\nJMP 0x00404d04\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404d04\nTEST BPL,BPL\nJZ 0x00404cff\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404d10\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1404
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 77 0b 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1405
S'.text:0000000000404cb0\n.text:0000000000404cb1\n.text:0000000000404cb3\n.text:0000000000404cb5\n.text:0000000000404cb6\n.text:0000000000404cb7\n.text:0000000000404cba\n.text:0000000000404cbd\n.text:0000000000404cbf\n.text:0000000000404cc2\n.text:0000000000404cc4\n.text:0000000000404cc9\n.text:0000000000404ccd\n.text:0000000000404ccf\n.text:0000000000404cd1\n.text:0000000000404cd4\n.text:0000000000404cd6\n.text:0000000000404cd8\n.text:0000000000404cda\n.text:0000000000404cdc\n.text:0000000000404cde\n.text:0000000000404ce1\n.text:0000000000404ce3\n.text:0000000000404ce6\n.text:0000000000404ce8\n.text:0000000000404cec\n.text:0000000000404cf0\n.text:0000000000404cf3\n.text:0000000000404cf7\n.text:0000000000404cf8\n.text:0000000000404cfa\n.text:0000000000404cfc\n.text:0000000000404cfd\n.text:0000000000404cff\n.text:0000000000404d04\n.text:0000000000404d08\n.text:0000000000404d09\n.text:0000000000404d0b\n.text:0000000000404d0d\n.text:0000000000404d0e\n'
p1406
tp1407
sS'strcaseeq3'
p1408
(S'\n__stdcall strcaseeq3()\n'
p1409
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1410
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405840\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404c70\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404c77\nJMP 0x00404c9a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404c9a\nTEST BPL,BPL\nJZ 0x00404c95\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404cb0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1411
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 e3 0b 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1412
S'.text:0000000000404c40\n.text:0000000000404c41\n.text:0000000000404c43\n.text:0000000000404c45\n.text:0000000000404c47\n.text:0000000000404c48\n.text:0000000000404c4b\n.text:0000000000404c4e\n.text:0000000000404c51\n.text:0000000000404c53\n.text:0000000000404c56\n.text:0000000000404c58\n.text:0000000000404c5d\n.text:0000000000404c61\n.text:0000000000404c63\n.text:0000000000404c65\n.text:0000000000404c68\n.text:0000000000404c6a\n.text:0000000000404c6c\n.text:0000000000404c6e\n.text:0000000000404c70\n.text:0000000000404c72\n.text:0000000000404c75\n.text:0000000000404c77\n.text:0000000000404c7a\n.text:0000000000404c7c\n.text:0000000000404c80\n.text:0000000000404c84\n.text:0000000000404c88\n.text:0000000000404c8b\n.text:0000000000404c8c\n.text:0000000000404c8e\n.text:0000000000404c90\n.text:0000000000404c92\n.text:0000000000404c93\n.text:0000000000404c95\n.text:0000000000404c9a\n.text:0000000000404c9b\n.text:0000000000404c9d\n.text:0000000000404c9f\n.text:0000000000404ca1\n.text:0000000000404ca2\n'
p1413
tp1414
sS'last_component'
p1415
(S'\n__stdcall last_component(char * name)\n'
p1416
V\u000achar * last_component(char *name)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  char *pcVar3;\u000a  \u000a  name = name + -1;\u000a  do {\u000a    pcVar3 = name + 1;\u000a    name = name + 1;\u000a  } while (*pcVar3 == '/');\u000a  bVar2 = false;\u000a  pcVar3 = name;\u000a  do {\u000a    bVar1 = true;\u000a    if (*name != '/') {\u000a      if (*name == 0) {\u000a        return pcVar3;\u000a      }\u000a      bVar1 = bVar2;\u000a      if (bVar2) {\u000a        pcVar3 = name;\u000a        bVar1 = false;\u000a      }\u000a    }\u000a    bVar2 = bVar1;\u000a    name = name + 1;\u000a  } while( true );\u000a}\u000a\u000a
p1417
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x004059d0\nXOR ESI,ESI\nMOV RAX,RDI\nJMP 0x004059f6\nINC RAX\nMOV SIL,DL\nMOVZX ECX,byte ptr [RAX]\nMOV DL,0x1\nCMP CL,0x2f\nJZ 0x004059f0\nTEST CL,CL\nJZ 0x00405a17\nMOV EDX,ESI\nAND DL,0x1\nJZ 0x00405a0d\nXOR ESI,ESI\nTEST DL,DL\nCMOVNZ RDI,RAX\nMOV EDX,ESI\nJMP 0x004059f0\nMOV RAX,RDI\nRET\n'
p1418
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n31 f6\n48 89 f8\neb 15\n48 ff c0\n40 88 d6\n0f b6 08\nb2 01\n80 f9 2f\n74 f0\n84 c9\n74 13\n89 f2\n80 e2 01\n74 02\n31 f6\n84 d2\n48 0f 45 f8\n89 f2\neb d9\n48 89 f8\nc3\n'
p1419
S'.text:00000000004059c0\n.text:00000000004059c3\n.text:00000000004059d0\n.text:00000000004059d4\n.text:00000000004059d8\n.text:00000000004059da\n.text:00000000004059dc\n.text:00000000004059df\n.text:00000000004059f0\n.text:00000000004059f3\n.text:00000000004059f6\n.text:00000000004059f9\n.text:00000000004059fb\n.text:00000000004059fe\n.text:0000000000405a00\n.text:0000000000405a02\n.text:0000000000405a04\n.text:0000000000405a06\n.text:0000000000405a09\n.text:0000000000405a0b\n.text:0000000000405a0d\n.text:0000000000405a0f\n.text:0000000000405a13\n.text:0000000000405a15\n.text:0000000000405a17\n.text:0000000000405a1a\n'
p1420
tp1421
sS'register_tm_clones'
p1422
(S'\n__stdcall register_tm_clones()\n'
p1423
V\u000a/* WARNING: Removing unreachable block (ram,0x00401693) */\u000a/* WARNING: Removing unreachable block (ram,0x0040169d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1424
S'MOV ESI,0x60a250\nPUSH RBP\nSUB RSI,0x60a250\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x004016a8\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004016a8\nPOP RBP\nMOV EDI,0x60a250\nJMP RAX\nPOP RBP\nRET\n'
p1425
S'be 50 a2 60 00\n55\n48 81 ee 50 a2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 50 a2 60 00\nff e0\n5d\nc3\n'
p1426
S'.text:0000000000401670\n.text:0000000000401675\n.text:0000000000401676\n.text:000000000040167d\n.text:0000000000401681\n.text:0000000000401684\n.text:0000000000401687\n.text:000000000040168b\n.text:000000000040168e\n.text:0000000000401691\n.text:0000000000401693\n.text:0000000000401698\n.text:000000000040169b\n.text:000000000040169d\n.text:000000000040169e\n.text:00000000004016a3\n.text:00000000004016a8\n.text:00000000004016a9\n'
p1427
tp1428
sS'c_islower'
p1429
(S'\n__stdcall c_islower()\n'
p1430
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1431
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1432
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1433
S'.text:00000000004057e0\n.text:00000000004057e3\n.text:00000000004057e6\n.text:00000000004057e9\n'
p1434
tp1435
sS'fwrite'
p1436
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1437
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060a1b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1438
S'JMP qword ptr [0x0060a1b0]\n'
p1439
S'ff 25 fa 8b 20 00\n'
p1440
S'.plt:00000000004015b0\n'
p1441
tp1442
sS'triple_compare'
p1443
(S'\n__stdcall triple_compare(void * x, void * y)\n'
p1444
V\u000a_Bool triple_compare(void *x,void *y)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  if ((*(long *)((long)x + 8) == *(long *)((long)y + 8)) &&\u000a     (*(long *)((long)x + 0x10) == *(long *)((long)y + 0x10))) {\u000a    _Var1 = same_name(*(char **)x,*(char **)y);\u000a    return _Var1;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1445
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,qword ptr [RSI + 0x8]\nJNZ 0x0040348f\nMOV RAX,qword ptr [RDI + 0x10]\nCMP RAX,qword ptr [RSI + 0x10]\nJNZ 0x0040348f\nMOV RDI,qword ptr [RDI]\nMOV RSI,qword ptr [RSI]\nJMP 0x00404df0\nXOR EAX,EAX\nRET\n'
p1446
S'48 8b 47 08\n48 3b 46 08\n75 15\n48 8b 47 10\n48 3b 46 10\n75 0b\n48 8b 3f\n48 8b 36\ne9 61 19 00 00\n31 c0\nc3\n'
p1447
S'.text:0000000000403470\n.text:0000000000403474\n.text:0000000000403478\n.text:000000000040347a\n.text:000000000040347e\n.text:0000000000403482\n.text:0000000000403484\n.text:0000000000403487\n.text:000000000040348a\n.text:000000000040348f\n.text:0000000000403491\n'
p1448
tp1449
sS'seen_triple'
p1450
(S'\n__stdcall seen_triple(Hash_table * * ht, char * filename, stat * st)\n'
p1451
V\u000a_Bool seen_triple(Hash_table **ht,char *filename,stat *st)\u000a\u000a{\u000a  _Bool _Var1;\u000a  Hash_table *pHVar2;\u000a  \u000a  if (*ht == (Hash_table *)0x0) {\u000a    pHVar2 = hash_initialize(7,(Hash_tuning *)0x0,triple_hash,triple_compare_ino_str,triple_free);\u000a    *ht = pHVar2;\u000a    if (pHVar2 == (Hash_table *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die();\u000a    }\u000a  }\u000a  _Var1 = seen_file(*ht,filename,st);\u000a  if (_Var1 == false) {\u000a    record_file(*ht,filename,st);\u000a  }\u000a  return (_Bool)(_Var1 != false);\u000a}\u000a\u000a
p1452
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV R15,RSI\nMOV RBX,RDI\nCMP qword ptr [RBX],0x0\nJNZ 0x004022a8\nMOV EDI,0x7\nXOR ESI,ESI\nMOV EDX,0x403430\nMOV ECX,0x4034a0\nMOV R8D,0x4034d0\nCALL 0x004028b0\nMOV qword ptr [RBX],RAX\nTEST RAX,RAX\nJZ 0x004022d4\nMOV RDI,qword ptr [RBX]\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x00402440\nMOV ECX,EAX\nMOV AL,0x1\nTEST CL,CL\nJNZ 0x004022ce\nMOV RDI,qword ptr [RBX]\nMOV RSI,R15\nMOV RDX,R14\nCALL 0x004023c0\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\nCALL 0x004055b0\n'
p1453
S'41 57\n41 56\n53\n49 89 d6\n49 89 f7\n48 89 fb\n48 83 3b 00\n75 24\nbf 07 00 00 00\n31 f6\nba 30 34 40 00\nb9 a0 34 40 00\n41 b8 d0 34 40 00\ne8 10 06 00 00\n48 89 03\n48 85 c0\n74 2c\n48 8b 3b\n4c 89 fe\n4c 89 f2\ne8 8a 01 00 00\n89 c1\nb0 01\n84 c9\n75 10\n48 8b 3b\n4c 89 fe\n4c 89 f2\ne8 f4 00 00 00\n31 c0\n5b\n41 5e\n41 5f\nc3\ne8 d7 32 00 00\n'
p1454
S'.text:0000000000402270\n.text:0000000000402272\n.text:0000000000402274\n.text:0000000000402275\n.text:0000000000402278\n.text:000000000040227b\n.text:000000000040227e\n.text:0000000000402282\n.text:0000000000402284\n.text:0000000000402289\n.text:000000000040228b\n.text:0000000000402290\n.text:0000000000402295\n.text:000000000040229b\n.text:00000000004022a0\n.text:00000000004022a3\n.text:00000000004022a6\n.text:00000000004022a8\n.text:00000000004022ab\n.text:00000000004022ae\n.text:00000000004022b1\n.text:00000000004022b6\n.text:00000000004022b8\n.text:00000000004022ba\n.text:00000000004022bc\n.text:00000000004022be\n.text:00000000004022c1\n.text:00000000004022c4\n.text:00000000004022c7\n.text:00000000004022cc\n.text:00000000004022ce\n.text:00000000004022cf\n.text:00000000004022d1\n.text:00000000004022d3\n.text:00000000004022d4\n'
p1455
tp1456
sS'rotl_sz'
p1457
(S'\n__stdcall rotl_sz(size_t x)\n'
p1458
V\u000asize_t rotl_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p1459
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p1460
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p1461
S'.text:00000000004056a0\n.text:00000000004056a2\n.text:00000000004056a5\n.text:00000000004056a8\n'
p1462
tp1463
sS'__do_global_dtors_aux'
p1464
(S'\n__stdcall __do_global_dtors_aux()\n'
p1465
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1466
S'CMP byte ptr [0x0060a288],0x0\nJNZ 0x004016ca\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401630\nPOP RBP\nMOV byte ptr [0x0060a288],0x1\nRET\n'
p1467
S'80 3d d1 8b 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 be 8b 20 00 01\nf3 c3\n'
p1468
S'.text:00000000004016b0\n.text:00000000004016b7\n.text:00000000004016b9\n.text:00000000004016ba\n.text:00000000004016bd\n.text:00000000004016c2\n.text:00000000004016c3\n.text:00000000004016ca\n'
p1469
tp1470
sS'c_isprint'
p1471
(S'\n__stdcall c_isprint()\n'
p1472
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1473
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1474
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1475
S'.text:00000000004057f0\n.text:00000000004057f3\n.text:00000000004057f6\n.text:00000000004057f9\n'
p1476
tp1477
sS'_fini'
p1478
(S'\n__stdcall _fini()\n'
p1479
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1480
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1481
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1482
S'.fini:0000000000405fd0\n.fini:0000000000405fd4\n.fini:0000000000405fd8\n'
p1483
tp1484
sS'__fpending'
p1485
(S'\n__stdcall __fpending()\n'
p1486
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060a050)();\u000a  return;\u000a}\u000a\u000a
p1487
S'JMP qword ptr [0x0060a050]\n'
p1488
S'ff 25 5a 8d 20 00\n'
p1489
S'.plt:00000000004012f0\n'
p1490
tp1491
s.