(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x608e08]\nPUSH RBP\nLEA RBP,[0x608e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x004012e8\nTEST RBP,RBP\nJZ 0x00404fe6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00404fd0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 66 3e 20 00\n55\n48 8d 2d 66 3e 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 27 c3 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000404f90\n.text:0000000000404f92\n.text:0000000000404f94\n.text:0000000000404f97\n.text:0000000000404f99\n.text:0000000000404f9b\n.text:0000000000404fa2\n.text:0000000000404fa3\n.text:0000000000404faa\n.text:0000000000404fab\n.text:0000000000404fae\n.text:0000000000404fb1\n.text:0000000000404fb4\n.text:0000000000404fb8\n.text:0000000000404fbc\n.text:0000000000404fc1\n.text:0000000000404fc4\n.text:0000000000404fc6\n.text:0000000000404fc8\n.text:0000000000404fd0\n.text:0000000000404fd3\n.text:0000000000404fd6\n.text:0000000000404fd9\n.text:0000000000404fdd\n.text:0000000000404fe1\n.text:0000000000404fe4\n.text:0000000000404fe6\n.text:0000000000404fea\n.text:0000000000404feb\n.text:0000000000404fec\n.text:0000000000404fee\n.text:0000000000404ff0\n.text:0000000000404ff2\n.text:0000000000404ff4\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00609148)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x00609148]\n'
p11
S'ff 25 d2 7b 20 00\n'
p12
S'.plt:0000000000401570\n'
p13
tp14
sS'c_isdigit'
p15
(S'\n__stdcall c_isdigit()\n'
p16
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p17
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p18
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p19
S'.text:00000000004049e0\n.text:00000000004049e3\n.text:00000000004049e6\n.text:00000000004049e9\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040648b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x4040c7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x404148;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x4041dc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00403f58\nMOV EDX,0x406478\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401650\nJMP 0x00403f6d\nMOV EDX,0x406484\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401650\nXOR EDI,EDI\nMOV ESI,0x40648b\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x406760\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401650\nXOR EDI,EDI\nMOV ESI,0x40648f\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x004014a0\nCMP R12,0x9\nJA 0x00403ff6\nJMP qword ptr [0x406428 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40655a\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401650\nXOR EDI,EDI\nMOV ESI,0x406699\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401650\nADD RSP,0x38\nJMP 0x00404267\nXOR EDI,EDI\nMOV ESI,0x40656a\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401650\nXOR EDI,EDI\nMOV ESI,0x406581\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401650\nXOR EDI,EDI\nMOV ESI,0x40659d\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401650\nADD RSP,0x18\nJMP 0x00404267\nXOR EDI,EDI\nMOV ESI,0x4065bd\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401650\nADD RSP,0x18\nJMP 0x00404267\nXOR EDI,EDI\nMOV ESI,0x4065e1\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401650\nADD RSP,0x28\nJMP 0x00404267\nXOR EDI,EDI\nMOV ESI,0x406609\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401650\nADD RSP,0x28\nJMP 0x00404267\nXOR EDI,EDI\nMOV ESI,0x406635\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401650\nADD RSP,0x38\nJMP 0x00404267\nXOR EDI,EDI\nMOV ESI,0x406665\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401650\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401330\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 78 64 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 fa d6 ff ff\neb 15\nba 84 64 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 e3 d6 ff ff\n31 ff\nbe 8b 64 40 00\nba 05 00 00 00\ne8 52 d4 ff ff\n48 89 c1\nbe 01 00 00 00\nba 60 67 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 b5 d6 ff ff\n31 ff\nbe 8f 64 40 00\nba 05 00 00 00\ne8 24 d4 ff ff\n48 89 c7\n4c 89 f6\ne8 e9 d4 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 28 64 40 00\n31 ff\nbe 5a 65 40 00\nba 05 00 00 00\ne8 fa d3 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 5a d6 ff ff\n31 ff\nbe 99 66 40 00\nba 05 00 00 00\ne8 c9 d3 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 11 d6 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 6a 65 40 00\nba 05 00 00 00\ne8 77 d3 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 d3 d5 ff ff\n31 ff\nbe 81 65 40 00\nba 05 00 00 00\ne8 42 d3 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 9a d5 ff ff\n31 ff\nbe 9d 65 40 00\nba 05 00 00 00\ne8 09 d3 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 64 d5 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe bd 65 40 00\nba 05 00 00 00\ne8 ca d2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 22 d5 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe e1 65 40 00\nba 05 00 00 00\ne8 88 d2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 d8 d4 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 09 66 40 00\nba 05 00 00 00\ne8 3e d2 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 8e d4 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 35 66 40 00\nba 05 00 00 00\ne8 f4 d1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 3c d4 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 65 66 40 00\nba 05 00 00 00\ne8 a5 d1 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 ed d3 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 bc d0 ff ff\n'
p26
S'.text:0000000000403f20\n.text:0000000000403f22\n.text:0000000000403f24\n.text:0000000000403f26\n.text:0000000000403f27\n.text:0000000000403f28\n.text:0000000000403f2b\n.text:0000000000403f2e\n.text:0000000000403f31\n.text:0000000000403f34\n.text:0000000000403f37\n.text:0000000000403f3a\n.text:0000000000403f3f\n.text:0000000000403f42\n.text:0000000000403f44\n.text:0000000000403f49\n.text:0000000000403f4b\n.text:0000000000403f4e\n.text:0000000000403f51\n.text:0000000000403f56\n.text:0000000000403f58\n.text:0000000000403f5d\n.text:0000000000403f5f\n.text:0000000000403f62\n.text:0000000000403f65\n.text:0000000000403f68\n.text:0000000000403f6d\n.text:0000000000403f6f\n.text:0000000000403f74\n.text:0000000000403f79\n.text:0000000000403f7e\n.text:0000000000403f81\n.text:0000000000403f86\n.text:0000000000403f8b\n.text:0000000000403f91\n.text:0000000000403f93\n.text:0000000000403f96\n.text:0000000000403f9b\n.text:0000000000403f9d\n.text:0000000000403fa2\n.text:0000000000403fa7\n.text:0000000000403fac\n.text:0000000000403faf\n.text:0000000000403fb2\n.text:0000000000403fb7\n.text:0000000000403fbb\n.text:0000000000403fbd\n.text:0000000000403fc5\n.text:0000000000403fc7\n.text:0000000000403fcc\n.text:0000000000403fd1\n.text:0000000000403fd6\n.text:0000000000403fd9\n.text:0000000000403fdc\n.text:0000000000403fe1\n.text:0000000000403fe3\n.text:0000000000403fe6\n.text:0000000000403fea\n.text:0000000000403feb\n.text:0000000000403fed\n.text:0000000000403fef\n.text:0000000000403ff1\n.text:0000000000403ff6\n.text:0000000000403ff8\n.text:0000000000403ffd\n.text:0000000000404002\n.text:0000000000404007\n.text:000000000040400a\n.text:000000000040400d\n.text:0000000000404011\n.text:0000000000404015\n.text:000000000040401a\n.text:000000000040401f\n.text:0000000000404022\n.text:0000000000404026\n.text:000000000040402a\n.text:000000000040402e\n.text:0000000000404032\n.text:0000000000404036\n.text:000000000040403a\n.text:000000000040403f\n.text:0000000000404043\n.text:0000000000404048\n.text:000000000040404a\n.text:000000000040404f\n.text:0000000000404054\n.text:0000000000404059\n.text:000000000040405c\n.text:000000000040405f\n.text:0000000000404063\n.text:0000000000404068\n.text:000000000040406a\n.text:000000000040406d\n.text:0000000000404071\n.text:0000000000404072\n.text:0000000000404074\n.text:0000000000404076\n.text:0000000000404078\n.text:000000000040407d\n.text:000000000040407f\n.text:0000000000404084\n.text:0000000000404089\n.text:000000000040408e\n.text:0000000000404091\n.text:0000000000404094\n.text:0000000000404098\n.text:000000000040409c\n.text:00000000004040a1\n.text:00000000004040a3\n.text:00000000004040a6\n.text:00000000004040aa\n.text:00000000004040ab\n.text:00000000004040ad\n.text:00000000004040af\n.text:00000000004040b1\n.text:00000000004040b6\n.text:00000000004040b8\n.text:00000000004040bd\n.text:00000000004040c2\n.text:00000000004040c7\n.text:00000000004040ca\n.text:00000000004040cd\n.text:00000000004040d1\n.text:00000000004040d5\n.text:00000000004040d9\n.text:00000000004040de\n.text:00000000004040e0\n.text:00000000004040e3\n.text:00000000004040e7\n.text:00000000004040ec\n.text:00000000004040f0\n.text:00000000004040f5\n.text:00000000004040f7\n.text:00000000004040fc\n.text:0000000000404101\n.text:0000000000404106\n.text:0000000000404109\n.text:000000000040410c\n.text:0000000000404110\n.text:0000000000404114\n.text:0000000000404119\n.text:000000000040411e\n.text:0000000000404121\n.text:0000000000404125\n.text:0000000000404129\n.text:000000000040412e\n.text:0000000000404132\n.text:0000000000404137\n.text:0000000000404139\n.text:000000000040413e\n.text:0000000000404143\n.text:0000000000404148\n.text:000000000040414b\n.text:000000000040414e\n.text:0000000000404152\n.text:0000000000404156\n.text:000000000040415a\n.text:000000000040415f\n.text:0000000000404164\n.text:0000000000404167\n.text:000000000040416b\n.text:000000000040416f\n.text:0000000000404173\n.text:0000000000404178\n.text:000000000040417c\n.text:0000000000404181\n.text:0000000000404183\n.text:0000000000404188\n.text:000000000040418d\n.text:0000000000404192\n.text:0000000000404195\n.text:0000000000404198\n.text:000000000040419c\n.text:00000000004041a0\n.text:00000000004041a5\n.text:00000000004041aa\n.text:00000000004041ad\n.text:00000000004041b1\n.text:00000000004041b5\n.text:00000000004041b9\n.text:00000000004041bd\n.text:00000000004041c2\n.text:00000000004041c6\n.text:00000000004041cb\n.text:00000000004041cd\n.text:00000000004041d2\n.text:00000000004041d7\n.text:00000000004041dc\n.text:00000000004041df\n.text:00000000004041e2\n.text:00000000004041e6\n.text:00000000004041ea\n.text:00000000004041ee\n.text:00000000004041f3\n.text:00000000004041f8\n.text:00000000004041fb\n.text:00000000004041ff\n.text:0000000000404203\n.text:0000000000404207\n.text:000000000040420b\n.text:000000000040420f\n.text:0000000000404214\n.text:0000000000404218\n.text:000000000040421a\n.text:000000000040421c\n.text:0000000000404221\n.text:0000000000404226\n.text:000000000040422b\n.text:000000000040422e\n.text:0000000000404231\n.text:0000000000404235\n.text:0000000000404239\n.text:000000000040423e\n.text:0000000000404243\n.text:0000000000404246\n.text:000000000040424a\n.text:000000000040424e\n.text:0000000000404252\n.text:0000000000404256\n.text:000000000040425a\n.text:000000000040425e\n.text:0000000000404263\n.text:0000000000404267\n.text:0000000000404268\n.text:000000000040426a\n.text:000000000040426c\n.text:000000000040426e\n.text:000000000040426f\n'
p27
tp28
sS'usage'
p29
(S'\n__stdcall usage()\n'
p30
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... NAME TYPE [MAJOR MINOR]\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,"Create the special file NAME of the given TYPE.\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "  -m, --mode=MODE    set file permission bits to MODE, not a=rw - umask\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -Z                   set the SELinux security context to default type\u005cn      --context[=CTX]  like -Z, or if CTX is specified then set the SELinux\u005cn                         or SMACK security context to CTX\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnBoth MAJOR and MINOR must be specified when TYPE is b, c, or u, and they\u005cnmust be omitted when TYPE is p.  If MAJOR or MINOR begins with 0x or 0X,\u005cnit is interpreted as hexadecimal; otherwise, if it begins with 0, as octal;\u005cnotherwise, as decimal.  TYPE may be:\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn  b      create a block (buffered) special file\u005cn  c, u   create a character (unbuffered) special file\u005cn  p      create a FIFO\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    uVar1 = dcgettext(0,\u000a                      "\u005cnNOTE: your shell may have its own version of %s, which usually supersedes\u005cnthe version described here.  Please refer to your shell\u005c's documentation\u005cnfor details about the options it supports.\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,"mknod",uVar1);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p31
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x004018ee\nXOR EDI,EDI\nMOV ESI,0x405240\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x006092c0]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x40526f\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004014a0\nCALL 0x00401940\nXOR EDI,EDI\nMOV ESI,0x4052a0\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004014a0\nXOR EDI,EDI\nMOV ESI,0x4052e9\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004014a0\nXOR EDI,EDI\nMOV ESI,0x4053b8\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004014a0\nXOR EDI,EDI\nMOV ESI,0x4053e5\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004014a0\nXOR EDI,EDI\nMOV ESI,0x40541b\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004014a0\nXOR EDI,EDI\nMOV ESI,0x405520\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004014a0\nXOR EDI,EDI\nMOV ESI,0x40559f\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40565e\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004015c0\nCALL 0x00401970\nMOV EDI,EBX\nCALL 0x00401630\nCALL 0x00401900\nMOV EDI,EBX\nCALL 0x00401630\n'
p32
S'53\n89 fb\n85 db\n0f 85 43 01 00 00\n31 ff\nbe 40 52 40 00\nba 05 00 00 00\ne8 14 fc ff ff\n48 89 c1\n48 8b 15 fa 7a 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 eb fd ff ff\n31 ff\nbe 6f 52 40 00\nba 05 00 00 00\ne8 ea fb ff ff\n48 8b 35 7b 7a 20 00\n48 89 c7\ne8 ab fc ff ff\ne8 46 01 00 00\n31 ff\nbe a0 52 40 00\nba 05 00 00 00\ne8 c5 fb ff ff\n48 8b 35 56 7a 20 00\n48 89 c7\ne8 86 fc ff ff\n31 ff\nbe e9 52 40 00\nba 05 00 00 00\ne8 a5 fb ff ff\n48 8b 35 36 7a 20 00\n48 89 c7\ne8 66 fc ff ff\n31 ff\nbe b8 53 40 00\nba 05 00 00 00\ne8 85 fb ff ff\n48 8b 35 16 7a 20 00\n48 89 c7\ne8 46 fc ff ff\n31 ff\nbe e5 53 40 00\nba 05 00 00 00\ne8 65 fb ff ff\n48 8b 35 f6 79 20 00\n48 89 c7\ne8 26 fc ff ff\n31 ff\nbe 1b 54 40 00\nba 05 00 00 00\ne8 45 fb ff ff\n48 8b 35 d6 79 20 00\n48 89 c7\ne8 06 fc ff ff\n31 ff\nbe 20 55 40 00\nba 05 00 00 00\ne8 25 fb ff ff\n48 8b 35 b6 79 20 00\n48 89 c7\ne8 e6 fb ff ff\n31 ff\nbe 9f 55 40 00\nba 05 00 00 00\ne8 05 fb ff ff\n48 89 c1\nbf 01 00 00 00\nba 5e 56 40 00\n31 c0\n48 89 ce\ne8 de fc ff ff\ne8 89 00 00 00\n89 df\ne8 42 fd ff ff\ne8 0d 00 00 00\n89 df\ne8 36 fd ff ff\n'
p33
S'.text:00000000004017a0\n.text:00000000004017a1\n.text:00000000004017a3\n.text:00000000004017a5\n.text:00000000004017ab\n.text:00000000004017ad\n.text:00000000004017b2\n.text:00000000004017b7\n.text:00000000004017bc\n.text:00000000004017bf\n.text:00000000004017c6\n.text:00000000004017cb\n.text:00000000004017cd\n.text:00000000004017d0\n.text:00000000004017d5\n.text:00000000004017d7\n.text:00000000004017dc\n.text:00000000004017e1\n.text:00000000004017e6\n.text:00000000004017ed\n.text:00000000004017f0\n.text:00000000004017f5\n.text:00000000004017fa\n.text:00000000004017fc\n.text:0000000000401801\n.text:0000000000401806\n.text:000000000040180b\n.text:0000000000401812\n.text:0000000000401815\n.text:000000000040181a\n.text:000000000040181c\n.text:0000000000401821\n.text:0000000000401826\n.text:000000000040182b\n.text:0000000000401832\n.text:0000000000401835\n.text:000000000040183a\n.text:000000000040183c\n.text:0000000000401841\n.text:0000000000401846\n.text:000000000040184b\n.text:0000000000401852\n.text:0000000000401855\n.text:000000000040185a\n.text:000000000040185c\n.text:0000000000401861\n.text:0000000000401866\n.text:000000000040186b\n.text:0000000000401872\n.text:0000000000401875\n.text:000000000040187a\n.text:000000000040187c\n.text:0000000000401881\n.text:0000000000401886\n.text:000000000040188b\n.text:0000000000401892\n.text:0000000000401895\n.text:000000000040189a\n.text:000000000040189c\n.text:00000000004018a1\n.text:00000000004018a6\n.text:00000000004018ab\n.text:00000000004018b2\n.text:00000000004018b5\n.text:00000000004018ba\n.text:00000000004018bc\n.text:00000000004018c1\n.text:00000000004018c6\n.text:00000000004018cb\n.text:00000000004018ce\n.text:00000000004018d3\n.text:00000000004018d8\n.text:00000000004018da\n.text:00000000004018dd\n.text:00000000004018e2\n.text:00000000004018e7\n.text:00000000004018e9\n.text:00000000004018ee\n.text:00000000004018f3\n.text:00000000004018f5\n'
p34
tp35
sS'quoting_options_from_style'
p36
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p37
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p38
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040389d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401330\n'
p39
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 8e da ff ff\n'
p40
S'.text:0000000000403850\n.text:0000000000403854\n.text:0000000000403857\n.text:000000000040385c\n.text:0000000000403861\n.text:0000000000403865\n.text:000000000040386d\n.text:0000000000403870\n.text:0000000000403872\n.text:0000000000403874\n.text:0000000000403878\n.text:000000000040387b\n.text:000000000040387f\n.text:0000000000403884\n.text:0000000000403889\n.text:000000000040388d\n.text:0000000000403891\n.text:0000000000403895\n.text:0000000000403898\n.text:000000000040389c\n.text:000000000040389d\n'
p41
tp42
sS'strchr'
p43
(S'\n__stdcall strchr(char * __s, int __c)\n'
p44
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_006090a0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x006090a0]\n'
p46
S'ff 25 7a 7c 20 00\n'
p47
S'.plt:0000000000401420\n'
p48
tp49
sS'rpl_fclose'
p50
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p51
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00404eb9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00404eb9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p52
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401520\nTEST EAX,EAX\nJS 0x00404eb9\nMOV RDI,RBX\nCALL 0x00401580\nTEST EAX,EAX\nJZ 0x00404e87\nMOV RDI,RBX\nCALL 0x00401520\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401440\nCMP RAX,-0x1\nJZ 0x00404eb9\nMOV RDI,RBX\nCALL 0x00404ed0\nTEST EAX,EAX\nJZ 0x00404eb9\nCALL 0x00401340\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004013b0\nTEST EBP,EBP\nJZ 0x00404eb2\nCALL 0x00401340\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004013b0\n'
p53
S'55\n53\n50\n48 89 fb\ne8 c5 c6 ff ff\n85 c0\n78 5a\n48 89 df\ne8 19 c7 ff ff\n85 c0\n74 1c\n48 89 df\ne8 ad c6 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 bf c5 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 a8 c4 ff ff\n8b 28\n48 89 df\ne8 0e c5 ff ff\n85 ed\n74 0c\ne8 95 c4 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 e9 c4 ff ff\n'
p54
S'.text:0000000000404e50\n.text:0000000000404e51\n.text:0000000000404e52\n.text:0000000000404e53\n.text:0000000000404e56\n.text:0000000000404e5b\n.text:0000000000404e5d\n.text:0000000000404e5f\n.text:0000000000404e62\n.text:0000000000404e67\n.text:0000000000404e69\n.text:0000000000404e6b\n.text:0000000000404e6e\n.text:0000000000404e73\n.text:0000000000404e75\n.text:0000000000404e7a\n.text:0000000000404e7c\n.text:0000000000404e81\n.text:0000000000404e85\n.text:0000000000404e87\n.text:0000000000404e8a\n.text:0000000000404e8f\n.text:0000000000404e91\n.text:0000000000404e93\n.text:0000000000404e98\n.text:0000000000404e9a\n.text:0000000000404e9d\n.text:0000000000404ea2\n.text:0000000000404ea4\n.text:0000000000404ea6\n.text:0000000000404eab\n.text:0000000000404ead\n.text:0000000000404eb2\n.text:0000000000404eb6\n.text:0000000000404eb7\n.text:0000000000404eb8\n.text:0000000000404eb9\n.text:0000000000404ebc\n.text:0000000000404ec0\n.text:0000000000404ec1\n.text:0000000000404ec2\n'
p55
tp56
sS'strcpy'
p57
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00609048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x00609048]\n'
p60
S'ff 25 d2 7c 20 00\n'
p61
S'.plt:0000000000401370\n'
p62
tp63
sS'strncmp'
p64
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p65
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00609038)();\u000a  return iVar1;\u000a}\u000a\u000a
p66
S'JMP qword ptr [0x00609038]\n'
p67
S'ff 25 e2 7c 20 00\n'
p68
S'.plt:0000000000401350\n'
p69
tp70
sS'xnrealloc'
p71
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p72
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p73
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00404474\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00404480\nPUSH RAX\nCALL 0x004045d0\n'
p74
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p75
S'.text:0000000000404460\n.text:0000000000404463\n.text:0000000000404466\n.text:0000000000404469\n.text:000000000040446b\n.text:000000000040446f\n.text:0000000000404472\n.text:0000000000404474\n.text:0000000000404475\n'
p76
tp77
sS'quote'
p78
(S'\n__stdcall quote(char * arg)\n'
p79
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p80
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403b00\n'
p81
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p82
S'.text:0000000000403b10\n.text:0000000000403b13\n.text:0000000000403b15\n.text:0000000000403b18\n'
p83
tp84
sS'emit_bug_reporting_address'
p85
(S'\n__stdcall emit_bug_reporting_address()\n'
p86
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p87
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x4066d5\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4066ea\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x406700\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x4056c9\nMOV ECX,0x405931\nXOR EAX,EAX\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x406714\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004014a0\n'
p88
S'50\n31 ff\nbe d5 66 40 00\nba 05 00 00 00\ne8 1e d0 ff ff\n48 89 c1\nbf 01 00 00 00\nba ea 66 40 00\n31 c0\n48 89 ce\ne8 f7 d1 ff ff\n31 ff\nbe 00 67 40 00\nba 05 00 00 00\ne8 f6 cf ff ff\n48 89 c6\nbf 01 00 00 00\nba c9 56 40 00\nb9 31 59 40 00\n31 c0\ne8 cd d1 ff ff\n31 ff\nbe 14 67 40 00\nba 05 00 00 00\ne8 cc cf ff ff\n48 8b 35 5d 4e 20 00\n48 89 c7\n58\ne9 8c d0 ff ff\n'
p89
S'.text:00000000004043a0\n.text:00000000004043a1\n.text:00000000004043a3\n.text:00000000004043a8\n.text:00000000004043ad\n.text:00000000004043b2\n.text:00000000004043b5\n.text:00000000004043ba\n.text:00000000004043bf\n.text:00000000004043c1\n.text:00000000004043c4\n.text:00000000004043c9\n.text:00000000004043cb\n.text:00000000004043d0\n.text:00000000004043d5\n.text:00000000004043da\n.text:00000000004043dd\n.text:00000000004043e2\n.text:00000000004043e7\n.text:00000000004043ec\n.text:00000000004043ee\n.text:00000000004043f3\n.text:00000000004043f5\n.text:00000000004043fa\n.text:00000000004043ff\n.text:0000000000404404\n.text:000000000040440b\n.text:000000000040440e\n.text:000000000040440f\n'
p90
tp91
sS'clone_quoting_options'
p92
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p93
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401340\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x6092d0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00404580\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p95
S'55\n41 56\n53\n48 89 fb\ne8 64 ec ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 d0 92 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 85 1e 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p96
S'.text:00000000004026d0\n.text:00000000004026d1\n.text:00000000004026d3\n.text:00000000004026d4\n.text:00000000004026d7\n.text:00000000004026dc\n.text:00000000004026df\n.text:00000000004026e2\n.text:00000000004026e5\n.text:00000000004026ea\n.text:00000000004026ee\n.text:00000000004026f3\n.text:00000000004026f6\n.text:00000000004026fb\n.text:00000000004026fe\n.text:00000000004026ff\n.text:0000000000402701\n.text:0000000000402702\n'
p97
tp98
sS'xmalloc'
p99
(S'\n__stdcall xmalloc(size_t n)\n'
p100
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p101
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401540\nTEST RBX,RBX\nJZ 0x00404453\nTEST RAX,RAX\nJZ 0x00404455\nPOP RBX\nRET\nCALL 0x004045d0\n'
p102
S'53\n48 89 fb\ne8 f7 d0 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p103
S'.text:0000000000404440\n.text:0000000000404441\n.text:0000000000404444\n.text:0000000000404449\n.text:000000000040444c\n.text:000000000040444e\n.text:0000000000404451\n.text:0000000000404453\n.text:0000000000404454\n.text:0000000000404455\n'
p104
tp105
sS'quotearg_char_mem'
p106
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p107
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p108
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x00609300]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x006092f0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x006092e0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006092d0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00402730\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403620\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p109
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d b8 59 20 00\n48 89 4c 24 30\n0f 10 05 9c 59 20 00\n0f 29 44 24 20\n0f 10 05 80 59 20 00\n0f 29 44 24 10\n0f 10 05 64 59 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p110
S'.text:0000000000403930\n.text:0000000000403932\n.text:0000000000403934\n.text:0000000000403935\n.text:0000000000403939\n.text:000000000040393b\n.text:000000000040393e\n.text:0000000000403941\n.text:0000000000403948\n.text:000000000040394d\n.text:0000000000403954\n.text:0000000000403959\n.text:0000000000403960\n.text:0000000000403965\n.text:000000000040396c\n.text:0000000000403970\n.text:0000000000403973\n.text:0000000000403978\n.text:000000000040397b\n.text:000000000040397d\n.text:0000000000403982\n.text:0000000000403984\n.text:0000000000403987\n.text:000000000040398a\n.text:000000000040398d\n.text:0000000000403992\n.text:0000000000403996\n.text:0000000000403997\n.text:0000000000403999\n.text:000000000040399b\n'
p111
tp112
sS'c_isgraph'
p113
(S'\n__stdcall c_isgraph()\n'
p114
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p115
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p116
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p117
S'.text:00000000004049f0\n.text:00000000004049f3\n.text:00000000004049f6\n.text:00000000004049f9\n'
p118
tp119
sS'frame_dummy'
p120
(S'\n__stdcall frame_dummy()\n'
p121
V\u000a/* WARNING: Removing unreachable block (ram,0x0040178a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p122
S'MOV EDI,0x608e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401780\nJMP 0x00401710\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040177b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401710\n'
p123
S'bf 18 8e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p124
S'.text:0000000000401770\n.text:0000000000401775\n.text:0000000000401779\n.text:000000000040177b\n.text:0000000000401780\n.text:0000000000401785\n.text:0000000000401788\n.text:000000000040178a\n.text:000000000040178b\n.text:000000000040178e\n.text:0000000000401790\n.text:0000000000401791\n'
p125
tp126
sS'quotearg_buffer_restyled'
p127
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p128
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_004028cc_caseD_7;\u000a  case 2:\u000a    goto switchD_004028cc_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_004028cc_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_004028cc_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_004028cc_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_004028cc_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_004028cc_caseD_7;\u000aswitchD_004028cc_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_004028cc_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_004028cc_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00403390;\u000aLAB_00402ab0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00403399:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_004033a8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_00402abb:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_00402aff:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_00402aff;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_004033a8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_004032d5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x004031e0;\u000a    }\u000a    goto LAB_004033a8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040330a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_004033a8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403339;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00402df8;\u000a  case '\u005ca':\u000a    goto joined_r0x00402ce8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00402ce8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00402b16_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00402ce8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00402ce8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00402b16_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00402ce8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040324e;\u000a    }\u000a    goto LAB_004033a8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_004033a8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_004033a8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_004033a8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_004033a8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_004033a8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00402b16_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_004032a6;\u000a      goto joined_r0x00403298;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00402da1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403298;\u000a      goto LAB_004032a6;\u000a    }\u000a    goto LAB_004033a8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_004033a8;\u000a  }\u000a  goto joined_r0x004031e0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040330a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403339;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403339:\u000a  if (1 < uVar10) {\u000aLAB_00402e16:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00402ed2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00402da1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00402ed2:\u000a        if (bVar6 != 0) goto LAB_004033a8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00402df8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00402e16;\u000ajoined_r0x004031e0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x004031e0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403207;\u000aLAB_00403240:\u000a    if (bVar22) goto LAB_00403245;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00403240;\u000aLAB_00403207:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00403245:\u000a      if (bVar6 != 0) goto LAB_004033a8;\u000aLAB_0040324e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403298;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_004032a6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403298:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_004032d5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00402ab0;\u000aLAB_00403390:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00403399;\u000a  goto LAB_00402abb;\u000a}\u000a\u000a
p129
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004013e0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00403475\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x405ee0 + RAX*0x8]\nMOV EDI,0x406406\nMOV ESI,R15D\nCALL 0x00403b20\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x406408\nMOV ESI,R15D\nCALL 0x00403b20\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040292d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00402930\nNOP\nCMP R12,RSI\nJNC 0x0040291e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00402910\nJMP 0x00402930\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004013f0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x004029fc\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x004029fc\nMOV ECX,0x406404\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x004029f6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00402997\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x004029c4\nTEST RSI,RSI\nJZ 0x004029b1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x406408\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x004029d2\nMOV ECX,0x406408\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x004029fc\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040344c\nMOV ECX,0x406404\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00403390\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00403399\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x00402aff\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x00402afa\nCMP R11,-0x1\nJNZ 0x00402afa\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004013f0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00402b50\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00402dac\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x405f38 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x004033a8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403200\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403207\nJMP 0x00403240\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401490\nTEST EAX,EAX\nSETZ AL\nJNZ 0x00402b9d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00402b01\nJMP 0x004033a8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00402b01\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x00402b2b\nCMP EBX,0x2\nJNZ 0x00402b2b\nTEST R13,R13\nJNZ 0x00402b2b\nJMP 0x004033a8\nCMP R11,-0x1\nJZ 0x00402f83\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00402fa3\nJMP 0x00402b2b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402fb4\nTEST R8B,R8B\nJNZ 0x004033a8\nCMP EBX,0x2\nJNZ 0x00402c58\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00402c58\nCMP R12,RSI\nJNC 0x00402c33\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402c42\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402c51\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00402c62\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403128\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403128\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403128\nCMP RCX,RSI\nJNC 0x00402c9c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x00402cab\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402b36\nJMP 0x00403200\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402b29\nJMP 0x00402d0a\nMOV DL,0x74\nJMP 0x00402cf2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402b29\nJMP 0x00402d0a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402b29\nJMP 0x00402d0a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x004033a8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402b29\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040324e\nJMP 0x004033a8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00402b29\nTEST R8B,R8B\nJNZ 0x004033a8\nCMP R12,RSI\nJNC 0x00402d3a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402d49\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402d58\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00402b29\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040313b\nCMP EBX,0x2\nJNZ 0x00402b29\nTEST R8B,R8B\nJZ 0x00402b29\nJMP 0x004033a8\nCMP EBX,0x2\nJNZ 0x00402fd4\nTEST R8B,R8B\nJNZ 0x004033a8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x004032a6\nJMP 0x004032c9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00402ff5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401690\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004031e8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x004031e8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00402ed2\nJMP 0x00402ea0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00402e89\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00402e86\nCMP R12,RSI\nJNC 0x00402e6b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x00402e7a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00402ec0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00402ec0\nTEST BPL,0x1\nJZ 0x00402f63\nCMP R12,RSI\nJNC 0x00402eb4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00402f63\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00402ea0\nTEST R8B,R8B\nJNZ 0x004033a8\nCMP EBX,0x2\nJNZ 0x00402f1a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x00402f1a\nCMP R12,RSI\nJNC 0x00402ef2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402f01\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402f10\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00402f24\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402f3b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402f55\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00402e50\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x004032a6\nJMP 0x004032c9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x00402b2b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x00402b2b\nJMP 0x004033a8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x004032d5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402b36\nJMP 0x00403200\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00402cf2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x004032a6\nJMP 0x004032c9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403017\nMOV RDI,R10\nCALL 0x004013f0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401410\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004032ef\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x004032e7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004032f6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x004030de\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x004030d6\nBT RDI,RDX\nJC 0x00403442\nINC RCX\nCMP RCX,R14\nJC 0x004030c0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401670\nTEST EAX,EAX\nJNZ 0x004030f3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401660\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403035\nJMP 0x00403339\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402b36\nJMP 0x00403200\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00402b29\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00402b29\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00402b29\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x00402b2b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00403372\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x004033a8\nCMP R12,RSI\nJNC 0x0040319e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x004031b1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004031c0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x004031cf\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402b36\nJMP 0x00403200\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402b36\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00403240\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00403245\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x004032a0\nJMP 0x00403245\nTEST BPL,BPL\nJZ 0x004032a0\nTEST R8B,R8B\nJNZ 0x004033a8\nCMP EBX,0x2\nJNZ 0x00403288\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403288\nCMP R12,RSI\nJNC 0x00403263\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403272\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403281\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403292\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x004032d2\nJMP 0x004032ce\nTEST DIL,0x1\nJZ 0x004032c9\nAND AL,0x1\nJNZ 0x004032c9\nCMP R12,RSI\nJNC 0x004032b4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004032c3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x004032d2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00403390\nJMP 0x00402ab0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403334\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040332c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00403368\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040330a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403339\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00402df8\nJMP 0x00402e16\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403339\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402b36\nJMP 0x00403200\nCMP R13,R11\nJNZ 0x00402abb\nTEST R8B,R8B\nJZ 0x00403402\nCMP EBX,0x2\nJNZ 0x00403402\nTEST R12,R12\nJNZ 0x00403402\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00402840\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00403436\nTEST R8B,R8B\nJNZ 0x00403436\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00403436\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00403429\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00403420\nCMP R12,RSI\nJNC 0x004033ed\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x004033ed\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x004033a8\nTEST RSI,RSI\nJZ 0x00403459\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x406404\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x004029fc\nCALL 0x00401330\n'
p130
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 72 eb ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 e0 5e 40 00\nbf 06 64 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 08 64 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 b3 ea ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 04 64 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 08 64 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 08 64 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 04 64 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 13 e9 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 38 5f 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 27 e9 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 c7 e8 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 e1 e3 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 b3 e3 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 89 e5 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 52 e5 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 04 64 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 b6 de ff ff\n'
p131
S'.text:0000000000402840\n.text:0000000000402841\n.text:0000000000402843\n.text:0000000000402845\n.text:0000000000402847\n.text:0000000000402849\n.text:000000000040284a\n.text:0000000000402851\n.text:0000000000402854\n.text:0000000000402857\n.text:000000000040285a\n.text:000000000040285f\n.text:0000000000402864\n.text:0000000000402869\n.text:000000000040286e\n.text:0000000000402876\n.text:000000000040287a\n.text:0000000000402880\n.text:0000000000402888\n.text:000000000040288d\n.text:0000000000402895\n.text:000000000040289a\n.text:000000000040289e\n.text:00000000004028a0\n.text:00000000004028a3\n.text:00000000004028a6\n.text:00000000004028a9\n.text:00000000004028ae\n.text:00000000004028b1\n.text:00000000004028b4\n.text:00000000004028b7\n.text:00000000004028ba\n.text:00000000004028bc\n.text:00000000004028bf\n.text:00000000004028c4\n.text:00000000004028c7\n.text:00000000004028cc\n.text:00000000004028d3\n.text:00000000004028d8\n.text:00000000004028db\n.text:00000000004028e0\n.text:00000000004028e5\n.text:00000000004028ea\n.text:00000000004028ed\n.text:00000000004028f2\n.text:00000000004028f7\n.text:00000000004028fc\n.text:00000000004028fe\n.text:0000000000402900\n.text:0000000000402905\n.text:0000000000402907\n.text:000000000040290a\n.text:000000000040290c\n.text:000000000040290e\n.text:0000000000402910\n.text:0000000000402913\n.text:0000000000402915\n.text:000000000040291a\n.text:000000000040291e\n.text:0000000000402924\n.text:0000000000402927\n.text:0000000000402929\n.text:000000000040292b\n.text:000000000040292d\n.text:0000000000402930\n.text:0000000000402935\n.text:0000000000402938\n.text:000000000040293d\n.text:0000000000402942\n.text:0000000000402945\n.text:0000000000402948\n.text:000000000040294b\n.text:000000000040294e\n.text:0000000000402953\n.text:0000000000402956\n.text:0000000000402959\n.text:000000000040295e\n.text:0000000000402961\n.text:0000000000402963\n.text:0000000000402966\n.text:0000000000402968\n.text:000000000040296a\n.text:000000000040296d\n.text:0000000000402972\n.text:0000000000402977\n.text:000000000040297c\n.text:000000000040297f\n.text:0000000000402985\n.text:0000000000402987\n.text:000000000040298a\n.text:000000000040298d\n.text:0000000000402990\n.text:0000000000402992\n.text:0000000000402994\n.text:0000000000402997\n.text:000000000040299a\n.text:000000000040299f\n.text:00000000004029a2\n.text:00000000004029a4\n.text:00000000004029a7\n.text:00000000004029a9\n.text:00000000004029ae\n.text:00000000004029b1\n.text:00000000004029b6\n.text:00000000004029bc\n.text:00000000004029c2\n.text:00000000004029c4\n.text:00000000004029c9\n.text:00000000004029cf\n.text:00000000004029d2\n.text:00000000004029d5\n.text:00000000004029d8\n.text:00000000004029da\n.text:00000000004029df\n.text:00000000004029e2\n.text:00000000004029e8\n.text:00000000004029ed\n.text:00000000004029f3\n.text:00000000004029f6\n.text:00000000004029f9\n.text:00000000004029fc\n.text:0000000000402a04\n.text:0000000000402a06\n.text:0000000000402a08\n.text:0000000000402a0b\n.text:0000000000402a0f\n.text:0000000000402a11\n.text:0000000000402a14\n.text:0000000000402a18\n.text:0000000000402a1a\n.text:0000000000402a1d\n.text:0000000000402a20\n.text:0000000000402a23\n.text:0000000000402a25\n.text:0000000000402a29\n.text:0000000000402a2b\n.text:0000000000402a2f\n.text:0000000000402a32\n.text:0000000000402a35\n.text:0000000000402a38\n.text:0000000000402a3a\n.text:0000000000402a3e\n.text:0000000000402a47\n.text:0000000000402a4a\n.text:0000000000402a4c\n.text:0000000000402a50\n.text:0000000000402a52\n.text:0000000000402a56\n.text:0000000000402a58\n.text:0000000000402a5b\n.text:0000000000402a5f\n.text:0000000000402a61\n.text:0000000000402a64\n.text:0000000000402a68\n.text:0000000000402a6d\n.text:0000000000402a70\n.text:0000000000402a74\n.text:0000000000402a7c\n.text:0000000000402a7f\n.text:0000000000402a82\n.text:0000000000402a84\n.text:0000000000402a88\n.text:0000000000402a8b\n.text:0000000000402a8d\n.text:0000000000402a92\n.text:0000000000402a96\n.text:0000000000402a9b\n.text:0000000000402aa0\n.text:0000000000402aa4\n.text:0000000000402aaa\n.text:0000000000402ab0\n.text:0000000000402ab5\n.text:0000000000402abb\n.text:0000000000402ac0\n.text:0000000000402ac2\n.text:0000000000402ac7\n.text:0000000000402acb\n.text:0000000000402acd\n.text:0000000000402ad1\n.text:0000000000402ad3\n.text:0000000000402ad5\n.text:0000000000402ad8\n.text:0000000000402add\n.text:0000000000402adf\n.text:0000000000402ae4\n.text:0000000000402ae9\n.text:0000000000402aed\n.text:0000000000402af2\n.text:0000000000402af7\n.text:0000000000402afa\n.text:0000000000402afd\n.text:0000000000402aff\n.text:0000000000402b01\n.text:0000000000402b06\n.text:0000000000402b0a\n.text:0000000000402b10\n.text:0000000000402b12\n.text:0000000000402b14\n.text:0000000000402b16\n.text:0000000000402b1e\n.text:0000000000402b23\n.text:0000000000402b29\n.text:0000000000402b2b\n.text:0000000000402b30\n.text:0000000000402b36\n.text:0000000000402b3f\n.text:0000000000402b45\n.text:0000000000402b50\n.text:0000000000402b52\n.text:0000000000402b55\n.text:0000000000402b59\n.text:0000000000402b61\n.text:0000000000402b64\n.text:0000000000402b69\n.text:0000000000402b6b\n.text:0000000000402b6e\n.text:0000000000402b70\n.text:0000000000402b75\n.text:0000000000402b78\n.text:0000000000402b7d\n.text:0000000000402b80\n.text:0000000000402b85\n.text:0000000000402b89\n.text:0000000000402b8e\n.text:0000000000402b90\n.text:0000000000402b92\n.text:0000000000402b98\n.text:0000000000402b9d\n.text:0000000000402ba2\n.text:0000000000402ba5\n.text:0000000000402baa\n.text:0000000000402bae\n.text:0000000000402bb3\n.text:0000000000402bb8\n.text:0000000000402bba\n.text:0000000000402bbc\n.text:0000000000402bc1\n.text:0000000000402bc3\n.text:0000000000402bc6\n.text:0000000000402bcc\n.text:0000000000402bcf\n.text:0000000000402bd5\n.text:0000000000402bd8\n.text:0000000000402bde\n.text:0000000000402be3\n.text:0000000000402be7\n.text:0000000000402bed\n.text:0000000000402bf0\n.text:0000000000402bf3\n.text:0000000000402bf7\n.text:0000000000402bfa\n.text:0000000000402bfc\n.text:0000000000402bff\n.text:0000000000402c05\n.text:0000000000402c0a\n.text:0000000000402c0f\n.text:0000000000402c15\n.text:0000000000402c18\n.text:0000000000402c1e\n.text:0000000000402c21\n.text:0000000000402c23\n.text:0000000000402c25\n.text:0000000000402c27\n.text:0000000000402c29\n.text:0000000000402c2c\n.text:0000000000402c2e\n.text:0000000000402c33\n.text:0000000000402c38\n.text:0000000000402c3b\n.text:0000000000402c3d\n.text:0000000000402c42\n.text:0000000000402c47\n.text:0000000000402c4a\n.text:0000000000402c4c\n.text:0000000000402c51\n.text:0000000000402c55\n.text:0000000000402c58\n.text:0000000000402c5b\n.text:0000000000402c5d\n.text:0000000000402c62\n.text:0000000000402c67\n.text:0000000000402c69\n.text:0000000000402c6c\n.text:0000000000402c6f\n.text:0000000000402c75\n.text:0000000000402c79\n.text:0000000000402c7c\n.text:0000000000402c82\n.text:0000000000402c86\n.text:0000000000402c89\n.text:0000000000402c8c\n.text:0000000000402c92\n.text:0000000000402c95\n.text:0000000000402c97\n.text:0000000000402c9c\n.text:0000000000402ca1\n.text:0000000000402ca4\n.text:0000000000402ca6\n.text:0000000000402cab\n.text:0000000000402caf\n.text:0000000000402cb4\n.text:0000000000402cba\n.text:0000000000402cbf\n.text:0000000000402cc1\n.text:0000000000402cc6\n.text:0000000000402ccc\n.text:0000000000402cce\n.text:0000000000402cd0\n.text:0000000000402cd2\n.text:0000000000402cd4\n.text:0000000000402cd9\n.text:0000000000402cdf\n.text:0000000000402ce1\n.text:0000000000402ce3\n.text:0000000000402ce8\n.text:0000000000402cee\n.text:0000000000402cf0\n.text:0000000000402cf2\n.text:0000000000402cf7\n.text:0000000000402cf9\n.text:0000000000402cff\n.text:0000000000402d04\n.text:0000000000402d0a\n.text:0000000000402d0d\n.text:0000000000402d10\n.text:0000000000402d16\n.text:0000000000402d1b\n.text:0000000000402d1e\n.text:0000000000402d21\n.text:0000000000402d27\n.text:0000000000402d2a\n.text:0000000000402d30\n.text:0000000000402d33\n.text:0000000000402d35\n.text:0000000000402d3a\n.text:0000000000402d3f\n.text:0000000000402d42\n.text:0000000000402d44\n.text:0000000000402d49\n.text:0000000000402d4e\n.text:0000000000402d51\n.text:0000000000402d53\n.text:0000000000402d58\n.text:0000000000402d5c\n.text:0000000000402d5e\n.text:0000000000402d63\n.text:0000000000402d66\n.text:0000000000402d69\n.text:0000000000402d6f\n.text:0000000000402d72\n.text:0000000000402d78\n.text:0000000000402d7b\n.text:0000000000402d81\n.text:0000000000402d86\n.text:0000000000402d89\n.text:0000000000402d8f\n.text:0000000000402d92\n.text:0000000000402d98\n.text:0000000000402d9b\n.text:0000000000402d9d\n.text:0000000000402da1\n.text:0000000000402da7\n.text:0000000000402dac\n.text:0000000000402db0\n.text:0000000000402db9\n.text:0000000000402dbf\n.text:0000000000402dc4\n.text:0000000000402dc9\n.text:0000000000402dce\n.text:0000000000402dd1\n.text:0000000000402dd6\n.text:0000000000402dd9\n.text:0000000000402ddc\n.text:0000000000402de1\n.text:0000000000402de6\n.text:0000000000402dea\n.text:0000000000402def\n.text:0000000000402df4\n.text:0000000000402df8\n.text:0000000000402dfa\n.text:0000000000402dff\n.text:0000000000402e05\n.text:0000000000402e08\n.text:0000000000402e0a\n.text:0000000000402e0d\n.text:0000000000402e10\n.text:0000000000402e16\n.text:0000000000402e1b\n.text:0000000000402e1e\n.text:0000000000402e21\n.text:0000000000402e24\n.text:0000000000402e27\n.text:0000000000402e29\n.text:0000000000402e2d\n.text:0000000000402e2f\n.text:0000000000402e34\n.text:0000000000402e39\n.text:0000000000402e3f\n.text:0000000000402e50\n.text:0000000000402e55\n.text:0000000000402e57\n.text:0000000000402e5a\n.text:0000000000402e5c\n.text:0000000000402e5f\n.text:0000000000402e61\n.text:0000000000402e64\n.text:0000000000402e66\n.text:0000000000402e6b\n.text:0000000000402e70\n.text:0000000000402e73\n.text:0000000000402e75\n.text:0000000000402e7a\n.text:0000000000402e7e\n.text:0000000000402e86\n.text:0000000000402e89\n.text:0000000000402e8c\n.text:0000000000402e8e\n.text:0000000000402e92\n.text:0000000000402ea0\n.text:0000000000402ea4\n.text:0000000000402eaa\n.text:0000000000402ead\n.text:0000000000402eaf\n.text:0000000000402eb4\n.text:0000000000402eb7\n.text:0000000000402eb9\n.text:0000000000402ec0\n.text:0000000000402ec3\n.text:0000000000402ec8\n.text:0000000000402ecb\n.text:0000000000402ed0\n.text:0000000000402ed2\n.text:0000000000402ed5\n.text:0000000000402edb\n.text:0000000000402ede\n.text:0000000000402ee0\n.text:0000000000402ee4\n.text:0000000000402ee6\n.text:0000000000402ee8\n.text:0000000000402eeb\n.text:0000000000402eed\n.text:0000000000402ef2\n.text:0000000000402ef7\n.text:0000000000402efa\n.text:0000000000402efc\n.text:0000000000402f01\n.text:0000000000402f06\n.text:0000000000402f09\n.text:0000000000402f0b\n.text:0000000000402f10\n.text:0000000000402f14\n.text:0000000000402f16\n.text:0000000000402f1a\n.text:0000000000402f1d\n.text:0000000000402f1f\n.text:0000000000402f24\n.text:0000000000402f29\n.text:0000000000402f2c\n.text:0000000000402f2e\n.text:0000000000402f31\n.text:0000000000402f34\n.text:0000000000402f37\n.text:0000000000402f3b\n.text:0000000000402f40\n.text:0000000000402f43\n.text:0000000000402f45\n.text:0000000000402f48\n.text:0000000000402f4b\n.text:0000000000402f4e\n.text:0000000000402f51\n.text:0000000000402f55\n.text:0000000000402f59\n.text:0000000000402f5d\n.text:0000000000402f61\n.text:0000000000402f63\n.text:0000000000402f67\n.text:0000000000402f6a\n.text:0000000000402f70\n.text:0000000000402f74\n.text:0000000000402f78\n.text:0000000000402f7e\n.text:0000000000402f83\n.text:0000000000402f86\n.text:0000000000402f89\n.text:0000000000402f8e\n.text:0000000000402f91\n.text:0000000000402f93\n.text:0000000000402f96\n.text:0000000000402f9d\n.text:0000000000402fa3\n.text:0000000000402fa5\n.text:0000000000402fa9\n.text:0000000000402faf\n.text:0000000000402fb4\n.text:0000000000402fb9\n.text:0000000000402fbf\n.text:0000000000402fc2\n.text:0000000000402fc4\n.text:0000000000402fc9\n.text:0000000000402fcf\n.text:0000000000402fd4\n.text:0000000000402fd6\n.text:0000000000402fdb\n.text:0000000000402fe1\n.text:0000000000402fe3\n.text:0000000000402fe6\n.text:0000000000402fea\n.text:0000000000402ff0\n.text:0000000000402ff5\n.text:0000000000403001\n.text:0000000000403005\n.text:0000000000403007\n.text:000000000040300a\n.text:000000000040300f\n.text:0000000000403014\n.text:0000000000403017\n.text:000000000040301b\n.text:0000000000403020\n.text:0000000000403022\n.text:0000000000403026\n.text:0000000000403028\n.text:0000000000403030\n.text:0000000000403035\n.text:000000000040303a\n.text:000000000040303e\n.text:0000000000403042\n.text:000000000040304a\n.text:000000000040304d\n.text:0000000000403052\n.text:0000000000403055\n.text:0000000000403058\n.text:000000000040305d\n.text:0000000000403060\n.text:0000000000403063\n.text:0000000000403069\n.text:000000000040306d\n.text:0000000000403077\n.text:000000000040307d\n.text:0000000000403081\n.text:0000000000403086\n.text:000000000040308c\n.text:0000000000403090\n.text:0000000000403093\n.text:0000000000403097\n.text:0000000000403099\n.text:000000000040309e\n.text:00000000004030a3\n.text:00000000004030a7\n.text:00000000004030a9\n.text:00000000004030ae\n.text:00000000004030b3\n.text:00000000004030b7\n.text:00000000004030bc\n.text:00000000004030c0\n.text:00000000004030c4\n.text:00000000004030c7\n.text:00000000004030ca\n.text:00000000004030cc\n.text:00000000004030d0\n.text:00000000004030d6\n.text:00000000004030d9\n.text:00000000004030dc\n.text:00000000004030de\n.text:00000000004030e2\n.text:00000000004030e7\n.text:00000000004030e9\n.text:00000000004030eb\n.text:00000000004030f3\n.text:00000000004030f8\n.text:00000000004030fb\n.text:0000000000403103\n.text:0000000000403106\n.text:0000000000403109\n.text:000000000040310e\n.text:0000000000403111\n.text:0000000000403113\n.text:0000000000403118\n.text:000000000040311d\n.text:0000000000403123\n.text:0000000000403128\n.text:000000000040312b\n.text:0000000000403130\n.text:0000000000403136\n.text:000000000040313b\n.text:0000000000403140\n.text:0000000000403146\n.text:000000000040314a\n.text:000000000040314d\n.text:0000000000403153\n.text:0000000000403159\n.text:000000000040315f\n.text:0000000000403164\n.text:0000000000403166\n.text:0000000000403169\n.text:000000000040316f\n.text:0000000000403173\n.text:0000000000403175\n.text:000000000040317f\n.text:0000000000403183\n.text:0000000000403189\n.text:000000000040318c\n.text:000000000040318e\n.text:0000000000403194\n.text:0000000000403197\n.text:0000000000403199\n.text:000000000040319e\n.text:00000000004031a3\n.text:00000000004031a6\n.text:00000000004031aa\n.text:00000000004031ac\n.text:00000000004031b1\n.text:00000000004031b6\n.text:00000000004031b9\n.text:00000000004031bb\n.text:00000000004031c0\n.text:00000000004031c5\n.text:00000000004031c8\n.text:00000000004031ca\n.text:00000000004031cf\n.text:00000000004031d3\n.text:00000000004031d5\n.text:00000000004031d8\n.text:00000000004031db\n.text:00000000004031e0\n.text:00000000004031e6\n.text:00000000004031e8\n.text:00000000004031ed\n.text:00000000004031f2\n.text:00000000004031f8\n.text:0000000000403200\n.text:0000000000403205\n.text:0000000000403207\n.text:000000000040320c\n.text:000000000040320f\n.text:0000000000403211\n.text:0000000000403214\n.text:0000000000403216\n.text:0000000000403219\n.text:000000000040321c\n.text:000000000040321f\n.text:0000000000403221\n.text:0000000000403229\n.text:000000000040322c\n.text:000000000040322e\n.text:0000000000403230\n.text:0000000000403240\n.text:0000000000403243\n.text:0000000000403245\n.text:0000000000403248\n.text:000000000040324e\n.text:0000000000403251\n.text:0000000000403253\n.text:0000000000403255\n.text:0000000000403257\n.text:0000000000403259\n.text:000000000040325c\n.text:000000000040325e\n.text:0000000000403263\n.text:0000000000403268\n.text:000000000040326b\n.text:000000000040326d\n.text:0000000000403272\n.text:0000000000403277\n.text:000000000040327a\n.text:000000000040327c\n.text:0000000000403281\n.text:0000000000403285\n.text:0000000000403288\n.text:000000000040328b\n.text:000000000040328d\n.text:0000000000403292\n.text:0000000000403295\n.text:0000000000403298\n.text:000000000040329a\n.text:00000000004032a0\n.text:00000000004032a4\n.text:00000000004032a6\n.text:00000000004032a8\n.text:00000000004032aa\n.text:00000000004032ad\n.text:00000000004032af\n.text:00000000004032b4\n.text:00000000004032b9\n.text:00000000004032bc\n.text:00000000004032be\n.text:00000000004032c3\n.text:00000000004032c7\n.text:00000000004032c9\n.text:00000000004032cc\n.text:00000000004032ce\n.text:00000000004032d2\n.text:00000000004032d5\n.text:00000000004032d8\n.text:00000000004032dc\n.text:00000000004032e2\n.text:00000000004032e7\n.text:00000000004032ef\n.text:00000000004032f4\n.text:00000000004032f6\n.text:00000000004032fe\n.text:0000000000403303\n.text:0000000000403305\n.text:000000000040330a\n.text:000000000040330f\n.text:0000000000403313\n.text:0000000000403315\n.text:000000000040331a\n.text:000000000040331d\n.text:0000000000403320\n.text:0000000000403322\n.text:000000000040332a\n.text:000000000040332c\n.text:0000000000403334\n.text:0000000000403339\n.text:000000000040333d\n.text:0000000000403342\n.text:0000000000403347\n.text:000000000040334b\n.text:0000000000403350\n.text:0000000000403355\n.text:0000000000403359\n.text:000000000040335d\n.text:0000000000403363\n.text:0000000000403368\n.text:0000000000403370\n.text:0000000000403372\n.text:0000000000403374\n.text:0000000000403378\n.text:000000000040337d\n.text:0000000000403383\n.text:0000000000403390\n.text:0000000000403393\n.text:0000000000403399\n.text:000000000040339c\n.text:000000000040339e\n.text:00000000004033a1\n.text:00000000004033a3\n.text:00000000004033a6\n.text:00000000004033a8\n.text:00000000004033b0\n.text:00000000004033b6\n.text:00000000004033ba\n.text:00000000004033bd\n.text:00000000004033c1\n.text:00000000004033c6\n.text:00000000004033ca\n.text:00000000004033ce\n.text:00000000004033d1\n.text:00000000004033d4\n.text:00000000004033d7\n.text:00000000004033db\n.text:00000000004033df\n.text:00000000004033e1\n.text:00000000004033e6\n.text:00000000004033ea\n.text:00000000004033ed\n.text:00000000004033f0\n.text:00000000004033f7\n.text:00000000004033f8\n.text:00000000004033fa\n.text:00000000004033fc\n.text:00000000004033fe\n.text:0000000000403400\n.text:0000000000403401\n.text:0000000000403402\n.text:000000000040340a\n.text:000000000040340d\n.text:000000000040340f\n.text:0000000000403412\n.text:0000000000403414\n.text:0000000000403416\n.text:0000000000403418\n.text:000000000040341a\n.text:000000000040341d\n.text:0000000000403420\n.text:0000000000403423\n.text:0000000000403425\n.text:0000000000403429\n.text:000000000040342c\n.text:000000000040342f\n.text:0000000000403432\n.text:0000000000403434\n.text:0000000000403436\n.text:0000000000403439\n.text:000000000040343b\n.text:0000000000403440\n.text:0000000000403442\n.text:0000000000403447\n.text:000000000040344c\n.text:000000000040344f\n.text:0000000000403451\n.text:0000000000403456\n.text:0000000000403459\n.text:000000000040345e\n.text:0000000000403461\n.text:0000000000403467\n.text:000000000040346d\n.text:0000000000403470\n.text:0000000000403475\n'
p132
tp133
sS'mode_compile'
p134
(S'\n__stdcall mode_compile(char * mode_string)\n'
p135
V\u000amode_change * mode_compile(char *mode_string)\u000a\u000a{\u000a  byte *pbVar1;\u000a  char cVar2;\u000a  byte bVar3;\u000a  char cVar4;\u000a  uint uVar5;\u000a  uint uVar6;\u000a  mode_change *__ptr;\u000a  char *pcVar7;\u000a  uint uVar8;\u000a  long lVar9;\u000a  char cVar10;\u000a  mode_t mVar11;\u000a  size_t n;\u000a  long lVar12;\u000a  undefined auStack56 [8];\u000a  \u000a  if ((*mode_string & 0xf8U) == 0x30) {\u000a    uVar8 = 0;\u000a    do {\u000a      uVar8 = (int)*mode_string + -0x30 + uVar8 * 8;\u000a      if (0xfff < uVar8) {\u000a        return (mode_change *)0x0;\u000a      }\u000a      pbVar1 = (byte *)(mode_string + 1);\u000a      mode_string = mode_string + 1;\u000a    } while ((*pbVar1 & 0xf8) == 0x30);\u000a    if (*pbVar1 != 0) {\u000a      return (mode_change *)0x0;\u000a    }\u000a    octal_to_mode();\u000a    __ptr = make_node_op_equals();\u000a    return __ptr;\u000a  }\u000a  n = 1;\u000a  pcVar7 = mode_string;\u000a  do {\u000a    cVar2 = *pcVar7;\u000a    if (cVar2 < '-') {\u000a      lVar9 = 1;\u000a      if (cVar2 != '+') {\u000a        if (cVar2 == 0) break;\u000aLAB_0040221e:\u000a        lVar9 = 0;\u000a      }\u000a    }\u000a    else {\u000a      if (cVar2 == '-') {\u000a        lVar9 = 1;\u000a      }\u000a      else {\u000a        lVar9 = 1;\u000a        if (cVar2 != '=') goto LAB_0040221e;\u000a      }\u000a    }\u000a    n = n + lVar9;\u000a    pcVar7 = pcVar7 + 1;\u000a  } while( true );\u000a  __ptr = (mode_change *)xnmalloc(n,0x10);\u000a  lVar9 = 0;\u000aLAB_00402260:\u000a  uVar8 = 0;\u000a  while (uVar5 = SEXT14(*mode_string), uVar5 - 0x61 < 0x15) {\u000a    uVar6 = 0x438;\u000a    switch(uVar5) {\u000a    case 0x61:\u000a      uVar6 = 0xfff;\u000a      break;\u000a    default:\u000a      goto switchD_00402286_caseD_62;\u000a    case 0x67:\u000a      break;\u000a    case 0x6f:\u000a      uVar6 = 0x207;\u000a      break;\u000a    case 0x75:\u000a      uVar6 = 0x9c0;\u000a    }\u000a    uVar8 = uVar8 | uVar6;\u000a    mode_string = mode_string + 1;\u000a  }\u000a  if ((0x3d < uVar5) || (lVar12 = lVar9, ((ulong)auStack56 >> ((ulong)uVar5 & 0x1f) & 1) == 0)) {\u000aswitchD_00402286_caseD_62:\u000a    free(__ptr);\u000a    return (mode_change *)0x0;\u000a  }\u000aswitchD_0040241b_caseD_2b:\u000a  pcVar7 = mode_string + 1;\u000a  cVar2 = *mode_string;\u000a  switch(mode_string[1]) {\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a    uVar5 = 0;\u000a    do {\u000a      uVar5 = (int)*pcVar7 + -0x30 + uVar5 * 8;\u000a      if (0xfff < uVar5) goto switchD_00402286_caseD_62;\u000a      bVar3 = pcVar7[1];\u000a      pcVar7 = pcVar7 + 1;\u000a    } while ((bVar3 & 0xf8) == 0x30);\u000a    if ((uVar8 == 0) && ((bVar3 == 0x2c || (bVar3 == 0)))) {\u000a      uVar5 = octal_to_mode();\u000a      cVar10 = 1;\u000a      uVar8 = 0xfff;\u000a      mVar11 = 0xfff;\u000a      break;\u000a    }\u000a    goto switchD_00402286_caseD_62;\u000a  default:\u000a    cVar10 = 1;\u000a    uVar5 = 0;\u000a    do {\u000a      cVar4 = 2;\u000a      switch(*pcVar7) {\u000a      case 'r':\u000a        uVar5 = uVar5 | 0x124;\u000a        cVar4 = cVar10;\u000a        break;\u000a      case 's':\u000a        uVar5 = uVar5 | 0xc00;\u000a        cVar4 = cVar10;\u000a        break;\u000a      case 't':\u000a        uVar5 = uVar5 | 0x200;\u000a        cVar4 = cVar10;\u000a        break;\u000a      case 'w':\u000a        uVar5 = uVar5 | 0x92;\u000a        cVar4 = cVar10;\u000a        break;\u000a      case 'x':\u000a        uVar5 = uVar5 | 0x49;\u000a        cVar4 = cVar10;\u000a        break;\u000a      default:\u000a        goto switchD_00402372_caseD_59;\u000a      case 'X':\u000a        break;\u000a      }\u000a      cVar10 = cVar4;\u000a      pcVar7 = pcVar7 + 1;\u000a    } while( true );\u000a  case 'g':\u000a    pcVar7 = mode_string + 2;\u000a    cVar10 = 3;\u000a    mVar11 = 0;\u000a    uVar5 = 0x38;\u000a    break;\u000a  case 'o':\u000a    pcVar7 = mode_string + 2;\u000a    cVar10 = 3;\u000a    mVar11 = 0;\u000a    uVar5 = 7;\u000a    break;\u000a  case 'u':\u000a    pcVar7 = mode_string + 2;\u000a    cVar10 = 3;\u000a    mVar11 = 0;\u000a    uVar5 = 0x1c0;\u000a  }\u000a  goto LAB_004023e0;\u000aswitchD_00402372_caseD_59:\u000a  mVar11 = 0;\u000aLAB_004023e0:\u000a  __ptr[lVar12].op = cVar2;\u000a  __ptr[lVar12].flag = cVar10;\u000a  __ptr[lVar12].affected = uVar8;\u000a  __ptr[lVar12].value = uVar5;\u000a  if (mVar11 == 0) {\u000a    mVar11 = (-(uint)(uVar8 == 0) | uVar8) & uVar5;\u000a  }\u000a  lVar9 = lVar12 + 1;\u000a  __ptr[lVar12].mentioned = mVar11;\u000a  mode_string = pcVar7;\u000a  lVar12 = lVar9;\u000a  switch(*pcVar7) {\u000a  case '+':\u000a  case '-':\u000a  case '=':\u000a    goto switchD_0040241b_caseD_2b;\u000a  case ',':\u000a    break;\u000a  default:\u000a    if (*pcVar7 == 0) {\u000a      __ptr[lVar9].flag = 0;\u000a      return __ptr;\u000a    }\u000a    goto switchD_00402286_caseD_62;\u000a  }\u000a  mode_string = pcVar7 + 1;\u000a  goto LAB_00402260;\u000a}\u000a\u000a
p136
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBP,RDI\nMOV AL,byte ptr [RBP]\nAND AL,0xf8\nCMP AL,0x30\nJNZ 0x004021e3\nXOR R14D,R14D\nXOR EDI,EDI\nMOV RBX,RBP\nNOP\nMOVSX EAX,byte ptr [RBX]\nLEA EDI,[RAX + RDI*0x8 + -0x30]\nCMP EDI,0xfff\nJA 0x00402433\nMOVZX EAX,byte ptr [RBX + 0x1]\nINC RBX\nMOV ECX,EAX\nAND CL,0xf8\nCMP CL,0x30\nJZ 0x00402180\nTEST AL,AL\nJNZ 0x00402430\nCALL 0x00402460\nSUB RBX,RBP\nMOV ECX,EAX\nAND ECX,0xc00\nOR ECX,0x3ff\nCMP RBX,0x5\nMOV ESI,0xfff\nCMOVL ESI,ECX\nMOV EDI,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402470\nMOV EDI,0x1\nMOV RAX,RBP\nJMP 0x004021f6\nADD RDI,RDX\nINC RAX\nMOVZX ECX,byte ptr [RAX]\nCMP CL,0x2c\nJLE 0x00402210\nCMP CL,0x2d\nJZ 0x00402230\nCMP CL,0x3d\nMOV EDX,0x1\nJZ 0x004021f0\nJMP 0x0040221e\nCMP CL,0x2b\nMOV EDX,0x1\nJZ 0x004021f0\nTEST CL,CL\nJZ 0x00402237\nXOR EDX,EDX\nJMP 0x004021f0\nMOV EDX,0x1\nJMP 0x004021f0\nMOV ESI,0x10\nCALL 0x00404420\nMOV R14,RAX\nXOR R15D,R15D\nMOV R12,0x2000280000000000\nJMP 0x00402260\nINC RBP\nNOP word ptr CS:[RAX + RAX*0x1]\nXOR ECX,ECX\nJMP 0x00402275\nOR ECX,EAX\nINC RBP\nMOVSX EAX,byte ptr [RBP]\nLEA EDX,[RAX + -0x61]\nCMP EDX,0x14\nJA 0x004022c0\nMOV EAX,0x438\nJMP qword ptr [0x405a20 + RDX*0x8]\nMOV EAX,0xfff\nJMP 0x00402270\nMOV EAX,0x207\nJMP 0x00402270\nMOV EAX,0x9c0\nJMP 0x00402270\nCMP EAX,0x3d\nJA 0x00402428\nMOV EAX,EAX\nBT RSP,RAX\nJNC 0x00402428\nLEA RSI,[RBP + 0x1]\nMOV R13B,byte ptr [RBP]\nMOVSX EAX,byte ptr [RBP + 0x1]\nADD EAX,-0x30\nCMP EAX,0x45\nJA 0x0040234f\nJMP qword ptr [0x405ac8 + RAX*0x8]\nXOR EDI,EDI\nMOV RBP,RSI\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RBP]\nLEA EDI,[RAX + RDI*0x8 + -0x30]\nCMP EDI,0xfff\nJA 0x00402428\nMOVZX EAX,byte ptr [RBP + 0x1]\nINC RBP\nMOV EDX,EAX\nAND DL,0xf8\nCMP DL,0x30\nJZ 0x00402300\nTEST ECX,ECX\nJNZ 0x00402428\nCMP AL,0x2c\nJZ 0x00402339\nTEST AL,AL\nJNZ 0x00402428\nCALL 0x00402460\nMOV BL,0x1\nMOV ECX,0xfff\nMOV EDI,0xfff\nJMP 0x004023e0\nMOV BL,0x1\nXOR EAX,EAX\nJMP 0x00402365\nINC RSI\nMOV EBX,EDX\nMOVSX EDI,byte ptr [RSI]\nADD EDI,-0x58\nCMP EDI,0x20\nJA 0x004023d1\nMOV DL,0x2\nJMP qword ptr [0x405cf8 + RDI*0x8]\nOR EAX,0x124\nJMP 0x004023a0\nOR EAX,0xc00\nJMP 0x004023a0\nOR EAX,0x200\nJMP 0x004023a0\nOR EAX,0x92\nJMP 0x004023a0\nOR EAX,0x49\nNOP dword ptr [RAX + RAX*0x1]\nMOV EDX,EBX\nJMP 0x00402360\nADD RBP,0x2\nMOV BL,0x3\nXOR EDI,EDI\nMOV EAX,0x38\nJMP 0x004023e0\nADD RBP,0x2\nMOV BL,0x3\nXOR EDI,EDI\nMOV EAX,0x7\nJMP 0x004023e0\nADD RBP,0x2\nMOV BL,0x3\nXOR EDI,EDI\nMOV EAX,0x1c0\nJMP 0x004023e0\nXOR EDI,EDI\nMOV RBP,RSI\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,R15\nSHL RSI,0x4\nMOV byte ptr [R14 + RSI*0x1],R13B\nMOV byte ptr [R14 + RSI*0x1 + 0x1],BL\nMOV dword ptr [R14 + RSI*0x1 + 0x4],ECX\nMOV dword ptr [R14 + RSI*0x1 + 0x8],EAX\nTEST EDI,EDI\nJNZ 0x00402407\nCMP ECX,0x1\nSBB EDI,EDI\nOR EDI,ECX\nAND EDI,EAX\nINC R15\nMOV dword ptr [R14 + RSI*0x1 + 0xc],EDI\nMOV AL,byte ptr [RBP]\nADD AL,0xd5\nCMP AL,0x12\nJA 0x00402422\nMOVZX EAX,AL\nJMP qword ptr [0x405e00 + RAX*0x8]\nCMP byte ptr [RBP],0x0\nJZ 0x00402445\nMOV RDI,R14\nCALL 0x00401320\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nSHL R15,0x4\nMOV byte ptr [R14 + R15*0x1 + 0x1],0x0\nJMP 0x00402433\n'
p137
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 fd\n8a 45 00\n24 f8\n3c 30\n75 6c\n45 31 f6\n31 ff\n48 89 eb\n90\n0f be 03\n8d 7c f8 d0\n81 ff ff 0f 00 00\n0f 87 a0 02 00 00\n0f b6 43 01\n48 ff c3\n89 c1\n80 e1 f8\n80 f9 30\n74 dc\n84 c0\n0f 85 84 02 00 00\ne8 af 02 00 00\n48 29 eb\n89 c1\n81 e1 00 0c 00 00\n81 c9 ff 03 00 00\n48 83 fb 05\nbe ff 0f 00 00\n0f 4c f1\n89 c7\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 8d 02 00 00\nbf 01 00 00 00\n48 89 e8\neb 09\n48 01 d7\n48 ff c0\n0f b6 08\n80 f9 2c\n7e 12\n80 f9 2d\n74 2d\n80 f9 3d\nba 01 00 00 00\n74 e3\neb 0f\n80 f9 2b\nba 01 00 00 00\n74 d6\n84 c9\n74 19\n31 d2\neb ce\nba 01 00 00 00\neb b9\nbe 10 00 00 00\ne8 df 21 00 00\n49 89 c6\n45 31 ff\n49 bc 00 00 00 00 00 28 00 20\neb 0d\n48 ff c5\n66 2e 0f 1f 84 00 00 00 00 00\n31 c9\neb 11\n09 c1\n48 ff c5\n0f be 45 00\n8d 50 9f\n83 fa 14\n77 3f\nb8 38 04 00 00\nff 24 d5 20 5a 40 00\nb8 ff 0f 00 00\neb dc\nb8 07 02 00 00\neb c9\nb8 c0 09 00 00\neb b9\n83 f8 3d\n0f 87 5f 01 00 00\n89 c0\n49 0f a3 c4\n0f 83 53 01 00 00\n48 8d 75 01\n44 8a 6d 00\n0f be 45 01\n83 c0 d0\n83 f8 45\n77 66\nff 24 c5 c8 5a 40 00\n31 ff\n48 89 f5\n66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 45 00\n8d 7c f8 d0\n81 ff ff 0f 00 00\n0f 87 14 01 00 00\n0f b6 45 01\n48 ff c5\n89 c2\n80 e2 f8\n80 fa 30\n74 db\n85 c9\n0f 85 fb 00 00 00\n3c 2c\n74 08\n84 c0\n0f 85 ef 00 00 00\ne8 22 01 00 00\nb3 01\nb9 ff 0f 00 00\nbf ff 0f 00 00\ne9 91 00 00 00\nb3 01\n31 c0\neb 10\n48 ff c6\n89 d3\n0f be 3e\n83 c7 a8\n83 ff 20\n77 61\nb2 02\nff 24 fd f8 5c 40 00\n0d 24 01 00 00\neb 20\n0d 00 0c 00 00\neb 19\n0d 00 02 00 00\neb 12\n0d 92 00 00 00\neb 0b\n83 c8 49\n0f 1f 84 00 00 00 00 00\n89 da\neb bc\n48 83 c5 02\nb3 03\n31 ff\nb8 38 00 00 00\neb 2d\n48 83 c5 02\nb3 03\n31 ff\nb8 07 00 00 00\neb 1e\n48 83 c5 02\nb3 03\n31 ff\nb8 c0 01 00 00\neb 0f\n31 ff\n48 89 f5\n66 2e 0f 1f 84 00 00 00 00 00\n4c 89 fe\n48 c1 e6 04\n45 88 2c 36\n41 88 5c 36 01\n41 89 4c 36 04\n41 89 44 36 08\n85 ff\n75 09\n83 f9 01\n19 ff\n09 cf\n21 c7\n49 ff c7\n41 89 7c 36 0c\n8a 45 00\n04 d5\n3c 12\n77 0a\n0f b6 c0\nff 24 c5 00 5e 40 00\n80 7d 00 00\n74 1d\n4c 89 f7\ne8 f0 ee ff ff\n45 31 f6\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 c1 e7 04\n43 c6 44 3e 01 00\neb e2\n'
p138
S'.text:0000000000402160\n.text:0000000000402161\n.text:0000000000402163\n.text:0000000000402165\n.text:0000000000402167\n.text:0000000000402169\n.text:000000000040216a\n.text:000000000040216b\n.text:000000000040216e\n.text:0000000000402171\n.text:0000000000402173\n.text:0000000000402175\n.text:0000000000402177\n.text:000000000040217a\n.text:000000000040217c\n.text:000000000040217f\n.text:0000000000402180\n.text:0000000000402183\n.text:0000000000402187\n.text:000000000040218d\n.text:0000000000402193\n.text:0000000000402197\n.text:000000000040219a\n.text:000000000040219c\n.text:000000000040219f\n.text:00000000004021a2\n.text:00000000004021a4\n.text:00000000004021a6\n.text:00000000004021ac\n.text:00000000004021b1\n.text:00000000004021b4\n.text:00000000004021b6\n.text:00000000004021bc\n.text:00000000004021c2\n.text:00000000004021c6\n.text:00000000004021cb\n.text:00000000004021ce\n.text:00000000004021d0\n.text:00000000004021d4\n.text:00000000004021d5\n.text:00000000004021d7\n.text:00000000004021d9\n.text:00000000004021db\n.text:00000000004021dd\n.text:00000000004021de\n.text:00000000004021e3\n.text:00000000004021e8\n.text:00000000004021eb\n.text:00000000004021f0\n.text:00000000004021f3\n.text:00000000004021f6\n.text:00000000004021f9\n.text:00000000004021fc\n.text:00000000004021fe\n.text:0000000000402201\n.text:0000000000402203\n.text:0000000000402206\n.text:000000000040220b\n.text:000000000040220d\n.text:0000000000402210\n.text:0000000000402213\n.text:0000000000402218\n.text:000000000040221a\n.text:000000000040221c\n.text:000000000040221e\n.text:0000000000402220\n.text:0000000000402230\n.text:0000000000402235\n.text:0000000000402237\n.text:000000000040223c\n.text:0000000000402241\n.text:0000000000402244\n.text:0000000000402247\n.text:0000000000402251\n.text:0000000000402253\n.text:0000000000402256\n.text:0000000000402260\n.text:0000000000402262\n.text:0000000000402270\n.text:0000000000402272\n.text:0000000000402275\n.text:0000000000402279\n.text:000000000040227c\n.text:000000000040227f\n.text:0000000000402281\n.text:0000000000402286\n.text:000000000040228d\n.text:0000000000402292\n.text:00000000004022a0\n.text:00000000004022a5\n.text:00000000004022b0\n.text:00000000004022b5\n.text:00000000004022c0\n.text:00000000004022c3\n.text:00000000004022c9\n.text:00000000004022cb\n.text:00000000004022cf\n.text:00000000004022d5\n.text:00000000004022d9\n.text:00000000004022dd\n.text:00000000004022e1\n.text:00000000004022e4\n.text:00000000004022e7\n.text:00000000004022e9\n.text:00000000004022f0\n.text:00000000004022f2\n.text:00000000004022f5\n.text:0000000000402300\n.text:0000000000402304\n.text:0000000000402308\n.text:000000000040230e\n.text:0000000000402314\n.text:0000000000402318\n.text:000000000040231b\n.text:000000000040231d\n.text:0000000000402320\n.text:0000000000402323\n.text:0000000000402325\n.text:0000000000402327\n.text:000000000040232d\n.text:000000000040232f\n.text:0000000000402331\n.text:0000000000402333\n.text:0000000000402339\n.text:000000000040233e\n.text:0000000000402340\n.text:0000000000402345\n.text:000000000040234a\n.text:000000000040234f\n.text:0000000000402351\n.text:0000000000402353\n.text:0000000000402360\n.text:0000000000402363\n.text:0000000000402365\n.text:0000000000402368\n.text:000000000040236b\n.text:000000000040236e\n.text:0000000000402370\n.text:0000000000402372\n.text:0000000000402379\n.text:000000000040237e\n.text:0000000000402380\n.text:0000000000402385\n.text:0000000000402387\n.text:000000000040238c\n.text:000000000040238e\n.text:0000000000402393\n.text:0000000000402395\n.text:0000000000402398\n.text:00000000004023a0\n.text:00000000004023a2\n.text:00000000004023a4\n.text:00000000004023a8\n.text:00000000004023aa\n.text:00000000004023ac\n.text:00000000004023b1\n.text:00000000004023b3\n.text:00000000004023b7\n.text:00000000004023b9\n.text:00000000004023bb\n.text:00000000004023c0\n.text:00000000004023c2\n.text:00000000004023c6\n.text:00000000004023c8\n.text:00000000004023ca\n.text:00000000004023cf\n.text:00000000004023d1\n.text:00000000004023d3\n.text:00000000004023d6\n.text:00000000004023e0\n.text:00000000004023e3\n.text:00000000004023e7\n.text:00000000004023eb\n.text:00000000004023f0\n.text:00000000004023f5\n.text:00000000004023fa\n.text:00000000004023fc\n.text:00000000004023fe\n.text:0000000000402401\n.text:0000000000402403\n.text:0000000000402405\n.text:0000000000402407\n.text:000000000040240a\n.text:000000000040240f\n.text:0000000000402412\n.text:0000000000402414\n.text:0000000000402416\n.text:0000000000402418\n.text:000000000040241b\n.text:0000000000402422\n.text:0000000000402426\n.text:0000000000402428\n.text:000000000040242b\n.text:0000000000402430\n.text:0000000000402433\n.text:0000000000402436\n.text:000000000040243a\n.text:000000000040243b\n.text:000000000040243d\n.text:000000000040243f\n.text:0000000000402441\n.text:0000000000402443\n.text:0000000000402444\n.text:0000000000402445\n.text:0000000000402449\n.text:000000000040244f\n'
p139
tp140
sS'set_quoting_style'
p141
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p142
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p143
S'TEST RDI,RDI\nMOV EAX,0x6092d0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p144
S'48 85 ff\nb8 d0 92 60 00\n48 0f 45 c7\n89 30\nc3\n'
p145
S'.text:0000000000402720\n.text:0000000000402723\n.text:0000000000402728\n.text:000000000040272c\n.text:000000000040272e\n'
p146
tp147
sS'quotearg_n_style_colon'
p148
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p149
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p150
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00403850\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00402730\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00403620\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p151
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p152
S'.text:00000000004039d0\n.text:00000000004039d1\n.text:00000000004039d3\n.text:00000000004039d4\n.text:00000000004039d8\n.text:00000000004039db\n.text:00000000004039dd\n.text:00000000004039e2\n.text:00000000004039e5\n.text:00000000004039ea\n.text:00000000004039ef\n.text:00000000004039f4\n.text:00000000004039f7\n.text:00000000004039fc\n.text:0000000000403a03\n.text:0000000000403a05\n.text:0000000000403a08\n.text:0000000000403a0b\n.text:0000000000403a10\n.text:0000000000403a14\n.text:0000000000403a15\n.text:0000000000403a17\n.text:0000000000403a18\n'
p153
tp154
sS'textdomain'
p155
(S'\n__stdcall textdomain()\n'
p156
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00609060)();\u000a  return;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x00609060]\n'
p158
S'ff 25 ba 7c 20 00\n'
p159
S'.plt:00000000004013a0\n'
p160
tp161
sS'xmemdup'
p162
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p163
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p164
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00404440\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401500\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p165
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 5c cf ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p166
S'.text:0000000000404580\n.text:0000000000404582\n.text:0000000000404584\n.text:0000000000404585\n.text:0000000000404588\n.text:000000000040458b\n.text:000000000040458e\n.text:0000000000404593\n.text:0000000000404596\n.text:0000000000404599\n.text:000000000040459c\n.text:000000000040459f\n.text:00000000004045a4\n.text:00000000004045a7\n.text:00000000004045a8\n.text:00000000004045aa\n.text:00000000004045ac\n'
p167
tp168
sS'get_quoting_style'
p169
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p170
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p171
S'TEST RDI,RDI\nMOV EAX,0x6092d0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p172
S'48 85 ff\nb8 d0 92 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p173
S'.text:0000000000402710\n.text:0000000000402713\n.text:0000000000402718\n.text:000000000040271c\n.text:000000000040271e\n'
p174
tp175
sS'ferror_unlocked'
p176
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p177
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_006090e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p178
S'JMP qword ptr [0x006090e8]\n'
p179
S'ff 25 32 7c 20 00\n'
p180
S'.plt:00000000004014b0\n'
p181
tp182
sS'exit'
p183
(S'\n__stdcall exit(int __status)\n'
p184
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006091a8)();\u000a  return;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x006091a8]\n'
p186
S'ff 25 72 7b 20 00\n'
p187
S'.plt:0000000000401630\n'
p188
tp189
sS'quote_mem'
p190
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p191
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p192
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403ae0\n'
p193
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p194
S'.text:0000000000403af0\n.text:0000000000403af3\n.text:0000000000403af6\n.text:0000000000403af8\n.text:0000000000403afb\n.text:0000000000403afe\n'
p195
tp196
sS'locale_charset'
p197
(S'\n__stdcall locale_charset()\n'
p198
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00404b9d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00404b9d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p199
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401560\nTEST RAX,RAX\nMOV R14D,0x406559\nCMOVNZ R14,RAX\nCALL 0x00404bb0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00404b75\nJMP 0x00404b9d\nMOV RDI,RBX\nCALL 0x004013f0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004013f0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00404b9d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004014d0\nTEST EAX,EAX\nJZ 0x00404b90\nCMP BPL,0x2a\nJNZ 0x00404b50\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00404b50\nMOV RDI,RBX\nCALL 0x004013f0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x406df0\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p200
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 32 ca ff ff\n48 85 c0\n41 be 59 65 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 98 c8 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 8a c8 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 50 c9 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 58 c8 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 f0 6d 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p201
S'.text:0000000000404b20\n.text:0000000000404b21\n.text:0000000000404b23\n.text:0000000000404b24\n.text:0000000000404b29\n.text:0000000000404b2e\n.text:0000000000404b31\n.text:0000000000404b37\n.text:0000000000404b3b\n.text:0000000000404b40\n.text:0000000000404b43\n.text:0000000000404b46\n.text:0000000000404b49\n.text:0000000000404b4b\n.text:0000000000404b50\n.text:0000000000404b53\n.text:0000000000404b58\n.text:0000000000404b5c\n.text:0000000000404b61\n.text:0000000000404b66\n.text:0000000000404b6b\n.text:0000000000404b70\n.text:0000000000404b73\n.text:0000000000404b75\n.text:0000000000404b78\n.text:0000000000404b7b\n.text:0000000000404b80\n.text:0000000000404b82\n.text:0000000000404b84\n.text:0000000000404b88\n.text:0000000000404b8a\n.text:0000000000404b8e\n.text:0000000000404b90\n.text:0000000000404b93\n.text:0000000000404b98\n.text:0000000000404b9d\n.text:0000000000404ba1\n.text:0000000000404ba6\n.text:0000000000404baa\n.text:0000000000404bab\n.text:0000000000404bad\n.text:0000000000404bae\n'
p202
tp203
sS'set_program_name'
p204
(S'\n__stdcall set_program_name(char * argv0)\n'
p205
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p206
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004026a1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401430\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040268b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x405ed0\nMOV EDX,0x7\nCALL 0x00401350\nTEST EAX,EAX\nJNZ 0x0040268b\nMOV ESI,0x405ed8\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401350\nTEST EAX,EAX\nJNZ 0x00402688\nADD R14,0x3\nMOV qword ptr [0x00609260],R14\nMOV RBX,R14\nMOV qword ptr [0x006092c0],RBX\nMOV qword ptr [0x00609280],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x006092a0]\nMOV EDI,0x405e98\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401640\nCALL 0x00401330\n'
p207
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 f7 ed ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe d0 5e 40 00\nba 07 00 00 00\ne8 ed ec ff ff\n85 c0\n75 24\nbe d8 5e 40 00\nba 03 00 00 00\n4c 89 f7\ne8 d7 ec ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 d8 6b 20 00\n4c 89 f3\n48 89 1d 2e 6c 20 00\n48 89 1d e7 6b 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d f8 6b 20 00\nbf 98 5e 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 84 ef ff ff\ne8 6f ec ff ff\n'
p208
S'.text:0000000000402620\n.text:0000000000402622\n.text:0000000000402623\n.text:0000000000402624\n.text:0000000000402627\n.text:000000000040262a\n.text:000000000040262c\n.text:0000000000402631\n.text:0000000000402634\n.text:0000000000402639\n.text:000000000040263c\n.text:0000000000402640\n.text:0000000000402644\n.text:0000000000402647\n.text:000000000040264a\n.text:000000000040264e\n.text:0000000000402650\n.text:0000000000402654\n.text:0000000000402659\n.text:000000000040265e\n.text:0000000000402663\n.text:0000000000402665\n.text:0000000000402667\n.text:000000000040266c\n.text:0000000000402671\n.text:0000000000402674\n.text:0000000000402679\n.text:000000000040267b\n.text:000000000040267d\n.text:0000000000402681\n.text:0000000000402688\n.text:000000000040268b\n.text:0000000000402692\n.text:0000000000402699\n.text:000000000040269d\n.text:000000000040269e\n.text:00000000004026a0\n.text:00000000004026a1\n.text:00000000004026a8\n.text:00000000004026ad\n.text:00000000004026b2\n.text:00000000004026b7\n.text:00000000004026bc\n'
p209
tp210
sS'fileno'
p211
(S'\n__stdcall fileno(FILE * __stream)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00609120)();\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x00609120]\n'
p214
S'ff 25 fa 7b 20 00\n'
p215
S'.plt:0000000000401520\n'
p216
tp217
sS'quotearg_buffer'
p218
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p219
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p220
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x6092d0\nCMOVNZ RBP,R8\nCALL 0x00401340\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00402840\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p221
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd d0 92 60 00\n49 0f 45 e8\ne8 58 eb ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p222
S'.text:00000000004027c0\n.text:00000000004027c1\n.text:00000000004027c3\n.text:00000000004027c5\n.text:00000000004027c7\n.text:00000000004027c9\n.text:00000000004027ca\n.text:00000000004027cb\n.text:00000000004027ce\n.text:00000000004027d1\n.text:00000000004027d4\n.text:00000000004027d7\n.text:00000000004027da\n.text:00000000004027df\n.text:00000000004027e3\n.text:00000000004027e8\n.text:00000000004027eb\n.text:00000000004027ed\n.text:00000000004027f1\n.text:00000000004027f5\n.text:00000000004027f9\n.text:00000000004027fd\n.text:0000000000402800\n.text:0000000000402803\n.text:0000000000402806\n.text:0000000000402809\n.text:000000000040280c\n.text:000000000040280f\n.text:0000000000402813\n.text:0000000000402814\n.text:0000000000402819\n.text:000000000040281d\n.text:0000000000402821\n.text:0000000000402823\n.text:0000000000402827\n.text:0000000000402828\n.text:000000000040282a\n.text:000000000040282c\n.text:000000000040282e\n.text:0000000000402830\n.text:0000000000402831\n'
p223
tp224
sS'quotearg_colon'
p225
(S'\n__stdcall quotearg_colon(char * arg)\n'
p226
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p227
S'MOV ESI,0x3a\nJMP 0x004039a0\n'
p228
S'be 3a 00 00 00\neb e9\n'
p229
S'.text:00000000004039b0\n.text:00000000004039b5\n'
p230
tp231
sS'__xmknod'
p232
(S'\n__stdcall __xmknod(int __ver, char * __path, __mode_t __mode, __dev_t * __dev)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint __xmknod(int __ver,char *__path,__mode_t __mode,__dev_t *__dev)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xmknod_00609118)();\u000a  return iVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x00609118]\n'
p235
S'ff 25 02 7c 20 00\n'
p236
S'.plt:0000000000401510\n'
p237
tp238
sS'mbrtowc'
p239
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_00609098)();\u000a  return sVar1;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x00609098]\n'
p242
S'ff 25 82 7c 20 00\n'
p243
S'.plt:0000000000401410\n'
p244
tp245
sS'xstrtoumax'
p246
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p247
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00404836;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00404836;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00404765_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00404743:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00404743;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00404817;\u000a  default:\u000aswitchD_00404765_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00404817;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00404817:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00404836:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p248
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00404853\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401340\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401690\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00404650\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00404842\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401610\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x004046b0\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x004046e1\nCMP EAX,0x22\nJNZ 0x00404842\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x004046ec\nJMP 0x00404836\nTEST R12,R12\nJZ 0x00404842\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00404842\nMOV RDI,R12\nCALL 0x00401420\nTEST RAX,RAX\nJZ 0x00404842\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x004046ec\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00404836\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00404836\nMOV RDI,R12\nCALL 0x00401420\nTEST RAX,RAX\nJZ 0x0040477e\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00401420\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00404743\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x0040474a\nCMP EAX,0x44\nJZ 0x0040474a\nCMP EAX,0x69\nJNZ 0x00404743\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00404754\nMOV EBP,0x1\nJMP 0x00404754\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x0040477e\nXOR EAX,EAX\nJMP qword ptr [0x4067a0 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x004048a0\nJMP 0x0040481c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00404842\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x004048a0\nJMP 0x0040481c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x004048a0\nJMP 0x0040481c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x004048a0\nJMP 0x0040481c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00404817\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x004048a0\nJMP 0x0040481c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x004048a0\nJMP 0x0040481c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x004048a0\nJMP 0x0040481c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x004048a0\nJMP 0x0040481c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00404817\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00404870\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x406950\nMOV ESI,0x406976\nMOV EDX,0x60\nMOV ECX,0x406986\nCALL 0x00401450\n'
p249
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 12 cd ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 53 d0 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 8c cf ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 54 cd ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 1c cd ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 0a cd ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd a0 67 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 50 69 40 00\nbe 76 69 40 00\nba 60 00 00 00\nb9 86 69 40 00\ne8 e4 cb ff ff\n'
p250
S'.text:0000000000404600\n.text:0000000000404601\n.text:0000000000404603\n.text:0000000000404605\n.text:0000000000404607\n.text:0000000000404609\n.text:000000000040460a\n.text:000000000040460e\n.text:0000000000404611\n.text:0000000000404614\n.text:0000000000404617\n.text:000000000040461a\n.text:000000000040461e\n.text:0000000000404624\n.text:0000000000404629\n.text:000000000040462e\n.text:0000000000404631\n.text:0000000000404638\n.text:000000000040463d\n.text:0000000000404640\n.text:0000000000404643\n.text:0000000000404650\n.text:0000000000404653\n.text:0000000000404656\n.text:000000000040465b\n.text:000000000040465d\n.text:0000000000404660\n.text:0000000000404665\n.text:0000000000404669\n.text:000000000040466e\n.text:0000000000404670\n.text:0000000000404676\n.text:0000000000404679\n.text:000000000040467c\n.text:000000000040467f\n.text:0000000000404684\n.text:0000000000404688\n.text:000000000040468c\n.text:000000000040468f\n.text:0000000000404691\n.text:0000000000404694\n.text:0000000000404696\n.text:0000000000404698\n.text:000000000040469b\n.text:00000000004046a1\n.text:00000000004046a6\n.text:00000000004046a9\n.text:00000000004046ab\n.text:00000000004046b0\n.text:00000000004046b3\n.text:00000000004046b9\n.text:00000000004046bc\n.text:00000000004046be\n.text:00000000004046c4\n.text:00000000004046c7\n.text:00000000004046cc\n.text:00000000004046cf\n.text:00000000004046d5\n.text:00000000004046dd\n.text:00000000004046df\n.text:00000000004046e1\n.text:00000000004046e3\n.text:00000000004046e6\n.text:00000000004046ec\n.text:00000000004046f0\n.text:00000000004046f4\n.text:00000000004046f6\n.text:00000000004046fc\n.text:00000000004046ff\n.text:0000000000404704\n.text:0000000000404707\n.text:0000000000404709\n.text:000000000040470e\n.text:0000000000404711\n.text:0000000000404716\n.text:000000000040471b\n.text:000000000040471e\n.text:0000000000404720\n.text:0000000000404724\n.text:0000000000404727\n.text:0000000000404729\n.text:000000000040472c\n.text:000000000040472e\n.text:0000000000404731\n.text:0000000000404733\n.text:0000000000404735\n.text:0000000000404739\n.text:000000000040473c\n.text:0000000000404741\n.text:0000000000404743\n.text:0000000000404748\n.text:000000000040474a\n.text:000000000040474f\n.text:0000000000404754\n.text:0000000000404758\n.text:000000000040475b\n.text:000000000040475e\n.text:0000000000404761\n.text:0000000000404763\n.text:0000000000404765\n.text:000000000040476c\n.text:000000000040476f\n.text:0000000000404774\n.text:0000000000404779\n.text:000000000040477e\n.text:0000000000404782\n.text:0000000000404787\n.text:000000000040478a\n.text:000000000040478d\n.text:0000000000404792\n.text:0000000000404795\n.text:000000000040479a\n.text:000000000040479f\n.text:00000000004047a1\n.text:00000000004047a4\n.text:00000000004047a9\n.text:00000000004047ae\n.text:00000000004047b0\n.text:00000000004047b3\n.text:00000000004047b8\n.text:00000000004047bd\n.text:00000000004047bf\n.text:00000000004047c2\n.text:00000000004047c7\n.text:00000000004047c9\n.text:00000000004047cc\n.text:00000000004047d1\n.text:00000000004047d6\n.text:00000000004047d8\n.text:00000000004047db\n.text:00000000004047e0\n.text:00000000004047e5\n.text:00000000004047e7\n.text:00000000004047ea\n.text:00000000004047ef\n.text:00000000004047f4\n.text:00000000004047f6\n.text:00000000004047f9\n.text:00000000004047fe\n.text:0000000000404803\n.text:0000000000404805\n.text:0000000000404808\n.text:000000000040480d\n.text:000000000040480f\n.text:0000000000404812\n.text:0000000000404817\n.text:000000000040481c\n.text:000000000040481e\n.text:0000000000404822\n.text:0000000000404826\n.text:000000000040482a\n.text:000000000040482c\n.text:000000000040482f\n.text:0000000000404833\n.text:0000000000404836\n.text:000000000040483a\n.text:000000000040483f\n.text:0000000000404842\n.text:0000000000404844\n.text:0000000000404848\n.text:0000000000404849\n.text:000000000040484b\n.text:000000000040484d\n.text:000000000040484f\n.text:0000000000404851\n.text:0000000000404852\n.text:0000000000404853\n.text:0000000000404858\n.text:000000000040485d\n.text:0000000000404862\n.text:0000000000404867\n'
p251
tp252
sS'rpl_fflush'
p253
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p254
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00609138)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00404eed\nMOV RDI,RBX\nCALL 0x00401580\nTEST EAX,EAX\nJZ 0x00404eed\nMOV RDI,RBX\nCALL 0x00404f00\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401550\n'
p256
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 9f c6 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 5a c6 ff ff\n'
p257
S'.text:0000000000404ed0\n.text:0000000000404ed1\n.text:0000000000404ed4\n.text:0000000000404ed7\n.text:0000000000404ed9\n.text:0000000000404edc\n.text:0000000000404ee1\n.text:0000000000404ee3\n.text:0000000000404ee5\n.text:0000000000404ee8\n.text:0000000000404eed\n.text:0000000000404ef0\n.text:0000000000404ef1\n'
p258
tp259
sS'__assert_fail'
p260
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_006090b8)();\u000a  return;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x006090b8]\n'
p263
S'ff 25 62 7c 20 00\n'
p264
S'.plt:0000000000401450\n'
p265
tp266
sS'setlocale'
p267
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_00609168)();\u000a  return pcVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x00609168]\n'
p270
S'ff 25 b2 7b 20 00\n'
p271
S'.plt:00000000004015b0\n'
p272
tp273
sS'umask'
p274
(S'\n__stdcall umask(__mode_t __mask)\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__mode_t umask(__mode_t __mask)\u000a\u000a{\u000a  __mode_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_umask_00609108)();\u000a  return _Var1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x00609108]\n'
p277
S'ff 25 12 7c 20 00\n'
p278
S'.plt:00000000004014f0\n'
p279
tp280
sS'c_toupper'
p281
(S'\n__stdcall c_toupper()\n'
p282
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p283
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p284
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p285
S'.text:0000000000404aa0\n.text:0000000000404aa3\n.text:0000000000404aa6\n.text:0000000000404aa9\n.text:0000000000404aac\n'
p286
tp287
sS'bindtextdomain'
p288
(S'\n__stdcall bindtextdomain()\n'
p289
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00609070)();\u000a  return;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x00609070]\n'
p291
S'ff 25 aa 7c 20 00\n'
p292
S'.plt:00000000004013c0\n'
p293
tp294
sS'set_char_quoting'
p295
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p296
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p297
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x6092d0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p298
S'89 f1\n48 85 ff\nbe d0 92 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p299
S'.text:0000000000402730\n.text:0000000000402732\n.text:0000000000402735\n.text:000000000040273a\n.text:000000000040273e\n.text:0000000000402740\n.text:0000000000402743\n.text:0000000000402747\n.text:000000000040274c\n.text:000000000040274f\n.text:0000000000402751\n.text:0000000000402753\n.text:0000000000402756\n.text:0000000000402758\n.text:000000000040275b\n.text:000000000040275d\n.text:0000000000402760\n.text:0000000000402765\n'
p300
tp301
sS'quotearg_n'
p302
(S'\n__stdcall quotearg_n(char * arg)\n'
p303
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p304
S'MOV RDX,-0x1\nMOV ECX,0x6092d0\nJMP 0x00403620\n'
p305
S'48 c7 c2 ff ff ff ff\nb9 d0 92 60 00\neb 02\n'
p306
S'.text:0000000000403610\n.text:0000000000403617\n.text:000000000040361c\n'
p307
tp308
sS'mbsinit'
p309
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_006091c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x006091c0]\n'
p312
S'ff 25 5a 7b 20 00\n'
p313
S'.plt:0000000000401660\n'
p314
tp315
sS'dcgettext'
p316
(S'\n__stdcall dcgettext()\n'
p317
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00609078)();\u000a  return;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x00609078]\n'
p319
S'ff 25 a2 7c 20 00\n'
p320
S'.plt:00000000004013d0\n'
p321
tp322
sS'close_stream'
p323
(S'\n__stdcall close_stream(FILE * stream)\n'
p324
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401380\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004014b0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00404e50\nTEST EBP,EBP\nJZ 0x00404aeb\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x00404b0f\nCALL 0x00401340\nMOV dword ptr [RAX],0x0\nJMP 0x00404b0f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x00404b0f\nTEST CL,CL\nJNZ 0x00404b0f\nCALL 0x00401340\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p326
S'55\n41 56\n53\n48 89 fb\ne8 c4 c8 ff ff\n49 89 c6\n48 89 df\ne8 e9 c9 ff ff\n89 c5\n48 89 df\ne8 7f 03 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 5d c8 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 3e c8 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p327
S'.text:0000000000404ab0\n.text:0000000000404ab1\n.text:0000000000404ab3\n.text:0000000000404ab4\n.text:0000000000404ab7\n.text:0000000000404abc\n.text:0000000000404abf\n.text:0000000000404ac2\n.text:0000000000404ac7\n.text:0000000000404ac9\n.text:0000000000404acc\n.text:0000000000404ad1\n.text:0000000000404ad3\n.text:0000000000404ad5\n.text:0000000000404ada\n.text:0000000000404adc\n.text:0000000000404ade\n.text:0000000000404ae3\n.text:0000000000404ae9\n.text:0000000000404aeb\n.text:0000000000404aed\n.text:0000000000404af0\n.text:0000000000404af2\n.text:0000000000404af4\n.text:0000000000404af7\n.text:0000000000404af9\n.text:0000000000404afb\n.text:0000000000404afd\n.text:0000000000404b02\n.text:0000000000404b04\n.text:0000000000404b07\n.text:0000000000404b0c\n.text:0000000000404b0f\n.text:0000000000404b11\n.text:0000000000404b12\n.text:0000000000404b14\n.text:0000000000404b15\n'
p328
tp329
sS'quotearg_colon_mem'
p330
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p331
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p332
S'MOV EDX,0x3a\nJMP 0x00403930\n'
p333
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p334
S'.text:00000000004039c0\n.text:00000000004039c5\n'
p335
tp336
sS'quotearg_free'
p337
(S'\n__stdcall quotearg_free()\n'
p338
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p339
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x00609200]\nCMP dword ptr [0x00609208],0x2\nJC 0x004035ba\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401320\nINC RBX\nMOV EAX,dword ptr [0x00609208]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x004035a0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x609310\nCMP RDI,RAX\nJZ 0x004035e3\nCALL 0x00401320\nMOV qword ptr [0x00609210],0x100\nMOV qword ptr [0x00609218],0x609310\nMOV EAX,0x609210\nCMP R14,RAX\nJZ 0x00403600\nMOV RDI,R14\nCALL 0x00401320\nMOV qword ptr [0x00609200],0x609210\nMOV dword ptr [0x00609208],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p340
S'41 57\n41 56\n53\n4c 8b 35 74 5c 20 00\n83 3d 75 5c 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 78 dd ff ff\n48 ff c3\n8b 05 57 5c 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 10 93 60 00\n48 39 c7\n74 1b\ne8 53 dd ff ff\n48 c7 05 38 5c 20 00 00 01 00 00\n48 c7 05 35 5c 20 00 10 93 60 00\nb8 10 92 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 2b dd ff ff\n48 c7 05 00 5c 20 00 10 92 60 00\nc7 05 fe 5b 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p341
S'.text:0000000000403580\n.text:0000000000403582\n.text:0000000000403584\n.text:0000000000403585\n.text:000000000040358c\n.text:0000000000403593\n.text:0000000000403595\n.text:0000000000403599\n.text:000000000040359e\n.text:00000000004035a0\n.text:00000000004035a3\n.text:00000000004035a8\n.text:00000000004035ab\n.text:00000000004035b1\n.text:00000000004035b5\n.text:00000000004035b8\n.text:00000000004035ba\n.text:00000000004035be\n.text:00000000004035c3\n.text:00000000004035c6\n.text:00000000004035c8\n.text:00000000004035cd\n.text:00000000004035d8\n.text:00000000004035e3\n.text:00000000004035e8\n.text:00000000004035eb\n.text:00000000004035ed\n.text:00000000004035f0\n.text:00000000004035f5\n.text:0000000000403600\n.text:000000000040360a\n.text:000000000040360b\n.text:000000000040360d\n.text:000000000040360f\n'
p342
tp343
sS'quotearg_mem'
p344
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p345
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004037e0\n'
p347
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p348
S'.text:0000000000403800\n.text:0000000000403803\n.text:0000000000403806\n.text:0000000000403808\n.text:000000000040380b\n.text:000000000040380e\n'
p349
tp350
sS'xcalloc'
p351
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p352
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p353
S'PUSH RAX\nCALL 0x004048e0\nTEST RAX,RAX\nJZ 0x0040456d\nPOP RCX\nRET\nCALL 0x004045d0\n'
p354
S'50\ne8 7a 03 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p355
S'.text:0000000000404560\n.text:0000000000404561\n.text:0000000000404566\n.text:0000000000404569\n.text:000000000040456b\n.text:000000000040456c\n.text:000000000040456d\n'
p356
tp357
sS'deregister_tm_clones'
p358
(S'\n__stdcall deregister_tm_clones()\n'
p359
V\u000a/* WARNING: Removing unreachable block (ram,0x004016e5) */\u000a/* WARNING: Removing unreachable block (ram,0x004016ef) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p360
S'MOV EAX,0x60925f\nPUSH RBP\nSUB RAX,0x609258\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401700\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401700\nPOP RBP\nMOV EDI,0x609258\nJMP RAX\nPOP RBP\nRET\n'
p361
S'b8 5f 92 60 00\n55\n48 2d 58 92 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 58 92 60 00\nff e0\n5d\nc3\n'
p362
S'.text:00000000004016d0\n.text:00000000004016d5\n.text:00000000004016d6\n.text:00000000004016dc\n.text:00000000004016e0\n.text:00000000004016e3\n.text:00000000004016e5\n.text:00000000004016ea\n.text:00000000004016ed\n.text:00000000004016ef\n.text:00000000004016f0\n.text:00000000004016f5\n.text:0000000000401700\n.text:0000000000401701\n'
p363
tp364
sS'clear_ungetc_buffer_preserving_position'
p365
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p366
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p367
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00404f07\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00404f20\n'
p368
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p369
S'.text:0000000000404f00\n.text:0000000000404f04\n.text:0000000000404f06\n.text:0000000000404f07\n.text:0000000000404f09\n.text:0000000000404f0e\n'
p370
tp371
sS'mknod'
p372
(S'\n__stdcall mknod(char * __path, __mode_t __mode, __dev_t __dev)\n'
p373
V\u000aint mknod(char *__path,__mode_t __mode,__dev_t __dev)\u000a\u000a{\u000a  int iVar1;\u000a  __dev_t local_10 [2];\u000a  \u000a  local_10[0] = __dev;\u000a  iVar1 = __xmknod(0,__path,__mode,local_10);\u000a  return iVar1;\u000a}\u000a\u000a
p374
S'SUB RSP,0x18\nLEA RCX,[RSP + 0x8]\nMOV qword ptr [RSP + 0x8],RDX\nMOV EDX,ESI\nMOV RSI,RDI\nXOR EDI,EDI\nCALL 0x00401510\nADD RSP,0x18\nRET\n'
p375
S'48 83 ec 18\n48 8d 4c 24 08\n48 89 54 24 08\n89 f2\n48 89 fe\n31 ff\ne8 a6 c4 ff ff\n48 83 c4 18\nc3\n'
p376
S'.text:0000000000405050\n.text:0000000000405054\n.text:0000000000405059\n.text:000000000040505e\n.text:0000000000405060\n.text:0000000000405063\n.text:0000000000405065\n.text:000000000040506a\n.text:000000000040506e\n'
p377
tp378
sS'xnmalloc'
p379
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p380
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p381
S'MOV RAX,RDI\nMUL RSI\nJO 0x00404431\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00404440\nPUSH RAX\nCALL 0x004045d0\n'
p382
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p383
S'.text:0000000000404420\n.text:0000000000404423\n.text:0000000000404426\n.text:0000000000404428\n.text:000000000040442c\n.text:000000000040442f\n.text:0000000000404431\n.text:0000000000404432\n'
p384
tp385
sS'quotearg_custom'
p386
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p387
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p388
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403a20\n'
p389
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p390
S'.text:0000000000403aa0\n.text:0000000000403aa3\n.text:0000000000403aa6\n.text:0000000000403aa9\n.text:0000000000403aab\n.text:0000000000403aae\n.text:0000000000403ab1\n.text:0000000000403ab4\n'
p391
tp392
sS'free'
p393
(S'\n__stdcall free(void * __ptr)\n'
p394
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00609020)();\u000a  return;\u000a}\u000a\u000a
p395
S'JMP qword ptr [0x00609020]\n'
p396
S'ff 25 fa 7c 20 00\n'
p397
S'.plt:0000000000401320\n'
p398
tp399
sS'close'
p400
(S'\n__stdcall close(int __fd)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006090d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x006090d0]\n'
p403
S'ff 25 4a 7c 20 00\n'
p404
S'.plt:0000000000401480\n'
p405
tp406
sS'getenv'
p407
(S'\n__stdcall getenv(char * __name)\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00609018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x00609018]\n'
p410
S'ff 25 02 7d 20 00\n'
p411
S'.plt:0000000000401310\n'
p412
tp413
sS'quotearg_char'
p414
(S'\n__stdcall quotearg_char(char * arg)\n'
p415
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p416
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00403930\n'
p417
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p418
S'.text:00000000004039a0\n.text:00000000004039a2\n.text:00000000004039a9\n.text:00000000004039ab\n'
p419
tp420
sS'malloc'
p421
(S'\n__stdcall malloc(size_t __size)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00609130)();\u000a  return pvVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x00609130]\n'
p424
S'ff 25 ea 7b 20 00\n'
p425
S'.plt:0000000000401540\n'
p426
tp427
sS'stat'
p428
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p429
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_00609128)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p430
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00401530\n'
p431
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 e0 c4 ff ff\n'
p432
S'.text:0000000000405040\n.text:0000000000405043\n.text:0000000000405046\n.text:000000000040504b\n'
p433
tp434
sS'octal_to_mode'
p435
(S'\n__stdcall octal_to_mode()\n'
p436
V\u000amode_t octal_to_mode(void)\u000a\u000a{\u000a  mode_t in_EDI;\u000a  \u000a  return in_EDI;\u000a}\u000a\u000a
p437
S'MOV EAX,EDI\nRET\n'
p438
S'89 f8\nc3\n'
p439
S'.text:0000000000402460\n.text:0000000000402462\n'
p440
tp441
sS'c_tolower'
p442
(S'\n__stdcall c_tolower()\n'
p443
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p445
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p446
S'.text:0000000000404a90\n.text:0000000000404a93\n.text:0000000000404a96\n.text:0000000000404a99\n.text:0000000000404a9c\n'
p447
tp448
sS'rpl_fseeko'
p449
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p450
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_00609190)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p451
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00404f48\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00404f48\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x00404f5a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401600\nMOV RDI,RBX\nCALL 0x00401520\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401440\nCMP RAX,-0x1\nJZ 0x00404f83\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00404f88\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p452
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 a6 c6 ff ff\n48 89 df\ne8 be c5 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 d1 c4 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p453
S'.text:0000000000404f20\n.text:0000000000404f21\n.text:0000000000404f23\n.text:0000000000404f24\n.text:0000000000404f27\n.text:0000000000404f2a\n.text:0000000000404f2d\n.text:0000000000404f31\n.text:0000000000404f35\n.text:0000000000404f37\n.text:0000000000404f3b\n.text:0000000000404f3f\n.text:0000000000404f41\n.text:0000000000404f46\n.text:0000000000404f48\n.text:0000000000404f4b\n.text:0000000000404f4e\n.text:0000000000404f51\n.text:0000000000404f52\n.text:0000000000404f54\n.text:0000000000404f55\n.text:0000000000404f5a\n.text:0000000000404f5d\n.text:0000000000404f62\n.text:0000000000404f64\n.text:0000000000404f67\n.text:0000000000404f6a\n.text:0000000000404f6f\n.text:0000000000404f73\n.text:0000000000404f75\n.text:0000000000404f78\n.text:0000000000404f7f\n.text:0000000000404f81\n.text:0000000000404f83\n.text:0000000000404f88\n.text:0000000000404f89\n.text:0000000000404f8b\n.text:0000000000404f8c\n'
p454
tp455
sS'getopt_long'
p456
(S'\n__stdcall getopt_long()\n'
p457
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_00609090)();\u000a  return;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x00609090]\n'
p459
S'ff 25 8a 7c 20 00\n'
p460
S'.plt:0000000000401400\n'
p461
tp462
sS'quote_n_mem'
p463
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p464
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p465
S'MOV ECX,0x609220\nJMP 0x00403620\n'
p466
S'b9 20 92 60 00\ne9 36 fb ff ff\n'
p467
S'.text:0000000000403ae0\n.text:0000000000403ae5\n'
p468
tp469
sS'xstrdup'
p470
(S'\n__stdcall xstrdup(char * string)\n'
p471
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p472
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004013f0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00404580\n'
p473
S'53\n48 89 fb\ne8 37 ce ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p474
S'.text:00000000004045b0\n.text:00000000004045b1\n.text:00000000004045b4\n.text:00000000004045b9\n.text:00000000004045bd\n.text:00000000004045c0\n.text:00000000004045c1\n'
p475
tp476
sS'c_ispunct'
p477
(S'\n__stdcall c_ispunct()\n'
p478
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p479
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00404a32\nMOV AL,0x1\nJMP qword ptr [0x4069d8 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p480
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd d8 69 40 00\nc3\n31 c0\nc3\n'
p481
S'.text:0000000000404a20\n.text:0000000000404a23\n.text:0000000000404a26\n.text:0000000000404a28\n.text:0000000000404a2a\n.text:0000000000404a31\n.text:0000000000404a32\n.text:0000000000404a34\n'
p482
tp483
sS'quotearg_style'
p484
(S'\n__stdcall quotearg_style(char * arg)\n'
p485
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p486
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00403810\n'
p487
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p488
S'.text:00000000004038f0\n.text:00000000004038f3\n.text:00000000004038f5\n.text:00000000004038f7\n.text:00000000004038f9\n.text:00000000004038fc\n'
p489
tp490
sS'fscanf'
p491
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p492
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006090c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x006090c8]\n'
p494
S'ff 25 52 7c 20 00\n'
p495
S'.plt:0000000000401470\n'
p496
tp497
sS'emit_try_help'
p498
(S'\n__stdcall emit_try_help()\n'
p499
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p500
S'PUSH RBX\nMOV RBX,qword ptr [0x006092a0]\nXOR EDI,EDI\nMOV ESI,0x405849\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x006092c0]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401650\n'
p501
S'53\n48 8b 1d 98 79 20 00\n31 ff\nbe 49 58 40 00\nba 05 00 00 00\ne8 b7 fa ff ff\n48 89 c2\n48 8b 0d 9d 79 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 1d fd ff ff\n'
p502
S'.text:0000000000401900\n.text:0000000000401901\n.text:0000000000401908\n.text:000000000040190a\n.text:000000000040190f\n.text:0000000000401914\n.text:0000000000401919\n.text:000000000040191c\n.text:0000000000401923\n.text:0000000000401928\n.text:000000000040192a\n.text:000000000040192d\n.text:000000000040192e\n'
p503
tp504
sS'memcpy'
p505
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p506
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00609110)();\u000a  return pvVar1;\u000a}\u000a\u000a
p507
S'JMP qword ptr [0x00609110]\n'
p508
S'ff 25 0a 7c 20 00\n'
p509
S'.plt:0000000000401500\n'
p510
tp511
sS'strrchr'
p512
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006090a8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x006090a8]\n'
p515
S'ff 25 72 7c 20 00\n'
p516
S'.plt:0000000000401430\n'
p517
tp518
sS'close_stdout_set_ignore_EPIPE'
p519
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p520
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p521
S'MOV byte ptr [0x006092b8],DIL\nRET\n'
p522
S'40 88 3d 21 72 20 00\nc3\n'
p523
S'.text:0000000000402090\n.text:0000000000402097\n'
p524
tp525
sS'quotearg_alloc_mem'
p526
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p527
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p528
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x6092d0\nCMOVNZ R12,RCX\nCALL 0x00401340\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402840\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00404510\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402840\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040356a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p529
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc d0 92 60 00\n4c 0f 45 e1\ne8 78 de ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 f1 0f 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p530
S'.text:0000000000403490\n.text:0000000000403491\n.text:0000000000403493\n.text:0000000000403495\n.text:0000000000403497\n.text:0000000000403499\n.text:000000000040349a\n.text:000000000040349e\n.text:00000000004034a1\n.text:00000000004034a6\n.text:00000000004034a9\n.text:00000000004034ae\n.text:00000000004034b1\n.text:00000000004034b6\n.text:00000000004034b9\n.text:00000000004034bf\n.text:00000000004034c3\n.text:00000000004034c8\n.text:00000000004034cd\n.text:00000000004034cf\n.text:00000000004034d3\n.text:00000000004034d5\n.text:00000000004034d8\n.text:00000000004034dc\n.text:00000000004034e1\n.text:00000000004034e5\n.text:00000000004034ea\n.text:00000000004034ee\n.text:00000000004034f0\n.text:00000000004034f2\n.text:00000000004034f5\n.text:00000000004034f8\n.text:00000000004034fb\n.text:0000000000403500\n.text:0000000000403505\n.text:0000000000403507\n.text:000000000040350c\n.text:0000000000403510\n.text:0000000000403513\n.text:0000000000403517\n.text:000000000040351a\n.text:000000000040351f\n.text:0000000000403522\n.text:0000000000403526\n.text:000000000040352a\n.text:000000000040352d\n.text:0000000000403530\n.text:0000000000403535\n.text:000000000040353a\n.text:000000000040353d\n.text:0000000000403542\n.text:0000000000403547\n.text:0000000000403549\n.text:000000000040354e\n.text:0000000000403553\n.text:0000000000403557\n.text:000000000040355a\n.text:000000000040355e\n.text:0000000000403563\n.text:0000000000403565\n.text:0000000000403567\n.text:000000000040356a\n.text:000000000040356d\n.text:0000000000403571\n.text:0000000000403572\n.text:0000000000403574\n.text:0000000000403576\n.text:0000000000403578\n.text:000000000040357a\n.text:000000000040357b\n'
p531
tp532
sS'iswprint'
p533
(S'\n__stdcall iswprint(wint_t __wc)\n'
p534
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_006091c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p535
S'JMP qword ptr [0x006091c8]\n'
p536
S'ff 25 52 7b 20 00\n'
p537
S'.plt:0000000000401670\n'
p538
tp539
sS'bkm_scale'
p540
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p541
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p542
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p543
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p544
S'.text:0000000000404870\n.text:0000000000404873\n.text:000000000040487a\n.text:0000000000404881\n.text:0000000000404883\n.text:0000000000404886\n.text:0000000000404889\n.text:000000000040488d\n.text:0000000000404890\n.text:0000000000404894\n.text:0000000000404896\n.text:0000000000404899\n.text:000000000040489c\n'
p545
tp546
sS'quotearg_style_mem'
p547
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p548
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p549
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004038b0\n'
p550
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p551
S'.text:0000000000403910\n.text:0000000000403913\n.text:0000000000403916\n.text:0000000000403918\n.text:000000000040391a\n.text:000000000040391c\n.text:000000000040391f\n.text:0000000000403922\n'
p552
tp553
sS'xalloc_die'
p554
(S'\n__stdcall xalloc_die()\n'
p555
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x405a1d,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p556
S'PUSH RBX\nMOV EBX,dword ptr [0x006091f8]\nXOR EDI,EDI\nMOV ESI,0x40678f\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x405a1d\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004015e0\nCALL 0x00401330\n'
p557
S'53\n8b 1d 21 4c 20 00\n31 ff\nbe 8f 67 40 00\nba 05 00 00 00\ne8 e8 cd ff ff\n48 89 c1\n31 f6\nba 1d 5a 40 00\n31 c0\n89 df\ne8 e5 cf ff ff\ne8 30 cd ff ff\n'
p558
S'.text:00000000004045d0\n.text:00000000004045d1\n.text:00000000004045d7\n.text:00000000004045d9\n.text:00000000004045de\n.text:00000000004045e3\n.text:00000000004045e8\n.text:00000000004045eb\n.text:00000000004045ed\n.text:00000000004045f2\n.text:00000000004045f4\n.text:00000000004045f6\n.text:00000000004045fb\n'
p559
tp560
sS'c_isspace'
p561
(S'\n__stdcall c_isspace()\n'
p562
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p563
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00404a55\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p564
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p565
S'.text:0000000000404a40\n.text:0000000000404a43\n.text:0000000000404a46\n.text:0000000000404a48\n.text:0000000000404a4d\n.text:0000000000404a4f\n.text:0000000000404a51\n.text:0000000000404a54\n.text:0000000000404a55\n.text:0000000000404a57\n'
p566
tp567
sS'quotearg_n_custom'
p568
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p569
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p570
S'MOV R8,-0x1\nJMP 0x00403a30\n'
p571
S'49 c7 c0 ff ff ff ff\neb 07\n'
p572
S'.text:0000000000403a20\n.text:0000000000403a27\n'
p573
tp574
sS'mkfifo'
p575
(S'\n__stdcall mkfifo(char * __path, __mode_t __mode)\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mkfifo(char *__path,__mode_t __mode)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mkfifo_00609100)();\u000a  return iVar1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x00609100]\n'
p578
S'ff 25 1a 7c 20 00\n'
p579
S'.plt:00000000004014e0\n'
p580
tp581
sS'open'
p582
(S'\n__stdcall open(char * __file, int __oflag)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_00609188)();\u000a  return iVar1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x00609188]\n'
p585
S'ff 25 92 7b 20 00\n'
p586
S'.plt:00000000004015f0\n'
p587
tp588
sS'make_node_op_equals'
p589
(S'\n__stdcall make_node_op_equals()\n'
p590
V\u000amode_change * make_node_op_equals(void)\u000a\u000a{\u000a  mode_change *pmVar1;\u000a  mode_t in_ESI;\u000a  mode_t in_EDI;\u000a  \u000a  pmVar1 = (mode_change *)xmalloc(0x20);\u000a  pmVar1->op = '=';\u000a  pmVar1->flag = 1;\u000a  pmVar1->affected = 0xfff;\u000a  pmVar1->value = in_EDI;\u000a  pmVar1->mentioned = in_ESI;\u000a  pmVar1[1].flag = 0;\u000a  return pmVar1;\u000a}\u000a\u000a
p591
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBX,ESI\nMOV EBP,EDI\nMOV EDI,0x20\nCALL 0x00404440\nMOV byte ptr [RAX],0x3d\nMOV byte ptr [RAX + 0x1],0x1\nMOV dword ptr [RAX + 0x4],0xfff\nMOV dword ptr [RAX + 0x8],EBP\nMOV dword ptr [RAX + 0xc],EBX\nMOV byte ptr [RAX + 0x11],0x0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p592
S'55\n53\n50\n89 f3\n89 fd\nbf 20 00 00 00\ne8 bf 1f 00 00\nc6 00 3d\nc6 40 01 01\nc7 40 04 ff 0f 00 00\n89 68 08\n89 58 0c\nc6 40 11 00\n48 83 c4 08\n5b\n5d\nc3\n'
p593
S'.text:0000000000402470\n.text:0000000000402471\n.text:0000000000402472\n.text:0000000000402473\n.text:0000000000402475\n.text:0000000000402477\n.text:000000000040247c\n.text:0000000000402481\n.text:0000000000402484\n.text:0000000000402488\n.text:000000000040248f\n.text:0000000000402492\n.text:0000000000402495\n.text:0000000000402499\n.text:000000000040249d\n.text:000000000040249e\n.text:000000000040249f\n'
p594
tp595
sS'quotearg_n_custom_mem'
p596
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p597
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p598
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x00609300]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x006092f0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x006092e0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006092d0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00402790\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403620\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p599
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 b7 58 20 00\n48 89 44 24 30\n0f 10 05 9b 58 20 00\n0f 29 44 24 20\n0f 10 05 7f 58 20 00\n0f 29 44 24 10\n0f 10 05 63 58 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p600
S'.text:0000000000403a30\n.text:0000000000403a31\n.text:0000000000403a33\n.text:0000000000403a35\n.text:0000000000403a36\n.text:0000000000403a3a\n.text:0000000000403a3d\n.text:0000000000403a40\n.text:0000000000403a42\n.text:0000000000403a49\n.text:0000000000403a4e\n.text:0000000000403a55\n.text:0000000000403a5a\n.text:0000000000403a61\n.text:0000000000403a66\n.text:0000000000403a6d\n.text:0000000000403a71\n.text:0000000000403a74\n.text:0000000000403a77\n.text:0000000000403a7c\n.text:0000000000403a7e\n.text:0000000000403a81\n.text:0000000000403a84\n.text:0000000000403a87\n.text:0000000000403a8c\n.text:0000000000403a90\n.text:0000000000403a91\n.text:0000000000403a93\n.text:0000000000403a95\n.text:0000000000403a96\n'
p601
tp602
sS'gnu_dev_makedev'
p603
(S'\n__stdcall gnu_dev_makedev(uint __major, uint __minor)\n'
p604
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulonglong gnu_dev_makedev(uint __major,uint __minor)\u000a\u000a{\u000a  ulonglong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_gnu_dev_makedev_006091d0)();\u000a  return uVar1;\u000a}\u000a\u000a
p605
S'JMP qword ptr [0x006091d0]\n'
p606
S'ff 25 4a 7b 20 00\n'
p607
S'.plt:0000000000401680\n'
p608
tp609
sS'_init'
p610
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p611
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00608ff8;\u000a  if (PTR___gmon_start___00608ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00608ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p612
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00608ff8]\nTEST RAX,RAX\nJZ 0x004012fa\nCALL RAX\nADD RSP,0x8\nRET\n'
p613
S'48 83 ec 08\n48 8b 05 05 7d 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p614
S'.init:00000000004012e8\n.init:00000000004012ec\n.init:00000000004012f3\n.init:00000000004012f6\n.init:00000000004012f8\n.init:00000000004012fa\n.init:00000000004012fe\n'
p615
tp616
sS'__freading'
p617
(S'\n__stdcall __freading()\n'
p618
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00609150)();\u000a  return;\u000a}\u000a\u000a
p619
S'JMP qword ptr [0x00609150]\n'
p620
S'ff 25 ca 7b 20 00\n'
p621
S'.plt:0000000000401580\n'
p622
tp623
sS'set_quoting_flags'
p624
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p625
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p626
S'TEST RDI,RDI\nMOV ECX,0x6092d0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p627
S'48 85 ff\nb9 d0 92 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p628
S'.text:0000000000402770\n.text:0000000000402773\n.text:0000000000402778\n.text:000000000040277c\n.text:000000000040277f\n.text:0000000000402782\n'
p629
tp630
sS'fputs_unlocked'
p631
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p632
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_006090e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p633
S'JMP qword ptr [0x006090e0]\n'
p634
S'ff 25 3a 7c 20 00\n'
p635
S'.plt:00000000004014a0\n'
p636
tp637
sS'main'
p638
(S'\n__stdcall main(char * * argv)\n'
p639
V\u000aint main(char **argv)\u000a\u000a{\u000a  ulong uVar1;\u000a  char *s;\u000a  int iVar2;\u000a  __mode_t __mask;\u000a  mode_t __mode;\u000a  strtol_error sVar3;\u000a  int iVar4;\u000a  mode_change *__ptr;\u000a  long lVar5;\u000a  char *pcVar6;\u000a  ulonglong uVar7;\u000a  char *s_00;\u000a  uint *puVar8;\u000a  undefined8 uVar9;\u000a  char *mode_string;\u000a  undefined8 uVar10;\u000a  char **in_RSI;\u000a  bool unaff_R13B;\u000a  uint uVar11;\u000a  uint local_40;\u000a  undefined4 uStack60;\u000a  uint local_38;\u000a  undefined4 uStack52;\u000a  \u000a  iVar4 = (int)((ulong)argv & 0xffffffff);\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x4056cd,"/usr/local/share/locale");\u000a  textdomain(0x4056cd);\u000a  atexit(close_stdout);\u000a  mode_string = (char *)0x0;\u000a  while (iVar2 = getopt_long((ulong)argv & 0xffffffff), 0x59 < iVar2) {\u000a    if (iVar2 == 0x5a) {\u000a      if (optarg != (char *)0x0) {\u000a        uVar9 = dcgettext(0,\u000a                          "warning: ignoring --context; it requires an SELinux/SMACK-enabled kernel"\u000a                          ,5);\u000a        error(0,0,uVar9,uVar9);\u000a      }\u000a    }\u000a    else {\u000a      mode_string = optarg;\u000a      if (iVar2 != 0x6d) {\u000aLAB_00401fec:\u000a        usage(1);\u000aLAB_00401ff6:\u000a        uVar9 = dcgettext();\u000a        mode_string = quote(in_RSI[(long)iVar4 + -1]);\u000a        error(0,0,uVar9,mode_string);\u000a        uVar9 = stderr;\u000ajoined_r0x00402029:\u000a        stderr = uVar9;\u000a        if ((unaff_R13B == false) && (stderr = uVar9, iVar4 - optind == 2)) {\u000a          stderr = uVar9;\u000a          uVar10 = dcgettext(0,"Special files require major and minor device numbers.",5);\u000a          __fprintf_chk(uVar9,1,0x406480,uVar10);\u000a        }\u000a        mode_string = (char *)0x1;\u000a        iVar4 = usage();\u000a        file_name = mode_string;\u000a        return iVar4;\u000a      }\u000a    }\u000a  }\u000a  if (iVar2 == -1) {\u000a    if (mode_string == (char *)0x0) {\u000a      __mode = 0x1b6;\u000a    }\u000a    else {\u000a      __ptr = mode_compile(mode_string);\u000a      if (__ptr == (mode_change *)0x0) {\u000a        uVar9 = dcgettext(0,"invalid mode",5);\u000a        error(1,0,uVar9,uVar9);\u000a      }\u000a      __mask = umask(0);\u000a      umask(__mask);\u000a      __mode = mode_adjust((mode_change *)0x1b6,(mode_t *)0x0);\u000a      free(__ptr);\u000a      if (0x1ff < __mode) {\u000a        uVar9 = dcgettext(0,"mode must specify only file permission bits",5);\u000a        error(1,0,uVar9);\u000a      }\u000a    }\u000a    unaff_R13B = true;\u000a    if (optind < iVar4) {\u000a      if (optind + 1 < iVar4) {\u000a        unaff_R13B = *in_RSI[(long)optind + 1] == 'p';\u000a      }\u000a      else {\u000a        unaff_R13B = false;\u000a      }\u000a    }\u000a    uVar1 = (ulong)(unaff_R13B == false) * 2 + 2;\u000a    iVar2 = optind;\u000a    if (uVar1 <= (ulong)(long)(iVar4 - optind)) {\u000a      if ((ulong)(long)(iVar4 - optind) <= uVar1) {\u000a        lVar5 = (long)optind;\u000a        uVar11 = 0x6000;\u000a        switch(*in_RSI[lVar5 + 1]) {\u000a        case 'c':\u000a        case 'u':\u000a          uVar11 = 0x2000;\u000a        case 'b':\u000a          s_00 = in_RSI[lVar5 + 2];\u000a          s = in_RSI[lVar5 + 3];\u000a          sVar3 = xstrtoumax(s_00,(char **)0x0,(uintmax_t *)0x0,(char *)&local_38);\u000a          if ((sVar3 != LONGINT_OK) || (CONCAT44(uStack52,local_38) != (ulong)local_38)) {\u000a            uVar9 = dcgettext(0,"invalid major device number %s",5);\u000a            pcVar6 = quote(s_00);\u000a            error(1,0,uVar9,pcVar6);\u000a          }\u000a          sVar3 = xstrtoumax(s,(char **)0x0,(uintmax_t *)0x0,(char *)&local_40);\u000a          if ((sVar3 != LONGINT_OK) || (CONCAT44(uStack60,local_40) != (ulong)local_40)) {\u000a            uVar9 = dcgettext(0,"invalid minor device number %s",5);\u000a            pcVar6 = quote(s);\u000a            error(1,0,uVar9,pcVar6);\u000a          }\u000a          uVar7 = gnu_dev_makedev(local_38,local_40);\u000a          if (uVar7 == 0xffffffffffffffff) {\u000a            uVar9 = dcgettext(0,"invalid device %s %s",5);\u000a            error(1,0,uVar9,s_00,s);\u000a          }\u000a          iVar4 = rpl_mknod(in_RSI[(long)optind],(ulong)(uVar11 | __mode));\u000a          if (iVar4 != 0) {\u000a            puVar8 = (uint *)__errno_location();\u000a            uVar11 = *puVar8;\u000a            s_00 = quotearg_n_style_colon((char *)0x0);\u000a            error(1,(ulong)uVar11,0x405a1d,s_00);\u000a          }\u000a          break;\u000a        default:\u000a          goto switchD_00401c8b_caseD_64;\u000a        case 'p':\u000a          iVar4 = mkfifo(in_RSI[lVar5],__mode);\u000a          if (iVar4 != 0) {\u000a            puVar8 = (uint *)__errno_location();\u000a            uVar11 = *puVar8;\u000a            s_00 = quotearg_n_style_colon((char *)0x0);\u000a            error(1,(ulong)uVar11,0x405a1d,s_00);\u000a          }\u000a        }\u000a        if ((mode_string != (char *)0x0) && (iVar4 = chmod(in_RSI[(long)optind],__mode), iVar4 != 0)\u000a           ) {\u000a          puVar8 = (uint *)__errno_location();\u000a          uVar11 = *puVar8;\u000a          uVar9 = dcgettext(0,"cannot set permissions of %s",5);\u000a          mode_string = quotearg_style((char *)0x4);\u000a          error(1,(ulong)uVar11,uVar9,mode_string);\u000a        }\u000a        return 0;\u000a      }\u000a      uVar9 = dcgettext(0,"extra operand %s",5);\u000a      mode_string = quote(in_RSI[(long)optind + uVar1]);\u000a      error(0,0,uVar9,mode_string);\u000a      uVar9 = stderr;\u000a      if ((unaff_R13B != false) && (iVar4 = iVar4 - optind, iVar4 == 4)) {\u000a        uVar10 = dcgettext(0,"Fifos do not have major and minor device numbers.",5);\u000a        __fprintf_chk(uVar9,1,0x406480,uVar10);\u000a      }\u000a      usage(1);\u000aswitchD_00401c8b_caseD_64:\u000a      uVar9 = dcgettext(0,"invalid device type %s",5);\u000a      mode_string = quote(in_RSI[(long)optind + 1]);\u000a      error(0,0,uVar9,mode_string);\u000a      usage(1);\u000a      goto LAB_00401fec;\u000a    }\u000a  }\u000a  else {\u000a    if (iVar2 == -0x83) {\u000a      version_etc(stdout,"mknod","GNU coreutils",Version,"David MacKenzie",0);\u000a                    /* WARNING: Subroutine does not return */\u000a      exit(0);\u000a    }\u000a    if (iVar2 != -0x82) goto LAB_00401fec;\u000a    iVar2 = usage(0);\u000a  }\u000a  if (iVar2 < iVar4) goto LAB_00401ff6;\u000a  uVar9 = dcgettext(0,"missing operand",5);\u000a  error(0,0,uVar9,uVar9);\u000a  uVar9 = stderr;\u000a  goto joined_r0x00402029;\u000a}\u000a\u000a
p640
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RSI\nMOV R12D,EDI\nMOV RDI,qword ptr [R15]\nCALL 0x00402620\nMOV EDI,0x6\nMOV ESI,0x406559\nCALL 0x004015b0\nMOV EDI,0x4056cd\nMOV ESI,0x405664\nCALL 0x004013c0\nMOV EDI,0x4056cd\nCALL 0x004013a0\nMOV EDI,0x4020a0\nCALL 0x00405010\nXOR R14D,R14D\nJMP 0x00401b07\nMOV R14,qword ptr [0x00609278]\nMOV EDX,0x40567c\nMOV ECX,0x405130\nXOR R8D,R8D\nMOV EDI,R12D\nMOV RSI,R15\nCALL 0x00401400\nCMP EAX,0x59\nJLE 0x00401b6e\nCMP EAX,0x5a\nJZ 0x00401b40\nCMP EAX,0x6d\nJZ 0x00401b00\nJMP 0x00401fec\nCMP qword ptr [0x00609278],0x0\nJZ 0x00401b07\nXOR EDI,EDI\nMOV ESI,0x405680\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004015e0\nJMP 0x00401b07\nCMP EAX,-0x1\nJNZ 0x00401ea8\nTEST R14,R14\nJZ 0x00401c12\nMOV RDI,R14\nCALL 0x00402160\nMOV RBX,RAX\nTEST RBX,RBX\nJNZ 0x00401bb5\nXOR EDI,EDI\nMOV ESI,0x4056e7\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004015e0\nXOR EDI,EDI\nCALL 0x004014f0\nMOV EBP,EAX\nMOV EDI,EBP\nCALL 0x004014f0\nMOV EDI,0x1b6\nXOR ESI,ESI\nXOR R8D,R8D\nMOV EDX,EBP\nMOV RCX,RBX\nCALL 0x004024e0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00401320\nCMP EBP,0x200\nJC 0x00401c17\nXOR EDI,EDI\nMOV ESI,0x4056f4\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004015e0\nJMP 0x00401c17\nMOV EBP,0x1b6\nMOVSXD RAX,dword ptr [0x00609270]\nMOV R13B,0x1\nCMP EAX,R12D\nJGE 0x00401c3f\nLEA ECX,[RAX + 0x1]\nCMP ECX,R12D\nJGE 0x00401c3c\nMOV RCX,qword ptr [R15 + RAX*0x8 + 0x8]\nCMP byte ptr [RCX],0x70\nSETZ R13B\nJMP 0x00401c3f\nXOR R13D,R13D\nXOR ECX,ECX\nTEST R13B,R13B\nSETZ CL\nLEA RBX,[RCX + RCX*0x1 + 0x2]\nMOV ECX,R12D\nSUB ECX,EAX\nMOVSXD RCX,ECX\nCMP RCX,RBX\nJC 0x00401ec1\nMOV qword ptr [RSP],R14\nCMP RBX,RCX\nJC 0x00401f29\nMOVSXD RAX,dword ptr [0x00609270]\nMOV RCX,qword ptr [R15 + RAX*0x8 + 0x8]\nMOVSX ECX,byte ptr [RCX]\nADD ECX,-0x62\nCMP ECX,0x13\nJA 0x00401fac\nMOV R14D,0x6000\nJMP qword ptr [0x405090 + RCX*0x8]\nMOV R14D,0x2000\nMOV R12,qword ptr [R15 + RAX*0x8 + 0x10]\nMOV R13,qword ptr [R15 + RAX*0x8 + 0x18]\nLEA RCX,[RSP + 0x10]\nXOR ESI,ESI\nXOR EDX,EDX\nXOR R8D,R8D\nMOV RDI,R12\nCALL 0x00404600\nTEST EAX,EAX\nJNZ 0x00401cc6\nMOV RAX,qword ptr [RSP + 0x10]\nMOV ECX,EAX\nCMP RAX,RCX\nJZ 0x00401cf6\nXOR EDI,EDI\nMOV ESI,0x4057c2\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBX,RAX\nMOV RDI,R12\nCALL 0x00403b10\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004015e0\nLEA RCX,[RSP + 0x8]\nXOR ESI,ESI\nXOR EDX,EDX\nXOR R8D,R8D\nMOV RDI,R13\nCALL 0x00404600\nTEST EAX,EAX\nJNZ 0x00401d1a\nMOV RAX,qword ptr [RSP + 0x8]\nMOV ECX,EAX\nCMP RAX,RCX\nJZ 0x00401d4a\nXOR EDI,EDI\nMOV ESI,0x4057e1\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBX,RAX\nMOV RDI,R13\nCALL 0x00403b10\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004015e0\nMOV EDI,dword ptr [RSP + 0x10]\nMOV ESI,dword ptr [RSP + 0x8]\nCALL 0x00401680\nMOV RBX,RAX\nCMP RBX,-0x1\nJNZ 0x00401d8b\nXOR EDI,EDI\nMOV ESI,0x405800\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R12\nMOV R8,R13\nCALL 0x004015e0\nMOVSXD RAX,dword ptr [0x00609270]\nMOV RDI,qword ptr [R15 + RAX*0x8]\nOR R14D,EBP\nMOV ESI,R14D\nMOV RDX,RBX\nCALL 0x00404930\nTEST EAX,EAX\nJZ 0x00401ddc\nCALL 0x00401340\nMOV EBX,dword ptr [RAX]\nMOVSXD RAX,dword ptr [0x00609270]\nMOV RDX,qword ptr [R15 + RAX*0x8]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x004039d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x405a1d\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x004015e0\nMOV RBX,qword ptr [RSP]\nTEST RBX,RBX\nJZ 0x00401e3f\nMOVSXD RAX,dword ptr [0x00609270]\nMOV RDI,qword ptr [R15 + RAX*0x8]\nMOV ESI,EBP\nCALL 0x004015d0\nTEST EAX,EAX\nJZ 0x00401e3f\nCALL 0x00401340\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40582c\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBP,RAX\nMOVSXD RAX,dword ptr [0x00609270]\nMOV RSI,qword ptr [R15 + RAX*0x8]\nMOV EDI,0x4\nCALL 0x004038f0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x004015e0\nXOR EAX,EAX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [R15 + RAX*0x8]\nMOV ESI,EBP\nCALL 0x004014e0\nTEST EAX,EAX\nMOV RBX,qword ptr [RSP]\nJZ 0x00401de0\nCALL 0x00401340\nMOV R14D,dword ptr [RAX]\nMOVSXD RAX,dword ptr [0x00609270]\nMOV RDX,qword ptr [R15 + RAX*0x8]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x004039d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x405a1d\nXOR EAX,EAX\nMOV ESI,R14D\nCALL 0x004015e0\nTEST RBX,RBX\nJNZ 0x00401de5\nJMP 0x00401e3f\nCMP EAX,0xffffff7d\nJZ 0x00401efa\nCMP EAX,0xffffff7e\nJNZ 0x00401fec\nXOR EDI,EDI\nCALL 0x004017a0\nXOR EDI,EDI\nCMP EAX,R12D\nJL 0x00401ff6\nMOV ESI,0x405720\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004015e0\nTEST R13B,R13B\nJZ 0x0040202b\nJMP 0x00402067\nMOV RDI,qword ptr [0x00609268]\nMOV RCX,qword ptr [0x006091f0]\nMOV ESI,0x40565e\nMOV EDX,0x4056c9\nMOV R8D,0x4056d7\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x00404310\nXOR EDI,EDI\nCALL 0x00401630\nXOR EDI,EDI\nMOV ESI,0x40577f\nMOV EDX,0x5\nCALL 0x004013d0\nMOV R14,RAX\nMOVSXD RAX,dword ptr [0x00609270]\nADD RAX,RBX\nMOV RDI,qword ptr [R15 + RAX*0x8]\nCALL 0x00403b10\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x004015e0\nTEST R13B,R13B\nJZ 0x00401fa2\nSUB R12D,dword ptr [0x00609270]\nCMP R12D,0x4\nJNZ 0x00401fa2\nMOV RBX,qword ptr [0x006092a0]\nXOR EDI,EDI\nMOV ESI,0x405790\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x406480\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401650\nMOV EDI,0x1\nCALL 0x004017a0\nXOR EDI,EDI\nMOV ESI,0x405815\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBX,RAX\nMOVSXD RAX,dword ptr [0x00609270]\nMOV RDI,qword ptr [R15 + RAX*0x8 + 0x8]\nCALL 0x00403b10\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004015e0\nMOV EDI,0x1\nCALL 0x004017a0\nMOV EDI,0x1\nCALL 0x004017a0\nMOV ESI,0x405730\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBX,RAX\nMOVSXD RAX,R12D\nMOV RDI,qword ptr [R15 + RAX*0x8 + -0x8]\nCALL 0x00403b10\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004015e0\nTEST R13B,R13B\nJNZ 0x00402067\nSUB R12D,dword ptr [0x00609270]\nCMP R12D,0x2\nJNZ 0x00402067\nMOV RBX,qword ptr [0x006092a0]\nXOR EDI,EDI\nMOV ESI,0x405749\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x406480\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401650\nMOV EDI,0x1\nCALL 0x004017a0\nNOP dword ptr [RAX]\nNOP word ptr CS:[RAX + RAX*0x1]\nNOP\n'
p641
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f7\n41 89 fc\n49 8b 3f\ne8 64 0b 00 00\nbf 06 00 00 00\nbe 59 65 40 00\ne8 e5 fa ff ff\nbf cd 56 40 00\nbe 64 56 40 00\ne8 e6 f8 ff ff\nbf cd 56 40 00\ne8 bc f8 ff ff\nbf a0 20 40 00\ne8 22 35 00 00\n45 31 f6\neb 14\n4c 8b 35 71 77 20 00\nba 7c 56 40 00\nb9 30 51 40 00\n45 31 c0\n44 89 e7\n4c 89 fe\ne8 e1 f8 ff ff\n83 f8 59\n7e 4a\n83 f8 5a\n74 17\n83 f8 6d\n74 d2\ne9 b9 04 00 00\n48 83 3d 30 77 20 00 00\n74 bd\n31 ff\nbe 80 56 40 00\nba 05 00 00 00\ne8 75 f8 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 74 fa ff ff\neb 99\n83 f8 ff\n0f 85 31 03 00 00\n4d 85 f6\n0f 84 92 00 00 00\n4c 89 f7\ne8 d8 05 00 00\n48 89 c3\n48 85 db\n75 25\n31 ff\nbe e7 56 40 00\nba 05 00 00 00\ne8 2f f8 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 2b fa ff ff\n31 ff\ne8 34 f9 ff ff\n89 c5\n89 ef\ne8 2b f9 ff ff\nbf b6 01 00 00\n31 f6\n45 31 c0\n89 ea\n48 89 d9\ne8 07 09 00 00\n89 c5\n48 89 df\ne8 3d f7 ff ff\n81 fd 00 02 00 00\n72 2c\n31 ff\nbe f4 56 40 00\nba 05 00 00 00\ne8 d4 f7 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 d0 f9 ff ff\neb 05\nbd b6 01 00 00\n48 63 05 52 76 20 00\n41 b5 01\n44 39 e0\n7d 19\n8d 48 01\n44 39 e1\n7d 0e\n49 8b 4c c7 08\n80 39 70\n41 0f 94 c5\neb 03\n45 31 ed\n31 c9\n45 84 ed\n0f 94 c1\n48 8d 5c 09 02\n44 89 e1\n29 c1\n48 63 c9\n48 39 d9\n0f 82 64 02 00 00\n4c 89 34 24\n48 39 cb\n0f 82 bf 02 00 00\n48 63 05 ff 75 20 00\n49 8b 4c c7 08\n0f be 09\n83 c1 9e\n83 f9 13\n0f 87 27 03 00 00\n41 be 00 60 00 00\nff 24 cd 90 50 40 00\n41 be 00 20 00 00\n4d 8b 64 c7 10\n4d 8b 6c c7 18\n48 8d 4c 24 10\n31 f6\n31 d2\n45 31 c0\n4c 89 e7\ne8 4a 29 00 00\n85 c0\n75 0c\n48 8b 44 24 10\n89 c1\n48 39 c8\n74 30\n31 ff\nbe c2 57 40 00\nba 05 00 00 00\ne8 f9 f6 ff ff\n48 89 c3\n4c 89 e7\ne8 2e 1e 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 ea f8 ff ff\n48 8d 4c 24 08\n31 f6\n31 d2\n45 31 c0\n4c 89 ef\ne8 f6 28 00 00\n85 c0\n75 0c\n48 8b 44 24 08\n89 c1\n48 39 c8\n74 30\n31 ff\nbe e1 57 40 00\nba 05 00 00 00\ne8 a5 f6 ff ff\n48 89 c3\n4c 89 ef\ne8 da 1d 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 96 f8 ff ff\n8b 7c 24 10\n8b 74 24 08\ne8 29 f9 ff ff\n48 89 c3\n48 83 fb ff\n75 2b\n31 ff\nbe 00 58 40 00\nba 05 00 00 00\ne8 5f f6 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n4c 89 e1\n4d 89 e8\ne8 55 f8 ff ff\n48 63 05 de 74 20 00\n49 8b 3c c7\n41 09 ee\n44 89 f6\n48 89 da\ne8 8c 2b 00 00\n85 c0\n74 34\ne8 93 f5 ff ff\n8b 18\n48 63 05 ba 74 20 00\n49 8b 14 c7\n31 ff\nbe 03 00 00 00\ne8 0a 1c 00 00\n48 89 c1\nbf 01 00 00 00\nba 1d 5a 40 00\n31 c0\n89 de\ne8 04 f8 ff ff\n48 8b 1c 24\n48 85 db\n74 5a\n48 63 05 84 74 20 00\n49 8b 3c c7\n89 ee\ne8 d9 f7 ff ff\n85 c0\n74 44\ne8 40 f5 ff ff\n8b 18\n31 ff\nbe 2c 58 40 00\nba 05 00 00 00\ne8 bd f5 ff ff\n48 89 c5\n48 63 05 53 74 20 00\n49 8b 34 c7\nbf 04 00 00 00\ne8 c5 1a 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ea\ne8 a1 f7 ff ff\n31 c0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 8b 3c c7\n89 ee\ne8 85 f6 ff ff\n85 c0\n48 8b 1c 24\n0f 84 79 ff ff ff\ne8 d4 f4 ff ff\n44 8b 30\n48 63 05 fa 73 20 00\n49 8b 14 c7\n31 ff\nbe 03 00 00 00\ne8 4a 1b 00 00\n48 89 c1\nbf 01 00 00 00\nba 1d 5a 40 00\n31 c0\n44 89 f6\ne8 43 f7 ff ff\n48 85 db\n0f 85 3f ff ff ff\neb 97\n3d 7d ff ff ff\n74 4b\n3d 7e ff ff ff\n0f 85 32 01 00 00\n31 ff\ne8 df f8 ff ff\n31 ff\n44 39 e0\n0f 8c 2a 01 00 00\nbe 20 57 40 00\nba 05 00 00 00\ne8 f5 f4 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 f4 f6 ff ff\n45 84 ed\n0f 84 36 01 00 00\ne9 6d 01 00 00\n48 8b 3d 67 73 20 00\n48 8b 0d e8 72 20 00\nbe 5e 56 40 00\nba c9 56 40 00\n41 b8 d7 56 40 00\n45 31 c9\n31 c0\ne8 ee 23 00 00\n31 ff\ne8 07 f7 ff ff\n31 ff\nbe 7f 57 40 00\nba 05 00 00 00\ne8 96 f4 ff ff\n49 89 c6\n48 63 05 2c 73 20 00\n48 01 d8\n49 8b 3c c7\ne8 c0 1b 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 f2\ne8 7f f6 ff ff\n45 84 ed\n74 3c\n44 2b 25 03 73 20 00\n41 83 fc 04\n75 2f\n48 8b 1d 26 73 20 00\n31 ff\nbe 90 57 40 00\nba 05 00 00 00\ne8 45 f4 ff ff\n48 89 c1\nbe 01 00 00 00\nba 80 64 40 00\n31 c0\n48 89 df\ne8 ae f6 ff ff\nbf 01 00 00 00\ne8 f4 f7 ff ff\n31 ff\nbe 15 58 40 00\nba 05 00 00 00\ne8 13 f4 ff ff\n48 89 c3\n48 63 05 a9 72 20 00\n49 8b 7c c7 08\ne8 3f 1b 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 fe f5 ff ff\nbf 01 00 00 00\ne8 b4 f7 ff ff\nbf 01 00 00 00\ne8 aa f7 ff ff\nbe 30 57 40 00\nba 05 00 00 00\ne8 cb f3 ff ff\n48 89 c3\n49 63 c4\n49 8b 7c c7 f8\ne8 fb 1a 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 ba f5 ff ff\n45 84 ed\n75 3c\n44 2b 25 3e 72 20 00\n41 83 fc 02\n75 2f\n48 8b 1d 61 72 20 00\n31 ff\nbe 49 57 40 00\nba 05 00 00 00\ne8 80 f3 ff ff\n48 89 c1\nbe 01 00 00 00\nba 80 64 40 00\n31 c0\n48 89 df\ne8 e9 f5 ff ff\nbf 01 00 00 00\ne8 2f f7 ff ff\n0f 1f 00\n66 2e 0f 1f 84 00 00 00 00 00\n66 90\n'
p642
S'.text:0000000000401aa0\n.text:0000000000401aa1\n.text:0000000000401aa3\n.text:0000000000401aa5\n.text:0000000000401aa7\n.text:0000000000401aa9\n.text:0000000000401aaa\n.text:0000000000401aae\n.text:0000000000401ab1\n.text:0000000000401ab4\n.text:0000000000401ab7\n.text:0000000000401abc\n.text:0000000000401ac1\n.text:0000000000401ac6\n.text:0000000000401acb\n.text:0000000000401ad0\n.text:0000000000401ad5\n.text:0000000000401ada\n.text:0000000000401adf\n.text:0000000000401ae4\n.text:0000000000401ae9\n.text:0000000000401aee\n.text:0000000000401af1\n.text:0000000000401b00\n.text:0000000000401b07\n.text:0000000000401b0c\n.text:0000000000401b11\n.text:0000000000401b14\n.text:0000000000401b17\n.text:0000000000401b1a\n.text:0000000000401b1f\n.text:0000000000401b22\n.text:0000000000401b24\n.text:0000000000401b27\n.text:0000000000401b29\n.text:0000000000401b2c\n.text:0000000000401b2e\n.text:0000000000401b40\n.text:0000000000401b48\n.text:0000000000401b4a\n.text:0000000000401b4c\n.text:0000000000401b51\n.text:0000000000401b56\n.text:0000000000401b5b\n.text:0000000000401b5e\n.text:0000000000401b60\n.text:0000000000401b62\n.text:0000000000401b64\n.text:0000000000401b67\n.text:0000000000401b6c\n.text:0000000000401b6e\n.text:0000000000401b71\n.text:0000000000401b77\n.text:0000000000401b7a\n.text:0000000000401b80\n.text:0000000000401b83\n.text:0000000000401b88\n.text:0000000000401b8b\n.text:0000000000401b8e\n.text:0000000000401b90\n.text:0000000000401b92\n.text:0000000000401b97\n.text:0000000000401b9c\n.text:0000000000401ba1\n.text:0000000000401ba4\n.text:0000000000401ba9\n.text:0000000000401bab\n.text:0000000000401bad\n.text:0000000000401bb0\n.text:0000000000401bb5\n.text:0000000000401bb7\n.text:0000000000401bbc\n.text:0000000000401bbe\n.text:0000000000401bc0\n.text:0000000000401bc5\n.text:0000000000401bca\n.text:0000000000401bcc\n.text:0000000000401bcf\n.text:0000000000401bd1\n.text:0000000000401bd4\n.text:0000000000401bd9\n.text:0000000000401bdb\n.text:0000000000401bde\n.text:0000000000401be3\n.text:0000000000401be9\n.text:0000000000401beb\n.text:0000000000401bed\n.text:0000000000401bf2\n.text:0000000000401bf7\n.text:0000000000401bfc\n.text:0000000000401bff\n.text:0000000000401c04\n.text:0000000000401c06\n.text:0000000000401c08\n.text:0000000000401c0b\n.text:0000000000401c10\n.text:0000000000401c12\n.text:0000000000401c17\n.text:0000000000401c1e\n.text:0000000000401c21\n.text:0000000000401c24\n.text:0000000000401c26\n.text:0000000000401c29\n.text:0000000000401c2c\n.text:0000000000401c2e\n.text:0000000000401c33\n.text:0000000000401c36\n.text:0000000000401c3a\n.text:0000000000401c3c\n.text:0000000000401c3f\n.text:0000000000401c41\n.text:0000000000401c44\n.text:0000000000401c47\n.text:0000000000401c4c\n.text:0000000000401c4f\n.text:0000000000401c51\n.text:0000000000401c54\n.text:0000000000401c57\n.text:0000000000401c5d\n.text:0000000000401c61\n.text:0000000000401c64\n.text:0000000000401c6a\n.text:0000000000401c71\n.text:0000000000401c76\n.text:0000000000401c79\n.text:0000000000401c7c\n.text:0000000000401c7f\n.text:0000000000401c85\n.text:0000000000401c8b\n.text:0000000000401c92\n.text:0000000000401c98\n.text:0000000000401c9d\n.text:0000000000401ca2\n.text:0000000000401ca7\n.text:0000000000401ca9\n.text:0000000000401cab\n.text:0000000000401cae\n.text:0000000000401cb1\n.text:0000000000401cb6\n.text:0000000000401cb8\n.text:0000000000401cba\n.text:0000000000401cbf\n.text:0000000000401cc1\n.text:0000000000401cc4\n.text:0000000000401cc6\n.text:0000000000401cc8\n.text:0000000000401ccd\n.text:0000000000401cd2\n.text:0000000000401cd7\n.text:0000000000401cda\n.text:0000000000401cdd\n.text:0000000000401ce2\n.text:0000000000401ce5\n.text:0000000000401cea\n.text:0000000000401cec\n.text:0000000000401cee\n.text:0000000000401cf1\n.text:0000000000401cf6\n.text:0000000000401cfb\n.text:0000000000401cfd\n.text:0000000000401cff\n.text:0000000000401d02\n.text:0000000000401d05\n.text:0000000000401d0a\n.text:0000000000401d0c\n.text:0000000000401d0e\n.text:0000000000401d13\n.text:0000000000401d15\n.text:0000000000401d18\n.text:0000000000401d1a\n.text:0000000000401d1c\n.text:0000000000401d21\n.text:0000000000401d26\n.text:0000000000401d2b\n.text:0000000000401d2e\n.text:0000000000401d31\n.text:0000000000401d36\n.text:0000000000401d39\n.text:0000000000401d3e\n.text:0000000000401d40\n.text:0000000000401d42\n.text:0000000000401d45\n.text:0000000000401d4a\n.text:0000000000401d4e\n.text:0000000000401d52\n.text:0000000000401d57\n.text:0000000000401d5a\n.text:0000000000401d5e\n.text:0000000000401d60\n.text:0000000000401d62\n.text:0000000000401d67\n.text:0000000000401d6c\n.text:0000000000401d71\n.text:0000000000401d74\n.text:0000000000401d79\n.text:0000000000401d7b\n.text:0000000000401d7d\n.text:0000000000401d80\n.text:0000000000401d83\n.text:0000000000401d86\n.text:0000000000401d8b\n.text:0000000000401d92\n.text:0000000000401d96\n.text:0000000000401d99\n.text:0000000000401d9c\n.text:0000000000401d9f\n.text:0000000000401da4\n.text:0000000000401da6\n.text:0000000000401da8\n.text:0000000000401dad\n.text:0000000000401daf\n.text:0000000000401db6\n.text:0000000000401dba\n.text:0000000000401dbc\n.text:0000000000401dc1\n.text:0000000000401dc6\n.text:0000000000401dc9\n.text:0000000000401dce\n.text:0000000000401dd3\n.text:0000000000401dd5\n.text:0000000000401dd7\n.text:0000000000401ddc\n.text:0000000000401de0\n.text:0000000000401de3\n.text:0000000000401de5\n.text:0000000000401dec\n.text:0000000000401df0\n.text:0000000000401df2\n.text:0000000000401df7\n.text:0000000000401df9\n.text:0000000000401dfb\n.text:0000000000401e00\n.text:0000000000401e02\n.text:0000000000401e04\n.text:0000000000401e09\n.text:0000000000401e0e\n.text:0000000000401e13\n.text:0000000000401e16\n.text:0000000000401e1d\n.text:0000000000401e21\n.text:0000000000401e26\n.text:0000000000401e2b\n.text:0000000000401e2e\n.text:0000000000401e33\n.text:0000000000401e35\n.text:0000000000401e37\n.text:0000000000401e3a\n.text:0000000000401e3f\n.text:0000000000401e41\n.text:0000000000401e45\n.text:0000000000401e46\n.text:0000000000401e48\n.text:0000000000401e4a\n.text:0000000000401e4c\n.text:0000000000401e4e\n.text:0000000000401e4f\n.text:0000000000401e50\n.text:0000000000401e54\n.text:0000000000401e56\n.text:0000000000401e5b\n.text:0000000000401e5d\n.text:0000000000401e61\n.text:0000000000401e67\n.text:0000000000401e6c\n.text:0000000000401e6f\n.text:0000000000401e76\n.text:0000000000401e7a\n.text:0000000000401e7c\n.text:0000000000401e81\n.text:0000000000401e86\n.text:0000000000401e89\n.text:0000000000401e8e\n.text:0000000000401e93\n.text:0000000000401e95\n.text:0000000000401e98\n.text:0000000000401e9d\n.text:0000000000401ea0\n.text:0000000000401ea6\n.text:0000000000401ea8\n.text:0000000000401ead\n.text:0000000000401eaf\n.text:0000000000401eb4\n.text:0000000000401eba\n.text:0000000000401ebc\n.text:0000000000401ec1\n.text:0000000000401ec3\n.text:0000000000401ec6\n.text:0000000000401ecc\n.text:0000000000401ed1\n.text:0000000000401ed6\n.text:0000000000401edb\n.text:0000000000401ede\n.text:0000000000401ee0\n.text:0000000000401ee2\n.text:0000000000401ee4\n.text:0000000000401ee7\n.text:0000000000401eec\n.text:0000000000401eef\n.text:0000000000401ef5\n.text:0000000000401efa\n.text:0000000000401f01\n.text:0000000000401f08\n.text:0000000000401f0d\n.text:0000000000401f12\n.text:0000000000401f18\n.text:0000000000401f1b\n.text:0000000000401f1d\n.text:0000000000401f22\n.text:0000000000401f24\n.text:0000000000401f29\n.text:0000000000401f2b\n.text:0000000000401f30\n.text:0000000000401f35\n.text:0000000000401f3a\n.text:0000000000401f3d\n.text:0000000000401f44\n.text:0000000000401f47\n.text:0000000000401f4b\n.text:0000000000401f50\n.text:0000000000401f53\n.text:0000000000401f55\n.text:0000000000401f57\n.text:0000000000401f59\n.text:0000000000401f5c\n.text:0000000000401f61\n.text:0000000000401f64\n.text:0000000000401f66\n.text:0000000000401f6d\n.text:0000000000401f71\n.text:0000000000401f73\n.text:0000000000401f7a\n.text:0000000000401f7c\n.text:0000000000401f81\n.text:0000000000401f86\n.text:0000000000401f8b\n.text:0000000000401f8e\n.text:0000000000401f93\n.text:0000000000401f98\n.text:0000000000401f9a\n.text:0000000000401f9d\n.text:0000000000401fa2\n.text:0000000000401fa7\n.text:0000000000401fac\n.text:0000000000401fae\n.text:0000000000401fb3\n.text:0000000000401fb8\n.text:0000000000401fbd\n.text:0000000000401fc0\n.text:0000000000401fc7\n.text:0000000000401fcc\n.text:0000000000401fd1\n.text:0000000000401fd4\n.text:0000000000401fd6\n.text:0000000000401fd8\n.text:0000000000401fda\n.text:0000000000401fdd\n.text:0000000000401fe2\n.text:0000000000401fe7\n.text:0000000000401fec\n.text:0000000000401ff1\n.text:0000000000401ff6\n.text:0000000000401ffb\n.text:0000000000402000\n.text:0000000000402005\n.text:0000000000402008\n.text:000000000040200b\n.text:0000000000402010\n.text:0000000000402015\n.text:0000000000402018\n.text:000000000040201a\n.text:000000000040201c\n.text:000000000040201e\n.text:0000000000402021\n.text:0000000000402026\n.text:0000000000402029\n.text:000000000040202b\n.text:0000000000402032\n.text:0000000000402036\n.text:0000000000402038\n.text:000000000040203f\n.text:0000000000402041\n.text:0000000000402046\n.text:000000000040204b\n.text:0000000000402050\n.text:0000000000402053\n.text:0000000000402058\n.text:000000000040205d\n.text:000000000040205f\n.text:0000000000402062\n.text:0000000000402067\n.text:000000000040206c\n.text:0000000000402071\n.text:0000000000402074\n.text:000000000040207e\n'
p643
tp644
sS'realloc'
p645
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p646
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00609158)();\u000a  return pvVar1;\u000a}\u000a\u000a
p647
S'JMP qword ptr [0x00609158]\n'
p648
S'ff 25 c2 7b 20 00\n'
p649
S'.plt:0000000000401590\n'
p650
tp651
sS'xcharalloc'
p652
(S'\n__stdcall xcharalloc(size_t n)\n'
p653
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p654
S'JMP 0x00404440\n'
p655
S'e9 2b ff ff ff\n'
p656
S'.text:0000000000404510\n'
p657
tp658
sS'c_isupper'
p659
(S'\n__stdcall c_isupper()\n'
p660
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p661
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p662
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p663
S'.text:0000000000404a60\n.text:0000000000404a63\n.text:0000000000404a66\n.text:0000000000404a69\n'
p664
tp665
sS'__fprintf_chk'
p666
(S'\n__stdcall __fprintf_chk()\n'
p667
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_006091b8)();\u000a  return;\u000a}\u000a\u000a
p668
S'JMP qword ptr [0x006091b8]\n'
p669
S'ff 25 62 7b 20 00\n'
p670
S'.plt:0000000000401650\n'
p671
tp672
sS'get_charset_aliases'
p673
(S'\n__stdcall get_charset_aliases()\n'
p674
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00404dc4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00404dc4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00404dc4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00404dc4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00404dc4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00404dc4_caseD_9;\u000a      case -1:\u000a        goto switchD_00404dc4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00404e1d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00404e23:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00404dc4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00404e23;\u000a  }\u000a  goto LAB_00404e1d;\u000a}\u000a\u000a
p675
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x00609410]\nTEST R15,R15\nJNZ 0x00404e32\nMOV EDI,0x406e04\nCALL 0x00401310\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00404be8\nCMP byte ptr [RBX],0x0\nJNZ 0x00404bed\nMOV EBX,0x406e14\nMOV RDI,RBX\nCALL 0x004013f0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00404c07\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00404c09\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401540\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00404c5d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401500\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00404c68\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00404c85\nMOV R15D,0x406559\nJMP 0x00404e2b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004015f0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00404e1d\nMOV ESI,0x405a17\nMOV EDI,EBP\nCALL 0x004015a0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00404de4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00404db0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401370\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401370\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00404db0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401570\nMOV ESI,0x406e23\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401470\nCMP EAX,0x2\nJL 0x00404e04\nMOV RDI,R12\nCALL 0x004013f0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004013f0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00404d8d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401590\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00404cd4\nJMP 0x00404ded\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401540\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00404cd4\nJMP 0x00404ded\nMOV RDI,RBX\nCALL 0x00401390\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00404d17\nJMP qword ptr [0x406cc8 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401390\nCMP EAX,-0x1\nJZ 0x00404e04\nCMP EAX,0xa\nJNZ 0x00404dd0\nJMP 0x00404db0\nMOV EDI,EBP\nCALL 0x00401480\nJMP 0x00404e1d\nMOV RDI,R15\nCALL 0x00401320\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00404e50\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00404e1d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00404e23\nMOV R15D,0x406559\nMOV RDI,R13\nCALL 0x00401320\nMOV qword ptr [0x00609410],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p676
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 48 48 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 04 6e 40 00\ne8 35 c7 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 14 6e 40 00\n48 89 df\ne8 fb c7 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 29 c9 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 d3 c8 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 59 65 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 5c c9 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 17 5a 40 00\n89 ef\ne8 f6 c8 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 7b c6 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 6b c6 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 4f c8 ff ff\nbe 23 6e 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 3a c7 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 a9 c6 ff ff\n49 89 c4\n48 89 ef\ne8 9e c6 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 16 c8 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 a5 c7 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 d8 c5 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd c8 6c 40 00\n48 89 df\ne8 b8 c5 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 95 c6 ff ff\neb 30\n4c 89 ff\ne8 2b c5 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 44 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 59 65 40 00\n4c 89 ef\ne8 f5 c4 ff ff\n4c 89 3d de 45 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p677
S'.text:0000000000404bb0\n.text:0000000000404bb1\n.text:0000000000404bb3\n.text:0000000000404bb5\n.text:0000000000404bb7\n.text:0000000000404bb9\n.text:0000000000404bba\n.text:0000000000404bc1\n.text:0000000000404bc8\n.text:0000000000404bcb\n.text:0000000000404bd1\n.text:0000000000404bd6\n.text:0000000000404bdb\n.text:0000000000404bde\n.text:0000000000404be1\n.text:0000000000404be3\n.text:0000000000404be6\n.text:0000000000404be8\n.text:0000000000404bed\n.text:0000000000404bf0\n.text:0000000000404bf5\n.text:0000000000404bf8\n.text:0000000000404bfb\n.text:0000000000404bfd\n.text:0000000000404c02\n.text:0000000000404c05\n.text:0000000000404c07\n.text:0000000000404c09\n.text:0000000000404c0d\n.text:0000000000404c12\n.text:0000000000404c17\n.text:0000000000404c1a\n.text:0000000000404c1d\n.text:0000000000404c1f\n.text:0000000000404c22\n.text:0000000000404c25\n.text:0000000000404c28\n.text:0000000000404c2d\n.text:0000000000404c30\n.text:0000000000404c33\n.text:0000000000404c36\n.text:0000000000404c38\n.text:0000000000404c3e\n.text:0000000000404c48\n.text:0000000000404c4d\n.text:0000000000404c57\n.text:0000000000404c5b\n.text:0000000000404c5d\n.text:0000000000404c63\n.text:0000000000404c68\n.text:0000000000404c72\n.text:0000000000404c77\n.text:0000000000404c81\n.text:0000000000404c85\n.text:0000000000404c8a\n.text:0000000000404c8c\n.text:0000000000404c8f\n.text:0000000000404c94\n.text:0000000000404c96\n.text:0000000000404c98\n.text:0000000000404c9e\n.text:0000000000404ca3\n.text:0000000000404ca5\n.text:0000000000404caa\n.text:0000000000404cad\n.text:0000000000404cb0\n.text:0000000000404cb6\n.text:0000000000404cbb\n.text:0000000000404cc0\n.text:0000000000404cc2\n.text:0000000000404cc7\n.text:0000000000404cca\n.text:0000000000404ccf\n.text:0000000000404cd4\n.text:0000000000404cd9\n.text:0000000000404cdc\n.text:0000000000404cdf\n.text:0000000000404ce2\n.text:0000000000404ce5\n.text:0000000000404ce8\n.text:0000000000404ced\n.text:0000000000404cf0\n.text:0000000000404cf5\n.text:0000000000404cf8\n.text:0000000000404cfd\n.text:0000000000404d00\n.text:0000000000404d05\n.text:0000000000404d0a\n.text:0000000000404d0d\n.text:0000000000404d12\n.text:0000000000404d17\n.text:0000000000404d19\n.text:0000000000404d1c\n.text:0000000000404d21\n.text:0000000000404d26\n.text:0000000000404d28\n.text:0000000000404d2b\n.text:0000000000404d2e\n.text:0000000000404d31\n.text:0000000000404d36\n.text:0000000000404d39\n.text:0000000000404d3f\n.text:0000000000404d42\n.text:0000000000404d47\n.text:0000000000404d4a\n.text:0000000000404d4d\n.text:0000000000404d52\n.text:0000000000404d55\n.text:0000000000404d5a\n.text:0000000000404d5f\n.text:0000000000404d62\n.text:0000000000404d64\n.text:0000000000404d68\n.text:0000000000404d6d\n.text:0000000000404d72\n.text:0000000000404d75\n.text:0000000000404d7a\n.text:0000000000404d7d\n.text:0000000000404d82\n.text:0000000000404d85\n.text:0000000000404d8b\n.text:0000000000404d8d\n.text:0000000000404d92\n.text:0000000000404d96\n.text:0000000000404d9b\n.text:0000000000404d9e\n.text:0000000000404da1\n.text:0000000000404da7\n.text:0000000000404db0\n.text:0000000000404db3\n.text:0000000000404db8\n.text:0000000000404dbb\n.text:0000000000404dbe\n.text:0000000000404dc4\n.text:0000000000404dd0\n.text:0000000000404dd3\n.text:0000000000404dd8\n.text:0000000000404ddb\n.text:0000000000404ddd\n.text:0000000000404de0\n.text:0000000000404de2\n.text:0000000000404de4\n.text:0000000000404de6\n.text:0000000000404deb\n.text:0000000000404ded\n.text:0000000000404df0\n.text:0000000000404df5\n.text:0000000000404df7\n.text:0000000000404dfc\n.text:0000000000404dff\n.text:0000000000404e04\n.text:0000000000404e07\n.text:0000000000404e0c\n.text:0000000000404e11\n.text:0000000000404e14\n.text:0000000000404e16\n.text:0000000000404e1b\n.text:0000000000404e1d\n.text:0000000000404e23\n.text:0000000000404e26\n.text:0000000000404e2b\n.text:0000000000404e32\n.text:0000000000404e35\n.text:0000000000404e3c\n.text:0000000000404e3d\n.text:0000000000404e3f\n.text:0000000000404e41\n.text:0000000000404e43\n.text:0000000000404e45\n.text:0000000000404e46\n'
p678
tp679
sS'nl_langinfo'
p680
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p681
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00609140)();\u000a  return pcVar1;\u000a}\u000a\u000a
p682
S'JMP qword ptr [0x00609140]\n'
p683
S'ff 25 da 7b 20 00\n'
p684
S'.plt:0000000000401560\n'
p685
tp686
sS'c_isalnum'
p687
(S'\n__stdcall c_isalnum()\n'
p688
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p689
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x0040497b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x0040497b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x0040497a\nXOR EAX,EAX\nRET\n'
p690
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p691
S'.text:0000000000404960\n.text:0000000000404962\n.text:0000000000404965\n.text:0000000000404968\n.text:000000000040496a\n.text:0000000000404974\n.text:0000000000404978\n.text:000000000040497a\n.text:000000000040497b\n.text:000000000040497e\n.text:0000000000404981\n.text:0000000000404983\n.text:0000000000404985\n'
p692
tp693
sS'x2realloc'
p694
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p695
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p696
S'MOV EDX,0x1\nJMP 0x004044b0\n'
p697
S'ba 01 00 00 00\neb 89\n'
p698
S'.text:0000000000404520\n.text:0000000000404525\n'
p699
tp700
sS'strlen'
p701
(S'\n__stdcall strlen(char * __s)\n'
p702
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_00609088)();\u000a  return sVar1;\u000a}\u000a\u000a
p703
S'JMP qword ptr [0x00609088]\n'
p704
S'ff 25 92 7c 20 00\n'
p705
S'.plt:00000000004013f0\n'
p706
tp707
sS'memcmp'
p708
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p709
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_006090d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x006090d8]\n'
p711
S'ff 25 42 7c 20 00\n'
p712
S'.plt:0000000000401490\n'
p713
tp714
sS'quotearg_n_style_mem'
p715
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p716
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p717
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403850\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403620\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p718
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p719
S'.text:00000000004038b0\n.text:00000000004038b1\n.text:00000000004038b3\n.text:00000000004038b5\n.text:00000000004038b6\n.text:00000000004038ba\n.text:00000000004038bd\n.text:00000000004038c0\n.text:00000000004038c2\n.text:00000000004038c5\n.text:00000000004038c8\n.text:00000000004038cd\n.text:00000000004038cf\n.text:00000000004038d2\n.text:00000000004038d5\n.text:00000000004038d8\n.text:00000000004038dd\n.text:00000000004038e1\n.text:00000000004038e2\n.text:00000000004038e4\n.text:00000000004038e6\n.text:00000000004038e7\n'
p720
tp721
sS'_exit'
p722
(S'\n__stdcall _exit(int __status)\n'
p723
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00609040)();\u000a  return;\u000a}\u000a\u000a
p724
S'JMP qword ptr [0x00609040]\n'
p725
S'ff 25 da 7c 20 00\n'
p726
S'.plt:0000000000401360\n'
p727
tp728
sS'__errno_location'
p729
(S'\n__stdcall __errno_location()\n'
p730
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00609030)();\u000a  return piVar1;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x00609030]\n'
p732
S'ff 25 ea 7c 20 00\n'
p733
S'.plt:0000000000401340\n'
p734
tp735
sS'bkm_scale_by_power'
p736
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p737
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p738
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x004048d1\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00404870\nOR EBP,EAX\nDEC EBX\nJNZ 0x004048c0\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p739
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p740
S'.text:00000000004048a0\n.text:00000000004048a1\n.text:00000000004048a3\n.text:00000000004048a5\n.text:00000000004048a6\n.text:00000000004048a7\n.text:00000000004048a9\n.text:00000000004048ac\n.text:00000000004048af\n.text:00000000004048b1\n.text:00000000004048b3\n.text:00000000004048b5\n.text:00000000004048c0\n.text:00000000004048c3\n.text:00000000004048c6\n.text:00000000004048cb\n.text:00000000004048cd\n.text:00000000004048cf\n.text:00000000004048d1\n.text:00000000004048d3\n.text:00000000004048d7\n.text:00000000004048d8\n.text:00000000004048da\n.text:00000000004048dc\n.text:00000000004048dd\n'
p741
tp742
sS'mode_create_from_ref'
p743
(S'\n__stdcall mode_create_from_ref(char * ref_file)\n'
p744
V\u000amode_change * mode_create_from_ref(char *ref_file)\u000a\u000a{\u000a  int iVar1;\u000a  mode_change *pmVar2;\u000a  stat ref_stats;\u000a  stat local_90;\u000a  \u000a  iVar1 = stat(ref_file,&local_90);\u000a  if (iVar1 != 0) {\u000a    return (mode_change *)0x0;\u000a  }\u000a  pmVar2 = make_node_op_equals();\u000a  return pmVar2;\u000a}\u000a\u000a
p745
S'SUB RSP,0x98\nLEA RSI,[RSP + 0x8]\nCALL 0x00405040\nTEST EAX,EAX\nJZ 0x004024bf\nXOR EAX,EAX\nADD RSP,0x98\nRET\nMOV EDI,dword ptr [RSP + 0x20]\nMOV ESI,0xfff\nCALL 0x00402470\nADD RSP,0x98\nRET\n'
p746
S'48 81 ec 98 00 00 00\n48 8d 74 24 08\ne8 8f 2b 00 00\n85 c0\n74 0a\n31 c0\n48 81 c4 98 00 00 00\nc3\n8b 7c 24 20\nbe ff 0f 00 00\ne8 a3 ff ff ff\n48 81 c4 98 00 00 00\nc3\n'
p747
S'.text:00000000004024a0\n.text:00000000004024a7\n.text:00000000004024ac\n.text:00000000004024b1\n.text:00000000004024b3\n.text:00000000004024b5\n.text:00000000004024b7\n.text:00000000004024be\n.text:00000000004024bf\n.text:00000000004024c3\n.text:00000000004024c8\n.text:00000000004024cd\n.text:00000000004024d4\n'
p748
tp749
sS'x2nrealloc'
p750
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p751
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p752
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x004044dc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404509\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004044fa\nTEST RCX,RCX\nJNZ 0x004044fa\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00404480\nPUSH RAX\nCALL 0x004045d0\n'
p753
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p754
S'.text:00000000004044b0\n.text:00000000004044b3\n.text:00000000004044b6\n.text:00000000004044b9\n.text:00000000004044bb\n.text:00000000004044c5\n.text:00000000004044c7\n.text:00000000004044ca\n.text:00000000004044cd\n.text:00000000004044cf\n.text:00000000004044d2\n.text:00000000004044d5\n.text:00000000004044da\n.text:00000000004044dc\n.text:00000000004044df\n.text:00000000004044e1\n.text:00000000004044e6\n.text:00000000004044e8\n.text:00000000004044eb\n.text:00000000004044ed\n.text:00000000004044f4\n.text:00000000004044f7\n.text:00000000004044fa\n.text:00000000004044fd\n.text:0000000000404501\n.text:0000000000404504\n.text:0000000000404509\n.text:000000000040450a\n'
p755
tp756
sS'xrealloc'
p757
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p758
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p759
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00404497\nTEST RBX,RBX\nJNZ 0x00404497\nCALL 0x00401320\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401590\nTEST RBX,RBX\nJZ 0x004044a9\nTEST RAX,RAX\nJZ 0x004044ab\nPOP RBX\nRET\nCALL 0x004045d0\n'
p760
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 8d ce ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 f1 d0 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p761
S'.text:0000000000404480\n.text:0000000000404481\n.text:0000000000404484\n.text:0000000000404487\n.text:0000000000404489\n.text:000000000040448c\n.text:000000000040448e\n.text:0000000000404493\n.text:0000000000404495\n.text:0000000000404496\n.text:0000000000404497\n.text:000000000040449a\n.text:000000000040449f\n.text:00000000004044a2\n.text:00000000004044a4\n.text:00000000004044a7\n.text:00000000004044a9\n.text:00000000004044aa\n.text:00000000004044ab\n'
p762
tp763
sS'quotearg_n_options'
p764
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p765
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p766
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401340\nTEST R12D,R12D\nJS 0x004037d1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x00609200]\nCMP dword ptr [0x00609208],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x004036eb\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x609210\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00404480\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x00609200],R15\nJNZ 0x004036b2\nMOVUPS XMM0,xmmword ptr [0x00609210]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x00609208]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401460\nMOV dword ptr [0x00609208],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00402840\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040374d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x004037bb\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x609310\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00403778\nCALL 0x00401320\nMOV RDI,R15\nCALL 0x00404510\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00402840\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401330\n'
p767
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 01 dd ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 a6 5b 20 00\n44 39 25 a7 5b 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 10 92 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 e8 0d 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 5b 5b 20 00\n75 0b\n0f 10 05 62 5b 20 00\n41 0f 11 07\n8b 05 50 5b 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 8d dd ff ff\n89 1d 2f 5b 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 10 93 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 a8 db ff ff\n4c 89 ff\ne8 90 0d 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 5a db ff ff\n'
p768
S'.text:0000000000403620\n.text:0000000000403621\n.text:0000000000403623\n.text:0000000000403625\n.text:0000000000403627\n.text:0000000000403629\n.text:000000000040362a\n.text:000000000040362e\n.text:0000000000403631\n.text:0000000000403634\n.text:0000000000403637\n.text:000000000040363a\n.text:000000000040363f\n.text:0000000000403642\n.text:0000000000403648\n.text:000000000040364d\n.text:000000000040364f\n.text:0000000000403653\n.text:000000000040365a\n.text:0000000000403661\n.text:0000000000403666\n.text:000000000040366b\n.text:0000000000403670\n.text:0000000000403672\n.text:0000000000403677\n.text:000000000040367a\n.text:000000000040367d\n.text:0000000000403683\n.text:0000000000403685\n.text:0000000000403688\n.text:000000000040368c\n.text:000000000040368f\n.text:0000000000403693\n.text:0000000000403698\n.text:000000000040369b\n.text:000000000040369e\n.text:00000000004036a5\n.text:00000000004036a7\n.text:00000000004036ae\n.text:00000000004036b2\n.text:00000000004036b8\n.text:00000000004036bb\n.text:00000000004036bf\n.text:00000000004036c2\n.text:00000000004036c5\n.text:00000000004036c9\n.text:00000000004036cb\n.text:00000000004036ce\n.text:00000000004036d3\n.text:00000000004036d9\n.text:00000000004036dc\n.text:00000000004036e1\n.text:00000000004036e6\n.text:00000000004036eb\n.text:00000000004036ee\n.text:00000000004036f2\n.text:00000000004036f6\n.text:00000000004036fb\n.text:00000000004036ff\n.text:0000000000403703\n.text:0000000000403707\n.text:000000000040370b\n.text:000000000040370f\n.text:0000000000403714\n.text:0000000000403717\n.text:000000000040371a\n.text:000000000040371d\n.text:0000000000403722\n.text:0000000000403725\n.text:0000000000403728\n.text:000000000040372b\n.text:000000000040372c\n.text:0000000000403731\n.text:0000000000403735\n.text:0000000000403738\n.text:000000000040373b\n.text:000000000040373d\n.text:0000000000403742\n.text:0000000000403746\n.text:000000000040374b\n.text:000000000040374d\n.text:0000000000403751\n.text:0000000000403756\n.text:0000000000403759\n.text:000000000040375c\n.text:0000000000403761\n.text:0000000000403766\n.text:0000000000403769\n.text:000000000040376e\n.text:0000000000403771\n.text:0000000000403773\n.text:0000000000403778\n.text:000000000040377b\n.text:0000000000403780\n.text:0000000000403783\n.text:0000000000403786\n.text:000000000040378b\n.text:000000000040378e\n.text:0000000000403792\n.text:0000000000403795\n.text:0000000000403798\n.text:000000000040379d\n.text:00000000004037a2\n.text:00000000004037a7\n.text:00000000004037aa\n.text:00000000004037ad\n.text:00000000004037ae\n.text:00000000004037b3\n.text:00000000004037b7\n.text:00000000004037bb\n.text:00000000004037bf\n.text:00000000004037c2\n.text:00000000004037c6\n.text:00000000004037c7\n.text:00000000004037c9\n.text:00000000004037cb\n.text:00000000004037cd\n.text:00000000004037cf\n.text:00000000004037d0\n.text:00000000004037d1\n'
p769
tp770
sS'strcmp'
p771
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p772
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_006090f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p773
S'JMP qword ptr [0x006090f8]\n'
p774
S'ff 25 22 7c 20 00\n'
p775
S'.plt:00000000004014d0\n'
p776
tp777
sS'set_custom_quoting'
p778
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p779
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p780
S'TEST RDI,RDI\nMOV EAX,0x6092d0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x004027b5\nTEST RDX,RDX\nJZ 0x004027b5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401330\n'
p781
S'48 85 ff\nb8 d0 92 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 75 eb ff ff\n'
p782
S'.text:0000000000402790\n.text:0000000000402793\n.text:0000000000402798\n.text:000000000040279c\n.text:00000000004027a2\n.text:00000000004027a5\n.text:00000000004027a7\n.text:00000000004027aa\n.text:00000000004027ac\n.text:00000000004027b0\n.text:00000000004027b4\n.text:00000000004027b5\n.text:00000000004027b6\n'
p783
tp784
sS'c_isalpha'
p785
(S'\n__stdcall c_isalpha()\n'
p786
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p787
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x004049ab\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p788
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p789
S'.text:0000000000404990\n.text:0000000000404993\n.text:0000000000404996\n.text:0000000000404998\n.text:00000000004049a2\n.text:00000000004049a4\n.text:00000000004049a7\n.text:00000000004049aa\n.text:00000000004049ab\n.text:00000000004049ad\n'
p790
tp791
sS'quotearg_custom_mem'
p792
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p793
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p794
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00403a30\n'
p795
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p796
S'.text:0000000000403ac0\n.text:0000000000403ac3\n.text:0000000000403ac6\n.text:0000000000403ac9\n.text:0000000000403acc\n.text:0000000000403ace\n.text:0000000000403ad1\n'
p797
tp798
sS'close_stdout'
p799
(S'\n__stdcall close_stdout()\n'
p800
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_004020c7;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x405a1d,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_004020c7:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p801
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x00609268]\nCALL 0x00404ab0\nTEST EAX,EAX\nJZ 0x004020c7\nCMP byte ptr [0x006092b8],0x0\nJZ 0x004020dc\nCALL 0x00401340\nCMP dword ptr [RAX],0x20\nJNZ 0x004020dc\nMOV RDI,qword ptr [0x006092a0]\nCALL 0x00404ab0\nTEST EAX,EAX\nJNZ 0x00402121\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x405a0d\nMOV EDX,0x5\nCALL 0x004013d0\nMOV R14,RAX\nMOV RBX,qword ptr [0x006092b0]\nCALL 0x00401340\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x0040212c\nXOR EDI,EDI\nMOV EDX,0x405a1d\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004015e0\nMOV EDI,dword ptr [0x006091f8]\nCALL 0x00401360\nMOV EDI,dword ptr [0x006091f8]\nCALL 0x00401360\nMOV RDI,RBX\nCALL 0x004039b0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x405a19\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004015e0\nMOV EDI,dword ptr [0x006091f8]\nCALL 0x00401360\n'
p802
S'55\n41 56\n53\n48 8b 3d bd 71 20 00\ne8 00 2a 00 00\n85 c0\n74 13\n80 3d fd 71 20 00 00\n74 1f\ne8 7e f2 ff ff\n83 38 20\n75 15\n48 8b 3d d2 71 20 00\ne8 dd 29 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 0d 5a 40 00\nba 05 00 00 00\ne8 e3 f2 ff ff\n49 89 c6\n48 8b 1d b9 71 20 00\ne8 44 f2 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 1d 5a 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 ca f4 ff ff\n8b 3d dc 70 20 00\ne8 3f f2 ff ff\n8b 3d d1 70 20 00\ne8 34 f2 ff ff\n48 89 df\ne8 7c 18 00 00\n48 89 c1\n31 ff\nba 19 5a 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 96 f4 ff ff\n8b 3d a8 70 20 00\ne8 0b f2 ff ff\n'
p803
S'.text:00000000004020a0\n.text:00000000004020a1\n.text:00000000004020a3\n.text:00000000004020a4\n.text:00000000004020ab\n.text:00000000004020b0\n.text:00000000004020b2\n.text:00000000004020b4\n.text:00000000004020bb\n.text:00000000004020bd\n.text:00000000004020c2\n.text:00000000004020c5\n.text:00000000004020c7\n.text:00000000004020ce\n.text:00000000004020d3\n.text:00000000004020d5\n.text:00000000004020d7\n.text:00000000004020d8\n.text:00000000004020da\n.text:00000000004020db\n.text:00000000004020dc\n.text:00000000004020de\n.text:00000000004020e3\n.text:00000000004020e8\n.text:00000000004020ed\n.text:00000000004020f0\n.text:00000000004020f7\n.text:00000000004020fc\n.text:00000000004020ff\n.text:0000000000402101\n.text:0000000000402103\n.text:0000000000402105\n.text:000000000040210a\n.text:000000000040210c\n.text:000000000040210e\n.text:0000000000402111\n.text:0000000000402116\n.text:000000000040211c\n.text:0000000000402121\n.text:0000000000402127\n.text:000000000040212c\n.text:000000000040212f\n.text:0000000000402134\n.text:0000000000402137\n.text:0000000000402139\n.text:000000000040213e\n.text:0000000000402140\n.text:0000000000402142\n.text:0000000000402145\n.text:000000000040214a\n.text:0000000000402150\n'
p804
tp805
sS'version_etc_ar'
p806
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p807
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p808
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00404290\nJMP 0x00403f20\n'
p809
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p810
S'.text:0000000000404280\n.text:0000000000404287\n.text:0000000000404290\n.text:0000000000404296\n.text:000000000040429a\n.text:000000000040429c\n'
p811
tp812
sS'strtoumax'
p813
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p814
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_00609198)();\u000a  return uVar1;\u000a}\u000a\u000a
p815
S'JMP qword ptr [0x00609198]\n'
p816
S'ff 25 82 7b 20 00\n'
p817
S'.plt:0000000000401610\n'
p818
tp819
sS'rpl_calloc'
p820
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p821
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_006090f0)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p822
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x0040491b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00404920\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00404920\nPUSH RAX\nCALL 0x00401340\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004014c0\n'
p823
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 2f ca ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 95 cb ff ff\n'
p824
S'.text:00000000004048e0\n.text:00000000004048e3\n.text:00000000004048e8\n.text:00000000004048ea\n.text:00000000004048ed\n.text:00000000004048f2\n.text:00000000004048f4\n.text:00000000004048f7\n.text:00000000004048fb\n.text:00000000004048fd\n.text:0000000000404900\n.text:0000000000404903\n.text:0000000000404906\n.text:0000000000404909\n.text:000000000040490b\n.text:000000000040490c\n.text:0000000000404911\n.text:0000000000404917\n.text:0000000000404919\n.text:000000000040491a\n.text:000000000040491b\n.text:0000000000404920\n.text:0000000000404923\n.text:0000000000404926\n'
p825
tp826
sS'memset'
p827
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p828
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006090c0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p829
S'JMP qword ptr [0x006090c0]\n'
p830
S'ff 25 5a 7c 20 00\n'
p831
S'.plt:0000000000401460\n'
p832
tp833
sS'c_isxdigit'
p834
(S'\n__stdcall c_isxdigit()\n'
p835
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p836
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00404a8b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p837
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p838
S'.text:0000000000404a70\n.text:0000000000404a73\n.text:0000000000404a76\n.text:0000000000404a78\n.text:0000000000404a82\n.text:0000000000404a84\n.text:0000000000404a87\n.text:0000000000404a8a\n.text:0000000000404a8b\n.text:0000000000404a8d\n'
p839
tp840
sS'__libc_csu_fini'
p841
(S'\n__stdcall __libc_csu_fini()\n'
p842
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p843
S'RET\n'
p844
S'f3 c3\n'
p845
S'.text:0000000000405000\n'
p846
tp847
sS'getc_unlocked'
p848
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p849
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00609058)();\u000a  return iVar1;\u000a}\u000a\u000a
p850
S'JMP qword ptr [0x00609058]\n'
p851
S'ff 25 c2 7c 20 00\n'
p852
S'.plt:0000000000401390\n'
p853
tp854
sS'abort'
p855
(S'\n__stdcall abort()\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00609028)();\u000a  return;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x00609028]\n'
p858
S'ff 25 f2 7c 20 00\n'
p859
S'.plt:0000000000401330\n'
p860
tp861
sS'c_isascii'
p862
(S'\n__stdcall c_isascii()\n'
p863
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p864
S'CMP EDI,0x80\nSETC AL\nRET\n'
p865
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p866
S'.text:00000000004049b0\n.text:00000000004049b6\n.text:00000000004049b9\n'
p867
tp868
sS'rpl_mknod'
p869
(S'\n__stdcall rpl_mknod(char * name, dev_t dev)\n'
p870
V\u000aint rpl_mknod(char *name,dev_t dev)\u000a\u000a{\u000a  int iVar1;\u000a  __dev_t __dev;\u000a  uint __mode;\u000a  \u000a  __mode = (uint)dev;\u000a  if (((__mode & 0xf000) == 0x1000) && (__dev == 0)) {\u000a    iVar1 = mkfifo(name,__mode & 0xffffefff);\u000a    return iVar1;\u000a  }\u000a  iVar1 = mknod(name,__mode,__dev);\u000a  return iVar1;\u000a}\u000a\u000a
p871
S'MOV EAX,ESI\nAND EAX,0xf000\nCMP EAX,0x1000\nJNZ 0x0040494e\nTEST RDX,RDX\nJNZ 0x0040494e\nAND ESI,0xffffefff\nJMP 0x004014e0\nJMP 0x00405050\n'
p872
S'89 f0\n25 00 f0 00 00\n3d 00 10 00 00\n75 10\n48 85 d2\n75 0b\n81 e6 ff ef ff ff\ne9 92 cb ff ff\ne9 fd 06 00 00\n'
p873
S'.text:0000000000404930\n.text:0000000000404932\n.text:0000000000404937\n.text:000000000040493c\n.text:000000000040493e\n.text:0000000000404941\n.text:0000000000404943\n.text:0000000000404949\n.text:000000000040494e\n'
p874
tp875
sS'version_etc'
p876
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p877
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p878
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404352\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x004042b0\nADD RSP,0xd8\nRET\n'
p879
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p880
S'.text:0000000000404310\n.text:0000000000404317\n.text:0000000000404319\n.text:000000000040431b\n.text:0000000000404320\n.text:0000000000404325\n.text:000000000040432a\n.text:0000000000404332\n.text:000000000040433a\n.text:0000000000404342\n.text:000000000040434a\n.text:0000000000404352\n.text:0000000000404357\n.text:000000000040435c\n.text:0000000000404361\n.text:0000000000404366\n.text:000000000040436e\n.text:0000000000404373\n.text:000000000040437b\n.text:0000000000404382\n.text:0000000000404385\n.text:000000000040438a\n.text:0000000000404391\n'
p881
tp882
sS'__ctype_b_loc'
p883
(S'\n__stdcall __ctype_b_loc()\n'
p884
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_006091d8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p885
S'JMP qword ptr [0x006091d8]\n'
p886
S'ff 25 42 7b 20 00\n'
p887
S'.plt:0000000000401690\n'
p888
tp889
sS'lseek'
p890
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006090b0)();\u000a  return _Var1;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x006090b0]\n'
p893
S'ff 25 6a 7c 20 00\n'
p894
S'.plt:0000000000401440\n'
p895
tp896
sS'quotearg'
p897
(S'\n__stdcall quotearg(char * arg)\n'
p898
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p899
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403610\n'
p900
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p901
S'.text:00000000004037f0\n.text:00000000004037f3\n.text:00000000004037f5\n.text:00000000004037f8\n'
p902
tp903
sS'_start'
p904
(S'\n__stdcall _start()\n'
p905
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00608ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p906
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405000\nMOV RCX,0x404f90\nMOV RDI,0x401aa0\nCALL qword ptr [0x00608ff0]\nHLT\n'
p907
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 00 50 40 00\n48 c7 c1 90 4f 40 00\n48 c7 c7 a0 1a 40 00\nff 15 26 79 20 00\nf4\n'
p908
S'.text:00000000004016a0\n.text:00000000004016a2\n.text:00000000004016a5\n.text:00000000004016a6\n.text:00000000004016a9\n.text:00000000004016ad\n.text:00000000004016ae\n.text:00000000004016af\n.text:00000000004016b6\n.text:00000000004016bd\n.text:00000000004016c4\n.text:00000000004016ca\n'
p909
tp910
sS'c_iscntrl'
p911
(S'\n__stdcall c_iscntrl()\n'
p912
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p913
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x004049d8\nRET\nCMP EDI,0x7f\nJZ 0x004049d7\nXOR EAX,EAX\nRET\n'
p914
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p915
S'.text:00000000004049d0\n.text:00000000004049d2\n.text:00000000004049d5\n.text:00000000004049d7\n.text:00000000004049d8\n.text:00000000004049db\n.text:00000000004049dd\n.text:00000000004049df\n'
p916
tp917
sS'c_isblank'
p918
(S'\n__stdcall c_isblank()\n'
p919
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p920
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p921
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p922
S'.text:00000000004049c0\n.text:00000000004049c3\n.text:00000000004049c6\n.text:00000000004049c9\n.text:00000000004049cc\n.text:00000000004049ce\n'
p923
tp924
sS'quotearg_n_mem'
p925
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p926
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p927
S'MOV ECX,0x6092d0\nJMP 0x00403620\n'
p928
S'b9 d0 92 60 00\ne9 36 fe ff ff\n'
p929
S'.text:00000000004037e0\n.text:00000000004037e5\n'
p930
tp931
sS'atexit'
p932
(S'\n__stdcall atexit(__func * __func)\n'
p933
V\u000a/* WARNING: Removing unreachable block (ram,0x00405030) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_006091a0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p934
S'MOV RAX,0x6091e8\nTEST RAX,RAX\nJZ 0x00405030\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401620\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401620\n'
p935
S'48 c7 c0 e8 91 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 fa c5 ff ff\n31 d2\n31 f6\ne9 e7 c5 ff ff\n'
p936
S'.text:0000000000405010\n.text:0000000000405017\n.text:000000000040501a\n.text:000000000040501c\n.text:000000000040501f\n.text:0000000000405021\n.text:0000000000405030\n.text:0000000000405032\n.text:0000000000405034\n'
p937
tp938
sS'__printf_chk'
p939
(S'\n__stdcall __printf_chk()\n'
p940
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_00609170)();\u000a  return;\u000a}\u000a\u000a
p941
S'JMP qword ptr [0x00609170]\n'
p942
S'ff 25 aa 7b 20 00\n'
p943
S'.plt:00000000004015c0\n'
p944
tp945
sS'fdopen'
p946
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p947
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_00609160)();\u000a  return pFVar1;\u000a}\u000a\u000a
p948
S'JMP qword ptr [0x00609160]\n'
p949
S'ff 25 ba 7b 20 00\n'
p950
S'.plt:00000000004015a0\n'
p951
tp952
sS'error'
p953
(S'\n__stdcall error()\n'
p954
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_00609180)();\u000a  return;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x00609180]\n'
p956
S'ff 25 9a 7b 20 00\n'
p957
S'.plt:00000000004015e0\n'
p958
tp959
sS'strcaseeq6'
p960
(S'\n__stdcall strcaseeq6()\n'
p961
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p962
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404a60\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00403eb2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403eb9\nJMP 0x00403ece\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403ece\nTEST BPL,BPL\nJZ 0x00403ec9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00403ee0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p963
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 c1 0b 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p964
S'.text:0000000000403e90\n.text:0000000000403e91\n.text:0000000000403e92\n.text:0000000000403e93\n.text:0000000000403e95\n.text:0000000000403e98\n.text:0000000000403e9a\n.text:0000000000403e9f\n.text:0000000000403ea3\n.text:0000000000403ea5\n.text:0000000000403ea7\n.text:0000000000403eaa\n.text:0000000000403eac\n.text:0000000000403eae\n.text:0000000000403eb0\n.text:0000000000403eb2\n.text:0000000000403eb4\n.text:0000000000403eb7\n.text:0000000000403eb9\n.text:0000000000403ebc\n.text:0000000000403ebe\n.text:0000000000403ec1\n.text:0000000000403ec5\n.text:0000000000403ec6\n.text:0000000000403ec7\n.text:0000000000403ec9\n.text:0000000000403ece\n.text:0000000000403ed2\n.text:0000000000403ed3\n.text:0000000000403ed4\n'
p965
tp966
sS'strcaseeq5'
p967
(S'\n__stdcall strcaseeq5()\n'
p968
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p969
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404a60\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00403e66\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403e6d\nJMP 0x00403e84\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403e84\nTEST BPL,BPL\nJZ 0x00403e7f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00403e90\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p970
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 0d 0c 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p971
S'.text:0000000000403e40\n.text:0000000000403e41\n.text:0000000000403e43\n.text:0000000000403e44\n.text:0000000000403e47\n.text:0000000000403e49\n.text:0000000000403e4c\n.text:0000000000403e4e\n.text:0000000000403e53\n.text:0000000000403e57\n.text:0000000000403e59\n.text:0000000000403e5b\n.text:0000000000403e5e\n.text:0000000000403e60\n.text:0000000000403e62\n.text:0000000000403e64\n.text:0000000000403e66\n.text:0000000000403e68\n.text:0000000000403e6b\n.text:0000000000403e6d\n.text:0000000000403e70\n.text:0000000000403e72\n.text:0000000000403e76\n.text:0000000000403e79\n.text:0000000000403e7a\n.text:0000000000403e7c\n.text:0000000000403e7d\n.text:0000000000403e7f\n.text:0000000000403e84\n.text:0000000000403e85\n.text:0000000000403e87\n.text:0000000000403e88\n'
p972
tp973
sS'emit_ancillary_info'
p974
(S'\n__stdcall emit_ancillary_info()\n'
p975
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x004051d0;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("mknod",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "mknod";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,"mknod",uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/","mknod");\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x406559;\u000a  if (__s2 == "mknod") {\u000a    uVar3 = 0x4058d7;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p976
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x4051d0\nMOV ESI,0x4058bb\nNOP\nMOV EDI,0x40565e\nCALL 0x004014d0\nTEST EAX,EAX\nJZ 0x0040199b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401980\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x40565e\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x40591a\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x4056c9\nMOV ECX,0x405931\nXOR EAX,EAX\nCALL 0x004015c0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x004015b0\nTEST RAX,RAX\nJZ 0x00401a24\nMOV ESI,0x405958\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401350\nTEST EAX,EAX\nJZ 0x00401a24\nXOR EDI,EDI\nMOV ESI,0x40595c\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40565e\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x4059a1\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,RAX\nMOV R14D,0x40565e\nMOV EDI,0x1\nMOV EDX,0x405931\nMOV ECX,0x40565e\nXOR EAX,EAX\nCALL 0x004015c0\nXOR EDI,EDI\nMOV ESI,0x4059c0\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x4058d7\nMOV ECX,0x406559\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004015c0\n'
p977
S'41 56\n53\n50\nbb d0 51 40 00\nbe bb 58 40 00\n66 90\nbf 5e 56 40 00\ne8 46 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 5e 56 40 00\n48 0f 45 d8\n31 ff\nbe 1a 59 40 00\nba 05 00 00 00\ne8 14 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba c9 56 40 00\nb9 31 59 40 00\n31 c0\ne8 eb fb ff ff\nbf 05 00 00 00\n31 f6\ne8 cf fb ff ff\n48 85 c0\n74 3e\nbe 58 59 40 00\nba 03 00 00 00\n48 89 c7\ne8 58 f9 ff ff\n85 c0\n74 28\n31 ff\nbe 5c 59 40 00\nba 05 00 00 00\ne8 c3 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 5e 56 40 00\n31 c0\n48 89 ce\ne8 9c fb ff ff\n31 ff\nbe a1 59 40 00\nba 05 00 00 00\ne8 9b f9 ff ff\n48 89 c6\n41 be 5e 56 40 00\nbf 01 00 00 00\nba 31 59 40 00\nb9 5e 56 40 00\n31 c0\ne8 6c fb ff ff\n31 ff\nbe c0 59 40 00\nba 05 00 00 00\ne8 6b f9 ff ff\n48 89 c2\n4c 39 f3\nb8 d7 58 40 00\nb9 59 65 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 2e fb ff ff\n'
p978
S'.text:0000000000401970\n.text:0000000000401972\n.text:0000000000401973\n.text:0000000000401974\n.text:0000000000401979\n.text:000000000040197e\n.text:0000000000401980\n.text:0000000000401985\n.text:000000000040198a\n.text:000000000040198c\n.text:000000000040198e\n.text:0000000000401992\n.text:0000000000401996\n.text:0000000000401999\n.text:000000000040199b\n.text:000000000040199f\n.text:00000000004019a2\n.text:00000000004019a7\n.text:00000000004019ab\n.text:00000000004019ad\n.text:00000000004019b2\n.text:00000000004019b7\n.text:00000000004019bc\n.text:00000000004019bf\n.text:00000000004019c4\n.text:00000000004019c9\n.text:00000000004019ce\n.text:00000000004019d0\n.text:00000000004019d5\n.text:00000000004019da\n.text:00000000004019dc\n.text:00000000004019e1\n.text:00000000004019e4\n.text:00000000004019e6\n.text:00000000004019eb\n.text:00000000004019f0\n.text:00000000004019f3\n.text:00000000004019f8\n.text:00000000004019fa\n.text:00000000004019fc\n.text:00000000004019fe\n.text:0000000000401a03\n.text:0000000000401a08\n.text:0000000000401a0d\n.text:0000000000401a10\n.text:0000000000401a15\n.text:0000000000401a1a\n.text:0000000000401a1c\n.text:0000000000401a1f\n.text:0000000000401a24\n.text:0000000000401a26\n.text:0000000000401a2b\n.text:0000000000401a30\n.text:0000000000401a35\n.text:0000000000401a38\n.text:0000000000401a3e\n.text:0000000000401a43\n.text:0000000000401a48\n.text:0000000000401a4d\n.text:0000000000401a4f\n.text:0000000000401a54\n.text:0000000000401a56\n.text:0000000000401a5b\n.text:0000000000401a60\n.text:0000000000401a65\n.text:0000000000401a68\n.text:0000000000401a6b\n.text:0000000000401a70\n.text:0000000000401a75\n.text:0000000000401a79\n.text:0000000000401a7e\n.text:0000000000401a80\n.text:0000000000401a83\n.text:0000000000401a86\n.text:0000000000401a8a\n.text:0000000000401a8b\n.text:0000000000401a8d\n'
p979
tp980
sS'strcaseeq7'
p981
(S'\n__stdcall strcaseeq7()\n'
p982
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p983
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00404a60\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00403f02\nTEST ECX,0xffffffdf\nJNZ 0x00403f06\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x00403f0a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p984
S'53\n48 89 fb\n31 ff\ne8 75 0b 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p985
S'.text:0000000000403ee0\n.text:0000000000403ee1\n.text:0000000000403ee4\n.text:0000000000403ee6\n.text:0000000000403eeb\n.text:0000000000403eef\n.text:0000000000403ef1\n.text:0000000000403ef3\n.text:0000000000403ef9\n.text:0000000000403efb\n.text:0000000000403f00\n.text:0000000000403f01\n.text:0000000000403f02\n.text:0000000000403f04\n.text:0000000000403f06\n.text:0000000000403f08\n.text:0000000000403f09\n.text:0000000000403f0a\n.text:0000000000403f0f\n.text:0000000000403f10\n'
p986
tp987
sS'version_etc_va'
p988
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p989
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p990
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x004042e0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x004042ec\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404301\nINC R9\nCMP R9,0xa\nJC 0x004042c0\nMOV R8,RSP\nCALL 0x00403f20\nADD RSP,0x58\nRET\n'
p991
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p992
S'.text:00000000004042b0\n.text:00000000004042b4\n.text:00000000004042b7\n.text:00000000004042c0\n.text:00000000004042c3\n.text:00000000004042c7\n.text:00000000004042c9\n.text:00000000004042cc\n.text:00000000004042d0\n.text:00000000004042d4\n.text:00000000004042d7\n.text:00000000004042e0\n.text:00000000004042e4\n.text:00000000004042e8\n.text:00000000004042ec\n.text:00000000004042ef\n.text:00000000004042f3\n.text:00000000004042f6\n.text:00000000004042f8\n.text:00000000004042fb\n.text:00000000004042ff\n.text:0000000000404301\n.text:0000000000404304\n.text:0000000000404309\n.text:000000000040430d\n'
p993
tp994
sS'xzalloc'
p995
(S'\n__stdcall xzalloc(size_t s)\n'
p996
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p997
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00404440\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401460\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p998
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 14 cf ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p999
S'.text:0000000000404530\n.text:0000000000404532\n.text:0000000000404533\n.text:0000000000404534\n.text:0000000000404537\n.text:000000000040453c\n.text:000000000040453f\n.text:0000000000404541\n.text:0000000000404544\n.text:0000000000404547\n.text:000000000040454c\n.text:000000000040454f\n.text:0000000000404553\n.text:0000000000404554\n.text:0000000000404556\n'
p1000
tp1001
sS'mode_adjust'
p1002
(S'\n__stdcall mode_adjust(mode_change * changes, mode_t * pmode_bits)\n'
p1003
V\u000amode_t mode_adjust(mode_change *changes,mode_t *pmode_bits)\u000a\u000a{\u000a  uint uVar1;\u000a  char cVar2;\u000a  char *in_RCX;\u000a  uint in_EDX;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  uint uVar5;\u000a  uint uVar6;\u000a  uint *in_R8;\u000a  uint uVar7;\u000a  uint uVar8;\u000a  uint uVar9;\u000a  \u000a  uVar6 = (uint)changes & 0xfff;\u000a  cVar2 = in_RCX[1];\u000a  uVar9 = 0;\u000a  if (cVar2 != 0) {\u000a    uVar7 = 0xc00;\u000a    if ((char)pmode_bits == 0) {\u000a      uVar7 = 0;\u000a    }\u000a    do {\u000a      uVar1 = *(uint *)(in_RCX + 4);\u000a      uVar4 = *(uint *)(in_RCX + 8);\u000a      if (cVar2 == 2) {\u000a        if ((uVar6 & 0x49 | (uint)pmode_bits & 0xff) != 0) {\u000a          uVar4 = uVar4 | 0x49;\u000a        }\u000a      }\u000a      else {\u000a        if (cVar2 == 3) {\u000a          uVar4 = uVar4 & uVar6;\u000a          uVar3 = uVar4 & 0x124;\u000a          if (uVar3 != 0) {\u000a            uVar3 = 0x124;\u000a          }\u000a          uVar8 = uVar4 & 0x92;\u000a          if (uVar8 != 0) {\u000a            uVar8 = 0x92;\u000a          }\u000a          uVar5 = uVar4 & 0x49;\u000a          if (uVar5 != 0) {\u000a            uVar5 = 0x49;\u000a          }\u000a          uVar4 = uVar5 | uVar3 | uVar8 | uVar4;\u000a        }\u000a      }\u000a      uVar3 = ~in_EDX;\u000a      if (uVar1 != 0) {\u000a        uVar3 = uVar1;\u000a      }\u000a      uVar3 = (*(uint *)(in_RCX + 0xc) | ~uVar7) & uVar4 & uVar3;\u000a      cVar2 = *in_RCX;\u000a      if (cVar2 == '+') {\u000a        uVar9 = uVar9 | uVar3;\u000a        uVar6 = uVar6 | uVar3;\u000a      }\u000a      else {\u000a        if (cVar2 == '-') {\u000a          uVar9 = uVar9 | uVar3;\u000a          uVar6 = uVar6 & ~uVar3;\u000a        }\u000a        else {\u000a          if (cVar2 == '=') {\u000a            uVar4 = ~uVar1;\u000a            if (uVar1 == 0) {\u000a              uVar4 = uVar1;\u000a            }\u000a            uVar4 = uVar4 | ~*(uint *)(in_RCX + 0xc) & uVar7;\u000a            uVar9 = uVar9 | ~uVar4 & 0xfff;\u000a            uVar6 = uVar3 | uVar4 & uVar6;\u000a          }\u000a        }\u000a      }\u000a      cVar2 = in_RCX[0x11];\u000a      in_RCX = in_RCX + 0x10;\u000a    } while (cVar2 != 0);\u000a  }\u000a  if (in_R8 != (uint *)0x0) {\u000a    *in_R8 = uVar9;\u000a  }\u000a  return (mode_t)uVar6;\u000a}\u000a\u000a
p1004
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV qword ptr [RSP + -0x8],R8\nAND EDI,0xfff\nMOV AL,byte ptr [RCX + 0x1]\nXOR R13D,R13D\nTEST AL,AL\nJZ 0x00402605\nTEST SIL,SIL\nMOV R9D,0xc00\nCMOVZ R9D,R13D\nNOT EDX\nMOV R10D,R9D\nNOT R10D\nMOVZX R12D,SIL\nMOV R14D,0x92\nMOV R15D,0x49\nNOP dword ptr [RAX + RAX*0x1]\nMOVSX EBP,AL\nMOV EBX,dword ptr [RCX + 0x4]\nMOV ESI,dword ptr [RCX + 0x8]\nMOV R8D,dword ptr [RCX + 0xc]\nCMP EBP,0x2\nJZ 0x00402580\nCMP EBP,0x3\nJNZ 0x00402590\nAND ESI,EDI\nMOV EBP,ESI\nAND EBP,0x124\nMOV EAX,0x124\nCMOVNZ EBP,EAX\nMOV R11D,ESI\nAND R11D,0x92\nCMOVNZ R11D,R14D\nOR R11D,ESI\nAND ESI,0x49\nCMOVNZ ESI,R15D\nOR ESI,EBP\nOR ESI,R11D\nJMP 0x00402590\nMOV EBP,EDI\nAND EBP,0x49\nMOV EAX,ESI\nOR EAX,0x49\nOR EBP,R12D\nCMOVNZ ESI,EAX\nTEST EBX,EBX\nMOV EAX,EDX\nCMOVNZ EAX,EBX\nMOV EBP,R8D\nOR EBP,R10D\nAND EBP,ESI\nAND EBP,EAX\nMOVSX ESI,byte ptr [RCX]\nCMP ESI,0x2b\nJZ 0x004025f0\nCMP ESI,0x2d\nJZ 0x004025e0\nCMP ESI,0x3d\nJNZ 0x004025f5\nNOT R8D\nAND R8D,R9D\nTEST EBX,EBX\nMOV EAX,EBX\nNOT EAX\nCMOVZ EAX,EBX\nOR EAX,R8D\nMOV ESI,EAX\nNOT ESI\nAND ESI,0xfff\nOR R13D,ESI\nAND EAX,EDI\nOR EBP,EAX\nMOV EDI,EBP\nJMP 0x004025f5\nOR R13D,EBP\nNOT EBP\nAND EDI,EBP\nJMP 0x004025f5\nOR R13D,EBP\nOR EDI,EBP\nMOVZX EAX,byte ptr [RCX + 0x11]\nADD RCX,0x10\nTEST AL,AL\nJNZ 0x00402530\nMOV RAX,qword ptr [RSP + -0x8]\nTEST RAX,RAX\nJZ 0x00402612\nMOV dword ptr [RAX],R13D\nMOV EAX,EDI\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1005
S'55\n41 57\n41 56\n41 55\n41 54\n53\n4c 89 44 24 f8\n81 e7 ff 0f 00 00\n8a 41 01\n45 31 ed\n84 c0\n0f 84 02 01 00 00\n40 84 f6\n41 b9 00 0c 00 00\n45 0f 44 cd\nf7 d2\n45 89 ca\n41 f7 d2\n44 0f b6 e6\n41 be 92 00 00 00\n41 bf 49 00 00 00\n0f 1f 84 00 00 00 00 00\n0f be e8\n8b 59 04\n8b 71 08\n44 8b 41 0c\n83 fd 02\n74 3e\n83 fd 03\n75 49\n21 fe\n89 f5\n81 e5 24 01 00 00\nb8 24 01 00 00\n0f 45 e8\n41 89 f3\n41 81 e3 92 00 00 00\n45 0f 45 de\n41 09 f3\n83 e6 49\n41 0f 45 f7\n09 ee\n44 09 de\neb 18\n89 fd\n83 e5 49\n89 f0\n83 c8 49\n44 09 e5\n0f 45 f0\n85 db\n89 d0\n0f 45 c3\n44 89 c5\n44 09 d5\n21 f5\n21 c5\n0f be 31\n83 fe 2b\n74 47\n83 fe 2d\n74 32\n83 fe 3d\n75 42\n41 f7 d0\n45 21 c8\n85 db\n89 d8\nf7 d0\n0f 44 c3\n44 09 c0\n89 c6\nf7 d6\n81 e6 ff 0f 00 00\n41 09 f5\n21 f8\n09 c5\n89 ef\neb 1b\n41 09 ed\nf7 d5\n21 ef\neb 0c\n41 09 ed\n09 ef\n0f b6 41 11\n48 83 c1 10\n84 c0\n0f 85 2b ff ff ff\n48 8b 44 24 f8\n48 85 c0\n74 03\n44 89 28\n89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1006
S'.text:00000000004024e0\n.text:00000000004024e1\n.text:00000000004024e3\n.text:00000000004024e5\n.text:00000000004024e7\n.text:00000000004024e9\n.text:00000000004024ea\n.text:00000000004024ef\n.text:00000000004024f5\n.text:00000000004024f8\n.text:00000000004024fb\n.text:00000000004024fd\n.text:0000000000402503\n.text:0000000000402506\n.text:000000000040250c\n.text:0000000000402510\n.text:0000000000402512\n.text:0000000000402515\n.text:0000000000402518\n.text:000000000040251c\n.text:0000000000402522\n.text:0000000000402528\n.text:0000000000402530\n.text:0000000000402533\n.text:0000000000402536\n.text:0000000000402539\n.text:000000000040253d\n.text:0000000000402540\n.text:0000000000402542\n.text:0000000000402545\n.text:0000000000402547\n.text:0000000000402549\n.text:000000000040254b\n.text:0000000000402551\n.text:0000000000402556\n.text:0000000000402559\n.text:000000000040255c\n.text:0000000000402563\n.text:0000000000402567\n.text:000000000040256a\n.text:000000000040256d\n.text:0000000000402571\n.text:0000000000402573\n.text:0000000000402576\n.text:0000000000402580\n.text:0000000000402582\n.text:0000000000402585\n.text:0000000000402587\n.text:000000000040258a\n.text:000000000040258d\n.text:0000000000402590\n.text:0000000000402592\n.text:0000000000402594\n.text:0000000000402597\n.text:000000000040259a\n.text:000000000040259d\n.text:000000000040259f\n.text:00000000004025a1\n.text:00000000004025a4\n.text:00000000004025a7\n.text:00000000004025a9\n.text:00000000004025ac\n.text:00000000004025ae\n.text:00000000004025b1\n.text:00000000004025b3\n.text:00000000004025b6\n.text:00000000004025b9\n.text:00000000004025bb\n.text:00000000004025bd\n.text:00000000004025bf\n.text:00000000004025c2\n.text:00000000004025c5\n.text:00000000004025c7\n.text:00000000004025c9\n.text:00000000004025cf\n.text:00000000004025d2\n.text:00000000004025d4\n.text:00000000004025d6\n.text:00000000004025d8\n.text:00000000004025e0\n.text:00000000004025e3\n.text:00000000004025e5\n.text:00000000004025e7\n.text:00000000004025f0\n.text:00000000004025f3\n.text:00000000004025f5\n.text:00000000004025f9\n.text:00000000004025fd\n.text:00000000004025ff\n.text:0000000000402605\n.text:000000000040260a\n.text:000000000040260d\n.text:000000000040260f\n.text:0000000000402612\n.text:0000000000402614\n.text:0000000000402615\n.text:0000000000402617\n.text:0000000000402619\n.text:000000000040261b\n.text:000000000040261d\n.text:000000000040261e\n'
p1007
tp1008
sS'chmod'
p1009
(S'\n__stdcall chmod(char * __file, __mode_t __mode)\n'
p1010
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint chmod(char *__file,__mode_t __mode)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_chmod_00609178)();\u000a  return iVar1;\u000a}\u000a\u000a
p1011
S'JMP qword ptr [0x00609178]\n'
p1012
S'ff 25 a2 7b 20 00\n'
p1013
S'.plt:00000000004015d0\n'
p1014
tp1015
sS'emit_mandatory_arg_note'
p1016
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1017
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1018
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x405870\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004014a0\n'
p1019
S'50\n31 ff\nbe 70 58 40 00\nba 05 00 00 00\ne8 7e fa ff ff\n48 8b 35 0f 79 20 00\n48 89 c7\n58\ne9 3e fb ff ff\n'
p1020
S'.text:0000000000401940\n.text:0000000000401941\n.text:0000000000401943\n.text:0000000000401948\n.text:000000000040194d\n.text:0000000000401952\n.text:0000000000401959\n.text:000000000040195c\n.text:000000000040195d\n'
p1021
tp1022
sS'strcaseeq0'
p1023
(S'\n__stdcall strcaseeq0()\n'
p1024
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1025
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404a60\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00403c15\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403c1c\nJMP 0x00403c50\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403c50\nTEST BPL,BPL\nJZ 0x00403c4b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00403c60\nJMP 0x00403c50\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1026
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 5d 0e 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1027
S'.text:0000000000403be0\n.text:0000000000403be1\n.text:0000000000403be3\n.text:0000000000403be5\n.text:0000000000403be7\n.text:0000000000403be9\n.text:0000000000403bea\n.text:0000000000403beb\n.text:0000000000403bee\n.text:0000000000403bf1\n.text:0000000000403bf4\n.text:0000000000403bf7\n.text:0000000000403bf9\n.text:0000000000403bfc\n.text:0000000000403bfe\n.text:0000000000403c03\n.text:0000000000403c06\n.text:0000000000403c08\n.text:0000000000403c0a\n.text:0000000000403c0d\n.text:0000000000403c0f\n.text:0000000000403c11\n.text:0000000000403c13\n.text:0000000000403c15\n.text:0000000000403c17\n.text:0000000000403c1a\n.text:0000000000403c1c\n.text:0000000000403c1f\n.text:0000000000403c21\n.text:0000000000403c25\n.text:0000000000403c2a\n.text:0000000000403c2d\n.text:0000000000403c31\n.text:0000000000403c35\n.text:0000000000403c39\n.text:0000000000403c3d\n.text:0000000000403c41\n.text:0000000000403c44\n.text:0000000000403c49\n.text:0000000000403c4b\n.text:0000000000403c50\n.text:0000000000403c54\n.text:0000000000403c55\n.text:0000000000403c57\n.text:0000000000403c59\n.text:0000000000403c5b\n.text:0000000000403c5d\n.text:0000000000403c5e\n'
p1028
tp1029
sS'strcaseeq2'
p1030
(S'\n__stdcall strcaseeq2()\n'
p1031
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1032
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404a60\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00403d26\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403d2d\nJMP 0x00403d5a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403d5a\nTEST BPL,BPL\nJZ 0x00403d55\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403d70\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1033
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 4d 0d 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1034
S'.text:0000000000403cf0\n.text:0000000000403cf1\n.text:0000000000403cf3\n.text:0000000000403cf5\n.text:0000000000403cf7\n.text:0000000000403cf9\n.text:0000000000403cfa\n.text:0000000000403cfb\n.text:0000000000403cfe\n.text:0000000000403d01\n.text:0000000000403d04\n.text:0000000000403d07\n.text:0000000000403d09\n.text:0000000000403d0c\n.text:0000000000403d0e\n.text:0000000000403d13\n.text:0000000000403d17\n.text:0000000000403d19\n.text:0000000000403d1b\n.text:0000000000403d1e\n.text:0000000000403d20\n.text:0000000000403d22\n.text:0000000000403d24\n.text:0000000000403d26\n.text:0000000000403d28\n.text:0000000000403d2b\n.text:0000000000403d2d\n.text:0000000000403d30\n.text:0000000000403d32\n.text:0000000000403d36\n.text:0000000000403d3a\n.text:0000000000403d3e\n.text:0000000000403d42\n.text:0000000000403d45\n.text:0000000000403d49\n.text:0000000000403d4a\n.text:0000000000403d4c\n.text:0000000000403d4e\n.text:0000000000403d50\n.text:0000000000403d52\n.text:0000000000403d53\n.text:0000000000403d55\n.text:0000000000403d5a\n.text:0000000000403d5e\n.text:0000000000403d5f\n.text:0000000000403d61\n.text:0000000000403d63\n.text:0000000000403d65\n.text:0000000000403d67\n.text:0000000000403d68\n'
p1035
tp1036
sS'FUN_00401300'
p1037
(S'\n__stdcall FUN_00401300()\n'
p1038
V\u000avoid FUN_00401300(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00609010)();\u000a  return;\u000a}\u000a\u000a
p1039
S'PUSH qword ptr [0x00609008]\nJMP qword ptr [0x00609010]\n'
p1040
S'ff 35 02 7d 20 00\nff 25 04 7d 20 00\n'
p1041
S'.plt:0000000000401300\n.plt:0000000000401306\n'
p1042
tp1043
sS'strcaseeq1'
p1044
(S'\n__stdcall strcaseeq1()\n'
p1045
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1046
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00404a60\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x00403c9d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403ca4\nJMP 0x00403cd7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403cd7\nTEST BPL,BPL\nJZ 0x00403cd2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403cf0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1047
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 d6 0d 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1048
S'.text:0000000000403c60\n.text:0000000000403c61\n.text:0000000000403c63\n.text:0000000000403c65\n.text:0000000000403c67\n.text:0000000000403c69\n.text:0000000000403c6a\n.text:0000000000403c6b\n.text:0000000000403c70\n.text:0000000000403c73\n.text:0000000000403c76\n.text:0000000000403c79\n.text:0000000000403c7b\n.text:0000000000403c7e\n.text:0000000000403c83\n.text:0000000000403c85\n.text:0000000000403c8a\n.text:0000000000403c8e\n.text:0000000000403c90\n.text:0000000000403c92\n.text:0000000000403c95\n.text:0000000000403c97\n.text:0000000000403c99\n.text:0000000000403c9b\n.text:0000000000403c9d\n.text:0000000000403c9f\n.text:0000000000403ca2\n.text:0000000000403ca4\n.text:0000000000403ca7\n.text:0000000000403ca9\n.text:0000000000403cad\n.text:0000000000403cb1\n.text:0000000000403cb5\n.text:0000000000403cbb\n.text:0000000000403cbf\n.text:0000000000403cc2\n.text:0000000000403cc6\n.text:0000000000403cc7\n.text:0000000000403cc9\n.text:0000000000403ccb\n.text:0000000000403ccd\n.text:0000000000403ccf\n.text:0000000000403cd0\n.text:0000000000403cd2\n.text:0000000000403cd7\n.text:0000000000403cdb\n.text:0000000000403cdc\n.text:0000000000403cde\n.text:0000000000403ce0\n.text:0000000000403ce2\n.text:0000000000403ce4\n.text:0000000000403ce5\n'
p1049
tp1050
sS'strcaseeq4'
p1051
(S'\n__stdcall strcaseeq4()\n'
p1052
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1053
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404a60\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00403e0c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403e13\nJMP 0x00403e34\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403e34\nTEST BPL,BPL\nJZ 0x00403e2f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403e40\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1054
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 67 0c 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1055
S'.text:0000000000403de0\n.text:0000000000403de1\n.text:0000000000403de3\n.text:0000000000403de5\n.text:0000000000403de6\n.text:0000000000403de7\n.text:0000000000403dea\n.text:0000000000403ded\n.text:0000000000403def\n.text:0000000000403df2\n.text:0000000000403df4\n.text:0000000000403df9\n.text:0000000000403dfd\n.text:0000000000403dff\n.text:0000000000403e01\n.text:0000000000403e04\n.text:0000000000403e06\n.text:0000000000403e08\n.text:0000000000403e0a\n.text:0000000000403e0c\n.text:0000000000403e0e\n.text:0000000000403e11\n.text:0000000000403e13\n.text:0000000000403e16\n.text:0000000000403e18\n.text:0000000000403e1c\n.text:0000000000403e20\n.text:0000000000403e23\n.text:0000000000403e27\n.text:0000000000403e28\n.text:0000000000403e2a\n.text:0000000000403e2c\n.text:0000000000403e2d\n.text:0000000000403e2f\n.text:0000000000403e34\n.text:0000000000403e38\n.text:0000000000403e39\n.text:0000000000403e3b\n.text:0000000000403e3d\n.text:0000000000403e3e\n'
p1056
tp1057
sS'strcaseeq3'
p1058
(S'\n__stdcall strcaseeq3()\n'
p1059
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1060
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404a60\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00403da0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403da7\nJMP 0x00403dca\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403dca\nTEST BPL,BPL\nJZ 0x00403dc5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403de0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1061
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 d3 0c 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1062
S'.text:0000000000403d70\n.text:0000000000403d71\n.text:0000000000403d73\n.text:0000000000403d75\n.text:0000000000403d77\n.text:0000000000403d78\n.text:0000000000403d7b\n.text:0000000000403d7e\n.text:0000000000403d81\n.text:0000000000403d83\n.text:0000000000403d86\n.text:0000000000403d88\n.text:0000000000403d8d\n.text:0000000000403d91\n.text:0000000000403d93\n.text:0000000000403d95\n.text:0000000000403d98\n.text:0000000000403d9a\n.text:0000000000403d9c\n.text:0000000000403d9e\n.text:0000000000403da0\n.text:0000000000403da2\n.text:0000000000403da5\n.text:0000000000403da7\n.text:0000000000403daa\n.text:0000000000403dac\n.text:0000000000403db0\n.text:0000000000403db4\n.text:0000000000403db8\n.text:0000000000403dbb\n.text:0000000000403dbc\n.text:0000000000403dbe\n.text:0000000000403dc0\n.text:0000000000403dc2\n.text:0000000000403dc3\n.text:0000000000403dc5\n.text:0000000000403dca\n.text:0000000000403dcb\n.text:0000000000403dcd\n.text:0000000000403dcf\n.text:0000000000403dd1\n.text:0000000000403dd2\n'
p1063
tp1064
sS'register_tm_clones'
p1065
(S'\n__stdcall register_tm_clones()\n'
p1066
V\u000a/* WARNING: Removing unreachable block (ram,0x00401733) */\u000a/* WARNING: Removing unreachable block (ram,0x0040173d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1067
S'MOV ESI,0x609258\nPUSH RBP\nSUB RSI,0x609258\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401748\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401748\nPOP RBP\nMOV EDI,0x609258\nJMP RAX\nPOP RBP\nRET\n'
p1068
S'be 58 92 60 00\n55\n48 81 ee 58 92 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 58 92 60 00\nff e0\n5d\nc3\n'
p1069
S'.text:0000000000401710\n.text:0000000000401715\n.text:0000000000401716\n.text:000000000040171d\n.text:0000000000401721\n.text:0000000000401724\n.text:0000000000401727\n.text:000000000040172b\n.text:000000000040172e\n.text:0000000000401731\n.text:0000000000401733\n.text:0000000000401738\n.text:000000000040173b\n.text:000000000040173d\n.text:000000000040173e\n.text:0000000000401743\n.text:0000000000401748\n.text:0000000000401749\n'
p1070
tp1071
sS'gettext_quote'
p1072
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1073
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00406420;\u000a        pcVar2 = &DAT_00406424;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1074
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004013d0\nCMP RAX,RBX\nJNZ 0x00403bd8\nCALL 0x00404b20\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00403be0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403b88\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406410\nMOV EAX,0x406414\nJMP 0x00403bd4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00403be0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403bc6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406420\nMOV EAX,0x406424\nJMP 0x00403bd4\nCMP R14D,0x9\nMOV ECX,0x406404\nMOV EAX,0x406408\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1075
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 97 d8 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 d9 0f 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 10 64 40 00\nb8 14 64 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 20 64 40 00\nb8 24 64 40 00\neb 0e\n41 83 fe 09\nb9 04 64 40 00\nb8 08 64 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1076
S'.text:0000000000403b20\n.text:0000000000403b21\n.text:0000000000403b23\n.text:0000000000403b24\n.text:0000000000403b27\n.text:0000000000403b2a\n.text:0000000000403b2c\n.text:0000000000403b31\n.text:0000000000403b34\n.text:0000000000403b39\n.text:0000000000403b3c\n.text:0000000000403b42\n.text:0000000000403b47\n.text:0000000000403b4a\n.text:0000000000403b4f\n.text:0000000000403b54\n.text:0000000000403b59\n.text:0000000000403b5f\n.text:0000000000403b65\n.text:0000000000403b68\n.text:0000000000403b6a\n.text:0000000000403b6c\n.text:0000000000403b71\n.text:0000000000403b75\n.text:0000000000403b77\n.text:0000000000403b79\n.text:0000000000403b7c\n.text:0000000000403b81\n.text:0000000000403b86\n.text:0000000000403b88\n.text:0000000000403b8d\n.text:0000000000403b92\n.text:0000000000403b97\n.text:0000000000403b9d\n.text:0000000000403ba3\n.text:0000000000403ba6\n.text:0000000000403ba8\n.text:0000000000403baa\n.text:0000000000403baf\n.text:0000000000403bb3\n.text:0000000000403bb5\n.text:0000000000403bb7\n.text:0000000000403bba\n.text:0000000000403bbf\n.text:0000000000403bc4\n.text:0000000000403bc6\n.text:0000000000403bca\n.text:0000000000403bcf\n.text:0000000000403bd4\n.text:0000000000403bd8\n.text:0000000000403bd9\n.text:0000000000403bdb\n.text:0000000000403bdc\n'
p1077
tp1078
sS'c_islower'
p1079
(S'\n__stdcall c_islower()\n'
p1080
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1081
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1082
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1083
S'.text:0000000000404a00\n.text:0000000000404a03\n.text:0000000000404a06\n.text:0000000000404a09\n'
p1084
tp1085
sS'fclose'
p1086
(S'\n__stdcall fclose(FILE * __stream)\n'
p1087
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00609068)();\u000a  return iVar1;\u000a}\u000a\u000a
p1088
S'JMP qword ptr [0x00609068]\n'
p1089
S'ff 25 b2 7c 20 00\n'
p1090
S'.plt:00000000004013b0\n'
p1091
tp1092
sS'__ctype_get_mb_cur_max'
p1093
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1094
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_00609080)();\u000a  return sVar1;\u000a}\u000a\u000a
p1095
S'JMP qword ptr [0x00609080]\n'
p1096
S'ff 25 9a 7c 20 00\n'
p1097
S'.plt:00000000004013e0\n'
p1098
tp1099
sS'quotearg_n_style'
p1100
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1101
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1102
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00403850\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00403620\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1103
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1104
S'.text:0000000000403810\n.text:0000000000403811\n.text:0000000000403813\n.text:0000000000403814\n.text:0000000000403818\n.text:000000000040381b\n.text:000000000040381d\n.text:0000000000403822\n.text:0000000000403825\n.text:000000000040382a\n.text:0000000000403831\n.text:0000000000403833\n.text:0000000000403836\n.text:0000000000403839\n.text:000000000040383e\n.text:0000000000403842\n.text:0000000000403843\n.text:0000000000403845\n.text:0000000000403846\n'
p1105
tp1106
sS'fwrite'
p1107
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1108
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_006091b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1109
S'JMP qword ptr [0x006091b0]\n'
p1110
S'ff 25 6a 7b 20 00\n'
p1111
S'.plt:0000000000401640\n'
p1112
tp1113
sS'quote_n'
p1114
(S'\n__stdcall quote_n(char * arg)\n'
p1115
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1116
S'MOV RDX,-0x1\nJMP 0x00403ae0\n'
p1117
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1118
S'.text:0000000000403b00\n.text:0000000000403b07\n'
p1119
tp1120
sS'quotearg_alloc'
p1121
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1122
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1123
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00403490\n'
p1124
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1125
S'.text:0000000000403480\n.text:0000000000403483\n.text:0000000000403485\n.text:0000000000403488\n'
p1126
tp1127
sS'__do_global_dtors_aux'
p1128
(S'\n__stdcall __do_global_dtors_aux()\n'
p1129
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1130
S'CMP byte ptr [0x006092a8],0x0\nJNZ 0x0040176a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x004016d0\nPOP RBP\nMOV byte ptr [0x006092a8],0x1\nRET\n'
p1131
S'80 3d 51 7b 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 3e 7b 20 00 01\nf3 c3\n'
p1132
S'.text:0000000000401750\n.text:0000000000401757\n.text:0000000000401759\n.text:000000000040175a\n.text:000000000040175d\n.text:0000000000401762\n.text:0000000000401763\n.text:000000000040176a\n'
p1133
tp1134
sS'close_stdout_set_file_name'
p1135
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1136
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1137
S'MOV qword ptr [0x006092b0],RDI\nRET\n'
p1138
S'48 89 3d 29 72 20 00\nc3\n'
p1139
S'.text:0000000000402080\n.text:0000000000402087\n'
p1140
tp1141
sS'c_isprint'
p1142
(S'\n__stdcall c_isprint()\n'
p1143
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1144
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1145
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1146
S'.text:0000000000404a10\n.text:0000000000404a13\n.text:0000000000404a16\n.text:0000000000404a19\n'
p1147
tp1148
sS'_fini'
p1149
(S'\n__stdcall _fini()\n'
p1150
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1151
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1152
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1153
S'.fini:0000000000405070\n.fini:0000000000405074\n.fini:0000000000405078\n'
p1154
tp1155
sS'__fpending'
p1156
(S'\n__stdcall __fpending()\n'
p1157
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00609050)();\u000a  return;\u000a}\u000a\u000a
p1158
S'JMP qword ptr [0x00609050]\n'
p1159
S'ff 25 ca 7c 20 00\n'
p1160
S'.plt:0000000000401380\n'
p1161
tp1162
s.