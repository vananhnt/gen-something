(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x601e08]\nPUSH RBP\nLEA RBP,[0x601e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00400658\nTEST RBP,RBP\nJZ 0x00400c06\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00400bf0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 46 12 20 00\n55\n48 8d 2d 46 12 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 77 fa ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000400bb0\n.text:0000000000400bb2\n.text:0000000000400bb4\n.text:0000000000400bb7\n.text:0000000000400bb9\n.text:0000000000400bbb\n.text:0000000000400bc2\n.text:0000000000400bc3\n.text:0000000000400bca\n.text:0000000000400bcb\n.text:0000000000400bce\n.text:0000000000400bd1\n.text:0000000000400bd4\n.text:0000000000400bd8\n.text:0000000000400bdc\n.text:0000000000400be1\n.text:0000000000400be4\n.text:0000000000400be6\n.text:0000000000400be8\n.text:0000000000400bf0\n.text:0000000000400bf3\n.text:0000000000400bf6\n.text:0000000000400bf9\n.text:0000000000400bfd\n.text:0000000000400c01\n.text:0000000000400c04\n.text:0000000000400c06\n.text:0000000000400c0a\n.text:0000000000400c0b\n.text:0000000000400c0c\n.text:0000000000400c0e\n.text:0000000000400c10\n.text:0000000000400c12\n.text:0000000000400c14\n'
p6
tp7
sS'_init'
p8
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p9
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00601ff8;\u000a  if (PTR___gmon_start___00601ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00601ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00601ff8]\nTEST RAX,RAX\nJZ 0x0040066a\nCALL RAX\nADD RSP,0x8\nRET\n'
p11
S'48 83 ec 08\n48 8b 05 95 19 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p12
S'.init:0000000000400658\n.init:000000000040065c\n.init:0000000000400663\n.init:0000000000400666\n.init:0000000000400668\n.init:000000000040066a\n.init:000000000040066e\n'
p13
tp14
sS'_start'
p15
(S'\n__stdcall _start()\n'
p16
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00601ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p17
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x400c20\nMOV RCX,0x400bb0\nMOV RDI,0x400840\nCALL qword ptr [0x00601ff0]\nHLT\n'
p18
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 20 0c 40 00\n48 c7 c1 b0 0b 40 00\n48 c7 c7 40 08 40 00\nff 15 86 18 20 00\nf4\n'
p19
S'.text:0000000000400740\n.text:0000000000400742\n.text:0000000000400745\n.text:0000000000400746\n.text:0000000000400749\n.text:000000000040074d\n.text:000000000040074e\n.text:000000000040074f\n.text:0000000000400756\n.text:000000000040075d\n.text:0000000000400764\n.text:000000000040076a\n'
p20
tp21
sS'main'
p22
(S'\n__stdcall main(char * * argv)\n'
p23
V\u000aint main(char **argv)\u000a\u000a{\u000a  int iVar1;\u000a  uint __pid;\u000a  uint uVar2;\u000a  ulong in_RCX;\u000a  ulong unaff_RBX;\u000a  char **in_RSI;\u000a  char *cmd;\u000a  undefined4 uStack240;\u000a  undefined4 uStack236;\u000a  undefined *puStack232;\u000a  undefined *puStack224;\u000a  undefined auStack208 [8];\u000a  char **ppcStack200;\u000a  ulong uStack184;\u000a  ulong uStack32;\u000a  \u000a  progname = *in_RSI;\u000a  if ((int)argv == 3) {\u000a    uStack32 = 0x400864;\u000a    ppcStack200 = in_RSI;\u000a    iVar1 = pipe(filedes);\u000a    if (iVar1 != 0) goto LAB_00400912;\u000a    uStack32 = 0x400871;\u000a    __pid = fork();\u000a    unaff_RBX = (ulong)__pid;\u000a    if (__pid != 0xffffffff) {\u000a      if (__pid == 0) goto LAB_00400970;\u000a      uStack32 = 0x40088e;\u000a      iVar1 = close(1);\u000a      if (iVar1 != 0) goto LAB_0040091c;\u000a      uStack32 = 0x4008a6;\u000a      iVar1 = dup2(filedes[1],1);\u000a      if (iVar1 == -1) goto LAB_00400926;\u000a      uStack32 = 0x4008b6;\u000a      iVar1 = close(filedes[1]);\u000a      if (iVar1 != 0) goto LAB_00400930;\u000a      uStack32 = 0x4008c5;\u000a      iVar1 = close(filedes[0]);\u000a      if (iVar1 != 0) goto LAB_0040093a;\u000a      uStack32 = 0x4008d2;\u000a      system(in_RSI[1]);\u000a      uStack32 = 0x4008de;\u000a      iVar1 = close(1);\u000a      if (iVar1 != 0) goto LAB_00400944;\u000a      uStack32 = 0x4008f0;\u000a      uVar2 = waitpid(__pid,(int *)0x0,2);\u000a      in_RCX = (ulong)uVar2;\u000a      if (uVar2 == 0xffffffff) goto LAB_0040094e;\u000a      if (uVar2 == __pid) {\u000a        iVar1 = shorten_status();\u000a        return iVar1;\u000a      }\u000a      goto LAB_00400958;\u000a    }\u000a  }\u000a  else {\u000a    uStack32 = 0x400912;\u000a    error("Wrong number of args, aborting\u005cn");\u000aLAB_00400912:\u000a    uStack32 = 0x40091c;\u000a    error_with_errno("pipe() failed");\u000aLAB_0040091c:\u000a    uStack32 = 0x400926;\u000a    error_with_errno("Failed closing standard output");\u000aLAB_00400926:\u000a    uStack32 = 0x400930;\u000a    error_with_errno("Failed redefining standard output");\u000aLAB_00400930:\u000a    uStack32 = 0x40093a;\u000a    error_with_errno("Failed closing filedes[1]");\u000aLAB_0040093a:\u000a    uStack32 = 0x400944;\u000a    error_with_errno("Failed closing filedes[0]");\u000aLAB_00400944:\u000a    uStack32 = 0x40094e;\u000a    error_with_errno("Failed closing standard output (while cleaning up)");\u000aLAB_0040094e:\u000a    uStack32 = 0x400958;\u000a    error_with_errno("waitpid() failed");\u000aLAB_00400958:\u000a    ppcStack200 = (char **)(in_RCX & 0xffffffff);\u000a    uStack32 = 0x400966;\u000a    error("waitpid(): Who died? %i\u005cn");\u000a  }\u000a  uStack32 = 0x400970;\u000a  error_with_errno("fork() failed");\u000aLAB_00400970:\u000a  cmd = in_RSI[2];\u000a  uStack32 = 0x400979;\u000a  subprocess2(cmd);\u000a  puStack224 = auStack208;\u000a  puStack232 = &stack0xfffffffffffffff0;\u000a  uStack236 = 0x30;\u000a  uStack240 = 8;\u000a  uStack184 = in_RCX;\u000a  uStack32 = unaff_RBX;\u000a  warning_prefix();\u000a  vfprintf(stderr,cmd,&uStack240);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV RAX,qword ptr [R14]\nMOV qword ptr [0x006020b0],RAX\nCMP EDI,0x3\nJNZ 0x00400906\nMOV EDI,0x6020b8\nCALL 0x004006d0\nTEST EAX,EAX\nJNZ 0x00400912\nCALL 0x00400730\nMOV EBX,EAX\nCMP EBX,-0x1\nJZ 0x00400966\nTEST EBX,EBX\nJZ 0x00400970\nMOV EDI,0x1\nCALL 0x004006c0\nTEST EAX,EAX\nJNZ 0x0040091c\nMOV EDI,dword ptr [0x006020bc]\nMOV ESI,0x1\nCALL 0x004006a0\nCMP EAX,-0x1\nJZ 0x00400926\nMOV EDI,dword ptr [0x006020bc]\nCALL 0x004006c0\nTEST EAX,EAX\nJNZ 0x00400930\nMOV EDI,dword ptr [0x006020b8]\nCALL 0x004006c0\nTEST EAX,EAX\nJNZ 0x0040093a\nMOV RDI,qword ptr [R14 + 0x8]\nCALL 0x00400690\nMOV EBP,EAX\nMOV EDI,0x1\nCALL 0x004006c0\nTEST EAX,EAX\nJNZ 0x00400944\nXOR ESI,ESI\nMOV EDX,0x2\nMOV EDI,EBX\nCALL 0x004006f0\nMOV ECX,EAX\nCMP ECX,-0x1\nJZ 0x0040094e\nCMP ECX,EBX\nJNZ 0x00400958\nMOV EDI,EBP\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00400b20\nMOV EDI,0x400c34\nXOR EAX,EAX\nCALL 0x00400980\nMOV EDI,0x400c54\nCALL 0x00400a30\nMOV EDI,0x400c70\nCALL 0x00400a30\nMOV EDI,0x400c8f\nCALL 0x00400a30\nMOV EDI,0x400cb1\nCALL 0x00400a30\nMOV EDI,0x400ccb\nCALL 0x00400a30\nMOV EDI,0x400ce5\nCALL 0x00400a30\nMOV EDI,0x400d18\nCALL 0x00400a30\nMOV EDI,0x400d29\nXOR EAX,EAX\nMOV ESI,ECX\nCALL 0x00400980\nMOV EDI,0x400c62\nCALL 0x00400a30\nMOV RDI,qword ptr [R14 + 0x10]\nCALL 0x00400a90\nNOP dword ptr [RAX]\n'
p25
S'55\n41 56\n53\n49 89 f6\n49 8b 06\n48 89 05 5f 18 20 00\n83 ff 03\n0f 85 ac 00 00 00\nbf b8 20 60 00\ne8 6c fe ff ff\n85 c0\n0f 85 a6 00 00 00\ne8 bf fe ff ff\n89 c3\n83 fb ff\n0f 84 ea 00 00 00\n85 db\n0f 84 ec 00 00 00\nbf 01 00 00 00\ne8 32 fe ff ff\n85 c0\n0f 85 86 00 00 00\n8b 3d 20 18 20 00\nbe 01 00 00 00\ne8 fa fd ff ff\n83 f8 ff\n74 7b\n8b 3d 0b 18 20 00\ne8 0a fe ff ff\n85 c0\n75 76\n8b 3d f8 17 20 00\ne8 fb fd ff ff\n85 c0\n75 71\n49 8b 7e 08\ne8 be fd ff ff\n89 c5\nbf 01 00 00 00\ne8 e2 fd ff ff\n85 c0\n75 62\n31 f6\nba 02 00 00 00\n89 df\ne8 00 fe ff ff\n89 c1\n83 f9 ff\n74 57\n39 d9\n75 5d\n89 ef\n5b\n41 5e\n5d\ne9 1a 02 00 00\nbf 34 0c 40 00\n31 c0\ne8 6e 00 00 00\nbf 54 0c 40 00\ne8 14 01 00 00\nbf 70 0c 40 00\ne8 0a 01 00 00\nbf 8f 0c 40 00\ne8 00 01 00 00\nbf b1 0c 40 00\ne8 f6 00 00 00\nbf cb 0c 40 00\ne8 ec 00 00 00\nbf e5 0c 40 00\ne8 e2 00 00 00\nbf 18 0d 40 00\ne8 d8 00 00 00\nbf 29 0d 40 00\n31 c0\n89 ce\ne8 1a 00 00 00\nbf 62 0c 40 00\ne8 c0 00 00 00\n49 8b 7e 10\ne8 17 01 00 00\n0f 1f 80 00 00 00 00\n'
p26
S'.text:0000000000400840\n.text:0000000000400841\n.text:0000000000400843\n.text:0000000000400844\n.text:0000000000400847\n.text:000000000040084a\n.text:0000000000400851\n.text:0000000000400854\n.text:000000000040085a\n.text:000000000040085f\n.text:0000000000400864\n.text:0000000000400866\n.text:000000000040086c\n.text:0000000000400871\n.text:0000000000400873\n.text:0000000000400876\n.text:000000000040087c\n.text:000000000040087e\n.text:0000000000400884\n.text:0000000000400889\n.text:000000000040088e\n.text:0000000000400890\n.text:0000000000400896\n.text:000000000040089c\n.text:00000000004008a1\n.text:00000000004008a6\n.text:00000000004008a9\n.text:00000000004008ab\n.text:00000000004008b1\n.text:00000000004008b6\n.text:00000000004008b8\n.text:00000000004008ba\n.text:00000000004008c0\n.text:00000000004008c5\n.text:00000000004008c7\n.text:00000000004008c9\n.text:00000000004008cd\n.text:00000000004008d2\n.text:00000000004008d4\n.text:00000000004008d9\n.text:00000000004008de\n.text:00000000004008e0\n.text:00000000004008e2\n.text:00000000004008e4\n.text:00000000004008e9\n.text:00000000004008eb\n.text:00000000004008f0\n.text:00000000004008f2\n.text:00000000004008f5\n.text:00000000004008f7\n.text:00000000004008f9\n.text:00000000004008fb\n.text:00000000004008fd\n.text:00000000004008fe\n.text:0000000000400900\n.text:0000000000400901\n.text:0000000000400906\n.text:000000000040090b\n.text:000000000040090d\n.text:0000000000400912\n.text:0000000000400917\n.text:000000000040091c\n.text:0000000000400921\n.text:0000000000400926\n.text:000000000040092b\n.text:0000000000400930\n.text:0000000000400935\n.text:000000000040093a\n.text:000000000040093f\n.text:0000000000400944\n.text:0000000000400949\n.text:000000000040094e\n.text:0000000000400953\n.text:0000000000400958\n.text:000000000040095d\n.text:000000000040095f\n.text:0000000000400961\n.text:0000000000400966\n.text:000000000040096b\n.text:0000000000400970\n.text:0000000000400974\n.text:0000000000400979\n'
p27
tp28
sS'error'
p29
(S'\n__stdcall error(char * formatstr)\n'
p30
V\u000avoid error(char *formatstr,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_RCX;\u000a  undefined8 in_RDX;\u000a  undefined8 in_RSI;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list ap;\u000a  undefined4 local_d8;\u000a  undefined4 local_d4;\u000a  void **local_d0;\u000a  undefined *local_c8;\u000a  undefined local_b8 [8];\u000a  undefined8 local_b0;\u000a  undefined8 local_a8;\u000a  undefined8 local_a0;\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_c8 = local_b8;\u000a  local_d0 = &ap[0].overflow_arg_area;\u000a  local_d4 = 0x30;\u000a  local_d8 = 8;\u000a  local_b0 = in_RSI;\u000a  local_a8 = in_RDX;\u000a  local_a0 = in_RCX;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  warning_prefix();\u000a  vfprintf(stderr,formatstr,&local_d8);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p31
S'PUSH RBX\nSUB RSP,0xd0\nMOV RBX,RDI\nTEST AL,AL\nJZ 0x004009c6\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nMOV qword ptr [RSP + 0x28],RSI\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x8\nCALL 0x00400b80\nMOV RDI,qword ptr [0x006020a0]\nMOV RDX,RSP\nMOV RSI,RBX\nCALL 0x00400700\nMOV EDI,0x1\nCALL 0x00400710\n'
p32
S'53\n48 81 ec d0 00 00 00\n48 89 fb\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 89 74 24 28\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 08 00 00 00\ne8 76 01 00 00\n48 8b 3d 8f 16 20 00\n48 89 e2\n48 89 de\ne8 e4 fc ff ff\nbf 01 00 00 00\ne8 ea fc ff ff\n'
p33
S'.text:0000000000400980\n.text:0000000000400981\n.text:0000000000400988\n.text:000000000040098b\n.text:000000000040098d\n.text:000000000040098f\n.text:0000000000400994\n.text:0000000000400999\n.text:000000000040099e\n.text:00000000004009a6\n.text:00000000004009ae\n.text:00000000004009b6\n.text:00000000004009be\n.text:00000000004009c6\n.text:00000000004009cb\n.text:00000000004009d0\n.text:00000000004009d5\n.text:00000000004009da\n.text:00000000004009df\n.text:00000000004009e4\n.text:00000000004009e9\n.text:00000000004009f1\n.text:00000000004009f6\n.text:00000000004009fe\n.text:0000000000400a05\n.text:0000000000400a0a\n.text:0000000000400a11\n.text:0000000000400a14\n.text:0000000000400a17\n.text:0000000000400a1c\n.text:0000000000400a21\n'
p34
tp35
sS'shorten_status'
p36
(S'\n__stdcall shorten_status()\n'
p37
V\u000aint shorten_status(void)\u000a\u000a{\u000a  uint uVar1;\u000a  size_t sVar2;\u000a  byte bVar4;\u000a  ulong uVar3;\u000a  ulong in_RDI;\u000a  \u000a  uVar3 = in_RDI & 0xffffffff;\u000a  uVar1 = (uint)uVar3 & 0x7f;\u000a  bVar4 = (byte)(uVar3 >> 8);\u000a  if ((in_RDI & 0x7f) == 0) {\u000a    return (int)(uint)bVar4;\u000a  }\u000a  if (0 < (int)(uVar1 * 0x1000000 + 0x1000000) >> 0x19) {\u000a    return (int)(uVar1 | 0x80);\u000a  }\u000a  if ((char)uVar3 == 0x7f) {\u000a    return (int)((uint)bVar4 + 0x80);\u000a  }\u000a  if ((char)uVar3 < 0) {\u000a    error("Ow, somebody dumped core!");\u000a  }\u000a  error("shorten_status got an invalid status (?!)");\u000a  fputs(progname,stderr);\u000a  sVar2 = fwrite(&DAT_00400d42,2,1,stderr);\u000a  return (int)sVar2;\u000a}\u000a\u000a
p38
S'PUSH RAX\nMOV ECX,EDI\nMOV EAX,ECX\nAND EAX,0x7f\nJZ 0x00400b43\nMOV EDX,EAX\nSHL EDX,0x18\nADD EDX,0x1000000\nSAR EDX,0x19\nTEST EDX,EDX\nJLE 0x00400b48\nOR EAX,0x80\nPOP RCX\nRET\nMOVZX EAX,CH\nPOP RCX\nRET\nCMP CL,0x7f\nJNZ 0x00400b55\nMOVZX EAX,CH\nSUB EAX,-0x80\nPOP RCX\nRET\nTEST CL,CL\nJNS 0x00400b65\nMOV EDI,0x400e33\nXOR EAX,EAX\nCALL 0x00400980\nMOV EDI,0x400e4d\nXOR EAX,EAX\nCALL 0x00400980\nNOP dword ptr CS:[RAX + RAX*0x1]\n'
p39
S'50\n89 f9\n89 c8\n83 e0 7f\n74 19\n89 c2\nc1 e2 18\n81 c2 00 00 00 01\nc1 fa 19\n85 d2\n7e 0c\n0d 80 00 00 00\n59\nc3\n0f b6 c5\n59\nc3\n80 f9 7f\n75 08\n0f b6 c5\n83 e8 80\n59\nc3\n84 c9\n79 0c\nbf 33 0e 40 00\n31 c0\ne8 1b fe ff ff\nbf 4d 0e 40 00\n31 c0\ne8 0f fe ff ff\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n'
p40
S'.text:0000000000400b20\n.text:0000000000400b21\n.text:0000000000400b23\n.text:0000000000400b25\n.text:0000000000400b28\n.text:0000000000400b2a\n.text:0000000000400b2c\n.text:0000000000400b2f\n.text:0000000000400b35\n.text:0000000000400b38\n.text:0000000000400b3a\n.text:0000000000400b3c\n.text:0000000000400b41\n.text:0000000000400b42\n.text:0000000000400b43\n.text:0000000000400b46\n.text:0000000000400b47\n.text:0000000000400b48\n.text:0000000000400b4b\n.text:0000000000400b4d\n.text:0000000000400b50\n.text:0000000000400b53\n.text:0000000000400b54\n.text:0000000000400b55\n.text:0000000000400b57\n.text:0000000000400b59\n.text:0000000000400b5e\n.text:0000000000400b60\n.text:0000000000400b65\n.text:0000000000400b6a\n.text:0000000000400b6c\n.text:0000000000400b71\n'
p41
tp42
sS'deregister_tm_clones'
p43
(S'\n__stdcall deregister_tm_clones()\n'
p44
V\u000a/* WARNING: Removing unreachable block (ram,0x00400785) */\u000a/* WARNING: Removing unreachable block (ram,0x0040078f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p45
S'MOV EAX,0x60208f\nPUSH RBP\nSUB RAX,0x602088\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x004007a0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004007a0\nPOP RBP\nMOV EDI,0x602088\nJMP RAX\nPOP RBP\nRET\n'
p46
S'b8 8f 20 60 00\n55\n48 2d 88 20 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 88 20 60 00\nff e0\n5d\nc3\n'
p47
S'.text:0000000000400770\n.text:0000000000400775\n.text:0000000000400776\n.text:000000000040077c\n.text:0000000000400780\n.text:0000000000400783\n.text:0000000000400785\n.text:000000000040078a\n.text:000000000040078d\n.text:000000000040078f\n.text:0000000000400790\n.text:0000000000400795\n.text:00000000004007a0\n.text:00000000004007a1\n'
p48
tp49
sS'vfprintf'
p50
(S'\n__stdcall vfprintf(FILE * __s, char * __format, __gnuc_va_list __arg)\n'
p51
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint vfprintf(FILE *__s,char *__format,__gnuc_va_list __arg)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_vfprintf_00602058)();\u000a  return iVar1;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x00602058]\n'
p53
S'ff 25 52 19 20 00\n'
p54
S'.plt:0000000000400700\n'
p55
tp56
sS'warning_prefix'
p57
(S'\n__stdcall warning_prefix()\n'
p58
V\u000avoid warning_prefix(void)\u000a\u000a{\u000a  fputs(progname,stderr);\u000a  fwrite(&DAT_00400d42,2,1,stderr);\u000a  return;\u000a}\u000a\u000a
p59
S'PUSH RAX\nMOV RDI,qword ptr [0x006020b0]\nMOV RSI,qword ptr [0x006020a0]\nCALL 0x004006b0\nMOV RCX,qword ptr [0x006020a0]\nMOV EDI,0x400d42\nMOV ESI,0x2\nMOV EDX,0x1\nPOP RAX\nJMP 0x00400720\n'
p60
S'50\n48 8b 3d 28 15 20 00\n48 8b 35 11 15 20 00\ne8 1c fb ff ff\n48 8b 0d 05 15 20 00\nbf 42 0d 40 00\nbe 02 00 00 00\nba 01 00 00 00\n58\ne9 70 fb ff ff\n'
p61
S'.text:0000000000400b80\n.text:0000000000400b81\n.text:0000000000400b88\n.text:0000000000400b8f\n.text:0000000000400b94\n.text:0000000000400b9b\n.text:0000000000400ba0\n.text:0000000000400ba5\n.text:0000000000400baa\n.text:0000000000400bab\n'
p62
tp63
sS'FUN_00400670'
p64
(S'\n__stdcall FUN_00400670()\n'
p65
V\u000avoid FUN_00400670(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00602010)();\u000a  return;\u000a}\u000a\u000a
p66
S'PUSH qword ptr [0x00602008]\nJMP qword ptr [0x00602010]\n'
p67
S'ff 35 92 19 20 00\nff 25 94 19 20 00\n'
p68
S'.plt:0000000000400670\n.plt:0000000000400676\n'
p69
tp70
sS'__errno_location'
p71
(S'\n__stdcall __errno_location()\n'
p72
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00602018)();\u000a  return piVar1;\u000a}\u000a\u000a
p73
S'JMP qword ptr [0x00602018]\n'
p74
S'ff 25 92 19 20 00\n'
p75
S'.plt:0000000000400680\n'
p76
tp77
sS'pipe'
p78
(S'\n__stdcall pipe(int * __pipedes)\n'
p79
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint pipe(int *__pipedes)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_pipe_00602040)();\u000a  return iVar1;\u000a}\u000a\u000a
p80
S'JMP qword ptr [0x00602040]\n'
p81
S'ff 25 6a 19 20 00\n'
p82
S'.plt:00000000004006d0\n'
p83
tp84
sS'close'
p85
(S'\n__stdcall close(int __fd)\n'
p86
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_00602038)();\u000a  return iVar1;\u000a}\u000a\u000a
p87
S'JMP qword ptr [0x00602038]\n'
p88
S'ff 25 72 19 20 00\n'
p89
S'.plt:00000000004006c0\n'
p90
tp91
sS'frame_dummy'
p92
(S'\n__stdcall frame_dummy()\n'
p93
V\u000a/* WARNING: Removing unreachable block (ram,0x0040082a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p94
S'MOV EDI,0x601e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00400820\nJMP 0x004007b0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040081b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x004007b0\n'
p95
S'bf 18 1e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p96
S'.text:0000000000400810\n.text:0000000000400815\n.text:0000000000400819\n.text:000000000040081b\n.text:0000000000400820\n.text:0000000000400825\n.text:0000000000400828\n.text:000000000040082a\n.text:000000000040082b\n.text:000000000040082e\n.text:0000000000400830\n.text:0000000000400831\n'
p97
tp98
sS'register_tm_clones'
p99
(S'\n__stdcall register_tm_clones()\n'
p100
V\u000a/* WARNING: Removing unreachable block (ram,0x004007d3) */\u000a/* WARNING: Removing unreachable block (ram,0x004007dd) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p101
S'MOV ESI,0x602088\nPUSH RBP\nSUB RSI,0x602088\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x004007e8\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004007e8\nPOP RBP\nMOV EDI,0x602088\nJMP RAX\nPOP RBP\nRET\n'
p102
S'be 88 20 60 00\n55\n48 81 ee 88 20 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 88 20 60 00\nff e0\n5d\nc3\n'
p103
S'.text:00000000004007b0\n.text:00000000004007b5\n.text:00000000004007b6\n.text:00000000004007bd\n.text:00000000004007c1\n.text:00000000004007c4\n.text:00000000004007c7\n.text:00000000004007cb\n.text:00000000004007ce\n.text:00000000004007d1\n.text:00000000004007d3\n.text:00000000004007d8\n.text:00000000004007db\n.text:00000000004007dd\n.text:00000000004007de\n.text:00000000004007e3\n.text:00000000004007e8\n.text:00000000004007e9\n'
p104
tp105
sS'fwrite'
p106
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p107
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_00602068)();\u000a  return sVar1;\u000a}\u000a\u000a
p108
S'JMP qword ptr [0x00602068]\n'
p109
S'ff 25 42 19 20 00\n'
p110
S'.plt:0000000000400720\n'
p111
tp112
sS'fprintf'
p113
(S'\n__stdcall fprintf(FILE * __stream, char * __format)\n'
p114
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fprintf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fprintf_00602048)();\u000a  return iVar1;\u000a}\u000a\u000a
p115
S'JMP qword ptr [0x00602048]\n'
p116
S'ff 25 62 19 20 00\n'
p117
S'.plt:00000000004006e0\n'
p118
tp119
sS'exit'
p120
(S'\n__stdcall exit(int __status)\n'
p121
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_00602060)();\u000a  return;\u000a}\u000a\u000a
p122
S'JMP qword ptr [0x00602060]\n'
p123
S'ff 25 4a 19 20 00\n'
p124
S'.plt:0000000000400710\n'
p125
tp126
sS'__libc_csu_fini'
p127
(S'\n__stdcall __libc_csu_fini()\n'
p128
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p129
S'RET\n'
p130
S'f3 c3\n'
p131
S'.text:0000000000400c20\n'
p132
tp133
sS'fork'
p134
(S'\n__stdcall fork()\n'
p135
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t fork(void)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_fork_00602070)();\u000a  return _Var1;\u000a}\u000a\u000a
p136
S'JMP qword ptr [0x00602070]\n'
p137
S'ff 25 3a 19 20 00\n'
p138
S'.plt:0000000000400730\n'
p139
tp140
sS'error_with_errno'
p141
(S'\n__stdcall error_with_errno(char * message)\n'
p142
V\u000avoid error_with_errno(char *message)\u000a\u000a{\u000a  uint uVar1;\u000a  uint *puVar2;\u000a  \u000a  puVar2 = (uint *)__errno_location();\u000a  uVar1 = *puVar2;\u000a  warning_prefix();\u000a  fputs(message,stderr);\u000a  fwrite(": error number ",0xf,1,stderr);\u000a  fprintf(stderr,"%i\u005cn",(ulong)uVar1);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(1);\u000a}\u000a\u000a
p143
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00400680\nMOV EBP,dword ptr [RAX]\nCALL 0x00400b80\nMOV RSI,qword ptr [0x006020a0]\nMOV RDI,RBX\nCALL 0x004006b0\nMOV RCX,qword ptr [0x006020a0]\nMOV EDI,0x400d45\nMOV ESI,0xf\nMOV EDX,0x1\nCALL 0x00400720\nMOV RDI,qword ptr [0x006020a0]\nMOV ESI,0x400d3e\nXOR EAX,EAX\nMOV EDX,EBP\nCALL 0x004006e0\nMOV EDI,0x1\nCALL 0x00400710\n'
p144
S'55\n53\n50\n48 89 fb\ne8 45 fc ff ff\n8b 28\ne8 3e 01 00 00\n48 8b 35 57 16 20 00\n48 89 df\ne8 5f fc ff ff\n48 8b 0d 48 16 20 00\nbf 45 0d 40 00\nbe 0f 00 00 00\nba 01 00 00 00\ne8 b4 fc ff ff\n48 8b 3d 2d 16 20 00\nbe 3e 0d 40 00\n31 c0\n89 ea\ne8 5f fc ff ff\nbf 01 00 00 00\ne8 85 fc ff ff\n'
p145
S'.text:0000000000400a30\n.text:0000000000400a31\n.text:0000000000400a32\n.text:0000000000400a33\n.text:0000000000400a36\n.text:0000000000400a3b\n.text:0000000000400a3d\n.text:0000000000400a42\n.text:0000000000400a49\n.text:0000000000400a4c\n.text:0000000000400a51\n.text:0000000000400a58\n.text:0000000000400a5d\n.text:0000000000400a62\n.text:0000000000400a67\n.text:0000000000400a6c\n.text:0000000000400a73\n.text:0000000000400a78\n.text:0000000000400a7a\n.text:0000000000400a7c\n.text:0000000000400a81\n.text:0000000000400a86\n'
p146
tp147
sS'system'
p148
(S'\n__stdcall system(char * __command)\n'
p149
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint system(char *__command)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_system_00602020)();\u000a  return iVar1;\u000a}\u000a\u000a
p150
S'JMP qword ptr [0x00602020]\n'
p151
S'ff 25 8a 19 20 00\n'
p152
S'.plt:0000000000400690\n'
p153
tp154
sS'subprocess2'
p155
(S'\n__stdcall subprocess2(char * cmd)\n'
p156
V\u000avoid subprocess2(char *cmd)\u000a\u000a{\u000a  int iVar1;\u000a  char cVar2;\u000a  char *pcVar3;\u000a  \u000a  iVar1 = close(0);\u000a  if (iVar1 == 0) {\u000a    iVar1 = dup2(filedes[0],0);\u000a    if (iVar1 == -1) {\u000a      error_with_errno("Failed (in child) redefining standard input");\u000a      goto LAB_00400abb;\u000a    }\u000a  }\u000a  else {\u000aLAB_00400abb:\u000a    error_with_errno("Failed (in child) closing standard input");\u000a  }\u000a  iVar1 = close(filedes[0]);\u000a  if (iVar1 == 0) {\u000a    iVar1 = close(filedes[1]);\u000a    if (iVar1 == 0) {\u000a      system(cmd);\u000a      iVar1 = close(0);\u000a      if (iVar1 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a        exit(0);\u000a      }\u000a      goto LAB_00400b11;\u000a    }\u000a  }\u000a  else {\u000a    error_with_errno("Failed (in child) closing filedes[0]");\u000a  }\u000a  error_with_errno("Failed (in child) closing filedes[1]");\u000aLAB_00400b11:\u000a  pcVar3 = "Failed (in child) closing standard output  (while cleaning up)";\u000a  error_with_errno("Failed (in child) closing standard output  (while cleaning up)");\u000a  if (((ulong)pcVar3 & 0x7f) == 0) {\u000a    return;\u000a  }\u000a  if (0 < (int)(((uint)((ulong)pcVar3 & 0xffffffff) & 0x7f) * 0x1000000 + 0x1000000) >> 0x19) {\u000a    return;\u000a  }\u000a  cVar2 = (char)((ulong)pcVar3 & 0xffffffff);\u000a  if (cVar2 == 0x7f) {\u000a    return;\u000a  }\u000a  if (cVar2 < 0) {\u000a    error("Ow, somebody dumped core!");\u000a  }\u000a  error("shorten_status got an invalid status (?!)");\u000a  fputs(progname,stderr);\u000a  fwrite(&DAT_00400d42,2,1,stderr);\u000a  return;\u000a}\u000a\u000a
p157
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x004006c0\nTEST EAX,EAX\nJNZ 0x00400abb\nMOV EDI,dword ptr [0x006020b8]\nXOR ESI,ESI\nCALL 0x004006a0\nCMP EAX,-0x1\nJNZ 0x00400ac5\nMOV EDI,0x400d7e\nCALL 0x00400a30\nMOV EDI,0x400d55\nCALL 0x00400a30\nMOV EDI,dword ptr [0x006020b8]\nCALL 0x004006c0\nTEST EAX,EAX\nJNZ 0x00400afd\nMOV EDI,dword ptr [0x006020bc]\nCALL 0x004006c0\nTEST EAX,EAX\nJNZ 0x00400b07\nMOV RDI,RBX\nCALL 0x00400690\nXOR EDI,EDI\nCALL 0x004006c0\nTEST EAX,EAX\nJNZ 0x00400b11\nXOR EDI,EDI\nCALL 0x00400710\nMOV EDI,0x400daa\nCALL 0x00400a30\nMOV EDI,0x400dcf\nCALL 0x00400a30\nMOV EDI,0x400df4\nCALL 0x00400a30\nNOP dword ptr [RAX + RAX*0x1]\n'
p158
S'53\n48 89 fb\n31 ff\ne8 25 fc ff ff\n85 c0\n75 1c\n8b 3d 13 16 20 00\n31 f6\ne8 f4 fb ff ff\n83 f8 ff\n75 14\nbf 7e 0d 40 00\ne8 75 ff ff ff\nbf 55 0d 40 00\ne8 6b ff ff ff\n8b 3d ed 15 20 00\ne8 f0 fb ff ff\n85 c0\n75 29\n8b 3d e2 15 20 00\ne8 e1 fb ff ff\n85 c0\n75 24\n48 89 df\ne8 a5 fb ff ff\n31 ff\ne8 ce fb ff ff\n85 c0\n75 1b\n31 ff\ne8 13 fc ff ff\nbf aa 0d 40 00\ne8 29 ff ff ff\nbf cf 0d 40 00\ne8 1f ff ff ff\nbf f4 0d 40 00\ne8 15 ff ff ff\n0f 1f 44 00 00\n'
p159
S'.text:0000000000400a90\n.text:0000000000400a91\n.text:0000000000400a94\n.text:0000000000400a96\n.text:0000000000400a9b\n.text:0000000000400a9d\n.text:0000000000400a9f\n.text:0000000000400aa5\n.text:0000000000400aa7\n.text:0000000000400aac\n.text:0000000000400aaf\n.text:0000000000400ab1\n.text:0000000000400ab6\n.text:0000000000400abb\n.text:0000000000400ac0\n.text:0000000000400ac5\n.text:0000000000400acb\n.text:0000000000400ad0\n.text:0000000000400ad2\n.text:0000000000400ad4\n.text:0000000000400ada\n.text:0000000000400adf\n.text:0000000000400ae1\n.text:0000000000400ae3\n.text:0000000000400ae6\n.text:0000000000400aeb\n.text:0000000000400aed\n.text:0000000000400af2\n.text:0000000000400af4\n.text:0000000000400af6\n.text:0000000000400af8\n.text:0000000000400afd\n.text:0000000000400b02\n.text:0000000000400b07\n.text:0000000000400b0c\n.text:0000000000400b11\n.text:0000000000400b16\n.text:0000000000400b1b\n'
p160
tp161
sS'__do_global_dtors_aux'
p162
(S'\n__stdcall __do_global_dtors_aux()\n'
p163
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p164
S'CMP byte ptr [0x006020a8],0x0\nJNZ 0x0040080a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00400770\nPOP RBP\nMOV byte ptr [0x006020a8],0x1\nRET\n'
p165
S'80 3d b1 18 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 9e 18 20 00 01\nf3 c3\n'
p166
S'.text:00000000004007f0\n.text:00000000004007f7\n.text:00000000004007f9\n.text:00000000004007fa\n.text:00000000004007fd\n.text:0000000000400802\n.text:0000000000400803\n.text:000000000040080a\n'
p167
tp168
sS'_fini'
p169
(S'\n__stdcall _fini()\n'
p170
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p171
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p172
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p173
S'.fini:0000000000400c24\n.fini:0000000000400c28\n.fini:0000000000400c2c\n'
p174
tp175
sS'fputs'
p176
(S'\n__stdcall fputs(char * __s, FILE * __stream)\n'
p177
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_00602030)();\u000a  return iVar1;\u000a}\u000a\u000a
p178
S'JMP qword ptr [0x00602030]\n'
p179
S'ff 25 7a 19 20 00\n'
p180
S'.plt:00000000004006b0\n'
p181
tp182
sS'dup2'
p183
(S'\n__stdcall dup2(int __fd, int __fd2)\n'
p184
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dup2(int __fd,int __fd2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dup2_00602028)();\u000a  return iVar1;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x00602028]\n'
p186
S'ff 25 82 19 20 00\n'
p187
S'.plt:00000000004006a0\n'
p188
tp189
sS'waitpid'
p190
(S'\n__stdcall waitpid(__pid_t __pid, int * __stat_loc, int __options)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__pid_t waitpid(__pid_t __pid,int *__stat_loc,int __options)\u000a\u000a{\u000a  __pid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_waitpid_00602050)();\u000a  return _Var1;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x00602050]\n'
p193
S'ff 25 5a 19 20 00\n'
p194
S'.plt:00000000004006f0\n'
p195
tp196
s.