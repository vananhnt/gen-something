(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x608e08]\nPUSH RBP\nLEA RBP,[0x608e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401478\nTEST RBP,RBP\nJZ 0x00405aa6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00405a90\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 a6 33 20 00\n55\n48 8d 2d a6 33 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 f7 b9 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000405a50\n.text:0000000000405a52\n.text:0000000000405a54\n.text:0000000000405a57\n.text:0000000000405a59\n.text:0000000000405a5b\n.text:0000000000405a62\n.text:0000000000405a63\n.text:0000000000405a6a\n.text:0000000000405a6b\n.text:0000000000405a6e\n.text:0000000000405a71\n.text:0000000000405a74\n.text:0000000000405a78\n.text:0000000000405a7c\n.text:0000000000405a81\n.text:0000000000405a84\n.text:0000000000405a86\n.text:0000000000405a88\n.text:0000000000405a90\n.text:0000000000405a93\n.text:0000000000405a96\n.text:0000000000405a99\n.text:0000000000405a9d\n.text:0000000000405aa1\n.text:0000000000405aa4\n.text:0000000000405aa6\n.text:0000000000405aaa\n.text:0000000000405aab\n.text:0000000000405aac\n.text:0000000000405aae\n.text:0000000000405ab0\n.text:0000000000405ab2\n.text:0000000000405ab4\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00609170)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x00609170]\n'
p11
S'ff 25 1a 7a 20 00\n'
p12
S'.plt:0000000000401750\n'
p13
tp14
sS'c_isdigit'
p15
(S'\n__stdcall c_isdigit()\n'
p16
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p17
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p18
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p19
S'.text:0000000000405460\n.text:0000000000405463\n.text:0000000000405466\n.text:0000000000405469\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_00406f1b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x404cc7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x404d48;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x404ddc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00404b58\nMOV EDX,0x406f08\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401840\nJMP 0x00404b6d\nMOV EDX,0x406f14\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401840\nXOR EDI,EDI\nMOV ESI,0x406f1b\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4071f0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401840\nXOR EDI,EDI\nMOV ESI,0x406f1f\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x004016a0\nCMP R12,0x9\nJA 0x00404bf6\nJMP qword ptr [0x406eb8 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x406fea\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401840\nXOR EDI,EDI\nMOV ESI,0x407129\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401840\nADD RSP,0x38\nJMP 0x00404e67\nXOR EDI,EDI\nMOV ESI,0x406ffa\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401840\nXOR EDI,EDI\nMOV ESI,0x407011\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401840\nXOR EDI,EDI\nMOV ESI,0x40702d\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401840\nADD RSP,0x18\nJMP 0x00404e67\nXOR EDI,EDI\nMOV ESI,0x40704d\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401840\nADD RSP,0x18\nJMP 0x00404e67\nXOR EDI,EDI\nMOV ESI,0x407071\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401840\nADD RSP,0x28\nJMP 0x00404e67\nXOR EDI,EDI\nMOV ESI,0x407099\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401840\nADD RSP,0x28\nJMP 0x00404e67\nXOR EDI,EDI\nMOV ESI,0x4070c5\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401840\nADD RSP,0x38\nJMP 0x00404e67\nXOR EDI,EDI\nMOV ESI,0x4070f5\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401840\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x004014c0\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 08 6f 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 ea cc ff ff\neb 15\nba 14 6f 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 d3 cc ff ff\n31 ff\nbe 1b 6f 40 00\nba 05 00 00 00\ne8 22 ca ff ff\n48 89 c1\nbe 01 00 00 00\nba f0 71 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 a5 cc ff ff\n31 ff\nbe 1f 6f 40 00\nba 05 00 00 00\ne8 f4 c9 ff ff\n48 89 c7\n4c 89 f6\ne8 e9 ca ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 b8 6e 40 00\n31 ff\nbe ea 6f 40 00\nba 05 00 00 00\ne8 ca c9 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 4a cc ff ff\n31 ff\nbe 29 71 40 00\nba 05 00 00 00\ne8 99 c9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 01 cc ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe fa 6f 40 00\nba 05 00 00 00\ne8 47 c9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 c3 cb ff ff\n31 ff\nbe 11 70 40 00\nba 05 00 00 00\ne8 12 c9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 8a cb ff ff\n31 ff\nbe 2d 70 40 00\nba 05 00 00 00\ne8 d9 c8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 54 cb ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 4d 70 40 00\nba 05 00 00 00\ne8 9a c8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 12 cb ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 71 70 40 00\nba 05 00 00 00\ne8 58 c8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 c8 ca ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 99 70 40 00\nba 05 00 00 00\ne8 0e c8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 7e ca ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe c5 70 40 00\nba 05 00 00 00\ne8 c4 c7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 2c ca ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe f5 70 40 00\nba 05 00 00 00\ne8 75 c7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 dd c9 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 4c c6 ff ff\n'
p26
S'.text:0000000000404b20\n.text:0000000000404b22\n.text:0000000000404b24\n.text:0000000000404b26\n.text:0000000000404b27\n.text:0000000000404b28\n.text:0000000000404b2b\n.text:0000000000404b2e\n.text:0000000000404b31\n.text:0000000000404b34\n.text:0000000000404b37\n.text:0000000000404b3a\n.text:0000000000404b3f\n.text:0000000000404b42\n.text:0000000000404b44\n.text:0000000000404b49\n.text:0000000000404b4b\n.text:0000000000404b4e\n.text:0000000000404b51\n.text:0000000000404b56\n.text:0000000000404b58\n.text:0000000000404b5d\n.text:0000000000404b5f\n.text:0000000000404b62\n.text:0000000000404b65\n.text:0000000000404b68\n.text:0000000000404b6d\n.text:0000000000404b6f\n.text:0000000000404b74\n.text:0000000000404b79\n.text:0000000000404b7e\n.text:0000000000404b81\n.text:0000000000404b86\n.text:0000000000404b8b\n.text:0000000000404b91\n.text:0000000000404b93\n.text:0000000000404b96\n.text:0000000000404b9b\n.text:0000000000404b9d\n.text:0000000000404ba2\n.text:0000000000404ba7\n.text:0000000000404bac\n.text:0000000000404baf\n.text:0000000000404bb2\n.text:0000000000404bb7\n.text:0000000000404bbb\n.text:0000000000404bbd\n.text:0000000000404bc5\n.text:0000000000404bc7\n.text:0000000000404bcc\n.text:0000000000404bd1\n.text:0000000000404bd6\n.text:0000000000404bd9\n.text:0000000000404bdc\n.text:0000000000404be1\n.text:0000000000404be3\n.text:0000000000404be6\n.text:0000000000404bea\n.text:0000000000404beb\n.text:0000000000404bed\n.text:0000000000404bef\n.text:0000000000404bf1\n.text:0000000000404bf6\n.text:0000000000404bf8\n.text:0000000000404bfd\n.text:0000000000404c02\n.text:0000000000404c07\n.text:0000000000404c0a\n.text:0000000000404c0d\n.text:0000000000404c11\n.text:0000000000404c15\n.text:0000000000404c1a\n.text:0000000000404c1f\n.text:0000000000404c22\n.text:0000000000404c26\n.text:0000000000404c2a\n.text:0000000000404c2e\n.text:0000000000404c32\n.text:0000000000404c36\n.text:0000000000404c3a\n.text:0000000000404c3f\n.text:0000000000404c43\n.text:0000000000404c48\n.text:0000000000404c4a\n.text:0000000000404c4f\n.text:0000000000404c54\n.text:0000000000404c59\n.text:0000000000404c5c\n.text:0000000000404c5f\n.text:0000000000404c63\n.text:0000000000404c68\n.text:0000000000404c6a\n.text:0000000000404c6d\n.text:0000000000404c71\n.text:0000000000404c72\n.text:0000000000404c74\n.text:0000000000404c76\n.text:0000000000404c78\n.text:0000000000404c7d\n.text:0000000000404c7f\n.text:0000000000404c84\n.text:0000000000404c89\n.text:0000000000404c8e\n.text:0000000000404c91\n.text:0000000000404c94\n.text:0000000000404c98\n.text:0000000000404c9c\n.text:0000000000404ca1\n.text:0000000000404ca3\n.text:0000000000404ca6\n.text:0000000000404caa\n.text:0000000000404cab\n.text:0000000000404cad\n.text:0000000000404caf\n.text:0000000000404cb1\n.text:0000000000404cb6\n.text:0000000000404cb8\n.text:0000000000404cbd\n.text:0000000000404cc2\n.text:0000000000404cc7\n.text:0000000000404cca\n.text:0000000000404ccd\n.text:0000000000404cd1\n.text:0000000000404cd5\n.text:0000000000404cd9\n.text:0000000000404cde\n.text:0000000000404ce0\n.text:0000000000404ce3\n.text:0000000000404ce7\n.text:0000000000404cec\n.text:0000000000404cf0\n.text:0000000000404cf5\n.text:0000000000404cf7\n.text:0000000000404cfc\n.text:0000000000404d01\n.text:0000000000404d06\n.text:0000000000404d09\n.text:0000000000404d0c\n.text:0000000000404d10\n.text:0000000000404d14\n.text:0000000000404d19\n.text:0000000000404d1e\n.text:0000000000404d21\n.text:0000000000404d25\n.text:0000000000404d29\n.text:0000000000404d2e\n.text:0000000000404d32\n.text:0000000000404d37\n.text:0000000000404d39\n.text:0000000000404d3e\n.text:0000000000404d43\n.text:0000000000404d48\n.text:0000000000404d4b\n.text:0000000000404d4e\n.text:0000000000404d52\n.text:0000000000404d56\n.text:0000000000404d5a\n.text:0000000000404d5f\n.text:0000000000404d64\n.text:0000000000404d67\n.text:0000000000404d6b\n.text:0000000000404d6f\n.text:0000000000404d73\n.text:0000000000404d78\n.text:0000000000404d7c\n.text:0000000000404d81\n.text:0000000000404d83\n.text:0000000000404d88\n.text:0000000000404d8d\n.text:0000000000404d92\n.text:0000000000404d95\n.text:0000000000404d98\n.text:0000000000404d9c\n.text:0000000000404da0\n.text:0000000000404da5\n.text:0000000000404daa\n.text:0000000000404dad\n.text:0000000000404db1\n.text:0000000000404db5\n.text:0000000000404db9\n.text:0000000000404dbd\n.text:0000000000404dc2\n.text:0000000000404dc6\n.text:0000000000404dcb\n.text:0000000000404dcd\n.text:0000000000404dd2\n.text:0000000000404dd7\n.text:0000000000404ddc\n.text:0000000000404ddf\n.text:0000000000404de2\n.text:0000000000404de6\n.text:0000000000404dea\n.text:0000000000404dee\n.text:0000000000404df3\n.text:0000000000404df8\n.text:0000000000404dfb\n.text:0000000000404dff\n.text:0000000000404e03\n.text:0000000000404e07\n.text:0000000000404e0b\n.text:0000000000404e0f\n.text:0000000000404e14\n.text:0000000000404e18\n.text:0000000000404e1a\n.text:0000000000404e1c\n.text:0000000000404e21\n.text:0000000000404e26\n.text:0000000000404e2b\n.text:0000000000404e2e\n.text:0000000000404e31\n.text:0000000000404e35\n.text:0000000000404e39\n.text:0000000000404e3e\n.text:0000000000404e43\n.text:0000000000404e46\n.text:0000000000404e4a\n.text:0000000000404e4e\n.text:0000000000404e52\n.text:0000000000404e56\n.text:0000000000404e5a\n.text:0000000000404e5e\n.text:0000000000404e63\n.text:0000000000404e67\n.text:0000000000404e68\n.text:0000000000404e6a\n.text:0000000000404e6c\n.text:0000000000404e6e\n.text:0000000000404e6f\n'
p27
tp28
sS'usage'
p29
(S'\n__stdcall usage()\n'
p30
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s OPTION... [FILE]...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,"Print selected parts of lines from each FILE to standard output.\u005cn",5\u000a                           );\u000a    fputs_unlocked(__s,stdout);\u000a    emit_stdin_note();\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "  -b, --bytes=LIST        select only these bytes\u005cn  -c, --characters=LIST   select only these characters\u005cn  -d, --delimiter=DELIM   use DELIM instead of TAB for field delimiter\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -f, --fields=LIST       select only these fields;  also print any line\u005cn                            that contains no delimiter character, unless\u005cn                            the -s option is specified\u005cn  -n                      (ignored)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --complement        complement the set of selected bytes, characters\u005cn                            or fields\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -s, --only-delimited    do not print lines not containing delimiters\u005cn      --output-delimiter=STRING  use STRING as the output delimiter\u005cn                            the default is to use the input delimiter\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  -z, --zero-terminated    line delimiter is NUL, not newline\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnUse one, and only one of -b, -c or -f.  Each LIST is made up of one\u005cnrange, or many ranges separated by commas.  Selected input is written\u005cnin the same order that it is read, and is written exactly once.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "Each range is one of:\u005cn\u005cn  N     N\u005c'th byte, character or field, counted from 1\u005cn  N-    from N\u005c'th byte, character or field, to end of line\u005cn  N-M   from N\u005c'th to M\u005c'th (included) byte, character or field\u005cn  -M    from first to M\u005c'th (included) byte, character or field\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p31
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401b1b\nXOR EDI,EDI\nMOV ESI,0x405df0\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x00609348]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x405e0f\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016a0\nCALL 0x00401b70\nCALL 0x00401ba0\nXOR EDI,EDI\nMOV ESI,0x405e51\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016a0\nXOR EDI,EDI\nMOV ESI,0x405f02\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016a0\nXOR EDI,EDI\nMOV ESI,0x405ff0\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016a0\nXOR EDI,EDI\nMOV ESI,0x406062\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016a0\nXOR EDI,EDI\nMOV ESI,0x406134\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016a0\nXOR EDI,EDI\nMOV ESI,0x406173\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016a0\nXOR EDI,EDI\nMOV ESI,0x4061a0\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016a0\nXOR EDI,EDI\nMOV ESI,0x4061d6\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016a0\nXOR EDI,EDI\nMOV ESI,0x4062a2\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x004016a0\nCALL 0x00401bd0\nMOV EDI,EBX\nCALL 0x00401820\nCALL 0x00401b30\nMOV EDI,EBX\nCALL 0x00401820\n'
p32
S'53\n89 fb\n85 db\n0f 85 80 01 00 00\n31 ff\nbe f0 5d 40 00\nba 05 00 00 00\ne8 f4 fb ff ff\n48 89 c1\n48 8b 15 92 79 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 eb fd ff ff\n31 ff\nbe 0f 5e 40 00\nba 05 00 00 00\ne8 ca fb ff ff\n48 8b 35 cb 78 20 00\n48 89 c7\ne8 bb fc ff ff\ne8 86 01 00 00\ne8 b1 01 00 00\n31 ff\nbe 51 5e 40 00\nba 05 00 00 00\ne8 a0 fb ff ff\n48 8b 35 a1 78 20 00\n48 89 c7\ne8 91 fc ff ff\n31 ff\nbe 02 5f 40 00\nba 05 00 00 00\ne8 80 fb ff ff\n48 8b 35 81 78 20 00\n48 89 c7\ne8 71 fc ff ff\n31 ff\nbe f0 5f 40 00\nba 05 00 00 00\ne8 60 fb ff ff\n48 8b 35 61 78 20 00\n48 89 c7\ne8 51 fc ff ff\n31 ff\nbe 62 60 40 00\nba 05 00 00 00\ne8 40 fb ff ff\n48 8b 35 41 78 20 00\n48 89 c7\ne8 31 fc ff ff\n31 ff\nbe 34 61 40 00\nba 05 00 00 00\ne8 20 fb ff ff\n48 8b 35 21 78 20 00\n48 89 c7\ne8 11 fc ff ff\n31 ff\nbe 73 61 40 00\nba 05 00 00 00\ne8 00 fb ff ff\n48 8b 35 01 78 20 00\n48 89 c7\ne8 f1 fb ff ff\n31 ff\nbe a0 61 40 00\nba 05 00 00 00\ne8 e0 fa ff ff\n48 8b 35 e1 77 20 00\n48 89 c7\ne8 d1 fb ff ff\n31 ff\nbe d6 61 40 00\nba 05 00 00 00\ne8 c0 fa ff ff\n48 8b 35 c1 77 20 00\n48 89 c7\ne8 b1 fb ff ff\n31 ff\nbe a2 62 40 00\nba 05 00 00 00\ne8 a0 fa ff ff\n48 8b 35 a1 77 20 00\n48 89 c7\ne8 91 fb ff ff\ne8 bc 00 00 00\n89 df\ne8 05 fd ff ff\ne8 10 00 00 00\n89 df\ne8 f9 fc ff ff\n'
p33
S'.text:0000000000401990\n.text:0000000000401991\n.text:0000000000401993\n.text:0000000000401995\n.text:000000000040199b\n.text:000000000040199d\n.text:00000000004019a2\n.text:00000000004019a7\n.text:00000000004019ac\n.text:00000000004019af\n.text:00000000004019b6\n.text:00000000004019bb\n.text:00000000004019bd\n.text:00000000004019c0\n.text:00000000004019c5\n.text:00000000004019c7\n.text:00000000004019cc\n.text:00000000004019d1\n.text:00000000004019d6\n.text:00000000004019dd\n.text:00000000004019e0\n.text:00000000004019e5\n.text:00000000004019ea\n.text:00000000004019ef\n.text:00000000004019f1\n.text:00000000004019f6\n.text:00000000004019fb\n.text:0000000000401a00\n.text:0000000000401a07\n.text:0000000000401a0a\n.text:0000000000401a0f\n.text:0000000000401a11\n.text:0000000000401a16\n.text:0000000000401a1b\n.text:0000000000401a20\n.text:0000000000401a27\n.text:0000000000401a2a\n.text:0000000000401a2f\n.text:0000000000401a31\n.text:0000000000401a36\n.text:0000000000401a3b\n.text:0000000000401a40\n.text:0000000000401a47\n.text:0000000000401a4a\n.text:0000000000401a4f\n.text:0000000000401a51\n.text:0000000000401a56\n.text:0000000000401a5b\n.text:0000000000401a60\n.text:0000000000401a67\n.text:0000000000401a6a\n.text:0000000000401a6f\n.text:0000000000401a71\n.text:0000000000401a76\n.text:0000000000401a7b\n.text:0000000000401a80\n.text:0000000000401a87\n.text:0000000000401a8a\n.text:0000000000401a8f\n.text:0000000000401a91\n.text:0000000000401a96\n.text:0000000000401a9b\n.text:0000000000401aa0\n.text:0000000000401aa7\n.text:0000000000401aaa\n.text:0000000000401aaf\n.text:0000000000401ab1\n.text:0000000000401ab6\n.text:0000000000401abb\n.text:0000000000401ac0\n.text:0000000000401ac7\n.text:0000000000401aca\n.text:0000000000401acf\n.text:0000000000401ad1\n.text:0000000000401ad6\n.text:0000000000401adb\n.text:0000000000401ae0\n.text:0000000000401ae7\n.text:0000000000401aea\n.text:0000000000401aef\n.text:0000000000401af1\n.text:0000000000401af6\n.text:0000000000401afb\n.text:0000000000401b00\n.text:0000000000401b07\n.text:0000000000401b0a\n.text:0000000000401b0f\n.text:0000000000401b14\n.text:0000000000401b16\n.text:0000000000401b1b\n.text:0000000000401b20\n.text:0000000000401b22\n'
p34
tp35
sS'quoting_options_from_style'
p36
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p37
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p38
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040449d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x004014c0\n'
p39
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 1e d0 ff ff\n'
p40
S'.text:0000000000404450\n.text:0000000000404454\n.text:0000000000404457\n.text:000000000040445c\n.text:0000000000404461\n.text:0000000000404465\n.text:000000000040446d\n.text:0000000000404470\n.text:0000000000404472\n.text:0000000000404474\n.text:0000000000404478\n.text:000000000040447b\n.text:000000000040447f\n.text:0000000000404484\n.text:0000000000404489\n.text:000000000040448d\n.text:0000000000404491\n.text:0000000000404495\n.text:0000000000404498\n.text:000000000040449c\n.text:000000000040449d\n'
p41
tp42
sS'rpl_fclose'
p43
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p44
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_004052d9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_004052d9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p45
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401710\nTEST EAX,EAX\nJS 0x004052d9\nMOV RDI,RBX\nCALL 0x00401760\nTEST EAX,EAX\nJZ 0x004052a7\nMOV RDI,RBX\nCALL 0x00401710\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401600\nCMP RAX,-0x1\nJZ 0x004052d9\nMOV RDI,RBX\nCALL 0x004052f0\nTEST EAX,EAX\nJZ 0x004052d9\nCALL 0x004014d0\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401580\nTEST EBP,EBP\nJZ 0x004052d2\nCALL 0x004014d0\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401580\n'
p46
S'55\n53\n50\n48 89 fb\ne8 95 c4 ff ff\n85 c0\n78 5a\n48 89 df\ne8 d9 c4 ff ff\n85 c0\n74 1c\n48 89 df\ne8 7d c4 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 5f c3 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 18 c2 ff ff\n8b 28\n48 89 df\ne8 be c2 ff ff\n85 ed\n74 0c\ne8 05 c2 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 99 c2 ff ff\n'
p47
S'.text:0000000000405270\n.text:0000000000405271\n.text:0000000000405272\n.text:0000000000405273\n.text:0000000000405276\n.text:000000000040527b\n.text:000000000040527d\n.text:000000000040527f\n.text:0000000000405282\n.text:0000000000405287\n.text:0000000000405289\n.text:000000000040528b\n.text:000000000040528e\n.text:0000000000405293\n.text:0000000000405295\n.text:000000000040529a\n.text:000000000040529c\n.text:00000000004052a1\n.text:00000000004052a5\n.text:00000000004052a7\n.text:00000000004052aa\n.text:00000000004052af\n.text:00000000004052b1\n.text:00000000004052b3\n.text:00000000004052b8\n.text:00000000004052ba\n.text:00000000004052bd\n.text:00000000004052c2\n.text:00000000004052c4\n.text:00000000004052c6\n.text:00000000004052cb\n.text:00000000004052cd\n.text:00000000004052d2\n.text:00000000004052d6\n.text:00000000004052d7\n.text:00000000004052d8\n.text:00000000004052d9\n.text:00000000004052dc\n.text:00000000004052e0\n.text:00000000004052e1\n.text:00000000004052e2\n'
p48
tp49
sS'strcpy'
p50
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p51
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00609048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x00609048]\n'
p53
S'ff 25 42 7b 20 00\n'
p54
S'.plt:0000000000401500\n'
p55
tp56
sS'fwrite_unlocked'
p57
(S'\n__stdcall fwrite_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_unlocked_00609180)();\u000a  return sVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x00609180]\n'
p60
S'ff 25 0a 7a 20 00\n'
p61
S'.plt:0000000000401770\n'
p62
tp63
sS'to_uchar'
p64
(S'\n__stdcall to_uchar()\n'
p65
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p66
S'MOV EAX,EDI\nRET\n'
p67
S'89 f8\nc3\n'
p68
S'.text:0000000000402b60\n.text:0000000000402b62\n'
p69
tp70
sS'strncmp'
p71
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p72
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00609038)();\u000a  return iVar1;\u000a}\u000a\u000a
p73
S'JMP qword ptr [0x00609038]\n'
p74
S'ff 25 52 7b 20 00\n'
p75
S'.plt:00000000004014e0\n'
p76
tp77
sS'xnrealloc'
p78
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p79
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p80
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00405074\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00405080\nPUSH RAX\nCALL 0x004051d0\n'
p81
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p82
S'.text:0000000000405060\n.text:0000000000405063\n.text:0000000000405066\n.text:0000000000405069\n.text:000000000040506b\n.text:000000000040506f\n.text:0000000000405072\n.text:0000000000405074\n.text:0000000000405075\n'
p83
tp84
sS'quote'
p85
(S'\n__stdcall quote(char * arg)\n'
p86
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p87
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404700\n'
p88
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p89
S'.text:0000000000404710\n.text:0000000000404713\n.text:0000000000404715\n.text:0000000000404718\n'
p90
tp91
sS'emit_bug_reporting_address'
p92
(S'\n__stdcall emit_bug_reporting_address()\n'
p93
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p94
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x407165\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40717a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x407190\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406420\nMOV ECX,0x40663f\nXOR EAX,EAX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x4071a4\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004016a0\n'
p95
S'50\n31 ff\nbe 65 71 40 00\nba 05 00 00 00\ne8 ee c5 ff ff\n48 89 c1\nbf 01 00 00 00\nba 7a 71 40 00\n31 c0\n48 89 ce\ne8 e7 c7 ff ff\n31 ff\nbe 90 71 40 00\nba 05 00 00 00\ne8 c6 c5 ff ff\n48 89 c6\nbf 01 00 00 00\nba 20 64 40 00\nb9 3f 66 40 00\n31 c0\ne8 bd c7 ff ff\n31 ff\nbe a4 71 40 00\nba 05 00 00 00\ne8 9c c5 ff ff\n48 8b 35 9d 42 20 00\n48 89 c7\n58\ne9 8c c6 ff ff\n'
p96
S'.text:0000000000404fa0\n.text:0000000000404fa1\n.text:0000000000404fa3\n.text:0000000000404fa8\n.text:0000000000404fad\n.text:0000000000404fb2\n.text:0000000000404fb5\n.text:0000000000404fba\n.text:0000000000404fbf\n.text:0000000000404fc1\n.text:0000000000404fc4\n.text:0000000000404fc9\n.text:0000000000404fcb\n.text:0000000000404fd0\n.text:0000000000404fd5\n.text:0000000000404fda\n.text:0000000000404fdd\n.text:0000000000404fe2\n.text:0000000000404fe7\n.text:0000000000404fec\n.text:0000000000404fee\n.text:0000000000404ff3\n.text:0000000000404ff5\n.text:0000000000404ffa\n.text:0000000000404fff\n.text:0000000000405004\n.text:000000000040500b\n.text:000000000040500e\n.text:000000000040500f\n'
p97
tp98
sS'clone_quoting_options'
p99
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p100
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004014d0\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x609350\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00405180\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p102
S'55\n41 56\n53\n48 89 fb\ne8 f4 e1 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 50 93 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 85 1e 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p103
S'.text:00000000004032d0\n.text:00000000004032d1\n.text:00000000004032d3\n.text:00000000004032d4\n.text:00000000004032d7\n.text:00000000004032dc\n.text:00000000004032df\n.text:00000000004032e2\n.text:00000000004032e5\n.text:00000000004032ea\n.text:00000000004032ee\n.text:00000000004032f3\n.text:00000000004032f6\n.text:00000000004032fb\n.text:00000000004032fe\n.text:00000000004032ff\n.text:0000000000403301\n.text:0000000000403302\n'
p104
tp105
sS'xmalloc'
p106
(S'\n__stdcall xmalloc(size_t n)\n'
p107
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p108
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401720\nTEST RBX,RBX\nJZ 0x00405053\nTEST RAX,RAX\nJZ 0x00405055\nPOP RBX\nRET\nCALL 0x004051d0\n'
p109
S'53\n48 89 fb\ne8 d7 c6 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p110
S'.text:0000000000405040\n.text:0000000000405041\n.text:0000000000405044\n.text:0000000000405049\n.text:000000000040504c\n.text:000000000040504e\n.text:0000000000405051\n.text:0000000000405053\n.text:0000000000405054\n.text:0000000000405055\n'
p111
tp112
sS'quotearg_char_mem'
p113
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p114
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x00609380]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x00609370]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609360]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609350]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00403330\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404220\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p116
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 38 4e 20 00\n48 89 4c 24 30\n0f 10 05 1c 4e 20 00\n0f 29 44 24 20\n0f 10 05 00 4e 20 00\n0f 29 44 24 10\n0f 10 05 e4 4d 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p117
S'.text:0000000000404530\n.text:0000000000404532\n.text:0000000000404534\n.text:0000000000404535\n.text:0000000000404539\n.text:000000000040453b\n.text:000000000040453e\n.text:0000000000404541\n.text:0000000000404548\n.text:000000000040454d\n.text:0000000000404554\n.text:0000000000404559\n.text:0000000000404560\n.text:0000000000404565\n.text:000000000040456c\n.text:0000000000404570\n.text:0000000000404573\n.text:0000000000404578\n.text:000000000040457b\n.text:000000000040457d\n.text:0000000000404582\n.text:0000000000404584\n.text:0000000000404587\n.text:000000000040458a\n.text:000000000040458d\n.text:0000000000404592\n.text:0000000000404596\n.text:0000000000404597\n.text:0000000000404599\n.text:000000000040459b\n'
p118
tp119
sS'c_isgraph'
p120
(S'\n__stdcall c_isgraph()\n'
p121
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p122
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p123
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p124
S'.text:0000000000405470\n.text:0000000000405473\n.text:0000000000405476\n.text:0000000000405479\n'
p125
tp126
sS'frame_dummy'
p127
(S'\n__stdcall frame_dummy()\n'
p128
V\u000a/* WARNING: Removing unreachable block (ram,0x0040197a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p129
S'MOV EDI,0x608e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401970\nJMP 0x00401900\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040196b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401900\n'
p130
S'bf 18 8e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p131
S'.text:0000000000401960\n.text:0000000000401965\n.text:0000000000401969\n.text:000000000040196b\n.text:0000000000401970\n.text:0000000000401975\n.text:0000000000401978\n.text:000000000040197a\n.text:000000000040197b\n.text:000000000040197e\n.text:0000000000401980\n.text:0000000000401981\n'
p132
tp133
sS'quotearg_buffer_restyled'
p134
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p135
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_004034cc_caseD_7;\u000a  case 2:\u000a    goto switchD_004034cc_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_004034cc_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_004034cc_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_004034cc_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_004034cc_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_004034cc_caseD_7;\u000aswitchD_004034cc_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_004034cc_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_004034cc_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00403f90;\u000aLAB_004036b0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00403f99:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00403fa8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_004036bb:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_004036ff:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_004036ff;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00403fa8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00403ed5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00403de0;\u000a    }\u000a    goto LAB_00403fa8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00403f0a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00403fa8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403f39;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_004039f8;\u000a  case '\u005ca':\u000a    goto joined_r0x004038e8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x004038e8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00403716_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x004038e8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x004038e8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00403716_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x004038e8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_00403e4e;\u000a    }\u000a    goto LAB_00403fa8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00403fa8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00403fa8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00403fa8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00403fa8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00403fa8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00403716_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00403ea6;\u000a      goto joined_r0x00403e98;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x004039a1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403e98;\u000a      goto LAB_00403ea6;\u000a    }\u000a    goto LAB_00403fa8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00403fa8;\u000a  }\u000a  goto joined_r0x00403de0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00403f0a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403f39;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403f39:\u000a  if (1 < uVar10) {\u000aLAB_00403a16:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403ad2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x004039a1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403ad2:\u000a        if (bVar6 != 0) goto LAB_00403fa8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_004039f8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403a16;\u000ajoined_r0x00403de0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00403de0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403e07;\u000aLAB_00403e40:\u000a    if (bVar22) goto LAB_00403e45;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00403e40;\u000aLAB_00403e07:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00403e45:\u000a      if (bVar6 != 0) goto LAB_00403fa8;\u000aLAB_00403e4e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403e98;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00403ea6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403e98:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00403ed5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_004036b0;\u000aLAB_00403f90:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00403f99;\u000a  goto LAB_004036bb;\u000a}\u000a\u000a
p136
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004015b0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00404075\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x406970 + RAX*0x8]\nMOV EDI,0x406e96\nMOV ESI,R15D\nCALL 0x00404720\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x406e98\nMOV ESI,R15D\nCALL 0x00404720\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040352d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00403530\nNOP\nCMP R12,RSI\nJNC 0x0040351e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00403510\nJMP 0x00403530\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004015c0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x004035fc\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x004035fc\nMOV ECX,0x406e94\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x004035f6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00403597\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x004035c4\nTEST RSI,RSI\nJZ 0x004035b1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x406e98\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x004035d2\nMOV ECX,0x406e98\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x004035fc\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040404c\nMOV ECX,0x406e94\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00403f90\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00403f99\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x004036ff\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x004036fa\nCMP R11,-0x1\nJNZ 0x004036fa\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004015c0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00403750\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x004039ac\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x4069c8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00403fa8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403e00\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403e07\nJMP 0x00403e40\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401690\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040379d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00403701\nJMP 0x00403fa8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00403701\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040372b\nCMP EBX,0x2\nJNZ 0x0040372b\nTEST R13,R13\nJNZ 0x0040372b\nJMP 0x00403fa8\nCMP R11,-0x1\nJZ 0x00403b83\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403ba3\nJMP 0x0040372b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403bb4\nTEST R8B,R8B\nJNZ 0x00403fa8\nCMP EBX,0x2\nJNZ 0x00403858\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403858\nCMP R12,RSI\nJNC 0x00403833\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403842\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403851\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403862\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403d28\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403d28\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403d28\nCMP RCX,RSI\nJNC 0x0040389c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x004038ab\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403736\nJMP 0x00403e00\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403729\nJMP 0x0040390a\nMOV DL,0x74\nJMP 0x004038f2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403729\nJMP 0x0040390a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403729\nJMP 0x0040390a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00403fa8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403729\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x00403e4e\nJMP 0x00403fa8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00403729\nTEST R8B,R8B\nJNZ 0x00403fa8\nCMP R12,RSI\nJNC 0x0040393a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403949\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403958\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00403729\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x00403d3b\nCMP EBX,0x2\nJNZ 0x00403729\nTEST R8B,R8B\nJZ 0x00403729\nJMP 0x00403fa8\nCMP EBX,0x2\nJNZ 0x00403bd4\nTEST R8B,R8B\nJNZ 0x00403fa8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00403ea6\nJMP 0x00403ec9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403bf5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401880\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403de8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00403de8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403ad2\nJMP 0x00403aa0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403a89\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403a86\nCMP R12,RSI\nJNC 0x00403a6b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x00403a7a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403ac0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403ac0\nTEST BPL,0x1\nJZ 0x00403b63\nCMP R12,RSI\nJNC 0x00403ab4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403b63\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403aa0\nTEST R8B,R8B\nJNZ 0x00403fa8\nCMP EBX,0x2\nJNZ 0x00403b1a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x00403b1a\nCMP R12,RSI\nJNC 0x00403af2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403b01\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403b10\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403b24\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403b3b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403b55\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403a50\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00403ea6\nJMP 0x00403ec9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040372b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040372b\nJMP 0x00403fa8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00403ed5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403736\nJMP 0x00403e00\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x004038f2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00403ea6\nJMP 0x00403ec9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403c17\nMOV RDI,R10\nCALL 0x004015c0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x004015e0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00403eef\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403ee7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403ef6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00403cde\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403cd6\nBT RDI,RDX\nJC 0x00404042\nINC RCX\nCMP RCX,R14\nJC 0x00403cc0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401860\nTEST EAX,EAX\nJNZ 0x00403cf3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401850\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403c35\nJMP 0x00403f39\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403736\nJMP 0x00403e00\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00403729\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00403729\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00403729\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040372b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00403f72\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00403fa8\nCMP R12,RSI\nJNC 0x00403d9e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00403db1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403dc0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x00403dcf\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403736\nJMP 0x00403e00\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403736\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00403e40\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00403e45\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00403ea0\nJMP 0x00403e45\nTEST BPL,BPL\nJZ 0x00403ea0\nTEST R8B,R8B\nJNZ 0x00403fa8\nCMP EBX,0x2\nJNZ 0x00403e88\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403e88\nCMP R12,RSI\nJNC 0x00403e63\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403e72\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403e81\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403e92\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00403ed2\nJMP 0x00403ece\nTEST DIL,0x1\nJZ 0x00403ec9\nAND AL,0x1\nJNZ 0x00403ec9\nCMP R12,RSI\nJNC 0x00403eb4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403ec3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00403ed2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00403f90\nJMP 0x004036b0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403f34\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00403f2c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00403f68\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00403f0a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403f39\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x004039f8\nJMP 0x00403a16\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403f39\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403736\nJMP 0x00403e00\nCMP R13,R11\nJNZ 0x004036bb\nTEST R8B,R8B\nJZ 0x00404002\nCMP EBX,0x2\nJNZ 0x00404002\nTEST R12,R12\nJNZ 0x00404002\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00403440\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00404036\nTEST R8B,R8B\nJNZ 0x00404036\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00404036\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00404029\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00404020\nCMP R12,RSI\nJNC 0x00403fed\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00403fed\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00403fa8\nTEST RSI,RSI\nJZ 0x00404059\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x406e94\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x004035fc\nCALL 0x004014c0\n'
p137
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 42 e1 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 70 69 40 00\nbf 96 6e 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 98 6e 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 83 e0 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 94 6e 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 98 6e 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 98 6e 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 94 6e 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 e3 de ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd c8 69 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 27 df ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 b7 de ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 b1 d9 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 83 d9 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 79 db ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 42 db ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 94 6e 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 46 d4 ff ff\n'
p138
S'.text:0000000000403440\n.text:0000000000403441\n.text:0000000000403443\n.text:0000000000403445\n.text:0000000000403447\n.text:0000000000403449\n.text:000000000040344a\n.text:0000000000403451\n.text:0000000000403454\n.text:0000000000403457\n.text:000000000040345a\n.text:000000000040345f\n.text:0000000000403464\n.text:0000000000403469\n.text:000000000040346e\n.text:0000000000403476\n.text:000000000040347a\n.text:0000000000403480\n.text:0000000000403488\n.text:000000000040348d\n.text:0000000000403495\n.text:000000000040349a\n.text:000000000040349e\n.text:00000000004034a0\n.text:00000000004034a3\n.text:00000000004034a6\n.text:00000000004034a9\n.text:00000000004034ae\n.text:00000000004034b1\n.text:00000000004034b4\n.text:00000000004034b7\n.text:00000000004034ba\n.text:00000000004034bc\n.text:00000000004034bf\n.text:00000000004034c4\n.text:00000000004034c7\n.text:00000000004034cc\n.text:00000000004034d3\n.text:00000000004034d8\n.text:00000000004034db\n.text:00000000004034e0\n.text:00000000004034e5\n.text:00000000004034ea\n.text:00000000004034ed\n.text:00000000004034f2\n.text:00000000004034f7\n.text:00000000004034fc\n.text:00000000004034fe\n.text:0000000000403500\n.text:0000000000403505\n.text:0000000000403507\n.text:000000000040350a\n.text:000000000040350c\n.text:000000000040350e\n.text:0000000000403510\n.text:0000000000403513\n.text:0000000000403515\n.text:000000000040351a\n.text:000000000040351e\n.text:0000000000403524\n.text:0000000000403527\n.text:0000000000403529\n.text:000000000040352b\n.text:000000000040352d\n.text:0000000000403530\n.text:0000000000403535\n.text:0000000000403538\n.text:000000000040353d\n.text:0000000000403542\n.text:0000000000403545\n.text:0000000000403548\n.text:000000000040354b\n.text:000000000040354e\n.text:0000000000403553\n.text:0000000000403556\n.text:0000000000403559\n.text:000000000040355e\n.text:0000000000403561\n.text:0000000000403563\n.text:0000000000403566\n.text:0000000000403568\n.text:000000000040356a\n.text:000000000040356d\n.text:0000000000403572\n.text:0000000000403577\n.text:000000000040357c\n.text:000000000040357f\n.text:0000000000403585\n.text:0000000000403587\n.text:000000000040358a\n.text:000000000040358d\n.text:0000000000403590\n.text:0000000000403592\n.text:0000000000403594\n.text:0000000000403597\n.text:000000000040359a\n.text:000000000040359f\n.text:00000000004035a2\n.text:00000000004035a4\n.text:00000000004035a7\n.text:00000000004035a9\n.text:00000000004035ae\n.text:00000000004035b1\n.text:00000000004035b6\n.text:00000000004035bc\n.text:00000000004035c2\n.text:00000000004035c4\n.text:00000000004035c9\n.text:00000000004035cf\n.text:00000000004035d2\n.text:00000000004035d5\n.text:00000000004035d8\n.text:00000000004035da\n.text:00000000004035df\n.text:00000000004035e2\n.text:00000000004035e8\n.text:00000000004035ed\n.text:00000000004035f3\n.text:00000000004035f6\n.text:00000000004035f9\n.text:00000000004035fc\n.text:0000000000403604\n.text:0000000000403606\n.text:0000000000403608\n.text:000000000040360b\n.text:000000000040360f\n.text:0000000000403611\n.text:0000000000403614\n.text:0000000000403618\n.text:000000000040361a\n.text:000000000040361d\n.text:0000000000403620\n.text:0000000000403623\n.text:0000000000403625\n.text:0000000000403629\n.text:000000000040362b\n.text:000000000040362f\n.text:0000000000403632\n.text:0000000000403635\n.text:0000000000403638\n.text:000000000040363a\n.text:000000000040363e\n.text:0000000000403647\n.text:000000000040364a\n.text:000000000040364c\n.text:0000000000403650\n.text:0000000000403652\n.text:0000000000403656\n.text:0000000000403658\n.text:000000000040365b\n.text:000000000040365f\n.text:0000000000403661\n.text:0000000000403664\n.text:0000000000403668\n.text:000000000040366d\n.text:0000000000403670\n.text:0000000000403674\n.text:000000000040367c\n.text:000000000040367f\n.text:0000000000403682\n.text:0000000000403684\n.text:0000000000403688\n.text:000000000040368b\n.text:000000000040368d\n.text:0000000000403692\n.text:0000000000403696\n.text:000000000040369b\n.text:00000000004036a0\n.text:00000000004036a4\n.text:00000000004036aa\n.text:00000000004036b0\n.text:00000000004036b5\n.text:00000000004036bb\n.text:00000000004036c0\n.text:00000000004036c2\n.text:00000000004036c7\n.text:00000000004036cb\n.text:00000000004036cd\n.text:00000000004036d1\n.text:00000000004036d3\n.text:00000000004036d5\n.text:00000000004036d8\n.text:00000000004036dd\n.text:00000000004036df\n.text:00000000004036e4\n.text:00000000004036e9\n.text:00000000004036ed\n.text:00000000004036f2\n.text:00000000004036f7\n.text:00000000004036fa\n.text:00000000004036fd\n.text:00000000004036ff\n.text:0000000000403701\n.text:0000000000403706\n.text:000000000040370a\n.text:0000000000403710\n.text:0000000000403712\n.text:0000000000403714\n.text:0000000000403716\n.text:000000000040371e\n.text:0000000000403723\n.text:0000000000403729\n.text:000000000040372b\n.text:0000000000403730\n.text:0000000000403736\n.text:000000000040373f\n.text:0000000000403745\n.text:0000000000403750\n.text:0000000000403752\n.text:0000000000403755\n.text:0000000000403759\n.text:0000000000403761\n.text:0000000000403764\n.text:0000000000403769\n.text:000000000040376b\n.text:000000000040376e\n.text:0000000000403770\n.text:0000000000403775\n.text:0000000000403778\n.text:000000000040377d\n.text:0000000000403780\n.text:0000000000403785\n.text:0000000000403789\n.text:000000000040378e\n.text:0000000000403790\n.text:0000000000403792\n.text:0000000000403798\n.text:000000000040379d\n.text:00000000004037a2\n.text:00000000004037a5\n.text:00000000004037aa\n.text:00000000004037ae\n.text:00000000004037b3\n.text:00000000004037b8\n.text:00000000004037ba\n.text:00000000004037bc\n.text:00000000004037c1\n.text:00000000004037c3\n.text:00000000004037c6\n.text:00000000004037cc\n.text:00000000004037cf\n.text:00000000004037d5\n.text:00000000004037d8\n.text:00000000004037de\n.text:00000000004037e3\n.text:00000000004037e7\n.text:00000000004037ed\n.text:00000000004037f0\n.text:00000000004037f3\n.text:00000000004037f7\n.text:00000000004037fa\n.text:00000000004037fc\n.text:00000000004037ff\n.text:0000000000403805\n.text:000000000040380a\n.text:000000000040380f\n.text:0000000000403815\n.text:0000000000403818\n.text:000000000040381e\n.text:0000000000403821\n.text:0000000000403823\n.text:0000000000403825\n.text:0000000000403827\n.text:0000000000403829\n.text:000000000040382c\n.text:000000000040382e\n.text:0000000000403833\n.text:0000000000403838\n.text:000000000040383b\n.text:000000000040383d\n.text:0000000000403842\n.text:0000000000403847\n.text:000000000040384a\n.text:000000000040384c\n.text:0000000000403851\n.text:0000000000403855\n.text:0000000000403858\n.text:000000000040385b\n.text:000000000040385d\n.text:0000000000403862\n.text:0000000000403867\n.text:0000000000403869\n.text:000000000040386c\n.text:000000000040386f\n.text:0000000000403875\n.text:0000000000403879\n.text:000000000040387c\n.text:0000000000403882\n.text:0000000000403886\n.text:0000000000403889\n.text:000000000040388c\n.text:0000000000403892\n.text:0000000000403895\n.text:0000000000403897\n.text:000000000040389c\n.text:00000000004038a1\n.text:00000000004038a4\n.text:00000000004038a6\n.text:00000000004038ab\n.text:00000000004038af\n.text:00000000004038b4\n.text:00000000004038ba\n.text:00000000004038bf\n.text:00000000004038c1\n.text:00000000004038c6\n.text:00000000004038cc\n.text:00000000004038ce\n.text:00000000004038d0\n.text:00000000004038d2\n.text:00000000004038d4\n.text:00000000004038d9\n.text:00000000004038df\n.text:00000000004038e1\n.text:00000000004038e3\n.text:00000000004038e8\n.text:00000000004038ee\n.text:00000000004038f0\n.text:00000000004038f2\n.text:00000000004038f7\n.text:00000000004038f9\n.text:00000000004038ff\n.text:0000000000403904\n.text:000000000040390a\n.text:000000000040390d\n.text:0000000000403910\n.text:0000000000403916\n.text:000000000040391b\n.text:000000000040391e\n.text:0000000000403921\n.text:0000000000403927\n.text:000000000040392a\n.text:0000000000403930\n.text:0000000000403933\n.text:0000000000403935\n.text:000000000040393a\n.text:000000000040393f\n.text:0000000000403942\n.text:0000000000403944\n.text:0000000000403949\n.text:000000000040394e\n.text:0000000000403951\n.text:0000000000403953\n.text:0000000000403958\n.text:000000000040395c\n.text:000000000040395e\n.text:0000000000403963\n.text:0000000000403966\n.text:0000000000403969\n.text:000000000040396f\n.text:0000000000403972\n.text:0000000000403978\n.text:000000000040397b\n.text:0000000000403981\n.text:0000000000403986\n.text:0000000000403989\n.text:000000000040398f\n.text:0000000000403992\n.text:0000000000403998\n.text:000000000040399b\n.text:000000000040399d\n.text:00000000004039a1\n.text:00000000004039a7\n.text:00000000004039ac\n.text:00000000004039b0\n.text:00000000004039b9\n.text:00000000004039bf\n.text:00000000004039c4\n.text:00000000004039c9\n.text:00000000004039ce\n.text:00000000004039d1\n.text:00000000004039d6\n.text:00000000004039d9\n.text:00000000004039dc\n.text:00000000004039e1\n.text:00000000004039e6\n.text:00000000004039ea\n.text:00000000004039ef\n.text:00000000004039f4\n.text:00000000004039f8\n.text:00000000004039fa\n.text:00000000004039ff\n.text:0000000000403a05\n.text:0000000000403a08\n.text:0000000000403a0a\n.text:0000000000403a0d\n.text:0000000000403a10\n.text:0000000000403a16\n.text:0000000000403a1b\n.text:0000000000403a1e\n.text:0000000000403a21\n.text:0000000000403a24\n.text:0000000000403a27\n.text:0000000000403a29\n.text:0000000000403a2d\n.text:0000000000403a2f\n.text:0000000000403a34\n.text:0000000000403a39\n.text:0000000000403a3f\n.text:0000000000403a50\n.text:0000000000403a55\n.text:0000000000403a57\n.text:0000000000403a5a\n.text:0000000000403a5c\n.text:0000000000403a5f\n.text:0000000000403a61\n.text:0000000000403a64\n.text:0000000000403a66\n.text:0000000000403a6b\n.text:0000000000403a70\n.text:0000000000403a73\n.text:0000000000403a75\n.text:0000000000403a7a\n.text:0000000000403a7e\n.text:0000000000403a86\n.text:0000000000403a89\n.text:0000000000403a8c\n.text:0000000000403a8e\n.text:0000000000403a92\n.text:0000000000403aa0\n.text:0000000000403aa4\n.text:0000000000403aaa\n.text:0000000000403aad\n.text:0000000000403aaf\n.text:0000000000403ab4\n.text:0000000000403ab7\n.text:0000000000403ab9\n.text:0000000000403ac0\n.text:0000000000403ac3\n.text:0000000000403ac8\n.text:0000000000403acb\n.text:0000000000403ad0\n.text:0000000000403ad2\n.text:0000000000403ad5\n.text:0000000000403adb\n.text:0000000000403ade\n.text:0000000000403ae0\n.text:0000000000403ae4\n.text:0000000000403ae6\n.text:0000000000403ae8\n.text:0000000000403aeb\n.text:0000000000403aed\n.text:0000000000403af2\n.text:0000000000403af7\n.text:0000000000403afa\n.text:0000000000403afc\n.text:0000000000403b01\n.text:0000000000403b06\n.text:0000000000403b09\n.text:0000000000403b0b\n.text:0000000000403b10\n.text:0000000000403b14\n.text:0000000000403b16\n.text:0000000000403b1a\n.text:0000000000403b1d\n.text:0000000000403b1f\n.text:0000000000403b24\n.text:0000000000403b29\n.text:0000000000403b2c\n.text:0000000000403b2e\n.text:0000000000403b31\n.text:0000000000403b34\n.text:0000000000403b37\n.text:0000000000403b3b\n.text:0000000000403b40\n.text:0000000000403b43\n.text:0000000000403b45\n.text:0000000000403b48\n.text:0000000000403b4b\n.text:0000000000403b4e\n.text:0000000000403b51\n.text:0000000000403b55\n.text:0000000000403b59\n.text:0000000000403b5d\n.text:0000000000403b61\n.text:0000000000403b63\n.text:0000000000403b67\n.text:0000000000403b6a\n.text:0000000000403b70\n.text:0000000000403b74\n.text:0000000000403b78\n.text:0000000000403b7e\n.text:0000000000403b83\n.text:0000000000403b86\n.text:0000000000403b89\n.text:0000000000403b8e\n.text:0000000000403b91\n.text:0000000000403b93\n.text:0000000000403b96\n.text:0000000000403b9d\n.text:0000000000403ba3\n.text:0000000000403ba5\n.text:0000000000403ba9\n.text:0000000000403baf\n.text:0000000000403bb4\n.text:0000000000403bb9\n.text:0000000000403bbf\n.text:0000000000403bc2\n.text:0000000000403bc4\n.text:0000000000403bc9\n.text:0000000000403bcf\n.text:0000000000403bd4\n.text:0000000000403bd6\n.text:0000000000403bdb\n.text:0000000000403be1\n.text:0000000000403be3\n.text:0000000000403be6\n.text:0000000000403bea\n.text:0000000000403bf0\n.text:0000000000403bf5\n.text:0000000000403c01\n.text:0000000000403c05\n.text:0000000000403c07\n.text:0000000000403c0a\n.text:0000000000403c0f\n.text:0000000000403c14\n.text:0000000000403c17\n.text:0000000000403c1b\n.text:0000000000403c20\n.text:0000000000403c22\n.text:0000000000403c26\n.text:0000000000403c28\n.text:0000000000403c30\n.text:0000000000403c35\n.text:0000000000403c3a\n.text:0000000000403c3e\n.text:0000000000403c42\n.text:0000000000403c4a\n.text:0000000000403c4d\n.text:0000000000403c52\n.text:0000000000403c55\n.text:0000000000403c58\n.text:0000000000403c5d\n.text:0000000000403c60\n.text:0000000000403c63\n.text:0000000000403c69\n.text:0000000000403c6d\n.text:0000000000403c77\n.text:0000000000403c7d\n.text:0000000000403c81\n.text:0000000000403c86\n.text:0000000000403c8c\n.text:0000000000403c90\n.text:0000000000403c93\n.text:0000000000403c97\n.text:0000000000403c99\n.text:0000000000403c9e\n.text:0000000000403ca3\n.text:0000000000403ca7\n.text:0000000000403ca9\n.text:0000000000403cae\n.text:0000000000403cb3\n.text:0000000000403cb7\n.text:0000000000403cbc\n.text:0000000000403cc0\n.text:0000000000403cc4\n.text:0000000000403cc7\n.text:0000000000403cca\n.text:0000000000403ccc\n.text:0000000000403cd0\n.text:0000000000403cd6\n.text:0000000000403cd9\n.text:0000000000403cdc\n.text:0000000000403cde\n.text:0000000000403ce2\n.text:0000000000403ce7\n.text:0000000000403ce9\n.text:0000000000403ceb\n.text:0000000000403cf3\n.text:0000000000403cf8\n.text:0000000000403cfb\n.text:0000000000403d03\n.text:0000000000403d06\n.text:0000000000403d09\n.text:0000000000403d0e\n.text:0000000000403d11\n.text:0000000000403d13\n.text:0000000000403d18\n.text:0000000000403d1d\n.text:0000000000403d23\n.text:0000000000403d28\n.text:0000000000403d2b\n.text:0000000000403d30\n.text:0000000000403d36\n.text:0000000000403d3b\n.text:0000000000403d40\n.text:0000000000403d46\n.text:0000000000403d4a\n.text:0000000000403d4d\n.text:0000000000403d53\n.text:0000000000403d59\n.text:0000000000403d5f\n.text:0000000000403d64\n.text:0000000000403d66\n.text:0000000000403d69\n.text:0000000000403d6f\n.text:0000000000403d73\n.text:0000000000403d75\n.text:0000000000403d7f\n.text:0000000000403d83\n.text:0000000000403d89\n.text:0000000000403d8c\n.text:0000000000403d8e\n.text:0000000000403d94\n.text:0000000000403d97\n.text:0000000000403d99\n.text:0000000000403d9e\n.text:0000000000403da3\n.text:0000000000403da6\n.text:0000000000403daa\n.text:0000000000403dac\n.text:0000000000403db1\n.text:0000000000403db6\n.text:0000000000403db9\n.text:0000000000403dbb\n.text:0000000000403dc0\n.text:0000000000403dc5\n.text:0000000000403dc8\n.text:0000000000403dca\n.text:0000000000403dcf\n.text:0000000000403dd3\n.text:0000000000403dd5\n.text:0000000000403dd8\n.text:0000000000403ddb\n.text:0000000000403de0\n.text:0000000000403de6\n.text:0000000000403de8\n.text:0000000000403ded\n.text:0000000000403df2\n.text:0000000000403df8\n.text:0000000000403e00\n.text:0000000000403e05\n.text:0000000000403e07\n.text:0000000000403e0c\n.text:0000000000403e0f\n.text:0000000000403e11\n.text:0000000000403e14\n.text:0000000000403e16\n.text:0000000000403e19\n.text:0000000000403e1c\n.text:0000000000403e1f\n.text:0000000000403e21\n.text:0000000000403e29\n.text:0000000000403e2c\n.text:0000000000403e2e\n.text:0000000000403e30\n.text:0000000000403e40\n.text:0000000000403e43\n.text:0000000000403e45\n.text:0000000000403e48\n.text:0000000000403e4e\n.text:0000000000403e51\n.text:0000000000403e53\n.text:0000000000403e55\n.text:0000000000403e57\n.text:0000000000403e59\n.text:0000000000403e5c\n.text:0000000000403e5e\n.text:0000000000403e63\n.text:0000000000403e68\n.text:0000000000403e6b\n.text:0000000000403e6d\n.text:0000000000403e72\n.text:0000000000403e77\n.text:0000000000403e7a\n.text:0000000000403e7c\n.text:0000000000403e81\n.text:0000000000403e85\n.text:0000000000403e88\n.text:0000000000403e8b\n.text:0000000000403e8d\n.text:0000000000403e92\n.text:0000000000403e95\n.text:0000000000403e98\n.text:0000000000403e9a\n.text:0000000000403ea0\n.text:0000000000403ea4\n.text:0000000000403ea6\n.text:0000000000403ea8\n.text:0000000000403eaa\n.text:0000000000403ead\n.text:0000000000403eaf\n.text:0000000000403eb4\n.text:0000000000403eb9\n.text:0000000000403ebc\n.text:0000000000403ebe\n.text:0000000000403ec3\n.text:0000000000403ec7\n.text:0000000000403ec9\n.text:0000000000403ecc\n.text:0000000000403ece\n.text:0000000000403ed2\n.text:0000000000403ed5\n.text:0000000000403ed8\n.text:0000000000403edc\n.text:0000000000403ee2\n.text:0000000000403ee7\n.text:0000000000403eef\n.text:0000000000403ef4\n.text:0000000000403ef6\n.text:0000000000403efe\n.text:0000000000403f03\n.text:0000000000403f05\n.text:0000000000403f0a\n.text:0000000000403f0f\n.text:0000000000403f13\n.text:0000000000403f15\n.text:0000000000403f1a\n.text:0000000000403f1d\n.text:0000000000403f20\n.text:0000000000403f22\n.text:0000000000403f2a\n.text:0000000000403f2c\n.text:0000000000403f34\n.text:0000000000403f39\n.text:0000000000403f3d\n.text:0000000000403f42\n.text:0000000000403f47\n.text:0000000000403f4b\n.text:0000000000403f50\n.text:0000000000403f55\n.text:0000000000403f59\n.text:0000000000403f5d\n.text:0000000000403f63\n.text:0000000000403f68\n.text:0000000000403f70\n.text:0000000000403f72\n.text:0000000000403f74\n.text:0000000000403f78\n.text:0000000000403f7d\n.text:0000000000403f83\n.text:0000000000403f90\n.text:0000000000403f93\n.text:0000000000403f99\n.text:0000000000403f9c\n.text:0000000000403f9e\n.text:0000000000403fa1\n.text:0000000000403fa3\n.text:0000000000403fa6\n.text:0000000000403fa8\n.text:0000000000403fb0\n.text:0000000000403fb6\n.text:0000000000403fba\n.text:0000000000403fbd\n.text:0000000000403fc1\n.text:0000000000403fc6\n.text:0000000000403fca\n.text:0000000000403fce\n.text:0000000000403fd1\n.text:0000000000403fd4\n.text:0000000000403fd7\n.text:0000000000403fdb\n.text:0000000000403fdf\n.text:0000000000403fe1\n.text:0000000000403fe6\n.text:0000000000403fea\n.text:0000000000403fed\n.text:0000000000403ff0\n.text:0000000000403ff7\n.text:0000000000403ff8\n.text:0000000000403ffa\n.text:0000000000403ffc\n.text:0000000000403ffe\n.text:0000000000404000\n.text:0000000000404001\n.text:0000000000404002\n.text:000000000040400a\n.text:000000000040400d\n.text:000000000040400f\n.text:0000000000404012\n.text:0000000000404014\n.text:0000000000404016\n.text:0000000000404018\n.text:000000000040401a\n.text:000000000040401d\n.text:0000000000404020\n.text:0000000000404023\n.text:0000000000404025\n.text:0000000000404029\n.text:000000000040402c\n.text:000000000040402f\n.text:0000000000404032\n.text:0000000000404034\n.text:0000000000404036\n.text:0000000000404039\n.text:000000000040403b\n.text:0000000000404040\n.text:0000000000404042\n.text:0000000000404047\n.text:000000000040404c\n.text:000000000040404f\n.text:0000000000404051\n.text:0000000000404056\n.text:0000000000404059\n.text:000000000040405e\n.text:0000000000404061\n.text:0000000000404067\n.text:000000000040406d\n.text:0000000000404070\n.text:0000000000404075\n'
p139
tp140
sS'set_quoting_style'
p141
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p142
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p143
S'TEST RDI,RDI\nMOV EAX,0x609350\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p144
S'48 85 ff\nb8 50 93 60 00\n48 0f 45 c7\n89 30\nc3\n'
p145
S'.text:0000000000403320\n.text:0000000000403323\n.text:0000000000403328\n.text:000000000040332c\n.text:000000000040332e\n'
p146
tp147
sS'quotearg_n_style_colon'
p148
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p149
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p150
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00404450\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00403330\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00404220\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p151
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p152
S'.text:00000000004045d0\n.text:00000000004045d1\n.text:00000000004045d3\n.text:00000000004045d4\n.text:00000000004045d8\n.text:00000000004045db\n.text:00000000004045dd\n.text:00000000004045e2\n.text:00000000004045e5\n.text:00000000004045ea\n.text:00000000004045ef\n.text:00000000004045f4\n.text:00000000004045f7\n.text:00000000004045fc\n.text:0000000000404603\n.text:0000000000404605\n.text:0000000000404608\n.text:000000000040460b\n.text:0000000000404610\n.text:0000000000404614\n.text:0000000000404615\n.text:0000000000404617\n.text:0000000000404618\n'
p153
tp154
sS'textdomain'
p155
(S'\n__stdcall textdomain()\n'
p156
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00609080)();\u000a  return;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x00609080]\n'
p158
S'ff 25 0a 7b 20 00\n'
p159
S'.plt:0000000000401570\n'
p160
tp161
sS'xmemdup'
p162
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p163
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p164
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00405040\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004016f0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p165
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 4c c5 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p166
S'.text:0000000000405180\n.text:0000000000405182\n.text:0000000000405184\n.text:0000000000405185\n.text:0000000000405188\n.text:000000000040518b\n.text:000000000040518e\n.text:0000000000405193\n.text:0000000000405196\n.text:0000000000405199\n.text:000000000040519c\n.text:000000000040519f\n.text:00000000004051a4\n.text:00000000004051a7\n.text:00000000004051a8\n.text:00000000004051aa\n.text:00000000004051ac\n'
p167
tp168
sS'fread'
p169
(S'\n__stdcall fread(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p170
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fread(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fread_00609070)();\u000a  return sVar1;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x00609070]\n'
p172
S'ff 25 1a 7b 20 00\n'
p173
S'.plt:0000000000401550\n'
p174
tp175
sS'get_quoting_style'
p176
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p177
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p178
S'TEST RDI,RDI\nMOV EAX,0x609350\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p179
S'48 85 ff\nb8 50 93 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p180
S'.text:0000000000403310\n.text:0000000000403313\n.text:0000000000403318\n.text:000000000040331c\n.text:000000000040331e\n'
p181
tp182
sS'ferror_unlocked'
p183
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p184
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_00609120)();\u000a  return iVar1;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x00609120]\n'
p186
S'ff 25 6a 7a 20 00\n'
p187
S'.plt:00000000004016b0\n'
p188
tp189
sS'exit'
p190
(S'\n__stdcall exit(int __status)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006091d8)();\u000a  return;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x006091d8]\n'
p193
S'ff 25 b2 79 20 00\n'
p194
S'.plt:0000000000401820\n'
p195
tp196
sS'quote_mem'
p197
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p198
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p199
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004046e0\n'
p200
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p201
S'.text:00000000004046f0\n.text:00000000004046f3\n.text:00000000004046f6\n.text:00000000004046f8\n.text:00000000004046fb\n.text:00000000004046fe\n'
p202
tp203
sS'locale_charset'
p204
(S'\n__stdcall locale_charset()\n'
p205
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0040576d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0040576d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p206
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401740\nTEST RAX,RAX\nMOV R14D,0x406fe9\nCMOVNZ R14,RAX\nCALL 0x00405780\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00405745\nJMP 0x0040576d\nMOV RDI,RBX\nCALL 0x004015c0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004015c0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0040576d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004016d0\nTEST EAX,EAX\nJZ 0x00405760\nCMP BPL,0x2a\nJNZ 0x00405720\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00405720\nMOV RDI,RBX\nCALL 0x004015c0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x407648\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p207
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 42 c0 ff ff\n48 85 c0\n41 be e9 6f 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 98 be ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 8a be ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 80 bf ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 58 be ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 48 76 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p208
S'.text:00000000004056f0\n.text:00000000004056f1\n.text:00000000004056f3\n.text:00000000004056f4\n.text:00000000004056f9\n.text:00000000004056fe\n.text:0000000000405701\n.text:0000000000405707\n.text:000000000040570b\n.text:0000000000405710\n.text:0000000000405713\n.text:0000000000405716\n.text:0000000000405719\n.text:000000000040571b\n.text:0000000000405720\n.text:0000000000405723\n.text:0000000000405728\n.text:000000000040572c\n.text:0000000000405731\n.text:0000000000405736\n.text:000000000040573b\n.text:0000000000405740\n.text:0000000000405743\n.text:0000000000405745\n.text:0000000000405748\n.text:000000000040574b\n.text:0000000000405750\n.text:0000000000405752\n.text:0000000000405754\n.text:0000000000405758\n.text:000000000040575a\n.text:000000000040575e\n.text:0000000000405760\n.text:0000000000405763\n.text:0000000000405768\n.text:000000000040576d\n.text:0000000000405771\n.text:0000000000405776\n.text:000000000040577a\n.text:000000000040577b\n.text:000000000040577d\n.text:000000000040577e\n'
p209
tp210
sS'fadvise'
p211
(S'\n__stdcall fadvise(FILE * fp)\n'
p212
V\u000avoid fadvise(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int __advise;\u000a  \u000a  if (fp != (FILE *)0x0) {\u000a    __fd = fileno((FILE *)fp);\u000a    fdadvise(__fd,0,0,__advise);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p213
S'PUSH RBX\nMOV EBX,ESI\nTEST RDI,RDI\nJZ 0x00402e08\nCALL 0x00401710\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,EAX\nMOV ECX,EBX\nPOP RBX\nJMP 0x00402de0\nPOP RBX\nRET\n'
p214
S'53\n89 f3\n48 85 ff\n74 10\ne8 13 e9 ff ff\n31 f6\n31 d2\n89 c7\n89 d9\n5b\neb d8\n5b\nc3\n'
p215
S'.text:0000000000402df0\n.text:0000000000402df1\n.text:0000000000402df3\n.text:0000000000402df6\n.text:0000000000402df8\n.text:0000000000402dfd\n.text:0000000000402dff\n.text:0000000000402e01\n.text:0000000000402e03\n.text:0000000000402e05\n.text:0000000000402e06\n.text:0000000000402e08\n.text:0000000000402e09\n'
p216
tp217
sS'set_program_name'
p218
(S'\n__stdcall set_program_name(char * argv0)\n'
p219
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p220
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004032a1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x004015f0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040328b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x406958\nMOV EDX,0x7\nCALL 0x004014e0\nTEST EAX,EAX\nJNZ 0x0040328b\nMOV ESI,0x406960\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x004014e0\nTEST EAX,EAX\nJNZ 0x00403288\nADD R14,0x3\nMOV qword ptr [0x006092a0],R14\nMOV RBX,R14\nMOV qword ptr [0x00609348],RBX\nMOV qword ptr [0x006092c8],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x006092e0]\nMOV EDI,0x406920\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401830\nCALL 0x004014c0\n'
p221
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 b7 e3 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 58 69 40 00\nba 07 00 00 00\ne8 7d e2 ff ff\n85 c0\n75 24\nbe 60 69 40 00\nba 03 00 00 00\n4c 89 f7\ne8 67 e2 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 18 60 20 00\n4c 89 f3\n48 89 1d b6 60 20 00\n48 89 1d 2f 60 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 38 60 20 00\nbf 20 69 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 74 e5 ff ff\ne8 ff e1 ff ff\n'
p222
S'.text:0000000000403220\n.text:0000000000403222\n.text:0000000000403223\n.text:0000000000403224\n.text:0000000000403227\n.text:000000000040322a\n.text:000000000040322c\n.text:0000000000403231\n.text:0000000000403234\n.text:0000000000403239\n.text:000000000040323c\n.text:0000000000403240\n.text:0000000000403244\n.text:0000000000403247\n.text:000000000040324a\n.text:000000000040324e\n.text:0000000000403250\n.text:0000000000403254\n.text:0000000000403259\n.text:000000000040325e\n.text:0000000000403263\n.text:0000000000403265\n.text:0000000000403267\n.text:000000000040326c\n.text:0000000000403271\n.text:0000000000403274\n.text:0000000000403279\n.text:000000000040327b\n.text:000000000040327d\n.text:0000000000403281\n.text:0000000000403288\n.text:000000000040328b\n.text:0000000000403292\n.text:0000000000403299\n.text:000000000040329d\n.text:000000000040329e\n.text:00000000004032a0\n.text:00000000004032a1\n.text:00000000004032a8\n.text:00000000004032ad\n.text:00000000004032b2\n.text:00000000004032b7\n.text:00000000004032bc\n'
p223
tp224
sS'fileno'
p225
(S'\n__stdcall fileno(FILE * __stream)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00609150)();\u000a  return iVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x00609150]\n'
p228
S'ff 25 3a 7a 20 00\n'
p229
S'.plt:0000000000401710\n'
p230
tp231
sS'strspn'
p232
(S'\n__stdcall strspn(char * __s, char * __accept)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strspn(char *__s,char *__accept)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strspn_006090f8)();\u000a  return sVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x006090f8]\n'
p235
S'ff 25 92 7a 20 00\n'
p236
S'.plt:0000000000401660\n'
p237
tp238
sS'quotearg_buffer'
p239
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p240
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p241
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x609350\nCMOVNZ RBP,R8\nCALL 0x004014d0\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00403440\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p242
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 50 93 60 00\n49 0f 45 e8\ne8 e8 e0 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p243
S'.text:00000000004033c0\n.text:00000000004033c1\n.text:00000000004033c3\n.text:00000000004033c5\n.text:00000000004033c7\n.text:00000000004033c9\n.text:00000000004033ca\n.text:00000000004033cb\n.text:00000000004033ce\n.text:00000000004033d1\n.text:00000000004033d4\n.text:00000000004033d7\n.text:00000000004033da\n.text:00000000004033df\n.text:00000000004033e3\n.text:00000000004033e8\n.text:00000000004033eb\n.text:00000000004033ed\n.text:00000000004033f1\n.text:00000000004033f5\n.text:00000000004033f9\n.text:00000000004033fd\n.text:0000000000403400\n.text:0000000000403403\n.text:0000000000403406\n.text:0000000000403409\n.text:000000000040340c\n.text:000000000040340f\n.text:0000000000403413\n.text:0000000000403414\n.text:0000000000403419\n.text:000000000040341d\n.text:0000000000403421\n.text:0000000000403423\n.text:0000000000403427\n.text:0000000000403428\n.text:000000000040342a\n.text:000000000040342c\n.text:000000000040342e\n.text:0000000000403430\n.text:0000000000403431\n'
p244
tp245
sS'quotearg_colon'
p246
(S'\n__stdcall quotearg_colon(char * arg)\n'
p247
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p248
S'MOV ESI,0x3a\nJMP 0x004045a0\n'
p249
S'be 3a 00 00 00\neb e9\n'
p250
S'.text:00000000004045b0\n.text:00000000004045b5\n'
p251
tp252
sS'mbrtowc'
p253
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006090b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x006090b8]\n'
p256
S'ff 25 d2 7a 20 00\n'
p257
S'.plt:00000000004015e0\n'
p258
tp259
sS'rpl_fflush'
p260
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p261
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00609160)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p262
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040530d\nMOV RDI,RBX\nCALL 0x00401760\nTEST EAX,EAX\nJZ 0x0040530d\nMOV RDI,RBX\nCALL 0x00405320\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401730\n'
p263
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 5f c4 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 1a c4 ff ff\n'
p264
S'.text:00000000004052f0\n.text:00000000004052f1\n.text:00000000004052f4\n.text:00000000004052f7\n.text:00000000004052f9\n.text:00000000004052fc\n.text:0000000000405301\n.text:0000000000405303\n.text:0000000000405305\n.text:0000000000405308\n.text:000000000040530d\n.text:0000000000405310\n.text:0000000000405311\n'
p265
tp266
sS'__assert_fail'
p267
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_006090d0)();\u000a  return;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x006090d0]\n'
p270
S'ff 25 ba 7a 20 00\n'
p271
S'.plt:0000000000401610\n'
p272
tp273
sS'setlocale'
p274
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_00609198)();\u000a  return pcVar1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x00609198]\n'
p277
S'ff 25 f2 79 20 00\n'
p278
S'.plt:00000000004017a0\n'
p279
tp280
sS'cut_bytes'
p281
(S'\n__stdcall cut_bytes(FILE * stream)\n'
p282
V\u000avoid cut_bytes(FILE *stream)\u000a\u000a{\u000a  size_t k;\u000a  _Bool _Var1;\u000a  int __c;\u000a  bool bVar2;\u000a  int __c_00;\u000a  size_t local_38;\u000a  \u000a  do {\u000a    local_38 = 0;\u000a    bVar2 = false;\u000a    current_rp = frp;\u000a    while( true ) {\u000a      __c = getc_unlocked((FILE *)stream);\u000a      __c_00 = 10;\u000a      if (line_delim != 0) {\u000a        __c_00 = 0;\u000a      }\u000a      if (__c == __c_00) break;\u000a      if (__c == -1) {\u000a        if (local_38 != 0) {\u000a          putchar_unlocked(__c_00);\u000a        }\u000a        return;\u000a      }\u000a      next_item(&local_38);\u000a      k = local_38;\u000a      _Var1 = print_kth(local_38);\u000a      if (_Var1 != false) {\u000a        if (output_delimiter_specified == 1) {\u000a          if (bVar2) {\u000a            _Var1 = is_range_start_index(k);\u000a            bVar2 = true;\u000a            if (_Var1 != false) {\u000a              fwrite_unlocked(output_delimiter_string,1,output_delimiter_length,stdout);\u000a            }\u000a          }\u000a          else {\u000a            bVar2 = true;\u000a          }\u000a        }\u000a        putchar_unlocked(__c);\u000a      }\u000a    }\u000a    putchar_unlocked(__c);\u000a  } while( true );\u000a}\u000a\u000a
p283
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDI\nMOV qword ptr [RSP],0x0\nMOV RAX,qword ptr [0x00609498]\nMOV qword ptr [0x00609310],RAX\nXOR R12D,R12D\nMOV R14,RSP\nJMP 0x0040215d\nMOV EDI,EBP\nCALL 0x00401700\nMOV qword ptr [RSP],0x0\nMOV RAX,qword ptr [0x00609498]\nMOV qword ptr [0x00609310],RAX\nXOR R13D,R13D\nJMP 0x00402170\nMOV EDI,EBP\nCALL 0x00401700\nMOV R13B,BL\nNOP dword ptr [RAX]\nMOV RDI,R15\nCALL 0x00401530\nMOV EBP,EAX\nMOVZX EAX,byte ptr [0x00609308]\nTEST AL,AL\nMOV EDI,0xa\nCMOVNZ EDI,R12D\nCMP EBP,EDI\nJZ 0x00402140\nCMP EBP,-0x1\nJZ 0x004021f7\nMOV RDI,R14\nCALL 0x00402690\nMOV RBX,qword ptr [RSP]\nMOV RDI,RBX\nCALL 0x004026c0\nTEST AL,AL\nJZ 0x00402170\nCMP byte ptr [0x006092f7],0x1\nJNZ 0x004021c0\nTEST R13B,0x1\nJNZ 0x004021c5\nMOV BL,0x1\nJMP 0x00402162\nMOV EBX,R13D\nJMP 0x00402162\nMOV RDI,RBX\nCALL 0x004026d0\nTEST AL,AL\nMOV BL,0x1\nJZ 0x00402162\nMOV RDI,qword ptr [0x00609300]\nMOV RDX,qword ptr [0x006092f8]\nMOV RCX,qword ptr [0x006092a8]\nMOV ESI,0x1\nCALL 0x00401770\nJMP 0x00402162\nCMP qword ptr [RSP],0x0\nJZ 0x00402203\nCALL 0x00401700\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p284
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ff\n48 c7 04 24 00 00 00 00\n48 8b 05 6b 73 20 00\n48 89 05 dc 71 20 00\n45 31 e4\n49 89 e6\neb 21\n89 ef\ne8 b9 f5 ff ff\n48 c7 04 24 00 00 00 00\n48 8b 05 42 73 20 00\n48 89 05 b3 71 20 00\n45 31 ed\neb 0e\n89 ef\ne8 97 f5 ff ff\n41 88 dd\n0f 1f 40 00\n4c 89 ff\ne8 b8 f3 ff ff\n89 c5\n0f b6 05 87 71 20 00\n84 c0\nbf 0a 00 00 00\n41 0f 45 fc\n39 fd\n74 b0\n83 fd ff\n74 62\n4c 89 f7\ne8 f3 04 00 00\n48 8b 1c 24\n48 89 df\ne8 17 05 00 00\n84 c0\n74 c3\n80 3d 43 71 20 00 01\n75 0a\n41 f6 c5 01\n75 09\nb3 01\neb a2\n44 89 eb\neb 9d\n48 89 df\ne8 03 05 00 00\n84 c0\nb3 01\n74 8f\n48 8b 3d 26 71 20 00\n48 8b 15 17 71 20 00\n48 8b 0d c0 70 20 00\nbe 01 00 00 00\ne8 7e f5 ff ff\ne9 6b ff ff ff\n48 83 3c 24 00\n74 05\ne8 fd f4 ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p285
S'.text:0000000000402110\n.text:0000000000402111\n.text:0000000000402113\n.text:0000000000402115\n.text:0000000000402117\n.text:0000000000402119\n.text:000000000040211a\n.text:000000000040211b\n.text:000000000040211e\n.text:0000000000402126\n.text:000000000040212d\n.text:0000000000402134\n.text:0000000000402137\n.text:000000000040213a\n.text:0000000000402140\n.text:0000000000402142\n.text:0000000000402147\n.text:000000000040214f\n.text:0000000000402156\n.text:000000000040215d\n.text:0000000000402160\n.text:0000000000402162\n.text:0000000000402164\n.text:0000000000402169\n.text:000000000040216c\n.text:0000000000402170\n.text:0000000000402173\n.text:0000000000402178\n.text:000000000040217a\n.text:0000000000402181\n.text:0000000000402183\n.text:0000000000402188\n.text:000000000040218c\n.text:000000000040218e\n.text:0000000000402190\n.text:0000000000402193\n.text:0000000000402195\n.text:0000000000402198\n.text:000000000040219d\n.text:00000000004021a1\n.text:00000000004021a4\n.text:00000000004021a9\n.text:00000000004021ab\n.text:00000000004021ad\n.text:00000000004021b4\n.text:00000000004021b6\n.text:00000000004021ba\n.text:00000000004021bc\n.text:00000000004021be\n.text:00000000004021c0\n.text:00000000004021c3\n.text:00000000004021c5\n.text:00000000004021c8\n.text:00000000004021cd\n.text:00000000004021cf\n.text:00000000004021d1\n.text:00000000004021d3\n.text:00000000004021da\n.text:00000000004021e1\n.text:00000000004021e8\n.text:00000000004021ed\n.text:00000000004021f2\n.text:00000000004021f7\n.text:00000000004021fc\n.text:00000000004021fe\n.text:0000000000402203\n.text:0000000000402207\n.text:0000000000402208\n.text:000000000040220a\n.text:000000000040220c\n.text:000000000040220e\n.text:0000000000402210\n.text:0000000000402211\n'
p286
tp287
sS'c_toupper'
p288
(S'\n__stdcall c_toupper()\n'
p289
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p290
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p291
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p292
S'.text:0000000000405520\n.text:0000000000405523\n.text:0000000000405526\n.text:0000000000405529\n.text:000000000040552c\n'
p293
tp294
sS'bindtextdomain'
p295
(S'\n__stdcall bindtextdomain()\n'
p296
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00609090)();\u000a  return;\u000a}\u000a\u000a
p297
S'JMP qword ptr [0x00609090]\n'
p298
S'ff 25 fa 7a 20 00\n'
p299
S'.plt:0000000000401590\n'
p300
tp301
sS'set_char_quoting'
p302
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p303
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p304
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x609350\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p305
S'89 f1\n48 85 ff\nbe 50 93 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p306
S'.text:0000000000403330\n.text:0000000000403332\n.text:0000000000403335\n.text:000000000040333a\n.text:000000000040333e\n.text:0000000000403340\n.text:0000000000403343\n.text:0000000000403347\n.text:000000000040334c\n.text:000000000040334f\n.text:0000000000403351\n.text:0000000000403353\n.text:0000000000403356\n.text:0000000000403358\n.text:000000000040335b\n.text:000000000040335d\n.text:0000000000403360\n.text:0000000000403365\n'
p307
tp308
sS'quotearg_n'
p309
(S'\n__stdcall quotearg_n(char * arg)\n'
p310
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p311
S'MOV RDX,-0x1\nMOV ECX,0x609350\nJMP 0x00404220\n'
p312
S'48 c7 c2 ff ff ff ff\nb9 50 93 60 00\neb 02\n'
p313
S'.text:0000000000404210\n.text:0000000000404217\n.text:000000000040421c\n'
p314
tp315
sS'mbsinit'
p316
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_006091f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x006091f0]\n'
p319
S'ff 25 9a 79 20 00\n'
p320
S'.plt:0000000000401850\n'
p321
tp322
sS'dcgettext'
p323
(S'\n__stdcall dcgettext()\n'
p324
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00609098)();\u000a  return;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x00609098]\n'
p326
S'ff 25 f2 7a 20 00\n'
p327
S'.plt:00000000004015a0\n'
p328
tp329
sS'close_stream'
p330
(S'\n__stdcall close_stream(FILE * stream)\n'
p331
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p332
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401510\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004016b0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00405270\nTEST EBP,EBP\nJZ 0x0040556b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040558f\nCALL 0x004014d0\nMOV dword ptr [RAX],0x0\nJMP 0x0040558f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040558f\nTEST CL,CL\nJNZ 0x0040558f\nCALL 0x004014d0\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p333
S'55\n41 56\n53\n48 89 fb\ne8 d4 bf ff ff\n49 89 c6\n48 89 df\ne8 69 c1 ff ff\n89 c5\n48 89 df\ne8 1f fd ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 6d bf ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 4e bf ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p334
S'.text:0000000000405530\n.text:0000000000405531\n.text:0000000000405533\n.text:0000000000405534\n.text:0000000000405537\n.text:000000000040553c\n.text:000000000040553f\n.text:0000000000405542\n.text:0000000000405547\n.text:0000000000405549\n.text:000000000040554c\n.text:0000000000405551\n.text:0000000000405553\n.text:0000000000405555\n.text:000000000040555a\n.text:000000000040555c\n.text:000000000040555e\n.text:0000000000405563\n.text:0000000000405569\n.text:000000000040556b\n.text:000000000040556d\n.text:0000000000405570\n.text:0000000000405572\n.text:0000000000405574\n.text:0000000000405577\n.text:0000000000405579\n.text:000000000040557b\n.text:000000000040557d\n.text:0000000000405582\n.text:0000000000405584\n.text:0000000000405587\n.text:000000000040558c\n.text:000000000040558f\n.text:0000000000405591\n.text:0000000000405592\n.text:0000000000405594\n.text:0000000000405595\n'
p335
tp336
sS'quotearg_colon_mem'
p337
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p338
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p339
S'MOV EDX,0x3a\nJMP 0x00404530\n'
p340
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p341
S'.text:00000000004045c0\n.text:00000000004045c5\n'
p342
tp343
sS'quotearg_free'
p344
(S'\n__stdcall quotearg_free()\n'
p345
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p346
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x00609230]\nCMP dword ptr [0x00609238],0x2\nJC 0x004041ba\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004014b0\nINC RBX\nMOV EAX,dword ptr [0x00609238]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x004041a0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x609390\nCMP RDI,RAX\nJZ 0x004041e3\nCALL 0x004014b0\nMOV qword ptr [0x00609240],0x100\nMOV qword ptr [0x00609248],0x609390\nMOV EAX,0x609240\nCMP R14,RAX\nJZ 0x00404200\nMOV RDI,R14\nCALL 0x004014b0\nMOV qword ptr [0x00609230],0x609240\nMOV dword ptr [0x00609238],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p347
S'41 57\n41 56\n53\n4c 8b 35 a4 50 20 00\n83 3d a5 50 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 08 d3 ff ff\n48 ff c3\n8b 05 87 50 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 90 93 60 00\n48 39 c7\n74 1b\ne8 e3 d2 ff ff\n48 c7 05 68 50 20 00 00 01 00 00\n48 c7 05 65 50 20 00 90 93 60 00\nb8 40 92 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 bb d2 ff ff\n48 c7 05 30 50 20 00 40 92 60 00\nc7 05 2e 50 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p348
S'.text:0000000000404180\n.text:0000000000404182\n.text:0000000000404184\n.text:0000000000404185\n.text:000000000040418c\n.text:0000000000404193\n.text:0000000000404195\n.text:0000000000404199\n.text:000000000040419e\n.text:00000000004041a0\n.text:00000000004041a3\n.text:00000000004041a8\n.text:00000000004041ab\n.text:00000000004041b1\n.text:00000000004041b5\n.text:00000000004041b8\n.text:00000000004041ba\n.text:00000000004041be\n.text:00000000004041c3\n.text:00000000004041c6\n.text:00000000004041c8\n.text:00000000004041cd\n.text:00000000004041d8\n.text:00000000004041e3\n.text:00000000004041e8\n.text:00000000004041eb\n.text:00000000004041ed\n.text:00000000004041f0\n.text:00000000004041f5\n.text:0000000000404200\n.text:000000000040420a\n.text:000000000040420b\n.text:000000000040420d\n.text:000000000040420f\n'
p349
tp350
sS'set_fields'
p351
(S'\n__stdcall set_fields(char * fieldstr)\n'
p352
V\u000avoid set_fields(char *fieldstr)\u000a\u000a{\u000a  ulong uVar1;\u000a  char cVar2;\u000a  ushort *puVar3;\u000a  field_range_pair *pfVar4;\u000a  char *num_start;\u000a  byte bVar5;\u000a  int iVar6;\u000a  ushort **ppuVar7;\u000a  size_t n;\u000a  char *arg;\u000a  undefined8 uVar8;\u000a  char *string;\u000a  bool bVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  uint in_ESI;\u000a  ulong hi;\u000a  ulong uVar12;\u000a  byte bVar13;\u000a  ulong local_40;\u000a  \u000a  if ((in_ESI & 1) == 0) {\u000a    uVar11 = 0;\u000a  }\u000a  else {\u000a    iVar6 = 0x2d - (uint)(byte)*fieldstr;\u000a    if (iVar6 == 0) {\u000a      iVar6 = -(uint)(byte)fieldstr[1];\u000a    }\u000a    uVar11 = (ulong)(iVar6 == 0);\u000a    if (iVar6 == 0) {\u000a      fieldstr = fieldstr + 1;\u000a    }\u000a  }\u000a  bVar9 = false;\u000a  local_40 = 1;\u000a  hi = uVar11;\u000a  uVar10 = uVar11;\u000a  do {\u000a    bVar13 = 0;\u000a    while( true ) {\u000a      cVar2 = *fieldstr;\u000a      if ((int)cVar2 == 0x2c) break;\u000a      if (cVar2 == '-') {\u000a        if (uVar11 != 0) {\u000a          string = "invalid byte or character range";\u000a          arg = "invalid field range";\u000a          goto LAB_00402b15;\u000a        }\u000a        if ((hi == 0) && (uVar10 != 0)) goto LAB_00402af6;\u000a        if (uVar10 == 0) {\u000a          hi = 1;\u000a        }\u000a        uVar11 = 1;\u000a        local_40 = hi;\u000a        goto LAB_00402760;\u000a      }\u000a      ppuVar7 = __ctype_b_loc();\u000a      puVar3 = *ppuVar7;\u000a      bVar5 = to_uchar();\u000a      if ((cVar2 == 0) || ((puVar3[(ulong)bVar5] & 1) != 0)) break;\u000a      if (9 < (int)cVar2 - 0x30U) {\u000aLAB_00402ab1:\u000a        string = "invalid field value %s";\u000a        if ((in_ESI & 4) != 0) {\u000a          string = "invalid byte/character position %s";\u000a        }\u000a        uVar8 = dcgettext(0,string,5);\u000a        string = quote(fieldstr);\u000a        error(0,0,uVar8,string);\u000a        usage(1);\u000a        goto LAB_00402af6;\u000a      }\u000a      if (!(bool)(bVar13 & num_start != (char *)0x0)) {\u000a        num_start = fieldstr;\u000a      }\u000a      string = num_start;\u000a      bVar5 = 1;\u000a      if (uVar11 != 0) {\u000a        bVar9 = true;\u000a        bVar5 = (byte)uVar10;\u000a      }\u000a      if (((0x1999999999999999 < hi) || (uVar1 = (long)*fieldstr + -0x30 + hi * 10, uVar1 < hi)) ||\u000a         (uVar1 == 0xffffffffffffffff)) {\u000a        n = strspn(num_start,"0123456789");\u000a        arg = xstrndup(string,n);\u000a        string = "field number %s is too large";\u000a        if ((in_ESI & 4) != 0) {\u000a          string = "byte/character offset %s is too large";\u000a        }\u000a        uVar8 = dcgettext(0,string,5);\u000a        string = quote(arg);\u000a        error(0,0,uVar8,string);\u000a        free(arg);\u000a        usage(1);\u000a        goto LAB_00402ab1;\u000a      }\u000a      fieldstr = fieldstr + 1;\u000a      bVar13 = 1;\u000a      uVar10 = (ulong)bVar5;\u000a      hi = uVar1;\u000a    }\u000a    if (uVar11 == 0) {\u000a      if (hi == 0) {\u000aLAB_00402af6:\u000a        string = "byte/character positions are numbered from 1";\u000a        arg = "fields are numbered from 1";\u000a        goto LAB_00402b15;\u000a      }\u000a      add_range_pair(hi,hi);\u000a      cVar2 = *fieldstr;\u000a    }\u000a    else {\u000a      bVar13 = (byte)uVar10 | bVar9;\u000a      if (bVar13 == 0) {\u000a        local_40 = 1;\u000a      }\u000a      if (((in_ESI & 1) == 0) && (bVar13 == 0)) {\u000a        arg = "invalid range with no endpoint: -";\u000a        goto LAB_00402b20;\u000a      }\u000a      if (bVar9) {\u000a        if (hi < local_40) goto LAB_00402b45;\u000a      }\u000a      else {\u000a        hi = 0xffffffffffffffff;\u000a      }\u000a      add_range_pair(local_40,hi);\u000a      uVar11 = 0;\u000a      cVar2 = *fieldstr;\u000a    }\u000a    if (cVar2 == 0) {\u000a      if (n_frp != 0) {\u000a        qsort(frp,n_frp,0x10,compare_ranges);\u000a        if (n_frp != 0) {\u000a          uVar11 = 0;\u000a          do {\u000a            hi = uVar11 + 1;\u000a            pfVar4 = frp;\u000a            uVar10 = n_frp;\u000a            while ((hi < uVar10 &&\u000a                   (uVar1 = pfVar4[uVar11].hi, pfVar4[hi].lo < uVar1 || pfVar4[hi].lo == uVar1))) {\u000a              uVar12 = uVar11;\u000a              if (uVar1 <= pfVar4[hi].hi && pfVar4[hi].hi != uVar1) {\u000a                uVar12 = hi;\u000a              }\u000a              frp = pfVar4;\u000a              n_frp = uVar10;\u000a              pfVar4[uVar11].hi = pfVar4[uVar12].hi;\u000a              memmove(pfVar4 + hi,pfVar4 + uVar11 + 2,(uVar10 - hi) * 0x10 - 0x10);\u000a              uVar10 = n_frp - 1;\u000a              pfVar4 = frp;\u000a            }\u000a            uVar11 = hi;\u000a            frp = pfVar4;\u000a            n_frp = uVar10;\u000a          } while (hi < uVar10);\u000a        }\u000a        if ((in_ESI & 2) != 0) {\u000a          complement_rp();\u000a        }\u000a        n_frp = n_frp + 1;\u000a        frp = (field_range_pair *)xrealloc(frp,n_frp * 0x10);\u000a                    /* WARNING: Store size is inaccurate */\u000a        *(undefined *)(frp + (n_frp - 1)) =\u000a             CONCAT412(0xffffffff,CONCAT48(0xffffffff,0xffffffffffffffff));\u000a        return;\u000a      }\u000a      string = "missing list of byte/character positions";\u000a      arg = "missing list of fields";\u000aLAB_00402b15:\u000a      if ((in_ESI & 4) != 0) {\u000a        arg = string;\u000a      }\u000aLAB_00402b20:\u000a      do {\u000a        uVar8 = dcgettext(0,arg,5);\u000a        error(0,0,uVar8,uVar8);\u000a        usage();\u000aLAB_00402b45:\u000a        arg = "invalid decreasing range";\u000a      } while( true );\u000a    }\u000a    bVar9 = false;\u000a    uVar10 = 0;\u000aLAB_00402760:\u000a    fieldstr = fieldstr + 1;\u000a    hi = 0;\u000a  } while( true );\u000a}\u000a\u000a
p353
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R12,RDI\nMOV EAX,ESI\nAND EAX,0x1\nMOV dword ptr [RSP + 0x24],EAX\nMOV dword ptr [RSP + 0x4],ESI\nJZ 0x0040273c\nMOVZX ECX,byte ptr [R12]\nMOV EAX,0x2d\nSUB EAX,ECX\nJNZ 0x00402726\nMOVZX EAX,byte ptr [R12 + 0x1]\nNEG EAX\nLEA RCX,[R12 + 0x1]\nXOR EBP,EBP\nTEST EAX,EAX\nSETZ BPL\nCMOVZ R12,RCX\nMOV BL,BPL\nJMP 0x00402740\nXOR EBP,EBP\nXOR EBX,EBX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV R13B,BL\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x18],RAX\nJMP 0x00402765\nINC R12\nXOR EBP,EBP\nMOV dword ptr [RSP + 0xc],EBX\nMOV EAX,EBX\nAND AL,0x1\nMOV byte ptr [RSP + 0xb],AL\nXOR R15D,R15D\nJMP 0x00402789\nINC R12\nMOV R15B,0x1\nMOV R13B,AL\nMOVSX EBX,byte ptr [R12]\nCMP EBX,0x2c\nJZ 0x00402840\nCMP BL,0x2d\nJZ 0x004028b0\nCALL 0x00401880\nMOV R14,qword ptr [RAX]\nMOV EDI,EBX\nCALL 0x00402b60\nTEST BL,BL\nJZ 0x00402840\nMOVZX EAX,AL\nMOVZX EAX,word ptr [R14 + RAX*0x2]\nAND EAX,0x1\nTEST AX,AX\nJNZ 0x00402840\nADD EBX,-0x30\nCMP EBX,0x9\nJA 0x00402ab1\nCMP qword ptr [0x00609328],0x0\nSETNZ AL\nTEST R15B,AL\nJNZ 0x004027ea\nMOV qword ptr [0x00609328],R12\nCMP byte ptr [RSP + 0xb],0x0\nMOV AL,0x1\nJZ 0x004027fa\nMOV CL,0x1\nMOV qword ptr [RSP + 0x10],RCX\nJZ 0x004027ff\nMOV EAX,R13D\nMOV RCX,0x1999999999999999\nCMP RBP,RCX\nJA 0x00402a42\nLEA RCX,[RBP + RBP*0x4]\nMOVSX RDX,byte ptr [R12]\nLEA RCX,[RDX + RCX*0x2 + -0x30]\nCMP RCX,RBP\nCMOVNC RBP,RCX\nJC 0x00402a42\nCMP RBP,-0x1\nJNZ 0x00402780\nJMP 0x00402a42\nMOV EBX,dword ptr [RSP + 0xc]\nTEST BL,0x1\nJNZ 0x00402870\nTEST RBP,RBP\nJZ 0x00402af6\nMOV RDI,RBP\nMOV RSI,RBP\nCALL 0x00402b70\nCMP byte ptr [R12],0x0\nJNZ 0x00402901\nJMP 0x00402910\nOR R13B,byte ptr [RSP + 0x10]\nAND R13B,0x1\nMOV EAX,0x1\nMOV RCX,qword ptr [RSP + 0x18]\nCMOVZ RCX,RAX\nMOV RDI,RCX\nCMP dword ptr [RSP + 0x24],0x0\nJNZ 0x0040289a\nTEST R13B,R13B\nJZ 0x00402b02\nTEST byte ptr [RSP + 0x10],0x1\nMOV qword ptr [RSP + 0x18],RDI\nJNZ 0x004028e7\nMOV RSI,-0x1\nJMP 0x004028f3\nTEST byte ptr [RSP + 0xc],0x1\nJNZ 0x00402b0b\nMOV EAX,R13D\nAND AL,0x1\nSETZ CL\nTEST RBP,RBP\nJNZ 0x004028d0\nTEST CL,CL\nJZ 0x00402af6\nTEST AL,AL\nMOV EAX,0x1\nCMOVZ RBP,RAX\nMOV BL,0x1\nMOV qword ptr [RSP + 0x18],RBP\nJMP 0x00402760\nCMP RBP,RDI\nJC 0x00402b45\nMOV RSI,RBP\nCALL 0x00402b70\nXOR EBX,EBX\nCMP byte ptr [R12],0x0\nJZ 0x00402910\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nXOR R13D,R13D\nJMP 0x00402760\nMOV RSI,qword ptr [0x006094a0]\nTEST RSI,RSI\nJZ 0x00402b4e\nMOV RDI,qword ptr [0x00609498]\nMOV EDX,0x10\nMOV ECX,0x402bf0\nCALL 0x00401540\nCMP qword ptr [0x006094a0],0x0\nJZ 0x004029ea\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV R14,RBX\nLEA RBX,[R14 + 0x1]\nMOV RDX,qword ptr [0x006094a0]\nCMP RDX,RBX\nJA 0x004029bd\nJMP 0x004029dd\nLEA RBP,[RAX + RDI*0x1 + 0x8]\nLEA RDI,[RAX + RCX*0x1]\nCMP qword ptr [RAX + RCX*0x1 + 0x8],RSI\nMOV RSI,R14\nCMOVA RSI,RBX\nSHL RSI,0x4\nMOV RSI,qword ptr [RAX + RSI*0x1 + 0x8]\nMOV qword ptr [RBP],RSI\nLEA RSI,[RAX + RCX*0x1 + 0x10]\nSUB RDX,RBX\nSHL RDX,0x4\nADD RDX,-0x10\nCALL 0x004017c0\nMOV RDX,qword ptr [0x006094a0]\nDEC RDX\nMOV qword ptr [0x006094a0],RDX\nCMP RDX,RBX\nJBE 0x004029dd\nMOV RAX,qword ptr [0x00609498]\nMOV RCX,RBX\nSHL RCX,0x4\nMOV RDI,R14\nSHL RDI,0x4\nMOV RSI,qword ptr [RAX + RDI*0x1 + 0x8]\nCMP qword ptr [RAX + RCX*0x1],RSI\nJBE 0x00402970\nCMP RBX,qword ptr [0x006094a0]\nJC 0x00402950\nTEST byte ptr [RSP + 0x4],0x2\nJZ 0x004029f6\nCALL 0x00402c10\nMOV RSI,qword ptr [0x006094a0]\nINC RSI\nMOV qword ptr [0x006094a0],RSI\nMOV RDI,qword ptr [0x00609498]\nSHL RSI,0x4\nCALL 0x00405080\nMOV qword ptr [0x00609498],RAX\nMOV RCX,qword ptr [0x006094a0]\nSHL RCX,0x4\nPCMPEQD XMM0,XMM0\nMOVDQU xmmword ptr [RAX + RCX*0x1 + -0x10],XMM0\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RBX,qword ptr [0x00609328]\nMOV ESI,0x406840\nMOV RDI,RBX\nCALL 0x00401660\nMOV RDI,RBX\nMOV RSI,RAX\nCALL 0x00405200\nMOV RBX,RAX\nMOV EAX,0x40684b\nMOV ESI,0x406871\nTEST byte ptr [RSP + 0x4],0x4\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00404710\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x004017d0\nMOV RDI,RBX\nCALL 0x004014b0\nMOV EDI,0x1\nCALL 0x00401990\nMOV EAX,0x40688e\nMOV ESI,0x4068b1\nTEST byte ptr [RSP + 0x4],0x4\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RBX,RAX\nMOV RDI,R12\nCALL 0x00404710\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004017d0\nMOV EDI,0x1\nCALL 0x00401990\nMOV EAX,0x4067bd\nMOV ESI,0x4067ea\nJMP 0x00402b15\nXOR EDI,EDI\nMOV ESI,0x406805\nJMP 0x00402b20\nMOV EAX,0x406789\nMOV ESI,0x4067a9\nTEST byte ptr [RSP + 0x4],0x4\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004017d0\nMOV EDI,0x1\nCALL 0x00401990\nXOR EDI,EDI\nMOV ESI,0x406827\nJMP 0x00402b20\nMOV EAX,0x4068c8\nMOV ESI,0x4068f1\nJMP 0x00402b15\n'
p354
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 fc\n89 f0\n83 e0 01\n89 44 24 24\n89 74 24 04\n74 2c\n41 0f b6 0c 24\nb8 2d 00 00 00\n29 c8\n75 08\n41 0f b6 44 24 01\nf7 d8\n49 8d 4c 24 01\n31 ed\n85 c0\n40 0f 94 c5\n4c 0f 44 e1\n40 88 eb\neb 04\n31 ed\n31 db\n31 c0\n48 89 44 24 10\n41 88 dd\nb8 01 00 00 00\n48 89 44 24 18\neb 0f\n49 ff c4\n31 ed\n89 5c 24 0c\n89 d8\n24 01\n88 44 24 0b\n45 31 ff\neb 13\n49 ff c4\n41 b7 01\n41 88 c5\n41 0f be 1c 24\n83 fb 2c\n0f 84 a9 00 00 00\n80 fb 2d\n0f 84 10 01 00 00\ne8 db f0 ff ff\n4c 8b 30\n89 df\ne8 b1 03 00 00\n84 db\n0f 84 89 00 00 00\n0f b6 c0\n41 0f b7 04 46\n83 e0 01\n66 85 c0\n75 79\n83 c3 d0\n83 fb 09\n0f 87 de 02 00 00\n48 83 3d 4d 6b 20 00 00\n0f 95 c0\n41 84 c7\n75 07\n4c 89 25 3e 6b 20 00\n80 7c 24 0b 00\nb0 01\n74 07\nb1 01\n48 89 4c 24 10\n74 03\n44 89 e8\n48 b9 99 99 99 99 99 99 99 19\n48 39 cd\n0f 87 30 02 00 00\n48 8d 4c ad 00\n49 0f be 14 24\n48 8d 4c 4a d0\n48 39 e9\n48 0f 43 e9\n0f 82 14 02 00 00\n48 83 fd ff\n0f 85 48 ff ff ff\ne9 05 02 00 00\n8b 5c 24 0c\nf6 c3 01\n75 27\n48 85 ed\n0f 84 a4 02 00 00\n48 89 ef\n48 89 ee\ne8 13 03 00 00\n41 80 3c 24 00\n0f 85 99 00 00 00\ne9 a3 00 00 00\n44 0a 6c 24 10\n41 80 e5 01\nb8 01 00 00 00\n48 8b 4c 24 18\n48 0f 44 c8\n48 89 cf\n83 7c 24 24 00\n75 09\n45 84 ed\n0f 84 68 02 00 00\nf6 44 24 10 01\n48 89 7c 24 18\n75 41\n48 c7 c6 ff ff ff ff\neb 44\nf6 44 24 0c 01\n0f 85 50 02 00 00\n44 89 e8\n24 01\n0f 94 c1\n48 85 ed\n75 08\n84 c9\n0f 84 26 02 00 00\n84 c0\nb8 01 00 00 00\n48 0f 44 e8\nb3 01\n48 89 6c 24 18\ne9 79 fe ff ff\n48 39 fd\n0f 82 55 02 00 00\n48 89 ee\ne8 78 02 00 00\n31 db\n41 80 3c 24 00\n74 0f\n31 c0\n48 89 44 24 10\n45 31 ed\ne9 50 fe ff ff\n48 8b 35 89 6b 20 00\n48 85 f6\n0f 84 2e 02 00 00\n48 8b 3d 71 6b 20 00\nba 10 00 00 00\nb9 f0 2b 40 00\ne8 0a ec ff ff\n48 83 3d 62 6b 20 00 00\n0f 84 a6 00 00 00\n31 db\n66 2e 0f 1f 84 00 00 00 00 00\n49 89 de\n49 8d 5e 01\n48 8b 15 42 6b 20 00\n48 39 da\n77 5a\neb 78\n48 8d 6c 38 08\n48 8d 3c 08\n48 39 74 08 08\n4c 89 f6\n48 0f 47 f3\n48 c1 e6 04\n48 8b 74 30 08\n48 89 75 00\n48 8d 74 08 10\n48 29 da\n48 c1 e2 04\n48 83 c2 f0\ne8 19 ee ff ff\n48 8b 15 f2 6a 20 00\n48 ff ca\n48 89 15 e8 6a 20 00\n48 39 da\n76 20\n48 8b 05 d4 6a 20 00\n48 89 d9\n48 c1 e1 04\n4c 89 f7\n48 c1 e7 04\n48 8b 74 38 08\n48 39 34 08\n76 93\n48 3b 1d bc 6a 20 00\n0f 82 66 ff ff ff\nf6 44 24 04 02\n74 05\ne8 1a 02 00 00\n48 8b 35 a3 6a 20 00\n48 ff c6\n48 89 35 99 6a 20 00\n48 8b 3d 8a 6a 20 00\n48 c1 e6 04\ne8 69 26 00 00\n48 89 05 7a 6a 20 00\n48 8b 0d 7b 6a 20 00\n48 c1 e1 04\n66 0f 76 c0\nf3 0f 7f 44 08 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 1d df 68 20 00\nbe 40 68 40 00\n48 89 df\ne8 0a ec ff ff\n48 89 df\n48 89 c6\ne8 9f 27 00 00\n48 89 c3\nb8 4b 68 40 00\nbe 71 68 40 00\nf6 44 24 04 04\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 1d eb ff ff\n48 89 c5\n48 89 df\ne8 82 1c 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 31 ed ff ff\n48 89 df\ne8 09 ea ff ff\nbf 01 00 00 00\ne8 df ee ff ff\nb8 8e 68 40 00\nbe b1 68 40 00\nf6 44 24 04 04\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 d0 ea ff ff\n48 89 c3\n4c 89 e7\ne8 35 1c 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 e4 ec ff ff\nbf 01 00 00 00\ne8 9a ee ff ff\nb8 bd 67 40 00\nbe ea 67 40 00\neb 13\n31 ff\nbe 05 68 40 00\neb 15\nb8 89 67 40 00\nbe a9 67 40 00\nf6 44 24 04 04\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 76 ea ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 95 ec ff ff\nbf 01 00 00 00\ne8 4b ee ff ff\n31 ff\nbe 27 68 40 00\neb d2\nb8 c8 68 40 00\nbe f1 68 40 00\neb bb\n'
p355
S'.text:00000000004026f0\n.text:00000000004026f1\n.text:00000000004026f3\n.text:00000000004026f5\n.text:00000000004026f7\n.text:00000000004026f9\n.text:00000000004026fa\n.text:00000000004026fe\n.text:0000000000402701\n.text:0000000000402703\n.text:0000000000402706\n.text:000000000040270a\n.text:000000000040270e\n.text:0000000000402710\n.text:0000000000402715\n.text:000000000040271a\n.text:000000000040271c\n.text:000000000040271e\n.text:0000000000402724\n.text:0000000000402726\n.text:000000000040272b\n.text:000000000040272d\n.text:000000000040272f\n.text:0000000000402733\n.text:0000000000402737\n.text:000000000040273a\n.text:000000000040273c\n.text:000000000040273e\n.text:0000000000402740\n.text:0000000000402742\n.text:0000000000402747\n.text:000000000040274a\n.text:000000000040274f\n.text:0000000000402754\n.text:0000000000402760\n.text:0000000000402763\n.text:0000000000402765\n.text:0000000000402769\n.text:000000000040276b\n.text:000000000040276d\n.text:0000000000402771\n.text:0000000000402774\n.text:0000000000402780\n.text:0000000000402783\n.text:0000000000402786\n.text:0000000000402789\n.text:000000000040278e\n.text:0000000000402791\n.text:0000000000402797\n.text:000000000040279a\n.text:00000000004027a0\n.text:00000000004027a5\n.text:00000000004027a8\n.text:00000000004027aa\n.text:00000000004027af\n.text:00000000004027b1\n.text:00000000004027b7\n.text:00000000004027ba\n.text:00000000004027bf\n.text:00000000004027c2\n.text:00000000004027c5\n.text:00000000004027c7\n.text:00000000004027ca\n.text:00000000004027cd\n.text:00000000004027d3\n.text:00000000004027db\n.text:00000000004027de\n.text:00000000004027e1\n.text:00000000004027e3\n.text:00000000004027ea\n.text:00000000004027ef\n.text:00000000004027f1\n.text:00000000004027f3\n.text:00000000004027f5\n.text:00000000004027fa\n.text:00000000004027fc\n.text:00000000004027ff\n.text:0000000000402809\n.text:000000000040280c\n.text:0000000000402812\n.text:0000000000402817\n.text:000000000040281c\n.text:0000000000402821\n.text:0000000000402824\n.text:0000000000402828\n.text:000000000040282e\n.text:0000000000402832\n.text:0000000000402838\n.text:0000000000402840\n.text:0000000000402844\n.text:0000000000402847\n.text:0000000000402849\n.text:000000000040284c\n.text:0000000000402852\n.text:0000000000402855\n.text:0000000000402858\n.text:000000000040285d\n.text:0000000000402862\n.text:0000000000402868\n.text:0000000000402870\n.text:0000000000402875\n.text:0000000000402879\n.text:000000000040287e\n.text:0000000000402883\n.text:0000000000402887\n.text:000000000040288a\n.text:000000000040288f\n.text:0000000000402891\n.text:0000000000402894\n.text:000000000040289a\n.text:000000000040289f\n.text:00000000004028a4\n.text:00000000004028a6\n.text:00000000004028ad\n.text:00000000004028b0\n.text:00000000004028b5\n.text:00000000004028bb\n.text:00000000004028be\n.text:00000000004028c0\n.text:00000000004028c3\n.text:00000000004028c6\n.text:00000000004028c8\n.text:00000000004028ca\n.text:00000000004028d0\n.text:00000000004028d2\n.text:00000000004028d7\n.text:00000000004028db\n.text:00000000004028dd\n.text:00000000004028e2\n.text:00000000004028e7\n.text:00000000004028ea\n.text:00000000004028f0\n.text:00000000004028f3\n.text:00000000004028f8\n.text:00000000004028fa\n.text:00000000004028ff\n.text:0000000000402901\n.text:0000000000402903\n.text:0000000000402908\n.text:000000000040290b\n.text:0000000000402910\n.text:0000000000402917\n.text:000000000040291a\n.text:0000000000402920\n.text:0000000000402927\n.text:000000000040292c\n.text:0000000000402931\n.text:0000000000402936\n.text:000000000040293e\n.text:0000000000402944\n.text:0000000000402946\n.text:0000000000402950\n.text:0000000000402953\n.text:0000000000402957\n.text:000000000040295e\n.text:0000000000402961\n.text:0000000000402963\n.text:0000000000402970\n.text:0000000000402975\n.text:0000000000402979\n.text:000000000040297e\n.text:0000000000402981\n.text:0000000000402985\n.text:0000000000402989\n.text:000000000040298e\n.text:0000000000402992\n.text:0000000000402997\n.text:000000000040299a\n.text:000000000040299e\n.text:00000000004029a2\n.text:00000000004029a7\n.text:00000000004029ae\n.text:00000000004029b1\n.text:00000000004029b8\n.text:00000000004029bb\n.text:00000000004029bd\n.text:00000000004029c4\n.text:00000000004029c7\n.text:00000000004029cb\n.text:00000000004029ce\n.text:00000000004029d2\n.text:00000000004029d7\n.text:00000000004029db\n.text:00000000004029dd\n.text:00000000004029e4\n.text:00000000004029ea\n.text:00000000004029ef\n.text:00000000004029f1\n.text:00000000004029f6\n.text:00000000004029fd\n.text:0000000000402a00\n.text:0000000000402a07\n.text:0000000000402a0e\n.text:0000000000402a12\n.text:0000000000402a17\n.text:0000000000402a1e\n.text:0000000000402a25\n.text:0000000000402a29\n.text:0000000000402a2d\n.text:0000000000402a33\n.text:0000000000402a37\n.text:0000000000402a38\n.text:0000000000402a3a\n.text:0000000000402a3c\n.text:0000000000402a3e\n.text:0000000000402a40\n.text:0000000000402a41\n.text:0000000000402a42\n.text:0000000000402a49\n.text:0000000000402a4e\n.text:0000000000402a51\n.text:0000000000402a56\n.text:0000000000402a59\n.text:0000000000402a5c\n.text:0000000000402a61\n.text:0000000000402a64\n.text:0000000000402a69\n.text:0000000000402a6e\n.text:0000000000402a73\n.text:0000000000402a77\n.text:0000000000402a79\n.text:0000000000402a7e\n.text:0000000000402a83\n.text:0000000000402a86\n.text:0000000000402a89\n.text:0000000000402a8e\n.text:0000000000402a91\n.text:0000000000402a93\n.text:0000000000402a95\n.text:0000000000402a97\n.text:0000000000402a9a\n.text:0000000000402a9f\n.text:0000000000402aa2\n.text:0000000000402aa7\n.text:0000000000402aac\n.text:0000000000402ab1\n.text:0000000000402ab6\n.text:0000000000402abb\n.text:0000000000402ac0\n.text:0000000000402ac4\n.text:0000000000402ac6\n.text:0000000000402acb\n.text:0000000000402ad0\n.text:0000000000402ad3\n.text:0000000000402ad6\n.text:0000000000402adb\n.text:0000000000402ade\n.text:0000000000402ae0\n.text:0000000000402ae2\n.text:0000000000402ae4\n.text:0000000000402ae7\n.text:0000000000402aec\n.text:0000000000402af1\n.text:0000000000402af6\n.text:0000000000402afb\n.text:0000000000402b00\n.text:0000000000402b02\n.text:0000000000402b04\n.text:0000000000402b09\n.text:0000000000402b0b\n.text:0000000000402b10\n.text:0000000000402b15\n.text:0000000000402b1a\n.text:0000000000402b1e\n.text:0000000000402b20\n.text:0000000000402b25\n.text:0000000000402b2a\n.text:0000000000402b2d\n.text:0000000000402b2f\n.text:0000000000402b31\n.text:0000000000402b33\n.text:0000000000402b36\n.text:0000000000402b3b\n.text:0000000000402b40\n.text:0000000000402b45\n.text:0000000000402b47\n.text:0000000000402b4c\n.text:0000000000402b4e\n.text:0000000000402b53\n.text:0000000000402b58\n'
p356
tp357
sS'quotearg_mem'
p358
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p359
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p360
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004043e0\n'
p361
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p362
S'.text:0000000000404400\n.text:0000000000404403\n.text:0000000000404406\n.text:0000000000404408\n.text:000000000040440b\n.text:000000000040440e\n'
p363
tp364
sS'xcalloc'
p365
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p366
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p367
S'PUSH RAX\nCALL 0x00405220\nTEST RAX,RAX\nJZ 0x0040516d\nPOP RCX\nRET\nCALL 0x004051d0\n'
p368
S'50\ne8 ba 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p369
S'.text:0000000000405160\n.text:0000000000405161\n.text:0000000000405166\n.text:0000000000405169\n.text:000000000040516b\n.text:000000000040516c\n.text:000000000040516d\n'
p370
tp371
sS'deregister_tm_clones'
p372
(S'\n__stdcall deregister_tm_clones()\n'
p373
V\u000a/* WARNING: Removing unreachable block (ram,0x004018d5) */\u000a/* WARNING: Removing unreachable block (ram,0x004018df) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p374
S'MOV EAX,0x60928f\nPUSH RBP\nSUB RAX,0x609288\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x004018f0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004018f0\nPOP RBP\nMOV EDI,0x609288\nJMP RAX\nPOP RBP\nRET\n'
p375
S'b8 8f 92 60 00\n55\n48 2d 88 92 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 88 92 60 00\nff e0\n5d\nc3\n'
p376
S'.text:00000000004018c0\n.text:00000000004018c5\n.text:00000000004018c6\n.text:00000000004018cc\n.text:00000000004018d0\n.text:00000000004018d3\n.text:00000000004018d5\n.text:00000000004018da\n.text:00000000004018dd\n.text:00000000004018df\n.text:00000000004018e0\n.text:00000000004018e5\n.text:00000000004018f0\n.text:00000000004018f1\n'
p377
tp378
sS'next_item'
p379
(S'\n__stdcall next_item(size_t * item_idx)\n'
p380
V\u000avoid next_item(size_t *item_idx)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = *item_idx + 1;\u000a  *item_idx = uVar1;\u000a  if (current_rp->hi <= uVar1 && uVar1 != current_rp->hi) {\u000a    current_rp = current_rp + 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p381
S'MOV RCX,qword ptr [RDI]\nINC RCX\nMOV qword ptr [RDI],RCX\nMOV RAX,qword ptr [0x00609310]\nCMP RCX,qword ptr [RAX + 0x8]\nJBE 0x004026b1\nADD RAX,0x10\nMOV qword ptr [0x00609310],RAX\nRET\n'
p382
S'48 8b 0f\n48 ff c1\n48 89 0f\n48 8b 05 70 6c 20 00\n48 3b 48 08\n76 0b\n48 83 c0 10\n48 89 05 5f 6c 20 00\nc3\n'
p383
S'.text:0000000000402690\n.text:0000000000402693\n.text:0000000000402696\n.text:0000000000402699\n.text:00000000004026a0\n.text:00000000004026a4\n.text:00000000004026a6\n.text:00000000004026aa\n.text:00000000004026b1\n'
p384
tp385
sS'clear_ungetc_buffer_preserving_position'
p386
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p387
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p388
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405327\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00405370\n'
p389
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 3d 00 00 00\n'
p390
S'.text:0000000000405320\n.text:0000000000405324\n.text:0000000000405326\n.text:0000000000405327\n.text:0000000000405329\n.text:000000000040532e\n'
p391
tp392
sS'xnmalloc'
p393
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p394
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p395
S'MOV RAX,RDI\nMUL RSI\nJO 0x00405031\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00405040\nPUSH RAX\nCALL 0x004051d0\n'
p396
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p397
S'.text:0000000000405020\n.text:0000000000405023\n.text:0000000000405026\n.text:0000000000405028\n.text:000000000040502c\n.text:000000000040502f\n.text:0000000000405031\n.text:0000000000405032\n'
p398
tp399
sS'quotearg_custom'
p400
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p401
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p402
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404620\n'
p403
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p404
S'.text:00000000004046a0\n.text:00000000004046a3\n.text:00000000004046a6\n.text:00000000004046a9\n.text:00000000004046ab\n.text:00000000004046ae\n.text:00000000004046b1\n.text:00000000004046b4\n'
p405
tp406
sS'free'
p407
(S'\n__stdcall free(void * __ptr)\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00609020)();\u000a  return;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x00609020]\n'
p410
S'ff 25 6a 7b 20 00\n'
p411
S'.plt:00000000004014b0\n'
p412
tp413
sS'close'
p414
(S'\n__stdcall close(int __fd)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006090f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x006090f0]\n'
p417
S'ff 25 9a 7a 20 00\n'
p418
S'.plt:0000000000401650\n'
p419
tp420
sS'getenv'
p421
(S'\n__stdcall getenv(char * __name)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00609018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x00609018]\n'
p424
S'ff 25 72 7b 20 00\n'
p425
S'.plt:00000000004014a0\n'
p426
tp427
sS'putchar_unlocked'
p428
(S'\n__stdcall putchar_unlocked(int __c)\n'
p429
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_00609148)();\u000a  return iVar1;\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x00609148]\n'
p431
S'ff 25 42 7a 20 00\n'
p432
S'.plt:0000000000401700\n'
p433
tp434
sS'quotearg_char'
p435
(S'\n__stdcall quotearg_char(char * arg)\n'
p436
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p437
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00404530\n'
p438
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p439
S'.text:00000000004045a0\n.text:00000000004045a2\n.text:00000000004045a9\n.text:00000000004045ab\n'
p440
tp441
sS'fopen'
p442
(S'\n__stdcall fopen(char * __filename, char * __modes)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fopen(char *__filename,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fopen_006091c8)();\u000a  return pFVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x006091c8]\n'
p445
S'ff 25 c2 79 20 00\n'
p446
S'.plt:0000000000401800\n'
p447
tp448
sS'malloc'
p449
(S'\n__stdcall malloc(size_t __size)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00609158)();\u000a  return pvVar1;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x00609158]\n'
p452
S'ff 25 32 7a 20 00\n'
p453
S'.plt:0000000000401720\n'
p454
tp455
sS'c_tolower'
p456
(S'\n__stdcall c_tolower()\n'
p457
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p458
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p459
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p460
S'.text:0000000000405510\n.text:0000000000405513\n.text:0000000000405516\n.text:0000000000405519\n.text:000000000040551c\n'
p461
tp462
sS'print_kth'
p463
(S'\n__stdcall print_kth(size_t k)\n'
p464
V\u000a_Bool print_kth(size_t k)\u000a\u000a{\u000a  return (_Bool)(current_rp->lo < k || current_rp->lo == k);\u000a}\u000a\u000a
p465
S'MOV RAX,qword ptr [0x00609310]\nCMP qword ptr [RAX],RDI\nSETBE AL\nRET\n'
p466
S'48 8b 05 49 6c 20 00\n48 39 38\n0f 96 c0\nc3\n'
p467
S'.text:00000000004026c0\n.text:00000000004026c7\n.text:00000000004026ca\n.text:00000000004026cd\n'
p468
tp469
sS'rpl_fseeko'
p470
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p471
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_006091c0)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p472
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00405398\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00405398\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x004053aa\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004017f0\nMOV RDI,RBX\nCALL 0x00401710\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401600\nCMP RAX,-0x1\nJZ 0x004053d3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x004053d8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p473
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 46 c4 ff ff\n48 89 df\ne8 5e c3 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 41 c2 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p474
S'.text:0000000000405370\n.text:0000000000405371\n.text:0000000000405373\n.text:0000000000405374\n.text:0000000000405377\n.text:000000000040537a\n.text:000000000040537d\n.text:0000000000405381\n.text:0000000000405385\n.text:0000000000405387\n.text:000000000040538b\n.text:000000000040538f\n.text:0000000000405391\n.text:0000000000405396\n.text:0000000000405398\n.text:000000000040539b\n.text:000000000040539e\n.text:00000000004053a1\n.text:00000000004053a2\n.text:00000000004053a4\n.text:00000000004053a5\n.text:00000000004053aa\n.text:00000000004053ad\n.text:00000000004053b2\n.text:00000000004053b4\n.text:00000000004053b7\n.text:00000000004053ba\n.text:00000000004053bf\n.text:00000000004053c3\n.text:00000000004053c5\n.text:00000000004053c8\n.text:00000000004053cf\n.text:00000000004053d1\n.text:00000000004053d3\n.text:00000000004053d8\n.text:00000000004053d9\n.text:00000000004053db\n.text:00000000004053dc\n'
p475
tp476
sS'getopt_long'
p477
(S'\n__stdcall getopt_long()\n'
p478
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_006090b0)();\u000a  return;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x006090b0]\n'
p480
S'ff 25 da 7a 20 00\n'
p481
S'.plt:00000000004015d0\n'
p482
tp483
sS'is_range_start_index'
p484
(S'\n__stdcall is_range_start_index(size_t k)\n'
p485
V\u000a_Bool is_range_start_index(size_t k)\u000a\u000a{\u000a  return (_Bool)(current_rp->lo == k);\u000a}\u000a\u000a
p486
S'MOV RAX,qword ptr [0x00609310]\nCMP qword ptr [RAX],RDI\nSETZ AL\nRET\n'
p487
S'48 8b 05 39 6c 20 00\n48 39 38\n0f 94 c0\nc3\n'
p488
S'.text:00000000004026d0\n.text:00000000004026d7\n.text:00000000004026da\n.text:00000000004026dd\n'
p489
tp490
sS'quote_n_mem'
p491
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p492
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p493
S'MOV ECX,0x609250\nJMP 0x00404220\n'
p494
S'b9 50 92 60 00\ne9 36 fb ff ff\n'
p495
S'.text:00000000004046e0\n.text:00000000004046e5\n'
p496
tp497
sS'xstrdup'
p498
(S'\n__stdcall xstrdup(char * string)\n'
p499
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p500
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004015c0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00405180\n'
p501
S'53\n48 89 fb\ne8 07 c4 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p502
S'.text:00000000004051b0\n.text:00000000004051b1\n.text:00000000004051b4\n.text:00000000004051b9\n.text:00000000004051bd\n.text:00000000004051c0\n.text:00000000004051c1\n'
p503
tp504
sS'c_ispunct'
p505
(S'\n__stdcall c_ispunct()\n'
p506
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p507
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x004054b2\nMOV AL,0x1\nJMP qword ptr [0x407230 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p508
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 30 72 40 00\nc3\n31 c0\nc3\n'
p509
S'.text:00000000004054a0\n.text:00000000004054a3\n.text:00000000004054a6\n.text:00000000004054a8\n.text:00000000004054aa\n.text:00000000004054b1\n.text:00000000004054b2\n.text:00000000004054b4\n'
p510
tp511
sS'quotearg_style'
p512
(S'\n__stdcall quotearg_style(char * arg)\n'
p513
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p514
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00404410\n'
p515
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p516
S'.text:00000000004044f0\n.text:00000000004044f3\n.text:00000000004044f5\n.text:00000000004044f7\n.text:00000000004044f9\n.text:00000000004044fc\n'
p517
tp518
sS'__strndup'
p519
(S'\n__stdcall __strndup()\n'
p520
V\u000avoid __strndup(void)\u000a\u000a{\u000a  (*(code *)PTR___strndup_00609138)();\u000a  return;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x00609138]\n'
p522
S'ff 25 52 7a 20 00\n'
p523
S'.plt:00000000004016e0\n'
p524
tp525
sS'xstrndup'
p526
(S'\n__stdcall xstrndup(char * string, size_t n)\n'
p527
V\u000achar * xstrndup(char *string,size_t n)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)__strndup();\u000a  if (pcVar1 != (char *)0x0) {\u000a    return pcVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p528
S'PUSH RAX\nCALL 0x004016e0\nTEST RAX,RAX\nJZ 0x0040520d\nPOP RCX\nRET\nCALL 0x004051d0\n'
p529
S'50\ne8 da c4 ff ff\n48 85 c0\n74 02\n59\nc3\ne8 be ff ff ff\n'
p530
S'.text:0000000000405200\n.text:0000000000405201\n.text:0000000000405206\n.text:0000000000405209\n.text:000000000040520b\n.text:000000000040520c\n.text:000000000040520d\n'
p531
tp532
sS'freadptr'
p533
(S'\n__stdcall freadptr(FILE * fp, size_t * sizep)\n'
p534
V\u000achar * freadptr(FILE *fp,size_t *sizep)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  if (fp->_IO_write_base <= fp->_IO_write_ptr && fp->_IO_write_ptr != fp->_IO_write_base) {\u000a    return (char *)0x0;\u000a  }\u000a  pcVar1 = fp->_IO_read_ptr;\u000a  if (fp->_IO_read_end + -(long)pcVar1 != (char *)0x0) {\u000a    *(char **)sizep = fp->_IO_read_end + -(long)pcVar1;\u000a    return pcVar1;\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p535
S'MOV RAX,qword ptr [RDI + 0x28]\nCMP RAX,qword ptr [RDI + 0x20]\nJBE 0x0040534d\nXOR EAX,EAX\nRET\nMOV RAX,qword ptr [RDI + 0x8]\nMOV RCX,qword ptr [RDI + 0x10]\nSUB RCX,RAX\nJZ 0x0040535e\nMOV qword ptr [RSI],RCX\nRET\nXOR EAX,EAX\nRET\n'
p536
S'48 8b 47 28\n48 3b 47 20\n76 03\n31 c0\nc3\n48 8b 47 08\n48 8b 4f 10\n48 29 c1\n74 04\n48 89 0e\nc3\n31 c0\nc3\n'
p537
S'.text:0000000000405340\n.text:0000000000405344\n.text:0000000000405348\n.text:000000000040534a\n.text:000000000040534c\n.text:000000000040534d\n.text:0000000000405351\n.text:0000000000405355\n.text:0000000000405358\n.text:000000000040535a\n.text:000000000040535d\n.text:000000000040535e\n.text:0000000000405360\n'
p538
tp539
sS'fscanf'
p540
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006090e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x006090e0]\n'
p543
S'ff 25 aa 7a 20 00\n'
p544
S'.plt:0000000000401630\n'
p545
tp546
sS'emit_try_help'
p547
(S'\n__stdcall emit_try_help()\n'
p548
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p549
S'PUSH RBX\nMOV RBX,qword ptr [0x006092e0]\nXOR EDI,EDI\nMOV ESI,0x40651f\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x00609348]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401840\n'
p550
S'53\n48 8b 1d a8 77 20 00\n31 ff\nbe 1f 65 40 00\nba 05 00 00 00\ne8 57 fa ff ff\n48 89 c2\n48 8b 0d f5 77 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 dd fc ff ff\n'
p551
S'.text:0000000000401b30\n.text:0000000000401b31\n.text:0000000000401b38\n.text:0000000000401b3a\n.text:0000000000401b3f\n.text:0000000000401b44\n.text:0000000000401b49\n.text:0000000000401b4c\n.text:0000000000401b53\n.text:0000000000401b58\n.text:0000000000401b5a\n.text:0000000000401b5d\n.text:0000000000401b5e\n'
p552
tp553
sS'memcpy'
p554
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p555
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00609140)();\u000a  return pvVar1;\u000a}\u000a\u000a
p556
S'JMP qword ptr [0x00609140]\n'
p557
S'ff 25 4a 7a 20 00\n'
p558
S'.plt:00000000004016f0\n'
p559
tp560
sS'strrchr'
p561
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p562
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006090c0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x006090c0]\n'
p564
S'ff 25 ca 7a 20 00\n'
p565
S'.plt:00000000004015f0\n'
p566
tp567
sS'close_stdout_set_ignore_EPIPE'
p568
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p569
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p570
S'MOV byte ptr [0x00609340],DIL\nRET\n'
p571
S'40 88 3d 29 66 20 00\nc3\n'
p572
S'.text:0000000000402d10\n.text:0000000000402d17\n'
p573
tp574
sS'quotearg_alloc_mem'
p575
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p576
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p577
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x609350\nCMOVNZ R12,RCX\nCALL 0x004014d0\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403440\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00405110\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403440\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040416a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p578
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 50 93 60 00\n4c 0f 45 e1\ne8 08 d4 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 f1 0f 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p579
S'.text:0000000000404090\n.text:0000000000404091\n.text:0000000000404093\n.text:0000000000404095\n.text:0000000000404097\n.text:0000000000404099\n.text:000000000040409a\n.text:000000000040409e\n.text:00000000004040a1\n.text:00000000004040a6\n.text:00000000004040a9\n.text:00000000004040ae\n.text:00000000004040b1\n.text:00000000004040b6\n.text:00000000004040b9\n.text:00000000004040bf\n.text:00000000004040c3\n.text:00000000004040c8\n.text:00000000004040cd\n.text:00000000004040cf\n.text:00000000004040d3\n.text:00000000004040d5\n.text:00000000004040d8\n.text:00000000004040dc\n.text:00000000004040e1\n.text:00000000004040e5\n.text:00000000004040ea\n.text:00000000004040ee\n.text:00000000004040f0\n.text:00000000004040f2\n.text:00000000004040f5\n.text:00000000004040f8\n.text:00000000004040fb\n.text:0000000000404100\n.text:0000000000404105\n.text:0000000000404107\n.text:000000000040410c\n.text:0000000000404110\n.text:0000000000404113\n.text:0000000000404117\n.text:000000000040411a\n.text:000000000040411f\n.text:0000000000404122\n.text:0000000000404126\n.text:000000000040412a\n.text:000000000040412d\n.text:0000000000404130\n.text:0000000000404135\n.text:000000000040413a\n.text:000000000040413d\n.text:0000000000404142\n.text:0000000000404147\n.text:0000000000404149\n.text:000000000040414e\n.text:0000000000404153\n.text:0000000000404157\n.text:000000000040415a\n.text:000000000040415e\n.text:0000000000404163\n.text:0000000000404165\n.text:0000000000404167\n.text:000000000040416a\n.text:000000000040416d\n.text:0000000000404171\n.text:0000000000404172\n.text:0000000000404174\n.text:0000000000404176\n.text:0000000000404178\n.text:000000000040417a\n.text:000000000040417b\n'
p580
tp581
sS'iswprint'
p582
(S'\n__stdcall iswprint(wint_t __wc)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_006091f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x006091f8]\n'
p585
S'ff 25 92 79 20 00\n'
p586
S'.plt:0000000000401860\n'
p587
tp588
sS'reset_fields'
p589
(S'\n__stdcall reset_fields()\n'
p590
V\u000aundefined8 reset_fields(void)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  \u000a  n_frp = 0;\u000a  n_frp_allocated = 0;\u000a  free(frp);\u000a  frp = (field_range_pair *)0x0;\u000a  return in_RAX;\u000a}\u000a\u000a
p591
S'PUSH RAX\nMOV qword ptr [0x006094a0],0x0\nMOV qword ptr [0x00609330],0x0\nMOV RDI,qword ptr [0x00609498]\nCALL 0x004014b0\nMOV qword ptr [0x00609498],0x0\nPOP RAX\nRET\n'
p592
S'50\n48 c7 05 c4 67 20 00 00 00 00 00\n48 c7 05 49 66 20 00 00 00 00 00\n48 8b 3d aa 67 20 00\ne8 bd e7 ff ff\n48 c7 05 9a 67 20 00 00 00 00 00\n58\nc3\n'
p593
S'.text:0000000000402cd0\n.text:0000000000402cd1\n.text:0000000000402cdc\n.text:0000000000402ce7\n.text:0000000000402cee\n.text:0000000000402cf3\n.text:0000000000402cfe\n.text:0000000000402cff\n'
p594
tp595
sS'complement_rp'
p596
(S'\n__stdcall complement_rp()\n'
p597
V\u000avoid complement_rp(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  field_range_pair *pfVar2;\u000a  field_range_pair *__ptr;\u000a  size_t sVar3;\u000a  size_t lo;\u000a  long lVar4;\u000a  \u000a  sVar3 = n_frp;\u000a  __ptr = frp;\u000a  frp = (field_range_pair *)0x0;\u000a  n_frp = 0;\u000a  n_frp_allocated = 0;\u000a  if (1 < __ptr->lo) {\u000a    add_range_pair(1,__ptr->lo - 1);\u000a  }\u000a  if (1 < sVar3) {\u000a    lVar4 = sVar3 - 1;\u000a    pfVar2 = __ptr;\u000a    do {\u000a      sVar1 = pfVar2[1].lo;\u000a      lo = pfVar2->hi + 1;\u000a      if (lo != sVar1) {\u000a        add_range_pair(lo,sVar1 - 1);\u000a      }\u000a      lVar4 = lVar4 + -1;\u000a      pfVar2 = pfVar2 + 1;\u000a    } while (lVar4 != 0);\u000a  }\u000a  if (__ptr[sVar3 - 1].hi != 0xffffffffffffffff) {\u000a    add_range_pair(__ptr[sVar3 - 1].hi + 1,0xffffffffffffffff);\u000a  }\u000a  free(__ptr);\u000a  return;\u000a}\u000a\u000a
p598
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,qword ptr [0x00609498]\nMOV R15,qword ptr [0x006094a0]\nMOV qword ptr [0x00609498],0x0\nMOV qword ptr [0x006094a0],0x0\nMOV qword ptr [0x00609330],0x0\nMOV RSI,qword ptr [R14]\nCMP RSI,0x2\nJC 0x00402c5d\nDEC RSI\nMOV EDI,0x1\nCALL 0x00402b70\nCMP R15,0x2\nJC 0x00402c90\nLEA R12,[R15 + -0x1]\nLEA RBX,[R14 + 0x10]\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX + -0x8]\nMOV RSI,qword ptr [RBX]\nINC RDI\nCMP RDI,RSI\nJZ 0x00402c87\nDEC RSI\nCALL 0x00402b70\nADD RBX,0x10\nDEC R12\nJNZ 0x00402c70\nSHL R15,0x4\nMOV RDI,qword ptr [R14 + R15*0x1 + -0x8]\nCMP RDI,-0x1\nJZ 0x00402cae\nINC RDI\nMOV RSI,-0x1\nCALL 0x00402b70\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004014b0\n'
p599
S'41 57\n41 56\n41 54\n53\n50\n4c 8b 35 79 68 20 00\n4c 8b 3d 7a 68 20 00\n48 c7 05 67 68 20 00 00 00 00 00\n48 c7 05 64 68 20 00 00 00 00 00\n48 c7 05 e9 66 20 00 00 00 00 00\n49 8b 36\n48 83 fe 02\n72 0d\n48 ff ce\nbf 01 00 00 00\ne8 13 ff ff ff\n49 83 ff 02\n72 2d\n4d 8d 67 ff\n49 8d 5e 10\n0f 1f 44 00 00\n48 8b 7b f8\n48 8b 33\n48 ff c7\n48 39 f7\n74 08\n48 ff ce\ne8 e9 fe ff ff\n48 83 c3 10\n49 ff cc\n75 e0\n49 c1 e7 04\n4b 8b 7c 3e f8\n48 83 ff ff\n74 0f\n48 ff c7\n48 c7 c6 ff ff ff ff\ne8 c2 fe ff ff\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 ef e7 ff ff\n'
p600
S'.text:0000000000402c10\n.text:0000000000402c12\n.text:0000000000402c14\n.text:0000000000402c16\n.text:0000000000402c17\n.text:0000000000402c18\n.text:0000000000402c1f\n.text:0000000000402c26\n.text:0000000000402c31\n.text:0000000000402c3c\n.text:0000000000402c47\n.text:0000000000402c4a\n.text:0000000000402c4e\n.text:0000000000402c50\n.text:0000000000402c53\n.text:0000000000402c58\n.text:0000000000402c5d\n.text:0000000000402c61\n.text:0000000000402c63\n.text:0000000000402c67\n.text:0000000000402c6b\n.text:0000000000402c70\n.text:0000000000402c74\n.text:0000000000402c77\n.text:0000000000402c7a\n.text:0000000000402c7d\n.text:0000000000402c7f\n.text:0000000000402c82\n.text:0000000000402c87\n.text:0000000000402c8b\n.text:0000000000402c8e\n.text:0000000000402c90\n.text:0000000000402c94\n.text:0000000000402c99\n.text:0000000000402c9d\n.text:0000000000402c9f\n.text:0000000000402ca2\n.text:0000000000402ca9\n.text:0000000000402cae\n.text:0000000000402cb1\n.text:0000000000402cb5\n.text:0000000000402cb6\n.text:0000000000402cb8\n.text:0000000000402cba\n.text:0000000000402cbc\n'
p601
tp602
sS'quotearg_style_mem'
p603
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p604
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p605
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004044b0\n'
p606
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p607
S'.text:0000000000404510\n.text:0000000000404513\n.text:0000000000404516\n.text:0000000000404518\n.text:000000000040451a\n.text:000000000040451c\n.text:000000000040451f\n.text:0000000000404522\n'
p608
tp609
sS'xalloc_die'
p610
(S'\n__stdcall xalloc_die()\n'
p611
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x40691d,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p612
S'PUSH RBX\nMOV EBX,dword ptr [0x00609228]\nXOR EDI,EDI\nMOV ESI,0x40721f\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40691d\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004017d0\nCALL 0x004014c0\n'
p613
S'53\n8b 1d 51 40 20 00\n31 ff\nbe 1f 72 40 00\nba 05 00 00 00\ne8 b8 c3 ff ff\n48 89 c1\n31 f6\nba 1d 69 40 00\n31 c0\n89 df\ne8 d5 c5 ff ff\ne8 c0 c2 ff ff\n'
p614
S'.text:00000000004051d0\n.text:00000000004051d1\n.text:00000000004051d7\n.text:00000000004051d9\n.text:00000000004051de\n.text:00000000004051e3\n.text:00000000004051e8\n.text:00000000004051eb\n.text:00000000004051ed\n.text:00000000004051f2\n.text:00000000004051f4\n.text:00000000004051f6\n.text:00000000004051fb\n'
p615
tp616
sS'c_isspace'
p617
(S'\n__stdcall c_isspace()\n'
p618
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p619
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x004054d5\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p620
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p621
S'.text:00000000004054c0\n.text:00000000004054c3\n.text:00000000004054c6\n.text:00000000004054c8\n.text:00000000004054cd\n.text:00000000004054cf\n.text:00000000004054d1\n.text:00000000004054d4\n.text:00000000004054d5\n.text:00000000004054d7\n'
p622
tp623
sS'cut_fields'
p624
(S'\n__stdcall cut_fields(FILE * stream)\n'
p625
V\u000avoid cut_fields(FILE *stream)\u000a\u000a{\u000a  bool bVar1;\u000a  byte bVar2;\u000a  char *__ptr;\u000a  _Bool _Var3;\u000a  uchar uVar4;\u000a  _Bool _Var5;\u000a  int __c;\u000a  uint __c_00;\u000a  uint uVar6;\u000a  size_t __n;\u000a  uint __c_01;\u000a  uint __c_02;\u000a  uint uVar7;\u000a  uint uVar8;\u000a  bool bVar9;\u000a  bool bVar10;\u000a  size_t local_38;\u000a  \u000a  local_38 = 1;\u000a  current_rp = frp;\u000a  __c = getc_unlocked((FILE *)stream);\u000a  if (__c == -1) {\u000a    return;\u000a  }\u000a  ungetc(__c,(FILE *)stream);\u000a  bVar2 = suppress_non_delimited;\u000a  _Var3 = print_kth(1);\u000a  uVar7 = 0;\u000a  bVar1 = false;\u000a  __c_00 = 0;\u000aLAB_004023ba:\u000a  do {\u000a    __c_01 = __c_00;\u000a    uVar8 = 0;\u000a    if ((local_38 != 1 | (_Var3 ^ bVar2) & 1) == 0) {\u000a      bVar10 = local_38 != 1;\u000a      do {\u000a        __n = getndelim2(&field_1_buffer,&field_1_bufsize,0,0xffffffffffffffff,(FILE *)(ulong)delim)\u000a        ;\u000a        __ptr = field_1_buffer;\u000a        if ((long)__n < 0) {\u000a          free(field_1_buffer);\u000a          field_1_buffer = (char *)0x0;\u000a          __c = ferror_unlocked((FILE *)stream);\u000a          if (__c != 0) {\u000a            return;\u000a          }\u000a          __c = feof_unlocked((FILE *)stream);\u000a          if (__c != 0) {\u000a            return;\u000a          }\u000a                    /* WARNING: Subroutine does not return */\u000a          xalloc_die();\u000a        }\u000a        if (__n == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("n_bytes != 0","src/cut.c",0x149,"void cut_fields(FILE *)");\u000a        }\u000a        uVar4 = to_uchar();\u000a        if (uVar4 == delim) {\u000a          _Var5 = print_kth(1);\u000a          if (_Var5 != false) {\u000a            fwrite_unlocked(__ptr,1,__n - 1,stdout);\u000a            __c_00 = 10;\u000a            if (line_delim != 0) {\u000a              __c_00 = uVar7;\u000a            }\u000a            if ((uint)delim == __c_00) {\u000a              __c = getc_unlocked((FILE *)stream);\u000a              if (__c == -1) goto LAB_0040251d;\u000a              ungetc(__c,(FILE *)stream);\u000a            }\u000a            bVar1 = true;\u000a          }\u000aLAB_0040251d:\u000a          next_item(&local_38);\u000a          __c_01 = 0;\u000a          break;\u000a        }\u000a        __c_01 = 0;\u000a        if (suppress_non_delimited != 1) {\u000a          fwrite_unlocked(__ptr,1,__n,stdout);\u000a          __c_00 = 10;\u000a          if (line_delim != 0) {\u000a            __c_00 = uVar8;\u000a          }\u000a          if ((int)field_1_buffer[__n - 1] != __c_00) {\u000a            putchar_unlocked(__c_00);\u000a          }\u000a          __c_01 = 10;\u000a          if (line_delim != 0) {\u000a            __c_01 = uVar8;\u000a          }\u000a        }\u000a      } while ((bVar10 | (_Var3 ^ bVar2) & 1) == 0);\u000a    }\u000a    _Var5 = print_kth(local_38);\u000a    __c_02 = __c_01;\u000a    if (_Var5 == false) {\u000a      while (__c_00 = getc_unlocked((FILE *)stream), __c_01 = __c_02, __c_00 != (uint)delim) {\u000a        uVar6 = 10;\u000a        if (line_delim != 0) {\u000a          uVar6 = uVar7;\u000a        }\u000a        __c_01 = __c_02;\u000a        if ((__c_00 == 0xffffffff) || (__c_01 = __c_02, __c_02 = __c_00, __c_00 == uVar6)) break;\u000a      }\u000a    }\u000a    else {\u000a      if (bVar1) {\u000a        fwrite_unlocked(output_delimiter_string,1,output_delimiter_length,stdout);\u000a      }\u000a      __c_00 = getc_unlocked((FILE *)stream);\u000a      bVar1 = true;\u000a      __c_02 = __c_00;\u000a      if (__c_00 != (uint)delim) {\u000a        do {\u000a          uVar6 = 10;\u000a          if (line_delim != 0) {\u000a            uVar6 = uVar7;\u000a          }\u000a          __c_00 = __c_02;\u000a          if ((__c_02 == 0xffffffff) || (__c_00 = __c_02, __c_02 == uVar6)) break;\u000a          putchar_unlocked(__c_02);\u000a          __c_00 = getc_unlocked((FILE *)stream);\u000a          __c_01 = __c_02;\u000a          __c_02 = __c_00;\u000a        } while (__c_00 != (uint)delim);\u000a      }\u000a    }\u000a    __c_02 = 10;\u000a    if (line_delim != 0) {\u000a      __c_02 = uVar7;\u000a    }\u000a    if ((__c_00 == (uint)delim) && ((uint)delim == __c_02)) {\u000a      __c = getc_unlocked((FILE *)stream);\u000a      if (__c != -1) {\u000a        ungetc(__c,(FILE *)stream);\u000a        goto LAB_004022d8;\u000a      }\u000a      bVar10 = false;\u000a      __c_02 = 10;\u000a      if (line_delim != 0) {\u000a        __c_02 = 0;\u000a      }\u000a      __c_00 = 0xffffffff;\u000a      bVar9 = true;\u000aLAB_0040232d:\u000a      if (((bVar1) || ((suppress_non_delimited != 1 || (local_38 != 1)))) &&\u000a         ((__c_01 != __c_02 || ((bVar10 || ((uint)delim == __c_02)))))) {\u000a        __c_01 = 10;\u000a        if (line_delim != 0) {\u000a          __c_01 = uVar8;\u000a        }\u000a        putchar_unlocked(__c_01);\u000a      }\u000a      if (bVar9) {\u000a        return;\u000a      }\u000a      local_38 = 1;\u000a      current_rp = frp;\u000a      bVar1 = false;\u000a      goto LAB_004023ba;\u000a    }\u000aLAB_004022d8:\u000a    if (__c_00 == (uint)delim) {\u000a      next_item(&local_38);\u000a    }\u000a    else {\u000a      __c_02 = 10;\u000a      if (line_delim != 0) {\u000a        __c_02 = uVar7;\u000a      }\u000a      bVar10 = __c_00 == __c_02;\u000a      bVar9 = __c_00 == 0xffffffff;\u000a      if ((bVar9) || (__c_00 == __c_02)) goto LAB_0040232d;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p626
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,RDI\nMOV qword ptr [RSP + 0x10],0x1\nMOV RAX,qword ptr [0x00609498]\nMOV qword ptr [0x00609310],RAX\nCALL 0x00401530\nCMP EAX,-0x1\nJZ 0x00402656\nMOV EDI,EAX\nMOV RSI,R12\nCALL 0x00401750\nMOV BL,byte ptr [0x006092f4]\nMOV EDI,0x1\nCALL 0x004026c0\nMOV R15D,EAX\nXOR R15B,BL\nXOR R14D,R14D\nMOV dword ptr [RSP + 0xc],0x0\nXOR R13D,R13D\nMOV byte ptr [RSP + 0xb],R15B\nJMP 0x004023ba\nMOV EBP,EBX\nMOV R13D,EAX\nJMP 0x004022a0\nMOV EBP,R13D\nMOV R13D,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX EAX,byte ptr [0x006092f5]\nMOV CL,byte ptr [0x00609308]\nTEST CL,CL\nMOV ECX,0xa\nCMOVNZ ECX,R14D\nCMP R13D,EAX\nJNZ 0x004022d8\nCMP EAX,ECX\nJNZ 0x004022d8\nMOV RDI,R12\nCALL 0x00401530\nCMP EAX,-0x1\nJZ 0x00402313\nMOV EDI,EAX\nMOV RSI,R12\nCALL 0x00401750\nMOVZX EAX,byte ptr [0x006092f5]\nCMP R13D,EAX\nJZ 0x004023b0\nMOV AL,byte ptr [0x00609308]\nTEST AL,AL\nMOV EAX,0xa\nCMOVNZ EAX,R14D\nCMP R13D,EAX\nSETZ CL\nCMP R13D,-0x1\nSETZ BL\nJZ 0x0040232d\nCMP R13D,EAX\nJNZ 0x004023ba\nJMP 0x0040232d\nMOV AL,byte ptr [0x00609308]\nXOR ECX,ECX\nTEST AL,AL\nMOV EAX,0xa\nCMOVNZ EAX,ECX\nMOV R13D,0xffffffff\nMOV BL,0x1\nTEST byte ptr [RSP + 0xc],0x1\nJNZ 0x00402350\nCMP byte ptr [0x006092f4],0x1\nJNZ 0x00402350\nCMP qword ptr [RSP + 0x10],0x1\nJZ 0x0040237a\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP EBP,EAX\nJNZ 0x00402364\nXOR CL,0x1\nJZ 0x00402364\nMOVZX ECX,byte ptr [0x006092f5]\nCMP ECX,EAX\nJNZ 0x0040237a\nMOV AL,byte ptr [0x00609308]\nTEST AL,AL\nMOV EDI,0xa\nCMOVNZ EDI,R14D\nCALL 0x00401700\nTEST BL,BL\nJNZ 0x00402656\nMOV qword ptr [RSP + 0x10],0x1\nMOV RAX,qword ptr [0x00609498]\nMOV qword ptr [0x00609310],RAX\nMOV dword ptr [RSP + 0xc],0x0\nJMP 0x004023ba\nLEA RDI,[RSP + 0x10]\nCALL 0x00402690\nCMP qword ptr [RSP + 0x10],0x1\nSETNZ AL\nOR AL,R15B\nTEST AL,0x1\nJNZ 0x0040252a\nCMP qword ptr [RSP + 0x10],0x1\nMOV EAX,R15D\nSETNZ R15B\nOR R15B,AL\nNOP\nMOVZX R8D,byte ptr [0x006092f5]\nMOVZX EAX,byte ptr [0x00609308]\nTEST AL,AL\nMOV R9D,0xa\nCMOVNZ R9D,R14D\nMOV qword ptr [RSP],R12\nMOV EDI,0x609318\nMOV ESI,0x609320\nXOR EDX,EDX\nMOV RCX,-0x1\nCALL 0x00402e10\nMOV RBX,RAX\nTEST RBX,RBX\nJS 0x00402627\nJZ 0x00402665\nMOV RBP,qword ptr [0x00609318]\nMOVSX EDI,byte ptr [RBP + RBX*0x1 + -0x1]\nCALL 0x004026e0\nCMP AL,byte ptr [0x006092f5]\nJZ 0x004024b0\nXOR R13D,R13D\nCMP byte ptr [0x006092f4],0x1\nJZ 0x0040249f\nMOV RCX,qword ptr [0x006092a8]\nMOV ESI,0x1\nMOV RDI,RBP\nMOV RDX,RBX\nCALL 0x00401770\nMOV RAX,qword ptr [0x00609318]\nMOVSX EAX,byte ptr [RAX + RBX*0x1 + -0x1]\nMOVZX ECX,byte ptr [0x00609308]\nTEST CL,CL\nMOV EDI,0xa\nCMOVNZ EDI,R14D\nCMP EAX,EDI\nJZ 0x0040248c\nCALL 0x00401700\nMOVZX EAX,byte ptr [0x00609308]\nTEST AL,AL\nMOV R13D,0xa\nCMOVNZ R13D,R14D\nTEST R15B,0x1\nJZ 0x004023e0\nMOV R15B,byte ptr [RSP + 0xb]\nJMP 0x0040252a\nMOV EDI,0x1\nCALL 0x004026c0\nTEST AL,AL\nJZ 0x00402518\nDEC RBX\nMOV RCX,qword ptr [0x006092a8]\nMOV ESI,0x1\nMOV RDI,RBP\nMOV RDX,RBX\nCALL 0x00401770\nMOVZX EAX,byte ptr [0x006092f5]\nMOV CL,byte ptr [0x00609308]\nTEST CL,CL\nMOV ECX,0xa\nCMOVNZ ECX,R14D\nCMP EAX,ECX\nMOV R15B,byte ptr [RSP + 0xb]\nJNZ 0x00402510\nMOV RDI,R12\nCALL 0x00401530\nCMP EAX,-0x1\nJZ 0x0040251d\nMOV EDI,EAX\nMOV RSI,R12\nCALL 0x00401750\nMOV AL,0x1\nMOV dword ptr [RSP + 0xc],EAX\nJMP 0x0040251d\nMOV R15B,byte ptr [RSP + 0xb]\nLEA RDI,[RSP + 0x10]\nCALL 0x00402690\nXOR R13D,R13D\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x004026c0\nTEST AL,AL\nJZ 0x00402590\nTEST byte ptr [RSP + 0xc],0x1\nJZ 0x0040255e\nMOV RDI,qword ptr [0x00609300]\nMOV RDX,qword ptr [0x006092f8]\nMOV RCX,qword ptr [0x006092a8]\nMOV ESI,0x1\nCALL 0x00401770\nMOV RDI,R12\nCALL 0x00401530\nMOVZX ECX,byte ptr [0x006092f5]\nMOV DL,0x1\nMOV dword ptr [RSP + 0xc],EDX\nCMP EAX,ECX\nJNZ 0x004025e0\nMOV EBP,R13D\nMOV R13D,EAX\nJMP 0x004022a0\nMOV EBP,R13D\nMOV RDI,R12\nCALL 0x00401530\nMOV R13D,EAX\nMOVZX EAX,byte ptr [0x006092f5]\nCMP R13D,EAX\nJZ 0x004022a0\nMOVZX EAX,byte ptr [0x00609308]\nTEST AL,AL\nMOV EAX,0xa\nCMOVNZ EAX,R14D\nCMP R13D,-0x1\nJZ 0x004022a0\nCMP R13D,EAX\nJNZ 0x00402590\nJMP 0x004022a0\nMOV EBX,EAX\nMOVZX EAX,byte ptr [0x00609308]\nTEST AL,AL\nMOV EAX,0xa\nCMOVNZ EAX,R14D\nCMP EBX,-0x1\nJZ 0x00402295\nCMP EBX,EAX\nJZ 0x00402295\nMOV EDI,EBX\nCALL 0x00401700\nMOV RDI,R12\nCALL 0x00401530\nMOVZX ECX,byte ptr [0x006092f5]\nCMP EAX,ECX\nMOV R13D,EBX\nJNZ 0x004025e0\nJMP 0x0040228e\nMOV RDI,qword ptr [0x00609318]\nCALL 0x004014b0\nMOV qword ptr [0x00609318],0x0\nMOV RDI,R12\nCALL 0x004016b0\nTEST EAX,EAX\nJNZ 0x00402656\nMOV RDI,R12\nCALL 0x00401870\nTEST EAX,EAX\nJZ 0x0040267e\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40675a\nMOV ESI,0x406767\nMOV EDX,0x149\nMOV ECX,0x406771\nCALL 0x00401610\nCALL 0x004051d0\n'
p627
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 fc\n48 c7 44 24 10 01 00 00 00\n48 8b 05 57 72 20 00\n48 89 05 c8 70 20 00\ne8 e3 f2 ff ff\n83 f8 ff\n0f 84 00 04 00 00\n89 c7\n4c 89 e6\ne8 f0 f4 ff ff\n8a 1d 8e 70 20 00\nbf 01 00 00 00\ne8 50 04 00 00\n41 89 c7\n41 30 df\n45 31 f6\nc7 44 24 0c 00 00 00 00\n45 31 ed\n44 88 7c 24 0b\ne9 2c 01 00 00\n89 dd\n41 89 c5\neb 0b\n44 89 ed\n41 89 dd\n0f 1f 44 00 00\n0f b6 05 4e 70 20 00\n8a 0d 5b 70 20 00\n84 c9\nb9 0a 00 00 00\n41 0f 45 ce\n41 39 c5\n75 1b\n39 c8\n75 17\n4c 89 e7\ne8 67 f2 ff ff\n83 f8 ff\n74 45\n89 c7\n4c 89 e6\ne8 78 f4 ff ff\n0f b6 05 16 70 20 00\n41 39 c5\n0f 84 c8 00 00 00\n8a 05 1a 70 20 00\n84 c0\nb8 0a 00 00 00\n41 0f 45 c6\n41 39 c5\n0f 94 c1\n41 83 fd ff\n0f 94 c3\n74 25\n41 39 c5\n0f 85 a9 00 00 00\neb 1a\n8a 05 ef 6f 20 00\n31 c9\n84 c0\nb8 0a 00 00 00\n0f 45 c1\n41 bd ff ff ff ff\nb3 01\nf6 44 24 0c 01\n75 1c\n80 3d b9 6f 20 00 01\n75 13\n48 83 7c 24 10 01\n74 35\n66 66 2e 0f 1f 84 00 00 00 00 00\n39 c5\n75 10\n80 f1 01\n74 0b\n0f b6 0d 95 6f 20 00\n39 c1\n75 16\n8a 05 9e 6f 20 00\n84 c0\nbf 0a 00 00 00\n41 0f 45 fe\ne8 86 f3 ff ff\n84 db\n0f 85 d4 02 00 00\n48 c7 44 24 10 01 00 00 00\n48 8b 05 06 71 20 00\n48 89 05 77 6f 20 00\nc7 44 24 0c 00 00 00 00\neb 17\n48 8d 7c 24 10\ne8 d6 02 00 00\n48 83 7c 24 10 01\n0f 95 c0\n44 08 f8\na8 01\n0f 85 5c 01 00 00\n48 83 7c 24 10 01\n44 89 f8\n41 0f 95 c7\n41 08 c7\n66 90\n44 0f b6 05 0d 6f 20 00\n0f b6 05 19 6f 20 00\n84 c0\n41 b9 0a 00 00 00\n45 0f 45 ce\n4c 89 24 24\nbf 18 93 60 00\nbe 20 93 60 00\n31 d2\n48 c7 c1 ff ff ff ff\ne8 f9 09 00 00\n48 89 c3\n48 85 db\n0f 88 04 02 00 00\n0f 84 3c 02 00 00\n48 8b 2d e8 6e 20 00\n0f be 7c 1d ff\ne8 a6 02 00 00\n3a 05 b5 6e 20 00\n74 6e\n45 31 ed\n80 3d a8 6e 20 00 01\n74 51\n48 8b 0d 53 6e 20 00\nbe 01 00 00 00\n48 89 ef\n48 89 da\ne8 0b f3 ff ff\n48 8b 05 ac 6e 20 00\n0f be 44 18 ff\n0f b6 0d 90 6e 20 00\n84 c9\nbf 0a 00 00 00\n41 0f 45 fe\n39 f8\n74 05\ne8 74 f2 ff ff\n0f b6 05 75 6e 20 00\n84 c0\n41 bd 0a 00 00 00\n45 0f 45 ee\n41 f6 c7 01\n0f 84 37 ff ff ff\n44 8a 7c 24 0b\neb 7a\nbf 01 00 00 00\ne8 06 02 00 00\n84 c0\n74 5a\n48 ff cb\n48 8b 0d e0 6d 20 00\nbe 01 00 00 00\n48 89 ef\n48 89 da\ne8 98 f2 ff ff\n0f b6 05 16 6e 20 00\n8a 0d 23 6e 20 00\n84 c9\nb9 0a 00 00 00\n41 0f 45 ce\n39 c8\n44 8a 7c 24 0b\n75 17\n4c 89 e7\ne8 2f f0 ff ff\n83 f8 ff\n74 17\n89 c7\n4c 89 e6\ne8 40 f2 ff ff\nb0 01\n89 44 24 0c\neb 05\n44 8a 7c 24 0b\n48 8d 7c 24 10\ne8 69 01 00 00\n45 31 ed\n48 8b 7c 24 10\ne8 8c 01 00 00\n84 c0\n74 58\nf6 44 24 0c 01\n74 1f\n48 8b 3d ba 6d 20 00\n48 8b 15 ab 6d 20 00\n48 8b 0d 54 6d 20 00\nbe 01 00 00 00\ne8 12 f2 ff ff\n4c 89 e7\ne8 ca ef ff ff\n0f b6 0d 88 6d 20 00\nb2 01\n89 54 24 0c\n39 c8\n75 69\n44 89 ed\n41 89 c5\ne9 1e fd ff ff\n44 89 ed\n4c 89 e7\ne8 95 ef ff ff\n41 89 c5\n0f b6 05 50 6d 20 00\n41 39 c5\n0f 84 f2 fc ff ff\n0f b6 05 53 6d 20 00\n84 c0\nb8 0a 00 00 00\n41 0f 45 c6\n41 83 fd ff\n0f 84 d6 fc ff ff\n41 39 c5\n75 c1\ne9 cc fc ff ff\n89 c3\n0f b6 05 1f 6d 20 00\n84 c0\nb8 0a 00 00 00\n41 0f 45 c6\n83 fb ff\n0f 84 98 fc ff ff\n39 c3\n0f 84 90 fc ff ff\n89 df\ne8 f4 f0 ff ff\n4c 89 e7\ne8 1c ef ff ff\n0f b6 0d da 6c 20 00\n39 c8\n41 89 dd\n75 be\ne9 67 fc ff ff\n48 8b 3d ea 6c 20 00\ne8 7d ee ff ff\n48 c7 05 da 6c 20 00 00 00 00 00\n4c 89 e7\ne8 6a f0 ff ff\n85 c0\n75 0c\n4c 89 e7\ne8 1e f2 ff ff\n85 c0\n74 28\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 5a 67 40 00\nbe 67 67 40 00\nba 49 01 00 00\nb9 71 67 40 00\ne8 92 ef ff ff\ne8 4d 2b 00 00\n'
p628
S'.text:0000000000402220\n.text:0000000000402221\n.text:0000000000402223\n.text:0000000000402225\n.text:0000000000402227\n.text:0000000000402229\n.text:000000000040222a\n.text:000000000040222e\n.text:0000000000402231\n.text:000000000040223a\n.text:0000000000402241\n.text:0000000000402248\n.text:000000000040224d\n.text:0000000000402250\n.text:0000000000402256\n.text:0000000000402258\n.text:000000000040225b\n.text:0000000000402260\n.text:0000000000402266\n.text:000000000040226b\n.text:0000000000402270\n.text:0000000000402273\n.text:0000000000402276\n.text:0000000000402279\n.text:0000000000402281\n.text:0000000000402284\n.text:0000000000402289\n.text:000000000040228e\n.text:0000000000402290\n.text:0000000000402293\n.text:0000000000402295\n.text:0000000000402298\n.text:000000000040229b\n.text:00000000004022a0\n.text:00000000004022a7\n.text:00000000004022ad\n.text:00000000004022af\n.text:00000000004022b4\n.text:00000000004022b8\n.text:00000000004022bb\n.text:00000000004022bd\n.text:00000000004022bf\n.text:00000000004022c1\n.text:00000000004022c4\n.text:00000000004022c9\n.text:00000000004022cc\n.text:00000000004022ce\n.text:00000000004022d0\n.text:00000000004022d3\n.text:00000000004022d8\n.text:00000000004022df\n.text:00000000004022e2\n.text:00000000004022e8\n.text:00000000004022ee\n.text:00000000004022f0\n.text:00000000004022f5\n.text:00000000004022f9\n.text:00000000004022fc\n.text:00000000004022ff\n.text:0000000000402303\n.text:0000000000402306\n.text:0000000000402308\n.text:000000000040230b\n.text:0000000000402311\n.text:0000000000402313\n.text:0000000000402319\n.text:000000000040231b\n.text:000000000040231d\n.text:0000000000402322\n.text:0000000000402325\n.text:000000000040232b\n.text:000000000040232d\n.text:0000000000402332\n.text:0000000000402334\n.text:000000000040233b\n.text:000000000040233d\n.text:0000000000402343\n.text:0000000000402345\n.text:0000000000402350\n.text:0000000000402352\n.text:0000000000402354\n.text:0000000000402357\n.text:0000000000402359\n.text:0000000000402360\n.text:0000000000402362\n.text:0000000000402364\n.text:000000000040236a\n.text:000000000040236c\n.text:0000000000402371\n.text:0000000000402375\n.text:000000000040237a\n.text:000000000040237c\n.text:0000000000402382\n.text:000000000040238b\n.text:0000000000402392\n.text:0000000000402399\n.text:00000000004023a1\n.text:00000000004023b0\n.text:00000000004023b5\n.text:00000000004023ba\n.text:00000000004023c0\n.text:00000000004023c3\n.text:00000000004023c6\n.text:00000000004023c8\n.text:00000000004023ce\n.text:00000000004023d4\n.text:00000000004023d7\n.text:00000000004023db\n.text:00000000004023de\n.text:00000000004023e0\n.text:00000000004023e8\n.text:00000000004023ef\n.text:00000000004023f1\n.text:00000000004023f7\n.text:00000000004023fb\n.text:00000000004023ff\n.text:0000000000402404\n.text:0000000000402409\n.text:000000000040240b\n.text:0000000000402412\n.text:0000000000402417\n.text:000000000040241a\n.text:000000000040241d\n.text:0000000000402423\n.text:0000000000402429\n.text:0000000000402430\n.text:0000000000402435\n.text:000000000040243a\n.text:0000000000402440\n.text:0000000000402442\n.text:0000000000402445\n.text:000000000040244c\n.text:000000000040244e\n.text:0000000000402455\n.text:000000000040245a\n.text:000000000040245d\n.text:0000000000402460\n.text:0000000000402465\n.text:000000000040246c\n.text:0000000000402471\n.text:0000000000402478\n.text:000000000040247a\n.text:000000000040247f\n.text:0000000000402483\n.text:0000000000402485\n.text:0000000000402487\n.text:000000000040248c\n.text:0000000000402493\n.text:0000000000402495\n.text:000000000040249b\n.text:000000000040249f\n.text:00000000004024a3\n.text:00000000004024a9\n.text:00000000004024ae\n.text:00000000004024b0\n.text:00000000004024b5\n.text:00000000004024ba\n.text:00000000004024bc\n.text:00000000004024be\n.text:00000000004024c1\n.text:00000000004024c8\n.text:00000000004024cd\n.text:00000000004024d0\n.text:00000000004024d3\n.text:00000000004024d8\n.text:00000000004024df\n.text:00000000004024e5\n.text:00000000004024e7\n.text:00000000004024ec\n.text:00000000004024f0\n.text:00000000004024f2\n.text:00000000004024f7\n.text:00000000004024f9\n.text:00000000004024fc\n.text:0000000000402501\n.text:0000000000402504\n.text:0000000000402506\n.text:0000000000402508\n.text:000000000040250b\n.text:0000000000402510\n.text:0000000000402512\n.text:0000000000402516\n.text:0000000000402518\n.text:000000000040251d\n.text:0000000000402522\n.text:0000000000402527\n.text:000000000040252a\n.text:000000000040252f\n.text:0000000000402534\n.text:0000000000402536\n.text:0000000000402538\n.text:000000000040253d\n.text:000000000040253f\n.text:0000000000402546\n.text:000000000040254d\n.text:0000000000402554\n.text:0000000000402559\n.text:000000000040255e\n.text:0000000000402561\n.text:0000000000402566\n.text:000000000040256d\n.text:000000000040256f\n.text:0000000000402573\n.text:0000000000402575\n.text:0000000000402577\n.text:000000000040257a\n.text:000000000040257d\n.text:0000000000402590\n.text:0000000000402593\n.text:0000000000402596\n.text:000000000040259b\n.text:000000000040259e\n.text:00000000004025a5\n.text:00000000004025a8\n.text:00000000004025ae\n.text:00000000004025b5\n.text:00000000004025b7\n.text:00000000004025bc\n.text:00000000004025c0\n.text:00000000004025c4\n.text:00000000004025ca\n.text:00000000004025cd\n.text:00000000004025cf\n.text:00000000004025e0\n.text:00000000004025e2\n.text:00000000004025e9\n.text:00000000004025eb\n.text:00000000004025f0\n.text:00000000004025f4\n.text:00000000004025f7\n.text:00000000004025fd\n.text:00000000004025ff\n.text:0000000000402605\n.text:0000000000402607\n.text:000000000040260c\n.text:000000000040260f\n.text:0000000000402614\n.text:000000000040261b\n.text:000000000040261d\n.text:0000000000402620\n.text:0000000000402622\n.text:0000000000402627\n.text:000000000040262e\n.text:0000000000402633\n.text:000000000040263e\n.text:0000000000402641\n.text:0000000000402646\n.text:0000000000402648\n.text:000000000040264a\n.text:000000000040264d\n.text:0000000000402652\n.text:0000000000402654\n.text:0000000000402656\n.text:000000000040265a\n.text:000000000040265b\n.text:000000000040265d\n.text:000000000040265f\n.text:0000000000402661\n.text:0000000000402663\n.text:0000000000402664\n.text:0000000000402665\n.text:000000000040266a\n.text:000000000040266f\n.text:0000000000402674\n.text:0000000000402679\n.text:000000000040267e\n'
p629
tp630
sS'quotearg_n_custom'
p631
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p632
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p633
S'MOV R8,-0x1\nJMP 0x00404630\n'
p634
S'49 c7 c0 ff ff ff ff\neb 07\n'
p635
S'.text:0000000000404620\n.text:0000000000404627\n'
p636
tp637
sS'open'
p638
(S'\n__stdcall open(char * __file, int __oflag)\n'
p639
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_006091b8)();\u000a  return iVar1;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x006091b8]\n'
p641
S'ff 25 d2 79 20 00\n'
p642
S'.plt:00000000004017e0\n'
p643
tp644
sS'quotearg_n_custom_mem'
p645
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p646
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x00609380]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x00609370]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609360]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609350]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403390\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404220\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p648
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 37 4d 20 00\n48 89 44 24 30\n0f 10 05 1b 4d 20 00\n0f 29 44 24 20\n0f 10 05 ff 4c 20 00\n0f 29 44 24 10\n0f 10 05 e3 4c 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p649
S'.text:0000000000404630\n.text:0000000000404631\n.text:0000000000404633\n.text:0000000000404635\n.text:0000000000404636\n.text:000000000040463a\n.text:000000000040463d\n.text:0000000000404640\n.text:0000000000404642\n.text:0000000000404649\n.text:000000000040464e\n.text:0000000000404655\n.text:000000000040465a\n.text:0000000000404661\n.text:0000000000404666\n.text:000000000040466d\n.text:0000000000404671\n.text:0000000000404674\n.text:0000000000404677\n.text:000000000040467c\n.text:000000000040467e\n.text:0000000000404681\n.text:0000000000404684\n.text:0000000000404687\n.text:000000000040468c\n.text:0000000000404690\n.text:0000000000404691\n.text:0000000000404693\n.text:0000000000404695\n.text:0000000000404696\n'
p650
tp651
sS'_init'
p652
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p653
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00608ff8;\u000a  if (PTR___gmon_start___00608ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00608ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p654
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00608ff8]\nTEST RAX,RAX\nJZ 0x0040148a\nCALL RAX\nADD RSP,0x8\nRET\n'
p655
S'48 83 ec 08\n48 8b 05 75 7b 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p656
S'.init:0000000000401478\n.init:000000000040147c\n.init:0000000000401483\n.init:0000000000401486\n.init:0000000000401488\n.init:000000000040148a\n.init:000000000040148e\n'
p657
tp658
sS'__freading'
p659
(S'\n__stdcall __freading()\n'
p660
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00609178)();\u000a  return;\u000a}\u000a\u000a
p661
S'JMP qword ptr [0x00609178]\n'
p662
S'ff 25 12 7a 20 00\n'
p663
S'.plt:0000000000401760\n'
p664
tp665
sS'set_quoting_flags'
p666
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p667
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p668
S'TEST RDI,RDI\nMOV ECX,0x609350\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p669
S'48 85 ff\nb9 50 93 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p670
S'.text:0000000000403370\n.text:0000000000403373\n.text:0000000000403378\n.text:000000000040337c\n.text:000000000040337f\n.text:0000000000403382\n'
p671
tp672
sS'fputs_unlocked'
p673
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p674
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_00609118)();\u000a  return iVar1;\u000a}\u000a\u000a
p675
S'JMP qword ptr [0x00609118]\n'
p676
S'ff 25 72 7a 20 00\n'
p677
S'.plt:00000000004016a0\n'
p678
tp679
sS'main'
p680
(S'\n__stdcall main(char * * argv)\n'
p681
V\u000aint main(char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  bool bVar2;\u000a  uchar *string;\u000a  char dummy [2];\u000a  _Bool _Var3;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  uint *puVar6;\u000a  undefined8 uVar7;\u000a  int iVar8;\u000a  FILE *fp;\u000a  undefined7 uVar9;\u000a  char **in_RSI;\u000a  char *__filename;\u000a  uchar *fieldstr;\u000a  \u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x406424,"/usr/local/share/locale");\u000a  textdomain(0x406424);\u000a  atexit(close_stdout);\u000a  operating_mode = undefined_mode;\u000a  suppress_non_delimited = 0;\u000a  delim = 0;\u000a  have_read_stdin = 0;\u000a  bVar2 = false;\u000aswitchD_00401dac_caseD_6e:\u000a  iVar8 = (int)((ulong)argv & 0xffffffff);\u000a  iVar5 = getopt_long((ulong)argv & 0xffffffff);\u000a  string = optarg;\u000a  if (iVar5 < 0x62) {\u000a    if (iVar5 == -1) {\u000a      if (operating_mode == undefined_mode) {\u000a        __filename = "you must specify a list of bytes, characters, or fields";\u000a      }\u000a      else {\u000a        if ((bVar2) && (operating_mode != field_mode)) {\u000a          __filename = "an input delimiter may be specified only when operating on fields";\u000a        }\u000a        else {\u000a          if ((operating_mode == field_mode) || ((suppress_non_delimited & 1) == 0)) {\u000a            set_fields((char *)fieldstr);\u000a            if (!bVar2) {\u000a              delim = '\u005ct';\u000a            }\u000a            if (output_delimiter_string == (char *)0x0) {\u000a              dummy[0] = delim;\u000a              dummy[1] = 0;\u000a              output_delimiter_string = (char *)0x60930a;\u000a              output_delimiter_length = 1;\u000a            }\u000a            if (optind == iVar8) {\u000a              _Var3 = cut_file("-");\u000a            }\u000a            else {\u000a              _Var3 = true;\u000a              if (optind < iVar8) {\u000a                _Var3 = true;\u000a                do {\u000a                  _Var4 = cut_file(in_RSI[(long)optind]);\u000a                  _Var3 = (_Bool)(_Var3 & _Var4);\u000a                  optind = optind + 1;\u000a                } while (optind < iVar8);\u000a              }\u000a            }\u000a            if ((have_read_stdin == 1) && (iVar5 = rpl_fclose(stdin), iVar5 == -1)) {\u000a              puVar6 = (uint *)__errno_location();\u000a              _Var3 = false;\u000a              error(0,(ulong)*puVar6,0x406825);\u000a            }\u000a            return (int)(uint)(_Var3 ^ 1);\u000a          }\u000a          __filename = \u000a          "suppressing non-delimited lines makes sense\u005cn\u005ctonly when operating on fields";\u000a        }\u000a      }\u000a      goto LAB_00402019;\u000a    }\u000a    if (iVar5 != -0x83) {\u000a      if (iVar5 != -0x82) goto switchD_00401dac_caseD_65;\u000a      usage(0);\u000a    }\u000a    version_etc(stdout,"cut","GNU coreutils",Version,"David M. Ihnat","David MacKenzie",\u000a                "Jim Meyering",0);\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  switch(iVar5) {\u000a  case 0x62:\u000a  case 99:\u000a    if (operating_mode != undefined_mode) goto LAB_00401fee;\u000a    operating_mode = byte_mode;\u000a    fieldstr = optarg;\u000a    goto switchD_00401dac_caseD_6e;\u000a  case 100:\u000a    if ((*optarg != 0) && (optarg[1] != 0)) {\u000a      __filename = "the delimiter must be a single character";\u000a      goto LAB_00402019;\u000a    }\u000a    bVar2 = true;\u000a    delim = *optarg;\u000a    goto switchD_00401dac_caseD_6e;\u000a  default:\u000a    break;\u000a  case 0x66:\u000a    if (operating_mode != undefined_mode) goto LAB_00401fee;\u000a    operating_mode = field_mode;\u000a    fieldstr = optarg;\u000a  case 0x6e:\u000a    goto switchD_00401dac_caseD_6e;\u000a  case 0x73:\u000a    suppress_non_delimited = 1;\u000a    goto switchD_00401dac_caseD_6e;\u000a  case 0x7a:\u000a    line_delim = 1;\u000a    goto switchD_00401dac_caseD_6e;\u000a  case 0x80:\u000a    output_delimiter_specified = 1;\u000a    if (*optarg == 0) {\u000a      output_delimiter_length = 1;\u000a    }\u000a    else {\u000a      output_delimiter_length = strlen((char *)optarg);\u000a    }\u000a    output_delimiter_string = xstrdup((char *)string);\u000a    goto switchD_00401dac_caseD_6e;\u000a  case 0x81:\u000a    complement = 1;\u000a    goto switchD_00401dac_caseD_6e;\u000a  }\u000aswitchD_00401dac_caseD_65:\u000a  usage(1);\u000aLAB_00401fee:\u000a  __filename = "only one type of list may be specified";\u000aLAB_00402019:\u000a  uVar7 = dcgettext(0,__filename,5);\u000a  error(0,0,uVar7,uVar7);\u000a  __filename = (char *)0x1;\u000a  usage();\u000a  if ((*__filename == '-') && (__filename[1] == 0)) {\u000a    have_read_stdin = 1;\u000a    fp = stdin;\u000a  }\u000a  else {\u000a    fp = (FILE *)fopen(__filename,"r");\u000a    if (fp == (FILE *)0x0) goto LAB_00402098;\u000a  }\u000a  fadvise(fp);\u000a  cut_stream(fp);\u000a  iVar5 = ferror_unlocked((FILE *)fp);\u000a  if (iVar5 == 0) {\u000a    uVar9 = (undefined7)((ulong)fp >> 8);\u000a    if ((*__filename == '-') && (__filename[1] == 0)) {\u000a      clearerr_unlocked((FILE *)fp);\u000a      return (int)CONCAT71(uVar9,1);\u000a    }\u000a    iVar5 = rpl_fclose(fp);\u000a    if (iVar5 != -1) {\u000a      return (int)CONCAT71(uVar9,1);\u000a    }\u000a  }\u000aLAB_00402098:\u000a  puVar6 = (uint *)__errno_location();\u000a  uVar1 = *puVar6;\u000a  __filename = quotearg_n_style_colon((char *)0x0);\u000a  error(0,(ulong)uVar1,0x40691d,__filename);\u000a  return 0;\u000a}\u000a\u000a
p682
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R15,RSI\nMOV EBP,EDI\nMOV RDI,qword ptr [R15]\nCALL 0x00403220\nMOV EDI,0x6\nMOV ESI,0x406fe9\nCALL 0x004017a0\nMOV EDI,0x406424\nMOV ESI,0x4063ac\nCALL 0x00401590\nMOV EDI,0x406424\nCALL 0x00401570\nMOV EDI,0x402d20\nCALL 0x00405ad0\nMOV dword ptr [0x006092f0],0x0\nMOV byte ptr [0x006092f4],0x0\nMOV byte ptr [0x006092f5],0x0\nMOV byte ptr [0x006092f6],0x0\nXOR R12D,R12D\nJMP 0x00401d80\nMOV dword ptr [0x006092f0],0x1\nMOV R14,qword ptr [0x006092c0]\nNOP dword ptr [RAX]\nMOV EDX,0x4063c4\nMOV ECX,0x405c20\nXOR R8D,R8D\nMOV EDI,EBP\nMOV RSI,R15\nCALL 0x004015d0\nCMP EAX,0x61\nJLE 0x00401e68\nADD EAX,-0x62\nCMP EAX,0x1f\nJA 0x00401fe4\nJMP qword ptr [0x405b20 + RAX*0x8]\nCMP dword ptr [0x006092f0],0x0\nJZ 0x00401d6b\nJMP 0x00401fee\nMOV RCX,qword ptr [0x006092c0]\nMOVZX EAX,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00401dd9\nCMP byte ptr [RCX + 0x1],0x0\nJNZ 0x00402012\nMOV byte ptr [0x006092f5],AL\nMOV R12B,0x1\nJMP 0x00401d80\nCMP dword ptr [0x006092f0],0x0\nJNZ 0x00401fee\nMOV dword ptr [0x006092f0],0x2\nMOV R14,qword ptr [0x006092c0]\nJMP 0x00401d80\nMOV byte ptr [0x006092f4],0x1\nJMP 0x00401d80\nMOV byte ptr [0x00609308],0x1\nJMP 0x00401d80\nMOV byte ptr [0x006092f7],0x1\nMOV RBX,qword ptr [0x006092c0]\nCMP byte ptr [RBX],0x0\nJZ 0x00401e48\nMOV RDI,RBX\nCALL 0x004015c0\nJMP 0x00401e4d\nMOV byte ptr [0x00609309],0x1\nJMP 0x00401d80\nMOV EAX,0x1\nMOV qword ptr [0x006092f8],RAX\nMOV RDI,RBX\nCALL 0x004051b0\nMOV qword ptr [0x00609300],RAX\nJMP 0x00401d80\nCMP EAX,-0x1\nJNZ 0x00401f8f\nMOV EAX,dword ptr [0x006092f0]\nTEST EAX,EAX\nJZ 0x00401ff7\nTEST R12B,R12B\nJZ 0x00401e8d\nCMP EAX,0x2\nJNZ 0x00402000\nCMP EAX,0x2\nJZ 0x00401e9f\nTEST byte ptr [0x006092f4],0x1\nJNZ 0x00402009\nXOR ECX,ECX\nCMP EAX,0x2\nSETNZ CL\nSHL ECX,0x2\nMOVZX EAX,byte ptr [0x00609309]\nLEA ESI,[RCX + RAX*0x2]\nMOV RDI,R14\nCALL 0x004026f0\nTEST R12B,R12B\nJNZ 0x00401ec8\nMOV byte ptr [0x006092f5],0x9\nCMP qword ptr [0x00609300],0x0\nJNZ 0x00401efb\nMOV AL,byte ptr [0x006092f5]\nMOV byte ptr [0x0060930a],AL\nMOV byte ptr [0x0060930b],0x0\nMOV qword ptr [0x00609300],0x60930a\nMOV qword ptr [0x006092f8],0x1\nCMP dword ptr [0x006092b8],EBP\nJNZ 0x00401f1a\nMOV EDI,0x406825\nCALL 0x00402040\nMOV BL,AL\nCMP byte ptr [0x006092f6],0x1\nJZ 0x00401f58\nJMP 0x00401f80\nMOV EAX,dword ptr [0x006092b8]\nMOV BL,0x1\nCMP EAX,EBP\nJGE 0x00401f4f\nMOV BL,0x1\nNOP dword ptr [RAX + RAX*0x1]\nCDQE\nMOV RDI,qword ptr [R15 + RAX*0x8]\nCALL 0x00402040\nAND BL,AL\nMOV EAX,dword ptr [0x006092b8]\nINC EAX\nMOV dword ptr [0x006092b8],EAX\nCMP EAX,EBP\nJL 0x00401f30\nCMP byte ptr [0x006092f6],0x1\nJNZ 0x00401f80\nMOV RDI,qword ptr [0x006092b0]\nCALL 0x00405270\nCMP EAX,-0x1\nJNZ 0x00401f80\nCALL 0x004014d0\nMOV ESI,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV EDX,0x406825\nXOR EAX,EAX\nCALL 0x004017d0\nXOR BL,0x1\nMOVZX EAX,BL\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x00401fa4\nCMP EAX,0xffffff7e\nJNZ 0x00401fe4\nXOR EDI,EDI\nCALL 0x00401990\nMOV RDI,qword ptr [0x006092a8]\nMOV RCX,qword ptr [0x00609220]\nMOV ESI,0x4063a8\nMOV EDX,0x406420\nMOV R8D,0x40642e\nMOV R9D,0x40643d\nMOV EAX,0x0\nPUSH 0x0\nPUSH 0x40644d\nCALL 0x00404f10\nADD RSP,0x10\nXOR EDI,EDI\nCALL 0x00401820\nMOV EDI,0x1\nCALL 0x00401990\nXOR EDI,EDI\nMOV ESI,0x4063d0\nJMP 0x00402019\nXOR EDI,EDI\nMOV ESI,0x40645a\nJMP 0x00402019\nXOR EDI,EDI\nMOV ESI,0x406492\nJMP 0x00402019\nXOR EDI,EDI\nMOV ESI,0x4064d4\nJMP 0x00402019\nXOR EDI,EDI\nMOV ESI,0x4063f7\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004017d0\nMOV EDI,0x1\nCALL 0x00401990\nNOP\n'
p683
S'55\n41 57\n41 56\n41 54\n53\n49 89 f7\n89 fd\n49 8b 3f\ne8 0b 15 00 00\nbf 06 00 00 00\nbe e9 6f 40 00\ne8 7c fa ff ff\nbf 24 64 40 00\nbe ac 63 40 00\ne8 5d f8 ff ff\nbf 24 64 40 00\ne8 33 f8 ff ff\nbf 20 2d 40 00\ne8 89 3d 00 00\nc7 05 9f 75 20 00 00 00 00 00\nc6 05 9c 75 20 00 00\nc6 05 96 75 20 00 00\nc6 05 90 75 20 00 00\n45 31 e4\neb 15\nc7 05 7b 75 20 00 01 00 00 00\n4c 8b 35 44 75 20 00\n0f 1f 40 00\nba c4 63 40 00\nb9 20 5c 40 00\n45 31 c0\n89 ef\n4c 89 fe\ne8 39 f8 ff ff\n83 f8 61\n0f 8e c8 00 00 00\n83 c0 9e\n83 f8 1f\n0f 87 38 02 00 00\nff 24 c5 20 5b 40 00\n83 3d 36 75 20 00 00\n74 af\ne9 2d 02 00 00\n48 8b 0d f8 74 20 00\n0f b6 01\n84 c0\n74 0a\n80 79 01 00\n0f 85 39 02 00 00\n88 05 16 75 20 00\n41 b4 01\neb 9c\n83 3d 05 75 20 00 00\n0f 85 fd 01 00 00\nc7 05 f5 74 20 00 02 00 00 00\n4c 8b 35 be 74 20 00\ne9 79 ff ff ff\nc6 05 e6 74 20 00 01\ne9 6d ff ff ff\nc6 05 ee 74 20 00 01\ne9 61 ff ff ff\nc6 05 d1 74 20 00 01\n48 8b 1d 93 74 20 00\n80 3b 00\n74 16\n48 89 df\ne8 86 f7 ff ff\neb 11\nc6 05 c6 74 20 00 01\ne9 38 ff ff ff\nb8 01 00 00 00\n48 89 05 a4 74 20 00\n48 89 df\ne8 54 33 00 00\n48 89 05 9d 74 20 00\ne9 18 ff ff ff\n83 f8 ff\n0f 85 1e 01 00 00\n8b 05 79 74 20 00\n85 c0\n0f 84 78 01 00 00\n45 84 e4\n74 09\n83 f8 02\n0f 85 73 01 00 00\n83 f8 02\n74 0d\nf6 05 5b 74 20 00 01\n0f 85 6a 01 00 00\n31 c9\n83 f8 02\n0f 95 c1\nc1 e1 02\n0f b6 05 58 74 20 00\n8d 34 41\n4c 89 f7\ne8 34 08 00 00\n45 84 e4\n75 07\nc6 05 2d 74 20 00 09\n48 83 3d 30 74 20 00 00\n75 29\n8a 05 1d 74 20 00\n88 05 2c 74 20 00\nc6 05 26 74 20 00 00\n48 c7 05 10 74 20 00 0a 93 60 00\n48 c7 05 fd 73 20 00 01 00 00 00\n39 2d b7 73 20 00\n75 17\nbf 25 68 40 00\ne8 33 01 00 00\n88 c3\n80 3d e0 73 20 00 01\n74 40\neb 66\n8b 05 98 73 20 00\nb3 01\n39 e8\n7d 29\nb3 01\n0f 1f 84 00 00 00 00 00\n48 98\n49 8b 3c c7\ne8 05 01 00 00\n20 c3\n8b 05 75 73 20 00\nff c0\n89 05 6d 73 20 00\n39 e8\n7c e1\n80 3d a0 73 20 00 01\n75 28\n48 8b 3d 51 73 20 00\ne8 0c 33 00 00\n83 f8 ff\n75 17\ne8 62 f5 ff ff\n8b 30\n31 db\n31 ff\nba 25 68 40 00\n31 c0\ne8 50 f8 ff ff\n80 f3 01\n0f b6 c3\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n3d 7d ff ff ff\n74 0e\n3d 7e ff ff ff\n75 47\n31 ff\ne8 ec f9 ff ff\n48 8b 3d fd 72 20 00\n48 8b 0d 6e 72 20 00\nbe a8 63 40 00\nba 20 64 40 00\n41 b8 2e 64 40 00\n41 b9 3d 64 40 00\nb8 00 00 00 00\n6a 00\n68 4d 64 40 00\ne8 37 2f 00 00\n48 83 c4 10\n31 ff\ne8 3c f8 ff ff\nbf 01 00 00 00\ne8 a2 f9 ff ff\n31 ff\nbe d0 63 40 00\neb 22\n31 ff\nbe 5a 64 40 00\neb 19\n31 ff\nbe 92 64 40 00\neb 10\n31 ff\nbe d4 64 40 00\neb 07\n31 ff\nbe f7 63 40 00\nba 05 00 00 00\ne8 7d f5 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 9c f7 ff ff\nbf 01 00 00 00\ne8 52 f9 ff ff\n66 90\n'
p684
S'.text:0000000000401d00\n.text:0000000000401d01\n.text:0000000000401d03\n.text:0000000000401d05\n.text:0000000000401d07\n.text:0000000000401d08\n.text:0000000000401d0b\n.text:0000000000401d0d\n.text:0000000000401d10\n.text:0000000000401d15\n.text:0000000000401d1a\n.text:0000000000401d1f\n.text:0000000000401d24\n.text:0000000000401d29\n.text:0000000000401d2e\n.text:0000000000401d33\n.text:0000000000401d38\n.text:0000000000401d3d\n.text:0000000000401d42\n.text:0000000000401d47\n.text:0000000000401d51\n.text:0000000000401d58\n.text:0000000000401d5f\n.text:0000000000401d66\n.text:0000000000401d69\n.text:0000000000401d6b\n.text:0000000000401d75\n.text:0000000000401d7c\n.text:0000000000401d80\n.text:0000000000401d85\n.text:0000000000401d8a\n.text:0000000000401d8d\n.text:0000000000401d8f\n.text:0000000000401d92\n.text:0000000000401d97\n.text:0000000000401d9a\n.text:0000000000401da0\n.text:0000000000401da3\n.text:0000000000401da6\n.text:0000000000401dac\n.text:0000000000401db3\n.text:0000000000401dba\n.text:0000000000401dbc\n.text:0000000000401dc1\n.text:0000000000401dc8\n.text:0000000000401dcb\n.text:0000000000401dcd\n.text:0000000000401dcf\n.text:0000000000401dd3\n.text:0000000000401dd9\n.text:0000000000401ddf\n.text:0000000000401de2\n.text:0000000000401de4\n.text:0000000000401deb\n.text:0000000000401df1\n.text:0000000000401dfb\n.text:0000000000401e02\n.text:0000000000401e07\n.text:0000000000401e0e\n.text:0000000000401e13\n.text:0000000000401e1a\n.text:0000000000401e1f\n.text:0000000000401e26\n.text:0000000000401e2d\n.text:0000000000401e30\n.text:0000000000401e32\n.text:0000000000401e35\n.text:0000000000401e3a\n.text:0000000000401e3c\n.text:0000000000401e43\n.text:0000000000401e48\n.text:0000000000401e4d\n.text:0000000000401e54\n.text:0000000000401e57\n.text:0000000000401e5c\n.text:0000000000401e63\n.text:0000000000401e68\n.text:0000000000401e6b\n.text:0000000000401e71\n.text:0000000000401e77\n.text:0000000000401e79\n.text:0000000000401e7f\n.text:0000000000401e82\n.text:0000000000401e84\n.text:0000000000401e87\n.text:0000000000401e8d\n.text:0000000000401e90\n.text:0000000000401e92\n.text:0000000000401e99\n.text:0000000000401e9f\n.text:0000000000401ea1\n.text:0000000000401ea4\n.text:0000000000401ea7\n.text:0000000000401eaa\n.text:0000000000401eb1\n.text:0000000000401eb4\n.text:0000000000401eb7\n.text:0000000000401ebc\n.text:0000000000401ebf\n.text:0000000000401ec1\n.text:0000000000401ec8\n.text:0000000000401ed0\n.text:0000000000401ed2\n.text:0000000000401ed8\n.text:0000000000401ede\n.text:0000000000401ee5\n.text:0000000000401ef0\n.text:0000000000401efb\n.text:0000000000401f01\n.text:0000000000401f03\n.text:0000000000401f08\n.text:0000000000401f0d\n.text:0000000000401f0f\n.text:0000000000401f16\n.text:0000000000401f18\n.text:0000000000401f1a\n.text:0000000000401f20\n.text:0000000000401f22\n.text:0000000000401f24\n.text:0000000000401f26\n.text:0000000000401f28\n.text:0000000000401f30\n.text:0000000000401f32\n.text:0000000000401f36\n.text:0000000000401f3b\n.text:0000000000401f3d\n.text:0000000000401f43\n.text:0000000000401f45\n.text:0000000000401f4b\n.text:0000000000401f4d\n.text:0000000000401f4f\n.text:0000000000401f56\n.text:0000000000401f58\n.text:0000000000401f5f\n.text:0000000000401f64\n.text:0000000000401f67\n.text:0000000000401f69\n.text:0000000000401f6e\n.text:0000000000401f70\n.text:0000000000401f72\n.text:0000000000401f74\n.text:0000000000401f79\n.text:0000000000401f7b\n.text:0000000000401f80\n.text:0000000000401f83\n.text:0000000000401f86\n.text:0000000000401f87\n.text:0000000000401f89\n.text:0000000000401f8b\n.text:0000000000401f8d\n.text:0000000000401f8e\n.text:0000000000401f8f\n.text:0000000000401f94\n.text:0000000000401f96\n.text:0000000000401f9b\n.text:0000000000401f9d\n.text:0000000000401f9f\n.text:0000000000401fa4\n.text:0000000000401fab\n.text:0000000000401fb2\n.text:0000000000401fb7\n.text:0000000000401fbc\n.text:0000000000401fc2\n.text:0000000000401fc8\n.text:0000000000401fcd\n.text:0000000000401fcf\n.text:0000000000401fd4\n.text:0000000000401fd9\n.text:0000000000401fdd\n.text:0000000000401fdf\n.text:0000000000401fe4\n.text:0000000000401fe9\n.text:0000000000401fee\n.text:0000000000401ff0\n.text:0000000000401ff5\n.text:0000000000401ff7\n.text:0000000000401ff9\n.text:0000000000401ffe\n.text:0000000000402000\n.text:0000000000402002\n.text:0000000000402007\n.text:0000000000402009\n.text:000000000040200b\n.text:0000000000402010\n.text:0000000000402012\n.text:0000000000402014\n.text:0000000000402019\n.text:000000000040201e\n.text:0000000000402023\n.text:0000000000402026\n.text:0000000000402028\n.text:000000000040202a\n.text:000000000040202c\n.text:000000000040202f\n.text:0000000000402034\n.text:0000000000402039\n.text:000000000040203e\n'
p685
tp686
sS'realloc'
p687
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p688
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00609188)();\u000a  return pvVar1;\u000a}\u000a\u000a
p689
S'JMP qword ptr [0x00609188]\n'
p690
S'ff 25 02 7a 20 00\n'
p691
S'.plt:0000000000401780\n'
p692
tp693
sS'xcharalloc'
p694
(S'\n__stdcall xcharalloc(size_t n)\n'
p695
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p696
S'JMP 0x00405040\n'
p697
S'e9 2b ff ff ff\n'
p698
S'.text:0000000000405110\n'
p699
tp700
sS'c_isupper'
p701
(S'\n__stdcall c_isupper()\n'
p702
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p703
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p704
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p705
S'.text:00000000004054e0\n.text:00000000004054e3\n.text:00000000004054e6\n.text:00000000004054e9\n'
p706
tp707
sS'__fprintf_chk'
p708
(S'\n__stdcall __fprintf_chk()\n'
p709
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_006091e8)();\u000a  return;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x006091e8]\n'
p711
S'ff 25 a2 79 20 00\n'
p712
S'.plt:0000000000401840\n'
p713
tp714
sS'get_charset_aliases'
p715
(S'\n__stdcall get_charset_aliases()\n'
p716
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00405994_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00405994_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00405994_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00405994_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00405994_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00405994_caseD_9;\u000a      case -1:\u000a        goto switchD_00405994_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_004059ed:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_004059f3:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00405994_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_004059f3;\u000a  }\u000a  goto LAB_004059ed;\u000a}\u000a\u000a
p717
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x00609490]\nTEST R15,R15\nJNZ 0x00405a02\nMOV EDI,0x40765c\nCALL 0x004014a0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004057b8\nCMP byte ptr [RBX],0x0\nJNZ 0x004057bd\nMOV EBX,0x40766c\nMOV RDI,RBX\nCALL 0x004015c0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x004057d7\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x004057d9\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401720\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040582d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004016f0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00405838\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00405855\nMOV R15D,0x406fe9\nJMP 0x004059fb\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004017e0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004059ed\nMOV ESI,0x40641e\nMOV EDI,EBP\nCALL 0x00401790\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004059b4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00405980\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401500\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401500\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00405980\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401750\nMOV ESI,0x40767b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401630\nCMP EAX,0x2\nJL 0x004059d4\nMOV RDI,R12\nCALL 0x004015c0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004015c0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040595d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401780\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x004058a4\nJMP 0x004059bd\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401720\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x004058a4\nJMP 0x004059bd\nMOV RDI,RBX\nCALL 0x00401530\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x004058e7\nJMP qword ptr [0x407520 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401530\nCMP EAX,-0x1\nJZ 0x004059d4\nCMP EAX,0xa\nJNZ 0x004059a0\nJMP 0x00405980\nMOV EDI,EBP\nCALL 0x00401650\nJMP 0x004059ed\nMOV RDI,R15\nCALL 0x004014b0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00405270\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004059ed\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x004059f3\nMOV R15D,0x406fe9\nMOV RDI,R13\nCALL 0x004014b0\nMOV qword ptr [0x00609490],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p718
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d f8 3c 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 5c 76 40 00\ne8 f5 bc ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 6c 76 40 00\n48 89 df\ne8 fb bd ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 39 bf ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 f3 be ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf e9 6f 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 7c bf ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 1e 64 40 00\n89 ef\ne8 16 bf ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 3b bc ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 2b bc ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 5f be ff ff\nbe 7b 76 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 2a bd ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 a9 bc ff ff\n49 89 c4\n48 89 ef\ne8 9e bc ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 36 be ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 b5 bd ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 a8 bb ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 20 75 40 00\n48 89 df\ne8 88 bb ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 95 bc ff ff\neb 30\n4c 89 ff\ne8 eb ba ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 94 f8 ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf e9 6f 40 00\n4c 89 ef\ne8 b5 ba ff ff\n4c 89 3d 8e 3a 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p719
S'.text:0000000000405780\n.text:0000000000405781\n.text:0000000000405783\n.text:0000000000405785\n.text:0000000000405787\n.text:0000000000405789\n.text:000000000040578a\n.text:0000000000405791\n.text:0000000000405798\n.text:000000000040579b\n.text:00000000004057a1\n.text:00000000004057a6\n.text:00000000004057ab\n.text:00000000004057ae\n.text:00000000004057b1\n.text:00000000004057b3\n.text:00000000004057b6\n.text:00000000004057b8\n.text:00000000004057bd\n.text:00000000004057c0\n.text:00000000004057c5\n.text:00000000004057c8\n.text:00000000004057cb\n.text:00000000004057cd\n.text:00000000004057d2\n.text:00000000004057d5\n.text:00000000004057d7\n.text:00000000004057d9\n.text:00000000004057dd\n.text:00000000004057e2\n.text:00000000004057e7\n.text:00000000004057ea\n.text:00000000004057ed\n.text:00000000004057ef\n.text:00000000004057f2\n.text:00000000004057f5\n.text:00000000004057f8\n.text:00000000004057fd\n.text:0000000000405800\n.text:0000000000405803\n.text:0000000000405806\n.text:0000000000405808\n.text:000000000040580e\n.text:0000000000405818\n.text:000000000040581d\n.text:0000000000405827\n.text:000000000040582b\n.text:000000000040582d\n.text:0000000000405833\n.text:0000000000405838\n.text:0000000000405842\n.text:0000000000405847\n.text:0000000000405851\n.text:0000000000405855\n.text:000000000040585a\n.text:000000000040585c\n.text:000000000040585f\n.text:0000000000405864\n.text:0000000000405866\n.text:0000000000405868\n.text:000000000040586e\n.text:0000000000405873\n.text:0000000000405875\n.text:000000000040587a\n.text:000000000040587d\n.text:0000000000405880\n.text:0000000000405886\n.text:000000000040588b\n.text:0000000000405890\n.text:0000000000405892\n.text:0000000000405897\n.text:000000000040589a\n.text:000000000040589f\n.text:00000000004058a4\n.text:00000000004058a9\n.text:00000000004058ac\n.text:00000000004058af\n.text:00000000004058b2\n.text:00000000004058b5\n.text:00000000004058b8\n.text:00000000004058bd\n.text:00000000004058c0\n.text:00000000004058c5\n.text:00000000004058c8\n.text:00000000004058cd\n.text:00000000004058d0\n.text:00000000004058d5\n.text:00000000004058da\n.text:00000000004058dd\n.text:00000000004058e2\n.text:00000000004058e7\n.text:00000000004058e9\n.text:00000000004058ec\n.text:00000000004058f1\n.text:00000000004058f6\n.text:00000000004058f8\n.text:00000000004058fb\n.text:00000000004058fe\n.text:0000000000405901\n.text:0000000000405906\n.text:0000000000405909\n.text:000000000040590f\n.text:0000000000405912\n.text:0000000000405917\n.text:000000000040591a\n.text:000000000040591d\n.text:0000000000405922\n.text:0000000000405925\n.text:000000000040592a\n.text:000000000040592f\n.text:0000000000405932\n.text:0000000000405934\n.text:0000000000405938\n.text:000000000040593d\n.text:0000000000405942\n.text:0000000000405945\n.text:000000000040594a\n.text:000000000040594d\n.text:0000000000405952\n.text:0000000000405955\n.text:000000000040595b\n.text:000000000040595d\n.text:0000000000405962\n.text:0000000000405966\n.text:000000000040596b\n.text:000000000040596e\n.text:0000000000405971\n.text:0000000000405977\n.text:0000000000405980\n.text:0000000000405983\n.text:0000000000405988\n.text:000000000040598b\n.text:000000000040598e\n.text:0000000000405994\n.text:00000000004059a0\n.text:00000000004059a3\n.text:00000000004059a8\n.text:00000000004059ab\n.text:00000000004059ad\n.text:00000000004059b0\n.text:00000000004059b2\n.text:00000000004059b4\n.text:00000000004059b6\n.text:00000000004059bb\n.text:00000000004059bd\n.text:00000000004059c0\n.text:00000000004059c5\n.text:00000000004059c7\n.text:00000000004059cc\n.text:00000000004059cf\n.text:00000000004059d4\n.text:00000000004059d7\n.text:00000000004059dc\n.text:00000000004059e1\n.text:00000000004059e4\n.text:00000000004059e6\n.text:00000000004059eb\n.text:00000000004059ed\n.text:00000000004059f3\n.text:00000000004059f6\n.text:00000000004059fb\n.text:0000000000405a02\n.text:0000000000405a05\n.text:0000000000405a0c\n.text:0000000000405a0d\n.text:0000000000405a0f\n.text:0000000000405a11\n.text:0000000000405a13\n.text:0000000000405a15\n.text:0000000000405a16\n'
p720
tp721
sS'nl_langinfo'
p722
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p723
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00609168)();\u000a  return pcVar1;\u000a}\u000a\u000a
p724
S'JMP qword ptr [0x00609168]\n'
p725
S'ff 25 22 7a 20 00\n'
p726
S'.plt:0000000000401740\n'
p727
tp728
sS'c_isalnum'
p729
(S'\n__stdcall c_isalnum()\n'
p730
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p731
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x004053fb\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x004053fb\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x004053fa\nXOR EAX,EAX\nRET\n'
p732
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p733
S'.text:00000000004053e0\n.text:00000000004053e2\n.text:00000000004053e5\n.text:00000000004053e8\n.text:00000000004053ea\n.text:00000000004053f4\n.text:00000000004053f8\n.text:00000000004053fa\n.text:00000000004053fb\n.text:00000000004053fe\n.text:0000000000405401\n.text:0000000000405403\n.text:0000000000405405\n'
p734
tp735
sS'x2realloc'
p736
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p737
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p738
S'MOV EDX,0x1\nJMP 0x004050b0\n'
p739
S'ba 01 00 00 00\neb 89\n'
p740
S'.text:0000000000405120\n.text:0000000000405125\n'
p741
tp742
sS'strlen'
p743
(S'\n__stdcall strlen(char * __s)\n'
p744
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_006090a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p745
S'JMP qword ptr [0x006090a8]\n'
p746
S'ff 25 e2 7a 20 00\n'
p747
S'.plt:00000000004015c0\n'
p748
tp749
sS'memcmp'
p750
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_00609110)();\u000a  return iVar1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x00609110]\n'
p753
S'ff 25 7a 7a 20 00\n'
p754
S'.plt:0000000000401690\n'
p755
tp756
sS'getndelim2'
p757
(S'\n__stdcall getndelim2(char * * lineptr, size_t * linesize, size_t offset, size_t nmax, FILE * stream)\n'
p758
V\u000assize_t getndelim2(char **lineptr,size_t *linesize,size_t offset,size_t nmax,FILE *stream)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  int iVar3;\u000a  char *s;\u000a  void *pvVar4;\u000a  char *pcVar5;\u000a  char *pcVar6;\u000a  char *__size;\u000a  uint uVar7;\u000a  uint in_R9D;\u000a  char *__size_00;\u000a  char *pcVar8;\u000a  char *__dest;\u000a  FILE *fp;\u000a  uint local_84;\u000a  char *local_78;\u000a  char *local_70;\u000a  uint local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  size_t local_50;\u000a  char *local_48;\u000a  char **local_40;\u000a  char **local_38;\u000a  \u000a  uVar7 = (uint)stream;\u000a  local_70 = *lineptr;\u000a  if (local_70 == (char *)0x0) {\u000a    __size = (char *)0x40;\u000a    if (nmax < 0x40) {\u000a      __size = (char *)nmax;\u000a    }\u000a    local_60 = (char *)nmax;\u000a    local_70 = (char *)malloc((size_t)__size);\u000a    if (local_70 == (char *)0x0) {\u000a      return -1;\u000a    }\u000a  }\u000a  else {\u000a    __size = (char *)*linesize;\u000a    local_60 = (char *)nmax;\u000a  }\u000a  pcVar8 = __size + -offset;\u000a  if (__size < offset) {\u000a    local_58 = (char *)0xffffffffffffffff;\u000a    local_40 = lineptr;\u000a    local_38 = (char **)linesize;\u000a  }\u000a  else {\u000a    local_58 = (char *)0xffffffffffffffff;\u000a    if ((__size < local_60) ||\u000a       (local_40 = lineptr, local_38 = (char **)linesize, pcVar8 != (char *)0x0)) {\u000a      __dest = local_70 + offset;\u000a      local_64 = in_R9D;\u000a      if (in_R9D == 0xffffffff) {\u000a        local_64 = uVar7;\u000a      }\u000a      if (uVar7 == 0xffffffff) {\u000a        uVar7 = in_R9D;\u000a        local_64 = in_R9D;\u000a      }\u000a      local_48 = (char *)(offset ^ 0x8000000000000000);\u000a      bVar2 = false;\u000a      pcVar6 = local_60;\u000a      local_50 = offset;\u000a      local_40 = lineptr;\u000a      local_38 = (char **)linesize;\u000a      do {\u000a        local_84 = (uint)offset;\u000a        s = freadptr(fp,(size_t *)&local_78);\u000a        if (s == (char *)0x0) {\u000a          local_84 = getc_unlocked((FILE *)fp);\u000a          if (local_84 == 0xffffffff) {\u000a            if (__dest == local_70) goto LAB_004030b0;\u000a            break;\u000a          }\u000a          bVar1 = true;\u000a          if (local_84 != local_64) {\u000a            bVar1 = bVar2;\u000a          }\u000a          bVar2 = true;\u000a          if (local_84 != uVar7) {\u000a            bVar2 = bVar1;\u000a          }\u000a          local_78 = (char *)0x1;\u000a        }\u000a        else {\u000a          if ((uVar7 != 0xffffffff) && (pvVar4 = memchr2(s,(ulong)uVar7), pvVar4 != (void *)0x0)) {\u000a            local_78 = (char *)((1 - (long)s) + (long)pvVar4);\u000a            bVar2 = true;\u000a          }\u000a        }\u000a        __size_00 = __size;\u000a        if ((__size < pcVar6) && (__size_00 = __size, pcVar8 < local_78 + 1)) {\u000a          pcVar8 = (char *)((long)__size * 2);\u000a          if (__size < (char *)0x40) {\u000a            pcVar8 = __size + 0x40;\u000a          }\u000a          __dest = __dest + -(long)local_70;\u000a          pcVar5 = __dest + (long)(local_78 + 1);\u000a          if (local_78 + 1 <= pcVar8 + -(long)__dest) {\u000a            pcVar5 = pcVar8;\u000a          }\u000a          __size_00 = pcVar5;\u000a          if (pcVar6 < pcVar5) {\u000a            __size_00 = pcVar6;\u000a          }\u000a          if (pcVar5 <= __size) {\u000a            __size_00 = pcVar6;\u000a          }\u000a          if ((((long)(__size_00 + -local_50) < 0) && (__size_00 = local_48, __size == local_48)) ||\u000a             (pcVar5 = (char *)realloc(local_70,(size_t)__size_00), pcVar5 == (char *)0x0))\u000a          goto LAB_004030b0;\u000a          pcVar8 = __size_00 + -(long)__dest;\u000a          __dest = __dest + (long)pcVar5;\u000a          pcVar6 = local_60;\u000a          local_70 = pcVar5;\u000a        }\u000a        if ((char *)0x1 < pcVar8) {\u000a          __size = pcVar8 + -1;\u000a          if (local_78 < pcVar8 + -1) {\u000a            __size = local_78;\u000a          }\u000a          if (s == (char *)0x0) {\u000a            *__dest = (char)local_84;\u000a          }\u000a          else {\u000a            memcpy(__dest,s,(size_t)__size);\u000a          }\u000a          __dest = __dest + (long)__size;\u000a          pcVar8 = pcVar8 + -(long)__size;\u000a          pcVar6 = local_60;\u000a        }\u000a        if ((s != (char *)0x0) &&\u000a           (iVar3 = freadseek(fp,(size_t)local_78), __size = __size_00, iVar3 != 0))\u000a        goto LAB_004030b0;\u000a        offset = (size_t)local_84;\u000a        __size = __size_00;\u000a      } while (!bVar2);\u000a      *__dest = 0;\u000a      local_58 = __dest + -(long)(local_70 + local_50);\u000a    }\u000a  }\u000aLAB_004030b0:\u000a  *local_40 = local_70;\u000a  *local_38 = __size;\u000a  return -(ulong)(local_58 == (char *)0x0) | (ulong)local_58;\u000a}\u000a\u000a
p759
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x58\nMOV R12D,R9D\nMOV dword ptr [RSP + 0x8],R8D\nMOV R15,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RAX,qword ptr [RBP]\nMOV RDX,RAX\nTEST RAX,RAX\nMOV qword ptr [RSP + 0x28],RCX\nJZ 0x00402e45\nMOV R13,qword ptr [RBX]\nJMP 0x00402e67\nCMP RCX,0x40\nMOV R13D,0x40\nCMOVC R13,RCX\nMOV RDI,R13\nCALL 0x00401720\nMOV RDX,RAX\nTEST RAX,RAX\nJZ 0x004030e3\nMOV R14,R13\nSUB R14,R15\nMOV qword ptr [RSP + 0x50],RBX\nMOV qword ptr [RSP + 0x48],RBP\nMOV qword ptr [RSP + 0x18],RDX\nJNC 0x00402e8c\nMOV qword ptr [RSP + 0x30],-0x1\nJMP 0x004030b0\nMOV qword ptr [RSP + 0x30],-0x1\nCMP R13,qword ptr [RSP + 0x28]\nJC 0x00402ea5\nTEST R14,R14\nJZ 0x004030b0\nMOV RBP,qword ptr [0x90 + RSP]\nMOV RAX,R15\nLEA R15,[RDX + RAX*0x1]\nCMP R12D,-0x1\nMOV EDX,R12D\nMOV ECX,dword ptr [RSP + 0x8]\nCMOVZ EDX,ECX\nCMP ECX,-0x1\nCMOVZ EDX,R12D\nMOV dword ptr [RSP + 0x24],EDX\nCMOVZ ECX,R12D\nMOV R12D,ECX\nMOV RCX,-0x8000000000000000\nMOV qword ptr [RSP + 0x38],RAX\nXOR RCX,RAX\nMOV qword ptr [RSP + 0x40],RCX\nMOV dword ptr [RSP + 0xc],0x0\nMOV dword ptr [RSP + 0x8],R12D\nMOV RBX,qword ptr [RSP + 0x28]\nNOP dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV RDI,RBP\nLEA RSI,[RSP + 0x10]\nCALL 0x00405340\nMOV RDI,RBP\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00402f50\nCMP R12D,-0x1\nJZ 0x00402f86\nMOV RCX,qword ptr [RSP + 0x10]\nMOV RDI,RBP\nMOV ESI,R12D\nMOV EDX,dword ptr [RSP + 0x24]\nCALL 0x00403100\nTEST RAX,RAX\nJZ 0x00402f86\nMOV ECX,0x1\nSUB RCX,RBP\nADD RCX,RAX\nMOV qword ptr [RSP + 0x10],RCX\nMOV AL,0x1\nJMP 0x00402f82\nCALL 0x00401530\nCMP EAX,-0x1\nJZ 0x004030ec\nCMP EAX,dword ptr [RSP + 0x24]\nMOV EDX,EAX\nMOV AL,0x1\nMOV CL,0x1\nJZ 0x00402f6e\nMOV ECX,dword ptr [RSP + 0xc]\nMOV dword ptr [RSP + 0x4],EDX\nCMP EDX,R12D\nJZ 0x00402f79\nMOV EAX,ECX\nMOV qword ptr [RSP + 0x10],0x1\nMOV dword ptr [RSP + 0xc],EAX\nCMP R13,RBX\nJNC 0x0040301a\nMOV RAX,qword ptr [RSP + 0x10]\nLEA RCX,[RAX + 0x1]\nCMP R14,RCX\nJNC 0x0040301a\nLEA RDX,[R13 + 0x40]\nLEA RSI,[R13 + R13*0x1]\nCMP R13,0x40\nCMOVC RSI,RDX\nMOV RDI,qword ptr [RSP + 0x18]\nSUB R15,RDI\nMOV RDX,RSI\nSUB RDX,R15\nCMP RDX,RCX\nLEA RAX,[R15 + RAX*0x1 + 0x1]\nCMOVNC RAX,RSI\nCMP RAX,RBX\nMOV R12,RAX\nCMOVA R12,RBX\nCMP R13,RAX\nCMOVNC R12,RBX\nCMP R12,qword ptr [RSP + 0x38]\nJNS 0x00402fee\nMOV R12,qword ptr [RSP + 0x40]\nCMP R13,R12\nJZ 0x004030b0\nMOV RSI,R12\nCALL 0x00401780\nTEST RAX,RAX\nJZ 0x004030b0\nMOV R14,R12\nSUB R14,R15\nADD R15,RAX\nMOV qword ptr [RSP + 0x18],RAX\nMOV R13,R12\nMOV R12D,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x28]\nCMP R14,0x2\nJC 0x00403050\nLEA RBX,[R14 + -0x1]\nMOV RAX,qword ptr [RSP + 0x10]\nCMP RAX,RBX\nCMOVC RBX,RAX\nTEST RBP,RBP\nJZ 0x00403056\nMOV RDI,R15\nMOV RSI,RBP\nMOV RDX,RBX\nCALL 0x004016f0\nMOV EAX,dword ptr [RSP + 0x4]\nJMP 0x0040305d\nMOV EAX,dword ptr [RSP + 0x4]\nJMP 0x0040306d\nMOV EAX,dword ptr [RSP + 0x4]\nMOV byte ptr [R15],AL\nADD R15,RBX\nSUB R14,RBX\nMOV R12D,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x28]\nTEST RBP,RBP\nMOV RBP,qword ptr [0x90 + RSP]\nJZ 0x0040308f\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDI,RBP\nCALL 0x004055a0\nTEST EAX,EAX\nMOV EAX,dword ptr [RSP + 0x4]\nJNZ 0x004030b0\nTEST byte ptr [RSP + 0xc],0x1\nJZ 0x00402f00\nMOV byte ptr [R15],0x0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RAX,qword ptr [RSP + 0x18]\nSUB R15,RAX\nMOV qword ptr [RSP + 0x30],R15\nMOV RAX,qword ptr [RSP + 0x48]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV qword ptr [RAX],RCX\nMOV RAX,qword ptr [RSP + 0x50]\nMOV qword ptr [RAX],R13\nMOV RCX,qword ptr [RSP + 0x30]\nCMP RCX,0x1\nSBB RAX,RAX\nOR RAX,RCX\nADD RSP,0x58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RAX,-0x1\nJMP 0x004030d4\nCMP R15,qword ptr [RSP + 0x18]\nJNZ 0x0040309a\nJMP 0x004030b0\n'
p760
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 58\n45 89 cc\n44 89 44 24 08\n49 89 d7\n48 89 f3\n48 89 fd\n48 8b 45 00\n48 89 c2\n48 85 c0\n48 89 4c 24 28\n74 05\n4c 8b 2b\neb 22\n48 83 f9 40\n41 bd 40 00 00 00\n4c 0f 42 e9\n4c 89 ef\ne8 c5 e8 ff ff\n48 89 c2\n48 85 c0\n0f 84 7c 02 00 00\n4d 89 ee\n4d 29 fe\n48 89 5c 24 50\n48 89 6c 24 48\n48 89 54 24 18\n73 0e\n48 c7 44 24 30 ff ff ff ff\ne9 24 02 00 00\n48 c7 44 24 30 ff ff ff ff\n4c 3b 6c 24 28\n72 09\n4d 85 f6\n0f 84 0b 02 00 00\n48 8b ac 24 90 00 00 00\n4c 89 f8\n4c 8d 3c 02\n41 83 fc ff\n44 89 e2\n8b 4c 24 08\n0f 44 d1\n83 f9 ff\n41 0f 44 d4\n89 54 24 24\n41 0f 44 cc\n41 89 cc\n48 b9 00 00 00 00 00 00 00 80\n48 89 44 24 38\n48 31 c1\n48 89 4c 24 40\nc7 44 24 0c 00 00 00 00\n44 89 64 24 08\n48 8b 5c 24 28\n0f 1f 00\n89 44 24 04\n48 89 ef\n48 8d 74 24 10\ne8 2f 24 00 00\n48 89 ef\n48 89 c5\n48 85 ed\n74 34\n41 83 fc ff\n74 64\n48 8b 4c 24 10\n48 89 ef\n44 89 e6\n8b 54 24 24\ne8 ca 01 00 00\n48 85 c0\n74 4b\nb9 01 00 00 00\n48 29 e9\n48 01 c1\n48 89 4c 24 10\nb0 01\neb 33\ne8 db e5 ff ff\n83 f8 ff\n0f 84 8e 01 00 00\n3b 44 24 24\n89 c2\nb0 01\nb1 01\n74 04\n8b 4c 24 0c\n89 54 24 04\n44 39 e2\n74 02\n89 c8\n48 c7 44 24 10 01 00 00 00\n89 44 24 0c\n49 39 dd\n0f 83 8b 00 00 00\n48 8b 44 24 10\n48 8d 48 01\n49 39 ce\n73 7d\n49 8d 55 40\n4b 8d 74 2d 00\n49 83 fd 40\n48 0f 42 f2\n48 8b 7c 24 18\n49 29 ff\n48 89 f2\n4c 29 fa\n48 39 ca\n49 8d 44 07 01\n48 0f 43 c6\n48 39 d8\n49 89 c4\n4c 0f 47 e3\n49 39 c5\n4c 0f 43 e3\n4c 3b 64 24 38\n79 0e\n4c 8b 64 24 40\n4d 39 e5\n0f 84 c2 00 00 00\n4c 89 e6\ne8 8a e7 ff ff\n48 85 c0\n0f 84 b1 00 00 00\n4d 89 e6\n4d 29 fe\n49 01 c7\n48 89 44 24 18\n4d 89 e5\n44 8b 64 24 08\n48 8b 5c 24 28\n49 83 fe 02\n72 30\n49 8d 5e ff\n48 8b 44 24 10\n48 39 d8\n48 0f 42 d8\n48 85 ed\n74 21\n4c 89 ff\n48 89 ee\n48 89 da\ne8 ad e6 ff ff\n8b 44 24 04\neb 14\n8b 44 24 04\neb 17\n8b 44 24 04\n41 88 07\n49 01 df\n49 29 de\n44 8b 64 24 08\n48 8b 5c 24 28\n48 85 ed\n48 8b ac 24 90 00 00 00\n74 15\n48 8b 74 24 10\n48 89 ef\ne8 19 25 00 00\n85 c0\n8b 44 24 04\n75 21\nf6 44 24 0c 01\n0f 84 66 fe ff ff\n41 c6 07 00\n48 8b 44 24 38\n48 03 44 24 18\n49 29 c7\n4c 89 7c 24 30\n48 8b 44 24 48\n48 8b 4c 24 18\n48 89 08\n48 8b 44 24 50\n4c 89 28\n48 8b 4c 24 30\n48 83 f9 01\n48 19 c0\n48 09 c8\n48 83 c4 58\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 c7 c0 ff ff ff ff\neb e8\n4c 3b 7c 24 18\n75 a7\neb bb\n'
p761
S'.text:0000000000402e10\n.text:0000000000402e11\n.text:0000000000402e13\n.text:0000000000402e15\n.text:0000000000402e17\n.text:0000000000402e19\n.text:0000000000402e1a\n.text:0000000000402e1e\n.text:0000000000402e21\n.text:0000000000402e26\n.text:0000000000402e29\n.text:0000000000402e2c\n.text:0000000000402e2f\n.text:0000000000402e33\n.text:0000000000402e36\n.text:0000000000402e39\n.text:0000000000402e3e\n.text:0000000000402e40\n.text:0000000000402e43\n.text:0000000000402e45\n.text:0000000000402e49\n.text:0000000000402e4f\n.text:0000000000402e53\n.text:0000000000402e56\n.text:0000000000402e5b\n.text:0000000000402e5e\n.text:0000000000402e61\n.text:0000000000402e67\n.text:0000000000402e6a\n.text:0000000000402e6d\n.text:0000000000402e72\n.text:0000000000402e77\n.text:0000000000402e7c\n.text:0000000000402e7e\n.text:0000000000402e87\n.text:0000000000402e8c\n.text:0000000000402e95\n.text:0000000000402e9a\n.text:0000000000402e9c\n.text:0000000000402e9f\n.text:0000000000402ea5\n.text:0000000000402ead\n.text:0000000000402eb0\n.text:0000000000402eb4\n.text:0000000000402eb8\n.text:0000000000402ebb\n.text:0000000000402ebf\n.text:0000000000402ec2\n.text:0000000000402ec5\n.text:0000000000402ec9\n.text:0000000000402ecd\n.text:0000000000402ed1\n.text:0000000000402ed4\n.text:0000000000402ede\n.text:0000000000402ee3\n.text:0000000000402ee6\n.text:0000000000402eeb\n.text:0000000000402ef3\n.text:0000000000402ef8\n.text:0000000000402efd\n.text:0000000000402f00\n.text:0000000000402f04\n.text:0000000000402f07\n.text:0000000000402f0c\n.text:0000000000402f11\n.text:0000000000402f14\n.text:0000000000402f17\n.text:0000000000402f1a\n.text:0000000000402f1c\n.text:0000000000402f20\n.text:0000000000402f22\n.text:0000000000402f27\n.text:0000000000402f2a\n.text:0000000000402f2d\n.text:0000000000402f31\n.text:0000000000402f36\n.text:0000000000402f39\n.text:0000000000402f3b\n.text:0000000000402f40\n.text:0000000000402f43\n.text:0000000000402f46\n.text:0000000000402f4b\n.text:0000000000402f4d\n.text:0000000000402f50\n.text:0000000000402f55\n.text:0000000000402f58\n.text:0000000000402f5e\n.text:0000000000402f62\n.text:0000000000402f64\n.text:0000000000402f66\n.text:0000000000402f68\n.text:0000000000402f6a\n.text:0000000000402f6e\n.text:0000000000402f72\n.text:0000000000402f75\n.text:0000000000402f77\n.text:0000000000402f79\n.text:0000000000402f82\n.text:0000000000402f86\n.text:0000000000402f89\n.text:0000000000402f8f\n.text:0000000000402f94\n.text:0000000000402f98\n.text:0000000000402f9b\n.text:0000000000402f9d\n.text:0000000000402fa1\n.text:0000000000402fa6\n.text:0000000000402faa\n.text:0000000000402fae\n.text:0000000000402fb3\n.text:0000000000402fb6\n.text:0000000000402fb9\n.text:0000000000402fbc\n.text:0000000000402fbf\n.text:0000000000402fc4\n.text:0000000000402fc8\n.text:0000000000402fcb\n.text:0000000000402fce\n.text:0000000000402fd2\n.text:0000000000402fd5\n.text:0000000000402fd9\n.text:0000000000402fde\n.text:0000000000402fe0\n.text:0000000000402fe5\n.text:0000000000402fe8\n.text:0000000000402fee\n.text:0000000000402ff1\n.text:0000000000402ff6\n.text:0000000000402ff9\n.text:0000000000402fff\n.text:0000000000403002\n.text:0000000000403005\n.text:0000000000403008\n.text:000000000040300d\n.text:0000000000403010\n.text:0000000000403015\n.text:000000000040301a\n.text:000000000040301e\n.text:0000000000403020\n.text:0000000000403024\n.text:0000000000403029\n.text:000000000040302c\n.text:0000000000403030\n.text:0000000000403033\n.text:0000000000403035\n.text:0000000000403038\n.text:000000000040303b\n.text:000000000040303e\n.text:0000000000403043\n.text:0000000000403047\n.text:0000000000403050\n.text:0000000000403054\n.text:0000000000403056\n.text:000000000040305a\n.text:000000000040305d\n.text:0000000000403060\n.text:0000000000403063\n.text:0000000000403068\n.text:000000000040306d\n.text:0000000000403070\n.text:0000000000403078\n.text:000000000040307a\n.text:000000000040307f\n.text:0000000000403082\n.text:0000000000403087\n.text:0000000000403089\n.text:000000000040308d\n.text:000000000040308f\n.text:0000000000403094\n.text:000000000040309a\n.text:000000000040309e\n.text:00000000004030a3\n.text:00000000004030a8\n.text:00000000004030ab\n.text:00000000004030b0\n.text:00000000004030b5\n.text:00000000004030ba\n.text:00000000004030bd\n.text:00000000004030c2\n.text:00000000004030c5\n.text:00000000004030ca\n.text:00000000004030ce\n.text:00000000004030d1\n.text:00000000004030d4\n.text:00000000004030d8\n.text:00000000004030d9\n.text:00000000004030db\n.text:00000000004030dd\n.text:00000000004030df\n.text:00000000004030e1\n.text:00000000004030e2\n.text:00000000004030e3\n.text:00000000004030ea\n.text:00000000004030ec\n.text:00000000004030f1\n.text:00000000004030f3\n'
p762
tp763
sS'quotearg_n_style_mem'
p764
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p765
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p766
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00404450\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404220\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p767
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p768
S'.text:00000000004044b0\n.text:00000000004044b1\n.text:00000000004044b3\n.text:00000000004044b5\n.text:00000000004044b6\n.text:00000000004044ba\n.text:00000000004044bd\n.text:00000000004044c0\n.text:00000000004044c2\n.text:00000000004044c5\n.text:00000000004044c8\n.text:00000000004044cd\n.text:00000000004044cf\n.text:00000000004044d2\n.text:00000000004044d5\n.text:00000000004044d8\n.text:00000000004044dd\n.text:00000000004044e1\n.text:00000000004044e2\n.text:00000000004044e4\n.text:00000000004044e6\n.text:00000000004044e7\n'
p769
tp770
sS'_exit'
p771
(S'\n__stdcall _exit(int __status)\n'
p772
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00609040)();\u000a  return;\u000a}\u000a\u000a
p773
S'JMP qword ptr [0x00609040]\n'
p774
S'ff 25 4a 7b 20 00\n'
p775
S'.plt:00000000004014f0\n'
p776
tp777
sS'emit_stdin_note'
p778
(S'\n__stdcall emit_stdin_note()\n'
p779
V\u000avoid emit_stdin_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,"\u005cnWith no FILE, or when FILE is -, read standard input.\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p780
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x406546\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004016a0\n'
p781
S'50\n31 ff\nbe 46 65 40 00\nba 05 00 00 00\ne8 1e fa ff ff\n48 8b 35 1f 77 20 00\n48 89 c7\n58\ne9 0e fb ff ff\n'
p782
S'.text:0000000000401b70\n.text:0000000000401b71\n.text:0000000000401b73\n.text:0000000000401b78\n.text:0000000000401b7d\n.text:0000000000401b82\n.text:0000000000401b89\n.text:0000000000401b8c\n.text:0000000000401b8d\n'
p783
tp784
sS'__errno_location'
p785
(S'\n__stdcall __errno_location()\n'
p786
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00609030)();\u000a  return piVar1;\u000a}\u000a\u000a
p787
S'JMP qword ptr [0x00609030]\n'
p788
S'ff 25 5a 7b 20 00\n'
p789
S'.plt:00000000004014d0\n'
p790
tp791
sS'x2nrealloc'
p792
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p793
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p794
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x004050dc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00405109\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004050fa\nTEST RCX,RCX\nJNZ 0x004050fa\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00405080\nPUSH RAX\nCALL 0x004051d0\n'
p795
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p796
S'.text:00000000004050b0\n.text:00000000004050b3\n.text:00000000004050b6\n.text:00000000004050b9\n.text:00000000004050bb\n.text:00000000004050c5\n.text:00000000004050c7\n.text:00000000004050ca\n.text:00000000004050cd\n.text:00000000004050cf\n.text:00000000004050d2\n.text:00000000004050d5\n.text:00000000004050da\n.text:00000000004050dc\n.text:00000000004050df\n.text:00000000004050e1\n.text:00000000004050e6\n.text:00000000004050e8\n.text:00000000004050eb\n.text:00000000004050ed\n.text:00000000004050f4\n.text:00000000004050f7\n.text:00000000004050fa\n.text:00000000004050fd\n.text:0000000000405101\n.text:0000000000405104\n.text:0000000000405109\n.text:000000000040510a\n'
p797
tp798
sS'xrealloc'
p799
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p800
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p801
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00405097\nTEST RBX,RBX\nJNZ 0x00405097\nCALL 0x004014b0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401780\nTEST RBX,RBX\nJZ 0x004050a9\nTEST RAX,RAX\nJZ 0x004050ab\nPOP RBX\nRET\nCALL 0x004051d0\n'
p802
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 1d c4 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 e1 c6 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p803
S'.text:0000000000405080\n.text:0000000000405081\n.text:0000000000405084\n.text:0000000000405087\n.text:0000000000405089\n.text:000000000040508c\n.text:000000000040508e\n.text:0000000000405093\n.text:0000000000405095\n.text:0000000000405096\n.text:0000000000405097\n.text:000000000040509a\n.text:000000000040509f\n.text:00000000004050a2\n.text:00000000004050a4\n.text:00000000004050a7\n.text:00000000004050a9\n.text:00000000004050aa\n.text:00000000004050ab\n'
p804
tp805
sS'compare_ranges'
p806
(S'\n__stdcall compare_ranges(void * a, void * b)\n'
p807
V\u000aint compare_ranges(void *a,void *b)\u000a\u000a{\u000a  uint uVar1;\u000a  \u000a  uVar1 = 0xffffffff;\u000a  if (*(int *)b <= *(int *)a) {\u000a    uVar1 = (uint)(*(int *)b < *(int *)a);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p808
S'MOV EAX,dword ptr [RDI]\nXOR ECX,ECX\nCMP EAX,dword ptr [RSI]\nSETG CL\nMOV EAX,0xffffffff\nCMOVGE EAX,ECX\nRET\n'
p809
S'8b 07\n31 c9\n3b 06\n0f 9f c1\nb8 ff ff ff ff\n0f 4d c1\nc3\n'
p810
S'.text:0000000000402bf0\n.text:0000000000402bf2\n.text:0000000000402bf4\n.text:0000000000402bf6\n.text:0000000000402bf9\n.text:0000000000402bfe\n.text:0000000000402c01\n'
p811
tp812
sS'quotearg_n_options'
p813
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p814
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p815
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x004014d0\nTEST R12D,R12D\nJS 0x004043d1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x00609230]\nCMP dword ptr [0x00609238],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x004042eb\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x609240\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00405080\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x00609230],R15\nJNZ 0x004042b2\nMOVUPS XMM0,xmmword ptr [0x00609240]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x00609238]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401620\nMOV dword ptr [0x00609238],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00403440\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040434d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x004043bb\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x609390\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00404378\nCALL 0x004014b0\nMOV RDI,R15\nCALL 0x00405110\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00403440\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004014c0\n'
p816
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 91 d2 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 d6 4f 20 00\n44 39 25 d7 4f 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 40 92 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 e8 0d 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 8b 4f 20 00\n75 0b\n0f 10 05 92 4f 20 00\n41 0f 11 07\n8b 05 80 4f 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 4d d3 ff ff\n89 1d 5f 4f 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 90 93 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 38 d1 ff ff\n4c 89 ff\ne8 90 0d 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 ea d0 ff ff\n'
p817
S'.text:0000000000404220\n.text:0000000000404221\n.text:0000000000404223\n.text:0000000000404225\n.text:0000000000404227\n.text:0000000000404229\n.text:000000000040422a\n.text:000000000040422e\n.text:0000000000404231\n.text:0000000000404234\n.text:0000000000404237\n.text:000000000040423a\n.text:000000000040423f\n.text:0000000000404242\n.text:0000000000404248\n.text:000000000040424d\n.text:000000000040424f\n.text:0000000000404253\n.text:000000000040425a\n.text:0000000000404261\n.text:0000000000404266\n.text:000000000040426b\n.text:0000000000404270\n.text:0000000000404272\n.text:0000000000404277\n.text:000000000040427a\n.text:000000000040427d\n.text:0000000000404283\n.text:0000000000404285\n.text:0000000000404288\n.text:000000000040428c\n.text:000000000040428f\n.text:0000000000404293\n.text:0000000000404298\n.text:000000000040429b\n.text:000000000040429e\n.text:00000000004042a5\n.text:00000000004042a7\n.text:00000000004042ae\n.text:00000000004042b2\n.text:00000000004042b8\n.text:00000000004042bb\n.text:00000000004042bf\n.text:00000000004042c2\n.text:00000000004042c5\n.text:00000000004042c9\n.text:00000000004042cb\n.text:00000000004042ce\n.text:00000000004042d3\n.text:00000000004042d9\n.text:00000000004042dc\n.text:00000000004042e1\n.text:00000000004042e6\n.text:00000000004042eb\n.text:00000000004042ee\n.text:00000000004042f2\n.text:00000000004042f6\n.text:00000000004042fb\n.text:00000000004042ff\n.text:0000000000404303\n.text:0000000000404307\n.text:000000000040430b\n.text:000000000040430f\n.text:0000000000404314\n.text:0000000000404317\n.text:000000000040431a\n.text:000000000040431d\n.text:0000000000404322\n.text:0000000000404325\n.text:0000000000404328\n.text:000000000040432b\n.text:000000000040432c\n.text:0000000000404331\n.text:0000000000404335\n.text:0000000000404338\n.text:000000000040433b\n.text:000000000040433d\n.text:0000000000404342\n.text:0000000000404346\n.text:000000000040434b\n.text:000000000040434d\n.text:0000000000404351\n.text:0000000000404356\n.text:0000000000404359\n.text:000000000040435c\n.text:0000000000404361\n.text:0000000000404366\n.text:0000000000404369\n.text:000000000040436e\n.text:0000000000404371\n.text:0000000000404373\n.text:0000000000404378\n.text:000000000040437b\n.text:0000000000404380\n.text:0000000000404383\n.text:0000000000404386\n.text:000000000040438b\n.text:000000000040438e\n.text:0000000000404392\n.text:0000000000404395\n.text:0000000000404398\n.text:000000000040439d\n.text:00000000004043a2\n.text:00000000004043a7\n.text:00000000004043aa\n.text:00000000004043ad\n.text:00000000004043ae\n.text:00000000004043b3\n.text:00000000004043b7\n.text:00000000004043bb\n.text:00000000004043bf\n.text:00000000004043c2\n.text:00000000004043c6\n.text:00000000004043c7\n.text:00000000004043c9\n.text:00000000004043cb\n.text:00000000004043cd\n.text:00000000004043cf\n.text:00000000004043d0\n.text:00000000004043d1\n'
p818
tp819
sS'strcmp'
p820
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p821
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00609130)();\u000a  return iVar1;\u000a}\u000a\u000a
p822
S'JMP qword ptr [0x00609130]\n'
p823
S'ff 25 5a 7a 20 00\n'
p824
S'.plt:00000000004016d0\n'
p825
tp826
sS'set_custom_quoting'
p827
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p828
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p829
S'TEST RDI,RDI\nMOV EAX,0x609350\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x004033b5\nTEST RDX,RDX\nJZ 0x004033b5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x004014c0\n'
p830
S'48 85 ff\nb8 50 93 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 05 e1 ff ff\n'
p831
S'.text:0000000000403390\n.text:0000000000403393\n.text:0000000000403398\n.text:000000000040339c\n.text:00000000004033a2\n.text:00000000004033a5\n.text:00000000004033a7\n.text:00000000004033aa\n.text:00000000004033ac\n.text:00000000004033b0\n.text:00000000004033b4\n.text:00000000004033b5\n.text:00000000004033b6\n'
p832
tp833
sS'c_isalpha'
p834
(S'\n__stdcall c_isalpha()\n'
p835
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p836
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x0040542b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p837
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p838
S'.text:0000000000405410\n.text:0000000000405413\n.text:0000000000405416\n.text:0000000000405418\n.text:0000000000405422\n.text:0000000000405424\n.text:0000000000405427\n.text:000000000040542a\n.text:000000000040542b\n.text:000000000040542d\n'
p839
tp840
sS'feof_unlocked'
p841
(S'\n__stdcall feof_unlocked(FILE * __stream)\n'
p842
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint feof_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_feof_unlocked_00609200)();\u000a  return iVar1;\u000a}\u000a\u000a
p843
S'JMP qword ptr [0x00609200]\n'
p844
S'ff 25 8a 79 20 00\n'
p845
S'.plt:0000000000401870\n'
p846
tp847
sS'quotearg_custom_mem'
p848
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p849
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p850
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00404630\n'
p851
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p852
S'.text:00000000004046c0\n.text:00000000004046c3\n.text:00000000004046c6\n.text:00000000004046c9\n.text:00000000004046cc\n.text:00000000004046ce\n.text:00000000004046d1\n'
p853
tp854
sS'close_stdout'
p855
(S'\n__stdcall close_stdout()\n'
p856
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402d47;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x40691d,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402d47:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p857
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x006092a8]\nCALL 0x00405530\nTEST EAX,EAX\nJZ 0x00402d47\nCMP byte ptr [0x00609340],0x0\nJZ 0x00402d5c\nCALL 0x004014d0\nCMP dword ptr [RAX],0x20\nJNZ 0x00402d5c\nMOV RDI,qword ptr [0x006092e0]\nCALL 0x00405530\nTEST EAX,EAX\nJNZ 0x00402da1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40690d\nMOV EDX,0x5\nCALL 0x004015a0\nMOV R14,RAX\nMOV RBX,qword ptr [0x00609338]\nCALL 0x004014d0\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00402dac\nXOR EDI,EDI\nMOV EDX,0x40691d\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004017d0\nMOV EDI,dword ptr [0x00609228]\nCALL 0x004014f0\nMOV EDI,dword ptr [0x00609228]\nCALL 0x004014f0\nMOV RDI,RBX\nCALL 0x004045b0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x406919\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004017d0\nMOV EDI,dword ptr [0x00609228]\nCALL 0x004014f0\n'
p858
S'55\n41 56\n53\n48 8b 3d 7d 65 20 00\ne8 00 28 00 00\n85 c0\n74 13\n80 3d 05 66 20 00 00\n74 1f\ne8 8e e7 ff ff\n83 38 20\n75 15\n48 8b 3d 92 65 20 00\ne8 dd 27 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 0d 69 40 00\nba 05 00 00 00\ne8 33 e8 ff ff\n49 89 c6\n48 8b 1d c1 65 20 00\ne8 54 e7 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 1d 69 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 3a ea ff ff\n8b 3d 8c 64 20 00\ne8 4f e7 ff ff\n8b 3d 81 64 20 00\ne8 44 e7 ff ff\n48 89 df\ne8 fc 17 00 00\n48 89 c1\n31 ff\nba 19 69 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 06 ea ff ff\n8b 3d 58 64 20 00\ne8 1b e7 ff ff\n'
p859
S'.text:0000000000402d20\n.text:0000000000402d21\n.text:0000000000402d23\n.text:0000000000402d24\n.text:0000000000402d2b\n.text:0000000000402d30\n.text:0000000000402d32\n.text:0000000000402d34\n.text:0000000000402d3b\n.text:0000000000402d3d\n.text:0000000000402d42\n.text:0000000000402d45\n.text:0000000000402d47\n.text:0000000000402d4e\n.text:0000000000402d53\n.text:0000000000402d55\n.text:0000000000402d57\n.text:0000000000402d58\n.text:0000000000402d5a\n.text:0000000000402d5b\n.text:0000000000402d5c\n.text:0000000000402d5e\n.text:0000000000402d63\n.text:0000000000402d68\n.text:0000000000402d6d\n.text:0000000000402d70\n.text:0000000000402d77\n.text:0000000000402d7c\n.text:0000000000402d7f\n.text:0000000000402d81\n.text:0000000000402d83\n.text:0000000000402d85\n.text:0000000000402d8a\n.text:0000000000402d8c\n.text:0000000000402d8e\n.text:0000000000402d91\n.text:0000000000402d96\n.text:0000000000402d9c\n.text:0000000000402da1\n.text:0000000000402da7\n.text:0000000000402dac\n.text:0000000000402daf\n.text:0000000000402db4\n.text:0000000000402db7\n.text:0000000000402db9\n.text:0000000000402dbe\n.text:0000000000402dc0\n.text:0000000000402dc2\n.text:0000000000402dc5\n.text:0000000000402dca\n.text:0000000000402dd0\n'
p860
tp861
sS'version_etc_ar'
p862
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p863
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p864
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00404e90\nJMP 0x00404b20\n'
p865
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p866
S'.text:0000000000404e80\n.text:0000000000404e87\n.text:0000000000404e90\n.text:0000000000404e96\n.text:0000000000404e9a\n.text:0000000000404e9c\n'
p867
tp868
sS'rpl_calloc'
p869
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p870
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00609128)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p871
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x0040525b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00405260\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00405260\nPUSH RAX\nCALL 0x004014d0\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004016c0\n'
p872
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 7f c2 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 55 c4 ff ff\n'
p873
S'.text:0000000000405220\n.text:0000000000405223\n.text:0000000000405228\n.text:000000000040522a\n.text:000000000040522d\n.text:0000000000405232\n.text:0000000000405234\n.text:0000000000405237\n.text:000000000040523b\n.text:000000000040523d\n.text:0000000000405240\n.text:0000000000405243\n.text:0000000000405246\n.text:0000000000405249\n.text:000000000040524b\n.text:000000000040524c\n.text:0000000000405251\n.text:0000000000405257\n.text:0000000000405259\n.text:000000000040525a\n.text:000000000040525b\n.text:0000000000405260\n.text:0000000000405263\n.text:0000000000405266\n'
p874
tp875
sS'memset'
p876
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p877
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006090d8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p878
S'JMP qword ptr [0x006090d8]\n'
p879
S'ff 25 b2 7a 20 00\n'
p880
S'.plt:0000000000401620\n'
p881
tp882
sS'c_isxdigit'
p883
(S'\n__stdcall c_isxdigit()\n'
p884
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p885
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0040550b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p886
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p887
S'.text:00000000004054f0\n.text:00000000004054f3\n.text:00000000004054f6\n.text:00000000004054f8\n.text:0000000000405502\n.text:0000000000405504\n.text:0000000000405507\n.text:000000000040550a\n.text:000000000040550b\n.text:000000000040550d\n'
p888
tp889
sS'ferror'
p890
(S'\n__stdcall ferror(FILE * __stream)\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_00609058)();\u000a  return iVar1;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x00609058]\n'
p893
S'ff 25 32 7b 20 00\n'
p894
S'.plt:0000000000401520\n'
p895
tp896
sS'__libc_csu_fini'
p897
(S'\n__stdcall __libc_csu_fini()\n'
p898
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p899
S'RET\n'
p900
S'f3 c3\n'
p901
S'.text:0000000000405ac0\n'
p902
tp903
sS'getc_unlocked'
p904
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p905
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00609060)();\u000a  return iVar1;\u000a}\u000a\u000a
p906
S'JMP qword ptr [0x00609060]\n'
p907
S'ff 25 2a 7b 20 00\n'
p908
S'.plt:0000000000401530\n'
p909
tp910
sS'add_range_pair'
p911
(S'\n__stdcall add_range_pair(size_t lo, size_t hi)\n'
p912
V\u000avoid add_range_pair(size_t lo,size_t hi)\u000a\u000a{\u000a  field_range_pair *pfVar1;\u000a  \u000a  if (n_frp == n_frp_allocated) {\u000a    frp = (field_range_pair *)x2nrealloc(frp,&n_frp_allocated,0x10);\u000a  }\u000a  pfVar1 = frp;\u000a  frp[n_frp].lo = lo;\u000a  pfVar1[n_frp].hi = hi;\u000a  n_frp = n_frp + 1;\u000a  return;\u000a}\u000a\u000a
p913
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [0x006094a0]\nCMP RAX,qword ptr [0x00609330]\nJNZ 0x00402ba7\nMOV RDI,qword ptr [0x00609498]\nMOV ESI,0x609330\nMOV EDX,0x10\nCALL 0x004050b0\nMOV qword ptr [0x00609498],RAX\nMOV RAX,qword ptr [0x00609498]\nMOV RCX,qword ptr [0x006094a0]\nSHL RCX,0x4\nMOV qword ptr [RAX + RCX*0x1],RBX\nMOV RCX,qword ptr [0x006094a0]\nMOV RDX,RCX\nSHL RDX,0x4\nMOV qword ptr [RAX + RDX*0x1 + 0x8],R14\nINC RCX\nMOV qword ptr [0x006094a0],RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p914
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 8b 05 1f 69 20 00\n48 3b 05 a8 67 20 00\n75 1d\n48 8b 3d 07 69 20 00\nbe 30 93 60 00\nba 10 00 00 00\ne8 10 25 00 00\n48 89 05 f1 68 20 00\n48 8b 05 ea 68 20 00\n48 8b 0d eb 68 20 00\n48 c1 e1 04\n48 89 1c 08\n48 8b 0d dc 68 20 00\n48 89 ca\n48 c1 e2 04\n4c 89 74 10 08\n48 ff c1\n48 89 0d c6 68 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p915
S'.text:0000000000402b70\n.text:0000000000402b72\n.text:0000000000402b73\n.text:0000000000402b74\n.text:0000000000402b77\n.text:0000000000402b7a\n.text:0000000000402b81\n.text:0000000000402b88\n.text:0000000000402b8a\n.text:0000000000402b91\n.text:0000000000402b96\n.text:0000000000402b9b\n.text:0000000000402ba0\n.text:0000000000402ba7\n.text:0000000000402bae\n.text:0000000000402bb5\n.text:0000000000402bb9\n.text:0000000000402bbd\n.text:0000000000402bc4\n.text:0000000000402bc7\n.text:0000000000402bcb\n.text:0000000000402bd0\n.text:0000000000402bd3\n.text:0000000000402bda\n.text:0000000000402bde\n.text:0000000000402bdf\n.text:0000000000402be1\n'
p916
tp917
sS'abort'
p918
(S'\n__stdcall abort()\n'
p919
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00609028)();\u000a  return;\u000a}\u000a\u000a
p920
S'JMP qword ptr [0x00609028]\n'
p921
S'ff 25 62 7b 20 00\n'
p922
S'.plt:00000000004014c0\n'
p923
tp924
sS'memmove'
p925
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p926
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_006091a8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p927
S'JMP qword ptr [0x006091a8]\n'
p928
S'ff 25 e2 79 20 00\n'
p929
S'.plt:00000000004017c0\n'
p930
tp931
sS'c_isascii'
p932
(S'\n__stdcall c_isascii()\n'
p933
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p934
S'CMP EDI,0x80\nSETC AL\nRET\n'
p935
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p936
S'.text:0000000000405430\n.text:0000000000405436\n.text:0000000000405439\n'
p937
tp938
sS'version_etc'
p939
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p940
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p941
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404f52\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00404eb0\nADD RSP,0xd8\nRET\n'
p942
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p943
S'.text:0000000000404f10\n.text:0000000000404f17\n.text:0000000000404f19\n.text:0000000000404f1b\n.text:0000000000404f20\n.text:0000000000404f25\n.text:0000000000404f2a\n.text:0000000000404f32\n.text:0000000000404f3a\n.text:0000000000404f42\n.text:0000000000404f4a\n.text:0000000000404f52\n.text:0000000000404f57\n.text:0000000000404f5c\n.text:0000000000404f61\n.text:0000000000404f66\n.text:0000000000404f6e\n.text:0000000000404f73\n.text:0000000000404f7b\n.text:0000000000404f82\n.text:0000000000404f85\n.text:0000000000404f8a\n.text:0000000000404f91\n'
p944
tp945
sS'freadahead'
p946
(S'\n__stdcall freadahead(FILE * fp)\n'
p947
V\u000asize_t freadahead(FILE *fp)\u000a\u000a{\u000a  if (fp->_IO_write_base <= fp->_IO_write_ptr && fp->_IO_write_ptr != fp->_IO_write_base) {\u000a    return 0;\u000a  }\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return (size_t)(fp->_IO_read_end + -(long)fp->_IO_read_ptr);\u000a  }\u000a  return (size_t)(fp->_IO_read_end + -(long)fp->_IO_read_ptr +\u000a                 (long)(fp->_IO_save_end + -(long)fp->_IO_save_base));\u000a}\u000a\u000a
p948
S'MOV RAX,qword ptr [RDI + 0x28]\nCMP RAX,qword ptr [RDI + 0x20]\nJBE 0x00405a2d\nXOR EAX,EAX\nRET\nMOV RAX,qword ptr [RDI + 0x10]\nSUB RAX,qword ptr [RDI + 0x8]\nTEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405a41\nXOR ECX,ECX\nADD RAX,RCX\nRET\nMOV RCX,qword ptr [RDI + 0x58]\nSUB RCX,qword ptr [RDI + 0x48]\nADD RAX,RCX\nRET\n'
p949
S'48 8b 47 28\n48 3b 47 20\n76 03\n31 c0\nc3\n48 8b 47 10\n48 2b 47 08\nf6 47 01 01\n75 06\n31 c9\n48 01 c8\nc3\n48 8b 4f 58\n48 2b 4f 48\n48 01 c8\nc3\n'
p950
S'.text:0000000000405a20\n.text:0000000000405a24\n.text:0000000000405a28\n.text:0000000000405a2a\n.text:0000000000405a2c\n.text:0000000000405a2d\n.text:0000000000405a31\n.text:0000000000405a35\n.text:0000000000405a39\n.text:0000000000405a3b\n.text:0000000000405a3d\n.text:0000000000405a40\n.text:0000000000405a41\n.text:0000000000405a45\n.text:0000000000405a49\n.text:0000000000405a4c\n'
p951
tp952
sS'posix_fadvise'
p953
(S'\n__stdcall posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p954
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_00609100)();\u000a  return iVar1;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x00609100]\n'
p956
S'ff 25 8a 7a 20 00\n'
p957
S'.plt:0000000000401670\n'
p958
tp959
sS'__ctype_b_loc'
p960
(S'\n__stdcall __ctype_b_loc()\n'
p961
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_00609208)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p962
S'JMP qword ptr [0x00609208]\n'
p963
S'ff 25 82 79 20 00\n'
p964
S'.plt:0000000000401880\n'
p965
tp966
sS'lseek'
p967
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p968
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006090c8)();\u000a  return _Var1;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x006090c8]\n'
p970
S'ff 25 c2 7a 20 00\n'
p971
S'.plt:0000000000401600\n'
p972
tp973
sS'fdadvise'
p974
(S'\n__stdcall fdadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p975
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fdadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_00609100)();\u000a  return iVar1;\u000a}\u000a\u000a
p976
S'JMP 0x00401670\n'
p977
S'e9 8b e8 ff ff\n'
p978
S'.text:0000000000402de0\n'
p979
tp980
sS'quotearg'
p981
(S'\n__stdcall quotearg(char * arg)\n'
p982
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p983
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404210\n'
p984
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p985
S'.text:00000000004043f0\n.text:00000000004043f3\n.text:00000000004043f5\n.text:00000000004043f8\n'
p986
tp987
sS'_start'
p988
(S'\n__stdcall _start()\n'
p989
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00608ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p990
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405ac0\nMOV RCX,0x405a50\nMOV RDI,0x401d00\nCALL qword ptr [0x00608ff0]\nHLT\n'
p991
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 c0 5a 40 00\n48 c7 c1 50 5a 40 00\n48 c7 c7 00 1d 40 00\nff 15 36 77 20 00\nf4\n'
p992
S'.text:0000000000401890\n.text:0000000000401892\n.text:0000000000401895\n.text:0000000000401896\n.text:0000000000401899\n.text:000000000040189d\n.text:000000000040189e\n.text:000000000040189f\n.text:00000000004018a6\n.text:00000000004018ad\n.text:00000000004018b4\n.text:00000000004018ba\n'
p993
tp994
sS'c_iscntrl'
p995
(S'\n__stdcall c_iscntrl()\n'
p996
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p997
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00405458\nRET\nCMP EDI,0x7f\nJZ 0x00405457\nXOR EAX,EAX\nRET\n'
p998
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p999
S'.text:0000000000405450\n.text:0000000000405452\n.text:0000000000405455\n.text:0000000000405457\n.text:0000000000405458\n.text:000000000040545b\n.text:000000000040545d\n.text:000000000040545f\n'
p1000
tp1001
sS'c_isblank'
p1002
(S'\n__stdcall c_isblank()\n'
p1003
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1004
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1005
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1006
S'.text:0000000000405440\n.text:0000000000405443\n.text:0000000000405446\n.text:0000000000405449\n.text:000000000040544c\n.text:000000000040544e\n'
p1007
tp1008
sS'quotearg_n_mem'
p1009
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p1010
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p1011
S'MOV ECX,0x609350\nJMP 0x00404220\n'
p1012
S'b9 50 93 60 00\ne9 36 fe ff ff\n'
p1013
S'.text:00000000004043e0\n.text:00000000004043e5\n'
p1014
tp1015
sS'atexit'
p1016
(S'\n__stdcall atexit(__func * __func)\n'
p1017
V\u000a/* WARNING: Removing unreachable block (ram,0x00405af0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_006091d0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1018
S'MOV RAX,0x609218\nTEST RAX,RAX\nJZ 0x00405af0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401810\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401810\n'
p1019
S'48 c7 c0 18 92 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 2a bd ff ff\n31 d2\n31 f6\ne9 17 bd ff ff\n'
p1020
S'.text:0000000000405ad0\n.text:0000000000405ad7\n.text:0000000000405ada\n.text:0000000000405adc\n.text:0000000000405adf\n.text:0000000000405ae1\n.text:0000000000405af0\n.text:0000000000405af2\n.text:0000000000405af4\n'
p1021
tp1022
sS'__printf_chk'
p1023
(S'\n__stdcall __printf_chk()\n'
p1024
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_006091a0)();\u000a  return;\u000a}\u000a\u000a
p1025
S'JMP qword ptr [0x006091a0]\n'
p1026
S'ff 25 ea 79 20 00\n'
p1027
S'.plt:00000000004017b0\n'
p1028
tp1029
sS'fdopen'
p1030
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1031
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_00609190)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1032
S'JMP qword ptr [0x00609190]\n'
p1033
S'ff 25 fa 79 20 00\n'
p1034
S'.plt:0000000000401790\n'
p1035
tp1036
sS'error'
p1037
(S'\n__stdcall error()\n'
p1038
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_006091b0)();\u000a  return;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x006091b0]\n'
p1040
S'ff 25 da 79 20 00\n'
p1041
S'.plt:00000000004017d0\n'
p1042
tp1043
sS'strcaseeq6'
p1044
(S'\n__stdcall strcaseeq6()\n'
p1045
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1046
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004054e0\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404ab2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404ab9\nJMP 0x00404ace\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404ace\nTEST BPL,BPL\nJZ 0x00404ac9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404ae0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1047
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 41 0a 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1048
S'.text:0000000000404a90\n.text:0000000000404a91\n.text:0000000000404a92\n.text:0000000000404a93\n.text:0000000000404a95\n.text:0000000000404a98\n.text:0000000000404a9a\n.text:0000000000404a9f\n.text:0000000000404aa3\n.text:0000000000404aa5\n.text:0000000000404aa7\n.text:0000000000404aaa\n.text:0000000000404aac\n.text:0000000000404aae\n.text:0000000000404ab0\n.text:0000000000404ab2\n.text:0000000000404ab4\n.text:0000000000404ab7\n.text:0000000000404ab9\n.text:0000000000404abc\n.text:0000000000404abe\n.text:0000000000404ac1\n.text:0000000000404ac5\n.text:0000000000404ac6\n.text:0000000000404ac7\n.text:0000000000404ac9\n.text:0000000000404ace\n.text:0000000000404ad2\n.text:0000000000404ad3\n.text:0000000000404ad4\n'
p1049
tp1050
sS'strcaseeq5'
p1051
(S'\n__stdcall strcaseeq5()\n'
p1052
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1053
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004054e0\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404a66\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404a6d\nJMP 0x00404a84\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404a84\nTEST BPL,BPL\nJZ 0x00404a7f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404a90\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1054
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 8d 0a 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1055
S'.text:0000000000404a40\n.text:0000000000404a41\n.text:0000000000404a43\n.text:0000000000404a44\n.text:0000000000404a47\n.text:0000000000404a49\n.text:0000000000404a4c\n.text:0000000000404a4e\n.text:0000000000404a53\n.text:0000000000404a57\n.text:0000000000404a59\n.text:0000000000404a5b\n.text:0000000000404a5e\n.text:0000000000404a60\n.text:0000000000404a62\n.text:0000000000404a64\n.text:0000000000404a66\n.text:0000000000404a68\n.text:0000000000404a6b\n.text:0000000000404a6d\n.text:0000000000404a70\n.text:0000000000404a72\n.text:0000000000404a76\n.text:0000000000404a79\n.text:0000000000404a7a\n.text:0000000000404a7c\n.text:0000000000404a7d\n.text:0000000000404a7f\n.text:0000000000404a84\n.text:0000000000404a85\n.text:0000000000404a87\n.text:0000000000404a88\n'
p1056
tp1057
sS'emit_ancillary_info'
p1058
(S'\n__stdcall emit_ancillary_info()\n'
p1059
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00405d80;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("cut",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "cut";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_004063a8,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_004063a8);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x406fe9;\u000a  if (__s2 == "cut") {\u000a    uVar3 = 0x4065e5;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p1060
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x405d80\nMOV ESI,0x4065c9\nNOP\nMOV EDI,0x4063a8\nCALL 0x004016d0\nTEST EAX,EAX\nJZ 0x00401bfb\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401be0\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x4063a8\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x406628\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406420\nMOV ECX,0x40663f\nXOR EAX,EAX\nCALL 0x004017b0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x004017a0\nTEST RAX,RAX\nJZ 0x00401c84\nMOV ESI,0x406666\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x004014e0\nTEST EAX,EAX\nJZ 0x00401c84\nXOR EDI,EDI\nMOV ESI,0x40666a\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x4063a8\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x4066af\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,RAX\nMOV R14D,0x4063a8\nMOV EDI,0x1\nMOV EDX,0x40663f\nMOV ECX,0x4063a8\nXOR EAX,EAX\nCALL 0x004017b0\nXOR EDI,EDI\nMOV ESI,0x4066ce\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x4065e5\nMOV ECX,0x406fe9\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004017b0\n'
p1061
S'41 56\n53\n50\nbb 80 5d 40 00\nbe c9 65 40 00\n66 90\nbf a8 63 40 00\ne8 e6 fa ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb a8 63 40 00\n48 0f 45 d8\n31 ff\nbe 28 66 40 00\nba 05 00 00 00\ne8 84 f9 ff ff\n48 89 c6\nbf 01 00 00 00\nba 20 64 40 00\nb9 3f 66 40 00\n31 c0\ne8 7b fb ff ff\nbf 05 00 00 00\n31 f6\ne8 5f fb ff ff\n48 85 c0\n74 3e\nbe 66 66 40 00\nba 03 00 00 00\n48 89 c7\ne8 88 f8 ff ff\n85 c0\n74 28\n31 ff\nbe 6a 66 40 00\nba 05 00 00 00\ne8 33 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba a8 63 40 00\n31 c0\n48 89 ce\ne8 2c fb ff ff\n31 ff\nbe af 66 40 00\nba 05 00 00 00\ne8 0b f9 ff ff\n48 89 c6\n41 be a8 63 40 00\nbf 01 00 00 00\nba 3f 66 40 00\nb9 a8 63 40 00\n31 c0\ne8 fc fa ff ff\n31 ff\nbe ce 66 40 00\nba 05 00 00 00\ne8 db f8 ff ff\n48 89 c2\n4c 39 f3\nb8 e5 65 40 00\nb9 e9 6f 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 be fa ff ff\n'
p1062
S'.text:0000000000401bd0\n.text:0000000000401bd2\n.text:0000000000401bd3\n.text:0000000000401bd4\n.text:0000000000401bd9\n.text:0000000000401bde\n.text:0000000000401be0\n.text:0000000000401be5\n.text:0000000000401bea\n.text:0000000000401bec\n.text:0000000000401bee\n.text:0000000000401bf2\n.text:0000000000401bf6\n.text:0000000000401bf9\n.text:0000000000401bfb\n.text:0000000000401bff\n.text:0000000000401c02\n.text:0000000000401c07\n.text:0000000000401c0b\n.text:0000000000401c0d\n.text:0000000000401c12\n.text:0000000000401c17\n.text:0000000000401c1c\n.text:0000000000401c1f\n.text:0000000000401c24\n.text:0000000000401c29\n.text:0000000000401c2e\n.text:0000000000401c30\n.text:0000000000401c35\n.text:0000000000401c3a\n.text:0000000000401c3c\n.text:0000000000401c41\n.text:0000000000401c44\n.text:0000000000401c46\n.text:0000000000401c4b\n.text:0000000000401c50\n.text:0000000000401c53\n.text:0000000000401c58\n.text:0000000000401c5a\n.text:0000000000401c5c\n.text:0000000000401c5e\n.text:0000000000401c63\n.text:0000000000401c68\n.text:0000000000401c6d\n.text:0000000000401c70\n.text:0000000000401c75\n.text:0000000000401c7a\n.text:0000000000401c7c\n.text:0000000000401c7f\n.text:0000000000401c84\n.text:0000000000401c86\n.text:0000000000401c8b\n.text:0000000000401c90\n.text:0000000000401c95\n.text:0000000000401c98\n.text:0000000000401c9e\n.text:0000000000401ca3\n.text:0000000000401ca8\n.text:0000000000401cad\n.text:0000000000401caf\n.text:0000000000401cb4\n.text:0000000000401cb6\n.text:0000000000401cbb\n.text:0000000000401cc0\n.text:0000000000401cc5\n.text:0000000000401cc8\n.text:0000000000401ccb\n.text:0000000000401cd0\n.text:0000000000401cd5\n.text:0000000000401cd9\n.text:0000000000401cde\n.text:0000000000401ce0\n.text:0000000000401ce3\n.text:0000000000401ce6\n.text:0000000000401cea\n.text:0000000000401ceb\n.text:0000000000401ced\n'
p1063
tp1064
sS'strcaseeq7'
p1065
(S'\n__stdcall strcaseeq7()\n'
p1066
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1067
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x004054e0\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404b02\nTEST ECX,0xffffffdf\nJNZ 0x00404b06\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x00404b0a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1068
S'53\n48 89 fb\n31 ff\ne8 f5 09 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1069
S'.text:0000000000404ae0\n.text:0000000000404ae1\n.text:0000000000404ae4\n.text:0000000000404ae6\n.text:0000000000404aeb\n.text:0000000000404aef\n.text:0000000000404af1\n.text:0000000000404af3\n.text:0000000000404af9\n.text:0000000000404afb\n.text:0000000000404b00\n.text:0000000000404b01\n.text:0000000000404b02\n.text:0000000000404b04\n.text:0000000000404b06\n.text:0000000000404b08\n.text:0000000000404b09\n.text:0000000000404b0a\n.text:0000000000404b0f\n.text:0000000000404b10\n'
p1070
tp1071
sS'version_etc_va'
p1072
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p1073
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p1074
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00404ee0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00404eec\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404f01\nINC R9\nCMP R9,0xa\nJC 0x00404ec0\nMOV R8,RSP\nCALL 0x00404b20\nADD RSP,0x58\nRET\n'
p1075
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p1076
S'.text:0000000000404eb0\n.text:0000000000404eb4\n.text:0000000000404eb7\n.text:0000000000404ec0\n.text:0000000000404ec3\n.text:0000000000404ec7\n.text:0000000000404ec9\n.text:0000000000404ecc\n.text:0000000000404ed0\n.text:0000000000404ed4\n.text:0000000000404ed7\n.text:0000000000404ee0\n.text:0000000000404ee4\n.text:0000000000404ee8\n.text:0000000000404eec\n.text:0000000000404eef\n.text:0000000000404ef3\n.text:0000000000404ef6\n.text:0000000000404ef8\n.text:0000000000404efb\n.text:0000000000404eff\n.text:0000000000404f01\n.text:0000000000404f04\n.text:0000000000404f09\n.text:0000000000404f0d\n'
p1077
tp1078
sS'xzalloc'
p1079
(S'\n__stdcall xzalloc(size_t s)\n'
p1080
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p1081
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00405040\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401620\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1082
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 d4 c4 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1083
S'.text:0000000000405130\n.text:0000000000405132\n.text:0000000000405133\n.text:0000000000405134\n.text:0000000000405137\n.text:000000000040513c\n.text:000000000040513f\n.text:0000000000405141\n.text:0000000000405144\n.text:0000000000405147\n.text:000000000040514c\n.text:000000000040514f\n.text:0000000000405153\n.text:0000000000405154\n.text:0000000000405156\n'
p1084
tp1085
sS'emit_mandatory_arg_note'
p1086
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1087
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1088
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40657e\nMOV EDX,0x5\nCALL 0x004015a0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004016a0\n'
p1089
S'50\n31 ff\nbe 7e 65 40 00\nba 05 00 00 00\ne8 ee f9 ff ff\n48 8b 35 ef 76 20 00\n48 89 c7\n58\ne9 de fa ff ff\n'
p1090
S'.text:0000000000401ba0\n.text:0000000000401ba1\n.text:0000000000401ba3\n.text:0000000000401ba8\n.text:0000000000401bad\n.text:0000000000401bb2\n.text:0000000000401bb9\n.text:0000000000401bbc\n.text:0000000000401bbd\n'
p1091
tp1092
sS'strcaseeq0'
p1093
(S'\n__stdcall strcaseeq0()\n'
p1094
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1095
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004054e0\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404815\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040481c\nJMP 0x00404850\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404850\nTEST BPL,BPL\nJZ 0x0040484b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404860\nJMP 0x00404850\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1096
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 dd 0c 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1097
S'.text:00000000004047e0\n.text:00000000004047e1\n.text:00000000004047e3\n.text:00000000004047e5\n.text:00000000004047e7\n.text:00000000004047e9\n.text:00000000004047ea\n.text:00000000004047eb\n.text:00000000004047ee\n.text:00000000004047f1\n.text:00000000004047f4\n.text:00000000004047f7\n.text:00000000004047f9\n.text:00000000004047fc\n.text:00000000004047fe\n.text:0000000000404803\n.text:0000000000404806\n.text:0000000000404808\n.text:000000000040480a\n.text:000000000040480d\n.text:000000000040480f\n.text:0000000000404811\n.text:0000000000404813\n.text:0000000000404815\n.text:0000000000404817\n.text:000000000040481a\n.text:000000000040481c\n.text:000000000040481f\n.text:0000000000404821\n.text:0000000000404825\n.text:000000000040482a\n.text:000000000040482d\n.text:0000000000404831\n.text:0000000000404835\n.text:0000000000404839\n.text:000000000040483d\n.text:0000000000404841\n.text:0000000000404844\n.text:0000000000404849\n.text:000000000040484b\n.text:0000000000404850\n.text:0000000000404854\n.text:0000000000404855\n.text:0000000000404857\n.text:0000000000404859\n.text:000000000040485b\n.text:000000000040485d\n.text:000000000040485e\n'
p1098
tp1099
sS'strcaseeq2'
p1100
(S'\n__stdcall strcaseeq2()\n'
p1101
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1102
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004054e0\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404926\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040492d\nJMP 0x0040495a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040495a\nTEST BPL,BPL\nJZ 0x00404955\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404970\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1103
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 cd 0b 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1104
S'.text:00000000004048f0\n.text:00000000004048f1\n.text:00000000004048f3\n.text:00000000004048f5\n.text:00000000004048f7\n.text:00000000004048f9\n.text:00000000004048fa\n.text:00000000004048fb\n.text:00000000004048fe\n.text:0000000000404901\n.text:0000000000404904\n.text:0000000000404907\n.text:0000000000404909\n.text:000000000040490c\n.text:000000000040490e\n.text:0000000000404913\n.text:0000000000404917\n.text:0000000000404919\n.text:000000000040491b\n.text:000000000040491e\n.text:0000000000404920\n.text:0000000000404922\n.text:0000000000404924\n.text:0000000000404926\n.text:0000000000404928\n.text:000000000040492b\n.text:000000000040492d\n.text:0000000000404930\n.text:0000000000404932\n.text:0000000000404936\n.text:000000000040493a\n.text:000000000040493e\n.text:0000000000404942\n.text:0000000000404945\n.text:0000000000404949\n.text:000000000040494a\n.text:000000000040494c\n.text:000000000040494e\n.text:0000000000404950\n.text:0000000000404952\n.text:0000000000404953\n.text:0000000000404955\n.text:000000000040495a\n.text:000000000040495e\n.text:000000000040495f\n.text:0000000000404961\n.text:0000000000404963\n.text:0000000000404965\n.text:0000000000404967\n.text:0000000000404968\n'
p1105
tp1106
sS'strcaseeq1'
p1107
(S'\n__stdcall strcaseeq1()\n'
p1108
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x004054e0\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040489d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004048a4\nJMP 0x004048d7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004048d7\nTEST BPL,BPL\nJZ 0x004048d2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004048f0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1110
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 56 0c 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1111
S'.text:0000000000404860\n.text:0000000000404861\n.text:0000000000404863\n.text:0000000000404865\n.text:0000000000404867\n.text:0000000000404869\n.text:000000000040486a\n.text:000000000040486b\n.text:0000000000404870\n.text:0000000000404873\n.text:0000000000404876\n.text:0000000000404879\n.text:000000000040487b\n.text:000000000040487e\n.text:0000000000404883\n.text:0000000000404885\n.text:000000000040488a\n.text:000000000040488e\n.text:0000000000404890\n.text:0000000000404892\n.text:0000000000404895\n.text:0000000000404897\n.text:0000000000404899\n.text:000000000040489b\n.text:000000000040489d\n.text:000000000040489f\n.text:00000000004048a2\n.text:00000000004048a4\n.text:00000000004048a7\n.text:00000000004048a9\n.text:00000000004048ad\n.text:00000000004048b1\n.text:00000000004048b5\n.text:00000000004048bb\n.text:00000000004048bf\n.text:00000000004048c2\n.text:00000000004048c6\n.text:00000000004048c7\n.text:00000000004048c9\n.text:00000000004048cb\n.text:00000000004048cd\n.text:00000000004048cf\n.text:00000000004048d0\n.text:00000000004048d2\n.text:00000000004048d7\n.text:00000000004048db\n.text:00000000004048dc\n.text:00000000004048de\n.text:00000000004048e0\n.text:00000000004048e2\n.text:00000000004048e4\n.text:00000000004048e5\n'
p1112
tp1113
sS'strcaseeq4'
p1114
(S'\n__stdcall strcaseeq4()\n'
p1115
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1116
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004054e0\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00404a0c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404a13\nJMP 0x00404a34\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404a34\nTEST BPL,BPL\nJZ 0x00404a2f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404a40\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1117
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 e7 0a 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1118
S'.text:00000000004049e0\n.text:00000000004049e1\n.text:00000000004049e3\n.text:00000000004049e5\n.text:00000000004049e6\n.text:00000000004049e7\n.text:00000000004049ea\n.text:00000000004049ed\n.text:00000000004049ef\n.text:00000000004049f2\n.text:00000000004049f4\n.text:00000000004049f9\n.text:00000000004049fd\n.text:00000000004049ff\n.text:0000000000404a01\n.text:0000000000404a04\n.text:0000000000404a06\n.text:0000000000404a08\n.text:0000000000404a0a\n.text:0000000000404a0c\n.text:0000000000404a0e\n.text:0000000000404a11\n.text:0000000000404a13\n.text:0000000000404a16\n.text:0000000000404a18\n.text:0000000000404a1c\n.text:0000000000404a20\n.text:0000000000404a23\n.text:0000000000404a27\n.text:0000000000404a28\n.text:0000000000404a2a\n.text:0000000000404a2c\n.text:0000000000404a2d\n.text:0000000000404a2f\n.text:0000000000404a34\n.text:0000000000404a38\n.text:0000000000404a39\n.text:0000000000404a3b\n.text:0000000000404a3d\n.text:0000000000404a3e\n'
p1119
tp1120
sS'strcaseeq3'
p1121
(S'\n__stdcall strcaseeq3()\n'
p1122
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1123
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004054e0\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x004049a0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004049a7\nJMP 0x004049ca\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004049ca\nTEST BPL,BPL\nJZ 0x004049c5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004049e0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1124
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 53 0b 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1125
S'.text:0000000000404970\n.text:0000000000404971\n.text:0000000000404973\n.text:0000000000404975\n.text:0000000000404977\n.text:0000000000404978\n.text:000000000040497b\n.text:000000000040497e\n.text:0000000000404981\n.text:0000000000404983\n.text:0000000000404986\n.text:0000000000404988\n.text:000000000040498d\n.text:0000000000404991\n.text:0000000000404993\n.text:0000000000404995\n.text:0000000000404998\n.text:000000000040499a\n.text:000000000040499c\n.text:000000000040499e\n.text:00000000004049a0\n.text:00000000004049a2\n.text:00000000004049a5\n.text:00000000004049a7\n.text:00000000004049aa\n.text:00000000004049ac\n.text:00000000004049b0\n.text:00000000004049b4\n.text:00000000004049b8\n.text:00000000004049bb\n.text:00000000004049bc\n.text:00000000004049be\n.text:00000000004049c0\n.text:00000000004049c2\n.text:00000000004049c3\n.text:00000000004049c5\n.text:00000000004049ca\n.text:00000000004049cb\n.text:00000000004049cd\n.text:00000000004049cf\n.text:00000000004049d1\n.text:00000000004049d2\n'
p1126
tp1127
sS'qsort'
p1128
(S'\n__stdcall qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)\n'
p1129
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\u000a\u000a{\u000a  (*(code *)PTR_qsort_00609068)();\u000a  return;\u000a}\u000a\u000a
p1130
S'JMP qword ptr [0x00609068]\n'
p1131
S'ff 25 22 7b 20 00\n'
p1132
S'.plt:0000000000401540\n'
p1133
tp1134
sS'register_tm_clones'
p1135
(S'\n__stdcall register_tm_clones()\n'
p1136
V\u000a/* WARNING: Removing unreachable block (ram,0x00401923) */\u000a/* WARNING: Removing unreachable block (ram,0x0040192d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1137
S'MOV ESI,0x609288\nPUSH RBP\nSUB RSI,0x609288\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401938\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401938\nPOP RBP\nMOV EDI,0x609288\nJMP RAX\nPOP RBP\nRET\n'
p1138
S'be 88 92 60 00\n55\n48 81 ee 88 92 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 88 92 60 00\nff e0\n5d\nc3\n'
p1139
S'.text:0000000000401900\n.text:0000000000401905\n.text:0000000000401906\n.text:000000000040190d\n.text:0000000000401911\n.text:0000000000401914\n.text:0000000000401917\n.text:000000000040191b\n.text:000000000040191e\n.text:0000000000401921\n.text:0000000000401923\n.text:0000000000401928\n.text:000000000040192b\n.text:000000000040192d\n.text:000000000040192e\n.text:0000000000401933\n.text:0000000000401938\n.text:0000000000401939\n'
p1140
tp1141
sS'gettext_quote'
p1142
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1143
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00406eb0;\u000a        pcVar2 = &DAT_00406eb4;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1144
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004015a0\nCMP RAX,RBX\nJNZ 0x004047d8\nCALL 0x004056f0\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x004047e0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404788\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406ea0\nMOV EAX,0x406ea4\nJMP 0x004047d4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x004047e0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004047c6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406eb0\nMOV EAX,0x406eb4\nJMP 0x004047d4\nCMP R14D,0x9\nMOV ECX,0x406e94\nMOV EAX,0x406e98\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1145
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 67 ce ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 a9 0f 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 a0 6e 40 00\nb8 a4 6e 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 b0 6e 40 00\nb8 b4 6e 40 00\neb 0e\n41 83 fe 09\nb9 94 6e 40 00\nb8 98 6e 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1146
S'.text:0000000000404720\n.text:0000000000404721\n.text:0000000000404723\n.text:0000000000404724\n.text:0000000000404727\n.text:000000000040472a\n.text:000000000040472c\n.text:0000000000404731\n.text:0000000000404734\n.text:0000000000404739\n.text:000000000040473c\n.text:0000000000404742\n.text:0000000000404747\n.text:000000000040474a\n.text:000000000040474f\n.text:0000000000404754\n.text:0000000000404759\n.text:000000000040475f\n.text:0000000000404765\n.text:0000000000404768\n.text:000000000040476a\n.text:000000000040476c\n.text:0000000000404771\n.text:0000000000404775\n.text:0000000000404777\n.text:0000000000404779\n.text:000000000040477c\n.text:0000000000404781\n.text:0000000000404786\n.text:0000000000404788\n.text:000000000040478d\n.text:0000000000404792\n.text:0000000000404797\n.text:000000000040479d\n.text:00000000004047a3\n.text:00000000004047a6\n.text:00000000004047a8\n.text:00000000004047aa\n.text:00000000004047af\n.text:00000000004047b3\n.text:00000000004047b5\n.text:00000000004047b7\n.text:00000000004047ba\n.text:00000000004047bf\n.text:00000000004047c4\n.text:00000000004047c6\n.text:00000000004047ca\n.text:00000000004047cf\n.text:00000000004047d4\n.text:00000000004047d8\n.text:00000000004047d9\n.text:00000000004047db\n.text:00000000004047dc\n'
p1147
tp1148
sS'c_islower'
p1149
(S'\n__stdcall c_islower()\n'
p1150
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1151
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1152
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1153
S'.text:0000000000405480\n.text:0000000000405483\n.text:0000000000405486\n.text:0000000000405489\n'
p1154
tp1155
sS'fclose'
p1156
(S'\n__stdcall fclose(FILE * __stream)\n'
p1157
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00609088)();\u000a  return iVar1;\u000a}\u000a\u000a
p1158
S'JMP qword ptr [0x00609088]\n'
p1159
S'ff 25 02 7b 20 00\n'
p1160
S'.plt:0000000000401580\n'
p1161
tp1162
sS'cut_stream'
p1163
(S'\n__stdcall cut_stream(FILE * stream)\n'
p1164
V\u000avoid cut_stream(FILE *stream)\u000a\u000a{\u000a  if (operating_mode == byte_mode) {\u000a    cut_bytes(stream);\u000a    return;\u000a  }\u000a  cut_fields(stream);\u000a  return;\u000a}\u000a\u000a
p1165
S'CMP dword ptr [0x006092f0],0x1\nJNZ 0x0040210b\nJMP 0x00402110\nJMP 0x00402220\n'
p1166
S'83 3d e9 71 20 00 01\n75 02\neb 05\ne9 10 01 00 00\n'
p1167
S'.text:0000000000402100\n.text:0000000000402107\n.text:0000000000402109\n.text:000000000040210b\n'
p1168
tp1169
sS'__ctype_get_mb_cur_max'
p1170
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1171
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_006090a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1172
S'JMP qword ptr [0x006090a0]\n'
p1173
S'ff 25 ea 7a 20 00\n'
p1174
S'.plt:00000000004015b0\n'
p1175
tp1176
sS'freadptrinc'
p1177
(S'\n__stdcall freadptrinc(FILE * fp, size_t increment)\n'
p1178
V\u000avoid freadptrinc(FILE *fp,size_t increment)\u000a\u000a{\u000a  fp->_IO_read_ptr = fp->_IO_read_ptr + increment;\u000a  return;\u000a}\u000a\u000a
p1179
S'ADD qword ptr [RDI + 0x8],RSI\nRET\n'
p1180
S'48 01 77 08\nc3\n'
p1181
S'.text:00000000004056e0\n.text:00000000004056e4\n'
p1182
tp1183
sS'clearerr_unlocked'
p1184
(S'\n__stdcall clearerr_unlocked(FILE * __stream)\n'
p1185
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid clearerr_unlocked(FILE *__stream)\u000a\u000a{\u000a  (*(code *)PTR_clearerr_unlocked_00609078)();\u000a  return;\u000a}\u000a\u000a
p1186
S'JMP qword ptr [0x00609078]\n'
p1187
S'ff 25 12 7b 20 00\n'
p1188
S'.plt:0000000000401560\n'
p1189
tp1190
sS'quotearg_n_style'
p1191
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1192
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1193
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00404450\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00404220\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1194
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1195
S'.text:0000000000404410\n.text:0000000000404411\n.text:0000000000404413\n.text:0000000000404414\n.text:0000000000404418\n.text:000000000040441b\n.text:000000000040441d\n.text:0000000000404422\n.text:0000000000404425\n.text:000000000040442a\n.text:0000000000404431\n.text:0000000000404433\n.text:0000000000404436\n.text:0000000000404439\n.text:000000000040443e\n.text:0000000000404442\n.text:0000000000404443\n.text:0000000000404445\n.text:0000000000404446\n'
p1196
tp1197
sS'freadseek'
p1198
(S'\n__stdcall freadseek(FILE * fp, size_t offset)\n'
p1199
V\u000aint freadseek(FILE *fp,size_t offset)\u000a\u000a{\u000a  int __fd;\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  __off_t _Var3;\u000a  size_t sVar4;\u000a  ulong increment;\u000a  char buf [4096];\u000a  ulong local_1038 [513];\u000a  \u000a  if (offset == 0) {\u000a    return 0;\u000a  }\u000a  sVar1 = freadahead(fp);\u000a  while (sVar1 != 0) {\u000a    pcVar2 = freadptr(fp,local_1038);\u000a    if ((pcVar2 != (char *)0x0) && (local_1038[0] != 0)) {\u000a      increment = local_1038[0];\u000a      if (offset <= local_1038[0]) {\u000a        increment = offset;\u000a      }\u000a      freadptrinc(fp,increment);\u000a      offset = offset - increment;\u000a      if (offset == 0) {\u000a        return 0;\u000a      }\u000a      sVar1 = sVar1 - increment;\u000a      if (sVar1 == 0) break;\u000a    }\u000a    __fd = fgetc((FILE *)fp);\u000a    if (__fd == -1) goto LAB_004056bc;\u000a    sVar1 = sVar1 - (ulong)(offset != 1);\u000a    offset = offset - 1;\u000a    if (offset == 0) {\u000a      return 0;\u000a    }\u000a  }\u000a  __fd = fileno((FILE *)fp);\u000a  if ((-1 < __fd) && (_Var3 = lseek(__fd,0,1), -1 < _Var3)) {\u000a    __fd = rpl_fseeko(fp,offset);\u000a    return __fd;\u000a  }\u000a  while( true ) {\u000a    increment = 0x1000;\u000a    if (offset < 0x1000) {\u000a      increment = offset;\u000a    }\u000a    sVar4 = fread(local_1038,1,increment,(FILE *)fp);\u000a    if (sVar4 < increment) break;\u000a    offset = offset - increment;\u000a    if (offset == 0) {\u000a      return 0;\u000a    }\u000a  }\u000aLAB_004056bc:\u000a  __fd = ferror((FILE *)fp);\u000a  return -(uint)(__fd != 0);\u000a}\u000a\u000a
p1200
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x1008\nMOV R13,RSI\nMOV R14,RDI\nXOR R15D,R15D\nTEST R13,R13\nJZ 0x004056c9\nMOV RDI,R14\nCALL 0x00405a20\nMOV RBP,RAX\nMOV R12,RSP\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST RBP,RBP\nJZ 0x00405647\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00405340\nTEST RAX,RAX\nJZ 0x0040561e\nMOV RBX,qword ptr [RSP]\nTEST RBX,RBX\nJZ 0x0040561e\nCMP RBX,R13\nCMOVNC RBX,R13\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004056e0\nSUB R13,RBX\nJZ 0x004056c9\nSUB RBP,RBX\nJZ 0x00405647\nMOV RDI,R14\nCALL 0x00401640\nCMP EAX,-0x1\nJZ 0x004056bc\nXOR EAX,EAX\nMOV RCX,R13\nDEC RCX\nSETNZ AL\nSUB RBP,RAX\nDEC R13\nJNZ 0x004055e0\nJMP 0x004056c9\nMOV RDI,R14\nCALL 0x00401710\nTEST EAX,EAX\nJS 0x0040567b\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401600\nTEST RAX,RAX\nJS 0x0040567b\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00405370\nMOV R15D,EAX\nJMP 0x004056c9\nMOV R15,RSP\nXOR EBP,EBP\nCMP R13,0x1000\nMOV EBX,0x1000\nCMOVC RBX,R13\nMOV ESI,0x1\nMOV RDI,R15\nMOV RDX,RBX\nMOV RCX,R14\nCALL 0x00401550\nCMP RAX,RBX\nMOV RCX,RBX\nCMOVC RCX,RBP\nCMP RAX,RBX\nJC 0x004056bc\nSUB R13,RCX\nJNZ 0x00405680\nXOR R15D,R15D\nJMP 0x004056c9\nMOV RDI,R14\nCALL 0x00401520\nNEG EAX\nSBB R15D,R15D\nMOV EAX,R15D\nADD RSP,0x1008\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1201
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 08 10 00 00\n49 89 f5\n49 89 fe\n45 31 ff\n4d 85 ed\n0f 84 06 01 00 00\n4c 89 f7\ne8 55 04 00 00\n48 89 c5\n49 89 e4\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 85 ed\n74 62\n4c 89 f7\n4c 89 e6\ne8 50 fd ff ff\n48 85 c0\n74 29\n48 8b 1c 24\n48 85 db\n74 20\n4c 39 eb\n49 0f 43 dd\n4c 89 f7\n48 89 de\ne8 d0 00 00 00\n49 29 dd\n0f 84 b0 00 00 00\n48 29 dd\n74 29\n4c 89 f7\ne8 1a c0 ff ff\n83 f8 ff\n0f 84 8d 00 00 00\n31 c0\n4c 89 e9\n48 ff c9\n0f 95 c0\n48 29 c5\n49 ff cd\n75 9e\ne9 82 00 00 00\n4c 89 f7\ne8 c1 c0 ff ff\n85 c0\n78 28\n31 f6\nba 01 00 00 00\n89 c7\ne8 9f bf ff ff\n48 85 c0\n78 15\nba 01 00 00 00\n4c 89 f7\n4c 89 ee\ne8 fa fc ff ff\n41 89 c7\neb 4e\n49 89 e7\n31 ed\n49 81 fd 00 10 00 00\nbb 00 10 00 00\n49 0f 42 dd\nbe 01 00 00 00\n4c 89 ff\n48 89 da\n4c 89 f1\ne8 ad be ff ff\n48 39 d8\n48 89 d9\n48 0f 42 cd\n48 39 d8\n72 0a\n49 29 cd\n75 c9\n45 31 ff\neb 0d\n4c 89 f7\ne8 5c be ff ff\nf7 d8\n45 19 ff\n44 89 f8\n48 81 c4 08 10 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1202
S'.text:00000000004055a0\n.text:00000000004055a1\n.text:00000000004055a3\n.text:00000000004055a5\n.text:00000000004055a7\n.text:00000000004055a9\n.text:00000000004055aa\n.text:00000000004055b1\n.text:00000000004055b4\n.text:00000000004055b7\n.text:00000000004055ba\n.text:00000000004055bd\n.text:00000000004055c3\n.text:00000000004055c6\n.text:00000000004055cb\n.text:00000000004055ce\n.text:00000000004055d1\n.text:00000000004055e0\n.text:00000000004055e3\n.text:00000000004055e5\n.text:00000000004055e8\n.text:00000000004055eb\n.text:00000000004055f0\n.text:00000000004055f3\n.text:00000000004055f5\n.text:00000000004055f9\n.text:00000000004055fc\n.text:00000000004055fe\n.text:0000000000405601\n.text:0000000000405605\n.text:0000000000405608\n.text:000000000040560b\n.text:0000000000405610\n.text:0000000000405613\n.text:0000000000405619\n.text:000000000040561c\n.text:000000000040561e\n.text:0000000000405621\n.text:0000000000405626\n.text:0000000000405629\n.text:000000000040562f\n.text:0000000000405631\n.text:0000000000405634\n.text:0000000000405637\n.text:000000000040563a\n.text:000000000040563d\n.text:0000000000405640\n.text:0000000000405642\n.text:0000000000405647\n.text:000000000040564a\n.text:000000000040564f\n.text:0000000000405651\n.text:0000000000405653\n.text:0000000000405655\n.text:000000000040565a\n.text:000000000040565c\n.text:0000000000405661\n.text:0000000000405664\n.text:0000000000405666\n.text:000000000040566b\n.text:000000000040566e\n.text:0000000000405671\n.text:0000000000405676\n.text:0000000000405679\n.text:000000000040567b\n.text:000000000040567e\n.text:0000000000405680\n.text:0000000000405687\n.text:000000000040568c\n.text:0000000000405690\n.text:0000000000405695\n.text:0000000000405698\n.text:000000000040569b\n.text:000000000040569e\n.text:00000000004056a3\n.text:00000000004056a6\n.text:00000000004056a9\n.text:00000000004056ad\n.text:00000000004056b0\n.text:00000000004056b2\n.text:00000000004056b5\n.text:00000000004056b7\n.text:00000000004056ba\n.text:00000000004056bc\n.text:00000000004056bf\n.text:00000000004056c4\n.text:00000000004056c6\n.text:00000000004056c9\n.text:00000000004056cc\n.text:00000000004056d3\n.text:00000000004056d4\n.text:00000000004056d6\n.text:00000000004056d8\n.text:00000000004056da\n.text:00000000004056dc\n.text:00000000004056dd\n'
p1203
tp1204
sS'fwrite'
p1205
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1206
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_006091e0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1207
S'JMP qword ptr [0x006091e0]\n'
p1208
S'ff 25 aa 79 20 00\n'
p1209
S'.plt:0000000000401830\n'
p1210
tp1211
sS'quote_n'
p1212
(S'\n__stdcall quote_n(char * arg)\n'
p1213
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1214
S'MOV RDX,-0x1\nJMP 0x004046e0\n'
p1215
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1216
S'.text:0000000000404700\n.text:0000000000404707\n'
p1217
tp1218
sS'cut_file'
p1219
(S'\n__stdcall cut_file(char * file)\n'
p1220
V\u000a_Bool cut_file(char *file)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  char *pcVar4;\u000a  FILE *fp;\u000a  \u000a  if ((*file == '-') && (file[1] == 0)) {\u000a    have_read_stdin = 1;\u000a    fp = stdin;\u000a  }\u000a  else {\u000a    fp = (FILE *)fopen(file,"r");\u000a    if (fp == (FILE *)0x0) goto LAB_00402098;\u000a  }\u000a  fadvise(fp);\u000a  cut_stream(fp);\u000a  iVar2 = ferror_unlocked((FILE *)fp);\u000a  if (iVar2 == 0) {\u000a    if ((*file == '-') && (file[1] == 0)) {\u000a      clearerr_unlocked((FILE *)fp);\u000a      return true;\u000a    }\u000a    iVar2 = rpl_fclose(fp);\u000a    if (iVar2 != -1) {\u000a      return true;\u000a    }\u000a  }\u000aLAB_00402098:\u000a  puVar3 = (uint *)__errno_location();\u000a  uVar1 = *puVar3;\u000a  pcVar4 = quotearg_n_style_colon((char *)0x0);\u000a  error(0,(ulong)uVar1,0x40691d,pcVar4);\u000a  return false;\u000a}\u000a\u000a
p1221
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCMP byte ptr [RBX],0x2d\nJNZ 0x00402052\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x00402069\nMOV ESI,0x40641e\nMOV RDI,RBX\nCALL 0x00401800\nMOV RBP,RAX\nTEST RBP,RBP\nJNZ 0x00402077\nJMP 0x00402098\nMOV byte ptr [0x006092f6],0x1\nMOV RBP,qword ptr [0x006092b0]\nMOV ESI,0x2\nMOV RDI,RBP\nCALL 0x00402df0\nMOV RDI,RBP\nCALL 0x00402100\nMOV RDI,RBP\nCALL 0x004016b0\nTEST EAX,EAX\nJZ 0x004020cc\nCALL 0x004014d0\nMOV R14D,dword ptr [RAX]\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBX\nCALL 0x004045d0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40691d\nXOR EAX,EAX\nMOV ESI,R14D\nCALL 0x004017d0\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCMP byte ptr [RBX],0x2d\nJNZ 0x004020d7\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x004020e9\nMOV RDI,RBP\nCALL 0x00405270\nMOV BPL,0x1\nCMP EAX,-0x1\nJNZ 0x004020c5\nJMP 0x00402098\nMOV RDI,RBP\nCALL 0x00401560\nMOV BPL,0x1\nJMP 0x004020c5\n'
p1222
S'55\n41 56\n53\n48 89 fb\n80 3b 2d\n75 06\n80 7b 01 00\n74 17\nbe 1e 64 40 00\n48 89 df\ne8 a1 f7 ff ff\n48 89 c5\n48 85 ed\n75 10\neb 2f\nc6 05 86 72 20 00 01\n48 8b 2d 39 72 20 00\nbe 02 00 00 00\n48 89 ef\ne8 6c 0d 00 00\n48 89 ef\ne8 74 00 00 00\n48 89 ef\ne8 1c f6 ff ff\n85 c0\n74 34\ne8 33 f4 ff ff\n44 8b 30\n31 ed\n31 ff\nbe 03 00 00 00\n48 89 da\ne8 1f 25 00 00\n48 89 c1\n31 ff\nba 1d 69 40 00\n31 c0\n44 89 f6\ne8 0b f7 ff ff\n89 e8\n5b\n41 5e\n5d\nc3\n80 3b 2d\n75 06\n80 7b 01 00\n74 12\n48 89 ef\ne8 91 31 00 00\n40 b5 01\n83 f8 ff\n75 de\neb af\n48 89 ef\ne8 6f f4 ff ff\n40 b5 01\neb cf\n'
p1223
S'.text:0000000000402040\n.text:0000000000402041\n.text:0000000000402043\n.text:0000000000402044\n.text:0000000000402047\n.text:000000000040204a\n.text:000000000040204c\n.text:0000000000402050\n.text:0000000000402052\n.text:0000000000402057\n.text:000000000040205a\n.text:000000000040205f\n.text:0000000000402062\n.text:0000000000402065\n.text:0000000000402067\n.text:0000000000402069\n.text:0000000000402070\n.text:0000000000402077\n.text:000000000040207c\n.text:000000000040207f\n.text:0000000000402084\n.text:0000000000402087\n.text:000000000040208c\n.text:000000000040208f\n.text:0000000000402094\n.text:0000000000402096\n.text:0000000000402098\n.text:000000000040209d\n.text:00000000004020a0\n.text:00000000004020a2\n.text:00000000004020a4\n.text:00000000004020a9\n.text:00000000004020ac\n.text:00000000004020b1\n.text:00000000004020b4\n.text:00000000004020b6\n.text:00000000004020bb\n.text:00000000004020bd\n.text:00000000004020c0\n.text:00000000004020c5\n.text:00000000004020c7\n.text:00000000004020c8\n.text:00000000004020ca\n.text:00000000004020cb\n.text:00000000004020cc\n.text:00000000004020cf\n.text:00000000004020d1\n.text:00000000004020d5\n.text:00000000004020d7\n.text:00000000004020da\n.text:00000000004020df\n.text:00000000004020e2\n.text:00000000004020e5\n.text:00000000004020e7\n.text:00000000004020e9\n.text:00000000004020ec\n.text:00000000004020f1\n.text:00000000004020f4\n'
p1224
tp1225
sS'FUN_00401490'
p1226
(S'\n__stdcall FUN_00401490()\n'
p1227
V\u000avoid FUN_00401490(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00609010)();\u000a  return;\u000a}\u000a\u000a
p1228
S'PUSH qword ptr [0x00609008]\nJMP qword ptr [0x00609010]\n'
p1229
S'ff 35 72 7b 20 00\nff 25 74 7b 20 00\n'
p1230
S'.plt:0000000000401490\n.plt:0000000000401496\n'
p1231
tp1232
sS'memchr2'
p1233
(S'\n__stdcall memchr2(void * s, size_t n)\n'
p1234
V\u000avoid * memchr2(void *s,size_t n)\u000a\u000a{\u000a  ulong *puVar1;\u000a  ulong uVar2;\u000a  uint uVar3;\u000a  void *pvVar4;\u000a  ulong in_RCX;\u000a  ulong uVar5;\u000a  byte in_DL;\u000a  ulong uVar6;\u000a  uint uVar7;\u000a  undefined4 uVar8;\u000a  bool bVar9;\u000a  \u000a  uVar7 = (uint)n & 0xff;\u000a  if (uVar7 == (uint)in_DL) {\u000a    pvVar4 = (void *)(*(code *)PTR_memchr_00609108)();\u000a    return pvVar4;\u000a  }\u000a  if (in_RCX != 0) {\u000a    do {\u000a      if (((ulong)s & 7) == 0) break;\u000a      if ((uint)*(byte *)s == uVar7) {\u000a        return (ulong *)s;\u000a      }\u000a      if ((uint)*(byte *)s == (uint)in_DL) {\u000a        return (ulong *)s;\u000a      }\u000a      s = (void *)((long)s + 1);\u000a      bVar9 = in_RCX != 1;\u000a      in_RCX = in_RCX - 1;\u000a    } while (bVar9);\u000a  }\u000a  if (7 < in_RCX) {\u000a    uVar3 = uVar7 << 8 | uVar7;\u000a    uVar3 = uVar3 << 0x10 | uVar3;\u000a    uVar8 = CONCAT22(CONCAT11(in_DL,in_DL),CONCAT11(in_DL,in_DL));\u000a    do {\u000a      uVar5 = *(ulong *)s ^ CONCAT44(uVar3,uVar3);\u000a      uVar6 = *(ulong *)s ^ CONCAT44(uVar8,uVar8);\u000a      puVar1 = (ulong *)s + 1;\u000a      uVar2 = in_RCX - 8;\u000a      if ((((uVar6 ^ 0x8080808080808080) & uVar6 + 0xfefefefefefefeff |\u000a           (uVar5 ^ 0x8080808080808080) & uVar5 + 0xfefefefefefefeff) & 0x8080808080808080) != 0)\u000a      break;\u000a      in_RCX = uVar2;\u000a      s = puVar1;\u000a    } while (7 < uVar2);\u000a  }\u000a  while( true ) {\u000a    if (in_RCX == 0) {\u000a      return (void *)0x0;\u000a    }\u000a    if ((uint)*(byte *)s == uVar7) break;\u000a    if ((uint)*(byte *)s == (uint)in_DL) {\u000a      return (ulong *)s;\u000a    }\u000a    in_RCX = in_RCX - 1;\u000a    s = (ulong *)((long)s + 1);\u000a  }\u000a  return (ulong *)s;\u000a}\u000a\u000a
p1235
S'PUSH R14\nPUSH RBX\nMOVZX ESI,SIL\nMOVZX R8D,DL\nCMP ESI,R8D\nJNZ 0x0040311b\nMOV RDX,RCX\nPOP RBX\nPOP R14\nJMP 0x00401680\nTEST RCX,RCX\nJZ 0x0040314b\nMOV EAX,EDI\nAND EAX,0x7\nTEST RAX,RAX\nJZ 0x0040314b\nMOVZX EAX,byte ptr [RDI]\nCMP EAX,ESI\nJZ 0x00403216\nCMP EAX,R8D\nJZ 0x00403216\nINC RDI\nCMP RCX,0x1\nLEA RCX,[RCX + -0x1]\nJNZ 0x00403120\nCMP RCX,0x8\nJC 0x004031f7\nMOV EAX,ESI\nSHL EAX,0x8\nOR EAX,ESI\nMOV EDX,R8D\nSHL EDX,0x8\nOR EDX,R8D\nMOV R10D,EAX\nSHL R10D,0x10\nOR R10D,EAX\nMOV R11D,EDX\nSHL R11D,0x10\nOR R11D,EDX\nMOV R9,R10\nSHL R9,0x20\nOR R9,R10\nMOV R14,R11\nSHL R14,0x20\nOR R14,R11\nMOV R11,-0x7f7f7f7f7f7f7f80\nMOV R10,-0x101010101010101\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,RCX\nMOV RBX,RDI\nMOV RDX,qword ptr [RBX]\nMOV RCX,RDX\nXOR RCX,R9\nXOR RDX,R14\nLEA RDI,[RCX + R10*0x1]\nXOR RCX,R11\nAND RCX,RDI\nLEA RDI,[RDX + R10*0x1]\nXOR RDX,R11\nAND RDX,RDI\nOR RDX,RCX\nLEA RDI,[RBX + 0x8]\nLEA RCX,[RAX + -0x8]\nAND RDX,R11\nCMOVNZ RDI,RBX\nCMOVNZ RCX,RAX\nTEST RDX,RDX\nJNZ 0x004031f7\nCMP RCX,0x7\nJA 0x004031b0\nTEST RCX,RCX\nJZ 0x00403214\nNOP dword ptr [RAX]\nMOVZX EAX,byte ptr [RDI]\nCMP EAX,ESI\nJZ 0x00403216\nCMP EAX,R8D\nJZ 0x00403216\nINC RDI\nDEC RCX\nJNZ 0x00403200\nXOR EDI,EDI\nMOV RAX,RDI\nPOP RBX\nPOP R14\nRET\n'
p1236
S'41 56\n53\n40 0f b6 f6\n44 0f b6 c2\n44 39 c6\n75 0b\n48 89 ca\n5b\n41 5e\ne9 65 e5 ff ff\n48 85 c9\n74 2b\n89 f8\n83 e0 07\n48 85 c0\n74 21\n0f b6 07\n39 f0\n0f 84 e1 00 00 00\n44 39 c0\n0f 84 d8 00 00 00\n48 ff c7\n48 83 f9 01\n48 8d 49 ff\n75 d5\n48 83 f9 08\n0f 82 a2 00 00 00\n89 f0\nc1 e0 08\n09 f0\n44 89 c2\nc1 e2 08\n44 09 c2\n41 89 c2\n41 c1 e2 10\n41 09 c2\n41 89 d3\n41 c1 e3 10\n41 09 d3\n4d 89 d1\n49 c1 e1 20\n4d 09 d1\n4d 89 de\n49 c1 e6 20\n4d 09 de\n49 bb 80 80 80 80 80 80 80 80\n49 ba ff fe fe fe fe fe fe fe\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 c8\n48 89 fb\n48 8b 13\n48 89 d1\n4c 31 c9\n4c 31 f2\n4a 8d 3c 11\n4c 31 d9\n48 21 f9\n4a 8d 3c 12\n4c 31 da\n48 21 fa\n48 09 ca\n48 8d 7b 08\n48 8d 48 f8\n4c 21 da\n48 0f 45 fb\n48 0f 45 c8\n48 85 d2\n75 06\n48 83 f9 07\n77 b9\n48 85 c9\n74 18\n0f 1f 40 00\n0f b6 07\n39 f0\n74 0f\n44 39 c0\n74 0a\n48 ff c7\n48 ff c9\n75 ec\n31 ff\n48 89 f8\n5b\n41 5e\nc3\n'
p1237
S'.text:0000000000403100\n.text:0000000000403102\n.text:0000000000403103\n.text:0000000000403107\n.text:000000000040310b\n.text:000000000040310e\n.text:0000000000403110\n.text:0000000000403113\n.text:0000000000403114\n.text:0000000000403116\n.text:000000000040311b\n.text:000000000040311e\n.text:0000000000403120\n.text:0000000000403122\n.text:0000000000403125\n.text:0000000000403128\n.text:000000000040312a\n.text:000000000040312d\n.text:000000000040312f\n.text:0000000000403135\n.text:0000000000403138\n.text:000000000040313e\n.text:0000000000403141\n.text:0000000000403145\n.text:0000000000403149\n.text:000000000040314b\n.text:000000000040314f\n.text:0000000000403155\n.text:0000000000403157\n.text:000000000040315a\n.text:000000000040315c\n.text:000000000040315f\n.text:0000000000403162\n.text:0000000000403165\n.text:0000000000403168\n.text:000000000040316c\n.text:000000000040316f\n.text:0000000000403172\n.text:0000000000403176\n.text:0000000000403179\n.text:000000000040317c\n.text:0000000000403180\n.text:0000000000403183\n.text:0000000000403186\n.text:000000000040318a\n.text:000000000040318d\n.text:0000000000403197\n.text:00000000004031a1\n.text:00000000004031b0\n.text:00000000004031b3\n.text:00000000004031b6\n.text:00000000004031b9\n.text:00000000004031bc\n.text:00000000004031bf\n.text:00000000004031c2\n.text:00000000004031c6\n.text:00000000004031c9\n.text:00000000004031cc\n.text:00000000004031d0\n.text:00000000004031d3\n.text:00000000004031d6\n.text:00000000004031d9\n.text:00000000004031dd\n.text:00000000004031e1\n.text:00000000004031e4\n.text:00000000004031e8\n.text:00000000004031ec\n.text:00000000004031ef\n.text:00000000004031f1\n.text:00000000004031f5\n.text:00000000004031f7\n.text:00000000004031fa\n.text:00000000004031fc\n.text:0000000000403200\n.text:0000000000403203\n.text:0000000000403205\n.text:0000000000403207\n.text:000000000040320a\n.text:000000000040320c\n.text:000000000040320f\n.text:0000000000403212\n.text:0000000000403214\n.text:0000000000403216\n.text:0000000000403219\n.text:000000000040321a\n.text:000000000040321c\n'
p1238
tp1239
sS'quotearg_alloc'
p1240
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1241
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1242
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00404090\n'
p1243
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1244
S'.text:0000000000404080\n.text:0000000000404083\n.text:0000000000404085\n.text:0000000000404088\n'
p1245
tp1246
sS'__do_global_dtors_aux'
p1247
(S'\n__stdcall __do_global_dtors_aux()\n'
p1248
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1249
S'CMP byte ptr [0x006092e8],0x0\nJNZ 0x0040195a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x004018c0\nPOP RBP\nMOV byte ptr [0x006092e8],0x1\nRET\n'
p1250
S'80 3d a1 79 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 8e 79 20 00 01\nf3 c3\n'
p1251
S'.text:0000000000401940\n.text:0000000000401947\n.text:0000000000401949\n.text:000000000040194a\n.text:000000000040194d\n.text:0000000000401952\n.text:0000000000401953\n.text:000000000040195a\n'
p1252
tp1253
sS'close_stdout_set_file_name'
p1254
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1255
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1256
S'MOV qword ptr [0x00609338],RDI\nRET\n'
p1257
S'48 89 3d 31 66 20 00\nc3\n'
p1258
S'.text:0000000000402d00\n.text:0000000000402d07\n'
p1259
tp1260
sS'c_isprint'
p1261
(S'\n__stdcall c_isprint()\n'
p1262
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1263
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1264
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1265
S'.text:0000000000405490\n.text:0000000000405493\n.text:0000000000405496\n.text:0000000000405499\n'
p1266
tp1267
sS'_fini'
p1268
(S'\n__stdcall _fini()\n'
p1269
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1270
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1271
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1272
S'.fini:0000000000405afc\n.fini:0000000000405b00\n.fini:0000000000405b04\n'
p1273
tp1274
sS'fgetc'
p1275
(S'\n__stdcall fgetc(FILE * __stream)\n'
p1276
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fgetc(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fgetc_006090e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1277
S'JMP qword ptr [0x006090e8]\n'
p1278
S'ff 25 a2 7a 20 00\n'
p1279
S'.plt:0000000000401640\n'
p1280
tp1281
sS'__fpending'
p1282
(S'\n__stdcall __fpending()\n'
p1283
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00609050)();\u000a  return;\u000a}\u000a\u000a
p1284
S'JMP qword ptr [0x00609050]\n'
p1285
S'ff 25 3a 7b 20 00\n'
p1286
S'.plt:0000000000401510\n'
p1287
tp1288
s.