(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060b150)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0060b150]\n'
p4
S'ff 25 9a 9b 20 00\n'
p5
S'.plt:00000000004015b0\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_004088bb,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x405717;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x405798;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40582c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x004055a8\nMOV EDX,0x4088a8\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401690\nJMP 0x004055bd\nMOV EDX,0x4088b4\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401690\nXOR EDI,EDI\nMOV ESI,0x4088bb\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x408b90\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401690\nXOR EDI,EDI\nMOV ESI,0x4088bf\nMOV EDX,0x5\nCALL 0x00401420\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401510\nCMP R12,0x9\nJA 0x00405646\nJMP qword ptr [0x408858 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40898a\nMOV EDX,0x5\nCALL 0x00401420\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401690\nXOR EDI,EDI\nMOV ESI,0x408ac9\nMOV EDX,0x5\nCALL 0x00401420\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401690\nADD RSP,0x38\nJMP 0x004058b7\nXOR EDI,EDI\nMOV ESI,0x40899a\nMOV EDX,0x5\nCALL 0x00401420\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401690\nXOR EDI,EDI\nMOV ESI,0x4089b1\nMOV EDX,0x5\nCALL 0x00401420\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401690\nXOR EDI,EDI\nMOV ESI,0x4089cd\nMOV EDX,0x5\nCALL 0x00401420\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401690\nADD RSP,0x18\nJMP 0x004058b7\nXOR EDI,EDI\nMOV ESI,0x4089ed\nMOV EDX,0x5\nCALL 0x00401420\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401690\nADD RSP,0x18\nJMP 0x004058b7\nXOR EDI,EDI\nMOV ESI,0x408a11\nMOV EDX,0x5\nCALL 0x00401420\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401690\nADD RSP,0x28\nJMP 0x004058b7\nXOR EDI,EDI\nMOV ESI,0x408a39\nMOV EDX,0x5\nCALL 0x00401420\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401690\nADD RSP,0x28\nJMP 0x004058b7\nXOR EDI,EDI\nMOV ESI,0x408a65\nMOV EDX,0x5\nCALL 0x00401420\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401690\nADD RSP,0x38\nJMP 0x004058b7\nXOR EDI,EDI\nMOV ESI,0x408a95\nMOV EDX,0x5\nCALL 0x00401420\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401690\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401360\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba a8 88 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 ea c0 ff ff\neb 15\nba b4 88 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 d3 c0 ff ff\n31 ff\nbe bb 88 40 00\nba 05 00 00 00\ne8 52 be ff ff\n48 89 c1\nbe 01 00 00 00\nba 90 8b 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 a5 c0 ff ff\n31 ff\nbe bf 88 40 00\nba 05 00 00 00\ne8 24 be ff ff\n48 89 c7\n4c 89 f6\ne8 09 bf ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 58 88 40 00\n31 ff\nbe 8a 89 40 00\nba 05 00 00 00\ne8 fa bd ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 4a c0 ff ff\n31 ff\nbe c9 8a 40 00\nba 05 00 00 00\ne8 c9 bd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 01 c0 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 9a 89 40 00\nba 05 00 00 00\ne8 77 bd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 c3 bf ff ff\n31 ff\nbe b1 89 40 00\nba 05 00 00 00\ne8 42 bd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 8a bf ff ff\n31 ff\nbe cd 89 40 00\nba 05 00 00 00\ne8 09 bd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 54 bf ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe ed 89 40 00\nba 05 00 00 00\ne8 ca bc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 12 bf ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 11 8a 40 00\nba 05 00 00 00\ne8 88 bc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 c8 be ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 39 8a 40 00\nba 05 00 00 00\ne8 3e bc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 7e be ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 65 8a 40 00\nba 05 00 00 00\ne8 f4 bb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 2c be ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 95 8a 40 00\nba 05 00 00 00\ne8 a5 bb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 dd bd ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 9c ba ff ff\n'
p12
S'.text:0000000000405570\n.text:0000000000405572\n.text:0000000000405574\n.text:0000000000405576\n.text:0000000000405577\n.text:0000000000405578\n.text:000000000040557b\n.text:000000000040557e\n.text:0000000000405581\n.text:0000000000405584\n.text:0000000000405587\n.text:000000000040558a\n.text:000000000040558f\n.text:0000000000405592\n.text:0000000000405594\n.text:0000000000405599\n.text:000000000040559b\n.text:000000000040559e\n.text:00000000004055a1\n.text:00000000004055a6\n.text:00000000004055a8\n.text:00000000004055ad\n.text:00000000004055af\n.text:00000000004055b2\n.text:00000000004055b5\n.text:00000000004055b8\n.text:00000000004055bd\n.text:00000000004055bf\n.text:00000000004055c4\n.text:00000000004055c9\n.text:00000000004055ce\n.text:00000000004055d1\n.text:00000000004055d6\n.text:00000000004055db\n.text:00000000004055e1\n.text:00000000004055e3\n.text:00000000004055e6\n.text:00000000004055eb\n.text:00000000004055ed\n.text:00000000004055f2\n.text:00000000004055f7\n.text:00000000004055fc\n.text:00000000004055ff\n.text:0000000000405602\n.text:0000000000405607\n.text:000000000040560b\n.text:000000000040560d\n.text:0000000000405615\n.text:0000000000405617\n.text:000000000040561c\n.text:0000000000405621\n.text:0000000000405626\n.text:0000000000405629\n.text:000000000040562c\n.text:0000000000405631\n.text:0000000000405633\n.text:0000000000405636\n.text:000000000040563a\n.text:000000000040563b\n.text:000000000040563d\n.text:000000000040563f\n.text:0000000000405641\n.text:0000000000405646\n.text:0000000000405648\n.text:000000000040564d\n.text:0000000000405652\n.text:0000000000405657\n.text:000000000040565a\n.text:000000000040565d\n.text:0000000000405661\n.text:0000000000405665\n.text:000000000040566a\n.text:000000000040566f\n.text:0000000000405672\n.text:0000000000405676\n.text:000000000040567a\n.text:000000000040567e\n.text:0000000000405682\n.text:0000000000405686\n.text:000000000040568a\n.text:000000000040568f\n.text:0000000000405693\n.text:0000000000405698\n.text:000000000040569a\n.text:000000000040569f\n.text:00000000004056a4\n.text:00000000004056a9\n.text:00000000004056ac\n.text:00000000004056af\n.text:00000000004056b3\n.text:00000000004056b8\n.text:00000000004056ba\n.text:00000000004056bd\n.text:00000000004056c1\n.text:00000000004056c2\n.text:00000000004056c4\n.text:00000000004056c6\n.text:00000000004056c8\n.text:00000000004056cd\n.text:00000000004056cf\n.text:00000000004056d4\n.text:00000000004056d9\n.text:00000000004056de\n.text:00000000004056e1\n.text:00000000004056e4\n.text:00000000004056e8\n.text:00000000004056ec\n.text:00000000004056f1\n.text:00000000004056f3\n.text:00000000004056f6\n.text:00000000004056fa\n.text:00000000004056fb\n.text:00000000004056fd\n.text:00000000004056ff\n.text:0000000000405701\n.text:0000000000405706\n.text:0000000000405708\n.text:000000000040570d\n.text:0000000000405712\n.text:0000000000405717\n.text:000000000040571a\n.text:000000000040571d\n.text:0000000000405721\n.text:0000000000405725\n.text:0000000000405729\n.text:000000000040572e\n.text:0000000000405730\n.text:0000000000405733\n.text:0000000000405737\n.text:000000000040573c\n.text:0000000000405740\n.text:0000000000405745\n.text:0000000000405747\n.text:000000000040574c\n.text:0000000000405751\n.text:0000000000405756\n.text:0000000000405759\n.text:000000000040575c\n.text:0000000000405760\n.text:0000000000405764\n.text:0000000000405769\n.text:000000000040576e\n.text:0000000000405771\n.text:0000000000405775\n.text:0000000000405779\n.text:000000000040577e\n.text:0000000000405782\n.text:0000000000405787\n.text:0000000000405789\n.text:000000000040578e\n.text:0000000000405793\n.text:0000000000405798\n.text:000000000040579b\n.text:000000000040579e\n.text:00000000004057a2\n.text:00000000004057a6\n.text:00000000004057aa\n.text:00000000004057af\n.text:00000000004057b4\n.text:00000000004057b7\n.text:00000000004057bb\n.text:00000000004057bf\n.text:00000000004057c3\n.text:00000000004057c8\n.text:00000000004057cc\n.text:00000000004057d1\n.text:00000000004057d3\n.text:00000000004057d8\n.text:00000000004057dd\n.text:00000000004057e2\n.text:00000000004057e5\n.text:00000000004057e8\n.text:00000000004057ec\n.text:00000000004057f0\n.text:00000000004057f5\n.text:00000000004057fa\n.text:00000000004057fd\n.text:0000000000405801\n.text:0000000000405805\n.text:0000000000405809\n.text:000000000040580d\n.text:0000000000405812\n.text:0000000000405816\n.text:000000000040581b\n.text:000000000040581d\n.text:0000000000405822\n.text:0000000000405827\n.text:000000000040582c\n.text:000000000040582f\n.text:0000000000405832\n.text:0000000000405836\n.text:000000000040583a\n.text:000000000040583e\n.text:0000000000405843\n.text:0000000000405848\n.text:000000000040584b\n.text:000000000040584f\n.text:0000000000405853\n.text:0000000000405857\n.text:000000000040585b\n.text:000000000040585f\n.text:0000000000405864\n.text:0000000000405868\n.text:000000000040586a\n.text:000000000040586c\n.text:0000000000405871\n.text:0000000000405876\n.text:000000000040587b\n.text:000000000040587e\n.text:0000000000405881\n.text:0000000000405885\n.text:0000000000405889\n.text:000000000040588e\n.text:0000000000405893\n.text:0000000000405896\n.text:000000000040589a\n.text:000000000040589e\n.text:00000000004058a2\n.text:00000000004058a6\n.text:00000000004058aa\n.text:00000000004058ae\n.text:00000000004058b3\n.text:00000000004058b7\n.text:00000000004058b8\n.text:00000000004058ba\n.text:00000000004058bc\n.text:00000000004058be\n.text:00000000004058bf\n'
p13
tp14
sS'build_spec_list'
p15
(S'\n__stdcall build_spec_list(E_string * es, Spec_list * result)\n'
p16
V\u000a_Bool build_spec_list(E_string *es,Spec_list *result)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char *arg;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  size_t len;\u000a  ulong start_idx;\u000a  size_t i;\u000a  size_t i_00;\u000a  uchar char_to_repeat;\u000a  byte local_59;\u000a  char *local_58;\u000a  char *local_50;\u000a  long local_48;\u000a  count local_40;\u000a  size_t local_38;\u000a  \u000a  if (es->len < 3) {\u000a    i_00 = 0;\u000a  }\u000a  else {\u000a    start_idx = 2;\u000a    i = 0;\u000a    local_58 = es->s;\u000a    do {\u000a      _Var1 = es_match(es,i);\u000a      if (_Var1 == false) {\u000aLAB_00402c2f:\u000a        i_00 = i + 1;\u000a        _Var1 = es_match(es,i_00);\u000a        if (_Var1 == false) {\u000a          append_normal_char(result);\u000a        }\u000a        else {\u000a          _Var1 = append_range(result);\u000a          if (_Var1 == false) {\u000a            return false;\u000a          }\u000a          i_00 = i + 3;\u000a        }\u000a      }\u000a      else {\u000a        i_00 = i + 1;\u000a        _Var1 = es_match(es,i_00);\u000a        if (((_Var1 == false) && (_Var1 = es_match(es,i_00), _Var1 == false)) ||\u000a           (_Var1 = find_closing_delim(es,start_idx,(size_t *)(ulong)(uint)(int)local_58[i_00]),\u000a           _Var1 == false)) {\u000aLAB_00402c00:\u000a          iVar2 = find_bracketed_repeat(es,i_00,&local_59,&local_40,&local_38);\u000a          if (iVar2 != 0) {\u000a            if (iVar2 != -1) {\u000a              return false;\u000a            }\u000a            goto LAB_00402c2f;\u000a          }\u000a          append_repeated_char(result,(ulong)local_59);\u000a          i_00 = local_38 + 1;\u000a        }\u000a        else {\u000a          len = local_48 - start_idx;\u000a          if (len == 0) {\u000a            if (local_58[i + 1] == ':') {\u000a              arg = "missing character class name \u005c'[::]\u005c'";\u000a            }\u000a            else {\u000a              arg = "missing equivalence class character \u005c'[==]\u005c'";\u000a            }\u000a            uVar3 = dcgettext(0,arg,5);\u000a            error(0,0,uVar3,uVar3);\u000a            return false;\u000a          }\u000a          local_50 = local_58 + i + 2;\u000a          if (local_58[i + 1] == ':') {\u000a            _Var1 = append_char_class(result,local_50,len);\u000a            if (_Var1 == false) {\u000a              _Var1 = star_digits_closebracket(es,start_idx);\u000a              if (_Var1 == false) {\u000a                arg = make_printable_str(local_50,len);\u000a                uVar3 = dcgettext(0,"invalid character class %s",5);\u000a                pcVar4 = quote(arg);\u000aLAB_00402d83:\u000a                error(0,0,uVar3,pcVar4);\u000a                free(arg);\u000a                return false;\u000a              }\u000a              goto LAB_00402c00;\u000a            }\u000a          }\u000a          else {\u000a            _Var1 = append_equiv_class(result,local_50,len);\u000a            if (_Var1 == false) {\u000a              _Var1 = star_digits_closebracket(es,start_idx);\u000a              if (_Var1 == false) {\u000a                pcVar4 = make_printable_str(local_50,len);\u000a                uVar3 = dcgettext(0,"%s: equivalence class operand must be a single character",5);\u000a                arg = pcVar4;\u000a                goto LAB_00402d83;\u000a              }\u000a              goto LAB_00402c00;\u000a            }\u000a          }\u000a          i_00 = local_48 + 2;\u000a        }\u000a      }\u000a      start_idx = i_00 + 2;\u000a      i = i_00;\u000a    } while (start_idx < es->len);\u000a  }\u000a  if (i_00 < es->len) {\u000a    do {\u000a      append_normal_char(result);\u000a      i_00 = i_00 + 1;\u000a    } while (i_00 < es->len);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p17
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV R13,RSI\nMOV R14,RDI\nMOV RBX,qword ptr [R14]\nCMP qword ptr [R14 + 0x10],0x3\nJC 0x00402cb2\nXOR R15D,R15D\nMOV R12D,0x2\nMOV qword ptr [RSP + 0x10],RBX\nMOV EDX,0x5b\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00402dd0\nTEST AL,AL\nJZ 0x00402c2f\nMOV RBX,R13\nLEA R13,[R15 + 0x1]\nMOV EDX,0x3a\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00402dd0\nTEST AL,AL\nJNZ 0x00402b5b\nMOV EDX,0x3d\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00402dd0\nTEST AL,AL\nJZ 0x00402c00\nMOV RAX,qword ptr [RSP + 0x10]\nMOVSX EDX,byte ptr [RAX + R13*0x1]\nMOV RDI,R14\nMOV RSI,R12\nLEA RCX,[RSP + 0x20]\nCALL 0x00402df0\nTEST AL,AL\nJZ 0x00402c00\nMOV RBP,qword ptr [RSP + 0x20]\nSUB RBP,R12\nMOV RCX,qword ptr [RSP + 0x10]\nMOVZX EAX,byte ptr [RCX + R15*0x1 + 0x1]\nJZ 0x00402cea\nLEA RCX,[RCX + R15*0x1 + 0x2]\nCMP AL,0x3a\nMOV qword ptr [RSP + 0x18],RCX\nMOV RDI,RBX\nMOV RSI,RCX\nMOV RDX,RBP\nJNZ 0x00402bca\nCALL 0x00402e50\nTEST AL,AL\nJNZ 0x00402bd3\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00402ec0\nTEST AL,AL\nJNZ 0x00402c00\nJMP 0x00402d19\nCALL 0x00403060\nTEST AL,AL\nJZ 0x00402be4\nMOV RBP,qword ptr [RSP + 0x20]\nADD RBP,0x2\nMOV R13,RBX\nJMP 0x00402c9a\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00402ec0\nTEST AL,AL\nJZ 0x00402d53\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,R14\nMOV RSI,R13\nLEA RDX,[RSP + 0xf]\nLEA RCX,[RSP + 0x28]\nLEA R8,[RSP + 0x30]\nCALL 0x004030d0\nTEST EAX,EAX\nJZ 0x00402c7d\nCMP EAX,-0x1\nMOV R13,RBX\nMOV RBX,qword ptr [RSP + 0x10]\nJNZ 0x00402d90\nLEA RBP,[R15 + 0x1]\nMOV EDX,0x2d\nMOV RDI,R14\nMOV RSI,RBP\nCALL 0x00402dd0\nMOVZX ECX,byte ptr [RBX + R15*0x1]\nTEST AL,AL\nJZ 0x00402c70\nMOVZX EDX,byte ptr [RBX + R15*0x1 + 0x2]\nMOVZX ESI,CL\nMOV RDI,R13\nCALL 0x004032b0\nTEST AL,AL\nJZ 0x00402d90\nADD R15,0x3\nMOV RBP,R15\nJMP 0x00402c9f\nMOVZX ESI,CL\nMOV RDI,R13\nCALL 0x00403370\nJMP 0x00402c9f\nMOV RDX,qword ptr [RSP + 0x28]\nMOVZX ESI,byte ptr [RSP + 0xf]\nMOV R13,RBX\nMOV RDI,R13\nCALL 0x00403250\nMOV RBP,qword ptr [RSP + 0x30]\nINC RBP\nMOV RBX,qword ptr [RSP + 0x10]\nLEA R12,[RBP + 0x2]\nCMP R12,qword ptr [R14 + 0x10]\nMOV R15,RBP\nJC 0x00402b10\nJMP 0x00402cb4\nXOR EBP,EBP\nMOV R15B,0x1\nCMP RBP,qword ptr [R14 + 0x10]\nJNC 0x00402d93\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX ESI,byte ptr [RBX + RBP*0x1]\nMOV RDI,R13\nCALL 0x00403370\nINC RBP\nCMP RBP,qword ptr [R14 + 0x10]\nJC 0x00402cd0\nJMP 0x00402d93\nXOR EDI,EDI\nCMP AL,0x3a\nJNZ 0x00402cf7\nMOV ESI,0x407b2c\nJMP 0x00402cfc\nMOV ESI,0x407b50\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401620\nJMP 0x00402d90\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RSI,RBP\nCALL 0x00402f50\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x407b7b\nMOV EDX,0x5\nCALL 0x00401420\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x004050d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nJMP 0x00402d83\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RSI,RBP\nCALL 0x00402f50\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x407b96\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00401620\nMOV RDI,RBX\nCALL 0x00401350\nXOR R15D,R15D\nMOV EAX,R15D\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p18
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n49 89 f5\n49 89 fe\n49 8b 1e\n49 83 7e 10 03\n0f 82 b0 01 00 00\n45 31 ff\n41 bc 02 00 00 00\n48 89 5c 24 10\nba 5b 00 00 00\n4c 89 f7\n4c 89 fe\ne8 b0 02 00 00\n84 c0\n0f 84 07 01 00 00\n4c 89 eb\n4d 8d 6f 01\nba 3a 00 00 00\n4c 89 f7\n4c 89 ee\ne8 91 02 00 00\n84 c0\n75 18\nba 3d 00 00 00\n4c 89 f7\n4c 89 ee\ne8 7d 02 00 00\n84 c0\n0f 84 a5 00 00 00\n48 8b 44 24 10\n42 0f be 14 28\n4c 89 f7\n4c 89 e6\n48 8d 4c 24 20\ne8 7b 02 00 00\n84 c0\n0f 84 83 00 00 00\n48 8b 6c 24 20\n4c 29 e5\n48 8b 4c 24 10\n42 0f b6 44 39 01\n0f 84 54 01 00 00\n4a 8d 4c 39 02\n3c 3a\n48 89 4c 24 18\n48 89 df\n48 89 ce\n48 89 ea\n75 1d\ne8 9e 02 00 00\n84 c0\n75 1d\n4c 89 f7\n4c 89 e6\ne8 ff 02 00 00\n84 c0\n75 3b\ne9 4f 01 00 00\ne8 91 04 00 00\n84 c0\n74 11\n48 8b 6c 24 20\n48 83 c5 02\n49 89 dd\ne9 b6 00 00 00\n4c 89 f7\n4c 89 e6\ne8 d1 02 00 00\n84 c0\n0f 84 5c 01 00 00\n66 0f 1f 84 00 00 00 00 00\n4c 89 f7\n4c 89 ee\n48 8d 54 24 0f\n48 8d 4c 24 28\n4c 8d 44 24 30\ne8 b6 04 00 00\n85 c0\n74 5f\n83 f8 ff\n49 89 dd\n48 8b 5c 24 10\n0f 85 61 01 00 00\n49 8d 6f 01\nba 2d 00 00 00\n4c 89 f7\n48 89 ee\ne8 8d 01 00 00\n42 0f b6 0c 3b\n84 c0\n74 24\n42 0f b6 54 3b 02\n0f b6 f1\n4c 89 ef\ne8 53 06 00 00\n84 c0\n0f 84 2b 01 00 00\n49 83 c7 03\n4c 89 fd\neb 31\n0f b6 f1\n4c 89 ef\ne8 f5 06 00 00\neb 22\n48 8b 54 24 28\n0f b6 74 24 0f\n49 89 dd\n4c 89 ef\ne8 be 05 00 00\n48 8b 6c 24 30\n48 ff c5\n48 8b 5c 24 10\n4c 8d 65 02\n4d 3b 66 10\n49 89 ef\n0f 82 60 fe ff ff\neb 02\n31 ed\n41 b7 01\n49 3b 6e 10\n0f 83 d2 00 00 00\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 34 2b\n4c 89 ef\ne8 94 06 00 00\n48 ff c5\n49 3b 6e 10\n72 eb\ne9 a9 00 00 00\n31 ff\n3c 3a\n75 07\nbe 2c 7b 40 00\neb 05\nbe 50 7b 40 00\nba 05 00 00 00\ne8 1a e7 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 09 e9 ff ff\neb 77\n48 8b 7c 24 18\n48 89 ee\ne8 2a 02 00 00\n48 89 c3\n31 ff\nbe 7b 7b 40 00\nba 05 00 00 00\ne8 e6 e6 ff ff\n48 89 c5\n48 89 df\ne8 8b 23 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\neb 30\n48 8b 7c 24 18\n48 89 ee\ne8 f0 01 00 00\n48 89 c3\n31 ff\nbe 96 7b 40 00\nba 05 00 00 00\ne8 ac e6 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n48 89 d9\ne8 98 e8 ff ff\n48 89 df\ne8 c0 e5 ff ff\n45 31 ff\n44 89 f8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p19
S'.text:0000000000402ae0\n.text:0000000000402ae1\n.text:0000000000402ae3\n.text:0000000000402ae5\n.text:0000000000402ae7\n.text:0000000000402ae9\n.text:0000000000402aea\n.text:0000000000402aee\n.text:0000000000402af1\n.text:0000000000402af4\n.text:0000000000402af7\n.text:0000000000402afc\n.text:0000000000402b02\n.text:0000000000402b05\n.text:0000000000402b0b\n.text:0000000000402b10\n.text:0000000000402b15\n.text:0000000000402b18\n.text:0000000000402b1b\n.text:0000000000402b20\n.text:0000000000402b22\n.text:0000000000402b28\n.text:0000000000402b2b\n.text:0000000000402b2f\n.text:0000000000402b34\n.text:0000000000402b37\n.text:0000000000402b3a\n.text:0000000000402b3f\n.text:0000000000402b41\n.text:0000000000402b43\n.text:0000000000402b48\n.text:0000000000402b4b\n.text:0000000000402b4e\n.text:0000000000402b53\n.text:0000000000402b55\n.text:0000000000402b5b\n.text:0000000000402b60\n.text:0000000000402b65\n.text:0000000000402b68\n.text:0000000000402b6b\n.text:0000000000402b70\n.text:0000000000402b75\n.text:0000000000402b77\n.text:0000000000402b7d\n.text:0000000000402b82\n.text:0000000000402b85\n.text:0000000000402b8a\n.text:0000000000402b90\n.text:0000000000402b96\n.text:0000000000402b9b\n.text:0000000000402b9d\n.text:0000000000402ba2\n.text:0000000000402ba5\n.text:0000000000402ba8\n.text:0000000000402bab\n.text:0000000000402bad\n.text:0000000000402bb2\n.text:0000000000402bb4\n.text:0000000000402bb6\n.text:0000000000402bb9\n.text:0000000000402bbc\n.text:0000000000402bc1\n.text:0000000000402bc3\n.text:0000000000402bc5\n.text:0000000000402bca\n.text:0000000000402bcf\n.text:0000000000402bd1\n.text:0000000000402bd3\n.text:0000000000402bd8\n.text:0000000000402bdc\n.text:0000000000402bdf\n.text:0000000000402be4\n.text:0000000000402be7\n.text:0000000000402bea\n.text:0000000000402bef\n.text:0000000000402bf1\n.text:0000000000402bf7\n.text:0000000000402c00\n.text:0000000000402c03\n.text:0000000000402c06\n.text:0000000000402c0b\n.text:0000000000402c10\n.text:0000000000402c15\n.text:0000000000402c1a\n.text:0000000000402c1c\n.text:0000000000402c1e\n.text:0000000000402c21\n.text:0000000000402c24\n.text:0000000000402c29\n.text:0000000000402c2f\n.text:0000000000402c33\n.text:0000000000402c38\n.text:0000000000402c3b\n.text:0000000000402c3e\n.text:0000000000402c43\n.text:0000000000402c48\n.text:0000000000402c4a\n.text:0000000000402c4c\n.text:0000000000402c52\n.text:0000000000402c55\n.text:0000000000402c58\n.text:0000000000402c5d\n.text:0000000000402c5f\n.text:0000000000402c65\n.text:0000000000402c69\n.text:0000000000402c6c\n.text:0000000000402c70\n.text:0000000000402c73\n.text:0000000000402c76\n.text:0000000000402c7b\n.text:0000000000402c7d\n.text:0000000000402c82\n.text:0000000000402c87\n.text:0000000000402c8a\n.text:0000000000402c8d\n.text:0000000000402c92\n.text:0000000000402c97\n.text:0000000000402c9a\n.text:0000000000402c9f\n.text:0000000000402ca3\n.text:0000000000402ca7\n.text:0000000000402caa\n.text:0000000000402cb0\n.text:0000000000402cb2\n.text:0000000000402cb4\n.text:0000000000402cb7\n.text:0000000000402cbb\n.text:0000000000402cc1\n.text:0000000000402cd0\n.text:0000000000402cd4\n.text:0000000000402cd7\n.text:0000000000402cdc\n.text:0000000000402cdf\n.text:0000000000402ce3\n.text:0000000000402ce5\n.text:0000000000402cea\n.text:0000000000402cec\n.text:0000000000402cee\n.text:0000000000402cf0\n.text:0000000000402cf5\n.text:0000000000402cf7\n.text:0000000000402cfc\n.text:0000000000402d01\n.text:0000000000402d06\n.text:0000000000402d09\n.text:0000000000402d0b\n.text:0000000000402d0d\n.text:0000000000402d0f\n.text:0000000000402d12\n.text:0000000000402d17\n.text:0000000000402d19\n.text:0000000000402d1e\n.text:0000000000402d21\n.text:0000000000402d26\n.text:0000000000402d29\n.text:0000000000402d2b\n.text:0000000000402d30\n.text:0000000000402d35\n.text:0000000000402d3a\n.text:0000000000402d3d\n.text:0000000000402d40\n.text:0000000000402d45\n.text:0000000000402d48\n.text:0000000000402d4a\n.text:0000000000402d4c\n.text:0000000000402d4e\n.text:0000000000402d51\n.text:0000000000402d53\n.text:0000000000402d58\n.text:0000000000402d5b\n.text:0000000000402d60\n.text:0000000000402d63\n.text:0000000000402d65\n.text:0000000000402d6a\n.text:0000000000402d6f\n.text:0000000000402d74\n.text:0000000000402d77\n.text:0000000000402d79\n.text:0000000000402d7b\n.text:0000000000402d7d\n.text:0000000000402d80\n.text:0000000000402d83\n.text:0000000000402d88\n.text:0000000000402d8b\n.text:0000000000402d90\n.text:0000000000402d93\n.text:0000000000402d96\n.text:0000000000402d9a\n.text:0000000000402d9b\n.text:0000000000402d9d\n.text:0000000000402d9f\n.text:0000000000402da1\n.text:0000000000402da3\n.text:0000000000402da4\n'
p20
tp21
sS'strchr'
p22
(S'\n__stdcall strchr(char * __s, int __c)\n'
p23
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0060b0b0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p24
S'JMP qword ptr [0x0060b0b0]\n'
p25
S'ff 25 3a 9c 20 00\n'
p26
S'.plt:0000000000401470\n'
p27
tp28
sS'rpl_fclose'
p29
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p30
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_004064d9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_004064d9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401560\nTEST EAX,EAX\nJS 0x004064d9\nMOV RDI,RBX\nCALL 0x004015c0\nTEST EAX,EAX\nJZ 0x004064a7\nMOV RDI,RBX\nCALL 0x00401560\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401490\nCMP RAX,-0x1\nJZ 0x004064d9\nMOV RDI,RBX\nCALL 0x004064f0\nTEST EAX,EAX\nJZ 0x004064d9\nCALL 0x00401370\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004013f0\nTEST EBP,EBP\nJZ 0x004064d2\nCALL 0x00401370\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004013f0\n'
p32
S'55\n53\n50\n48 89 fb\ne8 e5 b0 ff ff\n85 c0\n78 5a\n48 89 df\ne8 39 b1 ff ff\n85 c0\n74 1c\n48 89 df\ne8 cd b0 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 ef af ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 b8 ae ff ff\n8b 28\n48 89 df\ne8 2e af ff ff\n85 ed\n74 0c\ne8 a5 ae ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 09 af ff ff\n'
p33
S'.text:0000000000406470\n.text:0000000000406471\n.text:0000000000406472\n.text:0000000000406473\n.text:0000000000406476\n.text:000000000040647b\n.text:000000000040647d\n.text:000000000040647f\n.text:0000000000406482\n.text:0000000000406487\n.text:0000000000406489\n.text:000000000040648b\n.text:000000000040648e\n.text:0000000000406493\n.text:0000000000406495\n.text:000000000040649a\n.text:000000000040649c\n.text:00000000004064a1\n.text:00000000004064a5\n.text:00000000004064a7\n.text:00000000004064aa\n.text:00000000004064af\n.text:00000000004064b1\n.text:00000000004064b3\n.text:00000000004064b8\n.text:00000000004064ba\n.text:00000000004064bd\n.text:00000000004064c2\n.text:00000000004064c4\n.text:00000000004064c6\n.text:00000000004064cb\n.text:00000000004064cd\n.text:00000000004064d2\n.text:00000000004064d6\n.text:00000000004064d7\n.text:00000000004064d8\n.text:00000000004064d9\n.text:00000000004064dc\n.text:00000000004064e0\n.text:00000000004064e1\n.text:00000000004064e2\n'
p34
tp35
sS'fwrite_unlocked'
p36
(S'\n__stdcall fwrite_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p37
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_unlocked_0060b160)();\u000a  return sVar1;\u000a}\u000a\u000a
p38
S'JMP qword ptr [0x0060b160]\n'
p39
S'ff 25 8a 9b 20 00\n'
p40
S'.plt:00000000004015d0\n'
p41
tp42
sS'plain_read'
p43
(S'\n__stdcall plain_read(char * buf, size_t size)\n'
p44
V\u000asize_t plain_read(char *buf,size_t size)\u000a\u000a{\u000a  uint uVar1;\u000a  size_t sVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  \u000a  sVar2 = safe_read((void *)0x0,(size_t)buf);\u000a  if (sVar2 == 0xffffffffffffffff) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    uVar4 = dcgettext(0,"read error",5);\u000a    error(1,(ulong)uVar1,uVar4,uVar4);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p45
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nCALL 0x004054e0\nMOV RBX,RAX\nCMP RBX,-0x1\nJNZ 0x004025cb\nCALL 0x00401370\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x408237\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00401620\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p46
S'55\n53\n50\n48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\ne8 4a 2f 00 00\n48 89 c3\n48 83 fb ff\n75 2c\ne8 cc ed ff ff\n8b 28\n31 ff\nbe 37 82 40 00\nba 05 00 00 00\ne8 69 ee ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 ca\ne8 55 f0 ff ff\n48 89 d8\n48 83 c4 08\n5b\n5d\nc3\n'
p47
S'.text:0000000000402580\n.text:0000000000402581\n.text:0000000000402582\n.text:0000000000402583\n.text:0000000000402586\n.text:0000000000402589\n.text:000000000040258b\n.text:000000000040258e\n.text:0000000000402591\n.text:0000000000402596\n.text:0000000000402599\n.text:000000000040259d\n.text:000000000040259f\n.text:00000000004025a4\n.text:00000000004025a6\n.text:00000000004025a8\n.text:00000000004025ad\n.text:00000000004025b2\n.text:00000000004025b7\n.text:00000000004025ba\n.text:00000000004025bf\n.text:00000000004025c1\n.text:00000000004025c3\n.text:00000000004025c6\n.text:00000000004025cb\n.text:00000000004025ce\n.text:00000000004025d2\n.text:00000000004025d3\n.text:00000000004025d4\n'
p48
tp49
sS'to_uchar'
p50
(S'\n__stdcall to_uchar()\n'
p51
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p52
S'MOV EAX,EDI\nRET\n'
p53
S'89 f8\nc3\n'
p54
S'.text:0000000000403430\n.text:0000000000403432\n'
p55
tp56
sS'strncmp'
p57
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060b038)();\u000a  return iVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x0060b038]\n'
p60
S'ff 25 b2 9c 20 00\n'
p61
S'.plt:0000000000401380\n'
p62
tp63
sS'set_initialize'
p64
(S'\n__stdcall set_initialize(Spec_list * s, _Bool * in_set)\n'
p65
V\u000avoid set_initialize(Spec_list *s,_Bool *in_set)\u000a\u000a{\u000a  int iVar1;\u000a  long lVar2;\u000a  long in_RDX;\u000a  \u000a  s->state = 0xfffffffffffffffe;\u000a  while( true ) {\u000a    iVar1 = get_next(s,(Upper_Lower_class *)0x0);\u000a    if (iVar1 == -1) break;\u000a    *(undefined *)(in_RDX + (long)iVar1) = 1;\u000a  }\u000a  if ((char)in_set != 0) {\u000a    lVar2 = 0;\u000a    do {\u000a      *(byte *)(in_RDX + lVar2) = *(byte *)(in_RDX + lVar2) ^ 1;\u000a      lVar2 = lVar2 + 1;\u000a    } while (lVar2 != 0x100);\u000a  }\u000a  return;\u000a}\u000a\u000a
p66
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV R14D,ESI\nMOV RBP,RDI\nMOV qword ptr [RBP + 0x10],-0x2\nJMP 0x00402396\nCDQE\nMOV byte ptr [RBX + RAX*0x1],0x1\nXOR ESI,ESI\nMOV RDI,RBP\nCALL 0x004026c0\nCMP EAX,-0x1\nJNZ 0x00402390\nTEST R14B,R14B\nJZ 0x004023bf\nXOR EAX,EAX\nNOP dword ptr [RAX]\nXOR byte ptr [RBX + RAX*0x1],0x1\nINC RAX\nCMP RAX,0x100\nJNZ 0x004023b0\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p67
S'55\n41 56\n53\n48 89 d3\n41 89 f6\n48 89 fd\n48 c7 45 10 fe ff ff ff\neb 0f\n48 98\nc6 04 03 01\n31 f6\n48 89 ef\ne8 20 03 00 00\n83 f8 ff\n75 eb\n45 84 f6\n74 15\n31 c0\n0f 1f 40 00\n80 34 03 01\n48 ff c0\n48 3d 00 01 00 00\n75 f1\n5b\n41 5e\n5d\nc3\n'
p68
S'.text:0000000000402370\n.text:0000000000402371\n.text:0000000000402373\n.text:0000000000402374\n.text:0000000000402377\n.text:000000000040237a\n.text:000000000040237d\n.text:0000000000402385\n.text:0000000000402390\n.text:0000000000402392\n.text:0000000000402396\n.text:0000000000402398\n.text:000000000040239b\n.text:00000000004023a0\n.text:00000000004023a3\n.text:00000000004023a5\n.text:00000000004023a8\n.text:00000000004023aa\n.text:00000000004023ac\n.text:00000000004023b0\n.text:00000000004023b4\n.text:00000000004023b7\n.text:00000000004023bd\n.text:00000000004023bf\n.text:00000000004023c0\n.text:00000000004023c2\n.text:00000000004023c3\n'
p69
tp70
sS'xnrealloc'
p71
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p72
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p73
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00405ac4\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00405ad0\nPUSH RAX\nCALL 0x00405c20\n'
p74
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p75
S'.text:0000000000405ab0\n.text:0000000000405ab3\n.text:0000000000405ab6\n.text:0000000000405ab9\n.text:0000000000405abb\n.text:0000000000405abf\n.text:0000000000405ac2\n.text:0000000000405ac4\n.text:0000000000405ac5\n'
p76
tp77
sS'quote'
p78
(S'\n__stdcall quote(char * arg)\n'
p79
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p80
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004050c0\n'
p81
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p82
S'.text:00000000004050d0\n.text:00000000004050d3\n.text:00000000004050d5\n.text:00000000004050d8\n'
p83
tp84
sS'emit_bug_reporting_address'
p85
(S'\n__stdcall emit_bug_reporting_address()\n'
p86
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p87
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x408b05\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x408b1a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x408b30\nMOV EDX,0x5\nCALL 0x00401420\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x407771\nMOV ECX,0x407988\nXOR EAX,EAX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x408b44\nMOV EDX,0x5\nCALL 0x00401420\nMOV RSI,qword ptr [0x0060b268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401510\n'
p88
S'50\n31 ff\nbe 05 8b 40 00\nba 05 00 00 00\ne8 1e ba ff ff\n48 89 c1\nbf 01 00 00 00\nba 1a 8b 40 00\n31 c0\n48 89 ce\ne8 f7 bb ff ff\n31 ff\nbe 30 8b 40 00\nba 05 00 00 00\ne8 f6 b9 ff ff\n48 89 c6\nbf 01 00 00 00\nba 71 77 40 00\nb9 88 79 40 00\n31 c0\ne8 cd bb ff ff\n31 ff\nbe 44 8b 40 00\nba 05 00 00 00\ne8 cc b9 ff ff\n48 8b 35 0d 58 20 00\n48 89 c7\n58\ne9 ac ba ff ff\n'
p89
S'.text:00000000004059f0\n.text:00000000004059f1\n.text:00000000004059f3\n.text:00000000004059f8\n.text:00000000004059fd\n.text:0000000000405a02\n.text:0000000000405a05\n.text:0000000000405a0a\n.text:0000000000405a0f\n.text:0000000000405a11\n.text:0000000000405a14\n.text:0000000000405a19\n.text:0000000000405a1b\n.text:0000000000405a20\n.text:0000000000405a25\n.text:0000000000405a2a\n.text:0000000000405a2d\n.text:0000000000405a32\n.text:0000000000405a37\n.text:0000000000405a3c\n.text:0000000000405a3e\n.text:0000000000405a43\n.text:0000000000405a45\n.text:0000000000405a4a\n.text:0000000000405a4f\n.text:0000000000405a54\n.text:0000000000405a5b\n.text:0000000000405a5e\n.text:0000000000405a5f\n'
p90
tp91
sS'is_char_class_member'
p92
(S'\n__stdcall is_char_class_member()\n'
p93
V\u000a_Bool is_char_class_member(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  uint in_ESI;\u000a  uint in_EDI;\u000a  \u000a  if (in_EDI < 0xc) {\u000a    ppuVar1 = __ctype_b_loc();\u000a    return (_Bool)((*(ushort *)(&DAT_00406e30 + (long)(int)in_EDI * 2) &\u000a                   (*ppuVar1)[(ulong)in_ESI & 0xff]) != 0);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nCMP EDI,0xc\nJNC 0x00403aaf\nMOVSXD RBX,EDI\nCALL 0x004016c0\nMOV RAX,qword ptr [RAX]\nMOVZX ECX,BPL\nMOVZX EAX,word ptr [RAX + RCX*0x2]\nTEST word ptr [0x406e30 + RBX + RBX*0x1],AX\nSETNZ AL\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nCALL 0x00401360\n'
p95
S'55\n53\n50\n89 f5\n83 ff 0c\n73 25\n48 63 df\ne8 2e dc ff ff\n48 8b 00\n40 0f b6 cd\n0f b7 04 48\n66 85 84 1b 30 6e 40 00\n0f 95 c0\n48 83 c4 08\n5b\n5d\nc3\ne8 ac d8 ff ff\n'
p96
S'.text:0000000000403a80\n.text:0000000000403a81\n.text:0000000000403a82\n.text:0000000000403a83\n.text:0000000000403a85\n.text:0000000000403a88\n.text:0000000000403a8a\n.text:0000000000403a8d\n.text:0000000000403a92\n.text:0000000000403a95\n.text:0000000000403a99\n.text:0000000000403a9d\n.text:0000000000403aa5\n.text:0000000000403aa8\n.text:0000000000403aac\n.text:0000000000403aad\n.text:0000000000403aae\n.text:0000000000403aaf\n'
p97
tp98
sS'clone_quoting_options'
p99
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p100
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401370\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60d5e0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00405bd0\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p102
S'55\n41 56\n53\n48 89 fb\ne8 d4 d6 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 e0 d5 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 15 1f 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p103
S'.text:0000000000403c90\n.text:0000000000403c91\n.text:0000000000403c93\n.text:0000000000403c94\n.text:0000000000403c97\n.text:0000000000403c9c\n.text:0000000000403c9f\n.text:0000000000403ca2\n.text:0000000000403ca5\n.text:0000000000403caa\n.text:0000000000403cae\n.text:0000000000403cb3\n.text:0000000000403cb6\n.text:0000000000403cbb\n.text:0000000000403cbe\n.text:0000000000403cbf\n.text:0000000000403cc1\n.text:0000000000403cc2\n'
p104
tp105
sS'xmalloc'
p106
(S'\n__stdcall xmalloc(size_t n)\n'
p107
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p108
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401580\nTEST RBX,RBX\nJZ 0x00405aa3\nTEST RAX,RAX\nJZ 0x00405aa5\nPOP RBX\nRET\nCALL 0x00405c20\n'
p109
S'53\n48 89 fb\ne8 e7 ba ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p110
S'.text:0000000000405a90\n.text:0000000000405a91\n.text:0000000000405a94\n.text:0000000000405a99\n.text:0000000000405a9c\n.text:0000000000405a9e\n.text:0000000000405aa1\n.text:0000000000405aa3\n.text:0000000000405aa4\n.text:0000000000405aa5\n'
p111
tp112
sS'quotearg_char_mem'
p113
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p114
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060d610]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060d600]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d5f0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d5e0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00403cf0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404be0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p116
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 08 87 20 00\n48 89 4c 24 30\n0f 10 05 ec 86 20 00\n0f 29 44 24 20\n0f 10 05 d0 86 20 00\n0f 29 44 24 10\n0f 10 05 b4 86 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p117
S'.text:0000000000404ef0\n.text:0000000000404ef2\n.text:0000000000404ef4\n.text:0000000000404ef5\n.text:0000000000404ef9\n.text:0000000000404efb\n.text:0000000000404efe\n.text:0000000000404f01\n.text:0000000000404f08\n.text:0000000000404f0d\n.text:0000000000404f14\n.text:0000000000404f19\n.text:0000000000404f20\n.text:0000000000404f25\n.text:0000000000404f2c\n.text:0000000000404f30\n.text:0000000000404f33\n.text:0000000000404f38\n.text:0000000000404f3b\n.text:0000000000404f3d\n.text:0000000000404f42\n.text:0000000000404f44\n.text:0000000000404f47\n.text:0000000000404f4a\n.text:0000000000404f4d\n.text:0000000000404f52\n.text:0000000000404f56\n.text:0000000000404f57\n.text:0000000000404f59\n.text:0000000000404f5b\n'
p118
tp119
sS'frame_dummy'
p120
(S'\n__stdcall frame_dummy()\n'
p121
V\u000a/* WARNING: Removing unreachable block (ram,0x004017ca) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p122
S'MOV EDI,0x60ae18\nCMP qword ptr [RDI],0x0\nJNZ 0x004017c0\nJMP 0x00401750\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004017bb\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401750\n'
p123
S'bf 18 ae 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p124
S'.text:00000000004017b0\n.text:00000000004017b5\n.text:00000000004017b9\n.text:00000000004017bb\n.text:00000000004017c0\n.text:00000000004017c5\n.text:00000000004017c8\n.text:00000000004017ca\n.text:00000000004017cb\n.text:00000000004017ce\n.text:00000000004017d0\n.text:00000000004017d1\n'
p125
tp126
sS'append_repeated_char'
p127
(S'\n__stdcall append_repeated_char(Spec_list * list, count repeat_count)\n'
p128
V\u000avoid append_repeated_char(Spec_list *list,count repeat_count)\u000a\u000a{\u000a  List_element *pLVar1;\u000a  undefined8 in_RDX;\u000a  \u000a  pLVar1 = (List_element *)xmalloc(0x20);\u000a  pLVar1->next = (List_element *)0x0;\u000a  pLVar1->type = RE_REPEATED_CHAR;\u000a  pLVar1->u[0] = (byte)repeat_count;\u000a  *(undefined8 *)(pLVar1->u + 8) = in_RDX;\u000a  if (list->tail != (List_element *)0x0) {\u000a    list->tail->next = pLVar1;\u000a    list->tail = pLVar1;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("list->tail","src/tr.c",0x2da,\u000a                "void append_repeated_char(struct Spec_list *, unsigned char, count)");\u000a}\u000a\u000a
p129
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,0x20\nCALL 0x00405a90\nMOV qword ptr [RAX + 0x8],0x0\nMOV dword ptr [RAX],0x4\nMOV byte ptr [RAX + 0x10],BPL\nMOV qword ptr [RAX + 0x18],R14\nMOV RCX,qword ptr [RBX + 0x8]\nTEST RCX,RCX\nJZ 0x00403292\nMOV qword ptr [RCX + 0x8],RAX\nMOV qword ptr [RBX + 0x8],RAX\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV EDI,0x407bcf\nMOV ESI,0x4078a2\nMOV EDX,0x2da\nMOV ECX,0x407d61\nCALL 0x004014a0\n'
p130
S'55\n41 56\n53\n49 89 d6\n89 f5\n48 89 fb\nbf 20 00 00 00\ne8 2a 28 00 00\n48 c7 40 08 00 00 00 00\nc7 00 04 00 00 00\n40 88 68 10\n4c 89 70 18\n48 8b 4b 08\n48 85 c9\n74 0d\n48 89 41 08\n48 89 43 08\n5b\n41 5e\n5d\nc3\nbf cf 7b 40 00\nbe a2 78 40 00\nba da 02 00 00\nb9 61 7d 40 00\ne8 f5 e1 ff ff\n'
p131
S'.text:0000000000403250\n.text:0000000000403251\n.text:0000000000403253\n.text:0000000000403254\n.text:0000000000403257\n.text:0000000000403259\n.text:000000000040325c\n.text:0000000000403261\n.text:0000000000403266\n.text:000000000040326e\n.text:0000000000403274\n.text:0000000000403278\n.text:000000000040327c\n.text:0000000000403280\n.text:0000000000403283\n.text:0000000000403285\n.text:0000000000403289\n.text:000000000040328d\n.text:000000000040328e\n.text:0000000000403290\n.text:0000000000403291\n.text:0000000000403292\n.text:0000000000403297\n.text:000000000040329c\n.text:00000000004032a1\n.text:00000000004032a6\n'
p132
tp133
sS'quotearg_n_style_colon'
p134
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p135
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p136
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00404e10\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00403cf0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00404be0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p137
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p138
S'.text:0000000000404f90\n.text:0000000000404f91\n.text:0000000000404f93\n.text:0000000000404f94\n.text:0000000000404f98\n.text:0000000000404f9b\n.text:0000000000404f9d\n.text:0000000000404fa2\n.text:0000000000404fa5\n.text:0000000000404faa\n.text:0000000000404faf\n.text:0000000000404fb4\n.text:0000000000404fb7\n.text:0000000000404fbc\n.text:0000000000404fc3\n.text:0000000000404fc5\n.text:0000000000404fc8\n.text:0000000000404fcb\n.text:0000000000404fd0\n.text:0000000000404fd4\n.text:0000000000404fd5\n.text:0000000000404fd7\n.text:0000000000404fd8\n'
p139
tp140
sS'quote_mem'
p141
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p142
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p143
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004050a0\n'
p144
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p145
S'.text:00000000004050b0\n.text:00000000004050b3\n.text:00000000004050b6\n.text:00000000004050b8\n.text:00000000004050bb\n.text:00000000004050be\n'
p146
tp147
sS'fadvise'
p148
(S'\n__stdcall fadvise(FILE * fp)\n'
p149
V\u000avoid fadvise(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int __advise;\u000a  \u000a  if (fp != (FILE *)0x0) {\u000a    __fd = fileno((FILE *)fp);\u000a    fdadvise(__fd,0,0,__advise);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p150
S'PUSH RBX\nMOV EBX,ESI\nTEST RDI,RDI\nJZ 0x00403bd8\nCALL 0x00401560\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,EAX\nMOV ECX,EBX\nPOP RBX\nJMP 0x00403bb0\nPOP RBX\nRET\n'
p151
S'53\n89 f3\n48 85 ff\n74 10\ne8 93 d9 ff ff\n31 f6\n31 d2\n89 c7\n89 d9\n5b\neb d8\n5b\nc3\n'
p152
S'.text:0000000000403bc0\n.text:0000000000403bc1\n.text:0000000000403bc3\n.text:0000000000403bc6\n.text:0000000000403bc8\n.text:0000000000403bcd\n.text:0000000000403bcf\n.text:0000000000403bd1\n.text:0000000000403bd3\n.text:0000000000403bd5\n.text:0000000000403bd6\n.text:0000000000403bd8\n.text:0000000000403bd9\n'
p153
tp154
sS'fileno'
p155
(S'\n__stdcall fileno(FILE * __stream)\n'
p156
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060b128)();\u000a  return iVar1;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x0060b128]\n'
p158
S'ff 25 c2 9b 20 00\n'
p159
S'.plt:0000000000401560\n'
p160
tp161
sS'mbrtowc'
p162
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060b0a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0060b0a8]\n'
p165
S'ff 25 42 9c 20 00\n'
p166
S'.plt:0000000000401460\n'
p167
tp168
sS'xstrtoumax'
p169
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p170
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00405e86;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00405e86;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00405db5_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00405d93:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00405d93;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00405e67;\u000a  default:\u000aswitchD_00405db5_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00405e67;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00405e67:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00405e86:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p171
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00405ea3\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401370\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x004016c0\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00405ca0\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00405e92\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401650\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00405d00\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00405d31\nCMP EAX,0x22\nJNZ 0x00405e92\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x00405d3c\nJMP 0x00405e86\nTEST R12,R12\nJZ 0x00405e92\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00405e92\nMOV RDI,R12\nCALL 0x00401470\nTEST RAX,RAX\nJZ 0x00405e92\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x00405d3c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00405e86\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00405e86\nMOV RDI,R12\nCALL 0x00401470\nTEST RAX,RAX\nJZ 0x00405dce\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00401470\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00405d93\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x00405d9a\nCMP EAX,0x44\nJZ 0x00405d9a\nCMP EAX,0x69\nJNZ 0x00405d93\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00405da4\nMOV EBP,0x1\nJMP 0x00405da4\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00405dce\nXOR EAX,EAX\nJMP qword ptr [0x408bd0 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00405ef0\nJMP 0x00405e6c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00405e92\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00405ef0\nJMP 0x00405e6c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00405ef0\nJMP 0x00405e6c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00405ef0\nJMP 0x00405e6c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00405e67\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00405ef0\nJMP 0x00405e6c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00405ef0\nJMP 0x00405e6c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00405ef0\nJMP 0x00405e6c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00405ef0\nJMP 0x00405e6c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00405e67\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00405ec0\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x408d80\nMOV ESI,0x408da6\nMOV EDX,0x60\nMOV ECX,0x408db6\nCALL 0x004014a0\n'
p172
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 f2 b6 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 33 ba ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 7c b9 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 54 b7 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 1c b7 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 0a b7 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd d0 8b 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 80 8d 40 00\nbe a6 8d 40 00\nba 60 00 00 00\nb9 b6 8d 40 00\ne8 e4 b5 ff ff\n'
p173
S'.text:0000000000405c50\n.text:0000000000405c51\n.text:0000000000405c53\n.text:0000000000405c55\n.text:0000000000405c57\n.text:0000000000405c59\n.text:0000000000405c5a\n.text:0000000000405c5e\n.text:0000000000405c61\n.text:0000000000405c64\n.text:0000000000405c67\n.text:0000000000405c6a\n.text:0000000000405c6e\n.text:0000000000405c74\n.text:0000000000405c79\n.text:0000000000405c7e\n.text:0000000000405c81\n.text:0000000000405c88\n.text:0000000000405c8d\n.text:0000000000405c90\n.text:0000000000405c93\n.text:0000000000405ca0\n.text:0000000000405ca3\n.text:0000000000405ca6\n.text:0000000000405cab\n.text:0000000000405cad\n.text:0000000000405cb0\n.text:0000000000405cb5\n.text:0000000000405cb9\n.text:0000000000405cbe\n.text:0000000000405cc0\n.text:0000000000405cc6\n.text:0000000000405cc9\n.text:0000000000405ccc\n.text:0000000000405ccf\n.text:0000000000405cd4\n.text:0000000000405cd8\n.text:0000000000405cdc\n.text:0000000000405cdf\n.text:0000000000405ce1\n.text:0000000000405ce4\n.text:0000000000405ce6\n.text:0000000000405ce8\n.text:0000000000405ceb\n.text:0000000000405cf1\n.text:0000000000405cf6\n.text:0000000000405cf9\n.text:0000000000405cfb\n.text:0000000000405d00\n.text:0000000000405d03\n.text:0000000000405d09\n.text:0000000000405d0c\n.text:0000000000405d0e\n.text:0000000000405d14\n.text:0000000000405d17\n.text:0000000000405d1c\n.text:0000000000405d1f\n.text:0000000000405d25\n.text:0000000000405d2d\n.text:0000000000405d2f\n.text:0000000000405d31\n.text:0000000000405d33\n.text:0000000000405d36\n.text:0000000000405d3c\n.text:0000000000405d40\n.text:0000000000405d44\n.text:0000000000405d46\n.text:0000000000405d4c\n.text:0000000000405d4f\n.text:0000000000405d54\n.text:0000000000405d57\n.text:0000000000405d59\n.text:0000000000405d5e\n.text:0000000000405d61\n.text:0000000000405d66\n.text:0000000000405d6b\n.text:0000000000405d6e\n.text:0000000000405d70\n.text:0000000000405d74\n.text:0000000000405d77\n.text:0000000000405d79\n.text:0000000000405d7c\n.text:0000000000405d7e\n.text:0000000000405d81\n.text:0000000000405d83\n.text:0000000000405d85\n.text:0000000000405d89\n.text:0000000000405d8c\n.text:0000000000405d91\n.text:0000000000405d93\n.text:0000000000405d98\n.text:0000000000405d9a\n.text:0000000000405d9f\n.text:0000000000405da4\n.text:0000000000405da8\n.text:0000000000405dab\n.text:0000000000405dae\n.text:0000000000405db1\n.text:0000000000405db3\n.text:0000000000405db5\n.text:0000000000405dbc\n.text:0000000000405dbf\n.text:0000000000405dc4\n.text:0000000000405dc9\n.text:0000000000405dce\n.text:0000000000405dd2\n.text:0000000000405dd7\n.text:0000000000405dda\n.text:0000000000405ddd\n.text:0000000000405de2\n.text:0000000000405de5\n.text:0000000000405dea\n.text:0000000000405def\n.text:0000000000405df1\n.text:0000000000405df4\n.text:0000000000405df9\n.text:0000000000405dfe\n.text:0000000000405e00\n.text:0000000000405e03\n.text:0000000000405e08\n.text:0000000000405e0d\n.text:0000000000405e0f\n.text:0000000000405e12\n.text:0000000000405e17\n.text:0000000000405e19\n.text:0000000000405e1c\n.text:0000000000405e21\n.text:0000000000405e26\n.text:0000000000405e28\n.text:0000000000405e2b\n.text:0000000000405e30\n.text:0000000000405e35\n.text:0000000000405e37\n.text:0000000000405e3a\n.text:0000000000405e3f\n.text:0000000000405e44\n.text:0000000000405e46\n.text:0000000000405e49\n.text:0000000000405e4e\n.text:0000000000405e53\n.text:0000000000405e55\n.text:0000000000405e58\n.text:0000000000405e5d\n.text:0000000000405e5f\n.text:0000000000405e62\n.text:0000000000405e67\n.text:0000000000405e6c\n.text:0000000000405e6e\n.text:0000000000405e72\n.text:0000000000405e76\n.text:0000000000405e7a\n.text:0000000000405e7c\n.text:0000000000405e7f\n.text:0000000000405e83\n.text:0000000000405e86\n.text:0000000000405e8a\n.text:0000000000405e8f\n.text:0000000000405e92\n.text:0000000000405e94\n.text:0000000000405e98\n.text:0000000000405e99\n.text:0000000000405e9b\n.text:0000000000405e9d\n.text:0000000000405e9f\n.text:0000000000405ea1\n.text:0000000000405ea2\n.text:0000000000405ea3\n.text:0000000000405ea8\n.text:0000000000405ead\n.text:0000000000405eb2\n.text:0000000000405eb7\n'
p174
tp175
sS'setlocale'
p176
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p177
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060b178)();\u000a  return pcVar1;\u000a}\u000a\u000a
p178
S'JMP qword ptr [0x0060b178]\n'
p179
S'ff 25 72 9b 20 00\n'
p180
S'.plt:0000000000401600\n'
p181
tp182
sS'c_toupper'
p183
(S'\n__stdcall c_toupper()\n'
p184
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p185
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p186
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p187
S'.text:00000000004060c0\n.text:00000000004060c3\n.text:00000000004060c6\n.text:00000000004060c9\n.text:00000000004060cc\n'
p188
tp189
sS'mbsinit'
p190
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060b1c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x0060b1c8]\n'
p193
S'ff 25 22 9b 20 00\n'
p194
S'.plt:00000000004016a0\n'
p195
tp196
sS'dcgettext'
p197
(S'\n__stdcall dcgettext()\n'
p198
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060b088)();\u000a  return;\u000a}\u000a\u000a
p199
S'JMP qword ptr [0x0060b088]\n'
p200
S'ff 25 62 9c 20 00\n'
p201
S'.plt:0000000000401420\n'
p202
tp203
sS'homogeneous_spec_list'
p204
(S'\n__stdcall homogeneous_spec_list(Spec_list * s)\n'
p205
V\u000a_Bool homogeneous_spec_list(Spec_list *s)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  \u000a  s->state = 0xfffffffffffffffe;\u000a  iVar1 = get_next(s,(Upper_Lower_class *)0x0);\u000a  if (iVar1 != -1) {\u000a    do {\u000a      iVar2 = get_next(s,(Upper_Lower_class *)0x0);\u000a      if (iVar2 == -1) {\u000a        return true;\u000a      }\u000a    } while (iVar2 == iVar1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p206
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV qword ptr [RBX + 0x10],-0x2\nXOR R14D,R14D\nXOR ESI,ESI\nCALL 0x004026c0\nMOV EBP,EAX\nCMP EBP,-0x1\nJZ 0x0040381b\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x004026c0\nCMP EAX,-0x1\nJZ 0x00403818\nCMP EAX,EBP\nJZ 0x00403800\nXOR R14D,R14D\nJMP 0x0040381b\nMOV R14B,0x1\nMOV EAX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p207
S'55\n41 56\n53\n48 89 fb\n48 c7 43 10 fe ff ff ff\n45 31 f6\n31 f6\ne8 c7 ee ff ff\n89 c5\n83 fd ff\n74 1b\n31 f6\n48 89 df\ne8 b6 ee ff ff\n83 f8 ff\n74 09\n39 e8\n74 ed\n45 31 f6\neb 03\n41 b6 01\n44 89 f0\n5b\n41 5e\n5d\nc3\n'
p208
S'.text:00000000004037e0\n.text:00000000004037e1\n.text:00000000004037e3\n.text:00000000004037e4\n.text:00000000004037e7\n.text:00000000004037ef\n.text:00000000004037f2\n.text:00000000004037f4\n.text:00000000004037f9\n.text:00000000004037fb\n.text:00000000004037fe\n.text:0000000000403800\n.text:0000000000403802\n.text:0000000000403805\n.text:000000000040380a\n.text:000000000040380d\n.text:000000000040380f\n.text:0000000000403811\n.text:0000000000403813\n.text:0000000000403816\n.text:0000000000403818\n.text:000000000040381b\n.text:000000000040381e\n.text:000000000040381f\n.text:0000000000403821\n.text:0000000000403822\n'
p209
tp210
sS'quotearg_free'
p211
(S'\n__stdcall quotearg_free()\n'
p212
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p213
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060b208]\nCMP dword ptr [0x0060b210],0x2\nJC 0x00404b7a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401350\nINC RBX\nMOV EAX,dword ptr [0x0060b210]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00404b60\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60d620\nCMP RDI,RAX\nJZ 0x00404ba3\nCALL 0x00401350\nMOV qword ptr [0x0060b218],0x100\nMOV qword ptr [0x0060b220],0x60d620\nMOV EAX,0x60b218\nCMP R14,RAX\nJZ 0x00404bc0\nMOV RDI,R14\nCALL 0x00401350\nMOV qword ptr [0x0060b208],0x60b218\nMOV dword ptr [0x0060b210],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p214
S'41 57\n41 56\n53\n4c 8b 35 bc 66 20 00\n83 3d bd 66 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 e8 c7 ff ff\n48 ff c3\n8b 05 9f 66 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 20 d6 60 00\n48 39 c7\n74 1b\ne8 c3 c7 ff ff\n48 c7 05 80 66 20 00 00 01 00 00\n48 c7 05 7d 66 20 00 20 d6 60 00\nb8 18 b2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 9b c7 ff ff\n48 c7 05 48 66 20 00 18 b2 60 00\nc7 05 46 66 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p215
S'.text:0000000000404b40\n.text:0000000000404b42\n.text:0000000000404b44\n.text:0000000000404b45\n.text:0000000000404b4c\n.text:0000000000404b53\n.text:0000000000404b55\n.text:0000000000404b59\n.text:0000000000404b5e\n.text:0000000000404b60\n.text:0000000000404b63\n.text:0000000000404b68\n.text:0000000000404b6b\n.text:0000000000404b71\n.text:0000000000404b75\n.text:0000000000404b78\n.text:0000000000404b7a\n.text:0000000000404b7e\n.text:0000000000404b83\n.text:0000000000404b86\n.text:0000000000404b88\n.text:0000000000404b8d\n.text:0000000000404b98\n.text:0000000000404ba3\n.text:0000000000404ba8\n.text:0000000000404bab\n.text:0000000000404bad\n.text:0000000000404bb0\n.text:0000000000404bb5\n.text:0000000000404bc0\n.text:0000000000404bca\n.text:0000000000404bcb\n.text:0000000000404bcd\n.text:0000000000404bcf\n'
p216
tp217
sS'quotearg_mem'
p218
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p219
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p220
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404da0\n'
p221
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p222
S'.text:0000000000404dc0\n.text:0000000000404dc3\n.text:0000000000404dc6\n.text:0000000000404dc8\n.text:0000000000404dcb\n.text:0000000000404dce\n'
p223
tp224
sS'string2_extend'
p225
(S'\n__stdcall string2_extend(Spec_list * s1, Spec_list * s2)\n'
p226
V\u000avoid string2_extend(Spec_list *s1,Spec_list *s2)\u000a\u000a{\u000a  ulong uVar1;\u000a  List_element *pLVar2;\u000a  byte *pbVar3;\u000a  undefined8 uVar4;\u000a  \u000a  if (translating == false) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("translating","src/tr.c",0x578,\u000a                  "void string2_extend(const struct Spec_list *, struct Spec_list *)");\u000a  }\u000a  uVar1 = s2->length;\u000a  if (uVar1 <= s1->length && s1->length != uVar1) {\u000a    if (uVar1 == 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("s2->length > 0","src/tr.c",0x57a,\u000a                    "void string2_extend(const struct Spec_list *, struct Spec_list *)");\u000a    }\u000a    pLVar2 = s2->tail;\u000a    switch(pLVar2->type) {\u000a    case RE_NORMAL_CHAR:\u000a    case RE_REPEATED_CHAR:\u000a      pbVar3 = pLVar2->u;\u000a      break;\u000a    case RE_RANGE:\u000a      pbVar3 = pLVar2->u + 1;\u000a      break;\u000a    case RE_CHAR_CLASS:\u000a      uVar4 = dcgettext(0,\u000a                        "when translating with string1 longer than string2,\u005cnthe latter string must not end with a character class"\u000a                        ,5);\u000a      error(1,0,uVar4,uVar4);\u000a    default:\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    }\u000a    append_repeated_char(s2,(ulong)*pbVar3);\u000a    s2->length = s1->length;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("s1->length > s2->length","src/tr.c",0x579,\u000a                "void string2_extend(const struct Spec_list *, struct Spec_list *)");\u000a}\u000a\u000a
p227
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCMP byte ptr [0x0060b2b4],0x0\nJZ 0x00403766\nMOV RAX,qword ptr [RBX + 0x18]\nCMP qword ptr [R14 + 0x18],RAX\nJBE 0x0040377f\nTEST RAX,RAX\nJZ 0x00403798\nMOV RAX,qword ptr [RBX + 0x8]\nMOV ECX,dword ptr [RAX]\nCMP RCX,0x4\nJA 0x004037d6\nJMP qword ptr [0x406c28 + RCX*0x8]\nADD RAX,0x10\nJMP 0x00403743\nADD RAX,0x11\nMOV RDX,qword ptr [R14 + 0x18]\nSUB RDX,qword ptr [RBX + 0x18]\nMOVZX ESI,byte ptr [RAX]\nMOV RDI,RBX\nCALL 0x00403250\nMOV RAX,qword ptr [R14 + 0x18]\nMOV qword ptr [RBX + 0x18],RAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x407f02\nMOV ESI,0x4078a2\nMOV EDX,0x578\nMOV ECX,0x408165\nCALL 0x004014a0\nMOV EDI,0x4081a7\nMOV ESI,0x4078a2\nMOV EDX,0x579\nMOV ECX,0x408165\nCALL 0x004014a0\nMOV EDI,0x4081bf\nMOV ESI,0x4078a2\nMOV EDX,0x57a\nMOV ECX,0x408165\nCALL 0x004014a0\nXOR EDI,EDI\nMOV ESI,0x4081ce\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401620\nCALL 0x00401360\n'
p228
S'41 56\n53\n50\n48 89 f3\n49 89 fe\n80 3d a3 7b 20 00 00\n74 53\n48 8b 43 18\n49 39 46 18\n76 62\n48 85 c0\n74 76\n48 8b 43 08\n8b 08\n48 83 f9 04\n0f 87 a4 00 00 00\nff 24 cd 28 6c 40 00\n48 83 c0 10\neb 04\n48 83 c0 11\n49 8b 56 18\n48 2b 53 18\n0f b6 30\n48 89 df\ne8 fa fa ff ff\n49 8b 46 18\n48 89 43 18\n48 83 c4 08\n5b\n41 5e\nc3\nbf 02 7f 40 00\nbe a2 78 40 00\nba 78 05 00 00\nb9 65 81 40 00\ne8 21 dd ff ff\nbf a7 81 40 00\nbe a2 78 40 00\nba 79 05 00 00\nb9 65 81 40 00\ne8 08 dd ff ff\nbf bf 81 40 00\nbe a2 78 40 00\nba 7a 05 00 00\nb9 65 81 40 00\ne8 ef dc ff ff\n31 ff\nbe ce 81 40 00\nba 05 00 00 00\ne8 5e dc ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 4a de ff ff\ne8 85 db ff ff\n'
p229
S'.text:0000000000403700\n.text:0000000000403702\n.text:0000000000403703\n.text:0000000000403704\n.text:0000000000403707\n.text:000000000040370a\n.text:0000000000403711\n.text:0000000000403713\n.text:0000000000403717\n.text:000000000040371b\n.text:000000000040371d\n.text:0000000000403720\n.text:0000000000403722\n.text:0000000000403726\n.text:0000000000403728\n.text:000000000040372c\n.text:0000000000403732\n.text:0000000000403739\n.text:000000000040373d\n.text:000000000040373f\n.text:0000000000403743\n.text:0000000000403747\n.text:000000000040374b\n.text:000000000040374e\n.text:0000000000403751\n.text:0000000000403756\n.text:000000000040375a\n.text:000000000040375e\n.text:0000000000403762\n.text:0000000000403763\n.text:0000000000403765\n.text:0000000000403766\n.text:000000000040376b\n.text:0000000000403770\n.text:0000000000403775\n.text:000000000040377a\n.text:000000000040377f\n.text:0000000000403784\n.text:0000000000403789\n.text:000000000040378e\n.text:0000000000403793\n.text:0000000000403798\n.text:000000000040379d\n.text:00000000004037a2\n.text:00000000004037a7\n.text:00000000004037ac\n.text:00000000004037b1\n.text:00000000004037b3\n.text:00000000004037b8\n.text:00000000004037bd\n.text:00000000004037c2\n.text:00000000004037c5\n.text:00000000004037ca\n.text:00000000004037cc\n.text:00000000004037ce\n.text:00000000004037d1\n.text:00000000004037d6\n'
p230
tp231
sS'deregister_tm_clones'
p232
(S'\n__stdcall deregister_tm_clones()\n'
p233
V\u000a/* WARNING: Removing unreachable block (ram,0x00401725) */\u000a/* WARNING: Removing unreachable block (ram,0x0040172f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p234
S'MOV EAX,0x60b267\nPUSH RBP\nSUB RAX,0x60b260\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401740\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401740\nPOP RBP\nMOV EDI,0x60b260\nJMP RAX\nPOP RBP\nRET\n'
p235
S'b8 67 b2 60 00\n55\n48 2d 60 b2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 60 b2 60 00\nff e0\n5d\nc3\n'
p236
S'.text:0000000000401710\n.text:0000000000401715\n.text:0000000000401716\n.text:000000000040171c\n.text:0000000000401720\n.text:0000000000401723\n.text:0000000000401725\n.text:000000000040172a\n.text:000000000040172d\n.text:000000000040172f\n.text:0000000000401730\n.text:0000000000401735\n.text:0000000000401740\n.text:0000000000401741\n'
p237
tp238
sS'quotearg_custom'
p239
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p240
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p241
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404fe0\n'
p242
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p243
S'.text:0000000000405060\n.text:0000000000405063\n.text:0000000000405066\n.text:0000000000405069\n.text:000000000040506b\n.text:000000000040506e\n.text:0000000000405071\n.text:0000000000405074\n'
p244
tp245
sS'free'
p246
(S'\n__stdcall free(void * __ptr)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060b020)();\u000a  return;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x0060b020]\n'
p249
S'ff 25 ca 9c 20 00\n'
p250
S'.plt:0000000000401350\n'
p251
tp252
sS'close'
p253
(S'\n__stdcall close(int __fd)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060b0e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x0060b0e0]\n'
p256
S'ff 25 0a 9c 20 00\n'
p257
S'.plt:00000000004014d0\n'
p258
tp259
sS'validate'
p260
(S'\n__stdcall validate(Spec_list * s1, Spec_list * s2)\n'
p261
V\u000avoid validate(Spec_list *s1,Spec_list *s2)\u000a\u000a{\u000a  ulong uVar1;\u000a  _Bool _Var2;\u000a  undefined8 uVar3;\u000a  char *pcVar4;\u000a  \u000a  get_s1_spec_stats(s1);\u000a  if (s1->n_indefinite_repeats != 0) {\u000a    uVar3 = dcgettext(0,"the [c*] repeat construct may not appear in string1",5);\u000a    error(1,0,uVar3);\u000a  }\u000a  if (s2 == (Spec_list *)0x0) {\u000a    return;\u000a  }\u000a  get_s2_spec_stats(s2,s1->length);\u000a  if (1 < s2->n_indefinite_repeats) {\u000a    uVar3 = dcgettext(0,"only one [c*] repeat construct may appear in string2",5);\u000a    error(1,0,uVar3);\u000a  }\u000a  if (translating == false) {\u000a    if (s2->n_indefinite_repeats == 0) {\u000a      return;\u000a    }\u000a    pcVar4 = "the [c*] construct may appear in string2 only when translating";\u000a  }\u000a  else {\u000a    if (s2->has_equiv_class != false) {\u000a      uVar3 = dcgettext(0,"[=c=] expressions may not appear in string2 when translating",5);\u000a      error(1,0,uVar3);\u000a    }\u000a    if (s2->has_restricted_char_class != false) {\u000a      uVar3 = dcgettext(0,\u000a                        "when translating, the only character classes that may appear in\u005cnstring2 are \u005c'upper\u005c' and \u005c'lower\u005c'"\u000a                        ,5);\u000a      error(1,0,uVar3);\u000a    }\u000a    validate_case_classes(s1,s2);\u000a    uVar1 = s2->length;\u000a    if ((uVar1 <= s1->length && s1->length != uVar1) && (truncate_set1 == false)) {\u000a      if (uVar1 == 0) {\u000a        uVar3 = dcgettext(0,"when not truncating set1, string2 must be non-empty",5);\u000a        error(1,0,uVar3,uVar3);\u000a      }\u000a      string2_extend(s1,s2);\u000a    }\u000a    if (complement == false) {\u000a      return;\u000a    }\u000a    if (s1->has_char_class == false) {\u000a      return;\u000a    }\u000a    if ((s2->length == s1->length) && (_Var2 = homogeneous_spec_list(s2), _Var2 != false)) {\u000a      return;\u000a    }\u000a    pcVar4 = \u000a    "when translating with complemented character classes,\u005cnstring2 must map all characters in the domain to one"\u000a    ;\u000a  }\u000a  uVar3 = dcgettext(0,pcVar4,5);\u000a  error(1,0,uVar3,uVar3);\u000a  return;\u000a}\u000a\u000a
p262
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x004034a0\nCMP qword ptr [R14 + 0x20],0x0\nJZ 0x0040220b\nXOR EDI,EDI\nMOV ESI,0x407e68\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401620\nTEST RBX,RBX\nJZ 0x00402365\nMOV RSI,qword ptr [R14 + 0x18]\nMOV RDI,RBX\nCALL 0x004034d0\nCMP qword ptr [RBX + 0x20],0x2\nJC 0x0040224c\nXOR EDI,EDI\nMOV ESI,0x407e9c\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401620\nCMP byte ptr [0x0060b2b4],0x0\nJZ 0x00402332\nCMP byte ptr [RBX + 0x30],0x0\nJZ 0x00402284\nXOR EDI,EDI\nMOV ESI,0x407ed1\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401620\nCMP byte ptr [RBX + 0x32],0x0\nJZ 0x004022af\nXOR EDI,EDI\nMOV ESI,0x407f0e\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401620\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00403510\nMOV RAX,qword ptr [RBX + 0x18]\nCMP qword ptr [R14 + 0x18],RAX\nJBE 0x00402303\nMOV CL,byte ptr [0x0060b2b3]\nTEST CL,CL\nJNZ 0x00402303\nTEST RAX,RAX\nJNZ 0x004022f8\nXOR EDI,EDI\nMOV ESI,0x407f6e\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401620\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00403700\nCMP byte ptr [0x0060b2b0],0x0\nJZ 0x00402365\nCMP byte ptr [R14 + 0x31],0x0\nJZ 0x00402365\nMOV RAX,qword ptr [RBX + 0x18]\nCMP RAX,qword ptr [R14 + 0x18]\nJNZ 0x00402329\nMOV RDI,RBX\nCALL 0x004037e0\nTEST AL,AL\nJNZ 0x00402365\nXOR EDI,EDI\nMOV ESI,0x407fa2\nJMP 0x00402340\nCMP qword ptr [RBX + 0x20],0x0\nJZ 0x00402365\nXOR EDI,EDI\nMOV ESI,0x40800d\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401620\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p263
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 c1 12 00 00\n49 83 7e 20 00\n74 25\n31 ff\nbe 68 7e 40 00\nba 05 00 00 00\ne8 29 f2 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 15 f4 ff ff\n48 85 db\n0f 84 51 01 00 00\n49 8b 76 18\n48 89 df\ne8 b0 12 00 00\n48 83 7b 20 02\n72 25\n31 ff\nbe 9c 7e 40 00\nba 05 00 00 00\ne8 e8 f1 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 d4 f3 ff ff\n80 3d 61 90 20 00 00\n0f 84 d9 00 00 00\n80 7b 30 00\n74 25\n31 ff\nbe d1 7e 40 00\nba 05 00 00 00\ne8 b0 f1 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 9c f3 ff ff\n80 7b 32 00\n74 25\n31 ff\nbe 0e 7f 40 00\nba 05 00 00 00\ne8 85 f1 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 71 f3 ff ff\n4c 89 f7\n48 89 de\ne8 56 12 00 00\n48 8b 43 18\n49 39 46 18\n76 3f\n8a 0d e9 8f 20 00\n84 c9\n75 35\n48 85 c0\n75 25\n31 ff\nbe 6e 7f 40 00\nba 05 00 00 00\ne8 3c f1 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 28 f3 ff ff\n4c 89 f7\n48 89 de\ne8 fd 13 00 00\n80 3d a6 8f 20 00 00\n74 59\n41 80 7e 31 00\n74 52\n48 8b 43 18\n49 3b 46 18\n75 0c\n48 89 df\ne8 bb 14 00 00\n84 c0\n75 3c\n31 ff\nbe a2 7f 40 00\neb 0e\n48 83 7b 20 00\n74 2c\n31 ff\nbe 0d 80 40 00\nba 05 00 00 00\ne8 d6 f0 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n48 83 c4 08\n5b\n41 5e\ne9 bb f2 ff ff\n48 83 c4 08\n5b\n41 5e\nc3\n'
p264
S'.text:00000000004021d0\n.text:00000000004021d2\n.text:00000000004021d3\n.text:00000000004021d4\n.text:00000000004021d7\n.text:00000000004021da\n.text:00000000004021df\n.text:00000000004021e4\n.text:00000000004021e6\n.text:00000000004021e8\n.text:00000000004021ed\n.text:00000000004021f2\n.text:00000000004021f7\n.text:00000000004021fa\n.text:00000000004021ff\n.text:0000000000402201\n.text:0000000000402203\n.text:0000000000402206\n.text:000000000040220b\n.text:000000000040220e\n.text:0000000000402214\n.text:0000000000402218\n.text:000000000040221b\n.text:0000000000402220\n.text:0000000000402225\n.text:0000000000402227\n.text:0000000000402229\n.text:000000000040222e\n.text:0000000000402233\n.text:0000000000402238\n.text:000000000040223b\n.text:0000000000402240\n.text:0000000000402242\n.text:0000000000402244\n.text:0000000000402247\n.text:000000000040224c\n.text:0000000000402253\n.text:0000000000402259\n.text:000000000040225d\n.text:000000000040225f\n.text:0000000000402261\n.text:0000000000402266\n.text:000000000040226b\n.text:0000000000402270\n.text:0000000000402273\n.text:0000000000402278\n.text:000000000040227a\n.text:000000000040227c\n.text:000000000040227f\n.text:0000000000402284\n.text:0000000000402288\n.text:000000000040228a\n.text:000000000040228c\n.text:0000000000402291\n.text:0000000000402296\n.text:000000000040229b\n.text:000000000040229e\n.text:00000000004022a3\n.text:00000000004022a5\n.text:00000000004022a7\n.text:00000000004022aa\n.text:00000000004022af\n.text:00000000004022b2\n.text:00000000004022b5\n.text:00000000004022ba\n.text:00000000004022be\n.text:00000000004022c2\n.text:00000000004022c4\n.text:00000000004022ca\n.text:00000000004022cc\n.text:00000000004022ce\n.text:00000000004022d1\n.text:00000000004022d3\n.text:00000000004022d5\n.text:00000000004022da\n.text:00000000004022df\n.text:00000000004022e4\n.text:00000000004022e7\n.text:00000000004022ec\n.text:00000000004022ee\n.text:00000000004022f0\n.text:00000000004022f3\n.text:00000000004022f8\n.text:00000000004022fb\n.text:00000000004022fe\n.text:0000000000402303\n.text:000000000040230a\n.text:000000000040230c\n.text:0000000000402311\n.text:0000000000402313\n.text:0000000000402317\n.text:000000000040231b\n.text:000000000040231d\n.text:0000000000402320\n.text:0000000000402325\n.text:0000000000402327\n.text:0000000000402329\n.text:000000000040232b\n.text:0000000000402330\n.text:0000000000402332\n.text:0000000000402337\n.text:0000000000402339\n.text:000000000040233b\n.text:0000000000402340\n.text:0000000000402345\n.text:000000000040234a\n.text:000000000040234d\n.text:0000000000402352\n.text:0000000000402354\n.text:0000000000402356\n.text:0000000000402359\n.text:000000000040235d\n.text:000000000040235e\n.text:0000000000402360\n.text:0000000000402365\n.text:0000000000402369\n.text:000000000040236a\n.text:000000000040236c\n'
p265
tp266
sS'getenv'
p267
(S'\n__stdcall getenv(char * __name)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060b018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x0060b018]\n'
p270
S'ff 25 d2 9c 20 00\n'
p271
S'.plt:0000000000401340\n'
p272
tp273
sS'FUN_00402415'
p274
(S'\n__stdcall FUN_00402415()\n'
p275
V\u000avoid FUN_00402415(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  byte bVar4;\u000a  ulong in_RAX;\u000a  size_t sVar5;\u000a  uint *puVar6;\u000a  undefined8 uVar7;\u000a  ulong uVar8;\u000a  ulong uVar9;\u000a  int unaff_R14D;\u000a  size_t __n;\u000a  \u000a  do {\u000a    if (in_RAX == 0) {\u000a      return;\u000a    }\u000a    uVar9 = 0;\u000a    do {\u000a      uVar8 = uVar9;\u000a      iVar3 = unaff_R14D;\u000a      if (unaff_R14D == 0x7fffffff) {\u000a        __n = in_RAX - uVar9;\u000a        uVar8 = uVar9;\u000a        if (uVar9 <= in_RAX && __n != 0) {\u000a          do {\u000a            bVar4 = to_uchar();\u000a            if (in_squeeze_set[(ulong)bVar4] != false) break;\u000a            uVar8 = uVar8 + 2;\u000a          } while (uVar8 < in_RAX);\u000a        }\u000a        if (uVar8 == in_RAX) {\u000a          bVar4 = to_uchar();\u000a          if (in_squeeze_set[(ulong)bVar4] != false) {\u000a            uVar8 = uVar8 - 1;\u000a          }\u000a        }\u000a        iVar3 = unaff_R14D;\u000a        if (uVar8 < in_RAX) {\u000a          pcVar1 = io_buf + uVar8;\u000a          __n = (uVar8 - uVar9) + 1;\u000a          if ((uVar8 != 0) && (in_squeeze_set[uVar8 + 0xff] == (_Bool)*pcVar1)) {\u000a            __n = uVar8 - uVar9;\u000a          }\u000a          uVar8 = uVar8 + 1;\u000a          iVar3 = (int)*pcVar1;\u000a        }\u000a        if ((__n != 0) && (sVar5 = fwrite_unlocked(io_buf + uVar9,1,__n,stdout), sVar5 != __n)) {\u000a          puVar6 = (uint *)__errno_location();\u000a          uVar2 = *puVar6;\u000a          uVar7 = dcgettext(0,"write error",5);\u000a          error(1,(ulong)uVar2,uVar7,uVar7);\u000a        }\u000a        unaff_R14D = 0x7fffffff;\u000a        if (iVar3 != 0x7fffffff) goto joined_r0x0040253f;\u000a      }\u000a      else {\u000ajoined_r0x0040253f:\u000a        while (unaff_R14D = iVar3, uVar8 < in_RAX) {\u000a          if ((int)io_buf[uVar8] != unaff_R14D) {\u000a            unaff_R14D = 0x7fffffff;\u000a            break;\u000a          }\u000a          uVar8 = uVar8 + 1;\u000a          iVar3 = unaff_R14D;\u000a        }\u000a      }\u000a      uVar9 = uVar8;\u000a    } while (uVar8 < in_RAX);\u000a    in_RAX = FUN_00402415(io_buf,0x2000);\u000a  } while( true );\u000a}\u000a\u000a
p276
S'MOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040256d\nXOR R13D,R13D\nCMP R14D,0x7fffffff\nJNZ 0x004024c0\nMOV R15,RBX\nSUB R15,R13\nMOV RBP,R13\nJBE 0x00402461\nMOV RBP,R13\nNOP\nMOVSX EDI,byte ptr [0x60b3c0 + RBP]\nCALL 0x00403430\nMOVZX EAX,AL\nCMP byte ptr [0x60b2c0 + RAX],0x0\nJNZ 0x00402461\nADD RBP,0x2\nCMP RBP,RBX\nJC 0x00402440\nCMP RBP,RBX\nJNZ 0x00402484\nLEA R12,[RBP + -0x1]\nMOVSX EDI,byte ptr [0x60b3bf + RBP]\nCALL 0x00403430\nMOVZX EAX,AL\nCMP byte ptr [0x60b2c0 + RAX],0x0\nCMOVNZ RBP,R12\nCMP RBP,RBX\nJNC 0x004024d0\nMOVSX R12D,byte ptr [0x60b3c0 + RBP]\nMOV RAX,RBP\nSUB RAX,R13\nLEA R15,[RAX + 0x1]\nTEST RBP,RBP\nJZ 0x004024ab\nCMP byte ptr [0x60b3bf + RBP],R12B\nCMOVZ R15,RAX\nINC RBP\nTEST R15,R15\nJNZ 0x004024d8\nJMP 0x00402526\nMOV R12D,R14D\nMOV RBP,R13\nJMP 0x00402539\nMOV R12D,R14D\nTEST R15,R15\nJZ 0x00402526\nLEA RDI,[0x60b3c0 + R13]\nMOV RCX,qword ptr [0x0060b268]\nMOV ESI,0x1\nMOV RDX,R15\nCALL 0x004015d0\nCMP RAX,R15\nJZ 0x00402526\nCALL 0x00401370\nMOV R15D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40787c\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RCX\nCALL 0x00401620\nCMP R12D,0x7fffffff\nMOV R14D,0x7fffffff\nJZ 0x00402400\nCMP RBP,RBX\nMOV R14D,R12D\nJNC 0x00402400\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVSX EAX,byte ptr [0x60b3c0 + RBP]\nCMP EAX,R12D\nJNZ 0x004023f0\nINC RBP\nCMP RBP,RBX\nJC 0x00402550\nJMP 0x004023eb\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p277
S'48 89 c3\n48 85 db\n0f 84 4c 01 00 00\n45 31 ed\n41 81 fe ff ff ff 7f\n0f 85 8f 00 00 00\n49 89 df\n4d 29 ef\n4c 89 ed\n76 25\n4c 89 ed\n90\n0f be bd c0 b3 60 00\ne8 e4 0f 00 00\n0f b6 c0\n80 b8 c0 b2 60 00 00\n75 09\n48 83 c5 02\n48 39 dd\n72 df\n48 39 dd\n75 1e\n4c 8d 65 ff\n0f be bd bf b3 60 00\ne8 ba 0f 00 00\n0f b6 c0\n80 b8 c0 b2 60 00 00\n49 0f 45 ec\n48 39 dd\n73 47\n44 0f be a5 c0 b3 60 00\n48 89 e8\n4c 29 e8\n4c 8d 78 01\n48 85 ed\n74 0b\n44 38 a5 bf b3 60 00\n4c 0f 44 f8\n48 ff c5\n4d 85 ff\n75 25\neb 71\n45 89 f4\n4c 89 ed\neb 71\n45 89 f4\n4d 85 ff\n74 4e\n49 8d bd c0 b3 60 00\n48 8b 0d 82 8d 20 00\nbe 01 00 00 00\n4c 89 fa\ne8 dd f0 ff ff\n4c 39 f8\n74 2e\ne8 73 ee ff ff\n44 8b 38\n31 ff\nbe 7c 78 40 00\nba 05 00 00 00\ne8 0f ef ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n44 89 fe\n48 89 ca\ne8 fa f0 ff ff\n41 81 fc ff ff ff 7f\n41 be ff ff ff 7f\n0f 84 c7 fe ff ff\n48 39 dd\n45 89 e6\n0f 83 bb fe ff ff\n66 66 2e 0f 1f 84 00 00 00 00 00\n0f be 85 c0 b3 60 00\n44 39 e0\n0f 85 90 fe ff ff\n48 ff c5\n48 39 dd\n72 e8\ne9 7e fe ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p278
S'.text:0000000000402415\n.text:0000000000402418\n.text:000000000040241b\n.text:0000000000402421\n.text:0000000000402424\n.text:000000000040242b\n.text:0000000000402431\n.text:0000000000402434\n.text:0000000000402437\n.text:000000000040243a\n.text:000000000040243c\n.text:000000000040243f\n.text:0000000000402440\n.text:0000000000402447\n.text:000000000040244c\n.text:000000000040244f\n.text:0000000000402456\n.text:0000000000402458\n.text:000000000040245c\n.text:000000000040245f\n.text:0000000000402461\n.text:0000000000402464\n.text:0000000000402466\n.text:000000000040246a\n.text:0000000000402471\n.text:0000000000402476\n.text:0000000000402479\n.text:0000000000402480\n.text:0000000000402484\n.text:0000000000402487\n.text:0000000000402489\n.text:0000000000402491\n.text:0000000000402494\n.text:0000000000402497\n.text:000000000040249b\n.text:000000000040249e\n.text:00000000004024a0\n.text:00000000004024a7\n.text:00000000004024ab\n.text:00000000004024ae\n.text:00000000004024b1\n.text:00000000004024b3\n.text:00000000004024c0\n.text:00000000004024c3\n.text:00000000004024c6\n.text:00000000004024d0\n.text:00000000004024d3\n.text:00000000004024d6\n.text:00000000004024d8\n.text:00000000004024df\n.text:00000000004024e6\n.text:00000000004024eb\n.text:00000000004024ee\n.text:00000000004024f3\n.text:00000000004024f6\n.text:00000000004024f8\n.text:00000000004024fd\n.text:0000000000402500\n.text:0000000000402502\n.text:0000000000402507\n.text:000000000040250c\n.text:0000000000402511\n.text:0000000000402514\n.text:0000000000402519\n.text:000000000040251b\n.text:000000000040251e\n.text:0000000000402521\n.text:0000000000402526\n.text:000000000040252d\n.text:0000000000402533\n.text:0000000000402539\n.text:000000000040253c\n.text:000000000040253f\n.text:0000000000402545\n.text:0000000000402550\n.text:0000000000402557\n.text:000000000040255a\n.text:0000000000402560\n.text:0000000000402563\n.text:0000000000402566\n.text:0000000000402568\n.text:000000000040256d\n.text:0000000000402571\n.text:0000000000402572\n.text:0000000000402574\n.text:0000000000402576\n.text:0000000000402578\n.text:000000000040257a\n.text:000000000040257b\n'
p279
tp280
sS'get_spec_stats'
p281
(S'\n__stdcall get_spec_stats(Spec_list * s)\n'
p282
V\u000avoid get_spec_stats(Spec_list *s)\u000a\u000a{\u000a  _Bool _Var1;\u000a  undefined8 uVar2;\u000a  long lVar3;\u000a  ulong uVar4;\u000a  int iVar5;\u000a  int iVar6;\u000a  ulong uVar7;\u000a  List_element *pLVar8;\u000a  \u000a  s->n_indefinite_repeats = 0;\u000a  s->has_restricted_char_class = false;\u000a  *(undefined2 *)&s->has_equiv_class = 0;\u000a  pLVar8 = s->head->next;\u000a  if (pLVar8 == (List_element *)0x0) {\u000a    uVar4 = 0;\u000a  }\u000a  else {\u000a    uVar7 = 0;\u000a    do {\u000a      if (RE_REPEATED_CHAR < pLVar8->type) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      lVar3 = 1;\u000a      switch(pLVar8->type) {\u000a      case RE_RANGE:\u000a        if (pLVar8->u[1] < pLVar8->u[0]) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("p->u.range.last_char >= p->u.range.first_char","src/tr.c",0x506,\u000a                        "void get_spec_stats(struct Spec_list *)");\u000a        }\u000a        lVar3 = ((ulong)pLVar8->u[1] + 1) - (ulong)pLVar8->u[0];\u000a        break;\u000a      case RE_CHAR_CLASS:\u000a        s->has_char_class = true;\u000a        iVar6 = *(int *)pLVar8->u;\u000a        lVar3 = 0;\u000a        iVar5 = 0;\u000a        do {\u000a          _Var1 = is_char_class_member();\u000a          lVar3 = lVar3 + (ulong)_Var1;\u000a          iVar5 = iVar5 + 1;\u000a        } while (iVar5 != 0x100);\u000a        if ((iVar6 != 6) && (iVar6 != 10)) {\u000a          s->has_restricted_char_class = true;\u000a        }\u000a        break;\u000a      case RE_EQUIV_CLASS:\u000a        lVar3 = 0;\u000a        iVar6 = 0;\u000a        do {\u000a          _Var1 = is_equiv_class_member();\u000a          lVar3 = lVar3 + (ulong)_Var1;\u000a          iVar6 = iVar6 + 1;\u000a        } while (iVar6 != 0x100);\u000a        s->has_equiv_class = true;\u000a        break;\u000a      case RE_REPEATED_CHAR:\u000a        lVar3 = *(long *)(pLVar8->u + 8);\u000a        if (lVar3 == 0) {\u000a          s->indefinite_repeat_element = pLVar8;\u000a          s->n_indefinite_repeats = s->n_indefinite_repeats + 1;\u000a          lVar3 = 0;\u000a        }\u000a      }\u000a      uVar4 = lVar3 + uVar7;\u000a      if ((uVar4 < uVar7) || (uVar4 == 0xffffffffffffffff)) {\u000a        uVar2 = dcgettext(0,"too many characters in set",5);\u000a        error(1,0,uVar2,uVar2);\u000a      }\u000a      pLVar8 = pLVar8->next;\u000a      uVar7 = uVar4;\u000a    } while (pLVar8 != (List_element *)0x0);\u000a  }\u000a  s->length = uVar4;\u000a  return;\u000a}\u000a\u000a
p283
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV qword ptr [R14 + 0x20],0x0\nMOV byte ptr [R14 + 0x32],0x0\nMOV word ptr [R14 + 0x30],0x0\nMOV RAX,qword ptr [R14]\nMOV R15,qword ptr [RAX + 0x8]\nTEST R15,R15\nJZ 0x00403985\nXOR R12D,R12D\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV EAX,dword ptr [R15]\nCMP RAX,0x4\nJA 0x0040399a\nMOV EBX,0x1\nJMP qword ptr [0x406c50 + RAX*0x8]\nMOVZX EBX,byte ptr [R15 + 0x11]\nMOVZX EAX,byte ptr [R15 + 0x10]\nCMP BL,AL\nJC 0x0040399f\nINC RBX\nSUB RBX,RAX\nJMP 0x00403940\nMOV byte ptr [R14 + 0x31],0x1\nMOV R13D,dword ptr [R15 + 0x10]\nXOR EBX,EBX\nXOR EBP,EBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX ESI,BPL\nMOV EDI,R13D\nCALL 0x00403a80\nMOVZX EAX,AL\nADD RBX,RAX\nINC EBP\nCMP EBP,0x100\nJNZ 0x004038c0\nCMP R13D,0x6\nJZ 0x00403940\nCMP R13D,0xa\nJZ 0x00403940\nMOV byte ptr [R14 + 0x32],0x1\nJMP 0x00403940\nMOV R13B,byte ptr [R15 + 0x10]\nXOR EBX,EBX\nXOR EBP,EBP\nNOP word ptr [RAX + RAX*0x1]\nMOVZX EDI,R13B\nMOVZX ESI,BPL\nCALL 0x00403ac0\nMOVZX EAX,AL\nADD RBX,RAX\nINC EBP\nCMP EBP,0x100\nJNZ 0x00403900\nMOV byte ptr [R14 + 0x30],0x1\nJMP 0x00403940\nMOV RBX,qword ptr [R15 + 0x18]\nTEST RBX,RBX\nJNZ 0x00403940\nMOV qword ptr [R14 + 0x28],R15\nINC qword ptr [R14 + 0x20]\nXOR EBX,EBX\nNOP word ptr [RAX + RAX*0x1]\nADD RBX,R12\nCMP R12,RBX\nJA 0x0040394e\nCMP RBX,-0x1\nJNZ 0x00403973\nXOR EDI,EDI\nMOV ESI,0x4080a2\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401620\nMOV R15,qword ptr [R15 + 0x8]\nTEST R15,R15\nMOV R12,RBX\nJNZ 0x00403870\nJMP 0x00403987\nXOR EBX,EBX\nMOV qword ptr [R14 + 0x18],RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401360\nMOV EDI,0x40804c\nMOV ESI,0x4078a2\nMOV EDX,0x506\nMOV ECX,0x40807a\nCALL 0x004014a0\n'
p284
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fe\n49 c7 46 20 00 00 00 00\n41 c6 46 32 00\n66 41 c7 46 30 00 00\n49 8b 06\n4c 8b 78 08\n4d 85 ff\n0f 84 23 01 00 00\n45 31 e4\n66 66 2e 0f 1f 84 00 00 00 00 00\n41 8b 07\n48 83 f8 04\n0f 87 1d 01 00 00\nbb 01 00 00 00\nff 24 c5 50 6c 40 00\n41 0f b6 5f 11\n41 0f b6 47 10\n38 c3\n0f 82 04 01 00 00\n48 ff c3\n48 29 c3\ne9 9a 00 00 00\n41 c6 46 31 01\n45 8b 6f 10\n31 db\n31 ed\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n40 0f b6 f5\n44 89 ef\ne8 b4 01 00 00\n0f b6 c0\n48 01 c3\nff c5\n81 fd 00 01 00 00\n75 e4\n41 83 fd 06\n74 5e\n41 83 fd 0a\n74 58\n41 c6 46 32 01\neb 51\n45 8a 6f 10\n31 db\n31 ed\n66 0f 1f 84 00 00 00 00 00\n41 0f b6 fd\n40 0f b6 f5\ne8 b3 01 00 00\n0f b6 c0\n48 01 c3\nff c5\n81 fd 00 01 00 00\n75 e3\n41 c6 46 30 01\neb 1c\n49 8b 5f 18\n48 85 db\n75 13\n4d 89 7e 28\n49 ff 46 20\n31 db\n66 0f 1f 84 00 00 00 00 00\n4c 01 e3\n49 39 dc\n77 06\n48 83 fb ff\n75 25\n31 ff\nbe a2 80 40 00\nba 05 00 00 00\ne8 c1 da ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 ad dc ff ff\n4d 8b 7f 08\n4d 85 ff\n49 89 dc\n0f 85 ed fe ff ff\neb 02\n31 db\n49 89 5e 18\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 c1 d9 ff ff\nbf 4c 80 40 00\nbe a2 78 40 00\nba 06 05 00 00\nb9 7a 80 40 00\ne8 e8 da ff ff\n'
p285
S'.text:0000000000403830\n.text:0000000000403831\n.text:0000000000403833\n.text:0000000000403835\n.text:0000000000403837\n.text:0000000000403839\n.text:000000000040383a\n.text:000000000040383b\n.text:000000000040383e\n.text:0000000000403846\n.text:000000000040384b\n.text:0000000000403852\n.text:0000000000403855\n.text:0000000000403859\n.text:000000000040385c\n.text:0000000000403862\n.text:0000000000403865\n.text:0000000000403870\n.text:0000000000403873\n.text:0000000000403877\n.text:000000000040387d\n.text:0000000000403882\n.text:0000000000403889\n.text:000000000040388e\n.text:0000000000403893\n.text:0000000000403895\n.text:000000000040389b\n.text:000000000040389e\n.text:00000000004038a1\n.text:00000000004038a6\n.text:00000000004038ab\n.text:00000000004038af\n.text:00000000004038b1\n.text:00000000004038b3\n.text:00000000004038c0\n.text:00000000004038c4\n.text:00000000004038c7\n.text:00000000004038cc\n.text:00000000004038cf\n.text:00000000004038d2\n.text:00000000004038d4\n.text:00000000004038da\n.text:00000000004038dc\n.text:00000000004038e0\n.text:00000000004038e2\n.text:00000000004038e6\n.text:00000000004038e8\n.text:00000000004038ed\n.text:00000000004038ef\n.text:00000000004038f3\n.text:00000000004038f5\n.text:00000000004038f7\n.text:0000000000403900\n.text:0000000000403904\n.text:0000000000403908\n.text:000000000040390d\n.text:0000000000403910\n.text:0000000000403913\n.text:0000000000403915\n.text:000000000040391b\n.text:000000000040391d\n.text:0000000000403922\n.text:0000000000403924\n.text:0000000000403928\n.text:000000000040392b\n.text:000000000040392d\n.text:0000000000403931\n.text:0000000000403935\n.text:0000000000403937\n.text:0000000000403940\n.text:0000000000403943\n.text:0000000000403946\n.text:0000000000403948\n.text:000000000040394c\n.text:000000000040394e\n.text:0000000000403950\n.text:0000000000403955\n.text:000000000040395a\n.text:000000000040395f\n.text:0000000000403962\n.text:0000000000403967\n.text:0000000000403969\n.text:000000000040396b\n.text:000000000040396e\n.text:0000000000403973\n.text:0000000000403977\n.text:000000000040397a\n.text:000000000040397d\n.text:0000000000403983\n.text:0000000000403985\n.text:0000000000403987\n.text:000000000040398b\n.text:000000000040398f\n.text:0000000000403990\n.text:0000000000403992\n.text:0000000000403994\n.text:0000000000403996\n.text:0000000000403998\n.text:0000000000403999\n.text:000000000040399a\n.text:000000000040399f\n.text:00000000004039a4\n.text:00000000004039a9\n.text:00000000004039ae\n.text:00000000004039b3\n'
p286
tp287
sS'rpl_fseeko'
p288
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p289
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060b198)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p290
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00406568\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00406568\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0040657a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401640\nMOV RDI,RBX\nCALL 0x00401560\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401490\nCMP RAX,-0x1\nJZ 0x004065a3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x004065a8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p291
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 c6 b0 ff ff\n48 89 df\ne8 de af ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 01 af ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p292
S'.text:0000000000406540\n.text:0000000000406541\n.text:0000000000406543\n.text:0000000000406544\n.text:0000000000406547\n.text:000000000040654a\n.text:000000000040654d\n.text:0000000000406551\n.text:0000000000406555\n.text:0000000000406557\n.text:000000000040655b\n.text:000000000040655f\n.text:0000000000406561\n.text:0000000000406566\n.text:0000000000406568\n.text:000000000040656b\n.text:000000000040656e\n.text:0000000000406571\n.text:0000000000406572\n.text:0000000000406574\n.text:0000000000406575\n.text:000000000040657a\n.text:000000000040657d\n.text:0000000000406582\n.text:0000000000406584\n.text:0000000000406587\n.text:000000000040658a\n.text:000000000040658f\n.text:0000000000406593\n.text:0000000000406595\n.text:0000000000406598\n.text:000000000040659f\n.text:00000000004065a1\n.text:00000000004065a3\n.text:00000000004065a8\n.text:00000000004065a9\n.text:00000000004065ab\n.text:00000000004065ac\n'
p293
tp294
sS'quote_n_mem'
p295
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p296
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p297
S'MOV ECX,0x60b228\nJMP 0x00404be0\n'
p298
S'b9 28 b2 60 00\ne9 36 fb ff ff\n'
p299
S'.text:00000000004050a0\n.text:00000000004050a5\n'
p300
tp301
sS'parse_str'
p302
(S'\n__stdcall parse_str(char * s, Spec_list * spec_list)\n'
p303
V\u000a_Bool parse_str(char *s,Spec_list *spec_list)\u000a\u000a{\u000a  _Bool _Var1;\u000a  E_string EStack40;\u000a  \u000a  unquote();\u000a  _Var1 = build_spec_list(&EStack40,spec_list);\u000a  es_free(&EStack40);\u000a  return _Var1;\u000a}\u000a\u000a
p304
S'PUSH R14\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,RSI\nMOV R14,RSP\nMOV RSI,R14\nCALL 0x00402940\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00402ae0\nMOV EBX,EAX\nMOV RDI,R14\nCALL 0x00402db0\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R14\nRET\n'
p305
S'41 56\n53\n48 83 ec 18\n48 89 f3\n49 89 e6\n4c 89 f6\ne8 9b 07 00 00\n4c 89 f7\n48 89 de\ne8 30 09 00 00\n89 c3\n4c 89 f7\ne8 f6 0b 00 00\n89 d8\n48 83 c4 18\n5b\n41 5e\nc3\n'
p306
S'.text:0000000000402190\n.text:0000000000402192\n.text:0000000000402193\n.text:0000000000402197\n.text:000000000040219a\n.text:000000000040219d\n.text:00000000004021a0\n.text:00000000004021a5\n.text:00000000004021a8\n.text:00000000004021ab\n.text:00000000004021b0\n.text:00000000004021b2\n.text:00000000004021b5\n.text:00000000004021ba\n.text:00000000004021bc\n.text:00000000004021c0\n.text:00000000004021c1\n.text:00000000004021c3\n'
p307
tp308
sS'xstrdup'
p309
(S'\n__stdcall xstrdup(char * string)\n'
p310
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p311
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401440\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00405bd0\n'
p312
S'53\n48 89 fb\ne8 37 b8 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p313
S'.text:0000000000405c00\n.text:0000000000405c01\n.text:0000000000405c04\n.text:0000000000405c09\n.text:0000000000405c0d\n.text:0000000000405c10\n.text:0000000000405c11\n'
p314
tp315
sS'c_ispunct'
p316
(S'\n__stdcall c_ispunct()\n'
p317
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p318
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00406052\nMOV AL,0x1\nJMP qword ptr [0x408e08 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p319
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 08 8e 40 00\nc3\n31 c0\nc3\n'
p320
S'.text:0000000000406040\n.text:0000000000406043\n.text:0000000000406046\n.text:0000000000406048\n.text:000000000040604a\n.text:0000000000406051\n.text:0000000000406052\n.text:0000000000406054\n'
p321
tp322
sS'card_of_complement'
p323
(S'\n__stdcall card_of_complement(Spec_list * s)\n'
p324
V\u000aint card_of_complement(Spec_list *s)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  _Bool in_set [256];\u000a  undefined4 local_118;\u000a  undefined4 uStack276;\u000a  undefined4 uStack272;\u000a  undefined4 uStack268;\u000a  undefined4 local_108;\u000a  undefined4 uStack260;\u000a  undefined4 uStack256;\u000a  undefined4 uStack252;\u000a  undefined4 local_f8;\u000a  undefined4 uStack244;\u000a  undefined4 uStack240;\u000a  undefined4 uStack236;\u000a  undefined4 local_e8;\u000a  undefined4 uStack228;\u000a  undefined4 uStack224;\u000a  undefined4 uStack220;\u000a  undefined4 local_d8;\u000a  undefined4 uStack212;\u000a  undefined4 uStack208;\u000a  undefined4 uStack204;\u000a  undefined4 local_c8;\u000a  undefined4 uStack196;\u000a  undefined4 uStack192;\u000a  undefined4 uStack188;\u000a  undefined4 local_b8;\u000a  undefined4 uStack180;\u000a  undefined4 uStack176;\u000a  undefined4 uStack172;\u000a  undefined4 local_a8;\u000a  undefined4 uStack164;\u000a  undefined4 uStack160;\u000a  undefined4 uStack156;\u000a  undefined4 local_98;\u000a  undefined4 uStack148;\u000a  undefined4 uStack144;\u000a  undefined4 uStack140;\u000a  undefined4 local_88;\u000a  undefined4 uStack132;\u000a  undefined4 uStack128;\u000a  undefined4 uStack124;\u000a  undefined4 local_78;\u000a  undefined4 uStack116;\u000a  undefined4 uStack112;\u000a  undefined4 uStack108;\u000a  undefined4 local_68;\u000a  undefined4 uStack100;\u000a  undefined4 uStack96;\u000a  undefined4 uStack92;\u000a  undefined4 local_58;\u000a  undefined4 uStack84;\u000a  undefined4 uStack80;\u000a  undefined4 uStack76;\u000a  undefined4 local_48;\u000a  undefined4 uStack68;\u000a  undefined4 uStack64;\u000a  undefined4 uStack60;\u000a  undefined4 local_38;\u000a  undefined4 uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  undefined4 local_28;\u000a  undefined4 uStack36;\u000a  undefined4 uStack32;\u000a  undefined4 uStack28;\u000a  \u000a  local_28 = 0;\u000a  uStack36 = 0;\u000a  uStack32 = 0;\u000a  uStack28 = 0;\u000a  local_38 = 0;\u000a  uStack52 = 0;\u000a  uStack48 = 0;\u000a  uStack44 = 0;\u000a  local_48 = 0;\u000a  uStack68 = 0;\u000a  uStack64 = 0;\u000a  uStack60 = 0;\u000a  local_58 = 0;\u000a  uStack84 = 0;\u000a  uStack80 = 0;\u000a  uStack76 = 0;\u000a  local_68 = 0;\u000a  uStack100 = 0;\u000a  uStack96 = 0;\u000a  uStack92 = 0;\u000a  local_78 = 0;\u000a  uStack116 = 0;\u000a  uStack112 = 0;\u000a  uStack108 = 0;\u000a  local_88 = 0;\u000a  uStack132 = 0;\u000a  uStack128 = 0;\u000a  uStack124 = 0;\u000a  local_98 = 0;\u000a  uStack148 = 0;\u000a  uStack144 = 0;\u000a  uStack140 = 0;\u000a  local_a8 = 0;\u000a  uStack164 = 0;\u000a  uStack160 = 0;\u000a  uStack156 = 0;\u000a  local_b8 = 0;\u000a  uStack180 = 0;\u000a  uStack176 = 0;\u000a  uStack172 = 0;\u000a  local_c8 = 0;\u000a  uStack196 = 0;\u000a  uStack192 = 0;\u000a  uStack188 = 0;\u000a  local_d8 = 0;\u000a  uStack212 = 0;\u000a  uStack208 = 0;\u000a  uStack204 = 0;\u000a  local_e8 = 0;\u000a  uStack228 = 0;\u000a  uStack224 = 0;\u000a  uStack220 = 0;\u000a  local_f8 = 0;\u000a  uStack244 = 0;\u000a  uStack240 = 0;\u000a  uStack236 = 0;\u000a  local_108 = 0;\u000a  uStack260 = 0;\u000a  uStack256 = 0;\u000a  uStack252 = 0;\u000a  local_118 = 0;\u000a  uStack276 = 0;\u000a  uStack272 = 0;\u000a  uStack268 = 0;\u000a  s->state = 0xfffffffffffffffe;\u000a  iVar1 = get_next(s,(Upper_Lower_class *)0x0);\u000a  iVar2 = 0x100;\u000a  while (iVar1 != -1) {\u000a    iVar2 = iVar2 - ((uint)*(byte *)((long)&local_118 + (long)iVar1) ^ 1);\u000a    *(undefined *)((long)&local_118 + (long)iVar1) = 1;\u000a    iVar1 = get_next(s,(Upper_Lower_class *)0x0);\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p325
S'PUSH RBP\nPUSH RBX\nSUB RSP,0x108\nMOV RBX,RDI\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [0xf0 + RSP],XMM0\nMOVAPS xmmword ptr [0xe0 + RSP],XMM0\nMOVAPS xmmword ptr [0xd0 + RSP],XMM0\nMOVAPS xmmword ptr [0xc0 + RSP],XMM0\nMOVAPS xmmword ptr [0xb0 + RSP],XMM0\nMOVAPS xmmword ptr [0xa0 + RSP],XMM0\nMOVAPS xmmword ptr [0x90 + RSP],XMM0\nMOVAPS xmmword ptr [0x80 + RSP],XMM0\nMOVAPS xmmword ptr [RSP + 0x70],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM0\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x40],XMM0\nMOVAPS xmmword ptr [RSP + 0x30],XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV qword ptr [RBX + 0x10],-0x2\nXOR ESI,ESI\nCALL 0x004026c0\nMOV EBP,0x100\nCMP EAX,-0x1\nJZ 0x00403a6e\nNOP\nCDQE\nMOVZX ECX,byte ptr [RSP + RAX*0x1]\nXOR ECX,0x1\nSUB EBP,ECX\nMOV byte ptr [RSP + RAX*0x1],0x1\nXOR ESI,ESI\nMOV RDI,RBX\nCALL 0x004026c0\nCMP EAX,-0x1\nJNZ 0x00403a50\nMOV EAX,EBP\nADD RSP,0x108\nPOP RBX\nPOP RBP\nRET\n'
p326
S'55\n53\n48 81 ec 08 01 00 00\n48 89 fb\n0f 57 c0\n0f 29 84 24 f0 00 00 00\n0f 29 84 24 e0 00 00 00\n0f 29 84 24 d0 00 00 00\n0f 29 84 24 c0 00 00 00\n0f 29 84 24 b0 00 00 00\n0f 29 84 24 a0 00 00 00\n0f 29 84 24 90 00 00 00\n0f 29 84 24 80 00 00 00\n0f 29 44 24 70\n0f 29 44 24 60\n0f 29 44 24 50\n0f 29 44 24 40\n0f 29 44 24 30\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\n48 c7 43 10 fe ff ff ff\n31 f6\ne8 7b ec ff ff\nbd 00 01 00 00\n83 f8 ff\n74 1f\n90\n48 98\n0f b6 0c 04\n83 f1 01\n29 cd\nc6 04 04 01\n31 f6\n48 89 df\ne8 57 ec ff ff\n83 f8 ff\n75 e2\n89 e8\n48 81 c4 08 01 00 00\n5b\n5d\nc3\n'
p327
S'.text:00000000004039c0\n.text:00000000004039c1\n.text:00000000004039c2\n.text:00000000004039c9\n.text:00000000004039cc\n.text:00000000004039cf\n.text:00000000004039d7\n.text:00000000004039df\n.text:00000000004039e7\n.text:00000000004039ef\n.text:00000000004039f7\n.text:00000000004039ff\n.text:0000000000403a07\n.text:0000000000403a0f\n.text:0000000000403a14\n.text:0000000000403a19\n.text:0000000000403a1e\n.text:0000000000403a23\n.text:0000000000403a28\n.text:0000000000403a2d\n.text:0000000000403a32\n.text:0000000000403a36\n.text:0000000000403a3e\n.text:0000000000403a40\n.text:0000000000403a45\n.text:0000000000403a4a\n.text:0000000000403a4d\n.text:0000000000403a4f\n.text:0000000000403a50\n.text:0000000000403a52\n.text:0000000000403a56\n.text:0000000000403a59\n.text:0000000000403a5b\n.text:0000000000403a5f\n.text:0000000000403a61\n.text:0000000000403a64\n.text:0000000000403a69\n.text:0000000000403a6c\n.text:0000000000403a6e\n.text:0000000000403a70\n.text:0000000000403a77\n.text:0000000000403a78\n.text:0000000000403a79\n'
p328
tp329
sS'make_printable_str'
p330
(S'\n__stdcall make_printable_str(char * s, size_t len)\n'
p331
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000achar * make_printable_str(char *s,size_t len)\u000a\u000a{\u000a  byte bVar1;\u000a  ulong in_RAX;\u000a  char *pcVar2;\u000a  ushort **ppuVar3;\u000a  char *__dest;\u000a  char *__src;\u000a  char buf [5];\u000a  ulong uStack56;\u000a  \u000a  uStack56 = in_RAX;\u000a  pcVar2 = (char *)xnmalloc(len + 1,4);\u000a  __dest = pcVar2;\u000a  if (len != 0) {\u000a    do {\u000a      bVar1 = *s;\u000a      switch(bVar1) {\u000a      case 7:\u000a        __src = "\u005c\u005ca";\u000a        break;\u000a      case 8:\u000a        __src = "\u005c\u005cb";\u000a        break;\u000a      case 9:\u000a        __src = "\u005c\u005ct";\u000a        break;\u000a      case 10:\u000a        __src = "\u005c\u005cn";\u000a        break;\u000a      case 0xb:\u000a        __src = "\u005c\u005cv";\u000a        break;\u000a      case 0xc:\u000a        __src = "\u005c\u005cf";\u000a        break;\u000a      case 0xd:\u000a        __src = "\u005c\u005cr";\u000a        break;\u000a      default:\u000a        if (bVar1 == 0x5c) {\u000a          __src = "\u005c\u005c";\u000a        }\u000a        else {\u000a          ppuVar3 = __ctype_b_loc();\u000a          if ((*(byte *)((long)*ppuVar3 + (ulong)bVar1 * 2 + 1) & 0x40) == 0) {\u000a            __src = (char *)((long)&uStack56 + 3);\u000a            __sprintf_chk(__src,1,5,"\u005c\u005c%03o",(ulong)bVar1);\u000a          }\u000a          else {\u000a            uStack56._0_4_ = CONCAT13(bVar1,(undefined3)uStack56);\u000a            uStack56 = uStack56 & 0xffffff0000000000 | (ulong)(uint)uStack56;\u000a            __src = (char *)((long)&uStack56 + 3);\u000a          }\u000a        }\u000a      }\u000a      __dest = stpcpy(__dest,__src);\u000a      s = (char *)((byte *)s + 1);\u000a      len = len - 1;\u000a    } while (len != 0);\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p332
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nLEA RDI,[R14 + 0x1]\nMOV ESI,0x4\nCALL 0x00405a70\nMOV R15,RAX\nTEST R14,R14\nJZ 0x00403047\nMOV R13,R15\nNOP\nMOVZX R12D,byte ptr [RBX]\nMOV EAX,R12D\nADD AL,0xf9\nCMP AL,0x6\nJA 0x00402fb0\nMOVZX EAX,AL\nJMP qword ptr [0x406bf0 + RAX*0x8]\nMOV ESI,0x407c61\nJMP 0x00403030\nCMP R12B,0x5c\nJNZ 0x00402fe7\nMOV ESI,0x407c5f\nJMP 0x00403030\nMOV ESI,0x407c64\nJMP 0x00403030\nMOV ESI,0x407c70\nJMP 0x00403030\nMOV ESI,0x407c6a\nJMP 0x00403030\nMOV ESI,0x407c73\nJMP 0x00403030\nMOV ESI,0x407c67\nJMP 0x00403030\nMOV ESI,0x407c6d\nJMP 0x00403030\nMOVZX EBP,R12B\nCALL 0x004016c0\nMOV RAX,qword ptr [RAX]\nTEST byte ptr [RAX + RBP*0x2 + 0x1],0x40\nJNZ 0x00403020\nMOV ESI,0x1\nMOV EDX,0x5\nMOV ECX,0x407c76\nXOR EAX,EAX\nLEA R12,[RSP + 0x3]\nMOV RDI,R12\nMOV R8D,EBP\nCALL 0x004016d0\nMOV RSI,R12\nJMP 0x00403030\nMOV byte ptr [RSP + 0x3],R12B\nMOV byte ptr [RSP + 0x4],0x0\nLEA RSI,[RSP + 0x3]\nNOP\nMOV RDI,R13\nCALL 0x00401410\nMOV R13,RAX\nINC RBX\nDEC R14\nJNZ 0x00402f80\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p333
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f6\n48 89 fb\n49 8d 7e 01\nbe 04 00 00 00\ne8 01 2b 00 00\n49 89 c7\n4d 85 f6\n0f 84 cc 00 00 00\n4d 89 fd\n66 90\n44 0f b6 23\n44 89 e0\n04 f9\n3c 06\n77 23\n0f b6 c0\nff 24 c5 f0 6b 40 00\nbe 61 7c 40 00\ne9 8f 00 00 00\n41 80 fc 5c\n75 31\nbe 5f 7c 40 00\neb 73\nbe 64 7c 40 00\neb 6c\nbe 70 7c 40 00\neb 65\nbe 6a 7c 40 00\neb 5e\nbe 73 7c 40 00\neb 57\nbe 67 7c 40 00\neb 50\nbe 6d 7c 40 00\neb 49\n41 0f b6 ec\ne8 d0 e6 ff ff\n48 8b 00\nf6 44 68 01 40\n75 26\nbe 01 00 00 00\nba 05 00 00 00\nb9 76 7c 40 00\n31 c0\n4c 8d 64 24 03\n4c 89 e7\n41 89 e8\ne8 b5 e6 ff ff\n4c 89 e6\neb 10\n44 88 64 24 03\nc6 44 24 04 00\n48 8d 74 24 03\n90\n4c 89 ef\ne8 d8 e3 ff ff\n49 89 c5\n48 ff c3\n49 ff ce\n0f 85 39 ff ff ff\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p334
S'.text:0000000000402f50\n.text:0000000000402f51\n.text:0000000000402f53\n.text:0000000000402f55\n.text:0000000000402f57\n.text:0000000000402f59\n.text:0000000000402f5a\n.text:0000000000402f5b\n.text:0000000000402f5e\n.text:0000000000402f61\n.text:0000000000402f65\n.text:0000000000402f6a\n.text:0000000000402f6f\n.text:0000000000402f72\n.text:0000000000402f75\n.text:0000000000402f7b\n.text:0000000000402f7e\n.text:0000000000402f80\n.text:0000000000402f84\n.text:0000000000402f87\n.text:0000000000402f89\n.text:0000000000402f8b\n.text:0000000000402f8d\n.text:0000000000402f90\n.text:0000000000402f97\n.text:0000000000402f9c\n.text:0000000000402fb0\n.text:0000000000402fb4\n.text:0000000000402fb6\n.text:0000000000402fbb\n.text:0000000000402fbd\n.text:0000000000402fc2\n.text:0000000000402fc4\n.text:0000000000402fc9\n.text:0000000000402fcb\n.text:0000000000402fd0\n.text:0000000000402fd2\n.text:0000000000402fd7\n.text:0000000000402fd9\n.text:0000000000402fde\n.text:0000000000402fe0\n.text:0000000000402fe5\n.text:0000000000402fe7\n.text:0000000000402feb\n.text:0000000000402ff0\n.text:0000000000402ff3\n.text:0000000000402ff8\n.text:0000000000402ffa\n.text:0000000000402fff\n.text:0000000000403004\n.text:0000000000403009\n.text:000000000040300b\n.text:0000000000403010\n.text:0000000000403013\n.text:0000000000403016\n.text:000000000040301b\n.text:000000000040301e\n.text:0000000000403020\n.text:0000000000403025\n.text:000000000040302a\n.text:000000000040302f\n.text:0000000000403030\n.text:0000000000403033\n.text:0000000000403038\n.text:000000000040303b\n.text:000000000040303e\n.text:0000000000403041\n.text:0000000000403047\n.text:000000000040304a\n.text:000000000040304e\n.text:000000000040304f\n.text:0000000000403051\n.text:0000000000403053\n.text:0000000000403055\n.text:0000000000403057\n.text:0000000000403058\n'
p335
tp336
sS'fscanf'
p337
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p338
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060b0d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'JMP qword ptr [0x0060b0d8]\n'
p340
S'ff 25 12 9c 20 00\n'
p341
S'.plt:00000000004014c0\n'
p342
tp343
sS'memcpy'
p344
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p345
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060b120)();\u000a  return pvVar1;\u000a}\u000a\u000a
p346
S'JMP qword ptr [0x0060b120]\n'
p347
S'ff 25 ca 9b 20 00\n'
p348
S'.plt:0000000000401550\n'
p349
tp350
sS'close_stdout_set_ignore_EPIPE'
p351
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p352
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p353
S'MOV byte ptr [0x0060d5c8],DIL\nRET\n'
p354
S'40 88 3d e1 9a 20 00\nc3\n'
p355
S'.text:0000000000403ae0\n.text:0000000000403ae7\n'
p356
tp357
sS'FUN_00401330'
p358
(S'\n__stdcall FUN_00401330()\n'
p359
V\u000avoid FUN_00401330(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060b010)();\u000a  return;\u000a}\u000a\u000a
p360
S'PUSH qword ptr [0x0060b008]\nJMP qword ptr [0x0060b010]\n'
p361
S'ff 35 d2 9c 20 00\nff 25 d4 9c 20 00\n'
p362
S'.plt:0000000000401330\n.plt:0000000000401336\n'
p363
tp364
sS'iswprint'
p365
(S'\n__stdcall iswprint(wint_t __wc)\n'
p366
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060b1d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p367
S'JMP qword ptr [0x0060b1d0]\n'
p368
S'ff 25 1a 9b 20 00\n'
p369
S'.plt:00000000004016b0\n'
p370
tp371
sS'read_and_delete'
p372
(S'\n__stdcall read_and_delete(char * buf, size_t size)\n'
p373
V\u000asize_t read_and_delete(char *buf,size_t size)\u000a\u000a{\u000a  char cVar1;\u000a  char *pcVar2;\u000a  ulong uVar3;\u000a  byte bVar4;\u000a  size_t sVar5;\u000a  size_t sVar6;\u000a  char *pcVar7;\u000a  ulong uVar8;\u000a  \u000a  do {\u000a    sVar5 = plain_read(buf,size);\u000a    if (sVar5 == 0) {\u000a      return 0;\u000a    }\u000a    pcVar2 = buf + 1;\u000a    uVar3 = 0;\u000a    sVar6 = sVar5;\u000a    do {\u000a      uVar8 = uVar3;\u000a      pcVar7 = pcVar2;\u000a      sVar6 = sVar6 - 1;\u000a      if (sVar5 <= uVar8) break;\u000a      bVar4 = to_uchar();\u000a      pcVar2 = pcVar7 + 1;\u000a      uVar3 = uVar8 + 1;\u000a    } while (in_delete_set[(ulong)bVar4] == false);\u000a    if (uVar8 + 1 < sVar5) {\u000a      do {\u000a        cVar1 = *pcVar7;\u000a        bVar4 = to_uchar();\u000a        if (in_delete_set[(ulong)bVar4] == false) {\u000a          buf[uVar8] = cVar1;\u000a          uVar8 = uVar8 + 1;\u000a        }\u000a        pcVar7 = pcVar7 + 1;\u000a        sVar6 = sVar6 - 1;\u000a      } while (sVar6 != 0);\u000a    }\u000a    if (uVar8 != 0) {\u000a      return uVar8;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p374
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV qword ptr [RSP + 0x10],RSI\nMOV R15,RDI\nLEA RAX,[R15 + 0x1]\nMOV qword ptr [RSP + 0x8],RAX\nNOP\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00402580\nMOV R12,RAX\nTEST R12,R12\nJZ 0x004026a2\nLEA RAX,[R12 + -0x1]\nMOV RCX,qword ptr [RSP + 0x8]\nXOR EBX,EBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R14,RBX\nMOV RBP,RCX\nMOV R13,RAX\nCMP R14,R12\nJNC 0x00402660\nLEA RBX,[R14 + 0x1]\nMOVSX EDI,byte ptr [R15 + R14*0x1]\nCALL 0x00403430\nMOVZX EDX,AL\nLEA RCX,[RBP + 0x1]\nLEA RAX,[R13 + -0x1]\nCMP byte ptr [0x60d3c0 + RDX],0x0\nJZ 0x00402630\nLEA RAX,[R14 + 0x1]\nCMP RAX,R12\nJNC 0x00402697\nNOP dword ptr [RAX]\nMOVZX EBX,byte ptr [RBP]\nMOVSX EDI,BL\nCALL 0x00403430\nMOVZX EAX,AL\nCMP byte ptr [0x60d3c0 + RAX],0x0\nJNZ 0x0040268f\nMOV byte ptr [R15 + R14*0x1],BL\nINC R14\nINC RBP\nDEC R13\nJNZ 0x00402670\nTEST R14,R14\nJZ 0x00402600\nJMP 0x004026a5\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p375
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 74 24 10\n49 89 ff\n49 8d 47 01\n48 89 44 24 08\n90\n4c 89 ff\n48 8b 74 24 10\ne8 73 ff ff ff\n49 89 c4\n4d 85 e4\n0f 84 89 00 00 00\n49 8d 44 24 ff\n48 8b 4c 24 08\n31 db\n66 66 2e 0f 1f 84 00 00 00 00 00\n49 89 de\n48 89 cd\n49 89 c5\n4d 39 e6\n73 22\n49 8d 5e 01\n43 0f be 3c 37\ne8 e4 0d 00 00\n0f b6 d0\n48 8d 4d 01\n49 8d 45 ff\n80 ba c0 d3 60 00 00\n74 d0\n49 8d 46 01\n4c 39 e0\n73 2e\n0f 1f 80 00 00 00 00\n0f b6 5d 00\n0f be fb\ne8 b4 0d 00 00\n0f b6 c0\n80 b8 c0 d3 60 00 00\n75 07\n43 88 1c 37\n49 ff c6\n48 ff c5\n49 ff cd\n75 d9\n4d 85 f6\n0f 84 60 ff ff ff\neb 03\n45 31 f6\n4c 89 f0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p376
S'.text:00000000004025e0\n.text:00000000004025e1\n.text:00000000004025e3\n.text:00000000004025e5\n.text:00000000004025e7\n.text:00000000004025e9\n.text:00000000004025ea\n.text:00000000004025ee\n.text:00000000004025f3\n.text:00000000004025f6\n.text:00000000004025fa\n.text:00000000004025ff\n.text:0000000000402600\n.text:0000000000402603\n.text:0000000000402608\n.text:000000000040260d\n.text:0000000000402610\n.text:0000000000402613\n.text:0000000000402619\n.text:000000000040261e\n.text:0000000000402623\n.text:0000000000402625\n.text:0000000000402630\n.text:0000000000402633\n.text:0000000000402636\n.text:0000000000402639\n.text:000000000040263c\n.text:000000000040263e\n.text:0000000000402642\n.text:0000000000402647\n.text:000000000040264c\n.text:000000000040264f\n.text:0000000000402653\n.text:0000000000402657\n.text:000000000040265e\n.text:0000000000402660\n.text:0000000000402664\n.text:0000000000402667\n.text:0000000000402669\n.text:0000000000402670\n.text:0000000000402674\n.text:0000000000402677\n.text:000000000040267c\n.text:000000000040267f\n.text:0000000000402686\n.text:0000000000402688\n.text:000000000040268c\n.text:000000000040268f\n.text:0000000000402692\n.text:0000000000402695\n.text:0000000000402697\n.text:000000000040269a\n.text:00000000004026a0\n.text:00000000004026a2\n.text:00000000004026a5\n.text:00000000004026a8\n.text:00000000004026ac\n.text:00000000004026ad\n.text:00000000004026af\n.text:00000000004026b1\n.text:00000000004026b3\n.text:00000000004026b5\n.text:00000000004026b6\n'
p377
tp378
sS'skip_construct'
p379
(S'\n__stdcall skip_construct(Spec_list * s)\n'
p380
V\u000avoid skip_construct(Spec_list *s)\u000a\u000a{\u000a  s->tail = s->tail->next;\u000a  s->state = 0xffffffffffffffff;\u000a  return;\u000a}\u000a\u000a
p381
S'MOV RAX,qword ptr [RDI + 0x8]\nMOV RAX,qword ptr [RAX + 0x8]\nMOV qword ptr [RDI + 0x8],RAX\nMOV qword ptr [RDI + 0x10],-0x1\nRET\n'
p382
S'48 8b 47 08\n48 8b 40 08\n48 89 47 08\n48 c7 47 10 ff ff ff ff\nc3\n'
p383
S'.text:00000000004028d0\n.text:00000000004028d4\n.text:00000000004028d8\n.text:00000000004028dc\n.text:00000000004028e4\n'
p384
tp385
sS'c_isspace'
p386
(S'\n__stdcall c_isspace()\n'
p387
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p388
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00406075\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p389
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p390
S'.text:0000000000406060\n.text:0000000000406063\n.text:0000000000406066\n.text:0000000000406068\n.text:000000000040606d\n.text:000000000040606f\n.text:0000000000406071\n.text:0000000000406074\n.text:0000000000406075\n.text:0000000000406077\n'
p391
tp392
sS'get_s1_spec_stats'
p393
(S'\n__stdcall get_s1_spec_stats(Spec_list * s1)\n'
p394
V\u000avoid get_s1_spec_stats(Spec_list *s1)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  get_spec_stats(s1);\u000a  if (complement != false) {\u000a    iVar1 = card_of_complement(s1);\u000a    s1->length = (long)iVar1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p395
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00403830\nCMP byte ptr [0x0060b2b0],0x0\nJZ 0x004034c0\nMOV RDI,RBX\nCALL 0x004039c0\nCDQE\nMOV qword ptr [RBX + 0x18],RAX\nPOP RBX\nRET\n'
p396
S'53\n48 89 fb\ne8 87 03 00 00\n80 3d 00 7e 20 00 00\n74 0e\n48 89 df\ne8 06 05 00 00\n48 98\n48 89 43 18\n5b\nc3\n'
p397
S'.text:00000000004034a0\n.text:00000000004034a1\n.text:00000000004034a4\n.text:00000000004034a9\n.text:00000000004034b0\n.text:00000000004034b2\n.text:00000000004034b5\n.text:00000000004034ba\n.text:00000000004034bc\n.text:00000000004034c0\n.text:00000000004034c1\n'
p398
tp399
sS'open'
p400
(S'\n__stdcall open(char * __file, int __oflag)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060b190)();\u000a  return iVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x0060b190]\n'
p403
S'ff 25 5a 9b 20 00\n'
p404
S'.plt:0000000000401630\n'
p405
tp406
sS'quotearg_n_custom_mem'
p407
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p408
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p409
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060d610]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060d600]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d5f0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060d5e0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403d50\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404be0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p410
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 07 86 20 00\n48 89 44 24 30\n0f 10 05 eb 85 20 00\n0f 29 44 24 20\n0f 10 05 cf 85 20 00\n0f 29 44 24 10\n0f 10 05 b3 85 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p411
S'.text:0000000000404ff0\n.text:0000000000404ff1\n.text:0000000000404ff3\n.text:0000000000404ff5\n.text:0000000000404ff6\n.text:0000000000404ffa\n.text:0000000000404ffd\n.text:0000000000405000\n.text:0000000000405002\n.text:0000000000405009\n.text:000000000040500e\n.text:0000000000405015\n.text:000000000040501a\n.text:0000000000405021\n.text:0000000000405026\n.text:000000000040502d\n.text:0000000000405031\n.text:0000000000405034\n.text:0000000000405037\n.text:000000000040503c\n.text:000000000040503e\n.text:0000000000405041\n.text:0000000000405044\n.text:0000000000405047\n.text:000000000040504c\n.text:0000000000405050\n.text:0000000000405051\n.text:0000000000405053\n.text:0000000000405055\n.text:0000000000405056\n'
p412
tp413
sS'_init'
p414
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p415
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060aff8;\u000a  if (PTR___gmon_start___0060aff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060aff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p416
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060aff8]\nTEST RAX,RAX\nJZ 0x00401322\nCALL RAX\nADD RSP,0x8\nRET\n'
p417
S'48 83 ec 08\n48 8b 05 dd 9c 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p418
S'.init:0000000000401310\n.init:0000000000401314\n.init:000000000040131b\n.init:000000000040131e\n.init:0000000000401320\n.init:0000000000401322\n.init:0000000000401326\n'
p419
tp420
sS'tolower'
p421
(S'\n__stdcall tolower(int __c)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint tolower(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_tolower_0060b130)();\u000a  return iVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x0060b130]\n'
p424
S'ff 25 ba 9b 20 00\n'
p425
S'.plt:0000000000401570\n'
p426
tp427
sS'set_quoting_flags'
p428
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p429
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p430
S'TEST RDI,RDI\nMOV ECX,0x60d5e0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p431
S'48 85 ff\nb9 e0 d5 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p432
S'.text:0000000000403d30\n.text:0000000000403d33\n.text:0000000000403d38\n.text:0000000000403d3c\n.text:0000000000403d3f\n.text:0000000000403d42\n'
p433
tp434
sS'realloc'
p435
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060b168)();\u000a  return pvVar1;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x0060b168]\n'
p438
S'ff 25 82 9b 20 00\n'
p439
S'.plt:00000000004015e0\n'
p440
tp441
sS'__fprintf_chk'
p442
(S'\n__stdcall __fprintf_chk()\n'
p443
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060b1c0)();\u000a  return;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x0060b1c0]\n'
p445
S'ff 25 2a 9b 20 00\n'
p446
S'.plt:0000000000401690\n'
p447
tp448
sS'get_charset_aliases'
p449
(S'\n__stdcall get_charset_aliases()\n'
p450
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_004063e4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_004063e4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_004063e4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_004063e4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_004063e4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_004063e4_caseD_9;\u000a      case -1:\u000a        goto switchD_004063e4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040643d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00406443:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_004063e4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00406443;\u000a  }\u000a  goto LAB_0040643d;\u000a}\u000a\u000a
p451
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060d720]\nTEST R15,R15\nJNZ 0x00406452\nMOV EDI,0x409234\nCALL 0x00401340\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00406208\nCMP byte ptr [RBX],0x0\nJNZ 0x0040620d\nMOV EBX,0x409244\nMOV RDI,RBX\nCALL 0x00401440\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00406227\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00406229\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401580\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040627d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401550\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00406288\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x004062a5\nMOV R15D,0x408989\nJMP 0x0040644b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401630\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040643d\nMOV ESI,0x407c6e\nMOV EDI,EBP\nCALL 0x004015f0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00406404\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x004063d0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004013a0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004013a0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x004063d0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x004015b0\nMOV ESI,0x409253\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x004014c0\nCMP EAX,0x2\nJL 0x00406424\nMOV RDI,R12\nCALL 0x00401440\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401440\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004063ad\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x004015e0\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x004062f4\nJMP 0x0040640d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401580\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x004062f4\nJMP 0x0040640d\nMOV RDI,RBX\nCALL 0x004013d0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00406337\nJMP qword ptr [0x4090f8 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004013d0\nCMP EAX,-0x1\nJZ 0x00406424\nCMP EAX,0xa\nJNZ 0x004063f0\nJMP 0x004063d0\nMOV EDI,EBP\nCALL 0x004014d0\nJMP 0x0040643d\nMOV RDI,R15\nCALL 0x00401350\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00406470\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040643d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00406443\nMOV R15D,0x408989\nMOV RDI,R13\nCALL 0x00401350\nMOV qword ptr [0x0060d720],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p452
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 38 75 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 34 92 40 00\ne8 45 b1 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 44 92 40 00\n48 89 df\ne8 2b b2 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 49 b3 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 03 b3 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 89 89 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 7c b3 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 6e 7c 40 00\n89 ef\ne8 26 b3 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 8b b0 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 7b b0 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 6f b2 ff ff\nbe 53 92 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 6a b1 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 d9 b0 ff ff\n49 89 c4\n48 89 ef\ne8 ce b0 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 46 b2 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 c5 b1 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 f8 af ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd f8 90 40 00\n48 89 df\ne8 d8 af ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 c5 b0 ff ff\neb 30\n4c 89 ff\ne8 3b af ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 44 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 89 89 40 00\n4c 89 ef\ne8 05 af ff ff\n4c 89 3d ce 72 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p453
S'.text:00000000004061d0\n.text:00000000004061d1\n.text:00000000004061d3\n.text:00000000004061d5\n.text:00000000004061d7\n.text:00000000004061d9\n.text:00000000004061da\n.text:00000000004061e1\n.text:00000000004061e8\n.text:00000000004061eb\n.text:00000000004061f1\n.text:00000000004061f6\n.text:00000000004061fb\n.text:00000000004061fe\n.text:0000000000406201\n.text:0000000000406203\n.text:0000000000406206\n.text:0000000000406208\n.text:000000000040620d\n.text:0000000000406210\n.text:0000000000406215\n.text:0000000000406218\n.text:000000000040621b\n.text:000000000040621d\n.text:0000000000406222\n.text:0000000000406225\n.text:0000000000406227\n.text:0000000000406229\n.text:000000000040622d\n.text:0000000000406232\n.text:0000000000406237\n.text:000000000040623a\n.text:000000000040623d\n.text:000000000040623f\n.text:0000000000406242\n.text:0000000000406245\n.text:0000000000406248\n.text:000000000040624d\n.text:0000000000406250\n.text:0000000000406253\n.text:0000000000406256\n.text:0000000000406258\n.text:000000000040625e\n.text:0000000000406268\n.text:000000000040626d\n.text:0000000000406277\n.text:000000000040627b\n.text:000000000040627d\n.text:0000000000406283\n.text:0000000000406288\n.text:0000000000406292\n.text:0000000000406297\n.text:00000000004062a1\n.text:00000000004062a5\n.text:00000000004062aa\n.text:00000000004062ac\n.text:00000000004062af\n.text:00000000004062b4\n.text:00000000004062b6\n.text:00000000004062b8\n.text:00000000004062be\n.text:00000000004062c3\n.text:00000000004062c5\n.text:00000000004062ca\n.text:00000000004062cd\n.text:00000000004062d0\n.text:00000000004062d6\n.text:00000000004062db\n.text:00000000004062e0\n.text:00000000004062e2\n.text:00000000004062e7\n.text:00000000004062ea\n.text:00000000004062ef\n.text:00000000004062f4\n.text:00000000004062f9\n.text:00000000004062fc\n.text:00000000004062ff\n.text:0000000000406302\n.text:0000000000406305\n.text:0000000000406308\n.text:000000000040630d\n.text:0000000000406310\n.text:0000000000406315\n.text:0000000000406318\n.text:000000000040631d\n.text:0000000000406320\n.text:0000000000406325\n.text:000000000040632a\n.text:000000000040632d\n.text:0000000000406332\n.text:0000000000406337\n.text:0000000000406339\n.text:000000000040633c\n.text:0000000000406341\n.text:0000000000406346\n.text:0000000000406348\n.text:000000000040634b\n.text:000000000040634e\n.text:0000000000406351\n.text:0000000000406356\n.text:0000000000406359\n.text:000000000040635f\n.text:0000000000406362\n.text:0000000000406367\n.text:000000000040636a\n.text:000000000040636d\n.text:0000000000406372\n.text:0000000000406375\n.text:000000000040637a\n.text:000000000040637f\n.text:0000000000406382\n.text:0000000000406384\n.text:0000000000406388\n.text:000000000040638d\n.text:0000000000406392\n.text:0000000000406395\n.text:000000000040639a\n.text:000000000040639d\n.text:00000000004063a2\n.text:00000000004063a5\n.text:00000000004063ab\n.text:00000000004063ad\n.text:00000000004063b2\n.text:00000000004063b6\n.text:00000000004063bb\n.text:00000000004063be\n.text:00000000004063c1\n.text:00000000004063c7\n.text:00000000004063d0\n.text:00000000004063d3\n.text:00000000004063d8\n.text:00000000004063db\n.text:00000000004063de\n.text:00000000004063e4\n.text:00000000004063f0\n.text:00000000004063f3\n.text:00000000004063f8\n.text:00000000004063fb\n.text:00000000004063fd\n.text:0000000000406400\n.text:0000000000406402\n.text:0000000000406404\n.text:0000000000406406\n.text:000000000040640b\n.text:000000000040640d\n.text:0000000000406410\n.text:0000000000406415\n.text:0000000000406417\n.text:000000000040641c\n.text:000000000040641f\n.text:0000000000406424\n.text:0000000000406427\n.text:000000000040642c\n.text:0000000000406431\n.text:0000000000406434\n.text:0000000000406436\n.text:000000000040643b\n.text:000000000040643d\n.text:0000000000406443\n.text:0000000000406446\n.text:000000000040644b\n.text:0000000000406452\n.text:0000000000406455\n.text:000000000040645c\n.text:000000000040645d\n.text:000000000040645f\n.text:0000000000406461\n.text:0000000000406463\n.text:0000000000406465\n.text:0000000000406466\n'
p454
tp455
sS'nl_langinfo'
p456
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p457
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060b148)();\u000a  return pcVar1;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x0060b148]\n'
p459
S'ff 25 a2 9b 20 00\n'
p460
S'.plt:00000000004015a0\n'
p461
tp462
sS'x2realloc'
p463
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p464
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p465
S'MOV EDX,0x1\nJMP 0x00405b00\n'
p466
S'ba 01 00 00 00\neb 89\n'
p467
S'.text:0000000000405b70\n.text:0000000000405b75\n'
p468
tp469
sS'strlen'
p470
(S'\n__stdcall strlen(char * __s)\n'
p471
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060b098)();\u000a  return sVar1;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x0060b098]\n'
p473
S'ff 25 52 9c 20 00\n'
p474
S'.plt:0000000000401440\n'
p475
tp476
sS'get_s2_spec_stats'
p477
(S'\n__stdcall get_s2_spec_stats(Spec_list * s2, count len_s1)\n'
p478
V\u000avoid get_s2_spec_stats(Spec_list *s2,count len_s1)\u000a\u000a{\u000a  get_spec_stats(s2);\u000a  if ((s2->length <= len_s1) && (s2->n_indefinite_repeats == 1)) {\u000a    *(count *)(s2->indefinite_repeat_element->u + 8) = len_s1 - s2->length;\u000a    s2->length = len_s1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p479
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nCALL 0x00403830\nMOV RAX,qword ptr [RBX + 0x18]\nCMP RAX,R14\nJA 0x00403501\nCMP qword ptr [RBX + 0x20],0x1\nJNZ 0x00403501\nMOV RCX,R14\nSUB RCX,RAX\nMOV RAX,qword ptr [RBX + 0x28]\nMOV qword ptr [RAX + 0x18],RCX\nMOV qword ptr [RBX + 0x18],R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p480
S'41 56\n53\n50\n49 89 f6\n48 89 fb\ne8 51 03 00 00\n48 8b 43 18\n4c 39 f0\n77 19\n48 83 7b 20 01\n75 12\n4c 89 f1\n48 29 c1\n48 8b 43 28\n48 89 48 18\n4c 89 73 18\n48 83 c4 08\n5b\n41 5e\nc3\n'
p481
S'.text:00000000004034d0\n.text:00000000004034d2\n.text:00000000004034d3\n.text:00000000004034d4\n.text:00000000004034d7\n.text:00000000004034da\n.text:00000000004034df\n.text:00000000004034e3\n.text:00000000004034e6\n.text:00000000004034e8\n.text:00000000004034ed\n.text:00000000004034ef\n.text:00000000004034f2\n.text:00000000004034f5\n.text:00000000004034f9\n.text:00000000004034fd\n.text:0000000000403501\n.text:0000000000403505\n.text:0000000000403506\n.text:0000000000403508\n'
p482
tp483
sS'memcmp'
p484
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p485
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060b0f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p486
S'JMP qword ptr [0x0060b0f8]\n'
p487
S'ff 25 f2 9b 20 00\n'
p488
S'.plt:0000000000401500\n'
p489
tp490
sS'quotearg_n_style_mem'
p491
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p492
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p493
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00404e10\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404be0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p494
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p495
S'.text:0000000000404e70\n.text:0000000000404e71\n.text:0000000000404e73\n.text:0000000000404e75\n.text:0000000000404e76\n.text:0000000000404e7a\n.text:0000000000404e7d\n.text:0000000000404e80\n.text:0000000000404e82\n.text:0000000000404e85\n.text:0000000000404e88\n.text:0000000000404e8d\n.text:0000000000404e8f\n.text:0000000000404e92\n.text:0000000000404e95\n.text:0000000000404e98\n.text:0000000000404e9d\n.text:0000000000404ea1\n.text:0000000000404ea2\n.text:0000000000404ea4\n.text:0000000000404ea6\n.text:0000000000404ea7\n'
p496
tp497
sS'_exit'
p498
(S'\n__stdcall _exit(int __status)\n'
p499
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060b040)();\u000a  return;\u000a}\u000a\u000a
p500
S'JMP qword ptr [0x0060b040]\n'
p501
S'ff 25 aa 9c 20 00\n'
p502
S'.plt:0000000000401390\n'
p503
tp504
sS'bkm_scale_by_power'
p505
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p506
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p507
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00405f21\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00405ec0\nOR EBP,EAX\nDEC EBX\nJNZ 0x00405f10\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p508
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p509
S'.text:0000000000405ef0\n.text:0000000000405ef1\n.text:0000000000405ef3\n.text:0000000000405ef5\n.text:0000000000405ef6\n.text:0000000000405ef7\n.text:0000000000405ef9\n.text:0000000000405efc\n.text:0000000000405eff\n.text:0000000000405f01\n.text:0000000000405f03\n.text:0000000000405f05\n.text:0000000000405f10\n.text:0000000000405f13\n.text:0000000000405f16\n.text:0000000000405f1b\n.text:0000000000405f1d\n.text:0000000000405f1f\n.text:0000000000405f21\n.text:0000000000405f23\n.text:0000000000405f27\n.text:0000000000405f28\n.text:0000000000405f2a\n.text:0000000000405f2c\n.text:0000000000405f2d\n'
p510
tp511
sS'xrealloc'
p512
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p513
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p514
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00405ae7\nTEST RBX,RBX\nJNZ 0x00405ae7\nCALL 0x00401350\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x004015e0\nTEST RBX,RBX\nJZ 0x00405af9\nTEST RAX,RAX\nJZ 0x00405afb\nPOP RBX\nRET\nCALL 0x00405c20\n'
p515
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 6d b8 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 f1 ba ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p516
S'.text:0000000000405ad0\n.text:0000000000405ad1\n.text:0000000000405ad4\n.text:0000000000405ad7\n.text:0000000000405ad9\n.text:0000000000405adc\n.text:0000000000405ade\n.text:0000000000405ae3\n.text:0000000000405ae5\n.text:0000000000405ae6\n.text:0000000000405ae7\n.text:0000000000405aea\n.text:0000000000405aef\n.text:0000000000405af2\n.text:0000000000405af4\n.text:0000000000405af7\n.text:0000000000405af9\n.text:0000000000405afa\n.text:0000000000405afb\n'
p517
tp518
sS'close_stdout'
p519
(S'\n__stdcall close_stdout()\n'
p520
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00403b17;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x4082c3,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00403b17:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p521
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060b268]\nCALL 0x004060d0\nTEST EAX,EAX\nJZ 0x00403b17\nCMP byte ptr [0x0060d5c8],0x0\nJZ 0x00403b2c\nCALL 0x00401370\nCMP dword ptr [RAX],0x20\nJNZ 0x00403b2c\nMOV RDI,qword ptr [0x0060b2a0]\nCALL 0x004060d0\nTEST EAX,EAX\nJNZ 0x00403b71\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40787c\nMOV EDX,0x5\nCALL 0x00401420\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060d5c0]\nCALL 0x00401370\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00403b7c\nXOR EDI,EDI\nMOV EDX,0x4082c3\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401620\nMOV EDI,dword ptr [0x0060b200]\nCALL 0x00401390\nMOV EDI,dword ptr [0x0060b200]\nCALL 0x00401390\nMOV RDI,RBX\nCALL 0x00404f70\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x4082bf\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401620\nMOV EDI,dword ptr [0x0060b200]\nCALL 0x00401390\n'
p522
S'55\n41 56\n53\n48 8b 3d 6d 77 20 00\ne8 d0 25 00 00\n85 c0\n74 13\n80 3d bd 9a 20 00 00\n74 1f\ne8 5e d8 ff ff\n83 38 20\n75 15\n48 8b 3d 82 77 20 00\ne8 ad 25 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 7c 78 40 00\nba 05 00 00 00\ne8 e3 d8 ff ff\n49 89 c6\n48 8b 1d 79 9a 20 00\ne8 24 d8 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba c3 82 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 ba da ff ff\n8b 3d 94 76 20 00\ne8 1f d8 ff ff\n8b 3d 89 76 20 00\ne8 14 d8 ff ff\n48 89 df\ne8 ec 13 00 00\n48 89 c1\n31 ff\nba bf 82 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 86 da ff ff\n8b 3d 60 76 20 00\ne8 eb d7 ff ff\n'
p523
S'.text:0000000000403af0\n.text:0000000000403af1\n.text:0000000000403af3\n.text:0000000000403af4\n.text:0000000000403afb\n.text:0000000000403b00\n.text:0000000000403b02\n.text:0000000000403b04\n.text:0000000000403b0b\n.text:0000000000403b0d\n.text:0000000000403b12\n.text:0000000000403b15\n.text:0000000000403b17\n.text:0000000000403b1e\n.text:0000000000403b23\n.text:0000000000403b25\n.text:0000000000403b27\n.text:0000000000403b28\n.text:0000000000403b2a\n.text:0000000000403b2b\n.text:0000000000403b2c\n.text:0000000000403b2e\n.text:0000000000403b33\n.text:0000000000403b38\n.text:0000000000403b3d\n.text:0000000000403b40\n.text:0000000000403b47\n.text:0000000000403b4c\n.text:0000000000403b4f\n.text:0000000000403b51\n.text:0000000000403b53\n.text:0000000000403b55\n.text:0000000000403b5a\n.text:0000000000403b5c\n.text:0000000000403b5e\n.text:0000000000403b61\n.text:0000000000403b66\n.text:0000000000403b6c\n.text:0000000000403b71\n.text:0000000000403b77\n.text:0000000000403b7c\n.text:0000000000403b7f\n.text:0000000000403b84\n.text:0000000000403b87\n.text:0000000000403b89\n.text:0000000000403b8e\n.text:0000000000403b90\n.text:0000000000403b92\n.text:0000000000403b95\n.text:0000000000403b9a\n.text:0000000000403ba0\n'
p524
tp525
sS'version_etc_ar'
p526
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p527
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p528
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x004058e0\nJMP 0x00405570\n'
p529
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p530
S'.text:00000000004058d0\n.text:00000000004058d7\n.text:00000000004058e0\n.text:00000000004058e6\n.text:00000000004058ea\n.text:00000000004058ec\n'
p531
tp532
sS'strtoumax'
p533
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p534
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_0060b1a0)();\u000a  return uVar1;\u000a}\u000a\u000a
p535
S'JMP qword ptr [0x0060b1a0]\n'
p536
S'ff 25 4a 9b 20 00\n'
p537
S'.plt:0000000000401650\n'
p538
tp539
sS'c_isxdigit'
p540
(S'\n__stdcall c_isxdigit()\n'
p541
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p542
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x004060ab\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p543
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p544
S'.text:0000000000406090\n.text:0000000000406093\n.text:0000000000406096\n.text:0000000000406098\n.text:00000000004060a2\n.text:00000000004060a4\n.text:00000000004060a7\n.text:00000000004060aa\n.text:00000000004060ab\n.text:00000000004060ad\n'
p545
tp546
sS'__libc_csu_fini'
p547
(S'\n__stdcall __libc_csu_fini()\n'
p548
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p549
S'RET\n'
p550
S'f3 c3\n'
p551
S'.text:0000000000406620\n'
p552
tp553
sS'abort'
p554
(S'\n__stdcall abort()\n'
p555
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060b028)();\u000a  return;\u000a}\u000a\u000a
p556
S'JMP qword ptr [0x0060b028]\n'
p557
S'ff 25 c2 9c 20 00\n'
p558
S'.plt:0000000000401360\n'
p559
tp560
sS'version_etc'
p561
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p562
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p563
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x004059a2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00405900\nADD RSP,0xd8\nRET\n'
p564
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p565
S'.text:0000000000405960\n.text:0000000000405967\n.text:0000000000405969\n.text:000000000040596b\n.text:0000000000405970\n.text:0000000000405975\n.text:000000000040597a\n.text:0000000000405982\n.text:000000000040598a\n.text:0000000000405992\n.text:000000000040599a\n.text:00000000004059a2\n.text:00000000004059a7\n.text:00000000004059ac\n.text:00000000004059b1\n.text:00000000004059b6\n.text:00000000004059be\n.text:00000000004059c3\n.text:00000000004059cb\n.text:00000000004059d2\n.text:00000000004059d5\n.text:00000000004059da\n.text:00000000004059e1\n'
p566
tp567
sS'posix_fadvise'
p568
(S'\n__stdcall posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p569
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_0060b0e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p570
S'JMP qword ptr [0x0060b0e8]\n'
p571
S'ff 25 02 9c 20 00\n'
p572
S'.plt:00000000004014e0\n'
p573
tp574
sS'append_normal_char'
p575
(S'\n__stdcall append_normal_char(Spec_list * list)\n'
p576
V\u000avoid append_normal_char(Spec_list *list)\u000a\u000a{\u000a  List_element *pLVar1;\u000a  byte in_SIL;\u000a  \u000a  pLVar1 = (List_element *)xmalloc(0x20);\u000a  pLVar1->next = (List_element *)0x0;\u000a  pLVar1->type = RE_NORMAL_CHAR;\u000a  pLVar1->u[0] = in_SIL;\u000a  if (list->tail != (List_element *)0x0) {\u000a    list->tail->next = pLVar1;\u000a    list->tail = pLVar1;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("list->tail","src/tr.c",0x28b,\u000a                "void append_normal_char(struct Spec_list *, unsigned char)");\u000a}\u000a\u000a
p577
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,0x20\nCALL 0x00405a90\nMOV qword ptr [RAX + 0x8],0x0\nMOV dword ptr [RAX],0x0\nMOV byte ptr [RAX + 0x10],BPL\nMOV RCX,qword ptr [RBX + 0x8]\nTEST RCX,RCX\nJZ 0x004033ac\nMOV qword ptr [RCX + 0x8],RAX\nMOV qword ptr [RBX + 0x8],RAX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV EDI,0x407bcf\nMOV ESI,0x4078a2\nMOV EDX,0x28b\nMOV ECX,0x407e2d\nCALL 0x004014a0\n'
p578
S'55\n53\n50\n89 f5\n48 89 fb\nbf 20 00 00 00\ne8 0e 27 00 00\n48 c7 40 08 00 00 00 00\nc7 00 00 00 00 00\n40 88 68 10\n48 8b 4b 08\n48 85 c9\n74 0f\n48 89 41 08\n48 89 43 08\n48 83 c4 08\n5b\n5d\nc3\nbf cf 7b 40 00\nbe a2 78 40 00\nba 8b 02 00 00\nb9 2d 7e 40 00\ne8 db e0 ff ff\n'
p579
S'.text:0000000000403370\n.text:0000000000403371\n.text:0000000000403372\n.text:0000000000403373\n.text:0000000000403375\n.text:0000000000403378\n.text:000000000040337d\n.text:0000000000403382\n.text:000000000040338a\n.text:0000000000403390\n.text:0000000000403394\n.text:0000000000403398\n.text:000000000040339b\n.text:000000000040339d\n.text:00000000004033a1\n.text:00000000004033a5\n.text:00000000004033a9\n.text:00000000004033aa\n.text:00000000004033ab\n.text:00000000004033ac\n.text:00000000004033b1\n.text:00000000004033b6\n.text:00000000004033bb\n.text:00000000004033c0\n'
p580
tp581
sS'lseek'
p582
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060b0c0)();\u000a  return _Var1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x0060b0c0]\n'
p585
S'ff 25 2a 9c 20 00\n'
p586
S'.plt:0000000000401490\n'
p587
tp588
sS'quotearg_n_mem'
p589
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p590
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p591
S'MOV ECX,0x60d5e0\nJMP 0x00404be0\n'
p592
S'b9 e0 d5 60 00\ne9 36 fe ff ff\n'
p593
S'.text:0000000000404da0\n.text:0000000000404da5\n'
p594
tp595
sS'__printf_chk'
p596
(S'\n__stdcall __printf_chk()\n'
p597
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060b180)();\u000a  return;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x0060b180]\n'
p599
S'ff 25 6a 9b 20 00\n'
p600
S'.plt:0000000000401610\n'
p601
tp602
sS'emit_ancillary_info'
p603
(S'\n__stdcall emit_ancillary_info()\n'
p604
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00406d60;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("tr",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "tr";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_0040774f,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_0040774f);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x408989;\u000a  if (__s2 == "tr") {\u000a    uVar3 = 0x40792e;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p605
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x406d60\nMOV ESI,0x407912\nNOP\nMOV EDI,0x40774f\nCALL 0x00401540\nTEST EAX,EAX\nJZ 0x0040197b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401960\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x40774f\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x407971\nMOV EDX,0x5\nCALL 0x00401420\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x407771\nMOV ECX,0x407988\nXOR EAX,EAX\nCALL 0x00401610\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401600\nTEST RAX,RAX\nJZ 0x00401a04\nMOV ESI,0x4079af\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401380\nTEST EAX,EAX\nJZ 0x00401a04\nXOR EDI,EDI\nMOV ESI,0x4079b3\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40774f\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x4079f8\nMOV EDX,0x5\nCALL 0x00401420\nMOV RSI,RAX\nMOV R14D,0x40774f\nMOV EDI,0x1\nMOV EDX,0x407988\nMOV ECX,0x40774f\nXOR EAX,EAX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x407a17\nMOV EDX,0x5\nCALL 0x00401420\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x40792e\nMOV ECX,0x408989\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401610\n'
p606
S'41 56\n53\n50\nbb 60 6d 40 00\nbe 12 79 40 00\n66 90\nbf 4f 77 40 00\ne8 d6 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 4f 77 40 00\n48 0f 45 d8\n31 ff\nbe 71 79 40 00\nba 05 00 00 00\ne8 84 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba 71 77 40 00\nb9 88 79 40 00\n31 c0\ne8 5b fc ff ff\nbf 05 00 00 00\n31 f6\ne8 3f fc ff ff\n48 85 c0\n74 3e\nbe af 79 40 00\nba 03 00 00 00\n48 89 c7\ne8 a8 f9 ff ff\n85 c0\n74 28\n31 ff\nbe b3 79 40 00\nba 05 00 00 00\ne8 33 fa ff ff\n48 89 c1\nbf 01 00 00 00\nba 4f 77 40 00\n31 c0\n48 89 ce\ne8 0c fc ff ff\n31 ff\nbe f8 79 40 00\nba 05 00 00 00\ne8 0b fa ff ff\n48 89 c6\n41 be 4f 77 40 00\nbf 01 00 00 00\nba 88 79 40 00\nb9 4f 77 40 00\n31 c0\ne8 dc fb ff ff\n31 ff\nbe 17 7a 40 00\nba 05 00 00 00\ne8 db f9 ff ff\n48 89 c2\n4c 39 f3\nb8 2e 79 40 00\nb9 89 89 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 9e fb ff ff\n'
p607
S'.text:0000000000401950\n.text:0000000000401952\n.text:0000000000401953\n.text:0000000000401954\n.text:0000000000401959\n.text:000000000040195e\n.text:0000000000401960\n.text:0000000000401965\n.text:000000000040196a\n.text:000000000040196c\n.text:000000000040196e\n.text:0000000000401972\n.text:0000000000401976\n.text:0000000000401979\n.text:000000000040197b\n.text:000000000040197f\n.text:0000000000401982\n.text:0000000000401987\n.text:000000000040198b\n.text:000000000040198d\n.text:0000000000401992\n.text:0000000000401997\n.text:000000000040199c\n.text:000000000040199f\n.text:00000000004019a4\n.text:00000000004019a9\n.text:00000000004019ae\n.text:00000000004019b0\n.text:00000000004019b5\n.text:00000000004019ba\n.text:00000000004019bc\n.text:00000000004019c1\n.text:00000000004019c4\n.text:00000000004019c6\n.text:00000000004019cb\n.text:00000000004019d0\n.text:00000000004019d3\n.text:00000000004019d8\n.text:00000000004019da\n.text:00000000004019dc\n.text:00000000004019de\n.text:00000000004019e3\n.text:00000000004019e8\n.text:00000000004019ed\n.text:00000000004019f0\n.text:00000000004019f5\n.text:00000000004019fa\n.text:00000000004019fc\n.text:00000000004019ff\n.text:0000000000401a04\n.text:0000000000401a06\n.text:0000000000401a0b\n.text:0000000000401a10\n.text:0000000000401a15\n.text:0000000000401a18\n.text:0000000000401a1e\n.text:0000000000401a23\n.text:0000000000401a28\n.text:0000000000401a2d\n.text:0000000000401a2f\n.text:0000000000401a34\n.text:0000000000401a36\n.text:0000000000401a3b\n.text:0000000000401a40\n.text:0000000000401a45\n.text:0000000000401a48\n.text:0000000000401a4b\n.text:0000000000401a50\n.text:0000000000401a55\n.text:0000000000401a59\n.text:0000000000401a5e\n.text:0000000000401a60\n.text:0000000000401a63\n.text:0000000000401a66\n.text:0000000000401a6a\n.text:0000000000401a6b\n.text:0000000000401a6d\n'
p608
tp609
sS'version_etc_va'
p610
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p611
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p612
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00405930\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040593c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00405951\nINC R9\nCMP R9,0xa\nJC 0x00405910\nMOV R8,RSP\nCALL 0x00405570\nADD RSP,0x58\nRET\n'
p613
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p614
S'.text:0000000000405900\n.text:0000000000405904\n.text:0000000000405907\n.text:0000000000405910\n.text:0000000000405913\n.text:0000000000405917\n.text:0000000000405919\n.text:000000000040591c\n.text:0000000000405920\n.text:0000000000405924\n.text:0000000000405927\n.text:0000000000405930\n.text:0000000000405934\n.text:0000000000405938\n.text:000000000040593c\n.text:000000000040593f\n.text:0000000000405943\n.text:0000000000405946\n.text:0000000000405948\n.text:000000000040594b\n.text:000000000040594f\n.text:0000000000405951\n.text:0000000000405954\n.text:0000000000405959\n.text:000000000040595d\n'
p615
tp616
sS'xzalloc'
p617
(S'\n__stdcall xzalloc(size_t s)\n'
p618
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p619
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00405a90\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x004014b0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p620
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 14 b9 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p621
S'.text:0000000000405b80\n.text:0000000000405b82\n.text:0000000000405b83\n.text:0000000000405b84\n.text:0000000000405b87\n.text:0000000000405b8c\n.text:0000000000405b8f\n.text:0000000000405b91\n.text:0000000000405b94\n.text:0000000000405b97\n.text:0000000000405b9c\n.text:0000000000405b9f\n.text:0000000000405ba3\n.text:0000000000405ba4\n.text:0000000000405ba6\n'
p622
tp623
sS'find_closing_delim'
p624
(S'\n__stdcall find_closing_delim(E_string * es, size_t start_idx, size_t * result_idx)\n'
p625
V\u000a_Bool find_closing_delim(E_string *es,size_t start_idx,size_t *result_idx)\u000a\u000a{\u000a  size_t *in_RCX;\u000a  \u000a  if (start_idx < es->len - 1) {\u000a    do {\u000a      if ((((es->s[start_idx] == (char)result_idx) && (es->s[start_idx + 1] == ']')) &&\u000a          (es->escaped[start_idx] == false)) && (es->escaped[start_idx + 1] == false)) {\u000a        *in_RCX = start_idx;\u000a        return true;\u000a      }\u000a      start_idx = start_idx + 1;\u000a    } while (start_idx < es->len - 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p626
S'MOV RAX,qword ptr [RDI + 0x10]\nDEC RAX\nCMP RAX,RSI\nJBE 0x00402e3f\nMOV R9,qword ptr [RDI]\nNOP\nCMP byte ptr [R9 + RSI*0x1],DL\nJNZ 0x00402e30\nCMP byte ptr [R9 + RSI*0x1 + 0x1],0x5d\nJNZ 0x00402e30\nMOV R8,qword ptr [RDI + 0x8]\nCMP byte ptr [R8 + RSI*0x1],0x0\nJNZ 0x00402e30\nCMP byte ptr [R8 + RSI*0x1 + 0x1],0x0\nJZ 0x00402e42\nNOP dword ptr CS:[RAX + RAX*0x1]\nINC RSI\nMOV RAX,qword ptr [RDI + 0x10]\nDEC RAX\nCMP RSI,RAX\nJC 0x00402e00\nXOR EAX,EAX\nRET\nMOV qword ptr [RCX],RSI\nMOV AL,0x1\nRET\n'
p627
S'48 8b 47 10\n48 ff c8\n48 39 f0\n76 43\n4c 8b 0f\n90\n41 38 14 31\n75 2a\n41 80 7c 31 01 5d\n75 22\n4c 8b 47 08\n41 80 3c 30 00\n75 17\n41 80 7c 30 01 00\n74 21\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 ff c6\n48 8b 47 10\n48 ff c8\n48 39 c6\n72 c1\n31 c0\nc3\n48 89 31\nb0 01\nc3\n'
p628
S'.text:0000000000402df0\n.text:0000000000402df4\n.text:0000000000402df7\n.text:0000000000402dfa\n.text:0000000000402dfc\n.text:0000000000402dff\n.text:0000000000402e00\n.text:0000000000402e04\n.text:0000000000402e06\n.text:0000000000402e0c\n.text:0000000000402e0e\n.text:0000000000402e12\n.text:0000000000402e17\n.text:0000000000402e19\n.text:0000000000402e1f\n.text:0000000000402e21\n.text:0000000000402e30\n.text:0000000000402e33\n.text:0000000000402e37\n.text:0000000000402e3a\n.text:0000000000402e3d\n.text:0000000000402e3f\n.text:0000000000402e41\n.text:0000000000402e42\n.text:0000000000402e45\n.text:0000000000402e47\n'
p629
tp630
sS'unquote'
p631
(S'\n__stdcall unquote()\n'
p632
V\u000a_Bool unquote(void)\u000a\u000a{\u000a  uint uVar1;\u000a  byte bVar2;\u000a  byte bVar3;\u000a  int iVar4;\u000a  size_t n;\u000a  void *pvVar5;\u000a  undefined8 uVar6;\u000a  long lVar7;\u000a  long lVar8;\u000a  void **in_RSI;\u000a  char *__s;\u000a  void *pvVar9;\u000a  \u000a  n = strlen(__s);\u000a  pvVar5 = xmalloc(n);\u000a  *in_RSI = pvVar5;\u000a  pvVar5 = xcalloc(n,1);\u000a  in_RSI[1] = pvVar5;\u000a  pvVar9 = (void *)0x0;\u000a  lVar7 = 0;\u000a  do {\u000a    bVar3 = __s[lVar7];\u000a    if (bVar3 == 0x5c) {\u000a      *(undefined *)((long)in_RSI[1] + (long)pvVar9) = 1;\u000a      bVar2 = __s[lVar7 + 1];\u000a      bVar3 = 0x5c;\u000a      lVar8 = lVar7;\u000a      switch(bVar2) {\u000a      case 0:\u000a        uVar6 = dcgettext(0,"warning: an unescaped backslash at end of string is not portable",5);\u000a        error(0,0,uVar6);\u000a        *(undefined *)((long)in_RSI[1] + (long)pvVar9) = 0;\u000a        lVar8 = lVar7 + -1;\u000a        break;\u000a      default:\u000aswitchD_004029c7_caseD_1:\u000a        lVar8 = lVar7;\u000a        bVar3 = bVar2;\u000a        break;\u000a      case 0x30:\u000a      case 0x31:\u000a      case 0x32:\u000a      case 0x33:\u000a      case 0x34:\u000a      case 0x35:\u000a      case 0x36:\u000a      case 0x37:\u000a        bVar2 = bVar2 - 0x30;\u000a        if (7 < (int)__s[lVar7 + 2] - 0x30U) goto switchD_004029c7_caseD_1;\u000a        lVar8 = lVar7 + 1;\u000a        uVar1 = ((int)__s[lVar7 + 2] - 0x30U) + (uint)bVar2 * 8;\u000a        bVar3 = (byte)uVar1;\u000a        if ((int)__s[lVar7 + 3] - 0x30U < 8) {\u000a          iVar4 = ((int)__s[lVar7 + 3] - 0x30U) + (uVar1 & 0xff) * 8;\u000a          if (iVar4 < 0x100) {\u000a            lVar8 = lVar7 + 2;\u000a            bVar3 = (byte)iVar4;\u000a          }\u000a          else {\u000a            uVar6 = dcgettext(0,\u000a                              "warning: the ambiguous octal escape \u005c\u005c%c%c%c is being\u005cn\u005ctinterpreted as the 2-byte sequence \u005c\u005c0%c%c, %c"\u000a                              ,5);\u000a            error(0,0,uVar6);\u000a          }\u000a        }\u000a        break;\u000a      case 0x5c:\u000a        break;\u000a      case 0x61:\u000a        bVar3 = 7;\u000a        lVar8 = lVar7;\u000a        break;\u000a      case 0x62:\u000a        bVar3 = 8;\u000a        lVar8 = lVar7;\u000a        break;\u000a      case 0x66:\u000a        bVar3 = 0xc;\u000a        lVar8 = lVar7;\u000a        break;\u000a      case 0x6e:\u000a        bVar3 = 10;\u000a        lVar8 = lVar7;\u000a        break;\u000a      case 0x72:\u000a        bVar3 = 0xd;\u000a        lVar8 = lVar7;\u000a        break;\u000a      case 0x74:\u000a        bVar3 = 9;\u000a        lVar8 = lVar7;\u000a        break;\u000a      case 0x76:\u000a        bVar3 = 0xb;\u000a        lVar8 = lVar7;\u000a      }\u000a      lVar7 = lVar8 + 1;\u000a    }\u000a    else {\u000a      if (bVar3 == 0) {\u000a        in_RSI[2] = pvVar9;\u000a        return SUB81(pvVar5,0);\u000a      }\u000a    }\u000a    pvVar5 = *in_RSI;\u000a    *(byte *)((long)pvVar5 + (long)pvVar9) = bVar3;\u000a    pvVar9 = (void *)((long)pvVar9 + 1);\u000a    lVar7 = lVar7 + 1;\u000a  } while( true );\u000a}\u000a\u000a
p633
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV R12,RDI\nCALL 0x00401440\nMOV R15,RAX\nMOV RDI,R15\nCALL 0x00405a90\nMOV qword ptr [R14],RAX\nMOV ESI,0x1\nMOV RDI,R15\nCALL 0x00405bb0\nMOV qword ptr [R14 + 0x8],RAX\nXOR R15D,R15D\nXOR EBX,EBX\nJMP 0x0040298d\nMOV RAX,qword ptr [R14]\nMOV byte ptr [RAX + R15*0x1],BPL\nINC R15\nINC RBX\nMOV BPL,byte ptr [R12 + RBX*0x1]\nCMP BPL,0x5c\nJZ 0x004029b0\nTEST BPL,BPL\nJNZ 0x00402980\nJMP 0x00402ac8\nMOV RAX,qword ptr [R14 + 0x8]\nMOV byte ptr [RAX + R15*0x1],0x1\nMOVSX EAX,byte ptr [R12 + RBX*0x1 + 0x1]\nCMP EAX,0x76\nJA 0x00402a14\nMOV BPL,0x5c\nJMP qword ptr [0x406838 + RAX*0x8]\nADD AL,0xd0\nMOVSX ECX,byte ptr [R12 + RBX*0x1 + 0x2]\nADD ECX,-0x30\nCMP ECX,0x7\nJA 0x00402a14\nLEA R13,[RBX + 0x1]\nMOVZX EAX,AL\nLEA EBP,[RCX + RAX*0x8]\nMOVSX EAX,byte ptr [R12 + RBX*0x1 + 0x3]\nADD EAX,-0x30\nCMP EAX,0x7\nJA 0x00402ab0\nMOVZX ECX,BPL\nLEA EAX,[RAX + RCX*0x8]\nCMP EAX,0xff\nJG 0x00402a6f\nADD RBX,0x2\nMOV BPL,AL\nJMP 0x00402ac0\nMOV BPL,AL\nJMP 0x00402ac0\nXOR EDI,EDI\nMOV ESI,0x407aeb\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401620\nMOV RAX,qword ptr [R14 + 0x8]\nMOV byte ptr [RAX + R15*0x1],0x0\nDEC RBX\nJMP 0x00402ac0\nMOV BPL,0x7\nJMP 0x00402ac0\nMOV BPL,0x8\nJMP 0x00402ac0\nMOV BPL,0xc\nJMP 0x00402ac0\nMOV BPL,0xa\nJMP 0x00402ac0\nMOV BPL,0xd\nJMP 0x00402ac0\nMOV BPL,0x9\nJMP 0x00402ac0\nMOV BPL,0xb\nJMP 0x00402ac0\nXOR EDI,EDI\nMOV ESI,0x407a87\nMOV EDX,0x5\nCALL 0x00401420\nMOV RDX,RAX\nMOVSX ECX,byte ptr [RBX + R12*0x1 + 0x1]\nMOVSX R8D,byte ptr [RBX + R12*0x1 + 0x2]\nMOVSX R9D,byte ptr [RBX + R12*0x1 + 0x3]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV EAX,0x0\nPUSH R9\nPUSH R8\nPUSH RCX\nCALL 0x00401620\nADD RSP,0x20\nMOV RBX,R13\nNOP dword ptr CS:[RAX + RAX*0x1]\nINC RBX\nJMP 0x00402980\nMOV qword ptr [R14 + 0x10],R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p634
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f6\n49 89 fc\ne8 ea ea ff ff\n49 89 c7\n4c 89 ff\ne8 2f 31 00 00\n49 89 06\nbe 01 00 00 00\n4c 89 ff\ne8 3f 32 00 00\n49 89 46 08\n45 31 ff\n31 db\neb 11\n49 8b 06\n42 88 2c 38\n49 ff c7\n48 ff c3\n41 8a 2c 1c\n40 80 fd 5c\n74 19\n40 84 ed\n75 e4\ne9 27 01 00 00\n49 8b 46 08\n42 c6 04 38 01\n41 0f be 44 1c 01\n83 f8 76\n77 50\n40 b5 5c\nff 24 c5 38 68 40 00\n04 d0\n41 0f be 4c 1c 02\n83 c1 d0\n83 f9 07\n77 36\n4c 8d 6b 01\n0f b6 c0\n8d 2c c1\n41 0f be 44 1c 03\n83 c0 d0\n83 f8 07\n0f 87 b6 00 00 00\n40 0f b6 cd\n8d 04 c8\n3d ff 00 00 00\n7f 67\n48 83 c3 02\n40 88 c5\ne9 ac 00 00 00\n40 88 c5\ne9 a4 00 00 00\n31 ff\nbe eb 7a 40 00\nba 05 00 00 00\ne8 f3 e9 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 e2 eb ff ff\n49 8b 46 08\n42 c6 04 38 00\n48 ff cb\neb 74\n40 b5 07\neb 6f\n40 b5 08\neb 6a\n40 b5 0c\neb 65\n40 b5 0a\neb 60\n40 b5 0d\neb 5b\n40 b5 09\neb 56\n40 b5 0b\neb 51\n31 ff\nbe 87 7a 40 00\nba 05 00 00 00\ne8 a0 e9 ff ff\n48 89 c2\n42 0f be 4c 23 01\n46 0f be 44 23 02\n46 0f be 4c 23 03\n48 83 ec 08\n31 ff\n31 f6\nb8 00 00 00 00\n41 51\n41 50\n51\ne8 74 eb ff ff\n48 83 c4 20\n4c 89 eb\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 ff c3\ne9 b8 fe ff ff\n4d 89 7e 10\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p635
S'.text:0000000000402940\n.text:0000000000402941\n.text:0000000000402943\n.text:0000000000402945\n.text:0000000000402947\n.text:0000000000402949\n.text:000000000040294a\n.text:000000000040294b\n.text:000000000040294e\n.text:0000000000402951\n.text:0000000000402956\n.text:0000000000402959\n.text:000000000040295c\n.text:0000000000402961\n.text:0000000000402964\n.text:0000000000402969\n.text:000000000040296c\n.text:0000000000402971\n.text:0000000000402975\n.text:0000000000402978\n.text:000000000040297a\n.text:0000000000402980\n.text:0000000000402983\n.text:0000000000402987\n.text:000000000040298a\n.text:000000000040298d\n.text:0000000000402991\n.text:0000000000402995\n.text:0000000000402997\n.text:000000000040299a\n.text:000000000040299c\n.text:00000000004029b0\n.text:00000000004029b4\n.text:00000000004029b9\n.text:00000000004029bf\n.text:00000000004029c2\n.text:00000000004029c4\n.text:00000000004029c7\n.text:00000000004029ce\n.text:00000000004029d0\n.text:00000000004029d6\n.text:00000000004029d9\n.text:00000000004029dc\n.text:00000000004029de\n.text:00000000004029e2\n.text:00000000004029e5\n.text:00000000004029e8\n.text:00000000004029ee\n.text:00000000004029f1\n.text:00000000004029f4\n.text:00000000004029fa\n.text:00000000004029fe\n.text:0000000000402a01\n.text:0000000000402a06\n.text:0000000000402a08\n.text:0000000000402a0c\n.text:0000000000402a0f\n.text:0000000000402a14\n.text:0000000000402a17\n.text:0000000000402a1c\n.text:0000000000402a1e\n.text:0000000000402a23\n.text:0000000000402a28\n.text:0000000000402a2d\n.text:0000000000402a30\n.text:0000000000402a32\n.text:0000000000402a34\n.text:0000000000402a36\n.text:0000000000402a39\n.text:0000000000402a3e\n.text:0000000000402a42\n.text:0000000000402a47\n.text:0000000000402a4a\n.text:0000000000402a4c\n.text:0000000000402a4f\n.text:0000000000402a51\n.text:0000000000402a54\n.text:0000000000402a56\n.text:0000000000402a59\n.text:0000000000402a5b\n.text:0000000000402a5e\n.text:0000000000402a60\n.text:0000000000402a63\n.text:0000000000402a65\n.text:0000000000402a68\n.text:0000000000402a6a\n.text:0000000000402a6d\n.text:0000000000402a6f\n.text:0000000000402a71\n.text:0000000000402a76\n.text:0000000000402a7b\n.text:0000000000402a80\n.text:0000000000402a83\n.text:0000000000402a89\n.text:0000000000402a8f\n.text:0000000000402a95\n.text:0000000000402a99\n.text:0000000000402a9b\n.text:0000000000402a9d\n.text:0000000000402aa2\n.text:0000000000402aa4\n.text:0000000000402aa6\n.text:0000000000402aa7\n.text:0000000000402aac\n.text:0000000000402ab0\n.text:0000000000402ab3\n.text:0000000000402ac0\n.text:0000000000402ac3\n.text:0000000000402ac8\n.text:0000000000402acc\n.text:0000000000402ad0\n.text:0000000000402ad1\n.text:0000000000402ad3\n.text:0000000000402ad5\n.text:0000000000402ad7\n.text:0000000000402ad9\n.text:0000000000402ada\n'
p636
tp637
sS'gettext_quote'
p638
(S'\n__stdcall gettext_quote(char * msgid)\n'
p639
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_0040884e;\u000a        pcVar2 = &DAT_00408852;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p640
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401420\nCMP RAX,RBX\nJNZ 0x00405198\nCALL 0x00406140\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x004051a0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00405148\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40883e\nMOV EAX,0x408842\nJMP 0x00405194\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x004051a0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00405186\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40884e\nMOV EAX,0x408852\nJMP 0x00405194\nCMP R14D,0x9\nMOV ECX,0x408834\nMOV EAX,0x407b4e\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p641
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 27 c3 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 39 10 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 3e 88 40 00\nb8 42 88 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 4e 88 40 00\nb8 52 88 40 00\neb 0e\n41 83 fe 09\nb9 34 88 40 00\nb8 4e 7b 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p642
S'.text:00000000004050e0\n.text:00000000004050e1\n.text:00000000004050e3\n.text:00000000004050e4\n.text:00000000004050e7\n.text:00000000004050ea\n.text:00000000004050ec\n.text:00000000004050f1\n.text:00000000004050f4\n.text:00000000004050f9\n.text:00000000004050fc\n.text:0000000000405102\n.text:0000000000405107\n.text:000000000040510a\n.text:000000000040510f\n.text:0000000000405114\n.text:0000000000405119\n.text:000000000040511f\n.text:0000000000405125\n.text:0000000000405128\n.text:000000000040512a\n.text:000000000040512c\n.text:0000000000405131\n.text:0000000000405135\n.text:0000000000405137\n.text:0000000000405139\n.text:000000000040513c\n.text:0000000000405141\n.text:0000000000405146\n.text:0000000000405148\n.text:000000000040514d\n.text:0000000000405152\n.text:0000000000405157\n.text:000000000040515d\n.text:0000000000405163\n.text:0000000000405166\n.text:0000000000405168\n.text:000000000040516a\n.text:000000000040516f\n.text:0000000000405173\n.text:0000000000405175\n.text:0000000000405177\n.text:000000000040517a\n.text:000000000040517f\n.text:0000000000405184\n.text:0000000000405186\n.text:000000000040518a\n.text:000000000040518f\n.text:0000000000405194\n.text:0000000000405198\n.text:0000000000405199\n.text:000000000040519b\n.text:000000000040519c\n'
p643
tp644
sS'fclose'
p645
(S'\n__stdcall fclose(FILE * __stream)\n'
p646
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060b070)();\u000a  return iVar1;\u000a}\u000a\u000a
p647
S'JMP qword ptr [0x0060b070]\n'
p648
S'ff 25 7a 9c 20 00\n'
p649
S'.plt:00000000004013f0\n'
p650
tp651
sS'__ctype_get_mb_cur_max'
p652
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p653
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060b090)();\u000a  return sVar1;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x0060b090]\n'
p655
S'ff 25 5a 9c 20 00\n'
p656
S'.plt:0000000000401430\n'
p657
tp658
sS'quotearg_n_style'
p659
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p660
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p661
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00404e10\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00404be0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p662
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p663
S'.text:0000000000404dd0\n.text:0000000000404dd1\n.text:0000000000404dd3\n.text:0000000000404dd4\n.text:0000000000404dd8\n.text:0000000000404ddb\n.text:0000000000404ddd\n.text:0000000000404de2\n.text:0000000000404de5\n.text:0000000000404dea\n.text:0000000000404df1\n.text:0000000000404df3\n.text:0000000000404df6\n.text:0000000000404df9\n.text:0000000000404dfe\n.text:0000000000404e02\n.text:0000000000404e03\n.text:0000000000404e05\n.text:0000000000404e06\n'
p664
tp665
sS'star_digits_closebracket'
p666
(S'\n__stdcall star_digits_closebracket(E_string * es, size_t idx)\n'
p667
V\u000a_Bool star_digits_closebracket(E_string *es,size_t idx)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  _Bool _Var3;\u000a  byte bVar4;\u000a  ulong i;\u000a  \u000a  _Var3 = es_match(es,idx);\u000a  if (_Var3 != false) {\u000a    uVar1 = es->len;\u000a    uVar2 = idx + 1;\u000a    while (i = uVar2, i < uVar1) {\u000a      bVar4 = to_uchar();\u000a      if ((9 < (uint)bVar4 - 0x30) || (uVar2 = i + 1, es->escaped[i] != false)) {\u000a        _Var3 = es_match(es,i);\u000a        return _Var3;\u000a      }\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p668
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nMOV EDX,0x2a\nCALL 0x00402dd0\nTEST AL,AL\nJZ 0x00402f38\nMOV R12,qword ptr [R14 + 0x10]\nINC R15\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,R15\nCMP RBX,R12\nJNC 0x00402f38\nMOV RAX,qword ptr [R14]\nMOVSX EDI,byte ptr [RAX + RBX*0x1]\nCALL 0x00403430\nMOVZX EAX,AL\nADD EAX,-0x30\nCMP EAX,0x9\nJA 0x00402f1d\nMOV RAX,qword ptr [R14 + 0x8]\nLEA R15,[RBX + 0x1]\nCMP byte ptr [RAX + RBX*0x1],0x0\nJZ 0x00402ef0\nMOV EDX,0x5d\nMOV RDI,R14\nMOV RSI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00402dd0\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p669
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\nba 2a 00 00 00\ne8 f8 fe ff ff\n84 c0\n74 5c\n4d 8b 66 10\n49 ff c7\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 fb\n4c 39 e3\n73 40\n49 8b 06\n0f be 3c 18\ne8 2c 05 00 00\n0f b6 c0\n83 c0 d0\n83 f8 09\n77 0e\n49 8b 46 08\n4c 8d 7b 01\n80 3c 18 00\n74 d3\nba 5d 00 00 00\n4c 89 f7\n48 89 de\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 98 fe ff ff\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p670
S'.text:0000000000402ec0\n.text:0000000000402ec2\n.text:0000000000402ec4\n.text:0000000000402ec6\n.text:0000000000402ec7\n.text:0000000000402ec8\n.text:0000000000402ecb\n.text:0000000000402ece\n.text:0000000000402ed3\n.text:0000000000402ed8\n.text:0000000000402eda\n.text:0000000000402edc\n.text:0000000000402ee0\n.text:0000000000402ee3\n.text:0000000000402ef0\n.text:0000000000402ef3\n.text:0000000000402ef6\n.text:0000000000402ef8\n.text:0000000000402efb\n.text:0000000000402eff\n.text:0000000000402f04\n.text:0000000000402f07\n.text:0000000000402f0a\n.text:0000000000402f0d\n.text:0000000000402f0f\n.text:0000000000402f13\n.text:0000000000402f17\n.text:0000000000402f1b\n.text:0000000000402f1d\n.text:0000000000402f22\n.text:0000000000402f25\n.text:0000000000402f28\n.text:0000000000402f2c\n.text:0000000000402f2d\n.text:0000000000402f2f\n.text:0000000000402f31\n.text:0000000000402f33\n.text:0000000000402f38\n.text:0000000000402f3a\n.text:0000000000402f3e\n.text:0000000000402f3f\n.text:0000000000402f41\n.text:0000000000402f43\n.text:0000000000402f45\n'
p671
tp672
sS'quote_n'
p673
(S'\n__stdcall quote_n(char * arg)\n'
p674
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p675
S'MOV RDX,-0x1\nJMP 0x004050a0\n'
p676
S'48 c7 c2 ff ff ff ff\neb d7\n'
p677
S'.text:00000000004050c0\n.text:00000000004050c7\n'
p678
tp679
sS'quotearg_alloc'
p680
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p681
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p682
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00404a50\n'
p683
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p684
S'.text:0000000000404a40\n.text:0000000000404a43\n.text:0000000000404a45\n.text:0000000000404a48\n'
p685
tp686
sS'close_stdout_set_file_name'
p687
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p688
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p689
S'MOV qword ptr [0x0060d5c0],RDI\nRET\n'
p690
S'48 89 3d e9 9a 20 00\nc3\n'
p691
S'.text:0000000000403ad0\n.text:0000000000403ad7\n'
p692
tp693
sS'append_equiv_class'
p694
(S'\n__stdcall append_equiv_class(Spec_list * list, char * equiv_class_str, size_t len)\n'
p695
V\u000a_Bool append_equiv_class(Spec_list *list,char *equiv_class_str,size_t len)\u000a\u000a{\u000a  undefined uVar1;\u000a  List_element *pLVar2;\u000a  \u000a  if (len == 1) {\u000a    pLVar2 = (List_element *)xmalloc(0x20);\u000a    pLVar2->next = (List_element *)0x0;\u000a    pLVar2->type = RE_EQUIV_CLASS;\u000a    pLVar2->u[0] = *equiv_class_str;\u000a    if (list->tail == (List_element *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("list->tail","src/tr.c",0x2f1,\u000a                    "_Bool append_equiv_class(struct Spec_list *, const char *, size_t)");\u000a    }\u000a    list->tail->next = pLVar2;\u000a    list->tail = pLVar2;\u000a    uVar1 = 1;\u000a  }\u000a  else {\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p696
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nCMP RDX,0x1\nJNZ 0x004030a3\nMOV EDI,0x20\nCALL 0x00405a90\nMOV qword ptr [RAX + 0x8],0x0\nMOV dword ptr [RAX],0x3\nMOV CL,byte ptr [R14]\nMOV byte ptr [RAX + 0x10],CL\nMOV RCX,qword ptr [RBX + 0x8]\nTEST RCX,RCX\nJZ 0x004030ad\nMOV qword ptr [RCX + 0x8],RAX\nMOV qword ptr [RBX + 0x8],RAX\nMOV AL,0x1\nJMP 0x004030a5\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV EDI,0x407bcf\nMOV ESI,0x4078a2\nMOV EDX,0x2f1\nMOV ECX,0x407c7c\nCALL 0x004014a0\n'
p697
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 83 fa 01\n75 33\nbf 20 00 00 00\ne8 16 2a 00 00\n48 c7 40 08 00 00 00 00\nc7 00 03 00 00 00\n41 8a 0e\n88 48 10\n48 8b 4b 08\n48 85 c9\n74 16\n48 89 41 08\n48 89 43 08\nb0 01\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\nbf cf 7b 40 00\nbe a2 78 40 00\nba f1 02 00 00\nb9 7c 7c 40 00\ne8 da e3 ff ff\n'
p698
S'.text:0000000000403060\n.text:0000000000403062\n.text:0000000000403063\n.text:0000000000403064\n.text:0000000000403067\n.text:000000000040306a\n.text:000000000040306e\n.text:0000000000403070\n.text:0000000000403075\n.text:000000000040307a\n.text:0000000000403082\n.text:0000000000403088\n.text:000000000040308b\n.text:000000000040308e\n.text:0000000000403092\n.text:0000000000403095\n.text:0000000000403097\n.text:000000000040309b\n.text:000000000040309f\n.text:00000000004030a1\n.text:00000000004030a3\n.text:00000000004030a5\n.text:00000000004030a9\n.text:00000000004030aa\n.text:00000000004030ac\n.text:00000000004030ad\n.text:00000000004030b2\n.text:00000000004030b7\n.text:00000000004030bc\n.text:00000000004030c1\n'
p699
tp700
sS'__libc_csu_init'
p701
(S'\n__stdcall __libc_csu_init()\n'
p702
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p703
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60ae08]\nPUSH RBP\nLEA RBP,[0x60ae10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401310\nTEST RBP,RBP\nJZ 0x00406606\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x004065f0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p704
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 46 48 20 00\n55\n48 8d 2d 46 48 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 2f ad ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p705
S'.text:00000000004065b0\n.text:00000000004065b2\n.text:00000000004065b4\n.text:00000000004065b7\n.text:00000000004065b9\n.text:00000000004065bb\n.text:00000000004065c2\n.text:00000000004065c3\n.text:00000000004065ca\n.text:00000000004065cb\n.text:00000000004065ce\n.text:00000000004065d1\n.text:00000000004065d4\n.text:00000000004065d8\n.text:00000000004065dc\n.text:00000000004065e1\n.text:00000000004065e4\n.text:00000000004065e6\n.text:00000000004065e8\n.text:00000000004065f0\n.text:00000000004065f3\n.text:00000000004065f6\n.text:00000000004065f9\n.text:00000000004065fd\n.text:0000000000406601\n.text:0000000000406604\n.text:0000000000406606\n.text:000000000040660a\n.text:000000000040660b\n.text:000000000040660c\n.text:000000000040660e\n.text:0000000000406610\n.text:0000000000406612\n.text:0000000000406614\n'
p706
tp707
sS'c_isdigit'
p708
(S'\n__stdcall c_isdigit()\n'
p709
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p710
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p711
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p712
S'.text:0000000000406000\n.text:0000000000406003\n.text:0000000000406006\n.text:0000000000406009\n'
p713
tp714
sS'usage'
p715
(S'\n__stdcall usage()\n'
p716
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... SET1 [SET2]\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "Translate, squeeze, and/or delete characters from standard input,\u005cnwriting to standard output.\u005cn\u005cn  -c, -C, --complement    use the complement of SET1\u005cn  -d, --delete            delete characters in SET1, do not translate\u005cn  -s, --squeeze-repeats   replace each sequence of a repeated character\u005cn                            that is listed in the last specified SET,\u005cn                            with a single occurrence of that character\u005cn  -t, --truncate-set1     first truncate SET1 to length of SET2\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnSETs are specified as strings of characters.  Most represent themselves.\u005cnInterpreted sequences are:\u005cn\u005cn  \u005c\u005cNNN            character with octal value NNN (1 to 3 octal digits)\u005cn  \u005c\u005c\u005c\u005c              backslash\u005cn  \u005c\u005ca              audible BEL\u005cn  \u005c\u005cb              backspace\u005cn  \u005c\u005cf              form feed\u005cn  \u005c\u005cn              new line\u005cn  \u005c\u005cr              return\u005cn  \u005c\u005ct              horizontal tab\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  \u005c\u005cv              vertical tab\u005cn  CHAR1-CHAR2     all characters from CHAR1 to CHAR2 in ascending order\u005cn  [CHAR*]         in SET2, copies of CHAR until length of SET1\u005cn  [CHAR*REPEAT]   REPEAT copies of CHAR, REPEAT octal if starting with 0\u005cn  [:alnum:]       all letters and digits\u005cn  [:alpha:]       all letters\u005cn  [:blank:]       all horizontal whitespace\u005cn  [:cntrl:]       all control characters\u005cn  [:digit:]       all digits\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  [:graph:]       all printable characters, not including space\u005cn  [:lower:]       all lower case letters\u005cn  [:print:]       all printable characters, including space\u005cn  [:punct:]       all punctuation characters\u005cn  [:space:]       all horizontal or vertical whitespace\u005cn  [:upper:]       all upper case letters\u005cn  [:xdigit:]      all hexadecimal digits\u005cn  [=CHAR=]        all characters which are equivalent to CHAR\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnTranslation occurs if -d is not given and both SET1 and SET2 appear.\u005cn-t may be used only when translating.  SET2 is extended to length of\u005cnSET1 by repeating its last character as necessary.  Excess characters\u005cnof SET2 are ignored.  Only [:lower:] and [:upper:] are guaranteed to\u005cnexpand in ascending order; used in SET2 while translating, they may\u005cnonly be used in pairs to specify case conversion.  -s uses the last\u005cnspecified SET, and occurs after translation or deletion.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p717
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401901\nXOR EDI,EDI\nMOV ESI,0x406e48\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060d5d0]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x406e6b\nMOV EDX,0x5\nCALL 0x00401420\nMOV RSI,qword ptr [0x0060b268]\nMOV RDI,RAX\nCALL 0x00401510\nXOR EDI,EDI\nMOV ESI,0x40705b\nMOV EDX,0x5\nCALL 0x00401420\nMOV RSI,qword ptr [0x0060b268]\nMOV RDI,RAX\nCALL 0x00401510\nXOR EDI,EDI\nMOV ESI,0x407088\nMOV EDX,0x5\nCALL 0x00401420\nMOV RSI,qword ptr [0x0060b268]\nMOV RDI,RAX\nCALL 0x00401510\nXOR EDI,EDI\nMOV ESI,0x4070be\nMOV EDX,0x5\nCALL 0x00401420\nMOV RSI,qword ptr [0x0060b268]\nMOV RDI,RAX\nCALL 0x00401510\nXOR EDI,EDI\nMOV ESI,0x407233\nMOV EDX,0x5\nCALL 0x00401420\nMOV RSI,qword ptr [0x0060b268]\nMOV RDI,RAX\nCALL 0x00401510\nXOR EDI,EDI\nMOV ESI,0x4073dc\nMOV EDX,0x5\nCALL 0x00401420\nMOV RSI,qword ptr [0x0060b268]\nMOV RDI,RAX\nCALL 0x00401510\nXOR EDI,EDI\nMOV ESI,0x407577\nMOV EDX,0x5\nCALL 0x00401420\nMOV RSI,qword ptr [0x0060b268]\nMOV RDI,RAX\nCALL 0x00401510\nCALL 0x00401950\nMOV EDI,EBX\nCALL 0x00401670\nCALL 0x00401910\nMOV EDI,EBX\nCALL 0x00401670\n'
p718
S'53\n89 fb\n85 db\n0f 85 16 01 00 00\n31 ff\nbe 48 6e 40 00\nba 05 00 00 00\ne8 24 fc ff ff\n48 89 c1\n48 8b 15 ca bd 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 fb fd ff ff\n31 ff\nbe 6b 6e 40 00\nba 05 00 00 00\ne8 fa fb ff ff\n48 8b 35 3b 9a 20 00\n48 89 c7\ne8 db fc ff ff\n31 ff\nbe 5b 70 40 00\nba 05 00 00 00\ne8 da fb ff ff\n48 8b 35 1b 9a 20 00\n48 89 c7\ne8 bb fc ff ff\n31 ff\nbe 88 70 40 00\nba 05 00 00 00\ne8 ba fb ff ff\n48 8b 35 fb 99 20 00\n48 89 c7\ne8 9b fc ff ff\n31 ff\nbe be 70 40 00\nba 05 00 00 00\ne8 9a fb ff ff\n48 8b 35 db 99 20 00\n48 89 c7\ne8 7b fc ff ff\n31 ff\nbe 33 72 40 00\nba 05 00 00 00\ne8 7a fb ff ff\n48 8b 35 bb 99 20 00\n48 89 c7\ne8 5b fc ff ff\n31 ff\nbe dc 73 40 00\nba 05 00 00 00\ne8 5a fb ff ff\n48 8b 35 9b 99 20 00\n48 89 c7\ne8 3b fc ff ff\n31 ff\nbe 77 75 40 00\nba 05 00 00 00\ne8 3a fb ff ff\n48 8b 35 7b 99 20 00\n48 89 c7\ne8 1b fc ff ff\ne8 56 00 00 00\n89 df\ne8 6f fd ff ff\ne8 0a 00 00 00\n89 df\ne8 63 fd ff ff\n'
p719
S'.text:00000000004017e0\n.text:00000000004017e1\n.text:00000000004017e3\n.text:00000000004017e5\n.text:00000000004017eb\n.text:00000000004017ed\n.text:00000000004017f2\n.text:00000000004017f7\n.text:00000000004017fc\n.text:00000000004017ff\n.text:0000000000401806\n.text:000000000040180b\n.text:000000000040180d\n.text:0000000000401810\n.text:0000000000401815\n.text:0000000000401817\n.text:000000000040181c\n.text:0000000000401821\n.text:0000000000401826\n.text:000000000040182d\n.text:0000000000401830\n.text:0000000000401835\n.text:0000000000401837\n.text:000000000040183c\n.text:0000000000401841\n.text:0000000000401846\n.text:000000000040184d\n.text:0000000000401850\n.text:0000000000401855\n.text:0000000000401857\n.text:000000000040185c\n.text:0000000000401861\n.text:0000000000401866\n.text:000000000040186d\n.text:0000000000401870\n.text:0000000000401875\n.text:0000000000401877\n.text:000000000040187c\n.text:0000000000401881\n.text:0000000000401886\n.text:000000000040188d\n.text:0000000000401890\n.text:0000000000401895\n.text:0000000000401897\n.text:000000000040189c\n.text:00000000004018a1\n.text:00000000004018a6\n.text:00000000004018ad\n.text:00000000004018b0\n.text:00000000004018b5\n.text:00000000004018b7\n.text:00000000004018bc\n.text:00000000004018c1\n.text:00000000004018c6\n.text:00000000004018cd\n.text:00000000004018d0\n.text:00000000004018d5\n.text:00000000004018d7\n.text:00000000004018dc\n.text:00000000004018e1\n.text:00000000004018e6\n.text:00000000004018ed\n.text:00000000004018f0\n.text:00000000004018f5\n.text:00000000004018fa\n.text:00000000004018fc\n.text:0000000000401901\n.text:0000000000401906\n.text:0000000000401908\n'
p720
tp721
sS'quoting_options_from_style'
p722
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p723
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p724
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00404e5d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401360\n'
p725
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 fe c4 ff ff\n'
p726
S'.text:0000000000404e10\n.text:0000000000404e14\n.text:0000000000404e17\n.text:0000000000404e1c\n.text:0000000000404e21\n.text:0000000000404e25\n.text:0000000000404e2d\n.text:0000000000404e30\n.text:0000000000404e32\n.text:0000000000404e34\n.text:0000000000404e38\n.text:0000000000404e3b\n.text:0000000000404e3f\n.text:0000000000404e44\n.text:0000000000404e49\n.text:0000000000404e4d\n.text:0000000000404e51\n.text:0000000000404e55\n.text:0000000000404e58\n.text:0000000000404e5c\n.text:0000000000404e5d\n'
p727
tp728
sS'strcpy'
p729
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p730
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060b048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x0060b048]\n'
p732
S'ff 25 a2 9c 20 00\n'
p733
S'.plt:00000000004013a0\n'
p734
tp735
sS'is_equiv_class_member'
p736
(S'\n__stdcall is_equiv_class_member()\n'
p737
V\u000a_Bool is_equiv_class_member(void)\u000a\u000a{\u000a  char in_SIL;\u000a  char in_DIL;\u000a  \u000a  return (_Bool)(in_DIL == in_SIL);\u000a}\u000a\u000a
p738
S'CMP DIL,SIL\nSETZ AL\nRET\n'
p739
S'40 38 f7\n0f 94 c0\nc3\n'
p740
S'.text:0000000000403ac0\n.text:0000000000403ac3\n.text:0000000000403ac6\n'
p741
tp742
sS'append_range'
p743
(S'\n__stdcall append_range(Spec_list * list)\n'
p744
V\u000a_Bool append_range(Spec_list *list)\u000a\u000a{\u000a  char *__ptr;\u000a  char *__ptr_00;\u000a  undefined8 uVar1;\u000a  List_element *pLVar2;\u000a  byte in_DL;\u000a  undefined uVar3;\u000a  byte in_SIL;\u000a  \u000a  if (in_DL < in_SIL) {\u000a    __ptr = make_printable_char();\u000a    __ptr_00 = make_printable_char();\u000a    uVar3 = 0;\u000a    uVar1 = dcgettext(0,"range-endpoints of \u005c'%s-%s\u005c' are in reverse collating sequence order",5);\u000a    error(0,0,uVar1,__ptr,__ptr_00);\u000a    free(__ptr);\u000a    free(__ptr_00);\u000a  }\u000a  else {\u000a    pLVar2 = (List_element *)xmalloc(0x20);\u000a    pLVar2->next = (List_element *)0x0;\u000a    pLVar2->type = RE_RANGE;\u000a    pLVar2->u[0] = in_SIL;\u000a    pLVar2->u[1] = in_DL;\u000a    if (list->tail == (List_element *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("list->tail","src/tr.c",0x2ab,\u000a                    "_Bool append_range(struct Spec_list *, unsigned char, unsigned char)");\u000a    }\u000a    list->tail->next = pLVar2;\u000a    list->tail = pLVar2;\u000a    uVar3 = 1;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p745
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EBX,EDX\nMOV EBP,ESI\nMOV R14,RDI\nCMP BL,BPL\nJNC 0x00403313\nMOVZX EDI,BPL\nCALL 0x00403440\nMOV R14,RAX\nMOVZX EDI,BL\nCALL 0x00403440\nMOV RBP,RAX\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x407da5\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,R14\nMOV R8,RBP\nCALL 0x00401620\nMOV RDI,R14\nCALL 0x00401350\nMOV RDI,RBP\nCALL 0x00401350\nJMP 0x00403345\nMOV EDI,0x20\nCALL 0x00405a90\nMOV qword ptr [RAX + 0x8],0x0\nMOV dword ptr [RAX],0x1\nMOV byte ptr [RAX + 0x10],BPL\nMOV byte ptr [RAX + 0x11],BL\nMOV RCX,qword ptr [R14 + 0x8]\nTEST RCX,RCX\nJZ 0x0040334c\nMOV qword ptr [RCX + 0x8],RAX\nMOV qword ptr [R14 + 0x8],RAX\nMOV BL,0x1\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV EDI,0x407bcf\nMOV ESI,0x4078a2\nMOV EDX,0x2ab\nMOV ECX,0x407de8\nCALL 0x004014a0\n'
p746
S'55\n41 56\n53\n89 d3\n89 f5\n49 89 fe\n40 38 eb\n73 53\n40 0f b6 fd\ne8 77 01 00 00\n49 89 c6\n0f b6 fb\ne8 6c 01 00 00\n48 89 c5\n31 db\n31 ff\nbe a5 7d 40 00\nba 05 00 00 00\ne8 36 e1 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n4c 89 f1\n49 89 e8\ne8 1f e3 ff ff\n4c 89 f7\ne8 47 e0 ff ff\n48 89 ef\ne8 3f e0 ff ff\neb 32\nbf 20 00 00 00\ne8 73 27 00 00\n48 c7 40 08 00 00 00 00\nc7 00 01 00 00 00\n40 88 68 10\n88 58 11\n49 8b 4e 08\n48 85 c9\n74 11\n48 89 41 08\n49 89 46 08\nb3 01\n89 d8\n5b\n41 5e\n5d\nc3\nbf cf 7b 40 00\nbe a2 78 40 00\nba ab 02 00 00\nb9 e8 7d 40 00\ne8 3b e1 ff ff\n'
p747
S'.text:00000000004032b0\n.text:00000000004032b1\n.text:00000000004032b3\n.text:00000000004032b4\n.text:00000000004032b6\n.text:00000000004032b8\n.text:00000000004032bb\n.text:00000000004032be\n.text:00000000004032c0\n.text:00000000004032c4\n.text:00000000004032c9\n.text:00000000004032cc\n.text:00000000004032cf\n.text:00000000004032d4\n.text:00000000004032d7\n.text:00000000004032d9\n.text:00000000004032db\n.text:00000000004032e0\n.text:00000000004032e5\n.text:00000000004032ea\n.text:00000000004032ed\n.text:00000000004032ef\n.text:00000000004032f1\n.text:00000000004032f3\n.text:00000000004032f6\n.text:00000000004032f9\n.text:00000000004032fc\n.text:0000000000403301\n.text:0000000000403304\n.text:0000000000403309\n.text:000000000040330c\n.text:0000000000403311\n.text:0000000000403313\n.text:0000000000403318\n.text:000000000040331d\n.text:0000000000403325\n.text:000000000040332b\n.text:000000000040332f\n.text:0000000000403332\n.text:0000000000403336\n.text:0000000000403339\n.text:000000000040333b\n.text:000000000040333f\n.text:0000000000403343\n.text:0000000000403345\n.text:0000000000403347\n.text:0000000000403348\n.text:000000000040334a\n.text:000000000040334b\n.text:000000000040334c\n.text:0000000000403351\n.text:0000000000403356\n.text:000000000040335b\n.text:0000000000403360\n'
p748
tp749
sS'find_bracketed_repeat'
p750
(S'\n__stdcall find_bracketed_repeat(E_string * es, size_t start_idx, uchar * char_to_repeat, count * repeat_count, size_t * closing_bracket_idx)\n'
p751
V\u000aint find_bracketed_repeat\u000a              (E_string *es,size_t start_idx,uchar *char_to_repeat,count *repeat_count,\u000a              size_t *closing_bracket_idx)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  _Bool _Var3;\u000a  strtol_error sVar4;\u000a  char *arg;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  size_t len;\u000a  char *d_end;\u000a  char *local_38;\u000a  \u000a  if (es->len <= start_idx + 1) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("start_idx + 1 < es->len","src/tr.c",0x31e,\u000a                                    \u000a                  "int find_bracketed_repeat(const struct E_string *, size_t, unsigned char *, count *, size_t *)"\u000a                 );\u000a  }\u000a  _Var3 = es_match(es,start_idx + 1);\u000a  if ((_Var3 != false) && (uVar1 = start_idx + 2, uVar1 < es->len)) {\u000a    len = 0;\u000a    do {\u000a      if (es->escaped[len + uVar1] != false) {\u000a        return -1;\u000a      }\u000a      if (es->s[len + uVar1] == ']') {\u000a        *char_to_repeat = es->s[start_idx];\u000a        if (len == 0) {\u000a          *repeat_count = 0;\u000a        }\u000a        else {\u000a          arg = es->s;\u000a          sVar4 = xstrtoumax(arg + uVar1,&local_38,\u000a                             (uintmax_t *)\u000a                             (ulong)((uint)(arg[uVar1] != '0') + 8 + (uint)(arg[uVar1] != '0')),\u000a                             (char *)repeat_count);\u000a          if (((sVar4 != LONGINT_OK) || (*repeat_count == 0xffffffffffffffff)) ||\u000a             (arg + len + (uVar1 - (long)local_38) != (char *)0x0)) {\u000a            arg = make_printable_str(arg + uVar1,len);\u000a            uVar5 = dcgettext(0,"invalid repeat count %s in [c*n] construct",5);\u000a            pcVar6 = quote(arg);\u000a            error(0,0,uVar5,pcVar6);\u000a            free(arg);\u000a            return -2;\u000a          }\u000a        }\u000a        *closing_bracket_idx = uVar1 + len;\u000a        return 0;\u000a      }\u000a      uVar2 = start_idx + 3 + len;\u000a      len = len + 1;\u000a    } while (uVar2 < es->len);\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p752
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,R8\nMOV R15,RCX\nMOV R13,RDX\nMOV RBP,RSI\nMOV R12,RDI\nLEA RSI,[RBP + 0x1]\nCMP RSI,qword ptr [R12 + 0x10]\nJNC 0x00403229\nMOV EDX,0x2a\nMOV RDI,R12\nCALL 0x00402dd0\nMOV ECX,EAX\nMOV EAX,0xffffffff\nTEST CL,CL\nJZ 0x00403205\nLEA R14,[RBP + 0x2]\nCMP R14,qword ptr [R12 + 0x10]\nJNC 0x00403205\nMOV qword ptr [RSP + 0x8],RBX\nMOV RCX,qword ptr [R12 + 0x8]\nADD RCX,R14\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RCX + RBX*0x1],0x0\nJNZ 0x00403205\nMOV RDX,qword ptr [R12]\nLEA RSI,[RDX + R14*0x1]\nCMP byte ptr [RBX + RSI*0x1],0x5d\nJZ 0x0040316c\nLEA RDX,[R14 + RBX*0x1 + 0x1]\nINC RBX\nCMP RDX,qword ptr [R12 + 0x10]\nJC 0x00403140\nJMP 0x00403205\nMOV AL,byte ptr [RDX + RBP*0x1]\nMOV byte ptr [R13],AL\nTEST RBX,RBX\nJZ 0x004031f1\nMOV RBP,qword ptr [R12]\nLEA R12,[RBP + R14*0x1]\nXOR EAX,EAX\nCMP byte ptr [RBP + R14*0x1],0x30\nSETNZ AL\nLEA EDX,[RAX + RAX*0x1 + 0x8]\nLEA RSI,[RSP + 0x10]\nXOR R8D,R8D\nMOV RDI,R12\nMOV RCX,R15\nCALL 0x00405c50\nTEST EAX,EAX\nJZ 0x00403214\nMOV RDI,R12\nMOV RSI,RBX\nCALL 0x00402f50\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x407d36\nMOV EDX,0x5\nCALL 0x00401420\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x004050d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401620\nMOV RDI,RBX\nCALL 0x00401350\nMOV EAX,0xfffffffe\nJMP 0x00403205\nMOV qword ptr [R15],0x0\nADD R14,RBX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RAX],R14\nXOR EAX,EAX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP qword ptr [R15],-0x1\nJZ 0x004031a7\nSUB RBP,qword ptr [RSP + 0x10]\nADD RBP,R14\nADD RBP,RBX\nJNZ 0x004031a7\nJMP 0x004031f8\nMOV EDI,0x407cbf\nMOV ESI,0x4078a2\nMOV EDX,0x31e\nMOV ECX,0x407cd7\nCALL 0x004014a0\n'
p753
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4c 89 c3\n49 89 cf\n49 89 d5\n48 89 f5\n49 89 fc\n48 8d 75 01\n49 3b 74 24 10\n0f 83 2d 01 00 00\nba 2a 00 00 00\n4c 89 e7\ne8 c7 fc ff ff\n89 c1\nb8 ff ff ff ff\n84 c9\n0f 84 ed 00 00 00\n4c 8d 75 02\n4d 3b 74 24 10\n0f 83 de 00 00 00\n48 89 5c 24 08\n49 8b 4c 24 08\n4c 01 f1\n31 db\n66 2e 0f 1f 84 00 00 00 00 00\n80 3c 19 00\n0f 85 bb 00 00 00\n49 8b 14 24\n4a 8d 34 32\n80 3c 33 5d\n74 14\n49 8d 54 1e 01\n48 ff c3\n49 3b 54 24 10\n72 d9\ne9 99 00 00 00\n8a 04 2a\n41 88 45 00\n48 85 db\n74 79\n49 8b 2c 24\n4e 8d 64 35 00\n31 c0\n42 80 7c 35 00 30\n0f 95 c0\n8d 54 00 08\n48 8d 74 24 10\n45 31 c0\n4c 89 e7\n4c 89 f9\ne8 ad 2a 00 00\n85 c0\n74 6d\n4c 89 e7\n48 89 de\ne8 9e fd ff ff\n48 89 c3\n31 ff\nbe 36 7d 40 00\nba 05 00 00 00\ne8 5a e2 ff ff\n48 89 c5\n48 89 df\ne8 ff 1e 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 3e e4 ff ff\n48 89 df\ne8 66 e1 ff ff\nb8 fe ff ff ff\neb 14\n49 c7 07 00 00 00 00\n49 01 de\n48 8b 44 24 08\n4c 89 30\n31 c0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 83 3f ff\n74 8d\n48 2b 6c 24 10\n4c 01 f5\n48 01 dd\n75 80\neb cf\nbf bf 7c 40 00\nbe a2 78 40 00\nba 1e 03 00 00\nb9 d7 7c 40 00\ne8 5e e2 ff ff\n'
p754
S'.text:00000000004030d0\n.text:00000000004030d1\n.text:00000000004030d3\n.text:00000000004030d5\n.text:00000000004030d7\n.text:00000000004030d9\n.text:00000000004030da\n.text:00000000004030de\n.text:00000000004030e1\n.text:00000000004030e4\n.text:00000000004030e7\n.text:00000000004030ea\n.text:00000000004030ed\n.text:00000000004030f1\n.text:00000000004030f6\n.text:00000000004030fc\n.text:0000000000403101\n.text:0000000000403104\n.text:0000000000403109\n.text:000000000040310b\n.text:0000000000403110\n.text:0000000000403112\n.text:0000000000403118\n.text:000000000040311c\n.text:0000000000403121\n.text:0000000000403127\n.text:000000000040312c\n.text:0000000000403131\n.text:0000000000403134\n.text:0000000000403136\n.text:0000000000403140\n.text:0000000000403144\n.text:000000000040314a\n.text:000000000040314e\n.text:0000000000403152\n.text:0000000000403156\n.text:0000000000403158\n.text:000000000040315d\n.text:0000000000403160\n.text:0000000000403165\n.text:0000000000403167\n.text:000000000040316c\n.text:000000000040316f\n.text:0000000000403173\n.text:0000000000403176\n.text:0000000000403178\n.text:000000000040317c\n.text:0000000000403181\n.text:0000000000403183\n.text:0000000000403189\n.text:000000000040318c\n.text:0000000000403190\n.text:0000000000403195\n.text:0000000000403198\n.text:000000000040319b\n.text:000000000040319e\n.text:00000000004031a3\n.text:00000000004031a5\n.text:00000000004031a7\n.text:00000000004031aa\n.text:00000000004031ad\n.text:00000000004031b2\n.text:00000000004031b5\n.text:00000000004031b7\n.text:00000000004031bc\n.text:00000000004031c1\n.text:00000000004031c6\n.text:00000000004031c9\n.text:00000000004031cc\n.text:00000000004031d1\n.text:00000000004031d4\n.text:00000000004031d6\n.text:00000000004031d8\n.text:00000000004031da\n.text:00000000004031dd\n.text:00000000004031e2\n.text:00000000004031e5\n.text:00000000004031ea\n.text:00000000004031ef\n.text:00000000004031f1\n.text:00000000004031f8\n.text:00000000004031fb\n.text:0000000000403200\n.text:0000000000403203\n.text:0000000000403205\n.text:0000000000403209\n.text:000000000040320a\n.text:000000000040320c\n.text:000000000040320e\n.text:0000000000403210\n.text:0000000000403212\n.text:0000000000403213\n.text:0000000000403214\n.text:0000000000403218\n.text:000000000040321a\n.text:000000000040321f\n.text:0000000000403222\n.text:0000000000403225\n.text:0000000000403227\n.text:0000000000403229\n.text:000000000040322e\n.text:0000000000403233\n.text:0000000000403238\n.text:000000000040323d\n'
p755
tp756
sS'c_isgraph'
p757
(S'\n__stdcall c_isgraph()\n'
p758
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p759
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p760
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p761
S'.text:0000000000406010\n.text:0000000000406013\n.text:0000000000406016\n.text:0000000000406019\n'
p762
tp763
sS'quotearg_buffer_restyled'
p764
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p765
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_00403e8c_caseD_7;\u000a  case 2:\u000a    goto switchD_00403e8c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_00403e8c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_00403e8c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_00403e8c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_00403e8c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_00403e8c_caseD_7;\u000aswitchD_00403e8c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_00403e8c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_00403e8c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00404950;\u000aLAB_00404070:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00404959:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00404968:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040407b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_004040bf:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_004040bf;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00404968;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00404895;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x004047a0;\u000a    }\u000a    goto LAB_00404968;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_004048ca;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00404968;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_004048f9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_004043b8;\u000a  case '\u005ca':\u000a    goto joined_r0x004042a8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x004042a8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_004040d6_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x004042a8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x004042a8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_004040d6_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x004042a8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040480e;\u000a    }\u000a    goto LAB_00404968;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00404968;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00404968;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00404968;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00404968;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00404968;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_004040d6_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00404866;\u000a      goto joined_r0x00404858;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00404361:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00404858;\u000a      goto LAB_00404866;\u000a    }\u000a    goto LAB_00404968;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00404968;\u000a  }\u000a  goto joined_r0x004047a0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_004048ca:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_004048f9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_004048f9:\u000a  if (1 < uVar10) {\u000aLAB_004043d6:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00404492;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00404361;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00404492:\u000a        if (bVar6 != 0) goto LAB_00404968;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_004043b8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_004043d6;\u000ajoined_r0x004047a0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x004047a0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_004047c7;\u000aLAB_00404800:\u000a    if (bVar22) goto LAB_00404805;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00404800;\u000aLAB_004047c7:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00404805:\u000a      if (bVar6 != 0) goto LAB_00404968;\u000aLAB_0040480e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00404858;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00404866:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00404858:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00404895:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00404070;\u000aLAB_00404950:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00404959;\u000a  goto LAB_0040407b;\u000a}\u000a\u000a
p766
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401430\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00404a35\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x408310 + RAX*0x8]\nMOV EDI,0x408836\nMOV ESI,R15D\nCALL 0x004050e0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x407b4e\nMOV ESI,R15D\nCALL 0x004050e0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x00403eed\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00403ef0\nNOP\nCMP R12,RSI\nJNC 0x00403ede\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00403ed0\nJMP 0x00403ef0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401440\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x00403fbc\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x00403fbc\nMOV ECX,0x408834\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00403fb6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00403f57\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00403f84\nTEST RSI,RSI\nJZ 0x00403f71\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x407b4e\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00403f92\nMOV ECX,0x407b4e\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x00403fbc\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00404a0c\nMOV ECX,0x408834\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00404950\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00404959\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x004040bf\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x004040ba\nCMP R11,-0x1\nJNZ 0x004040ba\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401440\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00404110\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040436c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x408368 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00404968\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x004047c0\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x004047c7\nJMP 0x00404800\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401500\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040415d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x004040c1\nJMP 0x00404968\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x004040c1\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x004040eb\nCMP EBX,0x2\nJNZ 0x004040eb\nTEST R13,R13\nJNZ 0x004040eb\nJMP 0x00404968\nCMP R11,-0x1\nJZ 0x00404543\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00404563\nJMP 0x004040eb\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404574\nTEST R8B,R8B\nJNZ 0x00404968\nCMP EBX,0x2\nJNZ 0x00404218\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00404218\nCMP R12,RSI\nJNC 0x004041f3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404202\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404211\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00404222\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x004046e8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x004046e8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x004046e8\nCMP RCX,RSI\nJNC 0x0040425c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040426b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004040f6\nJMP 0x004047c0\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004040e9\nJMP 0x004042ca\nMOV DL,0x74\nJMP 0x004042b2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004040e9\nJMP 0x004042ca\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004040e9\nJMP 0x004042ca\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00404968\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004040e9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040480e\nJMP 0x00404968\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x004040e9\nTEST R8B,R8B\nJNZ 0x00404968\nCMP R12,RSI\nJNC 0x004042fa\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404309\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404318\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x004040e9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x004046fb\nCMP EBX,0x2\nJNZ 0x004040e9\nTEST R8B,R8B\nJZ 0x004040e9\nJMP 0x00404968\nCMP EBX,0x2\nJNZ 0x00404594\nTEST R8B,R8B\nJNZ 0x00404968\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00404866\nJMP 0x00404889\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x004045b5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x004016c0\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004047a8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x004047a8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00404492\nJMP 0x00404460\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00404449\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00404446\nCMP R12,RSI\nJNC 0x0040442b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040443a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00404480\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00404480\nTEST BPL,0x1\nJZ 0x00404523\nCMP R12,RSI\nJNC 0x00404474\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00404523\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00404460\nTEST R8B,R8B\nJNZ 0x00404968\nCMP EBX,0x2\nJNZ 0x004044da\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x004044da\nCMP R12,RSI\nJNC 0x004044b2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004044c1\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004044d0\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x004044e4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004044fb\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404515\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00404410\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00404866\nJMP 0x00404889\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x004040eb\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x004040eb\nJMP 0x00404968\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00404895\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004040f6\nJMP 0x004047c0\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x004042b2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00404866\nJMP 0x00404889\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x004045d7\nMOV RDI,R10\nCALL 0x00401440\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401460\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004048af\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x004048a7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004048b6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040469e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00404696\nBT RDI,RDX\nJC 0x00404a02\nINC RCX\nCMP RCX,R14\nJC 0x00404680\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x004016b0\nTEST EAX,EAX\nJNZ 0x004046b3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x004016a0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004045f5\nJMP 0x004048f9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004040f6\nJMP 0x004047c0\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x004040e9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x004040e9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x004040e9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x004040eb\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00404932\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00404968\nCMP R12,RSI\nJNC 0x0040475e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00404771\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404780\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040478f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004040f6\nJMP 0x004047c0\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004040f6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00404800\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00404805\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00404860\nJMP 0x00404805\nTEST BPL,BPL\nJZ 0x00404860\nTEST R8B,R8B\nJNZ 0x00404968\nCMP EBX,0x2\nJNZ 0x00404848\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00404848\nCMP R12,RSI\nJNC 0x00404823\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404832\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404841\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00404852\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00404892\nJMP 0x0040488e\nTEST DIL,0x1\nJZ 0x00404889\nAND AL,0x1\nJNZ 0x00404889\nCMP R12,RSI\nJNC 0x00404874\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404883\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00404892\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00404950\nJMP 0x00404070\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x004048f4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x004048ec\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00404928\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x004048ca\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004048f9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x004043b8\nJMP 0x004043d6\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004048f9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004040f6\nJMP 0x004047c0\nCMP R13,R11\nJNZ 0x0040407b\nTEST R8B,R8B\nJZ 0x004049c2\nCMP EBX,0x2\nJNZ 0x004049c2\nTEST R12,R12\nJNZ 0x004049c2\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00403e00\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x004049f6\nTEST R8B,R8B\nJNZ 0x004049f6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x004049f6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x004049e9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x004049e0\nCMP R12,RSI\nJNC 0x004049ad\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x004049ad\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00404968\nTEST RSI,RSI\nJZ 0x00404a19\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x408834\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x00403fbc\nCALL 0x00401360\n'
p767
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 02 d6 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 10 83 40 00\nbf 36 88 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 4e 7b 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 43 d5 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 34 88 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 4e 7b 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 4e 7b 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 34 88 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 a3 d3 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 68 83 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 d7 d3 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 37 d3 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 71 ce ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 43 ce ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 09 d0 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 d2 cf ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 34 88 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 26 c9 ff ff\n'
p768
S'.text:0000000000403e00\n.text:0000000000403e01\n.text:0000000000403e03\n.text:0000000000403e05\n.text:0000000000403e07\n.text:0000000000403e09\n.text:0000000000403e0a\n.text:0000000000403e11\n.text:0000000000403e14\n.text:0000000000403e17\n.text:0000000000403e1a\n.text:0000000000403e1f\n.text:0000000000403e24\n.text:0000000000403e29\n.text:0000000000403e2e\n.text:0000000000403e36\n.text:0000000000403e3a\n.text:0000000000403e40\n.text:0000000000403e48\n.text:0000000000403e4d\n.text:0000000000403e55\n.text:0000000000403e5a\n.text:0000000000403e5e\n.text:0000000000403e60\n.text:0000000000403e63\n.text:0000000000403e66\n.text:0000000000403e69\n.text:0000000000403e6e\n.text:0000000000403e71\n.text:0000000000403e74\n.text:0000000000403e77\n.text:0000000000403e7a\n.text:0000000000403e7c\n.text:0000000000403e7f\n.text:0000000000403e84\n.text:0000000000403e87\n.text:0000000000403e8c\n.text:0000000000403e93\n.text:0000000000403e98\n.text:0000000000403e9b\n.text:0000000000403ea0\n.text:0000000000403ea5\n.text:0000000000403eaa\n.text:0000000000403ead\n.text:0000000000403eb2\n.text:0000000000403eb7\n.text:0000000000403ebc\n.text:0000000000403ebe\n.text:0000000000403ec0\n.text:0000000000403ec5\n.text:0000000000403ec7\n.text:0000000000403eca\n.text:0000000000403ecc\n.text:0000000000403ece\n.text:0000000000403ed0\n.text:0000000000403ed3\n.text:0000000000403ed5\n.text:0000000000403eda\n.text:0000000000403ede\n.text:0000000000403ee4\n.text:0000000000403ee7\n.text:0000000000403ee9\n.text:0000000000403eeb\n.text:0000000000403eed\n.text:0000000000403ef0\n.text:0000000000403ef5\n.text:0000000000403ef8\n.text:0000000000403efd\n.text:0000000000403f02\n.text:0000000000403f05\n.text:0000000000403f08\n.text:0000000000403f0b\n.text:0000000000403f0e\n.text:0000000000403f13\n.text:0000000000403f16\n.text:0000000000403f19\n.text:0000000000403f1e\n.text:0000000000403f21\n.text:0000000000403f23\n.text:0000000000403f26\n.text:0000000000403f28\n.text:0000000000403f2a\n.text:0000000000403f2d\n.text:0000000000403f32\n.text:0000000000403f37\n.text:0000000000403f3c\n.text:0000000000403f3f\n.text:0000000000403f45\n.text:0000000000403f47\n.text:0000000000403f4a\n.text:0000000000403f4d\n.text:0000000000403f50\n.text:0000000000403f52\n.text:0000000000403f54\n.text:0000000000403f57\n.text:0000000000403f5a\n.text:0000000000403f5f\n.text:0000000000403f62\n.text:0000000000403f64\n.text:0000000000403f67\n.text:0000000000403f69\n.text:0000000000403f6e\n.text:0000000000403f71\n.text:0000000000403f76\n.text:0000000000403f7c\n.text:0000000000403f82\n.text:0000000000403f84\n.text:0000000000403f89\n.text:0000000000403f8f\n.text:0000000000403f92\n.text:0000000000403f95\n.text:0000000000403f98\n.text:0000000000403f9a\n.text:0000000000403f9f\n.text:0000000000403fa2\n.text:0000000000403fa8\n.text:0000000000403fad\n.text:0000000000403fb3\n.text:0000000000403fb6\n.text:0000000000403fb9\n.text:0000000000403fbc\n.text:0000000000403fc4\n.text:0000000000403fc6\n.text:0000000000403fc8\n.text:0000000000403fcb\n.text:0000000000403fcf\n.text:0000000000403fd1\n.text:0000000000403fd4\n.text:0000000000403fd8\n.text:0000000000403fda\n.text:0000000000403fdd\n.text:0000000000403fe0\n.text:0000000000403fe3\n.text:0000000000403fe5\n.text:0000000000403fe9\n.text:0000000000403feb\n.text:0000000000403fef\n.text:0000000000403ff2\n.text:0000000000403ff5\n.text:0000000000403ff8\n.text:0000000000403ffa\n.text:0000000000403ffe\n.text:0000000000404007\n.text:000000000040400a\n.text:000000000040400c\n.text:0000000000404010\n.text:0000000000404012\n.text:0000000000404016\n.text:0000000000404018\n.text:000000000040401b\n.text:000000000040401f\n.text:0000000000404021\n.text:0000000000404024\n.text:0000000000404028\n.text:000000000040402d\n.text:0000000000404030\n.text:0000000000404034\n.text:000000000040403c\n.text:000000000040403f\n.text:0000000000404042\n.text:0000000000404044\n.text:0000000000404048\n.text:000000000040404b\n.text:000000000040404d\n.text:0000000000404052\n.text:0000000000404056\n.text:000000000040405b\n.text:0000000000404060\n.text:0000000000404064\n.text:000000000040406a\n.text:0000000000404070\n.text:0000000000404075\n.text:000000000040407b\n.text:0000000000404080\n.text:0000000000404082\n.text:0000000000404087\n.text:000000000040408b\n.text:000000000040408d\n.text:0000000000404091\n.text:0000000000404093\n.text:0000000000404095\n.text:0000000000404098\n.text:000000000040409d\n.text:000000000040409f\n.text:00000000004040a4\n.text:00000000004040a9\n.text:00000000004040ad\n.text:00000000004040b2\n.text:00000000004040b7\n.text:00000000004040ba\n.text:00000000004040bd\n.text:00000000004040bf\n.text:00000000004040c1\n.text:00000000004040c6\n.text:00000000004040ca\n.text:00000000004040d0\n.text:00000000004040d2\n.text:00000000004040d4\n.text:00000000004040d6\n.text:00000000004040de\n.text:00000000004040e3\n.text:00000000004040e9\n.text:00000000004040eb\n.text:00000000004040f0\n.text:00000000004040f6\n.text:00000000004040ff\n.text:0000000000404105\n.text:0000000000404110\n.text:0000000000404112\n.text:0000000000404115\n.text:0000000000404119\n.text:0000000000404121\n.text:0000000000404124\n.text:0000000000404129\n.text:000000000040412b\n.text:000000000040412e\n.text:0000000000404130\n.text:0000000000404135\n.text:0000000000404138\n.text:000000000040413d\n.text:0000000000404140\n.text:0000000000404145\n.text:0000000000404149\n.text:000000000040414e\n.text:0000000000404150\n.text:0000000000404152\n.text:0000000000404158\n.text:000000000040415d\n.text:0000000000404162\n.text:0000000000404165\n.text:000000000040416a\n.text:000000000040416e\n.text:0000000000404173\n.text:0000000000404178\n.text:000000000040417a\n.text:000000000040417c\n.text:0000000000404181\n.text:0000000000404183\n.text:0000000000404186\n.text:000000000040418c\n.text:000000000040418f\n.text:0000000000404195\n.text:0000000000404198\n.text:000000000040419e\n.text:00000000004041a3\n.text:00000000004041a7\n.text:00000000004041ad\n.text:00000000004041b0\n.text:00000000004041b3\n.text:00000000004041b7\n.text:00000000004041ba\n.text:00000000004041bc\n.text:00000000004041bf\n.text:00000000004041c5\n.text:00000000004041ca\n.text:00000000004041cf\n.text:00000000004041d5\n.text:00000000004041d8\n.text:00000000004041de\n.text:00000000004041e1\n.text:00000000004041e3\n.text:00000000004041e5\n.text:00000000004041e7\n.text:00000000004041e9\n.text:00000000004041ec\n.text:00000000004041ee\n.text:00000000004041f3\n.text:00000000004041f8\n.text:00000000004041fb\n.text:00000000004041fd\n.text:0000000000404202\n.text:0000000000404207\n.text:000000000040420a\n.text:000000000040420c\n.text:0000000000404211\n.text:0000000000404215\n.text:0000000000404218\n.text:000000000040421b\n.text:000000000040421d\n.text:0000000000404222\n.text:0000000000404227\n.text:0000000000404229\n.text:000000000040422c\n.text:000000000040422f\n.text:0000000000404235\n.text:0000000000404239\n.text:000000000040423c\n.text:0000000000404242\n.text:0000000000404246\n.text:0000000000404249\n.text:000000000040424c\n.text:0000000000404252\n.text:0000000000404255\n.text:0000000000404257\n.text:000000000040425c\n.text:0000000000404261\n.text:0000000000404264\n.text:0000000000404266\n.text:000000000040426b\n.text:000000000040426f\n.text:0000000000404274\n.text:000000000040427a\n.text:000000000040427f\n.text:0000000000404281\n.text:0000000000404286\n.text:000000000040428c\n.text:000000000040428e\n.text:0000000000404290\n.text:0000000000404292\n.text:0000000000404294\n.text:0000000000404299\n.text:000000000040429f\n.text:00000000004042a1\n.text:00000000004042a3\n.text:00000000004042a8\n.text:00000000004042ae\n.text:00000000004042b0\n.text:00000000004042b2\n.text:00000000004042b7\n.text:00000000004042b9\n.text:00000000004042bf\n.text:00000000004042c4\n.text:00000000004042ca\n.text:00000000004042cd\n.text:00000000004042d0\n.text:00000000004042d6\n.text:00000000004042db\n.text:00000000004042de\n.text:00000000004042e1\n.text:00000000004042e7\n.text:00000000004042ea\n.text:00000000004042f0\n.text:00000000004042f3\n.text:00000000004042f5\n.text:00000000004042fa\n.text:00000000004042ff\n.text:0000000000404302\n.text:0000000000404304\n.text:0000000000404309\n.text:000000000040430e\n.text:0000000000404311\n.text:0000000000404313\n.text:0000000000404318\n.text:000000000040431c\n.text:000000000040431e\n.text:0000000000404323\n.text:0000000000404326\n.text:0000000000404329\n.text:000000000040432f\n.text:0000000000404332\n.text:0000000000404338\n.text:000000000040433b\n.text:0000000000404341\n.text:0000000000404346\n.text:0000000000404349\n.text:000000000040434f\n.text:0000000000404352\n.text:0000000000404358\n.text:000000000040435b\n.text:000000000040435d\n.text:0000000000404361\n.text:0000000000404367\n.text:000000000040436c\n.text:0000000000404370\n.text:0000000000404379\n.text:000000000040437f\n.text:0000000000404384\n.text:0000000000404389\n.text:000000000040438e\n.text:0000000000404391\n.text:0000000000404396\n.text:0000000000404399\n.text:000000000040439c\n.text:00000000004043a1\n.text:00000000004043a6\n.text:00000000004043aa\n.text:00000000004043af\n.text:00000000004043b4\n.text:00000000004043b8\n.text:00000000004043ba\n.text:00000000004043bf\n.text:00000000004043c5\n.text:00000000004043c8\n.text:00000000004043ca\n.text:00000000004043cd\n.text:00000000004043d0\n.text:00000000004043d6\n.text:00000000004043db\n.text:00000000004043de\n.text:00000000004043e1\n.text:00000000004043e4\n.text:00000000004043e7\n.text:00000000004043e9\n.text:00000000004043ed\n.text:00000000004043ef\n.text:00000000004043f4\n.text:00000000004043f9\n.text:00000000004043ff\n.text:0000000000404410\n.text:0000000000404415\n.text:0000000000404417\n.text:000000000040441a\n.text:000000000040441c\n.text:000000000040441f\n.text:0000000000404421\n.text:0000000000404424\n.text:0000000000404426\n.text:000000000040442b\n.text:0000000000404430\n.text:0000000000404433\n.text:0000000000404435\n.text:000000000040443a\n.text:000000000040443e\n.text:0000000000404446\n.text:0000000000404449\n.text:000000000040444c\n.text:000000000040444e\n.text:0000000000404452\n.text:0000000000404460\n.text:0000000000404464\n.text:000000000040446a\n.text:000000000040446d\n.text:000000000040446f\n.text:0000000000404474\n.text:0000000000404477\n.text:0000000000404479\n.text:0000000000404480\n.text:0000000000404483\n.text:0000000000404488\n.text:000000000040448b\n.text:0000000000404490\n.text:0000000000404492\n.text:0000000000404495\n.text:000000000040449b\n.text:000000000040449e\n.text:00000000004044a0\n.text:00000000004044a4\n.text:00000000004044a6\n.text:00000000004044a8\n.text:00000000004044ab\n.text:00000000004044ad\n.text:00000000004044b2\n.text:00000000004044b7\n.text:00000000004044ba\n.text:00000000004044bc\n.text:00000000004044c1\n.text:00000000004044c6\n.text:00000000004044c9\n.text:00000000004044cb\n.text:00000000004044d0\n.text:00000000004044d4\n.text:00000000004044d6\n.text:00000000004044da\n.text:00000000004044dd\n.text:00000000004044df\n.text:00000000004044e4\n.text:00000000004044e9\n.text:00000000004044ec\n.text:00000000004044ee\n.text:00000000004044f1\n.text:00000000004044f4\n.text:00000000004044f7\n.text:00000000004044fb\n.text:0000000000404500\n.text:0000000000404503\n.text:0000000000404505\n.text:0000000000404508\n.text:000000000040450b\n.text:000000000040450e\n.text:0000000000404511\n.text:0000000000404515\n.text:0000000000404519\n.text:000000000040451d\n.text:0000000000404521\n.text:0000000000404523\n.text:0000000000404527\n.text:000000000040452a\n.text:0000000000404530\n.text:0000000000404534\n.text:0000000000404538\n.text:000000000040453e\n.text:0000000000404543\n.text:0000000000404546\n.text:0000000000404549\n.text:000000000040454e\n.text:0000000000404551\n.text:0000000000404553\n.text:0000000000404556\n.text:000000000040455d\n.text:0000000000404563\n.text:0000000000404565\n.text:0000000000404569\n.text:000000000040456f\n.text:0000000000404574\n.text:0000000000404579\n.text:000000000040457f\n.text:0000000000404582\n.text:0000000000404584\n.text:0000000000404589\n.text:000000000040458f\n.text:0000000000404594\n.text:0000000000404596\n.text:000000000040459b\n.text:00000000004045a1\n.text:00000000004045a3\n.text:00000000004045a6\n.text:00000000004045aa\n.text:00000000004045b0\n.text:00000000004045b5\n.text:00000000004045c1\n.text:00000000004045c5\n.text:00000000004045c7\n.text:00000000004045ca\n.text:00000000004045cf\n.text:00000000004045d4\n.text:00000000004045d7\n.text:00000000004045db\n.text:00000000004045e0\n.text:00000000004045e2\n.text:00000000004045e6\n.text:00000000004045e8\n.text:00000000004045f0\n.text:00000000004045f5\n.text:00000000004045fa\n.text:00000000004045fe\n.text:0000000000404602\n.text:000000000040460a\n.text:000000000040460d\n.text:0000000000404612\n.text:0000000000404615\n.text:0000000000404618\n.text:000000000040461d\n.text:0000000000404620\n.text:0000000000404623\n.text:0000000000404629\n.text:000000000040462d\n.text:0000000000404637\n.text:000000000040463d\n.text:0000000000404641\n.text:0000000000404646\n.text:000000000040464c\n.text:0000000000404650\n.text:0000000000404653\n.text:0000000000404657\n.text:0000000000404659\n.text:000000000040465e\n.text:0000000000404663\n.text:0000000000404667\n.text:0000000000404669\n.text:000000000040466e\n.text:0000000000404673\n.text:0000000000404677\n.text:000000000040467c\n.text:0000000000404680\n.text:0000000000404684\n.text:0000000000404687\n.text:000000000040468a\n.text:000000000040468c\n.text:0000000000404690\n.text:0000000000404696\n.text:0000000000404699\n.text:000000000040469c\n.text:000000000040469e\n.text:00000000004046a2\n.text:00000000004046a7\n.text:00000000004046a9\n.text:00000000004046ab\n.text:00000000004046b3\n.text:00000000004046b8\n.text:00000000004046bb\n.text:00000000004046c3\n.text:00000000004046c6\n.text:00000000004046c9\n.text:00000000004046ce\n.text:00000000004046d1\n.text:00000000004046d3\n.text:00000000004046d8\n.text:00000000004046dd\n.text:00000000004046e3\n.text:00000000004046e8\n.text:00000000004046eb\n.text:00000000004046f0\n.text:00000000004046f6\n.text:00000000004046fb\n.text:0000000000404700\n.text:0000000000404706\n.text:000000000040470a\n.text:000000000040470d\n.text:0000000000404713\n.text:0000000000404719\n.text:000000000040471f\n.text:0000000000404724\n.text:0000000000404726\n.text:0000000000404729\n.text:000000000040472f\n.text:0000000000404733\n.text:0000000000404735\n.text:000000000040473f\n.text:0000000000404743\n.text:0000000000404749\n.text:000000000040474c\n.text:000000000040474e\n.text:0000000000404754\n.text:0000000000404757\n.text:0000000000404759\n.text:000000000040475e\n.text:0000000000404763\n.text:0000000000404766\n.text:000000000040476a\n.text:000000000040476c\n.text:0000000000404771\n.text:0000000000404776\n.text:0000000000404779\n.text:000000000040477b\n.text:0000000000404780\n.text:0000000000404785\n.text:0000000000404788\n.text:000000000040478a\n.text:000000000040478f\n.text:0000000000404793\n.text:0000000000404795\n.text:0000000000404798\n.text:000000000040479b\n.text:00000000004047a0\n.text:00000000004047a6\n.text:00000000004047a8\n.text:00000000004047ad\n.text:00000000004047b2\n.text:00000000004047b8\n.text:00000000004047c0\n.text:00000000004047c5\n.text:00000000004047c7\n.text:00000000004047cc\n.text:00000000004047cf\n.text:00000000004047d1\n.text:00000000004047d4\n.text:00000000004047d6\n.text:00000000004047d9\n.text:00000000004047dc\n.text:00000000004047df\n.text:00000000004047e1\n.text:00000000004047e9\n.text:00000000004047ec\n.text:00000000004047ee\n.text:00000000004047f0\n.text:0000000000404800\n.text:0000000000404803\n.text:0000000000404805\n.text:0000000000404808\n.text:000000000040480e\n.text:0000000000404811\n.text:0000000000404813\n.text:0000000000404815\n.text:0000000000404817\n.text:0000000000404819\n.text:000000000040481c\n.text:000000000040481e\n.text:0000000000404823\n.text:0000000000404828\n.text:000000000040482b\n.text:000000000040482d\n.text:0000000000404832\n.text:0000000000404837\n.text:000000000040483a\n.text:000000000040483c\n.text:0000000000404841\n.text:0000000000404845\n.text:0000000000404848\n.text:000000000040484b\n.text:000000000040484d\n.text:0000000000404852\n.text:0000000000404855\n.text:0000000000404858\n.text:000000000040485a\n.text:0000000000404860\n.text:0000000000404864\n.text:0000000000404866\n.text:0000000000404868\n.text:000000000040486a\n.text:000000000040486d\n.text:000000000040486f\n.text:0000000000404874\n.text:0000000000404879\n.text:000000000040487c\n.text:000000000040487e\n.text:0000000000404883\n.text:0000000000404887\n.text:0000000000404889\n.text:000000000040488c\n.text:000000000040488e\n.text:0000000000404892\n.text:0000000000404895\n.text:0000000000404898\n.text:000000000040489c\n.text:00000000004048a2\n.text:00000000004048a7\n.text:00000000004048af\n.text:00000000004048b4\n.text:00000000004048b6\n.text:00000000004048be\n.text:00000000004048c3\n.text:00000000004048c5\n.text:00000000004048ca\n.text:00000000004048cf\n.text:00000000004048d3\n.text:00000000004048d5\n.text:00000000004048da\n.text:00000000004048dd\n.text:00000000004048e0\n.text:00000000004048e2\n.text:00000000004048ea\n.text:00000000004048ec\n.text:00000000004048f4\n.text:00000000004048f9\n.text:00000000004048fd\n.text:0000000000404902\n.text:0000000000404907\n.text:000000000040490b\n.text:0000000000404910\n.text:0000000000404915\n.text:0000000000404919\n.text:000000000040491d\n.text:0000000000404923\n.text:0000000000404928\n.text:0000000000404930\n.text:0000000000404932\n.text:0000000000404934\n.text:0000000000404938\n.text:000000000040493d\n.text:0000000000404943\n.text:0000000000404950\n.text:0000000000404953\n.text:0000000000404959\n.text:000000000040495c\n.text:000000000040495e\n.text:0000000000404961\n.text:0000000000404963\n.text:0000000000404966\n.text:0000000000404968\n.text:0000000000404970\n.text:0000000000404976\n.text:000000000040497a\n.text:000000000040497d\n.text:0000000000404981\n.text:0000000000404986\n.text:000000000040498a\n.text:000000000040498e\n.text:0000000000404991\n.text:0000000000404994\n.text:0000000000404997\n.text:000000000040499b\n.text:000000000040499f\n.text:00000000004049a1\n.text:00000000004049a6\n.text:00000000004049aa\n.text:00000000004049ad\n.text:00000000004049b0\n.text:00000000004049b7\n.text:00000000004049b8\n.text:00000000004049ba\n.text:00000000004049bc\n.text:00000000004049be\n.text:00000000004049c0\n.text:00000000004049c1\n.text:00000000004049c2\n.text:00000000004049ca\n.text:00000000004049cd\n.text:00000000004049cf\n.text:00000000004049d2\n.text:00000000004049d4\n.text:00000000004049d6\n.text:00000000004049d8\n.text:00000000004049da\n.text:00000000004049dd\n.text:00000000004049e0\n.text:00000000004049e3\n.text:00000000004049e5\n.text:00000000004049e9\n.text:00000000004049ec\n.text:00000000004049ef\n.text:00000000004049f2\n.text:00000000004049f4\n.text:00000000004049f6\n.text:00000000004049f9\n.text:00000000004049fb\n.text:0000000000404a00\n.text:0000000000404a02\n.text:0000000000404a07\n.text:0000000000404a0c\n.text:0000000000404a0f\n.text:0000000000404a11\n.text:0000000000404a16\n.text:0000000000404a19\n.text:0000000000404a1e\n.text:0000000000404a21\n.text:0000000000404a27\n.text:0000000000404a2d\n.text:0000000000404a30\n.text:0000000000404a35\n'
p769
tp770
sS'es_free'
p771
(S'\n__stdcall es_free(E_string * es)\n'
p772
V\u000avoid es_free(E_string *es)\u000a\u000a{\u000a  free(es->s);\u000a  free(es->escaped);\u000a  return;\u000a}\u000a\u000a
p773
S'PUSH RBX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00401350\nMOV RDI,qword ptr [RBX + 0x8]\nPOP RBX\nJMP 0x00401350\n'
p774
S'53\n48 89 fb\n48 8b 3b\ne8 94 e5 ff ff\n48 8b 7b 08\n5b\ne9 8a e5 ff ff\n'
p775
S'.text:0000000000402db0\n.text:0000000000402db1\n.text:0000000000402db4\n.text:0000000000402db7\n.text:0000000000402dbc\n.text:0000000000402dc0\n.text:0000000000402dc1\n'
p776
tp777
sS'set_quoting_style'
p778
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p779
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p780
S'TEST RDI,RDI\nMOV EAX,0x60d5e0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p781
S'48 85 ff\nb8 e0 d5 60 00\n48 0f 45 c7\n89 30\nc3\n'
p782
S'.text:0000000000403ce0\n.text:0000000000403ce3\n.text:0000000000403ce8\n.text:0000000000403cec\n.text:0000000000403cee\n'
p783
tp784
sS'textdomain'
p785
(S'\n__stdcall textdomain()\n'
p786
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060b068)();\u000a  return;\u000a}\u000a\u000a
p787
S'JMP qword ptr [0x0060b068]\n'
p788
S'ff 25 82 9c 20 00\n'
p789
S'.plt:00000000004013e0\n'
p790
tp791
sS'xmemdup'
p792
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p793
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p794
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00405a90\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401550\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p795
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 5c b9 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p796
S'.text:0000000000405bd0\n.text:0000000000405bd2\n.text:0000000000405bd4\n.text:0000000000405bd5\n.text:0000000000405bd8\n.text:0000000000405bdb\n.text:0000000000405bde\n.text:0000000000405be3\n.text:0000000000405be6\n.text:0000000000405be9\n.text:0000000000405bec\n.text:0000000000405bef\n.text:0000000000405bf4\n.text:0000000000405bf7\n.text:0000000000405bf8\n.text:0000000000405bfa\n.text:0000000000405bfc\n'
p797
tp798
sS'get_quoting_style'
p799
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p800
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p801
S'TEST RDI,RDI\nMOV EAX,0x60d5e0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p802
S'48 85 ff\nb8 e0 d5 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p803
S'.text:0000000000403cd0\n.text:0000000000403cd3\n.text:0000000000403cd8\n.text:0000000000403cdc\n.text:0000000000403cde\n'
p804
tp805
sS'ferror_unlocked'
p806
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p807
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060b108)();\u000a  return iVar1;\u000a}\u000a\u000a
p808
S'JMP qword ptr [0x0060b108]\n'
p809
S'ff 25 e2 9b 20 00\n'
p810
S'.plt:0000000000401520\n'
p811
tp812
sS'exit'
p813
(S'\n__stdcall exit(int __status)\n'
p814
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060b1b0)();\u000a  return;\u000a}\u000a\u000a
p815
S'JMP qword ptr [0x0060b1b0]\n'
p816
S'ff 25 3a 9b 20 00\n'
p817
S'.plt:0000000000401670\n'
p818
tp819
sS'locale_charset'
p820
(S'\n__stdcall locale_charset()\n'
p821
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_004061bd:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_004061bd;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p822
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x004015a0\nTEST RAX,RAX\nMOV R14D,0x408989\nCMOVNZ R14,RAX\nCALL 0x004061d0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00406195\nJMP 0x004061bd\nMOV RDI,RBX\nCALL 0x00401440\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401440\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x004061bd\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401540\nTEST EAX,EAX\nJZ 0x004061b0\nCMP BPL,0x2a\nJNZ 0x00406170\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00406170\nMOV RDI,RBX\nCALL 0x00401440\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x409220\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p823
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 52 b4 ff ff\n48 85 c0\n41 be 89 89 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 c8 b2 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 ba b2 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 a0 b3 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 88 b2 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 20 92 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p824
S'.text:0000000000406140\n.text:0000000000406141\n.text:0000000000406143\n.text:0000000000406144\n.text:0000000000406149\n.text:000000000040614e\n.text:0000000000406151\n.text:0000000000406157\n.text:000000000040615b\n.text:0000000000406160\n.text:0000000000406163\n.text:0000000000406166\n.text:0000000000406169\n.text:000000000040616b\n.text:0000000000406170\n.text:0000000000406173\n.text:0000000000406178\n.text:000000000040617c\n.text:0000000000406181\n.text:0000000000406186\n.text:000000000040618b\n.text:0000000000406190\n.text:0000000000406193\n.text:0000000000406195\n.text:0000000000406198\n.text:000000000040619b\n.text:00000000004061a0\n.text:00000000004061a2\n.text:00000000004061a4\n.text:00000000004061a8\n.text:00000000004061aa\n.text:00000000004061ae\n.text:00000000004061b0\n.text:00000000004061b3\n.text:00000000004061b8\n.text:00000000004061bd\n.text:00000000004061c1\n.text:00000000004061c6\n.text:00000000004061ca\n.text:00000000004061cb\n.text:00000000004061cd\n.text:00000000004061ce\n'
p825
tp826
sS'set_program_name'
p827
(S'\n__stdcall set_program_name(char * argv0)\n'
p828
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p829
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00403c61\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401480\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00403c4b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x4082fe\nMOV EDX,0x7\nCALL 0x00401380\nTEST EAX,EAX\nJNZ 0x00403c4b\nMOV ESI,0x408306\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401380\nTEST EAX,EAX\nJNZ 0x00403c48\nADD R14,0x3\nMOV qword ptr [0x0060b260],R14\nMOV RBX,R14\nMOV qword ptr [0x0060d5d0],RBX\nMOV qword ptr [0x0060b280],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060b2a0]\nMOV EDI,0x4082c6\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401680\nCALL 0x00401360\n'
p830
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 87 d8 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe fe 82 40 00\nba 07 00 00 00\ne8 5d d7 ff ff\n85 c0\n75 24\nbe 06 83 40 00\nba 03 00 00 00\n4c 89 f7\ne8 47 d7 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 18 76 20 00\n4c 89 f3\n48 89 1d 7e 99 20 00\n48 89 1d 27 76 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 38 76 20 00\nbf c6 82 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 04 da ff ff\ne8 df d6 ff ff\n'
p831
S'.text:0000000000403be0\n.text:0000000000403be2\n.text:0000000000403be3\n.text:0000000000403be4\n.text:0000000000403be7\n.text:0000000000403bea\n.text:0000000000403bec\n.text:0000000000403bf1\n.text:0000000000403bf4\n.text:0000000000403bf9\n.text:0000000000403bfc\n.text:0000000000403c00\n.text:0000000000403c04\n.text:0000000000403c07\n.text:0000000000403c0a\n.text:0000000000403c0e\n.text:0000000000403c10\n.text:0000000000403c14\n.text:0000000000403c19\n.text:0000000000403c1e\n.text:0000000000403c23\n.text:0000000000403c25\n.text:0000000000403c27\n.text:0000000000403c2c\n.text:0000000000403c31\n.text:0000000000403c34\n.text:0000000000403c39\n.text:0000000000403c3b\n.text:0000000000403c3d\n.text:0000000000403c41\n.text:0000000000403c48\n.text:0000000000403c4b\n.text:0000000000403c52\n.text:0000000000403c59\n.text:0000000000403c5d\n.text:0000000000403c5e\n.text:0000000000403c60\n.text:0000000000403c61\n.text:0000000000403c68\n.text:0000000000403c6d\n.text:0000000000403c72\n.text:0000000000403c77\n.text:0000000000403c7c\n'
p832
tp833
sS'quotearg_buffer'
p834
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p835
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p836
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60d5e0\nCMOVNZ RBP,R8\nCALL 0x00401370\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00403e00\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p837
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd e0 d5 60 00\n49 0f 45 e8\ne8 c8 d5 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p838
S'.text:0000000000403d80\n.text:0000000000403d81\n.text:0000000000403d83\n.text:0000000000403d85\n.text:0000000000403d87\n.text:0000000000403d89\n.text:0000000000403d8a\n.text:0000000000403d8b\n.text:0000000000403d8e\n.text:0000000000403d91\n.text:0000000000403d94\n.text:0000000000403d97\n.text:0000000000403d9a\n.text:0000000000403d9f\n.text:0000000000403da3\n.text:0000000000403da8\n.text:0000000000403dab\n.text:0000000000403dad\n.text:0000000000403db1\n.text:0000000000403db5\n.text:0000000000403db9\n.text:0000000000403dbd\n.text:0000000000403dc0\n.text:0000000000403dc3\n.text:0000000000403dc6\n.text:0000000000403dc9\n.text:0000000000403dcc\n.text:0000000000403dcf\n.text:0000000000403dd3\n.text:0000000000403dd4\n.text:0000000000403dd9\n.text:0000000000403ddd\n.text:0000000000403de1\n.text:0000000000403de3\n.text:0000000000403de7\n.text:0000000000403de8\n.text:0000000000403dea\n.text:0000000000403dec\n.text:0000000000403dee\n.text:0000000000403df0\n.text:0000000000403df1\n'
p839
tp840
sS'quotearg_colon'
p841
(S'\n__stdcall quotearg_colon(char * arg)\n'
p842
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p843
S'MOV ESI,0x3a\nJMP 0x00404f60\n'
p844
S'be 3a 00 00 00\neb e9\n'
p845
S'.text:0000000000404f70\n.text:0000000000404f75\n'
p846
tp847
sS'rpl_fflush'
p848
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p849
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060b140)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p850
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040650d\nMOV RDI,RBX\nCALL 0x004015c0\nTEST EAX,EAX\nJZ 0x0040650d\nMOV RDI,RBX\nCALL 0x00406520\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401590\n'
p851
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 bf b0 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 7a b0 ff ff\n'
p852
S'.text:00000000004064f0\n.text:00000000004064f1\n.text:00000000004064f4\n.text:00000000004064f7\n.text:00000000004064f9\n.text:00000000004064fc\n.text:0000000000406501\n.text:0000000000406503\n.text:0000000000406505\n.text:0000000000406508\n.text:000000000040650d\n.text:0000000000406510\n.text:0000000000406511\n'
p853
tp854
sS'__assert_fail'
p855
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060b0c8)();\u000a  return;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x0060b0c8]\n'
p858
S'ff 25 22 9c 20 00\n'
p859
S'.plt:00000000004014a0\n'
p860
tp861
sS'bindtextdomain'
p862
(S'\n__stdcall bindtextdomain()\n'
p863
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060b078)();\u000a  return;\u000a}\u000a\u000a
p864
S'JMP qword ptr [0x0060b078]\n'
p865
S'ff 25 72 9c 20 00\n'
p866
S'.plt:0000000000401400\n'
p867
tp868
sS'set_char_quoting'
p869
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p870
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p871
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60d5e0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p872
S'89 f1\n48 85 ff\nbe e0 d5 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p873
S'.text:0000000000403cf0\n.text:0000000000403cf2\n.text:0000000000403cf5\n.text:0000000000403cfa\n.text:0000000000403cfe\n.text:0000000000403d00\n.text:0000000000403d03\n.text:0000000000403d07\n.text:0000000000403d0c\n.text:0000000000403d0f\n.text:0000000000403d11\n.text:0000000000403d13\n.text:0000000000403d16\n.text:0000000000403d18\n.text:0000000000403d1b\n.text:0000000000403d1d\n.text:0000000000403d20\n.text:0000000000403d25\n'
p874
tp875
sS'quotearg_n'
p876
(S'\n__stdcall quotearg_n(char * arg)\n'
p877
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p878
S'MOV RDX,-0x1\nMOV ECX,0x60d5e0\nJMP 0x00404be0\n'
p879
S'48 c7 c2 ff ff ff ff\nb9 e0 d5 60 00\neb 02\n'
p880
S'.text:0000000000404bd0\n.text:0000000000404bd7\n.text:0000000000404bdc\n'
p881
tp882
sS'close_stream'
p883
(S'\n__stdcall close_stream(FILE * stream)\n'
p884
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p885
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004013b0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401520\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00406470\nTEST EBP,EBP\nJZ 0x0040610b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040612f\nCALL 0x00401370\nMOV dword ptr [RAX],0x0\nJMP 0x0040612f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040612f\nTEST CL,CL\nJNZ 0x0040612f\nCALL 0x00401370\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p886
S'55\n41 56\n53\n48 89 fb\ne8 d4 b2 ff ff\n49 89 c6\n48 89 df\ne8 39 b4 ff ff\n89 c5\n48 89 df\ne8 7f 03 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 6d b2 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 4e b2 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p887
S'.text:00000000004060d0\n.text:00000000004060d1\n.text:00000000004060d3\n.text:00000000004060d4\n.text:00000000004060d7\n.text:00000000004060dc\n.text:00000000004060df\n.text:00000000004060e2\n.text:00000000004060e7\n.text:00000000004060e9\n.text:00000000004060ec\n.text:00000000004060f1\n.text:00000000004060f3\n.text:00000000004060f5\n.text:00000000004060fa\n.text:00000000004060fc\n.text:00000000004060fe\n.text:0000000000406103\n.text:0000000000406109\n.text:000000000040610b\n.text:000000000040610d\n.text:0000000000406110\n.text:0000000000406112\n.text:0000000000406114\n.text:0000000000406117\n.text:0000000000406119\n.text:000000000040611b\n.text:000000000040611d\n.text:0000000000406122\n.text:0000000000406124\n.text:0000000000406127\n.text:000000000040612c\n.text:000000000040612f\n.text:0000000000406131\n.text:0000000000406132\n.text:0000000000406134\n.text:0000000000406135\n'
p888
tp889
sS'quotearg_colon_mem'
p890
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p891
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p892
S'MOV EDX,0x3a\nJMP 0x00404ef0\n'
p893
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p894
S'.text:0000000000404f80\n.text:0000000000404f85\n'
p895
tp896
sS'xcalloc'
p897
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p898
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p899
S'PUSH RAX\nCALL 0x00405f30\nTEST RAX,RAX\nJZ 0x00405bbd\nPOP RCX\nRET\nCALL 0x00405c20\n'
p900
S'50\ne8 7a 03 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p901
S'.text:0000000000405bb0\n.text:0000000000405bb1\n.text:0000000000405bb6\n.text:0000000000405bb9\n.text:0000000000405bbb\n.text:0000000000405bbc\n.text:0000000000405bbd\n'
p902
tp903
sS'clear_ungetc_buffer_preserving_position'
p904
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p905
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p906
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00406527\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00406540\n'
p907
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p908
S'.text:0000000000406520\n.text:0000000000406524\n.text:0000000000406526\n.text:0000000000406527\n.text:0000000000406529\n.text:000000000040652e\n'
p909
tp910
sS'xnmalloc'
p911
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p912
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p913
S'MOV RAX,RDI\nMUL RSI\nJO 0x00405a81\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00405a90\nPUSH RAX\nCALL 0x00405c20\n'
p914
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p915
S'.text:0000000000405a70\n.text:0000000000405a73\n.text:0000000000405a76\n.text:0000000000405a78\n.text:0000000000405a7c\n.text:0000000000405a7f\n.text:0000000000405a81\n.text:0000000000405a82\n'
p916
tp917
sS'quotearg_char'
p918
(S'\n__stdcall quotearg_char(char * arg)\n'
p919
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p920
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00404ef0\n'
p921
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p922
S'.text:0000000000404f60\n.text:0000000000404f62\n.text:0000000000404f69\n.text:0000000000404f6b\n'
p923
tp924
sS'malloc'
p925
(S'\n__stdcall malloc(size_t __size)\n'
p926
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060b138)();\u000a  return pvVar1;\u000a}\u000a\u000a
p927
S'JMP qword ptr [0x0060b138]\n'
p928
S'ff 25 b2 9b 20 00\n'
p929
S'.plt:0000000000401580\n'
p930
tp931
sS'c_tolower'
p932
(S'\n__stdcall c_tolower()\n'
p933
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p934
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p935
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p936
S'.text:00000000004060b0\n.text:00000000004060b3\n.text:00000000004060b6\n.text:00000000004060b9\n.text:00000000004060bc\n'
p937
tp938
sS'toupper'
p939
(S'\n__stdcall toupper(int __c)\n'
p940
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint toupper(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_toupper_0060b058)();\u000a  return iVar1;\u000a}\u000a\u000a
p941
S'JMP qword ptr [0x0060b058]\n'
p942
S'ff 25 92 9c 20 00\n'
p943
S'.plt:00000000004013c0\n'
p944
tp945
sS'getopt_long'
p946
(S'\n__stdcall getopt_long()\n'
p947
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060b0a0)();\u000a  return;\u000a}\u000a\u000a
p948
S'JMP qword ptr [0x0060b0a0]\n'
p949
S'ff 25 4a 9c 20 00\n'
p950
S'.plt:0000000000401450\n'
p951
tp952
sS'spec_init'
p953
(S'\n__stdcall spec_init(Spec_list * spec_list)\n'
p954
V\u000avoid spec_init(Spec_list *spec_list)\u000a\u000a{\u000a  List_element *pLVar1;\u000a  \u000a  pLVar1 = (List_element *)xmalloc(0x20);\u000a  spec_list->tail = pLVar1;\u000a  spec_list->head = pLVar1;\u000a  pLVar1->next = (List_element *)0x0;\u000a  return;\u000a}\u000a\u000a
p955
S'PUSH RBX\nMOV RBX,RDI\nMOV EDI,0x20\nCALL 0x00405a90\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [RBX],RAX\nMOV qword ptr [RAX + 0x8],0x0\nPOP RBX\nRET\n'
p956
S'53\n48 89 fb\nbf 20 00 00 00\ne8 12 39 00 00\n48 89 43 08\n48 89 03\n48 c7 40 08 00 00 00 00\n5b\nc3\n'
p957
S'.text:0000000000402170\n.text:0000000000402171\n.text:0000000000402174\n.text:0000000000402179\n.text:000000000040217e\n.text:0000000000402182\n.text:0000000000402185\n.text:000000000040218d\n.text:000000000040218e\n'
p958
tp959
sS'quotearg_style'
p960
(S'\n__stdcall quotearg_style(char * arg)\n'
p961
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p962
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00404dd0\n'
p963
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p964
S'.text:0000000000404eb0\n.text:0000000000404eb3\n.text:0000000000404eb5\n.text:0000000000404eb7\n.text:0000000000404eb9\n.text:0000000000404ebc\n'
p965
tp966
sS'look_up_char_class'
p967
(S'\n__stdcall look_up_char_class(char * class_str, size_t len)\n'
p968
V\u000aChar_class look_up_char_class(char *class_str,size_t len)\u000a\u000a{\u000a  char *__s2;\u000a  int iVar1;\u000a  size_t sVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = 0;\u000a  while( true ) {\u000a    __s2 = char_class_name[uVar3];\u000a    iVar1 = strncmp(class_str,__s2,len);\u000a    if ((iVar1 == 0) && (sVar2 = strlen(__s2), sVar2 == len)) break;\u000a    uVar3 = uVar3 + 1;\u000a    if (0xb < uVar3) {\u000a      return CC_NO_CLASS;\u000a    }\u000a  }\u000a  return (Char_class)uVar3;\u000a}\u000a\u000a
p969
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV R15,RDI\nXOR EBX,EBX\nMOV R12,qword ptr [0x406dd0 + RBX*0x8]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00401380\nTEST EAX,EAX\nJNZ 0x00403407\nMOV RDI,R12\nCALL 0x00401440\nCMP RAX,R14\nJZ 0x00403415\nINC RBX\nCMP RBX,0xc\nJC 0x004033e0\nMOV EBX,0x270f\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p970
S'41 57\n41 56\n41 54\n53\n50\n49 89 f6\n49 89 ff\n31 db\n4c 8b 24 dd d0 6d 40 00\n4c 89 ff\n4c 89 e6\n4c 89 f2\ne8 8a df ff ff\n85 c0\n75 0d\n4c 89 e7\ne8 3e e0 ff ff\n4c 39 f0\n74 0e\n48 ff c3\n48 83 fb 0c\n72 d0\nbb 0f 27 00 00\n89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p971
S'.text:00000000004033d0\n.text:00000000004033d2\n.text:00000000004033d4\n.text:00000000004033d6\n.text:00000000004033d7\n.text:00000000004033d8\n.text:00000000004033db\n.text:00000000004033de\n.text:00000000004033e0\n.text:00000000004033e8\n.text:00000000004033eb\n.text:00000000004033ee\n.text:00000000004033f1\n.text:00000000004033f6\n.text:00000000004033f8\n.text:00000000004033fa\n.text:00000000004033fd\n.text:0000000000403402\n.text:0000000000403405\n.text:0000000000403407\n.text:000000000040340a\n.text:000000000040340e\n.text:0000000000403410\n.text:0000000000403415\n.text:0000000000403417\n.text:000000000040341b\n.text:000000000040341c\n.text:000000000040341e\n.text:0000000000403420\n.text:0000000000403422\n'
p972
tp973
sS'emit_try_help'
p974
(S'\n__stdcall emit_try_help()\n'
p975
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p976
S'PUSH RBX\nMOV RBX,qword ptr [0x0060b2a0]\nXOR EDI,EDI\nMOV ESI,0x4078eb\nMOV EDX,0x5\nCALL 0x00401420\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060d5d0]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401690\n'
p977
S'53\n48 8b 1d 88 99 20 00\n31 ff\nbe eb 78 40 00\nba 05 00 00 00\ne8 f7 fa ff ff\n48 89 c2\n48 8b 0d 9d bc 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 4d fd ff ff\n'
p978
S'.text:0000000000401910\n.text:0000000000401911\n.text:0000000000401918\n.text:000000000040191a\n.text:000000000040191f\n.text:0000000000401924\n.text:0000000000401929\n.text:000000000040192c\n.text:0000000000401933\n.text:0000000000401938\n.text:000000000040193a\n.text:000000000040193d\n.text:000000000040193e\n'
p979
tp980
sS'strrchr'
p981
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p982
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060b0b8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p983
S'JMP qword ptr [0x0060b0b8]\n'
p984
S'ff 25 32 9c 20 00\n'
p985
S'.plt:0000000000401480\n'
p986
tp987
sS'quotearg_alloc_mem'
p988
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p989
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p990
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60d5e0\nCMOVNZ R12,RCX\nCALL 0x00401370\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403e00\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00405b60\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403e00\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00404b2a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p991
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc e0 d5 60 00\n4c 0f 45 e1\ne8 e8 c8 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 81 10 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p992
S'.text:0000000000404a50\n.text:0000000000404a51\n.text:0000000000404a53\n.text:0000000000404a55\n.text:0000000000404a57\n.text:0000000000404a59\n.text:0000000000404a5a\n.text:0000000000404a5e\n.text:0000000000404a61\n.text:0000000000404a66\n.text:0000000000404a69\n.text:0000000000404a6e\n.text:0000000000404a71\n.text:0000000000404a76\n.text:0000000000404a79\n.text:0000000000404a7f\n.text:0000000000404a83\n.text:0000000000404a88\n.text:0000000000404a8d\n.text:0000000000404a8f\n.text:0000000000404a93\n.text:0000000000404a95\n.text:0000000000404a98\n.text:0000000000404a9c\n.text:0000000000404aa1\n.text:0000000000404aa5\n.text:0000000000404aaa\n.text:0000000000404aae\n.text:0000000000404ab0\n.text:0000000000404ab2\n.text:0000000000404ab5\n.text:0000000000404ab8\n.text:0000000000404abb\n.text:0000000000404ac0\n.text:0000000000404ac5\n.text:0000000000404ac7\n.text:0000000000404acc\n.text:0000000000404ad0\n.text:0000000000404ad3\n.text:0000000000404ad7\n.text:0000000000404ada\n.text:0000000000404adf\n.text:0000000000404ae2\n.text:0000000000404ae6\n.text:0000000000404aea\n.text:0000000000404aed\n.text:0000000000404af0\n.text:0000000000404af5\n.text:0000000000404afa\n.text:0000000000404afd\n.text:0000000000404b02\n.text:0000000000404b07\n.text:0000000000404b09\n.text:0000000000404b0e\n.text:0000000000404b13\n.text:0000000000404b17\n.text:0000000000404b1a\n.text:0000000000404b1e\n.text:0000000000404b23\n.text:0000000000404b25\n.text:0000000000404b27\n.text:0000000000404b2a\n.text:0000000000404b2d\n.text:0000000000404b31\n.text:0000000000404b32\n.text:0000000000404b34\n.text:0000000000404b36\n.text:0000000000404b38\n.text:0000000000404b3a\n.text:0000000000404b3b\n'
p993
tp994
sS'es_match'
p995
(S'\n__stdcall es_match(E_string * es, size_t i)\n'
p996
V\u000a_Bool es_match(E_string *es,size_t i)\u000a\u000a{\u000a  char in_DL;\u000a  \u000a  if (es->s[i] == in_DL) {\u000a    return (_Bool)(es->escaped[i] == false);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p997
S'MOV RAX,qword ptr [RDI]\nCMP byte ptr [RAX + RSI*0x1],DL\nJNZ 0x00402de4\nMOV RAX,qword ptr [RDI + 0x8]\nCMP byte ptr [RAX + RSI*0x1],0x0\nSETZ AL\nRET\nXOR EAX,EAX\nRET\n'
p998
S'48 8b 07\n38 14 30\n75 0c\n48 8b 47 08\n80 3c 30 00\n0f 94 c0\nc3\n31 c0\nc3\n'
p999
S'.text:0000000000402dd0\n.text:0000000000402dd3\n.text:0000000000402dd6\n.text:0000000000402dd8\n.text:0000000000402ddc\n.text:0000000000402de0\n.text:0000000000402de3\n.text:0000000000402de4\n.text:0000000000402de6\n'
p1000
tp1001
sS'bkm_scale'
p1002
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p1003
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p1004
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p1005
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p1006
S'.text:0000000000405ec0\n.text:0000000000405ec3\n.text:0000000000405eca\n.text:0000000000405ed1\n.text:0000000000405ed3\n.text:0000000000405ed6\n.text:0000000000405ed9\n.text:0000000000405edd\n.text:0000000000405ee0\n.text:0000000000405ee4\n.text:0000000000405ee6\n.text:0000000000405ee9\n.text:0000000000405eec\n'
p1007
tp1008
sS'quotearg_style_mem'
p1009
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1010
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1011
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404e70\n'
p1012
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1013
S'.text:0000000000404ed0\n.text:0000000000404ed3\n.text:0000000000404ed6\n.text:0000000000404ed8\n.text:0000000000404eda\n.text:0000000000404edc\n.text:0000000000404edf\n.text:0000000000404ee2\n'
p1014
tp1015
sS'xalloc_die'
p1016
(S'\n__stdcall xalloc_die()\n'
p1017
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x4082c3,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1018
S'PUSH RBX\nMOV EBX,dword ptr [0x0060b200]\nXOR EDI,EDI\nMOV ESI,0x408bbf\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x4082c3\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401620\nCALL 0x00401360\n'
p1019
S'53\n8b 1d d9 55 20 00\n31 ff\nbe bf 8b 40 00\nba 05 00 00 00\ne8 e8 b7 ff ff\n48 89 c1\n31 f6\nba c3 82 40 00\n31 c0\n89 df\ne8 d5 b9 ff ff\ne8 10 b7 ff ff\n'
p1020
S'.text:0000000000405c20\n.text:0000000000405c21\n.text:0000000000405c27\n.text:0000000000405c29\n.text:0000000000405c2e\n.text:0000000000405c33\n.text:0000000000405c38\n.text:0000000000405c3b\n.text:0000000000405c3d\n.text:0000000000405c42\n.text:0000000000405c44\n.text:0000000000405c46\n.text:0000000000405c4b\n'
p1021
tp1022
sS'__sprintf_chk'
p1023
(S'\n__stdcall __sprintf_chk()\n'
p1024
V\u000avoid __sprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___sprintf_chk_0060b1e0)();\u000a  return;\u000a}\u000a\u000a
p1025
S'JMP qword ptr [0x0060b1e0]\n'
p1026
S'ff 25 0a 9b 20 00\n'
p1027
S'.plt:00000000004016d0\n'
p1028
tp1029
sS'quotearg_n_custom'
p1030
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1031
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1032
S'MOV R8,-0x1\nJMP 0x00404ff0\n'
p1033
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1034
S'.text:0000000000404fe0\n.text:0000000000404fe7\n'
p1035
tp1036
sS'__freading'
p1037
(S'\n__stdcall __freading()\n'
p1038
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060b158)();\u000a  return;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x0060b158]\n'
p1040
S'ff 25 92 9b 20 00\n'
p1041
S'.plt:00000000004015c0\n'
p1042
tp1043
sS'fputs_unlocked'
p1044
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1045
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060b100)();\u000a  return iVar1;\u000a}\u000a\u000a
p1046
S'JMP qword ptr [0x0060b100]\n'
p1047
S'ff 25 ea 9b 20 00\n'
p1048
S'.plt:0000000000401510\n'
p1049
tp1050
sS'main'
p1051
(S'\n__stdcall main(char * * argv)\n'
p1052
V\u000aint main(char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  int iVar4;\u000a  size_t __n;\u000a  size_t sVar5;\u000a  ushort **ppuVar6;\u000a  uint *puVar7;\u000a  undefined8 uVar8;\u000a  char *pcVar9;\u000a  undefined8 uVar10;\u000a  _Bool *p_Var11;\u000a  int unaff_EBX;\u000a  long lVar12;\u000a  char **in_RSI;\u000a  Spec_list *spec_list;\u000a  int unaff_R15D;\u000a  Spec_list buf2;\u000a  Upper_Lower_class local_a8;\u000a  Upper_Lower_class local_a4;\u000a  Spec_list local_a0;\u000a  Spec_list local_68;\u000a  \u000a  iVar4 = (int)((ulong)argv & 0xffffffff);\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x407775,"/usr/local/share/locale");\u000a  textdomain(0x407775);\u000a  atexit(close_stdout);\u000a  while (iVar3 = getopt_long((ulong)argv & 0xffffffff), 0x42 < iVar3) {\u000a    p_Var11 = &delete;\u000a    switch(iVar3) {\u000a    case 0x43:\u000a    case 99:\u000a      p_Var11 = &complement;\u000a    case 100:\u000a      *p_Var11 = true;\u000a      break;\u000a    default:\u000a      goto switchD_00401b00_caseD_44;\u000a    case 0x73:\u000a      squeeze_repeats = true;\u000a      break;\u000a    case 0x74:\u000a      truncate_set1 = true;\u000a    }\u000a  }\u000a  if (iVar3 == -1) {\u000a    unaff_R15D = iVar4 - optind;\u000a    translating = (_Bool)(delete == false && unaff_R15D == 2);\u000a    unaff_EBX = 0;\u000a    if (unaff_R15D < (int)((uint)(delete == squeeze_repeats) + 1)) goto LAB_00402014;\u000a    unaff_EBX = (uint)(delete <= squeeze_repeats) + 1;\u000a    if (unaff_R15D <= unaff_EBX) {\u000a      spec_init(&local_a0);\u000a      _Var2 = parse_str(in_RSI[(long)optind],&local_a0);\u000a      if (_Var2 == false) {\u000a        return 1;\u000a      }\u000a      if (unaff_R15D == 2) {\u000a        spec_list = &local_68;\u000a        spec_init(spec_list);\u000a        _Var2 = parse_str(in_RSI[(long)optind + 1],spec_list);\u000a        if (_Var2 == false) {\u000a          return 1;\u000a        }\u000a      }\u000a      else {\u000a        spec_list = (Spec_list *)0x0;\u000a      }\u000a      validate(&local_a0,spec_list);\u000a      fadvise(stdin);\u000a      if ((unaff_R15D == 1) && (squeeze_repeats != false)) {\u000a        set_initialize(&local_a0,(_Bool *)(ulong)complement);\u000a      }\u000a      else {\u000a        if ((unaff_R15D == 1) && (delete != false)) {\u000a          set_initialize(&local_a0,(_Bool *)(ulong)complement);\u000a          while (__n = read_and_delete(io_buf,0x2000), __n != 0) {\u000a            sVar5 = fwrite_unlocked(io_buf,1,__n,(FILE *)stdout);\u000a            if (sVar5 != __n) {\u000a              puVar7 = (uint *)__errno_location();\u000a              uVar1 = *puVar7;\u000a              uVar8 = dcgettext(0,"write error",5);\u000a              error(1,(ulong)uVar1,uVar8,uVar8);\u000a            }\u000a          }\u000a          goto LAB_00401f13;\u000a        }\u000a        if (((squeeze_repeats == false) || (unaff_R15D != 2)) || (delete == false)) {\u000a          if (translating == false) goto LAB_00401f13;\u000a          if (complement == false) {\u000a            lVar12 = 0;\u000a            do {\u000a              xlate[lVar12] = (char)lVar12;\u000a              lVar12 = lVar12 + 1;\u000a            } while (lVar12 != 0x100);\u000a            local_a0.state = 0xfffffffffffffffe;\u000a            spec_list->state = 0xfffffffffffffffe;\u000a            do {\u000a              iVar4 = get_next(&local_a0,&local_a4);\u000a              iVar3 = get_next(spec_list,&local_a8);\u000a              if ((local_a4 == UL_LOWER) && (local_a8 == UL_UPPER)) {\u000a                ppuVar6 = __ctype_b_loc();\u000a                lVar12 = 0;\u000a                do {\u000a                  if ((*(byte *)((long)*ppuVar6 + lVar12 * 2 + 1) & 2) != 0) {\u000a                    iVar4 = toupper((int)lVar12);\u000a                    xlate[lVar12] = (char)iVar4;\u000a                  }\u000a                  lVar12 = lVar12 + 1;\u000a                } while (lVar12 != 0x100);\u000a              }\u000a              else {\u000a                if ((local_a4 == UL_UPPER) && (local_a8 == UL_LOWER)) {\u000a                  ppuVar6 = __ctype_b_loc();\u000a                  lVar12 = 0;\u000a                  do {\u000a                    if ((*(byte *)((long)*ppuVar6 + lVar12 * 2 + 1) & 1) != 0) {\u000a                      iVar4 = tolower((int)lVar12);\u000a                      xlate[lVar12] = (char)iVar4;\u000a                    }\u000a                    lVar12 = lVar12 + 1;\u000a                  } while (lVar12 != 0x100);\u000a                }\u000a                else {\u000a                  if ((iVar4 == -1) || (iVar3 == -1)) goto LAB_00401ed6;\u000a                  xlate[(long)iVar4] = (char)iVar3;\u000a                }\u000a              }\u000a              if (local_a8 != UL_NONE) {\u000a                skip_construct(&local_a0);\u000a                skip_construct(spec_list);\u000a              }\u000a            } while( true );\u000a          }\u000a          lVar12 = 0;\u000a          set_initialize(&local_a0,(_Bool *)0x0);\u000a          spec_list->state = 0xfffffffffffffffe;\u000a          do {\u000a            xlate[lVar12] = (char)lVar12;\u000a            lVar12 = lVar12 + 1;\u000a          } while (lVar12 != 0x100);\u000a          lVar12 = 0;\u000a          do {\u000a            if (in_delete_set[lVar12] == false) {\u000a              iVar4 = get_next(spec_list,(Upper_Lower_class *)0x0);\u000a              if ((iVar4 == -1) && (truncate_set1 == false)) goto LAB_0040213c;\u000a              if (iVar4 == -1) break;\u000a              xlate[lVar12] = (char)iVar4;\u000a            }\u000a            lVar12 = lVar12 + 1;\u000a          } while (lVar12 < 0x100);\u000a          goto LAB_00401eed;\u000a        }\u000a        set_initialize(&local_a0,(_Bool *)(ulong)complement);\u000a        set_initialize(spec_list,(_Bool *)0x0);\u000a      }\u000a      goto LAB_00401f0e;\u000a    }\u000a  }\u000a  else {\u000a    if (iVar3 == -0x83) {\u000aLAB_00401fdb:\u000a      version_etc(stdout,"tr","GNU coreutils",Version,"Jim Meyering",0);\u000a                    /* WARNING: Subroutine does not return */\u000a      exit(0);\u000a    }\u000a    if (iVar3 == -0x82) {\u000a      usage(0);\u000a      goto LAB_00401fdb;\u000a    }\u000aswitchD_00401b00_caseD_44:\u000a    usage(1);\u000aLAB_00402014:\u000a    if (unaff_R15D != 0) goto LAB_004020c3;\u000a    uVar8 = dcgettext(0,"missing operand",5);\u000a    error(0,0,uVar8,uVar8);\u000a    usage(1);\u000a  }\u000a  uVar8 = dcgettext(0,"extra operand %s",5);\u000a  iVar4 = (int)uVar8;\u000a  pcVar9 = quote(in_RSI[(long)unaff_EBX + (long)optind]);\u000a  error(0,0,uVar8,pcVar9);\u000a  uVar8 = stderr;\u000a  if (unaff_R15D == 2) {\u000a    uVar10 = dcgettext(0,"Only one string may be given when deleting without squeezing repeats.",5);\u000a    __fprintf_chk(uVar8,1,0x4088b0,uVar10);\u000a  }\u000a  usage(1);\u000aLAB_004020c3:\u000a  uVar8 = dcgettext();\u000a  pcVar9 = quote(in_RSI[(long)iVar4 + -1]);\u000a  error(0,0,uVar8,pcVar9);\u000a  uVar8 = stderr;\u000a  pcVar9 = "Two strings must be given when translating.";\u000a  if (squeeze_repeats != false) {\u000a    pcVar9 = "Two strings must be given when both deleting and squeezing repeats.";\u000a  }\u000a  uVar10 = dcgettext(0,pcVar9,5);\u000a  __fprintf_chk(uVar8,1,0x4088b0,uVar10);\u000a  usage(1);\u000aLAB_0040213c:\u000a                    /* WARNING: Subroutine does not return */\u000a  __assert_fail("ch != -1 || truncate_set1","src/tr.c",0x74d,"int main(int, char **)");\u000aLAB_00401ed6:\u000a  if ((truncate_set1 == false) && (iVar4 != -1)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("c1 == -1 || truncate_set1","src/tr.c",0x783,"int main(int, char **)");\u000a  }\u000aLAB_00401eed:\u000a  if (squeeze_repeats == false) {\u000a    while (__n = read_and_xlate(io_buf,0x2000), __n != 0) {\u000a      sVar5 = fwrite_unlocked(io_buf,1,__n,(FILE *)stdout);\u000a      if (sVar5 != __n) {\u000a        puVar7 = (uint *)__errno_location();\u000a        uVar1 = *puVar7;\u000a        uVar8 = dcgettext(0,"write error",5);\u000a        error(1,(ulong)uVar1,uVar8,uVar8);\u000a      }\u000a    }\u000a    goto LAB_00401f13;\u000a  }\u000a  set_initialize(spec_list,(_Bool *)0x0);\u000aLAB_00401f0e:\u000a  squeeze_filter();\u000aLAB_00401f13:\u000a  iVar4 = close(0);\u000a  if (iVar4 != 0) {\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar1 = *puVar7;\u000a    uVar8 = dcgettext(0,"standard input",5);\u000a    error(1,(ulong)uVar1,uVar8,uVar8);\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1053
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x78\nMOV R12,RSI\nMOV EBP,EDI\nMOV RDI,qword ptr [R12]\nCALL 0x00403be0\nMOV EDI,0x6\nMOV ESI,0x408989\nCALL 0x00401600\nMOV EDI,0x407775\nMOV ESI,0x407752\nCALL 0x00401400\nMOV EDI,0x407775\nCALL 0x004013e0\nMOV EDI,0x403af0\nCALL 0x00406630\nJMP 0x00401ad3\nMOV byte ptr [RCX],0x1\nMOV EDX,0x40776a\nMOV ECX,0x406c80\nXOR R8D,R8D\nMOV EDI,EBP\nMOV RSI,R12\nCALL 0x00401450\nCMP EAX,0x42\nJLE 0x00401b22\nADD EAX,-0x43\nCMP EAX,0x31\nJA 0x0040200a\nMOV ECX,0x60b2b1\nJMP qword ptr [0x406680 + RAX*0x8]\nMOV ECX,0x60b2b0\nJMP 0x00401ad0\nMOV ECX,0x60b2b3\nMOV byte ptr [RCX],0x1\nJMP 0x00401ad3\nMOV ECX,0x60b2b2\nMOV byte ptr [RCX],0x1\nJMP 0x00401ad3\nCMP EAX,-0x1\nJNZ 0x00401fc6\nMOV R15D,EBP\nSUB R15D,dword ptr [0x0060b278]\nCMP R15D,0x2\nSETZ AL\nMOV CL,byte ptr [0x0060b2b1]\nTEST CL,CL\nSETZ DL\nAND DL,AL\nMOV byte ptr [0x0060b2b4],DL\nXOR EDX,EDX\nXOR EBX,EBX\nCMP CL,byte ptr [0x0060b2b2]\nSETZ DL\nSETBE AL\nINC EDX\nCMP R15D,EDX\nJL 0x00402014\nMOV BL,AL\nINC EBX\nCMP EBX,R15D\nJL 0x00402049\nLEA RBP,[RSP + 0x8]\nMOV RDI,RBP\nCALL 0x00402170\nMOVSXD RAX,dword ptr [0x0060b278]\nMOV RDI,qword ptr [R12 + RAX*0x8]\nMOV RSI,RBP\nCALL 0x00402190\nMOV EBP,0x1\nTEST AL,AL\nJZ 0x00401f4e\nCMP R15D,0x2\nJNZ 0x00401bd4\nLEA R14,[RSP + 0x40]\nMOV RDI,R14\nCALL 0x00402170\nMOVSXD RAX,dword ptr [0x0060b278]\nMOV RDI,qword ptr [R12 + RAX*0x8 + 0x8]\nMOV RSI,R14\nCALL 0x00402190\nTEST AL,AL\nJNZ 0x00401bd7\nJMP 0x00401f4e\nXOR R14D,R14D\nLEA RDI,[RSP + 0x8]\nMOV RSI,R14\nCALL 0x004021d0\nMOV RDI,qword ptr [0x0060b270]\nMOV ESI,0x2\nCALL 0x00403bc0\nMOV AL,byte ptr [0x0060b2b2]\nCMP R15D,0x1\nJNZ 0x00401c25\nTEST AL,AL\nJZ 0x00401c25\nMOVZX ESI,byte ptr [0x0060b2b0]\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x60b2c0\nCALL 0x00402370\nMOV EDI,0x402580\nJMP 0x00401f0e\nMOV CL,byte ptr [0x0060b2b1]\nCMP R15D,0x1\nJNZ 0x00401cc7\nTEST CL,CL\nJZ 0x00401cc7\nMOVZX ESI,byte ptr [0x0060b2b0]\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x60d3c0\nCALL 0x00402370\nJMP 0x00401c8c\nCALL 0x00401370\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40787c\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401620\nMOV EDI,0x60b3c0\nMOV ESI,0x2000\nCALL 0x004025e0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00401f13\nMOV RCX,qword ptr [0x0060b268]\nMOV EDI,0x60b3c0\nMOV ESI,0x1\nMOV RDX,RBX\nCALL 0x004015d0\nCMP RAX,RBX\nJZ 0x00401c8c\nJMP 0x00401c60\nTEST AL,AL\nJZ 0x00401d04\nCMP R15D,0x2\nJNZ 0x00401d04\nTEST CL,CL\nJZ 0x00401d04\nMOVZX ESI,byte ptr [0x0060b2b0]\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x60d3c0\nCALL 0x00402370\nXOR ESI,ESI\nMOV EDX,0x60b2c0\nMOV RDI,R14\nCALL 0x00402370\nMOV EDI,0x4025e0\nJMP 0x00401f0e\nCMP byte ptr [0x0060b2b4],0x0\nJZ 0x00401f13\nCMP byte ptr [0x0060b2b0],0x0\nJZ 0x00401da7\nLEA RDI,[RSP + 0x8]\nXOR EBX,EBX\nXOR ESI,ESI\nMOV EDX,0x60d3c0\nCALL 0x00402370\nMOV qword ptr [R14 + 0x10],-0x2\nNOP dword ptr [RAX]\nMOV byte ptr [0x60d4c0 + RBX],BL\nINC RBX\nCMP RBX,0x100\nJNZ 0x00401d40\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [0x60d3c0 + RBX],0x0\nJNZ 0x00401d96\nXOR ESI,ESI\nMOV RDI,R14\nCALL 0x004026c0\nCMP EAX,-0x1\nJNZ 0x00401d87\nMOVZX ECX,byte ptr [0x0060b2b3]\nTEST CL,CL\nJZ 0x0040213c\nCMP EAX,-0x1\nJZ 0x00401eed\nMOV byte ptr [0x60d4c0 + RBX],AL\nINC RBX\nCMP RBX,0x100\nJL 0x00401d60\nJMP 0x00401eed\nXOR EAX,EAX\nNOP dword ptr [RAX]\nMOV byte ptr [0x60d4c0 + RAX],AL\nINC RAX\nCMP RAX,0x100\nJNZ 0x00401db0\nMOV qword ptr [RSP + 0x18],-0x2\nMOV qword ptr [R14 + 0x10],-0x2\nLEA R13,[RSP + 0x8]\nLEA R15,[RSP + 0x4]\nMOV R12,RSP\nJMP 0x00401e71\nCMP EDX,0x1\nJNZ 0x00401e40\nTEST ECX,ECX\nJNZ 0x00401e40\nCALL 0x004016c0\nMOV RBP,RAX\nXOR EBX,EBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,qword ptr [RBP]\nTEST byte ptr [RAX + RBX*0x2 + 0x1],0x1\nJZ 0x00401e28\nMOV EDI,EBX\nCALL 0x00401570\nMOV byte ptr [0x60d4c0 + RBX],AL\nINC RBX\nCMP RBX,0x100\nJNZ 0x00401e10\nJMP 0x00401e5b\nCMP EBP,-0x1\nJZ 0x00401ed6\nCMP EAX,-0x1\nJZ 0x00401ed6\nMOVSXD RCX,EBP\nMOV byte ptr [0x60d4c0 + RCX],AL\nCMP dword ptr [RSP],0x2\nJZ 0x00401e71\nMOV RDI,R13\nCALL 0x004028d0\nMOV RDI,R14\nCALL 0x004028d0\nMOV RDI,R13\nMOV RSI,R15\nCALL 0x004026c0\nMOV EBP,EAX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x004026c0\nMOV EDX,dword ptr [RSP + 0x4]\nMOV ECX,dword ptr [RSP]\nTEST EDX,EDX\nJNZ 0x00401df0\nCMP ECX,0x1\nJNZ 0x00401df0\nCALL 0x004016c0\nMOV RBP,RAX\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RBP]\nTEST byte ptr [RAX + RBX*0x2 + 0x1],0x2\nJZ 0x00401ec8\nMOV EDI,EBX\nCALL 0x004013c0\nMOV byte ptr [0x60d4c0 + RBX],AL\nINC RBX\nCMP RBX,0x100\nJNZ 0x00401eb0\nJMP 0x00401e5b\nCMP EBP,-0x1\nSETNZ AL\nCMP byte ptr [0x0060b2b3],0x0\nJNZ 0x00401eed\nTEST AL,AL\nJNZ 0x00402155\nCMP byte ptr [0x0060b2b2],0x0\nJZ 0x00401f8b\nXOR ESI,ESI\nMOV EDX,0x60b2c0\nMOV RDI,R14\nCALL 0x00402370\nMOV EDI,0x4028f0\nCALL 0x004023d0\nXOR EBP,EBP\nXOR EDI,EDI\nCALL 0x004014d0\nTEST EAX,EAX\nJZ 0x00401f4e\nCALL 0x00401370\nMOV EBX,dword ptr [RAX]\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x4078dc\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401620\nMOV EAX,EBP\nADD RSP,0x78\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401370\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40787c\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401620\nMOV EDI,0x60b3c0\nMOV ESI,0x2000\nCALL 0x004028f0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00401f13\nMOV RCX,qword ptr [0x0060b268]\nMOV EDI,0x60b3c0\nMOV ESI,0x1\nMOV RDX,RBX\nCALL 0x004015d0\nCMP RAX,RBX\nJZ 0x00401f8b\nJMP 0x00401f5f\nCMP EAX,0xffffff7d\nJZ 0x00401fdb\nCMP EAX,0xffffff7e\nJNZ 0x0040200a\nXOR EDI,EDI\nCALL 0x004017e0\nMOV RDI,qword ptr [0x0060b268]\nMOV RCX,qword ptr [0x0060b1f8]\nMOV ESI,0x40774f\nMOV EDX,0x407771\nMOV R8D,0x40777f\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x00405960\nXOR EDI,EDI\nCALL 0x00401670\nMOV EDI,0x1\nCALL 0x004017e0\nXOR EDI,EDI\nTEST R15D,R15D\nJNZ 0x004020c3\nMOV ESI,0x40778c\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401620\nMOV EDI,0x1\nCALL 0x004017e0\nXOR EDI,EDI\nMOV ESI,0x407825\nMOV EDX,0x5\nCALL 0x00401420\nMOV RBP,RAX\nMOVSXD RAX,dword ptr [0x0060b278]\nMOVSXD RCX,EBX\nADD RCX,RAX\nMOV RDI,qword ptr [R12 + RCX*0x8]\nCALL 0x004050d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401620\nCMP R15D,0x2\nJNZ 0x004020b9\nMOV RBX,qword ptr [0x0060b2a0]\nXOR EDI,EDI\nMOV ESI,0x407836\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4088b0\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401690\nMOV EDI,0x1\nCALL 0x004017e0\nMOV ESI,0x40779c\nMOV EDX,0x5\nCALL 0x00401420\nMOV R14,RAX\nMOVSXD RAX,EBP\nMOV RDI,qword ptr [R12 + RAX*0x8 + -0x8]\nCALL 0x004050d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x00401620\nCMP byte ptr [0x0060b2b2],0x0\nMOV RBX,qword ptr [0x0060b2a0]\nMOV EAX,0x4077b5\nMOV ESI,0x4077f9\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4088b0\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x00401690\nMOV EDI,0x1\nCALL 0x004017e0\nMOV EDI,0x407888\nMOV ESI,0x4078a2\nMOV EDX,0x74d\nMOV ECX,0x4078ab\nCALL 0x004014a0\nMOV EDI,0x4078c2\nMOV ESI,0x4078a2\nMOV EDX,0x783\nMOV ECX,0x4078ab\nCALL 0x004014a0\n'
p1054
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 78\n49 89 f4\n89 fd\n49 8b 3c 24\ne8 44 21 00 00\nbf 06 00 00 00\nbe 89 89 40 00\ne8 55 fb ff ff\nbf 75 77 40 00\nbe 52 77 40 00\ne8 46 f9 ff ff\nbf 75 77 40 00\ne8 1c f9 ff ff\nbf f0 3a 40 00\ne8 62 4b 00 00\neb 03\nc6 01 01\nba 6a 77 40 00\nb9 80 6c 40 00\n45 31 c0\n89 ef\n4c 89 e6\ne8 66 f9 ff ff\n83 f8 42\n7e 33\n83 c0 bd\n83 f8 31\n0f 87 0f 05 00 00\nb9 b1 b2 60 00\nff 24 c5 80 66 40 00\nb9 b0 b2 60 00\neb c2\nb9 b3 b2 60 00\nc6 01 01\neb bb\nb9 b2 b2 60 00\nc6 01 01\neb b1\n83 f8 ff\n0f 85 9b 04 00 00\n41 89 ef\n44 2b 3d 43 97 20 00\n41 83 ff 02\n0f 94 c0\n8a 0d 6f 97 20 00\n84 c9\n0f 94 c2\n20 c2\n88 15 65 97 20 00\n31 d2\n31 db\n3a 0d 59 97 20 00\n0f 94 c2\n0f 96 c0\nff c2\n41 39 d7\n0f 8c aa 04 00 00\n88 c3\nff c3\n44 39 fb\n0f 8c d2 04 00 00\n48 8d 6c 24 08\n48 89 ef\ne8 ec 05 00 00\n48 63 05 ed 96 20 00\n49 8b 3c c4\n48 89 ee\ne8 f9 05 00 00\nbd 01 00 00 00\n84 c0\n0f 84 aa 03 00 00\n41 83 ff 02\n75 2a\n4c 8d 74 24 40\n4c 89 f7\ne8 b9 05 00 00\n48 63 05 ba 96 20 00\n49 8b 7c c4 08\n4c 89 f6\ne8 c5 05 00 00\n84 c0\n75 08\ne9 7a 03 00 00\n45 31 f6\n48 8d 7c 24 08\n4c 89 f6\ne8 ec 05 00 00\n48 8b 3d 85 96 20 00\nbe 02 00 00 00\ne8 cb 1f 00 00\n8a 05 b7 96 20 00\n41 83 ff 01\n75 24\n84 c0\n74 20\n0f b6 35 a4 96 20 00\n48 8d 7c 24 08\nba c0 b2 60 00\ne8 55 07 00 00\nbf 80 25 40 00\ne9 e9 02 00 00\n8a 0d 86 96 20 00\n41 83 ff 01\n0f 85 92 00 00 00\n84 c9\n0f 84 8a 00 00 00\n0f b6 35 6c 96 20 00\n48 8d 7c 24 08\nba c0 d3 60 00\ne8 1d 07 00 00\neb 37\ne8 0b f7 ff ff\n8b 18\n31 ff\nbe 7c 78 40 00\nba 05 00 00 00\ne8 a8 f7 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 94 f9 ff ff\nbf c0 b3 60 00\nbe 00 20 00 00\ne8 45 09 00 00\n48 89 c3\n48 85 db\n0f 84 6c 02 00 00\n48 8b 0d ba 95 20 00\nbf c0 b3 60 00\nbe 01 00 00 00\n48 89 da\ne8 10 f9 ff ff\n48 39 d8\n74 c7\neb 99\n84 c0\n74 39\n41 83 ff 02\n75 33\n84 c9\n74 2f\n0f b6 35 d4 95 20 00\n48 8d 7c 24 08\nba c0 d3 60 00\ne8 85 06 00 00\n31 f6\nba c0 b2 60 00\n4c 89 f7\ne8 76 06 00 00\nbf e0 25 40 00\ne9 0a 02 00 00\n80 3d a9 95 20 00 00\n0f 84 02 02 00 00\n80 3d 98 95 20 00 00\n0f 84 89 00 00 00\n48 8d 7c 24 08\n31 db\n31 f6\nba c0 d3 60 00\ne8 3f 06 00 00\n49 c7 46 10 fe ff ff ff\n0f 1f 80 00 00 00 00\n88 9b c0 d4 60 00\n48 ff c3\n48 81 fb 00 01 00 00\n75 ee\n31 db\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 bb c0 d3 60 00 00\n75 2d\n31 f6\n4c 89 f7\ne8 4d 09 00 00\n83 f8 ff\n75 0f\n0f b6 0d 34 95 20 00\n84 c9\n0f 84 b5 03 00 00\n83 f8 ff\n0f 84 5d 01 00 00\n88 83 c0 d4 60 00\n48 ff c3\n48 81 fb 00 01 00 00\n7c be\ne9 46 01 00 00\n31 c0\n0f 1f 80 00 00 00 00\n88 80 c0 d4 60 00\n48 ff c0\n48 3d 00 01 00 00\n75 ef\n48 c7 44 24 18 fe ff ff ff\n49 c7 46 10 fe ff ff ff\n4c 8d 6c 24 08\n4c 8d 7c 24 04\n49 89 e4\ne9 8d 00 00 00\n83 fa 01\n75 4b\n85 c9\n75 47\ne8 c2 f8 ff ff\n48 89 c5\n31 db\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 45 00\nf6 44 58 01 01\n74 0d\n89 df\ne8 4e f7 ff ff\n88 83 c0 d4 60 00\n48 ff c3\n48 81 fb 00 01 00 00\n75 dc\neb 25\n83 fd ff\n0f 84 8d 00 00 00\n83 f8 ff\n0f 84 84 00 00 00\n48 63 cd\n88 81 c0 d4 60 00\n83 3c 24 02\n74 10\n4c 89 ef\ne8 67 0a 00 00\n4c 89 f7\ne8 5f 0a 00 00\n4c 89 ef\n4c 89 fe\ne8 44 08 00 00\n89 c5\n4c 89 f7\n4c 89 e6\ne8 37 08 00 00\n8b 54 24 04\n8b 0c 24\n85 d2\n0f 85 58 ff ff ff\n83 f9 01\n0f 85 4f ff ff ff\ne8 1a f8 ff ff\n48 89 c5\n31 db\n0f 1f 44 00 00\n48 8b 45 00\nf6 44 58 01 02\n74 0d\n89 df\ne8 fe f4 ff ff\n88 83 c0 d4 60 00\n48 ff c3\n48 81 fb 00 01 00 00\n75 dc\neb 85\n83 fd ff\n0f 95 c0\n80 3d d0 93 20 00 00\n75 08\n84 c0\n0f 85 68 02 00 00\n80 3d be 93 20 00 00\n0f 84 91 00 00 00\n31 f6\nba c0 b2 60 00\n4c 89 f7\ne8 67 04 00 00\nbf f0 28 40 00\ne8 bd 04 00 00\n31 ed\n31 ff\ne8 b4 f5 ff ff\n85 c0\n74 2e\ne8 4b f4 ff ff\n8b 18\n31 ed\n31 ff\nbe dc 78 40 00\nba 05 00 00 00\ne8 e6 f4 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 d2 f6 ff ff\n89 e8\n48 83 c4 78\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 0c f4 ff ff\n8b 18\n31 ff\nbe 7c 78 40 00\nba 05 00 00 00\ne8 a9 f4 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 95 f6 ff ff\nbf c0 b3 60 00\nbe 00 20 00 00\ne8 56 09 00 00\n48 89 c3\n48 85 db\n0f 84 6d ff ff ff\n48 8b 0d bb 92 20 00\nbf c0 b3 60 00\nbe 01 00 00 00\n48 89 da\ne8 11 f6 ff ff\n48 39 d8\n74 c7\neb 99\n3d 7d ff ff ff\n74 0e\n3d 7e ff ff ff\n75 36\n31 ff\ne8 05 f8 ff ff\n48 8b 3d 86 92 20 00\n48 8b 0d 0f 92 20 00\nbe 4f 77 40 00\nba 71 77 40 00\n41 b8 7f 77 40 00\n45 31 c9\n31 c0\ne8 5d 39 00 00\n31 ff\ne8 66 f6 ff ff\nbf 01 00 00 00\ne8 cc f7 ff ff\n31 ff\n45 85 ff\n0f 85 a4 00 00 00\nbe 8c 77 40 00\nba 05 00 00 00\ne8 f2 f3 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 e1 f5 ff ff\nbf 01 00 00 00\ne8 97 f7 ff ff\n31 ff\nbe 25 78 40 00\nba 05 00 00 00\ne8 c6 f3 ff ff\n48 89 c5\n48 63 05 14 92 20 00\n48 63 cb\n48 01 c1\n49 8b 3c cc\ne8 5d 30 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 9c f5 ff ff\n41 83 ff 02\n75 2f\n48 8b 1d 0f 92 20 00\n31 ff\nbe 36 78 40 00\nba 05 00 00 00\ne8 7e f3 ff ff\n48 89 c1\nbe 01 00 00 00\nba b0 88 40 00\n31 c0\n48 89 df\ne8 d7 f5 ff ff\nbf 01 00 00 00\ne8 1d f7 ff ff\nbe 9c 77 40 00\nba 05 00 00 00\ne8 4e f3 ff ff\n49 89 c6\n48 63 c5\n49 8b 7c c4 f8\ne8 ee 2f 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 f2\ne8 2d f5 ff ff\n80 3d b8 91 20 00 00\n48 8b 1d 9f 91 20 00\nb8 b5 77 40 00\nbe f9 77 40 00\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 05 f3 ff ff\n48 89 c1\nbe 01 00 00 00\nba b0 88 40 00\n31 c0\n48 89 df\ne8 5e f5 ff ff\nbf 01 00 00 00\ne8 a4 f6 ff ff\nbf 88 78 40 00\nbe a2 78 40 00\nba 4d 07 00 00\nb9 ab 78 40 00\ne8 4b f3 ff ff\nbf c2 78 40 00\nbe a2 78 40 00\nba 83 07 00 00\nb9 ab 78 40 00\ne8 32 f3 ff ff\n'
p1055
S'.text:0000000000401a80\n.text:0000000000401a81\n.text:0000000000401a83\n.text:0000000000401a85\n.text:0000000000401a87\n.text:0000000000401a89\n.text:0000000000401a8a\n.text:0000000000401a8e\n.text:0000000000401a91\n.text:0000000000401a93\n.text:0000000000401a97\n.text:0000000000401a9c\n.text:0000000000401aa1\n.text:0000000000401aa6\n.text:0000000000401aab\n.text:0000000000401ab0\n.text:0000000000401ab5\n.text:0000000000401aba\n.text:0000000000401abf\n.text:0000000000401ac4\n.text:0000000000401ac9\n.text:0000000000401ace\n.text:0000000000401ad0\n.text:0000000000401ad3\n.text:0000000000401ad8\n.text:0000000000401add\n.text:0000000000401ae0\n.text:0000000000401ae2\n.text:0000000000401ae5\n.text:0000000000401aea\n.text:0000000000401aed\n.text:0000000000401aef\n.text:0000000000401af2\n.text:0000000000401af5\n.text:0000000000401afb\n.text:0000000000401b00\n.text:0000000000401b07\n.text:0000000000401b0c\n.text:0000000000401b0e\n.text:0000000000401b13\n.text:0000000000401b16\n.text:0000000000401b18\n.text:0000000000401b1d\n.text:0000000000401b20\n.text:0000000000401b22\n.text:0000000000401b25\n.text:0000000000401b2b\n.text:0000000000401b2e\n.text:0000000000401b35\n.text:0000000000401b39\n.text:0000000000401b3c\n.text:0000000000401b42\n.text:0000000000401b44\n.text:0000000000401b47\n.text:0000000000401b49\n.text:0000000000401b4f\n.text:0000000000401b51\n.text:0000000000401b53\n.text:0000000000401b59\n.text:0000000000401b5c\n.text:0000000000401b5f\n.text:0000000000401b61\n.text:0000000000401b64\n.text:0000000000401b6a\n.text:0000000000401b6c\n.text:0000000000401b6e\n.text:0000000000401b71\n.text:0000000000401b77\n.text:0000000000401b7c\n.text:0000000000401b7f\n.text:0000000000401b84\n.text:0000000000401b8b\n.text:0000000000401b8f\n.text:0000000000401b92\n.text:0000000000401b97\n.text:0000000000401b9c\n.text:0000000000401b9e\n.text:0000000000401ba4\n.text:0000000000401ba8\n.text:0000000000401baa\n.text:0000000000401baf\n.text:0000000000401bb2\n.text:0000000000401bb7\n.text:0000000000401bbe\n.text:0000000000401bc3\n.text:0000000000401bc6\n.text:0000000000401bcb\n.text:0000000000401bcd\n.text:0000000000401bcf\n.text:0000000000401bd4\n.text:0000000000401bd7\n.text:0000000000401bdc\n.text:0000000000401bdf\n.text:0000000000401be4\n.text:0000000000401beb\n.text:0000000000401bf0\n.text:0000000000401bf5\n.text:0000000000401bfb\n.text:0000000000401bff\n.text:0000000000401c01\n.text:0000000000401c03\n.text:0000000000401c05\n.text:0000000000401c0c\n.text:0000000000401c11\n.text:0000000000401c16\n.text:0000000000401c1b\n.text:0000000000401c20\n.text:0000000000401c25\n.text:0000000000401c2b\n.text:0000000000401c2f\n.text:0000000000401c35\n.text:0000000000401c37\n.text:0000000000401c3d\n.text:0000000000401c44\n.text:0000000000401c49\n.text:0000000000401c4e\n.text:0000000000401c53\n.text:0000000000401c60\n.text:0000000000401c65\n.text:0000000000401c67\n.text:0000000000401c69\n.text:0000000000401c6e\n.text:0000000000401c73\n.text:0000000000401c78\n.text:0000000000401c7b\n.text:0000000000401c80\n.text:0000000000401c82\n.text:0000000000401c84\n.text:0000000000401c87\n.text:0000000000401c8c\n.text:0000000000401c91\n.text:0000000000401c96\n.text:0000000000401c9b\n.text:0000000000401c9e\n.text:0000000000401ca1\n.text:0000000000401ca7\n.text:0000000000401cae\n.text:0000000000401cb3\n.text:0000000000401cb8\n.text:0000000000401cbb\n.text:0000000000401cc0\n.text:0000000000401cc3\n.text:0000000000401cc5\n.text:0000000000401cc7\n.text:0000000000401cc9\n.text:0000000000401ccb\n.text:0000000000401ccf\n.text:0000000000401cd1\n.text:0000000000401cd3\n.text:0000000000401cd5\n.text:0000000000401cdc\n.text:0000000000401ce1\n.text:0000000000401ce6\n.text:0000000000401ceb\n.text:0000000000401ced\n.text:0000000000401cf2\n.text:0000000000401cf5\n.text:0000000000401cfa\n.text:0000000000401cff\n.text:0000000000401d04\n.text:0000000000401d0b\n.text:0000000000401d11\n.text:0000000000401d18\n.text:0000000000401d1e\n.text:0000000000401d23\n.text:0000000000401d25\n.text:0000000000401d27\n.text:0000000000401d2c\n.text:0000000000401d31\n.text:0000000000401d39\n.text:0000000000401d40\n.text:0000000000401d46\n.text:0000000000401d49\n.text:0000000000401d50\n.text:0000000000401d52\n.text:0000000000401d54\n.text:0000000000401d60\n.text:0000000000401d67\n.text:0000000000401d69\n.text:0000000000401d6b\n.text:0000000000401d6e\n.text:0000000000401d73\n.text:0000000000401d76\n.text:0000000000401d78\n.text:0000000000401d7f\n.text:0000000000401d81\n.text:0000000000401d87\n.text:0000000000401d8a\n.text:0000000000401d90\n.text:0000000000401d96\n.text:0000000000401d99\n.text:0000000000401da0\n.text:0000000000401da2\n.text:0000000000401da7\n.text:0000000000401da9\n.text:0000000000401db0\n.text:0000000000401db6\n.text:0000000000401db9\n.text:0000000000401dbf\n.text:0000000000401dc1\n.text:0000000000401dca\n.text:0000000000401dd2\n.text:0000000000401dd7\n.text:0000000000401ddc\n.text:0000000000401ddf\n.text:0000000000401df0\n.text:0000000000401df3\n.text:0000000000401df5\n.text:0000000000401df7\n.text:0000000000401df9\n.text:0000000000401dfe\n.text:0000000000401e01\n.text:0000000000401e03\n.text:0000000000401e10\n.text:0000000000401e14\n.text:0000000000401e19\n.text:0000000000401e1b\n.text:0000000000401e1d\n.text:0000000000401e22\n.text:0000000000401e28\n.text:0000000000401e2b\n.text:0000000000401e32\n.text:0000000000401e34\n.text:0000000000401e40\n.text:0000000000401e43\n.text:0000000000401e49\n.text:0000000000401e4c\n.text:0000000000401e52\n.text:0000000000401e55\n.text:0000000000401e5b\n.text:0000000000401e5f\n.text:0000000000401e61\n.text:0000000000401e64\n.text:0000000000401e69\n.text:0000000000401e6c\n.text:0000000000401e71\n.text:0000000000401e74\n.text:0000000000401e77\n.text:0000000000401e7c\n.text:0000000000401e7e\n.text:0000000000401e81\n.text:0000000000401e84\n.text:0000000000401e89\n.text:0000000000401e8d\n.text:0000000000401e90\n.text:0000000000401e92\n.text:0000000000401e98\n.text:0000000000401e9b\n.text:0000000000401ea1\n.text:0000000000401ea6\n.text:0000000000401ea9\n.text:0000000000401eab\n.text:0000000000401eb0\n.text:0000000000401eb4\n.text:0000000000401eb9\n.text:0000000000401ebb\n.text:0000000000401ebd\n.text:0000000000401ec2\n.text:0000000000401ec8\n.text:0000000000401ecb\n.text:0000000000401ed2\n.text:0000000000401ed4\n.text:0000000000401ed6\n.text:0000000000401ed9\n.text:0000000000401edc\n.text:0000000000401ee3\n.text:0000000000401ee5\n.text:0000000000401ee7\n.text:0000000000401eed\n.text:0000000000401ef4\n.text:0000000000401efa\n.text:0000000000401efc\n.text:0000000000401f01\n.text:0000000000401f04\n.text:0000000000401f09\n.text:0000000000401f0e\n.text:0000000000401f13\n.text:0000000000401f15\n.text:0000000000401f17\n.text:0000000000401f1c\n.text:0000000000401f1e\n.text:0000000000401f20\n.text:0000000000401f25\n.text:0000000000401f27\n.text:0000000000401f29\n.text:0000000000401f2b\n.text:0000000000401f30\n.text:0000000000401f35\n.text:0000000000401f3a\n.text:0000000000401f3d\n.text:0000000000401f42\n.text:0000000000401f44\n.text:0000000000401f46\n.text:0000000000401f49\n.text:0000000000401f4e\n.text:0000000000401f50\n.text:0000000000401f54\n.text:0000000000401f55\n.text:0000000000401f57\n.text:0000000000401f59\n.text:0000000000401f5b\n.text:0000000000401f5d\n.text:0000000000401f5e\n.text:0000000000401f5f\n.text:0000000000401f64\n.text:0000000000401f66\n.text:0000000000401f68\n.text:0000000000401f6d\n.text:0000000000401f72\n.text:0000000000401f77\n.text:0000000000401f7a\n.text:0000000000401f7f\n.text:0000000000401f81\n.text:0000000000401f83\n.text:0000000000401f86\n.text:0000000000401f8b\n.text:0000000000401f90\n.text:0000000000401f95\n.text:0000000000401f9a\n.text:0000000000401f9d\n.text:0000000000401fa0\n.text:0000000000401fa6\n.text:0000000000401fad\n.text:0000000000401fb2\n.text:0000000000401fb7\n.text:0000000000401fba\n.text:0000000000401fbf\n.text:0000000000401fc2\n.text:0000000000401fc4\n.text:0000000000401fc6\n.text:0000000000401fcb\n.text:0000000000401fcd\n.text:0000000000401fd2\n.text:0000000000401fd4\n.text:0000000000401fd6\n.text:0000000000401fdb\n.text:0000000000401fe2\n.text:0000000000401fe9\n.text:0000000000401fee\n.text:0000000000401ff3\n.text:0000000000401ff9\n.text:0000000000401ffc\n.text:0000000000401ffe\n.text:0000000000402003\n.text:0000000000402005\n.text:000000000040200a\n.text:000000000040200f\n.text:0000000000402014\n.text:0000000000402016\n.text:0000000000402019\n.text:000000000040201f\n.text:0000000000402024\n.text:0000000000402029\n.text:000000000040202e\n.text:0000000000402031\n.text:0000000000402033\n.text:0000000000402035\n.text:0000000000402037\n.text:000000000040203a\n.text:000000000040203f\n.text:0000000000402044\n.text:0000000000402049\n.text:000000000040204b\n.text:0000000000402050\n.text:0000000000402055\n.text:000000000040205a\n.text:000000000040205d\n.text:0000000000402064\n.text:0000000000402067\n.text:000000000040206a\n.text:000000000040206e\n.text:0000000000402073\n.text:0000000000402076\n.text:0000000000402078\n.text:000000000040207a\n.text:000000000040207c\n.text:000000000040207f\n.text:0000000000402084\n.text:0000000000402088\n.text:000000000040208a\n.text:0000000000402091\n.text:0000000000402093\n.text:0000000000402098\n.text:000000000040209d\n.text:00000000004020a2\n.text:00000000004020a5\n.text:00000000004020aa\n.text:00000000004020af\n.text:00000000004020b1\n.text:00000000004020b4\n.text:00000000004020b9\n.text:00000000004020be\n.text:00000000004020c3\n.text:00000000004020c8\n.text:00000000004020cd\n.text:00000000004020d2\n.text:00000000004020d5\n.text:00000000004020d8\n.text:00000000004020dd\n.text:00000000004020e2\n.text:00000000004020e5\n.text:00000000004020e7\n.text:00000000004020e9\n.text:00000000004020eb\n.text:00000000004020ee\n.text:00000000004020f3\n.text:00000000004020fa\n.text:0000000000402101\n.text:0000000000402106\n.text:000000000040210b\n.text:000000000040210f\n.text:0000000000402111\n.text:0000000000402116\n.text:000000000040211b\n.text:000000000040211e\n.text:0000000000402123\n.text:0000000000402128\n.text:000000000040212a\n.text:000000000040212d\n.text:0000000000402132\n.text:0000000000402137\n.text:000000000040213c\n.text:0000000000402141\n.text:0000000000402146\n.text:000000000040214b\n.text:0000000000402150\n.text:0000000000402155\n.text:000000000040215a\n.text:000000000040215f\n.text:0000000000402164\n.text:0000000000402169\n'
p1056
tp1057
sS'xcharalloc'
p1058
(S'\n__stdcall xcharalloc(size_t n)\n'
p1059
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1060
S'JMP 0x00405a90\n'
p1061
S'e9 2b ff ff ff\n'
p1062
S'.text:0000000000405b60\n'
p1063
tp1064
sS'c_isupper'
p1065
(S'\n__stdcall c_isupper()\n'
p1066
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1067
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1068
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1069
S'.text:0000000000406080\n.text:0000000000406083\n.text:0000000000406086\n.text:0000000000406089\n'
p1070
tp1071
sS'c_isalnum'
p1072
(S'\n__stdcall c_isalnum()\n'
p1073
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1074
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00405f9b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00405f9b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00405f9a\nXOR EAX,EAX\nRET\n'
p1075
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1076
S'.text:0000000000405f80\n.text:0000000000405f82\n.text:0000000000405f85\n.text:0000000000405f88\n.text:0000000000405f8a\n.text:0000000000405f94\n.text:0000000000405f98\n.text:0000000000405f9a\n.text:0000000000405f9b\n.text:0000000000405f9e\n.text:0000000000405fa1\n.text:0000000000405fa3\n.text:0000000000405fa5\n'
p1077
tp1078
sS'__errno_location'
p1079
(S'\n__stdcall __errno_location()\n'
p1080
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060b030)();\u000a  return piVar1;\u000a}\u000a\u000a
p1081
S'JMP qword ptr [0x0060b030]\n'
p1082
S'ff 25 ba 9c 20 00\n'
p1083
S'.plt:0000000000401370\n'
p1084
tp1085
sS'x2nrealloc'
p1086
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1087
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1088
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00405b2c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00405b59\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00405b4a\nTEST RCX,RCX\nJNZ 0x00405b4a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00405ad0\nPUSH RAX\nCALL 0x00405c20\n'
p1089
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1090
S'.text:0000000000405b00\n.text:0000000000405b03\n.text:0000000000405b06\n.text:0000000000405b09\n.text:0000000000405b0b\n.text:0000000000405b15\n.text:0000000000405b17\n.text:0000000000405b1a\n.text:0000000000405b1d\n.text:0000000000405b1f\n.text:0000000000405b22\n.text:0000000000405b25\n.text:0000000000405b2a\n.text:0000000000405b2c\n.text:0000000000405b2f\n.text:0000000000405b31\n.text:0000000000405b36\n.text:0000000000405b38\n.text:0000000000405b3b\n.text:0000000000405b3d\n.text:0000000000405b44\n.text:0000000000405b47\n.text:0000000000405b4a\n.text:0000000000405b4d\n.text:0000000000405b51\n.text:0000000000405b54\n.text:0000000000405b59\n.text:0000000000405b5a\n'
p1091
tp1092
sS'safe_read'
p1093
(S'\n__stdcall safe_read(void * buf, size_t count)\n'
p1094
V\u000asize_t safe_read(void *buf,size_t count)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  int *piVar4;\u000a  ulong __nbytes;\u000a  size_t unaff_R14;\u000a  \u000a  while( true ) {\u000a    do {\u000a      sVar3 = read((int)buf,(void *)count,__nbytes);\u000a      if (-1 < (long)sVar3) {\u000a        return sVar3;\u000a      }\u000a      piVar4 = __errno_location();\u000a      iVar1 = *piVar4;\u000a    } while (iVar1 == 4);\u000a    uVar2 = __nbytes;\u000a    if (0x7fffe000 < __nbytes && iVar1 == 0x16) {\u000a      sVar3 = unaff_R14;\u000a      uVar2 = 0x7fffe000;\u000a    }\u000a    if (__nbytes < 0x7fffe001) break;\u000a    __nbytes = uVar2;\u000a    unaff_R14 = sVar3;\u000a    if (iVar1 != 0x16) {\u000a      return sVar3;\u000a    }\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p1095
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R15,RSI\nMOV R12D,EDI\nMOV R13D,0x7fffe000\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,R12D\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x004014f0\nMOV RBP,RAX\nTEST RBP,RBP\nJNS 0x00405554\nCALL 0x00401370\nMOV EAX,dword ptr [RAX]\nCMP EAX,0x4\nJZ 0x00405500\nCMP EAX,0x16\nSETZ CL\nCMP RBX,0x7fffe000\nSETA DL\nAND DL,CL\nMOV RCX,RBX\nCMOVNZ RCX,R13\nTEST DL,DL\nCMOVZ R14,RBP\nCMP RBX,0x7fffe001\nJC 0x00405557\nCMP EAX,0x16\nMOV RBX,RCX\nJZ 0x00405500\nJMP 0x00405557\nMOV R14,RBP\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1096
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d3\n49 89 f7\n41 89 fc\n41 bd 00 e0 ff 7f\n66 0f 1f 44 00 00\n44 89 e7\n4c 89 fe\n48 89 da\ne8 e2 bf ff ff\n48 89 c5\n48 85 ed\n79 3e\ne8 55 be ff ff\n8b 00\n83 f8 04\n74 de\n83 f8 16\n0f 94 c1\n48 81 fb 00 e0 ff 7f\n0f 97 c2\n20 ca\n48 89 d9\n49 0f 45 cd\n84 d2\n4c 0f 44 f5\n48 81 fb 01 e0 ff 7f\n72 0d\n83 f8 16\n48 89 cb\n74 ae\neb 03\n49 89 ee\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1097
S'.text:00000000004054e0\n.text:00000000004054e1\n.text:00000000004054e3\n.text:00000000004054e5\n.text:00000000004054e7\n.text:00000000004054e9\n.text:00000000004054ea\n.text:00000000004054eb\n.text:00000000004054ee\n.text:00000000004054f1\n.text:00000000004054f4\n.text:00000000004054fa\n.text:0000000000405500\n.text:0000000000405503\n.text:0000000000405506\n.text:0000000000405509\n.text:000000000040550e\n.text:0000000000405511\n.text:0000000000405514\n.text:0000000000405516\n.text:000000000040551b\n.text:000000000040551d\n.text:0000000000405520\n.text:0000000000405522\n.text:0000000000405525\n.text:0000000000405528\n.text:000000000040552f\n.text:0000000000405532\n.text:0000000000405534\n.text:0000000000405537\n.text:000000000040553b\n.text:000000000040553d\n.text:0000000000405541\n.text:0000000000405548\n.text:000000000040554a\n.text:000000000040554d\n.text:0000000000405550\n.text:0000000000405552\n.text:0000000000405554\n.text:0000000000405557\n.text:000000000040555a\n.text:000000000040555e\n.text:000000000040555f\n.text:0000000000405561\n.text:0000000000405563\n.text:0000000000405565\n.text:0000000000405567\n.text:0000000000405568\n'
p1098
tp1099
sS'append_char_class'
p1100
(S'\n__stdcall append_char_class(Spec_list * list, char * char_class_str, size_t len)\n'
p1101
V\u000a_Bool append_char_class(Spec_list *list,char *char_class_str,size_t len)\u000a\u000a{\u000a  undefined uVar1;\u000a  Char_class CVar2;\u000a  List_element *pLVar3;\u000a  \u000a  CVar2 = look_up_char_class(char_class_str,len);\u000a  if (CVar2 == CC_NO_CLASS) {\u000a    uVar1 = 0;\u000a  }\u000a  else {\u000a    pLVar3 = (List_element *)xmalloc(0x20);\u000a    pLVar3->next = (List_element *)0x0;\u000a    pLVar3->type = RE_CHAR_CLASS;\u000a    *(Char_class *)pLVar3->u = CVar2;\u000a    if (list->tail == (List_element *)0x0) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("list->tail","src/tr.c",0x2c4,\u000a                    "_Bool append_char_class(struct Spec_list *, const char *, size_t)");\u000a    }\u000a    list->tail->next = pLVar3;\u000a    list->tail = pLVar3;\u000a    uVar1 = 1;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p1102
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV RDI,RSI\nMOV RSI,RDX\nCALL 0x004033d0\nMOV EBP,EAX\nCMP EBP,0x270f\nJNZ 0x00402e6f\nXOR EAX,EAX\nJMP 0x00402e9d\nMOV EDI,0x20\nCALL 0x00405a90\nMOV qword ptr [RAX + 0x8],0x0\nMOV dword ptr [RAX],0x2\nMOV dword ptr [RAX + 0x10],EBP\nMOV RCX,qword ptr [RBX + 0x8]\nTEST RCX,RCX\nJZ 0x00402ea4\nMOV qword ptr [RCX + 0x8],RAX\nMOV qword ptr [RBX + 0x8],RAX\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV EDI,0x407bcf\nMOV ESI,0x4078a2\nMOV EDX,0x2c4\nMOV ECX,0x407bda\nCALL 0x004014a0\n'
p1103
S'55\n53\n50\n48 89 fb\n48 89 f7\n48 89 d6\ne8 6f 05 00 00\n89 c5\n81 fd 0f 27 00 00\n75 04\n31 c0\neb 2e\nbf 20 00 00 00\ne8 17 2c 00 00\n48 c7 40 08 00 00 00 00\nc7 00 02 00 00 00\n89 68 10\n48 8b 4b 08\n48 85 c9\n74 11\n48 89 41 08\n48 89 43 08\nb0 01\n48 83 c4 08\n5b\n5d\nc3\nbf cf 7b 40 00\nbe a2 78 40 00\nba c4 02 00 00\nb9 da 7b 40 00\ne8 e3 e5 ff ff\n'
p1104
S'.text:0000000000402e50\n.text:0000000000402e51\n.text:0000000000402e52\n.text:0000000000402e53\n.text:0000000000402e56\n.text:0000000000402e59\n.text:0000000000402e5c\n.text:0000000000402e61\n.text:0000000000402e63\n.text:0000000000402e69\n.text:0000000000402e6b\n.text:0000000000402e6d\n.text:0000000000402e6f\n.text:0000000000402e74\n.text:0000000000402e79\n.text:0000000000402e81\n.text:0000000000402e87\n.text:0000000000402e8a\n.text:0000000000402e8e\n.text:0000000000402e91\n.text:0000000000402e93\n.text:0000000000402e97\n.text:0000000000402e9b\n.text:0000000000402e9d\n.text:0000000000402ea1\n.text:0000000000402ea2\n.text:0000000000402ea3\n.text:0000000000402ea4\n.text:0000000000402ea9\n.text:0000000000402eae\n.text:0000000000402eb3\n.text:0000000000402eb8\n'
p1105
tp1106
sS'quotearg_n_options'
p1107
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1108
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401370\nTEST R12D,R12D\nJS 0x00404d91\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060b208]\nCMP dword ptr [0x0060b210],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00404cab\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60b218\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00405ad0\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060b208],R15\nJNZ 0x00404c72\nMOVUPS XMM0,xmmword ptr [0x0060b218]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060b210]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x004014b0\nMOV dword ptr [0x0060b210],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00403e00\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00404d0d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00404d7b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60d620\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00404d38\nCALL 0x00401350\nMOV RDI,R15\nCALL 0x00405b60\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00403e00\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401360\n'
p1110
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 71 c7 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 ee 65 20 00\n44 39 25 ef 65 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 18 b2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 78 0e 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d a3 65 20 00\n75 0b\n0f 10 05 aa 65 20 00\n41 0f 11 07\n8b 05 98 65 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 1d c8 ff ff\n89 1d 77 65 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 20 d6 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 18 c6 ff ff\n4c 89 ff\ne8 20 0e 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 ca c5 ff ff\n'
p1111
S'.text:0000000000404be0\n.text:0000000000404be1\n.text:0000000000404be3\n.text:0000000000404be5\n.text:0000000000404be7\n.text:0000000000404be9\n.text:0000000000404bea\n.text:0000000000404bee\n.text:0000000000404bf1\n.text:0000000000404bf4\n.text:0000000000404bf7\n.text:0000000000404bfa\n.text:0000000000404bff\n.text:0000000000404c02\n.text:0000000000404c08\n.text:0000000000404c0d\n.text:0000000000404c0f\n.text:0000000000404c13\n.text:0000000000404c1a\n.text:0000000000404c21\n.text:0000000000404c26\n.text:0000000000404c2b\n.text:0000000000404c30\n.text:0000000000404c32\n.text:0000000000404c37\n.text:0000000000404c3a\n.text:0000000000404c3d\n.text:0000000000404c43\n.text:0000000000404c45\n.text:0000000000404c48\n.text:0000000000404c4c\n.text:0000000000404c4f\n.text:0000000000404c53\n.text:0000000000404c58\n.text:0000000000404c5b\n.text:0000000000404c5e\n.text:0000000000404c65\n.text:0000000000404c67\n.text:0000000000404c6e\n.text:0000000000404c72\n.text:0000000000404c78\n.text:0000000000404c7b\n.text:0000000000404c7f\n.text:0000000000404c82\n.text:0000000000404c85\n.text:0000000000404c89\n.text:0000000000404c8b\n.text:0000000000404c8e\n.text:0000000000404c93\n.text:0000000000404c99\n.text:0000000000404c9c\n.text:0000000000404ca1\n.text:0000000000404ca6\n.text:0000000000404cab\n.text:0000000000404cae\n.text:0000000000404cb2\n.text:0000000000404cb6\n.text:0000000000404cbb\n.text:0000000000404cbf\n.text:0000000000404cc3\n.text:0000000000404cc7\n.text:0000000000404ccb\n.text:0000000000404ccf\n.text:0000000000404cd4\n.text:0000000000404cd7\n.text:0000000000404cda\n.text:0000000000404cdd\n.text:0000000000404ce2\n.text:0000000000404ce5\n.text:0000000000404ce8\n.text:0000000000404ceb\n.text:0000000000404cec\n.text:0000000000404cf1\n.text:0000000000404cf5\n.text:0000000000404cf8\n.text:0000000000404cfb\n.text:0000000000404cfd\n.text:0000000000404d02\n.text:0000000000404d06\n.text:0000000000404d0b\n.text:0000000000404d0d\n.text:0000000000404d11\n.text:0000000000404d16\n.text:0000000000404d19\n.text:0000000000404d1c\n.text:0000000000404d21\n.text:0000000000404d26\n.text:0000000000404d29\n.text:0000000000404d2e\n.text:0000000000404d31\n.text:0000000000404d33\n.text:0000000000404d38\n.text:0000000000404d3b\n.text:0000000000404d40\n.text:0000000000404d43\n.text:0000000000404d46\n.text:0000000000404d4b\n.text:0000000000404d4e\n.text:0000000000404d52\n.text:0000000000404d55\n.text:0000000000404d58\n.text:0000000000404d5d\n.text:0000000000404d62\n.text:0000000000404d67\n.text:0000000000404d6a\n.text:0000000000404d6d\n.text:0000000000404d6e\n.text:0000000000404d73\n.text:0000000000404d77\n.text:0000000000404d7b\n.text:0000000000404d7f\n.text:0000000000404d82\n.text:0000000000404d86\n.text:0000000000404d87\n.text:0000000000404d89\n.text:0000000000404d8b\n.text:0000000000404d8d\n.text:0000000000404d8f\n.text:0000000000404d90\n.text:0000000000404d91\n'
p1112
tp1113
sS'strcmp'
p1114
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1115
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060b118)();\u000a  return iVar1;\u000a}\u000a\u000a
p1116
S'JMP qword ptr [0x0060b118]\n'
p1117
S'ff 25 d2 9b 20 00\n'
p1118
S'.plt:0000000000401540\n'
p1119
tp1120
sS'read'
p1121
(S'\n__stdcall read(int __fd, void * __buf, size_t __nbytes)\n'
p1122
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t read(int __fd,void *__buf,size_t __nbytes)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_read_0060b0f0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1123
S'JMP qword ptr [0x0060b0f0]\n'
p1124
S'ff 25 fa 9b 20 00\n'
p1125
S'.plt:00000000004014f0\n'
p1126
tp1127
sS'set_custom_quoting'
p1128
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1129
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1130
S'TEST RDI,RDI\nMOV EAX,0x60d5e0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00403d75\nTEST RDX,RDX\nJZ 0x00403d75\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401360\n'
p1131
S'48 85 ff\nb8 e0 d5 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 e5 d5 ff ff\n'
p1132
S'.text:0000000000403d50\n.text:0000000000403d53\n.text:0000000000403d58\n.text:0000000000403d5c\n.text:0000000000403d62\n.text:0000000000403d65\n.text:0000000000403d67\n.text:0000000000403d6a\n.text:0000000000403d6c\n.text:0000000000403d70\n.text:0000000000403d74\n.text:0000000000403d75\n.text:0000000000403d76\n'
p1133
tp1134
sS'c_isalpha'
p1135
(S'\n__stdcall c_isalpha()\n'
p1136
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1137
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00405fcb\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1138
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1139
S'.text:0000000000405fb0\n.text:0000000000405fb3\n.text:0000000000405fb6\n.text:0000000000405fb8\n.text:0000000000405fc2\n.text:0000000000405fc4\n.text:0000000000405fc7\n.text:0000000000405fca\n.text:0000000000405fcb\n.text:0000000000405fcd\n'
p1140
tp1141
sS'quotearg_custom_mem'
p1142
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1143
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1144
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00404ff0\n'
p1145
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1146
S'.text:0000000000405080\n.text:0000000000405083\n.text:0000000000405086\n.text:0000000000405089\n.text:000000000040508c\n.text:000000000040508e\n.text:0000000000405091\n'
p1147
tp1148
sS'read_and_xlate'
p1149
(S'\n__stdcall read_and_xlate(char * buf, size_t size)\n'
p1150
V\u000asize_t read_and_xlate(char *buf,size_t size)\u000a\u000a{\u000a  byte bVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  \u000a  sVar2 = plain_read(buf,size);\u000a  sVar3 = sVar2;\u000a  while (sVar3 != 0) {\u000a    bVar1 = to_uchar();\u000a    *buf = xlate[(ulong)bVar1];\u000a    buf = buf + 1;\u000a    sVar3 = sVar3 - 1;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p1151
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00402580\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040292c\nMOV R15,R14\nNOP dword ptr [RAX + RAX*0x1]\nMOVSX EDI,byte ptr [RBX]\nCALL 0x00403430\nMOVZX EAX,AL\nMOVZX EAX,byte ptr [0x60d4c0 + RAX]\nMOV byte ptr [RBX],AL\nINC RBX\nDEC R15\nJNZ 0x00402910\nMOV RAX,R14\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1152
S'41 57\n41 56\n53\n48 89 fb\ne8 83 fc ff ff\n49 89 c6\n4d 85 f6\n74 27\n4d 89 f7\n0f 1f 84 00 00 00 00 00\n0f be 3b\ne8 18 0b 00 00\n0f b6 c0\n0f b6 80 c0 d4 60 00\n88 03\n48 ff c3\n49 ff cf\n75 e4\n4c 89 f0\n5b\n41 5e\n41 5f\nc3\n'
p1153
S'.text:00000000004028f0\n.text:00000000004028f2\n.text:00000000004028f4\n.text:00000000004028f5\n.text:00000000004028f8\n.text:00000000004028fd\n.text:0000000000402900\n.text:0000000000402903\n.text:0000000000402905\n.text:0000000000402908\n.text:0000000000402910\n.text:0000000000402913\n.text:0000000000402918\n.text:000000000040291b\n.text:0000000000402922\n.text:0000000000402924\n.text:0000000000402927\n.text:000000000040292a\n.text:000000000040292c\n.text:000000000040292f\n.text:0000000000402930\n.text:0000000000402932\n.text:0000000000402934\n'
p1154
tp1155
sS'rpl_calloc'
p1156
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1157
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060b110)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1158
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00405f6b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00405f70\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00405f70\nPUSH RAX\nCALL 0x00401370\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401530\n'
p1159
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 0f b4 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 b5 b5 ff ff\n'
p1160
S'.text:0000000000405f30\n.text:0000000000405f33\n.text:0000000000405f38\n.text:0000000000405f3a\n.text:0000000000405f3d\n.text:0000000000405f42\n.text:0000000000405f44\n.text:0000000000405f47\n.text:0000000000405f4b\n.text:0000000000405f4d\n.text:0000000000405f50\n.text:0000000000405f53\n.text:0000000000405f56\n.text:0000000000405f59\n.text:0000000000405f5b\n.text:0000000000405f5c\n.text:0000000000405f61\n.text:0000000000405f67\n.text:0000000000405f69\n.text:0000000000405f6a\n.text:0000000000405f6b\n.text:0000000000405f70\n.text:0000000000405f73\n.text:0000000000405f76\n'
p1161
tp1162
sS'memset'
p1163
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1164
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060b0d0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1165
S'JMP qword ptr [0x0060b0d0]\n'
p1166
S'ff 25 1a 9c 20 00\n'
p1167
S'.plt:00000000004014b0\n'
p1168
tp1169
sS'getc_unlocked'
p1170
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1171
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060b060)();\u000a  return iVar1;\u000a}\u000a\u000a
p1172
S'JMP qword ptr [0x0060b060]\n'
p1173
S'ff 25 8a 9c 20 00\n'
p1174
S'.plt:00000000004013d0\n'
p1175
tp1176
sS'c_isascii'
p1177
(S'\n__stdcall c_isascii()\n'
p1178
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1179
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1180
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1181
S'.text:0000000000405fd0\n.text:0000000000405fd6\n.text:0000000000405fd9\n'
p1182
tp1183
sS'__ctype_b_loc'
p1184
(S'\n__stdcall __ctype_b_loc()\n'
p1185
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060b1d8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1186
S'JMP qword ptr [0x0060b1d8]\n'
p1187
S'ff 25 12 9b 20 00\n'
p1188
S'.plt:00000000004016c0\n'
p1189
tp1190
sS'fdadvise'
p1191
(S'\n__stdcall fdadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p1192
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fdadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_0060b0e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p1193
S'JMP 0x004014e0\n'
p1194
S'e9 2b d9 ff ff\n'
p1195
S'.text:0000000000403bb0\n'
p1196
tp1197
sS'quotearg'
p1198
(S'\n__stdcall quotearg(char * arg)\n'
p1199
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1200
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404bd0\n'
p1201
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1202
S'.text:0000000000404db0\n.text:0000000000404db3\n.text:0000000000404db5\n.text:0000000000404db8\n'
p1203
tp1204
sS'_start'
p1205
(S'\n__stdcall _start()\n'
p1206
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060aff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1207
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x406620\nMOV RCX,0x4065b0\nMOV RDI,0x401a80\nCALL qword ptr [0x0060aff0]\nHLT\n'
p1208
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 20 66 40 00\n48 c7 c1 b0 65 40 00\n48 c7 c7 80 1a 40 00\nff 15 e6 98 20 00\nf4\n'
p1209
S'.text:00000000004016e0\n.text:00000000004016e2\n.text:00000000004016e5\n.text:00000000004016e6\n.text:00000000004016e9\n.text:00000000004016ed\n.text:00000000004016ee\n.text:00000000004016ef\n.text:00000000004016f6\n.text:00000000004016fd\n.text:0000000000401704\n.text:000000000040170a\n'
p1210
tp1211
sS'c_iscntrl'
p1212
(S'\n__stdcall c_iscntrl()\n'
p1213
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1214
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00405ff8\nRET\nCMP EDI,0x7f\nJZ 0x00405ff7\nXOR EAX,EAX\nRET\n'
p1215
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1216
S'.text:0000000000405ff0\n.text:0000000000405ff2\n.text:0000000000405ff5\n.text:0000000000405ff7\n.text:0000000000405ff8\n.text:0000000000405ffb\n.text:0000000000405ffd\n.text:0000000000405fff\n'
p1217
tp1218
sS'c_isblank'
p1219
(S'\n__stdcall c_isblank()\n'
p1220
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1221
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1222
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1223
S'.text:0000000000405fe0\n.text:0000000000405fe3\n.text:0000000000405fe6\n.text:0000000000405fe9\n.text:0000000000405fec\n.text:0000000000405fee\n'
p1224
tp1225
sS'stpcpy'
p1226
(S'\n__stdcall stpcpy(char * __dest, char * __src)\n'
p1227
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * stpcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_stpcpy_0060b080)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1228
S'JMP qword ptr [0x0060b080]\n'
p1229
S'ff 25 6a 9c 20 00\n'
p1230
S'.plt:0000000000401410\n'
p1231
tp1232
sS'atexit'
p1233
(S'\n__stdcall atexit(__func * __func)\n'
p1234
V\u000a/* WARNING: Removing unreachable block (ram,0x00406650) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060b1a8)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1235
S'MOV RAX,0x60b1f0\nTEST RAX,RAX\nJZ 0x00406650\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401660\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401660\n'
p1236
S'48 c7 c0 f0 b1 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 1a b0 ff ff\n31 d2\n31 f6\ne9 07 b0 ff ff\n'
p1237
S'.text:0000000000406630\n.text:0000000000406637\n.text:000000000040663a\n.text:000000000040663c\n.text:000000000040663f\n.text:0000000000406641\n.text:0000000000406650\n.text:0000000000406652\n.text:0000000000406654\n'
p1238
tp1239
sS'fdopen'
p1240
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1241
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060b170)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1242
S'JMP qword ptr [0x0060b170]\n'
p1243
S'ff 25 7a 9b 20 00\n'
p1244
S'.plt:00000000004015f0\n'
p1245
tp1246
sS'error'
p1247
(S'\n__stdcall error()\n'
p1248
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060b188)();\u000a  return;\u000a}\u000a\u000a
p1249
S'JMP qword ptr [0x0060b188]\n'
p1250
S'ff 25 62 9b 20 00\n'
p1251
S'.plt:0000000000401620\n'
p1252
tp1253
sS'strcaseeq6'
p1254
(S'\n__stdcall strcaseeq6()\n'
p1255
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1256
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406080\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00405472\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00405479\nJMP 0x0040548e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040548e\nTEST BPL,BPL\nJZ 0x00405489\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004054a0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1257
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 21 0c 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1258
S'.text:0000000000405450\n.text:0000000000405451\n.text:0000000000405452\n.text:0000000000405453\n.text:0000000000405455\n.text:0000000000405458\n.text:000000000040545a\n.text:000000000040545f\n.text:0000000000405463\n.text:0000000000405465\n.text:0000000000405467\n.text:000000000040546a\n.text:000000000040546c\n.text:000000000040546e\n.text:0000000000405470\n.text:0000000000405472\n.text:0000000000405474\n.text:0000000000405477\n.text:0000000000405479\n.text:000000000040547c\n.text:000000000040547e\n.text:0000000000405481\n.text:0000000000405485\n.text:0000000000405486\n.text:0000000000405487\n.text:0000000000405489\n.text:000000000040548e\n.text:0000000000405492\n.text:0000000000405493\n.text:0000000000405494\n'
p1259
tp1260
sS'strcaseeq5'
p1261
(S'\n__stdcall strcaseeq5()\n'
p1262
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1263
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406080\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00405426\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040542d\nJMP 0x00405444\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00405444\nTEST BPL,BPL\nJZ 0x0040543f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00405450\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1264
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 6d 0c 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1265
S'.text:0000000000405400\n.text:0000000000405401\n.text:0000000000405403\n.text:0000000000405404\n.text:0000000000405407\n.text:0000000000405409\n.text:000000000040540c\n.text:000000000040540e\n.text:0000000000405413\n.text:0000000000405417\n.text:0000000000405419\n.text:000000000040541b\n.text:000000000040541e\n.text:0000000000405420\n.text:0000000000405422\n.text:0000000000405424\n.text:0000000000405426\n.text:0000000000405428\n.text:000000000040542b\n.text:000000000040542d\n.text:0000000000405430\n.text:0000000000405432\n.text:0000000000405436\n.text:0000000000405439\n.text:000000000040543a\n.text:000000000040543c\n.text:000000000040543d\n.text:000000000040543f\n.text:0000000000405444\n.text:0000000000405445\n.text:0000000000405447\n.text:0000000000405448\n'
p1266
tp1267
sS'strcaseeq7'
p1268
(S'\n__stdcall strcaseeq7()\n'
p1269
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1270
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00406080\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x004054c2\nTEST ECX,0xffffffdf\nJNZ 0x004054c6\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x004054ca\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1271
S'53\n48 89 fb\n31 ff\ne8 d5 0b 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1272
S'.text:00000000004054a0\n.text:00000000004054a1\n.text:00000000004054a4\n.text:00000000004054a6\n.text:00000000004054ab\n.text:00000000004054af\n.text:00000000004054b1\n.text:00000000004054b3\n.text:00000000004054b9\n.text:00000000004054bb\n.text:00000000004054c0\n.text:00000000004054c1\n.text:00000000004054c2\n.text:00000000004054c4\n.text:00000000004054c6\n.text:00000000004054c8\n.text:00000000004054c9\n.text:00000000004054ca\n.text:00000000004054cf\n.text:00000000004054d0\n'
p1273
tp1274
sS'strcaseeq0'
p1275
(S'\n__stdcall strcaseeq0()\n'
p1276
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1277
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406080\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x004051d5\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004051dc\nJMP 0x00405210\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00405210\nTEST BPL,BPL\nJZ 0x0040520b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00405220\nJMP 0x00405210\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1278
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 bd 0e 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1279
S'.text:00000000004051a0\n.text:00000000004051a1\n.text:00000000004051a3\n.text:00000000004051a5\n.text:00000000004051a7\n.text:00000000004051a9\n.text:00000000004051aa\n.text:00000000004051ab\n.text:00000000004051ae\n.text:00000000004051b1\n.text:00000000004051b4\n.text:00000000004051b7\n.text:00000000004051b9\n.text:00000000004051bc\n.text:00000000004051be\n.text:00000000004051c3\n.text:00000000004051c6\n.text:00000000004051c8\n.text:00000000004051ca\n.text:00000000004051cd\n.text:00000000004051cf\n.text:00000000004051d1\n.text:00000000004051d3\n.text:00000000004051d5\n.text:00000000004051d7\n.text:00000000004051da\n.text:00000000004051dc\n.text:00000000004051df\n.text:00000000004051e1\n.text:00000000004051e5\n.text:00000000004051ea\n.text:00000000004051ed\n.text:00000000004051f1\n.text:00000000004051f5\n.text:00000000004051f9\n.text:00000000004051fd\n.text:0000000000405201\n.text:0000000000405204\n.text:0000000000405209\n.text:000000000040520b\n.text:0000000000405210\n.text:0000000000405214\n.text:0000000000405215\n.text:0000000000405217\n.text:0000000000405219\n.text:000000000040521b\n.text:000000000040521d\n.text:000000000040521e\n'
p1280
tp1281
sS'strcaseeq2'
p1282
(S'\n__stdcall strcaseeq2()\n'
p1283
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1284
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406080\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x004052e6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004052ed\nJMP 0x0040531a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040531a\nTEST BPL,BPL\nJZ 0x00405315\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00405330\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1285
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 ad 0d 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1286
S'.text:00000000004052b0\n.text:00000000004052b1\n.text:00000000004052b3\n.text:00000000004052b5\n.text:00000000004052b7\n.text:00000000004052b9\n.text:00000000004052ba\n.text:00000000004052bb\n.text:00000000004052be\n.text:00000000004052c1\n.text:00000000004052c4\n.text:00000000004052c7\n.text:00000000004052c9\n.text:00000000004052cc\n.text:00000000004052ce\n.text:00000000004052d3\n.text:00000000004052d7\n.text:00000000004052d9\n.text:00000000004052db\n.text:00000000004052de\n.text:00000000004052e0\n.text:00000000004052e2\n.text:00000000004052e4\n.text:00000000004052e6\n.text:00000000004052e8\n.text:00000000004052eb\n.text:00000000004052ed\n.text:00000000004052f0\n.text:00000000004052f2\n.text:00000000004052f6\n.text:00000000004052fa\n.text:00000000004052fe\n.text:0000000000405302\n.text:0000000000405305\n.text:0000000000405309\n.text:000000000040530a\n.text:000000000040530c\n.text:000000000040530e\n.text:0000000000405310\n.text:0000000000405312\n.text:0000000000405313\n.text:0000000000405315\n.text:000000000040531a\n.text:000000000040531e\n.text:000000000040531f\n.text:0000000000405321\n.text:0000000000405323\n.text:0000000000405325\n.text:0000000000405327\n.text:0000000000405328\n'
p1287
tp1288
sS'strcaseeq1'
p1289
(S'\n__stdcall strcaseeq1()\n'
p1290
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1291
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00406080\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040525d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00405264\nJMP 0x00405297\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00405297\nTEST BPL,BPL\nJZ 0x00405292\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004052b0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1292
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 36 0e 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1293
S'.text:0000000000405220\n.text:0000000000405221\n.text:0000000000405223\n.text:0000000000405225\n.text:0000000000405227\n.text:0000000000405229\n.text:000000000040522a\n.text:000000000040522b\n.text:0000000000405230\n.text:0000000000405233\n.text:0000000000405236\n.text:0000000000405239\n.text:000000000040523b\n.text:000000000040523e\n.text:0000000000405243\n.text:0000000000405245\n.text:000000000040524a\n.text:000000000040524e\n.text:0000000000405250\n.text:0000000000405252\n.text:0000000000405255\n.text:0000000000405257\n.text:0000000000405259\n.text:000000000040525b\n.text:000000000040525d\n.text:000000000040525f\n.text:0000000000405262\n.text:0000000000405264\n.text:0000000000405267\n.text:0000000000405269\n.text:000000000040526d\n.text:0000000000405271\n.text:0000000000405275\n.text:000000000040527b\n.text:000000000040527f\n.text:0000000000405282\n.text:0000000000405286\n.text:0000000000405287\n.text:0000000000405289\n.text:000000000040528b\n.text:000000000040528d\n.text:000000000040528f\n.text:0000000000405290\n.text:0000000000405292\n.text:0000000000405297\n.text:000000000040529b\n.text:000000000040529c\n.text:000000000040529e\n.text:00000000004052a0\n.text:00000000004052a2\n.text:00000000004052a4\n.text:00000000004052a5\n'
p1294
tp1295
sS'strcaseeq4'
p1296
(S'\n__stdcall strcaseeq4()\n'
p1297
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1298
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406080\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x004053cc\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004053d3\nJMP 0x004053f4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004053f4\nTEST BPL,BPL\nJZ 0x004053ef\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00405400\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1299
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 c7 0c 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1300
S'.text:00000000004053a0\n.text:00000000004053a1\n.text:00000000004053a3\n.text:00000000004053a5\n.text:00000000004053a6\n.text:00000000004053a7\n.text:00000000004053aa\n.text:00000000004053ad\n.text:00000000004053af\n.text:00000000004053b2\n.text:00000000004053b4\n.text:00000000004053b9\n.text:00000000004053bd\n.text:00000000004053bf\n.text:00000000004053c1\n.text:00000000004053c4\n.text:00000000004053c6\n.text:00000000004053c8\n.text:00000000004053ca\n.text:00000000004053cc\n.text:00000000004053ce\n.text:00000000004053d1\n.text:00000000004053d3\n.text:00000000004053d6\n.text:00000000004053d8\n.text:00000000004053dc\n.text:00000000004053e0\n.text:00000000004053e3\n.text:00000000004053e7\n.text:00000000004053e8\n.text:00000000004053ea\n.text:00000000004053ec\n.text:00000000004053ed\n.text:00000000004053ef\n.text:00000000004053f4\n.text:00000000004053f8\n.text:00000000004053f9\n.text:00000000004053fb\n.text:00000000004053fd\n.text:00000000004053fe\n'
p1301
tp1302
sS'validate_case_classes'
p1303
(S'\n__stdcall validate_case_classes(Spec_list * s1, Spec_list * s2)\n'
p1304
V\u000avoid validate_case_classes(Spec_list *s1,Spec_list *s2)\u000a\u000a{\u000a  int iVar1;\u000a  ushort **ppuVar2;\u000a  undefined8 uVar3;\u000a  long lVar4;\u000a  long lVar5;\u000a  long lVar6;\u000a  bool bVar7;\u000a  bool bVar8;\u000a  Upper_Lower_class class_s1;\u000a  count old_s2_len;\u000a  count old_s1_len;\u000a  Upper_Lower_class local_64;\u000a  Spec_list *local_60;\u000a  Upper_Lower_class local_58;\u000a  int local_54;\u000a  List_element *local_50;\u000a  List_element *local_48;\u000a  count local_40;\u000a  count local_38;\u000a  \u000a  if (s2->has_char_class != false) {\u000a    local_48 = s1->tail;\u000a    local_38 = s1->length;\u000a    local_50 = s2->tail;\u000a    local_40 = s2->length;\u000a    local_60 = s1;\u000a    ppuVar2 = __ctype_b_loc();\u000a    lVar4 = 0;\u000a    lVar6 = 0;\u000a    lVar5 = 0;\u000a    do {\u000a      lVar6 = lVar6 + (ulong)((uint)((*ppuVar2)[lVar4] >> 8) & 1);\u000a      lVar5 = lVar5 + (ulong)((uint)((*ppuVar2)[lVar4] >> 9) & 1);\u000a      lVar4 = lVar4 + 1;\u000a    } while (lVar4 != 0x100);\u000a    local_60->state = 0xfffffffffffffffe;\u000a    s2->state = 0xfffffffffffffffe;\u000a    bVar8 = true;\u000a    bVar7 = true;\u000a    do {\u000a      local_54 = get_next(local_60,&local_58);\u000a      iVar1 = get_next(s2,&local_64);\u000a      if (((bVar8) && (local_64 != UL_NONE)) && ((!bVar7 || (local_58 == UL_NONE)))) {\u000a        uVar3 = dcgettext(0,"misaligned [:upper:] and/or [:lower:] construct",5);\u000a        error(1,0,uVar3,uVar3);\u000a      }\u000a      if (local_64 != UL_NONE) {\u000a        skip_construct(local_60);\u000a        skip_construct(s2);\u000a        lVar4 = lVar5;\u000a        if (local_58 == UL_UPPER) {\u000a          lVar4 = lVar6;\u000a        }\u000a        local_60->length = (local_60->length + 1) - lVar4;\u000a        lVar4 = lVar5;\u000a        if (local_64 == UL_UPPER) {\u000a          lVar4 = lVar6;\u000a        }\u000a        s2->length = (s2->length + 1) - lVar4;\u000a      }\u000a      bVar7 = local_60->state == 0xffffffffffffffff;\u000a      bVar8 = s2->state == 0xffffffffffffffff;\u000a    } while ((iVar1 != -1) && (local_54 != -1));\u000a    if ((local_38 < local_60->length) || (local_40 < s2->length)) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("old_s1_len >= s1->length && old_s2_len >= s2->length","src/tr.c",0x4dc,\u000a                    "void validate_case_classes(struct Spec_list *, struct Spec_list *)");\u000a    }\u000a    local_60->tail = local_48;\u000a    s2->tail = local_50;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1305
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBX,RSI\nCMP byte ptr [RBX + 0x31],0x0\nJZ 0x004036d3\nMOV RAX,qword ptr [RDI + 0x8]\nMOV qword ptr [RSP + 0x20],RAX\nMOV qword ptr [RSP + 0x8],RDI\nMOV RAX,qword ptr [RDI + 0x18]\nMOV qword ptr [RSP + 0x30],RAX\nMOV RAX,qword ptr [RBX + 0x8]\nMOV qword ptr [RSP + 0x18],RAX\nMOV RAX,qword ptr [RBX + 0x18]\nMOV qword ptr [RSP + 0x28],RAX\nCALL 0x004016c0\nMOV RAX,qword ptr [RAX]\nXOR ECX,ECX\nXOR R15D,R15D\nXOR R12D,R12D\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX EDX,word ptr [RAX + RCX*0x2]\nMOV ESI,EDX\nSHR ESI,0x8\nAND ESI,0x1\nADD R15,RSI\nSHR EDX,0x9\nAND EDX,0x1\nADD R12,RDX\nINC RCX\nCMP RCX,0x100\nJNZ 0x00403570\nMOV RDX,qword ptr [RSP + 0x8]\nMOV qword ptr [RDX + 0x10],-0x2\nMOV qword ptr [RBX + 0x10],-0x2\nMOV R14B,0x1\nMOV R13B,0x1\nNOP\nMOV RDI,RDX\nLEA RSI,[RSP + 0x10]\nCALL 0x004026c0\nMOV dword ptr [RSP + 0x14],EAX\nMOV RDI,RBX\nLEA RSI,[RSP + 0x4]\nCALL 0x004026c0\nMOV EBP,EAX\nMOV EAX,dword ptr [RSP + 0x4]\nTEST R14B,R14B\nJZ 0x00403630\nCMP EAX,0x2\nMOV RDX,qword ptr [RSP + 0x8]\nJZ 0x00403635\nTEST R13B,R13B\nJZ 0x004035ef\nCMP dword ptr [RSP + 0x10],0x2\nJNZ 0x00403619\nXOR EDI,EDI\nMOV ESI,0x4080bd\nMOV EDX,0x5\nCALL 0x00401420\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401620\nMOV RDX,qword ptr [RSP + 0x8]\nMOV EAX,dword ptr [RSP + 0x4]\nCMP EAX,0x2\nJNZ 0x0040363a\nJMP 0x00403689\nMOV RDX,qword ptr [RSP + 0x8]\nCMP EAX,0x2\nJZ 0x00403689\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x004028d0\nMOV RDI,RBX\nCALL 0x004028d0\nMOV RDX,qword ptr [RSP + 0x8]\nCMP dword ptr [RSP + 0x10],0x1\nMOV RAX,R12\nCMOVZ RAX,R15\nMOV RCX,qword ptr [RDX + 0x18]\nNEG RAX\nLEA RAX,[RCX + RAX*0x1 + 0x1]\nMOV qword ptr [RDX + 0x18],RAX\nCMP dword ptr [RSP + 0x4],0x1\nMOV RAX,R12\nCMOVZ RAX,R15\nMOV RCX,qword ptr [RBX + 0x18]\nNEG RAX\nLEA RAX,[RCX + RAX*0x1 + 0x1]\nMOV qword ptr [RBX + 0x18],RAX\nCMP qword ptr [RDX + 0x10],-0x1\nSETZ R13B\nCMP qword ptr [RBX + 0x10],-0x1\nSETZ R14B\nCMP EBP,-0x1\nJZ 0x004036ab\nCMP dword ptr [RSP + 0x14],-0x1\nJNZ 0x004035b0\nMOV RAX,qword ptr [RSP + 0x30]\nCMP RAX,qword ptr [RDX + 0x18]\nJC 0x004036e2\nMOV RAX,qword ptr [RSP + 0x28]\nCMP RAX,qword ptr [RBX + 0x18]\nJC 0x004036e2\nMOV RAX,qword ptr [RSP + 0x20]\nMOV qword ptr [RDX + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX + 0x8],RAX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4080ed\nMOV ESI,0x4078a2\nMOV EDX,0x4dc\nMOV ECX,0x408122\nCALL 0x004014a0\n'
p1306
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 f3\n80 7b 31 00\n0f 84 a8 01 00 00\n48 8b 47 08\n48 89 44 24 20\n48 89 7c 24 08\n48 8b 47 18\n48 89 44 24 30\n48 8b 43 08\n48 89 44 24 18\n48 8b 43 18\n48 89 44 24 28\ne8 67 e1 ff ff\n48 8b 00\n31 c9\n45 31 ff\n45 31 e4\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b7 14 48\n89 d6\nc1 ee 08\n83 e6 01\n49 01 f7\nc1 ea 09\n83 e2 01\n49 01 d4\n48 ff c1\n48 81 f9 00 01 00 00\n75 dc\n48 8b 54 24 08\n48 c7 42 10 fe ff ff ff\n48 c7 43 10 fe ff ff ff\n41 b6 01\n41 b5 01\n90\n48 89 d7\n48 8d 74 24 10\ne8 03 f1 ff ff\n89 44 24 14\n48 89 df\n48 8d 74 24 04\ne8 f2 f0 ff ff\n89 c5\n8b 44 24 04\n45 84 f6\n74 57\n83 f8 02\n48 8b 54 24 08\n74 52\n45 84 ed\n74 07\n83 7c 24 10 02\n75 2a\n31 ff\nbe bd 80 40 00\nba 05 00 00 00\ne8 20 de ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 0c e0 ff ff\n48 8b 54 24 08\n8b 44 24 04\n83 f8 02\n75 18\neb 65\n48 8b 54 24 08\n83 f8 02\n74 4f\n48 8b 7c 24 08\ne8 8c f2 ff ff\n48 89 df\ne8 84 f2 ff ff\n48 8b 54 24 08\n83 7c 24 10 01\n4c 89 e0\n49 0f 44 c7\n48 8b 4a 18\n48 f7 d8\n48 8d 44 01 01\n48 89 42 18\n83 7c 24 04 01\n4c 89 e0\n49 0f 44 c7\n48 8b 4b 18\n48 f7 d8\n48 8d 44 01 01\n48 89 43 18\n48 83 7a 10 ff\n41 0f 94 c5\n48 83 7b 10 ff\n41 0f 94 c6\n83 fd ff\n74 0b\n83 7c 24 14 ff\n0f 85 05 ff ff ff\n48 8b 44 24 30\n48 3b 42 18\n72 2c\n48 8b 44 24 28\n48 3b 43 18\n72 21\n48 8b 44 24 20\n48 89 42 08\n48 8b 44 24 18\n48 89 43 08\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf ed 80 40 00\nbe a2 78 40 00\nba dc 04 00 00\nb9 22 81 40 00\ne8 a5 dd ff ff\n'
p1307
S'.text:0000000000403510\n.text:0000000000403511\n.text:0000000000403513\n.text:0000000000403515\n.text:0000000000403517\n.text:0000000000403519\n.text:000000000040351a\n.text:000000000040351e\n.text:0000000000403521\n.text:0000000000403525\n.text:000000000040352b\n.text:000000000040352f\n.text:0000000000403534\n.text:0000000000403539\n.text:000000000040353d\n.text:0000000000403542\n.text:0000000000403546\n.text:000000000040354b\n.text:000000000040354f\n.text:0000000000403554\n.text:0000000000403559\n.text:000000000040355c\n.text:000000000040355e\n.text:0000000000403561\n.text:0000000000403564\n.text:0000000000403570\n.text:0000000000403574\n.text:0000000000403576\n.text:0000000000403579\n.text:000000000040357c\n.text:000000000040357f\n.text:0000000000403582\n.text:0000000000403585\n.text:0000000000403588\n.text:000000000040358b\n.text:0000000000403592\n.text:0000000000403594\n.text:0000000000403599\n.text:00000000004035a1\n.text:00000000004035a9\n.text:00000000004035ac\n.text:00000000004035af\n.text:00000000004035b0\n.text:00000000004035b3\n.text:00000000004035b8\n.text:00000000004035bd\n.text:00000000004035c1\n.text:00000000004035c4\n.text:00000000004035c9\n.text:00000000004035ce\n.text:00000000004035d0\n.text:00000000004035d4\n.text:00000000004035d7\n.text:00000000004035d9\n.text:00000000004035dc\n.text:00000000004035e1\n.text:00000000004035e3\n.text:00000000004035e6\n.text:00000000004035e8\n.text:00000000004035ed\n.text:00000000004035ef\n.text:00000000004035f1\n.text:00000000004035f6\n.text:00000000004035fb\n.text:0000000000403600\n.text:0000000000403603\n.text:0000000000403608\n.text:000000000040360a\n.text:000000000040360c\n.text:000000000040360f\n.text:0000000000403614\n.text:0000000000403619\n.text:000000000040361d\n.text:0000000000403620\n.text:0000000000403622\n.text:0000000000403630\n.text:0000000000403635\n.text:0000000000403638\n.text:000000000040363a\n.text:000000000040363f\n.text:0000000000403644\n.text:0000000000403647\n.text:000000000040364c\n.text:0000000000403651\n.text:0000000000403656\n.text:0000000000403659\n.text:000000000040365d\n.text:0000000000403661\n.text:0000000000403664\n.text:0000000000403669\n.text:000000000040366d\n.text:0000000000403672\n.text:0000000000403675\n.text:0000000000403679\n.text:000000000040367d\n.text:0000000000403680\n.text:0000000000403685\n.text:0000000000403689\n.text:000000000040368e\n.text:0000000000403692\n.text:0000000000403697\n.text:000000000040369b\n.text:000000000040369e\n.text:00000000004036a0\n.text:00000000004036a5\n.text:00000000004036ab\n.text:00000000004036b0\n.text:00000000004036b4\n.text:00000000004036b6\n.text:00000000004036bb\n.text:00000000004036bf\n.text:00000000004036c1\n.text:00000000004036c6\n.text:00000000004036ca\n.text:00000000004036cf\n.text:00000000004036d3\n.text:00000000004036d7\n.text:00000000004036d8\n.text:00000000004036da\n.text:00000000004036dc\n.text:00000000004036de\n.text:00000000004036e0\n.text:00000000004036e1\n.text:00000000004036e2\n.text:00000000004036e7\n.text:00000000004036ec\n.text:00000000004036f1\n.text:00000000004036f6\n'
p1308
tp1309
sS'strcaseeq3'
p1310
(S'\n__stdcall strcaseeq3()\n'
p1311
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1312
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00406080\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00405360\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00405367\nJMP 0x0040538a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040538a\nTEST BPL,BPL\nJZ 0x00405385\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004053a0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1313
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 33 0d 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1314
S'.text:0000000000405330\n.text:0000000000405331\n.text:0000000000405333\n.text:0000000000405335\n.text:0000000000405337\n.text:0000000000405338\n.text:000000000040533b\n.text:000000000040533e\n.text:0000000000405341\n.text:0000000000405343\n.text:0000000000405346\n.text:0000000000405348\n.text:000000000040534d\n.text:0000000000405351\n.text:0000000000405353\n.text:0000000000405355\n.text:0000000000405358\n.text:000000000040535a\n.text:000000000040535c\n.text:000000000040535e\n.text:0000000000405360\n.text:0000000000405362\n.text:0000000000405365\n.text:0000000000405367\n.text:000000000040536a\n.text:000000000040536c\n.text:0000000000405370\n.text:0000000000405374\n.text:0000000000405378\n.text:000000000040537b\n.text:000000000040537c\n.text:000000000040537e\n.text:0000000000405380\n.text:0000000000405382\n.text:0000000000405383\n.text:0000000000405385\n.text:000000000040538a\n.text:000000000040538b\n.text:000000000040538d\n.text:000000000040538f\n.text:0000000000405391\n.text:0000000000405392\n'
p1315
tp1316
sS'register_tm_clones'
p1317
(S'\n__stdcall register_tm_clones()\n'
p1318
V\u000a/* WARNING: Removing unreachable block (ram,0x00401773) */\u000a/* WARNING: Removing unreachable block (ram,0x0040177d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1319
S'MOV ESI,0x60b260\nPUSH RBP\nSUB RSI,0x60b260\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401788\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401788\nPOP RBP\nMOV EDI,0x60b260\nJMP RAX\nPOP RBP\nRET\n'
p1320
S'be 60 b2 60 00\n55\n48 81 ee 60 b2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 60 b2 60 00\nff e0\n5d\nc3\n'
p1321
S'.text:0000000000401750\n.text:0000000000401755\n.text:0000000000401756\n.text:000000000040175d\n.text:0000000000401761\n.text:0000000000401764\n.text:0000000000401767\n.text:000000000040176b\n.text:000000000040176e\n.text:0000000000401771\n.text:0000000000401773\n.text:0000000000401778\n.text:000000000040177b\n.text:000000000040177d\n.text:000000000040177e\n.text:0000000000401783\n.text:0000000000401788\n.text:0000000000401789\n'
p1322
tp1323
sS'c_islower'
p1324
(S'\n__stdcall c_islower()\n'
p1325
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1326
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1327
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1328
S'.text:0000000000406020\n.text:0000000000406023\n.text:0000000000406026\n.text:0000000000406029\n'
p1329
tp1330
sS'make_printable_char'
p1331
(S'\n__stdcall make_printable_char()\n'
p1332
V\u000achar * make_printable_char(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  ushort **ppuVar2;\u000a  ulong in_RDI;\u000a  \u000a  pcVar1 = (char *)xmalloc(5);\u000a  ppuVar2 = __ctype_b_loc();\u000a  if ((*(byte *)((long)*ppuVar2 + (in_RDI & 0xffffffff) * 2 + 1) & 0x40) == 0) {\u000a    __sprintf_chk(pcVar1,1,0xffffffffffffffff,"\u005c\u005c%03o",in_RDI & 0xff);\u000a  }\u000a  else {\u000a    *pcVar1 = (char)(in_RDI & 0xffffffff);\u000a    pcVar1[1] = 0;\u000a  }\u000a  return pcVar1;\u000a}\u000a\u000a
p1333
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nMOV EDI,0x5\nCALL 0x00405a90\nMOV R14,RAX\nCALL 0x004016c0\nMOV RAX,qword ptr [RAX]\nTEST byte ptr [RAX + RBX*0x2 + 0x1],0x40\nJNZ 0x00403483\nMOVZX R8D,BL\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x407c76\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x004016d0\nJMP 0x0040348b\nMOV byte ptr [R14],BL\nMOV byte ptr [R14 + 0x1],0x0\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1334
S'41 56\n53\n50\n89 fb\nbf 05 00 00 00\ne8 40 26 00 00\n49 89 c6\ne8 68 e2 ff ff\n48 8b 00\nf6 44 58 01 40\n75 21\n44 0f b6 c3\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 76 7c 40 00\n31 c0\n4c 89 f7\ne8 4f e2 ff ff\neb 08\n41 88 1e\n41 c6 46 01 00\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1335
S'.text:0000000000403440\n.text:0000000000403442\n.text:0000000000403443\n.text:0000000000403444\n.text:0000000000403446\n.text:000000000040344b\n.text:0000000000403450\n.text:0000000000403453\n.text:0000000000403458\n.text:000000000040345b\n.text:0000000000403460\n.text:0000000000403462\n.text:0000000000403466\n.text:000000000040346b\n.text:0000000000403472\n.text:0000000000403477\n.text:0000000000403479\n.text:000000000040347c\n.text:0000000000403481\n.text:0000000000403483\n.text:0000000000403486\n.text:000000000040348b\n.text:000000000040348e\n.text:0000000000403492\n.text:0000000000403493\n.text:0000000000403495\n'
p1336
tp1337
sS'fwrite'
p1338
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1339
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060b1b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1340
S'JMP qword ptr [0x0060b1b8]\n'
p1341
S'ff 25 32 9b 20 00\n'
p1342
S'.plt:0000000000401680\n'
p1343
tp1344
sS'get_next'
p1345
(S'\n__stdcall get_next(Spec_list * s, Upper_Lower_class * class)\n'
p1346
V\u000aint get_next(Spec_list *s,Upper_Lower_class *class)\u000a\u000a{\u000a  byte bVar1;\u000a  List_element *pLVar2;\u000a  uint uVar3;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  count cVar6;\u000a  count cVar7;\u000a  uint uVar8;\u000a  int iVar9;\u000a  ulong uVar10;\u000a  \u000ajoined_r0x004026d1:\u000a  if (class != (Upper_Lower_class *)0x0) {\u000a    *class = UL_NONE;\u000a  }\u000a  if (s->state == 0xfffffffffffffffe) {\u000a    s->tail = s->head->next;\u000a    s->state = 0xffffffffffffffff;\u000a  }\u000a  pLVar2 = s->tail;\u000a  if (pLVar2 == (List_element *)0x0) {\u000a    return -1;\u000a  }\u000a  switch(pLVar2->type) {\u000a  case RE_NORMAL_CHAR:\u000a  case RE_EQUIV_CLASS:\u000a    bVar1 = pLVar2->u[0];\u000a    s->state = 0xffffffffffffffff;\u000a    s->tail = pLVar2->next;\u000a    return (uint)bVar1;\u000a  case RE_RANGE:\u000a    if (s->state == 0xffffffffffffffff) {\u000a      uVar10 = (ulong)pLVar2->u[0];\u000a    }\u000a    else {\u000a      uVar10 = s->state + 1;\u000a    }\u000a    s->state = uVar10;\u000a    uVar3 = (uint)uVar10;\u000a    if (uVar10 != (ulong)pLVar2->u[1]) {\u000a      return (uint)uVar10;\u000a    }\u000a    goto LAB_004027d6;\u000a  case RE_CHAR_CLASS:\u000a    if (class == (Upper_Lower_class *)0x0) {\u000aLAB_004027f1:\u000a      cVar7 = s->state;\u000a    }\u000a    else {\u000a      if (*(int *)pLVar2->u == 10) {\u000a        *class = UL_UPPER;\u000a        goto LAB_004027f1;\u000a      }\u000a      if (*(int *)pLVar2->u != 6) goto LAB_004027f1;\u000a      *class = UL_LOWER;\u000a      cVar7 = s->state;\u000a    }\u000a    if (cVar7 == 0xffffffffffffffff) {\u000a      cVar7 = 0;\u000a      while (_Var4 = is_char_class_member(), _Var4 == false) {\u000a        cVar7 = cVar7 + 1;\u000a        if (0xff < (int)cVar7) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("i < N_CHARS","src/tr.c",0x449,\u000a                        "int get_next(struct Spec_list *, enum Upper_Lower_class *)");\u000a        }\u000a      }\u000a      s->state = cVar7;\u000a    }\u000a    iVar9 = (int)s->state;\u000a    _Var4 = is_char_class_member();\u000a    if (_Var4 == false) {\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("is_char_class_member (p->u.char_class, s->state)","src/tr.c",0x44c,\u000a                    "int get_next(struct Spec_list *, enum Upper_Lower_class *)");\u000a    }\u000a    iVar5 = iVar9 + 1;\u000a    if (iVar5 < 0x100) {\u000a      cVar7 = SEXT48(iVar5);\u000a      do {\u000a        _Var4 = is_char_class_member();\u000a        if (_Var4 != false) goto LAB_0040288a;\u000a        cVar7 = cVar7 + 1;\u000a      } while ((int)cVar7 < 0x100);\u000a    }\u000a    s->tail = pLVar2->next;\u000a    cVar7 = 0xffffffffffffffff;\u000aLAB_0040288a:\u000a    s->state = cVar7;\u000a    return iVar9;\u000a  case RE_REPEATED_CHAR:\u000a    break;\u000a  default:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  cVar7 = *(count *)(pLVar2->u + 8);\u000a  if (cVar7 != 0) {\u000a    if (s->state == 0xffffffffffffffff) {\u000a      s->state = 0;\u000a    }\u000a    cVar6 = s->state + 1;\u000a    s->state = cVar6;\u000a    uVar8 = (uint)pLVar2->u[0];\u000a    uVar3 = (uint)pLVar2->u[0];\u000a    if (cVar6 == cVar7) {\u000aLAB_004027d6:\u000a      uVar8 = uVar3;\u000a      s->tail = pLVar2->next;\u000a      s->state = 0xffffffffffffffff;\u000a    }\u000a    return (int)uVar8;\u000a  }\u000a  s->tail = pLVar2->next;\u000a  s->state = 0xffffffffffffffff;\u000a  goto joined_r0x004026d1;\u000a}\u000a\u000a
p1347
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDI\nTEST RSI,RSI\nJNZ 0x00402700\nJMP 0x00402706\nMOV RAX,qword ptr [R13 + 0x8]\nMOV qword ptr [R15 + 0x8],RAX\nMOV qword ptr [R15 + 0x10],-0x1\nTEST RSI,RSI\nJZ 0x00402706\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV dword ptr [RSI],0x2\nCMP qword ptr [R15 + 0x10],-0x2\nJNZ 0x00402720\nMOV RAX,qword ptr [R15]\nMOV RAX,qword ptr [RAX + 0x8]\nMOV qword ptr [R15 + 0x8],RAX\nMOV qword ptr [R15 + 0x10],-0x1\nMOV R13,qword ptr [R15 + 0x8]\nTEST R13,R13\nJZ 0x004028a0\nMOV EAX,dword ptr [R13]\nCMP RAX,0x4\nJA 0x004028a8\nJMP qword ptr [0x406810 + RAX*0x8]\nMOV RAX,qword ptr [R13 + 0x18]\nTEST RAX,RAX\nJZ 0x004026e0\nCMP qword ptr [R15 + 0x10],-0x1\nJNZ 0x0040275a\nMOV qword ptr [R15 + 0x10],0x0\nMOV RCX,qword ptr [R15 + 0x10]\nINC RCX\nMOV qword ptr [R15 + 0x10],RCX\nMOVZX R14D,byte ptr [R13 + 0x10]\nCMP RCX,RAX\nJZ 0x004027d6\nJMP 0x0040288e\nMOVZX R14D,byte ptr [R13 + 0x10]\nMOV qword ptr [R15 + 0x10],-0x1\nMOV RAX,qword ptr [R13 + 0x8]\nMOV qword ptr [R15 + 0x8],RAX\nJMP 0x0040288e\nMOV R14,qword ptr [R15 + 0x10]\nCMP R14,-0x1\nJZ 0x004027bf\nINC R14\nJMP 0x004027c4\nTEST RSI,RSI\nJZ 0x004027f1\nMOV EAX,dword ptr [R13 + 0x10]\nCMP EAX,0xa\nJZ 0x004027eb\nCMP EAX,0x6\nJNZ 0x004027f1\nMOV dword ptr [RSI],0x0\nCMP qword ptr [R15 + 0x10],-0x1\nJNZ 0x00402836\nJMP 0x004027f8\nMOVZX R14D,byte ptr [R13 + 0x10]\nMOV qword ptr [R15 + 0x10],R14\nMOVZX EAX,byte ptr [R13 + 0x11]\nCMP R14,RAX\nJNZ 0x0040288e\nMOV RAX,qword ptr [R13 + 0x8]\nMOV qword ptr [R15 + 0x8],RAX\nMOV qword ptr [R15 + 0x10],-0x1\nJMP 0x0040288e\nMOV dword ptr [RSI],0x1\nCMP qword ptr [R15 + 0x10],-0x1\nJNZ 0x00402836\nMOV EBP,dword ptr [R13 + 0x10]\nXOR EBX,EBX\nNOP\nMOVZX ESI,BL\nMOV EDI,EBP\nCALL 0x00403a80\nTEST AL,AL\nJNZ 0x00402832\nINC RBX\nCMP EBX,0x100\nJL 0x00402800\nMOV EDI,0x408242\nMOV ESI,0x4078a2\nMOV EDX,0x449\nMOV ECX,0x40824e\nCALL 0x004014a0\nMOV qword ptr [R15 + 0x10],RBX\nMOV R12D,dword ptr [R13 + 0x10]\nMOV R14,qword ptr [R15 + 0x10]\nMOVZX ESI,R14B\nMOV EDI,R12D\nCALL 0x00403a80\nTEST AL,AL\nJZ 0x004028ad\nLEA EAX,[R14 + 0x1]\nCMP EAX,0xff\nJG 0x0040287b\nMOVSXD RBP,EAX\nNOP dword ptr [RAX]\nMOVZX ESI,BPL\nMOV EDI,R12D\nCALL 0x00403a80\nTEST AL,AL\nJNZ 0x0040288a\nINC RBP\nCMP EBP,0x100\nJL 0x00402860\nMOV RAX,qword ptr [R13 + 0x8]\nMOV qword ptr [R15 + 0x8],RAX\nMOV RBP,-0x1\nMOV qword ptr [R15 + 0x10],RBP\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R14D,0xffffffff\nJMP 0x0040288e\nCALL 0x00401360\nMOV EDI,0x408289\nMOV ESI,0x4078a2\nMOV EDX,0x44c\nMOV ECX,0x40824e\nCALL 0x004014a0\n'
p1348
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ff\n48 85 f6\n75 2d\neb 31\n49 8b 45 08\n49 89 47 08\n49 c7 47 10 ff ff ff ff\n48 85 f6\n74 11\n66 66 2e 0f 1f 84 00 00 00 00 00\nc7 06 02 00 00 00\n49 83 7f 10 fe\n75 13\n49 8b 07\n48 8b 40 08\n49 89 47 08\n49 c7 47 10 ff ff ff ff\n4d 8b 6f 08\n4d 85 ed\n0f 84 73 01 00 00\n41 8b 45 00\n48 83 f8 04\n0f 87 6d 01 00 00\nff 24 c5 10 68 40 00\n49 8b 45 18\n48 85 c0\n74 95\n49 83 7f 10 ff\n75 08\n49 c7 47 10 00 00 00 00\n49 8b 4f 10\n48 ff c1\n49 89 4f 10\n45 0f b6 75 10\n48 39 c1\n74 67\ne9 1a 01 00 00\n45 0f b6 75 10\n49 c7 47 10 ff ff ff ff\n49 8b 45 08\n49 89 47 08\ne9 00 01 00 00\n4d 8b 77 10\n49 83 fe ff\n74 27\n49 ff c6\neb 27\n48 85 f6\n74 4f\n41 8b 45 10\n83 f8 0a\n74 40\n83 f8 06\n75 41\nc7 06 00 00 00 00\n49 83 7f 10 ff\n75 79\neb 39\n45 0f b6 75 10\n4d 89 77 10\n41 0f b6 45 11\n49 39 c6\n0f 85 b8 00 00 00\n49 8b 45 08\n49 89 47 08\n49 c7 47 10 ff ff ff ff\ne9 a3 00 00 00\nc7 06 01 00 00 00\n49 83 7f 10 ff\n75 3e\n41 8b 6d 10\n31 db\n66 90\n0f b6 f3\n89 ef\ne8 76 12 00 00\n84 c0\n75 24\n48 ff c3\n81 fb 00 01 00 00\n7c e7\nbf 42 82 40 00\nbe a2 78 40 00\nba 49 04 00 00\nb9 4e 82 40 00\ne8 6e ec ff ff\n49 89 5f 10\n45 8b 65 10\n4d 8b 77 10\n41 0f b6 f6\n44 89 e7\ne8 36 12 00 00\n84 c0\n74 5f\n41 8d 46 01\n3d ff 00 00 00\n7f 22\n48 63 e8\n0f 1f 40 00\n40 0f b6 f5\n44 89 e7\ne8 14 12 00 00\n84 c0\n75 1a\n48 ff c5\n81 fd 00 01 00 00\n7c e5\n49 8b 45 08\n49 89 47 08\n48 c7 c5 ff ff ff ff\n49 89 6f 10\n44 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n41 be ff ff ff ff\neb e6\ne8 b3 ea ff ff\nbf 89 82 40 00\nbe a2 78 40 00\nba 4c 04 00 00\nb9 4e 82 40 00\ne8 da eb ff ff\n'
p1349
S'.text:00000000004026c0\n.text:00000000004026c1\n.text:00000000004026c3\n.text:00000000004026c5\n.text:00000000004026c7\n.text:00000000004026c9\n.text:00000000004026ca\n.text:00000000004026cb\n.text:00000000004026ce\n.text:00000000004026d1\n.text:00000000004026d3\n.text:00000000004026e0\n.text:00000000004026e4\n.text:00000000004026e8\n.text:00000000004026f0\n.text:00000000004026f3\n.text:00000000004026f5\n.text:0000000000402700\n.text:0000000000402706\n.text:000000000040270b\n.text:000000000040270d\n.text:0000000000402710\n.text:0000000000402714\n.text:0000000000402718\n.text:0000000000402720\n.text:0000000000402724\n.text:0000000000402727\n.text:000000000040272d\n.text:0000000000402731\n.text:0000000000402735\n.text:000000000040273b\n.text:0000000000402742\n.text:0000000000402746\n.text:0000000000402749\n.text:000000000040274b\n.text:0000000000402750\n.text:0000000000402752\n.text:000000000040275a\n.text:000000000040275e\n.text:0000000000402761\n.text:0000000000402765\n.text:000000000040276a\n.text:000000000040276d\n.text:000000000040276f\n.text:0000000000402774\n.text:0000000000402779\n.text:0000000000402781\n.text:0000000000402785\n.text:0000000000402789\n.text:000000000040278e\n.text:0000000000402792\n.text:0000000000402796\n.text:0000000000402798\n.text:000000000040279b\n.text:000000000040279d\n.text:00000000004027a0\n.text:00000000004027a2\n.text:00000000004027a6\n.text:00000000004027a9\n.text:00000000004027ab\n.text:00000000004027ae\n.text:00000000004027b0\n.text:00000000004027b6\n.text:00000000004027bb\n.text:00000000004027bd\n.text:00000000004027bf\n.text:00000000004027c4\n.text:00000000004027c8\n.text:00000000004027cd\n.text:00000000004027d0\n.text:00000000004027d6\n.text:00000000004027da\n.text:00000000004027de\n.text:00000000004027e6\n.text:00000000004027eb\n.text:00000000004027f1\n.text:00000000004027f6\n.text:00000000004027f8\n.text:00000000004027fc\n.text:00000000004027fe\n.text:0000000000402800\n.text:0000000000402803\n.text:0000000000402805\n.text:000000000040280a\n.text:000000000040280c\n.text:000000000040280e\n.text:0000000000402811\n.text:0000000000402817\n.text:0000000000402819\n.text:000000000040281e\n.text:0000000000402823\n.text:0000000000402828\n.text:000000000040282d\n.text:0000000000402832\n.text:0000000000402836\n.text:000000000040283a\n.text:000000000040283e\n.text:0000000000402842\n.text:0000000000402845\n.text:000000000040284a\n.text:000000000040284c\n.text:000000000040284e\n.text:0000000000402852\n.text:0000000000402857\n.text:0000000000402859\n.text:000000000040285c\n.text:0000000000402860\n.text:0000000000402864\n.text:0000000000402867\n.text:000000000040286c\n.text:000000000040286e\n.text:0000000000402870\n.text:0000000000402873\n.text:0000000000402879\n.text:000000000040287b\n.text:000000000040287f\n.text:0000000000402883\n.text:000000000040288a\n.text:000000000040288e\n.text:0000000000402891\n.text:0000000000402895\n.text:0000000000402896\n.text:0000000000402898\n.text:000000000040289a\n.text:000000000040289c\n.text:000000000040289e\n.text:000000000040289f\n.text:00000000004028a0\n.text:00000000004028a6\n.text:00000000004028a8\n.text:00000000004028ad\n.text:00000000004028b2\n.text:00000000004028b7\n.text:00000000004028bc\n.text:00000000004028c1\n'
p1350
tp1351
sS'__do_global_dtors_aux'
p1352
(S'\n__stdcall __do_global_dtors_aux()\n'
p1353
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1354
S'CMP byte ptr [0x0060b2a8],0x0\nJNZ 0x004017aa\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401710\nPOP RBP\nMOV byte ptr [0x0060b2a8],0x1\nRET\n'
p1355
S'80 3d 11 9b 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 fe 9a 20 00 01\nf3 c3\n'
p1356
S'.text:0000000000401790\n.text:0000000000401797\n.text:0000000000401799\n.text:000000000040179a\n.text:000000000040179d\n.text:00000000004017a2\n.text:00000000004017a3\n.text:00000000004017aa\n'
p1357
tp1358
sS'c_isprint'
p1359
(S'\n__stdcall c_isprint()\n'
p1360
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1361
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1362
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1363
S'.text:0000000000406030\n.text:0000000000406033\n.text:0000000000406036\n.text:0000000000406039\n'
p1364
tp1365
sS'_fini'
p1366
(S'\n__stdcall _fini()\n'
p1367
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1368
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1369
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1370
S'.fini:000000000040665c\n.fini:0000000000406660\n.fini:0000000000406664\n'
p1371
tp1372
sS'squeeze_filter'
p1373
(S'\n__stdcall squeeze_filter()\n'
p1374
V\u000avoid squeeze_filter(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  byte bVar4;\u000a  ulong uVar5;\u000a  size_t sVar6;\u000a  uint *puVar7;\u000a  undefined8 uVar8;\u000a  ulong uVar9;\u000a  ulong uVar10;\u000a  int iVar11;\u000a  size_t __n;\u000a  \u000a  iVar11 = 0x7fffffff;\u000a  uVar9 = 0;\u000a  uVar5 = 0;\u000aLAB_00402400:\u000a  uVar10 = uVar9;\u000a  if (uVar5 <= uVar9) {\u000a    uVar5 = FUN_00402415(io_buf,0x2000);\u000a    if (uVar5 == 0) {\u000a      return;\u000a    }\u000a    uVar10 = 0;\u000a  }\u000a  uVar9 = uVar10;\u000a  iVar3 = iVar11;\u000a  if (iVar11 == 0x7fffffff) goto code_r0x00402431;\u000a  goto joined_r0x0040253f;\u000acode_r0x00402431:\u000a  __n = uVar5 - uVar10;\u000a  uVar9 = uVar10;\u000a  if (uVar10 <= uVar5 && __n != 0) {\u000a    do {\u000a      bVar4 = to_uchar();\u000a      if (in_squeeze_set[(ulong)bVar4] != false) break;\u000a      uVar9 = uVar9 + 2;\u000a    } while (uVar9 < uVar5);\u000a  }\u000a  if (uVar9 == uVar5) {\u000a    bVar4 = to_uchar();\u000a    if (in_squeeze_set[(ulong)bVar4] != false) {\u000a      uVar9 = uVar9 - 1;\u000a    }\u000a  }\u000a  iVar3 = iVar11;\u000a  if (uVar9 < uVar5) {\u000a    pcVar1 = io_buf + uVar9;\u000a    __n = (uVar9 - uVar10) + 1;\u000a    if ((uVar9 != 0) && (in_squeeze_set[uVar9 + 0xff] == (_Bool)*pcVar1)) {\u000a      __n = uVar9 - uVar10;\u000a    }\u000a    uVar9 = uVar9 + 1;\u000a    iVar3 = (int)*pcVar1;\u000a  }\u000a  if ((__n != 0) && (sVar6 = fwrite_unlocked(io_buf + uVar10,1,__n,stdout), sVar6 != __n)) {\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar2 = *puVar7;\u000a    uVar8 = dcgettext(0,"write error",5);\u000a    error(1,(ulong)uVar2,uVar8,uVar8);\u000a  }\u000a  iVar11 = 0x7fffffff;\u000a  if (iVar3 != 0x7fffffff) {\u000ajoined_r0x0040253f:\u000a    while (iVar11 = iVar3, uVar9 < uVar5) {\u000a      if ((int)io_buf[uVar9] != iVar11) {\u000a        iVar11 = 0x7fffffff;\u000a        break;\u000a      }\u000a      uVar9 = uVar9 + 1;\u000a      iVar3 = iVar11;\u000a    }\u000a  }\u000a  goto LAB_00402400;\u000a}\u000a\u000a
p1375
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV qword ptr [RSP],RDI\nMOV R14D,0x7fffffff\nXOR EBP,EBP\nXOR EBX,EBX\nJMP 0x00402400\n'
p1376
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 3c 24\n41 be ff ff ff 7f\n31 ed\n31 db\neb 15\n'
p1377
S'.text:00000000004023d0\n.text:00000000004023d1\n.text:00000000004023d3\n.text:00000000004023d5\n.text:00000000004023d7\n.text:00000000004023d9\n.text:00000000004023da\n.text:00000000004023db\n.text:00000000004023df\n.text:00000000004023e5\n.text:00000000004023e7\n.text:00000000004023e9\n'
p1378
tp1379
sS'__fpending'
p1380
(S'\n__stdcall __fpending()\n'
p1381
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060b050)();\u000a  return;\u000a}\u000a\u000a
p1382
S'JMP qword ptr [0x0060b050]\n'
p1383
S'ff 25 9a 9c 20 00\n'
p1384
S'.plt:00000000004013b0\n'
p1385
tp1386
s.