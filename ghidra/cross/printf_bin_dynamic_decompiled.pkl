(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x608e08]\nPUSH RBP\nLEA RBP,[0x608e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401298\nTEST RBP,RBP\nJZ 0x00405636\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00405620\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 16 38 20 00\n55\n48 8d 2d 16 38 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 87 bc ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:00000000004055e0\n.text:00000000004055e2\n.text:00000000004055e4\n.text:00000000004055e7\n.text:00000000004055e9\n.text:00000000004055eb\n.text:00000000004055f2\n.text:00000000004055f3\n.text:00000000004055fa\n.text:00000000004055fb\n.text:00000000004055fe\n.text:0000000000405601\n.text:0000000000405604\n.text:0000000000405608\n.text:000000000040560c\n.text:0000000000405611\n.text:0000000000405614\n.text:0000000000405616\n.text:0000000000405618\n.text:0000000000405620\n.text:0000000000405623\n.text:0000000000405626\n.text:0000000000405629\n.text:000000000040562d\n.text:0000000000405631\n.text:0000000000405634\n.text:0000000000405636\n.text:000000000040563a\n.text:000000000040563b\n.text:000000000040563c\n.text:000000000040563e\n.text:0000000000405640\n.text:0000000000405642\n.text:0000000000405644\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00609150)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x00609150]\n'
p11
S'ff 25 1a 7c 20 00\n'
p12
S'.plt:0000000000401530\n'
p13
tp14
sS'c_isdigit'
p15
(S'\n__stdcall c_isdigit()\n'
p16
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p17
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p18
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p19
S'.text:0000000000405030\n.text:0000000000405033\n.text:0000000000405036\n.text:0000000000405039\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_00406a73,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x404817;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x404898;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40492c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x004046a8\nMOV EDX,0x406a60\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401600\nJMP 0x004046bd\nMOV EDX,0x406a6c\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401600\nXOR EDI,EDI\nMOV ESI,0x406a73\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x406d40\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401600\nXOR EDI,EDI\nMOV ESI,0x406a77\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401490\nCMP R12,0x9\nJA 0x00404746\nJMP qword ptr [0x406a10 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x406b42\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401600\nXOR EDI,EDI\nMOV ESI,0x406c81\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401600\nADD RSP,0x38\nJMP 0x004049b7\nXOR EDI,EDI\nMOV ESI,0x406b52\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401600\nXOR EDI,EDI\nMOV ESI,0x406b69\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401600\nXOR EDI,EDI\nMOV ESI,0x406b85\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401600\nADD RSP,0x18\nJMP 0x004049b7\nXOR EDI,EDI\nMOV ESI,0x406ba5\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401600\nADD RSP,0x18\nJMP 0x004049b7\nXOR EDI,EDI\nMOV ESI,0x406bc9\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401600\nADD RSP,0x28\nJMP 0x004049b7\nXOR EDI,EDI\nMOV ESI,0x406bf1\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401600\nADD RSP,0x28\nJMP 0x004049b7\nXOR EDI,EDI\nMOV ESI,0x406c1d\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401600\nADD RSP,0x38\nJMP 0x004049b7\nXOR EDI,EDI\nMOV ESI,0x406c4d\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401600\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401310\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 60 6a 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 5a cf ff ff\neb 15\nba 6c 6a 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 43 cf ff ff\n31 ff\nbe 73 6a 40 00\nba 05 00 00 00\ne8 02 cd ff ff\n48 89 c1\nbe 01 00 00 00\nba 40 6d 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 15 cf ff ff\n31 ff\nbe 77 6a 40 00\nba 05 00 00 00\ne8 d4 cc ff ff\n48 89 c7\n4c 89 f6\ne8 89 cd ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 10 6a 40 00\n31 ff\nbe 42 6b 40 00\nba 05 00 00 00\ne8 aa cc ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 ba ce ff ff\n31 ff\nbe 81 6c 40 00\nba 05 00 00 00\ne8 79 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 71 ce ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 52 6b 40 00\nba 05 00 00 00\ne8 27 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 33 ce ff ff\n31 ff\nbe 69 6b 40 00\nba 05 00 00 00\ne8 f2 cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 fa cd ff ff\n31 ff\nbe 85 6b 40 00\nba 05 00 00 00\ne8 b9 cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 c4 cd ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe a5 6b 40 00\nba 05 00 00 00\ne8 7a cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 82 cd ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe c9 6b 40 00\nba 05 00 00 00\ne8 38 cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 38 cd ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe f1 6b 40 00\nba 05 00 00 00\ne8 ee ca ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 ee cc ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 1d 6c 40 00\nba 05 00 00 00\ne8 a4 ca ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 9c cc ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 4d 6c 40 00\nba 05 00 00 00\ne8 55 ca ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 4d cc ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 4c c9 ff ff\n'
p26
S'.text:0000000000404670\n.text:0000000000404672\n.text:0000000000404674\n.text:0000000000404676\n.text:0000000000404677\n.text:0000000000404678\n.text:000000000040467b\n.text:000000000040467e\n.text:0000000000404681\n.text:0000000000404684\n.text:0000000000404687\n.text:000000000040468a\n.text:000000000040468f\n.text:0000000000404692\n.text:0000000000404694\n.text:0000000000404699\n.text:000000000040469b\n.text:000000000040469e\n.text:00000000004046a1\n.text:00000000004046a6\n.text:00000000004046a8\n.text:00000000004046ad\n.text:00000000004046af\n.text:00000000004046b2\n.text:00000000004046b5\n.text:00000000004046b8\n.text:00000000004046bd\n.text:00000000004046bf\n.text:00000000004046c4\n.text:00000000004046c9\n.text:00000000004046ce\n.text:00000000004046d1\n.text:00000000004046d6\n.text:00000000004046db\n.text:00000000004046e1\n.text:00000000004046e3\n.text:00000000004046e6\n.text:00000000004046eb\n.text:00000000004046ed\n.text:00000000004046f2\n.text:00000000004046f7\n.text:00000000004046fc\n.text:00000000004046ff\n.text:0000000000404702\n.text:0000000000404707\n.text:000000000040470b\n.text:000000000040470d\n.text:0000000000404715\n.text:0000000000404717\n.text:000000000040471c\n.text:0000000000404721\n.text:0000000000404726\n.text:0000000000404729\n.text:000000000040472c\n.text:0000000000404731\n.text:0000000000404733\n.text:0000000000404736\n.text:000000000040473a\n.text:000000000040473b\n.text:000000000040473d\n.text:000000000040473f\n.text:0000000000404741\n.text:0000000000404746\n.text:0000000000404748\n.text:000000000040474d\n.text:0000000000404752\n.text:0000000000404757\n.text:000000000040475a\n.text:000000000040475d\n.text:0000000000404761\n.text:0000000000404765\n.text:000000000040476a\n.text:000000000040476f\n.text:0000000000404772\n.text:0000000000404776\n.text:000000000040477a\n.text:000000000040477e\n.text:0000000000404782\n.text:0000000000404786\n.text:000000000040478a\n.text:000000000040478f\n.text:0000000000404793\n.text:0000000000404798\n.text:000000000040479a\n.text:000000000040479f\n.text:00000000004047a4\n.text:00000000004047a9\n.text:00000000004047ac\n.text:00000000004047af\n.text:00000000004047b3\n.text:00000000004047b8\n.text:00000000004047ba\n.text:00000000004047bd\n.text:00000000004047c1\n.text:00000000004047c2\n.text:00000000004047c4\n.text:00000000004047c6\n.text:00000000004047c8\n.text:00000000004047cd\n.text:00000000004047cf\n.text:00000000004047d4\n.text:00000000004047d9\n.text:00000000004047de\n.text:00000000004047e1\n.text:00000000004047e4\n.text:00000000004047e8\n.text:00000000004047ec\n.text:00000000004047f1\n.text:00000000004047f3\n.text:00000000004047f6\n.text:00000000004047fa\n.text:00000000004047fb\n.text:00000000004047fd\n.text:00000000004047ff\n.text:0000000000404801\n.text:0000000000404806\n.text:0000000000404808\n.text:000000000040480d\n.text:0000000000404812\n.text:0000000000404817\n.text:000000000040481a\n.text:000000000040481d\n.text:0000000000404821\n.text:0000000000404825\n.text:0000000000404829\n.text:000000000040482e\n.text:0000000000404830\n.text:0000000000404833\n.text:0000000000404837\n.text:000000000040483c\n.text:0000000000404840\n.text:0000000000404845\n.text:0000000000404847\n.text:000000000040484c\n.text:0000000000404851\n.text:0000000000404856\n.text:0000000000404859\n.text:000000000040485c\n.text:0000000000404860\n.text:0000000000404864\n.text:0000000000404869\n.text:000000000040486e\n.text:0000000000404871\n.text:0000000000404875\n.text:0000000000404879\n.text:000000000040487e\n.text:0000000000404882\n.text:0000000000404887\n.text:0000000000404889\n.text:000000000040488e\n.text:0000000000404893\n.text:0000000000404898\n.text:000000000040489b\n.text:000000000040489e\n.text:00000000004048a2\n.text:00000000004048a6\n.text:00000000004048aa\n.text:00000000004048af\n.text:00000000004048b4\n.text:00000000004048b7\n.text:00000000004048bb\n.text:00000000004048bf\n.text:00000000004048c3\n.text:00000000004048c8\n.text:00000000004048cc\n.text:00000000004048d1\n.text:00000000004048d3\n.text:00000000004048d8\n.text:00000000004048dd\n.text:00000000004048e2\n.text:00000000004048e5\n.text:00000000004048e8\n.text:00000000004048ec\n.text:00000000004048f0\n.text:00000000004048f5\n.text:00000000004048fa\n.text:00000000004048fd\n.text:0000000000404901\n.text:0000000000404905\n.text:0000000000404909\n.text:000000000040490d\n.text:0000000000404912\n.text:0000000000404916\n.text:000000000040491b\n.text:000000000040491d\n.text:0000000000404922\n.text:0000000000404927\n.text:000000000040492c\n.text:000000000040492f\n.text:0000000000404932\n.text:0000000000404936\n.text:000000000040493a\n.text:000000000040493e\n.text:0000000000404943\n.text:0000000000404948\n.text:000000000040494b\n.text:000000000040494f\n.text:0000000000404953\n.text:0000000000404957\n.text:000000000040495b\n.text:000000000040495f\n.text:0000000000404964\n.text:0000000000404968\n.text:000000000040496a\n.text:000000000040496c\n.text:0000000000404971\n.text:0000000000404976\n.text:000000000040497b\n.text:000000000040497e\n.text:0000000000404981\n.text:0000000000404985\n.text:0000000000404989\n.text:000000000040498e\n.text:0000000000404993\n.text:0000000000404996\n.text:000000000040499a\n.text:000000000040499e\n.text:00000000004049a2\n.text:00000000004049a6\n.text:00000000004049aa\n.text:00000000004049ae\n.text:00000000004049b3\n.text:00000000004049b7\n.text:00000000004049b8\n.text:00000000004049ba\n.text:00000000004049bc\n.text:00000000004049be\n.text:00000000004049bf\n'
p27
tp28
sS'usage'
p29
(S'\n__stdcall usage()\n'
p30
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s FORMAT [ARGUMENT]...\u005cn  or:  %s OPTION\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,program_name);\u000a    __s = (char *)dcgettext(0,\u000a                            "Print ARGUMENT(s) according to FORMAT, or execute according to OPTION:\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnFORMAT controls the output as in C printf.  Interpreted sequences are:\u005cn\u005cn  \u005c\u005c\u005c"      double quote\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  \u005c\u005c\u005c\u005c      backslash\u005cn  \u005c\u005ca      alert (BEL)\u005cn  \u005c\u005cb      backspace\u005cn  \u005c\u005cc      produce no further output\u005cn  \u005c\u005ce      escape\u005cn  \u005c\u005cf      form feed\u005cn  \u005c\u005cn      new line\u005cn  \u005c\u005cr      carriage return\u005cn  \u005c\u005ct      horizontal tab\u005cn  \u005c\u005cv      vertical tab\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  \u005c\u005cNNN    byte with octal value NNN (1 to 3 digits)\u005cn  \u005c\u005cxHH    byte with hexadecimal value HH (1 to 2 digits)\u005cn  \u005c\u005cuHHHH  Unicode (ISO/IEC 10646) character with hex value HHHH (4 digits)\u005cn  \u005c\u005cUHHHHHHHH  Unicode character with hex value HHHHHHHH (8 digits)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  %%      a single %\u005cn  %b      ARGUMENT as a string with \u005c'\u005c\u005c\u005c' escapes interpreted,\u005cn          except that octal escapes are of the form \u005c\u005c0 or \u005c\u005c0NNN\u005cn  %q      ARGUMENT is printed in a format that can be reused as shell input,\u005cn          escaping non-printable characters with the proposed POSIX $\u005c'\u005c' syntax.\u005cn\u005cnand all C format specifications ending with one of diouxXfeEgGcs, with\u005cnARGUMENTs converted to proper type first.  Variable widths are handled.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    uVar1 = dcgettext(0,\u000a                      "\u005cnNOTE: your shell may have its own version of %s, which usually supersedes\u005cnthe version described here.  Please refer to your shell\u005c's documentation\u005cnfor details about the options it supports.\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,"printf",uVar1);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p31
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x004018ac\nXOR EDI,EDI\nMOV ESI,0x405ae0\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x006092a8]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nCALL 0x00401580\nXOR EDI,EDI\nMOV ESI,0x405b11\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x00401490\nXOR EDI,EDI\nMOV ESI,0x405b5a\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x00401490\nXOR EDI,EDI\nMOV ESI,0x405b87\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x00401490\nXOR EDI,EDI\nMOV ESI,0x405bbd\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x00401490\nXOR EDI,EDI\nMOV ESI,0x405c1e\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x00401490\nXOR EDI,EDI\nMOV ESI,0x405d03\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x00401490\nXOR EDI,EDI\nMOV ESI,0x405dff\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x00401490\nXOR EDI,EDI\nMOV ESI,0x405fbf\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40607e\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401580\nCALL 0x00401900\nMOV EDI,EBX\nCALL 0x004015e0\nCALL 0x004018c0\nMOV EDI,EBX\nCALL 0x004015e0\n'
p32
S'53\n89 fb\n85 db\n0f 85 41 01 00 00\n31 ff\nbe e0 5a 40 00\nba 05 00 00 00\ne8 54 fc ff ff\n48 89 c1\n48 8b 15 22 7b 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\ne8 e8 fd ff ff\n31 ff\nbe 11 5b 40 00\nba 05 00 00 00\ne8 27 fc ff ff\n48 8b 35 b8 7a 20 00\n48 89 c7\ne8 d8 fc ff ff\n31 ff\nbe 5a 5b 40 00\nba 05 00 00 00\ne8 07 fc ff ff\n48 8b 35 98 7a 20 00\n48 89 c7\ne8 b8 fc ff ff\n31 ff\nbe 87 5b 40 00\nba 05 00 00 00\ne8 e7 fb ff ff\n48 8b 35 78 7a 20 00\n48 89 c7\ne8 98 fc ff ff\n31 ff\nbe bd 5b 40 00\nba 05 00 00 00\ne8 c7 fb ff ff\n48 8b 35 58 7a 20 00\n48 89 c7\ne8 78 fc ff ff\n31 ff\nbe 1e 5c 40 00\nba 05 00 00 00\ne8 a7 fb ff ff\n48 8b 35 38 7a 20 00\n48 89 c7\ne8 58 fc ff ff\n31 ff\nbe 03 5d 40 00\nba 05 00 00 00\ne8 87 fb ff ff\n48 8b 35 18 7a 20 00\n48 89 c7\ne8 38 fc ff ff\n31 ff\nbe ff 5d 40 00\nba 05 00 00 00\ne8 67 fb ff ff\n48 8b 35 f8 79 20 00\n48 89 c7\ne8 18 fc ff ff\n31 ff\nbe bf 5f 40 00\nba 05 00 00 00\ne8 47 fb ff ff\n48 89 c1\nbf 01 00 00 00\nba 7e 60 40 00\n31 c0\n48 89 ce\ne8 e0 fc ff ff\ne8 5b 00 00 00\n89 df\ne8 34 fd ff ff\ne8 0f 00 00 00\n89 df\ne8 28 fd ff ff\n'
p33
S'.text:0000000000401760\n.text:0000000000401761\n.text:0000000000401763\n.text:0000000000401765\n.text:000000000040176b\n.text:000000000040176d\n.text:0000000000401772\n.text:0000000000401777\n.text:000000000040177c\n.text:000000000040177f\n.text:0000000000401786\n.text:000000000040178b\n.text:000000000040178d\n.text:0000000000401790\n.text:0000000000401793\n.text:0000000000401798\n.text:000000000040179a\n.text:000000000040179f\n.text:00000000004017a4\n.text:00000000004017a9\n.text:00000000004017b0\n.text:00000000004017b3\n.text:00000000004017b8\n.text:00000000004017ba\n.text:00000000004017bf\n.text:00000000004017c4\n.text:00000000004017c9\n.text:00000000004017d0\n.text:00000000004017d3\n.text:00000000004017d8\n.text:00000000004017da\n.text:00000000004017df\n.text:00000000004017e4\n.text:00000000004017e9\n.text:00000000004017f0\n.text:00000000004017f3\n.text:00000000004017f8\n.text:00000000004017fa\n.text:00000000004017ff\n.text:0000000000401804\n.text:0000000000401809\n.text:0000000000401810\n.text:0000000000401813\n.text:0000000000401818\n.text:000000000040181a\n.text:000000000040181f\n.text:0000000000401824\n.text:0000000000401829\n.text:0000000000401830\n.text:0000000000401833\n.text:0000000000401838\n.text:000000000040183a\n.text:000000000040183f\n.text:0000000000401844\n.text:0000000000401849\n.text:0000000000401850\n.text:0000000000401853\n.text:0000000000401858\n.text:000000000040185a\n.text:000000000040185f\n.text:0000000000401864\n.text:0000000000401869\n.text:0000000000401870\n.text:0000000000401873\n.text:0000000000401878\n.text:000000000040187a\n.text:000000000040187f\n.text:0000000000401884\n.text:0000000000401889\n.text:000000000040188c\n.text:0000000000401891\n.text:0000000000401896\n.text:0000000000401898\n.text:000000000040189b\n.text:00000000004018a0\n.text:00000000004018a5\n.text:00000000004018a7\n.text:00000000004018ac\n.text:00000000004018b1\n.text:00000000004018b3\n'
p34
tp35
sS'vstrtold'
p36
(S'\n__stdcall vstrtold(char * s)\n'
p37
V\u000alongdouble vstrtold(char *s)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  int *piVar2;\u000a  undefined in_XMM0 [16];\u000a  undefined extraout_XMM0 [16];\u000a  longdouble val;\u000a  char *local_10;\u000a  \u000a  if (((*s == '\u005c'') || (*s == '\u005c"')) && (s[1] != 0)) {\u000a    if ((s[2] != 0) && (posixly_correct == false)) {\u000a      uVar1 = dcgettext(0,"warning: %s: character(s) following character constant have been ignored"\u000a                        ,5);\u000a      in_XMM0 = error(0,0,uVar1,s + 2);\u000a    }\u000a  }\u000a  else {\u000a    piVar2 = __errno_location();\u000a    *piVar2 = 0;\u000a    c_strtold(s,&local_10);\u000a    verify_numeric(s,local_10);\u000a    in_XMM0 = extraout_XMM0;\u000a  }\u000a  return (longdouble)in_XMM0;\u000a}\u000a\u000a
p38
S'PUSH RBX\nSUB RSP,0x20\nMOV RBX,RDI\nMOV AL,byte ptr [RBX]\nCMP AL,0x27\nJZ 0x004027b2\nCMP AL,0x22\nJNZ 0x00402803\nMOV AL,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x00402803\nMOVZX EAX,AL\nMOV dword ptr [RSP + 0x8],EAX\nFILD dword ptr [RSP + 0x8]\nCMP byte ptr [RBX + 0x2],0x0\nJZ 0x00402830\nMOV AL,byte ptr [0x0060928d]\nTEST AL,AL\nJNZ 0x00402830\nADD RBX,0x2\nXOR EDI,EDI\nMOV ESI,0x4062d8\nMOV EDX,0x5\nFSTP tword ptr [RSP + 0xc]\nCALL 0x004013d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00401590\nJMP 0x0040282c\nCALL 0x00401320\nMOV dword ptr [RAX],0x0\nLEA RSI,[RSP + 0x18]\nMOV RDI,RBX\nCALL 0x004028c0\nFSTP tword ptr [RSP + 0xc]\nMOV RSI,qword ptr [RSP + 0x18]\nMOV RDI,RBX\nCALL 0x00402690\nFLD tword ptr [RSP + 0xc]\nADD RSP,0x20\nPOP RBX\nRET\n'
p39
S'53\n48 83 ec 20\n48 89 fb\n8a 03\n3c 27\n74 04\n3c 22\n75 51\n8a 43 01\n84 c0\n74 4a\n0f b6 c0\n89 44 24 08\ndb 44 24 08\n80 7b 02 00\n74 66\n8a 05 bd 6a 20 00\n84 c0\n75 5c\n48 83 c3 02\n31 ff\nbe d8 62 40 00\nba 05 00 00 00\ndb 7c 24 0c\ne8 e3 eb ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n48 89 d9\ne8 8f ed ff ff\neb 29\ne8 18 eb ff ff\nc7 00 00 00 00 00\n48 8d 74 24 18\n48 89 df\ne8 a5 00 00 00\ndb 7c 24 0c\n48 8b 74 24 18\n48 89 df\ne8 64 fe ff ff\ndb 6c 24 0c\n48 83 c4 20\n5b\nc3\n'
p40
S'.text:00000000004027a0\n.text:00000000004027a1\n.text:00000000004027a5\n.text:00000000004027a8\n.text:00000000004027aa\n.text:00000000004027ac\n.text:00000000004027ae\n.text:00000000004027b0\n.text:00000000004027b2\n.text:00000000004027b5\n.text:00000000004027b7\n.text:00000000004027b9\n.text:00000000004027bc\n.text:00000000004027c0\n.text:00000000004027c4\n.text:00000000004027c8\n.text:00000000004027ca\n.text:00000000004027d0\n.text:00000000004027d2\n.text:00000000004027d4\n.text:00000000004027d8\n.text:00000000004027da\n.text:00000000004027df\n.text:00000000004027e4\n.text:00000000004027e8\n.text:00000000004027ed\n.text:00000000004027f0\n.text:00000000004027f2\n.text:00000000004027f4\n.text:00000000004027f6\n.text:00000000004027f9\n.text:00000000004027fc\n.text:0000000000402801\n.text:0000000000402803\n.text:0000000000402808\n.text:000000000040280e\n.text:0000000000402813\n.text:0000000000402816\n.text:000000000040281b\n.text:000000000040281f\n.text:0000000000402824\n.text:0000000000402827\n.text:000000000040282c\n.text:0000000000402830\n.text:0000000000402834\n.text:0000000000402835\n'
p41
tp42
sS'quoting_options_from_style'
p43
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p44
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p45
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00403c8d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401310\n'
p46
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 7e d6 ff ff\n'
p47
S'.text:0000000000403c40\n.text:0000000000403c44\n.text:0000000000403c47\n.text:0000000000403c4c\n.text:0000000000403c51\n.text:0000000000403c55\n.text:0000000000403c5d\n.text:0000000000403c60\n.text:0000000000403c62\n.text:0000000000403c64\n.text:0000000000403c68\n.text:0000000000403c6b\n.text:0000000000403c6f\n.text:0000000000403c74\n.text:0000000000403c79\n.text:0000000000403c7d\n.text:0000000000403c81\n.text:0000000000403c85\n.text:0000000000403c88\n.text:0000000000403c8c\n.text:0000000000403c8d\n'
p48
tp49
sS'print_esc'
p50
(S'\n__stdcall print_esc(char * escstart)\n'
p51
V\u000aint print_esc(char *escstart)\u000a\u000a{\u000a  byte *pbVar1;\u000a  char cVar2;\u000a  ushort *puVar3;\u000a  byte bVar4;\u000a  byte bVar5;\u000a  int iVar6;\u000a  ushort **ppuVar7;\u000a  undefined8 uVar8;\u000a  void *pvVar9;\u000a  uint __c;\u000a  int __c_00;\u000a  byte in_SIL;\u000a  uint uVar10;\u000a  long lVar11;\u000a  int iVar12;\u000a  \u000a  uVar10 = (uint)escstart;\u000a  bVar4 = escstart[1];\u000a  __c = SEXT14((char)bVar4);\u000a  if (__c == 0x78) {\u000a    ppuVar7 = __ctype_b_loc();\u000a    puVar3 = *ppuVar7;\u000a    lVar11 = 0;\u000a    __c_00 = 0;\u000a    do {\u000a      cVar2 = (escstart + 2)[lVar11];\u000a      bVar4 = to_uchar();\u000a      iVar12 = (int)(escstart + 2);\u000a      if ((*(byte *)((long)puVar3 + (ulong)bVar4 * 2 + 1) & 0x10) == 0) {\u000a        iVar12 = iVar12 + (int)lVar11;\u000a        if ((int)lVar11 == 0) {\u000a          uVar8 = dcgettext(0,"missing hexadecimal number in escape",5);\u000a          error(1,0,uVar8,uVar8);\u000a        }\u000a        goto LAB_004024f4;\u000a      }\u000a      iVar6 = -0x57;\u000a      if ((5 < (byte)(cVar2 + 0x9fU)) && (iVar6 = -0x30, (byte)(cVar2 + 0xbfU) < 6)) {\u000a        iVar6 = -0x37;\u000a      }\u000a      __c_00 = __c_00 * 0x10 + (int)cVar2 + iVar6;\u000a      lVar11 = lVar11 + 1;\u000a    } while ((int)lVar11 < 2);\u000a    iVar12 = iVar12 + (int)lVar11;\u000a  }\u000a  else {\u000a    pbVar1 = (byte *)(escstart + 1);\u000a    iVar12 = (int)pbVar1;\u000a    if ((bVar4 & 0xf8) != 0x30) {\u000a      if ((bVar4 == 0) || (pvVar9 = memchr("\u005c"\u005c\u005cabcefnrtv",__c,0xc), pvVar9 == (void *)0x0)) {\u000a        bVar4 = *pbVar1;\u000a        if ((bVar4 | 0x20) == 0x75) {\u000a          escstart = escstart + 2;\u000a          ppuVar7 = __ctype_b_loc();\u000a          __c_00 = (uint)(bVar4 != 0x75) * 4 + 5;\u000a          __c = 0;\u000a          do {\u000a            puVar3 = *ppuVar7;\u000a            bVar5 = to_uchar();\u000a            if ((*(byte *)((long)puVar3 + (ulong)bVar5 * 2 + 1) & 0x10) == 0) {\u000a              uVar8 = dcgettext(0,"missing hexadecimal number in escape",5);\u000a              error(1,0,uVar8,uVar8);\u000a            }\u000a            cVar2 = *escstart;\u000a            iVar12 = -0x57;\u000a            if ((5 < (byte)(cVar2 + 0x9fU)) && (iVar12 = -0x30, (byte)(cVar2 + 0xbfU) < 6)) {\u000a              iVar12 = -0x37;\u000a            }\u000a            __c = __c * 0x10 + (int)cVar2 + iVar12;\u000a            escstart = escstart + 1;\u000a            iVar12 = (int)escstart;\u000a            __c_00 = __c_00 + -1;\u000a          } while (1 < __c_00);\u000a          if (((__c < 0xa0) &&\u000a              ((0x3c < __c - 0x24 ||\u000a               ((0x1000000010000001U >> ((ulong)(__c - 0x24) & 0x1f) & 1) == 0)))) ||\u000a             ((__c & 0xfffff800) == 0xd800)) {\u000a            uVar8 = dcgettext(0,"invalid universal character name \u005c\u005c%c%0*x",5);\u000a            error(1,0,uVar8,(ulong)(uint)(int)(char)bVar4,(ulong)((uint)(bVar4 != 0x75) * 4 + 4),\u000a                  (ulong)__c);\u000a          }\u000a          print_unicode_char(stdout);\u000a        }\u000a        else {\u000a          putchar_unlocked(0x5c);\u000a          if (*pbVar1 != 0) {\u000a            putchar_unlocked((int)(char)*pbVar1);\u000a            iVar12 = uVar10 + 2;\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        iVar12 = uVar10 + 2;\u000a        print_esc_char((ulong)__c);\u000a      }\u000a      goto LAB_004024f9;\u000a    }\u000a    lVar11 = 0;\u000a    __c_00 = 0;\u000a    do {\u000a      iVar12 = (int)lVar11;\u000a      bVar5 = (pbVar1 + (ulong)(bVar4 == 0x30 & in_SIL))[lVar11];\u000a      if ((bVar5 & 0xf8) != 0x30) break;\u000a      __c_00 = (int)(char)bVar5 + -0x30 + __c_00 * 8;\u000a      lVar11 = lVar11 + 1;\u000a      iVar12 = (int)lVar11;\u000a    } while (iVar12 < 3);\u000a    iVar12 = (int)(pbVar1 + (ulong)(bVar4 == 0x30 & in_SIL)) + iVar12;\u000a  }\u000aLAB_004024f4:\u000a  putchar_unlocked(__c_00);\u000aLAB_004024f9:\u000a  return (int)(iVar12 + ~uVar10);\u000a}\u000a\u000a
p52
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,RDI\nMOVSX EBP,byte ptr [RBX + 0x1]\nCMP EBP,0x78\nJNZ 0x0040247a\nMOV qword ptr [RSP + 0x8],RBX\nLEA R15,[RBX + 0x2]\nCALL 0x00401640\nMOV R13,qword ptr [RAX]\nXOR R12D,R12D\nMOV R14D,0xffffffc9\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVSX EBX,byte ptr [R15 + R12*0x1]\nMOV EDI,EBX\nCALL 0x00402840\nMOVZX EAX,AL\nTEST byte ptr [R13 + RAX*0x2 + 0x1],0x10\nJZ 0x004024c0\nSHL EBP,0x4\nMOV ECX,EBX\nADD CL,0x9f\nMOV EAX,0xffffffa9\nCMP CL,0x6\nJC 0x00402468\nMOV EAX,EBX\nADD AL,0xbf\nCMP AL,0x6\nMOV EAX,0xffffffd0\nCMOVC EAX,R14D\nADD EBP,EBX\nADD EBP,EAX\nINC R12\nCMP R12D,0x2\nJL 0x00402430\nADD R15,R12\nJMP 0x004024ed\nLEA R15,[RBX + 0x1]\nMOV EAX,EBP\nAND AL,0xf8\nCMP AL,0x30\nJNZ 0x00402510\nCMP BPL,0x30\nSETZ AL\nAND AL,SIL\nMOVZX EAX,AL\nADD R15,RAX\nXOR EAX,EAX\nXOR EDI,EDI\nNOP\nMOVSX ECX,byte ptr [R15 + RAX*0x1]\nMOV EDX,ECX\nAND DL,0xf8\nCMP DL,0x30\nJNZ 0x004024bb\nLEA EDI,[RCX + RDI*0x8 + -0x30]\nINC RAX\nCMP EAX,0x3\nJL 0x004024a0\nADD R15,RAX\nJMP 0x004024f4\nADD R15,R12\nTEST R12D,R12D\nJNZ 0x004024ed\nXOR EDI,EDI\nMOV ESI,0x406366\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401590\nMOV RBX,qword ptr [RSP + 0x8]\nMOV EDI,EBP\nCALL 0x004014e0\nNOT EBX\nADD R15D,EBX\nMOV EAX,R15D\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nTEST BPL,BPL\nJZ 0x00402538\nMOV EDI,0x40638b\nMOV EDX,0xc\nMOV ESI,EBP\nCALL 0x00401470\nTEST RAX,RAX\nJZ 0x00402538\nLEA R15,[RBX + 0x2]\nMOV EDI,EBP\nCALL 0x00402850\nJMP 0x004024f9\nMOVSX ECX,byte ptr [R15]\nMOV EAX,ECX\nOR AL,0x20\nCMP AL,0x75\nJNZ 0x0040266b\nXOR EBP,EBP\nMOV dword ptr [RSP + 0x14],ECX\nCMP CL,0x75\nSETNZ BPL\nLEA EAX,[0x4 + RBP*0x4]\nMOV dword ptr [RSP + 0x10],EAX\nMOV qword ptr [RSP + 0x8],RBX\nLEA R15,[RBX + 0x2]\nCALL 0x00401640\nMOV R13,RAX\nLEA EBX,[0x5 + RBP*0x4]\nMOV R12D,0xffffffc9\nXOR EBP,EBP\nMOV R14,qword ptr [R13]\nMOVSX EDI,byte ptr [R15]\nCALL 0x00402840\nMOVZX EAX,AL\nTEST byte ptr [R14 + RAX*0x2 + 0x1],0x10\nJNZ 0x004025bd\nXOR EDI,EDI\nMOV ESI,0x406366\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401590\nSHL EBP,0x4\nMOVSX EAX,byte ptr [R15]\nMOV EDX,EAX\nADD DL,0x9f\nMOV ECX,0xffffffa9\nCMP DL,0x6\nJC 0x004025e4\nMOV ECX,EAX\nADD CL,0xbf\nCMP CL,0x6\nMOV ECX,0xffffffd0\nCMOVC ECX,R12D\nADD EBP,EAX\nADD EBP,ECX\nINC R15\nDEC EBX\nCMP EBX,0x1\nJG 0x00402580\nCMP EBP,0x9f\nJA 0x00402612\nLEA EAX,[RBP + -0x24]\nCMP EAX,0x3c\nJA 0x00402620\nMOV RCX,0x1000000010000001\nBT RCX,RAX\nJNC 0x00402620\nMOV EAX,EBP\nAND EAX,0xfffff800\nCMP EAX,0xd800\nJNZ 0x00402651\nXOR EDI,EDI\nMOV ESI,0x406397\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV ECX,dword ptr [RSP + 0x14]\nMOV R8D,dword ptr [RSP + 0x10]\nMOV R9D,EBP\nCALL 0x00401590\nMOV RDI,qword ptr [0x00609268]\nXOR EDX,EDX\nMOV ESI,EBP\nCALL 0x004044c0\nMOV RBX,qword ptr [RSP + 0x8]\nJMP 0x004024f9\nMOV EDI,0x5c\nCALL 0x004014e0\nMOVSX EDI,byte ptr [R15]\nTEST EDI,EDI\nJZ 0x004024f9\nCALL 0x004014e0\nLEA R15,[RBX + 0x2]\nJMP 0x004024f9\n'
p53
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 fb\n0f be 6b 01\n83 fd 78\n75 70\n48 89 5c 24 08\n4c 8d 7b 02\ne8 28 f2 ff ff\n4c 8b 28\n45 31 e4\n41 be c9 ff ff ff\n31 ed\n66 2e 0f 1f 84 00 00 00 00 00\n43 0f be 1c 27\n89 df\ne8 04 04 00 00\n0f b6 c0\n41 f6 44 45 01 10\n74 79\nc1 e5 04\n89 d9\n80 c1 9f\nb8 a9 ff ff ff\n80 f9 06\n72 0f\n89 d8\n04 bf\n3c 06\nb8 d0 ff ff ff\n41 0f 42 c6\n01 dd\n01 c5\n49 ff c4\n41 83 fc 02\n7c bb\n4d 01 e7\neb 73\n4c 8d 7b 01\n89 e8\n24 f8\n3c 30\n0f 85 86 00 00 00\n40 80 fd 30\n0f 94 c0\n40 20 f0\n0f b6 c0\n49 01 c7\n31 c0\n31 ff\n66 90\n41 0f be 0c 07\n89 ca\n80 e2 f8\n80 fa 30\n75 0c\n8d 7c f9 d0\n48 ff c0\n83 f8 03\n7c e5\n49 01 c7\neb 34\n4d 01 e7\n45 85 e4\n75 25\n31 ff\nbe 66 63 40 00\nba 05 00 00 00\ne8 f7 ee ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 a3 f0 ff ff\n48 8b 5c 24 08\n89 ef\ne8 e7 ef ff ff\nf7 d3\n41 01 df\n44 89 f8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n40 84 ed\n74 23\nbf 8b 63 40 00\nba 0c 00 00 00\n89 ee\ne8 4a ef ff ff\n48 85 c0\n74 0d\n4c 8d 7b 02\n89 ef\ne8 1a 03 00 00\neb c1\n41 0f be 0f\n89 c8\n0c 20\n3c 75\n0f 85 23 01 00 00\n31 ed\n89 4c 24 14\n80 f9 75\n40 0f 95 c5\n8d 04 ad 04 00 00 00\n89 44 24 10\n48 89 5c 24 08\n4c 8d 7b 02\ne8 d2 f0 ff ff\n49 89 c5\n8d 1c ad 05 00 00 00\n41 bc c9 ff ff ff\n31 ed\n4d 8b 75 00\n41 0f be 3f\ne8 b3 02 00 00\n0f b6 c0\n41 f6 44 46 01 10\n75 25\n31 ff\nbe 66 63 40 00\nba 05 00 00 00\ne8 27 ee ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 d3 ef ff ff\nc1 e5 04\n41 0f be 07\n89 c2\n80 c2 9f\nb9 a9 ff ff ff\n80 fa 06\n72 11\n89 c1\n80 c1 bf\n80 f9 06\nb9 d0 ff ff ff\n41 0f 42 cc\n01 c5\n01 cd\n49 ff c7\nff cb\n83 fb 01\n7f 8e\n81 fd 9f 00 00 00\n77 18\n8d 45 dc\n83 f8 3c\n77 1e\n48 b9 01 00 00 10 00 00 00 10\n48 0f a3 c1\n73 0e\n89 e8\n25 00 f8 ff ff\n3d 00 d8 00 00\n75 31\n31 ff\nbe 97 63 40 00\nba 05 00 00 00\ne8 9f ed ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n8b 4c 24 14\n44 8b 44 24 10\n41 89 e9\ne8 3f ef ff ff\n48 8b 3d 10 6c 20 00\n31 d2\n89 ee\ne8 5f 1e 00 00\n48 8b 5c 24 08\ne9 8e fe ff ff\nbf 5c 00 00 00\ne8 6b ee ff ff\n41 0f be 3f\n85 ff\n0f 84 78 fe ff ff\ne8 5a ee ff ff\n4c 8d 7b 02\ne9 6a fe ff ff\n'
p54
S'.text:00000000004023f0\n.text:00000000004023f1\n.text:00000000004023f3\n.text:00000000004023f5\n.text:00000000004023f7\n.text:00000000004023f9\n.text:00000000004023fa\n.text:00000000004023fe\n.text:0000000000402401\n.text:0000000000402405\n.text:0000000000402408\n.text:000000000040240a\n.text:000000000040240f\n.text:0000000000402413\n.text:0000000000402418\n.text:000000000040241b\n.text:000000000040241e\n.text:0000000000402424\n.text:0000000000402426\n.text:0000000000402430\n.text:0000000000402435\n.text:0000000000402437\n.text:000000000040243c\n.text:000000000040243f\n.text:0000000000402445\n.text:0000000000402447\n.text:000000000040244a\n.text:000000000040244c\n.text:000000000040244f\n.text:0000000000402454\n.text:0000000000402457\n.text:0000000000402459\n.text:000000000040245b\n.text:000000000040245d\n.text:000000000040245f\n.text:0000000000402464\n.text:0000000000402468\n.text:000000000040246a\n.text:000000000040246c\n.text:000000000040246f\n.text:0000000000402473\n.text:0000000000402475\n.text:0000000000402478\n.text:000000000040247a\n.text:000000000040247e\n.text:0000000000402480\n.text:0000000000402482\n.text:0000000000402484\n.text:000000000040248a\n.text:000000000040248e\n.text:0000000000402491\n.text:0000000000402494\n.text:0000000000402497\n.text:000000000040249a\n.text:000000000040249c\n.text:000000000040249e\n.text:00000000004024a0\n.text:00000000004024a5\n.text:00000000004024a7\n.text:00000000004024aa\n.text:00000000004024ad\n.text:00000000004024af\n.text:00000000004024b3\n.text:00000000004024b6\n.text:00000000004024b9\n.text:00000000004024bb\n.text:00000000004024be\n.text:00000000004024c0\n.text:00000000004024c3\n.text:00000000004024c6\n.text:00000000004024c8\n.text:00000000004024ca\n.text:00000000004024cf\n.text:00000000004024d4\n.text:00000000004024d9\n.text:00000000004024dc\n.text:00000000004024e1\n.text:00000000004024e3\n.text:00000000004024e5\n.text:00000000004024e8\n.text:00000000004024ed\n.text:00000000004024f2\n.text:00000000004024f4\n.text:00000000004024f9\n.text:00000000004024fb\n.text:00000000004024fe\n.text:0000000000402501\n.text:0000000000402505\n.text:0000000000402506\n.text:0000000000402508\n.text:000000000040250a\n.text:000000000040250c\n.text:000000000040250e\n.text:000000000040250f\n.text:0000000000402510\n.text:0000000000402513\n.text:0000000000402515\n.text:000000000040251a\n.text:000000000040251f\n.text:0000000000402521\n.text:0000000000402526\n.text:0000000000402529\n.text:000000000040252b\n.text:000000000040252f\n.text:0000000000402531\n.text:0000000000402536\n.text:0000000000402538\n.text:000000000040253c\n.text:000000000040253e\n.text:0000000000402540\n.text:0000000000402542\n.text:0000000000402548\n.text:000000000040254a\n.text:000000000040254e\n.text:0000000000402551\n.text:0000000000402555\n.text:000000000040255c\n.text:0000000000402560\n.text:0000000000402565\n.text:0000000000402569\n.text:000000000040256e\n.text:0000000000402571\n.text:0000000000402578\n.text:000000000040257e\n.text:0000000000402580\n.text:0000000000402584\n.text:0000000000402588\n.text:000000000040258d\n.text:0000000000402590\n.text:0000000000402596\n.text:0000000000402598\n.text:000000000040259a\n.text:000000000040259f\n.text:00000000004025a4\n.text:00000000004025a9\n.text:00000000004025ac\n.text:00000000004025b1\n.text:00000000004025b3\n.text:00000000004025b5\n.text:00000000004025b8\n.text:00000000004025bd\n.text:00000000004025c0\n.text:00000000004025c4\n.text:00000000004025c6\n.text:00000000004025c9\n.text:00000000004025ce\n.text:00000000004025d1\n.text:00000000004025d3\n.text:00000000004025d5\n.text:00000000004025d8\n.text:00000000004025db\n.text:00000000004025e0\n.text:00000000004025e4\n.text:00000000004025e6\n.text:00000000004025e8\n.text:00000000004025eb\n.text:00000000004025ed\n.text:00000000004025f0\n.text:00000000004025f2\n.text:00000000004025f8\n.text:00000000004025fa\n.text:00000000004025fd\n.text:0000000000402600\n.text:0000000000402602\n.text:000000000040260c\n.text:0000000000402610\n.text:0000000000402612\n.text:0000000000402614\n.text:0000000000402619\n.text:000000000040261e\n.text:0000000000402620\n.text:0000000000402622\n.text:0000000000402627\n.text:000000000040262c\n.text:0000000000402631\n.text:0000000000402634\n.text:0000000000402639\n.text:000000000040263b\n.text:000000000040263d\n.text:0000000000402640\n.text:0000000000402644\n.text:0000000000402649\n.text:000000000040264c\n.text:0000000000402651\n.text:0000000000402658\n.text:000000000040265a\n.text:000000000040265c\n.text:0000000000402661\n.text:0000000000402666\n.text:000000000040266b\n.text:0000000000402670\n.text:0000000000402675\n.text:0000000000402679\n.text:000000000040267b\n.text:0000000000402681\n.text:0000000000402686\n.text:000000000040268a\n'
p55
tp56
sS'rpl_fclose'
p57
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p58
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00405509;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00405509:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p59
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004014f0\nTEST EAX,EAX\nJS 0x00405509\nMOV RDI,RBX\nCALL 0x00401540\nTEST EAX,EAX\nJZ 0x004054d7\nMOV RDI,RBX\nCALL 0x004014f0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401430\nCMP RAX,-0x1\nJZ 0x00405509\nMOV RDI,RBX\nCALL 0x00405520\nTEST EAX,EAX\nJZ 0x00405509\nCALL 0x00401320\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004013b0\nTEST EBP,EBP\nJZ 0x00405502\nCALL 0x00401320\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004013b0\n'
p60
S'55\n53\n50\n48 89 fb\ne8 45 c0 ff ff\n85 c0\n78 5a\n48 89 df\ne8 89 c0 ff ff\n85 c0\n74 1c\n48 89 df\ne8 2d c0 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 5f bf ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 38 be ff ff\n8b 28\n48 89 df\ne8 be be ff ff\n85 ed\n74 0c\ne8 25 be ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 99 be ff ff\n'
p61
S'.text:00000000004054a0\n.text:00000000004054a1\n.text:00000000004054a2\n.text:00000000004054a3\n.text:00000000004054a6\n.text:00000000004054ab\n.text:00000000004054ad\n.text:00000000004054af\n.text:00000000004054b2\n.text:00000000004054b7\n.text:00000000004054b9\n.text:00000000004054bb\n.text:00000000004054be\n.text:00000000004054c3\n.text:00000000004054c5\n.text:00000000004054ca\n.text:00000000004054cc\n.text:00000000004054d1\n.text:00000000004054d5\n.text:00000000004054d7\n.text:00000000004054da\n.text:00000000004054df\n.text:00000000004054e1\n.text:00000000004054e3\n.text:00000000004054e8\n.text:00000000004054ea\n.text:00000000004054ed\n.text:00000000004054f2\n.text:00000000004054f4\n.text:00000000004054f6\n.text:00000000004054fb\n.text:00000000004054fd\n.text:0000000000405502\n.text:0000000000405506\n.text:0000000000405507\n.text:0000000000405508\n.text:0000000000405509\n.text:000000000040550c\n.text:0000000000405510\n.text:0000000000405511\n.text:0000000000405512\n'
p62
tp63
sS'strcpy'
p64
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p65
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00609060)();\u000a  return pcVar1;\u000a}\u000a\u000a
p66
S'JMP qword ptr [0x00609060]\n'
p67
S'ff 25 0a 7d 20 00\n'
p68
S'.plt:0000000000401350\n'
p69
tp70
sS'to_uchar'
p71
(S'\n__stdcall to_uchar()\n'
p72
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p73
S'MOV EAX,EDI\nRET\n'
p74
S'89 f8\nc3\n'
p75
S'.text:0000000000402840\n.text:0000000000402842\n'
p76
tp77
sS'strncmp'
p78
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p79
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00609050)();\u000a  return iVar1;\u000a}\u000a\u000a
p80
S'JMP qword ptr [0x00609050]\n'
p81
S'ff 25 1a 7d 20 00\n'
p82
S'.plt:0000000000401330\n'
p83
tp84
sS'xnrealloc'
p85
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p86
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p87
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00404bc4\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00404bd0\nPUSH RAX\nCALL 0x00404d20\n'
p88
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p89
S'.text:0000000000404bb0\n.text:0000000000404bb3\n.text:0000000000404bb6\n.text:0000000000404bb9\n.text:0000000000404bbb\n.text:0000000000404bbf\n.text:0000000000404bc2\n.text:0000000000404bc4\n.text:0000000000404bc5\n'
p90
tp91
sS'quote'
p92
(S'\n__stdcall quote(char * arg)\n'
p93
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p94
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403ef0\n'
p95
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p96
S'.text:0000000000403f00\n.text:0000000000403f03\n.text:0000000000403f05\n.text:0000000000403f08\n'
p97
tp98
sS'emit_bug_reporting_address'
p99
(S'\n__stdcall emit_bug_reporting_address()\n'
p100
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p101
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x406cbd\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406cd2\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401580\nXOR EDI,EDI\nMOV ESI,0x406ce8\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x4060be\nMOV ECX,0x4061c1\nXOR EAX,EAX\nCALL 0x00401580\nXOR EDI,EDI\nMOV ESI,0x406cfc\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401490\n'
p102
S'50\n31 ff\nbe bd 6c 40 00\nba 05 00 00 00\ne8 ce c8 ff ff\n48 89 c1\nbf 01 00 00 00\nba d2 6c 40 00\n31 c0\n48 89 ce\ne8 67 ca ff ff\n31 ff\nbe e8 6c 40 00\nba 05 00 00 00\ne8 a6 c8 ff ff\n48 89 c6\nbf 01 00 00 00\nba be 60 40 00\nb9 c1 61 40 00\n31 c0\ne8 3d ca ff ff\n31 ff\nbe fc 6c 40 00\nba 05 00 00 00\ne8 7c c8 ff ff\n48 8b 35 0d 47 20 00\n48 89 c7\n58\ne9 2c c9 ff ff\n'
p103
S'.text:0000000000404af0\n.text:0000000000404af1\n.text:0000000000404af3\n.text:0000000000404af8\n.text:0000000000404afd\n.text:0000000000404b02\n.text:0000000000404b05\n.text:0000000000404b0a\n.text:0000000000404b0f\n.text:0000000000404b11\n.text:0000000000404b14\n.text:0000000000404b19\n.text:0000000000404b1b\n.text:0000000000404b20\n.text:0000000000404b25\n.text:0000000000404b2a\n.text:0000000000404b2d\n.text:0000000000404b32\n.text:0000000000404b37\n.text:0000000000404b3c\n.text:0000000000404b3e\n.text:0000000000404b43\n.text:0000000000404b45\n.text:0000000000404b4a\n.text:0000000000404b4f\n.text:0000000000404b54\n.text:0000000000404b5b\n.text:0000000000404b5e\n.text:0000000000404b5f\n'
p104
tp105
sS'clone_quoting_options'
p106
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p107
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p108
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401320\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x6092b0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00404cd0\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p109
S'55\n41 56\n53\n48 89 fb\ne8 54 e8 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 b0 92 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 e5 21 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p110
S'.text:0000000000402ac0\n.text:0000000000402ac1\n.text:0000000000402ac3\n.text:0000000000402ac4\n.text:0000000000402ac7\n.text:0000000000402acc\n.text:0000000000402acf\n.text:0000000000402ad2\n.text:0000000000402ad5\n.text:0000000000402ada\n.text:0000000000402ade\n.text:0000000000402ae3\n.text:0000000000402ae6\n.text:0000000000402aeb\n.text:0000000000402aee\n.text:0000000000402aef\n.text:0000000000402af1\n.text:0000000000402af2\n'
p111
tp112
sS'xmalloc'
p113
(S'\n__stdcall xmalloc(size_t n)\n'
p114
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p115
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401500\nTEST RBX,RBX\nJZ 0x00404ba3\nTEST RAX,RAX\nJZ 0x00404ba5\nPOP RBX\nRET\nCALL 0x00404d20\n'
p116
S'53\n48 89 fb\ne8 67 c9 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p117
S'.text:0000000000404b90\n.text:0000000000404b91\n.text:0000000000404b94\n.text:0000000000404b99\n.text:0000000000404b9c\n.text:0000000000404b9e\n.text:0000000000404ba1\n.text:0000000000404ba3\n.text:0000000000404ba4\n.text:0000000000404ba5\n'
p118
tp119
sS'xfprintf'
p120
(S'\n__stdcall xfprintf(FILE * stream, char * format)\n'
p121
V\u000aint xfprintf(FILE *stream,char *format,...)\u000a\u000a{\u000a  char in_AL;\u000a  int iVar1;\u000a  undefined8 in_RCX;\u000a  undefined8 in_RDX;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list args;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [16];\u000a  undefined8 local_a8;\u000a  undefined8 local_a0;\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &args[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x10;\u000a  local_a8 = in_RDX;\u000a  local_a0 = in_RCX;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  iVar1 = xvfprintf(stream,format,&local_d8);\u000a  return iVar1;\u000a}\u000a\u000a
p122
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404ea2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOV RDX,RSP\nCALL 0x00404ef0\nADD RSP,0xd8\nRET\n'
p123
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 89 e2\ne8 0c 00 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p124
S'.text:0000000000404e60\n.text:0000000000404e67\n.text:0000000000404e69\n.text:0000000000404e6b\n.text:0000000000404e70\n.text:0000000000404e75\n.text:0000000000404e7a\n.text:0000000000404e82\n.text:0000000000404e8a\n.text:0000000000404e92\n.text:0000000000404e9a\n.text:0000000000404ea2\n.text:0000000000404ea7\n.text:0000000000404eac\n.text:0000000000404eb1\n.text:0000000000404eb6\n.text:0000000000404ebb\n.text:0000000000404ec0\n.text:0000000000404ec8\n.text:0000000000404ecd\n.text:0000000000404ed5\n.text:0000000000404edc\n.text:0000000000404edf\n.text:0000000000404ee4\n.text:0000000000404eeb\n'
p125
tp126
sS'quotearg_char_mem'
p127
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p128
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p129
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x006092e0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x006092d0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x006092c0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006092b0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00402b20\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403a10\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p130
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d a8 55 20 00\n48 89 4c 24 30\n0f 10 05 8c 55 20 00\n0f 29 44 24 20\n0f 10 05 70 55 20 00\n0f 29 44 24 10\n0f 10 05 54 55 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p131
S'.text:0000000000403d20\n.text:0000000000403d22\n.text:0000000000403d24\n.text:0000000000403d25\n.text:0000000000403d29\n.text:0000000000403d2b\n.text:0000000000403d2e\n.text:0000000000403d31\n.text:0000000000403d38\n.text:0000000000403d3d\n.text:0000000000403d44\n.text:0000000000403d49\n.text:0000000000403d50\n.text:0000000000403d55\n.text:0000000000403d5c\n.text:0000000000403d60\n.text:0000000000403d63\n.text:0000000000403d68\n.text:0000000000403d6b\n.text:0000000000403d6d\n.text:0000000000403d72\n.text:0000000000403d74\n.text:0000000000403d77\n.text:0000000000403d7a\n.text:0000000000403d7d\n.text:0000000000403d82\n.text:0000000000403d86\n.text:0000000000403d87\n.text:0000000000403d89\n.text:0000000000403d8b\n'
p132
tp133
sS'c_isgraph'
p134
(S'\n__stdcall c_isgraph()\n'
p135
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p136
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p137
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p138
S'.text:0000000000405040\n.text:0000000000405043\n.text:0000000000405046\n.text:0000000000405049\n'
p139
tp140
sS'print_formatted'
p141
(S'\n__stdcall print_formatted(char * format, char * * argv)\n'
p142
V\u000aint print_formatted(char *format,char **argv)\u000a\u000a{\u000a  byte *pbVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  long lVar3;\u000a  intmax_t iVar4;\u000a  long lVar5;\u000a  undefined8 uVar6;\u000a  byte bVar7;\u000a  char **in_RDX;\u000a  FILE *pFVar8;\u000a  byte *pbVar9;\u000a  ulong uVar10;\u000a  int __c;\u000a  int iVar11;\u000a  char ok [256];\u000a  undefined4 local_138;\u000a  undefined4 uStack308;\u000a  undefined4 uStack304;\u000a  undefined4 uStack300;\u000a  undefined4 local_128;\u000a  undefined4 uStack292;\u000a  undefined4 uStack288;\u000a  undefined4 uStack284;\u000a  undefined4 local_118;\u000a  undefined4 uStack276;\u000a  undefined4 uStack272;\u000a  undefined4 uStack268;\u000a  undefined4 local_108;\u000a  undefined4 uStack260;\u000a  undefined4 uStack256;\u000a  undefined4 uStack252;\u000a  undefined4 local_f8;\u000a  uint uStack244;\u000a  undefined4 uStack240;\u000a  undefined4 uStack236;\u000a  undefined4 local_e8;\u000a  undefined4 uStack228;\u000a  undefined4 local_e0;\u000a  undefined4 uStack220;\u000a  undefined local_d8;\u000a  undefined uStack215;\u000a  undefined uStack214;\u000a  undefined uStack213;\u000a  undefined uStack212;\u000a  undefined local_d3;\u000a  undefined uStack210;\u000a  undefined local_d1;\u000a  undefined4 uStack208;\u000a  undefined4 uStack204;\u000a  undefined4 local_c8;\u000a  undefined4 uStack196;\u000a  undefined4 local_c0;\u000a  undefined4 uStack188;\u000a  undefined4 local_b8;\u000a  undefined4 uStack180;\u000a  undefined4 uStack176;\u000a  undefined4 uStack172;\u000a  undefined4 local_a8;\u000a  undefined4 uStack164;\u000a  undefined4 uStack160;\u000a  undefined4 uStack156;\u000a  undefined4 local_98;\u000a  undefined4 uStack148;\u000a  undefined4 uStack144;\u000a  undefined4 uStack140;\u000a  undefined4 local_88;\u000a  undefined4 uStack132;\u000a  undefined4 uStack128;\u000a  undefined4 uStack124;\u000a  undefined4 local_78;\u000a  undefined4 uStack116;\u000a  undefined4 uStack112;\u000a  undefined4 uStack108;\u000a  undefined4 local_68;\u000a  undefined4 uStack100;\u000a  undefined4 uStack96;\u000a  undefined4 uStack92;\u000a  undefined4 local_58;\u000a  undefined4 uStack84;\u000a  undefined4 uStack80;\u000a  undefined4 uStack76;\u000a  undefined4 local_48;\u000a  undefined4 uStack68;\u000a  undefined4 uStack64;\u000a  undefined4 uStack60;\u000a  \u000a  iVar2 = (int)argv;\u000a  bVar7 = *format;\u000a  iVar11 = iVar2;\u000ajoined_r0x00401bd5:\u000a  if (bVar7 == 0) {\u000a    return iVar2 - iVar11;\u000a  }\u000a  __c = (int)(char)bVar7;\u000a  if (__c == 0x5c) {\u000a    argv = (char **)0x0;\u000a    __c = print_esc(format);\u000a    format = (char *)((byte *)format + (long)__c);\u000a  }\u000a  else {\u000a    if (__c == 0x25) {\u000a      pbVar9 = (byte *)format + 1;\u000a      bVar7 = ((byte *)format)[1];\u000a      if (bVar7 == 0x71) {\u000a        format = (char *)pbVar9;\u000a        if (0 < iVar11) {\u000a          __s = quotearg_style((char *)0x3);\u000a          argv = (char **)stdout;\u000a          fputs_unlocked(__s,stdout);\u000aLAB_00401ca7:\u000a          in_RDX = in_RDX + 1;\u000a          iVar11 = iVar11 + -1;\u000a          format = (char *)pbVar9;\u000a        }\u000a      }\u000a      else {\u000a        if (bVar7 == 0x62) {\u000a          format = (char *)pbVar9;\u000a          if (0 < iVar11) {\u000a            print_esc_string(*in_RDX);\u000a            goto LAB_00401ca7;\u000a          }\u000a        }\u000a        else {\u000a          if (bVar7 != 0x25) {\u000a            local_48 = 0;\u000a            uStack68 = 0;\u000a            uStack64 = 0;\u000a            uStack60 = 0;\u000a            local_58 = 0;\u000a            uStack84 = 0;\u000a            uStack80 = 0;\u000a            uStack76 = 0;\u000a            local_68 = 0;\u000a            uStack100 = 0;\u000a            uStack96 = 0;\u000a            uStack92 = 0;\u000a            local_78 = 0;\u000a            uStack116 = 0;\u000a            uStack112 = 0;\u000a            uStack108 = 0;\u000a            local_88 = 0;\u000a            uStack132 = 0;\u000a            uStack128 = 0;\u000a            uStack124 = 0;\u000a            local_98 = 0;\u000a            uStack148 = 0;\u000a            uStack144 = 0;\u000a            uStack140 = 0;\u000a            local_a8 = 0;\u000a            uStack164 = 0;\u000a            uStack160 = 0;\u000a            uStack156 = 0;\u000a            local_b8 = 0;\u000a            uStack180 = 0;\u000a            uStack176 = 0;\u000a            uStack172 = 0;\u000a            uStack188 = 0;\u000a            local_d8 = 0;\u000a            uStack214 = 0;\u000a            local_e8 = 0;\u000a            uStack228 = 0;\u000a            uStack220 = 0;\u000a            uStack240 = 0;\u000a            uStack236 = 0;\u000a            local_108 = 0;\u000a            uStack260 = 0;\u000a            uStack256 = 0;\u000a            uStack252 = 0;\u000a            local_118 = 0;\u000a            uStack276 = 0;\u000a            uStack272 = 0;\u000a            uStack268 = 0;\u000a            local_128 = 0;\u000a            uStack292 = 0;\u000a            uStack288 = 0;\u000a            uStack284 = 0;\u000a            local_138 = 0;\u000a            uStack308 = 0;\u000a            uStack304 = 0;\u000a            uStack300 = 0;\u000a            local_e0 = 1;\u000a            local_c0 = 1;\u000a            uStack196 = 0x100;\u000a            local_c8 = 0x1000000;\u000a            uStack204 = 0x1000000;\u000a            uStack208 = 0x100;\u000a            uStack244 = 0x1010100;\u000a            local_f8 = 0x100;\u000a            uStack215 = 1;\u000a            local_d1 = 1;\u000a            uStack213 = 1;\u000a            uStack212 = 1;\u000a            local_d3 = 1;\u000a            uStack210 = 1;\u000a            lVar3 = 0;\u000a            pFVar8 = (FILE *)0x1;\u000a            do {\u000a              switch(((byte *)format)[(long)pFVar8]) {\u000a              case 0x20:\u000a              case 0x2b:\u000a              case 0x2d:\u000a                break;\u000a              default:\u000a                goto switchD_00401da8_caseD_21;\u000a              case 0x23:\u000a                uStack196 = 0;\u000a                local_c8 = 0;\u000a                uStack208 = 0;\u000a                uStack213 = 0;\u000a                uStack212 = 0;\u000a                break;\u000a              case 0x27:\u000a              case 0x49:\u000a                local_e0 = 0;\u000a                local_c0 = 0;\u000a                local_c8 = 0;\u000a                uStack204 = 0;\u000a                uStack244 = uStack244 & 0xffff0000;\u000a                local_d3 = 0;\u000a                uStack213 = 0;\u000a                local_f8 = 0;\u000a                uStack215 = 0;\u000a                break;\u000a              case 0x30:\u000a                local_c8 = 0;\u000a                uStack213 = 0;\u000a              }\u000a              pFVar8 = (FILE *)((long)&pFVar8->_flags + 1);\u000a              lVar3 = lVar3 + 1;\u000a            } while( true );\u000a          }\u000a          putchar_unlocked(0x25);\u000a          format = (char *)pbVar9;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      putchar_unlocked(__c);\u000a    }\u000a  }\u000a  goto LAB_00402060;\u000aswitchD_00401da8_caseD_21:\u000a  if (((byte *)format)[(long)pFVar8] == 0x2a) {\u000a    pbVar9 = (byte *)format + 1 + (long)pFVar8;\u000a    pFVar8 = (FILE *)((long)&pFVar8->_flags + 1);\u000a    uVar10 = CONCAT71((int7)((ulong)argv >> 8),1);\u000a    if (iVar11 < 1) {\u000a      bVar7 = *pbVar9;\u000a      argv = (char **)pFVar8;\u000a    }\u000a    else {\u000a      iVar4 = vstrtoimax(*in_RDX);\u000a      if (iVar4 - 0x80000000U >> 0x20 != 0) {\u000a        uVar6 = dcgettext(0,"invalid field width: %s",5);\u000a        quote(*in_RDX);\u000a        uVar10 = 0;\u000a        error(1,0,uVar6);\u000a      }\u000a      uVar10 = CONCAT71((int7)(uVar10 >> 8),1);\u000a      in_RDX = in_RDX + 1;\u000a      iVar11 = iVar11 + -1;\u000a      bVar7 = *pbVar9;\u000a      argv = (char **)pFVar8;\u000a    }\u000a  }\u000a  else {\u000a    pbVar9 = (byte *)format + (long)pFVar8;\u000a    if ((int)(char)*pbVar9 - 0x30U < 10) {\u000a      do {\u000a        lVar5 = lVar3;\u000a        lVar3 = lVar5 + 1;\u000a      } while ((int)(char)((byte *)format)[lVar5 + 2] - 0x30U < 10);\u000a      pbVar9 = (byte *)format + lVar5 + 2;\u000a      uVar10 = 0;\u000a      bVar7 = *pbVar9;\u000a      argv = (char **)(lVar5 + 2);\u000a    }\u000a    else {\u000a      uVar10 = 0;\u000a      bVar7 = *pbVar9;\u000a      argv = (char **)pFVar8;\u000a    }\u000a  }\u000a  if (bVar7 == 0x2e) {\u000a    uStack213 = 0;\u000a    if (pbVar9[1] == 0x2a) {\u000a      pbVar9 = pbVar9 + 2;\u000a      argv = (char **)((long)&((FILE *)argv)->_flags + 2);\u000a      if (0 < iVar11) {\u000a        uVar10 = uVar10 & 0xffffffff;\u000a        iVar4 = vstrtoimax(*in_RDX);\u000a        if ((-1 < iVar4) && (0x7fffffff < iVar4)) {\u000a          uVar6 = dcgettext(0,"invalid precision: %s",5);\u000a          quote(*in_RDX);\u000a          error(1,0,uVar6);\u000a        }\u000a        in_RDX = in_RDX + 1;\u000a        iVar11 = iVar11 + -1;\u000a      }\u000a    }\u000a    else {\u000a      do {\u000a        argv = (char **)((long)&((FILE *)argv)->_flags + 1);\u000a        pbVar1 = pbVar9 + 1;\u000a        pbVar9 = pbVar9 + 1;\u000a      } while ((int)(char)*pbVar1 - 0x30U < 10);\u000a    }\u000a  }\u000a  while( true ) {\u000a    bVar7 = *pbVar9 + 0xb4;\u000a    if ((0x2e < bVar7) || ((uVar10 >> ((ulong)bVar7 & 0x1f) & 1) == 0)) break;\u000a    pbVar9 = pbVar9 + 1;\u000a  }\u000a  if (*(char *)((long)&local_138 + (ulong)*pbVar9) == 0) {\u000a    uVar10 = uVar10 & 0xffffffff;\u000a    uVar6 = dcgettext(0,"%.*s: invalid conversion specification",5);\u000a    error(1,0,uVar6,(ulong)(uint)(((int)pbVar9 + 1) - (int)format),format);\u000a  }\u000a  if (0 < iVar11) {\u000a    iVar11 = iVar11 + -1;\u000a    in_RDX = in_RDX + 1;\u000a  }\u000a  print_direc(format,(size_t)argv,(int)(char)*pbVar9,(char *)(uVar10 & 0xff));\u000a  format = (char *)pbVar9;\u000aLAB_00402060:\u000a  bVar7 = ((byte *)format)[1];\u000a  format = (char *)((byte *)format + 1);\u000a  goto joined_r0x00401bd5;\u000a}\u000a\u000a
p143
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x128\nMOV R12,RDX\nMOV R15D,ESI\nMOV R13,RDI\nMOV AL,byte ptr [R13]\nTEST AL,AL\nMOV dword ptr [RSP + 0xc],R15D\nJZ 0x00402071\nMOV R14,0x410150000001\nMOV R15D,dword ptr [RSP + 0xc]\nXOR ECX,ECX\nMOV qword ptr [RSP + 0x10],RCX\nMOV dword ptr [RSP + 0x8],0x0\nNOP dword ptr [RAX]\nMOVSX EDI,AL\nCMP EDI,0x5c\nJZ 0x00401c40\nCMP EDI,0x25\nJNZ 0x00401c60\nLEA RBP,[R13 + 0x1]\nMOV AL,byte ptr [R13 + 0x1]\nCMP AL,0x71\nJZ 0x00401c6d\nCMP AL,0x62\nJZ 0x00401c95\nCMP AL,0x25\nJNZ 0x00401cb3\nMOV EDI,0x25\nCALL 0x004014e0\nJMP 0x00402060\nXOR ESI,ESI\nMOV RDI,R13\nCALL 0x004023f0\nMOVSXD RBP,EAX\nADD RBP,R13\nJMP 0x00402060\nCALL 0x004014e0\nMOV RBP,R13\nJMP 0x00402060\nTEST R15D,R15D\nJLE 0x00402060\nMOV RSI,qword ptr [R12]\nMOV EDI,0x3\nCALL 0x00403ce0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x00401490\nJMP 0x00401ca7\nTEST R15D,R15D\nJLE 0x00402060\nMOV RDI,qword ptr [R12]\nCALL 0x00402090\nADD R12,0x8\nDEC R15D\nJMP 0x00402060\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [0x110 + RSP],XMM0\nMOVAPS xmmword ptr [0x100 + RSP],XMM0\nMOVAPS xmmword ptr [0xf0 + RSP],XMM0\nMOVAPS xmmword ptr [0xe0 + RSP],XMM0\nMOVAPS xmmword ptr [0xd0 + RSP],XMM0\nMOVAPS xmmword ptr [0xc0 + RSP],XMM0\nMOVAPS xmmword ptr [0xb0 + RSP],XMM0\nMOVAPS xmmword ptr [0xa0 + RSP],XMM0\nMOVAPS xmmword ptr [0x90 + RSP],XMM0\nMOVAPS xmmword ptr [0x80 + RSP],XMM0\nMOVAPS xmmword ptr [RSP + 0x70],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM0\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x40],XMM0\nMOVAPS xmmword ptr [RSP + 0x30],XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOV byte ptr [RSP + 0x78],0x1\nMOV byte ptr [0x98 + RSP],0x1\nMOV byte ptr [0x95 + RSP],0x1\nMOV byte ptr [0x93 + RSP],0x1\nMOV byte ptr [0x8f + RSP],0x1\nMOV byte ptr [0x89 + RSP],0x1\nMOV byte ptr [RSP + 0x67],0x1\nMOV byte ptr [RSP + 0x66],0x1\nMOV byte ptr [RSP + 0x65],0x1\nMOV byte ptr [RSP + 0x61],0x1\nMOV byte ptr [0x81 + RSP],0x1\nLEA RAX,[0x83 + RSP]\nMOV byte ptr [RAX + 0x4],0x1\nMOV dword ptr [RAX],0x1010101\nXOR EAX,EAX\nMOV EBX,0x1\nJMP 0x00401d96\nINC RBX\nINC RAX\nMOVSX ECX,byte ptr [R13 + RBX*0x1]\nLEA EDX,[RCX + -0x20]\nCMP EDX,0x29\nJA 0x00401e2c\nJMP qword ptr [0x4056b0 + RDX*0x8]\nMOV byte ptr [RSP + 0x78],0x0\nMOV byte ptr [0x98 + RSP],0x0\nMOV byte ptr [0x93 + RSP],0x0\nMOV byte ptr [0x8f + RSP],0x0\nMOV byte ptr [RSP + 0x65],0x0\nMOV byte ptr [0x85 + RSP],0x0\nMOV byte ptr [0x83 + RSP],0x0\nMOV byte ptr [RSP + 0x61],0x0\nMOV byte ptr [0x81 + RSP],0x0\nJMP 0x00401d90\nMOV byte ptr [0x95 + RSP],0x0\nMOV byte ptr [0x93 + RSP],0x0\nMOV byte ptr [0x89 + RSP],0x0\nMOV word ptr [0x83 + RSP],0x0\nJMP 0x00401d90\nMOV byte ptr [0x93 + RSP],0x0\nMOV byte ptr [0x83 + RSP],0x0\nJMP 0x00401d90\nCMP CL,0x2a\nJNZ 0x00401e63\nLEA RBP,[R13 + RBX*0x1 + 0x1]\nINC RBX\nMOV SIL,0x1\nTEST R15D,R15D\nJLE 0x00401eb6\nMOV RDI,qword ptr [R12]\nCALL 0x004020e0\nMOV RCX,RAX\nSUB RCX,0x80000000\nSHR RCX,0x20\nJNZ 0x00401ec9\nMOV dword ptr [RSP + 0x8],EAX\nJMP 0x00401efc\nLEA RBP,[R13 + RBX*0x1]\nMOVSX ECX,byte ptr [RBP]\nADD ECX,-0x30\nCMP ECX,0x9\nJA 0x00401ea9\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVSX ECX,byte ptr [R13 + RAX*0x1 + 0x2]\nADD ECX,-0x30\nINC RAX\nCMP ECX,0xa\nJC 0x00401e80\nLEA RBP,[R13 + RAX*0x1 + 0x1]\nINC RAX\nXOR ESI,ESI\nMOV RBX,RAX\nCMP byte ptr [RBP],0x2e\nJZ 0x00401f10\nJMP 0x00401f92\nXOR ESI,ESI\nCMP byte ptr [RBP],0x2e\nJZ 0x00401f10\nJMP 0x00401f92\nMOV dword ptr [RSP + 0x8],0x0\nCMP byte ptr [RBP],0x2e\nJZ 0x00401f10\nJMP 0x00401f92\nXOR EDI,EDI\nMOV ESI,0x406283\nMOV EDX,0x5\nCALL 0x004013d0\nMOV qword ptr [RSP],RAX\nMOV RDI,qword ptr [R12]\nCALL 0x00403f00\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,qword ptr [RSP]\nCALL 0x00401590\nMOV SIL,0x1\nADD R12,0x8\nDEC R15D\nCMP byte ptr [RBP],0x2e\nJNZ 0x00401f92\nMOV byte ptr [0x83 + RSP],0x0\nCMP byte ptr [RBP + 0x1],0x2a\nJNZ 0x00401f80\nADD RBP,0x2\nADD RBX,0x2\nMOV DIL,0x1\nTEST R15D,R15D\nJLE 0x00401f96\nMOV dword ptr [RSP],ESI\nMOV RDI,qword ptr [R12]\nCALL 0x004020e0\nTEST RAX,RAX\nJS 0x00401f9f\nMOV ECX,0x80000000\nCMP RAX,RCX\nJL 0x00401fa6\nXOR EDI,EDI\nMOV ESI,0x40629b\nMOV EDX,0x5\nCALL 0x004013d0\nMOV qword ptr [RSP + 0x18],RAX\nMOV RDI,qword ptr [R12]\nCALL 0x00403f00\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,qword ptr [RSP + 0x18]\nCALL 0x00401590\nJMP 0x00401fab\nINC RBX\nMOVSX EAX,byte ptr [RBP + 0x1]\nINC RBP\nADD EAX,-0x30\nCMP EAX,0xa\nJC 0x00401f80\nXOR EDI,EDI\nJMP 0x00401fc3\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00401fc3\nMOV EAX,0xffffffff\nJMP 0x00401fa6\nMOV qword ptr [RSP + 0x10],RAX\nMOV ESI,dword ptr [RSP]\nMOV DIL,0x1\nADD R12,0x8\nDEC R15D\nJMP 0x00401fc3\nINC RBP\nMOVZX EAX,byte ptr [RBP]\nMOV ECX,EAX\nADD CL,0xb4\nCMP CL,0x2e\nJA 0x00401fda\nMOVZX ECX,CL\nBT RSI,RCX\nJC 0x00401fc0\nCMP byte ptr [RSP + RAX*0x1 + 0x20],0x0\nJNZ 0x00402022\nMOV dword ptr [RSP + 0x18],EDI\nXOR EDI,EDI\nMOV qword ptr [RSP],R12\nMOV R12D,ESI\nMOV ESI,0x4062b1\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nLEA ECX,[RBP + 0x1]\nSUB ECX,R13D\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV R8,R13\nCALL 0x00401590\nMOV EDI,dword ptr [RSP + 0x18]\nMOV ESI,R12D\nMOV R12,qword ptr [RSP]\nMOV CL,byte ptr [RBP]\nTEST R15D,R15D\nJLE 0x00402037\nDEC R15D\nMOV RAX,qword ptr [R12]\nADD R12,0x8\nJMP 0x0040203c\nMOV EAX,0x406b41\nMOVSX EDX,CL\nMOVZX ECX,SIL\nMOVZX R9D,DIL\nMOV RDI,R13\nMOV RSI,RBX\nMOV R8D,dword ptr [RSP + 0x8]\nPUSH RAX\nPUSH qword ptr [RSP + 0x18]\nCALL 0x00402170\nADD RSP,0x10\nMOV AL,byte ptr [RBP + 0x1]\nINC RBP\nTEST AL,AL\nMOV R13,RBP\nJNZ 0x00401c00\nMOV EAX,dword ptr [RSP + 0xc]\nSUB EAX,R15D\nADD RSP,0x128\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p144
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 28 01 00 00\n49 89 d4\n41 89 f7\n49 89 fd\n41 8a 45 00\n84 c0\n44 89 7c 24 0c\n0f 84 96 04 00 00\n49 be 01 00 00 50 01 41 00 00\n44 8b 7c 24 0c\n31 c9\n48 89 4c 24 10\nc7 44 24 08 00 00 00 00\n0f 1f 80 00 00 00 00\n0f be f8\n83 ff 5c\n74 38\n83 ff 25\n75 53\n49 8d 6d 01\n41 8a 45 01\n3c 71\n74 54\n3c 62\n74 78\n3c 25\n0f 85 8e 00 00 00\nbf 25 00 00 00\ne8 b1 f8 ff ff\ne9 2c 04 00 00\n31 f6\n4c 89 ef\ne8 a6 07 00 00\n48 63 e8\n4c 01 ed\ne9 0b 04 00 00\ne8 7b f8 ff ff\n4c 89 ed\ne9 f3 03 00 00\n45 85 ff\n0f 8e ea 03 00 00\n49 8b 34 24\nbf 03 00 00 00\ne8 5c 20 00 00\n48 8b 35 dd 75 20 00\n48 89 c7\ne8 fd f7 ff ff\neb 12\n45 85 ff\n0f 8e c2 03 00 00\n49 8b 3c 24\ne8 e9 03 00 00\n49 83 c4 08\n41 ff cf\ne9 ad 03 00 00\n0f 57 c0\n0f 29 84 24 10 01 00 00\n0f 29 84 24 00 01 00 00\n0f 29 84 24 f0 00 00 00\n0f 29 84 24 e0 00 00 00\n0f 29 84 24 d0 00 00 00\n0f 29 84 24 c0 00 00 00\n0f 29 84 24 b0 00 00 00\n0f 29 84 24 a0 00 00 00\n0f 29 84 24 90 00 00 00\n0f 29 84 24 80 00 00 00\n0f 29 44 24 70\n0f 29 44 24 60\n0f 29 44 24 50\n0f 29 44 24 40\n0f 29 44 24 30\n0f 29 44 24 20\nc6 44 24 78 01\nc6 84 24 98 00 00 00 01\nc6 84 24 95 00 00 00 01\nc6 84 24 93 00 00 00 01\nc6 84 24 8f 00 00 00 01\nc6 84 24 89 00 00 00 01\nc6 44 24 67 01\nc6 44 24 66 01\nc6 44 24 65 01\nc6 44 24 61 01\nc6 84 24 81 00 00 00 01\n48 8d 84 24 83 00 00 00\nc6 40 04 01\nc7 00 01 01 01 01\n31 c0\nbb 01 00 00 00\neb 0e\n48 ff c3\n48 ff c0\n41 0f be 4c 1d 00\n8d 51 e0\n83 fa 29\n0f 87 84 00 00 00\nff 24 d5 b0 56 40 00\nc6 44 24 78 00\nc6 84 24 98 00 00 00 00\nc6 84 24 93 00 00 00 00\nc6 84 24 8f 00 00 00 00\nc6 44 24 65 00\nc6 84 24 85 00 00 00 00\nc6 84 24 83 00 00 00 00\nc6 44 24 61 00\nc6 84 24 81 00 00 00 00\neb a0\nc6 84 24 95 00 00 00 00\nc6 84 24 93 00 00 00 00\nc6 84 24 89 00 00 00 00\n66 c7 84 24 83 00 00 00 00 00\ne9 79 ff ff ff\nc6 84 24 93 00 00 00 00\nc6 84 24 83 00 00 00 00\ne9 64 ff ff ff\n80 f9 2a\n75 32\n49 8d 6c 1d 01\n48 ff c3\n40 b6 01\n45 85 ff\n7e 75\n49 8b 3c 24\ne8 96 02 00 00\n48 89 c1\n48 81 e9 00 00 00 80\n48 c1 e9 20\n75 6f\n89 44 24 08\ne9 99 00 00 00\n49 8d 6c 1d 00\n0f be 4d 00\n83 c1 d0\n83 f9 09\n77 35\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n41 0f be 4c 05 02\n83 c1 d0\n48 ff c0\n83 f9 0a\n72 ef\n49 8d 6c 05 01\n48 ff c0\n31 f6\n48 89 c3\n80 7d 00 2e\n74 6c\ne9 e9 00 00 00\n31 f6\n80 7d 00 2e\n74 5f\ne9 dc 00 00 00\nc7 44 24 08 00 00 00 00\n80 7d 00 2e\n74 4c\ne9 c9 00 00 00\n31 ff\nbe 83 62 40 00\nba 05 00 00 00\ne8 f6 f4 ff ff\n48 89 04 24\n49 8b 3c 24\ne8 19 20 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 8b 14 24\ne8 94 f6 ff ff\n40 b6 01\n49 83 c4 08\n41 ff cf\n80 7d 00 2e\n0f 85 82 00 00 00\nc6 84 24 83 00 00 00 00\n80 7d 01 2a\n75 62\n48 83 c5 02\n48 83 c3 02\n40 b7 01\n45 85 ff\n7e 68\n89 34 24\n49 8b 3c 24\ne8 a6 01 00 00\n48 85 c0\n78 60\nb9 00 00 00 80\n48 39 c8\n7c 5d\n31 ff\nbe 9b 62 40 00\nba 05 00 00 00\ne8 76 f4 ff ff\n48 89 44 24 18\n49 8b 3c 24\ne8 98 1f 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 8b 54 24 18\ne8 12 f6 ff ff\neb 2b\n48 ff c3\n0f be 45 01\n48 ff c5\n83 c0 d0\n83 f8 0a\n72 ee\n31 ff\neb 2d\n31 c0\n48 89 44 24 10\neb 24\nb8 ff ff ff ff\neb 00\n48 89 44 24 10\n8b 34 24\n40 b7 01\n49 83 c4 08\n41 ff cf\neb 09\n48 ff c5\n0f b6 45 00\n89 c1\n80 c1 b4\n80 f9 2e\n77 09\n0f b6 c9\n49 0f a3 ce\n72 e6\n80 7c 04 20 00\n75 41\n89 7c 24 18\n31 ff\n4c 89 24 24\n41 89 f4\nbe b1 62 40 00\nba 05 00 00 00\ne8 d3 f3 ff ff\n48 89 c2\n8d 4d 01\n44 29 e9\nbf 01 00 00 00\n31 f6\n31 c0\n4d 89 e8\ne8 79 f5 ff ff\n8b 7c 24 18\n44 89 e6\n4c 8b 24 24\n8a 4d 00\n45 85 ff\n7e 0d\n41 ff cf\n49 8b 04 24\n49 83 c4 08\neb 05\nb8 41 6b 40 00\n0f be d1\n40 0f b6 ce\n44 0f b6 cf\n4c 89 ef\n48 89 de\n44 8b 44 24 08\n50\nff 74 24 18\ne8 14 01 00 00\n48 83 c4 10\n8a 45 01\n48 ff c5\n84 c0\n49 89 ed\n0f 85 8f fb ff ff\n8b 44 24 0c\n44 29 f8\n48 81 c4 28 01 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p145
S'.text:0000000000401bb0\n.text:0000000000401bb1\n.text:0000000000401bb3\n.text:0000000000401bb5\n.text:0000000000401bb7\n.text:0000000000401bb9\n.text:0000000000401bba\n.text:0000000000401bc1\n.text:0000000000401bc4\n.text:0000000000401bc7\n.text:0000000000401bca\n.text:0000000000401bce\n.text:0000000000401bd0\n.text:0000000000401bd5\n.text:0000000000401bdb\n.text:0000000000401be5\n.text:0000000000401bea\n.text:0000000000401bec\n.text:0000000000401bf1\n.text:0000000000401bf9\n.text:0000000000401c00\n.text:0000000000401c03\n.text:0000000000401c06\n.text:0000000000401c08\n.text:0000000000401c0b\n.text:0000000000401c0d\n.text:0000000000401c11\n.text:0000000000401c15\n.text:0000000000401c17\n.text:0000000000401c19\n.text:0000000000401c1b\n.text:0000000000401c1d\n.text:0000000000401c1f\n.text:0000000000401c25\n.text:0000000000401c2a\n.text:0000000000401c2f\n.text:0000000000401c40\n.text:0000000000401c42\n.text:0000000000401c45\n.text:0000000000401c4a\n.text:0000000000401c4d\n.text:0000000000401c50\n.text:0000000000401c60\n.text:0000000000401c65\n.text:0000000000401c68\n.text:0000000000401c6d\n.text:0000000000401c70\n.text:0000000000401c76\n.text:0000000000401c7a\n.text:0000000000401c7f\n.text:0000000000401c84\n.text:0000000000401c8b\n.text:0000000000401c8e\n.text:0000000000401c93\n.text:0000000000401c95\n.text:0000000000401c98\n.text:0000000000401c9e\n.text:0000000000401ca2\n.text:0000000000401ca7\n.text:0000000000401cab\n.text:0000000000401cae\n.text:0000000000401cb3\n.text:0000000000401cb6\n.text:0000000000401cbe\n.text:0000000000401cc6\n.text:0000000000401cce\n.text:0000000000401cd6\n.text:0000000000401cde\n.text:0000000000401ce6\n.text:0000000000401cee\n.text:0000000000401cf6\n.text:0000000000401cfe\n.text:0000000000401d06\n.text:0000000000401d0b\n.text:0000000000401d10\n.text:0000000000401d15\n.text:0000000000401d1a\n.text:0000000000401d1f\n.text:0000000000401d24\n.text:0000000000401d29\n.text:0000000000401d31\n.text:0000000000401d39\n.text:0000000000401d41\n.text:0000000000401d49\n.text:0000000000401d51\n.text:0000000000401d56\n.text:0000000000401d5b\n.text:0000000000401d60\n.text:0000000000401d65\n.text:0000000000401d6d\n.text:0000000000401d75\n.text:0000000000401d79\n.text:0000000000401d7f\n.text:0000000000401d81\n.text:0000000000401d86\n.text:0000000000401d90\n.text:0000000000401d93\n.text:0000000000401d96\n.text:0000000000401d9c\n.text:0000000000401d9f\n.text:0000000000401da2\n.text:0000000000401da8\n.text:0000000000401daf\n.text:0000000000401db4\n.text:0000000000401dbc\n.text:0000000000401dc4\n.text:0000000000401dcc\n.text:0000000000401dd1\n.text:0000000000401dd9\n.text:0000000000401de1\n.text:0000000000401de6\n.text:0000000000401dee\n.text:0000000000401df0\n.text:0000000000401df8\n.text:0000000000401e00\n.text:0000000000401e08\n.text:0000000000401e12\n.text:0000000000401e17\n.text:0000000000401e1f\n.text:0000000000401e27\n.text:0000000000401e2c\n.text:0000000000401e2f\n.text:0000000000401e31\n.text:0000000000401e36\n.text:0000000000401e39\n.text:0000000000401e3c\n.text:0000000000401e3f\n.text:0000000000401e41\n.text:0000000000401e45\n.text:0000000000401e4a\n.text:0000000000401e4d\n.text:0000000000401e54\n.text:0000000000401e58\n.text:0000000000401e5a\n.text:0000000000401e5e\n.text:0000000000401e63\n.text:0000000000401e68\n.text:0000000000401e6c\n.text:0000000000401e6f\n.text:0000000000401e72\n.text:0000000000401e74\n.text:0000000000401e80\n.text:0000000000401e86\n.text:0000000000401e89\n.text:0000000000401e8c\n.text:0000000000401e8f\n.text:0000000000401e91\n.text:0000000000401e96\n.text:0000000000401e99\n.text:0000000000401e9b\n.text:0000000000401e9e\n.text:0000000000401ea2\n.text:0000000000401ea4\n.text:0000000000401ea9\n.text:0000000000401eab\n.text:0000000000401eaf\n.text:0000000000401eb1\n.text:0000000000401eb6\n.text:0000000000401ebe\n.text:0000000000401ec2\n.text:0000000000401ec4\n.text:0000000000401ec9\n.text:0000000000401ecb\n.text:0000000000401ed0\n.text:0000000000401ed5\n.text:0000000000401eda\n.text:0000000000401ede\n.text:0000000000401ee2\n.text:0000000000401ee7\n.text:0000000000401eea\n.text:0000000000401eef\n.text:0000000000401ef1\n.text:0000000000401ef3\n.text:0000000000401ef7\n.text:0000000000401efc\n.text:0000000000401eff\n.text:0000000000401f03\n.text:0000000000401f06\n.text:0000000000401f0a\n.text:0000000000401f10\n.text:0000000000401f18\n.text:0000000000401f1c\n.text:0000000000401f1e\n.text:0000000000401f22\n.text:0000000000401f26\n.text:0000000000401f29\n.text:0000000000401f2c\n.text:0000000000401f2e\n.text:0000000000401f31\n.text:0000000000401f35\n.text:0000000000401f3a\n.text:0000000000401f3d\n.text:0000000000401f3f\n.text:0000000000401f44\n.text:0000000000401f47\n.text:0000000000401f49\n.text:0000000000401f4b\n.text:0000000000401f50\n.text:0000000000401f55\n.text:0000000000401f5a\n.text:0000000000401f5f\n.text:0000000000401f63\n.text:0000000000401f68\n.text:0000000000401f6b\n.text:0000000000401f70\n.text:0000000000401f72\n.text:0000000000401f74\n.text:0000000000401f79\n.text:0000000000401f7e\n.text:0000000000401f80\n.text:0000000000401f83\n.text:0000000000401f87\n.text:0000000000401f8a\n.text:0000000000401f8d\n.text:0000000000401f90\n.text:0000000000401f92\n.text:0000000000401f94\n.text:0000000000401f96\n.text:0000000000401f98\n.text:0000000000401f9d\n.text:0000000000401f9f\n.text:0000000000401fa4\n.text:0000000000401fa6\n.text:0000000000401fab\n.text:0000000000401fae\n.text:0000000000401fb1\n.text:0000000000401fb5\n.text:0000000000401fb8\n.text:0000000000401fc0\n.text:0000000000401fc3\n.text:0000000000401fc7\n.text:0000000000401fc9\n.text:0000000000401fcc\n.text:0000000000401fcf\n.text:0000000000401fd1\n.text:0000000000401fd4\n.text:0000000000401fd8\n.text:0000000000401fda\n.text:0000000000401fdf\n.text:0000000000401fe1\n.text:0000000000401fe5\n.text:0000000000401fe7\n.text:0000000000401feb\n.text:0000000000401fee\n.text:0000000000401ff3\n.text:0000000000401ff8\n.text:0000000000401ffd\n.text:0000000000402000\n.text:0000000000402003\n.text:0000000000402006\n.text:000000000040200b\n.text:000000000040200d\n.text:000000000040200f\n.text:0000000000402012\n.text:0000000000402017\n.text:000000000040201b\n.text:000000000040201e\n.text:0000000000402022\n.text:0000000000402025\n.text:0000000000402028\n.text:000000000040202a\n.text:000000000040202d\n.text:0000000000402031\n.text:0000000000402035\n.text:0000000000402037\n.text:000000000040203c\n.text:000000000040203f\n.text:0000000000402043\n.text:0000000000402047\n.text:000000000040204a\n.text:000000000040204d\n.text:0000000000402052\n.text:0000000000402053\n.text:0000000000402057\n.text:000000000040205c\n.text:0000000000402060\n.text:0000000000402063\n.text:0000000000402066\n.text:0000000000402068\n.text:000000000040206b\n.text:0000000000402071\n.text:0000000000402075\n.text:0000000000402078\n.text:000000000040207f\n.text:0000000000402080\n.text:0000000000402082\n.text:0000000000402084\n.text:0000000000402086\n.text:0000000000402088\n.text:0000000000402089\n'
p146
tp147
sS'frame_dummy'
p148
(S'\n__stdcall frame_dummy()\n'
p149
V\u000a/* WARNING: Removing unreachable block (ram,0x0040174a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p150
S'MOV EDI,0x608e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401740\nJMP 0x004016d0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040173b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x004016d0\n'
p151
S'bf 18 8e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p152
S'.text:0000000000401730\n.text:0000000000401735\n.text:0000000000401739\n.text:000000000040173b\n.text:0000000000401740\n.text:0000000000401745\n.text:0000000000401748\n.text:000000000040174a\n.text:000000000040174b\n.text:000000000040174e\n.text:0000000000401750\n.text:0000000000401751\n'
p153
tp154
sS'quotearg_buffer_restyled'
p155
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p156
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_00402cbc_caseD_7;\u000a  case 2:\u000a    goto switchD_00402cbc_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_00402cbc_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_00402cbc_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_00402cbc_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_00402cbc_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_00402cbc_caseD_7;\u000aswitchD_00402cbc_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_00402cbc_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_00402cbc_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00403780;\u000aLAB_00402ea0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00403789:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00403798:\u000a      left_quote_00 = &DAT_00000004;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_00402eab:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_00402eef:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_00402eef;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00403798;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_004036c5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x004035d0;\u000a    }\u000a    goto LAB_00403798;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_004036fa;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00403798;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403729;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_004031e8;\u000a  case '\u005ca':\u000a    goto joined_r0x004030d8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x004030d8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00402f06_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x004030d8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x004030d8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00402f06_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x004030d8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040363e;\u000a    }\u000a    goto LAB_00403798;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00403798;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00403798;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00403798;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00403798;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00403798;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00402f06_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00403696;\u000a      goto joined_r0x00403688;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403191:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403688;\u000a      goto LAB_00403696;\u000a    }\u000a    goto LAB_00403798;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00403798;\u000a  }\u000a  goto joined_r0x004035d0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_004036fa:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403729;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403729:\u000a  if (1 < uVar10) {\u000aLAB_00403206:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_004032c2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403191;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_004032c2:\u000a        if (bVar6 != 0) goto LAB_00403798;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_004031e8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403206;\u000ajoined_r0x004035d0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x004035d0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_004035f7;\u000aLAB_00403630:\u000a    if (bVar22) goto LAB_00403635;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00403630;\u000aLAB_004035f7:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00403635:\u000a      if (bVar6 != 0) goto LAB_00403798;\u000aLAB_0040363e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403688;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00403696:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403688:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_004036c5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00402ea0;\u000aLAB_00403780:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00403789;\u000a  goto LAB_00402eab;\u000a}\u000a\u000a
p157
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004013e0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00403865\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x406420 + RAX*0x8]\nMOV EDI,0x406948\nMOV ESI,R15D\nCALL 0x00403f10\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x40694a\nMOV ESI,R15D\nCALL 0x00403f10\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x00402d1d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00402d20\nNOP\nCMP R12,RSI\nJNC 0x00402d0e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00402d00\nJMP 0x00402d20\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004013f0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x00402dec\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x00402dec\nMOV ECX,0x406946\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00402de6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00402d87\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00402db4\nTEST RSI,RSI\nJZ 0x00402da1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x40694a\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00402dc2\nMOV ECX,0x40694a\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x00402dec\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040383c\nMOV ECX,0x406946\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00403780\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00403789\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x00402eef\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x00402eea\nCMP R11,-0x1\nJNZ 0x00402eea\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004013f0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00402f40\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040319c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x406478 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00403798\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x004035f0\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x004035f7\nJMP 0x00403630\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401480\nTEST EAX,EAX\nSETZ AL\nJNZ 0x00402f8d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00402ef1\nJMP 0x00403798\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00402ef1\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x00402f1b\nCMP EBX,0x2\nJNZ 0x00402f1b\nTEST R13,R13\nJNZ 0x00402f1b\nJMP 0x00403798\nCMP R11,-0x1\nJZ 0x00403373\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403393\nJMP 0x00402f1b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004033a4\nTEST R8B,R8B\nJNZ 0x00403798\nCMP EBX,0x2\nJNZ 0x00403048\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403048\nCMP R12,RSI\nJNC 0x00403023\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403032\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403041\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403052\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403518\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403518\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403518\nCMP RCX,RSI\nJNC 0x0040308c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040309b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402f26\nJMP 0x004035f0\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402f19\nJMP 0x004030fa\nMOV DL,0x74\nJMP 0x004030e2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402f19\nJMP 0x004030fa\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402f19\nJMP 0x004030fa\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00403798\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402f19\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040363e\nJMP 0x00403798\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00402f19\nTEST R8B,R8B\nJNZ 0x00403798\nCMP R12,RSI\nJNC 0x0040312a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403139\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403148\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00402f19\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040352b\nCMP EBX,0x2\nJNZ 0x00402f19\nTEST R8B,R8B\nJZ 0x00402f19\nJMP 0x00403798\nCMP EBX,0x2\nJNZ 0x004033c4\nTEST R8B,R8B\nJNZ 0x00403798\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00403696\nJMP 0x004036b9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x004033e5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401640\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004035d8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x004035d8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x004032c2\nJMP 0x00403290\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403279\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403276\nCMP R12,RSI\nJNC 0x0040325b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040326a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x004032b0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x004032b0\nTEST BPL,0x1\nJZ 0x00403353\nCMP R12,RSI\nJNC 0x004032a4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403353\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403290\nTEST R8B,R8B\nJNZ 0x00403798\nCMP EBX,0x2\nJNZ 0x0040330a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040330a\nCMP R12,RSI\nJNC 0x004032e2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004032f1\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403300\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403314\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040332b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403345\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403240\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00403696\nJMP 0x004036b9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x00402f1b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x00402f1b\nJMP 0x00403798\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x004036c5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402f26\nJMP 0x004035f0\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x004030e2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00403696\nJMP 0x004036b9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403407\nMOV RDI,R10\nCALL 0x004013f0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401400\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004036df\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x004036d7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004036e6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x004034ce\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x004034c6\nBT RDI,RDX\nJC 0x00403832\nINC RCX\nCMP RCX,R14\nJC 0x004034b0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401630\nTEST EAX,EAX\nJNZ 0x004034e3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401620\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403425\nJMP 0x00403729\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402f26\nJMP 0x004035f0\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00402f19\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00402f19\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00402f19\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x00402f1b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00403762\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00403798\nCMP R12,RSI\nJNC 0x0040358e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x004035a1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004035b0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x004035bf\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402f26\nJMP 0x004035f0\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402f26\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00403630\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00403635\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00403690\nJMP 0x00403635\nTEST BPL,BPL\nJZ 0x00403690\nTEST R8B,R8B\nJNZ 0x00403798\nCMP EBX,0x2\nJNZ 0x00403678\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403678\nCMP R12,RSI\nJNC 0x00403653\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403662\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403671\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403682\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x004036c2\nJMP 0x004036be\nTEST DIL,0x1\nJZ 0x004036b9\nAND AL,0x1\nJNZ 0x004036b9\nCMP R12,RSI\nJNC 0x004036a4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004036b3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x004036c2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00403780\nJMP 0x00402ea0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403724\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040371c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00403758\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x004036fa\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403729\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x004031e8\nJMP 0x00403206\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403729\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402f26\nJMP 0x004035f0\nCMP R13,R11\nJNZ 0x00402eab\nTEST R8B,R8B\nJZ 0x004037f2\nCMP EBX,0x2\nJNZ 0x004037f2\nTEST R12,R12\nJNZ 0x004037f2\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00402c30\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00403826\nTEST R8B,R8B\nJNZ 0x00403826\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00403826\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00403819\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00403810\nCMP R12,RSI\nJNC 0x004037dd\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x004037dd\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00403798\nTEST RSI,RSI\nJZ 0x00403849\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x406946\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x00402dec\nCALL 0x00401310\n'
p158
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 82 e7 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 20 64 40 00\nbf 48 69 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 4a 69 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 c3 e6 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 46 69 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 4a 69 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 4a 69 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 46 69 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 23 e5 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 78 64 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 27 e5 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 87 e4 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 f1 df ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 b3 df ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 59 e1 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 22 e1 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 46 69 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 a6 da ff ff\n'
p159
S'.text:0000000000402c30\n.text:0000000000402c31\n.text:0000000000402c33\n.text:0000000000402c35\n.text:0000000000402c37\n.text:0000000000402c39\n.text:0000000000402c3a\n.text:0000000000402c41\n.text:0000000000402c44\n.text:0000000000402c47\n.text:0000000000402c4a\n.text:0000000000402c4f\n.text:0000000000402c54\n.text:0000000000402c59\n.text:0000000000402c5e\n.text:0000000000402c66\n.text:0000000000402c6a\n.text:0000000000402c70\n.text:0000000000402c78\n.text:0000000000402c7d\n.text:0000000000402c85\n.text:0000000000402c8a\n.text:0000000000402c8e\n.text:0000000000402c90\n.text:0000000000402c93\n.text:0000000000402c96\n.text:0000000000402c99\n.text:0000000000402c9e\n.text:0000000000402ca1\n.text:0000000000402ca4\n.text:0000000000402ca7\n.text:0000000000402caa\n.text:0000000000402cac\n.text:0000000000402caf\n.text:0000000000402cb4\n.text:0000000000402cb7\n.text:0000000000402cbc\n.text:0000000000402cc3\n.text:0000000000402cc8\n.text:0000000000402ccb\n.text:0000000000402cd0\n.text:0000000000402cd5\n.text:0000000000402cda\n.text:0000000000402cdd\n.text:0000000000402ce2\n.text:0000000000402ce7\n.text:0000000000402cec\n.text:0000000000402cee\n.text:0000000000402cf0\n.text:0000000000402cf5\n.text:0000000000402cf7\n.text:0000000000402cfa\n.text:0000000000402cfc\n.text:0000000000402cfe\n.text:0000000000402d00\n.text:0000000000402d03\n.text:0000000000402d05\n.text:0000000000402d0a\n.text:0000000000402d0e\n.text:0000000000402d14\n.text:0000000000402d17\n.text:0000000000402d19\n.text:0000000000402d1b\n.text:0000000000402d1d\n.text:0000000000402d20\n.text:0000000000402d25\n.text:0000000000402d28\n.text:0000000000402d2d\n.text:0000000000402d32\n.text:0000000000402d35\n.text:0000000000402d38\n.text:0000000000402d3b\n.text:0000000000402d3e\n.text:0000000000402d43\n.text:0000000000402d46\n.text:0000000000402d49\n.text:0000000000402d4e\n.text:0000000000402d51\n.text:0000000000402d53\n.text:0000000000402d56\n.text:0000000000402d58\n.text:0000000000402d5a\n.text:0000000000402d5d\n.text:0000000000402d62\n.text:0000000000402d67\n.text:0000000000402d6c\n.text:0000000000402d6f\n.text:0000000000402d75\n.text:0000000000402d77\n.text:0000000000402d7a\n.text:0000000000402d7d\n.text:0000000000402d80\n.text:0000000000402d82\n.text:0000000000402d84\n.text:0000000000402d87\n.text:0000000000402d8a\n.text:0000000000402d8f\n.text:0000000000402d92\n.text:0000000000402d94\n.text:0000000000402d97\n.text:0000000000402d99\n.text:0000000000402d9e\n.text:0000000000402da1\n.text:0000000000402da6\n.text:0000000000402dac\n.text:0000000000402db2\n.text:0000000000402db4\n.text:0000000000402db9\n.text:0000000000402dbf\n.text:0000000000402dc2\n.text:0000000000402dc5\n.text:0000000000402dc8\n.text:0000000000402dca\n.text:0000000000402dcf\n.text:0000000000402dd2\n.text:0000000000402dd8\n.text:0000000000402ddd\n.text:0000000000402de3\n.text:0000000000402de6\n.text:0000000000402de9\n.text:0000000000402dec\n.text:0000000000402df4\n.text:0000000000402df6\n.text:0000000000402df8\n.text:0000000000402dfb\n.text:0000000000402dff\n.text:0000000000402e01\n.text:0000000000402e04\n.text:0000000000402e08\n.text:0000000000402e0a\n.text:0000000000402e0d\n.text:0000000000402e10\n.text:0000000000402e13\n.text:0000000000402e15\n.text:0000000000402e19\n.text:0000000000402e1b\n.text:0000000000402e1f\n.text:0000000000402e22\n.text:0000000000402e25\n.text:0000000000402e28\n.text:0000000000402e2a\n.text:0000000000402e2e\n.text:0000000000402e37\n.text:0000000000402e3a\n.text:0000000000402e3c\n.text:0000000000402e40\n.text:0000000000402e42\n.text:0000000000402e46\n.text:0000000000402e48\n.text:0000000000402e4b\n.text:0000000000402e4f\n.text:0000000000402e51\n.text:0000000000402e54\n.text:0000000000402e58\n.text:0000000000402e5d\n.text:0000000000402e60\n.text:0000000000402e64\n.text:0000000000402e6c\n.text:0000000000402e6f\n.text:0000000000402e72\n.text:0000000000402e74\n.text:0000000000402e78\n.text:0000000000402e7b\n.text:0000000000402e7d\n.text:0000000000402e82\n.text:0000000000402e86\n.text:0000000000402e8b\n.text:0000000000402e90\n.text:0000000000402e94\n.text:0000000000402e9a\n.text:0000000000402ea0\n.text:0000000000402ea5\n.text:0000000000402eab\n.text:0000000000402eb0\n.text:0000000000402eb2\n.text:0000000000402eb7\n.text:0000000000402ebb\n.text:0000000000402ebd\n.text:0000000000402ec1\n.text:0000000000402ec3\n.text:0000000000402ec5\n.text:0000000000402ec8\n.text:0000000000402ecd\n.text:0000000000402ecf\n.text:0000000000402ed4\n.text:0000000000402ed9\n.text:0000000000402edd\n.text:0000000000402ee2\n.text:0000000000402ee7\n.text:0000000000402eea\n.text:0000000000402eed\n.text:0000000000402eef\n.text:0000000000402ef1\n.text:0000000000402ef6\n.text:0000000000402efa\n.text:0000000000402f00\n.text:0000000000402f02\n.text:0000000000402f04\n.text:0000000000402f06\n.text:0000000000402f0e\n.text:0000000000402f13\n.text:0000000000402f19\n.text:0000000000402f1b\n.text:0000000000402f20\n.text:0000000000402f26\n.text:0000000000402f2f\n.text:0000000000402f35\n.text:0000000000402f40\n.text:0000000000402f42\n.text:0000000000402f45\n.text:0000000000402f49\n.text:0000000000402f51\n.text:0000000000402f54\n.text:0000000000402f59\n.text:0000000000402f5b\n.text:0000000000402f5e\n.text:0000000000402f60\n.text:0000000000402f65\n.text:0000000000402f68\n.text:0000000000402f6d\n.text:0000000000402f70\n.text:0000000000402f75\n.text:0000000000402f79\n.text:0000000000402f7e\n.text:0000000000402f80\n.text:0000000000402f82\n.text:0000000000402f88\n.text:0000000000402f8d\n.text:0000000000402f92\n.text:0000000000402f95\n.text:0000000000402f9a\n.text:0000000000402f9e\n.text:0000000000402fa3\n.text:0000000000402fa8\n.text:0000000000402faa\n.text:0000000000402fac\n.text:0000000000402fb1\n.text:0000000000402fb3\n.text:0000000000402fb6\n.text:0000000000402fbc\n.text:0000000000402fbf\n.text:0000000000402fc5\n.text:0000000000402fc8\n.text:0000000000402fce\n.text:0000000000402fd3\n.text:0000000000402fd7\n.text:0000000000402fdd\n.text:0000000000402fe0\n.text:0000000000402fe3\n.text:0000000000402fe7\n.text:0000000000402fea\n.text:0000000000402fec\n.text:0000000000402fef\n.text:0000000000402ff5\n.text:0000000000402ffa\n.text:0000000000402fff\n.text:0000000000403005\n.text:0000000000403008\n.text:000000000040300e\n.text:0000000000403011\n.text:0000000000403013\n.text:0000000000403015\n.text:0000000000403017\n.text:0000000000403019\n.text:000000000040301c\n.text:000000000040301e\n.text:0000000000403023\n.text:0000000000403028\n.text:000000000040302b\n.text:000000000040302d\n.text:0000000000403032\n.text:0000000000403037\n.text:000000000040303a\n.text:000000000040303c\n.text:0000000000403041\n.text:0000000000403045\n.text:0000000000403048\n.text:000000000040304b\n.text:000000000040304d\n.text:0000000000403052\n.text:0000000000403057\n.text:0000000000403059\n.text:000000000040305c\n.text:000000000040305f\n.text:0000000000403065\n.text:0000000000403069\n.text:000000000040306c\n.text:0000000000403072\n.text:0000000000403076\n.text:0000000000403079\n.text:000000000040307c\n.text:0000000000403082\n.text:0000000000403085\n.text:0000000000403087\n.text:000000000040308c\n.text:0000000000403091\n.text:0000000000403094\n.text:0000000000403096\n.text:000000000040309b\n.text:000000000040309f\n.text:00000000004030a4\n.text:00000000004030aa\n.text:00000000004030af\n.text:00000000004030b1\n.text:00000000004030b6\n.text:00000000004030bc\n.text:00000000004030be\n.text:00000000004030c0\n.text:00000000004030c2\n.text:00000000004030c4\n.text:00000000004030c9\n.text:00000000004030cf\n.text:00000000004030d1\n.text:00000000004030d3\n.text:00000000004030d8\n.text:00000000004030de\n.text:00000000004030e0\n.text:00000000004030e2\n.text:00000000004030e7\n.text:00000000004030e9\n.text:00000000004030ef\n.text:00000000004030f4\n.text:00000000004030fa\n.text:00000000004030fd\n.text:0000000000403100\n.text:0000000000403106\n.text:000000000040310b\n.text:000000000040310e\n.text:0000000000403111\n.text:0000000000403117\n.text:000000000040311a\n.text:0000000000403120\n.text:0000000000403123\n.text:0000000000403125\n.text:000000000040312a\n.text:000000000040312f\n.text:0000000000403132\n.text:0000000000403134\n.text:0000000000403139\n.text:000000000040313e\n.text:0000000000403141\n.text:0000000000403143\n.text:0000000000403148\n.text:000000000040314c\n.text:000000000040314e\n.text:0000000000403153\n.text:0000000000403156\n.text:0000000000403159\n.text:000000000040315f\n.text:0000000000403162\n.text:0000000000403168\n.text:000000000040316b\n.text:0000000000403171\n.text:0000000000403176\n.text:0000000000403179\n.text:000000000040317f\n.text:0000000000403182\n.text:0000000000403188\n.text:000000000040318b\n.text:000000000040318d\n.text:0000000000403191\n.text:0000000000403197\n.text:000000000040319c\n.text:00000000004031a0\n.text:00000000004031a9\n.text:00000000004031af\n.text:00000000004031b4\n.text:00000000004031b9\n.text:00000000004031be\n.text:00000000004031c1\n.text:00000000004031c6\n.text:00000000004031c9\n.text:00000000004031cc\n.text:00000000004031d1\n.text:00000000004031d6\n.text:00000000004031da\n.text:00000000004031df\n.text:00000000004031e4\n.text:00000000004031e8\n.text:00000000004031ea\n.text:00000000004031ef\n.text:00000000004031f5\n.text:00000000004031f8\n.text:00000000004031fa\n.text:00000000004031fd\n.text:0000000000403200\n.text:0000000000403206\n.text:000000000040320b\n.text:000000000040320e\n.text:0000000000403211\n.text:0000000000403214\n.text:0000000000403217\n.text:0000000000403219\n.text:000000000040321d\n.text:000000000040321f\n.text:0000000000403224\n.text:0000000000403229\n.text:000000000040322f\n.text:0000000000403240\n.text:0000000000403245\n.text:0000000000403247\n.text:000000000040324a\n.text:000000000040324c\n.text:000000000040324f\n.text:0000000000403251\n.text:0000000000403254\n.text:0000000000403256\n.text:000000000040325b\n.text:0000000000403260\n.text:0000000000403263\n.text:0000000000403265\n.text:000000000040326a\n.text:000000000040326e\n.text:0000000000403276\n.text:0000000000403279\n.text:000000000040327c\n.text:000000000040327e\n.text:0000000000403282\n.text:0000000000403290\n.text:0000000000403294\n.text:000000000040329a\n.text:000000000040329d\n.text:000000000040329f\n.text:00000000004032a4\n.text:00000000004032a7\n.text:00000000004032a9\n.text:00000000004032b0\n.text:00000000004032b3\n.text:00000000004032b8\n.text:00000000004032bb\n.text:00000000004032c0\n.text:00000000004032c2\n.text:00000000004032c5\n.text:00000000004032cb\n.text:00000000004032ce\n.text:00000000004032d0\n.text:00000000004032d4\n.text:00000000004032d6\n.text:00000000004032d8\n.text:00000000004032db\n.text:00000000004032dd\n.text:00000000004032e2\n.text:00000000004032e7\n.text:00000000004032ea\n.text:00000000004032ec\n.text:00000000004032f1\n.text:00000000004032f6\n.text:00000000004032f9\n.text:00000000004032fb\n.text:0000000000403300\n.text:0000000000403304\n.text:0000000000403306\n.text:000000000040330a\n.text:000000000040330d\n.text:000000000040330f\n.text:0000000000403314\n.text:0000000000403319\n.text:000000000040331c\n.text:000000000040331e\n.text:0000000000403321\n.text:0000000000403324\n.text:0000000000403327\n.text:000000000040332b\n.text:0000000000403330\n.text:0000000000403333\n.text:0000000000403335\n.text:0000000000403338\n.text:000000000040333b\n.text:000000000040333e\n.text:0000000000403341\n.text:0000000000403345\n.text:0000000000403349\n.text:000000000040334d\n.text:0000000000403351\n.text:0000000000403353\n.text:0000000000403357\n.text:000000000040335a\n.text:0000000000403360\n.text:0000000000403364\n.text:0000000000403368\n.text:000000000040336e\n.text:0000000000403373\n.text:0000000000403376\n.text:0000000000403379\n.text:000000000040337e\n.text:0000000000403381\n.text:0000000000403383\n.text:0000000000403386\n.text:000000000040338d\n.text:0000000000403393\n.text:0000000000403395\n.text:0000000000403399\n.text:000000000040339f\n.text:00000000004033a4\n.text:00000000004033a9\n.text:00000000004033af\n.text:00000000004033b2\n.text:00000000004033b4\n.text:00000000004033b9\n.text:00000000004033bf\n.text:00000000004033c4\n.text:00000000004033c6\n.text:00000000004033cb\n.text:00000000004033d1\n.text:00000000004033d3\n.text:00000000004033d6\n.text:00000000004033da\n.text:00000000004033e0\n.text:00000000004033e5\n.text:00000000004033f1\n.text:00000000004033f5\n.text:00000000004033f7\n.text:00000000004033fa\n.text:00000000004033ff\n.text:0000000000403404\n.text:0000000000403407\n.text:000000000040340b\n.text:0000000000403410\n.text:0000000000403412\n.text:0000000000403416\n.text:0000000000403418\n.text:0000000000403420\n.text:0000000000403425\n.text:000000000040342a\n.text:000000000040342e\n.text:0000000000403432\n.text:000000000040343a\n.text:000000000040343d\n.text:0000000000403442\n.text:0000000000403445\n.text:0000000000403448\n.text:000000000040344d\n.text:0000000000403450\n.text:0000000000403453\n.text:0000000000403459\n.text:000000000040345d\n.text:0000000000403467\n.text:000000000040346d\n.text:0000000000403471\n.text:0000000000403476\n.text:000000000040347c\n.text:0000000000403480\n.text:0000000000403483\n.text:0000000000403487\n.text:0000000000403489\n.text:000000000040348e\n.text:0000000000403493\n.text:0000000000403497\n.text:0000000000403499\n.text:000000000040349e\n.text:00000000004034a3\n.text:00000000004034a7\n.text:00000000004034ac\n.text:00000000004034b0\n.text:00000000004034b4\n.text:00000000004034b7\n.text:00000000004034ba\n.text:00000000004034bc\n.text:00000000004034c0\n.text:00000000004034c6\n.text:00000000004034c9\n.text:00000000004034cc\n.text:00000000004034ce\n.text:00000000004034d2\n.text:00000000004034d7\n.text:00000000004034d9\n.text:00000000004034db\n.text:00000000004034e3\n.text:00000000004034e8\n.text:00000000004034eb\n.text:00000000004034f3\n.text:00000000004034f6\n.text:00000000004034f9\n.text:00000000004034fe\n.text:0000000000403501\n.text:0000000000403503\n.text:0000000000403508\n.text:000000000040350d\n.text:0000000000403513\n.text:0000000000403518\n.text:000000000040351b\n.text:0000000000403520\n.text:0000000000403526\n.text:000000000040352b\n.text:0000000000403530\n.text:0000000000403536\n.text:000000000040353a\n.text:000000000040353d\n.text:0000000000403543\n.text:0000000000403549\n.text:000000000040354f\n.text:0000000000403554\n.text:0000000000403556\n.text:0000000000403559\n.text:000000000040355f\n.text:0000000000403563\n.text:0000000000403565\n.text:000000000040356f\n.text:0000000000403573\n.text:0000000000403579\n.text:000000000040357c\n.text:000000000040357e\n.text:0000000000403584\n.text:0000000000403587\n.text:0000000000403589\n.text:000000000040358e\n.text:0000000000403593\n.text:0000000000403596\n.text:000000000040359a\n.text:000000000040359c\n.text:00000000004035a1\n.text:00000000004035a6\n.text:00000000004035a9\n.text:00000000004035ab\n.text:00000000004035b0\n.text:00000000004035b5\n.text:00000000004035b8\n.text:00000000004035ba\n.text:00000000004035bf\n.text:00000000004035c3\n.text:00000000004035c5\n.text:00000000004035c8\n.text:00000000004035cb\n.text:00000000004035d0\n.text:00000000004035d6\n.text:00000000004035d8\n.text:00000000004035dd\n.text:00000000004035e2\n.text:00000000004035e8\n.text:00000000004035f0\n.text:00000000004035f5\n.text:00000000004035f7\n.text:00000000004035fc\n.text:00000000004035ff\n.text:0000000000403601\n.text:0000000000403604\n.text:0000000000403606\n.text:0000000000403609\n.text:000000000040360c\n.text:000000000040360f\n.text:0000000000403611\n.text:0000000000403619\n.text:000000000040361c\n.text:000000000040361e\n.text:0000000000403620\n.text:0000000000403630\n.text:0000000000403633\n.text:0000000000403635\n.text:0000000000403638\n.text:000000000040363e\n.text:0000000000403641\n.text:0000000000403643\n.text:0000000000403645\n.text:0000000000403647\n.text:0000000000403649\n.text:000000000040364c\n.text:000000000040364e\n.text:0000000000403653\n.text:0000000000403658\n.text:000000000040365b\n.text:000000000040365d\n.text:0000000000403662\n.text:0000000000403667\n.text:000000000040366a\n.text:000000000040366c\n.text:0000000000403671\n.text:0000000000403675\n.text:0000000000403678\n.text:000000000040367b\n.text:000000000040367d\n.text:0000000000403682\n.text:0000000000403685\n.text:0000000000403688\n.text:000000000040368a\n.text:0000000000403690\n.text:0000000000403694\n.text:0000000000403696\n.text:0000000000403698\n.text:000000000040369a\n.text:000000000040369d\n.text:000000000040369f\n.text:00000000004036a4\n.text:00000000004036a9\n.text:00000000004036ac\n.text:00000000004036ae\n.text:00000000004036b3\n.text:00000000004036b7\n.text:00000000004036b9\n.text:00000000004036bc\n.text:00000000004036be\n.text:00000000004036c2\n.text:00000000004036c5\n.text:00000000004036c8\n.text:00000000004036cc\n.text:00000000004036d2\n.text:00000000004036d7\n.text:00000000004036df\n.text:00000000004036e4\n.text:00000000004036e6\n.text:00000000004036ee\n.text:00000000004036f3\n.text:00000000004036f5\n.text:00000000004036fa\n.text:00000000004036ff\n.text:0000000000403703\n.text:0000000000403705\n.text:000000000040370a\n.text:000000000040370d\n.text:0000000000403710\n.text:0000000000403712\n.text:000000000040371a\n.text:000000000040371c\n.text:0000000000403724\n.text:0000000000403729\n.text:000000000040372d\n.text:0000000000403732\n.text:0000000000403737\n.text:000000000040373b\n.text:0000000000403740\n.text:0000000000403745\n.text:0000000000403749\n.text:000000000040374d\n.text:0000000000403753\n.text:0000000000403758\n.text:0000000000403760\n.text:0000000000403762\n.text:0000000000403764\n.text:0000000000403768\n.text:000000000040376d\n.text:0000000000403773\n.text:0000000000403780\n.text:0000000000403783\n.text:0000000000403789\n.text:000000000040378c\n.text:000000000040378e\n.text:0000000000403791\n.text:0000000000403793\n.text:0000000000403796\n.text:0000000000403798\n.text:00000000004037a0\n.text:00000000004037a6\n.text:00000000004037aa\n.text:00000000004037ad\n.text:00000000004037b1\n.text:00000000004037b6\n.text:00000000004037ba\n.text:00000000004037be\n.text:00000000004037c1\n.text:00000000004037c4\n.text:00000000004037c7\n.text:00000000004037cb\n.text:00000000004037cf\n.text:00000000004037d1\n.text:00000000004037d6\n.text:00000000004037da\n.text:00000000004037dd\n.text:00000000004037e0\n.text:00000000004037e7\n.text:00000000004037e8\n.text:00000000004037ea\n.text:00000000004037ec\n.text:00000000004037ee\n.text:00000000004037f0\n.text:00000000004037f1\n.text:00000000004037f2\n.text:00000000004037fa\n.text:00000000004037fd\n.text:00000000004037ff\n.text:0000000000403802\n.text:0000000000403804\n.text:0000000000403806\n.text:0000000000403808\n.text:000000000040380a\n.text:000000000040380d\n.text:0000000000403810\n.text:0000000000403813\n.text:0000000000403815\n.text:0000000000403819\n.text:000000000040381c\n.text:000000000040381f\n.text:0000000000403822\n.text:0000000000403824\n.text:0000000000403826\n.text:0000000000403829\n.text:000000000040382b\n.text:0000000000403830\n.text:0000000000403832\n.text:0000000000403837\n.text:000000000040383c\n.text:000000000040383f\n.text:0000000000403841\n.text:0000000000403846\n.text:0000000000403849\n.text:000000000040384e\n.text:0000000000403851\n.text:0000000000403857\n.text:000000000040385d\n.text:0000000000403860\n.text:0000000000403865\n'
p160
tp161
sS'fwrite_success_callback'
p162
(S'\n__stdcall fwrite_success_callback(char * buf, size_t buflen, void * callback_arg)\n'
p163
V\u000along fwrite_success_callback(char *buf,size_t buflen,void *callback_arg)\u000a\u000a{\u000a  fwrite(buf,1,buflen,(FILE *)callback_arg);\u000a  return 0;\u000a}\u000a\u000a
p164
S'PUSH RAX\nMOV RAX,RDX\nMOV RCX,RSI\nMOV ESI,0x1\nMOV RDX,RCX\nMOV RCX,RAX\nCALL 0x004015f0\nXOR EAX,EAX\nPOP RCX\nRET\n'
p165
S'50\n48 89 d0\n48 89 f1\nbe 01 00 00 00\n48 89 ca\n48 89 c1\ne8 39 d1 ff ff\n31 c0\n59\nc3\n'
p166
S'.text:00000000004044a0\n.text:00000000004044a1\n.text:00000000004044a4\n.text:00000000004044a7\n.text:00000000004044ac\n.text:00000000004044af\n.text:00000000004044b2\n.text:00000000004044b7\n.text:00000000004044b9\n.text:00000000004044ba\n'
p167
tp168
sS'newlocale'
p169
(S'\n__stdcall newlocale(int __category_mask, char * __locale, __locale_t __base)\n'
p170
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__locale_t newlocale(int __category_mask,char *__locale,__locale_t __base)\u000a\u000a{\u000a  __locale_t p_Var1;\u000a  \u000a  p_Var1 = (__locale_t)(*(code *)PTR_newlocale_006090c0)();\u000a  return p_Var1;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x006090c0]\n'
p172
S'ff 25 aa 7c 20 00\n'
p173
S'.plt:0000000000401410\n'
p174
tp175
sS'set_quoting_style'
p176
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p177
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p178
S'TEST RDI,RDI\nMOV EAX,0x6092b0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p179
S'48 85 ff\nb8 b0 92 60 00\n48 0f 45 c7\n89 30\nc3\n'
p180
S'.text:0000000000402b10\n.text:0000000000402b13\n.text:0000000000402b18\n.text:0000000000402b1c\n.text:0000000000402b1e\n'
p181
tp182
sS'quotearg_n_style_colon'
p183
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p184
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p185
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00403c40\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00402b20\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00403a10\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p186
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p187
S'.text:0000000000403dc0\n.text:0000000000403dc1\n.text:0000000000403dc3\n.text:0000000000403dc4\n.text:0000000000403dc8\n.text:0000000000403dcb\n.text:0000000000403dcd\n.text:0000000000403dd2\n.text:0000000000403dd5\n.text:0000000000403dda\n.text:0000000000403ddf\n.text:0000000000403de4\n.text:0000000000403de7\n.text:0000000000403dec\n.text:0000000000403df3\n.text:0000000000403df5\n.text:0000000000403df8\n.text:0000000000403dfb\n.text:0000000000403e00\n.text:0000000000403e04\n.text:0000000000403e05\n.text:0000000000403e07\n.text:0000000000403e08\n'
p188
tp189
sS'textdomain'
p190
(S'\n__stdcall textdomain()\n'
p191
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00609088)();\u000a  return;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x00609088]\n'
p193
S'ff 25 e2 7c 20 00\n'
p194
S'.plt:00000000004013a0\n'
p195
tp196
sS'xmemdup'
p197
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p198
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p199
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00404b90\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004014d0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p200
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 dc c7 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p201
S'.text:0000000000404cd0\n.text:0000000000404cd2\n.text:0000000000404cd4\n.text:0000000000404cd5\n.text:0000000000404cd8\n.text:0000000000404cdb\n.text:0000000000404cde\n.text:0000000000404ce3\n.text:0000000000404ce6\n.text:0000000000404ce9\n.text:0000000000404cec\n.text:0000000000404cef\n.text:0000000000404cf4\n.text:0000000000404cf7\n.text:0000000000404cf8\n.text:0000000000404cfa\n.text:0000000000404cfc\n'
p202
tp203
sS'u8_uctomb_aux'
p204
(S'\n__stdcall u8_uctomb_aux(uint8_t * s)\n'
p205
V\u000aint u8_uctomb_aux(uint8_t *s)\u000a\u000a{\u000a  char cVar1;\u000a  int in_EDX;\u000a  uint in_ESI;\u000a  int iVar2;\u000a  \u000a  if (in_ESI < 0x80) {\u000a    return -2;\u000a  }\u000a  iVar2 = 2;\u000a  if (0x7ff < in_ESI) {\u000a    if (in_ESI < 0x10000) {\u000a      iVar2 = 3;\u000a      if ((in_ESI & 0xfffff800) == 0xd800) {\u000a        return -1;\u000a      }\u000a    }\u000a    else {\u000a      iVar2 = 4;\u000a      if (0x10ffff < in_ESI) {\u000a        return -1;\u000a      }\u000a    }\u000a  }\u000a  if (iVar2 <= in_EDX) {\u000a    cVar1 = (char)iVar2;\u000a    if (cVar1 != 2) {\u000a      if (cVar1 != 3) {\u000a        if (cVar1 != 4) {\u000a          return iVar2;\u000a        }\u000a        s[3] = (byte)in_ESI & 0x3f | 0x80;\u000a        in_ESI = in_ESI >> 6 | 0x10000;\u000a      }\u000a      s[2] = (byte)in_ESI & 0x3f | 0x80;\u000a      in_ESI = in_ESI >> 6 | 0x800;\u000a    }\u000a    s[1] = (byte)in_ESI & 0x3f | 0x80;\u000a    *s = (byte)(in_ESI >> 6) | 0xc0;\u000a    return iVar2;\u000a  }\u000a  return -2;\u000a}\u000a\u000a
p206
S'MOV EAX,0xfffffffe\nCMP ESI,0x80\nJC 0x00404665\nMOV R8D,0x2\nCMP ESI,0x800\nJNC 0x00404629\nCMP R8D,EDX\nMOV EAX,0xfffffffe\nJG 0x00404665\nMOV EAX,R8D\nAND AL,0x7\nCMP AL,0x2\nJZ 0x00404612\nCMP AL,0x3\nJZ 0x00404600\nCMP AL,0x4\nJNZ 0x00404625\nMOV EAX,ESI\nAND AL,0x3f\nOR AL,0x80\nMOV byte ptr [RDI + 0x3],AL\nSHR ESI,0x6\nOR ESI,0x10000\nMOV EAX,ESI\nAND AL,0x3f\nOR AL,0x80\nMOV byte ptr [RDI + 0x2],AL\nSHR ESI,0x6\nOR ESI,0x800\nMOV EAX,ESI\nAND AL,0x3f\nOR AL,0x80\nMOV byte ptr [RDI + 0x1],AL\nSHR ESI,0x6\nOR SIL,0xc0\nMOV byte ptr [RDI],SIL\nMOV EAX,R8D\nRET\nCMP ESI,0xffff\nJA 0x0040464e\nMOV ECX,ESI\nAND ECX,0xfffff800\nMOV R8D,0x3\nMOV EAX,0xffffffff\nCMP ECX,0xd800\nJNZ 0x004045cf\nJMP 0x00404665\nMOV EAX,0xffffffff\nMOV R8D,0x4\nCMP ESI,0x10ffff\nJBE 0x004045cf\nRET\n'
p207
S'b8 fe ff ff ff\n81 fe 80 00 00 00\n0f 82 a4 00 00 00\n41 b8 02 00 00 00\n81 fe 00 08 00 00\n73 5a\n41 39 d0\nb8 fe ff ff ff\n0f 8f 88 00 00 00\n44 89 c0\n24 07\n3c 02\n74 2c\n3c 03\n74 16\n3c 04\n75 37\n89 f0\n24 3f\n0c 80\n88 47 03\nc1 ee 06\n81 ce 00 00 01 00\n89 f0\n24 3f\n0c 80\n88 47 02\nc1 ee 06\n81 ce 00 08 00 00\n89 f0\n24 3f\n0c 80\n88 47 01\nc1 ee 06\n40 80 ce c0\n40 88 37\n44 89 c0\nc3\n81 fe ff ff 00 00\n77 1d\n89 f1\n81 e1 00 f8 ff ff\n41 b8 03 00 00 00\nb8 ff ff ff ff\n81 f9 00 d8 00 00\n75 83\neb 17\nb8 ff ff ff ff\n41 b8 04 00 00 00\n81 fe ff ff 10 00\n0f 86 6a ff ff ff\nc3\n'
p208
S'.text:00000000004045b0\n.text:00000000004045b5\n.text:00000000004045bb\n.text:00000000004045c1\n.text:00000000004045c7\n.text:00000000004045cd\n.text:00000000004045cf\n.text:00000000004045d2\n.text:00000000004045d7\n.text:00000000004045dd\n.text:00000000004045e0\n.text:00000000004045e2\n.text:00000000004045e4\n.text:00000000004045e6\n.text:00000000004045e8\n.text:00000000004045ea\n.text:00000000004045ec\n.text:00000000004045ee\n.text:00000000004045f0\n.text:00000000004045f2\n.text:00000000004045f4\n.text:00000000004045f7\n.text:00000000004045fa\n.text:0000000000404600\n.text:0000000000404602\n.text:0000000000404604\n.text:0000000000404606\n.text:0000000000404609\n.text:000000000040460c\n.text:0000000000404612\n.text:0000000000404614\n.text:0000000000404616\n.text:0000000000404618\n.text:000000000040461b\n.text:000000000040461e\n.text:0000000000404622\n.text:0000000000404625\n.text:0000000000404628\n.text:0000000000404629\n.text:000000000040462f\n.text:0000000000404631\n.text:0000000000404633\n.text:0000000000404639\n.text:000000000040463f\n.text:0000000000404644\n.text:000000000040464a\n.text:000000000040464c\n.text:000000000040464e\n.text:0000000000404653\n.text:0000000000404659\n.text:000000000040465f\n.text:0000000000404665\n'
p209
tp210
sS'get_quoting_style'
p211
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p212
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p213
S'TEST RDI,RDI\nMOV EAX,0x6092b0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p214
S'48 85 ff\nb8 b0 92 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p215
S'.text:0000000000402b00\n.text:0000000000402b03\n.text:0000000000402b08\n.text:0000000000402b0c\n.text:0000000000402b0e\n'
p216
tp217
sS'ferror_unlocked'
p218
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_00609108)();\u000a  return iVar1;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x00609108]\n'
p221
S'ff 25 62 7c 20 00\n'
p222
S'.plt:00000000004014a0\n'
p223
tp224
sS'exit'
p225
(S'\n__stdcall exit(int __status)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006091a8)();\u000a  return;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x006091a8]\n'
p228
S'ff 25 c2 7b 20 00\n'
p229
S'.plt:00000000004015e0\n'
p230
tp231
sS'quote_mem'
p232
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p233
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p234
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403ed0\n'
p235
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p236
S'.text:0000000000403ee0\n.text:0000000000403ee3\n.text:0000000000403ee6\n.text:0000000000403ee8\n.text:0000000000403eeb\n.text:0000000000403eee\n'
p237
tp238
sS'locale_charset'
p239
(S'\n__stdcall locale_charset()\n'
p240
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_004051ed:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_004051ed;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p241
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401520\nTEST RAX,RAX\nMOV R14D,0x406b41\nCMOVNZ R14,RAX\nCALL 0x00405200\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x004051c5\nJMP 0x004051ed\nMOV RDI,RBX\nCALL 0x004013f0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004013f0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x004051ed\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004014c0\nTEST EAX,EAX\nJZ 0x004051e0\nCMP BPL,0x2a\nJNZ 0x004051a0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x004051a0\nMOV RDI,RBX\nCALL 0x004013f0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x406969\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p242
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 a2 c3 ff ff\n48 85 c0\n41 be 41 6b 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 48 c2 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 3a c2 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 f0 c2 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 08 c2 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 69 69 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p243
S'.text:0000000000405170\n.text:0000000000405171\n.text:0000000000405173\n.text:0000000000405174\n.text:0000000000405179\n.text:000000000040517e\n.text:0000000000405181\n.text:0000000000405187\n.text:000000000040518b\n.text:0000000000405190\n.text:0000000000405193\n.text:0000000000405196\n.text:0000000000405199\n.text:000000000040519b\n.text:00000000004051a0\n.text:00000000004051a3\n.text:00000000004051a8\n.text:00000000004051ac\n.text:00000000004051b1\n.text:00000000004051b6\n.text:00000000004051bb\n.text:00000000004051c0\n.text:00000000004051c3\n.text:00000000004051c5\n.text:00000000004051c8\n.text:00000000004051cb\n.text:00000000004051d0\n.text:00000000004051d2\n.text:00000000004051d4\n.text:00000000004051d8\n.text:00000000004051da\n.text:00000000004051de\n.text:00000000004051e0\n.text:00000000004051e3\n.text:00000000004051e8\n.text:00000000004051ed\n.text:00000000004051f1\n.text:00000000004051f6\n.text:00000000004051fa\n.text:00000000004051fb\n.text:00000000004051fd\n.text:00000000004051fe\n'
p244
tp245
sS'set_program_name'
p246
(S'\n__stdcall set_program_name(char * argv0)\n'
p247
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p248
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402a91\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401420\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00402a7b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x406412\nMOV EDX,0x7\nCALL 0x00401330\nTEST EAX,EAX\nJNZ 0x00402a7b\nMOV ESI,0x40641a\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401330\nTEST EAX,EAX\nJNZ 0x00402a78\nADD R14,0x3\nMOV qword ptr [0x00609260],R14\nMOV RBX,R14\nMOV qword ptr [0x006092a8],RBX\nMOV qword ptr [0x00609270],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x00609280]\nMOV EDI,0x4063da\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x004015f0\nCALL 0x00401310\n'
p249
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 f7 e9 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 12 64 40 00\nba 07 00 00 00\ne8 dd e8 ff ff\n85 c0\n75 24\nbe 1a 64 40 00\nba 03 00 00 00\n4c 89 f7\ne8 c7 e8 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 e8 67 20 00\n4c 89 f3\n48 89 1d 26 68 20 00\n48 89 1d e7 67 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d e8 67 20 00\nbf da 63 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 44 eb ff ff\ne8 5f e8 ff ff\n'
p250
S'.text:0000000000402a10\n.text:0000000000402a12\n.text:0000000000402a13\n.text:0000000000402a14\n.text:0000000000402a17\n.text:0000000000402a1a\n.text:0000000000402a1c\n.text:0000000000402a21\n.text:0000000000402a24\n.text:0000000000402a29\n.text:0000000000402a2c\n.text:0000000000402a30\n.text:0000000000402a34\n.text:0000000000402a37\n.text:0000000000402a3a\n.text:0000000000402a3e\n.text:0000000000402a40\n.text:0000000000402a44\n.text:0000000000402a49\n.text:0000000000402a4e\n.text:0000000000402a53\n.text:0000000000402a55\n.text:0000000000402a57\n.text:0000000000402a5c\n.text:0000000000402a61\n.text:0000000000402a64\n.text:0000000000402a69\n.text:0000000000402a6b\n.text:0000000000402a6d\n.text:0000000000402a71\n.text:0000000000402a78\n.text:0000000000402a7b\n.text:0000000000402a82\n.text:0000000000402a89\n.text:0000000000402a8d\n.text:0000000000402a8e\n.text:0000000000402a90\n.text:0000000000402a91\n.text:0000000000402a98\n.text:0000000000402a9d\n.text:0000000000402aa2\n.text:0000000000402aa7\n.text:0000000000402aac\n'
p251
tp252
sS'fileno'
p253
(S'\n__stdcall fileno(FILE * __stream)\n'
p254
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00609130)();\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x00609130]\n'
p256
S'ff 25 3a 7c 20 00\n'
p257
S'.plt:00000000004014f0\n'
p258
tp259
sS'quotearg_buffer'
p260
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p261
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p262
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x6092b0\nCMOVNZ RBP,R8\nCALL 0x00401320\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00402c30\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p263
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd b0 92 60 00\n49 0f 45 e8\ne8 48 e7 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p264
S'.text:0000000000402bb0\n.text:0000000000402bb1\n.text:0000000000402bb3\n.text:0000000000402bb5\n.text:0000000000402bb7\n.text:0000000000402bb9\n.text:0000000000402bba\n.text:0000000000402bbb\n.text:0000000000402bbe\n.text:0000000000402bc1\n.text:0000000000402bc4\n.text:0000000000402bc7\n.text:0000000000402bca\n.text:0000000000402bcf\n.text:0000000000402bd3\n.text:0000000000402bd8\n.text:0000000000402bdb\n.text:0000000000402bdd\n.text:0000000000402be1\n.text:0000000000402be5\n.text:0000000000402be9\n.text:0000000000402bed\n.text:0000000000402bf0\n.text:0000000000402bf3\n.text:0000000000402bf6\n.text:0000000000402bf9\n.text:0000000000402bfc\n.text:0000000000402bff\n.text:0000000000402c03\n.text:0000000000402c04\n.text:0000000000402c09\n.text:0000000000402c0d\n.text:0000000000402c11\n.text:0000000000402c13\n.text:0000000000402c17\n.text:0000000000402c18\n.text:0000000000402c1a\n.text:0000000000402c1c\n.text:0000000000402c1e\n.text:0000000000402c20\n.text:0000000000402c21\n'
p265
tp266
sS'quotearg_colon'
p267
(S'\n__stdcall quotearg_colon(char * arg)\n'
p268
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p269
S'MOV ESI,0x3a\nJMP 0x00403d90\n'
p270
S'be 3a 00 00 00\neb e9\n'
p271
S'.text:0000000000403da0\n.text:0000000000403da5\n'
p272
tp273
sS'mbrtowc'
p274
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006090b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x006090b8]\n'
p277
S'ff 25 b2 7c 20 00\n'
p278
S'.plt:0000000000401400\n'
p279
tp280
sS'rpl_fflush'
p281
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p282
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00609140)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p283
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040553d\nMOV RDI,RBX\nCALL 0x00401540\nTEST EAX,EAX\nJZ 0x0040553d\nMOV RDI,RBX\nCALL 0x00405550\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401510\n'
p284
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 0f c0 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 ca bf ff ff\n'
p285
S'.text:0000000000405520\n.text:0000000000405521\n.text:0000000000405524\n.text:0000000000405527\n.text:0000000000405529\n.text:000000000040552c\n.text:0000000000405531\n.text:0000000000405533\n.text:0000000000405535\n.text:0000000000405538\n.text:000000000040553d\n.text:0000000000405540\n.text:0000000000405541\n'
p286
tp287
sS'setlocale'
p288
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p289
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_00609170)();\u000a  return pcVar1;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x00609170]\n'
p291
S'ff 25 fa 7b 20 00\n'
p292
S'.plt:0000000000401570\n'
p293
tp294
sS'c_toupper'
p295
(S'\n__stdcall c_toupper()\n'
p296
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p297
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p298
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p299
S'.text:00000000004050f0\n.text:00000000004050f3\n.text:00000000004050f6\n.text:00000000004050f9\n.text:00000000004050fc\n'
p300
tp301
sS'bindtextdomain'
p302
(S'\n__stdcall bindtextdomain()\n'
p303
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00609098)();\u000a  return;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x00609098]\n'
p305
S'ff 25 d2 7c 20 00\n'
p306
S'.plt:00000000004013c0\n'
p307
tp308
sS'set_char_quoting'
p309
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p310
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p311
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x6092b0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p312
S'89 f1\n48 85 ff\nbe b0 92 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p313
S'.text:0000000000402b20\n.text:0000000000402b22\n.text:0000000000402b25\n.text:0000000000402b2a\n.text:0000000000402b2e\n.text:0000000000402b30\n.text:0000000000402b33\n.text:0000000000402b37\n.text:0000000000402b3c\n.text:0000000000402b3f\n.text:0000000000402b41\n.text:0000000000402b43\n.text:0000000000402b46\n.text:0000000000402b48\n.text:0000000000402b4b\n.text:0000000000402b4d\n.text:0000000000402b50\n.text:0000000000402b55\n'
p314
tp315
sS'quotearg_n'
p316
(S'\n__stdcall quotearg_n(char * arg)\n'
p317
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p318
S'MOV RDX,-0x1\nMOV ECX,0x6092b0\nJMP 0x00403a10\n'
p319
S'48 c7 c2 ff ff ff ff\nb9 b0 92 60 00\neb 02\n'
p320
S'.text:0000000000403a00\n.text:0000000000403a07\n.text:0000000000403a0c\n'
p321
tp322
sS'mbsinit'
p323
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p324
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_006091c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x006091c8]\n'
p326
S'ff 25 a2 7b 20 00\n'
p327
S'.plt:0000000000401620\n'
p328
tp329
sS'dcgettext'
p330
(S'\n__stdcall dcgettext()\n'
p331
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_006090a0)();\u000a  return;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x006090a0]\n'
p333
S'ff 25 ca 7c 20 00\n'
p334
S'.plt:00000000004013d0\n'
p335
tp336
sS'close_stream'
p337
(S'\n__stdcall close_stream(FILE * stream)\n'
p338
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401360\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004014a0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x004054a0\nTEST EBP,EBP\nJZ 0x0040513b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040515f\nCALL 0x00401320\nMOV dword ptr [RAX],0x0\nJMP 0x0040515f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040515f\nTEST CL,CL\nJNZ 0x0040515f\nCALL 0x00401320\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p340
S'55\n41 56\n53\n48 89 fb\ne8 54 c2 ff ff\n49 89 c6\n48 89 df\ne8 89 c3 ff ff\n89 c5\n48 89 df\ne8 7f 03 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 ed c1 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 ce c1 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p341
S'.text:0000000000405100\n.text:0000000000405101\n.text:0000000000405103\n.text:0000000000405104\n.text:0000000000405107\n.text:000000000040510c\n.text:000000000040510f\n.text:0000000000405112\n.text:0000000000405117\n.text:0000000000405119\n.text:000000000040511c\n.text:0000000000405121\n.text:0000000000405123\n.text:0000000000405125\n.text:000000000040512a\n.text:000000000040512c\n.text:000000000040512e\n.text:0000000000405133\n.text:0000000000405139\n.text:000000000040513b\n.text:000000000040513d\n.text:0000000000405140\n.text:0000000000405142\n.text:0000000000405144\n.text:0000000000405147\n.text:0000000000405149\n.text:000000000040514b\n.text:000000000040514d\n.text:0000000000405152\n.text:0000000000405154\n.text:0000000000405157\n.text:000000000040515c\n.text:000000000040515f\n.text:0000000000405161\n.text:0000000000405162\n.text:0000000000405164\n.text:0000000000405165\n'
p342
tp343
sS'quotearg_colon_mem'
p344
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p345
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'MOV EDX,0x3a\nJMP 0x00403d20\n'
p347
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p348
S'.text:0000000000403db0\n.text:0000000000403db5\n'
p349
tp350
sS'strtoimax'
p351
(S'\n__stdcall strtoimax(char * __nptr, char * * __endptr, int __base)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aintmax_t strtoimax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  intmax_t iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strtoimax_00609028)();\u000a  return iVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x00609028]\n'
p354
S'ff 25 42 7d 20 00\n'
p355
S'.plt:00000000004012e0\n'
p356
tp357
sS'quotearg_free'
p358
(S'\n__stdcall quotearg_free()\n'
p359
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p360
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x00609208]\nCMP dword ptr [0x00609210],0x2\nJC 0x004039aa\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004012d0\nINC RBX\nMOV EAX,dword ptr [0x00609210]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00403990\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x6092f0\nCMP RDI,RAX\nJZ 0x004039d3\nCALL 0x004012d0\nMOV qword ptr [0x00609218],0x100\nMOV qword ptr [0x00609220],0x6092f0\nMOV EAX,0x609218\nCMP R14,RAX\nJZ 0x004039f0\nMOV RDI,R14\nCALL 0x004012d0\nMOV qword ptr [0x00609208],0x609218\nMOV dword ptr [0x00609210],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p361
S'41 57\n41 56\n53\n4c 8b 35 8c 58 20 00\n83 3d 8d 58 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 38 d9 ff ff\n48 ff c3\n8b 05 6f 58 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 f0 92 60 00\n48 39 c7\n74 1b\ne8 13 d9 ff ff\n48 c7 05 50 58 20 00 00 01 00 00\n48 c7 05 4d 58 20 00 f0 92 60 00\nb8 18 92 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 eb d8 ff ff\n48 c7 05 18 58 20 00 18 92 60 00\nc7 05 16 58 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p362
S'.text:0000000000403970\n.text:0000000000403972\n.text:0000000000403974\n.text:0000000000403975\n.text:000000000040397c\n.text:0000000000403983\n.text:0000000000403985\n.text:0000000000403989\n.text:000000000040398e\n.text:0000000000403990\n.text:0000000000403993\n.text:0000000000403998\n.text:000000000040399b\n.text:00000000004039a1\n.text:00000000004039a5\n.text:00000000004039a8\n.text:00000000004039aa\n.text:00000000004039ae\n.text:00000000004039b3\n.text:00000000004039b6\n.text:00000000004039b8\n.text:00000000004039bd\n.text:00000000004039c8\n.text:00000000004039d3\n.text:00000000004039d8\n.text:00000000004039db\n.text:00000000004039dd\n.text:00000000004039e0\n.text:00000000004039e5\n.text:00000000004039f0\n.text:00000000004039fa\n.text:00000000004039fb\n.text:00000000004039fd\n.text:00000000004039ff\n'
p363
tp364
sS'quotearg_mem'
p365
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p366
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p367
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403bd0\n'
p368
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p369
S'.text:0000000000403bf0\n.text:0000000000403bf3\n.text:0000000000403bf6\n.text:0000000000403bf8\n.text:0000000000403bfb\n.text:0000000000403bfe\n'
p370
tp371
sS'xcalloc'
p372
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p373
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p374
S'PUSH RAX\nCALL 0x00404f60\nTEST RAX,RAX\nJZ 0x00404cbd\nPOP RCX\nRET\nCALL 0x00404d20\n'
p375
S'50\ne8 aa 02 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p376
S'.text:0000000000404cb0\n.text:0000000000404cb1\n.text:0000000000404cb6\n.text:0000000000404cb9\n.text:0000000000404cbb\n.text:0000000000404cbc\n.text:0000000000404cbd\n'
p377
tp378
sS'deregister_tm_clones'
p379
(S'\n__stdcall deregister_tm_clones()\n'
p380
V\u000a/* WARNING: Removing unreachable block (ram,0x004016a5) */\u000a/* WARNING: Removing unreachable block (ram,0x004016af) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p381
S'MOV EAX,0x609267\nPUSH RBP\nSUB RAX,0x609260\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x004016c0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004016c0\nPOP RBP\nMOV EDI,0x609260\nJMP RAX\nPOP RBP\nRET\n'
p382
S'b8 67 92 60 00\n55\n48 2d 60 92 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 60 92 60 00\nff e0\n5d\nc3\n'
p383
S'.text:0000000000401690\n.text:0000000000401695\n.text:0000000000401696\n.text:000000000040169c\n.text:00000000004016a0\n.text:00000000004016a3\n.text:00000000004016a5\n.text:00000000004016aa\n.text:00000000004016ad\n.text:00000000004016af\n.text:00000000004016b0\n.text:00000000004016b5\n.text:00000000004016c0\n.text:00000000004016c1\n'
p384
tp385
sS'xprintf'
p386
(S'\n__stdcall xprintf(char * format)\n'
p387
V\u000aint xprintf(char *format,...)\u000a\u000a{\u000a  char in_AL;\u000a  int iVar1;\u000a  undefined8 in_RCX;\u000a  undefined8 in_RDX;\u000a  undefined8 in_RSI;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list args;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [8];\u000a  undefined8 local_b0;\u000a  undefined8 local_a8;\u000a  undefined8 local_a0;\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &args[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 8;\u000a  local_b0 = in_RSI;\u000a  local_a8 = in_RDX;\u000a  local_a0 = in_RCX;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  iVar1 = xvprintf(format,&local_d8);\u000a  return iVar1;\u000a}\u000a\u000a
p388
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404d92\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nMOV qword ptr [RSP + 0x28],RSI\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x8\nMOV RSI,RSP\nCALL 0x00404df0\nADD RSP,0xd8\nRET\n'
p389
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 89 74 24 28\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 08 00 00 00\n48 89 e6\ne8 17 00 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p390
S'.text:0000000000404d50\n.text:0000000000404d57\n.text:0000000000404d59\n.text:0000000000404d5b\n.text:0000000000404d60\n.text:0000000000404d65\n.text:0000000000404d6a\n.text:0000000000404d72\n.text:0000000000404d7a\n.text:0000000000404d82\n.text:0000000000404d8a\n.text:0000000000404d92\n.text:0000000000404d97\n.text:0000000000404d9c\n.text:0000000000404da1\n.text:0000000000404da6\n.text:0000000000404dab\n.text:0000000000404db0\n.text:0000000000404db5\n.text:0000000000404dbd\n.text:0000000000404dc2\n.text:0000000000404dca\n.text:0000000000404dd1\n.text:0000000000404dd4\n.text:0000000000404dd9\n.text:0000000000404de0\n'
p391
tp392
sS'clear_ungetc_buffer_preserving_position'
p393
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p394
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p395
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405557\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00405570\n'
p396
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p397
S'.text:0000000000405550\n.text:0000000000405554\n.text:0000000000405556\n.text:0000000000405557\n.text:0000000000405559\n.text:000000000040555e\n'
p398
tp399
sS'xnmalloc'
p400
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p401
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p402
S'MOV RAX,RDI\nMUL RSI\nJO 0x00404b81\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00404b90\nPUSH RAX\nCALL 0x00404d20\n'
p403
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p404
S'.text:0000000000404b70\n.text:0000000000404b73\n.text:0000000000404b76\n.text:0000000000404b78\n.text:0000000000404b7c\n.text:0000000000404b7f\n.text:0000000000404b81\n.text:0000000000404b82\n'
p405
tp406
sS'quotearg_custom'
p407
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p408
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p409
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403e10\n'
p410
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p411
S'.text:0000000000403e90\n.text:0000000000403e93\n.text:0000000000403e96\n.text:0000000000403e99\n.text:0000000000403e9b\n.text:0000000000403e9e\n.text:0000000000403ea1\n.text:0000000000403ea4\n'
p412
tp413
sS'free'
p414
(S'\n__stdcall free(void * __ptr)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00609020)();\u000a  return;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x00609020]\n'
p417
S'ff 25 4a 7d 20 00\n'
p418
S'.plt:00000000004012d0\n'
p419
tp420
sS'close'
p421
(S'\n__stdcall close(int __fd)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006090e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x006090e8]\n'
p424
S'ff 25 82 7c 20 00\n'
p425
S'.plt:0000000000401460\n'
p426
tp427
sS'getenv'
p428
(S'\n__stdcall getenv(char * __name)\n'
p429
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00609018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x00609018]\n'
p431
S'ff 25 52 7d 20 00\n'
p432
S'.plt:00000000004012c0\n'
p433
tp434
sS'putchar_unlocked'
p435
(S'\n__stdcall putchar_unlocked(int __c)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_00609128)();\u000a  return iVar1;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x00609128]\n'
p438
S'ff 25 42 7c 20 00\n'
p439
S'.plt:00000000004014e0\n'
p440
tp441
sS'quotearg_char'
p442
(S'\n__stdcall quotearg_char(char * arg)\n'
p443
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p444
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00403d20\n'
p445
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p446
S'.text:0000000000403d90\n.text:0000000000403d92\n.text:0000000000403d99\n.text:0000000000403d9b\n'
p447
tp448
sS'malloc'
p449
(S'\n__stdcall malloc(size_t __size)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00609138)();\u000a  return pvVar1;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x00609138]\n'
p452
S'ff 25 32 7c 20 00\n'
p453
S'.plt:0000000000401500\n'
p454
tp455
sS'unicode_to_mb'
p456
(S'\n__stdcall unicode_to_mb(anon_subr_long_char_ptr_size_t_void_ptr * success, anon_subr_long_uint_char_ptr_void_ptr * failure, void * callback_arg)\n'
p457
V\u000along unicode_to_mb(long (*success)(char *,size_t,void *),long (*failure)(uint,char *,void *),\u000a                  void *callback_arg)\u000a\u000a{\u000a  int is_utf8;\u000a  iconv_t utf8_to_local;\u000a  int iVar1;\u000a  char *__s1;\u000a  size_t sVar2;\u000a  long lVar3;\u000a  void *in_RCX;\u000a  uint uVar4;\u000a  char inbuf [6];\u000a  char *inptr;\u000a  char outbuf [25];\u000a  char *local_80;\u000a  size_t local_78;\u000a  size_t local_70;\u000a  char local_66 [6];\u000a  char *local_60;\u000a  char local_58 [40];\u000a  \u000a  if (unicode_to_mb_initialized == 0) {\u000a    __s1 = locale_charset();\u000a    iVar1 = strcmp(__s1,"UTF-8");\u000a    is_utf8 = ZEXT14(iVar1 == 0);\u000a    if ((iVar1 != 0) &&\u000a       (utf8_to_local = iconv_open(__s1,"UTF-8"), utf8_to_local == (iconv_t)0xffffffffffffffff)) {\u000a      utf8_to_local = iconv_open("ASCII","UTF-8");\u000a    }\u000a    unicode_to_mb_initialized = 1;\u000a  }\u000a  if ((is_utf8 == 0) && (utf8_to_local == (iconv_t)0xffffffffffffffff)) {\u000a    __s1 = "iconv function not usable";\u000a  }\u000a  else {\u000a    iVar1 = u8_uctomb();\u000a    if (-1 < iVar1) {\u000a      if (is_utf8 == 0) {\u000a        local_70 = SEXT48(iVar1);\u000a        local_78 = 0x19;\u000a        local_80 = local_58;\u000a        local_60 = local_66;\u000a        sVar2 = iconv(utf8_to_local,&local_60,&local_70,&local_80,&local_78);\u000a        if (((sVar2 == 0xffffffffffffffff) || (local_70 != 0)) ||\u000a           (sVar2 = iconv(utf8_to_local,(char **)0x0,(size_t *)0x0,&local_80,&local_78),\u000a           sVar2 == 0xffffffffffffffff)) {\u000a          __s1 = (char *)0x0;\u000a          goto LAB_00404465;\u000a        }\u000a        __s1 = local_80 + -(long)local_58;\u000a        uVar4 = (uint)local_58;\u000a      }\u000a      else {\u000a        __s1 = (char *)(long)iVar1;\u000a        uVar4 = (int)register0x00000020 - 0x66;\u000a      }\u000a      lVar3 = (*failure)(uVar4,__s1,in_RCX);\u000a      return lVar3;\u000a    }\u000a    __s1 = "character out of range";\u000a  }\u000aLAB_00404465:\u000a  lVar3 = (*(code *)callback_arg)((ulong)success & 0xffffffff,__s1);\u000a  return lVar3;\u000a}\u000a\u000a
p458
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x58\nMOV R13,RCX\nMOV R14,RDX\nMOV R15,RSI\nMOV EBP,EDI\nMOV AL,byte ptr [0x006093f0]\nTEST AL,AL\nJNZ 0x0040438e\nCALL 0x00405170\nMOV RBX,RAX\nMOV ESI,0x40694c\nMOV RDI,RBX\nCALL 0x004014c0\nXOR ECX,ECX\nTEST EAX,EAX\nSETZ CL\nMOV dword ptr [0x006093f4],ECX\nJZ 0x00404387\nMOV ESI,0x40694c\nMOV RDI,RBX\nCALL 0x00401650\nMOV qword ptr [0x006093f8],RAX\nCMP RAX,-0x1\nJNZ 0x00404387\nMOV EDI,0x406969\nMOV ESI,0x40694c\nCALL 0x00401650\nMOV qword ptr [0x006093f8],RAX\nMOV byte ptr [0x006093f0],0x1\nCMP dword ptr [0x006093f4],0x0\nJNZ 0x004043ab\nCMP qword ptr [0x006093f8],-0x1\nJNZ 0x004043ab\nMOV ESI,0x40696f\nJMP 0x00404465\nLEA RBX,[RSP + 0x22]\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00404480\nTEST EAX,EAX\nJS 0x004043da\nCMP dword ptr [0x006093f4],0x0\nJZ 0x004043e4\nMOVSXD RSI,EAX\nLEA RDI,[RSP + 0x22]\nMOV RDX,R13\nCALL R15\nJMP 0x0040446d\nMOV ESI,0x406989\nJMP 0x00404465\nMOV qword ptr [RSP + 0x28],RBX\nCDQE\nMOV qword ptr [RSP + 0x18],RAX\nLEA R12,[RSP + 0x30]\nMOV qword ptr [RSP + 0x8],R12\nMOV qword ptr [RSP + 0x10],0x19\nMOV RDI,qword ptr [0x006093f8]\nLEA RSI,[RSP + 0x28]\nLEA RDX,[RSP + 0x18]\nLEA RCX,[RSP + 0x8]\nLEA R8,[RSP + 0x10]\nCALL 0x00401370\nCMP RAX,-0x1\nJZ 0x00404463\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJNZ 0x00404463\nMOV RDI,qword ptr [0x006093f8]\nLEA RCX,[RSP + 0x8]\nLEA R8,[RSP + 0x10]\nXOR ESI,ESI\nXOR EDX,EDX\nCALL 0x00401370\nCMP RAX,-0x1\nJZ 0x00404463\nMOV RSI,qword ptr [RSP + 0x8]\nSUB RSI,R12\nMOV RDI,R12\nJMP 0x004043cf\nXOR ESI,ESI\nMOV EDI,EBP\nMOV RDX,R13\nCALL R14\nADD RSP,0x58\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p459
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 58\n49 89 cd\n49 89 d6\n49 89 f7\n89 fd\n8a 05 c1 50 20 00\n84 c0\n75 5b\ne8 38 0e 00 00\n48 89 c3\nbe 4c 69 40 00\n48 89 df\ne8 78 d1 ff ff\n31 c9\n85 c0\n0f 94 c1\n89 0d 9f 50 20 00\n74 30\nbe 4c 69 40 00\n48 89 df\ne8 ec d2 ff ff\n48 89 05 8d 50 20 00\n48 83 f8 ff\n75 16\nbf 69 69 40 00\nbe 4c 69 40 00\ne8 d0 d2 ff ff\n48 89 05 71 50 20 00\nc6 05 62 50 20 00 01\n83 3d 5f 50 20 00 00\n75 14\n48 83 3d 59 50 20 00 ff\n75 0a\nbe 6f 69 40 00\ne9 ba 00 00 00\n48 8d 5c 24 22\n48 89 df\n89 ee\ne8 c6 00 00 00\n85 c0\n78 1c\n83 3d 2f 50 20 00 00\n74 1d\n48 63 f0\n48 8d 7c 24 22\n4c 89 ea\n41 ff d7\ne9 93 00 00 00\nbe 89 69 40 00\ne9 81 00 00 00\n48 89 5c 24 28\n48 98\n48 89 44 24 18\n4c 8d 64 24 30\n4c 89 64 24 08\n48 c7 44 24 10 19 00 00 00\n48 8b 3d ee 4f 20 00\n48 8d 74 24 28\n48 8d 54 24 18\n48 8d 4c 24 08\n4c 8d 44 24 10\ne8 4d cf ff ff\n48 83 f8 ff\n74 3a\n48 8b 44 24 18\n48 85 c0\n75 30\n48 8b 3d be 4f 20 00\n48 8d 4c 24 08\n4c 8d 44 24 10\n31 f6\n31 d2\ne8 23 cf ff ff\n48 83 f8 ff\n74 10\n48 8b 74 24 08\n4c 29 e6\n4c 89 e7\ne9 6c ff ff ff\n31 f6\n89 ef\n4c 89 ea\n41 ff d6\n48 83 c4 58\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p460
S'.text:0000000000404310\n.text:0000000000404311\n.text:0000000000404313\n.text:0000000000404315\n.text:0000000000404317\n.text:0000000000404319\n.text:000000000040431a\n.text:000000000040431e\n.text:0000000000404321\n.text:0000000000404324\n.text:0000000000404327\n.text:0000000000404329\n.text:000000000040432f\n.text:0000000000404331\n.text:0000000000404333\n.text:0000000000404338\n.text:000000000040433b\n.text:0000000000404340\n.text:0000000000404343\n.text:0000000000404348\n.text:000000000040434a\n.text:000000000040434c\n.text:000000000040434f\n.text:0000000000404355\n.text:0000000000404357\n.text:000000000040435c\n.text:000000000040435f\n.text:0000000000404364\n.text:000000000040436b\n.text:000000000040436f\n.text:0000000000404371\n.text:0000000000404376\n.text:000000000040437b\n.text:0000000000404380\n.text:0000000000404387\n.text:000000000040438e\n.text:0000000000404395\n.text:0000000000404397\n.text:000000000040439f\n.text:00000000004043a1\n.text:00000000004043a6\n.text:00000000004043ab\n.text:00000000004043b0\n.text:00000000004043b3\n.text:00000000004043b5\n.text:00000000004043ba\n.text:00000000004043bc\n.text:00000000004043be\n.text:00000000004043c5\n.text:00000000004043c7\n.text:00000000004043ca\n.text:00000000004043cf\n.text:00000000004043d2\n.text:00000000004043d5\n.text:00000000004043da\n.text:00000000004043df\n.text:00000000004043e4\n.text:00000000004043e9\n.text:00000000004043eb\n.text:00000000004043f0\n.text:00000000004043f5\n.text:00000000004043fa\n.text:0000000000404403\n.text:000000000040440a\n.text:000000000040440f\n.text:0000000000404414\n.text:0000000000404419\n.text:000000000040441e\n.text:0000000000404423\n.text:0000000000404427\n.text:0000000000404429\n.text:000000000040442e\n.text:0000000000404431\n.text:0000000000404433\n.text:000000000040443a\n.text:000000000040443f\n.text:0000000000404444\n.text:0000000000404446\n.text:0000000000404448\n.text:000000000040444d\n.text:0000000000404451\n.text:0000000000404453\n.text:0000000000404458\n.text:000000000040445b\n.text:000000000040445e\n.text:0000000000404463\n.text:0000000000404465\n.text:0000000000404467\n.text:000000000040446a\n.text:000000000040446d\n.text:0000000000404471\n.text:0000000000404472\n.text:0000000000404474\n.text:0000000000404476\n.text:0000000000404478\n.text:000000000040447a\n.text:000000000040447b\n'
p461
tp462
sS'c_tolower'
p463
(S'\n__stdcall c_tolower()\n'
p464
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p465
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p466
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p467
S'.text:00000000004050e0\n.text:00000000004050e3\n.text:00000000004050e6\n.text:00000000004050e9\n.text:00000000004050ec\n'
p468
tp469
sS'rpl_fseeko'
p470
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p471
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_00609190)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p472
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00405598\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00405598\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x004055aa\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004015b0\nMOV RDI,RBX\nCALL 0x004014f0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401430\nCMP RAX,-0x1\nJZ 0x004055d3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x004055d8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p473
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 06 c0 ff ff\n48 89 df\ne8 3e bf ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 71 be ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p474
S'.text:0000000000405570\n.text:0000000000405571\n.text:0000000000405573\n.text:0000000000405574\n.text:0000000000405577\n.text:000000000040557a\n.text:000000000040557d\n.text:0000000000405581\n.text:0000000000405585\n.text:0000000000405587\n.text:000000000040558b\n.text:000000000040558f\n.text:0000000000405591\n.text:0000000000405596\n.text:0000000000405598\n.text:000000000040559b\n.text:000000000040559e\n.text:00000000004055a1\n.text:00000000004055a2\n.text:00000000004055a4\n.text:00000000004055a5\n.text:00000000004055aa\n.text:00000000004055ad\n.text:00000000004055b2\n.text:00000000004055b4\n.text:00000000004055b7\n.text:00000000004055ba\n.text:00000000004055bf\n.text:00000000004055c3\n.text:00000000004055c5\n.text:00000000004055c8\n.text:00000000004055cf\n.text:00000000004055d1\n.text:00000000004055d3\n.text:00000000004055d8\n.text:00000000004055d9\n.text:00000000004055db\n.text:00000000004055dc\n'
p475
tp476
sS'quote_n_mem'
p477
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p478
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p479
S'MOV ECX,0x609228\nJMP 0x00403a10\n'
p480
S'b9 28 92 60 00\ne9 36 fb ff ff\n'
p481
S'.text:0000000000403ed0\n.text:0000000000403ed5\n'
p482
tp483
sS'xstrdup'
p484
(S'\n__stdcall xstrdup(char * string)\n'
p485
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p486
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004013f0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00404cd0\n'
p487
S'53\n48 89 fb\ne8 e7 c6 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p488
S'.text:0000000000404d00\n.text:0000000000404d01\n.text:0000000000404d04\n.text:0000000000404d09\n.text:0000000000404d0d\n.text:0000000000404d10\n.text:0000000000404d11\n'
p489
tp490
sS'c_ispunct'
p491
(S'\n__stdcall c_ispunct()\n'
p492
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p493
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00405082\nMOV AL,0x1\nJMP qword ptr [0x406da0 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p494
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd a0 6d 40 00\nc3\n31 c0\nc3\n'
p495
S'.text:0000000000405070\n.text:0000000000405073\n.text:0000000000405076\n.text:0000000000405078\n.text:000000000040507a\n.text:0000000000405081\n.text:0000000000405082\n.text:0000000000405084\n'
p496
tp497
sS'FUN_004012b0'
p498
(S'\n__stdcall FUN_004012b0()\n'
p499
V\u000avoid FUN_004012b0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00609010)();\u000a  return;\u000a}\u000a\u000a
p500
S'PUSH qword ptr [0x00609008]\nJMP qword ptr [0x00609010]\n'
p501
S'ff 35 52 7d 20 00\nff 25 54 7d 20 00\n'
p502
S'.plt:00000000004012b0\n.plt:00000000004012b6\n'
p503
tp504
sS'quotearg_style'
p505
(S'\n__stdcall quotearg_style(char * arg)\n'
p506
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p507
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00403c00\n'
p508
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p509
S'.text:0000000000403ce0\n.text:0000000000403ce3\n.text:0000000000403ce5\n.text:0000000000403ce7\n.text:0000000000403ce9\n.text:0000000000403cec\n'
p510
tp511
sS'print_direc'
p512
(S'\n__stdcall print_direc(char * start, size_t length, int precision, char * argument)\n'
p513
V\u000avoid print_direc(char *start,size_t length,int precision,char *argument)\u000a\u000a{\u000a  char *format;\u000a  undefined8 uVar1;\u000a  ulong uVar2;\u000a  uint uVar3;\u000a  long lVar4;\u000a  uint in_R8D;\u000a  char in_R9B;\u000a  undefined auVar5 [16];\u000a  uint in_stack_00000008;\u000a  char *s;\u000a  char *length_modifier;\u000a  char local_44;\u000a  char *local_38;\u000a  \u000a  uVar3 = precision - 0x41;\u000a  if (uVar3 < 0x38) {\u000a    if ((0x7100000071U >> ((ulong)uVar3 & 0x1f) & 1) == 0) {\u000a      if ((0x90410800800000U >> ((ulong)uVar3 & 0x1f) & 1) == 0) goto LAB_00402336;\u000a      local_38 = "ld";\u000a    }\u000a    else {\u000a      local_38 = "L";\u000a    }\u000a    lVar4 = 1;\u000a  }\u000a  else {\u000aLAB_00402336:\u000a    lVar4 = 0;\u000a    local_38 = start;\u000a  }\u000a  format = (char *)xmalloc(length + 2 + lVar4);\u000a  uVar1 = __mempcpy_chk(format,start,length,0xffffffffffffffff);\u000a  auVar5 = __mempcpy_chk(uVar1,local_38,lVar4,0xffffffffffffffff);\u000a  *SUB168(auVar5,0) = (char)precision;\u000a  SUB168(auVar5,0)[1] = 0;\u000a  local_44 = (char)argument;\u000a  switch(precision) {\u000a  case 0x41:\u000a  case 0x45:\u000a  case 0x46:\u000a  case 0x47:\u000a  case 0x61:\u000a  case 0x65:\u000a  case 0x66:\u000a  case 0x67:\u000a    vstrtold(s);\u000a    if (local_44 == 0) {\u000a      if (in_R9B == 0) {\u000a        xprintf(format);\u000a      }\u000a      else {\u000a        xprintf(format,(ulong)in_stack_00000008);\u000a      }\u000a    }\u000a    else {\u000a      if (in_R9B == 0) {\u000a        xprintf(format,(ulong)in_R8D);\u000a      }\u000a      else {\u000a        xprintf(format,(ulong)in_R8D,(ulong)in_stack_00000008);\u000a      }\u000a    }\u000a    break;\u000a  case 0x58:\u000a  case 0x6f:\u000a  case 0x75:\u000a  case 0x78:\u000a    s = (char *)vstrtoumax(s);\u000a    goto LAB_004022ac;\u000a  case 99:\u000a    uVar2 = (ulong)(uint)(int)*s;\u000a    if (local_44 == 0) {\u000a      xprintf(format,uVar2,SUB168(auVar5 >> 0x40,0),uVar2);\u000a    }\u000a    else {\u000a      xprintf(format,(ulong)in_R8D,uVar2);\u000a    }\u000a    break;\u000a  case 100:\u000a  case 0x69:\u000a    s = (char *)vstrtoimax(s);\u000aLAB_004022ac:\u000a    if (local_44 == 0) {\u000a      in_R8D = in_stack_00000008;\u000a      if (in_R9B == 0) {\u000aLAB_0040232c:\u000a        xprintf(format,s);\u000a        break;\u000a      }\u000a    }\u000a    else {\u000a      if (in_R9B != 0) {\u000aLAB_004022ca:\u000a        xprintf(format,(ulong)in_R8D,(ulong)in_stack_00000008,s);\u000a        break;\u000a      }\u000a    }\u000a    xprintf(format,(ulong)in_R8D,s);\u000a    break;\u000a  case 0x73:\u000a    if (local_44 == 0) {\u000a      in_R8D = in_stack_00000008;\u000a      if (in_R9B != 0) goto LAB_004023b4;\u000a      goto LAB_0040232c;\u000a    }\u000a    if (in_R9B == 0) {\u000aLAB_004023b4:\u000a      xprintf(format,(ulong)in_R8D,s);\u000a      break;\u000a    }\u000a    goto LAB_004022ca;\u000a  }\u000a  free(format);\u000a  return;\u000a}\u000a\u000a
p514
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV dword ptr [RSP + 0x20],R9D\nMOV dword ptr [RSP + 0x18],R8D\nMOV dword ptr [RSP + 0x24],ECX\nMOV R14D,EDX\nMOV R15,RSI\nMOV RAX,qword ptr [RSP + 0x78]\nMOV qword ptr [RSP + 0x28],RAX\nMOV EAX,dword ptr [RSP + 0x70]\nMOV dword ptr [RSP + 0x1c],EAX\nMOV EBX,R14D\nADD EBX,-0x41\nCMP EBX,0x37\nJA 0x00402336\nMOV RAX,0x7100000071\nBT RAX,RBX\nJNC 0x004021cd\nMOV R13,RDI\nMOV EAX,0x406364\nJMP 0x004021e9\nMOV RAX,0x90410800800000\nBT RAX,RBX\nJNC 0x00402336\nMOV R13,RDI\nMOV EAX,0x406361\nMOV qword ptr [RSP + 0x30],RAX\nMOV EBP,0x1\nLEA RDI,[R15 + RBP*0x1 + 0x2]\nCALL 0x00404b90\nMOV R12,RAX\nMOV RCX,-0x1\nMOV RDI,R12\nMOV RSI,R13\nMOV RDX,R15\nCALL 0x00401300\nMOV RCX,-0x1\nMOV RDI,RAX\nMOV RSI,qword ptr [RSP + 0x30]\nMOV RDX,RBP\nCALL 0x00401300\nMOV byte ptr [RAX],R14B\nMOV byte ptr [RAX + 0x1],0x0\nCMP EBX,0x37\nJA 0x004023be\nJMP qword ptr [0x405800 + RBX*0x8]\nMOV RDI,qword ptr [RSP + 0x28]\nCALL 0x004027a0\nCMP byte ptr [RSP + 0x24],0x0\nJZ 0x00402285\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x004022e6\nFSTP tword ptr [RSP]\nXOR EAX,EAX\nMOV RDI,R12\nMOV ESI,dword ptr [RSP + 0x18]\nMOV EDX,dword ptr [RSP + 0x1c]\nCALL 0x00404d50\nJMP 0x004023be\nMOV RDI,qword ptr [RSP + 0x28]\nCALL 0x00402710\nJMP 0x004022ac\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x004022fc\nFSTP tword ptr [RSP]\nXOR EAX,EAX\nMOV RDI,R12\nMOV ESI,dword ptr [RSP + 0x1c]\nCALL 0x00404d50\nJMP 0x004023be\nMOV RDI,qword ptr [RSP + 0x28]\nCALL 0x004020e0\nMOV RCX,RAX\nCMP byte ptr [RSP + 0x24],0x0\nJZ 0x004022d4\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x0040230e\nXOR EAX,EAX\nMOV RDI,R12\nMOV ESI,dword ptr [RSP + 0x18]\nMOV EDX,dword ptr [RSP + 0x1c]\nCALL 0x00404d50\nJMP 0x004023be\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00402324\nXOR EAX,EAX\nMOV RDI,R12\nMOV ESI,dword ptr [RSP + 0x1c]\nJMP 0x00402317\nFSTP tword ptr [RSP]\nXOR EAX,EAX\nMOV RDI,R12\nMOV ESI,dword ptr [RSP + 0x18]\nCALL 0x00404d50\nJMP 0x004023be\nFSTP tword ptr [RSP]\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00404d50\nJMP 0x004023be\nXOR EAX,EAX\nMOV RDI,R12\nMOV ESI,dword ptr [RSP + 0x18]\nMOV RDX,RCX\nCALL 0x00404d50\nJMP 0x004023be\nXOR EAX,EAX\nMOV RDI,R12\nMOV RSI,RCX\nCALL 0x00404d50\nJMP 0x004023be\nXOR EBP,EBP\nMOV R13,RDI\nMOV qword ptr [RSP + 0x30],RDI\nJMP 0x004021f3\nMOV RAX,qword ptr [RSP + 0x28]\nMOVSX ECX,byte ptr [RAX]\nCMP byte ptr [RSP + 0x24],0x0\nJZ 0x0040238b\nXOR EAX,EAX\nMOV RDI,R12\nMOV ESI,dword ptr [RSP + 0x18]\nMOV EDX,ECX\nCALL 0x00404d50\nJMP 0x004023be\nCMP byte ptr [RSP + 0x24],0x0\nJZ 0x00402399\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x004023ab\nXOR EAX,EAX\nMOV RDI,R12\nMOV ESI,dword ptr [RSP + 0x18]\nMOV EDX,dword ptr [RSP + 0x1c]\nMOV RCX,qword ptr [RSP + 0x28]\nJMP 0x004022ca\nXOR EAX,EAX\nMOV RDI,R12\nMOV ESI,ECX\nCALL 0x00404d50\nJMP 0x004023be\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x004023d4\nXOR EAX,EAX\nMOV RDI,R12\nMOV ESI,dword ptr [RSP + 0x1c]\nJMP 0x004023b4\nXOR EAX,EAX\nMOV RDI,R12\nMOV ESI,dword ptr [RSP + 0x18]\nMOV RDX,qword ptr [RSP + 0x28]\nCALL 0x00404d50\nMOV RDI,R12\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004012d0\nXOR EAX,EAX\nMOV RDI,R12\nMOV RSI,qword ptr [RSP + 0x28]\nJMP 0x0040232c\n'
p515
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n44 89 4c 24 20\n44 89 44 24 18\n89 4c 24 24\n41 89 d6\n49 89 f7\n48 8b 44 24 78\n48 89 44 24 28\n8b 44 24 70\n89 44 24 1c\n44 89 f3\n83 c3 bf\n83 fb 37\n0f 87 83 01 00 00\n48 b8 71 00 00 00 71 00 00 00\n48 0f a3 d8\n73 0a\n49 89 fd\nb8 64 63 40 00\neb 1c\n48 b8 00 00 80 00 08 41 90 00\n48 0f a3 d8\n0f 83 55 01 00 00\n49 89 fd\nb8 61 63 40 00\n48 89 44 24 30\nbd 01 00 00 00\n49 8d 7c 2f 02\ne8 93 29 00 00\n49 89 c4\n48 c7 c1 ff ff ff ff\n4c 89 e7\n4c 89 ee\n4c 89 fa\ne8 eb f0 ff ff\n48 c7 c1 ff ff ff ff\n48 89 c7\n48 8b 74 24 30\n48 89 ea\ne8 d4 f0 ff ff\n44 88 30\nc6 40 01 00\n83 fb 37\n0f 87 82 01 00 00\nff 24 dd 00 58 40 00\n48 8b 7c 24 28\ne8 53 05 00 00\n80 7c 24 24 00\n74 31\n80 7c 24 20 00\n0f 84 87 00 00 00\ndb 3c 24\n31 c0\n4c 89 e7\n8b 74 24 18\n8b 54 24 1c\ne8 dc 2a 00 00\ne9 45 01 00 00\n48 8b 7c 24 28\ne8 8d 04 00 00\neb 27\n80 7c 24 20 00\n74 70\ndb 3c 24\n31 c0\n4c 89 e7\n8b 74 24 1c\ne8 b3 2a 00 00\ne9 1c 01 00 00\n48 8b 7c 24 28\ne8 34 fe ff ff\n48 89 c1\n80 7c 24 24 00\n74 1e\n80 7c 24 20 00\n74 51\n31 c0\n4c 89 e7\n8b 74 24 18\n8b 54 24 1c\ne8 81 2a 00 00\ne9 ea 00 00 00\n80 7c 24 20 00\n74 49\n31 c0\n4c 89 e7\n8b 74 24 1c\neb 31\ndb 3c 24\n31 c0\n4c 89 e7\n8b 74 24 18\ne8 59 2a 00 00\ne9 c2 00 00 00\ndb 3c 24\n31 c0\n4c 89 e7\ne8 47 2a 00 00\ne9 b0 00 00 00\n31 c0\n4c 89 e7\n8b 74 24 18\n48 89 ca\ne8 31 2a 00 00\ne9 9a 00 00 00\n31 c0\n4c 89 e7\n48 89 ce\ne8 1f 2a 00 00\ne9 88 00 00 00\n31 ed\n49 89 fd\n48 89 7c 24 30\ne9 ae fe ff ff\n48 8b 44 24 28\n0f be 08\n80 7c 24 24 00\n74 37\n31 c0\n4c 89 e7\n8b 74 24 18\n89 ca\ne8 ec 29 00 00\neb 58\n80 7c 24 24 00\n74 2c\n80 7c 24 20 00\n74 37\n31 c0\n4c 89 e7\n8b 74 24 18\n8b 54 24 1c\n48 8b 4c 24 28\ne9 3f ff ff ff\n31 c0\n4c 89 e7\n89 ce\ne8 b9 29 00 00\neb 25\n80 7c 24 20 00\n74 34\n31 c0\n4c 89 e7\n8b 74 24 1c\neb 09\n31 c0\n4c 89 e7\n8b 74 24 18\n48 8b 54 24 28\ne8 92 29 00 00\n4c 89 e7\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 fc ee ff ff\n31 c0\n4c 89 e7\n48 8b 74 24 28\ne9 49 ff ff ff\n'
p516
S'.text:0000000000402170\n.text:0000000000402171\n.text:0000000000402173\n.text:0000000000402175\n.text:0000000000402177\n.text:0000000000402179\n.text:000000000040217a\n.text:000000000040217e\n.text:0000000000402183\n.text:0000000000402188\n.text:000000000040218c\n.text:000000000040218f\n.text:0000000000402192\n.text:0000000000402197\n.text:000000000040219c\n.text:00000000004021a0\n.text:00000000004021a4\n.text:00000000004021a7\n.text:00000000004021aa\n.text:00000000004021ad\n.text:00000000004021b3\n.text:00000000004021bd\n.text:00000000004021c1\n.text:00000000004021c3\n.text:00000000004021c6\n.text:00000000004021cb\n.text:00000000004021cd\n.text:00000000004021d7\n.text:00000000004021db\n.text:00000000004021e1\n.text:00000000004021e4\n.text:00000000004021e9\n.text:00000000004021ee\n.text:00000000004021f3\n.text:00000000004021f8\n.text:00000000004021fd\n.text:0000000000402200\n.text:0000000000402207\n.text:000000000040220a\n.text:000000000040220d\n.text:0000000000402210\n.text:0000000000402215\n.text:000000000040221c\n.text:000000000040221f\n.text:0000000000402224\n.text:0000000000402227\n.text:000000000040222c\n.text:000000000040222f\n.text:0000000000402233\n.text:0000000000402236\n.text:000000000040223c\n.text:0000000000402243\n.text:0000000000402248\n.text:000000000040224d\n.text:0000000000402252\n.text:0000000000402254\n.text:0000000000402259\n.text:000000000040225f\n.text:0000000000402262\n.text:0000000000402264\n.text:0000000000402267\n.text:000000000040226b\n.text:000000000040226f\n.text:0000000000402274\n.text:0000000000402279\n.text:000000000040227e\n.text:0000000000402283\n.text:0000000000402285\n.text:000000000040228a\n.text:000000000040228c\n.text:000000000040228f\n.text:0000000000402291\n.text:0000000000402294\n.text:0000000000402298\n.text:000000000040229d\n.text:00000000004022a2\n.text:00000000004022a7\n.text:00000000004022ac\n.text:00000000004022af\n.text:00000000004022b4\n.text:00000000004022b6\n.text:00000000004022bb\n.text:00000000004022bd\n.text:00000000004022bf\n.text:00000000004022c2\n.text:00000000004022c6\n.text:00000000004022ca\n.text:00000000004022cf\n.text:00000000004022d4\n.text:00000000004022d9\n.text:00000000004022db\n.text:00000000004022dd\n.text:00000000004022e0\n.text:00000000004022e4\n.text:00000000004022e6\n.text:00000000004022e9\n.text:00000000004022eb\n.text:00000000004022ee\n.text:00000000004022f2\n.text:00000000004022f7\n.text:00000000004022fc\n.text:00000000004022ff\n.text:0000000000402301\n.text:0000000000402304\n.text:0000000000402309\n.text:000000000040230e\n.text:0000000000402310\n.text:0000000000402313\n.text:0000000000402317\n.text:000000000040231a\n.text:000000000040231f\n.text:0000000000402324\n.text:0000000000402326\n.text:0000000000402329\n.text:000000000040232c\n.text:0000000000402331\n.text:0000000000402336\n.text:0000000000402338\n.text:000000000040233b\n.text:0000000000402340\n.text:0000000000402345\n.text:000000000040234a\n.text:000000000040234d\n.text:0000000000402352\n.text:0000000000402354\n.text:0000000000402356\n.text:0000000000402359\n.text:000000000040235d\n.text:000000000040235f\n.text:0000000000402364\n.text:0000000000402366\n.text:000000000040236b\n.text:000000000040236d\n.text:0000000000402372\n.text:0000000000402374\n.text:0000000000402376\n.text:0000000000402379\n.text:000000000040237d\n.text:0000000000402381\n.text:0000000000402386\n.text:000000000040238b\n.text:000000000040238d\n.text:0000000000402390\n.text:0000000000402392\n.text:0000000000402397\n.text:0000000000402399\n.text:000000000040239e\n.text:00000000004023a0\n.text:00000000004023a2\n.text:00000000004023a5\n.text:00000000004023a9\n.text:00000000004023ab\n.text:00000000004023ad\n.text:00000000004023b0\n.text:00000000004023b4\n.text:00000000004023b9\n.text:00000000004023be\n.text:00000000004023c1\n.text:00000000004023c5\n.text:00000000004023c6\n.text:00000000004023c8\n.text:00000000004023ca\n.text:00000000004023cc\n.text:00000000004023ce\n.text:00000000004023cf\n.text:00000000004023d4\n.text:00000000004023d6\n.text:00000000004023d9\n.text:00000000004023de\n'
p517
tp518
sS'fscanf'
p519
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p520
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006090e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x006090e0]\n'
p522
S'ff 25 8a 7c 20 00\n'
p523
S'.plt:0000000000401450\n'
p524
tp525
sS'emit_try_help'
p526
(S'\n__stdcall emit_try_help()\n'
p527
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p528
S'PUSH RBX\nMOV RBX,qword ptr [0x00609280]\nXOR EDI,EDI\nMOV ESI,0x406124\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x006092a8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401600\n'
p529
S'53\n48 8b 1d b8 79 20 00\n31 ff\nbe 24 61 40 00\nba 05 00 00 00\ne8 f7 fa ff ff\n48 89 c2\n48 8b 0d c5 79 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 0d fd ff ff\n'
p530
S'.text:00000000004018c0\n.text:00000000004018c1\n.text:00000000004018c8\n.text:00000000004018ca\n.text:00000000004018cf\n.text:00000000004018d4\n.text:00000000004018d9\n.text:00000000004018dc\n.text:00000000004018e3\n.text:00000000004018e8\n.text:00000000004018ea\n.text:00000000004018ed\n.text:00000000004018ee\n'
p531
tp532
sS'u8_uctomb'
p533
(S'\n__stdcall u8_uctomb()\n'
p534
V\u000aint u8_uctomb(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint in_ESI;\u000a  uint8_t *s;\u000a  \u000a  if (in_ESI < 0x80) {\u000a    *s = (uint8_t)in_ESI;\u000a    return 1;\u000a  }\u000a  iVar1 = u8_uctomb_aux(s);\u000a  return iVar1;\u000a}\u000a\u000a
p535
S'CMP ESI,0x80\nJNC 0x00404491\nMOV byte ptr [RDI],SIL\nMOV EAX,0x1\nRET\nMOV EDX,0x6\nJMP 0x004045b0\n'
p536
S'81 fe 80 00 00 00\n73 09\n40 88 37\nb8 01 00 00 00\nc3\nba 06 00 00 00\ne9 15 01 00 00\n'
p537
S'.text:0000000000404480\n.text:0000000000404486\n.text:0000000000404488\n.text:000000000040448b\n.text:0000000000404490\n.text:0000000000404491\n.text:0000000000404496\n'
p538
tp539
sS'memcpy'
p540
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00609120)();\u000a  return pvVar1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x00609120]\n'
p543
S'ff 25 4a 7c 20 00\n'
p544
S'.plt:00000000004014d0\n'
p545
tp546
sS'strrchr'
p547
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p548
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006090c8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p549
S'JMP qword ptr [0x006090c8]\n'
p550
S'ff 25 a2 7c 20 00\n'
p551
S'.plt:0000000000401420\n'
p552
tp553
sS'vstrtoimax'
p554
(S'\n__stdcall vstrtoimax(char * s)\n'
p555
V\u000aintmax_t vstrtoimax(char *s)\u000a\u000a{\u000a  char *in_RAX;\u000a  undefined8 uVar1;\u000a  int *piVar2;\u000a  ulong uVar3;\u000a  char *local_18;\u000a  \u000a  if (((*s == '\u005c'') || (*s == '\u005c"')) && (uVar3 = (ulong)(byte)s[1], s[1] != 0)) {\u000a    if ((s[2] != 0) && (posixly_correct == false)) {\u000a      uVar1 = dcgettext(0,"warning: %s: character(s) following character constant have been ignored"\u000a                        ,5);\u000a      error(0,0,uVar1,s + 2);\u000a    }\u000a  }\u000a  else {\u000a    local_18 = in_RAX;\u000a    piVar2 = __errno_location();\u000a    *piVar2 = 0;\u000a    uVar3 = strtoimax(s,&local_18,0);\u000a    verify_numeric(s,local_18);\u000a  }\u000a  return uVar3;\u000a}\u000a\u000a
p556
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV AL,byte ptr [RBX]\nCMP AL,0x27\nJZ 0x004020f1\nCMP AL,0x22\nJNZ 0x00402136\nMOVZX R14D,byte ptr [RBX + 0x1]\nTEST R14,R14\nJZ 0x00402136\nCMP byte ptr [RBX + 0x2],0x0\nJZ 0x0040215d\nMOV AL,byte ptr [0x0060928d]\nTEST AL,AL\nJNZ 0x0040215d\nADD RBX,0x2\nXOR EDI,EDI\nMOV ESI,0x4062d8\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00401590\nJMP 0x0040215d\nCALL 0x00401320\nMOV dword ptr [RAX],0x0\nMOV RSI,RSP\nXOR EDX,EDX\nMOV RDI,RBX\nCALL 0x004012e0\nMOV R14,RAX\nMOV RSI,qword ptr [RSP]\nMOV RDI,RBX\nCALL 0x00402690\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p557
S'41 56\n53\n50\n48 89 fb\n8a 03\n3c 27\n74 04\n3c 22\n75 45\n44 0f b6 73 01\n4d 85 f6\n74 3b\n80 7b 02 00\n74 5c\n8a 05 86 71 20 00\n84 c0\n75 52\n48 83 c3 02\n31 ff\nbe d8 62 40 00\nba 05 00 00 00\ne8 b0 f2 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n48 89 d9\ne8 5c f4 ff ff\neb 27\ne8 e5 f1 ff ff\nc7 00 00 00 00 00\n48 89 e6\n31 d2\n48 89 df\ne8 92 f1 ff ff\n49 89 c6\n48 8b 34 24\n48 89 df\ne8 33 05 00 00\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p558
S'.text:00000000004020e0\n.text:00000000004020e2\n.text:00000000004020e3\n.text:00000000004020e4\n.text:00000000004020e7\n.text:00000000004020e9\n.text:00000000004020eb\n.text:00000000004020ed\n.text:00000000004020ef\n.text:00000000004020f1\n.text:00000000004020f6\n.text:00000000004020f9\n.text:00000000004020fb\n.text:00000000004020ff\n.text:0000000000402101\n.text:0000000000402107\n.text:0000000000402109\n.text:000000000040210b\n.text:000000000040210f\n.text:0000000000402111\n.text:0000000000402116\n.text:000000000040211b\n.text:0000000000402120\n.text:0000000000402123\n.text:0000000000402125\n.text:0000000000402127\n.text:0000000000402129\n.text:000000000040212c\n.text:000000000040212f\n.text:0000000000402134\n.text:0000000000402136\n.text:000000000040213b\n.text:0000000000402141\n.text:0000000000402144\n.text:0000000000402146\n.text:0000000000402149\n.text:000000000040214e\n.text:0000000000402151\n.text:0000000000402155\n.text:0000000000402158\n.text:000000000040215d\n.text:0000000000402160\n.text:0000000000402164\n.text:0000000000402165\n.text:0000000000402167\n'
p559
tp560
sS'close_stdout_set_ignore_EPIPE'
p561
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p562
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p563
S'MOV byte ptr [0x006092a0],DIL\nRET\n'
p564
S'40 88 3d 59 69 20 00\nc3\n'
p565
S'.text:0000000000402940\n.text:0000000000402947\n'
p566
tp567
sS'quotearg_alloc_mem'
p568
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p569
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p570
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x6092b0\nCMOVNZ R12,RCX\nCALL 0x00401320\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402c30\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00404c60\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402c30\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040395a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p571
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc b0 92 60 00\n4c 0f 45 e1\ne8 68 da ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 51 13 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p572
S'.text:0000000000403880\n.text:0000000000403881\n.text:0000000000403883\n.text:0000000000403885\n.text:0000000000403887\n.text:0000000000403889\n.text:000000000040388a\n.text:000000000040388e\n.text:0000000000403891\n.text:0000000000403896\n.text:0000000000403899\n.text:000000000040389e\n.text:00000000004038a1\n.text:00000000004038a6\n.text:00000000004038a9\n.text:00000000004038af\n.text:00000000004038b3\n.text:00000000004038b8\n.text:00000000004038bd\n.text:00000000004038bf\n.text:00000000004038c3\n.text:00000000004038c5\n.text:00000000004038c8\n.text:00000000004038cc\n.text:00000000004038d1\n.text:00000000004038d5\n.text:00000000004038da\n.text:00000000004038de\n.text:00000000004038e0\n.text:00000000004038e2\n.text:00000000004038e5\n.text:00000000004038e8\n.text:00000000004038eb\n.text:00000000004038f0\n.text:00000000004038f5\n.text:00000000004038f7\n.text:00000000004038fc\n.text:0000000000403900\n.text:0000000000403903\n.text:0000000000403907\n.text:000000000040390a\n.text:000000000040390f\n.text:0000000000403912\n.text:0000000000403916\n.text:000000000040391a\n.text:000000000040391d\n.text:0000000000403920\n.text:0000000000403925\n.text:000000000040392a\n.text:000000000040392d\n.text:0000000000403932\n.text:0000000000403937\n.text:0000000000403939\n.text:000000000040393e\n.text:0000000000403943\n.text:0000000000403947\n.text:000000000040394a\n.text:000000000040394e\n.text:0000000000403953\n.text:0000000000403955\n.text:0000000000403957\n.text:000000000040395a\n.text:000000000040395d\n.text:0000000000403961\n.text:0000000000403962\n.text:0000000000403964\n.text:0000000000403966\n.text:0000000000403968\n.text:000000000040396a\n.text:000000000040396b\n'
p573
tp574
sS'iswprint'
p575
(S'\n__stdcall iswprint(wint_t __wc)\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_006091d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x006091d0]\n'
p578
S'ff 25 9a 7b 20 00\n'
p579
S'.plt:0000000000401630\n'
p580
tp581
sS'memchr'
p582
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_006090f0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x006090f0]\n'
p585
S'ff 25 7a 7c 20 00\n'
p586
S'.plt:0000000000401470\n'
p587
tp588
sS'quotearg_style_mem'
p589
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p590
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p591
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403ca0\n'
p592
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p593
S'.text:0000000000403d00\n.text:0000000000403d03\n.text:0000000000403d06\n.text:0000000000403d08\n.text:0000000000403d0a\n.text:0000000000403d0c\n.text:0000000000403d0f\n.text:0000000000403d12\n'
p594
tp595
sS'xalloc_die'
p596
(S'\n__stdcall xalloc_die()\n'
p597
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x406298,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p598
S'PUSH RBX\nMOV EBX,dword ptr [0x00609200]\nXOR EDI,EDI\nMOV ESI,0x406d6f\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x406298\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401590\nCALL 0x00401310\n'
p599
S'53\n8b 1d d9 44 20 00\n31 ff\nbe 6f 6d 40 00\nba 05 00 00 00\ne8 98 c6 ff ff\n48 89 c1\n31 f6\nba 98 62 40 00\n31 c0\n89 df\ne8 45 c8 ff ff\ne8 c0 c5 ff ff\n'
p600
S'.text:0000000000404d20\n.text:0000000000404d21\n.text:0000000000404d27\n.text:0000000000404d29\n.text:0000000000404d2e\n.text:0000000000404d33\n.text:0000000000404d38\n.text:0000000000404d3b\n.text:0000000000404d3d\n.text:0000000000404d42\n.text:0000000000404d44\n.text:0000000000404d46\n.text:0000000000404d4b\n'
p601
tp602
sS'c_isspace'
p603
(S'\n__stdcall c_isspace()\n'
p604
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p605
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x004050a5\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p606
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p607
S'.text:0000000000405090\n.text:0000000000405093\n.text:0000000000405096\n.text:0000000000405098\n.text:000000000040509d\n.text:000000000040509f\n.text:00000000004050a1\n.text:00000000004050a4\n.text:00000000004050a5\n.text:00000000004050a7\n'
p608
tp609
sS'quotearg_n_custom'
p610
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p611
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p612
S'MOV R8,-0x1\nJMP 0x00403e20\n'
p613
S'49 c7 c0 ff ff ff ff\neb 07\n'
p614
S'.text:0000000000403e10\n.text:0000000000403e17\n'
p615
tp616
sS'open'
p617
(S'\n__stdcall open(char * __file, int __oflag)\n'
p618
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_00609188)();\u000a  return iVar1;\u000a}\u000a\u000a
p619
S'JMP qword ptr [0x00609188]\n'
p620
S'ff 25 e2 7b 20 00\n'
p621
S'.plt:00000000004015a0\n'
p622
tp623
sS'quotearg_n_custom_mem'
p624
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p625
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p626
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x006092e0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x006092d0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x006092c0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006092b0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00402b80\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403a10\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p627
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 a7 54 20 00\n48 89 44 24 30\n0f 10 05 8b 54 20 00\n0f 29 44 24 20\n0f 10 05 6f 54 20 00\n0f 29 44 24 10\n0f 10 05 53 54 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p628
S'.text:0000000000403e20\n.text:0000000000403e21\n.text:0000000000403e23\n.text:0000000000403e25\n.text:0000000000403e26\n.text:0000000000403e2a\n.text:0000000000403e2d\n.text:0000000000403e30\n.text:0000000000403e32\n.text:0000000000403e39\n.text:0000000000403e3e\n.text:0000000000403e45\n.text:0000000000403e4a\n.text:0000000000403e51\n.text:0000000000403e56\n.text:0000000000403e5d\n.text:0000000000403e61\n.text:0000000000403e64\n.text:0000000000403e67\n.text:0000000000403e6c\n.text:0000000000403e6e\n.text:0000000000403e71\n.text:0000000000403e74\n.text:0000000000403e77\n.text:0000000000403e7c\n.text:0000000000403e80\n.text:0000000000403e81\n.text:0000000000403e83\n.text:0000000000403e85\n.text:0000000000403e86\n'
p629
tp630
sS'fallback_failure_callback'
p631
(S'\n__stdcall fallback_failure_callback(char * msg, void * callback_arg)\n'
p632
V\u000along fallback_failure_callback(char *msg,void *callback_arg)\u000a\u000a{\u000a  __fprintf_chk();\u000a  return -1;\u000a}\u000a\u000a
p633
S'PUSH RAX\nMOV R8,RDX\nMOV ECX,EDI\nMOV ESI,0x1\nCMP ECX,0xffff\nJA 0x0040458a\nMOV EDX,0x4069fe\nJMP 0x0040458f\nMOV EDX,0x406a05\nXOR EAX,EAX\nMOV RDI,R8\nCALL 0x00401600\nMOV RAX,-0x1\nPOP RCX\nRET\n'
p634
S'50\n49 89 d0\n89 f9\nbe 01 00 00 00\n81 f9 ff ff 00 00\n77 07\nba fe 69 40 00\neb 05\nba 05 6a 40 00\n31 c0\n4c 89 c7\ne8 67 d0 ff ff\n48 c7 c0 ff ff ff ff\n59\nc3\n'
p635
S'.text:0000000000404570\n.text:0000000000404571\n.text:0000000000404574\n.text:0000000000404576\n.text:000000000040457b\n.text:0000000000404581\n.text:0000000000404583\n.text:0000000000404588\n.text:000000000040458a\n.text:000000000040458f\n.text:0000000000404591\n.text:0000000000404594\n.text:0000000000404599\n.text:00000000004045a0\n.text:00000000004045a1\n'
p636
tp637
sS'_init'
p638
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p639
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00608ff8;\u000a  if (PTR___gmon_start___00608ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00608ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p640
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00608ff8]\nTEST RAX,RAX\nJZ 0x004012aa\nCALL RAX\nADD RSP,0x8\nRET\n'
p641
S'48 83 ec 08\n48 8b 05 55 7d 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p642
S'.init:0000000000401298\n.init:000000000040129c\n.init:00000000004012a3\n.init:00000000004012a6\n.init:00000000004012a8\n.init:00000000004012aa\n.init:00000000004012ae\n'
p643
tp644
sS'verify_numeric'
p645
(S'\n__stdcall verify_numeric(char * s, char * end)\n'
p646
V\u000avoid verify_numeric(char *s,char *end)\u000a\u000a{\u000a  uint uVar1;\u000a  uint *puVar2;\u000a  char *pcVar3;\u000a  undefined8 uVar4;\u000a  ulong uVar5;\u000a  \u000a  puVar2 = (uint *)__errno_location();\u000a  uVar1 = *puVar2;\u000a  if (uVar1 == 0) {\u000a    if (*end == 0) {\u000a      return;\u000a    }\u000a    if (s == end) {\u000a      pcVar3 = "%s: expected a numeric value";\u000a    }\u000a    else {\u000a      pcVar3 = "%s: value not completely converted";\u000a    }\u000a    uVar4 = dcgettext(0,pcVar3,5);\u000a    pcVar3 = quote(s);\u000a    uVar5 = 0;\u000a  }\u000a  else {\u000a    pcVar3 = quote(s);\u000a    uVar4 = 0x406298;\u000a    uVar5 = (ulong)uVar1;\u000a  }\u000a  error(0,uVar5,uVar4,pcVar3);\u000a  exit_status = 1;\u000a  return;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x00401320\nMOV EBP,dword ptr [RAX]\nTEST EBP,EBP\nJZ 0x004026bd\nMOV RDI,R14\nCALL 0x00403f00\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x406298\nXOR EAX,EAX\nMOV ESI,EBP\nJMP 0x004026f6\nCMP byte ptr [RBX],0x0\nJZ 0x00402702\nXOR EDI,EDI\nCMP R14,RBX\nJZ 0x004026d0\nMOV ESI,0x40633e\nJMP 0x004026d5\nMOV ESI,0x406321\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBX,RAX\nMOV RDI,R14\nCALL 0x00403f00\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401590\nMOV byte ptr [0x0060928c],0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p648
S'55\n41 56\n53\n48 89 f3\n49 89 fe\ne8 81 ec ff ff\n8b 28\n85 ed\n74 18\n4c 89 f7\ne8 53 18 00 00\n48 89 c1\n31 ff\nba 98 62 40 00\n31 c0\n89 ee\neb 39\n80 3b 00\n74 40\n31 ff\n49 39 de\n74 07\nbe 3e 63 40 00\neb 05\nbe 21 63 40 00\nba 05 00 00 00\ne8 f1 ec ff ff\n48 89 c3\n4c 89 f7\ne8 16 18 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 95 ee ff ff\nc6 05 8a 6b 20 00 01\n5b\n41 5e\n5d\nc3\n'
p649
S'.text:0000000000402690\n.text:0000000000402691\n.text:0000000000402693\n.text:0000000000402694\n.text:0000000000402697\n.text:000000000040269a\n.text:000000000040269f\n.text:00000000004026a1\n.text:00000000004026a3\n.text:00000000004026a5\n.text:00000000004026a8\n.text:00000000004026ad\n.text:00000000004026b0\n.text:00000000004026b2\n.text:00000000004026b7\n.text:00000000004026b9\n.text:00000000004026bb\n.text:00000000004026bd\n.text:00000000004026c0\n.text:00000000004026c2\n.text:00000000004026c4\n.text:00000000004026c7\n.text:00000000004026c9\n.text:00000000004026ce\n.text:00000000004026d0\n.text:00000000004026d5\n.text:00000000004026da\n.text:00000000004026df\n.text:00000000004026e2\n.text:00000000004026e5\n.text:00000000004026ea\n.text:00000000004026ed\n.text:00000000004026ef\n.text:00000000004026f1\n.text:00000000004026f3\n.text:00000000004026f6\n.text:00000000004026fb\n.text:0000000000402702\n.text:0000000000402703\n.text:0000000000402705\n.text:0000000000402706\n'
p650
tp651
sS'__freading'
p652
(S'\n__stdcall __freading()\n'
p653
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00609158)();\u000a  return;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x00609158]\n'
p655
S'ff 25 12 7c 20 00\n'
p656
S'.plt:0000000000401540\n'
p657
tp658
sS'exit_failure_callback'
p659
(S'\n__stdcall exit_failure_callback(char * msg, void * callback_arg)\n'
p660
V\u000along exit_failure_callback(char *msg,void *callback_arg)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  if (callback_arg == (void *)0x0) {\u000a    uVar1 = dcgettext(0,"cannot convert U+%04X to local character set",5);\u000a    error(1,0,uVar1,(ulong)msg & 0xffffffff);\u000a  }\u000a  else {\u000a    uVar1 = dcgettext(0,"cannot convert U+%04X to local character set: %s",5);\u000a    uVar2 = dcgettext(0,callback_arg,5);\u000a    error(1,0,uVar1,(ulong)msg & 0xffffffff,uVar2);\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p661
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RSI\nMOV R14D,EDI\nXOR EDI,EDI\nTEST RBX,RBX\nJZ 0x0040453e\nMOV ESI,0x4069cd\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBP,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004013d0\nMOV RBX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nMOV ECX,R14D\nMOV R8,RBX\nCALL 0x00401590\nJMP 0x00404564\nMOV ESI,0x4069a0\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV ECX,R14D\nCALL 0x00401590\nMOV RAX,-0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p662
S'55\n41 56\n53\n48 89 f3\n41 89 fe\n31 ff\n48 85 db\n74 3d\nbe cd 69 40 00\nba 05 00 00 00\ne8 c0 ce ff ff\n48 89 c5\n31 ff\nba 05 00 00 00\n48 89 de\ne8 ae ce ff ff\n48 89 c3\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ea\n44 89 f1\n49 89 d8\ne8 54 d0 ff ff\neb 26\nbe a0 69 40 00\nba 05 00 00 00\ne8 83 ce ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\n44 89 f1\ne8 2c d0 ff ff\n48 c7 c0 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p663
S'.text:00000000004044f0\n.text:00000000004044f1\n.text:00000000004044f3\n.text:00000000004044f4\n.text:00000000004044f7\n.text:00000000004044fa\n.text:00000000004044fc\n.text:00000000004044ff\n.text:0000000000404501\n.text:0000000000404506\n.text:000000000040450b\n.text:0000000000404510\n.text:0000000000404513\n.text:0000000000404515\n.text:000000000040451a\n.text:000000000040451d\n.text:0000000000404522\n.text:0000000000404525\n.text:000000000040452a\n.text:000000000040452c\n.text:000000000040452e\n.text:0000000000404531\n.text:0000000000404534\n.text:0000000000404537\n.text:000000000040453c\n.text:000000000040453e\n.text:0000000000404543\n.text:0000000000404548\n.text:000000000040454d\n.text:0000000000404550\n.text:0000000000404555\n.text:0000000000404557\n.text:0000000000404559\n.text:000000000040455c\n.text:000000000040455f\n.text:0000000000404564\n.text:000000000040456b\n.text:000000000040456c\n.text:000000000040456e\n.text:000000000040456f\n'
p664
tp665
sS'set_quoting_flags'
p666
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p667
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p668
S'TEST RDI,RDI\nMOV ECX,0x6092b0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p669
S'48 85 ff\nb9 b0 92 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p670
S'.text:0000000000402b60\n.text:0000000000402b63\n.text:0000000000402b68\n.text:0000000000402b6c\n.text:0000000000402b6f\n.text:0000000000402b72\n'
p671
tp672
sS'main'
p673
(S'\n__stdcall main(char * * argv)\n'
p674
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000aint main(char **argv)\u000a\u000a{\u000a  byte *pbVar1;\u000a  int iVar2;\u000a  char *format;\u000a  undefined8 uVar3;\u000a  char *__s;\u000a  long lVar4;\u000a  intmax_t iVar5;\u000a  long lVar6;\u000a  byte bVar7;\u000a  char **extraout_RDX;\u000a  char **ppcVar8;\u000a  FILE *pFVar9;\u000a  int iVar10;\u000a  uint uVar11;\u000a  byte *pbVar12;\u000a  byte *escstart;\u000a  char **in_RSI;\u000a  ulong uVar13;\u000a  int __c;\u000a  char *__s1;\u000a  undefined4 uStack336;\u000a  undefined4 uStack332;\u000a  undefined4 uStack328;\u000a  undefined4 uStack324;\u000a  undefined4 uStack320;\u000a  undefined4 uStack316;\u000a  undefined4 uStack312;\u000a  undefined4 uStack308;\u000a  undefined4 uStack304;\u000a  undefined4 uStack300;\u000a  undefined4 uStack296;\u000a  undefined4 uStack292;\u000a  undefined4 uStack288;\u000a  undefined4 uStack284;\u000a  undefined4 uStack280;\u000a  undefined4 uStack276;\u000a  undefined4 uStack272;\u000a  uint uStack268;\u000a  undefined4 uStack264;\u000a  undefined4 uStack260;\u000a  undefined4 uStack256;\u000a  undefined4 uStack252;\u000a  undefined4 uStack248;\u000a  undefined4 uStack244;\u000a  undefined uStack240;\u000a  undefined uStack239;\u000a  undefined uStack238;\u000a  undefined uStack237;\u000a  undefined uStack236;\u000a  undefined uStack235;\u000a  undefined uStack234;\u000a  undefined uStack233;\u000a  undefined4 uStack232;\u000a  undefined4 uStack228;\u000a  undefined4 uStack224;\u000a  undefined4 uStack220;\u000a  undefined4 uStack216;\u000a  undefined4 uStack212;\u000a  undefined4 uStack208;\u000a  undefined4 uStack204;\u000a  undefined4 uStack200;\u000a  undefined4 uStack196;\u000a  undefined4 uStack192;\u000a  undefined4 uStack188;\u000a  undefined4 uStack184;\u000a  undefined4 uStack180;\u000a  undefined4 uStack176;\u000a  undefined4 uStack172;\u000a  undefined4 uStack168;\u000a  undefined4 uStack164;\u000a  undefined4 uStack160;\u000a  undefined4 uStack156;\u000a  undefined4 uStack152;\u000a  undefined4 uStack148;\u000a  undefined4 uStack144;\u000a  undefined4 uStack140;\u000a  undefined4 uStack136;\u000a  undefined4 uStack132;\u000a  undefined4 uStack128;\u000a  undefined4 uStack124;\u000a  undefined4 uStack120;\u000a  undefined4 uStack116;\u000a  undefined4 uStack112;\u000a  undefined4 uStack108;\u000a  undefined4 uStack104;\u000a  undefined4 uStack100;\u000a  undefined4 uStack96;\u000a  undefined4 uStack92;\u000a  undefined4 uStack88;\u000a  undefined4 uStack84;\u000a  char *pcStack48;\u000a  ulong uStack32;\u000a  \u000a  iVar10 = (int)((ulong)argv & 0xffffffff);\u000a  uStack32 = 0x401a41;\u000a  set_program_name(*in_RSI);\u000a  uStack32 = 0x401a50;\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  uStack32 = 0x401a5f;\u000a  bindtextdomain(0x4060c2);\u000a  uStack32 = 0x401a69;\u000a  textdomain(0x4060c2);\u000a  uStack32 = 0x401a73;\u000a  atexit(close_stdout);\u000a  exit_status = 0;\u000a  uStack32 = 0x401a84;\u000a  format = getenv("POSIXLY_CORRECT");\u000a  posixly_correct = (_Bool)(format != (char *)0x0);\u000a  if (iVar10 == 2) {\u000a    __s1 = in_RSI[1];\u000a    format = "--help";\u000a    uStack32 = 0x401aa4;\u000a    iVar2 = strcmp(__s1,"--help");\u000a    if (iVar2 == 0) goto LAB_00401ba8;\u000a    uStack32 = 0x401ab9;\u000a    iVar2 = strcmp(__s1,"--version");\u000a    if (iVar2 == 0) {\u000a      uStack32 = 0x401ae7;\u000a      version_etc(stdout,"printf","GNU coreutils",Version,"David MacKenzie",0);\u000a      return 0;\u000a    }\u000aLAB_00401af2:\u000a    format = in_RSI[1];\u000a    if (((*format != '-') || (format[1] != '-')) || (format[2] != 0)) {\u000aLAB_00401b12:\u000a      format = in_RSI[1];\u000a      uVar11 = iVar10 - 2;\u000a      ppcVar8 = in_RSI + 2;\u000a      do {\u000a        uStack32 = 0x401b2d;\u000a        iVar10 = print_formatted(format,(char **)(ulong)uVar11);\u000a        uVar11 = uVar11 - iVar10;\u000a        ppcVar8 = ppcVar8 + (long)iVar10;\u000a        if (iVar10 < 1) break;\u000a      } while (0 < (int)uVar11);\u000a      if (0 < (int)uVar11) {\u000a        uStack32 = 0x401b52;\u000a        uVar3 = dcgettext(0,"warning: ignoring excess arguments, starting with %s",5);\u000a        uStack32 = 0x401b5d;\u000a        format = quote(*ppcVar8);\u000a        uStack32 = 0x401b6e;\u000a        error(0,0,uVar3,format);\u000a      }\u000a      return (int)(uint)exit_status;\u000a    }\u000a    if (2 < iVar10) {\u000a      in_RSI = in_RSI + 1;\u000a      iVar10 = iVar10 + -1;\u000a      goto LAB_00401b12;\u000a    }\u000a  }\u000a  else {\u000a    if (1 < iVar10) goto LAB_00401af2;\u000a  }\u000a  uStack32 = 0x401b8d;\u000a  uVar3 = dcgettext(0,"missing operand",5);\u000a  format = (char *)0x0;\u000a  uStack32 = 0x401b9e;\u000a  error(0,0,uVar3);\u000a  uStack32 = 0x401ba8;\u000a  usage();\u000aLAB_00401ba8:\u000a  escstart = (byte *)0x0;\u000a  uStack32 = 0x401baf;\u000a  usage();\u000a  iVar10 = (int)format;\u000a  bVar7 = *escstart;\u000a  ppcVar8 = extraout_RDX;\u000a  uStack32 = (ulong)argv & 0xffffffff;\u000a  pcStack48 = __s1;\u000a  iVar2 = iVar10;\u000ajoined_r0x00401bd5:\u000a  if (bVar7 == 0) {\u000a    return iVar10 - iVar2;\u000a  }\u000a  __c = (int)(char)bVar7;\u000a  if (__c == 0x5c) {\u000a    format = (char *)0x0;\u000a    __c = print_esc((char *)escstart);\u000a    escstart = escstart + (long)__c;\u000a  }\u000a  else {\u000a    if (__c == 0x25) {\u000a      pbVar12 = escstart + 1;\u000a      bVar7 = escstart[1];\u000a      if (bVar7 == 0x71) {\u000a        escstart = pbVar12;\u000a        if (0 < iVar2) {\u000a          __s = quotearg_style((char *)0x3);\u000a          format = (char *)stdout;\u000a          fputs_unlocked(__s,(FILE *)stdout);\u000aLAB_00401ca7:\u000a          ppcVar8 = ppcVar8 + 1;\u000a          iVar2 = iVar2 + -1;\u000a          escstart = pbVar12;\u000a        }\u000a      }\u000a      else {\u000a        if (bVar7 == 0x62) {\u000a          escstart = pbVar12;\u000a          if (0 < iVar2) {\u000a            print_esc_string(*ppcVar8);\u000a            goto LAB_00401ca7;\u000a          }\u000a        }\u000a        else {\u000a          if (bVar7 != 0x25) {\u000a            uStack96 = 0;\u000a            uStack92 = 0;\u000a            uStack88 = 0;\u000a            uStack84 = 0;\u000a            uStack112 = 0;\u000a            uStack108 = 0;\u000a            uStack104 = 0;\u000a            uStack100 = 0;\u000a            uStack128 = 0;\u000a            uStack124 = 0;\u000a            uStack120 = 0;\u000a            uStack116 = 0;\u000a            uStack144 = 0;\u000a            uStack140 = 0;\u000a            uStack136 = 0;\u000a            uStack132 = 0;\u000a            uStack160 = 0;\u000a            uStack156 = 0;\u000a            uStack152 = 0;\u000a            uStack148 = 0;\u000a            uStack176 = 0;\u000a            uStack172 = 0;\u000a            uStack168 = 0;\u000a            uStack164 = 0;\u000a            uStack192 = 0;\u000a            uStack188 = 0;\u000a            uStack184 = 0;\u000a            uStack180 = 0;\u000a            uStack208 = 0;\u000a            uStack204 = 0;\u000a            uStack200 = 0;\u000a            uStack196 = 0;\u000a            uStack212 = 0;\u000a            uStack240 = 0;\u000a            uStack238 = 0;\u000a            uStack256 = 0;\u000a            uStack252 = 0;\u000a            uStack244 = 0;\u000a            uStack264 = 0;\u000a            uStack260 = 0;\u000a            uStack288 = 0;\u000a            uStack284 = 0;\u000a            uStack280 = 0;\u000a            uStack276 = 0;\u000a            uStack304 = 0;\u000a            uStack300 = 0;\u000a            uStack296 = 0;\u000a            uStack292 = 0;\u000a            uStack320 = 0;\u000a            uStack316 = 0;\u000a            uStack312 = 0;\u000a            uStack308 = 0;\u000a            uStack336 = 0;\u000a            uStack332 = 0;\u000a            uStack328 = 0;\u000a            uStack324 = 0;\u000a            uStack248 = 1;\u000a            uStack216 = 1;\u000a            uStack220 = 0x100;\u000a            uStack224 = 0x1000000;\u000a            uStack228 = 0x1000000;\u000a            uStack232 = 0x100;\u000a            uStack268 = 0x1010100;\u000a            uStack272 = 0x100;\u000a            uStack239 = 1;\u000a            uStack233 = 1;\u000a            uStack237 = 1;\u000a            uStack236 = 1;\u000a            uStack235 = 1;\u000a            uStack234 = 1;\u000a            lVar4 = 0;\u000a            pFVar9 = (FILE *)0x1;\u000a            do {\u000a              switch(escstart[(long)pFVar9]) {\u000a              case 0x20:\u000a              case 0x2b:\u000a              case 0x2d:\u000a                break;\u000a              default:\u000a                goto switchD_00401da8_caseD_21;\u000a              case 0x23:\u000a                uStack220 = 0;\u000a                uStack224 = 0;\u000a                uStack232 = 0;\u000a                uStack237 = 0;\u000a                uStack236 = 0;\u000a                break;\u000a              case 0x27:\u000a              case 0x49:\u000a                uStack248 = 0;\u000a                uStack216 = 0;\u000a                uStack224 = 0;\u000a                uStack228 = 0;\u000a                uStack268 = uStack268 & 0xffff0000;\u000a                uStack235 = 0;\u000a                uStack237 = 0;\u000a                uStack272 = 0;\u000a                uStack239 = 0;\u000a                break;\u000a              case 0x30:\u000a                uStack224 = 0;\u000a                uStack237 = 0;\u000a              }\u000a              pFVar9 = (FILE *)((long)&pFVar9->_flags + 1);\u000a              lVar4 = lVar4 + 1;\u000a            } while( true );\u000a          }\u000a          putchar_unlocked(0x25);\u000a          escstart = pbVar12;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      putchar_unlocked(__c);\u000a    }\u000a  }\u000a  goto LAB_00402060;\u000aswitchD_00401da8_caseD_21:\u000a  if (escstart[(long)pFVar9] == 0x2a) {\u000a    pbVar12 = escstart + 1 + (long)pFVar9;\u000a    pFVar9 = (FILE *)((long)&pFVar9->_flags + 1);\u000a    uVar13 = CONCAT71((int7)((ulong)format >> 8),1);\u000a    if (iVar2 < 1) {\u000a      bVar7 = *pbVar12;\u000a      format = (char *)pFVar9;\u000a    }\u000a    else {\u000a      iVar5 = vstrtoimax(*ppcVar8);\u000a      if (iVar5 - 0x80000000U >> 0x20 != 0) {\u000a        uVar3 = dcgettext(0,"invalid field width: %s",5);\u000a        quote(*ppcVar8);\u000a        uVar13 = 0;\u000a        error(1,0,uVar3);\u000a      }\u000a      uVar13 = CONCAT71((int7)(uVar13 >> 8),1);\u000a      ppcVar8 = ppcVar8 + 1;\u000a      iVar2 = iVar2 + -1;\u000a      bVar7 = *pbVar12;\u000a      format = (char *)pFVar9;\u000a    }\u000a  }\u000a  else {\u000a    pbVar12 = escstart + (long)pFVar9;\u000a    if ((int)(char)*pbVar12 - 0x30U < 10) {\u000a      do {\u000a        lVar6 = lVar4;\u000a        lVar4 = lVar6 + 1;\u000a      } while ((int)(char)escstart[lVar6 + 2] - 0x30U < 10);\u000a      pbVar12 = escstart + lVar6 + 2;\u000a      uVar13 = 0;\u000a      bVar7 = *pbVar12;\u000a      format = (char *)(lVar6 + 2);\u000a    }\u000a    else {\u000a      uVar13 = 0;\u000a      bVar7 = *pbVar12;\u000a      format = (char *)pFVar9;\u000a    }\u000a  }\u000a  if (bVar7 == 0x2e) {\u000a    uStack237 = 0;\u000a    if (pbVar12[1] == 0x2a) {\u000a      pbVar12 = pbVar12 + 2;\u000a      format = (char *)((long)&((FILE *)format)->_flags + 2);\u000a      if (0 < iVar2) {\u000a        uVar13 = uVar13 & 0xffffffff;\u000a        iVar5 = vstrtoimax(*ppcVar8);\u000a        if ((-1 < iVar5) && (0x7fffffff < iVar5)) {\u000a          uVar3 = dcgettext(0,"invalid precision: %s",5);\u000a          quote(*ppcVar8);\u000a          error(1,0,uVar3);\u000a        }\u000a        ppcVar8 = ppcVar8 + 1;\u000a        iVar2 = iVar2 + -1;\u000a      }\u000a    }\u000a    else {\u000a      do {\u000a        format = (char *)((long)&((FILE *)format)->_flags + 1);\u000a        pbVar1 = pbVar12 + 1;\u000a        pbVar12 = pbVar12 + 1;\u000a      } while ((int)(char)*pbVar1 - 0x30U < 10);\u000a    }\u000a  }\u000a  while( true ) {\u000a    bVar7 = *pbVar12 + 0xb4;\u000a    if ((0x2e < bVar7) || ((uVar13 >> ((ulong)bVar7 & 0x1f) & 1) == 0)) break;\u000a    pbVar12 = pbVar12 + 1;\u000a  }\u000a  if (*(char *)((long)&uStack336 + (ulong)*pbVar12) == 0) {\u000a    uVar13 = uVar13 & 0xffffffff;\u000a    uVar3 = dcgettext(0,"%.*s: invalid conversion specification",5);\u000a    error(1,0,uVar3,(ulong)(uint)(((int)pbVar12 + 1) - (int)escstart),escstart);\u000a  }\u000a  if (0 < iVar2) {\u000a    iVar2 = iVar2 + -1;\u000a    ppcVar8 = ppcVar8 + 1;\u000a  }\u000a  print_direc((char *)escstart,(size_t)format,(int)(char)*pbVar12,(char *)(uVar13 & 0xff));\u000a  escstart = pbVar12;\u000aLAB_00402060:\u000a  bVar7 = escstart[1];\u000a  escstart = escstart + 1;\u000a  goto joined_r0x00401bd5;\u000a}\u000a\u000a
p675
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RSI\nMOV EBP,EDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00402a10\nMOV EDI,0x6\nMOV ESI,0x406b41\nCALL 0x00401570\nMOV EDI,0x4060c2\nMOV ESI,0x406085\nCALL 0x004013c0\nMOV EDI,0x4060c2\nCALL 0x004013a0\nMOV EDI,0x402950\nCALL 0x00405660\nMOV byte ptr [0x0060928c],0x0\nMOV EDI,0x40609d\nCALL 0x004012c0\nTEST RAX,RAX\nSETNZ byte ptr [0x0060928d]\nCMP EBP,0x2\nJNZ 0x00401aec\nMOV R14,qword ptr [RBX + 0x8]\nMOV ESI,0x4060ad\nMOV RDI,R14\nCALL 0x004014c0\nTEST EAX,EAX\nJZ 0x00401ba8\nMOV ESI,0x4060b4\nMOV RDI,R14\nCALL 0x004014c0\nTEST EAX,EAX\nJNZ 0x00401af2\nMOV RDI,qword ptr [0x00609268]\nMOV RCX,qword ptr [0x006091f8]\nXOR EBX,EBX\nMOV ESI,0x40607e\nMOV EDX,0x4060be\nMOV R8D,0x4060cc\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x00404a60\nJMP 0x00401b75\nJL 0x00401b7c\nMOV RAX,qword ptr [RBX + 0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00401b12\nCMP byte ptr [RAX + 0x1],0x2d\nJNZ 0x00401b12\nCMP byte ptr [RAX + 0x2],0x0\nJNZ 0x00401b12\nCMP EBP,0x2\nJLE 0x00401b7c\nADD RBX,0x8\nDEC EBP\nMOV R14,qword ptr [RBX + 0x8]\nADD EBP,-0x2\nADD RBX,0x10\nNOP dword ptr [RAX]\nMOV RDI,R14\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x00401bb0\nSUB EBP,EAX\nCDQE\nLEA RBX,[RBX + RAX*0x8]\nTEST EAX,EAX\nJLE 0x00401b3d\nTEST EBP,EBP\nJG 0x00401b20\nTEST EBP,EBP\nJLE 0x00401b6e\nXOR EDI,EDI\nMOV ESI,0x4060ef\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RBP,RAX\nMOV RDI,qword ptr [RBX]\nCALL 0x00403f00\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401590\nMOVZX EBX,byte ptr [0x0060928c]\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x4060df\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401590\nMOV EDI,0x1\nCALL 0x00401760\nXOR EDI,EDI\nCALL 0x00401760\nNOP\n'
p676
S'55\n41 56\n53\n48 89 f3\n89 fd\n48 8b 3b\ne8 cf 0f 00 00\nbf 06 00 00 00\nbe 41 6b 40 00\ne8 20 fb ff ff\nbf c2 60 40 00\nbe 85 60 40 00\ne8 61 f9 ff ff\nbf c2 60 40 00\ne8 37 f9 ff ff\nbf 50 29 40 00\ne8 ed 3b 00 00\nc6 05 12 78 20 00 00\nbf 9d 60 40 00\ne8 3c f8 ff ff\n48 85 c0\n0f 95 05 ff 77 20 00\n83 fd 02\n75 59\n4c 8b 73 08\nbe ad 60 40 00\n4c 89 f7\ne8 1c fa ff ff\n85 c0\n0f 84 fc 00 00 00\nbe b4 60 40 00\n4c 89 f7\ne8 07 fa ff ff\n85 c0\n75 35\n48 8b 3d a4 77 20 00\n48 8b 0d 2d 77 20 00\n31 db\nbe 7e 60 40 00\nba be 60 40 00\n41 b8 cc 60 40 00\n45 31 c9\n31 c0\ne8 79 2f 00 00\ne9 89 00 00 00\n0f 8c 8a 00 00 00\n48 8b 43 08\n80 38 2d\n75 17\n80 78 01 2d\n75 11\n80 78 02 00\n75 0b\n83 fd 02\n7e 70\n48 83 c3 08\nff cd\n4c 8b 73 08\n83 c5 fe\n48 83 c3 10\n0f 1f 00\n4c 89 f7\n89 ee\n48 89 da\ne8 83 00 00 00\n29 c5\n48 98\n48 8d 1c c3\n85 c0\n7e 04\n85 ed\n7f e3\n85 ed\n7e 2d\n31 ff\nbe ef 60 40 00\nba 05 00 00 00\ne8 7e f8 ff ff\n48 89 c5\n48 8b 3b\ne8 a3 23 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 22 fa ff ff\n0f b6 1d 17 77 20 00\n89 d8\n5b\n41 5e\n5d\nc3\n31 ff\nbe df 60 40 00\nba 05 00 00 00\ne8 43 f8 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 f2 f9 ff ff\nbf 01 00 00 00\ne8 b8 fb ff ff\n31 ff\ne8 b1 fb ff ff\n90\n'
p677
S'.text:0000000000401a30\n.text:0000000000401a31\n.text:0000000000401a33\n.text:0000000000401a34\n.text:0000000000401a37\n.text:0000000000401a39\n.text:0000000000401a3c\n.text:0000000000401a41\n.text:0000000000401a46\n.text:0000000000401a4b\n.text:0000000000401a50\n.text:0000000000401a55\n.text:0000000000401a5a\n.text:0000000000401a5f\n.text:0000000000401a64\n.text:0000000000401a69\n.text:0000000000401a6e\n.text:0000000000401a73\n.text:0000000000401a7a\n.text:0000000000401a7f\n.text:0000000000401a84\n.text:0000000000401a87\n.text:0000000000401a8e\n.text:0000000000401a91\n.text:0000000000401a93\n.text:0000000000401a97\n.text:0000000000401a9c\n.text:0000000000401a9f\n.text:0000000000401aa4\n.text:0000000000401aa6\n.text:0000000000401aac\n.text:0000000000401ab1\n.text:0000000000401ab4\n.text:0000000000401ab9\n.text:0000000000401abb\n.text:0000000000401abd\n.text:0000000000401ac4\n.text:0000000000401acb\n.text:0000000000401acd\n.text:0000000000401ad2\n.text:0000000000401ad7\n.text:0000000000401add\n.text:0000000000401ae0\n.text:0000000000401ae2\n.text:0000000000401ae7\n.text:0000000000401aec\n.text:0000000000401af2\n.text:0000000000401af6\n.text:0000000000401af9\n.text:0000000000401afb\n.text:0000000000401aff\n.text:0000000000401b01\n.text:0000000000401b05\n.text:0000000000401b07\n.text:0000000000401b0a\n.text:0000000000401b0c\n.text:0000000000401b10\n.text:0000000000401b12\n.text:0000000000401b16\n.text:0000000000401b19\n.text:0000000000401b1d\n.text:0000000000401b20\n.text:0000000000401b23\n.text:0000000000401b25\n.text:0000000000401b28\n.text:0000000000401b2d\n.text:0000000000401b2f\n.text:0000000000401b31\n.text:0000000000401b35\n.text:0000000000401b37\n.text:0000000000401b39\n.text:0000000000401b3b\n.text:0000000000401b3d\n.text:0000000000401b3f\n.text:0000000000401b41\n.text:0000000000401b43\n.text:0000000000401b48\n.text:0000000000401b4d\n.text:0000000000401b52\n.text:0000000000401b55\n.text:0000000000401b58\n.text:0000000000401b5d\n.text:0000000000401b60\n.text:0000000000401b62\n.text:0000000000401b64\n.text:0000000000401b66\n.text:0000000000401b69\n.text:0000000000401b6e\n.text:0000000000401b75\n.text:0000000000401b77\n.text:0000000000401b78\n.text:0000000000401b7a\n.text:0000000000401b7b\n.text:0000000000401b7c\n.text:0000000000401b7e\n.text:0000000000401b83\n.text:0000000000401b88\n.text:0000000000401b8d\n.text:0000000000401b90\n.text:0000000000401b92\n.text:0000000000401b94\n.text:0000000000401b96\n.text:0000000000401b99\n.text:0000000000401b9e\n.text:0000000000401ba3\n.text:0000000000401ba8\n.text:0000000000401baa\n.text:0000000000401baf\n'
p678
tp679
sS'fputs_unlocked'
p680
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p681
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_00609100)();\u000a  return iVar1;\u000a}\u000a\u000a
p682
S'JMP qword ptr [0x00609100]\n'
p683
S'ff 25 6a 7c 20 00\n'
p684
S'.plt:0000000000401490\n'
p685
tp686
sS'realloc'
p687
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p688
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00609160)();\u000a  return pvVar1;\u000a}\u000a\u000a
p689
S'JMP qword ptr [0x00609160]\n'
p690
S'ff 25 0a 7c 20 00\n'
p691
S'.plt:0000000000401550\n'
p692
tp693
sS'xcharalloc'
p694
(S'\n__stdcall xcharalloc(size_t n)\n'
p695
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p696
S'JMP 0x00404b90\n'
p697
S'e9 2b ff ff ff\n'
p698
S'.text:0000000000404c60\n'
p699
tp700
sS'c_isupper'
p701
(S'\n__stdcall c_isupper()\n'
p702
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p703
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p704
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p705
S'.text:00000000004050b0\n.text:00000000004050b3\n.text:00000000004050b6\n.text:00000000004050b9\n'
p706
tp707
sS'__fprintf_chk'
p708
(S'\n__stdcall __fprintf_chk()\n'
p709
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_006091b8)();\u000a  return;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x006091b8]\n'
p711
S'ff 25 b2 7b 20 00\n'
p712
S'.plt:0000000000401600\n'
p713
tp714
sS'get_charset_aliases'
p715
(S'\n__stdcall get_charset_aliases()\n'
p716
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00405414_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00405414_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00405414_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00405414_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00405414_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00405414_caseD_9;\u000a      case -1:\u000a        goto switchD_00405414_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040546d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00405473:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00405414_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00405473;\u000a  }\u000a  goto LAB_0040546d;\u000a}\u000a\u000a
p717
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x00609400]\nTEST R15,R15\nJNZ 0x00405482\nMOV EDI,0x4071c6\nCALL 0x004012c0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405238\nCMP byte ptr [RBX],0x0\nJNZ 0x0040523d\nMOV EBX,0x4071d6\nMOV RDI,RBX\nCALL 0x004013f0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00405257\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00405259\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401500\nMOV R13,RAX\nTEST R13,R13\nJZ 0x004052ad\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004014d0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x004052b8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x004052d5\nMOV R15D,0x406b41\nJMP 0x0040547b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004015a0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040546d\nMOV ESI,0x4063d1\nMOV EDI,EBP\nCALL 0x00401560\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405434\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00405400\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401350\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401350\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00405400\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401530\nMOV ESI,0x4071e5\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401450\nCMP EAX,0x2\nJL 0x00405454\nMOV RDI,R12\nCALL 0x004013f0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004013f0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004053dd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401550\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00405324\nJMP 0x0040543d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401500\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00405324\nJMP 0x0040543d\nMOV RDI,RBX\nCALL 0x00401390\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00405367\nJMP qword ptr [0x407090 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401390\nCMP EAX,-0x1\nJZ 0x00405454\nCMP EAX,0xa\nJNZ 0x00405420\nJMP 0x00405400\nMOV EDI,EBP\nCALL 0x00401460\nJMP 0x0040546d\nMOV RDI,R15\nCALL 0x004012d0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x004054a0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040546d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00405473\nMOV R15D,0x406b41\nMOV RDI,R13\nCALL 0x004012d0\nMOV qword ptr [0x00609400],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p718
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d e8 41 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf c6 71 40 00\ne8 95 c0 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb d6 71 40 00\n48 89 df\ne8 ab c1 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 99 c2 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 53 c2 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 41 6b 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 bc c2 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe d1 63 40 00\n89 ef\ne8 66 c2 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 0b c0 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 fb bf ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 bf c1 ff ff\nbe e5 71 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 ca c0 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 59 c0 ff ff\n49 89 c4\n48 89 ef\ne8 4e c0 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 86 c1 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 15 c1 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 88 bf ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 90 70 40 00\n48 89 df\ne8 68 bf ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 25 c0 ff ff\neb 30\n4c 89 ff\ne8 8b be ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 44 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 41 6b 40 00\n4c 89 ef\ne8 55 be ff ff\n4c 89 3d 7e 3f 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p719
S'.text:0000000000405200\n.text:0000000000405201\n.text:0000000000405203\n.text:0000000000405205\n.text:0000000000405207\n.text:0000000000405209\n.text:000000000040520a\n.text:0000000000405211\n.text:0000000000405218\n.text:000000000040521b\n.text:0000000000405221\n.text:0000000000405226\n.text:000000000040522b\n.text:000000000040522e\n.text:0000000000405231\n.text:0000000000405233\n.text:0000000000405236\n.text:0000000000405238\n.text:000000000040523d\n.text:0000000000405240\n.text:0000000000405245\n.text:0000000000405248\n.text:000000000040524b\n.text:000000000040524d\n.text:0000000000405252\n.text:0000000000405255\n.text:0000000000405257\n.text:0000000000405259\n.text:000000000040525d\n.text:0000000000405262\n.text:0000000000405267\n.text:000000000040526a\n.text:000000000040526d\n.text:000000000040526f\n.text:0000000000405272\n.text:0000000000405275\n.text:0000000000405278\n.text:000000000040527d\n.text:0000000000405280\n.text:0000000000405283\n.text:0000000000405286\n.text:0000000000405288\n.text:000000000040528e\n.text:0000000000405298\n.text:000000000040529d\n.text:00000000004052a7\n.text:00000000004052ab\n.text:00000000004052ad\n.text:00000000004052b3\n.text:00000000004052b8\n.text:00000000004052c2\n.text:00000000004052c7\n.text:00000000004052d1\n.text:00000000004052d5\n.text:00000000004052da\n.text:00000000004052dc\n.text:00000000004052df\n.text:00000000004052e4\n.text:00000000004052e6\n.text:00000000004052e8\n.text:00000000004052ee\n.text:00000000004052f3\n.text:00000000004052f5\n.text:00000000004052fa\n.text:00000000004052fd\n.text:0000000000405300\n.text:0000000000405306\n.text:000000000040530b\n.text:0000000000405310\n.text:0000000000405312\n.text:0000000000405317\n.text:000000000040531a\n.text:000000000040531f\n.text:0000000000405324\n.text:0000000000405329\n.text:000000000040532c\n.text:000000000040532f\n.text:0000000000405332\n.text:0000000000405335\n.text:0000000000405338\n.text:000000000040533d\n.text:0000000000405340\n.text:0000000000405345\n.text:0000000000405348\n.text:000000000040534d\n.text:0000000000405350\n.text:0000000000405355\n.text:000000000040535a\n.text:000000000040535d\n.text:0000000000405362\n.text:0000000000405367\n.text:0000000000405369\n.text:000000000040536c\n.text:0000000000405371\n.text:0000000000405376\n.text:0000000000405378\n.text:000000000040537b\n.text:000000000040537e\n.text:0000000000405381\n.text:0000000000405386\n.text:0000000000405389\n.text:000000000040538f\n.text:0000000000405392\n.text:0000000000405397\n.text:000000000040539a\n.text:000000000040539d\n.text:00000000004053a2\n.text:00000000004053a5\n.text:00000000004053aa\n.text:00000000004053af\n.text:00000000004053b2\n.text:00000000004053b4\n.text:00000000004053b8\n.text:00000000004053bd\n.text:00000000004053c2\n.text:00000000004053c5\n.text:00000000004053ca\n.text:00000000004053cd\n.text:00000000004053d2\n.text:00000000004053d5\n.text:00000000004053db\n.text:00000000004053dd\n.text:00000000004053e2\n.text:00000000004053e6\n.text:00000000004053eb\n.text:00000000004053ee\n.text:00000000004053f1\n.text:00000000004053f7\n.text:0000000000405400\n.text:0000000000405403\n.text:0000000000405408\n.text:000000000040540b\n.text:000000000040540e\n.text:0000000000405414\n.text:0000000000405420\n.text:0000000000405423\n.text:0000000000405428\n.text:000000000040542b\n.text:000000000040542d\n.text:0000000000405430\n.text:0000000000405432\n.text:0000000000405434\n.text:0000000000405436\n.text:000000000040543b\n.text:000000000040543d\n.text:0000000000405440\n.text:0000000000405445\n.text:0000000000405447\n.text:000000000040544c\n.text:000000000040544f\n.text:0000000000405454\n.text:0000000000405457\n.text:000000000040545c\n.text:0000000000405461\n.text:0000000000405464\n.text:0000000000405466\n.text:000000000040546b\n.text:000000000040546d\n.text:0000000000405473\n.text:0000000000405476\n.text:000000000040547b\n.text:0000000000405482\n.text:0000000000405485\n.text:000000000040548c\n.text:000000000040548d\n.text:000000000040548f\n.text:0000000000405491\n.text:0000000000405493\n.text:0000000000405495\n.text:0000000000405496\n'
p720
tp721
sS'nl_langinfo'
p722
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p723
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00609148)();\u000a  return pcVar1;\u000a}\u000a\u000a
p724
S'JMP qword ptr [0x00609148]\n'
p725
S'ff 25 22 7c 20 00\n'
p726
S'.plt:0000000000401520\n'
p727
tp728
sS'c_isalnum'
p729
(S'\n__stdcall c_isalnum()\n'
p730
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p731
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00404fcb\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00404fcb\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00404fca\nXOR EAX,EAX\nRET\n'
p732
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p733
S'.text:0000000000404fb0\n.text:0000000000404fb2\n.text:0000000000404fb5\n.text:0000000000404fb8\n.text:0000000000404fba\n.text:0000000000404fc4\n.text:0000000000404fc8\n.text:0000000000404fca\n.text:0000000000404fcb\n.text:0000000000404fce\n.text:0000000000404fd1\n.text:0000000000404fd3\n.text:0000000000404fd5\n'
p734
tp735
sS'x2realloc'
p736
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p737
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p738
S'MOV EDX,0x1\nJMP 0x00404c00\n'
p739
S'ba 01 00 00 00\neb 89\n'
p740
S'.text:0000000000404c70\n.text:0000000000404c75\n'
p741
tp742
sS'__mempcpy_chk'
p743
(S'\n__stdcall __mempcpy_chk()\n'
p744
V\u000avoid __mempcpy_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___mempcpy_chk_00609038)();\u000a  return;\u000a}\u000a\u000a
p745
S'JMP qword ptr [0x00609038]\n'
p746
S'ff 25 32 7d 20 00\n'
p747
S'.plt:0000000000401300\n'
p748
tp749
sS'strlen'
p750
(S'\n__stdcall strlen(char * __s)\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_006090b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x006090b0]\n'
p753
S'ff 25 ba 7c 20 00\n'
p754
S'.plt:00000000004013f0\n'
p755
tp756
sS'memcmp'
p757
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p758
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_006090f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p759
S'JMP qword ptr [0x006090f8]\n'
p760
S'ff 25 72 7c 20 00\n'
p761
S'.plt:0000000000401480\n'
p762
tp763
sS'quotearg_n_style_mem'
p764
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p765
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p766
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403c40\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403a10\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p767
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p768
S'.text:0000000000403ca0\n.text:0000000000403ca1\n.text:0000000000403ca3\n.text:0000000000403ca5\n.text:0000000000403ca6\n.text:0000000000403caa\n.text:0000000000403cad\n.text:0000000000403cb0\n.text:0000000000403cb2\n.text:0000000000403cb5\n.text:0000000000403cb8\n.text:0000000000403cbd\n.text:0000000000403cbf\n.text:0000000000403cc2\n.text:0000000000403cc5\n.text:0000000000403cc8\n.text:0000000000403ccd\n.text:0000000000403cd1\n.text:0000000000403cd2\n.text:0000000000403cd4\n.text:0000000000403cd6\n.text:0000000000403cd7\n'
p769
tp770
sS'xvprintf'
p771
(S'\n__stdcall xvprintf(char * format, __va_list_tag * args)\n'
p772
V\u000aint xvprintf(char *format,__va_list_tag *args)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  \u000a  iVar3 = __vfprintf_chk(stdout,1,format,args);\u000a  if (iVar3 < 0) {\u000a    iVar4 = ferror(stdout);\u000a    iVar2 = exit_failure;\u000a    if (iVar4 == 0) {\u000a      puVar5 = (uint *)__errno_location();\u000a      uVar1 = *puVar5;\u000a      uVar6 = dcgettext(0,"cannot perform formatted output",5);\u000a      error((ulong)(uint)iVar2,(ulong)uVar1,uVar6,uVar6);\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p773
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RAX,RSI\nMOV RCX,RDI\nMOV RDI,qword ptr [0x00609268]\nMOV ESI,0x1\nMOV RDX,RCX\nMOV RCX,RAX\nCALL 0x004012f0\nMOV EBX,EAX\nTEST EBX,EBX\nJNS 0x00404e58\nMOV RDI,qword ptr [0x00609268]\nCALL 0x00401380\nTEST EAX,EAX\nJNZ 0x00404e58\nMOV R14D,dword ptr [0x00609200]\nCALL 0x00401320\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x406d80\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nXOR EAX,EAX\nMOV EDI,R14D\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00401590\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p774
S'55\n41 56\n53\n48 89 f0\n48 89 f9\n48 8b 3d 67 44 20 00\nbe 01 00 00 00\n48 89 ca\n48 89 c1\ne8 df c4 ff ff\n89 c3\n85 db\n79 41\n48 8b 3d 4a 44 20 00\ne8 5d c5 ff ff\n85 c0\n75 31\n44 8b 35 d2 43 20 00\ne8 ed c4 ff ff\n8b 28\n31 ff\nbe 80 6d 40 00\nba 05 00 00 00\ne8 8a c5 ff ff\n48 89 c1\n31 c0\n44 89 f7\n89 ee\n48 89 ca\ne8 38 c7 ff ff\n89 d8\n5b\n41 5e\n5d\nc3\n'
p775
S'.text:0000000000404df0\n.text:0000000000404df1\n.text:0000000000404df3\n.text:0000000000404df4\n.text:0000000000404df7\n.text:0000000000404dfa\n.text:0000000000404e01\n.text:0000000000404e06\n.text:0000000000404e09\n.text:0000000000404e0c\n.text:0000000000404e11\n.text:0000000000404e13\n.text:0000000000404e15\n.text:0000000000404e17\n.text:0000000000404e1e\n.text:0000000000404e23\n.text:0000000000404e25\n.text:0000000000404e27\n.text:0000000000404e2e\n.text:0000000000404e33\n.text:0000000000404e35\n.text:0000000000404e37\n.text:0000000000404e3c\n.text:0000000000404e41\n.text:0000000000404e46\n.text:0000000000404e49\n.text:0000000000404e4b\n.text:0000000000404e4e\n.text:0000000000404e50\n.text:0000000000404e53\n.text:0000000000404e58\n.text:0000000000404e5a\n.text:0000000000404e5b\n.text:0000000000404e5d\n.text:0000000000404e5e\n'
p776
tp777
sS'_exit'
p778
(S'\n__stdcall _exit(int __status)\n'
p779
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00609058)();\u000a  return;\u000a}\u000a\u000a
p780
S'JMP qword ptr [0x00609058]\n'
p781
S'ff 25 12 7d 20 00\n'
p782
S'.plt:0000000000401340\n'
p783
tp784
sS'__errno_location'
p785
(S'\n__stdcall __errno_location()\n'
p786
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00609048)();\u000a  return piVar1;\u000a}\u000a\u000a
p787
S'JMP qword ptr [0x00609048]\n'
p788
S'ff 25 22 7d 20 00\n'
p789
S'.plt:0000000000401320\n'
p790
tp791
sS'x2nrealloc'
p792
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p793
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p794
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00404c2c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404c59\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00404c4a\nTEST RCX,RCX\nJNZ 0x00404c4a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00404bd0\nPUSH RAX\nCALL 0x00404d20\n'
p795
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p796
S'.text:0000000000404c00\n.text:0000000000404c03\n.text:0000000000404c06\n.text:0000000000404c09\n.text:0000000000404c0b\n.text:0000000000404c15\n.text:0000000000404c17\n.text:0000000000404c1a\n.text:0000000000404c1d\n.text:0000000000404c1f\n.text:0000000000404c22\n.text:0000000000404c25\n.text:0000000000404c2a\n.text:0000000000404c2c\n.text:0000000000404c2f\n.text:0000000000404c31\n.text:0000000000404c36\n.text:0000000000404c38\n.text:0000000000404c3b\n.text:0000000000404c3d\n.text:0000000000404c44\n.text:0000000000404c47\n.text:0000000000404c4a\n.text:0000000000404c4d\n.text:0000000000404c51\n.text:0000000000404c54\n.text:0000000000404c59\n.text:0000000000404c5a\n'
p797
tp798
sS'xrealloc'
p799
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p800
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p801
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00404be7\nTEST RBX,RBX\nJNZ 0x00404be7\nCALL 0x004012d0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401550\nTEST RBX,RBX\nJZ 0x00404bf9\nTEST RAX,RAX\nJZ 0x00404bfb\nPOP RBX\nRET\nCALL 0x00404d20\n'
p802
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 ed c6 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 61 c9 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p803
S'.text:0000000000404bd0\n.text:0000000000404bd1\n.text:0000000000404bd4\n.text:0000000000404bd7\n.text:0000000000404bd9\n.text:0000000000404bdc\n.text:0000000000404bde\n.text:0000000000404be3\n.text:0000000000404be5\n.text:0000000000404be6\n.text:0000000000404be7\n.text:0000000000404bea\n.text:0000000000404bef\n.text:0000000000404bf2\n.text:0000000000404bf4\n.text:0000000000404bf7\n.text:0000000000404bf9\n.text:0000000000404bfa\n.text:0000000000404bfb\n'
p804
tp805
sS'quotearg_n_options'
p806
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p807
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p808
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401320\nTEST R12D,R12D\nJS 0x00403bc1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x00609208]\nCMP dword ptr [0x00609210],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00403adb\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x609218\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00404bd0\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x00609208],R15\nJNZ 0x00403aa2\nMOVUPS XMM0,xmmword ptr [0x00609218]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x00609210]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401440\nMOV dword ptr [0x00609210],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00402c30\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00403b3d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00403bab\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x6092f0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00403b68\nCALL 0x004012d0\nMOV RDI,R15\nCALL 0x00404c60\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00402c30\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401310\n'
p809
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 f1 d8 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 be 57 20 00\n44 39 25 bf 57 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 18 92 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 48 11 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 73 57 20 00\n75 0b\n0f 10 05 7a 57 20 00\n41 0f 11 07\n8b 05 68 57 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 7d d9 ff ff\n89 1d 47 57 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 f0 92 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 68 d7 ff ff\n4c 89 ff\ne8 f0 10 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 4a d7 ff ff\n'
p810
S'.text:0000000000403a10\n.text:0000000000403a11\n.text:0000000000403a13\n.text:0000000000403a15\n.text:0000000000403a17\n.text:0000000000403a19\n.text:0000000000403a1a\n.text:0000000000403a1e\n.text:0000000000403a21\n.text:0000000000403a24\n.text:0000000000403a27\n.text:0000000000403a2a\n.text:0000000000403a2f\n.text:0000000000403a32\n.text:0000000000403a38\n.text:0000000000403a3d\n.text:0000000000403a3f\n.text:0000000000403a43\n.text:0000000000403a4a\n.text:0000000000403a51\n.text:0000000000403a56\n.text:0000000000403a5b\n.text:0000000000403a60\n.text:0000000000403a62\n.text:0000000000403a67\n.text:0000000000403a6a\n.text:0000000000403a6d\n.text:0000000000403a73\n.text:0000000000403a75\n.text:0000000000403a78\n.text:0000000000403a7c\n.text:0000000000403a7f\n.text:0000000000403a83\n.text:0000000000403a88\n.text:0000000000403a8b\n.text:0000000000403a8e\n.text:0000000000403a95\n.text:0000000000403a97\n.text:0000000000403a9e\n.text:0000000000403aa2\n.text:0000000000403aa8\n.text:0000000000403aab\n.text:0000000000403aaf\n.text:0000000000403ab2\n.text:0000000000403ab5\n.text:0000000000403ab9\n.text:0000000000403abb\n.text:0000000000403abe\n.text:0000000000403ac3\n.text:0000000000403ac9\n.text:0000000000403acc\n.text:0000000000403ad1\n.text:0000000000403ad6\n.text:0000000000403adb\n.text:0000000000403ade\n.text:0000000000403ae2\n.text:0000000000403ae6\n.text:0000000000403aeb\n.text:0000000000403aef\n.text:0000000000403af3\n.text:0000000000403af7\n.text:0000000000403afb\n.text:0000000000403aff\n.text:0000000000403b04\n.text:0000000000403b07\n.text:0000000000403b0a\n.text:0000000000403b0d\n.text:0000000000403b12\n.text:0000000000403b15\n.text:0000000000403b18\n.text:0000000000403b1b\n.text:0000000000403b1c\n.text:0000000000403b21\n.text:0000000000403b25\n.text:0000000000403b28\n.text:0000000000403b2b\n.text:0000000000403b2d\n.text:0000000000403b32\n.text:0000000000403b36\n.text:0000000000403b3b\n.text:0000000000403b3d\n.text:0000000000403b41\n.text:0000000000403b46\n.text:0000000000403b49\n.text:0000000000403b4c\n.text:0000000000403b51\n.text:0000000000403b56\n.text:0000000000403b59\n.text:0000000000403b5e\n.text:0000000000403b61\n.text:0000000000403b63\n.text:0000000000403b68\n.text:0000000000403b6b\n.text:0000000000403b70\n.text:0000000000403b73\n.text:0000000000403b76\n.text:0000000000403b7b\n.text:0000000000403b7e\n.text:0000000000403b82\n.text:0000000000403b85\n.text:0000000000403b88\n.text:0000000000403b8d\n.text:0000000000403b92\n.text:0000000000403b97\n.text:0000000000403b9a\n.text:0000000000403b9d\n.text:0000000000403b9e\n.text:0000000000403ba3\n.text:0000000000403ba7\n.text:0000000000403bab\n.text:0000000000403baf\n.text:0000000000403bb2\n.text:0000000000403bb6\n.text:0000000000403bb7\n.text:0000000000403bb9\n.text:0000000000403bbb\n.text:0000000000403bbd\n.text:0000000000403bbf\n.text:0000000000403bc0\n.text:0000000000403bc1\n'
p811
tp812
sS'strcmp'
p813
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p814
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00609118)();\u000a  return iVar1;\u000a}\u000a\u000a
p815
S'JMP qword ptr [0x00609118]\n'
p816
S'ff 25 52 7c 20 00\n'
p817
S'.plt:00000000004014c0\n'
p818
tp819
sS'set_custom_quoting'
p820
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p821
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p822
S'TEST RDI,RDI\nMOV EAX,0x6092b0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00402ba5\nTEST RDX,RDX\nJZ 0x00402ba5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401310\n'
p823
S'48 85 ff\nb8 b0 92 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 65 e7 ff ff\n'
p824
S'.text:0000000000402b80\n.text:0000000000402b83\n.text:0000000000402b88\n.text:0000000000402b8c\n.text:0000000000402b92\n.text:0000000000402b95\n.text:0000000000402b97\n.text:0000000000402b9a\n.text:0000000000402b9c\n.text:0000000000402ba0\n.text:0000000000402ba4\n.text:0000000000402ba5\n.text:0000000000402ba6\n'
p825
tp826
sS'c_isalpha'
p827
(S'\n__stdcall c_isalpha()\n'
p828
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p829
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00404ffb\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p830
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p831
S'.text:0000000000404fe0\n.text:0000000000404fe3\n.text:0000000000404fe6\n.text:0000000000404fe8\n.text:0000000000404ff2\n.text:0000000000404ff4\n.text:0000000000404ff7\n.text:0000000000404ffa\n.text:0000000000404ffb\n.text:0000000000404ffd\n'
p832
tp833
sS'quotearg_custom_mem'
p834
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p835
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p836
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00403e20\n'
p837
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p838
S'.text:0000000000403eb0\n.text:0000000000403eb3\n.text:0000000000403eb6\n.text:0000000000403eb9\n.text:0000000000403ebc\n.text:0000000000403ebe\n.text:0000000000403ec1\n'
p839
tp840
sS'close_stdout'
p841
(S'\n__stdcall close_stdout()\n'
p842
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402977;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x406298,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402977:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p843
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x00609268]\nCALL 0x00405100\nTEST EAX,EAX\nJZ 0x00402977\nCMP byte ptr [0x006092a0],0x0\nJZ 0x0040298c\nCALL 0x00401320\nCMP dword ptr [RAX],0x20\nJNZ 0x0040298c\nMOV RDI,qword ptr [0x00609280]\nCALL 0x00405100\nTEST EAX,EAX\nJNZ 0x004029d1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x4063c7\nMOV EDX,0x5\nCALL 0x004013d0\nMOV R14,RAX\nMOV RBX,qword ptr [0x00609298]\nCALL 0x00401320\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x004029dc\nXOR EDI,EDI\nMOV EDX,0x406298\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401590\nMOV EDI,dword ptr [0x00609200]\nCALL 0x00401340\nMOV EDI,dword ptr [0x00609200]\nCALL 0x00401340\nMOV RDI,RBX\nCALL 0x00403da0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x4063d3\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401590\nMOV EDI,dword ptr [0x00609200]\nCALL 0x00401340\n'
p844
S'55\n41 56\n53\n48 8b 3d 0d 69 20 00\ne8 a0 27 00 00\n85 c0\n74 13\n80 3d 35 69 20 00 00\n74 1f\ne8 ae e9 ff ff\n83 38 20\n75 15\n48 8b 3d 02 69 20 00\ne8 7d 27 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe c7 63 40 00\nba 05 00 00 00\ne8 33 ea ff ff\n49 89 c6\n48 8b 1d f1 68 20 00\ne8 74 e9 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 98 62 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 ca eb ff ff\n8b 3d 34 68 20 00\ne8 6f e9 ff ff\n8b 3d 29 68 20 00\ne8 64 e9 ff ff\n48 89 df\ne8 bc 13 00 00\n48 89 c1\n31 ff\nba d3 63 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 96 eb ff ff\n8b 3d 00 68 20 00\ne8 3b e9 ff ff\n'
p845
S'.text:0000000000402950\n.text:0000000000402951\n.text:0000000000402953\n.text:0000000000402954\n.text:000000000040295b\n.text:0000000000402960\n.text:0000000000402962\n.text:0000000000402964\n.text:000000000040296b\n.text:000000000040296d\n.text:0000000000402972\n.text:0000000000402975\n.text:0000000000402977\n.text:000000000040297e\n.text:0000000000402983\n.text:0000000000402985\n.text:0000000000402987\n.text:0000000000402988\n.text:000000000040298a\n.text:000000000040298b\n.text:000000000040298c\n.text:000000000040298e\n.text:0000000000402993\n.text:0000000000402998\n.text:000000000040299d\n.text:00000000004029a0\n.text:00000000004029a7\n.text:00000000004029ac\n.text:00000000004029af\n.text:00000000004029b1\n.text:00000000004029b3\n.text:00000000004029b5\n.text:00000000004029ba\n.text:00000000004029bc\n.text:00000000004029be\n.text:00000000004029c1\n.text:00000000004029c6\n.text:00000000004029cc\n.text:00000000004029d1\n.text:00000000004029d7\n.text:00000000004029dc\n.text:00000000004029df\n.text:00000000004029e4\n.text:00000000004029e7\n.text:00000000004029e9\n.text:00000000004029ee\n.text:00000000004029f0\n.text:00000000004029f2\n.text:00000000004029f5\n.text:00000000004029fa\n.text:0000000000402a00\n'
p846
tp847
sS'version_etc_ar'
p848
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p849
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p850
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x004049e0\nJMP 0x00404670\n'
p851
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p852
S'.text:00000000004049d0\n.text:00000000004049d7\n.text:00000000004049e0\n.text:00000000004049e6\n.text:00000000004049ea\n.text:00000000004049ec\n'
p853
tp854
sS'strtoumax'
p855
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_00609198)();\u000a  return uVar1;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x00609198]\n'
p858
S'ff 25 d2 7b 20 00\n'
p859
S'.plt:00000000004015c0\n'
p860
tp861
sS'c_locale'
p862
(S'\n__stdcall c_locale()\n'
p863
V\u000alocale_t c_locale(void)\u000a\u000a{\u000a  if (c_locale_cache == (locale_t)0x0) {\u000a    c_locale_cache = (locale_t)newlocale(0x1fbf,"C",(__locale_t)0x0);\u000a  }\u000a  return c_locale_cache;\u000a}\u000a\u000a
p864
S'CMP qword ptr [0x00609290],0x0\nJNZ 0x00402927\nPUSH RAX\nMOV EDI,0x1fbf\nMOV ESI,0x4063c5\nXOR EDX,EDX\nCALL 0x00401410\nMOV qword ptr [0x00609290],RAX\nADD RSP,0x8\nMOV RAX,qword ptr [0x00609290]\nRET\n'
p865
S'48 83 3d 88 69 20 00 00\n75 1d\n50\nbf bf 1f 00 00\nbe c5 63 40 00\n31 d2\ne8 f4 ea ff ff\n48 89 05 6d 69 20 00\n48 83 c4 08\n48 8b 05 62 69 20 00\nc3\n'
p866
S'.text:0000000000402900\n.text:0000000000402908\n.text:000000000040290a\n.text:000000000040290b\n.text:0000000000402910\n.text:0000000000402915\n.text:0000000000402917\n.text:000000000040291c\n.text:0000000000402923\n.text:0000000000402927\n.text:000000000040292e\n'
p867
tp868
sS'rpl_calloc'
p869
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p870
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00609110)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p871
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00404f9b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00404fa0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00404fa0\nPUSH RAX\nCALL 0x00401320\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004014b0\n'
p872
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 8f c3 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 05 c5 ff ff\n'
p873
S'.text:0000000000404f60\n.text:0000000000404f63\n.text:0000000000404f68\n.text:0000000000404f6a\n.text:0000000000404f6d\n.text:0000000000404f72\n.text:0000000000404f74\n.text:0000000000404f77\n.text:0000000000404f7b\n.text:0000000000404f7d\n.text:0000000000404f80\n.text:0000000000404f83\n.text:0000000000404f86\n.text:0000000000404f89\n.text:0000000000404f8b\n.text:0000000000404f8c\n.text:0000000000404f91\n.text:0000000000404f97\n.text:0000000000404f99\n.text:0000000000404f9a\n.text:0000000000404f9b\n.text:0000000000404fa0\n.text:0000000000404fa3\n.text:0000000000404fa6\n'
p874
tp875
sS'memset'
p876
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p877
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006090d8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p878
S'JMP qword ptr [0x006090d8]\n'
p879
S'ff 25 92 7c 20 00\n'
p880
S'.plt:0000000000401440\n'
p881
tp882
sS'c_isxdigit'
p883
(S'\n__stdcall c_isxdigit()\n'
p884
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p885
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x004050db\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p886
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p887
S'.text:00000000004050c0\n.text:00000000004050c3\n.text:00000000004050c6\n.text:00000000004050c8\n.text:00000000004050d2\n.text:00000000004050d4\n.text:00000000004050d7\n.text:00000000004050da\n.text:00000000004050db\n.text:00000000004050dd\n'
p888
tp889
sS'ferror'
p890
(S'\n__stdcall ferror(FILE * __stream)\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_00609078)();\u000a  return iVar1;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x00609078]\n'
p893
S'ff 25 f2 7c 20 00\n'
p894
S'.plt:0000000000401380\n'
p895
tp896
sS'xvfprintf'
p897
(S'\n__stdcall xvfprintf(FILE * stream, char * format, __va_list_tag * args)\n'
p898
V\u000aint xvfprintf(FILE *stream,char *format,__va_list_tag *args)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  \u000a  iVar3 = __vfprintf_chk(stream,1,format,args);\u000a  if (iVar3 < 0) {\u000a    iVar4 = ferror((FILE *)stream);\u000a    iVar2 = exit_failure;\u000a    if (iVar4 == 0) {\u000a      puVar5 = (uint *)__errno_location();\u000a      uVar1 = *puVar5;\u000a      uVar6 = dcgettext(0,"cannot perform formatted output",5);\u000a      error((ulong)(uint)iVar2,(ulong)uVar1,uVar6,uVar6);\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p899
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RAX,RDX\nMOV RCX,RSI\nMOV RBX,RDI\nMOV ESI,0x1\nMOV RDX,RCX\nMOV RCX,RAX\nCALL 0x004012f0\nMOV EBP,EAX\nTEST EBP,EBP\nJNS 0x00404f50\nMOV RDI,RBX\nCALL 0x00401380\nTEST EAX,EAX\nJNZ 0x00404f50\nMOV R14D,dword ptr [0x00609200]\nCALL 0x00401320\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x406d80\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nXOR EAX,EAX\nMOV EDI,R14D\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401590\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p900
S'55\n41 56\n53\n48 89 d0\n48 89 f1\n48 89 fb\nbe 01 00 00 00\n48 89 ca\n48 89 c1\ne8 e3 c3 ff ff\n89 c5\n85 ed\n79 3d\n48 89 df\ne8 65 c4 ff ff\n85 c0\n75 31\n44 8b 35 da 42 20 00\ne8 f5 c3 ff ff\n8b 18\n31 ff\nbe 80 6d 40 00\nba 05 00 00 00\ne8 92 c4 ff ff\n48 89 c1\n31 c0\n44 89 f7\n89 de\n48 89 ca\ne8 40 c6 ff ff\n89 e8\n5b\n41 5e\n5d\nc3\n'
p901
S'.text:0000000000404ef0\n.text:0000000000404ef1\n.text:0000000000404ef3\n.text:0000000000404ef4\n.text:0000000000404ef7\n.text:0000000000404efa\n.text:0000000000404efd\n.text:0000000000404f02\n.text:0000000000404f05\n.text:0000000000404f08\n.text:0000000000404f0d\n.text:0000000000404f0f\n.text:0000000000404f11\n.text:0000000000404f13\n.text:0000000000404f16\n.text:0000000000404f1b\n.text:0000000000404f1d\n.text:0000000000404f1f\n.text:0000000000404f26\n.text:0000000000404f2b\n.text:0000000000404f2d\n.text:0000000000404f2f\n.text:0000000000404f34\n.text:0000000000404f39\n.text:0000000000404f3e\n.text:0000000000404f41\n.text:0000000000404f43\n.text:0000000000404f46\n.text:0000000000404f48\n.text:0000000000404f4b\n.text:0000000000404f50\n.text:0000000000404f52\n.text:0000000000404f53\n.text:0000000000404f55\n.text:0000000000404f56\n'
p902
tp903
sS'__libc_csu_fini'
p904
(S'\n__stdcall __libc_csu_fini()\n'
p905
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p906
S'RET\n'
p907
S'f3 c3\n'
p908
S'.text:0000000000405650\n'
p909
tp910
sS'getc_unlocked'
p911
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p912
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00609080)();\u000a  return iVar1;\u000a}\u000a\u000a
p913
S'JMP qword ptr [0x00609080]\n'
p914
S'ff 25 ea 7c 20 00\n'
p915
S'.plt:0000000000401390\n'
p916
tp917
sS'abort'
p918
(S'\n__stdcall abort()\n'
p919
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00609040)();\u000a  return;\u000a}\u000a\u000a
p920
S'JMP qword ptr [0x00609040]\n'
p921
S'ff 25 2a 7d 20 00\n'
p922
S'.plt:0000000000401310\n'
p923
tp924
sS'c_isascii'
p925
(S'\n__stdcall c_isascii()\n'
p926
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p927
S'CMP EDI,0x80\nSETC AL\nRET\n'
p928
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p929
S'.text:0000000000405000\n.text:0000000000405006\n.text:0000000000405009\n'
p930
tp931
sS'version_etc'
p932
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p933
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p934
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404aa2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00404a00\nADD RSP,0xd8\nRET\n'
p935
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p936
S'.text:0000000000404a60\n.text:0000000000404a67\n.text:0000000000404a69\n.text:0000000000404a6b\n.text:0000000000404a70\n.text:0000000000404a75\n.text:0000000000404a7a\n.text:0000000000404a82\n.text:0000000000404a8a\n.text:0000000000404a92\n.text:0000000000404a9a\n.text:0000000000404aa2\n.text:0000000000404aa7\n.text:0000000000404aac\n.text:0000000000404ab1\n.text:0000000000404ab6\n.text:0000000000404abe\n.text:0000000000404ac3\n.text:0000000000404acb\n.text:0000000000404ad2\n.text:0000000000404ad5\n.text:0000000000404ada\n.text:0000000000404ae1\n'
p937
tp938
sS'__ctype_b_loc'
p939
(S'\n__stdcall __ctype_b_loc()\n'
p940
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_006091d8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p941
S'JMP qword ptr [0x006091d8]\n'
p942
S'ff 25 92 7b 20 00\n'
p943
S'.plt:0000000000401640\n'
p944
tp945
sS'lseek'
p946
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p947
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006090d0)();\u000a  return _Var1;\u000a}\u000a\u000a
p948
S'JMP qword ptr [0x006090d0]\n'
p949
S'ff 25 9a 7c 20 00\n'
p950
S'.plt:0000000000401430\n'
p951
tp952
sS'quotearg'
p953
(S'\n__stdcall quotearg(char * arg)\n'
p954
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p955
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403a00\n'
p956
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p957
S'.text:0000000000403be0\n.text:0000000000403be3\n.text:0000000000403be5\n.text:0000000000403be8\n'
p958
tp959
sS'_start'
p960
(S'\n__stdcall _start()\n'
p961
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00608ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p962
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405650\nMOV RCX,0x4055e0\nMOV RDI,0x401a30\nCALL qword ptr [0x00608ff0]\nHLT\n'
p963
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 50 56 40 00\n48 c7 c1 e0 55 40 00\n48 c7 c7 30 1a 40 00\nff 15 66 79 20 00\nf4\n'
p964
S'.text:0000000000401660\n.text:0000000000401662\n.text:0000000000401665\n.text:0000000000401666\n.text:0000000000401669\n.text:000000000040166d\n.text:000000000040166e\n.text:000000000040166f\n.text:0000000000401676\n.text:000000000040167d\n.text:0000000000401684\n.text:000000000040168a\n'
p965
tp966
sS'c_iscntrl'
p967
(S'\n__stdcall c_iscntrl()\n'
p968
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p969
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00405028\nRET\nCMP EDI,0x7f\nJZ 0x00405027\nXOR EAX,EAX\nRET\n'
p970
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p971
S'.text:0000000000405020\n.text:0000000000405022\n.text:0000000000405025\n.text:0000000000405027\n.text:0000000000405028\n.text:000000000040502b\n.text:000000000040502d\n.text:000000000040502f\n'
p972
tp973
sS'c_isblank'
p974
(S'\n__stdcall c_isblank()\n'
p975
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p976
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p977
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p978
S'.text:0000000000405010\n.text:0000000000405013\n.text:0000000000405016\n.text:0000000000405019\n.text:000000000040501c\n.text:000000000040501e\n'
p979
tp980
sS'quotearg_n_mem'
p981
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p982
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p983
S'MOV ECX,0x6092b0\nJMP 0x00403a10\n'
p984
S'b9 b0 92 60 00\ne9 36 fe ff ff\n'
p985
S'.text:0000000000403bd0\n.text:0000000000403bd5\n'
p986
tp987
sS'atexit'
p988
(S'\n__stdcall atexit(__func * __func)\n'
p989
V\u000a/* WARNING: Removing unreachable block (ram,0x00405680) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_006091a0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p990
S'MOV RAX,0x6091f0\nTEST RAX,RAX\nJZ 0x00405680\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x004015d0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x004015d0\n'
p991
S'48 c7 c0 f0 91 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 5a bf ff ff\n31 d2\n31 f6\ne9 47 bf ff ff\n'
p992
S'.text:0000000000405660\n.text:0000000000405667\n.text:000000000040566a\n.text:000000000040566c\n.text:000000000040566f\n.text:0000000000405671\n.text:0000000000405680\n.text:0000000000405682\n.text:0000000000405684\n'
p993
tp994
sS'__printf_chk'
p995
(S'\n__stdcall __printf_chk()\n'
p996
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_00609178)();\u000a  return;\u000a}\u000a\u000a
p997
S'JMP qword ptr [0x00609178]\n'
p998
S'ff 25 f2 7b 20 00\n'
p999
S'.plt:0000000000401580\n'
p1000
tp1001
sS'fdopen'
p1002
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1003
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_00609168)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x00609168]\n'
p1005
S'ff 25 02 7c 20 00\n'
p1006
S'.plt:0000000000401560\n'
p1007
tp1008
sS'error'
p1009
(S'\n__stdcall error()\n'
p1010
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_00609180)();\u000a  return;\u000a}\u000a\u000a
p1011
S'JMP qword ptr [0x00609180]\n'
p1012
S'ff 25 ea 7b 20 00\n'
p1013
S'.plt:0000000000401590\n'
p1014
tp1015
sS'strcaseeq6'
p1016
(S'\n__stdcall strcaseeq6()\n'
p1017
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1018
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004050b0\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x004042a2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004042a9\nJMP 0x004042be\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004042be\nTEST BPL,BPL\nJZ 0x004042b9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004042d0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1019
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 21 0e 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1020
S'.text:0000000000404280\n.text:0000000000404281\n.text:0000000000404282\n.text:0000000000404283\n.text:0000000000404285\n.text:0000000000404288\n.text:000000000040428a\n.text:000000000040428f\n.text:0000000000404293\n.text:0000000000404295\n.text:0000000000404297\n.text:000000000040429a\n.text:000000000040429c\n.text:000000000040429e\n.text:00000000004042a0\n.text:00000000004042a2\n.text:00000000004042a4\n.text:00000000004042a7\n.text:00000000004042a9\n.text:00000000004042ac\n.text:00000000004042ae\n.text:00000000004042b1\n.text:00000000004042b5\n.text:00000000004042b6\n.text:00000000004042b7\n.text:00000000004042b9\n.text:00000000004042be\n.text:00000000004042c2\n.text:00000000004042c3\n.text:00000000004042c4\n'
p1021
tp1022
sS'strcaseeq5'
p1023
(S'\n__stdcall strcaseeq5()\n'
p1024
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1025
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004050b0\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404256\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040425d\nJMP 0x00404274\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404274\nTEST BPL,BPL\nJZ 0x0040426f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404280\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1026
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 6d 0e 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1027
S'.text:0000000000404230\n.text:0000000000404231\n.text:0000000000404233\n.text:0000000000404234\n.text:0000000000404237\n.text:0000000000404239\n.text:000000000040423c\n.text:000000000040423e\n.text:0000000000404243\n.text:0000000000404247\n.text:0000000000404249\n.text:000000000040424b\n.text:000000000040424e\n.text:0000000000404250\n.text:0000000000404252\n.text:0000000000404254\n.text:0000000000404256\n.text:0000000000404258\n.text:000000000040425b\n.text:000000000040425d\n.text:0000000000404260\n.text:0000000000404262\n.text:0000000000404266\n.text:0000000000404269\n.text:000000000040426a\n.text:000000000040426c\n.text:000000000040426d\n.text:000000000040426f\n.text:0000000000404274\n.text:0000000000404275\n.text:0000000000404277\n.text:0000000000404278\n'
p1028
tp1029
sS'emit_ancillary_info'
p1030
(S'\n__stdcall emit_ancillary_info()\n'
p1031
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00405a70;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("printf",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "printf";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,"printf",uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/","printf");\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x406b41;\u000a  if (__s2 == "printf") {\u000a    uVar3 = 0x406167;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p1032
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x405a70\nMOV ESI,0x40614b\nNOP\nMOV EDI,0x40607e\nCALL 0x004014c0\nTEST EAX,EAX\nJZ 0x0040192b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401910\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x40607e\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x4061aa\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x4060be\nMOV ECX,0x4061c1\nXOR EAX,EAX\nCALL 0x00401580\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401570\nTEST RAX,RAX\nJZ 0x004019b4\nMOV ESI,0x4061e8\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401330\nTEST EAX,EAX\nJZ 0x004019b4\nXOR EDI,EDI\nMOV ESI,0x4061ec\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40607e\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401580\nXOR EDI,EDI\nMOV ESI,0x406231\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RSI,RAX\nMOV R14D,0x40607e\nMOV EDI,0x1\nMOV EDX,0x4061c1\nMOV ECX,0x40607e\nXOR EAX,EAX\nCALL 0x00401580\nXOR EDI,EDI\nMOV ESI,0x406250\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x406167\nMOV ECX,0x406b41\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401580\n'
p1033
S'41 56\n53\n50\nbb 70 5a 40 00\nbe 4b 61 40 00\n66 90\nbf 7e 60 40 00\ne8 a6 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 7e 60 40 00\n48 0f 45 d8\n31 ff\nbe aa 61 40 00\nba 05 00 00 00\ne8 84 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba be 60 40 00\nb9 c1 61 40 00\n31 c0\ne8 1b fc ff ff\nbf 05 00 00 00\n31 f6\ne8 ff fb ff ff\n48 85 c0\n74 3e\nbe e8 61 40 00\nba 03 00 00 00\n48 89 c7\ne8 a8 f9 ff ff\n85 c0\n74 28\n31 ff\nbe ec 61 40 00\nba 05 00 00 00\ne8 33 fa ff ff\n48 89 c1\nbf 01 00 00 00\nba 7e 60 40 00\n31 c0\n48 89 ce\ne8 cc fb ff ff\n31 ff\nbe 31 62 40 00\nba 05 00 00 00\ne8 0b fa ff ff\n48 89 c6\n41 be 7e 60 40 00\nbf 01 00 00 00\nba c1 61 40 00\nb9 7e 60 40 00\n31 c0\ne8 9c fb ff ff\n31 ff\nbe 50 62 40 00\nba 05 00 00 00\ne8 db f9 ff ff\n48 89 c2\n4c 39 f3\nb8 67 61 40 00\nb9 41 6b 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 5e fb ff ff\n'
p1034
S'.text:0000000000401900\n.text:0000000000401902\n.text:0000000000401903\n.text:0000000000401904\n.text:0000000000401909\n.text:000000000040190e\n.text:0000000000401910\n.text:0000000000401915\n.text:000000000040191a\n.text:000000000040191c\n.text:000000000040191e\n.text:0000000000401922\n.text:0000000000401926\n.text:0000000000401929\n.text:000000000040192b\n.text:000000000040192f\n.text:0000000000401932\n.text:0000000000401937\n.text:000000000040193b\n.text:000000000040193d\n.text:0000000000401942\n.text:0000000000401947\n.text:000000000040194c\n.text:000000000040194f\n.text:0000000000401954\n.text:0000000000401959\n.text:000000000040195e\n.text:0000000000401960\n.text:0000000000401965\n.text:000000000040196a\n.text:000000000040196c\n.text:0000000000401971\n.text:0000000000401974\n.text:0000000000401976\n.text:000000000040197b\n.text:0000000000401980\n.text:0000000000401983\n.text:0000000000401988\n.text:000000000040198a\n.text:000000000040198c\n.text:000000000040198e\n.text:0000000000401993\n.text:0000000000401998\n.text:000000000040199d\n.text:00000000004019a0\n.text:00000000004019a5\n.text:00000000004019aa\n.text:00000000004019ac\n.text:00000000004019af\n.text:00000000004019b4\n.text:00000000004019b6\n.text:00000000004019bb\n.text:00000000004019c0\n.text:00000000004019c5\n.text:00000000004019c8\n.text:00000000004019ce\n.text:00000000004019d3\n.text:00000000004019d8\n.text:00000000004019dd\n.text:00000000004019df\n.text:00000000004019e4\n.text:00000000004019e6\n.text:00000000004019eb\n.text:00000000004019f0\n.text:00000000004019f5\n.text:00000000004019f8\n.text:00000000004019fb\n.text:0000000000401a00\n.text:0000000000401a05\n.text:0000000000401a09\n.text:0000000000401a0e\n.text:0000000000401a10\n.text:0000000000401a13\n.text:0000000000401a16\n.text:0000000000401a1a\n.text:0000000000401a1b\n.text:0000000000401a1d\n'
p1035
tp1036
sS'strcaseeq7'
p1037
(S'\n__stdcall strcaseeq7()\n'
p1038
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1039
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x004050b0\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x004042f2\nTEST ECX,0xffffffdf\nJNZ 0x004042f6\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x004042fa\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1040
S'53\n48 89 fb\n31 ff\ne8 d5 0d 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1041
S'.text:00000000004042d0\n.text:00000000004042d1\n.text:00000000004042d4\n.text:00000000004042d6\n.text:00000000004042db\n.text:00000000004042df\n.text:00000000004042e1\n.text:00000000004042e3\n.text:00000000004042e9\n.text:00000000004042eb\n.text:00000000004042f0\n.text:00000000004042f1\n.text:00000000004042f2\n.text:00000000004042f4\n.text:00000000004042f6\n.text:00000000004042f8\n.text:00000000004042f9\n.text:00000000004042fa\n.text:00000000004042ff\n.text:0000000000404300\n'
p1042
tp1043
sS'print_esc_string'
p1044
(S'\n__stdcall print_esc_string(char * str)\n'
p1045
V\u000avoid print_esc_string(char *str)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  \u000a  while( true ) {\u000a    while( true ) {\u000a      cVar1 = *str;\u000a      if ((int)cVar1 != 0x5c) break;\u000a      iVar2 = print_esc(str);\u000a      str = str + (long)iVar2 + 1;\u000a    }\u000a    if (cVar1 == 0) break;\u000a    putchar_unlocked((int)cVar1);\u000a    str = str + 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1046
S'PUSH RBX\nMOV RBX,RDI\nJMP 0x004020b8\nMOV ESI,0x1\nMOV RDI,RBX\nCALL 0x004023f0\nCDQE\nADD RAX,RBX\nINC RAX\nMOV RBX,RAX\nMOVSX EDI,byte ptr [RBX]\nCMP EDI,0x5c\nJZ 0x004020a0\nTEST DIL,DIL\nJZ 0x004020cf\nCALL 0x004014e0\nINC RBX\nJMP 0x004020b8\nPOP RBX\nRET\n'
p1047
S'53\n48 89 fb\neb 22\nbe 01 00 00 00\n48 89 df\ne8 43 03 00 00\n48 98\n48 01 d8\n48 ff c0\n48 89 c3\n0f be 3b\n83 ff 5c\n74 e0\n40 84 ff\n74 0a\ne8 16 f4 ff ff\n48 ff c3\neb e9\n5b\nc3\n'
p1048
S'.text:0000000000402090\n.text:0000000000402091\n.text:0000000000402094\n.text:00000000004020a0\n.text:00000000004020a5\n.text:00000000004020a8\n.text:00000000004020ad\n.text:00000000004020af\n.text:00000000004020b2\n.text:00000000004020b5\n.text:00000000004020b8\n.text:00000000004020bb\n.text:00000000004020be\n.text:00000000004020c0\n.text:00000000004020c3\n.text:00000000004020c5\n.text:00000000004020ca\n.text:00000000004020cd\n.text:00000000004020cf\n.text:00000000004020d0\n'
p1049
tp1050
sS'version_etc_va'
p1051
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p1052
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p1053
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00404a30\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00404a3c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404a51\nINC R9\nCMP R9,0xa\nJC 0x00404a10\nMOV R8,RSP\nCALL 0x00404670\nADD RSP,0x58\nRET\n'
p1054
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p1055
S'.text:0000000000404a00\n.text:0000000000404a04\n.text:0000000000404a07\n.text:0000000000404a10\n.text:0000000000404a13\n.text:0000000000404a17\n.text:0000000000404a19\n.text:0000000000404a1c\n.text:0000000000404a20\n.text:0000000000404a24\n.text:0000000000404a27\n.text:0000000000404a30\n.text:0000000000404a34\n.text:0000000000404a38\n.text:0000000000404a3c\n.text:0000000000404a3f\n.text:0000000000404a43\n.text:0000000000404a46\n.text:0000000000404a48\n.text:0000000000404a4b\n.text:0000000000404a4f\n.text:0000000000404a51\n.text:0000000000404a54\n.text:0000000000404a59\n.text:0000000000404a5d\n'
p1056
tp1057
sS'xzalloc'
p1058
(S'\n__stdcall xzalloc(size_t s)\n'
p1059
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p1060
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00404b90\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401440\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1061
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 a4 c7 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1062
S'.text:0000000000404c80\n.text:0000000000404c82\n.text:0000000000404c83\n.text:0000000000404c84\n.text:0000000000404c87\n.text:0000000000404c8c\n.text:0000000000404c8f\n.text:0000000000404c91\n.text:0000000000404c94\n.text:0000000000404c97\n.text:0000000000404c9c\n.text:0000000000404c9f\n.text:0000000000404ca3\n.text:0000000000404ca4\n.text:0000000000404ca6\n'
p1063
tp1064
sS'print_unicode_char'
p1065
(S'\n__stdcall print_unicode_char(FILE * stream)\n'
p1066
V\u000avoid print_unicode_char(FILE *stream)\u000a\u000a{\u000a  int in_EDX;\u000a  code *callback_arg;\u000a  uint in_ESI;\u000a  \u000a  callback_arg = fallback_failure_callback;\u000a  if (in_EDX != 0) {\u000a    callback_arg = exit_failure_callback;\u000a  }\u000a  unicode_to_mb((long (*)(char *,size_t,void *))(ulong)in_ESI,fwrite_success_callback,callback_arg);\u000a  return;\u000a}\u000a\u000a
p1067
S'MOV EAX,ESI\nMOV RCX,RDI\nTEST EDX,EDX\nMOV ESI,0x4044f0\nMOV EDX,0x404570\nCMOVNZ RDX,RSI\nMOV ESI,0x4044a0\nMOV EDI,EAX\nJMP 0x00404310\n'
p1068
S'89 f0\n48 89 f9\n85 d2\nbe f0 44 40 00\nba 70 45 40 00\n48 0f 45 d6\nbe a0 44 40 00\n89 c7\ne9 2f fe ff ff\n'
p1069
S'.text:00000000004044c0\n.text:00000000004044c2\n.text:00000000004044c5\n.text:00000000004044c7\n.text:00000000004044cc\n.text:00000000004044d1\n.text:00000000004044d5\n.text:00000000004044da\n.text:00000000004044dc\n'
p1070
tp1071
sS'strcaseeq0'
p1072
(S'\n__stdcall strcaseeq0()\n'
p1073
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1074
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004050b0\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404005\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040400c\nJMP 0x00404040\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404040\nTEST BPL,BPL\nJZ 0x0040403b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404050\nJMP 0x00404040\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1075
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 bd 10 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1076
S'.text:0000000000403fd0\n.text:0000000000403fd1\n.text:0000000000403fd3\n.text:0000000000403fd5\n.text:0000000000403fd7\n.text:0000000000403fd9\n.text:0000000000403fda\n.text:0000000000403fdb\n.text:0000000000403fde\n.text:0000000000403fe1\n.text:0000000000403fe4\n.text:0000000000403fe7\n.text:0000000000403fe9\n.text:0000000000403fec\n.text:0000000000403fee\n.text:0000000000403ff3\n.text:0000000000403ff6\n.text:0000000000403ff8\n.text:0000000000403ffa\n.text:0000000000403ffd\n.text:0000000000403fff\n.text:0000000000404001\n.text:0000000000404003\n.text:0000000000404005\n.text:0000000000404007\n.text:000000000040400a\n.text:000000000040400c\n.text:000000000040400f\n.text:0000000000404011\n.text:0000000000404015\n.text:000000000040401a\n.text:000000000040401d\n.text:0000000000404021\n.text:0000000000404025\n.text:0000000000404029\n.text:000000000040402d\n.text:0000000000404031\n.text:0000000000404034\n.text:0000000000404039\n.text:000000000040403b\n.text:0000000000404040\n.text:0000000000404044\n.text:0000000000404045\n.text:0000000000404047\n.text:0000000000404049\n.text:000000000040404b\n.text:000000000040404d\n.text:000000000040404e\n'
p1077
tp1078
sS'iconv_open'
p1079
(S'\n__stdcall iconv_open(char * __tocode, char * __fromcode)\n'
p1080
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aiconv_t iconv_open(char *__tocode,char *__fromcode)\u000a\u000a{\u000a  iconv_t pvVar1;\u000a  \u000a  pvVar1 = (iconv_t)(*(code *)PTR_iconv_open_006091e0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1081
S'JMP qword ptr [0x006091e0]\n'
p1082
S'ff 25 8a 7b 20 00\n'
p1083
S'.plt:0000000000401650\n'
p1084
tp1085
sS'strcaseeq2'
p1086
(S'\n__stdcall strcaseeq2()\n'
p1087
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1088
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004050b0\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404116\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040411d\nJMP 0x0040414a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040414a\nTEST BPL,BPL\nJZ 0x00404145\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404160\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1089
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 ad 0f 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1090
S'.text:00000000004040e0\n.text:00000000004040e1\n.text:00000000004040e3\n.text:00000000004040e5\n.text:00000000004040e7\n.text:00000000004040e9\n.text:00000000004040ea\n.text:00000000004040eb\n.text:00000000004040ee\n.text:00000000004040f1\n.text:00000000004040f4\n.text:00000000004040f7\n.text:00000000004040f9\n.text:00000000004040fc\n.text:00000000004040fe\n.text:0000000000404103\n.text:0000000000404107\n.text:0000000000404109\n.text:000000000040410b\n.text:000000000040410e\n.text:0000000000404110\n.text:0000000000404112\n.text:0000000000404114\n.text:0000000000404116\n.text:0000000000404118\n.text:000000000040411b\n.text:000000000040411d\n.text:0000000000404120\n.text:0000000000404122\n.text:0000000000404126\n.text:000000000040412a\n.text:000000000040412e\n.text:0000000000404132\n.text:0000000000404135\n.text:0000000000404139\n.text:000000000040413a\n.text:000000000040413c\n.text:000000000040413e\n.text:0000000000404140\n.text:0000000000404142\n.text:0000000000404143\n.text:0000000000404145\n.text:000000000040414a\n.text:000000000040414e\n.text:000000000040414f\n.text:0000000000404151\n.text:0000000000404153\n.text:0000000000404155\n.text:0000000000404157\n.text:0000000000404158\n'
p1091
tp1092
sS'strcaseeq1'
p1093
(S'\n__stdcall strcaseeq1()\n'
p1094
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1095
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x004050b0\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040408d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404094\nJMP 0x004040c7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004040c7\nTEST BPL,BPL\nJZ 0x004040c2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004040e0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1096
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 36 10 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1097
S'.text:0000000000404050\n.text:0000000000404051\n.text:0000000000404053\n.text:0000000000404055\n.text:0000000000404057\n.text:0000000000404059\n.text:000000000040405a\n.text:000000000040405b\n.text:0000000000404060\n.text:0000000000404063\n.text:0000000000404066\n.text:0000000000404069\n.text:000000000040406b\n.text:000000000040406e\n.text:0000000000404073\n.text:0000000000404075\n.text:000000000040407a\n.text:000000000040407e\n.text:0000000000404080\n.text:0000000000404082\n.text:0000000000404085\n.text:0000000000404087\n.text:0000000000404089\n.text:000000000040408b\n.text:000000000040408d\n.text:000000000040408f\n.text:0000000000404092\n.text:0000000000404094\n.text:0000000000404097\n.text:0000000000404099\n.text:000000000040409d\n.text:00000000004040a1\n.text:00000000004040a5\n.text:00000000004040ab\n.text:00000000004040af\n.text:00000000004040b2\n.text:00000000004040b6\n.text:00000000004040b7\n.text:00000000004040b9\n.text:00000000004040bb\n.text:00000000004040bd\n.text:00000000004040bf\n.text:00000000004040c0\n.text:00000000004040c2\n.text:00000000004040c7\n.text:00000000004040cb\n.text:00000000004040cc\n.text:00000000004040ce\n.text:00000000004040d0\n.text:00000000004040d2\n.text:00000000004040d4\n.text:00000000004040d5\n'
p1098
tp1099
sS'__vfprintf_chk'
p1100
(S'\n__stdcall __vfprintf_chk()\n'
p1101
V\u000avoid __vfprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___vfprintf_chk_00609030)();\u000a  return;\u000a}\u000a\u000a
p1102
S'JMP qword ptr [0x00609030]\n'
p1103
S'ff 25 3a 7d 20 00\n'
p1104
S'.plt:00000000004012f0\n'
p1105
tp1106
sS'strcaseeq4'
p1107
(S'\n__stdcall strcaseeq4()\n'
p1108
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1109
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004050b0\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x004041fc\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404203\nJMP 0x00404224\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404224\nTEST BPL,BPL\nJZ 0x0040421f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404230\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1110
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 c7 0e 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1111
S'.text:00000000004041d0\n.text:00000000004041d1\n.text:00000000004041d3\n.text:00000000004041d5\n.text:00000000004041d6\n.text:00000000004041d7\n.text:00000000004041da\n.text:00000000004041dd\n.text:00000000004041df\n.text:00000000004041e2\n.text:00000000004041e4\n.text:00000000004041e9\n.text:00000000004041ed\n.text:00000000004041ef\n.text:00000000004041f1\n.text:00000000004041f4\n.text:00000000004041f6\n.text:00000000004041f8\n.text:00000000004041fa\n.text:00000000004041fc\n.text:00000000004041fe\n.text:0000000000404201\n.text:0000000000404203\n.text:0000000000404206\n.text:0000000000404208\n.text:000000000040420c\n.text:0000000000404210\n.text:0000000000404213\n.text:0000000000404217\n.text:0000000000404218\n.text:000000000040421a\n.text:000000000040421c\n.text:000000000040421d\n.text:000000000040421f\n.text:0000000000404224\n.text:0000000000404228\n.text:0000000000404229\n.text:000000000040422b\n.text:000000000040422d\n.text:000000000040422e\n'
p1112
tp1113
sS'strcaseeq3'
p1114
(S'\n__stdcall strcaseeq3()\n'
p1115
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1116
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004050b0\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404190\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404197\nJMP 0x004041ba\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004041ba\nTEST BPL,BPL\nJZ 0x004041b5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004041d0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1117
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 33 0f 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1118
S'.text:0000000000404160\n.text:0000000000404161\n.text:0000000000404163\n.text:0000000000404165\n.text:0000000000404167\n.text:0000000000404168\n.text:000000000040416b\n.text:000000000040416e\n.text:0000000000404171\n.text:0000000000404173\n.text:0000000000404176\n.text:0000000000404178\n.text:000000000040417d\n.text:0000000000404181\n.text:0000000000404183\n.text:0000000000404185\n.text:0000000000404188\n.text:000000000040418a\n.text:000000000040418c\n.text:000000000040418e\n.text:0000000000404190\n.text:0000000000404192\n.text:0000000000404195\n.text:0000000000404197\n.text:000000000040419a\n.text:000000000040419c\n.text:00000000004041a0\n.text:00000000004041a4\n.text:00000000004041a8\n.text:00000000004041ab\n.text:00000000004041ac\n.text:00000000004041ae\n.text:00000000004041b0\n.text:00000000004041b2\n.text:00000000004041b3\n.text:00000000004041b5\n.text:00000000004041ba\n.text:00000000004041bb\n.text:00000000004041bd\n.text:00000000004041bf\n.text:00000000004041c1\n.text:00000000004041c2\n'
p1119
tp1120
sS'register_tm_clones'
p1121
(S'\n__stdcall register_tm_clones()\n'
p1122
V\u000a/* WARNING: Removing unreachable block (ram,0x004016f3) */\u000a/* WARNING: Removing unreachable block (ram,0x004016fd) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1123
S'MOV ESI,0x609260\nPUSH RBP\nSUB RSI,0x609260\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401708\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401708\nPOP RBP\nMOV EDI,0x609260\nJMP RAX\nPOP RBP\nRET\n'
p1124
S'be 60 92 60 00\n55\n48 81 ee 60 92 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 60 92 60 00\nff e0\n5d\nc3\n'
p1125
S'.text:00000000004016d0\n.text:00000000004016d5\n.text:00000000004016d6\n.text:00000000004016dd\n.text:00000000004016e1\n.text:00000000004016e4\n.text:00000000004016e7\n.text:00000000004016eb\n.text:00000000004016ee\n.text:00000000004016f1\n.text:00000000004016f3\n.text:00000000004016f8\n.text:00000000004016fb\n.text:00000000004016fd\n.text:00000000004016fe\n.text:0000000000401703\n.text:0000000000401708\n.text:0000000000401709\n'
p1126
tp1127
sS'gettext_quote'
p1128
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1129
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00406962;\u000a        pcVar2 = &DAT_00406966;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1130
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004013d0\nCMP RAX,RBX\nJNZ 0x00403fc8\nCALL 0x00405170\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00403fd0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403f78\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406952\nMOV EAX,0x406956\nJMP 0x00403fc4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00403fd0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403fb6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406962\nMOV EAX,0x406966\nJMP 0x00403fc4\nCMP R14D,0x9\nMOV ECX,0x406946\nMOV EAX,0x40694a\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1131
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 a7 d4 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 39 12 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 52 69 40 00\nb8 56 69 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 62 69 40 00\nb8 66 69 40 00\neb 0e\n41 83 fe 09\nb9 46 69 40 00\nb8 4a 69 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1132
S'.text:0000000000403f10\n.text:0000000000403f11\n.text:0000000000403f13\n.text:0000000000403f14\n.text:0000000000403f17\n.text:0000000000403f1a\n.text:0000000000403f1c\n.text:0000000000403f21\n.text:0000000000403f24\n.text:0000000000403f29\n.text:0000000000403f2c\n.text:0000000000403f32\n.text:0000000000403f37\n.text:0000000000403f3a\n.text:0000000000403f3f\n.text:0000000000403f44\n.text:0000000000403f49\n.text:0000000000403f4f\n.text:0000000000403f55\n.text:0000000000403f58\n.text:0000000000403f5a\n.text:0000000000403f5c\n.text:0000000000403f61\n.text:0000000000403f65\n.text:0000000000403f67\n.text:0000000000403f69\n.text:0000000000403f6c\n.text:0000000000403f71\n.text:0000000000403f76\n.text:0000000000403f78\n.text:0000000000403f7d\n.text:0000000000403f82\n.text:0000000000403f87\n.text:0000000000403f8d\n.text:0000000000403f93\n.text:0000000000403f96\n.text:0000000000403f98\n.text:0000000000403f9a\n.text:0000000000403f9f\n.text:0000000000403fa3\n.text:0000000000403fa5\n.text:0000000000403fa7\n.text:0000000000403faa\n.text:0000000000403faf\n.text:0000000000403fb4\n.text:0000000000403fb6\n.text:0000000000403fba\n.text:0000000000403fbf\n.text:0000000000403fc4\n.text:0000000000403fc8\n.text:0000000000403fc9\n.text:0000000000403fcb\n.text:0000000000403fcc\n'
p1133
tp1134
sS'c_islower'
p1135
(S'\n__stdcall c_islower()\n'
p1136
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1137
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1138
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1139
S'.text:0000000000405050\n.text:0000000000405053\n.text:0000000000405056\n.text:0000000000405059\n'
p1140
tp1141
sS'fclose'
p1142
(S'\n__stdcall fclose(FILE * __stream)\n'
p1143
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00609090)();\u000a  return iVar1;\u000a}\u000a\u000a
p1144
S'JMP qword ptr [0x00609090]\n'
p1145
S'ff 25 da 7c 20 00\n'
p1146
S'.plt:00000000004013b0\n'
p1147
tp1148
sS'__ctype_get_mb_cur_max'
p1149
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1150
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_006090a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1151
S'JMP qword ptr [0x006090a8]\n'
p1152
S'ff 25 c2 7c 20 00\n'
p1153
S'.plt:00000000004013e0\n'
p1154
tp1155
sS'quotearg_n_style'
p1156
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1157
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1158
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00403c40\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00403a10\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1159
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1160
S'.text:0000000000403c00\n.text:0000000000403c01\n.text:0000000000403c03\n.text:0000000000403c04\n.text:0000000000403c08\n.text:0000000000403c0b\n.text:0000000000403c0d\n.text:0000000000403c12\n.text:0000000000403c15\n.text:0000000000403c1a\n.text:0000000000403c21\n.text:0000000000403c23\n.text:0000000000403c26\n.text:0000000000403c29\n.text:0000000000403c2e\n.text:0000000000403c32\n.text:0000000000403c33\n.text:0000000000403c35\n.text:0000000000403c36\n'
p1161
tp1162
sS'fwrite'
p1163
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1164
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_006091b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1165
S'JMP qword ptr [0x006091b0]\n'
p1166
S'ff 25 ba 7b 20 00\n'
p1167
S'.plt:00000000004015f0\n'
p1168
tp1169
sS'c_strtold'
p1170
(S'\n__stdcall c_strtold(char * nptr, char * * endptr)\n'
p1171
V\u000alongdouble c_strtold(char *nptr,char **endptr)\u000a\u000a{\u000a  locale_t p_Var1;\u000a  undefined auVar2 [16];\u000a  undefined extraout_XMM0 [16];\u000a  \u000a  p_Var1 = c_locale();\u000a  if (p_Var1 != (locale_t)0x0) {\u000a    auVar2 = (*(code *)PTR_strtold_l_006091c0)(nptr,endptr,p_Var1);\u000a    return (longdouble)auVar2;\u000a  }\u000a  if (endptr != (char **)0x0) {\u000a    *endptr = nptr;\u000a  }\u000a  return (longdouble)extraout_XMM0;\u000a}\u000a\u000a
p1172
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x00402900\nTEST RAX,RAX\nJZ 0x004028e9\nMOV RDI,R14\nMOV RSI,RBX\nMOV RDX,RAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401610\nTEST RBX,RBX\nJZ 0x004028f1\nMOV qword ptr [RBX],R14\nFLDZ\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1173
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 31 00 00 00\n48 85 c0\n74 15\n4c 89 f7\n48 89 de\n48 89 c2\n48 83 c4 08\n5b\n41 5e\ne9 27 ed ff ff\n48 85 db\n74 03\n4c 89 33\nd9 ee\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1174
S'.text:00000000004028c0\n.text:00000000004028c2\n.text:00000000004028c3\n.text:00000000004028c4\n.text:00000000004028c7\n.text:00000000004028ca\n.text:00000000004028cf\n.text:00000000004028d2\n.text:00000000004028d4\n.text:00000000004028d7\n.text:00000000004028da\n.text:00000000004028dd\n.text:00000000004028e1\n.text:00000000004028e2\n.text:00000000004028e4\n.text:00000000004028e9\n.text:00000000004028ec\n.text:00000000004028ee\n.text:00000000004028f1\n.text:00000000004028f3\n.text:00000000004028f7\n.text:00000000004028f8\n.text:00000000004028fa\n'
p1175
tp1176
sS'iconv'
p1177
(S'\n__stdcall iconv(iconv_t __cd, char * * __inbuf, size_t * __inbytesleft, char * * __outbuf, size_t * __outbytesleft)\n'
p1178
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t iconv(iconv_t __cd,char **__inbuf,size_t *__inbytesleft,char **__outbuf,\u000a            size_t *__outbytesleft)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_iconv_00609070)();\u000a  return sVar1;\u000a}\u000a\u000a
p1179
S'JMP qword ptr [0x00609070]\n'
p1180
S'ff 25 fa 7c 20 00\n'
p1181
S'.plt:0000000000401370\n'
p1182
tp1183
sS'vstrtoumax'
p1184
(S'\n__stdcall vstrtoumax(char * s)\n'
p1185
V\u000auintmax_t vstrtoumax(char *s)\u000a\u000a{\u000a  char *in_RAX;\u000a  undefined8 uVar1;\u000a  int *piVar2;\u000a  uintmax_t uVar3;\u000a  char *local_18;\u000a  \u000a  if (((*s == '\u005c'') || (*s == '\u005c"')) && (uVar3 = (uintmax_t)(byte)s[1], s[1] != 0)) {\u000a    if ((s[2] != 0) && (posixly_correct == false)) {\u000a      uVar1 = dcgettext(0,"warning: %s: character(s) following character constant have been ignored"\u000a                        ,5);\u000a      error(0,0,uVar1,s + 2);\u000a    }\u000a  }\u000a  else {\u000a    local_18 = in_RAX;\u000a    piVar2 = __errno_location();\u000a    *piVar2 = 0;\u000a    uVar3 = strtoumax(s,&local_18,0);\u000a    verify_numeric(s,local_18);\u000a  }\u000a  return uVar3;\u000a}\u000a\u000a
p1186
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV AL,byte ptr [RBX]\nCMP AL,0x27\nJZ 0x00402721\nCMP AL,0x22\nJNZ 0x00402766\nMOVZX R14D,byte ptr [RBX + 0x1]\nTEST R14,R14\nJZ 0x00402766\nCMP byte ptr [RBX + 0x2],0x0\nJZ 0x0040278d\nMOV AL,byte ptr [0x0060928d]\nTEST AL,AL\nJNZ 0x0040278d\nADD RBX,0x2\nXOR EDI,EDI\nMOV ESI,0x4062d8\nMOV EDX,0x5\nCALL 0x004013d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00401590\nJMP 0x0040278d\nCALL 0x00401320\nMOV dword ptr [RAX],0x0\nMOV RSI,RSP\nXOR EDX,EDX\nMOV RDI,RBX\nCALL 0x004015c0\nMOV R14,RAX\nMOV RSI,qword ptr [RSP]\nMOV RDI,RBX\nCALL 0x00402690\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1187
S'41 56\n53\n50\n48 89 fb\n8a 03\n3c 27\n74 04\n3c 22\n75 45\n44 0f b6 73 01\n4d 85 f6\n74 3b\n80 7b 02 00\n74 5c\n8a 05 56 6b 20 00\n84 c0\n75 52\n48 83 c3 02\n31 ff\nbe d8 62 40 00\nba 05 00 00 00\ne8 80 ec ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\n48 89 d9\ne8 2c ee ff ff\neb 27\ne8 b5 eb ff ff\nc7 00 00 00 00 00\n48 89 e6\n31 d2\n48 89 df\ne8 42 ee ff ff\n49 89 c6\n48 8b 34 24\n48 89 df\ne8 03 ff ff ff\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1188
S'.text:0000000000402710\n.text:0000000000402712\n.text:0000000000402713\n.text:0000000000402714\n.text:0000000000402717\n.text:0000000000402719\n.text:000000000040271b\n.text:000000000040271d\n.text:000000000040271f\n.text:0000000000402721\n.text:0000000000402726\n.text:0000000000402729\n.text:000000000040272b\n.text:000000000040272f\n.text:0000000000402731\n.text:0000000000402737\n.text:0000000000402739\n.text:000000000040273b\n.text:000000000040273f\n.text:0000000000402741\n.text:0000000000402746\n.text:000000000040274b\n.text:0000000000402750\n.text:0000000000402753\n.text:0000000000402755\n.text:0000000000402757\n.text:0000000000402759\n.text:000000000040275c\n.text:000000000040275f\n.text:0000000000402764\n.text:0000000000402766\n.text:000000000040276b\n.text:0000000000402771\n.text:0000000000402774\n.text:0000000000402776\n.text:0000000000402779\n.text:000000000040277e\n.text:0000000000402781\n.text:0000000000402785\n.text:0000000000402788\n.text:000000000040278d\n.text:0000000000402790\n.text:0000000000402794\n.text:0000000000402795\n.text:0000000000402797\n'
p1189
tp1190
sS'quote_n'
p1191
(S'\n__stdcall quote_n(char * arg)\n'
p1192
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1193
S'MOV RDX,-0x1\nJMP 0x00403ed0\n'
p1194
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1195
S'.text:0000000000403ef0\n.text:0000000000403ef7\n'
p1196
tp1197
sS'quotearg_alloc'
p1198
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1199
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1200
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00403880\n'
p1201
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1202
S'.text:0000000000403870\n.text:0000000000403873\n.text:0000000000403875\n.text:0000000000403878\n'
p1203
tp1204
sS'__do_global_dtors_aux'
p1205
(S'\n__stdcall __do_global_dtors_aux()\n'
p1206
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1207
S'CMP byte ptr [0x00609288],0x0\nJNZ 0x0040172a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401690\nPOP RBP\nMOV byte ptr [0x00609288],0x1\nRET\n'
p1208
S'80 3d 71 7b 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 5e 7b 20 00 01\nf3 c3\n'
p1209
S'.text:0000000000401710\n.text:0000000000401717\n.text:0000000000401719\n.text:000000000040171a\n.text:000000000040171d\n.text:0000000000401722\n.text:0000000000401723\n.text:000000000040172a\n'
p1210
tp1211
sS'close_stdout_set_file_name'
p1212
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1213
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1214
S'MOV qword ptr [0x00609298],RDI\nRET\n'
p1215
S'48 89 3d 61 69 20 00\nc3\n'
p1216
S'.text:0000000000402930\n.text:0000000000402937\n'
p1217
tp1218
sS'c_isprint'
p1219
(S'\n__stdcall c_isprint()\n'
p1220
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1221
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1222
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1223
S'.text:0000000000405060\n.text:0000000000405063\n.text:0000000000405066\n.text:0000000000405069\n'
p1224
tp1225
sS'_fini'
p1226
(S'\n__stdcall _fini()\n'
p1227
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1228
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1229
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1230
S'.fini:000000000040568c\n.fini:0000000000405690\n.fini:0000000000405694\n'
p1231
tp1232
sS'print_esc_char'
p1233
(S'\n__stdcall print_esc_char()\n'
p1234
V\u000avoid print_esc_char(int iParm1)\u000a\u000a{\u000a  switch(iParm1) {\u000a  case 0x61:\u000a    putchar_unlocked(7);\u000a    return;\u000a  case 0x62:\u000a    putchar_unlocked(8);\u000a    return;\u000a  case 99:\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  default:\u000a    putchar_unlocked(iParm1);\u000a    return;\u000a  case 0x65:\u000a    putchar_unlocked(0x1b);\u000a    return;\u000a  case 0x66:\u000a    putchar_unlocked(0xc);\u000a    return;\u000a  case 0x6e:\u000a    putchar_unlocked(10);\u000a    return;\u000a  case 0x72:\u000a    putchar_unlocked(0xd);\u000a    return;\u000a  case 0x74:\u000a    putchar_unlocked(9);\u000a    return;\u000a  case 0x76:\u000a    putchar_unlocked(0xb);\u000a    return;\u000a  }\u000a}\u000a\u000a
p1235
S'LEA EAX,[RDI + -0x61]\nCMP EAX,0x15\nJA 0x00402873\nJMP qword ptr [0x4059c0 + RAX*0x8]\nMOV EDI,0x7\nJMP 0x004014e0\nMOV EDI,0x8\nJMP 0x004014e0\nJMP 0x004014e0\nMOV EDI,0x1b\nJMP 0x004014e0\nMOV EDI,0xc\nJMP 0x004014e0\nMOV EDI,0xa\nJMP 0x004014e0\nMOV EDI,0xd\nJMP 0x004014e0\nMOV EDI,0x9\nJMP 0x004014e0\nMOV EDI,0xb\nJMP 0x004014e0\nPUSH RAX\nXOR EDI,EDI\nCALL 0x004015e0\n'
p1236
S'8d 47 9f\n83 f8 15\n77 1b\nff 24 c5 c0 59 40 00\nbf 07 00 00 00\ne9 77 ec ff ff\nbf 08 00 00 00\ne9 6d ec ff ff\ne9 68 ec ff ff\nbf 1b 00 00 00\ne9 5e ec ff ff\nbf 0c 00 00 00\ne9 54 ec ff ff\nbf 0a 00 00 00\ne9 4a ec ff ff\nbf 0d 00 00 00\ne9 40 ec ff ff\nbf 09 00 00 00\ne9 36 ec ff ff\nbf 0b 00 00 00\ne9 2c ec ff ff\n50\n31 ff\ne8 24 ed ff ff\n'
p1237
S'.text:0000000000402850\n.text:0000000000402853\n.text:0000000000402856\n.text:0000000000402858\n.text:000000000040285f\n.text:0000000000402864\n.text:0000000000402869\n.text:000000000040286e\n.text:0000000000402873\n.text:0000000000402878\n.text:000000000040287d\n.text:0000000000402882\n.text:0000000000402887\n.text:000000000040288c\n.text:0000000000402891\n.text:0000000000402896\n.text:000000000040289b\n.text:00000000004028a0\n.text:00000000004028a5\n.text:00000000004028aa\n.text:00000000004028af\n.text:00000000004028b4\n.text:00000000004028b5\n.text:00000000004028b7\n'
p1238
tp1239
sS'__fpending'
p1240
(S'\n__stdcall __fpending()\n'
p1241
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00609068)();\u000a  return;\u000a}\u000a\u000a
p1242
S'JMP qword ptr [0x00609068]\n'
p1243
S'ff 25 02 7d 20 00\n'
p1244
S'.plt:0000000000401360\n'
p1245
tp1246
s.