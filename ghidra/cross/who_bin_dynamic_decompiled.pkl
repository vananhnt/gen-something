(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x608e08]\nPUSH RBP\nLEA RBP,[0x608e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401530\nTEST RBP,RBP\nJZ 0x004059b6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x004059a0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 96 34 20 00\n55\n48 8d 2d 96 34 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 9f bb ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000405960\n.text:0000000000405962\n.text:0000000000405964\n.text:0000000000405967\n.text:0000000000405969\n.text:000000000040596b\n.text:0000000000405972\n.text:0000000000405973\n.text:000000000040597a\n.text:000000000040597b\n.text:000000000040597e\n.text:0000000000405981\n.text:0000000000405984\n.text:0000000000405988\n.text:000000000040598c\n.text:0000000000405991\n.text:0000000000405994\n.text:0000000000405996\n.text:0000000000405998\n.text:00000000004059a0\n.text:00000000004059a3\n.text:00000000004059a6\n.text:00000000004059a9\n.text:00000000004059ad\n.text:00000000004059b1\n.text:00000000004059b4\n.text:00000000004059b6\n.text:00000000004059ba\n.text:00000000004059bb\n.text:00000000004059bc\n.text:00000000004059be\n.text:00000000004059c0\n.text:00000000004059c2\n.text:00000000004059c4\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00609180)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x00609180]\n'
p11
S'ff 25 4a 79 20 00\n'
p12
S'.plt:0000000000401830\n'
p13
tp14
sS'c_isdigit'
p15
(S'\n__stdcall c_isdigit()\n'
p16
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p17
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p18
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p19
S'.text:0000000000402fa0\n.text:0000000000402fa3\n.text:0000000000402fa6\n.text:0000000000402fa9\n'
p20
tp21
sS'print_line'
p22
(S'\n__stdcall print_line(char * user, char * line, char * time_str, char * idle, char * pid, char * exitstr)\n'
p23
V\u000avoid print_line(char *user,char *line,char *time_str,char *idle,char *pid,char *exitstr)\u000a\u000a{\u000a  char *pcVar1;\u000a  char mesg [3];\u000a  int iVar2;\u000a  size_t sVar3;\u000a  undefined *__ptr;\u000a  char *pcVar4;\u000a  size_t n;\u000a  undefined8 uVar5;\u000a  char *__s;\u000a  char *__s_00;\u000a  char x_idle [8];\u000a  char x_pid [13];\u000a  char *local_58;\u000a  uint local_4c;\u000a  undefined local_45 [8];\u000a  undefined local_3d [13];\u000a  \u000a  local_4c = (uint)user;\u000a  mesg[1] = (char)time_str;\u000a  if (((include_idle == 1) && (short_output == 0)) && (sVar3 = strlen(__s), sVar3 < 7)) {\u000a    __sprintf_chk(local_45,1,8," %-6s",__s);\u000a  }\u000a  else {\u000a    local_45[0] = 0;\u000a  }\u000a  if ((short_output == 0) && (sVar3 = strlen(__s_00), sVar3 < 0xc)) {\u000a    __sprintf_chk(local_3d,1,0xd," %10s",__s_00);\u000a  }\u000a  else {\u000a    local_3d[0] = 0;\u000a  }\u000a  if (include_exit == 1) {\u000a    sVar3 = strlen(x_pid._5_8_);\u000a    n = 0xe;\u000a    if (0xb < sVar3) {\u000a      n = sVar3 + 2;\u000a    }\u000a  }\u000a  else {\u000a    n = 1;\u000a  }\u000a  __ptr = (undefined *)xmalloc(n);\u000a  if (include_exit == 1) {\u000a    __sprintf_chk(__ptr,1,0xffffffffffffffff," %-12s",x_pid._5_8_);\u000a  }\u000a  else {\u000a    *__ptr = 0;\u000a  }\u000a  pcVar4 = "   .";\u000a  if (line != (char *)0x0) {\u000a    pcVar4 = line;\u000a  }\u000a  uVar5 = 0x4072c9;\u000a  if (include_mesg != 0) {\u000a    uVar5 = 0x609248;\u000a  }\u000a  iVar2 = __asprintf_chk(&local_58,1,"%-8.*s%s %-12.*s %-*s%s%s %-8s%s",(ulong)local_4c,pcVar4,uVar5\u000a                         ,(ulong)idle & 0xffffffff,pid,(ulong)(uint)time_format_width,exitstr,\u000a                         local_45,local_3d,stack0x00000018,__ptr);\u000a  pcVar4 = local_58;\u000a  if (iVar2 == -1) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  sVar3 = strlen(local_58);\u000a  pcVar4 = pcVar4 + sVar3 + 1;\u000a  do {\u000a    pcVar1 = pcVar4 + -2;\u000a    pcVar4 = pcVar4 + -1;\u000a  } while (*pcVar1 == ' ');\u000a  *pcVar4 = 0;\u000a  puts(local_58);\u000a  free(local_58);\u000a  free(__ptr);\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,R9\nMOV R15,R8\nMOV R12D,ECX\nMOV RBX,RSI\nMOV dword ptr [RSP + 0xc],EDI\nMOV byte ptr [0x00609249],DL\nCMP byte ptr [0x006092f8],0x1\nJNZ 0x00402bda\nMOV AL,byte ptr [0x006092fd]\nTEST AL,AL\nJNZ 0x00402bda\nMOV R14,qword ptr [RSP + 0x60]\nMOV RDI,R14\nCALL 0x00401690\nCMP RAX,0x6\nJA 0x00402bda\nLEA RDI,[RSP + 0x13]\nMOV ESI,0x1\nMOV EDX,0x8\nMOV ECX,0x406830\nXOR EAX,EAX\nMOV R8,R14\nCALL 0x00401990\nJMP 0x00402bdf\nMOV byte ptr [RSP + 0x13],0x0\nMOV AL,byte ptr [0x006092fd]\nTEST AL,AL\nJNZ 0x00402c1c\nMOV R14,qword ptr [RSP + 0x68]\nMOV RDI,R14\nCALL 0x00401690\nCMP RAX,0xb\nJA 0x00402c1c\nLEA RDI,[RSP + 0x1b]\nMOV ESI,0x1\nMOV EDX,0xd\nMOV ECX,0x406836\nXOR EAX,EAX\nMOV R8,R14\nCALL 0x00401990\nJMP 0x00402c21\nMOV byte ptr [RSP + 0x1b],0x0\nMOV R14,qword ptr [RSP + 0x78]\nCMP byte ptr [0x006092f9],0x1\nJNZ 0x00402c4a\nMOV RDI,R14\nCALL 0x00401690\nCMP RAX,0xc\nLEA RAX,[RAX + 0x2]\nMOV EDI,0xe\nCMOVNC RDI,RAX\nJMP 0x00402c4f\nMOV EDI,0x1\nCALL 0x00405110\nMOV RBP,RAX\nCMP byte ptr [0x006092f9],0x1\nJNZ 0x00402c80\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x40683c\nXOR EAX,EAX\nMOV RDI,RBP\nMOV R8,R14\nCALL 0x00401990\nJMP 0x00402c84\nMOV byte ptr [RBP],0x0\nTEST RBX,RBX\nMOV R8D,0x406864\nCMOVNZ R8,RBX\nMOV AL,byte ptr [0x006092f7]\nMOV ECX,0x609248\nMOV R9D,0x4072c9\nTEST AL,AL\nCMOVNZ R9,RCX\nMOV EBX,dword ptr [0x00609308]\nLEA R10,[RSP + 0x1b]\nLEA R11,[RSP + 0x13]\nMOV RDI,RSP\nMOV ESI,0x1\nMOV EDX,0x406843\nMOV EAX,0x0\nMOV ECX,dword ptr [RSP + 0xc]\nPUSH RBP\nPUSH qword ptr [RSP + 0x78]\nPUSH R10\nPUSH R11\nPUSH R13\nPUSH RBX\nPUSH R15\nPUSH R12\nCALL 0x00401760\nADD RSP,0x40\nCMP EAX,-0x1\nJZ 0x00402d36\nMOV RBX,qword ptr [RSP]\nMOV RDI,RBX\nCALL 0x00401690\nLEA RAX,[RBX + RAX*0x1 + 0x1]\nNOP dword ptr [RAX]\nCMP byte ptr [RAX + -0x2],0x20\nLEA RAX,[RAX + -0x1]\nJZ 0x00402d00\nMOV byte ptr [RAX],0x0\nMOV RDI,qword ptr [RSP]\nCALL 0x00401610\nMOV RDI,qword ptr [RSP]\nCALL 0x00401580\nMOV RDI,RBP\nCALL 0x00401580\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004052a0\n'
p25
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n4d 89 cd\n4d 89 c7\n41 89 cc\n48 89 f3\n89 7c 24 0c\n88 15 b5 66 20 00\n80 3d 5d 67 20 00 01\n75 3d\n8a 05 5a 67 20 00\n84 c0\n75 33\n4c 8b 74 24 60\n4c 89 f7\ne8 dc ea ff ff\n48 83 f8 06\n77 20\n48 8d 7c 24 13\nbe 01 00 00 00\nba 08 00 00 00\nb9 30 68 40 00\n31 c0\n4d 89 f0\ne8 b8 ed ff ff\neb 05\nc6 44 24 13 00\n8a 05 18 67 20 00\n84 c0\n75 33\n4c 8b 74 24 68\n4c 89 f7\ne8 9a ea ff ff\n48 83 f8 0b\n77 20\n48 8d 7c 24 1b\nbe 01 00 00 00\nba 0d 00 00 00\nb9 36 68 40 00\n31 c0\n4d 89 f0\ne8 76 ed ff ff\neb 05\nc6 44 24 1b 00\n4c 8b 74 24 78\n80 3d cc 66 20 00 01\n75 1b\n4c 89 f7\ne8 59 ea ff ff\n48 83 f8 0c\n48 8d 40 02\nbf 0e 00 00 00\n48 0f 43 f8\neb 05\nbf 01 00 00 00\ne8 bc 24 00 00\n48 89 c5\n80 3d 9b 66 20 00 01\n75 20\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 3c 68 40 00\n31 c0\n48 89 ef\n4d 89 f0\ne8 12 ed ff ff\neb 04\nc6 45 00 00\n48 85 db\n41 b8 64 68 40 00\n4c 0f 45 c3\n8a 05 60 66 20 00\nb9 48 92 60 00\n41 b9 c9 72 40 00\n84 c0\n4c 0f 45 c9\n8b 1d 5a 66 20 00\n4c 8d 54 24 1b\n4c 8d 5c 24 13\n48 89 e7\nbe 01 00 00 00\nba 43 68 40 00\nb8 00 00 00 00\n8b 4c 24 0c\n55\nff 74 24 78\n41 52\n41 53\n41 55\n53\n41 57\n41 54\ne8 7d ea ff ff\n48 83 c4 40\n83 f8 ff\n74 4a\n48 8b 1c 24\n48 89 df\ne8 98 e9 ff ff\n48 8d 44 03 01\n0f 1f 00\n80 78 fe 20\n48 8d 40 ff\n74 f6\nc6 00 00\n48 8b 3c 24\ne8 fa e8 ff ff\n48 8b 3c 24\ne8 61 e8 ff ff\n48 89 ef\ne8 59 e8 ff ff\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 65 25 00 00\n'
p26
S'.text:0000000000402b70\n.text:0000000000402b71\n.text:0000000000402b73\n.text:0000000000402b75\n.text:0000000000402b77\n.text:0000000000402b79\n.text:0000000000402b7a\n.text:0000000000402b7e\n.text:0000000000402b81\n.text:0000000000402b84\n.text:0000000000402b87\n.text:0000000000402b8a\n.text:0000000000402b8e\n.text:0000000000402b94\n.text:0000000000402b9b\n.text:0000000000402b9d\n.text:0000000000402ba3\n.text:0000000000402ba5\n.text:0000000000402ba7\n.text:0000000000402bac\n.text:0000000000402baf\n.text:0000000000402bb4\n.text:0000000000402bb8\n.text:0000000000402bba\n.text:0000000000402bbf\n.text:0000000000402bc4\n.text:0000000000402bc9\n.text:0000000000402bce\n.text:0000000000402bd0\n.text:0000000000402bd3\n.text:0000000000402bd8\n.text:0000000000402bda\n.text:0000000000402bdf\n.text:0000000000402be5\n.text:0000000000402be7\n.text:0000000000402be9\n.text:0000000000402bee\n.text:0000000000402bf1\n.text:0000000000402bf6\n.text:0000000000402bfa\n.text:0000000000402bfc\n.text:0000000000402c01\n.text:0000000000402c06\n.text:0000000000402c0b\n.text:0000000000402c10\n.text:0000000000402c12\n.text:0000000000402c15\n.text:0000000000402c1a\n.text:0000000000402c1c\n.text:0000000000402c21\n.text:0000000000402c26\n.text:0000000000402c2d\n.text:0000000000402c2f\n.text:0000000000402c32\n.text:0000000000402c37\n.text:0000000000402c3b\n.text:0000000000402c3f\n.text:0000000000402c44\n.text:0000000000402c48\n.text:0000000000402c4a\n.text:0000000000402c4f\n.text:0000000000402c54\n.text:0000000000402c57\n.text:0000000000402c5e\n.text:0000000000402c60\n.text:0000000000402c65\n.text:0000000000402c6c\n.text:0000000000402c71\n.text:0000000000402c73\n.text:0000000000402c76\n.text:0000000000402c79\n.text:0000000000402c7e\n.text:0000000000402c80\n.text:0000000000402c84\n.text:0000000000402c87\n.text:0000000000402c8d\n.text:0000000000402c91\n.text:0000000000402c97\n.text:0000000000402c9c\n.text:0000000000402ca2\n.text:0000000000402ca4\n.text:0000000000402ca8\n.text:0000000000402cae\n.text:0000000000402cb3\n.text:0000000000402cb8\n.text:0000000000402cbb\n.text:0000000000402cc0\n.text:0000000000402cc5\n.text:0000000000402cca\n.text:0000000000402cce\n.text:0000000000402ccf\n.text:0000000000402cd3\n.text:0000000000402cd5\n.text:0000000000402cd7\n.text:0000000000402cd9\n.text:0000000000402cda\n.text:0000000000402cdc\n.text:0000000000402cde\n.text:0000000000402ce3\n.text:0000000000402ce7\n.text:0000000000402cea\n.text:0000000000402cec\n.text:0000000000402cf0\n.text:0000000000402cf3\n.text:0000000000402cf8\n.text:0000000000402cfd\n.text:0000000000402d00\n.text:0000000000402d04\n.text:0000000000402d08\n.text:0000000000402d0a\n.text:0000000000402d0d\n.text:0000000000402d11\n.text:0000000000402d16\n.text:0000000000402d1a\n.text:0000000000402d1f\n.text:0000000000402d22\n.text:0000000000402d27\n.text:0000000000402d2b\n.text:0000000000402d2c\n.text:0000000000402d2e\n.text:0000000000402d30\n.text:0000000000402d32\n.text:0000000000402d34\n.text:0000000000402d35\n.text:0000000000402d36\n'
p27
tp28
sS'version_etc_arn'
p29
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p30
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_004071fb,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x404d97;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x404e18;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x404eac;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p31
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00404c28\nMOV EDX,0x4071e8\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401920\nJMP 0x00404c3d\nMOV EDX,0x4071f4\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401920\nXOR EDI,EDI\nMOV ESI,0x4071fb\nMOV EDX,0x5\nCALL 0x00401670\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4074d0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401920\nXOR EDI,EDI\nMOV ESI,0x4071ff\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401750\nCMP R12,0x9\nJA 0x00404cc6\nJMP qword ptr [0x407198 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x4072ca\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401920\nXOR EDI,EDI\nMOV ESI,0x407409\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401920\nADD RSP,0x38\nJMP 0x00404f37\nXOR EDI,EDI\nMOV ESI,0x4072da\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401920\nXOR EDI,EDI\nMOV ESI,0x4072f1\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401920\nXOR EDI,EDI\nMOV ESI,0x40730d\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401920\nADD RSP,0x18\nJMP 0x00404f37\nXOR EDI,EDI\nMOV ESI,0x40732d\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401920\nADD RSP,0x18\nJMP 0x00404f37\nXOR EDI,EDI\nMOV ESI,0x407351\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401920\nADD RSP,0x28\nJMP 0x00404f37\nXOR EDI,EDI\nMOV ESI,0x407379\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401920\nADD RSP,0x28\nJMP 0x00404f37\nXOR EDI,EDI\nMOV ESI,0x4073a5\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401920\nADD RSP,0x38\nJMP 0x00404f37\nXOR EDI,EDI\nMOV ESI,0x4073d5\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401920\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x004015a0\n'
p32
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba e8 71 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 fa cc ff ff\neb 15\nba f4 71 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 e3 cc ff ff\n31 ff\nbe fb 71 40 00\nba 05 00 00 00\ne8 22 ca ff ff\n48 89 c1\nbe 01 00 00 00\nba d0 74 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 b5 cc ff ff\n31 ff\nbe ff 71 40 00\nba 05 00 00 00\ne8 f4 c9 ff ff\n48 89 c7\n4c 89 f6\ne8 c9 ca ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 98 71 40 00\n31 ff\nbe ca 72 40 00\nba 05 00 00 00\ne8 ca c9 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 5a cc ff ff\n31 ff\nbe 09 74 40 00\nba 05 00 00 00\ne8 99 c9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 11 cc ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe da 72 40 00\nba 05 00 00 00\ne8 47 c9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 d3 cb ff ff\n31 ff\nbe f1 72 40 00\nba 05 00 00 00\ne8 12 c9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 9a cb ff ff\n31 ff\nbe 0d 73 40 00\nba 05 00 00 00\ne8 d9 c8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 64 cb ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 2d 73 40 00\nba 05 00 00 00\ne8 9a c8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 22 cb ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 51 73 40 00\nba 05 00 00 00\ne8 58 c8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 d8 ca ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 79 73 40 00\nba 05 00 00 00\ne8 0e c8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 8e ca ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe a5 73 40 00\nba 05 00 00 00\ne8 c4 c7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 3c ca ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe d5 73 40 00\nba 05 00 00 00\ne8 75 c7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 ed c9 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 5c c6 ff ff\n'
p33
S'.text:0000000000404bf0\n.text:0000000000404bf2\n.text:0000000000404bf4\n.text:0000000000404bf6\n.text:0000000000404bf7\n.text:0000000000404bf8\n.text:0000000000404bfb\n.text:0000000000404bfe\n.text:0000000000404c01\n.text:0000000000404c04\n.text:0000000000404c07\n.text:0000000000404c0a\n.text:0000000000404c0f\n.text:0000000000404c12\n.text:0000000000404c14\n.text:0000000000404c19\n.text:0000000000404c1b\n.text:0000000000404c1e\n.text:0000000000404c21\n.text:0000000000404c26\n.text:0000000000404c28\n.text:0000000000404c2d\n.text:0000000000404c2f\n.text:0000000000404c32\n.text:0000000000404c35\n.text:0000000000404c38\n.text:0000000000404c3d\n.text:0000000000404c3f\n.text:0000000000404c44\n.text:0000000000404c49\n.text:0000000000404c4e\n.text:0000000000404c51\n.text:0000000000404c56\n.text:0000000000404c5b\n.text:0000000000404c61\n.text:0000000000404c63\n.text:0000000000404c66\n.text:0000000000404c6b\n.text:0000000000404c6d\n.text:0000000000404c72\n.text:0000000000404c77\n.text:0000000000404c7c\n.text:0000000000404c7f\n.text:0000000000404c82\n.text:0000000000404c87\n.text:0000000000404c8b\n.text:0000000000404c8d\n.text:0000000000404c95\n.text:0000000000404c97\n.text:0000000000404c9c\n.text:0000000000404ca1\n.text:0000000000404ca6\n.text:0000000000404ca9\n.text:0000000000404cac\n.text:0000000000404cb1\n.text:0000000000404cb3\n.text:0000000000404cb6\n.text:0000000000404cba\n.text:0000000000404cbb\n.text:0000000000404cbd\n.text:0000000000404cbf\n.text:0000000000404cc1\n.text:0000000000404cc6\n.text:0000000000404cc8\n.text:0000000000404ccd\n.text:0000000000404cd2\n.text:0000000000404cd7\n.text:0000000000404cda\n.text:0000000000404cdd\n.text:0000000000404ce1\n.text:0000000000404ce5\n.text:0000000000404cea\n.text:0000000000404cef\n.text:0000000000404cf2\n.text:0000000000404cf6\n.text:0000000000404cfa\n.text:0000000000404cfe\n.text:0000000000404d02\n.text:0000000000404d06\n.text:0000000000404d0a\n.text:0000000000404d0f\n.text:0000000000404d13\n.text:0000000000404d18\n.text:0000000000404d1a\n.text:0000000000404d1f\n.text:0000000000404d24\n.text:0000000000404d29\n.text:0000000000404d2c\n.text:0000000000404d2f\n.text:0000000000404d33\n.text:0000000000404d38\n.text:0000000000404d3a\n.text:0000000000404d3d\n.text:0000000000404d41\n.text:0000000000404d42\n.text:0000000000404d44\n.text:0000000000404d46\n.text:0000000000404d48\n.text:0000000000404d4d\n.text:0000000000404d4f\n.text:0000000000404d54\n.text:0000000000404d59\n.text:0000000000404d5e\n.text:0000000000404d61\n.text:0000000000404d64\n.text:0000000000404d68\n.text:0000000000404d6c\n.text:0000000000404d71\n.text:0000000000404d73\n.text:0000000000404d76\n.text:0000000000404d7a\n.text:0000000000404d7b\n.text:0000000000404d7d\n.text:0000000000404d7f\n.text:0000000000404d81\n.text:0000000000404d86\n.text:0000000000404d88\n.text:0000000000404d8d\n.text:0000000000404d92\n.text:0000000000404d97\n.text:0000000000404d9a\n.text:0000000000404d9d\n.text:0000000000404da1\n.text:0000000000404da5\n.text:0000000000404da9\n.text:0000000000404dae\n.text:0000000000404db0\n.text:0000000000404db3\n.text:0000000000404db7\n.text:0000000000404dbc\n.text:0000000000404dc0\n.text:0000000000404dc5\n.text:0000000000404dc7\n.text:0000000000404dcc\n.text:0000000000404dd1\n.text:0000000000404dd6\n.text:0000000000404dd9\n.text:0000000000404ddc\n.text:0000000000404de0\n.text:0000000000404de4\n.text:0000000000404de9\n.text:0000000000404dee\n.text:0000000000404df1\n.text:0000000000404df5\n.text:0000000000404df9\n.text:0000000000404dfe\n.text:0000000000404e02\n.text:0000000000404e07\n.text:0000000000404e09\n.text:0000000000404e0e\n.text:0000000000404e13\n.text:0000000000404e18\n.text:0000000000404e1b\n.text:0000000000404e1e\n.text:0000000000404e22\n.text:0000000000404e26\n.text:0000000000404e2a\n.text:0000000000404e2f\n.text:0000000000404e34\n.text:0000000000404e37\n.text:0000000000404e3b\n.text:0000000000404e3f\n.text:0000000000404e43\n.text:0000000000404e48\n.text:0000000000404e4c\n.text:0000000000404e51\n.text:0000000000404e53\n.text:0000000000404e58\n.text:0000000000404e5d\n.text:0000000000404e62\n.text:0000000000404e65\n.text:0000000000404e68\n.text:0000000000404e6c\n.text:0000000000404e70\n.text:0000000000404e75\n.text:0000000000404e7a\n.text:0000000000404e7d\n.text:0000000000404e81\n.text:0000000000404e85\n.text:0000000000404e89\n.text:0000000000404e8d\n.text:0000000000404e92\n.text:0000000000404e96\n.text:0000000000404e9b\n.text:0000000000404e9d\n.text:0000000000404ea2\n.text:0000000000404ea7\n.text:0000000000404eac\n.text:0000000000404eaf\n.text:0000000000404eb2\n.text:0000000000404eb6\n.text:0000000000404eba\n.text:0000000000404ebe\n.text:0000000000404ec3\n.text:0000000000404ec8\n.text:0000000000404ecb\n.text:0000000000404ecf\n.text:0000000000404ed3\n.text:0000000000404ed7\n.text:0000000000404edb\n.text:0000000000404edf\n.text:0000000000404ee4\n.text:0000000000404ee8\n.text:0000000000404eea\n.text:0000000000404eec\n.text:0000000000404ef1\n.text:0000000000404ef6\n.text:0000000000404efb\n.text:0000000000404efe\n.text:0000000000404f01\n.text:0000000000404f05\n.text:0000000000404f09\n.text:0000000000404f0e\n.text:0000000000404f13\n.text:0000000000404f16\n.text:0000000000404f1a\n.text:0000000000404f1e\n.text:0000000000404f22\n.text:0000000000404f26\n.text:0000000000404f2a\n.text:0000000000404f2e\n.text:0000000000404f33\n.text:0000000000404f37\n.text:0000000000404f38\n.text:0000000000404f3a\n.text:0000000000404f3c\n.text:0000000000404f3e\n.text:0000000000404f3f\n'
p34
tp35
sS'usage'
p36
(S'\n__stdcall usage()\n'
p37
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... [ FILE | ARG1 ARG2 ]\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,"Print information about users who are currently logged in.\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn  -a, --all         same as -b -d --login -p -r -t -T -u\u005cn  -b, --boot        time of last system boot\u005cn  -d, --dead        print dead processes\u005cn  -H, --heading     print line of column headings\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  -l, --login       print system login processes\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --lookup      attempt to canonicalize hostnames via DNS\u005cn  -m                only hostname and user associated with stdin\u005cn  -p, --process     print active processes spawned by init\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -q, --count       all login names and number of users logged on\u005cn  -r, --runlevel    print current runlevel\u005cn  -s, --short       print only name, line, and time (default)\u005cn  -t, --time        print last system clock change\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -T, -w, --mesg    add user\u005c's message status as +, - or ?\u005cn  -u, --users       list users logged in\u005cn      --message     same as -T\u005cn      --writable    same as -T\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    uVar1 = dcgettext(0,\u000a                      "\u005cnIf FILE is not specified, use %s.  %s as FILE is common.\u005cnIf ARG1 ARG2 given, -m presumed: \u005c'am i\u005c' or \u005c'mom likes\u005c' are usual.\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,"/var/run/utmp","/var/log/wtmp");\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p38
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401c0b\nXOR EDI,EDI\nMOV ESI,0x406100\nMOV EDX,0x5\nCALL 0x00401670\nMOV RCX,RAX\nMOV RDX,qword ptr [0x006093b8]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401890\nXOR EDI,EDI\nMOV ESI,0x40612c\nMOV EDX,0x5\nCALL 0x00401670\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nCALL 0x00401750\nXOR EDI,EDI\nMOV ESI,0x406168\nMOV EDX,0x5\nCALL 0x00401670\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nCALL 0x00401750\nXOR EDI,EDI\nMOV ESI,0x40622b\nMOV EDX,0x5\nCALL 0x00401670\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nCALL 0x00401750\nXOR EDI,EDI\nMOV ESI,0x40625d\nMOV EDX,0x5\nCALL 0x00401670\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nCALL 0x00401750\nXOR EDI,EDI\nMOV ESI,0x406318\nMOV EDX,0x5\nCALL 0x00401670\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nCALL 0x00401750\nXOR EDI,EDI\nMOV ESI,0x4063f7\nMOV EDX,0x5\nCALL 0x00401670\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nCALL 0x00401750\nXOR EDI,EDI\nMOV ESI,0x40649a\nMOV EDX,0x5\nCALL 0x00401670\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nCALL 0x00401750\nXOR EDI,EDI\nMOV ESI,0x4064c7\nMOV EDX,0x5\nCALL 0x00401670\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nCALL 0x00401750\nXOR EDI,EDI\nMOV ESI,0x4064fd\nMOV EDX,0x5\nCALL 0x00401670\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40657a\nMOV ECX,0x406588\nXOR EAX,EAX\nCALL 0x00401890\nCALL 0x00401c60\nMOV EDI,EBX\nCALL 0x00401900\nCALL 0x00401c20\nMOV EDI,EBX\nCALL 0x00401900\n'
p39
S'53\n89 fb\n85 db\n0f 85 60 01 00 00\n31 ff\nbe 00 61 40 00\nba 05 00 00 00\ne8 b4 fb ff ff\n48 89 c1\n48 8b 15 f2 78 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 bb fd ff ff\n31 ff\nbe 2c 61 40 00\nba 05 00 00 00\ne8 8a fb ff ff\n48 8b 35 db 77 20 00\n48 89 c7\ne8 5b fc ff ff\n31 ff\nbe 68 61 40 00\nba 05 00 00 00\ne8 6a fb ff ff\n48 8b 35 bb 77 20 00\n48 89 c7\ne8 3b fc ff ff\n31 ff\nbe 2b 62 40 00\nba 05 00 00 00\ne8 4a fb ff ff\n48 8b 35 9b 77 20 00\n48 89 c7\ne8 1b fc ff ff\n31 ff\nbe 5d 62 40 00\nba 05 00 00 00\ne8 2a fb ff ff\n48 8b 35 7b 77 20 00\n48 89 c7\ne8 fb fb ff ff\n31 ff\nbe 18 63 40 00\nba 05 00 00 00\ne8 0a fb ff ff\n48 8b 35 5b 77 20 00\n48 89 c7\ne8 db fb ff ff\n31 ff\nbe f7 63 40 00\nba 05 00 00 00\ne8 ea fa ff ff\n48 8b 35 3b 77 20 00\n48 89 c7\ne8 bb fb ff ff\n31 ff\nbe 9a 64 40 00\nba 05 00 00 00\ne8 ca fa ff ff\n48 8b 35 1b 77 20 00\n48 89 c7\ne8 9b fb ff ff\n31 ff\nbe c7 64 40 00\nba 05 00 00 00\ne8 aa fa ff ff\n48 8b 35 fb 76 20 00\n48 89 c7\ne8 7b fb ff ff\n31 ff\nbe fd 64 40 00\nba 05 00 00 00\ne8 8a fa ff ff\n48 89 c6\nbf 01 00 00 00\nba 7a 65 40 00\nb9 88 65 40 00\n31 c0\ne8 91 fc ff ff\ne8 5c 00 00 00\n89 df\ne8 f5 fc ff ff\ne8 10 00 00 00\n89 df\ne8 e9 fc ff ff\n'
p40
S'.text:0000000000401aa0\n.text:0000000000401aa1\n.text:0000000000401aa3\n.text:0000000000401aa5\n.text:0000000000401aab\n.text:0000000000401aad\n.text:0000000000401ab2\n.text:0000000000401ab7\n.text:0000000000401abc\n.text:0000000000401abf\n.text:0000000000401ac6\n.text:0000000000401acb\n.text:0000000000401acd\n.text:0000000000401ad0\n.text:0000000000401ad5\n.text:0000000000401ad7\n.text:0000000000401adc\n.text:0000000000401ae1\n.text:0000000000401ae6\n.text:0000000000401aed\n.text:0000000000401af0\n.text:0000000000401af5\n.text:0000000000401af7\n.text:0000000000401afc\n.text:0000000000401b01\n.text:0000000000401b06\n.text:0000000000401b0d\n.text:0000000000401b10\n.text:0000000000401b15\n.text:0000000000401b17\n.text:0000000000401b1c\n.text:0000000000401b21\n.text:0000000000401b26\n.text:0000000000401b2d\n.text:0000000000401b30\n.text:0000000000401b35\n.text:0000000000401b37\n.text:0000000000401b3c\n.text:0000000000401b41\n.text:0000000000401b46\n.text:0000000000401b4d\n.text:0000000000401b50\n.text:0000000000401b55\n.text:0000000000401b57\n.text:0000000000401b5c\n.text:0000000000401b61\n.text:0000000000401b66\n.text:0000000000401b6d\n.text:0000000000401b70\n.text:0000000000401b75\n.text:0000000000401b77\n.text:0000000000401b7c\n.text:0000000000401b81\n.text:0000000000401b86\n.text:0000000000401b8d\n.text:0000000000401b90\n.text:0000000000401b95\n.text:0000000000401b97\n.text:0000000000401b9c\n.text:0000000000401ba1\n.text:0000000000401ba6\n.text:0000000000401bad\n.text:0000000000401bb0\n.text:0000000000401bb5\n.text:0000000000401bb7\n.text:0000000000401bbc\n.text:0000000000401bc1\n.text:0000000000401bc6\n.text:0000000000401bcd\n.text:0000000000401bd0\n.text:0000000000401bd5\n.text:0000000000401bd7\n.text:0000000000401bdc\n.text:0000000000401be1\n.text:0000000000401be6\n.text:0000000000401be9\n.text:0000000000401bee\n.text:0000000000401bf3\n.text:0000000000401bf8\n.text:0000000000401bfa\n.text:0000000000401bff\n.text:0000000000401c04\n.text:0000000000401c06\n.text:0000000000401c0b\n.text:0000000000401c10\n.text:0000000000401c12\n'
p41
tp42
sS'__strncat_chk'
p43
(S'\n__stdcall __strncat_chk()\n'
p44
V\u000avoid __strncat_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___strncat_chk_00609200)();\u000a  return;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x00609200]\n'
p46
S'ff 25 ca 78 20 00\n'
p47
S'.plt:0000000000401930\n'
p48
tp49
sS'quoting_options_from_style'
p50
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p51
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p52
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040456d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x004015a0\n'
p53
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 2e d0 ff ff\n'
p54
S'.text:0000000000404520\n.text:0000000000404524\n.text:0000000000404527\n.text:000000000040452c\n.text:0000000000404531\n.text:0000000000404535\n.text:000000000040453d\n.text:0000000000404540\n.text:0000000000404542\n.text:0000000000404544\n.text:0000000000404548\n.text:000000000040454b\n.text:000000000040454f\n.text:0000000000404554\n.text:0000000000404559\n.text:000000000040455d\n.text:0000000000404561\n.text:0000000000404565\n.text:0000000000404568\n.text:000000000040456c\n.text:000000000040456d\n'
p55
tp56
sS'strchr'
p57
(S'\n__stdcall strchr(char * __s, int __c)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_006090c8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x006090c8]\n'
p60
S'ff 25 02 7a 20 00\n'
p61
S'.plt:00000000004016c0\n'
p62
tp63
sS'rpl_fclose'
p64
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p65
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00405889;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00405889:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p66
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004017e0\nTEST EAX,EAX\nJS 0x00405889\nMOV RDI,RBX\nCALL 0x00401840\nTEST EAX,EAX\nJZ 0x00405857\nMOV RDI,RBX\nCALL 0x004017e0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x004016f0\nCMP RAX,-0x1\nJZ 0x00405889\nMOV RDI,RBX\nCALL 0x004058a0\nTEST EAX,EAX\nJZ 0x00405889\nCALL 0x004015b0\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401650\nTEST EBP,EBP\nJZ 0x00405882\nCALL 0x004015b0\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401650\n'
p67
S'55\n53\n50\n48 89 fb\ne8 b5 bf ff ff\n85 c0\n78 5a\n48 89 df\ne8 09 c0 ff ff\n85 c0\n74 1c\n48 89 df\ne8 9d bf ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 9f be ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 48 bd ff ff\n8b 28\n48 89 df\ne8 de bd ff ff\n85 ed\n74 0c\ne8 35 bd ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 b9 bd ff ff\n'
p68
S'.text:0000000000405820\n.text:0000000000405821\n.text:0000000000405822\n.text:0000000000405823\n.text:0000000000405826\n.text:000000000040582b\n.text:000000000040582d\n.text:000000000040582f\n.text:0000000000405832\n.text:0000000000405837\n.text:0000000000405839\n.text:000000000040583b\n.text:000000000040583e\n.text:0000000000405843\n.text:0000000000405845\n.text:000000000040584a\n.text:000000000040584c\n.text:0000000000405851\n.text:0000000000405855\n.text:0000000000405857\n.text:000000000040585a\n.text:000000000040585f\n.text:0000000000405861\n.text:0000000000405863\n.text:0000000000405868\n.text:000000000040586a\n.text:000000000040586d\n.text:0000000000405872\n.text:0000000000405874\n.text:0000000000405876\n.text:000000000040587b\n.text:000000000040587d\n.text:0000000000405882\n.text:0000000000405886\n.text:0000000000405887\n.text:0000000000405888\n.text:0000000000405889\n.text:000000000040588c\n.text:0000000000405890\n.text:0000000000405891\n.text:0000000000405892\n'
p69
tp70
sS'strcpy'
p71
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p72
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00609060)();\u000a  return pcVar1;\u000a}\u000a\u000a
p73
S'JMP qword ptr [0x00609060]\n'
p74
S'ff 25 6a 7a 20 00\n'
p75
S'.plt:00000000004015f0\n'
p76
tp77
sS'strncmp'
p78
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p79
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00609050)();\u000a  return iVar1;\u000a}\u000a\u000a
p80
S'JMP qword ptr [0x00609050]\n'
p81
S'ff 25 7a 7a 20 00\n'
p82
S'.plt:00000000004015d0\n'
p83
tp84
sS'xnrealloc'
p85
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p86
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p87
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00405144\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00405150\nPUSH RAX\nCALL 0x004052a0\n'
p88
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p89
S'.text:0000000000405130\n.text:0000000000405133\n.text:0000000000405136\n.text:0000000000405139\n.text:000000000040513b\n.text:000000000040513f\n.text:0000000000405142\n.text:0000000000405144\n.text:0000000000405145\n'
p90
tp91
sS'quote'
p92
(S'\n__stdcall quote(char * arg)\n'
p93
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p94
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004047d0\n'
p95
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p96
S'.text:00000000004047e0\n.text:00000000004047e3\n.text:00000000004047e5\n.text:00000000004047e8\n'
p97
tp98
sS'emit_bug_reporting_address'
p99
(S'\n__stdcall emit_bug_reporting_address()\n'
p100
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p101
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x407445\nMOV EDX,0x5\nCALL 0x00401670\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40745a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401890\nXOR EDI,EDI\nMOV ESI,0x407470\nMOV EDX,0x5\nCALL 0x00401670\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x4065c1\nMOV ECX,0x4066c7\nXOR EAX,EAX\nCALL 0x00401890\nXOR EDI,EDI\nMOV ESI,0x407484\nMOV EDX,0x5\nCALL 0x00401670\nMOV RSI,qword ptr [0x006092c8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401750\n'
p102
S'50\n31 ff\nbe 45 74 40 00\nba 05 00 00 00\ne8 ee c5 ff ff\n48 89 c1\nbf 01 00 00 00\nba 5a 74 40 00\n31 c0\n48 89 ce\ne8 f7 c7 ff ff\n31 ff\nbe 70 74 40 00\nba 05 00 00 00\ne8 c6 c5 ff ff\n48 89 c6\nbf 01 00 00 00\nba c1 65 40 00\nb9 c7 66 40 00\n31 c0\ne8 cd c7 ff ff\n31 ff\nbe 84 74 40 00\nba 05 00 00 00\ne8 9c c5 ff ff\n48 8b 35 ed 41 20 00\n48 89 c7\n58\ne9 6c c6 ff ff\n'
p103
S'.text:0000000000405070\n.text:0000000000405071\n.text:0000000000405073\n.text:0000000000405078\n.text:000000000040507d\n.text:0000000000405082\n.text:0000000000405085\n.text:000000000040508a\n.text:000000000040508f\n.text:0000000000405091\n.text:0000000000405094\n.text:0000000000405099\n.text:000000000040509b\n.text:00000000004050a0\n.text:00000000004050a5\n.text:00000000004050aa\n.text:00000000004050ad\n.text:00000000004050b2\n.text:00000000004050b7\n.text:00000000004050bc\n.text:00000000004050be\n.text:00000000004050c3\n.text:00000000004050c5\n.text:00000000004050ca\n.text:00000000004050cf\n.text:00000000004050d4\n.text:00000000004050db\n.text:00000000004050de\n.text:00000000004050df\n'
p104
tp105
sS'clone_quoting_options'
p106
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p107
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p108
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004015b0\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x6093c0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00405250\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p109
S'55\n41 56\n53\n48 89 fb\ne8 04 e2 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 c0 93 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 85 1e 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p110
S'.text:00000000004033a0\n.text:00000000004033a1\n.text:00000000004033a3\n.text:00000000004033a4\n.text:00000000004033a7\n.text:00000000004033ac\n.text:00000000004033af\n.text:00000000004033b2\n.text:00000000004033b5\n.text:00000000004033ba\n.text:00000000004033be\n.text:00000000004033c3\n.text:00000000004033c6\n.text:00000000004033cb\n.text:00000000004033ce\n.text:00000000004033cf\n.text:00000000004033d1\n.text:00000000004033d2\n'
p111
tp112
sS'xmalloc'
p113
(S'\n__stdcall xmalloc(size_t n)\n'
p114
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p115
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401800\nTEST RBX,RBX\nJZ 0x00405123\nTEST RAX,RAX\nJZ 0x00405125\nPOP RBX\nRET\nCALL 0x004052a0\n'
p116
S'53\n48 89 fb\ne8 e7 c6 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p117
S'.text:0000000000405110\n.text:0000000000405111\n.text:0000000000405114\n.text:0000000000405119\n.text:000000000040511c\n.text:000000000040511e\n.text:0000000000405121\n.text:0000000000405123\n.text:0000000000405124\n.text:0000000000405125\n'
p118
tp119
sS'quotearg_char_mem'
p120
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p121
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p122
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x006093f0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x006093e0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x006093d0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006093c0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00403400\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004042f0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p123
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d d8 4d 20 00\n48 89 4c 24 30\n0f 10 05 bc 4d 20 00\n0f 29 44 24 20\n0f 10 05 a0 4d 20 00\n0f 29 44 24 10\n0f 10 05 84 4d 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p124
S'.text:0000000000404600\n.text:0000000000404602\n.text:0000000000404604\n.text:0000000000404605\n.text:0000000000404609\n.text:000000000040460b\n.text:000000000040460e\n.text:0000000000404611\n.text:0000000000404618\n.text:000000000040461d\n.text:0000000000404624\n.text:0000000000404629\n.text:0000000000404630\n.text:0000000000404635\n.text:000000000040463c\n.text:0000000000404640\n.text:0000000000404643\n.text:0000000000404648\n.text:000000000040464b\n.text:000000000040464d\n.text:0000000000404652\n.text:0000000000404654\n.text:0000000000404657\n.text:000000000040465a\n.text:000000000040465d\n.text:0000000000404662\n.text:0000000000404666\n.text:0000000000404667\n.text:0000000000404669\n.text:000000000040466b\n'
p125
tp126
sS'c_isgraph'
p127
(S'\n__stdcall c_isgraph()\n'
p128
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p129
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p130
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p131
S'.text:0000000000402fb0\n.text:0000000000402fb3\n.text:0000000000402fb6\n.text:0000000000402fb9\n'
p132
tp133
sS'frame_dummy'
p134
(S'\n__stdcall frame_dummy()\n'
p135
V\u000a/* WARNING: Removing unreachable block (ram,0x00401a8a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p136
S'MOV EDI,0x608e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401a80\nJMP 0x00401a10\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401a7b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401a10\n'
p137
S'bf 18 8e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p138
S'.text:0000000000401a70\n.text:0000000000401a75\n.text:0000000000401a79\n.text:0000000000401a7b\n.text:0000000000401a80\n.text:0000000000401a85\n.text:0000000000401a88\n.text:0000000000401a8a\n.text:0000000000401a8b\n.text:0000000000401a8e\n.text:0000000000401a90\n.text:0000000000401a91\n'
p139
tp140
sS'hard_locale'
p141
(S'\n__stdcall hard_locale()\n'
p142
V\u000a_Bool hard_locale(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  undefined uVar2;\u000a  int __category;\u000a  \u000a  __s1 = setlocale(__category,(char *)0x0);\u000a  uVar2 = 1;\u000a  if (__s1 != (char *)0x0) {\u000a    if (((*__s1 != 'C') || (__s1[1] != 0)) && (iVar1 = strcmp(__s1,"POSIX"), iVar1 != 0)) {\u000a      return true;\u000a    }\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p143
S'PUSH RBX\nXOR ESI,ESI\nCALL 0x00401880\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x0040321d\nCMP byte ptr [RAX],0x43\nJNZ 0x0040320a\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x0040321b\nMOV ESI,0x406bfd\nMOV RDI,RAX\nCALL 0x00401790\nTEST EAX,EAX\nJNZ 0x0040321d\nXOR EBX,EBX\nMOV EAX,EBX\nPOP RBX\nRET\n'
p144
S'53\n31 f6\ne8 88 e6 ff ff\nb3 01\n48 85 c0\n74 1e\n80 38 43\n75 06\n80 78 01 00\n74 11\nbe fd 6b 40 00\n48 89 c7\ne8 79 e5 ff ff\n85 c0\n75 02\n31 db\n89 d8\n5b\nc3\n'
p145
S'.text:00000000004031f0\n.text:00000000004031f1\n.text:00000000004031f3\n.text:00000000004031f8\n.text:00000000004031fa\n.text:00000000004031fd\n.text:00000000004031ff\n.text:0000000000403202\n.text:0000000000403204\n.text:0000000000403208\n.text:000000000040320a\n.text:000000000040320f\n.text:0000000000403212\n.text:0000000000403217\n.text:0000000000403219\n.text:000000000040321b\n.text:000000000040321d\n.text:000000000040321f\n.text:0000000000403220\n'
p146
tp147
sS'quotearg_buffer_restyled'
p148
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p149
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040359c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040359c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040359c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040359c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040359c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040359c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040359c_caseD_7;\u000aswitchD_0040359c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040359c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040359c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00404060;\u000aLAB_00403780:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00404069:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00404078:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040378b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_004037cf:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_004037cf;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00404078;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00403fa5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00403eb0;\u000a    }\u000a    goto LAB_00404078;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00403fda;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00404078;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00404009;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403ac8;\u000a  case '\u005ca':\u000a    goto joined_r0x004039b8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x004039b8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_004037e6_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x004039b8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x004039b8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_004037e6_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x004039b8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_00403f1e;\u000a    }\u000a    goto LAB_00404078;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00404078;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00404078;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00404078;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00404078;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00404078;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_004037e6_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00403f76;\u000a      goto joined_r0x00403f68;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403a71:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403f68;\u000a      goto LAB_00403f76;\u000a    }\u000a    goto LAB_00404078;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00404078;\u000a  }\u000a  goto joined_r0x00403eb0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00403fda:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00404009;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00404009:\u000a  if (1 < uVar10) {\u000aLAB_00403ae6:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403ba2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403a71;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403ba2:\u000a        if (bVar6 != 0) goto LAB_00404078;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403ac8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403ae6;\u000ajoined_r0x00403eb0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00403eb0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403ed7;\u000aLAB_00403f10:\u000a    if (bVar22) goto LAB_00403f15;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00403f10;\u000aLAB_00403ed7:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00403f15:\u000a      if (bVar6 != 0) goto LAB_00404078;\u000aLAB_00403f1e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403f68;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00403f76:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403f68:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00403fa5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00403780;\u000aLAB_00404060:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00404069;\u000a  goto LAB_0040378b;\u000a}\u000a\u000a
p150
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401680\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00404145\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x406c50 + RAX*0x8]\nMOV EDI,0x407176\nMOV ESI,R15D\nCALL 0x004047f0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x407178\nMOV ESI,R15D\nCALL 0x004047f0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x004035fd\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00403600\nNOP\nCMP R12,RSI\nJNC 0x004035ee\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x004035e0\nJMP 0x00403600\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401690\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x004036cc\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x004036cc\nMOV ECX,0x407174\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x004036c6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00403667\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00403694\nTEST RSI,RSI\nJZ 0x00403681\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x407178\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x004036a2\nMOV ECX,0x407178\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x004036cc\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040411c\nMOV ECX,0x407174\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00404060\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00404069\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x004037cf\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x004037ca\nCMP R11,-0x1\nJNZ 0x004037ca\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401690\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00403820\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00403a7c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x406ca8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00404078\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403ed0\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403ed7\nJMP 0x00403f10\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401740\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040386d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x004037d1\nJMP 0x00404078\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x004037d1\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x004037fb\nCMP EBX,0x2\nJNZ 0x004037fb\nTEST R13,R13\nJNZ 0x004037fb\nJMP 0x00404078\nCMP R11,-0x1\nJZ 0x00403c53\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403c73\nJMP 0x004037fb\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403c84\nTEST R8B,R8B\nJNZ 0x00404078\nCMP EBX,0x2\nJNZ 0x00403928\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403928\nCMP R12,RSI\nJNC 0x00403903\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403912\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403921\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403932\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403df8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403df8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403df8\nCMP RCX,RSI\nJNC 0x0040396c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040397b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403806\nJMP 0x00403ed0\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004037f9\nJMP 0x004039da\nMOV DL,0x74\nJMP 0x004039c2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004037f9\nJMP 0x004039da\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004037f9\nJMP 0x004039da\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00404078\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004037f9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x00403f1e\nJMP 0x00404078\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x004037f9\nTEST R8B,R8B\nJNZ 0x00404078\nCMP R12,RSI\nJNC 0x00403a0a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403a19\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403a28\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x004037f9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x00403e0b\nCMP EBX,0x2\nJNZ 0x004037f9\nTEST R8B,R8B\nJZ 0x004037f9\nJMP 0x00404078\nCMP EBX,0x2\nJNZ 0x00403ca4\nTEST R8B,R8B\nJNZ 0x00404078\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00403f76\nJMP 0x00403f99\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403cc5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401970\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403eb8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00403eb8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403ba2\nJMP 0x00403b70\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403b59\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403b56\nCMP R12,RSI\nJNC 0x00403b3b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x00403b4a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403b90\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403b90\nTEST BPL,0x1\nJZ 0x00403c33\nCMP R12,RSI\nJNC 0x00403b84\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403c33\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403b70\nTEST R8B,R8B\nJNZ 0x00404078\nCMP EBX,0x2\nJNZ 0x00403bea\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x00403bea\nCMP R12,RSI\nJNC 0x00403bc2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403bd1\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403be0\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403bf4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403c0b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403c25\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403b20\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00403f76\nJMP 0x00403f99\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x004037fb\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x004037fb\nJMP 0x00404078\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00403fa5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403806\nJMP 0x00403ed0\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x004039c2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00403f76\nJMP 0x00403f99\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403ce7\nMOV RDI,R10\nCALL 0x00401690\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x004016b0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00403fbf\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403fb7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403fc6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00403dae\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403da6\nBT RDI,RDX\nJC 0x00404112\nINC RCX\nCMP RCX,R14\nJC 0x00403d90\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401960\nTEST EAX,EAX\nJNZ 0x00403dc3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401950\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403d05\nJMP 0x00404009\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403806\nJMP 0x00403ed0\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x004037f9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x004037f9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x004037f9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x004037fb\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00404042\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00404078\nCMP R12,RSI\nJNC 0x00403e6e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00403e81\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403e90\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x00403e9f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403806\nJMP 0x00403ed0\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403806\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00403f10\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00403f15\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00403f70\nJMP 0x00403f15\nTEST BPL,BPL\nJZ 0x00403f70\nTEST R8B,R8B\nJNZ 0x00404078\nCMP EBX,0x2\nJNZ 0x00403f58\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403f58\nCMP R12,RSI\nJNC 0x00403f33\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403f42\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403f51\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403f62\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00403fa2\nJMP 0x00403f9e\nTEST DIL,0x1\nJZ 0x00403f99\nAND AL,0x1\nJNZ 0x00403f99\nCMP R12,RSI\nJNC 0x00403f84\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403f93\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00403fa2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00404060\nJMP 0x00403780\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00404004\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00403ffc\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00404038\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00403fda\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00404009\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403ac8\nJMP 0x00403ae6\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00404009\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403806\nJMP 0x00403ed0\nCMP R13,R11\nJNZ 0x0040378b\nTEST R8B,R8B\nJZ 0x004040d2\nCMP EBX,0x2\nJNZ 0x004040d2\nTEST R12,R12\nJNZ 0x004040d2\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00403510\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00404106\nTEST R8B,R8B\nJNZ 0x00404106\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00404106\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x004040f9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x004040f0\nCMP R12,RSI\nJNC 0x004040bd\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x004040bd\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00404078\nTEST RSI,RSI\nJZ 0x00404129\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x407174\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x004036cc\nCALL 0x004015a0\n'
p151
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 42 e1 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 50 6c 40 00\nbf 76 71 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 78 71 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 83 e0 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 74 71 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 78 71 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 78 71 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 74 71 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 e3 de ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd a8 6c 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 07 df ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 d7 de ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 b1 d9 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 83 d9 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 a9 db ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 72 db ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 74 71 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 56 d4 ff ff\n'
p152
S'.text:0000000000403510\n.text:0000000000403511\n.text:0000000000403513\n.text:0000000000403515\n.text:0000000000403517\n.text:0000000000403519\n.text:000000000040351a\n.text:0000000000403521\n.text:0000000000403524\n.text:0000000000403527\n.text:000000000040352a\n.text:000000000040352f\n.text:0000000000403534\n.text:0000000000403539\n.text:000000000040353e\n.text:0000000000403546\n.text:000000000040354a\n.text:0000000000403550\n.text:0000000000403558\n.text:000000000040355d\n.text:0000000000403565\n.text:000000000040356a\n.text:000000000040356e\n.text:0000000000403570\n.text:0000000000403573\n.text:0000000000403576\n.text:0000000000403579\n.text:000000000040357e\n.text:0000000000403581\n.text:0000000000403584\n.text:0000000000403587\n.text:000000000040358a\n.text:000000000040358c\n.text:000000000040358f\n.text:0000000000403594\n.text:0000000000403597\n.text:000000000040359c\n.text:00000000004035a3\n.text:00000000004035a8\n.text:00000000004035ab\n.text:00000000004035b0\n.text:00000000004035b5\n.text:00000000004035ba\n.text:00000000004035bd\n.text:00000000004035c2\n.text:00000000004035c7\n.text:00000000004035cc\n.text:00000000004035ce\n.text:00000000004035d0\n.text:00000000004035d5\n.text:00000000004035d7\n.text:00000000004035da\n.text:00000000004035dc\n.text:00000000004035de\n.text:00000000004035e0\n.text:00000000004035e3\n.text:00000000004035e5\n.text:00000000004035ea\n.text:00000000004035ee\n.text:00000000004035f4\n.text:00000000004035f7\n.text:00000000004035f9\n.text:00000000004035fb\n.text:00000000004035fd\n.text:0000000000403600\n.text:0000000000403605\n.text:0000000000403608\n.text:000000000040360d\n.text:0000000000403612\n.text:0000000000403615\n.text:0000000000403618\n.text:000000000040361b\n.text:000000000040361e\n.text:0000000000403623\n.text:0000000000403626\n.text:0000000000403629\n.text:000000000040362e\n.text:0000000000403631\n.text:0000000000403633\n.text:0000000000403636\n.text:0000000000403638\n.text:000000000040363a\n.text:000000000040363d\n.text:0000000000403642\n.text:0000000000403647\n.text:000000000040364c\n.text:000000000040364f\n.text:0000000000403655\n.text:0000000000403657\n.text:000000000040365a\n.text:000000000040365d\n.text:0000000000403660\n.text:0000000000403662\n.text:0000000000403664\n.text:0000000000403667\n.text:000000000040366a\n.text:000000000040366f\n.text:0000000000403672\n.text:0000000000403674\n.text:0000000000403677\n.text:0000000000403679\n.text:000000000040367e\n.text:0000000000403681\n.text:0000000000403686\n.text:000000000040368c\n.text:0000000000403692\n.text:0000000000403694\n.text:0000000000403699\n.text:000000000040369f\n.text:00000000004036a2\n.text:00000000004036a5\n.text:00000000004036a8\n.text:00000000004036aa\n.text:00000000004036af\n.text:00000000004036b2\n.text:00000000004036b8\n.text:00000000004036bd\n.text:00000000004036c3\n.text:00000000004036c6\n.text:00000000004036c9\n.text:00000000004036cc\n.text:00000000004036d4\n.text:00000000004036d6\n.text:00000000004036d8\n.text:00000000004036db\n.text:00000000004036df\n.text:00000000004036e1\n.text:00000000004036e4\n.text:00000000004036e8\n.text:00000000004036ea\n.text:00000000004036ed\n.text:00000000004036f0\n.text:00000000004036f3\n.text:00000000004036f5\n.text:00000000004036f9\n.text:00000000004036fb\n.text:00000000004036ff\n.text:0000000000403702\n.text:0000000000403705\n.text:0000000000403708\n.text:000000000040370a\n.text:000000000040370e\n.text:0000000000403717\n.text:000000000040371a\n.text:000000000040371c\n.text:0000000000403720\n.text:0000000000403722\n.text:0000000000403726\n.text:0000000000403728\n.text:000000000040372b\n.text:000000000040372f\n.text:0000000000403731\n.text:0000000000403734\n.text:0000000000403738\n.text:000000000040373d\n.text:0000000000403740\n.text:0000000000403744\n.text:000000000040374c\n.text:000000000040374f\n.text:0000000000403752\n.text:0000000000403754\n.text:0000000000403758\n.text:000000000040375b\n.text:000000000040375d\n.text:0000000000403762\n.text:0000000000403766\n.text:000000000040376b\n.text:0000000000403770\n.text:0000000000403774\n.text:000000000040377a\n.text:0000000000403780\n.text:0000000000403785\n.text:000000000040378b\n.text:0000000000403790\n.text:0000000000403792\n.text:0000000000403797\n.text:000000000040379b\n.text:000000000040379d\n.text:00000000004037a1\n.text:00000000004037a3\n.text:00000000004037a5\n.text:00000000004037a8\n.text:00000000004037ad\n.text:00000000004037af\n.text:00000000004037b4\n.text:00000000004037b9\n.text:00000000004037bd\n.text:00000000004037c2\n.text:00000000004037c7\n.text:00000000004037ca\n.text:00000000004037cd\n.text:00000000004037cf\n.text:00000000004037d1\n.text:00000000004037d6\n.text:00000000004037da\n.text:00000000004037e0\n.text:00000000004037e2\n.text:00000000004037e4\n.text:00000000004037e6\n.text:00000000004037ee\n.text:00000000004037f3\n.text:00000000004037f9\n.text:00000000004037fb\n.text:0000000000403800\n.text:0000000000403806\n.text:000000000040380f\n.text:0000000000403815\n.text:0000000000403820\n.text:0000000000403822\n.text:0000000000403825\n.text:0000000000403829\n.text:0000000000403831\n.text:0000000000403834\n.text:0000000000403839\n.text:000000000040383b\n.text:000000000040383e\n.text:0000000000403840\n.text:0000000000403845\n.text:0000000000403848\n.text:000000000040384d\n.text:0000000000403850\n.text:0000000000403855\n.text:0000000000403859\n.text:000000000040385e\n.text:0000000000403860\n.text:0000000000403862\n.text:0000000000403868\n.text:000000000040386d\n.text:0000000000403872\n.text:0000000000403875\n.text:000000000040387a\n.text:000000000040387e\n.text:0000000000403883\n.text:0000000000403888\n.text:000000000040388a\n.text:000000000040388c\n.text:0000000000403891\n.text:0000000000403893\n.text:0000000000403896\n.text:000000000040389c\n.text:000000000040389f\n.text:00000000004038a5\n.text:00000000004038a8\n.text:00000000004038ae\n.text:00000000004038b3\n.text:00000000004038b7\n.text:00000000004038bd\n.text:00000000004038c0\n.text:00000000004038c3\n.text:00000000004038c7\n.text:00000000004038ca\n.text:00000000004038cc\n.text:00000000004038cf\n.text:00000000004038d5\n.text:00000000004038da\n.text:00000000004038df\n.text:00000000004038e5\n.text:00000000004038e8\n.text:00000000004038ee\n.text:00000000004038f1\n.text:00000000004038f3\n.text:00000000004038f5\n.text:00000000004038f7\n.text:00000000004038f9\n.text:00000000004038fc\n.text:00000000004038fe\n.text:0000000000403903\n.text:0000000000403908\n.text:000000000040390b\n.text:000000000040390d\n.text:0000000000403912\n.text:0000000000403917\n.text:000000000040391a\n.text:000000000040391c\n.text:0000000000403921\n.text:0000000000403925\n.text:0000000000403928\n.text:000000000040392b\n.text:000000000040392d\n.text:0000000000403932\n.text:0000000000403937\n.text:0000000000403939\n.text:000000000040393c\n.text:000000000040393f\n.text:0000000000403945\n.text:0000000000403949\n.text:000000000040394c\n.text:0000000000403952\n.text:0000000000403956\n.text:0000000000403959\n.text:000000000040395c\n.text:0000000000403962\n.text:0000000000403965\n.text:0000000000403967\n.text:000000000040396c\n.text:0000000000403971\n.text:0000000000403974\n.text:0000000000403976\n.text:000000000040397b\n.text:000000000040397f\n.text:0000000000403984\n.text:000000000040398a\n.text:000000000040398f\n.text:0000000000403991\n.text:0000000000403996\n.text:000000000040399c\n.text:000000000040399e\n.text:00000000004039a0\n.text:00000000004039a2\n.text:00000000004039a4\n.text:00000000004039a9\n.text:00000000004039af\n.text:00000000004039b1\n.text:00000000004039b3\n.text:00000000004039b8\n.text:00000000004039be\n.text:00000000004039c0\n.text:00000000004039c2\n.text:00000000004039c7\n.text:00000000004039c9\n.text:00000000004039cf\n.text:00000000004039d4\n.text:00000000004039da\n.text:00000000004039dd\n.text:00000000004039e0\n.text:00000000004039e6\n.text:00000000004039eb\n.text:00000000004039ee\n.text:00000000004039f1\n.text:00000000004039f7\n.text:00000000004039fa\n.text:0000000000403a00\n.text:0000000000403a03\n.text:0000000000403a05\n.text:0000000000403a0a\n.text:0000000000403a0f\n.text:0000000000403a12\n.text:0000000000403a14\n.text:0000000000403a19\n.text:0000000000403a1e\n.text:0000000000403a21\n.text:0000000000403a23\n.text:0000000000403a28\n.text:0000000000403a2c\n.text:0000000000403a2e\n.text:0000000000403a33\n.text:0000000000403a36\n.text:0000000000403a39\n.text:0000000000403a3f\n.text:0000000000403a42\n.text:0000000000403a48\n.text:0000000000403a4b\n.text:0000000000403a51\n.text:0000000000403a56\n.text:0000000000403a59\n.text:0000000000403a5f\n.text:0000000000403a62\n.text:0000000000403a68\n.text:0000000000403a6b\n.text:0000000000403a6d\n.text:0000000000403a71\n.text:0000000000403a77\n.text:0000000000403a7c\n.text:0000000000403a80\n.text:0000000000403a89\n.text:0000000000403a8f\n.text:0000000000403a94\n.text:0000000000403a99\n.text:0000000000403a9e\n.text:0000000000403aa1\n.text:0000000000403aa6\n.text:0000000000403aa9\n.text:0000000000403aac\n.text:0000000000403ab1\n.text:0000000000403ab6\n.text:0000000000403aba\n.text:0000000000403abf\n.text:0000000000403ac4\n.text:0000000000403ac8\n.text:0000000000403aca\n.text:0000000000403acf\n.text:0000000000403ad5\n.text:0000000000403ad8\n.text:0000000000403ada\n.text:0000000000403add\n.text:0000000000403ae0\n.text:0000000000403ae6\n.text:0000000000403aeb\n.text:0000000000403aee\n.text:0000000000403af1\n.text:0000000000403af4\n.text:0000000000403af7\n.text:0000000000403af9\n.text:0000000000403afd\n.text:0000000000403aff\n.text:0000000000403b04\n.text:0000000000403b09\n.text:0000000000403b0f\n.text:0000000000403b20\n.text:0000000000403b25\n.text:0000000000403b27\n.text:0000000000403b2a\n.text:0000000000403b2c\n.text:0000000000403b2f\n.text:0000000000403b31\n.text:0000000000403b34\n.text:0000000000403b36\n.text:0000000000403b3b\n.text:0000000000403b40\n.text:0000000000403b43\n.text:0000000000403b45\n.text:0000000000403b4a\n.text:0000000000403b4e\n.text:0000000000403b56\n.text:0000000000403b59\n.text:0000000000403b5c\n.text:0000000000403b5e\n.text:0000000000403b62\n.text:0000000000403b70\n.text:0000000000403b74\n.text:0000000000403b7a\n.text:0000000000403b7d\n.text:0000000000403b7f\n.text:0000000000403b84\n.text:0000000000403b87\n.text:0000000000403b89\n.text:0000000000403b90\n.text:0000000000403b93\n.text:0000000000403b98\n.text:0000000000403b9b\n.text:0000000000403ba0\n.text:0000000000403ba2\n.text:0000000000403ba5\n.text:0000000000403bab\n.text:0000000000403bae\n.text:0000000000403bb0\n.text:0000000000403bb4\n.text:0000000000403bb6\n.text:0000000000403bb8\n.text:0000000000403bbb\n.text:0000000000403bbd\n.text:0000000000403bc2\n.text:0000000000403bc7\n.text:0000000000403bca\n.text:0000000000403bcc\n.text:0000000000403bd1\n.text:0000000000403bd6\n.text:0000000000403bd9\n.text:0000000000403bdb\n.text:0000000000403be0\n.text:0000000000403be4\n.text:0000000000403be6\n.text:0000000000403bea\n.text:0000000000403bed\n.text:0000000000403bef\n.text:0000000000403bf4\n.text:0000000000403bf9\n.text:0000000000403bfc\n.text:0000000000403bfe\n.text:0000000000403c01\n.text:0000000000403c04\n.text:0000000000403c07\n.text:0000000000403c0b\n.text:0000000000403c10\n.text:0000000000403c13\n.text:0000000000403c15\n.text:0000000000403c18\n.text:0000000000403c1b\n.text:0000000000403c1e\n.text:0000000000403c21\n.text:0000000000403c25\n.text:0000000000403c29\n.text:0000000000403c2d\n.text:0000000000403c31\n.text:0000000000403c33\n.text:0000000000403c37\n.text:0000000000403c3a\n.text:0000000000403c40\n.text:0000000000403c44\n.text:0000000000403c48\n.text:0000000000403c4e\n.text:0000000000403c53\n.text:0000000000403c56\n.text:0000000000403c59\n.text:0000000000403c5e\n.text:0000000000403c61\n.text:0000000000403c63\n.text:0000000000403c66\n.text:0000000000403c6d\n.text:0000000000403c73\n.text:0000000000403c75\n.text:0000000000403c79\n.text:0000000000403c7f\n.text:0000000000403c84\n.text:0000000000403c89\n.text:0000000000403c8f\n.text:0000000000403c92\n.text:0000000000403c94\n.text:0000000000403c99\n.text:0000000000403c9f\n.text:0000000000403ca4\n.text:0000000000403ca6\n.text:0000000000403cab\n.text:0000000000403cb1\n.text:0000000000403cb3\n.text:0000000000403cb6\n.text:0000000000403cba\n.text:0000000000403cc0\n.text:0000000000403cc5\n.text:0000000000403cd1\n.text:0000000000403cd5\n.text:0000000000403cd7\n.text:0000000000403cda\n.text:0000000000403cdf\n.text:0000000000403ce4\n.text:0000000000403ce7\n.text:0000000000403ceb\n.text:0000000000403cf0\n.text:0000000000403cf2\n.text:0000000000403cf6\n.text:0000000000403cf8\n.text:0000000000403d00\n.text:0000000000403d05\n.text:0000000000403d0a\n.text:0000000000403d0e\n.text:0000000000403d12\n.text:0000000000403d1a\n.text:0000000000403d1d\n.text:0000000000403d22\n.text:0000000000403d25\n.text:0000000000403d28\n.text:0000000000403d2d\n.text:0000000000403d30\n.text:0000000000403d33\n.text:0000000000403d39\n.text:0000000000403d3d\n.text:0000000000403d47\n.text:0000000000403d4d\n.text:0000000000403d51\n.text:0000000000403d56\n.text:0000000000403d5c\n.text:0000000000403d60\n.text:0000000000403d63\n.text:0000000000403d67\n.text:0000000000403d69\n.text:0000000000403d6e\n.text:0000000000403d73\n.text:0000000000403d77\n.text:0000000000403d79\n.text:0000000000403d7e\n.text:0000000000403d83\n.text:0000000000403d87\n.text:0000000000403d8c\n.text:0000000000403d90\n.text:0000000000403d94\n.text:0000000000403d97\n.text:0000000000403d9a\n.text:0000000000403d9c\n.text:0000000000403da0\n.text:0000000000403da6\n.text:0000000000403da9\n.text:0000000000403dac\n.text:0000000000403dae\n.text:0000000000403db2\n.text:0000000000403db7\n.text:0000000000403db9\n.text:0000000000403dbb\n.text:0000000000403dc3\n.text:0000000000403dc8\n.text:0000000000403dcb\n.text:0000000000403dd3\n.text:0000000000403dd6\n.text:0000000000403dd9\n.text:0000000000403dde\n.text:0000000000403de1\n.text:0000000000403de3\n.text:0000000000403de8\n.text:0000000000403ded\n.text:0000000000403df3\n.text:0000000000403df8\n.text:0000000000403dfb\n.text:0000000000403e00\n.text:0000000000403e06\n.text:0000000000403e0b\n.text:0000000000403e10\n.text:0000000000403e16\n.text:0000000000403e1a\n.text:0000000000403e1d\n.text:0000000000403e23\n.text:0000000000403e29\n.text:0000000000403e2f\n.text:0000000000403e34\n.text:0000000000403e36\n.text:0000000000403e39\n.text:0000000000403e3f\n.text:0000000000403e43\n.text:0000000000403e45\n.text:0000000000403e4f\n.text:0000000000403e53\n.text:0000000000403e59\n.text:0000000000403e5c\n.text:0000000000403e5e\n.text:0000000000403e64\n.text:0000000000403e67\n.text:0000000000403e69\n.text:0000000000403e6e\n.text:0000000000403e73\n.text:0000000000403e76\n.text:0000000000403e7a\n.text:0000000000403e7c\n.text:0000000000403e81\n.text:0000000000403e86\n.text:0000000000403e89\n.text:0000000000403e8b\n.text:0000000000403e90\n.text:0000000000403e95\n.text:0000000000403e98\n.text:0000000000403e9a\n.text:0000000000403e9f\n.text:0000000000403ea3\n.text:0000000000403ea5\n.text:0000000000403ea8\n.text:0000000000403eab\n.text:0000000000403eb0\n.text:0000000000403eb6\n.text:0000000000403eb8\n.text:0000000000403ebd\n.text:0000000000403ec2\n.text:0000000000403ec8\n.text:0000000000403ed0\n.text:0000000000403ed5\n.text:0000000000403ed7\n.text:0000000000403edc\n.text:0000000000403edf\n.text:0000000000403ee1\n.text:0000000000403ee4\n.text:0000000000403ee6\n.text:0000000000403ee9\n.text:0000000000403eec\n.text:0000000000403eef\n.text:0000000000403ef1\n.text:0000000000403ef9\n.text:0000000000403efc\n.text:0000000000403efe\n.text:0000000000403f00\n.text:0000000000403f10\n.text:0000000000403f13\n.text:0000000000403f15\n.text:0000000000403f18\n.text:0000000000403f1e\n.text:0000000000403f21\n.text:0000000000403f23\n.text:0000000000403f25\n.text:0000000000403f27\n.text:0000000000403f29\n.text:0000000000403f2c\n.text:0000000000403f2e\n.text:0000000000403f33\n.text:0000000000403f38\n.text:0000000000403f3b\n.text:0000000000403f3d\n.text:0000000000403f42\n.text:0000000000403f47\n.text:0000000000403f4a\n.text:0000000000403f4c\n.text:0000000000403f51\n.text:0000000000403f55\n.text:0000000000403f58\n.text:0000000000403f5b\n.text:0000000000403f5d\n.text:0000000000403f62\n.text:0000000000403f65\n.text:0000000000403f68\n.text:0000000000403f6a\n.text:0000000000403f70\n.text:0000000000403f74\n.text:0000000000403f76\n.text:0000000000403f78\n.text:0000000000403f7a\n.text:0000000000403f7d\n.text:0000000000403f7f\n.text:0000000000403f84\n.text:0000000000403f89\n.text:0000000000403f8c\n.text:0000000000403f8e\n.text:0000000000403f93\n.text:0000000000403f97\n.text:0000000000403f99\n.text:0000000000403f9c\n.text:0000000000403f9e\n.text:0000000000403fa2\n.text:0000000000403fa5\n.text:0000000000403fa8\n.text:0000000000403fac\n.text:0000000000403fb2\n.text:0000000000403fb7\n.text:0000000000403fbf\n.text:0000000000403fc4\n.text:0000000000403fc6\n.text:0000000000403fce\n.text:0000000000403fd3\n.text:0000000000403fd5\n.text:0000000000403fda\n.text:0000000000403fdf\n.text:0000000000403fe3\n.text:0000000000403fe5\n.text:0000000000403fea\n.text:0000000000403fed\n.text:0000000000403ff0\n.text:0000000000403ff2\n.text:0000000000403ffa\n.text:0000000000403ffc\n.text:0000000000404004\n.text:0000000000404009\n.text:000000000040400d\n.text:0000000000404012\n.text:0000000000404017\n.text:000000000040401b\n.text:0000000000404020\n.text:0000000000404025\n.text:0000000000404029\n.text:000000000040402d\n.text:0000000000404033\n.text:0000000000404038\n.text:0000000000404040\n.text:0000000000404042\n.text:0000000000404044\n.text:0000000000404048\n.text:000000000040404d\n.text:0000000000404053\n.text:0000000000404060\n.text:0000000000404063\n.text:0000000000404069\n.text:000000000040406c\n.text:000000000040406e\n.text:0000000000404071\n.text:0000000000404073\n.text:0000000000404076\n.text:0000000000404078\n.text:0000000000404080\n.text:0000000000404086\n.text:000000000040408a\n.text:000000000040408d\n.text:0000000000404091\n.text:0000000000404096\n.text:000000000040409a\n.text:000000000040409e\n.text:00000000004040a1\n.text:00000000004040a4\n.text:00000000004040a7\n.text:00000000004040ab\n.text:00000000004040af\n.text:00000000004040b1\n.text:00000000004040b6\n.text:00000000004040ba\n.text:00000000004040bd\n.text:00000000004040c0\n.text:00000000004040c7\n.text:00000000004040c8\n.text:00000000004040ca\n.text:00000000004040cc\n.text:00000000004040ce\n.text:00000000004040d0\n.text:00000000004040d1\n.text:00000000004040d2\n.text:00000000004040da\n.text:00000000004040dd\n.text:00000000004040df\n.text:00000000004040e2\n.text:00000000004040e4\n.text:00000000004040e6\n.text:00000000004040e8\n.text:00000000004040ea\n.text:00000000004040ed\n.text:00000000004040f0\n.text:00000000004040f3\n.text:00000000004040f5\n.text:00000000004040f9\n.text:00000000004040fc\n.text:00000000004040ff\n.text:0000000000404102\n.text:0000000000404104\n.text:0000000000404106\n.text:0000000000404109\n.text:000000000040410b\n.text:0000000000404110\n.text:0000000000404112\n.text:0000000000404117\n.text:000000000040411c\n.text:000000000040411f\n.text:0000000000404121\n.text:0000000000404126\n.text:0000000000404129\n.text:000000000040412e\n.text:0000000000404131\n.text:0000000000404137\n.text:000000000040413d\n.text:0000000000404140\n.text:0000000000404145\n'
p153
tp154
sS'ttyname'
p155
(S'\n__stdcall ttyname(int __fd)\n'
p156
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * ttyname(int __fd)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_ttyname_00609190)();\u000a  return pcVar1;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x00609190]\n'
p158
S'ff 25 3a 79 20 00\n'
p159
S'.plt:0000000000401850\n'
p160
tp161
sS'set_quoting_style'
p162
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p163
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p164
S'TEST RDI,RDI\nMOV EAX,0x6093c0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p165
S'48 85 ff\nb8 c0 93 60 00\n48 0f 45 c7\n89 30\nc3\n'
p166
S'.text:00000000004033f0\n.text:00000000004033f3\n.text:00000000004033f8\n.text:00000000004033fc\n.text:00000000004033fe\n'
p167
tp168
sS'getaddrinfo'
p169
(S'\n__stdcall getaddrinfo(char * __name, char * __service, addrinfo * __req, addrinfo * * __pai)\n'
p170
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getaddrinfo(char *__name,char *__service,addrinfo *__req,addrinfo **__pai)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getaddrinfo_00609208)();\u000a  return iVar1;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x00609208]\n'
p172
S'ff 25 c2 78 20 00\n'
p173
S'.plt:0000000000401940\n'
p174
tp175
sS'extract_trimmed_name'
p176
(S'\n__stdcall extract_trimmed_name(STRUCT_UTMP * ut)\n'
p177
V\u000achar * extract_trimmed_name(STRUCT_UTMP *ut)\u000a\u000a{\u000a  char *__dest;\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  __dest = (char *)xmalloc(0x21);\u000a  strncpy(__dest,ut->ut_user,0x20);\u000a  __dest[0x20] = 0;\u000a  sVar1 = strlen(__dest);\u000a  if (0 < (long)sVar1) {\u000a    pcVar2 = __dest + sVar1;\u000a    do {\u000a      if (pcVar2[-1] != ' ') {\u000a        return __dest;\u000a      }\u000a      pcVar2[-1] = 0;\u000a      pcVar2 = pcVar2 + -1;\u000a    } while (__dest < pcVar2);\u000a  }\u000a  return __dest;\u000a}\u000a\u000a
p178
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV EDI,0x21\nCALL 0x00405110\nMOV RBX,RAX\nLEA RSI,[R14 + 0x2c]\nMOV EDX,0x20\nMOV RDI,RBX\nCALL 0x004015c0\nMOV byte ptr [RBX + 0x20],0x0\nMOV RDI,RBX\nCALL 0x00401690\nTEST RAX,RAX\nJLE 0x00405372\nADD RAX,RBX\nNOP dword ptr [RAX]\nCMP byte ptr [RAX + -0x1],0x20\nJNZ 0x00405372\nMOV byte ptr [RAX + -0x1],0x0\nDEC RAX\nCMP RBX,RAX\nJC 0x00405360\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p179
S'41 56\n53\n50\n49 89 fe\nbf 21 00 00 00\ne8 df fd ff ff\n48 89 c3\n49 8d 76 2c\nba 20 00 00 00\n48 89 df\ne8 7b c2 ff ff\nc6 43 20 00\n48 89 df\ne8 3f c3 ff ff\n48 85 c0\n7e 1c\n48 01 d8\n0f 1f 80 00 00 00 00\n80 78 ff 20\n75 0c\nc6 40 ff 00\n48 ff c8\n48 39 c3\n72 ee\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p180
S'.text:0000000000405320\n.text:0000000000405322\n.text:0000000000405323\n.text:0000000000405324\n.text:0000000000405327\n.text:000000000040532c\n.text:0000000000405331\n.text:0000000000405334\n.text:0000000000405338\n.text:000000000040533d\n.text:0000000000405340\n.text:0000000000405345\n.text:0000000000405349\n.text:000000000040534c\n.text:0000000000405351\n.text:0000000000405354\n.text:0000000000405356\n.text:0000000000405359\n.text:0000000000405360\n.text:0000000000405364\n.text:0000000000405366\n.text:000000000040536a\n.text:000000000040536d\n.text:0000000000405370\n.text:0000000000405372\n.text:0000000000405375\n.text:0000000000405379\n.text:000000000040537a\n.text:000000000040537c\n'
p181
tp182
sS'print_boottime'
p183
(S'\n__stdcall print_boottime(STRUCT_UTMP * utmp_ent)\n'
p184
V\u000avoid print_boottime(STRUCT_UTMP *utmp_ent)\u000a\u000a{\u000a  char *pid;\u000a  char *exitstr;\u000a  \u000a  pid = (char *)dcgettext(0,"system boot",5);\u000a  exitstr = time_string(utmp_ent);\u000a  print_line((char *)0xffffffff,\u000a                          \u000a             "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a             + 0xca,(char *)0x20,(char *)0xffffffff,pid,exitstr);\u000a  return;\u000a}\u000a\u000a
p185
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x4068b4\nMOV EDX,0x5\nCALL 0x00401670\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00402e40\nMOV EDI,0xffffffff\nMOV ESI,0x4072c9\nMOV EDX,0x20\nMOV ECX,0xffffffff\nMOV R8,R14\nMOV R9,RAX\nPUSH 0x4072c9\nPUSH 0x4072c9\nPUSH 0x4072c9\nPUSH 0x4072c9\nCALL 0x00402b70\nADD RSP,0x28\nPOP RBX\nPOP R14\nRET\n'
p186
S'41 56\n53\n50\n48 89 fb\n31 ff\nbe b4 68 40 00\nba 05 00 00 00\ne8 28 ee ff ff\n49 89 c6\n48 89 df\ne8 ed 05 00 00\nbf ff ff ff ff\nbe c9 72 40 00\nba 20 00 00 00\nb9 ff ff ff ff\n4d 89 f0\n49 89 c1\n68 c9 72 40 00\n68 c9 72 40 00\n68 c9 72 40 00\n68 c9 72 40 00\ne8 ea 02 00 00\n48 83 c4 28\n5b\n41 5e\nc3\n'
p187
S'.text:0000000000402830\n.text:0000000000402832\n.text:0000000000402833\n.text:0000000000402834\n.text:0000000000402837\n.text:0000000000402839\n.text:000000000040283e\n.text:0000000000402843\n.text:0000000000402848\n.text:000000000040284b\n.text:000000000040284e\n.text:0000000000402853\n.text:0000000000402858\n.text:000000000040285d\n.text:0000000000402862\n.text:0000000000402867\n.text:000000000040286a\n.text:000000000040286d\n.text:0000000000402872\n.text:0000000000402877\n.text:000000000040287c\n.text:0000000000402881\n.text:0000000000402886\n.text:000000000040288a\n.text:000000000040288b\n.text:000000000040288d\n'
p188
tp189
sS'quotearg_n_style_colon'
p190
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p191
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p192
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00404520\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00403400\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x004042f0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p193
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p194
S'.text:00000000004046a0\n.text:00000000004046a1\n.text:00000000004046a3\n.text:00000000004046a4\n.text:00000000004046a8\n.text:00000000004046ab\n.text:00000000004046ad\n.text:00000000004046b2\n.text:00000000004046b5\n.text:00000000004046ba\n.text:00000000004046bf\n.text:00000000004046c4\n.text:00000000004046c7\n.text:00000000004046cc\n.text:00000000004046d3\n.text:00000000004046d5\n.text:00000000004046d8\n.text:00000000004046db\n.text:00000000004046e0\n.text:00000000004046e4\n.text:00000000004046e5\n.text:00000000004046e7\n.text:00000000004046e8\n'
p195
tp196
sS'read_utmp'
p197
(S'\n__stdcall read_utmp(char * file, size_t * n_entries, STRUCT_UTMP * * utmp_buf)\n'
p198
V\u000aint read_utmp(char *file,size_t *n_entries,STRUCT_UTMP **utmp_buf)\u000a\u000a{\u000a  _Bool _Var1;\u000a  utmpx *__src;\u000a  size_t sVar2;\u000a  STRUCT_UTMP *p;\u000a  size_t local_38;\u000a  \u000a  local_38 = 0;\u000a  utmpxname(file);\u000a  setutxent();\u000a  p = (STRUCT_UTMP *)0x0;\u000a  sVar2 = 0;\u000a  while( true ) {\u000a    __src = getutxent();\u000a    if (__src == (utmpx *)0x0) break;\u000a    _Var1 = desirable_utmp_entry((STRUCT_UTMP *)__src);\u000a    if (_Var1 != false) {\u000a      if (sVar2 == local_38) {\u000a        p = (STRUCT_UTMP *)x2nrealloc(p,&local_38,0x180);\u000a      }\u000a      memcpy(p + sVar2,__src,0x180);\u000a      sVar2 = sVar2 + 1;\u000a    }\u000a  }\u000a  endutxent();\u000a  *n_entries = sVar2;\u000a  *utmp_buf = p;\u000a  return 0;\u000a}\u000a\u000a
p199
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV EBP,ECX\nMOV R14,RDX\nMOV R15,RSI\nMOV qword ptr [RSP],0x0\nCALL 0x00401560\nCALL 0x004017a0\nXOR R13D,R13D\nXOR R12D,R12D\nJMP 0x004053d0\nLEA RDI,[R12 + R12*0x2]\nINC R12\nSHL RDI,0x7\nADD RDI,R13\nMOV EDX,0x180\nMOV RSI,RBX\nCALL 0x004017b0\nNOP dword ptr [RAX + RAX*0x1]\nCALL 0x004018b0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405406\nMOV RDI,RBX\nMOV ESI,EBP\nCALL 0x00405430\nTEST AL,AL\nJZ 0x004053d0\nCMP R12,qword ptr [RSP]\nJNZ 0x004053ad\nMOV EDX,0x180\nMOV RDI,R13\nMOV RSI,RSP\nCALL 0x00405180\nMOV R13,RAX\nJMP 0x004053ad\nCALL 0x00401640\nMOV qword ptr [R15],R12\nMOV qword ptr [R14],R13\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p200
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n89 cd\n49 89 d6\n49 89 f7\n48 c7 04 24 00 00 00 00\ne8 c0 c1 ff ff\ne8 fb c3 ff ff\n45 31 ed\n45 31 e4\neb 23\n4b 8d 3c 64\n49 ff c4\n48 c1 e7 07\n4c 01 ef\nba 80 01 00 00\n48 89 de\ne8 e8 c3 ff ff\n0f 1f 84 00 00 00 00 00\ne8 db c4 ff ff\n48 89 c3\n48 85 db\n74 29\n48 89 df\n89 ee\ne8 49 00 00 00\n84 c0\n74 e5\n4c 3b 24 24\n75 bc\nba 80 01 00 00\n4c 89 ef\n48 89 e6\ne8 7f fd ff ff\n49 89 c5\neb a7\ne8 35 c2 ff ff\n4d 89 27\n4d 89 2e\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p201
S'.text:0000000000405380\n.text:0000000000405381\n.text:0000000000405383\n.text:0000000000405385\n.text:0000000000405387\n.text:0000000000405389\n.text:000000000040538a\n.text:000000000040538b\n.text:000000000040538d\n.text:0000000000405390\n.text:0000000000405393\n.text:000000000040539b\n.text:00000000004053a0\n.text:00000000004053a5\n.text:00000000004053a8\n.text:00000000004053ab\n.text:00000000004053ad\n.text:00000000004053b1\n.text:00000000004053b4\n.text:00000000004053b8\n.text:00000000004053bb\n.text:00000000004053c0\n.text:00000000004053c3\n.text:00000000004053c8\n.text:00000000004053d0\n.text:00000000004053d5\n.text:00000000004053d8\n.text:00000000004053db\n.text:00000000004053dd\n.text:00000000004053e0\n.text:00000000004053e2\n.text:00000000004053e7\n.text:00000000004053e9\n.text:00000000004053eb\n.text:00000000004053ef\n.text:00000000004053f1\n.text:00000000004053f6\n.text:00000000004053f9\n.text:00000000004053fc\n.text:0000000000405401\n.text:0000000000405404\n.text:0000000000405406\n.text:000000000040540b\n.text:000000000040540e\n.text:0000000000405411\n.text:0000000000405413\n.text:0000000000405417\n.text:0000000000405418\n.text:000000000040541a\n.text:000000000040541c\n.text:000000000040541e\n.text:0000000000405420\n.text:0000000000405421\n'
p202
tp203
sS'print_initspawn'
p204
(S'\n__stdcall print_initspawn(STRUCT_UTMP * utmp_ent)\n'
p205
V\u000avoid print_initspawn(STRUCT_UTMP *utmp_ent)\u000a\u000a{\u000a  char *__ptr;\u000a  char *exitstr;\u000a  char pidstr [12];\u000a  undefined local_2c [12];\u000a  \u000a  __ptr = make_id_equals_comment(utmp_ent);\u000a  __sprintf_chk(local_2c,1,0xc,&DAT_00406869,(long)utmp_ent->ut_pid);\u000a  exitstr = time_string(utmp_ent);\u000a  print_line((char *)0xffffffff,\u000a                          \u000a             "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a             + 0xca,(char *)0x20,(char *)0x20,utmp_ent->ut_line,exitstr);\u000a  free(__ptr);\u000a  return;\u000a}\u000a\u000a
p206
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,RDI\nCALL 0x00402eb0\nMOV R14,RAX\nMOVSXD R8,dword ptr [RBX + 0x4]\nLEA R15,[RSP + 0xc]\nMOV ESI,0x1\nMOV EDX,0xc\nMOV ECX,0x406869\nXOR EAX,EAX\nMOV RDI,R15\nCALL 0x00401990\nLEA R12,[RBX + 0x8]\nMOV RDI,RBX\nCALL 0x00402e40\nMOV EDI,0xffffffff\nMOV ESI,0x4072c9\nMOV EDX,0x20\nMOV ECX,0x20\nMOV R8,R12\nMOV R9,RAX\nPUSH 0x4072c9\nPUSH R14\nPUSH R15\nPUSH 0x4072c9\nCALL 0x00402b70\nADD RSP,0x20\nMOV RDI,R14\nCALL 0x00401580\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p207
S'41 57\n41 56\n41 54\n53\n48 83 ec 18\n48 89 fb\ne8 ad 05 00 00\n49 89 c6\n4c 63 43 04\n4c 8d 7c 24 0c\nbe 01 00 00 00\nba 0c 00 00 00\nb9 69 68 40 00\n31 c0\n4c 89 ff\ne8 68 f0 ff ff\n4c 8d 63 08\n48 89 df\ne8 0c 05 00 00\nbf ff ff ff ff\nbe c9 72 40 00\nba 20 00 00 00\nb9 20 00 00 00\n4d 89 e0\n49 89 c1\n68 c9 72 40 00\n41 56\n41 57\n68 c9 72 40 00\ne8 0f 02 00 00\n48 83 c4 20\n4c 89 f7\ne8 13 ec ff ff\n48 83 c4 18\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p208
S'.text:00000000004028f0\n.text:00000000004028f2\n.text:00000000004028f4\n.text:00000000004028f6\n.text:00000000004028f7\n.text:00000000004028fb\n.text:00000000004028fe\n.text:0000000000402903\n.text:0000000000402906\n.text:000000000040290a\n.text:000000000040290f\n.text:0000000000402914\n.text:0000000000402919\n.text:000000000040291e\n.text:0000000000402920\n.text:0000000000402923\n.text:0000000000402928\n.text:000000000040292c\n.text:000000000040292f\n.text:0000000000402934\n.text:0000000000402939\n.text:000000000040293e\n.text:0000000000402943\n.text:0000000000402948\n.text:000000000040294b\n.text:000000000040294e\n.text:0000000000402953\n.text:0000000000402955\n.text:0000000000402957\n.text:000000000040295c\n.text:0000000000402961\n.text:0000000000402965\n.text:0000000000402968\n.text:000000000040296d\n.text:0000000000402971\n.text:0000000000402972\n.text:0000000000402974\n.text:0000000000402976\n.text:0000000000402978\n'
p209
tp210
sS'textdomain'
p211
(S'\n__stdcall textdomain()\n'
p212
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00609080)();\u000a  return;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x00609080]\n'
p214
S'ff 25 4a 7a 20 00\n'
p215
S'.plt:0000000000401630\n'
p216
tp217
sS'xmemdup'
p218
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p219
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p220
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00405110\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004017b0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p221
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 3c c5 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p222
S'.text:0000000000405250\n.text:0000000000405252\n.text:0000000000405254\n.text:0000000000405255\n.text:0000000000405258\n.text:000000000040525b\n.text:000000000040525e\n.text:0000000000405263\n.text:0000000000405266\n.text:0000000000405269\n.text:000000000040526c\n.text:000000000040526f\n.text:0000000000405274\n.text:0000000000405277\n.text:0000000000405278\n.text:000000000040527a\n.text:000000000040527c\n'
p223
tp224
sS'get_quoting_style'
p225
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p226
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p227
S'TEST RDI,RDI\nMOV EAX,0x6093c0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p228
S'48 85 ff\nb8 c0 93 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p229
S'.text:00000000004033e0\n.text:00000000004033e3\n.text:00000000004033e8\n.text:00000000004033ec\n.text:00000000004033ee\n'
p230
tp231
sS'ferror_unlocked'
p232
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_00609120)();\u000a  return iVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x00609120]\n'
p235
S'ff 25 aa 79 20 00\n'
p236
S'.plt:0000000000401770\n'
p237
tp238
sS'exit'
p239
(S'\n__stdcall exit(int __status)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006091e8)();\u000a  return;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x006091e8]\n'
p242
S'ff 25 e2 78 20 00\n'
p243
S'.plt:0000000000401900\n'
p244
tp245
sS'canon_host'
p246
(S'\n__stdcall canon_host(char * host)\n'
p247
V\u000achar * canon_host(char *host)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = canon_host_r(host,&last_cherror);\u000a  return pcVar1;\u000a}\u000a\u000a
p248
S'MOV ESI,0x609370\nJMP 0x00403080\n'
p249
S'be 70 93 60 00\neb 09\n'
p250
S'.text:0000000000403070\n.text:0000000000403075\n'
p251
tp252
sS'quote_mem'
p253
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p254
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p255
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004047b0\n'
p256
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p257
S'.text:00000000004047c0\n.text:00000000004047c3\n.text:00000000004047c6\n.text:00000000004047c8\n.text:00000000004047cb\n.text:00000000004047ce\n'
p258
tp259
sS'locale_charset'
p260
(S'\n__stdcall locale_charset()\n'
p261
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0040556d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0040556d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p262
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401820\nTEST RAX,RAX\nMOV R14D,0x4072c9\nCMOVNZ R14,RAX\nCALL 0x00405580\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00405545\nJMP 0x0040556d\nMOV RDI,RBX\nCALL 0x00401690\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401690\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0040556d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401790\nTEST EAX,EAX\nJZ 0x00405560\nCMP BPL,0x2a\nJNZ 0x00405520\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00405520\nMOV RDI,RBX\nCALL 0x00401690\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x407638\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p263
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 22 c3 ff ff\n48 85 c0\n41 be c9 72 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 68 c1 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 5a c1 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 40 c2 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 28 c1 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 38 76 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p264
S'.text:00000000004054f0\n.text:00000000004054f1\n.text:00000000004054f3\n.text:00000000004054f4\n.text:00000000004054f9\n.text:00000000004054fe\n.text:0000000000405501\n.text:0000000000405507\n.text:000000000040550b\n.text:0000000000405510\n.text:0000000000405513\n.text:0000000000405516\n.text:0000000000405519\n.text:000000000040551b\n.text:0000000000405520\n.text:0000000000405523\n.text:0000000000405528\n.text:000000000040552c\n.text:0000000000405531\n.text:0000000000405536\n.text:000000000040553b\n.text:0000000000405540\n.text:0000000000405543\n.text:0000000000405545\n.text:0000000000405548\n.text:000000000040554b\n.text:0000000000405550\n.text:0000000000405552\n.text:0000000000405554\n.text:0000000000405558\n.text:000000000040555a\n.text:000000000040555e\n.text:0000000000405560\n.text:0000000000405563\n.text:0000000000405568\n.text:000000000040556d\n.text:0000000000405571\n.text:0000000000405576\n.text:000000000040557a\n.text:000000000040557b\n.text:000000000040557d\n.text:000000000040557e\n'
p265
tp266
sS'set_program_name'
p267
(S'\n__stdcall set_program_name(char * argv0)\n'
p268
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p269
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00403371\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x004016e0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040335b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x406c3b\nMOV EDX,0x7\nCALL 0x004015d0\nTEST EAX,EAX\nJNZ 0x0040335b\nMOV ESI,0x406c43\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x004015d0\nTEST EAX,EAX\nJNZ 0x00403358\nADD R14,0x3\nMOV qword ptr [0x006092c0],R14\nMOV RBX,R14\nMOV qword ptr [0x006093b8],RBX\nMOV qword ptr [0x006092d8],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x006092e0]\nMOV EDI,0x406c03\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401910\nCALL 0x004015a0\n'
p270
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 d7 e3 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 3b 6c 40 00\nba 07 00 00 00\ne8 9d e2 ff ff\n85 c0\n75 24\nbe 43 6c 40 00\nba 03 00 00 00\n4c 89 f7\ne8 87 e2 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 68 5f 20 00\n4c 89 f3\n48 89 1d 56 60 20 00\n48 89 1d 6f 5f 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 68 5f 20 00\nbf 03 6c 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 84 e5 ff ff\ne8 0f e2 ff ff\n'
p271
S'.text:00000000004032f0\n.text:00000000004032f2\n.text:00000000004032f3\n.text:00000000004032f4\n.text:00000000004032f7\n.text:00000000004032fa\n.text:00000000004032fc\n.text:0000000000403301\n.text:0000000000403304\n.text:0000000000403309\n.text:000000000040330c\n.text:0000000000403310\n.text:0000000000403314\n.text:0000000000403317\n.text:000000000040331a\n.text:000000000040331e\n.text:0000000000403320\n.text:0000000000403324\n.text:0000000000403329\n.text:000000000040332e\n.text:0000000000403333\n.text:0000000000403335\n.text:0000000000403337\n.text:000000000040333c\n.text:0000000000403341\n.text:0000000000403344\n.text:0000000000403349\n.text:000000000040334b\n.text:000000000040334d\n.text:0000000000403351\n.text:0000000000403358\n.text:000000000040335b\n.text:0000000000403362\n.text:0000000000403369\n.text:000000000040336d\n.text:000000000040336e\n.text:0000000000403370\n.text:0000000000403371\n.text:0000000000403378\n.text:000000000040337d\n.text:0000000000403382\n.text:0000000000403387\n.text:000000000040338c\n'
p272
tp273
sS'fileno'
p274
(S'\n__stdcall fileno(FILE * __stream)\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00609158)();\u000a  return iVar1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x00609158]\n'
p277
S'ff 25 72 79 20 00\n'
p278
S'.plt:00000000004017e0\n'
p279
tp280
sS'quotearg_buffer'
p281
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p282
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p283
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x6093c0\nCMOVNZ RBP,R8\nCALL 0x004015b0\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00403510\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p284
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd c0 93 60 00\n49 0f 45 e8\ne8 f8 e0 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p285
S'.text:0000000000403490\n.text:0000000000403491\n.text:0000000000403493\n.text:0000000000403495\n.text:0000000000403497\n.text:0000000000403499\n.text:000000000040349a\n.text:000000000040349b\n.text:000000000040349e\n.text:00000000004034a1\n.text:00000000004034a4\n.text:00000000004034a7\n.text:00000000004034aa\n.text:00000000004034af\n.text:00000000004034b3\n.text:00000000004034b8\n.text:00000000004034bb\n.text:00000000004034bd\n.text:00000000004034c1\n.text:00000000004034c5\n.text:00000000004034c9\n.text:00000000004034cd\n.text:00000000004034d0\n.text:00000000004034d3\n.text:00000000004034d6\n.text:00000000004034d9\n.text:00000000004034dc\n.text:00000000004034df\n.text:00000000004034e3\n.text:00000000004034e4\n.text:00000000004034e9\n.text:00000000004034ed\n.text:00000000004034f1\n.text:00000000004034f3\n.text:00000000004034f7\n.text:00000000004034f8\n.text:00000000004034fa\n.text:00000000004034fc\n.text:00000000004034fe\n.text:0000000000403500\n.text:0000000000403501\n'
p286
tp287
sS'FUN_00401550'
p288
(S'\n__stdcall FUN_00401550()\n'
p289
V\u000avoid FUN_00401550(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00609010)();\u000a  return;\u000a}\u000a\u000a
p290
S'PUSH qword ptr [0x00609008]\nJMP qword ptr [0x00609010]\n'
p291
S'ff 35 b2 7a 20 00\nff 25 b4 7a 20 00\n'
p292
S'.plt:0000000000401550\n.plt:0000000000401556\n'
p293
tp294
sS'quotearg_colon'
p295
(S'\n__stdcall quotearg_colon(char * arg)\n'
p296
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p297
S'MOV ESI,0x3a\nJMP 0x00404670\n'
p298
S'be 3a 00 00 00\neb e9\n'
p299
S'.text:0000000000404680\n.text:0000000000404685\n'
p300
tp301
sS'mbrtowc'
p302
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006090c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x006090c0]\n'
p305
S'ff 25 0a 7a 20 00\n'
p306
S'.plt:00000000004016b0\n'
p307
tp308
sS'time_string'
p309
(S'\n__stdcall time_string(STRUCT_UTMP * utmp_ent)\n'
p310
V\u000achar * time_string(STRUCT_UTMP *utmp_ent)\u000a\u000a{\u000a  char buf [33];\u000a  tm *__tp;\u000a  char *pcVar1;\u000a  long local_10;\u000a  \u000a  local_10 = (long)(utmp_ent->ut_tv).tv_sec;\u000a  __tp = localtime(&local_10);\u000a  if (__tp == (tm *)0x0) {\u000a    pcVar1 = timetostr();\u000a  }\u000a  else {\u000a    pcVar1 = &ram0x00609330;\u000a    strftime((char *)0x609330,0x21,time_format,__tp);\u000a  }\u000a  return pcVar1;\u000a}\u000a\u000a
p311
S'PUSH RBX\nSUB RSP,0x10\nMOVSXD RAX,dword ptr [0x154 + RDI]\nMOV qword ptr [RSP + 0x8],RAX\nLEA RDI,[RSP + 0x8]\nCALL 0x00401590\nTEST RAX,RAX\nJZ 0x00402e80\nMOV RDX,qword ptr [0x00609300]\nMOV EBX,0x609330\nMOV EDI,0x609330\nMOV ESI,0x21\nMOV RCX,RAX\nCALL 0x004018a0\nJMP 0x00402e8d\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x00402ea0\nMOV RBX,RAX\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p312
S'53\n48 83 ec 10\n48 63 87 54 01 00 00\n48 89 44 24 08\n48 8d 7c 24 08\ne8 35 e7 ff ff\n48 85 c0\n74 20\n48 8b 15 99 64 20 00\nbb 30 93 60 00\nbf 30 93 60 00\nbe 21 00 00 00\n48 89 c1\ne8 22 ea ff ff\neb 0d\n48 8b 7c 24 08\ne8 16 00 00 00\n48 89 c3\n48 89 d8\n48 83 c4 10\n5b\nc3\n'
p313
S'.text:0000000000402e40\n.text:0000000000402e41\n.text:0000000000402e45\n.text:0000000000402e4c\n.text:0000000000402e51\n.text:0000000000402e56\n.text:0000000000402e5b\n.text:0000000000402e5e\n.text:0000000000402e60\n.text:0000000000402e67\n.text:0000000000402e6c\n.text:0000000000402e71\n.text:0000000000402e76\n.text:0000000000402e79\n.text:0000000000402e7e\n.text:0000000000402e80\n.text:0000000000402e85\n.text:0000000000402e8a\n.text:0000000000402e8d\n.text:0000000000402e90\n.text:0000000000402e94\n.text:0000000000402e95\n'
p314
tp315
sS'rpl_fflush'
p316
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p317
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00609170)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p318
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004058bd\nMOV RDI,RBX\nCALL 0x00401840\nTEST EAX,EAX\nJZ 0x004058bd\nMOV RDI,RBX\nCALL 0x004058d0\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401810\n'
p319
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 8f bf ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 4a bf ff ff\n'
p320
S'.text:00000000004058a0\n.text:00000000004058a1\n.text:00000000004058a4\n.text:00000000004058a7\n.text:00000000004058a9\n.text:00000000004058ac\n.text:00000000004058b1\n.text:00000000004058b3\n.text:00000000004058b5\n.text:00000000004058b8\n.text:00000000004058bd\n.text:00000000004058c0\n.text:00000000004058c1\n'
p321
tp322
sS'setlocale'
p323
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p324
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_006091a8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x006091a8]\n'
p326
S'ff 25 22 79 20 00\n'
p327
S'.plt:0000000000401880\n'
p328
tp329
sS'c_toupper'
p330
(S'\n__stdcall c_toupper()\n'
p331
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p332
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p333
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p334
S'.text:0000000000403060\n.text:0000000000403063\n.text:0000000000403066\n.text:0000000000403069\n.text:000000000040306c\n'
p335
tp336
sS'bindtextdomain'
p337
(S'\n__stdcall bindtextdomain()\n'
p338
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00609098)();\u000a  return;\u000a}\u000a\u000a
p339
S'JMP qword ptr [0x00609098]\n'
p340
S'ff 25 32 7a 20 00\n'
p341
S'.plt:0000000000401660\n'
p342
tp343
sS'set_char_quoting'
p344
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p345
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p346
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x6093c0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p347
S'89 f1\n48 85 ff\nbe c0 93 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p348
S'.text:0000000000403400\n.text:0000000000403402\n.text:0000000000403405\n.text:000000000040340a\n.text:000000000040340e\n.text:0000000000403410\n.text:0000000000403413\n.text:0000000000403417\n.text:000000000040341c\n.text:000000000040341f\n.text:0000000000403421\n.text:0000000000403423\n.text:0000000000403426\n.text:0000000000403428\n.text:000000000040342b\n.text:000000000040342d\n.text:0000000000403430\n.text:0000000000403435\n'
p349
tp350
sS'quotearg_n'
p351
(S'\n__stdcall quotearg_n(char * arg)\n'
p352
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p353
S'MOV RDX,-0x1\nMOV ECX,0x6093c0\nJMP 0x004042f0\n'
p354
S'48 c7 c2 ff ff ff ff\nb9 c0 93 60 00\neb 02\n'
p355
S'.text:00000000004042e0\n.text:00000000004042e7\n.text:00000000004042ec\n'
p356
tp357
sS'mbsinit'
p358
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p359
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_00609210)();\u000a  return iVar1;\u000a}\u000a\u000a
p360
S'JMP qword ptr [0x00609210]\n'
p361
S'ff 25 ba 78 20 00\n'
p362
S'.plt:0000000000401950\n'
p363
tp364
sS'dcgettext'
p365
(S'\n__stdcall dcgettext()\n'
p366
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_006090a0)();\u000a  return;\u000a}\u000a\u000a
p367
S'JMP qword ptr [0x006090a0]\n'
p368
S'ff 25 2a 7a 20 00\n'
p369
S'.plt:0000000000401670\n'
p370
tp371
sS'close_stream'
p372
(S'\n__stdcall close_stream(FILE * stream)\n'
p373
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p374
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401600\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401770\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00405820\nTEST EBP,EBP\nJZ 0x004054bb\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x004054df\nCALL 0x004015b0\nMOV dword ptr [RAX],0x0\nJMP 0x004054df\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x004054df\nTEST CL,CL\nJNZ 0x004054df\nCALL 0x004015b0\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p375
S'55\n41 56\n53\n48 89 fb\ne8 74 c1 ff ff\n49 89 c6\n48 89 df\ne8 d9 c2 ff ff\n89 c5\n48 89 df\ne8 7f 03 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 fd c0 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 de c0 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p376
S'.text:0000000000405480\n.text:0000000000405481\n.text:0000000000405483\n.text:0000000000405484\n.text:0000000000405487\n.text:000000000040548c\n.text:000000000040548f\n.text:0000000000405492\n.text:0000000000405497\n.text:0000000000405499\n.text:000000000040549c\n.text:00000000004054a1\n.text:00000000004054a3\n.text:00000000004054a5\n.text:00000000004054aa\n.text:00000000004054ac\n.text:00000000004054ae\n.text:00000000004054b3\n.text:00000000004054b9\n.text:00000000004054bb\n.text:00000000004054bd\n.text:00000000004054c0\n.text:00000000004054c2\n.text:00000000004054c4\n.text:00000000004054c7\n.text:00000000004054c9\n.text:00000000004054cb\n.text:00000000004054cd\n.text:00000000004054d2\n.text:00000000004054d4\n.text:00000000004054d7\n.text:00000000004054dc\n.text:00000000004054df\n.text:00000000004054e1\n.text:00000000004054e2\n.text:00000000004054e4\n.text:00000000004054e5\n'
p377
tp378
sS'quotearg_colon_mem'
p379
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p380
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p381
S'MOV EDX,0x3a\nJMP 0x00404600\n'
p382
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p383
S'.text:0000000000404690\n.text:0000000000404695\n'
p384
tp385
sS'quotearg_free'
p386
(S'\n__stdcall quotearg_free()\n'
p387
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p388
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x00609268]\nCMP dword ptr [0x00609270],0x2\nJC 0x0040428a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401580\nINC RBX\nMOV EAX,dword ptr [0x00609270]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00404270\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x609400\nCMP RDI,RAX\nJZ 0x004042b3\nCALL 0x00401580\nMOV qword ptr [0x00609278],0x100\nMOV qword ptr [0x00609280],0x609400\nMOV EAX,0x609278\nCMP R14,RAX\nJZ 0x004042d0\nMOV RDI,R14\nCALL 0x00401580\nMOV qword ptr [0x00609268],0x609278\nMOV dword ptr [0x00609270],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p389
S'41 57\n41 56\n53\n4c 8b 35 0c 50 20 00\n83 3d 0d 50 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 08 d3 ff ff\n48 ff c3\n8b 05 ef 4f 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 00 94 60 00\n48 39 c7\n74 1b\ne8 e3 d2 ff ff\n48 c7 05 d0 4f 20 00 00 01 00 00\n48 c7 05 cd 4f 20 00 00 94 60 00\nb8 78 92 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 bb d2 ff ff\n48 c7 05 98 4f 20 00 78 92 60 00\nc7 05 96 4f 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p390
S'.text:0000000000404250\n.text:0000000000404252\n.text:0000000000404254\n.text:0000000000404255\n.text:000000000040425c\n.text:0000000000404263\n.text:0000000000404265\n.text:0000000000404269\n.text:000000000040426e\n.text:0000000000404270\n.text:0000000000404273\n.text:0000000000404278\n.text:000000000040427b\n.text:0000000000404281\n.text:0000000000404285\n.text:0000000000404288\n.text:000000000040428a\n.text:000000000040428e\n.text:0000000000404293\n.text:0000000000404296\n.text:0000000000404298\n.text:000000000040429d\n.text:00000000004042a8\n.text:00000000004042b3\n.text:00000000004042b8\n.text:00000000004042bb\n.text:00000000004042bd\n.text:00000000004042c0\n.text:00000000004042c5\n.text:00000000004042d0\n.text:00000000004042da\n.text:00000000004042db\n.text:00000000004042dd\n.text:00000000004042df\n'
p391
tp392
sS'quotearg_mem'
p393
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p394
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p395
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004044b0\n'
p396
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p397
S'.text:00000000004044d0\n.text:00000000004044d3\n.text:00000000004044d6\n.text:00000000004044d8\n.text:00000000004044db\n.text:00000000004044de\n'
p398
tp399
sS'xcalloc'
p400
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p401
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p402
S'PUSH RAX\nCALL 0x004052d0\nTEST RAX,RAX\nJZ 0x0040523d\nPOP RCX\nRET\nCALL 0x004052a0\n'
p403
S'50\ne8 9a 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p404
S'.text:0000000000405230\n.text:0000000000405231\n.text:0000000000405236\n.text:0000000000405239\n.text:000000000040523b\n.text:000000000040523c\n.text:000000000040523d\n'
p405
tp406
sS'deregister_tm_clones'
p407
(S'\n__stdcall deregister_tm_clones()\n'
p408
V\u000a/* WARNING: Removing unreachable block (ram,0x004019e5) */\u000a/* WARNING: Removing unreachable block (ram,0x004019ef) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p409
S'MOV EAX,0x6092c7\nPUSH RBP\nSUB RAX,0x6092c0\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401a00\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401a00\nPOP RBP\nMOV EDI,0x6092c0\nJMP RAX\nPOP RBP\nRET\n'
p410
S'b8 c7 92 60 00\n55\n48 2d c0 92 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf c0 92 60 00\nff e0\n5d\nc3\n'
p411
S'.text:00000000004019d0\n.text:00000000004019d5\n.text:00000000004019d6\n.text:00000000004019dc\n.text:00000000004019e0\n.text:00000000004019e3\n.text:00000000004019e5\n.text:00000000004019ea\n.text:00000000004019ed\n.text:00000000004019ef\n.text:00000000004019f0\n.text:00000000004019f5\n.text:0000000000401a00\n.text:0000000000401a01\n'
p412
tp413
sS'clear_ungetc_buffer_preserving_position'
p414
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p415
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p416
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x004058d7\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x004058f0\n'
p417
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p418
S'.text:00000000004058d0\n.text:00000000004058d4\n.text:00000000004058d6\n.text:00000000004058d7\n.text:00000000004058d9\n.text:00000000004058de\n'
p419
tp420
sS'print_user'
p421
(S'\n__stdcall print_user(STRUCT_UTMP * utmp_ent, time_t boottime)\n'
p422
V\u000avoid print_user(STRUCT_UTMP *utmp_ent,time_t boottime)\u000a\u000a{\u000a  ulong uVar1;\u000a  char cVar2;\u000a  size_t sVar3;\u000a  char *hoststr;\u000a  size_t hostlen;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  size_t sVar6;\u000a  size_t sVar7;\u000a  char *__s;\u000a  char *__s_00;\u000a  undefined4 *dest;\u000a  char cVar8;\u000a  char *src;\u000a  char idlestr [7];\u000a  char pidstr [12];\u000a  char line [38];\u000a  char ut_host [257];\u000a  undefined local_217 [7];\u000a  char *local_210;\u000a  undefined local_204 [12];\u000a  undefined4 local_1f8;\u000a  undefined2 local_1f4;\u000a  stat local_1c8;\u000a  char local_138 [264];\u000a  \u000a  __sprintf_chk(local_204,1,0xc,&DAT_00406869,(long)utmp_ent->ut_pid);\u000a  src = utmp_ent->ut_line;\u000a  if (utmp_ent->ut_line[0] == '/') {\u000a    dest = &local_1f8;\u000a  }\u000a  else {\u000a    dest = (undefined4 *)((long)&local_1f4 + 1);\u000a    local_1f4 = 0x2f;\u000a    local_1f8 = 0x7665642f;\u000a  }\u000a  stzncpy((char *)dest,src);\u000a  iVar5 = stat((char *)&local_1f8,(stat *)&local_1c8);\u000a  cVar8 = '?';\u000a  if (iVar5 == 0) {\u000a    _Var4 = is_tty_writable(&local_1c8);\u000a    cVar8 = '+';\u000a    if (_Var4 == false) {\u000a      cVar8 = '-';\u000a    }\u000a    if (local_1c8.st_atim.tv_sec != 0) {\u000a      __s = idle_string(local_1c8.st_atim.tv_sec,boottime);\u000a      __sprintf_chk(local_217,1,7,&DAT_0040686d,6,__s);\u000a      cVar2 = utmp_ent->ut_host[0];\u000a      goto joined_r0x004024ce;\u000a    }\u000a  }\u000a  __sprintf_chk(local_217,1,7,&DAT_00406872);\u000a  cVar2 = utmp_ent->ut_host[0];\u000ajoined_r0x004024ce:\u000a  if (cVar2 == 0) {\u000a    if (hostlen == 0) {\u000a      hostlen = 1;\u000a      free(hoststr);\u000a      hoststr = (char *)xmalloc(hostlen);\u000a    }\u000a    *hoststr = 0;\u000a  }\u000a  else {\u000a    stzncpy(local_138,utmp_ent->ut_host);\u000a    __s = strchr(local_138,0x3a);\u000a    if (__s == (char *)0x0) {\u000a      __s_00 = (char *)0x0;\u000a    }\u000a    else {\u000a      __s_00 = __s + 1;\u000a      *__s = 0;\u000a    }\u000a    if ((local_138[0] == 0) || (do_lookup != 1)) {\u000a      __s = (char *)0x0;\u000a      local_210 = src;\u000a    }\u000a    else {\u000a      local_210 = src;\u000a      __s = canon_host(local_138);\u000a    }\u000a    sVar3 = hostlen;\u000a    if (__s == (char *)0x0) {\u000a      __s = local_138;\u000a    }\u000a    sVar6 = strlen(__s);\u000a    if (__s_00 == (char *)0x0) {\u000a      if (sVar3 < sVar6 + 3) {\u000a        hostlen = sVar6 + 3;\u000a        free(hoststr);\u000a        hoststr = (char *)xmalloc(hostlen);\u000a      }\u000a      __sprintf_chk(hoststr,1,0xffffffffffffffff,&DAT_0040687e,__s);\u000a    }\u000a    else {\u000a      sVar7 = strlen(__s_00);\u000a      uVar1 = sVar6 + 4 + sVar7;\u000a      if (sVar3 < uVar1) {\u000a        hostlen = uVar1;\u000a        free(hoststr);\u000a        hoststr = (char *)xmalloc(hostlen);\u000a      }\u000a      __sprintf_chk(hoststr,1,0xffffffffffffffff,"(%s:%s)",__s,__s_00);\u000a    }\u000a    src = local_210;\u000a    if (__s != local_138) {\u000a      free(__s);\u000a    }\u000a  }\u000a  __s = time_string(utmp_ent);\u000a  print_line((char *)0x20,utmp_ent->ut_user,(char *)(ulong)(uint)(int)cVar8,(char *)0x20,src,__s);\u000a  return;\u000a}\u000a\u000a
p423
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x1e8\nMOV RBX,RSI\nMOV R13,RDI\nMOVSXD R8,dword ptr [R13 + 0x4]\nLEA R14,[RSP + 0x14]\nMOV ESI,0x1\nMOV EDX,0xc\nMOV ECX,0x406869\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401990\nLEA R15,[R13 + 0x8]\nCMP byte ptr [R13 + 0x8],0x2f\nJNZ 0x0040241b\nLEA RDI,[RSP + 0x20]\nJMP 0x0040242f\nLEA RDI,[RSP + 0x25]\nMOV word ptr [RSP + 0x24],0x2f\nMOV dword ptr [RSP + 0x20],0x7665642f\nMOV EDX,0x20\nMOV RSI,R15\nCALL 0x00402d40\nLEA RDI,[RSP + 0x20]\nLEA RSI,[RSP + 0x50]\nCALL 0x00405a10\nMOV R12B,0x3f\nTEST EAX,EAX\nJZ 0x00402479\nLEA RDI,[RSP + 0x1]\nMOV ESI,0x1\nMOV EDX,0x7\nMOV ECX,0x406872\nXOR EAX,EAX\nCALL 0x00401990\nCMP byte ptr [R13 + 0x4c],0x0\nJNZ 0x004024d0\nJMP 0x0040250a\nLEA RDI,[RSP + 0x50]\nCALL 0x00402d70\nTEST AL,AL\nMOV R12B,0x2b\nJNZ 0x0040248d\nMOV R12B,0x2d\nMOV RDI,qword ptr [0x98 + RSP]\nTEST RDI,RDI\nJZ 0x00402452\nMOV RSI,RBX\nCALL 0x00402d80\nMOV RBP,RAX\nLEA RDI,[RSP + 0x1]\nMOV ESI,0x1\nMOV EDX,0x7\nMOV ECX,0x40686d\nMOV R8D,0x6\nXOR EAX,EAX\nMOV R9,RBP\nCALL 0x00401990\nCMP byte ptr [R13 + 0x4c],0x0\nJZ 0x0040250a\nMOV byte ptr [RSP],R12B\nLEA RSI,[R13 + 0x4c]\nLEA R12,[0xe0 + RSP]\nMOV EDX,0x100\nMOV RDI,R12\nCALL 0x00402d40\nMOV ESI,0x3a\nMOV RDI,R12\nCALL 0x004016c0\nTEST RAX,RAX\nJZ 0x0040254d\nMOV RBP,RAX\nINC RBP\nMOV byte ptr [RAX],0x0\nJMP 0x0040254f\nCMP qword ptr [0x00609318],0x0\nJNZ 0x0040253e\nMOV qword ptr [0x00609318],0x1\nMOV RDI,qword ptr [0x00609310]\nCALL 0x00401580\nMOV RDI,qword ptr [0x00609318]\nCALL 0x00405110\nMOV qword ptr [0x00609310],RAX\nMOV RAX,qword ptr [0x00609310]\nMOV byte ptr [RAX],0x0\nJMP 0x00402664\nXOR EBP,EBP\nCMP byte ptr [0xe0 + RSP],0x0\nMOV qword ptr [RSP + 0x8],R15\nJZ 0x00402579\nCMP byte ptr [0x006092fe],0x1\nJNZ 0x00402579\nLEA RDI,[0xe0 + RSP]\nCALL 0x00403070\nMOV RBX,RAX\nJMP 0x0040257b\nXOR EBX,EBX\nTEST RBX,RBX\nCMOVZ RBX,R12\nMOV R15,qword ptr [0x00609318]\nMOV RDI,RBX\nCALL 0x00401690\nMOV R14,RAX\nTEST RBP,RBP\nJZ 0x004025f8\nMOV RDI,RBP\nCALL 0x00401690\nLEA RAX,[R14 + RAX*0x1 + 0x4]\nCMP R15,RAX\nJNC 0x004025d1\nMOV qword ptr [0x00609318],RAX\nMOV RDI,qword ptr [0x00609310]\nCALL 0x00401580\nMOV RDI,qword ptr [0x00609318]\nCALL 0x00405110\nMOV qword ptr [0x00609310],RAX\nMOV RDI,qword ptr [0x00609310]\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x406876\nXOR EAX,EAX\nMOV R8,RBX\nMOV R9,RBP\nCALL 0x00401990\nJMP 0x00402649\nADD R14,0x3\nCMP R15,R14\nJNC 0x00402627\nMOV qword ptr [0x00609318],R14\nMOV RDI,qword ptr [0x00609310]\nCALL 0x00401580\nMOV RDI,qword ptr [0x00609318]\nCALL 0x00405110\nMOV qword ptr [0x00609310],RAX\nMOV RDI,qword ptr [0x00609310]\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x40687e\nXOR EAX,EAX\nMOV R8,RBX\nCALL 0x00401990\nLEA R14,[RSP + 0x14]\nMOV R15,qword ptr [RSP + 0x8]\nCMP RBX,R12\nJZ 0x00402660\nMOV RDI,RBX\nCALL 0x00401580\nMOV R12B,byte ptr [RSP]\nLEA RBX,[R13 + 0x2c]\nMOV RDI,R13\nCALL 0x00402e40\nMOV RCX,qword ptr [0x00609310]\nTEST RCX,RCX\nMOV EBP,0x4072c9\nCMOVNZ RBP,RCX\nLEA R10,[RSP + 0x1]\nMOVSX EDX,R12B\nMOV EDI,0x20\nMOV ECX,0x20\nMOV RSI,RBX\nMOV R8,R15\nMOV R9,RAX\nPUSH 0x4072c9\nPUSH RBP\nPUSH R14\nPUSH R10\nCALL 0x00402b70\nADD RSP,0x208\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p424
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec e8 01 00 00\n48 89 f3\n49 89 fd\n4d 63 45 04\n4c 8d 74 24 14\nbe 01 00 00 00\nba 0c 00 00 00\nb9 69 68 40 00\n31 c0\n4c 89 f7\ne8 87 f5 ff ff\n4d 8d 7d 08\n41 80 7d 08 2f\n75 07\n48 8d 7c 24 20\neb 14\n48 8d 7c 24 25\n66 c7 44 24 24 2f 00\nc7 44 24 20 2f 64 65 76\nba 20 00 00 00\n4c 89 fe\ne8 04 09 00 00\n48 8d 7c 24 20\n48 8d 74 24 50\ne8 c5 35 00 00\n41 b4 3f\n85 c0\n74 27\n48 8d 7c 24 01\nbe 01 00 00 00\nba 07 00 00 00\nb9 72 68 40 00\n31 c0\ne8 23 f5 ff ff\n41 80 7d 4c 00\n75 5c\ne9 91 00 00 00\n48 8d 7c 24 50\ne8 ed 08 00 00\n84 c0\n41 b4 2b\n75 03\n41 b4 2d\n48 8b bc 24 98 00 00 00\n48 85 ff\n74 b8\n48 89 de\ne8 de 08 00 00\n48 89 c5\n48 8d 7c 24 01\nbe 01 00 00 00\nba 07 00 00 00\nb9 6d 68 40 00\n41 b8 06 00 00 00\n31 c0\n49 89 e9\ne8 c7 f4 ff ff\n41 80 7d 4c 00\n74 3a\n44 88 24 24\n49 8d 75 4c\n4c 8d a4 24 e0 00 00 00\nba 00 01 00 00\n4c 89 e7\ne8 53 08 00 00\nbe 3a 00 00 00\n4c 89 e7\ne8 c6 f1 ff ff\n48 85 c0\n74 4e\n48 89 c5\n48 ff c5\nc6 00 00\neb 45\n48 83 3d 06 6e 20 00 00\n75 2a\n48 c7 05 f9 6d 20 00 01 00 00 00\n48 8b 3d ea 6d 20 00\ne8 55 f0 ff ff\n48 8b 3d e6 6d 20 00\ne8 d9 2b 00 00\n48 89 05 d2 6d 20 00\n48 8b 05 cb 6d 20 00\nc6 00 00\ne9 17 01 00 00\n31 ed\n80 bc 24 e0 00 00 00 00\n4c 89 7c 24 08\n74 1b\n80 3d 99 6d 20 00 01\n75 12\n48 8d bc 24 e0 00 00 00\ne8 fc 0a 00 00\n48 89 c3\neb 02\n31 db\n48 85 db\n49 0f 44 dc\n4c 8b 3d 8f 6d 20 00\n48 89 df\ne8 ff f0 ff ff\n49 89 c6\n48 85 ed\n74 5f\n48 89 ef\ne8 ef f0 ff ff\n49 8d 44 06 04\n49 39 c7\n73 26\n48 89 05 66 6d 20 00\n48 8b 3d 57 6d 20 00\ne8 c2 ef ff ff\n48 8b 3d 53 6d 20 00\ne8 46 2b 00 00\n48 89 05 3f 6d 20 00\n48 8b 3d 38 6d 20 00\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 76 68 40 00\n31 c0\n49 89 d8\n49 89 e9\ne8 9a f3 ff ff\neb 51\n49 83 c6 03\n4d 39 f7\n73 26\n4c 89 35 10 6d 20 00\n48 8b 3d 01 6d 20 00\ne8 6c ef ff ff\n48 8b 3d fd 6c 20 00\ne8 f0 2a 00 00\n48 89 05 e9 6c 20 00\n48 8b 3d e2 6c 20 00\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 7e 68 40 00\n31 c0\n49 89 d8\ne8 47 f3 ff ff\n4c 8d 74 24 14\n4c 8b 7c 24 08\n4c 39 e3\n74 08\n48 89 df\ne8 20 ef ff ff\n44 8a 24 24\n49 8d 5d 2c\n4c 89 ef\ne8 d0 07 00 00\n48 8b 0d 99 6c 20 00\n48 85 c9\nbd c9 72 40 00\n48 0f 45 e9\n4c 8d 54 24 01\n41 0f be d4\nbf 20 00 00 00\nb9 20 00 00 00\n48 89 de\n4d 89 f8\n49 89 c1\n68 c9 72 40 00\n55\n41 56\n41 52\ne8 c2 04 00 00\n48 81 c4 08 02 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p425
S'.text:00000000004023d0\n.text:00000000004023d1\n.text:00000000004023d3\n.text:00000000004023d5\n.text:00000000004023d7\n.text:00000000004023d9\n.text:00000000004023da\n.text:00000000004023e1\n.text:00000000004023e4\n.text:00000000004023e7\n.text:00000000004023eb\n.text:00000000004023f0\n.text:00000000004023f5\n.text:00000000004023fa\n.text:00000000004023ff\n.text:0000000000402401\n.text:0000000000402404\n.text:0000000000402409\n.text:000000000040240d\n.text:0000000000402412\n.text:0000000000402414\n.text:0000000000402419\n.text:000000000040241b\n.text:0000000000402420\n.text:0000000000402427\n.text:000000000040242f\n.text:0000000000402434\n.text:0000000000402437\n.text:000000000040243c\n.text:0000000000402441\n.text:0000000000402446\n.text:000000000040244b\n.text:000000000040244e\n.text:0000000000402450\n.text:0000000000402452\n.text:0000000000402457\n.text:000000000040245c\n.text:0000000000402461\n.text:0000000000402466\n.text:0000000000402468\n.text:000000000040246d\n.text:0000000000402472\n.text:0000000000402474\n.text:0000000000402479\n.text:000000000040247e\n.text:0000000000402483\n.text:0000000000402485\n.text:0000000000402488\n.text:000000000040248a\n.text:000000000040248d\n.text:0000000000402495\n.text:0000000000402498\n.text:000000000040249a\n.text:000000000040249d\n.text:00000000004024a2\n.text:00000000004024a5\n.text:00000000004024aa\n.text:00000000004024af\n.text:00000000004024b4\n.text:00000000004024b9\n.text:00000000004024bf\n.text:00000000004024c1\n.text:00000000004024c4\n.text:00000000004024c9\n.text:00000000004024ce\n.text:00000000004024d0\n.text:00000000004024d4\n.text:00000000004024d8\n.text:00000000004024e0\n.text:00000000004024e5\n.text:00000000004024e8\n.text:00000000004024ed\n.text:00000000004024f2\n.text:00000000004024f5\n.text:00000000004024fa\n.text:00000000004024fd\n.text:00000000004024ff\n.text:0000000000402502\n.text:0000000000402505\n.text:0000000000402508\n.text:000000000040250a\n.text:0000000000402512\n.text:0000000000402514\n.text:000000000040251f\n.text:0000000000402526\n.text:000000000040252b\n.text:0000000000402532\n.text:0000000000402537\n.text:000000000040253e\n.text:0000000000402545\n.text:0000000000402548\n.text:000000000040254d\n.text:000000000040254f\n.text:0000000000402557\n.text:000000000040255c\n.text:000000000040255e\n.text:0000000000402565\n.text:0000000000402567\n.text:000000000040256f\n.text:0000000000402574\n.text:0000000000402577\n.text:0000000000402579\n.text:000000000040257b\n.text:000000000040257e\n.text:0000000000402582\n.text:0000000000402589\n.text:000000000040258c\n.text:0000000000402591\n.text:0000000000402594\n.text:0000000000402597\n.text:0000000000402599\n.text:000000000040259c\n.text:00000000004025a1\n.text:00000000004025a6\n.text:00000000004025a9\n.text:00000000004025ab\n.text:00000000004025b2\n.text:00000000004025b9\n.text:00000000004025be\n.text:00000000004025c5\n.text:00000000004025ca\n.text:00000000004025d1\n.text:00000000004025d8\n.text:00000000004025dd\n.text:00000000004025e4\n.text:00000000004025e9\n.text:00000000004025eb\n.text:00000000004025ee\n.text:00000000004025f1\n.text:00000000004025f6\n.text:00000000004025f8\n.text:00000000004025fc\n.text:00000000004025ff\n.text:0000000000402601\n.text:0000000000402608\n.text:000000000040260f\n.text:0000000000402614\n.text:000000000040261b\n.text:0000000000402620\n.text:0000000000402627\n.text:000000000040262e\n.text:0000000000402633\n.text:000000000040263a\n.text:000000000040263f\n.text:0000000000402641\n.text:0000000000402644\n.text:0000000000402649\n.text:000000000040264e\n.text:0000000000402653\n.text:0000000000402656\n.text:0000000000402658\n.text:000000000040265b\n.text:0000000000402660\n.text:0000000000402664\n.text:0000000000402668\n.text:000000000040266b\n.text:0000000000402670\n.text:0000000000402677\n.text:000000000040267a\n.text:000000000040267f\n.text:0000000000402683\n.text:0000000000402688\n.text:000000000040268c\n.text:0000000000402691\n.text:0000000000402696\n.text:0000000000402699\n.text:000000000040269c\n.text:000000000040269f\n.text:00000000004026a4\n.text:00000000004026a5\n.text:00000000004026a7\n.text:00000000004026a9\n.text:00000000004026ae\n.text:00000000004026b5\n.text:00000000004026b6\n.text:00000000004026b8\n.text:00000000004026ba\n.text:00000000004026bc\n.text:00000000004026be\n.text:00000000004026bf\n'
p426
tp427
sS'xnmalloc'
p428
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p429
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p430
S'MOV RAX,RDI\nMUL RSI\nJO 0x00405101\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00405110\nPUSH RAX\nCALL 0x004052a0\n'
p431
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p432
S'.text:00000000004050f0\n.text:00000000004050f3\n.text:00000000004050f6\n.text:00000000004050f8\n.text:00000000004050fc\n.text:00000000004050ff\n.text:0000000000405101\n.text:0000000000405102\n'
p433
tp434
sS'quotearg_custom'
p435
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p436
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p437
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004046f0\n'
p438
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p439
S'.text:0000000000404770\n.text:0000000000404773\n.text:0000000000404776\n.text:0000000000404779\n.text:000000000040477b\n.text:000000000040477e\n.text:0000000000404781\n.text:0000000000404784\n'
p440
tp441
sS'free'
p442
(S'\n__stdcall free(void * __ptr)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00609028)();\u000a  return;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x00609028]\n'
p445
S'ff 25 a2 7a 20 00\n'
p446
S'.plt:0000000000401580\n'
p447
tp448
sS'close'
p449
(S'\n__stdcall close(int __fd)\n'
p450
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006090f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p451
S'JMP qword ptr [0x006090f8]\n'
p452
S'ff 25 d2 79 20 00\n'
p453
S'.plt:0000000000401720\n'
p454
tp455
sS'setutxent'
p456
(S'\n__stdcall setutxent()\n'
p457
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid setutxent(void)\u000a\u000a{\u000a  (*(code *)PTR_setutxent_00609138)();\u000a  return;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x00609138]\n'
p459
S'ff 25 92 79 20 00\n'
p460
S'.plt:00000000004017a0\n'
p461
tp462
sS'getenv'
p463
(S'\n__stdcall getenv(char * __name)\n'
p464
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00609020)();\u000a  return pcVar1;\u000a}\u000a\u000a
p465
S'JMP qword ptr [0x00609020]\n'
p466
S'ff 25 aa 7a 20 00\n'
p467
S'.plt:0000000000401570\n'
p468
tp469
sS'quotearg_char'
p470
(S'\n__stdcall quotearg_char(char * arg)\n'
p471
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p472
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00404600\n'
p473
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p474
S'.text:0000000000404670\n.text:0000000000404672\n.text:0000000000404679\n.text:000000000040467b\n'
p475
tp476
sS'malloc'
p477
(S'\n__stdcall malloc(size_t __size)\n'
p478
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00609168)();\u000a  return pvVar1;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x00609168]\n'
p480
S'ff 25 62 79 20 00\n'
p481
S'.plt:0000000000401800\n'
p482
tp483
sS'ch_strerror'
p484
(S'\n__stdcall ch_strerror()\n'
p485
V\u000achar * ch_strerror(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_gai_strerror_006090d0)((ulong)(uint)last_cherror);\u000a  return pcVar1;\u000a}\u000a\u000a
p486
S'MOV EDI,dword ptr [0x00609370]\nJMP 0x004016d0\n'
p487
S'8b 3d 6a 62 20 00\ne9 c5 e5 ff ff\n'
p488
S'.text:0000000000403100\n.text:0000000000403106\n'
p489
tp490
sS'stat'
p491
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p492
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_00609160)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p493
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x004017f0\n'
p494
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 d0 bd ff ff\n'
p495
S'.text:0000000000405a10\n.text:0000000000405a13\n.text:0000000000405a16\n.text:0000000000405a1b\n'
p496
tp497
sS'c_tolower'
p498
(S'\n__stdcall c_tolower()\n'
p499
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p500
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p501
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p502
S'.text:0000000000403050\n.text:0000000000403053\n.text:0000000000403056\n.text:0000000000403059\n.text:000000000040305c\n'
p503
tp504
sS'make_id_equals_comment'
p505
(S'\n__stdcall make_id_equals_comment(STRUCT_UTMP * utmp_ent)\n'
p506
V\u000achar * make_id_equals_comment(STRUCT_UTMP *utmp_ent)\u000a\u000a{\u000a  char *__s;\u000a  size_t sVar1;\u000a  char *__src;\u000a  \u000a  __s = (char *)dcgettext(0,&DAT_004068cd,5);\u000a  sVar1 = strlen(__s);\u000a  __s = (char *)xmalloc(sVar1 + 5);\u000a  __src = (char *)dcgettext(0,&DAT_004068cd,5);\u000a  strcpy(__s,__src);\u000a  __strncat_chk(__s,utmp_ent->ut_id,4,0xffffffffffffffff);\u000a  return __s;\u000a}\u000a\u000a
p507
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nXOR EDI,EDI\nMOV ESI,0x4068cd\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDI,RAX\nCALL 0x00401690\nLEA RDI,[RAX + 0x5]\nCALL 0x00405110\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x4068cd\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDI,RBX\nMOV RSI,RAX\nCALL 0x004015f0\nLEA RSI,[R14 + 0x28]\nMOV EDX,0x4\nMOV RCX,-0x1\nMOV RDI,RBX\nCALL 0x00401930\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p508
S'41 56\n53\n50\n49 89 fe\n31 ff\nbe cd 68 40 00\nba 05 00 00 00\ne8 a8 e7 ff ff\n48 89 c7\ne8 c0 e7 ff ff\n48 8d 78 05\ne8 37 22 00 00\n48 89 c3\n31 ff\nbe cd 68 40 00\nba 05 00 00 00\ne8 83 e7 ff ff\n48 89 df\n48 89 c6\ne8 f8 e6 ff ff\n49 8d 76 28\nba 04 00 00 00\n48 c7 c1 ff ff ff ff\n48 89 df\ne8 20 ea ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p509
S'.text:0000000000402eb0\n.text:0000000000402eb2\n.text:0000000000402eb3\n.text:0000000000402eb4\n.text:0000000000402eb7\n.text:0000000000402eb9\n.text:0000000000402ebe\n.text:0000000000402ec3\n.text:0000000000402ec8\n.text:0000000000402ecb\n.text:0000000000402ed0\n.text:0000000000402ed4\n.text:0000000000402ed9\n.text:0000000000402edc\n.text:0000000000402ede\n.text:0000000000402ee3\n.text:0000000000402ee8\n.text:0000000000402eed\n.text:0000000000402ef0\n.text:0000000000402ef3\n.text:0000000000402ef8\n.text:0000000000402efc\n.text:0000000000402f01\n.text:0000000000402f08\n.text:0000000000402f0b\n.text:0000000000402f10\n.text:0000000000402f13\n.text:0000000000402f17\n.text:0000000000402f18\n.text:0000000000402f1a\n'
p510
tp511
sS'rpl_fseeko'
p512
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p513
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_006091d8)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p514
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00405918\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00405918\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0040592a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004018e0\nMOV RDI,RBX\nCALL 0x004017e0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x004016f0\nCMP RAX,-0x1\nJZ 0x00405953\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00405958\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p515
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 b6 bf ff ff\n48 89 df\ne8 ae be ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 b1 bd ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p516
S'.text:00000000004058f0\n.text:00000000004058f1\n.text:00000000004058f3\n.text:00000000004058f4\n.text:00000000004058f7\n.text:00000000004058fa\n.text:00000000004058fd\n.text:0000000000405901\n.text:0000000000405905\n.text:0000000000405907\n.text:000000000040590b\n.text:000000000040590f\n.text:0000000000405911\n.text:0000000000405916\n.text:0000000000405918\n.text:000000000040591b\n.text:000000000040591e\n.text:0000000000405921\n.text:0000000000405922\n.text:0000000000405924\n.text:0000000000405925\n.text:000000000040592a\n.text:000000000040592d\n.text:0000000000405932\n.text:0000000000405934\n.text:0000000000405937\n.text:000000000040593a\n.text:000000000040593f\n.text:0000000000405943\n.text:0000000000405945\n.text:0000000000405948\n.text:000000000040594f\n.text:0000000000405951\n.text:0000000000405953\n.text:0000000000405958\n.text:0000000000405959\n.text:000000000040595b\n.text:000000000040595c\n'
p517
tp518
sS'getopt_long'
p519
(S'\n__stdcall getopt_long()\n'
p520
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_006090b8)();\u000a  return;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x006090b8]\n'
p522
S'ff 25 12 7a 20 00\n'
p523
S'.plt:00000000004016a0\n'
p524
tp525
sS'quote_n_mem'
p526
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p527
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p528
S'MOV ECX,0x609288\nJMP 0x004042f0\n'
p529
S'b9 88 92 60 00\ne9 36 fb ff ff\n'
p530
S'.text:00000000004047b0\n.text:00000000004047b5\n'
p531
tp532
sS'c_ispunct'
p533
(S'\n__stdcall c_ispunct()\n'
p534
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p535
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00402ff2\nMOV AL,0x1\nJMP qword ptr [0x4068f8 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p536
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd f8 68 40 00\nc3\n31 c0\nc3\n'
p537
S'.text:0000000000402fe0\n.text:0000000000402fe3\n.text:0000000000402fe6\n.text:0000000000402fe8\n.text:0000000000402fea\n.text:0000000000402ff1\n.text:0000000000402ff2\n.text:0000000000402ff4\n'
p538
tp539
sS'xstrdup'
p540
(S'\n__stdcall xstrdup(char * string)\n'
p541
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p542
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401690\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00405250\n'
p543
S'53\n48 89 fb\ne8 07 c4 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p544
S'.text:0000000000405280\n.text:0000000000405281\n.text:0000000000405284\n.text:0000000000405289\n.text:000000000040528d\n.text:0000000000405290\n.text:0000000000405291\n'
p545
tp546
sS'quotearg_style'
p547
(S'\n__stdcall quotearg_style(char * arg)\n'
p548
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p549
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x004044e0\n'
p550
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p551
S'.text:00000000004045c0\n.text:00000000004045c3\n.text:00000000004045c5\n.text:00000000004045c7\n.text:00000000004045c9\n.text:00000000004045cc\n'
p552
tp553
sS'kill'
p554
(S'\n__stdcall kill(__pid_t __pid, int __sig)\n'
p555
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint kill(__pid_t __pid,int __sig)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_kill_00609148)();\u000a  return iVar1;\u000a}\u000a\u000a
p556
S'JMP qword ptr [0x00609148]\n'
p557
S'ff 25 82 79 20 00\n'
p558
S'.plt:00000000004017c0\n'
p559
tp560
sS'print_deadprocs'
p561
(S'\n__stdcall print_deadprocs(STRUCT_UTMP * utmp_ent)\n'
p562
V\u000avoid print_deadprocs(STRUCT_UTMP *utmp_ent)\u000a\u000a{\u000a  short sVar1;\u000a  char *exitstr;\u000a  char *__ptr;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  undefined8 uVar4;\u000a  undefined8 uVar5;\u000a  char *__s;\u000a  char pidstr [12];\u000a  undefined local_3c [12];\u000a  \u000a  __ptr = make_id_equals_comment(utmp_ent);\u000a  __sprintf_chk(local_3c,1,0xc,&DAT_00406869,(long)utmp_ent->ut_pid);\u000a  if (exitstr == (char *)0x0) {\u000a    __s = (char *)dcgettext(0,"term=",5);\u000a    sVar2 = strlen(__s);\u000a    __s = (char *)dcgettext(0,"exit=",5);\u000a    sVar3 = strlen(__s);\u000a    exitstr = (char *)xmalloc(sVar2 + 0xe + sVar3);\u000a  }\u000a  __s = exitstr;\u000a  uVar4 = dcgettext(0,"term=",5);\u000a  sVar1 = (utmp_ent->ut_exit).e_termination;\u000a  uVar5 = dcgettext(0,"exit=",5);\u000a  __sprintf_chk(__s,1,0xffffffffffffffff,"%s%d %s%d",uVar4,(ulong)(uint)(int)sVar1,uVar5,\u000a                (ulong)(uint)(int)(utmp_ent->ut_exit).e_exit);\u000a  __s = time_string(utmp_ent);\u000a  print_line((char *)0xffffffff,\u000a                          \u000a             "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a             + 0xca,(char *)0x20,(char *)0x20,utmp_ent->ut_line,__s);\u000a  free(__ptr);\u000a  return;\u000a}\u000a\u000a
p563
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV RBX,RDI\nCALL 0x00402eb0\nMOV R15,RAX\nMOVSXD R8,dword ptr [RBX + 0x4]\nLEA RDI,[RSP + 0xc]\nMOV ESI,0x1\nMOV EDX,0xc\nMOV ECX,0x406869\nXOR EAX,EAX\nCALL 0x00401990\nCMP qword ptr [0x00609368],0x0\nJNZ 0x00402aa8\nXOR EDI,EDI\nMOV ESI,0x4068d7\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDI,RAX\nCALL 0x00401690\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x4068dd\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDI,RAX\nCALL 0x00401690\nLEA RDI,[R12 + RAX*0x1 + 0xe]\nCALL 0x00405110\nMOV qword ptr [0x00609368],RAX\nMOV R12,qword ptr [0x00609368]\nXOR EDI,EDI\nMOV ESI,0x4068d7\nMOV EDX,0x5\nCALL 0x00401670\nMOV R13,RAX\nMOVSX R14D,word ptr [0x14c + RBX]\nXOR EDI,EDI\nMOV ESI,0x4068dd\nMOV EDX,0x5\nCALL 0x00401670\nMOV R10,RAX\nMOVSX EBP,word ptr [0x14e + RBX]\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x4068e3\nMOV EAX,0x0\nMOV RDI,R12\nMOV R8,R13\nMOV R9D,R14D\nPUSH RBP\nPUSH R10\nCALL 0x00401990\nADD RSP,0x10\nLEA RBP,[RBX + 0x8]\nMOV RDI,RBX\nCALL 0x00402e40\nMOV EDI,0xffffffff\nMOV ESI,0x4072c9\nMOV EDX,0x20\nMOV ECX,0x20\nMOV R8,RBP\nMOV R9,RAX\nPUSH qword ptr [0x00609368]\nPUSH R15\nLEA RAX,[RSP + 0x1c]\nPUSH RAX\nPUSH 0x4072c9\nCALL 0x00402b70\nADD RSP,0x20\nMOV RDI,R15\nCALL 0x00401580\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p564
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 fb\ne8 7a 04 00 00\n49 89 c7\n4c 63 43 04\n48 8d 7c 24 0c\nbe 01 00 00 00\nba 0c 00 00 00\nb9 69 68 40 00\n31 c0\ne8 38 ef ff ff\n48 83 3d 08 69 20 00 00\n75 46\n31 ff\nbe d7 68 40 00\nba 05 00 00 00\ne8 fd eb ff ff\n48 89 c7\ne8 15 ec ff ff\n49 89 c4\n31 ff\nbe dd 68 40 00\nba 05 00 00 00\ne8 e1 eb ff ff\n48 89 c7\ne8 f9 eb ff ff\n49 8d 7c 04 0e\ne8 6f 26 00 00\n48 89 05 c0 68 20 00\n4c 8b 25 b9 68 20 00\n31 ff\nbe d7 68 40 00\nba 05 00 00 00\ne8 b0 eb ff ff\n49 89 c5\n44 0f bf b3 4c 01 00 00\n31 ff\nbe dd 68 40 00\nba 05 00 00 00\ne8 94 eb ff ff\n49 89 c2\n0f bf ab 4e 01 00 00\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 e3 68 40 00\nb8 00 00 00 00\n4c 89 e7\n4d 89 e8\n45 89 f1\n55\n41 52\ne8 83 ee ff ff\n48 83 c4 10\n48 8d 6b 08\n48 89 df\ne8 23 03 00 00\nbf ff ff ff ff\nbe c9 72 40 00\nba 20 00 00 00\nb9 20 00 00 00\n49 89 e8\n49 89 c1\nff 35 2b 68 20 00\n41 57\n48 8d 44 24 1c\n50\n68 c9 72 40 00\ne8 21 00 00 00\n48 83 c4 20\n4c 89 ff\ne8 25 ea ff ff\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p565
S'.text:0000000000402a20\n.text:0000000000402a21\n.text:0000000000402a23\n.text:0000000000402a25\n.text:0000000000402a27\n.text:0000000000402a29\n.text:0000000000402a2a\n.text:0000000000402a2e\n.text:0000000000402a31\n.text:0000000000402a36\n.text:0000000000402a39\n.text:0000000000402a3d\n.text:0000000000402a42\n.text:0000000000402a47\n.text:0000000000402a4c\n.text:0000000000402a51\n.text:0000000000402a53\n.text:0000000000402a58\n.text:0000000000402a60\n.text:0000000000402a62\n.text:0000000000402a64\n.text:0000000000402a69\n.text:0000000000402a6e\n.text:0000000000402a73\n.text:0000000000402a76\n.text:0000000000402a7b\n.text:0000000000402a7e\n.text:0000000000402a80\n.text:0000000000402a85\n.text:0000000000402a8a\n.text:0000000000402a8f\n.text:0000000000402a92\n.text:0000000000402a97\n.text:0000000000402a9c\n.text:0000000000402aa1\n.text:0000000000402aa8\n.text:0000000000402aaf\n.text:0000000000402ab1\n.text:0000000000402ab6\n.text:0000000000402abb\n.text:0000000000402ac0\n.text:0000000000402ac3\n.text:0000000000402acb\n.text:0000000000402acd\n.text:0000000000402ad2\n.text:0000000000402ad7\n.text:0000000000402adc\n.text:0000000000402adf\n.text:0000000000402ae6\n.text:0000000000402aeb\n.text:0000000000402af2\n.text:0000000000402af7\n.text:0000000000402afc\n.text:0000000000402aff\n.text:0000000000402b02\n.text:0000000000402b05\n.text:0000000000402b06\n.text:0000000000402b08\n.text:0000000000402b0d\n.text:0000000000402b11\n.text:0000000000402b15\n.text:0000000000402b18\n.text:0000000000402b1d\n.text:0000000000402b22\n.text:0000000000402b27\n.text:0000000000402b2c\n.text:0000000000402b31\n.text:0000000000402b34\n.text:0000000000402b37\n.text:0000000000402b3d\n.text:0000000000402b3f\n.text:0000000000402b44\n.text:0000000000402b45\n.text:0000000000402b4a\n.text:0000000000402b4f\n.text:0000000000402b53\n.text:0000000000402b56\n.text:0000000000402b5b\n.text:0000000000402b5f\n.text:0000000000402b60\n.text:0000000000402b62\n.text:0000000000402b64\n.text:0000000000402b66\n.text:0000000000402b68\n.text:0000000000402b69\n'
p566
tp567
sS'puts'
p568
(S'\n__stdcall puts(char * __s)\n'
p569
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint puts(char *__s)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_puts_00609070)();\u000a  return iVar1;\u000a}\u000a\u000a
p570
S'JMP qword ptr [0x00609070]\n'
p571
S'ff 25 5a 7a 20 00\n'
p572
S'.plt:0000000000401610\n'
p573
tp574
sS'is_tty_writable'
p575
(S'\n__stdcall is_tty_writable(stat * pstat)\n'
p576
V\u000a_Bool is_tty_writable(stat *pstat)\u000a\u000a{\u000a  return (_Bool)((*(byte *)&pstat->st_mode & 0x10) >> 4);\u000a}\u000a\u000a
p577
S'MOV AL,byte ptr [RDI + 0x18]\nAND AL,0x10\nSHR AL,0x4\nRET\n'
p578
S'8a 47 18\n24 10\nc0 e8 04\nc3\n'
p579
S'.text:0000000000402d70\n.text:0000000000402d73\n.text:0000000000402d75\n.text:0000000000402d78\n'
p580
tp581
sS'fscanf'
p582
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006090f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x006090f0]\n'
p585
S'ff 25 da 79 20 00\n'
p586
S'.plt:0000000000401710\n'
p587
tp588
sS'emit_try_help'
p589
(S'\n__stdcall emit_try_help()\n'
p590
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p591
S'PUSH RBX\nMOV RBX,qword ptr [0x006092e0]\nXOR EDI,EDI\nMOV ESI,0x40662a\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDX,RAX\nMOV RCX,qword ptr [0x006093b8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401920\n'
p592
S'53\n48 8b 1d b8 76 20 00\n31 ff\nbe 2a 66 40 00\nba 05 00 00 00\ne8 37 fa ff ff\n48 89 c2\n48 8b 0d 75 77 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 cd fc ff ff\n'
p593
S'.text:0000000000401c20\n.text:0000000000401c21\n.text:0000000000401c28\n.text:0000000000401c2a\n.text:0000000000401c2f\n.text:0000000000401c34\n.text:0000000000401c39\n.text:0000000000401c3c\n.text:0000000000401c43\n.text:0000000000401c48\n.text:0000000000401c4a\n.text:0000000000401c4d\n.text:0000000000401c4e\n'
p594
tp595
sS'strftime'
p596
(S'\n__stdcall strftime(char * __s, size_t __maxsize, char * __format, tm * __tp)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strftime(char *__s,size_t __maxsize,char *__format,tm *__tp)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strftime_006091b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x006091b8]\n'
p599
S'ff 25 12 79 20 00\n'
p600
S'.plt:00000000004018a0\n'
p601
tp602
sS'memcpy'
p603
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p604
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00609140)();\u000a  return pvVar1;\u000a}\u000a\u000a
p605
S'JMP qword ptr [0x00609140]\n'
p606
S'ff 25 8a 79 20 00\n'
p607
S'.plt:00000000004017b0\n'
p608
tp609
sS'strrchr'
p610
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p611
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006090d8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p612
S'JMP qword ptr [0x006090d8]\n'
p613
S'ff 25 f2 79 20 00\n'
p614
S'.plt:00000000004016e0\n'
p615
tp616
sS'close_stdout_set_ignore_EPIPE'
p617
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p618
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p619
S'MOV byte ptr [0x006093b0],DIL\nRET\n'
p620
S'40 88 3d 89 62 20 00\nc3\n'
p621
S'.text:0000000000403120\n.text:0000000000403127\n'
p622
tp623
sS'quotearg_alloc_mem'
p624
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p625
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p626
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x6093c0\nCMOVNZ R12,RCX\nCALL 0x004015b0\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403510\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x004051e0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403510\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040423a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p627
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc c0 93 60 00\n4c 0f 45 e1\ne8 18 d4 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 f1 0f 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p628
S'.text:0000000000404160\n.text:0000000000404161\n.text:0000000000404163\n.text:0000000000404165\n.text:0000000000404167\n.text:0000000000404169\n.text:000000000040416a\n.text:000000000040416e\n.text:0000000000404171\n.text:0000000000404176\n.text:0000000000404179\n.text:000000000040417e\n.text:0000000000404181\n.text:0000000000404186\n.text:0000000000404189\n.text:000000000040418f\n.text:0000000000404193\n.text:0000000000404198\n.text:000000000040419d\n.text:000000000040419f\n.text:00000000004041a3\n.text:00000000004041a5\n.text:00000000004041a8\n.text:00000000004041ac\n.text:00000000004041b1\n.text:00000000004041b5\n.text:00000000004041ba\n.text:00000000004041be\n.text:00000000004041c0\n.text:00000000004041c2\n.text:00000000004041c5\n.text:00000000004041c8\n.text:00000000004041cb\n.text:00000000004041d0\n.text:00000000004041d5\n.text:00000000004041d7\n.text:00000000004041dc\n.text:00000000004041e0\n.text:00000000004041e3\n.text:00000000004041e7\n.text:00000000004041ea\n.text:00000000004041ef\n.text:00000000004041f2\n.text:00000000004041f6\n.text:00000000004041fa\n.text:00000000004041fd\n.text:0000000000404200\n.text:0000000000404205\n.text:000000000040420a\n.text:000000000040420d\n.text:0000000000404212\n.text:0000000000404217\n.text:0000000000404219\n.text:000000000040421e\n.text:0000000000404223\n.text:0000000000404227\n.text:000000000040422a\n.text:000000000040422e\n.text:0000000000404233\n.text:0000000000404235\n.text:0000000000404237\n.text:000000000040423a\n.text:000000000040423d\n.text:0000000000404241\n.text:0000000000404242\n.text:0000000000404244\n.text:0000000000404246\n.text:0000000000404248\n.text:000000000040424a\n.text:000000000040424b\n'
p629
tp630
sS'iswprint'
p631
(S'\n__stdcall iswprint(wint_t __wc)\n'
p632
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_00609218)();\u000a  return iVar1;\u000a}\u000a\u000a
p633
S'JMP qword ptr [0x00609218]\n'
p634
S'ff 25 b2 78 20 00\n'
p635
S'.plt:0000000000401960\n'
p636
tp637
sS'quotearg_style_mem'
p638
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p639
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p640
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404580\n'
p641
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p642
S'.text:00000000004045e0\n.text:00000000004045e3\n.text:00000000004045e6\n.text:00000000004045e8\n.text:00000000004045ea\n.text:00000000004045ec\n.text:00000000004045ef\n.text:00000000004045f2\n'
p643
tp644
sS'xalloc_die'
p645
(S'\n__stdcall xalloc_die()\n'
p646
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x406bf8,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p647
S'PUSH RBX\nMOV EBX,dword ptr [0x00609260]\nXOR EDI,EDI\nMOV ESI,0x4074ff\nMOV EDX,0x5\nCALL 0x00401670\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x406bf8\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004018c0\nCALL 0x004015a0\n'
p648
S'53\n8b 1d b9 3f 20 00\n31 ff\nbe ff 74 40 00\nba 05 00 00 00\ne8 b8 c3 ff ff\n48 89 c1\n31 f6\nba f8 6b 40 00\n31 c0\n89 df\ne8 f5 c5 ff ff\ne8 d0 c2 ff ff\n'
p649
S'.text:00000000004052a0\n.text:00000000004052a1\n.text:00000000004052a7\n.text:00000000004052a9\n.text:00000000004052ae\n.text:00000000004052b3\n.text:00000000004052b8\n.text:00000000004052bb\n.text:00000000004052bd\n.text:00000000004052c2\n.text:00000000004052c4\n.text:00000000004052c6\n.text:00000000004052cb\n'
p650
tp651
sS'__sprintf_chk'
p652
(S'\n__stdcall __sprintf_chk()\n'
p653
V\u000avoid __sprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___sprintf_chk_00609230)();\u000a  return;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x00609230]\n'
p655
S'ff 25 9a 78 20 00\n'
p656
S'.plt:0000000000401990\n'
p657
tp658
sS'c_isspace'
p659
(S'\n__stdcall c_isspace()\n'
p660
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p661
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00403015\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p662
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p663
S'.text:0000000000403000\n.text:0000000000403003\n.text:0000000000403006\n.text:0000000000403008\n.text:000000000040300d\n.text:000000000040300f\n.text:0000000000403011\n.text:0000000000403014\n.text:0000000000403015\n.text:0000000000403017\n'
p664
tp665
sS'timetostr'
p666
(S'\n__stdcall timetostr()\n'
p667
V\u000achar * timetostr(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  intmax_t i;\u000a  \u000a  pcVar1 = imaxtostr(i,buf);\u000a  return pcVar1;\u000a}\u000a\u000a
p668
S'MOV ESI,0x609330\nJMP 0x00403230\n'
p669
S'be 30 93 60 00\ne9 86 03 00 00\n'
p670
S'.text:0000000000402ea0\n.text:0000000000402ea5\n'
p671
tp672
sS'freeaddrinfo'
p673
(S'\n__stdcall freeaddrinfo(addrinfo * __ai)\n'
p674
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid freeaddrinfo(addrinfo *__ai)\u000a\u000a{\u000a  (*(code *)PTR_freeaddrinfo_00609228)();\u000a  return;\u000a}\u000a\u000a
p675
S'JMP qword ptr [0x00609228]\n'
p676
S'ff 25 a2 78 20 00\n'
p677
S'.plt:0000000000401980\n'
p678
tp679
sS'print_login'
p680
(S'\n__stdcall print_login(STRUCT_UTMP * utmp_ent)\n'
p681
V\u000avoid print_login(STRUCT_UTMP *utmp_ent)\u000a\u000a{\u000a  char *__ptr;\u000a  char *line;\u000a  char *exitstr;\u000a  char pidstr [12];\u000a  undefined local_34 [12];\u000a  \u000a  __ptr = make_id_equals_comment(utmp_ent);\u000a  __sprintf_chk(local_34,1,0xc,&DAT_00406869,(long)utmp_ent->ut_pid);\u000a  line = (char *)dcgettext(0,"LOGIN",5);\u000a  exitstr = time_string(utmp_ent);\u000a  print_line((char *)0xffffffff,line,(char *)0x20,(char *)0x20,utmp_ent->ut_line,exitstr);\u000a  free(__ptr);\u000a  return;\u000a}\u000a\u000a
p682
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV RBX,RDI\nCALL 0x00402eb0\nMOV R15,RAX\nMOVSXD R8,dword ptr [RBX + 0x4]\nLEA R14,[RSP + 0x4]\nMOV ESI,0x1\nMOV EDX,0xc\nMOV ECX,0x406869\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401990\nXOR EDI,EDI\nMOV ESI,0x4068d1\nMOV EDX,0x5\nCALL 0x00401670\nMOV R12,RAX\nLEA R13,[RBX + 0x8]\nMOV RDI,RBX\nCALL 0x00402e40\nMOV EDI,0xffffffff\nMOV EDX,0x20\nMOV ECX,0x20\nMOV RSI,R12\nMOV R8,R13\nMOV R9,RAX\nPUSH 0x4072c9\nPUSH R15\nPUSH R14\nPUSH 0x4072c9\nCALL 0x00402b70\nADD RSP,0x20\nMOV RDI,R15\nCALL 0x00401580\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p683
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 10\n48 89 fb\ne8 1b 05 00 00\n49 89 c7\n4c 63 43 04\n4c 8d 74 24 04\nbe 01 00 00 00\nba 0c 00 00 00\nb9 69 68 40 00\n31 c0\n4c 89 f7\ne8 d6 ef ff ff\n31 ff\nbe d1 68 40 00\nba 05 00 00 00\ne8 a5 ec ff ff\n49 89 c4\n4c 8d 6b 08\n48 89 df\ne8 66 04 00 00\nbf ff ff ff ff\nba 20 00 00 00\nb9 20 00 00 00\n4c 89 e6\n4d 89 e8\n49 89 c1\n68 c9 72 40 00\n41 57\n41 56\n68 c9 72 40 00\ne8 6b 01 00 00\n48 83 c4 20\n4c 89 ff\ne8 6f eb ff ff\n48 83 c4 10\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p684
S'.text:0000000000402980\n.text:0000000000402982\n.text:0000000000402984\n.text:0000000000402986\n.text:0000000000402988\n.text:0000000000402989\n.text:000000000040298d\n.text:0000000000402990\n.text:0000000000402995\n.text:0000000000402998\n.text:000000000040299c\n.text:00000000004029a1\n.text:00000000004029a6\n.text:00000000004029ab\n.text:00000000004029b0\n.text:00000000004029b2\n.text:00000000004029b5\n.text:00000000004029ba\n.text:00000000004029bc\n.text:00000000004029c1\n.text:00000000004029c6\n.text:00000000004029cb\n.text:00000000004029ce\n.text:00000000004029d2\n.text:00000000004029d5\n.text:00000000004029da\n.text:00000000004029df\n.text:00000000004029e4\n.text:00000000004029e9\n.text:00000000004029ec\n.text:00000000004029ef\n.text:00000000004029f2\n.text:00000000004029f7\n.text:00000000004029f9\n.text:00000000004029fb\n.text:0000000000402a00\n.text:0000000000402a05\n.text:0000000000402a09\n.text:0000000000402a0c\n.text:0000000000402a11\n.text:0000000000402a15\n.text:0000000000402a16\n.text:0000000000402a18\n.text:0000000000402a1a\n.text:0000000000402a1c\n.text:0000000000402a1e\n'
p685
tp686
sS'quotearg_n_custom'
p687
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p688
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p689
S'MOV R8,-0x1\nJMP 0x00404700\n'
p690
S'49 c7 c0 ff ff ff ff\neb 07\n'
p691
S'.text:00000000004046f0\n.text:00000000004046f7\n'
p692
tp693
sS'open'
p694
(S'\n__stdcall open(char * __file, int __oflag)\n'
p695
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_006091d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p696
S'JMP qword ptr [0x006091d0]\n'
p697
S'ff 25 fa 78 20 00\n'
p698
S'.plt:00000000004018d0\n'
p699
tp700
sS'stzncpy'
p701
(S'\n__stdcall stzncpy(char * dest, char * src)\n'
p702
V\u000achar * stzncpy(char *dest,char *src)\u000a\u000a{\u000a  byte bVar1;\u000a  char *in_RAX;\u000a  long in_RDX;\u000a  byte *pbVar2;\u000a  \u000a  if (0 < in_RDX) {\u000a    pbVar2 = (byte *)(src + in_RDX);\u000a    do {\u000a      bVar1 = *src;\u000a      in_RAX = (char *)(ulong)bVar1;\u000a      if (bVar1 == 0) break;\u000a      src = (char *)((byte *)src + 1);\u000a      *dest = bVar1;\u000a      dest = (char *)((byte *)dest + 1);\u000a    } while (src < pbVar2);\u000a  }\u000a  *dest = 0;\u000a  return in_RAX;\u000a}\u000a\u000a
p703
S'TEST RDX,RDX\nJLE 0x00402d64\nADD RDX,RSI\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RSI]\nTEST AL,AL\nJZ 0x00402d64\nINC RSI\nMOV byte ptr [RDI],AL\nINC RDI\nCMP RSI,RDX\nJC 0x00402d50\nMOV byte ptr [RDI],0x0\nRET\n'
p704
S'48 85 d2\n7e 1f\n48 01 f2\n0f 1f 84 00 00 00 00 00\n0f b6 06\n84 c0\n74 0d\n48 ff c6\n88 07\n48 ff c7\n48 39 d6\n72 ec\nc6 07 00\nc3\n'
p705
S'.text:0000000000402d40\n.text:0000000000402d43\n.text:0000000000402d45\n.text:0000000000402d48\n.text:0000000000402d50\n.text:0000000000402d53\n.text:0000000000402d55\n.text:0000000000402d57\n.text:0000000000402d5a\n.text:0000000000402d5c\n.text:0000000000402d5f\n.text:0000000000402d62\n.text:0000000000402d64\n.text:0000000000402d67\n'
p706
tp707
sS'quotearg_n_custom_mem'
p708
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p709
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p710
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x006093f0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x006093e0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x006093d0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006093c0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403460\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004042f0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p711
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 d7 4c 20 00\n48 89 44 24 30\n0f 10 05 bb 4c 20 00\n0f 29 44 24 20\n0f 10 05 9f 4c 20 00\n0f 29 44 24 10\n0f 10 05 83 4c 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p712
S'.text:0000000000404700\n.text:0000000000404701\n.text:0000000000404703\n.text:0000000000404705\n.text:0000000000404706\n.text:000000000040470a\n.text:000000000040470d\n.text:0000000000404710\n.text:0000000000404712\n.text:0000000000404719\n.text:000000000040471e\n.text:0000000000404725\n.text:000000000040472a\n.text:0000000000404731\n.text:0000000000404736\n.text:000000000040473d\n.text:0000000000404741\n.text:0000000000404744\n.text:0000000000404747\n.text:000000000040474c\n.text:000000000040474e\n.text:0000000000404751\n.text:0000000000404754\n.text:0000000000404757\n.text:000000000040475c\n.text:0000000000404760\n.text:0000000000404761\n.text:0000000000404763\n.text:0000000000404765\n.text:0000000000404766\n'
p713
tp714
sS'localtime'
p715
(S'\n__stdcall localtime(time_t * __timer)\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000atm * localtime(time_t *__timer)\u000a\u000a{\u000a  tm *ptVar1;\u000a  \u000a  ptVar1 = (tm *)(*(code *)PTR_localtime_00609030)();\u000a  return ptVar1;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x00609030]\n'
p718
S'ff 25 9a 7a 20 00\n'
p719
S'.plt:0000000000401590\n'
p720
tp721
sS'utmpxname'
p722
(S'\n__stdcall utmpxname(char * __file)\n'
p723
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint utmpxname(char *__file)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_utmpxname_00609018)();\u000a  return iVar1;\u000a}\u000a\u000a
p724
S'JMP qword ptr [0x00609018]\n'
p725
S'ff 25 b2 7a 20 00\n'
p726
S'.plt:0000000000401560\n'
p727
tp728
sS'_init'
p729
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p730
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00608ff8;\u000a  if (PTR___gmon_start___00608ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00608ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p731
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00608ff8]\nTEST RAX,RAX\nJZ 0x00401542\nCALL RAX\nADD RSP,0x8\nRET\n'
p732
S'48 83 ec 08\n48 8b 05 bd 7a 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p733
S'.init:0000000000401530\n.init:0000000000401534\n.init:000000000040153b\n.init:000000000040153e\n.init:0000000000401540\n.init:0000000000401542\n.init:0000000000401546\n'
p734
tp735
sS'__freading'
p736
(S'\n__stdcall __freading()\n'
p737
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00609188)();\u000a  return;\u000a}\u000a\u000a
p738
S'JMP qword ptr [0x00609188]\n'
p739
S'ff 25 42 79 20 00\n'
p740
S'.plt:0000000000401840\n'
p741
tp742
sS'set_quoting_flags'
p743
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p744
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p745
S'TEST RDI,RDI\nMOV ECX,0x6093c0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p746
S'48 85 ff\nb9 c0 93 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p747
S'.text:0000000000403440\n.text:0000000000403443\n.text:0000000000403448\n.text:000000000040344c\n.text:000000000040344f\n.text:0000000000403452\n'
p748
tp749
sS'fputs_unlocked'
p750
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_00609110)();\u000a  return iVar1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x00609110]\n'
p753
S'ff 25 ba 79 20 00\n'
p754
S'.plt:0000000000401750\n'
p755
tp756
sS'main'
p757
(S'\n__stdcall main(char * * argv)\n'
p758
V\u000aint main(char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  int extraout_EAX;\u000a  undefined1 *puVar4;\u000a  char *file;\u000a  uint *puVar5;\u000a  ulong uVar6;\u000a  undefined8 unaff_RBP;\u000a  ulong uVar7;\u000a  char **in_RSI;\u000a  STRUCT_UTMP *pSStack72;\u000a  size_t sStack64;\u000a  char *pcStack56;\u000a  ulong uStack48;\u000a  \u000a  uStack48 = 0x401da5;\u000a  set_program_name(*in_RSI);\u000a  uStack48 = 0x401db4;\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  uStack48 = 0x401dc3;\u000a  bindtextdomain(0x4065c5,"/usr/local/share/locale");\u000a  uStack48 = 0x401dcd;\u000a  textdomain(0x4065c5);\u000a  uStack48 = 0x401dd7;\u000a  atexit(close_stdout);\u000a  uVar7 = CONCAT71((int7)((ulong)unaff_RBP >> 8),1);\u000a  while( true ) {\u000a    uVar6 = 0;\u000a    uStack48 = 0x401dff;\u000a    iVar3 = getopt_long((ulong)argv & 0xffffffff);\u000a    if (0x81 < iVar3 + 1U) break;\u000a    puVar4 = &need_boottime;\u000a    switch(iVar3) {\u000a    default:\u000a      goto switchD_00401e13_caseD_0;\u000a    case 0x48:\u000a      puVar4 = &include_heading;\u000a      break;\u000a    case 0x54:\u000a    case 0x77:\u000a      puVar4 = &include_mesg;\u000a      break;\u000a    case 0x61:\u000a      need_boottime = 1;\u000a      need_login = 1;\u000a      need_initspawn = 1;\u000a      need_runlevel = 1;\u000a      need_clockchange = 1;\u000a      need_users = 1;\u000a      include_mesg = 1;\u000a      goto LAB_00401e65;\u000a    case 0x62:\u000a      goto switchD_00401e13_caseD_62;\u000a    case 100:\u000aLAB_00401e65:\u000a      need_deadprocs = 1;\u000a      include_idle = 1;\u000a      uVar6 = 0;\u000a      puVar4 = &include_exit;\u000a      goto switchD_00401e13_caseD_62;\u000a    case 0x6c:\u000a      need_login = 1;\u000a      goto LAB_00401edb;\u000a    case 0x6d:\u000a      puVar4 = &my_line_only;\u000a      break;\u000a    case 0x70:\u000a      uVar6 = 0;\u000a      puVar4 = &need_initspawn;\u000a      goto switchD_00401e13_caseD_62;\u000a    case 0x71:\u000a      puVar4 = &short_list;\u000a      break;\u000a    case 0x72:\u000a      need_runlevel = 1;\u000a      goto LAB_00401edb;\u000a    case 0x73:\u000a      puVar4 = &short_output;\u000a      break;\u000a    case 0x74:\u000a      uVar6 = 0;\u000a      puVar4 = &need_clockchange;\u000a      goto switchD_00401e13_caseD_62;\u000a    case 0x75:\u000a      need_users = 1;\u000aLAB_00401edb:\u000a      uVar6 = 0;\u000a      puVar4 = &include_idle;\u000a      goto switchD_00401e13_caseD_62;\u000a    case 0x80:\u000a      puVar4 = &do_lookup;\u000a      break;\u000a    case -1:\u000a      if ((char)uVar7 != 0) {\u000a        need_users = 1;\u000a        short_output = 1;\u000a      }\u000a      if (include_exit == 1) {\u000a        short_output = 0;\u000a      }\u000a      uStack48 = 0x401f14;\u000a      _Var2 = hard_locale();\u000a      time_format = "%b %e %H:%M";\u000a      if (_Var2 != false) {\u000a        time_format = "%Y-%m-%d %H:%M";\u000a      }\u000a      time_format_width = (uint)_Var2 * 4 + 0xc;\u000a      iVar3 = (int)((ulong)argv & 0xffffffff) - optind;\u000a      if (1 < iVar3 + 1U) {\u000a        if (iVar3 == 1) {\u000a          file = in_RSI[(long)optind];\u000a          goto LAB_00401f77;\u000a        }\u000a        if (iVar3 != 2) {\u000a          uStack48 = 0x401ff9;\u000a          pcStack56 = (char *)dcgettext(0,"extra operand %s",5);\u000a          uStack48 = 0x40200d;\u000a          file = quote(in_RSI[(long)optind + 2]);\u000a          uStack48 = 0x40201e;\u000a          error(0,0,pcStack56,file);\u000a          file = (char *)0x1;\u000a          uStack48 = 0x402028;\u000a          usage();\u000a          uStack48 = uVar7;\u000a          iVar3 = read_utmp(file,&sStack64,&pSStack72);\u000a          if (iVar3 != 0) {\u000a            puVar5 = (uint *)__errno_location();\u000a            uVar1 = *puVar5;\u000a            file = quotearg_n_style_colon((char *)0x0);\u000a            error(1,(ulong)uVar1,0x406bf8,file);\u000a          }\u000a          if (short_list == 1) {\u000a            list_entries_who(sStack64,pSStack72);\u000a          }\u000a          else {\u000a            scan_entries(sStack64,pSStack72);\u000a          }\u000a          free(pSStack72);\u000a          return extraout_EAX;\u000a        }\u000a        my_line_only = 1;\u000a      }\u000a      file = "/var/run/utmp";\u000aLAB_00401f77:\u000a      uStack48 = 0x401f7c;\u000a      who(file);\u000a      return 0;\u000a    }\u000a    uVar6 = uVar7 & 0xff;\u000aswitchD_00401e13_caseD_62:\u000a    *puVar4 = 1;\u000a    uVar7 = uVar6;\u000a  }\u000a  if (iVar3 != -0x83) {\u000a    if (iVar3 == -0x82) {\u000a      uStack48 = 0x401f9e;\u000a      usage(0);\u000a    }\u000aswitchD_00401e13_caseD_0:\u000a    uStack48 = 0x401fa8;\u000a    usage(1);\u000a  }\u000a  uStack48 = 0;\u000a  pcStack56 = "Michael Stone";\u000a  sStack64 = 0x401fdd;\u000a  version_etc(stdout,"who","GNU coreutils",Version,"Joseph Arceneaux","David MacKenzie");\u000a                    /* WARNING: Subroutine does not return */\u000a  uStack48 = 0x401fe8;\u000a  exit(0);\u000a}\u000a\u000a
p759
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV R15D,EDI\nMOV RDI,qword ptr [R14]\nCALL 0x004032f0\nMOV EDI,0x6\nMOV ESI,0x4072c9\nCALL 0x00401880\nMOV EDI,0x4065c5\nMOV ESI,0x40659a\nCALL 0x00401660\nMOV EDI,0x4065c5\nCALL 0x00401630\nMOV EDI,0x403130\nCALL 0x004059e0\nMOV BPL,0x1\nJMP 0x00401de5\nMOV byte ptr [RAX],0x1\nMOV EBP,EBX\nXOR EBX,EBX\nMOV EDX,0x4065b2\nMOV ECX,0x405e50\nXOR R8D,R8D\nMOV EDI,R15D\nMOV RSI,R14\nCALL 0x004016a0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x81\nJA 0x00401f89\nMOV EAX,0x6092f0\nJMP qword ptr [0x405a40 + RCX*0x8]\nMOV EAX,0x6092f7\nJMP 0x00401ec0\nMOV byte ptr [0x006092f0],0x1\nMOV byte ptr [0x006092f1],0x1\nMOV byte ptr [0x006092f2],0x1\nMOV byte ptr [0x006092f3],0x1\nMOV byte ptr [0x006092f4],0x1\nMOV byte ptr [0x006092f5],0x1\nMOV byte ptr [0x006092f6],0x1\nMOV byte ptr [0x006092f7],0x1\nJMP 0x00401e65\nMOV byte ptr [0x006092f1],0x1\nMOV byte ptr [0x006092f8],0x1\nXOR EBX,EBX\nMOV EAX,0x6092f9\nJMP 0x00401de0\nMOV byte ptr [0x006092f2],0x1\nJMP 0x00401edb\nMOV EAX,0x6092fb\nJMP 0x00401ec0\nMOV byte ptr [0x006092f4],0x1\nJMP 0x00401edb\nMOV EAX,0x6092fd\nJMP 0x00401ec0\nMOV EAX,0x6092fe\nJMP 0x00401ec0\nMOV EAX,0x6092fa\nJMP 0x00401ec0\nXOR EBX,EBX\nMOV EAX,0x6092f3\nJMP 0x00401de0\nMOV EAX,0x6092fc\nNOP word ptr [RAX + RAX*0x1]\nMOV BL,BPL\nJMP 0x00401de0\nXOR EBX,EBX\nMOV EAX,0x6092f5\nJMP 0x00401de0\nMOV byte ptr [0x006092f6],0x1\nXOR EBX,EBX\nMOV EAX,0x6092f8\nJMP 0x00401de0\nTEST BPL,BPL\nJZ 0x00401efa\nMOV byte ptr [0x006092f6],0x1\nMOV byte ptr [0x006092fd],0x1\nCMP byte ptr [0x006092f9],0x1\nJNZ 0x00401f0a\nMOV byte ptr [0x006092fd],0x0\nMOV EDI,0x2\nCALL 0x004031f0\nMOV ECX,0x4065fe\nMOV EDX,0x40660d\nTEST AL,AL\nCMOVNZ RDX,RCX\nMOVZX EAX,AL\nLEA EAX,[0xc + RAX*0x4]\nMOV qword ptr [0x00609300],RDX\nMOV dword ptr [0x00609308],EAX\nMOVSXD RAX,dword ptr [0x006092d0]\nSUB R15D,EAX\nLEA ECX,[R15 + 0x1]\nCMP ECX,0x2\nJC 0x00401f65\nCMP R15D,0x1\nJZ 0x00401f71\nCMP R15D,0x2\nJNZ 0x00401fe8\nMOV byte ptr [0x006092fb],0x1\nMOV EDI,0x40657a\nMOV ESI,0x1\nJMP 0x00401f77\nMOV RDI,qword ptr [R14 + RAX*0x8]\nXOR ESI,ESI\nCALL 0x00402030\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x00401fa8\nCMP EAX,0xffffff7e\nJNZ 0x00401f9e\nXOR EDI,EDI\nCALL 0x00401aa0\nMOV EDI,0x1\nCALL 0x00401aa0\nMOV RDI,qword ptr [0x006092c8]\nMOV RCX,qword ptr [0x00609258]\nMOV ESI,0x406596\nMOV EDX,0x4065c1\nMOV R8D,0x4065cf\nMOV R9D,0x4065e0\nMOV EAX,0x0\nPUSH 0x0\nPUSH 0x4065f0\nCALL 0x00404fe0\nADD RSP,0x10\nXOR EDI,EDI\nCALL 0x00401900\nXOR EDI,EDI\nMOV ESI,0x406619\nMOV EDX,0x5\nCALL 0x00401670\nMOV RBX,RAX\nMOVSXD RAX,dword ptr [0x006092d0]\nMOV RDI,qword ptr [R14 + RAX*0x8 + 0x10]\nCALL 0x004047e0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004018c0\nMOV EDI,0x1\nCALL 0x00401aa0\nNOP dword ptr [RAX + RAX*0x1]\n'
p760
S'55\n41 57\n41 56\n53\n50\n49 89 f6\n41 89 ff\n49 8b 3e\ne8 4b 15 00 00\nbf 06 00 00 00\nbe c9 72 40 00\ne8 cc fa ff ff\nbf c5 65 40 00\nbe 9a 65 40 00\ne8 9d f8 ff ff\nbf c5 65 40 00\ne8 63 f8 ff ff\nbf 30 31 40 00\ne8 09 3c 00 00\n40 b5 01\neb 09\nc6 00 01\n89 dd\n31 db\nba b2 65 40 00\nb9 50 5e 40 00\n45 31 c0\n44 89 ff\n4c 89 f6\ne8 a1 f8 ff ff\n8d 48 01\n81 f9 81 00 00 00\n0f 87 7b 01 00 00\nb8 f0 92 60 00\nff 24 cd 40 5a 40 00\nb8 f7 92 60 00\ne9 9c 00 00 00\nc6 05 c5 74 20 00 01\nc6 05 bf 74 20 00 01\nc6 05 b9 74 20 00 01\nc6 05 b3 74 20 00 01\nc6 05 ad 74 20 00 01\nc6 05 a7 74 20 00 01\nc6 05 a1 74 20 00 01\nc6 05 9b 74 20 00 01\neb 07\nc6 05 8c 74 20 00 01\nc6 05 8c 74 20 00 01\n31 db\nb8 f9 92 60 00\ne9 68 ff ff ff\nc6 05 73 74 20 00 01\neb 5a\nb8 fb 92 60 00\neb 38\nc6 05 65 74 20 00 01\neb 4a\nb8 fd 92 60 00\neb 28\nb8 fe 92 60 00\neb 21\nb8 fa 92 60 00\neb 1a\n31 db\nb8 f3 92 60 00\ne9 2e ff ff ff\nb8 fc 92 60 00\n66 0f 1f 84 00 00 00 00 00\n40 88 eb\ne9 18 ff ff ff\n31 db\nb8 f5 92 60 00\ne9 0c ff ff ff\nc6 05 1b 74 20 00 01\n31 db\nb8 f8 92 60 00\ne9 f9 fe ff ff\n40 84 ed\n74 0e\nc6 05 03 74 20 00 01\nc6 05 03 74 20 00 01\n80 3d f8 73 20 00 01\n75 07\nc6 05 f3 73 20 00 00\nbf 02 00 00 00\ne8 dc 12 00 00\nb9 fe 65 40 00\nba 0d 66 40 00\n84 c0\n48 0f 45 d1\n0f b6 c0\n8d 04 85 0c 00 00 00\n48 89 15 cb 73 20 00\n89 05 cd 73 20 00\n48 63 05 8e 73 20 00\n41 29 c7\n41 8d 4f 01\n83 f9 02\n72 17\n41 83 ff 01\n74 1d\n41 83 ff 02\n0f 85 8a 00 00 00\nc6 05 96 73 20 00 01\nbf 7a 65 40 00\nbe 01 00 00 00\neb 06\n49 8b 3c c6\n31 f6\ne8 b4 00 00 00\n31 c0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n3d 7d ff ff ff\n74 18\n3d 7e ff ff ff\n75 07\n31 ff\ne8 02 fb ff ff\nbf 01 00 00 00\ne8 f8 fa ff ff\n48 8b 3d 19 73 20 00\n48 8b 0d a2 72 20 00\nbe 96 65 40 00\nba c1 65 40 00\n41 b8 cf 65 40 00\n41 b9 e0 65 40 00\nb8 00 00 00 00\n6a 00\n68 f0 65 40 00\ne8 03 30 00 00\n48 83 c4 10\n31 ff\ne8 18 f9 ff ff\n31 ff\nbe 19 66 40 00\nba 05 00 00 00\ne8 77 f6 ff ff\n48 89 c3\n48 63 05 cd 72 20 00\n49 8b 7c c6 10\ne8 d3 27 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 a2 f8 ff ff\nbf 01 00 00 00\ne8 78 fa ff ff\n0f 1f 84 00 00 00 00 00\n'
p761
S'.text:0000000000401d90\n.text:0000000000401d91\n.text:0000000000401d93\n.text:0000000000401d95\n.text:0000000000401d96\n.text:0000000000401d97\n.text:0000000000401d9a\n.text:0000000000401d9d\n.text:0000000000401da0\n.text:0000000000401da5\n.text:0000000000401daa\n.text:0000000000401daf\n.text:0000000000401db4\n.text:0000000000401db9\n.text:0000000000401dbe\n.text:0000000000401dc3\n.text:0000000000401dc8\n.text:0000000000401dcd\n.text:0000000000401dd2\n.text:0000000000401dd7\n.text:0000000000401dda\n.text:0000000000401de0\n.text:0000000000401de3\n.text:0000000000401de5\n.text:0000000000401de7\n.text:0000000000401dec\n.text:0000000000401df1\n.text:0000000000401df4\n.text:0000000000401df7\n.text:0000000000401dfa\n.text:0000000000401dff\n.text:0000000000401e02\n.text:0000000000401e08\n.text:0000000000401e0e\n.text:0000000000401e13\n.text:0000000000401e1a\n.text:0000000000401e1f\n.text:0000000000401e24\n.text:0000000000401e2b\n.text:0000000000401e32\n.text:0000000000401e39\n.text:0000000000401e40\n.text:0000000000401e47\n.text:0000000000401e4e\n.text:0000000000401e55\n.text:0000000000401e5c\n.text:0000000000401e5e\n.text:0000000000401e65\n.text:0000000000401e6c\n.text:0000000000401e6e\n.text:0000000000401e73\n.text:0000000000401e78\n.text:0000000000401e7f\n.text:0000000000401e81\n.text:0000000000401e86\n.text:0000000000401e88\n.text:0000000000401e8f\n.text:0000000000401e91\n.text:0000000000401e96\n.text:0000000000401e98\n.text:0000000000401e9d\n.text:0000000000401e9f\n.text:0000000000401ea4\n.text:0000000000401ea6\n.text:0000000000401ea8\n.text:0000000000401ead\n.text:0000000000401eb2\n.text:0000000000401eb7\n.text:0000000000401ec0\n.text:0000000000401ec3\n.text:0000000000401ec8\n.text:0000000000401eca\n.text:0000000000401ecf\n.text:0000000000401ed4\n.text:0000000000401edb\n.text:0000000000401edd\n.text:0000000000401ee2\n.text:0000000000401ee7\n.text:0000000000401eea\n.text:0000000000401eec\n.text:0000000000401ef3\n.text:0000000000401efa\n.text:0000000000401f01\n.text:0000000000401f03\n.text:0000000000401f0a\n.text:0000000000401f0f\n.text:0000000000401f14\n.text:0000000000401f19\n.text:0000000000401f1e\n.text:0000000000401f20\n.text:0000000000401f24\n.text:0000000000401f27\n.text:0000000000401f2e\n.text:0000000000401f35\n.text:0000000000401f3b\n.text:0000000000401f42\n.text:0000000000401f45\n.text:0000000000401f49\n.text:0000000000401f4c\n.text:0000000000401f4e\n.text:0000000000401f52\n.text:0000000000401f54\n.text:0000000000401f58\n.text:0000000000401f5e\n.text:0000000000401f65\n.text:0000000000401f6a\n.text:0000000000401f6f\n.text:0000000000401f71\n.text:0000000000401f75\n.text:0000000000401f77\n.text:0000000000401f7c\n.text:0000000000401f7e\n.text:0000000000401f82\n.text:0000000000401f83\n.text:0000000000401f85\n.text:0000000000401f87\n.text:0000000000401f88\n.text:0000000000401f89\n.text:0000000000401f8e\n.text:0000000000401f90\n.text:0000000000401f95\n.text:0000000000401f97\n.text:0000000000401f99\n.text:0000000000401f9e\n.text:0000000000401fa3\n.text:0000000000401fa8\n.text:0000000000401faf\n.text:0000000000401fb6\n.text:0000000000401fbb\n.text:0000000000401fc0\n.text:0000000000401fc6\n.text:0000000000401fcc\n.text:0000000000401fd1\n.text:0000000000401fd3\n.text:0000000000401fd8\n.text:0000000000401fdd\n.text:0000000000401fe1\n.text:0000000000401fe3\n.text:0000000000401fe8\n.text:0000000000401fea\n.text:0000000000401fef\n.text:0000000000401ff4\n.text:0000000000401ff9\n.text:0000000000401ffc\n.text:0000000000402003\n.text:0000000000402008\n.text:000000000040200d\n.text:0000000000402010\n.text:0000000000402012\n.text:0000000000402014\n.text:0000000000402016\n.text:0000000000402019\n.text:000000000040201e\n.text:0000000000402023\n.text:0000000000402028\n'
p762
tp763
sS'realloc'
p764
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p765
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00609198)();\u000a  return pvVar1;\u000a}\u000a\u000a
p766
S'JMP qword ptr [0x00609198]\n'
p767
S'ff 25 32 79 20 00\n'
p768
S'.plt:0000000000401860\n'
p769
tp770
sS'c_isupper'
p771
(S'\n__stdcall c_isupper()\n'
p772
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p773
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p774
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p775
S'.text:0000000000403020\n.text:0000000000403023\n.text:0000000000403026\n.text:0000000000403029\n'
p776
tp777
sS'xcharalloc'
p778
(S'\n__stdcall xcharalloc(size_t n)\n'
p779
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p780
S'JMP 0x00405110\n'
p781
S'e9 2b ff ff ff\n'
p782
S'.text:00000000004051e0\n'
p783
tp784
sS'__fprintf_chk'
p785
(S'\n__stdcall __fprintf_chk()\n'
p786
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_006091f8)();\u000a  return;\u000a}\u000a\u000a
p787
S'JMP qword ptr [0x006091f8]\n'
p788
S'ff 25 d2 78 20 00\n'
p789
S'.plt:0000000000401920\n'
p790
tp791
sS'get_charset_aliases'
p792
(S'\n__stdcall get_charset_aliases()\n'
p793
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00405794_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00405794_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00405794_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00405794_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00405794_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00405794_caseD_9;\u000a      case -1:\u000a        goto switchD_00405794_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_004057ed:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_004057f3:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00405794_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_004057f3;\u000a  }\u000a  goto LAB_004057ed;\u000a}\u000a\u000a
p794
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x00609500]\nTEST R15,R15\nJNZ 0x00405802\nMOV EDI,0x40764c\nCALL 0x00401570\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004055b8\nCMP byte ptr [RBX],0x0\nJNZ 0x004055bd\nMOV EBX,0x40765c\nMOV RDI,RBX\nCALL 0x00401690\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x004055d7\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x004055d9\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401800\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040562d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004017b0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00405638\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00405655\nMOV R15D,0x4072c9\nJMP 0x004057fb\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004018d0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004057ed\nMOV ESI,0x406bf2\nMOV EDI,EBP\nCALL 0x00401870\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004057b4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00405780\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004015f0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004015f0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00405780\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401830\nMOV ESI,0x40766b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401710\nCMP EAX,0x2\nJL 0x004057d4\nMOV RDI,R12\nCALL 0x00401690\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401690\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040575d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401860\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x004056a4\nJMP 0x004057bd\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401800\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x004056a4\nJMP 0x004057bd\nMOV RDI,RBX\nCALL 0x00401620\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x004056e7\nJMP qword ptr [0x407510 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401620\nCMP EAX,-0x1\nJZ 0x004057d4\nCMP EAX,0xa\nJNZ 0x004057a0\nJMP 0x00405780\nMOV EDI,EBP\nCALL 0x00401720\nJMP 0x004057ed\nMOV RDI,R15\nCALL 0x00401580\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00405820\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004057ed\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x004057f3\nMOV R15D,0x4072c9\nMOV RDI,R13\nCALL 0x00401580\nMOV qword ptr [0x00609500],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p795
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 68 3f 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 4c 76 40 00\ne8 c5 bf ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 5c 76 40 00\n48 89 df\ne8 cb c0 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 19 c2 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 b3 c1 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf c9 72 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 6c c2 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe f2 6b 40 00\n89 ef\ne8 f6 c1 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 2b bf ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 1b bf ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 3f c1 ff ff\nbe 6b 76 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 0a c0 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 79 bf ff ff\n49 89 c4\n48 89 ef\ne8 6e bf ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 16 c1 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 95 c0 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 98 be ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 10 75 40 00\n48 89 df\ne8 78 be ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 65 bf ff ff\neb 30\n4c 89 ff\ne8 bb bd ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 44 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf c9 72 40 00\n4c 89 ef\ne8 85 bd ff ff\n4c 89 3d fe 3c 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p796
S'.text:0000000000405580\n.text:0000000000405581\n.text:0000000000405583\n.text:0000000000405585\n.text:0000000000405587\n.text:0000000000405589\n.text:000000000040558a\n.text:0000000000405591\n.text:0000000000405598\n.text:000000000040559b\n.text:00000000004055a1\n.text:00000000004055a6\n.text:00000000004055ab\n.text:00000000004055ae\n.text:00000000004055b1\n.text:00000000004055b3\n.text:00000000004055b6\n.text:00000000004055b8\n.text:00000000004055bd\n.text:00000000004055c0\n.text:00000000004055c5\n.text:00000000004055c8\n.text:00000000004055cb\n.text:00000000004055cd\n.text:00000000004055d2\n.text:00000000004055d5\n.text:00000000004055d7\n.text:00000000004055d9\n.text:00000000004055dd\n.text:00000000004055e2\n.text:00000000004055e7\n.text:00000000004055ea\n.text:00000000004055ed\n.text:00000000004055ef\n.text:00000000004055f2\n.text:00000000004055f5\n.text:00000000004055f8\n.text:00000000004055fd\n.text:0000000000405600\n.text:0000000000405603\n.text:0000000000405606\n.text:0000000000405608\n.text:000000000040560e\n.text:0000000000405618\n.text:000000000040561d\n.text:0000000000405627\n.text:000000000040562b\n.text:000000000040562d\n.text:0000000000405633\n.text:0000000000405638\n.text:0000000000405642\n.text:0000000000405647\n.text:0000000000405651\n.text:0000000000405655\n.text:000000000040565a\n.text:000000000040565c\n.text:000000000040565f\n.text:0000000000405664\n.text:0000000000405666\n.text:0000000000405668\n.text:000000000040566e\n.text:0000000000405673\n.text:0000000000405675\n.text:000000000040567a\n.text:000000000040567d\n.text:0000000000405680\n.text:0000000000405686\n.text:000000000040568b\n.text:0000000000405690\n.text:0000000000405692\n.text:0000000000405697\n.text:000000000040569a\n.text:000000000040569f\n.text:00000000004056a4\n.text:00000000004056a9\n.text:00000000004056ac\n.text:00000000004056af\n.text:00000000004056b2\n.text:00000000004056b5\n.text:00000000004056b8\n.text:00000000004056bd\n.text:00000000004056c0\n.text:00000000004056c5\n.text:00000000004056c8\n.text:00000000004056cd\n.text:00000000004056d0\n.text:00000000004056d5\n.text:00000000004056da\n.text:00000000004056dd\n.text:00000000004056e2\n.text:00000000004056e7\n.text:00000000004056e9\n.text:00000000004056ec\n.text:00000000004056f1\n.text:00000000004056f6\n.text:00000000004056f8\n.text:00000000004056fb\n.text:00000000004056fe\n.text:0000000000405701\n.text:0000000000405706\n.text:0000000000405709\n.text:000000000040570f\n.text:0000000000405712\n.text:0000000000405717\n.text:000000000040571a\n.text:000000000040571d\n.text:0000000000405722\n.text:0000000000405725\n.text:000000000040572a\n.text:000000000040572f\n.text:0000000000405732\n.text:0000000000405734\n.text:0000000000405738\n.text:000000000040573d\n.text:0000000000405742\n.text:0000000000405745\n.text:000000000040574a\n.text:000000000040574d\n.text:0000000000405752\n.text:0000000000405755\n.text:000000000040575b\n.text:000000000040575d\n.text:0000000000405762\n.text:0000000000405766\n.text:000000000040576b\n.text:000000000040576e\n.text:0000000000405771\n.text:0000000000405777\n.text:0000000000405780\n.text:0000000000405783\n.text:0000000000405788\n.text:000000000040578b\n.text:000000000040578e\n.text:0000000000405794\n.text:00000000004057a0\n.text:00000000004057a3\n.text:00000000004057a8\n.text:00000000004057ab\n.text:00000000004057ad\n.text:00000000004057b0\n.text:00000000004057b2\n.text:00000000004057b4\n.text:00000000004057b6\n.text:00000000004057bb\n.text:00000000004057bd\n.text:00000000004057c0\n.text:00000000004057c5\n.text:00000000004057c7\n.text:00000000004057cc\n.text:00000000004057cf\n.text:00000000004057d4\n.text:00000000004057d7\n.text:00000000004057dc\n.text:00000000004057e1\n.text:00000000004057e4\n.text:00000000004057e6\n.text:00000000004057eb\n.text:00000000004057ed\n.text:00000000004057f3\n.text:00000000004057f6\n.text:00000000004057fb\n.text:0000000000405802\n.text:0000000000405805\n.text:000000000040580c\n.text:000000000040580d\n.text:000000000040580f\n.text:0000000000405811\n.text:0000000000405813\n.text:0000000000405815\n.text:0000000000405816\n'
p797
tp798
sS'nl_langinfo'
p799
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p800
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00609178)();\u000a  return pcVar1;\u000a}\u000a\u000a
p801
S'JMP qword ptr [0x00609178]\n'
p802
S'ff 25 52 79 20 00\n'
p803
S'.plt:0000000000401820\n'
p804
tp805
sS'c_isalnum'
p806
(S'\n__stdcall c_isalnum()\n'
p807
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p808
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00402f3b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00402f3b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00402f3a\nXOR EAX,EAX\nRET\n'
p809
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p810
S'.text:0000000000402f20\n.text:0000000000402f22\n.text:0000000000402f25\n.text:0000000000402f28\n.text:0000000000402f2a\n.text:0000000000402f34\n.text:0000000000402f38\n.text:0000000000402f3a\n.text:0000000000402f3b\n.text:0000000000402f3e\n.text:0000000000402f41\n.text:0000000000402f43\n.text:0000000000402f45\n'
p811
tp812
sS'x2realloc'
p813
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p814
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p815
S'MOV EDX,0x1\nJMP 0x00405180\n'
p816
S'ba 01 00 00 00\neb 89\n'
p817
S'.text:00000000004051f0\n.text:00000000004051f5\n'
p818
tp819
sS'strlen'
p820
(S'\n__stdcall strlen(char * __s)\n'
p821
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_006090b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p822
S'JMP qword ptr [0x006090b0]\n'
p823
S'ff 25 1a 7a 20 00\n'
p824
S'.plt:0000000000401690\n'
p825
tp826
sS'memcmp'
p827
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p828
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_00609108)();\u000a  return iVar1;\u000a}\u000a\u000a
p829
S'JMP qword ptr [0x00609108]\n'
p830
S'ff 25 c2 79 20 00\n'
p831
S'.plt:0000000000401740\n'
p832
tp833
sS'quotearg_n_style_mem'
p834
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p835
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p836
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00404520\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004042f0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p837
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p838
S'.text:0000000000404580\n.text:0000000000404581\n.text:0000000000404583\n.text:0000000000404585\n.text:0000000000404586\n.text:000000000040458a\n.text:000000000040458d\n.text:0000000000404590\n.text:0000000000404592\n.text:0000000000404595\n.text:0000000000404598\n.text:000000000040459d\n.text:000000000040459f\n.text:00000000004045a2\n.text:00000000004045a5\n.text:00000000004045a8\n.text:00000000004045ad\n.text:00000000004045b1\n.text:00000000004045b2\n.text:00000000004045b4\n.text:00000000004045b6\n.text:00000000004045b7\n'
p839
tp840
sS'_exit'
p841
(S'\n__stdcall _exit(int __status)\n'
p842
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00609058)();\u000a  return;\u000a}\u000a\u000a
p843
S'JMP qword ptr [0x00609058]\n'
p844
S'ff 25 72 7a 20 00\n'
p845
S'.plt:00000000004015e0\n'
p846
tp847
sS'__errno_location'
p848
(S'\n__stdcall __errno_location()\n'
p849
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00609040)();\u000a  return piVar1;\u000a}\u000a\u000a
p850
S'JMP qword ptr [0x00609040]\n'
p851
S'ff 25 8a 7a 20 00\n'
p852
S'.plt:00000000004015b0\n'
p853
tp854
sS'getutxent'
p855
(S'\n__stdcall getutxent()\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000autmpx * getutxent(void)\u000a\u000a{\u000a  utmpx *puVar1;\u000a  \u000a  puVar1 = (utmpx *)(*(code *)PTR_getutxent_006091c0)();\u000a  return puVar1;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x006091c0]\n'
p858
S'ff 25 0a 79 20 00\n'
p859
S'.plt:00000000004018b0\n'
p860
tp861
sS'x2nrealloc'
p862
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p863
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p864
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x004051ac\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x004051d9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004051ca\nTEST RCX,RCX\nJNZ 0x004051ca\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00405150\nPUSH RAX\nCALL 0x004052a0\n'
p865
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p866
S'.text:0000000000405180\n.text:0000000000405183\n.text:0000000000405186\n.text:0000000000405189\n.text:000000000040518b\n.text:0000000000405195\n.text:0000000000405197\n.text:000000000040519a\n.text:000000000040519d\n.text:000000000040519f\n.text:00000000004051a2\n.text:00000000004051a5\n.text:00000000004051aa\n.text:00000000004051ac\n.text:00000000004051af\n.text:00000000004051b1\n.text:00000000004051b6\n.text:00000000004051b8\n.text:00000000004051bb\n.text:00000000004051bd\n.text:00000000004051c4\n.text:00000000004051c7\n.text:00000000004051ca\n.text:00000000004051cd\n.text:00000000004051d1\n.text:00000000004051d4\n.text:00000000004051d9\n.text:00000000004051da\n'
p867
tp868
sS'xrealloc'
p869
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p870
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p871
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00405167\nTEST RBX,RBX\nJNZ 0x00405167\nCALL 0x00401580\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401860\nTEST RBX,RBX\nJZ 0x00405179\nTEST RAX,RAX\nJZ 0x0040517b\nPOP RBX\nRET\nCALL 0x004052a0\n'
p872
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 1d c4 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 f1 c6 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p873
S'.text:0000000000405150\n.text:0000000000405151\n.text:0000000000405154\n.text:0000000000405157\n.text:0000000000405159\n.text:000000000040515c\n.text:000000000040515e\n.text:0000000000405163\n.text:0000000000405165\n.text:0000000000405166\n.text:0000000000405167\n.text:000000000040516a\n.text:000000000040516f\n.text:0000000000405172\n.text:0000000000405174\n.text:0000000000405177\n.text:0000000000405179\n.text:000000000040517a\n.text:000000000040517b\n'
p874
tp875
sS'quotearg_n_options'
p876
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p877
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p878
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x004015b0\nTEST R12D,R12D\nJS 0x004044a1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x00609268]\nCMP dword ptr [0x00609270],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x004043bb\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x609278\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00405150\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x00609268],R15\nJNZ 0x00404382\nMOVUPS XMM0,xmmword ptr [0x00609278]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x00609270]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401700\nMOV dword ptr [0x00609270],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00403510\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040441d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040448b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x609400\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00404448\nCALL 0x00401580\nMOV RDI,R15\nCALL 0x004051e0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00403510\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004015a0\n'
p879
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 a1 d2 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 3e 4f 20 00\n44 39 25 3f 4f 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 78 92 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 e8 0d 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d f3 4e 20 00\n75 0b\n0f 10 05 fa 4e 20 00\n41 0f 11 07\n8b 05 e8 4e 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 5d d3 ff ff\n89 1d c7 4e 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 00 94 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 38 d1 ff ff\n4c 89 ff\ne8 90 0d 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 fa d0 ff ff\n'
p880
S'.text:00000000004042f0\n.text:00000000004042f1\n.text:00000000004042f3\n.text:00000000004042f5\n.text:00000000004042f7\n.text:00000000004042f9\n.text:00000000004042fa\n.text:00000000004042fe\n.text:0000000000404301\n.text:0000000000404304\n.text:0000000000404307\n.text:000000000040430a\n.text:000000000040430f\n.text:0000000000404312\n.text:0000000000404318\n.text:000000000040431d\n.text:000000000040431f\n.text:0000000000404323\n.text:000000000040432a\n.text:0000000000404331\n.text:0000000000404336\n.text:000000000040433b\n.text:0000000000404340\n.text:0000000000404342\n.text:0000000000404347\n.text:000000000040434a\n.text:000000000040434d\n.text:0000000000404353\n.text:0000000000404355\n.text:0000000000404358\n.text:000000000040435c\n.text:000000000040435f\n.text:0000000000404363\n.text:0000000000404368\n.text:000000000040436b\n.text:000000000040436e\n.text:0000000000404375\n.text:0000000000404377\n.text:000000000040437e\n.text:0000000000404382\n.text:0000000000404388\n.text:000000000040438b\n.text:000000000040438f\n.text:0000000000404392\n.text:0000000000404395\n.text:0000000000404399\n.text:000000000040439b\n.text:000000000040439e\n.text:00000000004043a3\n.text:00000000004043a9\n.text:00000000004043ac\n.text:00000000004043b1\n.text:00000000004043b6\n.text:00000000004043bb\n.text:00000000004043be\n.text:00000000004043c2\n.text:00000000004043c6\n.text:00000000004043cb\n.text:00000000004043cf\n.text:00000000004043d3\n.text:00000000004043d7\n.text:00000000004043db\n.text:00000000004043df\n.text:00000000004043e4\n.text:00000000004043e7\n.text:00000000004043ea\n.text:00000000004043ed\n.text:00000000004043f2\n.text:00000000004043f5\n.text:00000000004043f8\n.text:00000000004043fb\n.text:00000000004043fc\n.text:0000000000404401\n.text:0000000000404405\n.text:0000000000404408\n.text:000000000040440b\n.text:000000000040440d\n.text:0000000000404412\n.text:0000000000404416\n.text:000000000040441b\n.text:000000000040441d\n.text:0000000000404421\n.text:0000000000404426\n.text:0000000000404429\n.text:000000000040442c\n.text:0000000000404431\n.text:0000000000404436\n.text:0000000000404439\n.text:000000000040443e\n.text:0000000000404441\n.text:0000000000404443\n.text:0000000000404448\n.text:000000000040444b\n.text:0000000000404450\n.text:0000000000404453\n.text:0000000000404456\n.text:000000000040445b\n.text:000000000040445e\n.text:0000000000404462\n.text:0000000000404465\n.text:0000000000404468\n.text:000000000040446d\n.text:0000000000404472\n.text:0000000000404477\n.text:000000000040447a\n.text:000000000040447d\n.text:000000000040447e\n.text:0000000000404483\n.text:0000000000404487\n.text:000000000040448b\n.text:000000000040448f\n.text:0000000000404492\n.text:0000000000404496\n.text:0000000000404497\n.text:0000000000404499\n.text:000000000040449b\n.text:000000000040449d\n.text:000000000040449f\n.text:00000000004044a0\n.text:00000000004044a1\n'
p881
tp882
sS'strcmp'
p883
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p884
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00609130)();\u000a  return iVar1;\u000a}\u000a\u000a
p885
S'JMP qword ptr [0x00609130]\n'
p886
S'ff 25 9a 79 20 00\n'
p887
S'.plt:0000000000401790\n'
p888
tp889
sS'list_entries_who'
p890
(S'\n__stdcall list_entries_who(size_t n, STRUCT_UTMP * utmp_buf)\n'
p891
V\u000avoid list_entries_who(size_t n,STRUCT_UTMP *utmp_buf)\u000a\u000a{\u000a  char *__ptr;\u000a  undefined8 uVar1;\u000a  undefined *puVar2;\u000a  long lVar3;\u000a  \u000a  if (n == 0) {\u000a    lVar3 = 0;\u000a  }\u000a  else {\u000a    puVar2 = (undefined *)0x4072c9;\u000a    lVar3 = 0;\u000a    do {\u000a      n = n - 1;\u000a      if ((utmp_buf->ut_user[0] != 0) && (utmp_buf->ut_type == 7)) {\u000a        __ptr = extract_trimmed_name(utmp_buf);\u000a        __printf_chk(1,&DAT_004067f2,puVar2,__ptr);\u000a        free(__ptr);\u000a        lVar3 = lVar3 + 1;\u000a        puVar2 = &DAT_00406887;\u000a      }\u000a      utmp_buf = utmp_buf + 1;\u000a    } while (n != 0);\u000a  }\u000a  uVar1 = dcgettext(0,"\u005cn# users=%lu\u005cn",5);\u000a  __printf_chk(1,uVar1,lVar3,uVar1);\u000a  return;\u000a}\u000a\u000a
p892
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV RBX,RSI\nMOV R15,RDI\nTEST R15,R15\nJZ 0x00402122\nMOV R12D,0x4072c9\nXOR R14D,R14D\nNOP dword ptr [RAX]\nDEC R15\nCMP byte ptr [RBX + 0x2c],0x0\nJZ 0x00402114\nMOVZX EAX,word ptr [RBX]\nCMP EAX,0x7\nJNZ 0x00402114\nMOV RDI,RBX\nCALL 0x00405320\nMOV R13,RAX\nMOV EDI,0x1\nMOV ESI,0x4067f2\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R13\nCALL 0x00401890\nMOV RDI,R13\nCALL 0x00401580\nINC R14\nMOV R12D,0x406887\nADD RBX,0x180\nTEST R15,R15\nJNZ 0x004020d0\nJMP 0x00402125\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x4067f7\nMOV EDX,0x5\nCALL 0x00401670\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RDX,R14\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nJMP 0x00401890\n'
p893
S'41 57\n41 56\n41 55\n41 54\n53\n48 89 f3\n49 89 ff\n4d 85 ff\n74 5e\n41 bc c9 72 40 00\n45 31 f6\n0f 1f 00\n49 ff cf\n80 7b 2c 00\n74 3b\n0f b7 03\n83 f8 07\n75 33\n48 89 df\ne8 37 32 00 00\n49 89 c5\nbf 01 00 00 00\nbe f2 67 40 00\n31 c0\n4c 89 e2\n4c 89 e9\ne8 8d f7 ff ff\n4c 89 ef\ne8 75 f4 ff ff\n49 ff c6\n41 bc 87 68 40 00\n48 81 c3 80 01 00 00\n4d 85 ff\n75 b0\neb 03\n45 31 f6\n31 ff\nbe f7 67 40 00\nba 05 00 00 00\ne8 3a f5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 ce\n4c 89 f2\n5b\n41 5c\n41 5d\n41 5e\n41 5f\ne9 3c f7 ff ff\n'
p894
S'.text:00000000004020b0\n.text:00000000004020b2\n.text:00000000004020b4\n.text:00000000004020b6\n.text:00000000004020b8\n.text:00000000004020b9\n.text:00000000004020bc\n.text:00000000004020bf\n.text:00000000004020c2\n.text:00000000004020c4\n.text:00000000004020ca\n.text:00000000004020cd\n.text:00000000004020d0\n.text:00000000004020d3\n.text:00000000004020d7\n.text:00000000004020d9\n.text:00000000004020dc\n.text:00000000004020df\n.text:00000000004020e1\n.text:00000000004020e4\n.text:00000000004020e9\n.text:00000000004020ec\n.text:00000000004020f1\n.text:00000000004020f6\n.text:00000000004020f8\n.text:00000000004020fb\n.text:00000000004020fe\n.text:0000000000402103\n.text:0000000000402106\n.text:000000000040210b\n.text:000000000040210e\n.text:0000000000402114\n.text:000000000040211b\n.text:000000000040211e\n.text:0000000000402120\n.text:0000000000402122\n.text:0000000000402125\n.text:0000000000402127\n.text:000000000040212c\n.text:0000000000402131\n.text:0000000000402136\n.text:0000000000402139\n.text:000000000040213e\n.text:0000000000402140\n.text:0000000000402143\n.text:0000000000402146\n.text:0000000000402147\n.text:0000000000402149\n.text:000000000040214b\n.text:000000000040214d\n.text:000000000040214f\n'
p895
tp896
sS'c_isalpha'
p897
(S'\n__stdcall c_isalpha()\n'
p898
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p899
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00402f6b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p900
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p901
S'.text:0000000000402f50\n.text:0000000000402f53\n.text:0000000000402f56\n.text:0000000000402f58\n.text:0000000000402f62\n.text:0000000000402f64\n.text:0000000000402f67\n.text:0000000000402f6a\n.text:0000000000402f6b\n.text:0000000000402f6d\n'
p902
tp903
sS'set_custom_quoting'
p904
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p905
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p906
S'TEST RDI,RDI\nMOV EAX,0x6093c0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00403485\nTEST RDX,RDX\nJZ 0x00403485\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x004015a0\n'
p907
S'48 85 ff\nb8 c0 93 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 15 e1 ff ff\n'
p908
S'.text:0000000000403460\n.text:0000000000403463\n.text:0000000000403468\n.text:000000000040346c\n.text:0000000000403472\n.text:0000000000403475\n.text:0000000000403477\n.text:000000000040347a\n.text:000000000040347c\n.text:0000000000403480\n.text:0000000000403484\n.text:0000000000403485\n.text:0000000000403486\n'
p909
tp910
sS'idle_string'
p911
(S'\n__stdcall idle_string(time_t when, time_t boottime)\n'
p912
V\u000achar * idle_string(time_t when,time_t boottime)\u000a\u000a{\u000a  time_t now;\u000a  char idle_hhmm [6];\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  \u000a  if (now == -0x8000000000000000) {\u000a    time((time_t *)0x609250);\u000a  }\u000a  if (((boottime < when) && (when <= now)) && (now + -0x15180 < when)) {\u000a    uVar1 = (int)now - (int)when;\u000a    if ((int)uVar1 < 0x3c) {\u000a      pcVar2 = "  .  ";\u000a    }\u000a    else {\u000a      pcVar2 = &ram0x00609320;\u000a      __sprintf_chk(0x609320,1,6,"%02d:%02d",(ulong)uVar1 * 0x91a2b3c5 >> 0x2b,\u000a                    (ulong)(uVar1 % 0xe10) * 0x88888889 >> 0x25);\u000a    }\u000a    return pcVar2;\u000a  }\u000a  pcVar2 = (char *)dcgettext(0," old ",5);\u000a  return pcVar2;\u000a}\u000a\u000a
p913
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RAX,-0x8000000000000000\nCMP qword ptr [0x00609250],RAX\nJNZ 0x00402da7\nMOV EDI,0x609250\nCALL 0x004017d0\nCMP R14,RBX\nJGE 0x00402dd2\nMOV RAX,qword ptr [0x00609250]\nCMP RAX,RBX\nJL 0x00402dd2\nLEA RCX,[-0x15180 + RAX]\nCMP RCX,RBX\nJGE 0x00402dd2\nSUB EAX,EBX\nCMP EAX,0x3c\nJGE 0x00402dea\nMOV EBX,0x406883\nJMP 0x00402e31\nXOR EDI,EDI\nMOV ESI,0x406893\nMOV EDX,0x5\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401670\nMOV ECX,EAX\nMOV R8D,0x91a2b3c5\nIMUL R8,RCX\nSHR R8,0x2b\nIMUL ECX,R8D,0xe10\nSUB EAX,ECX\nMOV R9D,0x88888889\nIMUL R9,RAX\nSHR R9,0x25\nMOV EBX,0x609320\nMOV EDI,0x609320\nMOV ESI,0x1\nMOV EDX,0x6\nMOV ECX,0x406889\nXOR EAX,EAX\nCALL 0x00401990\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p914
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 b8 00 00 00 00 00 00 00 80\n48 39 05 b5 64 20 00\n75 0a\nbf 50 92 60 00\ne8 29 ea ff ff\n49 39 de\n7d 26\n48 8b 05 9d 64 20 00\n48 39 d8\n7c 1a\n48 8d 88 80 ae fe ff\n48 39 d9\n7d 0e\n29 d8\n83 f8 3c\n7d 1f\nbb 83 68 40 00\neb 5f\n31 ff\nbe 93 68 40 00\nba 05 00 00 00\n48 83 c4 08\n5b\n41 5e\ne9 86 e8 ff ff\n89 c1\n41 b8 c5 b3 a2 91\n4c 0f af c1\n49 c1 e8 2b\n41 69 c8 10 0e 00 00\n29 c8\n41 b9 89 88 88 88\n4c 0f af c8\n49 c1 e9 25\nbb 20 93 60 00\nbf 20 93 60 00\nbe 01 00 00 00\nba 06 00 00 00\nb9 89 68 40 00\n31 c0\ne8 5f eb ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p915
S'.text:0000000000402d80\n.text:0000000000402d82\n.text:0000000000402d83\n.text:0000000000402d84\n.text:0000000000402d87\n.text:0000000000402d8a\n.text:0000000000402d94\n.text:0000000000402d9b\n.text:0000000000402d9d\n.text:0000000000402da2\n.text:0000000000402da7\n.text:0000000000402daa\n.text:0000000000402dac\n.text:0000000000402db3\n.text:0000000000402db6\n.text:0000000000402db8\n.text:0000000000402dbf\n.text:0000000000402dc2\n.text:0000000000402dc4\n.text:0000000000402dc6\n.text:0000000000402dc9\n.text:0000000000402dcb\n.text:0000000000402dd0\n.text:0000000000402dd2\n.text:0000000000402dd4\n.text:0000000000402dd9\n.text:0000000000402dde\n.text:0000000000402de2\n.text:0000000000402de3\n.text:0000000000402de5\n.text:0000000000402dea\n.text:0000000000402dec\n.text:0000000000402df2\n.text:0000000000402df6\n.text:0000000000402dfa\n.text:0000000000402e01\n.text:0000000000402e03\n.text:0000000000402e09\n.text:0000000000402e0d\n.text:0000000000402e11\n.text:0000000000402e16\n.text:0000000000402e1b\n.text:0000000000402e20\n.text:0000000000402e25\n.text:0000000000402e2a\n.text:0000000000402e2c\n.text:0000000000402e31\n.text:0000000000402e34\n.text:0000000000402e38\n.text:0000000000402e39\n.text:0000000000402e3b\n'
p916
tp917
sS'quotearg_custom_mem'
p918
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p919
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p920
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00404700\n'
p921
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p922
S'.text:0000000000404790\n.text:0000000000404793\n.text:0000000000404796\n.text:0000000000404799\n.text:000000000040479c\n.text:000000000040479e\n.text:00000000004047a1\n'
p923
tp924
sS'close_stdout'
p925
(S'\n__stdcall close_stdout()\n'
p926
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00403157;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x406bf8,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00403157:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p927
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x006092c8]\nCALL 0x00405480\nTEST EAX,EAX\nJZ 0x00403157\nCMP byte ptr [0x006093b0],0x0\nJZ 0x0040316c\nCALL 0x004015b0\nCMP dword ptr [RAX],0x20\nJNZ 0x0040316c\nMOV RDI,qword ptr [0x006092e0]\nCALL 0x00405480\nTEST EAX,EAX\nJNZ 0x004031b1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x406be8\nMOV EDX,0x5\nCALL 0x00401670\nMOV R14,RAX\nMOV RBX,qword ptr [0x006093a8]\nCALL 0x004015b0\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x004031bc\nXOR EDI,EDI\nMOV EDX,0x406bf8\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004018c0\nMOV EDI,dword ptr [0x00609260]\nCALL 0x004015e0\nMOV EDI,dword ptr [0x00609260]\nCALL 0x004015e0\nMOV RDI,RBX\nCALL 0x00404680\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x406bf4\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004018c0\nMOV EDI,dword ptr [0x00609260]\nCALL 0x004015e0\n'
p928
S'55\n41 56\n53\n48 8b 3d 8d 61 20 00\ne8 40 23 00 00\n85 c0\n74 13\n80 3d 65 62 20 00 00\n74 1f\ne8 5e e4 ff ff\n83 38 20\n75 15\n48 8b 3d 82 61 20 00\ne8 1d 23 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe e8 6b 40 00\nba 05 00 00 00\ne8 f3 e4 ff ff\n49 89 c6\n48 8b 1d 21 62 20 00\ne8 24 e4 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba f8 6b 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 1a e7 ff ff\n8b 3d b4 60 20 00\ne8 2f e4 ff ff\n8b 3d a9 60 20 00\ne8 24 e4 ff ff\n48 89 df\ne8 bc 14 00 00\n48 89 c1\n31 ff\nba f4 6b 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 e6 e6 ff ff\n8b 3d 80 60 20 00\ne8 fb e3 ff ff\n'
p929
S'.text:0000000000403130\n.text:0000000000403131\n.text:0000000000403133\n.text:0000000000403134\n.text:000000000040313b\n.text:0000000000403140\n.text:0000000000403142\n.text:0000000000403144\n.text:000000000040314b\n.text:000000000040314d\n.text:0000000000403152\n.text:0000000000403155\n.text:0000000000403157\n.text:000000000040315e\n.text:0000000000403163\n.text:0000000000403165\n.text:0000000000403167\n.text:0000000000403168\n.text:000000000040316a\n.text:000000000040316b\n.text:000000000040316c\n.text:000000000040316e\n.text:0000000000403173\n.text:0000000000403178\n.text:000000000040317d\n.text:0000000000403180\n.text:0000000000403187\n.text:000000000040318c\n.text:000000000040318f\n.text:0000000000403191\n.text:0000000000403193\n.text:0000000000403195\n.text:000000000040319a\n.text:000000000040319c\n.text:000000000040319e\n.text:00000000004031a1\n.text:00000000004031a6\n.text:00000000004031ac\n.text:00000000004031b1\n.text:00000000004031b7\n.text:00000000004031bc\n.text:00000000004031bf\n.text:00000000004031c4\n.text:00000000004031c7\n.text:00000000004031c9\n.text:00000000004031ce\n.text:00000000004031d0\n.text:00000000004031d2\n.text:00000000004031d5\n.text:00000000004031da\n.text:00000000004031e0\n'
p930
tp931
sS'version_etc_ar'
p932
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p933
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p934
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00404f60\nJMP 0x00404bf0\n'
p935
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p936
S'.text:0000000000404f50\n.text:0000000000404f57\n.text:0000000000404f60\n.text:0000000000404f66\n.text:0000000000404f6a\n.text:0000000000404f6c\n'
p937
tp938
sS'rpl_calloc'
p939
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p940
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00609128)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p941
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x0040530b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00405310\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00405310\nPUSH RAX\nCALL 0x004015b0\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401780\n'
p942
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 af c2 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 65 c4 ff ff\n'
p943
S'.text:00000000004052d0\n.text:00000000004052d3\n.text:00000000004052d8\n.text:00000000004052da\n.text:00000000004052dd\n.text:00000000004052e2\n.text:00000000004052e4\n.text:00000000004052e7\n.text:00000000004052eb\n.text:00000000004052ed\n.text:00000000004052f0\n.text:00000000004052f3\n.text:00000000004052f6\n.text:00000000004052f9\n.text:00000000004052fb\n.text:00000000004052fc\n.text:0000000000405301\n.text:0000000000405307\n.text:0000000000405309\n.text:000000000040530a\n.text:000000000040530b\n.text:0000000000405310\n.text:0000000000405313\n.text:0000000000405316\n'
p944
tp945
sS'memset'
p946
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p947
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006090e8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p948
S'JMP qword ptr [0x006090e8]\n'
p949
S'ff 25 e2 79 20 00\n'
p950
S'.plt:0000000000401700\n'
p951
tp952
sS'print_runlevel'
p953
(S'\n__stdcall print_runlevel(STRUCT_UTMP * utmp_ent)\n'
p954
V\u000avoid print_runlevel(STRUCT_UTMP *utmp_ent)\u000a\u000a{\u000a  int iVar1;\u000a  char *runlevline;\u000a  char *comment;\u000a  char *__s;\u000a  size_t sVar2;\u000a  undefined8 uVar3;\u000a  char *exitstr;\u000a  uint uVar4;\u000a  ulong uVar5;\u000a  \u000a  iVar1 = utmp_ent->ut_pid;\u000a  if (runlevline == (char *)0x0) {\u000a    __s = (char *)dcgettext(0,"run-level",5);\u000a    sVar2 = strlen(__s);\u000a    runlevline = (char *)xmalloc(sVar2 + 3);\u000a  }\u000a  __s = runlevline;\u000a  uVar3 = dcgettext(0,"run-level",5);\u000a  __sprintf_chk(__s,1,0xffffffffffffffff,&DAT_004068a3,uVar3,(ulong)(byte)iVar1);\u000a  if (comment == (char *)0x0) {\u000a    __s = (char *)dcgettext(0,"last=",5);\u000a    sVar2 = strlen(__s);\u000a    comment = (char *)xmalloc(sVar2 + 2);\u000a  }\u000a  __s = comment;\u000a  uVar3 = dcgettext(0,"last=",5);\u000a  uVar4 = (int)(((uint)(iVar1 >> 0x1f) >> 0x18) + iVar1) >> 8 & 0xff;\u000a  uVar5 = 0x53;\u000a  if (uVar4 != 0x4e) {\u000a    uVar5 = (ulong)uVar4;\u000a  }\u000a  __sprintf_chk(__s,1,0xffffffffffffffff,&DAT_004068af,uVar3,uVar5);\u000a  __s = runlevline;\u000a  exitstr = time_string(utmp_ent);\u000a  c_isprint();\u000a  print_line((char *)0xffffffff,\u000a                          \u000a             "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a             + 0xca,(char *)0x20,(char *)0xffffffff,__s,exitstr);\u000a  return;\u000a}\u000a\u000a
p955
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV EBX,dword ptr [R14 + 0x4]\nMOV EBP,EBX\nSAR EBP,0x1f\nSHR EBP,0x18\nADD EBP,EBX\nCMP qword ptr [0x00609358],0x0\nJNZ 0x0040270b\nXOR EDI,EDI\nMOV ESI,0x406899\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDI,RAX\nCALL 0x00401690\nLEA RDI,[RAX + 0x3]\nCALL 0x00405110\nMOV qword ptr [0x00609358],RAX\nSAR EBP,0x8\nMOV R15,qword ptr [0x00609358]\nXOR EDI,EDI\nMOV ESI,0x406899\nMOV EDX,0x5\nCALL 0x00401670\nMOV R8,RAX\nMOVZX R9D,BL\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x4068a3\nXOR EAX,EAX\nMOV RDI,R15\nCALL 0x00401990\nCMP qword ptr [0x00609360],0x0\nJNZ 0x0040277b\nXOR EDI,EDI\nMOV ESI,0x4068a9\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDI,RAX\nCALL 0x00401690\nLEA RDI,[RAX + 0x2]\nCALL 0x00405110\nMOV qword ptr [0x00609360],RAX\nMOV R15,qword ptr [0x00609360]\nXOR EDI,EDI\nMOV ESI,0x4068a9\nMOV EDX,0x5\nCALL 0x00401670\nMOV RBX,RAX\nMOVZX EBP,BPL\nCMP EBP,0x4e\nMOV R9D,0x53\nCMOVNZ R9D,EBP\nMOV ESI,0x1\nMOV RDX,-0x1\nMOV ECX,0x4068af\nXOR EAX,EAX\nMOV RDI,R15\nMOV R8,RBX\nCALL 0x00401990\nMOV R15,qword ptr [0x00609358]\nMOV RDI,R14\nCALL 0x00402e40\nMOV RBX,RAX\nMOV EDI,EBP\nCALL 0x00402fd0\nMOV ECX,0x4072c9\nTEST AL,AL\nMOV RAX,qword ptr [0x00609360]\nCMOVZ RAX,RCX\nMOV EDI,0xffffffff\nMOV ESI,0x4072c9\nMOV EDX,0x20\nMOV ECX,0xffffffff\nMOV R8,R15\nMOV R9,RBX\nPUSH 0x4072c9\nPUSH RAX\nPUSH 0x4072c9\nPUSH 0x4072c9\nCALL 0x00402b70\nADD RSP,0x28\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p956
S'55\n41 57\n41 56\n53\n50\n49 89 fe\n41 8b 5e 04\n89 dd\nc1 fd 1f\nc1 ed 18\n01 dd\n48 83 3d 78 6c 20 00 00\n75 29\n31 ff\nbe 99 68 40 00\nba 05 00 00 00\ne8 7d ef ff ff\n48 89 c7\ne8 95 ef ff ff\n48 8d 78 03\ne8 0c 2a 00 00\n48 89 05 4d 6c 20 00\nc1 fd 08\n4c 8b 3d 43 6c 20 00\n31 ff\nbe 99 68 40 00\nba 05 00 00 00\ne8 4a ef ff ff\n49 89 c0\n44 0f b6 cb\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 a3 68 40 00\n31 c0\n4c 89 ff\ne8 48 f2 ff ff\n48 83 3d 10 6c 20 00 00\n75 29\n31 ff\nbe a9 68 40 00\nba 05 00 00 00\ne8 0d ef ff ff\n48 89 c7\ne8 25 ef ff ff\n48 8d 78 02\ne8 9c 29 00 00\n48 89 05 e5 6b 20 00\n4c 8b 3d de 6b 20 00\n31 ff\nbe a9 68 40 00\nba 05 00 00 00\ne8 dd ee ff ff\n48 89 c3\n40 0f b6 ed\n83 fd 4e\n41 b9 53 00 00 00\n44 0f 45 cd\nbe 01 00 00 00\n48 c7 c2 ff ff ff ff\nb9 af 68 40 00\n31 c0\n4c 89 ff\n49 89 d8\ne8 cb f1 ff ff\n4c 8b 3d 8c 6b 20 00\n4c 89 f7\ne8 6c 06 00 00\n48 89 c3\n89 ef\ne8 f2 07 00 00\nb9 c9 72 40 00\n84 c0\n48 8b 05 74 6b 20 00\n48 0f 44 c1\nbf ff ff ff ff\nbe c9 72 40 00\nba 20 00 00 00\nb9 ff ff ff ff\n4d 89 f8\n49 89 d9\n68 c9 72 40 00\n50\n68 c9 72 40 00\n68 c9 72 40 00\ne8 51 03 00 00\n48 83 c4 28\n5b\n41 5e\n41 5f\n5d\nc3\n'
p957
S'.text:00000000004026c0\n.text:00000000004026c1\n.text:00000000004026c3\n.text:00000000004026c5\n.text:00000000004026c6\n.text:00000000004026c7\n.text:00000000004026ca\n.text:00000000004026ce\n.text:00000000004026d0\n.text:00000000004026d3\n.text:00000000004026d6\n.text:00000000004026d8\n.text:00000000004026e0\n.text:00000000004026e2\n.text:00000000004026e4\n.text:00000000004026e9\n.text:00000000004026ee\n.text:00000000004026f3\n.text:00000000004026f6\n.text:00000000004026fb\n.text:00000000004026ff\n.text:0000000000402704\n.text:000000000040270b\n.text:000000000040270e\n.text:0000000000402715\n.text:0000000000402717\n.text:000000000040271c\n.text:0000000000402721\n.text:0000000000402726\n.text:0000000000402729\n.text:000000000040272d\n.text:0000000000402732\n.text:0000000000402739\n.text:000000000040273e\n.text:0000000000402740\n.text:0000000000402743\n.text:0000000000402748\n.text:0000000000402750\n.text:0000000000402752\n.text:0000000000402754\n.text:0000000000402759\n.text:000000000040275e\n.text:0000000000402763\n.text:0000000000402766\n.text:000000000040276b\n.text:000000000040276f\n.text:0000000000402774\n.text:000000000040277b\n.text:0000000000402782\n.text:0000000000402784\n.text:0000000000402789\n.text:000000000040278e\n.text:0000000000402793\n.text:0000000000402796\n.text:000000000040279a\n.text:000000000040279d\n.text:00000000004027a3\n.text:00000000004027a7\n.text:00000000004027ac\n.text:00000000004027b3\n.text:00000000004027b8\n.text:00000000004027ba\n.text:00000000004027bd\n.text:00000000004027c0\n.text:00000000004027c5\n.text:00000000004027cc\n.text:00000000004027cf\n.text:00000000004027d4\n.text:00000000004027d7\n.text:00000000004027d9\n.text:00000000004027de\n.text:00000000004027e3\n.text:00000000004027e5\n.text:00000000004027ec\n.text:00000000004027f0\n.text:00000000004027f5\n.text:00000000004027fa\n.text:00000000004027ff\n.text:0000000000402804\n.text:0000000000402807\n.text:000000000040280a\n.text:000000000040280f\n.text:0000000000402810\n.text:0000000000402815\n.text:000000000040281a\n.text:000000000040281f\n.text:0000000000402823\n.text:0000000000402824\n.text:0000000000402826\n.text:0000000000402828\n.text:0000000000402829\n'
p958
tp959
sS'c_isxdigit'
p960
(S'\n__stdcall c_isxdigit()\n'
p961
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p962
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0040304b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p963
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p964
S'.text:0000000000403030\n.text:0000000000403033\n.text:0000000000403036\n.text:0000000000403038\n.text:0000000000403042\n.text:0000000000403044\n.text:0000000000403047\n.text:000000000040304a\n.text:000000000040304b\n.text:000000000040304d\n'
p965
tp966
sS'__libc_csu_fini'
p967
(S'\n__stdcall __libc_csu_fini()\n'
p968
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p969
S'RET\n'
p970
S'f3 c3\n'
p971
S'.text:00000000004059d0\n'
p972
tp973
sS'getc_unlocked'
p974
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p975
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00609078)();\u000a  return iVar1;\u000a}\u000a\u000a
p976
S'JMP qword ptr [0x00609078]\n'
p977
S'ff 25 52 7a 20 00\n'
p978
S'.plt:0000000000401620\n'
p979
tp980
sS'print_heading'
p981
(S'\n__stdcall print_heading()\n'
p982
V\u000avoid print_heading(void)\u000a\u000a{\u000a  char *line;\u000a  char *pid;\u000a  char *exitstr;\u000a  \u000a  line = (char *)dcgettext(0,&DAT_0040680b,5);\u000a  pid = (char *)dcgettext(0,&DAT_00406810,5);\u000a  exitstr = (char *)dcgettext(0,&DAT_00406815,5);\u000a  dcgettext(0,&DAT_0040681a,5);\u000a  dcgettext(0,&DAT_0040681f,5);\u000a  dcgettext(0,"COMMENT",5);\u000a  dcgettext(0,&DAT_0040682b,5);\u000a  print_line((char *)0xffffffff,line,(char *)0x20,(char *)0xffffffff,pid,exitstr);\u000a  return;\u000a}\u000a\u000a
p983
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40680b\nMOV EDX,0x5\nCALL 0x00401670\nMOV R14,RAX\nXOR EDI,EDI\nMOV ESI,0x406810\nMOV EDX,0x5\nCALL 0x00401670\nMOV R15,RAX\nXOR EDI,EDI\nMOV ESI,0x406815\nMOV EDX,0x5\nCALL 0x00401670\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x40681a\nMOV EDX,0x5\nCALL 0x00401670\nMOV R13,RAX\nXOR EDI,EDI\nMOV ESI,0x40681f\nMOV EDX,0x5\nCALL 0x00401670\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x406823\nMOV EDX,0x5\nCALL 0x00401670\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x40682b\nMOV EDX,0x5\nCALL 0x00401670\nMOV EDI,0xffffffff\nMOV EDX,0x20\nMOV ECX,0xffffffff\nMOV RSI,R14\nMOV R8,R15\nMOV R9,R12\nPUSH RAX\nPUSH RBP\nPUSH RBX\nPUSH R13\nCALL 0x00402b70\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p984
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n31 ff\nbe 0b 68 40 00\nba 05 00 00 00\ne8 54 f3 ff ff\n49 89 c6\n31 ff\nbe 10 68 40 00\nba 05 00 00 00\ne8 40 f3 ff ff\n49 89 c7\n31 ff\nbe 15 68 40 00\nba 05 00 00 00\ne8 2c f3 ff ff\n49 89 c4\n31 ff\nbe 1a 68 40 00\nba 05 00 00 00\ne8 18 f3 ff ff\n49 89 c5\n31 ff\nbe 1f 68 40 00\nba 05 00 00 00\ne8 04 f3 ff ff\n48 89 c3\n31 ff\nbe 23 68 40 00\nba 05 00 00 00\ne8 f0 f2 ff ff\n48 89 c5\n31 ff\nbe 2b 68 40 00\nba 05 00 00 00\ne8 dc f2 ff ff\nbf ff ff ff ff\nba 20 00 00 00\nb9 ff ff ff ff\n4c 89 f6\n4d 89 f8\n4d 89 e1\n50\n55\n53\n41 55\ne8 ba 07 00 00\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p985
S'.text:0000000000402300\n.text:0000000000402301\n.text:0000000000402303\n.text:0000000000402305\n.text:0000000000402307\n.text:0000000000402309\n.text:000000000040230a\n.text:000000000040230b\n.text:000000000040230d\n.text:0000000000402312\n.text:0000000000402317\n.text:000000000040231c\n.text:000000000040231f\n.text:0000000000402321\n.text:0000000000402326\n.text:000000000040232b\n.text:0000000000402330\n.text:0000000000402333\n.text:0000000000402335\n.text:000000000040233a\n.text:000000000040233f\n.text:0000000000402344\n.text:0000000000402347\n.text:0000000000402349\n.text:000000000040234e\n.text:0000000000402353\n.text:0000000000402358\n.text:000000000040235b\n.text:000000000040235d\n.text:0000000000402362\n.text:0000000000402367\n.text:000000000040236c\n.text:000000000040236f\n.text:0000000000402371\n.text:0000000000402376\n.text:000000000040237b\n.text:0000000000402380\n.text:0000000000402383\n.text:0000000000402385\n.text:000000000040238a\n.text:000000000040238f\n.text:0000000000402394\n.text:0000000000402399\n.text:000000000040239e\n.text:00000000004023a3\n.text:00000000004023a6\n.text:00000000004023a9\n.text:00000000004023ac\n.text:00000000004023ad\n.text:00000000004023ae\n.text:00000000004023af\n.text:00000000004023b1\n.text:00000000004023b6\n.text:00000000004023ba\n.text:00000000004023bb\n.text:00000000004023bd\n.text:00000000004023bf\n.text:00000000004023c1\n.text:00000000004023c3\n.text:00000000004023c4\n'
p986
tp987
sS'desirable_utmp_entry'
p988
(S'\n__stdcall desirable_utmp_entry(STRUCT_UTMP * u)\n'
p989
V\u000a_Bool desirable_utmp_entry(STRUCT_UTMP *u)\u000a\u000a{\u000a  undefined uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  ulong in_RSI;\u000a  bool bVar4;\u000a  \u000a  if (u->ut_user[0] == 0) {\u000a    bVar4 = false;\u000a  }\u000a  else {\u000a    bVar4 = u->ut_type == 7;\u000a  }\u000a  if (((in_RSI & 2) == 0) || (bVar4)) {\u000a    if ((((in_RSI & 1) != 0) &&\u000a        (((bVar4 && (0 < u->ut_pid)) && (iVar2 = kill(u->ut_pid,0), iVar2 < 0)))) &&\u000a       (piVar3 = __errno_location(), *piVar3 == 3)) {\u000a      return false;\u000a    }\u000a    uVar1 = 1;\u000a  }\u000a  else {\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p990
S'CMP byte ptr [RDI + 0x2c],0x0\nJZ 0x00405441\nMOVZX EAX,word ptr [RDI]\nCMP EAX,0x7\nSETZ AL\nJMP 0x00405443\nXOR EAX,EAX\nPUSH RAX\nTEST SIL,0x2\nJZ 0x00405452\nTEST AL,AL\nJNZ 0x00405452\nXOR EAX,EAX\nJMP 0x0040547e\nTEST SIL,0x1\nJZ 0x0040547c\nXOR AL,0x1\nJNZ 0x0040547c\nMOV EDI,dword ptr [RDI + 0x4]\nTEST EDI,EDI\nJLE 0x0040547c\nXOR ESI,ESI\nCALL 0x004017c0\nTEST EAX,EAX\nJNS 0x0040547c\nCALL 0x004015b0\nCMP dword ptr [RAX],0x3\nJNZ 0x0040547c\nXOR EAX,EAX\nJMP 0x0040547e\nMOV AL,0x1\nPOP RCX\nRET\n'
p991
S'80 7f 2c 00\n74 0b\n0f b7 07\n83 f8 07\n0f 94 c0\neb 02\n31 c0\n50\n40 f6 c6 02\n74 08\n84 c0\n75 04\n31 c0\neb 2c\n40 f6 c6 01\n74 24\n34 01\n75 20\n8b 7f 04\n85 ff\n7e 19\n31 f6\ne8 56 c3 ff ff\n85 c0\n79 0e\ne8 3d c1 ff ff\n83 38 03\n75 04\n31 c0\neb 02\nb0 01\n59\nc3\n'
p992
S'.text:0000000000405430\n.text:0000000000405434\n.text:0000000000405436\n.text:0000000000405439\n.text:000000000040543c\n.text:000000000040543f\n.text:0000000000405441\n.text:0000000000405443\n.text:0000000000405444\n.text:0000000000405448\n.text:000000000040544a\n.text:000000000040544c\n.text:000000000040544e\n.text:0000000000405450\n.text:0000000000405452\n.text:0000000000405456\n.text:0000000000405458\n.text:000000000040545a\n.text:000000000040545c\n.text:000000000040545f\n.text:0000000000405461\n.text:0000000000405463\n.text:0000000000405465\n.text:000000000040546a\n.text:000000000040546c\n.text:000000000040546e\n.text:0000000000405473\n.text:0000000000405476\n.text:0000000000405478\n.text:000000000040547a\n.text:000000000040547c\n.text:000000000040547e\n.text:000000000040547f\n'
p993
tp994
sS'abort'
p995
(S'\n__stdcall abort()\n'
p996
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00609038)();\u000a  return;\u000a}\u000a\u000a
p997
S'JMP qword ptr [0x00609038]\n'
p998
S'ff 25 92 7a 20 00\n'
p999
S'.plt:00000000004015a0\n'
p1000
tp1001
sS'c_isascii'
p1002
(S'\n__stdcall c_isascii()\n'
p1003
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1004
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1005
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1006
S'.text:0000000000402f70\n.text:0000000000402f76\n.text:0000000000402f79\n'
p1007
tp1008
sS'print_clockchange'
p1009
(S'\n__stdcall print_clockchange(STRUCT_UTMP * utmp_ent)\n'
p1010
V\u000avoid print_clockchange(STRUCT_UTMP *utmp_ent)\u000a\u000a{\u000a  char *pid;\u000a  char *exitstr;\u000a  \u000a  pid = (char *)dcgettext(0,"clock change",5);\u000a  exitstr = time_string(utmp_ent);\u000a  print_line((char *)0xffffffff,\u000a                          \u000a             "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a             + 0xca,(char *)0x20,(char *)0xffffffff,pid,exitstr);\u000a  return;\u000a}\u000a\u000a
p1011
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x4068c0\nMOV EDX,0x5\nCALL 0x00401670\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00402e40\nMOV EDI,0xffffffff\nMOV ESI,0x4072c9\nMOV EDX,0x20\nMOV ECX,0xffffffff\nMOV R8,R14\nMOV R9,RAX\nPUSH 0x4072c9\nPUSH 0x4072c9\nPUSH 0x4072c9\nPUSH 0x4072c9\nCALL 0x00402b70\nADD RSP,0x28\nPOP RBX\nPOP R14\nRET\n'
p1012
S'41 56\n53\n50\n48 89 fb\n31 ff\nbe c0 68 40 00\nba 05 00 00 00\ne8 c8 ed ff ff\n49 89 c6\n48 89 df\ne8 8d 05 00 00\nbf ff ff ff ff\nbe c9 72 40 00\nba 20 00 00 00\nb9 ff ff ff ff\n4d 89 f0\n49 89 c1\n68 c9 72 40 00\n68 c9 72 40 00\n68 c9 72 40 00\n68 c9 72 40 00\ne8 8a 02 00 00\n48 83 c4 28\n5b\n41 5e\nc3\n'
p1013
S'.text:0000000000402890\n.text:0000000000402892\n.text:0000000000402893\n.text:0000000000402894\n.text:0000000000402897\n.text:0000000000402899\n.text:000000000040289e\n.text:00000000004028a3\n.text:00000000004028a8\n.text:00000000004028ab\n.text:00000000004028ae\n.text:00000000004028b3\n.text:00000000004028b8\n.text:00000000004028bd\n.text:00000000004028c2\n.text:00000000004028c7\n.text:00000000004028ca\n.text:00000000004028cd\n.text:00000000004028d2\n.text:00000000004028d7\n.text:00000000004028dc\n.text:00000000004028e1\n.text:00000000004028e6\n.text:00000000004028ea\n.text:00000000004028eb\n.text:00000000004028ed\n'
p1014
tp1015
sS'version_etc'
p1016
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p1017
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p1018
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00405022\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00404f80\nADD RSP,0xd8\nRET\n'
p1019
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p1020
S'.text:0000000000404fe0\n.text:0000000000404fe7\n.text:0000000000404fe9\n.text:0000000000404feb\n.text:0000000000404ff0\n.text:0000000000404ff5\n.text:0000000000404ffa\n.text:0000000000405002\n.text:000000000040500a\n.text:0000000000405012\n.text:000000000040501a\n.text:0000000000405022\n.text:0000000000405027\n.text:000000000040502c\n.text:0000000000405031\n.text:0000000000405036\n.text:000000000040503e\n.text:0000000000405043\n.text:000000000040504b\n.text:0000000000405052\n.text:0000000000405055\n.text:000000000040505a\n.text:0000000000405061\n'
p1021
tp1022
sS'canon_host_r'
p1023
(S'\n__stdcall canon_host_r(char * host, int * cherror)\n'
p1024
V\u000achar * canon_host_r(char *host,int *cherror)\u000a\u000a{\u000a  addrinfo hints;\u000a  int iVar1;\u000a  char *pcVar2;\u000a  addrinfo *local_18;\u000a  \u000a  local_18 = (addrinfo *)0x0;\u000a  hints.ai_flags = 2;\u000a  iVar1 = getaddrinfo(host,(char *)0x0,(addrinfo *)0x609378,&local_18);\u000a  if (iVar1 == 0) {\u000a    if (local_18->ai_canonname != (char *)0x0) {\u000a      host = local_18->ai_canonname;\u000a    }\u000a    pcVar2 = (char *)__strdup(host);\u000a    if ((cherror != (int *)0x0) && (pcVar2 == (char *)0x0)) {\u000a      *cherror = -10;\u000a    }\u000a    freeaddrinfo(local_18);\u000a  }\u000a  else {\u000a    if (cherror != (int *)0x0) {\u000a      *cherror = iVar1;\u000a    }\u000a    pcVar2 = (char *)0x0;\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1025
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV qword ptr [RSP],0x0\nMOV dword ptr [0x00609378],0x2\nMOV RCX,RSP\nXOR ESI,ESI\nMOV EDX,0x609378\nCALL 0x00401940\nTEST EAX,EAX\nJZ 0x004030bb\nTEST R14,R14\nJZ 0x004030b7\nMOV dword ptr [R14],EAX\nXOR EBX,EBX\nJMP 0x004030ef\nMOV RAX,qword ptr [RSP]\nMOV RAX,qword ptr [RAX + 0x20]\nTEST RAX,RAX\nCMOVNZ RBX,RAX\nMOV RDI,RBX\nCALL 0x00401730\nMOV RBX,RAX\nTEST R14,R14\nJZ 0x004030e6\nTEST RBX,RBX\nJNZ 0x004030e6\nMOV dword ptr [R14],0xfffffff6\nMOV RDI,qword ptr [RSP]\nCALL 0x00401980\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1026
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 c7 04 24 00 00 00 00\nc7 05 dc 62 20 00 02 00 00 00\n48 89 e1\n31 f6\nba 78 93 60 00\ne8 95 e8 ff ff\n85 c0\n74 0c\n4d 85 f6\n74 03\n41 89 06\n31 db\neb 34\n48 8b 04 24\n48 8b 40 20\n48 85 c0\n48 0f 45 d8\n48 89 df\ne8 5e e6 ff ff\n48 89 c3\n4d 85 f6\n74 0c\n48 85 db\n75 07\n41 c7 06 f6 ff ff ff\n48 8b 3c 24\ne8 91 e8 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1027
S'.text:0000000000403080\n.text:0000000000403082\n.text:0000000000403083\n.text:0000000000403084\n.text:0000000000403087\n.text:000000000040308a\n.text:0000000000403092\n.text:000000000040309c\n.text:000000000040309f\n.text:00000000004030a1\n.text:00000000004030a6\n.text:00000000004030ab\n.text:00000000004030ad\n.text:00000000004030af\n.text:00000000004030b2\n.text:00000000004030b4\n.text:00000000004030b7\n.text:00000000004030b9\n.text:00000000004030bb\n.text:00000000004030bf\n.text:00000000004030c3\n.text:00000000004030c6\n.text:00000000004030ca\n.text:00000000004030cd\n.text:00000000004030d2\n.text:00000000004030d5\n.text:00000000004030d8\n.text:00000000004030da\n.text:00000000004030dd\n.text:00000000004030df\n.text:00000000004030e6\n.text:00000000004030ea\n.text:00000000004030ef\n.text:00000000004030f2\n.text:00000000004030f6\n.text:00000000004030f7\n.text:00000000004030f9\n'
p1028
tp1029
sS'who'
p1030
(S'\n__stdcall who(char * filename)\n'
p1031
V\u000avoid who(char *filename)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  char *pcVar4;\u000a  STRUCT_UTMP *local_20;\u000a  size_t local_18;\u000a  \u000a  iVar2 = read_utmp(filename,&local_18,&local_20);\u000a  if (iVar2 != 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar1 = *puVar3;\u000a    pcVar4 = quotearg_n_style_colon((char *)0x0);\u000a    error(1,(ulong)uVar1,0x406bf8,pcVar4);\u000a  }\u000a  if (short_list == 1) {\u000a    list_entries_who(local_18,local_20);\u000a  }\u000a  else {\u000a    scan_entries(local_18,local_20);\u000a  }\u000a  free(local_20);\u000a  return;\u000a}\u000a\u000a
p1032
S'PUSH RBP\nPUSH RBX\nSUB RSP,0x18\nMOV EAX,ESI\nMOV RBX,RDI\nLEA RSI,[RSP + 0x10]\nLEA RDX,[RSP + 0x8]\nMOV ECX,EAX\nCALL 0x00405380\nTEST EAX,EAX\nJZ 0x0040207c\nCALL 0x004015b0\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBX\nCALL 0x004046a0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406bf8\nXOR EAX,EAX\nMOV ESI,EBP\nCALL 0x004018c0\nMOV RDI,qword ptr [RSP + 0x10]\nMOV RSI,qword ptr [RSP + 0x8]\nCMP byte ptr [0x006092fc],0x1\nJNZ 0x00402096\nCALL 0x004020b0\nJMP 0x0040209b\nCALL 0x00402160\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x00401580\nADD RSP,0x18\nPOP RBX\nPOP RBP\nRET\n'
p1033
S'55\n53\n48 83 ec 18\n89 f0\n48 89 fb\n48 8d 74 24 10\n48 8d 54 24 08\n89 c1\ne8 34 33 00 00\n85 c0\n74 2c\ne8 5b f5 ff ff\n8b 28\n31 ff\nbe 03 00 00 00\n48 89 da\ne8 3a 26 00 00\n48 89 c1\nbf 01 00 00 00\nba f8 6b 40 00\n31 c0\n89 ee\ne8 44 f8 ff ff\n48 8b 7c 24 10\n48 8b 74 24 08\n80 3d 6f 72 20 00 01\n75 07\ne8 1c 00 00 00\neb 05\ne8 c5 00 00 00\n48 8b 7c 24 08\ne8 db f4 ff ff\n48 83 c4 18\n5b\n5d\nc3\n'
p1034
S'.text:0000000000402030\n.text:0000000000402031\n.text:0000000000402032\n.text:0000000000402036\n.text:0000000000402038\n.text:000000000040203b\n.text:0000000000402040\n.text:0000000000402045\n.text:0000000000402047\n.text:000000000040204c\n.text:000000000040204e\n.text:0000000000402050\n.text:0000000000402055\n.text:0000000000402057\n.text:0000000000402059\n.text:000000000040205e\n.text:0000000000402061\n.text:0000000000402066\n.text:0000000000402069\n.text:000000000040206e\n.text:0000000000402073\n.text:0000000000402075\n.text:0000000000402077\n.text:000000000040207c\n.text:0000000000402081\n.text:0000000000402086\n.text:000000000040208d\n.text:000000000040208f\n.text:0000000000402094\n.text:0000000000402096\n.text:000000000040209b\n.text:00000000004020a0\n.text:00000000004020a5\n.text:00000000004020a9\n.text:00000000004020aa\n.text:00000000004020ab\n'
p1035
tp1036
sS'__ctype_b_loc'
p1037
(S'\n__stdcall __ctype_b_loc()\n'
p1038
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_00609220)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x00609220]\n'
p1040
S'ff 25 aa 78 20 00\n'
p1041
S'.plt:0000000000401970\n'
p1042
tp1043
sS'lseek'
p1044
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p1045
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006090e0)();\u000a  return _Var1;\u000a}\u000a\u000a
p1046
S'JMP qword ptr [0x006090e0]\n'
p1047
S'ff 25 ea 79 20 00\n'
p1048
S'.plt:00000000004016f0\n'
p1049
tp1050
sS'quotearg'
p1051
(S'\n__stdcall quotearg(char * arg)\n'
p1052
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1053
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004042e0\n'
p1054
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1055
S'.text:00000000004044c0\n.text:00000000004044c3\n.text:00000000004044c5\n.text:00000000004044c8\n'
p1056
tp1057
sS'_start'
p1058
(S'\n__stdcall _start()\n'
p1059
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00608ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1060
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x4059d0\nMOV RCX,0x405960\nMOV RDI,0x401d90\nCALL qword ptr [0x00608ff0]\nHLT\n'
p1061
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 d0 59 40 00\n48 c7 c1 60 59 40 00\n48 c7 c7 90 1d 40 00\nff 15 26 76 20 00\nf4\n'
p1062
S'.text:00000000004019a0\n.text:00000000004019a2\n.text:00000000004019a5\n.text:00000000004019a6\n.text:00000000004019a9\n.text:00000000004019ad\n.text:00000000004019ae\n.text:00000000004019af\n.text:00000000004019b6\n.text:00000000004019bd\n.text:00000000004019c4\n.text:00000000004019ca\n'
p1063
tp1064
sS'c_iscntrl'
p1065
(S'\n__stdcall c_iscntrl()\n'
p1066
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1067
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00402f98\nRET\nCMP EDI,0x7f\nJZ 0x00402f97\nXOR EAX,EAX\nRET\n'
p1068
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1069
S'.text:0000000000402f90\n.text:0000000000402f92\n.text:0000000000402f95\n.text:0000000000402f97\n.text:0000000000402f98\n.text:0000000000402f9b\n.text:0000000000402f9d\n.text:0000000000402f9f\n'
p1070
tp1071
sS'c_isblank'
p1072
(S'\n__stdcall c_isblank()\n'
p1073
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1074
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1075
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1076
S'.text:0000000000402f80\n.text:0000000000402f83\n.text:0000000000402f86\n.text:0000000000402f89\n.text:0000000000402f8c\n.text:0000000000402f8e\n'
p1077
tp1078
sS'quotearg_n_mem'
p1079
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p1080
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p1081
S'MOV ECX,0x6093c0\nJMP 0x004042f0\n'
p1082
S'b9 c0 93 60 00\ne9 36 fe ff ff\n'
p1083
S'.text:00000000004044b0\n.text:00000000004044b5\n'
p1084
tp1085
sS'atexit'
p1086
(S'\n__stdcall atexit(__func * __func)\n'
p1087
V\u000a/* WARNING: Removing unreachable block (ram,0x00405a00) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_006091e0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1088
S'MOV RAX,0x609240\nTEST RAX,RAX\nJZ 0x00405a00\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x004018f0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x004018f0\n'
p1089
S'48 c7 c0 40 92 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 fa be ff ff\n31 d2\n31 f6\ne9 e7 be ff ff\n'
p1090
S'.text:00000000004059e0\n.text:00000000004059e7\n.text:00000000004059ea\n.text:00000000004059ec\n.text:00000000004059ef\n.text:00000000004059f1\n.text:0000000000405a00\n.text:0000000000405a02\n.text:0000000000405a04\n'
p1091
tp1092
sS'__printf_chk'
p1093
(S'\n__stdcall __printf_chk()\n'
p1094
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_006091b0)();\u000a  return;\u000a}\u000a\u000a
p1095
S'JMP qword ptr [0x006091b0]\n'
p1096
S'ff 25 1a 79 20 00\n'
p1097
S'.plt:0000000000401890\n'
p1098
tp1099
sS'__asprintf_chk'
p1100
(S'\n__stdcall __asprintf_chk()\n'
p1101
V\u000avoid __asprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___asprintf_chk_00609118)();\u000a  return;\u000a}\u000a\u000a
p1102
S'JMP qword ptr [0x00609118]\n'
p1103
S'ff 25 b2 79 20 00\n'
p1104
S'.plt:0000000000401760\n'
p1105
tp1106
sS'fdopen'
p1107
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1108
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_006091a0)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1109
S'JMP qword ptr [0x006091a0]\n'
p1110
S'ff 25 2a 79 20 00\n'
p1111
S'.plt:0000000000401870\n'
p1112
tp1113
sS'error'
p1114
(S'\n__stdcall error()\n'
p1115
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_006091c8)();\u000a  return;\u000a}\u000a\u000a
p1116
S'JMP qword ptr [0x006091c8]\n'
p1117
S'ff 25 02 79 20 00\n'
p1118
S'.plt:00000000004018c0\n'
p1119
tp1120
sS'strcaseeq6'
p1121
(S'\n__stdcall strcaseeq6()\n'
p1122
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1123
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00403020\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404b82\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404b89\nJMP 0x00404b9e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404b9e\nTEST BPL,BPL\nJZ 0x00404b99\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404bb0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1124
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 b1 e4 ff ff\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1125
S'.text:0000000000404b60\n.text:0000000000404b61\n.text:0000000000404b62\n.text:0000000000404b63\n.text:0000000000404b65\n.text:0000000000404b68\n.text:0000000000404b6a\n.text:0000000000404b6f\n.text:0000000000404b73\n.text:0000000000404b75\n.text:0000000000404b77\n.text:0000000000404b7a\n.text:0000000000404b7c\n.text:0000000000404b7e\n.text:0000000000404b80\n.text:0000000000404b82\n.text:0000000000404b84\n.text:0000000000404b87\n.text:0000000000404b89\n.text:0000000000404b8c\n.text:0000000000404b8e\n.text:0000000000404b91\n.text:0000000000404b95\n.text:0000000000404b96\n.text:0000000000404b97\n.text:0000000000404b99\n.text:0000000000404b9e\n.text:0000000000404ba2\n.text:0000000000404ba3\n.text:0000000000404ba4\n'
p1126
tp1127
sS'imaxtostr'
p1128
(S'\n__stdcall imaxtostr(intmax_t i, char * buf)\n'
p1129
V\u000achar * imaxtostr(intmax_t i,char *buf)\u000a\u000a{\u000a  ulong uVar1;\u000a  long lVar2;\u000a  \u000a  buf[0x14] = 0;\u000a  if (i < 0) {\u000a    buf = buf + 0x13;\u000a    do {\u000a      lVar2 = i / 10 + (i >> 0x3f);\u000a      *buf = '0' - ((char)i + (char)lVar2 * -10);\u000a      uVar1 = i + 9;\u000a      buf = buf + -1;\u000a      i = lVar2;\u000a    } while (0x12 < uVar1);\u000a    *buf = '-';\u000a  }\u000a  else {\u000a    buf = buf + 0x14;\u000a    do {\u000a      lVar2 = i / 10 + (i >> 0x3f);\u000a      buf[-1] = (char)i + (char)lVar2 * -10 + '0';\u000a      buf = buf + -1;\u000a      uVar1 = i + 9;\u000a      i = lVar2;\u000a    } while (0x12 < uVar1);\u000a  }\u000a  return buf;\u000a}\u000a\u000a
p1130
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nTEST RCX,RCX\nJS 0x0040328b\nADD RSI,0x14\nMOV R8,0x6666666666666667\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,RCX\nIMUL R8\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x2\nLEA EDI,[RDX + RAX*0x1]\nADD EDI,EDI\nLEA R9D,[RDI + RDI*0x4]\nMOV EDI,ECX\nSUB EDI,R9D\nADD EDI,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nADD RDX,RAX\nADD RCX,0x9\nCMP RCX,0x12\nMOV RCX,RDX\nJA 0x00403250\nJMP 0x004032df\nADD RSI,0x13\nMOV R8,0x6666666666666667\nNOP dword ptr [RAX]\nMOV RAX,RCX\nIMUL R8\nMOV R10,RDX\nSHR R10,0x3f\nSAR RDX,0x2\nLEA EDI,[RDX + R10*0x1]\nADD EDI,EDI\nLEA R9D,[RDI + RDI*0x4]\nMOV EDI,ECX\nSUB EDI,R9D\nMOV EAX,0x30\nSUB EAX,EDI\nMOV byte ptr [RSI],AL\nADD RDX,R10\nADD RCX,0x9\nDEC RSI\nCMP RCX,0x12\nMOV RCX,RDX\nJA 0x004032a0\nMOV byte ptr [RSI],0x2d\nMOV RAX,RSI\nRET\n'
p1131
S'48 89 f9\nc6 46 14 00\n48 85 c9\n78 4f\n48 83 c6 14\n49 b8 67 66 66 66 66 66 66 66\n66 0f 1f 44 00 00\n48 89 c8\n49 f7 e8\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 02\n8d 3c 02\n01 ff\n44 8d 0c bf\n89 cf\n44 29 cf\n83 c7 30\n40 88 7e ff\n48 ff ce\n48 01 c2\n48 83 c1 09\n48 83 f9 12\n48 89 d1\n77 c7\neb 54\n48 83 c6 13\n49 b8 67 66 66 66 66 66 66 66\n0f 1f 80 00 00 00 00\n48 89 c8\n49 f7 e8\n49 89 d2\n49 c1 ea 3f\n48 c1 fa 02\n42 8d 3c 12\n01 ff\n44 8d 0c bf\n89 cf\n44 29 cf\nb8 30 00 00 00\n29 f8\n88 06\n4c 01 d2\n48 83 c1 09\n48 ff ce\n48 83 f9 12\n48 89 d1\n77 c4\nc6 06 2d\n48 89 f0\nc3\n'
p1132
S'.text:0000000000403230\n.text:0000000000403233\n.text:0000000000403237\n.text:000000000040323a\n.text:000000000040323c\n.text:0000000000403240\n.text:000000000040324a\n.text:0000000000403250\n.text:0000000000403253\n.text:0000000000403256\n.text:0000000000403259\n.text:000000000040325d\n.text:0000000000403261\n.text:0000000000403264\n.text:0000000000403266\n.text:000000000040326a\n.text:000000000040326c\n.text:000000000040326f\n.text:0000000000403272\n.text:0000000000403276\n.text:0000000000403279\n.text:000000000040327c\n.text:0000000000403280\n.text:0000000000403284\n.text:0000000000403287\n.text:0000000000403289\n.text:000000000040328b\n.text:000000000040328f\n.text:0000000000403299\n.text:00000000004032a0\n.text:00000000004032a3\n.text:00000000004032a6\n.text:00000000004032a9\n.text:00000000004032ad\n.text:00000000004032b1\n.text:00000000004032b5\n.text:00000000004032b7\n.text:00000000004032bb\n.text:00000000004032bd\n.text:00000000004032c0\n.text:00000000004032c5\n.text:00000000004032c7\n.text:00000000004032c9\n.text:00000000004032cc\n.text:00000000004032d0\n.text:00000000004032d3\n.text:00000000004032d7\n.text:00000000004032da\n.text:00000000004032dc\n.text:00000000004032df\n.text:00000000004032e2\n'
p1133
tp1134
sS'strcaseeq5'
p1135
(S'\n__stdcall strcaseeq5()\n'
p1136
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1137
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00403020\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404b36\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404b3d\nJMP 0x00404b54\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404b54\nTEST BPL,BPL\nJZ 0x00404b4f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404b60\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1138
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 fd e4 ff ff\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1139
S'.text:0000000000404b10\n.text:0000000000404b11\n.text:0000000000404b13\n.text:0000000000404b14\n.text:0000000000404b17\n.text:0000000000404b19\n.text:0000000000404b1c\n.text:0000000000404b1e\n.text:0000000000404b23\n.text:0000000000404b27\n.text:0000000000404b29\n.text:0000000000404b2b\n.text:0000000000404b2e\n.text:0000000000404b30\n.text:0000000000404b32\n.text:0000000000404b34\n.text:0000000000404b36\n.text:0000000000404b38\n.text:0000000000404b3b\n.text:0000000000404b3d\n.text:0000000000404b40\n.text:0000000000404b42\n.text:0000000000404b46\n.text:0000000000404b49\n.text:0000000000404b4a\n.text:0000000000404b4c\n.text:0000000000404b4d\n.text:0000000000404b4f\n.text:0000000000404b54\n.text:0000000000404b55\n.text:0000000000404b57\n.text:0000000000404b58\n'
p1140
tp1141
sS'emit_ancillary_info'
p1142
(S'\n__stdcall emit_ancillary_info()\n'
p1143
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00406090;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("who",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "who";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00406596,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00406596);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x4072c9;\u000a  if (__s2 == "who") {\u000a    uVar3 = 0x40666d;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p1144
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x406090\nMOV ESI,0x406651\nNOP\nMOV EDI,0x406596\nCALL 0x00401790\nTEST EAX,EAX\nJZ 0x00401c8b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401c70\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x406596\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x4066b0\nMOV EDX,0x5\nCALL 0x00401670\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x4065c1\nMOV ECX,0x4066c7\nXOR EAX,EAX\nCALL 0x00401890\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401880\nTEST RAX,RAX\nJZ 0x00401d14\nMOV ESI,0x4066ee\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x004015d0\nTEST EAX,EAX\nJZ 0x00401d14\nXOR EDI,EDI\nMOV ESI,0x4066f2\nMOV EDX,0x5\nCALL 0x00401670\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406596\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401890\nXOR EDI,EDI\nMOV ESI,0x406737\nMOV EDX,0x5\nCALL 0x00401670\nMOV RSI,RAX\nMOV R14D,0x406596\nMOV EDI,0x1\nMOV EDX,0x4066c7\nMOV ECX,0x406596\nXOR EAX,EAX\nCALL 0x00401890\nXOR EDI,EDI\nMOV ESI,0x406756\nMOV EDX,0x5\nCALL 0x00401670\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x40666d\nMOV ECX,0x4072c9\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401890\n'
p1145
S'41 56\n53\n50\nbb 90 60 40 00\nbe 51 66 40 00\n66 90\nbf 96 65 40 00\ne8 16 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 96 65 40 00\n48 0f 45 d8\n31 ff\nbe b0 66 40 00\nba 05 00 00 00\ne8 c4 f9 ff ff\n48 89 c6\nbf 01 00 00 00\nba c1 65 40 00\nb9 c7 66 40 00\n31 c0\ne8 cb fb ff ff\nbf 05 00 00 00\n31 f6\ne8 af fb ff ff\n48 85 c0\n74 3e\nbe ee 66 40 00\nba 03 00 00 00\n48 89 c7\ne8 e8 f8 ff ff\n85 c0\n74 28\n31 ff\nbe f2 66 40 00\nba 05 00 00 00\ne8 73 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 96 65 40 00\n31 c0\n48 89 ce\ne8 7c fb ff ff\n31 ff\nbe 37 67 40 00\nba 05 00 00 00\ne8 4b f9 ff ff\n48 89 c6\n41 be 96 65 40 00\nbf 01 00 00 00\nba c7 66 40 00\nb9 96 65 40 00\n31 c0\ne8 4c fb ff ff\n31 ff\nbe 56 67 40 00\nba 05 00 00 00\ne8 1b f9 ff ff\n48 89 c2\n4c 39 f3\nb8 6d 66 40 00\nb9 c9 72 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 0e fb ff ff\n'
p1146
S'.text:0000000000401c60\n.text:0000000000401c62\n.text:0000000000401c63\n.text:0000000000401c64\n.text:0000000000401c69\n.text:0000000000401c6e\n.text:0000000000401c70\n.text:0000000000401c75\n.text:0000000000401c7a\n.text:0000000000401c7c\n.text:0000000000401c7e\n.text:0000000000401c82\n.text:0000000000401c86\n.text:0000000000401c89\n.text:0000000000401c8b\n.text:0000000000401c8f\n.text:0000000000401c92\n.text:0000000000401c97\n.text:0000000000401c9b\n.text:0000000000401c9d\n.text:0000000000401ca2\n.text:0000000000401ca7\n.text:0000000000401cac\n.text:0000000000401caf\n.text:0000000000401cb4\n.text:0000000000401cb9\n.text:0000000000401cbe\n.text:0000000000401cc0\n.text:0000000000401cc5\n.text:0000000000401cca\n.text:0000000000401ccc\n.text:0000000000401cd1\n.text:0000000000401cd4\n.text:0000000000401cd6\n.text:0000000000401cdb\n.text:0000000000401ce0\n.text:0000000000401ce3\n.text:0000000000401ce8\n.text:0000000000401cea\n.text:0000000000401cec\n.text:0000000000401cee\n.text:0000000000401cf3\n.text:0000000000401cf8\n.text:0000000000401cfd\n.text:0000000000401d00\n.text:0000000000401d05\n.text:0000000000401d0a\n.text:0000000000401d0c\n.text:0000000000401d0f\n.text:0000000000401d14\n.text:0000000000401d16\n.text:0000000000401d1b\n.text:0000000000401d20\n.text:0000000000401d25\n.text:0000000000401d28\n.text:0000000000401d2e\n.text:0000000000401d33\n.text:0000000000401d38\n.text:0000000000401d3d\n.text:0000000000401d3f\n.text:0000000000401d44\n.text:0000000000401d46\n.text:0000000000401d4b\n.text:0000000000401d50\n.text:0000000000401d55\n.text:0000000000401d58\n.text:0000000000401d5b\n.text:0000000000401d60\n.text:0000000000401d65\n.text:0000000000401d69\n.text:0000000000401d6e\n.text:0000000000401d70\n.text:0000000000401d73\n.text:0000000000401d76\n.text:0000000000401d7a\n.text:0000000000401d7b\n.text:0000000000401d7d\n'
p1147
tp1148
sS'strcaseeq7'
p1149
(S'\n__stdcall strcaseeq7()\n'
p1150
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1151
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00403020\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404bd2\nTEST ECX,0xffffffdf\nJNZ 0x00404bd6\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x00404bda\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1152
S'53\n48 89 fb\n31 ff\ne8 65 e4 ff ff\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1153
S'.text:0000000000404bb0\n.text:0000000000404bb1\n.text:0000000000404bb4\n.text:0000000000404bb6\n.text:0000000000404bbb\n.text:0000000000404bbf\n.text:0000000000404bc1\n.text:0000000000404bc3\n.text:0000000000404bc9\n.text:0000000000404bcb\n.text:0000000000404bd0\n.text:0000000000404bd1\n.text:0000000000404bd2\n.text:0000000000404bd4\n.text:0000000000404bd6\n.text:0000000000404bd8\n.text:0000000000404bd9\n.text:0000000000404bda\n.text:0000000000404bdf\n.text:0000000000404be0\n'
p1154
tp1155
sS'version_etc_va'
p1156
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p1157
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p1158
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00404fb0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00404fbc\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404fd1\nINC R9\nCMP R9,0xa\nJC 0x00404f90\nMOV R8,RSP\nCALL 0x00404bf0\nADD RSP,0x58\nRET\n'
p1159
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p1160
S'.text:0000000000404f80\n.text:0000000000404f84\n.text:0000000000404f87\n.text:0000000000404f90\n.text:0000000000404f93\n.text:0000000000404f97\n.text:0000000000404f99\n.text:0000000000404f9c\n.text:0000000000404fa0\n.text:0000000000404fa4\n.text:0000000000404fa7\n.text:0000000000404fb0\n.text:0000000000404fb4\n.text:0000000000404fb8\n.text:0000000000404fbc\n.text:0000000000404fbf\n.text:0000000000404fc3\n.text:0000000000404fc6\n.text:0000000000404fc8\n.text:0000000000404fcb\n.text:0000000000404fcf\n.text:0000000000404fd1\n.text:0000000000404fd4\n.text:0000000000404fd9\n.text:0000000000404fdd\n'
p1161
tp1162
sS'xzalloc'
p1163
(S'\n__stdcall xzalloc(size_t s)\n'
p1164
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p1165
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00405110\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401700\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1166
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 e4 c4 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1167
S'.text:0000000000405200\n.text:0000000000405202\n.text:0000000000405203\n.text:0000000000405204\n.text:0000000000405207\n.text:000000000040520c\n.text:000000000040520f\n.text:0000000000405211\n.text:0000000000405214\n.text:0000000000405217\n.text:000000000040521c\n.text:000000000040521f\n.text:0000000000405223\n.text:0000000000405224\n.text:0000000000405226\n'
p1168
tp1169
sS'__strdup'
p1170
(S'\n__stdcall __strdup()\n'
p1171
V\u000avoid __strdup(void)\u000a\u000a{\u000a  (*(code *)PTR___strdup_00609100)();\u000a  return;\u000a}\u000a\u000a
p1172
S'JMP qword ptr [0x00609100]\n'
p1173
S'ff 25 ca 79 20 00\n'
p1174
S'.plt:0000000000401730\n'
p1175
tp1176
sS'strcaseeq0'
p1177
(S'\n__stdcall strcaseeq0()\n'
p1178
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1179
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00403020\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x004048e5\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004048ec\nJMP 0x00404920\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404920\nTEST BPL,BPL\nJZ 0x0040491b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404930\nJMP 0x00404920\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1180
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 4d e7 ff ff\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1181
S'.text:00000000004048b0\n.text:00000000004048b1\n.text:00000000004048b3\n.text:00000000004048b5\n.text:00000000004048b7\n.text:00000000004048b9\n.text:00000000004048ba\n.text:00000000004048bb\n.text:00000000004048be\n.text:00000000004048c1\n.text:00000000004048c4\n.text:00000000004048c7\n.text:00000000004048c9\n.text:00000000004048cc\n.text:00000000004048ce\n.text:00000000004048d3\n.text:00000000004048d6\n.text:00000000004048d8\n.text:00000000004048da\n.text:00000000004048dd\n.text:00000000004048df\n.text:00000000004048e1\n.text:00000000004048e3\n.text:00000000004048e5\n.text:00000000004048e7\n.text:00000000004048ea\n.text:00000000004048ec\n.text:00000000004048ef\n.text:00000000004048f1\n.text:00000000004048f5\n.text:00000000004048fa\n.text:00000000004048fd\n.text:0000000000404901\n.text:0000000000404905\n.text:0000000000404909\n.text:000000000040490d\n.text:0000000000404911\n.text:0000000000404914\n.text:0000000000404919\n.text:000000000040491b\n.text:0000000000404920\n.text:0000000000404924\n.text:0000000000404925\n.text:0000000000404927\n.text:0000000000404929\n.text:000000000040492b\n.text:000000000040492d\n.text:000000000040492e\n'
p1182
tp1183
sS'endutxent'
p1184
(S'\n__stdcall endutxent()\n'
p1185
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid endutxent(void)\u000a\u000a{\u000a  (*(code *)PTR_endutxent_00609088)();\u000a  return;\u000a}\u000a\u000a
p1186
S'JMP qword ptr [0x00609088]\n'
p1187
S'ff 25 42 7a 20 00\n'
p1188
S'.plt:0000000000401640\n'
p1189
tp1190
sS'strcaseeq2'
p1191
(S'\n__stdcall strcaseeq2()\n'
p1192
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1193
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00403020\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x004049f6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004049fd\nJMP 0x00404a2a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404a2a\nTEST BPL,BPL\nJZ 0x00404a25\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404a40\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1194
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 3d e6 ff ff\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1195
S'.text:00000000004049c0\n.text:00000000004049c1\n.text:00000000004049c3\n.text:00000000004049c5\n.text:00000000004049c7\n.text:00000000004049c9\n.text:00000000004049ca\n.text:00000000004049cb\n.text:00000000004049ce\n.text:00000000004049d1\n.text:00000000004049d4\n.text:00000000004049d7\n.text:00000000004049d9\n.text:00000000004049dc\n.text:00000000004049de\n.text:00000000004049e3\n.text:00000000004049e7\n.text:00000000004049e9\n.text:00000000004049eb\n.text:00000000004049ee\n.text:00000000004049f0\n.text:00000000004049f2\n.text:00000000004049f4\n.text:00000000004049f6\n.text:00000000004049f8\n.text:00000000004049fb\n.text:00000000004049fd\n.text:0000000000404a00\n.text:0000000000404a02\n.text:0000000000404a06\n.text:0000000000404a0a\n.text:0000000000404a0e\n.text:0000000000404a12\n.text:0000000000404a15\n.text:0000000000404a19\n.text:0000000000404a1a\n.text:0000000000404a1c\n.text:0000000000404a1e\n.text:0000000000404a20\n.text:0000000000404a22\n.text:0000000000404a23\n.text:0000000000404a25\n.text:0000000000404a2a\n.text:0000000000404a2e\n.text:0000000000404a2f\n.text:0000000000404a31\n.text:0000000000404a33\n.text:0000000000404a35\n.text:0000000000404a37\n.text:0000000000404a38\n'
p1196
tp1197
sS'strcaseeq1'
p1198
(S'\n__stdcall strcaseeq1()\n'
p1199
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1200
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00403020\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040496d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404974\nJMP 0x004049a7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004049a7\nTEST BPL,BPL\nJZ 0x004049a2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004049c0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1201
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 c6 e6 ff ff\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1202
S'.text:0000000000404930\n.text:0000000000404931\n.text:0000000000404933\n.text:0000000000404935\n.text:0000000000404937\n.text:0000000000404939\n.text:000000000040493a\n.text:000000000040493b\n.text:0000000000404940\n.text:0000000000404943\n.text:0000000000404946\n.text:0000000000404949\n.text:000000000040494b\n.text:000000000040494e\n.text:0000000000404953\n.text:0000000000404955\n.text:000000000040495a\n.text:000000000040495e\n.text:0000000000404960\n.text:0000000000404962\n.text:0000000000404965\n.text:0000000000404967\n.text:0000000000404969\n.text:000000000040496b\n.text:000000000040496d\n.text:000000000040496f\n.text:0000000000404972\n.text:0000000000404974\n.text:0000000000404977\n.text:0000000000404979\n.text:000000000040497d\n.text:0000000000404981\n.text:0000000000404985\n.text:000000000040498b\n.text:000000000040498f\n.text:0000000000404992\n.text:0000000000404996\n.text:0000000000404997\n.text:0000000000404999\n.text:000000000040499b\n.text:000000000040499d\n.text:000000000040499f\n.text:00000000004049a0\n.text:00000000004049a2\n.text:00000000004049a7\n.text:00000000004049ab\n.text:00000000004049ac\n.text:00000000004049ae\n.text:00000000004049b0\n.text:00000000004049b2\n.text:00000000004049b4\n.text:00000000004049b5\n'
p1203
tp1204
sS'strcaseeq4'
p1205
(S'\n__stdcall strcaseeq4()\n'
p1206
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1207
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00403020\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00404adc\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404ae3\nJMP 0x00404b04\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404b04\nTEST BPL,BPL\nJZ 0x00404aff\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404b10\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1208
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 57 e5 ff ff\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1209
S'.text:0000000000404ab0\n.text:0000000000404ab1\n.text:0000000000404ab3\n.text:0000000000404ab5\n.text:0000000000404ab6\n.text:0000000000404ab7\n.text:0000000000404aba\n.text:0000000000404abd\n.text:0000000000404abf\n.text:0000000000404ac2\n.text:0000000000404ac4\n.text:0000000000404ac9\n.text:0000000000404acd\n.text:0000000000404acf\n.text:0000000000404ad1\n.text:0000000000404ad4\n.text:0000000000404ad6\n.text:0000000000404ad8\n.text:0000000000404ada\n.text:0000000000404adc\n.text:0000000000404ade\n.text:0000000000404ae1\n.text:0000000000404ae3\n.text:0000000000404ae6\n.text:0000000000404ae8\n.text:0000000000404aec\n.text:0000000000404af0\n.text:0000000000404af3\n.text:0000000000404af7\n.text:0000000000404af8\n.text:0000000000404afa\n.text:0000000000404afc\n.text:0000000000404afd\n.text:0000000000404aff\n.text:0000000000404b04\n.text:0000000000404b08\n.text:0000000000404b09\n.text:0000000000404b0b\n.text:0000000000404b0d\n.text:0000000000404b0e\n'
p1210
tp1211
sS'strcaseeq3'
p1212
(S'\n__stdcall strcaseeq3()\n'
p1213
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1214
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00403020\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404a70\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404a77\nJMP 0x00404a9a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404a9a\nTEST BPL,BPL\nJZ 0x00404a95\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404ab0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1215
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 c3 e5 ff ff\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1216
S'.text:0000000000404a40\n.text:0000000000404a41\n.text:0000000000404a43\n.text:0000000000404a45\n.text:0000000000404a47\n.text:0000000000404a48\n.text:0000000000404a4b\n.text:0000000000404a4e\n.text:0000000000404a51\n.text:0000000000404a53\n.text:0000000000404a56\n.text:0000000000404a58\n.text:0000000000404a5d\n.text:0000000000404a61\n.text:0000000000404a63\n.text:0000000000404a65\n.text:0000000000404a68\n.text:0000000000404a6a\n.text:0000000000404a6c\n.text:0000000000404a6e\n.text:0000000000404a70\n.text:0000000000404a72\n.text:0000000000404a75\n.text:0000000000404a77\n.text:0000000000404a7a\n.text:0000000000404a7c\n.text:0000000000404a80\n.text:0000000000404a84\n.text:0000000000404a88\n.text:0000000000404a8b\n.text:0000000000404a8c\n.text:0000000000404a8e\n.text:0000000000404a90\n.text:0000000000404a92\n.text:0000000000404a93\n.text:0000000000404a95\n.text:0000000000404a9a\n.text:0000000000404a9b\n.text:0000000000404a9d\n.text:0000000000404a9f\n.text:0000000000404aa1\n.text:0000000000404aa2\n'
p1217
tp1218
sS'register_tm_clones'
p1219
(S'\n__stdcall register_tm_clones()\n'
p1220
V\u000a/* WARNING: Removing unreachable block (ram,0x00401a33) */\u000a/* WARNING: Removing unreachable block (ram,0x00401a3d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1221
S'MOV ESI,0x6092c0\nPUSH RBP\nSUB RSI,0x6092c0\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401a48\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401a48\nPOP RBP\nMOV EDI,0x6092c0\nJMP RAX\nPOP RBP\nRET\n'
p1222
S'be c0 92 60 00\n55\n48 81 ee c0 92 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf c0 92 60 00\nff e0\n5d\nc3\n'
p1223
S'.text:0000000000401a10\n.text:0000000000401a15\n.text:0000000000401a16\n.text:0000000000401a1d\n.text:0000000000401a21\n.text:0000000000401a24\n.text:0000000000401a27\n.text:0000000000401a2b\n.text:0000000000401a2e\n.text:0000000000401a31\n.text:0000000000401a33\n.text:0000000000401a38\n.text:0000000000401a3b\n.text:0000000000401a3d\n.text:0000000000401a3e\n.text:0000000000401a43\n.text:0000000000401a48\n.text:0000000000401a49\n'
p1224
tp1225
sS'gettext_quote'
p1226
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1227
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00407190;\u000a        pcVar2 = &DAT_00407194;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1228
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401670\nCMP RAX,RBX\nJNZ 0x004048a8\nCALL 0x004054f0\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x004048b0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404858\nCMP byte ptr [RBX],0x60\nMOV ECX,0x407180\nMOV EAX,0x407184\nJMP 0x004048a4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x004048b0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404896\nCMP byte ptr [RBX],0x60\nMOV ECX,0x407190\nMOV EAX,0x407194\nJMP 0x004048a4\nCMP R14D,0x9\nMOV ECX,0x407174\nMOV EAX,0x407178\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1229
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 67 ce ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 d9 0c 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 80 71 40 00\nb8 84 71 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 90 71 40 00\nb8 94 71 40 00\neb 0e\n41 83 fe 09\nb9 74 71 40 00\nb8 78 71 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1230
S'.text:00000000004047f0\n.text:00000000004047f1\n.text:00000000004047f3\n.text:00000000004047f4\n.text:00000000004047f7\n.text:00000000004047fa\n.text:00000000004047fc\n.text:0000000000404801\n.text:0000000000404804\n.text:0000000000404809\n.text:000000000040480c\n.text:0000000000404812\n.text:0000000000404817\n.text:000000000040481a\n.text:000000000040481f\n.text:0000000000404824\n.text:0000000000404829\n.text:000000000040482f\n.text:0000000000404835\n.text:0000000000404838\n.text:000000000040483a\n.text:000000000040483c\n.text:0000000000404841\n.text:0000000000404845\n.text:0000000000404847\n.text:0000000000404849\n.text:000000000040484c\n.text:0000000000404851\n.text:0000000000404856\n.text:0000000000404858\n.text:000000000040485d\n.text:0000000000404862\n.text:0000000000404867\n.text:000000000040486d\n.text:0000000000404873\n.text:0000000000404876\n.text:0000000000404878\n.text:000000000040487a\n.text:000000000040487f\n.text:0000000000404883\n.text:0000000000404885\n.text:0000000000404887\n.text:000000000040488a\n.text:000000000040488f\n.text:0000000000404894\n.text:0000000000404896\n.text:000000000040489a\n.text:000000000040489f\n.text:00000000004048a4\n.text:00000000004048a8\n.text:00000000004048a9\n.text:00000000004048ab\n.text:00000000004048ac\n'
p1231
tp1232
sS'scan_entries'
p1233
(S'\n__stdcall scan_entries(size_t n, STRUCT_UTMP * utmp_buf)\n'
p1234
V\u000avoid scan_entries(size_t n,STRUCT_UTMP *utmp_buf)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  time_t boottime;\u000a  char *__s1_00;\u000a  \u000a  if (include_heading == 1) {\u000a    print_heading();\u000a  }\u000a  if (my_line_only == 1) {\u000a    __s1 = ttyname(0);\u000a    if (__s1 == (char *)0x0) {\u000a      return;\u000a    }\u000a    iVar1 = strncmp(__s1,"/dev/",5);\u000a    __s1_00 = __s1 + 5;\u000a    if (iVar1 != 0) {\u000a      __s1_00 = __s1;\u000a    }\u000a  }\u000a  if (n != 0) {\u000a    boottime = -0x8000000000000000;\u000a    do {\u000a      if ((my_line_only != 1) || (iVar1 = strncmp(__s1_00,utmp_buf->ut_line,0x20), iVar1 == 0)) {\u000a        if ((need_users == 1) && ((utmp_buf->ut_user[0] != 0 && (utmp_buf->ut_type == 7)))) {\u000a          print_user(utmp_buf,boottime);\u000a        }\u000a        else {\u000a          if ((need_runlevel == 1) && (utmp_buf->ut_type == 1)) {\u000a            print_runlevel(utmp_buf);\u000a          }\u000a          else {\u000a            if ((need_boottime == 1) && (utmp_buf->ut_type == 2)) {\u000a              print_boottime(utmp_buf);\u000a            }\u000a            else {\u000a              if ((need_clockchange == 1) && (utmp_buf->ut_type == 3)) {\u000a                print_clockchange(utmp_buf);\u000a              }\u000a              else {\u000a                if ((need_initspawn == 1) && (utmp_buf->ut_type == 5)) {\u000a                  print_initspawn(utmp_buf);\u000a                }\u000a                else {\u000a                  if ((need_login == 1) && (utmp_buf->ut_type == 6)) {\u000a                    print_login(utmp_buf);\u000a                  }\u000a                  else {\u000a                    if ((need_deadprocs == 1) && (utmp_buf->ut_type == 8)) {\u000a                      print_deadprocs(utmp_buf);\u000a                    }\u000a                  }\u000a                }\u000a              }\u000a            }\u000a          }\u000a        }\u000a      }\u000a      n = n - 1;\u000a      if (utmp_buf->ut_type == 2) {\u000a        boottime = (time_t)(utmp_buf->ut_tv).tv_sec;\u000a      }\u000a      utmp_buf = utmp_buf + 1;\u000a    } while (n != 0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1235
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCMP byte ptr [0x006092fa],0x1\nJNZ 0x0040217c\nCALL 0x00402300\nCMP byte ptr [0x006092fb],0x1\nJNZ 0x004021b5\nXOR EDI,EDI\nCALL 0x00401850\nMOV R12,RAX\nTEST R12,R12\nJZ 0x004022f2\nMOV ESI,0x406805\nMOV EDX,0x5\nMOV RDI,R12\nCALL 0x004015d0\nLEA R15,[R12 + 0x5]\nTEST EAX,EAX\nCMOVNZ R15,R12\nTEST R14,R14\nJZ 0x004022f2\nMOV R12,-0x8000000000000000\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [0x006092fb],0x1\nJNZ 0x004021f2\nLEA RSI,[RBX + 0x8]\nMOV EDX,0x20\nMOV RDI,R15\nCALL 0x004015d0\nTEST EAX,EAX\nJNZ 0x004022d0\nCMP byte ptr [0x006092f6],0x1\nJNZ 0x00402220\nCMP byte ptr [RBX + 0x2c],0x0\nJZ 0x00402220\nMOVZX EAX,word ptr [RBX]\nCMP EAX,0x7\nJNZ 0x00402220\nMOV RDI,RBX\nMOV RSI,R12\nCALL 0x004023d0\nJMP 0x004022d0\nCMP byte ptr [0x006092f4],0x1\nJNZ 0x00402240\nMOVZX EAX,word ptr [RBX]\nCMP EAX,0x1\nJNZ 0x00402240\nMOV RDI,RBX\nCALL 0x004026c0\nJMP 0x004022d0\nCMP byte ptr [0x006092f0],0x1\nJNZ 0x00402260\nMOVZX EAX,word ptr [RBX]\nCMP EAX,0x2\nJNZ 0x00402260\nMOV RDI,RBX\nCALL 0x00402830\nJMP 0x004022d0\nCMP byte ptr [0x006092f5],0x1\nJNZ 0x00402280\nMOVZX EAX,word ptr [RBX]\nCMP EAX,0x3\nJNZ 0x00402280\nMOV RDI,RBX\nCALL 0x00402890\nJMP 0x004022d0\nCMP byte ptr [0x006092f3],0x1\nJNZ 0x0040229b\nMOVZX EAX,word ptr [RBX]\nCMP EAX,0x5\nJNZ 0x0040229b\nMOV RDI,RBX\nCALL 0x004028f0\nJMP 0x004022d0\nCMP byte ptr [0x006092f2],0x1\nJNZ 0x004022b6\nMOVZX EAX,word ptr [RBX]\nCMP EAX,0x6\nJNZ 0x004022b6\nMOV RDI,RBX\nCALL 0x00402980\nJMP 0x004022d0\nCMP byte ptr [0x006092f1],0x1\nJNZ 0x004022d0\nMOVZX EAX,word ptr [RBX]\nCMP EAX,0x8\nJNZ 0x004022d0\nMOV RDI,RBX\nCALL 0x00402a20\nNOP\nDEC R14\nMOVZX EAX,word ptr [RBX]\nCMP EAX,0x2\nJNZ 0x004022e2\nMOVSXD R12,dword ptr [0x154 + RBX]\nADD RBX,0x180\nTEST R14,R14\nJNZ 0x004021d0\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1236
S'41 57\n41 56\n41 54\n53\n50\n48 89 f3\n49 89 fe\n80 3d 85 71 20 00 01\n75 05\ne8 84 01 00 00\n80 3d 78 71 20 00 01\n75 30\n31 ff\ne8 c4 f6 ff ff\n49 89 c4\n4d 85 e4\n0f 84 5a 01 00 00\nbe 05 68 40 00\nba 05 00 00 00\n4c 89 e7\ne8 26 f4 ff ff\n4d 8d 7c 24 05\n85 c0\n4d 0f 45 fc\n4d 85 f6\n0f 84 34 01 00 00\n49 bc 00 00 00 00 00 00 00 80\n0f 1f 84 00 00 00 00 00\n80 3d 24 71 20 00 01\n75 19\n48 8d 73 08\nba 20 00 00 00\n4c 89 ff\ne8 e6 f3 ff ff\n85 c0\n0f 85 de 00 00 00\n80 3d fd 70 20 00 01\n75 25\n80 7b 2c 00\n74 1f\n0f b7 03\n83 f8 07\n75 17\n48 89 df\n4c 89 e6\ne8 bc 01 00 00\ne9 b7 00 00 00\n80 3d cd 70 20 00 01\n75 17\n0f b7 03\n83 f8 01\n75 0f\n48 89 df\ne8 87 04 00 00\ne9 92 00 00 00\n80 3d a9 70 20 00 01\n75 17\n0f b7 03\n83 f8 02\n75 0f\n48 89 df\ne8 d7 05 00 00\neb 75\n80 3d 8e 70 20 00 01\n75 17\n0f b7 03\n83 f8 03\n75 0f\n48 89 df\ne8 17 06 00 00\neb 55\n80 3d 6c 70 20 00 01\n75 12\n0f b7 03\n83 f8 05\n75 0a\n48 89 df\ne8 57 06 00 00\neb 35\n80 3d 50 70 20 00 01\n75 12\n0f b7 03\n83 f8 06\n75 0a\n48 89 df\ne8 cc 06 00 00\neb 1a\n80 3d 34 70 20 00 01\n75 11\n0f b7 03\n83 f8 08\n75 09\n48 89 df\ne8 51 07 00 00\n90\n49 ff ce\n0f b7 03\n83 f8 02\n75 07\n4c 63 a3 54 01 00 00\n48 81 c3 80 01 00 00\n4d 85 f6\n0f 85 de fe ff ff\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1237
S'.text:0000000000402160\n.text:0000000000402162\n.text:0000000000402164\n.text:0000000000402166\n.text:0000000000402167\n.text:0000000000402168\n.text:000000000040216b\n.text:000000000040216e\n.text:0000000000402175\n.text:0000000000402177\n.text:000000000040217c\n.text:0000000000402183\n.text:0000000000402185\n.text:0000000000402187\n.text:000000000040218c\n.text:000000000040218f\n.text:0000000000402192\n.text:0000000000402198\n.text:000000000040219d\n.text:00000000004021a2\n.text:00000000004021a5\n.text:00000000004021aa\n.text:00000000004021af\n.text:00000000004021b1\n.text:00000000004021b5\n.text:00000000004021b8\n.text:00000000004021be\n.text:00000000004021c8\n.text:00000000004021d0\n.text:00000000004021d7\n.text:00000000004021d9\n.text:00000000004021dd\n.text:00000000004021e2\n.text:00000000004021e5\n.text:00000000004021ea\n.text:00000000004021ec\n.text:00000000004021f2\n.text:00000000004021f9\n.text:00000000004021fb\n.text:00000000004021ff\n.text:0000000000402201\n.text:0000000000402204\n.text:0000000000402207\n.text:0000000000402209\n.text:000000000040220c\n.text:000000000040220f\n.text:0000000000402214\n.text:0000000000402220\n.text:0000000000402227\n.text:0000000000402229\n.text:000000000040222c\n.text:000000000040222f\n.text:0000000000402231\n.text:0000000000402234\n.text:0000000000402239\n.text:0000000000402240\n.text:0000000000402247\n.text:0000000000402249\n.text:000000000040224c\n.text:000000000040224f\n.text:0000000000402251\n.text:0000000000402254\n.text:0000000000402259\n.text:0000000000402260\n.text:0000000000402267\n.text:0000000000402269\n.text:000000000040226c\n.text:000000000040226f\n.text:0000000000402271\n.text:0000000000402274\n.text:0000000000402279\n.text:0000000000402280\n.text:0000000000402287\n.text:0000000000402289\n.text:000000000040228c\n.text:000000000040228f\n.text:0000000000402291\n.text:0000000000402294\n.text:0000000000402299\n.text:000000000040229b\n.text:00000000004022a2\n.text:00000000004022a4\n.text:00000000004022a7\n.text:00000000004022aa\n.text:00000000004022ac\n.text:00000000004022af\n.text:00000000004022b4\n.text:00000000004022b6\n.text:00000000004022bd\n.text:00000000004022bf\n.text:00000000004022c2\n.text:00000000004022c5\n.text:00000000004022c7\n.text:00000000004022ca\n.text:00000000004022cf\n.text:00000000004022d0\n.text:00000000004022d3\n.text:00000000004022d6\n.text:00000000004022d9\n.text:00000000004022db\n.text:00000000004022e2\n.text:00000000004022e9\n.text:00000000004022ec\n.text:00000000004022f2\n.text:00000000004022f6\n.text:00000000004022f7\n.text:00000000004022f9\n.text:00000000004022fb\n.text:00000000004022fd\n'
p1238
tp1239
sS'c_islower'
p1240
(S'\n__stdcall c_islower()\n'
p1241
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1242
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1243
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1244
S'.text:0000000000402fc0\n.text:0000000000402fc3\n.text:0000000000402fc6\n.text:0000000000402fc9\n'
p1245
tp1246
sS'fclose'
p1247
(S'\n__stdcall fclose(FILE * __stream)\n'
p1248
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00609090)();\u000a  return iVar1;\u000a}\u000a\u000a
p1249
S'JMP qword ptr [0x00609090]\n'
p1250
S'ff 25 3a 7a 20 00\n'
p1251
S'.plt:0000000000401650\n'
p1252
tp1253
sS'__ctype_get_mb_cur_max'
p1254
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1255
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_006090a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p1256
S'JMP qword ptr [0x006090a8]\n'
p1257
S'ff 25 22 7a 20 00\n'
p1258
S'.plt:0000000000401680\n'
p1259
tp1260
sS'quotearg_n_style'
p1261
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1262
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1263
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00404520\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x004042f0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1264
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1265
S'.text:00000000004044e0\n.text:00000000004044e1\n.text:00000000004044e3\n.text:00000000004044e4\n.text:00000000004044e8\n.text:00000000004044eb\n.text:00000000004044ed\n.text:00000000004044f2\n.text:00000000004044f5\n.text:00000000004044fa\n.text:0000000000404501\n.text:0000000000404503\n.text:0000000000404506\n.text:0000000000404509\n.text:000000000040450e\n.text:0000000000404512\n.text:0000000000404513\n.text:0000000000404515\n.text:0000000000404516\n'
p1266
tp1267
sS'fwrite'
p1268
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1269
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_006091f0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1270
S'JMP qword ptr [0x006091f0]\n'
p1271
S'ff 25 da 78 20 00\n'
p1272
S'.plt:0000000000401910\n'
p1273
tp1274
sS'quote_n'
p1275
(S'\n__stdcall quote_n(char * arg)\n'
p1276
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1277
S'MOV RDX,-0x1\nJMP 0x004047b0\n'
p1278
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1279
S'.text:00000000004047d0\n.text:00000000004047d7\n'
p1280
tp1281
sS'quotearg_alloc'
p1282
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1283
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1284
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00404160\n'
p1285
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1286
S'.text:0000000000404150\n.text:0000000000404153\n.text:0000000000404155\n.text:0000000000404158\n'
p1287
tp1288
sS'__do_global_dtors_aux'
p1289
(S'\n__stdcall __do_global_dtors_aux()\n'
p1290
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1291
S'CMP byte ptr [0x006092e8],0x0\nJNZ 0x00401a6a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x004019d0\nPOP RBP\nMOV byte ptr [0x006092e8],0x1\nRET\n'
p1292
S'80 3d 91 78 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 7e 78 20 00 01\nf3 c3\n'
p1293
S'.text:0000000000401a50\n.text:0000000000401a57\n.text:0000000000401a59\n.text:0000000000401a5a\n.text:0000000000401a5d\n.text:0000000000401a62\n.text:0000000000401a63\n.text:0000000000401a6a\n'
p1294
tp1295
sS'c_isprint'
p1296
(S'\n__stdcall c_isprint()\n'
p1297
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1298
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1299
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1300
S'.text:0000000000402fd0\n.text:0000000000402fd3\n.text:0000000000402fd6\n.text:0000000000402fd9\n'
p1301
tp1302
sS'close_stdout_set_file_name'
p1303
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1304
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1305
S'MOV qword ptr [0x006093a8],RDI\nRET\n'
p1306
S'48 89 3d 91 62 20 00\nc3\n'
p1307
S'.text:0000000000403110\n.text:0000000000403117\n'
p1308
tp1309
sS'strncpy'
p1310
(S'\n__stdcall strncpy(char * __dest, char * __src, size_t __n)\n'
p1311
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strncpy(char *__dest,char *__src,size_t __n)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strncpy_00609048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1312
S'JMP qword ptr [0x00609048]\n'
p1313
S'ff 25 82 7a 20 00\n'
p1314
S'.plt:00000000004015c0\n'
p1315
tp1316
sS'_fini'
p1317
(S'\n__stdcall _fini()\n'
p1318
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1319
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1320
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1321
S'.fini:0000000000405a20\n.fini:0000000000405a24\n.fini:0000000000405a28\n'
p1322
tp1323
sS'time'
p1324
(S'\n__stdcall time(time_t * __timer)\n'
p1325
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000atime_t time(time_t *__timer)\u000a\u000a{\u000a  time_t tVar1;\u000a  \u000a  tVar1 = (*(code *)PTR_time_00609150)();\u000a  return tVar1;\u000a}\u000a\u000a
p1326
S'JMP qword ptr [0x00609150]\n'
p1327
S'ff 25 7a 79 20 00\n'
p1328
S'.plt:00000000004017d0\n'
p1329
tp1330
sS'__fpending'
p1331
(S'\n__stdcall __fpending()\n'
p1332
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00609068)();\u000a  return;\u000a}\u000a\u000a
p1333
S'JMP qword ptr [0x00609068]\n'
p1334
S'ff 25 62 7a 20 00\n'
p1335
S'.plt:0000000000401600\n'
p1336
tp1337
s.