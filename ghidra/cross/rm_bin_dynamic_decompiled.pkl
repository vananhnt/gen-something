(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060e198)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0060e198]\n'
p4
S'ff 25 42 c7 20 00\n'
p5
S'.plt:0000000000401a50\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040ad4b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x405177;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x4051f8;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40528c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00405008\nMOV EDX,0x40ad38\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401b80\nJMP 0x0040501d\nMOV EDX,0x40ad44\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401b80\nXOR EDI,EDI\nMOV ESI,0x40ad4b\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40b000\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401b80\nXOR EDI,EDI\nMOV ESI,0x40ad4f\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401970\nCMP R12,0x9\nJA 0x004050a6\nJMP qword ptr [0x40ace8 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40ae1a\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b80\nXOR EDI,EDI\nMOV ESI,0x40af59\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b80\nADD RSP,0x38\nJMP 0x00405317\nXOR EDI,EDI\nMOV ESI,0x40ae2a\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b80\nXOR EDI,EDI\nMOV ESI,0x40ae41\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401b80\nXOR EDI,EDI\nMOV ESI,0x40ae5d\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b80\nADD RSP,0x18\nJMP 0x00405317\nXOR EDI,EDI\nMOV ESI,0x40ae7d\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b80\nADD RSP,0x18\nJMP 0x00405317\nXOR EDI,EDI\nMOV ESI,0x40aea1\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b80\nADD RSP,0x28\nJMP 0x00405317\nXOR EDI,EDI\nMOV ESI,0x40aec9\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b80\nADD RSP,0x28\nJMP 0x00405317\nXOR EDI,EDI\nMOV ESI,0x40aef5\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b80\nADD RSP,0x38\nJMP 0x00405317\nXOR EDI,EDI\nMOV ESI,0x40af25\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401b80\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401770\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 38 ad 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 7a cb ff ff\neb 15\nba 44 ad 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 63 cb ff ff\n31 ff\nbe 4b ad 40 00\nba 05 00 00 00\ne8 32 c8 ff ff\n48 89 c1\nbe 01 00 00 00\nba 00 b0 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 35 cb ff ff\n31 ff\nbe 4f ad 40 00\nba 05 00 00 00\ne8 04 c8 ff ff\n48 89 c7\n4c 89 f6\ne8 09 c9 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 e8 ac 40 00\n31 ff\nbe 1a ae 40 00\nba 05 00 00 00\ne8 da c7 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 da ca ff ff\n31 ff\nbe 59 af 40 00\nba 05 00 00 00\ne8 a9 c7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 91 ca ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 2a ae 40 00\nba 05 00 00 00\ne8 57 c7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 53 ca ff ff\n31 ff\nbe 41 ae 40 00\nba 05 00 00 00\ne8 22 c7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 1a ca ff ff\n31 ff\nbe 5d ae 40 00\nba 05 00 00 00\ne8 e9 c6 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 e4 c9 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 7d ae 40 00\nba 05 00 00 00\ne8 aa c6 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 a2 c9 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe a1 ae 40 00\nba 05 00 00 00\ne8 68 c6 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 58 c9 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe c9 ae 40 00\nba 05 00 00 00\ne8 1e c6 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 0e c9 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe f5 ae 40 00\nba 05 00 00 00\ne8 d4 c5 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 bc c8 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 25 af 40 00\nba 05 00 00 00\ne8 85 c5 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 6d c8 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 4c c4 ff ff\n'
p12
S'.text:0000000000404fd0\n.text:0000000000404fd2\n.text:0000000000404fd4\n.text:0000000000404fd6\n.text:0000000000404fd7\n.text:0000000000404fd8\n.text:0000000000404fdb\n.text:0000000000404fde\n.text:0000000000404fe1\n.text:0000000000404fe4\n.text:0000000000404fe7\n.text:0000000000404fea\n.text:0000000000404fef\n.text:0000000000404ff2\n.text:0000000000404ff4\n.text:0000000000404ff9\n.text:0000000000404ffb\n.text:0000000000404ffe\n.text:0000000000405001\n.text:0000000000405006\n.text:0000000000405008\n.text:000000000040500d\n.text:000000000040500f\n.text:0000000000405012\n.text:0000000000405015\n.text:0000000000405018\n.text:000000000040501d\n.text:000000000040501f\n.text:0000000000405024\n.text:0000000000405029\n.text:000000000040502e\n.text:0000000000405031\n.text:0000000000405036\n.text:000000000040503b\n.text:0000000000405041\n.text:0000000000405043\n.text:0000000000405046\n.text:000000000040504b\n.text:000000000040504d\n.text:0000000000405052\n.text:0000000000405057\n.text:000000000040505c\n.text:000000000040505f\n.text:0000000000405062\n.text:0000000000405067\n.text:000000000040506b\n.text:000000000040506d\n.text:0000000000405075\n.text:0000000000405077\n.text:000000000040507c\n.text:0000000000405081\n.text:0000000000405086\n.text:0000000000405089\n.text:000000000040508c\n.text:0000000000405091\n.text:0000000000405093\n.text:0000000000405096\n.text:000000000040509a\n.text:000000000040509b\n.text:000000000040509d\n.text:000000000040509f\n.text:00000000004050a1\n.text:00000000004050a6\n.text:00000000004050a8\n.text:00000000004050ad\n.text:00000000004050b2\n.text:00000000004050b7\n.text:00000000004050ba\n.text:00000000004050bd\n.text:00000000004050c1\n.text:00000000004050c5\n.text:00000000004050ca\n.text:00000000004050cf\n.text:00000000004050d2\n.text:00000000004050d6\n.text:00000000004050da\n.text:00000000004050de\n.text:00000000004050e2\n.text:00000000004050e6\n.text:00000000004050ea\n.text:00000000004050ef\n.text:00000000004050f3\n.text:00000000004050f8\n.text:00000000004050fa\n.text:00000000004050ff\n.text:0000000000405104\n.text:0000000000405109\n.text:000000000040510c\n.text:000000000040510f\n.text:0000000000405113\n.text:0000000000405118\n.text:000000000040511a\n.text:000000000040511d\n.text:0000000000405121\n.text:0000000000405122\n.text:0000000000405124\n.text:0000000000405126\n.text:0000000000405128\n.text:000000000040512d\n.text:000000000040512f\n.text:0000000000405134\n.text:0000000000405139\n.text:000000000040513e\n.text:0000000000405141\n.text:0000000000405144\n.text:0000000000405148\n.text:000000000040514c\n.text:0000000000405151\n.text:0000000000405153\n.text:0000000000405156\n.text:000000000040515a\n.text:000000000040515b\n.text:000000000040515d\n.text:000000000040515f\n.text:0000000000405161\n.text:0000000000405166\n.text:0000000000405168\n.text:000000000040516d\n.text:0000000000405172\n.text:0000000000405177\n.text:000000000040517a\n.text:000000000040517d\n.text:0000000000405181\n.text:0000000000405185\n.text:0000000000405189\n.text:000000000040518e\n.text:0000000000405190\n.text:0000000000405193\n.text:0000000000405197\n.text:000000000040519c\n.text:00000000004051a0\n.text:00000000004051a5\n.text:00000000004051a7\n.text:00000000004051ac\n.text:00000000004051b1\n.text:00000000004051b6\n.text:00000000004051b9\n.text:00000000004051bc\n.text:00000000004051c0\n.text:00000000004051c4\n.text:00000000004051c9\n.text:00000000004051ce\n.text:00000000004051d1\n.text:00000000004051d5\n.text:00000000004051d9\n.text:00000000004051de\n.text:00000000004051e2\n.text:00000000004051e7\n.text:00000000004051e9\n.text:00000000004051ee\n.text:00000000004051f3\n.text:00000000004051f8\n.text:00000000004051fb\n.text:00000000004051fe\n.text:0000000000405202\n.text:0000000000405206\n.text:000000000040520a\n.text:000000000040520f\n.text:0000000000405214\n.text:0000000000405217\n.text:000000000040521b\n.text:000000000040521f\n.text:0000000000405223\n.text:0000000000405228\n.text:000000000040522c\n.text:0000000000405231\n.text:0000000000405233\n.text:0000000000405238\n.text:000000000040523d\n.text:0000000000405242\n.text:0000000000405245\n.text:0000000000405248\n.text:000000000040524c\n.text:0000000000405250\n.text:0000000000405255\n.text:000000000040525a\n.text:000000000040525d\n.text:0000000000405261\n.text:0000000000405265\n.text:0000000000405269\n.text:000000000040526d\n.text:0000000000405272\n.text:0000000000405276\n.text:000000000040527b\n.text:000000000040527d\n.text:0000000000405282\n.text:0000000000405287\n.text:000000000040528c\n.text:000000000040528f\n.text:0000000000405292\n.text:0000000000405296\n.text:000000000040529a\n.text:000000000040529e\n.text:00000000004052a3\n.text:00000000004052a8\n.text:00000000004052ab\n.text:00000000004052af\n.text:00000000004052b3\n.text:00000000004052b7\n.text:00000000004052bb\n.text:00000000004052bf\n.text:00000000004052c4\n.text:00000000004052c8\n.text:00000000004052ca\n.text:00000000004052cc\n.text:00000000004052d1\n.text:00000000004052d6\n.text:00000000004052db\n.text:00000000004052de\n.text:00000000004052e1\n.text:00000000004052e5\n.text:00000000004052e9\n.text:00000000004052ee\n.text:00000000004052f3\n.text:00000000004052f6\n.text:00000000004052fa\n.text:00000000004052fe\n.text:0000000000405302\n.text:0000000000405306\n.text:000000000040530a\n.text:000000000040530e\n.text:0000000000405313\n.text:0000000000405317\n.text:0000000000405318\n.text:000000000040531a\n.text:000000000040531c\n.text:000000000040531e\n.text:000000000040531f\n'
p13
tp14
sS'fts_maxarglen'
p15
(S'\n__stdcall fts_maxarglen(char * * argv)\n'
p16
V\u000asize_t fts_maxarglen(char **argv)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *__s;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  \u000a  __s = *argv;\u000a  if (__s == (char *)0x0) {\u000a    sVar3 = 1;\u000a  }\u000a  else {\u000a    argv = argv + 1;\u000a    uVar2 = 0;\u000a    do {\u000a      sVar1 = strlen(__s);\u000a      if (uVar2 < sVar1) {\u000a        uVar2 = sVar1;\u000a      }\u000a      __s = *argv;\u000a      argv = argv + 1;\u000a    } while (__s != (char *)0x0);\u000a    sVar3 = uVar2 + 1;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p17
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nTEST RDI,RDI\nJZ 0x00405c9d\nADD RBX,0x8\nXOR R14D,R14D\nNOP word ptr CS:[RAX + RAX*0x1]\nCALL 0x00401880\nCMP RAX,R14\nCMOVA R14,RAX\nMOV RDI,qword ptr [RBX]\nADD RBX,0x8\nTEST RDI,RDI\nJNZ 0x00405c80\nINC R14\nJMP 0x00405ca3\nMOV R14D,0x1\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p18
S'41 56\n53\n50\n48 89 fb\n48 8b 3b\n48 85 ff\n74 2e\n48 83 c3 08\n45 31 f6\n66 2e 0f 1f 84 00 00 00 00 00\ne8 fb bb ff ff\n4c 39 f0\n4c 0f 47 f0\n48 8b 3b\n48 83 c3 08\n48 85 ff\n75 e8\n49 ff c6\neb 06\n41 be 01 00 00 00\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p19
S'.text:0000000000405c60\n.text:0000000000405c62\n.text:0000000000405c63\n.text:0000000000405c64\n.text:0000000000405c67\n.text:0000000000405c6a\n.text:0000000000405c6d\n.text:0000000000405c6f\n.text:0000000000405c73\n.text:0000000000405c76\n.text:0000000000405c80\n.text:0000000000405c85\n.text:0000000000405c88\n.text:0000000000405c8c\n.text:0000000000405c8f\n.text:0000000000405c93\n.text:0000000000405c96\n.text:0000000000405c98\n.text:0000000000405c9b\n.text:0000000000405c9d\n.text:0000000000405ca3\n.text:0000000000405ca6\n.text:0000000000405caa\n.text:0000000000405cab\n.text:0000000000405cad\n'
p20
tp21
sS'transfer_entries'
p22
(S'\n__stdcall transfer_entries(Hash_table * dst, Hash_table * src)\n'
p23
V\u000a_Bool transfer_entries(Hash_table *dst,Hash_table *src)\u000a\u000a{\u000a  void *key;\u000a  hash_entry *phVar1;\u000a  hash_entry *entry;\u000a  hash_entry *phVar2;\u000a  char in_DL;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = src->bucket;\u000a  if (phVar3 < src->bucket_limit) {\u000a    do {\u000a      if (phVar3->data != (void *)0x0) {\u000a        entry = phVar3->next;\u000a        while (entry != (hash_entry *)0x0) {\u000a          key = entry->data;\u000a          phVar1 = safe_hasher(dst,key);\u000a          phVar2 = entry->next;\u000a          if (phVar1->data == (void *)0x0) {\u000a            phVar1->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a            free_entry(dst,entry);\u000a            entry = phVar2;\u000a          }\u000a          else {\u000a            entry->next = phVar1->next;\u000a            phVar1->next = entry;\u000a            entry = phVar2;\u000a          }\u000a        }\u000a        key = phVar3->data;\u000a        phVar3->next = (hash_entry *)0x0;\u000a        if (in_DL == 0) {\u000a          entry = safe_hasher(dst,key);\u000a          if (entry->data == (void *)0x0) {\u000a            entry->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a          }\u000a          else {\u000a            phVar2 = allocate_entry(dst);\u000a            if (phVar2 == (hash_entry *)0x0) {\u000a              return false;\u000a            }\u000a            phVar2->data = key;\u000a            phVar2->next = entry->next;\u000a            entry->next = phVar2;\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          src->n_buckets_used = src->n_buckets_used - 1;\u000a        }\u000a      }\u000a      phVar3 = phVar3 + 1;\u000a    } while (phVar3 < src->bucket_limit);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p24
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBP]\nMOV AL,0x1\nCMP R15,qword ptr [RBP + 0x8]\nJNC 0x00408542\nMOV qword ptr [RSP],RBP\nNOP dword ptr [RAX + RAX*0x1]\nCMP qword ptr [R15],0x0\nJZ 0x00408532\nMOV RBX,qword ptr [R15 + 0x8]\nTEST RBX,RBX\nJZ 0x004084da\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R13,qword ptr [RBX]\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00407d50\nMOV RBP,qword ptr [RBX + 0x8]\nCMP qword ptr [RAX],0x0\nJZ 0x004084c0\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RBX + 0x8],RCX\nMOV qword ptr [RAX + 0x8],RBX\nJMP 0x004084d2\nMOV qword ptr [RAX],R13\nINC qword ptr [R14 + 0x18]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00408ac0\nTEST RBP,RBP\nMOV RBX,RBP\nJNZ 0x00408490\nMOV R13,qword ptr [R15]\nMOV qword ptr [R15 + 0x8],0x0\nTEST R12B,R12B\nMOV RBP,qword ptr [RSP]\nJNZ 0x00408532\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00407d50\nMOV RBX,RAX\nCMP qword ptr [RBX],0x0\nJZ 0x00408520\nMOV RDI,R14\nCALL 0x00408800\nTEST RAX,RAX\nJZ 0x00408551\nMOV qword ptr [RAX],R13\nMOV RCX,qword ptr [RBX + 0x8]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x00408527\nMOV qword ptr [RBX],R13\nINC qword ptr [R14 + 0x18]\nMOV qword ptr [R15],0x0\nDEC qword ptr [RBP + 0x18]\nADD R15,0x10\nCMP R15,qword ptr [RBP + 0x8]\nJC 0x00408470\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x00408542\n'
p25
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 d4\n48 89 f5\n49 89 fe\n4c 8b 7d 00\nb0 01\n4c 3b 7d 08\n0f 83 de 00 00 00\n48 89 2c 24\n0f 1f 84 00 00 00 00 00\n49 83 3f 00\n0f 84 b8 00 00 00\n49 8b 5f 08\n48 85 db\n74 57\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 8b 2b\n4c 89 f7\n4c 89 ee\ne8 b2 f8 ff ff\n48 8b 6b 08\n48 83 38 00\n74 18\n48 8b 48 08\n48 89 4b 08\n48 89 58 08\neb 1c\n4c 89 28\n49 ff 46 18\n4c 89 f7\n48 89 de\ne8 ee 05 00 00\n48 85 ed\n48 89 eb\n75 b6\n4d 8b 2f\n49 c7 47 08 00 00 00 00\n45 84 e4\n48 8b 2c 24\n75 44\n4c 89 f7\n4c 89 ee\ne8 57 f8 ff ff\n48 89 c3\n48 83 3b 00\n74 1e\n4c 89 f7\ne8 f6 02 00 00\n48 85 c0\n74 42\n4c 89 28\n48 8b 4b 08\n48 89 48 08\n48 89 43 08\neb 07\n4c 89 2b\n49 ff 46 18\n49 c7 07 00 00 00 00\n48 ff 4d 18\n49 83 c7 10\n4c 3b 7d 08\n0f 82 30 ff ff ff\nb0 01\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 c0\neb ed\n'
p26
S'.text:0000000000408440\n.text:0000000000408441\n.text:0000000000408443\n.text:0000000000408445\n.text:0000000000408447\n.text:0000000000408449\n.text:000000000040844a\n.text:000000000040844b\n.text:000000000040844e\n.text:0000000000408451\n.text:0000000000408454\n.text:0000000000408458\n.text:000000000040845a\n.text:000000000040845e\n.text:0000000000408464\n.text:0000000000408468\n.text:0000000000408470\n.text:0000000000408474\n.text:000000000040847a\n.text:000000000040847e\n.text:0000000000408481\n.text:0000000000408483\n.text:0000000000408490\n.text:0000000000408493\n.text:0000000000408496\n.text:0000000000408499\n.text:000000000040849e\n.text:00000000004084a2\n.text:00000000004084a6\n.text:00000000004084a8\n.text:00000000004084ac\n.text:00000000004084b0\n.text:00000000004084b4\n.text:00000000004084c0\n.text:00000000004084c3\n.text:00000000004084c7\n.text:00000000004084ca\n.text:00000000004084cd\n.text:00000000004084d2\n.text:00000000004084d5\n.text:00000000004084d8\n.text:00000000004084da\n.text:00000000004084dd\n.text:00000000004084e5\n.text:00000000004084e8\n.text:00000000004084ec\n.text:00000000004084ee\n.text:00000000004084f1\n.text:00000000004084f4\n.text:00000000004084f9\n.text:00000000004084fc\n.text:0000000000408500\n.text:0000000000408502\n.text:0000000000408505\n.text:000000000040850a\n.text:000000000040850d\n.text:000000000040850f\n.text:0000000000408512\n.text:0000000000408516\n.text:000000000040851a\n.text:000000000040851e\n.text:0000000000408520\n.text:0000000000408523\n.text:0000000000408527\n.text:000000000040852e\n.text:0000000000408532\n.text:0000000000408536\n.text:000000000040853a\n.text:0000000000408540\n.text:0000000000408542\n.text:0000000000408546\n.text:0000000000408547\n.text:0000000000408549\n.text:000000000040854b\n.text:000000000040854d\n.text:000000000040854f\n.text:0000000000408550\n.text:0000000000408551\n.text:0000000000408553\n'
p27
tp28
sS'rpl_fclose'
p29
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p30
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00409049;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00409049:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004019e0\nTEST EAX,EAX\nJS 0x00409049\nMOV RDI,RBX\nCALL 0x00401a70\nTEST EAX,EAX\nJZ 0x00409017\nMOV RDI,RBX\nCALL 0x004019e0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x004018f0\nCMP RAX,-0x1\nJZ 0x00409049\nMOV RDI,RBX\nCALL 0x00405800\nTEST EAX,EAX\nJZ 0x00409049\nCALL 0x00401780\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401840\nTEST EBP,EBP\nJZ 0x00409042\nCALL 0x00401780\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401840\n'
p32
S'55\n53\n50\n48 89 fb\ne8 f5 89 ff ff\n85 c0\n78 5a\n48 89 df\ne8 79 8a ff ff\n85 c0\n74 1c\n48 89 df\ne8 dd 89 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 df 88 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 e1 c7 ff ff\n85 c0\n74 26\ne8 58 87 ff ff\n8b 28\n48 89 df\ne8 0e 88 ff ff\n85 ed\n74 0c\ne8 45 87 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 e9 87 ff ff\n'
p33
S'.text:0000000000408fe0\n.text:0000000000408fe1\n.text:0000000000408fe2\n.text:0000000000408fe3\n.text:0000000000408fe6\n.text:0000000000408feb\n.text:0000000000408fed\n.text:0000000000408fef\n.text:0000000000408ff2\n.text:0000000000408ff7\n.text:0000000000408ff9\n.text:0000000000408ffb\n.text:0000000000408ffe\n.text:0000000000409003\n.text:0000000000409005\n.text:000000000040900a\n.text:000000000040900c\n.text:0000000000409011\n.text:0000000000409015\n.text:0000000000409017\n.text:000000000040901a\n.text:000000000040901f\n.text:0000000000409021\n.text:0000000000409023\n.text:0000000000409028\n.text:000000000040902a\n.text:000000000040902d\n.text:0000000000409032\n.text:0000000000409034\n.text:0000000000409036\n.text:000000000040903b\n.text:000000000040903d\n.text:0000000000409042\n.text:0000000000409046\n.text:0000000000409047\n.text:0000000000409048\n.text:0000000000409049\n.text:000000000040904c\n.text:0000000000409050\n.text:0000000000409051\n.text:0000000000409052\n'
p34
tp35
sS'leave_dir'
p36
(S'\n__stdcall leave_dir(FTS * fts, FTSENT * ent)\n'
p37
V\u000avoid leave_dir(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  __ino_t *p_Var2;\u000a  void *__ptr;\u000a  __dev_t local_18;\u000a  __ino_t local_10;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) != 0) {\u000a    local_18 = ent->fts_statp[0].st_dev;\u000a    local_10 = ent->fts_statp[0].st_ino;\u000a    __ptr = hash_delete((Hash_table *)fts->fts_cycle,&local_18);\u000a    if (__ptr != (void *)0x0) {\u000a      free(__ptr);\u000a      return;\u000a    }\u000aLAB_004068e8:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  p_Var1 = ent->fts_parent;\u000a  if ((p_Var1 != (_ftsent *)0x0) && (-1 < p_Var1->fts_level)) {\u000a    p_Var2 = (__ino_t *)fts->fts_cycle;\u000a    if (p_Var2[2] == 0) goto LAB_004068e8;\u000a    if ((*p_Var2 == ent->fts_statp[0].st_ino) && (p_Var2[1] == ent->fts_statp[0].st_dev)) {\u000a      p_Var2[1] = p_Var1->fts_statp[0].st_dev;\u000a      *p_Var2 = p_Var1->fts_statp[0].st_ino;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p38
S'SUB RSP,0x18\nMOVZX EAX,word ptr [RDI + 0x48]\nTEST AX,0x102\nJZ 0x004068a0\nMOV RAX,qword ptr [RSI + 0x78]\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [0x80 + RSI]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDI,qword ptr [RDI + 0x58]\nMOV RSI,RSP\nCALL 0x00408860\nTEST RAX,RAX\nJZ 0x004068e8\nMOV RDI,RAX\nCALL 0x00401760\nADD RSP,0x18\nRET\nMOV RAX,qword ptr [RSI + 0x8]\nTEST RAX,RAX\nJZ 0x004068e3\nCMP qword ptr [RAX + 0x58],0x0\nJS 0x004068e3\nMOV RCX,qword ptr [RDI + 0x58]\nCMP qword ptr [RCX + 0x10],0x0\nJZ 0x004068e8\nMOV RDX,qword ptr [RCX]\nCMP RDX,qword ptr [0x80 + RSI]\nJNZ 0x004068e3\nMOV RDX,qword ptr [RCX + 0x8]\nCMP RDX,qword ptr [RSI + 0x78]\nJNZ 0x004068e3\nMOV RDX,qword ptr [RAX + 0x78]\nMOV qword ptr [RCX + 0x8],RDX\nMOV RAX,qword ptr [0x80 + RAX]\nMOV qword ptr [RCX],RAX\nADD RSP,0x18\nRET\nCALL 0x00401770\n'
p39
S'48 83 ec 18\n0f b7 47 48\n66 a9 02 01\n74 32\n48 8b 46 78\n48 89 04 24\n48 8b 86 80 00 00 00\n48 89 44 24 08\n48 8b 7f 58\n48 89 e6\ne8 d2 1f 00 00\n48 85 c0\n74 55\n48 89 c7\ne8 c5 ae ff ff\n48 83 c4 18\nc3\n48 8b 46 08\n48 85 c0\n74 3a\n48 83 78 58 00\n78 33\n48 8b 4f 58\n48 83 79 10 00\n74 2d\n48 8b 11\n48 3b 96 80 00 00 00\n75 1c\n48 8b 51 08\n48 3b 56 78\n75 12\n48 8b 50 78\n48 89 51 08\n48 8b 80 80 00 00 00\n48 89 01\n48 83 c4 18\nc3\ne8 83 ae ff ff\n'
p40
S'.text:0000000000406860\n.text:0000000000406864\n.text:0000000000406868\n.text:000000000040686c\n.text:000000000040686e\n.text:0000000000406872\n.text:0000000000406876\n.text:000000000040687d\n.text:0000000000406882\n.text:0000000000406886\n.text:0000000000406889\n.text:000000000040688e\n.text:0000000000406891\n.text:0000000000406893\n.text:0000000000406896\n.text:000000000040689b\n.text:000000000040689f\n.text:00000000004068a0\n.text:00000000004068a4\n.text:00000000004068a7\n.text:00000000004068a9\n.text:00000000004068ae\n.text:00000000004068b0\n.text:00000000004068b4\n.text:00000000004068b9\n.text:00000000004068bb\n.text:00000000004068be\n.text:00000000004068c5\n.text:00000000004068c7\n.text:00000000004068cb\n.text:00000000004068cf\n.text:00000000004068d1\n.text:00000000004068d5\n.text:00000000004068d9\n.text:00000000004068e0\n.text:00000000004068e3\n.text:00000000004068e7\n.text:00000000004068e8\n'
p41
tp42
sS'strncmp'
p43
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p44
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060e038)();\u000a  return iVar1;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x0060e038]\n'
p46
S'ff 25 a2 c8 20 00\n'
p47
S'.plt:0000000000401790\n'
p48
tp49
sS'xnrealloc'
p50
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p51
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p52
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00405554\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00405560\nPUSH RAX\nCALL 0x004056b0\n'
p53
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p54
S'.text:0000000000405540\n.text:0000000000405543\n.text:0000000000405546\n.text:0000000000405549\n.text:000000000040554b\n.text:000000000040554f\n.text:0000000000405552\n.text:0000000000405554\n.text:0000000000405555\n'
p55
tp56
sS'quote'
p57
(S'\n__stdcall quote(char * arg)\n'
p58
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p59
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404b50\n'
p60
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p61
S'.text:0000000000404b60\n.text:0000000000404b63\n.text:0000000000404b65\n.text:0000000000404b68\n'
p62
tp63
sS'emit_bug_reporting_address'
p64
(S'\n__stdcall emit_bug_reporting_address()\n'
p65
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p66
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40af95\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40a52f\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401ac0\nXOR EDI,EDI\nMOV ESI,0x40afaa\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x409f0c\nMOV ECX,0x40a0da\nXOR EAX,EAX\nCALL 0x00401ac0\nXOR EDI,EDI\nMOV ESI,0x40afbe\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401970\n'
p67
S'50\n31 ff\nbe 95 af 40 00\nba 05 00 00 00\ne8 fe c3 ff ff\n48 89 c1\nbf 01 00 00 00\nba 2f a5 40 00\n31 c0\n48 89 ce\ne8 47 c6 ff ff\n31 ff\nbe aa af 40 00\nba 05 00 00 00\ne8 d6 c3 ff ff\n48 89 c6\nbf 01 00 00 00\nba 0c 9f 40 00\nb9 da a0 40 00\n31 c0\ne8 1d c6 ff ff\n31 ff\nbe be af 40 00\nba 05 00 00 00\ne8 ac c3 ff ff\n48 8b 35 2d 8e 20 00\n48 89 c7\n58\ne9 ac c4 ff ff\n'
p68
S'.text:0000000000405450\n.text:0000000000405451\n.text:0000000000405453\n.text:0000000000405458\n.text:000000000040545d\n.text:0000000000405462\n.text:0000000000405465\n.text:000000000040546a\n.text:000000000040546f\n.text:0000000000405471\n.text:0000000000405474\n.text:0000000000405479\n.text:000000000040547b\n.text:0000000000405480\n.text:0000000000405485\n.text:000000000040548a\n.text:000000000040548d\n.text:0000000000405492\n.text:0000000000405497\n.text:000000000040549c\n.text:000000000040549e\n.text:00000000004054a3\n.text:00000000004054a5\n.text:00000000004054aa\n.text:00000000004054af\n.text:00000000004054b4\n.text:00000000004054bb\n.text:00000000004054be\n.text:00000000004054bf\n'
p69
tp70
sS'clone_quoting_options'
p71
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p72
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p73
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401780\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60e360\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00405660\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p74
S'55\n41 56\n53\n48 89 fb\ne8 54 e0 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 60 e3 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 15 1f 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p75
S'.text:0000000000403720\n.text:0000000000403721\n.text:0000000000403723\n.text:0000000000403724\n.text:0000000000403727\n.text:000000000040372c\n.text:000000000040372f\n.text:0000000000403732\n.text:0000000000403735\n.text:000000000040373a\n.text:000000000040373e\n.text:0000000000403743\n.text:0000000000403746\n.text:000000000040374b\n.text:000000000040374e\n.text:000000000040374f\n.text:0000000000403751\n.text:0000000000403752\n'
p76
tp77
sS'xmalloc'
p78
(S'\n__stdcall xmalloc(size_t n)\n'
p79
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p80
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401a20\nTEST RBX,RBX\nJZ 0x00405533\nTEST RAX,RAX\nJZ 0x00405535\nPOP RBX\nRET\nCALL 0x004056b0\n'
p81
S'53\n48 89 fb\ne8 f7 c4 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p82
S'.text:0000000000405520\n.text:0000000000405521\n.text:0000000000405524\n.text:0000000000405529\n.text:000000000040552c\n.text:000000000040552e\n.text:0000000000405531\n.text:0000000000405533\n.text:0000000000405534\n.text:0000000000405535\n'
p83
tp84
sS'cwd_advance_fd'
p85
(S'\n__stdcall cwd_advance_fd(FTS * sp)\n'
p86
V\u000avoid cwd_advance_fd(FTS *sp)\u000a\u000a{\u000a  int __fd;\u000a  char in_DL;\u000a  int in_ESI;\u000a  \u000a  __fd = sp->fts_cwd_fd;\u000a  if ((__fd == in_ESI) && (__fd != -100)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  if (in_DL == 0) {\u000a    if ((__fd < 0) || ((sp->fts_options & 4U) != 0)) goto LAB_0040740c;\u000a  }\u000a  else {\u000a    __fd = i_ring_push(&sp->fts_fd_ring);\u000a    if (__fd < 0) goto LAB_0040740c;\u000a  }\u000a  close(__fd);\u000aLAB_0040740c:\u000a  sp->fts_cwd_fd = in_ESI;\u000a  return;\u000a}\u000a\u000a
p87
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV ESI,dword ptr [RBX + 0x2c]\nCMP ESI,EBP\nJNZ 0x004073e4\nCMP ESI,-0x64\nJNZ 0x00407416\nTEST DL,DL\nJZ 0x004073f9\nLEA RDI,[RBX + 0x60]\nCALL 0x00408b10\nTEST EAX,EAX\nJS 0x0040740c\nMOV EDI,EAX\nJMP 0x00407407\nTEST ESI,ESI\nJS 0x0040740c\nMOV EAX,dword ptr [RBX + 0x48]\nAND EAX,0x4\nJNZ 0x0040740c\nMOV EDI,ESI\nCALL 0x00401940\nMOV dword ptr [RBX + 0x2c],EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nCALL 0x00401770\n'
p88
S'55\n53\n50\n89 f5\n48 89 fb\n8b 73 2c\n39 ee\n75 05\n83 fe 9c\n75 32\n84 d2\n74 11\n48 8d 7b 60\ne8 1f 17 00 00\n85 c0\n78 17\n89 c7\neb 0e\n85 f6\n78 0f\n8b 43 48\n83 e0 04\n75 07\n89 f7\ne8 34 a5 ff ff\n89 6b 2c\n48 83 c4 08\n5b\n5d\nc3\ne8 55 a3 ff ff\n'
p89
S'.text:00000000004073d0\n.text:00000000004073d1\n.text:00000000004073d2\n.text:00000000004073d3\n.text:00000000004073d5\n.text:00000000004073d8\n.text:00000000004073db\n.text:00000000004073dd\n.text:00000000004073df\n.text:00000000004073e2\n.text:00000000004073e4\n.text:00000000004073e6\n.text:00000000004073e8\n.text:00000000004073ec\n.text:00000000004073f1\n.text:00000000004073f3\n.text:00000000004073f5\n.text:00000000004073f7\n.text:00000000004073f9\n.text:00000000004073fb\n.text:00000000004073fd\n.text:0000000000407400\n.text:0000000000407403\n.text:0000000000407405\n.text:0000000000407407\n.text:000000000040740c\n.text:000000000040740f\n.text:0000000000407413\n.text:0000000000407414\n.text:0000000000407415\n.text:0000000000407416\n'
p90
tp91
sS'quotearg_char_mem'
p92
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p93
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p94
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060e390]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060e380]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e370]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e360]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00403780\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404670\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p95
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d f8 99 20 00\n48 89 4c 24 30\n0f 10 05 dc 99 20 00\n0f 29 44 24 20\n0f 10 05 c0 99 20 00\n0f 29 44 24 10\n0f 10 05 a4 99 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p96
S'.text:0000000000404980\n.text:0000000000404982\n.text:0000000000404984\n.text:0000000000404985\n.text:0000000000404989\n.text:000000000040498b\n.text:000000000040498e\n.text:0000000000404991\n.text:0000000000404998\n.text:000000000040499d\n.text:00000000004049a4\n.text:00000000004049a9\n.text:00000000004049b0\n.text:00000000004049b5\n.text:00000000004049bc\n.text:00000000004049c0\n.text:00000000004049c3\n.text:00000000004049c8\n.text:00000000004049cb\n.text:00000000004049cd\n.text:00000000004049d2\n.text:00000000004049d4\n.text:00000000004049d7\n.text:00000000004049da\n.text:00000000004049dd\n.text:00000000004049e2\n.text:00000000004049e6\n.text:00000000004049e7\n.text:00000000004049e9\n.text:00000000004049eb\n'
p97
tp98
sS'frame_dummy'
p99
(S'\n__stdcall frame_dummy()\n'
p100
V\u000a/* WARNING: Removing unreachable block (ram,0x00401caa) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p101
S'MOV EDI,0x60de18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401ca0\nJMP 0x00401c30\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401c9b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401c30\n'
p102
S'bf 18 de 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p103
S'.text:0000000000401c90\n.text:0000000000401c95\n.text:0000000000401c99\n.text:0000000000401c9b\n.text:0000000000401ca0\n.text:0000000000401ca5\n.text:0000000000401ca8\n.text:0000000000401caa\n.text:0000000000401cab\n.text:0000000000401cae\n.text:0000000000401cb0\n.text:0000000000401cb1\n'
p104
tp105
sS'restore_initial_cwd'
p106
(S'\n__stdcall restore_initial_cwd(FTS * sp)\n'
p107
V\u000aint restore_initial_cwd(FTS *sp)\u000a\u000a{\u000a  int iVar1;\u000a  bool bVar2;\u000a  \u000a  if ((sp->fts_options & 4U) == 0) {\u000a    if ((sp->fts_options & 0x200U) == 0) {\u000a      iVar1 = fchdir(sp->fts_rfd);\u000a      bVar2 = iVar1 != 0;\u000a      goto LAB_004071a5;\u000a    }\u000a    cwd_advance_fd(sp);\u000a  }\u000a  bVar2 = false;\u000aLAB_004071a5:\u000a  fd_ring_clear(&sp->fts_fd_ring);\u000a  return (int)(uint)bVar2;\u000a}\u000a\u000a
p108
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV EAX,dword ptr [RBX + 0x48]\nTEST AL,0x4\nJNZ 0x004071a3\nTEST AH,0x2\nJNZ 0x00407191\nMOV EDI,dword ptr [RBX + 0x28]\nCALL 0x00401a80\nTEST EAX,EAX\nSETNZ AL\nJMP 0x004071a5\nMOV ESI,0xffffff9c\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x004073d0\nXOR EAX,EAX\nMOVZX EBP,AL\nADD RBX,0x60\nMOV RDI,RBX\nCALL 0x00406240\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p109
S'55\n53\n50\n48 89 fb\n8b 43 48\na8 04\n75 26\nf6 c4 02\n75 0f\n8b 7b 28\ne8 f6 a8 ff ff\n85 c0\n0f 95 c0\neb 14\nbe 9c ff ff ff\nba 01 00 00 00\n48 89 df\ne8 2d 02 00 00\n31 c0\n0f b6 e8\n48 83 c3 60\n48 89 df\ne8 8c f0 ff ff\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p110
S'.text:0000000000407170\n.text:0000000000407171\n.text:0000000000407172\n.text:0000000000407173\n.text:0000000000407176\n.text:0000000000407179\n.text:000000000040717b\n.text:000000000040717d\n.text:0000000000407180\n.text:0000000000407182\n.text:0000000000407185\n.text:000000000040718a\n.text:000000000040718c\n.text:000000000040718f\n.text:0000000000407191\n.text:0000000000407196\n.text:000000000040719b\n.text:000000000040719e\n.text:00000000004071a3\n.text:00000000004071a5\n.text:00000000004071a8\n.text:00000000004071ac\n.text:00000000004071af\n.text:00000000004071b4\n.text:00000000004071b6\n.text:00000000004071ba\n.text:00000000004071bb\n.text:00000000004071bc\n'
p111
tp112
sS'quotearg_n_style_colon'
p113
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p114
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x004048a0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00403780\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00404670\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p116
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p117
S'.text:0000000000404a20\n.text:0000000000404a21\n.text:0000000000404a23\n.text:0000000000404a24\n.text:0000000000404a28\n.text:0000000000404a2b\n.text:0000000000404a2d\n.text:0000000000404a32\n.text:0000000000404a35\n.text:0000000000404a3a\n.text:0000000000404a3f\n.text:0000000000404a44\n.text:0000000000404a47\n.text:0000000000404a4c\n.text:0000000000404a53\n.text:0000000000404a55\n.text:0000000000404a58\n.text:0000000000404a5b\n.text:0000000000404a60\n.text:0000000000404a64\n.text:0000000000404a65\n.text:0000000000404a67\n.text:0000000000404a68\n'
p118
tp119
sS'rotl64'
p120
(S'\n__stdcall rotl64(uint64_t x)\n'
p121
V\u000auint64_t rotl64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p122
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p123
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p124
S'.text:0000000000409220\n.text:0000000000409222\n.text:0000000000409225\n.text:0000000000409228\n'
p125
tp126
sS'LCO_compare'
p127
(S'\n__stdcall LCO_compare(void * x, void * y)\n'
p128
V\u000a_Bool LCO_compare(void *x,void *y)\u000a\u000a{\u000a  return (_Bool)(*(long *)x == *(long *)y);\u000a}\u000a\u000a
p129
S'MOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nSETZ AL\nRET\n'
p130
S'48 8b 07\n48 3b 06\n0f 94 c0\nc3\n'
p131
S'.text:00000000004075c0\n.text:00000000004075c3\n.text:00000000004075c6\n.text:00000000004075c9\n'
p132
tp133
sS'fts_children'
p134
(S'\n__stdcall fts_children(FTS * sp)\n'
p135
V\u000aFTSENT * fts_children(FTS *sp)\u000a\u000a{\u000a  byte *pbVar1;\u000a  _ftsent *p_Var2;\u000a  int __fd;\u000a  int iVar3;\u000a  int *piVar4;\u000a  FTSENT *pFVar5;\u000a  uint in_ESI;\u000a  \u000a  piVar4 = __errno_location();\u000a  if ((in_ESI | 0x2000) == 0x2000) {\u000a    p_Var2 = sp->fts_cur;\u000a    *piVar4 = 0;\u000a    if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) == 0) {\u000a      if (p_Var2->fts_info != 1) {\u000a        if (p_Var2->fts_info != 9) {\u000a          return (FTSENT *)0x0;\u000a        }\u000a        return (FTSENT *)p_Var2->fts_link;\u000a      }\u000a      if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a        fts_lfree((FTSENT *)sp->fts_child);\u000a      }\u000a      if (in_ESI == 0x2000) {\u000a        pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a        *pbVar1 = *pbVar1 | 0x20;\u000a      }\u000a      if (((p_Var2->fts_level == 0) && (*p_Var2->fts_accpath != '/')) &&\u000a         ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a        __fd = diropen(sp,".");\u000a        if (__fd < 0) {\u000a          sp->fts_child = (_ftsent *)0x0;\u000a          return (FTSENT *)0x0;\u000a        }\u000a        pFVar5 = fts_build(sp);\u000a        *(FTSENT **)&sp->fts_child = pFVar5;\u000a        if ((*(byte *)((long)&sp->fts_options + 1) & 2) == 0) {\u000a          iVar3 = fchdir(__fd);\u000a          if (iVar3 != 0) {\u000a            iVar3 = *piVar4;\u000a            close(__fd);\u000a            *piVar4 = iVar3;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          close(__fd);\u000a        }\u000a        else {\u000a          cwd_advance_fd(sp);\u000a        }\u000a        return (FTSENT *)sp->fts_child;\u000a      }\u000a      pFVar5 = fts_build(sp);\u000a      *(FTSENT **)&sp->fts_child = pFVar5;\u000a      return pFVar5;\u000a    }\u000a  }\u000a  else {\u000a    *piVar4 = 0x16;\u000a  }\u000a  return (FTSENT *)0x0;\u000a}\u000a\u000a
p136
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV EBP,ESI\nMOV RBX,RDI\nCALL 0x00401780\nMOV R14,RAX\nMOV EAX,EBP\nOR EAX,0x2000\nCMP EAX,0x2000\nJNZ 0x0040749f\nMOV R15,qword ptr [RBX]\nMOV dword ptr [R14],0x0\nTEST byte ptr [RBX + 0x49],0x40\nJNZ 0x004074a6\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0x1\nJZ 0x004074b1\nMOVZX EAX,AX\nCMP EAX,0x9\nJNZ 0x00407531\nMOV RAX,qword ptr [R15 + 0x10]\nJMP 0x004074a8\nMOV dword ptr [R14],0x16\nXOR EAX,EAX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [RBX + 0x8]\nTEST RDI,RDI\nJZ 0x004074bf\nCALL 0x004060f0\nMOV R12D,0x1\nCMP EBP,0x2000\nJNZ 0x004074d7\nOR byte ptr [RBX + 0x49],0x20\nMOV R12D,0x2\nCMP qword ptr [R15 + 0x58],0x0\nJNZ 0x00407538\nMOV RAX,qword ptr [R15 + 0x30]\nCMP byte ptr [RAX],0x2f\nJZ 0x00407538\nTEST byte ptr [RBX + 0x48],0x4\nJNZ 0x00407538\nMOV ESI,0x40a360\nMOV RDI,RBX\nCALL 0x00406090\nMOV R15D,EAX\nTEST R15D,R15D\nJS 0x0040754c\nMOV RDI,RBX\nMOV ESI,R12D\nCALL 0x00406a80\nMOV qword ptr [RBX + 0x8],RAX\nTEST byte ptr [RBX + 0x49],0x2\nJNZ 0x0040755b\nMOV EDI,R15D\nCALL 0x00401a80\nTEST EAX,EAX\nJZ 0x0040756d\nMOV EBX,dword ptr [R14]\nMOV EDI,R15D\nCALL 0x00401940\nMOV dword ptr [R14],EBX\nXOR EAX,EAX\nJMP 0x004074a8\nMOV RDI,RBX\nMOV ESI,R12D\nCALL 0x00406a80\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x004074a8\nMOV qword ptr [RBX + 0x8],0x0\nXOR EAX,EAX\nJMP 0x004074a8\nMOV EDX,0x1\nMOV RDI,RBX\nMOV ESI,R15D\nCALL 0x004073d0\nJMP 0x00407575\nMOV EDI,R15D\nCALL 0x00401940\nMOV RAX,qword ptr [RBX + 0x8]\nJMP 0x004074a8\n'
p137
S'55\n41 57\n41 56\n41 54\n53\n89 f5\n48 89 fb\ne8 1e a3 ff ff\n49 89 c6\n89 e8\n0d 00 20 00 00\n3d 00 20 00 00\n75 2c\n4c 8b 3b\n41 c7 06 00 00 00 00\nf6 43 49 40\n75 23\n41 0f b7 47 70\n83 f8 01\n74 24\n0f b7 c0\n83 f8 09\n0f 85 98 00 00 00\n49 8b 47 10\neb 09\n41 c7 06 16 00 00 00\n31 c0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n48 8b 7b 08\n48 85 ff\n74 05\ne8 31 ec ff ff\n41 bc 01 00 00 00\n81 fd 00 20 00 00\n75 0a\n80 4b 49 20\n41 bc 02 00 00 00\n49 83 7f 58 00\n75 5a\n49 8b 47 30\n80 38 2f\n74 51\nf6 43 48 04\n75 4b\nbe 60 a3 40 00\n48 89 df\ne8 96 eb ff ff\n41 89 c7\n45 85 ff\n78 4a\n48 89 df\n44 89 e6\ne8 73 f5 ff ff\n48 89 43 08\nf6 43 49 02\n75 44\n44 89 ff\ne8 61 a5 ff ff\n85 c0\n74 4a\n41 8b 1e\n44 89 ff\ne8 12 a4 ff ff\n41 89 1e\n31 c0\ne9 70 ff ff ff\n48 89 df\n44 89 e6\ne8 3d f5 ff ff\n48 89 43 08\ne9 5c ff ff ff\n48 c7 43 08 00 00 00 00\n31 c0\ne9 4d ff ff ff\nba 01 00 00 00\n48 89 df\n44 89 fe\ne8 65 fe ff ff\neb 08\n44 89 ff\ne8 cb a3 ff ff\n48 8b 43 08\ne9 2a ff ff ff\n'
p138
S'.text:0000000000407450\n.text:0000000000407451\n.text:0000000000407453\n.text:0000000000407455\n.text:0000000000407457\n.text:0000000000407458\n.text:000000000040745a\n.text:000000000040745d\n.text:0000000000407462\n.text:0000000000407465\n.text:0000000000407467\n.text:000000000040746c\n.text:0000000000407471\n.text:0000000000407473\n.text:0000000000407476\n.text:000000000040747d\n.text:0000000000407481\n.text:0000000000407483\n.text:0000000000407488\n.text:000000000040748b\n.text:000000000040748d\n.text:0000000000407490\n.text:0000000000407493\n.text:0000000000407499\n.text:000000000040749d\n.text:000000000040749f\n.text:00000000004074a6\n.text:00000000004074a8\n.text:00000000004074a9\n.text:00000000004074ab\n.text:00000000004074ad\n.text:00000000004074af\n.text:00000000004074b0\n.text:00000000004074b1\n.text:00000000004074b5\n.text:00000000004074b8\n.text:00000000004074ba\n.text:00000000004074bf\n.text:00000000004074c5\n.text:00000000004074cb\n.text:00000000004074cd\n.text:00000000004074d1\n.text:00000000004074d7\n.text:00000000004074dc\n.text:00000000004074de\n.text:00000000004074e2\n.text:00000000004074e5\n.text:00000000004074e7\n.text:00000000004074eb\n.text:00000000004074ed\n.text:00000000004074f2\n.text:00000000004074f5\n.text:00000000004074fa\n.text:00000000004074fd\n.text:0000000000407500\n.text:0000000000407502\n.text:0000000000407505\n.text:0000000000407508\n.text:000000000040750d\n.text:0000000000407511\n.text:0000000000407515\n.text:0000000000407517\n.text:000000000040751a\n.text:000000000040751f\n.text:0000000000407521\n.text:0000000000407523\n.text:0000000000407526\n.text:0000000000407529\n.text:000000000040752e\n.text:0000000000407531\n.text:0000000000407533\n.text:0000000000407538\n.text:000000000040753b\n.text:000000000040753e\n.text:0000000000407543\n.text:0000000000407547\n.text:000000000040754c\n.text:0000000000407554\n.text:0000000000407556\n.text:000000000040755b\n.text:0000000000407560\n.text:0000000000407563\n.text:0000000000407566\n.text:000000000040756b\n.text:000000000040756d\n.text:0000000000407570\n.text:0000000000407575\n.text:0000000000407579\n'
p139
tp140
sS'yesno'
p141
(S'\n__stdcall yesno()\n'
p142
V\u000a_Bool yesno(void)\u000a\u000a{\u000a  int iVar1;\u000a  __ssize_t _Var2;\u000a  bool bVar3;\u000a  char *local_18;\u000a  size_t local_10;\u000a  \u000a  local_18 = (char *)0x0;\u000a  local_10 = 0;\u000a  _Var2 = getline(&local_18,&local_10,stdin);\u000a  if (_Var2 < 1) {\u000a    bVar3 = false;\u000a  }\u000a  else {\u000a    if (local_18[_Var2 + -1] == '\u005cn') {\u000a      local_18[_Var2 + -1] = 0;\u000a    }\u000a    iVar1 = rpmatch(local_18);\u000a    bVar3 = 0 < iVar1;\u000a  }\u000a  free(local_18);\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p143
S'PUSH RBX\nSUB RSP,0x10\nMOV qword ptr [RSP],0x0\nMOV qword ptr [RSP + 0x8],0x0\nMOV RDX,qword ptr [0x0060e2f0]\nMOV RDI,RSP\nLEA RSI,[RSP + 0x8]\nCALL 0x00401b50\nTEST RAX,RAX\nJLE 0x0040578f\nMOV RCX,qword ptr [RSP]\nCMP byte ptr [RCX + RAX*0x1 + -0x1],0xa\nJNZ 0x0040577f\nMOV byte ptr [RCX + RAX*0x1 + -0x1],0x0\nMOV RDI,qword ptr [RSP]\nCALL 0x004019c0\nTEST EAX,EAX\nSETG BL\nJMP 0x00405791\nXOR EBX,EBX\nMOV RDI,qword ptr [RSP]\nCALL 0x00401760\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p144
S'53\n48 83 ec 10\n48 c7 04 24 00 00 00 00\n48 c7 44 24 08 00 00 00 00\n48 8b 15 93 8b 20 00\n48 89 e7\n48 8d 74 24 08\ne8 e6 c3 ff ff\n48 85 c0\n7e 20\n48 8b 0c 24\n80 7c 01 ff 0a\n75 05\nc6 44 01 ff 00\n48 8b 3c 24\ne8 38 c2 ff ff\n85 c0\n0f 9f c3\neb 02\n31 db\n48 8b 3c 24\ne8 c6 bf ff ff\n89 d8\n48 83 c4 10\n5b\nc3\n'
p145
S'.text:0000000000405740\n.text:0000000000405741\n.text:0000000000405745\n.text:000000000040574d\n.text:0000000000405756\n.text:000000000040575d\n.text:0000000000405760\n.text:0000000000405765\n.text:000000000040576a\n.text:000000000040576d\n.text:000000000040576f\n.text:0000000000405773\n.text:0000000000405778\n.text:000000000040577a\n.text:000000000040577f\n.text:0000000000405783\n.text:0000000000405788\n.text:000000000040578a\n.text:000000000040578d\n.text:000000000040578f\n.text:0000000000405791\n.text:0000000000405795\n.text:000000000040579a\n.text:000000000040579c\n.text:00000000004057a0\n.text:00000000004057a1\n'
p146
tp147
sS'quote_mem'
p148
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p149
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p150
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404b30\n'
p151
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p152
S'.text:0000000000404b40\n.text:0000000000404b43\n.text:0000000000404b46\n.text:0000000000404b48\n.text:0000000000404b4b\n.text:0000000000404b4e\n'
p153
tp154
sS'fileno'
p155
(S'\n__stdcall fileno(FILE * __stream)\n'
p156
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060e160)();\u000a  return iVar1;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x0060e160]\n'
p158
S'ff 25 7a c7 20 00\n'
p159
S'.plt:00000000004019e0\n'
p160
tp161
sS'fts_load'
p162
(S'\n__stdcall fts_load(FTS * sp, FTSENT * p)\n'
p163
V\u000avoid fts_load(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  FTSENT *__src;\u000a  FTSENT *pFVar1;\u000a  size_t sVar2;\u000a  char *__s;\u000a  \u000a  p->fts_pathlen = p->fts_namelen;\u000a  __src = p + 1;\u000a  memmove(sp->fts_path,__src,p->fts_namelen + 1);\u000a  pFVar1 = (FTSENT *)strrchr((char *)__src,0x2f);\u000a  if ((pFVar1 != (FTSENT *)0x0) &&\u000a     ((pFVar1 != __src || (*(char *)((long)&pFVar1->fts_cycle + 1) != 0)))) {\u000a    __s = (char *)((long)&pFVar1->fts_cycle + 1);\u000a    sVar2 = strlen(__s);\u000a    memmove(__src,__s,sVar2 + 1);\u000a    p->fts_namelen = sVar2;\u000a  }\u000a  __s = sp->fts_path;\u000a  p->fts_path = __s;\u000a  p->fts_accpath = __s;\u000a  return;\u000a}\u000a\u000a
p164
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R12,RSI\nMOV R14,RDI\nMOV RDX,qword ptr [R12 + 0x60]\nMOV qword ptr [R12 + 0x48],RDX\nMOV RDI,qword ptr [R14 + 0x20]\nLEA R15,[0x108 + R12]\nINC RDX\nMOV RSI,R15\nCALL 0x00401ad0\nMOV ESI,0x2f\nMOV RDI,R15\nCALL 0x004018e0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00407232\nCMP RBX,R15\nJNZ 0x00407210\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x00407232\nINC RBX\nMOV RDI,RBX\nCALL 0x00401880\nMOV R13,RAX\nLEA RDX,[R13 + 0x1]\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00401ad0\nMOV qword ptr [R12 + 0x60],R13\nMOV RAX,qword ptr [R14 + 0x20]\nMOV qword ptr [R12 + 0x38],RAX\nMOV qword ptr [R12 + 0x30],RAX\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p165
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 f4\n49 89 fe\n49 8b 54 24 60\n49 89 54 24 48\n49 8b 7e 20\n4d 8d bc 24 08 01 00 00\n48 ff c2\n4c 89 fe\ne8 e0 a8 ff ff\nbe 2f 00 00 00\n4c 89 ff\ne8 e3 a6 ff ff\n48 89 c3\n48 85 db\n74 2d\n4c 39 fb\n75 06\n80 7b 01 00\n74 22\n48 ff c3\n48 89 df\ne8 65 a6 ff ff\n49 89 c5\n49 8d 55 01\n4c 89 ff\n48 89 de\ne8 a3 a8 ff ff\n4d 89 6c 24 60\n49 8b 46 20\n49 89 44 24 38\n49 89 44 24 30\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p166
S'.text:00000000004071c0\n.text:00000000004071c2\n.text:00000000004071c4\n.text:00000000004071c6\n.text:00000000004071c8\n.text:00000000004071c9\n.text:00000000004071cc\n.text:00000000004071cf\n.text:00000000004071d4\n.text:00000000004071d9\n.text:00000000004071dd\n.text:00000000004071e5\n.text:00000000004071e8\n.text:00000000004071eb\n.text:00000000004071f0\n.text:00000000004071f5\n.text:00000000004071f8\n.text:00000000004071fd\n.text:0000000000407200\n.text:0000000000407203\n.text:0000000000407205\n.text:0000000000407208\n.text:000000000040720a\n.text:000000000040720e\n.text:0000000000407210\n.text:0000000000407213\n.text:0000000000407216\n.text:000000000040721b\n.text:000000000040721e\n.text:0000000000407222\n.text:0000000000407225\n.text:0000000000407228\n.text:000000000040722d\n.text:0000000000407232\n.text:0000000000407236\n.text:000000000040723b\n.text:0000000000407240\n.text:0000000000407241\n.text:0000000000407243\n.text:0000000000407245\n.text:0000000000407247\n.text:0000000000407249\n'
p167
tp168
sS'mbrtowc'
p169
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p170
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060e0d0)();\u000a  return sVar1;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x0060e0d0]\n'
p172
S'ff 25 0a c8 20 00\n'
p173
S'.plt:00000000004018c0\n'
p174
tp175
sS'rm'
p176
(S'\n__stdcall rm(char * * file, rm_options * x)\n'
p177
V\u000aRM_status rm(char **file,rm_options *x)\u000a\u000a{\u000a  uint uVar1;\u000a  RM_status RVar2;\u000a  int iVar3;\u000a  FTS *sp;\u000a  FTSENT *ent;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  RM_status RVar6;\u000a  int (*compar)(FTSENT **,FTSENT **);\u000a  \u000a  if (*file == (char *)0x0) {\u000a    RVar6 = RM_OK;\u000a  }\u000a  else {\u000a    compar = (int (*)(FTSENT **,FTSENT **))0x258;\u000a    if (x->one_file_system == false) {\u000a      compar = (int (*)(FTSENT **,FTSENT **))0x218;\u000a    }\u000a    sp = xfts_open(file,compar);\u000a    RVar6 = RM_OK;\u000a    while( true ) {\u000a      ent = fts_read(sp);\u000a      if (ent == (FTSENT *)0x0) break;\u000a      RVar2 = rm_fts(sp,ent,x);\u000a      if (RVar2 + 0xfffffffe < 2) {\u000a        if ((RVar6 == RM_OK) && (RVar2 == RM_USER_DECLINED)) {\u000a          RVar6 = RM_USER_DECLINED;\u000a        }\u000a      }\u000a      else {\u000a        RVar6 = RM_ERROR;\u000a        if (RVar2 != RM_ERROR) {\u000a                    /* WARNING: Subroutine does not return */\u000a          __assert_fail("VALID_STATUS (s)","src/remove.c",0x23e,\u000a                        "enum RM_status rm(char *const *, const struct rm_options *)");\u000a        }\u000a      }\u000a    }\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    if (uVar1 != 0) {\u000a      uVar5 = dcgettext(0,"fts_read failed",5);\u000a      error(0,(ulong)uVar1,uVar5,uVar5);\u000a      RVar6 = RM_ERROR;\u000a    }\u000a    iVar3 = fts_close(sp);\u000a    if (iVar3 != 0) {\u000a      puVar4 = (uint *)__errno_location();\u000a      uVar1 = *puVar4;\u000a      uVar5 = dcgettext(0,"fts_close failed",5);\u000a      error(0,(ulong)uVar1,uVar5,uVar5);\u000a      RVar6 = RM_ERROR;\u000a    }\u000a  }\u000a  return RVar6;\u000a}\u000a\u000a
p178
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nCMP qword ptr [RDI],0x0\nJZ 0x00402554\nCMP byte ptr [R14 + 0x8],0x0\nMOV EAX,0x218\nMOV ESI,0x258\nCMOVZ ESI,EAX\nXOR EDX,EDX\nCALL 0x004056e0\nMOV RBX,RAX\nMOV EBP,0x2\nJMP 0x00402490\nMOV EBP,0x3\nNOP dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004062b0\nTEST RAX,RAX\nJZ 0x004024e3\nMOV RDI,RBX\nMOV RSI,RAX\nMOV RDX,R14\nCALL 0x00402560\nLEA ECX,[RAX + -0x2]\nCMP ECX,0x2\nJNC 0x004024c0\nCMP EBP,0x2\nJNZ 0x00402490\nCMP EAX,0x3\nJNZ 0x00402490\nJMP 0x00402484\nMOV EBP,0x4\nCMP EAX,0x4\nJZ 0x00402490\nMOV EDI,0x40a2b0\nMOV ESI,0x40a2c1\nMOV EDX,0x23e\nMOV ECX,0x40a2ce\nCALL 0x00401900\nCALL 0x00401780\nMOV R14D,dword ptr [RAX]\nTEST R14D,R14D\nJZ 0x00402518\nXOR EDI,EDI\nMOV ESI,0x40a2a0\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RCX\nCALL 0x00401ae0\nMOV EBP,0x4\nMOV RDI,RBX\nCALL 0x00406130\nTEST EAX,EAX\nJZ 0x00402559\nCALL 0x00401780\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a30a\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401ae0\nMOV EBP,0x4\nJMP 0x00402559\nMOV EBP,0x2\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p179
S'55\n41 56\n53\n49 89 f6\n48 83 3f 00\n0f 84 f3 00 00 00\n41 80 7e 08 00\nb8 18 02 00 00\nbe 58 02 00 00\n0f 44 f0\n31 d2\ne8 66 32 00 00\n48 89 c3\nbd 02 00 00 00\neb 0c\nbd 03 00 00 00\n0f 1f 80 00 00 00 00\n48 89 df\ne8 18 3e 00 00\n48 85 c0\n74 46\n48 89 df\n48 89 c6\n4c 89 f2\ne8 b5 00 00 00\n8d 48 fe\n83 f9 02\n73 0d\n83 fd 02\n75 d8\n83 f8 03\n75 d3\neb c5\nbd 04 00 00 00\n83 f8 04\n74 c6\nbf b0 a2 40 00\nbe c1 a2 40 00\nba 3e 02 00 00\nb9 ce a2 40 00\ne8 1d f4 ff ff\ne8 98 f2 ff ff\n44 8b 30\n45 85 f6\n74 28\n31 ff\nbe a0 a2 40 00\nba 05 00 00 00\ne8 5f f3 ff ff\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ca\ne8 cd f5 ff ff\nbd 04 00 00 00\n48 89 df\ne8 10 3c 00 00\n85 c0\n74 35\ne8 57 f2 ff ff\n8b 18\n31 ff\nbe 0a a3 40 00\nba 05 00 00 00\ne8 24 f3 ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\ne8 93 f5 ff ff\nbd 04 00 00 00\neb 05\nbd 02 00 00 00\n89 e8\n5b\n41 5e\n5d\nc3\n'
p180
S'.text:0000000000402450\n.text:0000000000402451\n.text:0000000000402453\n.text:0000000000402454\n.text:0000000000402457\n.text:000000000040245b\n.text:0000000000402461\n.text:0000000000402466\n.text:000000000040246b\n.text:0000000000402470\n.text:0000000000402473\n.text:0000000000402475\n.text:000000000040247a\n.text:000000000040247d\n.text:0000000000402482\n.text:0000000000402484\n.text:0000000000402489\n.text:0000000000402490\n.text:0000000000402493\n.text:0000000000402498\n.text:000000000040249b\n.text:000000000040249d\n.text:00000000004024a0\n.text:00000000004024a3\n.text:00000000004024a6\n.text:00000000004024ab\n.text:00000000004024ae\n.text:00000000004024b1\n.text:00000000004024b3\n.text:00000000004024b6\n.text:00000000004024b8\n.text:00000000004024bb\n.text:00000000004024bd\n.text:00000000004024c0\n.text:00000000004024c5\n.text:00000000004024c8\n.text:00000000004024ca\n.text:00000000004024cf\n.text:00000000004024d4\n.text:00000000004024d9\n.text:00000000004024de\n.text:00000000004024e3\n.text:00000000004024e8\n.text:00000000004024eb\n.text:00000000004024ee\n.text:00000000004024f0\n.text:00000000004024f2\n.text:00000000004024f7\n.text:00000000004024fc\n.text:0000000000402501\n.text:0000000000402504\n.text:0000000000402506\n.text:0000000000402508\n.text:000000000040250b\n.text:000000000040250e\n.text:0000000000402513\n.text:0000000000402518\n.text:000000000040251b\n.text:0000000000402520\n.text:0000000000402522\n.text:0000000000402524\n.text:0000000000402529\n.text:000000000040252b\n.text:000000000040252d\n.text:0000000000402532\n.text:0000000000402537\n.text:000000000040253c\n.text:000000000040253f\n.text:0000000000402541\n.text:0000000000402543\n.text:0000000000402545\n.text:0000000000402548\n.text:000000000040254d\n.text:0000000000402552\n.text:0000000000402554\n.text:0000000000402559\n.text:000000000040255b\n.text:000000000040255c\n.text:000000000040255e\n.text:000000000040255f\n'
p181
tp182
sS'rotr16'
p183
(S'\n__stdcall rotr16()\n'
p184
V\u000auint16_t rotr16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI << (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p185
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p186
S'89 f8\n89 f1\nd3 e8\nb9 10 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p187
S'.text:00000000004092a0\n.text:00000000004092a2\n.text:00000000004092a4\n.text:00000000004092a6\n.text:00000000004092ab\n.text:00000000004092ad\n.text:00000000004092af\n.text:00000000004092b1\n.text:00000000004092b3\n'
p188
tp189
sS'openat'
p190
(S'\n__stdcall openat(int __fd, char * __file, int __oflag)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint openat(int __fd,char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_openat_0060e0c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x0060e0c0]\n'
p193
S'ff 25 1a c8 20 00\n'
p194
S'.plt:00000000004018a0\n'
p195
tp196
sS'AD_hash'
p197
(S'\n__stdcall AD_hash(void * x, size_t table_size)\n'
p198
V\u000asize_t AD_hash(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)((long)x + 8) % table_size;\u000a}\u000a\u000a
p199
S'MOV RAX,qword ptr [RDI + 0x8]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p200
S'48 8b 47 08\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p201
S'.text:0000000000407580\n.text:0000000000407584\n.text:0000000000407586\n.text:0000000000407589\n.text:000000000040758c\n'
p202
tp203
sS'setlocale'
p204
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p205
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060e1c8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x0060e1c8]\n'
p207
S'ff 25 12 c7 20 00\n'
p208
S'.plt:0000000000401ab0\n'
p209
tp210
sS'c_toupper'
p211
(S'\n__stdcall c_toupper()\n'
p212
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p214
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p215
S'.text:00000000004078d0\n.text:00000000004078d3\n.text:00000000004078d6\n.text:00000000004078d9\n.text:00000000004078dc\n'
p216
tp217
sS'fcntl'
p218
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_0060e080)();\u000a  return iVar1;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x0060e080]\n'
p221
S'ff 25 5a c8 20 00\n'
p222
S'.plt:0000000000401820\n'
p223
tp224
sS'mbsinit'
p225
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060e238)();\u000a  return iVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x0060e238]\n'
p228
S'ff 25 a2 c6 20 00\n'
p229
S'.plt:0000000000401b90\n'
p230
tp231
sS'enter_dir'
p232
(S'\n__stdcall enter_dir(FTS * fts, FTSENT * ent)\n'
p233
V\u000a_Bool enter_dir(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  _Bool _Var1;\u000a  __dev_t *entry;\u000a  __dev_t *p_Var2;\u000a  undefined uVar3;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) == 0) {\u000a    _Var1 = cycle_check((cycle_check_state *)fts->fts_cycle,ent->fts_statp);\u000a    if (_Var1 == false) {\u000a      return true;\u000a    }\u000a    *(FTSENT **)&ent->fts_cycle = ent;\u000aLAB_004073b3:\u000a    uVar3 = 1;\u000a    ent->fts_info = 2;\u000a  }\u000a  else {\u000a    entry = (__dev_t *)malloc(0x18);\u000a    if (entry != (__dev_t *)0x0) {\u000a      *entry = ent->fts_statp[0].st_dev;\u000a      entry[1] = ent->fts_statp[0].st_ino;\u000a      *(FTSENT **)(entry + 2) = ent;\u000a      p_Var2 = (__dev_t *)hash_insert((Hash_table *)fts->fts_cycle,entry);\u000a      if (p_Var2 == entry) {\u000a        return true;\u000a      }\u000a      free(entry);\u000a      if (p_Var2 != (__dev_t *)0x0) {\u000a        ent->fts_cycle = (_ftsent *)p_Var2[2];\u000a        goto LAB_004073b3;\u000a      }\u000a    }\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p234
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBP,RDI\nMOVZX EAX,word ptr [RBP + 0x48]\nTEST AX,0x102\nJZ 0x0040739c\nMOV EDI,0x18\nCALL 0x00401a20\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004073bc\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [0x80 + R14]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [RBX + 0x10],R14\nMOV RDI,qword ptr [RBP + 0x58]\nMOV RSI,RBX\nCALL 0x00408830\nMOV R15,RAX\nMOV BPL,0x1\nCMP R15,RBX\nJZ 0x004073be\nMOV RDI,RBX\nCALL 0x00401760\nTEST R15,R15\nJZ 0x004073bc\nMOV RAX,qword ptr [R15 + 0x10]\nMOV qword ptr [R14],RAX\nJMP 0x004073b3\nMOV RDI,qword ptr [RBP + 0x58]\nLEA RSI,[R14 + 0x78]\nCALL 0x004079d0\nMOV BPL,0x1\nTEST AL,AL\nJZ 0x004073be\nMOV qword ptr [R14],R14\nMOV word ptr [R14 + 0x70],0x2\nJMP 0x004073be\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p235
S'55\n41 57\n41 56\n53\n50\n49 89 f6\n48 89 fd\n0f b7 45 48\n66 a9 02 01\n74 55\nbf 18 00 00 00\ne8 cf a6 ff ff\n48 89 c3\n48 85 db\n74 63\n49 8b 46 78\n48 89 03\n49 8b 86 80 00 00 00\n48 89 43 08\n4c 89 73 10\n48 8b 7d 58\n48 89 de\ne8 b5 14 00 00\n49 89 c7\n40 b5 01\n49 39 df\n74 38\n48 89 df\ne8 d2 a3 ff ff\n4d 85 ff\n74 29\n49 8b 47 10\n49 89 06\neb 17\n48 8b 7d 58\n49 8d 76 78\ne8 27 06 00 00\n40 b5 01\n84 c0\n74 0e\n4d 89 36\n66 41 c7 46 70 02 00\neb 02\n31 ed\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p236
S'.text:0000000000407330\n.text:0000000000407331\n.text:0000000000407333\n.text:0000000000407335\n.text:0000000000407336\n.text:0000000000407337\n.text:000000000040733a\n.text:000000000040733d\n.text:0000000000407341\n.text:0000000000407345\n.text:0000000000407347\n.text:000000000040734c\n.text:0000000000407351\n.text:0000000000407354\n.text:0000000000407357\n.text:0000000000407359\n.text:000000000040735d\n.text:0000000000407360\n.text:0000000000407367\n.text:000000000040736b\n.text:000000000040736f\n.text:0000000000407373\n.text:0000000000407376\n.text:000000000040737b\n.text:000000000040737e\n.text:0000000000407381\n.text:0000000000407384\n.text:0000000000407386\n.text:0000000000407389\n.text:000000000040738e\n.text:0000000000407391\n.text:0000000000407393\n.text:0000000000407397\n.text:000000000040739a\n.text:000000000040739c\n.text:00000000004073a0\n.text:00000000004073a4\n.text:00000000004073a9\n.text:00000000004073ac\n.text:00000000004073ae\n.text:00000000004073b0\n.text:00000000004073b3\n.text:00000000004073ba\n.text:00000000004073bc\n.text:00000000004073be\n.text:00000000004073c0\n.text:00000000004073c4\n.text:00000000004073c5\n.text:00000000004073c7\n.text:00000000004073c9\n.text:00000000004073ca\n'
p237
tp238
sS'dcgettext'
p239
(S'\n__stdcall dcgettext()\n'
p240
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060e0a0)();\u000a  return;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x0060e0a0]\n'
p242
S'ff 25 3a c8 20 00\n'
p243
S'.plt:0000000000401860\n'
p244
tp245
sS'set_cloexec_flag'
p246
(S'\n__stdcall set_cloexec_flag()\n'
p247
V\u000aint set_cloexec_flag(void)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  char in_SIL;\u000a  ulong in_RDI;\u000a  \u000a  iVar3 = 0;\u000a  uVar2 = rpl_fcntl(in_RDI,1,0);\u000a  if ((int)uVar2 < 0) {\u000a    iVar3 = -1;\u000a  }\u000a  else {\u000a    uVar1 = uVar2 & 0xfffffffe;\u000a    if (in_SIL != 0) {\u000a      uVar1 = uVar2 | 1;\u000a    }\u000a    if ((uVar2 != uVar1) && (iVar3 = rpl_fcntl(in_RDI & 0xffffffff,2), iVar3 != -1)) {\u000a      iVar3 = 0;\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p248
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV EBX,EDI\nXOR EBP,EBP\nMOV ESI,0x1\nXOR EDX,EDX\nXOR EAX,EAX\nCALL 0x00409060\nTEST EAX,EAX\nJS 0x00407929\nMOV ECX,EAX\nOR ECX,0x1\nMOV EDX,EAX\nAND EDX,0xfffffffe\nTEST R14B,R14B\nCMOVNZ EDX,ECX\nCMP EAX,EDX\nJZ 0x0040792e\nXOR EBP,EBP\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00409060\nCMP EAX,-0x1\nCMOVNZ EAX,EBP\nJMP 0x00407930\nMOV EBP,0xffffffff\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p249
S'55\n41 56\n53\n41 89 f6\n89 fb\n31 ed\nbe 01 00 00 00\n31 d2\n31 c0\ne8 67 17 00 00\n85 c0\n78 2c\n89 c1\n83 c9 01\n89 c2\n83 e2 fe\n45 84 f6\n0f 45 d1\n39 d0\n74 1d\n31 ed\nbe 02 00 00 00\n31 c0\n89 df\ne8 3f 17 00 00\n83 f8 ff\n0f 45 c5\neb 07\nbd ff ff ff ff\n89 e8\n5b\n41 5e\n5d\nc3\n'
p250
S'.text:00000000004078e0\n.text:00000000004078e1\n.text:00000000004078e3\n.text:00000000004078e4\n.text:00000000004078e7\n.text:00000000004078e9\n.text:00000000004078eb\n.text:00000000004078f0\n.text:00000000004078f2\n.text:00000000004078f4\n.text:00000000004078f9\n.text:00000000004078fb\n.text:00000000004078fd\n.text:00000000004078ff\n.text:0000000000407902\n.text:0000000000407904\n.text:0000000000407907\n.text:000000000040790a\n.text:000000000040790d\n.text:000000000040790f\n.text:0000000000407911\n.text:0000000000407913\n.text:0000000000407918\n.text:000000000040791a\n.text:000000000040791c\n.text:0000000000407921\n.text:0000000000407924\n.text:0000000000407927\n.text:0000000000407929\n.text:000000000040792e\n.text:0000000000407930\n.text:0000000000407931\n.text:0000000000407933\n.text:0000000000407934\n'
p251
tp252
sS'quotearg_free'
p253
(S'\n__stdcall quotearg_free()\n'
p254
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p255
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060e278]\nCMP dword ptr [0x0060e280],0x2\nJC 0x0040460a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401760\nINC RBX\nMOV EAX,dword ptr [0x0060e280]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x004045f0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60e3a0\nCMP RDI,RAX\nJZ 0x00404633\nCALL 0x00401760\nMOV qword ptr [0x0060e288],0x100\nMOV qword ptr [0x0060e290],0x60e3a0\nMOV EAX,0x60e288\nCMP R14,RAX\nJZ 0x00404650\nMOV RDI,R14\nCALL 0x00401760\nMOV qword ptr [0x0060e278],0x60e288\nMOV dword ptr [0x0060e280],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p256
S'41 57\n41 56\n53\n4c 8b 35 9c 9c 20 00\n83 3d 9d 9c 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 68 d1 ff ff\n48 ff c3\n8b 05 7f 9c 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 a0 e3 60 00\n48 39 c7\n74 1b\ne8 43 d1 ff ff\n48 c7 05 60 9c 20 00 00 01 00 00\n48 c7 05 5d 9c 20 00 a0 e3 60 00\nb8 88 e2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 1b d1 ff ff\n48 c7 05 28 9c 20 00 88 e2 60 00\nc7 05 26 9c 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p257
S'.text:00000000004045d0\n.text:00000000004045d2\n.text:00000000004045d4\n.text:00000000004045d5\n.text:00000000004045dc\n.text:00000000004045e3\n.text:00000000004045e5\n.text:00000000004045e9\n.text:00000000004045ee\n.text:00000000004045f0\n.text:00000000004045f3\n.text:00000000004045f8\n.text:00000000004045fb\n.text:0000000000404601\n.text:0000000000404605\n.text:0000000000404608\n.text:000000000040460a\n.text:000000000040460e\n.text:0000000000404613\n.text:0000000000404616\n.text:0000000000404618\n.text:000000000040461d\n.text:0000000000404628\n.text:0000000000404633\n.text:0000000000404638\n.text:000000000040463b\n.text:000000000040463d\n.text:0000000000404640\n.text:0000000000404645\n.text:0000000000404650\n.text:000000000040465a\n.text:000000000040465b\n.text:000000000040465d\n.text:000000000040465f\n'
p258
tp259
sS'dirent_inode_sort_may_be_useful'
p260
(S'\n__stdcall dirent_inode_sort_may_be_useful()\n'
p261
V\u000a_Bool dirent_inode_sort_may_be_useful(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int iVar2;\u000a  int __fildes;\u000a  statfs local_78;\u000a  \u000a  iVar2 = fstatfs(__fildes,&local_78);\u000a  uVar1 = 1;\u000a  if (iVar2 == 0) {\u000a    uVar1 = 0;\u000a    if ((local_78.f_type != 0x6969) && (local_78.f_type != 0x1021994)) {\u000a      uVar1 = 1;\u000a    }\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p262
S'SUB RSP,0x78\nMOV RSI,RSP\nCALL 0x00401b30\nMOV ECX,EAX\nMOV AL,0x1\nTEST ECX,ECX\nJZ 0x00407729\nADD RSP,0x78\nRET\nXOR EAX,EAX\nMOV RCX,qword ptr [RSP]\nCMP RCX,0x6969\nJZ 0x00407724\nCMP RCX,0x1021994\nJZ 0x00407724\nMOV AL,0x1\nJMP 0x00407724\n'
p263
S'48 83 ec 78\n48 89 e6\ne8 14 a4 ff ff\n89 c1\nb0 01\n85 c9\n74 05\n48 83 c4 78\nc3\n31 c0\n48 8b 0c 24\n48 81 f9 69 69 00 00\n74 ec\n48 81 f9 94 19 02 01\n74 e3\nb0 01\neb df\n'
p264
S'.text:0000000000407710\n.text:0000000000407714\n.text:0000000000407717\n.text:000000000040771c\n.text:000000000040771e\n.text:0000000000407720\n.text:0000000000407722\n.text:0000000000407724\n.text:0000000000407728\n.text:0000000000407729\n.text:000000000040772b\n.text:000000000040772f\n.text:0000000000407736\n.text:0000000000407738\n.text:000000000040773f\n.text:0000000000407741\n.text:0000000000407743\n'
p265
tp266
sS'quotearg_mem'
p267
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p268
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p269
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404830\n'
p270
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p271
S'.text:0000000000404850\n.text:0000000000404853\n.text:0000000000404856\n.text:0000000000404858\n.text:000000000040485b\n.text:000000000040485e\n'
p272
tp273
sS'rotl32'
p274
(S'\n__stdcall rotl32()\n'
p275
V\u000auint32_t rotl32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI << bVar1 | in_EDI >> 0x20 - bVar1);\u000a}\u000a\u000a
p276
S'MOV ECX,ESI\nROL EDI,CL\nMOV EAX,EDI\nRET\n'
p277
S'89 f1\nd3 c7\n89 f8\nc3\n'
p278
S'.text:0000000000409240\n.text:0000000000409242\n.text:0000000000409244\n.text:0000000000409246\n'
p279
tp280
sS'deregister_tm_clones'
p281
(S'\n__stdcall deregister_tm_clones()\n'
p282
V\u000a/* WARNING: Removing unreachable block (ram,0x00401c05) */\u000a/* WARNING: Removing unreachable block (ram,0x00401c0f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p283
S'MOV EAX,0x60e2d7\nPUSH RBP\nSUB RAX,0x60e2d0\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401c20\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401c20\nPOP RBP\nMOV EDI,0x60e2d0\nJMP RAX\nPOP RBP\nRET\n'
p284
S'b8 d7 e2 60 00\n55\n48 2d d0 e2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf d0 e2 60 00\nff e0\n5d\nc3\n'
p285
S'.text:0000000000401bf0\n.text:0000000000401bf5\n.text:0000000000401bf6\n.text:0000000000401bfc\n.text:0000000000401c00\n.text:0000000000401c03\n.text:0000000000401c05\n.text:0000000000401c0a\n.text:0000000000401c0d\n.text:0000000000401c0f\n.text:0000000000401c10\n.text:0000000000401c15\n.text:0000000000401c20\n.text:0000000000401c21\n'
p286
tp287
sS'quotearg_custom'
p288
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p289
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p290
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404a70\n'
p291
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p292
S'.text:0000000000404af0\n.text:0000000000404af3\n.text:0000000000404af6\n.text:0000000000404af9\n.text:0000000000404afb\n.text:0000000000404afe\n.text:0000000000404b01\n.text:0000000000404b04\n'
p293
tp294
sS'fts_palloc'
p295
(S'\n__stdcall fts_palloc(FTS * sp, size_t more)\n'
p296
V\u000a_Bool fts_palloc(FTS *sp,size_t more)\u000a\u000a{\u000a  int *piVar1;\u000a  char *pcVar2;\u000a  size_t __size;\u000a  \u000a  __size = more + 0x100 + sp->fts_pathlen;\u000a  if (CARRY8(more + 0x100,sp->fts_pathlen)) {\u000a    free(sp->fts_path);\u000a    sp->fts_path = (char *)0x0;\u000a    piVar1 = __errno_location();\u000a    *piVar1 = 0x24;\u000a  }\u000a  else {\u000a    sp->fts_pathlen = __size;\u000a    pcVar2 = (char *)realloc(sp->fts_path,__size);\u000a    if (pcVar2 != (char *)0x0) {\u000a      sp->fts_path = pcVar2;\u000a      return true;\u000a    }\u000a    free(sp->fts_path);\u000a    sp->fts_path = (char *)0x0;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p297
S'PUSH RBX\nMOV RBX,RDI\nADD RSI,0x100\nADD RSI,qword ptr [RBX + 0x30]\nMOV RDI,qword ptr [RBX + 0x20]\nJNC 0x00405cdf\nCALL 0x00401760\nMOV qword ptr [RBX + 0x20],0x0\nCALL 0x00401780\nMOV dword ptr [RAX],0x24\nJMP 0x00405d06\nMOV qword ptr [RBX + 0x30],RSI\nCALL 0x00401a90\nTEST RAX,RAX\nJZ 0x00405cf5\nMOV qword ptr [RBX + 0x20],RAX\nMOV AL,0x1\nJMP 0x00405d08\nMOV RDI,qword ptr [RBX + 0x20]\nCALL 0x00401760\nMOV qword ptr [RBX + 0x20],0x0\nXOR EAX,EAX\nPOP RBX\nRET\n'
p298
S'53\n48 89 fb\n48 81 c6 00 01 00 00\n48 03 73 30\n48 8b 7b 20\n73 1a\ne8 96 ba ff ff\n48 c7 43 20 00 00 00 00\ne8 a9 ba ff ff\nc7 00 24 00 00 00\neb 27\n48 89 73 30\ne8 a8 bd ff ff\n48 85 c0\n74 08\n48 89 43 20\nb0 01\neb 13\n48 8b 7b 20\ne8 62 ba ff ff\n48 c7 43 20 00 00 00 00\n31 c0\n5b\nc3\n'
p299
S'.text:0000000000405cb0\n.text:0000000000405cb1\n.text:0000000000405cb4\n.text:0000000000405cbb\n.text:0000000000405cbf\n.text:0000000000405cc3\n.text:0000000000405cc5\n.text:0000000000405cca\n.text:0000000000405cd2\n.text:0000000000405cd7\n.text:0000000000405cdd\n.text:0000000000405cdf\n.text:0000000000405ce3\n.text:0000000000405ce8\n.text:0000000000405ceb\n.text:0000000000405ced\n.text:0000000000405cf1\n.text:0000000000405cf3\n.text:0000000000405cf5\n.text:0000000000405cf9\n.text:0000000000405cfe\n.text:0000000000405d06\n.text:0000000000405d08\n.text:0000000000405d09\n'
p300
tp301
sS'free'
p302
(S'\n__stdcall free(void * __ptr)\n'
p303
V\u000a/* WARNING: Switch with 1 destination removed at 0x00401760 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x0060e020]\n'
p305
S'ff 25 ba c8 20 00\n'
p306
S'.plt:0000000000401760\n'
p307
tp308
sS'close'
p309
(S'\n__stdcall close(int __fd)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060e110)();\u000a  return iVar1;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x0060e110]\n'
p312
S'ff 25 ca c7 20 00\n'
p313
S'.plt:0000000000401940\n'
p314
tp315
sS'getenv'
p316
(S'\n__stdcall getenv(char * __name)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060e018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x0060e018]\n'
p319
S'ff 25 c2 c8 20 00\n'
p320
S'.plt:0000000000401750\n'
p321
tp322
sS'LCO_hash'
p323
(S'\n__stdcall LCO_hash(void * x, size_t table_size)\n'
p324
V\u000asize_t LCO_hash(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)x % table_size;\u000a}\u000a\u000a
p325
S'MOV RAX,qword ptr [RDI]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p326
S'48 8b 07\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p327
S'.text:00000000004075b0\n.text:00000000004075b3\n.text:00000000004075b5\n.text:00000000004075b8\n.text:00000000004075bb\n'
p328
tp329
sS'stat'
p330
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p331
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_0060e168)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p332
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x004019f0\n'
p333
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 30 86 ff ff\n'
p334
S'.text:00000000004093b0\n.text:00000000004093b3\n.text:00000000004093b6\n.text:00000000004093bb\n'
p335
tp336
sS'rpl_fseeko'
p337
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p338
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060e1f0)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p339
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x004058a8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x004058a8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x004058ba\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401b00\nMOV RDI,RBX\nCALL 0x004019e0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x004018f0\nCMP RAX,-0x1\nJZ 0x004058e3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x004058e8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p340
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 46 c2 ff ff\n48 89 df\ne8 1e c1 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 21 c0 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p341
S'.text:0000000000405880\n.text:0000000000405881\n.text:0000000000405883\n.text:0000000000405884\n.text:0000000000405887\n.text:000000000040588a\n.text:000000000040588d\n.text:0000000000405891\n.text:0000000000405895\n.text:0000000000405897\n.text:000000000040589b\n.text:000000000040589f\n.text:00000000004058a1\n.text:00000000004058a6\n.text:00000000004058a8\n.text:00000000004058ab\n.text:00000000004058ae\n.text:00000000004058b1\n.text:00000000004058b2\n.text:00000000004058b4\n.text:00000000004058b5\n.text:00000000004058ba\n.text:00000000004058bd\n.text:00000000004058c2\n.text:00000000004058c4\n.text:00000000004058c7\n.text:00000000004058ca\n.text:00000000004058cf\n.text:00000000004058d3\n.text:00000000004058d5\n.text:00000000004058d8\n.text:00000000004058df\n.text:00000000004058e1\n.text:00000000004058e3\n.text:00000000004058e8\n.text:00000000004058e9\n.text:00000000004058eb\n.text:00000000004058ec\n'
p342
tp343
sS'quote_n_mem'
p344
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p345
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'MOV ECX,0x60e298\nJMP 0x00404670\n'
p347
S'b9 98 e2 60 00\ne9 36 fb ff ff\n'
p348
S'.text:0000000000404b30\n.text:0000000000404b35\n'
p349
tp350
sS'xstrdup'
p351
(S'\n__stdcall xstrdup(char * string)\n'
p352
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p353
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401880\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00405660\n'
p354
S'53\n48 89 fb\ne8 e7 c1 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p355
S'.text:0000000000405690\n.text:0000000000405691\n.text:0000000000405694\n.text:0000000000405699\n.text:000000000040569d\n.text:00000000004056a0\n.text:00000000004056a1\n'
p356
tp357
sS'c_ispunct'
p358
(S'\n__stdcall c_ispunct()\n'
p359
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p360
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00407862\nMOV AL,0x1\nJMP qword ptr [0x40b0e0 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p361
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd e0 b0 40 00\nc3\n31 c0\nc3\n'
p362
S'.text:0000000000407850\n.text:0000000000407853\n.text:0000000000407856\n.text:0000000000407858\n.text:000000000040785a\n.text:0000000000407861\n.text:0000000000407862\n.text:0000000000407864\n'
p363
tp364
sS'rotr8'
p365
(S'\n__stdcall rotr8()\n'
p366
V\u000auint8_t rotr8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI << (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p367
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p368
S'89 f8\n89 f1\nd3 e8\nb9 08 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p369
S'.text:00000000004092e0\n.text:00000000004092e2\n.text:00000000004092e4\n.text:00000000004092e6\n.text:00000000004092eb\n.text:00000000004092ed\n.text:00000000004092ef\n.text:00000000004092f1\n.text:00000000004092f3\n'
p370
tp371
sS'free_dir'
p372
(S'\n__stdcall free_dir(FTS * sp)\n'
p373
V\u000avoid free_dir(FTS *sp)\u000a\u000a{\u000a  if ((*(ushort *)&sp->fts_options & 0x102) == 0) {\u000a    free((void *)sp->fts_cycle);\u000a    return;\u000a  }\u000a  if ((Hash_table *)sp->fts_cycle != (Hash_table *)0x0) {\u000a    hash_free((Hash_table *)sp->fts_cycle);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p374
S'MOVZX EAX,word ptr [RDI + 0x48]\nTEST AX,0x102\nJZ 0x00406298\nMOV RDI,qword ptr [RDI + 0x58]\nTEST RDI,RDI\nJZ 0x004062a1\nJMP 0x00408230\nMOV RDI,qword ptr [RDI + 0x58]\nJMP 0x00401760\nRET\n'
p375
S'0f b7 47 48\n66 a9 02 01\n74 0e\n48 8b 7f 58\n48 85 ff\n74 0e\ne9 98 1f 00 00\n48 8b 7f 58\ne9 bf b4 ff ff\nc3\n'
p376
S'.text:0000000000406280\n.text:0000000000406284\n.text:0000000000406288\n.text:000000000040628a\n.text:000000000040628e\n.text:0000000000406291\n.text:0000000000406293\n.text:0000000000406298\n.text:000000000040629c\n.text:00000000004062a1\n'
p377
tp378
sS'fstat'
p379
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p380
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_0060e1a0)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p381
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00401a60\n'
p382
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 91 86 ff ff\n'
p383
S'.text:00000000004093c0\n.text:00000000004093c3\n.text:00000000004093c5\n.text:00000000004093ca\n'
p384
tp385
sS'fdopendir'
p386
(S'\n__stdcall fdopendir(int __fd)\n'
p387
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aDIR * fdopendir(int __fd)\u000a\u000a{\u000a  DIR *pDVar1;\u000a  \u000a  pDVar1 = (DIR *)(*(code *)PTR_fdopendir_0060e200)();\u000a  return pDVar1;\u000a}\u000a\u000a
p388
S'JMP qword ptr [0x0060e200]\n'
p389
S'ff 25 da c6 20 00\n'
p390
S'.plt:0000000000401b20\n'
p391
tp392
sS'leaf_optimization_applies'
p393
(S'\n__stdcall leaf_optimization_applies()\n'
p394
V\u000a_Bool leaf_optimization_applies(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int iVar2;\u000a  int __fildes;\u000a  statfs local_78;\u000a  \u000a  iVar2 = fstatfs(__fildes,&local_78);\u000a  if ((iVar2 != 0) ||\u000a     ((uVar1 = 1, local_78.f_type != 0x52654973 && (local_78.f_type != 0x58465342)))) {\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p395
S'SUB RSP,0x78\nMOV RSI,RSP\nCALL 0x00401b30\nTEST EAX,EAX\nJZ 0x004075e7\nXOR EAX,EAX\nADD RSP,0x78\nRET\nMOV AL,0x1\nMOV RCX,qword ptr [RSP]\nCMP RCX,0x52654973\nJZ 0x004075e2\nCMP RCX,0x58465342\nJZ 0x004075e2\nJMP 0x004075e0\n'
p396
S'48 83 ec 78\n48 89 e6\ne8 54 a5 ff ff\n85 c0\n74 07\n31 c0\n48 83 c4 78\nc3\nb0 01\n48 8b 0c 24\n48 81 f9 73 49 65 52\n74 ec\n48 81 f9 42 53 46 58\n74 e3\neb df\n'
p397
S'.text:00000000004075d0\n.text:00000000004075d4\n.text:00000000004075d7\n.text:00000000004075dc\n.text:00000000004075de\n.text:00000000004075e0\n.text:00000000004075e2\n.text:00000000004075e6\n.text:00000000004075e7\n.text:00000000004075e9\n.text:00000000004075ed\n.text:00000000004075f4\n.text:00000000004075f6\n.text:00000000004075fd\n.text:00000000004075ff\n'
p398
tp399
sS'is_prime'
p400
(S'\n__stdcall is_prime(size_t candidate)\n'
p401
V\u000a_Bool is_prime(size_t candidate)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  long lVar3;\u000a  bool bVar4;\u000a  \u000a  bVar4 = candidate != (candidate / 3) * 3;\u000a  if ((9 < candidate) && (bVar4)) {\u000a    uVar2 = 9;\u000a    lVar3 = 0x10;\u000a    uVar1 = 5;\u000a    do {\u000a      uVar2 = uVar2 + lVar3;\u000a      bVar4 = candidate % uVar1 != 0;\u000a      if (candidate <= uVar2) {\u000a        return (_Bool)bVar4;\u000a      }\u000a      lVar3 = lVar3 + 8;\u000a      uVar1 = uVar1 + 2;\u000a    } while (bVar4);\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p402
S'MOV R8,RDI\nMOV RCX,-0x5555555555555555\nMOV RAX,R8\nMUL RCX\nSHR RDX,1\nLEA RAX,[RDX + RDX*0x2]\nCMP R8,RAX\nSETNZ AL\nSETZ CL\nCMP R8,0xa\nJC 0x00408ab5\nTEST CL,CL\nJNZ 0x00408ab5\nMOV ESI,0x9\nMOV EDI,0x10\nMOV ECX,0x5\nNOP dword ptr [RAX]\nADD RSI,RDI\nXOR EDX,EDX\nMOV RAX,R8\nDIV RCX\nTEST RDX,RDX\nSETNZ AL\nSETZ DL\nCMP RSI,R8\nJNC 0x00408ab5\nADD RDI,0x8\nADD RCX,0x2\nTEST DL,DL\nJZ 0x00408a90\nRET\n'
p403
S'49 89 f8\n48 b9 ab aa aa aa aa aa aa aa\n4c 89 c0\n48 f7 e1\n48 d1 ea\n48 8d 04 52\n49 39 c0\n0f 95 c0\n0f 94 c1\n49 83 f8 0a\n72 3c\n84 c9\n75 38\nbe 09 00 00 00\nbf 10 00 00 00\nb9 05 00 00 00\n0f 1f 40 00\n48 01 fe\n31 d2\n4c 89 c0\n48 f7 f1\n48 85 d2\n0f 95 c0\n0f 94 c2\n4c 39 c6\n73 0c\n48 83 c7 08\n48 83 c1 02\n84 d2\n74 db\nc3\n'
p404
S'.text:0000000000408a50\n.text:0000000000408a53\n.text:0000000000408a5d\n.text:0000000000408a60\n.text:0000000000408a63\n.text:0000000000408a66\n.text:0000000000408a6a\n.text:0000000000408a6d\n.text:0000000000408a70\n.text:0000000000408a73\n.text:0000000000408a77\n.text:0000000000408a79\n.text:0000000000408a7b\n.text:0000000000408a7d\n.text:0000000000408a82\n.text:0000000000408a87\n.text:0000000000408a8c\n.text:0000000000408a90\n.text:0000000000408a93\n.text:0000000000408a95\n.text:0000000000408a98\n.text:0000000000408a9b\n.text:0000000000408a9e\n.text:0000000000408aa1\n.text:0000000000408aa4\n.text:0000000000408aa7\n.text:0000000000408aa9\n.text:0000000000408aad\n.text:0000000000408ab1\n.text:0000000000408ab3\n.text:0000000000408ab5\n'
p405
tp406
sS'i_ring_push'
p407
(S'\n__stdcall i_ring_push(I_ring * ir)\n'
p408
V\u000aint i_ring_push(I_ring *ir)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int in_ESI;\u000a  \u000a  uVar2 = (uint)(ir->ir_empty ^ 1) + ir->ir_front & 3;\u000a  iVar1 = ir->ir_data[(ulong)uVar2];\u000a  ir->ir_data[(ulong)uVar2] = in_ESI;\u000a  ir->ir_front = uVar2;\u000a  if (uVar2 == ir->ir_back) {\u000a    ir->ir_back = (uint)(ir->ir_empty ^ 1) + ir->ir_back & 3;\u000a  }\u000a  ir->ir_empty = false;\u000a  return iVar1;\u000a}\u000a\u000a
p409
S'MOV AL,byte ptr [RDI + 0x1c]\nXOR AL,0x1\nMOVZX EDX,AL\nADD EDX,dword ptr [RDI + 0x14]\nAND EDX,0x3\nMOV EAX,dword ptr [RDI + RDX*0x4]\nMOV dword ptr [RDI + RDX*0x4],ESI\nMOV dword ptr [RDI + 0x14],EDX\nMOV ECX,dword ptr [RDI + 0x18]\nCMP EDX,ECX\nJNZ 0x00408b3f\nMOV DL,byte ptr [RDI + 0x1c]\nXOR DL,0x1\nMOVZX EDX,DL\nADD EDX,ECX\nAND EDX,0x3\nMOV dword ptr [RDI + 0x18],EDX\nMOV byte ptr [RDI + 0x1c],0x0\nRET\n'
p410
S'8a 47 1c\n34 01\n0f b6 d0\n03 57 14\n83 e2 03\n8b 04 97\n89 34 97\n89 57 14\n8b 4f 18\n39 ca\n75 11\n8a 57 1c\n80 f2 01\n0f b6 d2\n01 ca\n83 e2 03\n89 57 18\nc6 47 1c 00\nc3\n'
p411
S'.text:0000000000408b10\n.text:0000000000408b13\n.text:0000000000408b15\n.text:0000000000408b18\n.text:0000000000408b1b\n.text:0000000000408b1e\n.text:0000000000408b21\n.text:0000000000408b24\n.text:0000000000408b27\n.text:0000000000408b2a\n.text:0000000000408b2c\n.text:0000000000408b2e\n.text:0000000000408b31\n.text:0000000000408b34\n.text:0000000000408b37\n.text:0000000000408b39\n.text:0000000000408b3c\n.text:0000000000408b3f\n.text:0000000000408b43\n'
p412
tp413
sS'fscanf'
p414
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060e108)();\u000a  return iVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x0060e108]\n'
p417
S'ff 25 d2 c7 20 00\n'
p418
S'.plt:0000000000401930\n'
p419
tp420
sS'memcpy'
p421
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060e158)();\u000a  return pvVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x0060e158]\n'
p424
S'ff 25 82 c7 20 00\n'
p425
S'.plt:00000000004019d0\n'
p426
tp427
sS'close_stdout_set_ignore_EPIPE'
p428
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p429
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p430
S'MOV byte ptr [0x0060e350],DIL\nRET\n'
p431
S'40 88 3d c9 ae 20 00\nc3\n'
p432
S'.text:0000000000403480\n.text:0000000000403487\n'
p433
tp434
sS'hash_get_n_buckets_used'
p435
(S'\n__stdcall hash_get_n_buckets_used(Hash_table * table)\n'
p436
V\u000asize_t hash_get_n_buckets_used(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets_used;\u000a}\u000a\u000a
p437
S'MOV RAX,qword ptr [RDI + 0x18]\nRET\n'
p438
S'48 8b 47 18\nc3\n'
p439
S'.text:0000000000407b40\n.text:0000000000407b44\n'
p440
tp441
sS'iswprint'
p442
(S'\n__stdcall iswprint(wint_t __wc)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060e240)();\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x0060e240]\n'
p445
S'ff 25 9a c6 20 00\n'
p446
S'.plt:0000000000401ba0\n'
p447
tp448
sS'readdir_ignoring_dot_and_dotdot'
p449
(S'\n__stdcall readdir_ignoring_dot_and_dotdot(DIR * dirp)\n'
p450
V\u000adirent * readdir_ignoring_dot_and_dotdot(DIR *dirp)\u000a\u000a{\u000a  _Bool _Var1;\u000a  dirent *pdVar2;\u000a  \u000a  do {\u000a    pdVar2 = readdir((DIR *)dirp);\u000a    if (pdVar2 == (dirent *)0x0) {\u000a      return (dirent *)0x0;\u000a    }\u000a    _Var1 = dot_or_dotdot(pdVar2->d_name);\u000a  } while (_Var1 != false);\u000a  return (dirent *)pdVar2;\u000a}\u000a\u000a
p451
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nXOR R14D,R14D\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nCALL 0x00401a00\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00402f20\nLEA RDI,[RBX + 0x13]\nCALL 0x00402a60\nTEST AL,AL\nJNZ 0x00402f00\nMOV R14,RBX\nMOV RAX,R14\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p452
S'41 57\n41 56\n53\n49 89 ff\n45 31 f6\n0f 1f 44 00 00\n4c 89 ff\ne8 f8 ea ff ff\n48 89 c3\n48 85 db\n74 10\n48 8d 7b 13\ne8 47 fb ff ff\n84 c0\n75 e3\n49 89 de\n4c 89 f0\n5b\n41 5e\n41 5f\nc3\n'
p453
S'.text:0000000000402ef0\n.text:0000000000402ef2\n.text:0000000000402ef4\n.text:0000000000402ef5\n.text:0000000000402ef8\n.text:0000000000402efb\n.text:0000000000402f00\n.text:0000000000402f03\n.text:0000000000402f08\n.text:0000000000402f0b\n.text:0000000000402f0e\n.text:0000000000402f10\n.text:0000000000402f14\n.text:0000000000402f19\n.text:0000000000402f1b\n.text:0000000000402f1d\n.text:0000000000402f20\n.text:0000000000402f23\n.text:0000000000402f24\n.text:0000000000402f26\n.text:0000000000402f28\n'
p454
tp455
sS'openat_safer'
p456
(S'\n__stdcall openat_safer(char * file)\n'
p457
V\u000a/* WARNING: Removing unreachable block (ram,0x00408f58) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff60 : 0x00408f66 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint openat_safer(char *file,...)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  uint __oflag;\u000a  char *__file;\u000a  va_list ap;\u000a  uint local_a0;\u000a  \u000a  uVar2 = 0;\u000a  if ((__oflag & 0x40) != 0) {\u000a    uVar2 = (ulong)local_a0;\u000a  }\u000a  openat((int)file,__file,__oflag,uVar2);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p458
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00408f02\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nXOR ECX,ECX\nTEST DL,0x40\nJZ 0x00408f68\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x18\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x00408f58\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x00408f66\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV ECX,dword ptr [RAX]\nXOR EAX,EAX\nCALL 0x004018a0\nMOV EDI,EAX\nCALL 0x00408f90\nADD RSP,0xd8\nRET\n'
p459
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n31 c9\nf6 c2 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 18 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 08\n31 c0\ne8 31 89 ff ff\n89 c7\ne8 1a 00 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p460
S'.text:0000000000408ec0\n.text:0000000000408ec7\n.text:0000000000408ec9\n.text:0000000000408ecb\n.text:0000000000408ed0\n.text:0000000000408ed5\n.text:0000000000408eda\n.text:0000000000408ee2\n.text:0000000000408eea\n.text:0000000000408ef2\n.text:0000000000408efa\n.text:0000000000408f02\n.text:0000000000408f07\n.text:0000000000408f0c\n.text:0000000000408f11\n.text:0000000000408f13\n.text:0000000000408f16\n.text:0000000000408f18\n.text:0000000000408f1d\n.text:0000000000408f22\n.text:0000000000408f2a\n.text:0000000000408f2f\n.text:0000000000408f37\n.text:0000000000408f3e\n.text:0000000000408f42\n.text:0000000000408f46\n.text:0000000000408f48\n.text:0000000000408f4b\n.text:0000000000408f50\n.text:0000000000408f53\n.text:0000000000408f56\n.text:0000000000408f58\n.text:0000000000408f5d\n.text:0000000000408f61\n.text:0000000000408f66\n.text:0000000000408f68\n.text:0000000000408f6a\n.text:0000000000408f6f\n.text:0000000000408f71\n.text:0000000000408f76\n.text:0000000000408f7d\n'
p461
tp462
sS'c_isspace'
p463
(S'\n__stdcall c_isspace()\n'
p464
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p465
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00407885\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p466
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p467
S'.text:0000000000407870\n.text:0000000000407873\n.text:0000000000407876\n.text:0000000000407878\n.text:000000000040787d\n.text:000000000040787f\n.text:0000000000407881\n.text:0000000000407884\n.text:0000000000407885\n.text:0000000000407887\n'
p468
tp469
sS'open'
p470
(S'\n__stdcall open(char * __file, int __oflag)\n'
p471
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060e1e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x0060e1e8]\n'
p473
S'ff 25 f2 c6 20 00\n'
p474
S'.plt:0000000000401af0\n'
p475
tp476
sS'quotearg_n_custom_mem'
p477
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p478
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p479
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060e390]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060e380]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e370]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e360]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004037e0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404670\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p480
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 f7 98 20 00\n48 89 44 24 30\n0f 10 05 db 98 20 00\n0f 29 44 24 20\n0f 10 05 bf 98 20 00\n0f 29 44 24 10\n0f 10 05 a3 98 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p481
S'.text:0000000000404a80\n.text:0000000000404a81\n.text:0000000000404a83\n.text:0000000000404a85\n.text:0000000000404a86\n.text:0000000000404a8a\n.text:0000000000404a8d\n.text:0000000000404a90\n.text:0000000000404a92\n.text:0000000000404a99\n.text:0000000000404a9e\n.text:0000000000404aa5\n.text:0000000000404aaa\n.text:0000000000404ab1\n.text:0000000000404ab6\n.text:0000000000404abd\n.text:0000000000404ac1\n.text:0000000000404ac4\n.text:0000000000404ac7\n.text:0000000000404acc\n.text:0000000000404ace\n.text:0000000000404ad1\n.text:0000000000404ad4\n.text:0000000000404ad7\n.text:0000000000404adc\n.text:0000000000404ae0\n.text:0000000000404ae1\n.text:0000000000404ae3\n.text:0000000000404ae5\n.text:0000000000404ae6\n'
p482
tp483
sS'rotl16'
p484
(S'\n__stdcall rotl16()\n'
p485
V\u000auint16_t rotl16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI >> (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p486
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p487
S'89 f8\n89 f1\nd3 e0\nb9 10 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p488
S'.text:0000000000409280\n.text:0000000000409282\n.text:0000000000409284\n.text:0000000000409286\n.text:000000000040928b\n.text:000000000040928d\n.text:000000000040928f\n.text:0000000000409291\n.text:0000000000409293\n'
p489
tp490
sS'rm_option_init'
p491
(S'\n__stdcall rm_option_init(rm_options * x)\n'
p492
V\u000avoid rm_option_init(rm_options *x)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  x->ignore_missing_files = false;\u000a  x->interactive = RMI_SOMETIMES;\u000a  x->one_file_system = false;\u000a  x->remove_empty_directories = false;\u000a  x->recursive = false;\u000a  x->root_dev_ino = (dev_ino *)0x0;\u000a  iVar1 = isatty(0);\u000a  *(bool *)&x->stdin_tty = iVar1 != 0;\u000a  x->verbose = false;\u000a  x->require_restore_cwd = false;\u000a  return;\u000a}\u000a\u000a
p493
S'PUSH RBX\nMOV RBX,RDI\nMOV byte ptr [RBX],0x0\nMOV dword ptr [RBX + 0x4],0x4\nMOV byte ptr [RBX + 0x8],0x0\nMOV byte ptr [RBX + 0xa],0x0\nMOV byte ptr [RBX + 0x9],0x0\nMOV qword ptr [RBX + 0x10],0x0\nXOR EDI,EDI\nCALL 0x00401800\nTEST EAX,EAX\nSETNZ byte ptr [RBX + 0x18]\nMOV byte ptr [RBX + 0x19],0x0\nMOV byte ptr [RBX + 0x1a],0x0\nPOP RBX\nRET\n'
p494
S'53\n48 89 fb\nc6 03 00\nc7 43 04 04 00 00 00\nc6 43 08 00\nc6 43 0a 00\nc6 43 09 00\n48 c7 43 10 00 00 00 00\n31 ff\ne8 a7 f4 ff ff\n85 c0\n0f 95 43 18\nc6 43 19 00\nc6 43 1a 00\n5b\nc3\n'
p495
S'.text:0000000000402330\n.text:0000000000402331\n.text:0000000000402334\n.text:0000000000402337\n.text:000000000040233e\n.text:0000000000402342\n.text:0000000000402346\n.text:000000000040234a\n.text:0000000000402352\n.text:0000000000402354\n.text:0000000000402359\n.text:000000000040235b\n.text:000000000040235f\n.text:0000000000402363\n.text:0000000000402367\n.text:0000000000402368\n'
p496
tp497
sS'fts_compar'
p498
(S'\n__stdcall fts_compar(void * a, void * b)\n'
p499
V\u000aint fts_compar(void *a,void *b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (**(code **)(*(long *)(*(long *)a + 0x50) + 0x40))();\u000a  return iVar1;\u000a}\u000a\u000a
p500
S'PUSH RAX\nMOV RAX,qword ptr [RDI]\nMOV RAX,qword ptr [RAX + 0x50]\nCALL qword ptr [RAX + 0x40]\nPOP RCX\nRET\n'
p501
S'50\n48 8b 07\n48 8b 40 50\nff 50 40\n59\nc3\n'
p502
S'.text:0000000000407780\n.text:0000000000407781\n.text:0000000000407784\n.text:0000000000407788\n.text:000000000040778b\n.text:000000000040778c\n'
p503
tp504
sS'fts_padjust'
p505
(S'\n__stdcall fts_padjust(FTS * sp, FTSENT * head)\n'
p506
V\u000avoid fts_padjust(FTS *sp,FTSENT *head)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  char *pcVar2;\u000a  _ftsent **pp_Var3;\u000a  \u000a  p_Var1 = sp->fts_child;\u000a  pcVar2 = sp->fts_path;\u000a  while (p_Var1 != (_ftsent *)0x0) {\u000a    if ((_ftsent *)p_Var1->fts_accpath != p_Var1 + 1) {\u000a      p_Var1->fts_accpath =\u000a           pcVar2 + (long)&((_ftsent *)\u000a                           ((long)(_ftsent *)p_Var1->fts_accpath - (long)p_Var1->fts_path))->\u000a                           fts_cycle;\u000a    }\u000a    p_Var1->fts_path = pcVar2;\u000a    p_Var1 = p_Var1->fts_link;\u000a  }\u000a  while (-1 < head->fts_level) {\u000a    if ((FTSENT *)head->fts_accpath != head + 1) {\u000a      head->fts_accpath =\u000a           pcVar2 + (long)&((FTSENT *)((long)(FTSENT *)head->fts_accpath - (long)head->fts_path))->\u000a                           fts_cycle;\u000a    }\u000a    head->fts_path = pcVar2;\u000a    pp_Var3 = &head->fts_link;\u000a    if (head->fts_link == (_ftsent *)0x0) {\u000a      pp_Var3 = &head->fts_parent;\u000a    }\u000a    head = (FTSENT *)*pp_Var3;\u000a  }\u000a  return;\u000a}\u000a\u000a
p507
S'MOV RCX,qword ptr [RDI + 0x8]\nMOV RAX,qword ptr [RDI + 0x20]\nTEST RCX,RCX\nJNZ 0x004076ad\nJMP 0x004076e8\nMOV qword ptr [RCX + 0x38],RAX\nMOV RCX,qword ptr [RCX + 0x10]\nTEST RCX,RCX\nJZ 0x004076e8\nMOV RDX,qword ptr [RCX + 0x30]\nLEA RDI,[0x108 + RCX]\nCMP RDX,RDI\nJZ 0x004076a0\nSUB RDX,qword ptr [RCX + 0x38]\nADD RDX,RAX\nMOV qword ptr [RCX + 0x30],RDX\nJMP 0x004076a0\nMOV qword ptr [RSI + 0x38],RAX\nCMP qword ptr [RSI + 0x10],0x0\nLEA RCX,[RSI + 0x10]\nLEA RDX,[RSI + 0x8]\nCMOVZ RCX,RDX\nMOV RSI,qword ptr [RCX]\nCMP qword ptr [RSI + 0x58],0x0\nJS 0x0040770c\nMOV RCX,qword ptr [RSI + 0x30]\nLEA RDX,[0x108 + RSI]\nCMP RCX,RDX\nJZ 0x004076d0\nSUB RCX,qword ptr [RSI + 0x38]\nADD RCX,RAX\nMOV qword ptr [RSI + 0x30],RCX\nJMP 0x004076d0\nRET\n'
p508
S'48 8b 4f 08\n48 8b 47 20\n48 85 c9\n75 10\neb 49\n48 89 41 38\n48 8b 49 10\n48 85 c9\n74 3b\n48 8b 51 30\n48 8d b9 08 01 00 00\n48 39 fa\n74 e3\n48 2b 51 38\n48 01 c2\n48 89 51 30\neb d6\n48 89 46 38\n48 83 7e 10 00\n48 8d 4e 10\n48 8d 56 08\n48 0f 44 ca\n48 8b 31\n48 83 7e 58 00\n78 1d\n48 8b 4e 30\n48 8d 96 08 01 00 00\n48 39 d1\n74 d1\n48 2b 4e 38\n48 01 c1\n48 89 4e 30\neb c4\nc3\n'
p509
S'.text:0000000000407690\n.text:0000000000407694\n.text:0000000000407698\n.text:000000000040769b\n.text:000000000040769d\n.text:00000000004076a0\n.text:00000000004076a4\n.text:00000000004076a8\n.text:00000000004076ab\n.text:00000000004076ad\n.text:00000000004076b1\n.text:00000000004076b8\n.text:00000000004076bb\n.text:00000000004076bd\n.text:00000000004076c1\n.text:00000000004076c4\n.text:00000000004076c8\n.text:00000000004076d0\n.text:00000000004076d4\n.text:00000000004076d9\n.text:00000000004076dd\n.text:00000000004076e1\n.text:00000000004076e5\n.text:00000000004076e8\n.text:00000000004076ed\n.text:00000000004076ef\n.text:00000000004076f3\n.text:00000000004076fa\n.text:00000000004076fd\n.text:00000000004076ff\n.text:0000000000407703\n.text:0000000000407706\n.text:000000000040770a\n.text:000000000040770c\n'
p510
tp511
sS'_init'
p512
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p513
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060dff8;\u000a  if (PTR___gmon_start___0060dff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060dff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p514
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060dff8]\nTEST RAX,RAX\nJZ 0x0040173a\nCALL RAX\nADD RSP,0x8\nRET\n'
p515
S'48 83 ec 08\n48 8b 05 c5 c8 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p516
S'.init:0000000000401728\n.init:000000000040172c\n.init:0000000000401733\n.init:0000000000401736\n.init:0000000000401738\n.init:000000000040173a\n.init:000000000040173e\n'
p517
tp518
sS'close_stdin_set_file_name'
p519
(S'\n__stdcall close_stdin_set_file_name(char * file)\n'
p520
V\u000avoid close_stdin_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p521
S'MOV qword ptr [0x0060e340],RDI\nRET\n'
p522
S'48 89 3d a9 af 20 00\nc3\n'
p523
S'.text:0000000000403390\n.text:0000000000403397\n'
p524
tp525
sS'set_quoting_flags'
p526
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p527
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p528
S'TEST RDI,RDI\nMOV ECX,0x60e360\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p529
S'48 85 ff\nb9 60 e3 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p530
S'.text:00000000004037c0\n.text:00000000004037c3\n.text:00000000004037c8\n.text:00000000004037cc\n.text:00000000004037cf\n.text:00000000004037d2\n'
p531
tp532
sS'realloc'
p533
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p534
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060e1b8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p535
S'JMP qword ptr [0x0060e1b8]\n'
p536
S'ff 25 22 c7 20 00\n'
p537
S'.plt:0000000000401a90\n'
p538
tp539
sS'__fprintf_chk'
p540
(S'\n__stdcall __fprintf_chk()\n'
p541
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060e230)();\u000a  return;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x0060e230]\n'
p543
S'ff 25 aa c6 20 00\n'
p544
S'.plt:0000000000401b80\n'
p545
tp546
sS'get_charset_aliases'
p547
(S'\n__stdcall get_charset_aliases()\n'
p548
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00408e34_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00408e34_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00408e34_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00408e34_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00408e34_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00408e34_caseD_9;\u000a      case -1:\u000a        goto switchD_00408e34_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00408e8d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00408e93:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00408e34_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00408e93;\u000a  }\u000a  goto LAB_00408e8d;\u000a}\u000a\u000a
p549
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060e4a8]\nTEST R15,R15\nJNZ 0x00408ea2\nMOV EDI,0x40b64c\nCALL 0x00401750\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408c58\nCMP byte ptr [RBX],0x0\nJNZ 0x00408c5d\nMOV EBX,0x40b65c\nMOV RDI,RBX\nCALL 0x00401880\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00408c77\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00408c79\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401a20\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00408ccd\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004019d0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00408cd8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00408cf5\nMOV R15D,0x40ae19\nJMP 0x00408e9b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401af0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00408e8d\nMOV ESI,0x40a1fd\nMOV EDI,EBP\nCALL 0x00401aa0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408e54\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00408e20\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004017b0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004017b0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00408e20\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401a50\nMOV ESI,0x40b66b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401930\nCMP EAX,0x2\nJL 0x00408e74\nMOV RDI,R12\nCALL 0x00401880\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401880\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00408dfd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401a90\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00408d44\nJMP 0x00408e5d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401a20\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00408d44\nJMP 0x00408e5d\nMOV RDI,RBX\nCALL 0x004017e0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00408d87\nJMP qword ptr [0x40b510 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004017e0\nCMP EAX,-0x1\nJZ 0x00408e74\nCMP EAX,0xa\nJNZ 0x00408e40\nJMP 0x00408e20\nMOV EDI,EBP\nCALL 0x00401940\nJMP 0x00408e8d\nMOV RDI,R15\nCALL 0x00401760\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00408fe0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00408e8d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00408e93\nMOV R15D,0x40ae19\nMOV RDI,R13\nCALL 0x00401760\nMOV qword ptr [0x0060e4a8],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p550
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 70 58 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 4c b6 40 00\ne8 05 8b ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 5c b6 40 00\n48 89 df\ne8 1b 8c ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 99 8d ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 33 8d ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 19 ae 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 ec 8d ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe fd a1 40 00\n89 ef\ne8 86 8d ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 4b 8a ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 3b 8a ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 bf 8c ff ff\nbe 6b b6 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 8a 8b ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 c9 8a ff ff\n49 89 c4\n48 89 ef\ne8 be 8a ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 a6 8c ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 15 8c ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 b8 89 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 10 b5 40 00\n48 89 df\ne8 98 89 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 e5 8a ff ff\neb 30\n4c 89 ff\ne8 fb 88 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 64 01 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 19 ae 40 00\n4c 89 ef\ne8 c5 88 ff ff\n4c 89 3d 06 56 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p551
S'.text:0000000000408c20\n.text:0000000000408c21\n.text:0000000000408c23\n.text:0000000000408c25\n.text:0000000000408c27\n.text:0000000000408c29\n.text:0000000000408c2a\n.text:0000000000408c31\n.text:0000000000408c38\n.text:0000000000408c3b\n.text:0000000000408c41\n.text:0000000000408c46\n.text:0000000000408c4b\n.text:0000000000408c4e\n.text:0000000000408c51\n.text:0000000000408c53\n.text:0000000000408c56\n.text:0000000000408c58\n.text:0000000000408c5d\n.text:0000000000408c60\n.text:0000000000408c65\n.text:0000000000408c68\n.text:0000000000408c6b\n.text:0000000000408c6d\n.text:0000000000408c72\n.text:0000000000408c75\n.text:0000000000408c77\n.text:0000000000408c79\n.text:0000000000408c7d\n.text:0000000000408c82\n.text:0000000000408c87\n.text:0000000000408c8a\n.text:0000000000408c8d\n.text:0000000000408c8f\n.text:0000000000408c92\n.text:0000000000408c95\n.text:0000000000408c98\n.text:0000000000408c9d\n.text:0000000000408ca0\n.text:0000000000408ca3\n.text:0000000000408ca6\n.text:0000000000408ca8\n.text:0000000000408cae\n.text:0000000000408cb8\n.text:0000000000408cbd\n.text:0000000000408cc7\n.text:0000000000408ccb\n.text:0000000000408ccd\n.text:0000000000408cd3\n.text:0000000000408cd8\n.text:0000000000408ce2\n.text:0000000000408ce7\n.text:0000000000408cf1\n.text:0000000000408cf5\n.text:0000000000408cfa\n.text:0000000000408cfc\n.text:0000000000408cff\n.text:0000000000408d04\n.text:0000000000408d06\n.text:0000000000408d08\n.text:0000000000408d0e\n.text:0000000000408d13\n.text:0000000000408d15\n.text:0000000000408d1a\n.text:0000000000408d1d\n.text:0000000000408d20\n.text:0000000000408d26\n.text:0000000000408d2b\n.text:0000000000408d30\n.text:0000000000408d32\n.text:0000000000408d37\n.text:0000000000408d3a\n.text:0000000000408d3f\n.text:0000000000408d44\n.text:0000000000408d49\n.text:0000000000408d4c\n.text:0000000000408d4f\n.text:0000000000408d52\n.text:0000000000408d55\n.text:0000000000408d58\n.text:0000000000408d5d\n.text:0000000000408d60\n.text:0000000000408d65\n.text:0000000000408d68\n.text:0000000000408d6d\n.text:0000000000408d70\n.text:0000000000408d75\n.text:0000000000408d7a\n.text:0000000000408d7d\n.text:0000000000408d82\n.text:0000000000408d87\n.text:0000000000408d89\n.text:0000000000408d8c\n.text:0000000000408d91\n.text:0000000000408d96\n.text:0000000000408d98\n.text:0000000000408d9b\n.text:0000000000408d9e\n.text:0000000000408da1\n.text:0000000000408da6\n.text:0000000000408da9\n.text:0000000000408daf\n.text:0000000000408db2\n.text:0000000000408db7\n.text:0000000000408dba\n.text:0000000000408dbd\n.text:0000000000408dc2\n.text:0000000000408dc5\n.text:0000000000408dca\n.text:0000000000408dcf\n.text:0000000000408dd2\n.text:0000000000408dd4\n.text:0000000000408dd8\n.text:0000000000408ddd\n.text:0000000000408de2\n.text:0000000000408de5\n.text:0000000000408dea\n.text:0000000000408ded\n.text:0000000000408df2\n.text:0000000000408df5\n.text:0000000000408dfb\n.text:0000000000408dfd\n.text:0000000000408e02\n.text:0000000000408e06\n.text:0000000000408e0b\n.text:0000000000408e0e\n.text:0000000000408e11\n.text:0000000000408e17\n.text:0000000000408e20\n.text:0000000000408e23\n.text:0000000000408e28\n.text:0000000000408e2b\n.text:0000000000408e2e\n.text:0000000000408e34\n.text:0000000000408e40\n.text:0000000000408e43\n.text:0000000000408e48\n.text:0000000000408e4b\n.text:0000000000408e4d\n.text:0000000000408e50\n.text:0000000000408e52\n.text:0000000000408e54\n.text:0000000000408e56\n.text:0000000000408e5b\n.text:0000000000408e5d\n.text:0000000000408e60\n.text:0000000000408e65\n.text:0000000000408e67\n.text:0000000000408e6c\n.text:0000000000408e6f\n.text:0000000000408e74\n.text:0000000000408e77\n.text:0000000000408e7c\n.text:0000000000408e81\n.text:0000000000408e84\n.text:0000000000408e86\n.text:0000000000408e8b\n.text:0000000000408e8d\n.text:0000000000408e93\n.text:0000000000408e96\n.text:0000000000408e9b\n.text:0000000000408ea2\n.text:0000000000408ea5\n.text:0000000000408eac\n.text:0000000000408ead\n.text:0000000000408eaf\n.text:0000000000408eb1\n.text:0000000000408eb3\n.text:0000000000408eb5\n.text:0000000000408eb6\n'
p552
tp553
sS'fstatfs'
p554
(S'\n__stdcall fstatfs(int __fildes, statfs * __buf)\n'
p555
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fstatfs(int __fildes,statfs *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fstatfs_0060e208)();\u000a  return iVar1;\u000a}\u000a\u000a
p556
S'JMP qword ptr [0x0060e208]\n'
p557
S'ff 25 d2 c6 20 00\n'
p558
S'.plt:0000000000401b30\n'
p559
tp560
sS'nl_langinfo'
p561
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p562
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060e190)();\u000a  return pcVar1;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x0060e190]\n'
p564
S'ff 25 4a c7 20 00\n'
p565
S'.plt:0000000000401a40\n'
p566
tp567
sS'x2realloc'
p568
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p569
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p570
S'MOV EDX,0x1\nJMP 0x00405590\n'
p571
S'ba 01 00 00 00\neb 89\n'
p572
S'.text:0000000000405600\n.text:0000000000405605\n'
p573
tp574
sS'strlen'
p575
(S'\n__stdcall strlen(char * __s)\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060e0b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x0060e0b0]\n'
p578
S'ff 25 2a c8 20 00\n'
p579
S'.plt:0000000000401880\n'
p580
tp581
sS'set_stat_type'
p582
(S'\n__stdcall set_stat_type(stat * st)\n'
p583
V\u000avoid set_stat_type(stat *st)\u000a\u000a{\u000a  __mode_t _Var1;\u000a  int in_ESI;\u000a  \u000a  _Var1 = 0;\u000a  if (in_ESI - 1U < 0xc) {\u000a    _Var1 = *(__mode_t *)(&DAT_0040b0b0 + (long)(int)(in_ESI - 1U) * 4);\u000a  }\u000a  st->st_mode = _Var1;\u000a  return;\u000a}\u000a\u000a
p584
S'DEC ESI\nXOR EAX,EAX\nCMP ESI,0xb\nJA 0x00407683\nMOVSXD RAX,ESI\nMOV EAX,dword ptr [0x40b0b0 + RAX*0x4]\nMOV dword ptr [RDI + 0x18],EAX\nRET\n'
p585
S'ff ce\n31 c0\n83 fe 0b\n77 0a\n48 63 c6\n8b 04 85 b0 b0 40 00\n89 47 18\nc3\n'
p586
S'.text:0000000000407670\n.text:0000000000407672\n.text:0000000000407674\n.text:0000000000407677\n.text:0000000000407679\n.text:000000000040767c\n.text:0000000000407683\n.text:0000000000407686\n'
p587
tp588
sS'memcmp'
p589
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p590
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060e120)();\u000a  return iVar1;\u000a}\u000a\u000a
p591
S'JMP qword ptr [0x0060e120]\n'
p592
S'ff 25 ba c7 20 00\n'
p593
S'.plt:0000000000401960\n'
p594
tp595
sS'fts_compare_ino'
p596
(S'\n__stdcall fts_compare_ino(_ftsent * * a, _ftsent * * b)\n'
p597
V\u000aint fts_compare_ino(_ftsent **a,_ftsent **b)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  uint uVar3;\u000a  \u000a  uVar1 = (*a)->fts_statp[0].st_ino;\u000a  uVar2 = (*b)->fts_statp[0].st_ino;\u000a  uVar3 = 0xffffffff;\u000a  if (uVar2 <= uVar1) {\u000a    uVar3 = -(uint)(uVar2 < uVar1) & 1;\u000a  }\u000a  return (int)uVar3;\u000a}\u000a\u000a
p598
S'MOV RAX,qword ptr [RDI]\nMOV RAX,qword ptr [0x80 + RAX]\nMOV RCX,qword ptr [RSI]\nMOV RCX,qword ptr [0x80 + RCX]\nCMP RCX,RAX\nSBB EDX,EDX\nAND EDX,0x1\nCMP RAX,RCX\nMOV EAX,0xffffffff\nCMOVNC EAX,EDX\nRET\n'
p599
S'48 8b 07\n48 8b 80 80 00 00 00\n48 8b 0e\n48 8b 89 80 00 00 00\n48 39 c1\n19 d2\n83 e2 01\n48 39 c8\nb8 ff ff ff ff\n0f 43 c2\nc3\n'
p600
S'.text:0000000000407750\n.text:0000000000407753\n.text:000000000040775a\n.text:000000000040775d\n.text:0000000000407764\n.text:0000000000407767\n.text:0000000000407769\n.text:000000000040776c\n.text:000000000040776f\n.text:0000000000407774\n.text:0000000000407777\n'
p601
tp602
sS'hash_free'
p603
(S'\n__stdcall hash_free(Hash_table * table)\n'
p604
V\u000avoid hash_free(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *__ptr;\u000a  hash_entry *__ptr_00;\u000a  \u000a  if (((table->data_freer != (void (*)(void *))0x0) && (table->n_entries != 0)) &&\u000a     (__ptr_00 = table->bucket, __ptr_00 < table->bucket_limit)) {\u000a    do {\u000a      __ptr = __ptr_00;\u000a      if (__ptr_00->data != (void *)0x0) {\u000a        while (__ptr != (hash_entry *)0x0) {\u000a          (*table->data_freer)(__ptr->data);\u000a          __ptr = __ptr->next;\u000a        }\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->bucket;\u000a  if (__ptr_00 < table->bucket_limit) {\u000a    do {\u000a      __ptr = __ptr_00->next;\u000a      while (__ptr != (hash_entry *)0x0) {\u000a        phVar1 = __ptr->next;\u000a        free(__ptr);\u000a        __ptr = phVar1;\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->free_entry_list;\u000a  while (__ptr_00 != (hash_entry *)0x0) {\u000a    __ptr = __ptr_00->next;\u000a    free(__ptr_00);\u000a    __ptr_00 = __ptr;\u000a  }\u000a  free(table->bucket);\u000a  free(table);\u000a  return;\u000a}\u000a\u000a
p605
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x00408292\nCMP qword ptr [R15 + 0x20],0x0\nJZ 0x00408292\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x0040826a\nJMP 0x00408292\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00408292\nCMP qword ptr [R14],0x0\nJZ 0x00408260\nTEST R14,R14\nJZ 0x00408260\nMOV RBX,R14\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX]\nCALL qword ptr [R15 + 0x40]\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00408280\nJMP 0x00408260\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x004082aa\nJMP 0x004082d3\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x004082d3\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x004082a0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00401760\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x004082c0\nJMP 0x004082a0\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x004082f1\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00401760\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x004082e0\nMOV RDI,qword ptr [R15]\nCALL 0x00401760\nMOV RDI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x00401760\n'
p606
S'41 57\n41 56\n53\n49 89 ff\n49 83 7f 40 00\n74 53\n49 83 7f 20 00\n74 4c\n4d 8b 37\n4d 3b 77 08\n72 1b\neb 41\n49 83 c6 10\n4d 3b 77 08\n73 28\n49 83 3e 00\n74 f0\n4d 85 f6\n74 eb\n4c 89 f3\n0f 1f 84 00 00 00 00 00\n48 8b 3b\n41 ff 57 40\n48 8b 5b 08\n48 85 db\n75 f0\neb ce\n4d 8b 37\n4d 3b 77 08\n72 0f\neb 36\n49 83 c6 10\n4d 3b 77 08\n73 29\n49 8b 7e 08\n48 85 ff\n74 ed\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 5f 08\ne8 97 94 ff ff\n48 85 db\n48 89 df\n75 ef\neb cd\n49 8b 7f 48\n48 85 ff\n74 15\n0f 1f 40 00\n48 8b 5f 08\ne8 77 94 ff ff\n48 85 db\n48 89 df\n75 ef\n49 8b 3f\ne8 67 94 ff ff\n4c 89 ff\n5b\n41 5e\n41 5f\ne9 5a 94 ff ff\n'
p607
S'.text:0000000000408230\n.text:0000000000408232\n.text:0000000000408234\n.text:0000000000408235\n.text:0000000000408238\n.text:000000000040823d\n.text:000000000040823f\n.text:0000000000408244\n.text:0000000000408246\n.text:0000000000408249\n.text:000000000040824d\n.text:000000000040824f\n.text:0000000000408260\n.text:0000000000408264\n.text:0000000000408268\n.text:000000000040826a\n.text:000000000040826e\n.text:0000000000408270\n.text:0000000000408273\n.text:0000000000408275\n.text:0000000000408278\n.text:0000000000408280\n.text:0000000000408283\n.text:0000000000408287\n.text:000000000040828b\n.text:000000000040828e\n.text:0000000000408290\n.text:0000000000408292\n.text:0000000000408295\n.text:0000000000408299\n.text:000000000040829b\n.text:00000000004082a0\n.text:00000000004082a4\n.text:00000000004082a8\n.text:00000000004082aa\n.text:00000000004082ae\n.text:00000000004082b1\n.text:00000000004082b3\n.text:00000000004082c0\n.text:00000000004082c4\n.text:00000000004082c9\n.text:00000000004082cc\n.text:00000000004082cf\n.text:00000000004082d1\n.text:00000000004082d3\n.text:00000000004082d7\n.text:00000000004082da\n.text:00000000004082dc\n.text:00000000004082e0\n.text:00000000004082e4\n.text:00000000004082e9\n.text:00000000004082ec\n.text:00000000004082ef\n.text:00000000004082f1\n.text:00000000004082f4\n.text:00000000004082f9\n.text:00000000004082fc\n.text:00000000004082fd\n.text:00000000004082ff\n.text:0000000000408301\n'
p608
tp609
sS'quotearg_n_style_mem'
p610
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p611
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p612
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004048a0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404670\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p613
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p614
S'.text:0000000000404900\n.text:0000000000404901\n.text:0000000000404903\n.text:0000000000404905\n.text:0000000000404906\n.text:000000000040490a\n.text:000000000040490d\n.text:0000000000404910\n.text:0000000000404912\n.text:0000000000404915\n.text:0000000000404918\n.text:000000000040491d\n.text:000000000040491f\n.text:0000000000404922\n.text:0000000000404925\n.text:0000000000404928\n.text:000000000040492d\n.text:0000000000404931\n.text:0000000000404932\n.text:0000000000404934\n.text:0000000000404936\n.text:0000000000404937\n'
p615
tp616
sS'xfts_open'
p617
(S'\n__stdcall xfts_open(char * * argv, anon_subr_int_FTSENT_ptr_ptr_FTSENT_ptr_ptr * compar)\n'
p618
V\u000aFTS * xfts_open(char **argv,int (*compar)(FTSENT **,FTSENT **))\u000a\u000a{\u000a  FTS *pFVar1;\u000a  int *piVar2;\u000a  \u000a  pFVar1 = fts_open(argv,(int (*)(FTSENT **,FTSENT **))(ulong)((uint)compar | 0x200));\u000a  if (pFVar1 != (FTS *)0x0) {\u000a    return pFVar1;\u000a  }\u000a  piVar2 = __errno_location();\u000a  if (*piVar2 == 0x16) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("errno != EINVAL","lib/xfts.c",0x29,\u000a                  "FTS *xfts_open(char *const *, int, int (*)(const FTSENT **, const FTSENT **))");\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p619
S'PUSH RAX\nOR ESI,0x200\nCALL 0x004058f0\nTEST RAX,RAX\nJZ 0x004056f3\nPOP RCX\nRET\nCALL 0x00401780\nCMP dword ptr [RAX],0x16\nJNZ 0x00405716\nMOV EDI,0x40b040\nMOV ESI,0x40b050\nMOV EDX,0x29\nMOV ECX,0x40b05b\nCALL 0x00401900\nCALL 0x004056b0\n'
p620
S'50\n81 ce 00 02 00 00\ne8 04 02 00 00\n48 85 c0\n74 02\n59\nc3\ne8 88 c0 ff ff\n83 38 16\n75 19\nbf 40 b0 40 00\nbe 50 b0 40 00\nba 29 00 00 00\nb9 5b b0 40 00\ne8 ea c1 ff ff\ne8 95 ff ff ff\n'
p621
S'.text:00000000004056e0\n.text:00000000004056e1\n.text:00000000004056e7\n.text:00000000004056ec\n.text:00000000004056ef\n.text:00000000004056f1\n.text:00000000004056f2\n.text:00000000004056f3\n.text:00000000004056f8\n.text:00000000004056fb\n.text:00000000004056fd\n.text:0000000000405702\n.text:0000000000405707\n.text:000000000040570c\n.text:0000000000405711\n.text:0000000000405716\n'
p622
tp623
sS'_exit'
p624
(S'\n__stdcall _exit(int __status)\n'
p625
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060e040)();\u000a  return;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x0060e040]\n'
p627
S'ff 25 9a c8 20 00\n'
p628
S'.plt:00000000004017a0\n'
p629
tp630
sS'free_entry'
p631
(S'\n__stdcall free_entry(Hash_table * table, hash_entry * entry)\n'
p632
V\u000avoid free_entry(Hash_table *table,hash_entry *entry)\u000a\u000a{\u000a  entry->data = (void *)0x0;\u000a  entry->next = table->free_entry_list;\u000a  table->free_entry_list = entry;\u000a  return;\u000a}\u000a\u000a
p633
S'MOV qword ptr [RSI],0x0\nMOV RAX,qword ptr [RDI + 0x48]\nMOV qword ptr [RSI + 0x8],RAX\nMOV qword ptr [RDI + 0x48],RSI\nRET\n'
p634
S'48 c7 06 00 00 00 00\n48 8b 47 48\n48 89 46 08\n48 89 77 48\nc3\n'
p635
S'.text:0000000000408ac0\n.text:0000000000408ac7\n.text:0000000000408acb\n.text:0000000000408acf\n.text:0000000000408ad3\n'
p636
tp637
sS'argmatch_valid'
p638
(S'\n__stdcall argmatch_valid(char * * arglist, char * vallist, size_t valsize)\n'
p639
V\u000avoid argmatch_valid(char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  char *__s1;\u000a  long lVar3;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments are:",5);\u000a  fputs_unlocked(__s,stderr);\u000a  __s = *arglist;\u000a  if (__s != (char *)0x0) {\u000a    __s1 = (char *)0x0;\u000a    lVar3 = 0;\u000a    do {\u000a      pFVar1 = stderr;\u000a      if (lVar3 == 0) {\u000aLAB_00403227:\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,"\u005cn  - %s",__s);\u000a        __s1 = vallist;\u000a      }\u000a      else {\u000a        iVar2 = memcmp(__s1,vallist,valsize);\u000a        if (iVar2 != 0) goto LAB_00403227;\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,&DAT_0040a647,__s);\u000a      }\u000a      __s = arglist[lVar3 + 1];\u000a      lVar3 = lVar3 + 1;\u000a      vallist = vallist + valsize;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  (*(code *)PTR_putc_unlocked_0060e178)(10,stderr);\u000a  return;\u000a}\u000a\u000a
p640
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R13,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x40a62a\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x0060e320]\nMOV RDI,RAX\nCALL 0x00401970\nMOV qword ptr [RSP],RBX\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nMOV R12,qword ptr [0x0060e320]\nJZ 0x0040328a\nXOR EBP,EBP\nXOR R15D,R15D\nTEST R15,R15\nJZ 0x00403227\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,R14\nCALL 0x00401960\nTEST EAX,EAX\nJZ 0x00403250\nMOV RDI,RBX\nCALL 0x00404b60\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40a63f\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401b80\nMOV RBP,R13\nJMP 0x0040326f\nMOV RDI,RBX\nCALL 0x00404b60\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40a647\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x00401b80\nMOV RAX,qword ptr [RSP]\nMOV RBX,qword ptr [RAX + R15*0x8 + 0x8]\nINC R15\nMOV R12,qword ptr [0x0060e320]\nADD R13,R14\nTEST RBX,RBX\nJNZ 0x00403210\nMOV EDI,0xa\nMOV RSI,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401a10\n'
p641
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f5\n48 89 fb\n31 ff\nbe 2a a6 40 00\nba 05 00 00 00\ne8 7b e6 ff ff\n48 8b 35 34 b1 20 00\n48 89 c7\ne8 7c e7 ff ff\n48 89 1c 24\n48 8b 1b\n48 85 db\n4c 8b 25 1b b1 20 00\n0f 84 7f 00 00 00\n31 ed\n45 31 ff\n4d 85 ff\n74 12\n48 89 ef\n4c 89 ee\n4c 89 f2\ne8 3d e7 ff ff\n85 c0\n74 29\n48 89 df\ne8 31 19 00 00\n48 89 c1\nbe 01 00 00 00\nba 3f a6 40 00\n31 c0\n4c 89 e7\ne8 3a e9 ff ff\n4c 89 ed\neb 24\n48 89 df\ne8 08 19 00 00\n48 89 c1\nbe 01 00 00 00\nba 47 a6 40 00\n31 c0\n4c 89 e7\ne8 11 e9 ff ff\n48 8b 04 24\n4a 8b 5c f8 08\n49 ff c7\n4c 8b 25 9e b0 20 00\n4d 01 f5\n48 85 db\n75 86\nbf 0a 00 00 00\n4c 89 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 6b e7 ff ff\n'
p642
S'.text:00000000004031c0\n.text:00000000004031c1\n.text:00000000004031c3\n.text:00000000004031c5\n.text:00000000004031c7\n.text:00000000004031c9\n.text:00000000004031ca\n.text:00000000004031cb\n.text:00000000004031ce\n.text:00000000004031d1\n.text:00000000004031d4\n.text:00000000004031d6\n.text:00000000004031db\n.text:00000000004031e0\n.text:00000000004031e5\n.text:00000000004031ec\n.text:00000000004031ef\n.text:00000000004031f4\n.text:00000000004031f8\n.text:00000000004031fb\n.text:00000000004031fe\n.text:0000000000403205\n.text:000000000040320b\n.text:000000000040320d\n.text:0000000000403210\n.text:0000000000403213\n.text:0000000000403215\n.text:0000000000403218\n.text:000000000040321b\n.text:000000000040321e\n.text:0000000000403223\n.text:0000000000403225\n.text:0000000000403227\n.text:000000000040322a\n.text:000000000040322f\n.text:0000000000403232\n.text:0000000000403237\n.text:000000000040323c\n.text:000000000040323e\n.text:0000000000403241\n.text:0000000000403246\n.text:0000000000403249\n.text:0000000000403250\n.text:0000000000403253\n.text:0000000000403258\n.text:000000000040325b\n.text:0000000000403260\n.text:0000000000403265\n.text:0000000000403267\n.text:000000000040326a\n.text:000000000040326f\n.text:0000000000403273\n.text:0000000000403278\n.text:000000000040327b\n.text:0000000000403282\n.text:0000000000403285\n.text:0000000000403288\n.text:000000000040328a\n.text:000000000040328f\n.text:0000000000403292\n.text:0000000000403296\n.text:0000000000403297\n.text:0000000000403299\n.text:000000000040329b\n.text:000000000040329d\n.text:000000000040329f\n.text:00000000004032a0\n'
p643
tp644
sS'unlinkat'
p645
(S'\n__stdcall unlinkat(int __fd, char * __name, int __flag)\n'
p646
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint unlinkat(int __fd,char *__name,int __flag)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_unlinkat_0060e058)();\u000a  return iVar1;\u000a}\u000a\u000a
p647
S'JMP qword ptr [0x0060e058]\n'
p648
S'ff 25 82 c8 20 00\n'
p649
S'.plt:00000000004017d0\n'
p650
tp651
sS'xrealloc'
p652
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p653
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p654
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00405577\nTEST RBX,RBX\nJNZ 0x00405577\nCALL 0x00401760\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401a90\nTEST RBX,RBX\nJZ 0x00405589\nTEST RAX,RAX\nJZ 0x0040558b\nPOP RBX\nRET\nCALL 0x004056b0\n'
p655
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 ed c1 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 11 c5 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p656
S'.text:0000000000405560\n.text:0000000000405561\n.text:0000000000405564\n.text:0000000000405567\n.text:0000000000405569\n.text:000000000040556c\n.text:000000000040556e\n.text:0000000000405573\n.text:0000000000405575\n.text:0000000000405576\n.text:0000000000405577\n.text:000000000040557a\n.text:000000000040557f\n.text:0000000000405582\n.text:0000000000405584\n.text:0000000000405587\n.text:0000000000405589\n.text:000000000040558a\n.text:000000000040558b\n'
p657
tp658
sS'hash_initialize'
p659
(S'\n__stdcall hash_initialize(size_t candidate, Hash_tuning * tuning, Hash_hasher * hasher, Hash_comparator * comparator, Hash_data_freer * data_freer)\n'
p660
V\u000aHash_table *\u000ahash_initialize(size_t candidate,Hash_tuning *tuning,size_t (*hasher)(void *,size_t),\u000a               _Bool (*comparator)(void *,void *),void (*data_freer)(void *))\u000a\u000a{\u000a  _Bool _Var1;\u000a  Hash_table *table;\u000a  size_t n;\u000a  hash_entry *phVar2;\u000a  code *pcVar3;\u000a  Hash_tuning *tuning_00;\u000a  code *pcVar4;\u000a  \u000a  pcVar3 = raw_hasher;\u000a  if (hasher != (size_t (*)(void *,size_t))0x0) {\u000a    pcVar3 = hasher;\u000a  }\u000a  pcVar4 = raw_comparator;\u000a  if (comparator != (_Bool (*)(void *,void *))0x0) {\u000a    pcVar4 = comparator;\u000a  }\u000a  table = (Hash_table *)malloc(0x50);\u000a  if (table != (Hash_table *)0x0) {\u000a    tuning_00 = &default_tuning;\u000a    if (tuning != (Hash_tuning *)0x0) {\u000a      tuning_00 = tuning;\u000a    }\u000a    table->tuning = tuning_00;\u000a    _Var1 = check_tuning(table);\u000a    if (_Var1 != false) {\u000a      n = compute_bucket_size(candidate,tuning_00);\u000a      table->n_buckets = n;\u000a      if (n != 0) {\u000a        phVar2 = (hash_entry *)rpl_calloc(n,0x10);\u000a        table->bucket = phVar2;\u000a        if (phVar2 != (hash_entry *)0x0) {\u000a          table->bucket_limit = phVar2 + table->n_buckets;\u000a          *(undefined4 *)&table->n_buckets_used = 0;\u000a          *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a          *(undefined4 *)&table->n_entries = 0;\u000a          *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a          table->hasher = pcVar3;\u000a          table->comparator = pcVar4;\u000a          table->data_freer = data_freer;\u000a          table->free_entry_list = (hash_entry *)0x0;\u000a          return table;\u000a        }\u000a      }\u000a    }\u000a    free(table);\u000a  }\u000a  return (Hash_table *)0x0;\u000a}\u000a\u000a
p661
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,R8\nMOV R12,RSI\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBP,0x408040\nCMOVNZ RBP,RDX\nTEST RCX,RCX\nMOV R14D,0x408060\nCMOVNZ R14,RCX\nMOV EDI,0x50\nCALL 0x00401a20\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408025\nMOV qword ptr [RSP],R13\nTEST R12,R12\nMOV R13D,0x40b4fc\nCMOVNZ R13,R12\nMOV qword ptr [RBX + 0x28],R13\nMOV RDI,RBX\nCALL 0x00408070\nTEST AL,AL\nJZ 0x0040801d\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x004080f0\nMOV qword ptr [RBX + 0x10],RAX\nTEST RAX,RAX\nJZ 0x0040801d\nMOV ESI,0x10\nMOV RDI,RAX\nCALL 0x004057b0\nMOV qword ptr [RBX],RAX\nTEST RAX,RAX\nJZ 0x0040801d\nMOV RCX,qword ptr [RBX + 0x10]\nSHL RCX,0x4\nADD RAX,RCX\nMOV qword ptr [RBX + 0x8],RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x18],XMM0\nMOV qword ptr [RBX + 0x30],RBP\nMOV qword ptr [RBX + 0x38],R14\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x40],RAX\nMOV qword ptr [RBX + 0x48],0x0\nJMP 0x00408027\nMOV RDI,RBX\nCALL 0x00401760\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p662
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 c5\n49 89 f4\n49 89 ff\n48 85 d2\nbd 40 80 40 00\n48 0f 45 ea\n48 85 c9\n41 be 60 80 40 00\n4c 0f 45 f1\nbf 50 00 00 00\ne8 89 9a ff ff\n48 89 c3\n48 85 db\n0f 84 82 00 00 00\n4c 89 2c 24\n4d 85 e4\n41 bd fc b4 40 00\n4d 0f 45 ec\n4c 89 6b 28\n48 89 df\ne8 b0 00 00 00\n84 c0\n74 59\n4c 89 ff\n4c 89 ee\ne8 21 01 00 00\n48 89 43 10\n48 85 c0\n74 45\nbe 10 00 00 00\n48 89 c7\ne8 cb d7 ff ff\n48 89 03\n48 85 c0\n74 30\n48 8b 4b 10\n48 c1 e1 04\n48 01 c8\n48 89 43 08\n0f 57 c0\n0f 11 43 18\n48 89 6b 30\n4c 89 73 38\n48 8b 04 24\n48 89 43 40\n48 c7 43 48 00 00 00 00\neb 0a\n48 89 df\ne8 3b 97 ff ff\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p663
S'.text:0000000000407f60\n.text:0000000000407f61\n.text:0000000000407f63\n.text:0000000000407f65\n.text:0000000000407f67\n.text:0000000000407f69\n.text:0000000000407f6a\n.text:0000000000407f6b\n.text:0000000000407f6e\n.text:0000000000407f71\n.text:0000000000407f74\n.text:0000000000407f77\n.text:0000000000407f7c\n.text:0000000000407f80\n.text:0000000000407f83\n.text:0000000000407f89\n.text:0000000000407f8d\n.text:0000000000407f92\n.text:0000000000407f97\n.text:0000000000407f9a\n.text:0000000000407f9d\n.text:0000000000407fa3\n.text:0000000000407fa7\n.text:0000000000407faa\n.text:0000000000407fb0\n.text:0000000000407fb4\n.text:0000000000407fb8\n.text:0000000000407fbb\n.text:0000000000407fc0\n.text:0000000000407fc2\n.text:0000000000407fc4\n.text:0000000000407fc7\n.text:0000000000407fca\n.text:0000000000407fcf\n.text:0000000000407fd3\n.text:0000000000407fd6\n.text:0000000000407fd8\n.text:0000000000407fdd\n.text:0000000000407fe0\n.text:0000000000407fe5\n.text:0000000000407fe8\n.text:0000000000407feb\n.text:0000000000407fed\n.text:0000000000407ff1\n.text:0000000000407ff5\n.text:0000000000407ff8\n.text:0000000000407ffc\n.text:0000000000407fff\n.text:0000000000408003\n.text:0000000000408007\n.text:000000000040800b\n.text:000000000040800f\n.text:0000000000408013\n.text:000000000040801b\n.text:000000000040801d\n.text:0000000000408020\n.text:0000000000408025\n.text:0000000000408027\n.text:000000000040802a\n.text:000000000040802e\n.text:000000000040802f\n.text:0000000000408031\n.text:0000000000408033\n.text:0000000000408035\n.text:0000000000408037\n.text:0000000000408038\n'
p664
tp665
sS'cycle_warning_required'
p666
(S'\n__stdcall cycle_warning_required(FTS * fts, FTSENT * ent)\n'
p667
V\u000a_Bool cycle_warning_required(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  _Bool _Var1;\u000a  uint uVar2;\u000a  \u000a  uVar2 = fts->fts_options & 0x11;\u000a  _Var1 = (_Bool)(uVar2 == 0x10);\u000a  if (uVar2 == 0x11) {\u000a    _Var1 = (_Bool)(ent->fts_level != 0);\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p668
S'MOV ECX,dword ptr [RDI + 0x48]\nAND ECX,0x11\nCMP ECX,0x10\nSETZ AL\nCMP ECX,0x11\nJNZ 0x0040573e\nCMP ECX,0x10\nJZ 0x0040573e\nCMP qword ptr [RSI + 0x58],0x0\nSETNZ AL\nRET\n'
p669
S'8b 4f 48\n83 e1 11\n83 f9 10\n0f 94 c0\n83 f9 11\n75 0d\n83 f9 10\n74 08\n48 83 7e 58 00\n0f 95 c0\nc3\n'
p670
S'.text:0000000000405720\n.text:0000000000405723\n.text:0000000000405726\n.text:0000000000405729\n.text:000000000040572c\n.text:000000000040572f\n.text:0000000000405731\n.text:0000000000405734\n.text:0000000000405736\n.text:000000000040573b\n.text:000000000040573e\n'
p671
tp672
sS'fts_set'
p673
(S'\n__stdcall fts_set(FTS * sp, FTSENT * p)\n'
p674
V\u000aint fts_set(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  int *piVar1;\u000a  uint in_EDX;\u000a  \u000a  if (4 < in_EDX) {\u000a    piVar1 = __errno_location();\u000a    *piVar1 = 0x16;\u000a    return 1;\u000a  }\u000a  p->fts_instr = (unsigned_short)in_EDX;\u000a  return 0;\u000a}\u000a\u000a
p675
S'CMP EDX,0x5\nJC 0x0040743b\nPUSH RAX\nCALL 0x00401780\nMOV dword ptr [RAX],0x16\nMOV EAX,0x1\nADD RSP,0x8\nRET\nMOV word ptr [RSI + 0x74],DX\nXOR EAX,EAX\nRET\n'
p676
S'83 fa 05\n72 16\n50\ne8 55 a3 ff ff\nc7 00 16 00 00 00\nb8 01 00 00 00\n48 83 c4 08\nc3\n66 89 56 74\n31 c0\nc3\n'
p677
S'.text:0000000000407420\n.text:0000000000407423\n.text:0000000000407425\n.text:0000000000407426\n.text:000000000040742b\n.text:0000000000407431\n.text:0000000000407436\n.text:000000000040743a\n.text:000000000040743b\n.text:000000000040743f\n.text:0000000000407441\n'
p678
tp679
sS'close_stdout'
p680
(S'\n__stdcall close_stdout()\n'
p681
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_004034b7;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,&DAT_0040a649,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_004034b7:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p682
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060e2e8]\nCALL 0x00407950\nTEST EAX,EAX\nJZ 0x004034b7\nCMP byte ptr [0x0060e350],0x0\nJZ 0x004034cc\nCALL 0x00401780\nCMP dword ptr [RAX],0x20\nJNZ 0x004034cc\nMOV RDI,qword ptr [0x0060e320]\nCALL 0x00407950\nTEST EAX,EAX\nJNZ 0x00403511\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40a666\nMOV EDX,0x5\nCALL 0x00401860\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060e348]\nCALL 0x00401780\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x0040351c\nXOR EDI,EDI\nMOV EDX,0x40a649\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401ae0\nMOV EDI,dword ptr [0x0060e270]\nCALL 0x004017a0\nMOV EDI,dword ptr [0x0060e270]\nCALL 0x004017a0\nMOV RDI,RBX\nCALL 0x00404a00\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40a65f\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401ae0\nMOV EDI,dword ptr [0x0060e270]\nCALL 0x004017a0\n'
p683
S'55\n41 56\n53\n48 8b 3d 4d ae 20 00\ne8 b0 44 00 00\n85 c0\n74 13\n80 3d a5 ae 20 00 00\n74 1f\ne8 ce e2 ff ff\n83 38 20\n75 15\n48 8b 3d 62 ae 20 00\ne8 8d 44 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 66 a6 40 00\nba 05 00 00 00\ne8 83 e3 ff ff\n49 89 c6\n48 8b 1d 61 ae 20 00\ne8 94 e2 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 49 a6 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 da e5 ff ff\n8b 3d 64 ad 20 00\ne8 8f e2 ff ff\n8b 3d 59 ad 20 00\ne8 84 e2 ff ff\n48 89 df\ne8 dc 14 00 00\n48 89 c1\n31 ff\nba 5f a6 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 a6 e5 ff ff\n8b 3d 30 ad 20 00\ne8 5b e2 ff ff\n'
p684
S'.text:0000000000403490\n.text:0000000000403491\n.text:0000000000403493\n.text:0000000000403494\n.text:000000000040349b\n.text:00000000004034a0\n.text:00000000004034a2\n.text:00000000004034a4\n.text:00000000004034ab\n.text:00000000004034ad\n.text:00000000004034b2\n.text:00000000004034b5\n.text:00000000004034b7\n.text:00000000004034be\n.text:00000000004034c3\n.text:00000000004034c5\n.text:00000000004034c7\n.text:00000000004034c8\n.text:00000000004034ca\n.text:00000000004034cb\n.text:00000000004034cc\n.text:00000000004034ce\n.text:00000000004034d3\n.text:00000000004034d8\n.text:00000000004034dd\n.text:00000000004034e0\n.text:00000000004034e7\n.text:00000000004034ec\n.text:00000000004034ef\n.text:00000000004034f1\n.text:00000000004034f3\n.text:00000000004034f5\n.text:00000000004034fa\n.text:00000000004034fc\n.text:00000000004034fe\n.text:0000000000403501\n.text:0000000000403506\n.text:000000000040350c\n.text:0000000000403511\n.text:0000000000403517\n.text:000000000040351c\n.text:000000000040351f\n.text:0000000000403524\n.text:0000000000403527\n.text:0000000000403529\n.text:000000000040352e\n.text:0000000000403530\n.text:0000000000403532\n.text:0000000000403535\n.text:000000000040353a\n.text:0000000000403540\n'
p685
tp686
sS'version_etc_ar'
p687
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p688
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p689
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00405340\nJMP 0x00404fd0\n'
p690
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p691
S'.text:0000000000405330\n.text:0000000000405337\n.text:0000000000405340\n.text:0000000000405346\n.text:000000000040534a\n.text:000000000040534c\n'
p692
tp693
sS'c_isxdigit'
p694
(S'\n__stdcall c_isxdigit()\n'
p695
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p696
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x004078bb\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p697
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p698
S'.text:00000000004078a0\n.text:00000000004078a3\n.text:00000000004078a6\n.text:00000000004078a8\n.text:00000000004078b2\n.text:00000000004078b4\n.text:00000000004078b7\n.text:00000000004078ba\n.text:00000000004078bb\n.text:00000000004078bd\n'
p699
tp700
sS'__libc_csu_fini'
p701
(S'\n__stdcall __libc_csu_fini()\n'
p702
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p703
S'RET\n'
p704
S'f3 c3\n'
p705
S'.text:0000000000409370\n'
p706
tp707
sS'abort'
p708
(S'\n__stdcall abort()\n'
p709
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060e028)();\u000a  return;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x0060e028]\n'
p711
S'ff 25 b2 c8 20 00\n'
p712
S'.plt:0000000000401770\n'
p713
tp714
sS'closedir'
p715
(S'\n__stdcall closedir(DIR * __dirp)\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint closedir(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_closedir_0060e118)();\u000a  return iVar1;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x0060e118]\n'
p718
S'ff 25 c2 c7 20 00\n'
p719
S'.plt:0000000000401950\n'
p720
tp721
sS'compute_bucket_size'
p722
(S'\n__stdcall compute_bucket_size(size_t candidate, Hash_tuning * tuning)\n'
p723
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000asize_t compute_bucket_size(size_t candidate,Hash_tuning *tuning)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  float fVar3;\u000a  \u000a  if (tuning->is_n_buckets == false) {\u000a    if ((long)candidate < 0) {\u000a      fVar3 = (float)((ulong)((uint)candidate & 1) | candidate >> 1);\u000a      fVar3 = fVar3 + fVar3;\u000a    }\u000a    else {\u000a      fVar3 = (float)candidate;\u000a    }\u000a    fVar3 = fVar3 / tuning->growth_threshold;\u000a    candidate = (long)fVar3;\u000a    if (DAT_0040b488 <= fVar3) {\u000a      candidate = (long)(fVar3 - DAT_0040b488) ^ 0x8000000000000000;\u000a    }\u000a    if (_DAT_0040b48c <= fVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  sVar1 = next_prime(candidate);\u000a  sVar2 = 0;\u000a  if (SUB168(ZEXT816(sVar1) * ZEXT816(8) >> 0x40,0) == 0) {\u000a    sVar2 = sVar1;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p724
S'CMP byte ptr [RSI + 0x10],0x0\nJNZ 0x00408152\nTEST RDI,RDI\nJS 0x00408102\nCVTSI2SS XMM0,RDI\nJMP 0x00408117\nMOV RAX,RDI\nSHR RAX,1\nAND EDI,0x1\nOR RDI,RAX\nCVTSI2SS XMM0,RDI\nADDSS XMM0,XMM0\nDIVSS XMM0,dword ptr [RSI + 0x8]\nMOVSS XMM1,dword ptr [0x0040b488]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RDI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RDI,RCX\nUCOMISS XMM0,dword ptr [0x0040b48c]\nJNC 0x00408171\nPUSH RAX\nCALL 0x004089f0\nMOV RSI,RAX\nMOV EDX,0x8\nXOR ECX,ECX\nMUL RDX\nCMOVNO RCX,RSI\nADD RSP,0x8\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\n'
p725
S'80 7e 10 00\n75 5c\n48 85 ff\n78 07\nf3 48 0f 2a c7\neb 15\n48 89 f8\n48 d1 e8\n83 e7 01\n48 09 c7\nf3 48 0f 2a c7\nf3 0f 58 c0\nf3 0f 5e 46 08\nf3 0f 10 0d 64 33 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f8\n0f 2e c1\n48 0f 43 f9\n0f 2e 05 3c 33 00 00\n73 1f\n50\ne8 98 08 00 00\n48 89 c6\nba 08 00 00 00\n31 c9\n48 f7 e2\n48 0f 41 ce\n48 83 c4 08\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n'
p726
S'.text:00000000004080f0\n.text:00000000004080f4\n.text:00000000004080f6\n.text:00000000004080f9\n.text:00000000004080fb\n.text:0000000000408100\n.text:0000000000408102\n.text:0000000000408105\n.text:0000000000408108\n.text:000000000040810b\n.text:000000000040810e\n.text:0000000000408113\n.text:0000000000408117\n.text:000000000040811c\n.text:0000000000408124\n.text:0000000000408127\n.text:000000000040812b\n.text:0000000000408130\n.text:000000000040813a\n.text:000000000040813d\n.text:0000000000408142\n.text:0000000000408145\n.text:0000000000408149\n.text:0000000000408150\n.text:0000000000408152\n.text:0000000000408153\n.text:0000000000408158\n.text:000000000040815b\n.text:0000000000408160\n.text:0000000000408162\n.text:0000000000408165\n.text:0000000000408169\n.text:000000000040816d\n.text:0000000000408170\n.text:0000000000408171\n.text:0000000000408173\n.text:0000000000408176\n'
p727
tp728
sS'select_plural'
p729
(S'\n__stdcall select_plural(uintmax_t n)\n'
p730
V\u000aulong select_plural(uintmax_t n)\u000a\u000a{\u000a  return n;\u000a}\u000a\u000a
p731
S'MOV RAX,RDI\nRET\n'
p732
S'48 89 f8\nc3\n'
p733
S'.text:0000000000402440\n.text:0000000000402443\n'
p734
tp735
sS'ignorable_missing'
p736
(S'\n__stdcall ignorable_missing(rm_options * x)\n'
p737
V\u000a_Bool ignorable_missing(rm_options *x)\u000a\u000a{\u000a  _Bool _Var1;\u000a  \u000a  if (x->ignore_missing_files != false) {\u000a    _Var1 = nonexistent_file_errno();\u000a    return _Var1;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p738
S'CMP byte ptr [RDI],0x0\nJZ 0x00403019\nMOV EDI,ESI\nJMP 0x00403020\nXOR EAX,EAX\nRET\n'
p739
S'80 3f 00\n74 04\n89 f7\neb 07\n31 c0\nc3\n'
p740
S'.text:0000000000403010\n.text:0000000000403013\n.text:0000000000403015\n.text:0000000000403017\n.text:0000000000403019\n.text:000000000040301b\n'
p741
tp742
sS'priv_set_remove_linkdir'
p743
(S'\n__stdcall priv_set_remove_linkdir()\n'
p744
V\u000aint priv_set_remove_linkdir(void)\u000a\u000a{\u000a  return -1;\u000a}\u000a\u000a
p745
S'MOV EAX,0xffffffff\nRET\n'
p746
S'b8 ff ff ff ff\nc3\n'
p747
S'.text:0000000000403650\n.text:0000000000403655\n'
p748
tp749
sS'version_etc'
p750
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p751
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p752
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00405402\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00405360\nADD RSP,0xd8\nRET\n'
p753
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p754
S'.text:00000000004053c0\n.text:00000000004053c7\n.text:00000000004053c9\n.text:00000000004053cb\n.text:00000000004053d0\n.text:00000000004053d5\n.text:00000000004053da\n.text:00000000004053e2\n.text:00000000004053ea\n.text:00000000004053f2\n.text:00000000004053fa\n.text:0000000000405402\n.text:0000000000405407\n.text:000000000040540c\n.text:0000000000405411\n.text:0000000000405416\n.text:000000000040541e\n.text:0000000000405423\n.text:000000000040542b\n.text:0000000000405432\n.text:0000000000405435\n.text:000000000040543a\n.text:0000000000405441\n'
p755
tp756
sS'freadahead'
p757
(S'\n__stdcall freadahead(FILE * fp)\n'
p758
V\u000asize_t freadahead(FILE *fp)\u000a\u000a{\u000a  if (fp->_IO_write_base <= fp->_IO_write_ptr && fp->_IO_write_ptr != fp->_IO_write_base) {\u000a    return 0;\u000a  }\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return (size_t)(fp->_IO_read_end + -(long)fp->_IO_read_ptr);\u000a  }\u000a  return (size_t)(fp->_IO_read_end + -(long)fp->_IO_read_ptr +\u000a                 (long)(fp->_IO_save_end + -(long)fp->_IO_save_base));\u000a}\u000a\u000a
p759
S'MOV RAX,qword ptr [RDI + 0x28]\nCMP RAX,qword ptr [RDI + 0x20]\nJBE 0x0040585d\nXOR EAX,EAX\nRET\nMOV RAX,qword ptr [RDI + 0x10]\nSUB RAX,qword ptr [RDI + 0x8]\nTEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405871\nXOR ECX,ECX\nADD RAX,RCX\nRET\nMOV RCX,qword ptr [RDI + 0x58]\nSUB RCX,qword ptr [RDI + 0x48]\nADD RAX,RCX\nRET\n'
p760
S'48 8b 47 28\n48 3b 47 20\n76 03\n31 c0\nc3\n48 8b 47 10\n48 2b 47 08\nf6 47 01 01\n75 06\n31 c9\n48 01 c8\nc3\n48 8b 4f 58\n48 2b 4f 48\n48 01 c8\nc3\n'
p761
S'.text:0000000000405850\n.text:0000000000405854\n.text:0000000000405858\n.text:000000000040585a\n.text:000000000040585c\n.text:000000000040585d\n.text:0000000000405861\n.text:0000000000405865\n.text:0000000000405869\n.text:000000000040586b\n.text:000000000040586d\n.text:0000000000405870\n.text:0000000000405871\n.text:0000000000405875\n.text:0000000000405879\n.text:000000000040587c\n'
p762
tp763
sS'hash_rehash'
p764
(S'\n__stdcall hash_rehash(Hash_table * table, size_t candidate)\n'
p765
V\u000a_Bool hash_rehash(Hash_table *table,size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *local_68;\u000a  hash_entry *local_60;\u000a  size_t local_58;\u000a  undefined4 local_50;\u000a  undefined4 uStack76;\u000a  undefined4 uStack72;\u000a  undefined4 uStack68;\u000a  Hash_tuning *local_40;\u000a  size_t (*local_38)(void *,size_t);\u000a  _Bool (*local_30)(void *,void *);\u000a  void (*local_28)(void *);\u000a  hash_entry *local_20;\u000a  \u000a  local_58 = compute_bucket_size(candidate,table->tuning);\u000a  if (local_58 != 0) {\u000a    if (local_58 == table->n_buckets) {\u000a      return true;\u000a    }\u000a    local_68 = (hash_entry *)rpl_calloc(local_58,0x10);\u000a    if (local_68 != (hash_entry *)0x0) {\u000a      local_60 = local_68 + local_58;\u000a      local_50 = 0;\u000a      uStack76 = 0;\u000a      uStack72 = 0;\u000a      uStack68 = 0;\u000a      local_40 = table->tuning;\u000a      local_38 = table->hasher;\u000a      local_30 = table->comparator;\u000a      local_28 = table->data_freer;\u000a      local_20 = table->free_entry_list;\u000a      _Var1 = transfer_entries((Hash_table *)&local_68,table);\u000a      if (_Var1 != false) {\u000a        free(table->bucket);\u000a        table->bucket = local_68;\u000a        table->bucket_limit = local_60;\u000a        table->n_buckets = local_58;\u000a        table->n_buckets_used = CONCAT44(uStack76,local_50);\u000a        table->free_entry_list = local_20;\u000a        return true;\u000a      }\u000a      table->free_entry_list = local_20;\u000a      _Var1 = transfer_entries(table,(Hash_table *)&local_68);\u000a      if ((_Var1 == false) ||\u000a         (_Var1 = transfer_entries(table,(Hash_table *)&local_68), _Var1 == false)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      free(local_68);\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p766
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x50\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x28]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL 0x004080f0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00408421\nMOV R14B,0x1\nCMP RBP,qword ptr [RBX + 0x10]\nJZ 0x00408424\nMOV ESI,0x10\nMOV RDI,RBP\nCALL 0x004057b0\nMOV qword ptr [RSP],RAX\nTEST RAX,RAX\nJZ 0x00408421\nMOV qword ptr [RSP + 0x10],RBP\nSHL RBP,0x4\nADD RBP,qword ptr [RSP]\nMOV qword ptr [RSP + 0x8],RBP\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RSP + 0x18],XMM0\nMOV RAX,qword ptr [RBX + 0x28]\nMOV qword ptr [RSP + 0x28],RAX\nMOV RAX,qword ptr [RBX + 0x30]\nMOV qword ptr [RSP + 0x30],RAX\nMOV RAX,qword ptr [RBX + 0x38]\nMOV qword ptr [RSP + 0x38],RAX\nMOV RAX,qword ptr [RBX + 0x40]\nMOV qword ptr [RSP + 0x40],RAX\nMOV RAX,qword ptr [RBX + 0x48]\nMOV qword ptr [RSP + 0x48],RAX\nMOV RDI,RSP\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x00408440\nTEST AL,AL\nJZ 0x004083ea\nMOV RDI,qword ptr [RBX]\nCALL 0x00401760\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RBX + 0x10],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX + 0x18],RAX\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nJMP 0x00408424\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nMOV RSI,RSP\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00408440\nTEST AL,AL\nJZ 0x00408430\nMOV RSI,RSP\nXOR EDX,EDX\nMOV RDI,RBX\nCALL 0x00408440\nTEST AL,AL\nJZ 0x00408430\nMOV RDI,qword ptr [RSP]\nCALL 0x00401760\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x50\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x00401770\n'
p767
S'55\n41 56\n53\n48 83 ec 50\n48 89 fb\n48 8b 43 28\n48 89 f7\n48 89 c6\ne8 c6 fd ff ff\n48 89 c5\n48 85 ed\n0f 84 eb 00 00 00\n41 b6 01\n48 3b 6b 10\n0f 84 e1 00 00 00\nbe 10 00 00 00\n48 89 ef\ne8 60 d4 ff ff\n48 89 04 24\n48 85 c0\n0f 84 c4 00 00 00\n48 89 6c 24 10\n48 c1 e5 04\n48 03 2c 24\n48 89 6c 24 08\n0f 57 c0\n0f 11 44 24 18\n48 8b 43 28\n48 89 44 24 28\n48 8b 43 30\n48 89 44 24 30\n48 8b 43 38\n48 89 44 24 38\n48 8b 43 40\n48 89 44 24 40\n48 8b 43 48\n48 89 44 24 48\n48 89 e7\n31 d2\n48 89 de\ne8 8f 00 00 00\n84 c0\n74 35\n48 8b 3b\ne8 a3 93 ff ff\n48 8b 04 24\n48 89 03\n48 8b 44 24 08\n48 89 43 08\n48 8b 44 24 10\n48 89 43 10\n48 8b 44 24 18\n48 89 43 18\n48 8b 44 24 48\n48 89 43 48\neb 3a\n48 8b 44 24 48\n48 89 43 48\n48 89 e6\nba 01 00 00 00\n48 89 df\ne8 3d 00 00 00\n84 c0\n74 29\n48 89 e6\n31 d2\n48 89 df\ne8 2c 00 00 00\n84 c0\n74 18\n48 8b 3c 24\ne8 3f 93 ff ff\n45 31 f6\n44 89 f0\n48 83 c4 50\n5b\n41 5e\n5d\nc3\ne8 3b 93 ff ff\n'
p768
S'.text:0000000000408310\n.text:0000000000408311\n.text:0000000000408313\n.text:0000000000408314\n.text:0000000000408318\n.text:000000000040831b\n.text:000000000040831f\n.text:0000000000408322\n.text:0000000000408325\n.text:000000000040832a\n.text:000000000040832d\n.text:0000000000408330\n.text:0000000000408336\n.text:0000000000408339\n.text:000000000040833d\n.text:0000000000408343\n.text:0000000000408348\n.text:000000000040834b\n.text:0000000000408350\n.text:0000000000408354\n.text:0000000000408357\n.text:000000000040835d\n.text:0000000000408362\n.text:0000000000408366\n.text:000000000040836a\n.text:000000000040836f\n.text:0000000000408372\n.text:0000000000408377\n.text:000000000040837b\n.text:0000000000408380\n.text:0000000000408384\n.text:0000000000408389\n.text:000000000040838d\n.text:0000000000408392\n.text:0000000000408396\n.text:000000000040839b\n.text:000000000040839f\n.text:00000000004083a4\n.text:00000000004083a7\n.text:00000000004083a9\n.text:00000000004083ac\n.text:00000000004083b1\n.text:00000000004083b3\n.text:00000000004083b5\n.text:00000000004083b8\n.text:00000000004083bd\n.text:00000000004083c1\n.text:00000000004083c4\n.text:00000000004083c9\n.text:00000000004083cd\n.text:00000000004083d2\n.text:00000000004083d6\n.text:00000000004083db\n.text:00000000004083df\n.text:00000000004083e4\n.text:00000000004083e8\n.text:00000000004083ea\n.text:00000000004083ef\n.text:00000000004083f3\n.text:00000000004083f6\n.text:00000000004083fb\n.text:00000000004083fe\n.text:0000000000408403\n.text:0000000000408405\n.text:0000000000408407\n.text:000000000040840a\n.text:000000000040840c\n.text:000000000040840f\n.text:0000000000408414\n.text:0000000000408416\n.text:0000000000408418\n.text:000000000040841c\n.text:0000000000408421\n.text:0000000000408424\n.text:0000000000408427\n.text:000000000040842b\n.text:000000000040842c\n.text:000000000040842e\n.text:000000000040842f\n.text:0000000000408430\n'
p769
tp770
sS'nonexistent_file_errno'
p771
(S'\n__stdcall nonexistent_file_errno()\n'
p772
V\u000a_Bool nonexistent_file_errno(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if (((0x16 < in_EDI) || ((0x500004U >> (in_EDI & 0x1f) & 1) == 0)) && (in_EDI != 0x54)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p773
S'MOV AL,0x1\nCMP EDI,0x16\nJA 0x00403031\nMOV ECX,0x500004\nBT ECX,EDI\nJC 0x00403036\nCMP EDI,0x54\nJNZ 0x00403037\nRET\nXOR EAX,EAX\nRET\n'
p774
S'b0 01\n83 ff 16\n77 0a\nb9 04 00 50 00\n0f a3 f9\n72 05\n83 ff 54\n75 01\nc3\n31 c0\nc3\n'
p775
S'.text:0000000000403020\n.text:0000000000403022\n.text:0000000000403025\n.text:0000000000403027\n.text:000000000040302c\n.text:000000000040302f\n.text:0000000000403031\n.text:0000000000403034\n.text:0000000000403036\n.text:0000000000403037\n.text:0000000000403039\n'
p776
tp777
sS'lseek'
p778
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p779
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060e0e8)();\u000a  return _Var1;\u000a}\u000a\u000a
p780
S'JMP qword ptr [0x0060e0e8]\n'
p781
S'ff 25 f2 c7 20 00\n'
p782
S'.plt:00000000004018f0\n'
p783
tp784
sS'AD_compare'
p785
(S'\n__stdcall AD_compare(void * x, void * y)\n'
p786
V\u000a_Bool AD_compare(void *x,void *y)\u000a\u000a{\u000a  if (*(long *)((long)x + 8) == *(long *)((long)y + 8)) {\u000a    return (_Bool)(*(long *)x == *(long *)y);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p787
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,qword ptr [RSI + 0x8]\nJNZ 0x004075a4\nMOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nSETZ AL\nRET\nXOR EAX,EAX\nRET\n'
p788
S'48 8b 47 08\n48 3b 46 08\n75 0a\n48 8b 07\n48 3b 06\n0f 94 c0\nc3\n31 c0\nc3\n'
p789
S'.text:0000000000407590\n.text:0000000000407594\n.text:0000000000407598\n.text:000000000040759a\n.text:000000000040759d\n.text:00000000004075a0\n.text:00000000004075a3\n.text:00000000004075a4\n.text:00000000004075a6\n'
p790
tp791
sS'hash_get_first'
p792
(S'\n__stdcall hash_get_first(Hash_table * table)\n'
p793
V\u000avoid * hash_get_first(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  if (table->n_entries == 0) {\u000a    return (void *)0x0;\u000a  }\u000a  phVar1 = table->bucket;\u000a  if (phVar1 < table->bucket_limit) {\u000a    do {\u000a      if (phVar1->data != (void *)0x0) {\u000a        return phVar1->data;\u000a      }\u000a      phVar1 = phVar1 + 1;\u000a    } while (phVar1 < table->bucket_limit);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p794
S'CMP qword ptr [RDI + 0x20],0x0\nJZ 0x00407db3\nMOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJC 0x00407daa\nJMP 0x00407db6\nADD RCX,0x10\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x00407db6\nMOV RAX,qword ptr [RCX]\nTEST RAX,RAX\nJZ 0x00407da0\nRET\nXOR EAX,EAX\nRET\nPUSH RAX\nCALL 0x00401770\n'
p795
S'48 83 7f 20 00\n74 2c\n48 8b 0f\n48 3b 4f 08\n72 1a\neb 24\n48 83 c1 10\n48 3b 4f 08\n73 0c\n48 8b 01\n48 85 c0\n74 ee\nc3\n31 c0\nc3\n50\ne8 b4 99 ff ff\n'
p796
S'.text:0000000000407d80\n.text:0000000000407d85\n.text:0000000000407d87\n.text:0000000000407d8a\n.text:0000000000407d8e\n.text:0000000000407d90\n.text:0000000000407da0\n.text:0000000000407da4\n.text:0000000000407da8\n.text:0000000000407daa\n.text:0000000000407dad\n.text:0000000000407db0\n.text:0000000000407db2\n.text:0000000000407db3\n.text:0000000000407db5\n.text:0000000000407db6\n.text:0000000000407db7\n'
p797
tp798
sS'hash_get_n_entries'
p799
(S'\n__stdcall hash_get_n_entries(Hash_table * table)\n'
p800
V\u000asize_t hash_get_n_entries(Hash_table *table)\u000a\u000a{\u000a  return table->n_entries;\u000a}\u000a\u000a
p801
S'MOV RAX,qword ptr [RDI + 0x20]\nRET\n'
p802
S'48 8b 47 20\nc3\n'
p803
S'.text:0000000000407b50\n.text:0000000000407b54\n'
p804
tp805
sS'quotearg_n_mem'
p806
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p807
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p808
S'MOV ECX,0x60e360\nJMP 0x00404670\n'
p809
S'b9 60 e3 60 00\ne9 36 fe ff ff\n'
p810
S'.text:0000000000404830\n.text:0000000000404835\n'
p811
tp812
sS'__printf_chk'
p813
(S'\n__stdcall __printf_chk()\n'
p814
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060e1d0)();\u000a  return;\u000a}\u000a\u000a
p815
S'JMP qword ptr [0x0060e1d0]\n'
p816
S'ff 25 0a c7 20 00\n'
p817
S'.plt:0000000000401ac0\n'
p818
tp819
sS'hash_lookup'
p820
(S'\n__stdcall hash_lookup(Hash_table * table, void * entry)\n'
p821
V\u000avoid * hash_lookup(Hash_table *table,void *entry)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *phVar2;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  if (phVar2->data != (void *)0x0) {\u000a    while (phVar2 != (hash_entry *)0x0) {\u000a      if ((phVar2->data == entry) ||\u000a         (_Var1 = (*table->comparator)(entry,phVar2->data), _Var1 != false)) {\u000a        return phVar2->data;\u000a      }\u000a      phVar2 = phVar2->next;\u000a    }\u000a  }\u000a  return (void *)0x0;\u000a}\u000a\u000a
p822
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R15,RDI\nCALL 0x00407d50\nMOV RBX,RAX\nXOR R14D,R14D\nCMP qword ptr [RBX],0x0\nJZ 0x00407d41\nTEST RBX,RBX\nJZ 0x00407d41\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nMOV RSI,qword ptr [RBX]\nCMP RSI,R12\nJZ 0x00407d3e\nMOV RDI,R12\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x00407d3e\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00407d20\nJMP 0x00407d41\nMOV R14,qword ptr [RBX]\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p823
S'41 57\n41 56\n41 54\n53\n50\n49 89 f4\n49 89 ff\ne8 4d 00 00 00\n48 89 c3\n45 31 f6\n48 83 3b 00\n74 32\n48 85 db\n74 2d\n45 31 f6\n66 0f 1f 84 00 00 00 00 00\n48 8b 33\n4c 39 e6\n74 16\n4c 89 e7\n41 ff 57 38\n84 c0\n75 0b\n48 8b 5b 08\n48 85 db\n75 e4\neb 03\n4c 8b 33\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p824
S'.text:0000000000407cf0\n.text:0000000000407cf2\n.text:0000000000407cf4\n.text:0000000000407cf6\n.text:0000000000407cf7\n.text:0000000000407cf8\n.text:0000000000407cfb\n.text:0000000000407cfe\n.text:0000000000407d03\n.text:0000000000407d06\n.text:0000000000407d09\n.text:0000000000407d0d\n.text:0000000000407d0f\n.text:0000000000407d12\n.text:0000000000407d14\n.text:0000000000407d17\n.text:0000000000407d20\n.text:0000000000407d23\n.text:0000000000407d26\n.text:0000000000407d28\n.text:0000000000407d2b\n.text:0000000000407d2f\n.text:0000000000407d31\n.text:0000000000407d33\n.text:0000000000407d37\n.text:0000000000407d3a\n.text:0000000000407d3c\n.text:0000000000407d3e\n.text:0000000000407d41\n.text:0000000000407d44\n.text:0000000000407d48\n.text:0000000000407d49\n.text:0000000000407d4b\n.text:0000000000407d4d\n.text:0000000000407d4f\n'
p825
tp826
sS'base_len'
p827
(S'\n__stdcall base_len(char * name)\n'
p828
V\u000asize_t base_len(char *name)\u000a\u000a{\u000a  long lVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  \u000a  sVar2 = strlen(name);\u000a  do {\u000a    sVar3 = sVar2;\u000a    if (sVar2 < 2) {\u000a      return sVar3;\u000a    }\u000a    lVar1 = sVar2 - 1;\u000a    sVar2 = sVar2 - 1;\u000a  } while (name[lVar1] == '/');\u000a  return sVar3;\u000a}\u000a\u000a
p829
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401880\nMOV RCX,RAX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP RAX,0x2\nJC 0x004035d4\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x004035c0\nPOP RBX\nRET\n'
p830
S'53\n48 89 fb\ne8 c7 e2 ff ff\n48 89 c1\n0f 1f 40 00\n48 89 c8\n48 83 f8 02\n72 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ec\n5b\nc3\n'
p831
S'.text:00000000004035b0\n.text:00000000004035b1\n.text:00000000004035b4\n.text:00000000004035b9\n.text:00000000004035bc\n.text:00000000004035c0\n.text:00000000004035c3\n.text:00000000004035c7\n.text:00000000004035c9\n.text:00000000004035cd\n.text:00000000004035d2\n.text:00000000004035d4\n.text:00000000004035d5\n'
p832
tp833
sS'fchdir'
p834
(S'\n__stdcall fchdir(int __fd)\n'
p835
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fchdir(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fchdir_0060e1b0)();\u000a  return iVar1;\u000a}\u000a\u000a
p836
S'JMP qword ptr [0x0060e1b0]\n'
p837
S'ff 25 2a c7 20 00\n'
p838
S'.plt:0000000000401a80\n'
p839
tp840
sS'emit_ancillary_info'
p841
(S'\n__stdcall emit_ancillary_info()\n'
p842
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x004097e0;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("rm",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "rm";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00409edb,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00409edb);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x40ae19;\u000a  if (__s2 == "rm") {\u000a    uVar3 = 0x40a080;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p843
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x4097e0\nMOV ESI,0x40a064\nNOP\nMOV EDI,0x409edb\nCALL 0x004019a0\nTEST EAX,EAX\nJZ 0x00401eab\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401e90\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x409edb\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x40a0c3\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x409f0c\nMOV ECX,0x40a0da\nXOR EAX,EAX\nCALL 0x00401ac0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401ab0\nTEST RAX,RAX\nJZ 0x00401f34\nMOV ESI,0x40a101\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401790\nTEST EAX,EAX\nJZ 0x00401f34\nXOR EDI,EDI\nMOV ESI,0x40a105\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x409edb\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401ac0\nXOR EDI,EDI\nMOV ESI,0x40a14a\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,RAX\nMOV R14D,0x409edb\nMOV EDI,0x1\nMOV EDX,0x40a0da\nMOV ECX,0x409edb\nXOR EAX,EAX\nCALL 0x00401ac0\nXOR EDI,EDI\nMOV ESI,0x40a169\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x40a080\nMOV ECX,0x40ae19\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401ac0\n'
p844
S'41 56\n53\n50\nbb e0 97 40 00\nbe 64 a0 40 00\n66 90\nbf db 9e 40 00\ne8 06 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb db 9e 40 00\n48 0f 45 d8\n31 ff\nbe c3 a0 40 00\nba 05 00 00 00\ne8 94 f9 ff ff\n48 89 c6\nbf 01 00 00 00\nba 0c 9f 40 00\nb9 da a0 40 00\n31 c0\ne8 db fb ff ff\nbf 05 00 00 00\n31 f6\ne8 bf fb ff ff\n48 85 c0\n74 3e\nbe 01 a1 40 00\nba 03 00 00 00\n48 89 c7\ne8 88 f8 ff ff\n85 c0\n74 28\n31 ff\nbe 05 a1 40 00\nba 05 00 00 00\ne8 43 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba db 9e 40 00\n31 c0\n48 89 ce\ne8 8c fb ff ff\n31 ff\nbe 4a a1 40 00\nba 05 00 00 00\ne8 1b f9 ff ff\n48 89 c6\n41 be db 9e 40 00\nbf 01 00 00 00\nba da a0 40 00\nb9 db 9e 40 00\n31 c0\ne8 5c fb ff ff\n31 ff\nbe 69 a1 40 00\nba 05 00 00 00\ne8 eb f8 ff ff\n48 89 c2\n4c 39 f3\nb8 80 a0 40 00\nb9 19 ae 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 1e fb ff ff\n'
p845
S'.text:0000000000401e80\n.text:0000000000401e82\n.text:0000000000401e83\n.text:0000000000401e84\n.text:0000000000401e89\n.text:0000000000401e8e\n.text:0000000000401e90\n.text:0000000000401e95\n.text:0000000000401e9a\n.text:0000000000401e9c\n.text:0000000000401e9e\n.text:0000000000401ea2\n.text:0000000000401ea6\n.text:0000000000401ea9\n.text:0000000000401eab\n.text:0000000000401eaf\n.text:0000000000401eb2\n.text:0000000000401eb7\n.text:0000000000401ebb\n.text:0000000000401ebd\n.text:0000000000401ec2\n.text:0000000000401ec7\n.text:0000000000401ecc\n.text:0000000000401ecf\n.text:0000000000401ed4\n.text:0000000000401ed9\n.text:0000000000401ede\n.text:0000000000401ee0\n.text:0000000000401ee5\n.text:0000000000401eea\n.text:0000000000401eec\n.text:0000000000401ef1\n.text:0000000000401ef4\n.text:0000000000401ef6\n.text:0000000000401efb\n.text:0000000000401f00\n.text:0000000000401f03\n.text:0000000000401f08\n.text:0000000000401f0a\n.text:0000000000401f0c\n.text:0000000000401f0e\n.text:0000000000401f13\n.text:0000000000401f18\n.text:0000000000401f1d\n.text:0000000000401f20\n.text:0000000000401f25\n.text:0000000000401f2a\n.text:0000000000401f2c\n.text:0000000000401f2f\n.text:0000000000401f34\n.text:0000000000401f36\n.text:0000000000401f3b\n.text:0000000000401f40\n.text:0000000000401f45\n.text:0000000000401f48\n.text:0000000000401f4e\n.text:0000000000401f53\n.text:0000000000401f58\n.text:0000000000401f5d\n.text:0000000000401f5f\n.text:0000000000401f64\n.text:0000000000401f66\n.text:0000000000401f6b\n.text:0000000000401f70\n.text:0000000000401f75\n.text:0000000000401f78\n.text:0000000000401f7b\n.text:0000000000401f80\n.text:0000000000401f85\n.text:0000000000401f89\n.text:0000000000401f8e\n.text:0000000000401f90\n.text:0000000000401f93\n.text:0000000000401f96\n.text:0000000000401f9a\n.text:0000000000401f9b\n.text:0000000000401f9d\n'
p846
tp847
sS'version_etc_va'
p848
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p849
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p850
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00405390\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040539c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x004053b1\nINC R9\nCMP R9,0xa\nJC 0x00405370\nMOV R8,RSP\nCALL 0x00404fd0\nADD RSP,0x58\nRET\n'
p851
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p852
S'.text:0000000000405360\n.text:0000000000405364\n.text:0000000000405367\n.text:0000000000405370\n.text:0000000000405373\n.text:0000000000405377\n.text:0000000000405379\n.text:000000000040537c\n.text:0000000000405380\n.text:0000000000405384\n.text:0000000000405387\n.text:0000000000405390\n.text:0000000000405394\n.text:0000000000405398\n.text:000000000040539c\n.text:000000000040539f\n.text:00000000004053a3\n.text:00000000004053a6\n.text:00000000004053a8\n.text:00000000004053ab\n.text:00000000004053af\n.text:00000000004053b1\n.text:00000000004053b4\n.text:00000000004053b9\n.text:00000000004053bd\n'
p853
tp854
sS'xzalloc'
p855
(S'\n__stdcall xzalloc(size_t s)\n'
p856
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p857
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00405520\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401910\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p858
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 e4 c2 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p859
S'.text:0000000000405610\n.text:0000000000405612\n.text:0000000000405613\n.text:0000000000405614\n.text:0000000000405617\n.text:000000000040561c\n.text:000000000040561f\n.text:0000000000405621\n.text:0000000000405624\n.text:0000000000405627\n.text:000000000040562c\n.text:000000000040562f\n.text:0000000000405633\n.text:0000000000405634\n.text:0000000000405636\n'
p860
tp861
sS'hash_print_statistics'
p862
(S'\n__stdcall hash_print_statistics(Hash_table * table, FILE * stream)\n'
p863
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid hash_print_statistics(Hash_table *table,FILE *stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  undefined auVar5 [16];\u000a  undefined auVar6 [16];\u000a  undefined4 uVar7;\u000a  \u000a  sVar1 = hash_get_n_entries(table);\u000a  sVar2 = hash_get_n_buckets(table);\u000a  sVar3 = hash_get_n_buckets_used(table);\u000a  sVar4 = hash_get_max_bucket_length(table);\u000a  __fprintf_chk(stream,1,0x40b490,sVar1);\u000a  __fprintf_chk(stream,1,"# buckets:         %lu\u005cn",sVar2);\u000a  uVar7 = SUB164(_DAT_0040b440 >> 0x20,0);\u000a  auVar5 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar3) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_0040b440,0),\u000a                                   SUB124(ZEXT812(sVar3) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_0040b458,DAT_0040b450));\u000a  auVar5 = addpd(CONCAT412(SUB164(auVar5 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar5,0),SUB168(auVar5 >> 0x40,0))),auVar5);\u000a  auVar6 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar2) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_0040b440,0),\u000a                                   SUB124(ZEXT812(sVar2) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_0040b458,DAT_0040b450));\u000a  auVar6 = addpd(CONCAT412(SUB164(auVar6 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar6,0),SUB168(auVar6 >> 0x40,0))),auVar6);\u000a  __fprintf_chk(CONCAT88(SUB168(auVar5 >> 0x40,0),\u000a                         (SUB168(auVar5,0) * _DAT_0040b470) / SUB168(auVar6,0)),stream,1,\u000a                "# buckets used:    %lu (%.2f%%)\u005cn",sVar3);\u000a  __fprintf_chk(stream,1,"max bucket length: %lu\u005cn",sVar4);\u000a  return;\u000a}\u000a\u000a
p864
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,RSI\nMOV RBX,RDI\nCALL 0x00407b50\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00407b30\nMOV R12,RAX\nMOV RDI,RBX\nCALL 0x00407b40\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x00407b60\nMOV R14,RAX\nMOV ESI,0x1\nMOV EDX,0x40b490\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,RBP\nCALL 0x00401b80\nMOV ESI,0x1\nMOV EDX,0x40b4a8\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R12\nCALL 0x00401b80\nMOVQ XMM1,R15\nMOVDQA XMM2,xmmword ptr [0x0040b440]\nPUNPCKLDQ XMM1,XMM2\nMOVAPD XMM3,xmmword ptr [0x0040b450]\nSUBPD XMM1,XMM3\nPSHUFD XMM0,XMM1,0x4e\nADDPD XMM0,XMM1\nMULSD XMM0,qword ptr [0x0040b470]\nMOVQ XMM1,R12\nPUNPCKLDQ XMM1,XMM2\nSUBPD XMM1,XMM3\nPSHUFD XMM2,XMM1,0x4e\nADDPD XMM2,XMM1\nDIVSD XMM0,XMM2\nMOV ESI,0x1\nMOV EDX,0x40b4c0\nMOV AL,0x1\nMOV RDI,R13\nMOV RCX,R15\nCALL 0x00401b80\nMOV ESI,0x1\nMOV EDX,0x40b4e1\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401b80\n'
p865
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f5\n48 89 fb\ne8 3a ff ff ff\n48 89 c5\n48 89 df\ne8 0f ff ff ff\n49 89 c4\n48 89 df\ne8 14 ff ff ff\n49 89 c7\n48 89 df\ne8 29 ff ff ff\n49 89 c6\nbe 01 00 00 00\nba 90 b4 40 00\n31 c0\n4c 89 ef\n48 89 e9\ne8 2f 9f ff ff\nbe 01 00 00 00\nba a8 b4 40 00\n31 c0\n4c 89 ef\n4c 89 e1\ne8 18 9f ff ff\n66 49 0f 6e cf\n66 0f 6f 15 cb 37 00 00\n66 0f 62 ca\n66 0f 28 1d cf 37 00 00\n66 0f 5c cb\n66 0f 70 c1 4e\n66 0f 58 c1\nf2 0f 59 05 da 37 00 00\n66 49 0f 6e cc\n66 0f 62 ca\n66 0f 5c cb\n66 0f 70 d1 4e\n66 0f 58 d1\nf2 0f 5e c2\nbe 01 00 00 00\nba c0 b4 40 00\nb0 01\n4c 89 ef\n4c 89 f9\ne8 b9 9e ff ff\nbe 01 00 00 00\nba e1 b4 40 00\n31 c0\n4c 89 ef\n4c 89 f1\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 94 9e ff ff\n'
p866
S'.text:0000000000407c00\n.text:0000000000407c01\n.text:0000000000407c03\n.text:0000000000407c05\n.text:0000000000407c07\n.text:0000000000407c09\n.text:0000000000407c0a\n.text:0000000000407c0b\n.text:0000000000407c0e\n.text:0000000000407c11\n.text:0000000000407c16\n.text:0000000000407c19\n.text:0000000000407c1c\n.text:0000000000407c21\n.text:0000000000407c24\n.text:0000000000407c27\n.text:0000000000407c2c\n.text:0000000000407c2f\n.text:0000000000407c32\n.text:0000000000407c37\n.text:0000000000407c3a\n.text:0000000000407c3f\n.text:0000000000407c44\n.text:0000000000407c46\n.text:0000000000407c49\n.text:0000000000407c4c\n.text:0000000000407c51\n.text:0000000000407c56\n.text:0000000000407c5b\n.text:0000000000407c5d\n.text:0000000000407c60\n.text:0000000000407c63\n.text:0000000000407c68\n.text:0000000000407c6d\n.text:0000000000407c75\n.text:0000000000407c79\n.text:0000000000407c81\n.text:0000000000407c85\n.text:0000000000407c8a\n.text:0000000000407c8e\n.text:0000000000407c96\n.text:0000000000407c9b\n.text:0000000000407c9f\n.text:0000000000407ca3\n.text:0000000000407ca8\n.text:0000000000407cac\n.text:0000000000407cb0\n.text:0000000000407cb5\n.text:0000000000407cba\n.text:0000000000407cbc\n.text:0000000000407cbf\n.text:0000000000407cc2\n.text:0000000000407cc7\n.text:0000000000407ccc\n.text:0000000000407cd1\n.text:0000000000407cd3\n.text:0000000000407cd6\n.text:0000000000407cd9\n.text:0000000000407cdd\n.text:0000000000407cde\n.text:0000000000407ce0\n.text:0000000000407ce2\n.text:0000000000407ce4\n.text:0000000000407ce6\n.text:0000000000407ce7\n'
p867
tp868
sS'i_ring_empty'
p869
(S'\n__stdcall i_ring_empty(I_ring * ir)\n'
p870
V\u000a_Bool i_ring_empty(I_ring *ir)\u000a\u000a{\u000a  return ir->ir_empty;\u000a}\u000a\u000a
p871
S'MOV AL,byte ptr [RDI + 0x1c]\nRET\n'
p872
S'8a 47 1c\nc3\n'
p873
S'.text:0000000000408b00\n.text:0000000000408b03\n'
p874
tp875
sS'next_prime'
p876
(S'\n__stdcall next_prime(size_t candidate)\n'
p877
V\u000asize_t next_prime(size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  size_t candidate_00;\u000a  size_t sVar2;\u000a  \u000a  candidate_00 = 10;\u000a  if (10 < candidate) {\u000a    candidate_00 = candidate;\u000a  }\u000a  candidate_00 = candidate_00 | 1;\u000a  while ((sVar2 = 0xffffffffffffffff, candidate_00 != 0xffffffffffffffff &&\u000a         (_Var1 = is_prime(candidate_00), sVar2 = candidate_00, _Var1 == false))) {\u000a    candidate_00 = candidate_00 + 2;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p878
S'PUSH R14\nPUSH RBX\nPUSH RAX\nCMP RDI,0xa\nMOV EBX,0xa\nCMOVA RBX,RDI\nOR RBX,0x1\nMOV R14,-0x1\nCMP RBX,-0x1\nJNZ 0x00408a2a\nJMP 0x00408a39\nADD RBX,0x2\nCMP RBX,-0x1\nJZ 0x00408a39\nMOV RDI,RBX\nCALL 0x00408a50\nTEST AL,AL\nJZ 0x00408a20\nMOV R14,RBX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p879
S'41 56\n53\n50\n48 83 ff 0a\nbb 0a 00 00 00\n48 0f 47 df\n48 83 cb 01\n49 c7 c6 ff ff ff ff\n48 83 fb ff\n75 18\neb 25\n48 83 c3 02\n48 83 fb ff\n74 0f\n48 89 df\ne8 1e 00 00 00\n84 c0\n74 ea\n49 89 de\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p880
S'.text:00000000004089f0\n.text:00000000004089f2\n.text:00000000004089f3\n.text:00000000004089f4\n.text:00000000004089f8\n.text:00000000004089fd\n.text:0000000000408a01\n.text:0000000000408a05\n.text:0000000000408a0c\n.text:0000000000408a10\n.text:0000000000408a12\n.text:0000000000408a20\n.text:0000000000408a24\n.text:0000000000408a28\n.text:0000000000408a2a\n.text:0000000000408a2d\n.text:0000000000408a32\n.text:0000000000408a34\n.text:0000000000408a36\n.text:0000000000408a39\n.text:0000000000408a3c\n.text:0000000000408a40\n.text:0000000000408a41\n.text:0000000000408a43\n'
p881
tp882
sS'hash_insert'
p883
(S'\n__stdcall hash_insert(Hash_table * table, void * entry)\n'
p884
V\u000avoid * hash_insert(Hash_table *table,void *entry)\u000a\u000a{\u000a  int iVar1;\u000a  void *matched_ent;\u000a  void *local_10;\u000a  \u000a  iVar1 = hash_insert_if_absent(table,entry,&local_10);\u000a  if (iVar1 == -1) {\u000a    entry = (void *)0x0;\u000a  }\u000a  else {\u000a    if (iVar1 == 0) {\u000a      entry = local_10;\u000a    }\u000a  }\u000a  return entry;\u000a}\u000a\u000a
p885
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nLEA RDX,[RSP + 0x8]\nCALL 0x00408560\nCMP EAX,-0x1\nJZ 0x00408851\nTEST EAX,EAX\nCMOVZ RBX,qword ptr [RSP + 0x8]\nJMP 0x00408853\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p886
S'53\n48 83 ec 10\n48 89 f3\n48 8d 54 24 08\ne8 1e fd ff ff\n83 f8 ff\n74 0a\n85 c0\n48 0f 44 5c 24 08\neb 02\n31 db\n48 89 d8\n48 83 c4 10\n5b\nc3\n'
p887
S'.text:0000000000408830\n.text:0000000000408831\n.text:0000000000408835\n.text:0000000000408838\n.text:000000000040883d\n.text:0000000000408842\n.text:0000000000408845\n.text:0000000000408847\n.text:0000000000408849\n.text:000000000040884f\n.text:0000000000408851\n.text:0000000000408853\n.text:0000000000408856\n.text:000000000040885a\n.text:000000000040885b\n'
p888
tp889
sS'gettext_quote'
p890
(S'\n__stdcall gettext_quote(char * msgid)\n'
p891
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_0040ace0;\u000a        pcVar2 = &DAT_0040ace4;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p892
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401860\nCMP RAX,RBX\nJNZ 0x00404c28\nCALL 0x00408b90\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00404c30\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404bd8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40acd0\nMOV EAX,0x40acd4\nJMP 0x00404c24\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00404c30\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404c16\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40ace0\nMOV EAX,0x40ace4\nJMP 0x00404c24\nCMP R14D,0x9\nMOV ECX,0x40acc4\nMOV EAX,0x40acc8\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p893
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 d7 cc ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 f9 3f 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 d0 ac 40 00\nb8 d4 ac 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 e0 ac 40 00\nb8 e4 ac 40 00\neb 0e\n41 83 fe 09\nb9 c4 ac 40 00\nb8 c8 ac 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p894
S'.text:0000000000404b70\n.text:0000000000404b71\n.text:0000000000404b73\n.text:0000000000404b74\n.text:0000000000404b77\n.text:0000000000404b7a\n.text:0000000000404b7c\n.text:0000000000404b81\n.text:0000000000404b84\n.text:0000000000404b89\n.text:0000000000404b8c\n.text:0000000000404b92\n.text:0000000000404b97\n.text:0000000000404b9a\n.text:0000000000404b9f\n.text:0000000000404ba4\n.text:0000000000404ba9\n.text:0000000000404baf\n.text:0000000000404bb5\n.text:0000000000404bb8\n.text:0000000000404bba\n.text:0000000000404bbc\n.text:0000000000404bc1\n.text:0000000000404bc5\n.text:0000000000404bc7\n.text:0000000000404bc9\n.text:0000000000404bcc\n.text:0000000000404bd1\n.text:0000000000404bd6\n.text:0000000000404bd8\n.text:0000000000404bdd\n.text:0000000000404be2\n.text:0000000000404be7\n.text:0000000000404bed\n.text:0000000000404bf3\n.text:0000000000404bf6\n.text:0000000000404bf8\n.text:0000000000404bfa\n.text:0000000000404bff\n.text:0000000000404c03\n.text:0000000000404c05\n.text:0000000000404c07\n.text:0000000000404c0a\n.text:0000000000404c0f\n.text:0000000000404c14\n.text:0000000000404c16\n.text:0000000000404c1a\n.text:0000000000404c1f\n.text:0000000000404c24\n.text:0000000000404c28\n.text:0000000000404c29\n.text:0000000000404c2b\n.text:0000000000404c2c\n'
p895
tp896
sS'fts_close'
p897
(S'\n__stdcall fts_close(FTS * sp)\n'
p898
V\u000aint fts_close(FTS *sp)\u000a\u000a{\u000a  _ftsent *__ptr;\u000a  _ftsent *p_Var1;\u000a  long lVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  _ftsent **pp_Var5;\u000a  int *piVar6;\u000a  \u000a  __ptr = sp->fts_cur;\u000a  if (__ptr != (_ftsent *)0x0) {\u000a    lVar2 = __ptr->fts_level;\u000a    while (-1 < lVar2) {\u000a      pp_Var5 = &__ptr->fts_link;\u000a      if (__ptr->fts_link == (_ftsent *)0x0) {\u000a        pp_Var5 = &__ptr->fts_parent;\u000a      }\u000a      p_Var1 = *pp_Var5;\u000a      free(__ptr);\u000a      lVar2 = p_Var1->fts_level;\u000a      __ptr = p_Var1;\u000a    }\u000a    free(__ptr);\u000a  }\u000a  if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a    fts_lfree((FTSENT *)sp->fts_child);\u000a  }\u000a  free(sp->fts_array);\u000a  free(sp->fts_path);\u000a  if ((sp->fts_options & 0x200U) == 0) {\u000a    iVar3 = 0;\u000a    if ((sp->fts_options & 4U) != 0) goto LAB_004061ef;\u000a    iVar3 = fchdir(sp->fts_rfd);\u000a    if (iVar3 == 0) {\u000a      iVar3 = 0;\u000a    }\u000a    else {\u000a      piVar6 = __errno_location();\u000a      iVar3 = *piVar6;\u000a    }\u000a    iVar4 = close(sp->fts_rfd);\u000a    if (iVar3 != 0) goto LAB_004061ef;\u000a  }\u000a  else {\u000a    iVar3 = 0;\u000a    if (sp->fts_cwd_fd < 0) goto LAB_004061ef;\u000a    iVar4 = close(sp->fts_cwd_fd);\u000a  }\u000a  if (iVar4 != 0) {\u000a    piVar6 = __errno_location();\u000a    iVar3 = *piVar6;\u000a  }\u000aLAB_004061ef:\u000a  fd_ring_clear(&sp->fts_fd_ring);\u000a  if ((Hash_table *)sp->fts_leaf_optimization_works_ht != (Hash_table *)0x0) {\u000a    hash_free((Hash_table *)sp->fts_leaf_optimization_works_ht);\u000a  }\u000a  free_dir(sp);\u000a  free(sp);\u000a  if (iVar3 == 0) {\u000a    iVar3 = 0;\u000a  }\u000a  else {\u000a    piVar6 = __errno_location();\u000a    *piVar6 = iVar3;\u000a    iVar3 = -1;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p899
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RBX,qword ptr [R14]\nTEST RBX,RBX\nJZ 0x0040617b\nCMP qword ptr [RBX + 0x58],0x0\nJS 0x00406173\nMOV RDI,RBX\nNOP dword ptr [RAX]\nCMP qword ptr [RBX + 0x10],0x0\nLEA RAX,[RBX + 0x10]\nLEA RCX,[RBX + 0x8]\nCMOVZ RAX,RCX\nMOV RBX,qword ptr [RAX]\nCALL 0x00401760\nCMP qword ptr [RBX + 0x58],0x0\nMOV RDI,RBX\nJNS 0x00406150\nMOV RDI,RBX\nCALL 0x00401760\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00406189\nCALL 0x004060f0\nMOV RDI,qword ptr [R14 + 0x10]\nCALL 0x00401760\nMOV RDI,qword ptr [R14 + 0x20]\nCALL 0x00401760\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AH,0x2\nJNZ 0x004061c0\nXOR EBX,EBX\nTEST AL,0x4\nJNZ 0x004061ef\nMOV EDI,dword ptr [R14 + 0x28]\nCALL 0x00401a80\nTEST EAX,EAX\nJZ 0x004061d5\nCALL 0x00401780\nMOV EBX,dword ptr [RAX]\nJMP 0x004061d7\nMOV EDI,dword ptr [R14 + 0x2c]\nXOR EBX,EBX\nTEST EDI,EDI\nJS 0x004061ef\nCALL 0x00401940\nTEST EAX,EAX\nJNZ 0x004061e8\nJMP 0x004061ef\nXOR EBX,EBX\nMOV EDI,dword ptr [R14 + 0x28]\nCALL 0x00401940\nTEST EBX,EBX\nJNZ 0x004061ef\nTEST EAX,EAX\nJZ 0x004061ef\nCALL 0x00401780\nMOV EBX,dword ptr [RAX]\nLEA RDI,[R14 + 0x60]\nCALL 0x00406240\nMOV RDI,qword ptr [R14 + 0x50]\nTEST RDI,RDI\nJZ 0x00406206\nCALL 0x00408230\nMOV RDI,R14\nCALL 0x00406280\nMOV RDI,R14\nCALL 0x00401760\nTEST EBX,EBX\nJZ 0x00406228\nCALL 0x00401780\nMOV dword ptr [RAX],EBX\nMOV EAX,0xffffffff\nJMP 0x0040622a\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p900
S'41 56\n53\n50\n49 89 fe\n49 8b 1e\n48 85 db\n74 3c\n48 83 7b 58 00\n78 2d\n48 89 df\n0f 1f 80 00 00 00 00\n48 83 7b 10 00\n48 8d 43 10\n48 8d 4b 08\n48 0f 44 c1\n48 8b 18\ne8 f7 b5 ff ff\n48 83 7b 58 00\n48 89 df\n79 dd\n48 89 df\ne8 e5 b5 ff ff\n49 8b 7e 08\n48 85 ff\n74 05\ne8 67 ff ff ff\n49 8b 7e 10\ne8 ce b5 ff ff\n49 8b 7e 20\ne8 c5 b5 ff ff\n41 8b 46 48\nf6 c4 02\n75 1c\n31 db\na8 04\n75 45\n41 8b 7e 28\ne8 cd b8 ff ff\n85 c0\n74 1e\ne8 c4 b5 ff ff\n8b 18\neb 17\n41 8b 7e 2c\n31 db\n85 ff\n78 25\ne8 71 b7 ff ff\n85 c0\n75 15\neb 1a\n31 db\n41 8b 7e 28\ne8 60 b7 ff ff\n85 db\n75 0b\n85 c0\n74 07\ne8 93 b5 ff ff\n8b 18\n49 8d 7e 60\ne8 48 00 00 00\n49 8b 7e 50\n48 85 ff\n74 05\ne8 2a 20 00 00\n4c 89 f7\ne8 72 00 00 00\n4c 89 f7\ne8 4a b5 ff ff\n85 db\n74 0e\ne8 61 b5 ff ff\n89 18\nb8 ff ff ff ff\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p901
S'.text:0000000000406130\n.text:0000000000406132\n.text:0000000000406133\n.text:0000000000406134\n.text:0000000000406137\n.text:000000000040613a\n.text:000000000040613d\n.text:000000000040613f\n.text:0000000000406144\n.text:0000000000406146\n.text:0000000000406149\n.text:0000000000406150\n.text:0000000000406155\n.text:0000000000406159\n.text:000000000040615d\n.text:0000000000406161\n.text:0000000000406164\n.text:0000000000406169\n.text:000000000040616e\n.text:0000000000406171\n.text:0000000000406173\n.text:0000000000406176\n.text:000000000040617b\n.text:000000000040617f\n.text:0000000000406182\n.text:0000000000406184\n.text:0000000000406189\n.text:000000000040618d\n.text:0000000000406192\n.text:0000000000406196\n.text:000000000040619b\n.text:000000000040619f\n.text:00000000004061a2\n.text:00000000004061a4\n.text:00000000004061a6\n.text:00000000004061a8\n.text:00000000004061aa\n.text:00000000004061ae\n.text:00000000004061b3\n.text:00000000004061b5\n.text:00000000004061b7\n.text:00000000004061bc\n.text:00000000004061be\n.text:00000000004061c0\n.text:00000000004061c4\n.text:00000000004061c6\n.text:00000000004061c8\n.text:00000000004061ca\n.text:00000000004061cf\n.text:00000000004061d1\n.text:00000000004061d3\n.text:00000000004061d5\n.text:00000000004061d7\n.text:00000000004061db\n.text:00000000004061e0\n.text:00000000004061e2\n.text:00000000004061e4\n.text:00000000004061e6\n.text:00000000004061e8\n.text:00000000004061ed\n.text:00000000004061ef\n.text:00000000004061f3\n.text:00000000004061f8\n.text:00000000004061fc\n.text:00000000004061ff\n.text:0000000000406201\n.text:0000000000406206\n.text:0000000000406209\n.text:000000000040620e\n.text:0000000000406211\n.text:0000000000406216\n.text:0000000000406218\n.text:000000000040621a\n.text:000000000040621f\n.text:0000000000406221\n.text:0000000000406226\n.text:0000000000406228\n.text:000000000040622a\n.text:000000000040622e\n.text:000000000040622f\n.text:0000000000406231\n'
p902
tp903
sS'fclose'
p904
(S'\n__stdcall fclose(FILE * __stream)\n'
p905
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060e090)();\u000a  return iVar1;\u000a}\u000a\u000a
p906
S'JMP qword ptr [0x0060e090]\n'
p907
S'ff 25 4a c8 20 00\n'
p908
S'.plt:0000000000401840\n'
p909
tp910
sS'__ctype_get_mb_cur_max'
p911
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p912
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060e0a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p913
S'JMP qword ptr [0x0060e0a8]\n'
p914
S'ff 25 32 c8 20 00\n'
p915
S'.plt:0000000000401870\n'
p916
tp917
sS'lstat'
p918
(S'\n__stdcall lstat(char * __file, stat * __buf)\n'
p919
V\u000aint lstat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___lxstat_0060e0b8)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p920
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00401890\n'
p921
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 b0 84 ff ff\n'
p922
S'.text:00000000004093d0\n.text:00000000004093d3\n.text:00000000004093d6\n.text:00000000004093db\n'
p923
tp924
sS'quotearg_n_style'
p925
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p926
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p927
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x004048a0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00404670\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p928
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p929
S'.text:0000000000404860\n.text:0000000000404861\n.text:0000000000404863\n.text:0000000000404864\n.text:0000000000404868\n.text:000000000040486b\n.text:000000000040486d\n.text:0000000000404872\n.text:0000000000404875\n.text:000000000040487a\n.text:0000000000404881\n.text:0000000000404883\n.text:0000000000404886\n.text:0000000000404889\n.text:000000000040488e\n.text:0000000000404892\n.text:0000000000404893\n.text:0000000000404895\n.text:0000000000404896\n'
p930
tp931
sS'hash_clear'
p932
(S'\n__stdcall hash_clear(Hash_table * table)\n'
p933
V\u000avoid hash_clear(Hash_table *table)\u000a\u000a{\u000a  void (*pVar1)(void *);\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    do {\u000a      if (phVar4->data != (void *)0x0) {\u000a        pVar1 = table->data_freer;\u000a        phVar3 = phVar4->next;\u000a        while (phVar3 != (hash_entry *)0x0) {\u000a          if (pVar1 != (void (*)(void *))0x0) {\u000a            (*pVar1)(phVar3->data);\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          phVar2 = phVar3->next;\u000a          phVar3->next = table->free_entry_list;\u000a          table->free_entry_list = phVar3;\u000a          pVar1 = table->data_freer;\u000a          phVar3 = phVar2;\u000a        }\u000a        if (pVar1 != (void (*)(void *))0x0) {\u000a          (*pVar1)(phVar4->data);\u000a        }\u000a        *(undefined4 *)&phVar4->data = 0;\u000a        *(undefined4 *)((long)&phVar4->data + 4) = 0;\u000a        *(undefined4 *)&phVar4->next = 0;\u000a        *(undefined4 *)((long)&phVar4->next + 4) = 0;\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  *(undefined4 *)&table->n_buckets_used = 0;\u000a  *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a  *(undefined4 *)&table->n_entries = 0;\u000a  *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p934
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x004081ba\nJMP 0x00408215\nTEST CL,CL\nJZ 0x004081a9\nMOV RDI,qword ptr [R14]\nCALL RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R14],XMM0\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00408215\nCMP qword ptr [R14],0x0\nJZ 0x004081b0\nMOV RBX,qword ptr [R14 + 0x8]\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RBX,RBX\nJZ 0x004081a0\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST CL,0x1\nJZ 0x004081ea\nMOV RDI,qword ptr [RBX]\nCALL RAX\nMOV qword ptr [RBX],0x0\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RAX,qword ptr [R15 + 0x48]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [R15 + 0x48],RBX\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RDX,RDX\nMOV RBX,RDX\nJNZ 0x004081e0\nJMP 0x004081a0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15 + 0x18],XMM0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p935
S'41 57\n41 56\n53\n49 89 ff\n4d 8b 37\n4d 3b 77 08\n72 29\ne9 7f 00 00 00\n84 c9\n74 05\n49 8b 3e\nff d0\n0f 57 c0\n41 0f 11 06\n49 83 c6 10\n4d 3b 77 08\n73 5b\n49 83 3e 00\n74 f0\n49 8b 5e 08\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 db\n74 cd\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nf6 c1 01\n74 05\n48 8b 3b\nff d0\n48 c7 03 00 00 00 00\n48 8b 53 08\n49 8b 47 48\n48 89 43 08\n49 89 5f 48\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 d2\n48 89 d3\n75 cd\neb 8b\n0f 57 c0\n41 0f 11 47 18\n5b\n41 5e\n41 5f\nc3\n'
p936
S'.text:0000000000408180\n.text:0000000000408182\n.text:0000000000408184\n.text:0000000000408185\n.text:0000000000408188\n.text:000000000040818b\n.text:000000000040818f\n.text:0000000000408191\n.text:00000000004081a0\n.text:00000000004081a2\n.text:00000000004081a4\n.text:00000000004081a7\n.text:00000000004081a9\n.text:00000000004081ac\n.text:00000000004081b0\n.text:00000000004081b4\n.text:00000000004081b8\n.text:00000000004081ba\n.text:00000000004081be\n.text:00000000004081c0\n.text:00000000004081c4\n.text:00000000004081c8\n.text:00000000004081cb\n.text:00000000004081ce\n.text:00000000004081d1\n.text:00000000004081d3\n.text:00000000004081e0\n.text:00000000004081e3\n.text:00000000004081e5\n.text:00000000004081e8\n.text:00000000004081ea\n.text:00000000004081f1\n.text:00000000004081f5\n.text:00000000004081f9\n.text:00000000004081fd\n.text:0000000000408201\n.text:0000000000408205\n.text:0000000000408208\n.text:000000000040820b\n.text:000000000040820e\n.text:0000000000408211\n.text:0000000000408213\n.text:0000000000408215\n.text:0000000000408218\n.text:000000000040821d\n.text:000000000040821e\n.text:0000000000408220\n.text:0000000000408222\n'
p937
tp938
sS'cache_fstatat'
p939
(S'\n__stdcall cache_fstatat()\n'
p940
V\u000aint cache_fstatat(void)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  long lVar3;\u000a  stat *__buf;\u000a  char *__file;\u000a  int __fd;\u000a  \u000a  lVar3 = __buf->st_size;\u000a  if (lVar3 == -1) {\u000a    iVar1 = fstatat(__fd,__file,__buf,0x100);\u000a    if (iVar1 != 0) {\u000a      __buf->st_size = -2;\u000a      piVar2 = __errno_location();\u000a      __buf->st_ino = (long)*piVar2;\u000a    }\u000a    lVar3 = __buf->st_size;\u000a  }\u000a  iVar1 = 0;\u000a  if (lVar3 < 0) {\u000a    iVar1 = *(int *)&__buf->st_ino;\u000a    piVar2 = __errno_location();\u000a    *piVar2 = iVar1;\u000a    iVar1 = -1;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p941
S'PUSH RBX\nMOV RBX,RDX\nMOV RCX,qword ptr [RBX + 0x30]\nCMP RCX,-0x1\nJNZ 0x00402ff7\nMOV ECX,0x100\nMOV RDX,RBX\nCALL 0x004093e0\nTEST EAX,EAX\nJZ 0x00402ff3\nMOV qword ptr [RBX + 0x30],-0x2\nCALL 0x00401780\nMOVSXD RAX,dword ptr [RAX]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RCX,qword ptr [RBX + 0x30]\nXOR EAX,EAX\nTEST RCX,RCX\nJNS 0x0040300d\nMOV EBX,dword ptr [RBX + 0x8]\nCALL 0x00401780\nMOV dword ptr [RAX],EBX\nMOV EAX,0xffffffff\nPOP RBX\nRET\n'
p942
S'53\n48 89 d3\n48 8b 4b 30\n48 83 f9 ff\n75 29\nb9 00 01 00 00\n48 89 da\ne8 05 64 00 00\n85 c0\n74 14\n48 c7 43 30 fe ff ff ff\ne8 94 e7 ff ff\n48 63 00\n48 89 43 08\n48 8b 4b 30\n31 c0\n48 85 c9\n79 0f\n8b 5b 08\ne8 7a e7 ff ff\n89 18\nb8 ff ff ff ff\n5b\nc3\n'
p943
S'.text:0000000000402fc0\n.text:0000000000402fc1\n.text:0000000000402fc4\n.text:0000000000402fc8\n.text:0000000000402fcc\n.text:0000000000402fce\n.text:0000000000402fd3\n.text:0000000000402fd6\n.text:0000000000402fdb\n.text:0000000000402fdd\n.text:0000000000402fdf\n.text:0000000000402fe7\n.text:0000000000402fec\n.text:0000000000402fef\n.text:0000000000402ff3\n.text:0000000000402ff7\n.text:0000000000402ff9\n.text:0000000000402ffc\n.text:0000000000402ffe\n.text:0000000000403001\n.text:0000000000403006\n.text:0000000000403008\n.text:000000000040300d\n.text:000000000040300e\n'
p944
tp945
sS'raw_hasher'
p946
(S'\n__stdcall raw_hasher(void * data, size_t n)\n'
p947
V\u000asize_t raw_hasher(void *data,size_t n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = rotr_sz((size_t)data);\u000a  return sVar1 % n;\u000a}\u000a\u000a
p948
S'PUSH RBX\nMOV RBX,RSI\nMOV ESI,0x3\nCALL 0x00409270\nXOR EDX,EDX\nDIV RBX\nMOV RAX,RDX\nPOP RBX\nRET\n'
p949
S'53\n48 89 f3\nbe 03 00 00 00\ne8 22 12 00 00\n31 d2\n48 f7 f3\n48 89 d0\n5b\nc3\n'
p950
S'.text:0000000000408040\n.text:0000000000408041\n.text:0000000000408044\n.text:0000000000408049\n.text:000000000040804e\n.text:0000000000408050\n.text:0000000000408053\n.text:0000000000408056\n.text:0000000000408057\n'
p951
tp952
sS'quote_n'
p953
(S'\n__stdcall quote_n(char * arg)\n'
p954
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p955
S'MOV RDX,-0x1\nJMP 0x00404b30\n'
p956
S'48 c7 c2 ff ff ff ff\neb d7\n'
p957
S'.text:0000000000404b50\n.text:0000000000404b57\n'
p958
tp959
sS'diagnose_leading_hyphen'
p960
(S'\n__stdcall diagnose_leading_hyphen(char * * argv)\n'
p961
V\u000avoid diagnose_leading_hyphen(char **argv)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  int iVar3;\u000a  undefined8 uVar4;\u000a  char *__file;\u000a  char *pcVar5;\u000a  long lVar6;\u000a  undefined8 *in_RSI;\u000a  stat st;\u000a  stat local_c0;\u000a  \u000a  if (1 < (int)argv) {\u000a    lVar6 = 1;\u000a    do {\u000a      __file = (char *)in_RSI[lVar6];\u000a      if (((*__file == '-') && (__file[1] != 0)) &&\u000a         (iVar3 = lstat(__file,&local_c0), uVar2 = stderr, iVar3 == 0)) {\u000a        uVar4 = dcgettext(0,"Try \u005c'%s ./%s\u005c' to remove the file %s.\u005cn",5);\u000a        uVar1 = *in_RSI;\u000a        __file = quotearg_n_style((char *)0x1);\u000a        pcVar5 = quotearg_style((char *)0x4);\u000a        __fprintf_chk(uVar2,1,uVar4,uVar1,__file,pcVar5);\u000a        return;\u000a      }\u000a      lVar6 = lVar6 + 1;\u000a    } while (lVar6 < (long)(int)argv);\u000a  }\u000a  return;\u000a}\u000a\u000a
p962
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R14,RSI\nCMP EDI,0x2\nJL 0x00402427\nMOVSXD R12,EDI\nMOV EBX,0x1\nLEA R15,[RSP + 0x8]\nNOP word ptr [RAX + RAX*0x1]\nMOV RBP,qword ptr [R14 + RBX*0x8]\nCMP byte ptr [RBP],0x2d\nJNZ 0x004023bf\nCMP byte ptr [RBP + 0x1],0x0\nJZ 0x004023bf\nMOV RDI,RBP\nMOV RSI,R15\nCALL 0x004093d0\nTEST EAX,EAX\nJZ 0x004023c9\nINC RBX\nCMP RBX,R12\nJL 0x004023a0\nJMP 0x00402427\nMOV R15,qword ptr [0x0060e320]\nXOR EDI,EDI\nMOV ESI,0x40a210\nMOV EDX,0x5\nCALL 0x00401860\nMOV R12,RAX\nMOV R14,qword ptr [R14]\nMOV EDI,0x1\nMOV ESI,0x3\nMOV RDX,RBP\nCALL 0x00404860\nMOV R13,RAX\nMOV EDI,0x4\nMOV RSI,RBP\nCALL 0x00404940\nMOV RBX,RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R15\nMOV RDX,R12\nMOV RCX,R14\nMOV R8,R13\nMOV R9,RBX\nCALL 0x00401b80\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p963
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n49 89 f6\n83 ff 02\n0f 8c 9a 00 00 00\n4c 63 e7\nbb 01 00 00 00\n4c 8d 7c 24 08\n66 0f 1f 44 00 00\n49 8b 2c de\n80 7d 00 2d\n75 15\n80 7d 01 00\n74 0f\n48 89 ef\n4c 89 fe\ne8 15 70 00 00\n85 c0\n74 0a\n48 ff c3\n4c 39 e3\n7c d9\neb 5e\n4c 8b 3d 50 bf 20 00\n31 ff\nbe 10 a2 40 00\nba 05 00 00 00\ne8 7f f4 ff ff\n49 89 c4\n4d 8b 36\nbf 01 00 00 00\nbe 03 00 00 00\n48 89 ea\ne8 67 24 00 00\n49 89 c5\nbf 04 00 00 00\n48 89 ee\ne8 37 25 00 00\n48 89 c3\nbe 01 00 00 00\n31 c0\n4c 89 ff\n4c 89 e2\n4c 89 f1\n4d 89 e8\n49 89 d9\ne8 59 f7 ff ff\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p964
S'.text:0000000000402370\n.text:0000000000402371\n.text:0000000000402373\n.text:0000000000402375\n.text:0000000000402377\n.text:0000000000402379\n.text:000000000040237a\n.text:0000000000402381\n.text:0000000000402384\n.text:0000000000402387\n.text:000000000040238d\n.text:0000000000402390\n.text:0000000000402395\n.text:000000000040239a\n.text:00000000004023a0\n.text:00000000004023a4\n.text:00000000004023a8\n.text:00000000004023aa\n.text:00000000004023ae\n.text:00000000004023b0\n.text:00000000004023b3\n.text:00000000004023b6\n.text:00000000004023bb\n.text:00000000004023bd\n.text:00000000004023bf\n.text:00000000004023c2\n.text:00000000004023c5\n.text:00000000004023c7\n.text:00000000004023c9\n.text:00000000004023d0\n.text:00000000004023d2\n.text:00000000004023d7\n.text:00000000004023dc\n.text:00000000004023e1\n.text:00000000004023e4\n.text:00000000004023e7\n.text:00000000004023ec\n.text:00000000004023f1\n.text:00000000004023f4\n.text:00000000004023f9\n.text:00000000004023fc\n.text:0000000000402401\n.text:0000000000402404\n.text:0000000000402409\n.text:000000000040240c\n.text:0000000000402411\n.text:0000000000402413\n.text:0000000000402416\n.text:0000000000402419\n.text:000000000040241c\n.text:000000000040241f\n.text:0000000000402422\n.text:0000000000402427\n.text:000000000040242e\n.text:000000000040242f\n.text:0000000000402431\n.text:0000000000402433\n.text:0000000000402435\n.text:0000000000402437\n.text:0000000000402438\n'
p965
tp966
sS'quotearg_alloc'
p967
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p968
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p969
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x004044e0\n'
p970
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p971
S'.text:00000000004044d0\n.text:00000000004044d3\n.text:00000000004044d5\n.text:00000000004044d8\n'
p972
tp973
sS'close_stdout_set_file_name'
p974
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p975
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p976
S'MOV qword ptr [0x0060e348],RDI\nRET\n'
p977
S'48 89 3d d1 ae 20 00\nc3\n'
p978
S'.text:0000000000403470\n.text:0000000000403477\n'
p979
tp980
sS'check_tuning'
p981
(S'\n__stdcall check_tuning(Hash_table * table)\n'
p982
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000a_Bool check_tuning(Hash_table *table)\u000a\u000a{\u000a  float fVar1;\u000a  Hash_tuning *pHVar2;\u000a  undefined uVar3;\u000a  float fVar4;\u000a  \u000a  pHVar2 = table->tuning;\u000a  uVar3 = 1;\u000a  if ((pHVar2 != &default_tuning) &&\u000a     ((((fVar1 = pHVar2->growth_threshold, fVar1 <= _DAT_0040b478 || (DAT_0040b47c <= fVar1)) ||\u000a       (pHVar2->growth_factor <= _DAT_0040b480)) ||\u000a      (((pHVar2->shrink_threshold < 0.00000000 ||\u000a        (fVar4 = pHVar2->shrink_threshold + _DAT_0040b478, fVar1 <= fVar4)) ||\u000a       ((DAT_0040b484 < pHVar2->shrink_factor || (pHVar2->shrink_factor <= fVar4)))))))) {\u000a    table->tuning = &default_tuning;\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p983
S'MOV RCX,qword ptr [RDI + 0x28]\nMOV EDX,0x40b4fc\nMOV AL,0x1\nCMP RCX,RDX\nJZ 0x004080e3\nMOVSS XMM0,dword ptr [RCX + 0x8]\nUCOMISS XMM0,dword ptr [0x0040b478]\nJBE 0x004080d9\nMOVSS XMM1,dword ptr [0x0040b47c]\nUCOMISS XMM1,XMM0\nJBE 0x004080d9\nMOVSS XMM1,dword ptr [RCX + 0xc]\nUCOMISS XMM1,dword ptr [0x0040b480]\nJBE 0x004080d9\nMOVSS XMM1,dword ptr [RCX]\nXORPS XMM2,XMM2\nUCOMISS XMM1,XMM2\nJC 0x004080d9\nADDSS XMM1,dword ptr [0x0040b478]\nUCOMISS XMM0,XMM1\nJBE 0x004080d9\nMOVSS XMM0,dword ptr [RCX + 0x4]\nMOVSS XMM2,dword ptr [0x0040b484]\nUCOMISS XMM2,XMM0\nJC 0x004080d9\nUCOMISS XMM0,XMM1\nJA 0x004080e3\nMOV qword ptr [RDI + 0x28],0x40b4fc\nXOR EAX,EAX\nRET\n'
p984
S'48 8b 4f 28\nba fc b4 40 00\nb0 01\n48 39 d1\n74 63\nf3 0f 10 41 08\n0f 2e 05 ec 33 00 00\n76 4b\nf3 0f 10 0d e6 33 00 00\n0f 2e c8\n76 3e\nf3 0f 10 49 0c\n0f 2e 0d d9 33 00 00\n76 30\nf3 0f 10 09\n0f 57 d2\n0f 2e ca\n72 24\nf3 0f 58 0d bb 33 00 00\n0f 2e c1\n76 17\nf3 0f 10 41 04\nf3 0f 10 15 b5 33 00 00\n0f 2e d0\n72 05\n0f 2e c1\n77 0a\n48 c7 47 28 fc b4 40 00\n31 c0\nc3\n'
p985
S'.text:0000000000408070\n.text:0000000000408074\n.text:0000000000408079\n.text:000000000040807b\n.text:000000000040807e\n.text:0000000000408080\n.text:0000000000408085\n.text:000000000040808c\n.text:000000000040808e\n.text:0000000000408096\n.text:0000000000408099\n.text:000000000040809b\n.text:00000000004080a0\n.text:00000000004080a7\n.text:00000000004080a9\n.text:00000000004080ad\n.text:00000000004080b0\n.text:00000000004080b3\n.text:00000000004080b5\n.text:00000000004080bd\n.text:00000000004080c0\n.text:00000000004080c2\n.text:00000000004080c7\n.text:00000000004080cf\n.text:00000000004080d2\n.text:00000000004080d4\n.text:00000000004080d7\n.text:00000000004080d9\n.text:00000000004080e1\n.text:00000000004080e3\n'
p986
tp987
sS'prompt'
p988
(S'\n__stdcall prompt(FTS * fts, FTSENT * ent, rm_options * x, Ternary * is_empty_p)\n'
p989
V\u000aRM_status prompt(FTS *fts,FTSENT *ent,rm_options *x,Ternary *is_empty_p)\u000a\u000a{\u000a  uint uVar1;\u000a  stat *buf;\u000a  _Bool _Var2;\u000a  byte bVar3;\u000a  int iVar4;\u000a  int iVar5;\u000a  uint *puVar6;\u000a  char *pcVar7;\u000a  undefined8 uVar8;\u000a  undefined8 uVar9;\u000a  char *pcVar10;\u000a  uint uVar11;\u000a  char *pcVar12;\u000a  int in_R8D;\u000a  int *in_R9;\u000a  RM_status RVar13;\u000a  int iVar14;\u000a  char *full_name;\u000a  undefined local_c0 [24];\u000a  ushort local_a8;\u000a  \u000a  uVar1 = fts->fts_cwd_fd;\u000a  buf = (stat *)ent->fts_accpath;\u000a  if (in_R9 != (int *)0x0) {\u000a    *in_R9 = 2;\u000a  }\u000a  cache_stat_init();\u000a  if (in_R9 == (int *)0x0) {\u000a    _Var2 = false;\u000a  }\u000a  else {\u000a    _Var2 = is_empty_dir((char *)(ulong)uVar1);\u000a    *in_R9 = (uint)_Var2 + 3;\u000a  }\u000a  if (ent->fts_number != 0) {\u000a    return RM_USER_DECLINED;\u000a  }\u000a  if (is_empty_p[1] == 5) {\u000aLAB_00402b30:\u000a    RVar13 = RM_OK;\u000a  }\u000a  else {\u000a    uVar11 = 0;\u000a    if ((*(char *)is_empty_p == 0) && ((is_empty_p[1] == T_NO || (*(char *)(is_empty_p + 6) != 0))))\u000a    {\u000a      iVar4 = write_protected_non_symlink((char *)(ulong)uVar1,buf);\u000a      puVar6 = (uint *)__errno_location();\u000a      uVar11 = *puVar6;\u000a      if (iVar4 == 0) goto LAB_00402b23;\u000a    }\u000a    else {\u000aLAB_00402b23:\u000a      iVar4 = 0;\u000a      if (is_empty_p[1] != T_NO) goto LAB_00402b30;\u000a    }\u000a    iVar14 = ((uint)x & 0xff) << 2;\u000a    if ((iVar4 < 0) || ((char)x == 1)) {\u000a      if (-1 < iVar4) goto LAB_00402bb5;\u000a    }\u000a    else {\u000a      iVar5 = cache_fstatat();\u000a      if (iVar5 == 0) {\u000a        if ((local_a8 & 0xf000) == 0xa000) {\u000a          iVar14 = 10;\u000a        }\u000a        else {\u000a          if ((local_a8 & 0xf000) == 0x4000) {\u000a            iVar14 = 4;\u000a          }\u000a        }\u000aLAB_00402bb5:\u000a        bVar3 = (byte)iVar14 & 0xf;\u000a        if (bVar3 == 4) {\u000a          if ((*(char *)((long)is_empty_p + 9) == 0) &&\u000a             ((uVar11 = 0x15, *(char *)((long)is_empty_p + 10) == 0 || (_Var2 != true))))\u000a          goto LAB_00402c94;\u000a        }\u000a        else {\u000a          if ((bVar3 == 10) && (is_empty_p[1] != T_NO)) goto LAB_00402b30;\u000a        }\u000a        pcVar7 = quotearg_style((char *)0x4);\u000a        uVar8 = stderr;\u000a        if ((_Var2 | (in_R8D != 2 || iVar14 != 4)) == 0) {\u000a          pcVar12 = "%s: descend into directory %s? ";\u000a          if (iVar4 != 0) {\u000a            pcVar12 = "%s: descend into write-protected directory %s? ";\u000a          }\u000a          uVar9 = dcgettext(0,pcVar12,5);\u000a          __fprintf_chk(uVar8,1,uVar9,program_name,pcVar7);\u000a        }\u000a        else {\u000a          iVar14 = cache_fstatat();\u000a          uVar8 = stderr;\u000a          if (iVar14 != 0) {\u000a            puVar6 = (uint *)__errno_location();\u000a            uVar1 = *puVar6;\u000a            uVar8 = dcgettext(0,"cannot remove %s",5);\u000a            error(0,(ulong)uVar1,uVar8,pcVar7);\u000a            return RM_ERROR;\u000a          }\u000a          pcVar12 = "%s: remove %s %s? ";\u000a          if (iVar4 != 0) {\u000a            pcVar12 = "%s: remove write-protected %s %s? ";\u000a          }\u000a          uVar9 = dcgettext(0,pcVar12,5);\u000a          pcVar12 = program_name;\u000a          pcVar10 = file_type((stat *)local_c0);\u000a          __fprintf_chk(uVar8,1,uVar9,pcVar12,pcVar10,pcVar7);\u000a        }\u000a        _Var2 = yesno();\u000a        if (_Var2 == false) {\u000a          return RM_USER_DECLINED;\u000a        }\u000a        goto LAB_00402b30;\u000a      }\u000a      puVar6 = (uint *)__errno_location();\u000a      uVar11 = *puVar6;\u000a    }\u000aLAB_00402c94:\u000a    RVar13 = RM_ERROR;\u000a    pcVar7 = quotearg_style((char *)0x4);\u000a    uVar8 = dcgettext(0,"cannot remove %s",5);\u000a    error(0,(ulong)uVar11,uVar8,pcVar7);\u000a  }\u000a  return RVar13;\u000a}\u000a\u000a
p990
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xb8\nMOV R13,R9\nMOV dword ptr [RSP + 0x1c],R8D\nMOV R12,RCX\nMOV R15D,EDX\nMOV R14,RSI\nMOV EBX,dword ptr [RDI + 0x2c]\nMOV RBP,qword ptr [R14 + 0x30]\nMOV RAX,qword ptr [R14 + 0x38]\nMOV qword ptr [RSP + 0x20],RAX\nTEST R13,R13\nJZ 0x00402acf\nMOV dword ptr [R13],0x2\nLEA RDI,[RSP + 0x28]\nCALL 0x00402f30\nTEST R13,R13\nMOV qword ptr [RSP + 0x10],RBP\nMOV dword ptr [RSP + 0xc],EBX\nJZ 0x00402b01\nMOV EDI,EBX\nMOV RSI,RBP\nCALL 0x004029a0\nMOV BPL,AL\nMOVZX EAX,BPL\nADD EAX,0x3\nMOV dword ptr [R13],EAX\nJMP 0x00402b03\nXOR EBP,EBP\nMOV R13D,0x3\nCMP qword ptr [R14 + 0x20],0x0\nJNZ 0x00402b36\nMOV EAX,dword ptr [R12 + 0x4]\nCMP EAX,0x5\nJZ 0x00402b30\nXOR ECX,ECX\nCMP byte ptr [R12],0x0\nJZ 0x00402b4b\nCMP dword ptr [R12 + 0x4],0x3\nMOV EBX,0x0\nJZ 0x00402b78\nMOV R13D,0x2\nMOV EAX,R13D\nADD RSP,0xb8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0x3\nJZ 0x00402b58\nCMP byte ptr [R12 + 0x18],0x0\nJZ 0x00402b23\nLEA RDX,[RSP + 0x28]\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00402f40\nMOV EBX,EAX\nCALL 0x00401780\nMOV ECX,dword ptr [RAX]\nTEST EBX,EBX\nJZ 0x00402b23\nMOVZX R14D,R15B\nSHL R14D,0x2\nTEST EBX,EBX\nJS 0x00402bad\nXOR R15B,0x1\nJZ 0x00402bad\nLEA RDX,[RSP + 0x28]\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00402fc0\nTEST EAX,EAX\nJZ 0x00402bd0\nCALL 0x00401780\nMOV ECX,dword ptr [RAX]\nJMP 0x00402c94\nTEST EBX,EBX\nJS 0x00402c94\nMOV EAX,R14D\nAND AL,0xf\nCMP AL,0x4\nJZ 0x00402bf7\nCMP AL,0xa\nJNZ 0x00402c16\nCMP dword ptr [R12 + 0x4],0x3\nJNZ 0x00402b30\nJMP 0x00402c16\nMOVZX EAX,word ptr [RSP + 0x40]\nAND EAX,0xf000\nCMP EAX,0xa000\nJZ 0x00402d80\nMOVZX EAX,AX\nCMP EAX,0x4000\nJNZ 0x00402bb5\nMOV R14D,0x4\nJMP 0x00402bb5\nCMP byte ptr [R12 + 0x9],0x0\nJNZ 0x00402c16\nCMP byte ptr [R12 + 0xa],0x0\nMOV ECX,0x15\nJZ 0x00402c94\nMOV EAX,EBP\nXOR AL,0x1\nJNZ 0x00402c94\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x20]\nCALL 0x00404940\nMOV R15,RAX\nCMP R14D,0x4\nSETNZ AL\nCMP dword ptr [RSP + 0x1c],0x2\nSETNZ CL\nOR CL,AL\nOR BPL,CL\nJZ 0x00402cd8\nLEA RDX,[RSP + 0x28]\nMOV EDI,dword ptr [RSP + 0xc]\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00402fc0\nTEST EAX,EAX\nJZ 0x00402d19\nCALL 0x00401780\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a31b\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nMOV RCX,R15\nCALL 0x00401ae0\nMOV R13D,0x4\nJMP 0x00402b36\nMOV R13D,0x4\nMOV EDI,0x4\nMOV EBP,ECX\nMOV RSI,qword ptr [RSP + 0x20]\nCALL 0x00404940\nMOV RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x40a31b\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00401ae0\nJMP 0x00402b36\nMOV RBP,qword ptr [0x0060e320]\nTEST EBX,EBX\nMOV EAX,0x40a545\nMOV ESI,0x40a575\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060e358]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBP\nMOV R8,R15\nCALL 0x00401b80\nJMP 0x00402d6e\nMOV R14,qword ptr [0x0060e320]\nTEST EBX,EBX\nMOV EAX,0x40a595\nMOV ESI,0x40a5b8\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401860\nMOV RBX,RAX\nMOV R12,qword ptr [0x0060e358]\nLEA RDI,[RSP + 0x28]\nCALL 0x004035e0\nMOV RBP,RAX\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nMOV RDX,RBX\nMOV RCX,R12\nMOV R8,RBP\nMOV R9,R15\nCALL 0x00401b80\nCALL 0x00405740\nTEST AL,AL\nJNZ 0x00402b30\nJMP 0x00402b36\nMOV R14D,0xa\nJMP 0x00402bb5\n'
p991
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec b8 00 00 00\n4d 89 cd\n44 89 44 24 1c\n49 89 cc\n41 89 d7\n49 89 f6\n8b 5f 2c\n49 8b 6e 30\n49 8b 46 38\n48 89 44 24 20\n4d 85 ed\n74 08\n41 c7 45 00 02 00 00 00\n48 8d 7c 24 28\ne8 57 04 00 00\n4d 85 ed\n48 89 6c 24 10\n89 5c 24 0c\n74 1a\n89 df\n48 89 ee\ne8 af fe ff ff\n40 88 c5\n40 0f b6 c5\n83 c0 03\n41 89 45 00\neb 02\n31 ed\n41 bd 03 00 00 00\n49 83 7e 20 00\n75 26\n41 8b 44 24 04\n83 f8 05\n74 16\n31 c9\n41 80 3c 24 00\n74 28\n41 83 7c 24 04 03\nbb 00 00 00 00\n74 48\n41 bd 02 00 00 00\n44 89 e8\n48 81 c4 b8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n83 f8 03\n74 08\n41 80 7c 24 18 00\n74 cb\n48 8d 54 24 28\n8b 7c 24 0c\n48 8b 74 24 10\ne8 d5 03 00 00\n89 c3\ne8 0e ec ff ff\n8b 08\n85 db\n74 ab\n45 0f b6 f7\n41 c1 e6 02\n85 db\n78 29\n41 80 f7 01\n74 23\n48 8d 54 24 28\n8b 7c 24 0c\n48 8b 74 24 10\ne8 23 04 00 00\n85 c0\n74 2f\ne8 da eb ff ff\n8b 08\ne9 e7 00 00 00\n85 db\n0f 88 df 00 00 00\n44 89 f0\n24 0f\n3c 04\n74 39\n3c 0a\n75 54\n41 83 7c 24 04 03\n0f 85 62 ff ff ff\neb 46\n0f b7 44 24 40\n25 00 f0 00 00\n3d 00 a0 00 00\n0f 84 9b 01 00 00\n0f b7 c0\n3d 00 40 00 00\n75 c6\n41 be 04 00 00 00\neb be\n41 80 7c 24 09 00\n75 17\n41 80 7c 24 0a 00\nb9 15 00 00 00\n0f 84 84 00 00 00\n89 e8\n34 01\n75 7e\nbf 04 00 00 00\n48 8b 74 24 20\ne8 1b 1d 00 00\n49 89 c7\n41 83 fe 04\n0f 95 c0\n83 7c 24 1c 02\n0f 95 c1\n08 c1\n40 08 cd\n0f 84 96 00 00 00\n48 8d 54 24 28\n8b 7c 24 0c\n48 8b 74 24 10\ne8 6b 03 00 00\n85 c0\n0f 84 bc 00 00 00\ne8 1e eb ff ff\n8b 28\n31 ff\nbe 1b a3 40 00\nba 05 00 00 00\ne8 eb eb ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\n4c 89 f9\ne8 57 ee ff ff\n41 bd 04 00 00 00\ne9 a2 fe ff ff\n41 bd 04 00 00 00\nbf 04 00 00 00\n89 cd\n48 8b 74 24 20\ne8 95 1c 00 00\n48 89 c3\n31 ff\nbe 1b a3 40 00\nba 05 00 00 00\ne8 a1 eb ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\n48 89 d9\ne8 0d ee ff ff\ne9 5e fe ff ff\n48 8b 2d 41 b6 20 00\n85 db\nb8 45 a5 40 00\nbe 75 a5 40 00\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 65 eb ff ff\n48 89 c2\n48 8b 0d 53 b6 20 00\nbe 01 00 00 00\n31 c0\n48 89 ef\n4d 89 f8\ne8 69 ee ff ff\neb 55\n4c 8b 35 00 b6 20 00\n85 db\nb8 95 a5 40 00\nbe b8 a5 40 00\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 24 eb ff ff\n48 89 c3\n4c 8b 25 12 b6 20 00\n48 8d 7c 24 28\ne8 90 08 00 00\n48 89 c5\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 89 da\n4c 89 e1\n49 89 e8\n4d 89 f9\ne8 12 ee ff ff\ne8 cd 29 00 00\n84 c0\n0f 85 b5 fd ff ff\ne9 b6 fd ff ff\n41 be 0a 00 00 00\ne9 2a fe ff ff\n'
p992
S'.text:0000000000402a90\n.text:0000000000402a91\n.text:0000000000402a93\n.text:0000000000402a95\n.text:0000000000402a97\n.text:0000000000402a99\n.text:0000000000402a9a\n.text:0000000000402aa1\n.text:0000000000402aa4\n.text:0000000000402aa9\n.text:0000000000402aac\n.text:0000000000402aaf\n.text:0000000000402ab2\n.text:0000000000402ab5\n.text:0000000000402ab9\n.text:0000000000402abd\n.text:0000000000402ac2\n.text:0000000000402ac5\n.text:0000000000402ac7\n.text:0000000000402acf\n.text:0000000000402ad4\n.text:0000000000402ad9\n.text:0000000000402adc\n.text:0000000000402ae1\n.text:0000000000402ae5\n.text:0000000000402ae7\n.text:0000000000402ae9\n.text:0000000000402aec\n.text:0000000000402af1\n.text:0000000000402af4\n.text:0000000000402af8\n.text:0000000000402afb\n.text:0000000000402aff\n.text:0000000000402b01\n.text:0000000000402b03\n.text:0000000000402b09\n.text:0000000000402b0e\n.text:0000000000402b10\n.text:0000000000402b15\n.text:0000000000402b18\n.text:0000000000402b1a\n.text:0000000000402b1c\n.text:0000000000402b21\n.text:0000000000402b23\n.text:0000000000402b29\n.text:0000000000402b2e\n.text:0000000000402b30\n.text:0000000000402b36\n.text:0000000000402b39\n.text:0000000000402b40\n.text:0000000000402b41\n.text:0000000000402b43\n.text:0000000000402b45\n.text:0000000000402b47\n.text:0000000000402b49\n.text:0000000000402b4a\n.text:0000000000402b4b\n.text:0000000000402b4e\n.text:0000000000402b50\n.text:0000000000402b56\n.text:0000000000402b58\n.text:0000000000402b5d\n.text:0000000000402b61\n.text:0000000000402b66\n.text:0000000000402b6b\n.text:0000000000402b6d\n.text:0000000000402b72\n.text:0000000000402b74\n.text:0000000000402b76\n.text:0000000000402b78\n.text:0000000000402b7c\n.text:0000000000402b80\n.text:0000000000402b82\n.text:0000000000402b84\n.text:0000000000402b88\n.text:0000000000402b8a\n.text:0000000000402b8f\n.text:0000000000402b93\n.text:0000000000402b98\n.text:0000000000402b9d\n.text:0000000000402b9f\n.text:0000000000402ba1\n.text:0000000000402ba6\n.text:0000000000402ba8\n.text:0000000000402bad\n.text:0000000000402baf\n.text:0000000000402bb5\n.text:0000000000402bb8\n.text:0000000000402bba\n.text:0000000000402bbc\n.text:0000000000402bbe\n.text:0000000000402bc0\n.text:0000000000402bc2\n.text:0000000000402bc8\n.text:0000000000402bce\n.text:0000000000402bd0\n.text:0000000000402bd5\n.text:0000000000402bda\n.text:0000000000402bdf\n.text:0000000000402be5\n.text:0000000000402be8\n.text:0000000000402bed\n.text:0000000000402bef\n.text:0000000000402bf5\n.text:0000000000402bf7\n.text:0000000000402bfd\n.text:0000000000402bff\n.text:0000000000402c05\n.text:0000000000402c0a\n.text:0000000000402c10\n.text:0000000000402c12\n.text:0000000000402c14\n.text:0000000000402c16\n.text:0000000000402c1b\n.text:0000000000402c20\n.text:0000000000402c25\n.text:0000000000402c28\n.text:0000000000402c2c\n.text:0000000000402c2f\n.text:0000000000402c34\n.text:0000000000402c37\n.text:0000000000402c39\n.text:0000000000402c3c\n.text:0000000000402c42\n.text:0000000000402c47\n.text:0000000000402c4b\n.text:0000000000402c50\n.text:0000000000402c55\n.text:0000000000402c57\n.text:0000000000402c5d\n.text:0000000000402c62\n.text:0000000000402c64\n.text:0000000000402c66\n.text:0000000000402c6b\n.text:0000000000402c70\n.text:0000000000402c75\n.text:0000000000402c78\n.text:0000000000402c7a\n.text:0000000000402c7c\n.text:0000000000402c7e\n.text:0000000000402c81\n.text:0000000000402c84\n.text:0000000000402c89\n.text:0000000000402c8f\n.text:0000000000402c94\n.text:0000000000402c9a\n.text:0000000000402c9f\n.text:0000000000402ca1\n.text:0000000000402ca6\n.text:0000000000402cab\n.text:0000000000402cae\n.text:0000000000402cb0\n.text:0000000000402cb5\n.text:0000000000402cba\n.text:0000000000402cbf\n.text:0000000000402cc2\n.text:0000000000402cc4\n.text:0000000000402cc6\n.text:0000000000402cc8\n.text:0000000000402ccb\n.text:0000000000402cce\n.text:0000000000402cd3\n.text:0000000000402cd8\n.text:0000000000402cdf\n.text:0000000000402ce1\n.text:0000000000402ce6\n.text:0000000000402ceb\n.text:0000000000402cef\n.text:0000000000402cf1\n.text:0000000000402cf6\n.text:0000000000402cfb\n.text:0000000000402cfe\n.text:0000000000402d05\n.text:0000000000402d0a\n.text:0000000000402d0c\n.text:0000000000402d0f\n.text:0000000000402d12\n.text:0000000000402d17\n.text:0000000000402d19\n.text:0000000000402d20\n.text:0000000000402d22\n.text:0000000000402d27\n.text:0000000000402d2c\n.text:0000000000402d30\n.text:0000000000402d32\n.text:0000000000402d37\n.text:0000000000402d3c\n.text:0000000000402d3f\n.text:0000000000402d46\n.text:0000000000402d4b\n.text:0000000000402d50\n.text:0000000000402d53\n.text:0000000000402d58\n.text:0000000000402d5a\n.text:0000000000402d5d\n.text:0000000000402d60\n.text:0000000000402d63\n.text:0000000000402d66\n.text:0000000000402d69\n.text:0000000000402d6e\n.text:0000000000402d73\n.text:0000000000402d75\n.text:0000000000402d7b\n.text:0000000000402d80\n.text:0000000000402d86\n'
p993
tp994
sS'is_empty_dir'
p995
(S'\n__stdcall is_empty_dir(char * dir)\n'
p996
V\u000a_Bool is_empty_dir(char *dir)\u000a\u000a{\u000a  int __fd;\u000a  DIR *__dirp;\u000a  int *piVar1;\u000a  dirent *pdVar2;\u000a  char *__file;\u000a  bool bVar3;\u000a  \u000a  bVar3 = false;\u000a  __fd = openat((int)dir,__file,0x30900);\u000a  if (-1 < __fd) {\u000a    __dirp = fdopendir(__fd);\u000a    if (__dirp == (DIR *)0x0) {\u000a      close(__fd);\u000a      bVar3 = false;\u000a    }\u000a    else {\u000a      piVar1 = __errno_location();\u000a      *piVar1 = 0;\u000a      pdVar2 = readdir_ignoring_dot_and_dotdot((DIR *)__dirp);\u000a      __fd = *piVar1;\u000a      closedir(__dirp);\u000a      if (pdVar2 == (dirent *)0x0) {\u000a        bVar3 = __fd == 0;\u000a      }\u000a      else {\u000a        bVar3 = false;\u000a      }\u000a    }\u000a  }\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p997
S'PUSH RBP\nPUSH R14\nPUSH RBX\nXOR EBX,EBX\nMOV EDX,0x30900\nXOR EAX,EAX\nCALL 0x004018a0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00402a05\nMOV EDI,EBP\nCALL 0x00401b20\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004029f5\nCALL 0x00401780\nMOV RBP,RAX\nMOV dword ptr [RBP],0x0\nMOV RDI,RBX\nCALL 0x00402ef0\nMOV R14,RAX\nMOV EBP,dword ptr [RBP]\nMOV RDI,RBX\nCALL 0x00401950\nTEST R14,R14\nJZ 0x00402a00\nXOR EBX,EBX\nJMP 0x00402a05\nMOV EDI,EBP\nCALL 0x00401940\nXOR EBX,EBX\nJMP 0x00402a05\nTEST EBP,EBP\nSETZ BL\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p998
S'55\n41 56\n53\n31 db\nba 00 09 03 00\n31 c0\ne8 ee ee ff ff\n89 c5\n85 ed\n78 4d\n89 ef\ne8 61 f1 ff ff\n48 89 c3\n48 85 db\n74 2e\ne8 b4 ed ff ff\n48 89 c5\nc7 45 00 00 00 00 00\n48 89 df\ne8 12 05 00 00\n49 89 c6\n8b 6d 00\n48 89 df\ne8 64 ef ff ff\n4d 85 f6\n74 0f\n31 db\neb 10\n89 ef\ne8 44 ef ff ff\n31 db\neb 05\n85 ed\n0f 94 c3\n89 d8\n5b\n41 5e\n5d\nc3\n'
p999
S'.text:00000000004029a0\n.text:00000000004029a1\n.text:00000000004029a3\n.text:00000000004029a4\n.text:00000000004029a6\n.text:00000000004029ab\n.text:00000000004029ad\n.text:00000000004029b2\n.text:00000000004029b4\n.text:00000000004029b6\n.text:00000000004029b8\n.text:00000000004029ba\n.text:00000000004029bf\n.text:00000000004029c2\n.text:00000000004029c5\n.text:00000000004029c7\n.text:00000000004029cc\n.text:00000000004029cf\n.text:00000000004029d6\n.text:00000000004029d9\n.text:00000000004029de\n.text:00000000004029e1\n.text:00000000004029e4\n.text:00000000004029e7\n.text:00000000004029ec\n.text:00000000004029ef\n.text:00000000004029f1\n.text:00000000004029f3\n.text:00000000004029f5\n.text:00000000004029f7\n.text:00000000004029fc\n.text:00000000004029fe\n.text:0000000000402a00\n.text:0000000000402a02\n.text:0000000000402a05\n.text:0000000000402a07\n.text:0000000000402a08\n.text:0000000000402a0a\n.text:0000000000402a0b\n'
p1000
tp1001
sS'__libc_csu_init'
p1002
(S'\n__stdcall __libc_csu_init()\n'
p1003
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p1004
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60de08]\nPUSH RBP\nLEA RBP,[0x60de10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401728\nTEST RBP,RBP\nJZ 0x00409356\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00409340\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1005
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 f6 4a 20 00\n55\n48 8d 2d f6 4a 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 f7 83 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1006
S'.text:0000000000409300\n.text:0000000000409302\n.text:0000000000409304\n.text:0000000000409307\n.text:0000000000409309\n.text:000000000040930b\n.text:0000000000409312\n.text:0000000000409313\n.text:000000000040931a\n.text:000000000040931b\n.text:000000000040931e\n.text:0000000000409321\n.text:0000000000409324\n.text:0000000000409328\n.text:000000000040932c\n.text:0000000000409331\n.text:0000000000409334\n.text:0000000000409336\n.text:0000000000409338\n.text:0000000000409340\n.text:0000000000409343\n.text:0000000000409346\n.text:0000000000409349\n.text:000000000040934d\n.text:0000000000409351\n.text:0000000000409354\n.text:0000000000409356\n.text:000000000040935a\n.text:000000000040935b\n.text:000000000040935c\n.text:000000000040935e\n.text:0000000000409360\n.text:0000000000409362\n.text:0000000000409364\n'
p1007
tp1008
sS'argmatch_to_argument'
p1009
(S'\n__stdcall argmatch_to_argument(char * value, char * * arglist, char * vallist, size_t valsize)\n'
p1010
V\u000achar * argmatch_to_argument(char *value,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = *arglist;\u000a  if (pcVar2 != (char *)0x0) {\u000a    arglist = arglist + 1;\u000a    do {\u000a      iVar1 = memcmp(value,vallist,valsize);\u000a      if (iVar1 == 0) {\u000a        return pcVar2;\u000a      }\u000a      pcVar2 = *arglist;\u000a      arglist = arglist + 1;\u000a      vallist = vallist + valsize;\u000a    } while (pcVar2 != (char *)0x0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p1011
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R13,RDI\nMOV R15,qword ptr [RBX]\nTEST R15,R15\nJZ 0x00403371\nADD RBX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00401960\nTEST EAX,EAX\nJZ 0x00403374\nMOV R15,qword ptr [RBX]\nADD RBX,0x8\nADD R12,R14\nTEST R15,R15\nJNZ 0x00403350\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p1012
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 fd\n4c 8b 3b\n4d 85 ff\n74 34\n48 83 c3 08\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\n4c 89 e6\n4c 89 f2\ne8 02 e6 ff ff\n85 c0\n74 12\n4c 8b 3b\n48 83 c3 08\n4d 01 f4\n4d 85 ff\n75 df\n45 31 ff\n4c 89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p1013
S'.text:0000000000403320\n.text:0000000000403322\n.text:0000000000403324\n.text:0000000000403326\n.text:0000000000403328\n.text:0000000000403329\n.text:000000000040332c\n.text:000000000040332f\n.text:0000000000403332\n.text:0000000000403335\n.text:0000000000403338\n.text:000000000040333b\n.text:000000000040333d\n.text:0000000000403341\n.text:0000000000403350\n.text:0000000000403353\n.text:0000000000403356\n.text:0000000000403359\n.text:000000000040335e\n.text:0000000000403360\n.text:0000000000403362\n.text:0000000000403365\n.text:0000000000403369\n.text:000000000040336c\n.text:000000000040336f\n.text:0000000000403371\n.text:0000000000403374\n.text:0000000000403377\n.text:0000000000403378\n.text:000000000040337a\n.text:000000000040337c\n.text:000000000040337e\n.text:0000000000403380\n'
p1014
tp1015
sS'c_isdigit'
p1016
(S'\n__stdcall c_isdigit()\n'
p1017
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p1018
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p1019
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p1020
S'.text:0000000000407810\n.text:0000000000407813\n.text:0000000000407816\n.text:0000000000407819\n'
p1021
tp1022
sS'hash_do_for_each'
p1023
(S'\n__stdcall hash_do_for_each(Hash_table * table, Hash_processor * processor, void * processor_data)\n'
p1024
V\u000asize_t hash_do_for_each(Hash_table *table,_Bool (*processor)(void *,void *),void *processor_data)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  _Bool _Var2;\u000a  size_t sVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    sVar3 = 0;\u000a    do {\u000a      phVar1 = phVar4;\u000a      if (phVar4->data != (void *)0x0) {\u000a        while (phVar1 != (hash_entry *)0x0) {\u000a          _Var2 = (*processor)(phVar1->data,processor_data);\u000a          if (_Var2 == false) {\u000a            return sVar3;\u000a          }\u000a          sVar3 = sVar3 + 1;\u000a          phVar1 = phVar1->next;\u000a        }\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p1025
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV R12,RDI\nMOV R13,qword ptr [R12]\nCMP R13,qword ptr [R12 + 0x8]\nJNC 0x00407ee7\nXOR EBX,EBX\nCMP qword ptr [R13],0x0\nJZ 0x00407eda\nTEST R13,R13\nJZ 0x00407eda\nMOV RBP,R13\nMOV RDI,qword ptr [RBP]\nMOV RSI,R14\nCALL R15\nTEST AL,AL\nJZ 0x00407ee9\nINC RBX\nMOV RBP,qword ptr [RBP + 0x8]\nTEST RBP,RBP\nJNZ 0x00407ec0\nADD R13,0x10\nCMP R13,qword ptr [R12 + 0x8]\nJC 0x00407eb1\nJMP 0x00407ee9\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1026
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n49 89 fc\n4d 8b 2c 24\n4d 3b 6c 24 08\n73 38\n31 db\n49 83 7d 00 00\n74 22\n4d 85 ed\n74 1d\n4c 89 ed\n48 8b 7d 00\n4c 89 f6\n41 ff d7\n84 c0\n74 1b\n48 ff c3\n48 8b 6d 08\n48 85 ed\n75 e6\n49 83 c5 10\n4d 3b 6c 24 08\n72 cc\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1027
S'.text:0000000000407e90\n.text:0000000000407e91\n.text:0000000000407e93\n.text:0000000000407e95\n.text:0000000000407e97\n.text:0000000000407e99\n.text:0000000000407e9a\n.text:0000000000407e9b\n.text:0000000000407e9e\n.text:0000000000407ea1\n.text:0000000000407ea4\n.text:0000000000407ea8\n.text:0000000000407ead\n.text:0000000000407eaf\n.text:0000000000407eb1\n.text:0000000000407eb6\n.text:0000000000407eb8\n.text:0000000000407ebb\n.text:0000000000407ebd\n.text:0000000000407ec0\n.text:0000000000407ec4\n.text:0000000000407ec7\n.text:0000000000407eca\n.text:0000000000407ecc\n.text:0000000000407ece\n.text:0000000000407ed1\n.text:0000000000407ed5\n.text:0000000000407ed8\n.text:0000000000407eda\n.text:0000000000407ede\n.text:0000000000407ee3\n.text:0000000000407ee5\n.text:0000000000407ee7\n.text:0000000000407ee9\n.text:0000000000407eec\n.text:0000000000407ef0\n.text:0000000000407ef1\n.text:0000000000407ef3\n.text:0000000000407ef5\n.text:0000000000407ef7\n.text:0000000000407ef9\n.text:0000000000407efa\n'
p1028
tp1029
sS'usage'
p1030
(S'\n__stdcall usage()\n'
p1031
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... [FILE]...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "Remove (unlink) the FILE(s).\u005cn\u005cn  -f, --force           ignore nonexistent files and arguments, never prompt\u005cn  -i                    prompt before every removal\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -I                    prompt once before removing more than three files, or\u005cn                          when removing recursively; less intrusive than -i,\u005cn                          while still giving protection against most mistakes\u005cn      --interactive[=WHEN]  prompt according to WHEN: never, once (-I), or\u005cn                          always (-i); without WHEN, prompt always\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --one-file-system  when removing a hierarchy recursively, skip any\u005cn                          directory that is on a file system different from\u005cn                          that of the corresponding command line argument\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --no-preserve-root  do not treat \u005c'/\u005c' specially\u005cn      --preserve-root   do not remove \u005c'/\u005c' (default)\u005cn  -r, -R, --recursive   remove directories and their contents recursively\u005cn  -d, --dir             remove empty directories\u005cn  -v, --verbose         explain what is being done\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnBy default, rm does not remove directories.  Use the --recursive (-r or -R)\u005cnoption to remove each listed directory, too, along with all of its contents.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    uVar1 = dcgettext(0,\u000a                      "\u005cnTo remove a file whose name starts with a \u005c'-\u005c', for example \u005c'-foo\u005c',\u005cnuse one of these commands:\u005cn  %s -- -foo\u005cn\u005cn  %s ./-foo\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,program_name,program_name);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnNote that if you use rm to remove a file, it might be possible to recover\u005cnsome of its contents, given sufficient expertise and/or time.  For greater\u005cnassurance that the contents are truly unrecoverable, consider using shred.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p1032
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401e2e\nXOR EDI,EDI\nMOV ESI,0x409850\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060e358]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401ac0\nXOR EDI,EDI\nMOV ESI,0x409871\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x409911\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x409a89\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x409b69\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x409c81\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x409cae\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x409ce4\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x00401970\nXOR EDI,EDI\nMOV ESI,0x409d7f\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060e358]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nCALL 0x00401ac0\nXOR EDI,EDI\nMOV ESI,0x409df9\nMOV EDX,0x5\nCALL 0x00401860\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x00401970\nCALL 0x00401e80\nMOV EDI,EBX\nCALL 0x00401b60\nCALL 0x00401e40\nMOV EDI,EBX\nCALL 0x00401b60\n'
p1033
S'53\n89 fb\n85 db\n0f 85 63 01 00 00\n31 ff\nbe 50 98 40 00\nba 05 00 00 00\ne8 84 fb ff ff\n48 89 c1\n48 8b 15 72 c6 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 cb fd ff ff\n31 ff\nbe 71 98 40 00\nba 05 00 00 00\ne8 5a fb ff ff\n48 8b 35 db c5 20 00\n48 89 c7\ne8 5b fc ff ff\n31 ff\nbe 11 99 40 00\nba 05 00 00 00\ne8 3a fb ff ff\n48 8b 35 bb c5 20 00\n48 89 c7\ne8 3b fc ff ff\n31 ff\nbe 89 9a 40 00\nba 05 00 00 00\ne8 1a fb ff ff\n48 8b 35 9b c5 20 00\n48 89 c7\ne8 1b fc ff ff\n31 ff\nbe 69 9b 40 00\nba 05 00 00 00\ne8 fa fa ff ff\n48 8b 35 7b c5 20 00\n48 89 c7\ne8 fb fb ff ff\n31 ff\nbe 81 9c 40 00\nba 05 00 00 00\ne8 da fa ff ff\n48 8b 35 5b c5 20 00\n48 89 c7\ne8 db fb ff ff\n31 ff\nbe ae 9c 40 00\nba 05 00 00 00\ne8 ba fa ff ff\n48 8b 35 3b c5 20 00\n48 89 c7\ne8 bb fb ff ff\n31 ff\nbe e4 9c 40 00\nba 05 00 00 00\ne8 9a fa ff ff\n48 8b 35 1b c5 20 00\n48 89 c7\ne8 9b fb ff ff\n31 ff\nbe 7f 9d 40 00\nba 05 00 00 00\ne8 7a fa ff ff\n48 89 c1\n48 8b 15 68 c5 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\ne8 be fc ff ff\n31 ff\nbe f9 9d 40 00\nba 05 00 00 00\ne8 4d fa ff ff\n48 8b 35 ce c4 20 00\n48 89 c7\ne8 4e fb ff ff\ne8 59 00 00 00\n89 df\ne8 32 fd ff ff\ne8 0d 00 00 00\n89 df\ne8 26 fd ff ff\n'
p1034
S'.text:0000000000401cc0\n.text:0000000000401cc1\n.text:0000000000401cc3\n.text:0000000000401cc5\n.text:0000000000401ccb\n.text:0000000000401ccd\n.text:0000000000401cd2\n.text:0000000000401cd7\n.text:0000000000401cdc\n.text:0000000000401cdf\n.text:0000000000401ce6\n.text:0000000000401ceb\n.text:0000000000401ced\n.text:0000000000401cf0\n.text:0000000000401cf5\n.text:0000000000401cf7\n.text:0000000000401cfc\n.text:0000000000401d01\n.text:0000000000401d06\n.text:0000000000401d0d\n.text:0000000000401d10\n.text:0000000000401d15\n.text:0000000000401d17\n.text:0000000000401d1c\n.text:0000000000401d21\n.text:0000000000401d26\n.text:0000000000401d2d\n.text:0000000000401d30\n.text:0000000000401d35\n.text:0000000000401d37\n.text:0000000000401d3c\n.text:0000000000401d41\n.text:0000000000401d46\n.text:0000000000401d4d\n.text:0000000000401d50\n.text:0000000000401d55\n.text:0000000000401d57\n.text:0000000000401d5c\n.text:0000000000401d61\n.text:0000000000401d66\n.text:0000000000401d6d\n.text:0000000000401d70\n.text:0000000000401d75\n.text:0000000000401d77\n.text:0000000000401d7c\n.text:0000000000401d81\n.text:0000000000401d86\n.text:0000000000401d8d\n.text:0000000000401d90\n.text:0000000000401d95\n.text:0000000000401d97\n.text:0000000000401d9c\n.text:0000000000401da1\n.text:0000000000401da6\n.text:0000000000401dad\n.text:0000000000401db0\n.text:0000000000401db5\n.text:0000000000401db7\n.text:0000000000401dbc\n.text:0000000000401dc1\n.text:0000000000401dc6\n.text:0000000000401dcd\n.text:0000000000401dd0\n.text:0000000000401dd5\n.text:0000000000401dd7\n.text:0000000000401ddc\n.text:0000000000401de1\n.text:0000000000401de6\n.text:0000000000401de9\n.text:0000000000401df0\n.text:0000000000401df5\n.text:0000000000401df7\n.text:0000000000401dfa\n.text:0000000000401dfd\n.text:0000000000401e02\n.text:0000000000401e04\n.text:0000000000401e09\n.text:0000000000401e0e\n.text:0000000000401e13\n.text:0000000000401e1a\n.text:0000000000401e1d\n.text:0000000000401e22\n.text:0000000000401e27\n.text:0000000000401e29\n.text:0000000000401e2e\n.text:0000000000401e33\n.text:0000000000401e35\n'
p1035
tp1036
sS'cache_stat_init'
p1037
(S'\n__stdcall cache_stat_init()\n'
p1038
V\u000astat * cache_stat_init(void)\u000a\u000a{\u000a  stat *in_RAX;\u000a  long in_RDI;\u000a  \u000a  *(undefined8 *)(in_RDI + 0x30) = 0xffffffffffffffff;\u000a  return in_RAX;\u000a}\u000a\u000a
p1039
S'MOV qword ptr [RDI + 0x30],-0x1\nRET\n'
p1040
S'48 c7 47 30 ff ff ff ff\nc3\n'
p1041
S'.text:0000000000402f30\n.text:0000000000402f38\n'
p1042
tp1043
sS'quoting_options_from_style'
p1044
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p1045
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1046
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x004048ed\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401770\n'
p1047
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 7e ce ff ff\n'
p1048
S'.text:00000000004048a0\n.text:00000000004048a4\n.text:00000000004048a7\n.text:00000000004048ac\n.text:00000000004048b1\n.text:00000000004048b5\n.text:00000000004048bd\n.text:00000000004048c0\n.text:00000000004048c2\n.text:00000000004048c4\n.text:00000000004048c8\n.text:00000000004048cb\n.text:00000000004048cf\n.text:00000000004048d4\n.text:00000000004048d9\n.text:00000000004048dd\n.text:00000000004048e1\n.text:00000000004048e5\n.text:00000000004048e8\n.text:00000000004048ec\n.text:00000000004048ed\n'
p1049
tp1050
sS'strcpy'
p1051
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p1052
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060e048)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1053
S'JMP qword ptr [0x0060e048]\n'
p1054
S'ff 25 92 c8 20 00\n'
p1055
S'.plt:00000000004017b0\n'
p1056
tp1057
sS'rotl8'
p1058
(S'\n__stdcall rotl8()\n'
p1059
V\u000auint8_t rotl8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI >> (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p1060
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p1061
S'89 f8\n89 f1\nd3 e0\nb9 08 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p1062
S'.text:00000000004092c0\n.text:00000000004092c2\n.text:00000000004092c4\n.text:00000000004092c6\n.text:00000000004092cb\n.text:00000000004092cd\n.text:00000000004092cf\n.text:00000000004092d1\n.text:00000000004092d3\n'
p1063
tp1064
sS'opendirat'
p1065
(S'\n__stdcall opendirat(char * dir, int * pdir_fd)\n'
p1066
V\u000aDIR * opendirat(char *dir,int *pdir_fd)\u000a\u000a{\u000a  int iVar1;\u000a  int __fd;\u000a  DIR *pDVar2;\u000a  int *piVar3;\u000a  int *in_RCX;\u000a  uint in_EDX;\u000a  \u000a  pDVar2 = (DIR *)0x0;\u000a  __fd = openat_safer(dir,pdir_fd,(ulong)(in_EDX | 0x10900));\u000a  if (-1 < __fd) {\u000a    set_cloexec_flag();\u000a    pDVar2 = fdopendir(__fd);\u000a    if (pDVar2 == (DIR *)0x0) {\u000a      piVar3 = __errno_location();\u000a      iVar1 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar1;\u000a      pDVar2 = (DIR *)0x0;\u000a    }\u000a    else {\u000a      *in_RCX = __fd;\u000a    }\u000a  }\u000a  return (DIR *)pDVar2;\u000a}\u000a\u000a
p1067
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RCX\nOR EDX,0x10900\nXOR EBX,EBX\nXOR EAX,EAX\nCALL 0x00408ec0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00407663\nMOV ESI,0x1\nMOV EDI,EBP\nCALL 0x004078e0\nMOV EDI,EBP\nCALL 0x00401b20\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040764c\nMOV dword ptr [R14],EBP\nJMP 0x00407663\nCALL 0x00401780\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401940\nMOV dword ptr [RBX],R14D\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1068
S'55\n41 56\n53\n49 89 ce\n81 ca 00 09 01 00\n31 db\n31 c0\ne8 9a 18 00 00\n89 c5\n85 ed\n78 37\nbe 01 00 00 00\n89 ef\ne8 a8 02 00 00\n89 ef\ne8 e1 a4 ff ff\n48 89 c3\n48 85 db\n74 05\n41 89 2e\neb 17\ne8 2f a1 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 e2 a2 ff ff\n44 89 33\n31 db\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p1069
S'.text:0000000000407610\n.text:0000000000407611\n.text:0000000000407613\n.text:0000000000407614\n.text:0000000000407617\n.text:000000000040761d\n.text:000000000040761f\n.text:0000000000407621\n.text:0000000000407626\n.text:0000000000407628\n.text:000000000040762a\n.text:000000000040762c\n.text:0000000000407631\n.text:0000000000407633\n.text:0000000000407638\n.text:000000000040763a\n.text:000000000040763f\n.text:0000000000407642\n.text:0000000000407645\n.text:0000000000407647\n.text:000000000040764a\n.text:000000000040764c\n.text:0000000000407651\n.text:0000000000407654\n.text:0000000000407657\n.text:0000000000407659\n.text:000000000040765e\n.text:0000000000407661\n.text:0000000000407663\n.text:0000000000407666\n.text:0000000000407667\n.text:0000000000407669\n.text:000000000040766a\n'
p1070
tp1071
sS'c_isgraph'
p1072
(S'\n__stdcall c_isgraph()\n'
p1073
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p1074
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p1075
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p1076
S'.text:0000000000407820\n.text:0000000000407823\n.text:0000000000407826\n.text:0000000000407829\n'
p1077
tp1078
sS'lstatat'
p1079
(S'\n__stdcall lstatat(char * name, stat * st)\n'
p1080
V\u000aint lstatat(char *name,stat *st)\u000a\u000a{\u000a  int iVar1;\u000a  stat *__buf;\u000a  \u000a  iVar1 = fstatat((int)name,(char *)st,__buf,0x100);\u000a  return iVar1;\u000a}\u000a\u000a
p1081
S'MOV ECX,0x100\nJMP 0x004093e0\n'
p1082
S'b9 00 01 00 00\ne9 16 44 00 00\n'
p1083
S'.text:0000000000404fc0\n.text:0000000000404fc5\n'
p1084
tp1085
sS'hash_get_next'
p1086
(S'\n__stdcall hash_get_next(Hash_table * table, void * entry)\n'
p1087
V\u000avoid * hash_get_next(Hash_table *table,void *entry)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  phVar3 = phVar2;\u000a  while( true ) {\u000a    phVar1 = phVar3->next;\u000a    if ((phVar3->data == entry) && (phVar1 != (hash_entry *)0x0)) break;\u000a    phVar3 = phVar1;\u000a    if (phVar1 == (hash_entry *)0x0) {\u000a      do {\u000a        phVar2 = phVar2 + 1;\u000a        if (table->bucket_limit <= phVar2) {\u000a          return (void *)0x0;\u000a        }\u000a      } while (phVar2->data == (void *)0x0);\u000a      return phVar2->data;\u000a    }\u000a  }\u000a  return phVar1->data;\u000a}\u000a\u000a
p1088
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x00407d50\nMOV RCX,RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,RCX\nMOV RCX,qword ptr [RSI + 0x8]\nTEST RCX,RCX\nSETZ DL\nCMP qword ptr [RSI],RBX\nJNZ 0x00407df6\nTEST DL,DL\nJZ 0x00407e23\nTEST RCX,RCX\nJNZ 0x00407de0\nMOV RDX,qword ptr [R14 + 0x8]\nADD RAX,0x10\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP RAX,RDX\nJNC 0x00407e28\nMOV RCX,qword ptr [RAX]\nADD RAX,0x10\nTEST RCX,RCX\nJZ 0x00407e10\nJMP 0x00407e2a\nMOV RCX,qword ptr [RCX]\nJMP 0x00407e2a\nXOR ECX,ECX\nMOV RAX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1089
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 81 ff ff ff\n48 89 c1\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ce\n48 8b 4e 08\n48 85 c9\n0f 94 c2\n48 39 1e\n75 04\n84 d2\n74 2d\n48 85 c9\n75 e5\n49 8b 56 08\n48 83 c0 10\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 d0\n73 13\n48 8b 08\n48 83 c0 10\n48 85 c9\n74 ef\neb 07\n48 8b 09\neb 02\n31 c9\n48 89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1090
S'.text:0000000000407dc0\n.text:0000000000407dc2\n.text:0000000000407dc3\n.text:0000000000407dc4\n.text:0000000000407dc7\n.text:0000000000407dca\n.text:0000000000407dcf\n.text:0000000000407dd2\n.text:0000000000407de0\n.text:0000000000407de3\n.text:0000000000407de7\n.text:0000000000407dea\n.text:0000000000407ded\n.text:0000000000407df0\n.text:0000000000407df2\n.text:0000000000407df4\n.text:0000000000407df6\n.text:0000000000407df9\n.text:0000000000407dfb\n.text:0000000000407dff\n.text:0000000000407e03\n.text:0000000000407e10\n.text:0000000000407e13\n.text:0000000000407e15\n.text:0000000000407e18\n.text:0000000000407e1c\n.text:0000000000407e1f\n.text:0000000000407e21\n.text:0000000000407e23\n.text:0000000000407e26\n.text:0000000000407e28\n.text:0000000000407e2a\n.text:0000000000407e2d\n.text:0000000000407e31\n.text:0000000000407e32\n.text:0000000000407e34\n'
p1091
tp1092
sS'i_ring_pop'
p1093
(S'\n__stdcall i_ring_pop(I_ring * ir)\n'
p1094
V\u000aint i_ring_pop(I_ring *ir)\u000a\u000a{\u000a  int iVar1;\u000a  _Bool _Var2;\u000a  \u000a  _Var2 = i_ring_empty(ir);\u000a  if (_Var2 != false) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = ir->ir_data[(ulong)ir->ir_front];\u000a  ir->ir_data[(ulong)ir->ir_front] = ir->ir_default_val;\u000a  if (ir->ir_front == ir->ir_back) {\u000a    ir->ir_empty = true;\u000a    return iVar1;\u000a  }\u000a  ir->ir_front = ir->ir_front + 3 & 3;\u000a  return iVar1;\u000a}\u000a\u000a
p1095
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00408b00\nTEST AL,AL\nJNZ 0x00408b82\nMOV ECX,dword ptr [RBX + 0x10]\nMOV EDX,dword ptr [RBX + 0x14]\nMOV EAX,dword ptr [RBX + RDX*0x4]\nMOV dword ptr [RBX + RDX*0x4],ECX\nMOV ECX,dword ptr [RBX + 0x14]\nCMP ECX,dword ptr [RBX + 0x18]\nJNZ 0x00408b77\nMOV byte ptr [RBX + 0x1c],0x1\nPOP RBX\nRET\nADD ECX,0x3\nAND ECX,0x3\nMOV dword ptr [RBX + 0x14],ECX\nPOP RBX\nRET\nCALL 0x00401770\n'
p1096
S'53\n48 89 fb\ne8 a7 ff ff ff\n84 c0\n75 25\n8b 4b 10\n8b 53 14\n8b 04 93\n89 0c 93\n8b 4b 14\n3b 4b 18\n75 06\nc6 43 1c 01\n5b\nc3\n83 c1 03\n83 e1 03\n89 4b 14\n5b\nc3\ne8 e9 8b ff ff\n'
p1097
S'.text:0000000000408b50\n.text:0000000000408b51\n.text:0000000000408b54\n.text:0000000000408b59\n.text:0000000000408b5b\n.text:0000000000408b5d\n.text:0000000000408b60\n.text:0000000000408b63\n.text:0000000000408b66\n.text:0000000000408b69\n.text:0000000000408b6c\n.text:0000000000408b6f\n.text:0000000000408b71\n.text:0000000000408b75\n.text:0000000000408b76\n.text:0000000000408b77\n.text:0000000000408b7a\n.text:0000000000408b7d\n.text:0000000000408b80\n.text:0000000000408b81\n.text:0000000000408b82\n'
p1098
tp1099
sS'quotearg_buffer_restyled'
p1100
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p1101
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040391c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040391c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040391c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040391c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040391c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040391c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040391c_caseD_7;\u000aswitchD_0040391c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040391c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040391c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_004043e0;\u000aLAB_00403b00:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_004043e9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_004043f8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_00403b0b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_00403b4f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_00403b4f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_004043f8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00404325;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00404230;\u000a    }\u000a    goto LAB_004043f8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040435a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_004043f8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00404389;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403e48;\u000a  case '\u005ca':\u000a    goto joined_r0x00403d38;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00403d38;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00403b66_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00403d38;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00403d38;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00403b66_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00403d38:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040429e;\u000a    }\u000a    goto LAB_004043f8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_004043f8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_004043f8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_004043f8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_004043f8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_004043f8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00403b66_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_004042f6;\u000a      goto joined_r0x004042e8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403df1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x004042e8;\u000a      goto LAB_004042f6;\u000a    }\u000a    goto LAB_004043f8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_004043f8;\u000a  }\u000a  goto joined_r0x00404230;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040435a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00404389;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00404389:\u000a  if (1 < uVar10) {\u000aLAB_00403e66:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403f22;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403df1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403f22:\u000a        if (bVar6 != 0) goto LAB_004043f8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403e48:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403e66;\u000ajoined_r0x00404230:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00404230:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00404257;\u000aLAB_00404290:\u000a    if (bVar22) goto LAB_00404295;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00404290;\u000aLAB_00404257:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00404295:\u000a      if (bVar6 != 0) goto LAB_004043f8;\u000aLAB_0040429e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x004042e8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_004042f6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x004042e8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00404325:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00403b00;\u000aLAB_004043e0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_004043e9;\u000a  goto LAB_00403b0b;\u000a}\u000a\u000a
p1102
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401870\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x004044c5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x40a7a0 + RAX*0x8]\nMOV EDI,0x40acc6\nMOV ESI,R15D\nCALL 0x00404b70\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x40acc8\nMOV ESI,R15D\nCALL 0x00404b70\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040397d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00403980\nNOP\nCMP R12,RSI\nJNC 0x0040396e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00403960\nJMP 0x00403980\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401880\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x00403a4c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x00403a4c\nMOV ECX,0x40acc4\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00403a46\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x004039e7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00403a14\nTEST RSI,RSI\nJZ 0x00403a01\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x40acc8\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00403a22\nMOV ECX,0x40acc8\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x00403a4c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040449c\nMOV ECX,0x40acc4\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x004043e0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x004043e9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x00403b4f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x00403b4a\nCMP R11,-0x1\nJNZ 0x00403b4a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401880\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00403ba0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00403dfc\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x40a7f8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x004043f8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00404250\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00404257\nJMP 0x00404290\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401960\nTEST EAX,EAX\nSETZ AL\nJNZ 0x00403bed\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00403b51\nJMP 0x004043f8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00403b51\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x00403b7b\nCMP EBX,0x2\nJNZ 0x00403b7b\nTEST R13,R13\nJNZ 0x00403b7b\nJMP 0x004043f8\nCMP R11,-0x1\nJZ 0x00403fd3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403ff3\nJMP 0x00403b7b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404004\nTEST R8B,R8B\nJNZ 0x004043f8\nCMP EBX,0x2\nJNZ 0x00403ca8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403ca8\nCMP R12,RSI\nJNC 0x00403c83\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403c92\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403ca1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403cb2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00404178\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00404178\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00404178\nCMP RCX,RSI\nJNC 0x00403cec\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x00403cfb\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403b86\nJMP 0x00404250\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403b79\nJMP 0x00403d5a\nMOV DL,0x74\nJMP 0x00403d42\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403b79\nJMP 0x00403d5a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403b79\nJMP 0x00403d5a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x004043f8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403b79\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040429e\nJMP 0x004043f8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00403b79\nTEST R8B,R8B\nJNZ 0x004043f8\nCMP R12,RSI\nJNC 0x00403d8a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403d99\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403da8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00403b79\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040418b\nCMP EBX,0x2\nJNZ 0x00403b79\nTEST R8B,R8B\nJZ 0x00403b79\nJMP 0x004043f8\nCMP EBX,0x2\nJNZ 0x00404024\nTEST R8B,R8B\nJNZ 0x004043f8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x004042f6\nJMP 0x00404319\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00404045\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401bb0\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404238\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00404238\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403f22\nJMP 0x00403ef0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403ed9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403ed6\nCMP R12,RSI\nJNC 0x00403ebb\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x00403eca\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403f10\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403f10\nTEST BPL,0x1\nJZ 0x00403fb3\nCMP R12,RSI\nJNC 0x00403f04\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403fb3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403ef0\nTEST R8B,R8B\nJNZ 0x004043f8\nCMP EBX,0x2\nJNZ 0x00403f6a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x00403f6a\nCMP R12,RSI\nJNC 0x00403f42\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403f51\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403f60\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403f74\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403f8b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403fa5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403ea0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x004042f6\nJMP 0x00404319\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x00403b7b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x00403b7b\nJMP 0x004043f8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00404325\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403b86\nJMP 0x00404250\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00403d42\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x004042f6\nJMP 0x00404319\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00404067\nMOV RDI,R10\nCALL 0x00401880\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x004018c0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040433f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00404337\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00404346\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040412e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00404126\nBT RDI,RDX\nJC 0x00404492\nINC RCX\nCMP RCX,R14\nJC 0x00404110\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401ba0\nTEST EAX,EAX\nJNZ 0x00404143\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401b90\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00404085\nJMP 0x00404389\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403b86\nJMP 0x00404250\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00403b79\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00403b79\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00403b79\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x00403b7b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x004043c2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x004043f8\nCMP R12,RSI\nJNC 0x004041ee\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00404201\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404210\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040421f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403b86\nJMP 0x00404250\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403b86\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00404290\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00404295\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x004042f0\nJMP 0x00404295\nTEST BPL,BPL\nJZ 0x004042f0\nTEST R8B,R8B\nJNZ 0x004043f8\nCMP EBX,0x2\nJNZ 0x004042d8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004042d8\nCMP R12,RSI\nJNC 0x004042b3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004042c2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004042d1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004042e2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00404322\nJMP 0x0040431e\nTEST DIL,0x1\nJZ 0x00404319\nAND AL,0x1\nJNZ 0x00404319\nCMP R12,RSI\nJNC 0x00404304\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404313\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00404322\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x004043e0\nJMP 0x00403b00\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00404384\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040437c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x004043b8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040435a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00404389\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403e48\nJMP 0x00403e66\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00404389\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403b86\nJMP 0x00404250\nCMP R13,R11\nJNZ 0x00403b0b\nTEST R8B,R8B\nJZ 0x00404452\nCMP EBX,0x2\nJNZ 0x00404452\nTEST R12,R12\nJNZ 0x00404452\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00403890\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00404486\nTEST R8B,R8B\nJNZ 0x00404486\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00404486\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00404479\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00404470\nCMP R12,RSI\nJNC 0x0040443d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040443d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x004043f8\nTEST RSI,RSI\nJZ 0x004044a9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x40acc4\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x00403a4c\nCALL 0x00401770\n'
p1103
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 b2 df ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 a0 a7 40 00\nbf c6 ac 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf c8 ac 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 f3 de ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 c4 ac 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 c8 ac 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 c8 ac 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 c4 ac 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 53 dd ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd f8 a7 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 a7 dd ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 97 dd ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 21 d8 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 13 d8 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 69 da ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 32 da ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 c4 ac 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 a6 d2 ff ff\n'
p1104
S'.text:0000000000403890\n.text:0000000000403891\n.text:0000000000403893\n.text:0000000000403895\n.text:0000000000403897\n.text:0000000000403899\n.text:000000000040389a\n.text:00000000004038a1\n.text:00000000004038a4\n.text:00000000004038a7\n.text:00000000004038aa\n.text:00000000004038af\n.text:00000000004038b4\n.text:00000000004038b9\n.text:00000000004038be\n.text:00000000004038c6\n.text:00000000004038ca\n.text:00000000004038d0\n.text:00000000004038d8\n.text:00000000004038dd\n.text:00000000004038e5\n.text:00000000004038ea\n.text:00000000004038ee\n.text:00000000004038f0\n.text:00000000004038f3\n.text:00000000004038f6\n.text:00000000004038f9\n.text:00000000004038fe\n.text:0000000000403901\n.text:0000000000403904\n.text:0000000000403907\n.text:000000000040390a\n.text:000000000040390c\n.text:000000000040390f\n.text:0000000000403914\n.text:0000000000403917\n.text:000000000040391c\n.text:0000000000403923\n.text:0000000000403928\n.text:000000000040392b\n.text:0000000000403930\n.text:0000000000403935\n.text:000000000040393a\n.text:000000000040393d\n.text:0000000000403942\n.text:0000000000403947\n.text:000000000040394c\n.text:000000000040394e\n.text:0000000000403950\n.text:0000000000403955\n.text:0000000000403957\n.text:000000000040395a\n.text:000000000040395c\n.text:000000000040395e\n.text:0000000000403960\n.text:0000000000403963\n.text:0000000000403965\n.text:000000000040396a\n.text:000000000040396e\n.text:0000000000403974\n.text:0000000000403977\n.text:0000000000403979\n.text:000000000040397b\n.text:000000000040397d\n.text:0000000000403980\n.text:0000000000403985\n.text:0000000000403988\n.text:000000000040398d\n.text:0000000000403992\n.text:0000000000403995\n.text:0000000000403998\n.text:000000000040399b\n.text:000000000040399e\n.text:00000000004039a3\n.text:00000000004039a6\n.text:00000000004039a9\n.text:00000000004039ae\n.text:00000000004039b1\n.text:00000000004039b3\n.text:00000000004039b6\n.text:00000000004039b8\n.text:00000000004039ba\n.text:00000000004039bd\n.text:00000000004039c2\n.text:00000000004039c7\n.text:00000000004039cc\n.text:00000000004039cf\n.text:00000000004039d5\n.text:00000000004039d7\n.text:00000000004039da\n.text:00000000004039dd\n.text:00000000004039e0\n.text:00000000004039e2\n.text:00000000004039e4\n.text:00000000004039e7\n.text:00000000004039ea\n.text:00000000004039ef\n.text:00000000004039f2\n.text:00000000004039f4\n.text:00000000004039f7\n.text:00000000004039f9\n.text:00000000004039fe\n.text:0000000000403a01\n.text:0000000000403a06\n.text:0000000000403a0c\n.text:0000000000403a12\n.text:0000000000403a14\n.text:0000000000403a19\n.text:0000000000403a1f\n.text:0000000000403a22\n.text:0000000000403a25\n.text:0000000000403a28\n.text:0000000000403a2a\n.text:0000000000403a2f\n.text:0000000000403a32\n.text:0000000000403a38\n.text:0000000000403a3d\n.text:0000000000403a43\n.text:0000000000403a46\n.text:0000000000403a49\n.text:0000000000403a4c\n.text:0000000000403a54\n.text:0000000000403a56\n.text:0000000000403a58\n.text:0000000000403a5b\n.text:0000000000403a5f\n.text:0000000000403a61\n.text:0000000000403a64\n.text:0000000000403a68\n.text:0000000000403a6a\n.text:0000000000403a6d\n.text:0000000000403a70\n.text:0000000000403a73\n.text:0000000000403a75\n.text:0000000000403a79\n.text:0000000000403a7b\n.text:0000000000403a7f\n.text:0000000000403a82\n.text:0000000000403a85\n.text:0000000000403a88\n.text:0000000000403a8a\n.text:0000000000403a8e\n.text:0000000000403a97\n.text:0000000000403a9a\n.text:0000000000403a9c\n.text:0000000000403aa0\n.text:0000000000403aa2\n.text:0000000000403aa6\n.text:0000000000403aa8\n.text:0000000000403aab\n.text:0000000000403aaf\n.text:0000000000403ab1\n.text:0000000000403ab4\n.text:0000000000403ab8\n.text:0000000000403abd\n.text:0000000000403ac0\n.text:0000000000403ac4\n.text:0000000000403acc\n.text:0000000000403acf\n.text:0000000000403ad2\n.text:0000000000403ad4\n.text:0000000000403ad8\n.text:0000000000403adb\n.text:0000000000403add\n.text:0000000000403ae2\n.text:0000000000403ae6\n.text:0000000000403aeb\n.text:0000000000403af0\n.text:0000000000403af4\n.text:0000000000403afa\n.text:0000000000403b00\n.text:0000000000403b05\n.text:0000000000403b0b\n.text:0000000000403b10\n.text:0000000000403b12\n.text:0000000000403b17\n.text:0000000000403b1b\n.text:0000000000403b1d\n.text:0000000000403b21\n.text:0000000000403b23\n.text:0000000000403b25\n.text:0000000000403b28\n.text:0000000000403b2d\n.text:0000000000403b2f\n.text:0000000000403b34\n.text:0000000000403b39\n.text:0000000000403b3d\n.text:0000000000403b42\n.text:0000000000403b47\n.text:0000000000403b4a\n.text:0000000000403b4d\n.text:0000000000403b4f\n.text:0000000000403b51\n.text:0000000000403b56\n.text:0000000000403b5a\n.text:0000000000403b60\n.text:0000000000403b62\n.text:0000000000403b64\n.text:0000000000403b66\n.text:0000000000403b6e\n.text:0000000000403b73\n.text:0000000000403b79\n.text:0000000000403b7b\n.text:0000000000403b80\n.text:0000000000403b86\n.text:0000000000403b8f\n.text:0000000000403b95\n.text:0000000000403ba0\n.text:0000000000403ba2\n.text:0000000000403ba5\n.text:0000000000403ba9\n.text:0000000000403bb1\n.text:0000000000403bb4\n.text:0000000000403bb9\n.text:0000000000403bbb\n.text:0000000000403bbe\n.text:0000000000403bc0\n.text:0000000000403bc5\n.text:0000000000403bc8\n.text:0000000000403bcd\n.text:0000000000403bd0\n.text:0000000000403bd5\n.text:0000000000403bd9\n.text:0000000000403bde\n.text:0000000000403be0\n.text:0000000000403be2\n.text:0000000000403be8\n.text:0000000000403bed\n.text:0000000000403bf2\n.text:0000000000403bf5\n.text:0000000000403bfa\n.text:0000000000403bfe\n.text:0000000000403c03\n.text:0000000000403c08\n.text:0000000000403c0a\n.text:0000000000403c0c\n.text:0000000000403c11\n.text:0000000000403c13\n.text:0000000000403c16\n.text:0000000000403c1c\n.text:0000000000403c1f\n.text:0000000000403c25\n.text:0000000000403c28\n.text:0000000000403c2e\n.text:0000000000403c33\n.text:0000000000403c37\n.text:0000000000403c3d\n.text:0000000000403c40\n.text:0000000000403c43\n.text:0000000000403c47\n.text:0000000000403c4a\n.text:0000000000403c4c\n.text:0000000000403c4f\n.text:0000000000403c55\n.text:0000000000403c5a\n.text:0000000000403c5f\n.text:0000000000403c65\n.text:0000000000403c68\n.text:0000000000403c6e\n.text:0000000000403c71\n.text:0000000000403c73\n.text:0000000000403c75\n.text:0000000000403c77\n.text:0000000000403c79\n.text:0000000000403c7c\n.text:0000000000403c7e\n.text:0000000000403c83\n.text:0000000000403c88\n.text:0000000000403c8b\n.text:0000000000403c8d\n.text:0000000000403c92\n.text:0000000000403c97\n.text:0000000000403c9a\n.text:0000000000403c9c\n.text:0000000000403ca1\n.text:0000000000403ca5\n.text:0000000000403ca8\n.text:0000000000403cab\n.text:0000000000403cad\n.text:0000000000403cb2\n.text:0000000000403cb7\n.text:0000000000403cb9\n.text:0000000000403cbc\n.text:0000000000403cbf\n.text:0000000000403cc5\n.text:0000000000403cc9\n.text:0000000000403ccc\n.text:0000000000403cd2\n.text:0000000000403cd6\n.text:0000000000403cd9\n.text:0000000000403cdc\n.text:0000000000403ce2\n.text:0000000000403ce5\n.text:0000000000403ce7\n.text:0000000000403cec\n.text:0000000000403cf1\n.text:0000000000403cf4\n.text:0000000000403cf6\n.text:0000000000403cfb\n.text:0000000000403cff\n.text:0000000000403d04\n.text:0000000000403d0a\n.text:0000000000403d0f\n.text:0000000000403d11\n.text:0000000000403d16\n.text:0000000000403d1c\n.text:0000000000403d1e\n.text:0000000000403d20\n.text:0000000000403d22\n.text:0000000000403d24\n.text:0000000000403d29\n.text:0000000000403d2f\n.text:0000000000403d31\n.text:0000000000403d33\n.text:0000000000403d38\n.text:0000000000403d3e\n.text:0000000000403d40\n.text:0000000000403d42\n.text:0000000000403d47\n.text:0000000000403d49\n.text:0000000000403d4f\n.text:0000000000403d54\n.text:0000000000403d5a\n.text:0000000000403d5d\n.text:0000000000403d60\n.text:0000000000403d66\n.text:0000000000403d6b\n.text:0000000000403d6e\n.text:0000000000403d71\n.text:0000000000403d77\n.text:0000000000403d7a\n.text:0000000000403d80\n.text:0000000000403d83\n.text:0000000000403d85\n.text:0000000000403d8a\n.text:0000000000403d8f\n.text:0000000000403d92\n.text:0000000000403d94\n.text:0000000000403d99\n.text:0000000000403d9e\n.text:0000000000403da1\n.text:0000000000403da3\n.text:0000000000403da8\n.text:0000000000403dac\n.text:0000000000403dae\n.text:0000000000403db3\n.text:0000000000403db6\n.text:0000000000403db9\n.text:0000000000403dbf\n.text:0000000000403dc2\n.text:0000000000403dc8\n.text:0000000000403dcb\n.text:0000000000403dd1\n.text:0000000000403dd6\n.text:0000000000403dd9\n.text:0000000000403ddf\n.text:0000000000403de2\n.text:0000000000403de8\n.text:0000000000403deb\n.text:0000000000403ded\n.text:0000000000403df1\n.text:0000000000403df7\n.text:0000000000403dfc\n.text:0000000000403e00\n.text:0000000000403e09\n.text:0000000000403e0f\n.text:0000000000403e14\n.text:0000000000403e19\n.text:0000000000403e1e\n.text:0000000000403e21\n.text:0000000000403e26\n.text:0000000000403e29\n.text:0000000000403e2c\n.text:0000000000403e31\n.text:0000000000403e36\n.text:0000000000403e3a\n.text:0000000000403e3f\n.text:0000000000403e44\n.text:0000000000403e48\n.text:0000000000403e4a\n.text:0000000000403e4f\n.text:0000000000403e55\n.text:0000000000403e58\n.text:0000000000403e5a\n.text:0000000000403e5d\n.text:0000000000403e60\n.text:0000000000403e66\n.text:0000000000403e6b\n.text:0000000000403e6e\n.text:0000000000403e71\n.text:0000000000403e74\n.text:0000000000403e77\n.text:0000000000403e79\n.text:0000000000403e7d\n.text:0000000000403e7f\n.text:0000000000403e84\n.text:0000000000403e89\n.text:0000000000403e8f\n.text:0000000000403ea0\n.text:0000000000403ea5\n.text:0000000000403ea7\n.text:0000000000403eaa\n.text:0000000000403eac\n.text:0000000000403eaf\n.text:0000000000403eb1\n.text:0000000000403eb4\n.text:0000000000403eb6\n.text:0000000000403ebb\n.text:0000000000403ec0\n.text:0000000000403ec3\n.text:0000000000403ec5\n.text:0000000000403eca\n.text:0000000000403ece\n.text:0000000000403ed6\n.text:0000000000403ed9\n.text:0000000000403edc\n.text:0000000000403ede\n.text:0000000000403ee2\n.text:0000000000403ef0\n.text:0000000000403ef4\n.text:0000000000403efa\n.text:0000000000403efd\n.text:0000000000403eff\n.text:0000000000403f04\n.text:0000000000403f07\n.text:0000000000403f09\n.text:0000000000403f10\n.text:0000000000403f13\n.text:0000000000403f18\n.text:0000000000403f1b\n.text:0000000000403f20\n.text:0000000000403f22\n.text:0000000000403f25\n.text:0000000000403f2b\n.text:0000000000403f2e\n.text:0000000000403f30\n.text:0000000000403f34\n.text:0000000000403f36\n.text:0000000000403f38\n.text:0000000000403f3b\n.text:0000000000403f3d\n.text:0000000000403f42\n.text:0000000000403f47\n.text:0000000000403f4a\n.text:0000000000403f4c\n.text:0000000000403f51\n.text:0000000000403f56\n.text:0000000000403f59\n.text:0000000000403f5b\n.text:0000000000403f60\n.text:0000000000403f64\n.text:0000000000403f66\n.text:0000000000403f6a\n.text:0000000000403f6d\n.text:0000000000403f6f\n.text:0000000000403f74\n.text:0000000000403f79\n.text:0000000000403f7c\n.text:0000000000403f7e\n.text:0000000000403f81\n.text:0000000000403f84\n.text:0000000000403f87\n.text:0000000000403f8b\n.text:0000000000403f90\n.text:0000000000403f93\n.text:0000000000403f95\n.text:0000000000403f98\n.text:0000000000403f9b\n.text:0000000000403f9e\n.text:0000000000403fa1\n.text:0000000000403fa5\n.text:0000000000403fa9\n.text:0000000000403fad\n.text:0000000000403fb1\n.text:0000000000403fb3\n.text:0000000000403fb7\n.text:0000000000403fba\n.text:0000000000403fc0\n.text:0000000000403fc4\n.text:0000000000403fc8\n.text:0000000000403fce\n.text:0000000000403fd3\n.text:0000000000403fd6\n.text:0000000000403fd9\n.text:0000000000403fde\n.text:0000000000403fe1\n.text:0000000000403fe3\n.text:0000000000403fe6\n.text:0000000000403fed\n.text:0000000000403ff3\n.text:0000000000403ff5\n.text:0000000000403ff9\n.text:0000000000403fff\n.text:0000000000404004\n.text:0000000000404009\n.text:000000000040400f\n.text:0000000000404012\n.text:0000000000404014\n.text:0000000000404019\n.text:000000000040401f\n.text:0000000000404024\n.text:0000000000404026\n.text:000000000040402b\n.text:0000000000404031\n.text:0000000000404033\n.text:0000000000404036\n.text:000000000040403a\n.text:0000000000404040\n.text:0000000000404045\n.text:0000000000404051\n.text:0000000000404055\n.text:0000000000404057\n.text:000000000040405a\n.text:000000000040405f\n.text:0000000000404064\n.text:0000000000404067\n.text:000000000040406b\n.text:0000000000404070\n.text:0000000000404072\n.text:0000000000404076\n.text:0000000000404078\n.text:0000000000404080\n.text:0000000000404085\n.text:000000000040408a\n.text:000000000040408e\n.text:0000000000404092\n.text:000000000040409a\n.text:000000000040409d\n.text:00000000004040a2\n.text:00000000004040a5\n.text:00000000004040a8\n.text:00000000004040ad\n.text:00000000004040b0\n.text:00000000004040b3\n.text:00000000004040b9\n.text:00000000004040bd\n.text:00000000004040c7\n.text:00000000004040cd\n.text:00000000004040d1\n.text:00000000004040d6\n.text:00000000004040dc\n.text:00000000004040e0\n.text:00000000004040e3\n.text:00000000004040e7\n.text:00000000004040e9\n.text:00000000004040ee\n.text:00000000004040f3\n.text:00000000004040f7\n.text:00000000004040f9\n.text:00000000004040fe\n.text:0000000000404103\n.text:0000000000404107\n.text:000000000040410c\n.text:0000000000404110\n.text:0000000000404114\n.text:0000000000404117\n.text:000000000040411a\n.text:000000000040411c\n.text:0000000000404120\n.text:0000000000404126\n.text:0000000000404129\n.text:000000000040412c\n.text:000000000040412e\n.text:0000000000404132\n.text:0000000000404137\n.text:0000000000404139\n.text:000000000040413b\n.text:0000000000404143\n.text:0000000000404148\n.text:000000000040414b\n.text:0000000000404153\n.text:0000000000404156\n.text:0000000000404159\n.text:000000000040415e\n.text:0000000000404161\n.text:0000000000404163\n.text:0000000000404168\n.text:000000000040416d\n.text:0000000000404173\n.text:0000000000404178\n.text:000000000040417b\n.text:0000000000404180\n.text:0000000000404186\n.text:000000000040418b\n.text:0000000000404190\n.text:0000000000404196\n.text:000000000040419a\n.text:000000000040419d\n.text:00000000004041a3\n.text:00000000004041a9\n.text:00000000004041af\n.text:00000000004041b4\n.text:00000000004041b6\n.text:00000000004041b9\n.text:00000000004041bf\n.text:00000000004041c3\n.text:00000000004041c5\n.text:00000000004041cf\n.text:00000000004041d3\n.text:00000000004041d9\n.text:00000000004041dc\n.text:00000000004041de\n.text:00000000004041e4\n.text:00000000004041e7\n.text:00000000004041e9\n.text:00000000004041ee\n.text:00000000004041f3\n.text:00000000004041f6\n.text:00000000004041fa\n.text:00000000004041fc\n.text:0000000000404201\n.text:0000000000404206\n.text:0000000000404209\n.text:000000000040420b\n.text:0000000000404210\n.text:0000000000404215\n.text:0000000000404218\n.text:000000000040421a\n.text:000000000040421f\n.text:0000000000404223\n.text:0000000000404225\n.text:0000000000404228\n.text:000000000040422b\n.text:0000000000404230\n.text:0000000000404236\n.text:0000000000404238\n.text:000000000040423d\n.text:0000000000404242\n.text:0000000000404248\n.text:0000000000404250\n.text:0000000000404255\n.text:0000000000404257\n.text:000000000040425c\n.text:000000000040425f\n.text:0000000000404261\n.text:0000000000404264\n.text:0000000000404266\n.text:0000000000404269\n.text:000000000040426c\n.text:000000000040426f\n.text:0000000000404271\n.text:0000000000404279\n.text:000000000040427c\n.text:000000000040427e\n.text:0000000000404280\n.text:0000000000404290\n.text:0000000000404293\n.text:0000000000404295\n.text:0000000000404298\n.text:000000000040429e\n.text:00000000004042a1\n.text:00000000004042a3\n.text:00000000004042a5\n.text:00000000004042a7\n.text:00000000004042a9\n.text:00000000004042ac\n.text:00000000004042ae\n.text:00000000004042b3\n.text:00000000004042b8\n.text:00000000004042bb\n.text:00000000004042bd\n.text:00000000004042c2\n.text:00000000004042c7\n.text:00000000004042ca\n.text:00000000004042cc\n.text:00000000004042d1\n.text:00000000004042d5\n.text:00000000004042d8\n.text:00000000004042db\n.text:00000000004042dd\n.text:00000000004042e2\n.text:00000000004042e5\n.text:00000000004042e8\n.text:00000000004042ea\n.text:00000000004042f0\n.text:00000000004042f4\n.text:00000000004042f6\n.text:00000000004042f8\n.text:00000000004042fa\n.text:00000000004042fd\n.text:00000000004042ff\n.text:0000000000404304\n.text:0000000000404309\n.text:000000000040430c\n.text:000000000040430e\n.text:0000000000404313\n.text:0000000000404317\n.text:0000000000404319\n.text:000000000040431c\n.text:000000000040431e\n.text:0000000000404322\n.text:0000000000404325\n.text:0000000000404328\n.text:000000000040432c\n.text:0000000000404332\n.text:0000000000404337\n.text:000000000040433f\n.text:0000000000404344\n.text:0000000000404346\n.text:000000000040434e\n.text:0000000000404353\n.text:0000000000404355\n.text:000000000040435a\n.text:000000000040435f\n.text:0000000000404363\n.text:0000000000404365\n.text:000000000040436a\n.text:000000000040436d\n.text:0000000000404370\n.text:0000000000404372\n.text:000000000040437a\n.text:000000000040437c\n.text:0000000000404384\n.text:0000000000404389\n.text:000000000040438d\n.text:0000000000404392\n.text:0000000000404397\n.text:000000000040439b\n.text:00000000004043a0\n.text:00000000004043a5\n.text:00000000004043a9\n.text:00000000004043ad\n.text:00000000004043b3\n.text:00000000004043b8\n.text:00000000004043c0\n.text:00000000004043c2\n.text:00000000004043c4\n.text:00000000004043c8\n.text:00000000004043cd\n.text:00000000004043d3\n.text:00000000004043e0\n.text:00000000004043e3\n.text:00000000004043e9\n.text:00000000004043ec\n.text:00000000004043ee\n.text:00000000004043f1\n.text:00000000004043f3\n.text:00000000004043f6\n.text:00000000004043f8\n.text:0000000000404400\n.text:0000000000404406\n.text:000000000040440a\n.text:000000000040440d\n.text:0000000000404411\n.text:0000000000404416\n.text:000000000040441a\n.text:000000000040441e\n.text:0000000000404421\n.text:0000000000404424\n.text:0000000000404427\n.text:000000000040442b\n.text:000000000040442f\n.text:0000000000404431\n.text:0000000000404436\n.text:000000000040443a\n.text:000000000040443d\n.text:0000000000404440\n.text:0000000000404447\n.text:0000000000404448\n.text:000000000040444a\n.text:000000000040444c\n.text:000000000040444e\n.text:0000000000404450\n.text:0000000000404451\n.text:0000000000404452\n.text:000000000040445a\n.text:000000000040445d\n.text:000000000040445f\n.text:0000000000404462\n.text:0000000000404464\n.text:0000000000404466\n.text:0000000000404468\n.text:000000000040446a\n.text:000000000040446d\n.text:0000000000404470\n.text:0000000000404473\n.text:0000000000404475\n.text:0000000000404479\n.text:000000000040447c\n.text:000000000040447f\n.text:0000000000404482\n.text:0000000000404484\n.text:0000000000404486\n.text:0000000000404489\n.text:000000000040448b\n.text:0000000000404490\n.text:0000000000404492\n.text:0000000000404497\n.text:000000000040449c\n.text:000000000040449f\n.text:00000000004044a1\n.text:00000000004044a6\n.text:00000000004044a9\n.text:00000000004044ae\n.text:00000000004044b1\n.text:00000000004044b7\n.text:00000000004044bd\n.text:00000000004044c0\n.text:00000000004044c5\n'
p1105
tp1106
sS'is_zero_or_power_of_two'
p1107
(S'\n__stdcall is_zero_or_power_of_two(uintmax_t i)\n'
p1108
V\u000a_Bool is_zero_or_power_of_two(uintmax_t i)\u000a\u000a{\u000a  return (_Bool)((i - 1 & i) == 0);\u000a}\u000a\u000a
p1109
S'LEA RAX,[RDI + -0x1]\nTEST RAX,RDI\nSETZ AL\nRET\n'
p1110
S'48 8d 47 ff\n48 85 f8\n0f 94 c0\nc3\n'
p1111
S'.text:0000000000407a50\n.text:0000000000407a54\n.text:0000000000407a57\n.text:0000000000407a5a\n'
p1112
tp1113
sS'rotr_sz'
p1114
(S'\n__stdcall rotr_sz(size_t x)\n'
p1115
V\u000asize_t rotr_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1116
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1117
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1118
S'.text:0000000000409270\n.text:0000000000409272\n.text:0000000000409275\n.text:0000000000409278\n'
p1119
tp1120
sS'set_quoting_style'
p1121
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p1122
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p1123
S'TEST RDI,RDI\nMOV EAX,0x60e360\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p1124
S'48 85 ff\nb8 60 e3 60 00\n48 0f 45 c7\n89 30\nc3\n'
p1125
S'.text:0000000000403770\n.text:0000000000403773\n.text:0000000000403778\n.text:000000000040377c\n.text:000000000040377e\n'
p1126
tp1127
sS'hash_get_entries'
p1128
(S'\n__stdcall hash_get_entries(Hash_table * table, void * * buffer, size_t buffer_size)\n'
p1129
V\u000asize_t hash_get_entries(Hash_table *table,void **buffer,size_t buffer_size)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  ulong uVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = table->bucket;\u000a  if (table->bucket_limit <= phVar3) {\u000a    return 0;\u000a  }\u000a  uVar2 = 0;\u000a  do {\u000a    phVar1 = phVar3;\u000a    if (phVar3->data != (void *)0x0) {\u000a      while (phVar1 != (hash_entry *)0x0) {\u000a        if (buffer_size <= uVar2) {\u000a          return uVar2;\u000a        }\u000a        buffer[uVar2] = phVar1->data;\u000a        uVar2 = uVar2 + 1;\u000a        phVar1 = phVar1->next;\u000a      }\u000a    }\u000a    phVar3 = phVar3 + 1;\u000a  } while (phVar3 < table->bucket_limit);\u000a  return uVar2;\u000a}\u000a\u000a
p1130
S'MOV R8,qword ptr [RDI]\nCMP R8,qword ptr [RDI + 0x8]\nJNC 0x00407e83\nXOR EAX,EAX\nCMP qword ptr [R8],0x0\nJZ 0x00407e78\nTEST R8,R8\nJZ 0x00407e78\nMOV R9,R8\nNOP dword ptr [RAX]\nCMP RAX,RDX\nJNC 0x00407e82\nMOV RCX,qword ptr [R9]\nMOV qword ptr [RSI + RAX*0x8],RCX\nINC RAX\nMOV R9,qword ptr [R9 + 0x8]\nTEST R9,R9\nJNZ 0x00407e60\nADD R8,0x10\nCMP R8,qword ptr [RDI + 0x8]\nJC 0x00407e4b\nRET\nXOR EAX,EAX\nRET\n'
p1131
S'4c 8b 07\n4c 3b 47 08\n73 3a\n31 c0\n49 83 38 00\n74 27\n4d 85 c0\n74 22\n4d 89 c1\n0f 1f 80 00 00 00 00\n48 39 d0\n73 1d\n49 8b 09\n48 89 0c c6\n48 ff c0\n4d 8b 49 08\n4d 85 c9\n75 e8\n49 83 c0 10\n4c 3b 47 08\n72 c9\nc3\n31 c0\nc3\n'
p1132
S'.text:0000000000407e40\n.text:0000000000407e43\n.text:0000000000407e47\n.text:0000000000407e49\n.text:0000000000407e4b\n.text:0000000000407e4f\n.text:0000000000407e51\n.text:0000000000407e54\n.text:0000000000407e56\n.text:0000000000407e59\n.text:0000000000407e60\n.text:0000000000407e63\n.text:0000000000407e65\n.text:0000000000407e68\n.text:0000000000407e6c\n.text:0000000000407e6f\n.text:0000000000407e73\n.text:0000000000407e76\n.text:0000000000407e78\n.text:0000000000407e7c\n.text:0000000000407e80\n.text:0000000000407e82\n.text:0000000000407e83\n.text:0000000000407e85\n'
p1133
tp1134
sS'textdomain'
p1135
(S'\n__stdcall textdomain()\n'
p1136
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060e088)();\u000a  return;\u000a}\u000a\u000a
p1137
S'JMP qword ptr [0x0060e088]\n'
p1138
S'ff 25 52 c8 20 00\n'
p1139
S'.plt:0000000000401830\n'
p1140
tp1141
sS'xmemdup'
p1142
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p1143
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p1144
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00405520\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004019d0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1145
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 4c c3 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p1146
S'.text:0000000000405660\n.text:0000000000405662\n.text:0000000000405664\n.text:0000000000405665\n.text:0000000000405668\n.text:000000000040566b\n.text:000000000040566e\n.text:0000000000405673\n.text:0000000000405676\n.text:0000000000405679\n.text:000000000040567c\n.text:000000000040567f\n.text:0000000000405684\n.text:0000000000405687\n.text:0000000000405688\n.text:000000000040568a\n.text:000000000040568c\n'
p1147
tp1148
sS'setup_dir'
p1149
(S'\n__stdcall setup_dir(FTS * fts)\n'
p1150
V\u000a_Bool setup_dir(FTS *fts)\u000a\u000a{\u000a  Hash_table *pHVar1;\u000a  cycle_check_state *state;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) == 0) {\u000a    state = (cycle_check_state *)malloc(0x20);\u000a    *(cycle_check_state **)&fts->fts_cycle = state;\u000a    if (state == (cycle_check_state *)0x0) {\u000a      return false;\u000a    }\u000a    cycle_check_init(state);\u000a  }\u000a  else {\u000a    pHVar1 = hash_initialize(0x1f,(Hash_tuning *)0x0,AD_hash,AD_compare,free);\u000a    *(Hash_table **)&fts->fts_cycle = pHVar1;\u000a    if (pHVar1 == (Hash_table *)0x0) {\u000a      return false;\u000a    }\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1151
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOVZX EAX,word ptr [RBX + 0x48]\nTEST AX,0x102\nJZ 0x0040605b\nXOR R14D,R14D\nMOV EDI,0x1f\nXOR ESI,ESI\nMOV EDX,0x407580\nMOV ECX,0x407590\nMOV R8D,0x401760\nCALL 0x00407f60\nMOV qword ptr [RBX + 0x58],RAX\nTEST RAX,RAX\nJNZ 0x00406076\nJMP 0x00406079\nMOV EDI,0x20\nCALL 0x00401a20\nMOV qword ptr [RBX + 0x58],RAX\nTEST RAX,RAX\nJZ 0x00406084\nMOV RDI,RAX\nCALL 0x004079c0\nMOV R14B,0x1\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nXOR R14D,R14D\nJMP 0x00406079\n'
p1152
S'41 56\n53\n50\n48 89 fb\n0f b7 43 48\n66 a9 02 01\n74 2a\n45 31 f6\nbf 1f 00 00 00\n31 f6\nba 80 75 40 00\nb9 90 75 40 00\n41 b8 60 17 40 00\ne8 10 1f 00 00\n48 89 43 58\n48 85 c0\n75 1d\neb 1e\nbf 20 00 00 00\ne8 bb b9 ff ff\n48 89 43 58\n48 85 c0\n74 16\n48 89 c7\ne8 4a 19 00 00\n41 b6 01\n44 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n45 31 f6\neb f0\n'
p1153
S'.text:0000000000406020\n.text:0000000000406022\n.text:0000000000406023\n.text:0000000000406024\n.text:0000000000406027\n.text:000000000040602b\n.text:000000000040602f\n.text:0000000000406031\n.text:0000000000406034\n.text:0000000000406039\n.text:000000000040603b\n.text:0000000000406040\n.text:0000000000406045\n.text:000000000040604b\n.text:0000000000406050\n.text:0000000000406054\n.text:0000000000406057\n.text:0000000000406059\n.text:000000000040605b\n.text:0000000000406060\n.text:0000000000406065\n.text:0000000000406069\n.text:000000000040606c\n.text:000000000040606e\n.text:0000000000406071\n.text:0000000000406076\n.text:0000000000406079\n.text:000000000040607c\n.text:0000000000406080\n.text:0000000000406081\n.text:0000000000406083\n.text:0000000000406084\n.text:0000000000406087\n'
p1154
tp1155
sS'get_quoting_style'
p1156
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p1157
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p1158
S'TEST RDI,RDI\nMOV EAX,0x60e360\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p1159
S'48 85 ff\nb8 60 e3 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p1160
S'.text:0000000000403760\n.text:0000000000403763\n.text:0000000000403768\n.text:000000000040376c\n.text:000000000040376e\n'
p1161
tp1162
sS'ferror_unlocked'
p1163
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p1164
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060e130)();\u000a  return iVar1;\u000a}\u000a\u000a
p1165
S'JMP qword ptr [0x0060e130]\n'
p1166
S'ff 25 aa c7 20 00\n'
p1167
S'.plt:0000000000401980\n'
p1168
tp1169
sS'exit'
p1170
(S'\n__stdcall exit(int __status)\n'
p1171
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060e220)();\u000a  return;\u000a}\u000a\u000a
p1172
S'JMP qword ptr [0x0060e220]\n'
p1173
S'ff 25 ba c6 20 00\n'
p1174
S'.plt:0000000000401b60\n'
p1175
tp1176
sS'safe_hasher'
p1177
(S'\n__stdcall safe_hasher(Hash_table * table, void * key)\n'
p1178
V\u000ahash_entry * safe_hasher(Hash_table *table,void *key)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*table->hasher)(key,table->n_buckets);\u000a  if (sVar1 < table->n_buckets) {\u000a    return table->bucket + sVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1179
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL qword ptr [RBX + 0x30]\nCMP RAX,qword ptr [RBX + 0x10]\nJNC 0x00407d70\nSHL RAX,0x4\nADD RAX,qword ptr [RBX]\nPOP RBX\nRET\nCALL 0x00401770\n'
p1180
S'53\n48 89 fb\n48 8b 43 10\n48 89 f7\n48 89 c6\nff 53 30\n48 3b 43 10\n73 09\n48 c1 e0 04\n48 03 03\n5b\nc3\ne8 fb 99 ff ff\n'
p1181
S'.text:0000000000407d50\n.text:0000000000407d51\n.text:0000000000407d54\n.text:0000000000407d58\n.text:0000000000407d5b\n.text:0000000000407d5e\n.text:0000000000407d61\n.text:0000000000407d65\n.text:0000000000407d67\n.text:0000000000407d6b\n.text:0000000000407d6e\n.text:0000000000407d6f\n.text:0000000000407d70\n'
p1182
tp1183
sS'locale_charset'
p1184
(S'\n__stdcall locale_charset()\n'
p1185
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00408c0d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00408c0d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p1186
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401a40\nTEST RAX,RAX\nMOV R14D,0x40ae19\nCMOVNZ R14,RAX\nCALL 0x00408c20\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00408be5\nJMP 0x00408c0d\nMOV RDI,RBX\nCALL 0x00401880\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401880\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00408c0d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004019a0\nTEST EAX,EAX\nJZ 0x00408c00\nCMP BPL,0x2a\nJNZ 0x00408bc0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00408bc0\nMOV RDI,RBX\nCALL 0x00401880\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x40b638\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1187
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 a2 8e ff ff\n48 85 c0\n41 be 19 ae 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 b8 8c ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 aa 8c ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 b0 8d ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 78 8c ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 38 b6 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p1188
S'.text:0000000000408b90\n.text:0000000000408b91\n.text:0000000000408b93\n.text:0000000000408b94\n.text:0000000000408b99\n.text:0000000000408b9e\n.text:0000000000408ba1\n.text:0000000000408ba7\n.text:0000000000408bab\n.text:0000000000408bb0\n.text:0000000000408bb3\n.text:0000000000408bb6\n.text:0000000000408bb9\n.text:0000000000408bbb\n.text:0000000000408bc0\n.text:0000000000408bc3\n.text:0000000000408bc8\n.text:0000000000408bcc\n.text:0000000000408bd1\n.text:0000000000408bd6\n.text:0000000000408bdb\n.text:0000000000408be0\n.text:0000000000408be3\n.text:0000000000408be5\n.text:0000000000408be8\n.text:0000000000408beb\n.text:0000000000408bf0\n.text:0000000000408bf2\n.text:0000000000408bf4\n.text:0000000000408bf8\n.text:0000000000408bfa\n.text:0000000000408bfe\n.text:0000000000408c00\n.text:0000000000408c03\n.text:0000000000408c08\n.text:0000000000408c0d\n.text:0000000000408c11\n.text:0000000000408c16\n.text:0000000000408c1a\n.text:0000000000408c1b\n.text:0000000000408c1d\n.text:0000000000408c1e\n'
p1189
tp1190
sS'set_program_name'
p1191
(S'\n__stdcall set_program_name(char * argv0)\n'
p1192
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p1193
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004036f1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x004018e0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x004036db\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x40a789\nMOV EDX,0x7\nCALL 0x00401790\nTEST EAX,EAX\nJNZ 0x004036db\nMOV ESI,0x40a791\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401790\nTEST EAX,EAX\nJNZ 0x004036d8\nADD R14,0x3\nMOV qword ptr [0x0060e2e0],R14\nMOV RBX,R14\nMOV qword ptr [0x0060e358],RBX\nMOV qword ptr [0x0060e308],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060e320]\nMOV EDI,0x40a751\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401b70\nCALL 0x00401770\n'
p1194
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 57 e2 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 89 a7 40 00\nba 07 00 00 00\ne8 dd e0 ff ff\n85 c0\n75 24\nbe 91 a7 40 00\nba 03 00 00 00\n4c 89 f7\ne8 c7 e0 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 08 ac 20 00\n4c 89 f3\n48 89 1d 76 ac 20 00\n48 89 1d 1f ac 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 28 ac 20 00\nbf 51 a7 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 64 e4 ff ff\ne8 5f e0 ff ff\n'
p1195
S'.text:0000000000403670\n.text:0000000000403672\n.text:0000000000403673\n.text:0000000000403674\n.text:0000000000403677\n.text:000000000040367a\n.text:000000000040367c\n.text:0000000000403681\n.text:0000000000403684\n.text:0000000000403689\n.text:000000000040368c\n.text:0000000000403690\n.text:0000000000403694\n.text:0000000000403697\n.text:000000000040369a\n.text:000000000040369e\n.text:00000000004036a0\n.text:00000000004036a4\n.text:00000000004036a9\n.text:00000000004036ae\n.text:00000000004036b3\n.text:00000000004036b5\n.text:00000000004036b7\n.text:00000000004036bc\n.text:00000000004036c1\n.text:00000000004036c4\n.text:00000000004036c9\n.text:00000000004036cb\n.text:00000000004036cd\n.text:00000000004036d1\n.text:00000000004036d8\n.text:00000000004036db\n.text:00000000004036e2\n.text:00000000004036e9\n.text:00000000004036ed\n.text:00000000004036ee\n.text:00000000004036f0\n.text:00000000004036f1\n.text:00000000004036f8\n.text:00000000004036fd\n.text:0000000000403702\n.text:0000000000403707\n.text:000000000040370c\n'
p1196
tp1197
sS'quotearg_buffer'
p1198
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p1199
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p1200
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60e360\nCMOVNZ RBP,R8\nCALL 0x00401780\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00403890\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1201
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 60 e3 60 00\n49 0f 45 e8\ne8 48 df ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1202
S'.text:0000000000403810\n.text:0000000000403811\n.text:0000000000403813\n.text:0000000000403815\n.text:0000000000403817\n.text:0000000000403819\n.text:000000000040381a\n.text:000000000040381b\n.text:000000000040381e\n.text:0000000000403821\n.text:0000000000403824\n.text:0000000000403827\n.text:000000000040382a\n.text:000000000040382f\n.text:0000000000403833\n.text:0000000000403838\n.text:000000000040383b\n.text:000000000040383d\n.text:0000000000403841\n.text:0000000000403845\n.text:0000000000403849\n.text:000000000040384d\n.text:0000000000403850\n.text:0000000000403853\n.text:0000000000403856\n.text:0000000000403859\n.text:000000000040385c\n.text:000000000040385f\n.text:0000000000403863\n.text:0000000000403864\n.text:0000000000403869\n.text:000000000040386d\n.text:0000000000403871\n.text:0000000000403873\n.text:0000000000403877\n.text:0000000000403878\n.text:000000000040387a\n.text:000000000040387c\n.text:000000000040387e\n.text:0000000000403880\n.text:0000000000403881\n'
p1203
tp1204
sS'hash_delete'
p1205
(S'\n__stdcall hash_delete(Hash_table * table, void * entry)\n'
p1206
V\u000avoid * hash_delete(Hash_table *table,void *entry)\u000a\u000a{\u000a  ulong uVar1;\u000a  Hash_tuning *pHVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *__ptr;\u000a  _Bool _Var4;\u000a  void *pvVar5;\u000a  ulong uVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_20;\u000a  \u000a  pvVar5 = hash_find_entry(table,entry,&local_20);\u000a  if (pvVar5 == (void *)0x0) {\u000a    pvVar5 = (void *)0x0;\u000a  }\u000a  else {\u000a    table->n_entries = table->n_entries - 1;\u000a    if (local_20->data == (void *)0x0) {\u000a      uVar6 = table->n_buckets_used - 1;\u000a      table->n_buckets_used = uVar6;\u000a      if ((long)uVar6 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar6;\u000a      }\u000a      uVar6 = table->n_buckets;\u000a      if ((long)uVar6 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar6;\u000a      }\u000a      if (fVar7 < fVar8 * table->tuning->shrink_threshold) {\u000a        check_tuning(table);\u000a        uVar6 = table->n_buckets;\u000a        uVar1 = table->n_buckets_used;\u000a        if ((long)uVar1 < 0) {\u000a          fVar7 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a          fVar7 = fVar7 + fVar7;\u000a        }\u000a        else {\u000a          fVar7 = (float)uVar1;\u000a        }\u000a        pHVar2 = table->tuning;\u000a        if ((long)uVar6 < 0) {\u000a          fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a          fVar8 = fVar8 + fVar8;\u000a        }\u000a        else {\u000a          fVar8 = (float)uVar6;\u000a        }\u000a        if (fVar7 < pHVar2->shrink_threshold * fVar8) {\u000a          fVar8 = fVar8 * pHVar2->shrink_factor;\u000a          if (pHVar2->is_n_buckets == false) {\u000a            fVar8 = fVar8 * pHVar2->growth_threshold;\u000a          }\u000a          candidate = (long)fVar8;\u000a          if (DAT_0040b488 <= fVar8) {\u000a            candidate = (long)(fVar8 - DAT_0040b488) ^ 0x8000000000000000;\u000a          }\u000a          _Var4 = hash_rehash(table,candidate);\u000a          if (_Var4 == false) {\u000a            __ptr = table->free_entry_list;\u000a            while (__ptr != (hash_entry *)0x0) {\u000a              phVar3 = __ptr->next;\u000a              free(__ptr);\u000a              __ptr = phVar3;\u000a            }\u000a            table->free_entry_list = (hash_entry *)0x0;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return pvVar5;\u000a}\u000a\u000a
p1207
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDI\nLEA RDX,[RSP + 0x8]\nMOV ECX,0x1\nCALL 0x00408740\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004088aa\nDEC qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x8]\nCMP qword ptr [RAX],0x0\nJNZ 0x004089d9\nMOV RAX,qword ptr [R15 + 0x18]\nDEC RAX\nMOV qword ptr [R15 + 0x18],RAX\nJS 0x004088b2\nCVTSI2SS XMM0,RAX\nJMP 0x004088c7\nXOR R14D,R14D\nJMP 0x004089d9\nMOV RCX,RAX\nSHR RCX,1\nAND EAX,0x1\nOR RAX,RCX\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x10]\nMOV RAX,qword ptr [R15 + 0x28]\nTEST RCX,RCX\nJS 0x004088db\nCVTSI2SS XMM1,RCX\nJMP 0x004088f0\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RAX]\nUCOMISS XMM1,XMM0\nJBE 0x004089d9\nMOV RDI,R15\nCALL 0x00408070\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x0040891c\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nJMP 0x00408934\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x00408947\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x0040895f\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVSS XMM2,dword ptr [RCX]\nMULSS XMM2,XMM0\nUCOMISS XMM2,XMM1\nJBE 0x004089d9\nMULSS XMM0,dword ptr [RCX + 0x4]\nCMP byte ptr [RCX + 0x10],0x0\nJNZ 0x0040897c\nMULSS XMM0,dword ptr [RCX + 0x8]\nMOVSS XMM1,dword ptr [0x0040b488]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x00408310\nTEST AL,AL\nJNZ 0x004089d9\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x004089d1\nNOP\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x00401760\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x004089c0\nMOV qword ptr [R15 + 0x48],0x0\nMOV RAX,R14\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1208
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 ff\n48 8d 54 24 08\nb9 01 00 00 00\ne8 c5 fe ff ff\n49 89 c6\n4d 85 f6\n74 27\n49 ff 4f 20\n48 8b 44 24 08\n48 83 38 00\n0f 85 43 01 00 00\n49 8b 47 18\n48 ff c8\n49 89 47 18\n78 0f\nf3 48 0f 2a c0\neb 1d\n45 31 f6\ne9 27 01 00 00\n48 89 c1\n48 d1 e9\n83 e0 01\n48 09 c8\nf3 48 0f 2a c0\nf3 0f 58 c0\n49 8b 4f 10\n49 8b 47 28\n48 85 c9\n78 07\nf3 48 0f 2a c9\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c9\nf3 0f 58 c9\nf3 0f 59 08\n0f 2e c8\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b f7 ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 0a\n0f 57 c9\nf3 48 0f 2a c9\neb 18\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\n0f 57 c9\nf3 48 0f 2a c9\nf3 0f 58 c9\n49 8b 4f 28\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\nf3 0f 10 11\nf3 0f 59 d0\n0f 2e d1\n76 6d\nf3 0f 59 41 04\n80 79 10 00\n75 05\nf3 0f 59 41 08\nf3 0f 10 0d 04 2b 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 5f f9 ff ff\n84 c0\n75 24\n49 8b 7f 48\n48 85 ff\n74 13\n66 90\n48 8b 5f 08\ne8 97 8d ff ff\n48 85 db\n48 89 df\n75 ef\n49 c7 47 48 00 00 00 00\n4c 89 f0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p1209
S'.text:0000000000408860\n.text:0000000000408862\n.text:0000000000408864\n.text:0000000000408865\n.text:0000000000408869\n.text:000000000040886c\n.text:0000000000408871\n.text:0000000000408876\n.text:000000000040887b\n.text:000000000040887e\n.text:0000000000408881\n.text:0000000000408883\n.text:0000000000408887\n.text:000000000040888c\n.text:0000000000408890\n.text:0000000000408896\n.text:000000000040889a\n.text:000000000040889d\n.text:00000000004088a1\n.text:00000000004088a3\n.text:00000000004088a8\n.text:00000000004088aa\n.text:00000000004088ad\n.text:00000000004088b2\n.text:00000000004088b5\n.text:00000000004088b8\n.text:00000000004088bb\n.text:00000000004088be\n.text:00000000004088c3\n.text:00000000004088c7\n.text:00000000004088cb\n.text:00000000004088cf\n.text:00000000004088d2\n.text:00000000004088d4\n.text:00000000004088d9\n.text:00000000004088db\n.text:00000000004088de\n.text:00000000004088e1\n.text:00000000004088e4\n.text:00000000004088e7\n.text:00000000004088ec\n.text:00000000004088f0\n.text:00000000004088f4\n.text:00000000004088f7\n.text:00000000004088fd\n.text:0000000000408900\n.text:0000000000408905\n.text:0000000000408909\n.text:000000000040890d\n.text:0000000000408910\n.text:0000000000408912\n.text:0000000000408915\n.text:000000000040891a\n.text:000000000040891c\n.text:000000000040891f\n.text:0000000000408922\n.text:0000000000408925\n.text:0000000000408928\n.text:000000000040892b\n.text:0000000000408930\n.text:0000000000408934\n.text:0000000000408938\n.text:000000000040893b\n.text:000000000040893d\n.text:0000000000408940\n.text:0000000000408945\n.text:0000000000408947\n.text:000000000040894a\n.text:000000000040894d\n.text:0000000000408950\n.text:0000000000408953\n.text:0000000000408956\n.text:000000000040895b\n.text:000000000040895f\n.text:0000000000408963\n.text:0000000000408967\n.text:000000000040896a\n.text:000000000040896c\n.text:0000000000408971\n.text:0000000000408975\n.text:0000000000408977\n.text:000000000040897c\n.text:0000000000408984\n.text:0000000000408987\n.text:000000000040898b\n.text:0000000000408990\n.text:000000000040899a\n.text:000000000040899d\n.text:00000000004089a2\n.text:00000000004089a5\n.text:00000000004089a9\n.text:00000000004089ac\n.text:00000000004089b1\n.text:00000000004089b3\n.text:00000000004089b5\n.text:00000000004089b9\n.text:00000000004089bc\n.text:00000000004089be\n.text:00000000004089c0\n.text:00000000004089c4\n.text:00000000004089c9\n.text:00000000004089cc\n.text:00000000004089cf\n.text:00000000004089d1\n.text:00000000004089d9\n.text:00000000004089dc\n.text:00000000004089e0\n.text:00000000004089e1\n.text:00000000004089e3\n.text:00000000004089e5\n'
p1210
tp1211
sS'quotearg_colon'
p1212
(S'\n__stdcall quotearg_colon(char * arg)\n'
p1213
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1214
S'MOV ESI,0x3a\nJMP 0x004049f0\n'
p1215
S'be 3a 00 00 00\neb e9\n'
p1216
S'.text:0000000000404a00\n.text:0000000000404a05\n'
p1217
tp1218
sS'close_stdin'
p1219
(S'\n__stdcall close_stdin()\n'
p1220
V\u000avoid close_stdin(void)\u000a\u000a{\u000a  uint uVar1;\u000a  FILE *fp;\u000a  int iVar2;\u000a  size_t sVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  bool bVar6;\u000a  \u000a  fp = stdin;\u000a  sVar3 = freadahead(stdin);\u000a  bVar6 = false;\u000a  if (sVar3 != 0) {\u000a    iVar2 = rpl_fseeko(fp,0);\u000a    bVar6 = false;\u000a    if (iVar2 == 0) {\u000a      iVar2 = rpl_fflush(stdin);\u000a      bVar6 = iVar2 != 0;\u000a    }\u000a  }\u000a  iVar2 = close_stream(stdin);\u000a  if ((!bVar6) && (iVar2 == 0)) {\u000a    close_stdout();\u000a    return;\u000a  }\u000a  uVar4 = dcgettext(0,"error closing file",5);\u000a  arg = file_name;\u000a  puVar5 = (uint *)__errno_location();\u000a  uVar1 = *puVar5;\u000a  if (arg == (char *)0x0) {\u000a    error(0,(ulong)uVar1,&DAT_0040a649,uVar4);\u000a  }\u000a  else {\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a  }\u000a  close_stdout();\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p1221
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,qword ptr [0x0060e2f0]\nMOV RDI,RBX\nCALL 0x00405850\nXOR EBP,EBP\nTEST RAX,RAX\nJZ 0x004033df\nXOR ESI,ESI\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00405880\nTEST EAX,EAX\nJNZ 0x004033df\nMOV RDI,qword ptr [0x0060e2f0]\nCALL 0x00405800\nTEST EAX,EAX\nSETNZ BPL\nMOV RDI,qword ptr [0x0060e2f0]\nCALL 0x00407950\nTEST BPL,BPL\nJNZ 0x004033fd\nTEST EAX,EAX\nJNZ 0x004033fd\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00403490\nXOR EDI,EDI\nMOV ESI,0x40a64c\nMOV EDX,0x5\nCALL 0x00401860\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060e340]\nCALL 0x00401780\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00403439\nXOR EDI,EDI\nMOV EDX,0x40a649\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401ae0\nJMP 0x00403457\nMOV RDI,RBX\nCALL 0x00404a00\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40a65f\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401ae0\nCALL 0x00403490\nMOV EDI,dword ptr [0x0060e270]\nCALL 0x004017a0\n'
p1222
S'55\n41 56\n53\n48 8b 1d 45 af 20 00\n48 89 df\ne8 9d 24 00 00\n31 ed\n48 85 c0\n74 25\n31 f6\nba 01 00 00 00\n48 89 df\ne8 b7 24 00 00\n85 c0\n75 12\n48 8b 3d 1c af 20 00\ne8 27 24 00 00\n85 c0\n40 0f 95 c5\n48 8b 3d 0a af 20 00\ne8 65 45 00 00\n40 84 ed\n75 0d\n85 c0\n75 09\n5b\n41 5e\n5d\ne9 93 00 00 00\n31 ff\nbe 4c a6 40 00\nba 05 00 00 00\ne8 52 e4 ff ff\n49 89 c6\n48 8b 1d 28 af 20 00\ne8 63 e3 ff ff\n48 85 db\n8b 28\n75 15\n31 ff\nba 49 a6 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 a9 e6 ff ff\neb 1e\n48 89 df\ne8 bf 15 00 00\n48 89 c1\n31 ff\nba 5f a6 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 89 e6 ff ff\ne8 34 00 00 00\n8b 3d 0e ae 20 00\ne8 39 e3 ff ff\n'
p1223
S'.text:00000000004033a0\n.text:00000000004033a1\n.text:00000000004033a3\n.text:00000000004033a4\n.text:00000000004033ab\n.text:00000000004033ae\n.text:00000000004033b3\n.text:00000000004033b5\n.text:00000000004033b8\n.text:00000000004033ba\n.text:00000000004033bc\n.text:00000000004033c1\n.text:00000000004033c4\n.text:00000000004033c9\n.text:00000000004033cb\n.text:00000000004033cd\n.text:00000000004033d4\n.text:00000000004033d9\n.text:00000000004033db\n.text:00000000004033df\n.text:00000000004033e6\n.text:00000000004033eb\n.text:00000000004033ee\n.text:00000000004033f0\n.text:00000000004033f2\n.text:00000000004033f4\n.text:00000000004033f5\n.text:00000000004033f7\n.text:00000000004033f8\n.text:00000000004033fd\n.text:00000000004033ff\n.text:0000000000403404\n.text:0000000000403409\n.text:000000000040340e\n.text:0000000000403411\n.text:0000000000403418\n.text:000000000040341d\n.text:0000000000403420\n.text:0000000000403422\n.text:0000000000403424\n.text:0000000000403426\n.text:000000000040342b\n.text:000000000040342d\n.text:000000000040342f\n.text:0000000000403432\n.text:0000000000403437\n.text:0000000000403439\n.text:000000000040343c\n.text:0000000000403441\n.text:0000000000403444\n.text:0000000000403446\n.text:000000000040344b\n.text:000000000040344d\n.text:000000000040344f\n.text:0000000000403452\n.text:0000000000403457\n.text:000000000040345c\n.text:0000000000403462\n'
p1224
tp1225
sS'rpl_fflush'
p1226
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p1227
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060e188)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p1228
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040581d\nMOV RDI,RBX\nCALL 0x00401a70\nTEST EAX,EAX\nJZ 0x0040581d\nMOV RDI,RBX\nCALL 0x00405830\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401a30\n'
p1229
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 5f c2 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 0a c2 ff ff\n'
p1230
S'.text:0000000000405800\n.text:0000000000405801\n.text:0000000000405804\n.text:0000000000405807\n.text:0000000000405809\n.text:000000000040580c\n.text:0000000000405811\n.text:0000000000405813\n.text:0000000000405815\n.text:0000000000405818\n.text:000000000040581d\n.text:0000000000405820\n.text:0000000000405821\n'
p1231
tp1232
sS'__assert_fail'
p1233
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p1234
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060e0f0)();\u000a  return;\u000a}\u000a\u000a
p1235
S'JMP qword ptr [0x0060e0f0]\n'
p1236
S'ff 25 ea c7 20 00\n'
p1237
S'.plt:0000000000401900\n'
p1238
tp1239
sS'bindtextdomain'
p1240
(S'\n__stdcall bindtextdomain()\n'
p1241
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060e098)();\u000a  return;\u000a}\u000a\u000a
p1242
S'JMP qword ptr [0x0060e098]\n'
p1243
S'ff 25 42 c8 20 00\n'
p1244
S'.plt:0000000000401850\n'
p1245
tp1246
sS'set_char_quoting'
p1247
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p1248
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p1249
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60e360\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p1250
S'89 f1\n48 85 ff\nbe 60 e3 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p1251
S'.text:0000000000403780\n.text:0000000000403782\n.text:0000000000403785\n.text:000000000040378a\n.text:000000000040378e\n.text:0000000000403790\n.text:0000000000403793\n.text:0000000000403797\n.text:000000000040379c\n.text:000000000040379f\n.text:00000000004037a1\n.text:00000000004037a3\n.text:00000000004037a6\n.text:00000000004037a8\n.text:00000000004037ab\n.text:00000000004037ad\n.text:00000000004037b0\n.text:00000000004037b5\n'
p1252
tp1253
sS'quotearg_n'
p1254
(S'\n__stdcall quotearg_n(char * arg)\n'
p1255
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1256
S'MOV RDX,-0x1\nMOV ECX,0x60e360\nJMP 0x00404670\n'
p1257
S'48 c7 c2 ff ff ff ff\nb9 60 e3 60 00\neb 02\n'
p1258
S'.text:0000000000404660\n.text:0000000000404667\n.text:000000000040466c\n'
p1259
tp1260
sS'close_stream'
p1261
(S'\n__stdcall close_stream(FILE * stream)\n'
p1262
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1263
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004017c0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401980\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00408fe0\nTEST EBP,EBP\nJZ 0x0040798b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x004079af\nCALL 0x00401780\nMOV dword ptr [RAX],0x0\nJMP 0x004079af\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x004079af\nTEST CL,CL\nJNZ 0x004079af\nCALL 0x00401780\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1264
S'55\n41 56\n53\n48 89 fb\ne8 64 9e ff ff\n49 89 c6\n48 89 df\ne8 19 a0 ff ff\n89 c5\n48 89 df\ne8 6f 16 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 fd 9d ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 de 9d ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p1265
S'.text:0000000000407950\n.text:0000000000407951\n.text:0000000000407953\n.text:0000000000407954\n.text:0000000000407957\n.text:000000000040795c\n.text:000000000040795f\n.text:0000000000407962\n.text:0000000000407967\n.text:0000000000407969\n.text:000000000040796c\n.text:0000000000407971\n.text:0000000000407973\n.text:0000000000407975\n.text:000000000040797a\n.text:000000000040797c\n.text:000000000040797e\n.text:0000000000407983\n.text:0000000000407989\n.text:000000000040798b\n.text:000000000040798d\n.text:0000000000407990\n.text:0000000000407992\n.text:0000000000407994\n.text:0000000000407997\n.text:0000000000407999\n.text:000000000040799b\n.text:000000000040799d\n.text:00000000004079a2\n.text:00000000004079a4\n.text:00000000004079a7\n.text:00000000004079ac\n.text:00000000004079af\n.text:00000000004079b1\n.text:00000000004079b2\n.text:00000000004079b4\n.text:00000000004079b5\n'
p1266
tp1267
sS'excise'
p1268
(S'\n__stdcall excise(FTS * fts, FTSENT * ent, rm_options * x)\n'
p1269
V\u000aRM_status excise(FTS *fts,FTSENT *ent,rm_options *x)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  undefined8 in_RCX;\u000a  uint uVar6;\u000a  RM_status RVar7;\u000a  \u000a  iVar2 = unlinkat(fts->fts_cwd_fd,ent->fts_accpath,((uint)in_RCX & 0xff) << 9);\u000a  if (iVar2 == 0) {\u000a    RVar7 = RM_OK;\u000a    if (x->verbose != false) {\u000a      pcVar5 = "removed %s\u005cn";\u000a      if ((char)in_RCX != 0) {\u000a        pcVar5 = "removed directory %s\u005cn";\u000a      }\u000a      uVar4 = dcgettext(0,pcVar5,5);\u000a      pcVar5 = quotearg_style((char *)0x4);\u000a      __printf_chk(1,uVar4,pcVar5,pcVar5);\u000a    }\u000a  }\u000a  else {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar6 = *puVar3;\u000a    if (uVar6 == 0x1e) {\u000a      iVar2 = lstatat((char *)(ulong)(uint)fts->fts_cwd_fd,(stat *)ent->fts_accpath);\u000a      if ((iVar2 == 0) || (*puVar3 != 2)) {\u000a        *puVar3 = 0x1e;\u000a      }\u000a      uVar6 = *puVar3;\u000a    }\u000a    _Var1 = ignorable_missing(x);\u000a    RVar7 = RM_OK;\u000a    if (_Var1 == false) {\u000a      if ((((ent->fts_info == 4) && (uVar6 < 0x28)) &&\u000a          ((0x8000320000U >> ((ulong)uVar6 & 0x1f) & 1) != 0)) &&\u000a         ((uVar6 = ent->fts_errno, uVar6 == 0xd || (uVar6 == 1)))) {\u000a        *puVar3 = uVar6;\u000a      }\u000a      uVar6 = *puVar3;\u000a      uVar4 = dcgettext(0,"cannot remove %s",5);\u000a      RVar7 = RM_ERROR;\u000a      pcVar5 = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar6,uVar4,pcVar5);\u000a      mark_ancestor_dirs(ent);\u000a    }\u000a  }\u000a  return RVar7;\u000a}\u000a\u000a
p1270
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x90\nMOV EBX,ECX\nMOV R15,RDX\nMOV R14,RSI\nMOV RBP,RDI\nMOVZX EDX,BL\nSHL EDX,0x9\nMOV EDI,dword ptr [RBP + 0x2c]\nMOV RSI,qword ptr [R14 + 0x30]\nCALL 0x004017d0\nTEST EAX,EAX\nJZ 0x00402e8c\nCALL 0x00401780\nMOV R12,RAX\nMOV EBX,dword ptr [R12]\nCMP EBX,0x1e\nJNZ 0x00402dfb\nMOV EDI,dword ptr [RBP + 0x2c]\nMOV RSI,qword ptr [R14 + 0x30]\nMOV RDX,RSP\nCALL 0x00404fc0\nTEST EAX,EAX\nJZ 0x00402def\nCMP dword ptr [R12],0x2\nJZ 0x00402df7\nMOV dword ptr [R12],0x1e\nMOV EBX,dword ptr [R12]\nMOV RDI,R15\nMOV ESI,EBX\nCALL 0x00403010\nMOV EBP,0x2\nTEST AL,AL\nJNZ 0x00402eda\nMOVZX EAX,word ptr [R14 + 0x70]\nCMP EAX,0x4\nJNZ 0x00402e45\nCMP EBX,0x27\nJA 0x00402e45\nMOV EAX,EBX\nMOV RCX,0x8000320000\nBT RCX,RAX\nJNC 0x00402e45\nMOV EAX,dword ptr [R14 + 0x40]\nCMP EAX,0xd\nJZ 0x00402e41\nCMP EAX,0x1\nJNZ 0x00402e45\nMOV dword ptr [R12],EAX\nMOV R15D,dword ptr [R12]\nXOR EDI,EDI\nMOV ESI,0x40a31b\nMOV EDX,0x5\nCALL 0x00401860\nMOV RBX,RAX\nMOV RSI,qword ptr [R14 + 0x38]\nMOV EBP,0x4\nMOV EDI,0x4\nCALL 0x00404940\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBX\nCALL 0x00401ae0\nMOV RDI,R14\nCALL 0x00402a10\nJMP 0x00402eda\nMOV EBP,0x2\nCMP byte ptr [R15 + 0x19],0x0\nJZ 0x00402eda\nMOV EAX,0x40a5cb\nMOV ESI,0x40a5e1\nTEST BL,BL\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401860\nMOV RBX,RAX\nMOV RSI,qword ptr [R14 + 0x38]\nMOV EDI,0x4\nCALL 0x00404940\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV RDX,RCX\nCALL 0x00401ac0\nMOV EAX,EBP\nADD RSP,0x90\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1271
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec 90 00 00 00\n89 cb\n49 89 d7\n49 89 f6\n48 89 fd\n0f b6 d3\nc1 e2 09\n8b 7d 2c\n49 8b 76 30\ne8 14 ea ff ff\n85 c0\n0f 84 c8 00 00 00\ne8 b7 e9 ff ff\n49 89 c4\n41 8b 1c 24\n83 fb 1e\n75 26\n8b 7d 2c\n49 8b 76 30\n48 89 e2\ne8 dc 21 00 00\n85 c0\n74 07\n41 83 3c 24 02\n74 08\n41 c7 04 24 1e 00 00 00\n41 8b 1c 24\n4c 89 ff\n89 de\ne8 0b 02 00 00\nbd 02 00 00 00\n84 c0\n0f 85 c8 00 00 00\n41 0f b7 46 70\n83 f8 04\n75 29\n83 fb 27\n77 24\n89 d8\n48 b9 00 00 32 00 80 00 00 00\n48 0f a3 c1\n73 12\n41 8b 46 40\n83 f8 0d\n74 05\n83 f8 01\n75 04\n41 89 04 24\n45 8b 3c 24\n31 ff\nbe 1b a3 40 00\nba 05 00 00 00\ne8 06 ea ff ff\n48 89 c3\n49 8b 76 38\nbd 04 00 00 00\nbf 04 00 00 00\ne8 d0 1a 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 da\ne8 5e ec ff ff\n4c 89 f7\ne8 86 fb ff ff\neb 4e\nbd 02 00 00 00\n41 80 7f 19 00\n74 42\nb8 cb a5 40 00\nbe e1 a5 40 00\n84 db\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 ac e9 ff ff\n48 89 c3\n49 8b 76 38\nbf 04 00 00 00\ne8 7b 1a 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n48 89 ca\ne8 e6 eb ff ff\n89 e8\n48 81 c4 90 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1272
S'.text:0000000000402d90\n.text:0000000000402d91\n.text:0000000000402d93\n.text:0000000000402d95\n.text:0000000000402d97\n.text:0000000000402d98\n.text:0000000000402d9f\n.text:0000000000402da1\n.text:0000000000402da4\n.text:0000000000402da7\n.text:0000000000402daa\n.text:0000000000402dad\n.text:0000000000402db0\n.text:0000000000402db3\n.text:0000000000402db7\n.text:0000000000402dbc\n.text:0000000000402dbe\n.text:0000000000402dc4\n.text:0000000000402dc9\n.text:0000000000402dcc\n.text:0000000000402dd0\n.text:0000000000402dd3\n.text:0000000000402dd5\n.text:0000000000402dd8\n.text:0000000000402ddc\n.text:0000000000402ddf\n.text:0000000000402de4\n.text:0000000000402de6\n.text:0000000000402de8\n.text:0000000000402ded\n.text:0000000000402def\n.text:0000000000402df7\n.text:0000000000402dfb\n.text:0000000000402dfe\n.text:0000000000402e00\n.text:0000000000402e05\n.text:0000000000402e0a\n.text:0000000000402e0c\n.text:0000000000402e12\n.text:0000000000402e17\n.text:0000000000402e1a\n.text:0000000000402e1c\n.text:0000000000402e1f\n.text:0000000000402e21\n.text:0000000000402e23\n.text:0000000000402e2d\n.text:0000000000402e31\n.text:0000000000402e33\n.text:0000000000402e37\n.text:0000000000402e3a\n.text:0000000000402e3c\n.text:0000000000402e3f\n.text:0000000000402e41\n.text:0000000000402e45\n.text:0000000000402e49\n.text:0000000000402e4b\n.text:0000000000402e50\n.text:0000000000402e55\n.text:0000000000402e5a\n.text:0000000000402e5d\n.text:0000000000402e61\n.text:0000000000402e66\n.text:0000000000402e6b\n.text:0000000000402e70\n.text:0000000000402e73\n.text:0000000000402e75\n.text:0000000000402e77\n.text:0000000000402e7a\n.text:0000000000402e7d\n.text:0000000000402e82\n.text:0000000000402e85\n.text:0000000000402e8a\n.text:0000000000402e8c\n.text:0000000000402e91\n.text:0000000000402e96\n.text:0000000000402e98\n.text:0000000000402e9d\n.text:0000000000402ea2\n.text:0000000000402ea4\n.text:0000000000402ea8\n.text:0000000000402eaa\n.text:0000000000402eaf\n.text:0000000000402eb4\n.text:0000000000402eb7\n.text:0000000000402ebb\n.text:0000000000402ec0\n.text:0000000000402ec5\n.text:0000000000402ec8\n.text:0000000000402ecd\n.text:0000000000402ecf\n.text:0000000000402ed2\n.text:0000000000402ed5\n.text:0000000000402eda\n.text:0000000000402edc\n.text:0000000000402ee3\n.text:0000000000402ee4\n.text:0000000000402ee6\n.text:0000000000402ee8\n.text:0000000000402eea\n.text:0000000000402eeb\n'
p1273
tp1274
sS'quotearg_colon_mem'
p1275
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p1276
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1277
S'MOV EDX,0x3a\nJMP 0x00404980\n'
p1278
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p1279
S'.text:0000000000404a10\n.text:0000000000404a15\n'
p1280
tp1281
sS'statat'
p1282
(S'\n__stdcall statat(char * name, stat * st)\n'
p1283
V\u000aint statat(char *name,stat *st)\u000a\u000a{\u000a  int iVar1;\u000a  stat *__buf;\u000a  \u000a  iVar1 = fstatat((int)name,(char *)st,__buf,0);\u000a  return iVar1;\u000a}\u000a\u000a
p1284
S'XOR ECX,ECX\nJMP 0x004093e0\n'
p1285
S'31 c9\ne9 29 44 00 00\n'
p1286
S'.text:0000000000404fb0\n.text:0000000000404fb2\n'
p1287
tp1288
sS'xcalloc'
p1289
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p1290
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1291
S'PUSH RAX\nCALL 0x004057b0\nTEST RAX,RAX\nJZ 0x0040564d\nPOP RCX\nRET\nCALL 0x004056b0\n'
p1292
S'50\ne8 6a 01 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p1293
S'.text:0000000000405640\n.text:0000000000405641\n.text:0000000000405646\n.text:0000000000405649\n.text:000000000040564b\n.text:000000000040564c\n.text:000000000040564d\n'
p1294
tp1295
sS'readdir'
p1296
(S'\n__stdcall readdir(DIR * __dirp)\n'
p1297
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adirent * readdir(DIR *__dirp)\u000a\u000a{\u000a  dirent *pdVar1;\u000a  \u000a  pdVar1 = (dirent *)(*(code *)PTR_readdir_0060e170)();\u000a  return pdVar1;\u000a}\u000a\u000a
p1298
S'JMP qword ptr [0x0060e170]\n'
p1299
S'ff 25 6a c7 20 00\n'
p1300
S'.plt:0000000000401a00\n'
p1301
tp1302
sS'fts_open'
p1303
(S'\n__stdcall fts_open(char * * argv, anon_subr_int_FTSENT_ptr_ptr_FTSENT_ptr_ptr * compar)\n'
p1304
V\u000aFTS * fts_open(char **argv,int (*compar)(FTSENT **,FTSENT **))\u000a\u000a{\u000a  uint uVar1;\u000a  _ftsent *p_Var2;\u000a  _Bool _Var3;\u000a  unsigned_short uVar4;\u000a  uint uVar5;\u000a  int iVar6;\u000a  FTS *sp;\u000a  size_t sVar7;\u000a  FTSENT *__ptr;\u000a  int *piVar8;\u000a  size_t more;\u000a  FTSENT *p;\u000a  int (*in_RDX)(_ftsent **,_ftsent **);\u000a  ulong nitems;\u000a  char *__s;\u000a  byte local_59;\u000a  FTSENT *local_58;\u000a  FTSENT *local_48;\u000a  \u000a  uVar1 = (uint)compar;\u000a  if (((0x1fff < uVar1) || ((uVar1 & 0x204) == 0x204)) || (((ulong)compar & 0x12) == 0)) {\u000a    piVar8 = __errno_location();\u000a    *piVar8 = 0x16;\u000a    return (FTS *)0x0;\u000a  }\u000a  sp = (FTS *)malloc(0x80);\u000a  if (sp == (FTS *)0x0) {\u000a    return (FTS *)0x0;\u000a  }\u000a  (sp->fts_fd_ring).ir_default_val = 0;\u000a  (sp->fts_fd_ring).ir_front = 0;\u000a  (sp->fts_fd_ring).ir_back = 0;\u000a  *(undefined4 *)&(sp->fts_fd_ring).ir_empty = 0;\u000a  (sp->fts_fd_ring).ir_data[0] = 0;\u000a  (sp->fts_fd_ring).ir_data[1] = 0;\u000a  (sp->fts_fd_ring).ir_data[2] = 0;\u000a  (sp->fts_fd_ring).ir_data[3] = 0;\u000a  *(undefined4 *)&sp->fts_leaf_optimization_works_ht = 0;\u000a  *(undefined4 *)((long)&sp->fts_leaf_optimization_works_ht + 4) = 0;\u000a  *(undefined4 *)&sp->fts_cycle = 0;\u000a  *(undefined4 *)((long)&sp->fts_cycle + 4) = 0;\u000a  *(undefined4 *)&sp->fts_compar = 0;\u000a  *(undefined4 *)((long)&sp->fts_compar + 4) = 0;\u000a  sp->fts_options = 0;\u000a  *(undefined4 *)&sp->field_0x4c = 0;\u000a  *(undefined4 *)&sp->fts_pathlen = 0;\u000a  *(undefined4 *)((long)&sp->fts_pathlen + 4) = 0;\u000a  *(undefined4 *)&sp->fts_nitems = 0;\u000a  *(undefined4 *)((long)&sp->fts_nitems + 4) = 0;\u000a  *(undefined4 *)&sp->fts_path = 0;\u000a  *(undefined4 *)((long)&sp->fts_path + 4) = 0;\u000a  sp->fts_rfd = 0;\u000a  sp->fts_cwd_fd = 0;\u000a  *(undefined4 *)&sp->fts_array = 0;\u000a  *(undefined4 *)((long)&sp->fts_array + 4) = 0;\u000a  *(undefined4 *)&sp->fts_dev = 0;\u000a  *(undefined4 *)((long)&sp->fts_dev + 4) = 0;\u000a  *(undefined4 *)&sp->fts_cur = 0;\u000a  *(undefined4 *)((long)&sp->fts_cur + 4) = 0;\u000a  *(undefined4 *)&sp->fts_child = 0;\u000a  *(undefined4 *)((long)&sp->fts_child + 4) = 0;\u000a  sp->fts_compar = in_RDX;\u000a  uVar5 = uVar1 & 0xfffffdfb | 4;\u000a  if (((ulong)compar & 2) == 0) {\u000a    uVar5 = uVar1;\u000a  }\u000a  sp->fts_options = uVar5;\u000a  sp->fts_cwd_fd = -100;\u000a  sVar7 = fts_maxarglen(argv);\u000a  more = 0x1000;\u000a  if (0x1000 < sVar7) {\u000a    more = sVar7;\u000a  }\u000a  _Var3 = fts_palloc(sp,more);\u000a  if (_Var3 == false) goto LAB_00405c44;\u000a  if (*argv == (char *)0x0) {\u000a    __ptr = (FTSENT *)0x0;\u000aLAB_00405a0b:\u000a    if (in_RDX == (int (*)(_ftsent **,_ftsent **))0x0) {\u000a      local_59 = 1;\u000a    }\u000a    else {\u000a      local_59 = (byte)(((ulong)*(byte *)((long)&sp->fts_options + 1) & 0xffffffffffffff04) >> 2);\u000a    }\u000a    __s = *argv;\u000a    if (__s == (char *)0x0) {\u000a      local_58 = (FTSENT *)0x0;\u000a    }\u000a    else {\u000a      local_58 = (FTSENT *)0x0;\u000a      local_48 = (FTSENT *)0x0;\u000a      nitems = 0;\u000a      do {\u000a        more = strlen(__s);\u000a        if (((((ulong)compar & 0x1000) == 0) && (2 < more)) && (__s[more - 1] == '/')) {\u000a          do {\u000a            if (__s[more - 2] != '/') break;\u000a            more = more - 1;\u000a          } while (1 < more);\u000a        }\u000a        p = fts_alloc(sp,*argv,more);\u000a        if (p == (FTSENT *)0x0) goto LAB_00405c2b;\u000a        p->fts_level = 0;\u000a        *(FTSENT **)&p->fts_parent = __ptr;\u000a        *(FTSENT **)&p->fts_accpath = p + 1;\u000a        if ((local_58 != (FTSENT *)0x0 & local_59) == 1) {\u000a          p->fts_info = 0xb;\u000a          fts_set_stat_required(p);\u000a          if (in_RDX != (int (*)(_ftsent **,_ftsent **))0x0) goto LAB_00405ac7;\u000aLAB_00405ad2:\u000a          p->fts_link = (_ftsent *)0x0;\u000a          p_Var2 = (_ftsent *)p;\u000a          if (local_58 != (FTSENT *)0x0) {\u000a            *(FTSENT **)&local_48->fts_link = p;\u000a            p_Var2 = (_ftsent *)local_58;\u000a          }\u000a        }\u000a        else {\u000a          uVar4 = fts_stat(sp,p);\u000a          p->fts_info = uVar4;\u000a          if (in_RDX == (int (*)(_ftsent **,_ftsent **))0x0) goto LAB_00405ad2;\u000aLAB_00405ac7:\u000a          *(FTSENT **)&p->fts_link = local_58;\u000a          p_Var2 = (_ftsent *)p;\u000a          p = local_48;\u000a        }\u000a        local_48 = p;\u000a        local_58 = (FTSENT *)p_Var2;\u000a        nitems = nitems + 1;\u000a        __s = argv[1];\u000a        argv = argv + 1;\u000a      } while (__s != (char *)0x0);\u000a      if ((in_RDX != (int (*)(_ftsent **,_ftsent **))0x0) && (1 < nitems)) {\u000a        local_58 = fts_sort(sp,local_58,nitems);\u000a      }\u000a    }\u000a    p = fts_alloc(sp,\u000a                     "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                     + 0xca,0);\u000a    *(FTSENT **)&sp->fts_cur = p;\u000a    if (p != (FTSENT *)0x0) {\u000a      *(FTSENT **)&p->fts_link = local_58;\u000a      sp->fts_cur->fts_info = 9;\u000a      _Var3 = setup_dir(sp);\u000a      if (_Var3 != false) {\u000a        if ((*(ushort *)&sp->fts_options & 0x204) == 0) {\u000a          iVar6 = diropen(sp,".");\u000a          sp->fts_rfd = iVar6;\u000a          if (iVar6 < 0) {\u000a            *(byte *)&sp->fts_options = *(byte *)&sp->fts_options | 4;\u000a          }\u000a        }\u000a        i_ring_init(&sp->fts_fd_ring);\u000a        return sp;\u000a      }\u000a    }\u000aLAB_00405c2b:\u000a    fts_lfree(local_58);\u000a    free(__ptr);\u000a  }\u000a  else {\u000a    __ptr = fts_alloc(sp,\u000a                         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                         + 0xca,0);\u000a    if (__ptr != (FTSENT *)0x0) {\u000a      __ptr->fts_level = -1;\u000a      goto LAB_00405a0b;\u000a    }\u000a  }\u000a  free(sp->fts_path);\u000aLAB_00405c44:\u000a  free(sp);\u000a  return (FTS *)0x0;\u000a}\u000a\u000a
p1305
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RDX\nMOV R14D,ESI\nMOV R15,RDI\nCMP R14D,0x2000\nJNC 0x004059e8\nMOV EAX,R14D\nAND EAX,0x204\nCMP EAX,0x204\nJZ 0x004059e8\nTEST R14B,0x12\nJZ 0x004059e8\nMOV EDI,0x80\nCALL 0x00401a20\nMOV R13,RAX\nTEST R13,R13\nJZ 0x004059f3\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R13 + 0x70],XMM0\nMOVUPS xmmword ptr [R13 + 0x60],XMM0\nMOVUPS xmmword ptr [R13 + 0x50],XMM0\nMOVUPS xmmword ptr [R13 + 0x40],XMM0\nMOVUPS xmmword ptr [R13 + 0x30],XMM0\nMOVUPS xmmword ptr [R13 + 0x20],XMM0\nMOVUPS xmmword ptr [R13 + 0x10],XMM0\nMOVUPS xmmword ptr [R13],XMM0\nMOV qword ptr [R13 + 0x40],RBP\nMOV EAX,R14D\nAND EAX,0xfffffdfb\nOR EAX,0x4\nTEST R14B,0x2\nCMOVZ EAX,R14D\nMOV dword ptr [R13 + 0x48],EAX\nMOV dword ptr [R13 + 0x2c],0xffffff9c\nMOV RDI,R15\nCALL 0x00405c60\nCMP RAX,0x1000\nMOV ESI,0x1000\nCMOVA RSI,RAX\nMOV RDI,R13\nCALL 0x00405cb0\nTEST AL,AL\nJZ 0x00405c44\nCMP qword ptr [R15],0x0\nJZ 0x00405a08\nMOV ESI,0x40ae19\nXOR EDX,EDX\nMOV RDI,R13\nCALL 0x00405d10\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00405c3b\nMOV qword ptr [R12 + 0x58],-0x1\nJMP 0x00405a0b\nCALL 0x00401780\nMOV dword ptr [RAX],0x16\nXOR R13D,R13D\nMOV RAX,R13\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR R12D,R12D\nTEST RBP,RBP\nMOV qword ptr [RSP + 0x28],R13\nJZ 0x00405a24\nMOV AL,byte ptr [R13 + 0x49]\nAND AL,0x4\nSHR AL,0x2\nMOV byte ptr [RSP + 0xf],AL\nJMP 0x00405a29\nMOV byte ptr [RSP + 0xf],0x1\nMOV R13,qword ptr [R15]\nTEST R13,R13\nJZ 0x00405b7e\nMOV qword ptr [RSP + 0x18],R12\nMOV qword ptr [RSP + 0x30],RBP\nAND R14D,0x1000\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nXOR R12D,R12D\nJMP 0x00405b10\nMOV qword ptr [RBP + 0x58],0x0\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBP + 0x8],RAX\nMOV RAX,RBP\nADD RAX,0x108\nMOV qword ptr [RBP + 0x30],RAX\nMOV RBX,qword ptr [RSP + 0x10]\nTEST RBX,RBX\nSETNZ AL\nAND AL,byte ptr [RSP + 0xf]\nCMP AL,0x1\nJNZ 0x00405aae\nMOV word ptr [RBP + 0x70],0xb\nMOV ESI,0x1\nMOV RDI,RBP\nCALL 0x00405da0\nCMP qword ptr [RSP + 0x30],0x0\nJNZ 0x00405ac7\nJMP 0x00405ad2\nXOR EDX,EDX\nMOV RDI,R13\nMOV RSI,RBP\nCALL 0x00405dc0\nMOV word ptr [RBP + 0x70],AX\nCMP qword ptr [RSP + 0x30],0x0\nJZ 0x00405ad2\nMOV qword ptr [RBP + 0x10],RBX\nMOV qword ptr [RSP + 0x10],RBP\nJMP 0x00405aed\nMOV qword ptr [RBP + 0x10],0x0\nTEST RBX,RBX\nJZ 0x00405b02\nMOV RAX,qword ptr [RSP + 0x20]\nMOV qword ptr [RAX + 0x10],RBP\nMOV qword ptr [RSP + 0x20],RBP\nINC R12\nMOV R13,qword ptr [R15 + 0x8]\nADD R15,0x8\nTEST R13,R13\nJNZ 0x00405b10\nJMP 0x00405b87\nMOV RAX,RBP\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x00405acb\nMOV RDI,R13\nCALL 0x00401880\nTEST R14D,R14D\nJNZ 0x00405b50\nCMP RAX,0x3\nJC 0x00405b50\nCMP byte ptr [R13 + RAX*0x1 + -0x1],0x2f\nJNZ 0x00405b50\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [R13 + RAX*0x1 + -0x2],0x2f\nJNZ 0x00405b50\nDEC RAX\nCMP RAX,0x1\nJA 0x00405b30\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [R15]\nMOV R13,qword ptr [RSP + 0x28]\nMOV RDI,R13\nMOV RDX,RAX\nCALL 0x00405d10\nMOV RBP,RAX\nTEST RBP,RBP\nJNZ 0x00405a60\nMOV R12,qword ptr [RSP + 0x18]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00405c2b\nXOR EBX,EBX\nMOV R13,qword ptr [RSP + 0x28]\nJMP 0x00405bbe\nCMP qword ptr [RSP + 0x30],0x0\nMOV R13,qword ptr [RSP + 0x28]\nJZ 0x00405bb4\nCMP R12,0x2\nJC 0x00405bb4\nMOV RDI,R13\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDX,R12\nCALL 0x00405f30\nMOV RBX,RAX\nMOV R12,qword ptr [RSP + 0x18]\nJMP 0x00405bbe\nMOV R12,qword ptr [RSP + 0x18]\nMOV RBX,qword ptr [RSP + 0x10]\nMOV ESI,0x40ae19\nXOR EDX,EDX\nMOV RDI,R13\nCALL 0x00405d10\nMOV qword ptr [R13],RAX\nTEST RAX,RAX\nJZ 0x00405c2b\nMOV qword ptr [RAX + 0x10],RBX\nMOV RAX,qword ptr [R13]\nMOV word ptr [RAX + 0x70],0x9\nMOV RDI,R13\nCALL 0x00406020\nTEST AL,AL\nJZ 0x00405c2b\nMOVZX EAX,word ptr [R13 + 0x48]\nTEST AX,0x204\nJNZ 0x00405c15\nMOV ESI,0x40a360\nMOV RDI,R13\nCALL 0x00406090\nMOV dword ptr [R13 + 0x28],EAX\nTEST EAX,EAX\nJNS 0x00405c15\nOR byte ptr [R13 + 0x48],0x4\nMOV RDI,R13\nADD RDI,0x60\nMOV ESI,0xffffffff\nCALL 0x00408ae0\nJMP 0x004059f6\nMOV RDI,RBX\nCALL 0x004060f0\nMOV RDI,R12\nCALL 0x00401760\nMOV RDI,qword ptr [R13 + 0x20]\nCALL 0x00401760\nMOV RDI,R13\nCALL 0x00401760\nJMP 0x004059f3\n'
p1306
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 d5\n41 89 f6\n49 89 ff\n41 81 fe 00 20 00 00\n0f 83 d4 00 00 00\n44 89 f0\n25 04 02 00 00\n3d 04 02 00 00\n0f 84 c1 00 00 00\n41 f6 c6 12\n0f 84 b7 00 00 00\nbf 80 00 00 00\ne8 e5 c0 ff ff\n49 89 c5\n4d 85 ed\n0f 84 ac 00 00 00\n0f 57 c0\n41 0f 11 45 70\n41 0f 11 45 60\n41 0f 11 45 50\n41 0f 11 45 40\n41 0f 11 45 30\n41 0f 11 45 20\n41 0f 11 45 10\n41 0f 11 45 00\n49 89 6d 40\n44 89 f0\n25 fb fd ff ff\n83 c8 04\n41 f6 c6 02\n41 0f 44 c6\n41 89 45 48\n41 c7 45 2c 9c ff ff ff\n4c 89 ff\ne8 c3 02 00 00\n48 3d 00 10 00 00\nbe 00 10 00 00\n48 0f 47 f0\n4c 89 ef\ne8 fc 02 00 00\n84 c0\n0f 84 88 02 00 00\n49 83 3f 00\n74 46\nbe 19 ae 40 00\n31 d2\n4c 89 ef\ne8 3f 03 00 00\n49 89 c4\n4d 85 e4\n0f 84 5e 02 00 00\n49 c7 44 24 58 ff ff ff ff\neb 23\ne8 93 bd ff ff\nc7 00 16 00 00 00\n45 31 ed\n4c 89 e8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 31 e4\n48 85 ed\n4c 89 6c 24 28\n74 0f\n41 8a 45 49\n24 04\nc0 e8 02\n88 44 24 0f\neb 05\nc6 44 24 0f 01\n4d 8b 2f\n4d 85 ed\n0f 84 49 01 00 00\n4c 89 64 24 18\n48 89 6c 24 30\n41 81 e6 00 10 00 00\n31 c0\n48 89 44 24 10\n31 c0\n48 89 44 24 20\n45 31 e4\ne9 b4 00 00 00\n48 c7 45 58 00 00 00 00\n48 8b 44 24 18\n48 89 45 08\n48 89 e8\n48 05 08 01 00 00\n48 89 45 30\n48 8b 5c 24 10\n48 85 db\n0f 95 c0\n22 44 24 0f\n3c 01\n75 1d\n66 c7 45 70 0b 00\nbe 01 00 00 00\n48 89 ef\ne8 fc 02 00 00\n48 83 7c 24 30 00\n75 1b\neb 24\n31 d2\n4c 89 ef\n48 89 ee\ne8 05 03 00 00\n66 89 45 70\n48 83 7c 24 30 00\n74 0b\n48 89 5d 10\n48 89 6c 24 10\neb 1b\n48 c7 45 10 00 00 00 00\n48 85 db\n74 23\n48 8b 44 24 20\n48 89 68 10\n48 89 6c 24 20\n49 ff c4\n4d 8b 6f 08\n49 83 c7 08\n4d 85 ed\n75 13\ne9 85 00 00 00\n48 89 e8\n48 89 44 24 20\neb bf\n4c 89 ef\ne8 68 bd ff ff\n45 85 f6\n75 33\n48 83 f8 03\n72 2d\n41 80 7c 05 ff 2f\n75 25\n0f 1f 44 00 00\n41 80 7c 05 fe 2f\n75 18\n48 ff c8\n48 83 f8 01\n77 ef\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 37\n4c 8b 6c 24 28\n4c 89 ef\n48 89 c2\ne8 ad 01 00 00\n48 89 c5\n48 85 ed\n0f 85 f1 fe ff ff\n4c 8b 64 24 18\n48 8b 5c 24 10\ne9 ad 00 00 00\n31 db\n4c 8b 6c 24 28\neb 37\n48 83 7c 24 30 00\n4c 8b 6c 24 28\n74 20\n49 83 fc 02\n72 1a\n4c 89 ef\n48 8b 74 24 10\n4c 89 e2\ne8 86 03 00 00\n48 89 c3\n4c 8b 64 24 18\neb 0a\n4c 8b 64 24 18\n48 8b 5c 24 10\nbe 19 ae 40 00\n31 d2\n4c 89 ef\ne8 43 01 00 00\n49 89 45 00\n48 85 c0\n74 55\n48 89 58 10\n49 8b 45 00\n66 c7 40 70 09 00\n4c 89 ef\ne8 34 04 00 00\n84 c0\n74 3b\n41 0f b7 45 48\n66 a9 04 02\n75 1a\nbe 60 a3 40 00\n4c 89 ef\ne8 88 04 00 00\n41 89 45 28\n85 c0\n79 05\n41 80 4d 48 04\n4c 89 ef\n48 83 c7 60\nbe ff ff ff ff\ne8 ba 2e 00 00\ne9 cb fd ff ff\n48 89 df\ne8 bd 04 00 00\n4c 89 e7\ne8 25 bb ff ff\n49 8b 7d 20\ne8 1c bb ff ff\n4c 89 ef\ne8 14 bb ff ff\ne9 a2 fd ff ff\n'
p1307
S'.text:00000000004058f0\n.text:00000000004058f1\n.text:00000000004058f3\n.text:00000000004058f5\n.text:00000000004058f7\n.text:00000000004058f9\n.text:00000000004058fa\n.text:00000000004058fe\n.text:0000000000405901\n.text:0000000000405904\n.text:0000000000405907\n.text:000000000040590e\n.text:0000000000405914\n.text:0000000000405917\n.text:000000000040591c\n.text:0000000000405921\n.text:0000000000405927\n.text:000000000040592b\n.text:0000000000405931\n.text:0000000000405936\n.text:000000000040593b\n.text:000000000040593e\n.text:0000000000405941\n.text:0000000000405947\n.text:000000000040594a\n.text:000000000040594f\n.text:0000000000405954\n.text:0000000000405959\n.text:000000000040595e\n.text:0000000000405963\n.text:0000000000405968\n.text:000000000040596d\n.text:0000000000405972\n.text:0000000000405976\n.text:0000000000405979\n.text:000000000040597e\n.text:0000000000405981\n.text:0000000000405985\n.text:0000000000405989\n.text:000000000040598d\n.text:0000000000405995\n.text:0000000000405998\n.text:000000000040599d\n.text:00000000004059a3\n.text:00000000004059a8\n.text:00000000004059ac\n.text:00000000004059af\n.text:00000000004059b4\n.text:00000000004059b6\n.text:00000000004059bc\n.text:00000000004059c0\n.text:00000000004059c2\n.text:00000000004059c7\n.text:00000000004059c9\n.text:00000000004059cc\n.text:00000000004059d1\n.text:00000000004059d4\n.text:00000000004059d7\n.text:00000000004059dd\n.text:00000000004059e6\n.text:00000000004059e8\n.text:00000000004059ed\n.text:00000000004059f3\n.text:00000000004059f6\n.text:00000000004059f9\n.text:00000000004059fd\n.text:00000000004059fe\n.text:0000000000405a00\n.text:0000000000405a02\n.text:0000000000405a04\n.text:0000000000405a06\n.text:0000000000405a07\n.text:0000000000405a08\n.text:0000000000405a0b\n.text:0000000000405a0e\n.text:0000000000405a13\n.text:0000000000405a15\n.text:0000000000405a19\n.text:0000000000405a1b\n.text:0000000000405a1e\n.text:0000000000405a22\n.text:0000000000405a24\n.text:0000000000405a29\n.text:0000000000405a2c\n.text:0000000000405a2f\n.text:0000000000405a35\n.text:0000000000405a3a\n.text:0000000000405a3f\n.text:0000000000405a46\n.text:0000000000405a48\n.text:0000000000405a4d\n.text:0000000000405a4f\n.text:0000000000405a54\n.text:0000000000405a57\n.text:0000000000405a60\n.text:0000000000405a68\n.text:0000000000405a6d\n.text:0000000000405a71\n.text:0000000000405a74\n.text:0000000000405a7a\n.text:0000000000405a7e\n.text:0000000000405a83\n.text:0000000000405a86\n.text:0000000000405a89\n.text:0000000000405a8d\n.text:0000000000405a8f\n.text:0000000000405a91\n.text:0000000000405a97\n.text:0000000000405a9c\n.text:0000000000405a9f\n.text:0000000000405aa4\n.text:0000000000405aaa\n.text:0000000000405aac\n.text:0000000000405aae\n.text:0000000000405ab0\n.text:0000000000405ab3\n.text:0000000000405ab6\n.text:0000000000405abb\n.text:0000000000405abf\n.text:0000000000405ac5\n.text:0000000000405ac7\n.text:0000000000405acb\n.text:0000000000405ad0\n.text:0000000000405ad2\n.text:0000000000405ada\n.text:0000000000405add\n.text:0000000000405adf\n.text:0000000000405ae4\n.text:0000000000405ae8\n.text:0000000000405aed\n.text:0000000000405af0\n.text:0000000000405af4\n.text:0000000000405af8\n.text:0000000000405afb\n.text:0000000000405afd\n.text:0000000000405b02\n.text:0000000000405b05\n.text:0000000000405b0a\n.text:0000000000405b10\n.text:0000000000405b13\n.text:0000000000405b18\n.text:0000000000405b1b\n.text:0000000000405b1d\n.text:0000000000405b21\n.text:0000000000405b23\n.text:0000000000405b29\n.text:0000000000405b2b\n.text:0000000000405b30\n.text:0000000000405b36\n.text:0000000000405b38\n.text:0000000000405b3b\n.text:0000000000405b3f\n.text:0000000000405b41\n.text:0000000000405b50\n.text:0000000000405b53\n.text:0000000000405b58\n.text:0000000000405b5b\n.text:0000000000405b5e\n.text:0000000000405b63\n.text:0000000000405b66\n.text:0000000000405b69\n.text:0000000000405b6f\n.text:0000000000405b74\n.text:0000000000405b79\n.text:0000000000405b7e\n.text:0000000000405b80\n.text:0000000000405b85\n.text:0000000000405b87\n.text:0000000000405b8d\n.text:0000000000405b92\n.text:0000000000405b94\n.text:0000000000405b98\n.text:0000000000405b9a\n.text:0000000000405b9d\n.text:0000000000405ba2\n.text:0000000000405ba5\n.text:0000000000405baa\n.text:0000000000405bad\n.text:0000000000405bb2\n.text:0000000000405bb4\n.text:0000000000405bb9\n.text:0000000000405bbe\n.text:0000000000405bc3\n.text:0000000000405bc5\n.text:0000000000405bc8\n.text:0000000000405bcd\n.text:0000000000405bd1\n.text:0000000000405bd4\n.text:0000000000405bd6\n.text:0000000000405bda\n.text:0000000000405bde\n.text:0000000000405be4\n.text:0000000000405be7\n.text:0000000000405bec\n.text:0000000000405bee\n.text:0000000000405bf0\n.text:0000000000405bf5\n.text:0000000000405bf9\n.text:0000000000405bfb\n.text:0000000000405c00\n.text:0000000000405c03\n.text:0000000000405c08\n.text:0000000000405c0c\n.text:0000000000405c0e\n.text:0000000000405c10\n.text:0000000000405c15\n.text:0000000000405c18\n.text:0000000000405c1c\n.text:0000000000405c21\n.text:0000000000405c26\n.text:0000000000405c2b\n.text:0000000000405c2e\n.text:0000000000405c33\n.text:0000000000405c36\n.text:0000000000405c3b\n.text:0000000000405c3f\n.text:0000000000405c44\n.text:0000000000405c47\n.text:0000000000405c4c\n'
p1308
tp1309
sS'fts_stat'
p1310
(S'\n__stdcall fts_stat(FTS * sp, FTSENT * p)\n'
p1311
V\u000aunsigned_short fts_stat(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  stat *__buf;\u000a  char cVar1;\u000a  ushort uVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  int *piVar5;\u000a  byte in_DL;\u000a  \u000a  __buf = p->fts_statp;\u000a  if (((sp->fts_options & 2U) == 0) &&\u000a     ((byte)(p->fts_level == 0 & (byte)sp->fts_options & 1 | in_DL) != 1)) {\u000a    iVar3 = fstatat(sp->fts_cwd_fd,p->fts_accpath,(stat *)__buf,0x100);\u000a    if (iVar3 == 0) {\u000aLAB_00405e7d:\u000a      uVar2 = *(ushort *)&p->fts_statp[0].st_mode & 0xf000;\u000a      if (uVar2 == 0x8000) {\u000a        return 8;\u000a      }\u000a      if (uVar2 == 0xa000) {\u000a        return 0xc;\u000a      }\u000a      if (uVar2 != 0x4000) {\u000a        return 3;\u000a      }\u000a      p->fts_n_dirs_remaining =\u000a           p->fts_statp[0].st_nlink - (ulong)(~((uint)sp->fts_options >> 4) & 2);\u000a      if (*(char *)&p[1].fts_cycle != '.') {\u000a        return 1;\u000a      }\u000a      cVar1 = *(char *)((long)&p[1].fts_cycle + 1);\u000a      if (cVar1 != 0) {\u000a        if (cVar1 != '.') {\u000a          return 1;\u000a        }\u000a        if (*(char *)((long)&p[1].fts_cycle + 2) != 0) {\u000a          return 1;\u000a        }\u000a      }\u000a      if (p->fts_level != 0) {\u000a        return 5;\u000a      }\u000a      return 1;\u000a    }\u000a    piVar5 = __errno_location();\u000a    iVar3 = *piVar5;\u000a  }\u000a  else {\u000a    iVar3 = stat(p->fts_accpath,(stat *)__buf);\u000a    if (iVar3 == 0) goto LAB_00405e7d;\u000a    piVar5 = __errno_location();\u000a    iVar3 = *piVar5;\u000a    if (iVar3 == 2) {\u000a      iVar4 = lstat(p->fts_accpath,(stat *)__buf);\u000a      iVar3 = 2;\u000a      if (iVar4 == 0) {\u000a        *piVar5 = 0;\u000a        return 0xd;\u000a      }\u000a    }\u000a  }\u000a  p->fts_errno = iVar3;\u000a  *(undefined4 *)(p->fts_statp[0].__glibc_reserved + 1) = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 0xc) = 0;\u000a  *(undefined4 *)(p->fts_statp[0].__glibc_reserved + 2) = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 0x14) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ctim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ctim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)p->fts_statp[0].__glibc_reserved = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_mtim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_mtim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ctim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ctim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_atim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_atim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_mtim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_mtim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_blocks = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_blocks + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_atim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_atim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_size = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_size + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_blksize = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_blksize + 4) = 0;\u000a  p->fts_statp[0].st_gid = 0;\u000a  p->fts_statp[0].__pad0 = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_rdev = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_rdev + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_nlink = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_nlink + 4) = 0;\u000a  p->fts_statp[0].st_mode = 0;\u000a  p->fts_statp[0].st_uid = 0;\u000a  *(undefined4 *)&__buf->st_dev = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_dev + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ino = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ino + 4) = 0;\u000a  return 10;\u000a}\u000a\u000a
p1312
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nLEA RBX,[R14 + 0x78]\nMOV ECX,dword ptr [R15 + 0x48]\nCMP qword ptr [R14 + 0x58],0x0\nSETZ AL\nTEST CL,0x2\nJNZ 0x00405e0d\nAND ECX,0x1\nAND AL,CL\nOR AL,DL\nXOR AL,0x1\nJZ 0x00405e0d\nMOV EDI,dword ptr [R15 + 0x2c]\nMOV RSI,qword ptr [R14 + 0x30]\nMOV ECX,0x100\nMOV RDX,RBX\nCALL 0x004093e0\nTEST EAX,EAX\nJZ 0x00405e7d\nCALL 0x00401780\nMOV ECX,dword ptr [RAX]\nJMP 0x00405e46\nMOV RDI,qword ptr [R14 + 0x30]\nMOV RSI,RBX\nCALL 0x004093b0\nTEST EAX,EAX\nJZ 0x00405e7d\nCALL 0x00401780\nMOV R15,RAX\nMOV ECX,dword ptr [R15]\nCMP ECX,0x2\nJNZ 0x00405e46\nMOV RDI,qword ptr [R14 + 0x30]\nMOV RSI,RBX\nCALL 0x004093d0\nMOV ECX,0x2\nTEST EAX,EAX\nJZ 0x00405f12\nMOV dword ptr [R14 + 0x40],ECX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x80 + RBX],XMM0\nMOVUPS xmmword ptr [RBX + 0x70],XMM0\nMOVUPS xmmword ptr [RBX + 0x60],XMM0\nMOVUPS xmmword ptr [RBX + 0x50],XMM0\nMOVUPS xmmword ptr [RBX + 0x40],XMM0\nMOVUPS xmmword ptr [RBX + 0x30],XMM0\nMOVUPS xmmword ptr [RBX + 0x20],XMM0\nMOVUPS xmmword ptr [RBX + 0x10],XMM0\nMOVUPS xmmword ptr [RBX],XMM0\nMOV AX,0xa\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOVZX EAX,word ptr [0x90 + R14]\nAND EAX,0xf000\nCMP EAX,0x8000\nJZ 0x00405f00\nMOVZX EAX,AX\nCMP EAX,0xa000\nJZ 0x00405ef7\nCMP EAX,0x4000\nJNZ 0x00405f09\nMOV RAX,qword ptr [0x88 + R14]\nMOV ECX,dword ptr [R15 + 0x48]\nSHR ECX,0x4\nNOT ECX\nAND ECX,0x2\nSUB RAX,RCX\nMOV qword ptr [R14 + 0x68],RAX\nMOV AX,0x1\nCMP byte ptr [0x108 + R14],0x2e\nJNZ 0x00405e77\nMOV CL,byte ptr [0x109 + R14]\nTEST CL,CL\nJZ 0x00405ee4\nCMP CL,0x2e\nJNZ 0x00405e77\nCMP byte ptr [0x10a + R14],0x0\nJNZ 0x00405e77\nCMP qword ptr [R14 + 0x58],0x0\nMOV CX,0x1\nMOV AX,0x5\nCMOVZ AX,CX\nJMP 0x00405e77\nMOV AX,0xc\nJMP 0x00405e77\nMOV AX,0x8\nJMP 0x00405e77\nMOV AX,0x3\nJMP 0x00405e77\nMOV dword ptr [R15],0x0\nMOV AX,0xd\nJMP 0x00405e77\n'
p1313
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n49 8d 5e 78\n41 8b 4f 48\n49 83 7e 58 00\n0f 94 c0\nf6 c1 02\n75 2d\n83 e1 01\n20 c8\n08 d0\n34 01\n74 22\n41 8b 7f 2c\n49 8b 76 30\nb9 00 01 00 00\n48 89 da\ne8 e0 35 00 00\n85 c0\n74 79\ne8 77 b9 ff ff\n8b 08\neb 39\n49 8b 7e 30\n48 89 de\ne8 97 35 00 00\n85 c0\n74 60\ne8 5e b9 ff ff\n49 89 c7\n41 8b 0f\n83 f9 02\n75 19\n49 8b 7e 30\n48 89 de\ne8 97 35 00 00\nb9 02 00 00 00\n85 c0\n0f 84 cc 00 00 00\n41 89 4e 40\n0f 57 c0\n0f 11 83 80 00 00 00\n0f 11 43 70\n0f 11 43 60\n0f 11 43 50\n0f 11 43 40\n0f 11 43 30\n0f 11 43 20\n0f 11 43 10\n0f 11 03\n66 b8 0a 00\n5b\n41 5e\n41 5f\nc3\n41 0f b7 86 90 00 00 00\n25 00 f0 00 00\n3d 00 80 00 00\n74 6f\n0f b7 c0\n3d 00 a0 00 00\n74 5c\n3d 00 40 00 00\n75 67\n49 8b 86 88 00 00 00\n41 8b 4f 48\nc1 e9 04\nf7 d1\n83 e1 02\n48 29 c8\n49 89 46 68\n66 b8 01 00\n41 80 be 08 01 00 00 2e\n75 ad\n41 8a 8e 09 01 00 00\n84 c9\n74 0f\n80 f9 2e\n75 9d\n41 80 be 0a 01 00 00 00\n75 93\n49 83 7e 58 00\n66 b9 01 00\n66 b8 05 00\n66 0f 44 c1\neb 80\n66 b8 0c 00\ne9 77 ff ff ff\n66 b8 08 00\ne9 6e ff ff ff\n66 b8 03 00\ne9 65 ff ff ff\n41 c7 07 00 00 00 00\n66 b8 0d 00\ne9 55 ff ff ff\n'
p1314
S'.text:0000000000405dc0\n.text:0000000000405dc2\n.text:0000000000405dc4\n.text:0000000000405dc5\n.text:0000000000405dc8\n.text:0000000000405dcb\n.text:0000000000405dcf\n.text:0000000000405dd3\n.text:0000000000405dd8\n.text:0000000000405ddb\n.text:0000000000405dde\n.text:0000000000405de0\n.text:0000000000405de3\n.text:0000000000405de5\n.text:0000000000405de7\n.text:0000000000405de9\n.text:0000000000405deb\n.text:0000000000405def\n.text:0000000000405df3\n.text:0000000000405df8\n.text:0000000000405dfb\n.text:0000000000405e00\n.text:0000000000405e02\n.text:0000000000405e04\n.text:0000000000405e09\n.text:0000000000405e0b\n.text:0000000000405e0d\n.text:0000000000405e11\n.text:0000000000405e14\n.text:0000000000405e19\n.text:0000000000405e1b\n.text:0000000000405e1d\n.text:0000000000405e22\n.text:0000000000405e25\n.text:0000000000405e28\n.text:0000000000405e2b\n.text:0000000000405e2d\n.text:0000000000405e31\n.text:0000000000405e34\n.text:0000000000405e39\n.text:0000000000405e3e\n.text:0000000000405e40\n.text:0000000000405e46\n.text:0000000000405e4a\n.text:0000000000405e4d\n.text:0000000000405e54\n.text:0000000000405e58\n.text:0000000000405e5c\n.text:0000000000405e60\n.text:0000000000405e64\n.text:0000000000405e68\n.text:0000000000405e6c\n.text:0000000000405e70\n.text:0000000000405e73\n.text:0000000000405e77\n.text:0000000000405e78\n.text:0000000000405e7a\n.text:0000000000405e7c\n.text:0000000000405e7d\n.text:0000000000405e85\n.text:0000000000405e8a\n.text:0000000000405e8f\n.text:0000000000405e91\n.text:0000000000405e94\n.text:0000000000405e99\n.text:0000000000405e9b\n.text:0000000000405ea0\n.text:0000000000405ea2\n.text:0000000000405ea9\n.text:0000000000405ead\n.text:0000000000405eb0\n.text:0000000000405eb2\n.text:0000000000405eb5\n.text:0000000000405eb8\n.text:0000000000405ebc\n.text:0000000000405ec0\n.text:0000000000405ec8\n.text:0000000000405eca\n.text:0000000000405ed1\n.text:0000000000405ed3\n.text:0000000000405ed5\n.text:0000000000405ed8\n.text:0000000000405eda\n.text:0000000000405ee2\n.text:0000000000405ee4\n.text:0000000000405ee9\n.text:0000000000405eed\n.text:0000000000405ef1\n.text:0000000000405ef5\n.text:0000000000405ef7\n.text:0000000000405efb\n.text:0000000000405f00\n.text:0000000000405f04\n.text:0000000000405f09\n.text:0000000000405f0d\n.text:0000000000405f12\n.text:0000000000405f19\n.text:0000000000405f1d\n'
p1315
tp1316
sS'clear_ungetc_buffer_preserving_position'
p1317
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p1318
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p1319
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405837\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00405880\n'
p1320
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 3d 00 00 00\n'
p1321
S'.text:0000000000405830\n.text:0000000000405834\n.text:0000000000405836\n.text:0000000000405837\n.text:0000000000405839\n.text:000000000040583e\n'
p1322
tp1323
sS'xnmalloc'
p1324
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p1325
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1326
S'MOV RAX,RDI\nMUL RSI\nJO 0x00405511\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00405520\nPUSH RAX\nCALL 0x004056b0\n'
p1327
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p1328
S'.text:0000000000405500\n.text:0000000000405503\n.text:0000000000405506\n.text:0000000000405508\n.text:000000000040550c\n.text:000000000040550f\n.text:0000000000405511\n.text:0000000000405512\n'
p1329
tp1330
sS'hash_string'
p1331
(S'\n__stdcall hash_string(char * string, size_t n_buckets)\n'
p1332
V\u000asize_t hash_string(char *string,size_t n_buckets)\u000a\u000a{\u000a  byte bVar1;\u000a  ulong uVar2;\u000a  byte *pbVar3;\u000a  \u000a  bVar1 = *string;\u000a  if (bVar1 != 0) {\u000a    pbVar3 = (byte *)(string + 1);\u000a    uVar2 = 0;\u000a    do {\u000a      uVar2 = ((ulong)bVar1 + uVar2 * 0x1f) % n_buckets;\u000a      bVar1 = *pbVar3;\u000a      pbVar3 = pbVar3 + 1;\u000a    } while (bVar1 != 0);\u000a    return uVar2;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1333
S'MOV AL,byte ptr [RDI]\nTEST AL,AL\nJZ 0x00407f33\nINC RDI\nXOR EDX,EDX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,RDX\nSHL RCX,0x5\nSUB RCX,RDX\nMOVZX EAX,AL\nADD RAX,RCX\nXOR EDX,EDX\nDIV RSI\nMOVZX EAX,byte ptr [RDI]\nINC RDI\nTEST AL,AL\nJNZ 0x00407f10\nMOV RAX,RDX\nRET\nXOR EDX,EDX\nMOV RAX,RDX\nRET\n'
p1334
S'8a 07\n84 c0\n74 2d\n48 ff c7\n31 d2\n0f 1f 44 00 00\n48 89 d1\n48 c1 e1 05\n48 29 d1\n0f b6 c0\n48 01 c8\n31 d2\n48 f7 f6\n0f b6 07\n48 ff c7\n84 c0\n75 e1\n48 89 d0\nc3\n31 d2\n48 89 d0\nc3\n'
p1335
S'.text:0000000000407f00\n.text:0000000000407f02\n.text:0000000000407f04\n.text:0000000000407f06\n.text:0000000000407f09\n.text:0000000000407f0b\n.text:0000000000407f10\n.text:0000000000407f13\n.text:0000000000407f17\n.text:0000000000407f1a\n.text:0000000000407f1d\n.text:0000000000407f20\n.text:0000000000407f22\n.text:0000000000407f25\n.text:0000000000407f28\n.text:0000000000407f2b\n.text:0000000000407f2d\n.text:0000000000407f2f\n.text:0000000000407f32\n.text:0000000000407f33\n.text:0000000000407f35\n.text:0000000000407f38\n'
p1336
tp1337
sS'cycle_check'
p1338
(S'\n__stdcall cycle_check(cycle_check_state * state, stat * sb)\n'
p1339
V\u000a_Bool cycle_check(cycle_check_state *state,stat *sb)\u000a\u000a{\u000a  undefined uVar1;\u000a  _Bool _Var2;\u000a  uintmax_t i;\u000a  \u000a  if (state->magic != 0x95f616) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("state->magic == 9827862","lib/cycle-check.c",0x3c,\u000a                  "_Bool cycle_check(struct cycle_check_state *, const struct stat *)");\u000a  }\u000a  if (((state->chdir_counter == 0) || (sb->st_ino != (state->dev_ino).st_ino)) ||\u000a     (uVar1 = 1, sb->st_dev != (state->dev_ino).st_dev)) {\u000a    i = state->chdir_counter + 1;\u000a    state->chdir_counter = i;\u000a    _Var2 = is_zero_or_power_of_two(i);\u000a    if (_Var2 != false) {\u000a      if (i == 0) {\u000a        return true;\u000a      }\u000a      (state->dev_ino).st_dev = sb->st_dev;\u000a      (state->dev_ino).st_ino = sb->st_ino;\u000a    }\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p1340
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCMP dword ptr [R15 + 0x18],0x95f616\nJNZ 0x00407a34\nMOV RBX,qword ptr [R15 + 0x10]\nTEST RBX,RBX\nJZ 0x00407a02\nMOV RAX,qword ptr [R14 + 0x8]\nCMP RAX,qword ptr [R15]\nJNZ 0x00407a02\nMOV RCX,qword ptr [R14]\nMOV AL,0x1\nCMP RCX,qword ptr [R15 + 0x8]\nJZ 0x00407a2a\nINC RBX\nMOV qword ptr [R15 + 0x10],RBX\nMOV RDI,RBX\nCALL 0x00407a50\nTEST AL,AL\nJZ 0x00407a28\nTEST RBX,RBX\nJZ 0x00407a30\nMOV RAX,qword ptr [R14]\nMOV qword ptr [R15 + 0x8],RAX\nMOV RAX,qword ptr [R14 + 0x8]\nMOV qword ptr [R15],RAX\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV AL,0x1\nJMP 0x00407a2a\nMOV EDI,0x40b3d0\nMOV ESI,0x40b3e8\nMOV EDX,0x3c\nMOV ECX,0x40b3fa\nCALL 0x00401900\n'
p1341
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n41 81 7f 18 16 f6 95 00\n75 4f\n49 8b 5f 10\n48 85 db\n74 14\n49 8b 46 08\n49 3b 07\n75 0b\n49 8b 0e\nb0 01\n49 3b 4f 08\n74 28\n48 ff c3\n49 89 5f 10\n48 89 df\ne8 3f 00 00 00\n84 c0\n74 13\n48 85 db\n74 16\n49 8b 06\n49 89 47 08\n49 8b 46 08\n49 89 07\n31 c0\n5b\n41 5e\n41 5f\nc3\nb0 01\neb f6\nbf d0 b3 40 00\nbe e8 b3 40 00\nba 3c 00 00 00\nb9 fa b3 40 00\ne8 b3 9e ff ff\n'
p1342
S'.text:00000000004079d0\n.text:00000000004079d2\n.text:00000000004079d4\n.text:00000000004079d5\n.text:00000000004079d8\n.text:00000000004079db\n.text:00000000004079e3\n.text:00000000004079e5\n.text:00000000004079e9\n.text:00000000004079ec\n.text:00000000004079ee\n.text:00000000004079f2\n.text:00000000004079f5\n.text:00000000004079f7\n.text:00000000004079fa\n.text:00000000004079fc\n.text:0000000000407a00\n.text:0000000000407a02\n.text:0000000000407a05\n.text:0000000000407a09\n.text:0000000000407a0c\n.text:0000000000407a11\n.text:0000000000407a13\n.text:0000000000407a15\n.text:0000000000407a18\n.text:0000000000407a1a\n.text:0000000000407a1d\n.text:0000000000407a21\n.text:0000000000407a25\n.text:0000000000407a28\n.text:0000000000407a2a\n.text:0000000000407a2b\n.text:0000000000407a2d\n.text:0000000000407a2f\n.text:0000000000407a30\n.text:0000000000407a32\n.text:0000000000407a34\n.text:0000000000407a39\n.text:0000000000407a3e\n.text:0000000000407a43\n.text:0000000000407a48\n'
p1343
tp1344
sS'FUN_00401740'
p1345
(S'\n__stdcall FUN_00401740()\n'
p1346
V\u000avoid FUN_00401740(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060e010)();\u000a  return;\u000a}\u000a\u000a
p1347
S'PUSH qword ptr [0x0060e008]\nJMP qword ptr [0x0060e010]\n'
p1348
S'ff 35 c2 c8 20 00\nff 25 c4 c8 20 00\n'
p1349
S'.plt:0000000000401740\n.plt:0000000000401746\n'
p1350
tp1351
sS'quotearg_char'
p1352
(S'\n__stdcall quotearg_char(char * arg)\n'
p1353
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1354
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00404980\n'
p1355
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1356
S'.text:00000000004049f0\n.text:00000000004049f2\n.text:00000000004049f9\n.text:00000000004049fb\n'
p1357
tp1358
sS'malloc'
p1359
(S'\n__stdcall malloc(size_t __size)\n'
p1360
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060e180)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1361
S'JMP qword ptr [0x0060e180]\n'
p1362
S'ff 25 5a c7 20 00\n'
p1363
S'.plt:0000000000401a20\n'
p1364
tp1365
sS'argmatch_invalid'
p1366
(S'\n__stdcall argmatch_invalid(char * context, char * value, ptrdiff_t problem)\n'
p1367
V\u000avoid argmatch_invalid(char *context,char *value,ptrdiff_t problem)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = "ambiguous argument %s for %s";\u000a  if (problem == -1) {\u000a    pcVar2 = "invalid argument %s for %s";\u000a  }\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quotearg_n_style((char *)0x0);\u000a  pcVar3 = quote_n((char *)0x1);\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p1368
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nCMP RDX,-0x1\nMOV EAX,0x40a5f2\nMOV ESI,0x40a60d\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401860\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x00404860\nMOV R15,RAX\nMOV EDI,0x1\nMOV RSI,R14\nCALL 0x00404b50\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401ae0\n'
p1369
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n48 83 fa ff\nb8 f2 a5 40 00\nbe 0d a6 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 e4 e6 ff ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 d2 16 00 00\n49 89 c7\nbf 01 00 00 00\n4c 89 f6\ne8 b2 19 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 20 e9 ff ff\n'
p1370
S'.text:0000000000403150\n.text:0000000000403152\n.text:0000000000403154\n.text:0000000000403156\n.text:0000000000403157\n.text:0000000000403158\n.text:000000000040315b\n.text:000000000040315e\n.text:0000000000403162\n.text:0000000000403167\n.text:000000000040316c\n.text:0000000000403170\n.text:0000000000403172\n.text:0000000000403177\n.text:000000000040317c\n.text:000000000040317f\n.text:0000000000403181\n.text:0000000000403186\n.text:0000000000403189\n.text:000000000040318e\n.text:0000000000403191\n.text:0000000000403196\n.text:0000000000403199\n.text:000000000040319e\n.text:00000000004031a1\n.text:00000000004031a3\n.text:00000000004031a5\n.text:00000000004031a7\n.text:00000000004031aa\n.text:00000000004031ad\n.text:00000000004031b0\n.text:00000000004031b4\n.text:00000000004031b5\n.text:00000000004031b7\n.text:00000000004031b9\n.text:00000000004031bb\n'
p1371
tp1372
sS'c_tolower'
p1373
(S'\n__stdcall c_tolower()\n'
p1374
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1375
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p1376
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p1377
S'.text:00000000004078c0\n.text:00000000004078c3\n.text:00000000004078c6\n.text:00000000004078c9\n.text:00000000004078cc\n'
p1378
tp1379
sS'getopt_long'
p1380
(S'\n__stdcall getopt_long()\n'
p1381
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060e0c8)();\u000a  return;\u000a}\u000a\u000a
p1382
S'JMP qword ptr [0x0060e0c8]\n'
p1383
S'ff 25 12 c8 20 00\n'
p1384
S'.plt:00000000004018b0\n'
p1385
tp1386
sS'fts_build'
p1387
(S'\n__stdcall fts_build(FTS * sp)\n'
p1388
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000aFTSENT * fts_build(FTS *sp)\u000a\u000a{\u000a  ulong uVar1;\u000a  byte *pbVar2;\u000a  char cVar3;\u000a  DIR *__dirp;\u000a  size_t sVar4;\u000a  int (*pVar5)(_ftsent **,_ftsent **);\u000a  byte bVar6;\u000a  bool bVar7;\u000a  FTSENT *pFVar8;\u000a  _Bool _Var9;\u000a  unsigned_short uVar10;\u000a  int iVar11;\u000a  DIR *__dirp_00;\u000a  int *piVar12;\u000a  dirent *pdVar13;\u000a  size_t namelen;\u000a  FTSENT *p;\u000a  FTSENT *head;\u000a  FTSENT *ent;\u000a  size_t sVar14;\u000a  int in_ESI;\u000a  char *dir;\u000a  long lVar15;\u000a  ulong nitems;\u000a  uint local_a4;\u000a  char *local_88;\u000a  FTSENT *local_60;\u000a  ulong local_58;\u000a  \u000a  ent = (FTSENT *)sp->fts_cur;\u000a  __dirp = (DIR *)ent->fts_dirp;\u000a  if (__dirp == (DIR *)0x0) {\u000a    dir = (char *)0xffffff9c;\u000a    if ((sp->fts_options & 0x204U) == 0x200) {\u000a      dir = (char *)(ulong)(uint)sp->fts_cwd_fd;\u000a    }\u000a    __dirp_00 = opendirat(dir,(int *)ent->fts_accpath);\u000a    ent->fts_dirp = __dirp_00;\u000a    if (__dirp_00 == (DIR *)0x0) goto joined_r0x00406b4d;\u000a    if (ent->fts_info == 0xb) {\u000a      uVar10 = fts_stat(sp,ent);\u000a      ent->fts_info = uVar10;\u000a    }\u000a    else {\u000a      if ((*(byte *)((long)&sp->fts_options + 1) & 1) != 0) {\u000a        leave_dir(sp,ent);\u000a        fts_stat(sp,ent);\u000a        _Var9 = enter_dir(sp,ent);\u000a        if (_Var9 == false) {\u000a          piVar12 = __errno_location();\u000a          *piVar12 = 0xc;\u000a          return (FTSENT *)0;\u000a        }\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    local_a4 = dirfd(__dirp);\u000a    if ((int)local_a4 < 0) {\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000ajoined_r0x00406b4d:\u000a      if (in_ESI == 3) {\u000a        ent->fts_info = 4;\u000a        piVar12 = __errno_location();\u000a        ent->fts_errno = *piVar12;\u000a      }\u000a      return (FTSENT *)0x0;\u000a    }\u000a  }\u000a  pVar5 = sp->fts_compar;\u000a  if (in_ESI == 2) {\u000a    lVar15 = 0;\u000a    if (__dirp != (DIR *)0x0) goto LAB_00406be8;\u000aLAB_00406bfa:\u000a    if ((in_ESI == 3) || (lVar15 != 0)) {\u000a      bVar6 = 1;\u000a      if ((*(byte *)((long)&sp->fts_options + 1) & 2) == 0) {\u000aLAB_00406c3f:\u000a        if ((-1 < (int)local_a4) &&\u000a           (iVar11 = fts_safe_changedir(sp,ent,(char *)(ulong)local_a4), iVar11 == 0))\u000a        goto LAB_00406be8;\u000a      }\u000a      else {\u000a        local_a4 = dup_safer();\u000a        if (-1 < (int)local_a4) {\u000a          set_cloexec_flag();\u000a          goto LAB_00406c3f;\u000a        }\u000a      }\u000a      if ((in_ESI == 3) && (lVar15 != 0)) {\u000a        piVar12 = __errno_location();\u000a        ent->fts_errno = *piVar12;\u000a      }\u000a      *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 1;\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      if (((sp->fts_options & 0x200U) != 0) && (-1 < (int)local_a4)) {\u000a        close(local_a4);\u000a      }\u000a      ent->fts_dirp = (DIR *)0x0;\u000a    }\u000a    else {\u000a      bVar6 = 1;\u000a    }\u000a  }\u000a  else {\u000a    lVar15 = -1;\u000a    if ((sp->fts_options & 0x18U) == 0x18) {\u000a      lVar15 = ent->fts_statp[0].st_nlink - (ulong)(~((uint)sp->fts_options >> 4) & 2);\u000a    }\u000a    if (__dirp == (DIR *)0x0) goto LAB_00406bfa;\u000aLAB_00406be8:\u000a    bVar6 = 0;\u000a  }\u000a  sVar4 = ent->fts_pathlen;\u000a  sVar14 = sVar4 - 1;\u000a  if (ent->fts_path[sVar4 - 1] != '/') {\u000a    sVar14 = sVar4;\u000a  }\u000a  if ((*(byte *)&sp->fts_options & 4) == 0) {\u000a    local_88 = (char *)0x0;\u000a  }\u000a  else {\u000a    local_88 = sp->fts_path + sVar14 + 1;\u000a    sp->fts_path[sVar14] = '/';\u000a  }\u000a  uVar1 = sVar14 + 1;\u000a  local_58 = sp->fts_pathlen - uVar1;\u000a  lVar15 = ent->fts_level;\u000a  bVar7 = false;\u000a  local_60 = (FTSENT *)0x0;\u000a  nitems = 0;\u000a  head = (FTSENT *)0x0;\u000a  do {\u000a    __dirp_00 = ent->fts_dirp;\u000a    if (__dirp_00 == (DIR *)0x0) {\u000a      if (bVar7) goto LAB_00406f9a;\u000a      goto LAB_00406fa5;\u000a    }\u000a    while( true ) {\u000a      pdVar13 = readdir((DIR *)__dirp_00);\u000a      if (pdVar13 == (dirent *)0x0) {\u000a        if ((DIR *)ent->fts_dirp != (DIR *)0x0) {\u000a          closedir((DIR *)ent->fts_dirp);\u000a          ent->fts_dirp = (DIR *)0x0;\u000a        }\u000a        goto LAB_00406f93;\u000a      }\u000a      if (((*(byte *)&sp->fts_options & 0x20) != 0) || (pdVar13->d_name[0] != '.')) break;\u000a      cVar3 = pdVar13->d_name[1];\u000a      if (cVar3 == '.') {\u000a        cVar3 = pdVar13->d_name[2];\u000a      }\u000a      if (cVar3 != 0) break;\u000a      __dirp_00 = ent->fts_dirp;\u000a      if (__dirp_00 == (DIR *)0x0) goto LAB_00406f93;\u000a    }\u000a    namelen = strlen(pdVar13->d_name);\u000a    p = fts_alloc(sp,pdVar13->d_name,namelen);\u000a    if (p == (FTSENT *)0x0) {\u000aLAB_004070d8:\u000a      piVar12 = __errno_location();\u000a      iVar11 = *piVar12;\u000a      free(p);\u000a      fts_lfree(head);\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      *piVar12 = iVar11;\u000a      return (FTSENT *)0;\u000a    }\u000a    if (local_58 <= namelen) {\u000a      dir = sp->fts_path;\u000a      _Var9 = fts_palloc(sp,sVar14 + 2 + namelen);\u000a      if (_Var9 == false) goto LAB_004070d8;\u000a      if (dir != sp->fts_path) {\u000a        if ((*(byte *)&sp->fts_options & 4) != 0) {\u000a          local_88 = sp->fts_path + uVar1;\u000a        }\u000a        bVar7 = true;\u000a      }\u000a      local_58 = sp->fts_pathlen - uVar1;\u000a    }\u000a    if (CARRY8(namelen,uVar1)) {\u000a      free(p);\u000a      fts_lfree(head);\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      piVar12 = __errno_location();\u000a      *piVar12 = 0x24;\u000a      return (FTSENT *)0;\u000a    }\u000a    p->fts_level = lVar15 + 1;\u000a    p->fts_parent = sp->fts_cur;\u000a    p->fts_pathlen = namelen + uVar1;\u000a    p->fts_statp[0].st_ino = pdVar13->d_ino;\u000a    if ((*(byte *)&sp->fts_options & 4) == 0) {\u000a      *(FTSENT **)&p->fts_accpath = p + 1;\u000a    }\u000a    else {\u000a      p->fts_accpath = p->fts_path;\u000a      memmove(local_88,p + 1,p->fts_namelen + 1);\u000a    }\u000a    if ((sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0) || ((sp->fts_options & 0x400U) != 0)\u000a       ) {\u000a      p->fts_info = 0xb;\u000a      set_stat_type(p->fts_statp);\u000a      fts_set_stat_required(p);\u000a    }\u000a    else {\u000a      uVar10 = fts_stat(sp,p);\u000a      p->fts_info = uVar10;\u000a    }\u000a    p->fts_link = (_ftsent *)0x0;\u000a    pFVar8 = p;\u000a    if (head != (FTSENT *)0x0) {\u000a      *(FTSENT **)&local_60->fts_link = p;\u000a      pFVar8 = head;\u000a    }\u000a    head = pFVar8;\u000a    nitems = nitems + 1;\u000a    local_60 = p;\u000a  } while (nitems < (~-(ulong)(pVar5 == (int (*)(_ftsent **,_ftsent **))0x0) | 100000));\u000aLAB_00406f93:\u000a  if (bVar7) {\u000aLAB_00406f9a:\u000a    fts_padjust(sp,head);\u000a  }\u000aLAB_00406fa5:\u000a  if ((*(byte *)&sp->fts_options & 4) != 0) {\u000a    dir = local_88;\u000a    if (uVar1 == sp->fts_pathlen) {\u000a      dir = local_88 + -1;\u000a    }\u000a    if (nitems == 0) {\u000a      dir = local_88 + -1;\u000a    }\u000a    *dir = 0;\u000a  }\u000a  if (!(bool)(__dirp != (DIR *)0x0 | bVar6)) {\u000a    if ((in_ESI != 1) && (nitems != 0)) goto LAB_00407000;\u000a    if (ent->fts_level == 0) {\u000a      iVar11 = restore_initial_cwd(sp);\u000a    }\u000a    else {\u000a      iVar11 = fts_safe_changedir(sp,(FTSENT *)ent->fts_parent,(char *)0xffffffff);\u000a    }\u000a    if (iVar11 != 0) {\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      goto LAB_004070a8;\u000a    }\u000a  }\u000a  if (nitems == 0) {\u000a    if (in_ESI == 3) {\u000a      ent->fts_info = 6;\u000a    }\u000aLAB_004070a8:\u000a    fts_lfree(head);\u000a    return (FTSENT *)0;\u000a  }\u000aLAB_00407000:\u000a  if ((((10000 < nitems) && (sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0)) &&\u000a      ((*(byte *)((long)&sp->fts_options + 1) & 2) != 0)) &&\u000a     (_Var9 = dirent_inode_sort_may_be_useful(), _Var9 != false)) {\u000a    sp->fts_compar = fts_compare_ino;\u000a    head = fts_sort(sp,head,nitems);\u000a    sp->fts_compar = (int (*)(_ftsent **,_ftsent **))0x0;\u000a  }\u000a  if (nitems < 2) {\u000a    return head;\u000a  }\u000a  if (sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0) {\u000a    return head;\u000a  }\u000a  ent = fts_sort(sp,head,nitems);\u000a  return ent;\u000a}\u000a\u000a
p1389
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x78\nMOV R12D,ESI\nMOV R15,RDI\nMOV RBX,qword ptr [R15]\nMOV R14,qword ptr [RBX + 0x18]\nTEST R14,R14\nJZ 0x00406ad4\nMOV RDI,R14\nCALL 0x004019b0\nMOV dword ptr [RSP + 0x4],EAX\nTEST EAX,EAX\nJNS 0x00406b9a\nMOV RDI,qword ptr [RBX + 0x18]\nCALL 0x00401950\nMOV qword ptr [RBX + 0x18],0x0\nCMP R12D,0x3\nJZ 0x00406b53\nJMP 0x004070b0\nMOV ECX,dword ptr [R15 + 0x48]\nMOV EAX,ECX\nAND EAX,0x204\nMOV EDI,0xffffff9c\nCMP EAX,0x200\nJNZ 0x00406aef\nMOV EDI,dword ptr [R15 + 0x2c]\nMOV RSI,qword ptr [RBX + 0x30]\nXOR EAX,EAX\nTEST CL,0x10\nJZ 0x00406b0b\nTEST CL,0x1\nJZ 0x00406b06\nCMP qword ptr [RBX + 0x58],0x0\nJZ 0x00406b0b\nMOV EAX,0x20000\nMOV EDX,dword ptr [R15 + 0x48]\nSHL EDX,0x7\nAND EDX,0x40000\nOR EDX,EAX\nLEA RCX,[RSP + 0x4]\nCALL 0x00407610\nMOV qword ptr [RBX + 0x18],RAX\nTEST RAX,RAX\nJZ 0x00406b49\nMOVZX EAX,word ptr [RBX + 0x70]\nCMP EAX,0xb\nJNZ 0x00406b68\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00405dc0\nMOV word ptr [RBX + 0x70],AX\nJMP 0x00406b9a\nCMP R12D,0x3\nJNZ 0x004070b0\nMOV word ptr [RBX + 0x70],0x4\nCALL 0x00401780\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RBX + 0x40],EAX\nJMP 0x004070b0\nTEST byte ptr [R15 + 0x49],0x1\nJZ 0x00406b9a\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00406860\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00405dc0\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00407330\nTEST AL,AL\nJZ 0x0040711b\nMOV qword ptr [RSP + 0x8],RBX\nCMP qword ptr [R15 + 0x40],0x1\nSBB RBP,RBP\nCMP R12D,0x2\nJNZ 0x00406bb7\nXOR R13D,R13D\nTEST R14,R14\nJNZ 0x00406be8\nJMP 0x00406bfa\nMOV EAX,dword ptr [R15 + 0x48]\nMOV ECX,EAX\nAND ECX,0x18\nMOV R13,-0x1\nCMP ECX,0x18\nJNZ 0x00406be3\nMOV RCX,qword ptr [RSP + 0x8]\nMOV R13,qword ptr [0x88 + RCX]\nSHR EAX,0x4\nNOT EAX\nAND EAX,0x2\nSUB R13,RAX\nTEST R14,R14\nJZ 0x00406bfa\nMOV dword ptr [RSP + 0x14],0x0\nMOV RBX,qword ptr [RSP + 0x8]\nJMP 0x00406cac\nCMP R12D,0x3\nJZ 0x00406c15\nTEST R13,R13\nJNZ 0x00406c15\nMOV AL,0x1\nMOV dword ptr [RSP + 0x14],EAX\nMOV RBX,qword ptr [RSP + 0x8]\nJMP 0x00406cac\nMOV AL,0x1\nMOV dword ptr [RSP + 0x14],EAX\nTEST byte ptr [R15 + 0x49],0x2\nJZ 0x00406c3f\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00408f80\nMOV dword ptr [RSP + 0x4],EAX\nTEST EAX,EAX\nJS 0x00406c5a\nMOV ESI,0x1\nMOV EDI,EAX\nCALL 0x004078e0\nMOV EDX,dword ptr [RSP + 0x4]\nTEST EDX,EDX\nJS 0x00406c5a\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x004068f0\nTEST EAX,EAX\nJZ 0x00406be8\nCMP R12D,0x3\nJNZ 0x00406c74\nTEST R13,R13\nJZ 0x00406c74\nCALL 0x00401780\nMOV EAX,dword ptr [RAX]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV dword ptr [RCX + 0x40],EAX\nMOV RBX,qword ptr [RSP + 0x8]\nOR byte ptr [RBX + 0x72],0x1\nMOV RDI,qword ptr [RBX + 0x18]\nCALL 0x00401950\nMOV qword ptr [RBX + 0x18],0x0\nMOV EAX,dword ptr [R15 + 0x48]\nTEST AH,0x2\nJZ 0x00406ca4\nMOV EDI,dword ptr [RSP + 0x4]\nTEST EDI,EDI\nJS 0x00406ca4\nCALL 0x00401940\nMOV qword ptr [RBX + 0x18],0x0\nNOT RBP\nMOV RAX,qword ptr [RBX + 0x38]\nMOV RCX,qword ptr [RBX + 0x48]\nCMP byte ptr [RAX + RCX*0x1 + -0x1],0x2f\nLEA RDX,[RCX + -0x1]\nCMOVNZ RDX,RCX\nTEST byte ptr [R15 + 0x48],0x4\nMOV dword ptr [RSP + 0x2c],R12D\nMOV qword ptr [RSP + 0x60],R14\nJNZ 0x00406cde\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x00406cf0\nMOV RAX,qword ptr [R15 + 0x20]\nLEA RCX,[RAX + RDX*0x1 + 0x1]\nMOV qword ptr [RSP + 0x20],RCX\nMOV byte ptr [RAX + RDX*0x1],0x2f\nOR RBP,0x186a0\nMOV qword ptr [RSP + 0x70],RBP\nLEA R13,[RDX + 0x1]\nMOV RAX,qword ptr [R15 + 0x30]\nSUB RAX,R13\nMOV qword ptr [RSP + 0x50],RAX\nMOV RAX,qword ptr [RBX + 0x58]\nINC RAX\nMOV qword ptr [RSP + 0x68],RAX\nADD RDX,0x2\nMOV qword ptr [RSP + 0x58],RDX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x40],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x48],RAX\nXOR R14D,R14D\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x38],R13\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJZ 0x004070c5\nMOV qword ptr [RSP + 0x18],RAX\nNOP dword ptr [RAX + RAX*0x1]\nCALL 0x00401a00\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00406f78\nTEST byte ptr [R15 + 0x48],0x20\nJNZ 0x00406da0\nCMP byte ptr [RBP + 0x13],0x2e\nJNZ 0x00406da0\nMOVZX EAX,byte ptr [RBP + 0x14]\nCMP AL,0x2e\nJZ 0x00406d80\nTEST AL,AL\nJZ 0x00406d86\nJMP 0x00406da0\nCMP byte ptr [RBP + 0x15],0x0\nJNZ 0x00406da0\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJNZ 0x00406d50\nJMP 0x00406f8e\nMOV qword ptr [RSP + 0x30],R14\nMOV RBX,RBP\nADD RBX,0x13\nMOV RDI,RBX\nCALL 0x00401880\nMOV R12,RAX\nMOV RDI,R15\nMOV RSI,RBX\nMOV RDX,R12\nCALL 0x00405d10\nMOV R13,RAX\nTEST R13,R13\nJZ 0x004070d8\nMOV RAX,qword ptr [RSP + 0x50]\nCMP R12,RAX\nJNC 0x00406df0\nMOV R14,qword ptr [RSP + 0x30]\nMOV RDX,qword ptr [RSP + 0x38]\nADD R12,RDX\nJNC 0x00406e59\nJMP 0x00407128\nMOV RBX,qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x58]\nLEA RSI,[RAX + R12*0x1]\nMOV RDI,R15\nCALL 0x00405cb0\nTEST AL,AL\nJZ 0x004070d8\nMOV RAX,qword ptr [R15 + 0x20]\nCMP RBX,RAX\nJZ 0x00406e3f\nMOV RDX,qword ptr [RSP + 0x38]\nADD RAX,RDX\nTEST byte ptr [R15 + 0x48],0x4\nMOV RCX,qword ptr [RSP + 0x20]\nCMOVNZ RCX,RAX\nMOV qword ptr [RSP + 0x20],RCX\nMOV AL,0x1\nMOV qword ptr [RSP + 0x40],RAX\nMOV R14,qword ptr [RSP + 0x30]\nJMP 0x00406e49\nMOV R14,qword ptr [RSP + 0x30]\nMOV RDX,qword ptr [RSP + 0x38]\nMOV RAX,qword ptr [R15 + 0x30]\nSUB RAX,RDX\nADD R12,RDX\nJC 0x00407128\nMOV qword ptr [RSP + 0x50],RAX\nMOV RAX,qword ptr [RSP + 0x68]\nMOV qword ptr [R13 + 0x58],RAX\nMOV RAX,qword ptr [R15]\nMOV qword ptr [R13 + 0x8],RAX\nMOV qword ptr [R13 + 0x48],R12\nMOV RAX,qword ptr [RBP]\nMOV qword ptr [0x80 + R13],RAX\nTEST byte ptr [R15 + 0x48],0x4\nJNZ 0x00406ea0\nLEA RAX,[0x108 + R13]\nMOV qword ptr [R13 + 0x30],RAX\nJMP 0x00406ec0\nMOV RAX,qword ptr [R13 + 0x38]\nMOV qword ptr [R13 + 0x30],RAX\nLEA RSI,[0x108 + R13]\nMOV RDX,qword ptr [R13 + 0x60]\nINC RDX\nMOV RDI,qword ptr [RSP + 0x20]\nCALL 0x00401ad0\nMOV EAX,dword ptr [R15 + 0x48]\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x00406ef0\nMOV ECX,EAX\nAND ECX,0x400\nJNZ 0x00406ef0\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00405dc0\nMOV word ptr [R13 + 0x70],AX\nJMP 0x00406f35\nMOV RDI,R13\nADD RDI,0x78\nAND EAX,0x18\nCMP EAX,0x18\nJNZ 0x00406f10\nMOV AL,byte ptr [RBP + 0x12]\nCMP AL,0x4\nSETNZ CL\nTEST AL,AL\nSETNZ BL\nAND BL,CL\nJMP 0x00406f12\nXOR EBX,EBX\nMOV word ptr [R13 + 0x70],0xb\nMOVZX ESI,byte ptr [RBP + 0x12]\nCALL 0x00407670\nXOR BL,0x1\nMOVZX ESI,BL\nMOV RDI,R13\nCALL 0x00405da0\nMOV R14,qword ptr [RSP + 0x30]\nMOV qword ptr [R13 + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nMOV R12,R13\nJZ 0x00406f56\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x10],R13\nMOV R12,RAX\nINC R14\nCMP qword ptr [RSP + 0x70],R14\nMOV qword ptr [RSP + 0x48],R13\nMOV RAX,R12\nMOV R13,qword ptr [RSP + 0x38]\nMOV RBX,qword ptr [RSP + 0x8]\nJA 0x00406d39\nJMP 0x00406f93\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJZ 0x00406f8e\nCALL 0x00401950\nMOV qword ptr [RBX + 0x18],0x0\nMOV R12,qword ptr [RSP + 0x18]\nTEST byte ptr [RSP + 0x40],0x1\nJZ 0x00406fa5\nMOV RDI,R15\nMOV RSI,R12\nCALL 0x00407690\nTEST byte ptr [R15 + 0x48],0x4\nJZ 0x00406fca\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,RAX\nLEA RAX,[RCX + -0x1]\nCMP R13,qword ptr [R15 + 0x30]\nCMOVZ RCX,RAX\nTEST R14,R14\nCMOVZ RCX,RAX\nMOV byte ptr [RCX],0x0\nCMP qword ptr [RSP + 0x60],0x0\nSETNZ AL\nOR AL,byte ptr [RSP + 0x14]\nJZ 0x00406ff4\nTEST R14,R14\nJNZ 0x00407000\nCMP dword ptr [RSP + 0x2c],0x3\nJNZ 0x004070a8\nMOV word ptr [RBX + 0x70],0x6\nJMP 0x004070a8\nCMP dword ptr [RSP + 0x2c],0x1\nJZ 0x00407067\nTEST R14,R14\nJZ 0x00407067\nCMP R14,0x2711\nJC 0x00407045\nCMP qword ptr [R15 + 0x40],0x0\nJNZ 0x00407045\nTEST byte ptr [R15 + 0x49],0x2\nJZ 0x00407045\nMOV EDI,dword ptr [R15 + 0x2c]\nCALL 0x00407710\nTEST AL,AL\nJZ 0x00407045\nMOV qword ptr [R15 + 0x40],0x407750\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00405f30\nMOV R12,RAX\nMOV qword ptr [R15 + 0x40],0x0\nCMP R14,0x2\nJC 0x004070b3\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nJZ 0x004070b3\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00405f30\nMOV R12,RAX\nJMP 0x004070b3\nCMP qword ptr [RBX + 0x58],0x0\nJZ 0x0040708d\nMOV RSI,qword ptr [RBX + 0x8]\nMOV EDX,0xffffffff\nMOV ECX,0x40a35f\nMOV RDI,R15\nCALL 0x004068f0\nTEST EAX,EAX\nJNZ 0x0040709d\nJMP 0x00406fd9\nMOV RDI,R15\nCALL 0x00407170\nTEST EAX,EAX\nJZ 0x00406fd9\nMOV word ptr [RBX + 0x70],0x7\nOR byte ptr [R15 + 0x49],0x40\nMOV RDI,R12\nCALL 0x004060f0\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x78\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R12,RAX\nTEST byte ptr [RSP + 0x40],0x1\nJNZ 0x00406f9a\nJMP 0x00406fa5\nCALL 0x00401780\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV RDI,R13\nCALL 0x00401760\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x004060f0\nMOV RBP,qword ptr [RSP + 0x8]\nMOV RDI,qword ptr [RBP + 0x18]\nCALL 0x00401950\nMOV qword ptr [RBP + 0x18],0x0\nMOV word ptr [RBP + 0x70],0x7\nOR byte ptr [R15 + 0x49],0x40\nMOV dword ptr [RBX],R14D\nJMP 0x004070b0\nCALL 0x00401780\nMOV dword ptr [RAX],0xc\nJMP 0x004070b0\nMOV RDI,R13\nCALL 0x00401760\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x004060f0\nMOV RBX,qword ptr [RSP + 0x8]\nMOV RDI,qword ptr [RBX + 0x18]\nCALL 0x00401950\nMOV qword ptr [RBX + 0x18],0x0\nMOV word ptr [RBX + 0x70],0x7\nOR byte ptr [R15 + 0x49],0x40\nCALL 0x00401780\nMOV dword ptr [RAX],0x24\nJMP 0x004070b0\n'
p1390
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 78\n41 89 f4\n49 89 ff\n49 8b 1f\n4c 8b 73 18\n4d 85 f6\n74 34\n4c 89 f7\ne8 08 af ff ff\n89 44 24 04\n85 c0\n0f 89 e6 00 00 00\n48 8b 7b 18\ne8 93 ae ff ff\n48 c7 43 18 00 00 00 00\n41 83 fc 03\n0f 84 84 00 00 00\ne9 dc 05 00 00\n41 8b 4f 48\n89 c8\n25 04 02 00 00\nbf 9c ff ff ff\n3d 00 02 00 00\n75 04\n41 8b 7f 2c\n48 8b 73 30\n31 c0\nf6 c1 10\n74 11\nf6 c1 01\n74 07\n48 83 7b 58 00\n74 05\nb8 00 00 02 00\n41 8b 57 48\nc1 e2 07\n81 e2 00 00 04 00\n09 c2\n48 8d 4c 24 04\ne8 ec 0a 00 00\n48 89 43 18\n48 85 c0\n74 1c\n0f b7 43 70\n83 f8 0b\n75 32\n31 d2\n4c 89 ff\n48 89 de\ne8 7d f2 ff ff\n66 89 43 70\neb 51\n41 83 fc 03\n0f 85 5d 05 00 00\n66 c7 43 70 04 00\ne8 22 ac ff ff\n8b 00\n89 43 40\ne9 48 05 00 00\n41 f6 47 49 01\n74 2b\n4c 89 ff\n48 89 de\ne8 e6 fc ff ff\n31 d2\n4c 89 ff\n48 89 de\ne8 39 f2 ff ff\n4c 89 ff\n48 89 de\ne8 9e 07 00 00\n84 c0\n0f 84 81 05 00 00\n48 89 5c 24 08\n49 83 7f 40 01\n48 19 ed\n41 83 fc 02\n75 0a\n45 31 ed\n4d 85 f6\n75 33\neb 43\n41 8b 47 48\n89 c1\n83 e1 18\n49 c7 c5 ff ff ff ff\n83 f9 18\n75 17\n48 8b 4c 24 08\n4c 8b a9 88 00 00 00\nc1 e8 04\nf7 d0\n83 e0 02\n49 29 c5\n4d 85 f6\n74 12\nc7 44 24 14 00 00 00 00\n48 8b 5c 24 08\ne9 b2 00 00 00\n41 83 fc 03\n74 15\n4d 85 ed\n75 10\nb0 01\n89 44 24 14\n48 8b 5c 24 08\ne9 97 00 00 00\nb0 01\n89 44 24 14\n41 f6 47 49 02\n74 1d\n8b 7c 24 04\ne8 55 23 00 00\n89 44 24 04\n85 c0\n78 27\nbe 01 00 00 00\n89 c7\ne8 a1 0c 00 00\n8b 54 24 04\n85 d2\n78 13\n31 c9\n4c 89 ff\n48 8b 74 24 08\ne8 9a fc ff ff\n85 c0\n74 8e\n41 83 fc 03\n75 14\n4d 85 ed\n74 0f\ne8 16 ab ff ff\n8b 00\n48 8b 4c 24 08\n89 41 40\n48 8b 5c 24 08\n80 4b 72 01\n48 8b 7b 18\ne8 ca ac ff ff\n48 c7 43 18 00 00 00 00\n41 8b 47 48\nf6 c4 02\n74 0d\n8b 7c 24 04\n85 ff\n78 05\ne8 9c ac ff ff\n48 c7 43 18 00 00 00 00\n48 f7 d5\n48 8b 43 38\n48 8b 4b 48\n80 7c 08 ff 2f\n48 8d 51 ff\n48 0f 45 d1\n41 f6 47 48 04\n44 89 64 24 2c\n4c 89 74 24 60\n75 09\n31 c0\n48 89 44 24 20\neb 12\n49 8b 47 20\n48 8d 4c 10 01\n48 89 4c 24 20\nc6 04 10 2f\n48 81 cd a0 86 01 00\n48 89 6c 24 70\n4c 8d 6a 01\n49 8b 47 30\n4c 29 e8\n48 89 44 24 50\n48 8b 43 58\n48 ff c0\n48 89 44 24 68\n48 83 c2 02\n48 89 54 24 58\n31 c0\n48 89 44 24 40\n31 c0\n48 89 44 24 48\n45 31 f6\n31 c0\n4c 89 6c 24 38\n48 8b 7b 18\n48 85 ff\n0f 84 7f 03 00 00\n48 89 44 24 18\n0f 1f 44 00 00\ne8 ab ac ff ff\n48 89 c5\n48 85 ed\n0f 84 17 02 00 00\n41 f6 47 48 20\n75 38\n80 7d 13 2e\n75 32\n0f b6 45 14\n3c 2e\n74 0a\n84 c0\n74 0c\neb 24\n80 7d 15 00\n75 1a\n48 8b 7b 18\n48 85 ff\n75 c1\ne9 fa 01 00 00\n4c 89 74 24 30\n48 89 eb\n48 83 c3 13\n48 89 df\ne8 cc aa ff ff\n49 89 c4\n4c 89 ff\n48 89 de\n4c 89 e2\ne8 4b ef ff ff\n49 89 c5\n4d 85 ed\n0f 84 07 03 00 00\n48 8b 44 24 50\n49 39 c4\n73 15\n4c 8b 74 24 30\n48 8b 54 24 38\n49 01 d4\n73 6f\ne9 39 03 00 00\n49 8b 5f 20\n48 8b 44 24 58\n4a 8d 34 20\n4c 89 ff\ne8 ab ee ff ff\n84 c0\n0f 84 cb 02 00 00\n49 8b 47 20\n48 39 c3\n74 29\n48 8b 54 24 38\n48 01 d0\n41 f6 47 48 04\n48 8b 4c 24 20\n48 0f 45 c8\n48 89 4c 24 20\nb0 01\n48 89 44 24 40\n4c 8b 74 24 30\neb 0a\n4c 8b 74 24 30\n48 8b 54 24 38\n49 8b 47 30\n48 29 d0\n49 01 d4\n0f 82 cf 02 00 00\n48 89 44 24 50\n48 8b 44 24 68\n49 89 45 58\n49 8b 07\n49 89 45 08\n4d 89 65 48\n48 8b 45 00\n49 89 85 80 00 00 00\n41 f6 47 48 04\n75 1c\n49 8d 85 08 01 00 00\n49 89 45 30\neb 2f\n49 8b 45 38\n49 89 45 30\n49 8d b5 08 01 00 00\n49 8b 55 60\n48 ff c2\n48 8b 7c 24 20\ne8 10 ac ff ff\n41 8b 47 48\n49 83 7f 40 00\n74 25\n89 c1\n81 e1 00 04 00 00\n75 1b\n31 d2\n4c 89 ff\n4c 89 ee\ne8 de ee ff ff\n66 41 89 45 70\neb 4c\n4c 89 ef\n48 83 c7 78\n83 e0 18\n83 f8 18\n75 11\n8a 45 12\n3c 04\n0f 95 c1\n84 c0\n0f 95 c3\n20 cb\neb 02\n31 db\n66 41 c7 45 70 0b 00\n0f b6 75 12\ne8 4e 07 00 00\n80 f3 01\n0f b6 f3\n4c 89 ef\ne8 70 ee ff ff\n4c 8b 74 24 30\n49 c7 45 10 00 00 00 00\n48 8b 44 24 18\n48 85 c0\n4d 89 ec\n74 0c\n48 8b 4c 24 48\n4c 89 69 10\n49 89 c4\n49 ff c6\n4c 39 74 24 70\n4c 89 6c 24 48\n4c 89 e0\n4c 8b 6c 24 38\n48 8b 5c 24 08\n0f 87 c3 fd ff ff\neb 1b\n48 8b 7b 18\n48 85 ff\n74 0d\ne8 ca a9 ff ff\n48 c7 43 18 00 00 00 00\n4c 8b 64 24 18\nf6 44 24 40 01\n74 0b\n4c 89 ff\n4c 89 e6\ne8 eb 06 00 00\n41 f6 47 48 04\n74 1e\n48 8b 44 24 20\n48 89 c1\n48 8d 41 ff\n4d 3b 6f 30\n48 0f 44 c8\n4d 85 f6\n48 0f 44 c8\nc6 01 00\n48 83 7c 24 60 00\n0f 95 c0\n0a 44 24 14\n74 1b\n4d 85 f6\n75 22\n83 7c 24 2c 03\n0f 85 bf 00 00 00\n66 c7 43 70 06 00\ne9 b4 00 00 00\n83 7c 24 2c 01\n74 6c\n4d 85 f6\n74 67\n49 81 fe 11 27 00 00\n72 3c\n49 83 7f 40 00\n75 35\n41 f6 47 49 02\n74 2e\n41 8b 7f 2c\ne8 f0 06 00 00\n84 c0\n74 21\n49 c7 47 40 50 77 40 00\n4c 89 ff\n4c 89 e6\n4c 89 f2\ne8 f6 ee ff ff\n49 89 c4\n49 c7 47 40 00 00 00 00\n49 83 fe 02\n72 68\n49 8b 47 40\n48 85 c0\n74 5f\n4c 89 ff\n4c 89 e6\n4c 89 f2\ne8 ce ee ff ff\n49 89 c4\neb 4c\n48 83 7b 58 00\n74 1f\n48 8b 73 08\nba ff ff ff ff\nb9 5f a3 40 00\n4c 89 ff\ne8 6c f8 ff ff\n85 c0\n75 15\ne9 4c ff ff ff\n4c 89 ff\ne8 db 00 00 00\n85 c0\n0f 84 3c ff ff ff\n66 c7 43 70 07 00\n41 80 4f 49 40\n4c 89 e7\ne8 40 f0 ff ff\n45 31 e4\n4c 89 e0\n48 83 c4 78\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 89 c4\nf6 44 24 40 01\n0f 85 c7 fe ff ff\ne9 cd fe ff ff\ne8 a3 a6 ff ff\n48 89 c3\n44 8b 33\n4c 89 ef\ne8 75 a6 ff ff\n48 8b 7c 24 18\ne8 fb ef ff ff\n48 8b 6c 24 08\n48 8b 7d 18\ne8 4d a8 ff ff\n48 c7 45 18 00 00 00 00\n66 c7 45 70 07 00\n41 80 4f 49 40\n44 89 33\neb 95\ne8 60 a6 ff ff\nc7 00 0c 00 00 00\neb 88\n4c 89 ef\ne8 30 a6 ff ff\n48 8b 7c 24 18\ne8 b6 ef ff ff\n48 8b 5c 24 08\n48 8b 7b 18\ne8 08 a8 ff ff\n48 c7 43 18 00 00 00 00\n66 c7 43 70 07 00\n41 80 4f 49 40\ne8 20 a6 ff ff\nc7 00 24 00 00 00\ne9 45 ff ff ff\n'
p1391
S'.text:0000000000406a80\n.text:0000000000406a81\n.text:0000000000406a83\n.text:0000000000406a85\n.text:0000000000406a87\n.text:0000000000406a89\n.text:0000000000406a8a\n.text:0000000000406a8e\n.text:0000000000406a91\n.text:0000000000406a94\n.text:0000000000406a97\n.text:0000000000406a9b\n.text:0000000000406a9e\n.text:0000000000406aa0\n.text:0000000000406aa3\n.text:0000000000406aa8\n.text:0000000000406aac\n.text:0000000000406aae\n.text:0000000000406ab4\n.text:0000000000406ab8\n.text:0000000000406abd\n.text:0000000000406ac5\n.text:0000000000406ac9\n.text:0000000000406acf\n.text:0000000000406ad4\n.text:0000000000406ad8\n.text:0000000000406ada\n.text:0000000000406adf\n.text:0000000000406ae4\n.text:0000000000406ae9\n.text:0000000000406aeb\n.text:0000000000406aef\n.text:0000000000406af3\n.text:0000000000406af5\n.text:0000000000406af8\n.text:0000000000406afa\n.text:0000000000406afd\n.text:0000000000406aff\n.text:0000000000406b04\n.text:0000000000406b06\n.text:0000000000406b0b\n.text:0000000000406b0f\n.text:0000000000406b12\n.text:0000000000406b18\n.text:0000000000406b1a\n.text:0000000000406b1f\n.text:0000000000406b24\n.text:0000000000406b28\n.text:0000000000406b2b\n.text:0000000000406b2d\n.text:0000000000406b31\n.text:0000000000406b34\n.text:0000000000406b36\n.text:0000000000406b38\n.text:0000000000406b3b\n.text:0000000000406b3e\n.text:0000000000406b43\n.text:0000000000406b47\n.text:0000000000406b49\n.text:0000000000406b4d\n.text:0000000000406b53\n.text:0000000000406b59\n.text:0000000000406b5e\n.text:0000000000406b60\n.text:0000000000406b63\n.text:0000000000406b68\n.text:0000000000406b6d\n.text:0000000000406b6f\n.text:0000000000406b72\n.text:0000000000406b75\n.text:0000000000406b7a\n.text:0000000000406b7c\n.text:0000000000406b7f\n.text:0000000000406b82\n.text:0000000000406b87\n.text:0000000000406b8a\n.text:0000000000406b8d\n.text:0000000000406b92\n.text:0000000000406b94\n.text:0000000000406b9a\n.text:0000000000406b9f\n.text:0000000000406ba4\n.text:0000000000406ba7\n.text:0000000000406bab\n.text:0000000000406bad\n.text:0000000000406bb0\n.text:0000000000406bb3\n.text:0000000000406bb5\n.text:0000000000406bb7\n.text:0000000000406bbb\n.text:0000000000406bbd\n.text:0000000000406bc0\n.text:0000000000406bc7\n.text:0000000000406bca\n.text:0000000000406bcc\n.text:0000000000406bd1\n.text:0000000000406bd8\n.text:0000000000406bdb\n.text:0000000000406bdd\n.text:0000000000406be0\n.text:0000000000406be3\n.text:0000000000406be6\n.text:0000000000406be8\n.text:0000000000406bf0\n.text:0000000000406bf5\n.text:0000000000406bfa\n.text:0000000000406bfe\n.text:0000000000406c00\n.text:0000000000406c03\n.text:0000000000406c05\n.text:0000000000406c07\n.text:0000000000406c0b\n.text:0000000000406c10\n.text:0000000000406c15\n.text:0000000000406c17\n.text:0000000000406c1b\n.text:0000000000406c20\n.text:0000000000406c22\n.text:0000000000406c26\n.text:0000000000406c2b\n.text:0000000000406c2f\n.text:0000000000406c31\n.text:0000000000406c33\n.text:0000000000406c38\n.text:0000000000406c3a\n.text:0000000000406c3f\n.text:0000000000406c43\n.text:0000000000406c45\n.text:0000000000406c47\n.text:0000000000406c49\n.text:0000000000406c4c\n.text:0000000000406c51\n.text:0000000000406c56\n.text:0000000000406c58\n.text:0000000000406c5a\n.text:0000000000406c5e\n.text:0000000000406c60\n.text:0000000000406c63\n.text:0000000000406c65\n.text:0000000000406c6a\n.text:0000000000406c6c\n.text:0000000000406c71\n.text:0000000000406c74\n.text:0000000000406c79\n.text:0000000000406c7d\n.text:0000000000406c81\n.text:0000000000406c86\n.text:0000000000406c8e\n.text:0000000000406c92\n.text:0000000000406c95\n.text:0000000000406c97\n.text:0000000000406c9b\n.text:0000000000406c9d\n.text:0000000000406c9f\n.text:0000000000406ca4\n.text:0000000000406cac\n.text:0000000000406caf\n.text:0000000000406cb3\n.text:0000000000406cb7\n.text:0000000000406cbc\n.text:0000000000406cc0\n.text:0000000000406cc4\n.text:0000000000406cc9\n.text:0000000000406cce\n.text:0000000000406cd3\n.text:0000000000406cd5\n.text:0000000000406cd7\n.text:0000000000406cdc\n.text:0000000000406cde\n.text:0000000000406ce2\n.text:0000000000406ce7\n.text:0000000000406cec\n.text:0000000000406cf0\n.text:0000000000406cf7\n.text:0000000000406cfc\n.text:0000000000406d00\n.text:0000000000406d04\n.text:0000000000406d07\n.text:0000000000406d0c\n.text:0000000000406d10\n.text:0000000000406d13\n.text:0000000000406d18\n.text:0000000000406d1c\n.text:0000000000406d21\n.text:0000000000406d23\n.text:0000000000406d28\n.text:0000000000406d2a\n.text:0000000000406d2f\n.text:0000000000406d32\n.text:0000000000406d34\n.text:0000000000406d39\n.text:0000000000406d3d\n.text:0000000000406d40\n.text:0000000000406d46\n.text:0000000000406d4b\n.text:0000000000406d50\n.text:0000000000406d55\n.text:0000000000406d58\n.text:0000000000406d5b\n.text:0000000000406d61\n.text:0000000000406d66\n.text:0000000000406d68\n.text:0000000000406d6c\n.text:0000000000406d6e\n.text:0000000000406d72\n.text:0000000000406d74\n.text:0000000000406d76\n.text:0000000000406d78\n.text:0000000000406d7a\n.text:0000000000406d80\n.text:0000000000406d84\n.text:0000000000406d86\n.text:0000000000406d8a\n.text:0000000000406d8d\n.text:0000000000406d8f\n.text:0000000000406da0\n.text:0000000000406da5\n.text:0000000000406da8\n.text:0000000000406dac\n.text:0000000000406daf\n.text:0000000000406db4\n.text:0000000000406db7\n.text:0000000000406dba\n.text:0000000000406dbd\n.text:0000000000406dc0\n.text:0000000000406dc5\n.text:0000000000406dc8\n.text:0000000000406dcb\n.text:0000000000406dd1\n.text:0000000000406dd6\n.text:0000000000406dd9\n.text:0000000000406ddb\n.text:0000000000406de0\n.text:0000000000406de5\n.text:0000000000406de8\n.text:0000000000406dea\n.text:0000000000406df0\n.text:0000000000406df4\n.text:0000000000406df9\n.text:0000000000406dfd\n.text:0000000000406e00\n.text:0000000000406e05\n.text:0000000000406e07\n.text:0000000000406e0d\n.text:0000000000406e11\n.text:0000000000406e14\n.text:0000000000406e16\n.text:0000000000406e1b\n.text:0000000000406e1e\n.text:0000000000406e23\n.text:0000000000406e28\n.text:0000000000406e2c\n.text:0000000000406e31\n.text:0000000000406e33\n.text:0000000000406e38\n.text:0000000000406e3d\n.text:0000000000406e3f\n.text:0000000000406e44\n.text:0000000000406e49\n.text:0000000000406e4d\n.text:0000000000406e50\n.text:0000000000406e53\n.text:0000000000406e59\n.text:0000000000406e5e\n.text:0000000000406e63\n.text:0000000000406e67\n.text:0000000000406e6a\n.text:0000000000406e6e\n.text:0000000000406e72\n.text:0000000000406e76\n.text:0000000000406e7d\n.text:0000000000406e82\n.text:0000000000406e84\n.text:0000000000406e8b\n.text:0000000000406e8f\n.text:0000000000406ea0\n.text:0000000000406ea4\n.text:0000000000406ea8\n.text:0000000000406eaf\n.text:0000000000406eb3\n.text:0000000000406eb6\n.text:0000000000406ebb\n.text:0000000000406ec0\n.text:0000000000406ec4\n.text:0000000000406ec9\n.text:0000000000406ecb\n.text:0000000000406ecd\n.text:0000000000406ed3\n.text:0000000000406ed5\n.text:0000000000406ed7\n.text:0000000000406eda\n.text:0000000000406edd\n.text:0000000000406ee2\n.text:0000000000406ee7\n.text:0000000000406ef0\n.text:0000000000406ef3\n.text:0000000000406ef7\n.text:0000000000406efa\n.text:0000000000406efd\n.text:0000000000406eff\n.text:0000000000406f02\n.text:0000000000406f04\n.text:0000000000406f07\n.text:0000000000406f09\n.text:0000000000406f0c\n.text:0000000000406f0e\n.text:0000000000406f10\n.text:0000000000406f12\n.text:0000000000406f19\n.text:0000000000406f1d\n.text:0000000000406f22\n.text:0000000000406f25\n.text:0000000000406f28\n.text:0000000000406f2b\n.text:0000000000406f30\n.text:0000000000406f35\n.text:0000000000406f3d\n.text:0000000000406f42\n.text:0000000000406f45\n.text:0000000000406f48\n.text:0000000000406f4a\n.text:0000000000406f4f\n.text:0000000000406f53\n.text:0000000000406f56\n.text:0000000000406f59\n.text:0000000000406f5e\n.text:0000000000406f63\n.text:0000000000406f66\n.text:0000000000406f6b\n.text:0000000000406f70\n.text:0000000000406f76\n.text:0000000000406f78\n.text:0000000000406f7c\n.text:0000000000406f7f\n.text:0000000000406f81\n.text:0000000000406f86\n.text:0000000000406f8e\n.text:0000000000406f93\n.text:0000000000406f98\n.text:0000000000406f9a\n.text:0000000000406f9d\n.text:0000000000406fa0\n.text:0000000000406fa5\n.text:0000000000406faa\n.text:0000000000406fac\n.text:0000000000406fb1\n.text:0000000000406fb4\n.text:0000000000406fb8\n.text:0000000000406fbc\n.text:0000000000406fc0\n.text:0000000000406fc3\n.text:0000000000406fc7\n.text:0000000000406fca\n.text:0000000000406fd0\n.text:0000000000406fd3\n.text:0000000000406fd7\n.text:0000000000406fd9\n.text:0000000000406fdc\n.text:0000000000406fde\n.text:0000000000406fe3\n.text:0000000000406fe9\n.text:0000000000406fef\n.text:0000000000406ff4\n.text:0000000000406ff9\n.text:0000000000406ffb\n.text:0000000000406ffe\n.text:0000000000407000\n.text:0000000000407007\n.text:0000000000407009\n.text:000000000040700e\n.text:0000000000407010\n.text:0000000000407015\n.text:0000000000407017\n.text:000000000040701b\n.text:0000000000407020\n.text:0000000000407022\n.text:0000000000407024\n.text:000000000040702c\n.text:000000000040702f\n.text:0000000000407032\n.text:0000000000407035\n.text:000000000040703a\n.text:000000000040703d\n.text:0000000000407045\n.text:0000000000407049\n.text:000000000040704b\n.text:000000000040704f\n.text:0000000000407052\n.text:0000000000407054\n.text:0000000000407057\n.text:000000000040705a\n.text:000000000040705d\n.text:0000000000407062\n.text:0000000000407065\n.text:0000000000407067\n.text:000000000040706c\n.text:000000000040706e\n.text:0000000000407072\n.text:0000000000407077\n.text:000000000040707c\n.text:000000000040707f\n.text:0000000000407084\n.text:0000000000407086\n.text:0000000000407088\n.text:000000000040708d\n.text:0000000000407090\n.text:0000000000407095\n.text:0000000000407097\n.text:000000000040709d\n.text:00000000004070a3\n.text:00000000004070a8\n.text:00000000004070ab\n.text:00000000004070b0\n.text:00000000004070b3\n.text:00000000004070b6\n.text:00000000004070ba\n.text:00000000004070bb\n.text:00000000004070bd\n.text:00000000004070bf\n.text:00000000004070c1\n.text:00000000004070c3\n.text:00000000004070c4\n.text:00000000004070c5\n.text:00000000004070c8\n.text:00000000004070cd\n.text:00000000004070d3\n.text:00000000004070d8\n.text:00000000004070dd\n.text:00000000004070e0\n.text:00000000004070e3\n.text:00000000004070e6\n.text:00000000004070eb\n.text:00000000004070f0\n.text:00000000004070f5\n.text:00000000004070fa\n.text:00000000004070fe\n.text:0000000000407103\n.text:000000000040710b\n.text:0000000000407111\n.text:0000000000407116\n.text:0000000000407119\n.text:000000000040711b\n.text:0000000000407120\n.text:0000000000407126\n.text:0000000000407128\n.text:000000000040712b\n.text:0000000000407130\n.text:0000000000407135\n.text:000000000040713a\n.text:000000000040713f\n.text:0000000000407143\n.text:0000000000407148\n.text:0000000000407150\n.text:0000000000407156\n.text:000000000040715b\n.text:0000000000407160\n.text:0000000000407166\n'
p1392
tp1393
sS'quotearg_style'
p1394
(S'\n__stdcall quotearg_style(char * arg)\n'
p1395
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1396
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00404860\n'
p1397
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p1398
S'.text:0000000000404940\n.text:0000000000404943\n.text:0000000000404945\n.text:0000000000404947\n.text:0000000000404949\n.text:000000000040494c\n'
p1399
tp1400
sS'__argmatch_die'
p1401
(S'\n__stdcall __argmatch_die()\n'
p1402
V\u000avoid __argmatch_die(void)\u000a\u000a{\u000a  usage(1);\u000a  return;\u000a}\u000a\u000a
p1403
S'MOV EDI,0x1\nJMP 0x00401cc0\n'
p1404
S'bf 01 00 00 00\ne9 76 ec ff ff\n'
p1405
S'.text:0000000000403040\n.text:0000000000403045\n'
p1406
tp1407
sS'hash_get_n_buckets'
p1408
(S'\n__stdcall hash_get_n_buckets(Hash_table * table)\n'
p1409
V\u000asize_t hash_get_n_buckets(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets;\u000a}\u000a\u000a
p1410
S'MOV RAX,qword ptr [RDI + 0x10]\nRET\n'
p1411
S'48 8b 47 10\nc3\n'
p1412
S'.text:0000000000407b30\n.text:0000000000407b34\n'
p1413
tp1414
sS'dup_cloexec'
p1415
(S'\n__stdcall dup_cloexec()\n'
p1416
V\u000aint dup_cloexec(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0x406,0);\u000a  return iVar1;\u000a}\u000a\u000a
p1417
S'MOV ESI,0x406\nXOR EDX,EDX\nXOR EAX,EAX\nJMP 0x00409060\n'
p1418
S'be 06 04 00 00\n31 d2\n31 c0\ne9 12 17 00 00\n'
p1419
S'.text:0000000000407940\n.text:0000000000407945\n.text:0000000000407947\n.text:0000000000407949\n'
p1420
tp1421
sS'emit_try_help'
p1422
(S'\n__stdcall emit_try_help()\n'
p1423
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p1424
S'PUSH RBX\nMOV RBX,qword ptr [0x0060e320]\nXOR EDI,EDI\nMOV ESI,0x40a03d\nMOV EDX,0x5\nCALL 0x00401860\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060e358]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401b80\n'
p1425
S'53\n48 8b 1d d8 c4 20 00\n31 ff\nbe 3d a0 40 00\nba 05 00 00 00\ne8 07 fa ff ff\n48 89 c2\n48 8b 0d f5 c4 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 0d fd ff ff\n'
p1426
S'.text:0000000000401e40\n.text:0000000000401e41\n.text:0000000000401e48\n.text:0000000000401e4a\n.text:0000000000401e4f\n.text:0000000000401e54\n.text:0000000000401e59\n.text:0000000000401e5c\n.text:0000000000401e63\n.text:0000000000401e68\n.text:0000000000401e6a\n.text:0000000000401e6d\n.text:0000000000401e6e\n'
p1427
tp1428
sS'strrchr'
p1429
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1430
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060e0e0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1431
S'JMP qword ptr [0x0060e0e0]\n'
p1432
S'ff 25 fa c7 20 00\n'
p1433
S'.plt:00000000004018e0\n'
p1434
tp1435
sS'quotearg_alloc_mem'
p1436
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1437
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1438
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60e360\nCMOVNZ R12,RCX\nCALL 0x00401780\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403890\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x004055f0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403890\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x004045ba\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1439
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 60 e3 60 00\n4c 0f 45 e1\ne8 68 d2 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 81 10 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1440
S'.text:00000000004044e0\n.text:00000000004044e1\n.text:00000000004044e3\n.text:00000000004044e5\n.text:00000000004044e7\n.text:00000000004044e9\n.text:00000000004044ea\n.text:00000000004044ee\n.text:00000000004044f1\n.text:00000000004044f6\n.text:00000000004044f9\n.text:00000000004044fe\n.text:0000000000404501\n.text:0000000000404506\n.text:0000000000404509\n.text:000000000040450f\n.text:0000000000404513\n.text:0000000000404518\n.text:000000000040451d\n.text:000000000040451f\n.text:0000000000404523\n.text:0000000000404525\n.text:0000000000404528\n.text:000000000040452c\n.text:0000000000404531\n.text:0000000000404535\n.text:000000000040453a\n.text:000000000040453e\n.text:0000000000404540\n.text:0000000000404542\n.text:0000000000404545\n.text:0000000000404548\n.text:000000000040454b\n.text:0000000000404550\n.text:0000000000404555\n.text:0000000000404557\n.text:000000000040455c\n.text:0000000000404560\n.text:0000000000404563\n.text:0000000000404567\n.text:000000000040456a\n.text:000000000040456f\n.text:0000000000404572\n.text:0000000000404576\n.text:000000000040457a\n.text:000000000040457d\n.text:0000000000404580\n.text:0000000000404585\n.text:000000000040458a\n.text:000000000040458d\n.text:0000000000404592\n.text:0000000000404597\n.text:0000000000404599\n.text:000000000040459e\n.text:00000000004045a3\n.text:00000000004045a7\n.text:00000000004045aa\n.text:00000000004045ae\n.text:00000000004045b3\n.text:00000000004045b5\n.text:00000000004045b7\n.text:00000000004045ba\n.text:00000000004045bd\n.text:00000000004045c1\n.text:00000000004045c2\n.text:00000000004045c4\n.text:00000000004045c6\n.text:00000000004045c8\n.text:00000000004045ca\n.text:00000000004045cb\n'
p1441
tp1442
sS'quotearg_style_mem'
p1443
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1444
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1445
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404900\n'
p1446
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1447
S'.text:0000000000404960\n.text:0000000000404963\n.text:0000000000404966\n.text:0000000000404968\n.text:000000000040496a\n.text:000000000040496c\n.text:000000000040496f\n.text:0000000000404972\n'
p1448
tp1449
sS'xalloc_die'
p1450
(S'\n__stdcall xalloc_die()\n'
p1451
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,&DAT_0040a649,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1452
S'PUSH RBX\nMOV EBX,dword ptr [0x0060e270]\nXOR EDI,EDI\nMOV ESI,0x40b02f\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40a649\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401ae0\nCALL 0x00401770\n'
p1453
S'53\n8b 1d b9 8b 20 00\n31 ff\nbe 2f b0 40 00\nba 05 00 00 00\ne8 98 c1 ff ff\n48 89 c1\n31 f6\nba 49 a6 40 00\n31 c0\n89 df\ne8 05 c4 ff ff\ne8 90 c0 ff ff\n'
p1454
S'.text:00000000004056b0\n.text:00000000004056b1\n.text:00000000004056b7\n.text:00000000004056b9\n.text:00000000004056be\n.text:00000000004056c3\n.text:00000000004056c8\n.text:00000000004056cb\n.text:00000000004056cd\n.text:00000000004056d2\n.text:00000000004056d4\n.text:00000000004056d6\n.text:00000000004056db\n'
p1455
tp1456
sS'fts_set_stat_required'
p1457
(S'\n__stdcall fts_set_stat_required(FTSENT * p)\n'
p1458
V\u000avoid fts_set_stat_required(FTSENT *p)\u000a\u000a{\u000a  byte in_SIL;\u000a  \u000a  if (p->fts_info == 0xb) {\u000a    p->fts_statp[0].st_size = (ulong)in_SIL + 1;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1459
S'MOVZX EAX,word ptr [RDI + 0x70]\nCMP EAX,0xb\nJNZ 0x00405db8\nMOVZX EAX,SIL\nINC RAX\nMOV qword ptr [0xa8 + RDI],RAX\nRET\nPUSH RAX\nCALL 0x00401770\n'
p1460
S'0f b7 47 70\n83 f8 0b\n75 0f\n40 0f b6 c6\n48 ff c0\n48 89 87 a8 00 00 00\nc3\n50\ne8 b2 b9 ff ff\n'
p1461
S'.text:0000000000405da0\n.text:0000000000405da4\n.text:0000000000405da7\n.text:0000000000405da9\n.text:0000000000405dad\n.text:0000000000405db0\n.text:0000000000405db7\n.text:0000000000405db8\n.text:0000000000405db9\n'
p1462
tp1463
sS'open_safer'
p1464
(S'\n__stdcall open_safer(char * file)\n'
p1465
V\u000a/* WARNING: Removing unreachable block (ram,0x00407afe) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff58 : 0x00407b0c */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint open_safer(char *file,...)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  uint __oflag;\u000a  va_list ap;\u000a  uint local_a8;\u000a  \u000a  uVar2 = 0;\u000a  if ((__oflag & 0x40) != 0) {\u000a    uVar2 = (ulong)local_a8;\u000a  }\u000a  open(file,__oflag,uVar2);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p1466
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00407aa2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nXOR EDX,EDX\nTEST SIL,0x40\nJZ 0x00407b0e\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x00407afe\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x00407b0c\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV EDX,dword ptr [RAX]\nXOR EAX,EAX\nCALL 0x00401af0\nMOV EDI,EAX\nCALL 0x00408f90\nADD RSP,0xd8\nRET\n'
p1467
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n31 d2\n40 f6 c6 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 10\n31 c0\ne8 db 9f ff ff\n89 c7\ne8 74 14 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p1468
S'.text:0000000000407a60\n.text:0000000000407a67\n.text:0000000000407a69\n.text:0000000000407a6b\n.text:0000000000407a70\n.text:0000000000407a75\n.text:0000000000407a7a\n.text:0000000000407a82\n.text:0000000000407a8a\n.text:0000000000407a92\n.text:0000000000407a9a\n.text:0000000000407aa2\n.text:0000000000407aa7\n.text:0000000000407aac\n.text:0000000000407ab1\n.text:0000000000407ab6\n.text:0000000000407ab8\n.text:0000000000407abc\n.text:0000000000407abe\n.text:0000000000407ac3\n.text:0000000000407ac8\n.text:0000000000407ad0\n.text:0000000000407ad5\n.text:0000000000407add\n.text:0000000000407ae4\n.text:0000000000407ae8\n.text:0000000000407aec\n.text:0000000000407aee\n.text:0000000000407af1\n.text:0000000000407af6\n.text:0000000000407af9\n.text:0000000000407afc\n.text:0000000000407afe\n.text:0000000000407b03\n.text:0000000000407b07\n.text:0000000000407b0c\n.text:0000000000407b0e\n.text:0000000000407b10\n.text:0000000000407b15\n.text:0000000000407b17\n.text:0000000000407b1c\n.text:0000000000407b23\n'
p1469
tp1470
sS'quotearg_n_custom'
p1471
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1472
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1473
S'MOV R8,-0x1\nJMP 0x00404a80\n'
p1474
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1475
S'.text:0000000000404a70\n.text:0000000000404a77\n'
p1476
tp1477
sS'fts_sort'
p1478
(S'\n__stdcall fts_sort(FTS * sp, FTSENT * head, size_t nitems)\n'
p1479
V\u000aFTSENT * fts_sort(FTS *sp,FTSENT *head,size_t nitems)\u000a\u000a{\u000a  ulong uVar1;\u000a  int (*__compar)(_ftsent **,_ftsent **);\u000a  _ftsent **pp_Var2;\u000a  FTSENT *pFVar3;\u000a  _ftsent *p_Var4;\u000a  long lVar5;\u000a  _ftsent *p_Var6;\u000a  \u000a  __compar = sp->fts_compar;\u000a  if (sp->fts_nitems < nitems) {\u000a    uVar1 = nitems + 0x28;\u000a    sp->fts_nitems = uVar1;\u000a    if (uVar1 >> 0x3d == 0) {\u000a      pp_Var2 = (_ftsent **)realloc(sp->fts_array,uVar1 * 8);\u000a      if (pp_Var2 != (_ftsent **)0x0) {\u000a        sp->fts_array = pp_Var2;\u000a        goto LAB_00405f76;\u000a      }\u000a    }\u000a    free(sp->fts_array);\u000a    sp->fts_array = (_ftsent **)0x0;\u000a    sp->fts_nitems = 0;\u000a  }\u000a  else {\u000aLAB_00405f76:\u000a    if (head != (FTSENT *)0x0) {\u000a      pFVar3 = (FTSENT *)sp->fts_array;\u000a      do {\u000a        *(FTSENT **)pFVar3 = head;\u000a        pFVar3 = (FTSENT *)((FTSENT **)pFVar3 + 1);\u000a        head = (FTSENT *)head->fts_link;\u000a      } while (head != (FTSENT *)0x0);\u000a    }\u000a    qsort(sp->fts_array,nitems,8,(__compar_fn_t)__compar);\u000a    p_Var4 = (_ftsent *)sp->fts_array;\u000a    head = (FTSENT *)p_Var4->fts_cycle;\u000a    p_Var6 = (_ftsent *)head;\u000a    if (nitems != 1) {\u000a      lVar5 = 1 - nitems;\u000a      p_Var6 = (_ftsent *)head;\u000a      do {\u000a        p_Var4 = (_ftsent *)((_ftsent **)p_Var4 + 1);\u000a        ((FTSENT *)p_Var6)->fts_link = *(_ftsent **)p_Var4;\u000a        p_Var6 = *(_ftsent **)p_Var4;\u000a        lVar5 = lVar5 + 1;\u000a      } while (lVar5 != 0);\u000a    }\u000a    p_Var6->fts_link = (_ftsent *)0x0;\u000a  }\u000a  return head;\u000a}\u000a\u000a
p1480
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R15,RDI\nMOV R12,qword ptr [R15 + 0x40]\nCMP qword ptr [R15 + 0x38],R14\nJNC 0x00405f76\nLEA RSI,[R14 + 0x28]\nMOV qword ptr [R15 + 0x38],RSI\nMOV RAX,RSI\nSHR RAX,0x3d\nJNZ 0x00405fed\nMOV RDI,qword ptr [R15 + 0x10]\nSHL RSI,0x3\nCALL 0x00401a90\nTEST RAX,RAX\nJZ 0x00405fed\nMOV qword ptr [R15 + 0x10],RAX\nTEST RBX,RBX\nJZ 0x00405f90\nMOV RAX,qword ptr [R15 + 0x10]\nNOP\nMOV qword ptr [RAX],RBX\nADD RAX,0x8\nMOV RBX,qword ptr [RBX + 0x10]\nTEST RBX,RBX\nJNZ 0x00405f80\nMOV RDI,qword ptr [R15 + 0x10]\nMOV EDX,0x8\nMOV RSI,R14\nMOV RCX,R12\nCALL 0x004017f0\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RBX,qword ptr [RAX]\nCMP R14,0x1\nMOV RDX,RBX\nJZ 0x00405fe3\nMOV ECX,0x1\nSUB RCX,R14\nADD RAX,0x8\nMOV RDX,RBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [RAX]\nMOV qword ptr [RDX + 0x10],RSI\nMOV RDX,qword ptr [RAX]\nADD RAX,0x8\nINC RCX\nJNZ 0x00405fd0\nMOV qword ptr [RDX + 0x10],0x0\nJMP 0x00406006\nMOV RDI,qword ptr [R15 + 0x10]\nCALL 0x00401760\nMOV qword ptr [R15 + 0x10],0x0\nMOV qword ptr [R15 + 0x38],0x0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1481
S'41 57\n41 56\n41 54\n53\n50\n49 89 d6\n48 89 f3\n49 89 ff\n4d 8b 67 40\n4d 39 77 38\n73 2b\n49 8d 76 28\n49 89 77 38\n48 89 f0\n48 c1 e8 3d\n0f 85 8d 00 00 00\n49 8b 7f 10\n48 c1 e6 03\ne8 23 bb ff ff\n48 85 c0\n74 7b\n49 89 47 10\n48 85 db\n74 15\n49 8b 47 10\n90\n48 89 18\n48 83 c0 08\n48 8b 5b 10\n48 85 db\n75 f0\n49 8b 7f 10\nba 08 00 00 00\n4c 89 f6\n4c 89 e1\ne8 4c b8 ff ff\n49 8b 47 10\n48 8b 18\n49 83 fe 01\n48 89 da\n74 2f\nb9 01 00 00 00\n4c 29 f1\n48 83 c0 08\n48 89 da\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 30\n48 89 72 10\n48 8b 10\n48 83 c0 08\n48 ff c1\n75 ed\n48 c7 42 10 00 00 00 00\neb 19\n49 8b 7f 10\ne8 6a b7 ff ff\n49 c7 47 10 00 00 00 00\n49 c7 47 38 00 00 00 00\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1482
S'.text:0000000000405f30\n.text:0000000000405f32\n.text:0000000000405f34\n.text:0000000000405f36\n.text:0000000000405f37\n.text:0000000000405f38\n.text:0000000000405f3b\n.text:0000000000405f3e\n.text:0000000000405f41\n.text:0000000000405f45\n.text:0000000000405f49\n.text:0000000000405f4b\n.text:0000000000405f4f\n.text:0000000000405f53\n.text:0000000000405f56\n.text:0000000000405f5a\n.text:0000000000405f60\n.text:0000000000405f64\n.text:0000000000405f68\n.text:0000000000405f6d\n.text:0000000000405f70\n.text:0000000000405f72\n.text:0000000000405f76\n.text:0000000000405f79\n.text:0000000000405f7b\n.text:0000000000405f7f\n.text:0000000000405f80\n.text:0000000000405f83\n.text:0000000000405f87\n.text:0000000000405f8b\n.text:0000000000405f8e\n.text:0000000000405f90\n.text:0000000000405f94\n.text:0000000000405f99\n.text:0000000000405f9c\n.text:0000000000405f9f\n.text:0000000000405fa4\n.text:0000000000405fa8\n.text:0000000000405fab\n.text:0000000000405faf\n.text:0000000000405fb2\n.text:0000000000405fb4\n.text:0000000000405fb9\n.text:0000000000405fbc\n.text:0000000000405fc0\n.text:0000000000405fc3\n.text:0000000000405fd0\n.text:0000000000405fd3\n.text:0000000000405fd7\n.text:0000000000405fda\n.text:0000000000405fde\n.text:0000000000405fe1\n.text:0000000000405fe3\n.text:0000000000405feb\n.text:0000000000405fed\n.text:0000000000405ff1\n.text:0000000000405ff6\n.text:0000000000405ffe\n.text:0000000000406006\n.text:0000000000406009\n.text:000000000040600d\n.text:000000000040600e\n.text:0000000000406010\n.text:0000000000406012\n.text:0000000000406014\n'
p1483
tp1484
sS'fd_safer'
p1485
(S'\n__stdcall fd_safer()\n'
p1486
V\u000aint fd_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int *piVar3;\u000a  uint __fd;\u000a  \u000a  if (__fd < 3) {\u000a    uVar2 = dup_safer();\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(__fd);\u000a    *piVar3 = iVar1;\u000a    __fd = uVar2;\u000a  }\u000a  return (int)__fd;\u000a}\u000a\u000a
p1487
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nCMP EBX,0x2\nJA 0x00408fc4\nMOV EDI,EBX\nCALL 0x00408f80\nMOV R14D,EAX\nCALL 0x00401780\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV EDI,EBX\nCALL 0x00401940\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nJMP 0x00408fc6\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1488
S'55\n41 57\n41 56\n53\n50\n89 fb\n83 fb 02\n77 26\n89 df\ne8 db ff ff ff\n41 89 c6\ne8 d3 87 ff ff\n48 89 c5\n44 8b 7d 00\n89 df\ne8 85 89 ff ff\n44 89 7d 00\n44 89 f0\neb 02\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1489
S'.text:0000000000408f90\n.text:0000000000408f91\n.text:0000000000408f93\n.text:0000000000408f95\n.text:0000000000408f96\n.text:0000000000408f97\n.text:0000000000408f99\n.text:0000000000408f9c\n.text:0000000000408f9e\n.text:0000000000408fa0\n.text:0000000000408fa5\n.text:0000000000408fa8\n.text:0000000000408fad\n.text:0000000000408fb0\n.text:0000000000408fb4\n.text:0000000000408fb6\n.text:0000000000408fbb\n.text:0000000000408fbf\n.text:0000000000408fc2\n.text:0000000000408fc4\n.text:0000000000408fc6\n.text:0000000000408fca\n.text:0000000000408fcb\n.text:0000000000408fcd\n.text:0000000000408fcf\n.text:0000000000408fd0\n'
p1490
tp1491
sS'fts_alloc'
p1492
(S'\n__stdcall fts_alloc(FTS * sp, char * name, size_t namelen)\n'
p1493
V\u000aFTSENT * fts_alloc(FTS *sp,char *name,size_t namelen)\u000a\u000a{\u000a  FTSENT *pFVar1;\u000a  \u000a  pFVar1 = (FTSENT *)malloc(namelen + 0x118 & 0xfffffffffffffff0);\u000a  if (pFVar1 == (FTSENT *)0x0) {\u000a    pFVar1 = (FTSENT *)0x0;\u000a  }\u000a  else {\u000a    memcpy(pFVar1 + 1,name,namelen);\u000a    *(undefined *)((long)&pFVar1[1].fts_cycle + namelen) = 0;\u000a    pFVar1->fts_namelen = namelen;\u000a    pFVar1->fts_fts = sp;\u000a    pFVar1->fts_path = sp->fts_path;\u000a    pFVar1->fts_errno = 0;\u000a    pFVar1->fts_dirp = (DIR *)0x0;\u000a    pFVar1->fts_flags = 0;\u000a    pFVar1->fts_instr = 3;\u000a    *(undefined4 *)&pFVar1->fts_number = 0;\u000a    *(undefined4 *)((long)&pFVar1->fts_number + 4) = 0;\u000a    *(undefined4 *)&pFVar1->fts_pointer = 0;\u000a    *(undefined4 *)((long)&pFVar1->fts_pointer + 4) = 0;\u000a  }\u000a  return pFVar1;\u000a}\u000a\u000a
p1494
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV R12,RSI\nMOV R14,RDI\nLEA RDI,[0x118 + R15]\nAND RDI,-0x10\nCALL 0x00401a20\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405d8b\nMOV RDI,RBX\nADD RDI,0x108\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x004019d0\nMOV byte ptr [0x108 + RBX + R15*0x1],0x0\nMOV qword ptr [RBX + 0x60],R15\nMOV qword ptr [RBX + 0x50],R14\nMOV RAX,qword ptr [R14 + 0x20]\nMOV qword ptr [RBX + 0x38],RAX\nMOV dword ptr [RBX + 0x40],0x0\nMOV qword ptr [RBX + 0x18],0x0\nMOV word ptr [RBX + 0x72],0x0\nMOV word ptr [RBX + 0x74],0x3\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x20],XMM0\nJMP 0x00405d8d\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1495
S'41 57\n41 56\n41 54\n53\n50\n49 89 d7\n49 89 f4\n49 89 fe\n49 8d bf 18 01 00 00\n48 83 e7 f0\ne8 ef bc ff ff\n48 89 c3\n48 85 db\n74 52\n48 89 df\n48 81 c7 08 01 00 00\n4c 89 e6\n4c 89 fa\ne8 82 bc ff ff\n42 c6 84 3b 08 01 00 00 00\n4c 89 7b 60\n4c 89 73 50\n49 8b 46 20\n48 89 43 38\nc7 43 40 00 00 00 00\n48 c7 43 18 00 00 00 00\n66 c7 43 72 00 00\n66 c7 43 74 03 00\n0f 57 c0\n0f 11 43 20\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1496
S'.text:0000000000405d10\n.text:0000000000405d12\n.text:0000000000405d14\n.text:0000000000405d16\n.text:0000000000405d17\n.text:0000000000405d18\n.text:0000000000405d1b\n.text:0000000000405d1e\n.text:0000000000405d21\n.text:0000000000405d28\n.text:0000000000405d2c\n.text:0000000000405d31\n.text:0000000000405d34\n.text:0000000000405d37\n.text:0000000000405d39\n.text:0000000000405d3c\n.text:0000000000405d43\n.text:0000000000405d46\n.text:0000000000405d49\n.text:0000000000405d4e\n.text:0000000000405d57\n.text:0000000000405d5b\n.text:0000000000405d5f\n.text:0000000000405d63\n.text:0000000000405d67\n.text:0000000000405d6e\n.text:0000000000405d76\n.text:0000000000405d7c\n.text:0000000000405d82\n.text:0000000000405d85\n.text:0000000000405d89\n.text:0000000000405d8b\n.text:0000000000405d8d\n.text:0000000000405d90\n.text:0000000000405d94\n.text:0000000000405d95\n.text:0000000000405d97\n.text:0000000000405d99\n.text:0000000000405d9b\n'
p1497
tp1498
sS'__freading'
p1499
(S'\n__stdcall __freading()\n'
p1500
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060e1a8)();\u000a  return;\u000a}\u000a\u000a
p1501
S'JMP qword ptr [0x0060e1a8]\n'
p1502
S'ff 25 32 c7 20 00\n'
p1503
S'.plt:0000000000401a70\n'
p1504
tp1505
sS'fts_read'
p1506
(S'\n__stdcall fts_read(FTS * sp)\n'
p1507
V\u000aFTSENT * fts_read(FTS *sp)\u000a\u000a{\u000a  byte *pbVar1;\u000a  uint uVar2;\u000a  _ftsent *p_Var3;\u000a  char *pcVar4;\u000a  size_t sVar5;\u000a  long lVar6;\u000a  _Bool _Var7;\u000a  unsigned_short uVar8;\u000a  int iVar9;\u000a  FTSENT *ent;\u000a  FTSENT *head;\u000a  int *piVar10;\u000a  size_t sVar11;\u000a  \u000a  ent = (FTSENT *)sp->fts_cur;\u000a  if (ent == (FTSENT *)0x0) {\u000a    return (FTSENT *)0x0;\u000a  }\u000a  if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a    return (FTSENT *)0x0;\u000a  }\u000a  uVar8 = ent->fts_instr;\u000a  ent->fts_instr = 3;\u000a  if (uVar8 == 1) {\u000a    uVar8 = fts_stat(sp,ent);\u000a    ent->fts_info = uVar8;\u000a    return ent;\u000a  }\u000a  if ((uVar8 == 2) && ((ent->fts_info & 0xfffe) == 0xc)) {\u000a    uVar8 = fts_stat(sp,ent);\u000a    ent->fts_info = uVar8;\u000a    if ((uVar8 == 1) && ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a      iVar9 = diropen(sp,".");\u000a      ent->fts_symfd = iVar9;\u000a      if (iVar9 < 0) {\u000a        piVar10 = __errno_location();\u000a        ent->fts_errno = *piVar10;\u000a        ent->fts_info = 7;\u000a      }\u000a      else {\u000a        *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 2;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    head = ent;\u000a    if (ent->fts_info == 1) {\u000a      if ((uVar8 == 4) ||\u000a         ((uVar2 = sp->fts_options, (uVar2 & 0x40) != 0 && (ent->fts_statp[0].st_dev != sp->fts_dev)\u000a          ))) {\u000a        if ((*(byte *)&ent->fts_flags & 2) != 0) {\u000a          close(ent->fts_symfd);\u000a        }\u000a        if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a          fts_lfree((FTSENT *)sp->fts_child);\u000a          sp->fts_child = (_ftsent *)0x0;\u000a        }\u000a        ent->fts_info = 6;\u000a        goto LAB_00406488;\u000a      }\u000a      head = (FTSENT *)sp->fts_child;\u000a      if (((uVar2 & 0x2000) == 0) || (head == (FTSENT *)0x0)) {\u000a        if (head == (FTSENT *)0x0) goto LAB_00406560;\u000a        iVar9 = fts_safe_changedir(sp,ent,(char *)0xffffffff);\u000a        if (iVar9 != 0) {\u000a          piVar10 = __errno_location();\u000a          ent->fts_errno = *piVar10;\u000a          *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 1;\u000a          p_Var3 = sp->fts_child;\u000a          while (p_Var3 != (_ftsent *)0x0) {\u000a            p_Var3->fts_accpath = p_Var3->fts_parent->fts_accpath;\u000a            p_Var3 = p_Var3->fts_link;\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        sp->fts_options = uVar2 & 0xffffdfff;\u000a        fts_lfree(head);\u000a        sp->fts_child = (_ftsent *)0x0;\u000aLAB_00406560:\u000a        head = fts_build(sp);\u000a        *(FTSENT **)&sp->fts_child = head;\u000a        if (head == (FTSENT *)0x0) {\u000a          if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a            return (FTSENT *)0x0;\u000a          }\u000a          if ((ent->fts_errno != 0) && (ent->fts_info != 4)) {\u000a            ent->fts_info = 7;\u000a          }\u000aLAB_00406488:\u000a          leave_dir(sp,ent);\u000a          return ent;\u000a        }\u000a      }\u000a      ent = (FTSENT *)sp->fts_child;\u000a      sp->fts_child = (_ftsent *)0x0;\u000a    }\u000a    else {\u000a      do {\u000a        ent = (FTSENT *)head->fts_link;\u000a        if (ent == (FTSENT *)0x0) {\u000a          p_Var3 = head->fts_parent;\u000a          if (p_Var3->fts_dirp != (DIR *)0x0) {\u000a            sp->fts_cur = p_Var3;\u000a            sp->fts_path[p_Var3->fts_pathlen] = 0;\u000a            ent = fts_build(sp);\u000a            if (ent != (FTSENT *)0x0) {\u000a              free(head);\u000a              goto LAB_004066e4;\u000a            }\u000a            if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a              return (FTSENT *)0x0;\u000a            }\u000a          }\u000a          ent = (FTSENT *)head->fts_parent;\u000a          *(FTSENT **)&sp->fts_cur = ent;\u000a          free(head);\u000a          if (ent->fts_level == -1) {\u000a            free(ent);\u000a            piVar10 = __errno_location();\u000a            *piVar10 = 0;\u000a            sp->fts_cur = (_ftsent *)0x0;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          if (ent->fts_info != 0xb) {\u000a            sp->fts_path[ent->fts_pathlen] = 0;\u000a            if (ent->fts_level == 0) {\u000a              iVar9 = restore_initial_cwd(sp);\u000a            }\u000a            else {\u000a              if ((ent->fts_flags & 2) != 0) {\u000a                if ((sp->fts_options & 4U) == 0) {\u000a                  if ((sp->fts_options & 0x200U) == 0) {\u000a                    iVar9 = fchdir(ent->fts_symfd);\u000a                    if (iVar9 != 0) {\u000a                      piVar10 = __errno_location();\u000a                      ent->fts_errno = *piVar10;\u000a                      pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a                      *pbVar1 = *pbVar1 | 0x40;\u000a                    }\u000a                  }\u000a                  else {\u000a                    cwd_advance_fd(sp);\u000a                  }\u000a                }\u000a                close(ent->fts_symfd);\u000a                goto LAB_00406817;\u000a              }\u000a              if ((ent->fts_flags & 1) != 0) goto LAB_00406817;\u000a              iVar9 = fts_safe_changedir(sp,(FTSENT *)ent->fts_parent,(char *)0xffffffff);\u000a            }\u000a            if (iVar9 != 0) {\u000a              piVar10 = __errno_location();\u000a              ent->fts_errno = *piVar10;\u000a              pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a              *pbVar1 = *pbVar1 | 0x40;\u000a            }\u000aLAB_00406817:\u000a            if ((ent->fts_info != 2) &&\u000a               (ent->fts_info = (ushort)(ent->fts_errno != 0) | 6, ent->fts_errno == 0)) {\u000a              leave_dir(sp,ent);\u000a            }\u000a            if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a              return (FTSENT *)0x0;\u000a            }\u000a            return ent;\u000a          }\u000a          goto LAB_00406855;\u000a        }\u000a        *(FTSENT **)&sp->fts_cur = ent;\u000a        free(head);\u000a        if (ent->fts_level == 0) {\u000a          iVar9 = restore_initial_cwd(sp);\u000a          if (iVar9 != 0) {\u000a            pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a            *pbVar1 = *pbVar1 | 0x40;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          free_dir(sp);\u000a          fts_load(sp,ent);\u000a          setup_dir(sp);\u000a          goto LAB_00406720;\u000a        }\u000a        head = ent;\u000a      } while (ent->fts_instr == 4);\u000a      if (ent->fts_instr == 2) {\u000a        uVar8 = fts_stat(sp,ent);\u000a        ent->fts_info = uVar8;\u000a        if ((uVar8 == 1) && ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a          iVar9 = diropen(sp,".");\u000a          ent->fts_symfd = iVar9;\u000a          if (iVar9 < 0) {\u000a            piVar10 = __errno_location();\u000a            ent->fts_errno = *piVar10;\u000a            ent->fts_info = 7;\u000a          }\u000a          else {\u000a            *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 2;\u000a          }\u000a        }\u000a        ent->fts_instr = 3;\u000a      }\u000a    }\u000aLAB_004066e4:\u000a    pcVar4 = sp->fts_path;\u000a    sVar5 = ent->fts_parent->fts_pathlen;\u000a    sVar11 = sVar5 - 1;\u000a    if (ent->fts_parent->fts_path[sVar5 - 1] != '/') {\u000a      sVar11 = sVar5;\u000a    }\u000a    pcVar4[sVar11] = '/';\u000a    memmove(pcVar4 + sVar11 + 1,ent + 1,ent->fts_namelen + 1);\u000a  }\u000aLAB_00406720:\u000a  *(FTSENT **)&sp->fts_cur = ent;\u000a  uVar8 = ent->fts_info;\u000a  if (uVar8 == 0xb) {\u000a    lVar6 = ent->fts_statp[0].st_size;\u000a    if (lVar6 != 1) {\u000a      if (lVar6 != 2) {\u000aLAB_00406855:\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      head = (FTSENT *)ent->fts_parent;\u000a      if ((((ent->fts_level < 1) || (head->fts_n_dirs_remaining != 0)) ||\u000a          ((sp->fts_options & 0x18U) != 0x18)) ||\u000a         (_Var7 = link_count_optimize_ok(head), _Var7 == false)) {\u000a        uVar8 = fts_stat(sp,ent);\u000a        ent->fts_info = uVar8;\u000a        if ((ent->fts_statp[0].st_mode & 0xf000) != 0x4000) goto LAB_004067bc;\u000a        if ((ent->fts_level != 0) && (head->fts_n_dirs_remaining != 0)) {\u000a          head->fts_n_dirs_remaining = head->fts_n_dirs_remaining - 1;\u000a        }\u000a      }\u000a    }\u000a    uVar8 = ent->fts_info;\u000a  }\u000aLAB_004067bc:\u000a  if (uVar8 != 1) {\u000a    return ent;\u000a  }\u000a  if (ent->fts_level == 0) {\u000a    sp->fts_dev = ent->fts_statp[0].st_dev;\u000a  }\u000a  _Var7 = enter_dir(sp,ent);\u000a  if (_Var7 == false) {\u000a    piVar10 = __errno_location();\u000a    *piVar10 = 0xc;\u000a    return (FTSENT *)0x0;\u000a  }\u000a  return ent;\u000a}\u000a\u000a
p1508
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV R12,qword ptr [R14]\nTEST R12,R12\nJZ 0x004067ef\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x004067ef\nMOVZX EAX,word ptr [R12 + 0x74]\nMOV word ptr [R12 + 0x74],0x3\nCMP EAX,0x1\nJNZ 0x004062fd\nXOR EDX,EDX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00405dc0\nMOV word ptr [R12 + 0x70],AX\nJMP 0x004067f2\nMOVZX ECX,word ptr [R12 + 0x70]\nMOVZX EAX,AX\nCMP EAX,0x2\nJNZ 0x0040636d\nMOV EDX,ECX\nAND EDX,0xfffe\nMOVZX EDX,DX\nCMP EDX,0xc\nJNZ 0x0040636d\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00405dc0\nMOV word ptr [R12 + 0x70],AX\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x00406720\nTEST byte ptr [R14 + 0x48],0x4\nJNZ 0x00406720\nMOV ESI,0x40a360\nMOV RDI,R14\nCALL 0x00406090\nMOV dword ptr [R12 + 0x44],EAX\nTEST EAX,EAX\nJS 0x004064f7\nOR byte ptr [R12 + 0x72],0x2\nJMP 0x00406720\nMOVZX ECX,CX\nCMP ECX,0x1\nJNZ 0x004063d0\nCMP EAX,0x4\nJZ 0x00406458\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x40\nJZ 0x00406395\nMOV RCX,qword ptr [R12 + 0x78]\nCMP RCX,qword ptr [R14 + 0x18]\nJNZ 0x00406458\nMOV RDI,qword ptr [R14 + 0x8]\nTEST AH,0x20\nJZ 0x00406510\nTEST RDI,RDI\nJZ 0x00406510\nAND EAX,0xffffdfff\nMOV dword ptr [R14 + 0x48],EAX\nCALL 0x004060f0\nMOV qword ptr [R14 + 0x8],0x0\nJMP 0x00406560\nMOV RBX,qword ptr [R12 + 0x10]\nTEST RBX,RBX\nJZ 0x00406498\nMOV qword ptr [R14],RBX\nMOV RDI,R12\nCALL 0x00401760\nCMP qword ptr [RBX + 0x58],0x0\nJZ 0x004064dd\nMOVZX EAX,word ptr [RBX + 0x74]\nCMP EAX,0x4\nMOV R12,RBX\nJZ 0x004063d0\nMOVZX EAX,AX\nCMP EAX,0x2\nJNZ 0x004066e4\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00405dc0\nMOV word ptr [RBX + 0x70],AX\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x004066de\nTEST byte ptr [R14 + 0x48],0x4\nJNZ 0x004066de\nMOV ESI,0x40a360\nMOV RDI,R14\nCALL 0x00406090\nMOV dword ptr [RBX + 0x44],EAX\nTEST EAX,EAX\nJS 0x004066ce\nOR byte ptr [RBX + 0x72],0x2\nJMP 0x004066de\nTEST byte ptr [R12 + 0x72],0x2\nJZ 0x0040646a\nMOV EDI,dword ptr [R12 + 0x44]\nCALL 0x00401940\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00406480\nCALL 0x004060f0\nMOV qword ptr [R14 + 0x8],0x0\nMOV word ptr [R12 + 0x70],0x6\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00406860\nJMP 0x004067f2\nMOV RAX,qword ptr [R12 + 0x8]\nCMP qword ptr [RAX + 0x18],0x0\nJZ 0x004065e5\nMOV qword ptr [R14],RAX\nMOV RCX,qword ptr [R14 + 0x20]\nMOV RAX,qword ptr [RAX + 0x48]\nMOV byte ptr [RCX + RAX*0x1],0x0\nMOV ESI,0x3\nMOV RDI,R14\nCALL 0x00406a80\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004065da\nMOV RDI,R12\nCALL 0x00401760\nJMP 0x004066e4\nMOV RDI,R14\nCALL 0x00407170\nTEST EAX,EAX\nJZ 0x00406587\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x004067ef\nCALL 0x00401780\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R12 + 0x40],EAX\nMOV word ptr [R12 + 0x70],0x7\nJMP 0x00406720\nTEST RDI,RDI\nJZ 0x00406560\nMOV RCX,qword ptr [R12 + 0x30]\nMOV EDX,0xffffffff\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x004068f0\nTEST EAX,EAX\nJZ 0x00406576\nCALL 0x00401780\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R12 + 0x40],EAX\nOR byte ptr [R12 + 0x72],0x1\nMOV RAX,qword ptr [R14 + 0x8]\nTEST RAX,RAX\nJZ 0x00406576\nMOV RCX,qword ptr [RAX + 0x8]\nMOV RCX,qword ptr [RCX + 0x30]\nMOV qword ptr [RAX + 0x30],RCX\nMOV RAX,qword ptr [RAX + 0x10]\nTEST RAX,RAX\nJNZ 0x00406549\nJMP 0x00406576\nMOV ESI,0x3\nMOV RDI,R14\nCALL 0x00406a80\nMOV qword ptr [R14 + 0x8],RAX\nTEST RAX,RAX\nJZ 0x004065a7\nMOV RBX,qword ptr [R14 + 0x8]\nMOV qword ptr [R14 + 0x8],0x0\nJMP 0x004066e4\nMOV RDI,R14\nCALL 0x00406280\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004071c0\nMOV RDI,R14\nCALL 0x00406020\nJMP 0x0040671d\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x004067ef\nCMP dword ptr [R12 + 0x40],0x0\nJZ 0x00406488\nMOVZX EAX,word ptr [R12 + 0x70]\nCMP EAX,0x4\nJZ 0x00406488\nMOV word ptr [R12 + 0x70],0x7\nJMP 0x00406488\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x004067ef\nMOV R15,qword ptr [R12 + 0x8]\nMOV qword ptr [R14],R15\nMOV RDI,R12\nCALL 0x00401760\nCMP qword ptr [R15 + 0x58],-0x1\nJZ 0x0040664d\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0xb\nJZ 0x00406855\nMOV RAX,qword ptr [R14 + 0x20]\nMOV RCX,qword ptr [R15 + 0x48]\nMOV byte ptr [RAX + RCX*0x1],0x0\nCMP qword ptr [R15 + 0x58],0x0\nJZ 0x0040666c\nMOVZX EAX,word ptr [R15 + 0x72]\nTEST AL,0x2\nJNZ 0x00406691\nTEST AL,0x1\nJNZ 0x00406817\nMOV RSI,qword ptr [R15 + 0x8]\nMOV EDX,0xffffffff\nMOV ECX,0x40a35f\nMOV RDI,R14\nCALL 0x004068f0\nTEST EAX,EAX\nJNZ 0x0040667c\nJMP 0x00406817\nMOV RDI,R15\nCALL 0x00401760\nCALL 0x00401780\nMOV dword ptr [RAX],0x0\nMOV qword ptr [R14],0x0\nJMP 0x004067ef\nMOV RDI,R14\nCALL 0x00407170\nTEST EAX,EAX\nJZ 0x00406817\nCALL 0x00401780\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R15 + 0x40],EAX\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x00406817\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x4\nJNZ 0x0040680e\nTEST AH,0x2\nMOV ESI,dword ptr [R15 + 0x44]\nJNZ 0x00406801\nMOV EDI,ESI\nCALL 0x00401a80\nTEST EAX,EAX\nJZ 0x0040680e\nCALL 0x00401780\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R15 + 0x40],EAX\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x0040680e\nCALL 0x00401780\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RBX + 0x40],EAX\nMOV word ptr [RBX + 0x70],0x7\nMOV word ptr [RBX + 0x74],0x3\nMOV RAX,qword ptr [R14 + 0x20]\nMOV RCX,qword ptr [RBX + 0x8]\nMOV RDX,qword ptr [RCX + 0x38]\nMOV RCX,qword ptr [RCX + 0x48]\nLEA RSI,[RCX + -0x1]\nCMP byte ptr [RDX + RCX*0x1 + -0x1],0x2f\nCMOVNZ RSI,RCX\nLEA RDI,[RAX + RSI*0x1 + 0x1]\nMOV byte ptr [RAX + RSI*0x1],0x2f\nLEA RSI,[0x108 + RBX]\nMOV RDX,qword ptr [RBX + 0x60]\nINC RDX\nCALL 0x00401ad0\nMOV R12,RBX\nMOV qword ptr [R14],R12\nMOVZX EAX,word ptr [R12 + 0x70]\nCMP EAX,0xb\nJNZ 0x004067bc\nMOV RAX,qword ptr [0xa8 + R12]\nCMP RAX,0x1\nJZ 0x004067b6\nCMP RAX,0x2\nJNZ 0x00406855\nMOV RBX,qword ptr [R12 + 0x8]\nCMP qword ptr [R12 + 0x58],0x0\nJLE 0x00406776\nCMP qword ptr [RBX + 0x68],0x0\nJNZ 0x00406776\nMOV EAX,dword ptr [R14 + 0x48]\nAND EAX,0x18\nCMP EAX,0x18\nJNZ 0x00406776\nMOV RDI,RBX\nCALL 0x00407250\nTEST AL,AL\nJNZ 0x004067b6\nXOR EDX,EDX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00405dc0\nMOV word ptr [R12 + 0x70],AX\nMOV ECX,0xf000\nAND ECX,dword ptr [0x90 + R12]\nCMP ECX,0x4000\nJNZ 0x004067bc\nCMP qword ptr [R12 + 0x58],0x0\nJZ 0x004067b6\nMOV RAX,qword ptr [RBX + 0x68]\nTEST RAX,RAX\nJZ 0x004067b6\nDEC RAX\nMOV qword ptr [RBX + 0x68],RAX\nMOV AX,word ptr [R12 + 0x70]\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x004067f2\nCMP qword ptr [R12 + 0x58],0x0\nJNZ 0x004067d5\nMOV RAX,qword ptr [R12 + 0x78]\nMOV qword ptr [R14 + 0x18],RAX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00407330\nTEST AL,AL\nJNZ 0x004067f2\nCALL 0x00401780\nMOV dword ptr [RAX],0xc\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nMOV EDX,0x1\nMOV RDI,R14\nCALL 0x004073d0\nMOV EDI,dword ptr [R15 + 0x44]\nCALL 0x00401940\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0x2\nJZ 0x00406845\nMOV EAX,dword ptr [R15 + 0x40]\nXOR ECX,ECX\nCMP EAX,0x0\nSETNZ CL\nOR ECX,0x6\nCMP EAX,0x0\nMOV word ptr [R15 + 0x70],CX\nJNZ 0x00406845\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00406860\nXOR EAX,EAX\nTEST byte ptr [R14 + 0x49],0x40\nCMOVNZ R15,RAX\nMOV R12,R15\nJMP 0x004067f2\nCALL 0x00401770\n'
p1509
S'41 57\n41 56\n41 54\n53\n50\n49 89 fe\n4d 8b 26\n4d 85 e4\n0f 84 28 05 00 00\n41 f6 46 49 40\n0f 85 1d 05 00 00\n41 0f b7 44 24 74\n66 41 c7 44 24 74 03 00\n83 f8 01\n75 18\n31 d2\n4c 89 f7\n4c 89 e6\ne8 ce fa ff ff\n66 41 89 44 24 70\ne9 f5 04 00 00\n41 0f b7 4c 24 70\n0f b7 c0\n83 f8 02\n75 62\n89 ca\n81 e2 fe ff 00 00\n0f b7 d2\n83 fa 0c\n75 52\nba 01 00 00 00\n4c 89 f7\n4c 89 e6\ne8 95 fa ff ff\n66 41 89 44 24 70\n0f b7 c0\n83 f8 01\n0f 85 e3 03 00 00\n41 f6 46 48 04\n0f 85 d8 03 00 00\nbe 60 a3 40 00\n4c 89 f7\ne8 3b fd ff ff\n41 89 44 24 44\n85 c0\n0f 88 95 01 00 00\n41 80 4c 24 72 02\ne9 b3 03 00 00\n0f b7 c9\n83 f9 01\n75 5b\n83 f8 04\n0f 84 da 00 00 00\n41 8b 46 48\na8 40\n74 0f\n49 8b 4c 24 78\n49 3b 4e 18\n0f 85 c3 00 00 00\n49 8b 7e 08\nf6 c4 20\n0f 84 6e 01 00 00\n48 85 ff\n0f 84 65 01 00 00\n25 ff df ff ff\n41 89 46 48\ne8 37 fd ff ff\n49 c7 46 08 00 00 00 00\ne9 9a 01 00 00\n49 8b 5c 24 10\n48 85 db\n0f 84 ba 00 00 00\n49 89 1e\n4c 89 e7\ne8 77 b3 ff ff\n48 83 7b 58 00\n0f 84 e9 00 00 00\n0f b7 43 74\n83 f8 04\n49 89 dc\n74 d0\n0f b7 c0\n83 f8 02\n0f 85 d8 02 00 00\nba 01 00 00 00\n4c 89 f7\n48 89 de\ne8 a4 f9 ff ff\n66 89 43 70\n0f b7 c0\n83 f8 01\n0f 85 b2 02 00 00\n41 f6 46 48 04\n0f 85 a7 02 00 00\nbe 60 a3 40 00\n4c 89 f7\ne8 4c fc ff ff\n89 43 44\n85 c0\n0f 88 7f 02 00 00\n80 4b 72 02\ne9 86 02 00 00\n41 f6 44 24 72 02\n74 0a\n41 8b 7c 24 44\ne8 d6 b4 ff ff\n49 8b 7e 08\n48 85 ff\n74 0d\ne8 78 fc ff ff\n49 c7 46 08 00 00 00 00\n66 41 c7 44 24 70 06 00\n4c 89 f7\n4c 89 e6\ne8 cd 03 00 00\ne9 5a 03 00 00\n49 8b 44 24 08\n48 83 78 18 00\n0f 84 3d 01 00 00\n49 89 06\n49 8b 4e 20\n48 8b 40 48\nc6 04 01 00\nbe 03 00 00 00\n4c 89 f7\ne8 bc 05 00 00\n48 89 c3\n48 85 db\n0f 84 0a 01 00 00\n4c 89 e7\ne8 88 b2 ff ff\ne9 07 02 00 00\n4c 89 f7\ne8 8b 0c 00 00\n85 c0\n0f 84 9a 00 00 00\n41 80 4e 49 40\ne9 f8 02 00 00\ne8 84 b2 ff ff\n8b 00\n41 89 44 24 40\n66 41 c7 44 24 70 07 00\ne9 10 02 00 00\n48 85 ff\n74 4b\n49 8b 4c 24 30\nba ff ff ff ff\n4c 89 f7\n4c 89 e6\ne8 c6 03 00 00\n85 c0\n74 48\ne8 4d b2 ff ff\n8b 00\n41 89 44 24 40\n41 80 4c 24 72 01\n49 8b 46 08\n48 85 c0\n74 2d\n48 8b 48 08\n48 8b 49 30\n48 89 48 30\n48 8b 40 10\n48 85 c0\n75 eb\neb 16\nbe 03 00 00 00\n4c 89 f7\ne8 13 05 00 00\n49 89 46 08\n48 85 c0\n74 31\n49 8b 5e 08\n49 c7 46 08 00 00 00 00\ne9 5d 01 00 00\n4c 89 f7\ne8 f1 fc ff ff\n4c 89 f7\n48 89 de\ne8 26 0c 00 00\n4c 89 f7\ne8 7e fa ff ff\ne9 76 01 00 00\n41 f6 46 49 40\n0f 85 3d 02 00 00\n41 83 7c 24 40 00\n0f 84 ca fe ff ff\n41 0f b7 44 24 70\n83 f8 04\n0f 84 bb fe ff ff\n66 41 c7 44 24 70 07 00\ne9 ae fe ff ff\n41 f6 46 49 40\n0f 85 0a 02 00 00\n4d 8b 7c 24 08\n4d 89 3e\n4c 89 e7\ne8 6b b1 ff ff\n49 83 7f 58 ff\n74 51\n41 0f b7 47 70\n83 f8 0b\n0f 84 4b 02 00 00\n49 8b 46 20\n49 8b 4f 48\nc6 04 08 00\n49 83 7f 58 00\n74 4f\n41 0f b7 47 72\na8 02\n75 6b\na8 01\n0f 85 e9 01 00 00\n49 8b 77 08\nba ff ff ff ff\nb9 5f a3 40 00\n4c 89 f7\ne8 ac 02 00 00\n85 c0\n75 34\ne9 ca 01 00 00\n4c 89 ff\ne8 0b b1 ff ff\ne8 26 b1 ff ff\nc7 00 00 00 00 00\n49 c7 06 00 00 00 00\ne9 83 01 00 00\n4c 89 f7\ne8 fc 0a 00 00\n85 c0\n0f 84 9b 01 00 00\ne8 ff b0 ff ff\n8b 00\n41 89 47 40\n41 80 4e 49 40\ne9 86 01 00 00\n41 8b 46 48\na8 04\n0f 85 71 01 00 00\nf6 c4 02\n41 8b 77 44\n0f 85 57 01 00 00\n89 f7\ne8 cf b3 ff ff\n85 c0\n0f 84 55 01 00 00\ne8 c2 b0 ff ff\n8b 00\n41 89 47 40\n41 80 4e 49 40\ne9 40 01 00 00\ne8 ad b0 ff ff\n8b 00\n89 43 40\n66 c7 43 70 07 00\n66 c7 43 74 03 00\n49 8b 46 20\n48 8b 4b 08\n48 8b 51 38\n48 8b 49 48\n48 8d 71 ff\n80 7c 0a ff 2f\n48 0f 45 f1\n48 8d 7c 30 01\nc6 04 30 2f\n48 8d b3 08 01 00 00\n48 8b 53 60\n48 ff c2\ne8 b3 b3 ff ff\n49 89 dc\n4d 89 26\n41 0f b7 44 24 70\n83 f8 0b\n0f 85 8a 00 00 00\n49 8b 84 24 a8 00 00 00\n48 83 f8 01\n74 76\n48 83 f8 02\n0f 85 0b 01 00 00\n49 8b 5c 24 08\n49 83 7c 24 58 00\n7e 1f\n48 83 7b 68 00\n75 18\n41 8b 46 48\n83 e0 18\n83 f8 18\n75 0c\n48 89 df\ne8 de 0a 00 00\n84 c0\n75 40\n31 d2\n4c 89 f7\n4c 89 e6\ne8 3d f6 ff ff\n66 41 89 44 24 70\nb9 00 f0 00 00\n41 23 8c 24 90 00 00 00\n81 f9 00 40 00 00\n75 1e\n49 83 7c 24 58 00\n74 10\n48 8b 43 68\n48 85 c0\n74 07\n48 ff c8\n48 89 43 68\n66 41 8b 44 24 70\n0f b7 c0\n83 f8 01\n75 2e\n49 83 7c 24 58 00\n75 09\n49 8b 44 24 78\n49 89 46 18\n4c 89 f7\n4c 89 e6\ne8 50 0b 00 00\n84 c0\n75 0e\ne8 97 af ff ff\nc7 00 0c 00 00 00\n45 31 e4\n4c 89 e0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\nba 01 00 00 00\n4c 89 f7\ne8 c2 0b 00 00\n41 8b 7f 44\ne8 29 b1 ff ff\n41 0f b7 47 70\n83 f8 02\n74 24\n41 8b 47 40\n31 c9\n83 f8 00\n0f 95 c1\n83 c9 06\n83 f8 00\n66 41 89 4f 70\n75 0b\n4c 89 f7\n4c 89 fe\ne8 1b 00 00 00\n31 c0\n41 f6 46 49 40\n4c 0f 45 f8\n4d 89 fc\neb 9d\ne8 16 af ff ff\n'
p1510
S'.text:00000000004062b0\n.text:00000000004062b2\n.text:00000000004062b4\n.text:00000000004062b6\n.text:00000000004062b7\n.text:00000000004062b8\n.text:00000000004062bb\n.text:00000000004062be\n.text:00000000004062c1\n.text:00000000004062c7\n.text:00000000004062cc\n.text:00000000004062d2\n.text:00000000004062d8\n.text:00000000004062e0\n.text:00000000004062e3\n.text:00000000004062e5\n.text:00000000004062e7\n.text:00000000004062ea\n.text:00000000004062ed\n.text:00000000004062f2\n.text:00000000004062f8\n.text:00000000004062fd\n.text:0000000000406303\n.text:0000000000406306\n.text:0000000000406309\n.text:000000000040630b\n.text:000000000040630d\n.text:0000000000406313\n.text:0000000000406316\n.text:0000000000406319\n.text:000000000040631b\n.text:0000000000406320\n.text:0000000000406323\n.text:0000000000406326\n.text:000000000040632b\n.text:0000000000406331\n.text:0000000000406334\n.text:0000000000406337\n.text:000000000040633d\n.text:0000000000406342\n.text:0000000000406348\n.text:000000000040634d\n.text:0000000000406350\n.text:0000000000406355\n.text:000000000040635a\n.text:000000000040635c\n.text:0000000000406362\n.text:0000000000406368\n.text:000000000040636d\n.text:0000000000406370\n.text:0000000000406373\n.text:0000000000406375\n.text:0000000000406378\n.text:000000000040637e\n.text:0000000000406382\n.text:0000000000406384\n.text:0000000000406386\n.text:000000000040638b\n.text:000000000040638f\n.text:0000000000406395\n.text:0000000000406399\n.text:000000000040639c\n.text:00000000004063a2\n.text:00000000004063a5\n.text:00000000004063ab\n.text:00000000004063b0\n.text:00000000004063b4\n.text:00000000004063b9\n.text:00000000004063c1\n.text:00000000004063d0\n.text:00000000004063d5\n.text:00000000004063d8\n.text:00000000004063de\n.text:00000000004063e1\n.text:00000000004063e4\n.text:00000000004063e9\n.text:00000000004063ee\n.text:00000000004063f4\n.text:00000000004063f8\n.text:00000000004063fb\n.text:00000000004063fe\n.text:0000000000406400\n.text:0000000000406403\n.text:0000000000406406\n.text:000000000040640c\n.text:0000000000406411\n.text:0000000000406414\n.text:0000000000406417\n.text:000000000040641c\n.text:0000000000406420\n.text:0000000000406423\n.text:0000000000406426\n.text:000000000040642c\n.text:0000000000406431\n.text:0000000000406437\n.text:000000000040643c\n.text:000000000040643f\n.text:0000000000406444\n.text:0000000000406447\n.text:0000000000406449\n.text:000000000040644f\n.text:0000000000406453\n.text:0000000000406458\n.text:000000000040645e\n.text:0000000000406460\n.text:0000000000406465\n.text:000000000040646a\n.text:000000000040646e\n.text:0000000000406471\n.text:0000000000406473\n.text:0000000000406478\n.text:0000000000406480\n.text:0000000000406488\n.text:000000000040648b\n.text:000000000040648e\n.text:0000000000406493\n.text:0000000000406498\n.text:000000000040649d\n.text:00000000004064a2\n.text:00000000004064a8\n.text:00000000004064ab\n.text:00000000004064af\n.text:00000000004064b3\n.text:00000000004064b7\n.text:00000000004064bc\n.text:00000000004064bf\n.text:00000000004064c4\n.text:00000000004064c7\n.text:00000000004064ca\n.text:00000000004064d0\n.text:00000000004064d3\n.text:00000000004064d8\n.text:00000000004064dd\n.text:00000000004064e0\n.text:00000000004064e5\n.text:00000000004064e7\n.text:00000000004064ed\n.text:00000000004064f2\n.text:00000000004064f7\n.text:00000000004064fc\n.text:00000000004064fe\n.text:0000000000406503\n.text:000000000040650b\n.text:0000000000406510\n.text:0000000000406513\n.text:0000000000406515\n.text:000000000040651a\n.text:000000000040651f\n.text:0000000000406522\n.text:0000000000406525\n.text:000000000040652a\n.text:000000000040652c\n.text:000000000040652e\n.text:0000000000406533\n.text:0000000000406535\n.text:000000000040653a\n.text:0000000000406540\n.text:0000000000406544\n.text:0000000000406547\n.text:0000000000406549\n.text:000000000040654d\n.text:0000000000406551\n.text:0000000000406555\n.text:0000000000406559\n.text:000000000040655c\n.text:000000000040655e\n.text:0000000000406560\n.text:0000000000406565\n.text:0000000000406568\n.text:000000000040656d\n.text:0000000000406571\n.text:0000000000406574\n.text:0000000000406576\n.text:000000000040657a\n.text:0000000000406582\n.text:0000000000406587\n.text:000000000040658a\n.text:000000000040658f\n.text:0000000000406592\n.text:0000000000406595\n.text:000000000040659a\n.text:000000000040659d\n.text:00000000004065a2\n.text:00000000004065a7\n.text:00000000004065ac\n.text:00000000004065b2\n.text:00000000004065b8\n.text:00000000004065be\n.text:00000000004065c4\n.text:00000000004065c7\n.text:00000000004065cd\n.text:00000000004065d5\n.text:00000000004065da\n.text:00000000004065df\n.text:00000000004065e5\n.text:00000000004065ea\n.text:00000000004065ed\n.text:00000000004065f0\n.text:00000000004065f5\n.text:00000000004065fa\n.text:00000000004065fc\n.text:0000000000406601\n.text:0000000000406604\n.text:000000000040660a\n.text:000000000040660e\n.text:0000000000406612\n.text:0000000000406616\n.text:000000000040661b\n.text:000000000040661d\n.text:0000000000406622\n.text:0000000000406624\n.text:0000000000406626\n.text:0000000000406628\n.text:000000000040662e\n.text:0000000000406632\n.text:0000000000406637\n.text:000000000040663c\n.text:000000000040663f\n.text:0000000000406644\n.text:0000000000406646\n.text:0000000000406648\n.text:000000000040664d\n.text:0000000000406650\n.text:0000000000406655\n.text:000000000040665a\n.text:0000000000406660\n.text:0000000000406667\n.text:000000000040666c\n.text:000000000040666f\n.text:0000000000406674\n.text:0000000000406676\n.text:000000000040667c\n.text:0000000000406681\n.text:0000000000406683\n.text:0000000000406687\n.text:000000000040668c\n.text:0000000000406691\n.text:0000000000406695\n.text:0000000000406697\n.text:000000000040669d\n.text:00000000004066a0\n.text:00000000004066a4\n.text:00000000004066aa\n.text:00000000004066ac\n.text:00000000004066b1\n.text:00000000004066b3\n.text:00000000004066b9\n.text:00000000004066be\n.text:00000000004066c0\n.text:00000000004066c4\n.text:00000000004066c9\n.text:00000000004066ce\n.text:00000000004066d3\n.text:00000000004066d5\n.text:00000000004066d8\n.text:00000000004066de\n.text:00000000004066e4\n.text:00000000004066e8\n.text:00000000004066ec\n.text:00000000004066f0\n.text:00000000004066f4\n.text:00000000004066f8\n.text:00000000004066fd\n.text:0000000000406701\n.text:0000000000406706\n.text:000000000040670a\n.text:0000000000406711\n.text:0000000000406715\n.text:0000000000406718\n.text:000000000040671d\n.text:0000000000406720\n.text:0000000000406723\n.text:0000000000406729\n.text:000000000040672c\n.text:0000000000406732\n.text:000000000040673a\n.text:000000000040673e\n.text:0000000000406740\n.text:0000000000406744\n.text:000000000040674a\n.text:000000000040674f\n.text:0000000000406755\n.text:0000000000406757\n.text:000000000040675c\n.text:000000000040675e\n.text:0000000000406762\n.text:0000000000406765\n.text:0000000000406768\n.text:000000000040676a\n.text:000000000040676d\n.text:0000000000406772\n.text:0000000000406774\n.text:0000000000406776\n.text:0000000000406778\n.text:000000000040677b\n.text:000000000040677e\n.text:0000000000406783\n.text:0000000000406789\n.text:000000000040678e\n.text:0000000000406796\n.text:000000000040679c\n.text:000000000040679e\n.text:00000000004067a4\n.text:00000000004067a6\n.text:00000000004067aa\n.text:00000000004067ad\n.text:00000000004067af\n.text:00000000004067b2\n.text:00000000004067b6\n.text:00000000004067bc\n.text:00000000004067bf\n.text:00000000004067c2\n.text:00000000004067c4\n.text:00000000004067ca\n.text:00000000004067cc\n.text:00000000004067d1\n.text:00000000004067d5\n.text:00000000004067d8\n.text:00000000004067db\n.text:00000000004067e0\n.text:00000000004067e2\n.text:00000000004067e4\n.text:00000000004067e9\n.text:00000000004067ef\n.text:00000000004067f2\n.text:00000000004067f5\n.text:00000000004067f9\n.text:00000000004067fa\n.text:00000000004067fc\n.text:00000000004067fe\n.text:0000000000406800\n.text:0000000000406801\n.text:0000000000406806\n.text:0000000000406809\n.text:000000000040680e\n.text:0000000000406812\n.text:0000000000406817\n.text:000000000040681c\n.text:000000000040681f\n.text:0000000000406821\n.text:0000000000406825\n.text:0000000000406827\n.text:000000000040682a\n.text:000000000040682d\n.text:0000000000406830\n.text:0000000000406833\n.text:0000000000406838\n.text:000000000040683a\n.text:000000000040683d\n.text:0000000000406840\n.text:0000000000406845\n.text:0000000000406847\n.text:000000000040684c\n.text:0000000000406850\n.text:0000000000406853\n.text:0000000000406855\n'
p1511
tp1512
sS'fts_lfree'
p1513
(S'\n__stdcall fts_lfree(FTSENT * head)\n'
p1514
V\u000avoid fts_lfree(FTSENT *head)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  \u000a  if (head != (FTSENT *)0x0) {\u000a    do {\u000a      p_Var1 = head->fts_link;\u000a      if ((DIR *)head->fts_dirp != (DIR *)0x0) {\u000a        closedir((DIR *)head->fts_dirp);\u000a      }\u000a      free(head);\u000a      head = (FTSENT *)p_Var1;\u000a    } while (p_Var1 != (_ftsent *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1515
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00406122\nNOP dword ptr [RAX]\nMOV R14,qword ptr [RBX + 0x10]\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJZ 0x00406112\nCALL 0x00401950\nMOV RDI,RBX\nCALL 0x00401760\nTEST R14,R14\nMOV RBX,R14\nJNZ 0x00406100\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1516
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 26\n0f 1f 40 00\n4c 8b 73 10\n48 8b 7b 18\n48 85 ff\n74 05\ne8 3e b8 ff ff\n48 89 df\ne8 46 b6 ff ff\n4d 85 f6\n4c 89 f3\n75 de\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1517
S'.text:00000000004060f0\n.text:00000000004060f2\n.text:00000000004060f3\n.text:00000000004060f4\n.text:00000000004060f7\n.text:00000000004060fa\n.text:00000000004060fc\n.text:0000000000406100\n.text:0000000000406104\n.text:0000000000406108\n.text:000000000040610b\n.text:000000000040610d\n.text:0000000000406112\n.text:0000000000406115\n.text:000000000040611a\n.text:000000000040611d\n.text:0000000000406120\n.text:0000000000406122\n.text:0000000000406126\n.text:0000000000406127\n.text:0000000000406129\n'
p1518
tp1519
sS'fputs_unlocked'
p1520
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1521
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060e128)();\u000a  return iVar1;\u000a}\u000a\u000a
p1522
S'JMP qword ptr [0x0060e128]\n'
p1523
S'ff 25 b2 c7 20 00\n'
p1524
S'.plt:0000000000401970\n'
p1525
tp1526
sS'main'
p1527
(S'\n__stdcall main(char * * argv)\n'
p1528
V\u000aint main(char **argv)\u000a\u000a{\u000a  interactive_type iVar1;\u000a  uint uVar2;\u000a  bool bVar3;\u000a  bool bVar4;\u000a  dev_ino dev_ino_buf;\u000a  _Bool _Var5;\u000a  int iVar6;\u000a  RM_status RVar7;\u000a  ptrdiff_t pVar8;\u000a  uint *puVar9;\u000a  long lVar10;\u000a  char **in_RSI;\u000a  long lVar11;\u000a  int iVar12;\u000a  uintmax_t n;\u000a  undefined8 uVar13;\u000a  rm_options local_50;\u000a  \u000a  argv = (char **)((ulong)argv & 0xffffffff);\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x409f10,"/usr/local/share/locale");\u000a  textdomain(0x409f10);\u000a  atexit(close_stdin);\u000a  rm_option_init(&local_50);\u000a  priv_set_remove_linkdir();\u000a  lVar11 = 0;\u000a  bVar4 = (bool)1;\u000a  do {\u000a    bVar3 = bVar4;\u000a    iVar12 = (int)argv;\u000a    uVar13 = 0x40203c;\u000a    iVar6 = getopt_long();\u000a    if (iVar6 < 0x49) {\u000a      if (iVar6 == -1) {\u000a        if (optind < iVar12) {\u000a          if (((bVar3) && (local_50.recursive != false)) &&\u000a             (local_50.root_dev_ino = get_root_dev_ino((dev_ino *)&ram0x0060e330),\u000a             local_50.root_dev_ino == (dev_ino *)0x0)) {\u000a            puVar9 = (uint *)__errno_location();\u000a            uVar2 = *puVar9;\u000a            uVar13 = dcgettext(0,"failed to get attributes of %s",5);\u000a            quotearg_style((char *)0x4);\u000a            error(1,(ulong)uVar2,uVar13);\u000a          }\u000a          argv = stderr;\u000a          lVar10 = (long)optind;\u000a          if (((char)lVar11 != 0) &&\u000a             ((n = (long)iVar12 - lVar10, 3 < (uint)n || (local_50.recursive != false)))) {\u000a            select_plural(n);\u000a            goto LAB_0040222a;\u000a          }\u000a        }\u000a        else {\u000a          if (local_50.ignore_missing_files != false) {\u000a            return 0;\u000a          }\u000a          uVar13 = dcgettext(0,"missing operand",5);\u000a          error(0,0,uVar13,uVar13);\u000a          usage(1);\u000a          lVar10 = lVar11;\u000aLAB_0040222a:\u000a          uVar13 = dcngettext();\u000a          __fprintf_chk(argv,1,uVar13,program_name,n);\u000a          _Var5 = yesno();\u000a          if (_Var5 == false) {\u000a            return 0;\u000a          }\u000a        }\u000a        RVar7 = rm(in_RSI + lVar10,&local_50);\u000a        if (RVar7 + 0xfffffffe < 3) {\u000a          return (int)(uint)(RVar7 == RM_ERROR);\u000a        }\u000a        goto LAB_0040230a;\u000a      }\u000a      if (iVar6 != -0x83) {\u000a        if (iVar6 != -0x82) goto switchD_00402051_caseD_4a;\u000a        uVar13 = 0x4022ac;\u000a        usage(0);\u000a      }\u000a      version_etc(stdout,"rm","GNU coreutils",Version,"Paul Rubin","David MacKenzie",\u000a                  "Richard M. Stallman","Jim Meyering",0,uVar13);\u000a                    /* WARNING: Subroutine does not return */\u000a      exit(0);\u000a    }\u000a    bVar4 = (bool)0;\u000a    switch(iVar6) {\u000a    case 0x49:\u000aswitchD_00402051_caseD_49:\u000a      local_50.interactive = RMI_SOMETIMES;\u000a      local_50.ignore_missing_files = false;\u000a      lVar11 = 1;\u000a      bVar4 = bVar3;\u000a      break;\u000a    default:\u000aswitchD_00402051_caseD_4a:\u000a      diagnose_leading_hyphen(argv);\u000a      usage(1);\u000aLAB_0040230a:\u000a                    /* WARNING: Subroutine does not return */\u000a      __assert_fail("VALID_STATUS (status)","src/rm.c",0x160,"int main(int, char **)");\u000a    case 0x52:\u000a    case 0x72:\u000a      local_50.recursive = true;\u000a      bVar4 = bVar3;\u000a      break;\u000a    case 100:\u000a      local_50.remove_empty_directories = true;\u000a      bVar4 = bVar3;\u000a      break;\u000a    case 0x66:\u000a      local_50.interactive = RMI_NEVER;\u000a      local_50.ignore_missing_files = true;\u000a      goto LAB_00402016;\u000a    case 0x76:\u000a      local_50.verbose = true;\u000a      bVar4 = bVar3;\u000a      break;\u000a    case 0x80:\u000a      if (optarg != (char *)0x0) {\u000a        pVar8 = __xargmatch_internal\u000a                          ("--interactive",optarg,interactive_args,(char *)interactive_types,4,\u000a                           argmatch_die);\u000a        iVar1 = interactive_types[pVar8];\u000a        if (iVar1 != interactive_always) {\u000a          if (iVar1 == interactive_once) goto switchD_00402051_caseD_49;\u000a          bVar4 = bVar3;\u000a          if (iVar1 == interactive_never) {\u000a            local_50.interactive = RMI_NEVER;\u000a            goto LAB_00402016;\u000a          }\u000a          break;\u000a        }\u000a      }\u000a    case 0x69:\u000a      local_50.interactive = RMI_ALWAYS;\u000a      local_50.ignore_missing_files = false;\u000aLAB_00402016:\u000a      lVar11 = 0;\u000a      bVar4 = bVar3;\u000a      break;\u000a    case 0x81:\u000a      local_50.one_file_system = true;\u000a      bVar4 = bVar3;\u000a      break;\u000a    case 0x82:\u000a      break;\u000a    case 0x83:\u000a      bVar4 = (bool)1;\u000a      break;\u000a    case 0x84:\u000a      local_50.stdin_tty = true;\u000a      bVar4 = bVar3;\u000a    }\u000a  } while( true );\u000a}\u000a\u000a
p1529
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RSI\nMOV R14D,EDI\nMOV RDI,qword ptr [R13]\nCALL 0x00403670\nMOV EDI,0x6\nMOV ESI,0x40ae19\nCALL 0x00401ab0\nMOV EDI,0x409f10\nMOV ESI,0x409ede\nCALL 0x00401850\nMOV EDI,0x409f10\nCALL 0x00401830\nMOV EDI,0x4033a0\nCALL 0x00409380\nLEA RDI,[RSP + 0x8]\nCALL 0x00402330\nCALL 0x00403650\nMOV BPL,0x1\nXOR R12D,R12D\nJMP 0x00402020\nXOR R12D,R12D\nMOV BPL,BL\nNOP dword ptr [RAX]\nMOV EBX,EBP\nXOR EBP,EBP\nMOV EDX,0x409ef6\nMOV ECX,0x409600\nXOR R8D,R8D\nMOV EDI,R14D\nMOV RSI,R13\nCALL 0x004018b0\nCMP EAX,0x48\nJLE 0x00402127\nADD EAX,-0x49\nCMP EAX,0x3b\nJA 0x004022f5\nJMP qword ptr [0x409420 + RAX*0x8]\nMOV byte ptr [RSP + 0x11],0x1\nMOV BPL,BL\nJMP 0x00402020\nMOV byte ptr [RSP + 0x12],0x1\nMOV BPL,BL\nJMP 0x00402020\nMOV dword ptr [RSP + 0xc],0x5\nMOV byte ptr [RSP + 0x8],0x1\nJMP 0x00402016\nMOV byte ptr [RSP + 0x21],0x1\nMOV BPL,BL\nJMP 0x00402020\nMOV RSI,qword ptr [0x0060e300]\nTEST RSI,RSI\nJZ 0x004020db\nMOV R9,qword ptr [0x0060e268]\nMOV EDI,0x409efe\nMOV EDX,0x4097a0\nMOV ECX,0x409780\nMOV R8D,0x4\nCALL 0x004032b0\nMOV EAX,dword ptr [0x409780 + RAX*0x4]\nCMP EAX,0x2\nJZ 0x004020db\nCMP EAX,0x1\nJZ 0x004020ed\nTEST EAX,EAX\nMOV BPL,BL\nJNZ 0x00402020\nMOV dword ptr [RSP + 0xc],0x5\nJMP 0x00402016\nMOV dword ptr [RSP + 0xc],0x3\nMOV byte ptr [RSP + 0x8],0x0\nJMP 0x00402016\nMOV dword ptr [RSP + 0xc],0x4\nMOV byte ptr [RSP + 0x8],0x0\nMOV R12B,0x1\nMOV BPL,BL\nJMP 0x00402020\nMOV byte ptr [RSP + 0x10],0x1\nMOV BPL,BL\nJMP 0x00402020\nMOV BPL,0x1\nJMP 0x00402020\nMOV byte ptr [RSP + 0x20],0x1\nMOV BPL,BL\nJMP 0x00402020\nCMP EAX,-0x1\nJNZ 0x00402297\nCMP dword ptr [0x0060e2f8],R14D\nJGE 0x004021e7\nTEST BL,BL\nJZ 0x0040219b\nMOV AL,byte ptr [RSP + 0x11]\nTEST AL,AL\nJZ 0x0040219b\nMOV EDI,0x60e330\nCALL 0x00404f70\nMOV qword ptr [RSP + 0x18],RAX\nTEST RAX,RAX\nJNZ 0x0040219b\nCALL 0x00401780\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x409f66\nMOV EDX,0x5\nCALL 0x00401860\nMOV R15,RAX\nMOV EDI,0x4\nMOV ESI,0x40a78f\nCALL 0x00404940\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,R15\nCALL 0x00401ae0\nMOVSXD RAX,dword ptr [0x0060e2f8]\nTEST R12B,R12B\nJZ 0x00402262\nMOVSXD R15,R14D\nSUB R15,RAX\nMOV BL,byte ptr [RSP + 0x11]\nCMP R15D,0x3\nJA 0x004021c3\nTEST BL,BL\nJZ 0x00402262\nMOV R12,RAX\nMOV R14,qword ptr [0x0060e320]\nMOV RDI,R15\nCALL 0x00402440\nXOR EDI,EDI\nTEST BL,BL\nJZ 0x00402220\nMOV ESI,0x409f85\nMOV EDX,0x409fab\nJMP 0x0040222a\nXOR EBP,EBP\nCMP byte ptr [RSP + 0x8],0x0\nJNZ 0x00402286\nXOR EDI,EDI\nMOV ESI,0x409f56\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401ae0\nMOV EDI,0x1\nCALL 0x00401cc0\nMOV ESI,0x409fd2\nMOV EDX,0x409fec\nMOV R8D,0x5\nMOV RCX,RAX\nCALL 0x00401b10\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060e358]\nXOR EBP,EBP\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,R15\nCALL 0x00401b80\nCALL 0x00405740\nTEST AL,AL\nMOV RAX,R12\nJZ 0x00402286\nLEA RDI,[R13 + RAX*0x8]\nLEA RSI,[RSP + 0x8]\nCALL 0x00402450\nLEA ECX,[RAX + -0x2]\nCMP ECX,0x3\nJNC 0x0040230a\nXOR EBP,EBP\nCMP EAX,0x4\nSETZ BPL\nMOV EAX,EBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x004022ac\nCMP EAX,0xffffff7e\nJNZ 0x004022f5\nXOR EDI,EDI\nCALL 0x00401cc0\nMOV RDI,qword ptr [0x0060e2e8]\nMOV RCX,qword ptr [0x0060e260]\nSUB RSP,0x8\nMOV ESI,0x409edb\nMOV EDX,0x409f0c\nMOV R8D,0x409f1a\nMOV R9D,0x409f25\nMOV EAX,0x0\nPUSH 0x0\nPUSH 0x409f49\nPUSH 0x409f35\nCALL 0x004053c0\nADD RSP,0x20\nXOR EDI,EDI\nCALL 0x00401b60\nMOV EDI,R14D\nMOV RSI,R13\nCALL 0x00402370\nMOV EDI,0x1\nCALL 0x00401cc0\nMOV EDI,0x40a007\nMOV ESI,0x40a01d\nMOV EDX,0x160\nMOV ECX,0x40a026\nCALL 0x00401900\n'
p1530
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 f5\n41 89 fe\n49 8b 7d 00\ne8 a3 16 00 00\nbf 06 00 00 00\nbe 19 ae 40 00\ne8 d4 fa ff ff\nbf 10 9f 40 00\nbe de 9e 40 00\ne8 65 f8 ff ff\nbf 10 9f 40 00\ne8 3b f8 ff ff\nbf a0 33 40 00\ne8 81 73 00 00\n48 8d 7c 24 08\ne8 27 03 00 00\ne8 42 16 00 00\n40 b5 01\n45 31 e4\neb 0a\n45 31 e4\n40 88 dd\n0f 1f 40 00\n89 eb\n31 ed\nba f6 9e 40 00\nb9 00 96 40 00\n45 31 c0\n44 89 f7\n4c 89 ee\ne8 74 f8 ff ff\n83 f8 48\n0f 8e e2 00 00 00\n83 c0 b7\n83 f8 3b\n0f 87 a4 02 00 00\nff 24 c5 20 94 40 00\nc6 44 24 11 01\n40 88 dd\neb be\nc6 44 24 12 01\n40 88 dd\neb b4\nc7 44 24 0c 05 00 00 00\nc6 44 24 08 01\neb 9b\nc6 44 24 21 01\n40 88 dd\neb 9b\n48 8b 35 74 c2 20 00\n48 85 f6\n74 4a\n4c 8b 0d d0 c1 20 00\nbf fe 9e 40 00\nba a0 97 40 00\nb9 80 97 40 00\n41 b8 04 00 00 00\ne8 fe 11 00 00\n8b 04 85 80 97 40 00\n83 f8 02\n74 1d\n83 f8 01\n74 2a\n85 c0\n40 88 dd\n0f 85 52 ff ff ff\nc7 44 24 0c 05 00 00 00\ne9 3b ff ff ff\nc7 44 24 0c 03 00 00 00\nc6 44 24 08 00\ne9 29 ff ff ff\nc7 44 24 0c 04 00 00 00\nc6 44 24 08 00\n41 b4 01\n40 88 dd\ne9 1b ff ff ff\nc6 44 24 10 01\n40 88 dd\ne9 0e ff ff ff\n40 b5 01\ne9 06 ff ff ff\nc6 44 24 20 01\n40 88 dd\ne9 f9 fe ff ff\n83 f8 ff\n0f 85 67 01 00 00\n44 39 35 c1 c1 20 00\n0f 8d aa 00 00 00\n84 db\n74 5a\n8a 44 24 11\n84 c0\n74 52\nbf 30 e3 60 00\ne8 1d 2e 00 00\n48 89 44 24 18\n48 85 c0\n75 3e\ne8 1e f6 ff ff\n8b 18\n31 ff\nbe 66 9f 40 00\nba 05 00 00 00\ne8 eb f6 ff ff\n49 89 c7\nbf 04 00 00 00\nbe 8f a7 40 00\ne8 b9 27 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n4c 89 fa\ne8 45 f9 ff ff\n48 63 05 56 c1 20 00\n45 84 e4\n0f 84 b7 00 00 00\n4d 63 fe\n49 29 c7\n8a 5c 24 11\n41 83 ff 03\n77 08\n84 db\n0f 84 9f 00 00 00\n49 89 c4\n4c 8b 35 53 c1 20 00\n4c 89 ff\ne8 6b 02 00 00\n31 ff\n84 db\n74 45\nbe 85 9f 40 00\nba ab 9f 40 00\neb 43\n31 ed\n80 7c 24 08 00\n0f 85 92 00 00 00\n31 ff\nbe 56 9f 40 00\nba 05 00 00 00\ne8 5b f6 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 ca f8 ff ff\nbf 01 00 00 00\ne8 a0 fa ff ff\nbe d2 9f 40 00\nba ec 9f 40 00\n41 b8 05 00 00 00\n48 89 c1\ne8 d8 f8 ff ff\n48 89 c2\n48 8b 0d 16 c1 20 00\n31 ed\nbe 01 00 00 00\n31 c0\n4c 89 f7\n4d 89 f8\ne8 2a f9 ff ff\ne8 e5 34 00 00\n84 c0\n4c 89 e0\n74 24\n49 8d 7c c5 00\n48 8d 74 24 08\ne8 df 01 00 00\n8d 48 fe\n83 f9 03\n0f 83 8d 00 00 00\n31 ed\n83 f8 04\n40 0f 94 c5\n89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n3d 7d ff ff ff\n74 0e\n3d 7e ff ff ff\n75 50\n31 ff\ne8 14 fa ff ff\n48 8b 3d 35 c0 20 00\n48 8b 0d a6 bf 20 00\n48 83 ec 08\nbe db 9e 40 00\nba 0c 9f 40 00\n41 b8 1a 9f 40 00\n41 b9 25 9f 40 00\nb8 00 00 00 00\n6a 00\n68 49 9f 40 00\n68 35 9f 40 00\ne8 d6 30 00 00\n48 83 c4 20\n31 ff\ne8 6b f8 ff ff\n44 89 f7\n4c 89 ee\ne8 70 00 00 00\nbf 01 00 00 00\ne8 b6 f9 ff ff\nbf 07 a0 40 00\nbe 1d a0 40 00\nba 60 01 00 00\nb9 26 a0 40 00\ne8 dd f5 ff ff\n'
p1531
S'.text:0000000000401fb0\n.text:0000000000401fb1\n.text:0000000000401fb3\n.text:0000000000401fb5\n.text:0000000000401fb7\n.text:0000000000401fb9\n.text:0000000000401fba\n.text:0000000000401fbe\n.text:0000000000401fc1\n.text:0000000000401fc4\n.text:0000000000401fc8\n.text:0000000000401fcd\n.text:0000000000401fd2\n.text:0000000000401fd7\n.text:0000000000401fdc\n.text:0000000000401fe1\n.text:0000000000401fe6\n.text:0000000000401feb\n.text:0000000000401ff0\n.text:0000000000401ff5\n.text:0000000000401ffa\n.text:0000000000401fff\n.text:0000000000402004\n.text:0000000000402009\n.text:000000000040200e\n.text:0000000000402011\n.text:0000000000402014\n.text:0000000000402016\n.text:0000000000402019\n.text:000000000040201c\n.text:0000000000402020\n.text:0000000000402022\n.text:0000000000402024\n.text:0000000000402029\n.text:000000000040202e\n.text:0000000000402031\n.text:0000000000402034\n.text:0000000000402037\n.text:000000000040203c\n.text:000000000040203f\n.text:0000000000402045\n.text:0000000000402048\n.text:000000000040204b\n.text:0000000000402051\n.text:0000000000402058\n.text:000000000040205d\n.text:0000000000402060\n.text:0000000000402062\n.text:0000000000402067\n.text:000000000040206a\n.text:000000000040206c\n.text:0000000000402074\n.text:0000000000402079\n.text:000000000040207b\n.text:0000000000402080\n.text:0000000000402083\n.text:0000000000402085\n.text:000000000040208c\n.text:000000000040208f\n.text:0000000000402091\n.text:0000000000402098\n.text:000000000040209d\n.text:00000000004020a2\n.text:00000000004020a7\n.text:00000000004020ad\n.text:00000000004020b2\n.text:00000000004020b9\n.text:00000000004020bc\n.text:00000000004020be\n.text:00000000004020c1\n.text:00000000004020c3\n.text:00000000004020c5\n.text:00000000004020c8\n.text:00000000004020ce\n.text:00000000004020d6\n.text:00000000004020db\n.text:00000000004020e3\n.text:00000000004020e8\n.text:00000000004020ed\n.text:00000000004020f5\n.text:00000000004020fa\n.text:00000000004020fd\n.text:0000000000402100\n.text:0000000000402105\n.text:000000000040210a\n.text:000000000040210d\n.text:0000000000402112\n.text:0000000000402115\n.text:000000000040211a\n.text:000000000040211f\n.text:0000000000402122\n.text:0000000000402127\n.text:000000000040212a\n.text:0000000000402130\n.text:0000000000402137\n.text:000000000040213d\n.text:000000000040213f\n.text:0000000000402141\n.text:0000000000402145\n.text:0000000000402147\n.text:0000000000402149\n.text:000000000040214e\n.text:0000000000402153\n.text:0000000000402158\n.text:000000000040215b\n.text:000000000040215d\n.text:0000000000402162\n.text:0000000000402164\n.text:0000000000402166\n.text:000000000040216b\n.text:0000000000402170\n.text:0000000000402175\n.text:0000000000402178\n.text:000000000040217d\n.text:0000000000402182\n.text:0000000000402187\n.text:000000000040218a\n.text:000000000040218f\n.text:0000000000402191\n.text:0000000000402193\n.text:0000000000402196\n.text:000000000040219b\n.text:00000000004021a2\n.text:00000000004021a5\n.text:00000000004021ab\n.text:00000000004021ae\n.text:00000000004021b1\n.text:00000000004021b5\n.text:00000000004021b9\n.text:00000000004021bb\n.text:00000000004021bd\n.text:00000000004021c3\n.text:00000000004021c6\n.text:00000000004021cd\n.text:00000000004021d0\n.text:00000000004021d5\n.text:00000000004021d7\n.text:00000000004021d9\n.text:00000000004021db\n.text:00000000004021e0\n.text:00000000004021e5\n.text:00000000004021e7\n.text:00000000004021e9\n.text:00000000004021ee\n.text:00000000004021f4\n.text:00000000004021f6\n.text:00000000004021fb\n.text:0000000000402200\n.text:0000000000402205\n.text:0000000000402208\n.text:000000000040220a\n.text:000000000040220c\n.text:000000000040220e\n.text:0000000000402211\n.text:0000000000402216\n.text:000000000040221b\n.text:0000000000402220\n.text:0000000000402225\n.text:000000000040222a\n.text:0000000000402230\n.text:0000000000402233\n.text:0000000000402238\n.text:000000000040223b\n.text:0000000000402242\n.text:0000000000402244\n.text:0000000000402249\n.text:000000000040224b\n.text:000000000040224e\n.text:0000000000402251\n.text:0000000000402256\n.text:000000000040225b\n.text:000000000040225d\n.text:0000000000402260\n.text:0000000000402262\n.text:0000000000402267\n.text:000000000040226c\n.text:0000000000402271\n.text:0000000000402274\n.text:0000000000402277\n.text:000000000040227d\n.text:000000000040227f\n.text:0000000000402282\n.text:0000000000402286\n.text:0000000000402288\n.text:000000000040228c\n.text:000000000040228d\n.text:000000000040228f\n.text:0000000000402291\n.text:0000000000402293\n.text:0000000000402295\n.text:0000000000402296\n.text:0000000000402297\n.text:000000000040229c\n.text:000000000040229e\n.text:00000000004022a3\n.text:00000000004022a5\n.text:00000000004022a7\n.text:00000000004022ac\n.text:00000000004022b3\n.text:00000000004022ba\n.text:00000000004022be\n.text:00000000004022c3\n.text:00000000004022c8\n.text:00000000004022ce\n.text:00000000004022d4\n.text:00000000004022d9\n.text:00000000004022db\n.text:00000000004022e0\n.text:00000000004022e5\n.text:00000000004022ea\n.text:00000000004022ee\n.text:00000000004022f0\n.text:00000000004022f5\n.text:00000000004022f8\n.text:00000000004022fb\n.text:0000000000402300\n.text:0000000000402305\n.text:000000000040230a\n.text:000000000040230f\n.text:0000000000402314\n.text:0000000000402319\n.text:000000000040231e\n'
p1532
tp1533
sS'xcharalloc'
p1534
(S'\n__stdcall xcharalloc(size_t n)\n'
p1535
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1536
S'JMP 0x00405520\n'
p1537
S'e9 2b ff ff ff\n'
p1538
S'.text:00000000004055f0\n'
p1539
tp1540
sS'c_isupper'
p1541
(S'\n__stdcall c_isupper()\n'
p1542
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1543
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1544
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1545
S'.text:0000000000407890\n.text:0000000000407893\n.text:0000000000407896\n.text:0000000000407899\n'
p1546
tp1547
sS'isatty'
p1548
(S'\n__stdcall isatty(int __fd)\n'
p1549
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint isatty(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_isatty_0060e070)();\u000a  return iVar1;\u000a}\u000a\u000a
p1550
S'JMP qword ptr [0x0060e070]\n'
p1551
S'ff 25 6a c8 20 00\n'
p1552
S'.plt:0000000000401800\n'
p1553
tp1554
sS'allocate_entry'
p1555
(S'\n__stdcall allocate_entry(Hash_table * table)\n'
p1556
V\u000ahash_entry * allocate_entry(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  phVar1 = table->free_entry_list;\u000a  if (phVar1 != (hash_entry *)0x0) {\u000a    table->free_entry_list = phVar1->next;\u000a    return phVar1;\u000a  }\u000a  phVar1 = (hash_entry *)malloc(0x10);\u000a  return phVar1;\u000a}\u000a\u000a
p1557
S'MOV RAX,qword ptr [RDI + 0x48]\nTEST RAX,RAX\nJZ 0x00408812\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RDI + 0x48],RCX\nRET\nPUSH RAX\nMOV EDI,0x10\nCALL 0x00401a20\nADD RSP,0x8\nRET\n'
p1558
S'48 8b 47 48\n48 85 c0\n74 09\n48 8b 48 08\n48 89 4f 48\nc3\n50\nbf 10 00 00 00\ne8 03 92 ff ff\n48 83 c4 08\nc3\n'
p1559
S'.text:0000000000408800\n.text:0000000000408804\n.text:0000000000408807\n.text:0000000000408809\n.text:000000000040880d\n.text:0000000000408811\n.text:0000000000408812\n.text:0000000000408813\n.text:0000000000408818\n.text:000000000040881d\n.text:0000000000408821\n'
p1560
tp1561
sS'fts_skip_tree'
p1562
(S'\n__stdcall fts_skip_tree(FTS * fts, FTSENT * ent)\n'
p1563
V\u000avoid fts_skip_tree(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  fts_set(fts,ent);\u000a  fts_read(fts);\u000a  return;\u000a}\u000a\u000a
p1564
S'PUSH RBX\nMOV RBX,RDI\nMOV EDX,0x4\nCALL 0x00407420\nMOV RDI,RBX\nPOP RBX\nJMP 0x004062b0\n'
p1565
S'53\n48 89 fb\nba 04 00 00 00\ne8 d2 49 00 00\n48 89 df\n5b\ne9 59 38 00 00\n'
p1566
S'.text:0000000000402a40\n.text:0000000000402a41\n.text:0000000000402a44\n.text:0000000000402a49\n.text:0000000000402a4e\n.text:0000000000402a51\n.text:0000000000402a52\n'
p1567
tp1568
sS'c_isalnum'
p1569
(S'\n__stdcall c_isalnum()\n'
p1570
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1571
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x004077ab\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x004077ab\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x004077aa\nXOR EAX,EAX\nRET\n'
p1572
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1573
S'.text:0000000000407790\n.text:0000000000407792\n.text:0000000000407795\n.text:0000000000407798\n.text:000000000040779a\n.text:00000000004077a4\n.text:00000000004077a8\n.text:00000000004077aa\n.text:00000000004077ab\n.text:00000000004077ae\n.text:00000000004077b1\n.text:00000000004077b3\n.text:00000000004077b5\n'
p1574
tp1575
sS'rpmatch'
p1576
(S'\n__stdcall rpmatch(char * __response)\n'
p1577
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint rpmatch(char *__response)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_rpmatch_0060e150)();\u000a  return iVar1;\u000a}\u000a\u000a
p1578
S'JMP qword ptr [0x0060e150]\n'
p1579
S'ff 25 8a c7 20 00\n'
p1580
S'.plt:00000000004019c0\n'
p1581
tp1582
sS'file_type'
p1583
(S'\n__stdcall file_type(stat * st)\n'
p1584
V\u000achar * file_type(stat *st)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = "directory";\u000a  switch((st->st_mode & 0xf000) - 0x1000 >> 0xc) {\u000a  case 0:\u000a    pcVar1 = "fifo";\u000a    break;\u000a  case 1:\u000a    pcVar1 = "character special file";\u000a    break;\u000a  default:\u000a    pcVar1 = "weird file";\u000a    break;\u000a  case 3:\u000a    break;\u000a  case 5:\u000a    pcVar1 = "block special file";\u000a    break;\u000a  case 7:\u000a    pcVar1 = "regular file";\u000a    if (st->st_size == 0) {\u000a      pcVar1 = "regular empty file";\u000a    }\u000a    break;\u000a  case 9:\u000a    pcVar1 = "symbolic link";\u000a    break;\u000a  case 0xb:\u000a    pcVar1 = "socket";\u000a  }\u000a  pcVar1 = (char *)dcgettext(0,pcVar1,5);\u000a  return pcVar1;\u000a}\u000a\u000a
p1585
S'MOV EAX,0xf000\nAND EAX,dword ptr [RDI + 0x18]\nADD EAX,0xfffff000\nSHR EAX,0xc\nCMP EAX,0xb\nJA 0x0040360f\nMOV ESI,0x40a6f8\nJMP qword ptr [0x40a678 + RAX*0x8]\nMOV ESI,0x40a73a\nJMP 0x0040363e\nMOV ESI,0x40a723\nJMP 0x0040363e\nMOV ESI,0x40a746\nJMP 0x0040363e\nMOV ESI,0x40a710\nJMP 0x0040363e\nMOV ESI,0x40a702\nJMP 0x0040363e\nMOV ESI,0x40a73f\nJMP 0x0040363e\nCMP qword ptr [RDI + 0x30],0x0\nMOV EAX,0x40a6d8\nMOV ESI,0x40a6eb\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nJMP 0x00401860\n'
p1586
S'b8 00 f0 00 00\n23 47 18\n05 00 f0 ff ff\nc1 e8 0c\n83 f8 0b\n77 1a\nbe f8 a6 40 00\nff 24 c5 78 a6 40 00\nbe 3a a7 40 00\neb 36\nbe 23 a7 40 00\neb 2f\nbe 46 a7 40 00\neb 28\nbe 10 a7 40 00\neb 21\nbe 02 a7 40 00\neb 1a\nbe 3f a7 40 00\neb 13\n48 83 7f 30 00\nb8 d8 a6 40 00\nbe eb a6 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne9 16 e2 ff ff\n'
p1587
S'.text:00000000004035e0\n.text:00000000004035e5\n.text:00000000004035e8\n.text:00000000004035ed\n.text:00000000004035f0\n.text:00000000004035f3\n.text:00000000004035f5\n.text:00000000004035fa\n.text:0000000000403601\n.text:0000000000403606\n.text:0000000000403608\n.text:000000000040360d\n.text:000000000040360f\n.text:0000000000403614\n.text:0000000000403616\n.text:000000000040361b\n.text:000000000040361d\n.text:0000000000403622\n.text:0000000000403624\n.text:0000000000403629\n.text:000000000040362b\n.text:0000000000403630\n.text:0000000000403635\n.text:000000000040363a\n.text:000000000040363e\n.text:0000000000403640\n.text:0000000000403645\n'
p1588
tp1589
sS'fts_safe_changedir'
p1590
(S'\n__stdcall fts_safe_changedir(FTS * sp, FTSENT * p, char * dir)\n'
p1591
V\u000aint fts_safe_changedir(FTS *sp,FTSENT *p,char *dir)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int __fd;\u000a  int iVar3;\u000a  int *piVar4;\u000a  byte *dir_00;\u000a  int __fd_00;\u000a  bool bVar5;\u000a  stat sb;\u000a  stat local_c0;\u000a  \u000a  __fd_00 = (int)dir;\u000a  if (dir_00 == (byte *)0x0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    __fd = 0x2e - (uint)*dir_00;\u000a    if ((__fd == 0) && (__fd = 0x2e - (uint)dir_00[1], __fd == 0)) {\u000a      __fd = -(uint)dir_00[2];\u000a    }\u000a    bVar5 = __fd == 0;\u000a  }\u000a  uVar1 = sp->fts_options;\u000a  if ((uVar1 & 4) != 0) {\u000a    if (__fd_00 < 0) {\u000a      return 0;\u000a    }\u000a    if ((uVar1 & 0x200) == 0) {\u000a      return 0;\u000a    }\u000a    close(__fd_00);\u000a    return 0;\u000a  }\u000a  if (((__fd_00 < 0) && (bVar5)) && ((uVar1 & 0x200) != 0)) {\u000a    _Var2 = i_ring_empty(&sp->fts_fd_ring);\u000a    if (_Var2 == false) {\u000a      __fd = i_ring_pop(&sp->fts_fd_ring);\u000a      if (-1 < __fd) {\u000a        dir_00 = (byte *)0x0;\u000a        __fd_00 = __fd;\u000a      }\u000a    }\u000a  }\u000a  __fd = __fd_00;\u000a  if ((__fd_00 < 0) && (__fd = diropen(sp,(char *)dir_00), __fd < 0)) {\u000a    return -1;\u000a  }\u000a  if (((*(byte *)&sp->fts_options & 2) == 0) &&\u000a     (((dir_00 == (byte *)0x0 || (*dir_00 != 0x2e)) || ((dir_00[1] != 0x2e || (dir_00[2] != 0))))))\u000a  {\u000aLAB_004069f1:\u000a    if ((*(byte *)((long)&sp->fts_options + 1) & 2) != 0) {\u000a      cwd_advance_fd(sp);\u000a      return 0;\u000a    }\u000a    iVar3 = fchdir(__fd);\u000a  }\u000a  else {\u000a    iVar3 = fstat(__fd,&local_c0);\u000a    if (iVar3 == 0) {\u000a      if ((p->fts_statp[0].st_dev == local_c0.st_dev) && (p->fts_statp[0].st_ino == local_c0.st_ino)\u000a         ) goto LAB_004069f1;\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 2;\u000a    }\u000a    iVar3 = -1;\u000a  }\u000a  if (__fd_00 < 0) {\u000a    piVar4 = __errno_location();\u000a    __fd_00 = *piVar4;\u000a    close(__fd);\u000a    *piVar4 = __fd_00;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1592
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV RBX,RCX\nMOV R13D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nTEST RBX,RBX\nJZ 0x0040693b\nMOVZX EDX,byte ptr [RBX]\nMOV ECX,0x2e\nMOV EAX,0x2e\nSUB EAX,EDX\nJNZ 0x00406933\nMOVZX EAX,byte ptr [RBX + 0x1]\nSUB ECX,EAX\nMOV EAX,ECX\nJNZ 0x00406933\nMOVZX EAX,byte ptr [RBX + 0x2]\nNEG EAX\nTEST EAX,EAX\nSETZ R15B\nJMP 0x0040693e\nXOR R15D,R15D\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x4\nJNZ 0x00406a09\nTEST R13D,R13D\nJNS 0x0040698b\nMOV ECX,R15D\nXOR CL,0x1\nJNZ 0x0040698b\nAND EAX,0x200\nJZ 0x0040698b\nMOV R12,RBP\nLEA RBP,[R14 + 0x60]\nMOV RDI,RBP\nCALL 0x00408b00\nTEST AL,AL\nJNZ 0x00406988\nMOV RDI,RBP\nCALL 0x00408b50\nXOR ECX,ECX\nTEST EAX,EAX\nCMOVNS RBX,RCX\nCMOVNS R13D,EAX\nMOV R15B,0x1\nMOV RBP,R12\nTEST R13D,R13D\nMOV R12D,R13D\nJNS 0x004069aa\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00406090\nMOV R12D,EAX\nTEST R12D,R12D\nJS 0x00406a38\nTEST byte ptr [R14 + 0x48],0x2\nJNZ 0x004069c7\nTEST RBX,RBX\nJZ 0x004069f1\nCMP byte ptr [RBX],0x2e\nJNZ 0x004069f1\nCMP byte ptr [RBX + 0x1],0x2e\nJNZ 0x004069f1\nCMP byte ptr [RBX + 0x2],0x0\nJNZ 0x004069f1\nLEA RSI,[RSP + 0x8]\nMOV EDI,R12D\nCALL 0x004093c0\nTEST EAX,EAX\nJNZ 0x00406a4a\nMOV RAX,qword ptr [RBP + 0x78]\nCMP RAX,qword ptr [RSP + 0x8]\nJNZ 0x00406a3f\nMOV RAX,qword ptr [0x80 + RBP]\nCMP RAX,qword ptr [RSP + 0x10]\nJNZ 0x00406a3f\nTEST byte ptr [R14 + 0x49],0x2\nJNZ 0x00406a21\nMOV EDI,R12D\nCALL 0x00401a80\nMOV EBX,EAX\nTEST R13D,R13D\nJNS 0x00406a6c\nJMP 0x00406a54\nXOR EBX,EBX\nTEST R13D,R13D\nJS 0x00406a6c\nAND EAX,0x200\nJZ 0x00406a6c\nMOV EDI,R13D\nCALL 0x00401940\nJMP 0x00406a6c\nXOR EDX,EDX\nTEST R15B,R15B\nSETZ DL\nMOV RDI,R14\nMOV ESI,R12D\nCALL 0x004073d0\nXOR EBX,EBX\nJMP 0x00406a6c\nMOV EBX,0xffffffff\nJMP 0x00406a6c\nCALL 0x00401780\nMOV dword ptr [RAX],0x2\nMOV EBX,0xffffffff\nTEST R13D,R13D\nJNS 0x00406a6c\nCALL 0x00401780\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV EDI,R12D\nCALL 0x00401940\nMOV dword ptr [RBP],R14D\nMOV EAX,EBX\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1593
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n48 89 cb\n41 89 d5\n48 89 f5\n49 89 fe\n48 85 db\n74 29\n0f b6 13\nb9 2e 00 00 00\nb8 2e 00 00 00\n29 d0\n75 10\n0f b6 43 01\n29 c1\n89 c8\n75 06\n0f b6 43 02\nf7 d8\n85 c0\n41 0f 94 c7\neb 03\n45 31 ff\n41 8b 46 48\na8 04\n0f 85 bf 00 00 00\n45 85 ed\n79 3c\n44 89 f9\n80 f1 01\n75 34\n25 00 02 00 00\n74 2d\n49 89 ec\n49 8d 6e 60\n48 89 ef\ne8 93 21 00 00\n84 c0\n75 17\n48 89 ef\ne8 d7 21 00 00\n31 c9\n85 c0\n48 0f 49 d9\n44 0f 49 e8\n41 b7 01\n4c 89 e5\n45 85 ed\n45 89 ec\n79 17\n4c 89 f7\n48 89 de\ne8 f2 f6 ff ff\n41 89 c4\n45 85 e4\n0f 88 8e 00 00 00\n41 f6 46 48 02\n75 16\n48 85 db\n74 3b\n80 3b 2e\n75 36\n80 7b 01 2e\n75 30\n80 7b 02 00\n75 2a\n48 8d 74 24 08\n44 89 e7\ne8 ec 29 00 00\n85 c0\n75 72\n48 8b 45 78\n48 3b 44 24 08\n75 5c\n48 8b 85 80 00 00 00\n48 3b 44 24 10\n75 4e\n41 f6 46 49 02\n75 29\n44 89 e7\ne8 80 b0 ff ff\n89 c3\n45 85 ed\n79 65\neb 4b\n31 db\n45 85 ed\n78 5c\n25 00 02 00 00\n74 55\n44 89 ef\ne8 21 af ff ff\neb 4b\n31 d2\n45 84 ff\n0f 94 c2\n4c 89 f7\n44 89 e6\ne8 9c 09 00 00\n31 db\neb 34\nbb ff ff ff ff\neb 2d\ne8 3c ad ff ff\nc7 00 02 00 00 00\nbb ff ff ff ff\n45 85 ed\n79 18\ne8 27 ad ff ff\n48 89 c5\n44 8b 75 00\n44 89 e7\ne8 d8 ae ff ff\n44 89 75 00\n89 d8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1594
S'.text:00000000004068f0\n.text:00000000004068f1\n.text:00000000004068f3\n.text:00000000004068f5\n.text:00000000004068f7\n.text:00000000004068f9\n.text:00000000004068fa\n.text:0000000000406901\n.text:0000000000406904\n.text:0000000000406907\n.text:000000000040690a\n.text:000000000040690d\n.text:0000000000406910\n.text:0000000000406912\n.text:0000000000406915\n.text:000000000040691a\n.text:000000000040691f\n.text:0000000000406921\n.text:0000000000406923\n.text:0000000000406927\n.text:0000000000406929\n.text:000000000040692b\n.text:000000000040692d\n.text:0000000000406931\n.text:0000000000406933\n.text:0000000000406935\n.text:0000000000406939\n.text:000000000040693b\n.text:000000000040693e\n.text:0000000000406942\n.text:0000000000406944\n.text:000000000040694a\n.text:000000000040694d\n.text:000000000040694f\n.text:0000000000406952\n.text:0000000000406955\n.text:0000000000406957\n.text:000000000040695c\n.text:000000000040695e\n.text:0000000000406961\n.text:0000000000406965\n.text:0000000000406968\n.text:000000000040696d\n.text:000000000040696f\n.text:0000000000406971\n.text:0000000000406974\n.text:0000000000406979\n.text:000000000040697b\n.text:000000000040697d\n.text:0000000000406981\n.text:0000000000406985\n.text:0000000000406988\n.text:000000000040698b\n.text:000000000040698e\n.text:0000000000406991\n.text:0000000000406993\n.text:0000000000406996\n.text:0000000000406999\n.text:000000000040699e\n.text:00000000004069a1\n.text:00000000004069a4\n.text:00000000004069aa\n.text:00000000004069af\n.text:00000000004069b1\n.text:00000000004069b4\n.text:00000000004069b6\n.text:00000000004069b9\n.text:00000000004069bb\n.text:00000000004069bf\n.text:00000000004069c1\n.text:00000000004069c5\n.text:00000000004069c7\n.text:00000000004069cc\n.text:00000000004069cf\n.text:00000000004069d4\n.text:00000000004069d6\n.text:00000000004069d8\n.text:00000000004069dc\n.text:00000000004069e1\n.text:00000000004069e3\n.text:00000000004069ea\n.text:00000000004069ef\n.text:00000000004069f1\n.text:00000000004069f6\n.text:00000000004069f8\n.text:00000000004069fb\n.text:0000000000406a00\n.text:0000000000406a02\n.text:0000000000406a05\n.text:0000000000406a07\n.text:0000000000406a09\n.text:0000000000406a0b\n.text:0000000000406a0e\n.text:0000000000406a10\n.text:0000000000406a15\n.text:0000000000406a17\n.text:0000000000406a1a\n.text:0000000000406a1f\n.text:0000000000406a21\n.text:0000000000406a23\n.text:0000000000406a26\n.text:0000000000406a29\n.text:0000000000406a2c\n.text:0000000000406a2f\n.text:0000000000406a34\n.text:0000000000406a36\n.text:0000000000406a38\n.text:0000000000406a3d\n.text:0000000000406a3f\n.text:0000000000406a44\n.text:0000000000406a4a\n.text:0000000000406a4f\n.text:0000000000406a52\n.text:0000000000406a54\n.text:0000000000406a59\n.text:0000000000406a5c\n.text:0000000000406a60\n.text:0000000000406a63\n.text:0000000000406a68\n.text:0000000000406a6c\n.text:0000000000406a6e\n.text:0000000000406a75\n.text:0000000000406a76\n.text:0000000000406a78\n.text:0000000000406a7a\n.text:0000000000406a7c\n.text:0000000000406a7e\n.text:0000000000406a7f\n'
p1595
tp1596
sS'i_ring_init'
p1597
(S'\n__stdcall i_ring_init(I_ring * ir)\n'
p1598
V\u000avoid i_ring_init(I_ring *ir)\u000a\u000a{\u000a  long lVar1;\u000a  int in_ESI;\u000a  \u000a  ir->ir_empty = true;\u000a  *(undefined8 *)&ir->ir_front = 0;\u000a  lVar1 = 0;\u000a  do {\u000a    ir->ir_data[lVar1] = in_ESI;\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 4);\u000a  ir->ir_default_val = in_ESI;\u000a  return;\u000a}\u000a\u000a
p1599
S'MOV byte ptr [RDI + 0x1c],0x1\nMOV qword ptr [RDI + 0x14],0x0\nXOR EAX,EAX\nNOP\nMOV dword ptr [RDI + RAX*0x4],ESI\nINC RAX\nCMP RAX,0x4\nJNZ 0x00408af0\nMOV dword ptr [RDI + 0x10],ESI\nRET\n'
p1600
S'c6 47 1c 01\n48 c7 47 14 00 00 00 00\n31 c0\n66 90\n89 34 87\n48 ff c0\n48 83 f8 04\n75 f4\n89 77 10\nc3\n'
p1601
S'.text:0000000000408ae0\n.text:0000000000408ae4\n.text:0000000000408aec\n.text:0000000000408aee\n.text:0000000000408af0\n.text:0000000000408af3\n.text:0000000000408af6\n.text:0000000000408afa\n.text:0000000000408afc\n.text:0000000000408aff\n'
p1602
tp1603
sS'write_protected_non_symlink'
p1604
(S'\n__stdcall write_protected_non_symlink(char * file, stat * buf)\n'
p1605
V\u000aint write_protected_non_symlink(char *file,stat *buf)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  int iVar3;\u000a  int *piVar4;\u000a  long in_RDX;\u000a  \u000a  _Var1 = can_write_any_file();\u000a  if (_Var1 == false) {\u000a    iVar2 = cache_fstatat();\u000a    iVar3 = -1;\u000a    if (iVar2 == 0) {\u000a      if ((*(uint *)(in_RDX + 0x18) & 0xf000) == 0xa000) {\u000a        iVar3 = 0;\u000a      }\u000a      else {\u000a        iVar2 = faccessat((int)file,(char *)buf,2,0x200);\u000a        iVar3 = 0;\u000a        if (iVar2 != 0) {\u000a          piVar4 = __errno_location();\u000a          iVar3 = -1;\u000a          if (*piVar4 == 0xd) {\u000a            iVar3 = 1;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar3 = 0;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1606
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV R14,RSI\nMOV EBP,EDI\nCALL 0x004054d0\nTEST AL,AL\nJZ 0x00402f59\nXOR EAX,EAX\nJMP 0x00402fb6\nMOV EDI,EBP\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x00402fc0\nMOV ECX,EAX\nMOV EAX,0xffffffff\nTEST ECX,ECX\nJNZ 0x00402fb6\nMOV EAX,0xf000\nAND EAX,dword ptr [RBX + 0x18]\nCMP EAX,0xa000\nJNZ 0x00402f84\nXOR EAX,EAX\nJMP 0x00402fb6\nMOV EDX,0x2\nMOV ECX,0x200\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00401810\nTEST EAX,EAX\nMOV EAX,0x0\nJZ 0x00402fb6\nCALL 0x00401780\nCMP dword ptr [RAX],0xd\nMOV ECX,0x1\nMOV EAX,0xffffffff\nCMOVZ EAX,ECX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1607
S'55\n41 56\n53\n48 89 d3\n49 89 f6\n89 fd\ne8 7f 25 00 00\n84 c0\n74 04\n31 c0\neb 5d\n89 ef\n4c 89 f6\n48 89 da\ne8 5a 00 00 00\n89 c1\nb8 ff ff ff ff\n85 c9\n75 45\nb8 00 f0 00 00\n23 43 18\n3d 00 a0 00 00\n75 04\n31 c0\neb 32\nba 02 00 00 00\nb9 00 02 00 00\n89 ef\n4c 89 f6\ne8 78 e8 ff ff\n85 c0\nb8 00 00 00 00\n74 15\ne8 da e7 ff ff\n83 38 0d\nb9 01 00 00 00\nb8 ff ff ff ff\n0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1608
S'.text:0000000000402f40\n.text:0000000000402f41\n.text:0000000000402f43\n.text:0000000000402f44\n.text:0000000000402f47\n.text:0000000000402f4a\n.text:0000000000402f4c\n.text:0000000000402f51\n.text:0000000000402f53\n.text:0000000000402f55\n.text:0000000000402f57\n.text:0000000000402f59\n.text:0000000000402f5b\n.text:0000000000402f5e\n.text:0000000000402f61\n.text:0000000000402f66\n.text:0000000000402f68\n.text:0000000000402f6d\n.text:0000000000402f6f\n.text:0000000000402f71\n.text:0000000000402f76\n.text:0000000000402f79\n.text:0000000000402f7e\n.text:0000000000402f80\n.text:0000000000402f82\n.text:0000000000402f84\n.text:0000000000402f89\n.text:0000000000402f8e\n.text:0000000000402f90\n.text:0000000000402f93\n.text:0000000000402f98\n.text:0000000000402f9a\n.text:0000000000402f9f\n.text:0000000000402fa1\n.text:0000000000402fa6\n.text:0000000000402fa9\n.text:0000000000402fae\n.text:0000000000402fb3\n.text:0000000000402fb6\n.text:0000000000402fb7\n.text:0000000000402fb9\n.text:0000000000402fba\n'
p1609
tp1610
sS'__errno_location'
p1611
(S'\n__stdcall __errno_location()\n'
p1612
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060e030)();\u000a  return piVar1;\u000a}\u000a\u000a
p1613
S'JMP qword ptr [0x0060e030]\n'
p1614
S'ff 25 aa c8 20 00\n'
p1615
S'.plt:0000000000401780\n'
p1616
tp1617
sS'x2nrealloc'
p1618
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1619
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1620
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x004055bc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x004055e9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004055da\nTEST RCX,RCX\nJNZ 0x004055da\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00405560\nPUSH RAX\nCALL 0x004056b0\n'
p1621
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1622
S'.text:0000000000405590\n.text:0000000000405593\n.text:0000000000405596\n.text:0000000000405599\n.text:000000000040559b\n.text:00000000004055a5\n.text:00000000004055a7\n.text:00000000004055aa\n.text:00000000004055ad\n.text:00000000004055af\n.text:00000000004055b2\n.text:00000000004055b5\n.text:00000000004055ba\n.text:00000000004055bc\n.text:00000000004055bf\n.text:00000000004055c1\n.text:00000000004055c6\n.text:00000000004055c8\n.text:00000000004055cb\n.text:00000000004055cd\n.text:00000000004055d4\n.text:00000000004055d7\n.text:00000000004055da\n.text:00000000004055dd\n.text:00000000004055e1\n.text:00000000004055e4\n.text:00000000004055e9\n.text:00000000004055ea\n'
p1623
tp1624
sS'quotearg_n_options'
p1625
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1626
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1627
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401780\nTEST R12D,R12D\nJS 0x00404821\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060e278]\nCMP dword ptr [0x0060e280],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040473b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60e288\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00405560\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060e278],R15\nJNZ 0x00404702\nMOVUPS XMM0,xmmword ptr [0x0060e288]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060e280]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401910\nMOV dword ptr [0x0060e280],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00403890\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040479d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040480b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60e3a0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x004047c8\nCALL 0x00401760\nMOV RDI,R15\nCALL 0x004055f0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00403890\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401770\n'
p1628
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 f1 d0 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 ce 9b 20 00\n44 39 25 cf 9b 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 88 e2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 78 0e 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 83 9b 20 00\n75 0b\n0f 10 05 8a 9b 20 00\n41 0f 11 07\n8b 05 78 9b 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 ed d1 ff ff\n89 1d 57 9b 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 a0 e3 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 98 cf ff ff\n4c 89 ff\ne8 20 0e 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 4a cf ff ff\n'
p1629
S'.text:0000000000404670\n.text:0000000000404671\n.text:0000000000404673\n.text:0000000000404675\n.text:0000000000404677\n.text:0000000000404679\n.text:000000000040467a\n.text:000000000040467e\n.text:0000000000404681\n.text:0000000000404684\n.text:0000000000404687\n.text:000000000040468a\n.text:000000000040468f\n.text:0000000000404692\n.text:0000000000404698\n.text:000000000040469d\n.text:000000000040469f\n.text:00000000004046a3\n.text:00000000004046aa\n.text:00000000004046b1\n.text:00000000004046b6\n.text:00000000004046bb\n.text:00000000004046c0\n.text:00000000004046c2\n.text:00000000004046c7\n.text:00000000004046ca\n.text:00000000004046cd\n.text:00000000004046d3\n.text:00000000004046d5\n.text:00000000004046d8\n.text:00000000004046dc\n.text:00000000004046df\n.text:00000000004046e3\n.text:00000000004046e8\n.text:00000000004046eb\n.text:00000000004046ee\n.text:00000000004046f5\n.text:00000000004046f7\n.text:00000000004046fe\n.text:0000000000404702\n.text:0000000000404708\n.text:000000000040470b\n.text:000000000040470f\n.text:0000000000404712\n.text:0000000000404715\n.text:0000000000404719\n.text:000000000040471b\n.text:000000000040471e\n.text:0000000000404723\n.text:0000000000404729\n.text:000000000040472c\n.text:0000000000404731\n.text:0000000000404736\n.text:000000000040473b\n.text:000000000040473e\n.text:0000000000404742\n.text:0000000000404746\n.text:000000000040474b\n.text:000000000040474f\n.text:0000000000404753\n.text:0000000000404757\n.text:000000000040475b\n.text:000000000040475f\n.text:0000000000404764\n.text:0000000000404767\n.text:000000000040476a\n.text:000000000040476d\n.text:0000000000404772\n.text:0000000000404775\n.text:0000000000404778\n.text:000000000040477b\n.text:000000000040477c\n.text:0000000000404781\n.text:0000000000404785\n.text:0000000000404788\n.text:000000000040478b\n.text:000000000040478d\n.text:0000000000404792\n.text:0000000000404796\n.text:000000000040479b\n.text:000000000040479d\n.text:00000000004047a1\n.text:00000000004047a6\n.text:00000000004047a9\n.text:00000000004047ac\n.text:00000000004047b1\n.text:00000000004047b6\n.text:00000000004047b9\n.text:00000000004047be\n.text:00000000004047c1\n.text:00000000004047c3\n.text:00000000004047c8\n.text:00000000004047cb\n.text:00000000004047d0\n.text:00000000004047d3\n.text:00000000004047d6\n.text:00000000004047db\n.text:00000000004047de\n.text:00000000004047e2\n.text:00000000004047e5\n.text:00000000004047e8\n.text:00000000004047ed\n.text:00000000004047f2\n.text:00000000004047f7\n.text:00000000004047fa\n.text:00000000004047fd\n.text:00000000004047fe\n.text:0000000000404803\n.text:0000000000404807\n.text:000000000040480b\n.text:000000000040480f\n.text:0000000000404812\n.text:0000000000404816\n.text:0000000000404817\n.text:0000000000404819\n.text:000000000040481b\n.text:000000000040481d\n.text:000000000040481f\n.text:0000000000404820\n.text:0000000000404821\n'
p1630
tp1631
sS'strcmp'
p1632
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1633
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060e140)();\u000a  return iVar1;\u000a}\u000a\u000a
p1634
S'JMP qword ptr [0x0060e140]\n'
p1635
S'ff 25 9a c7 20 00\n'
p1636
S'.plt:00000000004019a0\n'
p1637
tp1638
sS'rotr64'
p1639
(S'\n__stdcall rotr64(uint64_t x)\n'
p1640
V\u000auint64_t rotr64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1641
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1642
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1643
S'.text:0000000000409230\n.text:0000000000409232\n.text:0000000000409235\n.text:0000000000409238\n'
p1644
tp1645
sS'set_custom_quoting'
p1646
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1647
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1648
S'TEST RDI,RDI\nMOV EAX,0x60e360\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00403805\nTEST RDX,RDX\nJZ 0x00403805\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401770\n'
p1649
S'48 85 ff\nb8 60 e3 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 65 df ff ff\n'
p1650
S'.text:00000000004037e0\n.text:00000000004037e3\n.text:00000000004037e8\n.text:00000000004037ec\n.text:00000000004037f2\n.text:00000000004037f5\n.text:00000000004037f7\n.text:00000000004037fa\n.text:00000000004037fc\n.text:0000000000403800\n.text:0000000000403804\n.text:0000000000403805\n.text:0000000000403806\n'
p1651
tp1652
sS'c_isalpha'
p1653
(S'\n__stdcall c_isalpha()\n'
p1654
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1655
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x004077db\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1656
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1657
S'.text:00000000004077c0\n.text:00000000004077c3\n.text:00000000004077c6\n.text:00000000004077c8\n.text:00000000004077d2\n.text:00000000004077d4\n.text:00000000004077d7\n.text:00000000004077da\n.text:00000000004077db\n.text:00000000004077dd\n'
p1658
tp1659
sS'quotearg_custom_mem'
p1660
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1661
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1662
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00404a80\n'
p1663
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1664
S'.text:0000000000404b10\n.text:0000000000404b13\n.text:0000000000404b16\n.text:0000000000404b19\n.text:0000000000404b1c\n.text:0000000000404b1e\n.text:0000000000404b21\n'
p1665
tp1666
sS'dcngettext'
p1667
(S'\n__stdcall dcngettext()\n'
p1668
V\u000avoid dcngettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcngettext_0060e1f8)();\u000a  return;\u000a}\u000a\u000a
p1669
S'JMP qword ptr [0x0060e1f8]\n'
p1670
S'ff 25 e2 c6 20 00\n'
p1671
S'.plt:0000000000401b10\n'
p1672
tp1673
sS'faccessat'
p1674
(S'\n__stdcall faccessat(int __fd, char * __file, int __type, int __flag)\n'
p1675
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint faccessat(int __fd,char *__file,int __type,int __flag)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_faccessat_0060e078)();\u000a  return iVar1;\u000a}\u000a\u000a
p1676
S'JMP qword ptr [0x0060e078]\n'
p1677
S'ff 25 62 c8 20 00\n'
p1678
S'.plt:0000000000401810\n'
p1679
tp1680
sS'hash_get_max_bucket_length'
p1681
(S'\n__stdcall hash_get_max_bucket_length(Hash_table * table)\n'
p1682
V\u000asize_t hash_get_max_bucket_length(Hash_table *table)\u000a\u000a{\u000a  ulong uVar1;\u000a  hash_entry *phVar2;\u000a  ulong uVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar2 = table->bucket;\u000a  if (phVar2 < table->bucket_limit) {\u000a    uVar1 = 0;\u000a    do {\u000a      if (phVar2->data != (void *)0x0) {\u000a        uVar3 = 0;\u000a        phVar4 = phVar2;\u000a        do {\u000a          phVar4 = phVar4->next;\u000a          uVar3 = uVar3 + 1;\u000a        } while (phVar4 != (hash_entry *)0x0);\u000a        if (uVar1 < uVar3) {\u000a          uVar1 = uVar3;\u000a        }\u000a      }\u000a      phVar2 = phVar2 + 1;\u000a    } while (phVar2 < table->bucket_limit);\u000a    return uVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1683
S'MOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x00407b9d\nMOV RDX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nNOP\nCMP qword ptr [RCX],0x0\nJZ 0x00407b93\nXOR ESI,ESI\nMOV RDI,RCX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RDI + 0x8]\nINC RSI\nTEST RDI,RDI\nJNZ 0x00407b80\nCMP RSI,RAX\nCMOVA RAX,RSI\nADD RCX,0x10\nCMP RCX,RDX\nJC 0x00407b70\nRET\nXOR EAX,EAX\nRET\n'
p1684
S'48 8b 0f\n48 3b 4f 08\n73 34\n48 8b 57 08\n31 c0\n90\n48 83 39 00\n74 1d\n31 f6\n48 89 cf\n0f 1f 44 00 00\n48 8b 7f 08\n48 ff c6\n48 85 ff\n75 f4\n48 39 c6\n48 0f 47 c6\n48 83 c1 10\n48 39 d1\n72 d4\nc3\n31 c0\nc3\n'
p1685
S'.text:0000000000407b60\n.text:0000000000407b63\n.text:0000000000407b67\n.text:0000000000407b69\n.text:0000000000407b6d\n.text:0000000000407b6f\n.text:0000000000407b70\n.text:0000000000407b74\n.text:0000000000407b76\n.text:0000000000407b78\n.text:0000000000407b7b\n.text:0000000000407b80\n.text:0000000000407b84\n.text:0000000000407b87\n.text:0000000000407b8a\n.text:0000000000407b8c\n.text:0000000000407b8f\n.text:0000000000407b93\n.text:0000000000407b97\n.text:0000000000407b9a\n.text:0000000000407b9c\n.text:0000000000407b9d\n.text:0000000000407b9f\n'
p1686
tp1687
sS'geteuid'
p1688
(S'\n__stdcall geteuid()\n'
p1689
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__uid_t geteuid(void)\u000a\u000a{\u000a  __uid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_geteuid_0060e100)();\u000a  return _Var1;\u000a}\u000a\u000a
p1690
S'JMP qword ptr [0x0060e100]\n'
p1691
S'ff 25 da c7 20 00\n'
p1692
S'.plt:0000000000401920\n'
p1693
tp1694
sS'rpl_calloc'
p1695
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1696
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060e138)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1697
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x004057eb\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x004057f0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x004057f0\nPUSH RAX\nCALL 0x00401780\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401990\n'
p1698
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 9f bf ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 95 c1 ff ff\n'
p1699
S'.text:00000000004057b0\n.text:00000000004057b3\n.text:00000000004057b8\n.text:00000000004057ba\n.text:00000000004057bd\n.text:00000000004057c2\n.text:00000000004057c4\n.text:00000000004057c7\n.text:00000000004057cb\n.text:00000000004057cd\n.text:00000000004057d0\n.text:00000000004057d3\n.text:00000000004057d6\n.text:00000000004057d9\n.text:00000000004057db\n.text:00000000004057dc\n.text:00000000004057e1\n.text:00000000004057e7\n.text:00000000004057e9\n.text:00000000004057ea\n.text:00000000004057eb\n.text:00000000004057f0\n.text:00000000004057f3\n.text:00000000004057f6\n'
p1700
tp1701
sS'memset'
p1702
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1703
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060e0f8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1704
S'JMP qword ptr [0x0060e0f8]\n'
p1705
S'ff 25 e2 c7 20 00\n'
p1706
S'.plt:0000000000401910\n'
p1707
tp1708
sS'get_root_dev_ino'
p1709
(S'\n__stdcall get_root_dev_ino(dev_ino * root_d_i)\n'
p1710
V\u000adev_ino * get_root_dev_ino(dev_ino *root_d_i)\u000a\u000a{\u000a  int iVar1;\u000a  stat local_98;\u000a  \u000a  iVar1 = lstat("/",&local_98);\u000a  if (iVar1 == 0) {\u000a    root_d_i->st_ino = local_98.st_ino;\u000a    root_d_i->st_dev = local_98.st_dev;\u000a  }\u000a  else {\u000a    root_d_i = (dev_ino *)0x0;\u000a  }\u000a  return root_d_i;\u000a}\u000a\u000a
p1711
S'PUSH RBX\nSUB RSP,0x90\nMOV RBX,RDI\nMOV RSI,RSP\nMOV EDI,0x40a78f\nCALL 0x004093d0\nTEST EAX,EAX\nJZ 0x00404f90\nXOR EBX,EBX\nJMP 0x00404fa0\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,RBX\nADD RSP,0x90\nPOP RBX\nRET\n'
p1712
S'53\n48 81 ec 90 00 00 00\n48 89 fb\n48 89 e6\nbf 8f a7 40 00\ne8 48 44 00 00\n85 c0\n74 04\n31 db\neb 10\n48 8b 44 24 08\n48 89 03\n48 8b 04 24\n48 89 43 08\n48 89 d8\n48 81 c4 90 00 00 00\n5b\nc3\n'
p1713
S'.text:0000000000404f70\n.text:0000000000404f71\n.text:0000000000404f78\n.text:0000000000404f7b\n.text:0000000000404f7e\n.text:0000000000404f83\n.text:0000000000404f88\n.text:0000000000404f8a\n.text:0000000000404f8c\n.text:0000000000404f8e\n.text:0000000000404f90\n.text:0000000000404f95\n.text:0000000000404f98\n.text:0000000000404f9c\n.text:0000000000404fa0\n.text:0000000000404fa3\n.text:0000000000404faa\n.text:0000000000404fab\n'
p1714
tp1715
sS'getc_unlocked'
p1716
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1717
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060e060)();\u000a  return iVar1;\u000a}\u000a\u000a
p1718
S'JMP qword ptr [0x0060e060]\n'
p1719
S'ff 25 7a c8 20 00\n'
p1720
S'.plt:00000000004017e0\n'
p1721
tp1722
sS'memmove'
p1723
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p1724
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_0060e1d8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1725
S'JMP qword ptr [0x0060e1d8]\n'
p1726
S'ff 25 02 c7 20 00\n'
p1727
S'.plt:0000000000401ad0\n'
p1728
tp1729
sS'c_isascii'
p1730
(S'\n__stdcall c_isascii()\n'
p1731
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1732
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1733
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1734
S'.text:00000000004077e0\n.text:00000000004077e6\n.text:00000000004077e9\n'
p1735
tp1736
sS'hash_insert_if_absent'
p1737
(S'\n__stdcall hash_insert_if_absent(Hash_table * table, void * entry, void * * matched_ent)\n'
p1738
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint hash_insert_if_absent(Hash_table *table,void *entry,void **matched_ent)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  Hash_tuning *pHVar3;\u000a  _Bool _Var4;\u000a  hash_entry *in_RAX;\u000a  void *pvVar5;\u000a  hash_entry *phVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_28;\u000a  \u000a  if (entry != (void *)0x0) {\u000a    local_28 = in_RAX;\u000a    pvVar5 = hash_find_entry(table,entry,&local_28);\u000a    if (pvVar5 != (void *)0x0) {\u000a      if (matched_ent == (void **)0x0) {\u000a        return 0;\u000a      }\u000a      *matched_ent = pvVar5;\u000a      return 0;\u000a    }\u000a    uVar1 = table->n_buckets;\u000a    uVar2 = table->n_buckets_used;\u000a    if ((long)uVar2 < 0) {\u000a      fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a      fVar7 = fVar7 + fVar7;\u000a    }\u000a    else {\u000a      fVar7 = (float)uVar2;\u000a    }\u000a    if ((long)uVar1 < 0) {\u000a      fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a      fVar8 = fVar8 + fVar8;\u000a    }\u000a    else {\u000a      fVar8 = (float)uVar1;\u000a    }\u000a    if (fVar8 * table->tuning->growth_threshold < fVar7) {\u000a      check_tuning(table);\u000a      uVar1 = table->n_buckets;\u000a      uVar2 = table->n_buckets_used;\u000a      if ((long)uVar2 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar2;\u000a      }\u000a      pHVar3 = table->tuning;\u000a      if ((long)uVar1 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar1;\u000a      }\u000a      if (pHVar3->growth_threshold * fVar8 < fVar7) {\u000a        fVar8 = fVar8 * pHVar3->growth_factor;\u000a        if (pHVar3->is_n_buckets == false) {\u000a          fVar8 = fVar8 * pHVar3->growth_threshold;\u000a        }\u000a        if (_DAT_0040b48c <= fVar8) {\u000a          return -1;\u000a        }\u000a        candidate = (long)fVar8;\u000a        if (DAT_0040b488 <= fVar8) {\u000a          candidate = (long)(fVar8 - DAT_0040b488) ^ 0x8000000000000000;\u000a        }\u000a        _Var4 = hash_rehash(table,candidate);\u000a        if (_Var4 == false) {\u000a          return -1;\u000a        }\u000a        pvVar5 = hash_find_entry(table,entry,&local_28);\u000a        if (pvVar5 != (void *)0x0) goto LAB_0040872d;\u000a      }\u000a    }\u000a    if (local_28->data == (void *)0x0) {\u000a      local_28->data = entry;\u000a      table->n_entries = table->n_entries + 1;\u000a      table->n_buckets_used = table->n_buckets_used + 1;\u000a    }\u000a    else {\u000a      phVar6 = allocate_entry(table);\u000a      if (phVar6 == (hash_entry *)0x0) {\u000a        return -1;\u000a      }\u000a      phVar6->data = entry;\u000a      phVar6->next = local_28->next;\u000a      local_28->next = phVar6;\u000a      table->n_entries = table->n_entries + 1;\u000a    }\u000a    return 1;\u000a  }\u000aLAB_0040872d:\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1739
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST R14,R14\nJZ 0x0040872d\nMOV RDX,RSP\nXOR EBP,EBP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00408740\nTEST RAX,RAX\nJZ 0x004085a1\nTEST RBX,RBX\nJZ 0x00408720\nMOV qword ptr [RBX],RAX\nJMP 0x00408720\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x004085b5\nCVTSI2SS XMM0,RCX\nJMP 0x004085ca\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM0,RCX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x004085da\nCVTSI2SS XMM1,RAX\nJMP 0x004085ef\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nCVTSI2SS XMM1,RAX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RCX + 0x8]\nUCOMISS XMM0,XMM1\nJBE 0x004086d9\nMOV RDI,R15\nCALL 0x00408070\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00408619\nCVTSI2SS XMM2,RCX\nJMP 0x0040862e\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM2,RCX\nADDSS XMM2,XMM2\nMOV RCX,qword ptr [R15 + 0x28]\nMOVSS XMM1,dword ptr [RCX + 0x8]\nTEST RAX,RAX\nJS 0x00408646\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x0040865e\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVAPS XMM3,XMM1\nMULSS XMM3,XMM0\nUCOMISS XMM2,XMM3\nJBE 0x004086d9\nCMP byte ptr [RCX + 0x10],0x0\nMULSS XMM0,dword ptr [RCX + 0xc]\nJNZ 0x00408679\nMULSS XMM0,XMM1\nMOV EBP,0xffffffff\nUCOMISS XMM0,dword ptr [0x0040b48c]\nJNC 0x00408720\nMOVSS XMM1,dword ptr [0x0040b488]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x00408310\nTEST AL,AL\nJZ 0x00408720\nMOV RDX,RSP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00408740\nTEST RAX,RAX\nJNZ 0x0040872d\nMOV RAX,qword ptr [RSP]\nCMP qword ptr [RAX],0x0\nJZ 0x00408709\nMOV RDI,R15\nCALL 0x00408800\nTEST RAX,RAX\nJZ 0x0040871b\nMOV qword ptr [RAX],R14\nMOV RCX,qword ptr [RSP]\nMOV RDX,qword ptr [RCX + 0x8]\nMOV qword ptr [RAX + 0x8],RDX\nMOV qword ptr [RCX + 0x8],RAX\nINC qword ptr [R15 + 0x20]\nJMP 0x00408714\nMOV qword ptr [RAX],R14\nINC qword ptr [R15 + 0x20]\nINC qword ptr [R15 + 0x18]\nMOV EBP,0x1\nJMP 0x00408720\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401770\n'
p1740
S'55\n41 57\n41 56\n53\n50\n48 89 d3\n49 89 f6\n49 89 ff\n4d 85 f6\n0f 84 b4 01 00 00\n48 89 e2\n31 ed\n31 c9\n4c 89 ff\n4c 89 f6\ne8 b5 01 00 00\n48 85 c0\n74 11\n48 85 db\n0f 84 87 01 00 00\n48 89 03\ne9 7f 01 00 00\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a c1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c1\nf3 0f 58 c0\n49 8b 4f 28\n48 85 c0\n78 07\nf3 48 0f 2a c8\neb 15\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\nf3 48 0f 2a c8\nf3 0f 58 c9\nf3 0f 59 49 08\n0f 2e c1\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b fa ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a d1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a d1\nf3 0f 58 d2\n49 8b 4f 28\nf3 0f 10 49 08\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\n0f 28 d9\nf3 0f 59 d8\n0f 2e d3\n76 6f\n80 79 10 00\nf3 0f 59 41 0c\n75 04\nf3 0f 59 c1\nbd ff ff ff ff\n0f 2e 05 07 2e 00 00\n0f 83 95 00 00 00\nf3 0f 10 0d f5 2d 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 50 fc ff ff\n84 c0\n74 5c\n48 89 e2\n31 c9\n4c 89 ff\n4c 89 f6\ne8 6c 00 00 00\n48 85 c0\n75 54\n48 8b 04 24\n48 83 38 00\n74 26\n4c 89 ff\ne8 15 01 00 00\n48 85 c0\n74 2b\n4c 89 30\n48 8b 0c 24\n48 8b 51 08\n48 89 50 08\n48 89 41 08\n49 ff 47 20\neb 0b\n4c 89 30\n49 ff 47 20\n49 ff 47 18\nbd 01 00 00 00\neb 05\nbd ff ff ff ff\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 3e 90 ff ff\n'
p1741
S'.text:0000000000408560\n.text:0000000000408561\n.text:0000000000408563\n.text:0000000000408565\n.text:0000000000408566\n.text:0000000000408567\n.text:000000000040856a\n.text:000000000040856d\n.text:0000000000408570\n.text:0000000000408573\n.text:0000000000408579\n.text:000000000040857c\n.text:000000000040857e\n.text:0000000000408580\n.text:0000000000408583\n.text:0000000000408586\n.text:000000000040858b\n.text:000000000040858e\n.text:0000000000408590\n.text:0000000000408593\n.text:0000000000408599\n.text:000000000040859c\n.text:00000000004085a1\n.text:00000000004085a5\n.text:00000000004085a9\n.text:00000000004085ac\n.text:00000000004085ae\n.text:00000000004085b3\n.text:00000000004085b5\n.text:00000000004085b8\n.text:00000000004085bb\n.text:00000000004085be\n.text:00000000004085c1\n.text:00000000004085c6\n.text:00000000004085ca\n.text:00000000004085ce\n.text:00000000004085d1\n.text:00000000004085d3\n.text:00000000004085d8\n.text:00000000004085da\n.text:00000000004085dd\n.text:00000000004085e0\n.text:00000000004085e3\n.text:00000000004085e6\n.text:00000000004085eb\n.text:00000000004085ef\n.text:00000000004085f4\n.text:00000000004085f7\n.text:00000000004085fd\n.text:0000000000408600\n.text:0000000000408605\n.text:0000000000408609\n.text:000000000040860d\n.text:0000000000408610\n.text:0000000000408612\n.text:0000000000408617\n.text:0000000000408619\n.text:000000000040861c\n.text:000000000040861f\n.text:0000000000408622\n.text:0000000000408625\n.text:000000000040862a\n.text:000000000040862e\n.text:0000000000408632\n.text:0000000000408637\n.text:000000000040863a\n.text:000000000040863c\n.text:000000000040863f\n.text:0000000000408644\n.text:0000000000408646\n.text:0000000000408649\n.text:000000000040864c\n.text:000000000040864f\n.text:0000000000408652\n.text:0000000000408655\n.text:000000000040865a\n.text:000000000040865e\n.text:0000000000408661\n.text:0000000000408665\n.text:0000000000408668\n.text:000000000040866a\n.text:000000000040866e\n.text:0000000000408673\n.text:0000000000408675\n.text:0000000000408679\n.text:000000000040867e\n.text:0000000000408685\n.text:000000000040868b\n.text:0000000000408693\n.text:0000000000408696\n.text:000000000040869a\n.text:000000000040869f\n.text:00000000004086a9\n.text:00000000004086ac\n.text:00000000004086b1\n.text:00000000004086b4\n.text:00000000004086b8\n.text:00000000004086bb\n.text:00000000004086c0\n.text:00000000004086c2\n.text:00000000004086c4\n.text:00000000004086c7\n.text:00000000004086c9\n.text:00000000004086cc\n.text:00000000004086cf\n.text:00000000004086d4\n.text:00000000004086d7\n.text:00000000004086d9\n.text:00000000004086dd\n.text:00000000004086e1\n.text:00000000004086e3\n.text:00000000004086e6\n.text:00000000004086eb\n.text:00000000004086ee\n.text:00000000004086f0\n.text:00000000004086f3\n.text:00000000004086f7\n.text:00000000004086fb\n.text:00000000004086ff\n.text:0000000000408703\n.text:0000000000408707\n.text:0000000000408709\n.text:000000000040870c\n.text:0000000000408710\n.text:0000000000408714\n.text:0000000000408719\n.text:000000000040871b\n.text:0000000000408720\n.text:0000000000408722\n.text:0000000000408726\n.text:0000000000408727\n.text:0000000000408729\n.text:000000000040872b\n.text:000000000040872c\n.text:000000000040872d\n'
p1742
tp1743
sS'dot_or_dotdot'
p1744
(S'\n__stdcall dot_or_dotdot(char * file_name)\n'
p1745
V\u000a_Bool dot_or_dotdot(char *file_name)\u000a\u000a{\u000a  if (*file_name == '.') {\u000a    return (_Bool)(file_name[(ulong)(file_name[1] == '.') + 1] == '/' ||\u000a                  file_name[(ulong)(file_name[1] == '.') + 1] == 0);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1746
S'CMP byte ptr [RDI],0x2e\nJNZ 0x00402a7f\nXOR EAX,EAX\nCMP byte ptr [RDI + 0x1],0x2e\nSETZ AL\nMOV AL,byte ptr [RDI + RAX*0x1 + 0x1]\nTEST AL,AL\nSETZ CL\nCMP AL,0x2f\nSETZ AL\nOR AL,CL\nRET\nXOR EAX,EAX\nRET\n'
p1747
S'80 3f 2e\n75 1a\n31 c0\n80 7f 01 2e\n0f 94 c0\n8a 44 07 01\n84 c0\n0f 94 c1\n3c 2f\n0f 94 c0\n08 c8\nc3\n31 c0\nc3\n'
p1748
S'.text:0000000000402a60\n.text:0000000000402a63\n.text:0000000000402a65\n.text:0000000000402a67\n.text:0000000000402a6b\n.text:0000000000402a6e\n.text:0000000000402a72\n.text:0000000000402a74\n.text:0000000000402a77\n.text:0000000000402a79\n.text:0000000000402a7c\n.text:0000000000402a7e\n.text:0000000000402a7f\n.text:0000000000402a81\n'
p1749
tp1750
sS'__xargmatch_internal'
p1751
(S'\n__stdcall __xargmatch_internal(char * context, char * arg, char * * arglist, char * vallist, size_t valsize, argmatch_exit_fn * exit_fn)\n'
p1752
V\u000aptrdiff_t __xargmatch_internal\u000a                    (char *context,char *arg,char **arglist,char *vallist,size_t valsize,\u000a                    void (*exit_fn)())\u000a\u000a{\u000a  ptrdiff_t problem;\u000a  \u000a  problem = argmatch(arg,arglist,vallist,valsize);\u000a  if (problem < 0) {\u000a    argmatch_invalid(context,arg,problem);\u000a    argmatch_valid(arglist,vallist,valsize);\u000a    (*exit_fn)();\u000a    problem = -1;\u000a  }\u000a  return problem;\u000a}\u000a\u000a
p1753
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x00403050\nTEST RAX,RAX\nJNS 0x00403309\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00403150\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x004031c0\nCALL R14\nMOV RAX,-0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1754
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c7\n49 89 cc\n49 89 d5\n48 89 f3\n48 89 fd\n48 89 df\n4c 89 ee\n4c 89 e2\n4c 89 f9\ne8 72 fd ff ff\n48 85 c0\n79 26\n48 89 ef\n48 89 de\n48 89 c2\ne8 5f fe ff ff\n4c 89 ef\n4c 89 e6\n4c 89 fa\ne8 c1 fe ff ff\n41 ff d6\n48 c7 c0 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1755
S'.text:00000000004032b0\n.text:00000000004032b1\n.text:00000000004032b3\n.text:00000000004032b5\n.text:00000000004032b7\n.text:00000000004032b9\n.text:00000000004032ba\n.text:00000000004032bb\n.text:00000000004032be\n.text:00000000004032c1\n.text:00000000004032c4\n.text:00000000004032c7\n.text:00000000004032ca\n.text:00000000004032cd\n.text:00000000004032d0\n.text:00000000004032d3\n.text:00000000004032d6\n.text:00000000004032d9\n.text:00000000004032de\n.text:00000000004032e1\n.text:00000000004032e3\n.text:00000000004032e6\n.text:00000000004032e9\n.text:00000000004032ec\n.text:00000000004032f1\n.text:00000000004032f4\n.text:00000000004032f7\n.text:00000000004032fa\n.text:00000000004032ff\n.text:0000000000403302\n.text:0000000000403309\n.text:000000000040330d\n.text:000000000040330e\n.text:0000000000403310\n.text:0000000000403312\n.text:0000000000403314\n.text:0000000000403316\n.text:0000000000403317\n'
p1756
tp1757
sS'dup_safer'
p1758
(S'\n__stdcall dup_safer()\n'
p1759
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1760
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x00409060\n'
p1761
S'31 f6\nba 03 00 00 00\n31 c0\ne9 d2 00 00 00\n'
p1762
S'.text:0000000000408f80\n.text:0000000000408f82\n.text:0000000000408f87\n.text:0000000000408f89\n'
p1763
tp1764
sS'dirfd'
p1765
(S'\n__stdcall dirfd(DIR * __dirp)\n'
p1766
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dirfd(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dirfd_0060e148)();\u000a  return iVar1;\u000a}\u000a\u000a
p1767
S'JMP qword ptr [0x0060e148]\n'
p1768
S'ff 25 92 c7 20 00\n'
p1769
S'.plt:00000000004019b0\n'
p1770
tp1771
sS'diropen'
p1772
(S'\n__stdcall diropen(FTS * sp, char * dir)\n'
p1773
V\u000aint diropen(FTS *sp,char *dir)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  \u000a  uVar1 = sp->fts_options;\u000a  uVar3 = (uVar1 & 0x10) * 0x2000;\u000a  uVar4 = (uVar1 & 0x800) * 0x80 + 0x10900 + uVar3;\u000a  if ((uVar1 & 0x200) == 0) {\u000a    iVar2 = open_safer(dir,(ulong)uVar4);\u000a  }\u000a  else {\u000a    iVar2 = openat_safer((char *)(ulong)(uint)sp->fts_cwd_fd,dir,(ulong)uVar4,(ulong)uVar3);\u000a  }\u000a  if (-1 < iVar2) {\u000a    set_cloexec_flag();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1774
S'PUSH RBX\nMOV EAX,dword ptr [RDI + 0x48]\nMOV ECX,EAX\nAND ECX,0x10\nSHL ECX,0xd\nMOV EDX,EAX\nSHL EDX,0x7\nAND EDX,0x40000\nLEA EDX,[0x10900 + RDX + RCX*0x1]\nTEST AH,0x2\nJNZ 0x004060c1\nXOR EAX,EAX\nMOV RDI,RSI\nMOV ESI,EDX\nCALL 0x00407a60\nJMP 0x004060cb\nMOV EDI,dword ptr [RDI + 0x2c]\nXOR EAX,EAX\nCALL 0x00408ec0\nMOV EBX,EAX\nTEST EBX,EBX\nJS 0x004060dd\nMOV ESI,0x1\nMOV EDI,EBX\nCALL 0x004078e0\nMOV EAX,EBX\nPOP RBX\nRET\n'
p1775
S'53\n8b 47 48\n89 c1\n83 e1 10\nc1 e1 0d\n89 c2\nc1 e2 07\n81 e2 00 00 04 00\n8d 94 0a 00 09 01 00\nf6 c4 02\n75 0e\n31 c0\n48 89 f7\n89 d6\ne8 a1 19 00 00\neb 0a\n8b 7f 2c\n31 c0\ne8 f5 2d 00 00\n89 c3\n85 db\n78 0c\nbe 01 00 00 00\n89 df\ne8 03 18 00 00\n89 d8\n5b\nc3\n'
p1776
S'.text:0000000000406090\n.text:0000000000406091\n.text:0000000000406094\n.text:0000000000406096\n.text:0000000000406099\n.text:000000000040609c\n.text:000000000040609e\n.text:00000000004060a1\n.text:00000000004060a7\n.text:00000000004060ae\n.text:00000000004060b1\n.text:00000000004060b3\n.text:00000000004060b5\n.text:00000000004060b8\n.text:00000000004060ba\n.text:00000000004060bf\n.text:00000000004060c1\n.text:00000000004060c4\n.text:00000000004060c6\n.text:00000000004060cb\n.text:00000000004060cd\n.text:00000000004060cf\n.text:00000000004060d1\n.text:00000000004060d6\n.text:00000000004060d8\n.text:00000000004060dd\n.text:00000000004060df\n.text:00000000004060e0\n'
p1777
tp1778
sS'rotr32'
p1779
(S'\n__stdcall rotr32()\n'
p1780
V\u000auint32_t rotr32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI >> bVar1 | in_EDI << 0x20 - bVar1);\u000a}\u000a\u000a
p1781
S'MOV ECX,ESI\nROR EDI,CL\nMOV EAX,EDI\nRET\n'
p1782
S'89 f1\nd3 cf\n89 f8\nc3\n'
p1783
S'.text:0000000000409250\n.text:0000000000409252\n.text:0000000000409254\n.text:0000000000409256\n'
p1784
tp1785
sS'__ctype_b_loc'
p1786
(S'\n__stdcall __ctype_b_loc()\n'
p1787
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060e248)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1788
S'JMP qword ptr [0x0060e248]\n'
p1789
S'ff 25 92 c6 20 00\n'
p1790
S'.plt:0000000000401bb0\n'
p1791
tp1792
sS'quotearg'
p1793
(S'\n__stdcall quotearg(char * arg)\n'
p1794
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1795
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404660\n'
p1796
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1797
S'.text:0000000000404840\n.text:0000000000404843\n.text:0000000000404845\n.text:0000000000404848\n'
p1798
tp1799
sS'_start'
p1800
(S'\n__stdcall _start()\n'
p1801
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060dff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1802
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x409370\nMOV RCX,0x409300\nMOV RDI,0x401fb0\nCALL qword ptr [0x0060dff0]\nHLT\n'
p1803
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 70 93 40 00\n48 c7 c1 00 93 40 00\n48 c7 c7 b0 1f 40 00\nff 15 06 c4 20 00\nf4\n'
p1804
S'.text:0000000000401bc0\n.text:0000000000401bc2\n.text:0000000000401bc5\n.text:0000000000401bc6\n.text:0000000000401bc9\n.text:0000000000401bcd\n.text:0000000000401bce\n.text:0000000000401bcf\n.text:0000000000401bd6\n.text:0000000000401bdd\n.text:0000000000401be4\n.text:0000000000401bea\n'
p1805
tp1806
sS'c_iscntrl'
p1807
(S'\n__stdcall c_iscntrl()\n'
p1808
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1809
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00407808\nRET\nCMP EDI,0x7f\nJZ 0x00407807\nXOR EAX,EAX\nRET\n'
p1810
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1811
S'.text:0000000000407800\n.text:0000000000407802\n.text:0000000000407805\n.text:0000000000407807\n.text:0000000000407808\n.text:000000000040780b\n.text:000000000040780d\n.text:000000000040780f\n'
p1812
tp1813
sS'hash_reset_tuning'
p1814
(S'\n__stdcall hash_reset_tuning(Hash_tuning * tuning)\n'
p1815
V\u000avoid hash_reset_tuning(Hash_tuning *tuning)\u000a\u000a{\u000a  float fVar1;\u000a  float fVar2;\u000a  float fVar3;\u000a  \u000a  *(undefined4 *)&tuning->is_n_buckets = default_tuning._16_4_;\u000a  fVar3 = default_tuning.growth_factor;\u000a  fVar2 = default_tuning.growth_threshold;\u000a  fVar1 = default_tuning.shrink_factor;\u000a  tuning->shrink_threshold = default_tuning.shrink_threshold;\u000a  tuning->shrink_factor = fVar1;\u000a  tuning->growth_threshold = fVar2;\u000a  tuning->growth_factor = fVar3;\u000a  return;\u000a}\u000a\u000a
p1816
S'MOV EAX,dword ptr [0x0040b50c]\nMOV dword ptr [RDI + 0x10],EAX\nMOVUPS XMM0,xmmword ptr [0x0040b4fc]\nMOVUPS xmmword ptr [RDI],XMM0\nRET\n'
p1817
S'8b 05 c6 35 00 00\n89 47 10\n0f 10 05 ac 35 00 00\n0f 11 07\nc3\n'
p1818
S'.text:0000000000407f40\n.text:0000000000407f46\n.text:0000000000407f49\n.text:0000000000407f50\n.text:0000000000407f53\n'
p1819
tp1820
sS'c_isblank'
p1821
(S'\n__stdcall c_isblank()\n'
p1822
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1823
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1824
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1825
S'.text:00000000004077f0\n.text:00000000004077f3\n.text:00000000004077f6\n.text:00000000004077f9\n.text:00000000004077fc\n.text:00000000004077fe\n'
p1826
tp1827
sS'atexit'
p1828
(S'\n__stdcall atexit(__func * __func)\n'
p1829
V\u000a/* WARNING: Removing unreachable block (ram,0x004093a0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060e210)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1830
S'MOV RAX,0x60e258\nTEST RAX,RAX\nJZ 0x004093a0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401b40\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401b40\n'
p1831
S'48 c7 c0 58 e2 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 aa 87 ff ff\n31 d2\n31 f6\ne9 97 87 ff ff\n'
p1832
S'.text:0000000000409380\n.text:0000000000409387\n.text:000000000040938a\n.text:000000000040938c\n.text:000000000040938f\n.text:0000000000409391\n.text:00000000004093a0\n.text:00000000004093a2\n.text:00000000004093a4\n'
p1833
tp1834
sS'can_write_any_file'
p1835
(S'\n__stdcall can_write_any_file()\n'
p1836
V\u000a_Bool can_write_any_file(void)\u000a\u000a{\u000a  _Bool can_write;\u000a  __uid_t _Var1;\u000a  \u000a  if (can_write_any_file_initialized == 0) {\u000a    _Var1 = geteuid();\u000a    can_write = (_Bool)(_Var1 == 0);\u000a    can_write_any_file_initialized = 1;\u000a  }\u000a  return can_write;\u000a}\u000a\u000a
p1837
S'MOV AL,byte ptr [0x0060e4a0]\nTEST AL,AL\nJNZ 0x004054f4\nPUSH RAX\nCALL 0x00401920\nTEST EAX,EAX\nSETZ byte ptr [0x0060e4a1]\nMOV byte ptr [0x0060e4a0],0x1\nADD RSP,0x8\nMOV AL,byte ptr [0x0060e4a1]\nRET\n'
p1838
S'8a 05 ca 8f 20 00\n84 c0\n75 1a\n50\ne8 40 c4 ff ff\n85 c0\n0f 94 05 b8 8f 20 00\nc6 05 b0 8f 20 00 01\n48 83 c4 08\n8a 05 a7 8f 20 00\nc3\n'
p1839
S'.text:00000000004054d0\n.text:00000000004054d6\n.text:00000000004054d8\n.text:00000000004054da\n.text:00000000004054db\n.text:00000000004054e0\n.text:00000000004054e2\n.text:00000000004054e9\n.text:00000000004054f0\n.text:00000000004054f4\n.text:00000000004054fa\n'
p1840
tp1841
sS'fdopen'
p1842
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1843
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060e1c0)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1844
S'JMP qword ptr [0x0060e1c0]\n'
p1845
S'ff 25 1a c7 20 00\n'
p1846
S'.plt:0000000000401aa0\n'
p1847
tp1848
sS'hash_find_entry'
p1849
(S'\n__stdcall hash_find_entry(Hash_table * table, void * entry, hash_entry * * bucket_head)\n'
p1850
V\u000avoid * hash_find_entry(Hash_table *table,void *entry,hash_entry **bucket_head)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  _Bool _Var4;\u000a  hash_entry *phVar5;\u000a  hash_entry *entry_00;\u000a  char in_CL;\u000a  hash_entry **pphVar6;\u000a  void *pvVar7;\u000a  \u000a  phVar5 = safe_hasher(table,entry);\u000a  *bucket_head = phVar5;\u000a  pvVar7 = phVar5->data;\u000a  if (pvVar7 == (void *)0x0) {\u000a    return (void *)0x0;\u000a  }\u000a  if ((pvVar7 == entry) || (_Var4 = (*table->comparator)(entry,pvVar7), _Var4 != false)) {\u000a    pvVar7 = phVar5->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      phVar5->data = (void *)0x0;\u000a      return pvVar7;\u000a    }\u000a    uVar1 = *(undefined4 *)((long)&entry_00->data + 4);\u000a    uVar2 = *(undefined4 *)&entry_00->next;\u000a    uVar3 = *(undefined4 *)((long)&entry_00->next + 4);\u000a    *(undefined4 *)&phVar5->data = *(undefined4 *)&entry_00->data;\u000a    *(undefined4 *)((long)&phVar5->data + 4) = uVar1;\u000a    *(undefined4 *)&phVar5->next = uVar2;\u000a    *(undefined4 *)((long)&phVar5->next + 4) = uVar3;\u000a  }\u000a  else {\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      return (void *)0x0;\u000a    }\u000a    while( true ) {\u000a      pphVar6 = &phVar5->next;\u000a      if ((entry_00->data == entry) ||\u000a         (_Var4 = (*table->comparator)(entry,entry_00->data), _Var4 != false)) break;\u000a      phVar5 = *pphVar6;\u000a      entry_00 = phVar5->next;\u000a      if (entry_00 == (hash_entry *)0x0) {\u000a        return (void *)0x0;\u000a      }\u000a    }\u000a    entry_00 = *pphVar6;\u000a    pvVar7 = entry_00->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    *pphVar6 = entry_00->next;\u000a  }\u000a  free_entry(table,entry_00);\u000a  return pvVar7;\u000a}\u000a\u000a
p1851
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R12D,ECX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R15,RDI\nCALL 0x00407d50\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RSI,qword ptr [RBX]\nTEST RSI,RSI\nJZ 0x004087c5\nCMP RSI,RBP\nJZ 0x00408777\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJZ 0x00408790\nMOV R14,qword ptr [RBX]\nTEST R12B,R12B\nJZ 0x004087ed\nMOV RSI,qword ptr [RBX + 0x8]\nTEST RSI,RSI\nJZ 0x004087ca\nMOVUPS XMM0,xmmword ptr [RSI]\nMOVUPS xmmword ptr [RBX],XMM0\nJMP 0x004087e5\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nJZ 0x004087c5\nADD RBX,0x8\nXOR R14D,R14D\nMOV RSI,qword ptr [RAX]\nCMP RSI,RBP\nJZ 0x004087d3\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x004087d3\nMOV RBX,qword ptr [RBX]\nMOV RAX,qword ptr [RBX + 0x8]\nADD RBX,0x8\nTEST RAX,RAX\nJNZ 0x004087a0\nJMP 0x004087ed\nXOR R14D,R14D\nJMP 0x004087ed\nMOV qword ptr [RBX],0x0\nJMP 0x004087ed\nMOV RSI,qword ptr [RBX]\nMOV R14,qword ptr [RSI]\nTEST R12B,R12B\nJZ 0x004087ed\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RDI,R15\nCALL 0x00408ac0\nMOV RAX,R14\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1852
S'55\n41 57\n41 56\n41 54\n53\n41 89 cc\n49 89 d6\n48 89 f5\n49 89 ff\ne8 f7 f5 ff ff\n48 89 c3\n49 89 1e\n48 8b 33\n48 85 f6\n74 5e\n48 39 ee\n74 0b\n48 89 ef\n41 ff 57 38\n84 c0\n74 19\n4c 8b 33\n45 84 e4\n74 6e\n48 8b 73 08\n48 85 f6\n74 42\n0f 10 06\n0f 11 03\neb 55\n48 8b 43 08\n48 85 c0\n74 2c\n48 83 c3 08\n45 31 f6\n48 8b 30\n48 39 ee\n74 2b\n48 89 ef\n41 ff 57 38\n84 c0\n75 20\n48 8b 1b\n48 8b 43 08\n48 83 c3 08\n48 85 c0\n75 dd\neb 28\n45 31 f6\neb 23\n48 c7 03 00 00 00 00\neb 1a\n48 8b 33\n4c 8b 36\n45 84 e4\n74 0f\n48 8b 46 08\n48 89 03\n4c 89 ff\ne8 d3 02 00 00\n4c 89 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1853
S'.text:0000000000408740\n.text:0000000000408741\n.text:0000000000408743\n.text:0000000000408745\n.text:0000000000408747\n.text:0000000000408748\n.text:000000000040874b\n.text:000000000040874e\n.text:0000000000408751\n.text:0000000000408754\n.text:0000000000408759\n.text:000000000040875c\n.text:000000000040875f\n.text:0000000000408762\n.text:0000000000408765\n.text:0000000000408767\n.text:000000000040876a\n.text:000000000040876c\n.text:000000000040876f\n.text:0000000000408773\n.text:0000000000408775\n.text:0000000000408777\n.text:000000000040877a\n.text:000000000040877d\n.text:000000000040877f\n.text:0000000000408783\n.text:0000000000408786\n.text:0000000000408788\n.text:000000000040878b\n.text:000000000040878e\n.text:0000000000408790\n.text:0000000000408794\n.text:0000000000408797\n.text:0000000000408799\n.text:000000000040879d\n.text:00000000004087a0\n.text:00000000004087a3\n.text:00000000004087a6\n.text:00000000004087a8\n.text:00000000004087ab\n.text:00000000004087af\n.text:00000000004087b1\n.text:00000000004087b3\n.text:00000000004087b6\n.text:00000000004087ba\n.text:00000000004087be\n.text:00000000004087c1\n.text:00000000004087c3\n.text:00000000004087c5\n.text:00000000004087c8\n.text:00000000004087ca\n.text:00000000004087d1\n.text:00000000004087d3\n.text:00000000004087d6\n.text:00000000004087d9\n.text:00000000004087dc\n.text:00000000004087de\n.text:00000000004087e2\n.text:00000000004087e5\n.text:00000000004087e8\n.text:00000000004087ed\n.text:00000000004087f0\n.text:00000000004087f1\n.text:00000000004087f3\n.text:00000000004087f5\n.text:00000000004087f7\n.text:00000000004087f8\n'
p1854
tp1855
sS'error'
p1856
(S'\n__stdcall error()\n'
p1857
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060e1e0)();\u000a  return;\u000a}\u000a\u000a
p1858
S'JMP qword ptr [0x0060e1e0]\n'
p1859
S'ff 25 fa c6 20 00\n'
p1860
S'.plt:0000000000401ae0\n'
p1861
tp1862
sS'raw_comparator'
p1863
(S'\n__stdcall raw_comparator(void * a, void * b)\n'
p1864
V\u000a_Bool raw_comparator(void *a,void *b)\u000a\u000a{\u000a  return (_Bool)(a == b);\u000a}\u000a\u000a
p1865
S'CMP RDI,RSI\nSETZ AL\nRET\n'
p1866
S'48 39 f7\n0f 94 c0\nc3\n'
p1867
S'.text:0000000000408060\n.text:0000000000408063\n.text:0000000000408066\n'
p1868
tp1869
sS'strcaseeq6'
p1870
(S'\n__stdcall strcaseeq6()\n'
p1871
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1872
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407890\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404f02\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404f09\nJMP 0x00404f1e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404f1e\nTEST BPL,BPL\nJZ 0x00404f19\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404f30\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1873
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 a1 29 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1874
S'.text:0000000000404ee0\n.text:0000000000404ee1\n.text:0000000000404ee2\n.text:0000000000404ee3\n.text:0000000000404ee5\n.text:0000000000404ee8\n.text:0000000000404eea\n.text:0000000000404eef\n.text:0000000000404ef3\n.text:0000000000404ef5\n.text:0000000000404ef7\n.text:0000000000404efa\n.text:0000000000404efc\n.text:0000000000404efe\n.text:0000000000404f00\n.text:0000000000404f02\n.text:0000000000404f04\n.text:0000000000404f07\n.text:0000000000404f09\n.text:0000000000404f0c\n.text:0000000000404f0e\n.text:0000000000404f11\n.text:0000000000404f15\n.text:0000000000404f16\n.text:0000000000404f17\n.text:0000000000404f19\n.text:0000000000404f1e\n.text:0000000000404f22\n.text:0000000000404f23\n.text:0000000000404f24\n'
p1875
tp1876
sS'strcaseeq5'
p1877
(S'\n__stdcall strcaseeq5()\n'
p1878
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1879
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407890\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404eb6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404ebd\nJMP 0x00404ed4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404ed4\nTEST BPL,BPL\nJZ 0x00404ecf\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404ee0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1880
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 ed 29 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1881
S'.text:0000000000404e90\n.text:0000000000404e91\n.text:0000000000404e93\n.text:0000000000404e94\n.text:0000000000404e97\n.text:0000000000404e99\n.text:0000000000404e9c\n.text:0000000000404e9e\n.text:0000000000404ea3\n.text:0000000000404ea7\n.text:0000000000404ea9\n.text:0000000000404eab\n.text:0000000000404eae\n.text:0000000000404eb0\n.text:0000000000404eb2\n.text:0000000000404eb4\n.text:0000000000404eb6\n.text:0000000000404eb8\n.text:0000000000404ebb\n.text:0000000000404ebd\n.text:0000000000404ec0\n.text:0000000000404ec2\n.text:0000000000404ec6\n.text:0000000000404ec9\n.text:0000000000404eca\n.text:0000000000404ecc\n.text:0000000000404ecd\n.text:0000000000404ecf\n.text:0000000000404ed4\n.text:0000000000404ed5\n.text:0000000000404ed7\n.text:0000000000404ed8\n'
p1882
tp1883
sS'strcaseeq7'
p1884
(S'\n__stdcall strcaseeq7()\n'
p1885
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1886
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00407890\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404f52\nTEST ECX,0xffffffdf\nJNZ 0x00404f56\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x00404f5a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1887
S'53\n48 89 fb\n31 ff\ne8 55 29 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1888
S'.text:0000000000404f30\n.text:0000000000404f31\n.text:0000000000404f34\n.text:0000000000404f36\n.text:0000000000404f3b\n.text:0000000000404f3f\n.text:0000000000404f41\n.text:0000000000404f43\n.text:0000000000404f49\n.text:0000000000404f4b\n.text:0000000000404f50\n.text:0000000000404f51\n.text:0000000000404f52\n.text:0000000000404f54\n.text:0000000000404f56\n.text:0000000000404f58\n.text:0000000000404f59\n.text:0000000000404f5a\n.text:0000000000404f5f\n.text:0000000000404f60\n'
p1889
tp1890
sS'rm_fts'
p1891
(S'\n__stdcall rm_fts(FTS * fts, FTSENT * ent, rm_options * x)\n'
p1892
V\u000aRM_status rm_fts(FTS *fts,FTSENT *ent,rm_options *x)\u000a\u000a{\u000a  ushort uVar1;\u000a  dev_ino *pdVar2;\u000a  _Bool _Var3;\u000a  RM_status RVar4;\u000a  uint uVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  undefined8 uVar8;\u000a  char *file_name;\u000a  ulong uVar9;\u000a  Ternary is_empty_directory;\u000a  int local_3c;\u000a  \u000a  switch(ent->fts_info) {\u000a  case 1:\u000a    if ((x->recursive == false) &&\u000a       ((x->remove_empty_directories == false ||\u000a        (_Var3 = is_empty_dir((char *)(ulong)(uint)fts->fts_cwd_fd), _Var3 == false)))) {\u000a      uVar5 = 0x15;\u000a      if (x->remove_empty_directories != false) {\u000a        uVar5 = 0x27;\u000a      }\u000a      uVar8 = dcgettext(0,"cannot remove %s",5);\u000a      RVar4 = RM_ERROR;\u000a      file_name = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar5,uVar8,file_name);\u000a    }\u000a    else {\u000a      if (ent->fts_level == 0) {\u000a        file_name = last_component(ent->fts_accpath);\u000a        _Var3 = dot_or_dotdot(file_name);\u000a        if (_Var3 != false) {\u000a          uVar8 = dcgettext(0,"refusing to remove %s or %s directory: skipping %s",5);\u000a          RVar4 = RM_ERROR;\u000a          file_name = quotearg_n_style((char *)0x0);\u000a          pcVar6 = quotearg_n_style((char *)0x1);\u000a          pcVar7 = quotearg_n_style((char *)0x2);\u000a          error(0,0,uVar8,file_name,pcVar6,pcVar7);\u000a          goto LAB_0040284b;\u000a        }\u000a        pdVar2 = x->root_dev_ino;\u000a        if (((pdVar2 != (dev_ino *)0x0) && (ent->fts_statp[0].st_ino == pdVar2->st_ino)) &&\u000a           (ent->fts_statp[0].st_dev == pdVar2->st_dev)) {\u000a          if ((*ent->fts_path == '/') && (ent->fts_path[1] == 0)) {\u000a            uVar8 = dcgettext(0,"it is dangerous to operate recursively on %s",5);\u000a            file_name = quotearg_style((char *)0x4);\u000a            error(0,0,uVar8,file_name);\u000a          }\u000a          else {\u000a            uVar8 = dcgettext(0,"it is dangerous to operate recursively on %s (same as %s)",5);\u000a            file_name = quotearg_n_style((char *)0x0);\u000a            pcVar6 = quotearg_n_style((char *)0x1);\u000a            error(0,0,uVar8,file_name,pcVar6);\u000a          }\u000a          uVar8 = dcgettext(0,"use --no-preserve-root to override this failsafe",5);\u000a          error(0,0,uVar8,uVar8);\u000a          goto LAB_00402733;\u000a        }\u000a      }\u000a      RVar4 = prompt(fts,ent,(rm_options *)0x1,(Ternary *)x);\u000a      if ((RVar4 == RM_OK) && (local_3c == 4)) {\u000a        RVar4 = excise(fts,ent,x);\u000a        fts_skip_tree(fts,ent);\u000a      }\u000a      if (RVar4 == RM_OK) {\u000a        return RM_OK;\u000a      }\u000a    }\u000a    mark_ancestor_dirs(ent);\u000aLAB_0040284b:\u000a    fts_skip_tree(fts,ent);\u000a    return RVar4;\u000a  case 2:\u000a    uVar8 = dcgettext(0,\u000a                      "WARNING: Circular directory structure.\u005cnThis almost certainly means that you have a corrupted file system.\u005cnNOTIFY YOUR SYSTEM MANAGER.\u005cnThe following directory is part of the cycle:\u005cn  %s\u005cn"\u000a                      ,5);\u000a    file_name = quotearg_n_style_colon((char *)0x0);\u000a    uVar9 = 0;\u000a    break;\u000a  default:\u000a    uVar8 = dcgettext(0,"unexpected failure: fts_info=%d: %s\u005cnplease report to %s",5);\u000a    uVar1 = ent->fts_info;\u000a    file_name = quotearg_n_style_colon((char *)0x0);\u000a    error(0,0,uVar8,(ulong)uVar1,file_name,"bug-coreutils@gnu.org");\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 6:\u000a    if (((x->one_file_system != false) && (0 < ent->fts_level)) &&\u000a       (ent->fts_statp[0].st_dev != fts->fts_dev)) {\u000a      mark_ancestor_dirs(ent);\u000a      uVar8 = dcgettext(0,"skipping %s, since it\u005c's on a different device",5);\u000a      file_name = quotearg_style((char *)0x4);\u000a      error(0,0,uVar8,file_name);\u000a      return RM_ERROR;\u000a    }\u000a  case 3:\u000a  case 4:\u000a  case 8:\u000a  case 10:\u000a  case 0xb:\u000a  case 0xc:\u000a  case 0xd:\u000a    RVar4 = prompt(fts,ent,(rm_options *)(ulong)((ent->fts_info | 2) == 6),(Ternary *)x);\u000a    if (RVar4 != RM_OK) {\u000a      return RVar4;\u000a    }\u000a    RVar4 = excise(fts,ent,x);\u000a    return RVar4;\u000a  case 7:\u000a    uVar5 = ent->fts_errno;\u000a    uVar8 = dcgettext(0,"traversal failed: %s",5);\u000a    file_name = quotearg_n_style_colon((char *)0x0);\u000a    uVar9 = (ulong)uVar5;\u000a  }\u000a  error(0,uVar9,uVar8,file_name);\u000aLAB_00402733:\u000a  fts_skip_tree(fts,ent);\u000a  return RM_ERROR;\u000a}\u000a\u000a
p1893
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,RDX\nMOV R15,RSI\nMOV R14,RDI\nMOVZX EAX,word ptr [R15 + 0x70]\nDEC EAX\nMOVZX EAX,AX\nCMP EAX,0xc\nJA 0x00402950\nJMP qword ptr [0x40a238 + RAX*0x8]\nMOVZX EBX,word ptr [R15 + 0x70]\nOR EBX,0x2\nXOR EDX,EDX\nCMP EBX,0x6\nSETZ DL\nMOV R8D,0x3\nXOR R9D,R9D\nMOV RDI,R14\nMOV RSI,R15\nMOV RCX,R12\nCALL 0x00402a90\nMOV EBP,EAX\nCMP EBP,0x2\nJNZ 0x00402856\nMOVZX EAX,BX\nXOR ECX,ECX\nCMP EAX,0x6\nSETZ CL\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,R12\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402d90\nCMP byte ptr [R12 + 0x9],0x0\nJZ 0x00402748\nCMP qword ptr [R15 + 0x58],0x0\nJZ 0x004027bd\nLEA R9,[RSP + 0xc]\nMOV EDX,0x1\nMOV R8D,0x2\nMOV RDI,R14\nMOV RSI,R15\nMOV RCX,R12\nCALL 0x00402a90\nMOV EBP,EAX\nCMP EBP,0x2\nJNZ 0x0040264d\nCMP dword ptr [RSP + 0xc],0x4\nJNZ 0x0040264d\nMOV ECX,0x1\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,R12\nCALL 0x00402d90\nMOV EBP,EAX\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00402a40\nCMP EBP,0x2\nJNZ 0x004027b0\nJMP 0x00402856\nXOR EDI,EDI\nMOV ESI,0x40a428\nMOV EDX,0x5\nCALL 0x00401860\nMOV RBX,RAX\nMOV RDX,qword ptr [R15 + 0x38]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00404a20\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nJMP 0x0040272e\nCMP byte ptr [R12 + 0x8],0x0\nJZ 0x00402591\nCMP qword ptr [R15 + 0x58],0x0\nJLE 0x00402591\nMOV RAX,qword ptr [R15 + 0x78]\nCMP RAX,qword ptr [R14 + 0x18]\nJZ 0x00402591\nMOV RDI,R15\nCALL 0x00402a10\nXOR EDI,EDI\nMOV ESI,0x40a3fa\nMOV EDX,0x5\nCALL 0x00401860\nMOV RBX,RAX\nMOV RSI,qword ptr [R15 + 0x38]\nMOV EBP,0x4\nMOV EDI,0x4\nCALL 0x00404940\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401ae0\nJMP 0x00402856\nMOV EBX,dword ptr [R15 + 0x40]\nXOR EDI,EDI\nMOV ESI,0x40a4e2\nMOV EDX,0x5\nCALL 0x00401860\nMOV RBP,RAX\nMOV RDX,qword ptr [R15 + 0x38]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00404a20\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00401ae0\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00402a40\nMOV EBP,0x4\nJMP 0x00402856\nCMP byte ptr [R12 + 0xa],0x0\nJZ 0x00402765\nMOV EDI,dword ptr [R14 + 0x2c]\nMOV RSI,qword ptr [R15 + 0x30]\nCALL 0x004029a0\nTEST AL,AL\nJNZ 0x004025f6\nCMP byte ptr [R12 + 0xa],0x0\nMOV EAX,0x27\nMOV EBX,0x15\nCMOVNZ EBX,EAX\nXOR EDI,EDI\nMOV ESI,0x40a31b\nMOV EDX,0x5\nCALL 0x00401860\nMOV R12,RAX\nMOV RSI,qword ptr [R15 + 0x38]\nMOV EBP,0x4\nMOV EDI,0x4\nCALL 0x00404940\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,R12\nCALL 0x00401ae0\nMOV RDI,R15\nCALL 0x00402a10\nJMP 0x0040284b\nMOV RDI,qword ptr [R15 + 0x30]\nCALL 0x00403550\nMOV RDI,RAX\nCALL 0x00402a60\nTEST AL,AL\nJZ 0x00402867\nXOR EDI,EDI\nMOV ESI,0x40a32c\nMOV EDX,0x5\nCALL 0x00401860\nMOV qword ptr [RSP + 0x10],RAX\nMOV EBP,0x4\nXOR EDI,EDI\nMOV ESI,0x4\nMOV EDX,0x40a360\nCALL 0x00404860\nMOV R13,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV EDX,0x40a35f\nCALL 0x00404860\nMOV R12,RAX\nMOV RDX,qword ptr [R15 + 0x38]\nMOV EDI,0x2\nMOV ESI,0x4\nCALL 0x00404860\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,R13\nMOV R8,R12\nMOV R9,RBX\nCALL 0x00401ae0\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00402a40\nMOV EAX,EBP\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RAX,qword ptr [R12 + 0x10]\nTEST RAX,RAX\nJZ 0x00402601\nMOV RCX,qword ptr [0x80 + R15]\nCMP RCX,qword ptr [RAX]\nJNZ 0x00402601\nMOV RCX,qword ptr [R15 + 0x78]\nCMP RCX,qword ptr [RAX + 0x8]\nJNZ 0x00402601\nMOV RAX,qword ptr [R15 + 0x38]\nCMP byte ptr [RAX],0x2f\nJNZ 0x004028a2\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x0040291b\nXOR EDI,EDI\nMOV ESI,0x40a38f\nMOV EDX,0x5\nCALL 0x00401860\nMOV R12,RAX\nMOV RDX,qword ptr [R15 + 0x38]\nXOR EDI,EDI\nMOV ESI,0x4\nCALL 0x00404860\nMOV RBP,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV EDX,0x40a78f\nCALL 0x00404860\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,RBP\nMOV R8,RBX\nCALL 0x00401ae0\nXOR EDI,EDI\nMOV ESI,0x40a3c9\nMOV EDX,0x5\nCALL 0x00401860\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401ae0\nJMP 0x00402733\nXOR EDI,EDI\nMOV ESI,0x40a362\nMOV EDX,0x5\nCALL 0x00401860\nMOV RBX,RAX\nMOV RSI,qword ptr [R15 + 0x38]\nMOV EDI,0x4\nCALL 0x00404940\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401ae0\nJMP 0x004028f4\nXOR EDI,EDI\nMOV ESI,0x40a4f7\nMOV EDX,0x5\nCALL 0x00401860\nMOV R14,RAX\nMOVZX EBP,word ptr [R15 + 0x70]\nMOV RDX,qword ptr [R15 + 0x38]\nXOR EDI,EDI\nMOV ESI,0x3\nCALL 0x00404a20\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nMOV R9D,0x40a52f\nXOR EAX,EAX\nMOV RDX,R14\nMOV ECX,EBP\nMOV R8,RBX\nCALL 0x00401ae0\nCALL 0x00401770\n'
p1894
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 d4\n49 89 f7\n49 89 fe\n41 0f b7 47 70\nff c8\n0f b7 c0\n83 f8 0c\n0f 87 c6 03 00 00\nff 24 c5 38 a2 40 00\n41 0f b7 5f 70\n83 cb 02\n31 d2\n83 fb 06\n0f 94 c2\n41 b8 03 00 00 00\n45 31 c9\n4c 89 f7\n4c 89 fe\n4c 89 e1\ne8 d8 04 00 00\n89 c5\n83 fd 02\n0f 85 93 02 00 00\n0f b7 c3\n31 c9\n83 f8 06\n0f 94 c1\n4c 89 f7\n4c 89 fe\n4c 89 e2\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 a6 07 00 00\n41 80 7c 24 09 00\n0f 84 52 01 00 00\n49 83 7f 58 00\n0f 84 bc 01 00 00\n4c 8d 4c 24 0c\nba 01 00 00 00\n41 b8 02 00 00 00\n4c 89 f7\n4c 89 fe\n4c 89 e1\ne8 71 04 00 00\n89 c5\n83 fd 02\n75 27\n83 7c 24 0c 04\n75 20\nb9 01 00 00 00\n4c 89 f7\n4c 89 fe\n4c 89 e2\ne8 50 07 00 00\n89 c5\n4c 89 f7\n4c 89 fe\ne8 f3 03 00 00\n83 fd 02\n0f 85 5a 01 00 00\ne9 fb 01 00 00\n31 ff\nbe 28 a4 40 00\nba 05 00 00 00\ne8 f4 f1 ff ff\n48 89 c3\n49 8b 57 38\n31 ff\nbe 03 00 00 00\ne8 a1 23 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne9 9e 00 00 00\n41 80 7c 24 08 00\n0f 84 f5 fe ff ff\n49 83 7f 58 00\n0f 8e ea fe ff ff\n49 8b 47 78\n49 3b 46 18\n0f 84 dc fe ff ff\n4c 89 ff\ne8 53 03 00 00\n31 ff\nbe fa a3 40 00\nba 05 00 00 00\ne8 92 f1 ff ff\n48 89 c3\n49 8b 77 38\nbd 04 00 00 00\nbf 04 00 00 00\ne8 5c 22 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 eb f3 ff ff\ne9 5c 01 00 00\n41 8b 5f 40\n31 ff\nbe e2 a4 40 00\nba 05 00 00 00\ne8 51 f1 ff ff\n48 89 c5\n49 8b 57 38\n31 ff\nbe 03 00 00 00\ne8 fe 22 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 ad f3 ff ff\n4c 89 f7\n4c 89 fe\ne8 02 03 00 00\nbd 04 00 00 00\ne9 0e 01 00 00\n41 80 7c 24 0a 00\n74 15\n41 8b 7e 2c\n49 8b 77 30\ne8 43 02 00 00\n84 c0\n0f 85 91 fe ff ff\n41 80 7c 24 0a 00\nb8 27 00 00 00\nbb 15 00 00 00\n0f 45 d8\n31 ff\nbe 1b a3 40 00\nba 05 00 00 00\ne8 d7 f0 ff ff\n49 89 c4\n49 8b 77 38\nbd 04 00 00 00\nbf 04 00 00 00\ne8 a1 21 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n4c 89 e2\ne8 30 f3 ff ff\n4c 89 ff\ne8 58 02 00 00\ne9 8e 00 00 00\n49 8b 7f 30\ne8 8a 0d 00 00\n48 89 c7\ne8 92 02 00 00\n84 c0\n0f 84 91 00 00 00\n31 ff\nbe 2c a3 40 00\nba 05 00 00 00\ne8 79 f0 ff ff\n48 89 44 24 10\nbd 04 00 00 00\n31 ff\nbe 04 00 00 00\nba 60 a3 40 00\ne8 5e 20 00 00\n49 89 c5\nbf 01 00 00 00\nbe 04 00 00 00\nba 5f a3 40 00\ne8 47 20 00 00\n49 89 c4\n49 8b 57 38\nbf 02 00 00 00\nbe 04 00 00 00\ne8 31 20 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n48 8b 54 24 10\n4c 89 e9\n4d 89 e0\n49 89 d9\ne8 95 f2 ff ff\n4c 89 f7\n4c 89 fe\ne8 ea 01 00 00\n89 e8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 8b 44 24 10\n48 85 c0\n0f 84 8c fd ff ff\n49 8b 8f 80 00 00 00\n48 3b 08\n0f 85 7c fd ff ff\n49 8b 4f 78\n48 3b 48 08\n0f 85 6e fd ff ff\n49 8b 47 38\n80 38 2f\n75 06\n80 78 01 00\n74 79\n31 ff\nbe 8f a3 40 00\nba 05 00 00 00\ne8 ad ef ff ff\n49 89 c4\n49 8b 57 38\n31 ff\nbe 04 00 00 00\ne8 9a 1f 00 00\n48 89 c5\nbf 01 00 00 00\nbe 04 00 00 00\nba 8f a7 40 00\ne8 83 1f 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n48 89 e9\n49 89 d8\ne8 ec f1 ff ff\n31 ff\nbe c9 a3 40 00\nba 05 00 00 00\ne8 5b ef ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 ca f1 ff ff\ne9 18 fe ff ff\n31 ff\nbe 62 a3 40 00\nba 05 00 00 00\ne8 34 ef ff ff\n48 89 c3\n49 8b 77 38\nbf 04 00 00 00\ne8 03 20 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 92 f1 ff ff\neb a4\n31 ff\nbe f7 a4 40 00\nba 05 00 00 00\ne8 ff ee ff ff\n49 89 c6\n41 0f b7 6f 70\n49 8b 57 38\n31 ff\nbe 03 00 00 00\ne8 a7 20 00 00\n48 89 c3\n31 ff\n31 f6\n41 b9 2f a5 40 00\n31 c0\n4c 89 f2\n89 e9\n49 89 d8\ne8 4b f1 ff ff\ne8 d6 ed ff ff\n'
p1895
S'.text:0000000000402560\n.text:0000000000402561\n.text:0000000000402563\n.text:0000000000402565\n.text:0000000000402567\n.text:0000000000402569\n.text:000000000040256a\n.text:000000000040256e\n.text:0000000000402571\n.text:0000000000402574\n.text:0000000000402577\n.text:000000000040257c\n.text:000000000040257e\n.text:0000000000402581\n.text:0000000000402584\n.text:000000000040258a\n.text:0000000000402591\n.text:0000000000402596\n.text:0000000000402599\n.text:000000000040259b\n.text:000000000040259e\n.text:00000000004025a1\n.text:00000000004025a7\n.text:00000000004025aa\n.text:00000000004025ad\n.text:00000000004025b0\n.text:00000000004025b3\n.text:00000000004025b8\n.text:00000000004025ba\n.text:00000000004025bd\n.text:00000000004025c3\n.text:00000000004025c6\n.text:00000000004025c8\n.text:00000000004025cb\n.text:00000000004025ce\n.text:00000000004025d1\n.text:00000000004025d4\n.text:00000000004025d7\n.text:00000000004025db\n.text:00000000004025dc\n.text:00000000004025de\n.text:00000000004025e0\n.text:00000000004025e2\n.text:00000000004025e4\n.text:00000000004025e5\n.text:00000000004025ea\n.text:00000000004025f0\n.text:00000000004025f6\n.text:00000000004025fb\n.text:0000000000402601\n.text:0000000000402606\n.text:000000000040260b\n.text:0000000000402611\n.text:0000000000402614\n.text:0000000000402617\n.text:000000000040261a\n.text:000000000040261f\n.text:0000000000402621\n.text:0000000000402624\n.text:0000000000402626\n.text:000000000040262b\n.text:000000000040262d\n.text:0000000000402632\n.text:0000000000402635\n.text:0000000000402638\n.text:000000000040263b\n.text:0000000000402640\n.text:0000000000402642\n.text:0000000000402645\n.text:0000000000402648\n.text:000000000040264d\n.text:0000000000402650\n.text:0000000000402656\n.text:000000000040265b\n.text:000000000040265d\n.text:0000000000402662\n.text:0000000000402667\n.text:000000000040266c\n.text:000000000040266f\n.text:0000000000402673\n.text:0000000000402675\n.text:000000000040267a\n.text:000000000040267f\n.text:0000000000402682\n.text:0000000000402684\n.text:0000000000402686\n.text:0000000000402688\n.text:000000000040268b\n.text:0000000000402690\n.text:0000000000402696\n.text:000000000040269c\n.text:00000000004026a1\n.text:00000000004026a7\n.text:00000000004026ab\n.text:00000000004026af\n.text:00000000004026b5\n.text:00000000004026b8\n.text:00000000004026bd\n.text:00000000004026bf\n.text:00000000004026c4\n.text:00000000004026c9\n.text:00000000004026ce\n.text:00000000004026d1\n.text:00000000004026d5\n.text:00000000004026da\n.text:00000000004026df\n.text:00000000004026e4\n.text:00000000004026e7\n.text:00000000004026e9\n.text:00000000004026eb\n.text:00000000004026ed\n.text:00000000004026f0\n.text:00000000004026f5\n.text:00000000004026fa\n.text:00000000004026fe\n.text:0000000000402700\n.text:0000000000402705\n.text:000000000040270a\n.text:000000000040270f\n.text:0000000000402712\n.text:0000000000402716\n.text:0000000000402718\n.text:000000000040271d\n.text:0000000000402722\n.text:0000000000402725\n.text:0000000000402727\n.text:0000000000402729\n.text:000000000040272b\n.text:000000000040272e\n.text:0000000000402733\n.text:0000000000402736\n.text:0000000000402739\n.text:000000000040273e\n.text:0000000000402743\n.text:0000000000402748\n.text:000000000040274e\n.text:0000000000402750\n.text:0000000000402754\n.text:0000000000402758\n.text:000000000040275d\n.text:000000000040275f\n.text:0000000000402765\n.text:000000000040276b\n.text:0000000000402770\n.text:0000000000402775\n.text:0000000000402778\n.text:000000000040277a\n.text:000000000040277f\n.text:0000000000402784\n.text:0000000000402789\n.text:000000000040278c\n.text:0000000000402790\n.text:0000000000402795\n.text:000000000040279a\n.text:000000000040279f\n.text:00000000004027a2\n.text:00000000004027a4\n.text:00000000004027a6\n.text:00000000004027a8\n.text:00000000004027ab\n.text:00000000004027b0\n.text:00000000004027b3\n.text:00000000004027b8\n.text:00000000004027bd\n.text:00000000004027c1\n.text:00000000004027c6\n.text:00000000004027c9\n.text:00000000004027ce\n.text:00000000004027d0\n.text:00000000004027d6\n.text:00000000004027d8\n.text:00000000004027dd\n.text:00000000004027e2\n.text:00000000004027e7\n.text:00000000004027ec\n.text:00000000004027f1\n.text:00000000004027f3\n.text:00000000004027f8\n.text:00000000004027fd\n.text:0000000000402802\n.text:0000000000402805\n.text:000000000040280a\n.text:000000000040280f\n.text:0000000000402814\n.text:0000000000402819\n.text:000000000040281c\n.text:0000000000402820\n.text:0000000000402825\n.text:000000000040282a\n.text:000000000040282f\n.text:0000000000402832\n.text:0000000000402834\n.text:0000000000402836\n.text:0000000000402838\n.text:000000000040283d\n.text:0000000000402840\n.text:0000000000402843\n.text:0000000000402846\n.text:000000000040284b\n.text:000000000040284e\n.text:0000000000402851\n.text:0000000000402856\n.text:0000000000402858\n.text:000000000040285c\n.text:000000000040285d\n.text:000000000040285f\n.text:0000000000402861\n.text:0000000000402863\n.text:0000000000402865\n.text:0000000000402866\n.text:0000000000402867\n.text:000000000040286c\n.text:000000000040286f\n.text:0000000000402875\n.text:000000000040287c\n.text:000000000040287f\n.text:0000000000402885\n.text:0000000000402889\n.text:000000000040288d\n.text:0000000000402893\n.text:0000000000402897\n.text:000000000040289a\n.text:000000000040289c\n.text:00000000004028a0\n.text:00000000004028a2\n.text:00000000004028a4\n.text:00000000004028a9\n.text:00000000004028ae\n.text:00000000004028b3\n.text:00000000004028b6\n.text:00000000004028ba\n.text:00000000004028bc\n.text:00000000004028c1\n.text:00000000004028c6\n.text:00000000004028c9\n.text:00000000004028ce\n.text:00000000004028d3\n.text:00000000004028d8\n.text:00000000004028dd\n.text:00000000004028e0\n.text:00000000004028e2\n.text:00000000004028e4\n.text:00000000004028e6\n.text:00000000004028e9\n.text:00000000004028ec\n.text:00000000004028ef\n.text:00000000004028f4\n.text:00000000004028f6\n.text:00000000004028fb\n.text:0000000000402900\n.text:0000000000402905\n.text:0000000000402908\n.text:000000000040290a\n.text:000000000040290c\n.text:000000000040290e\n.text:0000000000402911\n.text:0000000000402916\n.text:000000000040291b\n.text:000000000040291d\n.text:0000000000402922\n.text:0000000000402927\n.text:000000000040292c\n.text:000000000040292f\n.text:0000000000402933\n.text:0000000000402938\n.text:000000000040293d\n.text:0000000000402940\n.text:0000000000402942\n.text:0000000000402944\n.text:0000000000402946\n.text:0000000000402949\n.text:000000000040294e\n.text:0000000000402950\n.text:0000000000402952\n.text:0000000000402957\n.text:000000000040295c\n.text:0000000000402961\n.text:0000000000402964\n.text:0000000000402969\n.text:000000000040296d\n.text:000000000040296f\n.text:0000000000402974\n.text:0000000000402979\n.text:000000000040297c\n.text:000000000040297e\n.text:0000000000402980\n.text:0000000000402986\n.text:0000000000402988\n.text:000000000040298b\n.text:000000000040298d\n.text:0000000000402990\n.text:0000000000402995\n'
p1896
tp1897
sS'cycle_check_init'
p1898
(S'\n__stdcall cycle_check_init(cycle_check_state * state)\n'
p1899
V\u000avoid cycle_check_init(cycle_check_state *state)\u000a\u000a{\u000a  state->chdir_counter = 0;\u000a  state->magic = 0x95f616;\u000a  return;\u000a}\u000a\u000a
p1900
S'MOV qword ptr [RDI + 0x10],0x0\nMOV dword ptr [RDI + 0x18],0x95f616\nRET\n'
p1901
S'48 c7 47 10 00 00 00 00\nc7 47 18 16 f6 95 00\nc3\n'
p1902
S'.text:00000000004079c0\n.text:00000000004079c8\n.text:00000000004079cf\n'
p1903
tp1904
sS'link_count_optimize_ok'
p1905
(S'\n__stdcall link_count_optimize_ok(FTSENT * p)\n'
p1906
V\u000a_Bool link_count_optimize_ok(FTSENT *p)\u000a\u000a{\u000a  FTS *pFVar1;\u000a  _Bool _Var2;\u000a  void *pvVar3;\u000a  __dev_t *entry;\u000a  __dev_t *p_Var4;\u000a  hash_table *table;\u000a  __dev_t local_38 [2];\u000a  \u000a  pFVar1 = p->fts_fts;\u000a  if ((*(byte *)((long)&pFVar1->fts_options + 1) & 2) == 0) {\u000a    _Var2 = false;\u000a  }\u000a  else {\u000a    table = pFVar1->fts_leaf_optimization_works_ht;\u000a    if (table == (hash_table *)0x0) {\u000a      table = (hash_table *)hash_initialize(0xd,(Hash_tuning *)0x0,LCO_hash,LCO_compare,free);\u000a      pFVar1->fts_leaf_optimization_works_ht = table;\u000a      if (table == (hash_table *)0x0) {\u000a        return false;\u000a      }\u000a    }\u000a    local_38[0] = p->fts_statp[0].st_dev;\u000a    pvVar3 = hash_lookup((Hash_table *)table,local_38);\u000a    if (pvVar3 == (void *)0x0) {\u000a      entry = (__dev_t *)malloc(0x10);\u000a      if (entry == (__dev_t *)0x0) {\u000a        _Var2 = false;\u000a      }\u000a      else {\u000a        _Var2 = leaf_optimization_applies();\u000a        *(_Bool *)(entry + 1) = _Var2;\u000a        *entry = p->fts_statp[0].st_dev;\u000a        p_Var4 = (__dev_t *)hash_insert((Hash_table *)table,entry);\u000a        if (p_Var4 == (__dev_t *)0x0) {\u000a          free(entry);\u000a          _Var2 = false;\u000a        }\u000a        else {\u000a          if (p_Var4 != entry) {\u000a                    /* WARNING: Subroutine does not return */\u000a            abort();\u000a          }\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      _Var2 = (_Bool)(*(char *)((long)pvVar3 + 8) != 0);\u000a    }\u000a  }\u000a  return _Var2;\u000a}\u000a\u000a
p1907
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RDI\nMOV RBX,qword ptr [R14 + 0x50]\nTEST byte ptr [RBX + 0x49],0x2\nJNZ 0x0040726f\nXOR R15D,R15D\nJMP 0x004072c3\nMOV R13,qword ptr [RBX + 0x50]\nTEST R13,R13\nJNZ 0x004072a3\nXOR R15D,R15D\nMOV EDI,0xd\nXOR ESI,ESI\nMOV EDX,0x4075b0\nMOV ECX,0x4075c0\nMOV R8D,0x401760\nCALL 0x00407f60\nMOV R13,RAX\nMOV qword ptr [RBX + 0x50],R13\nTEST R13,R13\nJZ 0x004072c3\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [RSP],RAX\nMOV RSI,RSP\nMOV RDI,R13\nCALL 0x00407cf0\nTEST RAX,RAX\nJZ 0x004072d4\nCMP byte ptr [RAX + 0x8],0x0\nSETNZ R15B\nMOV EAX,R15D\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV EDI,0x10\nCALL 0x00401a20\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00407318\nMOV EDI,dword ptr [RBX + 0x2c]\nCALL 0x004075d0\nMOV R15B,AL\nMOV byte ptr [R12 + 0x8],R15B\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [R12],RAX\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x00408830\nTEST RAX,RAX\nJZ 0x0040731d\nCMP RAX,R12\nJZ 0x004072c3\nCALL 0x00401770\nXOR R15D,R15D\nJMP 0x004072c3\nMOV RDI,R12\nCALL 0x00401760\nXOR R15D,R15D\nJMP 0x004072c3\n'
p1908
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 10\n49 89 fe\n49 8b 5e 50\nf6 43 49 02\n75 05\n45 31 ff\neb 54\n4c 8b 6b 50\n4d 85 ed\n75 2b\n45 31 ff\nbf 0d 00 00 00\n31 f6\nba b0 75 40 00\nb9 c0 75 40 00\n41 b8 60 17 40 00\ne8 c9 0c 00 00\n49 89 c5\n4c 89 6b 50\n4d 85 ed\n74 20\n49 8b 46 78\n48 89 04 24\n48 89 e6\n4c 89 ef\ne8 3a 0a 00 00\n48 85 c0\n74 19\n80 78 08 00\n41 0f 95 c7\n44 89 f8\n48 83 c4 10\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\nbf 10 00 00 00\ne8 42 a7 ff ff\n49 89 c4\n4d 85 e4\n74 32\n8b 7b 2c\ne8 e2 02 00 00\n41 88 c7\n45 88 7c 24 08\n49 8b 46 78\n49 89 04 24\n4c 89 ef\n4c 89 e6\ne8 27 15 00 00\n48 85 c0\n74 0f\n4c 39 e0\n74 b0\ne8 58 a4 ff ff\n45 31 ff\neb a6\n4c 89 e7\ne8 3b a4 ff ff\n45 31 ff\neb 99\n'
p1909
S'.text:0000000000407250\n.text:0000000000407252\n.text:0000000000407254\n.text:0000000000407256\n.text:0000000000407258\n.text:0000000000407259\n.text:000000000040725d\n.text:0000000000407260\n.text:0000000000407264\n.text:0000000000407268\n.text:000000000040726a\n.text:000000000040726d\n.text:000000000040726f\n.text:0000000000407273\n.text:0000000000407276\n.text:0000000000407278\n.text:000000000040727b\n.text:0000000000407280\n.text:0000000000407282\n.text:0000000000407287\n.text:000000000040728c\n.text:0000000000407292\n.text:0000000000407297\n.text:000000000040729a\n.text:000000000040729e\n.text:00000000004072a1\n.text:00000000004072a3\n.text:00000000004072a7\n.text:00000000004072ab\n.text:00000000004072ae\n.text:00000000004072b1\n.text:00000000004072b6\n.text:00000000004072b9\n.text:00000000004072bb\n.text:00000000004072bf\n.text:00000000004072c3\n.text:00000000004072c6\n.text:00000000004072ca\n.text:00000000004072cb\n.text:00000000004072cd\n.text:00000000004072cf\n.text:00000000004072d1\n.text:00000000004072d3\n.text:00000000004072d4\n.text:00000000004072d9\n.text:00000000004072de\n.text:00000000004072e1\n.text:00000000004072e4\n.text:00000000004072e6\n.text:00000000004072e9\n.text:00000000004072ee\n.text:00000000004072f1\n.text:00000000004072f6\n.text:00000000004072fa\n.text:00000000004072fe\n.text:0000000000407301\n.text:0000000000407304\n.text:0000000000407309\n.text:000000000040730c\n.text:000000000040730e\n.text:0000000000407311\n.text:0000000000407313\n.text:0000000000407318\n.text:000000000040731b\n.text:000000000040731d\n.text:0000000000407320\n.text:0000000000407325\n.text:0000000000407328\n'
p1910
tp1911
sS'priv_set_restore_linkdir'
p1912
(S'\n__stdcall priv_set_restore_linkdir()\n'
p1913
V\u000aint priv_set_restore_linkdir(void)\u000a\u000a{\u000a  return -1;\u000a}\u000a\u000a
p1914
S'MOV EAX,0xffffffff\nRET\n'
p1915
S'b8 ff ff ff ff\nc3\n'
p1916
S'.text:0000000000403660\n.text:0000000000403665\n'
p1917
tp1918
sS'getline'
p1919
(S'\n__stdcall getline(char * * __lineptr, size_t * __n, FILE * __stream)\n'
p1920
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__ssize_t getline(char **__lineptr,size_t *__n,FILE *__stream)\u000a\u000a{\u000a  __ssize_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getline_0060e218)();\u000a  return _Var1;\u000a}\u000a\u000a
p1921
S'JMP qword ptr [0x0060e218]\n'
p1922
S'ff 25 c2 c6 20 00\n'
p1923
S'.plt:0000000000401b50\n'
p1924
tp1925
sS'strcaseeq0'
p1926
(S'\n__stdcall strcaseeq0()\n'
p1927
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1928
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407890\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404c65\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404c6c\nJMP 0x00404ca0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404ca0\nTEST BPL,BPL\nJZ 0x00404c9b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404cb0\nJMP 0x00404ca0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1929
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 3d 2c 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1930
S'.text:0000000000404c30\n.text:0000000000404c31\n.text:0000000000404c33\n.text:0000000000404c35\n.text:0000000000404c37\n.text:0000000000404c39\n.text:0000000000404c3a\n.text:0000000000404c3b\n.text:0000000000404c3e\n.text:0000000000404c41\n.text:0000000000404c44\n.text:0000000000404c47\n.text:0000000000404c49\n.text:0000000000404c4c\n.text:0000000000404c4e\n.text:0000000000404c53\n.text:0000000000404c56\n.text:0000000000404c58\n.text:0000000000404c5a\n.text:0000000000404c5d\n.text:0000000000404c5f\n.text:0000000000404c61\n.text:0000000000404c63\n.text:0000000000404c65\n.text:0000000000404c67\n.text:0000000000404c6a\n.text:0000000000404c6c\n.text:0000000000404c6f\n.text:0000000000404c71\n.text:0000000000404c75\n.text:0000000000404c7a\n.text:0000000000404c7d\n.text:0000000000404c81\n.text:0000000000404c85\n.text:0000000000404c89\n.text:0000000000404c8d\n.text:0000000000404c91\n.text:0000000000404c94\n.text:0000000000404c99\n.text:0000000000404c9b\n.text:0000000000404ca0\n.text:0000000000404ca4\n.text:0000000000404ca5\n.text:0000000000404ca7\n.text:0000000000404ca9\n.text:0000000000404cab\n.text:0000000000404cad\n.text:0000000000404cae\n'
p1931
tp1932
sS'strcaseeq2'
p1933
(S'\n__stdcall strcaseeq2()\n'
p1934
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1935
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407890\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404d76\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404d7d\nJMP 0x00404daa\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404daa\nTEST BPL,BPL\nJZ 0x00404da5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404dc0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1936
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 2d 2b 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1937
S'.text:0000000000404d40\n.text:0000000000404d41\n.text:0000000000404d43\n.text:0000000000404d45\n.text:0000000000404d47\n.text:0000000000404d49\n.text:0000000000404d4a\n.text:0000000000404d4b\n.text:0000000000404d4e\n.text:0000000000404d51\n.text:0000000000404d54\n.text:0000000000404d57\n.text:0000000000404d59\n.text:0000000000404d5c\n.text:0000000000404d5e\n.text:0000000000404d63\n.text:0000000000404d67\n.text:0000000000404d69\n.text:0000000000404d6b\n.text:0000000000404d6e\n.text:0000000000404d70\n.text:0000000000404d72\n.text:0000000000404d74\n.text:0000000000404d76\n.text:0000000000404d78\n.text:0000000000404d7b\n.text:0000000000404d7d\n.text:0000000000404d80\n.text:0000000000404d82\n.text:0000000000404d86\n.text:0000000000404d8a\n.text:0000000000404d8e\n.text:0000000000404d92\n.text:0000000000404d95\n.text:0000000000404d99\n.text:0000000000404d9a\n.text:0000000000404d9c\n.text:0000000000404d9e\n.text:0000000000404da0\n.text:0000000000404da2\n.text:0000000000404da3\n.text:0000000000404da5\n.text:0000000000404daa\n.text:0000000000404dae\n.text:0000000000404daf\n.text:0000000000404db1\n.text:0000000000404db3\n.text:0000000000404db5\n.text:0000000000404db7\n.text:0000000000404db8\n'
p1938
tp1939
sS'hash_table_ok'
p1940
(S'\n__stdcall hash_table_ok(Hash_table * table)\n'
p1941
V\u000a_Bool hash_table_ok(Hash_table *table)\u000a\u000a{\u000a  hash_entry **pphVar1;\u000a  undefined uVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  hash_entry *phVar5;\u000a  hash_entry *phVar6;\u000a  \u000a  phVar6 = table->bucket;\u000a  if (phVar6 < table->bucket_limit) {\u000a    sVar4 = 0;\u000a    sVar3 = 0;\u000a    do {\u000a      phVar5 = phVar6;\u000a      if (phVar6->data != (void *)0x0) {\u000a        do {\u000a          sVar4 = sVar4 + 1;\u000a          pphVar1 = &phVar5->next;\u000a          phVar5 = *pphVar1;\u000a        } while (*pphVar1 != (hash_entry *)0x0);\u000a        sVar3 = sVar3 + 1;\u000a      }\u000a      phVar6 = phVar6 + 1;\u000a    } while (phVar6 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    sVar4 = 0;\u000a  }\u000a  if ((sVar3 != table->n_buckets_used) || (uVar2 = 1, sVar4 != table->n_entries)) {\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p1942
S'MOV RSI,qword ptr [RDI]\nCMP RSI,qword ptr [RDI + 0x8]\nJNC 0x00407bea\nMOV R8,qword ptr [RDI + 0x8]\nXOR ECX,ECX\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RSI],0x0\nJZ 0x00407bdf\nMOV RDX,RSI\nNOP dword ptr [RAX]\nINC RCX\nMOV RDX,qword ptr [RDX + 0x8]\nTEST RDX,RDX\nJNZ 0x00407bd0\nINC RAX\nADD RSI,0x10\nCMP RSI,R8\nJC 0x00407bc0\nJMP 0x00407bee\nXOR EAX,EAX\nXOR ECX,ECX\nCMP RAX,qword ptr [RDI + 0x18]\nJNZ 0x00407bfc\nMOV AL,0x1\nCMP RCX,qword ptr [RDI + 0x20]\nJZ 0x00407bfe\nXOR EAX,EAX\nRET\n'
p1943
S'48 8b 37\n48 3b 77 08\n73 41\n4c 8b 47 08\n31 c9\n31 c0\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 83 3e 00\n74 19\n48 89 f2\n0f 1f 80 00 00 00 00\n48 ff c1\n48 8b 52 08\n48 85 d2\n75 f4\n48 ff c0\n48 83 c6 10\n4c 39 c6\n72 d8\neb 04\n31 c0\n31 c9\n48 3b 47 18\n75 08\nb0 01\n48 3b 4f 20\n74 02\n31 c0\nc3\n'
p1944
S'.text:0000000000407ba0\n.text:0000000000407ba3\n.text:0000000000407ba7\n.text:0000000000407ba9\n.text:0000000000407bad\n.text:0000000000407baf\n.text:0000000000407bb1\n.text:0000000000407bc0\n.text:0000000000407bc4\n.text:0000000000407bc6\n.text:0000000000407bc9\n.text:0000000000407bd0\n.text:0000000000407bd3\n.text:0000000000407bd7\n.text:0000000000407bda\n.text:0000000000407bdc\n.text:0000000000407bdf\n.text:0000000000407be3\n.text:0000000000407be6\n.text:0000000000407be8\n.text:0000000000407bea\n.text:0000000000407bec\n.text:0000000000407bee\n.text:0000000000407bf2\n.text:0000000000407bf4\n.text:0000000000407bf6\n.text:0000000000407bfa\n.text:0000000000407bfc\n.text:0000000000407bfe\n'
p1945
tp1946
sS'strcaseeq1'
p1947
(S'\n__stdcall strcaseeq1()\n'
p1948
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1949
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00407890\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x00404ced\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404cf4\nJMP 0x00404d27\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404d27\nTEST BPL,BPL\nJZ 0x00404d22\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404d40\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1950
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 b6 2b 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1951
S'.text:0000000000404cb0\n.text:0000000000404cb1\n.text:0000000000404cb3\n.text:0000000000404cb5\n.text:0000000000404cb7\n.text:0000000000404cb9\n.text:0000000000404cba\n.text:0000000000404cbb\n.text:0000000000404cc0\n.text:0000000000404cc3\n.text:0000000000404cc6\n.text:0000000000404cc9\n.text:0000000000404ccb\n.text:0000000000404cce\n.text:0000000000404cd3\n.text:0000000000404cd5\n.text:0000000000404cda\n.text:0000000000404cde\n.text:0000000000404ce0\n.text:0000000000404ce2\n.text:0000000000404ce5\n.text:0000000000404ce7\n.text:0000000000404ce9\n.text:0000000000404ceb\n.text:0000000000404ced\n.text:0000000000404cef\n.text:0000000000404cf2\n.text:0000000000404cf4\n.text:0000000000404cf7\n.text:0000000000404cf9\n.text:0000000000404cfd\n.text:0000000000404d01\n.text:0000000000404d05\n.text:0000000000404d0b\n.text:0000000000404d0f\n.text:0000000000404d12\n.text:0000000000404d16\n.text:0000000000404d17\n.text:0000000000404d19\n.text:0000000000404d1b\n.text:0000000000404d1d\n.text:0000000000404d1f\n.text:0000000000404d20\n.text:0000000000404d22\n.text:0000000000404d27\n.text:0000000000404d2b\n.text:0000000000404d2c\n.text:0000000000404d2e\n.text:0000000000404d30\n.text:0000000000404d32\n.text:0000000000404d34\n.text:0000000000404d35\n'
p1952
tp1953
sS'strcaseeq4'
p1954
(S'\n__stdcall strcaseeq4()\n'
p1955
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1956
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407890\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00404e5c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404e63\nJMP 0x00404e84\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404e84\nTEST BPL,BPL\nJZ 0x00404e7f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404e90\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1957
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 47 2a 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1958
S'.text:0000000000404e30\n.text:0000000000404e31\n.text:0000000000404e33\n.text:0000000000404e35\n.text:0000000000404e36\n.text:0000000000404e37\n.text:0000000000404e3a\n.text:0000000000404e3d\n.text:0000000000404e3f\n.text:0000000000404e42\n.text:0000000000404e44\n.text:0000000000404e49\n.text:0000000000404e4d\n.text:0000000000404e4f\n.text:0000000000404e51\n.text:0000000000404e54\n.text:0000000000404e56\n.text:0000000000404e58\n.text:0000000000404e5a\n.text:0000000000404e5c\n.text:0000000000404e5e\n.text:0000000000404e61\n.text:0000000000404e63\n.text:0000000000404e66\n.text:0000000000404e68\n.text:0000000000404e6c\n.text:0000000000404e70\n.text:0000000000404e73\n.text:0000000000404e77\n.text:0000000000404e78\n.text:0000000000404e7a\n.text:0000000000404e7c\n.text:0000000000404e7d\n.text:0000000000404e7f\n.text:0000000000404e84\n.text:0000000000404e88\n.text:0000000000404e89\n.text:0000000000404e8b\n.text:0000000000404e8d\n.text:0000000000404e8e\n'
p1959
tp1960
sS'strcaseeq3'
p1961
(S'\n__stdcall strcaseeq3()\n'
p1962
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1963
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407890\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404df0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404df7\nJMP 0x00404e1a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404e1a\nTEST BPL,BPL\nJZ 0x00404e15\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404e30\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1964
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 b3 2a 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1965
S'.text:0000000000404dc0\n.text:0000000000404dc1\n.text:0000000000404dc3\n.text:0000000000404dc5\n.text:0000000000404dc7\n.text:0000000000404dc8\n.text:0000000000404dcb\n.text:0000000000404dce\n.text:0000000000404dd1\n.text:0000000000404dd3\n.text:0000000000404dd6\n.text:0000000000404dd8\n.text:0000000000404ddd\n.text:0000000000404de1\n.text:0000000000404de3\n.text:0000000000404de5\n.text:0000000000404de8\n.text:0000000000404dea\n.text:0000000000404dec\n.text:0000000000404dee\n.text:0000000000404df0\n.text:0000000000404df2\n.text:0000000000404df5\n.text:0000000000404df7\n.text:0000000000404dfa\n.text:0000000000404dfc\n.text:0000000000404e00\n.text:0000000000404e04\n.text:0000000000404e08\n.text:0000000000404e0b\n.text:0000000000404e0c\n.text:0000000000404e0e\n.text:0000000000404e10\n.text:0000000000404e12\n.text:0000000000404e13\n.text:0000000000404e15\n.text:0000000000404e1a\n.text:0000000000404e1b\n.text:0000000000404e1d\n.text:0000000000404e1f\n.text:0000000000404e21\n.text:0000000000404e22\n'
p1966
tp1967
sS'last_component'
p1968
(S'\n__stdcall last_component(char * name)\n'
p1969
V\u000achar * last_component(char *name)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  char *pcVar3;\u000a  \u000a  name = name + -1;\u000a  do {\u000a    pcVar3 = name + 1;\u000a    name = name + 1;\u000a  } while (*pcVar3 == '/');\u000a  bVar2 = false;\u000a  pcVar3 = name;\u000a  do {\u000a    bVar1 = true;\u000a    if (*name != '/') {\u000a      if (*name == 0) {\u000a        return pcVar3;\u000a      }\u000a      bVar1 = bVar2;\u000a      if (bVar2) {\u000a        pcVar3 = name;\u000a        bVar1 = false;\u000a      }\u000a    }\u000a    bVar2 = bVar1;\u000a    name = name + 1;\u000a  } while( true );\u000a}\u000a\u000a
p1970
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x00403560\nXOR ESI,ESI\nMOV RAX,RDI\nJMP 0x00403586\nINC RAX\nMOV SIL,DL\nMOVZX ECX,byte ptr [RAX]\nMOV DL,0x1\nCMP CL,0x2f\nJZ 0x00403580\nTEST CL,CL\nJZ 0x004035a7\nMOV EDX,ESI\nAND DL,0x1\nJZ 0x0040359d\nXOR ESI,ESI\nTEST DL,DL\nCMOVNZ RDI,RAX\nMOV EDX,ESI\nJMP 0x00403580\nMOV RAX,RDI\nRET\n'
p1971
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n31 f6\n48 89 f8\neb 15\n48 ff c0\n40 88 d6\n0f b6 08\nb2 01\n80 f9 2f\n74 f0\n84 c9\n74 13\n89 f2\n80 e2 01\n74 02\n31 f6\n84 d2\n48 0f 45 f8\n89 f2\neb d9\n48 89 f8\nc3\n'
p1972
S'.text:0000000000403550\n.text:0000000000403553\n.text:0000000000403560\n.text:0000000000403564\n.text:0000000000403568\n.text:000000000040356a\n.text:000000000040356c\n.text:000000000040356f\n.text:0000000000403580\n.text:0000000000403583\n.text:0000000000403586\n.text:0000000000403589\n.text:000000000040358b\n.text:000000000040358e\n.text:0000000000403590\n.text:0000000000403592\n.text:0000000000403594\n.text:0000000000403596\n.text:0000000000403599\n.text:000000000040359b\n.text:000000000040359d\n.text:000000000040359f\n.text:00000000004035a3\n.text:00000000004035a5\n.text:00000000004035a7\n.text:00000000004035aa\n'
p1973
tp1974
sS'register_tm_clones'
p1975
(S'\n__stdcall register_tm_clones()\n'
p1976
V\u000a/* WARNING: Removing unreachable block (ram,0x00401c53) */\u000a/* WARNING: Removing unreachable block (ram,0x00401c5d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1977
S'MOV ESI,0x60e2d0\nPUSH RBP\nSUB RSI,0x60e2d0\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401c68\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401c68\nPOP RBP\nMOV EDI,0x60e2d0\nJMP RAX\nPOP RBP\nRET\n'
p1978
S'be d0 e2 60 00\n55\n48 81 ee d0 e2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf d0 e2 60 00\nff e0\n5d\nc3\n'
p1979
S'.text:0000000000401c30\n.text:0000000000401c35\n.text:0000000000401c36\n.text:0000000000401c3d\n.text:0000000000401c41\n.text:0000000000401c44\n.text:0000000000401c47\n.text:0000000000401c4b\n.text:0000000000401c4e\n.text:0000000000401c51\n.text:0000000000401c53\n.text:0000000000401c58\n.text:0000000000401c5b\n.text:0000000000401c5d\n.text:0000000000401c5e\n.text:0000000000401c63\n.text:0000000000401c68\n.text:0000000000401c69\n'
p1980
tp1981
sS'qsort'
p1982
(S'\n__stdcall qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)\n'
p1983
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\u000a\u000a{\u000a  (*(code *)PTR_qsort_0060e068)();\u000a  return;\u000a}\u000a\u000a
p1984
S'JMP qword ptr [0x0060e068]\n'
p1985
S'ff 25 72 c8 20 00\n'
p1986
S'.plt:00000000004017f0\n'
p1987
tp1988
sS'mark_ancestor_dirs'
p1989
(S'\n__stdcall mark_ancestor_dirs(FTSENT * ent)\n'
p1990
V\u000avoid mark_ancestor_dirs(FTSENT *ent)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  long lVar2;\u000a  \u000a  p_Var1 = ent->fts_parent;\u000a  lVar2 = p_Var1->fts_level;\u000a  while ((-1 < lVar2 && (p_Var1->fts_number == 0))) {\u000a    p_Var1->fts_number = 1;\u000a    p_Var1 = p_Var1->fts_parent;\u000a    lVar2 = p_Var1->fts_level;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1991
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP qword ptr [RAX + 0x58],0x0\nJNS 0x00402a33\nJMP 0x00402a3a\nMOV qword ptr [RAX + 0x20],0x1\nMOV RAX,qword ptr [RAX + 0x8]\nCMP qword ptr [RAX + 0x58],0x0\nJS 0x00402a3a\nCMP qword ptr [RAX + 0x20],0x0\nJZ 0x00402a20\nRET\n'
p1992
S'48 8b 47 08\n48 83 78 58 00\n79 18\neb 1d\n48 c7 40 20 01 00 00 00\n48 8b 40 08\n48 83 78 58 00\n78 07\n48 83 78 20 00\n74 e6\nc3\n'
p1993
S'.text:0000000000402a10\n.text:0000000000402a14\n.text:0000000000402a19\n.text:0000000000402a1b\n.text:0000000000402a20\n.text:0000000000402a28\n.text:0000000000402a2c\n.text:0000000000402a31\n.text:0000000000402a33\n.text:0000000000402a38\n.text:0000000000402a3a\n'
p1994
tp1995
sS'c_islower'
p1996
(S'\n__stdcall c_islower()\n'
p1997
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1998
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1999
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p2000
S'.text:0000000000407830\n.text:0000000000407833\n.text:0000000000407836\n.text:0000000000407839\n'
p2001
tp2002
sS'fstatat'
p2003
(S'\n__stdcall fstatat(int __fd, char * __file, stat * __buf, int __flag)\n'
p2004
V\u000aint fstatat(int __fd,char *__file,stat *__buf,int __flag)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstatat_0060e0d8)(1,(ulong)(uint)__fd,__file,__buf,(ulong)(uint)__flag);\u000a  return iVar1;\u000a}\u000a\u000a
p2005
S'MOV R8D,ECX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x004018d0\n'
p2006
S'41 89 c8\n48 89 d1\n48 89 f2\n89 fe\nbf 01 00 00 00\ne9 db 84 ff ff\n'
p2007
S'.text:00000000004093e0\n.text:00000000004093e3\n.text:00000000004093e6\n.text:00000000004093e9\n.text:00000000004093eb\n.text:00000000004093f0\n'
p2008
tp2009
sS'argmatch'
p2010
(S'\n__stdcall argmatch(char * arg, char * * arglist, char * vallist, size_t valsize)\n'
p2011
V\u000aptrdiff_t argmatch(char *arg,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  size_t __n;\u000a  size_t sVar4;\u000a  long lVar5;\u000a  ptrdiff_t pVar6;\u000a  char *__s2;\u000a  char *__s1;\u000a  long local_50;\u000a  \u000a  __n = strlen(arg);\u000a  __s1 = *arglist;\u000a  if (__s1 == (char *)0x0) {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a    lVar5 = 0;\u000a    __s2 = vallist;\u000a    do {\u000a      iVar3 = strncmp(__s1,arg,__n);\u000a      lVar2 = local_50;\u000a      if (iVar3 == 0) {\u000a        sVar4 = strlen(__s1);\u000a        if (sVar4 == __n) {\u000a          return lVar5;\u000a        }\u000a        lVar2 = lVar5;\u000a        if ((local_50 != -1) &&\u000a           ((vallist == (char *)0x0 ||\u000a            (iVar3 = memcmp(vallist + local_50 * valsize,__s2,valsize), lVar2 = local_50, iVar3 != 0\u000a            )))) {\u000a          bVar1 = true;\u000a          lVar2 = local_50;\u000a        }\u000a      }\u000a      local_50 = lVar2;\u000a      __s1 = arglist[lVar5 + 1];\u000a      lVar5 = lVar5 + 1;\u000a      __s2 = __s2 + valsize;\u000a    } while (__s1 != (char *)0x0);\u000a  }\u000a  pVar6 = -2;\u000a  if (!bVar1) {\u000a    pVar6 = local_50;\u000a  }\u000a  return pVar6;\u000a}\u000a\u000a
p2012
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x00401880\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x20],RBP\nMOV R15,qword ptr [RBP]\nTEST R15,R15\nJZ 0x00403117\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R14\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00401790\nTEST EAX,EAX\nJNZ 0x00403100\nMOV RDI,R15\nCALL 0x00401880\nCMP RAX,RBX\nJZ 0x00403139\nCMP qword ptr [RSP + 0x8],-0x1\nJZ 0x004030f5\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x004030ec\nMOV RDI,qword ptr [RSP + 0x8]\nIMUL RDI,R13\nADD RDI,RAX\nMOV RSI,R14\nMOV RDX,R13\nCALL 0x00401960\nTEST EAX,EAX\nJZ 0x00403100\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00403100\nMOV qword ptr [RSP + 0x8],RBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RAX + RBP*0x8 + 0x8]\nINC RBP\nADD R14,R13\nTEST R15,R15\nJNZ 0x004030a0\nJMP 0x00403127\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nTEST byte ptr [RSP + 0x10],0x1\nMOV RBP,-0x2\nCMOVZ RBP,qword ptr [RSP + 0x8]\nMOV RAX,RBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2013
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d6\n48 89 f5\n49 89 fc\ne8 11 e8 ff ff\n48 89 c3\n48 89 6c 24 20\n4c 8b 7d 00\n4d 85 ff\n0f 84 93 00 00 00\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\n4c 89 74 24 18\n31 ed\n0f 1f 44 00 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 e2 e6 ff ff\n85 c0\n75 4e\n4c 89 ff\ne8 c6 e7 ff ff\n48 39 d8\n74 7a\n48 83 7c 24 08 ff\n74 2e\n48 8b 44 24 18\n48 85 c0\n74 1b\n48 8b 7c 24 08\n49 0f af fd\n48 01 c7\n4c 89 f6\n4c 89 ea\ne8 78 e8 ff ff\n85 c0\n74 14\nb0 01\n48 89 44 24 10\neb 0b\n48 89 6c 24 08\n66 0f 1f 44 00 00\n48 8b 44 24 20\n4c 8b 7c e8 08\n48 ff c5\n4d 01 ee\n4d 85 ff\n75 8b\neb 10\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\nf6 44 24 10 01\n48 c7 c5 fe ff ff ff\n48 0f 44 6c 24 08\n48 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p2014
S'.text:0000000000403050\n.text:0000000000403051\n.text:0000000000403053\n.text:0000000000403055\n.text:0000000000403057\n.text:0000000000403059\n.text:000000000040305a\n.text:000000000040305e\n.text:0000000000403061\n.text:0000000000403064\n.text:0000000000403067\n.text:000000000040306a\n.text:000000000040306f\n.text:0000000000403072\n.text:0000000000403077\n.text:000000000040307b\n.text:000000000040307e\n.text:0000000000403084\n.text:000000000040308d\n.text:000000000040308f\n.text:0000000000403094\n.text:0000000000403099\n.text:000000000040309b\n.text:00000000004030a0\n.text:00000000004030a3\n.text:00000000004030a6\n.text:00000000004030a9\n.text:00000000004030ae\n.text:00000000004030b0\n.text:00000000004030b2\n.text:00000000004030b5\n.text:00000000004030ba\n.text:00000000004030bd\n.text:00000000004030bf\n.text:00000000004030c5\n.text:00000000004030c7\n.text:00000000004030cc\n.text:00000000004030cf\n.text:00000000004030d1\n.text:00000000004030d6\n.text:00000000004030da\n.text:00000000004030dd\n.text:00000000004030e0\n.text:00000000004030e3\n.text:00000000004030e8\n.text:00000000004030ea\n.text:00000000004030ec\n.text:00000000004030ee\n.text:00000000004030f3\n.text:00000000004030f5\n.text:00000000004030fa\n.text:0000000000403100\n.text:0000000000403105\n.text:000000000040310a\n.text:000000000040310d\n.text:0000000000403110\n.text:0000000000403113\n.text:0000000000403115\n.text:0000000000403117\n.text:0000000000403120\n.text:0000000000403122\n.text:0000000000403127\n.text:000000000040312c\n.text:0000000000403133\n.text:0000000000403139\n.text:000000000040313c\n.text:0000000000403140\n.text:0000000000403141\n.text:0000000000403143\n.text:0000000000403145\n.text:0000000000403147\n.text:0000000000403149\n.text:000000000040314a\n'
p2015
tp2016
sS'fwrite'
p2017
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p2018
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060e228)();\u000a  return sVar1;\u000a}\u000a\u000a
p2019
S'JMP qword ptr [0x0060e228]\n'
p2020
S'ff 25 b2 c6 20 00\n'
p2021
S'.plt:0000000000401b70\n'
p2022
tp2023
sS'rotl_sz'
p2024
(S'\n__stdcall rotl_sz(size_t x)\n'
p2025
V\u000asize_t rotl_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p2026
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p2027
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p2028
S'.text:0000000000409260\n.text:0000000000409262\n.text:0000000000409265\n.text:0000000000409268\n'
p2029
tp2030
sS'__do_global_dtors_aux'
p2031
(S'\n__stdcall __do_global_dtors_aux()\n'
p2032
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p2033
S'CMP byte ptr [0x0060e328],0x0\nJNZ 0x00401c8a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401bf0\nPOP RBP\nMOV byte ptr [0x0060e328],0x1\nRET\n'
p2034
S'80 3d b1 c6 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 9e c6 20 00 01\nf3 c3\n'
p2035
S'.text:0000000000401c70\n.text:0000000000401c77\n.text:0000000000401c79\n.text:0000000000401c7a\n.text:0000000000401c7d\n.text:0000000000401c82\n.text:0000000000401c83\n.text:0000000000401c8a\n'
p2036
tp2037
sS'c_isprint'
p2038
(S'\n__stdcall c_isprint()\n'
p2039
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p2040
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p2041
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p2042
S'.text:0000000000407840\n.text:0000000000407843\n.text:0000000000407846\n.text:0000000000407849\n'
p2043
tp2044
sS'_fini'
p2045
(S'\n__stdcall _fini()\n'
p2046
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p2047
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p2048
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p2049
S'.fini:00000000004093f8\n.fini:00000000004093fc\n.fini:0000000000409400\n'
p2050
tp2051
sS'fd_ring_clear'
p2052
(S'\n__stdcall fd_ring_clear(I_ring * fd_ring)\n'
p2053
V\u000avoid fd_ring_clear(I_ring *fd_ring)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int __fd;\u000a  \u000a  while (_Var1 = i_ring_empty(fd_ring), _Var1 == false) {\u000a    __fd = i_ring_pop(fd_ring);\u000a    if (-1 < __fd) {\u000a      close(__fd);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p2054
S'PUSH RBX\nMOV RBX,RDI\nJMP 0x00406257\nMOV EDI,EAX\nCALL 0x00401940\nMOV RDI,RBX\nCALL 0x00408b00\nTEST AL,AL\nJNZ 0x00406271\nMOV RDI,RBX\nCALL 0x00408b50\nTEST EAX,EAX\nJNS 0x00406250\nJMP 0x00406257\nPOP RBX\nRET\n'
p2055
S'53\n48 89 fb\neb 11\n89 c7\ne8 e9 b6 ff ff\n48 89 df\ne8 a1 28 00 00\n84 c0\n75 0e\n48 89 df\ne8 e5 28 00 00\n85 c0\n79 e1\neb e6\n5b\nc3\n'
p2056
S'.text:0000000000406240\n.text:0000000000406241\n.text:0000000000406244\n.text:0000000000406250\n.text:0000000000406252\n.text:0000000000406257\n.text:000000000040625a\n.text:000000000040625f\n.text:0000000000406261\n.text:0000000000406263\n.text:0000000000406266\n.text:000000000040626b\n.text:000000000040626d\n.text:000000000040626f\n.text:0000000000406271\n.text:0000000000406272\n'
p2057
tp2058
sS'rpl_fcntl'
p2059
(S'\n__stdcall rpl_fcntl()\n'
p2060
V\u000a/* WARNING: Removing unreachable block (ram,0x0040911b) */\u000a/* WARNING: Removing unreachable block (ram,0x00409184) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x00409129 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p2061
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x004090ab\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x00409106\nCMP EAX,0x28\nJA 0x0040911b\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00409129\nCMP EAX,0x28\nJA 0x00409184\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00409192\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x0060e4b0],0x0\nJS 0x004091a3\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00401820\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00409174\nCALL 0x00401780\nCMP dword ptr [RAX],0x16\nJNZ 0x00409174\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00409060\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x00409206\nMOV dword ptr [0x0060e4b0],R15D\nTEST EBP,EBP\nJNS 0x004091b7\nJMP 0x00409206\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x00401820\nMOV EBP,EAX\nJMP 0x00409206\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00409060\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00409206\nCMP dword ptr [0x0060e4b0],-0x1\nJNZ 0x00409206\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x00401820\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x004091ec\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x00401820\nCMP EAX,-0x1\nJNZ 0x00409206\nCALL 0x00401780\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401940\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p2062
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d 7e 53 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 e0 86 ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 2f 86 ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d 35 53 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 81 86 ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d f2 52 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 52 86 ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 39 86 ff ff\n83 f8 ff\n75 1a\ne8 8f 85 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 42 87 ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p2063
S'.text:0000000000409060\n.text:0000000000409061\n.text:0000000000409063\n.text:0000000000409065\n.text:0000000000409066\n.text:000000000040906d\n.text:0000000000409070\n.text:0000000000409072\n.text:0000000000409074\n.text:0000000000409079\n.text:000000000040907e\n.text:0000000000409083\n.text:000000000040908b\n.text:0000000000409093\n.text:000000000040909b\n.text:00000000004090a3\n.text:00000000004090ab\n.text:00000000004090b0\n.text:00000000004090b5\n.text:00000000004090ba\n.text:00000000004090bf\n.text:00000000004090c4\n.text:00000000004090c9\n.text:00000000004090d1\n.text:00000000004090d6\n.text:00000000004090de\n.text:00000000004090e5\n.text:00000000004090e9\n.text:00000000004090ef\n.text:00000000004090f1\n.text:00000000004090f4\n.text:00000000004090f6\n.text:00000000004090fb\n.text:00000000004090fe\n.text:0000000000409101\n.text:0000000000409104\n.text:0000000000409106\n.text:0000000000409109\n.text:000000000040910b\n.text:000000000040910e\n.text:0000000000409113\n.text:0000000000409116\n.text:0000000000409119\n.text:000000000040911b\n.text:0000000000409120\n.text:0000000000409124\n.text:0000000000409129\n.text:000000000040912b\n.text:0000000000409132\n.text:0000000000409134\n.text:0000000000409136\n.text:0000000000409139\n.text:000000000040913b\n.text:0000000000409140\n.text:0000000000409142\n.text:0000000000409148\n.text:000000000040914a\n.text:000000000040914c\n.text:0000000000409151\n.text:0000000000409154\n.text:0000000000409156\n.text:0000000000409158\n.text:000000000040915a\n.text:000000000040915d\n.text:000000000040915f\n.text:0000000000409164\n.text:0000000000409166\n.text:000000000040916c\n.text:000000000040916e\n.text:0000000000409174\n.text:000000000040917b\n.text:000000000040917d\n.text:000000000040917f\n.text:0000000000409184\n.text:0000000000409189\n.text:000000000040918d\n.text:0000000000409192\n.text:0000000000409195\n.text:0000000000409197\n.text:000000000040919a\n.text:000000000040919f\n.text:00000000004091a1\n.text:00000000004091a3\n.text:00000000004091a5\n.text:00000000004091a7\n.text:00000000004091aa\n.text:00000000004091ac\n.text:00000000004091b1\n.text:00000000004091b3\n.text:00000000004091b5\n.text:00000000004091b7\n.text:00000000004091be\n.text:00000000004091c0\n.text:00000000004091c5\n.text:00000000004091c7\n.text:00000000004091c9\n.text:00000000004091ce\n.text:00000000004091d0\n.text:00000000004091d2\n.text:00000000004091d4\n.text:00000000004091d7\n.text:00000000004091dc\n.text:00000000004091de\n.text:00000000004091e0\n.text:00000000004091e2\n.text:00000000004091e7\n.text:00000000004091ea\n.text:00000000004091ec\n.text:00000000004091f1\n.text:00000000004091f4\n.text:00000000004091f7\n.text:00000000004091f9\n.text:00000000004091fe\n.text:0000000000409201\n.text:0000000000409206\n.text:0000000000409208\n.text:000000000040920f\n.text:0000000000409210\n.text:0000000000409212\n.text:0000000000409214\n.text:0000000000409215\n'
p2064
tp2065
sS'__fpending'
p2066
(S'\n__stdcall __fpending()\n'
p2067
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060e050)();\u000a  return;\u000a}\u000a\u000a
p2068
S'JMP qword ptr [0x0060e050]\n'
p2069
S'ff 25 8a c8 20 00\n'
p2070
S'.plt:00000000004017c0\n'
p2071
tp2072
s.