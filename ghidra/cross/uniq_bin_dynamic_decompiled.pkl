(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x609e08]\nPUSH RBP\nLEA RBP,[0x609e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401410\nTEST RBP,RBP\nJZ 0x00405c76\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00405c60\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 d6 41 20 00\n55\n48 8d 2d d6 41 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 bf b7 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000405c20\n.text:0000000000405c22\n.text:0000000000405c24\n.text:0000000000405c27\n.text:0000000000405c29\n.text:0000000000405c2b\n.text:0000000000405c32\n.text:0000000000405c33\n.text:0000000000405c3a\n.text:0000000000405c3b\n.text:0000000000405c3e\n.text:0000000000405c41\n.text:0000000000405c44\n.text:0000000000405c48\n.text:0000000000405c4c\n.text:0000000000405c51\n.text:0000000000405c54\n.text:0000000000405c56\n.text:0000000000405c58\n.text:0000000000405c60\n.text:0000000000405c63\n.text:0000000000405c66\n.text:0000000000405c69\n.text:0000000000405c6d\n.text:0000000000405c71\n.text:0000000000405c74\n.text:0000000000405c76\n.text:0000000000405c7a\n.text:0000000000405c7b\n.text:0000000000405c7c\n.text:0000000000405c7e\n.text:0000000000405c80\n.text:0000000000405c82\n.text:0000000000405c84\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060a160)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x0060a160]\n'
p11
S'ff 25 8a 8a 20 00\n'
p12
S'.plt:00000000004016d0\n'
p13
tp14
sS'argmatch_to_argument'
p15
(S'\n__stdcall argmatch_to_argument(char * value, char * * arglist, char * vallist, size_t valsize)\n'
p16
V\u000achar * argmatch_to_argument(char *value,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = *arglist;\u000a  if (pcVar2 != (char *)0x0) {\u000a    arglist = arglist + 1;\u000a    do {\u000a      iVar1 = memcmp(value,vallist,valsize);\u000a      if (iVar1 == 0) {\u000a        return pcVar2;\u000a      }\u000a      pcVar2 = *arglist;\u000a      arglist = arglist + 1;\u000a      vallist = vallist + valsize;\u000a    } while (pcVar2 != (char *)0x0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p17
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R13,RDI\nMOV R15,qword ptr [RBX]\nTEST R15,R15\nJZ 0x00402b91\nADD RBX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00401600\nTEST EAX,EAX\nJZ 0x00402b94\nMOV R15,qword ptr [RBX]\nADD RBX,0x8\nADD R12,R14\nTEST R15,R15\nJNZ 0x00402b70\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p18
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 fd\n4c 8b 3b\n4d 85 ff\n74 34\n48 83 c3 08\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\n4c 89 e6\n4c 89 f2\ne8 82 ea ff ff\n85 c0\n74 12\n4c 8b 3b\n48 83 c3 08\n4d 01 f4\n4d 85 ff\n75 df\n45 31 ff\n4c 89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p19
S'.text:0000000000402b40\n.text:0000000000402b42\n.text:0000000000402b44\n.text:0000000000402b46\n.text:0000000000402b48\n.text:0000000000402b49\n.text:0000000000402b4c\n.text:0000000000402b4f\n.text:0000000000402b52\n.text:0000000000402b55\n.text:0000000000402b58\n.text:0000000000402b5b\n.text:0000000000402b5d\n.text:0000000000402b61\n.text:0000000000402b70\n.text:0000000000402b73\n.text:0000000000402b76\n.text:0000000000402b79\n.text:0000000000402b7e\n.text:0000000000402b80\n.text:0000000000402b82\n.text:0000000000402b85\n.text:0000000000402b89\n.text:0000000000402b8c\n.text:0000000000402b8f\n.text:0000000000402b91\n.text:0000000000402b94\n.text:0000000000402b97\n.text:0000000000402b98\n.text:0000000000402b9a\n.text:0000000000402b9c\n.text:0000000000402b9e\n.text:0000000000402ba0\n'
p20
tp21
sS'c_isdigit'
p22
(S'\n__stdcall c_isdigit()\n'
p23
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p24
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p25
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p26
S'.text:0000000000405650\n.text:0000000000405653\n.text:0000000000405656\n.text:0000000000405659\n'
p27
tp28
sS'find_field'
p29
(S'\n__stdcall find_field(linebuffer * line)\n'
p30
V\u000achar * find_field(linebuffer *line)\u000a\u000a{\u000a  size_t sVar1;\u000a  _Bool _Var2;\u000a  ulong uVar3;\u000a  ulong uVar4;\u000a  ulong uVar5;\u000a  \u000a  sVar1 = skip_fields;\u000a  uVar3 = 0;\u000a  uVar5 = line->length - 1;\u000a  if ((uVar5 != 0) && (skip_fields != 0)) {\u000a    uVar3 = 0;\u000a    uVar4 = 0;\u000a    if (uVar5 != 0) goto LAB_00402708;\u000a    do {\u000a      while ((uVar3 < uVar5 && (_Var2 = field_sep(), _Var2 == false))) {\u000a        uVar3 = uVar3 + 1;\u000a      }\u000a      if ((uVar5 <= uVar3) || (uVar4 = uVar4 + 1, sVar1 <= uVar4)) break;\u000a      while (uVar3 < uVar5) {\u000aLAB_00402708:\u000a        _Var2 = field_sep();\u000a        if (_Var2 == false) break;\u000a        uVar3 = uVar3 + 1;\u000a      }\u000a    } while( true );\u000a  }\u000a  uVar4 = uVar5 - uVar3;\u000a  if (skip_chars < uVar5 - uVar3) {\u000a    uVar4 = skip_chars;\u000a  }\u000a  return line->buffer + uVar4 + uVar3;\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV R15,qword ptr [R14 + 0x8]\nXOR EBX,EBX\nDEC R15\nJZ 0x00402743\nMOV RAX,qword ptr [0x0060a2e0]\nTEST RAX,RAX\nJZ 0x00402743\nMOV R12,qword ptr [R14 + 0x10]\nMOV R13,qword ptr [0x0060a2e0]\nXOR EBX,EBX\nXOR EBP,EBP\nCMP RBX,R15\nJC 0x00402708\nJMP 0x00402723\nINC RBX\nCMP RBX,R15\nJNC 0x00402723\nMOVZX EDI,byte ptr [R12 + RBX*0x1]\nCALL 0x00402840\nTEST AL,AL\nJNZ 0x00402700\nJMP 0x00402723\nINC RBX\nCMP RBX,R15\nJNC 0x00402736\nMOVZX EDI,byte ptr [R12 + RBX*0x1]\nCALL 0x00402840\nTEST AL,AL\nJZ 0x00402720\nCMP R15,RBX\nJBE 0x00402743\nINC RBP\nCMP RBP,R13\nJC 0x00402703\nMOV RAX,qword ptr [0x0060a2d8]\nSUB R15,RBX\nCMP RAX,R15\nCMOVC R15,RAX\nADD R15,RBX\nADD R15,qword ptr [R14 + 0x10]\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p32
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 fe\n4d 8b 7e 08\n31 db\n49 ff cf\n74 6a\n48 8b 05 00 7c 20 00\n48 85 c0\n74 5e\n4d 8b 66 10\n4c 8b 2d f0 7b 20 00\n31 db\n31 ed\n4c 39 fb\n72 0f\neb 28\n48 ff c3\n4c 39 fb\n73 1b\n41 0f b6 3c 1c\ne8 2e 01 00 00\n84 c0\n75 ea\neb 0b\n48 ff c3\n4c 39 fb\n73 0e\n41 0f b6 3c 1c\ne8 0e 01 00 00\n84 c0\n74 ea\n49 39 df\n76 08\n48 ff c5\n4c 39 ed\n72 c0\n48 8b 05 8e 7b 20 00\n49 29 df\n4c 39 f8\n4c 0f 42 f8\n49 01 df\n4d 03 7e 10\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p33
S'.text:00000000004026c0\n.text:00000000004026c1\n.text:00000000004026c3\n.text:00000000004026c5\n.text:00000000004026c7\n.text:00000000004026c9\n.text:00000000004026ca\n.text:00000000004026cb\n.text:00000000004026ce\n.text:00000000004026d2\n.text:00000000004026d4\n.text:00000000004026d7\n.text:00000000004026d9\n.text:00000000004026e0\n.text:00000000004026e3\n.text:00000000004026e5\n.text:00000000004026e9\n.text:00000000004026f0\n.text:00000000004026f2\n.text:00000000004026f4\n.text:00000000004026f7\n.text:00000000004026f9\n.text:0000000000402700\n.text:0000000000402703\n.text:0000000000402706\n.text:0000000000402708\n.text:000000000040270d\n.text:0000000000402712\n.text:0000000000402714\n.text:0000000000402716\n.text:0000000000402720\n.text:0000000000402723\n.text:0000000000402726\n.text:0000000000402728\n.text:000000000040272d\n.text:0000000000402732\n.text:0000000000402734\n.text:0000000000402736\n.text:0000000000402739\n.text:000000000040273b\n.text:000000000040273e\n.text:0000000000402741\n.text:0000000000402743\n.text:000000000040274a\n.text:000000000040274d\n.text:0000000000402750\n.text:0000000000402754\n.text:0000000000402757\n.text:000000000040275b\n.text:000000000040275e\n.text:0000000000402762\n.text:0000000000402763\n.text:0000000000402765\n.text:0000000000402767\n.text:0000000000402769\n.text:000000000040276b\n.text:000000000040276c\n'
p34
tp35
sS'version_etc_arn'
p36
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p37
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_004073eb,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x404ab7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x404b38;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x404bcc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p38
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00404948\nMOV EDX,0x4073d8\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x004017c0\nJMP 0x0040495d\nMOV EDX,0x4073e4\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x4073eb\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x4076c0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x4073ef\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401610\nCMP R12,0x9\nJA 0x004049e6\nJMP qword ptr [0x407388 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x4074ba\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x4075f9\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004017c0\nADD RSP,0x38\nJMP 0x00404c57\nXOR EDI,EDI\nMOV ESI,0x4074ca\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x4074e1\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x4074fd\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004017c0\nADD RSP,0x18\nJMP 0x00404c57\nXOR EDI,EDI\nMOV ESI,0x40751d\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004017c0\nADD RSP,0x18\nJMP 0x00404c57\nXOR EDI,EDI\nMOV ESI,0x407541\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004017c0\nADD RSP,0x28\nJMP 0x00404c57\nXOR EDI,EDI\nMOV ESI,0x407569\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004017c0\nADD RSP,0x28\nJMP 0x00404c57\nXOR EDI,EDI\nMOV ESI,0x407595\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004017c0\nADD RSP,0x38\nJMP 0x00404c57\nXOR EDI,EDI\nMOV ESI,0x4075c5\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004017c0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401470\n'
p39
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba d8 73 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 7a ce ff ff\neb 15\nba e4 73 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 63 ce ff ff\n31 ff\nbe eb 73 40 00\nba 05 00 00 00\ne8 a2 cb ff ff\n48 89 c1\nbe 01 00 00 00\nba c0 76 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 35 ce ff ff\n31 ff\nbe ef 73 40 00\nba 05 00 00 00\ne8 74 cb ff ff\n48 89 c7\n4c 89 f6\ne8 69 cc ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 88 73 40 00\n31 ff\nbe ba 74 40 00\nba 05 00 00 00\ne8 4a cb ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 da cd ff ff\n31 ff\nbe f9 75 40 00\nba 05 00 00 00\ne8 19 cb ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 91 cd ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe ca 74 40 00\nba 05 00 00 00\ne8 c7 ca ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 53 cd ff ff\n31 ff\nbe e1 74 40 00\nba 05 00 00 00\ne8 92 ca ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 1a cd ff ff\n31 ff\nbe fd 74 40 00\nba 05 00 00 00\ne8 59 ca ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 e4 cc ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 1d 75 40 00\nba 05 00 00 00\ne8 1a ca ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 a2 cc ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 41 75 40 00\nba 05 00 00 00\ne8 d8 c9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 58 cc ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 69 75 40 00\nba 05 00 00 00\ne8 8e c9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 0e cc ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 95 75 40 00\nba 05 00 00 00\ne8 44 c9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 bc cb ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe c5 75 40 00\nba 05 00 00 00\ne8 f5 c8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 6d cb ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 0c c8 ff ff\n'
p40
S'.text:0000000000404910\n.text:0000000000404912\n.text:0000000000404914\n.text:0000000000404916\n.text:0000000000404917\n.text:0000000000404918\n.text:000000000040491b\n.text:000000000040491e\n.text:0000000000404921\n.text:0000000000404924\n.text:0000000000404927\n.text:000000000040492a\n.text:000000000040492f\n.text:0000000000404932\n.text:0000000000404934\n.text:0000000000404939\n.text:000000000040493b\n.text:000000000040493e\n.text:0000000000404941\n.text:0000000000404946\n.text:0000000000404948\n.text:000000000040494d\n.text:000000000040494f\n.text:0000000000404952\n.text:0000000000404955\n.text:0000000000404958\n.text:000000000040495d\n.text:000000000040495f\n.text:0000000000404964\n.text:0000000000404969\n.text:000000000040496e\n.text:0000000000404971\n.text:0000000000404976\n.text:000000000040497b\n.text:0000000000404981\n.text:0000000000404983\n.text:0000000000404986\n.text:000000000040498b\n.text:000000000040498d\n.text:0000000000404992\n.text:0000000000404997\n.text:000000000040499c\n.text:000000000040499f\n.text:00000000004049a2\n.text:00000000004049a7\n.text:00000000004049ab\n.text:00000000004049ad\n.text:00000000004049b5\n.text:00000000004049b7\n.text:00000000004049bc\n.text:00000000004049c1\n.text:00000000004049c6\n.text:00000000004049c9\n.text:00000000004049cc\n.text:00000000004049d1\n.text:00000000004049d3\n.text:00000000004049d6\n.text:00000000004049da\n.text:00000000004049db\n.text:00000000004049dd\n.text:00000000004049df\n.text:00000000004049e1\n.text:00000000004049e6\n.text:00000000004049e8\n.text:00000000004049ed\n.text:00000000004049f2\n.text:00000000004049f7\n.text:00000000004049fa\n.text:00000000004049fd\n.text:0000000000404a01\n.text:0000000000404a05\n.text:0000000000404a0a\n.text:0000000000404a0f\n.text:0000000000404a12\n.text:0000000000404a16\n.text:0000000000404a1a\n.text:0000000000404a1e\n.text:0000000000404a22\n.text:0000000000404a26\n.text:0000000000404a2a\n.text:0000000000404a2f\n.text:0000000000404a33\n.text:0000000000404a38\n.text:0000000000404a3a\n.text:0000000000404a3f\n.text:0000000000404a44\n.text:0000000000404a49\n.text:0000000000404a4c\n.text:0000000000404a4f\n.text:0000000000404a53\n.text:0000000000404a58\n.text:0000000000404a5a\n.text:0000000000404a5d\n.text:0000000000404a61\n.text:0000000000404a62\n.text:0000000000404a64\n.text:0000000000404a66\n.text:0000000000404a68\n.text:0000000000404a6d\n.text:0000000000404a6f\n.text:0000000000404a74\n.text:0000000000404a79\n.text:0000000000404a7e\n.text:0000000000404a81\n.text:0000000000404a84\n.text:0000000000404a88\n.text:0000000000404a8c\n.text:0000000000404a91\n.text:0000000000404a93\n.text:0000000000404a96\n.text:0000000000404a9a\n.text:0000000000404a9b\n.text:0000000000404a9d\n.text:0000000000404a9f\n.text:0000000000404aa1\n.text:0000000000404aa6\n.text:0000000000404aa8\n.text:0000000000404aad\n.text:0000000000404ab2\n.text:0000000000404ab7\n.text:0000000000404aba\n.text:0000000000404abd\n.text:0000000000404ac1\n.text:0000000000404ac5\n.text:0000000000404ac9\n.text:0000000000404ace\n.text:0000000000404ad0\n.text:0000000000404ad3\n.text:0000000000404ad7\n.text:0000000000404adc\n.text:0000000000404ae0\n.text:0000000000404ae5\n.text:0000000000404ae7\n.text:0000000000404aec\n.text:0000000000404af1\n.text:0000000000404af6\n.text:0000000000404af9\n.text:0000000000404afc\n.text:0000000000404b00\n.text:0000000000404b04\n.text:0000000000404b09\n.text:0000000000404b0e\n.text:0000000000404b11\n.text:0000000000404b15\n.text:0000000000404b19\n.text:0000000000404b1e\n.text:0000000000404b22\n.text:0000000000404b27\n.text:0000000000404b29\n.text:0000000000404b2e\n.text:0000000000404b33\n.text:0000000000404b38\n.text:0000000000404b3b\n.text:0000000000404b3e\n.text:0000000000404b42\n.text:0000000000404b46\n.text:0000000000404b4a\n.text:0000000000404b4f\n.text:0000000000404b54\n.text:0000000000404b57\n.text:0000000000404b5b\n.text:0000000000404b5f\n.text:0000000000404b63\n.text:0000000000404b68\n.text:0000000000404b6c\n.text:0000000000404b71\n.text:0000000000404b73\n.text:0000000000404b78\n.text:0000000000404b7d\n.text:0000000000404b82\n.text:0000000000404b85\n.text:0000000000404b88\n.text:0000000000404b8c\n.text:0000000000404b90\n.text:0000000000404b95\n.text:0000000000404b9a\n.text:0000000000404b9d\n.text:0000000000404ba1\n.text:0000000000404ba5\n.text:0000000000404ba9\n.text:0000000000404bad\n.text:0000000000404bb2\n.text:0000000000404bb6\n.text:0000000000404bbb\n.text:0000000000404bbd\n.text:0000000000404bc2\n.text:0000000000404bc7\n.text:0000000000404bcc\n.text:0000000000404bcf\n.text:0000000000404bd2\n.text:0000000000404bd6\n.text:0000000000404bda\n.text:0000000000404bde\n.text:0000000000404be3\n.text:0000000000404be8\n.text:0000000000404beb\n.text:0000000000404bef\n.text:0000000000404bf3\n.text:0000000000404bf7\n.text:0000000000404bfb\n.text:0000000000404bff\n.text:0000000000404c04\n.text:0000000000404c08\n.text:0000000000404c0a\n.text:0000000000404c0c\n.text:0000000000404c11\n.text:0000000000404c16\n.text:0000000000404c1b\n.text:0000000000404c1e\n.text:0000000000404c21\n.text:0000000000404c25\n.text:0000000000404c29\n.text:0000000000404c2e\n.text:0000000000404c33\n.text:0000000000404c36\n.text:0000000000404c3a\n.text:0000000000404c3e\n.text:0000000000404c42\n.text:0000000000404c46\n.text:0000000000404c4a\n.text:0000000000404c4e\n.text:0000000000404c53\n.text:0000000000404c57\n.text:0000000000404c58\n.text:0000000000404c5a\n.text:0000000000404c5c\n.text:0000000000404c5e\n.text:0000000000404c5f\n'
p41
tp42
sS'usage'
p43
(S'\n__stdcall usage()\n'
p44
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... [INPUT [OUTPUT]]\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "Filter adjacent matching lines from INPUT (or standard input),\u005cnwriting to OUTPUT (or standard output).\u005cn\u005cnWith no options, matching lines are merged to the first occurrence.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "  -c, --count           prefix lines by the number of occurrences\u005cn  -d, --repeated        only print duplicate lines, one for each group\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -D                    print all duplicate lines\u005cn      --all-repeated[=METHOD]  like -D, but allow separating groups\u005cn                                 with an empty line;\u005cn                                 METHOD={none(default),prepend,separate}\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  -f, --skip-fields=N   avoid comparing the first N fields\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --group[=METHOD]  show all items, separating groups with an empty line;\u005cn                          METHOD={separate(default),prepend,append,both}\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -i, --ignore-case     ignore differences in case when comparing\u005cn  -s, --skip-chars=N    avoid comparing the first N characters\u005cn  -u, --unique          only print unique lines\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  -z, --zero-terminated     line delimiter is NUL, not newline\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  -w, --check-chars=N   compare no more than N characters in lines\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnA field is a run of blanks (usually spaces and/or TABs), then non-blank\u005cncharacters.  Fields are skipped before chars.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnNote: \u005c'uniq\u005c' does not detect repeated lines unless they are adjacent.\u005cnYou may want to sort the input first, or use \u005c'sort -u\u005c' without \u005c'uniq\u005c'.\u005cnAlso, comparisons honor the rules specified by \u005c'LC_COLLATE\u005c'.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p45
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401ad6\nXOR EDI,EDI\nMOV ESI,0x406380\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060a318]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401740\nXOR EDI,EDI\nMOV ESI,0x4063a8\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a288]\nMOV RDI,RAX\nCALL 0x00401610\nCALL 0x00401b30\nXOR EDI,EDI\nMOV ESI,0x406455\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a288]\nMOV RDI,RAX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x4064df\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a288]\nMOV RDI,RAX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x4065d4\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a288]\nMOV RDI,RAX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x406610\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a288]\nMOV RDI,RAX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x4066a8\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a288]\nMOV RDI,RAX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x40675a\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a288]\nMOV RDI,RAX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x40679a\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a288]\nMOV RDI,RAX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x4067de\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a288]\nMOV RDI,RAX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x40680b\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a288]\nMOV RDI,RAX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x406841\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a288]\nMOV RDI,RAX\nCALL 0x00401610\nXOR EDI,EDI\nMOV ESI,0x4068b9\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a288]\nMOV RDI,RAX\nCALL 0x00401610\nCALL 0x00401b60\nMOV EDI,EBX\nCALL 0x004017a0\nCALL 0x00401af0\nMOV EDI,EBX\nCALL 0x004017a0\n'
p46
S'53\n89 fb\n85 db\n0f 85 bb 01 00 00\n31 ff\nbe 80 63 40 00\nba 05 00 00 00\ne8 e4 fb ff ff\n48 89 c1\n48 8b 15 e2 89 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 fb fd ff ff\n31 ff\nbe a8 63 40 00\nba 05 00 00 00\ne8 ba fb ff ff\n48 8b 35 2b 89 20 00\n48 89 c7\ne8 ab fc ff ff\ne8 c6 01 00 00\n31 ff\nbe 55 64 40 00\nba 05 00 00 00\ne8 95 fb ff ff\n48 8b 35 06 89 20 00\n48 89 c7\ne8 86 fc ff ff\n31 ff\nbe df 64 40 00\nba 05 00 00 00\ne8 75 fb ff ff\n48 8b 35 e6 88 20 00\n48 89 c7\ne8 66 fc ff ff\n31 ff\nbe d4 65 40 00\nba 05 00 00 00\ne8 55 fb ff ff\n48 8b 35 c6 88 20 00\n48 89 c7\ne8 46 fc ff ff\n31 ff\nbe 10 66 40 00\nba 05 00 00 00\ne8 35 fb ff ff\n48 8b 35 a6 88 20 00\n48 89 c7\ne8 26 fc ff ff\n31 ff\nbe a8 66 40 00\nba 05 00 00 00\ne8 15 fb ff ff\n48 8b 35 86 88 20 00\n48 89 c7\ne8 06 fc ff ff\n31 ff\nbe 5a 67 40 00\nba 05 00 00 00\ne8 f5 fa ff ff\n48 8b 35 66 88 20 00\n48 89 c7\ne8 e6 fb ff ff\n31 ff\nbe 9a 67 40 00\nba 05 00 00 00\ne8 d5 fa ff ff\n48 8b 35 46 88 20 00\n48 89 c7\ne8 c6 fb ff ff\n31 ff\nbe de 67 40 00\nba 05 00 00 00\ne8 b5 fa ff ff\n48 8b 35 26 88 20 00\n48 89 c7\ne8 a6 fb ff ff\n31 ff\nbe 0b 68 40 00\nba 05 00 00 00\ne8 95 fa ff ff\n48 8b 35 06 88 20 00\n48 89 c7\ne8 86 fb ff ff\n31 ff\nbe 41 68 40 00\nba 05 00 00 00\ne8 75 fa ff ff\n48 8b 35 e6 87 20 00\n48 89 c7\ne8 66 fb ff ff\n31 ff\nbe b9 68 40 00\nba 05 00 00 00\ne8 55 fa ff ff\n48 8b 35 c6 87 20 00\n48 89 c7\ne8 46 fb ff ff\ne8 91 00 00 00\n89 df\ne8 ca fc ff ff\ne8 15 00 00 00\n89 df\ne8 be fc ff ff\n'
p47
S'.text:0000000000401910\n.text:0000000000401911\n.text:0000000000401913\n.text:0000000000401915\n.text:000000000040191b\n.text:000000000040191d\n.text:0000000000401922\n.text:0000000000401927\n.text:000000000040192c\n.text:000000000040192f\n.text:0000000000401936\n.text:000000000040193b\n.text:000000000040193d\n.text:0000000000401940\n.text:0000000000401945\n.text:0000000000401947\n.text:000000000040194c\n.text:0000000000401951\n.text:0000000000401956\n.text:000000000040195d\n.text:0000000000401960\n.text:0000000000401965\n.text:000000000040196a\n.text:000000000040196c\n.text:0000000000401971\n.text:0000000000401976\n.text:000000000040197b\n.text:0000000000401982\n.text:0000000000401985\n.text:000000000040198a\n.text:000000000040198c\n.text:0000000000401991\n.text:0000000000401996\n.text:000000000040199b\n.text:00000000004019a2\n.text:00000000004019a5\n.text:00000000004019aa\n.text:00000000004019ac\n.text:00000000004019b1\n.text:00000000004019b6\n.text:00000000004019bb\n.text:00000000004019c2\n.text:00000000004019c5\n.text:00000000004019ca\n.text:00000000004019cc\n.text:00000000004019d1\n.text:00000000004019d6\n.text:00000000004019db\n.text:00000000004019e2\n.text:00000000004019e5\n.text:00000000004019ea\n.text:00000000004019ec\n.text:00000000004019f1\n.text:00000000004019f6\n.text:00000000004019fb\n.text:0000000000401a02\n.text:0000000000401a05\n.text:0000000000401a0a\n.text:0000000000401a0c\n.text:0000000000401a11\n.text:0000000000401a16\n.text:0000000000401a1b\n.text:0000000000401a22\n.text:0000000000401a25\n.text:0000000000401a2a\n.text:0000000000401a2c\n.text:0000000000401a31\n.text:0000000000401a36\n.text:0000000000401a3b\n.text:0000000000401a42\n.text:0000000000401a45\n.text:0000000000401a4a\n.text:0000000000401a4c\n.text:0000000000401a51\n.text:0000000000401a56\n.text:0000000000401a5b\n.text:0000000000401a62\n.text:0000000000401a65\n.text:0000000000401a6a\n.text:0000000000401a6c\n.text:0000000000401a71\n.text:0000000000401a76\n.text:0000000000401a7b\n.text:0000000000401a82\n.text:0000000000401a85\n.text:0000000000401a8a\n.text:0000000000401a8c\n.text:0000000000401a91\n.text:0000000000401a96\n.text:0000000000401a9b\n.text:0000000000401aa2\n.text:0000000000401aa5\n.text:0000000000401aaa\n.text:0000000000401aac\n.text:0000000000401ab1\n.text:0000000000401ab6\n.text:0000000000401abb\n.text:0000000000401ac2\n.text:0000000000401ac5\n.text:0000000000401aca\n.text:0000000000401acf\n.text:0000000000401ad1\n.text:0000000000401ad6\n.text:0000000000401adb\n.text:0000000000401add\n'
p48
tp49
sS'quoting_options_from_style'
p50
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p51
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p52
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040428d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401470\n'
p53
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 de d1 ff ff\n'
p54
S'.text:0000000000404240\n.text:0000000000404244\n.text:0000000000404247\n.text:000000000040424c\n.text:0000000000404251\n.text:0000000000404255\n.text:000000000040425d\n.text:0000000000404260\n.text:0000000000404262\n.text:0000000000404264\n.text:0000000000404268\n.text:000000000040426b\n.text:000000000040426f\n.text:0000000000404274\n.text:0000000000404279\n.text:000000000040427d\n.text:0000000000404281\n.text:0000000000404285\n.text:0000000000404288\n.text:000000000040428c\n.text:000000000040428d\n'
p55
tp56
sS'strchr'
p57
(S'\n__stdcall strchr(char * __s, int __c)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0060a0b0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x0060a0b0]\n'
p60
S'ff 25 3a 8b 20 00\n'
p61
S'.plt:0000000000401570\n'
p62
tp63
sS'rpl_fclose'
p64
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p65
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_004054f9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_004054f9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p66
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401680\nTEST EAX,EAX\nJS 0x004054f9\nMOV RDI,RBX\nCALL 0x004016f0\nTEST EAX,EAX\nJZ 0x004054c7\nMOV RDI,RBX\nCALL 0x00401680\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401590\nCMP RAX,-0x1\nJZ 0x004054f9\nMOV RDI,RBX\nCALL 0x00405510\nTEST EAX,EAX\nJZ 0x004054f9\nCALL 0x00401480\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004014f0\nTEST EBP,EBP\nJZ 0x004054f2\nCALL 0x00401480\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004014f0\n'
p67
S'55\n53\n50\n48 89 fb\ne8 e5 c1 ff ff\n85 c0\n78 5a\n48 89 df\ne8 49 c2 ff ff\n85 c0\n74 1c\n48 89 df\ne8 cd c1 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 cf c0 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 a8 bf ff ff\n8b 28\n48 89 df\ne8 0e c0 ff ff\n85 ed\n74 0c\ne8 95 bf ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 e9 bf ff ff\n'
p68
S'.text:0000000000405490\n.text:0000000000405491\n.text:0000000000405492\n.text:0000000000405493\n.text:0000000000405496\n.text:000000000040549b\n.text:000000000040549d\n.text:000000000040549f\n.text:00000000004054a2\n.text:00000000004054a7\n.text:00000000004054a9\n.text:00000000004054ab\n.text:00000000004054ae\n.text:00000000004054b3\n.text:00000000004054b5\n.text:00000000004054ba\n.text:00000000004054bc\n.text:00000000004054c1\n.text:00000000004054c5\n.text:00000000004054c7\n.text:00000000004054ca\n.text:00000000004054cf\n.text:00000000004054d1\n.text:00000000004054d3\n.text:00000000004054d8\n.text:00000000004054da\n.text:00000000004054dd\n.text:00000000004054e2\n.text:00000000004054e4\n.text:00000000004054e6\n.text:00000000004054eb\n.text:00000000004054ed\n.text:00000000004054f2\n.text:00000000004054f6\n.text:00000000004054f7\n.text:00000000004054f8\n.text:00000000004054f9\n.text:00000000004054fc\n.text:0000000000405500\n.text:0000000000405501\n.text:0000000000405502\n'
p69
tp70
sS'strcpy'
p71
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p72
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060a050)();\u000a  return pcVar1;\u000a}\u000a\u000a
p73
S'JMP qword ptr [0x0060a050]\n'
p74
S'ff 25 9a 8b 20 00\n'
p75
S'.plt:00000000004014b0\n'
p76
tp77
sS'fwrite_unlocked'
p78
(S'\n__stdcall fwrite_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p79
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_unlocked_0060a178)();\u000a  return sVar1;\u000a}\u000a\u000a
p80
S'JMP qword ptr [0x0060a178]\n'
p81
S'ff 25 72 8a 20 00\n'
p82
S'.plt:0000000000401700\n'
p83
tp84
sS'strncmp'
p85
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p86
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060a040)();\u000a  return iVar1;\u000a}\u000a\u000a
p87
S'JMP qword ptr [0x0060a040]\n'
p88
S'ff 25 aa 8b 20 00\n'
p89
S'.plt:0000000000401490\n'
p90
tp91
sS'xnrealloc'
p92
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p93
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p94
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00404e64\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00404e70\nPUSH RAX\nCALL 0x00404fc0\n'
p95
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p96
S'.text:0000000000404e50\n.text:0000000000404e53\n.text:0000000000404e56\n.text:0000000000404e59\n.text:0000000000404e5b\n.text:0000000000404e5f\n.text:0000000000404e62\n.text:0000000000404e64\n.text:0000000000404e65\n'
p97
tp98
sS'quote'
p99
(S'\n__stdcall quote(char * arg)\n'
p100
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p101
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004044f0\n'
p102
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p103
S'.text:0000000000404500\n.text:0000000000404503\n.text:0000000000404505\n.text:0000000000404508\n'
p104
tp105
sS'emit_bug_reporting_address'
p106
(S'\n__stdcall emit_bug_reporting_address()\n'
p107
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p108
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x407635\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40764a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401740\nXOR EDI,EDI\nMOV ESI,0x407660\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406a56\nMOV ECX,0x406c11\nXOR EAX,EAX\nCALL 0x00401740\nXOR EDI,EDI\nMOV ESI,0x407674\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a288]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401610\n'
p109
S'50\n31 ff\nbe 35 76 40 00\nba 05 00 00 00\ne8 6e c7 ff ff\n48 89 c1\nbf 01 00 00 00\nba 4a 76 40 00\n31 c0\n48 89 ce\ne8 87 c9 ff ff\n31 ff\nbe 60 76 40 00\nba 05 00 00 00\ne8 46 c7 ff ff\n48 89 c6\nbf 01 00 00 00\nba 56 6a 40 00\nb9 11 6c 40 00\n31 c0\ne8 5d c9 ff ff\n31 ff\nbe 74 76 40 00\nba 05 00 00 00\ne8 1c c7 ff ff\n48 8b 35 8d 54 20 00\n48 89 c7\n58\ne9 0c c8 ff ff\n'
p110
S'.text:0000000000404d90\n.text:0000000000404d91\n.text:0000000000404d93\n.text:0000000000404d98\n.text:0000000000404d9d\n.text:0000000000404da2\n.text:0000000000404da5\n.text:0000000000404daa\n.text:0000000000404daf\n.text:0000000000404db1\n.text:0000000000404db4\n.text:0000000000404db9\n.text:0000000000404dbb\n.text:0000000000404dc0\n.text:0000000000404dc5\n.text:0000000000404dca\n.text:0000000000404dcd\n.text:0000000000404dd2\n.text:0000000000404dd7\n.text:0000000000404ddc\n.text:0000000000404dde\n.text:0000000000404de3\n.text:0000000000404de5\n.text:0000000000404dea\n.text:0000000000404def\n.text:0000000000404df4\n.text:0000000000404dfb\n.text:0000000000404dfe\n.text:0000000000404dff\n'
p111
tp112
sS'strcoll_loop'
p113
(S'\n__stdcall strcoll_loop(char * s1, size_t s1size, char * s2, size_t s2size)\n'
p114
V\u000aint strcoll_loop(char *s1,size_t s1size,char *s2,size_t s2size)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  \u000a  piVar2 = __errno_location();\u000a  while( true ) {\u000a    *piVar2 = 0;\u000a    iVar1 = strcoll(s1,s2);\u000a    if (iVar1 != 0) {\u000a      return iVar1;\u000a    }\u000a    sVar3 = strlen(s1);\u000a    sVar4 = strlen(s2);\u000a    s2size = s2size - (sVar4 + 1);\u000a    s1size = s1size - (sVar3 + 1);\u000a    if (s1size == 0) break;\u000a    s2 = s2 + sVar4 + 1;\u000a    s1 = s1 + sVar3 + 1;\u000a    if (s2size == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return -(uint)(s2size != 0);\u000a}\u000a\u000a
p115
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R12,RDX\nMOV R15,RSI\nMOV RBX,RDI\nCALL 0x00401480\nMOV R13,RAX\nNOP\nMOV dword ptr [R13],0x0\nMOV RDI,RBX\nMOV RSI,R12\nCALL 0x004016e0\nTEST EAX,EAX\nJNZ 0x00405baf\nMOV RDI,RBX\nCALL 0x00401530\nMOV RBP,RAX\nINC RBP\nMOV RDI,R12\nCALL 0x00401530\nINC RAX\nSUB R14,RAX\nSUB R15,RBP\nJZ 0x00405baa\nADD R12,RAX\nADD RBX,RBP\nTEST R14,R14\nJNZ 0x00405b60\nMOV EAX,0x1\nJMP 0x00405baf\nNEG R14\nSBB EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p116
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d4\n49 89 f7\n48 89 fb\ne8 24 b9 ff ff\n49 89 c5\n90\n41 c7 45 00 00 00 00 00\n48 89 df\n4c 89 e6\ne8 6d bb ff ff\n85 c0\n75 38\n48 89 df\ne8 b1 b9 ff ff\n48 89 c5\n48 ff c5\n4c 89 e7\ne8 a3 b9 ff ff\n48 ff c0\n49 29 c6\n49 29 ef\n74 12\n49 01 c4\n48 01 eb\n4d 85 f6\n75 bd\nb8 01 00 00 00\neb 05\n49 f7 de\n19 c0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p117
S'.text:0000000000405b40\n.text:0000000000405b41\n.text:0000000000405b43\n.text:0000000000405b45\n.text:0000000000405b47\n.text:0000000000405b49\n.text:0000000000405b4a\n.text:0000000000405b4b\n.text:0000000000405b4e\n.text:0000000000405b51\n.text:0000000000405b54\n.text:0000000000405b57\n.text:0000000000405b5c\n.text:0000000000405b5f\n.text:0000000000405b60\n.text:0000000000405b68\n.text:0000000000405b6b\n.text:0000000000405b6e\n.text:0000000000405b73\n.text:0000000000405b75\n.text:0000000000405b77\n.text:0000000000405b7a\n.text:0000000000405b7f\n.text:0000000000405b82\n.text:0000000000405b85\n.text:0000000000405b88\n.text:0000000000405b8d\n.text:0000000000405b90\n.text:0000000000405b93\n.text:0000000000405b96\n.text:0000000000405b98\n.text:0000000000405b9b\n.text:0000000000405b9e\n.text:0000000000405ba1\n.text:0000000000405ba3\n.text:0000000000405ba8\n.text:0000000000405baa\n.text:0000000000405bad\n.text:0000000000405baf\n.text:0000000000405bb3\n.text:0000000000405bb4\n.text:0000000000405bb6\n.text:0000000000405bb8\n.text:0000000000405bba\n.text:0000000000405bbc\n.text:0000000000405bbd\n'
p118
tp119
sS'clone_quoting_options'
p120
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p121
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p122
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401480\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60a320\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00404f70\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p123
S'55\n41 56\n53\n48 89 fb\ne8 b4 e3 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 20 a3 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 85 1e 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p124
S'.text:00000000004030c0\n.text:00000000004030c1\n.text:00000000004030c3\n.text:00000000004030c4\n.text:00000000004030c7\n.text:00000000004030cc\n.text:00000000004030cf\n.text:00000000004030d2\n.text:00000000004030d5\n.text:00000000004030da\n.text:00000000004030de\n.text:00000000004030e3\n.text:00000000004030e6\n.text:00000000004030eb\n.text:00000000004030ee\n.text:00000000004030ef\n.text:00000000004030f1\n.text:00000000004030f2\n'
p125
tp126
sS'xmalloc'
p127
(S'\n__stdcall xmalloc(size_t n)\n'
p128
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p129
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004016a0\nTEST RBX,RBX\nJZ 0x00404e43\nTEST RAX,RAX\nJZ 0x00404e45\nPOP RBX\nRET\nCALL 0x00404fc0\n'
p130
S'53\n48 89 fb\ne8 67 c8 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p131
S'.text:0000000000404e30\n.text:0000000000404e31\n.text:0000000000404e34\n.text:0000000000404e39\n.text:0000000000404e3c\n.text:0000000000404e3e\n.text:0000000000404e41\n.text:0000000000404e43\n.text:0000000000404e44\n.text:0000000000404e45\n'
p132
tp133
sS'quotearg_char_mem'
p134
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p135
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p136
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060a350]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060a340]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a330]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a320]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00403120\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404010\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p137
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 18 60 20 00\n48 89 4c 24 30\n0f 10 05 fc 5f 20 00\n0f 29 44 24 20\n0f 10 05 e0 5f 20 00\n0f 29 44 24 10\n0f 10 05 c4 5f 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p138
S'.text:0000000000404320\n.text:0000000000404322\n.text:0000000000404324\n.text:0000000000404325\n.text:0000000000404329\n.text:000000000040432b\n.text:000000000040432e\n.text:0000000000404331\n.text:0000000000404338\n.text:000000000040433d\n.text:0000000000404344\n.text:0000000000404349\n.text:0000000000404350\n.text:0000000000404355\n.text:000000000040435c\n.text:0000000000404360\n.text:0000000000404363\n.text:0000000000404368\n.text:000000000040436b\n.text:000000000040436d\n.text:0000000000404372\n.text:0000000000404374\n.text:0000000000404377\n.text:000000000040437a\n.text:000000000040437d\n.text:0000000000404382\n.text:0000000000404386\n.text:0000000000404387\n.text:0000000000404389\n.text:000000000040438b\n'
p139
tp140
sS'c_isgraph'
p141
(S'\n__stdcall c_isgraph()\n'
p142
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p143
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p144
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p145
S'.text:0000000000405660\n.text:0000000000405663\n.text:0000000000405666\n.text:0000000000405669\n'
p146
tp147
sS'frame_dummy'
p148
(S'\n__stdcall frame_dummy()\n'
p149
V\u000a/* WARNING: Removing unreachable block (ram,0x004018fa) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p150
S'MOV EDI,0x609e18\nCMP qword ptr [RDI],0x0\nJNZ 0x004018f0\nJMP 0x00401880\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004018eb\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401880\n'
p151
S'bf 18 9e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p152
S'.text:00000000004018e0\n.text:00000000004018e5\n.text:00000000004018e9\n.text:00000000004018eb\n.text:00000000004018f0\n.text:00000000004018f5\n.text:00000000004018f8\n.text:00000000004018fa\n.text:00000000004018fb\n.text:00000000004018fe\n.text:0000000000401900\n.text:0000000000401901\n'
p153
tp154
sS'hard_locale'
p155
(S'\n__stdcall hard_locale()\n'
p156
V\u000a_Bool hard_locale(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s1;\u000a  undefined uVar2;\u000a  int __category;\u000a  \u000a  __s1 = setlocale(__category,(char *)0x0);\u000a  uVar2 = 1;\u000a  if (__s1 != (char *)0x0) {\u000a    if (((*__s1 != 'C') || (__s1[1] != 0)) && (iVar1 = strcmp(__s1,"POSIX"), iVar1 != 0)) {\u000a      return true;\u000a    }\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p157
S'PUSH RBX\nXOR ESI,ESI\nCALL 0x00401730\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x00402e5d\nCMP byte ptr [RAX],0x43\nJNZ 0x00402e4a\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x00402e5b\nMOV ESI,0x406de5\nMOV RDI,RAX\nCALL 0x00401640\nTEST EAX,EAX\nJNZ 0x00402e5d\nXOR EBX,EBX\nMOV EAX,EBX\nPOP RBX\nRET\n'
p158
S'53\n31 f6\ne8 f8 e8 ff ff\nb3 01\n48 85 c0\n74 1e\n80 38 43\n75 06\n80 78 01 00\n74 11\nbe e5 6d 40 00\n48 89 c7\ne8 e9 e7 ff ff\n85 c0\n75 02\n31 db\n89 d8\n5b\nc3\n'
p159
S'.text:0000000000402e30\n.text:0000000000402e31\n.text:0000000000402e33\n.text:0000000000402e38\n.text:0000000000402e3a\n.text:0000000000402e3d\n.text:0000000000402e3f\n.text:0000000000402e42\n.text:0000000000402e44\n.text:0000000000402e48\n.text:0000000000402e4a\n.text:0000000000402e4f\n.text:0000000000402e52\n.text:0000000000402e57\n.text:0000000000402e59\n.text:0000000000402e5b\n.text:0000000000402e5d\n.text:0000000000402e5f\n.text:0000000000402e60\n'
p160
tp161
sS'quotearg_buffer_restyled'
p162
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p163
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_004032bc_caseD_7;\u000a  case 2:\u000a    goto switchD_004032bc_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_004032bc_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_004032bc_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_004032bc_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_004032bc_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_004032bc_caseD_7;\u000aswitchD_004032bc_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_004032bc_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_004032bc_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00403d80;\u000aLAB_004034a0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00403d89:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00403d98:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_004034ab:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_004034ef:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_004034ef;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00403d98;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00403cc5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00403bd0;\u000a    }\u000a    goto LAB_00403d98;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00403cfa;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00403d98;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403d29;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_004037e8;\u000a  case '\u005ca':\u000a    goto joined_r0x004036d8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x004036d8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00403506_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x004036d8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x004036d8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00403506_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x004036d8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_00403c3e;\u000a    }\u000a    goto LAB_00403d98;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00403d98;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00403d98;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00403d98;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00403d98;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00403d98;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00403506_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00403c96;\u000a      goto joined_r0x00403c88;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403791:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403c88;\u000a      goto LAB_00403c96;\u000a    }\u000a    goto LAB_00403d98;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00403d98;\u000a  }\u000a  goto joined_r0x00403bd0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00403cfa:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403d29;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403d29:\u000a  if (1 < uVar10) {\u000aLAB_00403806:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_004038c2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403791;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_004038c2:\u000a        if (bVar6 != 0) goto LAB_00403d98;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_004037e8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403806;\u000ajoined_r0x00403bd0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00403bd0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403bf7;\u000aLAB_00403c30:\u000a    if (bVar22) goto LAB_00403c35;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00403c30;\u000aLAB_00403bf7:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00403c35:\u000a      if (bVar6 != 0) goto LAB_00403d98;\u000aLAB_00403c3e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403c88;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00403c96:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403c88:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00403cc5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_004034a0;\u000aLAB_00403d80:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00403d89;\u000a  goto LAB_004034ab;\u000a}\u000a\u000a
p164
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401520\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00403e65\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x406e40 + RAX*0x8]\nMOV EDI,0x407366\nMOV ESI,R15D\nCALL 0x00404510\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x407368\nMOV ESI,R15D\nCALL 0x00404510\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040331d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00403320\nNOP\nCMP R12,RSI\nJNC 0x0040330e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00403300\nJMP 0x00403320\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401530\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x004033ec\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x004033ec\nMOV ECX,0x407364\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x004033e6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00403387\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x004033b4\nTEST RSI,RSI\nJZ 0x004033a1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x407368\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x004033c2\nMOV ECX,0x407368\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x004033ec\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00403e3c\nMOV ECX,0x407364\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00403d80\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00403d89\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x004034ef\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x004034ea\nCMP R11,-0x1\nJNZ 0x004034ea\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401530\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00403540\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040379c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x406e98 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00403d98\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403bf0\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403bf7\nJMP 0x00403c30\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401600\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040358d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x004034f1\nJMP 0x00403d98\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x004034f1\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040351b\nCMP EBX,0x2\nJNZ 0x0040351b\nTEST R13,R13\nJNZ 0x0040351b\nJMP 0x00403d98\nCMP R11,-0x1\nJZ 0x00403973\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403993\nJMP 0x0040351b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004039a4\nTEST R8B,R8B\nJNZ 0x00403d98\nCMP EBX,0x2\nJNZ 0x00403648\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403648\nCMP R12,RSI\nJNC 0x00403623\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403632\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403641\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403652\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403b18\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403b18\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403b18\nCMP RCX,RSI\nJNC 0x0040368c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040369b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403526\nJMP 0x00403bf0\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403519\nJMP 0x004036fa\nMOV DL,0x74\nJMP 0x004036e2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403519\nJMP 0x004036fa\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403519\nJMP 0x004036fa\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00403d98\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403519\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x00403c3e\nJMP 0x00403d98\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00403519\nTEST R8B,R8B\nJNZ 0x00403d98\nCMP R12,RSI\nJNC 0x0040372a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403739\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403748\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00403519\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x00403b2b\nCMP EBX,0x2\nJNZ 0x00403519\nTEST R8B,R8B\nJZ 0x00403519\nJMP 0x00403d98\nCMP EBX,0x2\nJNZ 0x004039c4\nTEST R8B,R8B\nJNZ 0x00403d98\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00403c96\nJMP 0x00403cb9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x004039e5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401800\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403bd8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00403bd8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x004038c2\nJMP 0x00403890\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403879\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403876\nCMP R12,RSI\nJNC 0x0040385b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040386a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x004038b0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x004038b0\nTEST BPL,0x1\nJZ 0x00403953\nCMP R12,RSI\nJNC 0x004038a4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403953\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403890\nTEST R8B,R8B\nJNZ 0x00403d98\nCMP EBX,0x2\nJNZ 0x0040390a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040390a\nCMP R12,RSI\nJNC 0x004038e2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004038f1\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403900\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403914\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040392b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403945\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403840\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00403c96\nJMP 0x00403cb9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040351b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040351b\nJMP 0x00403d98\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00403cc5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403526\nJMP 0x00403bf0\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x004036e2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00403c96\nJMP 0x00403cb9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403a07\nMOV RDI,R10\nCALL 0x00401530\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401550\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00403cdf\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403cd7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403ce6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00403ace\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403ac6\nBT RDI,RDX\nJC 0x00403e32\nINC RCX\nCMP RCX,R14\nJC 0x00403ab0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x004017e0\nTEST EAX,EAX\nJNZ 0x00403ae3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x004017d0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403a25\nJMP 0x00403d29\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403526\nJMP 0x00403bf0\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00403519\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00403519\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00403519\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040351b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00403d62\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00403d98\nCMP R12,RSI\nJNC 0x00403b8e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00403ba1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403bb0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x00403bbf\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403526\nJMP 0x00403bf0\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403526\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00403c30\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00403c35\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00403c90\nJMP 0x00403c35\nTEST BPL,BPL\nJZ 0x00403c90\nTEST R8B,R8B\nJNZ 0x00403d98\nCMP EBX,0x2\nJNZ 0x00403c78\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403c78\nCMP R12,RSI\nJNC 0x00403c53\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403c62\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403c71\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403c82\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00403cc2\nJMP 0x00403cbe\nTEST DIL,0x1\nJZ 0x00403cb9\nAND AL,0x1\nJNZ 0x00403cb9\nCMP R12,RSI\nJNC 0x00403ca4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403cb3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00403cc2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00403d80\nJMP 0x004034a0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403d24\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00403d1c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00403d58\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00403cfa\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403d29\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x004037e8\nJMP 0x00403806\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403d29\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403526\nJMP 0x00403bf0\nCMP R13,R11\nJNZ 0x004034ab\nTEST R8B,R8B\nJZ 0x00403df2\nCMP EBX,0x2\nJNZ 0x00403df2\nTEST R12,R12\nJNZ 0x00403df2\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00403230\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00403e26\nTEST R8B,R8B\nJNZ 0x00403e26\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00403e26\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00403e19\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00403e10\nCMP R12,RSI\nJNC 0x00403ddd\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00403ddd\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00403d98\nTEST RSI,RSI\nJZ 0x00403e49\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x407364\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x004033ec\nCALL 0x00401470\n'
p165
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 c2 e2 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 40 6e 40 00\nbf 66 73 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 68 73 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 03 e2 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 64 73 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 68 73 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 68 73 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 64 73 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 63 e0 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 98 6e 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 a7 e0 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 47 e0 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 31 db ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 03 db ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 09 dd ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 d2 dc ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 64 73 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 06 d6 ff ff\n'
p166
S'.text:0000000000403230\n.text:0000000000403231\n.text:0000000000403233\n.text:0000000000403235\n.text:0000000000403237\n.text:0000000000403239\n.text:000000000040323a\n.text:0000000000403241\n.text:0000000000403244\n.text:0000000000403247\n.text:000000000040324a\n.text:000000000040324f\n.text:0000000000403254\n.text:0000000000403259\n.text:000000000040325e\n.text:0000000000403266\n.text:000000000040326a\n.text:0000000000403270\n.text:0000000000403278\n.text:000000000040327d\n.text:0000000000403285\n.text:000000000040328a\n.text:000000000040328e\n.text:0000000000403290\n.text:0000000000403293\n.text:0000000000403296\n.text:0000000000403299\n.text:000000000040329e\n.text:00000000004032a1\n.text:00000000004032a4\n.text:00000000004032a7\n.text:00000000004032aa\n.text:00000000004032ac\n.text:00000000004032af\n.text:00000000004032b4\n.text:00000000004032b7\n.text:00000000004032bc\n.text:00000000004032c3\n.text:00000000004032c8\n.text:00000000004032cb\n.text:00000000004032d0\n.text:00000000004032d5\n.text:00000000004032da\n.text:00000000004032dd\n.text:00000000004032e2\n.text:00000000004032e7\n.text:00000000004032ec\n.text:00000000004032ee\n.text:00000000004032f0\n.text:00000000004032f5\n.text:00000000004032f7\n.text:00000000004032fa\n.text:00000000004032fc\n.text:00000000004032fe\n.text:0000000000403300\n.text:0000000000403303\n.text:0000000000403305\n.text:000000000040330a\n.text:000000000040330e\n.text:0000000000403314\n.text:0000000000403317\n.text:0000000000403319\n.text:000000000040331b\n.text:000000000040331d\n.text:0000000000403320\n.text:0000000000403325\n.text:0000000000403328\n.text:000000000040332d\n.text:0000000000403332\n.text:0000000000403335\n.text:0000000000403338\n.text:000000000040333b\n.text:000000000040333e\n.text:0000000000403343\n.text:0000000000403346\n.text:0000000000403349\n.text:000000000040334e\n.text:0000000000403351\n.text:0000000000403353\n.text:0000000000403356\n.text:0000000000403358\n.text:000000000040335a\n.text:000000000040335d\n.text:0000000000403362\n.text:0000000000403367\n.text:000000000040336c\n.text:000000000040336f\n.text:0000000000403375\n.text:0000000000403377\n.text:000000000040337a\n.text:000000000040337d\n.text:0000000000403380\n.text:0000000000403382\n.text:0000000000403384\n.text:0000000000403387\n.text:000000000040338a\n.text:000000000040338f\n.text:0000000000403392\n.text:0000000000403394\n.text:0000000000403397\n.text:0000000000403399\n.text:000000000040339e\n.text:00000000004033a1\n.text:00000000004033a6\n.text:00000000004033ac\n.text:00000000004033b2\n.text:00000000004033b4\n.text:00000000004033b9\n.text:00000000004033bf\n.text:00000000004033c2\n.text:00000000004033c5\n.text:00000000004033c8\n.text:00000000004033ca\n.text:00000000004033cf\n.text:00000000004033d2\n.text:00000000004033d8\n.text:00000000004033dd\n.text:00000000004033e3\n.text:00000000004033e6\n.text:00000000004033e9\n.text:00000000004033ec\n.text:00000000004033f4\n.text:00000000004033f6\n.text:00000000004033f8\n.text:00000000004033fb\n.text:00000000004033ff\n.text:0000000000403401\n.text:0000000000403404\n.text:0000000000403408\n.text:000000000040340a\n.text:000000000040340d\n.text:0000000000403410\n.text:0000000000403413\n.text:0000000000403415\n.text:0000000000403419\n.text:000000000040341b\n.text:000000000040341f\n.text:0000000000403422\n.text:0000000000403425\n.text:0000000000403428\n.text:000000000040342a\n.text:000000000040342e\n.text:0000000000403437\n.text:000000000040343a\n.text:000000000040343c\n.text:0000000000403440\n.text:0000000000403442\n.text:0000000000403446\n.text:0000000000403448\n.text:000000000040344b\n.text:000000000040344f\n.text:0000000000403451\n.text:0000000000403454\n.text:0000000000403458\n.text:000000000040345d\n.text:0000000000403460\n.text:0000000000403464\n.text:000000000040346c\n.text:000000000040346f\n.text:0000000000403472\n.text:0000000000403474\n.text:0000000000403478\n.text:000000000040347b\n.text:000000000040347d\n.text:0000000000403482\n.text:0000000000403486\n.text:000000000040348b\n.text:0000000000403490\n.text:0000000000403494\n.text:000000000040349a\n.text:00000000004034a0\n.text:00000000004034a5\n.text:00000000004034ab\n.text:00000000004034b0\n.text:00000000004034b2\n.text:00000000004034b7\n.text:00000000004034bb\n.text:00000000004034bd\n.text:00000000004034c1\n.text:00000000004034c3\n.text:00000000004034c5\n.text:00000000004034c8\n.text:00000000004034cd\n.text:00000000004034cf\n.text:00000000004034d4\n.text:00000000004034d9\n.text:00000000004034dd\n.text:00000000004034e2\n.text:00000000004034e7\n.text:00000000004034ea\n.text:00000000004034ed\n.text:00000000004034ef\n.text:00000000004034f1\n.text:00000000004034f6\n.text:00000000004034fa\n.text:0000000000403500\n.text:0000000000403502\n.text:0000000000403504\n.text:0000000000403506\n.text:000000000040350e\n.text:0000000000403513\n.text:0000000000403519\n.text:000000000040351b\n.text:0000000000403520\n.text:0000000000403526\n.text:000000000040352f\n.text:0000000000403535\n.text:0000000000403540\n.text:0000000000403542\n.text:0000000000403545\n.text:0000000000403549\n.text:0000000000403551\n.text:0000000000403554\n.text:0000000000403559\n.text:000000000040355b\n.text:000000000040355e\n.text:0000000000403560\n.text:0000000000403565\n.text:0000000000403568\n.text:000000000040356d\n.text:0000000000403570\n.text:0000000000403575\n.text:0000000000403579\n.text:000000000040357e\n.text:0000000000403580\n.text:0000000000403582\n.text:0000000000403588\n.text:000000000040358d\n.text:0000000000403592\n.text:0000000000403595\n.text:000000000040359a\n.text:000000000040359e\n.text:00000000004035a3\n.text:00000000004035a8\n.text:00000000004035aa\n.text:00000000004035ac\n.text:00000000004035b1\n.text:00000000004035b3\n.text:00000000004035b6\n.text:00000000004035bc\n.text:00000000004035bf\n.text:00000000004035c5\n.text:00000000004035c8\n.text:00000000004035ce\n.text:00000000004035d3\n.text:00000000004035d7\n.text:00000000004035dd\n.text:00000000004035e0\n.text:00000000004035e3\n.text:00000000004035e7\n.text:00000000004035ea\n.text:00000000004035ec\n.text:00000000004035ef\n.text:00000000004035f5\n.text:00000000004035fa\n.text:00000000004035ff\n.text:0000000000403605\n.text:0000000000403608\n.text:000000000040360e\n.text:0000000000403611\n.text:0000000000403613\n.text:0000000000403615\n.text:0000000000403617\n.text:0000000000403619\n.text:000000000040361c\n.text:000000000040361e\n.text:0000000000403623\n.text:0000000000403628\n.text:000000000040362b\n.text:000000000040362d\n.text:0000000000403632\n.text:0000000000403637\n.text:000000000040363a\n.text:000000000040363c\n.text:0000000000403641\n.text:0000000000403645\n.text:0000000000403648\n.text:000000000040364b\n.text:000000000040364d\n.text:0000000000403652\n.text:0000000000403657\n.text:0000000000403659\n.text:000000000040365c\n.text:000000000040365f\n.text:0000000000403665\n.text:0000000000403669\n.text:000000000040366c\n.text:0000000000403672\n.text:0000000000403676\n.text:0000000000403679\n.text:000000000040367c\n.text:0000000000403682\n.text:0000000000403685\n.text:0000000000403687\n.text:000000000040368c\n.text:0000000000403691\n.text:0000000000403694\n.text:0000000000403696\n.text:000000000040369b\n.text:000000000040369f\n.text:00000000004036a4\n.text:00000000004036aa\n.text:00000000004036af\n.text:00000000004036b1\n.text:00000000004036b6\n.text:00000000004036bc\n.text:00000000004036be\n.text:00000000004036c0\n.text:00000000004036c2\n.text:00000000004036c4\n.text:00000000004036c9\n.text:00000000004036cf\n.text:00000000004036d1\n.text:00000000004036d3\n.text:00000000004036d8\n.text:00000000004036de\n.text:00000000004036e0\n.text:00000000004036e2\n.text:00000000004036e7\n.text:00000000004036e9\n.text:00000000004036ef\n.text:00000000004036f4\n.text:00000000004036fa\n.text:00000000004036fd\n.text:0000000000403700\n.text:0000000000403706\n.text:000000000040370b\n.text:000000000040370e\n.text:0000000000403711\n.text:0000000000403717\n.text:000000000040371a\n.text:0000000000403720\n.text:0000000000403723\n.text:0000000000403725\n.text:000000000040372a\n.text:000000000040372f\n.text:0000000000403732\n.text:0000000000403734\n.text:0000000000403739\n.text:000000000040373e\n.text:0000000000403741\n.text:0000000000403743\n.text:0000000000403748\n.text:000000000040374c\n.text:000000000040374e\n.text:0000000000403753\n.text:0000000000403756\n.text:0000000000403759\n.text:000000000040375f\n.text:0000000000403762\n.text:0000000000403768\n.text:000000000040376b\n.text:0000000000403771\n.text:0000000000403776\n.text:0000000000403779\n.text:000000000040377f\n.text:0000000000403782\n.text:0000000000403788\n.text:000000000040378b\n.text:000000000040378d\n.text:0000000000403791\n.text:0000000000403797\n.text:000000000040379c\n.text:00000000004037a0\n.text:00000000004037a9\n.text:00000000004037af\n.text:00000000004037b4\n.text:00000000004037b9\n.text:00000000004037be\n.text:00000000004037c1\n.text:00000000004037c6\n.text:00000000004037c9\n.text:00000000004037cc\n.text:00000000004037d1\n.text:00000000004037d6\n.text:00000000004037da\n.text:00000000004037df\n.text:00000000004037e4\n.text:00000000004037e8\n.text:00000000004037ea\n.text:00000000004037ef\n.text:00000000004037f5\n.text:00000000004037f8\n.text:00000000004037fa\n.text:00000000004037fd\n.text:0000000000403800\n.text:0000000000403806\n.text:000000000040380b\n.text:000000000040380e\n.text:0000000000403811\n.text:0000000000403814\n.text:0000000000403817\n.text:0000000000403819\n.text:000000000040381d\n.text:000000000040381f\n.text:0000000000403824\n.text:0000000000403829\n.text:000000000040382f\n.text:0000000000403840\n.text:0000000000403845\n.text:0000000000403847\n.text:000000000040384a\n.text:000000000040384c\n.text:000000000040384f\n.text:0000000000403851\n.text:0000000000403854\n.text:0000000000403856\n.text:000000000040385b\n.text:0000000000403860\n.text:0000000000403863\n.text:0000000000403865\n.text:000000000040386a\n.text:000000000040386e\n.text:0000000000403876\n.text:0000000000403879\n.text:000000000040387c\n.text:000000000040387e\n.text:0000000000403882\n.text:0000000000403890\n.text:0000000000403894\n.text:000000000040389a\n.text:000000000040389d\n.text:000000000040389f\n.text:00000000004038a4\n.text:00000000004038a7\n.text:00000000004038a9\n.text:00000000004038b0\n.text:00000000004038b3\n.text:00000000004038b8\n.text:00000000004038bb\n.text:00000000004038c0\n.text:00000000004038c2\n.text:00000000004038c5\n.text:00000000004038cb\n.text:00000000004038ce\n.text:00000000004038d0\n.text:00000000004038d4\n.text:00000000004038d6\n.text:00000000004038d8\n.text:00000000004038db\n.text:00000000004038dd\n.text:00000000004038e2\n.text:00000000004038e7\n.text:00000000004038ea\n.text:00000000004038ec\n.text:00000000004038f1\n.text:00000000004038f6\n.text:00000000004038f9\n.text:00000000004038fb\n.text:0000000000403900\n.text:0000000000403904\n.text:0000000000403906\n.text:000000000040390a\n.text:000000000040390d\n.text:000000000040390f\n.text:0000000000403914\n.text:0000000000403919\n.text:000000000040391c\n.text:000000000040391e\n.text:0000000000403921\n.text:0000000000403924\n.text:0000000000403927\n.text:000000000040392b\n.text:0000000000403930\n.text:0000000000403933\n.text:0000000000403935\n.text:0000000000403938\n.text:000000000040393b\n.text:000000000040393e\n.text:0000000000403941\n.text:0000000000403945\n.text:0000000000403949\n.text:000000000040394d\n.text:0000000000403951\n.text:0000000000403953\n.text:0000000000403957\n.text:000000000040395a\n.text:0000000000403960\n.text:0000000000403964\n.text:0000000000403968\n.text:000000000040396e\n.text:0000000000403973\n.text:0000000000403976\n.text:0000000000403979\n.text:000000000040397e\n.text:0000000000403981\n.text:0000000000403983\n.text:0000000000403986\n.text:000000000040398d\n.text:0000000000403993\n.text:0000000000403995\n.text:0000000000403999\n.text:000000000040399f\n.text:00000000004039a4\n.text:00000000004039a9\n.text:00000000004039af\n.text:00000000004039b2\n.text:00000000004039b4\n.text:00000000004039b9\n.text:00000000004039bf\n.text:00000000004039c4\n.text:00000000004039c6\n.text:00000000004039cb\n.text:00000000004039d1\n.text:00000000004039d3\n.text:00000000004039d6\n.text:00000000004039da\n.text:00000000004039e0\n.text:00000000004039e5\n.text:00000000004039f1\n.text:00000000004039f5\n.text:00000000004039f7\n.text:00000000004039fa\n.text:00000000004039ff\n.text:0000000000403a04\n.text:0000000000403a07\n.text:0000000000403a0b\n.text:0000000000403a10\n.text:0000000000403a12\n.text:0000000000403a16\n.text:0000000000403a18\n.text:0000000000403a20\n.text:0000000000403a25\n.text:0000000000403a2a\n.text:0000000000403a2e\n.text:0000000000403a32\n.text:0000000000403a3a\n.text:0000000000403a3d\n.text:0000000000403a42\n.text:0000000000403a45\n.text:0000000000403a48\n.text:0000000000403a4d\n.text:0000000000403a50\n.text:0000000000403a53\n.text:0000000000403a59\n.text:0000000000403a5d\n.text:0000000000403a67\n.text:0000000000403a6d\n.text:0000000000403a71\n.text:0000000000403a76\n.text:0000000000403a7c\n.text:0000000000403a80\n.text:0000000000403a83\n.text:0000000000403a87\n.text:0000000000403a89\n.text:0000000000403a8e\n.text:0000000000403a93\n.text:0000000000403a97\n.text:0000000000403a99\n.text:0000000000403a9e\n.text:0000000000403aa3\n.text:0000000000403aa7\n.text:0000000000403aac\n.text:0000000000403ab0\n.text:0000000000403ab4\n.text:0000000000403ab7\n.text:0000000000403aba\n.text:0000000000403abc\n.text:0000000000403ac0\n.text:0000000000403ac6\n.text:0000000000403ac9\n.text:0000000000403acc\n.text:0000000000403ace\n.text:0000000000403ad2\n.text:0000000000403ad7\n.text:0000000000403ad9\n.text:0000000000403adb\n.text:0000000000403ae3\n.text:0000000000403ae8\n.text:0000000000403aeb\n.text:0000000000403af3\n.text:0000000000403af6\n.text:0000000000403af9\n.text:0000000000403afe\n.text:0000000000403b01\n.text:0000000000403b03\n.text:0000000000403b08\n.text:0000000000403b0d\n.text:0000000000403b13\n.text:0000000000403b18\n.text:0000000000403b1b\n.text:0000000000403b20\n.text:0000000000403b26\n.text:0000000000403b2b\n.text:0000000000403b30\n.text:0000000000403b36\n.text:0000000000403b3a\n.text:0000000000403b3d\n.text:0000000000403b43\n.text:0000000000403b49\n.text:0000000000403b4f\n.text:0000000000403b54\n.text:0000000000403b56\n.text:0000000000403b59\n.text:0000000000403b5f\n.text:0000000000403b63\n.text:0000000000403b65\n.text:0000000000403b6f\n.text:0000000000403b73\n.text:0000000000403b79\n.text:0000000000403b7c\n.text:0000000000403b7e\n.text:0000000000403b84\n.text:0000000000403b87\n.text:0000000000403b89\n.text:0000000000403b8e\n.text:0000000000403b93\n.text:0000000000403b96\n.text:0000000000403b9a\n.text:0000000000403b9c\n.text:0000000000403ba1\n.text:0000000000403ba6\n.text:0000000000403ba9\n.text:0000000000403bab\n.text:0000000000403bb0\n.text:0000000000403bb5\n.text:0000000000403bb8\n.text:0000000000403bba\n.text:0000000000403bbf\n.text:0000000000403bc3\n.text:0000000000403bc5\n.text:0000000000403bc8\n.text:0000000000403bcb\n.text:0000000000403bd0\n.text:0000000000403bd6\n.text:0000000000403bd8\n.text:0000000000403bdd\n.text:0000000000403be2\n.text:0000000000403be8\n.text:0000000000403bf0\n.text:0000000000403bf5\n.text:0000000000403bf7\n.text:0000000000403bfc\n.text:0000000000403bff\n.text:0000000000403c01\n.text:0000000000403c04\n.text:0000000000403c06\n.text:0000000000403c09\n.text:0000000000403c0c\n.text:0000000000403c0f\n.text:0000000000403c11\n.text:0000000000403c19\n.text:0000000000403c1c\n.text:0000000000403c1e\n.text:0000000000403c20\n.text:0000000000403c30\n.text:0000000000403c33\n.text:0000000000403c35\n.text:0000000000403c38\n.text:0000000000403c3e\n.text:0000000000403c41\n.text:0000000000403c43\n.text:0000000000403c45\n.text:0000000000403c47\n.text:0000000000403c49\n.text:0000000000403c4c\n.text:0000000000403c4e\n.text:0000000000403c53\n.text:0000000000403c58\n.text:0000000000403c5b\n.text:0000000000403c5d\n.text:0000000000403c62\n.text:0000000000403c67\n.text:0000000000403c6a\n.text:0000000000403c6c\n.text:0000000000403c71\n.text:0000000000403c75\n.text:0000000000403c78\n.text:0000000000403c7b\n.text:0000000000403c7d\n.text:0000000000403c82\n.text:0000000000403c85\n.text:0000000000403c88\n.text:0000000000403c8a\n.text:0000000000403c90\n.text:0000000000403c94\n.text:0000000000403c96\n.text:0000000000403c98\n.text:0000000000403c9a\n.text:0000000000403c9d\n.text:0000000000403c9f\n.text:0000000000403ca4\n.text:0000000000403ca9\n.text:0000000000403cac\n.text:0000000000403cae\n.text:0000000000403cb3\n.text:0000000000403cb7\n.text:0000000000403cb9\n.text:0000000000403cbc\n.text:0000000000403cbe\n.text:0000000000403cc2\n.text:0000000000403cc5\n.text:0000000000403cc8\n.text:0000000000403ccc\n.text:0000000000403cd2\n.text:0000000000403cd7\n.text:0000000000403cdf\n.text:0000000000403ce4\n.text:0000000000403ce6\n.text:0000000000403cee\n.text:0000000000403cf3\n.text:0000000000403cf5\n.text:0000000000403cfa\n.text:0000000000403cff\n.text:0000000000403d03\n.text:0000000000403d05\n.text:0000000000403d0a\n.text:0000000000403d0d\n.text:0000000000403d10\n.text:0000000000403d12\n.text:0000000000403d1a\n.text:0000000000403d1c\n.text:0000000000403d24\n.text:0000000000403d29\n.text:0000000000403d2d\n.text:0000000000403d32\n.text:0000000000403d37\n.text:0000000000403d3b\n.text:0000000000403d40\n.text:0000000000403d45\n.text:0000000000403d49\n.text:0000000000403d4d\n.text:0000000000403d53\n.text:0000000000403d58\n.text:0000000000403d60\n.text:0000000000403d62\n.text:0000000000403d64\n.text:0000000000403d68\n.text:0000000000403d6d\n.text:0000000000403d73\n.text:0000000000403d80\n.text:0000000000403d83\n.text:0000000000403d89\n.text:0000000000403d8c\n.text:0000000000403d8e\n.text:0000000000403d91\n.text:0000000000403d93\n.text:0000000000403d96\n.text:0000000000403d98\n.text:0000000000403da0\n.text:0000000000403da6\n.text:0000000000403daa\n.text:0000000000403dad\n.text:0000000000403db1\n.text:0000000000403db6\n.text:0000000000403dba\n.text:0000000000403dbe\n.text:0000000000403dc1\n.text:0000000000403dc4\n.text:0000000000403dc7\n.text:0000000000403dcb\n.text:0000000000403dcf\n.text:0000000000403dd1\n.text:0000000000403dd6\n.text:0000000000403dda\n.text:0000000000403ddd\n.text:0000000000403de0\n.text:0000000000403de7\n.text:0000000000403de8\n.text:0000000000403dea\n.text:0000000000403dec\n.text:0000000000403dee\n.text:0000000000403df0\n.text:0000000000403df1\n.text:0000000000403df2\n.text:0000000000403dfa\n.text:0000000000403dfd\n.text:0000000000403dff\n.text:0000000000403e02\n.text:0000000000403e04\n.text:0000000000403e06\n.text:0000000000403e08\n.text:0000000000403e0a\n.text:0000000000403e0d\n.text:0000000000403e10\n.text:0000000000403e13\n.text:0000000000403e15\n.text:0000000000403e19\n.text:0000000000403e1c\n.text:0000000000403e1f\n.text:0000000000403e22\n.text:0000000000403e24\n.text:0000000000403e26\n.text:0000000000403e29\n.text:0000000000403e2b\n.text:0000000000403e30\n.text:0000000000403e32\n.text:0000000000403e37\n.text:0000000000403e3c\n.text:0000000000403e3f\n.text:0000000000403e41\n.text:0000000000403e46\n.text:0000000000403e49\n.text:0000000000403e4e\n.text:0000000000403e51\n.text:0000000000403e57\n.text:0000000000403e5d\n.text:0000000000403e60\n.text:0000000000403e65\n'
p167
tp168
sS'set_quoting_style'
p169
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p170
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p171
S'TEST RDI,RDI\nMOV EAX,0x60a320\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p172
S'48 85 ff\nb8 20 a3 60 00\n48 0f 45 c7\n89 30\nc3\n'
p173
S'.text:0000000000403110\n.text:0000000000403113\n.text:0000000000403118\n.text:000000000040311c\n.text:000000000040311e\n'
p174
tp175
sS'quotearg_n_style_colon'
p176
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p177
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p178
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00404240\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00403120\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00404010\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p179
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p180
S'.text:00000000004043c0\n.text:00000000004043c1\n.text:00000000004043c3\n.text:00000000004043c4\n.text:00000000004043c8\n.text:00000000004043cb\n.text:00000000004043cd\n.text:00000000004043d2\n.text:00000000004043d5\n.text:00000000004043da\n.text:00000000004043df\n.text:00000000004043e4\n.text:00000000004043e7\n.text:00000000004043ec\n.text:00000000004043f3\n.text:00000000004043f5\n.text:00000000004043f8\n.text:00000000004043fb\n.text:0000000000404400\n.text:0000000000404404\n.text:0000000000404405\n.text:0000000000404407\n.text:0000000000404408\n'
p181
tp182
sS'textdomain'
p183
(S'\n__stdcall textdomain()\n'
p184
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060a068)();\u000a  return;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x0060a068]\n'
p186
S'ff 25 82 8b 20 00\n'
p187
S'.plt:00000000004014e0\n'
p188
tp189
sS'xmemdup'
p190
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p191
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p192
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00404e30\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401660\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p193
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 cc c6 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p194
S'.text:0000000000404f70\n.text:0000000000404f72\n.text:0000000000404f74\n.text:0000000000404f75\n.text:0000000000404f78\n.text:0000000000404f7b\n.text:0000000000404f7e\n.text:0000000000404f83\n.text:0000000000404f86\n.text:0000000000404f89\n.text:0000000000404f8c\n.text:0000000000404f8f\n.text:0000000000404f94\n.text:0000000000404f97\n.text:0000000000404f98\n.text:0000000000404f9a\n.text:0000000000404f9c\n'
p195
tp196
sS'get_quoting_style'
p197
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p198
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p199
S'TEST RDI,RDI\nMOV EAX,0x60a320\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p200
S'48 85 ff\nb8 20 a3 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p201
S'.text:0000000000403100\n.text:0000000000403103\n.text:0000000000403108\n.text:000000000040310c\n.text:000000000040310e\n'
p202
tp203
sS'ferror_unlocked'
p204
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p205
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060a108)();\u000a  return iVar1;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x0060a108]\n'
p207
S'ff 25 e2 8a 20 00\n'
p208
S'.plt:0000000000401620\n'
p209
tp210
sS'exit'
p211
(S'\n__stdcall exit(int __status)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060a1c8)();\u000a  return;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x0060a1c8]\n'
p214
S'ff 25 22 8a 20 00\n'
p215
S'.plt:00000000004017a0\n'
p216
tp217
sS'quote_mem'
p218
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p219
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p220
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004044d0\n'
p221
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p222
S'.text:00000000004044e0\n.text:00000000004044e3\n.text:00000000004044e6\n.text:00000000004044e8\n.text:00000000004044eb\n.text:00000000004044ee\n'
p223
tp224
sS'locale_charset'
p225
(S'\n__stdcall locale_charset()\n'
p226
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0040580d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0040580d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p227
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x004016c0\nTEST RAX,RAX\nMOV R14D,0x4074b9\nCMOVNZ R14,RAX\nCALL 0x00405820\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x004057e5\nJMP 0x0040580d\nMOV RDI,RBX\nCALL 0x00401530\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401530\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0040580d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401640\nTEST EAX,EAX\nJZ 0x00405800\nCMP BPL,0x2a\nJNZ 0x004057c0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x004057c0\nMOV RDI,RBX\nCALL 0x00401530\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x407dc0\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p228
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 22 bf ff ff\n48 85 c0\n41 be b9 74 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 68 bd ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 5a bd ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 50 be ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 28 bd ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 c0 7d 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p229
S'.text:0000000000405790\n.text:0000000000405791\n.text:0000000000405793\n.text:0000000000405794\n.text:0000000000405799\n.text:000000000040579e\n.text:00000000004057a1\n.text:00000000004057a7\n.text:00000000004057ab\n.text:00000000004057b0\n.text:00000000004057b3\n.text:00000000004057b6\n.text:00000000004057b9\n.text:00000000004057bb\n.text:00000000004057c0\n.text:00000000004057c3\n.text:00000000004057c8\n.text:00000000004057cc\n.text:00000000004057d1\n.text:00000000004057d6\n.text:00000000004057db\n.text:00000000004057e0\n.text:00000000004057e3\n.text:00000000004057e5\n.text:00000000004057e8\n.text:00000000004057eb\n.text:00000000004057f0\n.text:00000000004057f2\n.text:00000000004057f4\n.text:00000000004057f8\n.text:00000000004057fa\n.text:00000000004057fe\n.text:0000000000405800\n.text:0000000000405803\n.text:0000000000405808\n.text:000000000040580d\n.text:0000000000405811\n.text:0000000000405816\n.text:000000000040581a\n.text:000000000040581b\n.text:000000000040581d\n.text:000000000040581e\n'
p230
tp231
sS'fadvise'
p232
(S'\n__stdcall fadvise(FILE * fp)\n'
p233
V\u000avoid fadvise(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int __advise;\u000a  \u000a  if (fp != (FILE *)0x0) {\u000a    __fd = fileno((FILE *)fp);\u000a    fdadvise(__fd,0,0,__advise);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p234
S'PUSH RBX\nMOV EBX,ESI\nTEST RDI,RDI\nJZ 0x00402cb8\nCALL 0x00401680\nXOR ESI,ESI\nXOR EDX,EDX\nMOV EDI,EAX\nMOV ECX,EBX\nPOP RBX\nJMP 0x00402c90\nPOP RBX\nRET\n'
p235
S'53\n89 f3\n48 85 ff\n74 10\ne8 d3 e9 ff ff\n31 f6\n31 d2\n89 c7\n89 d9\n5b\neb d8\n5b\nc3\n'
p236
S'.text:0000000000402ca0\n.text:0000000000402ca1\n.text:0000000000402ca3\n.text:0000000000402ca6\n.text:0000000000402ca8\n.text:0000000000402cad\n.text:0000000000402caf\n.text:0000000000402cb1\n.text:0000000000402cb3\n.text:0000000000402cb5\n.text:0000000000402cb6\n.text:0000000000402cb8\n.text:0000000000402cb9\n'
p237
tp238
sS'set_program_name'
p239
(S'\n__stdcall set_program_name(char * argv0)\n'
p240
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p241
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00403091\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401580\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040307b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x406e33\nMOV EDX,0x7\nCALL 0x00401490\nTEST EAX,EAX\nJNZ 0x0040307b\nMOV ESI,0x406e3b\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401490\nTEST EAX,EAX\nJNZ 0x00403078\nADD R14,0x3\nMOV qword ptr [0x0060a280],R14\nMOV RBX,R14\nMOV qword ptr [0x0060a318],RBX\nMOV qword ptr [0x0060a2a8],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060a2c0]\nMOV EDI,0x406dfb\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x004017b0\nCALL 0x00401470\n'
p242
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 57 e5 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 33 6e 40 00\nba 07 00 00 00\ne8 3d e4 ff ff\n85 c0\n75 24\nbe 3b 6e 40 00\nba 03 00 00 00\n4c 89 f7\ne8 27 e4 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 08 72 20 00\n4c 89 f3\n48 89 1d 96 72 20 00\n48 89 1d 1f 72 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 28 72 20 00\nbf fb 6d 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 04 e7 ff ff\ne8 bf e3 ff ff\n'
p243
S'.text:0000000000403010\n.text:0000000000403012\n.text:0000000000403013\n.text:0000000000403014\n.text:0000000000403017\n.text:000000000040301a\n.text:000000000040301c\n.text:0000000000403021\n.text:0000000000403024\n.text:0000000000403029\n.text:000000000040302c\n.text:0000000000403030\n.text:0000000000403034\n.text:0000000000403037\n.text:000000000040303a\n.text:000000000040303e\n.text:0000000000403040\n.text:0000000000403044\n.text:0000000000403049\n.text:000000000040304e\n.text:0000000000403053\n.text:0000000000403055\n.text:0000000000403057\n.text:000000000040305c\n.text:0000000000403061\n.text:0000000000403064\n.text:0000000000403069\n.text:000000000040306b\n.text:000000000040306d\n.text:0000000000403071\n.text:0000000000403078\n.text:000000000040307b\n.text:0000000000403082\n.text:0000000000403089\n.text:000000000040308d\n.text:000000000040308e\n.text:0000000000403090\n.text:0000000000403091\n.text:0000000000403098\n.text:000000000040309d\n.text:00000000004030a2\n.text:00000000004030a7\n.text:00000000004030ac\n'
p244
tp245
sS'fileno'
p246
(S'\n__stdcall fileno(FILE * __stream)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060a138)();\u000a  return iVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x0060a138]\n'
p249
S'ff 25 b2 8a 20 00\n'
p250
S'.plt:0000000000401680\n'
p251
tp252
sS'quotearg_buffer'
p253
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p254
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p255
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60a320\nCMOVNZ RBP,R8\nCALL 0x00401480\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00403230\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p256
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 20 a3 60 00\n49 0f 45 e8\ne8 a8 e2 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p257
S'.text:00000000004031b0\n.text:00000000004031b1\n.text:00000000004031b3\n.text:00000000004031b5\n.text:00000000004031b7\n.text:00000000004031b9\n.text:00000000004031ba\n.text:00000000004031bb\n.text:00000000004031be\n.text:00000000004031c1\n.text:00000000004031c4\n.text:00000000004031c7\n.text:00000000004031ca\n.text:00000000004031cf\n.text:00000000004031d3\n.text:00000000004031d8\n.text:00000000004031db\n.text:00000000004031dd\n.text:00000000004031e1\n.text:00000000004031e5\n.text:00000000004031e9\n.text:00000000004031ed\n.text:00000000004031f0\n.text:00000000004031f3\n.text:00000000004031f6\n.text:00000000004031f9\n.text:00000000004031fc\n.text:00000000004031ff\n.text:0000000000403203\n.text:0000000000403204\n.text:0000000000403209\n.text:000000000040320d\n.text:0000000000403211\n.text:0000000000403213\n.text:0000000000403217\n.text:0000000000403218\n.text:000000000040321a\n.text:000000000040321c\n.text:000000000040321e\n.text:0000000000403220\n.text:0000000000403221\n'
p258
tp259
sS'quotearg_colon'
p260
(S'\n__stdcall quotearg_colon(char * arg)\n'
p261
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p262
S'MOV ESI,0x3a\nJMP 0x00404390\n'
p263
S'be 3a 00 00 00\neb e9\n'
p264
S'.text:00000000004043a0\n.text:00000000004043a5\n'
p265
tp266
sS'mbrtowc'
p267
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060a0a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x0060a0a0]\n'
p270
S'ff 25 4a 8b 20 00\n'
p271
S'.plt:0000000000401550\n'
p272
tp273
sS'dup2'
p274
(S'\n__stdcall dup2(int __fd, int __fd2)\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dup2(int __fd,int __fd2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dup2_0060a0a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x0060a0a8]\n'
p277
S'ff 25 42 8b 20 00\n'
p278
S'.plt:0000000000401560\n'
p279
tp280
sS'rpl_fflush'
p281
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p282
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060a150)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p283
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040552d\nMOV RDI,RBX\nCALL 0x004016f0\nTEST EAX,EAX\nJZ 0x0040552d\nMOV RDI,RBX\nCALL 0x00405540\nMOV RDI,RBX\nPOP RBX\nJMP 0x004016b0\n'
p284
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 cf c1 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 7a c1 ff ff\n'
p285
S'.text:0000000000405510\n.text:0000000000405511\n.text:0000000000405514\n.text:0000000000405517\n.text:0000000000405519\n.text:000000000040551c\n.text:0000000000405521\n.text:0000000000405523\n.text:0000000000405525\n.text:0000000000405528\n.text:000000000040552d\n.text:0000000000405530\n.text:0000000000405531\n'
p286
tp287
sS'__assert_fail'
p288
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p289
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060a0c8)();\u000a  return;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x0060a0c8]\n'
p291
S'ff 25 22 8b 20 00\n'
p292
S'.plt:00000000004015a0\n'
p293
tp294
sS'FUN_00401430'
p295
(S'\n__stdcall FUN_00401430()\n'
p296
V\u000avoid FUN_00401430(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060a010)();\u000a  return;\u000a}\u000a\u000a
p297
S'PUSH qword ptr [0x0060a008]\nJMP qword ptr [0x0060a010]\n'
p298
S'ff 35 d2 8b 20 00\nff 25 d4 8b 20 00\n'
p299
S'.plt:0000000000401430\n.plt:0000000000401436\n'
p300
tp301
sS'initbuffer'
p302
(S'\n__stdcall initbuffer(linebuffer * linebuffer)\n'
p303
V\u000avoid initbuffer(linebuffer *linebuffer)\u000a\u000a{\u000a  *(undefined4 *)&linebuffer->size = 0;\u000a  *(undefined4 *)((long)&linebuffer->size + 4) = 0;\u000a  *(undefined4 *)&linebuffer->length = 0;\u000a  *(undefined4 *)((long)&linebuffer->length + 4) = 0;\u000a  linebuffer->buffer = (char *)0x0;\u000a  return;\u000a}\u000a\u000a
p304
S'XORPS XMM0,XMM0\nMOVUPS xmmword ptr [RDI],XMM0\nMOV qword ptr [RDI + 0x10],0x0\nRET\n'
p305
S'0f 57 c0\n0f 11 07\n48 c7 47 10 00 00 00 00\nc3\n'
p306
S'.text:0000000000402e70\n.text:0000000000402e73\n.text:0000000000402e76\n.text:0000000000402e7e\n'
p307
tp308
sS'setlocale'
p309
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060a190)();\u000a  return pcVar1;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x0060a190]\n'
p312
S'ff 25 5a 8a 20 00\n'
p313
S'.plt:0000000000401730\n'
p314
tp315
sS'c_toupper'
p316
(S'\n__stdcall c_toupper()\n'
p317
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p318
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p319
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p320
S'.text:0000000000405710\n.text:0000000000405713\n.text:0000000000405716\n.text:0000000000405719\n.text:000000000040571c\n'
p321
tp322
sS'bindtextdomain'
p323
(S'\n__stdcall bindtextdomain()\n'
p324
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060a078)();\u000a  return;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x0060a078]\n'
p326
S'ff 25 72 8b 20 00\n'
p327
S'.plt:0000000000401500\n'
p328
tp329
sS'set_char_quoting'
p330
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p331
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p332
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60a320\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p333
S'89 f1\n48 85 ff\nbe 20 a3 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p334
S'.text:0000000000403120\n.text:0000000000403122\n.text:0000000000403125\n.text:000000000040312a\n.text:000000000040312e\n.text:0000000000403130\n.text:0000000000403133\n.text:0000000000403137\n.text:000000000040313c\n.text:000000000040313f\n.text:0000000000403141\n.text:0000000000403143\n.text:0000000000403146\n.text:0000000000403148\n.text:000000000040314b\n.text:000000000040314d\n.text:0000000000403150\n.text:0000000000403155\n'
p335
tp336
sS'quotearg_n'
p337
(S'\n__stdcall quotearg_n(char * arg)\n'
p338
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p339
S'MOV RDX,-0x1\nMOV ECX,0x60a320\nJMP 0x00404010\n'
p340
S'48 c7 c2 ff ff ff ff\nb9 20 a3 60 00\neb 02\n'
p341
S'.text:0000000000404000\n.text:0000000000404007\n.text:000000000040400c\n'
p342
tp343
sS'mbsinit'
p344
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p345
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060a1e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p346
S'JMP qword ptr [0x0060a1e0]\n'
p347
S'ff 25 0a 8a 20 00\n'
p348
S'.plt:00000000004017d0\n'
p349
tp350
sS'dcgettext'
p351
(S'\n__stdcall dcgettext()\n'
p352
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060a080)();\u000a  return;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x0060a080]\n'
p354
S'ff 25 6a 8b 20 00\n'
p355
S'.plt:0000000000401510\n'
p356
tp357
sS'check_file'
p358
(S'\n__stdcall check_file(char * infile, char * outfile)\n'
p359
V\u000avoid check_file(char *infile,char *outfile)\u000a\u000a{\u000a  uint uVar1;\u000a  size_t sVar2;\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  FILE *pFVar5;\u000a  uint *puVar6;\u000a  char *extraout_RAX;\u000a  char *old;\u000a  linebuffer *plVar7;\u000a  char *old_00;\u000a  undefined8 uVar8;\u000a  char *newlen;\u000a  bool bVar9;\u000a  char in_DL;\u000a  long lVar10;\u000a  long lVar11;\u000a  linebuffer *plVar12;\u000a  linebuffer *linebuffer;\u000a  linebuffer *line;\u000a  linebuffer lb1;\u000a  char *local_90;\u000a  char *local_88;\u000a  char *local_78;\u000a  linebuffer local_60;\u000a  linebuffer local_48;\u000a  \u000a  if (((*infile != '-') || (infile[1] != 0)) &&\u000a     (pFVar5 = freopen_safer(infile,"r",stdin), pFVar5 == (FILE *)0x0)) {\u000a    puVar6 = (uint *)__errno_location();\u000a    uVar1 = *puVar6;\u000a    quotearg_n_style_colon((char *)0x0);\u000a    error(1,(ulong)uVar1,&DAT_00406dca);\u000a  }\u000a  if (((*outfile != '-') || (outfile[1] != 0)) &&\u000a     (pFVar5 = freopen_safer(outfile,"w",stdout), pFVar5 == (FILE *)0x0)) {\u000a    puVar6 = (uint *)__errno_location();\u000a    uVar1 = *puVar6;\u000a    quotearg_n_style_colon((char *)0x0);\u000a    error(1,(ulong)uVar1,&DAT_00406dca);\u000a  }\u000a  fadvise(stdin);\u000a  initbuffer(&local_48);\u000a  initbuffer(&local_60);\u000a  if (((output_unique == 1) && (output_first_repeated == 1)) && ((countmode & 1) != 0)) {\u000a    bVar9 = false;\u000a    local_78 = extraout_RAX;\u000a    local_88 = extraout_RAX;\u000a    plVar7 = &local_48;\u000a    plVar12 = &local_60;\u000a    while ((line = plVar7, iVar4 = feof_unlocked((FILE *)stdin), iVar4 == 0 &&\u000a           (plVar7 = readlinebuffer_delim(line,stdin), plVar7 != (linebuffer *)0x0))) {\u000a      old_00 = find_field(line);\u000a      sVar2 = line->length;\u000a      newlen = line->buffer;\u000a      if (plVar12->length == 0) {\u000a        _Var3 = true;\u000aLAB_004025d8:\u000a        if ((grouping != GM_NONE) &&\u000a           (((grouping == GM_PREPEND || (grouping == GM_BOTH)) ||\u000a            ((bVar9 && ((grouping | GM_PREPEND) == GM_SEPARATE)))))) {\u000a          putchar_unlocked((int)in_DL);\u000a        }\u000a      }\u000a      else {\u000a        _Var3 = different(old_00,local_78,(size_t)(newlen + ((sVar2 - 1) - (long)old_00)),\u000a                          (size_t)local_88);\u000a        if (_Var3 != false) goto LAB_004025d8;\u000a      }\u000a      plVar7 = line;\u000a      if ((_Var3 | grouping != GM_NONE) == 1) {\u000a        fwrite_unlocked(line->buffer,1,line->length,(FILE *)stdout);\u000a        bVar9 = true;\u000a        local_78 = old_00;\u000a        local_88 = newlen + ((sVar2 - 1) - (long)old_00);\u000a        plVar7 = plVar12;\u000a        plVar12 = line;\u000a      }\u000a    }\u000a    if (((grouping == GM_BOTH) || (grouping == GM_APPEND)) && (bVar9)) {\u000a      putchar_unlocked((int)in_DL);\u000a    }\u000a  }\u000a  else {\u000a    plVar7 = readlinebuffer_delim(&local_60,stdin);\u000a    if (plVar7 != (linebuffer *)0x0) {\u000a      local_90 = find_field(&local_60);\u000a      bVar9 = true;\u000a      lVar10 = 0;\u000a      newlen = local_60.buffer + ((local_60.length - 1) - (long)local_90);\u000a      plVar7 = &local_48;\u000a      plVar12 = &local_60;\u000aLAB_00402420:\u000a      line = plVar12;\u000a      linebuffer = plVar7;\u000a      iVar4 = feof_unlocked((FILE *)stdin);\u000a      if (iVar4 != 0) goto LAB_0040250f;\u000a      plVar7 = readlinebuffer_delim(linebuffer,stdin);\u000a      if (plVar7 == (linebuffer *)0x0) {\u000a        iVar4 = ferror_unlocked((FILE *)stdin);\u000a        if (iVar4 != 0) goto LAB_00402643;\u000a        goto LAB_0040250f;\u000a      }\u000a      old = find_field(linebuffer);\u000a      old_00 = linebuffer->buffer + ((linebuffer->length - 1) - (long)old);\u000a      _Var3 = different(old,local_90,(size_t)old_00,(size_t)newlen);\u000a      lVar10 = lVar10 + (ulong)(_Var3 ^ 1);\u000a      lVar11 = lVar10 - (ulong)(lVar10 == -1);\u000a      if (delimit_groups == DM_NONE) {\u000a        if (_Var3 != false) goto LAB_004023d0;\u000aLAB_004024e9:\u000a        lVar10 = lVar11;\u000a        plVar7 = linebuffer;\u000a        plVar12 = line;\u000a        if (output_later_repeated != 1) goto LAB_00402420;\u000a      }\u000a      else {\u000a        if (_Var3 == false) {\u000a          if ((lVar11 != 1) ||\u000a             ((delimit_groups != DM_PREPEND && ((delimit_groups != DM_SEPARATE || (bVar9))))))\u000a          goto LAB_004024e9;\u000a          putchar_unlocked((int)in_DL);\u000a          lVar10 = lVar11;\u000a          plVar7 = linebuffer;\u000a          plVar12 = line;\u000a          if (output_later_repeated == 1) goto LAB_004023d0;\u000a          goto LAB_00402420;\u000a        }\u000a        if (lVar11 != 0) {\u000a          bVar9 = false;\u000a        }\u000a      }\u000aLAB_004023d0:\u000a      writeline(line,(ulong)(_Var3 ^ 1));\u000a      lVar10 = 0;\u000a      local_90 = old;\u000a      newlen = old_00;\u000a      plVar7 = line;\u000a      plVar12 = linebuffer;\u000a      if (_Var3 == false) {\u000a        lVar10 = lVar11;\u000a        local_90 = old;\u000a        newlen = old_00;\u000a        plVar7 = line;\u000a        plVar12 = linebuffer;\u000a      }\u000a      goto LAB_00402420;\u000a    }\u000a  }\u000aLAB_00402643:\u000a  iVar4 = ferror_unlocked((FILE *)stdin);\u000a  if ((iVar4 != 0) || (iVar4 = rpl_fclose(stdin), iVar4 != 0)) {\u000a    uVar8 = dcgettext(0,"error reading %s",5);\u000a    newlen = quotearg_style((char *)0x4);\u000a    error(1,0,uVar8,newlen);\u000a  }\u000a  free(local_48.buffer);\u000a  free(local_60.buffer);\u000a  return;\u000aLAB_0040250f:\u000a  writeline(line,0);\u000a  goto LAB_00402643;\u000a}\u000a\u000a
p360
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x68\nMOV R14D,EDX\nMOV RBP,RSI\nMOV R15,RDI\nCMP byte ptr [R15],0x2d\nJNZ 0x00402274\nCMP byte ptr [R15 + 0x1],0x0\nJZ 0x004022b9\nMOV RDX,qword ptr [0x0060a290]\nMOV ESI,0x406dd7\nMOV RDI,R15\nCALL 0x00402cc0\nTEST RAX,RAX\nJNZ 0x004022b9\nCALL 0x00401480\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x004043c0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406dca\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x00401750\nCMP byte ptr [RBP],0x2d\nJNZ 0x004022c5\nCMP byte ptr [RBP + 0x1],0x0\nJZ 0x0040230a\nMOV RDX,qword ptr [0x0060a288]\nMOV ESI,0x406d55\nMOV RDI,RBP\nCALL 0x00402cc0\nTEST RAX,RAX\nJNZ 0x0040230a\nCALL 0x00401480\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,RBP\nCALL 0x004043c0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406dca\nXOR EAX,EAX\nMOV ESI,EBX\nCALL 0x00401750\nMOV RDI,qword ptr [0x0060a290]\nMOV ESI,0x2\nCALL 0x00402ca0\nLEA RBP,[RSP + 0x50]\nMOV RDI,RBP\nCALL 0x00402e70\nLEA RBX,[RSP + 0x38]\nMOV RDI,RBX\nCALL 0x00402e70\nCMP byte ptr [0x0060a2f1],0x1\nMOV qword ptr [RSP + 0x30],R15\nJNZ 0x00402375\nCMP byte ptr [0x0060a2f0],0x1\nJNZ 0x00402375\nTEST byte ptr [0x0060a2f4],0x1\nJZ 0x00402375\nMOVSX R12D,R14B\nLEA RBP,[RSP + 0x50]\nMOV dword ptr [RSP + 0x8],0x0\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x00402552\nMOV RSI,qword ptr [0x0060a290]\nMOVSX EDX,R14B\nLEA RBX,[RSP + 0x38]\nMOV RDI,RBX\nMOV dword ptr [RSP + 0x10],EDX\nCALL 0x00402e90\nTEST RAX,RAX\nJZ 0x00402643\nMOV RDI,RBX\nCALL 0x004026c0\nMOV R14,qword ptr [RSP + 0x40]\nDEC R14\nMOV qword ptr [RSP + 0x8],RAX\nSUB R14,RAX\nADD R14,qword ptr [RSP + 0x48]\nMOV CL,0x1\nXOR EAX,EAX\nJMP 0x004023fd\nTEST RBX,RBX\nJZ 0x004023d0\nMOV dword ptr [RSP + 0x1c],0x0\nNOP word ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RSP + 0x28]\nMOV ESI,R15D\nMOV RDX,RBX\nCALL 0x004027d0\nTEST R13B,R13B\nMOV EAX,0x0\nCMOVZ RAX,RBX\nMOV qword ptr [RSP + 0x8],R12\nMOV RBX,RBP\nMOV RBP,qword ptr [RSP + 0x28]\nMOV ECX,dword ptr [RSP + 0x1c]\nMOV qword ptr [RSP + 0x28],RBX\nMOV qword ptr [RSP + 0x20],R14\nMOV dword ptr [RSP + 0x1c],ECX\nAND CL,0x1\nMOV byte ptr [RSP + 0x7],CL\nMOV RBX,RAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [0x0060a290]\nCALL 0x004017f0\nTEST EAX,EAX\nJNZ 0x0040250f\nMOV RSI,qword ptr [0x0060a290]\nMOV RDI,RBP\nMOV EDX,dword ptr [RSP + 0x10]\nCALL 0x00402e90\nTEST RAX,RAX\nJZ 0x004024fb\nMOV RDI,RBP\nCALL 0x004026c0\nMOV R12,RAX\nMOV RAX,qword ptr [RBP + 0x8]\nMOV RCX,qword ptr [RBP + 0x10]\nSUB RCX,R12\nLEA R14,[RAX + RCX*0x1 + -0x1]\nMOV RDI,R12\nMOV RSI,qword ptr [RSP + 0x8]\nMOV RDX,R14\nMOV RCX,qword ptr [RSP + 0x20]\nCALL 0x00402770\nMOV R13D,EAX\nXOR AL,0x1\nMOVZX R15D,AL\nADD RBX,R15\nXOR EAX,EAX\nCMP RBX,-0x1\nSETZ AL\nSUB RBX,RAX\nMOV EAX,dword ptr [0x0060a2f8]\nTEST EAX,EAX\nJZ 0x004024e0\nTEST R13B,R13B\nJNZ 0x004023bd\nCMP RBX,0x1\nJNZ 0x004024e9\nCMP EAX,0x1\nJZ 0x004024c2\nCMP EAX,0x2\nJNZ 0x004024e9\nCMP byte ptr [RSP + 0x7],0x0\nJNZ 0x004024e9\nMOV EDI,dword ptr [RSP + 0x10]\nCALL 0x00401670\nCMP byte ptr [0x0060a2f2],0x1\nJNZ 0x00402420\nJMP 0x004023d0\nTEST R13B,R13B\nJNZ 0x004023d0\nCMP byte ptr [0x0060a2f2],0x1\nJNZ 0x00402420\nJMP 0x004023d0\nMOV RDI,qword ptr [0x0060a290]\nCALL 0x00401620\nTEST EAX,EAX\nJNZ 0x00402643\nXOR ESI,ESI\nMOV RDI,qword ptr [RSP + 0x28]\nMOV RDX,RBX\nCALL 0x004027d0\nJMP 0x00402643\nMOV RDX,qword ptr [RBP + 0x8]\nMOV RDI,qword ptr [RBP + 0x10]\nMOV RCX,qword ptr [0x0060a288]\nMOV ESI,0x1\nCALL 0x00401700\nMOV AL,0x1\nMOV dword ptr [RSP + 0x8],EAX\nMOV qword ptr [RSP + 0x10],R13\nMOV qword ptr [RSP + 0x20],RBX\nMOV RBX,RBP\nMOV RBP,R15\nMOV R15,RBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,qword ptr [0x0060a290]\nCALL 0x004017f0\nTEST EAX,EAX\nJNZ 0x00402624\nMOV RSI,qword ptr [0x0060a290]\nMOV RDI,RBP\nMOV EDX,R12D\nCALL 0x00402e90\nTEST RAX,RAX\nJZ 0x00402624\nMOV RDI,RBP\nCALL 0x004026c0\nMOV RBX,RAX\nMOV RAX,qword ptr [RBP + 0x8]\nMOV RCX,qword ptr [RBP + 0x10]\nSUB RCX,RBX\nLEA R13,[RAX + RCX*0x1 + -0x1]\nCMP qword ptr [R15 + 0x8],0x0\nJZ 0x004025d0\nMOV RDI,RBX\nMOV RSI,qword ptr [RSP + 0x20]\nMOV RDX,R13\nMOV RCX,qword ptr [RSP + 0x10]\nCALL 0x00402770\nMOV R14D,EAX\nTEST R14B,R14B\nJNZ 0x004025d8\nJMP 0x00402608\nMOV R14B,0x1\nTEST R14B,R14B\nJZ 0x00402608\nMOV EAX,dword ptr [0x0060a2fc]\nTEST EAX,EAX\nJZ 0x00402608\nCMP EAX,0x1\nJZ 0x00402600\nCMP EAX,0x4\nJZ 0x00402600\nCMP byte ptr [RSP + 0x8],0x0\nJZ 0x00402608\nOR EAX,0x1\nCMP EAX,0x3\nJNZ 0x00402608\nNOP dword ptr [RAX + RAX*0x1]\nMOV EDI,R12D\nCALL 0x00401670\nCMP dword ptr [0x0060a2fc],0x0\nSETNZ AL\nOR R14B,AL\nCMP R14B,0x1\nJNZ 0x00402560\nJMP 0x00402523\nMOV EAX,dword ptr [0x0060a2fc]\nCMP EAX,0x4\nJZ 0x00402634\nCMP EAX,0x2\nJNZ 0x00402643\nCMP byte ptr [RSP + 0x8],0x0\nJZ 0x00402643\nMOV EDI,R12D\nCALL 0x00401670\nMOV RDI,qword ptr [0x0060a290]\nCALL 0x00401620\nTEST EAX,EAX\nJNZ 0x00402663\nMOV RDI,qword ptr [0x0060a290]\nCALL 0x00405490\nTEST EAX,EAX\nJZ 0x0040269a\nXOR EDI,EDI\nMOV ESI,0x406d57\nMOV EDX,0x5\nCALL 0x00401510\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x30]\nCALL 0x004042e0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401750\nMOV RDI,qword ptr [RSP + 0x60]\nCALL 0x00401460\nMOV RDI,qword ptr [RSP + 0x48]\nCALL 0x00401460\nADD RSP,0x68\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p361
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 68\n41 89 d6\n48 89 f5\n49 89 ff\n41 80 3f 2d\n75 07\n41 80 7f 01 00\n74 45\n48 8b 15 15 80 20 00\nbe d7 6d 40 00\n4c 89 ff\ne8 38 0a 00 00\n48 85 c0\n75 2c\ne8 ee f1 ff ff\n8b 18\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 1d 21 00 00\n48 89 c1\nbf 01 00 00 00\nba ca 6d 40 00\n31 c0\n89 de\ne8 97 f4 ff ff\n80 7d 00 2d\n75 06\n80 7d 01 00\n74 45\n48 8b 15 bc 7f 20 00\nbe 55 6d 40 00\n48 89 ef\ne8 e7 09 00 00\n48 85 c0\n75 2c\ne8 9d f1 ff ff\n8b 18\n31 ff\nbe 03 00 00 00\n48 89 ea\ne8 cc 20 00 00\n48 89 c1\nbf 01 00 00 00\nba ca 6d 40 00\n31 c0\n89 de\ne8 46 f4 ff ff\n48 8b 3d 7f 7f 20 00\nbe 02 00 00 00\ne8 85 09 00 00\n48 8d 6c 24 50\n48 89 ef\ne8 48 0b 00 00\n48 8d 5c 24 38\n48 89 df\ne8 3b 0b 00 00\n80 3d b5 7f 20 00 01\n4c 89 7c 24 30\n75 32\n80 3d a6 7f 20 00 01\n75 29\nf6 05 a1 7f 20 00 01\n74 20\n45 0f be e6\n48 8d 6c 24 50\nc7 44 24 08 00 00 00 00\n48 89 44 24 10\n48 89 44 24 20\ne9 dd 01 00 00\n48 8b 35 14 7f 20 00\n41 0f be d6\n48 8d 5c 24 38\n48 89 df\n89 54 24 10\ne8 ff 0a 00 00\n48 85 c0\n0f 84 a9 02 00 00\n48 89 df\ne8 1e 03 00 00\n4c 8b 74 24 40\n49 ff ce\n48 89 44 24 08\n49 29 c6\n4c 03 74 24 48\nb1 01\n31 c0\neb 40\n48 85 db\n74 0e\nc7 44 24 1c 00 00 00 00\n66 0f 1f 44 00 00\n48 8b 7c 24 28\n44 89 fe\n48 89 da\ne8 f0 03 00 00\n45 84 ed\nb8 00 00 00 00\n48 0f 44 c3\n4c 89 64 24 08\n48 89 eb\n48 8b 6c 24 28\n8b 4c 24 1c\n48 89 5c 24 28\n4c 89 74 24 20\n89 4c 24 1c\n80 e1 01\n88 4c 24 07\n48 89 c3\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 3d 69 7e 20 00\ne8 c4 f3 ff ff\n85 c0\n0f 85 db 00 00 00\n48 8b 35 55 7e 20 00\n48 89 ef\n8b 54 24 10\ne8 49 0a 00 00\n48 85 c0\n0f 84 ab 00 00 00\n48 89 ef\ne8 68 02 00 00\n49 89 c4\n48 8b 45 08\n48 8b 4d 10\n4c 29 e1\n4c 8d 74 08 ff\n4c 89 e7\n48 8b 74 24 08\n4c 89 f2\n48 8b 4c 24 20\ne8 f0 02 00 00\n41 89 c5\n34 01\n44 0f b6 f8\n4c 01 fb\n31 c0\n48 83 fb ff\n0f 94 c0\n48 29 c3\n8b 05 5a 7e 20 00\n85 c0\n74 3e\n45 84 ed\n0f 85 12 ff ff ff\n48 83 fb 01\n75 38\n83 f8 01\n74 0c\n83 f8 02\n75 2e\n80 7c 24 07 00\n75 27\n8b 7c 24 10\ne8 a5 f1 ff ff\n80 3d 20 7e 20 00 01\n0f 85 48 ff ff ff\ne9 f3 fe ff ff\n45 84 ed\n0f 85 e7 fe ff ff\n80 3d 02 7e 20 00 01\n0f 85 2a ff ff ff\ne9 d5 fe ff ff\n48 8b 3d 8e 7d 20 00\ne8 19 f1 ff ff\n85 c0\n0f 85 34 01 00 00\n31 f6\n48 8b 7c 24 28\n48 89 da\ne8 b2 02 00 00\ne9 20 01 00 00\n48 8b 55 08\n48 8b 7d 10\n48 8b 0d 56 7d 20 00\nbe 01 00 00 00\ne8 c4 f1 ff ff\nb0 01\n89 44 24 08\n4c 89 6c 24 10\n48 89 5c 24 20\n48 89 eb\n4c 89 fd\n49 89 df\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 3d 29 7d 20 00\ne8 84 f2 ff ff\n85 c0\n0f 85 b0 00 00 00\n48 8b 35 15 7d 20 00\n48 89 ef\n44 89 e2\ne8 0a 09 00 00\n48 85 c0\n0f 84 95 00 00 00\n48 89 ef\ne8 29 01 00 00\n48 89 c3\n48 8b 45 08\n48 8b 4d 10\n48 29 d9\n4c 8d 6c 08 ff\n49 83 7f 08 00\n74 1f\n48 89 df\n48 8b 74 24 20\n4c 89 ea\n48 8b 4c 24 10\ne8 aa 01 00 00\n41 89 c6\n45 84 f6\n75 0a\neb 38\n41 b6 01\n45 84 f6\n74 30\n8b 05 1e 7d 20 00\n85 c0\n74 26\n83 f8 01\n74 19\n83 f8 04\n74 14\n80 7c 24 08 00\n74 15\n83 c8 01\n83 f8 03\n75 0d\n0f 1f 44 00 00\n44 89 e7\ne8 68 f0 ff ff\n83 3d ed 7c 20 00 00\n0f 95 c0\n41 08 c6\n41 80 fe 01\n0f 85 41 ff ff ff\ne9 ff fe ff ff\n8b 05 d2 7c 20 00\n83 f8 04\n74 05\n83 f8 02\n75 0f\n80 7c 24 08 00\n74 08\n44 89 e7\ne8 2d f0 ff ff\n48 8b 3d 46 7c 20 00\ne8 d1 ef ff ff\n85 c0\n75 10\n48 8b 3d 36 7c 20 00\ne8 31 2e 00 00\n85 c0\n74 37\n31 ff\nbe 57 6d 40 00\nba 05 00 00 00\ne8 9c ee ff ff\n48 89 c3\nbf 04 00 00 00\n48 8b 74 24 30\ne8 5a 1c 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 b6 f0 ff ff\n48 8b 7c 24 60\ne8 bc ed ff ff\n48 8b 7c 24 48\ne8 b2 ed ff ff\n48 83 c4 68\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p362
S'.text:0000000000402250\n.text:0000000000402251\n.text:0000000000402253\n.text:0000000000402255\n.text:0000000000402257\n.text:0000000000402259\n.text:000000000040225a\n.text:000000000040225e\n.text:0000000000402261\n.text:0000000000402264\n.text:0000000000402267\n.text:000000000040226b\n.text:000000000040226d\n.text:0000000000402272\n.text:0000000000402274\n.text:000000000040227b\n.text:0000000000402280\n.text:0000000000402283\n.text:0000000000402288\n.text:000000000040228b\n.text:000000000040228d\n.text:0000000000402292\n.text:0000000000402294\n.text:0000000000402296\n.text:000000000040229b\n.text:000000000040229e\n.text:00000000004022a3\n.text:00000000004022a6\n.text:00000000004022ab\n.text:00000000004022b0\n.text:00000000004022b2\n.text:00000000004022b4\n.text:00000000004022b9\n.text:00000000004022bd\n.text:00000000004022bf\n.text:00000000004022c3\n.text:00000000004022c5\n.text:00000000004022cc\n.text:00000000004022d1\n.text:00000000004022d4\n.text:00000000004022d9\n.text:00000000004022dc\n.text:00000000004022de\n.text:00000000004022e3\n.text:00000000004022e5\n.text:00000000004022e7\n.text:00000000004022ec\n.text:00000000004022ef\n.text:00000000004022f4\n.text:00000000004022f7\n.text:00000000004022fc\n.text:0000000000402301\n.text:0000000000402303\n.text:0000000000402305\n.text:000000000040230a\n.text:0000000000402311\n.text:0000000000402316\n.text:000000000040231b\n.text:0000000000402320\n.text:0000000000402323\n.text:0000000000402328\n.text:000000000040232d\n.text:0000000000402330\n.text:0000000000402335\n.text:000000000040233c\n.text:0000000000402341\n.text:0000000000402343\n.text:000000000040234a\n.text:000000000040234c\n.text:0000000000402353\n.text:0000000000402355\n.text:0000000000402359\n.text:000000000040235e\n.text:0000000000402366\n.text:000000000040236b\n.text:0000000000402370\n.text:0000000000402375\n.text:000000000040237c\n.text:0000000000402380\n.text:0000000000402385\n.text:0000000000402388\n.text:000000000040238c\n.text:0000000000402391\n.text:0000000000402394\n.text:000000000040239a\n.text:000000000040239d\n.text:00000000004023a2\n.text:00000000004023a7\n.text:00000000004023aa\n.text:00000000004023af\n.text:00000000004023b2\n.text:00000000004023b7\n.text:00000000004023b9\n.text:00000000004023bb\n.text:00000000004023bd\n.text:00000000004023c0\n.text:00000000004023c2\n.text:00000000004023ca\n.text:00000000004023d0\n.text:00000000004023d5\n.text:00000000004023d8\n.text:00000000004023db\n.text:00000000004023e0\n.text:00000000004023e3\n.text:00000000004023e8\n.text:00000000004023ec\n.text:00000000004023f1\n.text:00000000004023f4\n.text:00000000004023f9\n.text:00000000004023fd\n.text:0000000000402402\n.text:0000000000402407\n.text:000000000040240b\n.text:000000000040240e\n.text:0000000000402412\n.text:0000000000402415\n.text:0000000000402420\n.text:0000000000402427\n.text:000000000040242c\n.text:000000000040242e\n.text:0000000000402434\n.text:000000000040243b\n.text:000000000040243e\n.text:0000000000402442\n.text:0000000000402447\n.text:000000000040244a\n.text:0000000000402450\n.text:0000000000402453\n.text:0000000000402458\n.text:000000000040245b\n.text:000000000040245f\n.text:0000000000402463\n.text:0000000000402466\n.text:000000000040246b\n.text:000000000040246e\n.text:0000000000402473\n.text:0000000000402476\n.text:000000000040247b\n.text:0000000000402480\n.text:0000000000402483\n.text:0000000000402485\n.text:0000000000402489\n.text:000000000040248c\n.text:000000000040248e\n.text:0000000000402492\n.text:0000000000402495\n.text:0000000000402498\n.text:000000000040249e\n.text:00000000004024a0\n.text:00000000004024a2\n.text:00000000004024a5\n.text:00000000004024ab\n.text:00000000004024af\n.text:00000000004024b1\n.text:00000000004024b4\n.text:00000000004024b6\n.text:00000000004024b9\n.text:00000000004024bb\n.text:00000000004024c0\n.text:00000000004024c2\n.text:00000000004024c6\n.text:00000000004024cb\n.text:00000000004024d2\n.text:00000000004024d8\n.text:00000000004024e0\n.text:00000000004024e3\n.text:00000000004024e9\n.text:00000000004024f0\n.text:00000000004024f6\n.text:00000000004024fb\n.text:0000000000402502\n.text:0000000000402507\n.text:0000000000402509\n.text:000000000040250f\n.text:0000000000402511\n.text:0000000000402516\n.text:0000000000402519\n.text:000000000040251e\n.text:0000000000402523\n.text:0000000000402527\n.text:000000000040252b\n.text:0000000000402532\n.text:0000000000402537\n.text:000000000040253c\n.text:000000000040253e\n.text:0000000000402542\n.text:0000000000402547\n.text:000000000040254c\n.text:000000000040254f\n.text:0000000000402552\n.text:0000000000402555\n.text:0000000000402560\n.text:0000000000402567\n.text:000000000040256c\n.text:000000000040256e\n.text:0000000000402574\n.text:000000000040257b\n.text:000000000040257e\n.text:0000000000402581\n.text:0000000000402586\n.text:0000000000402589\n.text:000000000040258f\n.text:0000000000402592\n.text:0000000000402597\n.text:000000000040259a\n.text:000000000040259e\n.text:00000000004025a2\n.text:00000000004025a5\n.text:00000000004025aa\n.text:00000000004025af\n.text:00000000004025b1\n.text:00000000004025b4\n.text:00000000004025b9\n.text:00000000004025bc\n.text:00000000004025c1\n.text:00000000004025c6\n.text:00000000004025c9\n.text:00000000004025cc\n.text:00000000004025ce\n.text:00000000004025d0\n.text:00000000004025d3\n.text:00000000004025d6\n.text:00000000004025d8\n.text:00000000004025de\n.text:00000000004025e0\n.text:00000000004025e2\n.text:00000000004025e5\n.text:00000000004025e7\n.text:00000000004025ea\n.text:00000000004025ec\n.text:00000000004025f1\n.text:00000000004025f3\n.text:00000000004025f6\n.text:00000000004025f9\n.text:00000000004025fb\n.text:0000000000402600\n.text:0000000000402603\n.text:0000000000402608\n.text:000000000040260f\n.text:0000000000402612\n.text:0000000000402615\n.text:0000000000402619\n.text:000000000040261f\n.text:0000000000402624\n.text:000000000040262a\n.text:000000000040262d\n.text:000000000040262f\n.text:0000000000402632\n.text:0000000000402634\n.text:0000000000402639\n.text:000000000040263b\n.text:000000000040263e\n.text:0000000000402643\n.text:000000000040264a\n.text:000000000040264f\n.text:0000000000402651\n.text:0000000000402653\n.text:000000000040265a\n.text:000000000040265f\n.text:0000000000402661\n.text:0000000000402663\n.text:0000000000402665\n.text:000000000040266a\n.text:000000000040266f\n.text:0000000000402674\n.text:0000000000402677\n.text:000000000040267c\n.text:0000000000402681\n.text:0000000000402686\n.text:0000000000402689\n.text:000000000040268e\n.text:0000000000402690\n.text:0000000000402692\n.text:0000000000402695\n.text:000000000040269a\n.text:000000000040269f\n.text:00000000004026a4\n.text:00000000004026a9\n.text:00000000004026ae\n.text:00000000004026b2\n.text:00000000004026b3\n.text:00000000004026b5\n.text:00000000004026b7\n.text:00000000004026b9\n.text:00000000004026bb\n.text:00000000004026bc\n'
p363
tp364
sS'close_stream'
p365
(S'\n__stdcall close_stream(FILE * stream)\n'
p366
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p367
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004014c0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401620\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00405490\nTEST EBP,EBP\nJZ 0x0040575b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040577f\nCALL 0x00401480\nMOV dword ptr [RAX],0x0\nJMP 0x0040577f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040577f\nTEST CL,CL\nJNZ 0x0040577f\nCALL 0x00401480\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p368
S'55\n41 56\n53\n48 89 fb\ne8 94 bd ff ff\n49 89 c6\n48 89 df\ne8 e9 be ff ff\n89 c5\n48 89 df\ne8 4f fd ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 2d bd ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 0e bd ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p369
S'.text:0000000000405720\n.text:0000000000405721\n.text:0000000000405723\n.text:0000000000405724\n.text:0000000000405727\n.text:000000000040572c\n.text:000000000040572f\n.text:0000000000405732\n.text:0000000000405737\n.text:0000000000405739\n.text:000000000040573c\n.text:0000000000405741\n.text:0000000000405743\n.text:0000000000405745\n.text:000000000040574a\n.text:000000000040574c\n.text:000000000040574e\n.text:0000000000405753\n.text:0000000000405759\n.text:000000000040575b\n.text:000000000040575d\n.text:0000000000405760\n.text:0000000000405762\n.text:0000000000405764\n.text:0000000000405767\n.text:0000000000405769\n.text:000000000040576b\n.text:000000000040576d\n.text:0000000000405772\n.text:0000000000405774\n.text:0000000000405777\n.text:000000000040577c\n.text:000000000040577f\n.text:0000000000405781\n.text:0000000000405782\n.text:0000000000405784\n.text:0000000000405785\n'
p370
tp371
sS'quotearg_colon_mem'
p372
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p373
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p374
S'MOV EDX,0x3a\nJMP 0x00404320\n'
p375
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p376
S'.text:00000000004043b0\n.text:00000000004043b5\n'
p377
tp378
sS'__ctype_toupper_loc'
p379
(S'\n__stdcall __ctype_toupper_loc()\n'
p380
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__int32_t ** __ctype_toupper_loc(void)\u000a\u000a{\u000a  __int32_t **pp_Var1;\u000a  \u000a  pp_Var1 = (__int32_t **)(*(code *)PTR___ctype_toupper_loc_0060a018)();\u000a  return pp_Var1;\u000a}\u000a\u000a
p381
S'JMP qword ptr [0x0060a018]\n'
p382
S'ff 25 d2 8b 20 00\n'
p383
S'.plt:0000000000401440\n'
p384
tp385
sS'quotearg_free'
p386
(S'\n__stdcall quotearg_free()\n'
p387
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p388
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060a228]\nCMP dword ptr [0x0060a230],0x2\nJC 0x00403faa\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401460\nINC RBX\nMOV EAX,dword ptr [0x0060a230]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00403f90\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60a360\nCMP RDI,RAX\nJZ 0x00403fd3\nCALL 0x00401460\nMOV qword ptr [0x0060a238],0x100\nMOV qword ptr [0x0060a240],0x60a360\nMOV EAX,0x60a238\nCMP R14,RAX\nJZ 0x00403ff0\nMOV RDI,R14\nCALL 0x00401460\nMOV qword ptr [0x0060a228],0x60a238\nMOV dword ptr [0x0060a230],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p389
S'41 57\n41 56\n53\n4c 8b 35 ac 62 20 00\n83 3d ad 62 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 c8 d4 ff ff\n48 ff c3\n8b 05 8f 62 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 60 a3 60 00\n48 39 c7\n74 1b\ne8 a3 d4 ff ff\n48 c7 05 70 62 20 00 00 01 00 00\n48 c7 05 6d 62 20 00 60 a3 60 00\nb8 38 a2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 7b d4 ff ff\n48 c7 05 38 62 20 00 38 a2 60 00\nc7 05 36 62 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p390
S'.text:0000000000403f70\n.text:0000000000403f72\n.text:0000000000403f74\n.text:0000000000403f75\n.text:0000000000403f7c\n.text:0000000000403f83\n.text:0000000000403f85\n.text:0000000000403f89\n.text:0000000000403f8e\n.text:0000000000403f90\n.text:0000000000403f93\n.text:0000000000403f98\n.text:0000000000403f9b\n.text:0000000000403fa1\n.text:0000000000403fa5\n.text:0000000000403fa8\n.text:0000000000403faa\n.text:0000000000403fae\n.text:0000000000403fb3\n.text:0000000000403fb6\n.text:0000000000403fb8\n.text:0000000000403fbd\n.text:0000000000403fc8\n.text:0000000000403fd3\n.text:0000000000403fd8\n.text:0000000000403fdb\n.text:0000000000403fdd\n.text:0000000000403fe0\n.text:0000000000403fe5\n.text:0000000000403ff0\n.text:0000000000403ffa\n.text:0000000000403ffb\n.text:0000000000403ffd\n.text:0000000000403fff\n'
p391
tp392
sS'quotearg_mem'
p393
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p394
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p395
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004041d0\n'
p396
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p397
S'.text:00000000004041f0\n.text:00000000004041f3\n.text:00000000004041f6\n.text:00000000004041f8\n.text:00000000004041fb\n.text:00000000004041fe\n'
p398
tp399
sS'strcoll'
p400
(S'\n__stdcall strcoll(char * __s1, char * __s2)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcoll(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcoll_0060a168)();\u000a  return iVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x0060a168]\n'
p403
S'ff 25 82 8a 20 00\n'
p404
S'.plt:00000000004016e0\n'
p405
tp406
sS'xcalloc'
p407
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p408
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p409
S'PUSH RAX\nCALL 0x00405440\nTEST RAX,RAX\nJZ 0x00404f5d\nPOP RCX\nRET\nCALL 0x00404fc0\n'
p410
S'50\ne8 ea 04 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p411
S'.text:0000000000404f50\n.text:0000000000404f51\n.text:0000000000404f56\n.text:0000000000404f59\n.text:0000000000404f5b\n.text:0000000000404f5c\n.text:0000000000404f5d\n'
p412
tp413
sS'deregister_tm_clones'
p414
(S'\n__stdcall deregister_tm_clones()\n'
p415
V\u000a/* WARNING: Removing unreachable block (ram,0x00401855) */\u000a/* WARNING: Removing unreachable block (ram,0x0040185f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p416
S'MOV EAX,0x60a287\nPUSH RBP\nSUB RAX,0x60a280\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401870\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401870\nPOP RBP\nMOV EDI,0x60a280\nJMP RAX\nPOP RBP\nRET\n'
p417
S'b8 87 a2 60 00\n55\n48 2d 80 a2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 80 a2 60 00\nff e0\n5d\nc3\n'
p418
S'.text:0000000000401840\n.text:0000000000401845\n.text:0000000000401846\n.text:000000000040184c\n.text:0000000000401850\n.text:0000000000401853\n.text:0000000000401855\n.text:000000000040185a\n.text:000000000040185d\n.text:000000000040185f\n.text:0000000000401860\n.text:0000000000401865\n.text:0000000000401870\n.text:0000000000401871\n'
p419
tp420
sS'memcoll0'
p421
(S'\n__stdcall memcoll0(char * s1, size_t s1size, char * s2, size_t s2size)\n'
p422
V\u000aint memcoll0(char *s1,size_t s1size,char *s2,size_t s2size)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  \u000a  if (s1size == s2size) {\u000a    iVar1 = memcmp(s1,s2,s1size);\u000a    if (iVar1 == 0) {\u000a      piVar2 = __errno_location();\u000a      *piVar2 = 0;\u000a      return 0;\u000a    }\u000a  }\u000a  iVar1 = strcoll_loop(s1,s1size,s2,s2size);\u000a  return iVar1;\u000a}\u000a\u000a
p423
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RCX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R12,RDI\nCMP RBX,R15\nJNZ 0x00405beb\nMOV RDI,R12\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x00401600\nTEST EAX,EAX\nJZ 0x00405c07\nMOV RDI,R12\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00405b40\nCALL 0x00401480\nMOV dword ptr [RAX],0x0\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p424
S'41 57\n41 56\n41 54\n53\n50\n49 89 cf\n49 89 d6\n48 89 f3\n49 89 fc\n4c 39 fb\n75 12\n4c 89 e7\n4c 89 f6\n48 89 da\ne8 19 ba ff ff\n85 c0\n74 1c\n4c 89 e7\n48 89 de\n4c 89 f2\n4c 89 f9\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 39 ff ff ff\ne8 74 b8 ff ff\nc7 00 00 00 00 00\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p425
S'.text:0000000000405bc0\n.text:0000000000405bc2\n.text:0000000000405bc4\n.text:0000000000405bc6\n.text:0000000000405bc7\n.text:0000000000405bc8\n.text:0000000000405bcb\n.text:0000000000405bce\n.text:0000000000405bd1\n.text:0000000000405bd4\n.text:0000000000405bd7\n.text:0000000000405bd9\n.text:0000000000405bdc\n.text:0000000000405bdf\n.text:0000000000405be2\n.text:0000000000405be7\n.text:0000000000405be9\n.text:0000000000405beb\n.text:0000000000405bee\n.text:0000000000405bf1\n.text:0000000000405bf4\n.text:0000000000405bf7\n.text:0000000000405bfb\n.text:0000000000405bfc\n.text:0000000000405bfe\n.text:0000000000405c00\n.text:0000000000405c02\n.text:0000000000405c07\n.text:0000000000405c0c\n.text:0000000000405c12\n.text:0000000000405c14\n.text:0000000000405c18\n.text:0000000000405c19\n.text:0000000000405c1b\n.text:0000000000405c1d\n.text:0000000000405c1f\n'
p426
tp427
sS'strtol'
p428
(S'\n__stdcall strtol(char * __nptr, char * * __endptr, int __base)\n'
p429
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along strtol(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_strtol_0060a120)();\u000a  return lVar1;\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x0060a120]\n'
p431
S'ff 25 ca 8a 20 00\n'
p432
S'.plt:0000000000401650\n'
p433
tp434
sS'clear_ungetc_buffer_preserving_position'
p435
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p436
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p437
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405547\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00405560\n'
p438
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p439
S'.text:0000000000405540\n.text:0000000000405544\n.text:0000000000405546\n.text:0000000000405547\n.text:0000000000405549\n.text:000000000040554e\n'
p440
tp441
sS'xnmalloc'
p442
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p443
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p444
S'MOV RAX,RDI\nMUL RSI\nJO 0x00404e21\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00404e30\nPUSH RAX\nCALL 0x00404fc0\n'
p445
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p446
S'.text:0000000000404e10\n.text:0000000000404e13\n.text:0000000000404e16\n.text:0000000000404e18\n.text:0000000000404e1c\n.text:0000000000404e1f\n.text:0000000000404e21\n.text:0000000000404e22\n'
p447
tp448
sS'quotearg_custom'
p449
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p450
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p451
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404410\n'
p452
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p453
S'.text:0000000000404490\n.text:0000000000404493\n.text:0000000000404496\n.text:0000000000404499\n.text:000000000040449b\n.text:000000000040449e\n.text:00000000004044a1\n.text:00000000004044a4\n'
p454
tp455
sS'free'
p456
(S'\n__stdcall free(void * __ptr)\n'
p457
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060a028)();\u000a  return;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x0060a028]\n'
p459
S'ff 25 c2 8b 20 00\n'
p460
S'.plt:0000000000401460\n'
p461
tp462
sS'close'
p463
(S'\n__stdcall close(int __fd)\n'
p464
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060a0e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p465
S'JMP qword ptr [0x0060a0e8]\n'
p466
S'ff 25 02 8b 20 00\n'
p467
S'.plt:00000000004015e0\n'
p468
tp469
sS'getenv'
p470
(S'\n__stdcall getenv(char * __name)\n'
p471
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060a020)();\u000a  return pcVar1;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x0060a020]\n'
p473
S'ff 25 ca 8b 20 00\n'
p474
S'.plt:0000000000401450\n'
p475
tp476
sS'putchar_unlocked'
p477
(S'\n__stdcall putchar_unlocked(int __c)\n'
p478
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_0060a130)();\u000a  return iVar1;\u000a}\u000a\u000a
p479
S'JMP qword ptr [0x0060a130]\n'
p480
S'ff 25 ba 8a 20 00\n'
p481
S'.plt:0000000000401670\n'
p482
tp483
sS'quotearg_char'
p484
(S'\n__stdcall quotearg_char(char * arg)\n'
p485
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p486
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00404320\n'
p487
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p488
S'.text:0000000000404390\n.text:0000000000404392\n.text:0000000000404399\n.text:000000000040439b\n'
p489
tp490
sS'malloc'
p491
(S'\n__stdcall malloc(size_t __size)\n'
p492
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060a148)();\u000a  return pvVar1;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x0060a148]\n'
p494
S'ff 25 a2 8a 20 00\n'
p495
S'.plt:00000000004016a0\n'
p496
tp497
sS'argmatch_invalid'
p498
(S'\n__stdcall argmatch_invalid(char * context, char * value, ptrdiff_t problem)\n'
p499
V\u000avoid argmatch_invalid(char *context,char *value,ptrdiff_t problem)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = "ambiguous argument %s for %s";\u000a  if (problem == -1) {\u000a    pcVar2 = "invalid argument %s for %s";\u000a  }\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quotearg_n_style((char *)0x0);\u000a  pcVar3 = quote_n((char *)0x1);\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p500
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nCMP RDX,-0x1\nMOV EAX,0x406d73\nMOV ESI,0x406d8e\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x00401510\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x00404200\nMOV R15,RAX\nMOV EDI,0x1\nMOV RSI,R14\nCALL 0x004044f0\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401750\n'
p501
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n48 83 fa ff\nb8 73 6d 40 00\nbe 8e 6d 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 74 eb ff ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 52 18 00 00\n49 89 c7\nbf 01 00 00 00\n4c 89 f6\ne8 32 1b 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 70 ed ff ff\n'
p502
S'.text:0000000000402970\n.text:0000000000402972\n.text:0000000000402974\n.text:0000000000402976\n.text:0000000000402977\n.text:0000000000402978\n.text:000000000040297b\n.text:000000000040297e\n.text:0000000000402982\n.text:0000000000402987\n.text:000000000040298c\n.text:0000000000402990\n.text:0000000000402992\n.text:0000000000402997\n.text:000000000040299c\n.text:000000000040299f\n.text:00000000004029a1\n.text:00000000004029a6\n.text:00000000004029a9\n.text:00000000004029ae\n.text:00000000004029b1\n.text:00000000004029b6\n.text:00000000004029b9\n.text:00000000004029be\n.text:00000000004029c1\n.text:00000000004029c3\n.text:00000000004029c5\n.text:00000000004029c7\n.text:00000000004029ca\n.text:00000000004029cd\n.text:00000000004029d0\n.text:00000000004029d4\n.text:00000000004029d5\n.text:00000000004029d7\n.text:00000000004029d9\n.text:00000000004029db\n'
p503
tp504
sS'c_tolower'
p505
(S'\n__stdcall c_tolower()\n'
p506
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p507
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p508
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p509
S'.text:0000000000405700\n.text:0000000000405703\n.text:0000000000405706\n.text:0000000000405709\n.text:000000000040570c\n'
p510
tp511
sS'rpl_fseeko'
p512
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p513
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060a1b0)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p514
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00405588\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00405588\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0040559a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401770\nMOV RDI,RBX\nCALL 0x00401680\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401590\nCMP RAX,-0x1\nJZ 0x004055c3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x004055c8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p515
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 d6 c1 ff ff\n48 89 df\ne8 de c0 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 e1 bf ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p516
S'.text:0000000000405560\n.text:0000000000405561\n.text:0000000000405563\n.text:0000000000405564\n.text:0000000000405567\n.text:000000000040556a\n.text:000000000040556d\n.text:0000000000405571\n.text:0000000000405575\n.text:0000000000405577\n.text:000000000040557b\n.text:000000000040557f\n.text:0000000000405581\n.text:0000000000405586\n.text:0000000000405588\n.text:000000000040558b\n.text:000000000040558e\n.text:0000000000405591\n.text:0000000000405592\n.text:0000000000405594\n.text:0000000000405595\n.text:000000000040559a\n.text:000000000040559d\n.text:00000000004055a2\n.text:00000000004055a4\n.text:00000000004055a7\n.text:00000000004055aa\n.text:00000000004055af\n.text:00000000004055b3\n.text:00000000004055b5\n.text:00000000004055b8\n.text:00000000004055bf\n.text:00000000004055c1\n.text:00000000004055c3\n.text:00000000004055c8\n.text:00000000004055c9\n.text:00000000004055cb\n.text:00000000004055cc\n'
p517
tp518
sS'getopt_long'
p519
(S'\n__stdcall getopt_long()\n'
p520
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060a098)();\u000a  return;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x0060a098]\n'
p522
S'ff 25 52 8b 20 00\n'
p523
S'.plt:0000000000401540\n'
p524
tp525
sS'quote_n_mem'
p526
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p527
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p528
S'MOV ECX,0x60a248\nJMP 0x00404010\n'
p529
S'b9 48 a2 60 00\ne9 36 fb ff ff\n'
p530
S'.text:00000000004044d0\n.text:00000000004044d5\n'
p531
tp532
sS'xstrdup'
p533
(S'\n__stdcall xstrdup(char * string)\n'
p534
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p535
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401530\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00404f70\n'
p536
S'53\n48 89 fb\ne8 87 c5 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p537
S'.text:0000000000404fa0\n.text:0000000000404fa1\n.text:0000000000404fa4\n.text:0000000000404fa9\n.text:0000000000404fad\n.text:0000000000404fb0\n.text:0000000000404fb1\n'
p538
tp539
sS'c_ispunct'
p540
(S'\n__stdcall c_ispunct()\n'
p541
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p542
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x004056a2\nMOV AL,0x1\nJMP qword ptr [0x4079a8 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p543
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd a8 79 40 00\nc3\n31 c0\nc3\n'
p544
S'.text:0000000000405690\n.text:0000000000405693\n.text:0000000000405696\n.text:0000000000405698\n.text:000000000040569a\n.text:00000000004056a1\n.text:00000000004056a2\n.text:00000000004056a4\n'
p545
tp546
sS'posix2_version'
p547
(S'\n__stdcall posix2_version()\n'
p548
V\u000aint posix2_version(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *in_RAX;\u000a  char *__nptr;\u000a  long lVar2;\u000a  long lVar3;\u000a  int iVar4;\u000a  char *local_8;\u000a  \u000a  local_8 = in_RAX;\u000a  __nptr = getenv("_POSIX2_VERSION");\u000a  if ((__nptr == (char *)0x0) || (*__nptr == 0)) {\u000a    lVar3 = 0x31069;\u000a  }\u000a  else {\u000a    lVar2 = strtol(__nptr,&local_8,10);\u000a    lVar3 = 0x31069;\u000a    if (*local_8 == 0) {\u000a      lVar3 = lVar2;\u000a    }\u000a  }\u000a  iVar4 = 0x7fffffff;\u000a  if (lVar3 < 0x7fffffff) {\u000a    iVar4 = (int)lVar3;\u000a  }\u000a  iVar1 = -0x80000000;\u000a  if (0x7fffffff < lVar3) {\u000a    iVar1 = iVar4;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p549
S'PUSH RAX\nMOV EDI,0x406deb\nCALL 0x00401450\nTEST RAX,RAX\nJZ 0x00402fe7\nCMP byte ptr [RAX],0x0\nJZ 0x00402fe7\nMOV RSI,RSP\nMOV EDX,0xa\nMOV RDI,RAX\nCALL 0x00401650\nMOV RCX,qword ptr [RSP]\nCMP byte ptr [RCX],0x0\nMOV ECX,0x31069\nCMOVZ RCX,RAX\nJMP 0x00402fec\nMOV ECX,0x31069\nCMP RCX,0x7fffffff\nMOV EDX,0x7fffffff\nCMOVL EDX,ECX\nCMP RCX,0x80000000\nMOV EAX,0x80000000\nCMOVGE EAX,EDX\nPOP RCX\nRET\n'
p550
S'50\nbf eb 6d 40 00\ne8 95 e4 ff ff\n48 85 c0\n74 27\n80 38 00\n74 22\n48 89 e6\nba 0a 00 00 00\n48 89 c7\ne8 7b e6 ff ff\n48 8b 0c 24\n80 39 00\nb9 69 10 03 00\n48 0f 44 c8\neb 05\nb9 69 10 03 00\n48 81 f9 ff ff ff 7f\nba ff ff ff 7f\n0f 4c d1\n48 81 f9 00 00 00 80\nb8 00 00 00 80\n0f 4d c2\n59\nc3\n'
p551
S'.text:0000000000402fb0\n.text:0000000000402fb1\n.text:0000000000402fb6\n.text:0000000000402fbb\n.text:0000000000402fbe\n.text:0000000000402fc0\n.text:0000000000402fc3\n.text:0000000000402fc5\n.text:0000000000402fc8\n.text:0000000000402fcd\n.text:0000000000402fd0\n.text:0000000000402fd5\n.text:0000000000402fd9\n.text:0000000000402fdc\n.text:0000000000402fe1\n.text:0000000000402fe5\n.text:0000000000402fe7\n.text:0000000000402fec\n.text:0000000000402ff3\n.text:0000000000402ff8\n.text:0000000000402ffb\n.text:0000000000403002\n.text:0000000000403007\n.text:000000000040300a\n.text:000000000040300b\n'
p552
tp553
sS'quotearg_style'
p554
(S'\n__stdcall quotearg_style(char * arg)\n'
p555
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p556
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00404200\n'
p557
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p558
S'.text:00000000004042e0\n.text:00000000004042e3\n.text:00000000004042e5\n.text:00000000004042e7\n.text:00000000004042e9\n.text:00000000004042ec\n'
p559
tp560
sS'writeline'
p561
(S'\n__stdcall writeline(linebuffer * line, uintmax_t linecount)\n'
p562
V\u000avoid writeline(linebuffer *line,uintmax_t linecount)\u000a\u000a{\u000a  long in_RDX;\u000a  \u000a  if (in_RDX == 0) {\u000a    if (output_unique != 0) goto LAB_004027ff;\u000a  }\u000a  else {\u000a    if ((char)linecount == 0) {\u000a      if (output_first_repeated != 0) goto LAB_004027ff;\u000a    }\u000a    else {\u000a      if (output_later_repeated == 1) {\u000aLAB_004027ff:\u000a        if (countmode == 0) {\u000a          __printf_chk(1,"%7lu ",in_RDX + 1);\u000a        }\u000a        fwrite_unlocked(line->buffer,1,line->length,stdout);\u000a        return;\u000a      }\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p563
S'PUSH RBX\nMOV RBX,RDI\nTEST RDX,RDX\nJZ 0x004027e9\nTEST SIL,SIL\nJZ 0x004027f5\nCMP byte ptr [0x0060a2f2],0x1\nJZ 0x004027ff\nJMP 0x00402837\nMOV AL,byte ptr [0x0060a2f1]\nTEST AL,AL\nJNZ 0x004027ff\nJMP 0x00402837\nMOV AL,byte ptr [0x0060a2f0]\nTEST AL,AL\nJZ 0x00402837\nMOV AL,byte ptr [0x0060a2f4]\nTEST AL,AL\nJNZ 0x0040281d\nINC RDX\nMOV EDI,0x1\nMOV ESI,0x406d68\nXOR EAX,EAX\nCALL 0x00401740\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RDI,qword ptr [RBX + 0x10]\nMOV RCX,qword ptr [0x0060a288]\nMOV ESI,0x1\nPOP RBX\nJMP 0x00401700\nPOP RBX\nRET\n'
p564
S'53\n48 89 fb\n48 85 d2\n74 10\n40 84 f6\n74 17\n80 3d 0d 7b 20 00 01\n74 18\neb 4e\n8a 05 02 7b 20 00\n84 c0\n75 0c\neb 42\n8a 05 f5 7a 20 00\n84 c0\n74 38\n8a 05 ef 7a 20 00\n84 c0\n75 14\n48 ff c2\nbf 01 00 00 00\nbe 68 6d 40 00\n31 c0\ne8 23 ef ff ff\n48 8b 53 08\n48 8b 7b 10\n48 8b 0d 5c 7a 20 00\nbe 01 00 00 00\n5b\ne9 c9 ee ff ff\n5b\nc3\n'
p565
S'.text:00000000004027d0\n.text:00000000004027d1\n.text:00000000004027d4\n.text:00000000004027d7\n.text:00000000004027d9\n.text:00000000004027dc\n.text:00000000004027de\n.text:00000000004027e5\n.text:00000000004027e7\n.text:00000000004027e9\n.text:00000000004027ef\n.text:00000000004027f1\n.text:00000000004027f3\n.text:00000000004027f5\n.text:00000000004027fb\n.text:00000000004027fd\n.text:00000000004027ff\n.text:0000000000402805\n.text:0000000000402807\n.text:0000000000402809\n.text:000000000040280c\n.text:0000000000402811\n.text:0000000000402816\n.text:0000000000402818\n.text:000000000040281d\n.text:0000000000402821\n.text:0000000000402825\n.text:000000000040282c\n.text:0000000000402831\n.text:0000000000402832\n.text:0000000000402837\n.text:0000000000402838\n'
p566
tp567
sS'__argmatch_die'
p568
(S'\n__stdcall __argmatch_die()\n'
p569
V\u000avoid __argmatch_die(void)\u000a\u000a{\u000a  usage(1);\u000a  return;\u000a}\u000a\u000a
p570
S'MOV EDI,0x1\nJMP 0x00401910\n'
p571
S'bf 01 00 00 00\ne9 a6 f0 ff ff\n'
p572
S'.text:0000000000402860\n.text:0000000000402865\n'
p573
tp574
sS'fscanf'
p575
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060a0e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x0060a0e0]\n'
p578
S'ff 25 0a 8b 20 00\n'
p579
S'.plt:00000000004015d0\n'
p580
tp581
sS'emit_try_help'
p582
(S'\n__stdcall emit_try_help()\n'
p583
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p584
S'PUSH RBX\nMOV RBX,qword ptr [0x0060a2c0]\nXOR EDI,EDI\nMOV ESI,0x406b29\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060a318]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x004017c0\n'
p585
S'53\n48 8b 1d c8 87 20 00\n31 ff\nbe 29 6b 40 00\nba 05 00 00 00\ne8 07 fa ff ff\n48 89 c2\n48 8b 0d 05 88 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 9d fc ff ff\n'
p586
S'.text:0000000000401af0\n.text:0000000000401af1\n.text:0000000000401af8\n.text:0000000000401afa\n.text:0000000000401aff\n.text:0000000000401b04\n.text:0000000000401b09\n.text:0000000000401b0c\n.text:0000000000401b13\n.text:0000000000401b18\n.text:0000000000401b1a\n.text:0000000000401b1d\n.text:0000000000401b1e\n'
p587
tp588
sS'memcpy'
p589
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p590
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060a128)();\u000a  return pvVar1;\u000a}\u000a\u000a
p591
S'JMP qword ptr [0x0060a128]\n'
p592
S'ff 25 c2 8a 20 00\n'
p593
S'.plt:0000000000401660\n'
p594
tp595
sS'strrchr'
p596
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060a0b8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x0060a0b8]\n'
p599
S'ff 25 32 8b 20 00\n'
p600
S'.plt:0000000000401580\n'
p601
tp602
sS'close_stdout_set_ignore_EPIPE'
p603
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p604
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p605
S'MOV byte ptr [0x0060a310],DIL\nRET\n'
p606
S'40 88 3d 49 77 20 00\nc3\n'
p607
S'.text:0000000000402bc0\n.text:0000000000402bc7\n'
p608
tp609
sS'quotearg_alloc_mem'
p610
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p611
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p612
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60a320\nCMOVNZ R12,RCX\nCALL 0x00401480\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403230\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00404f00\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403230\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00403f5a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p613
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 20 a3 60 00\n4c 0f 45 e1\ne8 c8 d5 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 f1 0f 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p614
S'.text:0000000000403e80\n.text:0000000000403e81\n.text:0000000000403e83\n.text:0000000000403e85\n.text:0000000000403e87\n.text:0000000000403e89\n.text:0000000000403e8a\n.text:0000000000403e8e\n.text:0000000000403e91\n.text:0000000000403e96\n.text:0000000000403e99\n.text:0000000000403e9e\n.text:0000000000403ea1\n.text:0000000000403ea6\n.text:0000000000403ea9\n.text:0000000000403eaf\n.text:0000000000403eb3\n.text:0000000000403eb8\n.text:0000000000403ebd\n.text:0000000000403ebf\n.text:0000000000403ec3\n.text:0000000000403ec5\n.text:0000000000403ec8\n.text:0000000000403ecc\n.text:0000000000403ed1\n.text:0000000000403ed5\n.text:0000000000403eda\n.text:0000000000403ede\n.text:0000000000403ee0\n.text:0000000000403ee2\n.text:0000000000403ee5\n.text:0000000000403ee8\n.text:0000000000403eeb\n.text:0000000000403ef0\n.text:0000000000403ef5\n.text:0000000000403ef7\n.text:0000000000403efc\n.text:0000000000403f00\n.text:0000000000403f03\n.text:0000000000403f07\n.text:0000000000403f0a\n.text:0000000000403f0f\n.text:0000000000403f12\n.text:0000000000403f16\n.text:0000000000403f1a\n.text:0000000000403f1d\n.text:0000000000403f20\n.text:0000000000403f25\n.text:0000000000403f2a\n.text:0000000000403f2d\n.text:0000000000403f32\n.text:0000000000403f37\n.text:0000000000403f39\n.text:0000000000403f3e\n.text:0000000000403f43\n.text:0000000000403f47\n.text:0000000000403f4a\n.text:0000000000403f4e\n.text:0000000000403f53\n.text:0000000000403f55\n.text:0000000000403f57\n.text:0000000000403f5a\n.text:0000000000403f5d\n.text:0000000000403f61\n.text:0000000000403f62\n.text:0000000000403f64\n.text:0000000000403f66\n.text:0000000000403f68\n.text:0000000000403f6a\n.text:0000000000403f6b\n'
p615
tp616
sS'iswprint'
p617
(S'\n__stdcall iswprint(wint_t __wc)\n'
p618
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060a1e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p619
S'JMP qword ptr [0x0060a1e8]\n'
p620
S'ff 25 02 8a 20 00\n'
p621
S'.plt:00000000004017e0\n'
p622
tp623
sS'collate_error'
p624
(S'\n__stdcall collate_error(char * s1, size_t s1len, char * s2, size_t s2len)\n'
p625
V\u000avoid collate_error(char *s1,size_t s1len,char *s2,size_t s2len)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  \u000a  uVar2 = dcgettext(0,"string comparison failed",5);\u000a  error(0,(ulong)s1 & 0xffffffff,uVar2,uVar2);\u000a  uVar2 = dcgettext(0,"Set LC_ALL=\u005c'C\u005c' to work around the problem.",5);\u000a  error(0,0,uVar2,uVar2);\u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"The strings compared were %s and %s.",5);\u000a  pcVar3 = quotearg_n_style_mem((char *)0x0,8);\u000a  pcVar4 = quotearg_n_style_mem((char *)0x1,8);\u000a  error((ulong)(uint)iVar1,0,uVar2,pcVar3,pcVar4);\u000a  return;\u000a}\u000a\u000a
p626
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV qword ptr [RSP],R8\nMOV RBX,RCX\nMOV R12,RDX\nMOV R13,RSI\nMOV EBP,EDI\nXOR EDI,EDI\nMOV ESI,0x407700\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00401750\nXOR EDI,EDI\nMOV ESI,0x407719\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401750\nMOV R14D,dword ptr [0x0060a220]\nXOR EDI,EDI\nMOV ESI,0x407744\nMOV EDX,0x5\nCALL 0x00401510\nMOV R15,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R13\nMOV RCX,R12\nCALL 0x004042a0\nMOV RBP,RAX\nMOV EDI,0x1\nMOV ESI,0x8\nMOV RDX,RBX\nMOV RCX,qword ptr [RSP]\nCALL 0x004042a0\nMOV RBX,RAX\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV RDX,R15\nMOV RCX,RBP\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401750\n'
p627
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4c 89 04 24\n48 89 cb\n49 89 d4\n49 89 f5\n89 fd\n31 ff\nbe 00 77 40 00\nba 05 00 00 00\ne8 a5 c4 ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\ne8 d4 c6 ff ff\n31 ff\nbe 19 77 40 00\nba 05 00 00 00\ne8 83 c4 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 b2 c6 ff ff\n44 8b 35 7b 51 20 00\n31 ff\nbe 44 77 40 00\nba 05 00 00 00\ne8 5a c4 ff ff\n49 89 c7\n31 ff\nbe 08 00 00 00\n4c 89 ea\n4c 89 e1\ne8 d5 f1 ff ff\n48 89 c5\nbf 01 00 00 00\nbe 08 00 00 00\n48 89 da\n48 8b 0c 24\ne8 bc f1 ff ff\n48 89 c3\n31 f6\n31 c0\n44 89 f7\n4c 89 fa\n48 89 e9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 46 c6 ff ff\n'
p628
S'.text:0000000000405040\n.text:0000000000405041\n.text:0000000000405043\n.text:0000000000405045\n.text:0000000000405047\n.text:0000000000405049\n.text:000000000040504a\n.text:000000000040504b\n.text:000000000040504f\n.text:0000000000405052\n.text:0000000000405055\n.text:0000000000405058\n.text:000000000040505a\n.text:000000000040505c\n.text:0000000000405061\n.text:0000000000405066\n.text:000000000040506b\n.text:000000000040506e\n.text:0000000000405070\n.text:0000000000405072\n.text:0000000000405074\n.text:0000000000405077\n.text:000000000040507c\n.text:000000000040507e\n.text:0000000000405083\n.text:0000000000405088\n.text:000000000040508d\n.text:0000000000405090\n.text:0000000000405092\n.text:0000000000405094\n.text:0000000000405096\n.text:0000000000405099\n.text:000000000040509e\n.text:00000000004050a5\n.text:00000000004050a7\n.text:00000000004050ac\n.text:00000000004050b1\n.text:00000000004050b6\n.text:00000000004050b9\n.text:00000000004050bb\n.text:00000000004050c0\n.text:00000000004050c3\n.text:00000000004050c6\n.text:00000000004050cb\n.text:00000000004050ce\n.text:00000000004050d3\n.text:00000000004050d8\n.text:00000000004050db\n.text:00000000004050df\n.text:00000000004050e4\n.text:00000000004050e7\n.text:00000000004050e9\n.text:00000000004050eb\n.text:00000000004050ee\n.text:00000000004050f1\n.text:00000000004050f4\n.text:00000000004050f7\n.text:00000000004050fb\n.text:00000000004050fc\n.text:00000000004050fe\n.text:0000000000405100\n.text:0000000000405102\n.text:0000000000405104\n.text:0000000000405105\n'
p629
tp630
sS'bkm_scale'
p631
(S'\n__stdcall bkm_scale(ulong * x)\n'
p632
V\u000astrtol_error bkm_scale(ulong *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p633
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p634
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p635
S'.text:00000000004053d0\n.text:00000000004053d3\n.text:00000000004053da\n.text:00000000004053e1\n.text:00000000004053e3\n.text:00000000004053e6\n.text:00000000004053e9\n.text:00000000004053ed\n.text:00000000004053f0\n.text:00000000004053f4\n.text:00000000004053f6\n.text:00000000004053f9\n.text:00000000004053fc\n'
p636
tp637
sS'quotearg_style_mem'
p638
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p639
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p640
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004042a0\n'
p641
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p642
S'.text:0000000000404300\n.text:0000000000404303\n.text:0000000000404306\n.text:0000000000404308\n.text:000000000040430a\n.text:000000000040430c\n.text:000000000040430f\n.text:0000000000404312\n'
p643
tp644
sS'xalloc_die'
p645
(S'\n__stdcall xalloc_die()\n'
p646
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,&DAT_00406dca,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p647
S'PUSH RBX\nMOV EBX,dword ptr [0x0060a220]\nXOR EDI,EDI\nMOV ESI,0x4076ef\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x406dca\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401750\nCALL 0x00401470\n'
p648
S'53\n8b 1d 59 52 20 00\n31 ff\nbe ef 76 40 00\nba 05 00 00 00\ne8 38 c5 ff ff\n48 89 c1\n31 f6\nba ca 6d 40 00\n31 c0\n89 df\ne8 65 c7 ff ff\ne8 80 c4 ff ff\n'
p649
S'.text:0000000000404fc0\n.text:0000000000404fc1\n.text:0000000000404fc7\n.text:0000000000404fc9\n.text:0000000000404fce\n.text:0000000000404fd3\n.text:0000000000404fd8\n.text:0000000000404fdb\n.text:0000000000404fdd\n.text:0000000000404fe2\n.text:0000000000404fe4\n.text:0000000000404fe6\n.text:0000000000404feb\n'
p650
tp651
sS'c_isspace'
p652
(S'\n__stdcall c_isspace()\n'
p653
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p654
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x004056c5\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p655
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p656
S'.text:00000000004056b0\n.text:00000000004056b3\n.text:00000000004056b6\n.text:00000000004056b8\n.text:00000000004056bd\n.text:00000000004056bf\n.text:00000000004056c1\n.text:00000000004056c4\n.text:00000000004056c5\n.text:00000000004056c7\n'
p657
tp658
sS'quotearg_n_custom'
p659
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p660
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p661
S'MOV R8,-0x1\nJMP 0x00404420\n'
p662
S'49 c7 c0 ff ff ff ff\neb 07\n'
p663
S'.text:0000000000404410\n.text:0000000000404417\n'
p664
tp665
sS'open'
p666
(S'\n__stdcall open(char * __file, int __oflag)\n'
p667
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060a1a8)();\u000a  return iVar1;\u000a}\u000a\u000a
p668
S'JMP qword ptr [0x0060a1a8]\n'
p669
S'ff 25 42 8a 20 00\n'
p670
S'.plt:0000000000401760\n'
p671
tp672
sS'quotearg_n_custom_mem'
p673
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p674
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p675
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060a350]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060a340]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a330]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a320]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403180\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404010\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p676
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 17 5f 20 00\n48 89 44 24 30\n0f 10 05 fb 5e 20 00\n0f 29 44 24 20\n0f 10 05 df 5e 20 00\n0f 29 44 24 10\n0f 10 05 c3 5e 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p677
S'.text:0000000000404420\n.text:0000000000404421\n.text:0000000000404423\n.text:0000000000404425\n.text:0000000000404426\n.text:000000000040442a\n.text:000000000040442d\n.text:0000000000404430\n.text:0000000000404432\n.text:0000000000404439\n.text:000000000040443e\n.text:0000000000404445\n.text:000000000040444a\n.text:0000000000404451\n.text:0000000000404456\n.text:000000000040445d\n.text:0000000000404461\n.text:0000000000404464\n.text:0000000000404467\n.text:000000000040446c\n.text:000000000040446e\n.text:0000000000404471\n.text:0000000000404474\n.text:0000000000404477\n.text:000000000040447c\n.text:0000000000404480\n.text:0000000000404481\n.text:0000000000404483\n.text:0000000000404485\n.text:0000000000404486\n'
p678
tp679
sS'_init'
p680
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p681
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00609ff8;\u000a  if (PTR___gmon_start___00609ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00609ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p682
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00609ff8]\nTEST RAX,RAX\nJZ 0x00401422\nCALL RAX\nADD RSP,0x8\nRET\n'
p683
S'48 83 ec 08\n48 8b 05 dd 8b 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p684
S'.init:0000000000401410\n.init:0000000000401414\n.init:000000000040141b\n.init:000000000040141e\n.init:0000000000401420\n.init:0000000000401422\n.init:0000000000401426\n'
p685
tp686
sS'__freading'
p687
(S'\n__stdcall __freading()\n'
p688
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060a170)();\u000a  return;\u000a}\u000a\u000a
p689
S'JMP qword ptr [0x0060a170]\n'
p690
S'ff 25 7a 8a 20 00\n'
p691
S'.plt:00000000004016f0\n'
p692
tp693
sS'set_quoting_flags'
p694
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p695
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p696
S'TEST RDI,RDI\nMOV ECX,0x60a320\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p697
S'48 85 ff\nb9 20 a3 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p698
S'.text:0000000000403160\n.text:0000000000403163\n.text:0000000000403168\n.text:000000000040316c\n.text:000000000040316f\n.text:0000000000403172\n'
p699
tp700
sS'fputs_unlocked'
p701
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p702
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060a100)();\u000a  return iVar1;\u000a}\u000a\u000a
p703
S'JMP qword ptr [0x0060a100]\n'
p704
S'ff 25 ea 8a 20 00\n'
p705
S'.plt:0000000000401610\n'
p706
tp707
sS'main'
p708
(S'\n__stdcall main(char * * argv)\n'
p709
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aint main(char **argv)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  strtol_error sVar3;\u000a  char *s;\u000a  long lVar4;\u000a  ulong uVar5;\u000a  char **ppcVar6;\u000a  ptrdiff_t pVar7;\u000a  undefined8 uVar8;\u000a  char **ppcVar9;\u000a  char **in_RSI;\u000a  undefined8 uVar10;\u000a  undefined8 unaff_R14;\u000a  ulong uVar11;\u000a  int iVar12;\u000a  ulong uVar13;\u000a  bool bVar14;\u000a  char *file [2];\u000a  undefined8 uStack128;\u000a  char **ppcStack120;\u000a  ulong uStack112;\u000a  undefined8 local_68;\u000a  int local_5c;\u000a  undefined8 local_58;\u000a  char **local_50;\u000a  char *local_48 [2];\u000a  size_t local_38;\u000a  \u000a  uStack112 = 0x401cad;\u000a  s = getenv("POSIXLY_CORRECT");\u000a  local_48[1] = "-";\u000a  local_48[0] = "-";\u000a  uStack112 = 0x401ccf;\u000a  local_50 = in_RSI;\u000a  set_program_name(*in_RSI);\u000a  uStack112 = 0x401cde;\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  uStack112 = 0x401ced;\u000a  bindtextdomain(0x406a5a,"/usr/local/share/locale");\u000a  uStack112 = 0x401cf7;\u000a  textdomain(0x406a5a);\u000a  uStack112 = 0x401d01;\u000a  hard_LC_COLLATE = hard_locale();\u000a  uStack112 = 0x401d11;\u000a  atexit(close_stdout);\u000a  skip_chars = 0;\u000a  skip_fields = 0;\u000a  check_chars = 0xffffffffffffffff;\u000a  output_first_repeated = 1;\u000a  output_unique = 1;\u000a  output_later_repeated = 0;\u000a  countmode = 1;\u000a  delimit_groups = DM_NONE;\u000a  local_5c = 0;\u000a  local_58 = 0;\u000a  ppcVar6 = (char **)0x0;\u000a  uVar5 = CONCAT71((int7)((ulong)unaff_R14 >> 8),10);\u000a  uVar13 = 0;\u000aswitchD_00401df3_caseD_7a:\u000a  uVar11 = uVar5;\u000a  iVar12 = (int)uVar13;\u000a  ppcVar9 = ppcVar6;\u000a  uVar5 = uVar11;\u000a  if (((int)ppcVar6 == -1) || (ppcVar9 = ppcVar6, uVar5 = uVar11, s != (char *)0x0 && iVar12 != 0))\u000a  goto switchD_00401df3_caseD_ffffffff;\u000a  uStack112 = 0x401dd8;\u000a  uVar1 = getopt_long((ulong)argv & 0xffffffff,local_50,"-0123456789Dcdf:is:uw:z",longopts,0);\u000a  in_RSI = (char **)(ulong)uVar1;\u000a  if (uVar1 + 1 < 0x82) goto code_r0x00401de9;\u000a  goto LAB_00402129;\u000acode_r0x00401de9:\u000a  ppcVar6 = (char **)0x7a;\u000a  ppcVar9 = (char **)0xffffffff;\u000a  uVar5 = 0;\u000a  switch(uVar1) {\u000a  default:\u000a    goto switchD_00401df3_caseD_0;\u000a  case 1:\u000a    if (*optarg == '+') {\u000a      uStack112 = 0x401e8e;\u000a      iVar2 = posix2_version();\u000a      if (iVar2 < 0x30db0) {\u000a        uStack112 = 0x401eb3;\u000a        sVar3 = xstrtoul(optarg,(char **)0x0,(ulong *)0xa,(char *)&local_38);\u000a        if (sVar3 == LONGINT_OK) {\u000a          skip_chars = local_38;\u000a          goto LAB_00401ed7;\u000a        }\u000a      }\u000a    }\u000a    if (iVar12 != 2) {\u000a      local_48[uVar13] = optarg;\u000a      uVar13 = (ulong)(iVar12 + 1);\u000aLAB_00401ed7:\u000a      ppcVar6 = (char **)0x1;\u000a      uVar5 = uVar11 & 0xff;\u000a      goto switchD_00401df3_caseD_7a;\u000a    }\u000a    uStack112 = 0x402195;\u000a    uVar8 = dcgettext(0,"extra operand %s",5);\u000a    s = optarg;\u000aLAB_00402109:\u000a    uVar1 = (uint)uVar8;\u000a    uStack112 = 0x40210e;\u000a    s = quote(s);\u000a    uStack112 = 0x40211f;\u000a    error(0,0,uVar8,s);\u000a    uStack112 = 0x402129;\u000a    usage(1);\u000aLAB_00402129:\u000a    if (uVar1 == 0xffffff7d) goto LAB_0040214a;\u000a    if (uVar1 == 0xffffff7e) {\u000a      uStack112 = 0x402140;\u000a      usage(0);\u000a    }\u000a    goto switchD_00401df3_caseD_0;\u000a  case 0x30:\u000a  case 0x31:\u000a  case 0x32:\u000a  case 0x33:\u000a  case 0x34:\u000a  case 0x35:\u000a  case 0x36:\u000a  case 0x37:\u000a  case 0x38:\u000a  case 0x39:\u000a    if (local_5c == 2) {\u000a      skip_fields = 0;\u000aLAB_00401e46:\u000a      uVar5 = (long)(int)uVar1 + -0x30 + skip_fields * 10;\u000a      bVar14 = uVar5 < skip_fields;\u000a      skip_fields = uVar5;\u000a      if (bVar14) goto LAB_00401e57;\u000a    }\u000a    else {\u000a      if (skip_fields < 0x199999999999999a) goto LAB_00401e46;\u000aLAB_00401e57:\u000a      skip_fields = 0xffffffffffffffff;\u000a    }\u000a    local_5c = 1;\u000a    break;\u000a  case 0x44:\u000a    output_unique = 0;\u000a    output_later_repeated = 1;\u000a    if (optarg == (char *)0x0) {\u000a      uVar5 = 0;\u000a    }\u000a    else {\u000a      uStack112 = 0x401f23;\u000a      pVar7 = __xargmatch_internal\u000a                        ("--all-repeated",optarg,delimit_method_string,(char *)delimit_method_map,4,\u000a                         argmatch_die);\u000a      uVar5 = (ulong)delimit_method_map[pVar7];\u000a    }\u000a    delimit_groups = (delimit_method)uVar5;\u000a    local_58 = CONCAT71((int7)(uVar5 >> 8),1);\u000a    break;\u000a  case 99:\u000a    countmode = 0;\u000a    local_58 = 1;\u000a    ppcVar6 = (char **)0x63;\u000a    uVar5 = uVar11 & 0xff;\u000a    goto switchD_00401df3_caseD_7a;\u000a  case 100:\u000a    output_unique = 0;\u000a    local_58 = 1;\u000a    ppcVar6 = (char **)0x64;\u000a    uVar5 = uVar11 & 0xff;\u000a    goto switchD_00401df3_caseD_7a;\u000a  case 0x66:\u000a    uStack112 = 0x401f76;\u000a    skip_fields = size_opt(optarg,"invalid number of fields to skip");\u000a    local_5c = 2;\u000a    ppcVar6 = (char **)0x66;\u000a    uVar5 = uVar11 & 0xff;\u000a    goto switchD_00401df3_caseD_7a;\u000a  case 0x69:\u000a    ignore_case = 1;\u000a    ppcVar6 = (char **)0x69;\u000a    uVar5 = uVar11 & 0xff;\u000a    goto switchD_00401df3_caseD_7a;\u000a  case 0x73:\u000a    uStack112 = 0x401fb7;\u000a    skip_chars = size_opt(optarg,"invalid number of bytes to skip");\u000a    ppcVar6 = (char **)0x73;\u000a    uVar5 = uVar11 & 0xff;\u000a    goto switchD_00401df3_caseD_7a;\u000a  case 0x75:\u000a    output_first_repeated = 0;\u000a    local_58 = 1;\u000a    ppcVar6 = (char **)0x75;\u000a    uVar5 = uVar11 & 0xff;\u000a    goto switchD_00401df3_caseD_7a;\u000a  case 0x77:\u000a    uStack112 = 0x401ff7;\u000a    check_chars = size_opt(optarg,"invalid number of bytes to compare");\u000a    ppcVar6 = (char **)0x77;\u000a    uVar5 = uVar11 & 0xff;\u000a  case 0x7a:\u000a    goto switchD_00401df3_caseD_7a;\u000a  case 0x80:\u000a    if (optarg == (char *)0x0) {\u000a      grouping = GM_SEPARATE;\u000a    }\u000a    else {\u000a      uStack112 = 0x402038;\u000a      pVar7 = __xargmatch_internal\u000a                        ("--group",optarg,grouping_method_string,(char *)grouping_method_map,4,\u000a                         argmatch_die);\u000a      grouping = grouping_method_map[pVar7];\u000a    }\u000a    break;\u000a  case 0xffffffff:\u000aswitchD_00401df3_caseD_ffffffff:\u000a    lVar4 = (long)optind;\u000a    if ((int)((ulong)argv & 0xffffffff) <= optind) {\u000a      if (((char)local_58 == 0) || (grouping == GM_NONE)) {\u000a        if ((grouping == GM_NONE) || (((countmode ^ 1) & 1) == 0)) {\u000a          if (((countmode & 1) != 0) || (output_later_repeated != 1)) {\u000a            uStack112 = 0x4020d4;\u000a            check_file(local_48[0],local_48[1]);\u000a            return 0;\u000a          }\u000a          s = "printing all duplicated lines and repeat counts is meaningless";\u000a        }\u000a        else {\u000a          s = "grouping and printing repeat counts is meaningless";\u000a        }\u000a      }\u000a      else {\u000a        s = "--group is mutually exclusive with -c/-d/-D/-u";\u000a      }\u000a      uStack112 = 0x4021c7;\u000a      uVar8 = dcgettext(0,s,5);\u000a      uVar10 = 0;\u000a      uStack112 = 0x4021d8;\u000a      error(0,0,uVar8,uVar8);\u000a      s = (char *)0x1;\u000a      uStack112 = 0x4021e2;\u000a      uStack128 = usage();\u000a      ppcStack120 = in_RSI;\u000a      uStack112 = uVar5;\u000a      sVar3 = xstrtoul(s,(char **)0x0,(ulong *)0xa,(char *)&uStack128);\u000a      if (LONGINT_OVERFLOW < sVar3) {\u000a        uVar8 = dcgettext(0,uVar10,5);\u000a        error(1,0,"%s: %s",s,uVar8);\u000a      }\u000a      return (int)uStack128;\u000a    }\u000a    if (iVar12 != 2) {\u000a      optind = optind + 1;\u000a      local_48[uVar13] = local_50[lVar4];\u000a      ppcVar6 = ppcVar9;\u000a      uVar5 = uVar5 & 0xffffffffffffff00 | uVar11 & 0xff;\u000a      uVar13 = (ulong)(iVar12 + 1);\u000a      goto switchD_00401df3_caseD_7a;\u000a    }\u000a    uStack112 = 0x4020f6;\u000a    uVar8 = dcgettext(0,"extra operand %s",5);\u000a    s = local_50[(long)optind];\u000a    goto LAB_00402109;\u000a  }\u000a  ppcVar6 = in_RSI;\u000a  uVar5 = uVar11 & 0xff;\u000a  goto switchD_00401df3_caseD_7a;\u000aswitchD_00401df3_caseD_0:\u000a  uStack112 = 0x40214a;\u000a  usage(1);\u000aLAB_0040214a:\u000a  local_68 = 0;\u000a  uStack112 = 0x40217d;\u000a  version_etc(stdout,"uniq","GNU coreutils",Version,"Richard M. Stallman","David MacKenzie");\u000a                    /* WARNING: Subroutine does not return */\u000a  uStack112 = 0x402184;\u000a  exit(0);\u000a}\u000a\u000a
p710
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBX,RSI\nMOV EBP,EDI\nMOV EDI,0x40698a\nCALL 0x00401450\nMOV R12,RAX\nMOV qword ptr [RSP + 0x28],0x406e3d\nMOV qword ptr [RSP + 0x20],0x406e3d\nMOV qword ptr [RSP + 0x18],RBX\nMOV RDI,qword ptr [RBX]\nCALL 0x00403010\nMOV EDI,0x6\nMOV ESI,0x4074b9\nCALL 0x00401730\nMOV EDI,0x406a5a\nMOV ESI,0x40699a\nCALL 0x00401500\nMOV EDI,0x406a5a\nCALL 0x004014e0\nMOV EDI,0x3\nCALL 0x00402e30\nMOV byte ptr [0x0060a2d0],AL\nMOV EDI,0x402bd0\nCALL 0x00405ca0\nMOV qword ptr [0x0060a2d8],0x0\nMOV qword ptr [0x0060a2e0],0x0\nMOV qword ptr [0x0060a2e8],-0x1\nMOV byte ptr [0x0060a2f0],0x1\nMOV byte ptr [0x0060a2f1],0x1\nMOV byte ptr [0x0060a2f2],0x0\nMOV byte ptr [0x0060a2f4],0x1\nMOV dword ptr [0x0060a2f8],0x0\nMOV R14B,0xa\nXOR EAX,EAX\nMOV dword ptr [RSP + 0xc],0x0\nXOR R15D,R15D\nXOR ECX,ECX\nMOV qword ptr [RSP + 0x10],RCX\nJMP 0x00401da2\nLEA EDX,[RAX + 0x1]\nMOV dword ptr [0x0060a298],EDX\nMOV RDX,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RDX + RAX*0x8]\nMOV EDX,R15D\nINC R15D\nMOV qword ptr [RSP + RDX*0x8 + 0x20],RAX\nMOV EAX,ECX\nMOV R14B,R13B\nMOV R13D,R14D\nTEST R12,R12\nSETNZ CL\nTEST R15D,R15D\nSETNZ DL\nCMP EAX,-0x1\nJZ 0x00401e10\nAND CL,DL\nMOV ECX,EAX\nJNZ 0x00401e12\nXOR R14D,R14D\nMOV EDX,0x4069b2\nMOV ECX,0x406100\nXOR R8D,R8D\nMOV EDI,EBP\nMOV RSI,qword ptr [RSP + 0x18]\nCALL 0x00401540\nMOV EBX,EAX\nLEA EDX,[RBX + 0x1]\nCMP EDX,0x81\nJA 0x00402129\nMOV EAX,0x7a\nMOV ECX,0xffffffff\nJMP qword ptr [0x405cf0 + RDX*0x8]\nCMP dword ptr [RSP + 0xc],0x2\nJNZ 0x00401e30\nMOV qword ptr [0x0060a2e0],0x0\nXOR EAX,EAX\nJMP 0x00401e46\nMOV ECX,EAX\nMOVSXD RAX,dword ptr [0x0060a298]\nCMP EAX,EBP\nJGE 0x0040207f\nCMP R15D,0x2\nJNZ 0x00401d80\nJMP 0x004020e5\nMOV RAX,qword ptr [0x0060a2e0]\nMOV RCX,0x1999999999999999\nCMP RAX,RCX\nJA 0x00401e57\nLEA RCX,[RAX + RAX*0x4]\nMOVSXD RDX,EBX\nLEA RCX,[RDX + RCX*0x2 + -0x30]\nCMP RCX,RAX\nJNC 0x00401e64\nMOV qword ptr [0x0060a2e0],-0x1\nJMP 0x00401e6b\nMOV qword ptr [0x0060a2e0],RCX\nMOV dword ptr [RSP + 0xc],0x1\nMOV EAX,EBX\nMOV R14B,R13B\nJMP 0x00401da2\nMOV RAX,qword ptr [0x0060a2a0]\nCMP byte ptr [RAX],0x2b\nJNZ 0x00401ebb\nCALL 0x00402fb0\nCMP EAX,0x30daf\nJG 0x00401ebb\nMOV RDI,qword ptr [0x0060a2a0]\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x4074b9\nLEA RCX,[RSP + 0x30]\nCALL 0x00405160\nTEST EAX,EAX\nJZ 0x0040206e\nCMP R15D,0x2\nJZ 0x00402184\nMOV RAX,qword ptr [0x0060a2a0]\nMOV ECX,R15D\nINC R15D\nMOV qword ptr [RSP + RCX*0x8 + 0x20],RAX\nMOV EAX,0x1\nMOV R14B,R13B\nJMP 0x00401da2\nMOV byte ptr [0x0060a2f1],0x0\nMOV byte ptr [0x0060a2f2],0x1\nMOV RSI,qword ptr [0x0060a2a0]\nTEST RSI,RSI\nJZ 0x0040204a\nMOV R9,qword ptr [0x0060a218]\nMOV EDI,0x4069db\nMOV EDX,0x4062b0\nMOV ECX,0x4062a0\nMOV R8D,0x4\nCALL 0x00402ad0\nMOV EAX,dword ptr [0x4062a0 + RAX*0x4]\nJMP 0x0040204c\nMOV byte ptr [0x0060a2f4],0x0\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nMOV EAX,0x63\nMOV R14B,R13B\nJMP 0x00401da2\nMOV byte ptr [0x0060a2f1],0x0\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nMOV EAX,0x64\nMOV R14B,R13B\nJMP 0x00401da2\nMOV RDI,qword ptr [0x0060a2a0]\nMOV ESI,0x4069f2\nCALL 0x004021f0\nMOV qword ptr [0x0060a2e0],RAX\nMOV dword ptr [RSP + 0xc],0x2\nMOV EAX,0x66\nMOV R14B,R13B\nJMP 0x00401da2\nMOV byte ptr [0x0060a300],0x1\nMOV EAX,0x69\nMOV R14B,R13B\nJMP 0x00401da2\nMOV RDI,qword ptr [0x0060a2a0]\nMOV ESI,0x406a13\nCALL 0x004021f0\nMOV qword ptr [0x0060a2d8],RAX\nMOV EAX,0x73\nMOV R14B,R13B\nJMP 0x00401da2\nMOV byte ptr [0x0060a2f0],0x0\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nMOV EAX,0x75\nMOV R14B,R13B\nJMP 0x00401da2\nMOV RDI,qword ptr [0x0060a2a0]\nMOV ESI,0x406a33\nCALL 0x004021f0\nMOV qword ptr [0x0060a2e8],RAX\nMOV EAX,0x77\nMOV R14B,R13B\nJMP 0x00401da2\nMOV RSI,qword ptr [0x0060a2a0]\nTEST RSI,RSI\nJZ 0x0040205e\nMOV R9,qword ptr [0x0060a218]\nMOV EDI,0x4069ea\nMOV EDX,0x4062e0\nMOV ECX,0x4062d0\nMOV R8D,0x4\nCALL 0x00402ad0\nMOV EAX,dword ptr [0x4062d0 + RAX*0x4]\nMOV dword ptr [0x0060a2fc],EAX\nJMP 0x00401e73\nXOR EAX,EAX\nMOV dword ptr [0x0060a2f8],EAX\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00401e73\nMOV EAX,0x3\nMOV dword ptr [0x0060a2fc],EAX\nJMP 0x00401e73\nMOV RAX,qword ptr [RSP + 0x30]\nMOV qword ptr [0x0060a2d8],RAX\nJMP 0x00401ed7\nMOV EAX,dword ptr [0x0060a2fc]\nTEST EAX,EAX\nSETZ CL\nCMP byte ptr [RSP + 0x10],0x0\nJZ 0x00402099\nTEST CL,CL\nJZ 0x004021a4\nMOV CL,byte ptr [0x0060a2f4]\nTEST EAX,EAX\nJZ 0x004020af\nMOV EAX,ECX\nXOR AL,0x1\nTEST AL,0x1\nJNZ 0x004021ad\nTEST CL,0x1\nJNZ 0x004020c1\nCMP byte ptr [0x0060a2f2],0x1\nJZ 0x004021b6\nMOV RDI,qword ptr [RSP + 0x20]\nMOV RSI,qword ptr [RSP + 0x28]\nMOVSX EDX,R13B\nCALL 0x00402250\nXOR EAX,EAX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x4069ca\nMOV EDX,0x5\nCALL 0x00401510\nMOV RBX,RAX\nMOVSXD RAX,dword ptr [0x0060a298]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV RDI,qword ptr [RCX + RAX*0x8]\nCALL 0x00404500\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401750\nMOV EDI,0x1\nCALL 0x00401910\nCMP EBX,0xffffff7d\nJZ 0x0040214a\nCMP EBX,0xffffff7e\nJNZ 0x00402140\nXOR EDI,EDI\nCALL 0x00401910\nMOV EDI,0x1\nCALL 0x00401910\nMOV RDI,qword ptr [0x0060a288]\nMOV RCX,qword ptr [0x0060a210]\nMOV qword ptr [RSP],0x0\nMOV ESI,0x406985\nMOV EDX,0x406a56\nMOV R8D,0x406a64\nMOV R9D,0x406a78\nXOR EAX,EAX\nCALL 0x00404d00\nXOR EDI,EDI\nCALL 0x004017a0\nXOR EDI,EDI\nMOV ESI,0x4069ca\nMOV EDX,0x5\nCALL 0x00401510\nMOV RBX,RAX\nMOV RDI,qword ptr [0x0060a2a0]\nJMP 0x00402109\nXOR EDI,EDI\nMOV ESI,0x406a88\nJMP 0x004021bd\nXOR EDI,EDI\nMOV ESI,0x406ab7\nJMP 0x004021bd\nXOR EDI,EDI\nMOV ESI,0x406aea\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401750\nMOV EDI,0x1\nCALL 0x00401910\nNOP word ptr CS:[RAX + RAX*0x1]\n'
p711
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 f3\n89 fd\nbf 8a 69 40 00\ne8 a3 f7 ff ff\n49 89 c4\n48 c7 44 24 28 3d 6e 40 00\n48 c7 44 24 20 3d 6e 40 00\n48 89 5c 24 18\n48 8b 3b\ne8 41 13 00 00\nbf 06 00 00 00\nbe b9 74 40 00\ne8 52 fa ff ff\nbf 5a 6a 40 00\nbe 9a 69 40 00\ne8 13 f8 ff ff\nbf 5a 6a 40 00\ne8 e9 f7 ff ff\nbf 03 00 00 00\ne8 2f 11 00 00\n88 05 c9 85 20 00\nbf d0 2b 40 00\ne8 8f 3f 00 00\n48 c7 05 bc 85 20 00 00 00 00 00\n48 c7 05 b9 85 20 00 00 00 00 00\n48 c7 05 b6 85 20 00 ff ff ff ff\nc6 05 b7 85 20 00 01\nc6 05 b1 85 20 00 01\nc6 05 ab 85 20 00 00\nc6 05 a6 85 20 00 01\nc7 05 a0 85 20 00 00 00 00 00\n41 b6 0a\n31 c0\nc7 44 24 0c 00 00 00 00\n45 31 ff\n31 c9\n48 89 4c 24 10\neb 31\n8d 50 01\n89 15 0f 85 20 00\n48 8b 54 24 18\n48 8b 04 c2\n44 89 fa\n41 ff c7\n48 89 44 d4 20\n89 c8\n45 88 ee\n45 89 f5\n4d 85 e4\n0f 95 c1\n45 85 ff\n0f 95 c2\n83 f8 ff\n74 5a\n20 d1\n89 c1\n75 56\n45 31 f6\nba b2 69 40 00\nb9 00 61 40 00\n45 31 c0\n89 ef\n48 8b 74 24 18\ne8 68 f7 ff ff\n89 c3\n8d 53 01\n81 fa 81 00 00 00\n0f 87 40 03 00 00\nb8 7a 00 00 00\nb9 ff ff ff ff\nff 24 d5 f0 5c 40 00\n83 7c 24 0c 02\n75 2f\n48 c7 05 d4 84 20 00 00 00 00 00\n31 c0\neb 36\n89 c1\n48 63 05 7f 84 20 00\n39 e8\n0f 8d 5e 02 00 00\n41 83 ff 02\n0f 85 55 ff ff ff\ne9 b5 02 00 00\n48 8b 05 a9 84 20 00\n48 b9 99 99 99 99 99 99 99 19\n48 39 c8\n77 11\n48 8d 0c 80\n48 63 d3\n48 8d 4c 4a d0\n48 39 c1\n73 0d\n48 c7 05 7e 84 20 00 ff ff ff ff\neb 07\n48 89 0d 75 84 20 00\nc7 44 24 0c 01 00 00 00\n89 d8\n45 88 ee\ne9 25 ff ff ff\n48 8b 05 1c 84 20 00\n80 38 2b\n75 32\ne8 22 11 00 00\n3d af 0d 03 00\n7f 26\n48 8b 3d 04 84 20 00\n31 f6\nba 0a 00 00 00\n41 b8 b9 74 40 00\n48 8d 4c 24 30\ne8 ad 32 00 00\n85 c0\n0f 84 b3 01 00 00\n41 83 ff 02\n0f 84 bf 02 00 00\n48 8b 05 d4 83 20 00\n44 89 f9\n41 ff c7\n48 89 44 cc 20\nb8 01 00 00 00\n45 88 ee\ne9 be fe ff ff\nc6 05 06 84 20 00 00\nc6 05 00 84 20 00 01\n48 8b 35 a7 83 20 00\n48 85 f6\n0f 84 48 01 00 00\n4c 8b 0d 0f 83 20 00\nbf db 69 40 00\nba b0 62 40 00\nb9 a0 62 40 00\n41 b8 04 00 00 00\ne8 ad 0b 00 00\n8b 04 85 a0 62 40 00\ne9 1d 01 00 00\nc6 05 be 83 20 00 00\nb0 01\n48 89 44 24 10\nb8 63 00 00 00\n45 88 ee\ne9 58 fe ff ff\nc6 05 a0 83 20 00 00\nb0 01\n48 89 44 24 10\nb8 64 00 00 00\n45 88 ee\ne9 3d fe ff ff\n48 8b 3d 34 83 20 00\nbe f2 69 40 00\ne8 7a 02 00 00\n48 89 05 63 83 20 00\nc7 44 24 0c 02 00 00 00\nb8 66 00 00 00\n45 88 ee\ne9 10 fe ff ff\nc6 05 67 83 20 00 01\nb8 69 00 00 00\n45 88 ee\ne9 fc fd ff ff\n48 8b 3d f3 82 20 00\nbe 13 6a 40 00\ne8 39 02 00 00\n48 89 05 1a 83 20 00\nb8 73 00 00 00\n45 88 ee\ne9 d7 fd ff ff\nc6 05 1e 83 20 00 00\nb0 01\n48 89 44 24 10\nb8 75 00 00 00\n45 88 ee\ne9 bc fd ff ff\n48 8b 3d b3 82 20 00\nbe 33 6a 40 00\ne8 f9 01 00 00\n48 89 05 ea 82 20 00\nb8 77 00 00 00\n45 88 ee\ne9 97 fd ff ff\n48 8b 35 8e 82 20 00\n48 85 f6\n74 47\n4c 8b 0d fa 81 20 00\nbf ea 69 40 00\nba e0 62 40 00\nb9 d0 62 40 00\n41 b8 04 00 00 00\ne8 98 0a 00 00\n8b 04 85 d0 62 40 00\n89 05 b7 82 20 00\ne9 29 fe ff ff\n31 c0\n89 05 a6 82 20 00\nb0 01\n48 89 44 24 10\ne9 15 fe ff ff\nb8 03 00 00 00\n89 05 93 82 20 00\ne9 05 fe ff ff\n48 8b 44 24 30\n48 89 05 5e 82 20 00\ne9 58 fe ff ff\n8b 05 77 82 20 00\n85 c0\n0f 94 c1\n80 7c 24 10 00\n74 08\n84 c9\n0f 84 0b 01 00 00\n8a 0d 55 82 20 00\n85 c0\n74 0c\n89 c8\n34 01\na8 01\n0f 85 fe 00 00 00\nf6 c1 01\n75 0d\n80 3d 37 82 20 00 01\n0f 84 f5 00 00 00\n48 8b 7c 24 20\n48 8b 74 24 28\n41 0f be d5\ne8 7c 01 00 00\n31 c0\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 ff\nbe ca 69 40 00\nba 05 00 00 00\ne8 1a f4 ff ff\n48 89 c3\n48 63 05 98 81 20 00\n48 8b 4c 24 18\n48 8b 3c c1\ne8 f2 23 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 31 f6 ff ff\nbf 01 00 00 00\ne8 e7 f7 ff ff\n81 fb 7d ff ff ff\n74 19\n81 fb 7e ff ff ff\n75 07\n31 ff\ne8 d0 f7 ff ff\nbf 01 00 00 00\ne8 c6 f7 ff ff\n48 8b 3d 37 81 20 00\n48 8b 0d b8 80 20 00\n48 c7 04 24 00 00 00 00\nbe 85 69 40 00\nba 56 6a 40 00\n41 b8 64 6a 40 00\n41 b9 78 6a 40 00\n31 c0\ne8 83 2b 00 00\n31 ff\ne8 1c f6 ff ff\n31 ff\nbe ca 69 40 00\nba 05 00 00 00\ne8 7b f3 ff ff\n48 89 c3\n48 8b 3d 01 81 20 00\ne9 65 ff ff ff\n31 ff\nbe 88 6a 40 00\neb 10\n31 ff\nbe b7 6a 40 00\neb 07\n31 ff\nbe ea 6a 40 00\nba 05 00 00 00\ne8 49 f3 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 78 f5 ff ff\nbf 01 00 00 00\ne8 2e f7 ff ff\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n'
p712
S'.text:0000000000401c90\n.text:0000000000401c91\n.text:0000000000401c93\n.text:0000000000401c95\n.text:0000000000401c97\n.text:0000000000401c99\n.text:0000000000401c9a\n.text:0000000000401c9e\n.text:0000000000401ca1\n.text:0000000000401ca3\n.text:0000000000401ca8\n.text:0000000000401cad\n.text:0000000000401cb0\n.text:0000000000401cb9\n.text:0000000000401cc2\n.text:0000000000401cc7\n.text:0000000000401cca\n.text:0000000000401ccf\n.text:0000000000401cd4\n.text:0000000000401cd9\n.text:0000000000401cde\n.text:0000000000401ce3\n.text:0000000000401ce8\n.text:0000000000401ced\n.text:0000000000401cf2\n.text:0000000000401cf7\n.text:0000000000401cfc\n.text:0000000000401d01\n.text:0000000000401d07\n.text:0000000000401d0c\n.text:0000000000401d11\n.text:0000000000401d1c\n.text:0000000000401d27\n.text:0000000000401d32\n.text:0000000000401d39\n.text:0000000000401d40\n.text:0000000000401d47\n.text:0000000000401d4e\n.text:0000000000401d58\n.text:0000000000401d5b\n.text:0000000000401d5d\n.text:0000000000401d65\n.text:0000000000401d68\n.text:0000000000401d6a\n.text:0000000000401d6f\n.text:0000000000401d80\n.text:0000000000401d83\n.text:0000000000401d89\n.text:0000000000401d8e\n.text:0000000000401d92\n.text:0000000000401d95\n.text:0000000000401d98\n.text:0000000000401d9d\n.text:0000000000401d9f\n.text:0000000000401da2\n.text:0000000000401da5\n.text:0000000000401da8\n.text:0000000000401dab\n.text:0000000000401dae\n.text:0000000000401db1\n.text:0000000000401db4\n.text:0000000000401db6\n.text:0000000000401db8\n.text:0000000000401dba\n.text:0000000000401dbc\n.text:0000000000401dbf\n.text:0000000000401dc4\n.text:0000000000401dc9\n.text:0000000000401dcc\n.text:0000000000401dce\n.text:0000000000401dd3\n.text:0000000000401dd8\n.text:0000000000401dda\n.text:0000000000401ddd\n.text:0000000000401de3\n.text:0000000000401de9\n.text:0000000000401dee\n.text:0000000000401df3\n.text:0000000000401dfa\n.text:0000000000401dff\n.text:0000000000401e01\n.text:0000000000401e0c\n.text:0000000000401e0e\n.text:0000000000401e10\n.text:0000000000401e12\n.text:0000000000401e19\n.text:0000000000401e1b\n.text:0000000000401e21\n.text:0000000000401e25\n.text:0000000000401e2b\n.text:0000000000401e30\n.text:0000000000401e37\n.text:0000000000401e41\n.text:0000000000401e44\n.text:0000000000401e46\n.text:0000000000401e4a\n.text:0000000000401e4d\n.text:0000000000401e52\n.text:0000000000401e55\n.text:0000000000401e57\n.text:0000000000401e62\n.text:0000000000401e64\n.text:0000000000401e6b\n.text:0000000000401e73\n.text:0000000000401e75\n.text:0000000000401e78\n.text:0000000000401e7d\n.text:0000000000401e84\n.text:0000000000401e87\n.text:0000000000401e89\n.text:0000000000401e8e\n.text:0000000000401e93\n.text:0000000000401e95\n.text:0000000000401e9c\n.text:0000000000401e9e\n.text:0000000000401ea3\n.text:0000000000401ea9\n.text:0000000000401eae\n.text:0000000000401eb3\n.text:0000000000401eb5\n.text:0000000000401ebb\n.text:0000000000401ebf\n.text:0000000000401ec5\n.text:0000000000401ecc\n.text:0000000000401ecf\n.text:0000000000401ed2\n.text:0000000000401ed7\n.text:0000000000401edc\n.text:0000000000401edf\n.text:0000000000401ee4\n.text:0000000000401eeb\n.text:0000000000401ef2\n.text:0000000000401ef9\n.text:0000000000401efc\n.text:0000000000401f02\n.text:0000000000401f09\n.text:0000000000401f0e\n.text:0000000000401f13\n.text:0000000000401f18\n.text:0000000000401f1e\n.text:0000000000401f23\n.text:0000000000401f2a\n.text:0000000000401f2f\n.text:0000000000401f36\n.text:0000000000401f38\n.text:0000000000401f3d\n.text:0000000000401f42\n.text:0000000000401f45\n.text:0000000000401f4a\n.text:0000000000401f51\n.text:0000000000401f53\n.text:0000000000401f58\n.text:0000000000401f5d\n.text:0000000000401f60\n.text:0000000000401f65\n.text:0000000000401f6c\n.text:0000000000401f71\n.text:0000000000401f76\n.text:0000000000401f7d\n.text:0000000000401f85\n.text:0000000000401f8a\n.text:0000000000401f8d\n.text:0000000000401f92\n.text:0000000000401f99\n.text:0000000000401f9e\n.text:0000000000401fa1\n.text:0000000000401fa6\n.text:0000000000401fad\n.text:0000000000401fb2\n.text:0000000000401fb7\n.text:0000000000401fbe\n.text:0000000000401fc3\n.text:0000000000401fc6\n.text:0000000000401fcb\n.text:0000000000401fd2\n.text:0000000000401fd4\n.text:0000000000401fd9\n.text:0000000000401fde\n.text:0000000000401fe1\n.text:0000000000401fe6\n.text:0000000000401fed\n.text:0000000000401ff2\n.text:0000000000401ff7\n.text:0000000000401ffe\n.text:0000000000402003\n.text:0000000000402006\n.text:000000000040200b\n.text:0000000000402012\n.text:0000000000402015\n.text:0000000000402017\n.text:000000000040201e\n.text:0000000000402023\n.text:0000000000402028\n.text:000000000040202d\n.text:0000000000402033\n.text:0000000000402038\n.text:000000000040203f\n.text:0000000000402045\n.text:000000000040204a\n.text:000000000040204c\n.text:0000000000402052\n.text:0000000000402054\n.text:0000000000402059\n.text:000000000040205e\n.text:0000000000402063\n.text:0000000000402069\n.text:000000000040206e\n.text:0000000000402073\n.text:000000000040207a\n.text:000000000040207f\n.text:0000000000402085\n.text:0000000000402087\n.text:000000000040208a\n.text:000000000040208f\n.text:0000000000402091\n.text:0000000000402093\n.text:0000000000402099\n.text:000000000040209f\n.text:00000000004020a1\n.text:00000000004020a3\n.text:00000000004020a5\n.text:00000000004020a7\n.text:00000000004020a9\n.text:00000000004020af\n.text:00000000004020b2\n.text:00000000004020b4\n.text:00000000004020bb\n.text:00000000004020c1\n.text:00000000004020c6\n.text:00000000004020cb\n.text:00000000004020cf\n.text:00000000004020d4\n.text:00000000004020d6\n.text:00000000004020da\n.text:00000000004020db\n.text:00000000004020dd\n.text:00000000004020df\n.text:00000000004020e1\n.text:00000000004020e3\n.text:00000000004020e4\n.text:00000000004020e5\n.text:00000000004020e7\n.text:00000000004020ec\n.text:00000000004020f1\n.text:00000000004020f6\n.text:00000000004020f9\n.text:0000000000402100\n.text:0000000000402105\n.text:0000000000402109\n.text:000000000040210e\n.text:0000000000402111\n.text:0000000000402113\n.text:0000000000402115\n.text:0000000000402117\n.text:000000000040211a\n.text:000000000040211f\n.text:0000000000402124\n.text:0000000000402129\n.text:000000000040212f\n.text:0000000000402131\n.text:0000000000402137\n.text:0000000000402139\n.text:000000000040213b\n.text:0000000000402140\n.text:0000000000402145\n.text:000000000040214a\n.text:0000000000402151\n.text:0000000000402158\n.text:0000000000402160\n.text:0000000000402165\n.text:000000000040216a\n.text:0000000000402170\n.text:0000000000402176\n.text:0000000000402178\n.text:000000000040217d\n.text:000000000040217f\n.text:0000000000402184\n.text:0000000000402186\n.text:000000000040218b\n.text:0000000000402190\n.text:0000000000402195\n.text:0000000000402198\n.text:000000000040219f\n.text:00000000004021a4\n.text:00000000004021a6\n.text:00000000004021ab\n.text:00000000004021ad\n.text:00000000004021af\n.text:00000000004021b4\n.text:00000000004021b6\n.text:00000000004021b8\n.text:00000000004021bd\n.text:00000000004021c2\n.text:00000000004021c7\n.text:00000000004021ca\n.text:00000000004021cc\n.text:00000000004021ce\n.text:00000000004021d0\n.text:00000000004021d3\n.text:00000000004021d8\n.text:00000000004021dd\n.text:00000000004021e2\n'
p713
tp714
sS'realloc'
p715
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060a180)();\u000a  return pvVar1;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x0060a180]\n'
p718
S'ff 25 6a 8a 20 00\n'
p719
S'.plt:0000000000401710\n'
p720
tp721
sS'xcharalloc'
p722
(S'\n__stdcall xcharalloc(size_t n)\n'
p723
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p724
S'JMP 0x00404e30\n'
p725
S'e9 2b ff ff ff\n'
p726
S'.text:0000000000404f00\n'
p727
tp728
sS'c_isupper'
p729
(S'\n__stdcall c_isupper()\n'
p730
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p731
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p732
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p733
S'.text:00000000004056d0\n.text:00000000004056d3\n.text:00000000004056d6\n.text:00000000004056d9\n'
p734
tp735
sS'__fprintf_chk'
p736
(S'\n__stdcall __fprintf_chk()\n'
p737
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060a1d8)();\u000a  return;\u000a}\u000a\u000a
p738
S'JMP qword ptr [0x0060a1d8]\n'
p739
S'ff 25 12 8a 20 00\n'
p740
S'.plt:00000000004017c0\n'
p741
tp742
sS'get_charset_aliases'
p743
(S'\n__stdcall get_charset_aliases()\n'
p744
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00405a34_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00405a34_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00405a34_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00405a34_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00405a34_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00405a34_caseD_9;\u000a      case -1:\u000a        goto switchD_00405a34_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00405a8d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00405a93:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00405a34_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00405a93;\u000a  }\u000a  goto LAB_00405a8d;\u000a}\u000a\u000a
p745
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060a460]\nTEST R15,R15\nJNZ 0x00405aa2\nMOV EDI,0x407dd4\nCALL 0x00401450\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405858\nCMP byte ptr [RBX],0x0\nJNZ 0x0040585d\nMOV EBX,0x407de4\nMOV RDI,RBX\nCALL 0x00401530\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00405877\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00405879\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x004016a0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x004058cd\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401660\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x004058d8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x004058f5\nMOV R15D,0x4074b9\nJMP 0x00405a9b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401760\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00405a8d\nMOV ESI,0x406dd7\nMOV EDI,EBP\nCALL 0x00401720\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405a54\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00405a20\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004014b0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004014b0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00405a20\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x004016d0\nMOV ESI,0x407df3\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x004015d0\nCMP EAX,0x2\nJL 0x00405a74\nMOV RDI,R12\nCALL 0x00401530\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401530\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004059fd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401710\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00405944\nJMP 0x00405a5d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x004016a0\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00405944\nJMP 0x00405a5d\nMOV RDI,RBX\nCALL 0x004014d0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00405987\nJMP qword ptr [0x407c98 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004014d0\nCMP EAX,-0x1\nJZ 0x00405a74\nCMP EAX,0xa\nJNZ 0x00405a40\nJMP 0x00405a20\nMOV EDI,EBP\nCALL 0x004015e0\nJMP 0x00405a8d\nMOV RDI,R15\nCALL 0x00401460\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00405490\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00405a8d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00405a93\nMOV R15D,0x4074b9\nMOV RDI,R13\nCALL 0x00401460\nMOV qword ptr [0x0060a460],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p746
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 28 4c 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf d4 7d 40 00\ne8 05 bc ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb e4 7d 40 00\n48 89 df\ne8 cb bc ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 19 be ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 c3 bd ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf b9 74 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 5c be ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe d7 6d 40 00\n89 ef\ne8 06 be ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 4b bb ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 3b bb ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 3f bd ff ff\nbe f3 7d 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 2a bc ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 79 bb ff ff\n49 89 c4\n48 89 ef\ne8 6e bb ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 26 bd ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 95 bc ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 a8 ba ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 98 7c 40 00\n48 89 df\ne8 88 ba ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 85 bb ff ff\neb 30\n4c 89 ff\ne8 fb b9 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 14 fa ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf b9 74 40 00\n4c 89 ef\ne8 c5 b9 ff ff\n4c 89 3d be 49 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p747
S'.text:0000000000405820\n.text:0000000000405821\n.text:0000000000405823\n.text:0000000000405825\n.text:0000000000405827\n.text:0000000000405829\n.text:000000000040582a\n.text:0000000000405831\n.text:0000000000405838\n.text:000000000040583b\n.text:0000000000405841\n.text:0000000000405846\n.text:000000000040584b\n.text:000000000040584e\n.text:0000000000405851\n.text:0000000000405853\n.text:0000000000405856\n.text:0000000000405858\n.text:000000000040585d\n.text:0000000000405860\n.text:0000000000405865\n.text:0000000000405868\n.text:000000000040586b\n.text:000000000040586d\n.text:0000000000405872\n.text:0000000000405875\n.text:0000000000405877\n.text:0000000000405879\n.text:000000000040587d\n.text:0000000000405882\n.text:0000000000405887\n.text:000000000040588a\n.text:000000000040588d\n.text:000000000040588f\n.text:0000000000405892\n.text:0000000000405895\n.text:0000000000405898\n.text:000000000040589d\n.text:00000000004058a0\n.text:00000000004058a3\n.text:00000000004058a6\n.text:00000000004058a8\n.text:00000000004058ae\n.text:00000000004058b8\n.text:00000000004058bd\n.text:00000000004058c7\n.text:00000000004058cb\n.text:00000000004058cd\n.text:00000000004058d3\n.text:00000000004058d8\n.text:00000000004058e2\n.text:00000000004058e7\n.text:00000000004058f1\n.text:00000000004058f5\n.text:00000000004058fa\n.text:00000000004058fc\n.text:00000000004058ff\n.text:0000000000405904\n.text:0000000000405906\n.text:0000000000405908\n.text:000000000040590e\n.text:0000000000405913\n.text:0000000000405915\n.text:000000000040591a\n.text:000000000040591d\n.text:0000000000405920\n.text:0000000000405926\n.text:000000000040592b\n.text:0000000000405930\n.text:0000000000405932\n.text:0000000000405937\n.text:000000000040593a\n.text:000000000040593f\n.text:0000000000405944\n.text:0000000000405949\n.text:000000000040594c\n.text:000000000040594f\n.text:0000000000405952\n.text:0000000000405955\n.text:0000000000405958\n.text:000000000040595d\n.text:0000000000405960\n.text:0000000000405965\n.text:0000000000405968\n.text:000000000040596d\n.text:0000000000405970\n.text:0000000000405975\n.text:000000000040597a\n.text:000000000040597d\n.text:0000000000405982\n.text:0000000000405987\n.text:0000000000405989\n.text:000000000040598c\n.text:0000000000405991\n.text:0000000000405996\n.text:0000000000405998\n.text:000000000040599b\n.text:000000000040599e\n.text:00000000004059a1\n.text:00000000004059a6\n.text:00000000004059a9\n.text:00000000004059af\n.text:00000000004059b2\n.text:00000000004059b7\n.text:00000000004059ba\n.text:00000000004059bd\n.text:00000000004059c2\n.text:00000000004059c5\n.text:00000000004059ca\n.text:00000000004059cf\n.text:00000000004059d2\n.text:00000000004059d4\n.text:00000000004059d8\n.text:00000000004059dd\n.text:00000000004059e2\n.text:00000000004059e5\n.text:00000000004059ea\n.text:00000000004059ed\n.text:00000000004059f2\n.text:00000000004059f5\n.text:00000000004059fb\n.text:00000000004059fd\n.text:0000000000405a02\n.text:0000000000405a06\n.text:0000000000405a0b\n.text:0000000000405a0e\n.text:0000000000405a11\n.text:0000000000405a17\n.text:0000000000405a20\n.text:0000000000405a23\n.text:0000000000405a28\n.text:0000000000405a2b\n.text:0000000000405a2e\n.text:0000000000405a34\n.text:0000000000405a40\n.text:0000000000405a43\n.text:0000000000405a48\n.text:0000000000405a4b\n.text:0000000000405a4d\n.text:0000000000405a50\n.text:0000000000405a52\n.text:0000000000405a54\n.text:0000000000405a56\n.text:0000000000405a5b\n.text:0000000000405a5d\n.text:0000000000405a60\n.text:0000000000405a65\n.text:0000000000405a67\n.text:0000000000405a6c\n.text:0000000000405a6f\n.text:0000000000405a74\n.text:0000000000405a77\n.text:0000000000405a7c\n.text:0000000000405a81\n.text:0000000000405a84\n.text:0000000000405a86\n.text:0000000000405a8b\n.text:0000000000405a8d\n.text:0000000000405a93\n.text:0000000000405a96\n.text:0000000000405a9b\n.text:0000000000405aa2\n.text:0000000000405aa5\n.text:0000000000405aac\n.text:0000000000405aad\n.text:0000000000405aaf\n.text:0000000000405ab1\n.text:0000000000405ab3\n.text:0000000000405ab5\n.text:0000000000405ab6\n'
p748
tp749
sS'nl_langinfo'
p750
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060a158)();\u000a  return pcVar1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x0060a158]\n'
p753
S'ff 25 92 8a 20 00\n'
p754
S'.plt:00000000004016c0\n'
p755
tp756
sS'c_isalnum'
p757
(S'\n__stdcall c_isalnum()\n'
p758
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p759
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x004055eb\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x004055eb\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x004055ea\nXOR EAX,EAX\nRET\n'
p760
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p761
S'.text:00000000004055d0\n.text:00000000004055d2\n.text:00000000004055d5\n.text:00000000004055d8\n.text:00000000004055da\n.text:00000000004055e4\n.text:00000000004055e8\n.text:00000000004055ea\n.text:00000000004055eb\n.text:00000000004055ee\n.text:00000000004055f1\n.text:00000000004055f3\n.text:00000000004055f5\n'
p762
tp763
sS'readlinebuffer_delim'
p764
(S'\n__stdcall readlinebuffer_delim(linebuffer * linebuffer, FILE * stream)\n'
p765
V\u000alinebuffer * readlinebuffer_delim(linebuffer *linebuffer,FILE *stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  int iVar2;\u000a  char in_DL;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  char *p;\u000a  \u000a  sVar1 = linebuffer->size;\u000a  pcVar3 = linebuffer->buffer;\u000a  iVar2 = feof_unlocked((FILE *)stream);\u000a  if (iVar2 == 0) {\u000a    pcVar4 = pcVar3 + sVar1;\u000a    p = pcVar3;\u000a    do {\u000a      iVar2 = getc_unlocked((FILE *)stream);\u000a      if (iVar2 == -1) {\u000a        if (pcVar3 == p) goto LAB_00402eb6;\u000a        iVar2 = ferror_unlocked((FILE *)stream);\u000a        if (iVar2 != 0) goto LAB_00402eb6;\u000a        iVar2 = (int)in_DL;\u000a        if (pcVar3[-1] == in_DL) break;\u000a      }\u000a      if (pcVar3 == pcVar4) {\u000a        sVar1 = linebuffer->size;\u000a        p = (char *)x2realloc(p,(size_t *)linebuffer);\u000a        pcVar3 = p + sVar1;\u000a        linebuffer->buffer = p;\u000a        pcVar4 = p + linebuffer->size;\u000a      }\u000a      *pcVar3 = (char)iVar2;\u000a      pcVar3 = pcVar3 + 1;\u000a    } while (iVar2 != (int)in_DL);\u000a    *(char **)&linebuffer->length = pcVar3 + -(long)p;\u000a  }\u000a  else {\u000aLAB_00402eb6:\u000a    linebuffer = (linebuffer *)0x0;\u000a  }\u000a  return linebuffer;\u000a}\u000a\u000a
p766
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R12,RSI\nMOV R14,RDI\nMOV R13,qword ptr [R14]\nMOV R15,qword ptr [R14 + 0x10]\nMOV RDI,R12\nCALL 0x004017f0\nTEST EAX,EAX\nJZ 0x00402ebb\nXOR R14D,R14D\nJMP 0x00402f31\nADD R13,R15\nMOV dword ptr [RSP + 0x4],EBX\nMOVSX EAX,BL\nMOV dword ptr [RSP],EAX\nMOV RBX,R15\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R12\nCALL 0x004014d0\nMOV EBP,EAX\nCMP EBP,-0x1\nJNZ 0x00402efc\nCMP RBX,R15\nJZ 0x00402eb6\nMOV RDI,R12\nCALL 0x00401620\nTEST EAX,EAX\nJNZ 0x00402eb6\nMOV EAX,dword ptr [RSP + 0x4]\nCMP byte ptr [RBX + -0x1],AL\nMOV EBP,dword ptr [RSP]\nJZ 0x00402f2a\nCMP RBX,R13\nJNZ 0x00402f1f\nMOV RBX,qword ptr [R14]\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x00404f10\nMOV R15,RAX\nADD RBX,R15\nMOV qword ptr [R14 + 0x10],R15\nMOV R13,R15\nADD R13,qword ptr [R14]\nMOV byte ptr [RBX],BPL\nINC RBX\nCMP EBP,dword ptr [RSP]\nJNZ 0x00402ed0\nSUB RBX,R15\nMOV qword ptr [R14 + 0x8],RBX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p767
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n89 d3\n49 89 f4\n49 89 fe\n4d 8b 2e\n4d 8b 7e 10\n4c 89 e7\ne8 3e e9 ff ff\n85 c0\n74 05\n45 31 f6\neb 76\n4d 01 fd\n89 5c 24 04\n0f be c3\n89 04 24\n4c 89 fb\n0f 1f 44 00 00\n4c 89 e7\ne8 f8 e5 ff ff\n89 c5\n83 fd ff\n75 1d\n4c 39 fb\n74 d2\n4c 89 e7\ne8 34 e7 ff ff\n85 c0\n75 c6\n8b 44 24 04\n38 43 ff\n8b 2c 24\n74 2e\n4c 39 eb\n75 1e\n49 8b 1e\n4c 89 ff\n4c 89 f6\ne8 01 20 00 00\n49 89 c7\n4c 01 fb\n4d 89 7e 10\n4d 89 fd\n4d 03 2e\n40 88 2b\n48 ff c3\n3b 2c 24\n75 a6\n4c 29 fb\n49 89 5e 08\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p768
S'.text:0000000000402e90\n.text:0000000000402e91\n.text:0000000000402e93\n.text:0000000000402e95\n.text:0000000000402e97\n.text:0000000000402e99\n.text:0000000000402e9a\n.text:0000000000402e9b\n.text:0000000000402e9d\n.text:0000000000402ea0\n.text:0000000000402ea3\n.text:0000000000402ea6\n.text:0000000000402eaa\n.text:0000000000402ead\n.text:0000000000402eb2\n.text:0000000000402eb4\n.text:0000000000402eb6\n.text:0000000000402eb9\n.text:0000000000402ebb\n.text:0000000000402ebe\n.text:0000000000402ec2\n.text:0000000000402ec5\n.text:0000000000402ec8\n.text:0000000000402ecb\n.text:0000000000402ed0\n.text:0000000000402ed3\n.text:0000000000402ed8\n.text:0000000000402eda\n.text:0000000000402edd\n.text:0000000000402edf\n.text:0000000000402ee2\n.text:0000000000402ee4\n.text:0000000000402ee7\n.text:0000000000402eec\n.text:0000000000402eee\n.text:0000000000402ef0\n.text:0000000000402ef4\n.text:0000000000402ef7\n.text:0000000000402efa\n.text:0000000000402efc\n.text:0000000000402eff\n.text:0000000000402f01\n.text:0000000000402f04\n.text:0000000000402f07\n.text:0000000000402f0a\n.text:0000000000402f0f\n.text:0000000000402f12\n.text:0000000000402f15\n.text:0000000000402f19\n.text:0000000000402f1c\n.text:0000000000402f1f\n.text:0000000000402f22\n.text:0000000000402f25\n.text:0000000000402f28\n.text:0000000000402f2a\n.text:0000000000402f2d\n.text:0000000000402f31\n.text:0000000000402f34\n.text:0000000000402f38\n.text:0000000000402f39\n.text:0000000000402f3b\n.text:0000000000402f3d\n.text:0000000000402f3f\n.text:0000000000402f41\n.text:0000000000402f42\n'
p769
tp770
sS'x2realloc'
p771
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p772
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p773
S'MOV EDX,0x1\nJMP 0x00404ea0\n'
p774
S'ba 01 00 00 00\neb 89\n'
p775
S'.text:0000000000404f10\n.text:0000000000404f15\n'
p776
tp777
sS'strlen'
p778
(S'\n__stdcall strlen(char * __s)\n'
p779
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060a090)();\u000a  return sVar1;\u000a}\u000a\u000a
p780
S'JMP qword ptr [0x0060a090]\n'
p781
S'ff 25 5a 8b 20 00\n'
p782
S'.plt:0000000000401530\n'
p783
tp784
sS'memcmp'
p785
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p786
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060a0f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p787
S'JMP qword ptr [0x0060a0f8]\n'
p788
S'ff 25 f2 8a 20 00\n'
p789
S'.plt:0000000000401600\n'
p790
tp791
sS'quotearg_n_style_mem'
p792
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p793
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p794
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00404240\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404010\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p795
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p796
S'.text:00000000004042a0\n.text:00000000004042a1\n.text:00000000004042a3\n.text:00000000004042a5\n.text:00000000004042a6\n.text:00000000004042aa\n.text:00000000004042ad\n.text:00000000004042b0\n.text:00000000004042b2\n.text:00000000004042b5\n.text:00000000004042b8\n.text:00000000004042bd\n.text:00000000004042bf\n.text:00000000004042c2\n.text:00000000004042c5\n.text:00000000004042c8\n.text:00000000004042cd\n.text:00000000004042d1\n.text:00000000004042d2\n.text:00000000004042d4\n.text:00000000004042d6\n.text:00000000004042d7\n'
p797
tp798
sS'_exit'
p799
(S'\n__stdcall _exit(int __status)\n'
p800
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060a048)();\u000a  return;\u000a}\u000a\u000a
p801
S'JMP qword ptr [0x0060a048]\n'
p802
S'ff 25 a2 8b 20 00\n'
p803
S'.plt:00000000004014a0\n'
p804
tp805
sS'memcasecmp'
p806
(S'\n__stdcall memcasecmp(void * vs1, void * vs2, size_t n)\n'
p807
V\u000aint memcasecmp(void *vs1,void *vs2,size_t n)\u000a\u000a{\u000a  int iVar1;\u000a  __int32_t **pp_Var2;\u000a  ulong uVar3;\u000a  \u000a  if (n != 0) {\u000a    pp_Var2 = __ctype_toupper_loc();\u000a    uVar3 = 0;\u000a    do {\u000a      iVar1 = (*pp_Var2)[(ulong)*(byte *)((long)vs1 + uVar3)] -\u000a              (*pp_Var2)[(ulong)*(byte *)((long)vs2 + uVar3)];\u000a      if (iVar1 != 0) {\u000a        return iVar1;\u000a      }\u000a      uVar3 = uVar3 + 1;\u000a    } while (uVar3 < n);\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p808
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST RBX,RBX\nJZ 0x00402f9a\nCALL 0x00401440\nMOV RCX,qword ptr [RAX]\nXOR EDX,EDX\nNOP dword ptr [RAX]\nMOVZX EAX,byte ptr [R15 + RDX*0x1]\nMOV EAX,dword ptr [RCX + RAX*0x4]\nMOVZX ESI,byte ptr [R14 + RDX*0x1]\nSUB EAX,dword ptr [RCX + RSI*0x4]\nJNZ 0x00402f9c\nINC RDX\nCMP RDX,RBX\nJC 0x00402f80\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p809
S'41 57\n41 56\n53\n48 89 d3\n49 89 f6\n49 89 ff\n48 85 db\n74 27\ne8 c8 e4 ff ff\n48 8b 08\n31 d2\n0f 1f 00\n41 0f b6 04 17\n8b 04 81\n41 0f b6 34 16\n2b 04 b1\n75 0a\n48 ff c2\n48 39 da\n72 e6\n31 c0\n5b\n41 5e\n41 5f\nc3\n'
p810
S'.text:0000000000402f60\n.text:0000000000402f62\n.text:0000000000402f64\n.text:0000000000402f65\n.text:0000000000402f68\n.text:0000000000402f6b\n.text:0000000000402f6e\n.text:0000000000402f71\n.text:0000000000402f73\n.text:0000000000402f78\n.text:0000000000402f7b\n.text:0000000000402f7d\n.text:0000000000402f80\n.text:0000000000402f85\n.text:0000000000402f88\n.text:0000000000402f8d\n.text:0000000000402f90\n.text:0000000000402f92\n.text:0000000000402f95\n.text:0000000000402f98\n.text:0000000000402f9a\n.text:0000000000402f9c\n.text:0000000000402f9d\n.text:0000000000402f9f\n.text:0000000000402fa1\n'
p811
tp812
sS'__errno_location'
p813
(S'\n__stdcall __errno_location()\n'
p814
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060a038)();\u000a  return piVar1;\u000a}\u000a\u000a
p815
S'JMP qword ptr [0x0060a038]\n'
p816
S'ff 25 b2 8b 20 00\n'
p817
S'.plt:0000000000401480\n'
p818
tp819
sS'bkm_scale_by_power'
p820
(S'\n__stdcall bkm_scale_by_power(ulong * x)\n'
p821
V\u000astrtol_error bkm_scale_by_power(ulong *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p822
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00405431\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x004053d0\nOR EBP,EAX\nDEC EBX\nJNZ 0x00405420\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p823
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p824
S'.text:0000000000405400\n.text:0000000000405401\n.text:0000000000405403\n.text:0000000000405405\n.text:0000000000405406\n.text:0000000000405407\n.text:0000000000405409\n.text:000000000040540c\n.text:000000000040540f\n.text:0000000000405411\n.text:0000000000405413\n.text:0000000000405415\n.text:0000000000405420\n.text:0000000000405423\n.text:0000000000405426\n.text:000000000040542b\n.text:000000000040542d\n.text:000000000040542f\n.text:0000000000405431\n.text:0000000000405433\n.text:0000000000405437\n.text:0000000000405438\n.text:000000000040543a\n.text:000000000040543c\n.text:000000000040543d\n'
p825
tp826
sS'argmatch_valid'
p827
(S'\n__stdcall argmatch_valid(char * * arglist, char * vallist, size_t valsize)\n'
p828
V\u000avoid argmatch_valid(char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  char *__s1;\u000a  long lVar3;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments are:",5);\u000a  fputs_unlocked(__s,stderr);\u000a  __s = *arglist;\u000a  if (__s != (char *)0x0) {\u000a    __s1 = (char *)0x0;\u000a    lVar3 = 0;\u000a    do {\u000a      pFVar1 = stderr;\u000a      if (lVar3 == 0) {\u000aLAB_00402a47:\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,"\u005cn  - %s",__s);\u000a        __s1 = vallist;\u000a      }\u000a      else {\u000a        iVar2 = memcmp(__s1,vallist,valsize);\u000a        if (iVar2 != 0) goto LAB_00402a47;\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,&DAT_00406dc8,__s);\u000a      }\u000a      __s = arglist[lVar3 + 1];\u000a      lVar3 = lVar3 + 1;\u000a      vallist = vallist + valsize;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  (*(code *)PTR_putc_unlocked_0060a140)(10,stderr);\u000a  return;\u000a}\u000a\u000a
p829
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R13,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x406dab\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a2c0]\nMOV RDI,RAX\nCALL 0x00401610\nMOV qword ptr [RSP],RBX\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nMOV R12,qword ptr [0x0060a2c0]\nJZ 0x00402aaa\nXOR EBP,EBP\nXOR R15D,R15D\nTEST R15,R15\nJZ 0x00402a47\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,R14\nCALL 0x00401600\nTEST EAX,EAX\nJZ 0x00402a70\nMOV RDI,RBX\nCALL 0x00404500\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x406dc0\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x004017c0\nMOV RBP,R13\nJMP 0x00402a8f\nMOV RDI,RBX\nCALL 0x00404500\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x406dc8\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x004017c0\nMOV RAX,qword ptr [RSP]\nMOV RBX,qword ptr [RAX + R15*0x8 + 0x8]\nINC R15\nMOV R12,qword ptr [0x0060a2c0]\nADD R13,R14\nTEST RBX,RBX\nJNZ 0x00402a30\nMOV EDI,0xa\nMOV RSI,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401690\n'
p830
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f5\n48 89 fb\n31 ff\nbe ab 6d 40 00\nba 05 00 00 00\ne8 0b eb ff ff\n48 8b 35 b4 78 20 00\n48 89 c7\ne8 fc eb ff ff\n48 89 1c 24\n48 8b 1b\n48 85 db\n4c 8b 25 9b 78 20 00\n0f 84 7f 00 00 00\n31 ed\n45 31 ff\n4d 85 ff\n74 12\n48 89 ef\n4c 89 ee\n4c 89 f2\ne8 bd eb ff ff\n85 c0\n74 29\n48 89 df\ne8 b1 1a 00 00\n48 89 c1\nbe 01 00 00 00\nba c0 6d 40 00\n31 c0\n4c 89 e7\ne8 5a ed ff ff\n4c 89 ed\neb 24\n48 89 df\ne8 88 1a 00 00\n48 89 c1\nbe 01 00 00 00\nba c8 6d 40 00\n31 c0\n4c 89 e7\ne8 31 ed ff ff\n48 8b 04 24\n4a 8b 5c f8 08\n49 ff c7\n4c 8b 25 1e 78 20 00\n4d 01 f5\n48 85 db\n75 86\nbf 0a 00 00 00\n4c 89 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 cb eb ff ff\n'
p831
S'.text:00000000004029e0\n.text:00000000004029e1\n.text:00000000004029e3\n.text:00000000004029e5\n.text:00000000004029e7\n.text:00000000004029e9\n.text:00000000004029ea\n.text:00000000004029eb\n.text:00000000004029ee\n.text:00000000004029f1\n.text:00000000004029f4\n.text:00000000004029f6\n.text:00000000004029fb\n.text:0000000000402a00\n.text:0000000000402a05\n.text:0000000000402a0c\n.text:0000000000402a0f\n.text:0000000000402a14\n.text:0000000000402a18\n.text:0000000000402a1b\n.text:0000000000402a1e\n.text:0000000000402a25\n.text:0000000000402a2b\n.text:0000000000402a2d\n.text:0000000000402a30\n.text:0000000000402a33\n.text:0000000000402a35\n.text:0000000000402a38\n.text:0000000000402a3b\n.text:0000000000402a3e\n.text:0000000000402a43\n.text:0000000000402a45\n.text:0000000000402a47\n.text:0000000000402a4a\n.text:0000000000402a4f\n.text:0000000000402a52\n.text:0000000000402a57\n.text:0000000000402a5c\n.text:0000000000402a5e\n.text:0000000000402a61\n.text:0000000000402a66\n.text:0000000000402a69\n.text:0000000000402a70\n.text:0000000000402a73\n.text:0000000000402a78\n.text:0000000000402a7b\n.text:0000000000402a80\n.text:0000000000402a85\n.text:0000000000402a87\n.text:0000000000402a8a\n.text:0000000000402a8f\n.text:0000000000402a93\n.text:0000000000402a98\n.text:0000000000402a9b\n.text:0000000000402aa2\n.text:0000000000402aa5\n.text:0000000000402aa8\n.text:0000000000402aaa\n.text:0000000000402aaf\n.text:0000000000402ab2\n.text:0000000000402ab6\n.text:0000000000402ab7\n.text:0000000000402ab9\n.text:0000000000402abb\n.text:0000000000402abd\n.text:0000000000402abf\n.text:0000000000402ac0\n'
p832
tp833
sS'x2nrealloc'
p834
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p835
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p836
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00404ecc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404ef9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00404eea\nTEST RCX,RCX\nJNZ 0x00404eea\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00404e70\nPUSH RAX\nCALL 0x00404fc0\n'
p837
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p838
S'.text:0000000000404ea0\n.text:0000000000404ea3\n.text:0000000000404ea6\n.text:0000000000404ea9\n.text:0000000000404eab\n.text:0000000000404eb5\n.text:0000000000404eb7\n.text:0000000000404eba\n.text:0000000000404ebd\n.text:0000000000404ebf\n.text:0000000000404ec2\n.text:0000000000404ec5\n.text:0000000000404eca\n.text:0000000000404ecc\n.text:0000000000404ecf\n.text:0000000000404ed1\n.text:0000000000404ed6\n.text:0000000000404ed8\n.text:0000000000404edb\n.text:0000000000404edd\n.text:0000000000404ee4\n.text:0000000000404ee7\n.text:0000000000404eea\n.text:0000000000404eed\n.text:0000000000404ef1\n.text:0000000000404ef4\n.text:0000000000404ef9\n.text:0000000000404efa\n'
p839
tp840
sS'different'
p841
(S'\n__stdcall different(char * old, char * new, size_t oldlen, size_t newlen)\n'
p842
V\u000a_Bool different(char *old,char *new,size_t oldlen,size_t newlen)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (check_chars < oldlen) {\u000a    oldlen = check_chars;\u000a  }\u000a  if (check_chars < newlen) {\u000a    newlen = check_chars;\u000a  }\u000a  if (ignore_case == 1) {\u000a    if (oldlen != newlen) {\u000a      return true;\u000a    }\u000a    iVar1 = memcasecmp(old,new,oldlen);\u000a  }\u000a  else {\u000a    if (hard_LC_COLLATE == false) {\u000a      if (oldlen != newlen) {\u000a        return true;\u000a      }\u000a      iVar1 = memcmp(old,new,oldlen);\u000a    }\u000a    else {\u000a      iVar1 = xmemcoll(old,oldlen,new,newlen);\u000a    }\u000a  }\u000a  return (_Bool)(iVar1 != 0);\u000a}\u000a\u000a
p843
S'PUSH RAX\nMOV R8,RSI\nMOV RAX,qword ptr [0x0060a2e8]\nCMP RAX,RDX\nCMOVC RDX,RAX\nCMP RAX,RCX\nCMOVC RCX,RAX\nCMP byte ptr [0x0060a300],0x1\nJNZ 0x004027a3\nMOV AL,0x1\nCMP RDX,RCX\nJNZ 0x004027cd\nMOV RSI,R8\nCALL 0x00402f60\nJMP 0x004027c8\nCMP byte ptr [0x0060a2d0],0x0\nJZ 0x004027b9\nMOV RSI,RDX\nMOV RDX,R8\nCALL 0x00404ff0\nJMP 0x004027c8\nMOV AL,0x1\nCMP RDX,RCX\nJNZ 0x004027cd\nMOV RSI,R8\nCALL 0x00401600\nTEST EAX,EAX\nSETNZ AL\nPOP RCX\nRET\n'
p844
S'50\n49 89 f0\n48 8b 05 6d 7b 20 00\n48 39 d0\n48 0f 42 d0\n48 39 c8\n48 0f 42 c8\n80 3d 70 7b 20 00 01\n75 11\nb0 01\n48 39 ca\n75 34\n4c 89 c6\ne8 bf 07 00 00\neb 25\n80 3d 26 7b 20 00 00\n74 0d\n48 89 d6\n4c 89 c2\ne8 39 28 00 00\neb 0f\nb0 01\n48 39 ca\n75 0d\n4c 89 c6\ne8 38 ee ff ff\n85 c0\n0f 95 c0\n59\nc3\n'
p845
S'.text:0000000000402770\n.text:0000000000402771\n.text:0000000000402774\n.text:000000000040277b\n.text:000000000040277e\n.text:0000000000402782\n.text:0000000000402785\n.text:0000000000402789\n.text:0000000000402790\n.text:0000000000402792\n.text:0000000000402794\n.text:0000000000402797\n.text:0000000000402799\n.text:000000000040279c\n.text:00000000004027a1\n.text:00000000004027a3\n.text:00000000004027aa\n.text:00000000004027ac\n.text:00000000004027af\n.text:00000000004027b2\n.text:00000000004027b7\n.text:00000000004027b9\n.text:00000000004027bb\n.text:00000000004027be\n.text:00000000004027c0\n.text:00000000004027c3\n.text:00000000004027c8\n.text:00000000004027ca\n.text:00000000004027cd\n.text:00000000004027ce\n'
p846
tp847
sS'xrealloc'
p848
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p849
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p850
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00404e87\nTEST RBX,RBX\nJNZ 0x00404e87\nCALL 0x00401460\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401710\nTEST RBX,RBX\nJZ 0x00404e99\nTEST RAX,RAX\nJZ 0x00404e9b\nPOP RBX\nRET\nCALL 0x00404fc0\n'
p851
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 dd c5 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 81 c8 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p852
S'.text:0000000000404e70\n.text:0000000000404e71\n.text:0000000000404e74\n.text:0000000000404e77\n.text:0000000000404e79\n.text:0000000000404e7c\n.text:0000000000404e7e\n.text:0000000000404e83\n.text:0000000000404e85\n.text:0000000000404e86\n.text:0000000000404e87\n.text:0000000000404e8a\n.text:0000000000404e8f\n.text:0000000000404e92\n.text:0000000000404e94\n.text:0000000000404e97\n.text:0000000000404e99\n.text:0000000000404e9a\n.text:0000000000404e9b\n'
p853
tp854
sS'freopen_safer'
p855
(S'\n__stdcall freopen_safer(char * name, char * mode, FILE * f)\n'
p856
V\u000aFILE * freopen_safer(char *name,char *mode,FILE *f)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  int *piVar5;\u000a  FILE *pFVar6;\u000a  bool bVar7;\u000a  bool bVar8;\u000a  \u000a  iVar4 = fileno((FILE *)f);\u000a  bVar7 = false;\u000a  bVar8 = false;\u000a  if (iVar4 == 0) {\u000a    bVar1 = false;\u000a    bVar2 = false;\u000aLAB_00402d84:\u000a    pFVar6 = (FILE *)freopen(name,mode,(FILE *)f);\u000a    bVar8 = bVar7;\u000a  }\u000a  else {\u000a    if (iVar4 == 1) {\u000a      bVar1 = false;\u000a    }\u000a    else {\u000a      if (iVar4 != 2) {\u000a        iVar4 = dup2(2,2);\u000a        bVar7 = iVar4 != 2;\u000a      }\u000a      iVar4 = dup2(1,1);\u000a      bVar8 = iVar4 != 1;\u000a      bVar1 = bVar7;\u000a    }\u000a    bVar2 = false;\u000a    iVar4 = dup2(0,0);\u000a    if (iVar4 != 0) {\u000a      pFVar6 = (FILE *)0x0;\u000a      _Var3 = protect_fd();\u000a      bVar2 = true;\u000a      if (_Var3 == false) {\u000a        bVar2 = true;\u000a        goto LAB_00402da2;\u000a      }\u000a    }\u000a    if ((bVar8) && (_Var3 = protect_fd(), _Var3 == false)) {\u000a      bVar8 = true;\u000a    }\u000a    else {\u000a      bVar7 = bVar8;\u000a      if ((!bVar1) || (_Var3 = protect_fd(), bVar7 = bVar8, _Var3 != false)) goto LAB_00402d84;\u000a    }\u000a    pFVar6 = (FILE *)0x0;\u000a  }\u000aLAB_00402da2:\u000a  piVar5 = __errno_location();\u000a  iVar4 = *piVar5;\u000a  if (bVar1) {\u000a    close(2);\u000a  }\u000a  if (bVar8) {\u000a    close(1);\u000a  }\u000a  if (bVar2) {\u000a    close(0);\u000a  }\u000a  if (pFVar6 == (FILE *)0x0) {\u000a    *piVar5 = iVar4;\u000a  }\u000a  return pFVar6;\u000a}\u000a\u000a
p857
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBP,RDX\nMOV R13,RSI\nMOV RBX,RDI\nMOV RDI,RBP\nCALL 0x00401680\nXOR R14D,R14D\nTEST EAX,EAX\nJZ 0x00402d1e\nCMP EAX,0x1\nJZ 0x00402d26\nCMP EAX,0x2\nJZ 0x00402d03\nMOV EDI,0x2\nMOV ESI,0x2\nCALL 0x00401560\nCMP EAX,0x2\nSETNZ R14B\nMOV R15B,R14B\nMOV EDI,0x1\nMOV ESI,0x1\nCALL 0x00401560\nCMP EAX,0x1\nSETNZ R14B\nJMP 0x00402d29\nXOR R15D,R15D\nXOR R12D,R12D\nJMP 0x00402d84\nXOR R15D,R15D\nXOR R12D,R12D\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x00401560\nTEST EAX,EAX\nJZ 0x00402d5e\nMOV qword ptr [RSP],RBP\nMOV RBP,RBX\nMOV RBX,R13\nXOR R13D,R13D\nXOR EDI,EDI\nCALL 0x00402df0\nMOV R12B,0x1\nTEST AL,AL\nJZ 0x00402d97\nMOV R13,RBX\nMOV RBX,RBP\nMOV RBP,qword ptr [RSP]\nTEST R14B,R14B\nJZ 0x00402d71\nMOV EDI,0x1\nCALL 0x00402df0\nTEST AL,AL\nJZ 0x00402d9c\nTEST R15B,R15B\nJZ 0x00402d84\nMOV EDI,0x2\nCALL 0x00402df0\nTEST AL,AL\nJZ 0x00402d9f\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,RBP\nCALL 0x004015c0\nMOV R13,RAX\nJMP 0x00402da2\nMOV R12B,0x1\nJMP 0x00402da2\nMOV R14B,0x1\nXOR R13D,R13D\nCALL 0x00401480\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nTEST R15B,R15B\nJZ 0x00402dbb\nMOV EDI,0x2\nCALL 0x004015e0\nTEST R14B,R14B\nJZ 0x00402dca\nMOV EDI,0x1\nCALL 0x004015e0\nTEST R12B,R12B\nJZ 0x00402dd6\nXOR EDI,EDI\nCALL 0x004015e0\nTEST R13,R13\nJNZ 0x00402ddd\nMOV dword ptr [RBX],EBP\nMOV RAX,R13\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p858
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d5\n49 89 f5\n48 89 fb\n48 89 ef\ne8 a4 e9 ff ff\n45 31 f6\n85 c0\n74 3b\n83 f8 01\n74 3e\n83 f8 02\n74 16\nbf 02 00 00 00\nbe 02 00 00 00\ne8 64 e8 ff ff\n83 f8 02\n41 0f 95 c6\n45 88 f7\nbf 01 00 00 00\nbe 01 00 00 00\ne8 4b e8 ff ff\n83 f8 01\n41 0f 95 c6\neb 0b\n45 31 ff\n45 31 e4\neb 5e\n45 31 ff\n45 31 e4\n31 ff\n31 f6\ne8 2b e8 ff ff\n85 c0\n74 25\n48 89 2c 24\n48 89 dd\n4c 89 eb\n45 31 ed\n31 ff\ne8 a3 00 00 00\n41 b4 01\n84 c0\n74 43\n49 89 dd\n48 89 eb\n48 8b 2c 24\n45 84 f6\n74 0e\nbf 01 00 00 00\ne8 83 00 00 00\n84 c0\n74 2b\n45 84 ff\n74 0e\nbf 02 00 00 00\ne8 70 00 00 00\n84 c0\n74 1b\n48 89 df\n4c 89 ee\n48 89 ea\ne8 2e e8 ff ff\n49 89 c5\neb 0b\n41 b4 01\neb 06\n41 b6 01\n45 31 ed\ne8 d9 e6 ff ff\n48 89 c3\n8b 2b\n45 84 ff\n74 0a\nbf 02 00 00 00\ne8 25 e8 ff ff\n45 84 f6\n74 0a\nbf 01 00 00 00\ne8 16 e8 ff ff\n45 84 e4\n74 07\n31 ff\ne8 0a e8 ff ff\n4d 85 ed\n75 02\n89 2b\n4c 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p859
S'.text:0000000000402cc0\n.text:0000000000402cc1\n.text:0000000000402cc3\n.text:0000000000402cc5\n.text:0000000000402cc7\n.text:0000000000402cc9\n.text:0000000000402cca\n.text:0000000000402ccb\n.text:0000000000402cce\n.text:0000000000402cd1\n.text:0000000000402cd4\n.text:0000000000402cd7\n.text:0000000000402cdc\n.text:0000000000402cdf\n.text:0000000000402ce1\n.text:0000000000402ce3\n.text:0000000000402ce6\n.text:0000000000402ce8\n.text:0000000000402ceb\n.text:0000000000402ced\n.text:0000000000402cf2\n.text:0000000000402cf7\n.text:0000000000402cfc\n.text:0000000000402cff\n.text:0000000000402d03\n.text:0000000000402d06\n.text:0000000000402d0b\n.text:0000000000402d10\n.text:0000000000402d15\n.text:0000000000402d18\n.text:0000000000402d1c\n.text:0000000000402d1e\n.text:0000000000402d21\n.text:0000000000402d24\n.text:0000000000402d26\n.text:0000000000402d29\n.text:0000000000402d2c\n.text:0000000000402d2e\n.text:0000000000402d30\n.text:0000000000402d35\n.text:0000000000402d37\n.text:0000000000402d39\n.text:0000000000402d3d\n.text:0000000000402d40\n.text:0000000000402d43\n.text:0000000000402d46\n.text:0000000000402d48\n.text:0000000000402d4d\n.text:0000000000402d50\n.text:0000000000402d52\n.text:0000000000402d54\n.text:0000000000402d57\n.text:0000000000402d5a\n.text:0000000000402d5e\n.text:0000000000402d61\n.text:0000000000402d63\n.text:0000000000402d68\n.text:0000000000402d6d\n.text:0000000000402d6f\n.text:0000000000402d71\n.text:0000000000402d74\n.text:0000000000402d76\n.text:0000000000402d7b\n.text:0000000000402d80\n.text:0000000000402d82\n.text:0000000000402d84\n.text:0000000000402d87\n.text:0000000000402d8a\n.text:0000000000402d8d\n.text:0000000000402d92\n.text:0000000000402d95\n.text:0000000000402d97\n.text:0000000000402d9a\n.text:0000000000402d9c\n.text:0000000000402d9f\n.text:0000000000402da2\n.text:0000000000402da7\n.text:0000000000402daa\n.text:0000000000402dac\n.text:0000000000402daf\n.text:0000000000402db1\n.text:0000000000402db6\n.text:0000000000402dbb\n.text:0000000000402dbe\n.text:0000000000402dc0\n.text:0000000000402dc5\n.text:0000000000402dca\n.text:0000000000402dcd\n.text:0000000000402dcf\n.text:0000000000402dd1\n.text:0000000000402dd6\n.text:0000000000402dd9\n.text:0000000000402ddb\n.text:0000000000402ddd\n.text:0000000000402de0\n.text:0000000000402de4\n.text:0000000000402de5\n.text:0000000000402de7\n.text:0000000000402de9\n.text:0000000000402deb\n.text:0000000000402ded\n.text:0000000000402dee\n'
p860
tp861
sS'quotearg_n_options'
p862
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p863
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p864
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401480\nTEST R12D,R12D\nJS 0x004041c1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060a228]\nCMP dword ptr [0x0060a230],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x004040db\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60a238\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00404e70\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060a228],R15\nJNZ 0x004040a2\nMOVUPS XMM0,xmmword ptr [0x0060a238]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060a230]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x004015b0\nMOV dword ptr [0x0060a230],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00403230\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040413d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x004041ab\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60a360\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00404168\nCALL 0x00401460\nMOV RDI,R15\nCALL 0x00404f00\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00403230\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401470\n'
p865
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 51 d4 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 de 61 20 00\n44 39 25 df 61 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 38 a2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 e8 0d 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 93 61 20 00\n75 0b\n0f 10 05 9a 61 20 00\n41 0f 11 07\n8b 05 88 61 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 ed d4 ff ff\n89 1d 67 61 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 60 a3 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 f8 d2 ff ff\n4c 89 ff\ne8 90 0d 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 aa d2 ff ff\n'
p866
S'.text:0000000000404010\n.text:0000000000404011\n.text:0000000000404013\n.text:0000000000404015\n.text:0000000000404017\n.text:0000000000404019\n.text:000000000040401a\n.text:000000000040401e\n.text:0000000000404021\n.text:0000000000404024\n.text:0000000000404027\n.text:000000000040402a\n.text:000000000040402f\n.text:0000000000404032\n.text:0000000000404038\n.text:000000000040403d\n.text:000000000040403f\n.text:0000000000404043\n.text:000000000040404a\n.text:0000000000404051\n.text:0000000000404056\n.text:000000000040405b\n.text:0000000000404060\n.text:0000000000404062\n.text:0000000000404067\n.text:000000000040406a\n.text:000000000040406d\n.text:0000000000404073\n.text:0000000000404075\n.text:0000000000404078\n.text:000000000040407c\n.text:000000000040407f\n.text:0000000000404083\n.text:0000000000404088\n.text:000000000040408b\n.text:000000000040408e\n.text:0000000000404095\n.text:0000000000404097\n.text:000000000040409e\n.text:00000000004040a2\n.text:00000000004040a8\n.text:00000000004040ab\n.text:00000000004040af\n.text:00000000004040b2\n.text:00000000004040b5\n.text:00000000004040b9\n.text:00000000004040bb\n.text:00000000004040be\n.text:00000000004040c3\n.text:00000000004040c9\n.text:00000000004040cc\n.text:00000000004040d1\n.text:00000000004040d6\n.text:00000000004040db\n.text:00000000004040de\n.text:00000000004040e2\n.text:00000000004040e6\n.text:00000000004040eb\n.text:00000000004040ef\n.text:00000000004040f3\n.text:00000000004040f7\n.text:00000000004040fb\n.text:00000000004040ff\n.text:0000000000404104\n.text:0000000000404107\n.text:000000000040410a\n.text:000000000040410d\n.text:0000000000404112\n.text:0000000000404115\n.text:0000000000404118\n.text:000000000040411b\n.text:000000000040411c\n.text:0000000000404121\n.text:0000000000404125\n.text:0000000000404128\n.text:000000000040412b\n.text:000000000040412d\n.text:0000000000404132\n.text:0000000000404136\n.text:000000000040413b\n.text:000000000040413d\n.text:0000000000404141\n.text:0000000000404146\n.text:0000000000404149\n.text:000000000040414c\n.text:0000000000404151\n.text:0000000000404156\n.text:0000000000404159\n.text:000000000040415e\n.text:0000000000404161\n.text:0000000000404163\n.text:0000000000404168\n.text:000000000040416b\n.text:0000000000404170\n.text:0000000000404173\n.text:0000000000404176\n.text:000000000040417b\n.text:000000000040417e\n.text:0000000000404182\n.text:0000000000404185\n.text:0000000000404188\n.text:000000000040418d\n.text:0000000000404192\n.text:0000000000404197\n.text:000000000040419a\n.text:000000000040419d\n.text:000000000040419e\n.text:00000000004041a3\n.text:00000000004041a7\n.text:00000000004041ab\n.text:00000000004041af\n.text:00000000004041b2\n.text:00000000004041b6\n.text:00000000004041b7\n.text:00000000004041b9\n.text:00000000004041bb\n.text:00000000004041bd\n.text:00000000004041bf\n.text:00000000004041c0\n.text:00000000004041c1\n'
p867
tp868
sS'strcmp'
p869
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p870
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060a118)();\u000a  return iVar1;\u000a}\u000a\u000a
p871
S'JMP qword ptr [0x0060a118]\n'
p872
S'ff 25 d2 8a 20 00\n'
p873
S'.plt:0000000000401640\n'
p874
tp875
sS'set_custom_quoting'
p876
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p877
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p878
S'TEST RDI,RDI\nMOV EAX,0x60a320\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x004031a5\nTEST RDX,RDX\nJZ 0x004031a5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401470\n'
p879
S'48 85 ff\nb8 20 a3 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 c5 e2 ff ff\n'
p880
S'.text:0000000000403180\n.text:0000000000403183\n.text:0000000000403188\n.text:000000000040318c\n.text:0000000000403192\n.text:0000000000403195\n.text:0000000000403197\n.text:000000000040319a\n.text:000000000040319c\n.text:00000000004031a0\n.text:00000000004031a4\n.text:00000000004031a5\n.text:00000000004031a6\n'
p881
tp882
sS'c_isalpha'
p883
(S'\n__stdcall c_isalpha()\n'
p884
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p885
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x0040561b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p886
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p887
S'.text:0000000000405600\n.text:0000000000405603\n.text:0000000000405606\n.text:0000000000405608\n.text:0000000000405612\n.text:0000000000405614\n.text:0000000000405617\n.text:000000000040561a\n.text:000000000040561b\n.text:000000000040561d\n'
p888
tp889
sS'feof_unlocked'
p890
(S'\n__stdcall feof_unlocked(FILE * __stream)\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint feof_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_feof_unlocked_0060a1f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x0060a1f0]\n'
p893
S'ff 25 fa 89 20 00\n'
p894
S'.plt:00000000004017f0\n'
p895
tp896
sS'quotearg_custom_mem'
p897
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p898
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p899
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00404420\n'
p900
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p901
S'.text:00000000004044b0\n.text:00000000004044b3\n.text:00000000004044b6\n.text:00000000004044b9\n.text:00000000004044bc\n.text:00000000004044be\n.text:00000000004044c1\n'
p902
tp903
sS'close_stdout'
p904
(S'\n__stdcall close_stdout()\n'
p905
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402bf7;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,&DAT_00406dca,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402bf7:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p906
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060a288]\nCALL 0x00405720\nTEST EAX,EAX\nJZ 0x00402bf7\nCMP byte ptr [0x0060a310],0x0\nJZ 0x00402c0c\nCALL 0x00401480\nCMP dword ptr [RAX],0x20\nJNZ 0x00402c0c\nMOV RDI,qword ptr [0x0060a2c0]\nCALL 0x00405720\nTEST EAX,EAX\nJNZ 0x00402c51\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x406dcd\nMOV EDX,0x5\nCALL 0x00401510\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060a308]\nCALL 0x00401480\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00402c5c\nXOR EDI,EDI\nMOV EDX,0x406dca\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401750\nMOV EDI,dword ptr [0x0060a220]\nCALL 0x004014a0\nMOV EDI,dword ptr [0x0060a220]\nCALL 0x004014a0\nMOV RDI,RBX\nCALL 0x004043a0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x406d4e\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401750\nMOV EDI,dword ptr [0x0060a220]\nCALL 0x004014a0\n'
p907
S'55\n41 56\n53\n48 8b 3d ad 76 20 00\ne8 40 2b 00 00\n85 c0\n74 13\n80 3d 25 77 20 00 00\n74 1f\ne8 8e e8 ff ff\n83 38 20\n75 15\n48 8b 3d c2 76 20 00\ne8 1d 2b 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe cd 6d 40 00\nba 05 00 00 00\ne8 f3 e8 ff ff\n49 89 c6\n48 8b 1d e1 76 20 00\ne8 54 e8 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba ca 6d 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 0a eb ff ff\n8b 3d d4 75 20 00\ne8 4f e8 ff ff\n8b 3d c9 75 20 00\ne8 44 e8 ff ff\n48 89 df\ne8 3c 17 00 00\n48 89 c1\n31 ff\nba 4e 6d 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 d6 ea ff ff\n8b 3d a0 75 20 00\ne8 1b e8 ff ff\n'
p908
S'.text:0000000000402bd0\n.text:0000000000402bd1\n.text:0000000000402bd3\n.text:0000000000402bd4\n.text:0000000000402bdb\n.text:0000000000402be0\n.text:0000000000402be2\n.text:0000000000402be4\n.text:0000000000402beb\n.text:0000000000402bed\n.text:0000000000402bf2\n.text:0000000000402bf5\n.text:0000000000402bf7\n.text:0000000000402bfe\n.text:0000000000402c03\n.text:0000000000402c05\n.text:0000000000402c07\n.text:0000000000402c08\n.text:0000000000402c0a\n.text:0000000000402c0b\n.text:0000000000402c0c\n.text:0000000000402c0e\n.text:0000000000402c13\n.text:0000000000402c18\n.text:0000000000402c1d\n.text:0000000000402c20\n.text:0000000000402c27\n.text:0000000000402c2c\n.text:0000000000402c2f\n.text:0000000000402c31\n.text:0000000000402c33\n.text:0000000000402c35\n.text:0000000000402c3a\n.text:0000000000402c3c\n.text:0000000000402c3e\n.text:0000000000402c41\n.text:0000000000402c46\n.text:0000000000402c4c\n.text:0000000000402c51\n.text:0000000000402c57\n.text:0000000000402c5c\n.text:0000000000402c5f\n.text:0000000000402c64\n.text:0000000000402c67\n.text:0000000000402c69\n.text:0000000000402c6e\n.text:0000000000402c70\n.text:0000000000402c72\n.text:0000000000402c75\n.text:0000000000402c7a\n.text:0000000000402c80\n'
p909
tp910
sS'version_etc_ar'
p911
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p912
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p913
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00404c80\nJMP 0x00404910\n'
p914
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p915
S'.text:0000000000404c70\n.text:0000000000404c77\n.text:0000000000404c80\n.text:0000000000404c86\n.text:0000000000404c8a\n.text:0000000000404c8c\n'
p916
tp917
sS'rpl_calloc'
p918
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p919
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060a110)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p920
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x0040547b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00405480\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00405480\nPUSH RAX\nCALL 0x00401480\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401630\n'
p921
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 0f c0 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 a5 c1 ff ff\n'
p922
S'.text:0000000000405440\n.text:0000000000405443\n.text:0000000000405448\n.text:000000000040544a\n.text:000000000040544d\n.text:0000000000405452\n.text:0000000000405454\n.text:0000000000405457\n.text:000000000040545b\n.text:000000000040545d\n.text:0000000000405460\n.text:0000000000405463\n.text:0000000000405466\n.text:0000000000405469\n.text:000000000040546b\n.text:000000000040546c\n.text:0000000000405471\n.text:0000000000405477\n.text:0000000000405479\n.text:000000000040547a\n.text:000000000040547b\n.text:0000000000405480\n.text:0000000000405483\n.text:0000000000405486\n'
p923
tp924
sS'memset'
p925
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p926
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060a0d0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p927
S'JMP qword ptr [0x0060a0d0]\n'
p928
S'ff 25 1a 8b 20 00\n'
p929
S'.plt:00000000004015b0\n'
p930
tp931
sS'c_isxdigit'
p932
(S'\n__stdcall c_isxdigit()\n'
p933
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p934
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x004056fb\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p935
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p936
S'.text:00000000004056e0\n.text:00000000004056e3\n.text:00000000004056e6\n.text:00000000004056e8\n.text:00000000004056f2\n.text:00000000004056f4\n.text:00000000004056f7\n.text:00000000004056fa\n.text:00000000004056fb\n.text:00000000004056fd\n'
p937
tp938
sS'__libc_csu_fini'
p939
(S'\n__stdcall __libc_csu_fini()\n'
p940
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p941
S'RET\n'
p942
S'f3 c3\n'
p943
S'.text:0000000000405c90\n'
p944
tp945
sS'getc_unlocked'
p946
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p947
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060a060)();\u000a  return iVar1;\u000a}\u000a\u000a
p948
S'JMP qword ptr [0x0060a060]\n'
p949
S'ff 25 8a 8b 20 00\n'
p950
S'.plt:00000000004014d0\n'
p951
tp952
sS'abort'
p953
(S'\n__stdcall abort()\n'
p954
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060a030)();\u000a  return;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x0060a030]\n'
p956
S'ff 25 ba 8b 20 00\n'
p957
S'.plt:0000000000401470\n'
p958
tp959
sS'c_isascii'
p960
(S'\n__stdcall c_isascii()\n'
p961
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p962
S'CMP EDI,0x80\nSETC AL\nRET\n'
p963
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p964
S'.text:0000000000405620\n.text:0000000000405626\n.text:0000000000405629\n'
p965
tp966
sS'__xargmatch_internal'
p967
(S'\n__stdcall __xargmatch_internal(char * context, char * arg, char * * arglist, char * vallist, size_t valsize, argmatch_exit_fn * exit_fn)\n'
p968
V\u000aptrdiff_t __xargmatch_internal\u000a                    (char *context,char *arg,char **arglist,char *vallist,size_t valsize,\u000a                    void (*exit_fn)())\u000a\u000a{\u000a  ptrdiff_t problem;\u000a  \u000a  problem = argmatch(arg,arglist,vallist,valsize);\u000a  if (problem < 0) {\u000a    argmatch_invalid(context,arg,problem);\u000a    argmatch_valid(arglist,vallist,valsize);\u000a    (*exit_fn)();\u000a    problem = -1;\u000a  }\u000a  return problem;\u000a}\u000a\u000a
p969
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x00402870\nTEST RAX,RAX\nJNS 0x00402b29\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00402970\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x004029e0\nCALL R14\nMOV RAX,-0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p970
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c7\n49 89 cc\n49 89 d5\n48 89 f3\n48 89 fd\n48 89 df\n4c 89 ee\n4c 89 e2\n4c 89 f9\ne8 72 fd ff ff\n48 85 c0\n79 26\n48 89 ef\n48 89 de\n48 89 c2\ne8 5f fe ff ff\n4c 89 ef\n4c 89 e6\n4c 89 fa\ne8 c1 fe ff ff\n41 ff d6\n48 c7 c0 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p971
S'.text:0000000000402ad0\n.text:0000000000402ad1\n.text:0000000000402ad3\n.text:0000000000402ad5\n.text:0000000000402ad7\n.text:0000000000402ad9\n.text:0000000000402ada\n.text:0000000000402adb\n.text:0000000000402ade\n.text:0000000000402ae1\n.text:0000000000402ae4\n.text:0000000000402ae7\n.text:0000000000402aea\n.text:0000000000402aed\n.text:0000000000402af0\n.text:0000000000402af3\n.text:0000000000402af6\n.text:0000000000402af9\n.text:0000000000402afe\n.text:0000000000402b01\n.text:0000000000402b03\n.text:0000000000402b06\n.text:0000000000402b09\n.text:0000000000402b0c\n.text:0000000000402b11\n.text:0000000000402b14\n.text:0000000000402b17\n.text:0000000000402b1a\n.text:0000000000402b1f\n.text:0000000000402b22\n.text:0000000000402b29\n.text:0000000000402b2d\n.text:0000000000402b2e\n.text:0000000000402b30\n.text:0000000000402b32\n.text:0000000000402b34\n.text:0000000000402b36\n.text:0000000000402b37\n'
p972
tp973
sS'version_etc'
p974
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p975
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p976
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404d42\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00404ca0\nADD RSP,0xd8\nRET\n'
p977
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p978
S'.text:0000000000404d00\n.text:0000000000404d07\n.text:0000000000404d09\n.text:0000000000404d0b\n.text:0000000000404d10\n.text:0000000000404d15\n.text:0000000000404d1a\n.text:0000000000404d22\n.text:0000000000404d2a\n.text:0000000000404d32\n.text:0000000000404d3a\n.text:0000000000404d42\n.text:0000000000404d47\n.text:0000000000404d4c\n.text:0000000000404d51\n.text:0000000000404d56\n.text:0000000000404d5e\n.text:0000000000404d63\n.text:0000000000404d6b\n.text:0000000000404d72\n.text:0000000000404d75\n.text:0000000000404d7a\n.text:0000000000404d81\n'
p979
tp980
sS'protect_fd'
p981
(S'\n__stdcall protect_fd()\n'
p982
V\u000a_Bool protect_fd(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int __fd;\u000a  int *piVar2;\u000a  int in_EDI;\u000a  \u000a  __fd = open("/dev/null",0);\u000a  uVar1 = 1;\u000a  if (__fd != in_EDI) {\u000a    if (-1 < __fd) {\u000a      close(__fd);\u000a      piVar2 = __errno_location();\u000a      *piVar2 = 9;\u000a    }\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p983
S'PUSH RBX\nMOV EBX,EDI\nMOV EDI,0x406dd9\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x00401760\nMOV ECX,EAX\nMOV AL,0x1\nCMP ECX,EBX\nJZ 0x00402e21\nTEST ECX,ECX\nJS 0x00402e1f\nMOV EDI,ECX\nCALL 0x004015e0\nCALL 0x00401480\nMOV dword ptr [RAX],0x9\nXOR EAX,EAX\nPOP RBX\nRET\n'
p984
S'53\n89 fb\nbf d9 6d 40 00\n31 f6\n31 c0\ne8 5f e9 ff ff\n89 c1\nb0 01\n39 d9\n74 18\n85 c9\n78 12\n89 cf\ne8 cc e7 ff ff\ne8 67 e6 ff ff\nc7 00 09 00 00 00\n31 c0\n5b\nc3\n'
p985
S'.text:0000000000402df0\n.text:0000000000402df1\n.text:0000000000402df3\n.text:0000000000402df8\n.text:0000000000402dfa\n.text:0000000000402dfc\n.text:0000000000402e01\n.text:0000000000402e03\n.text:0000000000402e05\n.text:0000000000402e07\n.text:0000000000402e09\n.text:0000000000402e0b\n.text:0000000000402e0d\n.text:0000000000402e0f\n.text:0000000000402e14\n.text:0000000000402e19\n.text:0000000000402e1f\n.text:0000000000402e21\n.text:0000000000402e22\n'
p986
tp987
sS'posix_fadvise'
p988
(S'\n__stdcall posix_fadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p989
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint posix_fadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_0060a0f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p990
S'JMP qword ptr [0x0060a0f0]\n'
p991
S'ff 25 fa 8a 20 00\n'
p992
S'.plt:00000000004015f0\n'
p993
tp994
sS'__ctype_b_loc'
p995
(S'\n__stdcall __ctype_b_loc()\n'
p996
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060a1f8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p997
S'JMP qword ptr [0x0060a1f8]\n'
p998
S'ff 25 f2 89 20 00\n'
p999
S'.plt:0000000000401800\n'
p1000
tp1001
sS'lseek'
p1002
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p1003
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060a0c0)();\u000a  return _Var1;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x0060a0c0]\n'
p1005
S'ff 25 2a 8b 20 00\n'
p1006
S'.plt:0000000000401590\n'
p1007
tp1008
sS'fdadvise'
p1009
(S'\n__stdcall fdadvise(int __fd, __off_t __offset, __off_t __len, int __advise)\n'
p1010
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fdadvise(int __fd,__off_t __offset,__off_t __len,int __advise)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_posix_fadvise_0060a0f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p1011
S'JMP 0x004015f0\n'
p1012
S'e9 5b e9 ff ff\n'
p1013
S'.text:0000000000402c90\n'
p1014
tp1015
sS'quotearg'
p1016
(S'\n__stdcall quotearg(char * arg)\n'
p1017
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1018
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404000\n'
p1019
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1020
S'.text:00000000004041e0\n.text:00000000004041e3\n.text:00000000004041e5\n.text:00000000004041e8\n'
p1021
tp1022
sS'_start'
p1023
(S'\n__stdcall _start()\n'
p1024
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00609ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1025
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405c90\nMOV RCX,0x405c20\nMOV RDI,0x401c90\nCALL qword ptr [0x00609ff0]\nHLT\n'
p1026
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 90 5c 40 00\n48 c7 c1 20 5c 40 00\n48 c7 c7 90 1c 40 00\nff 15 b6 87 20 00\nf4\n'
p1027
S'.text:0000000000401810\n.text:0000000000401812\n.text:0000000000401815\n.text:0000000000401816\n.text:0000000000401819\n.text:000000000040181d\n.text:000000000040181e\n.text:000000000040181f\n.text:0000000000401826\n.text:000000000040182d\n.text:0000000000401834\n.text:000000000040183a\n'
p1028
tp1029
sS'c_iscntrl'
p1030
(S'\n__stdcall c_iscntrl()\n'
p1031
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1032
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00405648\nRET\nCMP EDI,0x7f\nJZ 0x00405647\nXOR EAX,EAX\nRET\n'
p1033
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1034
S'.text:0000000000405640\n.text:0000000000405642\n.text:0000000000405645\n.text:0000000000405647\n.text:0000000000405648\n.text:000000000040564b\n.text:000000000040564d\n.text:000000000040564f\n'
p1035
tp1036
sS'c_isblank'
p1037
(S'\n__stdcall c_isblank()\n'
p1038
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1039
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1040
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1041
S'.text:0000000000405630\n.text:0000000000405633\n.text:0000000000405636\n.text:0000000000405639\n.text:000000000040563c\n.text:000000000040563e\n'
p1042
tp1043
sS'quotearg_n_mem'
p1044
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p1045
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p1046
S'MOV ECX,0x60a320\nJMP 0x00404010\n'
p1047
S'b9 20 a3 60 00\ne9 36 fe ff ff\n'
p1048
S'.text:00000000004041d0\n.text:00000000004041d5\n'
p1049
tp1050
sS'atexit'
p1051
(S'\n__stdcall atexit(__func * __func)\n'
p1052
V\u000a/* WARNING: Removing unreachable block (ram,0x00405cc0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060a1c0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1053
S'MOV RAX,0x60a208\nTEST RAX,RAX\nJZ 0x00405cc0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401790\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401790\n'
p1054
S'48 c7 c0 08 a2 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 da ba ff ff\n31 d2\n31 f6\ne9 c7 ba ff ff\n'
p1055
S'.text:0000000000405ca0\n.text:0000000000405ca7\n.text:0000000000405caa\n.text:0000000000405cac\n.text:0000000000405caf\n.text:0000000000405cb1\n.text:0000000000405cc0\n.text:0000000000405cc2\n.text:0000000000405cc4\n'
p1056
tp1057
sS'__printf_chk'
p1058
(S'\n__stdcall __printf_chk()\n'
p1059
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060a198)();\u000a  return;\u000a}\u000a\u000a
p1060
S'JMP qword ptr [0x0060a198]\n'
p1061
S'ff 25 52 8a 20 00\n'
p1062
S'.plt:0000000000401740\n'
p1063
tp1064
sS'fdopen'
p1065
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1066
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060a188)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1067
S'JMP qword ptr [0x0060a188]\n'
p1068
S'ff 25 62 8a 20 00\n'
p1069
S'.plt:0000000000401720\n'
p1070
tp1071
sS'error'
p1072
(S'\n__stdcall error()\n'
p1073
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060a1a0)();\u000a  return;\u000a}\u000a\u000a
p1074
S'JMP qword ptr [0x0060a1a0]\n'
p1075
S'ff 25 4a 8a 20 00\n'
p1076
S'.plt:0000000000401750\n'
p1077
tp1078
sS'memcoll'
p1079
(S'\n__stdcall memcoll(char * s1, size_t s1len, char * s2, size_t s2len)\n'
p1080
V\u000aint memcoll(char *s1,size_t s1len,char *s2,size_t s2len)\u000a\u000a{\u000a  char cVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  int *piVar4;\u000a  \u000a  if ((s1len == s2len) && (iVar3 = memcmp(s1,s2,s1len), iVar3 == 0)) {\u000a    piVar4 = __errno_location();\u000a    *piVar4 = 0;\u000a    return 0;\u000a  }\u000a  cVar1 = s1[s1len];\u000a  cVar2 = s2[s2len];\u000a  s1[s1len] = 0;\u000a  s2[s2len] = 0;\u000a  iVar3 = strcoll_loop(s1,s1len + 1,s2,s2len + 1);\u000a  s1[s1len] = cVar1;\u000a  s2[s2len] = cVar2;\u000a  return iVar3;\u000a}\u000a\u000a
p1081
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RCX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R12,RDI\nCMP RBX,R15\nJNZ 0x00405aee\nMOV RDI,R12\nMOV RSI,R14\nMOV RDX,RBX\nCALL 0x00401600\nTEST EAX,EAX\nJZ 0x00405b1d\nMOV BPL,byte ptr [R12 + RBX*0x1]\nMOV R13B,byte ptr [R14 + R15*0x1]\nMOV byte ptr [R12 + RBX*0x1],0x0\nMOV byte ptr [R14 + R15*0x1],0x0\nLEA RSI,[RBX + 0x1]\nLEA RCX,[R15 + 0x1]\nMOV RDI,R12\nMOV RDX,R14\nCALL 0x00405b40\nMOV byte ptr [R12 + RBX*0x1],BPL\nMOV byte ptr [R14 + R15*0x1],R13B\nJMP 0x00405b2a\nCALL 0x00401480\nMOV dword ptr [RAX],0x0\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1082
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 cf\n49 89 d6\n48 89 f3\n49 89 fc\n4c 39 fb\n75 12\n4c 89 e7\n4c 89 f6\n48 89 da\ne8 16 bb ff ff\n85 c0\n74 2f\n41 8a 2c 1c\n47 8a 2c 3e\n41 c6 04 1c 00\n43 c6 04 3e 00\n48 8d 73 01\n49 8d 4f 01\n4c 89 e7\n4c 89 f2\ne8 2d 00 00 00\n41 88 2c 1c\n47 88 2c 3e\neb 0d\ne8 5e b9 ff ff\nc7 00 00 00 00 00\n31 c0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1083
S'.text:0000000000405ac0\n.text:0000000000405ac1\n.text:0000000000405ac3\n.text:0000000000405ac5\n.text:0000000000405ac7\n.text:0000000000405ac9\n.text:0000000000405aca\n.text:0000000000405acb\n.text:0000000000405ace\n.text:0000000000405ad1\n.text:0000000000405ad4\n.text:0000000000405ad7\n.text:0000000000405ada\n.text:0000000000405adc\n.text:0000000000405adf\n.text:0000000000405ae2\n.text:0000000000405ae5\n.text:0000000000405aea\n.text:0000000000405aec\n.text:0000000000405aee\n.text:0000000000405af2\n.text:0000000000405af6\n.text:0000000000405afb\n.text:0000000000405b00\n.text:0000000000405b04\n.text:0000000000405b08\n.text:0000000000405b0b\n.text:0000000000405b0e\n.text:0000000000405b13\n.text:0000000000405b17\n.text:0000000000405b1b\n.text:0000000000405b1d\n.text:0000000000405b22\n.text:0000000000405b28\n.text:0000000000405b2a\n.text:0000000000405b2e\n.text:0000000000405b2f\n.text:0000000000405b31\n.text:0000000000405b33\n.text:0000000000405b35\n.text:0000000000405b37\n.text:0000000000405b38\n'
p1084
tp1085
sS'readlinebuffer'
p1086
(S'\n__stdcall readlinebuffer(linebuffer * linebuffer, FILE * stream)\n'
p1087
V\u000alinebuffer * readlinebuffer(linebuffer *linebuffer,FILE *stream)\u000a\u000a{\u000a  linebuffer *plVar1;\u000a  \u000a  plVar1 = readlinebuffer_delim(linebuffer,stream);\u000a  return plVar1;\u000a}\u000a\u000a
p1088
S'MOV EDX,0xa\nJMP 0x00402e90\n'
p1089
S'ba 0a 00 00 00\neb 09\n'
p1090
S'.text:0000000000402e80\n.text:0000000000402e85\n'
p1091
tp1092
sS'strcaseeq6'
p1093
(S'\n__stdcall strcaseeq6()\n'
p1094
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1095
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004056d0\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x004048a2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004048a9\nJMP 0x004048be\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004048be\nTEST BPL,BPL\nJZ 0x004048b9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004048d0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1096
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 41 0e 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1097
S'.text:0000000000404880\n.text:0000000000404881\n.text:0000000000404882\n.text:0000000000404883\n.text:0000000000404885\n.text:0000000000404888\n.text:000000000040488a\n.text:000000000040488f\n.text:0000000000404893\n.text:0000000000404895\n.text:0000000000404897\n.text:000000000040489a\n.text:000000000040489c\n.text:000000000040489e\n.text:00000000004048a0\n.text:00000000004048a2\n.text:00000000004048a4\n.text:00000000004048a7\n.text:00000000004048a9\n.text:00000000004048ac\n.text:00000000004048ae\n.text:00000000004048b1\n.text:00000000004048b5\n.text:00000000004048b6\n.text:00000000004048b7\n.text:00000000004048b9\n.text:00000000004048be\n.text:00000000004048c2\n.text:00000000004048c3\n.text:00000000004048c4\n'
p1098
tp1099
sS'strcaseeq5'
p1100
(S'\n__stdcall strcaseeq5()\n'
p1101
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1102
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004056d0\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404856\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040485d\nJMP 0x00404874\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404874\nTEST BPL,BPL\nJZ 0x0040486f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404880\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1103
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 8d 0e 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1104
S'.text:0000000000404830\n.text:0000000000404831\n.text:0000000000404833\n.text:0000000000404834\n.text:0000000000404837\n.text:0000000000404839\n.text:000000000040483c\n.text:000000000040483e\n.text:0000000000404843\n.text:0000000000404847\n.text:0000000000404849\n.text:000000000040484b\n.text:000000000040484e\n.text:0000000000404850\n.text:0000000000404852\n.text:0000000000404854\n.text:0000000000404856\n.text:0000000000404858\n.text:000000000040485b\n.text:000000000040485d\n.text:0000000000404860\n.text:0000000000404862\n.text:0000000000404866\n.text:0000000000404869\n.text:000000000040486a\n.text:000000000040486c\n.text:000000000040486d\n.text:000000000040486f\n.text:0000000000404874\n.text:0000000000404875\n.text:0000000000404877\n.text:0000000000404878\n'
p1105
tp1106
sS'emit_ancillary_info'
p1107
(S'\n__stdcall emit_ancillary_info()\n'
p1108
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00406310;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("uniq",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "uniq";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00406985,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00406985);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x4074b9;\u000a  if (__s2 == "uniq") {\u000a    uVar3 = 0x406bb7;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p1109
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x406310\nMOV ESI,0x406b9b\nNOP\nMOV EDI,0x406985\nCALL 0x00401640\nTEST EAX,EAX\nJZ 0x00401b8b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401b70\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x406985\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x406bfa\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406a56\nMOV ECX,0x406c11\nXOR EAX,EAX\nCALL 0x00401740\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401730\nTEST RAX,RAX\nJZ 0x00401c14\nMOV ESI,0x406c38\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401490\nTEST EAX,EAX\nJZ 0x00401c14\nXOR EDI,EDI\nMOV ESI,0x406c3c\nMOV EDX,0x5\nCALL 0x00401510\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406985\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401740\nXOR EDI,EDI\nMOV ESI,0x406c81\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,RAX\nMOV R14D,0x406985\nMOV EDI,0x1\nMOV EDX,0x406c11\nMOV ECX,0x406985\nXOR EAX,EAX\nCALL 0x00401740\nXOR EDI,EDI\nMOV ESI,0x406ca0\nMOV EDX,0x5\nCALL 0x00401510\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x406bb7\nMOV ECX,0x4074b9\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401740\n'
p1110
S'41 56\n53\n50\nbb 10 63 40 00\nbe 9b 6b 40 00\n66 90\nbf 85 69 40 00\ne8 c6 fa ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 85 69 40 00\n48 0f 45 d8\n31 ff\nbe fa 6b 40 00\nba 05 00 00 00\ne8 64 f9 ff ff\n48 89 c6\nbf 01 00 00 00\nba 56 6a 40 00\nb9 11 6c 40 00\n31 c0\ne8 7b fb ff ff\nbf 05 00 00 00\n31 f6\ne8 5f fb ff ff\n48 85 c0\n74 3e\nbe 38 6c 40 00\nba 03 00 00 00\n48 89 c7\ne8 a8 f8 ff ff\n85 c0\n74 28\n31 ff\nbe 3c 6c 40 00\nba 05 00 00 00\ne8 13 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 85 69 40 00\n31 c0\n48 89 ce\ne8 2c fb ff ff\n31 ff\nbe 81 6c 40 00\nba 05 00 00 00\ne8 eb f8 ff ff\n48 89 c6\n41 be 85 69 40 00\nbf 01 00 00 00\nba 11 6c 40 00\nb9 85 69 40 00\n31 c0\ne8 fc fa ff ff\n31 ff\nbe a0 6c 40 00\nba 05 00 00 00\ne8 bb f8 ff ff\n48 89 c2\n4c 39 f3\nb8 b7 6b 40 00\nb9 b9 74 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 be fa ff ff\n'
p1111
S'.text:0000000000401b60\n.text:0000000000401b62\n.text:0000000000401b63\n.text:0000000000401b64\n.text:0000000000401b69\n.text:0000000000401b6e\n.text:0000000000401b70\n.text:0000000000401b75\n.text:0000000000401b7a\n.text:0000000000401b7c\n.text:0000000000401b7e\n.text:0000000000401b82\n.text:0000000000401b86\n.text:0000000000401b89\n.text:0000000000401b8b\n.text:0000000000401b8f\n.text:0000000000401b92\n.text:0000000000401b97\n.text:0000000000401b9b\n.text:0000000000401b9d\n.text:0000000000401ba2\n.text:0000000000401ba7\n.text:0000000000401bac\n.text:0000000000401baf\n.text:0000000000401bb4\n.text:0000000000401bb9\n.text:0000000000401bbe\n.text:0000000000401bc0\n.text:0000000000401bc5\n.text:0000000000401bca\n.text:0000000000401bcc\n.text:0000000000401bd1\n.text:0000000000401bd4\n.text:0000000000401bd6\n.text:0000000000401bdb\n.text:0000000000401be0\n.text:0000000000401be3\n.text:0000000000401be8\n.text:0000000000401bea\n.text:0000000000401bec\n.text:0000000000401bee\n.text:0000000000401bf3\n.text:0000000000401bf8\n.text:0000000000401bfd\n.text:0000000000401c00\n.text:0000000000401c05\n.text:0000000000401c0a\n.text:0000000000401c0c\n.text:0000000000401c0f\n.text:0000000000401c14\n.text:0000000000401c16\n.text:0000000000401c1b\n.text:0000000000401c20\n.text:0000000000401c25\n.text:0000000000401c28\n.text:0000000000401c2e\n.text:0000000000401c33\n.text:0000000000401c38\n.text:0000000000401c3d\n.text:0000000000401c3f\n.text:0000000000401c44\n.text:0000000000401c46\n.text:0000000000401c4b\n.text:0000000000401c50\n.text:0000000000401c55\n.text:0000000000401c58\n.text:0000000000401c5b\n.text:0000000000401c60\n.text:0000000000401c65\n.text:0000000000401c69\n.text:0000000000401c6e\n.text:0000000000401c70\n.text:0000000000401c73\n.text:0000000000401c76\n.text:0000000000401c7a\n.text:0000000000401c7b\n.text:0000000000401c7d\n'
p1112
tp1113
sS'strcaseeq7'
p1114
(S'\n__stdcall strcaseeq7()\n'
p1115
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1116
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x004056d0\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x004048f2\nTEST ECX,0xffffffdf\nJNZ 0x004048f6\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x004048fa\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1117
S'53\n48 89 fb\n31 ff\ne8 f5 0d 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1118
S'.text:00000000004048d0\n.text:00000000004048d1\n.text:00000000004048d4\n.text:00000000004048d6\n.text:00000000004048db\n.text:00000000004048df\n.text:00000000004048e1\n.text:00000000004048e3\n.text:00000000004048e9\n.text:00000000004048eb\n.text:00000000004048f0\n.text:00000000004048f1\n.text:00000000004048f2\n.text:00000000004048f4\n.text:00000000004048f6\n.text:00000000004048f8\n.text:00000000004048f9\n.text:00000000004048fa\n.text:00000000004048ff\n.text:0000000000404900\n'
p1119
tp1120
sS'xmemcoll'
p1121
(S'\n__stdcall xmemcoll(char * s1, size_t s1len, char * s2, size_t s2len)\n'
p1122
V\u000aint xmemcoll(char *s1,size_t s1len,char *s2,size_t s2len)\u000a\u000a{\u000a  int iVar1;\u000a  uint *puVar2;\u000a  \u000a  iVar1 = memcoll(s1,s1len,s2,s2len);\u000a  puVar2 = (uint *)__errno_location();\u000a  if (*puVar2 != 0) {\u000a    collate_error((char *)(ulong)*puVar2,(size_t)s1,(char *)s1len,(size_t)s2);\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1123
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV RBX,RDI\nCALL 0x00405ac0\nMOV EBP,EAX\nCALL 0x00401480\nMOV EDI,dword ptr [RAX]\nTEST EDI,EDI\nJZ 0x00405027\nMOV RSI,RBX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,R14\nCALL 0x00405040\nMOV EAX,EBP\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1124
S'55\n41 57\n41 56\n41 54\n53\n49 89 ce\n49 89 d7\n49 89 f4\n48 89 fb\ne8 b7 0a 00 00\n89 c5\ne8 70 c4 ff ff\n8b 38\n85 ff\n74 11\n48 89 de\n4c 89 e2\n4c 89 f9\n4d 89 f0\ne8 19 00 00 00\n89 e8\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1125
S'.text:0000000000404ff0\n.text:0000000000404ff1\n.text:0000000000404ff3\n.text:0000000000404ff5\n.text:0000000000404ff7\n.text:0000000000404ff8\n.text:0000000000404ffb\n.text:0000000000404ffe\n.text:0000000000405001\n.text:0000000000405004\n.text:0000000000405009\n.text:000000000040500b\n.text:0000000000405010\n.text:0000000000405012\n.text:0000000000405014\n.text:0000000000405016\n.text:0000000000405019\n.text:000000000040501c\n.text:000000000040501f\n.text:0000000000405022\n.text:0000000000405027\n.text:0000000000405029\n.text:000000000040502a\n.text:000000000040502c\n.text:000000000040502e\n.text:0000000000405030\n.text:0000000000405031\n'
p1126
tp1127
sS'version_etc_va'
p1128
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p1129
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p1130
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00404cd0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00404cdc\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404cf1\nINC R9\nCMP R9,0xa\nJC 0x00404cb0\nMOV R8,RSP\nCALL 0x00404910\nADD RSP,0x58\nRET\n'
p1131
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p1132
S'.text:0000000000404ca0\n.text:0000000000404ca4\n.text:0000000000404ca7\n.text:0000000000404cb0\n.text:0000000000404cb3\n.text:0000000000404cb7\n.text:0000000000404cb9\n.text:0000000000404cbc\n.text:0000000000404cc0\n.text:0000000000404cc4\n.text:0000000000404cc7\n.text:0000000000404cd0\n.text:0000000000404cd4\n.text:0000000000404cd8\n.text:0000000000404cdc\n.text:0000000000404cdf\n.text:0000000000404ce3\n.text:0000000000404ce6\n.text:0000000000404ce8\n.text:0000000000404ceb\n.text:0000000000404cef\n.text:0000000000404cf1\n.text:0000000000404cf4\n.text:0000000000404cf9\n.text:0000000000404cfd\n'
p1133
tp1134
sS'xzalloc'
p1135
(S'\n__stdcall xzalloc(size_t s)\n'
p1136
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p1137
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00404e30\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x004015b0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1138
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 74 c6 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1139
S'.text:0000000000404f20\n.text:0000000000404f22\n.text:0000000000404f23\n.text:0000000000404f24\n.text:0000000000404f27\n.text:0000000000404f2c\n.text:0000000000404f2f\n.text:0000000000404f31\n.text:0000000000404f34\n.text:0000000000404f37\n.text:0000000000404f3c\n.text:0000000000404f3f\n.text:0000000000404f43\n.text:0000000000404f44\n.text:0000000000404f46\n'
p1140
tp1141
sS'strtoul'
p1142
(S'\n__stdcall strtoul(char * __nptr, char * * __endptr, int __base)\n'
p1143
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulong strtoul(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoul_0060a1b8)();\u000a  return uVar1;\u000a}\u000a\u000a
p1144
S'JMP qword ptr [0x0060a1b8]\n'
p1145
S'ff 25 32 8a 20 00\n'
p1146
S'.plt:0000000000401780\n'
p1147
tp1148
sS'emit_mandatory_arg_note'
p1149
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1150
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1151
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x406b50\nMOV EDX,0x5\nCALL 0x00401510\nMOV RSI,qword ptr [0x0060a288]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401610\n'
p1152
S'50\n31 ff\nbe 50 6b 40 00\nba 05 00 00 00\ne8 ce f9 ff ff\n48 8b 35 3f 87 20 00\n48 89 c7\n58\ne9 be fa ff ff\n'
p1153
S'.text:0000000000401b30\n.text:0000000000401b31\n.text:0000000000401b33\n.text:0000000000401b38\n.text:0000000000401b3d\n.text:0000000000401b42\n.text:0000000000401b49\n.text:0000000000401b4c\n.text:0000000000401b4d\n'
p1154
tp1155
sS'strcaseeq0'
p1156
(S'\n__stdcall strcaseeq0()\n'
p1157
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1158
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004056d0\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404605\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040460c\nJMP 0x00404640\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404640\nTEST BPL,BPL\nJZ 0x0040463b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404650\nJMP 0x00404640\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1159
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 dd 10 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1160
S'.text:00000000004045d0\n.text:00000000004045d1\n.text:00000000004045d3\n.text:00000000004045d5\n.text:00000000004045d7\n.text:00000000004045d9\n.text:00000000004045da\n.text:00000000004045db\n.text:00000000004045de\n.text:00000000004045e1\n.text:00000000004045e4\n.text:00000000004045e7\n.text:00000000004045e9\n.text:00000000004045ec\n.text:00000000004045ee\n.text:00000000004045f3\n.text:00000000004045f6\n.text:00000000004045f8\n.text:00000000004045fa\n.text:00000000004045fd\n.text:00000000004045ff\n.text:0000000000404601\n.text:0000000000404603\n.text:0000000000404605\n.text:0000000000404607\n.text:000000000040460a\n.text:000000000040460c\n.text:000000000040460f\n.text:0000000000404611\n.text:0000000000404615\n.text:000000000040461a\n.text:000000000040461d\n.text:0000000000404621\n.text:0000000000404625\n.text:0000000000404629\n.text:000000000040462d\n.text:0000000000404631\n.text:0000000000404634\n.text:0000000000404639\n.text:000000000040463b\n.text:0000000000404640\n.text:0000000000404644\n.text:0000000000404645\n.text:0000000000404647\n.text:0000000000404649\n.text:000000000040464b\n.text:000000000040464d\n.text:000000000040464e\n'
p1161
tp1162
sS'strcaseeq2'
p1163
(S'\n__stdcall strcaseeq2()\n'
p1164
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1165
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004056d0\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404716\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040471d\nJMP 0x0040474a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040474a\nTEST BPL,BPL\nJZ 0x00404745\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404760\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1166
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 cd 0f 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1167
S'.text:00000000004046e0\n.text:00000000004046e1\n.text:00000000004046e3\n.text:00000000004046e5\n.text:00000000004046e7\n.text:00000000004046e9\n.text:00000000004046ea\n.text:00000000004046eb\n.text:00000000004046ee\n.text:00000000004046f1\n.text:00000000004046f4\n.text:00000000004046f7\n.text:00000000004046f9\n.text:00000000004046fc\n.text:00000000004046fe\n.text:0000000000404703\n.text:0000000000404707\n.text:0000000000404709\n.text:000000000040470b\n.text:000000000040470e\n.text:0000000000404710\n.text:0000000000404712\n.text:0000000000404714\n.text:0000000000404716\n.text:0000000000404718\n.text:000000000040471b\n.text:000000000040471d\n.text:0000000000404720\n.text:0000000000404722\n.text:0000000000404726\n.text:000000000040472a\n.text:000000000040472e\n.text:0000000000404732\n.text:0000000000404735\n.text:0000000000404739\n.text:000000000040473a\n.text:000000000040473c\n.text:000000000040473e\n.text:0000000000404740\n.text:0000000000404742\n.text:0000000000404743\n.text:0000000000404745\n.text:000000000040474a\n.text:000000000040474e\n.text:000000000040474f\n.text:0000000000404751\n.text:0000000000404753\n.text:0000000000404755\n.text:0000000000404757\n.text:0000000000404758\n'
p1168
tp1169
sS'strcaseeq1'
p1170
(S'\n__stdcall strcaseeq1()\n'
p1171
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1172
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x004056d0\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040468d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404694\nJMP 0x004046c7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004046c7\nTEST BPL,BPL\nJZ 0x004046c2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004046e0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1173
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 56 10 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1174
S'.text:0000000000404650\n.text:0000000000404651\n.text:0000000000404653\n.text:0000000000404655\n.text:0000000000404657\n.text:0000000000404659\n.text:000000000040465a\n.text:000000000040465b\n.text:0000000000404660\n.text:0000000000404663\n.text:0000000000404666\n.text:0000000000404669\n.text:000000000040466b\n.text:000000000040466e\n.text:0000000000404673\n.text:0000000000404675\n.text:000000000040467a\n.text:000000000040467e\n.text:0000000000404680\n.text:0000000000404682\n.text:0000000000404685\n.text:0000000000404687\n.text:0000000000404689\n.text:000000000040468b\n.text:000000000040468d\n.text:000000000040468f\n.text:0000000000404692\n.text:0000000000404694\n.text:0000000000404697\n.text:0000000000404699\n.text:000000000040469d\n.text:00000000004046a1\n.text:00000000004046a5\n.text:00000000004046ab\n.text:00000000004046af\n.text:00000000004046b2\n.text:00000000004046b6\n.text:00000000004046b7\n.text:00000000004046b9\n.text:00000000004046bb\n.text:00000000004046bd\n.text:00000000004046bf\n.text:00000000004046c0\n.text:00000000004046c2\n.text:00000000004046c7\n.text:00000000004046cb\n.text:00000000004046cc\n.text:00000000004046ce\n.text:00000000004046d0\n.text:00000000004046d2\n.text:00000000004046d4\n.text:00000000004046d5\n'
p1175
tp1176
sS'strcaseeq4'
p1177
(S'\n__stdcall strcaseeq4()\n'
p1178
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1179
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004056d0\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x004047fc\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404803\nJMP 0x00404824\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404824\nTEST BPL,BPL\nJZ 0x0040481f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404830\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1180
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 e7 0e 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1181
S'.text:00000000004047d0\n.text:00000000004047d1\n.text:00000000004047d3\n.text:00000000004047d5\n.text:00000000004047d6\n.text:00000000004047d7\n.text:00000000004047da\n.text:00000000004047dd\n.text:00000000004047df\n.text:00000000004047e2\n.text:00000000004047e4\n.text:00000000004047e9\n.text:00000000004047ed\n.text:00000000004047ef\n.text:00000000004047f1\n.text:00000000004047f4\n.text:00000000004047f6\n.text:00000000004047f8\n.text:00000000004047fa\n.text:00000000004047fc\n.text:00000000004047fe\n.text:0000000000404801\n.text:0000000000404803\n.text:0000000000404806\n.text:0000000000404808\n.text:000000000040480c\n.text:0000000000404810\n.text:0000000000404813\n.text:0000000000404817\n.text:0000000000404818\n.text:000000000040481a\n.text:000000000040481c\n.text:000000000040481d\n.text:000000000040481f\n.text:0000000000404824\n.text:0000000000404828\n.text:0000000000404829\n.text:000000000040482b\n.text:000000000040482d\n.text:000000000040482e\n'
p1182
tp1183
sS'strcaseeq3'
p1184
(S'\n__stdcall strcaseeq3()\n'
p1185
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1186
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x004056d0\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404790\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404797\nJMP 0x004047ba\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004047ba\nTEST BPL,BPL\nJZ 0x004047b5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004047d0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1187
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 53 0f 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1188
S'.text:0000000000404760\n.text:0000000000404761\n.text:0000000000404763\n.text:0000000000404765\n.text:0000000000404767\n.text:0000000000404768\n.text:000000000040476b\n.text:000000000040476e\n.text:0000000000404771\n.text:0000000000404773\n.text:0000000000404776\n.text:0000000000404778\n.text:000000000040477d\n.text:0000000000404781\n.text:0000000000404783\n.text:0000000000404785\n.text:0000000000404788\n.text:000000000040478a\n.text:000000000040478c\n.text:000000000040478e\n.text:0000000000404790\n.text:0000000000404792\n.text:0000000000404795\n.text:0000000000404797\n.text:000000000040479a\n.text:000000000040479c\n.text:00000000004047a0\n.text:00000000004047a4\n.text:00000000004047a8\n.text:00000000004047ab\n.text:00000000004047ac\n.text:00000000004047ae\n.text:00000000004047b0\n.text:00000000004047b2\n.text:00000000004047b3\n.text:00000000004047b5\n.text:00000000004047ba\n.text:00000000004047bb\n.text:00000000004047bd\n.text:00000000004047bf\n.text:00000000004047c1\n.text:00000000004047c2\n'
p1189
tp1190
sS'register_tm_clones'
p1191
(S'\n__stdcall register_tm_clones()\n'
p1192
V\u000a/* WARNING: Removing unreachable block (ram,0x004018a3) */\u000a/* WARNING: Removing unreachable block (ram,0x004018ad) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1193
S'MOV ESI,0x60a280\nPUSH RBP\nSUB RSI,0x60a280\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x004018b8\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004018b8\nPOP RBP\nMOV EDI,0x60a280\nJMP RAX\nPOP RBP\nRET\n'
p1194
S'be 80 a2 60 00\n55\n48 81 ee 80 a2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 80 a2 60 00\nff e0\n5d\nc3\n'
p1195
S'.text:0000000000401880\n.text:0000000000401885\n.text:0000000000401886\n.text:000000000040188d\n.text:0000000000401891\n.text:0000000000401894\n.text:0000000000401897\n.text:000000000040189b\n.text:000000000040189e\n.text:00000000004018a1\n.text:00000000004018a3\n.text:00000000004018a8\n.text:00000000004018ab\n.text:00000000004018ad\n.text:00000000004018ae\n.text:00000000004018b3\n.text:00000000004018b8\n.text:00000000004018b9\n'
p1196
tp1197
sS'gettext_quote'
p1198
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1199
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00407380;\u000a        pcVar2 = &DAT_00407384;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1200
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401510\nCMP RAX,RBX\nJNZ 0x004045c8\nCALL 0x00405790\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x004045d0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404578\nCMP byte ptr [RBX],0x60\nMOV ECX,0x407370\nMOV EAX,0x407374\nJMP 0x004045c4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x004045d0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004045b6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x407380\nMOV EAX,0x407384\nJMP 0x004045c4\nCMP R14D,0x9\nMOV ECX,0x407364\nMOV EAX,0x407368\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1201
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 e7 cf ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 59 12 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 70 73 40 00\nb8 74 73 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 80 73 40 00\nb8 84 73 40 00\neb 0e\n41 83 fe 09\nb9 64 73 40 00\nb8 68 73 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1202
S'.text:0000000000404510\n.text:0000000000404511\n.text:0000000000404513\n.text:0000000000404514\n.text:0000000000404517\n.text:000000000040451a\n.text:000000000040451c\n.text:0000000000404521\n.text:0000000000404524\n.text:0000000000404529\n.text:000000000040452c\n.text:0000000000404532\n.text:0000000000404537\n.text:000000000040453a\n.text:000000000040453f\n.text:0000000000404544\n.text:0000000000404549\n.text:000000000040454f\n.text:0000000000404555\n.text:0000000000404558\n.text:000000000040455a\n.text:000000000040455c\n.text:0000000000404561\n.text:0000000000404565\n.text:0000000000404567\n.text:0000000000404569\n.text:000000000040456c\n.text:0000000000404571\n.text:0000000000404576\n.text:0000000000404578\n.text:000000000040457d\n.text:0000000000404582\n.text:0000000000404587\n.text:000000000040458d\n.text:0000000000404593\n.text:0000000000404596\n.text:0000000000404598\n.text:000000000040459a\n.text:000000000040459f\n.text:00000000004045a3\n.text:00000000004045a5\n.text:00000000004045a7\n.text:00000000004045aa\n.text:00000000004045af\n.text:00000000004045b4\n.text:00000000004045b6\n.text:00000000004045ba\n.text:00000000004045bf\n.text:00000000004045c4\n.text:00000000004045c8\n.text:00000000004045c9\n.text:00000000004045cb\n.text:00000000004045cc\n'
p1203
tp1204
sS'xstrtoul'
p1205
(S'\n__stdcall xstrtoul(char * s, char * * ptr, ulong * val, char * valid_suffixes)\n'
p1206
V\u000astrtol_error xstrtoul(char *s,char **ptr,ulong *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  ulong local_48;\u000a  ulong *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)"\u000a                 );\u000a  }\u000a  local_40 = (ulong *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoul(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00405396;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00405396;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_004052c5_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_004052a3:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_004052a3;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00405377;\u000a  default:\u000aswitchD_004052c5_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00405377;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00405377:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00405396:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p1207
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x004053b3\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401480\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401800\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x004051b0\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x004053a2\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401780\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00405210\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00405241\nCMP EAX,0x22\nJNZ 0x004053a2\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x0040524c\nJMP 0x00405396\nTEST R12,R12\nJZ 0x004053a2\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x004053a2\nMOV RDI,R12\nCALL 0x00401570\nTEST RAX,RAX\nJZ 0x004053a2\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x0040524c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00405396\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00405396\nMOV RDI,R12\nCALL 0x00401570\nTEST RAX,RAX\nJZ 0x004052de\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00401570\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x004052a3\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x004052aa\nCMP EAX,0x44\nJZ 0x004052aa\nCMP EAX,0x69\nJNZ 0x004052a3\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x004052b4\nMOV EBP,0x1\nJMP 0x004052b4\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x004052de\nXOR EAX,EAX\nJMP qword ptr [0x407770 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00405400\nJMP 0x0040537c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x004053a2\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00405400\nJMP 0x0040537c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00405400\nJMP 0x0040537c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00405400\nJMP 0x0040537c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00405377\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00405400\nJMP 0x0040537c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00405400\nJMP 0x0040537c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00405400\nJMP 0x0040537c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00405400\nJMP 0x0040537c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00405377\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x004053d0\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x407920\nMOV ESI,0x407946\nMOV EDX,0x60\nMOV ECX,0x407956\nCALL 0x004015a0\n'
p1208
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 f2 c2 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 63 c6 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 9c c5 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 44 c3 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 0c c3 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 fa c2 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd 70 77 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 20 79 40 00\nbe 46 79 40 00\nba 60 00 00 00\nb9 56 79 40 00\ne8 d4 c1 ff ff\n'
p1209
S'.text:0000000000405160\n.text:0000000000405161\n.text:0000000000405163\n.text:0000000000405165\n.text:0000000000405167\n.text:0000000000405169\n.text:000000000040516a\n.text:000000000040516e\n.text:0000000000405171\n.text:0000000000405174\n.text:0000000000405177\n.text:000000000040517a\n.text:000000000040517e\n.text:0000000000405184\n.text:0000000000405189\n.text:000000000040518e\n.text:0000000000405191\n.text:0000000000405198\n.text:000000000040519d\n.text:00000000004051a0\n.text:00000000004051a3\n.text:00000000004051b0\n.text:00000000004051b3\n.text:00000000004051b6\n.text:00000000004051bb\n.text:00000000004051bd\n.text:00000000004051c0\n.text:00000000004051c5\n.text:00000000004051c9\n.text:00000000004051ce\n.text:00000000004051d0\n.text:00000000004051d6\n.text:00000000004051d9\n.text:00000000004051dc\n.text:00000000004051df\n.text:00000000004051e4\n.text:00000000004051e8\n.text:00000000004051ec\n.text:00000000004051ef\n.text:00000000004051f1\n.text:00000000004051f4\n.text:00000000004051f6\n.text:00000000004051f8\n.text:00000000004051fb\n.text:0000000000405201\n.text:0000000000405206\n.text:0000000000405209\n.text:000000000040520b\n.text:0000000000405210\n.text:0000000000405213\n.text:0000000000405219\n.text:000000000040521c\n.text:000000000040521e\n.text:0000000000405224\n.text:0000000000405227\n.text:000000000040522c\n.text:000000000040522f\n.text:0000000000405235\n.text:000000000040523d\n.text:000000000040523f\n.text:0000000000405241\n.text:0000000000405243\n.text:0000000000405246\n.text:000000000040524c\n.text:0000000000405250\n.text:0000000000405254\n.text:0000000000405256\n.text:000000000040525c\n.text:000000000040525f\n.text:0000000000405264\n.text:0000000000405267\n.text:0000000000405269\n.text:000000000040526e\n.text:0000000000405271\n.text:0000000000405276\n.text:000000000040527b\n.text:000000000040527e\n.text:0000000000405280\n.text:0000000000405284\n.text:0000000000405287\n.text:0000000000405289\n.text:000000000040528c\n.text:000000000040528e\n.text:0000000000405291\n.text:0000000000405293\n.text:0000000000405295\n.text:0000000000405299\n.text:000000000040529c\n.text:00000000004052a1\n.text:00000000004052a3\n.text:00000000004052a8\n.text:00000000004052aa\n.text:00000000004052af\n.text:00000000004052b4\n.text:00000000004052b8\n.text:00000000004052bb\n.text:00000000004052be\n.text:00000000004052c1\n.text:00000000004052c3\n.text:00000000004052c5\n.text:00000000004052cc\n.text:00000000004052cf\n.text:00000000004052d4\n.text:00000000004052d9\n.text:00000000004052de\n.text:00000000004052e2\n.text:00000000004052e7\n.text:00000000004052ea\n.text:00000000004052ed\n.text:00000000004052f2\n.text:00000000004052f5\n.text:00000000004052fa\n.text:00000000004052ff\n.text:0000000000405301\n.text:0000000000405304\n.text:0000000000405309\n.text:000000000040530e\n.text:0000000000405310\n.text:0000000000405313\n.text:0000000000405318\n.text:000000000040531d\n.text:000000000040531f\n.text:0000000000405322\n.text:0000000000405327\n.text:0000000000405329\n.text:000000000040532c\n.text:0000000000405331\n.text:0000000000405336\n.text:0000000000405338\n.text:000000000040533b\n.text:0000000000405340\n.text:0000000000405345\n.text:0000000000405347\n.text:000000000040534a\n.text:000000000040534f\n.text:0000000000405354\n.text:0000000000405356\n.text:0000000000405359\n.text:000000000040535e\n.text:0000000000405363\n.text:0000000000405365\n.text:0000000000405368\n.text:000000000040536d\n.text:000000000040536f\n.text:0000000000405372\n.text:0000000000405377\n.text:000000000040537c\n.text:000000000040537e\n.text:0000000000405382\n.text:0000000000405386\n.text:000000000040538a\n.text:000000000040538c\n.text:000000000040538f\n.text:0000000000405393\n.text:0000000000405396\n.text:000000000040539a\n.text:000000000040539f\n.text:00000000004053a2\n.text:00000000004053a4\n.text:00000000004053a8\n.text:00000000004053a9\n.text:00000000004053ab\n.text:00000000004053ad\n.text:00000000004053af\n.text:00000000004053b1\n.text:00000000004053b2\n.text:00000000004053b3\n.text:00000000004053b8\n.text:00000000004053bd\n.text:00000000004053c2\n.text:00000000004053c7\n'
p1210
tp1211
sS'c_islower'
p1212
(S'\n__stdcall c_islower()\n'
p1213
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1214
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1215
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1216
S'.text:0000000000405670\n.text:0000000000405673\n.text:0000000000405676\n.text:0000000000405679\n'
p1217
tp1218
sS'freopen'
p1219
(S'\n__stdcall freopen(char * __filename, char * __modes, FILE * __stream)\n'
p1220
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * freopen(char *__filename,char *__modes,FILE *__stream)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_freopen_0060a0d8)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1221
S'JMP qword ptr [0x0060a0d8]\n'
p1222
S'ff 25 12 8b 20 00\n'
p1223
S'.plt:00000000004015c0\n'
p1224
tp1225
sS'fclose'
p1226
(S'\n__stdcall fclose(FILE * __stream)\n'
p1227
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060a070)();\u000a  return iVar1;\u000a}\u000a\u000a
p1228
S'JMP qword ptr [0x0060a070]\n'
p1229
S'ff 25 7a 8b 20 00\n'
p1230
S'.plt:00000000004014f0\n'
p1231
tp1232
sS'argmatch'
p1233
(S'\n__stdcall argmatch(char * arg, char * * arglist, char * vallist, size_t valsize)\n'
p1234
V\u000aptrdiff_t argmatch(char *arg,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  size_t __n;\u000a  size_t sVar4;\u000a  long lVar5;\u000a  ptrdiff_t pVar6;\u000a  char *__s2;\u000a  char *__s1;\u000a  long local_50;\u000a  \u000a  __n = strlen(arg);\u000a  __s1 = *arglist;\u000a  if (__s1 == (char *)0x0) {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a    lVar5 = 0;\u000a    __s2 = vallist;\u000a    do {\u000a      iVar3 = strncmp(__s1,arg,__n);\u000a      lVar2 = local_50;\u000a      if (iVar3 == 0) {\u000a        sVar4 = strlen(__s1);\u000a        if (sVar4 == __n) {\u000a          return lVar5;\u000a        }\u000a        lVar2 = lVar5;\u000a        if ((local_50 != -1) &&\u000a           ((vallist == (char *)0x0 ||\u000a            (iVar3 = memcmp(vallist + local_50 * valsize,__s2,valsize), lVar2 = local_50, iVar3 != 0\u000a            )))) {\u000a          bVar1 = true;\u000a          lVar2 = local_50;\u000a        }\u000a      }\u000a      local_50 = lVar2;\u000a      __s1 = arglist[lVar5 + 1];\u000a      lVar5 = lVar5 + 1;\u000a      __s2 = __s2 + valsize;\u000a    } while (__s1 != (char *)0x0);\u000a  }\u000a  pVar6 = -2;\u000a  if (!bVar1) {\u000a    pVar6 = local_50;\u000a  }\u000a  return pVar6;\u000a}\u000a\u000a
p1235
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x00401530\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x20],RBP\nMOV R15,qword ptr [RBP]\nTEST R15,R15\nJZ 0x00402937\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R14\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00401490\nTEST EAX,EAX\nJNZ 0x00402920\nMOV RDI,R15\nCALL 0x00401530\nCMP RAX,RBX\nJZ 0x00402959\nCMP qword ptr [RSP + 0x8],-0x1\nJZ 0x00402915\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x0040290c\nMOV RDI,qword ptr [RSP + 0x8]\nIMUL RDI,R13\nADD RDI,RAX\nMOV RSI,R14\nMOV RDX,R13\nCALL 0x00401600\nTEST EAX,EAX\nJZ 0x00402920\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00402920\nMOV qword ptr [RSP + 0x8],RBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RAX + RBP*0x8 + 0x8]\nINC RBP\nADD R14,R13\nTEST R15,R15\nJNZ 0x004028c0\nJMP 0x00402947\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nTEST byte ptr [RSP + 0x10],0x1\nMOV RBP,-0x2\nCMOVZ RBP,qword ptr [RSP + 0x8]\nMOV RAX,RBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1236
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d6\n48 89 f5\n49 89 fc\ne8 a1 ec ff ff\n48 89 c3\n48 89 6c 24 20\n4c 8b 7d 00\n4d 85 ff\n0f 84 93 00 00 00\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\n4c 89 74 24 18\n31 ed\n0f 1f 44 00 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 c2 eb ff ff\n85 c0\n75 4e\n4c 89 ff\ne8 56 ec ff ff\n48 39 d8\n74 7a\n48 83 7c 24 08 ff\n74 2e\n48 8b 44 24 18\n48 85 c0\n74 1b\n48 8b 7c 24 08\n49 0f af fd\n48 01 c7\n4c 89 f6\n4c 89 ea\ne8 f8 ec ff ff\n85 c0\n74 14\nb0 01\n48 89 44 24 10\neb 0b\n48 89 6c 24 08\n66 0f 1f 44 00 00\n48 8b 44 24 20\n4c 8b 7c e8 08\n48 ff c5\n4d 01 ee\n4d 85 ff\n75 8b\neb 10\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\nf6 44 24 10 01\n48 c7 c5 fe ff ff ff\n48 0f 44 6c 24 08\n48 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1237
S'.text:0000000000402870\n.text:0000000000402871\n.text:0000000000402873\n.text:0000000000402875\n.text:0000000000402877\n.text:0000000000402879\n.text:000000000040287a\n.text:000000000040287e\n.text:0000000000402881\n.text:0000000000402884\n.text:0000000000402887\n.text:000000000040288a\n.text:000000000040288f\n.text:0000000000402892\n.text:0000000000402897\n.text:000000000040289b\n.text:000000000040289e\n.text:00000000004028a4\n.text:00000000004028ad\n.text:00000000004028af\n.text:00000000004028b4\n.text:00000000004028b9\n.text:00000000004028bb\n.text:00000000004028c0\n.text:00000000004028c3\n.text:00000000004028c6\n.text:00000000004028c9\n.text:00000000004028ce\n.text:00000000004028d0\n.text:00000000004028d2\n.text:00000000004028d5\n.text:00000000004028da\n.text:00000000004028dd\n.text:00000000004028df\n.text:00000000004028e5\n.text:00000000004028e7\n.text:00000000004028ec\n.text:00000000004028ef\n.text:00000000004028f1\n.text:00000000004028f6\n.text:00000000004028fa\n.text:00000000004028fd\n.text:0000000000402900\n.text:0000000000402903\n.text:0000000000402908\n.text:000000000040290a\n.text:000000000040290c\n.text:000000000040290e\n.text:0000000000402913\n.text:0000000000402915\n.text:000000000040291a\n.text:0000000000402920\n.text:0000000000402925\n.text:000000000040292a\n.text:000000000040292d\n.text:0000000000402930\n.text:0000000000402933\n.text:0000000000402935\n.text:0000000000402937\n.text:0000000000402940\n.text:0000000000402942\n.text:0000000000402947\n.text:000000000040294c\n.text:0000000000402953\n.text:0000000000402959\n.text:000000000040295c\n.text:0000000000402960\n.text:0000000000402961\n.text:0000000000402963\n.text:0000000000402965\n.text:0000000000402967\n.text:0000000000402969\n.text:000000000040296a\n'
p1238
tp1239
sS'__ctype_get_mb_cur_max'
p1240
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1241
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060a088)();\u000a  return sVar1;\u000a}\u000a\u000a
p1242
S'JMP qword ptr [0x0060a088]\n'
p1243
S'ff 25 62 8b 20 00\n'
p1244
S'.plt:0000000000401520\n'
p1245
tp1246
sS'freebuffer'
p1247
(S'\n__stdcall freebuffer(linebuffer * linebuffer)\n'
p1248
V\u000avoid freebuffer(linebuffer *linebuffer)\u000a\u000a{\u000a  free(linebuffer->buffer);\u000a  return;\u000a}\u000a\u000a
p1249
S'MOV RDI,qword ptr [RDI + 0x10]\nJMP 0x00401460\n'
p1250
S'48 8b 7f 10\ne9 07 e5 ff ff\n'
p1251
S'.text:0000000000402f50\n.text:0000000000402f54\n'
p1252
tp1253
sS'quotearg_n_style'
p1254
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1255
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1256
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00404240\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00404010\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1257
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1258
S'.text:0000000000404200\n.text:0000000000404201\n.text:0000000000404203\n.text:0000000000404204\n.text:0000000000404208\n.text:000000000040420b\n.text:000000000040420d\n.text:0000000000404212\n.text:0000000000404215\n.text:000000000040421a\n.text:0000000000404221\n.text:0000000000404223\n.text:0000000000404226\n.text:0000000000404229\n.text:000000000040422e\n.text:0000000000404232\n.text:0000000000404233\n.text:0000000000404235\n.text:0000000000404236\n'
p1259
tp1260
sS'fwrite'
p1261
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1262
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060a1d0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1263
S'JMP qword ptr [0x0060a1d0]\n'
p1264
S'ff 25 1a 8a 20 00\n'
p1265
S'.plt:00000000004017b0\n'
p1266
tp1267
sS'quote_n'
p1268
(S'\n__stdcall quote_n(char * arg)\n'
p1269
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1270
S'MOV RDX,-0x1\nJMP 0x004044d0\n'
p1271
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1272
S'.text:00000000004044f0\n.text:00000000004044f7\n'
p1273
tp1274
sS'size_opt'
p1275
(S'\n__stdcall size_opt(char * opt, char * msgid)\n'
p1276
V\u000asize_t size_opt(char *opt,char *msgid)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  size_t in_RAX;\u000a  undefined8 uVar2;\u000a  size_t local_18;\u000a  \u000a  local_18 = in_RAX;\u000a  sVar1 = xstrtoul(opt,(char **)0x0,(ulong *)0xa,(char *)&local_18);\u000a  if (LONGINT_OVERFLOW < sVar1) {\u000a    uVar2 = dcgettext(0,msgid,5);\u000a    error(1,0,"%s: %s",opt,uVar2);\u000a  }\u000a  return local_18;\u000a}\u000a\u000a
p1277
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,RSP\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x4074b9\nCALL 0x00405160\nCMP EAX,0x2\nJC 0x0040223c\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,R14\nCALL 0x00401510\nMOV R8,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nMOV EDX,0x406d4e\nXOR EAX,EAX\nMOV RCX,RBX\nCALL 0x00401750\nMOV RAX,qword ptr [RSP]\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1278
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 89 e1\n31 f6\nba 0a 00 00 00\n41 b8 b9 74 40 00\ne8 51 2f 00 00\n83 f8 02\n72 28\n31 ff\nba 05 00 00 00\n4c 89 f6\ne8 ed f2 ff ff\n49 89 c0\nbf 01 00 00 00\n31 f6\nba 4e 6d 40 00\n31 c0\n48 89 d9\ne8 14 f5 ff ff\n48 8b 04 24\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1279
S'.text:00000000004021f0\n.text:00000000004021f2\n.text:00000000004021f3\n.text:00000000004021f4\n.text:00000000004021f7\n.text:00000000004021fa\n.text:00000000004021fd\n.text:00000000004021ff\n.text:0000000000402204\n.text:000000000040220a\n.text:000000000040220f\n.text:0000000000402212\n.text:0000000000402214\n.text:0000000000402216\n.text:000000000040221b\n.text:000000000040221e\n.text:0000000000402223\n.text:0000000000402226\n.text:000000000040222b\n.text:000000000040222d\n.text:0000000000402232\n.text:0000000000402234\n.text:0000000000402237\n.text:000000000040223c\n.text:0000000000402240\n.text:0000000000402244\n.text:0000000000402245\n.text:0000000000402247\n'
p1280
tp1281
sS'quotearg_alloc'
p1282
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1283
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1284
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00403e80\n'
p1285
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1286
S'.text:0000000000403e70\n.text:0000000000403e73\n.text:0000000000403e75\n.text:0000000000403e78\n'
p1287
tp1288
sS'__do_global_dtors_aux'
p1289
(S'\n__stdcall __do_global_dtors_aux()\n'
p1290
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1291
S'CMP byte ptr [0x0060a2c8],0x0\nJNZ 0x004018da\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401840\nPOP RBP\nMOV byte ptr [0x0060a2c8],0x1\nRET\n'
p1292
S'80 3d 01 8a 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 ee 89 20 00 01\nf3 c3\n'
p1293
S'.text:00000000004018c0\n.text:00000000004018c7\n.text:00000000004018c9\n.text:00000000004018ca\n.text:00000000004018cd\n.text:00000000004018d2\n.text:00000000004018d3\n.text:00000000004018da\n'
p1294
tp1295
sS'close_stdout_set_file_name'
p1296
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1297
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1298
S'MOV qword ptr [0x0060a308],RDI\nRET\n'
p1299
S'48 89 3d 51 77 20 00\nc3\n'
p1300
S'.text:0000000000402bb0\n.text:0000000000402bb7\n'
p1301
tp1302
sS'c_isprint'
p1303
(S'\n__stdcall c_isprint()\n'
p1304
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1305
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1306
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1307
S'.text:0000000000405680\n.text:0000000000405683\n.text:0000000000405686\n.text:0000000000405689\n'
p1308
tp1309
sS'field_sep'
p1310
(S'\n__stdcall field_sep()\n'
p1311
V\u000a_Bool field_sep(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  uint in_EDI;\u000a  \u000a  ppuVar1 = __ctype_b_loc();\u000a  return (_Bool)(*(byte *)(*ppuVar1 + (ulong)in_EDI) & 1 | (char)in_EDI == '\u005cn');\u000a}\u000a\u000a
p1312
S'PUSH RBX\nMOV EBX,EDI\nCALL 0x00401800\nMOV RAX,qword ptr [RAX]\nCMP BL,0xa\nSETZ CL\nMOV AL,byte ptr [RAX + RBX*0x2]\nAND AL,0x1\nOR AL,CL\nPOP RBX\nRET\n'
p1313
S'53\n89 fb\ne8 b8 ef ff ff\n48 8b 00\n80 fb 0a\n0f 94 c1\n8a 04 58\n24 01\n08 c8\n5b\nc3\n'
p1314
S'.text:0000000000402840\n.text:0000000000402841\n.text:0000000000402843\n.text:0000000000402848\n.text:000000000040284b\n.text:000000000040284e\n.text:0000000000402851\n.text:0000000000402854\n.text:0000000000402856\n.text:0000000000402858\n.text:0000000000402859\n'
p1315
tp1316
sS'xmemcoll0'
p1317
(S'\n__stdcall xmemcoll0(char * s1, size_t s1size, char * s2, size_t s2size)\n'
p1318
V\u000aint xmemcoll0(char *s1,size_t s1size,char *s2,size_t s2size)\u000a\u000a{\u000a  int iVar1;\u000a  uint *puVar2;\u000a  \u000a  iVar1 = memcoll0(s1,s1size,s2,s2size);\u000a  puVar2 = (uint *)__errno_location();\u000a  if (*puVar2 != 0) {\u000a    collate_error((char *)(ulong)*puVar2,(size_t)s1,(char *)(s1size - 1),(size_t)s2);\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1319
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R15,RCX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R12,RDI\nCALL 0x00405bc0\nMOV EBP,EAX\nCALL 0x00401480\nMOV EDI,dword ptr [RAX]\nTEST EDI,EDI\nJZ 0x0040514d\nDEC RBX\nDEC R15\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R14\nMOV R8,R15\nCALL 0x00405040\nMOV EAX,EBP\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1320
S'55\n41 57\n41 56\n41 54\n53\n49 89 cf\n49 89 d6\n48 89 f3\n49 89 fc\ne8 97 0a 00 00\n89 c5\ne8 50 c3 ff ff\n8b 38\n85 ff\n74 17\n48 ff cb\n49 ff cf\n4c 89 e6\n48 89 da\n4c 89 f1\n4d 89 f8\ne8 f3 fe ff ff\n89 e8\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1321
S'.text:0000000000405110\n.text:0000000000405111\n.text:0000000000405113\n.text:0000000000405115\n.text:0000000000405117\n.text:0000000000405118\n.text:000000000040511b\n.text:000000000040511e\n.text:0000000000405121\n.text:0000000000405124\n.text:0000000000405129\n.text:000000000040512b\n.text:0000000000405130\n.text:0000000000405132\n.text:0000000000405134\n.text:0000000000405136\n.text:0000000000405139\n.text:000000000040513c\n.text:000000000040513f\n.text:0000000000405142\n.text:0000000000405145\n.text:0000000000405148\n.text:000000000040514d\n.text:000000000040514f\n.text:0000000000405150\n.text:0000000000405152\n.text:0000000000405154\n.text:0000000000405156\n.text:0000000000405157\n'
p1322
tp1323
sS'_fini'
p1324
(S'\n__stdcall _fini()\n'
p1325
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1326
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1327
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1328
S'.fini:0000000000405ccc\n.fini:0000000000405cd0\n.fini:0000000000405cd4\n'
p1329
tp1330
sS'__fpending'
p1331
(S'\n__stdcall __fpending()\n'
p1332
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060a058)();\u000a  return;\u000a}\u000a\u000a
p1333
S'JMP qword ptr [0x0060a058]\n'
p1334
S'ff 25 92 8b 20 00\n'
p1335
S'.plt:00000000004014c0\n'
p1336
tp1337
s.