(dp0
S'tac_seekable'
p1
(S'\n__stdcall tac_seekable(char * file, off_t file_pos)\n'
p2
V\u000a_Bool tac_seekable(char *file,off_t file_pos)\u000a\u000a{\u000a  size_t __n;\u000a  ulong n;\u000a  char cVar1;\u000a  size_t sVar2;\u000a  int __length;\u000a  __off_t _Var3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  char *past_end;\u000a  size_t sVar6;\u000a  size_t sVar7;\u000a  void *pvVar8;\u000a  long __offset;\u000a  char *pcVar9;\u000a  ulong __offset_00;\u000a  char *start;\u000a  char *__s1;\u000a  int __fd;\u000a  uint uVar10;\u000a  void *buf;\u000a  bool bVar11;\u000a  ulong local_50;\u000a  \u000a  sVar2 = match_length;\u000a  pcVar9 = separator;\u000a  buf = (void *)((ulong)file & 0xffffffff);\u000a  cVar1 = *separator;\u000a  __fd = (int)buf;\u000a  if (__offset_00 % read_size != 0) {\u000a    __offset_00 = __offset_00 - __offset_00 % read_size;\u000a    _Var3 = lseek(__fd,__offset_00,0);\u000a    if (_Var3 < 0) {\u000a      puVar4 = (uint *)__errno_location();\u000a      uVar10 = *puVar4;\u000a      uVar5 = dcgettext(0,"%s: seek failed",5);\u000a      past_end = quotearg_n_style_colon((char *)0x0);\u000a      error(0,(ulong)uVar10,uVar5,past_end);\u000a    }\u000a  }\u000a  sVar6 = safe_read(buf,(size_t)G_buffer);\u000a  while ((__offset_00 != 0 && (sVar6 == 0))) {\u000a    _Var3 = lseek(__fd,-read_size,1);\u000a    if (_Var3 < 0) {\u000a      puVar4 = (uint *)__errno_location();\u000a      uVar10 = *puVar4;\u000a      uVar5 = dcgettext(0,"%s: seek failed",5);\u000a      past_end = quotearg_n_style_colon((char *)0x0);\u000a      error(0,(ulong)uVar10,uVar5,past_end);\u000a    }\u000a    sVar7 = read_size;\u000a    sVar6 = safe_read(buf,(size_t)G_buffer);\u000a    __offset_00 = __offset_00 - sVar7;\u000a  }\u000a  if (sVar6 == read_size) {\u000a    do {\u000a      sVar7 = safe_read(buf,(size_t)G_buffer);\u000a      if (sVar7 == 0xffffffffffffffff) goto LAB_0040229c;\u000a      if (sVar7 == 0) goto LAB_00402261;\u000a      __offset_00 = __offset_00 + sVar7;\u000a      sVar6 = sVar7;\u000a    } while (sVar7 == read_size);\u000a  }\u000a  else {\u000aLAB_00402261:\u000a    sVar7 = sVar6;\u000a    if (sVar6 == 0xffffffffffffffff) {\u000aLAB_0040229c:\u000a      puVar4 = (uint *)__errno_location();\u000a      uVar10 = *puVar4;\u000a      uVar5 = dcgettext(0,"%s: read error",5);\u000aLAB_004025e8:\u000a      pcVar9 = quotearg_n_style_colon((char *)0x0);\u000a      error(0,(ulong)uVar10,uVar5,pcVar9);\u000a      return false;\u000a    }\u000a  }\u000a  past_end = G_buffer + sVar7;\u000a  if (sentinel_length == 0) {\u000a    bVar11 = true;\u000a    sVar6 = 0;\u000a    start = past_end;\u000a    local_50 = __offset_00;\u000a  }\u000a  else {\u000a    start = past_end + (1 - sVar2);\u000a    bVar11 = true;\u000a    sVar6 = sentinel_length;\u000a    local_50 = __offset_00;\u000a  }\u000aLAB_004022da:\u000a  do {\u000a    __n = sVar2 - 1;\u000a    do {\u000a      if (sVar6 == 0) {\u000a        __length = (int)start - (int)G_buffer;\u000a        if (__length < 0) {\u000a          uVar5 = dcgettext(0,"record too large",5);\u000a          error(1,0,uVar5);\u000aLAB_0040236d:\u000a          __length = re_search((re_pattern_buffer *)&compiled_separator,G_buffer,__length,\u000a                               __length + -1,1 - __length,(re_registers *)&regs);\u000a          if (__length == -2) {\u000a            uVar5 = dcgettext(0,"error in regular expression search",5);\u000a            error(1,0,uVar5);\u000a          }\u000a          else {\u000a            if (__length == -1) goto LAB_0040239f;\u000a            start = G_buffer + (long)*regs.start;\u000a            match_length = (long)*regs.end - (long)*regs.start;\u000a          }\u000a        }\u000a        else {\u000a          if (__length != 0) goto LAB_0040236d;\u000aLAB_0040239f:\u000a          start = G_buffer + -1;\u000a        }\u000a      }\u000a      else {\u000a        do {\u000a          do {\u000a            __s1 = start;\u000a            start = __s1 + -1;\u000a          } while (*start != cVar1);\u000a        } while ((__n != 0) && (__length = strncmp(__s1,pcVar9 + 1,__n), __length != 0));\u000a      }\u000a      if (start < G_buffer) {\u000a        if (local_50 == 0) {\u000a          output(G_buffer,past_end);\u000a          return true;\u000a        }\u000a        past_end = past_end + -(long)G_buffer;\u000a        if (read_size < past_end) {\u000a          sVar6 = 1;\u000a          if (sentinel_length != 0) {\u000a            sVar6 = sentinel_length;\u000a          }\u000a          n = sentinel_length + 2 + read_size * 4;\u000a          if (n < G_buffer_size) {\u000a            read_size = read_size * 2;\u000a            G_buffer_size = n;\u000a                    /* WARNING: Subroutine does not return */\u000a            xalloc_die();\u000a          }\u000a          read_size = read_size * 2;\u000a          G_buffer_size = n;\u000a          pvVar8 = xrealloc(G_buffer + -sVar6,n);\u000a          G_buffer = (char *)((long)pvVar8 + sVar6);\u000a        }\u000a        __offset = local_50 - read_size;\u000a        if (local_50 < read_size) {\u000a          read_size = local_50;\u000a          __offset = 0;\u000a        }\u000a        _Var3 = lseek(__fd,__offset,0);\u000a        if (_Var3 < 0) {\u000a          puVar4 = (uint *)__errno_location();\u000a          uVar10 = *puVar4;\u000a          uVar5 = dcgettext(0,"%s: seek failed",5);\u000a          start = quotearg_n_style_colon((char *)0x0);\u000a          error(0,(ulong)uVar10,uVar5,start);\u000a        }\u000a        __s1 = G_buffer;\u000a        start = G_buffer + read_size;\u000a        memmove(start,G_buffer,(size_t)past_end);\u000a        past_end = past_end + (long)start;\u000a        if (sentinel_length == 0) {\u000a          start = past_end;\u000a        }\u000a        sVar7 = safe_read(buf,(size_t)__s1);\u000a        sVar6 = sentinel_length;\u000a        local_50 = __offset;\u000a        if (sVar7 == read_size) goto LAB_004022da;\u000a        puVar4 = (uint *)__errno_location();\u000a        uVar10 = *puVar4;\u000a        uVar5 = dcgettext(0,"%s: read error",5);\u000a        goto LAB_004025e8;\u000a      }\u000a      if (separator_ends_record == 1) {\u000a        __s1 = start + match_length;\u000a        if ((!bVar11) || (__s1 != past_end)) {\u000a          output(__s1,past_end);\u000a        }\u000a        bVar11 = false;\u000a        past_end = __s1;\u000a      }\u000a      else {\u000a        output(start,past_end);\u000a        past_end = start;\u000a      }\u000a      sVar6 = 0;\u000a    } while (sentinel_length == 0);\u000a    start = start + (1 - match_length);\u000a    sVar6 = sentinel_length;\u000a  } while( true );\u000a}\u000a\u000a
p3
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV R12,RDX\nMOV R15,RSI\nMOV R14D,EDI\nMOV RAX,qword ptr [0x006082d0]\nMOV qword ptr [RSP + 0x30],RAX\nMOV R13B,byte ptr [RAX]\nMOV RAX,qword ptr [0x00608430]\nMOV qword ptr [RSP + 0x20],RAX\nXOR EDX,EDX\nMOV RAX,R12\nDIV qword ptr [0x00608438]\nTEST RDX,RDX\nJZ 0x00402173\nSUB R12,RDX\nXOR EDX,EDX\nMOV EDI,R14D\nMOV RSI,R12\nCALL 0x00401530\nTEST RAX,RAX\nJNS 0x00402173\nCALL 0x00401400\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x405aa0\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x00403f00\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x004016c0\nMOV RSI,qword ptr [0x00608448]\nMOV RDX,qword ptr [0x00608438]\nMOV EDI,R14D\nCALL 0x00404450\nMOV RBX,RAX\nTEST R12,R12\nJZ 0x0040221d\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST RBX,RBX\nJNZ 0x0040221d\nMOV RSI,qword ptr [0x00608438]\nNEG RSI\nMOV EDX,0x1\nMOV EDI,R14D\nCALL 0x00401530\nTEST RAX,RAX\nJNS 0x004021fc\nCALL 0x00401400\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x405aa0\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nCALL 0x00403f00\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x004016c0\nMOV RBP,qword ptr [0x00608438]\nMOV RSI,qword ptr [0x00608448]\nMOV EDI,R14D\nMOV RDX,RBP\nCALL 0x00404450\nMOV RBX,RAX\nSUB R12,RBP\nJNZ 0x004021a0\nMOV RDX,qword ptr [0x00608438]\nCMP RBX,RDX\nJNZ 0x00402261\nNOP dword ptr [RAX]\nMOV RSI,qword ptr [0x00608448]\nMOV EDI,R14D\nCALL 0x00404450\nMOV RBP,RAX\nCMP RBP,-0x1\nJZ 0x0040229c\nTEST RBP,RBP\nJZ 0x00402261\nADD R12,RBP\nMOV RDX,qword ptr [0x00608438]\nCMP RBP,RDX\nMOV RBX,RBP\nJZ 0x00402230\nJMP 0x0040226a\nCMP RBX,-0x1\nMOV RBP,RBX\nJZ 0x0040229c\nMOV qword ptr [RSP + 0x18],R12\nMOV dword ptr [RSP + 0xc],R14D\nMOV qword ptr [RSP + 0x10],R15\nADD RBP,qword ptr [0x00608448]\nCMP qword ptr [0x006082d8],0x0\nJZ 0x004022c9\nMOV EBX,0x1\nSUB RBX,qword ptr [RSP + 0x20]\nADD RBX,RBP\nMOV R15B,0x1\nJMP 0x004022d3\nCALL 0x00401400\nMOV R14D,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x4059f4\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R15\nJMP 0x004025e8\nMOV R15B,0x1\nXOR EAX,EAX\nMOV RBX,RBP\nJMP 0x004022da\nMOV RAX,qword ptr [0x006082d8]\nMOV RCX,qword ptr [RSP + 0x30]\nLEA R12,[RCX + 0x1]\nMOV RCX,qword ptr [RSP + 0x20]\nLEA R14,[RCX + -0x1]\nNOP dword ptr [RAX]\nTEST RAX,RAX\nJZ 0x00402330\nNOP dword ptr CS:[RAX + RAX*0x1]\nDEC RBX\nCMP byte ptr [RBX],R13B\nJNZ 0x00402300\nTEST R14,R14\nJZ 0x004023ff\nLEA RDI,[RBX + 0x1]\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00401420\nTEST EAX,EAX\nJNZ 0x00402300\nJMP 0x004023ff\nMOV dword ptr [RSP + 0x8],R15D\nMOV R15,RBX\nSUB R15,qword ptr [0x00608448]\nTEST R15D,R15D\nJS 0x00402348\nJNZ 0x0040236d\nJMP 0x0040239f\nXOR EDI,EDI\nMOV ESI,0x405ab0\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004016c0\nMOV R8D,0x1\nSUB R8D,R15D\nMOV RSI,qword ptr [0x00608448]\nMOV ECX,R15D\nDEC ECX\nMOV EDI,0x6082e8\nMOV R9D,0x608468\nMOV EDX,R15D\nCALL 0x00401640\nCMP EAX,-0x2\nJZ 0x004023ab\nCMP EAX,-0x1\nJNZ 0x004023d2\nMOV RBX,qword ptr [0x00608448]\nDEC RBX\nJMP 0x004023fa\nXOR EDI,EDI\nMOV ESI,0x405ac1\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004016c0\nJMP 0x004023fa\nMOV RAX,qword ptr [0x00608470]\nMOVSXD RAX,dword ptr [RAX]\nMOV RBX,qword ptr [0x00608448]\nADD RBX,RAX\nMOV RCX,qword ptr [0x00608478]\nMOVSXD RCX,dword ptr [RCX]\nSUB RCX,RAX\nMOV qword ptr [0x00608430],RCX\nMOV R15D,dword ptr [RSP + 0x8]\nMOV RDI,qword ptr [0x00608448]\nCMP RBX,RDI\nJC 0x00402475\nCMP byte ptr [0x006082e0],0x1\nJNZ 0x00402440\nMOV RSI,RBP\nMOV RBP,qword ptr [0x00608430]\nADD RBP,RBX\nTEST R15B,0x1\nJZ 0x0040242c\nCMP RBP,RSI\nJZ 0x00402434\nMOV RDI,RBP\nCALL 0x00401fb0\nXOR R15D,R15D\nJMP 0x0040244e\nMOV RDI,RBX\nMOV RSI,RBP\nCALL 0x00401fb0\nMOV RBP,RBX\nCMP qword ptr [0x006082d8],0x0\nMOV EAX,0x0\nJZ 0x004022f0\nMOV EAX,0x1\nSUB RAX,qword ptr [0x00608430]\nADD RBX,RAX\nJMP 0x004022d3\nMOV RSI,RBP\nMOV RBP,qword ptr [RSP + 0x18]\nTEST RBP,RBP\nJZ 0x0040250c\nMOV dword ptr [RSP + 0x8],R15D\nSUB RSI,RDI\nMOV RAX,qword ptr [0x00608438]\nMOV qword ptr [RSP + 0x28],RSI\nCMP RSI,RAX\nMOV R14,qword ptr [RSP + 0x10]\nMOV R15D,dword ptr [RSP + 0xc]\nJBE 0x004024f5\nMOV RCX,qword ptr [0x006082d8]\nTEST RCX,RCX\nMOV EBX,0x1\nCMOVNZ RBX,RCX\nMOV RDX,qword ptr [0x00608440]\nLEA RSI,[RAX + RAX*0x1]\nMOV qword ptr [0x00608438],RSI\nLEA RSI,[RCX + RAX*0x4 + 0x2]\nMOV qword ptr [0x00608440],RSI\nCMP RSI,RDX\nJC 0x00402610\nSUB RDI,RBX\nCALL 0x00404aa0\nADD RAX,RBX\nMOV qword ptr [0x00608448],RAX\nMOV RAX,RBP\nSUB RAX,qword ptr [0x00608438]\nJNC 0x00402518\nMOV qword ptr [0x00608438],RBP\nXOR ESI,ESI\nJMP 0x0040251b\nCALL 0x00401fb0\nMOV BL,0x1\nJMP 0x004025ff\nMOV RSI,RAX\nXOR EDX,EDX\nMOV EDI,R15D\nMOV qword ptr [RSP + 0x18],RSI\nCALL 0x00401530\nTEST RAX,RAX\nJNS 0x0040256a\nCALL 0x00401400\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x405aa0\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R14\nCALL 0x00403f00\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x004016c0\nMOV R12,qword ptr [0x00608448]\nMOV R14,qword ptr [0x00608438]\nLEA RBX,[R12 + R14*0x1]\nMOV RDI,RBX\nMOV RSI,R12\nMOV RBP,qword ptr [RSP + 0x28]\nMOV RDX,RBP\nCALL 0x004016b0\nADD RBP,RBX\nCMP qword ptr [0x006082d8],0x0\nCMOVZ RBX,RBP\nMOV EDI,R15D\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x00404450\nCMP RAX,qword ptr [0x00608438]\nMOV R15D,dword ptr [RSP + 0x8]\nJZ 0x004022d3\nCALL 0x00401400\nMOV R14D,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x4059f4\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,qword ptr [RSP + 0x10]\nCALL 0x00403f00\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nCALL 0x004016c0\nMOV EAX,EBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00404bf0\n'
p4
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n49 89 d4\n49 89 f7\n41 89 fe\n48 8b 05 d2 61 20 00\n48 89 44 24 30\n44 8a 28\n48 8b 05 23 63 20 00\n48 89 44 24 20\n31 d2\n4c 89 e0\n48 f7 35 1a 63 20 00\n48 85 d2\n74 50\n49 29 d4\n31 d2\n44 89 f7\n4c 89 e6\ne8 fd f3 ff ff\n48 85 c0\n79 3b\ne8 c3 f2 ff ff\n8b 18\n31 ff\nbe a0 5a 40 00\nba 05 00 00 00\ne8 70 f3 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 9e 1d 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 4d f5 ff ff\n48 8b 35 ce 62 20 00\n48 8b 15 b7 62 20 00\n44 89 f7\ne8 c7 22 00 00\n48 89 c3\n4d 85 e4\n0f 84 88 00 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 85 db\n75 78\n48 8b 35 8c 62 20 00\n48 f7 de\nba 01 00 00 00\n44 89 f7\ne8 74 f3 ff ff\n48 85 c0\n79 3b\ne8 3a f2 ff ff\n8b 18\n31 ff\nbe a0 5a 40 00\nba 05 00 00 00\ne8 e7 f2 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne8 15 1d 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 c4 f4 ff ff\n48 8b 2d 35 62 20 00\n48 8b 35 3e 62 20 00\n44 89 f7\n48 89 ea\ne8 3b 22 00 00\n48 89 c3\n49 29 ec\n75 83\n48 8b 15 14 62 20 00\n48 39 d3\n75 38\n0f 1f 80 00 00 00 00\n48 8b 35 11 62 20 00\n44 89 f7\ne8 11 22 00 00\n48 89 c5\n48 83 fd ff\n74 54\n48 85 ed\n74 14\n49 01 ec\n48 8b 15 e1 61 20 00\n48 39 d5\n48 89 eb\n74 d1\neb 09\n48 83 fb ff\n48 89 dd\n74 32\n4c 89 64 24 18\n44 89 74 24 0c\n4c 89 7c 24 10\n48 03 2d c8 61 20 00\n48 83 3d 50 60 20 00 00\n74 3f\nbb 01 00 00 00\n48 2b 5c 24 20\n48 01 eb\n41 b7 01\neb 37\ne8 5f f1 ff ff\n44 8b 30\n31 db\n31 ff\nbe f4 59 40 00\nba 05 00 00 00\ne8 09 f2 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n4c 89 fa\ne9 1f 03 00 00\n41 b7 01\n31 c0\n48 89 eb\neb 07\n48 8b 05 fe 5f 20 00\n48 8b 4c 24 30\n4c 8d 61 01\n48 8b 4c 24 20\n4c 8d 71 ff\n0f 1f 40 00\n48 85 c0\n74 3b\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 ff cb\n44 38 2b\n75 f8\n4d 85 f6\n0f 84 ee 00 00 00\n48 8d 7b 01\n4c 89 e6\n4c 89 f2\ne8 00 f1 ff ff\n85 c0\n75 dc\ne9 d6 00 00 00\n44 89 7c 24 08\n49 89 df\n4c 2b 3d 09 61 20 00\n45 85 ff\n78 04\n75 27\neb 57\n31 ff\nbe b0 5a 40 00\nba 05 00 00 00\ne8 67 f1 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 53 f3 ff ff\n41 b8 01 00 00 00\n45 29 f8\n48 8b 35 cb 60 20 00\n44 89 f9\nff c9\nbf e8 82 60 00\n41 b9 68 84 60 00\n44 89 fa\ne8 ab f2 ff ff\n83 f8 fe\n74 11\n83 f8 ff\n75 33\n48 8b 1d a2 60 20 00\n48 ff cb\neb 4f\n31 ff\nbe c1 5a 40 00\nba 05 00 00 00\ne8 04 f1 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 f0 f2 ff ff\neb 28\n48 8b 05 97 60 20 00\n48 63 00\n48 8b 1d 65 60 20 00\n48 01 c3\n48 8b 0d 8b 60 20 00\n48 63 09\n48 29 c1\n48 89 0d 36 60 20 00\n44 8b 7c 24 08\n48 8b 3d 42 60 20 00\n48 39 fb\n72 6a\n80 3d ce 5e 20 00 01\n75 2c\n48 89 ee\n48 8b 2d 12 60 20 00\n48 01 dd\n41 f6 c7 01\n74 05\n48 39 f5\n74 08\n48 89 ef\ne8 7c fb ff ff\n45 31 ff\neb 15\n48 89 df\n48 89 ee\ne8 65 fb ff ff\n48 89 dd\n48 83 3d 82 5e 20 00 00\nb8 00 00 00 00\n0f 84 8f fe ff ff\nb8 01 00 00 00\n48 2b 05 c3 5f 20 00\n48 01 c3\ne9 5e fe ff ff\n48 89 ee\n48 8b 6c 24 18\n48 85 ed\n0f 84 86 00 00 00\n44 89 7c 24 08\n48 29 fe\n48 8b 05 a3 5f 20 00\n48 89 74 24 28\n48 39 c6\n4c 8b 74 24 10\n44 8b 7c 24 0c\n76 4c\n48 8b 0d 28 5e 20 00\n48 85 c9\nbb 01 00 00 00\n48 0f 45 d9\n48 8b 15 7d 5f 20 00\n48 8d 34 00\n48 89 35 6a 5f 20 00\n48 8d 74 81 02\n48 89 35 66 5f 20 00\n48 39 d6\n0f 82 2d 01 00 00\n48 29 df\ne8 b5 25 00 00\n48 01 d8\n48 89 05 53 5f 20 00\n48 89 e8\n48 2b 05 39 5f 20 00\n73 17\n48 89 2d 30 5f 20 00\n31 f6\neb 0f\ne8 9f fa ff ff\nb3 01\ne9 e7 00 00 00\n48 89 c6\n31 d2\n44 89 ff\n48 89 74 24 18\ne8 06 f0 ff ff\n48 85 c0\n79 3b\ne8 cc ee ff ff\n8b 18\n31 ff\nbe a0 5a 40 00\nba 05 00 00 00\ne8 79 ef ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n4c 89 f2\ne8 a7 19 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 56 f1 ff ff\n4c 8b 25 d7 5e 20 00\n4c 8b 35 c0 5e 20 00\n4b 8d 1c 34\n48 89 df\n4c 89 e6\n48 8b 6c 24 28\n48 89 ea\ne8 21 f1 ff ff\n48 01 dd\n48 83 3d 3e 5d 20 00 00\n48 0f 44 dd\n44 89 ff\n4c 89 e6\n4c 89 f2\ne8 a4 1e 00 00\n48 3b 05 85 5e 20 00\n44 8b 7c 24 08\n0f 84 15 fd ff ff\ne8 3d ee ff ff\n44 8b 30\n31 db\n31 ff\nbe f4 59 40 00\nba 05 00 00 00\ne8 e7 ee ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n48 8b 54 24 10\ne8 13 19 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ea\ne8 c1 f0 ff ff\n89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 db 25 00 00\n'
p5
S'.text:00000000004020e0\n.text:00000000004020e1\n.text:00000000004020e3\n.text:00000000004020e5\n.text:00000000004020e7\n.text:00000000004020e9\n.text:00000000004020ea\n.text:00000000004020ee\n.text:00000000004020f1\n.text:00000000004020f4\n.text:00000000004020f7\n.text:00000000004020fe\n.text:0000000000402103\n.text:0000000000402106\n.text:000000000040210d\n.text:0000000000402112\n.text:0000000000402114\n.text:0000000000402117\n.text:000000000040211e\n.text:0000000000402121\n.text:0000000000402123\n.text:0000000000402126\n.text:0000000000402128\n.text:000000000040212b\n.text:000000000040212e\n.text:0000000000402133\n.text:0000000000402136\n.text:0000000000402138\n.text:000000000040213d\n.text:000000000040213f\n.text:0000000000402141\n.text:0000000000402146\n.text:000000000040214b\n.text:0000000000402150\n.text:0000000000402153\n.text:0000000000402155\n.text:000000000040215a\n.text:000000000040215d\n.text:0000000000402162\n.text:0000000000402165\n.text:0000000000402167\n.text:0000000000402169\n.text:000000000040216b\n.text:000000000040216e\n.text:0000000000402173\n.text:000000000040217a\n.text:0000000000402181\n.text:0000000000402184\n.text:0000000000402189\n.text:000000000040218c\n.text:000000000040218f\n.text:0000000000402195\n.text:00000000004021a0\n.text:00000000004021a3\n.text:00000000004021a5\n.text:00000000004021ac\n.text:00000000004021af\n.text:00000000004021b4\n.text:00000000004021b7\n.text:00000000004021bc\n.text:00000000004021bf\n.text:00000000004021c1\n.text:00000000004021c6\n.text:00000000004021c8\n.text:00000000004021ca\n.text:00000000004021cf\n.text:00000000004021d4\n.text:00000000004021d9\n.text:00000000004021dc\n.text:00000000004021de\n.text:00000000004021e3\n.text:00000000004021e6\n.text:00000000004021eb\n.text:00000000004021ee\n.text:00000000004021f0\n.text:00000000004021f2\n.text:00000000004021f4\n.text:00000000004021f7\n.text:00000000004021fc\n.text:0000000000402203\n.text:000000000040220a\n.text:000000000040220d\n.text:0000000000402210\n.text:0000000000402215\n.text:0000000000402218\n.text:000000000040221b\n.text:000000000040221d\n.text:0000000000402224\n.text:0000000000402227\n.text:0000000000402229\n.text:0000000000402230\n.text:0000000000402237\n.text:000000000040223a\n.text:000000000040223f\n.text:0000000000402242\n.text:0000000000402246\n.text:0000000000402248\n.text:000000000040224b\n.text:000000000040224d\n.text:0000000000402250\n.text:0000000000402257\n.text:000000000040225a\n.text:000000000040225d\n.text:000000000040225f\n.text:0000000000402261\n.text:0000000000402265\n.text:0000000000402268\n.text:000000000040226a\n.text:000000000040226f\n.text:0000000000402274\n.text:0000000000402279\n.text:0000000000402280\n.text:0000000000402288\n.text:000000000040228a\n.text:000000000040228f\n.text:0000000000402294\n.text:0000000000402297\n.text:000000000040229a\n.text:000000000040229c\n.text:00000000004022a1\n.text:00000000004022a4\n.text:00000000004022a6\n.text:00000000004022a8\n.text:00000000004022ad\n.text:00000000004022b2\n.text:00000000004022b7\n.text:00000000004022ba\n.text:00000000004022bc\n.text:00000000004022c1\n.text:00000000004022c4\n.text:00000000004022c9\n.text:00000000004022cc\n.text:00000000004022ce\n.text:00000000004022d1\n.text:00000000004022d3\n.text:00000000004022da\n.text:00000000004022df\n.text:00000000004022e3\n.text:00000000004022e8\n.text:00000000004022ec\n.text:00000000004022f0\n.text:00000000004022f3\n.text:00000000004022f5\n.text:0000000000402300\n.text:0000000000402303\n.text:0000000000402306\n.text:0000000000402308\n.text:000000000040230b\n.text:0000000000402311\n.text:0000000000402315\n.text:0000000000402318\n.text:000000000040231b\n.text:0000000000402320\n.text:0000000000402322\n.text:0000000000402324\n.text:0000000000402330\n.text:0000000000402335\n.text:0000000000402338\n.text:000000000040233f\n.text:0000000000402342\n.text:0000000000402344\n.text:0000000000402346\n.text:0000000000402348\n.text:000000000040234a\n.text:000000000040234f\n.text:0000000000402354\n.text:0000000000402359\n.text:000000000040235c\n.text:0000000000402361\n.text:0000000000402363\n.text:0000000000402365\n.text:0000000000402368\n.text:000000000040236d\n.text:0000000000402373\n.text:0000000000402376\n.text:000000000040237d\n.text:0000000000402380\n.text:0000000000402382\n.text:0000000000402387\n.text:000000000040238d\n.text:0000000000402390\n.text:0000000000402395\n.text:0000000000402398\n.text:000000000040239a\n.text:000000000040239d\n.text:000000000040239f\n.text:00000000004023a6\n.text:00000000004023a9\n.text:00000000004023ab\n.text:00000000004023ad\n.text:00000000004023b2\n.text:00000000004023b7\n.text:00000000004023bc\n.text:00000000004023bf\n.text:00000000004023c4\n.text:00000000004023c6\n.text:00000000004023c8\n.text:00000000004023cb\n.text:00000000004023d0\n.text:00000000004023d2\n.text:00000000004023d9\n.text:00000000004023dc\n.text:00000000004023e3\n.text:00000000004023e6\n.text:00000000004023ed\n.text:00000000004023f0\n.text:00000000004023f3\n.text:00000000004023fa\n.text:00000000004023ff\n.text:0000000000402406\n.text:0000000000402409\n.text:000000000040240b\n.text:0000000000402412\n.text:0000000000402414\n.text:0000000000402417\n.text:000000000040241e\n.text:0000000000402421\n.text:0000000000402425\n.text:0000000000402427\n.text:000000000040242a\n.text:000000000040242c\n.text:000000000040242f\n.text:0000000000402434\n.text:0000000000402437\n.text:0000000000402440\n.text:0000000000402443\n.text:0000000000402446\n.text:000000000040244b\n.text:000000000040244e\n.text:0000000000402456\n.text:000000000040245b\n.text:0000000000402461\n.text:0000000000402466\n.text:000000000040246d\n.text:0000000000402470\n.text:0000000000402475\n.text:0000000000402478\n.text:000000000040247d\n.text:0000000000402480\n.text:0000000000402486\n.text:000000000040248b\n.text:000000000040248e\n.text:0000000000402495\n.text:000000000040249a\n.text:000000000040249d\n.text:00000000004024a2\n.text:00000000004024a7\n.text:00000000004024a9\n.text:00000000004024b0\n.text:00000000004024b3\n.text:00000000004024b8\n.text:00000000004024bc\n.text:00000000004024c3\n.text:00000000004024c7\n.text:00000000004024ce\n.text:00000000004024d3\n.text:00000000004024da\n.text:00000000004024dd\n.text:00000000004024e3\n.text:00000000004024e6\n.text:00000000004024eb\n.text:00000000004024ee\n.text:00000000004024f5\n.text:00000000004024f8\n.text:00000000004024ff\n.text:0000000000402501\n.text:0000000000402508\n.text:000000000040250a\n.text:000000000040250c\n.text:0000000000402511\n.text:0000000000402513\n.text:0000000000402518\n.text:000000000040251b\n.text:000000000040251d\n.text:0000000000402520\n.text:0000000000402525\n.text:000000000040252a\n.text:000000000040252d\n.text:000000000040252f\n.text:0000000000402534\n.text:0000000000402536\n.text:0000000000402538\n.text:000000000040253d\n.text:0000000000402542\n.text:0000000000402547\n.text:000000000040254a\n.text:000000000040254c\n.text:0000000000402551\n.text:0000000000402554\n.text:0000000000402559\n.text:000000000040255c\n.text:000000000040255e\n.text:0000000000402560\n.text:0000000000402562\n.text:0000000000402565\n.text:000000000040256a\n.text:0000000000402571\n.text:0000000000402578\n.text:000000000040257c\n.text:000000000040257f\n.text:0000000000402582\n.text:0000000000402587\n.text:000000000040258a\n.text:000000000040258f\n.text:0000000000402592\n.text:000000000040259a\n.text:000000000040259e\n.text:00000000004025a1\n.text:00000000004025a4\n.text:00000000004025a7\n.text:00000000004025ac\n.text:00000000004025b3\n.text:00000000004025b8\n.text:00000000004025be\n.text:00000000004025c3\n.text:00000000004025c6\n.text:00000000004025c8\n.text:00000000004025ca\n.text:00000000004025cf\n.text:00000000004025d4\n.text:00000000004025d9\n.text:00000000004025dc\n.text:00000000004025de\n.text:00000000004025e3\n.text:00000000004025e8\n.text:00000000004025ed\n.text:00000000004025f0\n.text:00000000004025f2\n.text:00000000004025f4\n.text:00000000004025f7\n.text:00000000004025fa\n.text:00000000004025ff\n.text:0000000000402601\n.text:0000000000402605\n.text:0000000000402606\n.text:0000000000402608\n.text:000000000040260a\n.text:000000000040260c\n.text:000000000040260e\n.text:000000000040260f\n.text:0000000000402610\n'
p6
tp7
sS'__libc_csu_init'
p8
(S'\n__stdcall __libc_csu_init()\n'
p9
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x607e08]\nPUSH RBP\nLEA RBP,[0x607e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401390\nTEST RBP,RBP\nJZ 0x00405556\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00405540\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p11
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 f6 28 20 00\n55\n48 8d 2d f6 28 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 5f be ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p12
S'.text:0000000000405500\n.text:0000000000405502\n.text:0000000000405504\n.text:0000000000405507\n.text:0000000000405509\n.text:000000000040550b\n.text:0000000000405512\n.text:0000000000405513\n.text:000000000040551a\n.text:000000000040551b\n.text:000000000040551e\n.text:0000000000405521\n.text:0000000000405524\n.text:0000000000405528\n.text:000000000040552c\n.text:0000000000405531\n.text:0000000000405534\n.text:0000000000405536\n.text:0000000000405538\n.text:0000000000405540\n.text:0000000000405543\n.text:0000000000405546\n.text:0000000000405549\n.text:000000000040554d\n.text:0000000000405551\n.text:0000000000405554\n.text:0000000000405556\n.text:000000000040555a\n.text:000000000040555b\n.text:000000000040555c\n.text:000000000040555e\n.text:0000000000405560\n.text:0000000000405562\n.text:0000000000405564\n'
p13
tp14
sS'fflush_unlocked'
p15
(S'\n__stdcall fflush_unlocked(FILE * __stream)\n'
p16
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fflush_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fflush_unlocked_006081d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p17
S'JMP qword ptr [0x006081d8]\n'
p18
S'ff 25 92 6a 20 00\n'
p19
S'.plt:0000000000401740\n'
p20
tp21
sS'ungetc'
p22
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p23
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00608148)();\u000a  return iVar1;\u000a}\u000a\u000a
p24
S'JMP qword ptr [0x00608148]\n'
p25
S'ff 25 22 6b 20 00\n'
p26
S'.plt:0000000000401620\n'
p27
tp28
sS'c_isdigit'
p29
(S'\n__stdcall c_isdigit()\n'
p30
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p31
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p32
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p33
S'.text:0000000000404e30\n.text:0000000000404e33\n.text:0000000000404e36\n.text:0000000000404e39\n'
p34
tp35
sS'version_etc_arn'
p36
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p37
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040622b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x4046e7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x404768;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x4047fc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p38
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00404578\nMOV EDX,0x406218\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401720\nJMP 0x0040458d\nMOV EDX,0x406224\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401720\nXOR EDI,EDI\nMOV ESI,0x40622b\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x406500\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401720\nXOR EDI,EDI\nMOV ESI,0x40622f\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401590\nCMP R12,0x9\nJA 0x00404616\nJMP qword ptr [0x4061c8 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x4062fa\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401720\nXOR EDI,EDI\nMOV ESI,0x406439\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401720\nADD RSP,0x38\nJMP 0x00404887\nXOR EDI,EDI\nMOV ESI,0x40630a\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401720\nXOR EDI,EDI\nMOV ESI,0x406321\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401720\nXOR EDI,EDI\nMOV ESI,0x40633d\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401720\nADD RSP,0x18\nJMP 0x00404887\nXOR EDI,EDI\nMOV ESI,0x40635d\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401720\nADD RSP,0x18\nJMP 0x00404887\nXOR EDI,EDI\nMOV ESI,0x406381\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401720\nADD RSP,0x28\nJMP 0x00404887\nXOR EDI,EDI\nMOV ESI,0x4063a9\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401720\nADD RSP,0x28\nJMP 0x00404887\nXOR EDI,EDI\nMOV ESI,0x4063d5\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401720\nADD RSP,0x38\nJMP 0x00404887\nXOR EDI,EDI\nMOV ESI,0x406405\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401720\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x004013f0\n'
p39
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 18 62 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 aa d1 ff ff\neb 15\nba 24 62 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 93 d1 ff ff\n31 ff\nbe 2b 62 40 00\nba 05 00 00 00\ne8 22 cf ff ff\n48 89 c1\nbe 01 00 00 00\nba 00 65 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 65 d1 ff ff\n31 ff\nbe 2f 62 40 00\nba 05 00 00 00\ne8 f4 ce ff ff\n48 89 c7\n4c 89 f6\ne8 b9 cf ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 c8 61 40 00\n31 ff\nbe fa 62 40 00\nba 05 00 00 00\ne8 ca ce ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 0a d1 ff ff\n31 ff\nbe 39 64 40 00\nba 05 00 00 00\ne8 99 ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 c1 d0 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 0a 63 40 00\nba 05 00 00 00\ne8 47 ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 83 d0 ff ff\n31 ff\nbe 21 63 40 00\nba 05 00 00 00\ne8 12 ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 4a d0 ff ff\n31 ff\nbe 3d 63 40 00\nba 05 00 00 00\ne8 d9 cd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 14 d0 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 5d 63 40 00\nba 05 00 00 00\ne8 9a cd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 d2 cf ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 81 63 40 00\nba 05 00 00 00\ne8 58 cd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 88 cf ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe a9 63 40 00\nba 05 00 00 00\ne8 0e cd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 3e cf ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe d5 63 40 00\nba 05 00 00 00\ne8 c4 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 ec ce ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 05 64 40 00\nba 05 00 00 00\ne8 75 cc ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 9d ce ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 5c cb ff ff\n'
p40
S'.text:0000000000404540\n.text:0000000000404542\n.text:0000000000404544\n.text:0000000000404546\n.text:0000000000404547\n.text:0000000000404548\n.text:000000000040454b\n.text:000000000040454e\n.text:0000000000404551\n.text:0000000000404554\n.text:0000000000404557\n.text:000000000040455a\n.text:000000000040455f\n.text:0000000000404562\n.text:0000000000404564\n.text:0000000000404569\n.text:000000000040456b\n.text:000000000040456e\n.text:0000000000404571\n.text:0000000000404576\n.text:0000000000404578\n.text:000000000040457d\n.text:000000000040457f\n.text:0000000000404582\n.text:0000000000404585\n.text:0000000000404588\n.text:000000000040458d\n.text:000000000040458f\n.text:0000000000404594\n.text:0000000000404599\n.text:000000000040459e\n.text:00000000004045a1\n.text:00000000004045a6\n.text:00000000004045ab\n.text:00000000004045b1\n.text:00000000004045b3\n.text:00000000004045b6\n.text:00000000004045bb\n.text:00000000004045bd\n.text:00000000004045c2\n.text:00000000004045c7\n.text:00000000004045cc\n.text:00000000004045cf\n.text:00000000004045d2\n.text:00000000004045d7\n.text:00000000004045db\n.text:00000000004045dd\n.text:00000000004045e5\n.text:00000000004045e7\n.text:00000000004045ec\n.text:00000000004045f1\n.text:00000000004045f6\n.text:00000000004045f9\n.text:00000000004045fc\n.text:0000000000404601\n.text:0000000000404603\n.text:0000000000404606\n.text:000000000040460a\n.text:000000000040460b\n.text:000000000040460d\n.text:000000000040460f\n.text:0000000000404611\n.text:0000000000404616\n.text:0000000000404618\n.text:000000000040461d\n.text:0000000000404622\n.text:0000000000404627\n.text:000000000040462a\n.text:000000000040462d\n.text:0000000000404631\n.text:0000000000404635\n.text:000000000040463a\n.text:000000000040463f\n.text:0000000000404642\n.text:0000000000404646\n.text:000000000040464a\n.text:000000000040464e\n.text:0000000000404652\n.text:0000000000404656\n.text:000000000040465a\n.text:000000000040465f\n.text:0000000000404663\n.text:0000000000404668\n.text:000000000040466a\n.text:000000000040466f\n.text:0000000000404674\n.text:0000000000404679\n.text:000000000040467c\n.text:000000000040467f\n.text:0000000000404683\n.text:0000000000404688\n.text:000000000040468a\n.text:000000000040468d\n.text:0000000000404691\n.text:0000000000404692\n.text:0000000000404694\n.text:0000000000404696\n.text:0000000000404698\n.text:000000000040469d\n.text:000000000040469f\n.text:00000000004046a4\n.text:00000000004046a9\n.text:00000000004046ae\n.text:00000000004046b1\n.text:00000000004046b4\n.text:00000000004046b8\n.text:00000000004046bc\n.text:00000000004046c1\n.text:00000000004046c3\n.text:00000000004046c6\n.text:00000000004046ca\n.text:00000000004046cb\n.text:00000000004046cd\n.text:00000000004046cf\n.text:00000000004046d1\n.text:00000000004046d6\n.text:00000000004046d8\n.text:00000000004046dd\n.text:00000000004046e2\n.text:00000000004046e7\n.text:00000000004046ea\n.text:00000000004046ed\n.text:00000000004046f1\n.text:00000000004046f5\n.text:00000000004046f9\n.text:00000000004046fe\n.text:0000000000404700\n.text:0000000000404703\n.text:0000000000404707\n.text:000000000040470c\n.text:0000000000404710\n.text:0000000000404715\n.text:0000000000404717\n.text:000000000040471c\n.text:0000000000404721\n.text:0000000000404726\n.text:0000000000404729\n.text:000000000040472c\n.text:0000000000404730\n.text:0000000000404734\n.text:0000000000404739\n.text:000000000040473e\n.text:0000000000404741\n.text:0000000000404745\n.text:0000000000404749\n.text:000000000040474e\n.text:0000000000404752\n.text:0000000000404757\n.text:0000000000404759\n.text:000000000040475e\n.text:0000000000404763\n.text:0000000000404768\n.text:000000000040476b\n.text:000000000040476e\n.text:0000000000404772\n.text:0000000000404776\n.text:000000000040477a\n.text:000000000040477f\n.text:0000000000404784\n.text:0000000000404787\n.text:000000000040478b\n.text:000000000040478f\n.text:0000000000404793\n.text:0000000000404798\n.text:000000000040479c\n.text:00000000004047a1\n.text:00000000004047a3\n.text:00000000004047a8\n.text:00000000004047ad\n.text:00000000004047b2\n.text:00000000004047b5\n.text:00000000004047b8\n.text:00000000004047bc\n.text:00000000004047c0\n.text:00000000004047c5\n.text:00000000004047ca\n.text:00000000004047cd\n.text:00000000004047d1\n.text:00000000004047d5\n.text:00000000004047d9\n.text:00000000004047dd\n.text:00000000004047e2\n.text:00000000004047e6\n.text:00000000004047eb\n.text:00000000004047ed\n.text:00000000004047f2\n.text:00000000004047f7\n.text:00000000004047fc\n.text:00000000004047ff\n.text:0000000000404802\n.text:0000000000404806\n.text:000000000040480a\n.text:000000000040480e\n.text:0000000000404813\n.text:0000000000404818\n.text:000000000040481b\n.text:000000000040481f\n.text:0000000000404823\n.text:0000000000404827\n.text:000000000040482b\n.text:000000000040482f\n.text:0000000000404834\n.text:0000000000404838\n.text:000000000040483a\n.text:000000000040483c\n.text:0000000000404841\n.text:0000000000404846\n.text:000000000040484b\n.text:000000000040484e\n.text:0000000000404851\n.text:0000000000404855\n.text:0000000000404859\n.text:000000000040485e\n.text:0000000000404863\n.text:0000000000404866\n.text:000000000040486a\n.text:000000000040486e\n.text:0000000000404872\n.text:0000000000404876\n.text:000000000040487a\n.text:000000000040487e\n.text:0000000000404883\n.text:0000000000404887\n.text:0000000000404888\n.text:000000000040488a\n.text:000000000040488c\n.text:000000000040488e\n.text:000000000040488f\n'
p41
tp42
sS'usage'
p43
(S'\n__stdcall usage()\n'
p44
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... [FILE]...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,"Write each FILE to standard output, last line first.\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_stdin_note();\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,\u000a                            "  -b, --before             attach the separator before instead of after\u005cn  -r, --regex              interpret the separator as a regular expression\u005cn  -s, --separator=STRING   use STRING as the separator instead of newline\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p45
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x0040194b\nXOR EDI,EDI\nMOV ESI,0x4055c4\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060a498]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004016a0\nXOR EDI,EDI\nMOV ESI,0x4055e5\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00608288]\nMOV RDI,RAX\nCALL 0x00401590\nCALL 0x004019a0\nCALL 0x004019d0\nXOR EDI,EDI\nMOV ESI,0x40561b\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00608288]\nMOV RDI,RAX\nCALL 0x00401590\nXOR EDI,EDI\nMOV ESI,0x4056f9\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00608288]\nMOV RDI,RAX\nCALL 0x00401590\nXOR EDI,EDI\nMOV ESI,0x405726\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00608288]\nMOV RDI,RAX\nCALL 0x00401590\nCALL 0x00401a00\nMOV EDI,EBX\nCALL 0x00401700\nCALL 0x00401960\nMOV EDI,EBX\nCALL 0x00401700\n'
p46
S'53\n89 fb\n85 db\n0f 85 c0 00 00 00\n31 ff\nbe c4 55 40 00\nba 05 00 00 00\ne8 24 fc ff ff\n48 89 c1\n48 8b 15 f2 8b 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 eb fd ff ff\n31 ff\nbe e5 55 40 00\nba 05 00 00 00\ne8 fa fb ff ff\n48 8b 35 bb 69 20 00\n48 89 c7\ne8 bb fc ff ff\ne8 c6 00 00 00\ne8 f1 00 00 00\n31 ff\nbe 1b 56 40 00\nba 05 00 00 00\ne8 d0 fb ff ff\n48 8b 35 91 69 20 00\n48 89 c7\ne8 91 fc ff ff\n31 ff\nbe f9 56 40 00\nba 05 00 00 00\ne8 b0 fb ff ff\n48 8b 35 71 69 20 00\n48 89 c7\ne8 71 fc ff ff\n31 ff\nbe 26 57 40 00\nba 05 00 00 00\ne8 90 fb ff ff\n48 8b 35 51 69 20 00\n48 89 c7\ne8 51 fc ff ff\ne8 bc 00 00 00\n89 df\ne8 b5 fd ff ff\ne8 10 00 00 00\n89 df\ne8 a9 fd ff ff\n'
p47
S'.text:0000000000401880\n.text:0000000000401881\n.text:0000000000401883\n.text:0000000000401885\n.text:000000000040188b\n.text:000000000040188d\n.text:0000000000401892\n.text:0000000000401897\n.text:000000000040189c\n.text:000000000040189f\n.text:00000000004018a6\n.text:00000000004018ab\n.text:00000000004018ad\n.text:00000000004018b0\n.text:00000000004018b5\n.text:00000000004018b7\n.text:00000000004018bc\n.text:00000000004018c1\n.text:00000000004018c6\n.text:00000000004018cd\n.text:00000000004018d0\n.text:00000000004018d5\n.text:00000000004018da\n.text:00000000004018df\n.text:00000000004018e1\n.text:00000000004018e6\n.text:00000000004018eb\n.text:00000000004018f0\n.text:00000000004018f7\n.text:00000000004018fa\n.text:00000000004018ff\n.text:0000000000401901\n.text:0000000000401906\n.text:000000000040190b\n.text:0000000000401910\n.text:0000000000401917\n.text:000000000040191a\n.text:000000000040191f\n.text:0000000000401921\n.text:0000000000401926\n.text:000000000040192b\n.text:0000000000401930\n.text:0000000000401937\n.text:000000000040193a\n.text:000000000040193f\n.text:0000000000401944\n.text:0000000000401946\n.text:000000000040194b\n.text:0000000000401950\n.text:0000000000401952\n'
p48
tp49
sS'quoting_options_from_style'
p50
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p51
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p52
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00403dcd\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x004013f0\n'
p53
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 1e d6 ff ff\n'
p54
S'.text:0000000000403d80\n.text:0000000000403d84\n.text:0000000000403d87\n.text:0000000000403d8c\n.text:0000000000403d91\n.text:0000000000403d95\n.text:0000000000403d9d\n.text:0000000000403da0\n.text:0000000000403da2\n.text:0000000000403da4\n.text:0000000000403da8\n.text:0000000000403dab\n.text:0000000000403daf\n.text:0000000000403db4\n.text:0000000000403db9\n.text:0000000000403dbd\n.text:0000000000403dc1\n.text:0000000000403dc5\n.text:0000000000403dc8\n.text:0000000000403dcc\n.text:0000000000403dcd\n'
p55
tp56
sS'rpl_fclose'
p57
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p58
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00404cd9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00404cd9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p59
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004015e0\nTEST EAX,EAX\nJS 0x00404cd9\nMOV RDI,RBX\nCALL 0x00401650\nTEST EAX,EAX\nJZ 0x00404ca7\nMOV RDI,RBX\nCALL 0x004015e0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401530\nCMP RAX,-0x1\nJZ 0x00404cd9\nMOV RDI,RBX\nCALL 0x00404cf0\nTEST EAX,EAX\nJZ 0x00404cd9\nCALL 0x00401400\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004014a0\nTEST EBP,EBP\nJZ 0x00404cd2\nCALL 0x00401400\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004014a0\n'
p60
S'55\n53\n50\n48 89 fb\ne8 65 c9 ff ff\n85 c0\n78 5a\n48 89 df\ne8 c9 c9 ff ff\n85 c0\n74 1c\n48 89 df\ne8 4d c9 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 8f c8 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 48 c7 ff ff\n8b 28\n48 89 df\ne8 de c7 ff ff\n85 ed\n74 0c\ne8 35 c7 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 b9 c7 ff ff\n'
p61
S'.text:0000000000404c70\n.text:0000000000404c71\n.text:0000000000404c72\n.text:0000000000404c73\n.text:0000000000404c76\n.text:0000000000404c7b\n.text:0000000000404c7d\n.text:0000000000404c7f\n.text:0000000000404c82\n.text:0000000000404c87\n.text:0000000000404c89\n.text:0000000000404c8b\n.text:0000000000404c8e\n.text:0000000000404c93\n.text:0000000000404c95\n.text:0000000000404c9a\n.text:0000000000404c9c\n.text:0000000000404ca1\n.text:0000000000404ca5\n.text:0000000000404ca7\n.text:0000000000404caa\n.text:0000000000404caf\n.text:0000000000404cb1\n.text:0000000000404cb3\n.text:0000000000404cb8\n.text:0000000000404cba\n.text:0000000000404cbd\n.text:0000000000404cc2\n.text:0000000000404cc4\n.text:0000000000404cc6\n.text:0000000000404ccb\n.text:0000000000404ccd\n.text:0000000000404cd2\n.text:0000000000404cd6\n.text:0000000000404cd7\n.text:0000000000404cd8\n.text:0000000000404cd9\n.text:0000000000404cdc\n.text:0000000000404ce0\n.text:0000000000404ce1\n.text:0000000000404ce2\n'
p62
tp63
sS'strcpy'
p64
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p65
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00608058)();\u000a  return pcVar1;\u000a}\u000a\u000a
p66
S'JMP qword ptr [0x00608058]\n'
p67
S'ff 25 12 6c 20 00\n'
p68
S'.plt:0000000000401440\n'
p69
tp70
sS'fwrite_unlocked'
p71
(S'\n__stdcall fwrite_unlocked(void * __ptr, size_t __size, size_t __n, FILE * __stream)\n'
p72
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite_unlocked(void *__ptr,size_t __size,size_t __n,FILE *__stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_unlocked_00608168)();\u000a  return sVar1;\u000a}\u000a\u000a
p73
S'JMP qword ptr [0x00608168]\n'
p74
S'ff 25 02 6b 20 00\n'
p75
S'.plt:0000000000401660\n'
p76
tp77
sS'output'
p78
(S'\n__stdcall output(char * start, char * past_end)\n'
p79
V\u000avoid output(char *start,char *past_end)\u000a\u000a{\u000a  char buffer [8192];\u000a  size_t bytes_in_buffer;\u000a  char *__n;\u000a  char *__dest;\u000a  char *__dest_00;\u000a  \u000a  if (start == (char *)0x0) {\u000a    fwrite_unlocked((void *)0x608480,1,bytes_in_buffer,stdout);\u000a  }\u000a  else {\u000a    past_end = past_end + -(long)start;\u000a    __n = (char *)(0x2000 - bytes_in_buffer);\u000a    __dest = (char *)(bytes_in_buffer + 0x608480);\u000a    __dest_00 = __dest;\u000a    if (__n <= past_end) {\u000a      do {\u000a        memcpy(__dest,start,(size_t)__n);\u000a        past_end = past_end + -(long)__n;\u000a        start = start + (long)__n;\u000a        fwrite_unlocked((void *)0x608480,1,0x2000,stdout);\u000a        bytes_in_buffer = 0;\u000a        __dest = (char *)0x608480;\u000a        __n = (char *)0x2000;\u000a        __dest_00 = (char *)&ram0x00608480;\u000a      } while ((char *)0x1fff < past_end);\u000a    }\u000a    memcpy(__dest_00,start,(size_t)past_end);\u000a  }\u000a  return;\u000a}\u000a\u000a
p80
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV R12,RDI\nMOV RDX,qword ptr [0x0060a480]\nTEST R12,R12\nJZ 0x00401feb\nSUB R14,R12\nMOV EBX,0x2000\nSUB RBX,RDX\nMOV EDI,0x608480\nADD RDI,qword ptr [0x0060a480]\nCMP R14,RBX\nJNC 0x00402006\nMOV R15,RDI\nJMP 0x0040205a\nMOV RCX,qword ptr [0x00608288]\nMOV EDI,0x608480\nMOV ESI,0x1\nCALL 0x00401660\nXOR R14D,R14D\nJMP 0x0040206f\nMOV R15D,0x608480\nNOP dword ptr [RAX]\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x004015d0\nSUB R14,RBX\nADD R12,RBX\nMOV RCX,qword ptr [0x00608288]\nMOV EDI,0x608480\nMOV ESI,0x1\nMOV EDX,0x2000\nCALL 0x00401660\nMOV qword ptr [0x0060a480],0x0\nCMP R14,0x1fff\nMOV EDI,0x608480\nMOV EBX,0x2000\nJA 0x00402010\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x004015d0\nADD R14,qword ptr [0x0060a480]\nMOV qword ptr [0x0060a480],R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p81
S'41 57\n41 56\n41 54\n53\n50\n49 89 f6\n49 89 fc\n48 8b 15 bb 84 20 00\n4d 85 e4\n74 21\n4d 29 e6\nbb 00 20 00 00\n48 29 d3\nbf 80 84 60 00\n48 03 3d 9f 84 20 00\n49 39 de\n73 20\n49 89 ff\neb 6f\n48 8b 0d 96 62 20 00\nbf 80 84 60 00\nbe 01 00 00 00\ne8 5f f6 ff ff\n45 31 f6\neb 69\n41 bf 80 84 60 00\n0f 1f 40 00\n4c 89 e6\n48 89 da\ne8 b5 f5 ff ff\n49 29 de\n49 01 dc\n48 8b 0d 60 62 20 00\nbf 80 84 60 00\nbe 01 00 00 00\nba 00 20 00 00\ne8 24 f6 ff ff\n48 c7 05 39 84 20 00 00 00 00 00\n49 81 fe ff 1f 00 00\nbf 80 84 60 00\nbb 00 20 00 00\n77 b6\n4c 89 ff\n4c 89 e6\n4c 89 f2\ne8 68 f5 ff ff\n4c 03 35 11 84 20 00\n4c 89 35 0a 84 20 00\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p82
S'.text:0000000000401fb0\n.text:0000000000401fb2\n.text:0000000000401fb4\n.text:0000000000401fb6\n.text:0000000000401fb7\n.text:0000000000401fb8\n.text:0000000000401fbb\n.text:0000000000401fbe\n.text:0000000000401fc5\n.text:0000000000401fc8\n.text:0000000000401fca\n.text:0000000000401fcd\n.text:0000000000401fd2\n.text:0000000000401fd5\n.text:0000000000401fda\n.text:0000000000401fe1\n.text:0000000000401fe4\n.text:0000000000401fe6\n.text:0000000000401fe9\n.text:0000000000401feb\n.text:0000000000401ff2\n.text:0000000000401ff7\n.text:0000000000401ffc\n.text:0000000000402001\n.text:0000000000402004\n.text:0000000000402006\n.text:000000000040200c\n.text:0000000000402010\n.text:0000000000402013\n.text:0000000000402016\n.text:000000000040201b\n.text:000000000040201e\n.text:0000000000402021\n.text:0000000000402028\n.text:000000000040202d\n.text:0000000000402032\n.text:0000000000402037\n.text:000000000040203c\n.text:0000000000402047\n.text:000000000040204e\n.text:0000000000402053\n.text:0000000000402058\n.text:000000000040205a\n.text:000000000040205d\n.text:0000000000402060\n.text:0000000000402063\n.text:0000000000402068\n.text:000000000040206f\n.text:0000000000402076\n.text:000000000040207a\n.text:000000000040207b\n.text:000000000040207d\n.text:000000000040207f\n.text:0000000000402081\n'
p83
tp84
sS'strncmp'
p85
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p86
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00608048)();\u000a  return iVar1;\u000a}\u000a\u000a
p87
S'JMP qword ptr [0x00608048]\n'
p88
S'ff 25 22 6c 20 00\n'
p89
S'.plt:0000000000401420\n'
p90
tp91
sS'xnrealloc'
p92
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p93
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p94
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00404a94\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00404aa0\nPUSH RAX\nCALL 0x00404bf0\n'
p95
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p96
S'.text:0000000000404a80\n.text:0000000000404a83\n.text:0000000000404a86\n.text:0000000000404a89\n.text:0000000000404a8b\n.text:0000000000404a8f\n.text:0000000000404a92\n.text:0000000000404a94\n.text:0000000000404a95\n'
p97
tp98
sS'mfile_name_concat'
p99
(S'\n__stdcall mfile_name_concat(char * dir, char * abase, char * * base_in_result)\n'
p100
V\u000achar * mfile_name_concat(char *dir,char *abase,char **base_in_result)\u000a\u000a{\u000a  char *name;\u000a  size_t sVar1;\u000a  char *__s;\u000a  size_t sVar2;\u000a  undefined *puVar3;\u000a  long lVar4;\u000a  char *pcVar5;\u000a  bool bVar6;\u000a  \u000a  name = last_component(dir);\u000a  sVar1 = base_len(name);\u000a  if (sVar1 == 0) {\u000a    bVar6 = false;\u000a  }\u000a  else {\u000a    bVar6 = name[sVar1 - 1] != '/';\u000a  }\u000a  __s = longest_relative_suffix(abase);\u000a  sVar2 = strlen(__s);\u000a  pcVar5 = (char *)malloc((size_t)(name + (sVar1 - (long)dir) + sVar2 + 1 + (ulong)bVar6));\u000a  if (pcVar5 == (char *)0x0) {\u000a    pcVar5 = (char *)0x0;\u000a  }\u000a  else {\u000a    puVar3 = (undefined *)__mempcpy_chk(pcVar5,dir,name + (sVar1 - (long)dir),0xffffffffffffffff);\u000a    *puVar3 = 0x2f;\u000a    if (base_in_result != (char **)0x0) {\u000a      lVar4 = 0;\u000a      if (*abase == '/') {\u000a        lVar4 = -1;\u000a      }\u000a      *base_in_result = puVar3 + (ulong)bVar6 + lVar4;\u000a    }\u000a    puVar3 = (undefined *)__mempcpy_chk(puVar3 + (ulong)bVar6,__s,sVar2,0xffffffffffffffff);\u000a    *puVar3 = 0;\u000a  }\u000a  return pcVar5;\u000a}\u000a\u000a
p101
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV qword ptr [RSP + 0x10],RDX\nMOV R14,RSI\nMOV R12,RDI\nCALL 0x00404f70\nMOV RBP,RAX\nMOV RDI,RBP\nCALL 0x00404fd0\nMOV RBX,RBP\nSUB RBX,R12\nADD RBX,RAX\nTEST RAX,RAX\nJZ 0x00402a81\nCMP byte ptr [RBP + RAX*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00402a83\nXOR EAX,EAX\nMOVZX R13D,AL\nMOV qword ptr [RSP + 0x8],R14\nMOV RDI,R14\nCALL 0x00402b30\nMOV RBP,RAX\nMOV RDI,RBP\nCALL 0x004014e0\nMOV R15,RAX\nLEA RAX,[RBX + R13*0x1]\nLEA RDI,[R15 + RAX*0x1 + 0x1]\nCALL 0x004015f0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00402b12\nMOV RCX,-0x1\nMOV RDI,R14\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x004013e0\nMOV byte ptr [RAX],0x2f\nADD R13,RAX\nMOV RCX,qword ptr [RSP + 0x10]\nTEST RCX,RCX\nJZ 0x00402af8\nXOR EAX,EAX\nMOV RDX,qword ptr [RSP + 0x8]\nCMP byte ptr [RDX],0x2f\nMOV RDX,-0x1\nCMOVZ RAX,RDX\nADD RAX,R13\nMOV qword ptr [RCX],RAX\nMOV RCX,-0x1\nMOV RDI,R13\nMOV RSI,RBP\nMOV RDX,R15\nCALL 0x004013e0\nMOV byte ptr [RAX],0x0\nJMP 0x00402b15\nXOR R14D,R14D\nMOV RAX,R14\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p102
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n48 89 54 24 10\n49 89 f6\n49 89 fc\ne8 12 25 00 00\n48 89 c5\n48 89 ef\ne8 67 25 00 00\n48 89 eb\n4c 29 e3\n48 01 c3\n48 85 c0\n74 0a\n80 7c 05 ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 e8\n4c 89 74 24 08\n4c 89 f7\ne8 9c 00 00 00\n48 89 c5\n48 89 ef\ne8 41 ea ff ff\n49 89 c7\n4a 8d 04 2b\n49 8d 7c 07 01\ne8 40 eb ff ff\n49 89 c6\n4d 85 f6\n74 5a\n48 c7 c1 ff ff ff ff\n4c 89 f7\n4c 89 e6\n48 89 da\ne8 13 e9 ff ff\nc6 00 2f\n49 01 c5\n48 8b 4c 24 10\n48 85 c9\n74 1b\n31 c0\n48 8b 54 24 08\n80 3a 2f\n48 c7 c2 ff ff ff ff\n48 0f 44 c2\n4c 01 e8\n48 89 01\n48 c7 c1 ff ff ff ff\n4c 89 ef\n48 89 ee\n4c 89 fa\ne8 d3 e8 ff ff\nc6 00 00\neb 03\n45 31 f6\n4c 89 f0\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p103
S'.text:0000000000402a40\n.text:0000000000402a41\n.text:0000000000402a43\n.text:0000000000402a45\n.text:0000000000402a47\n.text:0000000000402a49\n.text:0000000000402a4a\n.text:0000000000402a4e\n.text:0000000000402a53\n.text:0000000000402a56\n.text:0000000000402a59\n.text:0000000000402a5e\n.text:0000000000402a61\n.text:0000000000402a64\n.text:0000000000402a69\n.text:0000000000402a6c\n.text:0000000000402a6f\n.text:0000000000402a72\n.text:0000000000402a75\n.text:0000000000402a77\n.text:0000000000402a7c\n.text:0000000000402a7f\n.text:0000000000402a81\n.text:0000000000402a83\n.text:0000000000402a87\n.text:0000000000402a8c\n.text:0000000000402a8f\n.text:0000000000402a94\n.text:0000000000402a97\n.text:0000000000402a9a\n.text:0000000000402a9f\n.text:0000000000402aa2\n.text:0000000000402aa6\n.text:0000000000402aab\n.text:0000000000402ab0\n.text:0000000000402ab3\n.text:0000000000402ab6\n.text:0000000000402ab8\n.text:0000000000402abf\n.text:0000000000402ac2\n.text:0000000000402ac5\n.text:0000000000402ac8\n.text:0000000000402acd\n.text:0000000000402ad0\n.text:0000000000402ad3\n.text:0000000000402ad8\n.text:0000000000402adb\n.text:0000000000402add\n.text:0000000000402adf\n.text:0000000000402ae4\n.text:0000000000402ae7\n.text:0000000000402aee\n.text:0000000000402af2\n.text:0000000000402af5\n.text:0000000000402af8\n.text:0000000000402aff\n.text:0000000000402b02\n.text:0000000000402b05\n.text:0000000000402b08\n.text:0000000000402b0d\n.text:0000000000402b10\n.text:0000000000402b12\n.text:0000000000402b15\n.text:0000000000402b18\n.text:0000000000402b1c\n.text:0000000000402b1d\n.text:0000000000402b1f\n.text:0000000000402b21\n.text:0000000000402b23\n.text:0000000000402b25\n.text:0000000000402b26\n'
p104
tp105
sS'quote'
p106
(S'\n__stdcall quote(char * arg)\n'
p107
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p108
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404030\n'
p109
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p110
S'.text:0000000000404040\n.text:0000000000404043\n.text:0000000000404045\n.text:0000000000404048\n'
p111
tp112
sS'emit_bug_reporting_address'
p113
(S'\n__stdcall emit_bug_reporting_address()\n'
p114
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p115
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x406475\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40648a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004016a0\nXOR EDI,EDI\nMOV ESI,0x4064a0\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40577d\nMOV ECX,0x4058e1\nXOR EAX,EAX\nCALL 0x004016a0\nXOR EDI,EDI\nMOV ESI,0x4064b4\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00608288]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401590\n'
p116
S'50\n31 ff\nbe 75 64 40 00\nba 05 00 00 00\ne8 ee ca ff ff\n48 89 c1\nbf 01 00 00 00\nba 8a 64 40 00\n31 c0\n48 89 ce\ne8 b7 cc ff ff\n31 ff\nbe a0 64 40 00\nba 05 00 00 00\ne8 c6 ca ff ff\n48 89 c6\nbf 01 00 00 00\nba 7d 57 40 00\nb9 e1 58 40 00\n31 c0\ne8 8d cc ff ff\n31 ff\nbe b4 64 40 00\nba 05 00 00 00\ne8 9c ca ff ff\n48 8b 35 5d 38 20 00\n48 89 c7\n58\ne9 5c cb ff ff\n'
p117
S'.text:00000000004049c0\n.text:00000000004049c1\n.text:00000000004049c3\n.text:00000000004049c8\n.text:00000000004049cd\n.text:00000000004049d2\n.text:00000000004049d5\n.text:00000000004049da\n.text:00000000004049df\n.text:00000000004049e1\n.text:00000000004049e4\n.text:00000000004049e9\n.text:00000000004049eb\n.text:00000000004049f0\n.text:00000000004049f5\n.text:00000000004049fa\n.text:00000000004049fd\n.text:0000000000404a02\n.text:0000000000404a07\n.text:0000000000404a0c\n.text:0000000000404a0e\n.text:0000000000404a13\n.text:0000000000404a15\n.text:0000000000404a1a\n.text:0000000000404a1f\n.text:0000000000404a24\n.text:0000000000404a2b\n.text:0000000000404a2e\n.text:0000000000404a2f\n'
p118
tp119
sS'clone_quoting_options'
p120
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p121
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p122
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401400\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60a4a0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00404ba0\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p123
S'55\n41 56\n53\n48 89 fb\ne8 f4 e7 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 a0 a4 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 75 1f 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p124
S'.text:0000000000402c00\n.text:0000000000402c01\n.text:0000000000402c03\n.text:0000000000402c04\n.text:0000000000402c07\n.text:0000000000402c0c\n.text:0000000000402c0f\n.text:0000000000402c12\n.text:0000000000402c15\n.text:0000000000402c1a\n.text:0000000000402c1e\n.text:0000000000402c23\n.text:0000000000402c26\n.text:0000000000402c2b\n.text:0000000000402c2e\n.text:0000000000402c2f\n.text:0000000000402c31\n.text:0000000000402c32\n'
p125
tp126
sS'xmalloc'
p127
(S'\n__stdcall xmalloc(size_t n)\n'
p128
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p129
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004015f0\nTEST RBX,RBX\nJZ 0x00404a73\nTEST RAX,RAX\nJZ 0x00404a75\nPOP RBX\nRET\nCALL 0x00404bf0\n'
p130
S'53\n48 89 fb\ne8 87 cb ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p131
S'.text:0000000000404a60\n.text:0000000000404a61\n.text:0000000000404a64\n.text:0000000000404a69\n.text:0000000000404a6c\n.text:0000000000404a6e\n.text:0000000000404a71\n.text:0000000000404a73\n.text:0000000000404a74\n.text:0000000000404a75\n'
p132
tp133
sS'quotearg_char_mem'
p134
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p135
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p136
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060a4d0]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060a4c0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a4b0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a4a0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00402c60\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403b50\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p137
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 58 66 20 00\n48 89 4c 24 30\n0f 10 05 3c 66 20 00\n0f 29 44 24 20\n0f 10 05 20 66 20 00\n0f 29 44 24 10\n0f 10 05 04 66 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p138
S'.text:0000000000403e60\n.text:0000000000403e62\n.text:0000000000403e64\n.text:0000000000403e65\n.text:0000000000403e69\n.text:0000000000403e6b\n.text:0000000000403e6e\n.text:0000000000403e71\n.text:0000000000403e78\n.text:0000000000403e7d\n.text:0000000000403e84\n.text:0000000000403e89\n.text:0000000000403e90\n.text:0000000000403e95\n.text:0000000000403e9c\n.text:0000000000403ea0\n.text:0000000000403ea3\n.text:0000000000403ea8\n.text:0000000000403eab\n.text:0000000000403ead\n.text:0000000000403eb2\n.text:0000000000403eb4\n.text:0000000000403eb7\n.text:0000000000403eba\n.text:0000000000403ebd\n.text:0000000000403ec2\n.text:0000000000403ec6\n.text:0000000000403ec7\n.text:0000000000403ec9\n.text:0000000000403ecb\n'
p139
tp140
sS'tac_file'
p141
(S'\n__stdcall tac_file(char * filename)\n'
p142
V\u000a_Bool tac_file(char *filename)\u000a\u000a{\u000a  bool bVar1;\u000a  _Bool _Var2;\u000a  uint __fd;\u000a  int iVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  char *pcVar6;\u000a  __off_t _Var7;\u000a  \u000a  if ((*filename == '-') && (filename[1] == 0)) {\u000a    have_read_stdin = 1;\u000a    __fd = 0;\u000a    filename = (char *)dcgettext(0,"standard input",5);\u000a    bVar1 = true;\u000a  }\u000a  else {\u000a    bVar1 = false;\u000a    __fd = open(filename,0);\u000a    if ((int)__fd < 0) {\u000a      puVar4 = (uint *)__errno_location();\u000a      __fd = *puVar4;\u000a      uVar5 = dcgettext(0,"failed to open %s for reading",5);\u000a      pcVar6 = quotearg_style((char *)0x4);\u000a      error(0,(ulong)__fd,uVar5,pcVar6);\u000a      return false;\u000a    }\u000a  }\u000a  _Var7 = lseek(__fd,0,2);\u000a  if ((_Var7 < 0) || (iVar3 = isatty(__fd), iVar3 != 0)) {\u000a    _Var2 = tac_nonseekable((char *)(ulong)__fd);\u000a  }\u000a  else {\u000a    _Var2 = tac_seekable((char *)(ulong)__fd,(off_t)filename);\u000a  }\u000a  if ((!bVar1) && (iVar3 = close(__fd), iVar3 != 0)) {\u000a    puVar4 = (uint *)__errno_location();\u000a    __fd = *puVar4;\u000a    _Var2 = false;\u000a    uVar5 = dcgettext(0,"%s: read error",5);\u000a    pcVar6 = quotearg_n_style_colon((char *)0x0);\u000a    error(0,(ulong)__fd,uVar5,pcVar6);\u000a  }\u000a  return (_Bool)(_Var2 != false);\u000a}\u000a\u000a
p143
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCMP byte ptr [R14],0x2d\nJNZ 0x00401e97\nCMP byte ptr [R14 + 0x1],0x0\nJZ 0x00401eed\nXOR EBP,EBP\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x004016d0\nMOV EBX,EAX\nTEST EBX,EBX\nJNS 0x00401f0d\nCALL 0x00401400\nMOV R15D,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x4059d6\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,R14\nCALL 0x00403e20\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R15D\nMOV RDX,RBP\nCALL 0x004016c0\nJMP 0x00401f9e\nMOV byte ptr [0x00608450],0x1\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x4059c7\nMOV EDX,0x5\nCALL 0x004014c0\nMOV R14,RAX\nMOV BPL,0x1\nXOR ESI,ESI\nMOV EDX,0x2\nMOV EDI,EBX\nCALL 0x00401530\nMOV R15,RAX\nTEST R15,R15\nJS 0x00401f2e\nMOV EDI,EBX\nCALL 0x00401470\nTEST EAX,EAX\nJZ 0x00401f3a\nMOV EDI,EBX\nMOV RSI,R14\nCALL 0x00402090\nJMP 0x00401f47\nMOV EDI,EBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004020e0\nMOV R15B,AL\nTEST BPL,BPL\nJNZ 0x00401f98\nMOV EDI,EBX\nCALL 0x00401560\nTEST EAX,EAX\nJZ 0x00401f98\nCALL 0x00401400\nMOV EBX,dword ptr [RAX]\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x4059f4\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R14\nCALL 0x00403f00\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x004016c0\nTEST R15B,R15B\nSETNZ BL\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p144
S'55\n41 57\n41 56\n53\n50\n49 89 fe\n41 80 3e 2d\n75 07\n41 80 7e 01 00\n74 56\n31 ed\n31 f6\n31 c0\n4c 89 f7\ne8 2b f8 ff ff\n89 c3\n85 db\n79 62\ne8 50 f5 ff ff\n44 8b 38\n31 db\n31 ff\nbe d6 59 40 00\nba 05 00 00 00\ne8 fa f5 ff ff\n48 89 c5\nbf 04 00 00 00\n4c 89 f6\ne8 4a 1f 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 fe\n48 89 ea\ne8 d8 f7 ff ff\ne9 b1 00 00 00\nc6 05 5c 65 20 00 01\n31 db\n31 ff\nbe c7 59 40 00\nba 05 00 00 00\ne8 b9 f5 ff ff\n49 89 c6\n40 b5 01\n31 f6\nba 02 00 00 00\n89 df\ne8 15 f6 ff ff\n49 89 c7\n4d 85 ff\n78 0b\n89 df\ne8 46 f5 ff ff\n85 c0\n74 0c\n89 df\n4c 89 f6\ne8 58 01 00 00\neb 0d\n89 df\n4c 89 f6\n4c 89 fa\ne8 99 01 00 00\n41 88 c7\n40 84 ed\n75 49\n89 df\ne8 0a f6 ff ff\n85 c0\n74 3e\ne8 a1 f4 ff ff\n8b 18\n45 31 ff\n31 ff\nbe f4 59 40 00\nba 05 00 00 00\ne8 4b f5 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n4c 89 f2\ne8 79 1f 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 28 f7 ff ff\n45 84 ff\n0f 95 c3\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p145
S'.text:0000000000401e80\n.text:0000000000401e81\n.text:0000000000401e83\n.text:0000000000401e85\n.text:0000000000401e86\n.text:0000000000401e87\n.text:0000000000401e8a\n.text:0000000000401e8e\n.text:0000000000401e90\n.text:0000000000401e95\n.text:0000000000401e97\n.text:0000000000401e99\n.text:0000000000401e9b\n.text:0000000000401e9d\n.text:0000000000401ea0\n.text:0000000000401ea5\n.text:0000000000401ea7\n.text:0000000000401ea9\n.text:0000000000401eab\n.text:0000000000401eb0\n.text:0000000000401eb3\n.text:0000000000401eb5\n.text:0000000000401eb7\n.text:0000000000401ebc\n.text:0000000000401ec1\n.text:0000000000401ec6\n.text:0000000000401ec9\n.text:0000000000401ece\n.text:0000000000401ed1\n.text:0000000000401ed6\n.text:0000000000401ed9\n.text:0000000000401edb\n.text:0000000000401edd\n.text:0000000000401ee0\n.text:0000000000401ee3\n.text:0000000000401ee8\n.text:0000000000401eed\n.text:0000000000401ef4\n.text:0000000000401ef6\n.text:0000000000401ef8\n.text:0000000000401efd\n.text:0000000000401f02\n.text:0000000000401f07\n.text:0000000000401f0a\n.text:0000000000401f0d\n.text:0000000000401f0f\n.text:0000000000401f14\n.text:0000000000401f16\n.text:0000000000401f1b\n.text:0000000000401f1e\n.text:0000000000401f21\n.text:0000000000401f23\n.text:0000000000401f25\n.text:0000000000401f2a\n.text:0000000000401f2c\n.text:0000000000401f2e\n.text:0000000000401f30\n.text:0000000000401f33\n.text:0000000000401f38\n.text:0000000000401f3a\n.text:0000000000401f3c\n.text:0000000000401f3f\n.text:0000000000401f42\n.text:0000000000401f47\n.text:0000000000401f4a\n.text:0000000000401f4d\n.text:0000000000401f4f\n.text:0000000000401f51\n.text:0000000000401f56\n.text:0000000000401f58\n.text:0000000000401f5a\n.text:0000000000401f5f\n.text:0000000000401f61\n.text:0000000000401f64\n.text:0000000000401f66\n.text:0000000000401f6b\n.text:0000000000401f70\n.text:0000000000401f75\n.text:0000000000401f78\n.text:0000000000401f7a\n.text:0000000000401f7f\n.text:0000000000401f82\n.text:0000000000401f87\n.text:0000000000401f8a\n.text:0000000000401f8c\n.text:0000000000401f8e\n.text:0000000000401f90\n.text:0000000000401f93\n.text:0000000000401f98\n.text:0000000000401f9b\n.text:0000000000401f9e\n.text:0000000000401fa0\n.text:0000000000401fa4\n.text:0000000000401fa5\n.text:0000000000401fa7\n.text:0000000000401fa9\n.text:0000000000401faa\n'
p146
tp147
sS'c_isgraph'
p148
(S'\n__stdcall c_isgraph()\n'
p149
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p150
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p151
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p152
S'.text:0000000000404e40\n.text:0000000000404e43\n.text:0000000000404e46\n.text:0000000000404e49\n'
p153
tp154
sS'frame_dummy'
p155
(S'\n__stdcall frame_dummy()\n'
p156
V\u000a/* WARNING: Removing unreachable block (ram,0x0040186a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p157
S'MOV EDI,0x607e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401860\nJMP 0x004017f0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040185b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x004017f0\n'
p158
S'bf 18 7e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p159
S'.text:0000000000401850\n.text:0000000000401855\n.text:0000000000401859\n.text:000000000040185b\n.text:0000000000401860\n.text:0000000000401865\n.text:0000000000401868\n.text:000000000040186a\n.text:000000000040186b\n.text:000000000040186e\n.text:0000000000401870\n.text:0000000000401871\n'
p160
tp161
sS'quotearg_buffer_restyled'
p162
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p163
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_00402dfc_caseD_7;\u000a  case 2:\u000a    goto switchD_00402dfc_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_00402dfc_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_00402dfc_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_00402dfc_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_00402dfc_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_00402dfc_caseD_7;\u000aswitchD_00402dfc_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_00402dfc_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_00402dfc_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_004038c0;\u000aLAB_00402fe0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_004038c9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_004038d8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_00402feb:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040302f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040302f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_004038d8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00403805;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00403710;\u000a    }\u000a    goto LAB_004038d8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040383a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_004038d8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403869;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403328;\u000a  case '\u005ca':\u000a    goto joined_r0x00403218;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00403218;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00403046_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00403218;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00403218;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00403046_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00403218:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040377e;\u000a    }\u000a    goto LAB_004038d8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_004038d8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_004038d8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_004038d8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_004038d8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_004038d8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00403046_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_004037d6;\u000a      goto joined_r0x004037c8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x004032d1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x004037c8;\u000a      goto LAB_004037d6;\u000a    }\u000a    goto LAB_004038d8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_004038d8;\u000a  }\u000a  goto joined_r0x00403710;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040383a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403869;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403869:\u000a  if (1 < uVar10) {\u000aLAB_00403346:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403402;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x004032d1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403402:\u000a        if (bVar6 != 0) goto LAB_004038d8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403328:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403346;\u000ajoined_r0x00403710:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00403710:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403737;\u000aLAB_00403770:\u000a    if (bVar22) goto LAB_00403775;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00403770;\u000aLAB_00403737:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00403775:\u000a      if (bVar6 != 0) goto LAB_004038d8;\u000aLAB_0040377e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x004037c8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_004037d6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x004037c8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00403805:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00402fe0;\u000aLAB_004038c0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_004038c9;\u000a  goto LAB_00402feb;\u000a}\u000a\u000a
p164
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004014d0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x004039a5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x405c80 + RAX*0x8]\nMOV EDI,0x4061a6\nMOV ESI,R15D\nCALL 0x00404050\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x4061a8\nMOV ESI,R15D\nCALL 0x00404050\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x00402e5d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00402e60\nNOP\nCMP R12,RSI\nJNC 0x00402e4e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00402e40\nJMP 0x00402e60\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004014e0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x00402f2c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x00402f2c\nMOV ECX,0x4061a4\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00402f26\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00402ec7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00402ef4\nTEST RSI,RSI\nJZ 0x00402ee1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x4061a8\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00402f02\nMOV ECX,0x4061a8\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x00402f2c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040397c\nMOV ECX,0x4061a4\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x004038c0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x004038c9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040302f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040302a\nCMP R11,-0x1\nJNZ 0x0040302a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004014e0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00403080\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x004032dc\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x405cd8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x004038d8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403730\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403737\nJMP 0x00403770\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401580\nTEST EAX,EAX\nSETZ AL\nJNZ 0x004030cd\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00403031\nJMP 0x004038d8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00403031\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040305b\nCMP EBX,0x2\nJNZ 0x0040305b\nTEST R13,R13\nJNZ 0x0040305b\nJMP 0x004038d8\nCMP R11,-0x1\nJZ 0x004034b3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x004034d3\nJMP 0x0040305b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004034e4\nTEST R8B,R8B\nJNZ 0x004038d8\nCMP EBX,0x2\nJNZ 0x00403188\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403188\nCMP R12,RSI\nJNC 0x00403163\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403172\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403181\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403192\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403658\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403658\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403658\nCMP RCX,RSI\nJNC 0x004031cc\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x004031db\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403066\nJMP 0x00403730\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403059\nJMP 0x0040323a\nMOV DL,0x74\nJMP 0x00403222\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403059\nJMP 0x0040323a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403059\nJMP 0x0040323a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x004038d8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403059\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040377e\nJMP 0x004038d8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00403059\nTEST R8B,R8B\nJNZ 0x004038d8\nCMP R12,RSI\nJNC 0x0040326a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403279\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403288\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00403059\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040366b\nCMP EBX,0x2\nJNZ 0x00403059\nTEST R8B,R8B\nJZ 0x00403059\nJMP 0x004038d8\nCMP EBX,0x2\nJNZ 0x00403504\nTEST R8B,R8B\nJNZ 0x004038d8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x004037d6\nJMP 0x004037f9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403525\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401770\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403718\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00403718\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403402\nJMP 0x004033d0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x004033b9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x004033b6\nCMP R12,RSI\nJNC 0x0040339b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x004033aa\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x004033f0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x004033f0\nTEST BPL,0x1\nJZ 0x00403493\nCMP R12,RSI\nJNC 0x004033e4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403493\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x004033d0\nTEST R8B,R8B\nJNZ 0x004038d8\nCMP EBX,0x2\nJNZ 0x0040344a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040344a\nCMP R12,RSI\nJNC 0x00403422\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403431\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403440\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403454\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040346b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403485\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403380\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x004037d6\nJMP 0x004037f9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040305b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040305b\nJMP 0x004038d8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00403805\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403066\nJMP 0x00403730\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00403222\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x004037d6\nJMP 0x004037f9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403547\nMOV RDI,R10\nCALL 0x004014e0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401500\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040381f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403817\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403826\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040360e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403606\nBT RDI,RDX\nJC 0x00403972\nINC RCX\nCMP RCX,R14\nJC 0x004035f0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401760\nTEST EAX,EAX\nJNZ 0x00403623\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401750\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403565\nJMP 0x00403869\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403066\nJMP 0x00403730\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00403059\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00403059\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00403059\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040305b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x004038a2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x004038d8\nCMP R12,RSI\nJNC 0x004036ce\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x004036e1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004036f0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x004036ff\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403066\nJMP 0x00403730\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403066\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00403770\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00403775\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x004037d0\nJMP 0x00403775\nTEST BPL,BPL\nJZ 0x004037d0\nTEST R8B,R8B\nJNZ 0x004038d8\nCMP EBX,0x2\nJNZ 0x004037b8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004037b8\nCMP R12,RSI\nJNC 0x00403793\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004037a2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004037b1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004037c2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00403802\nJMP 0x004037fe\nTEST DIL,0x1\nJZ 0x004037f9\nAND AL,0x1\nJNZ 0x004037f9\nCMP R12,RSI\nJNC 0x004037e4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004037f3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00403802\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x004038c0\nJMP 0x00402fe0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403864\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040385c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00403898\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040383a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403869\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403328\nJMP 0x00403346\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403869\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403066\nJMP 0x00403730\nCMP R13,R11\nJNZ 0x00402feb\nTEST R8B,R8B\nJZ 0x00403932\nCMP EBX,0x2\nJNZ 0x00403932\nTEST R12,R12\nJNZ 0x00403932\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00402d70\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00403966\nTEST R8B,R8B\nJNZ 0x00403966\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00403966\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00403959\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00403950\nCMP R12,RSI\nJNC 0x0040391d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040391d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x004038d8\nTEST RSI,RSI\nJZ 0x00403989\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x4061a4\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x00402f2c\nCALL 0x004013f0\n'
p165
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 32 e7 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 80 5c 40 00\nbf a6 61 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf a8 61 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 73 e6 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 a4 61 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 a8 61 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 a8 61 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 a4 61 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 d3 e4 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd d8 5c 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 e7 e4 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 77 e4 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 a1 df ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 73 df ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 49 e1 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 12 e1 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 a4 61 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 46 da ff ff\n'
p166
S'.text:0000000000402d70\n.text:0000000000402d71\n.text:0000000000402d73\n.text:0000000000402d75\n.text:0000000000402d77\n.text:0000000000402d79\n.text:0000000000402d7a\n.text:0000000000402d81\n.text:0000000000402d84\n.text:0000000000402d87\n.text:0000000000402d8a\n.text:0000000000402d8f\n.text:0000000000402d94\n.text:0000000000402d99\n.text:0000000000402d9e\n.text:0000000000402da6\n.text:0000000000402daa\n.text:0000000000402db0\n.text:0000000000402db8\n.text:0000000000402dbd\n.text:0000000000402dc5\n.text:0000000000402dca\n.text:0000000000402dce\n.text:0000000000402dd0\n.text:0000000000402dd3\n.text:0000000000402dd6\n.text:0000000000402dd9\n.text:0000000000402dde\n.text:0000000000402de1\n.text:0000000000402de4\n.text:0000000000402de7\n.text:0000000000402dea\n.text:0000000000402dec\n.text:0000000000402def\n.text:0000000000402df4\n.text:0000000000402df7\n.text:0000000000402dfc\n.text:0000000000402e03\n.text:0000000000402e08\n.text:0000000000402e0b\n.text:0000000000402e10\n.text:0000000000402e15\n.text:0000000000402e1a\n.text:0000000000402e1d\n.text:0000000000402e22\n.text:0000000000402e27\n.text:0000000000402e2c\n.text:0000000000402e2e\n.text:0000000000402e30\n.text:0000000000402e35\n.text:0000000000402e37\n.text:0000000000402e3a\n.text:0000000000402e3c\n.text:0000000000402e3e\n.text:0000000000402e40\n.text:0000000000402e43\n.text:0000000000402e45\n.text:0000000000402e4a\n.text:0000000000402e4e\n.text:0000000000402e54\n.text:0000000000402e57\n.text:0000000000402e59\n.text:0000000000402e5b\n.text:0000000000402e5d\n.text:0000000000402e60\n.text:0000000000402e65\n.text:0000000000402e68\n.text:0000000000402e6d\n.text:0000000000402e72\n.text:0000000000402e75\n.text:0000000000402e78\n.text:0000000000402e7b\n.text:0000000000402e7e\n.text:0000000000402e83\n.text:0000000000402e86\n.text:0000000000402e89\n.text:0000000000402e8e\n.text:0000000000402e91\n.text:0000000000402e93\n.text:0000000000402e96\n.text:0000000000402e98\n.text:0000000000402e9a\n.text:0000000000402e9d\n.text:0000000000402ea2\n.text:0000000000402ea7\n.text:0000000000402eac\n.text:0000000000402eaf\n.text:0000000000402eb5\n.text:0000000000402eb7\n.text:0000000000402eba\n.text:0000000000402ebd\n.text:0000000000402ec0\n.text:0000000000402ec2\n.text:0000000000402ec4\n.text:0000000000402ec7\n.text:0000000000402eca\n.text:0000000000402ecf\n.text:0000000000402ed2\n.text:0000000000402ed4\n.text:0000000000402ed7\n.text:0000000000402ed9\n.text:0000000000402ede\n.text:0000000000402ee1\n.text:0000000000402ee6\n.text:0000000000402eec\n.text:0000000000402ef2\n.text:0000000000402ef4\n.text:0000000000402ef9\n.text:0000000000402eff\n.text:0000000000402f02\n.text:0000000000402f05\n.text:0000000000402f08\n.text:0000000000402f0a\n.text:0000000000402f0f\n.text:0000000000402f12\n.text:0000000000402f18\n.text:0000000000402f1d\n.text:0000000000402f23\n.text:0000000000402f26\n.text:0000000000402f29\n.text:0000000000402f2c\n.text:0000000000402f34\n.text:0000000000402f36\n.text:0000000000402f38\n.text:0000000000402f3b\n.text:0000000000402f3f\n.text:0000000000402f41\n.text:0000000000402f44\n.text:0000000000402f48\n.text:0000000000402f4a\n.text:0000000000402f4d\n.text:0000000000402f50\n.text:0000000000402f53\n.text:0000000000402f55\n.text:0000000000402f59\n.text:0000000000402f5b\n.text:0000000000402f5f\n.text:0000000000402f62\n.text:0000000000402f65\n.text:0000000000402f68\n.text:0000000000402f6a\n.text:0000000000402f6e\n.text:0000000000402f77\n.text:0000000000402f7a\n.text:0000000000402f7c\n.text:0000000000402f80\n.text:0000000000402f82\n.text:0000000000402f86\n.text:0000000000402f88\n.text:0000000000402f8b\n.text:0000000000402f8f\n.text:0000000000402f91\n.text:0000000000402f94\n.text:0000000000402f98\n.text:0000000000402f9d\n.text:0000000000402fa0\n.text:0000000000402fa4\n.text:0000000000402fac\n.text:0000000000402faf\n.text:0000000000402fb2\n.text:0000000000402fb4\n.text:0000000000402fb8\n.text:0000000000402fbb\n.text:0000000000402fbd\n.text:0000000000402fc2\n.text:0000000000402fc6\n.text:0000000000402fcb\n.text:0000000000402fd0\n.text:0000000000402fd4\n.text:0000000000402fda\n.text:0000000000402fe0\n.text:0000000000402fe5\n.text:0000000000402feb\n.text:0000000000402ff0\n.text:0000000000402ff2\n.text:0000000000402ff7\n.text:0000000000402ffb\n.text:0000000000402ffd\n.text:0000000000403001\n.text:0000000000403003\n.text:0000000000403005\n.text:0000000000403008\n.text:000000000040300d\n.text:000000000040300f\n.text:0000000000403014\n.text:0000000000403019\n.text:000000000040301d\n.text:0000000000403022\n.text:0000000000403027\n.text:000000000040302a\n.text:000000000040302d\n.text:000000000040302f\n.text:0000000000403031\n.text:0000000000403036\n.text:000000000040303a\n.text:0000000000403040\n.text:0000000000403042\n.text:0000000000403044\n.text:0000000000403046\n.text:000000000040304e\n.text:0000000000403053\n.text:0000000000403059\n.text:000000000040305b\n.text:0000000000403060\n.text:0000000000403066\n.text:000000000040306f\n.text:0000000000403075\n.text:0000000000403080\n.text:0000000000403082\n.text:0000000000403085\n.text:0000000000403089\n.text:0000000000403091\n.text:0000000000403094\n.text:0000000000403099\n.text:000000000040309b\n.text:000000000040309e\n.text:00000000004030a0\n.text:00000000004030a5\n.text:00000000004030a8\n.text:00000000004030ad\n.text:00000000004030b0\n.text:00000000004030b5\n.text:00000000004030b9\n.text:00000000004030be\n.text:00000000004030c0\n.text:00000000004030c2\n.text:00000000004030c8\n.text:00000000004030cd\n.text:00000000004030d2\n.text:00000000004030d5\n.text:00000000004030da\n.text:00000000004030de\n.text:00000000004030e3\n.text:00000000004030e8\n.text:00000000004030ea\n.text:00000000004030ec\n.text:00000000004030f1\n.text:00000000004030f3\n.text:00000000004030f6\n.text:00000000004030fc\n.text:00000000004030ff\n.text:0000000000403105\n.text:0000000000403108\n.text:000000000040310e\n.text:0000000000403113\n.text:0000000000403117\n.text:000000000040311d\n.text:0000000000403120\n.text:0000000000403123\n.text:0000000000403127\n.text:000000000040312a\n.text:000000000040312c\n.text:000000000040312f\n.text:0000000000403135\n.text:000000000040313a\n.text:000000000040313f\n.text:0000000000403145\n.text:0000000000403148\n.text:000000000040314e\n.text:0000000000403151\n.text:0000000000403153\n.text:0000000000403155\n.text:0000000000403157\n.text:0000000000403159\n.text:000000000040315c\n.text:000000000040315e\n.text:0000000000403163\n.text:0000000000403168\n.text:000000000040316b\n.text:000000000040316d\n.text:0000000000403172\n.text:0000000000403177\n.text:000000000040317a\n.text:000000000040317c\n.text:0000000000403181\n.text:0000000000403185\n.text:0000000000403188\n.text:000000000040318b\n.text:000000000040318d\n.text:0000000000403192\n.text:0000000000403197\n.text:0000000000403199\n.text:000000000040319c\n.text:000000000040319f\n.text:00000000004031a5\n.text:00000000004031a9\n.text:00000000004031ac\n.text:00000000004031b2\n.text:00000000004031b6\n.text:00000000004031b9\n.text:00000000004031bc\n.text:00000000004031c2\n.text:00000000004031c5\n.text:00000000004031c7\n.text:00000000004031cc\n.text:00000000004031d1\n.text:00000000004031d4\n.text:00000000004031d6\n.text:00000000004031db\n.text:00000000004031df\n.text:00000000004031e4\n.text:00000000004031ea\n.text:00000000004031ef\n.text:00000000004031f1\n.text:00000000004031f6\n.text:00000000004031fc\n.text:00000000004031fe\n.text:0000000000403200\n.text:0000000000403202\n.text:0000000000403204\n.text:0000000000403209\n.text:000000000040320f\n.text:0000000000403211\n.text:0000000000403213\n.text:0000000000403218\n.text:000000000040321e\n.text:0000000000403220\n.text:0000000000403222\n.text:0000000000403227\n.text:0000000000403229\n.text:000000000040322f\n.text:0000000000403234\n.text:000000000040323a\n.text:000000000040323d\n.text:0000000000403240\n.text:0000000000403246\n.text:000000000040324b\n.text:000000000040324e\n.text:0000000000403251\n.text:0000000000403257\n.text:000000000040325a\n.text:0000000000403260\n.text:0000000000403263\n.text:0000000000403265\n.text:000000000040326a\n.text:000000000040326f\n.text:0000000000403272\n.text:0000000000403274\n.text:0000000000403279\n.text:000000000040327e\n.text:0000000000403281\n.text:0000000000403283\n.text:0000000000403288\n.text:000000000040328c\n.text:000000000040328e\n.text:0000000000403293\n.text:0000000000403296\n.text:0000000000403299\n.text:000000000040329f\n.text:00000000004032a2\n.text:00000000004032a8\n.text:00000000004032ab\n.text:00000000004032b1\n.text:00000000004032b6\n.text:00000000004032b9\n.text:00000000004032bf\n.text:00000000004032c2\n.text:00000000004032c8\n.text:00000000004032cb\n.text:00000000004032cd\n.text:00000000004032d1\n.text:00000000004032d7\n.text:00000000004032dc\n.text:00000000004032e0\n.text:00000000004032e9\n.text:00000000004032ef\n.text:00000000004032f4\n.text:00000000004032f9\n.text:00000000004032fe\n.text:0000000000403301\n.text:0000000000403306\n.text:0000000000403309\n.text:000000000040330c\n.text:0000000000403311\n.text:0000000000403316\n.text:000000000040331a\n.text:000000000040331f\n.text:0000000000403324\n.text:0000000000403328\n.text:000000000040332a\n.text:000000000040332f\n.text:0000000000403335\n.text:0000000000403338\n.text:000000000040333a\n.text:000000000040333d\n.text:0000000000403340\n.text:0000000000403346\n.text:000000000040334b\n.text:000000000040334e\n.text:0000000000403351\n.text:0000000000403354\n.text:0000000000403357\n.text:0000000000403359\n.text:000000000040335d\n.text:000000000040335f\n.text:0000000000403364\n.text:0000000000403369\n.text:000000000040336f\n.text:0000000000403380\n.text:0000000000403385\n.text:0000000000403387\n.text:000000000040338a\n.text:000000000040338c\n.text:000000000040338f\n.text:0000000000403391\n.text:0000000000403394\n.text:0000000000403396\n.text:000000000040339b\n.text:00000000004033a0\n.text:00000000004033a3\n.text:00000000004033a5\n.text:00000000004033aa\n.text:00000000004033ae\n.text:00000000004033b6\n.text:00000000004033b9\n.text:00000000004033bc\n.text:00000000004033be\n.text:00000000004033c2\n.text:00000000004033d0\n.text:00000000004033d4\n.text:00000000004033da\n.text:00000000004033dd\n.text:00000000004033df\n.text:00000000004033e4\n.text:00000000004033e7\n.text:00000000004033e9\n.text:00000000004033f0\n.text:00000000004033f3\n.text:00000000004033f8\n.text:00000000004033fb\n.text:0000000000403400\n.text:0000000000403402\n.text:0000000000403405\n.text:000000000040340b\n.text:000000000040340e\n.text:0000000000403410\n.text:0000000000403414\n.text:0000000000403416\n.text:0000000000403418\n.text:000000000040341b\n.text:000000000040341d\n.text:0000000000403422\n.text:0000000000403427\n.text:000000000040342a\n.text:000000000040342c\n.text:0000000000403431\n.text:0000000000403436\n.text:0000000000403439\n.text:000000000040343b\n.text:0000000000403440\n.text:0000000000403444\n.text:0000000000403446\n.text:000000000040344a\n.text:000000000040344d\n.text:000000000040344f\n.text:0000000000403454\n.text:0000000000403459\n.text:000000000040345c\n.text:000000000040345e\n.text:0000000000403461\n.text:0000000000403464\n.text:0000000000403467\n.text:000000000040346b\n.text:0000000000403470\n.text:0000000000403473\n.text:0000000000403475\n.text:0000000000403478\n.text:000000000040347b\n.text:000000000040347e\n.text:0000000000403481\n.text:0000000000403485\n.text:0000000000403489\n.text:000000000040348d\n.text:0000000000403491\n.text:0000000000403493\n.text:0000000000403497\n.text:000000000040349a\n.text:00000000004034a0\n.text:00000000004034a4\n.text:00000000004034a8\n.text:00000000004034ae\n.text:00000000004034b3\n.text:00000000004034b6\n.text:00000000004034b9\n.text:00000000004034be\n.text:00000000004034c1\n.text:00000000004034c3\n.text:00000000004034c6\n.text:00000000004034cd\n.text:00000000004034d3\n.text:00000000004034d5\n.text:00000000004034d9\n.text:00000000004034df\n.text:00000000004034e4\n.text:00000000004034e9\n.text:00000000004034ef\n.text:00000000004034f2\n.text:00000000004034f4\n.text:00000000004034f9\n.text:00000000004034ff\n.text:0000000000403504\n.text:0000000000403506\n.text:000000000040350b\n.text:0000000000403511\n.text:0000000000403513\n.text:0000000000403516\n.text:000000000040351a\n.text:0000000000403520\n.text:0000000000403525\n.text:0000000000403531\n.text:0000000000403535\n.text:0000000000403537\n.text:000000000040353a\n.text:000000000040353f\n.text:0000000000403544\n.text:0000000000403547\n.text:000000000040354b\n.text:0000000000403550\n.text:0000000000403552\n.text:0000000000403556\n.text:0000000000403558\n.text:0000000000403560\n.text:0000000000403565\n.text:000000000040356a\n.text:000000000040356e\n.text:0000000000403572\n.text:000000000040357a\n.text:000000000040357d\n.text:0000000000403582\n.text:0000000000403585\n.text:0000000000403588\n.text:000000000040358d\n.text:0000000000403590\n.text:0000000000403593\n.text:0000000000403599\n.text:000000000040359d\n.text:00000000004035a7\n.text:00000000004035ad\n.text:00000000004035b1\n.text:00000000004035b6\n.text:00000000004035bc\n.text:00000000004035c0\n.text:00000000004035c3\n.text:00000000004035c7\n.text:00000000004035c9\n.text:00000000004035ce\n.text:00000000004035d3\n.text:00000000004035d7\n.text:00000000004035d9\n.text:00000000004035de\n.text:00000000004035e3\n.text:00000000004035e7\n.text:00000000004035ec\n.text:00000000004035f0\n.text:00000000004035f4\n.text:00000000004035f7\n.text:00000000004035fa\n.text:00000000004035fc\n.text:0000000000403600\n.text:0000000000403606\n.text:0000000000403609\n.text:000000000040360c\n.text:000000000040360e\n.text:0000000000403612\n.text:0000000000403617\n.text:0000000000403619\n.text:000000000040361b\n.text:0000000000403623\n.text:0000000000403628\n.text:000000000040362b\n.text:0000000000403633\n.text:0000000000403636\n.text:0000000000403639\n.text:000000000040363e\n.text:0000000000403641\n.text:0000000000403643\n.text:0000000000403648\n.text:000000000040364d\n.text:0000000000403653\n.text:0000000000403658\n.text:000000000040365b\n.text:0000000000403660\n.text:0000000000403666\n.text:000000000040366b\n.text:0000000000403670\n.text:0000000000403676\n.text:000000000040367a\n.text:000000000040367d\n.text:0000000000403683\n.text:0000000000403689\n.text:000000000040368f\n.text:0000000000403694\n.text:0000000000403696\n.text:0000000000403699\n.text:000000000040369f\n.text:00000000004036a3\n.text:00000000004036a5\n.text:00000000004036af\n.text:00000000004036b3\n.text:00000000004036b9\n.text:00000000004036bc\n.text:00000000004036be\n.text:00000000004036c4\n.text:00000000004036c7\n.text:00000000004036c9\n.text:00000000004036ce\n.text:00000000004036d3\n.text:00000000004036d6\n.text:00000000004036da\n.text:00000000004036dc\n.text:00000000004036e1\n.text:00000000004036e6\n.text:00000000004036e9\n.text:00000000004036eb\n.text:00000000004036f0\n.text:00000000004036f5\n.text:00000000004036f8\n.text:00000000004036fa\n.text:00000000004036ff\n.text:0000000000403703\n.text:0000000000403705\n.text:0000000000403708\n.text:000000000040370b\n.text:0000000000403710\n.text:0000000000403716\n.text:0000000000403718\n.text:000000000040371d\n.text:0000000000403722\n.text:0000000000403728\n.text:0000000000403730\n.text:0000000000403735\n.text:0000000000403737\n.text:000000000040373c\n.text:000000000040373f\n.text:0000000000403741\n.text:0000000000403744\n.text:0000000000403746\n.text:0000000000403749\n.text:000000000040374c\n.text:000000000040374f\n.text:0000000000403751\n.text:0000000000403759\n.text:000000000040375c\n.text:000000000040375e\n.text:0000000000403760\n.text:0000000000403770\n.text:0000000000403773\n.text:0000000000403775\n.text:0000000000403778\n.text:000000000040377e\n.text:0000000000403781\n.text:0000000000403783\n.text:0000000000403785\n.text:0000000000403787\n.text:0000000000403789\n.text:000000000040378c\n.text:000000000040378e\n.text:0000000000403793\n.text:0000000000403798\n.text:000000000040379b\n.text:000000000040379d\n.text:00000000004037a2\n.text:00000000004037a7\n.text:00000000004037aa\n.text:00000000004037ac\n.text:00000000004037b1\n.text:00000000004037b5\n.text:00000000004037b8\n.text:00000000004037bb\n.text:00000000004037bd\n.text:00000000004037c2\n.text:00000000004037c5\n.text:00000000004037c8\n.text:00000000004037ca\n.text:00000000004037d0\n.text:00000000004037d4\n.text:00000000004037d6\n.text:00000000004037d8\n.text:00000000004037da\n.text:00000000004037dd\n.text:00000000004037df\n.text:00000000004037e4\n.text:00000000004037e9\n.text:00000000004037ec\n.text:00000000004037ee\n.text:00000000004037f3\n.text:00000000004037f7\n.text:00000000004037f9\n.text:00000000004037fc\n.text:00000000004037fe\n.text:0000000000403802\n.text:0000000000403805\n.text:0000000000403808\n.text:000000000040380c\n.text:0000000000403812\n.text:0000000000403817\n.text:000000000040381f\n.text:0000000000403824\n.text:0000000000403826\n.text:000000000040382e\n.text:0000000000403833\n.text:0000000000403835\n.text:000000000040383a\n.text:000000000040383f\n.text:0000000000403843\n.text:0000000000403845\n.text:000000000040384a\n.text:000000000040384d\n.text:0000000000403850\n.text:0000000000403852\n.text:000000000040385a\n.text:000000000040385c\n.text:0000000000403864\n.text:0000000000403869\n.text:000000000040386d\n.text:0000000000403872\n.text:0000000000403877\n.text:000000000040387b\n.text:0000000000403880\n.text:0000000000403885\n.text:0000000000403889\n.text:000000000040388d\n.text:0000000000403893\n.text:0000000000403898\n.text:00000000004038a0\n.text:00000000004038a2\n.text:00000000004038a4\n.text:00000000004038a8\n.text:00000000004038ad\n.text:00000000004038b3\n.text:00000000004038c0\n.text:00000000004038c3\n.text:00000000004038c9\n.text:00000000004038cc\n.text:00000000004038ce\n.text:00000000004038d1\n.text:00000000004038d3\n.text:00000000004038d6\n.text:00000000004038d8\n.text:00000000004038e0\n.text:00000000004038e6\n.text:00000000004038ea\n.text:00000000004038ed\n.text:00000000004038f1\n.text:00000000004038f6\n.text:00000000004038fa\n.text:00000000004038fe\n.text:0000000000403901\n.text:0000000000403904\n.text:0000000000403907\n.text:000000000040390b\n.text:000000000040390f\n.text:0000000000403911\n.text:0000000000403916\n.text:000000000040391a\n.text:000000000040391d\n.text:0000000000403920\n.text:0000000000403927\n.text:0000000000403928\n.text:000000000040392a\n.text:000000000040392c\n.text:000000000040392e\n.text:0000000000403930\n.text:0000000000403931\n.text:0000000000403932\n.text:000000000040393a\n.text:000000000040393d\n.text:000000000040393f\n.text:0000000000403942\n.text:0000000000403944\n.text:0000000000403946\n.text:0000000000403948\n.text:000000000040394a\n.text:000000000040394d\n.text:0000000000403950\n.text:0000000000403953\n.text:0000000000403955\n.text:0000000000403959\n.text:000000000040395c\n.text:000000000040395f\n.text:0000000000403962\n.text:0000000000403964\n.text:0000000000403966\n.text:0000000000403969\n.text:000000000040396b\n.text:0000000000403970\n.text:0000000000403972\n.text:0000000000403977\n.text:000000000040397c\n.text:000000000040397f\n.text:0000000000403981\n.text:0000000000403986\n.text:0000000000403989\n.text:000000000040398e\n.text:0000000000403991\n.text:0000000000403997\n.text:000000000040399d\n.text:00000000004039a0\n.text:00000000004039a5\n'
p167
tp168
sS'set_quoting_style'
p169
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p170
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p171
S'TEST RDI,RDI\nMOV EAX,0x60a4a0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p172
S'48 85 ff\nb8 a0 a4 60 00\n48 0f 45 c7\n89 30\nc3\n'
p173
S'.text:0000000000402c50\n.text:0000000000402c53\n.text:0000000000402c58\n.text:0000000000402c5c\n.text:0000000000402c5e\n'
p174
tp175
sS'quotearg_n_style_colon'
p176
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p177
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p178
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00403d80\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00402c60\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00403b50\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p179
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p180
S'.text:0000000000403f00\n.text:0000000000403f01\n.text:0000000000403f03\n.text:0000000000403f04\n.text:0000000000403f08\n.text:0000000000403f0b\n.text:0000000000403f0d\n.text:0000000000403f12\n.text:0000000000403f15\n.text:0000000000403f1a\n.text:0000000000403f1f\n.text:0000000000403f24\n.text:0000000000403f27\n.text:0000000000403f2c\n.text:0000000000403f33\n.text:0000000000403f35\n.text:0000000000403f38\n.text:0000000000403f3b\n.text:0000000000403f40\n.text:0000000000403f44\n.text:0000000000403f45\n.text:0000000000403f47\n.text:0000000000403f48\n'
p181
tp182
sS'textdomain'
p183
(S'\n__stdcall textdomain()\n'
p184
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00608080)();\u000a  return;\u000a}\u000a\u000a
p185
S'JMP qword ptr [0x00608080]\n'
p186
S'ff 25 ea 6b 20 00\n'
p187
S'.plt:0000000000401490\n'
p188
tp189
sS'xmemdup'
p190
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p191
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p192
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00404a60\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004015d0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p193
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 0c ca ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p194
S'.text:0000000000404ba0\n.text:0000000000404ba2\n.text:0000000000404ba4\n.text:0000000000404ba5\n.text:0000000000404ba8\n.text:0000000000404bab\n.text:0000000000404bae\n.text:0000000000404bb3\n.text:0000000000404bb6\n.text:0000000000404bb9\n.text:0000000000404bbc\n.text:0000000000404bbf\n.text:0000000000404bc4\n.text:0000000000404bc7\n.text:0000000000404bc8\n.text:0000000000404bca\n.text:0000000000404bcc\n'
p195
tp196
sS'FUN_004013b0'
p197
(S'\n__stdcall FUN_004013b0()\n'
p198
V\u000avoid FUN_004013b0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00608010)();\u000a  return;\u000a}\u000a\u000a
p199
S'PUSH qword ptr [0x00608008]\nJMP qword ptr [0x00608010]\n'
p200
S'ff 35 52 6c 20 00\nff 25 54 6c 20 00\n'
p201
S'.plt:00000000004013b0\n.plt:00000000004013b6\n'
p202
tp203
sS'get_quoting_style'
p204
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p205
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p206
S'TEST RDI,RDI\nMOV EAX,0x60a4a0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p207
S'48 85 ff\nb8 a0 a4 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p208
S'.text:0000000000402c40\n.text:0000000000402c43\n.text:0000000000402c48\n.text:0000000000402c4c\n.text:0000000000402c4e\n'
p209
tp210
sS'ferror_unlocked'
p211
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_00608108)();\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x00608108]\n'
p214
S'ff 25 62 6b 20 00\n'
p215
S'.plt:00000000004015a0\n'
p216
tp217
sS'exit'
p218
(S'\n__stdcall exit(int __status)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006081b8)();\u000a  return;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x006081b8]\n'
p221
S'ff 25 b2 6a 20 00\n'
p222
S'.plt:0000000000401700\n'
p223
tp224
sS'quote_mem'
p225
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p226
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p227
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404010\n'
p228
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p229
S'.text:0000000000404020\n.text:0000000000404023\n.text:0000000000404026\n.text:0000000000404028\n.text:000000000040402b\n.text:000000000040402e\n'
p230
tp231
sS'locale_charset'
p232
(S'\n__stdcall locale_charset()\n'
p233
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0040507d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0040507d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p234
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401610\nTEST RAX,RAX\nMOV R14D,0x4062f9\nCMOVNZ R14,RAX\nCALL 0x00405090\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00405055\nJMP 0x0040507d\nMOV RDI,RBX\nCALL 0x004014e0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004014e0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0040507d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004015c0\nTEST EAX,EAX\nJZ 0x00405070\nCMP BPL,0x2a\nJNZ 0x00405030\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00405030\nMOV RDI,RBX\nCALL 0x004014e0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x406948\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p235
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 02 c6 ff ff\n48 85 c0\n41 be f9 62 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 a8 c4 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 9a c4 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 60 c5 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 68 c4 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 48 69 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p236
S'.text:0000000000405000\n.text:0000000000405001\n.text:0000000000405003\n.text:0000000000405004\n.text:0000000000405009\n.text:000000000040500e\n.text:0000000000405011\n.text:0000000000405017\n.text:000000000040501b\n.text:0000000000405020\n.text:0000000000405023\n.text:0000000000405026\n.text:0000000000405029\n.text:000000000040502b\n.text:0000000000405030\n.text:0000000000405033\n.text:0000000000405038\n.text:000000000040503c\n.text:0000000000405041\n.text:0000000000405046\n.text:000000000040504b\n.text:0000000000405050\n.text:0000000000405053\n.text:0000000000405055\n.text:0000000000405058\n.text:000000000040505b\n.text:0000000000405060\n.text:0000000000405062\n.text:0000000000405064\n.text:0000000000405068\n.text:000000000040506a\n.text:000000000040506e\n.text:0000000000405070\n.text:0000000000405073\n.text:0000000000405078\n.text:000000000040507d\n.text:0000000000405081\n.text:0000000000405086\n.text:000000000040508a\n.text:000000000040508b\n.text:000000000040508d\n.text:000000000040508e\n'
p237
tp238
sS'set_program_name'
p239
(S'\n__stdcall set_program_name(char * argv0)\n'
p240
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p241
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402bd1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401510\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00402bbb\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x405c74\nMOV EDX,0x7\nCALL 0x00401420\nTEST EAX,EAX\nJNZ 0x00402bbb\nMOV ESI,0x405c7c\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401420\nTEST EAX,EAX\nJNZ 0x00402bb8\nADD R14,0x3\nMOV qword ptr [0x00608280],R14\nMOV RBX,R14\nMOV qword ptr [0x0060a498],RBX\nMOV qword ptr [0x006082a0],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x006082c0]\nMOV EDI,0x405c3c\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401710\nCALL 0x004013f0\n'
p242
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 a7 e9 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 74 5c 40 00\nba 07 00 00 00\ne8 8d e8 ff ff\n85 c0\n75 24\nbe 7c 5c 40 00\nba 03 00 00 00\n4c 89 f7\ne8 77 e8 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 c8 56 20 00\n4c 89 f3\n48 89 1d d6 78 20 00\n48 89 1d d7 56 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d e8 56 20 00\nbf 3c 5c 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 24 eb ff ff\ne8 ff e7 ff ff\n'
p243
S'.text:0000000000402b50\n.text:0000000000402b52\n.text:0000000000402b53\n.text:0000000000402b54\n.text:0000000000402b57\n.text:0000000000402b5a\n.text:0000000000402b5c\n.text:0000000000402b61\n.text:0000000000402b64\n.text:0000000000402b69\n.text:0000000000402b6c\n.text:0000000000402b70\n.text:0000000000402b74\n.text:0000000000402b77\n.text:0000000000402b7a\n.text:0000000000402b7e\n.text:0000000000402b80\n.text:0000000000402b84\n.text:0000000000402b89\n.text:0000000000402b8e\n.text:0000000000402b93\n.text:0000000000402b95\n.text:0000000000402b97\n.text:0000000000402b9c\n.text:0000000000402ba1\n.text:0000000000402ba4\n.text:0000000000402ba9\n.text:0000000000402bab\n.text:0000000000402bad\n.text:0000000000402bb1\n.text:0000000000402bb8\n.text:0000000000402bbb\n.text:0000000000402bc2\n.text:0000000000402bc9\n.text:0000000000402bcd\n.text:0000000000402bce\n.text:0000000000402bd0\n.text:0000000000402bd1\n.text:0000000000402bd8\n.text:0000000000402bdd\n.text:0000000000402be2\n.text:0000000000402be7\n.text:0000000000402bec\n'
p244
tp245
sS'fileno'
p246
(S'\n__stdcall fileno(FILE * __stream)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00608128)();\u000a  return iVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x00608128]\n'
p249
S'ff 25 42 6b 20 00\n'
p250
S'.plt:00000000004015e0\n'
p251
tp252
sS'quotearg_buffer'
p253
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p254
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p255
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60a4a0\nCMOVNZ RBP,R8\nCALL 0x00401400\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00402d70\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p256
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd a0 a4 60 00\n49 0f 45 e8\ne8 e8 e6 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p257
S'.text:0000000000402cf0\n.text:0000000000402cf1\n.text:0000000000402cf3\n.text:0000000000402cf5\n.text:0000000000402cf7\n.text:0000000000402cf9\n.text:0000000000402cfa\n.text:0000000000402cfb\n.text:0000000000402cfe\n.text:0000000000402d01\n.text:0000000000402d04\n.text:0000000000402d07\n.text:0000000000402d0a\n.text:0000000000402d0f\n.text:0000000000402d13\n.text:0000000000402d18\n.text:0000000000402d1b\n.text:0000000000402d1d\n.text:0000000000402d21\n.text:0000000000402d25\n.text:0000000000402d29\n.text:0000000000402d2d\n.text:0000000000402d30\n.text:0000000000402d33\n.text:0000000000402d36\n.text:0000000000402d39\n.text:0000000000402d3c\n.text:0000000000402d3f\n.text:0000000000402d43\n.text:0000000000402d44\n.text:0000000000402d49\n.text:0000000000402d4d\n.text:0000000000402d51\n.text:0000000000402d53\n.text:0000000000402d57\n.text:0000000000402d58\n.text:0000000000402d5a\n.text:0000000000402d5c\n.text:0000000000402d5e\n.text:0000000000402d60\n.text:0000000000402d61\n'
p258
tp259
sS'quotearg_colon'
p260
(S'\n__stdcall quotearg_colon(char * arg)\n'
p261
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p262
S'MOV ESI,0x3a\nJMP 0x00403ed0\n'
p263
S'be 3a 00 00 00\neb e9\n'
p264
S'.text:0000000000403ee0\n.text:0000000000403ee5\n'
p265
tp266
sS'mbrtowc'
p267
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006080b8)();\u000a  return sVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x006080b8]\n'
p270
S'ff 25 b2 6b 20 00\n'
p271
S'.plt:0000000000401500\n'
p272
tp273
sS'rpl_fflush'
p274
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p275
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00608138)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p276
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00404d0d\nMOV RDI,RBX\nCALL 0x00401650\nTEST EAX,EAX\nJZ 0x00404d0d\nMOV RDI,RBX\nCALL 0x00404d20\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401600\n'
p277
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 4f c9 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 ea c8 ff ff\n'
p278
S'.text:0000000000404cf0\n.text:0000000000404cf1\n.text:0000000000404cf4\n.text:0000000000404cf7\n.text:0000000000404cf9\n.text:0000000000404cfc\n.text:0000000000404d01\n.text:0000000000404d03\n.text:0000000000404d05\n.text:0000000000404d08\n.text:0000000000404d0d\n.text:0000000000404d10\n.text:0000000000404d11\n'
p279
tp280
sS'setlocale'
p281
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p282
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_00608180)();\u000a  return pcVar1;\u000a}\u000a\u000a
p283
S'JMP qword ptr [0x00608180]\n'
p284
S'ff 25 ea 6a 20 00\n'
p285
S'.plt:0000000000401690\n'
p286
tp287
sS'c_toupper'
p288
(S'\n__stdcall c_toupper()\n'
p289
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p290
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p291
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p292
S'.text:0000000000404ef0\n.text:0000000000404ef3\n.text:0000000000404ef6\n.text:0000000000404ef9\n.text:0000000000404efc\n'
p293
tp294
sS'bindtextdomain'
p295
(S'\n__stdcall bindtextdomain()\n'
p296
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00608090)();\u000a  return;\u000a}\u000a\u000a
p297
S'JMP qword ptr [0x00608090]\n'
p298
S'ff 25 da 6b 20 00\n'
p299
S'.plt:00000000004014b0\n'
p300
tp301
sS'fcntl'
p302
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_00608078)();\u000a  return iVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x00608078]\n'
p305
S'ff 25 f2 6b 20 00\n'
p306
S'.plt:0000000000401480\n'
p307
tp308
sS'set_char_quoting'
p309
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p310
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p311
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60a4a0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p312
S'89 f1\n48 85 ff\nbe a0 a4 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p313
S'.text:0000000000402c60\n.text:0000000000402c62\n.text:0000000000402c65\n.text:0000000000402c6a\n.text:0000000000402c6e\n.text:0000000000402c70\n.text:0000000000402c73\n.text:0000000000402c77\n.text:0000000000402c7c\n.text:0000000000402c7f\n.text:0000000000402c81\n.text:0000000000402c83\n.text:0000000000402c86\n.text:0000000000402c88\n.text:0000000000402c8b\n.text:0000000000402c8d\n.text:0000000000402c90\n.text:0000000000402c95\n'
p314
tp315
sS'quotearg_n'
p316
(S'\n__stdcall quotearg_n(char * arg)\n'
p317
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p318
S'MOV RDX,-0x1\nMOV ECX,0x60a4a0\nJMP 0x00403b50\n'
p319
S'48 c7 c2 ff ff ff ff\nb9 a0 a4 60 00\neb 02\n'
p320
S'.text:0000000000403b40\n.text:0000000000403b47\n.text:0000000000403b4c\n'
p321
tp322
sS'mbsinit'
p323
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p324
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_006081e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x006081e0]\n'
p326
S'ff 25 8a 6a 20 00\n'
p327
S'.plt:0000000000401750\n'
p328
tp329
sS'dcgettext'
p330
(S'\n__stdcall dcgettext()\n'
p331
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00608098)();\u000a  return;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x00608098]\n'
p333
S'ff 25 d2 6b 20 00\n'
p334
S'.plt:00000000004014c0\n'
p335
tp336
sS'close_stream'
p337
(S'\n__stdcall close_stream(FILE * stream)\n'
p338
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401450\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004015a0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00404c70\nTEST EBP,EBP\nJZ 0x00404f3b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x00404f5f\nCALL 0x00401400\nMOV dword ptr [RAX],0x0\nJMP 0x00404f5f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x00404f5f\nTEST CL,CL\nJNZ 0x00404f5f\nCALL 0x00401400\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p340
S'55\n41 56\n53\n48 89 fb\ne8 44 c5 ff ff\n49 89 c6\n48 89 df\ne8 89 c6 ff ff\n89 c5\n48 89 df\ne8 4f fd ff ff\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 cd c4 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 ae c4 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p341
S'.text:0000000000404f00\n.text:0000000000404f01\n.text:0000000000404f03\n.text:0000000000404f04\n.text:0000000000404f07\n.text:0000000000404f0c\n.text:0000000000404f0f\n.text:0000000000404f12\n.text:0000000000404f17\n.text:0000000000404f19\n.text:0000000000404f1c\n.text:0000000000404f21\n.text:0000000000404f23\n.text:0000000000404f25\n.text:0000000000404f2a\n.text:0000000000404f2c\n.text:0000000000404f2e\n.text:0000000000404f33\n.text:0000000000404f39\n.text:0000000000404f3b\n.text:0000000000404f3d\n.text:0000000000404f40\n.text:0000000000404f42\n.text:0000000000404f44\n.text:0000000000404f47\n.text:0000000000404f49\n.text:0000000000404f4b\n.text:0000000000404f4d\n.text:0000000000404f52\n.text:0000000000404f54\n.text:0000000000404f57\n.text:0000000000404f5c\n.text:0000000000404f5f\n.text:0000000000404f61\n.text:0000000000404f62\n.text:0000000000404f64\n.text:0000000000404f65\n'
p342
tp343
sS'quotearg_colon_mem'
p344
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p345
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'MOV EDX,0x3a\nJMP 0x00403e60\n'
p347
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p348
S'.text:0000000000403ef0\n.text:0000000000403ef5\n'
p349
tp350
sS'quotearg_free'
p351
(S'\n__stdcall quotearg_free()\n'
p352
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p353
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x00608218]\nCMP dword ptr [0x00608220],0x2\nJC 0x00403aea\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004013d0\nINC RBX\nMOV EAX,dword ptr [0x00608220]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00403ad0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60a4e0\nCMP RDI,RAX\nJZ 0x00403b13\nCALL 0x004013d0\nMOV qword ptr [0x00608228],0x100\nMOV qword ptr [0x00608230],0x60a4e0\nMOV EAX,0x608228\nCMP R14,RAX\nJZ 0x00403b30\nMOV RDI,R14\nCALL 0x004013d0\nMOV qword ptr [0x00608218],0x608228\nMOV dword ptr [0x00608220],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p354
S'41 57\n41 56\n53\n4c 8b 35 5c 47 20 00\n83 3d 5d 47 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 f8 d8 ff ff\n48 ff c3\n8b 05 3f 47 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 e0 a4 60 00\n48 39 c7\n74 1b\ne8 d3 d8 ff ff\n48 c7 05 20 47 20 00 00 01 00 00\n48 c7 05 1d 47 20 00 e0 a4 60 00\nb8 28 82 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 ab d8 ff ff\n48 c7 05 e8 46 20 00 28 82 60 00\nc7 05 e6 46 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p355
S'.text:0000000000403ab0\n.text:0000000000403ab2\n.text:0000000000403ab4\n.text:0000000000403ab5\n.text:0000000000403abc\n.text:0000000000403ac3\n.text:0000000000403ac5\n.text:0000000000403ac9\n.text:0000000000403ace\n.text:0000000000403ad0\n.text:0000000000403ad3\n.text:0000000000403ad8\n.text:0000000000403adb\n.text:0000000000403ae1\n.text:0000000000403ae5\n.text:0000000000403ae8\n.text:0000000000403aea\n.text:0000000000403aee\n.text:0000000000403af3\n.text:0000000000403af6\n.text:0000000000403af8\n.text:0000000000403afd\n.text:0000000000403b08\n.text:0000000000403b13\n.text:0000000000403b18\n.text:0000000000403b1b\n.text:0000000000403b1d\n.text:0000000000403b20\n.text:0000000000403b25\n.text:0000000000403b30\n.text:0000000000403b3a\n.text:0000000000403b3b\n.text:0000000000403b3d\n.text:0000000000403b3f\n'
p356
tp357
sS'quotearg_mem'
p358
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p359
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p360
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403d10\n'
p361
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p362
S'.text:0000000000403d30\n.text:0000000000403d33\n.text:0000000000403d36\n.text:0000000000403d38\n.text:0000000000403d3b\n.text:0000000000403d3e\n'
p363
tp364
sS'xcalloc'
p365
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p366
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p367
S'PUSH RAX\nCALL 0x00404c20\nTEST RAX,RAX\nJZ 0x00404b8d\nPOP RCX\nRET\nCALL 0x00404bf0\n'
p368
S'50\ne8 9a 00 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p369
S'.text:0000000000404b80\n.text:0000000000404b81\n.text:0000000000404b86\n.text:0000000000404b89\n.text:0000000000404b8b\n.text:0000000000404b8c\n.text:0000000000404b8d\n'
p370
tp371
sS'deregister_tm_clones'
p372
(S'\n__stdcall deregister_tm_clones()\n'
p373
V\u000a/* WARNING: Removing unreachable block (ram,0x004017c5) */\u000a/* WARNING: Removing unreachable block (ram,0x004017cf) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p374
S'MOV EAX,0x608277\nPUSH RBP\nSUB RAX,0x608270\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x004017e0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004017e0\nPOP RBP\nMOV EDI,0x608270\nJMP RAX\nPOP RBP\nRET\n'
p375
S'b8 77 82 60 00\n55\n48 2d 70 82 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 70 82 60 00\nff e0\n5d\nc3\n'
p376
S'.text:00000000004017b0\n.text:00000000004017b5\n.text:00000000004017b6\n.text:00000000004017bc\n.text:00000000004017c0\n.text:00000000004017c3\n.text:00000000004017c5\n.text:00000000004017ca\n.text:00000000004017cd\n.text:00000000004017cf\n.text:00000000004017d0\n.text:00000000004017d5\n.text:00000000004017e0\n.text:00000000004017e1\n'
p377
tp378
sS'clear_ungetc_buffer_preserving_position'
p379
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p380
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p381
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00404d27\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00404d40\n'
p382
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p383
S'.text:0000000000404d20\n.text:0000000000404d24\n.text:0000000000404d26\n.text:0000000000404d27\n.text:0000000000404d29\n.text:0000000000404d2e\n'
p384
tp385
sS'xnmalloc'
p386
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p387
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p388
S'MOV RAX,RDI\nMUL RSI\nJO 0x00404a51\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00404a60\nPUSH RAX\nCALL 0x00404bf0\n'
p389
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p390
S'.text:0000000000404a40\n.text:0000000000404a43\n.text:0000000000404a46\n.text:0000000000404a48\n.text:0000000000404a4c\n.text:0000000000404a4f\n.text:0000000000404a51\n.text:0000000000404a52\n'
p391
tp392
sS'quotearg_custom'
p393
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p394
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p395
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403f50\n'
p396
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p397
S'.text:0000000000403fd0\n.text:0000000000403fd3\n.text:0000000000403fd6\n.text:0000000000403fd9\n.text:0000000000403fdb\n.text:0000000000403fde\n.text:0000000000403fe1\n.text:0000000000403fe4\n'
p398
tp399
sS'free'
p400
(S'\n__stdcall free(void * __ptr)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00608020)();\u000a  return;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x00608020]\n'
p403
S'ff 25 4a 6c 20 00\n'
p404
S'.plt:00000000004013d0\n'
p405
tp406
sS'close'
p407
(S'\n__stdcall close(int __fd)\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006080e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x006080e8]\n'
p410
S'ff 25 82 6b 20 00\n'
p411
S'.plt:0000000000401560\n'
p412
tp413
sS'copy_to_temp'
p414
(S'\n__stdcall copy_to_temp(FILE * * g_tmp, char * * g_tempfile, char * file)\n'
p415
V\u000aoff_t copy_to_temp(FILE **g_tmp,char **g_tempfile,char *file)\u000a\u000a{\u000a  FILE *__stream;\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  size_t __n;\u000a  size_t sVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *pcVar6;\u000a  uint uVar7;\u000a  long lVar8;\u000a  FILE *local_48;\u000a  char *local_40 [2];\u000a  \u000a  _Var1 = temp_stream(&local_48,local_40);\u000a  __stream = local_48;\u000a  if (_Var1 != false) {\u000a    lVar8 = 0;\u000a    do {\u000a      __n = safe_read((void *)((ulong)file & 0xffffffff),(size_t)G_buffer);\u000a      if (__n == 0) {\u000a        iVar2 = fflush_unlocked((FILE *)local_48);\u000a        if (iVar2 == 0) {\u000a          *g_tmp = local_48;\u000a          *g_tempfile = local_40[0];\u000a          return lVar8;\u000a        }\u000a        break;\u000a      }\u000a      if (__n == 0xffffffffffffffff) {\u000a        puVar5 = (uint *)__errno_location();\u000a        uVar7 = *puVar5;\u000a        uVar4 = dcgettext(0,"%s: read error",5);\u000a        goto LAB_00402715;\u000a      }\u000a      sVar3 = fwrite_unlocked(G_buffer,1,__n,(FILE *)__stream);\u000a      lVar8 = lVar8 + __n;\u000a    } while (sVar3 == __n);\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar7 = *puVar5;\u000a    uVar4 = dcgettext(0,"%s: write error",5);\u000aLAB_00402715:\u000a    pcVar6 = quotearg_n_style_colon((char *)0x0);\u000a    error(0,(ulong)uVar7,uVar4,pcVar6);\u000a    rpl_fclose(local_48);\u000a  }\u000a  return -1;\u000a}\u000a\u000a
p416
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RCX\nMOV EBP,EDX\nMOV R12,RSI\nMOV R13,RDI\nMOV RDI,RSP\nLEA RSI,[RSP + 0x8]\nCALL 0x00402760\nMOV R15,-0x1\nTEST AL,AL\nJZ 0x0040273b\nMOV qword ptr [RSP + 0x10],R14\nMOV RBX,qword ptr [RSP]\nXOR R15D,R15D\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [0x00608448]\nMOV RDX,qword ptr [0x00608438]\nMOV EDI,EBP\nCALL 0x00404450\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004026b4\nCMP R14,-0x1\nJZ 0x004026ee\nMOV RDI,qword ptr [0x00608448]\nMOV ESI,0x1\nMOV RDX,R14\nMOV RCX,RBX\nCALL 0x00401660\nADD R15,R14\nCMP RAX,R14\nJZ 0x00402670\nJMP 0x004026c5\nMOV RDI,qword ptr [RSP]\nCALL 0x00401740\nTEST EAX,EAX\nJZ 0x0040274d\nCALL 0x00401400\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x405a03\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RBP,RAX\nMOV RDX,qword ptr [RSP + 0x8]\nXOR EDI,EDI\nMOV ESI,0x3\nJMP 0x00402715\nCALL 0x00401400\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x4059f4\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,qword ptr [RSP + 0x10]\nCALL 0x00403f00\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x004016c0\nMOV R15,-0x1\nMOV RDI,qword ptr [RSP]\nCALL 0x00404c70\nMOV RAX,R15\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [R13],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [R12],RAX\nJMP 0x0040273b\n'
p417
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 ce\n89 d5\n49 89 f4\n49 89 fd\n48 89 e7\n48 8d 74 24 08\ne8 1a 01 00 00\n49 c7 c7 ff ff ff ff\n84 c0\n0f 84 e6 00 00 00\n4c 89 74 24 10\n48 8b 1c 24\n45 31 ff\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 35 d1 5d 20 00\n48 8b 15 ba 5d 20 00\n89 ef\ne8 cb 1d 00 00\n49 89 c6\n4d 85 f6\n74 27\n49 83 fe ff\n74 5b\n48 8b 3d ae 5d 20 00\nbe 01 00 00 00\n4c 89 f2\n48 89 d9\ne8 b6 ef ff ff\n4d 01 f7\n4c 39 f0\n74 be\neb 11\n48 8b 3c 24\ne8 83 f0 ff ff\n85 c0\n0f 84 88 00 00 00\ne8 36 ed ff ff\n8b 18\n31 ff\nbe 03 5a 40 00\nba 05 00 00 00\ne8 e3 ed ff ff\n48 89 c5\n48 8b 54 24 08\n31 ff\nbe 03 00 00 00\neb 27\ne8 0d ed ff ff\n8b 18\n31 ff\nbe f4 59 40 00\nba 05 00 00 00\ne8 ba ed ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n48 8b 54 24 10\ne8 e6 17 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 95 ef ff ff\n49 c7 c7 ff ff ff ff\n48 8b 3c 24\ne8 35 25 00 00\n4c 89 f8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 04 24\n49 89 45 00\n48 8b 44 24 08\n49 89 04 24\neb db\n'
p418
S'.text:0000000000402620\n.text:0000000000402621\n.text:0000000000402623\n.text:0000000000402625\n.text:0000000000402627\n.text:0000000000402629\n.text:000000000040262a\n.text:000000000040262e\n.text:0000000000402631\n.text:0000000000402633\n.text:0000000000402636\n.text:0000000000402639\n.text:000000000040263c\n.text:0000000000402641\n.text:0000000000402646\n.text:000000000040264d\n.text:000000000040264f\n.text:0000000000402655\n.text:000000000040265a\n.text:000000000040265e\n.text:0000000000402661\n.text:0000000000402670\n.text:0000000000402677\n.text:000000000040267e\n.text:0000000000402680\n.text:0000000000402685\n.text:0000000000402688\n.text:000000000040268b\n.text:000000000040268d\n.text:0000000000402691\n.text:0000000000402693\n.text:000000000040269a\n.text:000000000040269f\n.text:00000000004026a2\n.text:00000000004026a5\n.text:00000000004026aa\n.text:00000000004026ad\n.text:00000000004026b0\n.text:00000000004026b2\n.text:00000000004026b4\n.text:00000000004026b8\n.text:00000000004026bd\n.text:00000000004026bf\n.text:00000000004026c5\n.text:00000000004026ca\n.text:00000000004026cc\n.text:00000000004026ce\n.text:00000000004026d3\n.text:00000000004026d8\n.text:00000000004026dd\n.text:00000000004026e0\n.text:00000000004026e5\n.text:00000000004026e7\n.text:00000000004026ec\n.text:00000000004026ee\n.text:00000000004026f3\n.text:00000000004026f5\n.text:00000000004026f7\n.text:00000000004026fc\n.text:0000000000402701\n.text:0000000000402706\n.text:0000000000402709\n.text:000000000040270b\n.text:0000000000402710\n.text:0000000000402715\n.text:000000000040271a\n.text:000000000040271d\n.text:000000000040271f\n.text:0000000000402721\n.text:0000000000402723\n.text:0000000000402726\n.text:000000000040272b\n.text:0000000000402732\n.text:0000000000402736\n.text:000000000040273b\n.text:000000000040273e\n.text:0000000000402742\n.text:0000000000402743\n.text:0000000000402745\n.text:0000000000402747\n.text:0000000000402749\n.text:000000000040274b\n.text:000000000040274c\n.text:000000000040274d\n.text:0000000000402751\n.text:0000000000402755\n.text:000000000040275a\n.text:000000000040275e\n'
p419
tp420
sS'getenv'
p421
(S'\n__stdcall getenv(char * __name)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00608018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x00608018]\n'
p424
S'ff 25 52 6c 20 00\n'
p425
S'.plt:00000000004013c0\n'
p426
tp427
sS'quotearg_char'
p428
(S'\n__stdcall quotearg_char(char * arg)\n'
p429
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00403e60\n'
p431
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p432
S'.text:0000000000403ed0\n.text:0000000000403ed2\n.text:0000000000403ed9\n.text:0000000000403edb\n'
p433
tp434
sS'malloc'
p435
(S'\n__stdcall malloc(size_t __size)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00608130)();\u000a  return pvVar1;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x00608130]\n'
p438
S'ff 25 3a 6b 20 00\n'
p439
S'.plt:00000000004015f0\n'
p440
tp441
sS'record_or_unlink_tempfile'
p442
(S'\n__stdcall record_or_unlink_tempfile(char * __name)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint record_or_unlink_tempfile(char *__name)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_unlink_00608040)();\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'JMP 0x00401410\n'
p445
S'e9 bb ea ff ff\n'
p446
S'.text:0000000000402950\n'
p447
tp448
sS'c_tolower'
p449
(S'\n__stdcall c_tolower()\n'
p450
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p451
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p452
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p453
S'.text:0000000000404ee0\n.text:0000000000404ee3\n.text:0000000000404ee6\n.text:0000000000404ee9\n.text:0000000000404eec\n'
p454
tp455
sS'rpl_fseeko'
p456
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p457
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_006081a8)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p458
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00404d68\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00404d68\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x00404d7a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004016e0\nMOV RDI,RBX\nCALL 0x004015e0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401530\nCMP RAX,-0x1\nJZ 0x00404da3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00404da8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p459
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 66 c9 ff ff\n48 89 df\ne8 5e c8 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 a1 c7 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p460
S'.text:0000000000404d40\n.text:0000000000404d41\n.text:0000000000404d43\n.text:0000000000404d44\n.text:0000000000404d47\n.text:0000000000404d4a\n.text:0000000000404d4d\n.text:0000000000404d51\n.text:0000000000404d55\n.text:0000000000404d57\n.text:0000000000404d5b\n.text:0000000000404d5f\n.text:0000000000404d61\n.text:0000000000404d66\n.text:0000000000404d68\n.text:0000000000404d6b\n.text:0000000000404d6e\n.text:0000000000404d71\n.text:0000000000404d72\n.text:0000000000404d74\n.text:0000000000404d75\n.text:0000000000404d7a\n.text:0000000000404d7d\n.text:0000000000404d82\n.text:0000000000404d84\n.text:0000000000404d87\n.text:0000000000404d8a\n.text:0000000000404d8f\n.text:0000000000404d93\n.text:0000000000404d95\n.text:0000000000404d98\n.text:0000000000404d9f\n.text:0000000000404da1\n.text:0000000000404da3\n.text:0000000000404da8\n.text:0000000000404da9\n.text:0000000000404dab\n.text:0000000000404dac\n'
p461
tp462
sS'getopt_long'
p463
(S'\n__stdcall getopt_long()\n'
p464
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_006080b0)();\u000a  return;\u000a}\u000a\u000a
p465
S'JMP qword ptr [0x006080b0]\n'
p466
S'ff 25 ba 6b 20 00\n'
p467
S'.plt:00000000004014f0\n'
p468
tp469
sS'quote_n_mem'
p470
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p471
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p472
S'MOV ECX,0x608238\nJMP 0x00403b50\n'
p473
S'b9 38 82 60 00\ne9 36 fb ff ff\n'
p474
S'.text:0000000000404010\n.text:0000000000404015\n'
p475
tp476
sS'xstrdup'
p477
(S'\n__stdcall xstrdup(char * string)\n'
p478
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p479
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004014e0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00404ba0\n'
p480
S'53\n48 89 fb\ne8 07 c9 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p481
S'.text:0000000000404bd0\n.text:0000000000404bd1\n.text:0000000000404bd4\n.text:0000000000404bd9\n.text:0000000000404bdd\n.text:0000000000404be0\n.text:0000000000404be1\n'
p482
tp483
sS'c_ispunct'
p484
(S'\n__stdcall c_ispunct()\n'
p485
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p486
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00404e82\nMOV AL,0x1\nJMP qword ptr [0x406530 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p487
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 30 65 40 00\nc3\n31 c0\nc3\n'
p488
S'.text:0000000000404e70\n.text:0000000000404e73\n.text:0000000000404e76\n.text:0000000000404e78\n.text:0000000000404e7a\n.text:0000000000404e81\n.text:0000000000404e82\n.text:0000000000404e84\n'
p489
tp490
sS'quotearg_style'
p491
(S'\n__stdcall quotearg_style(char * arg)\n'
p492
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p493
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00403d40\n'
p494
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p495
S'.text:0000000000403e20\n.text:0000000000403e23\n.text:0000000000403e25\n.text:0000000000403e27\n.text:0000000000403e29\n.text:0000000000403e2c\n'
p496
tp497
sS'fscanf'
p498
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p499
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006080e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p500
S'JMP qword ptr [0x006080e0]\n'
p501
S'ff 25 8a 6b 20 00\n'
p502
S'.plt:0000000000401550\n'
p503
tp504
sS'emit_try_help'
p505
(S'\n__stdcall emit_try_help()\n'
p506
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p507
S'PUSH RBX\nMOV RBX,qword ptr [0x006082c0]\nXOR EDI,EDI\nMOV ESI,0x4057c1\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060a498]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401720\n'
p508
S'53\n48 8b 1d 58 69 20 00\n31 ff\nbe c1 57 40 00\nba 05 00 00 00\ne8 47 fb ff ff\n48 89 c2\n48 8b 0d 15 8b 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 8d fd ff ff\n'
p509
S'.text:0000000000401960\n.text:0000000000401961\n.text:0000000000401968\n.text:000000000040196a\n.text:000000000040196f\n.text:0000000000401974\n.text:0000000000401979\n.text:000000000040197c\n.text:0000000000401983\n.text:0000000000401988\n.text:000000000040198a\n.text:000000000040198d\n.text:000000000040198e\n'
p510
tp511
sS'memcpy'
p512
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p513
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00608120)();\u000a  return pvVar1;\u000a}\u000a\u000a
p514
S'JMP qword ptr [0x00608120]\n'
p515
S'ff 25 4a 6b 20 00\n'
p516
S'.plt:00000000004015d0\n'
p517
tp518
sS'strrchr'
p519
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p520
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006080c0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x006080c0]\n'
p522
S'ff 25 aa 6b 20 00\n'
p523
S'.plt:0000000000401510\n'
p524
tp525
sS'close_stdout_set_ignore_EPIPE'
p526
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p527
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p528
S'MOV byte ptr [0x0060a490],DIL\nRET\n'
p529
S'40 88 3d 19 7b 20 00\nc3\n'
p530
S'.text:0000000000402970\n.text:0000000000402977\n'
p531
tp532
sS'quotearg_alloc_mem'
p533
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p534
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p535
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60a4a0\nCMOVNZ R12,RCX\nCALL 0x00401400\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402d70\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00404b30\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402d70\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00403a9a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p536
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc a0 a4 60 00\n4c 0f 45 e1\ne8 08 da ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 e1 10 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p537
S'.text:00000000004039c0\n.text:00000000004039c1\n.text:00000000004039c3\n.text:00000000004039c5\n.text:00000000004039c7\n.text:00000000004039c9\n.text:00000000004039ca\n.text:00000000004039ce\n.text:00000000004039d1\n.text:00000000004039d6\n.text:00000000004039d9\n.text:00000000004039de\n.text:00000000004039e1\n.text:00000000004039e6\n.text:00000000004039e9\n.text:00000000004039ef\n.text:00000000004039f3\n.text:00000000004039f8\n.text:00000000004039fd\n.text:00000000004039ff\n.text:0000000000403a03\n.text:0000000000403a05\n.text:0000000000403a08\n.text:0000000000403a0c\n.text:0000000000403a11\n.text:0000000000403a15\n.text:0000000000403a1a\n.text:0000000000403a1e\n.text:0000000000403a20\n.text:0000000000403a22\n.text:0000000000403a25\n.text:0000000000403a28\n.text:0000000000403a2b\n.text:0000000000403a30\n.text:0000000000403a35\n.text:0000000000403a37\n.text:0000000000403a3c\n.text:0000000000403a40\n.text:0000000000403a43\n.text:0000000000403a47\n.text:0000000000403a4a\n.text:0000000000403a4f\n.text:0000000000403a52\n.text:0000000000403a56\n.text:0000000000403a5a\n.text:0000000000403a5d\n.text:0000000000403a60\n.text:0000000000403a65\n.text:0000000000403a6a\n.text:0000000000403a6d\n.text:0000000000403a72\n.text:0000000000403a77\n.text:0000000000403a79\n.text:0000000000403a7e\n.text:0000000000403a83\n.text:0000000000403a87\n.text:0000000000403a8a\n.text:0000000000403a8e\n.text:0000000000403a93\n.text:0000000000403a95\n.text:0000000000403a97\n.text:0000000000403a9a\n.text:0000000000403a9d\n.text:0000000000403aa1\n.text:0000000000403aa2\n.text:0000000000403aa4\n.text:0000000000403aa6\n.text:0000000000403aa8\n.text:0000000000403aaa\n.text:0000000000403aab\n'
p538
tp539
sS'iswprint'
p540
(S'\n__stdcall iswprint(wint_t __wc)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_006081e8)();\u000a  return iVar1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x006081e8]\n'
p543
S'ff 25 82 6a 20 00\n'
p544
S'.plt:0000000000401760\n'
p545
tp546
sS'ftruncate'
p547
(S'\n__stdcall ftruncate(int __fd, __off_t __length)\n'
p548
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ftruncate(int __fd,__off_t __length)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ftruncate_006080c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p549
S'JMP qword ptr [0x006080c8]\n'
p550
S'ff 25 a2 6b 20 00\n'
p551
S'.plt:0000000000401520\n'
p552
tp553
sS'quotearg_style_mem'
p554
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p555
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p556
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403de0\n'
p557
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p558
S'.text:0000000000403e40\n.text:0000000000403e43\n.text:0000000000403e46\n.text:0000000000403e48\n.text:0000000000403e4a\n.text:0000000000403e4c\n.text:0000000000403e4f\n.text:0000000000403e52\n'
p559
tp560
sS'xalloc_die'
p561
(S'\n__stdcall xalloc_die()\n'
p562
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x405c39,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p563
S'PUSH RBX\nMOV EBX,dword ptr [0x00608210]\nXOR EDI,EDI\nMOV ESI,0x405a29\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x405c39\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004016c0\nCALL 0x004013f0\n'
p564
S'53\n8b 1d 19 36 20 00\n31 ff\nbe 29 5a 40 00\nba 05 00 00 00\ne8 b8 c8 ff ff\n48 89 c1\n31 f6\nba 39 5c 40 00\n31 c0\n89 df\ne8 a5 ca ff ff\ne8 d0 c7 ff ff\n'
p565
S'.text:0000000000404bf0\n.text:0000000000404bf1\n.text:0000000000404bf7\n.text:0000000000404bf9\n.text:0000000000404bfe\n.text:0000000000404c03\n.text:0000000000404c08\n.text:0000000000404c0b\n.text:0000000000404c0d\n.text:0000000000404c12\n.text:0000000000404c14\n.text:0000000000404c16\n.text:0000000000404c1b\n'
p566
tp567
sS'c_isspace'
p568
(S'\n__stdcall c_isspace()\n'
p569
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p570
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00404ea5\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p571
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p572
S'.text:0000000000404e90\n.text:0000000000404e93\n.text:0000000000404e96\n.text:0000000000404e98\n.text:0000000000404e9d\n.text:0000000000404e9f\n.text:0000000000404ea1\n.text:0000000000404ea4\n.text:0000000000404ea5\n.text:0000000000404ea7\n'
p573
tp574
sS'quotearg_n_custom'
p575
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p576
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p577
S'MOV R8,-0x1\nJMP 0x00403f60\n'
p578
S'49 c7 c0 ff ff ff ff\neb 07\n'
p579
S'.text:0000000000403f50\n.text:0000000000403f57\n'
p580
tp581
sS'open'
p582
(S'\n__stdcall open(char * __file, int __oflag)\n'
p583
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_006081a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p584
S'JMP qword ptr [0x006081a0]\n'
p585
S'ff 25 ca 6a 20 00\n'
p586
S'.plt:00000000004016d0\n'
p587
tp588
sS'quotearg_n_custom_mem'
p589
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p590
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p591
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060a4d0]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060a4c0]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a4b0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060a4a0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00402cc0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403b50\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p592
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 57 65 20 00\n48 89 44 24 30\n0f 10 05 3b 65 20 00\n0f 29 44 24 20\n0f 10 05 1f 65 20 00\n0f 29 44 24 10\n0f 10 05 03 65 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p593
S'.text:0000000000403f60\n.text:0000000000403f61\n.text:0000000000403f63\n.text:0000000000403f65\n.text:0000000000403f66\n.text:0000000000403f6a\n.text:0000000000403f6d\n.text:0000000000403f70\n.text:0000000000403f72\n.text:0000000000403f79\n.text:0000000000403f7e\n.text:0000000000403f85\n.text:0000000000403f8a\n.text:0000000000403f91\n.text:0000000000403f96\n.text:0000000000403f9d\n.text:0000000000403fa1\n.text:0000000000403fa4\n.text:0000000000403fa7\n.text:0000000000403fac\n.text:0000000000403fae\n.text:0000000000403fb1\n.text:0000000000403fb4\n.text:0000000000403fb7\n.text:0000000000403fbc\n.text:0000000000403fc0\n.text:0000000000403fc1\n.text:0000000000403fc3\n.text:0000000000403fc5\n.text:0000000000403fc6\n'
p594
tp595
sS'fd_safer'
p596
(S'\n__stdcall fd_safer()\n'
p597
V\u000aint fd_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int *piVar3;\u000a  uint __fd;\u000a  \u000a  if (__fd < 3) {\u000a    uVar2 = dup_safer();\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(__fd);\u000a    *piVar3 = iVar1;\u000a    __fd = uVar2;\u000a  }\u000a  return (int)__fd;\u000a}\u000a\u000a
p598
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nCMP EBX,0x2\nJA 0x00404524\nMOV EDI,EBX\nCALL 0x00405330\nMOV R14D,EAX\nCALL 0x00401400\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV EDI,EBX\nCALL 0x00401560\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nJMP 0x00404526\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p599
S'55\n41 57\n41 56\n53\n50\n89 fb\n83 fb 02\n77 26\n89 df\ne8 2b 0e 00 00\n41 89 c6\ne8 f3 ce ff ff\n48 89 c5\n44 8b 7d 00\n89 df\ne8 45 d0 ff ff\n44 89 7d 00\n44 89 f0\neb 02\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p600
S'.text:00000000004044f0\n.text:00000000004044f1\n.text:00000000004044f3\n.text:00000000004044f5\n.text:00000000004044f6\n.text:00000000004044f7\n.text:00000000004044f9\n.text:00000000004044fc\n.text:00000000004044fe\n.text:0000000000404500\n.text:0000000000404505\n.text:0000000000404508\n.text:000000000040450d\n.text:0000000000404510\n.text:0000000000404514\n.text:0000000000404516\n.text:000000000040451b\n.text:000000000040451f\n.text:0000000000404522\n.text:0000000000404524\n.text:0000000000404526\n.text:000000000040452a\n.text:000000000040452b\n.text:000000000040452d\n.text:000000000040452f\n.text:0000000000404530\n'
p601
tp602
sS'_init'
p603
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p604
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00607ff8;\u000a  if (PTR___gmon_start___00607ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00607ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p605
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00607ff8]\nTEST RAX,RAX\nJZ 0x004013a2\nCALL RAX\nADD RSP,0x8\nRET\n'
p606
S'48 83 ec 08\n48 8b 05 5d 6c 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p607
S'.init:0000000000401390\n.init:0000000000401394\n.init:000000000040139b\n.init:000000000040139e\n.init:00000000004013a0\n.init:00000000004013a2\n.init:00000000004013a6\n'
p608
tp609
sS'__freading'
p610
(S'\n__stdcall __freading()\n'
p611
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00608160)();\u000a  return;\u000a}\u000a\u000a
p612
S'JMP qword ptr [0x00608160]\n'
p613
S'ff 25 0a 6b 20 00\n'
p614
S'.plt:0000000000401650\n'
p615
tp616
sS'set_quoting_flags'
p617
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p618
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p619
S'TEST RDI,RDI\nMOV ECX,0x60a4a0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p620
S'48 85 ff\nb9 a0 a4 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p621
S'.text:0000000000402ca0\n.text:0000000000402ca3\n.text:0000000000402ca8\n.text:0000000000402cac\n.text:0000000000402caf\n.text:0000000000402cb2\n'
p622
tp623
sS'fputs_unlocked'
p624
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p625
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_00608100)();\u000a  return iVar1;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x00608100]\n'
p627
S'ff 25 6a 6b 20 00\n'
p628
S'.plt:0000000000401590\n'
p629
tp630
sS'main'
p631
(S'\n__stdcall main(char * * argv)\n'
p632
V\u000aint main(char **argv)\u000a\u000a{\u000a  ulong uVar1;\u000a  bool bVar2;\u000a  char *default_file_list [2];\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  uint __fd;\u000a  size_t __length;\u000a  uint *puVar5;\u000a  undefined8 uVar6;\u000a  __off_t _Var7;\u000a  ulong uVar8;\u000a  byte bVar9;\u000a  char *file;\u000a  char **ppcVar10;\u000a  char **in_RSI;\u000a  char *__pattern;\u000a  \u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x405781,"/usr/local/share/locale");\u000a  textdomain(0x405781);\u000a  atexit(close_stdout);\u000a  separator = \u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xc9;\u000a  sentinel_length = 1;\u000a  separator_ends_record = 1;\u000a  while( true ) {\u000a    iVar4 = getopt_long((ulong)argv & 0xffffffff);\u000a    if (iVar4 < 0x62) break;\u000a    if (iVar4 == 0x73) {\u000a      separator = optarg;\u000a    }\u000a    else {\u000a      if (iVar4 == 0x72) {\u000a        sentinel_length = 0;\u000a      }\u000a      else {\u000a        if (iVar4 != 0x62) goto LAB_00401e6f;\u000a        separator_ends_record = 0;\u000a      }\u000a    }\u000a  }\u000a  if (iVar4 != -1) {\u000a    if (iVar4 != -0x83) {\u000a      if (iVar4 != -0x82) {\u000aLAB_00401e6f:\u000a        __pattern = (char *)0x1;\u000a        usage();\u000a        if ((*__pattern == '-') && (__pattern[1] == 0)) {\u000a          have_read_stdin = 1;\u000a          file = (char *)0x0;\u000a          __pattern = (char *)dcgettext(0,"standard input",5);\u000a          bVar2 = true;\u000a        }\u000a        else {\u000a          bVar2 = false;\u000a          __fd = open(__pattern,0);\u000a          file = (char *)(ulong)__fd;\u000a          if ((int)__fd < 0) {\u000a            puVar5 = (uint *)__errno_location();\u000a            __fd = *puVar5;\u000a            uVar6 = dcgettext(0,"failed to open %s for reading",5);\u000a            __pattern = quotearg_style((char *)0x4);\u000a            error(0,(ulong)__fd,uVar6,__pattern);\u000a            return 0;\u000a          }\u000a        }\u000a        __fd = (uint)file;\u000a        _Var7 = lseek(__fd,0,2);\u000a        if ((_Var7 < 0) || (iVar4 = isatty(__fd), iVar4 != 0)) {\u000a          _Var3 = tac_nonseekable(file);\u000a        }\u000a        else {\u000a          _Var3 = tac_seekable(file,(off_t)__pattern);\u000a        }\u000a        if ((!bVar2) && (iVar4 = close(__fd), iVar4 != 0)) {\u000a          puVar5 = (uint *)__errno_location();\u000a          __fd = *puVar5;\u000a          _Var3 = false;\u000a          uVar6 = dcgettext(0,"%s: read error",5);\u000a          __pattern = quotearg_n_style_colon((char *)0x0);\u000a          error(0,(ulong)__fd,uVar6,__pattern);\u000a        }\u000a        return (int)(__fd & 0xffffff00 | (uint)(_Var3 != false));\u000a      }\u000a      usage(0);\u000a    }\u000a    version_etc(stdout,"tac","GNU coreutils",Version,"Jay Lepreau","David MacKenzie",0);\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  if (sentinel_length == 0) {\u000a    if (*separator == 0) {\u000a      uVar6 = dcgettext(0,"separator cannot be empty",5);\u000a      error(1,0,uVar6,uVar6);\u000a    }\u000a    __pattern = separator;\u000a    compiled_separator.buffer._0_4_ = 0;\u000a    compiled_separator.buffer._4_4_ = 0;\u000a    compiled_separator.allocated._0_4_ = 0;\u000a    compiled_separator.allocated._4_4_ = 0;\u000a    compiled_separator.fastmap = compiled_separator_fastmap;\u000a    compiled_separator.translate = (uchar *)0x0;\u000a    __length = strlen(separator);\u000a    __pattern = re_compile_pattern(__pattern,__length,(re_pattern_buffer *)&compiled_separator);\u000a    if (__pattern != (char *)0x0) {\u000a      error(1,0,0x405c39);\u000a    }\u000a  }\u000a  else {\u000a    if (*separator == 0) {\u000a      sentinel_length = 1;\u000a      match_length = sentinel_length;\u000a    }\u000a    else {\u000a      sentinel_length = strlen(separator);\u000a      match_length = sentinel_length;\u000a    }\u000a  }\u000a  read_size = 0x2000;\u000a  if (sentinel_length < 0x1000) {\u000a    uVar8 = 0x2001;\u000a  }\u000a  else {\u000a    do {\u000a      if ((long)read_size < 0) goto LAB_00401e1b;\u000a      uVar1 = read_size * 2;\u000a      uVar8 = read_size & 0x7ffffffffffffffe;\u000a      read_size = uVar1;\u000a    } while (uVar8 <= sentinel_length);\u000a    uVar8 = uVar1 | 1;\u000a    read_size = uVar1;\u000a  }\u000a  uVar8 = uVar8 + sentinel_length;\u000a  G_buffer_size = uVar8 * 2;\u000a  if ((uVar8 < G_buffer_size) && (read_size < uVar8)) {\u000a    G_buffer = (char *)xmalloc(G_buffer_size);\u000a    if (sentinel_length == 0) {\u000a      G_buffer = G_buffer + 1;\u000a    }\u000a    else {\u000a      memcpy(G_buffer,separator,sentinel_length + 1);\u000a      G_buffer = G_buffer + sentinel_length;\u000a    }\u000a    ppcVar10 = (char **)&ram0x00405af0;\u000a    if (optind < (int)((ulong)argv & 0xffffffff)) {\u000a      ppcVar10 = in_RSI + (long)optind;\u000a    }\u000a    __pattern = *ppcVar10;\u000a    if (__pattern == (char *)0x0) {\u000a      bVar9 = 1;\u000a    }\u000a    else {\u000a      bVar9 = 1;\u000a      do {\u000a        ppcVar10 = ppcVar10 + 1;\u000a        _Var3 = tac_file(__pattern);\u000a        bVar9 = bVar9 & _Var3;\u000a        __pattern = *ppcVar10;\u000a      } while (__pattern != (char *)0x0);\u000a    }\u000a    output((char *)0x0,(char *)0x0);\u000a    if ((have_read_stdin == 1) && (iVar4 = close(0), iVar4 < 0)) {\u000a      puVar5 = (uint *)__errno_location();\u000a      bVar9 = 0;\u000a      error(0,(ulong)*puVar5,&DAT_00405c7e);\u000a    }\u000a    return (int)(uint)(bVar9 ^ 1);\u000a  }\u000aLAB_00401e1b:\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p633
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nMOV R14D,EDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00402b50\nMOV EDI,0x6\nMOV ESI,0x4062f9\nCALL 0x00401690\nMOV EDI,0x405781\nMOV ESI,0x405760\nCALL 0x004014b0\nMOV EDI,0x405781\nCALL 0x00401490\nMOV EDI,0x402980\nCALL 0x00405580\nMOV qword ptr [0x006082d0],0x4062f8\nMOV qword ptr [0x006082d8],0x1\nMOV byte ptr [0x006082e0],0x1\nJMP 0x00401bb0\nMOV RAX,qword ptr [0x00608298]\nMOV qword ptr [0x006082d0],RAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV EDX,0x405778\nMOV ECX,0x405b00\nXOR R8D,R8D\nMOV EDI,R14D\nMOV RSI,RBX\nCALL 0x004014f0\nCMP EAX,0x61\nJLE 0x00401bf6\nCMP EAX,0x73\nJZ 0x00401b97\nCMP EAX,0x72\nJZ 0x00401be9\nCMP EAX,0x62\nJNZ 0x00401e6f\nMOV byte ptr [0x006082e0],0x0\nJMP 0x00401bb0\nMOV qword ptr [0x006082d8],0x0\nJMP 0x00401bb0\nCMP EAX,-0x1\nJNZ 0x00401e20\nMOV RDI,qword ptr [0x006082d0]\nMOV AL,byte ptr [RDI]\nCMP qword ptr [0x006082d8],0x0\nJZ 0x00401c24\nTEST AL,AL\nJZ 0x00401cb0\nCALL 0x004014e0\nJMP 0x00401cb5\nTEST AL,AL\nJNZ 0x00401c4d\nXOR EDI,EDI\nMOV ESI,0x4057a7\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004016c0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x006082e8],XMM0\nMOV qword ptr [0x00608308],0x608330\nMOV qword ptr [0x00608310],0x0\nMOV RBP,qword ptr [0x006082d0]\nMOV RDI,RBP\nCALL 0x004014e0\nMOV EDX,0x6082e8\nMOV RDI,RBP\nMOV RSI,RAX\nCALL 0x00401730\nMOV RCX,RAX\nTEST RCX,RCX\nJZ 0x00401ca7\nMOV EDI,0x1\nXOR ESI,ESI\nMOV EDX,0x405c39\nXOR EAX,EAX\nCALL 0x004016c0\nMOV RAX,qword ptr [0x006082d8]\nJMP 0x00401cc3\nMOV EAX,0x1\nMOV qword ptr [0x006082d8],RAX\nMOV qword ptr [0x00608430],RAX\nMOV qword ptr [0x00608438],0x2000\nCMP RAX,0x1000\nJNC 0x00401cdd\nMOV ECX,0x2001\nJMP 0x00401d23\nMOV RAX,qword ptr [0x006082d8]\nMOV EDX,0x2000\nMOV RSI,0x7ffffffffffffffe\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST RDX,RDX\nJS 0x00401e1b\nLEA RCX,[RDX + RDX*0x1]\nMOV qword ptr [0x00608438],RCX\nAND RDX,RSI\nCMP RAX,RDX\nMOV RDX,RCX\nJNC 0x00401d00\nOR RCX,0x1\nADD RCX,RAX\nLEA RDI,[RCX + RCX*0x1]\nMOV qword ptr [0x00608440],RDI\nCMP RCX,RDI\nJNC 0x00401e1b\nCMP qword ptr [0x00608438],RCX\nJNC 0x00401e1b\nCALL 0x00404a60\nMOV qword ptr [0x00608448],RAX\nMOV RDX,qword ptr [0x006082d8]\nTEST RDX,RDX\nJZ 0x00401d81\nMOV RSI,qword ptr [0x006082d0]\nINC RDX\nMOV RDI,RAX\nCALL 0x004015d0\nMOV RAX,qword ptr [0x00608448]\nADD RAX,qword ptr [0x006082d8]\nJMP 0x00401d84\nINC RAX\nMOV qword ptr [0x00608448],RAX\nMOVSXD RAX,dword ptr [0x00608290]\nCMP EAX,R14D\nLEA RAX,[RBX + RAX*0x8]\nMOV EBP,0x405af0\nCMOVL RBP,RAX\nMOV RDI,qword ptr [RBP]\nTEST RDI,RDI\nJZ 0x00401dd6\nADD RBP,0x8\nMOV BL,0x1\nNOP dword ptr CS:[RAX + RAX*0x1]\nCALL 0x00401e80\nAND BL,AL\nMOV RDI,qword ptr [RBP]\nADD RBP,0x8\nTEST RDI,RDI\nJNZ 0x00401dc0\nJMP 0x00401dd8\nMOV BL,0x1\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x00401fb0\nCMP byte ptr [0x00608450],0x1\nJNZ 0x00401e0c\nXOR EDI,EDI\nCALL 0x00401560\nTEST EAX,EAX\nJNS 0x00401e0c\nCALL 0x00401400\nMOV ESI,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV EDX,0x405c7e\nXOR EAX,EAX\nCALL 0x004016c0\nXOR BL,0x1\nMOVZX EAX,BL\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x00404bf0\nCMP EAX,0xffffff7d\nJZ 0x00401e35\nCMP EAX,0xffffff7e\nJNZ 0x00401e6f\nXOR EDI,EDI\nCALL 0x00401880\nMOV RDI,qword ptr [0x00608288]\nMOV RCX,qword ptr [0x00608208]\nMOV qword ptr [RSP],0x0\nMOV ESI,0x40575c\nMOV EDX,0x40577d\nMOV R8D,0x40578b\nMOV R9D,0x405797\nXOR EAX,EAX\nCALL 0x00404930\nXOR EDI,EDI\nCALL 0x00401700\nMOV EDI,0x1\nCALL 0x00401880\nNOP dword ptr [RAX]\n'
p634
S'55\n41 56\n53\n48 83 ec 10\n48 89 f3\n41 89 fe\n48 8b 3b\ne8 0a 10 00 00\nbf 06 00 00 00\nbe f9 62 40 00\ne8 3b fb ff ff\nbf 81 57 40 00\nbe 60 57 40 00\ne8 4c f9 ff ff\nbf 81 57 40 00\ne8 22 f9 ff ff\nbf 80 29 40 00\ne8 08 3a 00 00\n48 c7 05 4d 67 20 00 f8 62 40 00\n48 c7 05 4a 67 20 00 01 00 00 00\nc6 05 4b 67 20 00 01\neb 19\n48 8b 05 fa 66 20 00\n48 89 05 2b 67 20 00\n66 66 2e 0f 1f 84 00 00 00 00 00\nba 78 57 40 00\nb9 00 5b 40 00\n45 31 c0\n44 89 f7\n48 89 de\ne8 28 f9 ff ff\n83 f8 61\n7e 29\n83 f8 73\n74 c5\n83 f8 72\n74 12\n83 f8 62\n0f 85 8f 02 00 00\nc6 05 f9 66 20 00 00\neb c7\n48 c7 05 e4 66 20 00 00 00 00 00\neb ba\n83 f8 ff\n0f 85 21 02 00 00\n48 8b 3d ca 66 20 00\n8a 07\n48 83 3d c8 66 20 00 00\n74 12\n84 c0\n0f 84 96 00 00 00\ne8 c1 f8 ff ff\ne9 91 00 00 00\n84 c0\n75 25\n31 ff\nbe a7 57 40 00\nba 05 00 00 00\ne8 87 f8 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 73 fa ff ff\n0f 57 c0\n0f 11 05 91 66 20 00\n48 c7 05 a6 66 20 00 30 83 60 00\n48 c7 05 a3 66 20 00 00 00 00 00\n48 8b 2d 5c 66 20 00\n48 89 ef\ne8 64 f8 ff ff\nba e8 82 60 00\n48 89 ef\n48 89 c6\ne8 a4 fa ff ff\n48 89 c1\n48 85 c9\n74 13\nbf 01 00 00 00\n31 f6\nba 39 5c 40 00\n31 c0\ne8 19 fa ff ff\n48 8b 05 2a 66 20 00\neb 13\nb8 01 00 00 00\n48 89 05 1c 66 20 00\n48 89 05 6d 67 20 00\n48 c7 05 6a 67 20 00 00 20 00 00\n48 3d 00 10 00 00\n73 07\nb9 01 20 00 00\neb 46\n48 8b 05 f4 65 20 00\nba 00 20 00 00\n48 be fe ff ff ff ff ff ff 7f\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 85 d2\n0f 88 12 01 00 00\n48 8d 0c 12\n48 89 0d 24 67 20 00\n48 21 f2\n48 39 d0\n48 89 ca\n73 e1\n48 83 c9 01\n48 01 c1\n48 8d 3c 09\n48 89 3d 0f 67 20 00\n48 39 f9\n0f 83 e1 00 00 00\n48 39 0d f7 66 20 00\n0f 83 d4 00 00 00\ne8 14 2d 00 00\n48 89 05 f5 66 20 00\n48 8b 15 7e 65 20 00\n48 85 d2\n74 22\n48 8b 35 6a 65 20 00\n48 ff c2\n48 89 c7\ne8 5f f8 ff ff\n48 8b 05 d0 66 20 00\n48 03 05 59 65 20 00\neb 03\n48 ff c0\n48 89 05 bd 66 20 00\n48 63 05 fe 64 20 00\n44 39 f0\n48 8d 04 c3\nbd f0 5a 40 00\n48 0f 4c e8\n48 8b 7d 00\n48 85 ff\n74 2b\n48 83 c5 08\nb3 01\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\ne8 bb 00 00 00\n20 c3\n48 8b 7d 00\n48 83 c5 08\n48 85 ff\n75 ec\neb 02\nb3 01\n31 ff\n31 f6\ne8 cf 01 00 00\n80 3d 68 66 20 00 01\n75 22\n31 ff\ne8 6f f7 ff ff\n85 c0\n79 17\ne8 06 f6 ff ff\n8b 30\n31 db\n31 ff\nba 7e 5c 40 00\n31 c0\ne8 b4 f8 ff ff\n80 f3 01\n0f b6 c3\n48 83 c4 10\n5b\n41 5e\n5d\nc3\ne8 d0 2d 00 00\n3d 7d ff ff ff\n74 0e\n3d 7e ff ff ff\n75 41\n31 ff\ne8 4b fa ff ff\n48 8b 3d 4c 64 20 00\n48 8b 0d c5 63 20 00\n48 c7 04 24 00 00 00 00\nbe 5c 57 40 00\nba 7d 57 40 00\n41 b8 8b 57 40 00\n41 b9 97 57 40 00\n31 c0\ne8 c8 2a 00 00\n31 ff\ne8 91 f8 ff ff\nbf 01 00 00 00\ne8 07 fa ff ff\n0f 1f 80 00 00 00 00\n'
p635
S'.text:0000000000401b30\n.text:0000000000401b31\n.text:0000000000401b33\n.text:0000000000401b34\n.text:0000000000401b38\n.text:0000000000401b3b\n.text:0000000000401b3e\n.text:0000000000401b41\n.text:0000000000401b46\n.text:0000000000401b4b\n.text:0000000000401b50\n.text:0000000000401b55\n.text:0000000000401b5a\n.text:0000000000401b5f\n.text:0000000000401b64\n.text:0000000000401b69\n.text:0000000000401b6e\n.text:0000000000401b73\n.text:0000000000401b78\n.text:0000000000401b83\n.text:0000000000401b8e\n.text:0000000000401b95\n.text:0000000000401b97\n.text:0000000000401b9e\n.text:0000000000401ba5\n.text:0000000000401bb0\n.text:0000000000401bb5\n.text:0000000000401bba\n.text:0000000000401bbd\n.text:0000000000401bc0\n.text:0000000000401bc3\n.text:0000000000401bc8\n.text:0000000000401bcb\n.text:0000000000401bcd\n.text:0000000000401bd0\n.text:0000000000401bd2\n.text:0000000000401bd5\n.text:0000000000401bd7\n.text:0000000000401bda\n.text:0000000000401be0\n.text:0000000000401be7\n.text:0000000000401be9\n.text:0000000000401bf4\n.text:0000000000401bf6\n.text:0000000000401bf9\n.text:0000000000401bff\n.text:0000000000401c06\n.text:0000000000401c08\n.text:0000000000401c10\n.text:0000000000401c12\n.text:0000000000401c14\n.text:0000000000401c1a\n.text:0000000000401c1f\n.text:0000000000401c24\n.text:0000000000401c26\n.text:0000000000401c28\n.text:0000000000401c2a\n.text:0000000000401c2f\n.text:0000000000401c34\n.text:0000000000401c39\n.text:0000000000401c3c\n.text:0000000000401c41\n.text:0000000000401c43\n.text:0000000000401c45\n.text:0000000000401c48\n.text:0000000000401c4d\n.text:0000000000401c50\n.text:0000000000401c57\n.text:0000000000401c62\n.text:0000000000401c6d\n.text:0000000000401c74\n.text:0000000000401c77\n.text:0000000000401c7c\n.text:0000000000401c81\n.text:0000000000401c84\n.text:0000000000401c87\n.text:0000000000401c8c\n.text:0000000000401c8f\n.text:0000000000401c92\n.text:0000000000401c94\n.text:0000000000401c99\n.text:0000000000401c9b\n.text:0000000000401ca0\n.text:0000000000401ca2\n.text:0000000000401ca7\n.text:0000000000401cae\n.text:0000000000401cb0\n.text:0000000000401cb5\n.text:0000000000401cbc\n.text:0000000000401cc3\n.text:0000000000401cce\n.text:0000000000401cd4\n.text:0000000000401cd6\n.text:0000000000401cdb\n.text:0000000000401cdd\n.text:0000000000401ce4\n.text:0000000000401ce9\n.text:0000000000401cf3\n.text:0000000000401d00\n.text:0000000000401d03\n.text:0000000000401d09\n.text:0000000000401d0d\n.text:0000000000401d14\n.text:0000000000401d17\n.text:0000000000401d1a\n.text:0000000000401d1d\n.text:0000000000401d1f\n.text:0000000000401d23\n.text:0000000000401d26\n.text:0000000000401d2a\n.text:0000000000401d31\n.text:0000000000401d34\n.text:0000000000401d3a\n.text:0000000000401d41\n.text:0000000000401d47\n.text:0000000000401d4c\n.text:0000000000401d53\n.text:0000000000401d5a\n.text:0000000000401d5d\n.text:0000000000401d5f\n.text:0000000000401d66\n.text:0000000000401d69\n.text:0000000000401d6c\n.text:0000000000401d71\n.text:0000000000401d78\n.text:0000000000401d7f\n.text:0000000000401d81\n.text:0000000000401d84\n.text:0000000000401d8b\n.text:0000000000401d92\n.text:0000000000401d95\n.text:0000000000401d99\n.text:0000000000401d9e\n.text:0000000000401da2\n.text:0000000000401da6\n.text:0000000000401da9\n.text:0000000000401dab\n.text:0000000000401daf\n.text:0000000000401db1\n.text:0000000000401dc0\n.text:0000000000401dc5\n.text:0000000000401dc7\n.text:0000000000401dcb\n.text:0000000000401dcf\n.text:0000000000401dd2\n.text:0000000000401dd4\n.text:0000000000401dd6\n.text:0000000000401dd8\n.text:0000000000401dda\n.text:0000000000401ddc\n.text:0000000000401de1\n.text:0000000000401de8\n.text:0000000000401dea\n.text:0000000000401dec\n.text:0000000000401df1\n.text:0000000000401df3\n.text:0000000000401df5\n.text:0000000000401dfa\n.text:0000000000401dfc\n.text:0000000000401dfe\n.text:0000000000401e00\n.text:0000000000401e05\n.text:0000000000401e07\n.text:0000000000401e0c\n.text:0000000000401e0f\n.text:0000000000401e12\n.text:0000000000401e16\n.text:0000000000401e17\n.text:0000000000401e19\n.text:0000000000401e1a\n.text:0000000000401e1b\n.text:0000000000401e20\n.text:0000000000401e25\n.text:0000000000401e27\n.text:0000000000401e2c\n.text:0000000000401e2e\n.text:0000000000401e30\n.text:0000000000401e35\n.text:0000000000401e3c\n.text:0000000000401e43\n.text:0000000000401e4b\n.text:0000000000401e50\n.text:0000000000401e55\n.text:0000000000401e5b\n.text:0000000000401e61\n.text:0000000000401e63\n.text:0000000000401e68\n.text:0000000000401e6a\n.text:0000000000401e6f\n.text:0000000000401e74\n.text:0000000000401e79\n'
p636
tp637
sS'realloc'
p638
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p639
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00608170)();\u000a  return pvVar1;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x00608170]\n'
p641
S'ff 25 fa 6a 20 00\n'
p642
S'.plt:0000000000401670\n'
p643
tp644
sS'xcharalloc'
p645
(S'\n__stdcall xcharalloc(size_t n)\n'
p646
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p647
S'JMP 0x00404a60\n'
p648
S'e9 2b ff ff ff\n'
p649
S'.text:0000000000404b30\n'
p650
tp651
sS'c_isupper'
p652
(S'\n__stdcall c_isupper()\n'
p653
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p654
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p655
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p656
S'.text:0000000000404eb0\n.text:0000000000404eb3\n.text:0000000000404eb6\n.text:0000000000404eb9\n'
p657
tp658
sS'__fprintf_chk'
p659
(S'\n__stdcall __fprintf_chk()\n'
p660
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_006081c8)();\u000a  return;\u000a}\u000a\u000a
p661
S'JMP qword ptr [0x006081c8]\n'
p662
S'ff 25 a2 6a 20 00\n'
p663
S'.plt:0000000000401720\n'
p664
tp665
sS'isatty'
p666
(S'\n__stdcall isatty(int __fd)\n'
p667
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint isatty(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_isatty_00608070)();\u000a  return iVar1;\u000a}\u000a\u000a
p668
S'JMP qword ptr [0x00608070]\n'
p669
S'ff 25 fa 6b 20 00\n'
p670
S'.plt:0000000000401470\n'
p671
tp672
sS'get_charset_aliases'
p673
(S'\n__stdcall get_charset_aliases()\n'
p674
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_004052a4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_004052a4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_004052a4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_004052a4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_004052a4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_004052a4_caseD_9;\u000a      case -1:\u000a        goto switchD_004052a4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_004052fd:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00405303:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_004052a4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00405303;\u000a  }\u000a  goto LAB_004052fd;\u000a}\u000a\u000a
p675
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060a5e0]\nTEST R15,R15\nJNZ 0x00405312\nMOV EDI,0x40695c\nCALL 0x004013c0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004050c8\nCMP byte ptr [RBX],0x0\nJNZ 0x004050cd\nMOV EBX,0x40696c\nMOV RDI,RBX\nCALL 0x004014e0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x004050e7\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x004050e9\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x004015f0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x0040513d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004015d0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00405148\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00405165\nMOV R15D,0x4062f9\nJMP 0x0040530b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004016d0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004052fd\nMOV ESI,0x405a01\nMOV EDI,EBP\nCALL 0x00401680\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004052c4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00405290\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401440\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401440\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00405290\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401620\nMOV ESI,0x40697b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401550\nCMP EAX,0x2\nJL 0x004052e4\nMOV RDI,R12\nCALL 0x004014e0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004014e0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040526d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401670\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x004051b4\nJMP 0x004052cd\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x004015f0\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x004051b4\nJMP 0x004052cd\nMOV RDI,RBX\nCALL 0x00401460\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x004051f7\nJMP qword ptr [0x406820 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401460\nCMP EAX,-0x1\nJZ 0x004052e4\nCMP EAX,0xa\nJNZ 0x004052b0\nJMP 0x00405290\nMOV EDI,EBP\nCALL 0x00401560\nJMP 0x004052fd\nMOV RDI,R15\nCALL 0x004013d0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00404c70\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004052fd\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00405303\nMOV R15D,0x4062f9\nMOV RDI,R13\nCALL 0x004013d0\nMOV qword ptr [0x0060a5e0],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p676
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 38 55 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 5c 69 40 00\ne8 05 c3 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 6c 69 40 00\n48 89 df\ne8 0b c4 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 f9 c4 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 c3 c4 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf f9 62 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 5c c5 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 01 5a 40 00\n89 ef\ne8 f6 c4 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 6b c2 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 5b c2 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 1f c4 ff ff\nbe 7b 69 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 3a c3 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 b9 c2 ff ff\n49 89 c4\n48 89 ef\ne8 ae c2 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 16 c4 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 75 c3 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 c8 c1 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 20 68 40 00\n48 89 df\ne8 a8 c1 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 95 c2 ff ff\neb 30\n4c 89 ff\ne8 fb c0 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 84 f9 ff ff\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf f9 62 40 00\n4c 89 ef\ne8 c5 c0 ff ff\n4c 89 3d ce 52 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p677
S'.text:0000000000405090\n.text:0000000000405091\n.text:0000000000405093\n.text:0000000000405095\n.text:0000000000405097\n.text:0000000000405099\n.text:000000000040509a\n.text:00000000004050a1\n.text:00000000004050a8\n.text:00000000004050ab\n.text:00000000004050b1\n.text:00000000004050b6\n.text:00000000004050bb\n.text:00000000004050be\n.text:00000000004050c1\n.text:00000000004050c3\n.text:00000000004050c6\n.text:00000000004050c8\n.text:00000000004050cd\n.text:00000000004050d0\n.text:00000000004050d5\n.text:00000000004050d8\n.text:00000000004050db\n.text:00000000004050dd\n.text:00000000004050e2\n.text:00000000004050e5\n.text:00000000004050e7\n.text:00000000004050e9\n.text:00000000004050ed\n.text:00000000004050f2\n.text:00000000004050f7\n.text:00000000004050fa\n.text:00000000004050fd\n.text:00000000004050ff\n.text:0000000000405102\n.text:0000000000405105\n.text:0000000000405108\n.text:000000000040510d\n.text:0000000000405110\n.text:0000000000405113\n.text:0000000000405116\n.text:0000000000405118\n.text:000000000040511e\n.text:0000000000405128\n.text:000000000040512d\n.text:0000000000405137\n.text:000000000040513b\n.text:000000000040513d\n.text:0000000000405143\n.text:0000000000405148\n.text:0000000000405152\n.text:0000000000405157\n.text:0000000000405161\n.text:0000000000405165\n.text:000000000040516a\n.text:000000000040516c\n.text:000000000040516f\n.text:0000000000405174\n.text:0000000000405176\n.text:0000000000405178\n.text:000000000040517e\n.text:0000000000405183\n.text:0000000000405185\n.text:000000000040518a\n.text:000000000040518d\n.text:0000000000405190\n.text:0000000000405196\n.text:000000000040519b\n.text:00000000004051a0\n.text:00000000004051a2\n.text:00000000004051a7\n.text:00000000004051aa\n.text:00000000004051af\n.text:00000000004051b4\n.text:00000000004051b9\n.text:00000000004051bc\n.text:00000000004051bf\n.text:00000000004051c2\n.text:00000000004051c5\n.text:00000000004051c8\n.text:00000000004051cd\n.text:00000000004051d0\n.text:00000000004051d5\n.text:00000000004051d8\n.text:00000000004051dd\n.text:00000000004051e0\n.text:00000000004051e5\n.text:00000000004051ea\n.text:00000000004051ed\n.text:00000000004051f2\n.text:00000000004051f7\n.text:00000000004051f9\n.text:00000000004051fc\n.text:0000000000405201\n.text:0000000000405206\n.text:0000000000405208\n.text:000000000040520b\n.text:000000000040520e\n.text:0000000000405211\n.text:0000000000405216\n.text:0000000000405219\n.text:000000000040521f\n.text:0000000000405222\n.text:0000000000405227\n.text:000000000040522a\n.text:000000000040522d\n.text:0000000000405232\n.text:0000000000405235\n.text:000000000040523a\n.text:000000000040523f\n.text:0000000000405242\n.text:0000000000405244\n.text:0000000000405248\n.text:000000000040524d\n.text:0000000000405252\n.text:0000000000405255\n.text:000000000040525a\n.text:000000000040525d\n.text:0000000000405262\n.text:0000000000405265\n.text:000000000040526b\n.text:000000000040526d\n.text:0000000000405272\n.text:0000000000405276\n.text:000000000040527b\n.text:000000000040527e\n.text:0000000000405281\n.text:0000000000405287\n.text:0000000000405290\n.text:0000000000405293\n.text:0000000000405298\n.text:000000000040529b\n.text:000000000040529e\n.text:00000000004052a4\n.text:00000000004052b0\n.text:00000000004052b3\n.text:00000000004052b8\n.text:00000000004052bb\n.text:00000000004052bd\n.text:00000000004052c0\n.text:00000000004052c2\n.text:00000000004052c4\n.text:00000000004052c6\n.text:00000000004052cb\n.text:00000000004052cd\n.text:00000000004052d0\n.text:00000000004052d5\n.text:00000000004052d7\n.text:00000000004052dc\n.text:00000000004052df\n.text:00000000004052e4\n.text:00000000004052e7\n.text:00000000004052ec\n.text:00000000004052f1\n.text:00000000004052f4\n.text:00000000004052f6\n.text:00000000004052fb\n.text:00000000004052fd\n.text:0000000000405303\n.text:0000000000405306\n.text:000000000040530b\n.text:0000000000405312\n.text:0000000000405315\n.text:000000000040531c\n.text:000000000040531d\n.text:000000000040531f\n.text:0000000000405321\n.text:0000000000405323\n.text:0000000000405325\n.text:0000000000405326\n'
p678
tp679
sS're_search'
p680
(S'\n__stdcall re_search(re_pattern_buffer * __buffer, char * __string, int __length, int __start, int __range, re_registers * __regs)\n'
p681
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint re_search(re_pattern_buffer *__buffer,char *__string,int __length,int __start,int __range,\u000a             re_registers *__regs)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_re_search_00608158)();\u000a  return iVar1;\u000a}\u000a\u000a
p682
S'JMP qword ptr [0x00608158]\n'
p683
S'ff 25 12 6b 20 00\n'
p684
S'.plt:0000000000401640\n'
p685
tp686
sS'nl_langinfo'
p687
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p688
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00608140)();\u000a  return pcVar1;\u000a}\u000a\u000a
p689
S'JMP qword ptr [0x00608140]\n'
p690
S'ff 25 2a 6b 20 00\n'
p691
S'.plt:0000000000401610\n'
p692
tp693
sS'c_isalnum'
p694
(S'\n__stdcall c_isalnum()\n'
p695
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p696
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00404dcb\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00404dcb\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00404dca\nXOR EAX,EAX\nRET\n'
p697
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p698
S'.text:0000000000404db0\n.text:0000000000404db2\n.text:0000000000404db5\n.text:0000000000404db8\n.text:0000000000404dba\n.text:0000000000404dc4\n.text:0000000000404dc8\n.text:0000000000404dca\n.text:0000000000404dcb\n.text:0000000000404dce\n.text:0000000000404dd1\n.text:0000000000404dd3\n.text:0000000000404dd5\n'
p699
tp700
sS'tac_nonseekable'
p701
(S'\n__stdcall tac_nonseekable(char * file)\n'
p702
V\u000a_Bool tac_nonseekable(char *file)\u000a\u000a{\u000a  _Bool _Var1;\u000a  uint uVar2;\u000a  off_t oVar3;\u000a  char *local_18;\u000a  FILE *local_10;\u000a  \u000a  oVar3 = copy_to_temp(&local_10,&local_18,(char *)((ulong)file & 0xffffffff));\u000a  if (oVar3 < 0) {\u000a    _Var1 = false;\u000a  }\u000a  else {\u000a    uVar2 = fileno((FILE *)local_10);\u000a    _Var1 = tac_seekable((char *)(ulong)uVar2,(off_t)local_18);\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p703
S'PUSH RBX\nSUB RSP,0x10\nMOV RAX,RSI\nMOV ECX,EDI\nLEA RDI,[RSP + 0x8]\nMOV RSI,RSP\nMOV EDX,ECX\nMOV RCX,RAX\nCALL 0x00402620\nMOV RBX,RAX\nTEST RBX,RBX\nJS 0x004020ce\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x004015e0\nMOV RSI,qword ptr [RSP]\nMOV EDI,EAX\nMOV RDX,RBX\nCALL 0x004020e0\nJMP 0x004020d0\nXOR EAX,EAX\nADD RSP,0x10\nPOP RBX\nRET\n'
p704
S'53\n48 83 ec 10\n48 89 f0\n89 f9\n48 8d 7c 24 08\n48 89 e6\n89 ca\n48 89 c1\ne8 74 05 00 00\n48 89 c3\n48 85 db\n78 1a\n48 8b 7c 24 08\ne8 22 f5 ff ff\n48 8b 34 24\n89 c7\n48 89 da\ne8 14 00 00 00\neb 02\n31 c0\n48 83 c4 10\n5b\nc3\n'
p705
S'.text:0000000000402090\n.text:0000000000402091\n.text:0000000000402095\n.text:0000000000402098\n.text:000000000040209a\n.text:000000000040209f\n.text:00000000004020a2\n.text:00000000004020a4\n.text:00000000004020a7\n.text:00000000004020ac\n.text:00000000004020af\n.text:00000000004020b2\n.text:00000000004020b4\n.text:00000000004020b9\n.text:00000000004020be\n.text:00000000004020c2\n.text:00000000004020c4\n.text:00000000004020c7\n.text:00000000004020cc\n.text:00000000004020ce\n.text:00000000004020d0\n.text:00000000004020d4\n.text:00000000004020d5\n'
p706
tp707
sS'x2realloc'
p708
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p709
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p710
S'MOV EDX,0x1\nJMP 0x00404ad0\n'
p711
S'ba 01 00 00 00\neb 89\n'
p712
S'.text:0000000000404b40\n.text:0000000000404b45\n'
p713
tp714
sS'__mempcpy_chk'
p715
(S'\n__stdcall __mempcpy_chk()\n'
p716
V\u000avoid __mempcpy_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___mempcpy_chk_00608028)();\u000a  return;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x00608028]\n'
p718
S'ff 25 42 6c 20 00\n'
p719
S'.plt:00000000004013e0\n'
p720
tp721
sS'strlen'
p722
(S'\n__stdcall strlen(char * __s)\n'
p723
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_006080a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p724
S'JMP qword ptr [0x006080a8]\n'
p725
S'ff 25 c2 6b 20 00\n'
p726
S'.plt:00000000004014e0\n'
p727
tp728
sS'memcmp'
p729
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p730
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_006080f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x006080f8]\n'
p732
S'ff 25 72 6b 20 00\n'
p733
S'.plt:0000000000401580\n'
p734
tp735
sS'quotearg_n_style_mem'
p736
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p737
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p738
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403d80\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403b50\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p739
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p740
S'.text:0000000000403de0\n.text:0000000000403de1\n.text:0000000000403de3\n.text:0000000000403de5\n.text:0000000000403de6\n.text:0000000000403dea\n.text:0000000000403ded\n.text:0000000000403df0\n.text:0000000000403df2\n.text:0000000000403df5\n.text:0000000000403df8\n.text:0000000000403dfd\n.text:0000000000403dff\n.text:0000000000403e02\n.text:0000000000403e05\n.text:0000000000403e08\n.text:0000000000403e0d\n.text:0000000000403e11\n.text:0000000000403e12\n.text:0000000000403e14\n.text:0000000000403e16\n.text:0000000000403e17\n'
p741
tp742
sS'_exit'
p743
(S'\n__stdcall _exit(int __status)\n'
p744
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00608050)();\u000a  return;\u000a}\u000a\u000a
p745
S'JMP qword ptr [0x00608050]\n'
p746
S'ff 25 1a 6c 20 00\n'
p747
S'.plt:0000000000401430\n'
p748
tp749
sS'emit_stdin_note'
p750
(S'\n__stdcall emit_stdin_note()\n'
p751
V\u000avoid emit_stdin_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,"\u005cnWith no FILE, or when FILE is -, read standard input.\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p752
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x4057e8\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00608288]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401590\n'
p753
S'50\n31 ff\nbe e8 57 40 00\nba 05 00 00 00\ne8 0e fb ff ff\n48 8b 35 cf 68 20 00\n48 89 c7\n58\ne9 ce fb ff ff\n'
p754
S'.text:00000000004019a0\n.text:00000000004019a1\n.text:00000000004019a3\n.text:00000000004019a8\n.text:00000000004019ad\n.text:00000000004019b2\n.text:00000000004019b9\n.text:00000000004019bc\n.text:00000000004019bd\n'
p755
tp756
sS'__errno_location'
p757
(S'\n__stdcall __errno_location()\n'
p758
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00608038)();\u000a  return piVar1;\u000a}\u000a\u000a
p759
S'JMP qword ptr [0x00608038]\n'
p760
S'ff 25 32 6c 20 00\n'
p761
S'.plt:0000000000401400\n'
p762
tp763
sS'x2nrealloc'
p764
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p765
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p766
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00404afc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404b29\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00404b1a\nTEST RCX,RCX\nJNZ 0x00404b1a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00404aa0\nPUSH RAX\nCALL 0x00404bf0\n'
p767
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p768
S'.text:0000000000404ad0\n.text:0000000000404ad3\n.text:0000000000404ad6\n.text:0000000000404ad9\n.text:0000000000404adb\n.text:0000000000404ae5\n.text:0000000000404ae7\n.text:0000000000404aea\n.text:0000000000404aed\n.text:0000000000404aef\n.text:0000000000404af2\n.text:0000000000404af5\n.text:0000000000404afa\n.text:0000000000404afc\n.text:0000000000404aff\n.text:0000000000404b01\n.text:0000000000404b06\n.text:0000000000404b08\n.text:0000000000404b0b\n.text:0000000000404b0d\n.text:0000000000404b14\n.text:0000000000404b17\n.text:0000000000404b1a\n.text:0000000000404b1d\n.text:0000000000404b21\n.text:0000000000404b24\n.text:0000000000404b29\n.text:0000000000404b2a\n'
p769
tp770
sS'xrealloc'
p771
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p772
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p773
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00404ab7\nTEST RBX,RBX\nJNZ 0x00404ab7\nCALL 0x004013d0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401670\nTEST RBX,RBX\nJZ 0x00404ac9\nTEST RAX,RAX\nJZ 0x00404acb\nPOP RBX\nRET\nCALL 0x00404bf0\n'
p774
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 1d c9 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 b1 cb ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p775
S'.text:0000000000404aa0\n.text:0000000000404aa1\n.text:0000000000404aa4\n.text:0000000000404aa7\n.text:0000000000404aa9\n.text:0000000000404aac\n.text:0000000000404aae\n.text:0000000000404ab3\n.text:0000000000404ab5\n.text:0000000000404ab6\n.text:0000000000404ab7\n.text:0000000000404aba\n.text:0000000000404abf\n.text:0000000000404ac2\n.text:0000000000404ac4\n.text:0000000000404ac7\n.text:0000000000404ac9\n.text:0000000000404aca\n.text:0000000000404acb\n'
p776
tp777
sS'safe_read'
p778
(S'\n__stdcall safe_read(void * buf, size_t count)\n'
p779
V\u000asize_t safe_read(void *buf,size_t count)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  int *piVar4;\u000a  ulong __nbytes;\u000a  size_t unaff_R14;\u000a  \u000a  while( true ) {\u000a    do {\u000a      sVar3 = read((int)buf,(void *)count,__nbytes);\u000a      if (-1 < (long)sVar3) {\u000a        return sVar3;\u000a      }\u000a      piVar4 = __errno_location();\u000a      iVar1 = *piVar4;\u000a    } while (iVar1 == 4);\u000a    uVar2 = __nbytes;\u000a    if (0x7fffe000 < __nbytes && iVar1 == 0x16) {\u000a      sVar3 = unaff_R14;\u000a      uVar2 = 0x7fffe000;\u000a    }\u000a    if (__nbytes < 0x7fffe001) break;\u000a    __nbytes = uVar2;\u000a    unaff_R14 = sVar3;\u000a    if (iVar1 != 0x16) {\u000a      return sVar3;\u000a    }\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p780
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R15,RSI\nMOV R12D,EDI\nMOV R13D,0x7fffe000\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,R12D\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00401570\nMOV RBP,RAX\nTEST RBP,RBP\nJNS 0x004044c4\nCALL 0x00401400\nMOV EAX,dword ptr [RAX]\nCMP EAX,0x4\nJZ 0x00404470\nCMP EAX,0x16\nSETZ CL\nCMP RBX,0x7fffe000\nSETA DL\nAND DL,CL\nMOV RCX,RBX\nCMOVNZ RCX,R13\nTEST DL,DL\nCMOVZ R14,RBP\nCMP RBX,0x7fffe001\nJC 0x004044c7\nCMP EAX,0x16\nMOV RBX,RCX\nJZ 0x00404470\nJMP 0x004044c7\nMOV R14,RBP\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p781
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n48 89 d3\n49 89 f7\n41 89 fc\n41 bd 00 e0 ff 7f\n66 0f 1f 44 00 00\n44 89 e7\n4c 89 fe\n48 89 da\ne8 f2 d0 ff ff\n48 89 c5\n48 85 ed\n79 3e\ne8 75 cf ff ff\n8b 00\n83 f8 04\n74 de\n83 f8 16\n0f 94 c1\n48 81 fb 00 e0 ff 7f\n0f 97 c2\n20 ca\n48 89 d9\n49 0f 45 cd\n84 d2\n4c 0f 44 f5\n48 81 fb 01 e0 ff 7f\n72 0d\n83 f8 16\n48 89 cb\n74 ae\neb 03\n49 89 ee\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p782
S'.text:0000000000404450\n.text:0000000000404451\n.text:0000000000404453\n.text:0000000000404455\n.text:0000000000404457\n.text:0000000000404459\n.text:000000000040445a\n.text:000000000040445b\n.text:000000000040445e\n.text:0000000000404461\n.text:0000000000404464\n.text:000000000040446a\n.text:0000000000404470\n.text:0000000000404473\n.text:0000000000404476\n.text:0000000000404479\n.text:000000000040447e\n.text:0000000000404481\n.text:0000000000404484\n.text:0000000000404486\n.text:000000000040448b\n.text:000000000040448d\n.text:0000000000404490\n.text:0000000000404492\n.text:0000000000404495\n.text:0000000000404498\n.text:000000000040449f\n.text:00000000004044a2\n.text:00000000004044a4\n.text:00000000004044a7\n.text:00000000004044ab\n.text:00000000004044ad\n.text:00000000004044b1\n.text:00000000004044b8\n.text:00000000004044ba\n.text:00000000004044bd\n.text:00000000004044c0\n.text:00000000004044c2\n.text:00000000004044c4\n.text:00000000004044c7\n.text:00000000004044ca\n.text:00000000004044ce\n.text:00000000004044cf\n.text:00000000004044d1\n.text:00000000004044d3\n.text:00000000004044d5\n.text:00000000004044d7\n.text:00000000004044d8\n'
p783
tp784
sS'quotearg_n_options'
p785
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p786
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p787
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401400\nTEST R12D,R12D\nJS 0x00403d01\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x00608218]\nCMP dword ptr [0x00608220],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00403c1b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x608228\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00404aa0\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x00608218],R15\nJNZ 0x00403be2\nMOVUPS XMM0,xmmword ptr [0x00608228]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x00608220]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401540\nMOV dword ptr [0x00608220],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00402d70\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00403c7d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00403ceb\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60a4e0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00403ca8\nCALL 0x004013d0\nMOV RDI,R15\nCALL 0x00404b30\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00402d70\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004013f0\n'
p788
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 91 d8 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 8e 46 20 00\n44 39 25 8f 46 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 28 82 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 d8 0e 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 43 46 20 00\n75 0b\n0f 10 05 4a 46 20 00\n41 0f 11 07\n8b 05 38 46 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 3d d9 ff ff\n89 1d 17 46 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 e0 a4 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 28 d7 ff ff\n4c 89 ff\ne8 80 0e 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 ea d6 ff ff\n'
p789
S'.text:0000000000403b50\n.text:0000000000403b51\n.text:0000000000403b53\n.text:0000000000403b55\n.text:0000000000403b57\n.text:0000000000403b59\n.text:0000000000403b5a\n.text:0000000000403b5e\n.text:0000000000403b61\n.text:0000000000403b64\n.text:0000000000403b67\n.text:0000000000403b6a\n.text:0000000000403b6f\n.text:0000000000403b72\n.text:0000000000403b78\n.text:0000000000403b7d\n.text:0000000000403b7f\n.text:0000000000403b83\n.text:0000000000403b8a\n.text:0000000000403b91\n.text:0000000000403b96\n.text:0000000000403b9b\n.text:0000000000403ba0\n.text:0000000000403ba2\n.text:0000000000403ba7\n.text:0000000000403baa\n.text:0000000000403bad\n.text:0000000000403bb3\n.text:0000000000403bb5\n.text:0000000000403bb8\n.text:0000000000403bbc\n.text:0000000000403bbf\n.text:0000000000403bc3\n.text:0000000000403bc8\n.text:0000000000403bcb\n.text:0000000000403bce\n.text:0000000000403bd5\n.text:0000000000403bd7\n.text:0000000000403bde\n.text:0000000000403be2\n.text:0000000000403be8\n.text:0000000000403beb\n.text:0000000000403bef\n.text:0000000000403bf2\n.text:0000000000403bf5\n.text:0000000000403bf9\n.text:0000000000403bfb\n.text:0000000000403bfe\n.text:0000000000403c03\n.text:0000000000403c09\n.text:0000000000403c0c\n.text:0000000000403c11\n.text:0000000000403c16\n.text:0000000000403c1b\n.text:0000000000403c1e\n.text:0000000000403c22\n.text:0000000000403c26\n.text:0000000000403c2b\n.text:0000000000403c2f\n.text:0000000000403c33\n.text:0000000000403c37\n.text:0000000000403c3b\n.text:0000000000403c3f\n.text:0000000000403c44\n.text:0000000000403c47\n.text:0000000000403c4a\n.text:0000000000403c4d\n.text:0000000000403c52\n.text:0000000000403c55\n.text:0000000000403c58\n.text:0000000000403c5b\n.text:0000000000403c5c\n.text:0000000000403c61\n.text:0000000000403c65\n.text:0000000000403c68\n.text:0000000000403c6b\n.text:0000000000403c6d\n.text:0000000000403c72\n.text:0000000000403c76\n.text:0000000000403c7b\n.text:0000000000403c7d\n.text:0000000000403c81\n.text:0000000000403c86\n.text:0000000000403c89\n.text:0000000000403c8c\n.text:0000000000403c91\n.text:0000000000403c96\n.text:0000000000403c99\n.text:0000000000403c9e\n.text:0000000000403ca1\n.text:0000000000403ca3\n.text:0000000000403ca8\n.text:0000000000403cab\n.text:0000000000403cb0\n.text:0000000000403cb3\n.text:0000000000403cb6\n.text:0000000000403cbb\n.text:0000000000403cbe\n.text:0000000000403cc2\n.text:0000000000403cc5\n.text:0000000000403cc8\n.text:0000000000403ccd\n.text:0000000000403cd2\n.text:0000000000403cd7\n.text:0000000000403cda\n.text:0000000000403cdd\n.text:0000000000403cde\n.text:0000000000403ce3\n.text:0000000000403ce7\n.text:0000000000403ceb\n.text:0000000000403cef\n.text:0000000000403cf2\n.text:0000000000403cf6\n.text:0000000000403cf7\n.text:0000000000403cf9\n.text:0000000000403cfb\n.text:0000000000403cfd\n.text:0000000000403cff\n.text:0000000000403d00\n.text:0000000000403d01\n'
p790
tp791
sS'strcmp'
p792
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p793
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00608118)();\u000a  return iVar1;\u000a}\u000a\u000a
p794
S'JMP qword ptr [0x00608118]\n'
p795
S'ff 25 52 6b 20 00\n'
p796
S'.plt:00000000004015c0\n'
p797
tp798
sS'read'
p799
(S'\n__stdcall read(int __fd, void * __buf, size_t __nbytes)\n'
p800
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000assize_t read(int __fd,void *__buf,size_t __nbytes)\u000a\u000a{\u000a  ssize_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_read_006080f0)();\u000a  return sVar1;\u000a}\u000a\u000a
p801
S'JMP qword ptr [0x006080f0]\n'
p802
S'ff 25 7a 6b 20 00\n'
p803
S'.plt:0000000000401570\n'
p804
tp805
sS'set_custom_quoting'
p806
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p807
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p808
S'TEST RDI,RDI\nMOV EAX,0x60a4a0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00402ce5\nTEST RDX,RDX\nJZ 0x00402ce5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x004013f0\n'
p809
S'48 85 ff\nb8 a0 a4 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 05 e7 ff ff\n'
p810
S'.text:0000000000402cc0\n.text:0000000000402cc3\n.text:0000000000402cc8\n.text:0000000000402ccc\n.text:0000000000402cd2\n.text:0000000000402cd5\n.text:0000000000402cd7\n.text:0000000000402cda\n.text:0000000000402cdc\n.text:0000000000402ce0\n.text:0000000000402ce4\n.text:0000000000402ce5\n.text:0000000000402ce6\n'
p811
tp812
sS'c_isalpha'
p813
(S'\n__stdcall c_isalpha()\n'
p814
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p815
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00404dfb\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p816
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p817
S'.text:0000000000404de0\n.text:0000000000404de3\n.text:0000000000404de6\n.text:0000000000404de8\n.text:0000000000404df2\n.text:0000000000404df4\n.text:0000000000404df7\n.text:0000000000404dfa\n.text:0000000000404dfb\n.text:0000000000404dfd\n'
p818
tp819
sS'quotearg_custom_mem'
p820
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p821
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p822
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00403f60\n'
p823
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p824
S'.text:0000000000403ff0\n.text:0000000000403ff3\n.text:0000000000403ff6\n.text:0000000000403ff9\n.text:0000000000403ffc\n.text:0000000000403ffe\n.text:0000000000404001\n'
p825
tp826
sS'close_stdout'
p827
(S'\n__stdcall close_stdout()\n'
p828
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_004029a7;\u000a    }\u000a    uVar4 = dcgettext(0,0x405a07,5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x405c39,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_004029a7:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p829
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x00608288]\nCALL 0x00404f00\nTEST EAX,EAX\nJZ 0x004029a7\nCMP byte ptr [0x0060a490],0x0\nJZ 0x004029bc\nCALL 0x00401400\nCMP dword ptr [RAX],0x20\nJNZ 0x004029bc\nMOV RDI,qword ptr [0x006082c0]\nCALL 0x00404f00\nTEST EAX,EAX\nJNZ 0x00402a01\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x405a07\nMOV EDX,0x5\nCALL 0x004014c0\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060a488]\nCALL 0x00401400\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00402a0c\nXOR EDI,EDI\nMOV EDX,0x405c39\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004016c0\nMOV EDI,dword ptr [0x00608210]\nCALL 0x00401430\nMOV EDI,dword ptr [0x00608210]\nCALL 0x00401430\nMOV RDI,RBX\nCALL 0x00403ee0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x405c35\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004016c0\nMOV EDI,dword ptr [0x00608210]\nCALL 0x00401430\n'
p830
S'55\n41 56\n53\n48 8b 3d fd 58 20 00\ne8 70 25 00 00\n85 c0\n74 13\n80 3d f5 7a 20 00 00\n74 1f\ne8 5e ea ff ff\n83 38 20\n75 15\n48 8b 3d 12 59 20 00\ne8 4d 25 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 07 5a 40 00\nba 05 00 00 00\ne8 f3 ea ff ff\n49 89 c6\n48 8b 1d b1 7a 20 00\ne8 24 ea ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 39 5c 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 ca ec ff ff\n8b 3d 14 58 20 00\ne8 2f ea ff ff\n8b 3d 09 58 20 00\ne8 24 ea ff ff\n48 89 df\ne8 cc 14 00 00\n48 89 c1\n31 ff\nba 35 5c 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 96 ec ff ff\n8b 3d e0 57 20 00\ne8 fb e9 ff ff\n'
p831
S'.text:0000000000402980\n.text:0000000000402981\n.text:0000000000402983\n.text:0000000000402984\n.text:000000000040298b\n.text:0000000000402990\n.text:0000000000402992\n.text:0000000000402994\n.text:000000000040299b\n.text:000000000040299d\n.text:00000000004029a2\n.text:00000000004029a5\n.text:00000000004029a7\n.text:00000000004029ae\n.text:00000000004029b3\n.text:00000000004029b5\n.text:00000000004029b7\n.text:00000000004029b8\n.text:00000000004029ba\n.text:00000000004029bb\n.text:00000000004029bc\n.text:00000000004029be\n.text:00000000004029c3\n.text:00000000004029c8\n.text:00000000004029cd\n.text:00000000004029d0\n.text:00000000004029d7\n.text:00000000004029dc\n.text:00000000004029df\n.text:00000000004029e1\n.text:00000000004029e3\n.text:00000000004029e5\n.text:00000000004029ea\n.text:00000000004029ec\n.text:00000000004029ee\n.text:00000000004029f1\n.text:00000000004029f6\n.text:00000000004029fc\n.text:0000000000402a01\n.text:0000000000402a07\n.text:0000000000402a0c\n.text:0000000000402a0f\n.text:0000000000402a14\n.text:0000000000402a17\n.text:0000000000402a19\n.text:0000000000402a1e\n.text:0000000000402a20\n.text:0000000000402a22\n.text:0000000000402a25\n.text:0000000000402a2a\n.text:0000000000402a30\n'
p832
tp833
sS'version_etc_ar'
p834
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p835
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p836
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x004048b0\nJMP 0x00404540\n'
p837
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p838
S'.text:00000000004048a0\n.text:00000000004048a7\n.text:00000000004048b0\n.text:00000000004048b6\n.text:00000000004048ba\n.text:00000000004048bc\n'
p839
tp840
sS're_compile_pattern'
p841
(S'\n__stdcall re_compile_pattern(char * __pattern, size_t __length, re_pattern_buffer * __buffer)\n'
p842
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * re_compile_pattern(char *__pattern,size_t __length,re_pattern_buffer *__buffer)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_re_compile_pattern_006081d0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p843
S'JMP qword ptr [0x006081d0]\n'
p844
S'ff 25 9a 6a 20 00\n'
p845
S'.plt:0000000000401730\n'
p846
tp847
sS'rpl_calloc'
p848
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p849
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00608110)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p850
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00404c5b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00404c60\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00404c60\nPUSH RAX\nCALL 0x00401400\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004015b0\n'
p851
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 af c7 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 45 c9 ff ff\n'
p852
S'.text:0000000000404c20\n.text:0000000000404c23\n.text:0000000000404c28\n.text:0000000000404c2a\n.text:0000000000404c2d\n.text:0000000000404c32\n.text:0000000000404c34\n.text:0000000000404c37\n.text:0000000000404c3b\n.text:0000000000404c3d\n.text:0000000000404c40\n.text:0000000000404c43\n.text:0000000000404c46\n.text:0000000000404c49\n.text:0000000000404c4b\n.text:0000000000404c4c\n.text:0000000000404c51\n.text:0000000000404c57\n.text:0000000000404c59\n.text:0000000000404c5a\n.text:0000000000404c5b\n.text:0000000000404c60\n.text:0000000000404c63\n.text:0000000000404c66\n'
p853
tp854
sS'memset'
p855
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006080d8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x006080d8]\n'
p858
S'ff 25 92 6b 20 00\n'
p859
S'.plt:0000000000401540\n'
p860
tp861
sS'c_isxdigit'
p862
(S'\n__stdcall c_isxdigit()\n'
p863
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p864
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00404edb\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p865
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p866
S'.text:0000000000404ec0\n.text:0000000000404ec3\n.text:0000000000404ec6\n.text:0000000000404ec8\n.text:0000000000404ed2\n.text:0000000000404ed4\n.text:0000000000404ed7\n.text:0000000000404eda\n.text:0000000000404edb\n.text:0000000000404edd\n'
p867
tp868
sS'__libc_csu_fini'
p869
(S'\n__stdcall __libc_csu_fini()\n'
p870
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p871
S'RET\n'
p872
S'f3 c3\n'
p873
S'.text:0000000000405570\n'
p874
tp875
sS'getc_unlocked'
p876
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p877
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00608068)();\u000a  return iVar1;\u000a}\u000a\u000a
p878
S'JMP qword ptr [0x00608068]\n'
p879
S'ff 25 02 6c 20 00\n'
p880
S'.plt:0000000000401460\n'
p881
tp882
sS'abort'
p883
(S'\n__stdcall abort()\n'
p884
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00608030)();\u000a  return;\u000a}\u000a\u000a
p885
S'JMP qword ptr [0x00608030]\n'
p886
S'ff 25 3a 6c 20 00\n'
p887
S'.plt:00000000004013f0\n'
p888
tp889
sS'memmove'
p890
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_00608190)();\u000a  return pvVar1;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x00608190]\n'
p893
S'ff 25 da 6a 20 00\n'
p894
S'.plt:00000000004016b0\n'
p895
tp896
sS'c_isascii'
p897
(S'\n__stdcall c_isascii()\n'
p898
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p899
S'CMP EDI,0x80\nSETC AL\nRET\n'
p900
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p901
S'.text:0000000000404e00\n.text:0000000000404e06\n.text:0000000000404e09\n'
p902
tp903
sS'dup_safer'
p904
(S'\n__stdcall dup_safer()\n'
p905
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p906
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x00405340\n'
p907
S'31 f6\nba 03 00 00 00\n31 c0\ne9 02 00 00 00\n'
p908
S'.text:0000000000405330\n.text:0000000000405332\n.text:0000000000405337\n.text:0000000000405339\n'
p909
tp910
sS'longest_relative_suffix'
p911
(S'\n__stdcall longest_relative_suffix(char * f)\n'
p912
V\u000achar * longest_relative_suffix(char *f)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  f = f + -1;\u000a  do {\u000a    pcVar1 = f + 1;\u000a    f = f + 1;\u000a  } while (*pcVar1 == '/');\u000a  return f;\u000a}\u000a\u000a
p913
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x00402b40\nMOV RAX,RDI\nRET\n'
p914
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n48 89 f8\nc3\n'
p915
S'.text:0000000000402b30\n.text:0000000000402b33\n.text:0000000000402b40\n.text:0000000000402b44\n.text:0000000000402b48\n.text:0000000000402b4a\n.text:0000000000402b4d\n'
p916
tp917
sS'version_etc'
p918
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p919
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p920
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404972\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x004048d0\nADD RSP,0xd8\nRET\n'
p921
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p922
S'.text:0000000000404930\n.text:0000000000404937\n.text:0000000000404939\n.text:000000000040493b\n.text:0000000000404940\n.text:0000000000404945\n.text:000000000040494a\n.text:0000000000404952\n.text:000000000040495a\n.text:0000000000404962\n.text:000000000040496a\n.text:0000000000404972\n.text:0000000000404977\n.text:000000000040497c\n.text:0000000000404981\n.text:0000000000404986\n.text:000000000040498e\n.text:0000000000404993\n.text:000000000040499b\n.text:00000000004049a2\n.text:00000000004049a5\n.text:00000000004049aa\n.text:00000000004049b1\n'
p923
tp924
sS'mkstemp'
p925
(S'\n__stdcall mkstemp(char * __template)\n'
p926
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mkstemp(char *__template)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mkstemp_00608150)();\u000a  return iVar1;\u000a}\u000a\u000a
p927
S'JMP qword ptr [0x00608150]\n'
p928
S'ff 25 1a 6b 20 00\n'
p929
S'.plt:0000000000401630\n'
p930
tp931
sS'__ctype_b_loc'
p932
(S'\n__stdcall __ctype_b_loc()\n'
p933
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_006081f0)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p934
S'JMP qword ptr [0x006081f0]\n'
p935
S'ff 25 7a 6a 20 00\n'
p936
S'.plt:0000000000401770\n'
p937
tp938
sS'lseek'
p939
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p940
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006080d0)();\u000a  return _Var1;\u000a}\u000a\u000a
p941
S'JMP qword ptr [0x006080d0]\n'
p942
S'ff 25 9a 6b 20 00\n'
p943
S'.plt:0000000000401530\n'
p944
tp945
sS'quotearg'
p946
(S'\n__stdcall quotearg(char * arg)\n'
p947
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p948
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403b40\n'
p949
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p950
S'.text:0000000000403d20\n.text:0000000000403d23\n.text:0000000000403d25\n.text:0000000000403d28\n'
p951
tp952
sS'_start'
p953
(S'\n__stdcall _start()\n'
p954
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00607ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p955
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405570\nMOV RCX,0x405500\nMOV RDI,0x401b30\nCALL qword ptr [0x00607ff0]\nHLT\n'
p956
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 70 55 40 00\n48 c7 c1 00 55 40 00\n48 c7 c7 30 1b 40 00\nff 15 46 68 20 00\nf4\n'
p957
S'.text:0000000000401780\n.text:0000000000401782\n.text:0000000000401785\n.text:0000000000401786\n.text:0000000000401789\n.text:000000000040178d\n.text:000000000040178e\n.text:000000000040178f\n.text:0000000000401796\n.text:000000000040179d\n.text:00000000004017a4\n.text:00000000004017aa\n'
p958
tp959
sS'c_iscntrl'
p960
(S'\n__stdcall c_iscntrl()\n'
p961
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p962
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00404e28\nRET\nCMP EDI,0x7f\nJZ 0x00404e27\nXOR EAX,EAX\nRET\n'
p963
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p964
S'.text:0000000000404e20\n.text:0000000000404e22\n.text:0000000000404e25\n.text:0000000000404e27\n.text:0000000000404e28\n.text:0000000000404e2b\n.text:0000000000404e2d\n.text:0000000000404e2f\n'
p965
tp966
sS'c_isblank'
p967
(S'\n__stdcall c_isblank()\n'
p968
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p969
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p970
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p971
S'.text:0000000000404e10\n.text:0000000000404e13\n.text:0000000000404e16\n.text:0000000000404e19\n.text:0000000000404e1c\n.text:0000000000404e1e\n'
p972
tp973
sS'quotearg_n_mem'
p974
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p975
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p976
S'MOV ECX,0x60a4a0\nJMP 0x00403b50\n'
p977
S'b9 a0 a4 60 00\ne9 36 fe ff ff\n'
p978
S'.text:0000000000403d10\n.text:0000000000403d15\n'
p979
tp980
sS'atexit'
p981
(S'\n__stdcall atexit(__func * __func)\n'
p982
V\u000a/* WARNING: Removing unreachable block (ram,0x004055a0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_006081b0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p983
S'MOV RAX,0x608200\nTEST RAX,RAX\nJZ 0x004055a0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x004016f0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x004016f0\n'
p984
S'48 c7 c0 00 82 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 5a c1 ff ff\n31 d2\n31 f6\ne9 47 c1 ff ff\n'
p985
S'.text:0000000000405580\n.text:0000000000405587\n.text:000000000040558a\n.text:000000000040558c\n.text:000000000040558f\n.text:0000000000405591\n.text:00000000004055a0\n.text:00000000004055a2\n.text:00000000004055a4\n'
p986
tp987
sS'__printf_chk'
p988
(S'\n__stdcall __printf_chk()\n'
p989
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_00608188)();\u000a  return;\u000a}\u000a\u000a
p990
S'JMP qword ptr [0x00608188]\n'
p991
S'ff 25 e2 6a 20 00\n'
p992
S'.plt:00000000004016a0\n'
p993
tp994
sS'fdopen'
p995
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p996
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_00608178)();\u000a  return pFVar1;\u000a}\u000a\u000a
p997
S'JMP qword ptr [0x00608178]\n'
p998
S'ff 25 f2 6a 20 00\n'
p999
S'.plt:0000000000401680\n'
p1000
tp1001
sS'error'
p1002
(S'\n__stdcall error()\n'
p1003
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_00608198)();\u000a  return;\u000a}\u000a\u000a
p1004
S'JMP qword ptr [0x00608198]\n'
p1005
S'ff 25 d2 6a 20 00\n'
p1006
S'.plt:00000000004016c0\n'
p1007
tp1008
sS'temp_stream'
p1009
(S'\n__stdcall temp_stream(FILE * * fp, char * * file_name)\n'
p1010
V\u000a_Bool temp_stream(FILE **fp,char **file_name)\u000a\u000a{\u000a  uint uVar1;\u000a  char *tempfile;\u000a  FILE *tmp_fp;\u000a  int __fd;\u000a  undefined8 uVar2;\u000a  char *dir;\u000a  char *pcVar3;\u000a  uint *puVar4;\u000a  \u000a  if (tempfile == (char *)0x0) {\u000a    pcVar3 = getenv("TMPDIR");\u000a    dir = "/tmp";\u000a    if (pcVar3 != (char *)0x0) {\u000a      dir = pcVar3;\u000a    }\u000a    tempfile = mfile_name_concat(dir,"tacXXXXXX",(char **)0x0);\u000a    if (dir == (char *)0x0) {\u000a      uVar2 = dcgettext(0,"memory exhausted",5);\u000a      error(0,0,uVar2,uVar2);\u000a      return false;\u000a    }\u000a    __fd = mkstemp_safer(tempfile);\u000a    if (__fd < 0) {\u000a      puVar4 = (uint *)__errno_location();\u000a      uVar1 = *puVar4;\u000a      uVar2 = dcgettext(0,"failed to create temporary file in %s",5);\u000a      dir = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar1,uVar2,dir);\u000a    }\u000a    else {\u000a      tmp_fp = (FILE *)fdopen(__fd,"w+");\u000a      if (tmp_fp != (FILE *)0x0) {\u000a        record_or_unlink_tempfile(tempfile);\u000a        goto LAB_00402858;\u000a      }\u000a      puVar4 = (uint *)__errno_location();\u000a      uVar1 = *puVar4;\u000a      uVar2 = dcgettext(0,"failed to open %s for writing",5);\u000a      dir = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar1,uVar2,dir);\u000a      close(__fd);\u000a      unlink(tempfile);\u000a    }\u000a    free(tempfile);\u000a  }\u000a  else {\u000a    __fd = rpl_fseeko(tmp_fp,0);\u000a    if (-1 < __fd) {\u000a      __fd = fileno((FILE *)tmp_fp);\u000a      __fd = ftruncate(__fd,0);\u000a      if (-1 < __fd) {\u000aLAB_00402858:\u000a        *fp = tmp_fp;\u000a        *file_name = tempfile;\u000a        return true;\u000a      }\u000a    }\u000a    puVar4 = (uint *)__errno_location();\u000a    uVar1 = *puVar4;\u000a    uVar2 = dcgettext(0,"failed to rewind stream for %s",5);\u000a    dir = quotearg_style((char *)0x4);\u000a    error(0,(ulong)uVar1,uVar2,dir);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1011
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nCMP qword ptr [0x00608458],0x0\nJZ 0x004027ee\nMOV RDI,qword ptr [0x00608460]\nXOR ESI,ESI\nXOR EDX,EDX\nCALL 0x00404d40\nTEST EAX,EAX\nJS 0x004027a8\nMOV RDI,qword ptr [0x00608460]\nCALL 0x004015e0\nXOR ESI,ESI\nMOV EDI,EAX\nCALL 0x00401520\nTEST EAX,EAX\nJNS 0x00402858\nCALL 0x00401400\nMOV R14D,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x405a81\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RBP,RAX\nMOV RSI,qword ptr [0x00608458]\nMOV EDI,0x4\nCALL 0x00403e20\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nCALL 0x004016c0\nJMP 0x00402943\nMOV EDI,0x405a13\nCALL 0x004013c0\nTEST RAX,RAX\nMOV EBP,0x405a1a\nCMOVNZ RBP,RAX\nMOV ESI,0x405a1f\nXOR EDX,EDX\nMOV RDI,RBP\nCALL 0x00402a40\nMOV qword ptr [0x00608458],RAX\nTEST RBP,RBP\nJZ 0x00402873\nMOV RDI,RAX\nCALL 0x004044e0\nMOV R15D,EAX\nTEST R15D,R15D\nJS 0x0040289c\nMOV ESI,0x405a60\nMOV EDI,R15D\nCALL 0x00401680\nMOV qword ptr [0x00608460],RAX\nTEST RAX,RAX\nJZ 0x004028d9\nMOV RDI,qword ptr [0x00608458]\nCALL 0x00402950\nMOV RAX,qword ptr [0x00608460]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [0x00608458]\nMOV qword ptr [R14],RAX\nMOV BL,0x1\nJMP 0x00402943\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x405a29\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004016c0\nJMP 0x00402943\nCALL 0x00401400\nMOV R14D,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x405a3a\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,RBP\nCALL 0x00403e20\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBX\nCALL 0x004016c0\nJMP 0x0040292a\nCALL 0x00401400\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x405a63\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RBP,RAX\nMOV RSI,qword ptr [0x00608458]\nMOV EDI,0x4\nCALL 0x00403e20\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x004016c0\nMOV EDI,R15D\nCALL 0x00401560\nMOV RDI,qword ptr [0x00608458]\nCALL 0x00401410\nMOV RDI,qword ptr [0x00608458]\nCALL 0x004013d0\nMOV qword ptr [0x00608458],0x0\nXOR EBX,EBX\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1012
S'55\n41 57\n41 56\n53\n50\n49 89 f6\n48 89 fb\n48 83 3d e3 5c 20 00 00\n74 77\n48 8b 3d e2 5c 20 00\n31 f6\n31 d2\ne8 b9 25 00 00\n85 c0\n78 1d\n48 8b 3d ce 5c 20 00\ne8 49 ee ff ff\n31 f6\n89 c7\ne8 80 ed ff ff\n85 c0\n0f 89 b0 00 00 00\ne8 53 ec ff ff\n44 8b 30\n31 db\n31 ff\nbe 81 5a 40 00\nba 05 00 00 00\ne8 fd ec ff ff\n48 89 c5\n48 8b 35 8b 5c 20 00\nbf 04 00 00 00\ne8 49 16 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ea\ne8 d7 ee ff ff\ne9 55 01 00 00\nbf 13 5a 40 00\ne8 c8 eb ff ff\n48 85 c0\nbd 1a 5a 40 00\n48 0f 45 e8\nbe 1f 5a 40 00\n31 d2\n48 89 ef\ne8 2d 02 00 00\n48 89 05 3e 5c 20 00\n48 85 ed\n74 54\n48 89 c7\ne8 b9 1c 00 00\n41 89 c7\n45 85 ff\n78 6d\nbe 60 5a 40 00\n44 89 ff\ne8 44 ee ff ff\n48 89 05 1d 5c 20 00\n48 85 c0\n0f 84 8d 00 00 00\n48 8b 3d 05 5c 20 00\ne8 f8 00 00 00\n48 8b 05 01 5c 20 00\n48 89 03\n48 8b 05 ef 5b 20 00\n49 89 06\nb3 01\ne9 d0 00 00 00\n31 db\n31 ff\nbe 29 5a 40 00\nba 05 00 00 00\ne8 3a ec ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 29 ee ff ff\ne9 a7 00 00 00\ne8 5f eb ff ff\n44 8b 30\n31 ff\nbe 3a 5a 40 00\nba 05 00 00 00\ne8 0b ec ff ff\n48 89 c3\nbf 04 00 00 00\n48 89 ee\ne8 5b 15 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 da\ne8 e9 ed ff ff\neb 51\ne8 22 eb ff ff\n8b 18\n31 ff\nbe 63 5a 40 00\nba 05 00 00 00\ne8 cf eb ff ff\n48 89 c5\n48 8b 35 5d 5b 20 00\nbf 04 00 00 00\ne8 1b 15 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 aa ed ff ff\n44 89 ff\ne8 42 ec ff ff\n48 8b 3d 33 5b 20 00\ne8 e6 ea ff ff\n48 8b 3d 27 5b 20 00\ne8 9a ea ff ff\n48 c7 05 17 5b 20 00 00 00 00 00\n31 db\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1013
S'.text:0000000000402760\n.text:0000000000402761\n.text:0000000000402763\n.text:0000000000402765\n.text:0000000000402766\n.text:0000000000402767\n.text:000000000040276a\n.text:000000000040276d\n.text:0000000000402775\n.text:0000000000402777\n.text:000000000040277e\n.text:0000000000402780\n.text:0000000000402782\n.text:0000000000402787\n.text:0000000000402789\n.text:000000000040278b\n.text:0000000000402792\n.text:0000000000402797\n.text:0000000000402799\n.text:000000000040279b\n.text:00000000004027a0\n.text:00000000004027a2\n.text:00000000004027a8\n.text:00000000004027ad\n.text:00000000004027b0\n.text:00000000004027b2\n.text:00000000004027b4\n.text:00000000004027b9\n.text:00000000004027be\n.text:00000000004027c3\n.text:00000000004027c6\n.text:00000000004027cd\n.text:00000000004027d2\n.text:00000000004027d7\n.text:00000000004027da\n.text:00000000004027dc\n.text:00000000004027de\n.text:00000000004027e1\n.text:00000000004027e4\n.text:00000000004027e9\n.text:00000000004027ee\n.text:00000000004027f3\n.text:00000000004027f8\n.text:00000000004027fb\n.text:0000000000402800\n.text:0000000000402804\n.text:0000000000402809\n.text:000000000040280b\n.text:000000000040280e\n.text:0000000000402813\n.text:000000000040281a\n.text:000000000040281d\n.text:000000000040281f\n.text:0000000000402822\n.text:0000000000402827\n.text:000000000040282a\n.text:000000000040282d\n.text:000000000040282f\n.text:0000000000402834\n.text:0000000000402837\n.text:000000000040283c\n.text:0000000000402843\n.text:0000000000402846\n.text:000000000040284c\n.text:0000000000402853\n.text:0000000000402858\n.text:000000000040285f\n.text:0000000000402862\n.text:0000000000402869\n.text:000000000040286c\n.text:000000000040286e\n.text:0000000000402873\n.text:0000000000402875\n.text:0000000000402877\n.text:000000000040287c\n.text:0000000000402881\n.text:0000000000402886\n.text:0000000000402889\n.text:000000000040288b\n.text:000000000040288d\n.text:000000000040288f\n.text:0000000000402892\n.text:0000000000402897\n.text:000000000040289c\n.text:00000000004028a1\n.text:00000000004028a4\n.text:00000000004028a6\n.text:00000000004028ab\n.text:00000000004028b0\n.text:00000000004028b5\n.text:00000000004028b8\n.text:00000000004028bd\n.text:00000000004028c0\n.text:00000000004028c5\n.text:00000000004028c8\n.text:00000000004028ca\n.text:00000000004028cc\n.text:00000000004028cf\n.text:00000000004028d2\n.text:00000000004028d7\n.text:00000000004028d9\n.text:00000000004028de\n.text:00000000004028e0\n.text:00000000004028e2\n.text:00000000004028e7\n.text:00000000004028ec\n.text:00000000004028f1\n.text:00000000004028f4\n.text:00000000004028fb\n.text:0000000000402900\n.text:0000000000402905\n.text:0000000000402908\n.text:000000000040290a\n.text:000000000040290c\n.text:000000000040290e\n.text:0000000000402911\n.text:0000000000402916\n.text:0000000000402919\n.text:000000000040291e\n.text:0000000000402925\n.text:000000000040292a\n.text:0000000000402931\n.text:0000000000402936\n.text:0000000000402941\n.text:0000000000402943\n.text:0000000000402945\n.text:0000000000402949\n.text:000000000040294a\n.text:000000000040294c\n.text:000000000040294e\n.text:000000000040294f\n'
p1014
tp1015
sS'base_len'
p1016
(S'\n__stdcall base_len(char * name)\n'
p1017
V\u000asize_t base_len(char *name)\u000a\u000a{\u000a  long lVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  \u000a  sVar2 = strlen(name);\u000a  do {\u000a    sVar3 = sVar2;\u000a    if (sVar2 < 2) {\u000a      return sVar3;\u000a    }\u000a    lVar1 = sVar2 - 1;\u000a    sVar2 = sVar2 - 1;\u000a  } while (name[lVar1] == '/');\u000a  return sVar3;\u000a}\u000a\u000a
p1018
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004014e0\nMOV RCX,RAX\nNOP dword ptr [RAX]\nMOV RAX,RCX\nCMP RAX,0x2\nJC 0x00404ff4\nLEA RCX,[RAX + -0x1]\nCMP byte ptr [RBX + RAX*0x1 + -0x1],0x2f\nJZ 0x00404fe0\nPOP RBX\nRET\n'
p1019
S'53\n48 89 fb\ne8 07 c5 ff ff\n48 89 c1\n0f 1f 40 00\n48 89 c8\n48 83 f8 02\n72 0b\n48 8d 48 ff\n80 7c 03 ff 2f\n74 ec\n5b\nc3\n'
p1020
S'.text:0000000000404fd0\n.text:0000000000404fd1\n.text:0000000000404fd4\n.text:0000000000404fd9\n.text:0000000000404fdc\n.text:0000000000404fe0\n.text:0000000000404fe3\n.text:0000000000404fe7\n.text:0000000000404fe9\n.text:0000000000404fed\n.text:0000000000404ff2\n.text:0000000000404ff4\n.text:0000000000404ff5\n'
p1021
tp1022
sS'strcaseeq6'
p1023
(S'\n__stdcall strcaseeq6()\n'
p1024
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1025
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404eb0\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x004043e2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004043e9\nJMP 0x004043fe\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004043fe\nTEST BPL,BPL\nJZ 0x004043f9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404410\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1026
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 e1 0a 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1027
S'.text:00000000004043c0\n.text:00000000004043c1\n.text:00000000004043c2\n.text:00000000004043c3\n.text:00000000004043c5\n.text:00000000004043c8\n.text:00000000004043ca\n.text:00000000004043cf\n.text:00000000004043d3\n.text:00000000004043d5\n.text:00000000004043d7\n.text:00000000004043da\n.text:00000000004043dc\n.text:00000000004043de\n.text:00000000004043e0\n.text:00000000004043e2\n.text:00000000004043e4\n.text:00000000004043e7\n.text:00000000004043e9\n.text:00000000004043ec\n.text:00000000004043ee\n.text:00000000004043f1\n.text:00000000004043f5\n.text:00000000004043f6\n.text:00000000004043f7\n.text:00000000004043f9\n.text:00000000004043fe\n.text:0000000000404402\n.text:0000000000404403\n.text:0000000000404404\n'
p1028
tp1029
sS'strcaseeq5'
p1030
(S'\n__stdcall strcaseeq5()\n'
p1031
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1032
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404eb0\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404396\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040439d\nJMP 0x004043b4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004043b4\nTEST BPL,BPL\nJZ 0x004043af\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004043c0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1033
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 2d 0b 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1034
S'.text:0000000000404370\n.text:0000000000404371\n.text:0000000000404373\n.text:0000000000404374\n.text:0000000000404377\n.text:0000000000404379\n.text:000000000040437c\n.text:000000000040437e\n.text:0000000000404383\n.text:0000000000404387\n.text:0000000000404389\n.text:000000000040438b\n.text:000000000040438e\n.text:0000000000404390\n.text:0000000000404392\n.text:0000000000404394\n.text:0000000000404396\n.text:0000000000404398\n.text:000000000040439b\n.text:000000000040439d\n.text:00000000004043a0\n.text:00000000004043a2\n.text:00000000004043a6\n.text:00000000004043a9\n.text:00000000004043aa\n.text:00000000004043ac\n.text:00000000004043ad\n.text:00000000004043af\n.text:00000000004043b4\n.text:00000000004043b5\n.text:00000000004043b7\n.text:00000000004043b8\n'
p1035
tp1036
sS'emit_ancillary_info'
p1037
(S'\n__stdcall emit_ancillary_info()\n'
p1038
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00405bc0;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("tac",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "tac";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_0040575c,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_0040575c);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x4062f9;\u000a  if (__s2 == "tac") {\u000a    uVar3 = 0x405887;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p1039
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x405bc0\nMOV ESI,0x40586b\nNOP\nMOV EDI,0x40575c\nCALL 0x004015c0\nTEST EAX,EAX\nJZ 0x00401a2b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401a10\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x40575c\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x4058ca\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40577d\nMOV ECX,0x4058e1\nXOR EAX,EAX\nCALL 0x004016a0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401690\nTEST RAX,RAX\nJZ 0x00401ab4\nMOV ESI,0x405908\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401420\nTEST EAX,EAX\nJZ 0x00401ab4\nXOR EDI,EDI\nMOV ESI,0x40590c\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40575c\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004016a0\nXOR EDI,EDI\nMOV ESI,0x405951\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,RAX\nMOV R14D,0x40575c\nMOV EDI,0x1\nMOV EDX,0x4058e1\nMOV ECX,0x40575c\nXOR EAX,EAX\nCALL 0x004016a0\nXOR EDI,EDI\nMOV ESI,0x405970\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x405887\nMOV ECX,0x4062f9\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004016a0\n'
p1040
S'41 56\n53\n50\nbb c0 5b 40 00\nbe 6b 58 40 00\n66 90\nbf 5c 57 40 00\ne8 a6 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 5c 57 40 00\n48 0f 45 d8\n31 ff\nbe ca 58 40 00\nba 05 00 00 00\ne8 74 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba 7d 57 40 00\nb9 e1 58 40 00\n31 c0\ne8 3b fc ff ff\nbf 05 00 00 00\n31 f6\ne8 1f fc ff ff\n48 85 c0\n74 3e\nbe 08 59 40 00\nba 03 00 00 00\n48 89 c7\ne8 98 f9 ff ff\n85 c0\n74 28\n31 ff\nbe 0c 59 40 00\nba 05 00 00 00\ne8 23 fa ff ff\n48 89 c1\nbf 01 00 00 00\nba 5c 57 40 00\n31 c0\n48 89 ce\ne8 ec fb ff ff\n31 ff\nbe 51 59 40 00\nba 05 00 00 00\ne8 fb f9 ff ff\n48 89 c6\n41 be 5c 57 40 00\nbf 01 00 00 00\nba e1 58 40 00\nb9 5c 57 40 00\n31 c0\ne8 bc fb ff ff\n31 ff\nbe 70 59 40 00\nba 05 00 00 00\ne8 cb f9 ff ff\n48 89 c2\n4c 39 f3\nb8 87 58 40 00\nb9 f9 62 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 7e fb ff ff\n'
p1041
S'.text:0000000000401a00\n.text:0000000000401a02\n.text:0000000000401a03\n.text:0000000000401a04\n.text:0000000000401a09\n.text:0000000000401a0e\n.text:0000000000401a10\n.text:0000000000401a15\n.text:0000000000401a1a\n.text:0000000000401a1c\n.text:0000000000401a1e\n.text:0000000000401a22\n.text:0000000000401a26\n.text:0000000000401a29\n.text:0000000000401a2b\n.text:0000000000401a2f\n.text:0000000000401a32\n.text:0000000000401a37\n.text:0000000000401a3b\n.text:0000000000401a3d\n.text:0000000000401a42\n.text:0000000000401a47\n.text:0000000000401a4c\n.text:0000000000401a4f\n.text:0000000000401a54\n.text:0000000000401a59\n.text:0000000000401a5e\n.text:0000000000401a60\n.text:0000000000401a65\n.text:0000000000401a6a\n.text:0000000000401a6c\n.text:0000000000401a71\n.text:0000000000401a74\n.text:0000000000401a76\n.text:0000000000401a7b\n.text:0000000000401a80\n.text:0000000000401a83\n.text:0000000000401a88\n.text:0000000000401a8a\n.text:0000000000401a8c\n.text:0000000000401a8e\n.text:0000000000401a93\n.text:0000000000401a98\n.text:0000000000401a9d\n.text:0000000000401aa0\n.text:0000000000401aa5\n.text:0000000000401aaa\n.text:0000000000401aac\n.text:0000000000401aaf\n.text:0000000000401ab4\n.text:0000000000401ab6\n.text:0000000000401abb\n.text:0000000000401ac0\n.text:0000000000401ac5\n.text:0000000000401ac8\n.text:0000000000401ace\n.text:0000000000401ad3\n.text:0000000000401ad8\n.text:0000000000401add\n.text:0000000000401adf\n.text:0000000000401ae4\n.text:0000000000401ae6\n.text:0000000000401aeb\n.text:0000000000401af0\n.text:0000000000401af5\n.text:0000000000401af8\n.text:0000000000401afb\n.text:0000000000401b00\n.text:0000000000401b05\n.text:0000000000401b09\n.text:0000000000401b0e\n.text:0000000000401b10\n.text:0000000000401b13\n.text:0000000000401b16\n.text:0000000000401b1a\n.text:0000000000401b1b\n.text:0000000000401b1d\n'
p1042
tp1043
sS'strcaseeq7'
p1044
(S'\n__stdcall strcaseeq7()\n'
p1045
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1046
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00404eb0\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404432\nTEST ECX,0xffffffdf\nJNZ 0x00404436\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040443a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1047
S'53\n48 89 fb\n31 ff\ne8 95 0a 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1048
S'.text:0000000000404410\n.text:0000000000404411\n.text:0000000000404414\n.text:0000000000404416\n.text:000000000040441b\n.text:000000000040441f\n.text:0000000000404421\n.text:0000000000404423\n.text:0000000000404429\n.text:000000000040442b\n.text:0000000000404430\n.text:0000000000404431\n.text:0000000000404432\n.text:0000000000404434\n.text:0000000000404436\n.text:0000000000404438\n.text:0000000000404439\n.text:000000000040443a\n.text:000000000040443f\n.text:0000000000404440\n'
p1049
tp1050
sS'version_etc_va'
p1051
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p1052
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p1053
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00404900\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040490c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404921\nINC R9\nCMP R9,0xa\nJC 0x004048e0\nMOV R8,RSP\nCALL 0x00404540\nADD RSP,0x58\nRET\n'
p1054
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p1055
S'.text:00000000004048d0\n.text:00000000004048d4\n.text:00000000004048d7\n.text:00000000004048e0\n.text:00000000004048e3\n.text:00000000004048e7\n.text:00000000004048e9\n.text:00000000004048ec\n.text:00000000004048f0\n.text:00000000004048f4\n.text:00000000004048f7\n.text:0000000000404900\n.text:0000000000404904\n.text:0000000000404908\n.text:000000000040490c\n.text:000000000040490f\n.text:0000000000404913\n.text:0000000000404916\n.text:0000000000404918\n.text:000000000040491b\n.text:000000000040491f\n.text:0000000000404921\n.text:0000000000404924\n.text:0000000000404929\n.text:000000000040492d\n'
p1056
tp1057
sS'xzalloc'
p1058
(S'\n__stdcall xzalloc(size_t s)\n'
p1059
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p1060
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00404a60\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401540\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1061
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 d4 c9 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1062
S'.text:0000000000404b50\n.text:0000000000404b52\n.text:0000000000404b53\n.text:0000000000404b54\n.text:0000000000404b57\n.text:0000000000404b5c\n.text:0000000000404b5f\n.text:0000000000404b61\n.text:0000000000404b64\n.text:0000000000404b67\n.text:0000000000404b6c\n.text:0000000000404b6f\n.text:0000000000404b73\n.text:0000000000404b74\n.text:0000000000404b76\n'
p1063
tp1064
sS'emit_mandatory_arg_note'
p1065
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1066
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1067
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x405820\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00608288]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401590\n'
p1068
S'50\n31 ff\nbe 20 58 40 00\nba 05 00 00 00\ne8 de fa ff ff\n48 8b 35 9f 68 20 00\n48 89 c7\n58\ne9 9e fb ff ff\n'
p1069
S'.text:00000000004019d0\n.text:00000000004019d1\n.text:00000000004019d3\n.text:00000000004019d8\n.text:00000000004019dd\n.text:00000000004019e2\n.text:00000000004019e9\n.text:00000000004019ec\n.text:00000000004019ed\n'
p1070
tp1071
sS'strcaseeq0'
p1072
(S'\n__stdcall strcaseeq0()\n'
p1073
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1074
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404eb0\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404145\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040414c\nJMP 0x00404180\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404180\nTEST BPL,BPL\nJZ 0x0040417b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404190\nJMP 0x00404180\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1075
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 7d 0d 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1076
S'.text:0000000000404110\n.text:0000000000404111\n.text:0000000000404113\n.text:0000000000404115\n.text:0000000000404117\n.text:0000000000404119\n.text:000000000040411a\n.text:000000000040411b\n.text:000000000040411e\n.text:0000000000404121\n.text:0000000000404124\n.text:0000000000404127\n.text:0000000000404129\n.text:000000000040412c\n.text:000000000040412e\n.text:0000000000404133\n.text:0000000000404136\n.text:0000000000404138\n.text:000000000040413a\n.text:000000000040413d\n.text:000000000040413f\n.text:0000000000404141\n.text:0000000000404143\n.text:0000000000404145\n.text:0000000000404147\n.text:000000000040414a\n.text:000000000040414c\n.text:000000000040414f\n.text:0000000000404151\n.text:0000000000404155\n.text:000000000040415a\n.text:000000000040415d\n.text:0000000000404161\n.text:0000000000404165\n.text:0000000000404169\n.text:000000000040416d\n.text:0000000000404171\n.text:0000000000404174\n.text:0000000000404179\n.text:000000000040417b\n.text:0000000000404180\n.text:0000000000404184\n.text:0000000000404185\n.text:0000000000404187\n.text:0000000000404189\n.text:000000000040418b\n.text:000000000040418d\n.text:000000000040418e\n'
p1077
tp1078
sS'strcaseeq2'
p1079
(S'\n__stdcall strcaseeq2()\n'
p1080
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1081
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404eb0\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404256\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040425d\nJMP 0x0040428a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040428a\nTEST BPL,BPL\nJZ 0x00404285\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004042a0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1082
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 6d 0c 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1083
S'.text:0000000000404220\n.text:0000000000404221\n.text:0000000000404223\n.text:0000000000404225\n.text:0000000000404227\n.text:0000000000404229\n.text:000000000040422a\n.text:000000000040422b\n.text:000000000040422e\n.text:0000000000404231\n.text:0000000000404234\n.text:0000000000404237\n.text:0000000000404239\n.text:000000000040423c\n.text:000000000040423e\n.text:0000000000404243\n.text:0000000000404247\n.text:0000000000404249\n.text:000000000040424b\n.text:000000000040424e\n.text:0000000000404250\n.text:0000000000404252\n.text:0000000000404254\n.text:0000000000404256\n.text:0000000000404258\n.text:000000000040425b\n.text:000000000040425d\n.text:0000000000404260\n.text:0000000000404262\n.text:0000000000404266\n.text:000000000040426a\n.text:000000000040426e\n.text:0000000000404272\n.text:0000000000404275\n.text:0000000000404279\n.text:000000000040427a\n.text:000000000040427c\n.text:000000000040427e\n.text:0000000000404280\n.text:0000000000404282\n.text:0000000000404283\n.text:0000000000404285\n.text:000000000040428a\n.text:000000000040428e\n.text:000000000040428f\n.text:0000000000404291\n.text:0000000000404293\n.text:0000000000404295\n.text:0000000000404297\n.text:0000000000404298\n'
p1084
tp1085
sS'strcaseeq1'
p1086
(S'\n__stdcall strcaseeq1()\n'
p1087
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1088
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00404eb0\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x004041cd\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004041d4\nJMP 0x00404207\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404207\nTEST BPL,BPL\nJZ 0x00404202\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404220\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1089
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 f6 0c 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1090
S'.text:0000000000404190\n.text:0000000000404191\n.text:0000000000404193\n.text:0000000000404195\n.text:0000000000404197\n.text:0000000000404199\n.text:000000000040419a\n.text:000000000040419b\n.text:00000000004041a0\n.text:00000000004041a3\n.text:00000000004041a6\n.text:00000000004041a9\n.text:00000000004041ab\n.text:00000000004041ae\n.text:00000000004041b3\n.text:00000000004041b5\n.text:00000000004041ba\n.text:00000000004041be\n.text:00000000004041c0\n.text:00000000004041c2\n.text:00000000004041c5\n.text:00000000004041c7\n.text:00000000004041c9\n.text:00000000004041cb\n.text:00000000004041cd\n.text:00000000004041cf\n.text:00000000004041d2\n.text:00000000004041d4\n.text:00000000004041d7\n.text:00000000004041d9\n.text:00000000004041dd\n.text:00000000004041e1\n.text:00000000004041e5\n.text:00000000004041eb\n.text:00000000004041ef\n.text:00000000004041f2\n.text:00000000004041f6\n.text:00000000004041f7\n.text:00000000004041f9\n.text:00000000004041fb\n.text:00000000004041fd\n.text:00000000004041ff\n.text:0000000000404200\n.text:0000000000404202\n.text:0000000000404207\n.text:000000000040420b\n.text:000000000040420c\n.text:000000000040420e\n.text:0000000000404210\n.text:0000000000404212\n.text:0000000000404214\n.text:0000000000404215\n'
p1091
tp1092
sS'strcaseeq4'
p1093
(S'\n__stdcall strcaseeq4()\n'
p1094
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1095
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404eb0\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040433c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404343\nJMP 0x00404364\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404364\nTEST BPL,BPL\nJZ 0x0040435f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404370\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1096
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 87 0b 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1097
S'.text:0000000000404310\n.text:0000000000404311\n.text:0000000000404313\n.text:0000000000404315\n.text:0000000000404316\n.text:0000000000404317\n.text:000000000040431a\n.text:000000000040431d\n.text:000000000040431f\n.text:0000000000404322\n.text:0000000000404324\n.text:0000000000404329\n.text:000000000040432d\n.text:000000000040432f\n.text:0000000000404331\n.text:0000000000404334\n.text:0000000000404336\n.text:0000000000404338\n.text:000000000040433a\n.text:000000000040433c\n.text:000000000040433e\n.text:0000000000404341\n.text:0000000000404343\n.text:0000000000404346\n.text:0000000000404348\n.text:000000000040434c\n.text:0000000000404350\n.text:0000000000404353\n.text:0000000000404357\n.text:0000000000404358\n.text:000000000040435a\n.text:000000000040435c\n.text:000000000040435d\n.text:000000000040435f\n.text:0000000000404364\n.text:0000000000404368\n.text:0000000000404369\n.text:000000000040436b\n.text:000000000040436d\n.text:000000000040436e\n'
p1098
tp1099
sS'strcaseeq3'
p1100
(S'\n__stdcall strcaseeq3()\n'
p1101
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1102
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404eb0\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x004042d0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004042d7\nJMP 0x004042fa\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004042fa\nTEST BPL,BPL\nJZ 0x004042f5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404310\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1103
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 f3 0b 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1104
S'.text:00000000004042a0\n.text:00000000004042a1\n.text:00000000004042a3\n.text:00000000004042a5\n.text:00000000004042a7\n.text:00000000004042a8\n.text:00000000004042ab\n.text:00000000004042ae\n.text:00000000004042b1\n.text:00000000004042b3\n.text:00000000004042b6\n.text:00000000004042b8\n.text:00000000004042bd\n.text:00000000004042c1\n.text:00000000004042c3\n.text:00000000004042c5\n.text:00000000004042c8\n.text:00000000004042ca\n.text:00000000004042cc\n.text:00000000004042ce\n.text:00000000004042d0\n.text:00000000004042d2\n.text:00000000004042d5\n.text:00000000004042d7\n.text:00000000004042da\n.text:00000000004042dc\n.text:00000000004042e0\n.text:00000000004042e4\n.text:00000000004042e8\n.text:00000000004042eb\n.text:00000000004042ec\n.text:00000000004042ee\n.text:00000000004042f0\n.text:00000000004042f2\n.text:00000000004042f3\n.text:00000000004042f5\n.text:00000000004042fa\n.text:00000000004042fb\n.text:00000000004042fd\n.text:00000000004042ff\n.text:0000000000404301\n.text:0000000000404302\n'
p1105
tp1106
sS'last_component'
p1107
(S'\n__stdcall last_component(char * name)\n'
p1108
V\u000achar * last_component(char *name)\u000a\u000a{\u000a  bool bVar1;\u000a  bool bVar2;\u000a  char *pcVar3;\u000a  \u000a  name = name + -1;\u000a  do {\u000a    pcVar3 = name + 1;\u000a    name = name + 1;\u000a  } while (*pcVar3 == '/');\u000a  bVar2 = false;\u000a  pcVar3 = name;\u000a  do {\u000a    bVar1 = true;\u000a    if (*name != '/') {\u000a      if (*name == 0) {\u000a        return pcVar3;\u000a      }\u000a      bVar1 = bVar2;\u000a      if (bVar2) {\u000a        pcVar3 = name;\u000a        bVar1 = false;\u000a      }\u000a    }\u000a    bVar2 = bVar1;\u000a    name = name + 1;\u000a  } while( true );\u000a}\u000a\u000a
p1109
S'DEC RDI\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RDI + 0x1],0x2f\nLEA RDI,[RDI + 0x1]\nJZ 0x00404f80\nXOR ESI,ESI\nMOV RAX,RDI\nJMP 0x00404fa6\nINC RAX\nMOV SIL,DL\nMOVZX ECX,byte ptr [RAX]\nMOV DL,0x1\nCMP CL,0x2f\nJZ 0x00404fa0\nTEST CL,CL\nJZ 0x00404fc7\nMOV EDX,ESI\nAND DL,0x1\nJZ 0x00404fbd\nXOR ESI,ESI\nTEST DL,DL\nCMOVNZ RDI,RAX\nMOV EDX,ESI\nJMP 0x00404fa0\nMOV RAX,RDI\nRET\n'
p1110
S'48 ff cf\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n80 7f 01 2f\n48 8d 7f 01\n74 f6\n31 f6\n48 89 f8\neb 15\n48 ff c0\n40 88 d6\n0f b6 08\nb2 01\n80 f9 2f\n74 f0\n84 c9\n74 13\n89 f2\n80 e2 01\n74 02\n31 f6\n84 d2\n48 0f 45 f8\n89 f2\neb d9\n48 89 f8\nc3\n'
p1111
S'.text:0000000000404f70\n.text:0000000000404f73\n.text:0000000000404f80\n.text:0000000000404f84\n.text:0000000000404f88\n.text:0000000000404f8a\n.text:0000000000404f8c\n.text:0000000000404f8f\n.text:0000000000404fa0\n.text:0000000000404fa3\n.text:0000000000404fa6\n.text:0000000000404fa9\n.text:0000000000404fab\n.text:0000000000404fae\n.text:0000000000404fb0\n.text:0000000000404fb2\n.text:0000000000404fb4\n.text:0000000000404fb6\n.text:0000000000404fb9\n.text:0000000000404fbb\n.text:0000000000404fbd\n.text:0000000000404fbf\n.text:0000000000404fc3\n.text:0000000000404fc5\n.text:0000000000404fc7\n.text:0000000000404fca\n'
p1112
tp1113
sS'register_tm_clones'
p1114
(S'\n__stdcall register_tm_clones()\n'
p1115
V\u000a/* WARNING: Removing unreachable block (ram,0x00401813) */\u000a/* WARNING: Removing unreachable block (ram,0x0040181d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1116
S'MOV ESI,0x608270\nPUSH RBP\nSUB RSI,0x608270\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401828\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401828\nPOP RBP\nMOV EDI,0x608270\nJMP RAX\nPOP RBP\nRET\n'
p1117
S'be 70 82 60 00\n55\n48 81 ee 70 82 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 70 82 60 00\nff e0\n5d\nc3\n'
p1118
S'.text:00000000004017f0\n.text:00000000004017f5\n.text:00000000004017f6\n.text:00000000004017fd\n.text:0000000000401801\n.text:0000000000401804\n.text:0000000000401807\n.text:000000000040180b\n.text:000000000040180e\n.text:0000000000401811\n.text:0000000000401813\n.text:0000000000401818\n.text:000000000040181b\n.text:000000000040181d\n.text:000000000040181e\n.text:0000000000401823\n.text:0000000000401828\n.text:0000000000401829\n'
p1119
tp1120
sS'gettext_quote'
p1121
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1122
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_004061c0;\u000a        pcVar2 = &DAT_004061c4;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1123
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004014c0\nCMP RAX,RBX\nJNZ 0x00404108\nCALL 0x00405000\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00404110\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004040b8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x4061b0\nMOV EAX,0x4061b4\nJMP 0x00404104\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00404110\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004040f6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x4061c0\nMOV EAX,0x4061c4\nJMP 0x00404104\nCMP R14D,0x9\nMOV ECX,0x4061a4\nMOV EAX,0x4061a8\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1124
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 57 d4 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 89 0f 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 b0 61 40 00\nb8 b4 61 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 c0 61 40 00\nb8 c4 61 40 00\neb 0e\n41 83 fe 09\nb9 a4 61 40 00\nb8 a8 61 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1125
S'.text:0000000000404050\n.text:0000000000404051\n.text:0000000000404053\n.text:0000000000404054\n.text:0000000000404057\n.text:000000000040405a\n.text:000000000040405c\n.text:0000000000404061\n.text:0000000000404064\n.text:0000000000404069\n.text:000000000040406c\n.text:0000000000404072\n.text:0000000000404077\n.text:000000000040407a\n.text:000000000040407f\n.text:0000000000404084\n.text:0000000000404089\n.text:000000000040408f\n.text:0000000000404095\n.text:0000000000404098\n.text:000000000040409a\n.text:000000000040409c\n.text:00000000004040a1\n.text:00000000004040a5\n.text:00000000004040a7\n.text:00000000004040a9\n.text:00000000004040ac\n.text:00000000004040b1\n.text:00000000004040b6\n.text:00000000004040b8\n.text:00000000004040bd\n.text:00000000004040c2\n.text:00000000004040c7\n.text:00000000004040cd\n.text:00000000004040d3\n.text:00000000004040d6\n.text:00000000004040d8\n.text:00000000004040da\n.text:00000000004040df\n.text:00000000004040e3\n.text:00000000004040e5\n.text:00000000004040e7\n.text:00000000004040ea\n.text:00000000004040ef\n.text:00000000004040f4\n.text:00000000004040f6\n.text:00000000004040fa\n.text:00000000004040ff\n.text:0000000000404104\n.text:0000000000404108\n.text:0000000000404109\n.text:000000000040410b\n.text:000000000040410c\n'
p1126
tp1127
sS'c_islower'
p1128
(S'\n__stdcall c_islower()\n'
p1129
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1130
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1131
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1132
S'.text:0000000000404e50\n.text:0000000000404e53\n.text:0000000000404e56\n.text:0000000000404e59\n'
p1133
tp1134
sS'fclose'
p1135
(S'\n__stdcall fclose(FILE * __stream)\n'
p1136
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00608088)();\u000a  return iVar1;\u000a}\u000a\u000a
p1137
S'JMP qword ptr [0x00608088]\n'
p1138
S'ff 25 e2 6b 20 00\n'
p1139
S'.plt:00000000004014a0\n'
p1140
tp1141
sS'__ctype_get_mb_cur_max'
p1142
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1143
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_006080a0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1144
S'JMP qword ptr [0x006080a0]\n'
p1145
S'ff 25 ca 6b 20 00\n'
p1146
S'.plt:00000000004014d0\n'
p1147
tp1148
sS'quotearg_n_style'
p1149
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1150
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1151
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00403d80\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00403b50\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1152
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1153
S'.text:0000000000403d40\n.text:0000000000403d41\n.text:0000000000403d43\n.text:0000000000403d44\n.text:0000000000403d48\n.text:0000000000403d4b\n.text:0000000000403d4d\n.text:0000000000403d52\n.text:0000000000403d55\n.text:0000000000403d5a\n.text:0000000000403d61\n.text:0000000000403d63\n.text:0000000000403d66\n.text:0000000000403d69\n.text:0000000000403d6e\n.text:0000000000403d72\n.text:0000000000403d73\n.text:0000000000403d75\n.text:0000000000403d76\n'
p1154
tp1155
sS'fwrite'
p1156
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1157
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_006081c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1158
S'JMP qword ptr [0x006081c0]\n'
p1159
S'ff 25 aa 6a 20 00\n'
p1160
S'.plt:0000000000401710\n'
p1161
tp1162
sS'mkstemp_safer'
p1163
(S'\n__stdcall mkstemp_safer(char * templ)\n'
p1164
V\u000aint mkstemp_safer(char *templ)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  mkstemp(templ);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p1165
S'PUSH RAX\nCALL 0x00401630\nMOV EDI,EAX\nPOP RAX\nJMP 0x004044f0\n'
p1166
S'50\ne8 4a d1 ff ff\n89 c7\n58\ne9 02 00 00 00\n'
p1167
S'.text:00000000004044e0\n.text:00000000004044e1\n.text:00000000004044e6\n.text:00000000004044e8\n.text:00000000004044e9\n'
p1168
tp1169
sS'quote_n'
p1170
(S'\n__stdcall quote_n(char * arg)\n'
p1171
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1172
S'MOV RDX,-0x1\nJMP 0x00404010\n'
p1173
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1174
S'.text:0000000000404030\n.text:0000000000404037\n'
p1175
tp1176
sS'unlink'
p1177
(S'\n__stdcall unlink(char * __name)\n'
p1178
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint unlink(char *__name)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_unlink_00608040)();\u000a  return iVar1;\u000a}\u000a\u000a
p1179
S'JMP qword ptr [0x00608040]\n'
p1180
S'ff 25 2a 6c 20 00\n'
p1181
S'.plt:0000000000401410\n'
p1182
tp1183
sS'quotearg_alloc'
p1184
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1185
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1186
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x004039c0\n'
p1187
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1188
S'.text:00000000004039b0\n.text:00000000004039b3\n.text:00000000004039b5\n.text:00000000004039b8\n'
p1189
tp1190
sS'__do_global_dtors_aux'
p1191
(S'\n__stdcall __do_global_dtors_aux()\n'
p1192
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1193
S'CMP byte ptr [0x006082c8],0x0\nJNZ 0x0040184a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x004017b0\nPOP RBP\nMOV byte ptr [0x006082c8],0x1\nRET\n'
p1194
S'80 3d 91 6a 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 7e 6a 20 00 01\nf3 c3\n'
p1195
S'.text:0000000000401830\n.text:0000000000401837\n.text:0000000000401839\n.text:000000000040183a\n.text:000000000040183d\n.text:0000000000401842\n.text:0000000000401843\n.text:000000000040184a\n'
p1196
tp1197
sS'close_stdout_set_file_name'
p1198
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1199
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1200
S'MOV qword ptr [0x0060a488],RDI\nRET\n'
p1201
S'48 89 3d 21 7b 20 00\nc3\n'
p1202
S'.text:0000000000402960\n.text:0000000000402967\n'
p1203
tp1204
sS'c_isprint'
p1205
(S'\n__stdcall c_isprint()\n'
p1206
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1207
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1208
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1209
S'.text:0000000000404e60\n.text:0000000000404e63\n.text:0000000000404e66\n.text:0000000000404e69\n'
p1210
tp1211
sS'_fini'
p1212
(S'\n__stdcall _fini()\n'
p1213
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1214
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1215
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1216
S'.fini:00000000004055ac\n.fini:00000000004055b0\n.fini:00000000004055b4\n'
p1217
tp1218
sS'rpl_fcntl'
p1219
(S'\n__stdcall rpl_fcntl()\n'
p1220
V\u000a/* WARNING: Removing unreachable block (ram,0x004053fb) */\u000a/* WARNING: Removing unreachable block (ram,0x00405464) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x00405409 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1221
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x0040538b\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x004053e6\nCMP EAX,0x28\nJA 0x004053fb\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00405409\nCMP EAX,0x28\nJA 0x00405464\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00405472\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x0060a5e8],0x0\nJS 0x00405483\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00401480\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00405454\nCALL 0x00401400\nCMP dword ptr [RAX],0x16\nJNZ 0x00405454\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00405340\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x004054e6\nMOV dword ptr [0x0060a5e8],R15D\nTEST EBP,EBP\nJNS 0x00405497\nJMP 0x004054e6\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x00401480\nMOV EBP,EAX\nJMP 0x004054e6\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00405340\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004054e6\nCMP dword ptr [0x0060a5e8],-0x1\nJNZ 0x004054e6\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x00401480\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x004054cc\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x00401480\nCMP EAX,-0x1\nJNZ 0x004054e6\nCALL 0x00401400\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x00401560\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1222
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d d6 51 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 60 c0 ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 cf bf ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d 8d 51 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 01 c0 ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d 4a 51 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 d2 bf ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 b9 bf ff ff\n83 f8 ff\n75 1a\ne8 2f bf ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 82 c0 ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1223
S'.text:0000000000405340\n.text:0000000000405341\n.text:0000000000405343\n.text:0000000000405345\n.text:0000000000405346\n.text:000000000040534d\n.text:0000000000405350\n.text:0000000000405352\n.text:0000000000405354\n.text:0000000000405359\n.text:000000000040535e\n.text:0000000000405363\n.text:000000000040536b\n.text:0000000000405373\n.text:000000000040537b\n.text:0000000000405383\n.text:000000000040538b\n.text:0000000000405390\n.text:0000000000405395\n.text:000000000040539a\n.text:000000000040539f\n.text:00000000004053a4\n.text:00000000004053a9\n.text:00000000004053b1\n.text:00000000004053b6\n.text:00000000004053be\n.text:00000000004053c5\n.text:00000000004053c9\n.text:00000000004053cf\n.text:00000000004053d1\n.text:00000000004053d4\n.text:00000000004053d6\n.text:00000000004053db\n.text:00000000004053de\n.text:00000000004053e1\n.text:00000000004053e4\n.text:00000000004053e6\n.text:00000000004053e9\n.text:00000000004053eb\n.text:00000000004053ee\n.text:00000000004053f3\n.text:00000000004053f6\n.text:00000000004053f9\n.text:00000000004053fb\n.text:0000000000405400\n.text:0000000000405404\n.text:0000000000405409\n.text:000000000040540b\n.text:0000000000405412\n.text:0000000000405414\n.text:0000000000405416\n.text:0000000000405419\n.text:000000000040541b\n.text:0000000000405420\n.text:0000000000405422\n.text:0000000000405428\n.text:000000000040542a\n.text:000000000040542c\n.text:0000000000405431\n.text:0000000000405434\n.text:0000000000405436\n.text:0000000000405438\n.text:000000000040543a\n.text:000000000040543d\n.text:000000000040543f\n.text:0000000000405444\n.text:0000000000405446\n.text:000000000040544c\n.text:000000000040544e\n.text:0000000000405454\n.text:000000000040545b\n.text:000000000040545d\n.text:000000000040545f\n.text:0000000000405464\n.text:0000000000405469\n.text:000000000040546d\n.text:0000000000405472\n.text:0000000000405475\n.text:0000000000405477\n.text:000000000040547a\n.text:000000000040547f\n.text:0000000000405481\n.text:0000000000405483\n.text:0000000000405485\n.text:0000000000405487\n.text:000000000040548a\n.text:000000000040548c\n.text:0000000000405491\n.text:0000000000405493\n.text:0000000000405495\n.text:0000000000405497\n.text:000000000040549e\n.text:00000000004054a0\n.text:00000000004054a5\n.text:00000000004054a7\n.text:00000000004054a9\n.text:00000000004054ae\n.text:00000000004054b0\n.text:00000000004054b2\n.text:00000000004054b4\n.text:00000000004054b7\n.text:00000000004054bc\n.text:00000000004054be\n.text:00000000004054c0\n.text:00000000004054c2\n.text:00000000004054c7\n.text:00000000004054ca\n.text:00000000004054cc\n.text:00000000004054d1\n.text:00000000004054d4\n.text:00000000004054d7\n.text:00000000004054d9\n.text:00000000004054de\n.text:00000000004054e1\n.text:00000000004054e6\n.text:00000000004054e8\n.text:00000000004054ef\n.text:00000000004054f0\n.text:00000000004054f2\n.text:00000000004054f4\n.text:00000000004054f5\n'
p1224
tp1225
sS'__fpending'
p1226
(S'\n__stdcall __fpending()\n'
p1227
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00608060)();\u000a  return;\u000a}\u000a\u000a
p1228
S'JMP qword ptr [0x00608060]\n'
p1229
S'ff 25 0a 6c 20 00\n'
p1230
S'.plt:0000000000401450\n'
p1231
tp1232
s.