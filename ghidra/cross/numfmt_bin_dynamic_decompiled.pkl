(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060e190)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0060e190]\n'
p4
S'ff 25 da c8 20 00\n'
p5
S'.plt:00000000004018b0\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040af3b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x406e77;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x406ef8;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x406f8c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00406d08\nMOV EDX,0x40af28\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x004019a0\nJMP 0x00406d1d\nMOV EDX,0x40af34\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x40af3b\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40b210\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x40af3f\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x004017c0\nCMP R12,0x9\nJA 0x00406da6\nJMP qword ptr [0x40aed8 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40b00a\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x40b149\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004019a0\nADD RSP,0x38\nJMP 0x00407017\nXOR EDI,EDI\nMOV ESI,0x40b01a\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x40b031\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004019a0\nXOR EDI,EDI\nMOV ESI,0x40b04d\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004019a0\nADD RSP,0x18\nJMP 0x00407017\nXOR EDI,EDI\nMOV ESI,0x40b06d\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004019a0\nADD RSP,0x18\nJMP 0x00407017\nXOR EDI,EDI\nMOV ESI,0x40b091\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004019a0\nADD RSP,0x28\nJMP 0x00407017\nXOR EDI,EDI\nMOV ESI,0x40b0b9\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004019a0\nADD RSP,0x28\nJMP 0x00407017\nXOR EDI,EDI\nMOV ESI,0x40b0e5\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004019a0\nADD RSP,0x38\nJMP 0x00407017\nXOR EDI,EDI\nMOV ESI,0x40b115\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x004019a0\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401600\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 28 af 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 9a ac ff ff\neb 15\nba 34 af 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 83 ac ff ff\n31 ff\nbe 3b af 40 00\nba 05 00 00 00\ne8 a2 a9 ff ff\n48 89 c1\nbe 01 00 00 00\nba 10 b2 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 55 ac ff ff\n31 ff\nbe 3f af 40 00\nba 05 00 00 00\ne8 74 a9 ff ff\n48 89 c7\n4c 89 f6\ne8 59 aa ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 d8 ae 40 00\n31 ff\nbe 0a b0 40 00\nba 05 00 00 00\ne8 4a a9 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 fa ab ff ff\n31 ff\nbe 49 b1 40 00\nba 05 00 00 00\ne8 19 a9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 b1 ab ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 1a b0 40 00\nba 05 00 00 00\ne8 c7 a8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 73 ab ff ff\n31 ff\nbe 31 b0 40 00\nba 05 00 00 00\ne8 92 a8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 3a ab ff ff\n31 ff\nbe 4d b0 40 00\nba 05 00 00 00\ne8 59 a8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 04 ab ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 6d b0 40 00\nba 05 00 00 00\ne8 1a a8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 c2 aa ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 91 b0 40 00\nba 05 00 00 00\ne8 d8 a7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 78 aa ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe b9 b0 40 00\nba 05 00 00 00\ne8 8e a7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 2e aa ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe e5 b0 40 00\nba 05 00 00 00\ne8 44 a7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 dc a9 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 15 b1 40 00\nba 05 00 00 00\ne8 f5 a6 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 8d a9 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 dc a5 ff ff\n'
p12
S'.text:0000000000406cd0\n.text:0000000000406cd2\n.text:0000000000406cd4\n.text:0000000000406cd6\n.text:0000000000406cd7\n.text:0000000000406cd8\n.text:0000000000406cdb\n.text:0000000000406cde\n.text:0000000000406ce1\n.text:0000000000406ce4\n.text:0000000000406ce7\n.text:0000000000406cea\n.text:0000000000406cef\n.text:0000000000406cf2\n.text:0000000000406cf4\n.text:0000000000406cf9\n.text:0000000000406cfb\n.text:0000000000406cfe\n.text:0000000000406d01\n.text:0000000000406d06\n.text:0000000000406d08\n.text:0000000000406d0d\n.text:0000000000406d0f\n.text:0000000000406d12\n.text:0000000000406d15\n.text:0000000000406d18\n.text:0000000000406d1d\n.text:0000000000406d1f\n.text:0000000000406d24\n.text:0000000000406d29\n.text:0000000000406d2e\n.text:0000000000406d31\n.text:0000000000406d36\n.text:0000000000406d3b\n.text:0000000000406d41\n.text:0000000000406d43\n.text:0000000000406d46\n.text:0000000000406d4b\n.text:0000000000406d4d\n.text:0000000000406d52\n.text:0000000000406d57\n.text:0000000000406d5c\n.text:0000000000406d5f\n.text:0000000000406d62\n.text:0000000000406d67\n.text:0000000000406d6b\n.text:0000000000406d6d\n.text:0000000000406d75\n.text:0000000000406d77\n.text:0000000000406d7c\n.text:0000000000406d81\n.text:0000000000406d86\n.text:0000000000406d89\n.text:0000000000406d8c\n.text:0000000000406d91\n.text:0000000000406d93\n.text:0000000000406d96\n.text:0000000000406d9a\n.text:0000000000406d9b\n.text:0000000000406d9d\n.text:0000000000406d9f\n.text:0000000000406da1\n.text:0000000000406da6\n.text:0000000000406da8\n.text:0000000000406dad\n.text:0000000000406db2\n.text:0000000000406db7\n.text:0000000000406dba\n.text:0000000000406dbd\n.text:0000000000406dc1\n.text:0000000000406dc5\n.text:0000000000406dca\n.text:0000000000406dcf\n.text:0000000000406dd2\n.text:0000000000406dd6\n.text:0000000000406dda\n.text:0000000000406dde\n.text:0000000000406de2\n.text:0000000000406de6\n.text:0000000000406dea\n.text:0000000000406def\n.text:0000000000406df3\n.text:0000000000406df8\n.text:0000000000406dfa\n.text:0000000000406dff\n.text:0000000000406e04\n.text:0000000000406e09\n.text:0000000000406e0c\n.text:0000000000406e0f\n.text:0000000000406e13\n.text:0000000000406e18\n.text:0000000000406e1a\n.text:0000000000406e1d\n.text:0000000000406e21\n.text:0000000000406e22\n.text:0000000000406e24\n.text:0000000000406e26\n.text:0000000000406e28\n.text:0000000000406e2d\n.text:0000000000406e2f\n.text:0000000000406e34\n.text:0000000000406e39\n.text:0000000000406e3e\n.text:0000000000406e41\n.text:0000000000406e44\n.text:0000000000406e48\n.text:0000000000406e4c\n.text:0000000000406e51\n.text:0000000000406e53\n.text:0000000000406e56\n.text:0000000000406e5a\n.text:0000000000406e5b\n.text:0000000000406e5d\n.text:0000000000406e5f\n.text:0000000000406e61\n.text:0000000000406e66\n.text:0000000000406e68\n.text:0000000000406e6d\n.text:0000000000406e72\n.text:0000000000406e77\n.text:0000000000406e7a\n.text:0000000000406e7d\n.text:0000000000406e81\n.text:0000000000406e85\n.text:0000000000406e89\n.text:0000000000406e8e\n.text:0000000000406e90\n.text:0000000000406e93\n.text:0000000000406e97\n.text:0000000000406e9c\n.text:0000000000406ea0\n.text:0000000000406ea5\n.text:0000000000406ea7\n.text:0000000000406eac\n.text:0000000000406eb1\n.text:0000000000406eb6\n.text:0000000000406eb9\n.text:0000000000406ebc\n.text:0000000000406ec0\n.text:0000000000406ec4\n.text:0000000000406ec9\n.text:0000000000406ece\n.text:0000000000406ed1\n.text:0000000000406ed5\n.text:0000000000406ed9\n.text:0000000000406ede\n.text:0000000000406ee2\n.text:0000000000406ee7\n.text:0000000000406ee9\n.text:0000000000406eee\n.text:0000000000406ef3\n.text:0000000000406ef8\n.text:0000000000406efb\n.text:0000000000406efe\n.text:0000000000406f02\n.text:0000000000406f06\n.text:0000000000406f0a\n.text:0000000000406f0f\n.text:0000000000406f14\n.text:0000000000406f17\n.text:0000000000406f1b\n.text:0000000000406f1f\n.text:0000000000406f23\n.text:0000000000406f28\n.text:0000000000406f2c\n.text:0000000000406f31\n.text:0000000000406f33\n.text:0000000000406f38\n.text:0000000000406f3d\n.text:0000000000406f42\n.text:0000000000406f45\n.text:0000000000406f48\n.text:0000000000406f4c\n.text:0000000000406f50\n.text:0000000000406f55\n.text:0000000000406f5a\n.text:0000000000406f5d\n.text:0000000000406f61\n.text:0000000000406f65\n.text:0000000000406f69\n.text:0000000000406f6d\n.text:0000000000406f72\n.text:0000000000406f76\n.text:0000000000406f7b\n.text:0000000000406f7d\n.text:0000000000406f82\n.text:0000000000406f87\n.text:0000000000406f8c\n.text:0000000000406f8f\n.text:0000000000406f92\n.text:0000000000406f96\n.text:0000000000406f9a\n.text:0000000000406f9e\n.text:0000000000406fa3\n.text:0000000000406fa8\n.text:0000000000406fab\n.text:0000000000406faf\n.text:0000000000406fb3\n.text:0000000000406fb7\n.text:0000000000406fbb\n.text:0000000000406fbf\n.text:0000000000406fc4\n.text:0000000000406fc8\n.text:0000000000406fca\n.text:0000000000406fcc\n.text:0000000000406fd1\n.text:0000000000406fd6\n.text:0000000000406fdb\n.text:0000000000406fde\n.text:0000000000406fe1\n.text:0000000000406fe5\n.text:0000000000406fe9\n.text:0000000000406fee\n.text:0000000000406ff3\n.text:0000000000406ff6\n.text:0000000000406ffa\n.text:0000000000406ffe\n.text:0000000000407002\n.text:0000000000407006\n.text:000000000040700a\n.text:000000000040700e\n.text:0000000000407013\n.text:0000000000407017\n.text:0000000000407018\n.text:000000000040701a\n.text:000000000040701c\n.text:000000000040701e\n.text:000000000040701f\n'
p13
tp14
sS'__strncat_chk'
p15
(S'\n__stdcall __strncat_chk()\n'
p16
V\u000avoid __strncat_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___strncat_chk_0060e210)();\u000a  return;\u000a}\u000a\u000a
p17
S'JMP qword ptr [0x0060e210]\n'
p18
S'ff 25 5a c8 20 00\n'
p19
S'.plt:00000000004019b0\n'
p20
tp21
sS'strchr'
p22
(S'\n__stdcall strchr(char * __s, int __c)\n'
p23
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0060e0c8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p24
S'JMP qword ptr [0x0060e0c8]\n'
p25
S'ff 25 a2 c9 20 00\n'
p26
S'.plt:0000000000401720\n'
p27
tp28
sS'rpl_fclose'
p29
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p30
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00407df9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00407df9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401850\nTEST EAX,EAX\nJS 0x00407df9\nMOV RDI,RBX\nCALL 0x004018c0\nTEST EAX,EAX\nJZ 0x00407dc7\nMOV RDI,RBX\nCALL 0x00401850\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401740\nCMP RAX,-0x1\nJZ 0x00407df9\nMOV RDI,RBX\nCALL 0x00407e10\nTEST EAX,EAX\nJZ 0x00407df9\nCALL 0x00401610\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004016b0\nTEST EBP,EBP\nJZ 0x00407df2\nCALL 0x00401610\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004016b0\n'
p32
S'55\n53\n50\n48 89 fb\ne8 b5 9a ff ff\n85 c0\n78 5a\n48 89 df\ne8 19 9b ff ff\n85 c0\n74 1c\n48 89 df\ne8 9d 9a ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 7f 99 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 38 98 ff ff\n8b 28\n48 89 df\ne8 ce 98 ff ff\n85 ed\n74 0c\ne8 25 98 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 a9 98 ff ff\n'
p33
S'.text:0000000000407d90\n.text:0000000000407d91\n.text:0000000000407d92\n.text:0000000000407d93\n.text:0000000000407d96\n.text:0000000000407d9b\n.text:0000000000407d9d\n.text:0000000000407d9f\n.text:0000000000407da2\n.text:0000000000407da7\n.text:0000000000407da9\n.text:0000000000407dab\n.text:0000000000407dae\n.text:0000000000407db3\n.text:0000000000407db5\n.text:0000000000407dba\n.text:0000000000407dbc\n.text:0000000000407dc1\n.text:0000000000407dc5\n.text:0000000000407dc7\n.text:0000000000407dca\n.text:0000000000407dcf\n.text:0000000000407dd1\n.text:0000000000407dd3\n.text:0000000000407dd8\n.text:0000000000407dda\n.text:0000000000407ddd\n.text:0000000000407de2\n.text:0000000000407de4\n.text:0000000000407de6\n.text:0000000000407deb\n.text:0000000000407ded\n.text:0000000000407df2\n.text:0000000000407df6\n.text:0000000000407df7\n.text:0000000000407df8\n.text:0000000000407df9\n.text:0000000000407dfc\n.text:0000000000407e00\n.text:0000000000407e01\n.text:0000000000407e02\n'
p34
tp35
sS'to_uchar'
p36
(S'\n__stdcall to_uchar()\n'
p37
V\u000auchar to_uchar(void)\u000a\u000a{\u000a  uchar in_DIL;\u000a  \u000a  return in_DIL;\u000a}\u000a\u000a
p38
S'MOV EAX,EDI\nRET\n'
p39
S'89 f8\nc3\n'
p40
S'.text:0000000000404830\n.text:0000000000404832\n'
p41
tp42
sS'strncmp'
p43
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p44
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060e048)();\u000a  return iVar1;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x0060e048]\n'
p46
S'ff 25 22 ca 20 00\n'
p47
S'.plt:0000000000401620\n'
p48
tp49
sS'xnrealloc'
p50
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p51
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p52
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00407224\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00407230\nPUSH RAX\nCALL 0x00407380\n'
p53
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p54
S'.text:0000000000407210\n.text:0000000000407213\n.text:0000000000407216\n.text:0000000000407219\n.text:000000000040721b\n.text:000000000040721f\n.text:0000000000407222\n.text:0000000000407224\n.text:0000000000407225\n'
p55
tp56
sS'quote'
p57
(S'\n__stdcall quote(char * arg)\n'
p58
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p59
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004068b0\n'
p60
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p61
S'.text:00000000004068c0\n.text:00000000004068c3\n.text:00000000004068c5\n.text:00000000004068c8\n'
p62
tp63
sS'emit_bug_reporting_address'
p64
(S'\n__stdcall emit_bug_reporting_address()\n'
p65
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p66
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40b185\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40b19a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401900\nXOR EDI,EDI\nMOV ESI,0x40b1b0\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x409abc\nMOV ECX,0x409cd4\nXOR EAX,EAX\nCALL 0x00401900\nXOR EDI,EDI\nMOV ESI,0x40b1c4\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004017c0\n'
p67
S'50\n31 ff\nbe 85 b1 40 00\nba 05 00 00 00\ne8 6e a5 ff ff\n48 89 c1\nbf 01 00 00 00\nba 9a b1 40 00\n31 c0\n48 89 ce\ne8 87 a7 ff ff\n31 ff\nbe b0 b1 40 00\nba 05 00 00 00\ne8 46 a5 ff ff\n48 89 c6\nbf 01 00 00 00\nba bc 9a 40 00\nb9 d4 9c 40 00\n31 c0\ne8 5d a7 ff ff\n31 ff\nbe c4 b1 40 00\nba 05 00 00 00\ne8 1c a5 ff ff\n48 8b 35 2d 71 20 00\n48 89 c7\n58\ne9 fc a5 ff ff\n'
p68
S'.text:0000000000407150\n.text:0000000000407151\n.text:0000000000407153\n.text:0000000000407158\n.text:000000000040715d\n.text:0000000000407162\n.text:0000000000407165\n.text:000000000040716a\n.text:000000000040716f\n.text:0000000000407171\n.text:0000000000407174\n.text:0000000000407179\n.text:000000000040717b\n.text:0000000000407180\n.text:0000000000407185\n.text:000000000040718a\n.text:000000000040718d\n.text:0000000000407192\n.text:0000000000407197\n.text:000000000040719c\n.text:000000000040719e\n.text:00000000004071a3\n.text:00000000004071a5\n.text:00000000004071aa\n.text:00000000004071af\n.text:00000000004071b4\n.text:00000000004071bb\n.text:00000000004071be\n.text:00000000004071bf\n'
p69
tp70
sS'clone_quoting_options'
p71
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p72
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p73
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401610\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60e3e0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00407330\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p74
S'55\n41 56\n53\n48 89 fb\ne8 84 c1 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 e0 e3 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 85 1e 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p75
S'.text:0000000000405480\n.text:0000000000405481\n.text:0000000000405483\n.text:0000000000405484\n.text:0000000000405487\n.text:000000000040548c\n.text:000000000040548f\n.text:0000000000405492\n.text:0000000000405495\n.text:000000000040549a\n.text:000000000040549e\n.text:00000000004054a3\n.text:00000000004054a6\n.text:00000000004054ab\n.text:00000000004054ae\n.text:00000000004054af\n.text:00000000004054b1\n.text:00000000004054b2\n'
p76
tp77
sS'xmalloc'
p78
(S'\n__stdcall xmalloc(size_t n)\n'
p79
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p80
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401880\nTEST RBX,RBX\nJZ 0x00407203\nTEST RAX,RAX\nJZ 0x00407205\nPOP RBX\nRET\nCALL 0x00407380\n'
p81
S'53\n48 89 fb\ne8 87 a6 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p82
S'.text:00000000004071f0\n.text:00000000004071f1\n.text:00000000004071f4\n.text:00000000004071f9\n.text:00000000004071fc\n.text:00000000004071fe\n.text:0000000000407201\n.text:0000000000407203\n.text:0000000000407204\n.text:0000000000407205\n'
p83
tp84
sS'quotearg_char_mem'
p85
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p86
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p87
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060e410]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060e400]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e3f0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e3e0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x004054e0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004063d0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p88
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 18 7d 20 00\n48 89 4c 24 30\n0f 10 05 fc 7c 20 00\n0f 29 44 24 20\n0f 10 05 e0 7c 20 00\n0f 29 44 24 10\n0f 10 05 c4 7c 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p89
S'.text:00000000004066e0\n.text:00000000004066e2\n.text:00000000004066e4\n.text:00000000004066e5\n.text:00000000004066e9\n.text:00000000004066eb\n.text:00000000004066ee\n.text:00000000004066f1\n.text:00000000004066f8\n.text:00000000004066fd\n.text:0000000000406704\n.text:0000000000406709\n.text:0000000000406710\n.text:0000000000406715\n.text:000000000040671c\n.text:0000000000406720\n.text:0000000000406723\n.text:0000000000406728\n.text:000000000040672b\n.text:000000000040672d\n.text:0000000000406732\n.text:0000000000406734\n.text:0000000000406737\n.text:000000000040673a\n.text:000000000040673d\n.text:0000000000406742\n.text:0000000000406746\n.text:0000000000406747\n.text:0000000000406749\n.text:000000000040674b\n'
p90
tp91
sS'suffix_power_char'
p92
(S'\n__stdcall suffix_power_char()\n'
p93
V\u000achar * suffix_power_char(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if (in_EDI < 9) {\u000a    return (&PTR_s__00408920)[(long)(int)in_EDI];\u000a  }\u000a  return "(error)";\u000a}\u000a\u000a
p94
S'CMP EDI,0x8\nJA 0x004042a1\nMOVSXD RAX,EDI\nMOV RAX,qword ptr [0x408920 + RAX*0x8]\nRET\nMOV EAX,0x40a462\nRET\n'
p95
S'83 ff 08\n77 0c\n48 63 c7\n48 8b 04 c5 20 89 40 00\nc3\nb8 62 a4 40 00\nc3\n'
p96
S'.text:0000000000404290\n.text:0000000000404293\n.text:0000000000404295\n.text:0000000000404298\n.text:00000000004042a0\n.text:00000000004042a1\n.text:00000000004042a6\n'
p97
tp98
sS'frame_dummy'
p99
(S'\n__stdcall frame_dummy()\n'
p100
V\u000a/* WARNING: Removing unreachable block (ram,0x00401aea) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p101
S'MOV EDI,0x60de18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401ae0\nJMP 0x00401a70\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401adb\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401a70\n'
p102
S'bf 18 de 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p103
S'.text:0000000000401ad0\n.text:0000000000401ad5\n.text:0000000000401ad9\n.text:0000000000401adb\n.text:0000000000401ae0\n.text:0000000000401ae5\n.text:0000000000401ae8\n.text:0000000000401aea\n.text:0000000000401aeb\n.text:0000000000401aee\n.text:0000000000401af0\n.text:0000000000401af1\n'
p104
tp105
sS'quotearg_n_style_colon'
p106
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p107
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p108
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00406600\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x004054e0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x004063d0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p109
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p110
S'.text:0000000000406780\n.text:0000000000406781\n.text:0000000000406783\n.text:0000000000406784\n.text:0000000000406788\n.text:000000000040678b\n.text:000000000040678d\n.text:0000000000406792\n.text:0000000000406795\n.text:000000000040679a\n.text:000000000040679f\n.text:00000000004067a4\n.text:00000000004067a7\n.text:00000000004067ac\n.text:00000000004067b3\n.text:00000000004067b5\n.text:00000000004067b8\n.text:00000000004067bb\n.text:00000000004067c0\n.text:00000000004067c4\n.text:00000000004067c5\n.text:00000000004067c7\n.text:00000000004067c8\n'
p111
tp112
sS'quote_mem'
p113
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p114
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p115
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00406890\n'
p116
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p117
S'.text:00000000004068a0\n.text:00000000004068a3\n.text:00000000004068a6\n.text:00000000004068a8\n.text:00000000004068ab\n.text:00000000004068ae\n'
p118
tp119
sS'fileno'
p120
(S'\n__stdcall fileno(FILE * __stream)\n'
p121
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060e160)();\u000a  return iVar1;\u000a}\u000a\u000a
p122
S'JMP qword ptr [0x0060e160]\n'
p123
S'ff 25 0a c9 20 00\n'
p124
S'.plt:0000000000401850\n'
p125
tp126
sS'simple_round_to_zero'
p127
(S'\n__stdcall simple_round_to_zero(longdouble val)\n'
p128
V\u000aintmax_t simple_round_to_zero(longdouble val)\u000a\u000a{\u000a  float10 in_stack_00000008;\u000a  \u000a  return (long)ROUND(in_stack_00000008);\u000a}\u000a\u000a
p129
S'FLD tword ptr [RSP + 0x8]\nFNSTCW word ptr [RSP + -0xa]\nMOVZX EAX,word ptr [RSP + -0xa]\nMOV word ptr [RSP + -0xa],0xc7f\nFLDCW word ptr [RSP + -0xa]\nMOV word ptr [RSP + -0xa],AX\nFISTP qword ptr [RSP + -0x8]\nFLDCW word ptr [RSP + -0xa]\nMOV RAX,qword ptr [RSP + -0x8]\nRET\n'
p130
S'db 6c 24 08\nd9 7c 24 f6\n0f b7 44 24 f6\n66 c7 44 24 f6 7f 0c\nd9 6c 24 f6\n66 89 44 24 f6\ndf 7c 24 f8\nd9 6c 24 f6\n48 8b 44 24 f8\nc3\n'
p131
S'.text:0000000000404350\n.text:0000000000404354\n.text:0000000000404358\n.text:000000000040435d\n.text:0000000000404364\n.text:0000000000404368\n.text:000000000040436d\n.text:0000000000404371\n.text:0000000000404375\n.text:000000000040437a\n'
p132
tp133
sS'mbrtowc'
p134
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p135
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060e0c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p136
S'JMP qword ptr [0x0060e0c0]\n'
p137
S'ff 25 aa c9 20 00\n'
p138
S'.plt:0000000000401710\n'
p139
tp140
sS'xstrtoumax'
p141
(S'\n__stdcall xstrtoumax(char * s, char * * ptr, uintmax_t * val, char * valid_suffixes)\n'
p142
V\u000astrtol_error xstrtoumax(char *s,char **ptr,uintmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  uintmax_t local_48;\u000a  uintmax_t *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)");\u000a  }\u000a  local_40 = (uintmax_t *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoumax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_004078f6;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_004078f6;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00407825_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00407803:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00407803;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_004078d7;\u000a  default:\u000aswitchD_00407825_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_004078d7;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_004078d7:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_004078f6:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p143
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00407913\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401610\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x004019f0\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00407710\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00407902\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401950\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00407770\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x004077a1\nCMP EAX,0x22\nJNZ 0x00407902\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x004077ac\nJMP 0x004078f6\nTEST R12,R12\nJZ 0x00407902\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00407902\nMOV RDI,R12\nCALL 0x00401720\nTEST RAX,RAX\nJZ 0x00407902\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x004077ac\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x004078f6\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x004078f6\nMOV RDI,R12\nCALL 0x00401720\nTEST RAX,RAX\nJZ 0x0040783e\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00401720\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00407803\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x0040780a\nCMP EAX,0x44\nJZ 0x0040780a\nCMP EAX,0x69\nJNZ 0x00407803\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00407814\nMOV EBP,0x1\nJMP 0x00407814\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x0040783e\nXOR EAX,EAX\nJMP qword ptr [0x40b470 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00407960\nJMP 0x004078dc\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00407902\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00407960\nJMP 0x004078dc\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00407960\nJMP 0x004078dc\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00407960\nJMP 0x004078dc\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x004078d7\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00407960\nJMP 0x004078dc\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00407960\nJMP 0x004078dc\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00407960\nJMP 0x004078dc\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00407960\nJMP 0x004078dc\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x004078d7\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00407930\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40b400\nMOV ESI,0x40b620\nMOV EDX,0x60\nMOV ECX,0x40b630\nCALL 0x00401750\n'
p144
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 22 9f ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 f3 a2 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 0c a2 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 94 9f ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 5c 9f ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 4a 9f ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd 70 b4 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 00 b4 40 00\nbe 20 b6 40 00\nba 60 00 00 00\nb9 30 b6 40 00\ne8 24 9e ff ff\n'
p145
S'.text:00000000004076c0\n.text:00000000004076c1\n.text:00000000004076c3\n.text:00000000004076c5\n.text:00000000004076c7\n.text:00000000004076c9\n.text:00000000004076ca\n.text:00000000004076ce\n.text:00000000004076d1\n.text:00000000004076d4\n.text:00000000004076d7\n.text:00000000004076da\n.text:00000000004076de\n.text:00000000004076e4\n.text:00000000004076e9\n.text:00000000004076ee\n.text:00000000004076f1\n.text:00000000004076f8\n.text:00000000004076fd\n.text:0000000000407700\n.text:0000000000407703\n.text:0000000000407710\n.text:0000000000407713\n.text:0000000000407716\n.text:000000000040771b\n.text:000000000040771d\n.text:0000000000407720\n.text:0000000000407725\n.text:0000000000407729\n.text:000000000040772e\n.text:0000000000407730\n.text:0000000000407736\n.text:0000000000407739\n.text:000000000040773c\n.text:000000000040773f\n.text:0000000000407744\n.text:0000000000407748\n.text:000000000040774c\n.text:000000000040774f\n.text:0000000000407751\n.text:0000000000407754\n.text:0000000000407756\n.text:0000000000407758\n.text:000000000040775b\n.text:0000000000407761\n.text:0000000000407766\n.text:0000000000407769\n.text:000000000040776b\n.text:0000000000407770\n.text:0000000000407773\n.text:0000000000407779\n.text:000000000040777c\n.text:000000000040777e\n.text:0000000000407784\n.text:0000000000407787\n.text:000000000040778c\n.text:000000000040778f\n.text:0000000000407795\n.text:000000000040779d\n.text:000000000040779f\n.text:00000000004077a1\n.text:00000000004077a3\n.text:00000000004077a6\n.text:00000000004077ac\n.text:00000000004077b0\n.text:00000000004077b4\n.text:00000000004077b6\n.text:00000000004077bc\n.text:00000000004077bf\n.text:00000000004077c4\n.text:00000000004077c7\n.text:00000000004077c9\n.text:00000000004077ce\n.text:00000000004077d1\n.text:00000000004077d6\n.text:00000000004077db\n.text:00000000004077de\n.text:00000000004077e0\n.text:00000000004077e4\n.text:00000000004077e7\n.text:00000000004077e9\n.text:00000000004077ec\n.text:00000000004077ee\n.text:00000000004077f1\n.text:00000000004077f3\n.text:00000000004077f5\n.text:00000000004077f9\n.text:00000000004077fc\n.text:0000000000407801\n.text:0000000000407803\n.text:0000000000407808\n.text:000000000040780a\n.text:000000000040780f\n.text:0000000000407814\n.text:0000000000407818\n.text:000000000040781b\n.text:000000000040781e\n.text:0000000000407821\n.text:0000000000407823\n.text:0000000000407825\n.text:000000000040782c\n.text:000000000040782f\n.text:0000000000407834\n.text:0000000000407839\n.text:000000000040783e\n.text:0000000000407842\n.text:0000000000407847\n.text:000000000040784a\n.text:000000000040784d\n.text:0000000000407852\n.text:0000000000407855\n.text:000000000040785a\n.text:000000000040785f\n.text:0000000000407861\n.text:0000000000407864\n.text:0000000000407869\n.text:000000000040786e\n.text:0000000000407870\n.text:0000000000407873\n.text:0000000000407878\n.text:000000000040787d\n.text:000000000040787f\n.text:0000000000407882\n.text:0000000000407887\n.text:0000000000407889\n.text:000000000040788c\n.text:0000000000407891\n.text:0000000000407896\n.text:0000000000407898\n.text:000000000040789b\n.text:00000000004078a0\n.text:00000000004078a5\n.text:00000000004078a7\n.text:00000000004078aa\n.text:00000000004078af\n.text:00000000004078b4\n.text:00000000004078b6\n.text:00000000004078b9\n.text:00000000004078be\n.text:00000000004078c3\n.text:00000000004078c5\n.text:00000000004078c8\n.text:00000000004078cd\n.text:00000000004078cf\n.text:00000000004078d2\n.text:00000000004078d7\n.text:00000000004078dc\n.text:00000000004078de\n.text:00000000004078e2\n.text:00000000004078e6\n.text:00000000004078ea\n.text:00000000004078ec\n.text:00000000004078ef\n.text:00000000004078f3\n.text:00000000004078f6\n.text:00000000004078fa\n.text:00000000004078ff\n.text:0000000000407902\n.text:0000000000407904\n.text:0000000000407908\n.text:0000000000407909\n.text:000000000040790b\n.text:000000000040790d\n.text:000000000040790f\n.text:0000000000407911\n.text:0000000000407912\n.text:0000000000407913\n.text:0000000000407918\n.text:000000000040791d\n.text:0000000000407922\n.text:0000000000407927\n'
p146
tp147
sS'setlocale'
p148
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p149
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060e1b0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p150
S'JMP qword ptr [0x0060e1b0]\n'
p151
S'ff 25 ba c8 20 00\n'
p152
S'.plt:00000000004018f0\n'
p153
tp154
sS'c_toupper'
p155
(S'\n__stdcall c_toupper()\n'
p156
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p157
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p158
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p159
S'.text:0000000000404e60\n.text:0000000000404e63\n.text:0000000000404e66\n.text:0000000000404e69\n.text:0000000000404e6c\n'
p160
tp161
sS'mbsinit'
p162
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060e218)();\u000a  return iVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0060e218]\n'
p165
S'ff 25 52 c8 20 00\n'
p166
S'.plt:00000000004019c0\n'
p167
tp168
sS'dcgettext'
p169
(S'\n__stdcall dcgettext()\n'
p170
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060e0a0)();\u000a  return;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x0060e0a0]\n'
p172
S'ff 25 ca c9 20 00\n'
p173
S'.plt:00000000004016d0\n'
p174
tp175
sS'quotearg_free'
p176
(S'\n__stdcall quotearg_free()\n'
p177
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p178
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060e280]\nCMP dword ptr [0x0060e288],0x2\nJC 0x0040636a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004015e0\nINC RBX\nMOV EAX,dword ptr [0x0060e288]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00406350\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60e420\nCMP RDI,RAX\nJZ 0x00406393\nCALL 0x004015e0\nMOV qword ptr [0x0060e290],0x100\nMOV qword ptr [0x0060e298],0x60e420\nMOV EAX,0x60e290\nCMP R14,RAX\nJZ 0x004063b0\nMOV RDI,R14\nCALL 0x004015e0\nMOV qword ptr [0x0060e280],0x60e290\nMOV dword ptr [0x0060e288],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p179
S'41 57\n41 56\n53\n4c 8b 35 44 7f 20 00\n83 3d 45 7f 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 88 b2 ff ff\n48 ff c3\n8b 05 27 7f 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 20 e4 60 00\n48 39 c7\n74 1b\ne8 63 b2 ff ff\n48 c7 05 08 7f 20 00 00 01 00 00\n48 c7 05 05 7f 20 00 20 e4 60 00\nb8 90 e2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 3b b2 ff ff\n48 c7 05 d0 7e 20 00 90 e2 60 00\nc7 05 ce 7e 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p180
S'.text:0000000000406330\n.text:0000000000406332\n.text:0000000000406334\n.text:0000000000406335\n.text:000000000040633c\n.text:0000000000406343\n.text:0000000000406345\n.text:0000000000406349\n.text:000000000040634e\n.text:0000000000406350\n.text:0000000000406353\n.text:0000000000406358\n.text:000000000040635b\n.text:0000000000406361\n.text:0000000000406365\n.text:0000000000406368\n.text:000000000040636a\n.text:000000000040636e\n.text:0000000000406373\n.text:0000000000406376\n.text:0000000000406378\n.text:000000000040637d\n.text:0000000000406388\n.text:0000000000406393\n.text:0000000000406398\n.text:000000000040639b\n.text:000000000040639d\n.text:00000000004063a0\n.text:00000000004063a5\n.text:00000000004063b0\n.text:00000000004063ba\n.text:00000000004063bb\n.text:00000000004063bd\n.text:00000000004063bf\n'
p181
tp182
sS'set_fields'
p183
(S'\n__stdcall set_fields(char * fieldstr)\n'
p184
V\u000avoid set_fields(char *fieldstr)\u000a\u000a{\u000a  ulong uVar1;\u000a  char cVar2;\u000a  ushort *puVar3;\u000a  field_range_pair *pfVar4;\u000a  char *num_start;\u000a  byte bVar5;\u000a  int iVar6;\u000a  ushort **ppuVar7;\u000a  size_t n;\u000a  char *arg;\u000a  undefined8 uVar8;\u000a  char *string;\u000a  bool bVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  uint in_ESI;\u000a  ulong hi;\u000a  ulong uVar12;\u000a  byte bVar13;\u000a  ulong local_40;\u000a  \u000a  if ((in_ESI & 1) == 0) {\u000a    uVar11 = 0;\u000a  }\u000a  else {\u000a    iVar6 = 0x2d - (uint)(byte)*fieldstr;\u000a    if (iVar6 == 0) {\u000a      iVar6 = -(uint)(byte)fieldstr[1];\u000a    }\u000a    uVar11 = (ulong)(iVar6 == 0);\u000a    if (iVar6 == 0) {\u000a      fieldstr = fieldstr + 1;\u000a    }\u000a  }\u000a  bVar9 = false;\u000a  local_40 = 1;\u000a  hi = uVar11;\u000a  uVar10 = uVar11;\u000a  do {\u000a    bVar13 = 0;\u000a    while( true ) {\u000a      cVar2 = *fieldstr;\u000a      if ((int)cVar2 == 0x2c) break;\u000a      if (cVar2 == '-') {\u000a        if (uVar11 != 0) {\u000a          string = "invalid byte or character range";\u000a          arg = "invalid field range";\u000a          goto LAB_004047e5;\u000a        }\u000a        if ((hi == 0) && (uVar10 != 0)) goto LAB_004047c6;\u000a        if (uVar10 == 0) {\u000a          hi = 1;\u000a        }\u000a        uVar11 = 1;\u000a        local_40 = hi;\u000a        goto LAB_00404430;\u000a      }\u000a      ppuVar7 = __ctype_b_loc();\u000a      puVar3 = *ppuVar7;\u000a      bVar5 = to_uchar();\u000a      if ((cVar2 == 0) || ((puVar3[(ulong)bVar5] & 1) != 0)) break;\u000a      if (9 < (int)cVar2 - 0x30U) {\u000aLAB_00404781:\u000a        string = "invalid field value %s";\u000a        if ((in_ESI & 4) != 0) {\u000a          string = "invalid byte/character position %s";\u000a        }\u000a        uVar8 = dcgettext(0,string,5);\u000a        string = quote(fieldstr);\u000a        error(0,0,uVar8,string);\u000a        usage(1);\u000a        goto LAB_004047c6;\u000a      }\u000a      if (!(bool)(bVar13 & num_start != (char *)0x0)) {\u000a        num_start = fieldstr;\u000a      }\u000a      string = num_start;\u000a      bVar5 = 1;\u000a      if (uVar11 != 0) {\u000a        bVar9 = true;\u000a        bVar5 = (byte)uVar10;\u000a      }\u000a      if (((0x1999999999999999 < hi) || (uVar1 = (long)*fieldstr + -0x30 + hi * 10, uVar1 < hi)) ||\u000a         (uVar1 == 0xffffffffffffffff)) {\u000a        n = strspn(num_start,"0123456789");\u000a        arg = xstrndup(string,n);\u000a        string = "field number %s is too large";\u000a        if ((in_ESI & 4) != 0) {\u000a          string = "byte/character offset %s is too large";\u000a        }\u000a        uVar8 = dcgettext(0,string,5);\u000a        string = quote(arg);\u000a        error(0,0,uVar8,string);\u000a        free(arg);\u000a        usage(1);\u000a        goto LAB_00404781;\u000a      }\u000a      fieldstr = fieldstr + 1;\u000a      bVar13 = 1;\u000a      uVar10 = (ulong)bVar5;\u000a      hi = uVar1;\u000a    }\u000a    if (uVar11 == 0) {\u000a      if (hi == 0) {\u000aLAB_004047c6:\u000a        string = "byte/character positions are numbered from 1";\u000a        arg = "fields are numbered from 1";\u000a        goto LAB_004047e5;\u000a      }\u000a      add_range_pair(hi,hi);\u000a      cVar2 = *fieldstr;\u000a    }\u000a    else {\u000a      bVar13 = (byte)uVar10 | bVar9;\u000a      if (bVar13 == 0) {\u000a        local_40 = 1;\u000a      }\u000a      if (((in_ESI & 1) == 0) && (bVar13 == 0)) {\u000a        arg = "invalid range with no endpoint: -";\u000a        goto LAB_004047f0;\u000a      }\u000a      if (bVar9) {\u000a        if (hi < local_40) goto LAB_00404815;\u000a      }\u000a      else {\u000a        hi = 0xffffffffffffffff;\u000a      }\u000a      add_range_pair(local_40,hi);\u000a      uVar11 = 0;\u000a      cVar2 = *fieldstr;\u000a    }\u000a    if (cVar2 == 0) {\u000a      if (n_frp != 0) {\u000a        qsort(frp,n_frp,0x10,compare_ranges);\u000a        if (n_frp != 0) {\u000a          uVar11 = 0;\u000a          do {\u000a            hi = uVar11 + 1;\u000a            pfVar4 = frp;\u000a            uVar10 = n_frp;\u000a            while ((hi < uVar10 &&\u000a                   (uVar1 = pfVar4[uVar11].hi, pfVar4[hi].lo < uVar1 || pfVar4[hi].lo == uVar1))) {\u000a              uVar12 = uVar11;\u000a              if (uVar1 <= pfVar4[hi].hi && pfVar4[hi].hi != uVar1) {\u000a                uVar12 = hi;\u000a              }\u000a              frp = pfVar4;\u000a              n_frp = uVar10;\u000a              pfVar4[uVar11].hi = pfVar4[uVar12].hi;\u000a              memmove(pfVar4 + hi,pfVar4 + uVar11 + 2,(uVar10 - hi) * 0x10 - 0x10);\u000a              uVar10 = n_frp - 1;\u000a              pfVar4 = frp;\u000a            }\u000a            uVar11 = hi;\u000a            frp = pfVar4;\u000a            n_frp = uVar10;\u000a          } while (hi < uVar10);\u000a        }\u000a        if ((in_ESI & 2) != 0) {\u000a          complement_rp();\u000a        }\u000a        n_frp = n_frp + 1;\u000a        frp = (field_range_pair *)xrealloc(frp,n_frp * 0x10);\u000a                    /* WARNING: Store size is inaccurate */\u000a        *(undefined *)(frp + (n_frp - 1)) =\u000a             CONCAT412(0xffffffff,CONCAT48(0xffffffff,0xffffffffffffffff));\u000a        return;\u000a      }\u000a      string = "missing list of byte/character positions";\u000a      arg = "missing list of fields";\u000aLAB_004047e5:\u000a      if ((in_ESI & 4) != 0) {\u000a        arg = string;\u000a      }\u000aLAB_004047f0:\u000a      do {\u000a        uVar8 = dcgettext(0,arg,5);\u000a        error(0,0,uVar8,uVar8);\u000a        usage();\u000aLAB_00404815:\u000a        arg = "invalid decreasing range";\u000a      } while( true );\u000a    }\u000a    bVar9 = false;\u000a    uVar10 = 0;\u000aLAB_00404430:\u000a    fieldstr = fieldstr + 1;\u000a    hi = 0;\u000a  } while( true );\u000a}\u000a\u000a
p185
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R12,RDI\nMOV EAX,ESI\nAND EAX,0x1\nMOV dword ptr [RSP + 0x24],EAX\nMOV dword ptr [RSP + 0x4],ESI\nJZ 0x0040440c\nMOVZX ECX,byte ptr [R12]\nMOV EAX,0x2d\nSUB EAX,ECX\nJNZ 0x004043f6\nMOVZX EAX,byte ptr [R12 + 0x1]\nNEG EAX\nLEA RCX,[R12 + 0x1]\nXOR EBP,EBP\nTEST EAX,EAX\nSETZ BPL\nCMOVZ R12,RCX\nMOV BL,BPL\nJMP 0x00404410\nXOR EBP,EBP\nXOR EBX,EBX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV R13B,BL\nMOV EAX,0x1\nMOV qword ptr [RSP + 0x18],RAX\nJMP 0x00404435\nINC R12\nXOR EBP,EBP\nMOV dword ptr [RSP + 0xc],EBX\nMOV EAX,EBX\nAND AL,0x1\nMOV byte ptr [RSP + 0xb],AL\nXOR R15D,R15D\nJMP 0x00404459\nINC R12\nMOV R15B,0x1\nMOV R13B,AL\nMOVSX EBX,byte ptr [R12]\nCMP EBX,0x2c\nJZ 0x00404510\nCMP BL,0x2d\nJZ 0x00404580\nCALL 0x004019f0\nMOV R14,qword ptr [RAX]\nMOV EDI,EBX\nCALL 0x00404830\nTEST BL,BL\nJZ 0x00404510\nMOVZX EAX,AL\nMOVZX EAX,word ptr [R14 + RAX*0x2]\nAND EAX,0x1\nTEST AX,AX\nJNZ 0x00404510\nADD EBX,-0x30\nCMP EBX,0x9\nJA 0x00404781\nCMP qword ptr [0x0060e3b0],0x0\nSETNZ AL\nTEST R15B,AL\nJNZ 0x004044ba\nMOV qword ptr [0x0060e3b0],R12\nCMP byte ptr [RSP + 0xb],0x0\nMOV AL,0x1\nJZ 0x004044ca\nMOV CL,0x1\nMOV qword ptr [RSP + 0x10],RCX\nJZ 0x004044cf\nMOV EAX,R13D\nMOV RCX,0x1999999999999999\nCMP RBP,RCX\nJA 0x00404712\nLEA RCX,[RBP + RBP*0x4]\nMOVSX RDX,byte ptr [R12]\nLEA RCX,[RDX + RCX*0x2 + -0x30]\nCMP RCX,RBP\nCMOVNC RBP,RCX\nJC 0x00404712\nCMP RBP,-0x1\nJNZ 0x00404450\nJMP 0x00404712\nMOV EBX,dword ptr [RSP + 0xc]\nTEST BL,0x1\nJNZ 0x00404540\nTEST RBP,RBP\nJZ 0x004047c6\nMOV RDI,RBP\nMOV RSI,RBP\nCALL 0x00404840\nCMP byte ptr [R12],0x0\nJNZ 0x004045d1\nJMP 0x004045e0\nOR R13B,byte ptr [RSP + 0x10]\nAND R13B,0x1\nMOV EAX,0x1\nMOV RCX,qword ptr [RSP + 0x18]\nCMOVZ RCX,RAX\nMOV RDI,RCX\nCMP dword ptr [RSP + 0x24],0x0\nJNZ 0x0040456a\nTEST R13B,R13B\nJZ 0x004047d2\nTEST byte ptr [RSP + 0x10],0x1\nMOV qword ptr [RSP + 0x18],RDI\nJNZ 0x004045b7\nMOV RSI,-0x1\nJMP 0x004045c3\nTEST byte ptr [RSP + 0xc],0x1\nJNZ 0x004047db\nMOV EAX,R13D\nAND AL,0x1\nSETZ CL\nTEST RBP,RBP\nJNZ 0x004045a0\nTEST CL,CL\nJZ 0x004047c6\nTEST AL,AL\nMOV EAX,0x1\nCMOVZ RBP,RAX\nMOV BL,0x1\nMOV qword ptr [RSP + 0x18],RBP\nJMP 0x00404430\nCMP RBP,RDI\nJC 0x00404815\nMOV RSI,RBP\nCALL 0x00404840\nXOR EBX,EBX\nCMP byte ptr [R12],0x0\nJZ 0x004045e0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nXOR R13D,R13D\nJMP 0x00404430\nMOV RSI,qword ptr [0x0060e530]\nTEST RSI,RSI\nJZ 0x0040481e\nMOV RDI,qword ptr [0x0060e528]\nMOV EDX,0x10\nMOV ECX,0x4048c0\nCALL 0x00401670\nCMP qword ptr [0x0060e530],0x0\nJZ 0x004046ba\nXOR EBX,EBX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV R14,RBX\nLEA RBX,[R14 + 0x1]\nMOV RDX,qword ptr [0x0060e530]\nCMP RDX,RBX\nJA 0x0040468d\nJMP 0x004046ad\nLEA RBP,[RAX + RDI*0x1 + 0x8]\nLEA RDI,[RAX + RCX*0x1]\nCMP qword ptr [RAX + RCX*0x1 + 0x8],RSI\nMOV RSI,R14\nCMOVA RSI,RBX\nSHL RSI,0x4\nMOV RSI,qword ptr [RAX + RSI*0x1 + 0x8]\nMOV qword ptr [RBP],RSI\nLEA RSI,[RAX + RCX*0x1 + 0x10]\nSUB RDX,RBX\nSHL RDX,0x4\nADD RDX,-0x10\nCALL 0x00401910\nMOV RDX,qword ptr [0x0060e530]\nDEC RDX\nMOV qword ptr [0x0060e530],RDX\nCMP RDX,RBX\nJBE 0x004046ad\nMOV RAX,qword ptr [0x0060e528]\nMOV RCX,RBX\nSHL RCX,0x4\nMOV RDI,R14\nSHL RDI,0x4\nMOV RSI,qword ptr [RAX + RDI*0x1 + 0x8]\nCMP qword ptr [RAX + RCX*0x1],RSI\nJBE 0x00404640\nCMP RBX,qword ptr [0x0060e530]\nJC 0x00404620\nTEST byte ptr [RSP + 0x4],0x2\nJZ 0x004046c6\nCALL 0x004048e0\nMOV RSI,qword ptr [0x0060e530]\nINC RSI\nMOV qword ptr [0x0060e530],RSI\nMOV RDI,qword ptr [0x0060e528]\nSHL RSI,0x4\nCALL 0x00407230\nMOV qword ptr [0x0060e528],RAX\nMOV RCX,qword ptr [0x0060e530]\nSHL RCX,0x4\nPCMPEQD XMM0,XMM0\nMOVDQU xmmword ptr [RAX + RCX*0x1 + -0x10],XMM0\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RBX,qword ptr [0x0060e3b0]\nMOV ESI,0x40a521\nMOV RDI,RBX\nCALL 0x00401790\nMOV RDI,RBX\nMOV RSI,RAX\nCALL 0x004073b0\nMOV RBX,RAX\nMOV EAX,0x40a52c\nMOV ESI,0x40a552\nTEST byte ptr [RSP + 0x4],0x4\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x004068c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401920\nMOV RDI,RBX\nCALL 0x004015e0\nMOV EDI,0x1\nCALL 0x00401b00\nMOV EAX,0x40a56f\nMOV ESI,0x40a592\nTEST byte ptr [RSP + 0x4],0x4\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RBX,RAX\nMOV RDI,R12\nCALL 0x004068c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401920\nMOV EDI,0x1\nCALL 0x00401b00\nMOV EAX,0x40a49e\nMOV ESI,0x40a4cb\nJMP 0x004047e5\nXOR EDI,EDI\nMOV ESI,0x40a4e6\nJMP 0x004047f0\nMOV EAX,0x40a46a\nMOV ESI,0x40a48a\nTEST byte ptr [RSP + 0x4],0x4\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401920\nMOV EDI,0x1\nCALL 0x00401b00\nXOR EDI,EDI\nMOV ESI,0x40a508\nJMP 0x004047f0\nMOV EAX,0x40a5a9\nMOV ESI,0x40a5d2\nJMP 0x004047e5\n'
p186
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 fc\n89 f0\n83 e0 01\n89 44 24 24\n89 74 24 04\n74 2c\n41 0f b6 0c 24\nb8 2d 00 00 00\n29 c8\n75 08\n41 0f b6 44 24 01\nf7 d8\n49 8d 4c 24 01\n31 ed\n85 c0\n40 0f 94 c5\n4c 0f 44 e1\n40 88 eb\neb 04\n31 ed\n31 db\n31 c0\n48 89 44 24 10\n41 88 dd\nb8 01 00 00 00\n48 89 44 24 18\neb 0f\n49 ff c4\n31 ed\n89 5c 24 0c\n89 d8\n24 01\n88 44 24 0b\n45 31 ff\neb 13\n49 ff c4\n41 b7 01\n41 88 c5\n41 0f be 1c 24\n83 fb 2c\n0f 84 a9 00 00 00\n80 fb 2d\n0f 84 10 01 00 00\ne8 7b d5 ff ff\n4c 8b 30\n89 df\ne8 b1 03 00 00\n84 db\n0f 84 89 00 00 00\n0f b6 c0\n41 0f b7 04 46\n83 e0 01\n66 85 c0\n75 79\n83 c3 d0\n83 fb 09\n0f 87 de 02 00 00\n48 83 3d 05 9f 20 00 00\n0f 95 c0\n41 84 c7\n75 07\n4c 89 25 f6 9e 20 00\n80 7c 24 0b 00\nb0 01\n74 07\nb1 01\n48 89 4c 24 10\n74 03\n44 89 e8\n48 b9 99 99 99 99 99 99 99 19\n48 39 cd\n0f 87 30 02 00 00\n48 8d 4c ad 00\n49 0f be 14 24\n48 8d 4c 4a d0\n48 39 e9\n48 0f 43 e9\n0f 82 14 02 00 00\n48 83 fd ff\n0f 85 48 ff ff ff\ne9 05 02 00 00\n8b 5c 24 0c\nf6 c3 01\n75 27\n48 85 ed\n0f 84 a4 02 00 00\n48 89 ef\n48 89 ee\ne8 13 03 00 00\n41 80 3c 24 00\n0f 85 99 00 00 00\ne9 a3 00 00 00\n44 0a 6c 24 10\n41 80 e5 01\nb8 01 00 00 00\n48 8b 4c 24 18\n48 0f 44 c8\n48 89 cf\n83 7c 24 24 00\n75 09\n45 84 ed\n0f 84 68 02 00 00\nf6 44 24 10 01\n48 89 7c 24 18\n75 41\n48 c7 c6 ff ff ff ff\neb 44\nf6 44 24 0c 01\n0f 85 50 02 00 00\n44 89 e8\n24 01\n0f 94 c1\n48 85 ed\n75 08\n84 c9\n0f 84 26 02 00 00\n84 c0\nb8 01 00 00 00\n48 0f 44 e8\nb3 01\n48 89 6c 24 18\ne9 79 fe ff ff\n48 39 fd\n0f 82 55 02 00 00\n48 89 ee\ne8 78 02 00 00\n31 db\n41 80 3c 24 00\n74 0f\n31 c0\n48 89 44 24 10\n45 31 ed\ne9 50 fe ff ff\n48 8b 35 49 9f 20 00\n48 85 f6\n0f 84 2e 02 00 00\n48 8b 3d 31 9f 20 00\nba 10 00 00 00\nb9 c0 48 40 00\ne8 6a d0 ff ff\n48 83 3d 22 9f 20 00 00\n0f 84 a6 00 00 00\n31 db\n66 2e 0f 1f 84 00 00 00 00 00\n49 89 de\n49 8d 5e 01\n48 8b 15 02 9f 20 00\n48 39 da\n77 5a\neb 78\n48 8d 6c 38 08\n48 8d 3c 08\n48 39 74 08 08\n4c 89 f6\n48 0f 47 f3\n48 c1 e6 04\n48 8b 74 30 08\n48 89 75 00\n48 8d 74 08 10\n48 29 da\n48 c1 e2 04\n48 83 c2 f0\ne8 99 d2 ff ff\n48 8b 15 b2 9e 20 00\n48 ff ca\n48 89 15 a8 9e 20 00\n48 39 da\n76 20\n48 8b 05 94 9e 20 00\n48 89 d9\n48 c1 e1 04\n4c 89 f7\n48 c1 e7 04\n48 8b 74 38 08\n48 39 34 08\n76 93\n48 3b 1d 7c 9e 20 00\n0f 82 66 ff ff ff\nf6 44 24 04 02\n74 05\ne8 1a 02 00 00\n48 8b 35 63 9e 20 00\n48 ff c6\n48 89 35 59 9e 20 00\n48 8b 3d 4a 9e 20 00\n48 c1 e6 04\ne8 49 2b 00 00\n48 89 05 3a 9e 20 00\n48 8b 0d 3b 9e 20 00\n48 c1 e1 04\n66 0f 76 c0\nf3 0f 7f 44 08 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 1d 97 9c 20 00\nbe 21 a5 40 00\n48 89 df\ne8 6a d0 ff ff\n48 89 df\n48 89 c6\ne8 7f 2c 00 00\n48 89 c3\nb8 2c a5 40 00\nbe 52 a5 40 00\nf6 44 24 04 04\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 7d cf ff ff\n48 89 c5\n48 89 df\ne8 62 21 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 b1 d1 ff ff\n48 89 df\ne8 69 ce ff ff\nbf 01 00 00 00\ne8 7f d3 ff ff\nb8 6f a5 40 00\nbe 92 a5 40 00\nf6 44 24 04 04\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 30 cf ff ff\n48 89 c3\n4c 89 e7\ne8 15 21 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 64 d1 ff ff\nbf 01 00 00 00\ne8 3a d3 ff ff\nb8 9e a4 40 00\nbe cb a4 40 00\neb 13\n31 ff\nbe e6 a4 40 00\neb 15\nb8 6a a4 40 00\nbe 8a a4 40 00\nf6 44 24 04 04\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 d6 ce ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 15 d1 ff ff\nbf 01 00 00 00\ne8 eb d2 ff ff\n31 ff\nbe 08 a5 40 00\neb d2\nb8 a9 a5 40 00\nbe d2 a5 40 00\neb bb\n'
p187
S'.text:00000000004043c0\n.text:00000000004043c1\n.text:00000000004043c3\n.text:00000000004043c5\n.text:00000000004043c7\n.text:00000000004043c9\n.text:00000000004043ca\n.text:00000000004043ce\n.text:00000000004043d1\n.text:00000000004043d3\n.text:00000000004043d6\n.text:00000000004043da\n.text:00000000004043de\n.text:00000000004043e0\n.text:00000000004043e5\n.text:00000000004043ea\n.text:00000000004043ec\n.text:00000000004043ee\n.text:00000000004043f4\n.text:00000000004043f6\n.text:00000000004043fb\n.text:00000000004043fd\n.text:00000000004043ff\n.text:0000000000404403\n.text:0000000000404407\n.text:000000000040440a\n.text:000000000040440c\n.text:000000000040440e\n.text:0000000000404410\n.text:0000000000404412\n.text:0000000000404417\n.text:000000000040441a\n.text:000000000040441f\n.text:0000000000404424\n.text:0000000000404430\n.text:0000000000404433\n.text:0000000000404435\n.text:0000000000404439\n.text:000000000040443b\n.text:000000000040443d\n.text:0000000000404441\n.text:0000000000404444\n.text:0000000000404450\n.text:0000000000404453\n.text:0000000000404456\n.text:0000000000404459\n.text:000000000040445e\n.text:0000000000404461\n.text:0000000000404467\n.text:000000000040446a\n.text:0000000000404470\n.text:0000000000404475\n.text:0000000000404478\n.text:000000000040447a\n.text:000000000040447f\n.text:0000000000404481\n.text:0000000000404487\n.text:000000000040448a\n.text:000000000040448f\n.text:0000000000404492\n.text:0000000000404495\n.text:0000000000404497\n.text:000000000040449a\n.text:000000000040449d\n.text:00000000004044a3\n.text:00000000004044ab\n.text:00000000004044ae\n.text:00000000004044b1\n.text:00000000004044b3\n.text:00000000004044ba\n.text:00000000004044bf\n.text:00000000004044c1\n.text:00000000004044c3\n.text:00000000004044c5\n.text:00000000004044ca\n.text:00000000004044cc\n.text:00000000004044cf\n.text:00000000004044d9\n.text:00000000004044dc\n.text:00000000004044e2\n.text:00000000004044e7\n.text:00000000004044ec\n.text:00000000004044f1\n.text:00000000004044f4\n.text:00000000004044f8\n.text:00000000004044fe\n.text:0000000000404502\n.text:0000000000404508\n.text:0000000000404510\n.text:0000000000404514\n.text:0000000000404517\n.text:0000000000404519\n.text:000000000040451c\n.text:0000000000404522\n.text:0000000000404525\n.text:0000000000404528\n.text:000000000040452d\n.text:0000000000404532\n.text:0000000000404538\n.text:0000000000404540\n.text:0000000000404545\n.text:0000000000404549\n.text:000000000040454e\n.text:0000000000404553\n.text:0000000000404557\n.text:000000000040455a\n.text:000000000040455f\n.text:0000000000404561\n.text:0000000000404564\n.text:000000000040456a\n.text:000000000040456f\n.text:0000000000404574\n.text:0000000000404576\n.text:000000000040457d\n.text:0000000000404580\n.text:0000000000404585\n.text:000000000040458b\n.text:000000000040458e\n.text:0000000000404590\n.text:0000000000404593\n.text:0000000000404596\n.text:0000000000404598\n.text:000000000040459a\n.text:00000000004045a0\n.text:00000000004045a2\n.text:00000000004045a7\n.text:00000000004045ab\n.text:00000000004045ad\n.text:00000000004045b2\n.text:00000000004045b7\n.text:00000000004045ba\n.text:00000000004045c0\n.text:00000000004045c3\n.text:00000000004045c8\n.text:00000000004045ca\n.text:00000000004045cf\n.text:00000000004045d1\n.text:00000000004045d3\n.text:00000000004045d8\n.text:00000000004045db\n.text:00000000004045e0\n.text:00000000004045e7\n.text:00000000004045ea\n.text:00000000004045f0\n.text:00000000004045f7\n.text:00000000004045fc\n.text:0000000000404601\n.text:0000000000404606\n.text:000000000040460e\n.text:0000000000404614\n.text:0000000000404616\n.text:0000000000404620\n.text:0000000000404623\n.text:0000000000404627\n.text:000000000040462e\n.text:0000000000404631\n.text:0000000000404633\n.text:0000000000404640\n.text:0000000000404645\n.text:0000000000404649\n.text:000000000040464e\n.text:0000000000404651\n.text:0000000000404655\n.text:0000000000404659\n.text:000000000040465e\n.text:0000000000404662\n.text:0000000000404667\n.text:000000000040466a\n.text:000000000040466e\n.text:0000000000404672\n.text:0000000000404677\n.text:000000000040467e\n.text:0000000000404681\n.text:0000000000404688\n.text:000000000040468b\n.text:000000000040468d\n.text:0000000000404694\n.text:0000000000404697\n.text:000000000040469b\n.text:000000000040469e\n.text:00000000004046a2\n.text:00000000004046a7\n.text:00000000004046ab\n.text:00000000004046ad\n.text:00000000004046b4\n.text:00000000004046ba\n.text:00000000004046bf\n.text:00000000004046c1\n.text:00000000004046c6\n.text:00000000004046cd\n.text:00000000004046d0\n.text:00000000004046d7\n.text:00000000004046de\n.text:00000000004046e2\n.text:00000000004046e7\n.text:00000000004046ee\n.text:00000000004046f5\n.text:00000000004046f9\n.text:00000000004046fd\n.text:0000000000404703\n.text:0000000000404707\n.text:0000000000404708\n.text:000000000040470a\n.text:000000000040470c\n.text:000000000040470e\n.text:0000000000404710\n.text:0000000000404711\n.text:0000000000404712\n.text:0000000000404719\n.text:000000000040471e\n.text:0000000000404721\n.text:0000000000404726\n.text:0000000000404729\n.text:000000000040472c\n.text:0000000000404731\n.text:0000000000404734\n.text:0000000000404739\n.text:000000000040473e\n.text:0000000000404743\n.text:0000000000404747\n.text:0000000000404749\n.text:000000000040474e\n.text:0000000000404753\n.text:0000000000404756\n.text:0000000000404759\n.text:000000000040475e\n.text:0000000000404761\n.text:0000000000404763\n.text:0000000000404765\n.text:0000000000404767\n.text:000000000040476a\n.text:000000000040476f\n.text:0000000000404772\n.text:0000000000404777\n.text:000000000040477c\n.text:0000000000404781\n.text:0000000000404786\n.text:000000000040478b\n.text:0000000000404790\n.text:0000000000404794\n.text:0000000000404796\n.text:000000000040479b\n.text:00000000004047a0\n.text:00000000004047a3\n.text:00000000004047a6\n.text:00000000004047ab\n.text:00000000004047ae\n.text:00000000004047b0\n.text:00000000004047b2\n.text:00000000004047b4\n.text:00000000004047b7\n.text:00000000004047bc\n.text:00000000004047c1\n.text:00000000004047c6\n.text:00000000004047cb\n.text:00000000004047d0\n.text:00000000004047d2\n.text:00000000004047d4\n.text:00000000004047d9\n.text:00000000004047db\n.text:00000000004047e0\n.text:00000000004047e5\n.text:00000000004047ea\n.text:00000000004047ee\n.text:00000000004047f0\n.text:00000000004047f5\n.text:00000000004047fa\n.text:00000000004047fd\n.text:00000000004047ff\n.text:0000000000404801\n.text:0000000000404803\n.text:0000000000404806\n.text:000000000040480b\n.text:0000000000404810\n.text:0000000000404815\n.text:0000000000404817\n.text:000000000040481c\n.text:000000000040481e\n.text:0000000000404823\n.text:0000000000404828\n'
p188
tp189
sS'quotearg_mem'
p190
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p191
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p192
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00406590\n'
p193
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p194
S'.text:00000000004065b0\n.text:00000000004065b3\n.text:00000000004065b6\n.text:00000000004065b8\n.text:00000000004065bb\n.text:00000000004065be\n'
p195
tp196
sS'deregister_tm_clones'
p197
(S'\n__stdcall deregister_tm_clones()\n'
p198
V\u000a/* WARNING: Removing unreachable block (ram,0x00401a45) */\u000a/* WARNING: Removing unreachable block (ram,0x00401a4f) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p199
S'MOV EAX,0x60e2df\nPUSH RBP\nSUB RAX,0x60e2d8\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401a60\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401a60\nPOP RBP\nMOV EDI,0x60e2d8\nJMP RAX\nPOP RBP\nRET\n'
p200
S'b8 df e2 60 00\n55\n48 2d d8 e2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf d8 e2 60 00\nff e0\n5d\nc3\n'
p201
S'.text:0000000000401a30\n.text:0000000000401a35\n.text:0000000000401a36\n.text:0000000000401a3c\n.text:0000000000401a40\n.text:0000000000401a43\n.text:0000000000401a45\n.text:0000000000401a4a\n.text:0000000000401a4d\n.text:0000000000401a4f\n.text:0000000000401a50\n.text:0000000000401a55\n.text:0000000000401a60\n.text:0000000000401a61\n'
p202
tp203
sS'fputc_unlocked'
p204
(S'\n__stdcall fputc_unlocked(int __c, FILE * __stream)\n'
p205
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputc_unlocked(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputc_unlocked_0060e138)();\u000a  return iVar1;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x0060e138]\n'
p207
S'ff 25 32 c9 20 00\n'
p208
S'.plt:0000000000401800\n'
p209
tp210
sS'quotearg_custom'
p211
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p212
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p213
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004067d0\n'
p214
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p215
S'.text:0000000000406850\n.text:0000000000406853\n.text:0000000000406856\n.text:0000000000406859\n.text:000000000040685b\n.text:000000000040685e\n.text:0000000000406861\n.text:0000000000406864\n'
p216
tp217
sS'free'
p218
(S'\n__stdcall free(void * __ptr)\n'
p219
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_0060e028)();\u000a  return;\u000a}\u000a\u000a
p220
S'JMP qword ptr [0x0060e028]\n'
p221
S'ff 25 42 ca 20 00\n'
p222
S'.plt:00000000004015e0\n'
p223
tp224
sS'close'
p225
(S'\n__stdcall close(int __fd)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060e0f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x0060e0f8]\n'
p228
S'ff 25 72 c9 20 00\n'
p229
S'.plt:0000000000401780\n'
p230
tp231
sS'getenv'
p232
(S'\n__stdcall getenv(char * __name)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060e018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x0060e018]\n'
p235
S'ff 25 52 ca 20 00\n'
p236
S'.plt:00000000004015c0\n'
p237
tp238
sS'putchar_unlocked'
p239
(S'\n__stdcall putchar_unlocked(int __c)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_0060e158)();\u000a  return iVar1;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x0060e158]\n'
p242
S'ff 25 12 c9 20 00\n'
p243
S'.plt:0000000000401840\n'
p244
tp245
sS'rpl_fseeko'
p246
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p247
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060e1d8)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p248
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00407e88\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00407e88\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x00407e9a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401940\nMOV RDI,RBX\nCALL 0x00401850\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401740\nCMP RAX,-0x1\nJZ 0x00407ec3\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00407ec8\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p249
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 a6 9a ff ff\n48 89 df\ne8 ae 99 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 91 98 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p250
S'.text:0000000000407e60\n.text:0000000000407e61\n.text:0000000000407e63\n.text:0000000000407e64\n.text:0000000000407e67\n.text:0000000000407e6a\n.text:0000000000407e6d\n.text:0000000000407e71\n.text:0000000000407e75\n.text:0000000000407e77\n.text:0000000000407e7b\n.text:0000000000407e7f\n.text:0000000000407e81\n.text:0000000000407e86\n.text:0000000000407e88\n.text:0000000000407e8b\n.text:0000000000407e8e\n.text:0000000000407e91\n.text:0000000000407e92\n.text:0000000000407e94\n.text:0000000000407e95\n.text:0000000000407e9a\n.text:0000000000407e9d\n.text:0000000000407ea2\n.text:0000000000407ea4\n.text:0000000000407ea7\n.text:0000000000407eaa\n.text:0000000000407eaf\n.text:0000000000407eb3\n.text:0000000000407eb5\n.text:0000000000407eb8\n.text:0000000000407ebf\n.text:0000000000407ec1\n.text:0000000000407ec3\n.text:0000000000407ec8\n.text:0000000000407ec9\n.text:0000000000407ecb\n.text:0000000000407ecc\n'
p251
tp252
sS'quote_n_mem'
p253
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p254
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p255
S'MOV ECX,0x60e2a0\nJMP 0x004063d0\n'
p256
S'b9 a0 e2 60 00\ne9 36 fb ff ff\n'
p257
S'.text:0000000000406890\n.text:0000000000406895\n'
p258
tp259
sS'c_ispunct'
p260
(S'\n__stdcall c_ispunct()\n'
p261
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p262
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00404df2\nMOV AL,0x1\nJMP qword ptr [0x40a648 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p263
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 48 a6 40 00\nc3\n31 c0\nc3\n'
p264
S'.text:0000000000404de0\n.text:0000000000404de3\n.text:0000000000404de6\n.text:0000000000404de8\n.text:0000000000404dea\n.text:0000000000404df1\n.text:0000000000404df2\n.text:0000000000404df4\n'
p265
tp266
sS'xstrdup'
p267
(S'\n__stdcall xstrdup(char * string)\n'
p268
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p269
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004016f0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00407330\n'
p270
S'53\n48 89 fb\ne8 87 a3 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p271
S'.text:0000000000407360\n.text:0000000000407361\n.text:0000000000407364\n.text:0000000000407369\n.text:000000000040736d\n.text:0000000000407370\n.text:0000000000407371\n'
p272
tp273
sS'xstrndup'
p274
(S'\n__stdcall xstrndup(char * string, size_t n)\n'
p275
V\u000achar * xstrndup(char *string,size_t n)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)__strndup();\u000a  if (pcVar1 != (char *)0x0) {\u000a    return pcVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p276
S'PUSH RAX\nCALL 0x00401810\nTEST RAX,RAX\nJZ 0x004073bd\nPOP RCX\nRET\nCALL 0x00407380\n'
p277
S'50\ne8 5a a4 ff ff\n48 85 c0\n74 02\n59\nc3\ne8 be ff ff ff\n'
p278
S'.text:00000000004073b0\n.text:00000000004073b1\n.text:00000000004073b6\n.text:00000000004073b9\n.text:00000000004073bb\n.text:00000000004073bc\n.text:00000000004073bd\n'
p279
tp280
sS'fscanf'
p281
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p282
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060e0f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p283
S'JMP qword ptr [0x0060e0f0]\n'
p284
S'ff 25 7a c9 20 00\n'
p285
S'.plt:0000000000401770\n'
p286
tp287
sS'memcpy'
p288
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p289
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060e150)();\u000a  return pvVar1;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x0060e150]\n'
p291
S'ff 25 1a c9 20 00\n'
p292
S'.plt:0000000000401830\n'
p293
tp294
sS'close_stdout_set_ignore_EPIPE'
p295
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p296
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p297
S'MOV byte ptr [0x0060e3c8],DIL\nRET\n'
p298
S'40 88 3d 41 95 20 00\nc3\n'
p299
S'.text:0000000000404e80\n.text:0000000000404e87\n'
p300
tp301
sS'iswprint'
p302
(S'\n__stdcall iswprint(wint_t __wc)\n'
p303
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060e220)();\u000a  return iVar1;\u000a}\u000a\u000a
p304
S'JMP qword ptr [0x0060e220]\n'
p305
S'ff 25 4a c8 20 00\n'
p306
S'.plt:00000000004019d0\n'
p307
tp308
sS'c_isspace'
p309
(S'\n__stdcall c_isspace()\n'
p310
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p311
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00404e15\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p312
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p313
S'.text:0000000000404e00\n.text:0000000000404e03\n.text:0000000000404e06\n.text:0000000000404e08\n.text:0000000000404e0d\n.text:0000000000404e0f\n.text:0000000000404e11\n.text:0000000000404e14\n.text:0000000000404e15\n.text:0000000000404e17\n'
p314
tp315
sS'open'
p316
(S'\n__stdcall open(char * __file, int __oflag)\n'
p317
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060e1d0)();\u000a  return iVar1;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x0060e1d0]\n'
p319
S'ff 25 9a c8 20 00\n'
p320
S'.plt:0000000000401930\n'
p321
tp322
sS'quotearg_n_custom_mem'
p323
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p324
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p325
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060e410]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060e400]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e3f0]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060e3e0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00405540\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004063d0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p326
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 17 7c 20 00\n48 89 44 24 30\n0f 10 05 fb 7b 20 00\n0f 29 44 24 20\n0f 10 05 df 7b 20 00\n0f 29 44 24 10\n0f 10 05 c3 7b 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p327
S'.text:00000000004067e0\n.text:00000000004067e1\n.text:00000000004067e3\n.text:00000000004067e5\n.text:00000000004067e6\n.text:00000000004067ea\n.text:00000000004067ed\n.text:00000000004067f0\n.text:00000000004067f2\n.text:00000000004067f9\n.text:00000000004067fe\n.text:0000000000406805\n.text:000000000040680a\n.text:0000000000406811\n.text:0000000000406816\n.text:000000000040681d\n.text:0000000000406821\n.text:0000000000406824\n.text:0000000000406827\n.text:000000000040682c\n.text:000000000040682e\n.text:0000000000406831\n.text:0000000000406834\n.text:0000000000406837\n.text:000000000040683c\n.text:0000000000406840\n.text:0000000000406841\n.text:0000000000406843\n.text:0000000000406845\n.text:0000000000406846\n'
p328
tp329
sS'_init'
p330
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p331
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060dff8;\u000a  if (PTR___gmon_start___0060dff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060dff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p332
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060dff8]\nTEST RAX,RAX\nJZ 0x004015aa\nCALL RAX\nADD RSP,0x8\nRET\n'
p333
S'48 83 ec 08\n48 8b 05 55 ca 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p334
S'.init:0000000000401598\n.init:000000000040159c\n.init:00000000004015a3\n.init:00000000004015a6\n.init:00000000004015a8\n.init:00000000004015aa\n.init:00000000004015ae\n'
p335
tp336
sS'default_scale_base'
p337
(S'\n__stdcall default_scale_base()\n'
p338
V\u000aint default_scale_base(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = 1000;\u000a  if (in_EDI - 3U < 2) {\u000a    iVar1 = 0x400;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p339
S'ADD EDI,-0x3\nCMP EDI,0x2\nMOV ECX,0x400\nMOV EAX,0x3e8\nCMOVC EAX,ECX\nRET\n'
p340
S'83 c7 fd\n83 ff 02\nb9 00 04 00 00\nb8 e8 03 00 00\n0f 42 c1\nc3\n'
p341
S'.text:0000000000403a30\n.text:0000000000403a33\n.text:0000000000403a36\n.text:0000000000403a3b\n.text:0000000000403a40\n.text:0000000000403a43\n'
p342
tp343
sS'set_quoting_flags'
p344
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p345
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p346
S'TEST RDI,RDI\nMOV ECX,0x60e3e0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p347
S'48 85 ff\nb9 e0 e3 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p348
S'.text:0000000000405520\n.text:0000000000405523\n.text:0000000000405528\n.text:000000000040552c\n.text:000000000040552f\n.text:0000000000405532\n'
p349
tp350
sS'realloc'
p351
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p352
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060e1a0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p353
S'JMP qword ptr [0x0060e1a0]\n'
p354
S'ff 25 ca c8 20 00\n'
p355
S'.plt:00000000004018d0\n'
p356
tp357
sS'__fprintf_chk'
p358
(S'\n__stdcall __fprintf_chk()\n'
p359
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060e208)();\u000a  return;\u000a}\u000a\u000a
p360
S'JMP qword ptr [0x0060e208]\n'
p361
S'ff 25 62 c8 20 00\n'
p362
S'.plt:00000000004019a0\n'
p363
tp364
sS'get_charset_aliases'
p365
(S'\n__stdcall get_charset_aliases()\n'
p366
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00407d04_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00407d04_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00407d04_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00407d04_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00407d04_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00407d04_caseD_9;\u000a      case -1:\u000a        goto switchD_00407d04_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_00407d5d:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_00407d63:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00407d04_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00407d63;\u000a  }\u000a  goto LAB_00407d5d;\u000a}\u000a\u000a
p367
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060e520]\nTEST R15,R15\nJNZ 0x00407d72\nMOV EDI,0x40b7bc\nCALL 0x004015c0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00407b28\nCMP byte ptr [RBX],0x0\nJNZ 0x00407b2d\nMOV EBX,0x40b7cc\nMOV RDI,RBX\nCALL 0x004016f0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00407b47\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00407b49\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401880\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00407b9d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401830\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00407ba8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00407bc5\nMOV R15D,0x40b009\nJMP 0x00407d6b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401930\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00407d5d\nMOV ESI,0x409dd4\nMOV EDI,EBP\nCALL 0x004018e0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00407d24\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00407cf0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401640\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401640\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00407cf0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x004018b0\nMOV ESI,0x40b7db\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401770\nCMP EAX,0x2\nJL 0x00407d44\nMOV RDI,R12\nCALL 0x004016f0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004016f0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00407ccd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x004018d0\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00407c14\nJMP 0x00407d2d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401880\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00407c14\nJMP 0x00407d2d\nMOV RDI,RBX\nCALL 0x00401660\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00407c57\nJMP qword ptr [0x40b680 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401660\nCMP EAX,-0x1\nJZ 0x00407d44\nCMP EAX,0xa\nJNZ 0x00407d10\nJMP 0x00407cf0\nMOV EDI,EBP\nCALL 0x00401780\nJMP 0x00407d5d\nMOV RDI,R15\nCALL 0x004015e0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00407d90\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x00407d5d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00407d63\nMOV R15D,0x40b009\nMOV RDI,R13\nCALL 0x004015e0\nMOV qword ptr [0x0060e520],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p368
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 18 6a 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf bc b7 40 00\ne8 a5 9a ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb cc b7 40 00\n48 89 df\ne8 bb 9b ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 29 9d ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 c3 9c ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 09 b0 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 5c 9d ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe d4 9d 40 00\n89 ef\ne8 f6 9c ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 0b 9a ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 fb 99 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 4f 9c ff ff\nbe db b7 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 fa 9a ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 69 9a ff ff\n49 89 c4\n48 89 ef\ne8 5e 9a ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 16 9c ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 a5 9b ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 68 99 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 80 b6 40 00\n48 89 df\ne8 48 99 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 55 9a ff ff\neb 30\n4c 89 ff\ne8 ab 98 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 44 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 09 b0 40 00\n4c 89 ef\ne8 75 98 ff ff\n4c 89 3d ae 67 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p369
S'.text:0000000000407af0\n.text:0000000000407af1\n.text:0000000000407af3\n.text:0000000000407af5\n.text:0000000000407af7\n.text:0000000000407af9\n.text:0000000000407afa\n.text:0000000000407b01\n.text:0000000000407b08\n.text:0000000000407b0b\n.text:0000000000407b11\n.text:0000000000407b16\n.text:0000000000407b1b\n.text:0000000000407b1e\n.text:0000000000407b21\n.text:0000000000407b23\n.text:0000000000407b26\n.text:0000000000407b28\n.text:0000000000407b2d\n.text:0000000000407b30\n.text:0000000000407b35\n.text:0000000000407b38\n.text:0000000000407b3b\n.text:0000000000407b3d\n.text:0000000000407b42\n.text:0000000000407b45\n.text:0000000000407b47\n.text:0000000000407b49\n.text:0000000000407b4d\n.text:0000000000407b52\n.text:0000000000407b57\n.text:0000000000407b5a\n.text:0000000000407b5d\n.text:0000000000407b5f\n.text:0000000000407b62\n.text:0000000000407b65\n.text:0000000000407b68\n.text:0000000000407b6d\n.text:0000000000407b70\n.text:0000000000407b73\n.text:0000000000407b76\n.text:0000000000407b78\n.text:0000000000407b7e\n.text:0000000000407b88\n.text:0000000000407b8d\n.text:0000000000407b97\n.text:0000000000407b9b\n.text:0000000000407b9d\n.text:0000000000407ba3\n.text:0000000000407ba8\n.text:0000000000407bb2\n.text:0000000000407bb7\n.text:0000000000407bc1\n.text:0000000000407bc5\n.text:0000000000407bca\n.text:0000000000407bcc\n.text:0000000000407bcf\n.text:0000000000407bd4\n.text:0000000000407bd6\n.text:0000000000407bd8\n.text:0000000000407bde\n.text:0000000000407be3\n.text:0000000000407be5\n.text:0000000000407bea\n.text:0000000000407bed\n.text:0000000000407bf0\n.text:0000000000407bf6\n.text:0000000000407bfb\n.text:0000000000407c00\n.text:0000000000407c02\n.text:0000000000407c07\n.text:0000000000407c0a\n.text:0000000000407c0f\n.text:0000000000407c14\n.text:0000000000407c19\n.text:0000000000407c1c\n.text:0000000000407c1f\n.text:0000000000407c22\n.text:0000000000407c25\n.text:0000000000407c28\n.text:0000000000407c2d\n.text:0000000000407c30\n.text:0000000000407c35\n.text:0000000000407c38\n.text:0000000000407c3d\n.text:0000000000407c40\n.text:0000000000407c45\n.text:0000000000407c4a\n.text:0000000000407c4d\n.text:0000000000407c52\n.text:0000000000407c57\n.text:0000000000407c59\n.text:0000000000407c5c\n.text:0000000000407c61\n.text:0000000000407c66\n.text:0000000000407c68\n.text:0000000000407c6b\n.text:0000000000407c6e\n.text:0000000000407c71\n.text:0000000000407c76\n.text:0000000000407c79\n.text:0000000000407c7f\n.text:0000000000407c82\n.text:0000000000407c87\n.text:0000000000407c8a\n.text:0000000000407c8d\n.text:0000000000407c92\n.text:0000000000407c95\n.text:0000000000407c9a\n.text:0000000000407c9f\n.text:0000000000407ca2\n.text:0000000000407ca4\n.text:0000000000407ca8\n.text:0000000000407cad\n.text:0000000000407cb2\n.text:0000000000407cb5\n.text:0000000000407cba\n.text:0000000000407cbd\n.text:0000000000407cc2\n.text:0000000000407cc5\n.text:0000000000407ccb\n.text:0000000000407ccd\n.text:0000000000407cd2\n.text:0000000000407cd6\n.text:0000000000407cdb\n.text:0000000000407cde\n.text:0000000000407ce1\n.text:0000000000407ce7\n.text:0000000000407cf0\n.text:0000000000407cf3\n.text:0000000000407cf8\n.text:0000000000407cfb\n.text:0000000000407cfe\n.text:0000000000407d04\n.text:0000000000407d10\n.text:0000000000407d13\n.text:0000000000407d18\n.text:0000000000407d1b\n.text:0000000000407d1d\n.text:0000000000407d20\n.text:0000000000407d22\n.text:0000000000407d24\n.text:0000000000407d26\n.text:0000000000407d2b\n.text:0000000000407d2d\n.text:0000000000407d30\n.text:0000000000407d35\n.text:0000000000407d37\n.text:0000000000407d3c\n.text:0000000000407d3f\n.text:0000000000407d44\n.text:0000000000407d47\n.text:0000000000407d4c\n.text:0000000000407d51\n.text:0000000000407d54\n.text:0000000000407d56\n.text:0000000000407d5b\n.text:0000000000407d5d\n.text:0000000000407d63\n.text:0000000000407d66\n.text:0000000000407d6b\n.text:0000000000407d72\n.text:0000000000407d75\n.text:0000000000407d7c\n.text:0000000000407d7d\n.text:0000000000407d7f\n.text:0000000000407d81\n.text:0000000000407d83\n.text:0000000000407d85\n.text:0000000000407d86\n'
p370
tp371
sS'nl_langinfo'
p372
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p373
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060e188)();\u000a  return pcVar1;\u000a}\u000a\u000a
p374
S'JMP qword ptr [0x0060e188]\n'
p375
S'ff 25 e2 c8 20 00\n'
p376
S'.plt:00000000004018a0\n'
p377
tp378
sS'mbsalign'
p379
(S'\n__stdcall mbsalign(char * src, char * dest, size_t dest_size, size_t * width)\n'
p380
V\u000asize_t mbsalign(char *src,char *dest,size_t dest_size,size_t *width)\u000a\u000a{\u000a  char *dest_end;\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  char *pcVar5;\u000a  char *dest_00;\u000a  wchar_t *__pwcs;\u000a  int in_R8D;\u000a  uint in_R9D;\u000a  char *n_spaces;\u000a  char *n_spaces_00;\u000a  char *pcVar6;\u000a  char *local_60;\u000a  char *local_48;\u000a  \u000a  pcVar6 = (char *)strlen(src);\u000a  if (((in_R9D & 2) == 0) && (sVar3 = __ctype_get_mb_cur_max(), 1 < sVar3)) {\u000a    sVar3 = mbstowcs((wchar_t *)0x0,src,0);\u000a    if ((sVar3 == 0xffffffffffffffff) ||\u000a       (__pwcs = (wchar_t *)malloc(sVar3 * 4 + 4), __pwcs == (wchar_t *)0x0)) {\u000a      __pwcs = (wchar_t *)0x0;\u000a      n_spaces = pcVar6;\u000ajoined_r0x00405148:\u000a      local_60 = (char *)0x0;\u000a      n_spaces_00 = (char *)0xffffffffffffffff;\u000a      local_48 = src;\u000a      if ((in_R9D & 1) == 0) goto LAB_00405102;\u000a    }\u000a    else {\u000a      sVar4 = mbstowcs(__pwcs,src,sVar3 + 1);\u000a      if (sVar4 == 0) {\u000a        local_60 = (char *)0x0;\u000a        n_spaces = pcVar6;\u000a        local_48 = src;\u000a      }\u000a      else {\u000a        __pwcs[sVar3] = L'\u005c0';\u000a        _Var1 = wc_ensure_printable(__pwcs);\u000a        iVar2 = wcswidth(__pwcs,sVar3 + 1);\u000a        n_spaces = (char *)(long)iVar2;\u000a        if (_Var1 == false) {\u000a          n_spaces_00 = pcVar6;\u000a          if (n_spaces < (char *)*width || n_spaces == (char *)*width) {\u000a            local_60 = (char *)0x0;\u000a            local_48 = src;\u000a            goto LAB_0040504f;\u000a          }\u000a        }\u000a        else {\u000a          n_spaces_00 = (char *)wcstombs((char *)0x0,__pwcs,0);\u000a        }\u000a        local_60 = (char *)malloc((size_t)(n_spaces_00 + 1));\u000a        if (local_60 == (char *)0x0) goto joined_r0x00405148;\u000a        n_spaces = (char *)wc_truncate(__pwcs,*width);\u000a        pcVar6 = (char *)wcstombs(local_60,__pwcs,(size_t)(n_spaces_00 + 1));\u000a        local_48 = local_60;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    local_60 = (char *)0x0;\u000a    __pwcs = (wchar_t *)0x0;\u000a    n_spaces = pcVar6;\u000a    local_48 = src;\u000a  }\u000aLAB_0040504f:\u000a  n_spaces_00 = (char *)*width;\u000a  dest_end = n_spaces;\u000a  if (n_spaces_00 < n_spaces) {\u000a    pcVar6 = n_spaces_00;\u000a    dest_end = n_spaces_00;\u000a  }\u000a  dest_00 = n_spaces_00 + -(long)dest_end;\u000a  if (n_spaces_00 <= n_spaces) {\u000a    dest_00 = (char *)0x0;\u000a  }\u000a  *(char **)width = dest_end;\u000a  n_spaces_00 = dest_00;\u000a  n_spaces = (char *)0x0;\u000a  if (in_R8D != 0) {\u000a    if (in_R8D == 1) {\u000a      n_spaces_00 = (char *)0x0;\u000a      n_spaces = dest_00;\u000a    }\u000a    else {\u000a      n_spaces_00 = (char *)((ulong)dest_00 >> 1);\u000a      n_spaces = n_spaces_00 + (ulong)((uint)dest_00 & 1);\u000a    }\u000a  }\u000a  if ((in_R9D & 4) != 0) {\u000a    n_spaces = (char *)0x0;\u000a  }\u000a  if ((in_R9D & 8) != 0) {\u000a    n_spaces_00 = (char *)0x0;\u000a  }\u000a  if (dest_size != 0) {\u000a    dest_end = dest + (dest_size - 1);\u000a    pcVar5 = mbs_align_pad(dest,dest_end,(size_t)n_spaces);\u000a    dest_00 = dest_end + -(long)pcVar5;\u000a    if (pcVar6 < dest_end + -(long)pcVar5) {\u000a      dest_00 = pcVar6;\u000a    }\u000a    dest_00 = (char *)__mempcpy_chk(pcVar5,local_48,dest_00,0xffffffffffffffff);\u000a    mbs_align_pad(dest_00,dest_end,(size_t)n_spaces_00);\u000a  }\u000a  n_spaces_00 = n_spaces_00 + (long)(n_spaces + (long)pcVar6);\u000aLAB_00405102:\u000a  free(__pwcs);\u000a  free(local_60);\u000a  return (size_t)n_spaces_00;\u000a}\u000a\u000a
p381
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV R14D,R9D\nMOV dword ptr [RSP + 0x2c],R8D\nMOV R12,RCX\nMOV R13,RDX\nMOV RBP,RSI\nMOV RBX,RDI\nCALL 0x004016f0\nMOV R15,RAX\nTEST R14B,0x2\nMOV qword ptr [RSP + 0x20],RBX\nMOV dword ptr [RSP + 0x4],R14D\nMOV qword ptr [RSP + 0x30],RBP\nJNZ 0x00405040\nCALL 0x004016e0\nCMP RAX,0x2\nJC 0x00405040\nMOV qword ptr [RSP + 0x10],R12\nXOR EDI,EDI\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x00401690\nMOV RBX,RAX\nCMP RBX,-0x1\nJZ 0x00405126\nLEA RDI,[0x4 + RBX*0x4]\nCALL 0x00401880\nTEST RAX,RAX\nJZ 0x00405126\nMOV RBP,R13\nLEA R14,[RBX + 0x1]\nMOV RDI,RAX\nMOV R13,RAX\nMOV RSI,qword ptr [RSP + 0x20]\nMOV RDX,R14\nCALL 0x00401690\nTEST RAX,RAX\nJZ 0x00405150\nMOV dword ptr [R13 + RBX*0x4],0x0\nMOV RDI,R13\nCALL 0x00405210\nMOV RDI,R13\nMOV R13D,EAX\nMOV RBX,RDI\nMOV RSI,R14\nCALL 0x00401680\nMOVSXD R14,EAX\nTEST R13B,R13B\nMOV qword ptr [RSP + 0x18],RBX\nJZ 0x00405167\nXOR EDI,EDI\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x00401970\nMOV R13,RAX\nJMP 0x00405174\nMOV RBP,R13\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR EBX,EBX\nMOV R14,R15\nMOV RAX,qword ptr [R12]\nCMP R14,RAX\nMOV RCX,R14\nCMOVA RCX,RAX\nCMOVA R15,RAX\nMOV RDX,R12\nMOV R12,RAX\nSUB R12,RCX\nXOR R13D,R13D\nCMP RAX,R14\nCMOVBE R12,R13\nMOV qword ptr [RDX],RCX\nMOV EAX,dword ptr [RSP + 0x2c]\nTEST EAX,EAX\nJZ 0x0040509f\nCMP EAX,0x1\nJNZ 0x0040508c\nMOV R13,R12\nXOR R12D,R12D\nJMP 0x0040509f\nMOV RAX,R12\nSHR RAX,1\nAND R12D,0x1\nADD R12,RAX\nMOV R13,R12\nMOV R12,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nTEST CL,0x4\nCMOVNZ R13,RAX\nTEST CL,0x8\nCMOVNZ R12,RAX\nTEST RBP,RBP\nJZ 0x004050fc\nMOV RDI,qword ptr [RSP + 0x30]\nLEA RBP,[RDI + RBP*0x1 + -0x1]\nMOV RSI,RBP\nMOV RDX,R13\nCALL 0x004052d0\nMOV RDX,RBP\nSUB RDX,RAX\nCMP R15,RDX\nCMOVC RDX,R15\nMOV RCX,-0x1\nMOV RDI,RAX\nMOV RSI,qword ptr [RSP + 0x20]\nCALL 0x004015f0\nMOV RDI,RAX\nMOV RSI,RBP\nMOV RDX,R12\nCALL 0x004052d0\nADD R13,R15\nADD R13,R12\nMOV RDI,RBX\nCALL 0x004015e0\nMOV RDI,qword ptr [RSP + 0x8]\nCALL 0x004015e0\nMOV RAX,R13\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RBP,R13\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nTEST R14B,0x1\nMOV R13,-0x1\nMOV EBX,0x0\nMOV R14,R15\nMOV R12,qword ptr [RSP + 0x10]\nJNZ 0x0040504f\nJMP 0x00405102\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nMOV R14,R15\nMOV R12,qword ptr [RSP + 0x10]\nMOV RBX,R13\nJMP 0x0040504f\nMOV RAX,qword ptr [RSP + 0x10]\nCMP R14,qword ptr [RAX]\nMOV R13,R15\nJBE 0x004051c5\nINC R13\nMOV RDI,R13\nCALL 0x00401880\nTEST RAX,RAX\nJZ 0x004051db\nMOV R15,RAX\nMOV qword ptr [RSP + 0x8],R15\nMOV R12,qword ptr [RSP + 0x10]\nMOV RSI,qword ptr [R12]\nMOV RBX,qword ptr [RSP + 0x18]\nMOV RDI,RBX\nCALL 0x00405260\nMOV R14,RAX\nMOV RDI,R15\nMOV RSI,RBX\nMOV RDX,R13\nCALL 0x00401970\nMOV R15,RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x0040504f\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nMOV R12,qword ptr [RSP + 0x10]\nMOV RBX,qword ptr [RSP + 0x18]\nJMP 0x0040504f\nMOV R13,-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nTEST byte ptr [RSP + 0x4],0x1\nMOV R12,qword ptr [RSP + 0x10]\nMOV RBX,qword ptr [RSP + 0x18]\nJNZ 0x0040504f\nJMP 0x00405102\n'
p382
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n45 89 ce\n44 89 44 24 2c\n49 89 cc\n49 89 d5\n48 89 f5\n48 89 fb\ne8 79 c7 ff ff\n49 89 c7\n41 f6 c6 02\n48 89 5c 24 20\n44 89 74 24 04\n48 89 6c 24 30\n0f 85 ad 00 00 00\ne8 48 c7 ff ff\n48 83 f8 02\n0f 82 9e 00 00 00\n4c 89 64 24 10\n31 ff\n31 d2\n48 89 de\ne8 dd c6 ff ff\n48 89 c3\n48 83 fb ff\n0f 84 66 01 00 00\n48 8d 3c 9d 04 00 00 00\ne8 b3 c8 ff ff\n48 85 c0\n0f 84 50 01 00 00\n4c 89 ed\n4c 8d 73 01\n48 89 c7\n49 89 c5\n48 8b 74 24 20\n4c 89 f2\ne8 a0 c6 ff ff\n48 85 c0\n0f 84 57 01 00 00\n41 c7 44 9d 00 00 00 00 00\n4c 89 ef\ne8 06 02 00 00\n4c 89 ef\n41 89 c5\n48 89 fb\n4c 89 f6\ne8 65 c6 ff ff\n4c 63 f0\n45 84 ed\n48 89 5c 24 18\n0f 84 3b 01 00 00\n31 ff\n31 d2\n48 89 de\ne8 38 c9 ff ff\n49 89 c5\ne9 34 01 00 00\n4c 89 ed\n31 c0\n48 89 44 24 08\n31 db\n4d 89 fe\n49 8b 04 24\n49 39 c6\n4c 89 f1\n48 0f 47 c8\n4c 0f 47 f8\n4c 89 e2\n49 89 c4\n49 29 cc\n45 31 ed\n4c 39 f0\n4d 0f 46 e5\n48 89 0a\n8b 44 24 2c\n85 c0\n74 20\n83 f8 01\n75 08\n4d 89 e5\n45 31 e4\neb 13\n4c 89 e0\n48 d1 e8\n41 83 e4 01\n49 01 c4\n4d 89 e5\n49 89 c4\n8b 4c 24 04\n31 c0\nf6 c1 04\n4c 0f 45 e8\nf6 c1 08\n4c 0f 45 e0\n48 85 ed\n74 44\n48 8b 7c 24 30\n48 8d 6c 2f ff\n48 89 ee\n4c 89 ea\ne8 03 02 00 00\n48 89 ea\n48 29 c2\n49 39 d7\n49 0f 42 d7\n48 c7 c1 ff ff ff ff\n48 89 c7\n48 8b 74 24 20\ne8 02 c5 ff ff\n48 89 c7\n48 89 ee\n4c 89 e2\ne8 d4 01 00 00\n4d 01 fd\n4d 01 e5\n48 89 df\ne8 d6 c4 ff ff\n48 8b 7c 24 08\ne8 cc c4 ff ff\n4c 89 e8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n4c 89 ed\n31 c0\n48 89 44 24 08\n41 f6 c6 01\n49 c7 c5 ff ff ff ff\nbb 00 00 00 00\n4d 89 fe\n4c 8b 64 24 10\n0f 85 01 ff ff ff\neb b2\n31 c0\n48 89 44 24 08\n4d 89 fe\n4c 8b 64 24 10\n4c 89 eb\ne9 e8 fe ff ff\n48 8b 44 24 10\n4c 3b 30\n4d 89 fd\n76 51\n49 ff c5\n4c 89 ef\ne8 01 c7 ff ff\n48 85 c0\n74 57\n49 89 c7\n4c 89 7c 24 08\n4c 8b 64 24 10\n49 8b 34 24\n48 8b 5c 24 18\n48 89 df\ne8 be 00 00 00\n49 89 c6\n4c 89 ff\n48 89 de\n4c 89 ea\ne8 bd c7 ff ff\n49 89 c7\n48 8b 44 24 08\n48 89 44 24 20\ne9 8a fe ff ff\n31 c0\n48 89 44 24 08\n4c 8b 64 24 10\n48 8b 5c 24 18\ne9 74 fe ff ff\n49 c7 c5 ff ff ff ff\n31 c0\n48 89 44 24 08\nf6 44 24 04 01\n4c 8b 64 24 10\n48 8b 5c 24 18\n0f 85 51 fe ff ff\ne9 ff fe ff ff\n'
p383
S'.text:0000000000404f50\n.text:0000000000404f51\n.text:0000000000404f53\n.text:0000000000404f55\n.text:0000000000404f57\n.text:0000000000404f59\n.text:0000000000404f5a\n.text:0000000000404f5e\n.text:0000000000404f61\n.text:0000000000404f66\n.text:0000000000404f69\n.text:0000000000404f6c\n.text:0000000000404f6f\n.text:0000000000404f72\n.text:0000000000404f77\n.text:0000000000404f7a\n.text:0000000000404f7e\n.text:0000000000404f83\n.text:0000000000404f88\n.text:0000000000404f8d\n.text:0000000000404f93\n.text:0000000000404f98\n.text:0000000000404f9c\n.text:0000000000404fa2\n.text:0000000000404fa7\n.text:0000000000404fa9\n.text:0000000000404fab\n.text:0000000000404fae\n.text:0000000000404fb3\n.text:0000000000404fb6\n.text:0000000000404fba\n.text:0000000000404fc0\n.text:0000000000404fc8\n.text:0000000000404fcd\n.text:0000000000404fd0\n.text:0000000000404fd6\n.text:0000000000404fd9\n.text:0000000000404fdd\n.text:0000000000404fe0\n.text:0000000000404fe3\n.text:0000000000404fe8\n.text:0000000000404feb\n.text:0000000000404ff0\n.text:0000000000404ff3\n.text:0000000000404ff9\n.text:0000000000405002\n.text:0000000000405005\n.text:000000000040500a\n.text:000000000040500d\n.text:0000000000405010\n.text:0000000000405013\n.text:0000000000405016\n.text:000000000040501b\n.text:000000000040501e\n.text:0000000000405021\n.text:0000000000405026\n.text:000000000040502c\n.text:000000000040502e\n.text:0000000000405030\n.text:0000000000405033\n.text:0000000000405038\n.text:000000000040503b\n.text:0000000000405040\n.text:0000000000405043\n.text:0000000000405045\n.text:000000000040504a\n.text:000000000040504c\n.text:000000000040504f\n.text:0000000000405053\n.text:0000000000405056\n.text:0000000000405059\n.text:000000000040505d\n.text:0000000000405061\n.text:0000000000405064\n.text:0000000000405067\n.text:000000000040506a\n.text:000000000040506d\n.text:0000000000405070\n.text:0000000000405074\n.text:0000000000405077\n.text:000000000040507b\n.text:000000000040507d\n.text:000000000040507f\n.text:0000000000405082\n.text:0000000000405084\n.text:0000000000405087\n.text:000000000040508a\n.text:000000000040508c\n.text:000000000040508f\n.text:0000000000405092\n.text:0000000000405096\n.text:0000000000405099\n.text:000000000040509c\n.text:000000000040509f\n.text:00000000004050a3\n.text:00000000004050a5\n.text:00000000004050a8\n.text:00000000004050ac\n.text:00000000004050af\n.text:00000000004050b3\n.text:00000000004050b6\n.text:00000000004050b8\n.text:00000000004050bd\n.text:00000000004050c2\n.text:00000000004050c5\n.text:00000000004050c8\n.text:00000000004050cd\n.text:00000000004050d0\n.text:00000000004050d3\n.text:00000000004050d6\n.text:00000000004050da\n.text:00000000004050e1\n.text:00000000004050e4\n.text:00000000004050e9\n.text:00000000004050ee\n.text:00000000004050f1\n.text:00000000004050f4\n.text:00000000004050f7\n.text:00000000004050fc\n.text:00000000004050ff\n.text:0000000000405102\n.text:0000000000405105\n.text:000000000040510a\n.text:000000000040510f\n.text:0000000000405114\n.text:0000000000405117\n.text:000000000040511b\n.text:000000000040511c\n.text:000000000040511e\n.text:0000000000405120\n.text:0000000000405122\n.text:0000000000405124\n.text:0000000000405125\n.text:0000000000405126\n.text:0000000000405129\n.text:000000000040512b\n.text:0000000000405130\n.text:0000000000405134\n.text:000000000040513b\n.text:0000000000405140\n.text:0000000000405143\n.text:0000000000405148\n.text:000000000040514e\n.text:0000000000405150\n.text:0000000000405152\n.text:0000000000405157\n.text:000000000040515a\n.text:000000000040515f\n.text:0000000000405162\n.text:0000000000405167\n.text:000000000040516c\n.text:000000000040516f\n.text:0000000000405172\n.text:0000000000405174\n.text:0000000000405177\n.text:000000000040517a\n.text:000000000040517f\n.text:0000000000405182\n.text:0000000000405184\n.text:0000000000405187\n.text:000000000040518c\n.text:0000000000405191\n.text:0000000000405195\n.text:000000000040519a\n.text:000000000040519d\n.text:00000000004051a2\n.text:00000000004051a5\n.text:00000000004051a8\n.text:00000000004051ab\n.text:00000000004051ae\n.text:00000000004051b3\n.text:00000000004051b6\n.text:00000000004051bb\n.text:00000000004051c0\n.text:00000000004051c5\n.text:00000000004051c7\n.text:00000000004051cc\n.text:00000000004051d1\n.text:00000000004051d6\n.text:00000000004051db\n.text:00000000004051e2\n.text:00000000004051e4\n.text:00000000004051e9\n.text:00000000004051ee\n.text:00000000004051f3\n.text:00000000004051f8\n.text:00000000004051fe\n'
p384
tp385
sS'x2realloc'
p386
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p387
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p388
S'MOV EDX,0x1\nJMP 0x00407260\n'
p389
S'ba 01 00 00 00\neb 89\n'
p390
S'.text:00000000004072d0\n.text:00000000004072d5\n'
p391
tp392
sS'__mempcpy_chk'
p393
(S'\n__stdcall __mempcpy_chk()\n'
p394
V\u000avoid __mempcpy_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___mempcpy_chk_0060e030)();\u000a  return;\u000a}\u000a\u000a
p395
S'JMP qword ptr [0x0060e030]\n'
p396
S'ff 25 3a ca 20 00\n'
p397
S'.plt:00000000004015f0\n'
p398
tp399
sS'strlen'
p400
(S'\n__stdcall strlen(char * __s)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060e0b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x0060e0b0]\n'
p403
S'ff 25 ba c9 20 00\n'
p404
S'.plt:00000000004016f0\n'
p405
tp406
sS'double_to_human'
p407
(S'\n__stdcall double_to_human(longdouble val)\n'
p408
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid double_to_human(longdouble val)\u000a\u000a{\u000a  bool bVar1;\u000a  int iVar2;\u000a  uint uVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  int in_ECX;\u000a  int in_EDX;\u000a  undefined4 *puVar6;\u000a  char *arg;\u000a  uint in_EDI;\u000a  float10 in_ST1;\u000a  float10 in_ST2;\u000a  float10 in_ST3;\u000a  float10 in_ST4;\u000a  double dVar7;\u000a  undefined extraout_XMM0 [16];\u000a  undefined8 extraout_XMM0_Qb;\u000a  undefined val_00 [16];\u000a  longdouble val_01;\u000a  double scale_base;\u000a  char fmt [64];\u000a  undefined local_77;\u000a  undefined4 local_76 [17];\u000a  \u000a  if (in_ECX == 0) {\u000a    puVar6 = (undefined4 *)&local_77;\u000a  }\u000a  else {\u000a    puVar6 = local_76;\u000a    local_77 = 0x27;\u000a  }\u000a  if (zero_padding_width != 0) {\u000a    iVar2 = __snprintf_chk(puVar6,0x3e,1,0xffffffffffffffff,&DAT_0040a34c);\u000a    puVar6 = (undefined4 *)((long)puVar6 + (long)iVar2);\u000a    val = (longdouble)extraout_XMM0;\u000a  }\u000a  if (dev_debug == 1) {\u000a    __fprintf_chk((undefined  [16])val,stderr,1,"double_to_human:\u005cn");\u000a  }\u000a  if (in_EDX == 0) {\u000a    val_01 = powerld();\u000a    simple_round(val_01);\u000a    if (dev_debug == 1) {\u000a      pcVar5 = "  no scaling, returning value: %.*Lf\u005cn";\u000a      if (in_ECX != 0) {\u000a        pcVar5 = "  no scaling, returning (grouped) value: %\u005c'.*Lf\u005cn";\u000a      }\u000a      __fprintf_chk(stderr,1,pcVar5,(ulong)in_EDI);\u000a    }\u000a    *(undefined *)(puVar6 + 1) = 0;\u000a    *puVar6 = 0x664c2a2e;\u000a    uVar3 = __snprintf_chk();\u000a    if (0x7f < uVar3) {\u000a      uVar4 = dcgettext(0,"failed to prepare value \u005c'%Lf\u005c' for printing",5);\u000a      error(1,0,uVar4,uVar4);\u000a    }\u000a  }\u000a  else {\u000a    uVar3 = default_scale_base();\u000a    dVar7 = (double)uVar3;\u000a    val_00 = (undefined  [16])\u000a             expld((longdouble)CONCAT88(extraout_XMM0_Qb,dVar7),(uint *)(ulong)uVar3);\u000a    if (dev_debug == 1) {\u000a      val_00 = __fprintf_chk(ZEXT816((ulong)dVar7),stderr,1,"  scaled value to %Lf * %0.f ^ %u\u005cn",0)\u000a      ;\u000a    }\u000a    if (user_precision == -1) {\u000a      in_ST1 = in_ST2;\u000a      in_ST2 = in_ST3;\u000a      in_ST3 = in_ST4;\u000a      absld((longdouble)val_00);\u000a    }\u000a    val_01 = powerld();\u000a    val_01 = simple_round(val_01);\u000a    in_ST2 = in_ST2 / in_ST1;\u000a    absld(val_01);\u000a    bVar1 = (float10)uVar3 <= in_ST3;\u000a    if (bVar1) {\u000a      in_ST2 = in_ST2 / (float10)uVar3;\u000a    }\u000a    if (in_ST2 != (float10)0) {\u000a      absld((longdouble)ZEXT816((ulong)dVar7));\u000a    }\u000a    if (dev_debug == 1) {\u000a      __fprintf_chk(ZEXT816((ulong)dVar7),stderr,1,"  after rounding, value=%Lf * %0.f ^ %u\u005cn",\u000a                    (ulong)bVar1);\u000a    }\u000a    *(undefined *)((long)puVar6 + 6) = 0;\u000a    *(undefined2 *)(puVar6 + 1) = 0x7325;\u000a    *puVar6 = 0x664c2a2e;\u000a    suffix_power_char();\u000a    uVar3 = __snprintf_chk();\u000a    if (0x7e < uVar3) {\u000a      uVar4 = dcgettext(0,"failed to prepare value \u005c'%Lf\u005c' for printing",5);\u000a      error(1,0,uVar4,uVar4);\u000a    }\u000a    if ((in_EDX == 4) && (bVar1)) {\u000a      __strncat_chk();\u000a    }\u000a    uVar4 = stderr;\u000a    if (dev_debug == 1) {\u000a      pcVar5 = quote(arg);\u000a      __fprintf_chk(uVar4,1,"  returning value: %s\u005cn",pcVar5);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p409
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV R12D,R8D\nMOV EBP,ECX\nMOV R15D,EDX\nMOV R14,RSI\nMOV R13D,EDI\nFLD tword ptr [0xe0 + RSP]\nMOV byte ptr [RSP + 0x60],0x25\nTEST EBP,EBP\nJZ 0x00403e0b\nLEA RBX,[RSP + 0x62]\nMOV byte ptr [RSP + 0x61],0x27\nJMP 0x00403e10\nLEA RBX,[RSP + 0x61]\nMOV R9,qword ptr [0x0060e388]\nTEST R9,R9\nFSTP tword ptr [RSP + 0x24]\nJZ 0x00403e46\nMOV ESI,0x3e\nMOV EDX,0x1\nMOV RCX,-0x1\nMOV R8D,0x40a34c\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x004015d0\nCDQE\nADD RBX,RAX\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x00403e67\nMOV RDI,qword ptr [0x0060e320]\nMOV ESI,0x1\nMOV EDX,0x40a351\nXOR EAX,EAX\nCALL 0x004019a0\nTEST R15D,R15D\nJZ 0x00403ef4\nMOV EDI,R15D\nCALL 0x00403a30\nCVTSI2SD XMM0,EAX\nMOVSD qword ptr [RSP + 0x30],XMM0\nMOV dword ptr [RSP + 0x20],0x0\nFLD tword ptr [RSP + 0x24]\nFSTP tword ptr [RSP]\nLEA RSI,[RSP + 0x20]\nMOV EDI,EAX\nCALL 0x00403d20\nFSTP tword ptr [RSP + 0x24]\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x00403ed3\nMOV RDI,qword ptr [0x0060e320]\nMOV ECX,dword ptr [RSP + 0x20]\nFLD tword ptr [RSP + 0x24]\nFSTP tword ptr [RSP]\nMOV ESI,0x1\nMOV EDX,0x40a3ea\nMOV AL,0x1\nMOVSD XMM0,qword ptr [RSP + 0x30]\nCALL 0x004019a0\nMOV RDI,qword ptr [0x0060e260]\nCMP RDI,-0x1\nJZ 0x00403fca\nIMUL EAX,dword ptr [RSP + 0x20],0x3\nCMP RAX,RDI\nCMOVL EDI,EAX\nJMP 0x00403fe9\nFLD dword ptr [0x00408970]\nFSTP tword ptr [RSP]\nMOV EDI,R13D\nCALL 0x00403bc0\nFLD ST0\nFSTP tword ptr [RSP + 0x30]\nFLD tword ptr [RSP + 0x24]\nFMULP\nFSTP tword ptr [RSP]\nMOV EDI,R12D\nCALL 0x004041e0\nFLD tword ptr [RSP + 0x30]\nFDIVP\nCMP byte ptr [0x0060e361],0x1\nFLD ST0\nFSTP tword ptr [RSP + 0x24]\nJNZ 0x00403f5e\nTEST EBP,EBP\nMOV RDI,qword ptr [0x0060e320]\nMOV EAX,0x40a363\nMOV EDX,0x40a394\nCMOVNZ RDX,RAX\nFSTP tword ptr [RSP]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV ECX,R13D\nCALL 0x004019a0\nFLD tword ptr [RSP + 0x24]\nMOV byte ptr [RBX + 0x4],0x0\nMOV dword ptr [RBX],0x664c2a2e\nFSTP tword ptr [RSP]\nLEA R8,[RSP + 0x60]\nMOV ESI,0x80\nMOV EDX,0x1\nMOV RCX,-0x1\nXOR EAX,EAX\nMOV RDI,R14\nMOV R9D,R13D\nCALL 0x004015d0\nCMP EAX,0x80\nJC 0x004041a7\nXOR EDI,EDI\nMOV ESI,0x40a3bf\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nFLD tword ptr [RSP + 0x24]\nFSTP tword ptr [RSP]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401920\nJMP 0x004041a7\nFLD tword ptr [RSP + 0x24]\nFSTP tword ptr [RSP]\nCALL 0x004041c0\nXOR EDI,EDI\nFLD dword ptr [0x00408970]\nFUCOMIP ST0,ST1\nFSTP ST0\nJBE 0x00403fe9\nMOV EDI,0x1\nFLD dword ptr [0x00408970]\nFLD ST0\nFSTP tword ptr [RSP + 0x48]\nFSTP tword ptr [RSP]\nCALL 0x00403bc0\nFLD ST0\nFSTP tword ptr [RSP + 0x54]\nFLD tword ptr [RSP + 0x24]\nFMULP\nFSTP tword ptr [RSP]\nMOV EDI,R12D\nCALL 0x004041e0\nFLD tword ptr [RSP + 0x54]\nFDIVP\nFLD ST0\nFSTP tword ptr [RSP + 0x24]\nFSTP tword ptr [RSP]\nCALL 0x004041c0\nMOVSD XMM0,qword ptr [RSP + 0x30]\nMOVSD qword ptr [RSP + 0x40],XMM0\nFLD qword ptr [RSP + 0x40]\nFXCH\nFUCOMIP ST0,ST1\nJNC 0x00404046\nFSTP ST0\nFLD tword ptr [RSP + 0x24]\nJMP 0x00404050\nFLD tword ptr [RSP + 0x24]\nFDIVRP\nINC dword ptr [RSP + 0x20]\nFLDZ\nFXCH\nFUCOMI ST0,ST1\nFSTP ST1\nFLD ST0\nFSTP tword ptr [RSP + 0x24]\nJNZ 0x00404062\nJNP 0x00404088\nFSTP tword ptr [RSP]\nCALL 0x004041c0\nFLD tword ptr [RSP + 0x48]\nFUCOMIP ST0,ST1\nFSTP ST0\nJBE 0x0040408a\nCMP dword ptr [RSP + 0x20],0x0\nSETNZ BPL\nCMP byte ptr [0x0060e361],0x1\nJZ 0x00404095\nJMP 0x004040be\nFSTP ST0\nXOR EBP,EBP\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x004040be\nMOV RDI,qword ptr [0x0060e320]\nMOV ECX,dword ptr [RSP + 0x20]\nFLD tword ptr [RSP + 0x24]\nFSTP tword ptr [RSP]\nMOV ESI,0x1\nMOV EDX,0x40a40d\nMOV AL,0x1\nMOVSD XMM0,qword ptr [RSP + 0x30]\nCALL 0x004019a0\nMOV byte ptr [RBX + 0x6],0x0\nMOV word ptr [RBX + 0x4],0x7325\nMOV dword ptr [RBX],0x664c2a2e\nMOV RBX,qword ptr [0x0060e260]\nCMP RBX,-0x1\nMOVZX EAX,BPL\nCMOVZ EBX,EAX\nMOV EDI,dword ptr [RSP + 0x20]\nCALL 0x00404290\nMOV qword ptr [RSP + 0x10],RAX\nFLD tword ptr [RSP + 0x24]\nFSTP tword ptr [RSP]\nLEA R8,[RSP + 0x60]\nMOV ESI,0x7f\nMOV EDX,0x1\nMOV RCX,-0x1\nXOR EAX,EAX\nMOV RDI,R14\nMOV R9D,EBX\nCALL 0x004015d0\nMOV EBX,EAX\nCMP EBX,0x7f\nJC 0x0040414b\nXOR EDI,EDI\nMOV ESI,0x40a3bf\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nFLD tword ptr [RSP + 0x24]\nFSTP tword ptr [RSP]\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401920\nCMP R15D,0x4\nJNZ 0x00404178\nMOV EAX,dword ptr [RSP + 0x20]\nTEST EAX,EAX\nJZ 0x00404178\nMOVSXD RAX,EBX\nMOV EDX,0x7f\nSUB RDX,RAX\nMOV ESI,0x409e08\nMOV RCX,-0x1\nMOV RDI,R14\nCALL 0x004019b0\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x004041a7\nMOV RBX,qword ptr [0x0060e320]\nMOV RDI,R14\nCALL 0x004068c0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40a43d\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x004019a0\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p410
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n45 89 c4\n89 cd\n41 89 d7\n49 89 f6\n41 89 fd\ndb ac 24 e0 00 00 00\nc6 44 24 60 25\n85 ed\n74 0c\n48 8d 5c 24 62\nc6 44 24 61 27\neb 05\n48 8d 5c 24 61\n4c 8b 0d 71 a5 20 00\n4d 85 c9\ndb 7c 24 24\n74 26\nbe 3e 00 00 00\nba 01 00 00 00\n48 c7 c1 ff ff ff ff\n41 b8 4c a3 40 00\n31 c0\n48 89 df\ne8 8f d7 ff ff\n48 98\n48 01 c3\n80 3d 14 a5 20 00 01\n75 18\n48 8b 3d ca a4 20 00\nbe 01 00 00 00\nba 51 a3 40 00\n31 c0\ne8 39 db ff ff\n45 85 ff\n0f 84 84 00 00 00\n44 89 ff\ne8 b8 fb ff ff\nf2 0f 2a c0\nf2 0f 11 44 24 30\nc7 44 24 20 00 00 00 00\ndb 6c 24 24\ndb 3c 24\n48 8d 74 24 20\n89 c7\ne8 83 fe ff ff\ndb 7c 24 24\n80 3d b9 a4 20 00 01\n75 29\n48 8b 3d 6f a4 20 00\n8b 4c 24 20\ndb 6c 24 24\ndb 3c 24\nbe 01 00 00 00\nba ea a3 40 00\nb0 01\nf2 0f 10 44 24 30\ne8 cd da ff ff\n48 8b 3d 86 a3 20 00\n48 83 ff ff\n0f 84 e6 00 00 00\n6b 44 24 20 03\n48 39 f8\n0f 4c f8\ne9 f5 00 00 00\nd9 05 76 4a 00 00\ndb 3c 24\n44 89 ef\ne8 bb fc ff ff\nd9 c0\ndb 7c 24 30\ndb 6c 24 24\nde c9\ndb 3c 24\n44 89 e7\ne8 c4 02 00 00\ndb 6c 24 30\nde f9\n80 3d 38 a4 20 00 01\nd9 c0\ndb 7c 24 24\n75 2d\n85 ed\n48 8b 3d e6 a3 20 00\nb8 63 a3 40 00\nba 94 a3 40 00\n48 0f 45 d0\ndb 3c 24\nbe 01 00 00 00\n31 c0\n44 89 e9\ne8 46 da ff ff\ndb 6c 24 24\nc6 43 04 00\nc7 03 2e 2a 4c 66\ndb 3c 24\n4c 8d 44 24 60\nbe 80 00 00 00\nba 01 00 00 00\n48 c7 c1 ff ff ff ff\n31 c0\n4c 89 f7\n45 89 e9\ne8 42 d6 ff ff\n3d 80 00 00 00\n0f 82 0e 02 00 00\n31 ff\nbe bf a3 40 00\nba 05 00 00 00\ne8 26 d7 ff ff\n48 89 c1\ndb 6c 24 24\ndb 3c 24\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 5b d9 ff ff\ne9 dd 01 00 00\ndb 6c 24 24\ndb 3c 24\ne8 ea 01 00 00\n31 ff\nd9 05 92 49 00 00\ndf e9\ndd d8\n76 05\nbf 01 00 00 00\nd9 05 81 49 00 00\nd9 c0\ndb 7c 24 48\ndb 3c 24\ne8 c3 fb ff ff\nd9 c0\ndb 7c 24 54\ndb 6c 24 24\nde c9\ndb 3c 24\n44 89 e7\ne8 cc 01 00 00\ndb 6c 24 54\nde f9\nd9 c0\ndb 7c 24 24\ndb 3c 24\ne8 98 01 00 00\nf2 0f 10 44 24 30\nf2 0f 11 44 24 40\ndd 44 24 40\nd9 c9\ndf e9\n73 08\ndd d8\ndb 6c 24 24\neb 0a\ndb 6c 24 24\nde f1\nff 44 24 20\nd9 ee\nd9 c9\ndb e9\ndd d9\nd9 c0\ndb 7c 24 24\n75 02\n7b 26\ndb 3c 24\ne8 56 01 00 00\ndb 6c 24 48\ndf e9\ndd d8\n76 16\n83 7c 24 20 00\n40 0f 95 c5\n80 3d dd a2 20 00 01\n74 0f\neb 36\ndd d8\n31 ed\n80 3d ce a2 20 00 01\n75 29\n48 8b 3d 84 a2 20 00\n8b 4c 24 20\ndb 6c 24 24\ndb 3c 24\nbe 01 00 00 00\nba 0d a4 40 00\nb0 01\nf2 0f 10 44 24 30\ne8 e2 d8 ff ff\nc6 43 06 00\n66 c7 43 04 25 73\nc7 03 2e 2a 4c 66\n48 8b 1d 8b a1 20 00\n48 83 fb ff\n40 0f b6 c5\n0f 44 d8\n8b 7c 24 20\ne8 a7 01 00 00\n48 89 44 24 10\ndb 6c 24 24\ndb 3c 24\n4c 8d 44 24 60\nbe 7f 00 00 00\nba 01 00 00 00\n48 c7 c1 ff ff ff ff\n31 c0\n4c 89 f7\n41 89 d9\ne8 b8 d4 ff ff\n89 c3\n83 fb 7f\n72 2c\n31 ff\nbe bf a3 40 00\nba 05 00 00 00\ne8 a0 d5 ff ff\n48 89 c1\ndb 6c 24 24\ndb 3c 24\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 d5 d7 ff ff\n41 83 ff 04\n75 27\n8b 44 24 20\n85 c0\n74 1f\n48 63 c3\nba 7f 00 00 00\n48 29 c2\nbe 08 9e 40 00\n48 c7 c1 ff ff ff ff\n4c 89 f7\ne8 38 d8 ff ff\n80 3d e2 a1 20 00 01\n75 26\n48 8b 1d 98 a1 20 00\n4c 89 f7\ne8 30 27 00 00\n48 89 c1\nbe 01 00 00 00\nba 3d a4 40 00\n31 c0\n48 89 df\ne8 f9 d7 ff ff\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p411
S'.text:0000000000403dd0\n.text:0000000000403dd1\n.text:0000000000403dd3\n.text:0000000000403dd5\n.text:0000000000403dd7\n.text:0000000000403dd9\n.text:0000000000403dda\n.text:0000000000403de1\n.text:0000000000403de4\n.text:0000000000403de6\n.text:0000000000403de9\n.text:0000000000403dec\n.text:0000000000403def\n.text:0000000000403df6\n.text:0000000000403dfb\n.text:0000000000403dfd\n.text:0000000000403dff\n.text:0000000000403e04\n.text:0000000000403e09\n.text:0000000000403e0b\n.text:0000000000403e10\n.text:0000000000403e17\n.text:0000000000403e1a\n.text:0000000000403e1e\n.text:0000000000403e20\n.text:0000000000403e25\n.text:0000000000403e2a\n.text:0000000000403e31\n.text:0000000000403e37\n.text:0000000000403e39\n.text:0000000000403e3c\n.text:0000000000403e41\n.text:0000000000403e43\n.text:0000000000403e46\n.text:0000000000403e4d\n.text:0000000000403e4f\n.text:0000000000403e56\n.text:0000000000403e5b\n.text:0000000000403e60\n.text:0000000000403e62\n.text:0000000000403e67\n.text:0000000000403e6a\n.text:0000000000403e70\n.text:0000000000403e73\n.text:0000000000403e78\n.text:0000000000403e7c\n.text:0000000000403e82\n.text:0000000000403e8a\n.text:0000000000403e8e\n.text:0000000000403e91\n.text:0000000000403e96\n.text:0000000000403e98\n.text:0000000000403e9d\n.text:0000000000403ea1\n.text:0000000000403ea8\n.text:0000000000403eaa\n.text:0000000000403eb1\n.text:0000000000403eb5\n.text:0000000000403eb9\n.text:0000000000403ebc\n.text:0000000000403ec1\n.text:0000000000403ec6\n.text:0000000000403ec8\n.text:0000000000403ece\n.text:0000000000403ed3\n.text:0000000000403eda\n.text:0000000000403ede\n.text:0000000000403ee4\n.text:0000000000403ee9\n.text:0000000000403eec\n.text:0000000000403eef\n.text:0000000000403ef4\n.text:0000000000403efa\n.text:0000000000403efd\n.text:0000000000403f00\n.text:0000000000403f05\n.text:0000000000403f07\n.text:0000000000403f0b\n.text:0000000000403f0f\n.text:0000000000403f11\n.text:0000000000403f14\n.text:0000000000403f17\n.text:0000000000403f1c\n.text:0000000000403f20\n.text:0000000000403f22\n.text:0000000000403f29\n.text:0000000000403f2b\n.text:0000000000403f2f\n.text:0000000000403f31\n.text:0000000000403f33\n.text:0000000000403f3a\n.text:0000000000403f3f\n.text:0000000000403f44\n.text:0000000000403f48\n.text:0000000000403f4b\n.text:0000000000403f50\n.text:0000000000403f52\n.text:0000000000403f55\n.text:0000000000403f5a\n.text:0000000000403f5e\n.text:0000000000403f62\n.text:0000000000403f68\n.text:0000000000403f6b\n.text:0000000000403f70\n.text:0000000000403f75\n.text:0000000000403f7a\n.text:0000000000403f81\n.text:0000000000403f83\n.text:0000000000403f86\n.text:0000000000403f89\n.text:0000000000403f8e\n.text:0000000000403f93\n.text:0000000000403f99\n.text:0000000000403f9b\n.text:0000000000403fa0\n.text:0000000000403fa5\n.text:0000000000403faa\n.text:0000000000403fad\n.text:0000000000403fb1\n.text:0000000000403fb4\n.text:0000000000403fb9\n.text:0000000000403fbb\n.text:0000000000403fbd\n.text:0000000000403fc0\n.text:0000000000403fc5\n.text:0000000000403fca\n.text:0000000000403fce\n.text:0000000000403fd1\n.text:0000000000403fd6\n.text:0000000000403fd8\n.text:0000000000403fde\n.text:0000000000403fe0\n.text:0000000000403fe2\n.text:0000000000403fe4\n.text:0000000000403fe9\n.text:0000000000403fef\n.text:0000000000403ff1\n.text:0000000000403ff5\n.text:0000000000403ff8\n.text:0000000000403ffd\n.text:0000000000403fff\n.text:0000000000404003\n.text:0000000000404007\n.text:0000000000404009\n.text:000000000040400c\n.text:000000000040400f\n.text:0000000000404014\n.text:0000000000404018\n.text:000000000040401a\n.text:000000000040401c\n.text:0000000000404020\n.text:0000000000404023\n.text:0000000000404028\n.text:000000000040402e\n.text:0000000000404034\n.text:0000000000404038\n.text:000000000040403a\n.text:000000000040403c\n.text:000000000040403e\n.text:0000000000404040\n.text:0000000000404044\n.text:0000000000404046\n.text:000000000040404a\n.text:000000000040404c\n.text:0000000000404050\n.text:0000000000404052\n.text:0000000000404054\n.text:0000000000404056\n.text:0000000000404058\n.text:000000000040405a\n.text:000000000040405e\n.text:0000000000404060\n.text:0000000000404062\n.text:0000000000404065\n.text:000000000040406a\n.text:000000000040406e\n.text:0000000000404070\n.text:0000000000404072\n.text:0000000000404074\n.text:0000000000404079\n.text:000000000040407d\n.text:0000000000404084\n.text:0000000000404086\n.text:0000000000404088\n.text:000000000040408a\n.text:000000000040408c\n.text:0000000000404093\n.text:0000000000404095\n.text:000000000040409c\n.text:00000000004040a0\n.text:00000000004040a4\n.text:00000000004040a7\n.text:00000000004040ac\n.text:00000000004040b1\n.text:00000000004040b3\n.text:00000000004040b9\n.text:00000000004040be\n.text:00000000004040c2\n.text:00000000004040c8\n.text:00000000004040ce\n.text:00000000004040d5\n.text:00000000004040d9\n.text:00000000004040dd\n.text:00000000004040e0\n.text:00000000004040e4\n.text:00000000004040e9\n.text:00000000004040ee\n.text:00000000004040f2\n.text:00000000004040f5\n.text:00000000004040fa\n.text:00000000004040ff\n.text:0000000000404104\n.text:000000000040410b\n.text:000000000040410d\n.text:0000000000404110\n.text:0000000000404113\n.text:0000000000404118\n.text:000000000040411a\n.text:000000000040411d\n.text:000000000040411f\n.text:0000000000404121\n.text:0000000000404126\n.text:000000000040412b\n.text:0000000000404130\n.text:0000000000404133\n.text:0000000000404137\n.text:000000000040413a\n.text:000000000040413f\n.text:0000000000404141\n.text:0000000000404143\n.text:0000000000404146\n.text:000000000040414b\n.text:000000000040414f\n.text:0000000000404151\n.text:0000000000404155\n.text:0000000000404157\n.text:0000000000404159\n.text:000000000040415c\n.text:0000000000404161\n.text:0000000000404164\n.text:0000000000404169\n.text:0000000000404170\n.text:0000000000404173\n.text:0000000000404178\n.text:000000000040417f\n.text:0000000000404181\n.text:0000000000404188\n.text:000000000040418b\n.text:0000000000404190\n.text:0000000000404193\n.text:0000000000404198\n.text:000000000040419d\n.text:000000000040419f\n.text:00000000004041a2\n.text:00000000004041a7\n.text:00000000004041ae\n.text:00000000004041af\n.text:00000000004041b1\n.text:00000000004041b3\n.text:00000000004041b5\n.text:00000000004041b7\n.text:00000000004041b8\n'
p412
tp413
sS'memcmp'
p414
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060e110)();\u000a  return iVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x0060e110]\n'
p417
S'ff 25 5a c9 20 00\n'
p418
S'.plt:00000000004017b0\n'
p419
tp420
sS'quotearg_n_style_mem'
p421
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p422
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p423
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00406600\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x004063d0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p424
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p425
S'.text:0000000000406660\n.text:0000000000406661\n.text:0000000000406663\n.text:0000000000406665\n.text:0000000000406666\n.text:000000000040666a\n.text:000000000040666d\n.text:0000000000406670\n.text:0000000000406672\n.text:0000000000406675\n.text:0000000000406678\n.text:000000000040667d\n.text:000000000040667f\n.text:0000000000406682\n.text:0000000000406685\n.text:0000000000406688\n.text:000000000040668d\n.text:0000000000406691\n.text:0000000000406692\n.text:0000000000406694\n.text:0000000000406696\n.text:0000000000406697\n'
p426
tp427
sS'_exit'
p428
(S'\n__stdcall _exit(int __status)\n'
p429
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060e050)();\u000a  return;\u000a}\u000a\u000a
p430
S'JMP qword ptr [0x0060e050]\n'
p431
S'ff 25 1a ca 20 00\n'
p432
S'.plt:0000000000401630\n'
p433
tp434
sS'bkm_scale_by_power'
p435
(S'\n__stdcall bkm_scale_by_power(uintmax_t * x)\n'
p436
V\u000astrtol_error bkm_scale_by_power(uintmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p437
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00407991\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00407930\nOR EBP,EAX\nDEC EBX\nJNZ 0x00407980\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p438
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p439
S'.text:0000000000407960\n.text:0000000000407961\n.text:0000000000407963\n.text:0000000000407965\n.text:0000000000407966\n.text:0000000000407967\n.text:0000000000407969\n.text:000000000040796c\n.text:000000000040796f\n.text:0000000000407971\n.text:0000000000407973\n.text:0000000000407975\n.text:0000000000407980\n.text:0000000000407983\n.text:0000000000407986\n.text:000000000040798b\n.text:000000000040798d\n.text:000000000040798f\n.text:0000000000407991\n.text:0000000000407993\n.text:0000000000407997\n.text:0000000000407998\n.text:000000000040799a\n.text:000000000040799c\n.text:000000000040799d\n'
p440
tp441
sS'argmatch_valid'
p442
(S'\n__stdcall argmatch_valid(char * * arglist, char * vallist, size_t valsize)\n'
p443
V\u000avoid argmatch_valid(char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  int iVar2;\u000a  char *__s;\u000a  char *__s1;\u000a  long lVar3;\u000a  \u000a  __s = (char *)dcgettext(0,"Valid arguments are:",5);\u000a  fputs_unlocked(__s,stderr);\u000a  __s = *arglist;\u000a  if (__s != (char *)0x0) {\u000a    __s1 = (char *)0x0;\u000a    lVar3 = 0;\u000a    do {\u000a      pFVar1 = stderr;\u000a      if (lVar3 == 0) {\u000aLAB_00404bb7:\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,"\u005cn  - %s",__s);\u000a        __s1 = vallist;\u000a      }\u000a      else {\u000a        iVar2 = memcmp(__s1,vallist,valsize);\u000a        if (iVar2 != 0) goto LAB_00404bb7;\u000a        __s = quote(__s);\u000a        __fprintf_chk(pFVar1,1,&DAT_0040a643,__s);\u000a      }\u000a      __s = arglist[lVar3 + 1];\u000a      lVar3 = lVar3 + 1;\u000a      vallist = vallist + valsize;\u000a    } while (__s != (char *)0x0);\u000a  }\u000a  (*(code *)PTR_putc_unlocked_0060e170)(10,stderr);\u000a  return;\u000a}\u000a\u000a
p444
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R13,RSI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV ESI,0x40a626\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e320]\nMOV RDI,RAX\nCALL 0x004017c0\nMOV qword ptr [RSP],RBX\nMOV RBX,qword ptr [RBX]\nTEST RBX,RBX\nMOV R12,qword ptr [0x0060e320]\nJZ 0x00404c1a\nXOR EBP,EBP\nXOR R15D,R15D\nTEST R15,R15\nJZ 0x00404bb7\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,R14\nCALL 0x004017b0\nTEST EAX,EAX\nJZ 0x00404be0\nMOV RDI,RBX\nCALL 0x004068c0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40a63b\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x004019a0\nMOV RBP,R13\nJMP 0x00404bff\nMOV RDI,RBX\nCALL 0x004068c0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40a643\nXOR EAX,EAX\nMOV RDI,R12\nCALL 0x004019a0\nMOV RAX,qword ptr [RSP]\nMOV RBX,qword ptr [RAX + R15*0x8 + 0x8]\nINC R15\nMOV R12,qword ptr [0x0060e320]\nADD R13,R14\nTEST RBX,RBX\nJNZ 0x00404ba0\nMOV EDI,0xa\nMOV RSI,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401870\n'
p445
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f5\n48 89 fb\n31 ff\nbe 26 a6 40 00\nba 05 00 00 00\ne8 5b cb ff ff\n48 8b 35 a4 97 20 00\n48 89 c7\ne8 3c cc ff ff\n48 89 1c 24\n48 8b 1b\n48 85 db\n4c 8b 25 8b 97 20 00\n0f 84 7f 00 00 00\n31 ed\n45 31 ff\n4d 85 ff\n74 12\n48 89 ef\n4c 89 ee\n4c 89 f2\ne8 fd cb ff ff\n85 c0\n74 29\n48 89 df\ne8 01 1d 00 00\n48 89 c1\nbe 01 00 00 00\nba 3b a6 40 00\n31 c0\n4c 89 e7\ne8 ca cd ff ff\n4c 89 ed\neb 24\n48 89 df\ne8 d8 1c 00 00\n48 89 c1\nbe 01 00 00 00\nba 43 a6 40 00\n31 c0\n4c 89 e7\ne8 a1 cd ff ff\n48 8b 04 24\n4a 8b 5c f8 08\n49 ff c7\n4c 8b 25 0e 97 20 00\n4d 01 f5\n48 85 db\n75 86\nbf 0a 00 00 00\n4c 89 e6\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 3b cc ff ff\n'
p446
S'.text:0000000000404b50\n.text:0000000000404b51\n.text:0000000000404b53\n.text:0000000000404b55\n.text:0000000000404b57\n.text:0000000000404b59\n.text:0000000000404b5a\n.text:0000000000404b5b\n.text:0000000000404b5e\n.text:0000000000404b61\n.text:0000000000404b64\n.text:0000000000404b66\n.text:0000000000404b6b\n.text:0000000000404b70\n.text:0000000000404b75\n.text:0000000000404b7c\n.text:0000000000404b7f\n.text:0000000000404b84\n.text:0000000000404b88\n.text:0000000000404b8b\n.text:0000000000404b8e\n.text:0000000000404b95\n.text:0000000000404b9b\n.text:0000000000404b9d\n.text:0000000000404ba0\n.text:0000000000404ba3\n.text:0000000000404ba5\n.text:0000000000404ba8\n.text:0000000000404bab\n.text:0000000000404bae\n.text:0000000000404bb3\n.text:0000000000404bb5\n.text:0000000000404bb7\n.text:0000000000404bba\n.text:0000000000404bbf\n.text:0000000000404bc2\n.text:0000000000404bc7\n.text:0000000000404bcc\n.text:0000000000404bce\n.text:0000000000404bd1\n.text:0000000000404bd6\n.text:0000000000404bd9\n.text:0000000000404be0\n.text:0000000000404be3\n.text:0000000000404be8\n.text:0000000000404beb\n.text:0000000000404bf0\n.text:0000000000404bf5\n.text:0000000000404bf7\n.text:0000000000404bfa\n.text:0000000000404bff\n.text:0000000000404c03\n.text:0000000000404c08\n.text:0000000000404c0b\n.text:0000000000404c12\n.text:0000000000404c15\n.text:0000000000404c18\n.text:0000000000404c1a\n.text:0000000000404c1f\n.text:0000000000404c22\n.text:0000000000404c26\n.text:0000000000404c27\n.text:0000000000404c29\n.text:0000000000404c2b\n.text:0000000000404c2d\n.text:0000000000404c2f\n.text:0000000000404c30\n'
p447
tp448
sS'xrealloc'
p449
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p450
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p451
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00407247\nTEST RBX,RBX\nJNZ 0x00407247\nCALL 0x004015e0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x004018d0\nTEST RBX,RBX\nJZ 0x00407259\nTEST RAX,RAX\nJZ 0x0040725b\nPOP RBX\nRET\nCALL 0x00407380\n'
p452
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 9d a3 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 81 a6 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p453
S'.text:0000000000407230\n.text:0000000000407231\n.text:0000000000407234\n.text:0000000000407237\n.text:0000000000407239\n.text:000000000040723c\n.text:000000000040723e\n.text:0000000000407243\n.text:0000000000407245\n.text:0000000000407246\n.text:0000000000407247\n.text:000000000040724a\n.text:000000000040724f\n.text:0000000000407252\n.text:0000000000407254\n.text:0000000000407257\n.text:0000000000407259\n.text:000000000040725a\n.text:000000000040725b\n'
p454
tp455
sS'compare_ranges'
p456
(S'\n__stdcall compare_ranges(void * a, void * b)\n'
p457
V\u000aint compare_ranges(void *a,void *b)\u000a\u000a{\u000a  uint uVar1;\u000a  \u000a  uVar1 = 0xffffffff;\u000a  if (*(int *)b <= *(int *)a) {\u000a    uVar1 = (uint)(*(int *)b < *(int *)a);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p458
S'MOV EAX,dword ptr [RDI]\nXOR ECX,ECX\nCMP EAX,dword ptr [RSI]\nSETG CL\nMOV EAX,0xffffffff\nCMOVGE EAX,ECX\nRET\n'
p459
S'8b 07\n31 c9\n3b 06\n0f 9f c1\nb8 ff ff ff ff\n0f 4d c1\nc3\n'
p460
S'.text:00000000004048c0\n.text:00000000004048c2\n.text:00000000004048c4\n.text:00000000004048c6\n.text:00000000004048c9\n.text:00000000004048ce\n.text:00000000004048d1\n'
p461
tp462
sS'parse_format_string'
p463
(S'\n__stdcall parse_format_string(char * fmt)\n'
p464
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000avoid parse_format_string(char *fmt)\u000a\u000a{\u000a  size_t sVar1;\u000a  int *piVar2;\u000a  long lVar3;\u000a  undefined8 uVar4;\u000a  char *pcVar5;\u000a  char *pcVar6;\u000a  ushort **ppuVar7;\u000a  char *pcVar8;\u000a  char *pcVar9;\u000a  long *plVar10;\u000a  long lVar11;\u000a  undefined *puVar12;\u000a  char cVar13;\u000a  ulong uVar14;\u000a  size_t n;\u000a  char *local_40;\u000a  undefined8 local_38;\u000a  \u000a  local_40 = (char *)0x0;\u000a  n = 0;\u000a  lVar11 = 0;\u000a  do {\u000a    if (fmt[lVar11] == 0) {\u000a      uVar4 = dcgettext(0,"format %s has no %% directive",5);\u000a      quote(fmt);\u000a      error(1,0,uVar4);\u000a    }\u000a    else {\u000a      if ((fmt[lVar11] == '%') && (fmt[lVar11 + 1] != '%')) break;\u000a    }\u000a    n = n + 1;\u000a    lVar11 = (ulong)(fmt[lVar11] == '%') + 1 + lVar11;\u000a  } while( true );\u000a  lVar11 = lVar11 + 1;\u000a  uVar14 = 0;\u000a  do {\u000a    while( true ) {\u000a      while( true ) {\u000a        cVar13 = (char)uVar14;\u000a        sVar1 = strspn(fmt + lVar11," ");\u000a        lVar11 = lVar11 + sVar1;\u000a        if (fmt[lVar11] != '\u005c'') break;\u000a        grouping = 1;\u000a        lVar11 = lVar11 + 1;\u000a      }\u000a      if (fmt[lVar11] != '0') break;\u000a      lVar11 = lVar11 + 1;\u000a      uVar14 = 1;\u000a    }\u000a  } while (sVar1 != 0);\u000a  piVar2 = __errno_location();\u000a  *piVar2 = 0;\u000a  lVar3 = strtol(fmt + lVar11,&local_40,10);\u000a  if (*piVar2 == 0x22) {\u000a    uVar4 = dcgettext(0,"invalid format %s (width overflow)",5);\u000a    local_38 = uVar14 | (ulong)local_38._4_4_ << 0x20;\u000a    pcVar5 = quote(fmt);\u000a    cVar13 = (char)local_38;\u000a    error(1,0,uVar4,pcVar5);\u000a  }\u000a  if ((lVar3 != 0) && (local_40 != fmt + lVar11)) {\u000a    if ((debug == 1) && (padding_width != 0)) {\u000a      if ((cVar13 == 0) || (lVar3 < 1)) {\u000a        uVar4 = dcgettext(0,"--format padding overriding --padding",5);\u000a        error(0,0,uVar4,uVar4);\u000a        goto LAB_00402b3d;\u000a      }\u000a    }\u000a    else {\u000aLAB_00402b3d:\u000a      if (lVar3 < 0) {\u000a        padding_alignment = 1;\u000a        padding_width = -lVar3;\u000a        goto LAB_00402b69;\u000a      }\u000a    }\u000a    plVar10 = &padding_width;\u000a    if (cVar13 != 0) {\u000a      plVar10 = &zero_padding_width;\u000a    }\u000a    *plVar10 = lVar3;\u000a  }\u000aLAB_00402b69:\u000a  pcVar5 = local_40;\u000a  cVar13 = *local_40;\u000a  if (cVar13 == 0) {\u000a    uVar4 = dcgettext(0,"format %s ends in %%",5);\u000a    pcVar6 = quote(fmt);\u000a    error(1,0,uVar4,pcVar6);\u000a    cVar13 = *pcVar5;\u000a  }\u000a  pcVar5 = pcVar5 + -(long)fmt;\u000a  if (cVar13 != '.') goto LAB_00402c3b;\u000a  *piVar2 = 0;\u000a  user_precision = strtol(fmt + 1 + (long)pcVar5,&local_40,10);\u000a  if ((user_precision < 0) || (*piVar2 == 0x22)) {\u000aLAB_00402c03:\u000a    uVar4 = dcgettext(0,"invalid precision in format %s",5);\u000a    pcVar5 = quote(fmt);\u000a    error(1,0,uVar4,pcVar5);\u000a  }\u000a  else {\u000a    ppuVar7 = __ctype_b_loc();\u000a    lVar11 = (long)(fmt + 1)[(long)pcVar5];\u000a    if ((lVar11 == 0x2b) || (((*ppuVar7)[lVar11] & 1) != 0)) goto LAB_00402c03;\u000a  }\u000a  pcVar5 = local_40 + -(long)fmt;\u000aLAB_00402c3b:\u000a  if (fmt[(long)pcVar5] != 'f') {\u000a    uVar4 = dcgettext(0,"invalid format %s, directive must be %%[0][\u005c'][-][N][.][N]f",5);\u000a    pcVar6 = quote(fmt);\u000a    error(1,0,uVar4,pcVar6);\u000a  }\u000a  pcVar5 = pcVar5 + 1;\u000a  pcVar6 = pcVar5;\u000a  do {\u000a    if (fmt[(long)pcVar6] == '%') {\u000a      if ((fmt + 1)[(long)pcVar6] != '%') {\u000a        uVar4 = dcgettext(0,"format %s has too many %% directives",5);\u000a        pcVar8 = quote(fmt);\u000a        error(1,0,uVar4,pcVar8);\u000a      }\u000a    }\u000a    else {\u000a      if (fmt[(long)pcVar6] == 0) {\u000a        if (n != 0) {\u000a          format_str_prefix = xstrndup(fmt,n);\u000a        }\u000a        if (fmt[(long)pcVar5] != 0) {\u000a          format_str_suffix = xstrdup(pcVar5 + (long)fmt);\u000a        }\u000a        if (dev_debug == 1) {\u000a          local_38 = stderr;\u000a          pcVar5 = quote_n((char *)0x0);\u000a          lVar11 = padding_width;\u000a          puVar12 = &DAT_00409fdc;\u000a          if (grouping != 0) {\u000a            puVar12 = &DAT_00409fd8;\u000a          }\u000a          pcVar6 = "Right";\u000a          if (padding_alignment != 0) {\u000a            pcVar6 = "Left";\u000a          }\u000a          pcVar8 = quote_n((char *)0x1);\u000a          uVar4 = 0x402da0;\u000a          pcVar9 = quote_n((char *)0x2);\u000a          __fprintf_chk(local_38,1,\u000a                                                \u000a                        "format String:\u005cn  input: %s\u005cn  grouping: %s\u005cn  padding width: %ld\u005cn  alignment: %s\u005cn  prefix: %s\u005cn  suffix: %s\u005cn"\u000a                        ,pcVar5,puVar12,lVar11,pcVar6,pcVar8,pcVar9,uVar4);\u000a        }\u000a        return;\u000a      }\u000a    }\u000a    pcVar6 = pcVar6 + (ulong)(fmt[(long)pcVar6] == '%') + 1;\u000a  } while( true );\u000a}\u000a\u000a
p465
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13,RDI\nMOV qword ptr [RSP + 0x8],0x0\nXOR R14D,R14D\nXOR EBX,EBX\nJMP 0x004029f3\nINC R14\nXOR EAX,EAX\nCMP byte ptr [R13 + RBX*0x1],0x25\nSETZ AL\nLEA RBX,[RAX + RBX*0x1 + 0x1]\nMOVZX EAX,byte ptr [R13 + RBX*0x1]\nTEST AL,AL\nJZ 0x00402a10\nCMP AL,0x25\nJNZ 0x004029e0\nCMP byte ptr [R13 + RBX*0x1 + 0x1],0x25\nJZ 0x004029e0\nJMP 0x00402a42\nXOR EDI,EDI\nMOV ESI,0x409e71\nMOV EDX,0x5\nCALL 0x004016d0\nMOV R15,RAX\nMOV RDI,R13\nCALL 0x004068c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00401920\nJMP 0x004029e0\nINC RBX\nXOR EBP,EBP\nJMP 0x00402a5a\nMOV byte ptr [0x0060e344],0x1\nINC RBX\nLEA RDI,[R13 + RBX*0x1]\nMOV ESI,0x409e8f\nCALL 0x00401790\nADD RBX,RAX\nMOVZX ECX,byte ptr [R13 + RBX*0x1]\nCMP CL,0x27\nJZ 0x00402a50\nCMP CL,0x30\nJZ 0x00402a83\nTEST RAX,RAX\nJNZ 0x00402a5a\nJMP 0x00402a8b\nINC RBX\nMOV BPL,0x1\nJMP 0x00402a5a\nCALL 0x00401610\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nADD RBX,R13\nLEA RSI,[RSP + 0x8]\nMOV EDX,0xa\nMOV RDI,RBX\nCALL 0x00401820\nMOV R12,RAX\nCMP dword ptr [R15],0x22\nJNZ 0x00402af0\nXOR EDI,EDI\nMOV ESI,0x409e91\nMOV EDX,0x5\nCALL 0x004016d0\nMOV dword ptr [RSP + 0x10],EBP\nMOV RBP,RAX\nMOV RDI,R13\nCALL 0x004068c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nMOV EBP,dword ptr [RSP + 0x10]\nCALL 0x00401920\nTEST R12,R12\nJZ 0x00402b69\nCMP qword ptr [RSP + 0x8],RBX\nJZ 0x00402b69\nCMP byte ptr [0x0060e360],0x1\nJNZ 0x00402b3d\nMOV RAX,qword ptr [0x0060e348]\nTEST RAX,RAX\nJZ 0x00402b3d\nTEST BPL,BPL\nJZ 0x00402b1b\nTEST R12,R12\nJG 0x00402b42\nXOR EDI,EDI\nMOV ESI,0x409eb4\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401920\nTEST R12,R12\nJS 0x00402b58\nTEST BPL,BPL\nMOV EAX,0x60e388\nMOV ECX,0x60e348\nCMOVNZ RCX,RAX\nMOV qword ptr [RCX],R12\nJMP 0x00402b69\nMOV byte ptr [0x0060e350],0x1\nNEG R12\nMOV qword ptr [0x0060e348],R12\nMOV R12,qword ptr [RSP + 0x8]\nMOV AL,byte ptr [R12]\nTEST AL,AL\nJNZ 0x00402baa\nXOR EDI,EDI\nMOV ESI,0x409eda\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RBX,RAX\nMOV RDI,R13\nCALL 0x004068c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401920\nMOV AL,byte ptr [R12]\nSUB R12,R13\nCMP AL,0x2e\nJNZ 0x00402c3b\nMOV dword ptr [R15],0x0\nLEA RBX,[R13 + R12*0x1 + 0x1]\nLEA RSI,[RSP + 0x8]\nMOV EDX,0xa\nMOV RDI,RBX\nCALL 0x00401820\nMOV qword ptr [0x0060e260],RAX\nTEST RAX,RAX\nJS 0x00402c03\nCMP dword ptr [R15],0x22\nJZ 0x00402c03\nCALL 0x004019f0\nMOVSX RCX,byte ptr [RBX]\nCMP RCX,0x2b\nJZ 0x00402c03\nMOV RAX,qword ptr [RAX]\nMOVZX EAX,word ptr [RAX + RCX*0x2]\nAND EAX,0x1\nTEST AX,AX\nJZ 0x00402c33\nXOR EDI,EDI\nMOV ESI,0x409eef\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RBX,RAX\nMOV RDI,R13\nCALL 0x004068c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401920\nMOV R12,qword ptr [RSP + 0x8]\nSUB R12,R13\nCMP byte ptr [R13 + R12*0x1],0x66\nJZ 0x00402c73\nXOR EDI,EDI\nMOV ESI,0x409f0e\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RBX,RAX\nMOV RDI,R13\nCALL 0x004068c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401920\nINC R12\nMOV RBP,R12\nJMP 0x00402c90\nXOR EAX,EAX\nCMP byte ptr [R13 + RBP*0x1],0x25\nSETZ AL\nLEA RBP,[RAX + RBP*0x1 + 0x1]\nMOVZX EAX,byte ptr [R13 + RBP*0x1]\nCMP AL,0x25\nJZ 0x00402ca0\nTEST AL,AL\nJNZ 0x00402c80\nJMP 0x00402cda\nCMP byte ptr [R13 + RBP*0x1 + 0x1],0x25\nJZ 0x00402c80\nXOR EDI,EDI\nMOV ESI,0x409f49\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RBX,RAX\nMOV RDI,R13\nCALL 0x004068c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401920\nJMP 0x00402c80\nTEST R14,R14\nJZ 0x00402cf1\nMOV RDI,R13\nMOV RSI,R14\nCALL 0x004073b0\nMOV qword ptr [0x0060e390],RAX\nCMP byte ptr [R13 + R12*0x1],0x0\nJZ 0x00402d0b\nADD R12,R13\nMOV RDI,R12\nCALL 0x00407360\nMOV qword ptr [0x0060e398],RAX\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x00402dd2\nMOV RAX,qword ptr [0x0060e320]\nMOV qword ptr [RSP + 0x10],RAX\nXOR EDI,EDI\nMOV RSI,R13\nCALL 0x004068b0\nMOV R15,RAX\nMOV AL,byte ptr [0x0060e344]\nMOV ECX,0x409fd8\nMOV EBX,0x409fdc\nTEST AL,AL\nCMOVNZ RBX,RCX\nMOV R12,qword ptr [0x0060e348]\nMOV AL,byte ptr [0x0060e350]\nMOV ECX,0x409fdf\nMOV R14D,0x409fe4\nTEST AL,AL\nCMOVNZ R14,RCX\nMOV RSI,qword ptr [0x0060e390]\nTEST RSI,RSI\nMOV EBP,0x40b009\nCMOVZ RSI,RBP\nMOV EDI,0x1\nCALL 0x004068b0\nMOV R13,RAX\nMOV RAX,qword ptr [0x0060e398]\nTEST RAX,RAX\nCMOVNZ RBP,RAX\nMOV EDI,0x2\nMOV RSI,RBP\nCALL 0x004068b0\nMOV RBP,RAX\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EDX,0x409f6e\nMOV EAX,0x0\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RCX,R15\nMOV R8,RBX\nMOV R9,R12\nPUSH RBP\nPUSH R13\nPUSH R14\nCALL 0x004019a0\nADD RSP,0x20\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p466
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 fd\n48 c7 44 24 08 00 00 00 00\n45 31 f6\n31 db\neb 22\n49 ff c6\n31 c0\n41 80 7c 1d 00 25\n0f 94 c0\n48 8d 5c 18 01\n41 0f b6 44 1d 00\n84 c0\n74 13\n3c 25\n75 df\n41 80 7c 1d 01 25\n74 d7\neb 37\n31 ff\nbe 71 9e 40 00\nba 05 00 00 00\ne8 af ec ff ff\n49 89 c7\n4c 89 ef\ne8 94 3e 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 fa\ne8 e0 ee ff ff\neb 9e\n48 ff c3\n31 ed\neb 11\nc6 05 ed b8 20 00 01\n48 ff c3\n49 8d 7c 1d 00\nbe 8f 9e 40 00\ne8 27 ed ff ff\n48 01 c3\n41 0f b6 4c 1d 00\n80 f9 27\n74 d9\n80 f9 30\n74 07\n48 85 c0\n75 d9\neb 08\n48 ff c3\n40 b5 01\neb cf\ne8 80 eb ff ff\n49 89 c7\n41 c7 07 00 00 00 00\n4c 01 eb\n48 8d 74 24 08\nba 0a 00 00 00\n48 89 df\ne8 71 ed ff ff\n49 89 c4\n41 83 3f 22\n75 38\n31 ff\nbe 91 9e 40 00\nba 05 00 00 00\ne8 07 ec ff ff\n89 6c 24 10\n48 89 c5\n4c 89 ef\ne8 e8 3d 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ea\n8b 6c 24 10\ne8 30 ee ff ff\n4d 85 e4\n74 74\n48 39 5c 24 08\n74 6d\n80 3d 5d b8 20 00 01\n75 38\n48 8b 05 3c b8 20 00\n48 85 c0\n74 2c\n40 84 ed\n74 05\n4d 85 e4\n7f 27\n31 ff\nbe b4 9e 40 00\nba 05 00 00 00\ne8 a4 eb ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 e3 ed ff ff\n4d 85 e4\n78 16\n40 84 ed\nb8 88 e3 60 00\nb9 48 e3 60 00\n48 0f 45 c8\n4c 89 21\neb 11\nc6 05 f1 b7 20 00 01\n49 f7 dc\n4c 89 25 df b7 20 00\n4c 8b 64 24 08\n41 8a 04 24\n84 c0\n75 34\n31 ff\nbe da 9e 40 00\nba 05 00 00 00\ne8 49 eb ff ff\n48 89 c3\n4c 89 ef\ne8 2e 3d 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 7a ed ff ff\n41 8a 04 24\n4d 29 ec\n3c 2e\n0f 85 86 00 00 00\n41 c7 07 00 00 00 00\n4b 8d 5c 25 01\n48 8d 74 24 08\nba 0a 00 00 00\n48 89 df\ne8 4d ec ff ff\n48 89 05 86 b6 20 00\n48 85 c0\n78 24\n41 83 3f 22\n74 1e\ne8 06 ee ff ff\n48 0f be 0b\n48 83 f9 2b\n74 0f\n48 8b 00\n0f b7 04 48\n83 e0 01\n66 85 c0\n74 30\n31 ff\nbe ef 9e 40 00\nba 05 00 00 00\ne8 bc ea ff ff\n48 89 c3\n4c 89 ef\ne8 a1 3c 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 ed ec ff ff\n4c 8b 64 24 08\n4d 29 ec\n43 80 7c 25 00 66\n74 30\n31 ff\nbe 0e 9f 40 00\nba 05 00 00 00\ne8 7c ea ff ff\n48 89 c3\n4c 89 ef\ne8 61 3c 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 ad ec ff ff\n49 ff c4\n4c 89 e5\neb 15\n31 c0\n41 80 7c 2d 00 25\n0f 94 c0\n48 8d 6c 28 01\n41 0f b6 44 2d 00\n3c 25\n74 06\n84 c0\n75 e2\neb 3a\n41 80 7c 2d 01 25\n74 d8\n31 ff\nbe 49 9f 40 00\nba 05 00 00 00\ne8 17 ea ff ff\n48 89 c3\n4c 89 ef\ne8 fc 3b 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 48 ec ff ff\neb a6\n4d 85 f6\n74 12\n4c 89 ef\n4c 89 f6\ne8 c6 46 00 00\n48 89 05 9f b6 20 00\n43 80 7c 25 00 00\n74 12\n4d 01 ec\n4c 89 e7\ne8 5c 46 00 00\n48 89 05 8d b6 20 00\n80 3d 4f b6 20 00 01\n0f 85 ba 00 00 00\n48 8b 05 01 b6 20 00\n48 89 44 24 10\n31 ff\n4c 89 ee\ne8 82 3b 00 00\n49 89 c7\n8a 05 0d b6 20 00\nb9 d8 9f 40 00\nbb dc 9f 40 00\n84 c0\n48 0f 45 d9\n4c 8b 25 fa b5 20 00\n8a 05 fc b5 20 00\nb9 df 9f 40 00\n41 be e4 9f 40 00\n84 c0\n4c 0f 45 f1\n48 8b 35 24 b6 20 00\n48 85 f6\nbd 09 b0 40 00\n48 0f 44 f5\nbf 01 00 00 00\ne8 2e 3b 00 00\n49 89 c5\n48 8b 05 0c b6 20 00\n48 85 c0\n48 0f 45 e8\nbf 02 00 00 00\n48 89 ee\ne8 10 3b 00 00\n48 89 c5\n48 83 ec 08\nbe 01 00 00 00\nba 6e 9f 40 00\nb8 00 00 00 00\n48 8b 7c 24 18\n4c 89 f9\n49 89 d8\n4d 89 e1\n55\n41 55\n41 56\ne8 d2 eb ff ff\n48 83 c4 20\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p467
S'.text:00000000004029b0\n.text:00000000004029b1\n.text:00000000004029b3\n.text:00000000004029b5\n.text:00000000004029b7\n.text:00000000004029b9\n.text:00000000004029ba\n.text:00000000004029be\n.text:00000000004029c1\n.text:00000000004029ca\n.text:00000000004029cd\n.text:00000000004029cf\n.text:00000000004029e0\n.text:00000000004029e3\n.text:00000000004029e5\n.text:00000000004029eb\n.text:00000000004029ee\n.text:00000000004029f3\n.text:00000000004029f9\n.text:00000000004029fb\n.text:00000000004029fd\n.text:00000000004029ff\n.text:0000000000402a01\n.text:0000000000402a07\n.text:0000000000402a09\n.text:0000000000402a10\n.text:0000000000402a12\n.text:0000000000402a17\n.text:0000000000402a1c\n.text:0000000000402a21\n.text:0000000000402a24\n.text:0000000000402a27\n.text:0000000000402a2c\n.text:0000000000402a2f\n.text:0000000000402a34\n.text:0000000000402a36\n.text:0000000000402a38\n.text:0000000000402a3b\n.text:0000000000402a40\n.text:0000000000402a42\n.text:0000000000402a45\n.text:0000000000402a47\n.text:0000000000402a50\n.text:0000000000402a57\n.text:0000000000402a5a\n.text:0000000000402a5f\n.text:0000000000402a64\n.text:0000000000402a69\n.text:0000000000402a6c\n.text:0000000000402a72\n.text:0000000000402a75\n.text:0000000000402a77\n.text:0000000000402a7a\n.text:0000000000402a7c\n.text:0000000000402a7f\n.text:0000000000402a81\n.text:0000000000402a83\n.text:0000000000402a86\n.text:0000000000402a89\n.text:0000000000402a8b\n.text:0000000000402a90\n.text:0000000000402a93\n.text:0000000000402a9a\n.text:0000000000402a9d\n.text:0000000000402aa2\n.text:0000000000402aa7\n.text:0000000000402aaa\n.text:0000000000402aaf\n.text:0000000000402ab2\n.text:0000000000402ab6\n.text:0000000000402ab8\n.text:0000000000402aba\n.text:0000000000402abf\n.text:0000000000402ac4\n.text:0000000000402ac9\n.text:0000000000402acd\n.text:0000000000402ad0\n.text:0000000000402ad3\n.text:0000000000402ad8\n.text:0000000000402adb\n.text:0000000000402ae0\n.text:0000000000402ae2\n.text:0000000000402ae4\n.text:0000000000402ae7\n.text:0000000000402aeb\n.text:0000000000402af0\n.text:0000000000402af3\n.text:0000000000402af5\n.text:0000000000402afa\n.text:0000000000402afc\n.text:0000000000402b03\n.text:0000000000402b05\n.text:0000000000402b0c\n.text:0000000000402b0f\n.text:0000000000402b11\n.text:0000000000402b14\n.text:0000000000402b16\n.text:0000000000402b19\n.text:0000000000402b1b\n.text:0000000000402b1d\n.text:0000000000402b22\n.text:0000000000402b27\n.text:0000000000402b2c\n.text:0000000000402b2f\n.text:0000000000402b31\n.text:0000000000402b33\n.text:0000000000402b35\n.text:0000000000402b38\n.text:0000000000402b3d\n.text:0000000000402b40\n.text:0000000000402b42\n.text:0000000000402b45\n.text:0000000000402b4a\n.text:0000000000402b4f\n.text:0000000000402b53\n.text:0000000000402b56\n.text:0000000000402b58\n.text:0000000000402b5f\n.text:0000000000402b62\n.text:0000000000402b69\n.text:0000000000402b6e\n.text:0000000000402b72\n.text:0000000000402b74\n.text:0000000000402b76\n.text:0000000000402b78\n.text:0000000000402b7d\n.text:0000000000402b82\n.text:0000000000402b87\n.text:0000000000402b8a\n.text:0000000000402b8d\n.text:0000000000402b92\n.text:0000000000402b95\n.text:0000000000402b9a\n.text:0000000000402b9c\n.text:0000000000402b9e\n.text:0000000000402ba1\n.text:0000000000402ba6\n.text:0000000000402baa\n.text:0000000000402bad\n.text:0000000000402baf\n.text:0000000000402bb5\n.text:0000000000402bbc\n.text:0000000000402bc1\n.text:0000000000402bc6\n.text:0000000000402bcb\n.text:0000000000402bce\n.text:0000000000402bd3\n.text:0000000000402bda\n.text:0000000000402bdd\n.text:0000000000402bdf\n.text:0000000000402be3\n.text:0000000000402be5\n.text:0000000000402bea\n.text:0000000000402bee\n.text:0000000000402bf2\n.text:0000000000402bf4\n.text:0000000000402bf7\n.text:0000000000402bfb\n.text:0000000000402bfe\n.text:0000000000402c01\n.text:0000000000402c03\n.text:0000000000402c05\n.text:0000000000402c0a\n.text:0000000000402c0f\n.text:0000000000402c14\n.text:0000000000402c17\n.text:0000000000402c1a\n.text:0000000000402c1f\n.text:0000000000402c22\n.text:0000000000402c27\n.text:0000000000402c29\n.text:0000000000402c2b\n.text:0000000000402c2e\n.text:0000000000402c33\n.text:0000000000402c38\n.text:0000000000402c3b\n.text:0000000000402c41\n.text:0000000000402c43\n.text:0000000000402c45\n.text:0000000000402c4a\n.text:0000000000402c4f\n.text:0000000000402c54\n.text:0000000000402c57\n.text:0000000000402c5a\n.text:0000000000402c5f\n.text:0000000000402c62\n.text:0000000000402c67\n.text:0000000000402c69\n.text:0000000000402c6b\n.text:0000000000402c6e\n.text:0000000000402c73\n.text:0000000000402c76\n.text:0000000000402c79\n.text:0000000000402c80\n.text:0000000000402c82\n.text:0000000000402c88\n.text:0000000000402c8b\n.text:0000000000402c90\n.text:0000000000402c96\n.text:0000000000402c98\n.text:0000000000402c9a\n.text:0000000000402c9c\n.text:0000000000402c9e\n.text:0000000000402ca0\n.text:0000000000402ca6\n.text:0000000000402ca8\n.text:0000000000402caa\n.text:0000000000402caf\n.text:0000000000402cb4\n.text:0000000000402cb9\n.text:0000000000402cbc\n.text:0000000000402cbf\n.text:0000000000402cc4\n.text:0000000000402cc7\n.text:0000000000402ccc\n.text:0000000000402cce\n.text:0000000000402cd0\n.text:0000000000402cd3\n.text:0000000000402cd8\n.text:0000000000402cda\n.text:0000000000402cdd\n.text:0000000000402cdf\n.text:0000000000402ce2\n.text:0000000000402ce5\n.text:0000000000402cea\n.text:0000000000402cf1\n.text:0000000000402cf7\n.text:0000000000402cf9\n.text:0000000000402cfc\n.text:0000000000402cff\n.text:0000000000402d04\n.text:0000000000402d0b\n.text:0000000000402d12\n.text:0000000000402d18\n.text:0000000000402d1f\n.text:0000000000402d24\n.text:0000000000402d26\n.text:0000000000402d29\n.text:0000000000402d2e\n.text:0000000000402d31\n.text:0000000000402d37\n.text:0000000000402d3c\n.text:0000000000402d41\n.text:0000000000402d43\n.text:0000000000402d47\n.text:0000000000402d4e\n.text:0000000000402d54\n.text:0000000000402d59\n.text:0000000000402d5f\n.text:0000000000402d61\n.text:0000000000402d65\n.text:0000000000402d6c\n.text:0000000000402d6f\n.text:0000000000402d74\n.text:0000000000402d78\n.text:0000000000402d7d\n.text:0000000000402d82\n.text:0000000000402d85\n.text:0000000000402d8c\n.text:0000000000402d8f\n.text:0000000000402d93\n.text:0000000000402d98\n.text:0000000000402d9b\n.text:0000000000402da0\n.text:0000000000402da3\n.text:0000000000402da7\n.text:0000000000402dac\n.text:0000000000402db1\n.text:0000000000402db6\n.text:0000000000402dbb\n.text:0000000000402dbe\n.text:0000000000402dc1\n.text:0000000000402dc4\n.text:0000000000402dc5\n.text:0000000000402dc7\n.text:0000000000402dc9\n.text:0000000000402dce\n.text:0000000000402dd2\n.text:0000000000402dd6\n.text:0000000000402dd7\n.text:0000000000402dd9\n.text:0000000000402ddb\n.text:0000000000402ddd\n.text:0000000000402ddf\n.text:0000000000402de0\n'
p468
tp469
sS'__snprintf_chk'
p470
(S'\n__stdcall __snprintf_chk()\n'
p471
V\u000avoid __snprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___snprintf_chk_0060e020)();\u000a  return;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x0060e020]\n'
p473
S'ff 25 4a ca 20 00\n'
p474
S'.plt:00000000004015d0\n'
p475
tp476
sS'close_stdout'
p477
(S'\n__stdcall close_stdout()\n'
p478
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00404eb7;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,&DAT_0040a645,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,0x40a083,arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00404eb7:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p479
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060e2e8]\nCALL 0x004079f0\nTEST EAX,EAX\nJZ 0x00404eb7\nCMP byte ptr [0x0060e3c8],0x0\nJZ 0x00404ecc\nCALL 0x00401610\nCMP dword ptr [RAX],0x20\nJNZ 0x00404ecc\nMOV RDI,qword ptr [0x0060e320]\nCALL 0x004079f0\nTEST EAX,EAX\nJNZ 0x00404f11\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40a938\nMOV EDX,0x5\nCALL 0x004016d0\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060e3c0]\nCALL 0x00401610\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00404f1c\nXOR EDI,EDI\nMOV EDX,0x40a645\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401920\nMOV EDI,dword ptr [0x0060e278]\nCALL 0x00401630\nMOV EDI,dword ptr [0x0060e278]\nCALL 0x00401630\nMOV RDI,RBX\nCALL 0x00406760\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40a083\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401920\nMOV EDI,dword ptr [0x0060e278]\nCALL 0x00401630\n'
p480
S'55\n41 56\n53\n48 8b 3d 4d 94 20 00\ne8 50 2b 00 00\n85 c0\n74 13\n80 3d 1d 95 20 00 00\n74 1f\ne8 5e c7 ff ff\n83 38 20\n75 15\n48 8b 3d 62 94 20 00\ne8 2d 2b 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 38 a9 40 00\nba 05 00 00 00\ne8 f3 c7 ff ff\n49 89 c6\n48 8b 1d d9 94 20 00\ne8 24 c7 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 45 a6 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 1a ca ff ff\n8b 3d 6c 93 20 00\ne8 1f c7 ff ff\n8b 3d 61 93 20 00\ne8 14 c7 ff ff\n48 89 df\ne8 3c 18 00 00\n48 89 c1\n31 ff\nba 83 a0 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 e6 c9 ff ff\n8b 3d 38 93 20 00\ne8 eb c6 ff ff\n'
p481
S'.text:0000000000404e90\n.text:0000000000404e91\n.text:0000000000404e93\n.text:0000000000404e94\n.text:0000000000404e9b\n.text:0000000000404ea0\n.text:0000000000404ea2\n.text:0000000000404ea4\n.text:0000000000404eab\n.text:0000000000404ead\n.text:0000000000404eb2\n.text:0000000000404eb5\n.text:0000000000404eb7\n.text:0000000000404ebe\n.text:0000000000404ec3\n.text:0000000000404ec5\n.text:0000000000404ec7\n.text:0000000000404ec8\n.text:0000000000404eca\n.text:0000000000404ecb\n.text:0000000000404ecc\n.text:0000000000404ece\n.text:0000000000404ed3\n.text:0000000000404ed8\n.text:0000000000404edd\n.text:0000000000404ee0\n.text:0000000000404ee7\n.text:0000000000404eec\n.text:0000000000404eef\n.text:0000000000404ef1\n.text:0000000000404ef3\n.text:0000000000404ef5\n.text:0000000000404efa\n.text:0000000000404efc\n.text:0000000000404efe\n.text:0000000000404f01\n.text:0000000000404f06\n.text:0000000000404f0c\n.text:0000000000404f11\n.text:0000000000404f17\n.text:0000000000404f1c\n.text:0000000000404f1f\n.text:0000000000404f24\n.text:0000000000404f27\n.text:0000000000404f29\n.text:0000000000404f2e\n.text:0000000000404f30\n.text:0000000000404f32\n.text:0000000000404f35\n.text:0000000000404f3a\n.text:0000000000404f40\n'
p482
tp483
sS'version_etc_ar'
p484
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p485
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p486
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00407040\nJMP 0x00406cd0\n'
p487
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p488
S'.text:0000000000407030\n.text:0000000000407037\n.text:0000000000407040\n.text:0000000000407046\n.text:000000000040704a\n.text:000000000040704c\n'
p489
tp490
sS'strtoumax'
p491
(S'\n__stdcall strtoumax(char * __nptr, char * * __endptr, int __base)\n'
p492
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000auintmax_t strtoumax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoumax_0060e1e0)();\u000a  return uVar1;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x0060e1e0]\n'
p494
S'ff 25 8a c8 20 00\n'
p495
S'.plt:0000000000401950\n'
p496
tp497
sS'c_isxdigit'
p498
(S'\n__stdcall c_isxdigit()\n'
p499
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p500
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00404e4b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p501
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p502
S'.text:0000000000404e30\n.text:0000000000404e33\n.text:0000000000404e36\n.text:0000000000404e38\n.text:0000000000404e42\n.text:0000000000404e44\n.text:0000000000404e47\n.text:0000000000404e4a\n.text:0000000000404e4b\n.text:0000000000404e4d\n'
p503
tp504
sS'__libc_csu_fini'
p505
(S'\n__stdcall __libc_csu_fini()\n'
p506
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p507
S'RET\n'
p508
S'f3 c3\n'
p509
S'.text:0000000000407f40\n'
p510
tp511
sS'add_range_pair'
p512
(S'\n__stdcall add_range_pair(size_t lo, size_t hi)\n'
p513
V\u000avoid add_range_pair(size_t lo,size_t hi)\u000a\u000a{\u000a  field_range_pair *pfVar1;\u000a  \u000a  if (n_frp == n_frp_allocated) {\u000a    frp = (field_range_pair *)x2nrealloc(frp,&n_frp_allocated,0x10);\u000a  }\u000a  pfVar1 = frp;\u000a  frp[n_frp].lo = lo;\u000a  pfVar1[n_frp].hi = hi;\u000a  n_frp = n_frp + 1;\u000a  return;\u000a}\u000a\u000a
p514
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [0x0060e530]\nCMP RAX,qword ptr [0x0060e3b8]\nJNZ 0x00404877\nMOV RDI,qword ptr [0x0060e528]\nMOV ESI,0x60e3b8\nMOV EDX,0x10\nCALL 0x00407260\nMOV qword ptr [0x0060e528],RAX\nMOV RAX,qword ptr [0x0060e528]\nMOV RCX,qword ptr [0x0060e530]\nSHL RCX,0x4\nMOV qword ptr [RAX + RCX*0x1],RBX\nMOV RCX,qword ptr [0x0060e530]\nMOV RDX,RCX\nSHL RDX,0x4\nMOV qword ptr [RAX + RDX*0x1 + 0x8],R14\nINC RCX\nMOV qword ptr [0x0060e530],RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p515
S'41 56\n53\n50\n49 89 f6\n48 89 fb\n48 8b 05 df 9c 20 00\n48 3b 05 60 9b 20 00\n75 1d\n48 8b 3d c7 9c 20 00\nbe b8 e3 60 00\nba 10 00 00 00\ne8 f0 29 00 00\n48 89 05 b1 9c 20 00\n48 8b 05 aa 9c 20 00\n48 8b 0d ab 9c 20 00\n48 c1 e1 04\n48 89 1c 08\n48 8b 0d 9c 9c 20 00\n48 89 ca\n48 c1 e2 04\n4c 89 74 10 08\n48 ff c1\n48 89 0d 86 9c 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n'
p516
S'.text:0000000000404840\n.text:0000000000404842\n.text:0000000000404843\n.text:0000000000404844\n.text:0000000000404847\n.text:000000000040484a\n.text:0000000000404851\n.text:0000000000404858\n.text:000000000040485a\n.text:0000000000404861\n.text:0000000000404866\n.text:000000000040486b\n.text:0000000000404870\n.text:0000000000404877\n.text:000000000040487e\n.text:0000000000404885\n.text:0000000000404889\n.text:000000000040488d\n.text:0000000000404894\n.text:0000000000404897\n.text:000000000040489b\n.text:00000000004048a0\n.text:00000000004048a3\n.text:00000000004048aa\n.text:00000000004048ae\n.text:00000000004048af\n.text:00000000004048b1\n'
p517
tp518
sS'abort'
p519
(S'\n__stdcall abort()\n'
p520
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060e038)();\u000a  return;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x0060e038]\n'
p522
S'ff 25 32 ca 20 00\n'
p523
S'.plt:0000000000401600\n'
p524
tp525
sS'version_etc'
p526
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p527
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p528
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00407102\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00407060\nADD RSP,0xd8\nRET\n'
p529
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p530
S'.text:00000000004070c0\n.text:00000000004070c7\n.text:00000000004070c9\n.text:00000000004070cb\n.text:00000000004070d0\n.text:00000000004070d5\n.text:00000000004070da\n.text:00000000004070e2\n.text:00000000004070ea\n.text:00000000004070f2\n.text:00000000004070fa\n.text:0000000000407102\n.text:0000000000407107\n.text:000000000040710c\n.text:0000000000407111\n.text:0000000000407116\n.text:000000000040711e\n.text:0000000000407123\n.text:000000000040712b\n.text:0000000000407132\n.text:0000000000407135\n.text:000000000040713a\n.text:0000000000407141\n'
p531
tp532
sS'lseek'
p533
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p534
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060e0d8)();\u000a  return _Var1;\u000a}\u000a\u000a
p535
S'JMP qword ptr [0x0060e0d8]\n'
p536
S'ff 25 92 c9 20 00\n'
p537
S'.plt:0000000000401740\n'
p538
tp539
sS'getdelim'
p540
(S'\n__stdcall getdelim(char * * __lineptr, size_t * __n, int __delimiter, FILE * __stream)\n'
p541
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__ssize_t getdelim(char **__lineptr,size_t *__n,int __delimiter,FILE *__stream)\u000a\u000a{\u000a  __ssize_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getdelim_0060e228)();\u000a  return _Var1;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x0060e228]\n'
p543
S'ff 25 42 c8 20 00\n'
p544
S'.plt:00000000004019e0\n'
p545
tp546
sS'wcwidth'
p547
(S'\n__stdcall wcwidth(wchar_t __c)\n'
p548
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint wcwidth(wchar_t __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_wcwidth_0060e168)();\u000a  return iVar1;\u000a}\u000a\u000a
p549
S'JMP qword ptr [0x0060e168]\n'
p550
S'ff 25 02 c9 20 00\n'
p551
S'.plt:0000000000401860\n'
p552
tp553
sS'quotearg_n_mem'
p554
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p555
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p556
S'MOV ECX,0x60e3e0\nJMP 0x004063d0\n'
p557
S'b9 e0 e3 60 00\ne9 36 fe ff ff\n'
p558
S'.text:0000000000406590\n.text:0000000000406595\n'
p559
tp560
sS'__printf_chk'
p561
(S'\n__stdcall __printf_chk()\n'
p562
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060e1b8)();\u000a  return;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x0060e1b8]\n'
p564
S'ff 25 b2 c8 20 00\n'
p565
S'.plt:0000000000401900\n'
p566
tp567
sS'emit_ancillary_info'
p568
(S'\n__stdcall emit_ancillary_info()\n'
p569
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x004088b0;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("numfmt",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "numfmt";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,"numfmt",uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/","numfmt");\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x40b009;\u000a  if (__s2 == "numfmt") {\u000a    uVar3 = 0x409c7a;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p570
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x4088b0\nMOV ESI,0x409c5e\nNOP\nMOV EDI,0x409a06\nCALL 0x004017f0\nTEST EAX,EAX\nJZ 0x00401f9b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401f80\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x409a06\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x409cbd\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x409abc\nMOV ECX,0x409cd4\nXOR EAX,EAX\nCALL 0x00401900\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x004018f0\nTEST RAX,RAX\nJZ 0x00402024\nMOV ESI,0x409cfb\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401620\nTEST EAX,EAX\nJZ 0x00402024\nXOR EDI,EDI\nMOV ESI,0x409cff\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x409a06\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401900\nXOR EDI,EDI\nMOV ESI,0x409d44\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,RAX\nMOV R14D,0x409a06\nMOV EDI,0x1\nMOV EDX,0x409cd4\nMOV ECX,0x409a06\nXOR EAX,EAX\nCALL 0x00401900\nXOR EDI,EDI\nMOV ESI,0x409d63\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x409c7a\nMOV ECX,0x40b009\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401900\n'
p571
S'41 56\n53\n50\nbb b0 88 40 00\nbe 5e 9c 40 00\n66 90\nbf 06 9a 40 00\ne8 66 f8 ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 06 9a 40 00\n48 0f 45 d8\n31 ff\nbe bd 9c 40 00\nba 05 00 00 00\ne8 14 f7 ff ff\n48 89 c6\nbf 01 00 00 00\nba bc 9a 40 00\nb9 d4 9c 40 00\n31 c0\ne8 2b f9 ff ff\nbf 05 00 00 00\n31 f6\ne8 0f f9 ff ff\n48 85 c0\n74 3e\nbe fb 9c 40 00\nba 03 00 00 00\n48 89 c7\ne8 28 f6 ff ff\n85 c0\n74 28\n31 ff\nbe ff 9c 40 00\nba 05 00 00 00\ne8 c3 f6 ff ff\n48 89 c1\nbf 01 00 00 00\nba 06 9a 40 00\n31 c0\n48 89 ce\ne8 dc f8 ff ff\n31 ff\nbe 44 9d 40 00\nba 05 00 00 00\ne8 9b f6 ff ff\n48 89 c6\n41 be 06 9a 40 00\nbf 01 00 00 00\nba d4 9c 40 00\nb9 06 9a 40 00\n31 c0\ne8 ac f8 ff ff\n31 ff\nbe 63 9d 40 00\nba 05 00 00 00\ne8 6b f6 ff ff\n48 89 c2\n4c 39 f3\nb8 7a 9c 40 00\nb9 09 b0 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 6e f8 ff ff\n'
p572
S'.text:0000000000401f70\n.text:0000000000401f72\n.text:0000000000401f73\n.text:0000000000401f74\n.text:0000000000401f79\n.text:0000000000401f7e\n.text:0000000000401f80\n.text:0000000000401f85\n.text:0000000000401f8a\n.text:0000000000401f8c\n.text:0000000000401f8e\n.text:0000000000401f92\n.text:0000000000401f96\n.text:0000000000401f99\n.text:0000000000401f9b\n.text:0000000000401f9f\n.text:0000000000401fa2\n.text:0000000000401fa7\n.text:0000000000401fab\n.text:0000000000401fad\n.text:0000000000401fb2\n.text:0000000000401fb7\n.text:0000000000401fbc\n.text:0000000000401fbf\n.text:0000000000401fc4\n.text:0000000000401fc9\n.text:0000000000401fce\n.text:0000000000401fd0\n.text:0000000000401fd5\n.text:0000000000401fda\n.text:0000000000401fdc\n.text:0000000000401fe1\n.text:0000000000401fe4\n.text:0000000000401fe6\n.text:0000000000401feb\n.text:0000000000401ff0\n.text:0000000000401ff3\n.text:0000000000401ff8\n.text:0000000000401ffa\n.text:0000000000401ffc\n.text:0000000000401ffe\n.text:0000000000402003\n.text:0000000000402008\n.text:000000000040200d\n.text:0000000000402010\n.text:0000000000402015\n.text:000000000040201a\n.text:000000000040201c\n.text:000000000040201f\n.text:0000000000402024\n.text:0000000000402026\n.text:000000000040202b\n.text:0000000000402030\n.text:0000000000402035\n.text:0000000000402038\n.text:000000000040203e\n.text:0000000000402043\n.text:0000000000402048\n.text:000000000040204d\n.text:000000000040204f\n.text:0000000000402054\n.text:0000000000402056\n.text:000000000040205b\n.text:0000000000402060\n.text:0000000000402065\n.text:0000000000402068\n.text:000000000040206b\n.text:0000000000402070\n.text:0000000000402075\n.text:0000000000402079\n.text:000000000040207e\n.text:0000000000402080\n.text:0000000000402083\n.text:0000000000402086\n.text:000000000040208a\n.text:000000000040208b\n.text:000000000040208d\n'
p573
tp574
sS'process_suffixed_number'
p575
(S'\n__stdcall process_suffixed_number(char * text, longdouble * result, size_t * precision, long field)\n'
p576
V\u000aint process_suffixed_number(char *text,longdouble *result,size_t *precision,long field)\u000a\u000a{\u000a  int iVar1;\u000a  simple_strtod_error sVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  ushort **ppuVar5;\u000a  undefined8 uVar6;\u000a  byte bVar7;\u000a  char *__s;\u000a  float10 local_58;\u000a  longdouble *local_48;\u000a  \u000a  __s = suffix;\u000a  local_48 = result;\u000a  if (suffix != (char *)0x0) {\u000a    local_48 = result;\u000a    sVar3 = strlen(text);\u000a    sVar4 = strlen(__s);\u000a    if (sVar4 < sVar3) {\u000a      iVar1 = strcmp(__s,text + (sVar3 - sVar4));\u000a      if (iVar1 == 0) {\u000a        text[sVar3 - sVar4] = 0;\u000a        uVar6 = stderr;\u000a        if (dev_debug == 1) {\u000a          quote(suffix);\u000a          __fprintf_chk(uVar6,1,"trimming suffix %s\u005cn");\u000a        }\u000a      }\u000a      else {\u000a        if (dev_debug == 1) {\u000a          __fprintf_chk(stderr,1,"no valid suffix found\u005cn");\u000a        }\u000a      }\u000a    }\u000a  }\u000a  bVar7 = *text;\u000a  __s = text;\u000a  if (bVar7 != 0) {\u000a    ppuVar5 = __ctype_b_loc();\u000a    __s = text;\u000a    do {\u000a      if ((*(byte *)(*ppuVar5 + (ulong)bVar7) & 1) == 0) break;\u000a      bVar7 = __s[1];\u000a      __s = __s + 1;\u000a    } while (bVar7 != 0);\u000a  }\u000a  if (auto_padding != 0) {\u000a    if ((field < 2) && ((int)text == (int)__s)) {\u000a      padding_width = 0;\u000a    }\u000a    else {\u000a      padding_width = strlen(text);\u000a      setup_padding_buffer(padding_width);\u000a    }\u000a    if (dev_debug == 1) {\u000a      __fprintf_chk(stderr,1,"setting Auto-Padding to %ld characters\u005cn",padding_width);\u000a    }\u000a  }\u000a  local_58 = (float10)0;\u000a  sVar2 = parse_human_number(__s,(longdouble *)&local_58,precision);\u000a  if ((sVar2 == SSE_OK_PRECISION_LOSS) && (debug == 1)) {\u000a    uVar6 = dcgettext(0,"large input value %s: possible precision loss",5);\u000a    __s = quote(__s);\u000a    error(0,0,uVar6,__s);\u000a  }\u000a  if ((from_unit_size != 1) || (to_unit_size != 1)) {\u000a    local_58 = (((float10)from_unit_size +\u000a                (float10)*(float *)(&UNK_00408968 + (ulong)(-1 < (long)from_unit_size) * 4)) *\u000a               local_58) /\u000a               ((float10)to_unit_size +\u000a               (float10)*(float *)(&UNK_00408968 + (ulong)(-1 < (long)to_unit_size) * 4));\u000a  }\u000a  *(float10 *)local_48 = local_58;\u000a  return (int)(uint)((sVar2 | 1) == 1);\u000a}\u000a\u000a
p577
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R12,RCX\nMOV R15,RDX\nMOV qword ptr [RSP + 0x10],RSI\nMOV R13,RDI\nMOV RBX,qword ptr [0x0060e358]\nTEST RBX,RBX\nJZ 0x00403183\nMOV RDI,R13\nCALL 0x004016f0\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x004016f0\nCMP RBP,RAX\nJBE 0x00403183\nADD RBP,R13\nSUB RBP,RAX\nMOV RDI,RBX\nMOV RSI,RBP\nCALL 0x004017f0\nTEST EAX,EAX\nJZ 0x0040314c\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x00403183\nMOV RDI,qword ptr [0x0060e320]\nMOV ESI,0x1\nMOV EDX,0x409ffe\nXOR EAX,EAX\nCALL 0x004019a0\nJMP 0x00403183\nMOV byte ptr [RBP],0x0\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x00403183\nMOV RBX,qword ptr [0x0060e320]\nMOV RDI,qword ptr [0x0060e358]\nCALL 0x004068c0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x409fea\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x004019a0\nMOV BL,byte ptr [R13]\nTEST BL,BL\nMOV R14,R13\nJZ 0x004031b5\nCALL 0x004019f0\nMOV RAX,qword ptr [RAX]\nMOV R14,R13\nNOP dword ptr [RAX]\nMOVZX ECX,BL\nTEST byte ptr [RAX + RCX*0x2],0x1\nJZ 0x004031b5\nMOVZX EBX,byte ptr [R14 + 0x1]\nINC R14\nTEST BL,BL\nJNZ 0x004031a0\nCMP dword ptr [0x0060e37c],0x0\nJZ 0x00403221\nCMP R12,0x1\nJG 0x004031e2\nMOV EAX,R13D\nSUB EAX,R14D\nJNZ 0x004031e2\nMOV qword ptr [0x0060e348],0x0\nCMP byte ptr [0x0060e361],0x1\nJZ 0x00403202\nJMP 0x00403221\nMOV RDI,R13\nCALL 0x004016f0\nMOV qword ptr [0x0060e348],RAX\nMOV RDI,RAX\nCALL 0x00402df0\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x00403221\nMOV RDI,qword ptr [0x0060e320]\nMOV RCX,qword ptr [0x0060e348]\nMOV ESI,0x1\nMOV EDX,0x40a015\nXOR EAX,EAX\nCALL 0x004019a0\nFLDZ\nFSTP tword ptr [RSP]\nMOV RSI,RSP\nMOV RDI,R14\nMOV RDX,R15\nCALL 0x004035d0\nMOV EBP,EAX\nCMP EBP,0x1\nJNZ 0x00403271\nCMP byte ptr [0x0060e360],0x1\nJNZ 0x00403271\nXOR EDI,EDI\nMOV ESI,0x40a03d\nMOV EDX,0x5\nCALL 0x004016d0\nMOV R15,RAX\nMOV RDI,R14\nCALL 0x004068c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00401920\nMOV RCX,qword ptr [0x0060e248]\nCMP RCX,0x1\nMOV RAX,qword ptr [0x0060e250]\nJNZ 0x0040328b\nCMP RAX,0x1\nJZ 0x004032c5\nFLD tword ptr [RSP]\nMOV qword ptr [RSP + 0x18],RCX\nXOR EDX,EDX\nTEST RCX,RCX\nSETNS DL\nFILD qword ptr [RSP + 0x18]\nFADD dword ptr [0x408968 + RDX*0x4]\nFMULP\nMOV qword ptr [RSP + 0x20],RAX\nXOR ECX,ECX\nTEST RAX,RAX\nSETNS CL\nFILD qword ptr [RSP + 0x20]\nFADD dword ptr [0x408968 + RCX*0x4]\nFDIVP\nFSTP tword ptr [RSP]\nFLD tword ptr [RSP]\nMOV RAX,qword ptr [RSP + 0x10]\nFSTP tword ptr [RAX]\nOR EBP,0x1\nXOR EAX,EAX\nCMP EBP,0x1\nSETZ AL\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p578
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cc\n49 89 d7\n48 89 74 24 10\n49 89 fd\n48 8b 1d 65 b2 20 00\n48 85 db\n0f 84 87 00 00 00\n4c 89 ef\ne8 ec e5 ff ff\n48 89 c5\n48 89 df\ne8 e1 e5 ff ff\n48 39 c5\n76 6f\n4c 01 ed\n48 29 c5\n48 89 df\n48 89 ee\ne8 cb e6 ff ff\n85 c0\n74 23\n80 3d 31 b2 20 00 01\n75 51\n48 8b 3d e7 b1 20 00\nbe 01 00 00 00\nba fe 9f 40 00\n31 c0\ne8 56 e8 ff ff\neb 37\nc6 45 00 00\n80 3d 0a b2 20 00 01\n75 2a\n48 8b 1d c0 b1 20 00\n48 8b 3d f1 b1 20 00\ne8 54 37 00 00\n48 89 c1\nbe 01 00 00 00\nba ea 9f 40 00\n31 c0\n48 89 df\ne8 1d e8 ff ff\n41 8a 5d 00\n84 db\n4d 89 ee\n74 27\ne8 5d e8 ff ff\n48 8b 00\n4d 89 ee\n0f 1f 80 00 00 00 00\n0f b6 cb\nf6 04 48 01\n74 0c\n41 0f b6 5e 01\n49 ff c6\n84 db\n75 eb\n83 3d c0 b1 20 00 00\n74 63\n49 83 fc 01\n7f 1e\n44 89 e8\n44 29 f0\n75 16\n48 c7 05 71 b1 20 00 00 00 00 00\n80 3d 83 b1 20 00 01\n74 22\neb 3f\n4c 89 ef\ne8 06 e5 ff ff\n48 89 05 57 b1 20 00\n48 89 c7\ne8 f7 fb ff ff\n80 3d 61 b1 20 00 01\n75 1f\n48 8b 3d 17 b1 20 00\n48 8b 0d 38 b1 20 00\nbe 01 00 00 00\nba 15 a0 40 00\n31 c0\ne8 7f e7 ff ff\nd9 ee\ndb 3c 24\n48 89 e6\n4c 89 f7\n4c 89 fa\ne8 9c 03 00 00\n89 c5\n83 fd 01\n75 36\n80 3d 1e b1 20 00 01\n75 2d\n31 ff\nbe 3d a0 40 00\nba 05 00 00 00\ne8 7b e4 ff ff\n49 89 c7\n4c 89 f7\ne8 60 36 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 fa\ne8 af e6 ff ff\n48 8b 0d d0 af 20 00\n48 83 f9 01\n48 8b 05 cd af 20 00\n75 06\n48 83 f8 01\n74 3a\ndb 2c 24\n48 89 4c 24 18\n31 d2\n48 85 c9\n0f 99 c2\ndf 6c 24 18\nd8 04 95 68 89 40 00\nde c9\n48 89 44 24 20\n31 c9\n48 85 c0\n0f 99 c1\ndf 6c 24 20\nd8 04 8d 68 89 40 00\nde f9\ndb 3c 24\ndb 2c 24\n48 8b 44 24 10\ndb 38\n83 cd 01\n31 c0\n83 fd 01\n0f 94 c0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p579
S'.text:00000000004030d0\n.text:00000000004030d1\n.text:00000000004030d3\n.text:00000000004030d5\n.text:00000000004030d7\n.text:00000000004030d9\n.text:00000000004030da\n.text:00000000004030de\n.text:00000000004030e1\n.text:00000000004030e4\n.text:00000000004030e9\n.text:00000000004030ec\n.text:00000000004030f3\n.text:00000000004030f6\n.text:00000000004030fc\n.text:00000000004030ff\n.text:0000000000403104\n.text:0000000000403107\n.text:000000000040310a\n.text:000000000040310f\n.text:0000000000403112\n.text:0000000000403114\n.text:0000000000403117\n.text:000000000040311a\n.text:000000000040311d\n.text:0000000000403120\n.text:0000000000403125\n.text:0000000000403127\n.text:0000000000403129\n.text:0000000000403130\n.text:0000000000403132\n.text:0000000000403139\n.text:000000000040313e\n.text:0000000000403143\n.text:0000000000403145\n.text:000000000040314a\n.text:000000000040314c\n.text:0000000000403150\n.text:0000000000403157\n.text:0000000000403159\n.text:0000000000403160\n.text:0000000000403167\n.text:000000000040316c\n.text:000000000040316f\n.text:0000000000403174\n.text:0000000000403179\n.text:000000000040317b\n.text:000000000040317e\n.text:0000000000403183\n.text:0000000000403187\n.text:0000000000403189\n.text:000000000040318c\n.text:000000000040318e\n.text:0000000000403193\n.text:0000000000403196\n.text:0000000000403199\n.text:00000000004031a0\n.text:00000000004031a3\n.text:00000000004031a7\n.text:00000000004031a9\n.text:00000000004031ae\n.text:00000000004031b1\n.text:00000000004031b3\n.text:00000000004031b5\n.text:00000000004031bc\n.text:00000000004031be\n.text:00000000004031c2\n.text:00000000004031c4\n.text:00000000004031c7\n.text:00000000004031ca\n.text:00000000004031cc\n.text:00000000004031d7\n.text:00000000004031de\n.text:00000000004031e0\n.text:00000000004031e2\n.text:00000000004031e5\n.text:00000000004031ea\n.text:00000000004031f1\n.text:00000000004031f4\n.text:00000000004031f9\n.text:0000000000403200\n.text:0000000000403202\n.text:0000000000403209\n.text:0000000000403210\n.text:0000000000403215\n.text:000000000040321a\n.text:000000000040321c\n.text:0000000000403221\n.text:0000000000403223\n.text:0000000000403226\n.text:0000000000403229\n.text:000000000040322c\n.text:000000000040322f\n.text:0000000000403234\n.text:0000000000403236\n.text:0000000000403239\n.text:000000000040323b\n.text:0000000000403242\n.text:0000000000403244\n.text:0000000000403246\n.text:000000000040324b\n.text:0000000000403250\n.text:0000000000403255\n.text:0000000000403258\n.text:000000000040325b\n.text:0000000000403260\n.text:0000000000403263\n.text:0000000000403265\n.text:0000000000403267\n.text:0000000000403269\n.text:000000000040326c\n.text:0000000000403271\n.text:0000000000403278\n.text:000000000040327c\n.text:0000000000403283\n.text:0000000000403285\n.text:0000000000403289\n.text:000000000040328b\n.text:000000000040328e\n.text:0000000000403293\n.text:0000000000403295\n.text:0000000000403298\n.text:000000000040329b\n.text:000000000040329f\n.text:00000000004032a6\n.text:00000000004032a8\n.text:00000000004032ad\n.text:00000000004032af\n.text:00000000004032b2\n.text:00000000004032b5\n.text:00000000004032b9\n.text:00000000004032c0\n.text:00000000004032c2\n.text:00000000004032c5\n.text:00000000004032c8\n.text:00000000004032cd\n.text:00000000004032cf\n.text:00000000004032d2\n.text:00000000004032d4\n.text:00000000004032d7\n.text:00000000004032da\n.text:00000000004032de\n.text:00000000004032df\n.text:00000000004032e1\n.text:00000000004032e3\n.text:00000000004032e5\n.text:00000000004032e7\n.text:00000000004032e8\n'
p580
tp581
sS'simple_strtod_int'
p582
(S'\n__stdcall simple_strtod_int(char * input_str, char * * endptr, longdouble * value, _Bool * negative)\n'
p583
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000asimple_strtod_error\u000asimple_strtod_int(char *input_str,char **endptr,longdouble *value,_Bool *negative)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  _Bool _Var3;\u000a  char *pcVar4;\u000a  int iVar5;\u000a  uint uVar6;\u000a  simple_strtod_error sVar7;\u000a  float10 fVar8;\u000a  float10 fVar9;\u000a  \u000a  cVar1 = *input_str;\u000a  *(bool *)negative = cVar1 == '-';\u000a  pcVar4 = input_str + 1;\u000a  if (cVar1 != '-') {\u000a    pcVar4 = input_str;\u000a  }\u000a  *endptr = pcVar4;\u000a  fVar8 = (float10)0;\u000a  if (pcVar4 == (char *)0x0) {\u000a    sVar7 = SSE_OK;\u000a  }\u000a  else {\u000a    _Var3 = c_isdigit();\u000a    bVar2 = false;\u000a    fVar8 = (float10)0;\u000a    sVar7 = SSE_OK;\u000a    if (_Var3 != false) {\u000a      fVar8 = (float10)0;\u000a      sVar7 = SSE_OK;\u000a      uVar6 = 0;\u000a      do {\u000a        iVar5 = (int)**endptr + -0x30;\u000a        uVar6 = (uint)(iVar5 != 0 || fVar8 != (float10)0) + uVar6;\u000a        if (0x1b < uVar6) {\u000a          return SSE_OVERFLOW;\u000a        }\u000a        if (0x12 < uVar6) {\u000a          sVar7 = SSE_OK_PRECISION_LOSS;\u000a        }\u000a        fVar8 = fVar8 * (float10)_DAT_00408970 + (float10)iVar5;\u000a        *endptr = *endptr + 1;\u000a        _Var3 = c_isdigit();\u000a      } while (_Var3 != false);\u000a      bVar2 = true;\u000a    }\u000a    if (bVar2) goto LAB_00403ce1;\u000a  }\u000a  iVar5 = strncmp(*endptr,decimal_point,(long)decimal_point_length);\u000a  if (iVar5 != 0) {\u000a    return SSE_INVALID_NUMBER;\u000a  }\u000aLAB_00403ce1:\u000a  if (value != (longdouble *)0x0) {\u000a    fVar9 = -fVar8;\u000a    if (*negative == false) {\u000a      fVar9 = fVar8;\u000a    }\u000a    *(float10 *)value = fVar9;\u000a  }\u000a  return sVar7;\u000a}\u000a\u000a
p584
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RCX\nMOV R14,RDX\nMOV R13,RSI\nLEA RAX,[RDI + 0x1]\nCMP byte ptr [RDI],0x2d\nSETZ byte ptr [R15]\nCMOVNZ RAX,RDI\nMOV qword ptr [R13],RAX\nFLDZ\nTEST RAX,RAX\nJZ 0x00403cb5\nFSTP ST0\nMOVSX EDI,byte ptr [RAX]\nCALL 0x00404da0\nXOR ECX,ECX\nFLDZ\nTEST AL,AL\nMOV EBP,0x0\nJZ 0x00403caf\nFSTP ST0\nFLDZ\nXOR EBP,EBP\nMOV R12D,0x1\nXOR EBX,EBX\nNOP word ptr [RAX + RAX*0x1]\nMOV ESI,EBX\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nFLDZ\nFXCH\nFUCOMI ST0,ST1\nFSTP ST1\nSETP BL\nSETNZ DL\nOR DL,BL\nADD ECX,-0x30\nSETNZ BL\nOR BL,DL\nMOVZX EBX,BL\nADD EBX,ESI\nCMP EBX,0x1b\nJA 0x00403cf7\nCMP EBX,0x12\nCMOVA EBP,R12D\nFMUL dword ptr [0x00408970]\nMOV dword ptr [RSP + 0x8],ECX\nFIADD dword ptr [RSP + 0x8]\nFSTP tword ptr [RSP + 0xc]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [R13],RCX\nMOVSX EDI,byte ptr [RAX + 0x1]\nCALL 0x00404da0\nFLD tword ptr [RSP + 0xc]\nTEST AL,AL\nJNZ 0x00403c50\nMOV CL,0x1\nTEST CL,CL\nJZ 0x00403cb7\nJMP 0x00403ce1\nXOR EBP,EBP\nFSTP tword ptr [RSP + 0xc]\nMOV RDI,qword ptr [R13]\nMOV RSI,qword ptr [0x0060e330]\nMOVSXD RDX,dword ptr [0x0060e338]\nCALL 0x00401620\nFLD tword ptr [RSP + 0xc]\nMOV ECX,EAX\nMOV EAX,0x3\nTEST ECX,ECX\nJNZ 0x00403d06\nTEST R14,R14\nJZ 0x00403d00\nCMP byte ptr [R15],0x0\nFLD ST0\nFCHS\nFCMOVE ST0,ST1\nFSTP ST1\nFSTP tword ptr [R14]\nJMP 0x00403d02\nFSTP ST0\nMOV EAX,0x2\nJMP 0x00403d04\nFSTP ST0\nMOV EAX,EBP\nFLDZ\nFSTP ST0\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p585
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 cf\n49 89 d6\n49 89 f5\n48 8d 47 01\n80 3f 2d\n41 0f 94 07\n48 0f 45 c7\n49 89 45 00\nd9 ee\n48 85 c0\n0f 84 90 00 00 00\ndd d8\n0f be 38\ne8 71 11 00 00\n31 c9\nd9 ee\n84 c0\nbd 00 00 00 00\n74 73\ndd d8\nd9 ee\n31 ed\n41 bc 01 00 00 00\n31 db\n66 0f 1f 44 00 00\n89 de\n49 8b 45 00\n0f be 08\nd9 ee\nd9 c9\ndb e9\ndd d9\n0f 9a c3\n0f 95 c2\n08 da\n83 c1 d0\n0f 95 c3\n08 d3\n0f b6 db\n01 f3\n83 fb 1b\n77 7c\n83 fb 12\n41 0f 47 ec\nd8 0d e8 4c 00 00\n89 4c 24 08\nda 44 24 08\ndb 7c 24 0c\n48 8d 48 01\n49 89 4d 00\n0f be 78 01\ne8 fb 10 00 00\ndb 6c 24 0c\n84 c0\n75 a3\nb1 01\n84 c9\n74 04\neb 2c\n31 ed\ndb 7c 24 0c\n49 8b 7d 00\n48 8b 35 6a a6 20 00\n48 63 15 6b a6 20 00\ne8 4e d9 ff ff\ndb 6c 24 0c\n89 c1\nb8 03 00 00 00\n85 c9\n75 25\n4d 85 f6\n74 1a\n41 80 3f 00\nd9 c0\nd9 e0\nda c9\ndd d9\n41 db 3e\neb 0b\ndd d8\nb8 02 00 00 00\neb 04\ndd d8\n89 e8\nd9 ee\ndd d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p586
S'.text:0000000000403bf0\n.text:0000000000403bf1\n.text:0000000000403bf3\n.text:0000000000403bf5\n.text:0000000000403bf7\n.text:0000000000403bf9\n.text:0000000000403bfa\n.text:0000000000403bfe\n.text:0000000000403c01\n.text:0000000000403c04\n.text:0000000000403c07\n.text:0000000000403c0b\n.text:0000000000403c0e\n.text:0000000000403c12\n.text:0000000000403c16\n.text:0000000000403c1a\n.text:0000000000403c1c\n.text:0000000000403c1f\n.text:0000000000403c25\n.text:0000000000403c27\n.text:0000000000403c2a\n.text:0000000000403c2f\n.text:0000000000403c31\n.text:0000000000403c33\n.text:0000000000403c35\n.text:0000000000403c3a\n.text:0000000000403c3c\n.text:0000000000403c3e\n.text:0000000000403c40\n.text:0000000000403c42\n.text:0000000000403c48\n.text:0000000000403c4a\n.text:0000000000403c50\n.text:0000000000403c52\n.text:0000000000403c56\n.text:0000000000403c59\n.text:0000000000403c5b\n.text:0000000000403c5d\n.text:0000000000403c5f\n.text:0000000000403c61\n.text:0000000000403c64\n.text:0000000000403c67\n.text:0000000000403c69\n.text:0000000000403c6c\n.text:0000000000403c6f\n.text:0000000000403c71\n.text:0000000000403c74\n.text:0000000000403c76\n.text:0000000000403c79\n.text:0000000000403c7b\n.text:0000000000403c7e\n.text:0000000000403c82\n.text:0000000000403c88\n.text:0000000000403c8c\n.text:0000000000403c90\n.text:0000000000403c94\n.text:0000000000403c98\n.text:0000000000403c9c\n.text:0000000000403ca0\n.text:0000000000403ca5\n.text:0000000000403ca9\n.text:0000000000403cab\n.text:0000000000403cad\n.text:0000000000403caf\n.text:0000000000403cb1\n.text:0000000000403cb3\n.text:0000000000403cb5\n.text:0000000000403cb7\n.text:0000000000403cbb\n.text:0000000000403cbf\n.text:0000000000403cc6\n.text:0000000000403ccd\n.text:0000000000403cd2\n.text:0000000000403cd6\n.text:0000000000403cd8\n.text:0000000000403cdd\n.text:0000000000403cdf\n.text:0000000000403ce1\n.text:0000000000403ce4\n.text:0000000000403ce6\n.text:0000000000403cea\n.text:0000000000403cec\n.text:0000000000403cee\n.text:0000000000403cf0\n.text:0000000000403cf2\n.text:0000000000403cf5\n.text:0000000000403cf7\n.text:0000000000403cf9\n.text:0000000000403cfe\n.text:0000000000403d00\n.text:0000000000403d02\n.text:0000000000403d04\n.text:0000000000403d06\n.text:0000000000403d08\n.text:0000000000403d0c\n.text:0000000000403d0d\n.text:0000000000403d0f\n.text:0000000000403d11\n.text:0000000000403d13\n.text:0000000000403d15\n.text:0000000000403d16\n'
p587
tp588
sS'version_etc_va'
p589
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p590
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p591
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00407090\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040709c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x004070b1\nINC R9\nCMP R9,0xa\nJC 0x00407070\nMOV R8,RSP\nCALL 0x00406cd0\nADD RSP,0x58\nRET\n'
p592
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p593
S'.text:0000000000407060\n.text:0000000000407064\n.text:0000000000407067\n.text:0000000000407070\n.text:0000000000407073\n.text:0000000000407077\n.text:0000000000407079\n.text:000000000040707c\n.text:0000000000407080\n.text:0000000000407084\n.text:0000000000407087\n.text:0000000000407090\n.text:0000000000407094\n.text:0000000000407098\n.text:000000000040709c\n.text:000000000040709f\n.text:00000000004070a3\n.text:00000000004070a6\n.text:00000000004070a8\n.text:00000000004070ab\n.text:00000000004070af\n.text:00000000004070b1\n.text:00000000004070b4\n.text:00000000004070b9\n.text:00000000004070bd\n'
p594
tp595
sS'xzalloc'
p596
(S'\n__stdcall xzalloc(size_t s)\n'
p597
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p598
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x004071f0\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401760\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p599
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 64 a4 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p600
S'.text:00000000004072e0\n.text:00000000004072e2\n.text:00000000004072e3\n.text:00000000004072e4\n.text:00000000004072e7\n.text:00000000004072ec\n.text:00000000004072ef\n.text:00000000004072f1\n.text:00000000004072f4\n.text:00000000004072f7\n.text:00000000004072fc\n.text:00000000004072ff\n.text:0000000000407303\n.text:0000000000407304\n.text:0000000000407306\n'
p601
tp602
sS'gettext_quote'
p603
(S'\n__stdcall gettext_quote(char * msgid)\n'
p604
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_0040aed0;\u000a        pcVar2 = &DAT_0040aed4;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p605
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004016d0\nCMP RAX,RBX\nJNZ 0x00406988\nCALL 0x00407a60\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00406990\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00406938\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40aec0\nMOV EAX,0x40aec4\nJMP 0x00406984\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00406990\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00406976\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40aed0\nMOV EAX,0x40aed4\nJMP 0x00406984\nCMP R14D,0x9\nMOV ECX,0x40aeb4\nMOV EAX,0x40aeb8\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p606
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 e7 ad ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 69 11 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 c0 ae 40 00\nb8 c4 ae 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 d0 ae 40 00\nb8 d4 ae 40 00\neb 0e\n41 83 fe 09\nb9 b4 ae 40 00\nb8 b8 ae 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p607
S'.text:00000000004068d0\n.text:00000000004068d1\n.text:00000000004068d3\n.text:00000000004068d4\n.text:00000000004068d7\n.text:00000000004068da\n.text:00000000004068dc\n.text:00000000004068e1\n.text:00000000004068e4\n.text:00000000004068e9\n.text:00000000004068ec\n.text:00000000004068f2\n.text:00000000004068f7\n.text:00000000004068fa\n.text:00000000004068ff\n.text:0000000000406904\n.text:0000000000406909\n.text:000000000040690f\n.text:0000000000406915\n.text:0000000000406918\n.text:000000000040691a\n.text:000000000040691c\n.text:0000000000406921\n.text:0000000000406925\n.text:0000000000406927\n.text:0000000000406929\n.text:000000000040692c\n.text:0000000000406931\n.text:0000000000406936\n.text:0000000000406938\n.text:000000000040693d\n.text:0000000000406942\n.text:0000000000406947\n.text:000000000040694d\n.text:0000000000406953\n.text:0000000000406956\n.text:0000000000406958\n.text:000000000040695a\n.text:000000000040695f\n.text:0000000000406963\n.text:0000000000406965\n.text:0000000000406967\n.text:000000000040696a\n.text:000000000040696f\n.text:0000000000406974\n.text:0000000000406976\n.text:000000000040697a\n.text:000000000040697f\n.text:0000000000406984\n.text:0000000000406988\n.text:0000000000406989\n.text:000000000040698b\n.text:000000000040698c\n'
p608
tp609
sS'parse_human_number'
p610
(S'\n__stdcall parse_human_number(char * str, longdouble * value, size_t * precision)\n'
p611
V\u000asimple_strtod_error parse_human_number(char *str,longdouble *value,size_t *precision)\u000a\u000a{\u000a  simple_strtod_error sVar1;\u000a  undefined8 uVar2;\u000a  char *pcVar3;\u000a  char *pcVar4;\u000a  bool bVar5;\u000a  char *local_28;\u000a  \u000a  local_28 = (char *)0x0;\u000a  sVar1 = simple_strtod_human(str,&local_28,value,precision);\u000a  if (sVar1 < SSE_OVERFLOW) {\u000a    if (((local_28 != (char *)0x0) && (*local_28 != 0)) &&\u000a       (sVar1 = SSE_INVALID_SUFFIX, inval_style != inval_ignore)) {\u000a      bVar5 = conv_exit_code == 0;\u000a      sVar1 = SSE_INVALID_SUFFIX;\u000a      uVar2 = dcgettext(0,"invalid suffix in input %s: %s",5);\u000a      pcVar3 = quote_n((char *)0x0);\u000a      pcVar4 = quote_n((char *)0x1);\u000a      error((ulong)((uint)bVar5 * 2),0,uVar2,pcVar3,pcVar4);\u000a    }\u000a  }\u000a  else {\u000a    simple_strtod_fatal((char *)(ulong)sVar1);\u000a  }\u000a  return sVar1;\u000a}\u000a\u000a
p612
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RAX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV qword ptr [RSP],0x0\nMOV R8D,dword ptr [0x0060e33c]\nMOV RSI,RSP\nMOV RDX,RCX\nMOV RCX,RAX\nCALL 0x004036a0\nMOV EBX,EAX\nCMP EBX,0x2\nJC 0x00403610\nMOV EDI,EBX\nMOV RSI,R14\nCALL 0x00403970\nJMP 0x00403684\nMOV RAX,qword ptr [RSP]\nTEST RAX,RAX\nJZ 0x00403684\nCMP byte ptr [RAX],0x0\nJZ 0x00403684\nMOV EBX,0x5\nCMP dword ptr [0x0060e378],0x3\nJZ 0x00403684\nMOV AL,byte ptr [0x0060e380]\nXOR EBP,EBP\nTEST AL,AL\nSETZ BPL\nADD EBP,EBP\nMOV EBX,0x5\nXOR EDI,EDI\nMOV ESI,0x40a06b\nMOV EDX,0x5\nCALL 0x004016d0\nMOV R15,RAX\nXOR EDI,EDI\nMOV RSI,R14\nCALL 0x004068b0\nMOV R14,RAX\nMOV RSI,qword ptr [RSP]\nMOV EDI,0x1\nCALL 0x004068b0\nMOV R8,RAX\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,EBP\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x00401920\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p613
S'55\n41 57\n41 56\n53\n50\n48 89 d0\n48 89 f1\n49 89 fe\n48 c7 04 24 00 00 00 00\n44 8b 05 4d ad 20 00\n48 89 e6\n48 89 ca\n48 89 c1\ne8 a3 00 00 00\n89 c3\n83 fb 02\n72 0c\n89 df\n4c 89 f6\ne8 62 03 00 00\neb 74\n48 8b 04 24\n48 85 c0\n74 6b\n80 38 00\n74 66\nbb 05 00 00 00\n83 3d 4e ad 20 00 03\n74 58\n8a 05 4e ad 20 00\n31 ed\n84 c0\n40 0f 94 c5\n01 ed\nbb 05 00 00 00\n31 ff\nbe 6b a0 40 00\nba 05 00 00 00\ne8 7e e0 ff ff\n49 89 c7\n31 ff\n4c 89 f6\ne8 51 32 00 00\n49 89 c6\n48 8b 34 24\nbf 01 00 00 00\ne8 40 32 00 00\n49 89 c0\n31 f6\n31 c0\n89 ef\n4c 89 fa\n4c 89 f1\ne8 9c e2 ff ff\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p614
S'.text:00000000004035d0\n.text:00000000004035d1\n.text:00000000004035d3\n.text:00000000004035d5\n.text:00000000004035d6\n.text:00000000004035d7\n.text:00000000004035da\n.text:00000000004035dd\n.text:00000000004035e0\n.text:00000000004035e8\n.text:00000000004035ef\n.text:00000000004035f2\n.text:00000000004035f5\n.text:00000000004035f8\n.text:00000000004035fd\n.text:00000000004035ff\n.text:0000000000403602\n.text:0000000000403604\n.text:0000000000403606\n.text:0000000000403609\n.text:000000000040360e\n.text:0000000000403610\n.text:0000000000403614\n.text:0000000000403617\n.text:0000000000403619\n.text:000000000040361c\n.text:000000000040361e\n.text:0000000000403623\n.text:000000000040362a\n.text:000000000040362c\n.text:0000000000403632\n.text:0000000000403634\n.text:0000000000403636\n.text:000000000040363a\n.text:000000000040363c\n.text:0000000000403641\n.text:0000000000403643\n.text:0000000000403648\n.text:000000000040364d\n.text:0000000000403652\n.text:0000000000403655\n.text:0000000000403657\n.text:000000000040365a\n.text:000000000040365f\n.text:0000000000403662\n.text:0000000000403666\n.text:000000000040366b\n.text:0000000000403670\n.text:0000000000403673\n.text:0000000000403675\n.text:0000000000403677\n.text:0000000000403679\n.text:000000000040367c\n.text:000000000040367f\n.text:0000000000403684\n.text:0000000000403686\n.text:000000000040368a\n.text:000000000040368b\n.text:000000000040368d\n.text:000000000040368f\n.text:0000000000403690\n'
p615
tp616
sS'fclose'
p617
(S'\n__stdcall fclose(FILE * __stream)\n'
p618
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060e090)();\u000a  return iVar1;\u000a}\u000a\u000a
p619
S'JMP qword ptr [0x0060e090]\n'
p620
S'ff 25 da c9 20 00\n'
p621
S'.plt:00000000004016b0\n'
p622
tp623
sS'__ctype_get_mb_cur_max'
p624
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p625
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060e0a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x0060e0a8]\n'
p627
S'ff 25 c2 c9 20 00\n'
p628
S'.plt:00000000004016e0\n'
p629
tp630
sS'quotearg_n_style'
p631
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p632
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p633
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00406600\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x004063d0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p634
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p635
S'.text:00000000004065c0\n.text:00000000004065c1\n.text:00000000004065c3\n.text:00000000004065c4\n.text:00000000004065c8\n.text:00000000004065cb\n.text:00000000004065cd\n.text:00000000004065d2\n.text:00000000004065d5\n.text:00000000004065da\n.text:00000000004065e1\n.text:00000000004065e3\n.text:00000000004065e6\n.text:00000000004065e9\n.text:00000000004065ee\n.text:00000000004065f2\n.text:00000000004065f3\n.text:00000000004065f5\n.text:00000000004065f6\n'
p636
tp637
sS'simple_strtod_human'
p638
(S'\n__stdcall simple_strtod_human(char * input_str, char * * endptr, longdouble * value, size_t * precision)\n'
p639
V\u000asimple_strtod_error\u000asimple_strtod_human(char *input_str,char **endptr,longdouble *value,size_t *precision)\u000a\u000a{\u000a  ushort *puVar1;\u000a  undefined8 uVar2;\u000a  byte bVar3;\u000a  uint uVar4;\u000a  simple_strtod_error sVar5;\u000a  int iVar6;\u000a  uint uVar7;\u000a  char *pcVar8;\u000a  char *pcVar9;\u000a  ushort **ppuVar10;\u000a  int in_R8D;\u000a  float10 in_ST0;\u000a  \u000a  uVar4 = default_scale_base();\u000a  uVar2 = stderr;\u000a  if (dev_debug == 1) {\u000a    pcVar8 = quote_n((char *)0x0);\u000a    pcVar9 = quote_n((char *)0x1);\u000a    __fprintf_chk(uVar2,1,\u000a                  "simple_strtod_human:\u005cn  input string: %s\u005cn  locale decimal-point: %s\u005cn  MAX_UNSCALED_DIGITS: %d\u005cn"\u000a                  ,pcVar8,pcVar9,0x12);\u000a  }\u000a  sVar5 = simple_strtod_float(input_str,endptr,value,precision);\u000a  if (sVar5 < SSE_OVERFLOW) {\u000a    if (dev_debug == 1) {\u000a      __fprintf_chk(stderr,1,"  parsed numeric value: %Lf\u005cn  input precision = %d\u005cn",\u000a                    (ulong)*(uint *)precision);\u000a    }\u000a    if (**endptr == 0) {\u000a      uVar7 = 0;\u000a    }\u000a    else {\u000a      ppuVar10 = __ctype_b_loc();\u000a      puVar1 = *ppuVar10;\u000a      pcVar8 = *endptr;\u000a      bVar3 = to_uchar();\u000a      bVar3 = *(byte *)(puVar1 + (ulong)bVar3);\u000a      while ((bVar3 & 1) != 0) {\u000a        pcVar8 = pcVar8 + 1;\u000a        *endptr = pcVar8;\u000a        puVar1 = *ppuVar10;\u000a        bVar3 = to_uchar();\u000a        bVar3 = *(byte *)(puVar1 + (ulong)bVar3);\u000a      }\u000a      iVar6 = valid_suffix();\u000a      if (iVar6 == 0) {\u000a        return SSE_INVALID_SUFFIX;\u000a      }\u000a      if (in_R8D == 0) {\u000a        return SSE_VALID_BUT_FORBIDDEN_SUFFIX;\u000a      }\u000a      uVar7 = suffix_power();\u000a      *endptr = pcVar8 + 1;\u000a      if ((in_R8D == 1) && (pcVar8[1] == 'i')) {\u000a        *endptr = pcVar8 + 2;\u000a        uVar4 = 0x400;\u000a        if (dev_debug == 1) {\u000a          uVar4 = 0x400;\u000a          __fprintf_chk(stderr,1,"  Auto-scaling, found \u005c'i\u005c', switching to base %d\u005cn",0x400);\u000a        }\u000a      }\u000a      *precision = 0;\u000a    }\u000a    if (in_R8D == 4) {\u000a      if (**endptr != 'i') {\u000a        return SSE_MISSING_I_SUFFIX;\u000a      }\u000a      *endptr = *endptr + 1;\u000a    }\u000a    powerld();\u000a    if (dev_debug == 1) {\u000a      __fprintf_chk(stderr,1,"  suffix power=%d^%d = %Lf\u005cn",(ulong)uVar4,(ulong)uVar7);\u000a    }\u000a    *(float10 *)value = *(float10 *)value * in_ST0;\u000a    if (dev_debug == 1) {\u000a      __fprintf_chk(stderr,1,"  returning value: %Lf (%LG)\u005cn");\u000a    }\u000a    return sVar5;\u000a  }\u000a  return sVar5;\u000a}\u000a\u000a
p640
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV R15D,R8D\nMOV RBX,RCX\nMOV R12,RDX\nMOV R13,RSI\nMOV RBP,RDI\nMOV EDI,R15D\nCALL 0x00403a30\nMOV R14D,EAX\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x00403736\nMOV qword ptr [RSP + 0x28],RBX\nMOV RBX,qword ptr [0x0060e320]\nXOR EDI,EDI\nMOV RSI,RBP\nCALL 0x004068b0\nMOV qword ptr [RSP + 0x30],R12\nMOV R12D,R14D\nMOV R14D,R15D\nMOV R15,RAX\nMOV RSI,qword ptr [0x0060e330]\nMOV EDI,0x1\nCALL 0x004068b0\nMOV R8,RAX\nMOV ESI,0x1\nMOV EDX,0x40a08a\nMOV R9D,0x12\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RBX,qword ptr [RSP + 0x28]\nMOV RCX,R15\nMOV R15D,R14D\nMOV R14D,R12D\nMOV R12,qword ptr [RSP + 0x30]\nCALL 0x004019a0\nMOV RDI,RBP\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,RBX\nCALL 0x00403a50\nMOV EBP,EAX\nCMP EBP,0x1\nJBE 0x0040375f\nMOV EAX,EBP\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x00403789\nMOV RDI,qword ptr [0x0060e320]\nFLD tword ptr [R12]\nMOV ECX,dword ptr [RBX]\nFSTP tword ptr [RSP]\nMOV ESI,0x1\nMOV EDX,0x40a0e8\nXOR EAX,EAX\nCALL 0x004019a0\nMOV RAX,qword ptr [R13]\nCMP byte ptr [RAX],0x0\nJZ 0x004037d0\nMOV qword ptr [RSP + 0x28],RBX\nMOV dword ptr [RSP + 0x40],R15D\nMOV dword ptr [RSP + 0x24],R14D\nMOV qword ptr [RSP + 0x30],R12\nCALL 0x004019f0\nMOV R14,RAX\nMOV R12,qword ptr [R14]\nMOV RBX,qword ptr [R13]\nMOV R15B,byte ptr [RBX]\nMOVSX EDI,R15B\nCALL 0x004035c0\nMOVZX EAX,AL\nTEST byte ptr [R12 + RAX*0x2],0x1\nJNZ 0x004037e1\nMOV R12D,EBP\nJMP 0x00403814\nXOR EBX,EBX\nCMP R15D,0x4\nJZ 0x004038c7\nJMP 0x004038e0\nMOV R12D,EBP\nINC RBX\nNOP word ptr [RAX + RAX*0x1]\nMOV qword ptr [R13],RBX\nMOV RBP,qword ptr [R14]\nMOVZX R15D,byte ptr [RBX]\nMOVSX EDI,R15B\nCALL 0x004035c0\nMOVZX EAX,AL\nINC RBX\nTEST byte ptr [RBP + RAX*0x2],0x1\nJNZ 0x004037f0\nDEC RBX\nMOV R14D,dword ptr [RSP + 0x24]\nMOVSX EBP,R15B\nMOV EDI,EBP\nCALL 0x00403b50\nTEST EAX,EAX\nJZ 0x00403894\nMOV R15D,dword ptr [RSP + 0x40]\nTEST R15D,R15D\nJZ 0x0040389e\nMOV EDI,EBP\nCALL 0x00403b70\nMOV dword ptr [RSP + 0x24],EAX\nLEA RAX,[RBX + 0x1]\nMOV qword ptr [R13],RAX\nCMP R15D,0x1\nJNZ 0x004038a8\nCMP byte ptr [RAX],0x69\nMOV EBP,R12D\nMOV R12,qword ptr [RSP + 0x28]\nJNZ 0x004038b0\nADD RBX,0x2\nMOV qword ptr [R13],RBX\nMOV R14D,0x400\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x004038b0\nMOV RDI,qword ptr [0x0060e320]\nMOV R14D,0x400\nMOV ESI,0x1\nMOV EDX,0x40a11c\nMOV ECX,0x400\nXOR EAX,EAX\nCALL 0x004019a0\nJMP 0x004038b0\nMOV EAX,0x5\nJMP 0x00403750\nMOV EAX,0x4\nJMP 0x00403750\nMOV EBP,R12D\nMOV R12,qword ptr [RSP + 0x28]\nMOV qword ptr [R12],0x0\nMOV R12,qword ptr [RSP + 0x30]\nMOV EBX,dword ptr [RSP + 0x24]\nCMP R15D,0x4\nJNZ 0x004038e0\nMOV RCX,qword ptr [R13]\nMOV EAX,0x6\nCMP byte ptr [RCX],0x69\nJNZ 0x00403750\nINC RCX\nMOV qword ptr [R13],RCX\nMOV dword ptr [RSP + 0x44],R14D\nFILD dword ptr [RSP + 0x44]\nFSTP tword ptr [RSP]\nMOV EDI,EBX\nCALL 0x00403bc0\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x00403927\nMOV RDI,qword ptr [0x0060e320]\nFLD ST0\nFSTP tword ptr [RSP]\nMOV ESI,0x1\nMOV EDX,0x40a14d\nXOR EAX,EAX\nMOV ECX,R14D\nMOV R8D,EBX\nFSTP tword ptr [RSP + 0x30]\nCALL 0x004019a0\nFLD tword ptr [RSP + 0x30]\nFLD tword ptr [R12]\nFMULP\nFLD ST0\nFSTP tword ptr [R12]\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x00403962\nMOV RDI,qword ptr [0x0060e320]\nFLD ST0\nFSTP tword ptr [RSP + 0x10]\nFSTP tword ptr [RSP]\nMOV ESI,0x1\nMOV EDX,0x40a169\nXOR EAX,EAX\nCALL 0x004019a0\nJMP 0x0040374e\nFSTP ST0\nJMP 0x0040374e\n'
p641
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n45 89 c7\n48 89 cb\n49 89 d4\n49 89 f5\n48 89 fd\n44 89 ff\ne8 6b 03 00 00\n41 89 c6\n80 3d 92 ac 20 00 01\n75 65\n48 89 5c 24 28\n48 8b 1d 43 ac 20 00\n31 ff\n48 89 ee\ne8 c9 31 00 00\n4c 89 64 24 30\n45 89 f4\n45 89 fe\n49 89 c7\n48 8b 35 34 ac 20 00\nbf 01 00 00 00\ne8 aa 31 00 00\n49 89 c0\nbe 01 00 00 00\nba 8a a0 40 00\n41 b9 12 00 00 00\n31 c0\n48 89 df\n48 8b 5c 24 28\n4c 89 f9\n45 89 f7\n45 89 e6\n4c 8b 64 24 30\ne8 6a e2 ff ff\n48 89 ef\n4c 89 ee\n4c 89 e2\n48 89 d9\ne8 09 03 00 00\n89 c5\n83 fd 01\n76 11\n89 e8\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n80 3d fb ab 20 00 01\n75 21\n48 8b 3d b1 ab 20 00\n41 db 2c 24\n8b 0b\ndb 3c 24\nbe 01 00 00 00\nba e8 a0 40 00\n31 c0\ne8 17 e2 ff ff\n49 8b 45 00\n80 38 00\n74 3e\n48 89 5c 24 28\n44 89 7c 24 40\n44 89 74 24 24\n4c 89 64 24 30\ne8 45 e2 ff ff\n49 89 c6\n4d 8b 26\n49 8b 5d 00\n44 8a 3b\n41 0f be ff\ne8 ff fd ff ff\n0f b6 c0\n41 f6 04 44 01\n75 16\n41 89 ec\neb 44\n31 db\n41 83 ff 04\n0f 84 eb 00 00 00\ne9 ff 00 00 00\n41 89 ec\n48 ff c3\n66 0f 1f 84 00 00 00 00 00\n49 89 5d 00\n49 8b 2e\n44 0f b6 3b\n41 0f be ff\ne8 bc fd ff ff\n0f b6 c0\n48 ff c3\nf6 44 45 00 01\n75 df\n48 ff cb\n44 8b 74 24 24\n41 0f be ef\n89 ef\ne8 2c 03 00 00\n85 c0\n74 6c\n44 8b 7c 24 40\n45 85 ff\n74 6c\n89 ef\ne8 37 03 00 00\n89 44 24 24\n48 8d 43 01\n49 89 45 00\n41 83 ff 01\n75 5d\n80 38 69\n44 89 e5\n4c 8b 64 24 28\n75 58\n48 83 c3 02\n49 89 5d 00\n41 be 00 04 00 00\n80 3d f4 aa 20 00 01\n75 41\n48 8b 3d aa aa 20 00\n41 be 00 04 00 00\nbe 01 00 00 00\nba 1c a1 40 00\nb9 00 04 00 00\n31 c0\ne8 0e e1 ff ff\neb 1c\nb8 05 00 00 00\ne9 b2 fe ff ff\nb8 04 00 00 00\ne9 a8 fe ff ff\n44 89 e5\n4c 8b 64 24 28\n49 c7 04 24 00 00 00 00\n4c 8b 64 24 30\n8b 5c 24 24\n41 83 ff 04\n75 19\n49 8b 4d 00\nb8 06 00 00 00\n80 39 69\n0f 85 77 fe ff ff\n48 ff c1\n49 89 4d 00\n44 89 74 24 44\ndb 44 24 44\ndb 3c 24\n89 df\ne8 cd 02 00 00\n80 3d 67 aa 20 00 01\n75 2b\n48 8b 3d 1d aa 20 00\nd9 c0\ndb 3c 24\nbe 01 00 00 00\nba 4d a1 40 00\n31 c0\n44 89 f1\n41 89 d8\ndb 7c 24 30\ne8 7d e0 ff ff\ndb 6c 24 30\n41 db 2c 24\nde c9\nd9 c0\n41 db 3c 24\n80 3d 27 aa 20 00 01\n75 26\n48 8b 3d dd a9 20 00\nd9 c0\ndb 7c 24 10\ndb 3c 24\nbe 01 00 00 00\nba 69 a1 40 00\n31 c0\ne8 43 e0 ff ff\ne9 ec fd ff ff\ndd d8\ne9 e5 fd ff ff\n'
p642
S'.text:00000000004036a0\n.text:00000000004036a1\n.text:00000000004036a3\n.text:00000000004036a5\n.text:00000000004036a7\n.text:00000000004036a9\n.text:00000000004036aa\n.text:00000000004036ae\n.text:00000000004036b1\n.text:00000000004036b4\n.text:00000000004036b7\n.text:00000000004036ba\n.text:00000000004036bd\n.text:00000000004036c0\n.text:00000000004036c5\n.text:00000000004036c8\n.text:00000000004036cf\n.text:00000000004036d1\n.text:00000000004036d6\n.text:00000000004036dd\n.text:00000000004036df\n.text:00000000004036e2\n.text:00000000004036e7\n.text:00000000004036ec\n.text:00000000004036ef\n.text:00000000004036f2\n.text:00000000004036f5\n.text:00000000004036fc\n.text:0000000000403701\n.text:0000000000403706\n.text:0000000000403709\n.text:000000000040370e\n.text:0000000000403713\n.text:0000000000403719\n.text:000000000040371b\n.text:000000000040371e\n.text:0000000000403723\n.text:0000000000403726\n.text:0000000000403729\n.text:000000000040372c\n.text:0000000000403731\n.text:0000000000403736\n.text:0000000000403739\n.text:000000000040373c\n.text:000000000040373f\n.text:0000000000403742\n.text:0000000000403747\n.text:0000000000403749\n.text:000000000040374c\n.text:000000000040374e\n.text:0000000000403750\n.text:0000000000403754\n.text:0000000000403755\n.text:0000000000403757\n.text:0000000000403759\n.text:000000000040375b\n.text:000000000040375d\n.text:000000000040375e\n.text:000000000040375f\n.text:0000000000403766\n.text:0000000000403768\n.text:000000000040376f\n.text:0000000000403773\n.text:0000000000403775\n.text:0000000000403778\n.text:000000000040377d\n.text:0000000000403782\n.text:0000000000403784\n.text:0000000000403789\n.text:000000000040378d\n.text:0000000000403790\n.text:0000000000403792\n.text:0000000000403797\n.text:000000000040379c\n.text:00000000004037a1\n.text:00000000004037a6\n.text:00000000004037ab\n.text:00000000004037ae\n.text:00000000004037b1\n.text:00000000004037b5\n.text:00000000004037b8\n.text:00000000004037bc\n.text:00000000004037c1\n.text:00000000004037c4\n.text:00000000004037c9\n.text:00000000004037cb\n.text:00000000004037ce\n.text:00000000004037d0\n.text:00000000004037d2\n.text:00000000004037d6\n.text:00000000004037dc\n.text:00000000004037e1\n.text:00000000004037e4\n.text:00000000004037e7\n.text:00000000004037f0\n.text:00000000004037f4\n.text:00000000004037f7\n.text:00000000004037fb\n.text:00000000004037ff\n.text:0000000000403804\n.text:0000000000403807\n.text:000000000040380a\n.text:000000000040380f\n.text:0000000000403811\n.text:0000000000403814\n.text:0000000000403819\n.text:000000000040381d\n.text:000000000040381f\n.text:0000000000403824\n.text:0000000000403826\n.text:0000000000403828\n.text:000000000040382d\n.text:0000000000403830\n.text:0000000000403832\n.text:0000000000403834\n.text:0000000000403839\n.text:000000000040383d\n.text:0000000000403841\n.text:0000000000403845\n.text:0000000000403849\n.text:000000000040384b\n.text:000000000040384e\n.text:0000000000403851\n.text:0000000000403856\n.text:0000000000403858\n.text:000000000040385c\n.text:0000000000403860\n.text:0000000000403866\n.text:000000000040386d\n.text:000000000040386f\n.text:0000000000403876\n.text:000000000040387c\n.text:0000000000403881\n.text:0000000000403886\n.text:000000000040388b\n.text:000000000040388d\n.text:0000000000403892\n.text:0000000000403894\n.text:0000000000403899\n.text:000000000040389e\n.text:00000000004038a3\n.text:00000000004038a8\n.text:00000000004038ab\n.text:00000000004038b0\n.text:00000000004038b8\n.text:00000000004038bd\n.text:00000000004038c1\n.text:00000000004038c5\n.text:00000000004038c7\n.text:00000000004038cb\n.text:00000000004038d0\n.text:00000000004038d3\n.text:00000000004038d9\n.text:00000000004038dc\n.text:00000000004038e0\n.text:00000000004038e5\n.text:00000000004038e9\n.text:00000000004038ec\n.text:00000000004038ee\n.text:00000000004038f3\n.text:00000000004038fa\n.text:00000000004038fc\n.text:0000000000403903\n.text:0000000000403905\n.text:0000000000403908\n.text:000000000040390d\n.text:0000000000403912\n.text:0000000000403914\n.text:0000000000403917\n.text:000000000040391a\n.text:000000000040391e\n.text:0000000000403923\n.text:0000000000403927\n.text:000000000040392b\n.text:000000000040392d\n.text:000000000040392f\n.text:0000000000403933\n.text:000000000040393a\n.text:000000000040393c\n.text:0000000000403943\n.text:0000000000403945\n.text:0000000000403949\n.text:000000000040394c\n.text:0000000000403951\n.text:0000000000403956\n.text:0000000000403958\n.text:000000000040395d\n.text:0000000000403962\n.text:0000000000403964\n'
p643
tp644
sS'absld'
p645
(S'\n__stdcall absld(longdouble val)\n'
p646
V\u000alongdouble absld(longdouble val)\u000a\u000a{\u000a  return val;\u000a}\u000a\u000a
p647
S'FLD tword ptr [RSP + 0x8]\nFLDZ\nFUCOMIP ST0,ST1\nFLD ST0\nFCHS\nFXCH\nFCMOVNBE ST0,ST1\nFSTP ST1\nRET\n'
p648
S'db 6c 24 08\nd9 ee\ndf e9\nd9 c0\nd9 e0\nd9 c9\ndb d1\ndd d9\nc3\n'
p649
S'.text:00000000004041c0\n.text:00000000004041c4\n.text:00000000004041c6\n.text:00000000004041c8\n.text:00000000004041ca\n.text:00000000004041cc\n.text:00000000004041ce\n.text:00000000004041d0\n.text:00000000004041d2\n'
p650
tp651
sS'quote_n'
p652
(S'\n__stdcall quote_n(char * arg)\n'
p653
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p654
S'MOV RDX,-0x1\nJMP 0x00406890\n'
p655
S'48 c7 c2 ff ff ff ff\neb d7\n'
p656
S'.text:00000000004068b0\n.text:00000000004068b7\n'
p657
tp658
sS'quotearg_alloc'
p659
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p660
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p661
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00406240\n'
p662
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p663
S'.text:0000000000406230\n.text:0000000000406233\n.text:0000000000406235\n.text:0000000000406238\n'
p664
tp665
sS'close_stdout_set_file_name'
p666
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p667
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p668
S'MOV qword ptr [0x0060e3c0],RDI\nRET\n'
p669
S'48 89 3d 49 95 20 00\nc3\n'
p670
S'.text:0000000000404e70\n.text:0000000000404e77\n'
p671
tp672
sS'next_field'
p673
(S'\n__stdcall next_field(char * * line)\n'
p674
V\u000achar * next_field(char **line)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  char *pcVar3;\u000a  _Bool _Var4;\u000a  char *pcVar5;\u000a  \u000a  pcVar3 = *line;\u000a  cVar2 = *pcVar3;\u000a  pcVar5 = pcVar3;\u000a  if (delimiter == 0x80) {\u000a    while ((cVar2 != 0 && (_Var4 = field_sep(), _Var4 != false))) {\u000a      cVar2 = pcVar5[1];\u000a      pcVar5 = pcVar5 + 1;\u000a    }\u000a    cVar2 = *pcVar5;\u000a    while ((cVar2 != 0 && (_Var4 = field_sep(), _Var4 == false))) {\u000a      cVar2 = pcVar5[1];\u000a      pcVar5 = pcVar5 + 1;\u000a    }\u000a  }\u000a  else {\u000a    pcVar5 = pcVar3;\u000a    if ((int)cVar2 != delimiter) {\u000a      pcVar5 = pcVar3 + -1;\u000a      do {\u000a        pcVar1 = pcVar5 + 1;\u000a        pcVar5 = pcVar5 + 1;\u000a        if (*pcVar1 == 0) break;\u000a      } while ((int)*pcVar1 != delimiter);\u000a    }\u000a  }\u000a  *line = pcVar5;\u000a  return pcVar3;\u000a}\u000a\u000a
p675
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RDI\nMOV R15,qword ptr [R14]\nMOV EAX,dword ptr [0x0060e25c]\nMOV CL,byte ptr [R15]\nCMP EAX,0x80\nJNZ 0x00402f89\nTEST CL,CL\nMOV RBX,R15\nJZ 0x00402f67\nMOV RBX,R15\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EDI,CL\nCALL 0x00403060\nTEST AL,AL\nJZ 0x00402f67\nMOVZX ECX,byte ptr [RBX + 0x1]\nINC RBX\nTEST CL,CL\nJNZ 0x00402f50\nMOV AL,byte ptr [RBX]\nTEST AL,AL\nJNZ 0x00402f7b\nJMP 0x00402faf\nMOVZX EAX,byte ptr [RBX + 0x1]\nINC RBX\nTEST AL,AL\nJZ 0x00402faf\nMOVZX EDI,AL\nCALL 0x00403060\nTEST AL,AL\nJZ 0x00402f70\nJMP 0x00402faf\nMOVSX ECX,CL\nCMP ECX,EAX\nMOV RBX,R15\nJZ 0x00402faf\nLEA RBX,[R15 + -0x1]\nNOP word ptr [RAX + RAX*0x1]\nMOVSX ECX,byte ptr [RBX + 0x1]\nINC RBX\nTEST ECX,ECX\nJZ 0x00402faf\nCMP ECX,EAX\nJNZ 0x00402fa0\nMOV qword ptr [R14],RBX\nMOV RAX,R15\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p676
S'41 57\n41 56\n53\n49 89 fe\n4d 8b 3e\n8b 05 2b b3 20 00\n41 8a 0f\n3d 80 00 00 00\n75 4e\n84 c9\n4c 89 fb\n74 25\n4c 89 fb\n66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 f9\ne8 08 01 00 00\n84 c0\n74 0b\n0f b6 4b 01\n48 ff c3\n84 c9\n75 e9\n8a 03\n84 c0\n75 0e\neb 40\n0f b6 43 01\n48 ff c3\n84 c0\n74 34\n0f b6 f8\ne8 dd 00 00 00\n84 c0\n74 e9\neb 26\n0f be c9\n39 c1\n4c 89 fb\n74 1c\n49 8d 5f ff\n66 0f 1f 84 00 00 00 00 00\n0f be 4b 01\n48 ff c3\n85 c9\n74 04\n39 c1\n75 f1\n49 89 1e\n4c 89 f8\n5b\n41 5e\n41 5f\nc3\n'
p677
S'.text:0000000000402f20\n.text:0000000000402f22\n.text:0000000000402f24\n.text:0000000000402f25\n.text:0000000000402f28\n.text:0000000000402f2b\n.text:0000000000402f31\n.text:0000000000402f34\n.text:0000000000402f39\n.text:0000000000402f3b\n.text:0000000000402f3d\n.text:0000000000402f40\n.text:0000000000402f42\n.text:0000000000402f45\n.text:0000000000402f50\n.text:0000000000402f53\n.text:0000000000402f58\n.text:0000000000402f5a\n.text:0000000000402f5c\n.text:0000000000402f60\n.text:0000000000402f63\n.text:0000000000402f65\n.text:0000000000402f67\n.text:0000000000402f69\n.text:0000000000402f6b\n.text:0000000000402f6d\n.text:0000000000402f70\n.text:0000000000402f74\n.text:0000000000402f77\n.text:0000000000402f79\n.text:0000000000402f7b\n.text:0000000000402f7e\n.text:0000000000402f83\n.text:0000000000402f85\n.text:0000000000402f87\n.text:0000000000402f89\n.text:0000000000402f8c\n.text:0000000000402f8e\n.text:0000000000402f91\n.text:0000000000402f93\n.text:0000000000402f97\n.text:0000000000402fa0\n.text:0000000000402fa4\n.text:0000000000402fa7\n.text:0000000000402fa9\n.text:0000000000402fab\n.text:0000000000402fad\n.text:0000000000402faf\n.text:0000000000402fb2\n.text:0000000000402fb5\n.text:0000000000402fb6\n.text:0000000000402fb8\n.text:0000000000402fba\n'
p678
tp679
sS'field_sep'
p680
(S'\n__stdcall field_sep()\n'
p681
V\u000a_Bool field_sep(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  uint in_EDI;\u000a  \u000a  ppuVar1 = __ctype_b_loc();\u000a  return (_Bool)(*(byte *)(*ppuVar1 + (ulong)in_EDI) & 1 | (char)in_EDI == '\u005cn');\u000a}\u000a\u000a
p682
S'PUSH RBX\nMOV EBX,EDI\nCALL 0x004019f0\nMOV RAX,qword ptr [RAX]\nCMP BL,0xa\nSETZ CL\nMOV AL,byte ptr [RAX + RBX*0x2]\nAND AL,0x1\nOR AL,CL\nPOP RBX\nRET\n'
p683
S'53\n89 fb\ne8 88 e9 ff ff\n48 8b 00\n80 fb 0a\n0f 94 c1\n8a 04 58\n24 01\n08 c8\n5b\nc3\n'
p684
S'.text:0000000000403060\n.text:0000000000403061\n.text:0000000000403063\n.text:0000000000403068\n.text:000000000040306b\n.text:000000000040306e\n.text:0000000000403071\n.text:0000000000403074\n.text:0000000000403076\n.text:0000000000403078\n.text:0000000000403079\n'
p685
tp686
sS'simple_round'
p687
(S'\n__stdcall simple_round(longdouble val)\n'
p688
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000alongdouble simple_round(longdouble val)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  undefined extraout_XMM0 [16];\u000a  undefined extraout_XMM0_00 [16];\u000a  undefined extraout_XMM0_01 [16];\u000a  undefined extraout_XMM0_02 [16];\u000a  undefined extraout_XMM0_03 [16];\u000a  \u000a  switch(in_EDI) {\u000a  case 0:\u000a    simple_round_ceiling(val);\u000a    val = (longdouble)extraout_XMM0;\u000a    break;\u000a  case 1:\u000a    simple_round_floor(val);\u000a    val = (longdouble)extraout_XMM0_00;\u000a    break;\u000a  case 2:\u000a    simple_round_from_zero();\u000a    val = (longdouble)extraout_XMM0_01;\u000a    break;\u000a  case 3:\u000a    simple_round_to_zero(val);\u000a    val = (longdouble)extraout_XMM0_02;\u000a    break;\u000a  case 4:\u000a    simple_round_nearest(val);\u000a    val = (longdouble)extraout_XMM0_03;\u000a  }\u000a  return val;\u000a}\u000a\u000a
p689
S'SUB RSP,0x48\nFLD tword ptr [RSP + 0x50]\nFLD tword ptr [0x004089a0]\nFLD ST1\nFDIV ST0,ST1\nFNSTCW word ptr [RSP + 0x1e]\nMOVZX EAX,word ptr [RSP + 0x1e]\nMOV word ptr [RSP + 0x1e],0xc7f\nFLDCW word ptr [RSP + 0x1e]\nMOV word ptr [RSP + 0x1e],AX\nFISTP qword ptr [RSP + 0x28]\nFLDCW word ptr [RSP + 0x1e]\nMOV RAX,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x30],RAX\nFILD qword ptr [RSP + 0x30]\nFMULP\nFSUB ST1,ST0\nFLDZ\nCMP EDI,0x4\nJA 0x00404282\nFSTP ST0\nFSTP tword ptr [RSP + 0x3c]\nMOV EAX,EDI\nJMP qword ptr [0x408500 + RAX*0x8]\nFSTP tword ptr [RSP]\nCALL 0x004042b0\nJMP 0x0040426b\nFSTP tword ptr [RSP]\nCALL 0x00404300\nJMP 0x0040426b\nFSTP tword ptr [RSP]\nCALL 0x00404320\nJMP 0x0040426b\nFSTP tword ptr [RSP]\nCALL 0x00404350\nJMP 0x0040426b\nFSTP tword ptr [RSP]\nCALL 0x00404380\nMOV qword ptr [RSP + 0x20],RAX\nFILD qword ptr [RSP + 0x20]\nFLD tword ptr [RSP + 0x3c]\nFADDP\nFLDZ\nFLDZ\nFXCH\nFXCH ST2\nFSTP ST2\nFSTP ST0\nADD RSP,0x48\nRET\n'
p690
S'48 83 ec 48\ndb 6c 24 50\ndb 2d b2 47 00 00\nd9 c1\nd8 f1\nd9 7c 24 1e\n0f b7 44 24 1e\n66 c7 44 24 1e 7f 0c\nd9 6c 24 1e\n66 89 44 24 1e\ndf 7c 24 28\nd9 6c 24 1e\n48 8b 44 24 28\n48 89 44 24 30\ndf 6c 24 30\nde c9\ndc e9\nd9 ee\n83 ff 04\n77 56\ndd d8\ndb 7c 24 3c\n89 f8\nff 24 c5 00 85 40 00\ndb 3c 24\ne8 6d 00 00 00\neb 26\ndb 3c 24\ne8 b3 00 00 00\neb 1c\ndb 3c 24\ne8 c9 00 00 00\neb 12\ndb 3c 24\ne8 ef 00 00 00\neb 08\ndb 3c 24\ne8 15 01 00 00\n48 89 44 24 20\ndf 6c 24 20\ndb 6c 24 3c\nde c1\nd9 ee\nd9 ee\nd9 c9\nd9 ca\ndd da\ndd d8\n48 83 c4 48\nc3\n'
p691
S'.text:00000000004041e0\n.text:00000000004041e4\n.text:00000000004041e8\n.text:00000000004041ee\n.text:00000000004041f0\n.text:00000000004041f2\n.text:00000000004041f6\n.text:00000000004041fb\n.text:0000000000404202\n.text:0000000000404206\n.text:000000000040420b\n.text:000000000040420f\n.text:0000000000404213\n.text:0000000000404218\n.text:000000000040421d\n.text:0000000000404221\n.text:0000000000404223\n.text:0000000000404225\n.text:0000000000404227\n.text:000000000040422a\n.text:000000000040422c\n.text:000000000040422e\n.text:0000000000404232\n.text:0000000000404234\n.text:000000000040423b\n.text:000000000040423e\n.text:0000000000404243\n.text:0000000000404245\n.text:0000000000404248\n.text:000000000040424d\n.text:000000000040424f\n.text:0000000000404252\n.text:0000000000404257\n.text:0000000000404259\n.text:000000000040425c\n.text:0000000000404261\n.text:0000000000404263\n.text:0000000000404266\n.text:000000000040426b\n.text:0000000000404270\n.text:0000000000404274\n.text:0000000000404278\n.text:000000000040427a\n.text:000000000040427c\n.text:000000000040427e\n.text:0000000000404280\n.text:0000000000404282\n.text:0000000000404284\n.text:0000000000404286\n.text:000000000040428a\n'
p692
tp693
sS'__libc_csu_init'
p694
(S'\n__stdcall __libc_csu_init()\n'
p695
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p696
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60de08]\nPUSH RBP\nLEA RBP,[0x60de10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401598\nTEST RBP,RBP\nJZ 0x00407f26\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00407f10\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p697
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 26 5f 20 00\n55\n48 8d 2d 26 5f 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 97 96 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p698
S'.text:0000000000407ed0\n.text:0000000000407ed2\n.text:0000000000407ed4\n.text:0000000000407ed7\n.text:0000000000407ed9\n.text:0000000000407edb\n.text:0000000000407ee2\n.text:0000000000407ee3\n.text:0000000000407eea\n.text:0000000000407eeb\n.text:0000000000407eee\n.text:0000000000407ef1\n.text:0000000000407ef4\n.text:0000000000407ef8\n.text:0000000000407efc\n.text:0000000000407f01\n.text:0000000000407f04\n.text:0000000000407f06\n.text:0000000000407f08\n.text:0000000000407f10\n.text:0000000000407f13\n.text:0000000000407f16\n.text:0000000000407f19\n.text:0000000000407f1d\n.text:0000000000407f21\n.text:0000000000407f24\n.text:0000000000407f26\n.text:0000000000407f2a\n.text:0000000000407f2b\n.text:0000000000407f2c\n.text:0000000000407f2e\n.text:0000000000407f30\n.text:0000000000407f32\n.text:0000000000407f34\n'
p699
tp700
sS'argmatch_to_argument'
p701
(S'\n__stdcall argmatch_to_argument(char * value, char * * arglist, char * vallist, size_t valsize)\n'
p702
V\u000achar * argmatch_to_argument(char *value,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  \u000a  pcVar2 = *arglist;\u000a  if (pcVar2 != (char *)0x0) {\u000a    arglist = arglist + 1;\u000a    do {\u000a      iVar1 = memcmp(value,vallist,valsize);\u000a      if (iVar1 == 0) {\u000a        return pcVar2;\u000a      }\u000a      pcVar2 = *arglist;\u000a      arglist = arglist + 1;\u000a      vallist = vallist + valsize;\u000a    } while (pcVar2 != (char *)0x0);\u000a  }\u000a  return (char *)0x0;\u000a}\u000a\u000a
p703
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R14,RCX\nMOV R12,RDX\nMOV RBX,RSI\nMOV R13,RDI\nMOV R15,qword ptr [RBX]\nTEST R15,R15\nJZ 0x00404d01\nADD RBX,0x8\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x004017b0\nTEST EAX,EAX\nJZ 0x00404d04\nMOV R15,qword ptr [RBX]\nADD RBX,0x8\nADD R12,R14\nTEST R15,R15\nJNZ 0x00404ce0\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p704
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 ce\n49 89 d4\n48 89 f3\n49 89 fd\n4c 8b 3b\n4d 85 ff\n74 34\n48 83 c3 08\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ef\n4c 89 e6\n4c 89 f2\ne8 c2 ca ff ff\n85 c0\n74 12\n4c 8b 3b\n48 83 c3 08\n4d 01 f4\n4d 85 ff\n75 df\n45 31 ff\n4c 89 f8\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p705
S'.text:0000000000404cb0\n.text:0000000000404cb2\n.text:0000000000404cb4\n.text:0000000000404cb6\n.text:0000000000404cb8\n.text:0000000000404cb9\n.text:0000000000404cbc\n.text:0000000000404cbf\n.text:0000000000404cc2\n.text:0000000000404cc5\n.text:0000000000404cc8\n.text:0000000000404ccb\n.text:0000000000404ccd\n.text:0000000000404cd1\n.text:0000000000404ce0\n.text:0000000000404ce3\n.text:0000000000404ce6\n.text:0000000000404ce9\n.text:0000000000404cee\n.text:0000000000404cf0\n.text:0000000000404cf2\n.text:0000000000404cf5\n.text:0000000000404cf9\n.text:0000000000404cfc\n.text:0000000000404cff\n.text:0000000000404d01\n.text:0000000000404d04\n.text:0000000000404d07\n.text:0000000000404d08\n.text:0000000000404d0a\n.text:0000000000404d0c\n.text:0000000000404d0e\n.text:0000000000404d10\n'
p706
tp707
sS'c_isdigit'
p708
(S'\n__stdcall c_isdigit()\n'
p709
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p710
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p711
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p712
S'.text:0000000000404da0\n.text:0000000000404da3\n.text:0000000000404da6\n.text:0000000000404da9\n'
p713
tp714
sS'usage'
p715
(S'\n__stdcall usage()\n'
p716
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... [NUMBER]...\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "Reformat NUMBER(s), or the numbers from standard input if none are specified.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_mandatory_arg_note();\u000a    __s = (char *)dcgettext(0,"      --debug          print warnings about invalid input\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -d, --delimiter=X    use X instead of whitespace for field delimiter\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --field=FIELDS   replace the numbers in these input fields (default=1)\u005cn                         see FIELDS below\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --format=FORMAT  use printf style floating-point FORMAT;\u005cn                         see FORMAT below for details\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --from=UNIT      auto-scale input numbers to UNITs; default is \u005c'none\u005c';\u005cn                         see UNIT below\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --from-unit=N    specify the input unit size (instead of the default 1)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --grouping       use locale-defined grouping of digits, e.g. 1,000,000\u005cn                         (which means it has no effect in the C/POSIX locale)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --header[=N]     print (without converting) the first N header lines;\u005cn                         N defaults to 1 if not specified\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --invalid=MODE   failure mode for invalid numbers: MODE can be:\u005cn                         abort (default), fail, warn, ignore\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --padding=N      pad the output to N characters; positive N will\u005cn                         right-align; negative N will left-align;\u005cn                         padding is ignored if the output is wider than N;\u005cn                         the default is to automatically pad if a whitespace\u005cn                         is found\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --round=METHOD   use METHOD for rounding when scaling; METHOD can be:\u005cn                         up, down, from-zero (default), towards-zero, nearest\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --suffix=SUFFIX  add SUFFIX to output numbers, and accept optional\u005cn                         SUFFIX in input numbers\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --to=UNIT        auto-scale output numbers to UNITs; see UNIT below\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --to-unit=N      the output unit size (instead of the default 1)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"  -z, --zero-terminated    line delimiter is NUL, not newline\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"\u005cnUNIT options:\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  none       no auto-scaling is done; suffixes will trigger an error\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  auto       accept optional single/two letter suffix:\u005cn               1K = 1000,\u005cn               1Ki = 1024,\u005cn               1M = 1000000,\u005cn               1Mi = 1048576,\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  si         accept optional single letter suffix:\u005cn               1K = 1000,\u005cn               1M = 1000000,\u005cn               ...\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  iec        accept optional single letter suffix:\u005cn               1K = 1024,\u005cn               1M = 1048576,\u005cn               ...\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  iec-i      accept optional two-letter suffix:\u005cn               1Ki = 1024,\u005cn               1Mi = 1048576,\u005cn               ...\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnFIELDS supports cut(1) style field ranges:\u005cn  N    N\u005c'th field, counted from 1\u005cn  N-   from N\u005c'th field, to end of line\u005cn  N-M  from N\u005c'th to M\u005c'th field (inclusive)\u005cn  -M   from first to M\u005c'th field (inclusive)\u005cn  -    all fields\u005cnMultiple fields/ranges can be separated with commas\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnFORMAT must be suitable for printing one floating-point argument \u005c'%f\u005c'.\u005cnOptional quote (%\u005c'f) will enable --grouping (if supported by current locale).\u005cnOptional width value (%10f) will pad output. Optional zero (%010f) width\u005cnwill zero pad the number. Optional negative values (%-10f) will left align.\u005cnOptional precision (%.1f) will override the input determined precision.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    uVar1 = dcgettext(0,\u000a                      "\u005cnExit status is 0 if all input numbers were successfully converted.\u005cnBy default, %s will stop at the first conversion error with exit status 2.\u005cnWith --invalid=\u005c'fail\u005c' a warning is printed for each conversion error\u005cnand the exit status is 2.  With --invalid=\u005c'warn\u005c' each conversion error is\u005cndiagnosed, but the exit status is 0.  With --invalid=\u005c'ignore\u005c' conversion\u005cnerrors are not diagnosed and the exit status is 0.\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    uVar2 = 0x401eb5;\u000a    uVar1 = dcgettext(0,\u000a                      "\u005cnExamples:\u005cn  $ %s --to=si 1000\u005cn            -> \u005c"1.0K\u005c"\u005cn  $ %s --to=iec 2048\u005cn           -> \u005c"2.0K\u005c"\u005cn  $ %s --to=iec-i 4096\u005cn           -> \u005c"4.0Ki\u005c"\u005cn  $ echo 1K | %s --from=si\u005cn           -> \u005c"1000\u005c"\u005cn  $ echo 1K | %s --from=iec\u005cn           -> \u005c"1024\u005c"\u005cn  $ df -B1 | %s --header --field 2-4 --to=si\u005cn  $ ls -l  | %s --header --field 5 --to=iec\u005cn  $ ls -lh | %s --header --field 5 --from=iec --padding=10\u005cn  $ ls -lh | %s --header --field 5 --from=iec --format %%10f\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,program_name,program_name,program_name,program_name,program_name,\u000a                 program_name,program_name,program_name,program_name,uVar2);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p717
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401ef3\nXOR EDI,EDI\nMOV ESI,0x4089d0\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060e3d0]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401900\nXOR EDI,EDI\nMOV ESI,0x4089f3\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nCALL 0x00401f40\nXOR EDI,EDI\nMOV ESI,0x408a42\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x408a7d\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x408ac5\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x408b3d\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x408bb3\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x408c29\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x408c78\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x408d14\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x408d9b\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x408e1f\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x408f63\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x408ffe\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x409079\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x4090c4\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x40910c\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x40914b\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x409178\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x4091ae\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x4091be\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x409204\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x4092ac\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x40932a\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x4093a8\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x409425\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x409538\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nCALL 0x004017c0\nXOR EDI,EDI\nMOV ESI,0x4096ac\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060e3d0]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401900\nXOR EDI,EDI\nMOV ESI,0x409847\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060e3d0]\nSUB RSP,0x8\nMOV EDI,0x1\nMOV EAX,0x0\nMOV RSI,RCX\nMOV RCX,RDX\nMOV R8,RDX\nMOV R9,RDX\nPUSH RDX\nPUSH RDX\nPUSH RDX\nPUSH RDX\nPUSH RDX\nCALL 0x00401900\nADD RSP,0x30\nCALL 0x00401f70\nMOV EDI,EBX\nCALL 0x00401980\nCALL 0x00401f00\nMOV EDI,EBX\nCALL 0x00401980\n'
p718
S'53\n89 fb\n85 db\n0f 85 e8 03 00 00\n31 ff\nbe d0 89 40 00\nba 05 00 00 00\ne8 b4 fb ff ff\n48 89 c1\n48 8b 15 aa c8 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 cb fd ff ff\n31 ff\nbe f3 89 40 00\nba 05 00 00 00\ne8 8a fb ff ff\n48 8b 35 9b c7 20 00\n48 89 c7\ne8 6b fc ff ff\ne8 e6 03 00 00\n31 ff\nbe 42 8a 40 00\nba 05 00 00 00\ne8 65 fb ff ff\n48 8b 35 76 c7 20 00\n48 89 c7\ne8 46 fc ff ff\n31 ff\nbe 7d 8a 40 00\nba 05 00 00 00\ne8 45 fb ff ff\n48 8b 35 56 c7 20 00\n48 89 c7\ne8 26 fc ff ff\n31 ff\nbe c5 8a 40 00\nba 05 00 00 00\ne8 25 fb ff ff\n48 8b 35 36 c7 20 00\n48 89 c7\ne8 06 fc ff ff\n31 ff\nbe 3d 8b 40 00\nba 05 00 00 00\ne8 05 fb ff ff\n48 8b 35 16 c7 20 00\n48 89 c7\ne8 e6 fb ff ff\n31 ff\nbe b3 8b 40 00\nba 05 00 00 00\ne8 e5 fa ff ff\n48 8b 35 f6 c6 20 00\n48 89 c7\ne8 c6 fb ff ff\n31 ff\nbe 29 8c 40 00\nba 05 00 00 00\ne8 c5 fa ff ff\n48 8b 35 d6 c6 20 00\n48 89 c7\ne8 a6 fb ff ff\n31 ff\nbe 78 8c 40 00\nba 05 00 00 00\ne8 a5 fa ff ff\n48 8b 35 b6 c6 20 00\n48 89 c7\ne8 86 fb ff ff\n31 ff\nbe 14 8d 40 00\nba 05 00 00 00\ne8 85 fa ff ff\n48 8b 35 96 c6 20 00\n48 89 c7\ne8 66 fb ff ff\n31 ff\nbe 9b 8d 40 00\nba 05 00 00 00\ne8 65 fa ff ff\n48 8b 35 76 c6 20 00\n48 89 c7\ne8 46 fb ff ff\n31 ff\nbe 1f 8e 40 00\nba 05 00 00 00\ne8 45 fa ff ff\n48 8b 35 56 c6 20 00\n48 89 c7\ne8 26 fb ff ff\n31 ff\nbe 63 8f 40 00\nba 05 00 00 00\ne8 25 fa ff ff\n48 8b 35 36 c6 20 00\n48 89 c7\ne8 06 fb ff ff\n31 ff\nbe fe 8f 40 00\nba 05 00 00 00\ne8 05 fa ff ff\n48 8b 35 16 c6 20 00\n48 89 c7\ne8 e6 fa ff ff\n31 ff\nbe 79 90 40 00\nba 05 00 00 00\ne8 e5 f9 ff ff\n48 8b 35 f6 c5 20 00\n48 89 c7\ne8 c6 fa ff ff\n31 ff\nbe c4 90 40 00\nba 05 00 00 00\ne8 c5 f9 ff ff\n48 8b 35 d6 c5 20 00\n48 89 c7\ne8 a6 fa ff ff\n31 ff\nbe 0c 91 40 00\nba 05 00 00 00\ne8 a5 f9 ff ff\n48 8b 35 b6 c5 20 00\n48 89 c7\ne8 86 fa ff ff\n31 ff\nbe 4b 91 40 00\nba 05 00 00 00\ne8 85 f9 ff ff\n48 8b 35 96 c5 20 00\n48 89 c7\ne8 66 fa ff ff\n31 ff\nbe 78 91 40 00\nba 05 00 00 00\ne8 65 f9 ff ff\n48 8b 35 76 c5 20 00\n48 89 c7\ne8 46 fa ff ff\n31 ff\nbe ae 91 40 00\nba 05 00 00 00\ne8 45 f9 ff ff\n48 8b 35 56 c5 20 00\n48 89 c7\ne8 26 fa ff ff\n31 ff\nbe be 91 40 00\nba 05 00 00 00\ne8 25 f9 ff ff\n48 8b 35 36 c5 20 00\n48 89 c7\ne8 06 fa ff ff\n31 ff\nbe 04 92 40 00\nba 05 00 00 00\ne8 05 f9 ff ff\n48 8b 35 16 c5 20 00\n48 89 c7\ne8 e6 f9 ff ff\n31 ff\nbe ac 92 40 00\nba 05 00 00 00\ne8 e5 f8 ff ff\n48 8b 35 f6 c4 20 00\n48 89 c7\ne8 c6 f9 ff ff\n31 ff\nbe 2a 93 40 00\nba 05 00 00 00\ne8 c5 f8 ff ff\n48 8b 35 d6 c4 20 00\n48 89 c7\ne8 a6 f9 ff ff\n31 ff\nbe a8 93 40 00\nba 05 00 00 00\ne8 a5 f8 ff ff\n48 8b 35 b6 c4 20 00\n48 89 c7\ne8 86 f9 ff ff\n31 ff\nbe 25 94 40 00\nba 05 00 00 00\ne8 85 f8 ff ff\n48 8b 35 96 c4 20 00\n48 89 c7\ne8 66 f9 ff ff\n31 ff\nbe 38 95 40 00\nba 05 00 00 00\ne8 65 f8 ff ff\n48 8b 35 76 c4 20 00\n48 89 c7\ne8 46 f9 ff ff\n31 ff\nbe ac 96 40 00\nba 05 00 00 00\ne8 45 f8 ff ff\n48 89 c1\n48 8b 15 3b c5 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 5c fa ff ff\n31 ff\nbe 47 98 40 00\nba 05 00 00 00\ne8 1b f8 ff ff\n48 89 c1\n48 8b 15 11 c5 20 00\n48 83 ec 08\nbf 01 00 00 00\nb8 00 00 00 00\n48 89 ce\n48 89 d1\n49 89 d0\n49 89 d1\n52\n52\n52\n52\n52\ne8 1d fa ff ff\n48 83 c4 30\ne8 84 00 00 00\n89 df\ne8 8d fa ff ff\ne8 08 00 00 00\n89 df\ne8 81 fa ff ff\n'
p719
S'.text:0000000000401b00\n.text:0000000000401b01\n.text:0000000000401b03\n.text:0000000000401b05\n.text:0000000000401b0b\n.text:0000000000401b0d\n.text:0000000000401b12\n.text:0000000000401b17\n.text:0000000000401b1c\n.text:0000000000401b1f\n.text:0000000000401b26\n.text:0000000000401b2b\n.text:0000000000401b2d\n.text:0000000000401b30\n.text:0000000000401b35\n.text:0000000000401b37\n.text:0000000000401b3c\n.text:0000000000401b41\n.text:0000000000401b46\n.text:0000000000401b4d\n.text:0000000000401b50\n.text:0000000000401b55\n.text:0000000000401b5a\n.text:0000000000401b5c\n.text:0000000000401b61\n.text:0000000000401b66\n.text:0000000000401b6b\n.text:0000000000401b72\n.text:0000000000401b75\n.text:0000000000401b7a\n.text:0000000000401b7c\n.text:0000000000401b81\n.text:0000000000401b86\n.text:0000000000401b8b\n.text:0000000000401b92\n.text:0000000000401b95\n.text:0000000000401b9a\n.text:0000000000401b9c\n.text:0000000000401ba1\n.text:0000000000401ba6\n.text:0000000000401bab\n.text:0000000000401bb2\n.text:0000000000401bb5\n.text:0000000000401bba\n.text:0000000000401bbc\n.text:0000000000401bc1\n.text:0000000000401bc6\n.text:0000000000401bcb\n.text:0000000000401bd2\n.text:0000000000401bd5\n.text:0000000000401bda\n.text:0000000000401bdc\n.text:0000000000401be1\n.text:0000000000401be6\n.text:0000000000401beb\n.text:0000000000401bf2\n.text:0000000000401bf5\n.text:0000000000401bfa\n.text:0000000000401bfc\n.text:0000000000401c01\n.text:0000000000401c06\n.text:0000000000401c0b\n.text:0000000000401c12\n.text:0000000000401c15\n.text:0000000000401c1a\n.text:0000000000401c1c\n.text:0000000000401c21\n.text:0000000000401c26\n.text:0000000000401c2b\n.text:0000000000401c32\n.text:0000000000401c35\n.text:0000000000401c3a\n.text:0000000000401c3c\n.text:0000000000401c41\n.text:0000000000401c46\n.text:0000000000401c4b\n.text:0000000000401c52\n.text:0000000000401c55\n.text:0000000000401c5a\n.text:0000000000401c5c\n.text:0000000000401c61\n.text:0000000000401c66\n.text:0000000000401c6b\n.text:0000000000401c72\n.text:0000000000401c75\n.text:0000000000401c7a\n.text:0000000000401c7c\n.text:0000000000401c81\n.text:0000000000401c86\n.text:0000000000401c8b\n.text:0000000000401c92\n.text:0000000000401c95\n.text:0000000000401c9a\n.text:0000000000401c9c\n.text:0000000000401ca1\n.text:0000000000401ca6\n.text:0000000000401cab\n.text:0000000000401cb2\n.text:0000000000401cb5\n.text:0000000000401cba\n.text:0000000000401cbc\n.text:0000000000401cc1\n.text:0000000000401cc6\n.text:0000000000401ccb\n.text:0000000000401cd2\n.text:0000000000401cd5\n.text:0000000000401cda\n.text:0000000000401cdc\n.text:0000000000401ce1\n.text:0000000000401ce6\n.text:0000000000401ceb\n.text:0000000000401cf2\n.text:0000000000401cf5\n.text:0000000000401cfa\n.text:0000000000401cfc\n.text:0000000000401d01\n.text:0000000000401d06\n.text:0000000000401d0b\n.text:0000000000401d12\n.text:0000000000401d15\n.text:0000000000401d1a\n.text:0000000000401d1c\n.text:0000000000401d21\n.text:0000000000401d26\n.text:0000000000401d2b\n.text:0000000000401d32\n.text:0000000000401d35\n.text:0000000000401d3a\n.text:0000000000401d3c\n.text:0000000000401d41\n.text:0000000000401d46\n.text:0000000000401d4b\n.text:0000000000401d52\n.text:0000000000401d55\n.text:0000000000401d5a\n.text:0000000000401d5c\n.text:0000000000401d61\n.text:0000000000401d66\n.text:0000000000401d6b\n.text:0000000000401d72\n.text:0000000000401d75\n.text:0000000000401d7a\n.text:0000000000401d7c\n.text:0000000000401d81\n.text:0000000000401d86\n.text:0000000000401d8b\n.text:0000000000401d92\n.text:0000000000401d95\n.text:0000000000401d9a\n.text:0000000000401d9c\n.text:0000000000401da1\n.text:0000000000401da6\n.text:0000000000401dab\n.text:0000000000401db2\n.text:0000000000401db5\n.text:0000000000401dba\n.text:0000000000401dbc\n.text:0000000000401dc1\n.text:0000000000401dc6\n.text:0000000000401dcb\n.text:0000000000401dd2\n.text:0000000000401dd5\n.text:0000000000401dda\n.text:0000000000401ddc\n.text:0000000000401de1\n.text:0000000000401de6\n.text:0000000000401deb\n.text:0000000000401df2\n.text:0000000000401df5\n.text:0000000000401dfa\n.text:0000000000401dfc\n.text:0000000000401e01\n.text:0000000000401e06\n.text:0000000000401e0b\n.text:0000000000401e12\n.text:0000000000401e15\n.text:0000000000401e1a\n.text:0000000000401e1c\n.text:0000000000401e21\n.text:0000000000401e26\n.text:0000000000401e2b\n.text:0000000000401e32\n.text:0000000000401e35\n.text:0000000000401e3a\n.text:0000000000401e3c\n.text:0000000000401e41\n.text:0000000000401e46\n.text:0000000000401e4b\n.text:0000000000401e52\n.text:0000000000401e55\n.text:0000000000401e5a\n.text:0000000000401e5c\n.text:0000000000401e61\n.text:0000000000401e66\n.text:0000000000401e6b\n.text:0000000000401e72\n.text:0000000000401e75\n.text:0000000000401e7a\n.text:0000000000401e7c\n.text:0000000000401e81\n.text:0000000000401e86\n.text:0000000000401e8b\n.text:0000000000401e8e\n.text:0000000000401e95\n.text:0000000000401e9a\n.text:0000000000401e9c\n.text:0000000000401e9f\n.text:0000000000401ea4\n.text:0000000000401ea6\n.text:0000000000401eab\n.text:0000000000401eb0\n.text:0000000000401eb5\n.text:0000000000401eb8\n.text:0000000000401ebf\n.text:0000000000401ec3\n.text:0000000000401ec8\n.text:0000000000401ecd\n.text:0000000000401ed0\n.text:0000000000401ed3\n.text:0000000000401ed6\n.text:0000000000401ed9\n.text:0000000000401eda\n.text:0000000000401edb\n.text:0000000000401edc\n.text:0000000000401edd\n.text:0000000000401ede\n.text:0000000000401ee3\n.text:0000000000401ee7\n.text:0000000000401eec\n.text:0000000000401eee\n.text:0000000000401ef3\n.text:0000000000401ef8\n.text:0000000000401efa\n'
p720
tp721
sS'process_line'
p722
(S'\n__stdcall process_line(char * line)\n'
p723
V\u000aint process_line(char *line)\u000a\u000a{\u000a  _Bool _Var1;\u000a  _Bool _Var2;\u000a  uint uVar3;\u000a  char *text;\u000a  size_t field;\u000a  uint uVar4;\u000a  char in_SIL;\u000a  int __c;\u000a  char *local_38;\u000a  \u000a  local_38 = line;\u000a  text = next_field(&local_38);\u000a  if (*local_38 == 0) {\u000a    uVar4 = 1;\u000a    field = 1;\u000a  }\u000a  else {\u000a    field = 1;\u000a    _Var2 = true;\u000a    do {\u000a      *local_38 = 0;\u000a      _Var1 = process_field(text,field);\u000a      if (_Var1 != false) {\u000a        _Var1 = _Var2;\u000a      }\u000a      __c = delimiter;\u000a      if (delimiter == 0x80) {\u000a        __c = 0x20;\u000a      }\u000a      fputc_unlocked(__c,stdout);\u000a      local_38 = local_38 + 1;\u000a      field = field + 1;\u000a      text = next_field(&local_38);\u000a      _Var2 = _Var1;\u000a    } while (*local_38 != 0);\u000a    uVar4 = (uint)(_Var1 & 1);\u000a  }\u000a  _Var2 = process_field(text,field);\u000a  if (in_SIL != 0) {\u000a    __c = 10;\u000a    if (line_delim != 0) {\u000a      __c = 0;\u000a    }\u000a    putchar_unlocked(__c);\u000a  }\u000a  uVar3 = 0;\u000a  if (_Var2 != false) {\u000a    uVar3 = uVar4;\u000a  }\u000a  return (int)uVar3;\u000a}\u000a\u000a
p724
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,ESI\nMOV qword ptr [RSP],RDI\nMOV RDI,RSP\nCALL 0x00402f20\nMOV RCX,qword ptr [RSP]\nCMP byte ptr [RCX],0x0\nJZ 0x00402eca\nMOV R13B,0x1\nMOV EBX,0x1\nMOV R12D,0x20\nMOV RBP,RSP\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV byte ptr [RCX],0x0\nMOV RDI,RAX\nMOV RSI,RBX\nCALL 0x00402fc0\nMOV R15D,EAX\nTEST R15B,R15B\nJZ 0x00402e89\nMOV R15D,R13D\nMOV EDI,dword ptr [0x0060e25c]\nCMP EDI,0x80\nCMOVZ EDI,R12D\nMOV RSI,qword ptr [0x0060e2e8]\nCALL 0x00401800\nINC qword ptr [RSP]\nINC RBX\nMOV RDI,RBP\nCALL 0x00402f20\nMOV RCX,qword ptr [RSP]\nCMP byte ptr [RCX],0x0\nMOV R13D,R15D\nJNZ 0x00402e70\nAND R15B,0x1\nMOVZX EBP,R15B\nJMP 0x00402ed4\nMOV EBP,0x1\nMOV EBX,0x1\nMOV RDI,RAX\nMOV RSI,RBX\nCALL 0x00402fc0\nMOV EBX,EAX\nTEST R14B,R14B\nJZ 0x00402efd\nMOV AL,byte ptr [0x0060e351]\nXOR ECX,ECX\nTEST AL,AL\nMOV EDI,0xa\nCMOVNZ EDI,ECX\nCALL 0x00401840\nXOR EAX,EAX\nTEST BL,BL\nCMOVNZ EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p725
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 f6\n48 89 3c 24\n48 89 e7\ne8 d6 00 00 00\n48 8b 0c 24\n80 39 00\n74 77\n41 b5 01\nbb 01 00 00 00\n41 bc 20 00 00 00\n48 89 e5\n66 66 66 2e 0f 1f 84 00 00 00 00 00\nc6 01 00\n48 89 c7\n48 89 de\ne8 42 01 00 00\n41 89 c7\n45 84 ff\n74 03\n45 89 ef\n8b 3d cd b3 20 00\n81 ff 80 00 00 00\n41 0f 44 fc\n48 8b 35 48 b4 20 00\ne8 5b e9 ff ff\n48 ff 04 24\n48 ff c3\n48 89 ef\ne8 6c 00 00 00\n48 8b 0c 24\n80 39 00\n45 89 fd\n75 b0\n41 80 e7 01\n41 0f b6 ef\neb 0a\nbd 01 00 00 00\nbb 01 00 00 00\n48 89 c7\n48 89 de\ne8 e1 00 00 00\n89 c3\n45 84 f6\n74 17\n8a 05 65 b4 20 00\n31 c9\n84 c0\nbf 0a 00 00 00\n0f 45 f9\ne8 43 e9 ff ff\n31 c0\n84 db\n0f 45 c5\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p726
S'.text:0000000000402e30\n.text:0000000000402e31\n.text:0000000000402e33\n.text:0000000000402e35\n.text:0000000000402e37\n.text:0000000000402e39\n.text:0000000000402e3a\n.text:0000000000402e3b\n.text:0000000000402e3e\n.text:0000000000402e42\n.text:0000000000402e45\n.text:0000000000402e4a\n.text:0000000000402e4e\n.text:0000000000402e51\n.text:0000000000402e53\n.text:0000000000402e56\n.text:0000000000402e5b\n.text:0000000000402e61\n.text:0000000000402e64\n.text:0000000000402e70\n.text:0000000000402e73\n.text:0000000000402e76\n.text:0000000000402e79\n.text:0000000000402e7e\n.text:0000000000402e81\n.text:0000000000402e84\n.text:0000000000402e86\n.text:0000000000402e89\n.text:0000000000402e8f\n.text:0000000000402e95\n.text:0000000000402e99\n.text:0000000000402ea0\n.text:0000000000402ea5\n.text:0000000000402ea9\n.text:0000000000402eac\n.text:0000000000402eaf\n.text:0000000000402eb4\n.text:0000000000402eb8\n.text:0000000000402ebb\n.text:0000000000402ebe\n.text:0000000000402ec0\n.text:0000000000402ec4\n.text:0000000000402ec8\n.text:0000000000402eca\n.text:0000000000402ecf\n.text:0000000000402ed4\n.text:0000000000402ed7\n.text:0000000000402eda\n.text:0000000000402edf\n.text:0000000000402ee1\n.text:0000000000402ee4\n.text:0000000000402ee6\n.text:0000000000402eec\n.text:0000000000402eee\n.text:0000000000402ef0\n.text:0000000000402ef5\n.text:0000000000402ef8\n.text:0000000000402efd\n.text:0000000000402eff\n.text:0000000000402f01\n.text:0000000000402f04\n.text:0000000000402f08\n.text:0000000000402f09\n.text:0000000000402f0b\n.text:0000000000402f0d\n.text:0000000000402f0f\n.text:0000000000402f11\n.text:0000000000402f12\n'
p727
tp728
sS'quoting_options_from_style'
p729
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p730
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p731
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040664d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401600\n'
p732
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 ae af ff ff\n'
p733
S'.text:0000000000406600\n.text:0000000000406604\n.text:0000000000406607\n.text:000000000040660c\n.text:0000000000406611\n.text:0000000000406615\n.text:000000000040661d\n.text:0000000000406620\n.text:0000000000406622\n.text:0000000000406624\n.text:0000000000406628\n.text:000000000040662b\n.text:000000000040662f\n.text:0000000000406634\n.text:0000000000406639\n.text:000000000040663d\n.text:0000000000406641\n.text:0000000000406645\n.text:0000000000406648\n.text:000000000040664c\n.text:000000000040664d\n'
p734
tp735
sS'suffix_power'
p736
(S'\n__stdcall suffix_power()\n'
p737
V\u000aint suffix_power(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined4 in_EDI;\u000a  \u000a  iVar1 = 1;\u000a  switch(in_EDI) {\u000a  case 0x45:\u000a    return 6;\u000a  default:\u000a    iVar1 = 0;\u000aswitchD_00403b7d_caseD_4b:\u000a    return iVar1;\u000a  case 0x47:\u000a    return 3;\u000a  case 0x4b:\u000a    goto switchD_00403b7d_caseD_4b;\u000a  case 0x4d:\u000a    return 2;\u000a  case 0x50:\u000a    return 5;\u000a  case 0x54:\u000a    return 4;\u000a  case 0x59:\u000a    return 8;\u000a  case 0x5a:\u000a    return 7;\u000a  }\u000a}\u000a\u000a
p738
S'ADD EDI,-0x45\nCMP EDI,0x15\nJA 0x00403b8a\nMOV EAX,0x1\nJMP qword ptr [0x408450 + RDI*0x8]\nMOV EAX,0x6\nRET\nXOR EAX,EAX\nRET\nMOV EAX,0x3\nRET\nMOV EAX,0x2\nRET\nMOV EAX,0x5\nRET\nMOV EAX,0x4\nRET\nMOV EAX,0x8\nRET\nMOV EAX,0x7\nRET\n'
p739
S'83 c7 bb\n83 ff 15\n77 12\nb8 01 00 00 00\nff 24 fd 50 84 40 00\nb8 06 00 00 00\nc3\n31 c0\nc3\nb8 03 00 00 00\nc3\nb8 02 00 00 00\nc3\nb8 05 00 00 00\nc3\nb8 04 00 00 00\nc3\nb8 08 00 00 00\nc3\nb8 07 00 00 00\nc3\n'
p740
S'.text:0000000000403b70\n.text:0000000000403b73\n.text:0000000000403b76\n.text:0000000000403b78\n.text:0000000000403b7d\n.text:0000000000403b84\n.text:0000000000403b89\n.text:0000000000403b8a\n.text:0000000000403b8c\n.text:0000000000403b8d\n.text:0000000000403b92\n.text:0000000000403b93\n.text:0000000000403b98\n.text:0000000000403b99\n.text:0000000000403b9e\n.text:0000000000403b9f\n.text:0000000000403ba4\n.text:0000000000403ba5\n.text:0000000000403baa\n.text:0000000000403bab\n.text:0000000000403bb0\n'
p741
tp742
sS'unit_to_umax'
p743
(S'\n__stdcall unit_to_umax(char * n_string)\n'
p744
V\u000auintmax_t unit_to_umax(char *n_string)\u000a\u000a{\u000a  _Bool _Var1;\u000a  strtol_error sVar2;\u000a  size_t __n;\u000a  undefined8 uVar3;\u000a  char *s;\u000a  char *__ptr;\u000a  char *local_30;\u000a  uintmax_t local_28;\u000a  \u000a  __n = strlen(n_string);\u000a  local_30 = (char *)0x0;\u000a  if ((__n == 0) || (_Var1 = c_isdigit(), _Var1 != false)) {\u000a    s = n_string;\u000a    __ptr = (char *)0x0;\u000a  }\u000a  else {\u000a    s = (char *)xmalloc(__n + 2);\u000a    local_30 = s + (__n - 1);\u000a    memcpy(s,n_string,__n);\u000a    if (((__n < 2) || (s[__n - 1] != 'i')) || (_Var1 = c_isdigit(), _Var1 != false)) {\u000a      local_30[1] = 'B';\u000a      local_30 = local_30 + 2;\u000a    }\u000a    *local_30 = 0;\u000a    __ptr = s;\u000a  }\u000a  sVar2 = xstrtoumax(s,&local_30,(uintmax_t *)0xa,(char *)&local_28);\u000a  if (((sVar2 != LONGINT_OK) || (*local_30 != 0)) || (local_28 == 0)) {\u000a    free(__ptr);\u000a    uVar3 = dcgettext(0,"invalid unit size: %s",5);\u000a    s = quote(n_string);\u000a    error(1,0,uVar3,s);\u000a  }\u000a  free(__ptr);\u000a  return local_28;\u000a}\u000a\u000a
p745
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R15,RDI\nCALL 0x004016f0\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x8],0x0\nTEST RBX,RBX\nJZ 0x004028a3\nMOVSX EDI,byte ptr [R15 + RBX*0x1 + -0x1]\nCALL 0x00404da0\nTEST AL,AL\nJZ 0x004028b1\nMOV R8D,0x409e0a\nXOR R14D,R14D\nMOV RDI,R15\nJMP 0x0040292a\nLEA RDI,[RBX + 0x2]\nCALL 0x004071f0\nMOV R14,RAX\nLEA R12,[R14 + RBX*0x1 + -0x1]\nMOV qword ptr [RSP + 0x8],R12\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,RBX\nCALL 0x00401830\nCMP RBX,0x2\nJC 0x004028f2\nCMP byte ptr [R14 + RBX*0x1 + -0x1],0x69\nJNZ 0x004028f2\nMOVSX EDI,byte ptr [R12 + -0x1]\nCALL 0x00404da0\nTEST AL,AL\nJZ 0x00402919\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x1]\nMOV qword ptr [RSP + 0x8],RCX\nMOV byte ptr [RAX + 0x1],0x42\nMOV RAX,qword ptr [RSP + 0x8]\nINC RAX\nMOV qword ptr [RSP + 0x8],RAX\nMOV R8D,0x409e13\nJMP 0x00402924\nMOV RAX,qword ptr [RSP + 0x8]\nMOV R8D,0x409e0a\nMOV byte ptr [RAX],0x0\nMOV RDI,R14\nLEA RSI,[RSP + 0x8]\nLEA RCX,[RSP + 0x10]\nMOV EDX,0xa\nCALL 0x004076c0\nTEST EAX,EAX\nJZ 0x00402993\nMOV RDI,R14\nCALL 0x004015e0\nXOR EDI,EDI\nMOV ESI,0x409e1d\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RBX,RAX\nMOV RDI,R15\nCALL 0x004068c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401920\nMOV RDI,R14\nCALL 0x004015e0\nMOV RAX,qword ptr [RSP + 0x10]\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nMOV RAX,qword ptr [RSP + 0x8]\nCMP byte ptr [RAX],0x0\nJNZ 0x00402942\nMOV RAX,qword ptr [RSP + 0x10]\nTEST RAX,RAX\nJNZ 0x0040297a\nJMP 0x00402942\n'
p746
S'41 57\n41 56\n41 54\n53\n48 83 ec 18\n49 89 ff\ne8 6d ee ff ff\n48 89 c3\n48 c7 44 24 08 00 00 00 00\n48 85 db\n74 0f\n41 0f be 7c 1f ff\ne8 01 25 00 00\n84 c0\n74 0e\n41 b8 0a 9e 40 00\n45 31 f6\n4c 89 ff\neb 79\n48 8d 7b 02\ne8 36 49 00 00\n49 89 c6\n4d 8d 64 1e ff\n4c 89 64 24 08\n4c 89 f7\n4c 89 fe\n48 89 da\ne8 5b ef ff ff\n48 83 fb 02\n72 17\n41 80 7c 1e ff 69\n75 0f\n41 0f be 7c 24 ff\ne8 b2 24 00 00\n84 c0\n74 27\n48 8b 44 24 08\n48 8d 48 01\n48 89 4c 24 08\nc6 40 01 42\n48 8b 44 24 08\n48 ff c0\n48 89 44 24 08\n41 b8 13 9e 40 00\neb 0b\n48 8b 44 24 08\n41 b8 0a 9e 40 00\nc6 00 00\n4c 89 f7\n48 8d 74 24 08\n48 8d 4c 24 10\nba 0a 00 00 00\ne8 82 4d 00 00\n85 c0\n74 51\n4c 89 f7\ne8 96 ec ff ff\n31 ff\nbe 1d 9e 40 00\nba 05 00 00 00\ne8 75 ed ff ff\n48 89 c3\n4c 89 ff\ne8 5a 3f 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 da\ne8 a6 ef ff ff\n4c 89 f7\ne8 5e ec ff ff\n48 8b 44 24 10\n48 83 c4 18\n5b\n41 5c\n41 5e\n41 5f\nc3\n48 8b 44 24 08\n80 38 00\n75 a5\n48 8b 44 24 10\n48 85 c0\n75 d3\neb 99\n'
p747
S'.text:0000000000402870\n.text:0000000000402872\n.text:0000000000402874\n.text:0000000000402876\n.text:0000000000402877\n.text:000000000040287b\n.text:000000000040287e\n.text:0000000000402883\n.text:0000000000402886\n.text:000000000040288f\n.text:0000000000402892\n.text:0000000000402894\n.text:000000000040289a\n.text:000000000040289f\n.text:00000000004028a1\n.text:00000000004028a3\n.text:00000000004028a9\n.text:00000000004028ac\n.text:00000000004028af\n.text:00000000004028b1\n.text:00000000004028b5\n.text:00000000004028ba\n.text:00000000004028bd\n.text:00000000004028c2\n.text:00000000004028c7\n.text:00000000004028ca\n.text:00000000004028cd\n.text:00000000004028d0\n.text:00000000004028d5\n.text:00000000004028d9\n.text:00000000004028db\n.text:00000000004028e1\n.text:00000000004028e3\n.text:00000000004028e9\n.text:00000000004028ee\n.text:00000000004028f0\n.text:00000000004028f2\n.text:00000000004028f7\n.text:00000000004028fb\n.text:0000000000402900\n.text:0000000000402904\n.text:0000000000402909\n.text:000000000040290c\n.text:0000000000402911\n.text:0000000000402917\n.text:0000000000402919\n.text:000000000040291e\n.text:0000000000402924\n.text:0000000000402927\n.text:000000000040292a\n.text:000000000040292f\n.text:0000000000402934\n.text:0000000000402939\n.text:000000000040293e\n.text:0000000000402940\n.text:0000000000402942\n.text:0000000000402945\n.text:000000000040294a\n.text:000000000040294c\n.text:0000000000402951\n.text:0000000000402956\n.text:000000000040295b\n.text:000000000040295e\n.text:0000000000402961\n.text:0000000000402966\n.text:0000000000402969\n.text:000000000040296e\n.text:0000000000402970\n.text:0000000000402972\n.text:0000000000402975\n.text:000000000040297a\n.text:000000000040297d\n.text:0000000000402982\n.text:0000000000402987\n.text:000000000040298b\n.text:000000000040298c\n.text:000000000040298e\n.text:0000000000402990\n.text:0000000000402992\n.text:0000000000402993\n.text:0000000000402998\n.text:000000000040299b\n.text:000000000040299d\n.text:00000000004029a2\n.text:00000000004029a5\n.text:00000000004029a7\n'
p748
tp749
sS'strcpy'
p750
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060e058)();\u000a  return pcVar1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x0060e058]\n'
p753
S'ff 25 12 ca 20 00\n'
p754
S'.plt:0000000000401640\n'
p755
tp756
sS'c_isgraph'
p757
(S'\n__stdcall c_isgraph()\n'
p758
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p759
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p760
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p761
S'.text:0000000000404db0\n.text:0000000000404db3\n.text:0000000000404db6\n.text:0000000000404db9\n'
p762
tp763
sS'simple_round_floor'
p764
(S'\n__stdcall simple_round_floor(longdouble val)\n'
p765
V\u000aintmax_t simple_round_floor(longdouble val)\u000a\u000a{\u000a  intmax_t iVar1;\u000a  \u000a  iVar1 = simple_round_ceiling(val);\u000a  return -iVar1;\u000a}\u000a\u000a
p766
S'SUB RSP,0x18\nFLD tword ptr [RSP + 0x20]\nFCHS\nFSTP tword ptr [RSP]\nCALL 0x004042b0\nNEG RAX\nADD RSP,0x18\nRET\n'
p767
S'48 83 ec 18\ndb 6c 24 20\nd9 e0\ndb 3c 24\ne8 9e ff ff ff\n48 f7 d8\n48 83 c4 18\nc3\n'
p768
S'.text:0000000000404300\n.text:0000000000404304\n.text:0000000000404308\n.text:000000000040430a\n.text:000000000040430d\n.text:0000000000404312\n.text:0000000000404315\n.text:0000000000404319\n'
p769
tp770
sS'simple_round_nearest'
p771
(S'\n__stdcall simple_round_nearest(longdouble val)\n'
p772
V\u000aintmax_t simple_round_nearest(longdouble val)\u000a\u000a{\u000a  float10 in_stack_00000008;\u000a  \u000a  return (long)ROUND(*(float10 *)(&DAT_004089b0 + (ulong)(in_stack_00000008 < (float10)0) * 0x10) +\u000a                     in_stack_00000008);\u000a}\u000a\u000a
p773
S'FLD tword ptr [RSP + 0x8]\nFLDZ\nXOR EAX,EAX\nFUCOMIP ST0,ST1\nSETA AL\nSHL RAX,0x4\nFLD tword ptr [0x4089b0 + RAX]\nFADDP\nFNSTCW word ptr [RSP + -0xa]\nMOVZX EAX,word ptr [RSP + -0xa]\nMOV word ptr [RSP + -0xa],0xc7f\nFLDCW word ptr [RSP + -0xa]\nMOV word ptr [RSP + -0xa],AX\nFISTP qword ptr [RSP + -0x8]\nFLDCW word ptr [RSP + -0xa]\nMOV RAX,qword ptr [RSP + -0x8]\nRET\n'
p774
S'db 6c 24 08\nd9 ee\n31 c0\ndf e9\n0f 97 c0\n48 c1 e0 04\ndb a8 b0 89 40 00\nde c1\nd9 7c 24 f6\n0f b7 44 24 f6\n66 c7 44 24 f6 7f 0c\nd9 6c 24 f6\n66 89 44 24 f6\ndf 7c 24 f8\nd9 6c 24 f6\n48 8b 44 24 f8\nc3\n'
p775
S'.text:0000000000404380\n.text:0000000000404384\n.text:0000000000404386\n.text:0000000000404388\n.text:000000000040438a\n.text:000000000040438d\n.text:0000000000404391\n.text:0000000000404397\n.text:0000000000404399\n.text:000000000040439d\n.text:00000000004043a2\n.text:00000000004043a9\n.text:00000000004043ad\n.text:00000000004043b2\n.text:00000000004043b6\n.text:00000000004043ba\n.text:00000000004043bf\n'
p776
tp777
sS'ambsalign'
p778
(S'\n__stdcall ambsalign(char * src, size_t * width)\n'
p779
V\u000achar * ambsalign(char *src,size_t *width)\u000a\u000a{\u000a  ulong uVar1;\u000a  char *dest;\u000a  ulong uVar2;\u000a  ulong __size;\u000a  char *__ptr;\u000a  \u000a  uVar1 = *width;\u000a  uVar2 = uVar1;\u000a  __size = uVar1;\u000a  __ptr = (char *)0x0;\u000a  do {\u000a    if (uVar2 < __size) {\u000a      return __ptr;\u000a    }\u000a    __size = uVar2 + 1;\u000a    dest = (char *)realloc(__ptr,__size);\u000a    if (dest == (char *)0x0) break;\u000a    *width = uVar1;\u000a    uVar2 = mbsalign(src,dest,__size,width);\u000a    __ptr = dest;\u000a  } while (uVar2 != 0xffffffffffffffff);\u000a  free(__ptr);\u000a  return (char *)0x0;\u000a}\u000a\u000a
p780
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],ECX\nMOV dword ptr [RSP],EDX\nMOV R13,RSI\nMOV R12,RDI\nMOV R15,qword ptr [R13]\nXOR EBP,EBP\nMOV RAX,R15\nMOV RBX,R15\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP RAX,RBX\nJC 0x004053b4\nMOV RBX,RAX\nINC RBX\nMOV RDI,RBP\nMOV RSI,RBX\nCALL 0x004018d0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004053aa\nMOV qword ptr [R13],R15\nMOV RDI,R12\nMOV RSI,R14\nMOV RDX,RBX\nMOV RCX,R13\nMOV R8D,dword ptr [RSP]\nMOV R9D,dword ptr [RSP + 0x4]\nCALL 0x00404f50\nCMP RAX,-0x1\nMOV RBP,R14\nJNZ 0x00405360\nMOV RDI,R14\nJMP 0x004053ad\nMOV RDI,RBP\nCALL 0x004015e0\nXOR EBP,EBP\nMOV RAX,RBP\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p781
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n89 4c 24 04\n89 14 24\n49 89 f5\n49 89 fc\n4d 8b 7d 00\n31 ed\n4c 89 f8\n4c 89 fb\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 d8\n72 4f\n48 89 c3\n48 ff c3\n48 89 ef\n48 89 de\ne8 5a c5 ff ff\n49 89 c6\n4d 85 f6\n74 2c\n4d 89 7d 00\n4c 89 e7\n4c 89 f6\n48 89 da\n4c 89 e9\n44 8b 04 24\n44 8b 4c 24 04\ne8 b4 fb ff ff\n48 83 f8 ff\n4c 89 f5\n75 bb\n4c 89 f7\neb 03\n48 89 ef\ne8 2e c2 ff ff\n31 ed\n48 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p782
S'.text:0000000000405330\n.text:0000000000405331\n.text:0000000000405333\n.text:0000000000405335\n.text:0000000000405337\n.text:0000000000405339\n.text:000000000040533a\n.text:000000000040533b\n.text:000000000040533f\n.text:0000000000405342\n.text:0000000000405345\n.text:0000000000405348\n.text:000000000040534c\n.text:000000000040534e\n.text:0000000000405351\n.text:0000000000405354\n.text:0000000000405360\n.text:0000000000405363\n.text:0000000000405365\n.text:0000000000405368\n.text:000000000040536b\n.text:000000000040536e\n.text:0000000000405371\n.text:0000000000405376\n.text:0000000000405379\n.text:000000000040537c\n.text:000000000040537e\n.text:0000000000405382\n.text:0000000000405385\n.text:0000000000405388\n.text:000000000040538b\n.text:000000000040538e\n.text:0000000000405392\n.text:0000000000405397\n.text:000000000040539c\n.text:00000000004053a0\n.text:00000000004053a3\n.text:00000000004053a5\n.text:00000000004053a8\n.text:00000000004053aa\n.text:00000000004053ad\n.text:00000000004053b2\n.text:00000000004053b4\n.text:00000000004053b7\n.text:00000000004053bb\n.text:00000000004053bc\n.text:00000000004053be\n.text:00000000004053c0\n.text:00000000004053c2\n.text:00000000004053c4\n.text:00000000004053c5\n'
p783
tp784
sS'quotearg_buffer_restyled'
p785
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p786
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040567c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040567c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040567c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040567c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040567c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040567c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040567c_caseD_7;\u000aswitchD_0040567c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040567c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040567c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00406140;\u000aLAB_00405860:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00406149:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00406158:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040586b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_004058af:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_004058af;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00406158;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00406085;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00405f90;\u000a    }\u000a    goto LAB_00406158;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_004060ba;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00406158;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_004060e9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00405ba8;\u000a  case '\u005ca':\u000a    goto joined_r0x00405a98;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00405a98;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_004058c6_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00405a98;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00405a98;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_004058c6_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00405a98:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_00405ffe;\u000a    }\u000a    goto LAB_00406158;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00406158;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00406158;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00406158;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00406158;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00406158;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_004058c6_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00406056;\u000a      goto joined_r0x00406048;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00405b51:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00406048;\u000a      goto LAB_00406056;\u000a    }\u000a    goto LAB_00406158;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00406158;\u000a  }\u000a  goto joined_r0x00405f90;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_004060ba:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_004060e9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_004060e9:\u000a  if (1 < uVar10) {\u000aLAB_00405bc6:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00405c82;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00405b51;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00405c82:\u000a        if (bVar6 != 0) goto LAB_00406158;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00405ba8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00405bc6;\u000ajoined_r0x00405f90:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00405f90:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00405fb7;\u000aLAB_00405ff0:\u000a    if (bVar22) goto LAB_00405ff5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00405ff0;\u000aLAB_00405fb7:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00405ff5:\u000a      if (bVar6 != 0) goto LAB_00406158;\u000aLAB_00405ffe:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00406048;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00406056:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00406048:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00406085:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00405860;\u000aLAB_00406140:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00406149;\u000a  goto LAB_0040586b;\u000a}\u000a\u000a
p787
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004016e0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00406225\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x40a990 + RAX*0x8]\nMOV EDI,0x40aeb6\nMOV ESI,R15D\nCALL 0x004068d0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x40aeb8\nMOV ESI,R15D\nCALL 0x004068d0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x004056dd\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x004056e0\nNOP\nCMP R12,RSI\nJNC 0x004056ce\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x004056c0\nJMP 0x004056e0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004016f0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x004057ac\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x004057ac\nMOV ECX,0x40aeb4\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x004057a6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00405747\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00405774\nTEST RSI,RSI\nJZ 0x00405761\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x40aeb8\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00405782\nMOV ECX,0x40aeb8\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x004057ac\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x004061fc\nMOV ECX,0x40aeb4\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00406140\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00406149\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x004058af\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x004058aa\nCMP R11,-0x1\nJNZ 0x004058aa\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004016f0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00405900\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00405b5c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x40a9e8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00406158\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00405fb0\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00405fb7\nJMP 0x00405ff0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x004017b0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040594d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x004058b1\nJMP 0x00406158\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x004058b1\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x004058db\nCMP EBX,0x2\nJNZ 0x004058db\nTEST R13,R13\nJNZ 0x004058db\nJMP 0x00406158\nCMP R11,-0x1\nJZ 0x00405d33\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00405d53\nJMP 0x004058db\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405d64\nTEST R8B,R8B\nJNZ 0x00406158\nCMP EBX,0x2\nJNZ 0x00405a08\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00405a08\nCMP R12,RSI\nJNC 0x004059e3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004059f2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405a01\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00405a12\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00405ed8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00405ed8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00405ed8\nCMP RCX,RSI\nJNC 0x00405a4c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x00405a5b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004058e6\nJMP 0x00405fb0\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004058d9\nJMP 0x00405aba\nMOV DL,0x74\nJMP 0x00405aa2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004058d9\nJMP 0x00405aba\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004058d9\nJMP 0x00405aba\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00406158\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004058d9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x00405ffe\nJMP 0x00406158\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x004058d9\nTEST R8B,R8B\nJNZ 0x00406158\nCMP R12,RSI\nJNC 0x00405aea\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405af9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405b08\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x004058d9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x00405eeb\nCMP EBX,0x2\nJNZ 0x004058d9\nTEST R8B,R8B\nJZ 0x004058d9\nJMP 0x00406158\nCMP EBX,0x2\nJNZ 0x00405d84\nTEST R8B,R8B\nJNZ 0x00406158\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00406056\nJMP 0x00406079\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00405da5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x004019f0\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00405f98\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00405f98\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00405c82\nJMP 0x00405c50\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00405c39\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00405c36\nCMP R12,RSI\nJNC 0x00405c1b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x00405c2a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00405c70\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00405c70\nTEST BPL,0x1\nJZ 0x00405d13\nCMP R12,RSI\nJNC 0x00405c64\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00405d13\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00405c50\nTEST R8B,R8B\nJNZ 0x00406158\nCMP EBX,0x2\nJNZ 0x00405cca\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x00405cca\nCMP R12,RSI\nJNC 0x00405ca2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405cb1\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405cc0\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00405cd4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00405ceb\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405d05\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00405c00\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00406056\nJMP 0x00406079\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x004058db\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x004058db\nJMP 0x00406158\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00406085\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004058e6\nJMP 0x00405fb0\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00405aa2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00406056\nJMP 0x00406079\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00405dc7\nMOV RDI,R10\nCALL 0x004016f0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401710\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040609f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00406097\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004060a6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00405e8e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00405e86\nBT RDI,RDX\nJC 0x004061f2\nINC RCX\nCMP RCX,R14\nJC 0x00405e70\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x004019d0\nTEST EAX,EAX\nJNZ 0x00405ea3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x004019c0\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00405de5\nJMP 0x004060e9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004058e6\nJMP 0x00405fb0\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x004058d9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x004058d9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x004058d9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x004058db\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00406122\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00406158\nCMP R12,RSI\nJNC 0x00405f4e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00405f61\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00405f70\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x00405f7f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004058e6\nJMP 0x00405fb0\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004058e6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00405ff0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00405ff5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00406050\nJMP 0x00405ff5\nTEST BPL,BPL\nJZ 0x00406050\nTEST R8B,R8B\nJNZ 0x00406158\nCMP EBX,0x2\nJNZ 0x00406038\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00406038\nCMP R12,RSI\nJNC 0x00406013\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00406022\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00406031\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00406042\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00406082\nJMP 0x0040607e\nTEST DIL,0x1\nJZ 0x00406079\nAND AL,0x1\nJNZ 0x00406079\nCMP R12,RSI\nJNC 0x00406064\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00406073\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00406082\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00406140\nJMP 0x00405860\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x004060e4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x004060dc\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00406118\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x004060ba\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004060e9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00405ba8\nJMP 0x00405bc6\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x004060e9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004058e6\nJMP 0x00405fb0\nCMP R13,R11\nJNZ 0x0040586b\nTEST R8B,R8B\nJZ 0x004061b2\nCMP EBX,0x2\nJNZ 0x004061b2\nTEST R12,R12\nJNZ 0x004061b2\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x004055f0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x004061e6\nTEST R8B,R8B\nJNZ 0x004061e6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x004061e6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x004061d9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x004061d0\nCMP R12,RSI\nJNC 0x0040619d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040619d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00406158\nTEST RSI,RSI\nJZ 0x00406209\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x40aeb4\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x004057ac\nCALL 0x00401600\n'
p788
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 c2 c0 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 90 a9 40 00\nbf b6 ae 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf b8 ae 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 03 c0 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 b4 ae 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 b8 ae 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 b8 ae 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 b4 ae 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 63 be ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd e8 a9 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 97 be ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 77 be ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 31 b9 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 03 b9 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 39 bb ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 02 bb ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 b4 ae 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 d6 b3 ff ff\n'
p789
S'.text:00000000004055f0\n.text:00000000004055f1\n.text:00000000004055f3\n.text:00000000004055f5\n.text:00000000004055f7\n.text:00000000004055f9\n.text:00000000004055fa\n.text:0000000000405601\n.text:0000000000405604\n.text:0000000000405607\n.text:000000000040560a\n.text:000000000040560f\n.text:0000000000405614\n.text:0000000000405619\n.text:000000000040561e\n.text:0000000000405626\n.text:000000000040562a\n.text:0000000000405630\n.text:0000000000405638\n.text:000000000040563d\n.text:0000000000405645\n.text:000000000040564a\n.text:000000000040564e\n.text:0000000000405650\n.text:0000000000405653\n.text:0000000000405656\n.text:0000000000405659\n.text:000000000040565e\n.text:0000000000405661\n.text:0000000000405664\n.text:0000000000405667\n.text:000000000040566a\n.text:000000000040566c\n.text:000000000040566f\n.text:0000000000405674\n.text:0000000000405677\n.text:000000000040567c\n.text:0000000000405683\n.text:0000000000405688\n.text:000000000040568b\n.text:0000000000405690\n.text:0000000000405695\n.text:000000000040569a\n.text:000000000040569d\n.text:00000000004056a2\n.text:00000000004056a7\n.text:00000000004056ac\n.text:00000000004056ae\n.text:00000000004056b0\n.text:00000000004056b5\n.text:00000000004056b7\n.text:00000000004056ba\n.text:00000000004056bc\n.text:00000000004056be\n.text:00000000004056c0\n.text:00000000004056c3\n.text:00000000004056c5\n.text:00000000004056ca\n.text:00000000004056ce\n.text:00000000004056d4\n.text:00000000004056d7\n.text:00000000004056d9\n.text:00000000004056db\n.text:00000000004056dd\n.text:00000000004056e0\n.text:00000000004056e5\n.text:00000000004056e8\n.text:00000000004056ed\n.text:00000000004056f2\n.text:00000000004056f5\n.text:00000000004056f8\n.text:00000000004056fb\n.text:00000000004056fe\n.text:0000000000405703\n.text:0000000000405706\n.text:0000000000405709\n.text:000000000040570e\n.text:0000000000405711\n.text:0000000000405713\n.text:0000000000405716\n.text:0000000000405718\n.text:000000000040571a\n.text:000000000040571d\n.text:0000000000405722\n.text:0000000000405727\n.text:000000000040572c\n.text:000000000040572f\n.text:0000000000405735\n.text:0000000000405737\n.text:000000000040573a\n.text:000000000040573d\n.text:0000000000405740\n.text:0000000000405742\n.text:0000000000405744\n.text:0000000000405747\n.text:000000000040574a\n.text:000000000040574f\n.text:0000000000405752\n.text:0000000000405754\n.text:0000000000405757\n.text:0000000000405759\n.text:000000000040575e\n.text:0000000000405761\n.text:0000000000405766\n.text:000000000040576c\n.text:0000000000405772\n.text:0000000000405774\n.text:0000000000405779\n.text:000000000040577f\n.text:0000000000405782\n.text:0000000000405785\n.text:0000000000405788\n.text:000000000040578a\n.text:000000000040578f\n.text:0000000000405792\n.text:0000000000405798\n.text:000000000040579d\n.text:00000000004057a3\n.text:00000000004057a6\n.text:00000000004057a9\n.text:00000000004057ac\n.text:00000000004057b4\n.text:00000000004057b6\n.text:00000000004057b8\n.text:00000000004057bb\n.text:00000000004057bf\n.text:00000000004057c1\n.text:00000000004057c4\n.text:00000000004057c8\n.text:00000000004057ca\n.text:00000000004057cd\n.text:00000000004057d0\n.text:00000000004057d3\n.text:00000000004057d5\n.text:00000000004057d9\n.text:00000000004057db\n.text:00000000004057df\n.text:00000000004057e2\n.text:00000000004057e5\n.text:00000000004057e8\n.text:00000000004057ea\n.text:00000000004057ee\n.text:00000000004057f7\n.text:00000000004057fa\n.text:00000000004057fc\n.text:0000000000405800\n.text:0000000000405802\n.text:0000000000405806\n.text:0000000000405808\n.text:000000000040580b\n.text:000000000040580f\n.text:0000000000405811\n.text:0000000000405814\n.text:0000000000405818\n.text:000000000040581d\n.text:0000000000405820\n.text:0000000000405824\n.text:000000000040582c\n.text:000000000040582f\n.text:0000000000405832\n.text:0000000000405834\n.text:0000000000405838\n.text:000000000040583b\n.text:000000000040583d\n.text:0000000000405842\n.text:0000000000405846\n.text:000000000040584b\n.text:0000000000405850\n.text:0000000000405854\n.text:000000000040585a\n.text:0000000000405860\n.text:0000000000405865\n.text:000000000040586b\n.text:0000000000405870\n.text:0000000000405872\n.text:0000000000405877\n.text:000000000040587b\n.text:000000000040587d\n.text:0000000000405881\n.text:0000000000405883\n.text:0000000000405885\n.text:0000000000405888\n.text:000000000040588d\n.text:000000000040588f\n.text:0000000000405894\n.text:0000000000405899\n.text:000000000040589d\n.text:00000000004058a2\n.text:00000000004058a7\n.text:00000000004058aa\n.text:00000000004058ad\n.text:00000000004058af\n.text:00000000004058b1\n.text:00000000004058b6\n.text:00000000004058ba\n.text:00000000004058c0\n.text:00000000004058c2\n.text:00000000004058c4\n.text:00000000004058c6\n.text:00000000004058ce\n.text:00000000004058d3\n.text:00000000004058d9\n.text:00000000004058db\n.text:00000000004058e0\n.text:00000000004058e6\n.text:00000000004058ef\n.text:00000000004058f5\n.text:0000000000405900\n.text:0000000000405902\n.text:0000000000405905\n.text:0000000000405909\n.text:0000000000405911\n.text:0000000000405914\n.text:0000000000405919\n.text:000000000040591b\n.text:000000000040591e\n.text:0000000000405920\n.text:0000000000405925\n.text:0000000000405928\n.text:000000000040592d\n.text:0000000000405930\n.text:0000000000405935\n.text:0000000000405939\n.text:000000000040593e\n.text:0000000000405940\n.text:0000000000405942\n.text:0000000000405948\n.text:000000000040594d\n.text:0000000000405952\n.text:0000000000405955\n.text:000000000040595a\n.text:000000000040595e\n.text:0000000000405963\n.text:0000000000405968\n.text:000000000040596a\n.text:000000000040596c\n.text:0000000000405971\n.text:0000000000405973\n.text:0000000000405976\n.text:000000000040597c\n.text:000000000040597f\n.text:0000000000405985\n.text:0000000000405988\n.text:000000000040598e\n.text:0000000000405993\n.text:0000000000405997\n.text:000000000040599d\n.text:00000000004059a0\n.text:00000000004059a3\n.text:00000000004059a7\n.text:00000000004059aa\n.text:00000000004059ac\n.text:00000000004059af\n.text:00000000004059b5\n.text:00000000004059ba\n.text:00000000004059bf\n.text:00000000004059c5\n.text:00000000004059c8\n.text:00000000004059ce\n.text:00000000004059d1\n.text:00000000004059d3\n.text:00000000004059d5\n.text:00000000004059d7\n.text:00000000004059d9\n.text:00000000004059dc\n.text:00000000004059de\n.text:00000000004059e3\n.text:00000000004059e8\n.text:00000000004059eb\n.text:00000000004059ed\n.text:00000000004059f2\n.text:00000000004059f7\n.text:00000000004059fa\n.text:00000000004059fc\n.text:0000000000405a01\n.text:0000000000405a05\n.text:0000000000405a08\n.text:0000000000405a0b\n.text:0000000000405a0d\n.text:0000000000405a12\n.text:0000000000405a17\n.text:0000000000405a19\n.text:0000000000405a1c\n.text:0000000000405a1f\n.text:0000000000405a25\n.text:0000000000405a29\n.text:0000000000405a2c\n.text:0000000000405a32\n.text:0000000000405a36\n.text:0000000000405a39\n.text:0000000000405a3c\n.text:0000000000405a42\n.text:0000000000405a45\n.text:0000000000405a47\n.text:0000000000405a4c\n.text:0000000000405a51\n.text:0000000000405a54\n.text:0000000000405a56\n.text:0000000000405a5b\n.text:0000000000405a5f\n.text:0000000000405a64\n.text:0000000000405a6a\n.text:0000000000405a6f\n.text:0000000000405a71\n.text:0000000000405a76\n.text:0000000000405a7c\n.text:0000000000405a7e\n.text:0000000000405a80\n.text:0000000000405a82\n.text:0000000000405a84\n.text:0000000000405a89\n.text:0000000000405a8f\n.text:0000000000405a91\n.text:0000000000405a93\n.text:0000000000405a98\n.text:0000000000405a9e\n.text:0000000000405aa0\n.text:0000000000405aa2\n.text:0000000000405aa7\n.text:0000000000405aa9\n.text:0000000000405aaf\n.text:0000000000405ab4\n.text:0000000000405aba\n.text:0000000000405abd\n.text:0000000000405ac0\n.text:0000000000405ac6\n.text:0000000000405acb\n.text:0000000000405ace\n.text:0000000000405ad1\n.text:0000000000405ad7\n.text:0000000000405ada\n.text:0000000000405ae0\n.text:0000000000405ae3\n.text:0000000000405ae5\n.text:0000000000405aea\n.text:0000000000405aef\n.text:0000000000405af2\n.text:0000000000405af4\n.text:0000000000405af9\n.text:0000000000405afe\n.text:0000000000405b01\n.text:0000000000405b03\n.text:0000000000405b08\n.text:0000000000405b0c\n.text:0000000000405b0e\n.text:0000000000405b13\n.text:0000000000405b16\n.text:0000000000405b19\n.text:0000000000405b1f\n.text:0000000000405b22\n.text:0000000000405b28\n.text:0000000000405b2b\n.text:0000000000405b31\n.text:0000000000405b36\n.text:0000000000405b39\n.text:0000000000405b3f\n.text:0000000000405b42\n.text:0000000000405b48\n.text:0000000000405b4b\n.text:0000000000405b4d\n.text:0000000000405b51\n.text:0000000000405b57\n.text:0000000000405b5c\n.text:0000000000405b60\n.text:0000000000405b69\n.text:0000000000405b6f\n.text:0000000000405b74\n.text:0000000000405b79\n.text:0000000000405b7e\n.text:0000000000405b81\n.text:0000000000405b86\n.text:0000000000405b89\n.text:0000000000405b8c\n.text:0000000000405b91\n.text:0000000000405b96\n.text:0000000000405b9a\n.text:0000000000405b9f\n.text:0000000000405ba4\n.text:0000000000405ba8\n.text:0000000000405baa\n.text:0000000000405baf\n.text:0000000000405bb5\n.text:0000000000405bb8\n.text:0000000000405bba\n.text:0000000000405bbd\n.text:0000000000405bc0\n.text:0000000000405bc6\n.text:0000000000405bcb\n.text:0000000000405bce\n.text:0000000000405bd1\n.text:0000000000405bd4\n.text:0000000000405bd7\n.text:0000000000405bd9\n.text:0000000000405bdd\n.text:0000000000405bdf\n.text:0000000000405be4\n.text:0000000000405be9\n.text:0000000000405bef\n.text:0000000000405c00\n.text:0000000000405c05\n.text:0000000000405c07\n.text:0000000000405c0a\n.text:0000000000405c0c\n.text:0000000000405c0f\n.text:0000000000405c11\n.text:0000000000405c14\n.text:0000000000405c16\n.text:0000000000405c1b\n.text:0000000000405c20\n.text:0000000000405c23\n.text:0000000000405c25\n.text:0000000000405c2a\n.text:0000000000405c2e\n.text:0000000000405c36\n.text:0000000000405c39\n.text:0000000000405c3c\n.text:0000000000405c3e\n.text:0000000000405c42\n.text:0000000000405c50\n.text:0000000000405c54\n.text:0000000000405c5a\n.text:0000000000405c5d\n.text:0000000000405c5f\n.text:0000000000405c64\n.text:0000000000405c67\n.text:0000000000405c69\n.text:0000000000405c70\n.text:0000000000405c73\n.text:0000000000405c78\n.text:0000000000405c7b\n.text:0000000000405c80\n.text:0000000000405c82\n.text:0000000000405c85\n.text:0000000000405c8b\n.text:0000000000405c8e\n.text:0000000000405c90\n.text:0000000000405c94\n.text:0000000000405c96\n.text:0000000000405c98\n.text:0000000000405c9b\n.text:0000000000405c9d\n.text:0000000000405ca2\n.text:0000000000405ca7\n.text:0000000000405caa\n.text:0000000000405cac\n.text:0000000000405cb1\n.text:0000000000405cb6\n.text:0000000000405cb9\n.text:0000000000405cbb\n.text:0000000000405cc0\n.text:0000000000405cc4\n.text:0000000000405cc6\n.text:0000000000405cca\n.text:0000000000405ccd\n.text:0000000000405ccf\n.text:0000000000405cd4\n.text:0000000000405cd9\n.text:0000000000405cdc\n.text:0000000000405cde\n.text:0000000000405ce1\n.text:0000000000405ce4\n.text:0000000000405ce7\n.text:0000000000405ceb\n.text:0000000000405cf0\n.text:0000000000405cf3\n.text:0000000000405cf5\n.text:0000000000405cf8\n.text:0000000000405cfb\n.text:0000000000405cfe\n.text:0000000000405d01\n.text:0000000000405d05\n.text:0000000000405d09\n.text:0000000000405d0d\n.text:0000000000405d11\n.text:0000000000405d13\n.text:0000000000405d17\n.text:0000000000405d1a\n.text:0000000000405d20\n.text:0000000000405d24\n.text:0000000000405d28\n.text:0000000000405d2e\n.text:0000000000405d33\n.text:0000000000405d36\n.text:0000000000405d39\n.text:0000000000405d3e\n.text:0000000000405d41\n.text:0000000000405d43\n.text:0000000000405d46\n.text:0000000000405d4d\n.text:0000000000405d53\n.text:0000000000405d55\n.text:0000000000405d59\n.text:0000000000405d5f\n.text:0000000000405d64\n.text:0000000000405d69\n.text:0000000000405d6f\n.text:0000000000405d72\n.text:0000000000405d74\n.text:0000000000405d79\n.text:0000000000405d7f\n.text:0000000000405d84\n.text:0000000000405d86\n.text:0000000000405d8b\n.text:0000000000405d91\n.text:0000000000405d93\n.text:0000000000405d96\n.text:0000000000405d9a\n.text:0000000000405da0\n.text:0000000000405da5\n.text:0000000000405db1\n.text:0000000000405db5\n.text:0000000000405db7\n.text:0000000000405dba\n.text:0000000000405dbf\n.text:0000000000405dc4\n.text:0000000000405dc7\n.text:0000000000405dcb\n.text:0000000000405dd0\n.text:0000000000405dd2\n.text:0000000000405dd6\n.text:0000000000405dd8\n.text:0000000000405de0\n.text:0000000000405de5\n.text:0000000000405dea\n.text:0000000000405dee\n.text:0000000000405df2\n.text:0000000000405dfa\n.text:0000000000405dfd\n.text:0000000000405e02\n.text:0000000000405e05\n.text:0000000000405e08\n.text:0000000000405e0d\n.text:0000000000405e10\n.text:0000000000405e13\n.text:0000000000405e19\n.text:0000000000405e1d\n.text:0000000000405e27\n.text:0000000000405e2d\n.text:0000000000405e31\n.text:0000000000405e36\n.text:0000000000405e3c\n.text:0000000000405e40\n.text:0000000000405e43\n.text:0000000000405e47\n.text:0000000000405e49\n.text:0000000000405e4e\n.text:0000000000405e53\n.text:0000000000405e57\n.text:0000000000405e59\n.text:0000000000405e5e\n.text:0000000000405e63\n.text:0000000000405e67\n.text:0000000000405e6c\n.text:0000000000405e70\n.text:0000000000405e74\n.text:0000000000405e77\n.text:0000000000405e7a\n.text:0000000000405e7c\n.text:0000000000405e80\n.text:0000000000405e86\n.text:0000000000405e89\n.text:0000000000405e8c\n.text:0000000000405e8e\n.text:0000000000405e92\n.text:0000000000405e97\n.text:0000000000405e99\n.text:0000000000405e9b\n.text:0000000000405ea3\n.text:0000000000405ea8\n.text:0000000000405eab\n.text:0000000000405eb3\n.text:0000000000405eb6\n.text:0000000000405eb9\n.text:0000000000405ebe\n.text:0000000000405ec1\n.text:0000000000405ec3\n.text:0000000000405ec8\n.text:0000000000405ecd\n.text:0000000000405ed3\n.text:0000000000405ed8\n.text:0000000000405edb\n.text:0000000000405ee0\n.text:0000000000405ee6\n.text:0000000000405eeb\n.text:0000000000405ef0\n.text:0000000000405ef6\n.text:0000000000405efa\n.text:0000000000405efd\n.text:0000000000405f03\n.text:0000000000405f09\n.text:0000000000405f0f\n.text:0000000000405f14\n.text:0000000000405f16\n.text:0000000000405f19\n.text:0000000000405f1f\n.text:0000000000405f23\n.text:0000000000405f25\n.text:0000000000405f2f\n.text:0000000000405f33\n.text:0000000000405f39\n.text:0000000000405f3c\n.text:0000000000405f3e\n.text:0000000000405f44\n.text:0000000000405f47\n.text:0000000000405f49\n.text:0000000000405f4e\n.text:0000000000405f53\n.text:0000000000405f56\n.text:0000000000405f5a\n.text:0000000000405f5c\n.text:0000000000405f61\n.text:0000000000405f66\n.text:0000000000405f69\n.text:0000000000405f6b\n.text:0000000000405f70\n.text:0000000000405f75\n.text:0000000000405f78\n.text:0000000000405f7a\n.text:0000000000405f7f\n.text:0000000000405f83\n.text:0000000000405f85\n.text:0000000000405f88\n.text:0000000000405f8b\n.text:0000000000405f90\n.text:0000000000405f96\n.text:0000000000405f98\n.text:0000000000405f9d\n.text:0000000000405fa2\n.text:0000000000405fa8\n.text:0000000000405fb0\n.text:0000000000405fb5\n.text:0000000000405fb7\n.text:0000000000405fbc\n.text:0000000000405fbf\n.text:0000000000405fc1\n.text:0000000000405fc4\n.text:0000000000405fc6\n.text:0000000000405fc9\n.text:0000000000405fcc\n.text:0000000000405fcf\n.text:0000000000405fd1\n.text:0000000000405fd9\n.text:0000000000405fdc\n.text:0000000000405fde\n.text:0000000000405fe0\n.text:0000000000405ff0\n.text:0000000000405ff3\n.text:0000000000405ff5\n.text:0000000000405ff8\n.text:0000000000405ffe\n.text:0000000000406001\n.text:0000000000406003\n.text:0000000000406005\n.text:0000000000406007\n.text:0000000000406009\n.text:000000000040600c\n.text:000000000040600e\n.text:0000000000406013\n.text:0000000000406018\n.text:000000000040601b\n.text:000000000040601d\n.text:0000000000406022\n.text:0000000000406027\n.text:000000000040602a\n.text:000000000040602c\n.text:0000000000406031\n.text:0000000000406035\n.text:0000000000406038\n.text:000000000040603b\n.text:000000000040603d\n.text:0000000000406042\n.text:0000000000406045\n.text:0000000000406048\n.text:000000000040604a\n.text:0000000000406050\n.text:0000000000406054\n.text:0000000000406056\n.text:0000000000406058\n.text:000000000040605a\n.text:000000000040605d\n.text:000000000040605f\n.text:0000000000406064\n.text:0000000000406069\n.text:000000000040606c\n.text:000000000040606e\n.text:0000000000406073\n.text:0000000000406077\n.text:0000000000406079\n.text:000000000040607c\n.text:000000000040607e\n.text:0000000000406082\n.text:0000000000406085\n.text:0000000000406088\n.text:000000000040608c\n.text:0000000000406092\n.text:0000000000406097\n.text:000000000040609f\n.text:00000000004060a4\n.text:00000000004060a6\n.text:00000000004060ae\n.text:00000000004060b3\n.text:00000000004060b5\n.text:00000000004060ba\n.text:00000000004060bf\n.text:00000000004060c3\n.text:00000000004060c5\n.text:00000000004060ca\n.text:00000000004060cd\n.text:00000000004060d0\n.text:00000000004060d2\n.text:00000000004060da\n.text:00000000004060dc\n.text:00000000004060e4\n.text:00000000004060e9\n.text:00000000004060ed\n.text:00000000004060f2\n.text:00000000004060f7\n.text:00000000004060fb\n.text:0000000000406100\n.text:0000000000406105\n.text:0000000000406109\n.text:000000000040610d\n.text:0000000000406113\n.text:0000000000406118\n.text:0000000000406120\n.text:0000000000406122\n.text:0000000000406124\n.text:0000000000406128\n.text:000000000040612d\n.text:0000000000406133\n.text:0000000000406140\n.text:0000000000406143\n.text:0000000000406149\n.text:000000000040614c\n.text:000000000040614e\n.text:0000000000406151\n.text:0000000000406153\n.text:0000000000406156\n.text:0000000000406158\n.text:0000000000406160\n.text:0000000000406166\n.text:000000000040616a\n.text:000000000040616d\n.text:0000000000406171\n.text:0000000000406176\n.text:000000000040617a\n.text:000000000040617e\n.text:0000000000406181\n.text:0000000000406184\n.text:0000000000406187\n.text:000000000040618b\n.text:000000000040618f\n.text:0000000000406191\n.text:0000000000406196\n.text:000000000040619a\n.text:000000000040619d\n.text:00000000004061a0\n.text:00000000004061a7\n.text:00000000004061a8\n.text:00000000004061aa\n.text:00000000004061ac\n.text:00000000004061ae\n.text:00000000004061b0\n.text:00000000004061b1\n.text:00000000004061b2\n.text:00000000004061ba\n.text:00000000004061bd\n.text:00000000004061bf\n.text:00000000004061c2\n.text:00000000004061c4\n.text:00000000004061c6\n.text:00000000004061c8\n.text:00000000004061ca\n.text:00000000004061cd\n.text:00000000004061d0\n.text:00000000004061d3\n.text:00000000004061d5\n.text:00000000004061d9\n.text:00000000004061dc\n.text:00000000004061df\n.text:00000000004061e2\n.text:00000000004061e4\n.text:00000000004061e6\n.text:00000000004061e9\n.text:00000000004061eb\n.text:00000000004061f0\n.text:00000000004061f2\n.text:00000000004061f7\n.text:00000000004061fc\n.text:00000000004061ff\n.text:0000000000406201\n.text:0000000000406206\n.text:0000000000406209\n.text:000000000040620e\n.text:0000000000406211\n.text:0000000000406217\n.text:000000000040621d\n.text:0000000000406220\n.text:0000000000406225\n'
p790
tp791
sS'set_quoting_style'
p792
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p793
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p794
S'TEST RDI,RDI\nMOV EAX,0x60e3e0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p795
S'48 85 ff\nb8 e0 e3 60 00\n48 0f 45 c7\n89 30\nc3\n'
p796
S'.text:00000000004054d0\n.text:00000000004054d3\n.text:00000000004054d8\n.text:00000000004054dc\n.text:00000000004054de\n'
p797
tp798
sS'textdomain'
p799
(S'\n__stdcall textdomain()\n'
p800
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060e088)();\u000a  return;\u000a}\u000a\u000a
p801
S'JMP qword ptr [0x0060e088]\n'
p802
S'ff 25 e2 c9 20 00\n'
p803
S'.plt:00000000004016a0\n'
p804
tp805
sS'xmemdup'
p806
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p807
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p808
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x004071f0\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401830\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p809
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 dc a4 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p810
S'.text:0000000000407330\n.text:0000000000407332\n.text:0000000000407334\n.text:0000000000407335\n.text:0000000000407338\n.text:000000000040733b\n.text:000000000040733e\n.text:0000000000407343\n.text:0000000000407346\n.text:0000000000407349\n.text:000000000040734c\n.text:000000000040734f\n.text:0000000000407354\n.text:0000000000407357\n.text:0000000000407358\n.text:000000000040735a\n.text:000000000040735c\n'
p811
tp812
sS'valid_suffix'
p813
(S'\n__stdcall valid_suffix()\n'
p814
V\u000aint valid_suffix(void)\u000a\u000a{\u000a  void *pvVar1;\u000a  int __c;\u000a  \u000a  pvVar1 = memchr("KMGTPEZY",__c,9);\u000a  return (int)(uint)(pvVar1 != (void *)0x0);\u000a}\u000a\u000a
p815
S'PUSH RAX\nMOV EAX,EDI\nMOV EDI,0x409e0a\nMOV EDX,0x9\nMOV ESI,EAX\nCALL 0x004017a0\nXOR ECX,ECX\nTEST RAX,RAX\nSETNZ CL\nMOV EAX,ECX\nPOP RCX\nRET\n'
p816
S'50\n89 f8\nbf 0a 9e 40 00\nba 09 00 00 00\n89 c6\ne8 3c dc ff ff\n31 c9\n48 85 c0\n0f 95 c1\n89 c8\n59\nc3\n'
p817
S'.text:0000000000403b50\n.text:0000000000403b51\n.text:0000000000403b53\n.text:0000000000403b58\n.text:0000000000403b5d\n.text:0000000000403b5f\n.text:0000000000403b64\n.text:0000000000403b66\n.text:0000000000403b69\n.text:0000000000403b6c\n.text:0000000000403b6e\n.text:0000000000403b6f\n'
p818
tp819
sS'get_quoting_style'
p820
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p821
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p822
S'TEST RDI,RDI\nMOV EAX,0x60e3e0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p823
S'48 85 ff\nb8 e0 e3 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p824
S'.text:00000000004054c0\n.text:00000000004054c3\n.text:00000000004054c8\n.text:00000000004054cc\n.text:00000000004054ce\n'
p825
tp826
sS'ferror_unlocked'
p827
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p828
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060e120)();\u000a  return iVar1;\u000a}\u000a\u000a
p829
S'JMP qword ptr [0x0060e120]\n'
p830
S'ff 25 4a c9 20 00\n'
p831
S'.plt:00000000004017d0\n'
p832
tp833
sS'exit'
p834
(S'\n__stdcall exit(int __status)\n'
p835
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060e1f8)();\u000a  return;\u000a}\u000a\u000a
p836
S'JMP qword ptr [0x0060e1f8]\n'
p837
S'ff 25 72 c8 20 00\n'
p838
S'.plt:0000000000401980\n'
p839
tp840
sS'locale_charset'
p841
(S'\n__stdcall locale_charset()\n'
p842
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00407add:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00407add;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p843
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x004018a0\nTEST RAX,RAX\nMOV R14D,0x40b009\nCMOVNZ R14,RAX\nCALL 0x00407af0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00407ab5\nJMP 0x00407add\nMOV RDI,RBX\nCALL 0x004016f0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004016f0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00407add\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004017f0\nTEST EAX,EAX\nJZ 0x00407ad0\nCMP BPL,0x2a\nJNZ 0x00407a90\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00407a90\nMOV RDI,RBX\nCALL 0x004016f0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x40b7a8\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p844
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 32 9e ff ff\n48 85 c0\n41 be 09 b0 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 58 9c ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 4a 9c ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 30 9d ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 18 9c ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 a8 b7 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p845
S'.text:0000000000407a60\n.text:0000000000407a61\n.text:0000000000407a63\n.text:0000000000407a64\n.text:0000000000407a69\n.text:0000000000407a6e\n.text:0000000000407a71\n.text:0000000000407a77\n.text:0000000000407a7b\n.text:0000000000407a80\n.text:0000000000407a83\n.text:0000000000407a86\n.text:0000000000407a89\n.text:0000000000407a8b\n.text:0000000000407a90\n.text:0000000000407a93\n.text:0000000000407a98\n.text:0000000000407a9c\n.text:0000000000407aa1\n.text:0000000000407aa6\n.text:0000000000407aab\n.text:0000000000407ab0\n.text:0000000000407ab3\n.text:0000000000407ab5\n.text:0000000000407ab8\n.text:0000000000407abb\n.text:0000000000407ac0\n.text:0000000000407ac2\n.text:0000000000407ac4\n.text:0000000000407ac8\n.text:0000000000407aca\n.text:0000000000407ace\n.text:0000000000407ad0\n.text:0000000000407ad3\n.text:0000000000407ad8\n.text:0000000000407add\n.text:0000000000407ae1\n.text:0000000000407ae6\n.text:0000000000407aea\n.text:0000000000407aeb\n.text:0000000000407aed\n.text:0000000000407aee\n'
p846
tp847
sS'set_program_name'
p848
(S'\n__stdcall set_program_name(char * argv0)\n'
p849
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p850
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00405451\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401730\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040543b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x40a97c\nMOV EDX,0x7\nCALL 0x00401620\nTEST EAX,EAX\nJNZ 0x0040543b\nMOV ESI,0x40a984\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401620\nTEST EAX,EAX\nJNZ 0x00405438\nADD R14,0x3\nMOV qword ptr [0x0060e2e0],R14\nMOV RBX,R14\nMOV qword ptr [0x0060e3d0],RBX\nMOV qword ptr [0x0060e308],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060e320]\nMOV EDI,0x40a944\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401990\nCALL 0x00401600\n'
p851
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 47 c3 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 7c a9 40 00\nba 07 00 00 00\ne8 0d c2 ff ff\n85 c0\n75 24\nbe 84 a9 40 00\nba 03 00 00 00\n4c 89 f7\ne8 f7 c1 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 a8 8e 20 00\n4c 89 f3\n48 89 1d 8e 8f 20 00\n48 89 1d bf 8e 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d c8 8e 20 00\nbf 44 a9 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 24 c5 ff ff\ne8 8f c1 ff ff\n'
p852
S'.text:00000000004053d0\n.text:00000000004053d2\n.text:00000000004053d3\n.text:00000000004053d4\n.text:00000000004053d7\n.text:00000000004053da\n.text:00000000004053dc\n.text:00000000004053e1\n.text:00000000004053e4\n.text:00000000004053e9\n.text:00000000004053ec\n.text:00000000004053f0\n.text:00000000004053f4\n.text:00000000004053f7\n.text:00000000004053fa\n.text:00000000004053fe\n.text:0000000000405400\n.text:0000000000405404\n.text:0000000000405409\n.text:000000000040540e\n.text:0000000000405413\n.text:0000000000405415\n.text:0000000000405417\n.text:000000000040541c\n.text:0000000000405421\n.text:0000000000405424\n.text:0000000000405429\n.text:000000000040542b\n.text:000000000040542d\n.text:0000000000405431\n.text:0000000000405438\n.text:000000000040543b\n.text:0000000000405442\n.text:0000000000405449\n.text:000000000040544d\n.text:000000000040544e\n.text:0000000000405450\n.text:0000000000405451\n.text:0000000000405458\n.text:000000000040545d\n.text:0000000000405462\n.text:0000000000405467\n.text:000000000040546c\n'
p853
tp854
sS'strspn'
p855
(S'\n__stdcall strspn(char * __s, char * __accept)\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strspn(char *__s,char *__accept)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strspn_0060e100)();\u000a  return sVar1;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x0060e100]\n'
p858
S'ff 25 6a c9 20 00\n'
p859
S'.plt:0000000000401790\n'
p860
tp861
sS'quotearg_buffer'
p862
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p863
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p864
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60e3e0\nCMOVNZ RBP,R8\nCALL 0x00401610\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x004055f0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p865
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd e0 e3 60 00\n49 0f 45 e8\ne8 78 c0 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p866
S'.text:0000000000405570\n.text:0000000000405571\n.text:0000000000405573\n.text:0000000000405575\n.text:0000000000405577\n.text:0000000000405579\n.text:000000000040557a\n.text:000000000040557b\n.text:000000000040557e\n.text:0000000000405581\n.text:0000000000405584\n.text:0000000000405587\n.text:000000000040558a\n.text:000000000040558f\n.text:0000000000405593\n.text:0000000000405598\n.text:000000000040559b\n.text:000000000040559d\n.text:00000000004055a1\n.text:00000000004055a5\n.text:00000000004055a9\n.text:00000000004055ad\n.text:00000000004055b0\n.text:00000000004055b3\n.text:00000000004055b6\n.text:00000000004055b9\n.text:00000000004055bc\n.text:00000000004055bf\n.text:00000000004055c3\n.text:00000000004055c4\n.text:00000000004055c9\n.text:00000000004055cd\n.text:00000000004055d1\n.text:00000000004055d3\n.text:00000000004055d7\n.text:00000000004055d8\n.text:00000000004055da\n.text:00000000004055dc\n.text:00000000004055de\n.text:00000000004055e0\n.text:00000000004055e1\n'
p867
tp868
sS'quotearg_colon'
p869
(S'\n__stdcall quotearg_colon(char * arg)\n'
p870
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p871
S'MOV ESI,0x3a\nJMP 0x00406750\n'
p872
S'be 3a 00 00 00\neb e9\n'
p873
S'.text:0000000000406760\n.text:0000000000406765\n'
p874
tp875
sS'simple_strtod_fatal'
p876
(S'\n__stdcall simple_strtod_fatal(char * input_str)\n'
p877
V\u000avoid simple_strtod_fatal(char *input_str)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *arg;\u000a  bool bVar3;\u000a  \u000a  if ((uint)input_str < 7) {\u000a    switch((ulong)input_str & 0xffffffff) {\u000a    default:\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    case 2:\u000a      pcVar2 = "value too large to be converted: %s";\u000a      break;\u000a    case 3:\u000a      pcVar2 = "invalid number: %s";\u000a      break;\u000a    case 4:\u000a      pcVar2 = "rejecting suffix in input: %s (consider using --from)";\u000a      break;\u000a    case 5:\u000a      pcVar2 = "invalid suffix in input: %s";\u000a      break;\u000a    case 6:\u000a      pcVar2 = "missing \u005c'i\u005c' suffix in input: %s (e.g Ki/Mi/Gi)";\u000a    }\u000a  }\u000a  else {\u000a    pcVar2 = (char *)0x0;\u000a  }\u000a  if (inval_style == inval_ignore) {\u000a    return;\u000a  }\u000a  bVar3 = conv_exit_code == 0;\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quote(arg);\u000a  error((ulong)((uint)bVar3 * 2),0,uVar1,pcVar2);\u000a  return;\u000a}\u000a\u000a
p878
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nCMP EDI,0x6\nJA 0x00403995\nMOV EAX,EDI\nJMP qword ptr [0x408418 + RAX*0x8]\nMOV ESI,0x40a187\nCMP dword ptr [0x0060e378],0x3\nJZ 0x004039e0\nJMP 0x004039e5\nXOR ESI,ESI\nCMP dword ptr [0x0060e378],0x3\nJZ 0x004039e0\nJMP 0x004039e5\nMOV ESI,0x40a1ab\nCMP dword ptr [0x0060e378],0x3\nJZ 0x004039e0\nJMP 0x004039e5\nMOV ESI,0x40a1be\nCMP dword ptr [0x0060e378],0x3\nJZ 0x004039e0\nJMP 0x004039e5\nMOV ESI,0x40a1f4\nCMP dword ptr [0x0060e378],0x3\nJZ 0x004039e0\nJMP 0x004039e5\nMOV ESI,0x40a210\nCMP dword ptr [0x0060e378],0x3\nJNZ 0x004039e5\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV AL,byte ptr [0x0060e380]\nXOR EBP,EBP\nTEST AL,AL\nSETZ BPL\nADD EBP,EBP\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RBX,RAX\nMOV RDI,R14\nCALL 0x004068c0\nMOV RCX,RAX\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,EBP\nMOV RDX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401920\nCALL 0x00401600\n'
p879
S'55\n41 56\n53\n49 89 f6\n83 ff 06\n77 19\n89 f8\nff 24 c5 18 84 40 00\nbe 87 a1 40 00\n83 3d e7 a9 20 00 03\n74 4d\neb 50\n31 f6\n83 3d da a9 20 00 03\n74 40\neb 43\nbe ab a1 40 00\n83 3d ca a9 20 00 03\n74 30\neb 33\nbe be a1 40 00\n83 3d ba a9 20 00 03\n74 20\neb 23\nbe f4 a1 40 00\n83 3d aa a9 20 00 03\n74 10\neb 13\nbe 10 a2 40 00\n83 3d 9a a9 20 00 03\n75 05\n5b\n41 5e\n5d\nc3\n8a 05 95 a9 20 00\n31 ed\n84 c0\n40 0f 94 c5\n01 ed\n31 ff\nba 05 00 00 00\ne8 cf dc ff ff\n48 89 c3\n4c 89 f7\ne8 b4 2e 00 00\n48 89 c1\n31 f6\n31 c0\n89 ef\n48 89 da\n5b\n41 5e\n5d\ne9 ff de ff ff\ne8 da db ff ff\n'
p880
S'.text:0000000000403970\n.text:0000000000403971\n.text:0000000000403973\n.text:0000000000403974\n.text:0000000000403977\n.text:000000000040397a\n.text:000000000040397c\n.text:000000000040397e\n.text:0000000000403985\n.text:000000000040398a\n.text:0000000000403991\n.text:0000000000403993\n.text:0000000000403995\n.text:0000000000403997\n.text:000000000040399e\n.text:00000000004039a0\n.text:00000000004039a2\n.text:00000000004039a7\n.text:00000000004039ae\n.text:00000000004039b0\n.text:00000000004039b2\n.text:00000000004039b7\n.text:00000000004039be\n.text:00000000004039c0\n.text:00000000004039c2\n.text:00000000004039c7\n.text:00000000004039ce\n.text:00000000004039d0\n.text:00000000004039d2\n.text:00000000004039d7\n.text:00000000004039de\n.text:00000000004039e0\n.text:00000000004039e1\n.text:00000000004039e3\n.text:00000000004039e4\n.text:00000000004039e5\n.text:00000000004039eb\n.text:00000000004039ed\n.text:00000000004039ef\n.text:00000000004039f3\n.text:00000000004039f5\n.text:00000000004039f7\n.text:00000000004039fc\n.text:0000000000403a01\n.text:0000000000403a04\n.text:0000000000403a07\n.text:0000000000403a0c\n.text:0000000000403a0f\n.text:0000000000403a11\n.text:0000000000403a13\n.text:0000000000403a15\n.text:0000000000403a18\n.text:0000000000403a19\n.text:0000000000403a1b\n.text:0000000000403a1c\n.text:0000000000403a21\n'
p881
tp882
sS'xstrtol'
p883
(S'\n__stdcall xstrtol(char * s, char * * ptr, long * val, char * valid_suffixes)\n'
p884
V\u000astrtol_error xstrtol(char *s,char **ptr,long *val,char *valid_suffixes)\u000a\u000a{\u000a  char cVar1;\u000a  strtol_error sVar2;\u000a  int *piVar3;\u000a  char *pcVar4;\u000a  char *pcVar5;\u000a  long lVar6;\u000a  char *__s;\u000a  char **__endptr;\u000a  strtol_error sVar7;\u000a  strtol_error sVar8;\u000a  long local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtol(const char *, char **, int, long *, const char *)");\u000a  }\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  piVar3 = __errno_location();\u000a  *piVar3 = 0;\u000a  local_40 = strtol(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar1 = **__endptr;\u000a    if (cVar1 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar4 = strchr(__s,(int)cVar1);\u000a    if (pcVar4 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_40 = 1;\u000a    sVar7 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar3 == 0) {\u000a      sVar7 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar3 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar7 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar8 = sVar7;\u000a    if (__s == (char *)0x0) goto LAB_004075f4;\u000a  }\u000a  pcVar4 = *__endptr;\u000a  sVar8 = sVar7;\u000a  if (*pcVar4 == 0) goto LAB_004075f4;\u000a  pcVar5 = strchr(__s,(int)*pcVar4);\u000a  if (pcVar5 == (char *)0x0) goto switchD_00407509_caseD_43;\u000a  pcVar5 = strchr(__s,0x30);\u000a  if (pcVar5 == (char *)0x0) {\u000aLAB_004074e7:\u000a    lVar6 = 1;\u000a  }\u000a  else {\u000a    cVar1 = pcVar4[1];\u000a    if ((cVar1 == 'B') || (cVar1 == 'D')) {\u000a      lVar6 = 2;\u000a    }\u000a    else {\u000a      if (cVar1 != 'i') goto LAB_004074e7;\u000a      lVar6 = (ulong)(pcVar4[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar2 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_004075d1;\u000a  default:\u000aswitchD_00407509_caseD_43:\u000a    *(long *)valid_suffixes = local_40;\u000a    return sVar7 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'P':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'Y':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'Z':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'b':\u000a    goto LAB_004075d1;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_004075d1:\u000a    sVar2 = bkm_scale(&local_40);\u000a  }\u000a  pcVar4 = *__endptr;\u000a  *__endptr = pcVar4 + lVar6;\u000a  sVar8 = sVar2 | sVar7 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar4[lVar6] == 0) {\u000a    sVar8 = sVar2 | sVar7;\u000a  }\u000aLAB_004075f4:\u000a  *(long *)valid_suffixes = local_40;\u000a  return sVar8;\u000a}\u000a\u000a
p885
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13,R8\nMOV R14,RCX\nMOV EBP,EDX\nMOV R15,RDI\nCMP EBP,0x25\nJNC 0x0040760e\nTEST RSI,RSI\nLEA R12,[RSP + 0x10]\nCMOVNZ R12,RSI\nCALL 0x00401610\nMOV RBX,RAX\nMOV dword ptr [RBX],0x0\nMOV RDI,R15\nMOV RSI,R12\nMOV EDX,EBP\nCALL 0x00401820\nMOV qword ptr [RSP + 0x8],RAX\nMOV RAX,qword ptr [R12]\nCMP RAX,R15\nJZ 0x0040744c\nMOV EAX,dword ptr [RBX]\nTEST EAX,EAX\nJZ 0x00407485\nMOV R15D,0x4\nCMP EAX,0x22\nJNZ 0x004075fc\nMOV R15D,0x1\nTEST R13,R13\nJNZ 0x00407491\nJMP 0x004075f4\nMOV R15D,0x4\nTEST R13,R13\nJZ 0x004075fc\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x004075fc\nMOV RDI,R13\nCALL 0x00401720\nTEST RAX,RAX\nJZ 0x004075fc\nMOV qword ptr [RSP + 0x8],0x1\nXOR R15D,R15D\nJMP 0x00407491\nXOR R15D,R15D\nTEST R13,R13\nJZ 0x004075f4\nMOV RBX,qword ptr [R12]\nMOVSX ESI,byte ptr [RBX]\nTEST ESI,ESI\nJZ 0x004075f4\nMOV RDI,R13\nCALL 0x00401720\nTEST RAX,RAX\nJZ 0x00407524\nMOV ESI,0x30\nMOV RDI,R13\nCALL 0x00401720\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x004074e7\nMOVSX EAX,byte ptr [RBX + 0x1]\nCMP EAX,0x42\nJZ 0x004074ee\nCMP EAX,0x44\nJZ 0x004074ee\nCMP EAX,0x69\nJNZ 0x004074e7\nXOR EAX,EAX\nCMP byte ptr [RBX + 0x2],0x42\nSETZ AL\nLEA RBX,[RAX + RAX*0x1 + 0x1]\nJMP 0x004074f8\nMOV EBX,0x1\nJMP 0x004074f8\nMOV ESI,0x3e8\nMOV EBX,0x2\nMOV RAX,qword ptr [R12]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00407524\nXOR EAX,EAX\nJMP qword ptr [0x40b250 + RCX*0x8]\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x3\nCALL 0x00407680\nJMP 0x004075d6\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [R14],RAX\nOR R15D,0x2\nJMP 0x004075fc\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x1\nCALL 0x00407680\nJMP 0x004075d6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x2\nCALL 0x00407680\nJMP 0x004075d6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x4\nCALL 0x00407680\nJMP 0x004075d6\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x400\nJMP 0x004075d1\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x6\nCALL 0x00407680\nJMP 0x004075d6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x5\nCALL 0x00407680\nJMP 0x004075d6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x8\nCALL 0x00407680\nJMP 0x004075d6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x7\nCALL 0x00407680\nJMP 0x004075d6\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x200\nJMP 0x004075d1\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x2\nCALL 0x00407630\nOR EAX,R15D\nMOV RCX,qword ptr [R12]\nLEA RDX,[RCX + RBX*0x1]\nMOV qword ptr [R12],RDX\nMOV R15D,EAX\nOR R15D,0x2\nCMP byte ptr [RCX + RBX*0x1],0x0\nCMOVZ R15D,EAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [R14],RAX\nMOV EAX,R15D\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40b400\nMOV ESI,0x40b622\nMOV EDX,0x60\nMOV ECX,0x40b426\nCALL 0x00401750\n'
p886
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c5\n49 89 ce\n89 d5\n49 89 ff\n83 fd 25\n0f 83 1c 02 00 00\n48 85 f6\n4c 8d 64 24 10\n4c 0f 45 e6\ne8 0d a2 ff ff\n48 89 c3\nc7 03 00 00 00 00\n4c 89 ff\n4c 89 e6\n89 ea\ne8 07 a4 ff ff\n48 89 44 24 08\n49 8b 04 24\n4c 39 f8\n74 25\n8b 03\n85 c0\n74 58\n41 bf 04 00 00 00\n83 f8 22\n0f 85 c0 01 00 00\n41 bf 01 00 00 00\n4d 85 ed\n75 4a\ne9 a8 01 00 00\n41 bf 04 00 00 00\n4d 85 ed\n0f 84 a1 01 00 00\n0f be 30\n85 f6\n0f 84 96 01 00 00\n4c 89 ef\ne8 b2 a2 ff ff\n48 85 c0\n0f 84 85 01 00 00\n48 c7 44 24 08 01 00 00 00\n45 31 ff\neb 0c\n45 31 ff\n4d 85 ed\n0f 84 63 01 00 00\n49 8b 1c 24\n0f be 33\n85 f6\n0f 84 54 01 00 00\n4c 89 ef\ne8 78 a2 ff ff\n48 85 c0\n74 77\nbe 30 00 00 00\n4c 89 ef\ne8 66 a2 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 43 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7b 02 42\n0f 94 c0\n48 8d 5c 00 01\neb 11\nbb 01 00 00 00\neb 0a\nbe e8 03 00 00\nbb 02 00 00 00\n49 8b 04 24\n0f be 08\n83 c1 be\n83 f9 35\n77 1d\n31 c0\nff 24 cd 50 b2 40 00\n48 8d 7c 24 08\nba 03 00 00 00\ne8 61 01 00 00\ne9 b2 00 00 00\n48 8b 44 24 08\n49 89 06\n41 83 cf 02\ne9 c7 00 00 00\n48 8d 7c 24 08\nba 01 00 00 00\ne8 3c 01 00 00\ne9 8d 00 00 00\n48 8d 7c 24 08\nba 02 00 00 00\ne8 28 01 00 00\neb 7c\n48 8d 7c 24 08\nba 04 00 00 00\ne8 17 01 00 00\neb 6b\n48 8d 7c 24 08\nbe 00 04 00 00\neb 5a\n48 8d 7c 24 08\nba 06 00 00 00\ne8 fa 00 00 00\neb 4e\n48 8d 7c 24 08\nba 05 00 00 00\ne8 e9 00 00 00\neb 3d\n48 8d 7c 24 08\nba 08 00 00 00\ne8 d8 00 00 00\neb 2c\n48 8d 7c 24 08\nba 07 00 00 00\ne8 c7 00 00 00\neb 1b\n48 8d 7c 24 08\nbe 00 02 00 00\neb 0a\n48 8d 7c 24 08\nbe 02 00 00 00\ne8 5a 00 00 00\n44 09 f8\n49 8b 0c 24\n48 8d 14 19\n49 89 14 24\n41 89 c7\n41 83 cf 02\n80 3c 19 00\n44 0f 44 f8\n48 8b 44 24 08\n49 89 06\n44 89 f8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 00 b4 40 00\nbe 22 b6 40 00\nba 60 00 00 00\nb9 26 b4 40 00\ne8 29 a1 ff ff\n'
p887
S'.text:00000000004073d0\n.text:00000000004073d1\n.text:00000000004073d3\n.text:00000000004073d5\n.text:00000000004073d7\n.text:00000000004073d9\n.text:00000000004073da\n.text:00000000004073de\n.text:00000000004073e1\n.text:00000000004073e4\n.text:00000000004073e6\n.text:00000000004073e9\n.text:00000000004073ec\n.text:00000000004073f2\n.text:00000000004073f5\n.text:00000000004073fa\n.text:00000000004073fe\n.text:0000000000407403\n.text:0000000000407406\n.text:000000000040740c\n.text:000000000040740f\n.text:0000000000407412\n.text:0000000000407414\n.text:0000000000407419\n.text:000000000040741e\n.text:0000000000407422\n.text:0000000000407425\n.text:0000000000407427\n.text:0000000000407429\n.text:000000000040742b\n.text:000000000040742d\n.text:0000000000407433\n.text:0000000000407436\n.text:000000000040743c\n.text:0000000000407442\n.text:0000000000407445\n.text:0000000000407447\n.text:000000000040744c\n.text:0000000000407452\n.text:0000000000407455\n.text:000000000040745b\n.text:000000000040745e\n.text:0000000000407460\n.text:0000000000407466\n.text:0000000000407469\n.text:000000000040746e\n.text:0000000000407471\n.text:0000000000407477\n.text:0000000000407480\n.text:0000000000407483\n.text:0000000000407485\n.text:0000000000407488\n.text:000000000040748b\n.text:0000000000407491\n.text:0000000000407495\n.text:0000000000407498\n.text:000000000040749a\n.text:00000000004074a0\n.text:00000000004074a3\n.text:00000000004074a8\n.text:00000000004074ab\n.text:00000000004074ad\n.text:00000000004074b2\n.text:00000000004074b5\n.text:00000000004074ba\n.text:00000000004074bf\n.text:00000000004074c2\n.text:00000000004074c4\n.text:00000000004074c8\n.text:00000000004074cb\n.text:00000000004074cd\n.text:00000000004074d0\n.text:00000000004074d2\n.text:00000000004074d5\n.text:00000000004074d7\n.text:00000000004074d9\n.text:00000000004074dd\n.text:00000000004074e0\n.text:00000000004074e5\n.text:00000000004074e7\n.text:00000000004074ec\n.text:00000000004074ee\n.text:00000000004074f3\n.text:00000000004074f8\n.text:00000000004074fc\n.text:00000000004074ff\n.text:0000000000407502\n.text:0000000000407505\n.text:0000000000407507\n.text:0000000000407509\n.text:0000000000407510\n.text:0000000000407515\n.text:000000000040751a\n.text:000000000040751f\n.text:0000000000407524\n.text:0000000000407529\n.text:000000000040752c\n.text:0000000000407530\n.text:0000000000407535\n.text:000000000040753a\n.text:000000000040753f\n.text:0000000000407544\n.text:0000000000407549\n.text:000000000040754e\n.text:0000000000407553\n.text:0000000000407558\n.text:000000000040755a\n.text:000000000040755f\n.text:0000000000407564\n.text:0000000000407569\n.text:000000000040756b\n.text:0000000000407570\n.text:0000000000407575\n.text:0000000000407577\n.text:000000000040757c\n.text:0000000000407581\n.text:0000000000407586\n.text:0000000000407588\n.text:000000000040758d\n.text:0000000000407592\n.text:0000000000407597\n.text:0000000000407599\n.text:000000000040759e\n.text:00000000004075a3\n.text:00000000004075a8\n.text:00000000004075aa\n.text:00000000004075af\n.text:00000000004075b4\n.text:00000000004075b9\n.text:00000000004075bb\n.text:00000000004075c0\n.text:00000000004075c5\n.text:00000000004075c7\n.text:00000000004075cc\n.text:00000000004075d1\n.text:00000000004075d6\n.text:00000000004075d9\n.text:00000000004075dd\n.text:00000000004075e1\n.text:00000000004075e5\n.text:00000000004075e8\n.text:00000000004075ec\n.text:00000000004075f0\n.text:00000000004075f4\n.text:00000000004075f9\n.text:00000000004075fc\n.text:00000000004075ff\n.text:0000000000407603\n.text:0000000000407604\n.text:0000000000407606\n.text:0000000000407608\n.text:000000000040760a\n.text:000000000040760c\n.text:000000000040760d\n.text:000000000040760e\n.text:0000000000407613\n.text:0000000000407618\n.text:000000000040761d\n.text:0000000000407622\n'
p888
tp889
sS'print_padded_number'
p890
(S'\n__stdcall print_padded_number()\n'
p891
V\u000aundefined8 print_padded_number(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RAX;\u000a  undefined4 extraout_var;\u000a  \u000a  if (format_str_prefix != (char *)0x0) {\u000a    fputs_unlocked(format_str_prefix,stdout);\u000a  }\u000a  fputs_unlocked(padding_buffer,stdout);\u000a  if (format_str_suffix != (char *)0x0) {\u000a    iVar1 = fputs_unlocked(format_str_suffix,stdout);\u000a    return CONCAT44(extraout_var,iVar1);\u000a  }\u000a  return in_RAX;\u000a}\u000a\u000a
p892
S'PUSH RAX\nMOV RDI,qword ptr [0x0060e390]\nTEST RDI,RDI\nJZ 0x00403589\nMOV RSI,qword ptr [0x0060e2e8]\nCALL 0x004017c0\nMOV RDI,qword ptr [0x0060e3a8]\nMOV RSI,qword ptr [0x0060e2e8]\nCALL 0x004017c0\nMOV RDI,qword ptr [0x0060e398]\nTEST RDI,RDI\nJZ 0x004035b5\nMOV RSI,qword ptr [0x0060e2e8]\nPOP RAX\nJMP 0x004017c0\nPOP RAX\nRET\n'
p893
S'50\n48 8b 3d 18 ae 20 00\n48 85 ff\n74 0c\n48 8b 35 64 ad 20 00\ne8 37 e2 ff ff\n48 8b 3d 18 ae 20 00\n48 8b 35 51 ad 20 00\ne8 24 e2 ff ff\n48 8b 3d f5 ad 20 00\n48 85 ff\n74 0d\n48 8b 35 39 ad 20 00\n58\ne9 0b e2 ff ff\n58\nc3\n'
p894
S'.text:0000000000403570\n.text:0000000000403571\n.text:0000000000403578\n.text:000000000040357b\n.text:000000000040357d\n.text:0000000000403584\n.text:0000000000403589\n.text:0000000000403590\n.text:0000000000403597\n.text:000000000040359c\n.text:00000000004035a3\n.text:00000000004035a6\n.text:00000000004035a8\n.text:00000000004035af\n.text:00000000004035b0\n.text:00000000004035b5\n.text:00000000004035b6\n'
p895
tp896
sS'rpl_fflush'
p897
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p898
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060e180)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p899
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00407e2d\nMOV RDI,RBX\nCALL 0x004018c0\nTEST EAX,EAX\nJZ 0x00407e2d\nMOV RDI,RBX\nCALL 0x00407e40\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401890\n'
p900
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 9f 9a ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 5a 9a ff ff\n'
p901
S'.text:0000000000407e10\n.text:0000000000407e11\n.text:0000000000407e14\n.text:0000000000407e17\n.text:0000000000407e19\n.text:0000000000407e1c\n.text:0000000000407e21\n.text:0000000000407e23\n.text:0000000000407e25\n.text:0000000000407e28\n.text:0000000000407e2d\n.text:0000000000407e30\n.text:0000000000407e31\n'
p902
tp903
sS'__assert_fail'
p904
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p905
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060e0e0)();\u000a  return;\u000a}\u000a\u000a
p906
S'JMP qword ptr [0x0060e0e0]\n'
p907
S'ff 25 8a c9 20 00\n'
p908
S'.plt:0000000000401750\n'
p909
tp910
sS'prepare_padded_number'
p911
(S'\n__stdcall prepare_padded_number(longdouble val, size_t precision)\n'
p912
V\u000aint prepare_padded_number(longdouble val,size_t precision)\u000a\u000a{\u000a  uint uVar1;\u000a  long lVar2;\u000a  undefined8 uVar3;\u000a  size_t sVar4;\u000a  char *pcVar5;\u000a  longdouble val_00;\u000a  uint x;\u000a  char buf [128];\u000a  uint local_a4;\u000a  size_t local_a0;\u000a  char local_98 [128];\u000a  \u000a  if (user_precision != -1) {\u000a    precision = user_precision;\u000a  }\u000a  val_00 = expld(val,(uint *)0xa);\u000a  if ((scale_to == scale_none) && (0x12 < (ulong)local_a4 + precision)) {\u000a    if (inval_style == inval_ignore) {\u000a      return 0;\u000a    }\u000a    uVar1 = (uint)(conv_exit_code == 0) * 2;\u000a    if (precision != 0) {\u000a      uVar3 = dcgettext(0,\u000a                        "value/precision too large to be printed: \u005c'%Lg/%lu\u005c' (consider using --to)"\u000a                        ,5);\u000a      error((ulong)uVar1,0,uVar3,precision);\u000a      return 0;\u000a    }\u000a    uVar3 = dcgettext(0,"value too large to be printed: \u005c'%Lg\u005c' (consider using --to)",5);\u000a  }\u000a  else {\u000a    if (local_a4 < 0x1b) {\u000a      double_to_human(val_00);\u000a      pcVar5 = suffix;\u000a      if (suffix != (char *)0x0) {\u000a        sVar4 = strlen(local_98);\u000a        __strncat_chk(local_98,pcVar5,0x7f - sVar4,0x80);\u000a      }\u000a      uVar3 = stderr;\u000a      if (dev_debug == 1) {\u000a        pcVar5 = quote(local_98);\u000a        __fprintf_chk(uVar3,1,"formatting output:\u005cn  value: %Lf\u005cn  humanized: %s\u005cn",pcVar5);\u000a      }\u000a      lVar2 = padding_width;\u000a      if ((padding_width == 0) || (sVar4 = strlen(local_98), (ulong)lVar2 <= sVar4)) {\u000a        sVar4 = strlen(local_98);\u000a        setup_padding_buffer(sVar4 + 1);\u000a        strcpy(padding_buffer,local_98);\u000a      }\u000a      else {\u000a        local_a0 = padding_width;\u000a        mbsalign(local_98,padding_buffer,padding_buffer_size,&local_a0);\u000a        uVar3 = stderr;\u000a        if (dev_debug == 1) {\u000a          pcVar5 = quote(padding_buffer);\u000a          __fprintf_chk(uVar3,1,"  After padding: %s\u005cn",pcVar5);\u000a        }\u000a      }\u000a      return 1;\u000a    }\u000a    if (inval_style == inval_ignore) {\u000a      return 0;\u000a    }\u000a    uVar1 = (uint)(conv_exit_code == 0) * 2;\u000a    uVar3 = dcgettext(0,"value too large to be printed: \u005c'%Lg\u005c' (cannot handle values > 999Y)",5);\u000a  }\u000a  error((ulong)uVar1,0,uVar3,uVar3);\u000a  return 0;\u000a}\u000a\u000a
p913
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0xb0\nMOV RBX,RDI\nFLD tword ptr [0xd0 + RSP]\nMOV RAX,qword ptr [0x0060e260]\nCMP RAX,-0x1\nCMOVNZ RBX,RAX\nFLD ST0\nFSTP tword ptr [RSP + 0x18]\nFSTP tword ptr [RSP]\nLEA RSI,[RSP + 0x24]\nMOV EDI,0xa\nCALL 0x00403d20\nFSTP ST0\nMOV EAX,dword ptr [RSP + 0x24]\nCMP dword ptr [0x0060e340],0x0\nJNZ 0x004033a2\nLEA RCX,[RAX + RBX*0x1]\nCMP RCX,0x13\nJC 0x004033a2\nXOR R14D,R14D\nCMP dword ptr [0x0060e378],0x3\nJZ 0x0040353d\nMOV AL,byte ptr [0x0060e380]\nXOR EBP,EBP\nTEST AL,AL\nSETZ BPL\nADD EBP,EBP\nXOR R14D,R14D\nXOR EDI,EDI\nTEST RBX,RBX\nJZ 0x0040354c\nMOV ESI,0x40a23f\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nFLD tword ptr [RSP + 0x18]\nFSTP tword ptr [RSP]\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,EBP\nMOV RDX,RCX\nMOV RCX,RBX\nCALL 0x00401920\nJMP 0x0040353d\nCMP EAX,0x1b\nJC 0x004033f7\nXOR R14D,R14D\nCMP dword ptr [0x0060e378],0x3\nJZ 0x0040353d\nMOV AL,byte ptr [0x0060e380]\nXOR EBX,EBX\nTEST AL,AL\nSETZ BL\nADD EBX,EBX\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x40a2c3\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nFLD tword ptr [RSP + 0x18]\nFSTP tword ptr [RSP]\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,EBX\nMOV RDX,RCX\nCALL 0x00401920\nJMP 0x0040353d\nMOV EDX,dword ptr [0x0060e340]\nMOVZX ECX,byte ptr [0x0060e344]\nMOV R8D,dword ptr [0x0060e258]\nFLD tword ptr [RSP + 0x18]\nFSTP tword ptr [RSP]\nLEA RSI,[RSP + 0x30]\nMOV EDI,EBX\nCALL 0x00403dd0\nMOV RBX,qword ptr [0x0060e358]\nTEST RBX,RBX\nJZ 0x0040344f\nLEA RBP,[RSP + 0x30]\nMOV RDI,RBP\nCALL 0x004016f0\nMOV EDX,0x7f\nSUB RDX,RAX\nMOV ECX,0x80\nMOV RDI,RBP\nMOV RSI,RBX\nCALL 0x004019b0\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x00403487\nMOV RBX,qword ptr [0x0060e320]\nLEA RDI,[RSP + 0x30]\nCALL 0x004068c0\nMOV RCX,RAX\nFLD tword ptr [RSP + 0x18]\nFSTP tword ptr [RSP]\nMOV ESI,0x1\nMOV EDX,0x40a306\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x004019a0\nMOV RBX,qword ptr [0x0060e348]\nTEST RBX,RBX\nJZ 0x00403512\nLEA RDI,[RSP + 0x30]\nCALL 0x004016f0\nCMP RAX,RBX\nJNC 0x00403512\nMOV RAX,qword ptr [0x0060e348]\nMOV qword ptr [RSP + 0x28],RAX\nMOV RSI,qword ptr [0x0060e3a8]\nMOV RDX,qword ptr [0x0060e3a0]\nMOVZX R8D,byte ptr [0x0060e350]\nXOR R8D,0x1\nLEA RDI,[RSP + 0x30]\nLEA RCX,[RSP + 0x28]\nMOV R9D,0x2\nCALL 0x00404f50\nCMP byte ptr [0x0060e361],0x1\nJNZ 0x00403537\nMOV RBX,qword ptr [0x0060e320]\nMOV RDI,qword ptr [0x0060e3a8]\nCALL 0x004068c0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40a337\nXOR EAX,EAX\nMOV RDI,RBX\nCALL 0x004019a0\nJMP 0x00403537\nLEA RBX,[RSP + 0x30]\nMOV RDI,RBX\nCALL 0x004016f0\nLEA RDI,[RAX + 0x1]\nCALL 0x00402df0\nMOV RDI,qword ptr [0x0060e3a8]\nMOV RSI,RBX\nCALL 0x00401640\nMOV R14D,0x1\nMOV EAX,R14D\nADD RSP,0xb0\nPOP RBX\nPOP R14\nPOP RBP\nRET\nMOV ESI,0x40a288\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nFLD tword ptr [RSP + 0x18]\nFSTP tword ptr [RSP]\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,EBP\nJMP 0x004033ea\n'
p914
S'55\n41 56\n53\n48 81 ec b0 00 00 00\n48 89 fb\ndb ac 24 d0 00 00 00\n48 8b 05 54 af 20 00\n48 83 f8 ff\n48 0f 45 d8\nd9 c0\ndb 7c 24 18\ndb 3c 24\n48 8d 74 24 24\nbf 0a 00 00 00\ne8 f4 09 00 00\ndd d8\n8b 44 24 24\n83 3d 07 b0 20 00 00\n75 67\n48 8d 0c 18\n48 83 f9 13\n72 5d\n45 31 f6\n83 3d 29 b0 20 00 03\n0f 84 e8 01 00 00\n8a 05 25 b0 20 00\n31 ed\n84 c0\n40 0f 94 c5\n01 ed\n45 31 f6\n31 ff\n48 85 db\n0f 84 d9 01 00 00\nbe 3f a2 40 00\nba 05 00 00 00\ne8 4e e3 ff ff\n48 89 c1\ndb 6c 24 18\ndb 3c 24\n31 f6\n31 c0\n89 ef\n48 89 ca\n48 89 d9\ne8 83 e5 ff ff\ne9 9b 01 00 00\n83 f8 1b\n72 50\n45 31 f6\n83 3d c7 af 20 00 03\n0f 84 86 01 00 00\n8a 05 c3 af 20 00\n31 db\n84 c0\n0f 94 c3\n01 db\n45 31 f6\n31 ff\nbe c3 a2 40 00\nba 05 00 00 00\ne8 f6 e2 ff ff\n48 89 c1\ndb 6c 24 18\ndb 3c 24\n31 f6\n31 c0\n89 df\n48 89 ca\ne8 2e e5 ff ff\ne9 46 01 00 00\n8b 15 43 af 20 00\n0f b6 0d 40 af 20 00\n44 8b 05 4d ae 20 00\ndb 6c 24 18\ndb 3c 24\n48 8d 74 24 30\n89 df\ne8 b2 09 00 00\n48 8b 1d 33 af 20 00\n48 85 db\n74 25\n48 8d 6c 24 30\n48 89 ef\ne8 b9 e2 ff ff\nba 7f 00 00 00\n48 29 c2\nb9 80 00 00 00\n48 89 ef\n48 89 de\ne8 61 e5 ff ff\n80 3d 0b af 20 00 01\n75 2f\n48 8b 1d c1 ae 20 00\n48 8d 7c 24 30\ne8 57 34 00 00\n48 89 c1\ndb 6c 24 18\ndb 3c 24\nbe 01 00 00 00\nba 06 a3 40 00\n31 c0\n48 89 df\ne8 19 e5 ff ff\n48 8b 1d ba ae 20 00\n48 85 db\n74 7f\n48 8d 7c 24 30\ne8 53 e2 ff ff\n48 39 d8\n73 70\n48 8b 05 9f ae 20 00\n48 89 44 24 28\n48 8b 35 f3 ae 20 00\n48 8b 15 e4 ae 20 00\n44 0f b6 05 8c ae 20 00\n41 83 f0 01\n48 8d 7c 24 30\n48 8d 4c 24 28\n41 b9 02 00 00 00\ne8 73 1a 00 00\n80 3d 7d ae 20 00 01\n75 51\n48 8b 1d 33 ae 20 00\n48 8b 3d b4 ae 20 00\ne8 c7 33 00 00\n48 89 c1\nbe 01 00 00 00\nba 37 a3 40 00\n31 c0\n48 89 df\ne8 90 e4 ff ff\neb 25\n48 8d 5c 24 30\n48 89 df\ne8 d1 e1 ff ff\n48 8d 78 01\ne8 c8 f8 ff ff\n48 8b 3d 79 ae 20 00\n48 89 de\ne8 09 e1 ff ff\n41 be 01 00 00 00\n44 89 f0\n48 81 c4 b0 00 00 00\n5b\n41 5e\n5d\nc3\nbe 88 a2 40 00\nba 05 00 00 00\ne8 75 e1 ff ff\n48 89 c1\ndb 6c 24 18\ndb 3c 24\n31 f6\n31 c0\n89 ef\ne9 7a fe ff ff\n'
p915
S'.text:00000000004032f0\n.text:00000000004032f1\n.text:00000000004032f3\n.text:00000000004032f4\n.text:00000000004032fb\n.text:00000000004032fe\n.text:0000000000403305\n.text:000000000040330c\n.text:0000000000403310\n.text:0000000000403314\n.text:0000000000403316\n.text:000000000040331a\n.text:000000000040331d\n.text:0000000000403322\n.text:0000000000403327\n.text:000000000040332c\n.text:000000000040332e\n.text:0000000000403332\n.text:0000000000403339\n.text:000000000040333b\n.text:000000000040333f\n.text:0000000000403343\n.text:0000000000403345\n.text:0000000000403348\n.text:000000000040334f\n.text:0000000000403355\n.text:000000000040335b\n.text:000000000040335d\n.text:000000000040335f\n.text:0000000000403363\n.text:0000000000403365\n.text:0000000000403368\n.text:000000000040336a\n.text:000000000040336d\n.text:0000000000403373\n.text:0000000000403378\n.text:000000000040337d\n.text:0000000000403382\n.text:0000000000403385\n.text:0000000000403389\n.text:000000000040338c\n.text:000000000040338e\n.text:0000000000403390\n.text:0000000000403392\n.text:0000000000403395\n.text:0000000000403398\n.text:000000000040339d\n.text:00000000004033a2\n.text:00000000004033a5\n.text:00000000004033a7\n.text:00000000004033aa\n.text:00000000004033b1\n.text:00000000004033b7\n.text:00000000004033bd\n.text:00000000004033bf\n.text:00000000004033c1\n.text:00000000004033c4\n.text:00000000004033c6\n.text:00000000004033c9\n.text:00000000004033cb\n.text:00000000004033d0\n.text:00000000004033d5\n.text:00000000004033da\n.text:00000000004033dd\n.text:00000000004033e1\n.text:00000000004033e4\n.text:00000000004033e6\n.text:00000000004033e8\n.text:00000000004033ea\n.text:00000000004033ed\n.text:00000000004033f2\n.text:00000000004033f7\n.text:00000000004033fd\n.text:0000000000403404\n.text:000000000040340b\n.text:000000000040340f\n.text:0000000000403412\n.text:0000000000403417\n.text:0000000000403419\n.text:000000000040341e\n.text:0000000000403425\n.text:0000000000403428\n.text:000000000040342a\n.text:000000000040342f\n.text:0000000000403432\n.text:0000000000403437\n.text:000000000040343c\n.text:000000000040343f\n.text:0000000000403444\n.text:0000000000403447\n.text:000000000040344a\n.text:000000000040344f\n.text:0000000000403456\n.text:0000000000403458\n.text:000000000040345f\n.text:0000000000403464\n.text:0000000000403469\n.text:000000000040346c\n.text:0000000000403470\n.text:0000000000403473\n.text:0000000000403478\n.text:000000000040347d\n.text:000000000040347f\n.text:0000000000403482\n.text:0000000000403487\n.text:000000000040348e\n.text:0000000000403491\n.text:0000000000403493\n.text:0000000000403498\n.text:000000000040349d\n.text:00000000004034a0\n.text:00000000004034a2\n.text:00000000004034a9\n.text:00000000004034ae\n.text:00000000004034b5\n.text:00000000004034bc\n.text:00000000004034c4\n.text:00000000004034c8\n.text:00000000004034cd\n.text:00000000004034d2\n.text:00000000004034d8\n.text:00000000004034dd\n.text:00000000004034e4\n.text:00000000004034e6\n.text:00000000004034ed\n.text:00000000004034f4\n.text:00000000004034f9\n.text:00000000004034fc\n.text:0000000000403501\n.text:0000000000403506\n.text:0000000000403508\n.text:000000000040350b\n.text:0000000000403510\n.text:0000000000403512\n.text:0000000000403517\n.text:000000000040351a\n.text:000000000040351f\n.text:0000000000403523\n.text:0000000000403528\n.text:000000000040352f\n.text:0000000000403532\n.text:0000000000403537\n.text:000000000040353d\n.text:0000000000403540\n.text:0000000000403547\n.text:0000000000403548\n.text:000000000040354a\n.text:000000000040354b\n.text:000000000040354c\n.text:0000000000403551\n.text:0000000000403556\n.text:000000000040355b\n.text:000000000040355e\n.text:0000000000403562\n.text:0000000000403565\n.text:0000000000403567\n.text:0000000000403569\n.text:000000000040356b\n'
p916
tp917
sS'bindtextdomain'
p918
(S'\n__stdcall bindtextdomain()\n'
p919
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060e098)();\u000a  return;\u000a}\u000a\u000a
p920
S'JMP qword ptr [0x0060e098]\n'
p921
S'ff 25 d2 c9 20 00\n'
p922
S'.plt:00000000004016c0\n'
p923
tp924
sS'set_char_quoting'
p925
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p926
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p927
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60e3e0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p928
S'89 f1\n48 85 ff\nbe e0 e3 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p929
S'.text:00000000004054e0\n.text:00000000004054e2\n.text:00000000004054e5\n.text:00000000004054ea\n.text:00000000004054ee\n.text:00000000004054f0\n.text:00000000004054f3\n.text:00000000004054f7\n.text:00000000004054fc\n.text:00000000004054ff\n.text:0000000000405501\n.text:0000000000405503\n.text:0000000000405506\n.text:0000000000405508\n.text:000000000040550b\n.text:000000000040550d\n.text:0000000000405510\n.text:0000000000405515\n'
p930
tp931
sS'quotearg_n'
p932
(S'\n__stdcall quotearg_n(char * arg)\n'
p933
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p934
S'MOV RDX,-0x1\nMOV ECX,0x60e3e0\nJMP 0x004063d0\n'
p935
S'48 c7 c2 ff ff ff ff\nb9 e0 e3 60 00\neb 02\n'
p936
S'.text:00000000004063c0\n.text:00000000004063c7\n.text:00000000004063cc\n'
p937
tp938
sS'close_stream'
p939
(S'\n__stdcall close_stream(FILE * stream)\n'
p940
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p941
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401650\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004017d0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00407d90\nTEST EBP,EBP\nJZ 0x00407a2b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x00407a4f\nCALL 0x00401610\nMOV dword ptr [RAX],0x0\nJMP 0x00407a4f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x00407a4f\nTEST CL,CL\nJNZ 0x00407a4f\nCALL 0x00401610\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p942
S'55\n41 56\n53\n48 89 fb\ne8 54 9c ff ff\n49 89 c6\n48 89 df\ne8 c9 9d ff ff\n89 c5\n48 89 df\ne8 7f 03 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 ed 9b ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 ce 9b ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p943
S'.text:00000000004079f0\n.text:00000000004079f1\n.text:00000000004079f3\n.text:00000000004079f4\n.text:00000000004079f7\n.text:00000000004079fc\n.text:00000000004079ff\n.text:0000000000407a02\n.text:0000000000407a07\n.text:0000000000407a09\n.text:0000000000407a0c\n.text:0000000000407a11\n.text:0000000000407a13\n.text:0000000000407a15\n.text:0000000000407a1a\n.text:0000000000407a1c\n.text:0000000000407a1e\n.text:0000000000407a23\n.text:0000000000407a29\n.text:0000000000407a2b\n.text:0000000000407a2d\n.text:0000000000407a30\n.text:0000000000407a32\n.text:0000000000407a34\n.text:0000000000407a37\n.text:0000000000407a39\n.text:0000000000407a3b\n.text:0000000000407a3d\n.text:0000000000407a42\n.text:0000000000407a44\n.text:0000000000407a47\n.text:0000000000407a4c\n.text:0000000000407a4f\n.text:0000000000407a51\n.text:0000000000407a52\n.text:0000000000407a54\n.text:0000000000407a55\n'
p944
tp945
sS'quotearg_colon_mem'
p946
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p947
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p948
S'MOV EDX,0x3a\nJMP 0x004066e0\n'
p949
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p950
S'.text:0000000000406770\n.text:0000000000406775\n'
p951
tp952
sS'wcswidth'
p953
(S'\n__stdcall wcswidth(wchar_t * __s, size_t __n)\n'
p954
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint wcswidth(wchar_t *__s,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_wcswidth_0060e078)();\u000a  return iVar1;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x0060e078]\n'
p956
S'ff 25 f2 c9 20 00\n'
p957
S'.plt:0000000000401680\n'
p958
tp959
sS'xcalloc'
p960
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p961
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p962
S'PUSH RAX\nCALL 0x004079a0\nTEST RAX,RAX\nJZ 0x0040731d\nPOP RCX\nRET\nCALL 0x00407380\n'
p963
S'50\ne8 8a 06 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p964
S'.text:0000000000407310\n.text:0000000000407311\n.text:0000000000407316\n.text:0000000000407319\n.text:000000000040731b\n.text:000000000040731c\n.text:000000000040731d\n'
p965
tp966
sS'strtol'
p967
(S'\n__stdcall strtol(char * __nptr, char * * __endptr, int __base)\n'
p968
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000along strtol(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  lVar1 = (*(code *)PTR_strtol_0060e148)();\u000a  return lVar1;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x0060e148]\n'
p970
S'ff 25 22 c9 20 00\n'
p971
S'.plt:0000000000401820\n'
p972
tp973
sS'process_field'
p974
(S'\n__stdcall process_field(char * text, size_t field)\n'
p975
V\u000a_Bool process_field(char *text,size_t field)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  bool bVar3;\u000a  undefined val [16];\u000a  size_t local_30;\u000a  float10 local_28 [2];\u000a  \u000a  local_28[0] = (float10)0;\u000a  local_30 = 0;\u000a  _Var1 = include_field(field);\u000a  if (_Var1 == false) {\u000a    fputs_unlocked(text,stdout);\u000a  }\u000a  else {\u000a    iVar2 = process_suffixed_number(text,(longdouble *)local_28,&local_30,field);\u000a    bVar3 = iVar2 != 0;\u000a    if (bVar3) {\u000a      iVar2 = prepare_padded_number((longdouble)val,local_30);\u000a      bVar3 = iVar2 != 0;\u000a    }\u000a    if (!bVar3) {\u000a      fputs_unlocked(text,stdout);\u000a      return false;\u000a    }\u000a    print_padded_number();\u000a  }\u000a  return true;\u000a}\u000a\u000a
p976
S'PUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV RBX,RSI\nMOV R14,RDI\nFLDZ\nFSTP tword ptr [RSP + 0x20]\nMOV qword ptr [RSP + 0x18],0x0\nMOV RDI,RBX\nCALL 0x00403080\nTEST AL,AL\nJZ 0x00403025\nLEA RSI,[RSP + 0x20]\nLEA RDX,[RSP + 0x18]\nMOV RDI,R14\nMOV RCX,RBX\nCALL 0x004030d0\nTEST EAX,EAX\nSETNZ AL\nJZ 0x0040301a\nFLD tword ptr [RSP + 0x20]\nMOV RDI,qword ptr [RSP + 0x18]\nFSTP tword ptr [RSP]\nCALL 0x004032f0\nTEST EAX,EAX\nSETNZ AL\nTEST AL,AL\nJZ 0x00403038\nCALL 0x00403570\nJMP 0x00403034\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,R14\nCALL 0x004017c0\nMOV AL,0x1\nJMP 0x00403049\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,R14\nCALL 0x004017c0\nXOR EAX,EAX\nADD RSP,0x38\nPOP RBX\nPOP R14\nRET\n'
p977
S'41 56\n53\n48 83 ec 38\n48 89 f3\n49 89 fe\nd9 ee\ndb 7c 24 20\n48 c7 44 24 18 00 00 00 00\n48 89 df\ne8 9c 00 00 00\n84 c0\n74 3d\n48 8d 74 24 20\n48 8d 54 24 18\n4c 89 f7\n48 89 d9\ne8 d3 00 00 00\n85 c0\n0f 95 c0\n74 16\ndb 6c 24 20\n48 8b 7c 24 18\ndb 3c 24\ne8 db 02 00 00\n85 c0\n0f 95 c0\n84 c0\n74 1a\ne8 4d 05 00 00\neb 0f\n48 8b 35 bc b2 20 00\n4c 89 f7\ne8 8c e7 ff ff\nb0 01\neb 11\n48 8b 35 a9 b2 20 00\n4c 89 f7\ne8 79 e7 ff ff\n31 c0\n48 83 c4 38\n5b\n41 5e\nc3\n'
p978
S'.text:0000000000402fc0\n.text:0000000000402fc2\n.text:0000000000402fc3\n.text:0000000000402fc7\n.text:0000000000402fca\n.text:0000000000402fcd\n.text:0000000000402fcf\n.text:0000000000402fd3\n.text:0000000000402fdc\n.text:0000000000402fdf\n.text:0000000000402fe4\n.text:0000000000402fe6\n.text:0000000000402fe8\n.text:0000000000402fed\n.text:0000000000402ff2\n.text:0000000000402ff5\n.text:0000000000402ff8\n.text:0000000000402ffd\n.text:0000000000402fff\n.text:0000000000403002\n.text:0000000000403004\n.text:0000000000403008\n.text:000000000040300d\n.text:0000000000403010\n.text:0000000000403015\n.text:0000000000403017\n.text:000000000040301a\n.text:000000000040301c\n.text:000000000040301e\n.text:0000000000403023\n.text:0000000000403025\n.text:000000000040302c\n.text:000000000040302f\n.text:0000000000403034\n.text:0000000000403036\n.text:0000000000403038\n.text:000000000040303f\n.text:0000000000403042\n.text:0000000000403047\n.text:0000000000403049\n.text:000000000040304d\n.text:000000000040304e\n.text:0000000000403050\n'
p979
tp980
sS'clear_ungetc_buffer_preserving_position'
p981
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p982
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p983
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00407e47\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00407e60\n'
p984
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p985
S'.text:0000000000407e40\n.text:0000000000407e44\n.text:0000000000407e46\n.text:0000000000407e47\n.text:0000000000407e49\n.text:0000000000407e4e\n'
p986
tp987
sS'wc_ensure_printable'
p988
(S'\n__stdcall wc_ensure_printable(wchar_t * wchars)\n'
p989
V\u000a_Bool wc_ensure_printable(wchar_t *wchars)\u000a\u000a{\u000a  int iVar1;\u000a  wint_t *pwVar2;\u000a  undefined uVar3;\u000a  wint_t __wc;\u000a  \u000a  __wc = *wchars;\u000a  if (__wc == 0) {\u000a    uVar3 = 0;\u000a  }\u000a  else {\u000a    pwVar2 = (wint_t *)(wchars + 1);\u000a    uVar3 = 0;\u000a    do {\u000a      iVar1 = iswprint(__wc);\u000a      if (iVar1 == 0) {\u000a        pwVar2[-1] = 0xfffd;\u000a        uVar3 = 1;\u000a      }\u000a      __wc = *pwVar2;\u000a      pwVar2 = pwVar2 + 1;\u000a    } while (__wc != 0);\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p990
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV EDI,dword ptr [RBX]\nTEST EDI,EDI\nJZ 0x0040524f\nADD RBX,0x4\nXOR EBP,EBP\nNOP word ptr CS:[RAX + RAX*0x1]\nCALL 0x004019d0\nTEST EAX,EAX\nJNZ 0x00405243\nMOV dword ptr [RBX + -0x4],0xfffd\nMOV BPL,0x1\nMOV EDI,dword ptr [RBX]\nADD RBX,0x4\nTEST EDI,EDI\nJNZ 0x00405230\nJMP 0x00405251\nXOR EBP,EBP\nAND BPL,0x1\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p991
S'55\n53\n50\n48 89 fb\n8b 3b\n85 ff\n74 33\n48 83 c3 04\n31 ed\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\ne8 9b c7 ff ff\n85 c0\n75 0a\nc7 43 fc fd ff 00 00\n40 b5 01\n8b 3b\n48 83 c3 04\n85 ff\n75 e3\neb 02\n31 ed\n40 80 e5 01\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p992
S'.text:0000000000405210\n.text:0000000000405211\n.text:0000000000405212\n.text:0000000000405213\n.text:0000000000405216\n.text:0000000000405218\n.text:000000000040521a\n.text:000000000040521c\n.text:0000000000405220\n.text:0000000000405222\n.text:0000000000405230\n.text:0000000000405235\n.text:0000000000405237\n.text:0000000000405239\n.text:0000000000405240\n.text:0000000000405243\n.text:0000000000405245\n.text:0000000000405249\n.text:000000000040524b\n.text:000000000040524d\n.text:000000000040524f\n.text:0000000000405251\n.text:0000000000405255\n.text:0000000000405257\n.text:000000000040525b\n.text:000000000040525c\n.text:000000000040525d\n'
p993
tp994
sS'xnmalloc'
p995
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p996
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p997
S'MOV RAX,RDI\nMUL RSI\nJO 0x004071e1\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x004071f0\nPUSH RAX\nCALL 0x00407380\n'
p998
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p999
S'.text:00000000004071d0\n.text:00000000004071d3\n.text:00000000004071d6\n.text:00000000004071d8\n.text:00000000004071dc\n.text:00000000004071df\n.text:00000000004071e1\n.text:00000000004071e2\n'
p1000
tp1001
sS'quotearg_char'
p1002
(S'\n__stdcall quotearg_char(char * arg)\n'
p1003
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1004
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x004066e0\n'
p1005
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1006
S'.text:0000000000406750\n.text:0000000000406752\n.text:0000000000406759\n.text:000000000040675b\n'
p1007
tp1008
sS'malloc'
p1009
(S'\n__stdcall malloc(size_t __size)\n'
p1010
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060e178)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1011
S'JMP qword ptr [0x0060e178]\n'
p1012
S'ff 25 f2 c8 20 00\n'
p1013
S'.plt:0000000000401880\n'
p1014
tp1015
sS'argmatch_invalid'
p1016
(S'\n__stdcall argmatch_invalid(char * context, char * value, ptrdiff_t problem)\n'
p1017
V\u000avoid argmatch_invalid(char *context,char *value,ptrdiff_t problem)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  \u000a  pcVar2 = "ambiguous argument %s for %s";\u000a  if (problem == -1) {\u000a    pcVar2 = "invalid argument %s for %s";\u000a  }\u000a  uVar1 = dcgettext(0,pcVar2,5);\u000a  pcVar2 = quotearg_n_style((char *)0x0);\u000a  pcVar3 = quote_n((char *)0x1);\u000a  error(0,0,uVar1,pcVar2,pcVar3);\u000a  return;\u000a}\u000a\u000a
p1018
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RSI\nMOV R14,RDI\nCMP RDX,-0x1\nMOV EAX,0x40a5ee\nMOV ESI,0x40a609\nCMOVZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004016d0\nMOV R12,RAX\nXOR EDI,EDI\nMOV ESI,0x8\nMOV RDX,R15\nCALL 0x004065c0\nMOV R15,RAX\nMOV EDI,0x1\nMOV RSI,R14\nCALL 0x004068b0\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R12\nMOV RCX,R15\nMOV R8,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401920\n'
p1019
S'41 57\n41 56\n41 54\n53\n50\n49 89 f7\n49 89 fe\n48 83 fa ff\nb8 ee a5 40 00\nbe 09 a6 40 00\n48 0f 44 f0\n31 ff\nba 05 00 00 00\ne8 c4 cb ff ff\n49 89 c4\n31 ff\nbe 08 00 00 00\n4c 89 fa\ne8 a2 1a 00 00\n49 89 c7\nbf 01 00 00 00\n4c 89 f6\ne8 82 1d 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 e2\n4c 89 f9\n49 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 d0 cd ff ff\n'
p1020
S'.text:0000000000404ae0\n.text:0000000000404ae2\n.text:0000000000404ae4\n.text:0000000000404ae6\n.text:0000000000404ae7\n.text:0000000000404ae8\n.text:0000000000404aeb\n.text:0000000000404aee\n.text:0000000000404af2\n.text:0000000000404af7\n.text:0000000000404afc\n.text:0000000000404b00\n.text:0000000000404b02\n.text:0000000000404b07\n.text:0000000000404b0c\n.text:0000000000404b0f\n.text:0000000000404b11\n.text:0000000000404b16\n.text:0000000000404b19\n.text:0000000000404b1e\n.text:0000000000404b21\n.text:0000000000404b26\n.text:0000000000404b29\n.text:0000000000404b2e\n.text:0000000000404b31\n.text:0000000000404b33\n.text:0000000000404b35\n.text:0000000000404b37\n.text:0000000000404b3a\n.text:0000000000404b3d\n.text:0000000000404b40\n.text:0000000000404b44\n.text:0000000000404b45\n.text:0000000000404b47\n.text:0000000000404b49\n.text:0000000000404b4b\n'
p1021
tp1022
sS'c_tolower'
p1023
(S'\n__stdcall c_tolower()\n'
p1024
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1025
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p1026
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p1027
S'.text:0000000000404e50\n.text:0000000000404e53\n.text:0000000000404e56\n.text:0000000000404e59\n.text:0000000000404e5c\n'
p1028
tp1029
sS'getopt_long'
p1030
(S'\n__stdcall getopt_long()\n'
p1031
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060e0b8)();\u000a  return;\u000a}\u000a\u000a
p1032
S'JMP qword ptr [0x0060e0b8]\n'
p1033
S'ff 25 b2 c9 20 00\n'
p1034
S'.plt:0000000000401700\n'
p1035
tp1036
sS'quotearg_style'
p1037
(S'\n__stdcall quotearg_style(char * arg)\n'
p1038
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1039
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x004065c0\n'
p1040
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p1041
S'.text:00000000004066a0\n.text:00000000004066a3\n.text:00000000004066a5\n.text:00000000004066a7\n.text:00000000004066a9\n.text:00000000004066ac\n'
p1042
tp1043
sS'simple_round_from_zero'
p1044
(S'\n__stdcall simple_round_from_zero()\n'
p1045
V\u000aintmax_t simple_round_from_zero(void)\u000a\u000a{\u000a  intmax_t iVar1;\u000a  longdouble val;\u000a  float10 in_stack_00000008;\u000a  \u000a  if (in_stack_00000008 < (float10)0) {\u000a    iVar1 = simple_round_floor(val);\u000a    return iVar1;\u000a  }\u000a  iVar1 = simple_round_ceiling(val);\u000a  return iVar1;\u000a}\u000a\u000a
p1046
S'SUB RSP,0x18\nFLD tword ptr [RSP + 0x20]\nFLDZ\nFUCOMIP ST0,ST1\nJBE 0x0040433b\nFSTP tword ptr [RSP]\nCALL 0x00404300\nADD RSP,0x18\nRET\nFSTP tword ptr [RSP]\nCALL 0x004042b0\nADD RSP,0x18\nRET\n'
p1047
S'48 83 ec 18\ndb 6c 24 20\nd9 ee\ndf e9\n76 0d\ndb 3c 24\ne8 ca ff ff ff\n48 83 c4 18\nc3\ndb 3c 24\ne8 6d ff ff ff\n48 83 c4 18\nc3\n'
p1048
S'.text:0000000000404320\n.text:0000000000404324\n.text:0000000000404328\n.text:000000000040432a\n.text:000000000040432c\n.text:000000000040432e\n.text:0000000000404331\n.text:0000000000404336\n.text:000000000040433a\n.text:000000000040433b\n.text:000000000040433e\n.text:0000000000404343\n.text:0000000000404347\n'
p1049
tp1050
sS'__strndup'
p1051
(S'\n__stdcall __strndup()\n'
p1052
V\u000avoid __strndup(void)\u000a\u000a{\u000a  (*(code *)PTR___strndup_0060e140)();\u000a  return;\u000a}\u000a\u000a
p1053
S'JMP qword ptr [0x0060e140]\n'
p1054
S'ff 25 2a c9 20 00\n'
p1055
S'.plt:0000000000401810\n'
p1056
tp1057
sS'__argmatch_die'
p1058
(S'\n__stdcall __argmatch_die()\n'
p1059
V\u000avoid __argmatch_die(void)\u000a\u000a{\u000a  usage(1);\u000a  return;\u000a}\u000a\u000a
p1060
S'MOV EDI,0x1\nJMP 0x00401b00\n'
p1061
S'bf 01 00 00 00\ne9 26 d1 ff ff\n'
p1062
S'.text:00000000004049d0\n.text:00000000004049d5\n'
p1063
tp1064
sS'emit_try_help'
p1065
(S'\n__stdcall emit_try_help()\n'
p1066
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p1067
S'PUSH RBX\nMOV RBX,qword ptr [0x0060e320]\nXOR EDI,EDI\nMOV ESI,0x409bec\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060e3d0]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x004019a0\n'
p1068
S'53\n48 8b 1d 18 c4 20 00\n31 ff\nbe ec 9b 40 00\nba 05 00 00 00\ne8 b7 f7 ff ff\n48 89 c2\n48 8b 0d ad c4 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 6d fa ff ff\n'
p1069
S'.text:0000000000401f00\n.text:0000000000401f01\n.text:0000000000401f08\n.text:0000000000401f0a\n.text:0000000000401f0f\n.text:0000000000401f14\n.text:0000000000401f19\n.text:0000000000401f1c\n.text:0000000000401f23\n.text:0000000000401f28\n.text:0000000000401f2a\n.text:0000000000401f2d\n.text:0000000000401f2e\n'
p1070
tp1071
sS'strrchr'
p1072
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1073
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060e0d0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1074
S'JMP qword ptr [0x0060e0d0]\n'
p1075
S'ff 25 9a c9 20 00\n'
p1076
S'.plt:0000000000401730\n'
p1077
tp1078
sS'quotearg_alloc_mem'
p1079
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1080
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1081
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60e3e0\nCMOVNZ R12,RCX\nCALL 0x00401610\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004055f0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x004072c0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x004055f0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040631a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1082
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc e0 e3 60 00\n4c 0f 45 e1\ne8 98 b3 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 f1 0f 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1083
S'.text:0000000000406240\n.text:0000000000406241\n.text:0000000000406243\n.text:0000000000406245\n.text:0000000000406247\n.text:0000000000406249\n.text:000000000040624a\n.text:000000000040624e\n.text:0000000000406251\n.text:0000000000406256\n.text:0000000000406259\n.text:000000000040625e\n.text:0000000000406261\n.text:0000000000406266\n.text:0000000000406269\n.text:000000000040626f\n.text:0000000000406273\n.text:0000000000406278\n.text:000000000040627d\n.text:000000000040627f\n.text:0000000000406283\n.text:0000000000406285\n.text:0000000000406288\n.text:000000000040628c\n.text:0000000000406291\n.text:0000000000406295\n.text:000000000040629a\n.text:000000000040629e\n.text:00000000004062a0\n.text:00000000004062a2\n.text:00000000004062a5\n.text:00000000004062a8\n.text:00000000004062ab\n.text:00000000004062b0\n.text:00000000004062b5\n.text:00000000004062b7\n.text:00000000004062bc\n.text:00000000004062c0\n.text:00000000004062c3\n.text:00000000004062c7\n.text:00000000004062ca\n.text:00000000004062cf\n.text:00000000004062d2\n.text:00000000004062d6\n.text:00000000004062da\n.text:00000000004062dd\n.text:00000000004062e0\n.text:00000000004062e5\n.text:00000000004062ea\n.text:00000000004062ed\n.text:00000000004062f2\n.text:00000000004062f7\n.text:00000000004062f9\n.text:00000000004062fe\n.text:0000000000406303\n.text:0000000000406307\n.text:000000000040630a\n.text:000000000040630e\n.text:0000000000406313\n.text:0000000000406315\n.text:0000000000406317\n.text:000000000040631a\n.text:000000000040631d\n.text:0000000000406321\n.text:0000000000406322\n.text:0000000000406324\n.text:0000000000406326\n.text:0000000000406328\n.text:000000000040632a\n.text:000000000040632b\n'
p1084
tp1085
sS'reset_fields'
p1086
(S'\n__stdcall reset_fields()\n'
p1087
V\u000aundefined8 reset_fields(void)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  \u000a  n_frp = 0;\u000a  n_frp_allocated = 0;\u000a  free(frp);\u000a  frp = (field_range_pair *)0x0;\u000a  return in_RAX;\u000a}\u000a\u000a
p1088
S'PUSH RAX\nMOV qword ptr [0x0060e530],0x0\nMOV qword ptr [0x0060e3b8],0x0\nMOV RDI,qword ptr [0x0060e528]\nCALL 0x004015e0\nMOV qword ptr [0x0060e528],0x0\nPOP RAX\nRET\n'
p1089
S'50\n48 c7 05 84 9b 20 00 00 00 00 00\n48 c7 05 01 9a 20 00 00 00 00 00\n48 8b 3d 6a 9b 20 00\ne8 1d cc ff ff\n48 c7 05 5a 9b 20 00 00 00 00 00\n58\nc3\n'
p1090
S'.text:00000000004049a0\n.text:00000000004049a1\n.text:00000000004049ac\n.text:00000000004049b7\n.text:00000000004049be\n.text:00000000004049c3\n.text:00000000004049ce\n.text:00000000004049cf\n'
p1091
tp1092
sS'complement_rp'
p1093
(S'\n__stdcall complement_rp()\n'
p1094
V\u000avoid complement_rp(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  field_range_pair *pfVar2;\u000a  field_range_pair *__ptr;\u000a  size_t sVar3;\u000a  size_t lo;\u000a  long lVar4;\u000a  \u000a  sVar3 = n_frp;\u000a  __ptr = frp;\u000a  frp = (field_range_pair *)0x0;\u000a  n_frp = 0;\u000a  n_frp_allocated = 0;\u000a  if (1 < __ptr->lo) {\u000a    add_range_pair(1,__ptr->lo - 1);\u000a  }\u000a  if (1 < sVar3) {\u000a    lVar4 = sVar3 - 1;\u000a    pfVar2 = __ptr;\u000a    do {\u000a      sVar1 = pfVar2[1].lo;\u000a      lo = pfVar2->hi + 1;\u000a      if (lo != sVar1) {\u000a        add_range_pair(lo,sVar1 - 1);\u000a      }\u000a      lVar4 = lVar4 + -1;\u000a      pfVar2 = pfVar2 + 1;\u000a    } while (lVar4 != 0);\u000a  }\u000a  if (__ptr[sVar3 - 1].hi != 0xffffffffffffffff) {\u000a    add_range_pair(__ptr[sVar3 - 1].hi + 1,0xffffffffffffffff);\u000a  }\u000a  free(__ptr);\u000a  return;\u000a}\u000a\u000a
p1095
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,qword ptr [0x0060e528]\nMOV R15,qword ptr [0x0060e530]\nMOV qword ptr [0x0060e528],0x0\nMOV qword ptr [0x0060e530],0x0\nMOV qword ptr [0x0060e3b8],0x0\nMOV RSI,qword ptr [R14]\nCMP RSI,0x2\nJC 0x0040492d\nDEC RSI\nMOV EDI,0x1\nCALL 0x00404840\nCMP R15,0x2\nJC 0x00404960\nLEA R12,[R15 + -0x1]\nLEA RBX,[R14 + 0x10]\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX + -0x8]\nMOV RSI,qword ptr [RBX]\nINC RDI\nCMP RDI,RSI\nJZ 0x00404957\nDEC RSI\nCALL 0x00404840\nADD RBX,0x10\nDEC R12\nJNZ 0x00404940\nSHL R15,0x4\nMOV RDI,qword ptr [R14 + R15*0x1 + -0x8]\nCMP RDI,-0x1\nJZ 0x0040497e\nINC RDI\nMOV RSI,-0x1\nCALL 0x00404840\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x004015e0\n'
p1096
S'41 57\n41 56\n41 54\n53\n50\n4c 8b 35 39 9c 20 00\n4c 8b 3d 3a 9c 20 00\n48 c7 05 27 9c 20 00 00 00 00 00\n48 c7 05 24 9c 20 00 00 00 00 00\n48 c7 05 a1 9a 20 00 00 00 00 00\n49 8b 36\n48 83 fe 02\n72 0d\n48 ff ce\nbf 01 00 00 00\ne8 13 ff ff ff\n49 83 ff 02\n72 2d\n4d 8d 67 ff\n49 8d 5e 10\n0f 1f 44 00 00\n48 8b 7b f8\n48 8b 33\n48 ff c7\n48 39 f7\n74 08\n48 ff ce\ne8 e9 fe ff ff\n48 83 c3 10\n49 ff cc\n75 e0\n49 c1 e7 04\n4b 8b 7c 3e f8\n48 83 ff ff\n74 0f\n48 ff c7\n48 c7 c6 ff ff ff ff\ne8 c2 fe ff ff\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 4f cc ff ff\n'
p1097
S'.text:00000000004048e0\n.text:00000000004048e2\n.text:00000000004048e4\n.text:00000000004048e6\n.text:00000000004048e7\n.text:00000000004048e8\n.text:00000000004048ef\n.text:00000000004048f6\n.text:0000000000404901\n.text:000000000040490c\n.text:0000000000404917\n.text:000000000040491a\n.text:000000000040491e\n.text:0000000000404920\n.text:0000000000404923\n.text:0000000000404928\n.text:000000000040492d\n.text:0000000000404931\n.text:0000000000404933\n.text:0000000000404937\n.text:000000000040493b\n.text:0000000000404940\n.text:0000000000404944\n.text:0000000000404947\n.text:000000000040494a\n.text:000000000040494d\n.text:000000000040494f\n.text:0000000000404952\n.text:0000000000404957\n.text:000000000040495b\n.text:000000000040495e\n.text:0000000000404960\n.text:0000000000404964\n.text:0000000000404969\n.text:000000000040496d\n.text:000000000040496f\n.text:0000000000404972\n.text:0000000000404979\n.text:000000000040497e\n.text:0000000000404981\n.text:0000000000404985\n.text:0000000000404986\n.text:0000000000404988\n.text:000000000040498a\n.text:000000000040498c\n'
p1098
tp1099
sS'bkm_scale'
p1100
(S'\n__stdcall bkm_scale(uintmax_t * x)\n'
p1101
V\u000astrtol_error bkm_scale(uintmax_t *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  uintmax_t uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p1102
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p1103
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p1104
S'.text:0000000000407930\n.text:0000000000407933\n.text:000000000040793a\n.text:0000000000407941\n.text:0000000000407943\n.text:0000000000407946\n.text:0000000000407949\n.text:000000000040794d\n.text:0000000000407950\n.text:0000000000407954\n.text:0000000000407956\n.text:0000000000407959\n.text:000000000040795c\n'
p1105
tp1106
sS'memchr'
p1107
(S'\n__stdcall memchr(void * __s, int __c, size_t __n)\n'
p1108
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memchr(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memchr_0060e108)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1109
S'JMP qword ptr [0x0060e108]\n'
p1110
S'ff 25 62 c9 20 00\n'
p1111
S'.plt:00000000004017a0\n'
p1112
tp1113
sS'quotearg_style_mem'
p1114
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1115
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1116
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00406660\n'
p1117
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1118
S'.text:00000000004066c0\n.text:00000000004066c3\n.text:00000000004066c6\n.text:00000000004066c8\n.text:00000000004066ca\n.text:00000000004066cc\n.text:00000000004066cf\n.text:00000000004066d2\n'
p1119
tp1120
sS'xalloc_die'
p1121
(S'\n__stdcall xalloc_die()\n'
p1122
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,&DAT_0040a645,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1123
S'PUSH RBX\nMOV EBX,dword ptr [0x0060e278]\nXOR EDI,EDI\nMOV ESI,0x40b23f\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40a645\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401920\nCALL 0x00401600\n'
p1124
S'53\n8b 1d f1 6e 20 00\n31 ff\nbe 3f b2 40 00\nba 05 00 00 00\ne8 38 a3 ff ff\n48 89 c1\n31 f6\nba 45 a6 40 00\n31 c0\n89 df\ne8 75 a5 ff ff\ne8 50 a2 ff ff\n'
p1125
S'.text:0000000000407380\n.text:0000000000407381\n.text:0000000000407387\n.text:0000000000407389\n.text:000000000040738e\n.text:0000000000407393\n.text:0000000000407398\n.text:000000000040739b\n.text:000000000040739d\n.text:00000000004073a2\n.text:00000000004073a4\n.text:00000000004073a6\n.text:00000000004073ab\n'
p1126
tp1127
sS'quotearg_n_custom'
p1128
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1129
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1130
S'MOV R8,-0x1\nJMP 0x004067e0\n'
p1131
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1132
S'.text:00000000004067d0\n.text:00000000004067d7\n'
p1133
tp1134
sS'__freading'
p1135
(S'\n__stdcall __freading()\n'
p1136
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060e198)();\u000a  return;\u000a}\u000a\u000a
p1137
S'JMP qword ptr [0x0060e198]\n'
p1138
S'ff 25 d2 c8 20 00\n'
p1139
S'.plt:00000000004018c0\n'
p1140
tp1141
sS'fputs_unlocked'
p1142
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1143
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060e118)();\u000a  return iVar1;\u000a}\u000a\u000a
p1144
S'JMP qword ptr [0x0060e118]\n'
p1145
S'ff 25 52 c9 20 00\n'
p1146
S'.plt:00000000004017c0\n'
p1147
tp1148
sS'main'
p1149
(S'\n__stdcall main(char * * argv)\n'
p1150
V\u000aint main(char **argv)\u000a\u000a{\u000a  uintmax_t uVar1;\u000a  int __delimiter;\u000a  strtol_error sVar2;\u000a  uint uVar3;\u000a  char *pcVar4;\u000a  size_t sVar5;\u000a  ptrdiff_t pVar6;\u000a  undefined8 uVar7;\u000a  char *pcVar8;\u000a  __ssize_t _Var9;\u000a  long lVar10;\u000a  uint *puVar11;\u000a  int iVar12;\u000a  uint uVar13;\u000a  char **in_RSI;\u000a  char cVar14;\u000a  bool bVar15;\u000a  char *local_38;\u000a  size_t local_30;\u000a  \u000a  set_program_name(*in_RSI);\u000a  pcVar4 = setlocale(6,\u000a                       "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                       + 0xca);\u000a  bindtextdomain(0x409ac0,"/usr/local/share/locale");\u000a  textdomain(0x409ac0);\u000a  decimal_point = nl_langinfo(0x10000);\u000a  if ((decimal_point == (char *)0x0) || (*decimal_point == 0)) {\u000a    decimal_point = ".";\u000a  }\u000a  sVar5 = strlen(decimal_point);\u000a  decimal_point_length = (int)sVar5;\u000a  atexit(close_stdout);\u000aLAB_00402160:\u000a  iVar12 = (int)((ulong)argv & 0xffffffff);\u000a  __delimiter = getopt_long((ulong)argv & 0xffffffff);\u000a  switch(__delimiter) {\u000a  case 100:\u000a    if ((*optarg != 0) && (optarg[1] != 0)) {\u000a      uVar7 = dcgettext(0,"the delimiter must be a single character",5);\u000a      error(1,0,uVar7,uVar7);\u000a    }\u000a    delimiter = (int)*optarg;\u000a    goto LAB_00402160;\u000a  case 0x7a:\u000a    line_delim = 1;\u000a    goto LAB_00402160;\u000a  case 0x80:\u000a    pVar6 = __xargmatch_internal\u000a                      ("--from",optarg,scale_from_args,(char *)scale_from_types,4,argmatch_die);\u000a    scale_from = scale_from_types[pVar6];\u000a    goto LAB_00402160;\u000a  case 0x81:\u000a    from_unit_size = unit_to_umax(optarg);\u000a    goto LAB_00402160;\u000a  case 0x82:\u000a    pVar6 = __xargmatch_internal("--to",optarg,scale_to_args,(char *)scale_to_types,4,argmatch_die);\u000a    scale_to = scale_to_types[pVar6];\u000a    goto LAB_00402160;\u000a  case 0x83:\u000a    to_unit_size = unit_to_umax(optarg);\u000a    goto LAB_00402160;\u000a  case 0x84:\u000a    pVar6 = __xargmatch_internal("--round",optarg,round_args,(char *)round_types,4,argmatch_die);\u000a    round_style = round_types[pVar6];\u000a    goto LAB_00402160;\u000a  case 0x85:\u000a    suffix = optarg;\u000a    goto LAB_00402160;\u000a  case 0x86:\u000a    grouping = 1;\u000a    goto LAB_00402160;\u000a  case 0x87:\u000a    sVar2 = xstrtol(optarg,(char **)0x0,(long *)0xa,(char *)&padding_width);\u000a    if ((sVar2 != LONGINT_OK) || (padding_width == 0)) {\u000a      uVar7 = dcgettext(0,"invalid padding value %s",5);\u000a      pcVar8 = quote(optarg);\u000a      error(1,0,uVar7,pcVar8);\u000a    }\u000a    if (padding_width < 0) {\u000a      padding_alignment = 1;\u000a      padding_width = -padding_width;\u000a    }\u000a    goto LAB_00402160;\u000a  case 0x88:\u000a    if (n_frp != 0) {\u000a      uVar7 = dcgettext(0,"multiple field specifications",5);\u000a      error(1,0,uVar7,uVar7);\u000a    }\u000a    set_fields(optarg);\u000a    goto LAB_00402160;\u000a  case 0x89:\u000a    debug = 1;\u000a    goto LAB_00402160;\u000a  case 0x8a:\u000a    dev_debug = 1;\u000a    debug = 1;\u000a    goto LAB_00402160;\u000a  case 0x8b:\u000a    if (optarg == (char *)0x0) {\u000a      header = 1;\u000a    }\u000a    else {\u000a      sVar2 = xstrtoumax(optarg,(char **)0x0,(uintmax_t *)0xa,(char *)&header);\u000a      if ((sVar2 != LONGINT_OK) || (header == 0)) {\u000a        uVar7 = dcgettext(0,"invalid header value %s",5);\u000a        pcVar8 = quote(optarg);\u000a        error(1,0,uVar7,pcVar8);\u000a      }\u000a    }\u000a    goto LAB_00402160;\u000a  case 0x8c:\u000a    format_str = optarg;\u000a    goto LAB_00402160;\u000a  case 0x8d:\u000a    break;\u000a  default:\u000a    if (__delimiter == -0x83) goto LAB_00402841;\u000a    if (__delimiter == -0x82) {\u000a      usage(0);\u000a    }\u000a  case 0:\u000a  case 1:\u000a  case 2:\u000a  case 3:\u000a  case 4:\u000a  case 5:\u000a  case 6:\u000a  case 7:\u000a  case 8:\u000a  case 9:\u000a  case 10:\u000a  case 0xb:\u000a  case 0xc:\u000a  case 0xd:\u000a  case 0xe:\u000a  case 0xf:\u000a  case 0x10:\u000a  case 0x11:\u000a  case 0x12:\u000a  case 0x13:\u000a  case 0x14:\u000a  case 0x15:\u000a  case 0x16:\u000a  case 0x17:\u000a  case 0x18:\u000a  case 0x19:\u000a  case 0x1a:\u000a  case 0x1b:\u000a  case 0x1c:\u000a  case 0x1d:\u000a  case 0x1e:\u000a  case 0x1f:\u000a  case 0x20:\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x30:\u000a  case 0x31:\u000a  case 0x32:\u000a  case 0x33:\u000a  case 0x34:\u000a  case 0x35:\u000a  case 0x36:\u000a  case 0x37:\u000a  case 0x38:\u000a  case 0x39:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x41:\u000a  case 0x42:\u000a  case 0x43:\u000a  case 0x44:\u000a  case 0x45:\u000a  case 0x46:\u000a  case 0x47:\u000a  case 0x48:\u000a  case 0x49:\u000a  case 0x4a:\u000a  case 0x4b:\u000a  case 0x4c:\u000a  case 0x4d:\u000a  case 0x4e:\u000a  case 0x4f:\u000a  case 0x50:\u000a  case 0x51:\u000a  case 0x52:\u000a  case 0x53:\u000a  case 0x54:\u000a  case 0x55:\u000a  case 0x56:\u000a  case 0x57:\u000a  case 0x58:\u000a  case 0x59:\u000a  case 0x5a:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x61:\u000a  case 0x62:\u000a  case 99:\u000a  case 0x65:\u000a  case 0x66:\u000a  case 0x67:\u000a  case 0x68:\u000a  case 0x69:\u000a  case 0x6a:\u000a  case 0x6b:\u000a  case 0x6c:\u000a  case 0x6d:\u000a  case 0x6e:\u000a  case 0x6f:\u000a  case 0x70:\u000a  case 0x71:\u000a  case 0x72:\u000a  case 0x73:\u000a  case 0x74:\u000a  case 0x75:\u000a  case 0x76:\u000a  case 0x77:\u000a  case 0x78:\u000a  case 0x79:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a  case 0x7f:\u000a    usage(1);\u000aLAB_00402841:\u000a    version_etc(stdout,"numfmt","GNU coreutils",Version,"Assaf Gordon",0);\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  case -1:\u000a    goto switchD_00402186_caseD_ffffffff;\u000a  }\u000a  pVar6 = __xargmatch_internal("--invalid",optarg,inval_args,(char *)inval_types,4,argmatch_die);\u000a  inval_style = inval_types[pVar6];\u000a  goto LAB_00402160;\u000aswitchD_00402186_caseD_ffffffff:\u000a  if ((format_str != (char *)0x0) && ((grouping & 1) != 0)) {\u000a    uVar7 = dcgettext(0,"--grouping cannot be combined with --format",5);\u000a    error(1,0,uVar7);\u000a  }\u000a  if ((pcVar4 == (char *)0x0) && (((debug ^ 1) & 1) == 0)) {\u000a    uVar7 = dcgettext(0,"failed to set locale",5);\u000a    error(0,0,uVar7);\u000a  }\u000a  if ((((format_str == (char *)0x0) && (padding_width == 0)) && ((debug & 1) != 0)) &&\u000a     (((scale_to | scale_from) == scale_none && (((grouping ^ 1) & 1) != 0)))) {\u000a    uVar7 = dcgettext(0,"no conversion option specified",5);\u000a    error(0,0,uVar7);\u000a  }\u000a  if (format_str != (char *)0x0) {\u000a    parse_format_string(format_str);\u000a  }\u000a  if (grouping == 1) {\u000a    if (scale_to != scale_none) {\u000a      uVar7 = dcgettext(0,"grouping cannot be combined with --to",5);\u000a      error(1,0,uVar7);\u000a    }\u000a    if ((debug == 1) && (pcVar4 = nl_langinfo(0x10001), *pcVar4 == 0)) {\u000a      uVar7 = dcgettext(0,"grouping has no effect in this locale",5);\u000a      error(0,0,uVar7);\u000a    }\u000a  }\u000a  setup_padding_buffer(padding_width);\u000a  auto_padding = ZEXT14(delimiter == 0x80 && padding_width == 0);\u000a  if (inval_style != inval_abort) {\u000a    conv_exit_code = 1;\u000a  }\u000a  if (optind < iVar12) {\u000a    if ((debug == 1) && (header != 0)) {\u000a      uVar7 = dcgettext(0,"--header ignored with command-line input",5);\u000a      error(0,0,uVar7);\u000a    }\u000a    uVar13 = 1;\u000a    if (iVar12 <= optind) goto LAB_004027fb;\u000a    uVar13 = 1;\u000a    do {\u000a      uVar3 = process_line(in_RSI[(long)optind]);\u000a      uVar13 = uVar13 & uVar3;\u000a      optind = optind + 1;\u000a    } while (optind < iVar12);\u000a  }\u000a  else {\u000a    local_38 = (char *)0x0;\u000a    local_30 = 0;\u000a    uVar1 = header - 1;\u000a    bVar15 = header != 0;\u000a    header = uVar1;\u000a    if (bVar15) {\u000a      header = uVar1;\u000a      do {\u000a        __delimiter = 10;\u000a        if (line_delim != 0) {\u000a          __delimiter = 0;\u000a        }\u000a        _Var9 = getdelim(&local_38,&local_30,__delimiter,stdin);\u000a        if (_Var9 < 1) break;\u000a        fputs_unlocked(local_38,(FILE *)stdout);\u000a        uVar1 = header - 1;\u000a        bVar15 = header != 0;\u000a        header = uVar1;\u000a      } while (bVar15);\u000a    }\u000a    __delimiter = 10;\u000a    if (line_delim != 0) {\u000a      __delimiter = 0;\u000a    }\u000a    lVar10 = getdelim(&local_38,&local_30,__delimiter,stdin);\u000a    uVar13 = 1;\u000a    if (0 < lVar10) {\u000a      do {\u000a        cVar14 = '\u005cn';\u000a        if (line_delim != 0) {\u000a          cVar14 = 0;\u000a        }\u000a        if (local_38[lVar10 + -1] == cVar14) {\u000a          local_38[lVar10 + -1] = 0;\u000a        }\u000a        uVar3 = process_line(local_38);\u000a        uVar13 = uVar13 & uVar3;\u000a        __delimiter = 10;\u000a        if (line_delim != 0) {\u000a          __delimiter = 0;\u000a        }\u000a        lVar10 = getdelim(&local_38,&local_30,__delimiter,stdin);\u000a      } while (0 < lVar10);\u000a    }\u000a    __delimiter = ferror_unlocked(stdin);\u000a    if (__delimiter != 0) {\u000a      puVar11 = (uint *)__errno_location();\u000a      uVar3 = *puVar11;\u000a      uVar7 = dcgettext(0,"error reading input",5);\u000a      error(0,(ulong)uVar3,uVar7);\u000a    }\u000a  }\u000a  if ((uVar13 == 0) && (((debug ^ 1) & 1) == 0)) {\u000a    uVar7 = dcgettext(0,"failed to convert some of the input numbers",5);\u000a    error(0,0,uVar7);\u000a  }\u000aLAB_004027fb:\u000a  __delimiter = 0;\u000a  if (uVar13 == 0) {\u000a    __delimiter = (uint)((inval_style & 0xfffffffe) != 2) * 2;\u000a  }\u000a  return __delimiter;\u000a}\u000a\u000a
p1151
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R12,RSI\nMOV EBX,EDI\nMOV RDI,qword ptr [R12]\nCALL 0x004053d0\nMOV EDI,0x6\nMOV ESI,0x40b009\nCALL 0x004018f0\nMOV R14,RAX\nMOV EDI,0x409ac0\nMOV ESI,0x409a0d\nCALL 0x004016c0\nMOV EDI,0x409ac0\nCALL 0x004016a0\nMOV EDI,0x10000\nCALL 0x004018a0\nMOV qword ptr [0x0060e330],RAX\nTEST RAX,RAX\nJZ 0x00402100\nCMP byte ptr [RAX],0x0\nJNZ 0x0040210b\nMOV qword ptr [0x0060e330],0x409a25\nMOV RDI,qword ptr [0x0060e330]\nCALL 0x004016f0\nMOV dword ptr [0x0060e338],EAX\nMOV EDI,0x404e90\nCALL 0x00407f50\nJMP 0x00402160\nMOV RSI,qword ptr [0x0060e300]\nMOV R9,qword ptr [0x0060e270]\nMOV EDI,0x409ab2\nMOV EDX,0x408880\nMOV ECX,0x408870\nMOV R8D,0x4\nCALL 0x00404c40\nMOV EAX,dword ptr [0x408870 + RAX*0x4]\nMOV dword ptr [0x0060e378],EAX\nNOP\nMOV EDX,0x409a27\nMOV ECX,0x408530\nXOR R8D,R8D\nMOV EDI,EBX\nMOV RSI,R12\nCALL 0x00401700\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x8e\nJA 0x00402822\nJMP qword ptr [0x407fa0 + RCX*0x8]\nMOV RAX,qword ptr [0x0060e300]\nCMP byte ptr [RAX],0x0\nJZ 0x004021c4\nCMP byte ptr [RAX + 0x1],0x0\nJZ 0x004021c4\nXOR EDI,EDI\nMOV ESI,0x409a71\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401920\nMOV RAX,qword ptr [0x0060e300]\nMOVSX EAX,byte ptr [RAX]\nMOV dword ptr [0x0060e25c],EAX\nJMP 0x00402160\nMOV byte ptr [0x0060e351],0x1\nJMP 0x00402160\nMOV RSI,qword ptr [0x0060e300]\nMOV R9,qword ptr [0x0060e270]\nMOV EDI,0x409a2b\nMOV EDX,0x4087b0\nMOV ECX,0x408790\nMOV R8D,0x4\nCALL 0x00404c40\nMOV EAX,dword ptr [0x408790 + RAX*0x4]\nMOV dword ptr [0x0060e33c],EAX\nJMP 0x00402160\nMOV RDI,qword ptr [0x0060e300]\nCALL 0x00402870\nMOV qword ptr [0x0060e248],RAX\nJMP 0x00402160\nMOV RSI,qword ptr [0x0060e300]\nMOV R9,qword ptr [0x0060e270]\nMOV EDI,0x409b58\nMOV EDX,0x4087f0\nMOV ECX,0x4087e0\nMOV R8D,0x4\nCALL 0x00404c40\nMOV EAX,dword ptr [0x4087e0 + RAX*0x4]\nMOV dword ptr [0x0060e340],EAX\nJMP 0x00402160\nMOV RDI,qword ptr [0x0060e300]\nCALL 0x00402870\nMOV qword ptr [0x0060e250],RAX\nJMP 0x00402160\nMOV RSI,qword ptr [0x0060e300]\nMOV R9,qword ptr [0x0060e270]\nMOV EDI,0x409a32\nMOV EDX,0x408840\nMOV ECX,0x408820\nMOV R8D,0x4\nCALL 0x00404c40\nMOV EAX,dword ptr [0x408820 + RAX*0x4]\nMOV dword ptr [0x0060e258],EAX\nJMP 0x00402160\nMOV RAX,qword ptr [0x0060e300]\nMOV qword ptr [0x0060e358],RAX\nJMP 0x00402160\nMOV byte ptr [0x0060e344],0x1\nJMP 0x00402160\nMOV RDI,qword ptr [0x0060e300]\nXOR ESI,ESI\nMOV EDX,0xa\nMOV ECX,0x60e348\nMOV R8D,0x40b009\nCALL 0x004073d0\nTEST EAX,EAX\nJNZ 0x0040230a\nMOV RAX,qword ptr [0x0060e348]\nTEST RAX,RAX\nJNZ 0x00402345\nXOR EDI,EDI\nMOV ESI,0x409a3a\nMOV EDX,0x5\nCALL 0x004016d0\nMOV R15,RAX\nMOV RDI,qword ptr [0x0060e300]\nCALL 0x004068c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00401920\nMOV RAX,qword ptr [0x0060e348]\nTEST RAX,RAX\nJNS 0x00402160\nMOV byte ptr [0x0060e350],0x1\nNEG RAX\nMOV qword ptr [0x0060e348],RAX\nJMP 0x00402160\nCMP qword ptr [0x0060e530],0x0\nJZ 0x00402393\nXOR EDI,EDI\nMOV ESI,0x409a53\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401920\nMOV RDI,qword ptr [0x0060e300]\nMOV ESI,0x1\nCALL 0x004043c0\nJMP 0x00402160\nMOV byte ptr [0x0060e360],0x1\nJMP 0x00402160\nMOV byte ptr [0x0060e361],0x1\nMOV byte ptr [0x0060e360],0x1\nJMP 0x00402160\nMOV RDI,qword ptr [0x0060e300]\nTEST RDI,RDI\nJZ 0x0040244b\nXOR ESI,ESI\nMOV EDX,0xa\nMOV ECX,0x60e368\nMOV R8D,0x40b009\nCALL 0x004076c0\nTEST EAX,EAX\nJNZ 0x004023ff\nMOV RAX,qword ptr [0x0060e368]\nTEST RAX,RAX\nJNZ 0x00402160\nXOR EDI,EDI\nMOV ESI,0x409a9a\nMOV EDX,0x5\nCALL 0x004016d0\nMOV R15,RAX\nMOV RDI,qword ptr [0x0060e300]\nCALL 0x004068c0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R15\nCALL 0x00401920\nJMP 0x00402160\nMOV RAX,qword ptr [0x0060e300]\nMOV qword ptr [0x0060e370],RAX\nJMP 0x00402160\nMOV qword ptr [0x0060e368],0x1\nJMP 0x00402160\nCMP qword ptr [0x0060e370],0x0\nJZ 0x00402493\nTEST byte ptr [0x0060e344],0x1\nJZ 0x00402493\nXOR EDI,EDI\nMOV ESI,0x409ad7\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401920\nTEST R14,R14\nJNZ 0x004024c6\nMOV AL,byte ptr [0x0060e360]\nXOR AL,0x1\nTEST AL,0x1\nJNZ 0x004024c6\nXOR EDI,EDI\nMOV ESI,0x409b03\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401920\nMOV RDI,qword ptr [0x0060e370]\nTEST RDI,RDI\nJNZ 0x0040252a\nMOV RAX,qword ptr [0x0060e348]\nTEST RAX,RAX\nJNZ 0x0040252a\nTEST byte ptr [0x0060e360],0x1\nJZ 0x0040252a\nMOV EAX,dword ptr [0x0060e340]\nOR EAX,dword ptr [0x0060e33c]\nJNZ 0x0040252a\nMOV AL,byte ptr [0x0060e344]\nXOR AL,0x1\nTEST AL,0x1\nJZ 0x0040252a\nXOR EDI,EDI\nMOV ESI,0x409b18\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401920\nMOV RDI,qword ptr [0x0060e370]\nTEST RDI,RDI\nJZ 0x00402534\nCALL 0x004029b0\nCMP byte ptr [0x0060e344],0x1\nJNZ 0x004025a5\nCMP dword ptr [0x0060e340],0x0\nJZ 0x0040256b\nXOR EDI,EDI\nMOV ESI,0x409b37\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401920\nCMP byte ptr [0x0060e360],0x1\nJNZ 0x004025a5\nMOV EDI,0x10001\nCALL 0x004018a0\nCMP byte ptr [RAX],0x0\nJNZ 0x004025a5\nXOR EDI,EDI\nMOV ESI,0x409b5d\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401920\nMOV RDI,qword ptr [0x0060e348]\nCALL 0x00402df0\nCMP qword ptr [0x0060e348],0x0\nSETZ AL\nCMP dword ptr [0x0060e25c],0x80\nSETZ CL\nAND CL,AL\nMOVZX EAX,CL\nMOV dword ptr [0x0060e37c],EAX\nCMP dword ptr [0x0060e378],0x0\nJZ 0x004025e4\nMOV byte ptr [0x0060e380],0x1\nCMP dword ptr [0x0060e2f8],EBX\nJGE 0x00402669\nCMP byte ptr [0x0060e360],0x1\nJNZ 0x00402627\nMOV RAX,qword ptr [0x0060e368]\nTEST RAX,RAX\nJZ 0x00402627\nXOR EDI,EDI\nMOV ESI,0x409b83\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401920\nMOV EAX,dword ptr [0x0060e2f8]\nMOV EBP,0x1\nCMP EAX,EBX\nJGE 0x004027fb\nMOV EBP,0x1\nNOP\nCDQE\nMOV RDI,qword ptr [R12 + RAX*0x8]\nMOV ESI,0x1\nCALL 0x00402e30\nAND EBP,EAX\nMOV EAX,dword ptr [0x0060e2f8]\nINC EAX\nMOV dword ptr [0x0060e2f8],EAX\nCMP EAX,EBX\nJL 0x00402640\nJMP 0x004027c9\nMOV qword ptr [RSP],0x0\nMOV qword ptr [RSP + 0x8],0x0\nMOV RAX,qword ptr [0x0060e368]\nLEA RCX,[RAX + -0x1]\nMOV qword ptr [0x0060e368],RCX\nTEST RAX,RAX\nJZ 0x004026f0\nXOR R14D,R14D\nMOV RBX,RSP\nLEA RBP,[RSP + 0x8]\nNOP dword ptr [RAX]\nMOVZX EAX,byte ptr [0x0060e351]\nTEST AL,AL\nMOV EDX,0xa\nCMOVNZ EDX,R14D\nMOV RCX,qword ptr [0x0060e2f0]\nMOV RDI,RBX\nMOV RSI,RBP\nCALL 0x004019e0\nTEST RAX,RAX\nJLE 0x004026f0\nMOV RDI,qword ptr [RSP]\nMOV RSI,qword ptr [0x0060e2e8]\nCALL 0x004017c0\nMOV RAX,qword ptr [0x0060e368]\nLEA RCX,[RAX + -0x1]\nMOV qword ptr [0x0060e368],RCX\nTEST RAX,RAX\nJNZ 0x004026a0\nMOV AL,byte ptr [0x0060e351]\nXOR R12D,R12D\nTEST AL,AL\nMOV EDX,0xa\nCMOVNZ EDX,R12D\nMOV RCX,qword ptr [0x0060e2f0]\nMOV RDI,RSP\nLEA RSI,[RSP + 0x8]\nCALL 0x004019e0\nMOV EBP,0x1\nTEST RAX,RAX\nJLE 0x00402790\nMOV R14,RSP\nLEA R15,[RSP + 0x8]\nNOP word ptr [RAX + RAX*0x1]\nMOV RDX,qword ptr [RSP]\nMOVSX ECX,byte ptr [RDX + RAX*0x1 + -0x1]\nMOVZX EBX,byte ptr [0x0060e351]\nTEST BL,BL\nMOV EDI,0xa\nCMOVNZ EDI,R12D\nCMP ECX,EDI\nJNZ 0x00402754\nMOV byte ptr [RDX + RAX*0x1 + -0x1],0x0\nXOR ESI,ESI\nCMP ECX,EDI\nSETZ SIL\nMOV RDI,qword ptr [RSP]\nCALL 0x00402e30\nAND EBP,EAX\nMOVZX EAX,byte ptr [0x0060e351]\nTEST AL,AL\nMOV EDX,0xa\nCMOVNZ EDX,R12D\nMOV RCX,qword ptr [0x0060e2f0]\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x004019e0\nTEST RAX,RAX\nJG 0x00402730\nMOV RDI,qword ptr [0x0060e2f0]\nCALL 0x004017d0\nTEST EAX,EAX\nJZ 0x004027c9\nCALL 0x00401610\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x409bac\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x00401920\nTEST EBP,EBP\nJNZ 0x004027fb\nMOV AL,byte ptr [0x0060e360]\nXOR AL,0x1\nTEST AL,0x1\nJNZ 0x004027fb\nXOR EDI,EDI\nMOV ESI,0x409bc0\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401920\nMOV EAX,dword ptr [0x0060e378]\nAND EAX,0xfffffffe\nXOR ECX,ECX\nCMP EAX,0x2\nSETNZ CL\nADD ECX,ECX\nXOR EAX,EAX\nTEST EBP,EBP\nCMOVZ EAX,ECX\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x00402841\nCMP EAX,0xffffff7e\nJNZ 0x00402837\nXOR EDI,EDI\nCALL 0x00401b00\nMOV EDI,0x1\nCALL 0x00401b00\nMOV RDI,qword ptr [0x0060e2e8]\nMOV RCX,qword ptr [0x0060e268]\nMOV ESI,0x409a06\nMOV EDX,0x409abc\nMOV R8D,0x409aca\nXOR R9D,R9D\nXOR EAX,EAX\nCALL 0x004070c0\nXOR EDI,EDI\nCALL 0x00401980\n'
p1152
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 10\n49 89 f4\n89 fb\n49 8b 3c 24\ne8 16 33 00 00\nbf 06 00 00 00\nbe 09 b0 40 00\ne8 27 f8 ff ff\n49 89 c6\nbf c0 9a 40 00\nbe 0d 9a 40 00\ne8 e5 f5 ff ff\nbf c0 9a 40 00\ne8 bb f5 ff ff\nbf 00 00 01 00\ne8 b1 f7 ff ff\n48 89 05 3a c2 20 00\n48 85 c0\n74 05\n80 38 00\n75 0b\n48 c7 05 25 c2 20 00 25 9a 40 00\n48 8b 3d 1e c2 20 00\ne8 d9 f5 ff ff\n89 05 1b c2 20 00\nbf 90 4e 40 00\ne8 29 5e 00 00\neb 37\n48 8b 35 d0 c1 20 00\n4c 8b 0d 39 c1 20 00\nbf b2 9a 40 00\nba 80 88 40 00\nb9 70 88 40 00\n41 b8 04 00 00 00\ne8 ef 2a 00 00\n8b 04 85 70 88 40 00\n89 05 1a c2 20 00\n66 90\nba 27 9a 40 00\nb9 30 85 40 00\n45 31 c0\n89 df\n4c 89 e6\ne8 89 f5 ff ff\n8d 48 01\n81 f9 8e 00 00 00\n0f 87 9c 06 00 00\nff 24 cd a0 7f 40 00\n48 8b 05 6c c1 20 00\n80 38 00\n74 2b\n80 78 01 00\n74 25\n31 ff\nbe 71 9a 40 00\nba 05 00 00 00\ne8 20 f5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 5c f7 ff ff\n48 8b 05 35 c1 20 00\n0f be 00\n89 05 88 c0 20 00\neb 8a\nc6 05 74 c1 20 00 01\neb 81\n48 8b 35 1a c1 20 00\n4c 8b 0d 83 c0 20 00\nbf 2b 9a 40 00\nba b0 87 40 00\nb9 90 87 40 00\n41 b8 04 00 00 00\ne8 39 2a 00 00\n8b 04 85 90 87 40 00\n89 05 28 c1 20 00\ne9 47 ff ff ff\n48 8b 3d e0 c0 20 00\ne8 4b 06 00 00\n48 89 05 1c c0 20 00\ne9 2f ff ff ff\n48 8b 35 c8 c0 20 00\n4c 8b 0d 31 c0 20 00\nbf 58 9b 40 00\nba f0 87 40 00\nb9 e0 87 40 00\n41 b8 04 00 00 00\ne8 e7 29 00 00\n8b 04 85 e0 87 40 00\n89 05 da c0 20 00\ne9 f5 fe ff ff\n48 8b 3d 8e c0 20 00\ne8 f9 05 00 00\n48 89 05 d2 bf 20 00\ne9 dd fe ff ff\n48 8b 35 76 c0 20 00\n4c 8b 0d df bf 20 00\nbf 32 9a 40 00\nba 40 88 40 00\nb9 20 88 40 00\n41 b8 04 00 00 00\ne8 95 29 00 00\n8b 04 85 20 88 40 00\n89 05 a0 bf 20 00\ne9 a3 fe ff ff\n48 8b 05 3c c0 20 00\n48 89 05 8d c0 20 00\ne9 90 fe ff ff\nc6 05 6d c0 20 00 01\ne9 84 fe ff ff\n48 8b 3d 1d c0 20 00\n31 f6\nba 0a 00 00 00\nb9 48 e3 60 00\n41 b8 09 b0 40 00\ne8 d6 50 00 00\n85 c0\n75 0c\n48 8b 05 43 c0 20 00\n48 85 c0\n75 3b\n31 ff\nbe 3a 9a 40 00\nba 05 00 00 00\ne8 b5 f3 ff ff\n49 89 c7\n48 8b 3d db bf 20 00\ne8 96 45 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 fa\ne8 e2 f5 ff ff\n48 8b 05 03 c0 20 00\n48 85 c0\n0f 89 12 fe ff ff\nc6 05 fb bf 20 00 01\n48 f7 d8\n48 89 05 e9 bf 20 00\ne9 fc fd ff ff\n48 83 3d c4 c1 20 00 00\n74 25\n31 ff\nbe 53 9a 40 00\nba 05 00 00 00\ne8 51 f3 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 8d f5 ff ff\n48 8b 3d 66 bf 20 00\nbe 01 00 00 00\ne8 1c 20 00 00\ne9 b7 fd ff ff\nc6 05 b0 bf 20 00 01\ne9 ab fd ff ff\nc6 05 a5 bf 20 00 01\nc6 05 9d bf 20 00 01\ne9 98 fd ff ff\n48 8b 3d 31 bf 20 00\n48 85 ff\n74 77\n31 f6\nba 0a 00 00 00\nb9 68 e3 60 00\n41 b8 09 b0 40 00\ne8 d5 52 00 00\n85 c0\n75 10\n48 8b 05 72 bf 20 00\n48 85 c0\n0f 85 61 fd ff ff\n31 ff\nbe 9a 9a 40 00\nba 05 00 00 00\ne8 c0 f2 ff ff\n49 89 c7\n48 8b 3d e6 be 20 00\ne8 a1 44 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 fa\ne8 ed f4 ff ff\ne9 28 fd ff ff\n48 8b 05 c1 be 20 00\n48 89 05 2a bf 20 00\ne9 15 fd ff ff\n48 c7 05 12 bf 20 00 01 00 00 00\ne9 05 fd ff ff\n48 83 3d 0d bf 20 00 00\n74 2e\nf6 05 d8 be 20 00 01\n74 25\n31 ff\nbe d7 9a 40 00\nba 05 00 00 00\ne8 51 f2 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 8d f4 ff ff\n4d 85 f6\n75 2e\n8a 05 c2 be 20 00\n34 01\na8 01\n75 22\n31 ff\nbe 03 9b 40 00\nba 05 00 00 00\ne8 1b f2 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 5a f4 ff ff\n48 8b 3d a3 be 20 00\n48 85 ff\n75 58\n48 8b 05 6f be 20 00\n48 85 c0\n75 4c\nf6 05 7b be 20 00 01\n74 43\n8b 05 53 be 20 00\n0b 05 49 be 20 00\n75 35\n8a 05 49 be 20 00\n34 01\na8 01\n74 29\n31 ff\nbe 18 9b 40 00\nba 05 00 00 00\ne8 be f1 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 fd f3 ff ff\n48 8b 3d 46 be 20 00\n48 85 ff\n74 05\ne8 7c 04 00 00\n80 3d 09 be 20 00 01\n75 68\n83 3d fc bd 20 00 00\n74 25\n31 ff\nbe 37 9b 40 00\nba 05 00 00 00\ne8 79 f1 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 b5 f3 ff ff\n80 3d ee bd 20 00 01\n75 31\nbf 01 00 01 00\ne8 22 f3 ff ff\n80 38 00\n75 22\n31 ff\nbe 5d 9b 40 00\nba 05 00 00 00\ne8 3c f1 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 7b f3 ff ff\n48 8b 3d 9c bd 20 00\ne8 3f 08 00 00\n48 83 3d 8f bd 20 00 00\n0f 94 c0\n81 3d 96 bc 20 00 80 00 00 00\n0f 94 c1\n20 c1\n0f b6 c1\n89 05 a8 bd 20 00\n83 3d 9d bd 20 00 00\n74 07\nc6 05 9c bd 20 00 01\n39 1d 0e bd 20 00\n0f 8d 79 00 00 00\n80 3d 69 bd 20 00 01\n75 2e\n48 8b 05 68 bd 20 00\n48 85 c0\n74 22\n31 ff\nbe 83 9b 40 00\nba 05 00 00 00\ne8 ba f0 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 f9 f2 ff ff\n8b 05 cb bc 20 00\nbd 01 00 00 00\n39 d8\n0f 8d c1 01 00 00\nbd 01 00 00 00\n90\n48 98\n49 8b 3c c4\nbe 01 00 00 00\ne8 e0 07 00 00\n21 c5\n8b 05 a0 bc 20 00\nff c0\n89 05 98 bc 20 00\n39 d8\n7c dc\ne9 60 01 00 00\n48 c7 04 24 00 00 00 00\n48 c7 44 24 08 00 00 00 00\n48 8b 05 e7 bc 20 00\n48 8d 48 ff\n48 89 0d dc bc 20 00\n48 85 c0\n74 5f\n45 31 f6\n48 89 e3\n48 8d 6c 24 08\n0f 1f 40 00\n0f b6 05 aa bc 20 00\n84 c0\nba 0a 00 00 00\n41 0f 45 d6\n48 8b 0d 37 bc 20 00\n48 89 df\n48 89 ee\ne8 1c f3 ff ff\n48 85 c0\n7e 27\n48 8b 3c 24\n48 8b 35 14 bc 20 00\ne8 e7 f0 ff ff\n48 8b 05 88 bc 20 00\n48 8d 48 ff\n48 89 0d 7d bc 20 00\n48 85 c0\n75 b0\n8a 05 5b bc 20 00\n45 31 e4\n84 c0\nba 0a 00 00 00\n41 0f 45 d4\n48 8b 0d e5 bb 20 00\n48 89 e7\n48 8d 74 24 08\ne8 c8 f2 ff ff\nbd 01 00 00 00\n48 85 c0\n7e 6e\n49 89 e6\n4c 8d 7c 24 08\n66 0f 1f 44 00 00\n48 8b 14 24\n0f be 4c 02 ff\n0f b6 1d 11 bc 20 00\n84 db\nbf 0a 00 00 00\n41 0f 45 fc\n39 f9\n75 05\nc6 44 02 ff 00\n31 f6\n39 f9\n40 0f 94 c6\n48 8b 3c 24\ne8 cb 06 00 00\n21 c5\n0f b6 05 e3 bb 20 00\n84 c0\nba 0a 00 00 00\n41 0f 45 d4\n48 8b 0d 70 bb 20 00\n4c 89 f7\n4c 89 fe\ne8 55 f2 ff ff\n48 85 c0\n7f a0\n48 8b 3d 59 bb 20 00\ne8 34 f0 ff ff\n85 c0\n74 29\ne8 6b ee ff ff\n8b 18\n31 ff\nbe ac 9b 40 00\nba 05 00 00 00\ne8 18 ef ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\ne8 57 f1 ff ff\n85 ed\n75 2e\n8a 05 8d bb 20 00\n34 01\na8 01\n75 22\n31 ff\nbe c0 9b 40 00\nba 05 00 00 00\ne8 e6 ee ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 25 f1 ff ff\n8b 05 77 bb 20 00\n83 e0 fe\n31 c9\n83 f8 02\n0f 95 c1\n01 c9\n31 c0\n85 ed\n0f 44 c1\n48 83 c4 10\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n3d 7d ff ff ff\n74 18\n3d 7e ff ff ff\n75 07\n31 ff\ne8 c9 f2 ff ff\nbf 01 00 00 00\ne8 bf f2 ff ff\n48 8b 3d a0 ba 20 00\n48 8b 0d 19 ba 20 00\nbe 06 9a 40 00\nba bc 9a 40 00\n41 b8 ca 9a 40 00\n45 31 c9\n31 c0\ne8 57 48 00 00\n31 ff\ne8 10 f1 ff ff\n'
p1153
S'.text:00000000004020a0\n.text:00000000004020a1\n.text:00000000004020a3\n.text:00000000004020a5\n.text:00000000004020a7\n.text:00000000004020a8\n.text:00000000004020ac\n.text:00000000004020af\n.text:00000000004020b1\n.text:00000000004020b5\n.text:00000000004020ba\n.text:00000000004020bf\n.text:00000000004020c4\n.text:00000000004020c9\n.text:00000000004020cc\n.text:00000000004020d1\n.text:00000000004020d6\n.text:00000000004020db\n.text:00000000004020e0\n.text:00000000004020e5\n.text:00000000004020ea\n.text:00000000004020ef\n.text:00000000004020f6\n.text:00000000004020f9\n.text:00000000004020fb\n.text:00000000004020fe\n.text:0000000000402100\n.text:000000000040210b\n.text:0000000000402112\n.text:0000000000402117\n.text:000000000040211d\n.text:0000000000402122\n.text:0000000000402127\n.text:0000000000402129\n.text:0000000000402130\n.text:0000000000402137\n.text:000000000040213c\n.text:0000000000402141\n.text:0000000000402146\n.text:000000000040214c\n.text:0000000000402151\n.text:0000000000402158\n.text:000000000040215e\n.text:0000000000402160\n.text:0000000000402165\n.text:000000000040216a\n.text:000000000040216d\n.text:000000000040216f\n.text:0000000000402172\n.text:0000000000402177\n.text:000000000040217a\n.text:0000000000402180\n.text:0000000000402186\n.text:000000000040218d\n.text:0000000000402194\n.text:0000000000402197\n.text:0000000000402199\n.text:000000000040219d\n.text:000000000040219f\n.text:00000000004021a1\n.text:00000000004021a6\n.text:00000000004021ab\n.text:00000000004021b0\n.text:00000000004021b3\n.text:00000000004021b8\n.text:00000000004021ba\n.text:00000000004021bc\n.text:00000000004021bf\n.text:00000000004021c4\n.text:00000000004021cb\n.text:00000000004021ce\n.text:00000000004021d4\n.text:00000000004021d6\n.text:00000000004021dd\n.text:00000000004021df\n.text:00000000004021e6\n.text:00000000004021ed\n.text:00000000004021f2\n.text:00000000004021f7\n.text:00000000004021fc\n.text:0000000000402202\n.text:0000000000402207\n.text:000000000040220e\n.text:0000000000402214\n.text:0000000000402219\n.text:0000000000402220\n.text:0000000000402225\n.text:000000000040222c\n.text:0000000000402231\n.text:0000000000402238\n.text:000000000040223f\n.text:0000000000402244\n.text:0000000000402249\n.text:000000000040224e\n.text:0000000000402254\n.text:0000000000402259\n.text:0000000000402260\n.text:0000000000402266\n.text:000000000040226b\n.text:0000000000402272\n.text:0000000000402277\n.text:000000000040227e\n.text:0000000000402283\n.text:000000000040228a\n.text:0000000000402291\n.text:0000000000402296\n.text:000000000040229b\n.text:00000000004022a0\n.text:00000000004022a6\n.text:00000000004022ab\n.text:00000000004022b2\n.text:00000000004022b8\n.text:00000000004022bd\n.text:00000000004022c4\n.text:00000000004022cb\n.text:00000000004022d0\n.text:00000000004022d7\n.text:00000000004022dc\n.text:00000000004022e3\n.text:00000000004022e5\n.text:00000000004022ea\n.text:00000000004022ef\n.text:00000000004022f5\n.text:00000000004022fa\n.text:00000000004022fc\n.text:00000000004022fe\n.text:0000000000402305\n.text:0000000000402308\n.text:000000000040230a\n.text:000000000040230c\n.text:0000000000402311\n.text:0000000000402316\n.text:000000000040231b\n.text:000000000040231e\n.text:0000000000402325\n.text:000000000040232a\n.text:000000000040232d\n.text:0000000000402332\n.text:0000000000402334\n.text:0000000000402336\n.text:0000000000402339\n.text:000000000040233e\n.text:0000000000402345\n.text:0000000000402348\n.text:000000000040234e\n.text:0000000000402355\n.text:0000000000402358\n.text:000000000040235f\n.text:0000000000402364\n.text:000000000040236c\n.text:000000000040236e\n.text:0000000000402370\n.text:0000000000402375\n.text:000000000040237a\n.text:000000000040237f\n.text:0000000000402382\n.text:0000000000402387\n.text:0000000000402389\n.text:000000000040238b\n.text:000000000040238e\n.text:0000000000402393\n.text:000000000040239a\n.text:000000000040239f\n.text:00000000004023a4\n.text:00000000004023a9\n.text:00000000004023b0\n.text:00000000004023b5\n.text:00000000004023bc\n.text:00000000004023c3\n.text:00000000004023c8\n.text:00000000004023cf\n.text:00000000004023d2\n.text:00000000004023d4\n.text:00000000004023d6\n.text:00000000004023db\n.text:00000000004023e0\n.text:00000000004023e6\n.text:00000000004023eb\n.text:00000000004023ed\n.text:00000000004023ef\n.text:00000000004023f6\n.text:00000000004023f9\n.text:00000000004023ff\n.text:0000000000402401\n.text:0000000000402406\n.text:000000000040240b\n.text:0000000000402410\n.text:0000000000402413\n.text:000000000040241a\n.text:000000000040241f\n.text:0000000000402422\n.text:0000000000402427\n.text:0000000000402429\n.text:000000000040242b\n.text:000000000040242e\n.text:0000000000402433\n.text:0000000000402438\n.text:000000000040243f\n.text:0000000000402446\n.text:000000000040244b\n.text:0000000000402456\n.text:000000000040245b\n.text:0000000000402463\n.text:0000000000402465\n.text:000000000040246c\n.text:000000000040246e\n.text:0000000000402470\n.text:0000000000402475\n.text:000000000040247a\n.text:000000000040247f\n.text:0000000000402482\n.text:0000000000402487\n.text:0000000000402489\n.text:000000000040248b\n.text:000000000040248e\n.text:0000000000402493\n.text:0000000000402496\n.text:0000000000402498\n.text:000000000040249e\n.text:00000000004024a0\n.text:00000000004024a2\n.text:00000000004024a4\n.text:00000000004024a6\n.text:00000000004024ab\n.text:00000000004024b0\n.text:00000000004024b5\n.text:00000000004024b8\n.text:00000000004024ba\n.text:00000000004024bc\n.text:00000000004024be\n.text:00000000004024c1\n.text:00000000004024c6\n.text:00000000004024cd\n.text:00000000004024d0\n.text:00000000004024d2\n.text:00000000004024d9\n.text:00000000004024dc\n.text:00000000004024de\n.text:00000000004024e5\n.text:00000000004024e7\n.text:00000000004024ed\n.text:00000000004024f3\n.text:00000000004024f5\n.text:00000000004024fb\n.text:00000000004024fd\n.text:00000000004024ff\n.text:0000000000402501\n.text:0000000000402503\n.text:0000000000402508\n.text:000000000040250d\n.text:0000000000402512\n.text:0000000000402515\n.text:0000000000402517\n.text:0000000000402519\n.text:000000000040251b\n.text:000000000040251e\n.text:0000000000402523\n.text:000000000040252a\n.text:000000000040252d\n.text:000000000040252f\n.text:0000000000402534\n.text:000000000040253b\n.text:000000000040253d\n.text:0000000000402544\n.text:0000000000402546\n.text:0000000000402548\n.text:000000000040254d\n.text:0000000000402552\n.text:0000000000402557\n.text:000000000040255a\n.text:000000000040255f\n.text:0000000000402561\n.text:0000000000402563\n.text:0000000000402566\n.text:000000000040256b\n.text:0000000000402572\n.text:0000000000402574\n.text:0000000000402579\n.text:000000000040257e\n.text:0000000000402581\n.text:0000000000402583\n.text:0000000000402585\n.text:000000000040258a\n.text:000000000040258f\n.text:0000000000402594\n.text:0000000000402597\n.text:0000000000402599\n.text:000000000040259b\n.text:000000000040259d\n.text:00000000004025a0\n.text:00000000004025a5\n.text:00000000004025ac\n.text:00000000004025b1\n.text:00000000004025b9\n.text:00000000004025bc\n.text:00000000004025c6\n.text:00000000004025c9\n.text:00000000004025cb\n.text:00000000004025ce\n.text:00000000004025d4\n.text:00000000004025db\n.text:00000000004025dd\n.text:00000000004025e4\n.text:00000000004025ea\n.text:00000000004025f0\n.text:00000000004025f7\n.text:00000000004025f9\n.text:0000000000402600\n.text:0000000000402603\n.text:0000000000402605\n.text:0000000000402607\n.text:000000000040260c\n.text:0000000000402611\n.text:0000000000402616\n.text:0000000000402619\n.text:000000000040261b\n.text:000000000040261d\n.text:000000000040261f\n.text:0000000000402622\n.text:0000000000402627\n.text:000000000040262d\n.text:0000000000402632\n.text:0000000000402634\n.text:000000000040263a\n.text:000000000040263f\n.text:0000000000402640\n.text:0000000000402642\n.text:0000000000402646\n.text:000000000040264b\n.text:0000000000402650\n.text:0000000000402652\n.text:0000000000402658\n.text:000000000040265a\n.text:0000000000402660\n.text:0000000000402662\n.text:0000000000402664\n.text:0000000000402669\n.text:0000000000402671\n.text:000000000040267a\n.text:0000000000402681\n.text:0000000000402685\n.text:000000000040268c\n.text:000000000040268f\n.text:0000000000402691\n.text:0000000000402694\n.text:0000000000402697\n.text:000000000040269c\n.text:00000000004026a0\n.text:00000000004026a7\n.text:00000000004026a9\n.text:00000000004026ae\n.text:00000000004026b2\n.text:00000000004026b9\n.text:00000000004026bc\n.text:00000000004026bf\n.text:00000000004026c4\n.text:00000000004026c7\n.text:00000000004026c9\n.text:00000000004026cd\n.text:00000000004026d4\n.text:00000000004026d9\n.text:00000000004026e0\n.text:00000000004026e4\n.text:00000000004026eb\n.text:00000000004026ee\n.text:00000000004026f0\n.text:00000000004026f6\n.text:00000000004026f9\n.text:00000000004026fb\n.text:0000000000402700\n.text:0000000000402704\n.text:000000000040270b\n.text:000000000040270e\n.text:0000000000402713\n.text:0000000000402718\n.text:000000000040271d\n.text:0000000000402720\n.text:0000000000402722\n.text:0000000000402725\n.text:000000000040272a\n.text:0000000000402730\n.text:0000000000402734\n.text:0000000000402739\n.text:0000000000402740\n.text:0000000000402742\n.text:0000000000402747\n.text:000000000040274b\n.text:000000000040274d\n.text:000000000040274f\n.text:0000000000402754\n.text:0000000000402756\n.text:0000000000402758\n.text:000000000040275c\n.text:0000000000402760\n.text:0000000000402765\n.text:0000000000402767\n.text:000000000040276e\n.text:0000000000402770\n.text:0000000000402775\n.text:0000000000402779\n.text:0000000000402780\n.text:0000000000402783\n.text:0000000000402786\n.text:000000000040278b\n.text:000000000040278e\n.text:0000000000402790\n.text:0000000000402797\n.text:000000000040279c\n.text:000000000040279e\n.text:00000000004027a0\n.text:00000000004027a5\n.text:00000000004027a7\n.text:00000000004027a9\n.text:00000000004027ae\n.text:00000000004027b3\n.text:00000000004027b8\n.text:00000000004027bb\n.text:00000000004027bd\n.text:00000000004027bf\n.text:00000000004027c1\n.text:00000000004027c4\n.text:00000000004027c9\n.text:00000000004027cb\n.text:00000000004027cd\n.text:00000000004027d3\n.text:00000000004027d5\n.text:00000000004027d7\n.text:00000000004027d9\n.text:00000000004027db\n.text:00000000004027e0\n.text:00000000004027e5\n.text:00000000004027ea\n.text:00000000004027ed\n.text:00000000004027ef\n.text:00000000004027f1\n.text:00000000004027f3\n.text:00000000004027f6\n.text:00000000004027fb\n.text:0000000000402801\n.text:0000000000402804\n.text:0000000000402806\n.text:0000000000402809\n.text:000000000040280c\n.text:000000000040280e\n.text:0000000000402810\n.text:0000000000402812\n.text:0000000000402815\n.text:0000000000402819\n.text:000000000040281a\n.text:000000000040281c\n.text:000000000040281e\n.text:0000000000402820\n.text:0000000000402821\n.text:0000000000402822\n.text:0000000000402827\n.text:0000000000402829\n.text:000000000040282e\n.text:0000000000402830\n.text:0000000000402832\n.text:0000000000402837\n.text:000000000040283c\n.text:0000000000402841\n.text:0000000000402848\n.text:000000000040284f\n.text:0000000000402854\n.text:0000000000402859\n.text:000000000040285f\n.text:0000000000402862\n.text:0000000000402864\n.text:0000000000402869\n.text:000000000040286b\n'
p1154
tp1155
sS'setup_padding_buffer'
p1156
(S'\n__stdcall setup_padding_buffer(size_t min_size)\n'
p1157
V\u000avoid setup_padding_buffer(size_t min_size)\u000a\u000a{\u000a  if (padding_buffer_size <= min_size) {\u000a    padding_buffer_size = min_size + 1;\u000a    padding_buffer = (char *)xrealloc(padding_buffer,padding_buffer_size);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1158
S'MOV RAX,RDI\nCMP qword ptr [0x0060e3a0],RAX\nJA 0x00402e21\nPUSH RAX\nINC RAX\nMOV qword ptr [0x0060e3a0],RAX\nMOV RDI,qword ptr [0x0060e3a8]\nMOV RSI,RAX\nCALL 0x00407230\nMOV qword ptr [0x0060e3a8],RAX\nADD RSP,0x8\nRET\n'
p1159
S'48 89 f8\n48 39 05 a6 b5 20 00\n77 25\n50\n48 ff c0\n48 89 05 99 b5 20 00\n48 8b 3d 9a b5 20 00\n48 89 c6\ne8 1a 44 00 00\n48 89 05 8b b5 20 00\n48 83 c4 08\nc3\n'
p1160
S'.text:0000000000402df0\n.text:0000000000402df3\n.text:0000000000402dfa\n.text:0000000000402dfc\n.text:0000000000402dfd\n.text:0000000000402e00\n.text:0000000000402e07\n.text:0000000000402e0e\n.text:0000000000402e11\n.text:0000000000402e16\n.text:0000000000402e1d\n.text:0000000000402e21\n'
p1161
tp1162
sS'c_isupper'
p1163
(S'\n__stdcall c_isupper()\n'
p1164
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1165
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1166
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1167
S'.text:0000000000404e20\n.text:0000000000404e23\n.text:0000000000404e26\n.text:0000000000404e29\n'
p1168
tp1169
sS'xcharalloc'
p1170
(S'\n__stdcall xcharalloc(size_t n)\n'
p1171
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1172
S'JMP 0x004071f0\n'
p1173
S'e9 2b ff ff ff\n'
p1174
S'.text:00000000004072c0\n'
p1175
tp1176
sS'c_isalnum'
p1177
(S'\n__stdcall c_isalnum()\n'
p1178
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1179
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00404d3b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00404d3b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00404d3a\nXOR EAX,EAX\nRET\n'
p1180
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1181
S'.text:0000000000404d20\n.text:0000000000404d22\n.text:0000000000404d25\n.text:0000000000404d28\n.text:0000000000404d2a\n.text:0000000000404d34\n.text:0000000000404d38\n.text:0000000000404d3a\n.text:0000000000404d3b\n.text:0000000000404d3e\n.text:0000000000404d41\n.text:0000000000404d43\n.text:0000000000404d45\n'
p1182
tp1183
sS'expld'
p1184
(S'\n__stdcall expld(longdouble val, uint * x)\n'
p1185
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000alongdouble expld(longdouble val,uint *x)\u000a\u000a{\u000a  bool bVar1;\u000a  int iVar2;\u000a  int *in_RSI;\u000a  float10 in_ST0;\u000a  float10 in_ST1;\u000a  float10 in_ST2;\u000a  float10 in_ST3;\u000a  float10 in_ST4;\u000a  float10 in_ST5;\u000a  float10 fVar3;\u000a  float10 in_stack_00000008;\u000a  \u000a  iVar2 = 0;\u000a  if ((_DAT_00408980 <= in_stack_00000008) && (in_stack_00000008 <= _DAT_00408990)) {\u000a    val = absld(val);\u000a    if ((float10)((ulong)x & 0xffffffff) <= in_ST0) {\u000a      iVar2 = 0;\u000a      do {\u000a        iVar2 = iVar2 + 1;\u000a        fVar3 = in_ST5;\u000a        val = absld(val);\u000a        bVar1 = (float10)((ulong)x & 0xffffffff) <= in_ST1;\u000a        in_ST1 = in_ST2;\u000a        in_ST2 = in_ST3;\u000a        in_ST3 = in_ST4;\u000a        in_ST4 = in_ST5;\u000a        in_ST5 = fVar3;\u000a      } while (bVar1);\u000a    }\u000a  }\u000a  if (in_RSI != (int *)0x0) {\u000a    *in_RSI = iVar2;\u000a  }\u000a  return val;\u000a}\u000a\u000a
p1186
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RSI\nMOV EBP,EDI\nFLD tword ptr [RSP + 0x60]\nXOR EBX,EBX\nFLD tword ptr [0x00408980]\nFXCH\nFUCOMI ST0,ST1\nFSTP ST1\nJC 0x00403d70\nFLD tword ptr [0x00408990]\nFUCOMIP ST0,ST1\nJC 0x00403d70\nFLD ST0\nFSTP tword ptr [RSP + 0x1c]\nFSTP tword ptr [RSP]\nCALL 0x004041c0\nMOV EAX,EBP\nMOV qword ptr [RSP + 0x28],RAX\nFILD qword ptr [RSP + 0x28]\nFXCH\nFUCOMIP ST0,ST1\nJNC 0x00403d74\nFSTP ST0\nFLD tword ptr [RSP + 0x1c]\nFLDZ\nJMP 0x00403db0\nXOR EBX,EBX\nFLD tword ptr [RSP + 0x1c]\nFLD ST1\nFSTP tword ptr [RSP + 0x34]\nFXCH\nNOP word ptr CS:[RAX + RAX*0x1]\nINC EBX\nFDIVP\nFLD ST0\nFSTP tword ptr [RSP + 0x1c]\nFSTP tword ptr [RSP]\nCALL 0x004041c0\nFLD tword ptr [RSP + 0x34]\nFLD tword ptr [RSP + 0x1c]\nFXCH ST2\nFUCOMIP ST0,ST1\nJNC 0x00403d90\nFSTP ST0\nTEST R14,R14\nJZ 0x00403dba\nMOV dword ptr [R14],EBX\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1187
S'55\n41 56\n53\n48 83 ec 40\n49 89 f6\n89 fd\ndb 6c 24 60\n31 db\ndb 2d 47 4c 00 00\nd9 c9\ndb e9\ndd d9\n72 2f\ndb 2d 49 4c 00 00\ndf e9\n72 25\nd9 c0\ndb 7c 24 1c\ndb 3c 24\ne8 67 04 00 00\n89 e8\n48 89 44 24 28\ndf 6c 24 28\nd9 c9\ndf e9\n73 0a\ndd d8\ndb 6c 24 1c\nd9 ee\neb 3c\n31 db\ndb 6c 24 1c\nd9 c1\ndb 7c 24 34\nd9 c9\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nff c3\nde f9\nd9 c0\ndb 7c 24 1c\ndb 3c 24\ne8 1e 04 00 00\ndb 6c 24 34\ndb 6c 24 1c\nd9 ca\ndf e9\n73 e0\ndd d8\n4d 85 f6\n74 03\n41 89 1e\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1188
S'.text:0000000000403d20\n.text:0000000000403d21\n.text:0000000000403d23\n.text:0000000000403d24\n.text:0000000000403d28\n.text:0000000000403d2b\n.text:0000000000403d2d\n.text:0000000000403d31\n.text:0000000000403d33\n.text:0000000000403d39\n.text:0000000000403d3b\n.text:0000000000403d3d\n.text:0000000000403d3f\n.text:0000000000403d41\n.text:0000000000403d47\n.text:0000000000403d49\n.text:0000000000403d4b\n.text:0000000000403d4d\n.text:0000000000403d51\n.text:0000000000403d54\n.text:0000000000403d59\n.text:0000000000403d5b\n.text:0000000000403d60\n.text:0000000000403d64\n.text:0000000000403d66\n.text:0000000000403d68\n.text:0000000000403d6a\n.text:0000000000403d6c\n.text:0000000000403d70\n.text:0000000000403d72\n.text:0000000000403d74\n.text:0000000000403d76\n.text:0000000000403d7a\n.text:0000000000403d7c\n.text:0000000000403d80\n.text:0000000000403d82\n.text:0000000000403d90\n.text:0000000000403d92\n.text:0000000000403d94\n.text:0000000000403d96\n.text:0000000000403d9a\n.text:0000000000403d9d\n.text:0000000000403da2\n.text:0000000000403da6\n.text:0000000000403daa\n.text:0000000000403dac\n.text:0000000000403dae\n.text:0000000000403db0\n.text:0000000000403db2\n.text:0000000000403db5\n.text:0000000000403db7\n.text:0000000000403dba\n.text:0000000000403dbe\n.text:0000000000403dbf\n.text:0000000000403dc1\n.text:0000000000403dc2\n'
p1189
tp1190
sS'__errno_location'
p1191
(S'\n__stdcall __errno_location()\n'
p1192
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060e040)();\u000a  return piVar1;\u000a}\u000a\u000a
p1193
S'JMP qword ptr [0x0060e040]\n'
p1194
S'ff 25 2a ca 20 00\n'
p1195
S'.plt:0000000000401610\n'
p1196
tp1197
sS'simple_strtod_float'
p1198
(S'\n__stdcall simple_strtod_float(char * input_str, char * * endptr, longdouble * value, size_t * precision)\n'
p1199
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000asimple_strtod_error\u000asimple_strtod_float(char *input_str,char **endptr,longdouble *value,size_t *precision)\u000a\u000a{\u000a  simple_strtod_error sVar1;\u000a  int iVar2;\u000a  simple_strtod_error sVar3;\u000a  long lVar4;\u000a  char *pcVar5;\u000a  float10 in_ST0;\u000a  float10 fVar6;\u000a  _Bool neg_frac;\u000a  _Bool negative;\u000a  char *ptr2;\u000a  _Bool local_52;\u000a  _Bool local_51;\u000a  char *local_50;\u000a  float10 local_48 [2];\u000a  float10 local_34;\u000a  \u000a  if (precision != (size_t *)0x0) {\u000a    *precision = 0;\u000a  }\u000a  sVar1 = simple_strtod_int(input_str,endptr,value,&local_51);\u000a  sVar3 = sVar1;\u000a  if ((sVar1 < SSE_OVERFLOW) &&\u000a     (iVar2 = strncmp(*endptr,decimal_point,(long)decimal_point_length), sVar3 = sVar1, iVar2 == 0))\u000a  {\u000a    local_48[0] = (float10)0;\u000a    lVar4 = (long)decimal_point_length;\u000a    pcVar5 = *endptr;\u000a    *endptr = pcVar5 + lVar4;\u000a    sVar3 = simple_strtod_int(pcVar5 + lVar4,&local_50,(longdouble *)local_48,&local_52);\u000a    if (sVar3 < SSE_OVERFLOW) {\u000a      if (sVar3 == SSE_OK_PRECISION_LOSS) {\u000a        sVar1 = sVar3;\u000a      }\u000a      sVar3 = SSE_INVALID_NUMBER;\u000a      if (local_52 == false) {\u000a        pcVar5 = local_50 + -(long)*endptr;\u000a        local_34 = local_48[0];\u000a        powerld();\u000a        if (value != (longdouble *)0x0) {\u000a          fVar6 = local_34 / in_ST0;\u000a          if (local_51 != false) {\u000a            fVar6 = -(local_34 / in_ST0);\u000a          }\u000a          *(float10 *)value = *(float10 *)value + fVar6;\u000a        }\u000a        if (precision != (size_t *)0x0) {\u000a          *(char **)precision = pcVar5;\u000a        }\u000a        *endptr = local_50;\u000a        sVar3 = sVar1;\u000a      }\u000a    }\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p1200
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RCX\nMOV R15,RDX\nMOV RBX,RSI\nTEST R14,R14\nJZ 0x00403a71\nMOV qword ptr [R14],0x0\nLEA RCX,[RSP + 0x17]\nMOV RSI,RBX\nMOV RDX,R15\nCALL 0x00403bf0\nMOV EBP,EAX\nCMP EBP,0x1\nJA 0x00403adf\nMOV RDI,qword ptr [RBX]\nMOV RSI,qword ptr [0x0060e330]\nMOVSXD RDX,dword ptr [0x0060e338]\nCALL 0x00401620\nTEST EAX,EAX\nJNZ 0x00403adf\nFLDZ\nFSTP tword ptr [RSP + 0x20]\nMOVSXD RDI,dword ptr [0x0060e338]\nADD RDI,qword ptr [RBX]\nMOV qword ptr [RBX],RDI\nLEA RSI,[RSP + 0x18]\nLEA RDX,[RSP + 0x20]\nLEA RCX,[RSP + 0x16]\nCALL 0x00403bf0\nCMP EAX,0x1\nJA 0x00403add\nCMOVZ EBP,EAX\nMOV EAX,0x3\nCMP byte ptr [RSP + 0x16],0x0\nJZ 0x00403aee\nMOV EBP,EAX\nMOV EAX,EBP\nADD RSP,0x40\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R12,qword ptr [RSP + 0x18]\nSUB R12,qword ptr [RBX]\nFLD tword ptr [RSP + 0x20]\nFSTP tword ptr [RSP + 0x34]\nFLD dword ptr [0x00408970]\nFSTP tword ptr [RSP]\nMOV EDI,R12D\nCALL 0x00403bc0\nFLD tword ptr [RSP + 0x34]\nFDIVRP\nFLD ST0\nFSTP tword ptr [RSP + 0x20]\nTEST R15,R15\nJZ 0x00403b39\nCMP byte ptr [RSP + 0x17],0x0\nFLD tword ptr [R15]\nFLD ST1\nFCHS\nFXCH ST2\nFCMOVNE ST0,ST2\nFSTP ST2\nFADDP\nFSTP tword ptr [R15]\nFLDZ\nFSTP ST0\nTEST R14,R14\nJZ 0x00403b43\nMOV qword ptr [R14],R12\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX],RAX\nJMP 0x00403adf\n'
p1201
S'55\n41 57\n41 56\n41 54\n53\n48 83 ec 40\n49 89 ce\n49 89 d7\n48 89 f3\n4d 85 f6\n74 07\n49 c7 06 00 00 00 00\n48 8d 4c 24 17\n48 89 de\n4c 89 fa\ne8 6f 01 00 00\n89 c5\n83 fd 01\n77 57\n48 8b 3b\n48 8b 35 9e a8 20 00\n48 63 15 9f a8 20 00\ne8 82 db ff ff\n85 c0\n75 3d\nd9 ee\ndb 7c 24 20\n48 63 3d 89 a8 20 00\n48 03 3b\n48 89 3b\n48 8d 74 24 18\n48 8d 54 24 20\n48 8d 4c 24 16\ne8 27 01 00 00\n83 f8 01\n77 0f\n0f 44 e8\nb8 03 00 00 00\n80 7c 24 16 00\n74 11\n89 c5\n89 e8\n48 83 c4 40\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n4c 8b 64 24 18\n4c 2b 23\ndb 6c 24 20\ndb 7c 24 34\nd9 05 6c 4e 00 00\ndb 3c 24\n44 89 e7\ne8 b1 00 00 00\ndb 6c 24 34\nde f1\nd9 c0\ndb 7c 24 20\n4d 85 ff\n74 19\n80 7c 24 17 00\n41 db 2f\nd9 c1\nd9 e0\nd9 ca\ndb ca\ndd da\nde c1\n41 db 3f\nd9 ee\ndd d8\n4d 85 f6\n74 03\n4d 89 26\n48 8b 44 24 18\n48 89 03\neb 92\n'
p1202
S'.text:0000000000403a50\n.text:0000000000403a51\n.text:0000000000403a53\n.text:0000000000403a55\n.text:0000000000403a57\n.text:0000000000403a58\n.text:0000000000403a5c\n.text:0000000000403a5f\n.text:0000000000403a62\n.text:0000000000403a65\n.text:0000000000403a68\n.text:0000000000403a6a\n.text:0000000000403a71\n.text:0000000000403a76\n.text:0000000000403a79\n.text:0000000000403a7c\n.text:0000000000403a81\n.text:0000000000403a83\n.text:0000000000403a86\n.text:0000000000403a88\n.text:0000000000403a8b\n.text:0000000000403a92\n.text:0000000000403a99\n.text:0000000000403a9e\n.text:0000000000403aa0\n.text:0000000000403aa2\n.text:0000000000403aa4\n.text:0000000000403aa8\n.text:0000000000403aaf\n.text:0000000000403ab2\n.text:0000000000403ab5\n.text:0000000000403aba\n.text:0000000000403abf\n.text:0000000000403ac4\n.text:0000000000403ac9\n.text:0000000000403acc\n.text:0000000000403ace\n.text:0000000000403ad1\n.text:0000000000403ad6\n.text:0000000000403adb\n.text:0000000000403add\n.text:0000000000403adf\n.text:0000000000403ae1\n.text:0000000000403ae5\n.text:0000000000403ae6\n.text:0000000000403ae8\n.text:0000000000403aea\n.text:0000000000403aec\n.text:0000000000403aed\n.text:0000000000403aee\n.text:0000000000403af3\n.text:0000000000403af6\n.text:0000000000403afa\n.text:0000000000403afe\n.text:0000000000403b04\n.text:0000000000403b07\n.text:0000000000403b0a\n.text:0000000000403b0f\n.text:0000000000403b13\n.text:0000000000403b15\n.text:0000000000403b17\n.text:0000000000403b1b\n.text:0000000000403b1e\n.text:0000000000403b20\n.text:0000000000403b25\n.text:0000000000403b28\n.text:0000000000403b2a\n.text:0000000000403b2c\n.text:0000000000403b2e\n.text:0000000000403b30\n.text:0000000000403b32\n.text:0000000000403b34\n.text:0000000000403b37\n.text:0000000000403b39\n.text:0000000000403b3b\n.text:0000000000403b3e\n.text:0000000000403b40\n.text:0000000000403b43\n.text:0000000000403b48\n.text:0000000000403b4b\n'
p1203
tp1204
sS'x2nrealloc'
p1205
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1206
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1207
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x0040728c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x004072b9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004072aa\nTEST RCX,RCX\nJNZ 0x004072aa\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00407230\nPUSH RAX\nCALL 0x00407380\n'
p1208
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1209
S'.text:0000000000407260\n.text:0000000000407263\n.text:0000000000407266\n.text:0000000000407269\n.text:000000000040726b\n.text:0000000000407275\n.text:0000000000407277\n.text:000000000040727a\n.text:000000000040727d\n.text:000000000040727f\n.text:0000000000407282\n.text:0000000000407285\n.text:000000000040728a\n.text:000000000040728c\n.text:000000000040728f\n.text:0000000000407291\n.text:0000000000407296\n.text:0000000000407298\n.text:000000000040729b\n.text:000000000040729d\n.text:00000000004072a4\n.text:00000000004072a7\n.text:00000000004072aa\n.text:00000000004072ad\n.text:00000000004072b1\n.text:00000000004072b4\n.text:00000000004072b9\n.text:00000000004072ba\n'
p1210
tp1211
sS'quotearg_n_options'
p1212
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1213
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1214
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401610\nTEST R12D,R12D\nJS 0x00406581\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060e280]\nCMP dword ptr [0x0060e288],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040649b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60e290\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00407230\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060e280],R15\nJNZ 0x00406462\nMOVUPS XMM0,xmmword ptr [0x0060e290]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060e288]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401760\nMOV dword ptr [0x0060e288],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x004055f0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x004064fd\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040656b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60e420\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00406528\nCALL 0x004015e0\nMOV RDI,R15\nCALL 0x004072c0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x004055f0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401600\n'
p1215
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 21 b2 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 76 7e 20 00\n44 39 25 77 7e 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 90 e2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 e8 0d 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 2b 7e 20 00\n75 0b\n0f 10 05 32 7e 20 00\n41 0f 11 07\n8b 05 20 7e 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 dd b2 ff ff\n89 1d ff 7d 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 20 e4 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 b8 b0 ff ff\n4c 89 ff\ne8 90 0d 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 7a b0 ff ff\n'
p1216
S'.text:00000000004063d0\n.text:00000000004063d1\n.text:00000000004063d3\n.text:00000000004063d5\n.text:00000000004063d7\n.text:00000000004063d9\n.text:00000000004063da\n.text:00000000004063de\n.text:00000000004063e1\n.text:00000000004063e4\n.text:00000000004063e7\n.text:00000000004063ea\n.text:00000000004063ef\n.text:00000000004063f2\n.text:00000000004063f8\n.text:00000000004063fd\n.text:00000000004063ff\n.text:0000000000406403\n.text:000000000040640a\n.text:0000000000406411\n.text:0000000000406416\n.text:000000000040641b\n.text:0000000000406420\n.text:0000000000406422\n.text:0000000000406427\n.text:000000000040642a\n.text:000000000040642d\n.text:0000000000406433\n.text:0000000000406435\n.text:0000000000406438\n.text:000000000040643c\n.text:000000000040643f\n.text:0000000000406443\n.text:0000000000406448\n.text:000000000040644b\n.text:000000000040644e\n.text:0000000000406455\n.text:0000000000406457\n.text:000000000040645e\n.text:0000000000406462\n.text:0000000000406468\n.text:000000000040646b\n.text:000000000040646f\n.text:0000000000406472\n.text:0000000000406475\n.text:0000000000406479\n.text:000000000040647b\n.text:000000000040647e\n.text:0000000000406483\n.text:0000000000406489\n.text:000000000040648c\n.text:0000000000406491\n.text:0000000000406496\n.text:000000000040649b\n.text:000000000040649e\n.text:00000000004064a2\n.text:00000000004064a6\n.text:00000000004064ab\n.text:00000000004064af\n.text:00000000004064b3\n.text:00000000004064b7\n.text:00000000004064bb\n.text:00000000004064bf\n.text:00000000004064c4\n.text:00000000004064c7\n.text:00000000004064ca\n.text:00000000004064cd\n.text:00000000004064d2\n.text:00000000004064d5\n.text:00000000004064d8\n.text:00000000004064db\n.text:00000000004064dc\n.text:00000000004064e1\n.text:00000000004064e5\n.text:00000000004064e8\n.text:00000000004064eb\n.text:00000000004064ed\n.text:00000000004064f2\n.text:00000000004064f6\n.text:00000000004064fb\n.text:00000000004064fd\n.text:0000000000406501\n.text:0000000000406506\n.text:0000000000406509\n.text:000000000040650c\n.text:0000000000406511\n.text:0000000000406516\n.text:0000000000406519\n.text:000000000040651e\n.text:0000000000406521\n.text:0000000000406523\n.text:0000000000406528\n.text:000000000040652b\n.text:0000000000406530\n.text:0000000000406533\n.text:0000000000406536\n.text:000000000040653b\n.text:000000000040653e\n.text:0000000000406542\n.text:0000000000406545\n.text:0000000000406548\n.text:000000000040654d\n.text:0000000000406552\n.text:0000000000406557\n.text:000000000040655a\n.text:000000000040655d\n.text:000000000040655e\n.text:0000000000406563\n.text:0000000000406567\n.text:000000000040656b\n.text:000000000040656f\n.text:0000000000406572\n.text:0000000000406576\n.text:0000000000406577\n.text:0000000000406579\n.text:000000000040657b\n.text:000000000040657d\n.text:000000000040657f\n.text:0000000000406580\n.text:0000000000406581\n'
p1217
tp1218
sS'strcmp'
p1219
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1220
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060e130)();\u000a  return iVar1;\u000a}\u000a\u000a
p1221
S'JMP qword ptr [0x0060e130]\n'
p1222
S'ff 25 3a c9 20 00\n'
p1223
S'.plt:00000000004017f0\n'
p1224
tp1225
sS'c_isalpha'
p1226
(S'\n__stdcall c_isalpha()\n'
p1227
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1228
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00404d6b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1229
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1230
S'.text:0000000000404d50\n.text:0000000000404d53\n.text:0000000000404d56\n.text:0000000000404d58\n.text:0000000000404d62\n.text:0000000000404d64\n.text:0000000000404d67\n.text:0000000000404d6a\n.text:0000000000404d6b\n.text:0000000000404d6d\n'
p1231
tp1232
sS'set_custom_quoting'
p1233
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1234
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1235
S'TEST RDI,RDI\nMOV EAX,0x60e3e0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00405565\nTEST RDX,RDX\nJZ 0x00405565\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401600\n'
p1236
S'48 85 ff\nb8 e0 e3 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 95 c0 ff ff\n'
p1237
S'.text:0000000000405540\n.text:0000000000405543\n.text:0000000000405548\n.text:000000000040554c\n.text:0000000000405552\n.text:0000000000405555\n.text:0000000000405557\n.text:000000000040555a\n.text:000000000040555c\n.text:0000000000405560\n.text:0000000000405564\n.text:0000000000405565\n.text:0000000000405566\n'
p1238
tp1239
sS'quotearg_custom_mem'
p1240
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1241
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1242
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x004067e0\n'
p1243
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1244
S'.text:0000000000406870\n.text:0000000000406873\n.text:0000000000406876\n.text:0000000000406879\n.text:000000000040687c\n.text:000000000040687e\n.text:0000000000406881\n'
p1245
tp1246
sS'FUN_004015b0'
p1247
(S'\n__stdcall FUN_004015b0()\n'
p1248
V\u000avoid FUN_004015b0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060e010)();\u000a  return;\u000a}\u000a\u000a
p1249
S'PUSH qword ptr [0x0060e008]\nJMP qword ptr [0x0060e010]\n'
p1250
S'ff 35 52 ca 20 00\nff 25 54 ca 20 00\n'
p1251
S'.plt:00000000004015b0\n.plt:00000000004015b6\n'
p1252
tp1253
sS'rpl_calloc'
p1254
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1255
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060e128)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1256
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x004079db\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x004079e0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x004079e0\nPUSH RAX\nCALL 0x00401610\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004017e0\n'
p1257
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 3f 9c ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 f5 9d ff ff\n'
p1258
S'.text:00000000004079a0\n.text:00000000004079a3\n.text:00000000004079a8\n.text:00000000004079aa\n.text:00000000004079ad\n.text:00000000004079b2\n.text:00000000004079b4\n.text:00000000004079b7\n.text:00000000004079bb\n.text:00000000004079bd\n.text:00000000004079c0\n.text:00000000004079c3\n.text:00000000004079c6\n.text:00000000004079c9\n.text:00000000004079cb\n.text:00000000004079cc\n.text:00000000004079d1\n.text:00000000004079d7\n.text:00000000004079d9\n.text:00000000004079da\n.text:00000000004079db\n.text:00000000004079e0\n.text:00000000004079e3\n.text:00000000004079e6\n'
p1259
tp1260
sS'memset'
p1261
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1262
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060e0e8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1263
S'JMP qword ptr [0x0060e0e8]\n'
p1264
S'ff 25 82 c9 20 00\n'
p1265
S'.plt:0000000000401760\n'
p1266
tp1267
sS'getc_unlocked'
p1268
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1269
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060e068)();\u000a  return iVar1;\u000a}\u000a\u000a
p1270
S'JMP qword ptr [0x0060e068]\n'
p1271
S'ff 25 02 ca 20 00\n'
p1272
S'.plt:0000000000401660\n'
p1273
tp1274
sS'memmove'
p1275
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p1276
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_0060e1c0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1277
S'JMP qword ptr [0x0060e1c0]\n'
p1278
S'ff 25 aa c8 20 00\n'
p1279
S'.plt:0000000000401910\n'
p1280
tp1281
sS'c_isascii'
p1282
(S'\n__stdcall c_isascii()\n'
p1283
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1284
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1285
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1286
S'.text:0000000000404d70\n.text:0000000000404d76\n.text:0000000000404d79\n'
p1287
tp1288
sS'__xargmatch_internal'
p1289
(S'\n__stdcall __xargmatch_internal(char * context, char * arg, char * * arglist, char * vallist, size_t valsize, argmatch_exit_fn * exit_fn)\n'
p1290
V\u000aptrdiff_t __xargmatch_internal\u000a                    (char *context,char *arg,char **arglist,char *vallist,size_t valsize,\u000a                    void (*exit_fn)())\u000a\u000a{\u000a  ptrdiff_t problem;\u000a  \u000a  problem = argmatch(arg,arglist,vallist,valsize);\u000a  if (problem < 0) {\u000a    argmatch_invalid(context,arg,problem);\u000a    argmatch_valid(arglist,vallist,valsize);\u000a    (*exit_fn)();\u000a    problem = -1;\u000a  }\u000a  return problem;\u000a}\u000a\u000a
p1291
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,R9\nMOV R15,R8\nMOV R12,RCX\nMOV R13,RDX\nMOV RBX,RSI\nMOV RBP,RDI\nMOV RDI,RBX\nMOV RSI,R13\nMOV RDX,R12\nMOV RCX,R15\nCALL 0x004049e0\nTEST RAX,RAX\nJNS 0x00404c99\nMOV RDI,RBP\nMOV RSI,RBX\nMOV RDX,RAX\nCALL 0x00404ae0\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00404b50\nCALL R14\nMOV RAX,-0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1292
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 ce\n4d 89 c7\n49 89 cc\n49 89 d5\n48 89 f3\n48 89 fd\n48 89 df\n4c 89 ee\n4c 89 e2\n4c 89 f9\ne8 72 fd ff ff\n48 85 c0\n79 26\n48 89 ef\n48 89 de\n48 89 c2\ne8 5f fe ff ff\n4c 89 ef\n4c 89 e6\n4c 89 fa\ne8 c1 fe ff ff\n41 ff d6\n48 c7 c0 ff ff ff ff\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1293
S'.text:0000000000404c40\n.text:0000000000404c41\n.text:0000000000404c43\n.text:0000000000404c45\n.text:0000000000404c47\n.text:0000000000404c49\n.text:0000000000404c4a\n.text:0000000000404c4b\n.text:0000000000404c4e\n.text:0000000000404c51\n.text:0000000000404c54\n.text:0000000000404c57\n.text:0000000000404c5a\n.text:0000000000404c5d\n.text:0000000000404c60\n.text:0000000000404c63\n.text:0000000000404c66\n.text:0000000000404c69\n.text:0000000000404c6e\n.text:0000000000404c71\n.text:0000000000404c73\n.text:0000000000404c76\n.text:0000000000404c79\n.text:0000000000404c7c\n.text:0000000000404c81\n.text:0000000000404c84\n.text:0000000000404c87\n.text:0000000000404c8a\n.text:0000000000404c8f\n.text:0000000000404c92\n.text:0000000000404c99\n.text:0000000000404c9d\n.text:0000000000404c9e\n.text:0000000000404ca0\n.text:0000000000404ca2\n.text:0000000000404ca4\n.text:0000000000404ca6\n.text:0000000000404ca7\n'
p1294
tp1295
sS'simple_round_ceiling'
p1296
(S'\n__stdcall simple_round_ceiling(longdouble val)\n'
p1297
V\u000aintmax_t simple_round_ceiling(longdouble val)\u000a\u000a{\u000a  float10 in_stack_00000008;\u000a  \u000a  return (ulong)((float10)(long)ROUND(in_stack_00000008) < in_stack_00000008) +\u000a         (long)ROUND(in_stack_00000008);\u000a}\u000a\u000a
p1298
S'FLD tword ptr [RSP + 0x8]\nFNSTCW word ptr [RSP + -0x12]\nMOVZX EAX,word ptr [RSP + -0x12]\nMOV word ptr [RSP + -0x12],0xc7f\nFLDCW word ptr [RSP + -0x12]\nMOV word ptr [RSP + -0x12],AX\nFLD ST0\nFISTP qword ptr [RSP + -0x10]\nFLDCW word ptr [RSP + -0x12]\nMOV RCX,qword ptr [RSP + -0x10]\nMOV qword ptr [RSP + -0x8],RCX\nFILD qword ptr [RSP + -0x8]\nXOR EAX,EAX\nFXCH\nFUCOMIP ST0,ST1\nFSTP ST0\nSETA AL\nADD RAX,RCX\nRET\n'
p1299
S'db 6c 24 08\nd9 7c 24 ee\n0f b7 44 24 ee\n66 c7 44 24 ee 7f 0c\nd9 6c 24 ee\n66 89 44 24 ee\nd9 c0\ndf 7c 24 f0\nd9 6c 24 ee\n48 8b 4c 24 f0\n48 89 4c 24 f8\ndf 6c 24 f8\n31 c0\nd9 c9\ndf e9\ndd d8\n0f 97 c0\n48 01 c8\nc3\n'
p1300
S'.text:00000000004042b0\n.text:00000000004042b4\n.text:00000000004042b8\n.text:00000000004042bd\n.text:00000000004042c4\n.text:00000000004042c8\n.text:00000000004042cd\n.text:00000000004042cf\n.text:00000000004042d3\n.text:00000000004042d7\n.text:00000000004042dc\n.text:00000000004042e1\n.text:00000000004042e5\n.text:00000000004042e7\n.text:00000000004042e9\n.text:00000000004042eb\n.text:00000000004042ed\n.text:00000000004042f0\n.text:00000000004042f3\n'
p1301
tp1302
sS'__ctype_b_loc'
p1303
(S'\n__stdcall __ctype_b_loc()\n'
p1304
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060e230)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1305
S'JMP qword ptr [0x0060e230]\n'
p1306
S'ff 25 3a c8 20 00\n'
p1307
S'.plt:00000000004019f0\n'
p1308
tp1309
sS'quotearg'
p1310
(S'\n__stdcall quotearg(char * arg)\n'
p1311
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1312
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004063c0\n'
p1313
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1314
S'.text:00000000004065a0\n.text:00000000004065a3\n.text:00000000004065a5\n.text:00000000004065a8\n'
p1315
tp1316
sS'_start'
p1317
(S'\n__stdcall _start()\n'
p1318
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060dff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1319
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x407f40\nMOV RCX,0x407ed0\nMOV RDI,0x4020a0\nCALL qword ptr [0x0060dff0]\nHLT\n'
p1320
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 40 7f 40 00\n48 c7 c1 d0 7e 40 00\n48 c7 c7 a0 20 40 00\nff 15 c6 c5 20 00\nf4\n'
p1321
S'.text:0000000000401a00\n.text:0000000000401a02\n.text:0000000000401a05\n.text:0000000000401a06\n.text:0000000000401a09\n.text:0000000000401a0d\n.text:0000000000401a0e\n.text:0000000000401a0f\n.text:0000000000401a16\n.text:0000000000401a1d\n.text:0000000000401a24\n.text:0000000000401a2a\n'
p1322
tp1323
sS'c_iscntrl'
p1324
(S'\n__stdcall c_iscntrl()\n'
p1325
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1326
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00404d98\nRET\nCMP EDI,0x7f\nJZ 0x00404d97\nXOR EAX,EAX\nRET\n'
p1327
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1328
S'.text:0000000000404d90\n.text:0000000000404d92\n.text:0000000000404d95\n.text:0000000000404d97\n.text:0000000000404d98\n.text:0000000000404d9b\n.text:0000000000404d9d\n.text:0000000000404d9f\n'
p1329
tp1330
sS'c_isblank'
p1331
(S'\n__stdcall c_isblank()\n'
p1332
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1333
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1334
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1335
S'.text:0000000000404d80\n.text:0000000000404d83\n.text:0000000000404d86\n.text:0000000000404d89\n.text:0000000000404d8c\n.text:0000000000404d8e\n'
p1336
tp1337
sS'atexit'
p1338
(S'\n__stdcall atexit(__func * __func)\n'
p1339
V\u000a/* WARNING: Removing unreachable block (ram,0x00407f70) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060e1e8)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1340
S'MOV RAX,0x60e240\nTEST RAX,RAX\nJZ 0x00407f70\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401960\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401960\n'
p1341
S'48 c7 c0 40 e2 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 fa 99 ff ff\n31 d2\n31 f6\ne9 e7 99 ff ff\n'
p1342
S'.text:0000000000407f50\n.text:0000000000407f57\n.text:0000000000407f5a\n.text:0000000000407f5c\n.text:0000000000407f5f\n.text:0000000000407f61\n.text:0000000000407f70\n.text:0000000000407f72\n.text:0000000000407f74\n'
p1343
tp1344
sS'fdopen'
p1345
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1346
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060e1a8)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1347
S'JMP qword ptr [0x0060e1a8]\n'
p1348
S'ff 25 c2 c8 20 00\n'
p1349
S'.plt:00000000004018e0\n'
p1350
tp1351
sS'error'
p1352
(S'\n__stdcall error()\n'
p1353
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060e1c8)();\u000a  return;\u000a}\u000a\u000a
p1354
S'JMP qword ptr [0x0060e1c8]\n'
p1355
S'ff 25 a2 c8 20 00\n'
p1356
S'.plt:0000000000401920\n'
p1357
tp1358
sS'strcaseeq6'
p1359
(S'\n__stdcall strcaseeq6()\n'
p1360
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1361
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404e20\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00406c62\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00406c69\nJMP 0x00406c7e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406c7e\nTEST BPL,BPL\nJZ 0x00406c79\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00406c90\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1362
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 d1 e1 ff ff\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1363
S'.text:0000000000406c40\n.text:0000000000406c41\n.text:0000000000406c42\n.text:0000000000406c43\n.text:0000000000406c45\n.text:0000000000406c48\n.text:0000000000406c4a\n.text:0000000000406c4f\n.text:0000000000406c53\n.text:0000000000406c55\n.text:0000000000406c57\n.text:0000000000406c5a\n.text:0000000000406c5c\n.text:0000000000406c5e\n.text:0000000000406c60\n.text:0000000000406c62\n.text:0000000000406c64\n.text:0000000000406c67\n.text:0000000000406c69\n.text:0000000000406c6c\n.text:0000000000406c6e\n.text:0000000000406c71\n.text:0000000000406c75\n.text:0000000000406c76\n.text:0000000000406c77\n.text:0000000000406c79\n.text:0000000000406c7e\n.text:0000000000406c82\n.text:0000000000406c83\n.text:0000000000406c84\n'
p1364
tp1365
sS'strcaseeq5'
p1366
(S'\n__stdcall strcaseeq5()\n'
p1367
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1368
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404e20\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00406c16\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00406c1d\nJMP 0x00406c34\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406c34\nTEST BPL,BPL\nJZ 0x00406c2f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00406c40\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1369
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 1d e2 ff ff\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1370
S'.text:0000000000406bf0\n.text:0000000000406bf1\n.text:0000000000406bf3\n.text:0000000000406bf4\n.text:0000000000406bf7\n.text:0000000000406bf9\n.text:0000000000406bfc\n.text:0000000000406bfe\n.text:0000000000406c03\n.text:0000000000406c07\n.text:0000000000406c09\n.text:0000000000406c0b\n.text:0000000000406c0e\n.text:0000000000406c10\n.text:0000000000406c12\n.text:0000000000406c14\n.text:0000000000406c16\n.text:0000000000406c18\n.text:0000000000406c1b\n.text:0000000000406c1d\n.text:0000000000406c20\n.text:0000000000406c22\n.text:0000000000406c26\n.text:0000000000406c29\n.text:0000000000406c2a\n.text:0000000000406c2c\n.text:0000000000406c2d\n.text:0000000000406c2f\n.text:0000000000406c34\n.text:0000000000406c35\n.text:0000000000406c37\n.text:0000000000406c38\n'
p1371
tp1372
sS'strcaseeq7'
p1373
(S'\n__stdcall strcaseeq7()\n'
p1374
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1375
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00404e20\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00406cb2\nTEST ECX,0xffffffdf\nJNZ 0x00406cb6\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x00406cba\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1376
S'53\n48 89 fb\n31 ff\ne8 85 e1 ff ff\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1377
S'.text:0000000000406c90\n.text:0000000000406c91\n.text:0000000000406c94\n.text:0000000000406c96\n.text:0000000000406c9b\n.text:0000000000406c9f\n.text:0000000000406ca1\n.text:0000000000406ca3\n.text:0000000000406ca9\n.text:0000000000406cab\n.text:0000000000406cb0\n.text:0000000000406cb1\n.text:0000000000406cb2\n.text:0000000000406cb4\n.text:0000000000406cb6\n.text:0000000000406cb8\n.text:0000000000406cb9\n.text:0000000000406cba\n.text:0000000000406cbf\n.text:0000000000406cc0\n'
p1378
tp1379
sS'wcstombs'
p1380
(S'\n__stdcall wcstombs(char * __s, wchar_t * __pwcs, size_t __n)\n'
p1381
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t wcstombs(char *__s,wchar_t *__pwcs,size_t __n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_wcstombs_0060e1f0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1382
S'JMP qword ptr [0x0060e1f0]\n'
p1383
S'ff 25 7a c8 20 00\n'
p1384
S'.plt:0000000000401970\n'
p1385
tp1386
sS'mbstowcs'
p1387
(S'\n__stdcall mbstowcs(wchar_t * __pwcs, char * __s, size_t __n)\n'
p1388
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbstowcs(wchar_t *__pwcs,char *__s,size_t __n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbstowcs_0060e080)();\u000a  return sVar1;\u000a}\u000a\u000a
p1389
S'JMP qword ptr [0x0060e080]\n'
p1390
S'ff 25 ea c9 20 00\n'
p1391
S'.plt:0000000000401690\n'
p1392
tp1393
sS'emit_mandatory_arg_note'
p1394
(S'\n__stdcall emit_mandatory_arg_note()\n'
p1395
V\u000avoid emit_mandatory_arg_note(void)\u000a\u000a{\u000a  char *__s;\u000a  \u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnMandatory arguments to long options are mandatory for short options too.\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p1396
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x409c13\nMOV EDX,0x5\nCALL 0x004016d0\nMOV RSI,qword ptr [0x0060e2e8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004017c0\n'
p1397
S'50\n31 ff\nbe 13 9c 40 00\nba 05 00 00 00\ne8 7e f7 ff ff\n48 8b 35 8f c3 20 00\n48 89 c7\n58\ne9 5e f8 ff ff\n'
p1398
S'.text:0000000000401f40\n.text:0000000000401f41\n.text:0000000000401f43\n.text:0000000000401f48\n.text:0000000000401f4d\n.text:0000000000401f52\n.text:0000000000401f59\n.text:0000000000401f5c\n.text:0000000000401f5d\n'
p1399
tp1400
sS'strcaseeq0'
p1401
(S'\n__stdcall strcaseeq0()\n'
p1402
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1403
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404e20\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x004069c5\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004069cc\nJMP 0x00406a00\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406a00\nTEST BPL,BPL\nJZ 0x004069fb\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00406a10\nJMP 0x00406a00\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1404
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 6d e4 ff ff\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1405
S'.text:0000000000406990\n.text:0000000000406991\n.text:0000000000406993\n.text:0000000000406995\n.text:0000000000406997\n.text:0000000000406999\n.text:000000000040699a\n.text:000000000040699b\n.text:000000000040699e\n.text:00000000004069a1\n.text:00000000004069a4\n.text:00000000004069a7\n.text:00000000004069a9\n.text:00000000004069ac\n.text:00000000004069ae\n.text:00000000004069b3\n.text:00000000004069b6\n.text:00000000004069b8\n.text:00000000004069ba\n.text:00000000004069bd\n.text:00000000004069bf\n.text:00000000004069c1\n.text:00000000004069c3\n.text:00000000004069c5\n.text:00000000004069c7\n.text:00000000004069ca\n.text:00000000004069cc\n.text:00000000004069cf\n.text:00000000004069d1\n.text:00000000004069d5\n.text:00000000004069da\n.text:00000000004069dd\n.text:00000000004069e1\n.text:00000000004069e5\n.text:00000000004069e9\n.text:00000000004069ed\n.text:00000000004069f1\n.text:00000000004069f4\n.text:00000000004069f9\n.text:00000000004069fb\n.text:0000000000406a00\n.text:0000000000406a04\n.text:0000000000406a05\n.text:0000000000406a07\n.text:0000000000406a09\n.text:0000000000406a0b\n.text:0000000000406a0d\n.text:0000000000406a0e\n'
p1406
tp1407
sS'strcaseeq2'
p1408
(S'\n__stdcall strcaseeq2()\n'
p1409
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1410
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404e20\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00406ad6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00406add\nJMP 0x00406b0a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406b0a\nTEST BPL,BPL\nJZ 0x00406b05\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406b20\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1411
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 5d e3 ff ff\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1412
S'.text:0000000000406aa0\n.text:0000000000406aa1\n.text:0000000000406aa3\n.text:0000000000406aa5\n.text:0000000000406aa7\n.text:0000000000406aa9\n.text:0000000000406aaa\n.text:0000000000406aab\n.text:0000000000406aae\n.text:0000000000406ab1\n.text:0000000000406ab4\n.text:0000000000406ab7\n.text:0000000000406ab9\n.text:0000000000406abc\n.text:0000000000406abe\n.text:0000000000406ac3\n.text:0000000000406ac7\n.text:0000000000406ac9\n.text:0000000000406acb\n.text:0000000000406ace\n.text:0000000000406ad0\n.text:0000000000406ad2\n.text:0000000000406ad4\n.text:0000000000406ad6\n.text:0000000000406ad8\n.text:0000000000406adb\n.text:0000000000406add\n.text:0000000000406ae0\n.text:0000000000406ae2\n.text:0000000000406ae6\n.text:0000000000406aea\n.text:0000000000406aee\n.text:0000000000406af2\n.text:0000000000406af5\n.text:0000000000406af9\n.text:0000000000406afa\n.text:0000000000406afc\n.text:0000000000406afe\n.text:0000000000406b00\n.text:0000000000406b02\n.text:0000000000406b03\n.text:0000000000406b05\n.text:0000000000406b0a\n.text:0000000000406b0e\n.text:0000000000406b0f\n.text:0000000000406b11\n.text:0000000000406b13\n.text:0000000000406b15\n.text:0000000000406b17\n.text:0000000000406b18\n'
p1413
tp1414
sS'powerld'
p1415
(S'\n__stdcall powerld()\n'
p1416
V\u000alongdouble powerld(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  longdouble in_XMM0;\u000a  \u000a  if (in_EDI != 0) {\u000a    if (in_EDI == 1) {\u000a      return in_XMM0;\u000a    }\u000a    iVar1 = 1 - in_EDI;\u000a    do {\u000a      iVar1 = iVar1 + 1;\u000a    } while (iVar1 != 0);\u000a  }\u000a  return in_XMM0;\u000a}\u000a\u000a
p1417
S'FLD tword ptr [RSP + 0x8]\nFLD1\nTEST EDI,EDI\nJZ 0x00403be6\nFSTP ST0\nCMP EDI,0x1\nJZ 0x00403be9\nMOV EAX,0x1\nSUB EAX,EDI\nFLD ST0\nNOP word ptr [RAX + RAX*0x1]\nFMUL ST1\nINC EAX\nJNZ 0x00403be0\nFSTP ST1\nRET\nFLDZ\nFXCH\nFSTP ST1\nRET\n'
p1418
S'db 6c 24 08\nd9 e8\n85 ff\n74 1c\ndd d8\n83 ff 01\n74 18\nb8 01 00 00 00\n29 f8\nd9 c0\n66 0f 1f 44 00 00\nd8 c9\nff c0\n75 fa\ndd d9\nc3\nd9 ee\nd9 c9\ndd d9\nc3\n'
p1419
S'.text:0000000000403bc0\n.text:0000000000403bc4\n.text:0000000000403bc6\n.text:0000000000403bc8\n.text:0000000000403bca\n.text:0000000000403bcc\n.text:0000000000403bcf\n.text:0000000000403bd1\n.text:0000000000403bd6\n.text:0000000000403bd8\n.text:0000000000403bda\n.text:0000000000403be0\n.text:0000000000403be2\n.text:0000000000403be4\n.text:0000000000403be6\n.text:0000000000403be8\n.text:0000000000403be9\n.text:0000000000403beb\n.text:0000000000403bed\n.text:0000000000403bef\n'
p1420
tp1421
sS'strcaseeq1'
p1422
(S'\n__stdcall strcaseeq1()\n'
p1423
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1424
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00404e20\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x00406a4d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00406a54\nJMP 0x00406a87\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406a87\nTEST BPL,BPL\nJZ 0x00406a82\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406aa0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1425
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 e6 e3 ff ff\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1426
S'.text:0000000000406a10\n.text:0000000000406a11\n.text:0000000000406a13\n.text:0000000000406a15\n.text:0000000000406a17\n.text:0000000000406a19\n.text:0000000000406a1a\n.text:0000000000406a1b\n.text:0000000000406a20\n.text:0000000000406a23\n.text:0000000000406a26\n.text:0000000000406a29\n.text:0000000000406a2b\n.text:0000000000406a2e\n.text:0000000000406a33\n.text:0000000000406a35\n.text:0000000000406a3a\n.text:0000000000406a3e\n.text:0000000000406a40\n.text:0000000000406a42\n.text:0000000000406a45\n.text:0000000000406a47\n.text:0000000000406a49\n.text:0000000000406a4b\n.text:0000000000406a4d\n.text:0000000000406a4f\n.text:0000000000406a52\n.text:0000000000406a54\n.text:0000000000406a57\n.text:0000000000406a59\n.text:0000000000406a5d\n.text:0000000000406a61\n.text:0000000000406a65\n.text:0000000000406a6b\n.text:0000000000406a6f\n.text:0000000000406a72\n.text:0000000000406a76\n.text:0000000000406a77\n.text:0000000000406a79\n.text:0000000000406a7b\n.text:0000000000406a7d\n.text:0000000000406a7f\n.text:0000000000406a80\n.text:0000000000406a82\n.text:0000000000406a87\n.text:0000000000406a8b\n.text:0000000000406a8c\n.text:0000000000406a8e\n.text:0000000000406a90\n.text:0000000000406a92\n.text:0000000000406a94\n.text:0000000000406a95\n'
p1427
tp1428
sS'strcaseeq4'
p1429
(S'\n__stdcall strcaseeq4()\n'
p1430
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1431
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404e20\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00406bbc\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00406bc3\nJMP 0x00406be4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406be4\nTEST BPL,BPL\nJZ 0x00406bdf\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406bf0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1432
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 77 e2 ff ff\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1433
S'.text:0000000000406b90\n.text:0000000000406b91\n.text:0000000000406b93\n.text:0000000000406b95\n.text:0000000000406b96\n.text:0000000000406b97\n.text:0000000000406b9a\n.text:0000000000406b9d\n.text:0000000000406b9f\n.text:0000000000406ba2\n.text:0000000000406ba4\n.text:0000000000406ba9\n.text:0000000000406bad\n.text:0000000000406baf\n.text:0000000000406bb1\n.text:0000000000406bb4\n.text:0000000000406bb6\n.text:0000000000406bb8\n.text:0000000000406bba\n.text:0000000000406bbc\n.text:0000000000406bbe\n.text:0000000000406bc1\n.text:0000000000406bc3\n.text:0000000000406bc6\n.text:0000000000406bc8\n.text:0000000000406bcc\n.text:0000000000406bd0\n.text:0000000000406bd3\n.text:0000000000406bd7\n.text:0000000000406bd8\n.text:0000000000406bda\n.text:0000000000406bdc\n.text:0000000000406bdd\n.text:0000000000406bdf\n.text:0000000000406be4\n.text:0000000000406be8\n.text:0000000000406be9\n.text:0000000000406beb\n.text:0000000000406bed\n.text:0000000000406bee\n'
p1434
tp1435
sS'include_field'
p1436
(S'\n__stdcall include_field(size_t field)\n'
p1437
V\u000a_Bool include_field(size_t field)\u000a\u000a{\u000a  ulong uVar1;\u000a  field_range_pair *pfVar2;\u000a  \u000a  if (frp == (field_range_pair *)0x0) {\u000a    return (_Bool)(field == 1);\u000a  }\u000a  uVar1 = frp->lo;\u000a  pfVar2 = frp;\u000a  while( true ) {\u000a    if (uVar1 == 0xffffffffffffffff) {\u000a      return false;\u000a    }\u000a    if ((uVar1 <= field) && (field <= pfVar2->hi)) break;\u000a    uVar1 = pfVar2[1].lo;\u000a    pfVar2 = pfVar2 + 1;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1438
S'MOV RAX,qword ptr [0x0060e528]\nTEST RAX,RAX\nJZ 0x004030bb\nMOV RCX,qword ptr [RAX]\nCMP RCX,-0x1\nJZ 0x004030b8\nADD RAX,0x10\nNOP dword ptr [RAX]\nCMP RCX,RDI\nJA 0x004030ab\nCMP qword ptr [RAX + -0x8],RDI\nJNC 0x004030c3\nMOV RCX,qword ptr [RAX]\nADD RAX,0x10\nCMP RCX,-0x1\nJNZ 0x004030a0\nXOR EAX,EAX\nRET\nCMP RDI,0x1\nSETZ AL\nRET\nMOV AL,0x1\nRET\n'
p1439
S'48 8b 05 a1 b4 20 00\n48 85 c0\n74 2f\n48 8b 08\n48 83 f9 ff\n74 23\n48 83 c0 10\n0f 1f 80 00 00 00 00\n48 39 f9\n77 06\n48 39 78 f8\n73 18\n48 8b 08\n48 83 c0 10\n48 83 f9 ff\n75 e8\n31 c0\nc3\n48 83 ff 01\n0f 94 c0\nc3\nb0 01\nc3\n'
p1440
S'.text:0000000000403080\n.text:0000000000403087\n.text:000000000040308a\n.text:000000000040308c\n.text:000000000040308f\n.text:0000000000403093\n.text:0000000000403095\n.text:0000000000403099\n.text:00000000004030a0\n.text:00000000004030a3\n.text:00000000004030a5\n.text:00000000004030a9\n.text:00000000004030ab\n.text:00000000004030ae\n.text:00000000004030b2\n.text:00000000004030b6\n.text:00000000004030b8\n.text:00000000004030ba\n.text:00000000004030bb\n.text:00000000004030bf\n.text:00000000004030c2\n.text:00000000004030c3\n.text:00000000004030c5\n'
p1441
tp1442
sS'strcaseeq3'
p1443
(S'\n__stdcall strcaseeq3()\n'
p1444
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1445
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404e20\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00406b50\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00406b57\nJMP 0x00406b7a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00406b7a\nTEST BPL,BPL\nJZ 0x00406b75\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00406b90\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1446
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 e3 e2 ff ff\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1447
S'.text:0000000000406b20\n.text:0000000000406b21\n.text:0000000000406b23\n.text:0000000000406b25\n.text:0000000000406b27\n.text:0000000000406b28\n.text:0000000000406b2b\n.text:0000000000406b2e\n.text:0000000000406b31\n.text:0000000000406b33\n.text:0000000000406b36\n.text:0000000000406b38\n.text:0000000000406b3d\n.text:0000000000406b41\n.text:0000000000406b43\n.text:0000000000406b45\n.text:0000000000406b48\n.text:0000000000406b4a\n.text:0000000000406b4c\n.text:0000000000406b4e\n.text:0000000000406b50\n.text:0000000000406b52\n.text:0000000000406b55\n.text:0000000000406b57\n.text:0000000000406b5a\n.text:0000000000406b5c\n.text:0000000000406b60\n.text:0000000000406b64\n.text:0000000000406b68\n.text:0000000000406b6b\n.text:0000000000406b6c\n.text:0000000000406b6e\n.text:0000000000406b70\n.text:0000000000406b72\n.text:0000000000406b73\n.text:0000000000406b75\n.text:0000000000406b7a\n.text:0000000000406b7b\n.text:0000000000406b7d\n.text:0000000000406b7f\n.text:0000000000406b81\n.text:0000000000406b82\n'
p1448
tp1449
sS'register_tm_clones'
p1450
(S'\n__stdcall register_tm_clones()\n'
p1451
V\u000a/* WARNING: Removing unreachable block (ram,0x00401a93) */\u000a/* WARNING: Removing unreachable block (ram,0x00401a9d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1452
S'MOV ESI,0x60e2d8\nPUSH RBP\nSUB RSI,0x60e2d8\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401aa8\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401aa8\nPOP RBP\nMOV EDI,0x60e2d8\nJMP RAX\nPOP RBP\nRET\n'
p1453
S'be d8 e2 60 00\n55\n48 81 ee d8 e2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf d8 e2 60 00\nff e0\n5d\nc3\n'
p1454
S'.text:0000000000401a70\n.text:0000000000401a75\n.text:0000000000401a76\n.text:0000000000401a7d\n.text:0000000000401a81\n.text:0000000000401a84\n.text:0000000000401a87\n.text:0000000000401a8b\n.text:0000000000401a8e\n.text:0000000000401a91\n.text:0000000000401a93\n.text:0000000000401a98\n.text:0000000000401a9b\n.text:0000000000401a9d\n.text:0000000000401a9e\n.text:0000000000401aa3\n.text:0000000000401aa8\n.text:0000000000401aa9\n'
p1455
tp1456
sS'qsort'
p1457
(S'\n__stdcall qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)\n'
p1458
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\u000a\u000a{\u000a  (*(code *)PTR_qsort_0060e070)();\u000a  return;\u000a}\u000a\u000a
p1459
S'JMP qword ptr [0x0060e070]\n'
p1460
S'ff 25 fa c9 20 00\n'
p1461
S'.plt:0000000000401670\n'
p1462
tp1463
sS'c_islower'
p1464
(S'\n__stdcall c_islower()\n'
p1465
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1466
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1467
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1468
S'.text:0000000000404dc0\n.text:0000000000404dc3\n.text:0000000000404dc6\n.text:0000000000404dc9\n'
p1469
tp1470
sS'argmatch'
p1471
(S'\n__stdcall argmatch(char * arg, char * * arglist, char * vallist, size_t valsize)\n'
p1472
V\u000aptrdiff_t argmatch(char *arg,char **arglist,char *vallist,size_t valsize)\u000a\u000a{\u000a  bool bVar1;\u000a  long lVar2;\u000a  int iVar3;\u000a  size_t __n;\u000a  size_t sVar4;\u000a  long lVar5;\u000a  ptrdiff_t pVar6;\u000a  char *__s2;\u000a  char *__s1;\u000a  long local_50;\u000a  \u000a  __n = strlen(arg);\u000a  __s1 = *arglist;\u000a  if (__s1 == (char *)0x0) {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a  }\u000a  else {\u000a    local_50 = -1;\u000a    bVar1 = false;\u000a    lVar5 = 0;\u000a    __s2 = vallist;\u000a    do {\u000a      iVar3 = strncmp(__s1,arg,__n);\u000a      lVar2 = local_50;\u000a      if (iVar3 == 0) {\u000a        sVar4 = strlen(__s1);\u000a        if (sVar4 == __n) {\u000a          return lVar5;\u000a        }\u000a        lVar2 = lVar5;\u000a        if ((local_50 != -1) &&\u000a           ((vallist == (char *)0x0 ||\u000a            (iVar3 = memcmp(vallist + local_50 * valsize,__s2,valsize), lVar2 = local_50, iVar3 != 0\u000a            )))) {\u000a          bVar1 = true;\u000a          lVar2 = local_50;\u000a        }\u000a      }\u000a      local_50 = lVar2;\u000a      __s1 = arglist[lVar5 + 1];\u000a      lVar5 = lVar5 + 1;\u000a      __s2 = __s2 + valsize;\u000a    } while (__s1 != (char *)0x0);\u000a  }\u000a  pVar6 = -2;\u000a  if (!bVar1) {\u000a    pVar6 = local_50;\u000a  }\u000a  return pVar6;\u000a}\u000a\u000a
p1473
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV R13,RCX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R12,RDI\nCALL 0x004016f0\nMOV RBX,RAX\nMOV qword ptr [RSP + 0x20],RBP\nMOV R15,qword ptr [RBP]\nTEST R15,R15\nJZ 0x00404aa7\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nMOV qword ptr [RSP + 0x18],R14\nXOR EBP,EBP\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,RBX\nCALL 0x00401620\nTEST EAX,EAX\nJNZ 0x00404a90\nMOV RDI,R15\nCALL 0x004016f0\nCMP RAX,RBX\nJZ 0x00404ac9\nCMP qword ptr [RSP + 0x8],-0x1\nJZ 0x00404a85\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nJZ 0x00404a7c\nMOV RDI,qword ptr [RSP + 0x8]\nIMUL RDI,R13\nADD RDI,RAX\nMOV RSI,R14\nMOV RDX,R13\nCALL 0x004017b0\nTEST EAX,EAX\nJZ 0x00404a90\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00404a90\nMOV qword ptr [RSP + 0x8],RBP\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,qword ptr [RSP + 0x20]\nMOV R15,qword ptr [RAX + RBP*0x8 + 0x8]\nINC RBP\nADD R14,R13\nTEST R15,R15\nJNZ 0x00404a30\nJMP 0x00404ab7\nMOV qword ptr [RSP + 0x8],-0x1\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nTEST byte ptr [RSP + 0x10],0x1\nMOV RBP,-0x2\nCMOVZ RBP,qword ptr [RSP + 0x8]\nMOV RAX,RBP\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1474
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n49 89 cd\n49 89 d6\n48 89 f5\n49 89 fc\ne8 f1 cc ff ff\n48 89 c3\n48 89 6c 24 20\n4c 8b 7d 00\n4d 85 ff\n0f 84 93 00 00 00\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\n4c 89 74 24 18\n31 ed\n0f 1f 44 00 00\n4c 89 ff\n4c 89 e6\n48 89 da\ne8 e2 cb ff ff\n85 c0\n75 4e\n4c 89 ff\ne8 a6 cc ff ff\n48 39 d8\n74 7a\n48 83 7c 24 08 ff\n74 2e\n48 8b 44 24 18\n48 85 c0\n74 1b\n48 8b 7c 24 08\n49 0f af fd\n48 01 c7\n4c 89 f6\n4c 89 ea\ne8 38 cd ff ff\n85 c0\n74 14\nb0 01\n48 89 44 24 10\neb 0b\n48 89 6c 24 08\n66 0f 1f 44 00 00\n48 8b 44 24 20\n4c 8b 7c e8 08\n48 ff c5\n4d 01 ee\n4d 85 ff\n75 8b\neb 10\n48 c7 44 24 08 ff ff ff ff\n31 c0\n48 89 44 24 10\nf6 44 24 10 01\n48 c7 c5 fe ff ff ff\n48 0f 44 6c 24 08\n48 89 e8\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1475
S'.text:00000000004049e0\n.text:00000000004049e1\n.text:00000000004049e3\n.text:00000000004049e5\n.text:00000000004049e7\n.text:00000000004049e9\n.text:00000000004049ea\n.text:00000000004049ee\n.text:00000000004049f1\n.text:00000000004049f4\n.text:00000000004049f7\n.text:00000000004049fa\n.text:00000000004049ff\n.text:0000000000404a02\n.text:0000000000404a07\n.text:0000000000404a0b\n.text:0000000000404a0e\n.text:0000000000404a14\n.text:0000000000404a1d\n.text:0000000000404a1f\n.text:0000000000404a24\n.text:0000000000404a29\n.text:0000000000404a2b\n.text:0000000000404a30\n.text:0000000000404a33\n.text:0000000000404a36\n.text:0000000000404a39\n.text:0000000000404a3e\n.text:0000000000404a40\n.text:0000000000404a42\n.text:0000000000404a45\n.text:0000000000404a4a\n.text:0000000000404a4d\n.text:0000000000404a4f\n.text:0000000000404a55\n.text:0000000000404a57\n.text:0000000000404a5c\n.text:0000000000404a5f\n.text:0000000000404a61\n.text:0000000000404a66\n.text:0000000000404a6a\n.text:0000000000404a6d\n.text:0000000000404a70\n.text:0000000000404a73\n.text:0000000000404a78\n.text:0000000000404a7a\n.text:0000000000404a7c\n.text:0000000000404a7e\n.text:0000000000404a83\n.text:0000000000404a85\n.text:0000000000404a8a\n.text:0000000000404a90\n.text:0000000000404a95\n.text:0000000000404a9a\n.text:0000000000404a9d\n.text:0000000000404aa0\n.text:0000000000404aa3\n.text:0000000000404aa5\n.text:0000000000404aa7\n.text:0000000000404ab0\n.text:0000000000404ab2\n.text:0000000000404ab7\n.text:0000000000404abc\n.text:0000000000404ac3\n.text:0000000000404ac9\n.text:0000000000404acc\n.text:0000000000404ad0\n.text:0000000000404ad1\n.text:0000000000404ad3\n.text:0000000000404ad5\n.text:0000000000404ad7\n.text:0000000000404ad9\n.text:0000000000404ada\n'
p1476
tp1477
sS'fwrite'
p1478
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1479
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060e200)();\u000a  return sVar1;\u000a}\u000a\u000a
p1480
S'JMP qword ptr [0x0060e200]\n'
p1481
S'ff 25 6a c8 20 00\n'
p1482
S'.plt:0000000000401990\n'
p1483
tp1484
sS'wc_truncate'
p1485
(S'\n__stdcall wc_truncate(wchar_t * wc, size_t width)\n'
p1486
V\u000asize_t wc_truncate(wchar_t *wc,size_t width)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  wchar_t __c;\u000a  \u000a  __c = *wc;\u000a  if (__c == L'\u005c0') {\u000a    sVar3 = 0;\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    do {\u000a      iVar1 = wcwidth(__c);\u000a      if (iVar1 == -1) {\u000a        *wc = 0xfffd;\u000a        iVar1 = 1;\u000a      }\u000a      uVar2 = (long)iVar1 + sVar3;\u000a      if (width < uVar2) break;\u000a      __c = wc[1];\u000a      wc = wc + 1;\u000a      sVar3 = uVar2;\u000a    } while (__c != L'\u005c0');\u000a  }\u000a  *wc = 0;\u000a  return sVar3;\u000a}\u000a\u000a
p1487
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV RBX,RDI\nMOV EDI,dword ptr [RBX]\nTEST EDI,EDI\nJZ 0x004052af\nXOR R15D,R15D\nNOP word ptr CS:[RAX + RAX*0x1]\nCALL 0x00401860\nCMP EAX,-0x1\nJNZ 0x00405295\nMOV dword ptr [RBX],0xfffd\nMOV EAX,0x1\nCDQE\nADD RAX,R15\nCMP RAX,R14\nJA 0x004052b3\nMOV EDI,dword ptr [RBX + 0x4]\nADD RBX,0x4\nTEST EDI,EDI\nMOV R15,RAX\nJNZ 0x00405280\nJMP 0x004052b6\nXOR EAX,EAX\nJMP 0x004052b6\nMOV RAX,R15\nMOV dword ptr [RBX],0x0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1488
S'41 57\n41 56\n53\n49 89 f6\n48 89 fb\n8b 3b\n85 ff\n74 3e\n45 31 ff\n66 66 66 2e 0f 1f 84 00 00 00 00 00\ne8 db c5 ff ff\n83 f8 ff\n75 0b\nc7 03 fd ff 00 00\nb8 01 00 00 00\n48 98\n4c 01 f8\n4c 39 f0\n77 14\n8b 7b 04\n48 83 c3 04\n85 ff\n49 89 c7\n75 d3\neb 07\n31 c0\neb 03\n4c 89 f8\nc7 03 00 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p1489
S'.text:0000000000405260\n.text:0000000000405262\n.text:0000000000405264\n.text:0000000000405265\n.text:0000000000405268\n.text:000000000040526b\n.text:000000000040526d\n.text:000000000040526f\n.text:0000000000405271\n.text:0000000000405274\n.text:0000000000405280\n.text:0000000000405285\n.text:0000000000405288\n.text:000000000040528a\n.text:0000000000405290\n.text:0000000000405295\n.text:0000000000405297\n.text:000000000040529a\n.text:000000000040529d\n.text:000000000040529f\n.text:00000000004052a2\n.text:00000000004052a6\n.text:00000000004052a8\n.text:00000000004052ab\n.text:00000000004052ad\n.text:00000000004052af\n.text:00000000004052b1\n.text:00000000004052b3\n.text:00000000004052b6\n.text:00000000004052bc\n.text:00000000004052bd\n.text:00000000004052bf\n.text:00000000004052c1\n'
p1490
tp1491
sS'c_isprint'
p1492
(S'\n__stdcall c_isprint()\n'
p1493
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1494
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1495
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1496
S'.text:0000000000404dd0\n.text:0000000000404dd3\n.text:0000000000404dd6\n.text:0000000000404dd9\n'
p1497
tp1498
sS'__do_global_dtors_aux'
p1499
(S'\n__stdcall __do_global_dtors_aux()\n'
p1500
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1501
S'CMP byte ptr [0x0060e328],0x0\nJNZ 0x00401aca\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401a30\nPOP RBP\nMOV byte ptr [0x0060e328],0x1\nRET\n'
p1502
S'80 3d 71 c8 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 5e c8 20 00 01\nf3 c3\n'
p1503
S'.text:0000000000401ab0\n.text:0000000000401ab7\n.text:0000000000401ab9\n.text:0000000000401aba\n.text:0000000000401abd\n.text:0000000000401ac2\n.text:0000000000401ac3\n.text:0000000000401aca\n'
p1504
tp1505
sS'_fini'
p1506
(S'\n__stdcall _fini()\n'
p1507
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1508
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1509
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1510
S'.fini:0000000000407f7c\n.fini:0000000000407f80\n.fini:0000000000407f84\n'
p1511
tp1512
sS'mbs_align_pad'
p1513
(S'\n__stdcall mbs_align_pad(char * dest, char * dest_end, size_t n_spaces)\n'
p1514
V\u000achar * mbs_align_pad(char *dest,char *dest_end,size_t n_spaces)\u000a\u000a{\u000a  long lVar1;\u000a  char *pcVar2;\u000a  \u000a  if ((dest < dest_end) && (n_spaces != 0)) {\u000a    pcVar2 = (char *)-n_spaces;\u000a    if ((char *)-n_spaces <= dest + -(long)dest_end) {\u000a      pcVar2 = dest + -(long)dest_end;\u000a    }\u000a    memset(dest,0x20,-(long)pcVar2);\u000a    lVar1 = -n_spaces;\u000a    do {\u000a      lVar1 = lVar1 + 1;\u000a      dest = dest + 1;\u000a      if (dest_end <= dest) break;\u000a    } while (lVar1 != 0);\u000a  }\u000a  *dest = 0;\u000a  return dest;\u000a}\u000a\u000a
p1515
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RAX,RBX\nSUB RAX,R14\nJNC 0x00405321\nTEST R15,R15\nJZ 0x00405321\nMOV RDX,R15\nNEG RDX\nCMP RAX,RDX\nCMOVNC RDX,RAX\nNEG RDX\nMOV ESI,0x20\nMOV RDI,RBX\nCALL 0x00401760\nMOV EAX,0x1\nSUB RAX,R15\nINC RBX\nCMP RBX,R14\nJNC 0x00405321\nTEST RAX,RAX\nLEA RAX,[RAX + 0x1]\nJNZ 0x00405310\nMOV byte ptr [RBX],0x0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1516
S'41 57\n41 56\n53\n49 89 d7\n49 89 f6\n48 89 fb\n48 89 d8\n4c 29 f0\n73 3b\n4d 85 ff\n74 36\n4c 89 fa\n48 f7 da\n48 39 d0\n48 0f 43 d0\n48 f7 da\nbe 20 00 00 00\n48 89 df\ne8 58 c4 ff ff\nb8 01 00 00 00\n4c 29 f8\n48 ff c3\n4c 39 f3\n73 09\n48 85 c0\n48 8d 40 01\n75 ef\nc6 03 00\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p1517
S'.text:00000000004052d0\n.text:00000000004052d2\n.text:00000000004052d4\n.text:00000000004052d5\n.text:00000000004052d8\n.text:00000000004052db\n.text:00000000004052de\n.text:00000000004052e1\n.text:00000000004052e4\n.text:00000000004052e6\n.text:00000000004052e9\n.text:00000000004052eb\n.text:00000000004052ee\n.text:00000000004052f1\n.text:00000000004052f4\n.text:00000000004052f8\n.text:00000000004052fb\n.text:0000000000405300\n.text:0000000000405303\n.text:0000000000405308\n.text:000000000040530d\n.text:0000000000405310\n.text:0000000000405313\n.text:0000000000405316\n.text:0000000000405318\n.text:000000000040531b\n.text:000000000040531f\n.text:0000000000405321\n.text:0000000000405324\n.text:0000000000405327\n.text:0000000000405328\n.text:000000000040532a\n.text:000000000040532c\n'
p1518
tp1519
sS'__fpending'
p1520
(S'\n__stdcall __fpending()\n'
p1521
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060e060)();\u000a  return;\u000a}\u000a\u000a
p1522
S'JMP qword ptr [0x0060e060]\n'
p1523
S'ff 25 0a ca 20 00\n'
p1524
S'.plt:0000000000401650\n'
p1525
tp1526
s.