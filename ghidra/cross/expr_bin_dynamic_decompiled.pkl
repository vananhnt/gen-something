(dp0
S'mpz_out_str'
p1
(S'\n__stdcall mpz_out_str()\n'
p2
V\u000aint mpz_out_str(void)\u000a\u000a{\u000a  int iVar1;\u000a  char *__s;\u000a  intmax_t *in_RSI;\u000a  FILE *__stream;\u000a  char buf [21];\u000a  char acStack40 [32];\u000a  \u000a  __s = imaxtostr(*in_RSI,acStack40);\u000a  iVar1 = fputs_unlocked(__s,__stream);\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'PUSH RBX\nSUB RSP,0x20\nMOV RBX,RDI\nMOV RDI,qword ptr [RSI]\nMOV RSI,RSP\nCALL 0x00402c20\nMOV RDI,RAX\nMOV RSI,RBX\nCALL 0x004015b0\nADD RSP,0x20\nPOP RBX\nRET\n'
p4
S'53\n48 83 ec 20\n48 89 fb\n48 8b 3e\n48 89 e6\ne8 cd 0d 00 00\n48 89 c7\n48 89 de\ne8 52 f7 ff ff\n48 83 c4 20\n5b\nc3\n'
p5
S'.text:0000000000401e40\n.text:0000000000401e41\n.text:0000000000401e45\n.text:0000000000401e48\n.text:0000000000401e4b\n.text:0000000000401e4e\n.text:0000000000401e53\n.text:0000000000401e56\n.text:0000000000401e59\n.text:0000000000401e5e\n.text:0000000000401e62\n.text:0000000000401e63\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00609160)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x00609160]\n'
p11
S'ff 25 0a 7b 20 00\n'
p12
S'.plt:0000000000401650\n'
p13
tp14
sS'version_etc_arn'
p15
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p16
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_00406c2b,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x404b87;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x404c08;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x404c9c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p17
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00404a18\nMOV EDX,0x406c18\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401720\nJMP 0x00404a2d\nMOV EDX,0x406c24\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401720\nXOR EDI,EDI\nMOV ESI,0x406c2b\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x406f00\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401720\nXOR EDI,EDI\nMOV ESI,0x406c2f\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x004015b0\nCMP R12,0x9\nJA 0x00404ab6\nJMP qword ptr [0x406bc8 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x406cfa\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401720\nXOR EDI,EDI\nMOV ESI,0x406e39\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401720\nADD RSP,0x38\nJMP 0x00404d27\nXOR EDI,EDI\nMOV ESI,0x406d0a\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401720\nXOR EDI,EDI\nMOV ESI,0x406d21\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401720\nXOR EDI,EDI\nMOV ESI,0x406d3d\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401720\nADD RSP,0x18\nJMP 0x00404d27\nXOR EDI,EDI\nMOV ESI,0x406d5d\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401720\nADD RSP,0x18\nJMP 0x00404d27\nXOR EDI,EDI\nMOV ESI,0x406d81\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401720\nADD RSP,0x28\nJMP 0x00404d27\nXOR EDI,EDI\nMOV ESI,0x406da9\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401720\nADD RSP,0x28\nJMP 0x00404d27\nXOR EDI,EDI\nMOV ESI,0x406dd5\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401720\nADD RSP,0x38\nJMP 0x00404d27\nXOR EDI,EDI\nMOV ESI,0x406e05\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401720\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401400\n'
p18
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 18 6c 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 0a cd ff ff\neb 15\nba 24 6c 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 f3 cc ff ff\n31 ff\nbe 2b 6c 40 00\nba 05 00 00 00\ne8 82 ca ff ff\n48 89 c1\nbe 01 00 00 00\nba 00 6f 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 c5 cc ff ff\n31 ff\nbe 2f 6c 40 00\nba 05 00 00 00\ne8 54 ca ff ff\n48 89 c7\n4c 89 f6\ne8 39 cb ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 c8 6b 40 00\n31 ff\nbe fa 6c 40 00\nba 05 00 00 00\ne8 2a ca ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 6a cc ff ff\n31 ff\nbe 39 6e 40 00\nba 05 00 00 00\ne8 f9 c9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 21 cc ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe 0a 6d 40 00\nba 05 00 00 00\ne8 a7 c9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 e3 cb ff ff\n31 ff\nbe 21 6d 40 00\nba 05 00 00 00\ne8 72 c9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 aa cb ff ff\n31 ff\nbe 3d 6d 40 00\nba 05 00 00 00\ne8 39 c9 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 74 cb ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 5d 6d 40 00\nba 05 00 00 00\ne8 fa c8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 32 cb ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 81 6d 40 00\nba 05 00 00 00\ne8 b8 c8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 e8 ca ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe a9 6d 40 00\nba 05 00 00 00\ne8 6e c8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 9e ca ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe d5 6d 40 00\nba 05 00 00 00\ne8 24 c8 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 4c ca ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 05 6e 40 00\nba 05 00 00 00\ne8 d5 c7 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 fd c9 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 cc c6 ff ff\n'
p19
S'.text:00000000004049e0\n.text:00000000004049e2\n.text:00000000004049e4\n.text:00000000004049e6\n.text:00000000004049e7\n.text:00000000004049e8\n.text:00000000004049eb\n.text:00000000004049ee\n.text:00000000004049f1\n.text:00000000004049f4\n.text:00000000004049f7\n.text:00000000004049fa\n.text:00000000004049ff\n.text:0000000000404a02\n.text:0000000000404a04\n.text:0000000000404a09\n.text:0000000000404a0b\n.text:0000000000404a0e\n.text:0000000000404a11\n.text:0000000000404a16\n.text:0000000000404a18\n.text:0000000000404a1d\n.text:0000000000404a1f\n.text:0000000000404a22\n.text:0000000000404a25\n.text:0000000000404a28\n.text:0000000000404a2d\n.text:0000000000404a2f\n.text:0000000000404a34\n.text:0000000000404a39\n.text:0000000000404a3e\n.text:0000000000404a41\n.text:0000000000404a46\n.text:0000000000404a4b\n.text:0000000000404a51\n.text:0000000000404a53\n.text:0000000000404a56\n.text:0000000000404a5b\n.text:0000000000404a5d\n.text:0000000000404a62\n.text:0000000000404a67\n.text:0000000000404a6c\n.text:0000000000404a6f\n.text:0000000000404a72\n.text:0000000000404a77\n.text:0000000000404a7b\n.text:0000000000404a7d\n.text:0000000000404a85\n.text:0000000000404a87\n.text:0000000000404a8c\n.text:0000000000404a91\n.text:0000000000404a96\n.text:0000000000404a99\n.text:0000000000404a9c\n.text:0000000000404aa1\n.text:0000000000404aa3\n.text:0000000000404aa6\n.text:0000000000404aaa\n.text:0000000000404aab\n.text:0000000000404aad\n.text:0000000000404aaf\n.text:0000000000404ab1\n.text:0000000000404ab6\n.text:0000000000404ab8\n.text:0000000000404abd\n.text:0000000000404ac2\n.text:0000000000404ac7\n.text:0000000000404aca\n.text:0000000000404acd\n.text:0000000000404ad1\n.text:0000000000404ad5\n.text:0000000000404ada\n.text:0000000000404adf\n.text:0000000000404ae2\n.text:0000000000404ae6\n.text:0000000000404aea\n.text:0000000000404aee\n.text:0000000000404af2\n.text:0000000000404af6\n.text:0000000000404afa\n.text:0000000000404aff\n.text:0000000000404b03\n.text:0000000000404b08\n.text:0000000000404b0a\n.text:0000000000404b0f\n.text:0000000000404b14\n.text:0000000000404b19\n.text:0000000000404b1c\n.text:0000000000404b1f\n.text:0000000000404b23\n.text:0000000000404b28\n.text:0000000000404b2a\n.text:0000000000404b2d\n.text:0000000000404b31\n.text:0000000000404b32\n.text:0000000000404b34\n.text:0000000000404b36\n.text:0000000000404b38\n.text:0000000000404b3d\n.text:0000000000404b3f\n.text:0000000000404b44\n.text:0000000000404b49\n.text:0000000000404b4e\n.text:0000000000404b51\n.text:0000000000404b54\n.text:0000000000404b58\n.text:0000000000404b5c\n.text:0000000000404b61\n.text:0000000000404b63\n.text:0000000000404b66\n.text:0000000000404b6a\n.text:0000000000404b6b\n.text:0000000000404b6d\n.text:0000000000404b6f\n.text:0000000000404b71\n.text:0000000000404b76\n.text:0000000000404b78\n.text:0000000000404b7d\n.text:0000000000404b82\n.text:0000000000404b87\n.text:0000000000404b8a\n.text:0000000000404b8d\n.text:0000000000404b91\n.text:0000000000404b95\n.text:0000000000404b99\n.text:0000000000404b9e\n.text:0000000000404ba0\n.text:0000000000404ba3\n.text:0000000000404ba7\n.text:0000000000404bac\n.text:0000000000404bb0\n.text:0000000000404bb5\n.text:0000000000404bb7\n.text:0000000000404bbc\n.text:0000000000404bc1\n.text:0000000000404bc6\n.text:0000000000404bc9\n.text:0000000000404bcc\n.text:0000000000404bd0\n.text:0000000000404bd4\n.text:0000000000404bd9\n.text:0000000000404bde\n.text:0000000000404be1\n.text:0000000000404be5\n.text:0000000000404be9\n.text:0000000000404bee\n.text:0000000000404bf2\n.text:0000000000404bf7\n.text:0000000000404bf9\n.text:0000000000404bfe\n.text:0000000000404c03\n.text:0000000000404c08\n.text:0000000000404c0b\n.text:0000000000404c0e\n.text:0000000000404c12\n.text:0000000000404c16\n.text:0000000000404c1a\n.text:0000000000404c1f\n.text:0000000000404c24\n.text:0000000000404c27\n.text:0000000000404c2b\n.text:0000000000404c2f\n.text:0000000000404c33\n.text:0000000000404c38\n.text:0000000000404c3c\n.text:0000000000404c41\n.text:0000000000404c43\n.text:0000000000404c48\n.text:0000000000404c4d\n.text:0000000000404c52\n.text:0000000000404c55\n.text:0000000000404c58\n.text:0000000000404c5c\n.text:0000000000404c60\n.text:0000000000404c65\n.text:0000000000404c6a\n.text:0000000000404c6d\n.text:0000000000404c71\n.text:0000000000404c75\n.text:0000000000404c79\n.text:0000000000404c7d\n.text:0000000000404c82\n.text:0000000000404c86\n.text:0000000000404c8b\n.text:0000000000404c8d\n.text:0000000000404c92\n.text:0000000000404c97\n.text:0000000000404c9c\n.text:0000000000404c9f\n.text:0000000000404ca2\n.text:0000000000404ca6\n.text:0000000000404caa\n.text:0000000000404cae\n.text:0000000000404cb3\n.text:0000000000404cb8\n.text:0000000000404cbb\n.text:0000000000404cbf\n.text:0000000000404cc3\n.text:0000000000404cc7\n.text:0000000000404ccb\n.text:0000000000404ccf\n.text:0000000000404cd4\n.text:0000000000404cd8\n.text:0000000000404cda\n.text:0000000000404cdc\n.text:0000000000404ce1\n.text:0000000000404ce6\n.text:0000000000404ceb\n.text:0000000000404cee\n.text:0000000000404cf1\n.text:0000000000404cf5\n.text:0000000000404cf9\n.text:0000000000404cfe\n.text:0000000000404d03\n.text:0000000000404d06\n.text:0000000000404d0a\n.text:0000000000404d0e\n.text:0000000000404d12\n.text:0000000000404d16\n.text:0000000000404d1a\n.text:0000000000404d1e\n.text:0000000000404d23\n.text:0000000000404d27\n.text:0000000000404d28\n.text:0000000000404d2a\n.text:0000000000404d2c\n.text:0000000000404d2e\n.text:0000000000404d2f\n'
p20
tp21
sS'strchr'
p22
(S'\n__stdcall strchr(char * __s, int __c)\n'
p23
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_006090c8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p24
S'JMP qword ptr [0x006090c8]\n'
p25
S'ff 25 a2 7b 20 00\n'
p26
S'.plt:0000000000401520\n'
p27
tp28
sS'rpl_fclose'
p29
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p30
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00405959;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00405959:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401610\nTEST EAX,EAX\nJS 0x00405959\nMOV RDI,RBX\nCALL 0x00401670\nTEST EAX,EAX\nJZ 0x00405927\nMOV RDI,RBX\nCALL 0x00401610\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401540\nCMP RAX,-0x1\nJZ 0x00405959\nMOV RDI,RBX\nCALL 0x00405970\nTEST EAX,EAX\nJZ 0x00405959\nCALL 0x00401420\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x004014a0\nTEST EBP,EBP\nJZ 0x00405952\nCALL 0x00401420\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004014a0\n'
p32
S'55\n53\n50\n48 89 fb\ne8 15 bd ff ff\n85 c0\n78 5a\n48 89 df\ne8 69 bd ff ff\n85 c0\n74 1c\n48 89 df\ne8 fd bc ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 1f bc ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 e8 ba ff ff\n8b 28\n48 89 df\ne8 5e bb ff ff\n85 ed\n74 0c\ne8 d5 ba ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 39 bb ff ff\n'
p33
S'.text:00000000004058f0\n.text:00000000004058f1\n.text:00000000004058f2\n.text:00000000004058f3\n.text:00000000004058f6\n.text:00000000004058fb\n.text:00000000004058fd\n.text:00000000004058ff\n.text:0000000000405902\n.text:0000000000405907\n.text:0000000000405909\n.text:000000000040590b\n.text:000000000040590e\n.text:0000000000405913\n.text:0000000000405915\n.text:000000000040591a\n.text:000000000040591c\n.text:0000000000405921\n.text:0000000000405925\n.text:0000000000405927\n.text:000000000040592a\n.text:000000000040592f\n.text:0000000000405931\n.text:0000000000405933\n.text:0000000000405938\n.text:000000000040593a\n.text:000000000040593d\n.text:0000000000405942\n.text:0000000000405944\n.text:0000000000405946\n.text:000000000040594b\n.text:000000000040594d\n.text:0000000000405952\n.text:0000000000405956\n.text:0000000000405957\n.text:0000000000405958\n.text:0000000000405959\n.text:000000000040595c\n.text:0000000000405960\n.text:0000000000405961\n.text:0000000000405962\n'
p34
tp35
sS'strncmp'
p36
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p37
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00609050)();\u000a  return iVar1;\u000a}\u000a\u000a
p38
S'JMP qword ptr [0x00609050]\n'
p39
S'ff 25 1a 7c 20 00\n'
p40
S'.plt:0000000000401430\n'
p41
tp42
sS'xnrealloc'
p43
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p44
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p45
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00404f34\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00404f40\nPUSH RAX\nCALL 0x00405090\n'
p46
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p47
S'.text:0000000000404f20\n.text:0000000000404f23\n.text:0000000000404f26\n.text:0000000000404f29\n.text:0000000000404f2b\n.text:0000000000404f2f\n.text:0000000000404f32\n.text:0000000000404f34\n.text:0000000000404f35\n'
p48
tp49
sS'quote'
p50
(S'\n__stdcall quote(char * arg)\n'
p51
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p52
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x004042b0\n'
p53
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p54
S'.text:00000000004042c0\n.text:00000000004042c3\n.text:00000000004042c5\n.text:00000000004042c8\n'
p55
tp56
sS'emit_bug_reporting_address'
p57
(S'\n__stdcall emit_bug_reporting_address()\n'
p58
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p59
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x406e75\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406e8a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004016b0\nXOR EDI,EDI\nMOV ESI,0x406ea0\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406366\nMOV ECX,0x406450\nXOR EAX,EAX\nCALL 0x004016b0\nXOR EDI,EDI\nMOV ESI,0x406eb4\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004015b0\n'
p60
S'50\n31 ff\nbe 75 6e 40 00\nba 05 00 00 00\ne8 4e c6 ff ff\n48 89 c1\nbf 01 00 00 00\nba 8a 6e 40 00\n31 c0\n48 89 ce\ne8 27 c8 ff ff\n31 ff\nbe a0 6e 40 00\nba 05 00 00 00\ne8 26 c6 ff ff\n48 89 c6\nbf 01 00 00 00\nba 66 63 40 00\nb9 50 64 40 00\n31 c0\ne8 fd c7 ff ff\n31 ff\nbe b4 6e 40 00\nba 05 00 00 00\ne8 fc c5 ff ff\n48 8b 35 9d 43 20 00\n48 89 c7\n58\ne9 dc c6 ff ff\n'
p61
S'.text:0000000000404e60\n.text:0000000000404e61\n.text:0000000000404e63\n.text:0000000000404e68\n.text:0000000000404e6d\n.text:0000000000404e72\n.text:0000000000404e75\n.text:0000000000404e7a\n.text:0000000000404e7f\n.text:0000000000404e81\n.text:0000000000404e84\n.text:0000000000404e89\n.text:0000000000404e8b\n.text:0000000000404e90\n.text:0000000000404e95\n.text:0000000000404e9a\n.text:0000000000404e9d\n.text:0000000000404ea2\n.text:0000000000404ea7\n.text:0000000000404eac\n.text:0000000000404eae\n.text:0000000000404eb3\n.text:0000000000404eb5\n.text:0000000000404eba\n.text:0000000000404ebf\n.text:0000000000404ec4\n.text:0000000000404ecb\n.text:0000000000404ece\n.text:0000000000404ecf\n'
p62
tp63
sS'clone_quoting_options'
p64
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p65
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p66
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401420\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x6092f0\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00405040\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p67
S'55\n41 56\n53\n48 89 fb\ne8 94 e5 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 f0 92 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 95 21 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p68
S'.text:0000000000402e80\n.text:0000000000402e81\n.text:0000000000402e83\n.text:0000000000402e84\n.text:0000000000402e87\n.text:0000000000402e8c\n.text:0000000000402e8f\n.text:0000000000402e92\n.text:0000000000402e95\n.text:0000000000402e9a\n.text:0000000000402e9e\n.text:0000000000402ea3\n.text:0000000000402ea6\n.text:0000000000402eab\n.text:0000000000402eae\n.text:0000000000402eaf\n.text:0000000000402eb1\n.text:0000000000402eb2\n'
p69
tp70
sS'xmalloc'
p71
(S'\n__stdcall xmalloc(size_t n)\n'
p72
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p73
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401620\nTEST RBX,RBX\nJZ 0x00404f13\nTEST RAX,RAX\nJZ 0x00404f15\nPOP RBX\nRET\nCALL 0x00405090\n'
p74
S'53\n48 89 fb\ne8 17 c7 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p75
S'.text:0000000000404f00\n.text:0000000000404f01\n.text:0000000000404f04\n.text:0000000000404f09\n.text:0000000000404f0c\n.text:0000000000404f0e\n.text:0000000000404f11\n.text:0000000000404f13\n.text:0000000000404f14\n.text:0000000000404f15\n'
p76
tp77
sS'quotearg_char_mem'
p78
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p79
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p80
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x00609320]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x00609310]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609300]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006092f0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00402ee0\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403dd0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p81
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 28 52 20 00\n48 89 4c 24 30\n0f 10 05 0c 52 20 00\n0f 29 44 24 20\n0f 10 05 f0 51 20 00\n0f 29 44 24 10\n0f 10 05 d4 51 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p82
S'.text:00000000004040e0\n.text:00000000004040e2\n.text:00000000004040e4\n.text:00000000004040e5\n.text:00000000004040e9\n.text:00000000004040eb\n.text:00000000004040ee\n.text:00000000004040f1\n.text:00000000004040f8\n.text:00000000004040fd\n.text:0000000000404104\n.text:0000000000404109\n.text:0000000000404110\n.text:0000000000404115\n.text:000000000040411c\n.text:0000000000404120\n.text:0000000000404123\n.text:0000000000404128\n.text:000000000040412b\n.text:000000000040412d\n.text:0000000000404132\n.text:0000000000404134\n.text:0000000000404137\n.text:000000000040413a\n.text:000000000040413d\n.text:0000000000404142\n.text:0000000000404146\n.text:0000000000404147\n.text:0000000000404149\n.text:000000000040414b\n'
p83
tp84
sS'frame_dummy'
p85
(S'\n__stdcall frame_dummy()\n'
p86
V\u000a/* WARNING: Removing unreachable block (ram,0x0040185a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p87
S'MOV EDI,0x608e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401850\nJMP 0x004017e0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040184b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x004017e0\n'
p88
S'bf 18 8e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p89
S'.text:0000000000401840\n.text:0000000000401845\n.text:0000000000401849\n.text:000000000040184b\n.text:0000000000401850\n.text:0000000000401855\n.text:0000000000401858\n.text:000000000040185a\n.text:000000000040185b\n.text:000000000040185e\n.text:0000000000401860\n.text:0000000000401861\n'
p90
tp91
sS'quotearg_n_style_colon'
p92
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p93
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00404000\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00402ee0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00403dd0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p95
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p96
S'.text:0000000000404180\n.text:0000000000404181\n.text:0000000000404183\n.text:0000000000404184\n.text:0000000000404188\n.text:000000000040418b\n.text:000000000040418d\n.text:0000000000404192\n.text:0000000000404195\n.text:000000000040419a\n.text:000000000040419f\n.text:00000000004041a4\n.text:00000000004041a7\n.text:00000000004041ac\n.text:00000000004041b3\n.text:00000000004041b5\n.text:00000000004041b8\n.text:00000000004041bb\n.text:00000000004041c0\n.text:00000000004041c4\n.text:00000000004041c5\n.text:00000000004041c7\n.text:00000000004041c8\n'
p97
tp98
sS'FUN_004013b0'
p99
(S'\n__stdcall FUN_004013b0()\n'
p100
V\u000avoid FUN_004013b0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00609010)();\u000a  return;\u000a}\u000a\u000a
p101
S'PUSH qword ptr [0x00609008]\nJMP qword ptr [0x00609010]\n'
p102
S'ff 35 52 7c 20 00\nff 25 54 7c 20 00\n'
p103
S'.plt:00000000004013b0\n.plt:00000000004013b6\n'
p104
tp105
sS'quote_mem'
p106
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p107
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p108
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404290\n'
p109
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p110
S'.text:00000000004042a0\n.text:00000000004042a3\n.text:00000000004042a6\n.text:00000000004042a8\n.text:00000000004042ab\n.text:00000000004042ae\n'
p111
tp112
sS'fileno'
p113
(S'\n__stdcall fileno(FILE * __stream)\n'
p114
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00609140)();\u000a  return iVar1;\u000a}\u000a\u000a
p115
S'JMP qword ptr [0x00609140]\n'
p116
S'ff 25 2a 7b 20 00\n'
p117
S'.plt:0000000000401610\n'
p118
tp119
sS'mbrtowc'
p120
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p121
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006090c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p122
S'JMP qword ptr [0x006090c0]\n'
p123
S'ff 25 aa 7b 20 00\n'
p124
S'.plt:0000000000401510\n'
p125
tp126
sS'setlocale'
p127
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p128
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_00609188)();\u000a  return pcVar1;\u000a}\u000a\u000a
p129
S'JMP qword ptr [0x00609188]\n'
p130
S'ff 25 e2 7a 20 00\n'
p131
S'.plt:00000000004016a0\n'
p132
tp133
sS'c_toupper'
p134
(S'\n__stdcall c_toupper()\n'
p135
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p136
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p137
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p138
S'.text:0000000000405540\n.text:0000000000405543\n.text:0000000000405546\n.text:0000000000405549\n.text:000000000040554c\n'
p139
tp140
sS'mbsinit'
p141
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p142
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_006091d8)();\u000a  return iVar1;\u000a}\u000a\u000a
p143
S'JMP qword ptr [0x006091d8]\n'
p144
S'ff 25 92 7a 20 00\n'
p145
S'.plt:0000000000401740\n'
p146
tp147
sS'nomoreargs'
p148
(S'\n__stdcall nomoreargs()\n'
p149
V\u000a_Bool nomoreargs(void)\u000a\u000a{\u000a  return (_Bool)(*args == (char *)0x0);\u000a}\u000a\u000a
p150
S'MOV RAX,qword ptr [0x006092d0]\nCMP qword ptr [RAX],0x0\nSETZ AL\nRET\n'
p151
S'48 8b 05 69 75 20 00\n48 83 38 00\n0f 94 c0\nc3\n'
p152
S'.text:0000000000401d60\n.text:0000000000401d67\n.text:0000000000401d6b\n.text:0000000000401d6e\n'
p153
tp154
sS'dcgettext'
p155
(S'\n__stdcall dcgettext()\n'
p156
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00609098)();\u000a  return;\u000a}\u000a\u000a
p157
S'JMP qword ptr [0x00609098]\n'
p158
S'ff 25 d2 7b 20 00\n'
p159
S'.plt:00000000004014c0\n'
p160
tp161
sS'integer_overflow'
p162
(S'\n__stdcall integer_overflow()\n'
p163
V\u000avoid integer_overflow(ulong uParm1)\u000a\u000a{\u000a  error(3,0x22,&DAT_004065a1,uParm1 & 0xffffffff);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p164
S'PUSH RAX\nMOV ECX,EDI\nMOV EDI,0x3\nMOV ESI,0x22\nMOV EDX,0x4065a1\nXOR EAX,EAX\nCALL 0x004016c0\nCALL 0x00401400\n'
p165
S'50\n89 f9\nbf 03 00 00 00\nbe 22 00 00 00\nba a1 65 40 00\n31 c0\ne8 d7 eb ff ff\ne8 12 e9 ff ff\n'
p166
S'.text:0000000000402ad0\n.text:0000000000402ad1\n.text:0000000000402ad3\n.text:0000000000402ad8\n.text:0000000000402add\n.text:0000000000402ae2\n.text:0000000000402ae4\n.text:0000000000402ae9\n'
p167
tp168
sS'quotearg_free'
p169
(S'\n__stdcall quotearg_free()\n'
p170
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p171
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x00609208]\nCMP dword ptr [0x00609210],0x2\nJC 0x00403d6a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004013d0\nINC RBX\nMOV EAX,dword ptr [0x00609210]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x00403d50\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x609330\nCMP RDI,RAX\nJZ 0x00403d93\nCALL 0x004013d0\nMOV qword ptr [0x00609218],0x100\nMOV qword ptr [0x00609220],0x609330\nMOV EAX,0x609218\nCMP R14,RAX\nJZ 0x00403db0\nMOV RDI,R14\nCALL 0x004013d0\nMOV qword ptr [0x00609208],0x609218\nMOV dword ptr [0x00609210],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p172
S'41 57\n41 56\n53\n4c 8b 35 cc 54 20 00\n83 3d cd 54 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 78 d6 ff ff\n48 ff c3\n8b 05 af 54 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 30 93 60 00\n48 39 c7\n74 1b\ne8 53 d6 ff ff\n48 c7 05 90 54 20 00 00 01 00 00\n48 c7 05 8d 54 20 00 30 93 60 00\nb8 18 92 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 2b d6 ff ff\n48 c7 05 58 54 20 00 18 92 60 00\nc7 05 56 54 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p173
S'.text:0000000000403d30\n.text:0000000000403d32\n.text:0000000000403d34\n.text:0000000000403d35\n.text:0000000000403d3c\n.text:0000000000403d43\n.text:0000000000403d45\n.text:0000000000403d49\n.text:0000000000403d4e\n.text:0000000000403d50\n.text:0000000000403d53\n.text:0000000000403d58\n.text:0000000000403d5b\n.text:0000000000403d61\n.text:0000000000403d65\n.text:0000000000403d68\n.text:0000000000403d6a\n.text:0000000000403d6e\n.text:0000000000403d73\n.text:0000000000403d76\n.text:0000000000403d78\n.text:0000000000403d7d\n.text:0000000000403d88\n.text:0000000000403d93\n.text:0000000000403d98\n.text:0000000000403d9b\n.text:0000000000403d9d\n.text:0000000000403da0\n.text:0000000000403da5\n.text:0000000000403db0\n.text:0000000000403dba\n.text:0000000000403dbb\n.text:0000000000403dbd\n.text:0000000000403dbf\n'
p174
tp175
sS'quotearg_mem'
p176
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p177
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p178
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403f90\n'
p179
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p180
S'.text:0000000000403fb0\n.text:0000000000403fb3\n.text:0000000000403fb6\n.text:0000000000403fb8\n.text:0000000000403fbb\n.text:0000000000403fbe\n'
p181
tp182
sS'deregister_tm_clones'
p183
(S'\n__stdcall deregister_tm_clones()\n'
p184
V\u000a/* WARNING: Removing unreachable block (ram,0x004017b5) */\u000a/* WARNING: Removing unreachable block (ram,0x004017bf) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p185
S'MOV EAX,0x609267\nPUSH RBP\nSUB RAX,0x609260\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x004017d0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004017d0\nPOP RBP\nMOV EDI,0x609260\nJMP RAX\nPOP RBP\nRET\n'
p186
S'b8 67 92 60 00\n55\n48 2d 60 92 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 60 92 60 00\nff e0\n5d\nc3\n'
p187
S'.text:00000000004017a0\n.text:00000000004017a5\n.text:00000000004017a6\n.text:00000000004017ac\n.text:00000000004017b0\n.text:00000000004017b3\n.text:00000000004017b5\n.text:00000000004017ba\n.text:00000000004017bd\n.text:00000000004017bf\n.text:00000000004017c0\n.text:00000000004017c5\n.text:00000000004017d0\n.text:00000000004017d1\n'
p188
tp189
sS'freev'
p190
(S'\n__stdcall freev(VALUE * v)\n'
p191
V\u000avoid freev(VALUE *v)\u000a\u000a{\u000a  if (v->type == string) {\u000a    free((void *)v->u);\u000a  }\u000a  free(v);\u000a  return;\u000a}\u000a\u000a
p192
S'PUSH RBX\nMOV RBX,RDI\nCMP dword ptr [RBX],0x1\nJNZ 0x00401f82\nMOV RDI,qword ptr [RBX + 0x8]\nCALL 0x004013d0\nMOV RDI,RBX\nPOP RBX\nJMP 0x004013d0\n'
p193
S'53\n48 89 fb\n83 3b 01\n75 09\n48 8b 7b 08\ne8 4e f4 ff ff\n48 89 df\n5b\ne9 45 f4 ff ff\n'
p194
S'.text:0000000000401f70\n.text:0000000000401f71\n.text:0000000000401f74\n.text:0000000000401f77\n.text:0000000000401f79\n.text:0000000000401f7d\n.text:0000000000401f82\n.text:0000000000401f85\n.text:0000000000401f86\n'
p195
tp196
sS'quotearg_custom'
p197
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p198
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p199
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x004041d0\n'
p200
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p201
S'.text:0000000000404250\n.text:0000000000404253\n.text:0000000000404256\n.text:0000000000404259\n.text:000000000040425b\n.text:000000000040425e\n.text:0000000000404261\n.text:0000000000404264\n'
p202
tp203
sS'free'
p204
(S'\n__stdcall free(void * __ptr)\n'
p205
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00609020)();\u000a  return;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x00609020]\n'
p207
S'ff 25 4a 7c 20 00\n'
p208
S'.plt:00000000004013d0\n'
p209
tp210
sS'close'
p211
(S'\n__stdcall close(int __fd)\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006090f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x006090f8]\n'
p214
S'ff 25 72 7b 20 00\n'
p215
S'.plt:0000000000401580\n'
p216
tp217
sS'looks_like_integer'
p218
(S'\n__stdcall looks_like_integer(char * cp)\n'
p219
V\u000a_Bool looks_like_integer(char *cp)\u000a\u000a{\u000a  char cVar1;\u000a  \u000a  cp = cp + (ulong)(*cp == '-') + 1;\u000a  do {\u000a    if (9 < (int)cp[-1] - 0x30U) {\u000a      return false;\u000a    }\u000a    cVar1 = *cp;\u000a    cp = cp + 1;\u000a  } while (cVar1 != 0);\u000a  return true;\u000a}\u000a\u000a
p220
S'XOR EAX,EAX\nCMP byte ptr [RDI],0x2d\nSETZ AL\nLEA RAX,[RDI + RAX*0x1 + 0x1]\nNOP dword ptr [RAX]\nMOVSX ECX,byte ptr [RAX + -0x1]\nADD ECX,-0x30\nCMP ECX,0x9\nJA 0x004022c8\nCMP byte ptr [RAX],0x0\nLEA RAX,[RAX + 0x1]\nJNZ 0x004022b0\nMOV AL,0x1\nRET\nXOR EAX,EAX\nRET\n'
p221
S'31 c0\n80 3f 2d\n0f 94 c0\n48 8d 44 07 01\n0f 1f 00\n0f be 48 ff\n83 c1 d0\n83 f9 09\n77 0c\n80 38 00\n48 8d 40 01\n75 eb\nb0 01\nc3\n31 c0\nc3\n'
p222
S'.text:00000000004022a0\n.text:00000000004022a2\n.text:00000000004022a5\n.text:00000000004022a8\n.text:00000000004022ad\n.text:00000000004022b0\n.text:00000000004022b4\n.text:00000000004022b7\n.text:00000000004022ba\n.text:00000000004022bc\n.text:00000000004022bf\n.text:00000000004022c3\n.text:00000000004022c5\n.text:00000000004022c7\n.text:00000000004022c8\n.text:00000000004022ca\n'
p223
tp224
sS'getenv'
p225
(S'\n__stdcall getenv(char * __name)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00609018)();\u000a  return pcVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x00609018]\n'
p228
S'ff 25 52 7c 20 00\n'
p229
S'.plt:00000000004013c0\n'
p230
tp231
sS'putchar_unlocked'
p232
(S'\n__stdcall putchar_unlocked(int __c)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_00609138)();\u000a  return iVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x00609138]\n'
p235
S'ff 25 32 7b 20 00\n'
p236
S'.plt:0000000000401600\n'
p237
tp238
sS'rpl_fseeko'
p239
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p240
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_006091a8)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p241
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x004059e8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x004059e8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x004059fa\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004016e0\nMOV RDI,RBX\nCALL 0x00401610\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401540\nCMP RAX,-0x1\nJZ 0x00405a23\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00405a28\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p242
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 e6 bc ff ff\n48 89 df\ne8 0e bc ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 31 bb ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p243
S'.text:00000000004059c0\n.text:00000000004059c1\n.text:00000000004059c3\n.text:00000000004059c4\n.text:00000000004059c7\n.text:00000000004059ca\n.text:00000000004059cd\n.text:00000000004059d1\n.text:00000000004059d5\n.text:00000000004059d7\n.text:00000000004059db\n.text:00000000004059df\n.text:00000000004059e1\n.text:00000000004059e6\n.text:00000000004059e8\n.text:00000000004059eb\n.text:00000000004059ee\n.text:00000000004059f1\n.text:00000000004059f2\n.text:00000000004059f4\n.text:00000000004059f5\n.text:00000000004059fa\n.text:00000000004059fd\n.text:0000000000405a02\n.text:0000000000405a04\n.text:0000000000405a07\n.text:0000000000405a0a\n.text:0000000000405a0f\n.text:0000000000405a13\n.text:0000000000405a15\n.text:0000000000405a18\n.text:0000000000405a1f\n.text:0000000000405a21\n.text:0000000000405a23\n.text:0000000000405a28\n.text:0000000000405a29\n.text:0000000000405a2b\n.text:0000000000405a2c\n'
p244
tp245
sS'quote_n_mem'
p246
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p247
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p248
S'MOV ECX,0x609228\nJMP 0x00403dd0\n'
p249
S'b9 28 92 60 00\ne9 36 fb ff ff\n'
p250
S'.text:0000000000404290\n.text:0000000000404295\n'
p251
tp252
sS'xstrdup'
p253
(S'\n__stdcall xstrdup(char * string)\n'
p254
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p255
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004014f0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00405040\n'
p256
S'53\n48 89 fb\ne8 77 c4 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p257
S'.text:0000000000405070\n.text:0000000000405071\n.text:0000000000405074\n.text:0000000000405079\n.text:000000000040507d\n.text:0000000000405080\n.text:0000000000405081\n'
p258
tp259
sS'c_ispunct'
p260
(S'\n__stdcall c_ispunct()\n'
p261
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p262
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x004054d2\nMOV AL,0x1\nJMP qword ptr [0x407178 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p263
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 78 71 40 00\nc3\n31 c0\nc3\n'
p264
S'.text:00000000004054c0\n.text:00000000004054c3\n.text:00000000004054c6\n.text:00000000004054c8\n.text:00000000004054ca\n.text:00000000004054d1\n.text:00000000004054d2\n.text:00000000004054d4\n'
p265
tp266
sS'fscanf'
p267
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006090f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x006090f0]\n'
p270
S'ff 25 7a 7b 20 00\n'
p271
S'.plt:0000000000401570\n'
p272
tp273
sS'memcpy'
p274
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00609130)();\u000a  return pvVar1;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x00609130]\n'
p277
S'ff 25 3a 7b 20 00\n'
p278
S'.plt:00000000004015f0\n'
p279
tp280
sS'close_stdout_set_ignore_EPIPE'
p281
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p282
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p283
S'MOV byte ptr [0x006092e0],DIL\nRET\n'
p284
S'40 88 3d 89 67 20 00\nc3\n'
p285
S'.text:0000000000402b50\n.text:0000000000402b57\n'
p286
tp287
sS'iswprint'
p288
(S'\n__stdcall iswprint(wint_t __wc)\n'
p289
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_006091e0)();\u000a  return iVar1;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x006091e0]\n'
p291
S'ff 25 8a 7a 20 00\n'
p292
S'.plt:0000000000401750\n'
p293
tp294
sS'toarith'
p295
(S'\n__stdcall toarith(VALUE * v)\n'
p296
V\u000a_Bool toarith(VALUE *v)\u000a\u000a{\u000a  char *cp;\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  undefined uVar3;\u000a  \u000a  uVar3 = 1;\u000a  if (v->type != integer) {\u000a    if (v->type != string) {\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    }\u000a    cp = (char *)v->u;\u000a    _Var1 = looks_like_integer(cp);\u000a    if (_Var1 == false) {\u000a      uVar3 = 0;\u000a    }\u000a    else {\u000a      iVar2 = mpz_init_set_str();\u000a      if (iVar2 != 0) {\u000a        error(3,0x22,0x4065b4,cp);\u000a      }\u000a      free(cp);\u000a      v->type = integer;\u000a    }\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p297
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nMOV EAX,dword ptr [RBX]\nMOV R14B,0x1\nTEST EAX,EAX\nJZ 0x00402471\nCMP EAX,0x1\nJNZ 0x00402479\nMOV RBP,qword ptr [RBX + 0x8]\nMOV RDI,RBP\nCALL 0x004022a0\nTEST AL,AL\nJZ 0x0040246e\nLEA RDI,[RBX + 0x8]\nMOV RSI,RBP\nCALL 0x00402af0\nTEST EAX,EAX\nJZ 0x0040245e\nMOV EDI,0x3\nMOV ESI,0x22\nMOV EDX,0x4065b4\nXOR EAX,EAX\nMOV RCX,RBP\nCALL 0x004016c0\nMOV RDI,RBP\nCALL 0x004013d0\nMOV dword ptr [RBX],0x0\nJMP 0x00402471\nXOR R14D,R14D\nMOV EAX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x00401400\n'
p298
S'55\n41 56\n53\n48 89 fb\n8b 03\n41 b6 01\n85 c0\n74 51\n83 f8 01\n75 54\n48 8b 6b 08\n48 89 ef\ne8 6f fe ff ff\n84 c0\n74 39\n48 8d 7b 08\n48 89 ee\ne8 af 06 00 00\n85 c0\n74 19\nbf 03 00 00 00\nbe 22 00 00 00\nba b4 65 40 00\n31 c0\n48 89 e9\ne8 62 f2 ff ff\n48 89 ef\ne8 6a ef ff ff\nc7 03 00 00 00 00\neb 03\n45 31 f6\n44 89 f0\n5b\n41 5e\n5d\nc3\ne8 82 ef ff ff\n'
p299
S'.text:0000000000402410\n.text:0000000000402411\n.text:0000000000402413\n.text:0000000000402414\n.text:0000000000402417\n.text:0000000000402419\n.text:000000000040241c\n.text:000000000040241e\n.text:0000000000402420\n.text:0000000000402423\n.text:0000000000402425\n.text:0000000000402429\n.text:000000000040242c\n.text:0000000000402431\n.text:0000000000402433\n.text:0000000000402435\n.text:0000000000402439\n.text:000000000040243c\n.text:0000000000402441\n.text:0000000000402443\n.text:0000000000402445\n.text:000000000040244a\n.text:000000000040244f\n.text:0000000000402454\n.text:0000000000402456\n.text:0000000000402459\n.text:000000000040245e\n.text:0000000000402461\n.text:0000000000402466\n.text:000000000040246c\n.text:000000000040246e\n.text:0000000000402471\n.text:0000000000402474\n.text:0000000000402475\n.text:0000000000402477\n.text:0000000000402478\n.text:0000000000402479\n'
p300
tp301
sS'c_isspace'
p302
(S'\n__stdcall c_isspace()\n'
p303
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p304
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x004054f5\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p305
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p306
S'.text:00000000004054e0\n.text:00000000004054e3\n.text:00000000004054e6\n.text:00000000004054e8\n.text:00000000004054ed\n.text:00000000004054ef\n.text:00000000004054f1\n.text:00000000004054f4\n.text:00000000004054f5\n.text:00000000004054f7\n'
p307
tp308
sS'open'
p309
(S'\n__stdcall open(char * __file, int __oflag)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_006091a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x006091a0]\n'
p312
S'ff 25 ca 7a 20 00\n'
p313
S'.plt:00000000004016d0\n'
p314
tp315
sS'quotearg_n_custom_mem'
p316
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p317
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p318
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x00609320]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x00609310]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609300]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x006092f0]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00402f40\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403dd0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p319
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 27 51 20 00\n48 89 44 24 30\n0f 10 05 0b 51 20 00\n0f 29 44 24 20\n0f 10 05 ef 50 20 00\n0f 29 44 24 10\n0f 10 05 d3 50 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p320
S'.text:00000000004041e0\n.text:00000000004041e1\n.text:00000000004041e3\n.text:00000000004041e5\n.text:00000000004041e6\n.text:00000000004041ea\n.text:00000000004041ed\n.text:00000000004041f0\n.text:00000000004041f2\n.text:00000000004041f9\n.text:00000000004041fe\n.text:0000000000404205\n.text:000000000040420a\n.text:0000000000404211\n.text:0000000000404216\n.text:000000000040421d\n.text:0000000000404221\n.text:0000000000404224\n.text:0000000000404227\n.text:000000000040422c\n.text:000000000040422e\n.text:0000000000404231\n.text:0000000000404234\n.text:0000000000404237\n.text:000000000040423c\n.text:0000000000404240\n.text:0000000000404241\n.text:0000000000404243\n.text:0000000000404245\n.text:0000000000404246\n'
p321
tp322
sS'_init'
p323
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p324
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00608ff8;\u000a  if (PTR___gmon_start___00608ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00608ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00608ff8]\nTEST RAX,RAX\nJZ 0x004013aa\nCALL RAX\nADD RSP,0x8\nRET\n'
p326
S'48 83 ec 08\n48 8b 05 55 7c 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p327
S'.init:0000000000401398\n.init:000000000040139c\n.init:00000000004013a3\n.init:00000000004013a6\n.init:00000000004013a8\n.init:00000000004013aa\n.init:00000000004013ae\n'
p328
tp329
sS'set_quoting_flags'
p330
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p331
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p332
S'TEST RDI,RDI\nMOV ECX,0x6092f0\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p333
S'48 85 ff\nb9 f0 92 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p334
S'.text:0000000000402f20\n.text:0000000000402f23\n.text:0000000000402f28\n.text:0000000000402f2c\n.text:0000000000402f2f\n.text:0000000000402f32\n'
p335
tp336
sS'realloc'
p337
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p338
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00609178)();\u000a  return pvVar1;\u000a}\u000a\u000a
p339
S'JMP qword ptr [0x00609178]\n'
p340
S'ff 25 f2 7a 20 00\n'
p341
S'.plt:0000000000401680\n'
p342
tp343
sS'__fprintf_chk'
p344
(S'\n__stdcall __fprintf_chk()\n'
p345
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_006091c8)();\u000a  return;\u000a}\u000a\u000a
p346
S'JMP qword ptr [0x006091c8]\n'
p347
S'ff 25 a2 7a 20 00\n'
p348
S'.plt:0000000000401720\n'
p349
tp350
sS'get_charset_aliases'
p351
(S'\n__stdcall get_charset_aliases()\n'
p352
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a    return \u000a           "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a           + 0xca;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00405864_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00405864_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00405864_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00405864_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00405864_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00405864_caseD_9;\u000a      case -1:\u000a        goto switchD_00405864_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_004058bd:\u000a  __s = \u000a        "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a        + 0xca;\u000aLAB_004058c3:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00405864_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_004058c3;\u000a  }\u000a  goto LAB_004058bd;\u000a}\u000a\u000a
p353
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x00609430]\nTEST R15,R15\nJNZ 0x004058d2\nMOV EDI,0x4075a4\nCALL 0x004013c0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405688\nCMP byte ptr [RBX],0x0\nJNZ 0x0040568d\nMOV EBX,0x4075b4\nMOV RDI,RBX\nCALL 0x004014f0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x004056a7\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x004056a9\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401620\nMOV R13,RAX\nTEST R13,R13\nJZ 0x004056fd\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x004015f0\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00405708\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00405725\nMOV R15D,0x406cf9\nJMP 0x004058cb\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004016d0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004058bd\nMOV ESI,0x40659f\nMOV EDI,EBP\nCALL 0x00401690\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405884\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00405850\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401450\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401450\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00405850\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401650\nMOV ESI,0x4075c3\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401570\nCMP EAX,0x2\nJL 0x004058a4\nMOV RDI,R12\nCALL 0x004014f0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004014f0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040582d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401680\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00405774\nJMP 0x0040588d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401620\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00405774\nJMP 0x0040588d\nMOV RDI,RBX\nCALL 0x00401480\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x004057b7\nJMP qword ptr [0x407468 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401480\nCMP EAX,-0x1\nJZ 0x004058a4\nCMP EAX,0xa\nJNZ 0x00405870\nJMP 0x00405850\nMOV EDI,EBP\nCALL 0x00401580\nJMP 0x004058bd\nMOV RDI,R15\nCALL 0x004013d0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x004058f0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004058bd\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x004058c3\nMOV R15D,0x406cf9\nMOV RDI,R13\nCALL 0x004013d0\nMOV qword ptr [0x00609430],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p354
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d c8 3d 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf a4 75 40 00\ne8 45 bd ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb b4 75 40 00\n48 89 df\ne8 5b be ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 69 bf ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 23 bf ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf f9 6c 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 9c bf ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 9f 65 40 00\n89 ef\ne8 46 bf ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 bb bc ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 ab bc ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 8f be ff ff\nbe c3 75 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 9a bd ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 09 bd ff ff\n49 89 c4\n48 89 ef\ne8 fe bc ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 66 be ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 e5 bd ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 28 bc ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 68 74 40 00\n48 89 df\ne8 08 bc ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 f5 bc ff ff\neb 30\n4c 89 ff\ne8 3b bb ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 44 00 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf f9 6c 40 00\n4c 89 ef\ne8 05 bb ff ff\n4c 89 3d 5e 3b 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p355
S'.text:0000000000405650\n.text:0000000000405651\n.text:0000000000405653\n.text:0000000000405655\n.text:0000000000405657\n.text:0000000000405659\n.text:000000000040565a\n.text:0000000000405661\n.text:0000000000405668\n.text:000000000040566b\n.text:0000000000405671\n.text:0000000000405676\n.text:000000000040567b\n.text:000000000040567e\n.text:0000000000405681\n.text:0000000000405683\n.text:0000000000405686\n.text:0000000000405688\n.text:000000000040568d\n.text:0000000000405690\n.text:0000000000405695\n.text:0000000000405698\n.text:000000000040569b\n.text:000000000040569d\n.text:00000000004056a2\n.text:00000000004056a5\n.text:00000000004056a7\n.text:00000000004056a9\n.text:00000000004056ad\n.text:00000000004056b2\n.text:00000000004056b7\n.text:00000000004056ba\n.text:00000000004056bd\n.text:00000000004056bf\n.text:00000000004056c2\n.text:00000000004056c5\n.text:00000000004056c8\n.text:00000000004056cd\n.text:00000000004056d0\n.text:00000000004056d3\n.text:00000000004056d6\n.text:00000000004056d8\n.text:00000000004056de\n.text:00000000004056e8\n.text:00000000004056ed\n.text:00000000004056f7\n.text:00000000004056fb\n.text:00000000004056fd\n.text:0000000000405703\n.text:0000000000405708\n.text:0000000000405712\n.text:0000000000405717\n.text:0000000000405721\n.text:0000000000405725\n.text:000000000040572a\n.text:000000000040572c\n.text:000000000040572f\n.text:0000000000405734\n.text:0000000000405736\n.text:0000000000405738\n.text:000000000040573e\n.text:0000000000405743\n.text:0000000000405745\n.text:000000000040574a\n.text:000000000040574d\n.text:0000000000405750\n.text:0000000000405756\n.text:000000000040575b\n.text:0000000000405760\n.text:0000000000405762\n.text:0000000000405767\n.text:000000000040576a\n.text:000000000040576f\n.text:0000000000405774\n.text:0000000000405779\n.text:000000000040577c\n.text:000000000040577f\n.text:0000000000405782\n.text:0000000000405785\n.text:0000000000405788\n.text:000000000040578d\n.text:0000000000405790\n.text:0000000000405795\n.text:0000000000405798\n.text:000000000040579d\n.text:00000000004057a0\n.text:00000000004057a5\n.text:00000000004057aa\n.text:00000000004057ad\n.text:00000000004057b2\n.text:00000000004057b7\n.text:00000000004057b9\n.text:00000000004057bc\n.text:00000000004057c1\n.text:00000000004057c6\n.text:00000000004057c8\n.text:00000000004057cb\n.text:00000000004057ce\n.text:00000000004057d1\n.text:00000000004057d6\n.text:00000000004057d9\n.text:00000000004057df\n.text:00000000004057e2\n.text:00000000004057e7\n.text:00000000004057ea\n.text:00000000004057ed\n.text:00000000004057f2\n.text:00000000004057f5\n.text:00000000004057fa\n.text:00000000004057ff\n.text:0000000000405802\n.text:0000000000405804\n.text:0000000000405808\n.text:000000000040580d\n.text:0000000000405812\n.text:0000000000405815\n.text:000000000040581a\n.text:000000000040581d\n.text:0000000000405822\n.text:0000000000405825\n.text:000000000040582b\n.text:000000000040582d\n.text:0000000000405832\n.text:0000000000405836\n.text:000000000040583b\n.text:000000000040583e\n.text:0000000000405841\n.text:0000000000405847\n.text:0000000000405850\n.text:0000000000405853\n.text:0000000000405858\n.text:000000000040585b\n.text:000000000040585e\n.text:0000000000405864\n.text:0000000000405870\n.text:0000000000405873\n.text:0000000000405878\n.text:000000000040587b\n.text:000000000040587d\n.text:0000000000405880\n.text:0000000000405882\n.text:0000000000405884\n.text:0000000000405886\n.text:000000000040588b\n.text:000000000040588d\n.text:0000000000405890\n.text:0000000000405895\n.text:0000000000405897\n.text:000000000040589c\n.text:000000000040589f\n.text:00000000004058a4\n.text:00000000004058a7\n.text:00000000004058ac\n.text:00000000004058b1\n.text:00000000004058b4\n.text:00000000004058b6\n.text:00000000004058bb\n.text:00000000004058bd\n.text:00000000004058c3\n.text:00000000004058c6\n.text:00000000004058cb\n.text:00000000004058d2\n.text:00000000004058d5\n.text:00000000004058dc\n.text:00000000004058dd\n.text:00000000004058df\n.text:00000000004058e1\n.text:00000000004058e3\n.text:00000000004058e5\n.text:00000000004058e6\n'
p356
tp357
sS'nl_langinfo'
p358
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p359
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00609158)();\u000a  return pcVar1;\u000a}\u000a\u000a
p360
S'JMP qword ptr [0x00609158]\n'
p361
S'ff 25 12 7b 20 00\n'
p362
S'.plt:0000000000401640\n'
p363
tp364
sS'x2realloc'
p365
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p366
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p367
S'MOV EDX,0x1\nJMP 0x00404f70\n'
p368
S'ba 01 00 00 00\neb 89\n'
p369
S'.text:0000000000404fe0\n.text:0000000000404fe5\n'
p370
tp371
sS'__mempcpy_chk'
p372
(S'\n__stdcall __mempcpy_chk()\n'
p373
V\u000avoid __mempcpy_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___mempcpy_chk_00609030)();\u000a  return;\u000a}\u000a\u000a
p374
S'JMP qword ptr [0x00609030]\n'
p375
S'ff 25 3a 7c 20 00\n'
p376
S'.plt:00000000004013f0\n'
p377
tp378
sS'strlen'
p379
(S'\n__stdcall strlen(char * __s)\n'
p380
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_006090b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p381
S'JMP qword ptr [0x006090b0]\n'
p382
S'ff 25 ba 7b 20 00\n'
p383
S'.plt:00000000004014f0\n'
p384
tp385
sS'memcmp'
p386
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p387
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_00609108)();\u000a  return iVar1;\u000a}\u000a\u000a
p388
S'JMP qword ptr [0x00609108]\n'
p389
S'ff 25 62 7b 20 00\n'
p390
S'.plt:00000000004015a0\n'
p391
tp392
sS'quotearg_n_style_mem'
p393
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p394
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p395
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00404000\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403dd0\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p396
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p397
S'.text:0000000000404060\n.text:0000000000404061\n.text:0000000000404063\n.text:0000000000404065\n.text:0000000000404066\n.text:000000000040406a\n.text:000000000040406d\n.text:0000000000404070\n.text:0000000000404072\n.text:0000000000404075\n.text:0000000000404078\n.text:000000000040407d\n.text:000000000040407f\n.text:0000000000404082\n.text:0000000000404085\n.text:0000000000404088\n.text:000000000040408d\n.text:0000000000404091\n.text:0000000000404092\n.text:0000000000404094\n.text:0000000000404096\n.text:0000000000404097\n'
p398
tp399
sS'_exit'
p400
(S'\n__stdcall _exit(int __status)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00609058)();\u000a  return;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x00609058]\n'
p403
S'ff 25 12 7c 20 00\n'
p404
S'.plt:0000000000401440\n'
p405
tp406
sS'bkm_scale_by_power'
p407
(S'\n__stdcall bkm_scale_by_power(intmax_t * x)\n'
p408
V\u000astrtol_error bkm_scale_by_power(intmax_t *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p409
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x004053a1\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00405320\nOR EBP,EAX\nDEC EBX\nJNZ 0x00405390\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p410
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 85 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p411
S'.text:0000000000405370\n.text:0000000000405371\n.text:0000000000405373\n.text:0000000000405375\n.text:0000000000405376\n.text:0000000000405377\n.text:0000000000405379\n.text:000000000040537c\n.text:000000000040537f\n.text:0000000000405381\n.text:0000000000405383\n.text:0000000000405385\n.text:0000000000405390\n.text:0000000000405393\n.text:0000000000405396\n.text:000000000040539b\n.text:000000000040539d\n.text:000000000040539f\n.text:00000000004053a1\n.text:00000000004053a3\n.text:00000000004053a7\n.text:00000000004053a8\n.text:00000000004053aa\n.text:00000000004053ac\n.text:00000000004053ad\n'
p412
tp413
sS'nextarg'
p414
(S'\n__stdcall nextarg(char * str)\n'
p415
V\u000a_Bool nextarg(char *str)\u000a\u000a{\u000a  char **ppcVar1;\u000a  int iVar2;\u000a  bool bVar3;\u000a  \u000a  ppcVar1 = args;\u000a  if (*args == (char *)0x0) {\u000a    bVar3 = false;\u000a  }\u000a  else {\u000a    iVar2 = strcmp(*args,str);\u000a    bVar3 = iVar2 == 0;\u000a    args = ppcVar1 + (ulong)bVar3;\u000a  }\u000a  return (_Bool)bVar3;\u000a}\u000a\u000a
p416
S'PUSH RBX\nMOV RAX,RDI\nMOV RBX,qword ptr [0x006092d0]\nMOV RDI,qword ptr [RBX]\nTEST RDI,RDI\nJZ 0x00401f61\nMOV RSI,RAX\nCALL 0x004015e0\nMOV ECX,EAX\nXOR EAX,EAX\nTEST ECX,ECX\nSETZ AL\nLEA RCX,[RBX + RAX*0x8]\nMOV qword ptr [0x006092d0],RCX\nJMP 0x00401f63\nXOR EAX,EAX\nPOP RBX\nRET\n'
p417
S'53\n48 89 f8\n48 8b 1d 95 73 20 00\n48 8b 3b\n48 85 ff\n74 1e\n48 89 c6\ne8 95 f6 ff ff\n89 c1\n31 c0\n85 c9\n0f 94 c0\n48 8d 0c c3\n48 89 0d 71 73 20 00\neb 02\n31 c0\n5b\nc3\n'
p418
S'.text:0000000000401f30\n.text:0000000000401f31\n.text:0000000000401f34\n.text:0000000000401f3b\n.text:0000000000401f3e\n.text:0000000000401f41\n.text:0000000000401f43\n.text:0000000000401f46\n.text:0000000000401f4b\n.text:0000000000401f4d\n.text:0000000000401f4f\n.text:0000000000401f51\n.text:0000000000401f54\n.text:0000000000401f58\n.text:0000000000401f5f\n.text:0000000000401f61\n.text:0000000000401f63\n.text:0000000000401f64\n'
p419
tp420
sS'xrealloc'
p421
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p422
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p423
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00404f57\nTEST RBX,RBX\nJNZ 0x00404f57\nCALL 0x004013d0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401680\nTEST RBX,RBX\nJZ 0x00404f69\nTEST RAX,RAX\nJZ 0x00404f6b\nPOP RBX\nRET\nCALL 0x00405090\n'
p424
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 7d c4 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 21 c7 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p425
S'.text:0000000000404f40\n.text:0000000000404f41\n.text:0000000000404f44\n.text:0000000000404f47\n.text:0000000000404f49\n.text:0000000000404f4c\n.text:0000000000404f4e\n.text:0000000000404f53\n.text:0000000000404f55\n.text:0000000000404f56\n.text:0000000000404f57\n.text:0000000000404f5a\n.text:0000000000404f5f\n.text:0000000000404f62\n.text:0000000000404f64\n.text:0000000000404f67\n.text:0000000000404f69\n.text:0000000000404f6a\n.text:0000000000404f6b\n'
p426
tp427
sS'close_stdout'
p428
(S'\n__stdcall close_stdout()\n'
p429
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402b87;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x4065b4,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402b87:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p430
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x00609268]\nCALL 0x00405550\nTEST EAX,EAX\nJZ 0x00402b87\nCMP byte ptr [0x006092e0],0x0\nJZ 0x00402b9c\nCALL 0x00401420\nCMP dword ptr [RAX],0x20\nJNZ 0x00402b9c\nMOV RDI,qword ptr [0x006092c0]\nCALL 0x00405550\nTEST EAX,EAX\nJNZ 0x00402be1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x4065a4\nMOV EDX,0x5\nCALL 0x004014c0\nMOV R14,RAX\nMOV RBX,qword ptr [0x006092d8]\nCALL 0x00401420\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x00402bec\nXOR EDI,EDI\nMOV EDX,0x4065b4\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004016c0\nMOV EDI,dword ptr [0x00609200]\nCALL 0x00401440\nMOV EDI,dword ptr [0x00609200]\nCALL 0x00401440\nMOV RDI,RBX\nCALL 0x00404160\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x4065b0\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004016c0\nMOV EDI,dword ptr [0x00609200]\nCALL 0x00401440\n'
p431
S'55\n41 56\n53\n48 8b 3d fd 66 20 00\ne8 e0 29 00 00\n85 c0\n74 13\n80 3d 65 67 20 00 00\n74 1f\ne8 9e e8 ff ff\n83 38 20\n75 15\n48 8b 3d 32 67 20 00\ne8 bd 29 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe a4 65 40 00\nba 05 00 00 00\ne8 13 e9 ff ff\n49 89 c6\n48 8b 1d 21 67 20 00\ne8 64 e8 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba b4 65 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 ea ea ff ff\n8b 3d 24 66 20 00\ne8 5f e8 ff ff\n8b 3d 19 66 20 00\ne8 54 e8 ff ff\n48 89 df\ne8 6c 15 00 00\n48 89 c1\n31 ff\nba b0 65 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 b6 ea ff ff\n8b 3d f0 65 20 00\ne8 2b e8 ff ff\n'
p432
S'.text:0000000000402b60\n.text:0000000000402b61\n.text:0000000000402b63\n.text:0000000000402b64\n.text:0000000000402b6b\n.text:0000000000402b70\n.text:0000000000402b72\n.text:0000000000402b74\n.text:0000000000402b7b\n.text:0000000000402b7d\n.text:0000000000402b82\n.text:0000000000402b85\n.text:0000000000402b87\n.text:0000000000402b8e\n.text:0000000000402b93\n.text:0000000000402b95\n.text:0000000000402b97\n.text:0000000000402b98\n.text:0000000000402b9a\n.text:0000000000402b9b\n.text:0000000000402b9c\n.text:0000000000402b9e\n.text:0000000000402ba3\n.text:0000000000402ba8\n.text:0000000000402bad\n.text:0000000000402bb0\n.text:0000000000402bb7\n.text:0000000000402bbc\n.text:0000000000402bbf\n.text:0000000000402bc1\n.text:0000000000402bc3\n.text:0000000000402bc5\n.text:0000000000402bca\n.text:0000000000402bcc\n.text:0000000000402bce\n.text:0000000000402bd1\n.text:0000000000402bd6\n.text:0000000000402bdc\n.text:0000000000402be1\n.text:0000000000402be7\n.text:0000000000402bec\n.text:0000000000402bef\n.text:0000000000402bf4\n.text:0000000000402bf7\n.text:0000000000402bf9\n.text:0000000000402bfe\n.text:0000000000402c00\n.text:0000000000402c02\n.text:0000000000402c05\n.text:0000000000402c0a\n.text:0000000000402c10\n'
p433
tp434
sS'version_etc_ar'
p435
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p436
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p437
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00404d50\nJMP 0x004049e0\n'
p438
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p439
S'.text:0000000000404d40\n.text:0000000000404d47\n.text:0000000000404d50\n.text:0000000000404d56\n.text:0000000000404d5a\n.text:0000000000404d5c\n'
p440
tp441
sS'c_isxdigit'
p442
(S'\n__stdcall c_isxdigit()\n'
p443
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p444
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x0040552b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p445
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p446
S'.text:0000000000405510\n.text:0000000000405513\n.text:0000000000405516\n.text:0000000000405518\n.text:0000000000405522\n.text:0000000000405524\n.text:0000000000405527\n.text:000000000040552a\n.text:000000000040552b\n.text:000000000040552d\n'
p447
tp448
sS'__libc_csu_fini'
p449
(S'\n__stdcall __libc_csu_fini()\n'
p450
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p451
S'RET\n'
p452
S'f3 c3\n'
p453
S'.text:0000000000405aa0\n'
p454
tp455
sS'eval'
p456
(S'\n__stdcall eval()\n'
p457
V\u000aVALUE * eval(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  VALUE *v;\u000a  VALUE *v_00;\u000a  char in_DIL;\u000a  \u000a  v = eval1();\u000a  do {\u000a    _Var1 = nextarg("|");\u000a    if (_Var1 == false) {\u000a      return v;\u000a    }\u000a    while( true ) {\u000a      if (in_DIL != 0) {\u000a        null(v);\u000a      }\u000a      v_00 = eval1();\u000a      _Var1 = null(v);\u000a      if (_Var1 == false) break;\u000a      freev(v);\u000a      _Var1 = null(v_00);\u000a      v = v_00;\u000a      if (_Var1 != false) {\u000a        freev(v_00);\u000a        v = int_value(0);\u000a      }\u000a      _Var1 = nextarg("|");\u000a      if (_Var1 == false) {\u000a        return v;\u000a      }\u000a    }\u000a    freev(v_00);\u000a  } while( true );\u000a}\u000a\u000a
p458
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDI\nMOVZX EDI,R14B\nCALL 0x00401e90\nMOV RBX,RAX\nJMP 0x00401d08\nMOV RDI,RBX\nCALL 0x00401f70\nMOV RDI,RBP\nCALL 0x00401de0\nTEST AL,AL\nJZ 0x00401ceb\nMOV RDI,RBP\nCALL 0x00401f70\nXOR EDI,EDI\nCALL 0x00401f90\nMOV RBP,RAX\nMOV EDI,0x40651f\nCALL 0x00401f30\nTEST AL,AL\nMOV RBX,RBP\nJNZ 0x00401d16\nJMP 0x00401d51\nMOV RDI,RBP\nCALL 0x00401f70\nMOV EDI,0x40651f\nCALL 0x00401f30\nTEST AL,AL\nJZ 0x00401d4e\nTEST R14B,R14B\nJZ 0x00401d30\nMOV RDI,RBX\nCALL 0x00401de0\nJMP 0x00401d32\nXOR EAX,EAX\nMOVZX EDI,AL\nCALL 0x00401e90\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00401de0\nTEST AL,AL\nJZ 0x00401d00\nJMP 0x00401cc5\nMOV RBP,RBX\nMOV RAX,RBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p459
S'55\n41 56\n53\n41 89 fe\n41 0f b6 fe\ne8 d0 01 00 00\n48 89 c3\neb 43\n48 89 df\ne8 a3 02 00 00\n48 89 ef\ne8 0b 01 00 00\n84 c0\n74 12\n48 89 ef\ne8 8f 02 00 00\n31 ff\ne8 a8 02 00 00\n48 89 c5\nbf 1f 65 40 00\ne8 3b 02 00 00\n84 c0\n48 89 eb\n75 1a\neb 53\n48 89 ef\ne8 68 02 00 00\nbf 1f 65 40 00\ne8 1e 02 00 00\n84 c0\n74 38\n45 84 f6\n74 15\n48 89 df\ne8 bd 00 00 00\neb 0d\n31 c0\n0f b6 f8\ne8 56 01 00 00\n48 89 c5\n48 89 df\ne8 9b 00 00 00\n84 c0\n74 b7\ne9 77 ff ff ff\n48 89 dd\n48 89 e8\n5b\n41 5e\n5d\nc3\n'
p460
S'.text:0000000000401cb0\n.text:0000000000401cb1\n.text:0000000000401cb3\n.text:0000000000401cb4\n.text:0000000000401cb7\n.text:0000000000401cbb\n.text:0000000000401cc0\n.text:0000000000401cc3\n.text:0000000000401cc5\n.text:0000000000401cc8\n.text:0000000000401ccd\n.text:0000000000401cd0\n.text:0000000000401cd5\n.text:0000000000401cd7\n.text:0000000000401cd9\n.text:0000000000401cdc\n.text:0000000000401ce1\n.text:0000000000401ce3\n.text:0000000000401ce8\n.text:0000000000401ceb\n.text:0000000000401cf0\n.text:0000000000401cf5\n.text:0000000000401cf7\n.text:0000000000401cfa\n.text:0000000000401cfc\n.text:0000000000401d00\n.text:0000000000401d03\n.text:0000000000401d08\n.text:0000000000401d0d\n.text:0000000000401d12\n.text:0000000000401d14\n.text:0000000000401d16\n.text:0000000000401d19\n.text:0000000000401d1b\n.text:0000000000401d1e\n.text:0000000000401d23\n.text:0000000000401d30\n.text:0000000000401d32\n.text:0000000000401d35\n.text:0000000000401d3a\n.text:0000000000401d3d\n.text:0000000000401d40\n.text:0000000000401d45\n.text:0000000000401d47\n.text:0000000000401d49\n.text:0000000000401d4e\n.text:0000000000401d51\n.text:0000000000401d54\n.text:0000000000401d55\n.text:0000000000401d57\n.text:0000000000401d58\n'
p461
tp462
sS'docolon'
p463
(S'\n__stdcall docolon(VALUE * sv, VALUE * pv)\n'
p464
V\u000aVALUE * docolon(VALUE *sv,VALUE *pv)\u000a\u000a{\u000a  int iVar1;\u000a  size_t __length;\u000a  char *__s;\u000a  VALUE *pVVar2;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  ulong i;\u000a  re_registers re_regs;\u000a  char fastmap [256];\u000a  uint local_170;\u000a  undefined4 local_168;\u000a  undefined4 uStack356;\u000a  undefined4 local_160;\u000a  undefined4 uStack348;\u000a  undefined4 local_158;\u000a  undefined4 uStack340;\u000a  undefined4 uStack336;\u000a  undefined4 uStack332;\u000a  char *local_138;\u000a  uchar *local_130;\u000a  size_t local_128;\u000a  byte local_120;\u000a  char local_118 [264];\u000a  \u000a  tostring(sv);\u000a  tostring(pv);\u000a  local_170 = 0;\u000a  local_168 = 0;\u000a  uStack356 = 0;\u000a  local_160 = 0;\u000a  uStack348 = 0;\u000a  local_158 = 0;\u000a  uStack340 = 0;\u000a  uStack336 = 0;\u000a  uStack332 = 0;\u000a  local_138 = local_118;\u000a  local_130 = (uchar *)0x0;\u000a  re_syntax_options = 0x2c6;\u000a  __s = (char *)pv->u;\u000a  __length = strlen(__s);\u000a  __s = re_compile_pattern(__s,__length,(re_pattern_buffer *)&local_158);\u000a  if (__s != (char *)0x0) {\u000a    error(2,0,0x4065b4);\u000a  }\u000a  local_120 = local_120 & 0x7f;\u000a  __s = (char *)sv->u;\u000a  __length = strlen(__s);\u000a  iVar1 = re_match((re_pattern_buffer *)&local_158,__s,(int)__length,0,(re_registers *)&local_170);\u000a  if (iVar1 < 0) {\u000a    if (iVar1 == -2) {\u000a      puVar3 = (uint *)__errno_location();\u000a      pVVar2 = (VALUE *)(ulong)*puVar3;\u000a    }\u000a    else {\u000a      pVVar2 = (VALUE *)0x4b;\u000a      if (iVar1 == -1) {\u000a        if (local_128 == 0) {\u000a          i = 0;\u000a          goto LAB_00402934;\u000a        }\u000a        __s = \u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca;\u000a        goto LAB_00402908;\u000a      }\u000a    }\u000a    uVar4 = dcgettext(0,"error in regular expression matcher",5);\u000a    error(3,pVVar2,uVar4,uVar4);\u000a  }\u000a  else {\u000a    if (local_128 == 0) {\u000a      i = SEXT48(iVar1);\u000aLAB_00402934:\u000a      pVVar2 = int_value(i);\u000a      goto joined_r0x00402976;\u000a    }\u000a    *(undefined *)(sv->u + (long)*(int *)(CONCAT44(uStack348,local_160) + 4)) = 0;\u000a    __s = (char *)((long)*(int *)(CONCAT44(uStack356,local_168) + 4) + sv->u);\u000aLAB_00402908:\u000a    pVVar2 = str_value(__s);\u000a  }\u000ajoined_r0x00402976:\u000a  if (local_170 != 0) {\u000a    free((void *)CONCAT44(uStack356,local_168));\u000a    free((void *)CONCAT44(uStack348,local_160));\u000a  }\u000a  local_138 = (char *)0x0;\u000a  regfree((regex_t *)&local_158);\u000a  return pVVar2;\u000a}\u000a\u000a
p465
S'PUSH R14\nPUSH RBX\nSUB RSP,0x168\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x00402270\nMOV RDI,RBX\nCALL 0x00402270\nMOV dword ptr [RSP + 0x8],0x0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nLEA RAX,[RSP + 0x60]\nMOV qword ptr [RSP + 0x40],RAX\nMOV qword ptr [RSP + 0x48],0x0\nMOV qword ptr [0x00609280],0x2c6\nMOV RBX,qword ptr [RBX + 0x8]\nMOV RDI,RBX\nCALL 0x004014f0\nLEA RDX,[RSP + 0x20]\nMOV RDI,RBX\nMOV RSI,RAX\nCALL 0x00401730\nMOV RCX,RAX\nTEST RCX,RCX\nJZ 0x004028b7\nMOV EDI,0x2\nXOR ESI,ESI\nMOV EDX,0x4065b4\nXOR EAX,EAX\nCALL 0x004016c0\nAND byte ptr [RSP + 0x58],0x7f\nMOV RBX,qword ptr [R14 + 0x8]\nMOV RDI,RBX\nCALL 0x004014f0\nLEA RDI,[RSP + 0x20]\nLEA R8,[RSP + 0x8]\nXOR ECX,ECX\nMOV RSI,RBX\nMOV EDX,EAX\nCALL 0x00401410\nTEST EAX,EAX\nJS 0x0040290f\nCMP qword ptr [RSP + 0x50],0x0\nJZ 0x00402931\nMOV RAX,qword ptr [R14 + 0x8]\nMOV RCX,qword ptr [RSP + 0x18]\nMOVSXD RCX,dword ptr [RCX + 0x4]\nMOV byte ptr [RAX + RCX*0x1],0x0\nMOV RAX,qword ptr [RSP + 0x10]\nMOVSXD RDI,dword ptr [RAX + 0x4]\nADD RDI,qword ptr [R14 + 0x8]\nCALL 0x004029c0\nJMP 0x00402939\nCMP EAX,-0x2\nJZ 0x00402945\nMOV EBX,0x4b\nCMP EAX,-0x1\nJNZ 0x0040294c\nCMP qword ptr [RSP + 0x50],0x0\nJZ 0x004029ad\nMOV EDI,0x406cf9\nJMP 0x00402908\nMOVSXD RDI,EAX\nCALL 0x00401f90\nMOV RBX,RAX\nCMP dword ptr [RSP + 0x8],0x0\nJNZ 0x00402978\nJMP 0x0040298c\nCALL 0x00401420\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40657d\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV EDI,0x3\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x004016c0\nCMP dword ptr [RSP + 0x8],0x0\nJZ 0x0040298c\nMOV RDI,qword ptr [RSP + 0x10]\nCALL 0x004013d0\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x004013d0\nMOV qword ptr [RSP + 0x40],0x0\nLEA RDI,[RSP + 0x20]\nCALL 0x004014d0\nMOV RAX,RBX\nADD RSP,0x168\nPOP RBX\nPOP R14\nRET\nXOR EDI,EDI\nJMP 0x00402934\n'
p466
S'41 56\n53\n48 81 ec 68 01 00 00\n48 89 f3\n49 89 fe\ne8 2b fa ff ff\n48 89 df\ne8 23 fa ff ff\nc7 44 24 08 00 00 00 00\n0f 57 c0\n0f 11 44 24 10\n0f 29 44 24 20\n48 8d 44 24 60\n48 89 44 24 40\n48 c7 44 24 48 00 00 00 00\n48 c7 05 00 6a 20 00 c6 02 00 00\n48 8b 5b 08\n48 89 df\ne8 64 ec ff ff\n48 8d 54 24 20\n48 89 df\n48 89 c6\ne8 94 ee ff ff\n48 89 c1\n48 85 c9\n74 13\nbf 02 00 00 00\n31 f6\nba b4 65 40 00\n31 c0\ne8 09 ee ff ff\n80 64 24 58 7f\n49 8b 5e 08\n48 89 df\ne8 28 ec ff ff\n48 8d 7c 24 20\n4c 8d 44 24 08\n31 c9\n48 89 de\n89 c2\ne8 32 eb ff ff\n85 c0\n78 2d\n48 83 7c 24 50 00\n74 47\n49 8b 46 08\n48 8b 4c 24 18\n48 63 49 04\nc6 04 08 00\n48 8b 44 24 10\n48 63 78 04\n49 03 7e 08\ne8 b3 00 00 00\neb 2a\n83 f8 fe\n74 31\nbb 4b 00 00 00\n83 f8 ff\n75 2e\n48 83 7c 24 50 00\n0f 84 83 00 00 00\nbf f9 6c 40 00\neb d7\n48 63 f8\ne8 57 f6 ff ff\n48 89 c3\n83 7c 24 08 00\n75 35\neb 47\ne8 d6 ea ff ff\n8b 18\n31 ff\nbe 7d 65 40 00\nba 05 00 00 00\ne8 63 eb ff ff\n48 89 c1\nbf 03 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 4f ed ff ff\n83 7c 24 08 00\n74 14\n48 8b 7c 24 10\ne8 4e ea ff ff\n48 8b 7c 24 18\ne8 44 ea ff ff\n48 c7 44 24 40 00 00 00 00\n48 8d 7c 24 20\ne8 31 eb ff ff\n48 89 d8\n48 81 c4 68 01 00 00\n5b\n41 5e\nc3\n31 ff\neb 83\n'
p467
S'.text:0000000000402830\n.text:0000000000402832\n.text:0000000000402833\n.text:000000000040283a\n.text:000000000040283d\n.text:0000000000402840\n.text:0000000000402845\n.text:0000000000402848\n.text:000000000040284d\n.text:0000000000402855\n.text:0000000000402858\n.text:000000000040285d\n.text:0000000000402862\n.text:0000000000402867\n.text:000000000040286c\n.text:0000000000402875\n.text:0000000000402880\n.text:0000000000402884\n.text:0000000000402887\n.text:000000000040288c\n.text:0000000000402891\n.text:0000000000402894\n.text:0000000000402897\n.text:000000000040289c\n.text:000000000040289f\n.text:00000000004028a2\n.text:00000000004028a4\n.text:00000000004028a9\n.text:00000000004028ab\n.text:00000000004028b0\n.text:00000000004028b2\n.text:00000000004028b7\n.text:00000000004028bc\n.text:00000000004028c0\n.text:00000000004028c3\n.text:00000000004028c8\n.text:00000000004028cd\n.text:00000000004028d2\n.text:00000000004028d4\n.text:00000000004028d7\n.text:00000000004028d9\n.text:00000000004028de\n.text:00000000004028e0\n.text:00000000004028e2\n.text:00000000004028e8\n.text:00000000004028ea\n.text:00000000004028ee\n.text:00000000004028f3\n.text:00000000004028f7\n.text:00000000004028fb\n.text:0000000000402900\n.text:0000000000402904\n.text:0000000000402908\n.text:000000000040290d\n.text:000000000040290f\n.text:0000000000402912\n.text:0000000000402914\n.text:0000000000402919\n.text:000000000040291c\n.text:000000000040291e\n.text:0000000000402924\n.text:000000000040292a\n.text:000000000040292f\n.text:0000000000402931\n.text:0000000000402934\n.text:0000000000402939\n.text:000000000040293c\n.text:0000000000402941\n.text:0000000000402943\n.text:0000000000402945\n.text:000000000040294a\n.text:000000000040294c\n.text:000000000040294e\n.text:0000000000402953\n.text:0000000000402958\n.text:000000000040295d\n.text:0000000000402960\n.text:0000000000402965\n.text:0000000000402967\n.text:0000000000402969\n.text:000000000040296c\n.text:0000000000402971\n.text:0000000000402976\n.text:0000000000402978\n.text:000000000040297d\n.text:0000000000402982\n.text:0000000000402987\n.text:000000000040298c\n.text:0000000000402995\n.text:000000000040299a\n.text:000000000040299f\n.text:00000000004029a2\n.text:00000000004029a9\n.text:00000000004029aa\n.text:00000000004029ac\n.text:00000000004029ad\n.text:00000000004029af\n'
p468
tp469
sS'abort'
p470
(S'\n__stdcall abort()\n'
p471
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00609038)();\u000a  return;\u000a}\u000a\u000a
p472
S'JMP qword ptr [0x00609038]\n'
p473
S'ff 25 32 7c 20 00\n'
p474
S'.plt:0000000000401400\n'
p475
tp476
sS'mpz_mul'
p477
(S'\n__stdcall mpz_mul(intmax_t * r, intmax_t * a0, intmax_t * b0)\n'
p478
V\u000avoid mpz_mul(intmax_t *r,intmax_t *a0,intmax_t *b0)\u000a\u000a{\u000a  long lVar1;\u000a  long *extraout_RDX;\u000a  long *extraout_RDX_00;\u000a  long *plVar2;\u000a  long *plVar3;\u000a  \u000a  plVar2 = (long *)*a0;\u000a  lVar1 = *b0;\u000a  if ((plVar2 != (long *)0x0) && (lVar1 != 0)) {\u000a    if ((uint)((ulong)(lVar1 * (long)plVar2) >> 0x3f) !=\u000a        ((uint)((ulong)lVar1 >> 0x20) ^ (uint)((ulong)plVar2 >> 0x20)) >> 0x1f) {\u000a      plVar3 = (long *)&DAT_0000002a;\u000a      integer_overflow();\u000a      if ((*plVar2 != -0x8000000000000000) || (*extraout_RDX != -1)) {\u000a        *plVar3 = *plVar2 / *extraout_RDX;\u000a        return;\u000a      }\u000a      plVar3 = (long *)&DAT_0000002f;\u000a      integer_overflow();\u000a      if ((*plVar2 == -0x8000000000000000) && (*extraout_RDX_00 == -1)) {\u000a        *plVar3 = 0;\u000a        return;\u000a      }\u000a      *plVar3 = *plVar2 % *extraout_RDX_00;\u000a      return;\u000a    }\u000a  }\u000a  *r = lVar1 * (long)plVar2;\u000a  return;\u000a}\u000a\u000a
p479
S'MOV RSI,qword ptr [RSI]\nMOV RCX,qword ptr [RDX]\nMOV RAX,RCX\nIMUL RAX,RSI\nTEST RSI,RSI\nJZ 0x00402539\nTEST RCX,RCX\nJZ 0x00402539\nMOV RDX,RAX\nSHR RDX,0x3f\nXOR RCX,RSI\nSHR RCX,0x3f\nCMP EDX,ECX\nJNZ 0x0040253d\nMOV qword ptr [RDI],RAX\nRET\nPUSH RAX\nMOV EDI,0x2a\nCALL 0x00402ad0\nNOP dword ptr [RAX + RAX*0x1]\n'
p480
S'48 8b 36\n48 8b 0a\n48 89 c8\n48 0f af c6\n48 85 f6\n74 17\n48 85 c9\n74 12\n48 89 c2\n48 c1 ea 3f\n48 31 f1\n48 c1 e9 3f\n39 ca\n75 04\n48 89 07\nc3\n50\nbf 2a 00 00 00\ne8 88 05 00 00\n0f 1f 84 00 00 00 00 00\n'
p481
S'.text:0000000000402510\n.text:0000000000402513\n.text:0000000000402516\n.text:0000000000402519\n.text:000000000040251d\n.text:0000000000402520\n.text:0000000000402522\n.text:0000000000402525\n.text:0000000000402527\n.text:000000000040252a\n.text:000000000040252e\n.text:0000000000402531\n.text:0000000000402535\n.text:0000000000402537\n.text:0000000000402539\n.text:000000000040253c\n.text:000000000040253d\n.text:000000000040253e\n.text:0000000000402543\n.text:0000000000402548\n'
p482
tp483
sS'xstrtoimax'
p484
(S'\n__stdcall xstrtoimax(char * s, char * * ptr, intmax_t * val, char * valid_suffixes)\n'
p485
V\u000astrtol_error xstrtoimax(char *s,char **ptr,intmax_t *val,char *valid_suffixes)\u000a\u000a{\u000a  char cVar1;\u000a  strtol_error sVar2;\u000a  int *piVar3;\u000a  char *pcVar4;\u000a  char *pcVar5;\u000a  long lVar6;\u000a  char *__s;\u000a  char **__endptr;\u000a  strtol_error sVar7;\u000a  strtol_error sVar8;\u000a  intmax_t local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)");\u000a  }\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  piVar3 = __errno_location();\u000a  *piVar3 = 0;\u000a  local_40 = strtoimax(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar1 = **__endptr;\u000a    if (cVar1 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar4 = strchr(__s,(int)cVar1);\u000a    if (pcVar4 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_40 = 1;\u000a    sVar7 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar3 == 0) {\u000a      sVar7 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar3 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar7 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar8 = sVar7;\u000a    if (__s == (char *)0x0) goto LAB_004052e4;\u000a  }\u000a  pcVar4 = *__endptr;\u000a  sVar8 = sVar7;\u000a  if (*pcVar4 == 0) goto LAB_004052e4;\u000a  pcVar5 = strchr(__s,(int)*pcVar4);\u000a  if (pcVar5 == (char *)0x0) goto switchD_004051f9_caseD_43;\u000a  pcVar5 = strchr(__s,0x30);\u000a  if (pcVar5 == (char *)0x0) {\u000aLAB_004051d7:\u000a    lVar6 = 1;\u000a  }\u000a  else {\u000a    cVar1 = pcVar4[1];\u000a    if ((cVar1 == 'B') || (cVar1 == 'D')) {\u000a      lVar6 = 2;\u000a    }\u000a    else {\u000a      if (cVar1 != 'i') goto LAB_004051d7;\u000a      lVar6 = (ulong)(pcVar4[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar2 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_004052c1;\u000a  default:\u000aswitchD_004051f9_caseD_43:\u000a    *(intmax_t *)valid_suffixes = local_40;\u000a    return sVar7 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'P':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'Y':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'Z':\u000a    sVar2 = bkm_scale_by_power(&local_40);\u000a    break;\u000a  case 'b':\u000a    goto LAB_004052c1;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_004052c1:\u000a    sVar2 = bkm_scale(&local_40);\u000a  }\u000a  pcVar4 = *__endptr;\u000a  *__endptr = pcVar4 + lVar6;\u000a  sVar8 = sVar2 | sVar7 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar4[lVar6] == 0) {\u000a    sVar8 = sVar2 | sVar7;\u000a  }\u000aLAB_004052e4:\u000a  *(intmax_t *)valid_suffixes = local_40;\u000a  return sVar8;\u000a}\u000a\u000a
p486
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R13,R8\nMOV R14,RCX\nMOV EBP,EDX\nMOV R15,RDI\nCMP EBP,0x25\nJNC 0x004052fe\nTEST RSI,RSI\nLEA R12,[RSP + 0x10]\nCMOVNZ R12,RSI\nCALL 0x00401420\nMOV RBX,RAX\nMOV dword ptr [RBX],0x0\nMOV RDI,R15\nMOV RSI,R12\nMOV EDX,EBP\nCALL 0x004013e0\nMOV qword ptr [RSP + 0x8],RAX\nMOV RAX,qword ptr [R12]\nCMP RAX,R15\nJZ 0x0040513c\nMOV EAX,dword ptr [RBX]\nTEST EAX,EAX\nJZ 0x00405175\nMOV R15D,0x4\nCMP EAX,0x22\nJNZ 0x004052ec\nMOV R15D,0x1\nTEST R13,R13\nJNZ 0x00405181\nJMP 0x004052e4\nMOV R15D,0x4\nTEST R13,R13\nJZ 0x004052ec\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x004052ec\nMOV RDI,R13\nCALL 0x00401520\nTEST RAX,RAX\nJZ 0x004052ec\nMOV qword ptr [RSP + 0x8],0x1\nXOR R15D,R15D\nJMP 0x00405181\nXOR R15D,R15D\nTEST R13,R13\nJZ 0x004052e4\nMOV RBX,qword ptr [R12]\nMOVSX ESI,byte ptr [RBX]\nTEST ESI,ESI\nJZ 0x004052e4\nMOV RDI,R13\nCALL 0x00401520\nTEST RAX,RAX\nJZ 0x00405214\nMOV ESI,0x30\nMOV RDI,R13\nCALL 0x00401520\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x004051d7\nMOVSX EAX,byte ptr [RBX + 0x1]\nCMP EAX,0x42\nJZ 0x004051de\nCMP EAX,0x44\nJZ 0x004051de\nCMP EAX,0x69\nJNZ 0x004051d7\nXOR EAX,EAX\nCMP byte ptr [RBX + 0x2],0x42\nSETZ AL\nLEA RBX,[RAX + RAX*0x1 + 0x1]\nJMP 0x004051e8\nMOV EBX,0x1\nJMP 0x004051e8\nMOV ESI,0x3e8\nMOV EBX,0x2\nMOV RAX,qword ptr [R12]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00405214\nXOR EAX,EAX\nJMP qword ptr [0x406f40 + RCX*0x8]\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x3\nCALL 0x00405370\nJMP 0x004052c6\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [R14],RAX\nOR R15D,0x2\nJMP 0x004052ec\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x1\nCALL 0x00405370\nJMP 0x004052c6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x2\nCALL 0x00405370\nJMP 0x004052c6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x4\nCALL 0x00405370\nJMP 0x004052c6\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x400\nJMP 0x004052c1\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x6\nCALL 0x00405370\nJMP 0x004052c6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x5\nCALL 0x00405370\nJMP 0x004052c6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x8\nCALL 0x00405370\nJMP 0x004052c6\nLEA RDI,[RSP + 0x8]\nMOV EDX,0x7\nCALL 0x00405370\nJMP 0x004052c6\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x200\nJMP 0x004052c1\nLEA RDI,[RSP + 0x8]\nMOV ESI,0x2\nCALL 0x00405320\nOR EAX,R15D\nMOV RCX,qword ptr [R12]\nLEA RDX,[RCX + RBX*0x1]\nMOV qword ptr [R12],RDX\nMOV R15D,EAX\nOR R15D,0x2\nCMP byte ptr [RCX + RBX*0x1],0x0\nCMOVZ R15D,EAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [R14],RAX\nMOV EAX,R15D\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x4070f0\nMOV ESI,0x407116\nMOV EDX,0x60\nMOV ECX,0x407126\nCALL 0x00401550\n'
p487
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c5\n49 89 ce\n89 d5\n49 89 ff\n83 fd 25\n0f 83 1c 02 00 00\n48 85 f6\n4c 8d 64 24 10\n4c 0f 45 e6\ne8 2d c3 ff ff\n48 89 c3\nc7 03 00 00 00 00\n4c 89 ff\n4c 89 e6\n89 ea\ne8 d7 c2 ff ff\n48 89 44 24 08\n49 8b 04 24\n4c 39 f8\n74 25\n8b 03\n85 c0\n74 58\n41 bf 04 00 00 00\n83 f8 22\n0f 85 c0 01 00 00\n41 bf 01 00 00 00\n4d 85 ed\n75 4a\ne9 a8 01 00 00\n41 bf 04 00 00 00\n4d 85 ed\n0f 84 a1 01 00 00\n0f be 30\n85 f6\n0f 84 96 01 00 00\n4c 89 ef\ne8 c2 c3 ff ff\n48 85 c0\n0f 84 85 01 00 00\n48 c7 44 24 08 01 00 00 00\n45 31 ff\neb 0c\n45 31 ff\n4d 85 ed\n0f 84 63 01 00 00\n49 8b 1c 24\n0f be 33\n85 f6\n0f 84 54 01 00 00\n4c 89 ef\ne8 88 c3 ff ff\n48 85 c0\n74 77\nbe 30 00 00 00\n4c 89 ef\ne8 76 c3 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 43 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7b 02 42\n0f 94 c0\n48 8d 5c 00 01\neb 11\nbb 01 00 00 00\neb 0a\nbe e8 03 00 00\nbb 02 00 00 00\n49 8b 04 24\n0f be 08\n83 c1 be\n83 f9 35\n77 1d\n31 c0\nff 24 cd 40 6f 40 00\n48 8d 7c 24 08\nba 03 00 00 00\ne8 61 01 00 00\ne9 b2 00 00 00\n48 8b 44 24 08\n49 89 06\n41 83 cf 02\ne9 c7 00 00 00\n48 8d 7c 24 08\nba 01 00 00 00\ne8 3c 01 00 00\ne9 8d 00 00 00\n48 8d 7c 24 08\nba 02 00 00 00\ne8 28 01 00 00\neb 7c\n48 8d 7c 24 08\nba 04 00 00 00\ne8 17 01 00 00\neb 6b\n48 8d 7c 24 08\nbe 00 04 00 00\neb 5a\n48 8d 7c 24 08\nba 06 00 00 00\ne8 fa 00 00 00\neb 4e\n48 8d 7c 24 08\nba 05 00 00 00\ne8 e9 00 00 00\neb 3d\n48 8d 7c 24 08\nba 08 00 00 00\ne8 d8 00 00 00\neb 2c\n48 8d 7c 24 08\nba 07 00 00 00\ne8 c7 00 00 00\neb 1b\n48 8d 7c 24 08\nbe 00 02 00 00\neb 0a\n48 8d 7c 24 08\nbe 02 00 00 00\ne8 5a 00 00 00\n44 09 f8\n49 8b 0c 24\n48 8d 14 19\n49 89 14 24\n41 89 c7\n41 83 cf 02\n80 3c 19 00\n44 0f 44 f8\n48 8b 44 24 08\n49 89 06\n44 89 f8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf f0 70 40 00\nbe 16 71 40 00\nba 60 00 00 00\nb9 26 71 40 00\ne8 39 c2 ff ff\n'
p488
S'.text:00000000004050c0\n.text:00000000004050c1\n.text:00000000004050c3\n.text:00000000004050c5\n.text:00000000004050c7\n.text:00000000004050c9\n.text:00000000004050ca\n.text:00000000004050ce\n.text:00000000004050d1\n.text:00000000004050d4\n.text:00000000004050d6\n.text:00000000004050d9\n.text:00000000004050dc\n.text:00000000004050e2\n.text:00000000004050e5\n.text:00000000004050ea\n.text:00000000004050ee\n.text:00000000004050f3\n.text:00000000004050f6\n.text:00000000004050fc\n.text:00000000004050ff\n.text:0000000000405102\n.text:0000000000405104\n.text:0000000000405109\n.text:000000000040510e\n.text:0000000000405112\n.text:0000000000405115\n.text:0000000000405117\n.text:0000000000405119\n.text:000000000040511b\n.text:000000000040511d\n.text:0000000000405123\n.text:0000000000405126\n.text:000000000040512c\n.text:0000000000405132\n.text:0000000000405135\n.text:0000000000405137\n.text:000000000040513c\n.text:0000000000405142\n.text:0000000000405145\n.text:000000000040514b\n.text:000000000040514e\n.text:0000000000405150\n.text:0000000000405156\n.text:0000000000405159\n.text:000000000040515e\n.text:0000000000405161\n.text:0000000000405167\n.text:0000000000405170\n.text:0000000000405173\n.text:0000000000405175\n.text:0000000000405178\n.text:000000000040517b\n.text:0000000000405181\n.text:0000000000405185\n.text:0000000000405188\n.text:000000000040518a\n.text:0000000000405190\n.text:0000000000405193\n.text:0000000000405198\n.text:000000000040519b\n.text:000000000040519d\n.text:00000000004051a2\n.text:00000000004051a5\n.text:00000000004051aa\n.text:00000000004051af\n.text:00000000004051b2\n.text:00000000004051b4\n.text:00000000004051b8\n.text:00000000004051bb\n.text:00000000004051bd\n.text:00000000004051c0\n.text:00000000004051c2\n.text:00000000004051c5\n.text:00000000004051c7\n.text:00000000004051c9\n.text:00000000004051cd\n.text:00000000004051d0\n.text:00000000004051d5\n.text:00000000004051d7\n.text:00000000004051dc\n.text:00000000004051de\n.text:00000000004051e3\n.text:00000000004051e8\n.text:00000000004051ec\n.text:00000000004051ef\n.text:00000000004051f2\n.text:00000000004051f5\n.text:00000000004051f7\n.text:00000000004051f9\n.text:0000000000405200\n.text:0000000000405205\n.text:000000000040520a\n.text:000000000040520f\n.text:0000000000405214\n.text:0000000000405219\n.text:000000000040521c\n.text:0000000000405220\n.text:0000000000405225\n.text:000000000040522a\n.text:000000000040522f\n.text:0000000000405234\n.text:0000000000405239\n.text:000000000040523e\n.text:0000000000405243\n.text:0000000000405248\n.text:000000000040524a\n.text:000000000040524f\n.text:0000000000405254\n.text:0000000000405259\n.text:000000000040525b\n.text:0000000000405260\n.text:0000000000405265\n.text:0000000000405267\n.text:000000000040526c\n.text:0000000000405271\n.text:0000000000405276\n.text:0000000000405278\n.text:000000000040527d\n.text:0000000000405282\n.text:0000000000405287\n.text:0000000000405289\n.text:000000000040528e\n.text:0000000000405293\n.text:0000000000405298\n.text:000000000040529a\n.text:000000000040529f\n.text:00000000004052a4\n.text:00000000004052a9\n.text:00000000004052ab\n.text:00000000004052b0\n.text:00000000004052b5\n.text:00000000004052b7\n.text:00000000004052bc\n.text:00000000004052c1\n.text:00000000004052c6\n.text:00000000004052c9\n.text:00000000004052cd\n.text:00000000004052d1\n.text:00000000004052d5\n.text:00000000004052d8\n.text:00000000004052dc\n.text:00000000004052e0\n.text:00000000004052e4\n.text:00000000004052e9\n.text:00000000004052ec\n.text:00000000004052ef\n.text:00000000004052f3\n.text:00000000004052f4\n.text:00000000004052f6\n.text:00000000004052f8\n.text:00000000004052fa\n.text:00000000004052fc\n.text:00000000004052fd\n.text:00000000004052fe\n.text:0000000000405303\n.text:0000000000405308\n.text:000000000040530d\n.text:0000000000405312\n'
p489
tp490
sS'version_etc'
p491
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p492
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p493
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00404e12\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00404d70\nADD RSP,0xd8\nRET\n'
p494
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p495
S'.text:0000000000404dd0\n.text:0000000000404dd7\n.text:0000000000404dd9\n.text:0000000000404ddb\n.text:0000000000404de0\n.text:0000000000404de5\n.text:0000000000404dea\n.text:0000000000404df2\n.text:0000000000404dfa\n.text:0000000000404e02\n.text:0000000000404e0a\n.text:0000000000404e12\n.text:0000000000404e17\n.text:0000000000404e1c\n.text:0000000000404e21\n.text:0000000000404e26\n.text:0000000000404e2e\n.text:0000000000404e33\n.text:0000000000404e3b\n.text:0000000000404e42\n.text:0000000000404e45\n.text:0000000000404e4a\n.text:0000000000404e51\n'
p496
tp497
sS'lseek'
p498
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p499
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006090d8)();\u000a  return _Var1;\u000a}\u000a\u000a
p500
S'JMP qword ptr [0x006090d8]\n'
p501
S'ff 25 92 7b 20 00\n'
p502
S'.plt:0000000000401540\n'
p503
tp504
sS'numcompare'
p505
(S'\n__stdcall numcompare(char * a, char * b)\n'
p506
V\u000aint numcompare(char *a,char *b)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  ulong uVar4;\u000a  byte bVar5;\u000a  ulong uVar6;\u000a  byte bVar7;\u000a  char *pcVar8;\u000a  byte *pbVar9;\u000a  char *pcVar10;\u000a  uint uVar11;\u000a  \u000a  bVar5 = *a;\u000a  bVar7 = *b;\u000a  if (bVar5 == 0x2d) {\u000a    do {\u000a      pcVar10 = a;\u000a      bVar5 = pcVar10[1];\u000a      a = pcVar10 + 1;\u000a    } while (bVar5 == 0x30);\u000a    if (bVar7 == 0x2d) {\u000a      do {\u000a        pcVar8 = b;\u000a        bVar7 = pcVar8[1];\u000a        b = pcVar8 + 1;\u000a      } while (bVar7 == 0x30);\u000a      if ((bVar7 == bVar5) && ((uint)bVar5 - 0x30 < 10)) {\u000a        lVar3 = 0;\u000a        do {\u000a          bVar5 = pcVar10[lVar3 + 2];\u000a          bVar7 = pcVar8[lVar3 + 2];\u000a          lVar3 = lVar3 + 1;\u000a          if (bVar7 != bVar5) break;\u000a        } while ((uint)bVar5 - 0x30 < 10);\u000a        a = a + lVar3;\u000a        b = b + lVar3;\u000a      }\u000a      uVar11 = (uint)bVar5;\u000a      uVar6 = 0;\u000a      while ((uint)bVar5 - 0x30 < 10) {\u000a        bVar5 = a[uVar6 + 1];\u000a        uVar6 = uVar6 + 1;\u000a      }\u000a      if ((uint)bVar7 - 0x30 < 10) {\u000a        uVar4 = 0;\u000a        do {\u000a          lVar3 = uVar4 + 1;\u000a          uVar4 = uVar4 + 1;\u000a        } while ((uint)(byte)b[lVar3] - 0x30 < 10);\u000a      }\u000a      else {\u000a        uVar4 = 0;\u000a      }\u000a      if (uVar6 != uVar4) {\u000a        iVar2 = -1;\u000a        if (uVar6 < uVar4) {\u000a          iVar2 = 1;\u000a        }\u000a        return iVar2;\u000a      }\u000a      iVar2 = 0;\u000a      if (uVar6 != 0) {\u000a        iVar2 = (uint)bVar7 - uVar11;\u000a      }\u000a      return iVar2;\u000a    }\u000a    iVar2 = -1;\u000a    if (9 < (uint)bVar5 - 0x30) {\u000a      if (bVar7 == 0x30) {\u000a        pbVar9 = (byte *)(b + 1);\u000a        do {\u000a          bVar7 = *pbVar9;\u000a          pbVar9 = pbVar9 + 1;\u000a        } while (bVar7 == 0x30);\u000a      }\u000a      return (int)-(uint)((uint)bVar7 - 0x30 < 10);\u000a    }\u000a  }\u000a  else {\u000a    if (bVar7 == 0x2d) {\u000a      pbVar9 = (byte *)(b + 1);\u000a      do {\u000a        bVar7 = *pbVar9;\u000a        pbVar9 = pbVar9 + 1;\u000a      } while (bVar7 == 0x30);\u000a      iVar2 = 1;\u000a      if (9 < (uint)bVar7 - 0x30) {\u000a        if (bVar5 == 0x30) {\u000a          pbVar9 = (byte *)(a + 1);\u000a          do {\u000a            bVar5 = *pbVar9;\u000a            pbVar9 = pbVar9 + 1;\u000a          } while (bVar5 == 0x30);\u000a        }\u000a        return (int)(-(uint)((uint)bVar5 - 0x30 < 10) & 1);\u000a      }\u000a    }\u000a    else {\u000a      while (bVar5 == 0x30) {\u000a        bVar5 = a[1];\u000a        a = a + 1;\u000a      }\u000a      while (bVar7 == 0x30) {\u000a        bVar7 = b[1];\u000a        b = b + 1;\u000a      }\u000a      uVar11 = (uint)bVar5;\u000a      uVar1 = (uint)bVar5;\u000a      if (bVar5 == bVar7) {\u000a        do {\u000a          uVar11 = uVar1;\u000a          if (9 < (uint)bVar5 - 0x30) break;\u000a          bVar5 = a[1];\u000a          a = a + 1;\u000a          bVar7 = b[1];\u000a          b = b + 1;\u000a          uVar11 = (uint)bVar5;\u000a          uVar1 = uVar11;\u000a        } while (bVar5 == bVar7);\u000a      }\u000a      if ((uint)bVar5 - 0x30 < 10) {\u000a        uVar6 = 0;\u000a        do {\u000a          lVar3 = uVar6 + 1;\u000a          uVar6 = uVar6 + 1;\u000a        } while ((uint)(byte)a[lVar3] - 0x30 < 10);\u000a      }\u000a      else {\u000a        uVar6 = 0;\u000a      }\u000a      if ((uint)bVar7 - 0x30 < 10) {\u000a        uVar4 = 0;\u000a        do {\u000a          lVar3 = uVar4 + 1;\u000a          uVar4 = uVar4 + 1;\u000a        } while ((uint)(byte)b[lVar3] - 0x30 < 10);\u000a      }\u000a      else {\u000a        uVar4 = 0;\u000a      }\u000a      if (uVar6 != uVar4) {\u000a        iVar2 = 1;\u000a        if (uVar6 < uVar4) {\u000a          iVar2 = -1;\u000a        }\u000a        return iVar2;\u000a      }\u000a      iVar2 = 0;\u000a      if (uVar6 != 0) {\u000a        iVar2 = uVar11 - (uint)bVar7;\u000a      }\u000a    }\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p507
S'MOV CL,byte ptr [RDI]\nMOV DL,byte ptr [RSI]\nCMP CL,0x2d\nJNZ 0x0040476a\nNOP dword ptr [RAX]\nMOVZX ECX,byte ptr [RDI + 0x1]\nINC RDI\nCMP ECX,0x30\nJZ 0x004046f0\nCMP DL,0x2d\nJNZ 0x00404855\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX R9D,byte ptr [RSI + 0x1]\nINC RSI\nCMP R9B,0x30\nJZ 0x00404710\nCMP R9B,CL\nJNZ 0x00404887\nLEA EAX,[RCX + -0x30]\nCMP EAX,0x9\nJA 0x00404887\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV CL,byte ptr [RDI + RAX*0x1 + 0x1]\nMOVZX R9D,byte ptr [RSI + RAX*0x1 + 0x1]\nMOVZX R8D,CL\nINC RAX\nCMP R9B,R8B\nJNZ 0x0040475f\nLEA EDX,[R8 + -0x30]\nCMP EDX,0xa\nJC 0x00404740\nADD RDI,RAX\nADD RSI,RAX\nJMP 0x0040488a\nCMP DL,0x2d\nJNZ 0x004047d7\nINC RSI\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX EDX,byte ptr [RSI]\nINC RSI\nCMP EDX,0x30\nJZ 0x00404780\nADD EDX,-0x30\nMOV EAX,0x1\nCMP EDX,0xa\nJC 0x00404918\nCMP CL,0x30\nJNZ 0x004047bb\nINC RDI\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX ECX,byte ptr [RDI]\nINC RDI\nCMP CL,0x30\nJZ 0x004047b0\nMOVZX EAX,CL\nADD EAX,-0x30\nCMP EAX,0xa\nSBB EAX,EAX\nAND EAX,0x1\nRET\nMOVZX ECX,byte ptr [RDI + 0x1]\nINC RDI\nCMP CL,0x30\nJZ 0x004047d0\nJMP 0x004047e7\nMOVZX EDX,byte ptr [RSI + 0x1]\nINC RSI\nCMP DL,0x30\nJZ 0x004047e0\nMOVZX R8D,CL\nCMP R8B,DL\nJNZ 0x00404820\nLEA EAX,[R8 + -0x30]\nCMP EAX,0x9\nJA 0x00404820\nNOP\nMOVZX ECX,byte ptr [RDI + 0x1]\nINC RDI\nMOVZX EDX,byte ptr [RSI + 0x1]\nINC RSI\nMOVZX R8D,CL\nCMP R8B,DL\nJNZ 0x00404820\nLEA EAX,[R8 + -0x30]\nCMP EAX,0xa\nJC 0x00404800\nMOVZX EAX,DL\nMOVZX ECX,CL\nADD ECX,-0x30\nCMP ECX,0x9\nJA 0x004048d2\nXOR ECX,ECX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOVZX EDX,byte ptr [RDI + RCX*0x1 + 0x1]\nINC RCX\nADD EDX,-0x30\nCMP EDX,0xa\nJC 0x00404840\nJMP 0x004048d4\nADD ECX,-0x30\nMOV EAX,0xffffffff\nCMP ECX,0xa\nJC 0x00404918\nCMP DL,0x30\nJNZ 0x0040487b\nINC RSI\nNOP\nMOVZX EDX,byte ptr [RSI]\nINC RSI\nCMP DL,0x30\nJZ 0x00404870\nMOVZX EAX,DL\nADD EAX,-0x30\nCMP EAX,0xa\nSBB EAX,EAX\nRET\nMOV R8D,ECX\nMOVZX EDX,R9B\nMOVZX EAX,CL\nADD EAX,-0x30\nXOR ECX,ECX\nCMP EAX,0x9\nJA 0x004048b0\nNOP dword ptr [RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDI + RCX*0x1 + 0x1]\nINC RCX\nADD EAX,-0x30\nCMP EAX,0xa\nJC 0x004048a0\nLEA EAX,[RDX + -0x30]\nCMP EAX,0x9\nJA 0x004048f2\nXOR EAX,EAX\nNOP word ptr [RAX + RAX*0x1]\nMOVZX EDI,byte ptr [RSI + RAX*0x1 + 0x1]\nINC RAX\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x004048c0\nJMP 0x004048f4\nXOR ECX,ECX\nLEA EDX,[RAX + -0x30]\nCMP EDX,0x9\nJA 0x00404905\nXOR EDX,EDX\nNOP\nMOVZX EDI,byte ptr [RSI + RDX*0x1 + 0x1]\nINC RDX\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x004048e0\nJMP 0x00404907\nXOR EAX,EAX\nCMP RCX,RAX\nJNZ 0x00404919\nSUB EDX,R8D\nXOR EAX,EAX\nTEST RCX,RCX\nCMOVNZ EAX,EDX\nRET\nXOR EDX,EDX\nCMP RCX,RDX\nJNZ 0x00404927\nSUB R8D,EAX\nXOR EAX,EAX\nTEST RCX,RCX\nCMOVNZ EAX,R8D\nRET\nMOV ECX,0x1\nMOV EAX,0xffffffff\nCMOVC EAX,ECX\nRET\nMOV ECX,0xffffffff\nMOV EAX,0x1\nCMOVC EAX,ECX\nRET\n'
p508
S'8a 0f\n8a 16\n80 f9 2d\n0f 85 7d 00 00 00\n0f 1f 00\n0f b6 4f 01\n48 ff c7\n83 f9 30\n74 f4\n80 fa 2d\n0f 85 50 01 00 00\n66 66 2e 0f 1f 84 00 00 00 00 00\n44 0f b6 4e 01\n48 ff c6\n41 80 f9 30\n74 f2\n41 38 c9\n0f 85 60 01 00 00\n8d 41 d0\n83 f8 09\n0f 87 54 01 00 00\n31 c0\n66 66 2e 0f 1f 84 00 00 00 00 00\n8a 4c 07 01\n44 0f b6 4c 06 01\n44 0f b6 c1\n48 ff c0\n45 38 c1\n75 09\n41 8d 50 d0\n83 fa 0a\n72 e1\n48 01 c7\n48 01 c6\ne9 20 01 00 00\n80 fa 2d\n75 68\n48 ff c6\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 16\n48 ff c6\n83 fa 30\n74 f5\n83 c2 d0\nb8 01 00 00 00\n83 fa 0a\n0f 82 7c 01 00 00\n80 f9 30\n75 1a\n48 ff c7\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 0f\n48 ff c7\n80 f9 30\n74 f5\n0f b6 c1\n83 c0 d0\n83 f8 0a\n19 c0\n83 e0 01\nc3\n0f b6 4f 01\n48 ff c7\n80 f9 30\n74 f4\neb 09\n0f b6 56 01\n48 ff c6\n80 fa 30\n74 f4\n44 0f b6 c1\n41 38 d0\n75 2b\n41 8d 40 d0\n83 f8 09\n77 22\n66 90\n0f b6 4f 01\n48 ff c7\n0f b6 56 01\n48 ff c6\n44 0f b6 c1\n41 38 d0\n75 09\n41 8d 40 d0\n83 f8 0a\n72 e0\n0f b6 c2\n0f b6 c9\n83 c1 d0\n83 f9 09\n0f 87 a0 00 00 00\n31 c9\n66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 54 0f 01\n48 ff c1\n83 c2 d0\n83 fa 0a\n72 f0\ne9 7f 00 00 00\n83 c1 d0\nb8 ff ff ff ff\n83 f9 0a\n0f 82 b2 00 00 00\n80 fa 30\n75 10\n48 ff c6\n66 90\n0f b6 16\n48 ff c6\n80 fa 30\n74 f5\n0f b6 c2\n83 c0 d0\n83 f8 0a\n19 c0\nc3\n41 89 c8\n41 0f b6 d1\n0f b6 c1\n83 c0 d0\n31 c9\n83 f8 09\n77 15\n0f 1f 44 00 00\n0f b6 44 0f 01\n48 ff c1\n83 c0 d0\n83 f8 0a\n72 f0\n8d 42 d0\n83 f8 09\n77 3a\n31 c0\n66 0f 1f 44 00 00\n0f b6 7c 06 01\n48 ff c0\n83 c7 d0\n83 ff 0a\n72 f0\neb 22\n31 c9\n8d 50 d0\n83 fa 09\n77 29\n31 d2\n66 90\n0f b6 7c 16 01\n48 ff c2\n83 c7 d0\n83 ff 0a\n72 f0\neb 15\n31 c0\n48 39 c1\n75 20\n44 29 c2\n31 c0\n48 85 c9\n0f 45 c2\nc3\n31 d2\n48 39 d1\n75 1b\n41 29 c0\n31 c0\n48 85 c9\n41 0f 45 c0\nc3\nb9 01 00 00 00\nb8 ff ff ff ff\n0f 42 c1\nc3\nb9 ff ff ff ff\nb8 01 00 00 00\n0f 42 c1\nc3\n'
p509
S'.text:00000000004046e0\n.text:00000000004046e2\n.text:00000000004046e4\n.text:00000000004046e7\n.text:00000000004046ed\n.text:00000000004046f0\n.text:00000000004046f4\n.text:00000000004046f7\n.text:00000000004046fa\n.text:00000000004046fc\n.text:00000000004046ff\n.text:0000000000404705\n.text:0000000000404710\n.text:0000000000404715\n.text:0000000000404718\n.text:000000000040471c\n.text:000000000040471e\n.text:0000000000404721\n.text:0000000000404727\n.text:000000000040472a\n.text:000000000040472d\n.text:0000000000404733\n.text:0000000000404735\n.text:0000000000404740\n.text:0000000000404744\n.text:000000000040474a\n.text:000000000040474e\n.text:0000000000404751\n.text:0000000000404754\n.text:0000000000404756\n.text:000000000040475a\n.text:000000000040475d\n.text:000000000040475f\n.text:0000000000404762\n.text:0000000000404765\n.text:000000000040476a\n.text:000000000040476d\n.text:000000000040476f\n.text:0000000000404772\n.text:0000000000404780\n.text:0000000000404783\n.text:0000000000404786\n.text:0000000000404789\n.text:000000000040478b\n.text:000000000040478e\n.text:0000000000404793\n.text:0000000000404796\n.text:000000000040479c\n.text:000000000040479f\n.text:00000000004047a1\n.text:00000000004047a4\n.text:00000000004047b0\n.text:00000000004047b3\n.text:00000000004047b6\n.text:00000000004047b9\n.text:00000000004047bb\n.text:00000000004047be\n.text:00000000004047c1\n.text:00000000004047c4\n.text:00000000004047c6\n.text:00000000004047c9\n.text:00000000004047d0\n.text:00000000004047d4\n.text:00000000004047d7\n.text:00000000004047da\n.text:00000000004047dc\n.text:00000000004047e0\n.text:00000000004047e4\n.text:00000000004047e7\n.text:00000000004047ea\n.text:00000000004047ec\n.text:00000000004047f0\n.text:00000000004047f3\n.text:00000000004047f5\n.text:00000000004047f9\n.text:00000000004047fc\n.text:00000000004047fe\n.text:0000000000404800\n.text:0000000000404804\n.text:0000000000404807\n.text:000000000040480b\n.text:000000000040480e\n.text:0000000000404812\n.text:0000000000404815\n.text:0000000000404817\n.text:000000000040481b\n.text:000000000040481e\n.text:0000000000404820\n.text:0000000000404823\n.text:0000000000404826\n.text:0000000000404829\n.text:000000000040482c\n.text:0000000000404832\n.text:0000000000404834\n.text:0000000000404840\n.text:0000000000404845\n.text:0000000000404848\n.text:000000000040484b\n.text:000000000040484e\n.text:0000000000404850\n.text:0000000000404855\n.text:0000000000404858\n.text:000000000040485d\n.text:0000000000404860\n.text:0000000000404866\n.text:0000000000404869\n.text:000000000040486b\n.text:000000000040486e\n.text:0000000000404870\n.text:0000000000404873\n.text:0000000000404876\n.text:0000000000404879\n.text:000000000040487b\n.text:000000000040487e\n.text:0000000000404881\n.text:0000000000404884\n.text:0000000000404886\n.text:0000000000404887\n.text:000000000040488a\n.text:000000000040488e\n.text:0000000000404891\n.text:0000000000404894\n.text:0000000000404896\n.text:0000000000404899\n.text:000000000040489b\n.text:00000000004048a0\n.text:00000000004048a5\n.text:00000000004048a8\n.text:00000000004048ab\n.text:00000000004048ae\n.text:00000000004048b0\n.text:00000000004048b3\n.text:00000000004048b6\n.text:00000000004048b8\n.text:00000000004048ba\n.text:00000000004048c0\n.text:00000000004048c5\n.text:00000000004048c8\n.text:00000000004048cb\n.text:00000000004048ce\n.text:00000000004048d0\n.text:00000000004048d2\n.text:00000000004048d4\n.text:00000000004048d7\n.text:00000000004048da\n.text:00000000004048dc\n.text:00000000004048de\n.text:00000000004048e0\n.text:00000000004048e5\n.text:00000000004048e8\n.text:00000000004048eb\n.text:00000000004048ee\n.text:00000000004048f0\n.text:00000000004048f2\n.text:00000000004048f4\n.text:00000000004048f7\n.text:00000000004048f9\n.text:00000000004048fc\n.text:00000000004048fe\n.text:0000000000404901\n.text:0000000000404904\n.text:0000000000404905\n.text:0000000000404907\n.text:000000000040490a\n.text:000000000040490c\n.text:000000000040490f\n.text:0000000000404911\n.text:0000000000404914\n.text:0000000000404918\n.text:0000000000404919\n.text:000000000040491e\n.text:0000000000404923\n.text:0000000000404926\n.text:0000000000404927\n.text:000000000040492c\n.text:0000000000404931\n.text:0000000000404934\n'
p510
tp511
sS'quotearg_n_mem'
p512
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p513
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p514
S'MOV ECX,0x6092f0\nJMP 0x00403dd0\n'
p515
S'b9 f0 92 60 00\ne9 36 fe ff ff\n'
p516
S'.text:0000000000403f90\n.text:0000000000403f95\n'
p517
tp518
sS'__printf_chk'
p519
(S'\n__stdcall __printf_chk()\n'
p520
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_00609190)();\u000a  return;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x00609190]\n'
p522
S'ff 25 da 7a 20 00\n'
p523
S'.plt:00000000004016b0\n'
p524
tp525
sS'int_value'
p526
(S'\n__stdcall int_value(ulong i)\n'
p527
V\u000aVALUE * int_value(ulong i)\u000a\u000a{\u000a  VALUE *pVVar1;\u000a  \u000a  pVVar1 = (VALUE *)xmalloc(0x10);\u000a  pVVar1->type = integer;\u000a  mpz_init_set_ui(&pVVar1->u,i);\u000a  return pVVar1;\u000a}\u000a\u000a
p528
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV EDI,0x10\nCALL 0x00404f00\nMOV RBX,RAX\nMOV dword ptr [RBX],0x0\nLEA RDI,[RBX + 0x8]\nMOV RSI,R14\nCALL 0x00402b30\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p529
S'41 56\n53\n50\n49 89 fe\nbf 10 00 00 00\ne8 5f 2f 00 00\n48 89 c3\nc7 03 00 00 00 00\n48 8d 7b 08\n4c 89 f6\ne8 7a 0b 00 00\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p530
S'.text:0000000000401f90\n.text:0000000000401f92\n.text:0000000000401f93\n.text:0000000000401f94\n.text:0000000000401f97\n.text:0000000000401f9c\n.text:0000000000401fa1\n.text:0000000000401fa4\n.text:0000000000401faa\n.text:0000000000401fae\n.text:0000000000401fb1\n.text:0000000000401fb6\n.text:0000000000401fb9\n.text:0000000000401fbd\n.text:0000000000401fbe\n.text:0000000000401fc0\n'
p531
tp532
sS'eval2'
p533
(S'\n__stdcall eval2()\n'
p534
V\u000aVALUE * eval2(void)\u000a\u000a{\u000a  char *cp;\u000a  char *cp_00;\u000a  _Bool _Var1;\u000a  uint uVar2;\u000a  VALUE *v;\u000a  VALUE *v_00;\u000a  int *piVar3;\u000a  ulong i;\u000a  undefined uVar4;\u000a  char in_DIL;\u000a  \u000a  v = eval3();\u000a  do {\u000a    _Var1 = nextarg("<");\u000a    if (_Var1 == false) {\u000a      _Var1 = nextarg("<=");\u000a      uVar4 = 1;\u000a      if (_Var1 == false) {\u000a        _Var1 = nextarg("=");\u000a        uVar4 = 2;\u000a        if ((_Var1 == false) && (_Var1 = nextarg("=="), _Var1 == false)) {\u000a          _Var1 = nextarg("!=");\u000a          uVar4 = 3;\u000a          if (_Var1 == false) {\u000a            _Var1 = nextarg(">=");\u000a            uVar4 = 4;\u000a            if (_Var1 == false) {\u000a              _Var1 = nextarg(">");\u000a              uVar4 = 5;\u000a              if (_Var1 == false) {\u000a                return v;\u000a              }\u000a            }\u000a          }\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      uVar4 = 0;\u000a    }\u000a    v_00 = eval3();\u000a    if (in_DIL == 0) {\u000a      i = 0;\u000a    }\u000a    else {\u000a      tostring(v);\u000a      tostring(v_00);\u000a      cp = (char *)v->u;\u000a      _Var1 = looks_like_integer(cp);\u000a      if (_Var1 == false) {\u000aLAB_004020f0:\u000a        piVar3 = __errno_location();\u000a        *piVar3 = 0;\u000a        uVar2 = strcoll((char *)v->u,(char *)v_00->u);\u000a      }\u000a      else {\u000a        cp_00 = (char *)v_00->u;\u000a        _Var1 = looks_like_integer(cp_00);\u000a        if (_Var1 == false) goto LAB_004020f0;\u000a        uVar2 = strintcmp(cp,cp_00);\u000a      }\u000a      switch(uVar4) {\u000a      case 0:\u000a        i = (ulong)(uVar2 >> 0x1f);\u000a        break;\u000a      case 1:\u000a        i = (ulong)((int)uVar2 < 1);\u000a        break;\u000a      case 2:\u000a        i = (ulong)(uVar2 == 0);\u000a        break;\u000a      case 3:\u000a        i = (ulong)(uVar2 != 0);\u000a        break;\u000a      case 4:\u000a        i = (ulong)(uVar2 >> 0x1f ^ 1);\u000a        break;\u000a      case 5:\u000a        i = (ulong)(0 < (int)uVar2);\u000a        break;\u000a      default:\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a    }\u000a    freev(v);\u000a    freev(v_00);\u000a    v = int_value(i);\u000a  } while( true );\u000a}\u000a\u000a
p535
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOVZX R14D,DIL\nMOV EDI,R14D\nCALL 0x00402190\nJMP 0x00402008\nMOV RDI,R15\nCALL 0x00401f70\nMOV RDI,R13\nCALL 0x00401f70\nMOV RDI,RBX\nCALL 0x00401f90\nMOV R15,RAX\nMOV EDI,0x406523\nCALL 0x00401f30\nTEST AL,AL\nJZ 0x00402020\nXOR EBP,EBP\nJMP 0x00402090\nMOV EDI,0x406525\nCALL 0x00401f30\nMOV BPL,0x1\nTEST AL,AL\nJNZ 0x00402090\nMOV EDI,0x40652c\nCALL 0x00401f30\nMOV BPL,0x2\nTEST AL,AL\nJNZ 0x00402090\nMOV EDI,0x406528\nCALL 0x00401f30\nTEST AL,AL\nJNZ 0x00402090\nMOV EDI,0x40652b\nCALL 0x00401f30\nMOV BPL,0x3\nTEST AL,AL\nJNZ 0x00402090\nMOV EDI,0x40652e\nCALL 0x00401f30\nMOV BPL,0x4\nTEST AL,AL\nJNZ 0x00402090\nMOV EDI,0x406531\nCALL 0x00401f30\nMOV BPL,0x5\nTEST AL,AL\nJZ 0x0040216e\nNOP word ptr [RAX + RAX*0x1]\nMOV EDI,R14D\nCALL 0x00402190\nMOV R13,RAX\nTEST R14B,R14B\nJZ 0x004020e0\nMOV RDI,R15\nCALL 0x00402270\nMOV RDI,R13\nCALL 0x00402270\nMOV RBX,qword ptr [R15 + 0x8]\nMOV RDI,RBX\nCALL 0x004022a0\nTEST AL,AL\nJZ 0x004020f0\nMOV R12,qword ptr [R13 + 0x8]\nMOV RDI,R12\nCALL 0x004022a0\nTEST AL,AL\nJZ 0x004020f0\nMOV RDI,RBX\nMOV RSI,R12\nCALL 0x004046d0\nJMP 0x00402108\nXOR EBX,EBX\nJMP 0x00401ff0\nCALL 0x00401420\nMOV dword ptr [RAX],0x0\nMOV RDI,qword ptr [R15 + 0x8]\nMOV RSI,qword ptr [R13 + 0x8]\nCALL 0x00401660\nMOV EBX,EAX\nAND BPL,0x7\nCMP BPL,0x5\nJA 0x00402180\nMOVZX EAX,BPL\nJMP qword ptr [0x405b00 + RAX*0x8]\nSHR EBX,0x1f\nJMP 0x00401ff0\nXOR EAX,EAX\nTEST EBX,EBX\nSETLE AL\nMOV RBX,RAX\nJMP 0x00401ff0\nXOR EAX,EAX\nTEST EBX,EBX\nSETZ AL\nMOV RBX,RAX\nJMP 0x00401ff0\nXOR EAX,EAX\nTEST EBX,EBX\nSETNZ AL\nMOV RBX,RAX\nJMP 0x00401ff0\nSHR EBX,0x1f\nXOR EBX,0x1\nJMP 0x00401ff0\nXOR EAX,EAX\nTEST EBX,EBX\nSETG AL\nMOV RBX,RAX\nJMP 0x00401ff0\nMOV RAX,R15\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401400\n'
p536
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 0f b6 f7\n44 89 f7\ne8 a9 01 00 00\neb 1f\n4c 89 ff\ne8 78 ff ff ff\n4c 89 ef\ne8 70 ff ff ff\n48 89 df\ne8 88 ff ff ff\n49 89 c7\nbf 23 65 40 00\ne8 1b ff ff ff\n84 c0\n74 07\n31 ed\neb 73\nbf 25 65 40 00\ne8 06 ff ff ff\n40 b5 01\n84 c0\n75 5f\nbf 2c 65 40 00\ne8 f5 fe ff ff\n40 b5 02\n84 c0\n75 4e\nbf 28 65 40 00\ne8 e4 fe ff ff\n84 c0\n75 40\nbf 2b 65 40 00\ne8 d6 fe ff ff\n40 b5 03\n84 c0\n75 2f\nbf 2e 65 40 00\ne8 c5 fe ff ff\n40 b5 04\n84 c0\n75 1e\nbf 31 65 40 00\ne8 b4 fe ff ff\n40 b5 05\n84 c0\n0f 84 e7 00 00 00\n66 0f 1f 84 00 00 00 00 00\n44 89 f7\ne8 f8 00 00 00\n49 89 c5\n45 84 f6\n74 40\n4c 89 ff\ne8 c8 01 00 00\n4c 89 ef\ne8 c0 01 00 00\n49 8b 5f 08\n48 89 df\ne8 e4 01 00 00\n84 c0\n74 30\n4d 8b 65 08\n4c 89 e7\ne8 d4 01 00 00\n84 c0\n74 20\n48 89 df\n4c 89 e6\ne8 f5 25 00 00\neb 2b\n31 db\ne9 09 ff ff ff\ne8 2b f3 ff ff\nc7 00 00 00 00 00\n49 8b 7f 08\n49 8b 75 08\ne8 58 f5 ff ff\n89 c3\n40 80 e5 07\n40 80 fd 05\n77 6c\n40 0f b6 c5\nff 24 c5 00 5b 40 00\nc1 eb 1f\ne9 c9 fe ff ff\n31 c0\n85 db\n0f 9e c0\n48 89 c3\ne9 ba fe ff ff\n31 c0\n85 db\n0f 94 c0\n48 89 c3\ne9 ab fe ff ff\n31 c0\n85 db\n0f 95 c0\n48 89 c3\ne9 9c fe ff ff\nc1 eb 1f\n83 f3 01\ne9 91 fe ff ff\n31 c0\n85 db\n0f 9f c0\n48 89 c3\ne9 82 fe ff ff\n4c 89 f8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 7b f2 ff ff\n'
p537
S'.text:0000000000401fd0\n.text:0000000000401fd1\n.text:0000000000401fd3\n.text:0000000000401fd5\n.text:0000000000401fd7\n.text:0000000000401fd9\n.text:0000000000401fda\n.text:0000000000401fdb\n.text:0000000000401fdf\n.text:0000000000401fe2\n.text:0000000000401fe7\n.text:0000000000401ff0\n.text:0000000000401ff3\n.text:0000000000401ff8\n.text:0000000000401ffb\n.text:0000000000402000\n.text:0000000000402003\n.text:0000000000402008\n.text:000000000040200b\n.text:0000000000402010\n.text:0000000000402015\n.text:0000000000402017\n.text:0000000000402019\n.text:000000000040201b\n.text:0000000000402020\n.text:0000000000402025\n.text:000000000040202a\n.text:000000000040202d\n.text:000000000040202f\n.text:0000000000402031\n.text:0000000000402036\n.text:000000000040203b\n.text:000000000040203e\n.text:0000000000402040\n.text:0000000000402042\n.text:0000000000402047\n.text:000000000040204c\n.text:000000000040204e\n.text:0000000000402050\n.text:0000000000402055\n.text:000000000040205a\n.text:000000000040205d\n.text:000000000040205f\n.text:0000000000402061\n.text:0000000000402066\n.text:000000000040206b\n.text:000000000040206e\n.text:0000000000402070\n.text:0000000000402072\n.text:0000000000402077\n.text:000000000040207c\n.text:000000000040207f\n.text:0000000000402081\n.text:0000000000402087\n.text:0000000000402090\n.text:0000000000402093\n.text:0000000000402098\n.text:000000000040209b\n.text:000000000040209e\n.text:00000000004020a0\n.text:00000000004020a3\n.text:00000000004020a8\n.text:00000000004020ab\n.text:00000000004020b0\n.text:00000000004020b4\n.text:00000000004020b7\n.text:00000000004020bc\n.text:00000000004020be\n.text:00000000004020c0\n.text:00000000004020c4\n.text:00000000004020c7\n.text:00000000004020cc\n.text:00000000004020ce\n.text:00000000004020d0\n.text:00000000004020d3\n.text:00000000004020d6\n.text:00000000004020db\n.text:00000000004020e0\n.text:00000000004020e2\n.text:00000000004020f0\n.text:00000000004020f5\n.text:00000000004020fb\n.text:00000000004020ff\n.text:0000000000402103\n.text:0000000000402108\n.text:000000000040210a\n.text:000000000040210e\n.text:0000000000402112\n.text:0000000000402114\n.text:0000000000402118\n.text:000000000040211f\n.text:0000000000402122\n.text:0000000000402127\n.text:0000000000402129\n.text:000000000040212b\n.text:000000000040212e\n.text:0000000000402131\n.text:0000000000402136\n.text:0000000000402138\n.text:000000000040213a\n.text:000000000040213d\n.text:0000000000402140\n.text:0000000000402145\n.text:0000000000402147\n.text:0000000000402149\n.text:000000000040214c\n.text:000000000040214f\n.text:0000000000402154\n.text:0000000000402157\n.text:000000000040215a\n.text:000000000040215f\n.text:0000000000402161\n.text:0000000000402163\n.text:0000000000402166\n.text:0000000000402169\n.text:000000000040216e\n.text:0000000000402171\n.text:0000000000402175\n.text:0000000000402176\n.text:0000000000402178\n.text:000000000040217a\n.text:000000000040217c\n.text:000000000040217e\n.text:000000000040217f\n.text:0000000000402180\n'
p538
tp539
sS'eval3'
p540
(S'\n__stdcall eval3()\n'
p541
V\u000aVALUE * eval3(void)\u000a\u000a{\u000a  bool bVar1;\u000a  _Bool _Var2;\u000a  VALUE *v;\u000a  VALUE *v_00;\u000a  undefined8 uVar3;\u000a  code *pcVar4;\u000a  char in_DIL;\u000a  \u000a  v = eval4();\u000a  do {\u000a    _Var2 = nextarg("+");\u000a    bVar1 = false;\u000a    if (_Var2 == false) {\u000a      _Var2 = nextarg("-");\u000a      bVar1 = true;\u000a      if (_Var2 == false) {\u000a        return v;\u000a      }\u000a    }\u000a    v_00 = eval4();\u000a    if (in_DIL != 0) {\u000a      _Var2 = toarith(v);\u000a      if (_Var2 == false) {\u000aLAB_00402216:\u000a        uVar3 = dcgettext(0,"non-integer argument",5);\u000a        error(2,0,uVar3,uVar3);\u000a      }\u000a      else {\u000a        _Var2 = toarith(v_00);\u000a        if (_Var2 == false) goto LAB_00402216;\u000a      }\u000a      pcVar4 = mpz_sub;\u000a      if (!bVar1) {\u000a        pcVar4 = mpz_add;\u000a      }\u000a      (*pcVar4)(&v->u,&v->u,&v_00->u);\u000a    }\u000a    freev(v_00);\u000a  } while( true );\u000a}\u000a\u000a
p542
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOVZX R13D,DIL\nMOV EDI,R13D\nCALL 0x004022d0\nMOV R14,RAX\nMOV R15,R14\nADD R15,0x8\nMOV R12D,0x402480\nJMP 0x004021c8\nMOV RDI,RBX\nCALL 0x00401f70\nMOV EDI,0x406533\nCALL 0x00401f30\nTEST AL,AL\nMOV EBP,0x0\nJNZ 0x004021ee\nMOV EDI,0x4063a1\nCALL 0x00401f30\nMOV EBP,0x1\nTEST AL,AL\nJZ 0x0040225a\nMOV EDI,R13D\nCALL 0x004022d0\nMOV RBX,RAX\nTEST R13B,R13B\nJZ 0x004021c0\nMOV RDI,R14\nCALL 0x00402410\nTEST AL,AL\nJZ 0x00402216\nMOV RDI,RBX\nCALL 0x00402410\nTEST AL,AL\nJNZ 0x0040223b\nXOR EDI,EDI\nMOV ESI,0x406535\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004016c0\nTEST EBP,EBP\nMOV EAX,0x402490\nCMOVZ RAX,R12\nMOV RDX,RBX\nADD RDX,0x8\nMOV RDI,R15\nMOV RSI,R15\nCALL RAX\nJMP 0x004021c0\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p543
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 0f b6 ef\n44 89 ef\ne8 29 01 00 00\n49 89 c6\n4d 89 f7\n49 83 c7 08\n41 bc 80 24 40 00\neb 0f\n48 89 df\ne8 a8 fd ff ff\nbf 33 65 40 00\ne8 5e fd ff ff\n84 c0\nbd 00 00 00 00\n75 13\nbf a1 63 40 00\ne8 4b fd ff ff\nbd 01 00 00 00\n84 c0\n74 6c\n44 89 ef\ne8 da 00 00 00\n48 89 c3\n45 84 ed\n74 c2\n4c 89 f7\ne8 0a 02 00 00\n84 c0\n74 0c\n48 89 df\ne8 fe 01 00 00\n84 c0\n75 25\n31 ff\nbe 35 65 40 00\nba 05 00 00 00\ne8 99 f2 ff ff\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 85 f4 ff ff\n85 ed\nb8 90 24 40 00\n49 0f 44 c4\n48 89 da\n48 83 c2 08\n4c 89 ff\n4c 89 fe\nff d0\ne9 66 ff ff ff\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p544
S'.text:0000000000402190\n.text:0000000000402191\n.text:0000000000402193\n.text:0000000000402195\n.text:0000000000402197\n.text:0000000000402199\n.text:000000000040219a\n.text:000000000040219b\n.text:000000000040219f\n.text:00000000004021a2\n.text:00000000004021a7\n.text:00000000004021aa\n.text:00000000004021ad\n.text:00000000004021b1\n.text:00000000004021b7\n.text:00000000004021c0\n.text:00000000004021c3\n.text:00000000004021c8\n.text:00000000004021cd\n.text:00000000004021d2\n.text:00000000004021d4\n.text:00000000004021d9\n.text:00000000004021db\n.text:00000000004021e0\n.text:00000000004021e5\n.text:00000000004021ea\n.text:00000000004021ec\n.text:00000000004021ee\n.text:00000000004021f1\n.text:00000000004021f6\n.text:00000000004021f9\n.text:00000000004021fc\n.text:00000000004021fe\n.text:0000000000402201\n.text:0000000000402206\n.text:0000000000402208\n.text:000000000040220a\n.text:000000000040220d\n.text:0000000000402212\n.text:0000000000402214\n.text:0000000000402216\n.text:0000000000402218\n.text:000000000040221d\n.text:0000000000402222\n.text:0000000000402227\n.text:000000000040222a\n.text:000000000040222f\n.text:0000000000402231\n.text:0000000000402233\n.text:0000000000402236\n.text:000000000040223b\n.text:000000000040223d\n.text:0000000000402242\n.text:0000000000402246\n.text:0000000000402249\n.text:000000000040224d\n.text:0000000000402250\n.text:0000000000402253\n.text:0000000000402255\n.text:000000000040225a\n.text:000000000040225d\n.text:0000000000402261\n.text:0000000000402262\n.text:0000000000402264\n.text:0000000000402266\n.text:0000000000402268\n.text:000000000040226a\n.text:000000000040226b\n'
p545
tp546
sS'emit_ancillary_info'
p547
(S'\n__stdcall emit_ancillary_info()\n'
p548
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00405b30;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("expr",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "expr";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00406349,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00406349);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x406cf9;\u000a  if (__s2 == "expr") {\u000a    uVar3 = 0x4063f6;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p549
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x405b30\nMOV ESI,0x4063da\nNOP\nMOV EDI,0x406349\nCALL 0x004015e0\nTEST EAX,EAX\nJZ 0x00401a7b\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401a60\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x406349\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x406439\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x406366\nMOV ECX,0x406450\nXOR EAX,EAX\nCALL 0x004016b0\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x004016a0\nTEST RAX,RAX\nJZ 0x00401b04\nMOV ESI,0x406477\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401430\nTEST EAX,EAX\nJZ 0x00401b04\nXOR EDI,EDI\nMOV ESI,0x40647b\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406349\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x004016b0\nXOR EDI,EDI\nMOV ESI,0x4064c0\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,RAX\nMOV R14D,0x406349\nMOV EDI,0x1\nMOV EDX,0x406450\nMOV ECX,0x406349\nXOR EAX,EAX\nCALL 0x004016b0\nXOR EDI,EDI\nMOV ESI,0x4064df\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x4063f6\nMOV ECX,0x406cf9\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x004016b0\n'
p550
S'41 56\n53\n50\nbb 30 5b 40 00\nbe da 63 40 00\n66 90\nbf 49 63 40 00\ne8 76 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 49 63 40 00\n48 0f 45 d8\n31 ff\nbe 39 64 40 00\nba 05 00 00 00\ne8 24 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba 66 63 40 00\nb9 50 64 40 00\n31 c0\ne8 fb fb ff ff\nbf 05 00 00 00\n31 f6\ne8 df fb ff ff\n48 85 c0\n74 3e\nbe 77 64 40 00\nba 03 00 00 00\n48 89 c7\ne8 58 f9 ff ff\n85 c0\n74 28\n31 ff\nbe 7b 64 40 00\nba 05 00 00 00\ne8 d3 f9 ff ff\n48 89 c1\nbf 01 00 00 00\nba 49 63 40 00\n31 c0\n48 89 ce\ne8 ac fb ff ff\n31 ff\nbe c0 64 40 00\nba 05 00 00 00\ne8 ab f9 ff ff\n48 89 c6\n41 be 49 63 40 00\nbf 01 00 00 00\nba 50 64 40 00\nb9 49 63 40 00\n31 c0\ne8 7c fb ff ff\n31 ff\nbe df 64 40 00\nba 05 00 00 00\ne8 7b f9 ff ff\n48 89 c2\n4c 39 f3\nb8 f6 63 40 00\nb9 f9 6c 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 3e fb ff ff\n'
p551
S'.text:0000000000401a50\n.text:0000000000401a52\n.text:0000000000401a53\n.text:0000000000401a54\n.text:0000000000401a59\n.text:0000000000401a5e\n.text:0000000000401a60\n.text:0000000000401a65\n.text:0000000000401a6a\n.text:0000000000401a6c\n.text:0000000000401a6e\n.text:0000000000401a72\n.text:0000000000401a76\n.text:0000000000401a79\n.text:0000000000401a7b\n.text:0000000000401a7f\n.text:0000000000401a82\n.text:0000000000401a87\n.text:0000000000401a8b\n.text:0000000000401a8d\n.text:0000000000401a92\n.text:0000000000401a97\n.text:0000000000401a9c\n.text:0000000000401a9f\n.text:0000000000401aa4\n.text:0000000000401aa9\n.text:0000000000401aae\n.text:0000000000401ab0\n.text:0000000000401ab5\n.text:0000000000401aba\n.text:0000000000401abc\n.text:0000000000401ac1\n.text:0000000000401ac4\n.text:0000000000401ac6\n.text:0000000000401acb\n.text:0000000000401ad0\n.text:0000000000401ad3\n.text:0000000000401ad8\n.text:0000000000401ada\n.text:0000000000401adc\n.text:0000000000401ade\n.text:0000000000401ae3\n.text:0000000000401ae8\n.text:0000000000401aed\n.text:0000000000401af0\n.text:0000000000401af5\n.text:0000000000401afa\n.text:0000000000401afc\n.text:0000000000401aff\n.text:0000000000401b04\n.text:0000000000401b06\n.text:0000000000401b0b\n.text:0000000000401b10\n.text:0000000000401b15\n.text:0000000000401b18\n.text:0000000000401b1e\n.text:0000000000401b23\n.text:0000000000401b28\n.text:0000000000401b2d\n.text:0000000000401b2f\n.text:0000000000401b34\n.text:0000000000401b36\n.text:0000000000401b3b\n.text:0000000000401b40\n.text:0000000000401b45\n.text:0000000000401b48\n.text:0000000000401b4b\n.text:0000000000401b50\n.text:0000000000401b55\n.text:0000000000401b59\n.text:0000000000401b5e\n.text:0000000000401b60\n.text:0000000000401b63\n.text:0000000000401b66\n.text:0000000000401b6a\n.text:0000000000401b6b\n.text:0000000000401b6d\n'
p552
tp553
sS'eval1'
p554
(S'\n__stdcall eval1()\n'
p555
V\u000aVALUE * eval1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  VALUE *v;\u000a  VALUE *v_00;\u000a  char in_DIL;\u000a  \u000a  v = eval2();\u000a  while (_Var1 = nextarg("&"), _Var1 != false) {\u000a    if (in_DIL != 0) {\u000a      null(v);\u000a    }\u000a    v_00 = eval2();\u000a    _Var1 = null(v);\u000a    if ((_Var1 == false) && (_Var1 = null(v_00), _Var1 == false)) {\u000a      freev(v_00);\u000a    }\u000a    else {\u000a      freev(v);\u000a      freev(v_00);\u000a      v = int_value(0);\u000a    }\u000a  }\u000a  return v;\u000a}\u000a\u000a
p556
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDI\nMOVZX EDI,R14B\nCALL 0x00401fd0\nJMP 0x00401ec7\nMOV RDI,RBX\nCALL 0x00401f70\nMOV RDI,RBP\nCALL 0x00401f70\nXOR EDI,EDI\nCALL 0x00401f90\nMOV RBX,RAX\nJMP 0x00401ed8\nMOV RDI,RBP\nCALL 0x00401f70\nMOV EDI,0x406521\nCALL 0x00401f30\nTEST AL,AL\nJZ 0x00401f27\nTEST R14B,R14B\nJZ 0x00401f00\nMOV RDI,RBX\nCALL 0x00401de0\nXOR AL,0x1\nJMP 0x00401f02\nXOR EAX,EAX\nMOVZX EDI,AL\nCALL 0x00401fd0\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00401de0\nTEST AL,AL\nJNZ 0x00401eb0\nMOV RDI,RBP\nCALL 0x00401de0\nTEST AL,AL\nJZ 0x00401ed0\nJMP 0x00401eb0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p557
S'55\n41 56\n53\n41 89 fe\n41 0f b6 fe\ne8 30 01 00 00\neb 25\n48 89 df\ne8 b8 00 00 00\n48 89 ef\ne8 b0 00 00 00\n31 ff\ne8 c9 00 00 00\n48 89 c3\neb 0c\n48 89 ef\ne8 98 00 00 00\nbf 21 65 40 00\ne8 4e 00 00 00\n84 c0\n74 41\n45 84 f6\n74 15\n48 89 df\ne8 ed fe ff ff\n34 01\neb 0b\n31 c0\n0f b6 f8\ne8 c6 00 00 00\n48 89 c5\n48 89 df\ne8 cb fe ff ff\n84 c0\n75 97\n48 89 ef\ne8 bf fe ff ff\n84 c0\n74 ab\neb 89\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p558
S'.text:0000000000401e90\n.text:0000000000401e91\n.text:0000000000401e93\n.text:0000000000401e94\n.text:0000000000401e97\n.text:0000000000401e9b\n.text:0000000000401ea0\n.text:0000000000401eb0\n.text:0000000000401eb3\n.text:0000000000401eb8\n.text:0000000000401ebb\n.text:0000000000401ec0\n.text:0000000000401ec2\n.text:0000000000401ec7\n.text:0000000000401eca\n.text:0000000000401ed0\n.text:0000000000401ed3\n.text:0000000000401ed8\n.text:0000000000401edd\n.text:0000000000401ee2\n.text:0000000000401ee4\n.text:0000000000401ee6\n.text:0000000000401ee9\n.text:0000000000401eeb\n.text:0000000000401eee\n.text:0000000000401ef3\n.text:0000000000401ef5\n.text:0000000000401f00\n.text:0000000000401f02\n.text:0000000000401f05\n.text:0000000000401f0a\n.text:0000000000401f0d\n.text:0000000000401f10\n.text:0000000000401f15\n.text:0000000000401f17\n.text:0000000000401f19\n.text:0000000000401f1c\n.text:0000000000401f21\n.text:0000000000401f23\n.text:0000000000401f25\n.text:0000000000401f27\n.text:0000000000401f2a\n.text:0000000000401f2b\n.text:0000000000401f2d\n.text:0000000000401f2e\n'
p559
tp560
sS'strintcmp'
p561
(S'\n__stdcall strintcmp(char * a, char * b)\n'
p562
V\u000aint strintcmp(char *a,char *b)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  ulong uVar4;\u000a  byte bVar5;\u000a  ulong uVar6;\u000a  byte bVar7;\u000a  char *pcVar8;\u000a  byte *pbVar9;\u000a  char *pcVar10;\u000a  uint uVar11;\u000a  \u000a  bVar5 = *a;\u000a  bVar7 = *b;\u000a  if (bVar5 == 0x2d) {\u000a    do {\u000a      pcVar10 = a;\u000a      bVar5 = pcVar10[1];\u000a      a = pcVar10 + 1;\u000a    } while (bVar5 == 0x30);\u000a    if (bVar7 == 0x2d) {\u000a      do {\u000a        pcVar8 = b;\u000a        bVar7 = pcVar8[1];\u000a        b = pcVar8 + 1;\u000a      } while (bVar7 == 0x30);\u000a      if ((bVar7 == bVar5) && ((uint)bVar5 - 0x30 < 10)) {\u000a        lVar3 = 0;\u000a        do {\u000a          bVar5 = pcVar10[lVar3 + 2];\u000a          bVar7 = pcVar8[lVar3 + 2];\u000a          lVar3 = lVar3 + 1;\u000a          if (bVar7 != bVar5) break;\u000a        } while ((uint)bVar5 - 0x30 < 10);\u000a        a = a + lVar3;\u000a        b = b + lVar3;\u000a      }\u000a      uVar11 = (uint)bVar5;\u000a      uVar6 = 0;\u000a      while ((uint)bVar5 - 0x30 < 10) {\u000a        bVar5 = a[uVar6 + 1];\u000a        uVar6 = uVar6 + 1;\u000a      }\u000a      if ((uint)bVar7 - 0x30 < 10) {\u000a        uVar4 = 0;\u000a        do {\u000a          lVar3 = uVar4 + 1;\u000a          uVar4 = uVar4 + 1;\u000a        } while ((uint)(byte)b[lVar3] - 0x30 < 10);\u000a      }\u000a      else {\u000a        uVar4 = 0;\u000a      }\u000a      if (uVar6 != uVar4) {\u000a        iVar2 = -1;\u000a        if (uVar6 < uVar4) {\u000a          iVar2 = 1;\u000a        }\u000a        return iVar2;\u000a      }\u000a      iVar2 = 0;\u000a      if (uVar6 != 0) {\u000a        iVar2 = (uint)bVar7 - uVar11;\u000a      }\u000a      return iVar2;\u000a    }\u000a    iVar2 = -1;\u000a    if (9 < (uint)bVar5 - 0x30) {\u000a      if (bVar7 == 0x30) {\u000a        pbVar9 = (byte *)(b + 1);\u000a        do {\u000a          bVar7 = *pbVar9;\u000a          pbVar9 = pbVar9 + 1;\u000a        } while (bVar7 == 0x30);\u000a      }\u000a      return (int)-(uint)((uint)bVar7 - 0x30 < 10);\u000a    }\u000a  }\u000a  else {\u000a    if (bVar7 == 0x2d) {\u000a      pbVar9 = (byte *)(b + 1);\u000a      do {\u000a        bVar7 = *pbVar9;\u000a        pbVar9 = pbVar9 + 1;\u000a      } while (bVar7 == 0x30);\u000a      iVar2 = 1;\u000a      if (9 < (uint)bVar7 - 0x30) {\u000a        if (bVar5 == 0x30) {\u000a          pbVar9 = (byte *)(a + 1);\u000a          do {\u000a            bVar5 = *pbVar9;\u000a            pbVar9 = pbVar9 + 1;\u000a          } while (bVar5 == 0x30);\u000a        }\u000a        return (int)(-(uint)((uint)bVar5 - 0x30 < 10) & 1);\u000a      }\u000a    }\u000a    else {\u000a      while (bVar5 == 0x30) {\u000a        bVar5 = a[1];\u000a        a = a + 1;\u000a      }\u000a      while (bVar7 == 0x30) {\u000a        bVar7 = b[1];\u000a        b = b + 1;\u000a      }\u000a      uVar11 = (uint)bVar5;\u000a      uVar1 = (uint)bVar5;\u000a      if (bVar5 == bVar7) {\u000a        do {\u000a          uVar11 = uVar1;\u000a          if (9 < (uint)bVar5 - 0x30) break;\u000a          bVar5 = a[1];\u000a          a = a + 1;\u000a          bVar7 = b[1];\u000a          b = b + 1;\u000a          uVar11 = (uint)bVar5;\u000a          uVar1 = uVar11;\u000a        } while (bVar5 == bVar7);\u000a      }\u000a      if ((uint)bVar5 - 0x30 < 10) {\u000a        uVar6 = 0;\u000a        do {\u000a          lVar3 = uVar6 + 1;\u000a          uVar6 = uVar6 + 1;\u000a        } while ((uint)(byte)a[lVar3] - 0x30 < 10);\u000a      }\u000a      else {\u000a        uVar6 = 0;\u000a      }\u000a      if ((uint)bVar7 - 0x30 < 10) {\u000a        uVar4 = 0;\u000a        do {\u000a          lVar3 = uVar4 + 1;\u000a          uVar4 = uVar4 + 1;\u000a        } while ((uint)(byte)b[lVar3] - 0x30 < 10);\u000a      }\u000a      else {\u000a        uVar4 = 0;\u000a      }\u000a      if (uVar6 != uVar4) {\u000a        iVar2 = 1;\u000a        if (uVar6 < uVar4) {\u000a          iVar2 = -1;\u000a        }\u000a        return iVar2;\u000a      }\u000a      iVar2 = 0;\u000a      if (uVar6 != 0) {\u000a        iVar2 = uVar11 - (uint)bVar7;\u000a      }\u000a    }\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p563
S'JMP 0x004046e0\n'
p564
S'eb 0e\n'
p565
S'.text:00000000004046d0\n'
p566
tp567
sS'initialize_exit_failure'
p568
(S'\n__stdcall initialize_exit_failure()\n'
p569
V\u000avoid initialize_exit_failure(void)\u000a\u000a{\u000a  exit_failure = 3;\u000a  return;\u000a}\u000a\u000a
p570
S'MOV dword ptr [0x00609200],0x3\nRET\n'
p571
S'c7 05 56 75 20 00 03 00 00 00\nc3\n'
p572
S'.text:0000000000401ca0\n.text:0000000000401caa\n'
p573
tp574
sS'version_etc_va'
p575
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p576
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p577
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00404da0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x00404dac\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404dc1\nINC R9\nCMP R9,0xa\nJC 0x00404d80\nMOV R8,RSP\nCALL 0x004049e0\nADD RSP,0x58\nRET\n'
p578
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p579
S'.text:0000000000404d70\n.text:0000000000404d74\n.text:0000000000404d77\n.text:0000000000404d80\n.text:0000000000404d83\n.text:0000000000404d87\n.text:0000000000404d89\n.text:0000000000404d8c\n.text:0000000000404d90\n.text:0000000000404d94\n.text:0000000000404d97\n.text:0000000000404da0\n.text:0000000000404da4\n.text:0000000000404da8\n.text:0000000000404dac\n.text:0000000000404daf\n.text:0000000000404db3\n.text:0000000000404db6\n.text:0000000000404db8\n.text:0000000000404dbb\n.text:0000000000404dbf\n.text:0000000000404dc1\n.text:0000000000404dc4\n.text:0000000000404dc9\n.text:0000000000404dcd\n'
p580
tp581
sS'xzalloc'
p582
(S'\n__stdcall xzalloc(size_t s)\n'
p583
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p584
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00404f00\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x00401560\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p585
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 54 c5 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p586
S'.text:0000000000404ff0\n.text:0000000000404ff2\n.text:0000000000404ff3\n.text:0000000000404ff4\n.text:0000000000404ff7\n.text:0000000000404ffc\n.text:0000000000404fff\n.text:0000000000405001\n.text:0000000000405004\n.text:0000000000405007\n.text:000000000040500c\n.text:000000000040500f\n.text:0000000000405013\n.text:0000000000405014\n.text:0000000000405016\n'
p587
tp588
sS'eval6'
p589
(S'\n__stdcall eval6()\n'
p590
V\u000aVALUE * eval6(void)\u000a\u000a{\u000a  char *__s;\u000a  _Bool _Var1;\u000a  VALUE *v;\u000a  size_t i;\u000a  VALUE *v_00;\u000a  VALUE *v_01;\u000a  VALUE *pVVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  void *pvVar5;\u000a  undefined *puVar6;\u000a  ulong i_00;\u000a  char in_DIL;\u000a  \u000a  _Var1 = nextarg("+");\u000a  if (_Var1 != false) {\u000a    _Var1 = nomoreargs();\u000a    if (_Var1 != false) {\u000a      syntax_error();\u000a    }\u000a    __s = *args;\u000a    args = args + 1;\u000a    v = str_value(__s);\u000a    return v;\u000a  }\u000a  _Var1 = nextarg("length");\u000a  if (_Var1 != false) {\u000a    v = eval6();\u000a    tostring(v);\u000a    i = strlen((char *)v->u);\u000a    v_00 = int_value(i);\u000aLAB_004026ed:\u000a    freev(v);\u000a    return v_00;\u000a  }\u000a  _Var1 = nextarg("match");\u000a  if (_Var1 != false) {\u000a    v = eval6();\u000a    v_01 = eval6();\u000a    pVVar2 = v;\u000a    if (in_DIL != 0) {\u000a      pVVar2 = docolon(v,v_01);\u000a      freev(v);\u000a    }\u000a    goto LAB_004027ac;\u000a  }\u000a  _Var1 = nextarg("index");\u000a  if (_Var1 != false) {\u000a    v_01 = eval6();\u000a    v = eval6();\u000a    tostring(v_01);\u000a    tostring(v);\u000a    __s = (char *)v_01->u;\u000a    i = strcspn(__s,(char *)v->u);\u000a    i_00 = 0;\u000a    if (__s[i] != 0) {\u000a      i_00 = i + 1;\u000a    }\u000a    v_00 = int_value(i_00);\u000a    freev(v_01);\u000a    goto LAB_004026ed;\u000a  }\u000a  _Var1 = nextarg("substr");\u000a  if (_Var1 == false) {\u000a    v = eval7();\u000a    return v;\u000a  }\u000a  v = eval6();\u000a  v_00 = eval6();\u000a  v_01 = eval6();\u000a  tostring(v);\u000a  i = strlen((char *)v->u);\u000a  _Var1 = toarith(v_00);\u000a  if ((_Var1 == false) || (_Var1 = toarith(v_01), _Var1 == false)) {\u000aLAB_0040278c:\u000a    pVVar2 = str_value(\u000a                       "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                       + 0xca);\u000a  }\u000a  else {\u000a    sVar3 = getsize(&v_00->u);\u000a    sVar4 = getsize(&v_01->u);\u000a    if ((i <= sVar3 - 1) || (sVar4 + 1 < 2)) goto LAB_0040278c;\u000a    i_00 = (i - sVar3) + 1;\u000a    if (sVar4 < i_00) {\u000a      i_00 = sVar4;\u000a    }\u000a    pVVar2 = (VALUE *)xmalloc(0x10);\u000a    pVVar2->type = string;\u000a    pvVar5 = xmalloc(i_00 + 1);\u000a    *(void **)&pVVar2->u = pvVar5;\u000a    puVar6 = (undefined *)__mempcpy_chk(pvVar5,v->u + -1 + sVar3,i_00,0xffffffffffffffff);\u000a    *puVar6 = 0;\u000a  }\u000a  freev(v);\u000a  freev(v_00);\u000aLAB_004027ac:\u000a  freev(v_01);\u000a  return pVVar2;\u000a}\u000a\u000a
p591
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV EBP,EDI\nMOV EDI,0x406533\nCALL 0x00401f30\nTEST AL,AL\nJZ 0x00402601\nCALL 0x00401d60\nTEST AL,AL\nJZ 0x004025d9\nCALL 0x00401d70\nMOV RAX,qword ptr [0x006092d0]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [0x006092d0],RCX\nMOV RDI,qword ptr [RAX]\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004029c0\nMOV EDI,0x406561\nCALL 0x00401f30\nTEST AL,AL\nJZ 0x0040263c\nMOVZX EDI,BPL\nCALL 0x004025b0\nMOV RBX,RAX\nMOV RDI,RBX\nCALL 0x00402270\nMOV RDI,qword ptr [RBX + 0x8]\nCALL 0x004014f0\nMOV RDI,RAX\nCALL 0x00401f90\nMOV RBP,RAX\nJMP 0x004026ed\nMOV EDI,0x406568\nCALL 0x00401f30\nTEST AL,AL\nJZ 0x00402688\nMOVZX EBX,BPL\nMOV EDI,EBX\nCALL 0x004025b0\nMOV R13,RAX\nMOV EDI,EBX\nCALL 0x004025b0\nMOV RBX,RAX\nTEST BPL,BPL\nJZ 0x00402680\nMOV RDI,R13\nMOV RSI,RBX\nCALL 0x00402830\nMOV RBP,RAX\nMOV RDI,R13\nCALL 0x00401f70\nMOV R13,RBP\nMOV RDI,RBX\nJMP 0x004027ac\nMOV EDI,0x40656e\nCALL 0x00401f30\nTEST AL,AL\nJZ 0x004026fd\nMOVZX EBX,BPL\nMOV EDI,EBX\nCALL 0x004025b0\nMOV R14,RAX\nMOV EDI,EBX\nCALL 0x004025b0\nMOV RBX,RAX\nMOV RDI,R14\nCALL 0x00402270\nMOV RDI,RBX\nCALL 0x00402270\nMOV RBP,qword ptr [R14 + 0x8]\nMOV RSI,qword ptr [RBX + 0x8]\nMOV RDI,RBP\nCALL 0x00401590\nXOR EDI,EDI\nCMP byte ptr [RBP + RAX*0x1],0x0\nLEA RAX,[RAX + 0x1]\nCMOVNZ RDI,RAX\nCALL 0x00401f90\nMOV RBP,RAX\nMOV RDI,R14\nCALL 0x00401f70\nMOV RDI,RBX\nCALL 0x00401f70\nMOV RAX,RBP\nJMP 0x004027b4\nMOV EDI,0x406574\nCALL 0x00401f30\nTEST AL,AL\nJZ 0x004027c3\nMOVZX EBX,BPL\nMOV EDI,EBX\nCALL 0x004025b0\nMOV R12,RAX\nMOV EDI,EBX\nCALL 0x004025b0\nMOV R14,RAX\nMOV EDI,EBX\nCALL 0x004025b0\nMOV R15,RAX\nMOV RDI,R12\nCALL 0x00402270\nMOV RDI,qword ptr [R12 + 0x8]\nCALL 0x004014f0\nMOV RBP,RAX\nMOV RDI,R14\nCALL 0x00402410\nTEST AL,AL\nJZ 0x0040278c\nMOV RDI,R15\nCALL 0x00402410\nTEST AL,AL\nJZ 0x0040278c\nMOV RDI,R14\nADD RDI,0x8\nCALL 0x00402a00\nMOV RBX,RAX\nMOV RDI,R15\nADD RDI,0x8\nCALL 0x00402a00\nLEA RCX,[RBX + -0x1]\nCMP RCX,RBP\nJNC 0x0040278c\nLEA RCX,[RAX + 0x1]\nCMP RCX,0x1\nJA 0x004027da\nMOV EDI,0x406cf9\nCALL 0x004029c0\nMOV R13,RAX\nMOV RDI,R12\nCALL 0x00401f70\nMOV RDI,R14\nCALL 0x00401f70\nMOV RDI,R15\nCALL 0x00401f70\nMOV RAX,R13\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOVZX EDI,BPL\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00402a40\nSUB RBP,RBX\nINC RBP\nCMP RAX,RBP\nCMOVC RBP,RAX\nMOV EDI,0x10\nCALL 0x00404f00\nMOV R13,RAX\nMOV dword ptr [R13],0x1\nLEA RDI,[RBP + 0x1]\nCALL 0x00404f00\nMOV qword ptr [R13 + 0x8],RAX\nMOV RCX,qword ptr [R12 + 0x8]\nLEA RSI,[RCX + RBX*0x1 + -0x1]\nMOV RCX,-0x1\nMOV RDI,RAX\nMOV RDX,RBP\nCALL 0x004013f0\nMOV byte ptr [RAX],0x0\nJMP 0x00402799\n'
p592
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n89 fd\nbf 33 65 40 00\ne8 69 f9 ff ff\n84 c0\n74 36\ne8 90 f7 ff ff\n84 c0\n74 05\ne8 97 f7 ff ff\n48 8b 05 f0 6c 20 00\n48 8d 48 08\n48 89 0d e5 6c 20 00\n48 8b 38\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 bf 03 00 00\nbf 61 65 40 00\ne8 25 f9 ff ff\n84 c0\n74 2d\n40 0f b6 fd\ne8 98 ff ff ff\n48 89 c3\n48 89 df\ne8 4d fc ff ff\n48 8b 7b 08\ne8 c4 ee ff ff\n48 89 c7\ne8 5c f9 ff ff\n48 89 c5\ne9 b1 00 00 00\nbf 68 65 40 00\ne8 ea f8 ff ff\n84 c0\n74 3e\n40 0f b6 dd\n89 df\ne8 5b ff ff ff\n49 89 c5\n89 df\ne8 51 ff ff ff\n48 89 c3\n40 84 ed\n74 19\n4c 89 ef\n48 89 de\ne8 be 01 00 00\n48 89 c5\n4c 89 ef\ne8 f3 f8 ff ff\n49 89 ed\n48 89 df\ne9 24 01 00 00\nbf 6e 65 40 00\ne8 9e f8 ff ff\n84 c0\n74 67\n40 0f b6 dd\n89 df\ne8 0f ff ff ff\n49 89 c6\n89 df\ne8 05 ff ff ff\n48 89 c3\n4c 89 f7\ne8 ba fb ff ff\n48 89 df\ne8 b2 fb ff ff\n49 8b 6e 08\n48 8b 73 08\n48 89 ef\ne8 c2 ee ff ff\n31 ff\n80 7c 05 00 00\n48 8d 40 01\n48 0f 45 f8\ne8 ae f8 ff ff\n48 89 c5\n4c 89 f7\ne8 83 f8 ff ff\n48 89 df\ne8 7b f8 ff ff\n48 89 e8\ne9 b7 00 00 00\nbf 74 65 40 00\ne8 29 f8 ff ff\n84 c0\n0f 84 b4 00 00 00\n40 0f b6 dd\n89 df\ne8 96 fe ff ff\n49 89 c4\n89 df\ne8 8c fe ff ff\n49 89 c6\n89 df\ne8 82 fe ff ff\n49 89 c7\n4c 89 e7\ne8 37 fb ff ff\n49 8b 7c 24 08\ne8 ad ed ff ff\n48 89 c5\n4c 89 f7\ne8 c2 fc ff ff\n84 c0\n74 3a\n4c 89 ff\ne8 b6 fc ff ff\n84 c0\n74 2e\n4c 89 f7\n48 83 c7 08\ne8 96 02 00 00\n48 89 c3\n4c 89 ff\n48 83 c7 08\ne8 87 02 00 00\n48 8d 4b ff\n48 39 e9\n73 0a\n48 8d 48 01\n48 83 f9 01\n77 4e\nbf f9 6c 40 00\ne8 2a 02 00 00\n49 89 c5\n4c 89 e7\ne8 cf f7 ff ff\n4c 89 f7\ne8 c7 f7 ff ff\n4c 89 ff\ne8 bf f7 ff ff\n4c 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n40 0f b6 fd\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 66 02 00 00\n48 29 dd\n48 ff c5\n48 39 e8\n48 0f 42 e8\nbf 10 00 00 00\ne8 0f 27 00 00\n49 89 c5\n41 c7 45 00 01 00 00 00\n48 8d 7d 01\ne8 fb 26 00 00\n49 89 45 08\n49 8b 4c 24 08\n48 8d 74 19 ff\n48 c7 c1 ff ff ff ff\n48 89 c7\n48 89 ea\ne8 cb eb ff ff\nc6 00 00\ne9 6c ff ff ff\n'
p593
S'.text:00000000004025b0\n.text:00000000004025b1\n.text:00000000004025b3\n.text:00000000004025b5\n.text:00000000004025b7\n.text:00000000004025b9\n.text:00000000004025ba\n.text:00000000004025bb\n.text:00000000004025bd\n.text:00000000004025c2\n.text:00000000004025c7\n.text:00000000004025c9\n.text:00000000004025cb\n.text:00000000004025d0\n.text:00000000004025d2\n.text:00000000004025d4\n.text:00000000004025d9\n.text:00000000004025e0\n.text:00000000004025e4\n.text:00000000004025eb\n.text:00000000004025ee\n.text:00000000004025f2\n.text:00000000004025f3\n.text:00000000004025f5\n.text:00000000004025f7\n.text:00000000004025f9\n.text:00000000004025fb\n.text:00000000004025fc\n.text:0000000000402601\n.text:0000000000402606\n.text:000000000040260b\n.text:000000000040260d\n.text:000000000040260f\n.text:0000000000402613\n.text:0000000000402618\n.text:000000000040261b\n.text:000000000040261e\n.text:0000000000402623\n.text:0000000000402627\n.text:000000000040262c\n.text:000000000040262f\n.text:0000000000402634\n.text:0000000000402637\n.text:000000000040263c\n.text:0000000000402641\n.text:0000000000402646\n.text:0000000000402648\n.text:000000000040264a\n.text:000000000040264e\n.text:0000000000402650\n.text:0000000000402655\n.text:0000000000402658\n.text:000000000040265a\n.text:000000000040265f\n.text:0000000000402662\n.text:0000000000402665\n.text:0000000000402667\n.text:000000000040266a\n.text:000000000040266d\n.text:0000000000402672\n.text:0000000000402675\n.text:0000000000402678\n.text:000000000040267d\n.text:0000000000402680\n.text:0000000000402683\n.text:0000000000402688\n.text:000000000040268d\n.text:0000000000402692\n.text:0000000000402694\n.text:0000000000402696\n.text:000000000040269a\n.text:000000000040269c\n.text:00000000004026a1\n.text:00000000004026a4\n.text:00000000004026a6\n.text:00000000004026ab\n.text:00000000004026ae\n.text:00000000004026b1\n.text:00000000004026b6\n.text:00000000004026b9\n.text:00000000004026be\n.text:00000000004026c2\n.text:00000000004026c6\n.text:00000000004026c9\n.text:00000000004026ce\n.text:00000000004026d0\n.text:00000000004026d5\n.text:00000000004026d9\n.text:00000000004026dd\n.text:00000000004026e2\n.text:00000000004026e5\n.text:00000000004026e8\n.text:00000000004026ed\n.text:00000000004026f0\n.text:00000000004026f5\n.text:00000000004026f8\n.text:00000000004026fd\n.text:0000000000402702\n.text:0000000000402707\n.text:0000000000402709\n.text:000000000040270f\n.text:0000000000402713\n.text:0000000000402715\n.text:000000000040271a\n.text:000000000040271d\n.text:000000000040271f\n.text:0000000000402724\n.text:0000000000402727\n.text:0000000000402729\n.text:000000000040272e\n.text:0000000000402731\n.text:0000000000402734\n.text:0000000000402739\n.text:000000000040273e\n.text:0000000000402743\n.text:0000000000402746\n.text:0000000000402749\n.text:000000000040274e\n.text:0000000000402750\n.text:0000000000402752\n.text:0000000000402755\n.text:000000000040275a\n.text:000000000040275c\n.text:000000000040275e\n.text:0000000000402761\n.text:0000000000402765\n.text:000000000040276a\n.text:000000000040276d\n.text:0000000000402770\n.text:0000000000402774\n.text:0000000000402779\n.text:000000000040277d\n.text:0000000000402780\n.text:0000000000402782\n.text:0000000000402786\n.text:000000000040278a\n.text:000000000040278c\n.text:0000000000402791\n.text:0000000000402796\n.text:0000000000402799\n.text:000000000040279c\n.text:00000000004027a1\n.text:00000000004027a4\n.text:00000000004027a9\n.text:00000000004027ac\n.text:00000000004027b1\n.text:00000000004027b4\n.text:00000000004027b8\n.text:00000000004027b9\n.text:00000000004027bb\n.text:00000000004027bd\n.text:00000000004027bf\n.text:00000000004027c1\n.text:00000000004027c2\n.text:00000000004027c3\n.text:00000000004027c7\n.text:00000000004027cb\n.text:00000000004027cc\n.text:00000000004027ce\n.text:00000000004027d0\n.text:00000000004027d2\n.text:00000000004027d4\n.text:00000000004027d5\n.text:00000000004027da\n.text:00000000004027dd\n.text:00000000004027e0\n.text:00000000004027e3\n.text:00000000004027e7\n.text:00000000004027ec\n.text:00000000004027f1\n.text:00000000004027f4\n.text:00000000004027fc\n.text:0000000000402800\n.text:0000000000402805\n.text:0000000000402809\n.text:000000000040280e\n.text:0000000000402813\n.text:000000000040281a\n.text:000000000040281d\n.text:0000000000402820\n.text:0000000000402825\n.text:0000000000402828\n'
p594
tp595
sS'eval7'
p596
(S'\n__stdcall eval7()\n'
p597
V\u000aVALUE * eval7(void)\u000a\u000a{\u000a  char *s;\u000a  _Bool _Var1;\u000a  VALUE *pVVar2;\u000a  \u000a  _Var1 = nomoreargs();\u000a  if (_Var1 != false) {\u000a    syntax_error();\u000a  }\u000a  _Var1 = nextarg("(");\u000a  if (_Var1 != false) {\u000a    pVVar2 = eval();\u000a    _Var1 = nextarg(")");\u000a    if (_Var1 == false) {\u000a      syntax_error();\u000a    }\u000a    return pVVar2;\u000a  }\u000a  _Var1 = nextarg(")");\u000a  if (_Var1 != false) {\u000a    syntax_error();\u000a  }\u000a  s = *args;\u000a  args = args + 1;\u000a  pVVar2 = str_value(s);\u000a  return pVVar2;\u000a}\u000a\u000a
p598
S'PUSH RBX\nMOV EBX,EDI\nCALL 0x00401d60\nTEST AL,AL\nJZ 0x00402a51\nCALL 0x00401d70\nMOV EDI,0x40657b\nCALL 0x00401f30\nTEST AL,AL\nJZ 0x00402a82\nMOVZX EDI,BL\nCALL 0x00401cb0\nMOV RBX,RAX\nMOV EDI,0x407172\nCALL 0x00401f30\nTEST AL,AL\nJNZ 0x00402a7d\nCALL 0x00401d70\nMOV RAX,RBX\nPOP RBX\nRET\nMOV EDI,0x407172\nCALL 0x00401f30\nTEST AL,AL\nJZ 0x00402a95\nCALL 0x00401d70\nMOV RAX,qword ptr [0x006092d0]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [0x006092d0],RCX\nMOV RDI,qword ptr [RAX]\nPOP RBX\nJMP 0x004029c0\n'
p599
S'53\n89 fb\ne8 18 f3 ff ff\n84 c0\n74 05\ne8 1f f3 ff ff\nbf 7b 65 40 00\ne8 d5 f4 ff ff\n84 c0\n74 23\n0f b6 fb\ne8 49 f2 ff ff\n48 89 c3\nbf 72 71 40 00\ne8 bc f4 ff ff\n84 c0\n75 05\ne8 f3 f2 ff ff\n48 89 d8\n5b\nc3\nbf 72 71 40 00\ne8 a4 f4 ff ff\n84 c0\n74 05\ne8 db f2 ff ff\n48 8b 05 34 68 20 00\n48 8d 48 08\n48 89 0d 29 68 20 00\n48 8b 38\n5b\ne9 10 ff ff ff\n'
p600
S'.text:0000000000402a40\n.text:0000000000402a41\n.text:0000000000402a43\n.text:0000000000402a48\n.text:0000000000402a4a\n.text:0000000000402a4c\n.text:0000000000402a51\n.text:0000000000402a56\n.text:0000000000402a5b\n.text:0000000000402a5d\n.text:0000000000402a5f\n.text:0000000000402a62\n.text:0000000000402a67\n.text:0000000000402a6a\n.text:0000000000402a6f\n.text:0000000000402a74\n.text:0000000000402a76\n.text:0000000000402a78\n.text:0000000000402a7d\n.text:0000000000402a80\n.text:0000000000402a81\n.text:0000000000402a82\n.text:0000000000402a87\n.text:0000000000402a8c\n.text:0000000000402a8e\n.text:0000000000402a90\n.text:0000000000402a95\n.text:0000000000402a9c\n.text:0000000000402aa0\n.text:0000000000402aa7\n.text:0000000000402aaa\n.text:0000000000402aab\n'
p601
tp602
sS'eval4'
p603
(S'\n__stdcall eval4()\n'
p604
V\u000aVALUE * eval4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  VALUE *v;\u000a  VALUE *v_00;\u000a  undefined8 uVar3;\u000a  code *pcVar4;\u000a  int iVar5;\u000a  char in_DIL;\u000a  \u000a  v = eval5();\u000a  do {\u000a    _Var1 = nextarg("*");\u000a    iVar5 = 0;\u000a    if (_Var1 == false) {\u000a      _Var1 = nextarg("/");\u000a      iVar5 = 1;\u000a      if (_Var1 == false) {\u000a        _Var1 = nextarg("%");\u000a        iVar5 = 2;\u000a        if (_Var1 == false) {\u000a          return v;\u000a        }\u000a      }\u000a    }\u000a    v_00 = eval5();\u000a    if (in_DIL != 0) {\u000a      _Var1 = toarith(v);\u000a      if ((_Var1 == false) || (_Var1 = toarith(v_00), _Var1 == false)) {\u000a        uVar3 = dcgettext(0,"non-integer argument",5);\u000a        error(2,0,uVar3,uVar3);\u000a      }\u000a      if (iVar5 == 0) {\u000a        pcVar4 = mpz_mul;\u000a      }\u000a      else {\u000a        iVar2 = mpz_sgn(&v_00->u);\u000a        if (iVar2 == 0) {\u000a          uVar3 = dcgettext(0,"division by zero",5);\u000a          error(2,0,uVar3,uVar3);\u000a        }\u000a        pcVar4 = mpz_tdiv_r;\u000a        if (iVar5 == 1) {\u000a          pcVar4 = mpz_tdiv_q;\u000a        }\u000a      }\u000a      (*pcVar4)(&v->u,&v->u,&v_00->u);\u000a    }\u000a    freev(v_00);\u000a  } while( true );\u000a}\u000a\u000a
p605
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOVZX R13D,DIL\nMOV EDI,R13D\nCALL 0x004024a0\nMOV R14,RAX\nMOV R15,R14\nADD R15,0x8\nMOV R12D,0x402550\nJMP 0x00402308\nMOV RDI,RBX\nCALL 0x00401f70\nMOV EDI,0x40654a\nCALL 0x00401f30\nTEST AL,AL\nMOV EBP,0x0\nJNZ 0x00402345\nMOV EDI,0x40666e\nCALL 0x00401f30\nMOV EBP,0x1\nTEST AL,AL\nJNZ 0x00402345\nMOV EDI,0x40654c\nCALL 0x00401f30\nMOV EBP,0x2\nTEST AL,AL\nJZ 0x004023ef\nMOV EDI,R13D\nCALL 0x004024a0\nMOV RBX,RAX\nTEST R13B,R13B\nJZ 0x00402300\nMOV RDI,R14\nCALL 0x00402410\nTEST AL,AL\nJZ 0x0040236d\nMOV RDI,RBX\nCALL 0x00402410\nTEST AL,AL\nJNZ 0x00402392\nXOR EDI,EDI\nMOV ESI,0x406535\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004016c0\nTEST EBP,EBP\nJZ 0x004023d6\nLEA RDI,[RBX + 0x8]\nCALL 0x00401e70\nTEST EAX,EAX\nJNZ 0x004023c8\nXOR EDI,EDI\nMOV ESI,0x40654e\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004016c0\nCMP EBP,0x1\nMOV EAX,0x402580\nCMOVZ RAX,R12\nJMP 0x004023db\nMOV EAX,0x402510\nMOV RDX,RBX\nADD RDX,0x8\nMOV RDI,R15\nMOV RSI,R15\nCALL RAX\nJMP 0x00402300\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p606
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 0f b6 ef\n44 89 ef\ne8 b9 01 00 00\n49 89 c6\n4d 89 f7\n49 83 c7 08\n41 bc 50 25 40 00\neb 0f\n48 89 df\ne8 68 fc ff ff\nbf 4a 65 40 00\ne8 1e fc ff ff\n84 c0\nbd 00 00 00 00\n75 2a\nbf 6e 66 40 00\ne8 0b fc ff ff\nbd 01 00 00 00\n84 c0\n75 17\nbf 4c 65 40 00\ne8 f8 fb ff ff\nbd 02 00 00 00\n84 c0\n0f 84 aa 00 00 00\n44 89 ef\ne8 53 01 00 00\n48 89 c3\n45 84 ed\n74 ab\n4c 89 f7\ne8 b3 00 00 00\n84 c0\n74 0c\n48 89 df\ne8 a7 00 00 00\n84 c0\n75 25\n31 ff\nbe 35 65 40 00\nba 05 00 00 00\ne8 42 f1 ff ff\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 2e f3 ff ff\n85 ed\n74 40\n48 8d 7b 08\ne8 d1 fa ff ff\n85 c0\n75 25\n31 ff\nbe 4e 65 40 00\nba 05 00 00 00\ne8 0c f1 ff ff\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 f8 f2 ff ff\n83 fd 01\nb8 80 25 40 00\n49 0f 44 c4\neb 05\nb8 10 25 40 00\n48 89 da\n48 83 c2 08\n4c 89 ff\n4c 89 fe\nff d0\ne9 11 ff ff ff\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p607
S'.text:00000000004022d0\n.text:00000000004022d1\n.text:00000000004022d3\n.text:00000000004022d5\n.text:00000000004022d7\n.text:00000000004022d9\n.text:00000000004022da\n.text:00000000004022db\n.text:00000000004022df\n.text:00000000004022e2\n.text:00000000004022e7\n.text:00000000004022ea\n.text:00000000004022ed\n.text:00000000004022f1\n.text:00000000004022f7\n.text:0000000000402300\n.text:0000000000402303\n.text:0000000000402308\n.text:000000000040230d\n.text:0000000000402312\n.text:0000000000402314\n.text:0000000000402319\n.text:000000000040231b\n.text:0000000000402320\n.text:0000000000402325\n.text:000000000040232a\n.text:000000000040232c\n.text:000000000040232e\n.text:0000000000402333\n.text:0000000000402338\n.text:000000000040233d\n.text:000000000040233f\n.text:0000000000402345\n.text:0000000000402348\n.text:000000000040234d\n.text:0000000000402350\n.text:0000000000402353\n.text:0000000000402355\n.text:0000000000402358\n.text:000000000040235d\n.text:000000000040235f\n.text:0000000000402361\n.text:0000000000402364\n.text:0000000000402369\n.text:000000000040236b\n.text:000000000040236d\n.text:000000000040236f\n.text:0000000000402374\n.text:0000000000402379\n.text:000000000040237e\n.text:0000000000402381\n.text:0000000000402386\n.text:0000000000402388\n.text:000000000040238a\n.text:000000000040238d\n.text:0000000000402392\n.text:0000000000402394\n.text:0000000000402396\n.text:000000000040239a\n.text:000000000040239f\n.text:00000000004023a1\n.text:00000000004023a3\n.text:00000000004023a5\n.text:00000000004023aa\n.text:00000000004023af\n.text:00000000004023b4\n.text:00000000004023b7\n.text:00000000004023bc\n.text:00000000004023be\n.text:00000000004023c0\n.text:00000000004023c3\n.text:00000000004023c8\n.text:00000000004023cb\n.text:00000000004023d0\n.text:00000000004023d4\n.text:00000000004023d6\n.text:00000000004023db\n.text:00000000004023de\n.text:00000000004023e2\n.text:00000000004023e5\n.text:00000000004023e8\n.text:00000000004023ea\n.text:00000000004023ef\n.text:00000000004023f2\n.text:00000000004023f6\n.text:00000000004023f7\n.text:00000000004023f9\n.text:00000000004023fb\n.text:00000000004023fd\n.text:00000000004023ff\n.text:0000000000402400\n'
p608
tp609
sS'eval5'
p610
(S'\n__stdcall eval5()\n'
p611
V\u000aVALUE * eval5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  VALUE *sv;\u000a  VALUE *pv;\u000a  VALUE *pVVar2;\u000a  char in_DIL;\u000a  \u000a  sv = eval6();\u000a  while( true ) {\u000a    _Var1 = nextarg(":");\u000a    if (_Var1 == false) break;\u000a    pv = eval6();\u000a    pVVar2 = sv;\u000a    if (in_DIL != 0) {\u000a      pVVar2 = docolon(sv,pv);\u000a      freev(sv);\u000a    }\u000a    freev(pv);\u000a    sv = pVVar2;\u000a  }\u000a  return sv;\u000a}\u000a\u000a
p612
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOVZX R15D,DIL\nMOV EDI,R15D\nCALL 0x004025b0\nMOV R14,RAX\nJMP 0x004024c8\nMOV RDI,RBX\nCALL 0x00401f70\nMOV EDI,0x40655f\nCALL 0x00401f30\nTEST AL,AL\nJZ 0x00402501\nMOV EDI,R15D\nCALL 0x004025b0\nMOV RBX,RAX\nTEST R15B,R15B\nJZ 0x004024c0\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00402830\nMOV RBP,RAX\nMOV RDI,R14\nCALL 0x00401f70\nMOV R14,RBP\nJMP 0x004024c0\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p613
S'55\n41 57\n41 56\n53\n50\n44 0f b6 ff\n44 89 ff\ne8 fd 00 00 00\n49 89 c6\neb 10\n48 89 df\ne8 a8 fa ff ff\nbf 5f 65 40 00\ne8 5e fa ff ff\n84 c0\n74 2b\n44 89 ff\ne8 d2 00 00 00\n48 89 c3\n45 84 ff\n74 da\n4c 89 f7\n48 89 de\ne8 3f 03 00 00\n48 89 c5\n4c 89 f7\ne8 74 fa ff ff\n49 89 ee\neb bf\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p614
S'.text:00000000004024a0\n.text:00000000004024a1\n.text:00000000004024a3\n.text:00000000004024a5\n.text:00000000004024a6\n.text:00000000004024a7\n.text:00000000004024ab\n.text:00000000004024ae\n.text:00000000004024b3\n.text:00000000004024b6\n.text:00000000004024c0\n.text:00000000004024c3\n.text:00000000004024c8\n.text:00000000004024cd\n.text:00000000004024d2\n.text:00000000004024d4\n.text:00000000004024d6\n.text:00000000004024d9\n.text:00000000004024de\n.text:00000000004024e1\n.text:00000000004024e4\n.text:00000000004024e6\n.text:00000000004024e9\n.text:00000000004024ec\n.text:00000000004024f1\n.text:00000000004024f4\n.text:00000000004024f7\n.text:00000000004024fc\n.text:00000000004024ff\n.text:0000000000402501\n.text:0000000000402504\n.text:0000000000402508\n.text:0000000000402509\n.text:000000000040250b\n.text:000000000040250d\n.text:000000000040250e\n'
p615
tp616
sS'gettext_quote'
p617
(S'\n__stdcall gettext_quote(char * msgid)\n'
p618
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00406bc0;\u000a        pcVar2 = &DAT_00406bc4;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p619
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004014c0\nCMP RAX,RBX\nJNZ 0x00404388\nCALL 0x004055c0\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00404390\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404338\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406bb0\nMOV EAX,0x406bb4\nJMP 0x00404384\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00404390\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404376\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406bc0\nMOV EAX,0x406bc4\nJMP 0x00404384\nCMP R14D,0x9\nMOV ECX,0x406ba4\nMOV EAX,0x406ba8\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p620
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 d7 d1 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 c9 12 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 b0 6b 40 00\nb8 b4 6b 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 c0 6b 40 00\nb8 c4 6b 40 00\neb 0e\n41 83 fe 09\nb9 a4 6b 40 00\nb8 a8 6b 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p621
S'.text:00000000004042d0\n.text:00000000004042d1\n.text:00000000004042d3\n.text:00000000004042d4\n.text:00000000004042d7\n.text:00000000004042da\n.text:00000000004042dc\n.text:00000000004042e1\n.text:00000000004042e4\n.text:00000000004042e9\n.text:00000000004042ec\n.text:00000000004042f2\n.text:00000000004042f7\n.text:00000000004042fa\n.text:00000000004042ff\n.text:0000000000404304\n.text:0000000000404309\n.text:000000000040430f\n.text:0000000000404315\n.text:0000000000404318\n.text:000000000040431a\n.text:000000000040431c\n.text:0000000000404321\n.text:0000000000404325\n.text:0000000000404327\n.text:0000000000404329\n.text:000000000040432c\n.text:0000000000404331\n.text:0000000000404336\n.text:0000000000404338\n.text:000000000040433d\n.text:0000000000404342\n.text:0000000000404347\n.text:000000000040434d\n.text:0000000000404353\n.text:0000000000404356\n.text:0000000000404358\n.text:000000000040435a\n.text:000000000040435f\n.text:0000000000404363\n.text:0000000000404365\n.text:0000000000404367\n.text:000000000040436a\n.text:000000000040436f\n.text:0000000000404374\n.text:0000000000404376\n.text:000000000040437a\n.text:000000000040437f\n.text:0000000000404384\n.text:0000000000404388\n.text:0000000000404389\n.text:000000000040438b\n.text:000000000040438c\n'
p622
tp623
sS'fclose'
p624
(S'\n__stdcall fclose(FILE * __stream)\n'
p625
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00609088)();\u000a  return iVar1;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x00609088]\n'
p627
S'ff 25 e2 7b 20 00\n'
p628
S'.plt:00000000004014a0\n'
p629
tp630
sS'__ctype_get_mb_cur_max'
p631
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p632
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_006090a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p633
S'JMP qword ptr [0x006090a8]\n'
p634
S'ff 25 c2 7b 20 00\n'
p635
S'.plt:00000000004014e0\n'
p636
tp637
sS'quotearg_n_style'
p638
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p639
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p640
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00404000\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00403dd0\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p641
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p642
S'.text:0000000000403fc0\n.text:0000000000403fc1\n.text:0000000000403fc3\n.text:0000000000403fc4\n.text:0000000000403fc8\n.text:0000000000403fcb\n.text:0000000000403fcd\n.text:0000000000403fd2\n.text:0000000000403fd5\n.text:0000000000403fda\n.text:0000000000403fe1\n.text:0000000000403fe3\n.text:0000000000403fe6\n.text:0000000000403fe9\n.text:0000000000403fee\n.text:0000000000403ff2\n.text:0000000000403ff3\n.text:0000000000403ff5\n.text:0000000000403ff6\n'
p643
tp644
sS'quote_n'
p645
(S'\n__stdcall quote_n(char * arg)\n'
p646
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p647
S'MOV RDX,-0x1\nJMP 0x00404290\n'
p648
S'48 c7 c2 ff ff ff ff\neb d7\n'
p649
S'.text:00000000004042b0\n.text:00000000004042b7\n'
p650
tp651
sS'quotearg_alloc'
p652
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p653
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p654
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x00403c40\n'
p655
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p656
S'.text:0000000000403c30\n.text:0000000000403c33\n.text:0000000000403c35\n.text:0000000000403c38\n'
p657
tp658
sS'close_stdout_set_file_name'
p659
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p660
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p661
S'MOV qword ptr [0x006092d8],RDI\nRET\n'
p662
S'48 89 3d 91 67 20 00\nc3\n'
p663
S'.text:0000000000402b40\n.text:0000000000402b47\n'
p664
tp665
sS'mpz_get_str'
p666
(S'\n__stdcall mpz_get_str()\n'
p667
V\u000achar * mpz_get_str(void)\u000a\u000a{\u000a  char *string;\u000a  intmax_t *in_RDI;\u000a  char buf [21];\u000a  char acStack24 [24];\u000a  \u000a  string = imaxtostr(*in_RDI,acStack24);\u000a  string = xstrdup(string);\u000a  return string;\u000a}\u000a\u000a
p668
S'SUB RSP,0x18\nMOV RDI,qword ptr [RDI]\nMOV RSI,RSP\nCALL 0x00402c20\nMOV RDI,RAX\nCALL 0x00405070\nADD RSP,0x18\nRET\n'
p669
S'48 83 ec 18\n48 8b 3f\n48 89 e6\ne8 01 01 00 00\n48 89 c7\ne8 49 25 00 00\n48 83 c4 18\nc3\n'
p670
S'.text:0000000000402b10\n.text:0000000000402b14\n.text:0000000000402b17\n.text:0000000000402b1a\n.text:0000000000402b1f\n.text:0000000000402b22\n.text:0000000000402b27\n.text:0000000000402b2b\n'
p671
tp672
sS'parse_long_options'
p673
(S'\n__stdcall parse_long_options(char * * argv, char * command_name, char * package, char * version, anon_subr_void_int * usage_func)\n'
p674
V\u000avoid parse_long_options(char **argv,char *command_name,char *package,char *version,\u000a                       void (*usage_func)(int),...)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  char in_AL;\u000a  int iVar2;\u000a  code *in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_f8;\u000a  undefined local_d8 [48];\u000a  undefined4 local_a8;\u000a  undefined4 local_98;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  \u000a  uVar1 = opterr;\u000a  if (in_AL != 0) {\u000a    local_a8 = in_XMM0_Da;\u000a    local_98 = in_XMM1_Da;\u000a    local_88 = in_XMM2_Da;\u000a    local_78 = in_XMM3_Da;\u000a    local_68 = in_XMM4_Da;\u000a    local_58 = in_XMM5_Da;\u000a    local_48 = in_XMM6_Da;\u000a    local_38 = in_XMM7_Da;\u000a  }\u000a  opterr = 0;\u000a  if ((int)argv != 2) {\u000a    optind = 0;\u000a    opterr = uVar1;\u000a    return;\u000a  }\u000a  iVar2 = getopt_long(argv,command_name,&DAT_00406533,long_options,0);\u000a  if (iVar2 != 0x76) {\u000a    if (iVar2 != 0x68) {\u000a      optind = 0;\u000a      opterr = uVar1;\u000a      return;\u000a    }\u000a    (*in_R9)(0);\u000a  }\u000a  local_f8.reg_save_area = local_d8;\u000a  local_f8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_f8.fp_offset = 0x30;\u000a  local_f8.gp_offset = 0x30;\u000a  version_etc_va(stdout,package,version,(char *)usage_func,&local_f8);\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(0);\u000a}\u000a\u000a
p675
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nSUB RSP,0xd0\nMOV RBX,R9\nMOV R14,R8\nMOV R15,RCX\nMOV R12,RDX\nTEST AL,AL\nJZ 0x00402d36\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV EBP,dword ptr [0x006092a0]\nMOV dword ptr [0x006092a0],0x0\nCMP EDI,0x2\nJNZ 0x00402d67\nMOV EDX,0x406533\nMOV ECX,0x4065d0\nXOR R8D,R8D\nCALL 0x00401500\nCMP EAX,0x76\nJZ 0x00402d8b\nCMP EAX,0x68\nJZ 0x00402d87\nMOV dword ptr [0x006092a0],EBP\nMOV dword ptr [0x00609270],0x0\nADD RSP,0xd0\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EDI,EDI\nCALL RBX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x30\nMOV RDI,qword ptr [0x00609268]\nMOV R8,RSP\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nCALL 0x00404d70\nXOR EDI,EDI\nCALL 0x00401700\n'
p676
S'55\n41 57\n41 56\n41 54\n53\n48 81 ec d0 00 00 00\n4c 89 cb\n4d 89 c6\n49 89 cf\n49 89 d4\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n8b 2d 64 65 20 00\nc7 05 5a 65 20 00 00 00 00 00\n83 ff 02\n75 1c\nba 33 65 40 00\nb9 d0 65 40 00\n45 31 c0\ne8 a3 e7 ff ff\n83 f8 76\n74 29\n83 f8 68\n74 20\n89 2d 33 65 20 00\nc7 05 f9 64 20 00 00 00 00 00\n48 81 c4 d0 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n31 ff\nff d3\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 30 00 00 00\n48 8b 3d b0 64 20 00\n49 89 e0\n4c 89 e6\n4c 89 fa\n4c 89 f1\ne8 a7 1f 00 00\n31 ff\ne8 30 e9 ff ff\n'
p677
S'.text:0000000000402ce0\n.text:0000000000402ce1\n.text:0000000000402ce3\n.text:0000000000402ce5\n.text:0000000000402ce7\n.text:0000000000402ce8\n.text:0000000000402cef\n.text:0000000000402cf2\n.text:0000000000402cf5\n.text:0000000000402cf8\n.text:0000000000402cfb\n.text:0000000000402cfd\n.text:0000000000402cff\n.text:0000000000402d04\n.text:0000000000402d09\n.text:0000000000402d0e\n.text:0000000000402d16\n.text:0000000000402d1e\n.text:0000000000402d26\n.text:0000000000402d2e\n.text:0000000000402d36\n.text:0000000000402d3c\n.text:0000000000402d46\n.text:0000000000402d49\n.text:0000000000402d4b\n.text:0000000000402d50\n.text:0000000000402d55\n.text:0000000000402d58\n.text:0000000000402d5d\n.text:0000000000402d60\n.text:0000000000402d62\n.text:0000000000402d65\n.text:0000000000402d67\n.text:0000000000402d6d\n.text:0000000000402d77\n.text:0000000000402d7e\n.text:0000000000402d7f\n.text:0000000000402d81\n.text:0000000000402d83\n.text:0000000000402d85\n.text:0000000000402d86\n.text:0000000000402d87\n.text:0000000000402d89\n.text:0000000000402d8b\n.text:0000000000402d90\n.text:0000000000402d95\n.text:0000000000402d9d\n.text:0000000000402da2\n.text:0000000000402daa\n.text:0000000000402db1\n.text:0000000000402db8\n.text:0000000000402dbb\n.text:0000000000402dbe\n.text:0000000000402dc1\n.text:0000000000402dc4\n.text:0000000000402dc9\n.text:0000000000402dcb\n'
p678
tp679
sS'tostring'
p680
(S'\n__stdcall tostring(VALUE * v)\n'
p681
V\u000avoid tostring(VALUE *v)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  if (v->type != string) {\u000a    if (v->type != integer) {\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    }\u000a    pcVar1 = mpz_get_str();\u000a    *(char **)&v->u = pcVar1;\u000a    v->type = string;\u000a  }\u000a  return;\u000a}\u000a\u000a
p682
S'PUSH RBX\nMOV RBX,RDI\nMOV EAX,dword ptr [RBX]\nCMP EAX,0x1\nJZ 0x00402292\nTEST EAX,EAX\nJNZ 0x00402294\nLEA RDI,[RBX + 0x8]\nCALL 0x00402b10\nMOV qword ptr [RBX + 0x8],RAX\nMOV dword ptr [RBX],0x1\nPOP RBX\nRET\nCALL 0x00401400\n'
p683
S'53\n48 89 fb\n8b 03\n83 f8 01\n74 17\n85 c0\n75 15\n48 8d 7b 08\ne8 88 08 00 00\n48 89 43 08\nc7 03 01 00 00 00\n5b\nc3\ne8 67 f1 ff ff\n'
p684
S'.text:0000000000402270\n.text:0000000000402271\n.text:0000000000402274\n.text:0000000000402276\n.text:0000000000402279\n.text:000000000040227b\n.text:000000000040227d\n.text:000000000040227f\n.text:0000000000402283\n.text:0000000000402288\n.text:000000000040228c\n.text:0000000000402292\n.text:0000000000402293\n.text:0000000000402294\n'
p685
tp686
sS'printv'
p687
(S'\n__stdcall printv(VALUE * v)\n'
p688
V\u000avoid printv(VALUE *v)\u000a\u000a{\u000a  if (v->type == string) {\u000a    (*(code *)PTR_puts_00609070)(v->u);\u000a    return;\u000a  }\u000a  if (v->type == integer) {\u000a    mpz_out_str();\u000a    putchar_unlocked(10);\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p689
S'PUSH RAX\nMOV RAX,RDI\nMOV ECX,dword ptr [RAX]\nCMP ECX,0x1\nJZ 0x00401dcd\nTEST ECX,ECX\nJNZ 0x00401dd7\nMOV RDI,qword ptr [0x00609268]\nADD RAX,0x8\nMOV RSI,RAX\nCALL 0x00401e40\nMOV EDI,0xa\nPOP RAX\nJMP 0x00401600\nMOV RDI,qword ptr [RAX + 0x8]\nPOP RAX\nJMP 0x00401470\nCALL 0x00401400\n'
p690
S'50\n48 89 f8\n8b 08\n83 f9 01\n74 22\n85 c9\n75 28\n48 8b 3d b2 74 20 00\n48 83 c0 08\n48 89 c6\ne8 7e 00 00 00\nbf 0a 00 00 00\n58\ne9 33 f8 ff ff\n48 8b 78 08\n58\ne9 99 f6 ff ff\ne8 24 f6 ff ff\n'
p691
S'.text:0000000000401da0\n.text:0000000000401da1\n.text:0000000000401da4\n.text:0000000000401da6\n.text:0000000000401da9\n.text:0000000000401dab\n.text:0000000000401dad\n.text:0000000000401daf\n.text:0000000000401db6\n.text:0000000000401dba\n.text:0000000000401dbd\n.text:0000000000401dc2\n.text:0000000000401dc7\n.text:0000000000401dc8\n.text:0000000000401dcd\n.text:0000000000401dd1\n.text:0000000000401dd2\n.text:0000000000401dd7\n'
p692
tp693
sS'__libc_csu_init'
p694
(S'\n__stdcall __libc_csu_init()\n'
p695
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p696
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x608e08]\nPUSH RBP\nLEA RBP,[0x608e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401398\nTEST RBP,RBP\nJZ 0x00405a86\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00405a70\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p697
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 c6 33 20 00\n55\n48 8d 2d c6 33 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 37 b9 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p698
S'.text:0000000000405a30\n.text:0000000000405a32\n.text:0000000000405a34\n.text:0000000000405a37\n.text:0000000000405a39\n.text:0000000000405a3b\n.text:0000000000405a42\n.text:0000000000405a43\n.text:0000000000405a4a\n.text:0000000000405a4b\n.text:0000000000405a4e\n.text:0000000000405a51\n.text:0000000000405a54\n.text:0000000000405a58\n.text:0000000000405a5c\n.text:0000000000405a61\n.text:0000000000405a64\n.text:0000000000405a66\n.text:0000000000405a68\n.text:0000000000405a70\n.text:0000000000405a73\n.text:0000000000405a76\n.text:0000000000405a79\n.text:0000000000405a7d\n.text:0000000000405a81\n.text:0000000000405a84\n.text:0000000000405a86\n.text:0000000000405a8a\n.text:0000000000405a8b\n.text:0000000000405a8c\n.text:0000000000405a8e\n.text:0000000000405a90\n.text:0000000000405a92\n.text:0000000000405a94\n'
p699
tp700
sS'c_isdigit'
p701
(S'\n__stdcall c_isdigit()\n'
p702
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p703
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p704
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p705
S'.text:0000000000405480\n.text:0000000000405483\n.text:0000000000405486\n.text:0000000000405489\n'
p706
tp707
sS'mpz_fits_ulong_p'
p708
(S'\n__stdcall mpz_fits_ulong_p(intmax_t * z)\n'
p709
V\u000aint mpz_fits_ulong_p(intmax_t *z)\u000a\u000a{\u000a  return (int)((uint)((ulong)*z >> 0x3f) ^ 1);\u000a}\u000a\u000a
p710
S'MOV RAX,qword ptr [RDI]\nSHR RAX,0x3f\nXOR EAX,0x1\nRET\n'
p711
S'48 8b 07\n48 c1 e8 3f\n83 f0 01\nc3\n'
p712
S'.text:0000000000402ab0\n.text:0000000000402ab3\n.text:0000000000402ab7\n.text:0000000000402aba\n'
p713
tp714
sS'usage'
p715
(S'\n__stdcall usage()\n'
p716
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s EXPRESSION\u005cn  or:  %s OPTION\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,program_name);\u000a    putchar_unlocked(10);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnPrint the value of EXPRESSION to standard output.  A blank line below\u005cnseparates increasing precedence groups.  EXPRESSION may be:\u005cn\u005cn  ARG1 | ARG2       ARG1 if it is neither null nor 0, otherwise ARG2\u005cn\u005cn  ARG1 & ARG2       ARG1 if neither argument is null or 0, otherwise 0\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn  ARG1 < ARG2       ARG1 is less than ARG2\u005cn  ARG1 <= ARG2      ARG1 is less than or equal to ARG2\u005cn  ARG1 = ARG2       ARG1 is equal to ARG2\u005cn  ARG1 != ARG2      ARG1 is unequal to ARG2\u005cn  ARG1 >= ARG2      ARG1 is greater than or equal to ARG2\u005cn  ARG1 > ARG2       ARG1 is greater than ARG2\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn  ARG1 + ARG2       arithmetic sum of ARG1 and ARG2\u005cn  ARG1 - ARG2       arithmetic difference of ARG1 and ARG2\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn  ARG1 * ARG2       arithmetic product of ARG1 and ARG2\u005cn  ARG1 / ARG2       arithmetic quotient of ARG1 divided by ARG2\u005cn  ARG1 % ARG2       arithmetic remainder of ARG1 divided by ARG2\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cn  STRING : REGEXP   anchored pattern match of REGEXP in STRING\u005cn\u005cn  match STRING REGEXP        same as STRING : REGEXP\u005cn  substr STRING POS LENGTH   substring of STRING, POS counted from 1\u005cn  index STRING CHARS         index in STRING where any CHARS is found, or 0\u005cn  length STRING              length of STRING\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  + TOKEN                    interpret TOKEN as a string, even if it is a\u005cn                               keyword like \u005c'match\u005c' or an operator like \u005c'/\u005c'\u005cn\u005cn  ( EXPRESSION )             value of EXPRESSION\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnBeware that many operators need to be escaped or quoted for shells.\u005cnComparisons are arithmetic if both ARGs are numbers, else lexicographical.\u005cnPattern matches return the string matched between \u005c\u005c( and \u005c\u005c) or null; if\u005cn\u005c\u005c( and \u005c\u005c) are not used, they return the number of characters matched or 0.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnExit status is 0 if EXPRESSION is neither null nor 0, 1 if EXPRESSION is null\u005cnor 0, 2 if EXPRESSION is syntactically invalid, and 3 if an error occurred.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p717
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x004019fe\nXOR EDI,EDI\nMOV ESI,0x405ba0\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x006092e8]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nCALL 0x004016b0\nMOV EDI,0xa\nCALL 0x00401600\nXOR EDI,EDI\nMOV ESI,0x405bc7\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004015b0\nXOR EDI,EDI\nMOV ESI,0x405bf4\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004015b0\nXOR EDI,EDI\nMOV ESI,0x405c2a\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004015b0\nXOR EDI,EDI\nMOV ESI,0x405d3c\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004015b0\nXOR EDI,EDI\nMOV ESI,0x405e5e\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004015b0\nXOR EDI,EDI\nMOV ESI,0x405ecf\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004015b0\nXOR EDI,EDI\nMOV ESI,0x405f8a\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004015b0\nXOR EDI,EDI\nMOV ESI,0x4060c0\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004015b0\nXOR EDI,EDI\nMOV ESI,0x406189\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004015b0\nXOR EDI,EDI\nMOV ESI,0x4062ad\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RSI,qword ptr [0x00609268]\nMOV RDI,RAX\nCALL 0x004015b0\nCALL 0x00401a50\nMOV EDI,EBX\nCALL 0x00401700\nCALL 0x00401a10\nMOV EDI,EBX\nCALL 0x00401700\n'
p718
S'53\n89 fb\n85 db\n0f 85 83 01 00 00\n31 ff\nbe a0 5b 40 00\nba 05 00 00 00\ne8 34 fc ff ff\n48 89 c1\n48 8b 15 52 7a 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\ne8 08 fe ff ff\nbf 0a 00 00 00\ne8 4e fd ff ff\n31 ff\nbe c7 5b 40 00\nba 05 00 00 00\ne8 fd fb ff ff\n48 8b 35 9e 79 20 00\n48 89 c7\ne8 de fc ff ff\n31 ff\nbe f4 5b 40 00\nba 05 00 00 00\ne8 dd fb ff ff\n48 8b 35 7e 79 20 00\n48 89 c7\ne8 be fc ff ff\n31 ff\nbe 2a 5c 40 00\nba 05 00 00 00\ne8 bd fb ff ff\n48 8b 35 5e 79 20 00\n48 89 c7\ne8 9e fc ff ff\n31 ff\nbe 3c 5d 40 00\nba 05 00 00 00\ne8 9d fb ff ff\n48 8b 35 3e 79 20 00\n48 89 c7\ne8 7e fc ff ff\n31 ff\nbe 5e 5e 40 00\nba 05 00 00 00\ne8 7d fb ff ff\n48 8b 35 1e 79 20 00\n48 89 c7\ne8 5e fc ff ff\n31 ff\nbe cf 5e 40 00\nba 05 00 00 00\ne8 5d fb ff ff\n48 8b 35 fe 78 20 00\n48 89 c7\ne8 3e fc ff ff\n31 ff\nbe 8a 5f 40 00\nba 05 00 00 00\ne8 3d fb ff ff\n48 8b 35 de 78 20 00\n48 89 c7\ne8 1e fc ff ff\n31 ff\nbe c0 60 40 00\nba 05 00 00 00\ne8 1d fb ff ff\n48 8b 35 be 78 20 00\n48 89 c7\ne8 fe fb ff ff\n31 ff\nbe 89 61 40 00\nba 05 00 00 00\ne8 fd fa ff ff\n48 8b 35 9e 78 20 00\n48 89 c7\ne8 de fb ff ff\n31 ff\nbe ad 62 40 00\nba 05 00 00 00\ne8 dd fa ff ff\n48 8b 35 7e 78 20 00\n48 89 c7\ne8 be fb ff ff\ne8 59 00 00 00\n89 df\ne8 02 fd ff ff\ne8 0d 00 00 00\n89 df\ne8 f6 fc ff ff\n'
p719
S'.text:0000000000401870\n.text:0000000000401871\n.text:0000000000401873\n.text:0000000000401875\n.text:000000000040187b\n.text:000000000040187d\n.text:0000000000401882\n.text:0000000000401887\n.text:000000000040188c\n.text:000000000040188f\n.text:0000000000401896\n.text:000000000040189b\n.text:000000000040189d\n.text:00000000004018a0\n.text:00000000004018a3\n.text:00000000004018a8\n.text:00000000004018ad\n.text:00000000004018b2\n.text:00000000004018b4\n.text:00000000004018b9\n.text:00000000004018be\n.text:00000000004018c3\n.text:00000000004018ca\n.text:00000000004018cd\n.text:00000000004018d2\n.text:00000000004018d4\n.text:00000000004018d9\n.text:00000000004018de\n.text:00000000004018e3\n.text:00000000004018ea\n.text:00000000004018ed\n.text:00000000004018f2\n.text:00000000004018f4\n.text:00000000004018f9\n.text:00000000004018fe\n.text:0000000000401903\n.text:000000000040190a\n.text:000000000040190d\n.text:0000000000401912\n.text:0000000000401914\n.text:0000000000401919\n.text:000000000040191e\n.text:0000000000401923\n.text:000000000040192a\n.text:000000000040192d\n.text:0000000000401932\n.text:0000000000401934\n.text:0000000000401939\n.text:000000000040193e\n.text:0000000000401943\n.text:000000000040194a\n.text:000000000040194d\n.text:0000000000401952\n.text:0000000000401954\n.text:0000000000401959\n.text:000000000040195e\n.text:0000000000401963\n.text:000000000040196a\n.text:000000000040196d\n.text:0000000000401972\n.text:0000000000401974\n.text:0000000000401979\n.text:000000000040197e\n.text:0000000000401983\n.text:000000000040198a\n.text:000000000040198d\n.text:0000000000401992\n.text:0000000000401994\n.text:0000000000401999\n.text:000000000040199e\n.text:00000000004019a3\n.text:00000000004019aa\n.text:00000000004019ad\n.text:00000000004019b2\n.text:00000000004019b4\n.text:00000000004019b9\n.text:00000000004019be\n.text:00000000004019c3\n.text:00000000004019ca\n.text:00000000004019cd\n.text:00000000004019d2\n.text:00000000004019d4\n.text:00000000004019d9\n.text:00000000004019de\n.text:00000000004019e3\n.text:00000000004019ea\n.text:00000000004019ed\n.text:00000000004019f2\n.text:00000000004019f7\n.text:00000000004019f9\n.text:00000000004019fe\n.text:0000000000401a03\n.text:0000000000401a05\n'
p720
tp721
sS'quoting_options_from_style'
p722
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p723
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p724
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x0040404d\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401400\n'
p725
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 ae d3 ff ff\n'
p726
S'.text:0000000000404000\n.text:0000000000404004\n.text:0000000000404007\n.text:000000000040400c\n.text:0000000000404011\n.text:0000000000404015\n.text:000000000040401d\n.text:0000000000404020\n.text:0000000000404022\n.text:0000000000404024\n.text:0000000000404028\n.text:000000000040402b\n.text:000000000040402f\n.text:0000000000404034\n.text:0000000000404039\n.text:000000000040403d\n.text:0000000000404041\n.text:0000000000404045\n.text:0000000000404048\n.text:000000000040404c\n.text:000000000040404d\n'
p727
tp728
sS'strcpy'
p729
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p730
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00609060)();\u000a  return pcVar1;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x00609060]\n'
p732
S'ff 25 0a 7c 20 00\n'
p733
S'.plt:0000000000401450\n'
p734
tp735
sS'c_isgraph'
p736
(S'\n__stdcall c_isgraph()\n'
p737
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p738
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p739
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p740
S'.text:0000000000405490\n.text:0000000000405493\n.text:0000000000405496\n.text:0000000000405499\n'
p741
tp742
sS'quotearg_buffer_restyled'
p743
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p744
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040307c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040307c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040307c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040307c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040307c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040307c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040307c_caseD_7;\u000aswitchD_0040307c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040307c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040307c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_00403b40;\u000aLAB_00403260:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_00403b49:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_00403b58:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040326b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_004032af:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_004032af;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_00403b58;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00403a85;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00403990;\u000a    }\u000a    goto LAB_00403b58;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_00403aba;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_00403b58;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403ae9;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_004035a8;\u000a  case '\u005ca':\u000a    goto joined_r0x00403498;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00403498;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_004032c6_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00403498;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00403498;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_004032c6_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00403498:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_004039fe;\u000a    }\u000a    goto LAB_00403b58;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_00403b58;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_00403b58;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_00403b58;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_00403b58;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_00403b58;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_004032c6_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_00403a56;\u000a      goto joined_r0x00403a48;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403551:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x00403a48;\u000a      goto LAB_00403a56;\u000a    }\u000a    goto LAB_00403b58;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_00403b58;\u000a  }\u000a  goto joined_r0x00403990;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_00403aba:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403ae9;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403ae9:\u000a  if (1 < uVar10) {\u000aLAB_004035c6:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403682;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403551;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403682:\u000a        if (bVar6 != 0) goto LAB_00403b58;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_004035a8:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_004035c6;\u000ajoined_r0x00403990:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00403990:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_004039b7;\u000aLAB_004039f0:\u000a    if (bVar22) goto LAB_004039f5;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_004039f0;\u000aLAB_004039b7:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_004039f5:\u000a      if (bVar6 != 0) goto LAB_00403b58;\u000aLAB_004039fe:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x00403a48;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_00403a56:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x00403a48:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00403a85:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00403260;\u000aLAB_00403b40:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_00403b49;\u000a  goto LAB_0040326b;\u000a}\u000a\u000a
p745
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004014e0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00403c25\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x406680 + RAX*0x8]\nMOV EDI,0x406ba6\nMOV ESI,R15D\nCALL 0x004042d0\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x406ba8\nMOV ESI,R15D\nCALL 0x004042d0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x004030dd\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x004030e0\nNOP\nCMP R12,RSI\nJNC 0x004030ce\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x004030c0\nJMP 0x004030e0\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004014f0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x004031ac\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x004031ac\nMOV ECX,0x406ba4\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x004031a6\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00403147\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00403174\nTEST RSI,RSI\nJZ 0x00403161\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x406ba8\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00403182\nMOV ECX,0x406ba8\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x004031ac\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x00403bfc\nMOV ECX,0x406ba4\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x00403b40\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x00403b49\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x004032af\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x004032aa\nCMP R11,-0x1\nJNZ 0x004032aa\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004014f0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00403300\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x0040355c\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x4066d8 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x00403b58\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x004039b0\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x004039b7\nJMP 0x004039f0\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x004015a0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x0040334d\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x004032b1\nJMP 0x00403b58\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x004032b1\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x004032db\nCMP EBX,0x2\nJNZ 0x004032db\nTEST R13,R13\nJNZ 0x004032db\nJMP 0x00403b58\nCMP R11,-0x1\nJZ 0x00403733\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403753\nJMP 0x004032db\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403764\nTEST R8B,R8B\nJNZ 0x00403b58\nCMP EBX,0x2\nJNZ 0x00403408\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403408\nCMP R12,RSI\nJNC 0x004033e3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004033f2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403401\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403412\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x004038d8\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x004038d8\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x004038d8\nCMP RCX,RSI\nJNC 0x0040344c\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x0040345b\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032e6\nJMP 0x004039b0\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004032d9\nJMP 0x004034ba\nMOV DL,0x74\nJMP 0x004034a2\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004032d9\nJMP 0x004034ba\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004032d9\nJMP 0x004034ba\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x00403b58\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004032d9\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x004039fe\nJMP 0x00403b58\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x004032d9\nTEST R8B,R8B\nJNZ 0x00403b58\nCMP R12,RSI\nJNC 0x004034ea\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004034f9\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403508\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x004032d9\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x004038eb\nCMP EBX,0x2\nJNZ 0x004032d9\nTEST R8B,R8B\nJZ 0x004032d9\nJMP 0x00403b58\nCMP EBX,0x2\nJNZ 0x00403784\nTEST R8B,R8B\nJNZ 0x00403b58\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x00403a56\nJMP 0x00403a79\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x004037a5\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401760\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403998\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00403998\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403682\nJMP 0x00403650\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403639\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403636\nCMP R12,RSI\nJNC 0x0040361b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040362a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403670\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403670\nTEST BPL,0x1\nJZ 0x00403713\nCMP R12,RSI\nJNC 0x00403664\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403713\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403650\nTEST R8B,R8B\nJNZ 0x00403b58\nCMP EBX,0x2\nJNZ 0x004036ca\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x004036ca\nCMP R12,RSI\nJNC 0x004036a2\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004036b1\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004036c0\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x004036d4\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004036eb\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403705\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403600\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x00403a56\nJMP 0x00403a79\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x004032db\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x004032db\nJMP 0x00403b58\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00403a85\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032e6\nJMP 0x004039b0\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x004034a2\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x00403a56\nJMP 0x00403a79\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x004037c7\nMOV RDI,R10\nCALL 0x004014f0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401510\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00403a9f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00403a97\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403aa6\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x0040388e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403886\nBT RDI,RDX\nJC 0x00403bf2\nINC RCX\nCMP RCX,R14\nJC 0x00403870\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401750\nTEST EAX,EAX\nJNZ 0x004038a3\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401740\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x004037e5\nJMP 0x00403ae9\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032e6\nJMP 0x004039b0\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x004032d9\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x004032d9\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x004032d9\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x004032db\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00403b22\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x00403b58\nCMP R12,RSI\nJNC 0x0040394e\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00403961\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403970\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040397f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032e6\nJMP 0x004039b0\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032e6\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x004039f0\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x004039f5\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x00403a50\nJMP 0x004039f5\nTEST BPL,BPL\nJZ 0x00403a50\nTEST R8B,R8B\nJNZ 0x00403b58\nCMP EBX,0x2\nJNZ 0x00403a38\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403a38\nCMP R12,RSI\nJNC 0x00403a13\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403a22\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403a31\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403a42\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00403a82\nJMP 0x00403a7e\nTEST DIL,0x1\nJZ 0x00403a79\nAND AL,0x1\nJNZ 0x00403a79\nCMP R12,RSI\nJNC 0x00403a64\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403a73\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00403a82\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x00403b40\nJMP 0x00403260\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403ae4\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x00403adc\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00403b18\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x00403aba\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403ae9\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x004035a8\nJMP 0x004035c6\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403ae9\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x004032e6\nJMP 0x004039b0\nCMP R13,R11\nJNZ 0x0040326b\nTEST R8B,R8B\nJZ 0x00403bb2\nCMP EBX,0x2\nJNZ 0x00403bb2\nTEST R12,R12\nJNZ 0x00403bb2\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00402ff0\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00403be6\nTEST R8B,R8B\nJNZ 0x00403be6\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00403be6\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00403bd9\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00403bd0\nCMP R12,RSI\nJNC 0x00403b9d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x00403b9d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x00403b58\nTEST RSI,RSI\nJZ 0x00403c09\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x406ba4\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x004031ac\nCALL 0x00401400\n'
p746
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 c2 e4 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 80 66 40 00\nbf a6 6b 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf a8 6b 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 03 e4 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 a4 6b 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 a8 6b 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 a8 6b 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 a4 6b 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 63 e2 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd d8 66 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 87 e2 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 e7 e1 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 31 dd ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 03 dd ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 b9 de ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 82 de ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 a4 6b 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 d6 d7 ff ff\n'
p747
S'.text:0000000000402ff0\n.text:0000000000402ff1\n.text:0000000000402ff3\n.text:0000000000402ff5\n.text:0000000000402ff7\n.text:0000000000402ff9\n.text:0000000000402ffa\n.text:0000000000403001\n.text:0000000000403004\n.text:0000000000403007\n.text:000000000040300a\n.text:000000000040300f\n.text:0000000000403014\n.text:0000000000403019\n.text:000000000040301e\n.text:0000000000403026\n.text:000000000040302a\n.text:0000000000403030\n.text:0000000000403038\n.text:000000000040303d\n.text:0000000000403045\n.text:000000000040304a\n.text:000000000040304e\n.text:0000000000403050\n.text:0000000000403053\n.text:0000000000403056\n.text:0000000000403059\n.text:000000000040305e\n.text:0000000000403061\n.text:0000000000403064\n.text:0000000000403067\n.text:000000000040306a\n.text:000000000040306c\n.text:000000000040306f\n.text:0000000000403074\n.text:0000000000403077\n.text:000000000040307c\n.text:0000000000403083\n.text:0000000000403088\n.text:000000000040308b\n.text:0000000000403090\n.text:0000000000403095\n.text:000000000040309a\n.text:000000000040309d\n.text:00000000004030a2\n.text:00000000004030a7\n.text:00000000004030ac\n.text:00000000004030ae\n.text:00000000004030b0\n.text:00000000004030b5\n.text:00000000004030b7\n.text:00000000004030ba\n.text:00000000004030bc\n.text:00000000004030be\n.text:00000000004030c0\n.text:00000000004030c3\n.text:00000000004030c5\n.text:00000000004030ca\n.text:00000000004030ce\n.text:00000000004030d4\n.text:00000000004030d7\n.text:00000000004030d9\n.text:00000000004030db\n.text:00000000004030dd\n.text:00000000004030e0\n.text:00000000004030e5\n.text:00000000004030e8\n.text:00000000004030ed\n.text:00000000004030f2\n.text:00000000004030f5\n.text:00000000004030f8\n.text:00000000004030fb\n.text:00000000004030fe\n.text:0000000000403103\n.text:0000000000403106\n.text:0000000000403109\n.text:000000000040310e\n.text:0000000000403111\n.text:0000000000403113\n.text:0000000000403116\n.text:0000000000403118\n.text:000000000040311a\n.text:000000000040311d\n.text:0000000000403122\n.text:0000000000403127\n.text:000000000040312c\n.text:000000000040312f\n.text:0000000000403135\n.text:0000000000403137\n.text:000000000040313a\n.text:000000000040313d\n.text:0000000000403140\n.text:0000000000403142\n.text:0000000000403144\n.text:0000000000403147\n.text:000000000040314a\n.text:000000000040314f\n.text:0000000000403152\n.text:0000000000403154\n.text:0000000000403157\n.text:0000000000403159\n.text:000000000040315e\n.text:0000000000403161\n.text:0000000000403166\n.text:000000000040316c\n.text:0000000000403172\n.text:0000000000403174\n.text:0000000000403179\n.text:000000000040317f\n.text:0000000000403182\n.text:0000000000403185\n.text:0000000000403188\n.text:000000000040318a\n.text:000000000040318f\n.text:0000000000403192\n.text:0000000000403198\n.text:000000000040319d\n.text:00000000004031a3\n.text:00000000004031a6\n.text:00000000004031a9\n.text:00000000004031ac\n.text:00000000004031b4\n.text:00000000004031b6\n.text:00000000004031b8\n.text:00000000004031bb\n.text:00000000004031bf\n.text:00000000004031c1\n.text:00000000004031c4\n.text:00000000004031c8\n.text:00000000004031ca\n.text:00000000004031cd\n.text:00000000004031d0\n.text:00000000004031d3\n.text:00000000004031d5\n.text:00000000004031d9\n.text:00000000004031db\n.text:00000000004031df\n.text:00000000004031e2\n.text:00000000004031e5\n.text:00000000004031e8\n.text:00000000004031ea\n.text:00000000004031ee\n.text:00000000004031f7\n.text:00000000004031fa\n.text:00000000004031fc\n.text:0000000000403200\n.text:0000000000403202\n.text:0000000000403206\n.text:0000000000403208\n.text:000000000040320b\n.text:000000000040320f\n.text:0000000000403211\n.text:0000000000403214\n.text:0000000000403218\n.text:000000000040321d\n.text:0000000000403220\n.text:0000000000403224\n.text:000000000040322c\n.text:000000000040322f\n.text:0000000000403232\n.text:0000000000403234\n.text:0000000000403238\n.text:000000000040323b\n.text:000000000040323d\n.text:0000000000403242\n.text:0000000000403246\n.text:000000000040324b\n.text:0000000000403250\n.text:0000000000403254\n.text:000000000040325a\n.text:0000000000403260\n.text:0000000000403265\n.text:000000000040326b\n.text:0000000000403270\n.text:0000000000403272\n.text:0000000000403277\n.text:000000000040327b\n.text:000000000040327d\n.text:0000000000403281\n.text:0000000000403283\n.text:0000000000403285\n.text:0000000000403288\n.text:000000000040328d\n.text:000000000040328f\n.text:0000000000403294\n.text:0000000000403299\n.text:000000000040329d\n.text:00000000004032a2\n.text:00000000004032a7\n.text:00000000004032aa\n.text:00000000004032ad\n.text:00000000004032af\n.text:00000000004032b1\n.text:00000000004032b6\n.text:00000000004032ba\n.text:00000000004032c0\n.text:00000000004032c2\n.text:00000000004032c4\n.text:00000000004032c6\n.text:00000000004032ce\n.text:00000000004032d3\n.text:00000000004032d9\n.text:00000000004032db\n.text:00000000004032e0\n.text:00000000004032e6\n.text:00000000004032ef\n.text:00000000004032f5\n.text:0000000000403300\n.text:0000000000403302\n.text:0000000000403305\n.text:0000000000403309\n.text:0000000000403311\n.text:0000000000403314\n.text:0000000000403319\n.text:000000000040331b\n.text:000000000040331e\n.text:0000000000403320\n.text:0000000000403325\n.text:0000000000403328\n.text:000000000040332d\n.text:0000000000403330\n.text:0000000000403335\n.text:0000000000403339\n.text:000000000040333e\n.text:0000000000403340\n.text:0000000000403342\n.text:0000000000403348\n.text:000000000040334d\n.text:0000000000403352\n.text:0000000000403355\n.text:000000000040335a\n.text:000000000040335e\n.text:0000000000403363\n.text:0000000000403368\n.text:000000000040336a\n.text:000000000040336c\n.text:0000000000403371\n.text:0000000000403373\n.text:0000000000403376\n.text:000000000040337c\n.text:000000000040337f\n.text:0000000000403385\n.text:0000000000403388\n.text:000000000040338e\n.text:0000000000403393\n.text:0000000000403397\n.text:000000000040339d\n.text:00000000004033a0\n.text:00000000004033a3\n.text:00000000004033a7\n.text:00000000004033aa\n.text:00000000004033ac\n.text:00000000004033af\n.text:00000000004033b5\n.text:00000000004033ba\n.text:00000000004033bf\n.text:00000000004033c5\n.text:00000000004033c8\n.text:00000000004033ce\n.text:00000000004033d1\n.text:00000000004033d3\n.text:00000000004033d5\n.text:00000000004033d7\n.text:00000000004033d9\n.text:00000000004033dc\n.text:00000000004033de\n.text:00000000004033e3\n.text:00000000004033e8\n.text:00000000004033eb\n.text:00000000004033ed\n.text:00000000004033f2\n.text:00000000004033f7\n.text:00000000004033fa\n.text:00000000004033fc\n.text:0000000000403401\n.text:0000000000403405\n.text:0000000000403408\n.text:000000000040340b\n.text:000000000040340d\n.text:0000000000403412\n.text:0000000000403417\n.text:0000000000403419\n.text:000000000040341c\n.text:000000000040341f\n.text:0000000000403425\n.text:0000000000403429\n.text:000000000040342c\n.text:0000000000403432\n.text:0000000000403436\n.text:0000000000403439\n.text:000000000040343c\n.text:0000000000403442\n.text:0000000000403445\n.text:0000000000403447\n.text:000000000040344c\n.text:0000000000403451\n.text:0000000000403454\n.text:0000000000403456\n.text:000000000040345b\n.text:000000000040345f\n.text:0000000000403464\n.text:000000000040346a\n.text:000000000040346f\n.text:0000000000403471\n.text:0000000000403476\n.text:000000000040347c\n.text:000000000040347e\n.text:0000000000403480\n.text:0000000000403482\n.text:0000000000403484\n.text:0000000000403489\n.text:000000000040348f\n.text:0000000000403491\n.text:0000000000403493\n.text:0000000000403498\n.text:000000000040349e\n.text:00000000004034a0\n.text:00000000004034a2\n.text:00000000004034a7\n.text:00000000004034a9\n.text:00000000004034af\n.text:00000000004034b4\n.text:00000000004034ba\n.text:00000000004034bd\n.text:00000000004034c0\n.text:00000000004034c6\n.text:00000000004034cb\n.text:00000000004034ce\n.text:00000000004034d1\n.text:00000000004034d7\n.text:00000000004034da\n.text:00000000004034e0\n.text:00000000004034e3\n.text:00000000004034e5\n.text:00000000004034ea\n.text:00000000004034ef\n.text:00000000004034f2\n.text:00000000004034f4\n.text:00000000004034f9\n.text:00000000004034fe\n.text:0000000000403501\n.text:0000000000403503\n.text:0000000000403508\n.text:000000000040350c\n.text:000000000040350e\n.text:0000000000403513\n.text:0000000000403516\n.text:0000000000403519\n.text:000000000040351f\n.text:0000000000403522\n.text:0000000000403528\n.text:000000000040352b\n.text:0000000000403531\n.text:0000000000403536\n.text:0000000000403539\n.text:000000000040353f\n.text:0000000000403542\n.text:0000000000403548\n.text:000000000040354b\n.text:000000000040354d\n.text:0000000000403551\n.text:0000000000403557\n.text:000000000040355c\n.text:0000000000403560\n.text:0000000000403569\n.text:000000000040356f\n.text:0000000000403574\n.text:0000000000403579\n.text:000000000040357e\n.text:0000000000403581\n.text:0000000000403586\n.text:0000000000403589\n.text:000000000040358c\n.text:0000000000403591\n.text:0000000000403596\n.text:000000000040359a\n.text:000000000040359f\n.text:00000000004035a4\n.text:00000000004035a8\n.text:00000000004035aa\n.text:00000000004035af\n.text:00000000004035b5\n.text:00000000004035b8\n.text:00000000004035ba\n.text:00000000004035bd\n.text:00000000004035c0\n.text:00000000004035c6\n.text:00000000004035cb\n.text:00000000004035ce\n.text:00000000004035d1\n.text:00000000004035d4\n.text:00000000004035d7\n.text:00000000004035d9\n.text:00000000004035dd\n.text:00000000004035df\n.text:00000000004035e4\n.text:00000000004035e9\n.text:00000000004035ef\n.text:0000000000403600\n.text:0000000000403605\n.text:0000000000403607\n.text:000000000040360a\n.text:000000000040360c\n.text:000000000040360f\n.text:0000000000403611\n.text:0000000000403614\n.text:0000000000403616\n.text:000000000040361b\n.text:0000000000403620\n.text:0000000000403623\n.text:0000000000403625\n.text:000000000040362a\n.text:000000000040362e\n.text:0000000000403636\n.text:0000000000403639\n.text:000000000040363c\n.text:000000000040363e\n.text:0000000000403642\n.text:0000000000403650\n.text:0000000000403654\n.text:000000000040365a\n.text:000000000040365d\n.text:000000000040365f\n.text:0000000000403664\n.text:0000000000403667\n.text:0000000000403669\n.text:0000000000403670\n.text:0000000000403673\n.text:0000000000403678\n.text:000000000040367b\n.text:0000000000403680\n.text:0000000000403682\n.text:0000000000403685\n.text:000000000040368b\n.text:000000000040368e\n.text:0000000000403690\n.text:0000000000403694\n.text:0000000000403696\n.text:0000000000403698\n.text:000000000040369b\n.text:000000000040369d\n.text:00000000004036a2\n.text:00000000004036a7\n.text:00000000004036aa\n.text:00000000004036ac\n.text:00000000004036b1\n.text:00000000004036b6\n.text:00000000004036b9\n.text:00000000004036bb\n.text:00000000004036c0\n.text:00000000004036c4\n.text:00000000004036c6\n.text:00000000004036ca\n.text:00000000004036cd\n.text:00000000004036cf\n.text:00000000004036d4\n.text:00000000004036d9\n.text:00000000004036dc\n.text:00000000004036de\n.text:00000000004036e1\n.text:00000000004036e4\n.text:00000000004036e7\n.text:00000000004036eb\n.text:00000000004036f0\n.text:00000000004036f3\n.text:00000000004036f5\n.text:00000000004036f8\n.text:00000000004036fb\n.text:00000000004036fe\n.text:0000000000403701\n.text:0000000000403705\n.text:0000000000403709\n.text:000000000040370d\n.text:0000000000403711\n.text:0000000000403713\n.text:0000000000403717\n.text:000000000040371a\n.text:0000000000403720\n.text:0000000000403724\n.text:0000000000403728\n.text:000000000040372e\n.text:0000000000403733\n.text:0000000000403736\n.text:0000000000403739\n.text:000000000040373e\n.text:0000000000403741\n.text:0000000000403743\n.text:0000000000403746\n.text:000000000040374d\n.text:0000000000403753\n.text:0000000000403755\n.text:0000000000403759\n.text:000000000040375f\n.text:0000000000403764\n.text:0000000000403769\n.text:000000000040376f\n.text:0000000000403772\n.text:0000000000403774\n.text:0000000000403779\n.text:000000000040377f\n.text:0000000000403784\n.text:0000000000403786\n.text:000000000040378b\n.text:0000000000403791\n.text:0000000000403793\n.text:0000000000403796\n.text:000000000040379a\n.text:00000000004037a0\n.text:00000000004037a5\n.text:00000000004037b1\n.text:00000000004037b5\n.text:00000000004037b7\n.text:00000000004037ba\n.text:00000000004037bf\n.text:00000000004037c4\n.text:00000000004037c7\n.text:00000000004037cb\n.text:00000000004037d0\n.text:00000000004037d2\n.text:00000000004037d6\n.text:00000000004037d8\n.text:00000000004037e0\n.text:00000000004037e5\n.text:00000000004037ea\n.text:00000000004037ee\n.text:00000000004037f2\n.text:00000000004037fa\n.text:00000000004037fd\n.text:0000000000403802\n.text:0000000000403805\n.text:0000000000403808\n.text:000000000040380d\n.text:0000000000403810\n.text:0000000000403813\n.text:0000000000403819\n.text:000000000040381d\n.text:0000000000403827\n.text:000000000040382d\n.text:0000000000403831\n.text:0000000000403836\n.text:000000000040383c\n.text:0000000000403840\n.text:0000000000403843\n.text:0000000000403847\n.text:0000000000403849\n.text:000000000040384e\n.text:0000000000403853\n.text:0000000000403857\n.text:0000000000403859\n.text:000000000040385e\n.text:0000000000403863\n.text:0000000000403867\n.text:000000000040386c\n.text:0000000000403870\n.text:0000000000403874\n.text:0000000000403877\n.text:000000000040387a\n.text:000000000040387c\n.text:0000000000403880\n.text:0000000000403886\n.text:0000000000403889\n.text:000000000040388c\n.text:000000000040388e\n.text:0000000000403892\n.text:0000000000403897\n.text:0000000000403899\n.text:000000000040389b\n.text:00000000004038a3\n.text:00000000004038a8\n.text:00000000004038ab\n.text:00000000004038b3\n.text:00000000004038b6\n.text:00000000004038b9\n.text:00000000004038be\n.text:00000000004038c1\n.text:00000000004038c3\n.text:00000000004038c8\n.text:00000000004038cd\n.text:00000000004038d3\n.text:00000000004038d8\n.text:00000000004038db\n.text:00000000004038e0\n.text:00000000004038e6\n.text:00000000004038eb\n.text:00000000004038f0\n.text:00000000004038f6\n.text:00000000004038fa\n.text:00000000004038fd\n.text:0000000000403903\n.text:0000000000403909\n.text:000000000040390f\n.text:0000000000403914\n.text:0000000000403916\n.text:0000000000403919\n.text:000000000040391f\n.text:0000000000403923\n.text:0000000000403925\n.text:000000000040392f\n.text:0000000000403933\n.text:0000000000403939\n.text:000000000040393c\n.text:000000000040393e\n.text:0000000000403944\n.text:0000000000403947\n.text:0000000000403949\n.text:000000000040394e\n.text:0000000000403953\n.text:0000000000403956\n.text:000000000040395a\n.text:000000000040395c\n.text:0000000000403961\n.text:0000000000403966\n.text:0000000000403969\n.text:000000000040396b\n.text:0000000000403970\n.text:0000000000403975\n.text:0000000000403978\n.text:000000000040397a\n.text:000000000040397f\n.text:0000000000403983\n.text:0000000000403985\n.text:0000000000403988\n.text:000000000040398b\n.text:0000000000403990\n.text:0000000000403996\n.text:0000000000403998\n.text:000000000040399d\n.text:00000000004039a2\n.text:00000000004039a8\n.text:00000000004039b0\n.text:00000000004039b5\n.text:00000000004039b7\n.text:00000000004039bc\n.text:00000000004039bf\n.text:00000000004039c1\n.text:00000000004039c4\n.text:00000000004039c6\n.text:00000000004039c9\n.text:00000000004039cc\n.text:00000000004039cf\n.text:00000000004039d1\n.text:00000000004039d9\n.text:00000000004039dc\n.text:00000000004039de\n.text:00000000004039e0\n.text:00000000004039f0\n.text:00000000004039f3\n.text:00000000004039f5\n.text:00000000004039f8\n.text:00000000004039fe\n.text:0000000000403a01\n.text:0000000000403a03\n.text:0000000000403a05\n.text:0000000000403a07\n.text:0000000000403a09\n.text:0000000000403a0c\n.text:0000000000403a0e\n.text:0000000000403a13\n.text:0000000000403a18\n.text:0000000000403a1b\n.text:0000000000403a1d\n.text:0000000000403a22\n.text:0000000000403a27\n.text:0000000000403a2a\n.text:0000000000403a2c\n.text:0000000000403a31\n.text:0000000000403a35\n.text:0000000000403a38\n.text:0000000000403a3b\n.text:0000000000403a3d\n.text:0000000000403a42\n.text:0000000000403a45\n.text:0000000000403a48\n.text:0000000000403a4a\n.text:0000000000403a50\n.text:0000000000403a54\n.text:0000000000403a56\n.text:0000000000403a58\n.text:0000000000403a5a\n.text:0000000000403a5d\n.text:0000000000403a5f\n.text:0000000000403a64\n.text:0000000000403a69\n.text:0000000000403a6c\n.text:0000000000403a6e\n.text:0000000000403a73\n.text:0000000000403a77\n.text:0000000000403a79\n.text:0000000000403a7c\n.text:0000000000403a7e\n.text:0000000000403a82\n.text:0000000000403a85\n.text:0000000000403a88\n.text:0000000000403a8c\n.text:0000000000403a92\n.text:0000000000403a97\n.text:0000000000403a9f\n.text:0000000000403aa4\n.text:0000000000403aa6\n.text:0000000000403aae\n.text:0000000000403ab3\n.text:0000000000403ab5\n.text:0000000000403aba\n.text:0000000000403abf\n.text:0000000000403ac3\n.text:0000000000403ac5\n.text:0000000000403aca\n.text:0000000000403acd\n.text:0000000000403ad0\n.text:0000000000403ad2\n.text:0000000000403ada\n.text:0000000000403adc\n.text:0000000000403ae4\n.text:0000000000403ae9\n.text:0000000000403aed\n.text:0000000000403af2\n.text:0000000000403af7\n.text:0000000000403afb\n.text:0000000000403b00\n.text:0000000000403b05\n.text:0000000000403b09\n.text:0000000000403b0d\n.text:0000000000403b13\n.text:0000000000403b18\n.text:0000000000403b20\n.text:0000000000403b22\n.text:0000000000403b24\n.text:0000000000403b28\n.text:0000000000403b2d\n.text:0000000000403b33\n.text:0000000000403b40\n.text:0000000000403b43\n.text:0000000000403b49\n.text:0000000000403b4c\n.text:0000000000403b4e\n.text:0000000000403b51\n.text:0000000000403b53\n.text:0000000000403b56\n.text:0000000000403b58\n.text:0000000000403b60\n.text:0000000000403b66\n.text:0000000000403b6a\n.text:0000000000403b6d\n.text:0000000000403b71\n.text:0000000000403b76\n.text:0000000000403b7a\n.text:0000000000403b7e\n.text:0000000000403b81\n.text:0000000000403b84\n.text:0000000000403b87\n.text:0000000000403b8b\n.text:0000000000403b8f\n.text:0000000000403b91\n.text:0000000000403b96\n.text:0000000000403b9a\n.text:0000000000403b9d\n.text:0000000000403ba0\n.text:0000000000403ba7\n.text:0000000000403ba8\n.text:0000000000403baa\n.text:0000000000403bac\n.text:0000000000403bae\n.text:0000000000403bb0\n.text:0000000000403bb1\n.text:0000000000403bb2\n.text:0000000000403bba\n.text:0000000000403bbd\n.text:0000000000403bbf\n.text:0000000000403bc2\n.text:0000000000403bc4\n.text:0000000000403bc6\n.text:0000000000403bc8\n.text:0000000000403bca\n.text:0000000000403bcd\n.text:0000000000403bd0\n.text:0000000000403bd3\n.text:0000000000403bd5\n.text:0000000000403bd9\n.text:0000000000403bdc\n.text:0000000000403bdf\n.text:0000000000403be2\n.text:0000000000403be4\n.text:0000000000403be6\n.text:0000000000403be9\n.text:0000000000403beb\n.text:0000000000403bf0\n.text:0000000000403bf2\n.text:0000000000403bf7\n.text:0000000000403bfc\n.text:0000000000403bff\n.text:0000000000403c01\n.text:0000000000403c06\n.text:0000000000403c09\n.text:0000000000403c0e\n.text:0000000000403c11\n.text:0000000000403c17\n.text:0000000000403c1d\n.text:0000000000403c20\n.text:0000000000403c25\n'
p748
tp749
sS'mpz_init_set_ui'
p750
(S'\n__stdcall mpz_init_set_ui(intmax_t * z, ulong i)\n'
p751
V\u000avoid mpz_init_set_ui(intmax_t *z,ulong i)\u000a\u000a{\u000a  *z = i;\u000a  return;\u000a}\u000a\u000a
p752
S'MOV qword ptr [RDI],RSI\nRET\n'
p753
S'48 89 37\nc3\n'
p754
S'.text:0000000000402b30\n.text:0000000000402b33\n'
p755
tp756
sS'set_quoting_style'
p757
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p758
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p759
S'TEST RDI,RDI\nMOV EAX,0x6092f0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p760
S'48 85 ff\nb8 f0 92 60 00\n48 0f 45 c7\n89 30\nc3\n'
p761
S'.text:0000000000402ed0\n.text:0000000000402ed3\n.text:0000000000402ed8\n.text:0000000000402edc\n.text:0000000000402ede\n'
p762
tp763
sS'textdomain'
p764
(S'\n__stdcall textdomain()\n'
p765
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00609080)();\u000a  return;\u000a}\u000a\u000a
p766
S'JMP qword ptr [0x00609080]\n'
p767
S'ff 25 ea 7b 20 00\n'
p768
S'.plt:0000000000401490\n'
p769
tp770
sS'xmemdup'
p771
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p772
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p773
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00404f00\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x004015f0\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p774
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 8c c5 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p775
S'.text:0000000000405040\n.text:0000000000405042\n.text:0000000000405044\n.text:0000000000405045\n.text:0000000000405048\n.text:000000000040504b\n.text:000000000040504e\n.text:0000000000405053\n.text:0000000000405056\n.text:0000000000405059\n.text:000000000040505c\n.text:000000000040505f\n.text:0000000000405064\n.text:0000000000405067\n.text:0000000000405068\n.text:000000000040506a\n.text:000000000040506c\n'
p776
tp777
sS'get_quoting_style'
p778
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p779
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p780
S'TEST RDI,RDI\nMOV EAX,0x6092f0\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p781
S'48 85 ff\nb8 f0 92 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p782
S'.text:0000000000402ec0\n.text:0000000000402ec3\n.text:0000000000402ec8\n.text:0000000000402ecc\n.text:0000000000402ece\n'
p783
tp784
sS'ferror_unlocked'
p785
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p786
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_00609118)();\u000a  return iVar1;\u000a}\u000a\u000a
p787
S'JMP qword ptr [0x00609118]\n'
p788
S'ff 25 52 7b 20 00\n'
p789
S'.plt:00000000004015c0\n'
p790
tp791
sS'exit'
p792
(S'\n__stdcall exit(int __status)\n'
p793
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006091b8)();\u000a  return;\u000a}\u000a\u000a
p794
S'JMP qword ptr [0x006091b8]\n'
p795
S'ff 25 b2 7a 20 00\n'
p796
S'.plt:0000000000401700\n'
p797
tp798
sS'mpz_sub'
p799
(S'\n__stdcall mpz_sub(intmax_t * r, intmax_t * a0, intmax_t * b0)\n'
p800
V\u000avoid mpz_sub(intmax_t *r,intmax_t *a0,intmax_t *b0)\u000a\u000a{\u000a  *r = *a0 - *b0;\u000a  return;\u000a}\u000a\u000a
p801
S'MOV RAX,qword ptr [RSI]\nSUB RAX,qword ptr [RDX]\nMOV qword ptr [RDI],RAX\nRET\n'
p802
S'48 8b 06\n48 2b 02\n48 89 07\nc3\n'
p803
S'.text:0000000000402490\n.text:0000000000402493\n.text:0000000000402496\n.text:0000000000402499\n'
p804
tp805
sS'locale_charset'
p806
(S'\n__stdcall locale_charset()\n'
p807
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a         + 0xca;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0040563d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0040563d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p808
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401640\nTEST RAX,RAX\nMOV R14D,0x406cf9\nCMOVNZ R14,RAX\nCALL 0x00405650\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00405615\nJMP 0x0040563d\nMOV RDI,RBX\nCALL 0x004014f0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004014f0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0040563d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x004015e0\nTEST EAX,EAX\nJZ 0x00405630\nCMP BPL,0x2a\nJNZ 0x004055f0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x004055f0\nMOV RDI,RBX\nCALL 0x004014f0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x407590\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p809
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 72 c0 ff ff\n48 85 c0\n41 be f9 6c 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 f8 be ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 ea be ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 c0 bf ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 b8 be ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 90 75 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p810
S'.text:00000000004055c0\n.text:00000000004055c1\n.text:00000000004055c3\n.text:00000000004055c4\n.text:00000000004055c9\n.text:00000000004055ce\n.text:00000000004055d1\n.text:00000000004055d7\n.text:00000000004055db\n.text:00000000004055e0\n.text:00000000004055e3\n.text:00000000004055e6\n.text:00000000004055e9\n.text:00000000004055eb\n.text:00000000004055f0\n.text:00000000004055f3\n.text:00000000004055f8\n.text:00000000004055fc\n.text:0000000000405601\n.text:0000000000405606\n.text:000000000040560b\n.text:0000000000405610\n.text:0000000000405613\n.text:0000000000405615\n.text:0000000000405618\n.text:000000000040561b\n.text:0000000000405620\n.text:0000000000405622\n.text:0000000000405624\n.text:0000000000405628\n.text:000000000040562a\n.text:000000000040562e\n.text:0000000000405630\n.text:0000000000405633\n.text:0000000000405638\n.text:000000000040563d\n.text:0000000000405641\n.text:0000000000405646\n.text:000000000040564a\n.text:000000000040564b\n.text:000000000040564d\n.text:000000000040564e\n'
p811
tp812
sS'set_program_name'
p813
(S'\n__stdcall set_program_name(char * argv0)\n'
p814
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p815
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x00402e51\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401530\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x00402e3b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x406668\nMOV EDX,0x7\nCALL 0x00401430\nTEST EAX,EAX\nJNZ 0x00402e3b\nMOV ESI,0x406670\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401430\nTEST EAX,EAX\nJNZ 0x00402e38\nADD R14,0x3\nMOV qword ptr [0x00609260],R14\nMOV RBX,R14\nMOV qword ptr [0x006092e8],RBX\nMOV qword ptr [0x00609288],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x006092c0]\nMOV EDI,0x406630\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401710\nCALL 0x00401400\n'
p816
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 47 e7 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 68 66 40 00\nba 07 00 00 00\ne8 1d e6 ff ff\n85 c0\n75 24\nbe 70 66 40 00\nba 03 00 00 00\n4c 89 f7\ne8 07 e6 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 28 64 20 00\n4c 89 f3\n48 89 1d a6 64 20 00\n48 89 1d 3f 64 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 68 64 20 00\nbf 30 66 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 a4 e8 ff ff\ne8 8f e5 ff ff\n'
p817
S'.text:0000000000402dd0\n.text:0000000000402dd2\n.text:0000000000402dd3\n.text:0000000000402dd4\n.text:0000000000402dd7\n.text:0000000000402dda\n.text:0000000000402ddc\n.text:0000000000402de1\n.text:0000000000402de4\n.text:0000000000402de9\n.text:0000000000402dec\n.text:0000000000402df0\n.text:0000000000402df4\n.text:0000000000402df7\n.text:0000000000402dfa\n.text:0000000000402dfe\n.text:0000000000402e00\n.text:0000000000402e04\n.text:0000000000402e09\n.text:0000000000402e0e\n.text:0000000000402e13\n.text:0000000000402e15\n.text:0000000000402e17\n.text:0000000000402e1c\n.text:0000000000402e21\n.text:0000000000402e24\n.text:0000000000402e29\n.text:0000000000402e2b\n.text:0000000000402e2d\n.text:0000000000402e31\n.text:0000000000402e38\n.text:0000000000402e3b\n.text:0000000000402e42\n.text:0000000000402e49\n.text:0000000000402e4d\n.text:0000000000402e4e\n.text:0000000000402e50\n.text:0000000000402e51\n.text:0000000000402e58\n.text:0000000000402e5d\n.text:0000000000402e62\n.text:0000000000402e67\n.text:0000000000402e6c\n'
p818
tp819
sS'quotearg_buffer'
p820
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p821
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p822
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x6092f0\nCMOVNZ RBP,R8\nCALL 0x00401420\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00402ff0\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p823
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd f0 92 60 00\n49 0f 45 e8\ne8 88 e4 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p824
S'.text:0000000000402f70\n.text:0000000000402f71\n.text:0000000000402f73\n.text:0000000000402f75\n.text:0000000000402f77\n.text:0000000000402f79\n.text:0000000000402f7a\n.text:0000000000402f7b\n.text:0000000000402f7e\n.text:0000000000402f81\n.text:0000000000402f84\n.text:0000000000402f87\n.text:0000000000402f8a\n.text:0000000000402f8f\n.text:0000000000402f93\n.text:0000000000402f98\n.text:0000000000402f9b\n.text:0000000000402f9d\n.text:0000000000402fa1\n.text:0000000000402fa5\n.text:0000000000402fa9\n.text:0000000000402fad\n.text:0000000000402fb0\n.text:0000000000402fb3\n.text:0000000000402fb6\n.text:0000000000402fb9\n.text:0000000000402fbc\n.text:0000000000402fbf\n.text:0000000000402fc3\n.text:0000000000402fc4\n.text:0000000000402fc9\n.text:0000000000402fcd\n.text:0000000000402fd1\n.text:0000000000402fd3\n.text:0000000000402fd7\n.text:0000000000402fd8\n.text:0000000000402fda\n.text:0000000000402fdc\n.text:0000000000402fde\n.text:0000000000402fe0\n.text:0000000000402fe1\n'
p825
tp826
sS'quotearg_colon'
p827
(S'\n__stdcall quotearg_colon(char * arg)\n'
p828
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p829
S'MOV ESI,0x3a\nJMP 0x00404150\n'
p830
S'be 3a 00 00 00\neb e9\n'
p831
S'.text:0000000000404160\n.text:0000000000404165\n'
p832
tp833
sS'syntax_error'
p834
(S'\n__stdcall syntax_error()\n'
p835
V\u000avoid syntax_error(void)\u000a\u000a{\u000a  undefined8 in_RAX;\u000a  undefined8 uVar1;\u000a  \u000a  uVar1 = dcgettext(0,"syntax error",5);\u000a  error(2,0,uVar1,in_RAX);\u000a  return;\u000a}\u000a\u000a
p836
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x406512\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nMOV EDI,0x2\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nPOP RCX\nJMP 0x004016c0\n'
p837
S'50\n31 ff\nbe 12 65 40 00\nba 05 00 00 00\ne8 3e f7 ff ff\n48 89 c1\nbf 02 00 00 00\n31 f6\n31 c0\n48 89 ca\n59\ne9 29 f9 ff ff\n'
p838
S'.text:0000000000401d70\n.text:0000000000401d71\n.text:0000000000401d73\n.text:0000000000401d78\n.text:0000000000401d7d\n.text:0000000000401d82\n.text:0000000000401d85\n.text:0000000000401d8a\n.text:0000000000401d8c\n.text:0000000000401d8e\n.text:0000000000401d91\n.text:0000000000401d92\n'
p839
tp840
sS'mpz_init_set_str'
p841
(S'\n__stdcall mpz_init_set_str()\n'
p842
V\u000aint mpz_init_set_str(void)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  char *s;\u000a  char *valid_suffixes;\u000a  \u000a  sVar1 = xstrtoimax(s,(char **)0x0,(intmax_t *)0xa,valid_suffixes);\u000a  return (int)-(uint)(sVar1 != LONGINT_OK);\u000a}\u000a\u000a
p843
S'PUSH RAX\nMOV RAX,RSI\nMOV RCX,RDI\nXOR ESI,ESI\nMOV EDX,0xa\nXOR R8D,R8D\nMOV RDI,RAX\nCALL 0x004050c0\nNEG EAX\nSBB EAX,EAX\nPOP RCX\nRET\n'
p844
S'50\n48 89 f0\n48 89 f9\n31 f6\nba 0a 00 00 00\n45 31 c0\n48 89 c7\ne8 b7 25 00 00\nf7 d8\n19 c0\n59\nc3\n'
p845
S'.text:0000000000402af0\n.text:0000000000402af1\n.text:0000000000402af4\n.text:0000000000402af7\n.text:0000000000402af9\n.text:0000000000402afe\n.text:0000000000402b01\n.text:0000000000402b04\n.text:0000000000402b09\n.text:0000000000402b0b\n.text:0000000000402b0d\n.text:0000000000402b0e\n'
p846
tp847
sS'rpl_fflush'
p848
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p849
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00609150)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p850
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040598d\nMOV RDI,RBX\nCALL 0x00401670\nTEST EAX,EAX\nJZ 0x0040598d\nMOV RDI,RBX\nCALL 0x004059a0\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401630\n'
p851
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 ef bc ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 9a bc ff ff\n'
p852
S'.text:0000000000405970\n.text:0000000000405971\n.text:0000000000405974\n.text:0000000000405977\n.text:0000000000405979\n.text:000000000040597c\n.text:0000000000405981\n.text:0000000000405983\n.text:0000000000405985\n.text:0000000000405988\n.text:000000000040598d\n.text:0000000000405990\n.text:0000000000405991\n'
p853
tp854
sS'__assert_fail'
p855
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_006090e0)();\u000a  return;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x006090e0]\n'
p858
S'ff 25 8a 7b 20 00\n'
p859
S'.plt:0000000000401550\n'
p860
tp861
sS'bindtextdomain'
p862
(S'\n__stdcall bindtextdomain()\n'
p863
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00609090)();\u000a  return;\u000a}\u000a\u000a
p864
S'JMP qword ptr [0x00609090]\n'
p865
S'ff 25 da 7b 20 00\n'
p866
S'.plt:00000000004014b0\n'
p867
tp868
sS'set_char_quoting'
p869
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p870
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p871
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x6092f0\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p872
S'89 f1\n48 85 ff\nbe f0 92 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p873
S'.text:0000000000402ee0\n.text:0000000000402ee2\n.text:0000000000402ee5\n.text:0000000000402eea\n.text:0000000000402eee\n.text:0000000000402ef0\n.text:0000000000402ef3\n.text:0000000000402ef7\n.text:0000000000402efc\n.text:0000000000402eff\n.text:0000000000402f01\n.text:0000000000402f03\n.text:0000000000402f06\n.text:0000000000402f08\n.text:0000000000402f0b\n.text:0000000000402f0d\n.text:0000000000402f10\n.text:0000000000402f15\n'
p874
tp875
sS'quotearg_n'
p876
(S'\n__stdcall quotearg_n(char * arg)\n'
p877
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p878
S'MOV RDX,-0x1\nMOV ECX,0x6092f0\nJMP 0x00403dd0\n'
p879
S'48 c7 c2 ff ff ff ff\nb9 f0 92 60 00\neb 02\n'
p880
S'.text:0000000000403dc0\n.text:0000000000403dc7\n.text:0000000000403dcc\n'
p881
tp882
sS'close_stream'
p883
(S'\n__stdcall close_stream(FILE * stream)\n'
p884
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p885
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401460\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x004015c0\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x004058f0\nTEST EBP,EBP\nJZ 0x0040558b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x004055af\nCALL 0x00401420\nMOV dword ptr [RAX],0x0\nJMP 0x004055af\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x004055af\nTEST CL,CL\nJNZ 0x004055af\nCALL 0x00401420\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p886
S'55\n41 56\n53\n48 89 fb\ne8 04 bf ff ff\n49 89 c6\n48 89 df\ne8 59 c0 ff ff\n89 c5\n48 89 df\ne8 7f 03 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 9d be ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 7e be ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p887
S'.text:0000000000405550\n.text:0000000000405551\n.text:0000000000405553\n.text:0000000000405554\n.text:0000000000405557\n.text:000000000040555c\n.text:000000000040555f\n.text:0000000000405562\n.text:0000000000405567\n.text:0000000000405569\n.text:000000000040556c\n.text:0000000000405571\n.text:0000000000405573\n.text:0000000000405575\n.text:000000000040557a\n.text:000000000040557c\n.text:000000000040557e\n.text:0000000000405583\n.text:0000000000405589\n.text:000000000040558b\n.text:000000000040558d\n.text:0000000000405590\n.text:0000000000405592\n.text:0000000000405594\n.text:0000000000405597\n.text:0000000000405599\n.text:000000000040559b\n.text:000000000040559d\n.text:00000000004055a2\n.text:00000000004055a4\n.text:00000000004055a7\n.text:00000000004055ac\n.text:00000000004055af\n.text:00000000004055b1\n.text:00000000004055b2\n.text:00000000004055b4\n.text:00000000004055b5\n'
p888
tp889
sS'quotearg_colon_mem'
p890
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p891
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p892
S'MOV EDX,0x3a\nJMP 0x004040e0\n'
p893
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p894
S'.text:0000000000404170\n.text:0000000000404175\n'
p895
tp896
sS'fraccompare'
p897
(S'\n__stdcall fraccompare(char * a, char * b)\n'
p898
V\u000aint fraccompare(char *a,char *b)\u000a\u000a{\u000a  char cVar1;\u000a  char cVar2;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  \u000a  if ((*a == -1) && (*b == -1)) {\u000a    a = a + 1;\u000a    b = b + 1;\u000a    while( true ) {\u000a      cVar1 = *a;\u000a      cVar2 = *b;\u000a      uVar3 = (int)cVar1 - 0x30;\u000a      if (cVar1 != cVar2) break;\u000a      a = a + 1;\u000a      b = b + 1;\u000a      if (9 < uVar3) {\u000a        return 0;\u000a      }\u000a    }\u000a    uVar4 = (int)cVar2 - 0x30;\u000a    if ((uVar3 < 10) && (uVar4 < 10)) {\u000a      return (int)cVar1 - (int)cVar2;\u000a    }\u000a    if (uVar3 < 10) {\u000aLAB_00404980:\u000a      do {\u000a        cVar1 = *a;\u000a        a = a + 1;\u000a      } while ((int)cVar1 == 0x30);\u000a      return (int)(-(uint)((int)cVar1 - 0x30U < 10) & 1);\u000a    }\u000a    if (9 < uVar4) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (*a == -1) {\u000a      a = a + 1;\u000a      goto LAB_00404980;\u000a    }\u000a    if (*b != -1) {\u000a      return 0;\u000a    }\u000a    b = b + 1;\u000a  }\u000a  do {\u000a    cVar1 = *b;\u000a    b = b + 1;\u000a  } while ((int)cVar1 == 0x30);\u000a  return (int)-(uint)((int)cVar1 - 0x30U < 10);\u000a}\u000a\u000a
p899
S'MOV AL,byte ptr [RDI]\nCMP AL,0xff\nJNZ 0x0040494b\nCMP byte ptr [RSI],0xff\nJZ 0x00404997\nCMP AL,0xff\nJZ 0x00404974\nXOR EAX,EAX\nCMP byte ptr [RSI],0xff\nJNZ 0x00404973\nINC RSI\nNOP dword ptr [RAX]\nMOVSX EAX,byte ptr [RSI]\nINC RSI\nCMP EAX,0x30\nJZ 0x00404960\nADD EAX,-0x30\nCMP EAX,0xa\nSBB EAX,EAX\nRET\nINC RDI\nNOP word ptr [RAX + RAX*0x1]\nMOVSX EAX,byte ptr [RDI]\nINC RDI\nCMP EAX,0x30\nJZ 0x00404980\nADD EAX,-0x30\nCMP EAX,0xa\nSBB EAX,EAX\nAND EAX,0x1\nRET\nINC RDI\nINC RSI\nNOP dword ptr [RAX]\nMOVSX EAX,byte ptr [RDI]\nMOVSX EDX,byte ptr [RSI]\nLEA ECX,[RAX + -0x30]\nCMP AL,DL\nJNZ 0x004049bb\nINC RDI\nINC RSI\nCMP ECX,0xa\nJC 0x004049a0\nXOR EAX,EAX\nRET\nLEA R8D,[RDX + -0x30]\nCMP ECX,0x9\nJA 0x004049cd\nCMP R8D,0x9\nJA 0x004049cd\nSUB EAX,EDX\nRET\nCMP ECX,0xa\nJC 0x00404980\nXOR EAX,EAX\nCMP R8D,0xa\nJC 0x00404960\nJMP 0x00404973\n'
p900
S'8a 07\n3c ff\n75 05\n80 3e ff\n74 4c\n3c ff\n74 25\n31 c0\n80 3e ff\n75 1d\n48 ff c6\n0f 1f 80 00 00 00 00\n0f be 06\n48 ff c6\n83 f8 30\n74 f5\n83 c0 d0\n83 f8 0a\n19 c0\nc3\n48 ff c7\n66 0f 1f 84 00 00 00 00 00\n0f be 07\n48 ff c7\n83 f8 30\n74 f5\n83 c0 d0\n83 f8 0a\n19 c0\n83 e0 01\nc3\n48 ff c7\n48 ff c6\n0f 1f 00\n0f be 07\n0f be 16\n8d 48 d0\n38 d0\n75 0e\n48 ff c7\n48 ff c6\n83 f9 0a\n72 e8\n31 c0\nc3\n44 8d 42 d0\n83 f9 09\n77 09\n41 83 f8 09\n77 03\n29 d0\nc3\n83 f9 0a\n72 ae\n31 c0\n41 83 f8 0a\n72 86\neb 97\n'
p901
S'.text:0000000000404940\n.text:0000000000404942\n.text:0000000000404944\n.text:0000000000404946\n.text:0000000000404949\n.text:000000000040494b\n.text:000000000040494d\n.text:000000000040494f\n.text:0000000000404951\n.text:0000000000404954\n.text:0000000000404956\n.text:0000000000404959\n.text:0000000000404960\n.text:0000000000404963\n.text:0000000000404966\n.text:0000000000404969\n.text:000000000040496b\n.text:000000000040496e\n.text:0000000000404971\n.text:0000000000404973\n.text:0000000000404974\n.text:0000000000404977\n.text:0000000000404980\n.text:0000000000404983\n.text:0000000000404986\n.text:0000000000404989\n.text:000000000040498b\n.text:000000000040498e\n.text:0000000000404991\n.text:0000000000404993\n.text:0000000000404996\n.text:0000000000404997\n.text:000000000040499a\n.text:000000000040499d\n.text:00000000004049a0\n.text:00000000004049a3\n.text:00000000004049a6\n.text:00000000004049a9\n.text:00000000004049ab\n.text:00000000004049ad\n.text:00000000004049b0\n.text:00000000004049b3\n.text:00000000004049b6\n.text:00000000004049b8\n.text:00000000004049ba\n.text:00000000004049bb\n.text:00000000004049bf\n.text:00000000004049c2\n.text:00000000004049c4\n.text:00000000004049c8\n.text:00000000004049ca\n.text:00000000004049cc\n.text:00000000004049cd\n.text:00000000004049d0\n.text:00000000004049d2\n.text:00000000004049d4\n.text:00000000004049d8\n.text:00000000004049da\n'
p902
tp903
sS'strtoimax'
p904
(S'\n__stdcall strtoimax(char * __nptr, char * * __endptr, int __base)\n'
p905
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aintmax_t strtoimax(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  intmax_t iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strtoimax_00609028)();\u000a  return iVar1;\u000a}\u000a\u000a
p906
S'JMP qword ptr [0x00609028]\n'
p907
S'ff 25 42 7c 20 00\n'
p908
S'.plt:00000000004013e0\n'
p909
tp910
sS'strcoll'
p911
(S'\n__stdcall strcoll(char * __s1, char * __s2)\n'
p912
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcoll(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcoll_00609168)();\u000a  return iVar1;\u000a}\u000a\u000a
p913
S'JMP qword ptr [0x00609168]\n'
p914
S'ff 25 02 7b 20 00\n'
p915
S'.plt:0000000000401660\n'
p916
tp917
sS'xcalloc'
p918
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p919
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p920
S'PUSH RAX\nCALL 0x004053b0\nTEST RAX,RAX\nJZ 0x0040502d\nPOP RCX\nRET\nCALL 0x00405090\n'
p921
S'50\ne8 8a 03 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p922
S'.text:0000000000405020\n.text:0000000000405021\n.text:0000000000405026\n.text:0000000000405029\n.text:000000000040502b\n.text:000000000040502c\n.text:000000000040502d\n'
p923
tp924
sS'clear_ungetc_buffer_preserving_position'
p925
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p926
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p927
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x004059a7\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x004059c0\n'
p928
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p929
S'.text:00000000004059a0\n.text:00000000004059a4\n.text:00000000004059a6\n.text:00000000004059a7\n.text:00000000004059a9\n.text:00000000004059ae\n'
p930
tp931
sS'mpz_get_ui'
p932
(S'\n__stdcall mpz_get_ui(intmax_t * z)\n'
p933
V\u000aulong mpz_get_ui(intmax_t *z)\u000a\u000a{\u000a  return *z;\u000a}\u000a\u000a
p934
S'MOV RAX,qword ptr [RDI]\nRET\n'
p935
S'48 8b 07\nc3\n'
p936
S'.text:0000000000402ac0\n.text:0000000000402ac3\n'
p937
tp938
sS'xnmalloc'
p939
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p940
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p941
S'MOV RAX,RDI\nMUL RSI\nJO 0x00404ef1\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00404f00\nPUSH RAX\nCALL 0x00405090\n'
p942
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p943
S'.text:0000000000404ee0\n.text:0000000000404ee3\n.text:0000000000404ee6\n.text:0000000000404ee8\n.text:0000000000404eec\n.text:0000000000404eef\n.text:0000000000404ef1\n.text:0000000000404ef2\n'
p944
tp945
sS'quotearg_char'
p946
(S'\n__stdcall quotearg_char(char * arg)\n'
p947
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p948
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x004040e0\n'
p949
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p950
S'.text:0000000000404150\n.text:0000000000404152\n.text:0000000000404159\n.text:000000000040415b\n'
p951
tp952
sS'malloc'
p953
(S'\n__stdcall malloc(size_t __size)\n'
p954
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00609148)();\u000a  return pvVar1;\u000a}\u000a\u000a
p955
S'JMP qword ptr [0x00609148]\n'
p956
S'ff 25 22 7b 20 00\n'
p957
S'.plt:0000000000401620\n'
p958
tp959
sS'c_tolower'
p960
(S'\n__stdcall c_tolower()\n'
p961
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p962
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p963
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p964
S'.text:0000000000405530\n.text:0000000000405533\n.text:0000000000405536\n.text:0000000000405539\n.text:000000000040553c\n'
p965
tp966
sS'getopt_long'
p967
(S'\n__stdcall getopt_long()\n'
p968
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_006090b8)();\u000a  return;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x006090b8]\n'
p970
S'ff 25 b2 7b 20 00\n'
p971
S'.plt:0000000000401500\n'
p972
tp973
sS'quotearg_style'
p974
(S'\n__stdcall quotearg_style(char * arg)\n'
p975
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p976
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00403fc0\n'
p977
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p978
S'.text:00000000004040a0\n.text:00000000004040a3\n.text:00000000004040a5\n.text:00000000004040a7\n.text:00000000004040a9\n.text:00000000004040ac\n'
p979
tp980
sS'emit_try_help'
p981
(S'\n__stdcall emit_try_help()\n'
p982
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p983
S'PUSH RBX\nMOV RBX,qword ptr [0x006092c0]\nXOR EDI,EDI\nMOV ESI,0x4063b3\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x006092e8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401720\n'
p984
S'53\n48 8b 1d a8 78 20 00\n31 ff\nbe b3 63 40 00\nba 05 00 00 00\ne8 97 fa ff ff\n48 89 c2\n48 8b 0d b5 78 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 dd fc ff ff\n'
p985
S'.text:0000000000401a10\n.text:0000000000401a11\n.text:0000000000401a18\n.text:0000000000401a1a\n.text:0000000000401a1f\n.text:0000000000401a24\n.text:0000000000401a29\n.text:0000000000401a2c\n.text:0000000000401a33\n.text:0000000000401a38\n.text:0000000000401a3a\n.text:0000000000401a3d\n.text:0000000000401a3e\n'
p986
tp987
sS'strrchr'
p988
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p989
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006090d0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p990
S'JMP qword ptr [0x006090d0]\n'
p991
S'ff 25 9a 7b 20 00\n'
p992
S'.plt:0000000000401530\n'
p993
tp994
sS'quotearg_alloc_mem'
p995
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p996
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p997
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x6092f0\nCMOVNZ R12,RCX\nCALL 0x00401420\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402ff0\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00404fd0\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402ff0\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x00403d1a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p998
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc f0 92 60 00\n4c 0f 45 e1\ne8 a8 d7 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 01 13 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p999
S'.text:0000000000403c40\n.text:0000000000403c41\n.text:0000000000403c43\n.text:0000000000403c45\n.text:0000000000403c47\n.text:0000000000403c49\n.text:0000000000403c4a\n.text:0000000000403c4e\n.text:0000000000403c51\n.text:0000000000403c56\n.text:0000000000403c59\n.text:0000000000403c5e\n.text:0000000000403c61\n.text:0000000000403c66\n.text:0000000000403c69\n.text:0000000000403c6f\n.text:0000000000403c73\n.text:0000000000403c78\n.text:0000000000403c7d\n.text:0000000000403c7f\n.text:0000000000403c83\n.text:0000000000403c85\n.text:0000000000403c88\n.text:0000000000403c8c\n.text:0000000000403c91\n.text:0000000000403c95\n.text:0000000000403c9a\n.text:0000000000403c9e\n.text:0000000000403ca0\n.text:0000000000403ca2\n.text:0000000000403ca5\n.text:0000000000403ca8\n.text:0000000000403cab\n.text:0000000000403cb0\n.text:0000000000403cb5\n.text:0000000000403cb7\n.text:0000000000403cbc\n.text:0000000000403cc0\n.text:0000000000403cc3\n.text:0000000000403cc7\n.text:0000000000403cca\n.text:0000000000403ccf\n.text:0000000000403cd2\n.text:0000000000403cd6\n.text:0000000000403cda\n.text:0000000000403cdd\n.text:0000000000403ce0\n.text:0000000000403ce5\n.text:0000000000403cea\n.text:0000000000403ced\n.text:0000000000403cf2\n.text:0000000000403cf7\n.text:0000000000403cf9\n.text:0000000000403cfe\n.text:0000000000403d03\n.text:0000000000403d07\n.text:0000000000403d0a\n.text:0000000000403d0e\n.text:0000000000403d13\n.text:0000000000403d15\n.text:0000000000403d17\n.text:0000000000403d1a\n.text:0000000000403d1d\n.text:0000000000403d21\n.text:0000000000403d22\n.text:0000000000403d24\n.text:0000000000403d26\n.text:0000000000403d28\n.text:0000000000403d2a\n.text:0000000000403d2b\n'
p1000
tp1001
sS'bkm_scale'
p1002
(S'\n__stdcall bkm_scale(intmax_t * x)\n'
p1003
V\u000astrtol_error bkm_scale(intmax_t *x)\u000a\u000a{\u000a  long lVar1;\u000a  strtol_error sVar2;\u000a  long lVar3;\u000a  int in_ESI;\u000a  long lVar4;\u000a  long lVar5;\u000a  \u000a  lVar1 = *x;\u000a  lVar4 = (long)in_ESI;\u000a  lVar5 = -0x8000000000000000;\u000a  sVar2 = LONGINT_OVERFLOW;\u000a  if (-0x8000000000000000 / lVar4 <= lVar1) {\u000a    lVar3 = SUB168(((undefined  [16])0x0 << 0x40 | ZEXT816(0x7fffffffffffffff)) / SEXT816(lVar4),0);\u000a    lVar5 = lVar4 * lVar1;\u000a    sVar2 = (strtol_error)(lVar3 < lVar1);\u000a    if (lVar3 < lVar1) {\u000a      lVar5 = 0x7fffffffffffffff;\u000a    }\u000a  }\u000a  *x = lVar5;\u000a  return sVar2;\u000a}\u000a\u000a
p1004
S'MOV R8,0x7fffffffffffffff\nMOV R9,qword ptr [RDI]\nMOVSXD RSI,ESI\nLEA RCX,[R8 + 0x1]\nMOV RAX,RCX\nCQO\nIDIV RSI\nCMP R9,RAX\nMOV EAX,0x1\nJL 0x00405364\nMOV RAX,R8\nCQO\nIDIV RSI\nMOV RDX,RAX\nIMUL RSI,R9\nXOR EAX,EAX\nCMP RDX,R9\nSETL AL\nCMOVL RSI,R8\nMOV RCX,RSI\nMOV qword ptr [RDI],RCX\nRET\n'
p1005
S'49 b8 ff ff ff ff ff ff ff 7f\n4c 8b 0f\n48 63 f6\n49 8d 48 01\n48 89 c8\n48 99\n48 f7 fe\n49 39 c1\nb8 01 00 00 00\n7c 1e\n4c 89 c0\n48 99\n48 f7 fe\n48 89 c2\n49 0f af f1\n31 c0\n4c 39 ca\n0f 9c c0\n49 0f 4c f0\n48 89 f1\n48 89 0f\nc3\n'
p1006
S'.text:0000000000405320\n.text:000000000040532a\n.text:000000000040532d\n.text:0000000000405330\n.text:0000000000405334\n.text:0000000000405337\n.text:0000000000405339\n.text:000000000040533c\n.text:000000000040533f\n.text:0000000000405344\n.text:0000000000405346\n.text:0000000000405349\n.text:000000000040534b\n.text:000000000040534e\n.text:0000000000405351\n.text:0000000000405355\n.text:0000000000405357\n.text:000000000040535a\n.text:000000000040535d\n.text:0000000000405361\n.text:0000000000405364\n.text:0000000000405367\n'
p1007
tp1008
sS'quotearg_style_mem'
p1009
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1010
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1011
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404060\n'
p1012
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1013
S'.text:00000000004040c0\n.text:00000000004040c3\n.text:00000000004040c6\n.text:00000000004040c8\n.text:00000000004040ca\n.text:00000000004040cc\n.text:00000000004040cf\n.text:00000000004040d2\n'
p1014
tp1015
sS'xalloc_die'
p1016
(S'\n__stdcall xalloc_die()\n'
p1017
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x4065b4,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1018
S'PUSH RBX\nMOV EBX,dword ptr [0x00609200]\nXOR EDI,EDI\nMOV ESI,0x406f2f\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x4065b4\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004016c0\nCALL 0x00401400\n'
p1019
S'53\n8b 1d 69 41 20 00\n31 ff\nbe 2f 6f 40 00\nba 05 00 00 00\ne8 18 c4 ff ff\n48 89 c1\n31 f6\nba b4 65 40 00\n31 c0\n89 df\ne8 05 c6 ff ff\ne8 40 c3 ff ff\n'
p1020
S'.text:0000000000405090\n.text:0000000000405091\n.text:0000000000405097\n.text:0000000000405099\n.text:000000000040509e\n.text:00000000004050a3\n.text:00000000004050a8\n.text:00000000004050ab\n.text:00000000004050ad\n.text:00000000004050b2\n.text:00000000004050b4\n.text:00000000004050b6\n.text:00000000004050bb\n'
p1021
tp1022
sS'quotearg_n_custom'
p1023
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1024
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1025
S'MOV R8,-0x1\nJMP 0x004041e0\n'
p1026
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1027
S'.text:00000000004041d0\n.text:00000000004041d7\n'
p1028
tp1029
sS'__freading'
p1030
(S'\n__stdcall __freading()\n'
p1031
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00609170)();\u000a  return;\u000a}\u000a\u000a
p1032
S'JMP qword ptr [0x00609170]\n'
p1033
S'ff 25 fa 7a 20 00\n'
p1034
S'.plt:0000000000401670\n'
p1035
tp1036
sS'fputs_unlocked'
p1037
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1038
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_00609110)();\u000a  return iVar1;\u000a}\u000a\u000a
p1039
S'JMP qword ptr [0x00609110]\n'
p1040
S'ff 25 5a 7b 20 00\n'
p1041
S'.plt:00000000004015b0\n'
p1042
tp1043
sS'main'
p1044
(S'\n__stdcall main(char * * argv)\n'
p1045
V\u000aint main(char **argv)\u000a\u000a{\u000a  char *pcVar1;\u000a  _Bool _Var2;\u000a  int iVar3;\u000a  VALUE *v;\u000a  undefined8 uVar4;\u000a  uint uVar5;\u000a  char **command_name;\u000a  \u000a  set_program_name(*command_name);\u000a  setlocale(6,\u000a              "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a              + 0xca);\u000a  bindtextdomain(0x40636a,"/usr/local/share/locale");\u000a  textdomain(0x40636a);\u000a  initialize_exit_failure();\u000a  atexit(close_stdout);\u000a  uVar5 = (uint)(char **)((ulong)argv & 0xffffffff);\u000a  parse_long_options((char **)((ulong)argv & 0xffffffff),(char *)command_name,"expr","GNU coreutils"\u000a                     ,(void (*)(int))&DAT_00406374,usage,"Mike Parker","James Youngman",\u000a                     "Paul Eggert",0);\u000a  if (1 < uVar5) {\u000a    pcVar1 = command_name[1];\u000a    if (((*pcVar1 == '-') && (pcVar1[1] == '-')) && (pcVar1[2] == 0)) {\u000a      if (uVar5 - 1 < 2) goto LAB_00401c66;\u000a      command_name = command_name + 1;\u000a    }\u000a    args = command_name + 1;\u000a    v = eval();\u000a    _Var2 = nomoreargs();\u000a    if (_Var2 == false) {\u000a      syntax_error();\u000a    }\u000a    printv(v);\u000a    _Var2 = null(v);\u000a    return (int)(uint)_Var2;\u000a  }\u000aLAB_00401c66:\u000a  uVar4 = dcgettext(0,"missing operand",5);\u000a  error(0,0,uVar4,uVar4);\u000a  iVar3 = usage(2);\u000a  exit_failure = 3;\u000a  return iVar3;\u000a}\u000a\u000a
p1046
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV EBP,EDI\nMOV RDI,qword ptr [RBX]\nCALL 0x00402dd0\nMOV EDI,0x6\nMOV ESI,0x406cf9\nCALL 0x004016a0\nMOV EDI,0x40636a\nMOV ESI,0x40634e\nCALL 0x004014b0\nMOV EDI,0x40636a\nCALL 0x00401490\nCALL 0x00401ca0\nMOV EDI,0x402b60\nCALL 0x00405ab0\nMOV EDX,0x406349\nMOV ECX,0x406366\nMOV R8D,0x406374\nMOV R9D,0x401870\nMOV EAX,0x0\nMOV EDI,EBP\nMOV RSI,RBX\nPUSH 0x0\nPUSH 0x406394\nPUSH 0x406385\nPUSH 0x406379\nCALL 0x00402ce0\nADD RSP,0x20\nCMP EBP,0x2\nJC 0x00401c66\nMOV RAX,qword ptr [RBX + 0x8]\nCMP byte ptr [RAX],0x2d\nJNZ 0x00401c26\nCMP byte ptr [RAX + 0x1],0x2d\nJNZ 0x00401c26\nCMP byte ptr [RAX + 0x2],0x0\nJNZ 0x00401c26\nDEC EBP\nCMP EBP,0x1\nJBE 0x00401c66\nADD RBX,0x8\nADD RBX,0x8\nMOV qword ptr [0x006092d0],RBX\nMOV EDI,0x1\nCALL 0x00401cb0\nMOV RBX,RAX\nCALL 0x00401d60\nTEST AL,AL\nJNZ 0x00401c4c\nCALL 0x00401d70\nMOV RDI,RBX\nCALL 0x00401da0\nMOV RDI,RBX\nCALL 0x00401de0\nMOVZX EAX,AL\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x4063a3\nMOV EDX,0x5\nCALL 0x004014c0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004016c0\nMOV EDI,0x2\nCALL 0x00401870\nNOP word ptr CS:[RAX + RAX*0x1]\n'
p1047
S'55\n53\n50\n48 89 f3\n89 fd\n48 8b 3b\ne8 40 12 00 00\nbf 06 00 00 00\nbe f9 6c 40 00\ne8 01 fb ff ff\nbf 6a 63 40 00\nbe 4e 63 40 00\ne8 02 f9 ff ff\nbf 6a 63 40 00\ne8 d8 f8 ff ff\ne8 e3 00 00 00\nbf 60 2b 40 00\ne8 e9 3e 00 00\nba 49 63 40 00\nb9 66 63 40 00\n41 b8 74 63 40 00\n41 b9 70 18 40 00\nb8 00 00 00 00\n89 ef\n48 89 de\n6a 00\n68 94 63 40 00\n68 85 63 40 00\n68 79 63 40 00\ne8 e3 10 00 00\n48 83 c4 20\n83 fd 02\n72 60\n48 8b 43 08\n80 38 2d\n75 17\n80 78 01 2d\n75 11\n80 78 02 00\n75 0b\nff cd\n83 fd 01\n76 44\n48 83 c3 08\n48 83 c3 08\n48 89 1d 9f 76 20 00\nbf 01 00 00 00\ne8 75 00 00 00\n48 89 c3\ne8 1d 01 00 00\n84 c0\n75 05\ne8 24 01 00 00\n48 89 df\ne8 4c 01 00 00\n48 89 df\ne8 84 01 00 00\n0f b6 c0\n48 83 c4 08\n5b\n5d\nc3\n31 ff\nbe a3 63 40 00\nba 05 00 00 00\ne8 49 f8 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 38 fa ff ff\nbf 02 00 00 00\ne8 de fb ff ff\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n'
p1048
S'.text:0000000000401b80\n.text:0000000000401b81\n.text:0000000000401b82\n.text:0000000000401b83\n.text:0000000000401b86\n.text:0000000000401b88\n.text:0000000000401b8b\n.text:0000000000401b90\n.text:0000000000401b95\n.text:0000000000401b9a\n.text:0000000000401b9f\n.text:0000000000401ba4\n.text:0000000000401ba9\n.text:0000000000401bae\n.text:0000000000401bb3\n.text:0000000000401bb8\n.text:0000000000401bbd\n.text:0000000000401bc2\n.text:0000000000401bc7\n.text:0000000000401bcc\n.text:0000000000401bd1\n.text:0000000000401bd7\n.text:0000000000401bdd\n.text:0000000000401be2\n.text:0000000000401be4\n.text:0000000000401be7\n.text:0000000000401be9\n.text:0000000000401bee\n.text:0000000000401bf3\n.text:0000000000401bf8\n.text:0000000000401bfd\n.text:0000000000401c01\n.text:0000000000401c04\n.text:0000000000401c06\n.text:0000000000401c0a\n.text:0000000000401c0d\n.text:0000000000401c0f\n.text:0000000000401c13\n.text:0000000000401c15\n.text:0000000000401c19\n.text:0000000000401c1b\n.text:0000000000401c1d\n.text:0000000000401c20\n.text:0000000000401c22\n.text:0000000000401c26\n.text:0000000000401c2a\n.text:0000000000401c31\n.text:0000000000401c36\n.text:0000000000401c3b\n.text:0000000000401c3e\n.text:0000000000401c43\n.text:0000000000401c45\n.text:0000000000401c47\n.text:0000000000401c4c\n.text:0000000000401c4f\n.text:0000000000401c54\n.text:0000000000401c57\n.text:0000000000401c5c\n.text:0000000000401c5f\n.text:0000000000401c63\n.text:0000000000401c64\n.text:0000000000401c65\n.text:0000000000401c66\n.text:0000000000401c68\n.text:0000000000401c6d\n.text:0000000000401c72\n.text:0000000000401c77\n.text:0000000000401c7a\n.text:0000000000401c7c\n.text:0000000000401c7e\n.text:0000000000401c80\n.text:0000000000401c83\n.text:0000000000401c88\n.text:0000000000401c8d\n.text:0000000000401c92\n'
p1049
tp1050
sS'xcharalloc'
p1051
(S'\n__stdcall xcharalloc(size_t n)\n'
p1052
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1053
S'JMP 0x00404f00\n'
p1054
S'e9 2b ff ff ff\n'
p1055
S'.text:0000000000404fd0\n'
p1056
tp1057
sS'c_isupper'
p1058
(S'\n__stdcall c_isupper()\n'
p1059
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1060
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1061
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1062
S'.text:0000000000405500\n.text:0000000000405503\n.text:0000000000405506\n.text:0000000000405509\n'
p1063
tp1064
sS'c_isalnum'
p1065
(S'\n__stdcall c_isalnum()\n'
p1066
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1067
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x0040541b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x0040541b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x0040541a\nXOR EAX,EAX\nRET\n'
p1068
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1069
S'.text:0000000000405400\n.text:0000000000405402\n.text:0000000000405405\n.text:0000000000405408\n.text:000000000040540a\n.text:0000000000405414\n.text:0000000000405418\n.text:000000000040541a\n.text:000000000040541b\n.text:000000000040541e\n.text:0000000000405421\n.text:0000000000405423\n.text:0000000000405425\n'
p1070
tp1071
sS'mpz_add'
p1072
(S'\n__stdcall mpz_add(intmax_t * r, intmax_t * a0, intmax_t * b0)\n'
p1073
V\u000avoid mpz_add(intmax_t *r,intmax_t *a0,intmax_t *b0)\u000a\u000a{\u000a  *r = *a0 + *b0;\u000a  return;\u000a}\u000a\u000a
p1074
S'MOV RAX,qword ptr [RSI]\nADD RAX,qword ptr [RDX]\nMOV qword ptr [RDI],RAX\nRET\n'
p1075
S'48 8b 06\n48 03 02\n48 89 07\nc3\n'
p1076
S'.text:0000000000402480\n.text:0000000000402483\n.text:0000000000402486\n.text:0000000000402489\n'
p1077
tp1078
sS'mpz_sgn'
p1079
(S'\n__stdcall mpz_sgn(intmax_t * z)\n'
p1080
V\u000aint mpz_sgn(intmax_t *z)\u000a\u000a{\u000a  uint uVar1;\u000a  \u000a  uVar1 = 0xffffffff;\u000a  if (-1 < *z) {\u000a    uVar1 = (uint)(*z != 0);\u000a  }\u000a  return (int)uVar1;\u000a}\u000a\u000a
p1081
S'XOR ECX,ECX\nCMP qword ptr [RDI],0x0\nSETNZ CL\nMOV EAX,0xffffffff\nCMOVNS EAX,ECX\nRET\n'
p1082
S'31 c9\n48 83 3f 00\n0f 95 c1\nb8 ff ff ff ff\n0f 49 c1\nc3\n'
p1083
S'.text:0000000000401e70\n.text:0000000000401e72\n.text:0000000000401e76\n.text:0000000000401e79\n.text:0000000000401e7e\n.text:0000000000401e81\n'
p1084
tp1085
sS'__errno_location'
p1086
(S'\n__stdcall __errno_location()\n'
p1087
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00609048)();\u000a  return piVar1;\u000a}\u000a\u000a
p1088
S'JMP qword ptr [0x00609048]\n'
p1089
S'ff 25 22 7c 20 00\n'
p1090
S'.plt:0000000000401420\n'
p1091
tp1092
sS'x2nrealloc'
p1093
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1094
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1095
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00404f9c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404fc9\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00404fba\nTEST RCX,RCX\nJNZ 0x00404fba\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00404f40\nPUSH RAX\nCALL 0x00405090\n'
p1096
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1097
S'.text:0000000000404f70\n.text:0000000000404f73\n.text:0000000000404f76\n.text:0000000000404f79\n.text:0000000000404f7b\n.text:0000000000404f85\n.text:0000000000404f87\n.text:0000000000404f8a\n.text:0000000000404f8d\n.text:0000000000404f8f\n.text:0000000000404f92\n.text:0000000000404f95\n.text:0000000000404f9a\n.text:0000000000404f9c\n.text:0000000000404f9f\n.text:0000000000404fa1\n.text:0000000000404fa6\n.text:0000000000404fa8\n.text:0000000000404fab\n.text:0000000000404fad\n.text:0000000000404fb4\n.text:0000000000404fb7\n.text:0000000000404fba\n.text:0000000000404fbd\n.text:0000000000404fc1\n.text:0000000000404fc4\n.text:0000000000404fc9\n.text:0000000000404fca\n'
p1098
tp1099
sS'quotearg_n_options'
p1100
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1101
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1102
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401420\nTEST R12D,R12D\nJS 0x00403f81\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x00609208]\nCMP dword ptr [0x00609210],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x00403e9b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x609218\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00404f40\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x00609208],R15\nJNZ 0x00403e62\nMOVUPS XMM0,xmmword ptr [0x00609218]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x00609210]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x00401560\nMOV dword ptr [0x00609210],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00402ff0\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x00403efd\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00403f6b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x609330\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00403f28\nCALL 0x004013d0\nMOV RDI,R15\nCALL 0x00404fd0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00402ff0\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401400\n'
p1103
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 31 d6 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 fe 53 20 00\n44 39 25 ff 53 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 18 92 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 f8 10 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d b3 53 20 00\n75 0b\n0f 10 05 ba 53 20 00\n41 0f 11 07\n8b 05 a8 53 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 dd d6 ff ff\n89 1d 87 53 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 30 93 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 a8 d4 ff ff\n4c 89 ff\ne8 a0 10 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 7a d4 ff ff\n'
p1104
S'.text:0000000000403dd0\n.text:0000000000403dd1\n.text:0000000000403dd3\n.text:0000000000403dd5\n.text:0000000000403dd7\n.text:0000000000403dd9\n.text:0000000000403dda\n.text:0000000000403dde\n.text:0000000000403de1\n.text:0000000000403de4\n.text:0000000000403de7\n.text:0000000000403dea\n.text:0000000000403def\n.text:0000000000403df2\n.text:0000000000403df8\n.text:0000000000403dfd\n.text:0000000000403dff\n.text:0000000000403e03\n.text:0000000000403e0a\n.text:0000000000403e11\n.text:0000000000403e16\n.text:0000000000403e1b\n.text:0000000000403e20\n.text:0000000000403e22\n.text:0000000000403e27\n.text:0000000000403e2a\n.text:0000000000403e2d\n.text:0000000000403e33\n.text:0000000000403e35\n.text:0000000000403e38\n.text:0000000000403e3c\n.text:0000000000403e3f\n.text:0000000000403e43\n.text:0000000000403e48\n.text:0000000000403e4b\n.text:0000000000403e4e\n.text:0000000000403e55\n.text:0000000000403e57\n.text:0000000000403e5e\n.text:0000000000403e62\n.text:0000000000403e68\n.text:0000000000403e6b\n.text:0000000000403e6f\n.text:0000000000403e72\n.text:0000000000403e75\n.text:0000000000403e79\n.text:0000000000403e7b\n.text:0000000000403e7e\n.text:0000000000403e83\n.text:0000000000403e89\n.text:0000000000403e8c\n.text:0000000000403e91\n.text:0000000000403e96\n.text:0000000000403e9b\n.text:0000000000403e9e\n.text:0000000000403ea2\n.text:0000000000403ea6\n.text:0000000000403eab\n.text:0000000000403eaf\n.text:0000000000403eb3\n.text:0000000000403eb7\n.text:0000000000403ebb\n.text:0000000000403ebf\n.text:0000000000403ec4\n.text:0000000000403ec7\n.text:0000000000403eca\n.text:0000000000403ecd\n.text:0000000000403ed2\n.text:0000000000403ed5\n.text:0000000000403ed8\n.text:0000000000403edb\n.text:0000000000403edc\n.text:0000000000403ee1\n.text:0000000000403ee5\n.text:0000000000403ee8\n.text:0000000000403eeb\n.text:0000000000403eed\n.text:0000000000403ef2\n.text:0000000000403ef6\n.text:0000000000403efb\n.text:0000000000403efd\n.text:0000000000403f01\n.text:0000000000403f06\n.text:0000000000403f09\n.text:0000000000403f0c\n.text:0000000000403f11\n.text:0000000000403f16\n.text:0000000000403f19\n.text:0000000000403f1e\n.text:0000000000403f21\n.text:0000000000403f23\n.text:0000000000403f28\n.text:0000000000403f2b\n.text:0000000000403f30\n.text:0000000000403f33\n.text:0000000000403f36\n.text:0000000000403f3b\n.text:0000000000403f3e\n.text:0000000000403f42\n.text:0000000000403f45\n.text:0000000000403f48\n.text:0000000000403f4d\n.text:0000000000403f52\n.text:0000000000403f57\n.text:0000000000403f5a\n.text:0000000000403f5d\n.text:0000000000403f5e\n.text:0000000000403f63\n.text:0000000000403f67\n.text:0000000000403f6b\n.text:0000000000403f6f\n.text:0000000000403f72\n.text:0000000000403f76\n.text:0000000000403f77\n.text:0000000000403f79\n.text:0000000000403f7b\n.text:0000000000403f7d\n.text:0000000000403f7f\n.text:0000000000403f80\n.text:0000000000403f81\n'
p1105
tp1106
sS'strcmp'
p1107
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1108
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00609128)();\u000a  return iVar1;\u000a}\u000a\u000a
p1109
S'JMP qword ptr [0x00609128]\n'
p1110
S'ff 25 42 7b 20 00\n'
p1111
S'.plt:00000000004015e0\n'
p1112
tp1113
sS'set_custom_quoting'
p1114
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1115
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1116
S'TEST RDI,RDI\nMOV EAX,0x6092f0\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00402f65\nTEST RDX,RDX\nJZ 0x00402f65\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401400\n'
p1117
S'48 85 ff\nb8 f0 92 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 95 e4 ff ff\n'
p1118
S'.text:0000000000402f40\n.text:0000000000402f43\n.text:0000000000402f48\n.text:0000000000402f4c\n.text:0000000000402f52\n.text:0000000000402f55\n.text:0000000000402f57\n.text:0000000000402f5a\n.text:0000000000402f5c\n.text:0000000000402f60\n.text:0000000000402f64\n.text:0000000000402f65\n.text:0000000000402f66\n'
p1119
tp1120
sS'c_isalpha'
p1121
(S'\n__stdcall c_isalpha()\n'
p1122
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1123
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x0040544b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1124
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1125
S'.text:0000000000405430\n.text:0000000000405433\n.text:0000000000405436\n.text:0000000000405438\n.text:0000000000405442\n.text:0000000000405444\n.text:0000000000405447\n.text:000000000040544a\n.text:000000000040544b\n.text:000000000040544d\n'
p1126
tp1127
sS'quotearg_custom_mem'
p1128
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1129
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1130
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x004041e0\n'
p1131
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1132
S'.text:0000000000404270\n.text:0000000000404273\n.text:0000000000404276\n.text:0000000000404279\n.text:000000000040427c\n.text:000000000040427e\n.text:0000000000404281\n'
p1133
tp1134
sS're_compile_pattern'
p1135
(S'\n__stdcall re_compile_pattern(char * __pattern, size_t __length, re_pattern_buffer * __buffer)\n'
p1136
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * re_compile_pattern(char *__pattern,size_t __length,re_pattern_buffer *__buffer)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_re_compile_pattern_006091d0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1137
S'JMP qword ptr [0x006091d0]\n'
p1138
S'ff 25 9a 7a 20 00\n'
p1139
S'.plt:0000000000401730\n'
p1140
tp1141
sS'rpl_calloc'
p1142
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1143
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00609120)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1144
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x004053eb\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x004053f0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x004053f0\nPUSH RAX\nCALL 0x00401420\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x004015d0\n'
p1145
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 3f c0 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 d5 c1 ff ff\n'
p1146
S'.text:00000000004053b0\n.text:00000000004053b3\n.text:00000000004053b8\n.text:00000000004053ba\n.text:00000000004053bd\n.text:00000000004053c2\n.text:00000000004053c4\n.text:00000000004053c7\n.text:00000000004053cb\n.text:00000000004053cd\n.text:00000000004053d0\n.text:00000000004053d3\n.text:00000000004053d6\n.text:00000000004053d9\n.text:00000000004053db\n.text:00000000004053dc\n.text:00000000004053e1\n.text:00000000004053e7\n.text:00000000004053e9\n.text:00000000004053ea\n.text:00000000004053eb\n.text:00000000004053f0\n.text:00000000004053f3\n.text:00000000004053f6\n'
p1147
tp1148
sS'memset'
p1149
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1150
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006090e8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1151
S'JMP qword ptr [0x006090e8]\n'
p1152
S'ff 25 82 7b 20 00\n'
p1153
S'.plt:0000000000401560\n'
p1154
tp1155
sS'getc_unlocked'
p1156
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1157
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00609078)();\u000a  return iVar1;\u000a}\u000a\u000a
p1158
S'JMP qword ptr [0x00609078]\n'
p1159
S'ff 25 f2 7b 20 00\n'
p1160
S'.plt:0000000000401480\n'
p1161
tp1162
sS'null'
p1163
(S'\n__stdcall null(VALUE * v)\n'
p1164
V\u000a_Bool null(VALUE *v)\u000a\u000a{\u000a  char cVar1;\u000a  int iVar2;\u000a  char *pcVar3;\u000a  bool bVar4;\u000a  \u000a  if (v->type == string) {\u000a    cVar1 = *(char *)v->u;\u000a    bVar4 = true;\u000a    if (cVar1 != 0) {\u000a      pcVar3 = (char *)v->u + (ulong)(cVar1 == '-') + 1;\u000a      do {\u000a        if (pcVar3[-1] != '0') {\u000a          return false;\u000a        }\u000a        cVar1 = *pcVar3;\u000a        pcVar3 = pcVar3 + 1;\u000a      } while (cVar1 != 0);\u000a    }\u000a  }\u000a  else {\u000a    if (v->type != integer) {\u000a                    /* WARNING: Subroutine does not return */\u000a      abort();\u000a    }\u000a    iVar2 = mpz_sgn(&v->u);\u000a    bVar4 = iVar2 == 0;\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p1165
S'PUSH RAX\nMOV EAX,dword ptr [RDI]\nCMP EAX,0x1\nJZ 0x00401dfc\nTEST EAX,EAX\nJNZ 0x00401e35\nADD RDI,0x8\nCALL 0x00401e70\nTEST EAX,EAX\nSETZ AL\nJMP 0x00401e33\nMOV RCX,qword ptr [RDI + 0x8]\nMOV DL,byte ptr [RCX]\nMOV AL,0x1\nTEST DL,DL\nJZ 0x00401e33\nXOR ESI,ESI\nCMP DL,0x2d\nSETZ SIL\nLEA RCX,[RCX + RSI*0x1 + 0x1]\nNOP word ptr CS:[RAX + RAX*0x1]\nCMP byte ptr [RCX + -0x1],0x30\nJNZ 0x00401e31\nCMP byte ptr [RCX],0x0\nLEA RCX,[RCX + 0x1]\nJNZ 0x00401e20\nJMP 0x00401e33\nXOR EAX,EAX\nPOP RCX\nRET\nCALL 0x00401400\n'
p1166
S'50\n8b 07\n83 f8 01\n74 14\n85 c0\n75 49\n48 83 c7 08\ne8 7b 00 00 00\n85 c0\n0f 94 c0\neb 37\n48 8b 4f 08\n8a 11\nb0 01\n84 d2\n74 2b\n31 f6\n80 fa 2d\n40 0f 94 c6\n48 8d 4c 31 01\n66 2e 0f 1f 84 00 00 00 00 00\n80 79 ff 30\n75 0b\n80 39 00\n48 8d 49 01\n75 f1\neb 02\n31 c0\n59\nc3\ne8 c6 f5 ff ff\n'
p1167
S'.text:0000000000401de0\n.text:0000000000401de1\n.text:0000000000401de3\n.text:0000000000401de6\n.text:0000000000401de8\n.text:0000000000401dea\n.text:0000000000401dec\n.text:0000000000401df0\n.text:0000000000401df5\n.text:0000000000401df7\n.text:0000000000401dfa\n.text:0000000000401dfc\n.text:0000000000401e00\n.text:0000000000401e02\n.text:0000000000401e04\n.text:0000000000401e06\n.text:0000000000401e08\n.text:0000000000401e0a\n.text:0000000000401e0d\n.text:0000000000401e11\n.text:0000000000401e16\n.text:0000000000401e20\n.text:0000000000401e24\n.text:0000000000401e26\n.text:0000000000401e29\n.text:0000000000401e2d\n.text:0000000000401e2f\n.text:0000000000401e31\n.text:0000000000401e33\n.text:0000000000401e34\n.text:0000000000401e35\n'
p1168
tp1169
sS'c_isascii'
p1170
(S'\n__stdcall c_isascii()\n'
p1171
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1172
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1173
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1174
S'.text:0000000000405450\n.text:0000000000405456\n.text:0000000000405459\n'
p1175
tp1176
sS'regfree'
p1177
(S'\n__stdcall regfree(regex_t * __preg)\n'
p1178
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid regfree(regex_t *__preg)\u000a\u000a{\u000a  (*(code *)PTR_regfree_006090a0)();\u000a  return;\u000a}\u000a\u000a
p1179
S'JMP qword ptr [0x006090a0]\n'
p1180
S'ff 25 ca 7b 20 00\n'
p1181
S'.plt:00000000004014d0\n'
p1182
tp1183
sS'mpz_tdiv_r'
p1184
(S'\n__stdcall mpz_tdiv_r(intmax_t * r, intmax_t * a0, intmax_t * b0)\n'
p1185
V\u000avoid mpz_tdiv_r(intmax_t *r,intmax_t *a0,intmax_t *b0)\u000a\u000a{\u000a  if ((*a0 == -0x8000000000000000) && (*b0 == -1)) {\u000a    *r = 0;\u000a    return;\u000a  }\u000a  *r = *a0 % *b0;\u000a  return;\u000a}\u000a\u000a
p1186
S'MOV RAX,qword ptr [RSI]\nMOV RCX,qword ptr [RDX]\nMOV RDX,-0x8000000000000000\nCMP RAX,RDX\nJNZ 0x004025a1\nCMP RCX,-0x1\nJNZ 0x004025a1\nXOR EDX,EDX\nMOV qword ptr [RDI],RDX\nRET\nCQO\nIDIV RCX\nMOV qword ptr [RDI],RDX\nRET\n'
p1187
S'48 8b 06\n48 8b 0a\n48 ba 00 00 00 00 00 00 00 80\n48 39 d0\n75 0c\n48 83 f9 ff\n75 06\n31 d2\n48 89 17\nc3\n48 99\n48 f7 f9\n48 89 17\nc3\n'
p1188
S'.text:0000000000402580\n.text:0000000000402583\n.text:0000000000402586\n.text:0000000000402590\n.text:0000000000402593\n.text:0000000000402595\n.text:0000000000402599\n.text:000000000040259b\n.text:000000000040259d\n.text:00000000004025a0\n.text:00000000004025a1\n.text:00000000004025a3\n.text:00000000004025a6\n.text:00000000004025a9\n'
p1189
tp1190
sS'__ctype_b_loc'
p1191
(S'\n__stdcall __ctype_b_loc()\n'
p1192
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_006091e8)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1193
S'JMP qword ptr [0x006091e8]\n'
p1194
S'ff 25 82 7a 20 00\n'
p1195
S'.plt:0000000000401760\n'
p1196
tp1197
sS'quotearg'
p1198
(S'\n__stdcall quotearg(char * arg)\n'
p1199
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1200
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403dc0\n'
p1201
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1202
S'.text:0000000000403fa0\n.text:0000000000403fa3\n.text:0000000000403fa5\n.text:0000000000403fa8\n'
p1203
tp1204
sS'_start'
p1205
(S'\n__stdcall _start()\n'
p1206
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00608ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1207
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405aa0\nMOV RCX,0x405a30\nMOV RDI,0x401b80\nCALL qword ptr [0x00608ff0]\nHLT\n'
p1208
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 a0 5a 40 00\n48 c7 c1 30 5a 40 00\n48 c7 c7 80 1b 40 00\nff 15 56 78 20 00\nf4\n'
p1209
S'.text:0000000000401770\n.text:0000000000401772\n.text:0000000000401775\n.text:0000000000401776\n.text:0000000000401779\n.text:000000000040177d\n.text:000000000040177e\n.text:000000000040177f\n.text:0000000000401786\n.text:000000000040178d\n.text:0000000000401794\n.text:000000000040179a\n'
p1210
tp1211
sS'getsize'
p1212
(S'\n__stdcall getsize(intmax_t * i)\n'
p1213
V\u000asize_t getsize(intmax_t *i)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  \u000a  iVar1 = mpz_sgn(i);\u000a  if (iVar1 < 0) {\u000a    return 0xffffffffffffffff;\u000a  }\u000a  iVar1 = mpz_fits_ulong_p(i);\u000a  if ((iVar1 != 0) && (uVar2 = mpz_get_ui(i), uVar2 != 0xffffffffffffffff)) {\u000a    return uVar2;\u000a  }\u000a  return 0xfffffffffffffffe;\u000a}\u000a\u000a
p1214
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401e70\nTEST EAX,EAX\nJS 0x00402a30\nMOV RDI,RBX\nCALL 0x00402ab0\nTEST EAX,EAX\nJZ 0x00402a27\nMOV RDI,RBX\nCALL 0x00402ac0\nCMP RAX,-0x1\nJNZ 0x00402a2e\nMOV RAX,-0x2\nPOP RBX\nRET\nMOV RAX,-0x1\nPOP RBX\nRET\n'
p1215
S'53\n48 89 fb\ne8 67 f4 ff ff\n85 c0\n78 23\n48 89 df\ne8 9b 00 00 00\n85 c0\n74 0e\n48 89 df\ne8 9f 00 00 00\n48 83 f8 ff\n75 07\n48 c7 c0 fe ff ff ff\n5b\nc3\n48 c7 c0 ff ff ff ff\n5b\nc3\n'
p1216
S'.text:0000000000402a00\n.text:0000000000402a01\n.text:0000000000402a04\n.text:0000000000402a09\n.text:0000000000402a0b\n.text:0000000000402a0d\n.text:0000000000402a10\n.text:0000000000402a15\n.text:0000000000402a17\n.text:0000000000402a19\n.text:0000000000402a1c\n.text:0000000000402a21\n.text:0000000000402a25\n.text:0000000000402a27\n.text:0000000000402a2e\n.text:0000000000402a2f\n.text:0000000000402a30\n.text:0000000000402a37\n.text:0000000000402a38\n'
p1217
tp1218
sS'c_iscntrl'
p1219
(S'\n__stdcall c_iscntrl()\n'
p1220
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1221
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00405478\nRET\nCMP EDI,0x7f\nJZ 0x00405477\nXOR EAX,EAX\nRET\n'
p1222
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1223
S'.text:0000000000405470\n.text:0000000000405472\n.text:0000000000405475\n.text:0000000000405477\n.text:0000000000405478\n.text:000000000040547b\n.text:000000000040547d\n.text:000000000040547f\n'
p1224
tp1225
sS'c_isblank'
p1226
(S'\n__stdcall c_isblank()\n'
p1227
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1228
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1229
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1230
S'.text:0000000000405460\n.text:0000000000405463\n.text:0000000000405466\n.text:0000000000405469\n.text:000000000040546c\n.text:000000000040546e\n'
p1231
tp1232
sS'atexit'
p1233
(S'\n__stdcall atexit(__func * __func)\n'
p1234
V\u000a/* WARNING: Removing unreachable block (ram,0x00405ad0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_006091b0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1235
S'MOV RAX,0x6091f8\nTEST RAX,RAX\nJZ 0x00405ad0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x004016f0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x004016f0\n'
p1236
S'48 c7 c0 f8 91 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 2a bc ff ff\n31 d2\n31 f6\ne9 17 bc ff ff\n'
p1237
S'.text:0000000000405ab0\n.text:0000000000405ab7\n.text:0000000000405aba\n.text:0000000000405abc\n.text:0000000000405abf\n.text:0000000000405ac1\n.text:0000000000405ad0\n.text:0000000000405ad2\n.text:0000000000405ad4\n'
p1238
tp1239
sS'fdopen'
p1240
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1241
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_00609180)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1242
S'JMP qword ptr [0x00609180]\n'
p1243
S'ff 25 ea 7a 20 00\n'
p1244
S'.plt:0000000000401690\n'
p1245
tp1246
sS'strcspn'
p1247
(S'\n__stdcall strcspn(char * __s, char * __reject)\n'
p1248
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strcspn(char *__s,char *__reject)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strcspn_00609100)();\u000a  return sVar1;\u000a}\u000a\u000a
p1249
S'JMP qword ptr [0x00609100]\n'
p1250
S'ff 25 6a 7b 20 00\n'
p1251
S'.plt:0000000000401590\n'
p1252
tp1253
sS'error'
p1254
(S'\n__stdcall error()\n'
p1255
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_00609198)();\u000a  return;\u000a}\u000a\u000a
p1256
S'JMP qword ptr [0x00609198]\n'
p1257
S'ff 25 d2 7a 20 00\n'
p1258
S'.plt:00000000004016c0\n'
p1259
tp1260
sS'mpz_tdiv_q'
p1261
(S'\n__stdcall mpz_tdiv_q(intmax_t * r, intmax_t * a0, intmax_t * b0)\n'
p1262
V\u000avoid mpz_tdiv_q(intmax_t *r,intmax_t *a0,intmax_t *b0)\u000a\u000a{\u000a  long *extraout_RDX;\u000a  long *plVar1;\u000a  \u000a  if ((*a0 != -0x8000000000000000) || (*b0 != -1)) {\u000a    *r = *a0 / *b0;\u000a    return;\u000a  }\u000a  plVar1 = (long *)&DAT_0000002f;\u000a  integer_overflow();\u000a  if ((*a0 == -0x8000000000000000) && (*extraout_RDX == -1)) {\u000a    *plVar1 = 0;\u000a    return;\u000a  }\u000a  *plVar1 = *a0 % *extraout_RDX;\u000a  return;\u000a}\u000a\u000a
p1263
S'MOV RAX,qword ptr [RSI]\nMOV RCX,qword ptr [RDX]\nMOV RDX,-0x8000000000000000\nCMP RAX,RDX\nJNZ 0x0040256b\nCMP RCX,-0x1\nJZ 0x00402574\nCQO\nIDIV RCX\nMOV qword ptr [RDI],RAX\nRET\nPUSH RAX\nMOV EDI,0x2f\nCALL 0x00402ad0\nNOP\n'
p1264
S'48 8b 06\n48 8b 0a\n48 ba 00 00 00 00 00 00 00 80\n48 39 d0\n75 06\n48 83 f9 ff\n74 09\n48 99\n48 f7 f9\n48 89 07\nc3\n50\nbf 2f 00 00 00\ne8 51 05 00 00\n90\n'
p1265
S'.text:0000000000402550\n.text:0000000000402553\n.text:0000000000402556\n.text:0000000000402560\n.text:0000000000402563\n.text:0000000000402565\n.text:0000000000402569\n.text:000000000040256b\n.text:000000000040256d\n.text:0000000000402570\n.text:0000000000402573\n.text:0000000000402574\n.text:0000000000402575\n.text:000000000040257a\n.text:000000000040257f\n'
p1266
tp1267
sS'strcaseeq6'
p1268
(S'\n__stdcall strcaseeq6()\n'
p1269
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1270
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405500\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404662\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404669\nJMP 0x0040467e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040467e\nTEST BPL,BPL\nJZ 0x00404679\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404690\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1271
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 b1 0e 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1272
S'.text:0000000000404640\n.text:0000000000404641\n.text:0000000000404642\n.text:0000000000404643\n.text:0000000000404645\n.text:0000000000404648\n.text:000000000040464a\n.text:000000000040464f\n.text:0000000000404653\n.text:0000000000404655\n.text:0000000000404657\n.text:000000000040465a\n.text:000000000040465c\n.text:000000000040465e\n.text:0000000000404660\n.text:0000000000404662\n.text:0000000000404664\n.text:0000000000404667\n.text:0000000000404669\n.text:000000000040466c\n.text:000000000040466e\n.text:0000000000404671\n.text:0000000000404675\n.text:0000000000404676\n.text:0000000000404677\n.text:0000000000404679\n.text:000000000040467e\n.text:0000000000404682\n.text:0000000000404683\n.text:0000000000404684\n'
p1273
tp1274
sS'imaxtostr'
p1275
(S'\n__stdcall imaxtostr(intmax_t i, char * buf)\n'
p1276
V\u000achar * imaxtostr(intmax_t i,char *buf)\u000a\u000a{\u000a  ulong uVar1;\u000a  long lVar2;\u000a  \u000a  buf[0x14] = 0;\u000a  if (i < 0) {\u000a    buf = buf + 0x13;\u000a    do {\u000a      lVar2 = i / 10 + (i >> 0x3f);\u000a      *buf = '0' - ((char)i + (char)lVar2 * -10);\u000a      uVar1 = i + 9;\u000a      buf = buf + -1;\u000a      i = lVar2;\u000a    } while (0x12 < uVar1);\u000a    *buf = '-';\u000a  }\u000a  else {\u000a    buf = buf + 0x14;\u000a    do {\u000a      lVar2 = i / 10 + (i >> 0x3f);\u000a      buf[-1] = (char)i + (char)lVar2 * -10 + '0';\u000a      buf = buf + -1;\u000a      uVar1 = i + 9;\u000a      i = lVar2;\u000a    } while (0x12 < uVar1);\u000a  }\u000a  return buf;\u000a}\u000a\u000a
p1277
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nTEST RCX,RCX\nJS 0x00402c7b\nADD RSI,0x14\nMOV R8,0x6666666666666667\nNOP word ptr [RAX + RAX*0x1]\nMOV RAX,RCX\nIMUL R8\nMOV RAX,RDX\nSHR RAX,0x3f\nSAR RDX,0x2\nLEA EDI,[RDX + RAX*0x1]\nADD EDI,EDI\nLEA R9D,[RDI + RDI*0x4]\nMOV EDI,ECX\nSUB EDI,R9D\nADD EDI,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nADD RDX,RAX\nADD RCX,0x9\nCMP RCX,0x12\nMOV RCX,RDX\nJA 0x00402c40\nJMP 0x00402ccf\nADD RSI,0x13\nMOV R8,0x6666666666666667\nNOP dword ptr [RAX]\nMOV RAX,RCX\nIMUL R8\nMOV R10,RDX\nSHR R10,0x3f\nSAR RDX,0x2\nLEA EDI,[RDX + R10*0x1]\nADD EDI,EDI\nLEA R9D,[RDI + RDI*0x4]\nMOV EDI,ECX\nSUB EDI,R9D\nMOV EAX,0x30\nSUB EAX,EDI\nMOV byte ptr [RSI],AL\nADD RDX,R10\nADD RCX,0x9\nDEC RSI\nCMP RCX,0x12\nMOV RCX,RDX\nJA 0x00402c90\nMOV byte ptr [RSI],0x2d\nMOV RAX,RSI\nRET\n'
p1278
S'48 89 f9\nc6 46 14 00\n48 85 c9\n78 4f\n48 83 c6 14\n49 b8 67 66 66 66 66 66 66 66\n66 0f 1f 44 00 00\n48 89 c8\n49 f7 e8\n48 89 d0\n48 c1 e8 3f\n48 c1 fa 02\n8d 3c 02\n01 ff\n44 8d 0c bf\n89 cf\n44 29 cf\n83 c7 30\n40 88 7e ff\n48 ff ce\n48 01 c2\n48 83 c1 09\n48 83 f9 12\n48 89 d1\n77 c7\neb 54\n48 83 c6 13\n49 b8 67 66 66 66 66 66 66 66\n0f 1f 80 00 00 00 00\n48 89 c8\n49 f7 e8\n49 89 d2\n49 c1 ea 3f\n48 c1 fa 02\n42 8d 3c 12\n01 ff\n44 8d 0c bf\n89 cf\n44 29 cf\nb8 30 00 00 00\n29 f8\n88 06\n4c 01 d2\n48 83 c1 09\n48 ff ce\n48 83 f9 12\n48 89 d1\n77 c4\nc6 06 2d\n48 89 f0\nc3\n'
p1279
S'.text:0000000000402c20\n.text:0000000000402c23\n.text:0000000000402c27\n.text:0000000000402c2a\n.text:0000000000402c2c\n.text:0000000000402c30\n.text:0000000000402c3a\n.text:0000000000402c40\n.text:0000000000402c43\n.text:0000000000402c46\n.text:0000000000402c49\n.text:0000000000402c4d\n.text:0000000000402c51\n.text:0000000000402c54\n.text:0000000000402c56\n.text:0000000000402c5a\n.text:0000000000402c5c\n.text:0000000000402c5f\n.text:0000000000402c62\n.text:0000000000402c66\n.text:0000000000402c69\n.text:0000000000402c6c\n.text:0000000000402c70\n.text:0000000000402c74\n.text:0000000000402c77\n.text:0000000000402c79\n.text:0000000000402c7b\n.text:0000000000402c7f\n.text:0000000000402c89\n.text:0000000000402c90\n.text:0000000000402c93\n.text:0000000000402c96\n.text:0000000000402c99\n.text:0000000000402c9d\n.text:0000000000402ca1\n.text:0000000000402ca5\n.text:0000000000402ca7\n.text:0000000000402cab\n.text:0000000000402cad\n.text:0000000000402cb0\n.text:0000000000402cb5\n.text:0000000000402cb7\n.text:0000000000402cb9\n.text:0000000000402cbc\n.text:0000000000402cc0\n.text:0000000000402cc3\n.text:0000000000402cc7\n.text:0000000000402cca\n.text:0000000000402ccc\n.text:0000000000402ccf\n.text:0000000000402cd2\n'
p1280
tp1281
sS'strcaseeq5'
p1282
(S'\n__stdcall strcaseeq5()\n'
p1283
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1284
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405500\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404616\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040461d\nJMP 0x00404634\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404634\nTEST BPL,BPL\nJZ 0x0040462f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404640\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1285
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 fd 0e 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1286
S'.text:00000000004045f0\n.text:00000000004045f1\n.text:00000000004045f3\n.text:00000000004045f4\n.text:00000000004045f7\n.text:00000000004045f9\n.text:00000000004045fc\n.text:00000000004045fe\n.text:0000000000404603\n.text:0000000000404607\n.text:0000000000404609\n.text:000000000040460b\n.text:000000000040460e\n.text:0000000000404610\n.text:0000000000404612\n.text:0000000000404614\n.text:0000000000404616\n.text:0000000000404618\n.text:000000000040461b\n.text:000000000040461d\n.text:0000000000404620\n.text:0000000000404622\n.text:0000000000404626\n.text:0000000000404629\n.text:000000000040462a\n.text:000000000040462c\n.text:000000000040462d\n.text:000000000040462f\n.text:0000000000404634\n.text:0000000000404635\n.text:0000000000404637\n.text:0000000000404638\n'
p1287
tp1288
sS'strcaseeq7'
p1289
(S'\n__stdcall strcaseeq7()\n'
p1290
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1291
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00405500\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x004046b2\nTEST ECX,0xffffffdf\nJNZ 0x004046b6\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x004046ba\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1292
S'53\n48 89 fb\n31 ff\ne8 65 0e 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1293
S'.text:0000000000404690\n.text:0000000000404691\n.text:0000000000404694\n.text:0000000000404696\n.text:000000000040469b\n.text:000000000040469f\n.text:00000000004046a1\n.text:00000000004046a3\n.text:00000000004046a9\n.text:00000000004046ab\n.text:00000000004046b0\n.text:00000000004046b1\n.text:00000000004046b2\n.text:00000000004046b4\n.text:00000000004046b6\n.text:00000000004046b8\n.text:00000000004046b9\n.text:00000000004046ba\n.text:00000000004046bf\n.text:00000000004046c0\n'
p1294
tp1295
sS'strcaseeq0'
p1296
(S'\n__stdcall strcaseeq0()\n'
p1297
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1298
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405500\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x004043c5\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004043cc\nJMP 0x00404400\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404400\nTEST BPL,BPL\nJZ 0x004043fb\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404410\nJMP 0x00404400\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1299
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 4d 11 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1300
S'.text:0000000000404390\n.text:0000000000404391\n.text:0000000000404393\n.text:0000000000404395\n.text:0000000000404397\n.text:0000000000404399\n.text:000000000040439a\n.text:000000000040439b\n.text:000000000040439e\n.text:00000000004043a1\n.text:00000000004043a4\n.text:00000000004043a7\n.text:00000000004043a9\n.text:00000000004043ac\n.text:00000000004043ae\n.text:00000000004043b3\n.text:00000000004043b6\n.text:00000000004043b8\n.text:00000000004043ba\n.text:00000000004043bd\n.text:00000000004043bf\n.text:00000000004043c1\n.text:00000000004043c3\n.text:00000000004043c5\n.text:00000000004043c7\n.text:00000000004043ca\n.text:00000000004043cc\n.text:00000000004043cf\n.text:00000000004043d1\n.text:00000000004043d5\n.text:00000000004043da\n.text:00000000004043dd\n.text:00000000004043e1\n.text:00000000004043e5\n.text:00000000004043e9\n.text:00000000004043ed\n.text:00000000004043f1\n.text:00000000004043f4\n.text:00000000004043f9\n.text:00000000004043fb\n.text:0000000000404400\n.text:0000000000404404\n.text:0000000000404405\n.text:0000000000404407\n.text:0000000000404409\n.text:000000000040440b\n.text:000000000040440d\n.text:000000000040440e\n'
p1301
tp1302
sS're_match'
p1303
(S'\n__stdcall re_match(re_pattern_buffer * __buffer, char * __string, int __length, int __start, re_registers * __regs)\n'
p1304
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint re_match(re_pattern_buffer *__buffer,char *__string,int __length,int __start,\u000a            re_registers *__regs)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_re_match_00609040)();\u000a  return iVar1;\u000a}\u000a\u000a
p1305
S'JMP qword ptr [0x00609040]\n'
p1306
S'ff 25 2a 7c 20 00\n'
p1307
S'.plt:0000000000401410\n'
p1308
tp1309
sS'strcaseeq2'
p1310
(S'\n__stdcall strcaseeq2()\n'
p1311
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1312
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405500\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x004044d6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004044dd\nJMP 0x0040450a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040450a\nTEST BPL,BPL\nJZ 0x00404505\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404520\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1313
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 3d 10 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1314
S'.text:00000000004044a0\n.text:00000000004044a1\n.text:00000000004044a3\n.text:00000000004044a5\n.text:00000000004044a7\n.text:00000000004044a9\n.text:00000000004044aa\n.text:00000000004044ab\n.text:00000000004044ae\n.text:00000000004044b1\n.text:00000000004044b4\n.text:00000000004044b7\n.text:00000000004044b9\n.text:00000000004044bc\n.text:00000000004044be\n.text:00000000004044c3\n.text:00000000004044c7\n.text:00000000004044c9\n.text:00000000004044cb\n.text:00000000004044ce\n.text:00000000004044d0\n.text:00000000004044d2\n.text:00000000004044d4\n.text:00000000004044d6\n.text:00000000004044d8\n.text:00000000004044db\n.text:00000000004044dd\n.text:00000000004044e0\n.text:00000000004044e2\n.text:00000000004044e6\n.text:00000000004044ea\n.text:00000000004044ee\n.text:00000000004044f2\n.text:00000000004044f5\n.text:00000000004044f9\n.text:00000000004044fa\n.text:00000000004044fc\n.text:00000000004044fe\n.text:0000000000404500\n.text:0000000000404502\n.text:0000000000404503\n.text:0000000000404505\n.text:000000000040450a\n.text:000000000040450e\n.text:000000000040450f\n.text:0000000000404511\n.text:0000000000404513\n.text:0000000000404515\n.text:0000000000404517\n.text:0000000000404518\n'
p1315
tp1316
sS'strcaseeq1'
p1317
(S'\n__stdcall strcaseeq1()\n'
p1318
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1319
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00405500\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x0040444d\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404454\nJMP 0x00404487\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404487\nTEST BPL,BPL\nJZ 0x00404482\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004044a0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1320
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 c6 10 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1321
S'.text:0000000000404410\n.text:0000000000404411\n.text:0000000000404413\n.text:0000000000404415\n.text:0000000000404417\n.text:0000000000404419\n.text:000000000040441a\n.text:000000000040441b\n.text:0000000000404420\n.text:0000000000404423\n.text:0000000000404426\n.text:0000000000404429\n.text:000000000040442b\n.text:000000000040442e\n.text:0000000000404433\n.text:0000000000404435\n.text:000000000040443a\n.text:000000000040443e\n.text:0000000000404440\n.text:0000000000404442\n.text:0000000000404445\n.text:0000000000404447\n.text:0000000000404449\n.text:000000000040444b\n.text:000000000040444d\n.text:000000000040444f\n.text:0000000000404452\n.text:0000000000404454\n.text:0000000000404457\n.text:0000000000404459\n.text:000000000040445d\n.text:0000000000404461\n.text:0000000000404465\n.text:000000000040446b\n.text:000000000040446f\n.text:0000000000404472\n.text:0000000000404476\n.text:0000000000404477\n.text:0000000000404479\n.text:000000000040447b\n.text:000000000040447d\n.text:000000000040447f\n.text:0000000000404480\n.text:0000000000404482\n.text:0000000000404487\n.text:000000000040448b\n.text:000000000040448c\n.text:000000000040448e\n.text:0000000000404490\n.text:0000000000404492\n.text:0000000000404494\n.text:0000000000404495\n'
p1322
tp1323
sS'strcaseeq4'
p1324
(S'\n__stdcall strcaseeq4()\n'
p1325
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1326
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405500\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x004045bc\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004045c3\nJMP 0x004045e4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004045e4\nTEST BPL,BPL\nJZ 0x004045df\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004045f0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1327
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 57 0f 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1328
S'.text:0000000000404590\n.text:0000000000404591\n.text:0000000000404593\n.text:0000000000404595\n.text:0000000000404596\n.text:0000000000404597\n.text:000000000040459a\n.text:000000000040459d\n.text:000000000040459f\n.text:00000000004045a2\n.text:00000000004045a4\n.text:00000000004045a9\n.text:00000000004045ad\n.text:00000000004045af\n.text:00000000004045b1\n.text:00000000004045b4\n.text:00000000004045b6\n.text:00000000004045b8\n.text:00000000004045ba\n.text:00000000004045bc\n.text:00000000004045be\n.text:00000000004045c1\n.text:00000000004045c3\n.text:00000000004045c6\n.text:00000000004045c8\n.text:00000000004045cc\n.text:00000000004045d0\n.text:00000000004045d3\n.text:00000000004045d7\n.text:00000000004045d8\n.text:00000000004045da\n.text:00000000004045dc\n.text:00000000004045dd\n.text:00000000004045df\n.text:00000000004045e4\n.text:00000000004045e8\n.text:00000000004045e9\n.text:00000000004045eb\n.text:00000000004045ed\n.text:00000000004045ee\n'
p1329
tp1330
sS'strcaseeq3'
p1331
(S'\n__stdcall strcaseeq3()\n'
p1332
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1333
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00405500\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404550\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404557\nJMP 0x0040457a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x0040457a\nTEST BPL,BPL\nJZ 0x00404575\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404590\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1334
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 c3 0f 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1335
S'.text:0000000000404520\n.text:0000000000404521\n.text:0000000000404523\n.text:0000000000404525\n.text:0000000000404527\n.text:0000000000404528\n.text:000000000040452b\n.text:000000000040452e\n.text:0000000000404531\n.text:0000000000404533\n.text:0000000000404536\n.text:0000000000404538\n.text:000000000040453d\n.text:0000000000404541\n.text:0000000000404543\n.text:0000000000404545\n.text:0000000000404548\n.text:000000000040454a\n.text:000000000040454c\n.text:000000000040454e\n.text:0000000000404550\n.text:0000000000404552\n.text:0000000000404555\n.text:0000000000404557\n.text:000000000040455a\n.text:000000000040455c\n.text:0000000000404560\n.text:0000000000404564\n.text:0000000000404568\n.text:000000000040456b\n.text:000000000040456c\n.text:000000000040456e\n.text:0000000000404570\n.text:0000000000404572\n.text:0000000000404573\n.text:0000000000404575\n.text:000000000040457a\n.text:000000000040457b\n.text:000000000040457d\n.text:000000000040457f\n.text:0000000000404581\n.text:0000000000404582\n'
p1336
tp1337
sS'register_tm_clones'
p1338
(S'\n__stdcall register_tm_clones()\n'
p1339
V\u000a/* WARNING: Removing unreachable block (ram,0x00401803) */\u000a/* WARNING: Removing unreachable block (ram,0x0040180d) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1340
S'MOV ESI,0x609260\nPUSH RBP\nSUB RSI,0x609260\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401818\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401818\nPOP RBP\nMOV EDI,0x609260\nJMP RAX\nPOP RBP\nRET\n'
p1341
S'be 60 92 60 00\n55\n48 81 ee 60 92 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 60 92 60 00\nff e0\n5d\nc3\n'
p1342
S'.text:00000000004017e0\n.text:00000000004017e5\n.text:00000000004017e6\n.text:00000000004017ed\n.text:00000000004017f1\n.text:00000000004017f4\n.text:00000000004017f7\n.text:00000000004017fb\n.text:00000000004017fe\n.text:0000000000401801\n.text:0000000000401803\n.text:0000000000401808\n.text:000000000040180b\n.text:000000000040180d\n.text:000000000040180e\n.text:0000000000401813\n.text:0000000000401818\n.text:0000000000401819\n'
p1343
tp1344
sS'c_islower'
p1345
(S'\n__stdcall c_islower()\n'
p1346
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1347
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1348
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1349
S'.text:00000000004054a0\n.text:00000000004054a3\n.text:00000000004054a6\n.text:00000000004054a9\n'
p1350
tp1351
sS'fwrite'
p1352
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1353
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_006091c0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1354
S'JMP qword ptr [0x006091c0]\n'
p1355
S'ff 25 aa 7a 20 00\n'
p1356
S'.plt:0000000000401710\n'
p1357
tp1358
sS'str_value'
p1359
(S'\n__stdcall str_value(char * s)\n'
p1360
V\u000aVALUE * str_value(char *s)\u000a\u000a{\u000a  VALUE *pVVar1;\u000a  char *pcVar2;\u000a  \u000a  pVVar1 = (VALUE *)xmalloc(0x10);\u000a  pVVar1->type = string;\u000a  pcVar2 = xstrdup(s);\u000a  *(char **)&pVVar1->u = pcVar2;\u000a  return pVVar1;\u000a}\u000a\u000a
p1361
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV EDI,0x10\nCALL 0x00404f00\nMOV RBX,RAX\nMOV dword ptr [RBX],0x1\nMOV RDI,R14\nCALL 0x00405070\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1362
S'41 56\n53\n50\n49 89 fe\nbf 10 00 00 00\ne8 2f 25 00 00\n48 89 c3\nc7 03 01 00 00 00\n4c 89 f7\ne8 8e 26 00 00\n48 89 43 08\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1363
S'.text:00000000004029c0\n.text:00000000004029c2\n.text:00000000004029c3\n.text:00000000004029c4\n.text:00000000004029c7\n.text:00000000004029cc\n.text:00000000004029d1\n.text:00000000004029d4\n.text:00000000004029da\n.text:00000000004029dd\n.text:00000000004029e2\n.text:00000000004029e6\n.text:00000000004029e9\n.text:00000000004029ed\n.text:00000000004029ee\n.text:00000000004029f0\n'
p1364
tp1365
sS'__do_global_dtors_aux'
p1366
(S'\n__stdcall __do_global_dtors_aux()\n'
p1367
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1368
S'CMP byte ptr [0x006092c8],0x0\nJNZ 0x0040183a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x004017a0\nPOP RBP\nMOV byte ptr [0x006092c8],0x1\nRET\n'
p1369
S'80 3d a1 7a 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 8e 7a 20 00 01\nf3 c3\n'
p1370
S'.text:0000000000401820\n.text:0000000000401827\n.text:0000000000401829\n.text:000000000040182a\n.text:000000000040182d\n.text:0000000000401832\n.text:0000000000401833\n.text:000000000040183a\n'
p1371
tp1372
sS'c_isprint'
p1373
(S'\n__stdcall c_isprint()\n'
p1374
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1375
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1376
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1377
S'.text:00000000004054b0\n.text:00000000004054b3\n.text:00000000004054b6\n.text:00000000004054b9\n'
p1378
tp1379
sS'_fini'
p1380
(S'\n__stdcall _fini()\n'
p1381
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1382
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1383
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1384
S'.fini:0000000000405adc\n.fini:0000000000405ae0\n.fini:0000000000405ae4\n'
p1385
tp1386
sS'__fpending'
p1387
(S'\n__stdcall __fpending()\n'
p1388
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00609068)();\u000a  return;\u000a}\u000a\u000a
p1389
S'JMP qword ptr [0x00609068]\n'
p1390
S'ff 25 02 7c 20 00\n'
p1391
S'.plt:0000000000401460\n'
p1392
tp1393
s.