(dp0
S'ungetc'
p1
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p2
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_0060f1a0)();\u000a  return iVar1;\u000a}\u000a\u000a
p3
S'JMP qword ptr [0x0060f1a0]\n'
p4
S'ff 25 ca d6 20 00\n'
p5
S'.plt:0000000000401ad0\n'
p6
tp7
sS'version_etc_arn'
p8
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p9
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_0040b413,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x4052c7;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x405348;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x4053dc;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p10
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x00405158\nMOV EDX,0x40b400\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401c20\nJMP 0x0040516d\nMOV EDX,0x40b40c\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401c20\nXOR EDI,EDI\nMOV ESI,0x40b413\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x40b6e0\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401c20\nXOR EDI,EDI\nMOV ESI,0x40b417\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x004019f0\nCMP R12,0x9\nJA 0x004051f6\nJMP qword ptr [0x40b3b0 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x40b4e2\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401c20\nXOR EDI,EDI\nMOV ESI,0x40b621\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401c20\nADD RSP,0x38\nJMP 0x00405467\nXOR EDI,EDI\nMOV ESI,0x40b4f2\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401c20\nXOR EDI,EDI\nMOV ESI,0x40b509\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401c20\nXOR EDI,EDI\nMOV ESI,0x40b525\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401c20\nADD RSP,0x18\nJMP 0x00405467\nXOR EDI,EDI\nMOV ESI,0x40b545\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401c20\nADD RSP,0x18\nJMP 0x00405467\nXOR EDI,EDI\nMOV ESI,0x40b569\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401c20\nADD RSP,0x28\nJMP 0x00405467\nXOR EDI,EDI\nMOV ESI,0x40b591\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401c20\nADD RSP,0x28\nJMP 0x00405467\nXOR EDI,EDI\nMOV ESI,0x40b5bd\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401c20\nADD RSP,0x38\nJMP 0x00405467\nXOR EDI,EDI\nMOV ESI,0x40b5ed\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401c20\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x004017f0\n'
p11
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba 00 b4 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 ca ca ff ff\neb 15\nba 0c b4 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 b3 ca ff ff\n31 ff\nbe 13 b4 40 00\nba 05 00 00 00\ne8 52 c7 ff ff\n48 89 c1\nbe 01 00 00 00\nba e0 b6 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 85 ca ff ff\n31 ff\nbe 17 b4 40 00\nba 05 00 00 00\ne8 24 c7 ff ff\n48 89 c7\n4c 89 f6\ne8 39 c8 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 b0 b3 40 00\n31 ff\nbe e2 b4 40 00\nba 05 00 00 00\ne8 fa c6 ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 2a ca ff ff\n31 ff\nbe 21 b6 40 00\nba 05 00 00 00\ne8 c9 c6 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 e1 c9 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe f2 b4 40 00\nba 05 00 00 00\ne8 77 c6 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 a3 c9 ff ff\n31 ff\nbe 09 b5 40 00\nba 05 00 00 00\ne8 42 c6 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 6a c9 ff ff\n31 ff\nbe 25 b5 40 00\nba 05 00 00 00\ne8 09 c6 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 34 c9 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe 45 b5 40 00\nba 05 00 00 00\ne8 ca c5 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 f2 c8 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 69 b5 40 00\nba 05 00 00 00\ne8 88 c5 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 a8 c8 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 91 b5 40 00\nba 05 00 00 00\ne8 3e c5 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 5e c8 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe bd b5 40 00\nba 05 00 00 00\ne8 f4 c4 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 0c c8 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe ed b5 40 00\nba 05 00 00 00\ne8 a5 c4 ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 bd c7 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 7c c3 ff ff\n'
p12
S'.text:0000000000405120\n.text:0000000000405122\n.text:0000000000405124\n.text:0000000000405126\n.text:0000000000405127\n.text:0000000000405128\n.text:000000000040512b\n.text:000000000040512e\n.text:0000000000405131\n.text:0000000000405134\n.text:0000000000405137\n.text:000000000040513a\n.text:000000000040513f\n.text:0000000000405142\n.text:0000000000405144\n.text:0000000000405149\n.text:000000000040514b\n.text:000000000040514e\n.text:0000000000405151\n.text:0000000000405156\n.text:0000000000405158\n.text:000000000040515d\n.text:000000000040515f\n.text:0000000000405162\n.text:0000000000405165\n.text:0000000000405168\n.text:000000000040516d\n.text:000000000040516f\n.text:0000000000405174\n.text:0000000000405179\n.text:000000000040517e\n.text:0000000000405181\n.text:0000000000405186\n.text:000000000040518b\n.text:0000000000405191\n.text:0000000000405193\n.text:0000000000405196\n.text:000000000040519b\n.text:000000000040519d\n.text:00000000004051a2\n.text:00000000004051a7\n.text:00000000004051ac\n.text:00000000004051af\n.text:00000000004051b2\n.text:00000000004051b7\n.text:00000000004051bb\n.text:00000000004051bd\n.text:00000000004051c5\n.text:00000000004051c7\n.text:00000000004051cc\n.text:00000000004051d1\n.text:00000000004051d6\n.text:00000000004051d9\n.text:00000000004051dc\n.text:00000000004051e1\n.text:00000000004051e3\n.text:00000000004051e6\n.text:00000000004051ea\n.text:00000000004051eb\n.text:00000000004051ed\n.text:00000000004051ef\n.text:00000000004051f1\n.text:00000000004051f6\n.text:00000000004051f8\n.text:00000000004051fd\n.text:0000000000405202\n.text:0000000000405207\n.text:000000000040520a\n.text:000000000040520d\n.text:0000000000405211\n.text:0000000000405215\n.text:000000000040521a\n.text:000000000040521f\n.text:0000000000405222\n.text:0000000000405226\n.text:000000000040522a\n.text:000000000040522e\n.text:0000000000405232\n.text:0000000000405236\n.text:000000000040523a\n.text:000000000040523f\n.text:0000000000405243\n.text:0000000000405248\n.text:000000000040524a\n.text:000000000040524f\n.text:0000000000405254\n.text:0000000000405259\n.text:000000000040525c\n.text:000000000040525f\n.text:0000000000405263\n.text:0000000000405268\n.text:000000000040526a\n.text:000000000040526d\n.text:0000000000405271\n.text:0000000000405272\n.text:0000000000405274\n.text:0000000000405276\n.text:0000000000405278\n.text:000000000040527d\n.text:000000000040527f\n.text:0000000000405284\n.text:0000000000405289\n.text:000000000040528e\n.text:0000000000405291\n.text:0000000000405294\n.text:0000000000405298\n.text:000000000040529c\n.text:00000000004052a1\n.text:00000000004052a3\n.text:00000000004052a6\n.text:00000000004052aa\n.text:00000000004052ab\n.text:00000000004052ad\n.text:00000000004052af\n.text:00000000004052b1\n.text:00000000004052b6\n.text:00000000004052b8\n.text:00000000004052bd\n.text:00000000004052c2\n.text:00000000004052c7\n.text:00000000004052ca\n.text:00000000004052cd\n.text:00000000004052d1\n.text:00000000004052d5\n.text:00000000004052d9\n.text:00000000004052de\n.text:00000000004052e0\n.text:00000000004052e3\n.text:00000000004052e7\n.text:00000000004052ec\n.text:00000000004052f0\n.text:00000000004052f5\n.text:00000000004052f7\n.text:00000000004052fc\n.text:0000000000405301\n.text:0000000000405306\n.text:0000000000405309\n.text:000000000040530c\n.text:0000000000405310\n.text:0000000000405314\n.text:0000000000405319\n.text:000000000040531e\n.text:0000000000405321\n.text:0000000000405325\n.text:0000000000405329\n.text:000000000040532e\n.text:0000000000405332\n.text:0000000000405337\n.text:0000000000405339\n.text:000000000040533e\n.text:0000000000405343\n.text:0000000000405348\n.text:000000000040534b\n.text:000000000040534e\n.text:0000000000405352\n.text:0000000000405356\n.text:000000000040535a\n.text:000000000040535f\n.text:0000000000405364\n.text:0000000000405367\n.text:000000000040536b\n.text:000000000040536f\n.text:0000000000405373\n.text:0000000000405378\n.text:000000000040537c\n.text:0000000000405381\n.text:0000000000405383\n.text:0000000000405388\n.text:000000000040538d\n.text:0000000000405392\n.text:0000000000405395\n.text:0000000000405398\n.text:000000000040539c\n.text:00000000004053a0\n.text:00000000004053a5\n.text:00000000004053aa\n.text:00000000004053ad\n.text:00000000004053b1\n.text:00000000004053b5\n.text:00000000004053b9\n.text:00000000004053bd\n.text:00000000004053c2\n.text:00000000004053c6\n.text:00000000004053cb\n.text:00000000004053cd\n.text:00000000004053d2\n.text:00000000004053d7\n.text:00000000004053dc\n.text:00000000004053df\n.text:00000000004053e2\n.text:00000000004053e6\n.text:00000000004053ea\n.text:00000000004053ee\n.text:00000000004053f3\n.text:00000000004053f8\n.text:00000000004053fb\n.text:00000000004053ff\n.text:0000000000405403\n.text:0000000000405407\n.text:000000000040540b\n.text:000000000040540f\n.text:0000000000405414\n.text:0000000000405418\n.text:000000000040541a\n.text:000000000040541c\n.text:0000000000405421\n.text:0000000000405426\n.text:000000000040542b\n.text:000000000040542e\n.text:0000000000405431\n.text:0000000000405435\n.text:0000000000405439\n.text:000000000040543e\n.text:0000000000405443\n.text:0000000000405446\n.text:000000000040544a\n.text:000000000040544e\n.text:0000000000405452\n.text:0000000000405456\n.text:000000000040545a\n.text:000000000040545e\n.text:0000000000405463\n.text:0000000000405467\n.text:0000000000405468\n.text:000000000040546a\n.text:000000000040546c\n.text:000000000040546e\n.text:000000000040546f\n'
p13
tp14
sS'fts_maxarglen'
p15
(S'\n__stdcall fts_maxarglen(char * * argv)\n'
p16
V\u000asize_t fts_maxarglen(char **argv)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *__s;\u000a  ulong uVar2;\u000a  size_t sVar3;\u000a  \u000a  __s = *argv;\u000a  if (__s == (char *)0x0) {\u000a    sVar3 = 1;\u000a  }\u000a  else {\u000a    argv = argv + 1;\u000a    uVar2 = 0;\u000a    do {\u000a      sVar1 = strlen(__s);\u000a      if (uVar2 < sVar1) {\u000a        uVar2 = sVar1;\u000a      }\u000a      __s = *argv;\u000a      argv = argv + 1;\u000a    } while (__s != (char *)0x0);\u000a    sVar3 = uVar2 + 1;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p17
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV RDI,qword ptr [RBX]\nTEST RDI,RDI\nJZ 0x00405f3d\nADD RBX,0x8\nXOR R14D,R14D\nNOP word ptr CS:[RAX + RAX*0x1]\nCALL 0x004018f0\nCMP RAX,R14\nCMOVA R14,RAX\nMOV RDI,qword ptr [RBX]\nADD RBX,0x8\nTEST RDI,RDI\nJNZ 0x00405f20\nINC R14\nJMP 0x00405f43\nMOV R14D,0x1\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p18
S'41 56\n53\n50\n48 89 fb\n48 8b 3b\n48 85 ff\n74 2e\n48 83 c3 08\n45 31 f6\n66 2e 0f 1f 84 00 00 00 00 00\ne8 cb b9 ff ff\n4c 39 f0\n4c 0f 47 f0\n48 8b 3b\n48 83 c3 08\n48 85 ff\n75 e8\n49 ff c6\neb 06\n41 be 01 00 00 00\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p19
S'.text:0000000000405f00\n.text:0000000000405f02\n.text:0000000000405f03\n.text:0000000000405f04\n.text:0000000000405f07\n.text:0000000000405f0a\n.text:0000000000405f0d\n.text:0000000000405f0f\n.text:0000000000405f13\n.text:0000000000405f16\n.text:0000000000405f20\n.text:0000000000405f25\n.text:0000000000405f28\n.text:0000000000405f2c\n.text:0000000000405f2f\n.text:0000000000405f33\n.text:0000000000405f36\n.text:0000000000405f38\n.text:0000000000405f3b\n.text:0000000000405f3d\n.text:0000000000405f43\n.text:0000000000405f46\n.text:0000000000405f4a\n.text:0000000000405f4b\n.text:0000000000405f4d\n'
p20
tp21
sS'strchr'
p22
(S'\n__stdcall strchr(char * __s, int __c)\n'
p23
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_0060f0d8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p24
S'JMP qword ptr [0x0060f0d8]\n'
p25
S'ff 25 92 d7 20 00\n'
p26
S'.plt:0000000000401940\n'
p27
tp28
sS'transfer_entries'
p29
(S'\n__stdcall transfer_entries(Hash_table * dst, Hash_table * src)\n'
p30
V\u000a_Bool transfer_entries(Hash_table *dst,Hash_table *src)\u000a\u000a{\u000a  void *key;\u000a  hash_entry *phVar1;\u000a  hash_entry *entry;\u000a  hash_entry *phVar2;\u000a  char in_DL;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = src->bucket;\u000a  if (phVar3 < src->bucket_limit) {\u000a    do {\u000a      if (phVar3->data != (void *)0x0) {\u000a        entry = phVar3->next;\u000a        while (entry != (hash_entry *)0x0) {\u000a          key = entry->data;\u000a          phVar1 = safe_hasher(dst,key);\u000a          phVar2 = entry->next;\u000a          if (phVar1->data == (void *)0x0) {\u000a            phVar1->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a            free_entry(dst,entry);\u000a            entry = phVar2;\u000a          }\u000a          else {\u000a            entry->next = phVar1->next;\u000a            phVar1->next = entry;\u000a            entry = phVar2;\u000a          }\u000a        }\u000a        key = phVar3->data;\u000a        phVar3->next = (hash_entry *)0x0;\u000a        if (in_DL == 0) {\u000a          entry = safe_hasher(dst,key);\u000a          if (entry->data == (void *)0x0) {\u000a            entry->data = key;\u000a            dst->n_buckets_used = dst->n_buckets_used + 1;\u000a          }\u000a          else {\u000a            phVar2 = allocate_entry(dst);\u000a            if (phVar2 == (hash_entry *)0x0) {\u000a              return false;\u000a            }\u000a            phVar2->data = key;\u000a            phVar2->next = entry->next;\u000a            entry->next = phVar2;\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          src->n_buckets_used = src->n_buckets_used - 1;\u000a        }\u000a      }\u000a      phVar3 = phVar3 + 1;\u000a    } while (phVar3 < src->bucket_limit);\u000a  }\u000a  return true;\u000a}\u000a\u000a
p31
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nMOV R15,qword ptr [RBP]\nMOV AL,0x1\nCMP R15,qword ptr [RBP + 0x8]\nJNC 0x004087e2\nMOV qword ptr [RSP],RBP\nNOP dword ptr [RAX + RAX*0x1]\nCMP qword ptr [R15],0x0\nJZ 0x004087d2\nMOV RBX,qword ptr [R15 + 0x8]\nTEST RBX,RBX\nJZ 0x0040877a\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV R13,qword ptr [RBX]\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00407ff0\nMOV RBP,qword ptr [RBX + 0x8]\nCMP qword ptr [RAX],0x0\nJZ 0x00408760\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RBX + 0x8],RCX\nMOV qword ptr [RAX + 0x8],RBX\nJMP 0x00408772\nMOV qword ptr [RAX],R13\nINC qword ptr [R14 + 0x18]\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00408d60\nTEST RBP,RBP\nMOV RBX,RBP\nJNZ 0x00408730\nMOV R13,qword ptr [R15]\nMOV qword ptr [R15 + 0x8],0x0\nTEST R12B,R12B\nMOV RBP,qword ptr [RSP]\nJNZ 0x004087d2\nMOV RDI,R14\nMOV RSI,R13\nCALL 0x00407ff0\nMOV RBX,RAX\nCMP qword ptr [RBX],0x0\nJZ 0x004087c0\nMOV RDI,R14\nCALL 0x00408aa0\nTEST RAX,RAX\nJZ 0x004087f1\nMOV qword ptr [RAX],R13\nMOV RCX,qword ptr [RBX + 0x8]\nMOV qword ptr [RAX + 0x8],RCX\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x004087c7\nMOV qword ptr [RBX],R13\nINC qword ptr [R14 + 0x18]\nMOV qword ptr [R15],0x0\nDEC qword ptr [RBP + 0x18]\nADD R15,0x10\nCMP R15,qword ptr [RBP + 0x8]\nJC 0x00408710\nMOV AL,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR EAX,EAX\nJMP 0x004087e2\n'
p32
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n41 89 d4\n48 89 f5\n49 89 fe\n4c 8b 7d 00\nb0 01\n4c 3b 7d 08\n0f 83 de 00 00 00\n48 89 2c 24\n0f 1f 84 00 00 00 00 00\n49 83 3f 00\n0f 84 b8 00 00 00\n49 8b 5f 08\n48 85 db\n74 57\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n4c 8b 2b\n4c 89 f7\n4c 89 ee\ne8 b2 f8 ff ff\n48 8b 6b 08\n48 83 38 00\n74 18\n48 8b 48 08\n48 89 4b 08\n48 89 58 08\neb 1c\n4c 89 28\n49 ff 46 18\n4c 89 f7\n48 89 de\ne8 ee 05 00 00\n48 85 ed\n48 89 eb\n75 b6\n4d 8b 2f\n49 c7 47 08 00 00 00 00\n45 84 e4\n48 8b 2c 24\n75 44\n4c 89 f7\n4c 89 ee\ne8 57 f8 ff ff\n48 89 c3\n48 83 3b 00\n74 1e\n4c 89 f7\ne8 f6 02 00 00\n48 85 c0\n74 42\n4c 89 28\n48 8b 4b 08\n48 89 48 08\n48 89 43 08\neb 07\n4c 89 2b\n49 ff 46 18\n49 c7 07 00 00 00 00\n48 ff 4d 18\n49 83 c7 10\n4c 3b 7d 08\n0f 82 30 ff ff ff\nb0 01\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n31 c0\neb ed\n'
p33
S'.text:00000000004086e0\n.text:00000000004086e1\n.text:00000000004086e3\n.text:00000000004086e5\n.text:00000000004086e7\n.text:00000000004086e9\n.text:00000000004086ea\n.text:00000000004086eb\n.text:00000000004086ee\n.text:00000000004086f1\n.text:00000000004086f4\n.text:00000000004086f8\n.text:00000000004086fa\n.text:00000000004086fe\n.text:0000000000408704\n.text:0000000000408708\n.text:0000000000408710\n.text:0000000000408714\n.text:000000000040871a\n.text:000000000040871e\n.text:0000000000408721\n.text:0000000000408723\n.text:0000000000408730\n.text:0000000000408733\n.text:0000000000408736\n.text:0000000000408739\n.text:000000000040873e\n.text:0000000000408742\n.text:0000000000408746\n.text:0000000000408748\n.text:000000000040874c\n.text:0000000000408750\n.text:0000000000408754\n.text:0000000000408760\n.text:0000000000408763\n.text:0000000000408767\n.text:000000000040876a\n.text:000000000040876d\n.text:0000000000408772\n.text:0000000000408775\n.text:0000000000408778\n.text:000000000040877a\n.text:000000000040877d\n.text:0000000000408785\n.text:0000000000408788\n.text:000000000040878c\n.text:000000000040878e\n.text:0000000000408791\n.text:0000000000408794\n.text:0000000000408799\n.text:000000000040879c\n.text:00000000004087a0\n.text:00000000004087a2\n.text:00000000004087a5\n.text:00000000004087aa\n.text:00000000004087ad\n.text:00000000004087af\n.text:00000000004087b2\n.text:00000000004087b6\n.text:00000000004087ba\n.text:00000000004087be\n.text:00000000004087c0\n.text:00000000004087c3\n.text:00000000004087c7\n.text:00000000004087ce\n.text:00000000004087d2\n.text:00000000004087d6\n.text:00000000004087da\n.text:00000000004087e0\n.text:00000000004087e2\n.text:00000000004087e6\n.text:00000000004087e7\n.text:00000000004087e9\n.text:00000000004087eb\n.text:00000000004087ed\n.text:00000000004087ef\n.text:00000000004087f0\n.text:00000000004087f1\n.text:00000000004087f3\n'
p34
tp35
sS'rpl_fclose'
p36
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p37
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_004092e9;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_004092e9:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p38
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x00401a70\nTEST EAX,EAX\nJS 0x004092e9\nMOV RDI,RBX\nCALL 0x00401b00\nTEST EAX,EAX\nJZ 0x004092b7\nMOV RDI,RBX\nCALL 0x00401a70\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x00401980\nCMP RAX,-0x1\nJZ 0x004092e9\nMOV RDI,RBX\nCALL 0x004094c0\nTEST EAX,EAX\nJZ 0x004092e9\nCALL 0x00401800\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401890\nTEST EBP,EBP\nJZ 0x004092e2\nCALL 0x00401800\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401890\n'
p39
S'55\n53\n50\n48 89 fb\ne8 e5 87 ff ff\n85 c0\n78 5a\n48 89 df\ne8 69 88 ff ff\n85 c0\n74 1c\n48 89 df\ne8 cd 87 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 cf 86 ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 01 02 00 00\n85 c0\n74 26\ne8 38 85 ff ff\n8b 28\n48 89 df\ne8 be 85 ff ff\n85 ed\n74 0c\ne8 25 85 ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 99 85 ff ff\n'
p40
S'.text:0000000000409280\n.text:0000000000409281\n.text:0000000000409282\n.text:0000000000409283\n.text:0000000000409286\n.text:000000000040928b\n.text:000000000040928d\n.text:000000000040928f\n.text:0000000000409292\n.text:0000000000409297\n.text:0000000000409299\n.text:000000000040929b\n.text:000000000040929e\n.text:00000000004092a3\n.text:00000000004092a5\n.text:00000000004092aa\n.text:00000000004092ac\n.text:00000000004092b1\n.text:00000000004092b5\n.text:00000000004092b7\n.text:00000000004092ba\n.text:00000000004092bf\n.text:00000000004092c1\n.text:00000000004092c3\n.text:00000000004092c8\n.text:00000000004092ca\n.text:00000000004092cd\n.text:00000000004092d2\n.text:00000000004092d4\n.text:00000000004092d6\n.text:00000000004092db\n.text:00000000004092dd\n.text:00000000004092e2\n.text:00000000004092e6\n.text:00000000004092e7\n.text:00000000004092e8\n.text:00000000004092e9\n.text:00000000004092ec\n.text:00000000004092f0\n.text:00000000004092f1\n.text:00000000004092f2\n'
p41
tp42
sS'leave_dir'
p43
(S'\n__stdcall leave_dir(FTS * fts, FTSENT * ent)\n'
p44
V\u000avoid leave_dir(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  __ino_t *p_Var2;\u000a  void *__ptr;\u000a  __dev_t local_18;\u000a  __ino_t local_10;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) != 0) {\u000a    local_18 = ent->fts_statp[0].st_dev;\u000a    local_10 = ent->fts_statp[0].st_ino;\u000a    __ptr = hash_delete((Hash_table *)fts->fts_cycle,&local_18);\u000a    if (__ptr != (void *)0x0) {\u000a      free(__ptr);\u000a      return;\u000a    }\u000aLAB_00406b88:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  p_Var1 = ent->fts_parent;\u000a  if ((p_Var1 != (_ftsent *)0x0) && (-1 < p_Var1->fts_level)) {\u000a    p_Var2 = (__ino_t *)fts->fts_cycle;\u000a    if (p_Var2[2] == 0) goto LAB_00406b88;\u000a    if ((*p_Var2 == ent->fts_statp[0].st_ino) && (p_Var2[1] == ent->fts_statp[0].st_dev)) {\u000a      p_Var2[1] = p_Var1->fts_statp[0].st_dev;\u000a      *p_Var2 = p_Var1->fts_statp[0].st_ino;\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p45
S'SUB RSP,0x18\nMOVZX EAX,word ptr [RDI + 0x48]\nTEST AX,0x102\nJZ 0x00406b40\nMOV RAX,qword ptr [RSI + 0x78]\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [0x80 + RSI]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDI,qword ptr [RDI + 0x58]\nMOV RSI,RSP\nCALL 0x00408b00\nTEST RAX,RAX\nJZ 0x00406b88\nMOV RDI,RAX\nCALL 0x004017e0\nADD RSP,0x18\nRET\nMOV RAX,qword ptr [RSI + 0x8]\nTEST RAX,RAX\nJZ 0x00406b83\nCMP qword ptr [RAX + 0x58],0x0\nJS 0x00406b83\nMOV RCX,qword ptr [RDI + 0x58]\nCMP qword ptr [RCX + 0x10],0x0\nJZ 0x00406b88\nMOV RDX,qword ptr [RCX]\nCMP RDX,qword ptr [0x80 + RSI]\nJNZ 0x00406b83\nMOV RDX,qword ptr [RCX + 0x8]\nCMP RDX,qword ptr [RSI + 0x78]\nJNZ 0x00406b83\nMOV RDX,qword ptr [RAX + 0x78]\nMOV qword ptr [RCX + 0x8],RDX\nMOV RAX,qword ptr [0x80 + RAX]\nMOV qword ptr [RCX],RAX\nADD RSP,0x18\nRET\nCALL 0x004017f0\n'
p46
S'48 83 ec 18\n0f b7 47 48\n66 a9 02 01\n74 32\n48 8b 46 78\n48 89 04 24\n48 8b 86 80 00 00 00\n48 89 44 24 08\n48 8b 7f 58\n48 89 e6\ne8 d2 1f 00 00\n48 85 c0\n74 55\n48 89 c7\ne8 a5 ac ff ff\n48 83 c4 18\nc3\n48 8b 46 08\n48 85 c0\n74 3a\n48 83 78 58 00\n78 33\n48 8b 4f 58\n48 83 79 10 00\n74 2d\n48 8b 11\n48 3b 96 80 00 00 00\n75 1c\n48 8b 51 08\n48 3b 56 78\n75 12\n48 8b 50 78\n48 89 51 08\n48 8b 80 80 00 00 00\n48 89 01\n48 83 c4 18\nc3\ne8 63 ac ff ff\n'
p47
S'.text:0000000000406b00\n.text:0000000000406b04\n.text:0000000000406b08\n.text:0000000000406b0c\n.text:0000000000406b0e\n.text:0000000000406b12\n.text:0000000000406b16\n.text:0000000000406b1d\n.text:0000000000406b22\n.text:0000000000406b26\n.text:0000000000406b29\n.text:0000000000406b2e\n.text:0000000000406b31\n.text:0000000000406b33\n.text:0000000000406b36\n.text:0000000000406b3b\n.text:0000000000406b3f\n.text:0000000000406b40\n.text:0000000000406b44\n.text:0000000000406b47\n.text:0000000000406b49\n.text:0000000000406b4e\n.text:0000000000406b50\n.text:0000000000406b54\n.text:0000000000406b59\n.text:0000000000406b5b\n.text:0000000000406b5e\n.text:0000000000406b65\n.text:0000000000406b67\n.text:0000000000406b6b\n.text:0000000000406b6f\n.text:0000000000406b71\n.text:0000000000406b75\n.text:0000000000406b79\n.text:0000000000406b80\n.text:0000000000406b83\n.text:0000000000406b87\n.text:0000000000406b88\n'
p48
tp49
sS'strncmp'
p50
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p51
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_0060f040)();\u000a  return iVar1;\u000a}\u000a\u000a
p52
S'JMP qword ptr [0x0060f040]\n'
p53
S'ff 25 2a d8 20 00\n'
p54
S'.plt:0000000000401810\n'
p55
tp56
sS'xnrealloc'
p57
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p58
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p59
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x00405674\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00405680\nPUSH RAX\nCALL 0x004057d0\n'
p60
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p61
S'.text:0000000000405660\n.text:0000000000405663\n.text:0000000000405666\n.text:0000000000405669\n.text:000000000040566b\n.text:000000000040566f\n.text:0000000000405672\n.text:0000000000405674\n.text:0000000000405675\n'
p62
tp63
sS'quote'
p64
(S'\n__stdcall quote(char * arg)\n'
p65
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p66
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404950\n'
p67
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p68
S'.text:0000000000404960\n.text:0000000000404963\n.text:0000000000404965\n.text:0000000000404968\n'
p69
tp70
sS'emit_bug_reporting_address'
p71
(S'\n__stdcall emit_bug_reporting_address()\n'
p72
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p73
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x40b65d\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40b672\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401b50\nXOR EDI,EDI\nMOV ESI,0x40b688\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40a778\nMOV ECX,0x40a8b2\nXOR EAX,EAX\nCALL 0x00401b50\nXOR EDI,EDI\nMOV ESI,0x40b69c\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,qword ptr [0x0060f2e8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x004019f0\n'
p74
S'50\n31 ff\nbe 5d b6 40 00\nba 05 00 00 00\ne8 1e c3 ff ff\n48 89 c1\nbf 01 00 00 00\nba 72 b6 40 00\n31 c0\n48 89 ce\ne8 87 c5 ff ff\n31 ff\nbe 88 b6 40 00\nba 05 00 00 00\ne8 f6 c2 ff ff\n48 89 c6\nbf 01 00 00 00\nba 78 a7 40 00\nb9 b2 a8 40 00\n31 c0\ne8 5d c5 ff ff\n31 ff\nbe 9c b6 40 00\nba 05 00 00 00\ne8 cc c2 ff ff\n48 8b 35 dd 9c 20 00\n48 89 c7\n58\ne9 dc c3 ff ff\n'
p75
S'.text:00000000004055a0\n.text:00000000004055a1\n.text:00000000004055a3\n.text:00000000004055a8\n.text:00000000004055ad\n.text:00000000004055b2\n.text:00000000004055b5\n.text:00000000004055ba\n.text:00000000004055bf\n.text:00000000004055c1\n.text:00000000004055c4\n.text:00000000004055c9\n.text:00000000004055cb\n.text:00000000004055d0\n.text:00000000004055d5\n.text:00000000004055da\n.text:00000000004055dd\n.text:00000000004055e2\n.text:00000000004055e7\n.text:00000000004055ec\n.text:00000000004055ee\n.text:00000000004055f3\n.text:00000000004055f5\n.text:00000000004055fa\n.text:00000000004055ff\n.text:0000000000405604\n.text:000000000040560b\n.text:000000000040560e\n.text:000000000040560f\n'
p76
tp77
sS'clone_quoting_options'
p78
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p79
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p80
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401800\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x60f360\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00405780\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p81
S'55\n41 56\n53\n48 89 fb\ne8 d4 e2 ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 60 f3 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 35 22 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p82
S'.text:0000000000403520\n.text:0000000000403521\n.text:0000000000403523\n.text:0000000000403524\n.text:0000000000403527\n.text:000000000040352c\n.text:000000000040352f\n.text:0000000000403532\n.text:0000000000403535\n.text:000000000040353a\n.text:000000000040353e\n.text:0000000000403543\n.text:0000000000403546\n.text:000000000040354b\n.text:000000000040354e\n.text:000000000040354f\n.text:0000000000403551\n.text:0000000000403552\n'
p83
tp84
sS'xmalloc'
p85
(S'\n__stdcall xmalloc(size_t n)\n'
p86
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p87
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401aa0\nTEST RBX,RBX\nJZ 0x00405653\nTEST RAX,RAX\nJZ 0x00405655\nPOP RBX\nRET\nCALL 0x004057d0\n'
p88
S'53\n48 89 fb\ne8 57 c4 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p89
S'.text:0000000000405640\n.text:0000000000405641\n.text:0000000000405644\n.text:0000000000405649\n.text:000000000040564c\n.text:000000000040564e\n.text:0000000000405651\n.text:0000000000405653\n.text:0000000000405654\n.text:0000000000405655\n'
p90
tp91
sS'cwd_advance_fd'
p92
(S'\n__stdcall cwd_advance_fd(FTS * sp)\n'
p93
V\u000avoid cwd_advance_fd(FTS *sp)\u000a\u000a{\u000a  int __fd;\u000a  char in_DL;\u000a  int in_ESI;\u000a  \u000a  __fd = sp->fts_cwd_fd;\u000a  if ((__fd == in_ESI) && (__fd != -100)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  if (in_DL == 0) {\u000a    if ((__fd < 0) || ((sp->fts_options & 4U) != 0)) goto LAB_004076ac;\u000a  }\u000a  else {\u000a    __fd = i_ring_push(&sp->fts_fd_ring);\u000a    if (__fd < 0) goto LAB_004076ac;\u000a  }\u000a  close(__fd);\u000aLAB_004076ac:\u000a  sp->fts_cwd_fd = in_ESI;\u000a  return;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV ESI,dword ptr [RBX + 0x2c]\nCMP ESI,EBP\nJNZ 0x00407684\nCMP ESI,-0x64\nJNZ 0x004076b6\nTEST DL,DL\nJZ 0x00407699\nLEA RDI,[RBX + 0x60]\nCALL 0x00408db0\nTEST EAX,EAX\nJS 0x004076ac\nMOV EDI,EAX\nJMP 0x004076a7\nTEST ESI,ESI\nJS 0x004076ac\nMOV EAX,dword ptr [RBX + 0x48]\nAND EAX,0x4\nJNZ 0x004076ac\nMOV EDI,ESI\nCALL 0x004019c0\nMOV dword ptr [RBX + 0x2c],EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nCALL 0x004017f0\n'
p95
S'55\n53\n50\n89 f5\n48 89 fb\n8b 73 2c\n39 ee\n75 05\n83 fe 9c\n75 32\n84 d2\n74 11\n48 8d 7b 60\ne8 1f 17 00 00\n85 c0\n78 17\n89 c7\neb 0e\n85 f6\n78 0f\n8b 43 48\n83 e0 04\n75 07\n89 f7\ne8 14 a3 ff ff\n89 6b 2c\n48 83 c4 08\n5b\n5d\nc3\ne8 35 a1 ff ff\n'
p96
S'.text:0000000000407670\n.text:0000000000407671\n.text:0000000000407672\n.text:0000000000407673\n.text:0000000000407675\n.text:0000000000407678\n.text:000000000040767b\n.text:000000000040767d\n.text:000000000040767f\n.text:0000000000407682\n.text:0000000000407684\n.text:0000000000407686\n.text:0000000000407688\n.text:000000000040768c\n.text:0000000000407691\n.text:0000000000407693\n.text:0000000000407695\n.text:0000000000407697\n.text:0000000000407699\n.text:000000000040769b\n.text:000000000040769d\n.text:00000000004076a0\n.text:00000000004076a3\n.text:00000000004076a5\n.text:00000000004076a7\n.text:00000000004076ac\n.text:00000000004076af\n.text:00000000004076b3\n.text:00000000004076b4\n.text:00000000004076b5\n.text:00000000004076b6\n'
p97
tp98
sS'quotearg_char_mem'
p99
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p100
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p101
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x0060f390]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x0060f380]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f370]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f360]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00403580\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404470\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p102
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d f8 ab 20 00\n48 89 4c 24 30\n0f 10 05 dc ab 20 00\n0f 29 44 24 20\n0f 10 05 c0 ab 20 00\n0f 29 44 24 10\n0f 10 05 a4 ab 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p103
S'.text:0000000000404780\n.text:0000000000404782\n.text:0000000000404784\n.text:0000000000404785\n.text:0000000000404789\n.text:000000000040478b\n.text:000000000040478e\n.text:0000000000404791\n.text:0000000000404798\n.text:000000000040479d\n.text:00000000004047a4\n.text:00000000004047a9\n.text:00000000004047b0\n.text:00000000004047b5\n.text:00000000004047bc\n.text:00000000004047c0\n.text:00000000004047c3\n.text:00000000004047c8\n.text:00000000004047cb\n.text:00000000004047cd\n.text:00000000004047d2\n.text:00000000004047d4\n.text:00000000004047d7\n.text:00000000004047da\n.text:00000000004047dd\n.text:00000000004047e2\n.text:00000000004047e6\n.text:00000000004047e7\n.text:00000000004047e9\n.text:00000000004047eb\n'
p104
tp105
sS'frame_dummy'
p106
(S'\n__stdcall frame_dummy()\n'
p107
V\u000a/* WARNING: Removing unreachable block (ram,0x00401d4a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p108
S'MOV EDI,0x60ee18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401d40\nJMP 0x00401cd0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401d3b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x00401cd0\n'
p109
S'bf 18 ee 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p110
S'.text:0000000000401d30\n.text:0000000000401d35\n.text:0000000000401d39\n.text:0000000000401d3b\n.text:0000000000401d40\n.text:0000000000401d45\n.text:0000000000401d48\n.text:0000000000401d4a\n.text:0000000000401d4b\n.text:0000000000401d4e\n.text:0000000000401d50\n.text:0000000000401d51\n'
p111
tp112
sS'chownat'
p113
(S'\n__stdcall chownat(char * file)\n'
p114
V\u000aint chownat(char *file)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fchownat_0060f230)();\u000a  return iVar1;\u000a}\u000a\u000a
p115
S'XOR R8D,R8D\nJMP 0x00401bf0\n'
p116
S'45 31 c0\ne9 f8 e7 ff ff\n'
p117
S'.text:00000000004033f0\n.text:00000000004033f3\n'
p118
tp119
sS'restore_initial_cwd'
p120
(S'\n__stdcall restore_initial_cwd(FTS * sp)\n'
p121
V\u000aint restore_initial_cwd(FTS *sp)\u000a\u000a{\u000a  int iVar1;\u000a  bool bVar2;\u000a  \u000a  if ((sp->fts_options & 4U) == 0) {\u000a    if ((sp->fts_options & 0x200U) == 0) {\u000a      iVar1 = fchdir(sp->fts_rfd);\u000a      bVar2 = iVar1 != 0;\u000a      goto LAB_00407445;\u000a    }\u000a    cwd_advance_fd(sp);\u000a  }\u000a  bVar2 = false;\u000aLAB_00407445:\u000a  fd_ring_clear(&sp->fts_fd_ring);\u000a  return (int)(uint)bVar2;\u000a}\u000a\u000a
p122
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOV EAX,dword ptr [RBX + 0x48]\nTEST AL,0x4\nJNZ 0x00407443\nTEST AH,0x2\nJNZ 0x00407431\nMOV EDI,dword ptr [RBX + 0x28]\nCALL 0x00401b10\nTEST EAX,EAX\nSETNZ AL\nJMP 0x00407445\nMOV ESI,0xffffff9c\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00407670\nXOR EAX,EAX\nMOVZX EBP,AL\nADD RBX,0x60\nMOV RDI,RBX\nCALL 0x004064e0\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p123
S'55\n53\n50\n48 89 fb\n8b 43 48\na8 04\n75 26\nf6 c4 02\n75 0f\n8b 7b 28\ne8 e6 a6 ff ff\n85 c0\n0f 95 c0\neb 14\nbe 9c ff ff ff\nba 01 00 00 00\n48 89 df\ne8 2d 02 00 00\n31 c0\n0f b6 e8\n48 83 c3 60\n48 89 df\ne8 8c f0 ff ff\n89 e8\n48 83 c4 08\n5b\n5d\nc3\n'
p124
S'.text:0000000000407410\n.text:0000000000407411\n.text:0000000000407412\n.text:0000000000407413\n.text:0000000000407416\n.text:0000000000407419\n.text:000000000040741b\n.text:000000000040741d\n.text:0000000000407420\n.text:0000000000407422\n.text:0000000000407425\n.text:000000000040742a\n.text:000000000040742c\n.text:000000000040742f\n.text:0000000000407431\n.text:0000000000407436\n.text:000000000040743b\n.text:000000000040743e\n.text:0000000000407443\n.text:0000000000407445\n.text:0000000000407448\n.text:000000000040744c\n.text:000000000040744f\n.text:0000000000407454\n.text:0000000000407456\n.text:000000000040745a\n.text:000000000040745b\n.text:000000000040745c\n'
p125
tp126
sS'quotearg_n_style_colon'
p127
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p128
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p129
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x004046a0\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00403580\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00404470\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p130
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p131
S'.text:0000000000404820\n.text:0000000000404821\n.text:0000000000404823\n.text:0000000000404824\n.text:0000000000404828\n.text:000000000040482b\n.text:000000000040482d\n.text:0000000000404832\n.text:0000000000404835\n.text:000000000040483a\n.text:000000000040483f\n.text:0000000000404844\n.text:0000000000404847\n.text:000000000040484c\n.text:0000000000404853\n.text:0000000000404855\n.text:0000000000404858\n.text:000000000040485b\n.text:0000000000404860\n.text:0000000000404864\n.text:0000000000404865\n.text:0000000000404867\n.text:0000000000404868\n'
p132
tp133
sS'rotl64'
p134
(S'\n__stdcall rotl64(uint64_t x)\n'
p135
V\u000auint64_t rotl64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p136
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p137
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p138
S'.text:0000000000409580\n.text:0000000000409582\n.text:0000000000409585\n.text:0000000000409588\n'
p139
tp140
sS'LCO_compare'
p141
(S'\n__stdcall LCO_compare(void * x, void * y)\n'
p142
V\u000a_Bool LCO_compare(void *x,void *y)\u000a\u000a{\u000a  return (_Bool)(*(long *)x == *(long *)y);\u000a}\u000a\u000a
p143
S'MOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nSETZ AL\nRET\n'
p144
S'48 8b 07\n48 3b 06\n0f 94 c0\nc3\n'
p145
S'.text:0000000000407860\n.text:0000000000407863\n.text:0000000000407866\n.text:0000000000407869\n'
p146
tp147
sS'fts_children'
p148
(S'\n__stdcall fts_children(FTS * sp)\n'
p149
V\u000aFTSENT * fts_children(FTS *sp)\u000a\u000a{\u000a  byte *pbVar1;\u000a  _ftsent *p_Var2;\u000a  int __fd;\u000a  int iVar3;\u000a  int *piVar4;\u000a  FTSENT *pFVar5;\u000a  uint in_ESI;\u000a  \u000a  piVar4 = __errno_location();\u000a  if ((in_ESI | 0x2000) == 0x2000) {\u000a    p_Var2 = sp->fts_cur;\u000a    *piVar4 = 0;\u000a    if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) == 0) {\u000a      if (p_Var2->fts_info != 1) {\u000a        if (p_Var2->fts_info != 9) {\u000a          return (FTSENT *)0x0;\u000a        }\u000a        return (FTSENT *)p_Var2->fts_link;\u000a      }\u000a      if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a        fts_lfree((FTSENT *)sp->fts_child);\u000a      }\u000a      if (in_ESI == 0x2000) {\u000a        pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a        *pbVar1 = *pbVar1 | 0x20;\u000a      }\u000a      if (((p_Var2->fts_level == 0) && (*p_Var2->fts_accpath != '/')) &&\u000a         ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a        __fd = diropen(sp,".");\u000a        if (__fd < 0) {\u000a          sp->fts_child = (_ftsent *)0x0;\u000a          return (FTSENT *)0x0;\u000a        }\u000a        pFVar5 = fts_build(sp);\u000a        *(FTSENT **)&sp->fts_child = pFVar5;\u000a        if ((*(byte *)((long)&sp->fts_options + 1) & 2) == 0) {\u000a          iVar3 = fchdir(__fd);\u000a          if (iVar3 != 0) {\u000a            iVar3 = *piVar4;\u000a            close(__fd);\u000a            *piVar4 = iVar3;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          close(__fd);\u000a        }\u000a        else {\u000a          cwd_advance_fd(sp);\u000a        }\u000a        return (FTSENT *)sp->fts_child;\u000a      }\u000a      pFVar5 = fts_build(sp);\u000a      *(FTSENT **)&sp->fts_child = pFVar5;\u000a      return pFVar5;\u000a    }\u000a  }\u000a  else {\u000a    *piVar4 = 0x16;\u000a  }\u000a  return (FTSENT *)0x0;\u000a}\u000a\u000a
p150
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV EBP,ESI\nMOV RBX,RDI\nCALL 0x00401800\nMOV R14,RAX\nMOV EAX,EBP\nOR EAX,0x2000\nCMP EAX,0x2000\nJNZ 0x0040773f\nMOV R15,qword ptr [RBX]\nMOV dword ptr [R14],0x0\nTEST byte ptr [RBX + 0x49],0x40\nJNZ 0x00407746\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0x1\nJZ 0x00407751\nMOVZX EAX,AX\nCMP EAX,0x9\nJNZ 0x004077d1\nMOV RAX,qword ptr [R15 + 0x10]\nJMP 0x00407748\nMOV dword ptr [R14],0x16\nXOR EAX,EAX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RDI,qword ptr [RBX + 0x8]\nTEST RDI,RDI\nJZ 0x0040775f\nCALL 0x00406390\nMOV R12D,0x1\nCMP EBP,0x2000\nJNZ 0x00407777\nOR byte ptr [RBX + 0x49],0x20\nMOV R12D,0x2\nCMP qword ptr [R15 + 0x58],0x0\nJNZ 0x004077d8\nMOV RAX,qword ptr [R15 + 0x30]\nCMP byte ptr [RAX],0x2f\nJZ 0x004077d8\nTEST byte ptr [RBX + 0x48],0x4\nJNZ 0x004077d8\nMOV ESI,0x40b9c8\nMOV RDI,RBX\nCALL 0x00406330\nMOV R15D,EAX\nTEST R15D,R15D\nJS 0x004077ec\nMOV RDI,RBX\nMOV ESI,R12D\nCALL 0x00406d20\nMOV qword ptr [RBX + 0x8],RAX\nTEST byte ptr [RBX + 0x49],0x2\nJNZ 0x004077fb\nMOV EDI,R15D\nCALL 0x00401b10\nTEST EAX,EAX\nJZ 0x0040780d\nMOV EBX,dword ptr [R14]\nMOV EDI,R15D\nCALL 0x004019c0\nMOV dword ptr [R14],EBX\nXOR EAX,EAX\nJMP 0x00407748\nMOV RDI,RBX\nMOV ESI,R12D\nCALL 0x00406d20\nMOV qword ptr [RBX + 0x8],RAX\nJMP 0x00407748\nMOV qword ptr [RBX + 0x8],0x0\nXOR EAX,EAX\nJMP 0x00407748\nMOV EDX,0x1\nMOV RDI,RBX\nMOV ESI,R15D\nCALL 0x00407670\nJMP 0x00407815\nMOV EDI,R15D\nCALL 0x004019c0\nMOV RAX,qword ptr [RBX + 0x8]\nJMP 0x00407748\n'
p151
S'55\n41 57\n41 56\n41 54\n53\n89 f5\n48 89 fb\ne8 fe a0 ff ff\n49 89 c6\n89 e8\n0d 00 20 00 00\n3d 00 20 00 00\n75 2c\n4c 8b 3b\n41 c7 06 00 00 00 00\nf6 43 49 40\n75 23\n41 0f b7 47 70\n83 f8 01\n74 24\n0f b7 c0\n83 f8 09\n0f 85 98 00 00 00\n49 8b 47 10\neb 09\n41 c7 06 16 00 00 00\n31 c0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n48 8b 7b 08\n48 85 ff\n74 05\ne8 31 ec ff ff\n41 bc 01 00 00 00\n81 fd 00 20 00 00\n75 0a\n80 4b 49 20\n41 bc 02 00 00 00\n49 83 7f 58 00\n75 5a\n49 8b 47 30\n80 38 2f\n74 51\nf6 43 48 04\n75 4b\nbe c8 b9 40 00\n48 89 df\ne8 96 eb ff ff\n41 89 c7\n45 85 ff\n78 4a\n48 89 df\n44 89 e6\ne8 73 f5 ff ff\n48 89 43 08\nf6 43 49 02\n75 44\n44 89 ff\ne8 51 a3 ff ff\n85 c0\n74 4a\n41 8b 1e\n44 89 ff\ne8 f2 a1 ff ff\n41 89 1e\n31 c0\ne9 70 ff ff ff\n48 89 df\n44 89 e6\ne8 3d f5 ff ff\n48 89 43 08\ne9 5c ff ff ff\n48 c7 43 08 00 00 00 00\n31 c0\ne9 4d ff ff ff\nba 01 00 00 00\n48 89 df\n44 89 fe\ne8 65 fe ff ff\neb 08\n44 89 ff\ne8 ab a1 ff ff\n48 8b 43 08\ne9 2a ff ff ff\n'
p152
S'.text:00000000004076f0\n.text:00000000004076f1\n.text:00000000004076f3\n.text:00000000004076f5\n.text:00000000004076f7\n.text:00000000004076f8\n.text:00000000004076fa\n.text:00000000004076fd\n.text:0000000000407702\n.text:0000000000407705\n.text:0000000000407707\n.text:000000000040770c\n.text:0000000000407711\n.text:0000000000407713\n.text:0000000000407716\n.text:000000000040771d\n.text:0000000000407721\n.text:0000000000407723\n.text:0000000000407728\n.text:000000000040772b\n.text:000000000040772d\n.text:0000000000407730\n.text:0000000000407733\n.text:0000000000407739\n.text:000000000040773d\n.text:000000000040773f\n.text:0000000000407746\n.text:0000000000407748\n.text:0000000000407749\n.text:000000000040774b\n.text:000000000040774d\n.text:000000000040774f\n.text:0000000000407750\n.text:0000000000407751\n.text:0000000000407755\n.text:0000000000407758\n.text:000000000040775a\n.text:000000000040775f\n.text:0000000000407765\n.text:000000000040776b\n.text:000000000040776d\n.text:0000000000407771\n.text:0000000000407777\n.text:000000000040777c\n.text:000000000040777e\n.text:0000000000407782\n.text:0000000000407785\n.text:0000000000407787\n.text:000000000040778b\n.text:000000000040778d\n.text:0000000000407792\n.text:0000000000407795\n.text:000000000040779a\n.text:000000000040779d\n.text:00000000004077a0\n.text:00000000004077a2\n.text:00000000004077a5\n.text:00000000004077a8\n.text:00000000004077ad\n.text:00000000004077b1\n.text:00000000004077b5\n.text:00000000004077b7\n.text:00000000004077ba\n.text:00000000004077bf\n.text:00000000004077c1\n.text:00000000004077c3\n.text:00000000004077c6\n.text:00000000004077c9\n.text:00000000004077ce\n.text:00000000004077d1\n.text:00000000004077d3\n.text:00000000004077d8\n.text:00000000004077db\n.text:00000000004077de\n.text:00000000004077e3\n.text:00000000004077e7\n.text:00000000004077ec\n.text:00000000004077f4\n.text:00000000004077f6\n.text:00000000004077fb\n.text:0000000000407800\n.text:0000000000407803\n.text:0000000000407806\n.text:000000000040780b\n.text:000000000040780d\n.text:0000000000407810\n.text:0000000000407815\n.text:0000000000407819\n'
p153
tp154
sS'quote_mem'
p155
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p156
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p157
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404930\n'
p158
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p159
S'.text:0000000000404940\n.text:0000000000404943\n.text:0000000000404946\n.text:0000000000404948\n.text:000000000040494b\n.text:000000000040494e\n'
p160
tp161
sS'fileno'
p162
(S'\n__stdcall fileno(FILE * __stream)\n'
p163
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_0060f170)();\u000a  return iVar1;\u000a}\u000a\u000a
p164
S'JMP qword ptr [0x0060f170]\n'
p165
S'ff 25 fa d6 20 00\n'
p166
S'.plt:0000000000401a70\n'
p167
tp168
sS'fts_load'
p169
(S'\n__stdcall fts_load(FTS * sp, FTSENT * p)\n'
p170
V\u000avoid fts_load(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  FTSENT *__src;\u000a  FTSENT *pFVar1;\u000a  size_t sVar2;\u000a  char *__s;\u000a  \u000a  p->fts_pathlen = p->fts_namelen;\u000a  __src = p + 1;\u000a  memmove(sp->fts_path,__src,p->fts_namelen + 1);\u000a  pFVar1 = (FTSENT *)strrchr((char *)__src,0x2f);\u000a  if ((pFVar1 != (FTSENT *)0x0) &&\u000a     ((pFVar1 != __src || (*(char *)((long)&pFVar1->fts_cycle + 1) != 0)))) {\u000a    __s = (char *)((long)&pFVar1->fts_cycle + 1);\u000a    sVar2 = strlen(__s);\u000a    memmove(__src,__s,sVar2 + 1);\u000a    p->fts_namelen = sVar2;\u000a  }\u000a  __s = sp->fts_path;\u000a  p->fts_path = __s;\u000a  p->fts_accpath = __s;\u000a  return;\u000a}\u000a\u000a
p171
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nMOV R12,RSI\nMOV R14,RDI\nMOV RDX,qword ptr [R12 + 0x60]\nMOV qword ptr [R12 + 0x48],RDX\nMOV RDI,qword ptr [R14 + 0x20]\nLEA R15,[0x108 + R12]\nINC RDX\nMOV RSI,R15\nCALL 0x00401b60\nMOV ESI,0x2f\nMOV RDI,R15\nCALL 0x00401970\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004074d2\nCMP RBX,R15\nJNZ 0x004074b0\nCMP byte ptr [RBX + 0x1],0x0\nJZ 0x004074d2\nINC RBX\nMOV RDI,RBX\nCALL 0x004018f0\nMOV R13,RAX\nLEA RDX,[R13 + 0x1]\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00401b60\nMOV qword ptr [R12 + 0x60],R13\nMOV RAX,qword ptr [R14 + 0x20]\nMOV qword ptr [R12 + 0x38],RAX\nMOV qword ptr [R12 + 0x30],RAX\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p172
S'41 57\n41 56\n41 55\n41 54\n53\n49 89 f4\n49 89 fe\n49 8b 54 24 60\n49 89 54 24 48\n49 8b 7e 20\n4d 8d bc 24 08 01 00 00\n48 ff c2\n4c 89 fe\ne8 d0 a6 ff ff\nbe 2f 00 00 00\n4c 89 ff\ne8 d3 a4 ff ff\n48 89 c3\n48 85 db\n74 2d\n4c 39 fb\n75 06\n80 7b 01 00\n74 22\n48 ff c3\n48 89 df\ne8 35 a4 ff ff\n49 89 c5\n49 8d 55 01\n4c 89 ff\n48 89 de\ne8 93 a6 ff ff\n4d 89 6c 24 60\n49 8b 46 20\n49 89 44 24 38\n49 89 44 24 30\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p173
S'.text:0000000000407460\n.text:0000000000407462\n.text:0000000000407464\n.text:0000000000407466\n.text:0000000000407468\n.text:0000000000407469\n.text:000000000040746c\n.text:000000000040746f\n.text:0000000000407474\n.text:0000000000407479\n.text:000000000040747d\n.text:0000000000407485\n.text:0000000000407488\n.text:000000000040748b\n.text:0000000000407490\n.text:0000000000407495\n.text:0000000000407498\n.text:000000000040749d\n.text:00000000004074a0\n.text:00000000004074a3\n.text:00000000004074a5\n.text:00000000004074a8\n.text:00000000004074aa\n.text:00000000004074ae\n.text:00000000004074b0\n.text:00000000004074b3\n.text:00000000004074b6\n.text:00000000004074bb\n.text:00000000004074be\n.text:00000000004074c2\n.text:00000000004074c5\n.text:00000000004074c8\n.text:00000000004074cd\n.text:00000000004074d2\n.text:00000000004074d6\n.text:00000000004074db\n.text:00000000004074e0\n.text:00000000004074e1\n.text:00000000004074e3\n.text:00000000004074e5\n.text:00000000004074e7\n.text:00000000004074e9\n'
p174
tp175
sS'mbrtowc'
p176
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p177
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_0060f0d0)();\u000a  return sVar1;\u000a}\u000a\u000a
p178
S'JMP qword ptr [0x0060f0d0]\n'
p179
S'ff 25 9a d7 20 00\n'
p180
S'.plt:0000000000401930\n'
p181
tp182
sS'rotr16'
p183
(S'\n__stdcall rotr16()\n'
p184
V\u000auint16_t rotr16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI << (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p185
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p186
S'89 f8\n89 f1\nd3 e8\nb9 10 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p187
S'.text:0000000000409600\n.text:0000000000409602\n.text:0000000000409604\n.text:0000000000409606\n.text:000000000040960b\n.text:000000000040960d\n.text:000000000040960f\n.text:0000000000409611\n.text:0000000000409613\n'
p188
tp189
sS'openat'
p190
(S'\n__stdcall openat(int __fd, char * __file, int __oflag)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint openat(int __fd,char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_openat_0060f0c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x0060f0c0]\n'
p193
S'ff 25 aa d7 20 00\n'
p194
S'.plt:0000000000401910\n'
p195
tp196
sS'AD_hash'
p197
(S'\n__stdcall AD_hash(void * x, size_t table_size)\n'
p198
V\u000asize_t AD_hash(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)((long)x + 8) % table_size;\u000a}\u000a\u000a
p199
S'MOV RAX,qword ptr [RDI + 0x8]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p200
S'48 8b 47 08\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p201
S'.text:0000000000407820\n.text:0000000000407824\n.text:0000000000407826\n.text:0000000000407829\n.text:000000000040782c\n'
p202
tp203
sS'setlocale'
p204
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p205
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_0060f1d8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p206
S'JMP qword ptr [0x0060f1d8]\n'
p207
S'ff 25 92 d6 20 00\n'
p208
S'.plt:0000000000401b40\n'
p209
tp210
sS'endpwent'
p211
(S'\n__stdcall endpwent()\n'
p212
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid endpwent(void)\u000a\u000a{\u000a  (*(code *)PTR_endpwent_0060f1b0)();\u000a  return;\u000a}\u000a\u000a
p213
S'JMP qword ptr [0x0060f1b0]\n'
p214
S'ff 25 ba d6 20 00\n'
p215
S'.plt:0000000000401af0\n'
p216
tp217
sS'restricted_chown'
p218
(S'\n__stdcall restricted_chown(char * file, stat * orig_st)\n'
p219
V\u000aRCH_status restricted_chown(char *file,stat *orig_st)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  int *piVar2;\u000a  __uid_t __owner;\u000a  __dev_t *in_RDX;\u000a  uint __oflag;\u000a  RCH_status RVar3;\u000a  __gid_t __group;\u000a  uint in_R9D;\u000a  stat st;\u000a  stat local_c0;\u000a  \u000a  if (((uint)st.st_dev & in_R9D) == 0xffffffff) {\u000a    return RC_do_ordinary_chown;\u000a  }\u000a  if ((*(ushort *)(in_RDX + 3) & 0xf000) == 0x8000) {\u000a    __oflag = 0x900;\u000a  }\u000a  else {\u000a    if ((*(ushort *)(in_RDX + 3) & 0xf000) != 0x4000) {\u000a      return RC_do_ordinary_chown;\u000a    }\u000a    __oflag = 0x10900;\u000a  }\u000a  __fd = openat((int)file,(char *)orig_st,__oflag);\u000a  if ((__fd < 0) &&\u000a     (((piVar2 = __errno_location(), *piVar2 != 0xd || ((*(uint *)(in_RDX + 3) & 0xf000) != 0x8000))\u000a      || (__fd = openat((int)file,(char *)orig_st,__oflag | 1), __fd < 0)))) {\u000a    RVar3 = (uint)(*piVar2 != 0xd) + RC_do_ordinary_chown;\u000a  }\u000a  else {\u000a    iVar1 = fstat(__fd,&local_c0);\u000a    RVar3 = RC_error;\u000a    if ((((iVar1 == 0) && (RVar3 = RC_inode_changed, in_RDX[1] == local_c0.st_ino)) &&\u000a        ((*in_RDX == local_c0.st_dev &&\u000a         ((in_R9D == 0xffffffff || (RVar3 = RC_ok, local_c0.st_uid == in_R9D)))))) &&\u000a       (((uint)st.st_dev == 0xffffffff || (RVar3 = RC_ok, local_c0.st_gid == (uint)st.st_dev)))) {\u000a      iVar1 = fchown(__fd,__owner,__group);\u000a      RVar3 = RC_error;\u000a      if (iVar1 == 0) {\u000a        __fd = close(__fd);\u000a        return (uint)(__fd != 0) * 4 + RC_ok;\u000a      }\u000a    }\u000a    piVar2 = __errno_location();\u000a    iVar1 = *piVar2;\u000a    close(__fd);\u000a    *piVar2 = iVar1;\u000a  }\u000a  return RVar3;\u000a}\u000a\u000a
p220
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R13D,R9D\nMOV RBP,RDX\nMOV R14,RSI\nMOV R15D,EDI\nMOV EAX,dword ptr [0xd0 + RSP]\nAND EAX,R13D\nMOV EBX,0x5\nCMP EAX,-0x1\nJZ 0x004030a6\nMOVZX EAX,word ptr [RBP + 0x18]\nAND EAX,0xf000\nCMP EAX,0x8000\nJZ 0x00402fa2\nMOVZX EAX,AX\nCMP EAX,0x4000\nJNZ 0x004030a6\nMOV dword ptr [RSP],ECX\nMOV dword ptr [RSP + 0x4],R8D\nMOV EBX,0x10900\nJMP 0x00402faf\nMOV dword ptr [RSP],ECX\nMOV dword ptr [RSP + 0x4],R8D\nMOV EBX,0x900\nXOR EAX,EAX\nMOV EDI,R15D\nMOV RSI,R14\nMOV EDX,EBX\nCALL 0x00401910\nMOV R12D,EAX\nTEST R12D,R12D\nJS 0x0040305b\nLEA RSI,[RSP + 0x8]\nMOV EDI,R12D\nCALL 0x00409720\nMOV EBX,0x6\nTEST EAX,EAX\nJNZ 0x00403041\nMOV RAX,qword ptr [RBP + 0x8]\nMOV EBX,0x4\nCMP RAX,qword ptr [RSP + 0x10]\nJNZ 0x00403041\nMOV RAX,qword ptr [RBP]\nCMP RAX,qword ptr [RSP + 0x8]\nJNZ 0x00403041\nCMP R13D,-0x1\nJZ 0x0040300d\nMOV EBX,0x2\nCMP dword ptr [RSP + 0x24],R13D\nJNZ 0x00403041\nCMP dword ptr [0xd0 + RSP],-0x1\nJZ 0x00403029\nMOV EBX,0x2\nMOV EAX,dword ptr [0xd0 + RSP]\nCMP dword ptr [RSP + 0x28],EAX\nJNZ 0x00403041\nMOV EDI,R12D\nMOV ESI,dword ptr [RSP]\nMOV EDX,dword ptr [RSP + 0x4]\nCALL 0x00401ba0\nTEST EAX,EAX\nMOV EBX,0x6\nJZ 0x004030ba\nCALL 0x00401800\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV EDI,R12D\nCALL 0x004019c0\nMOV dword ptr [RBP],R14D\nJMP 0x004030a6\nCALL 0x00401800\nMOV RCX,RAX\nCMP dword ptr [RCX],0xd\nJNZ 0x0040309b\nMOV EAX,0xf000\nAND EAX,dword ptr [RBP + 0x18]\nCMP EAX,0x8000\nJNZ 0x0040309b\nOR EBX,0x1\nXOR EAX,EAX\nMOV EDI,R15D\nMOV RSI,R14\nMOV EDX,EBX\nMOV RBX,RCX\nCALL 0x00401910\nMOV RCX,RBX\nMOV R12D,EAX\nTEST R12D,R12D\nJNS 0x00402fca\nXOR EBX,EBX\nCMP dword ptr [RCX],0xd\nSETNZ BL\nADD EBX,0x5\nMOV EAX,EBX\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,R12D\nCALL 0x004019c0\nXOR ECX,ECX\nTEST EAX,EAX\nSETNZ CL\nLEA EBX,[0x2 + RCX*0x4]\nJMP 0x004030a6\n'
p221
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n45 89 cd\n48 89 d5\n49 89 f6\n41 89 ff\n8b 84 24 d0 00 00 00\n44 21 e8\nbb 05 00 00 00\n83 f8 ff\n0f 84 31 01 00 00\n0f b7 45 18\n25 00 f0 00 00\n3d 00 80 00 00\n74 1d\n0f b7 c0\n3d 00 40 00 00\n0f 85 13 01 00 00\n89 0c 24\n44 89 44 24 04\nbb 00 09 01 00\neb 0d\n89 0c 24\n44 89 44 24 04\nbb 00 09 00 00\n31 c0\n44 89 ff\n4c 89 f6\n89 da\ne8 52 e9 ff ff\n41 89 c4\n45 85 e4\n0f 88 91 00 00 00\n48 8d 74 24 08\n44 89 e7\ne8 49 67 00 00\nbb 06 00 00 00\n85 c0\n75 61\n48 8b 45 08\nbb 04 00 00 00\n48 3b 44 24 10\n75 51\n48 8b 45 00\n48 3b 44 24 08\n75 46\n41 83 fd ff\n74 0c\nbb 02 00 00 00\n44 39 6c 24 24\n75 34\n83 bc 24 d0 00 00 00 ff\n74 12\nbb 02 00 00 00\n8b 84 24 d0 00 00 00\n39 44 24 28\n75 18\n44 89 e7\n8b 34 24\n8b 54 24 04\ne8 68 eb ff ff\n85 c0\nbb 06 00 00 00\n74 79\ne8 ba e7 ff ff\n48 89 c5\n44 8b 75 00\n44 89 e7\ne8 6b e9 ff ff\n44 89 75 00\neb 4b\ne8 a0 e7 ff ff\n48 89 c1\n83 39 0d\n75 33\nb8 00 f0 00 00\n23 45 18\n3d 00 80 00 00\n75 24\n83 cb 01\n31 c0\n44 89 ff\n4c 89 f6\n89 da\n48 89 cb\ne8 84 e8 ff ff\n48 89 d9\n41 89 c4\n45 85 e4\n0f 89 2f ff ff ff\n31 db\n83 39 0d\n0f 95 c3\n83 c3 05\n89 d8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n44 89 e7\ne8 fe e8 ff ff\n31 c9\n85 c0\n0f 95 c1\n8d 1c 8d 02 00 00 00\neb d4\n'
p222
S'.text:0000000000402f40\n.text:0000000000402f41\n.text:0000000000402f43\n.text:0000000000402f45\n.text:0000000000402f47\n.text:0000000000402f49\n.text:0000000000402f4a\n.text:0000000000402f51\n.text:0000000000402f54\n.text:0000000000402f57\n.text:0000000000402f5a\n.text:0000000000402f5d\n.text:0000000000402f64\n.text:0000000000402f67\n.text:0000000000402f6c\n.text:0000000000402f6f\n.text:0000000000402f75\n.text:0000000000402f79\n.text:0000000000402f7e\n.text:0000000000402f83\n.text:0000000000402f85\n.text:0000000000402f88\n.text:0000000000402f8d\n.text:0000000000402f93\n.text:0000000000402f96\n.text:0000000000402f9b\n.text:0000000000402fa0\n.text:0000000000402fa2\n.text:0000000000402fa5\n.text:0000000000402faa\n.text:0000000000402faf\n.text:0000000000402fb1\n.text:0000000000402fb4\n.text:0000000000402fb7\n.text:0000000000402fb9\n.text:0000000000402fbe\n.text:0000000000402fc1\n.text:0000000000402fc4\n.text:0000000000402fca\n.text:0000000000402fcf\n.text:0000000000402fd2\n.text:0000000000402fd7\n.text:0000000000402fdc\n.text:0000000000402fde\n.text:0000000000402fe0\n.text:0000000000402fe4\n.text:0000000000402fe9\n.text:0000000000402fee\n.text:0000000000402ff0\n.text:0000000000402ff4\n.text:0000000000402ff9\n.text:0000000000402ffb\n.text:0000000000402fff\n.text:0000000000403001\n.text:0000000000403006\n.text:000000000040300b\n.text:000000000040300d\n.text:0000000000403015\n.text:0000000000403017\n.text:000000000040301c\n.text:0000000000403023\n.text:0000000000403027\n.text:0000000000403029\n.text:000000000040302c\n.text:000000000040302f\n.text:0000000000403033\n.text:0000000000403038\n.text:000000000040303a\n.text:000000000040303f\n.text:0000000000403041\n.text:0000000000403046\n.text:0000000000403049\n.text:000000000040304d\n.text:0000000000403050\n.text:0000000000403055\n.text:0000000000403059\n.text:000000000040305b\n.text:0000000000403060\n.text:0000000000403063\n.text:0000000000403066\n.text:0000000000403068\n.text:000000000040306d\n.text:0000000000403070\n.text:0000000000403075\n.text:0000000000403077\n.text:000000000040307a\n.text:000000000040307c\n.text:000000000040307f\n.text:0000000000403082\n.text:0000000000403084\n.text:0000000000403087\n.text:000000000040308c\n.text:000000000040308f\n.text:0000000000403092\n.text:0000000000403095\n.text:000000000040309b\n.text:000000000040309d\n.text:00000000004030a0\n.text:00000000004030a3\n.text:00000000004030a6\n.text:00000000004030a8\n.text:00000000004030af\n.text:00000000004030b0\n.text:00000000004030b2\n.text:00000000004030b4\n.text:00000000004030b6\n.text:00000000004030b8\n.text:00000000004030b9\n.text:00000000004030ba\n.text:00000000004030bd\n.text:00000000004030c2\n.text:00000000004030c4\n.text:00000000004030c6\n.text:00000000004030c9\n.text:00000000004030d0\n'
p223
tp224
sS'c_toupper'
p225
(S'\n__stdcall c_toupper()\n'
p226
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p227
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p228
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p229
S'.text:0000000000407b70\n.text:0000000000407b73\n.text:0000000000407b76\n.text:0000000000407b79\n.text:0000000000407b7c\n'
p230
tp231
sS'fcntl'
p232
(S'\n__stdcall fcntl(int __fd, int __cmd)\n'
p233
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fcntl(int __fd,int __cmd,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fcntl_0060f070)();\u000a  return iVar1;\u000a}\u000a\u000a
p234
S'JMP qword ptr [0x0060f070]\n'
p235
S'ff 25 fa d7 20 00\n'
p236
S'.plt:0000000000401870\n'
p237
tp238
sS'mbsinit'
p239
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p240
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_0060f250)();\u000a  return iVar1;\u000a}\u000a\u000a
p241
S'JMP qword ptr [0x0060f250]\n'
p242
S'ff 25 1a d6 20 00\n'
p243
S'.plt:0000000000401c30\n'
p244
tp245
sS'enter_dir'
p246
(S'\n__stdcall enter_dir(FTS * fts, FTSENT * ent)\n'
p247
V\u000a_Bool enter_dir(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  _Bool _Var1;\u000a  __dev_t *entry;\u000a  __dev_t *p_Var2;\u000a  undefined uVar3;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) == 0) {\u000a    _Var1 = cycle_check((cycle_check_state *)fts->fts_cycle,ent->fts_statp);\u000a    if (_Var1 == false) {\u000a      return true;\u000a    }\u000a    *(FTSENT **)&ent->fts_cycle = ent;\u000aLAB_00407653:\u000a    uVar3 = 1;\u000a    ent->fts_info = 2;\u000a  }\u000a  else {\u000a    entry = (__dev_t *)malloc(0x18);\u000a    if (entry != (__dev_t *)0x0) {\u000a      *entry = ent->fts_statp[0].st_dev;\u000a      entry[1] = ent->fts_statp[0].st_ino;\u000a      *(FTSENT **)(entry + 2) = ent;\u000a      p_Var2 = (__dev_t *)hash_insert((Hash_table *)fts->fts_cycle,entry);\u000a      if (p_Var2 == entry) {\u000a        return true;\u000a      }\u000a      free(entry);\u000a      if (p_Var2 != (__dev_t *)0x0) {\u000a        ent->fts_cycle = (_ftsent *)p_Var2[2];\u000a        goto LAB_00407653;\u000a      }\u000a    }\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p248
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RSI\nMOV RBP,RDI\nMOVZX EAX,word ptr [RBP + 0x48]\nTEST AX,0x102\nJZ 0x0040763c\nMOV EDI,0x18\nCALL 0x00401aa0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040765c\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [0x80 + R14]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [RBX + 0x10],R14\nMOV RDI,qword ptr [RBP + 0x58]\nMOV RSI,RBX\nCALL 0x00408ad0\nMOV R15,RAX\nMOV BPL,0x1\nCMP R15,RBX\nJZ 0x0040765e\nMOV RDI,RBX\nCALL 0x004017e0\nTEST R15,R15\nJZ 0x0040765c\nMOV RAX,qword ptr [R15 + 0x10]\nMOV qword ptr [R14],RAX\nJMP 0x00407653\nMOV RDI,qword ptr [RBP + 0x58]\nLEA RSI,[R14 + 0x78]\nCALL 0x00407c70\nMOV BPL,0x1\nTEST AL,AL\nJZ 0x0040765e\nMOV qword ptr [R14],R14\nMOV word ptr [R14 + 0x70],0x2\nJMP 0x0040765e\nXOR EBP,EBP\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p249
S'55\n41 57\n41 56\n53\n50\n49 89 f6\n48 89 fd\n0f b7 45 48\n66 a9 02 01\n74 55\nbf 18 00 00 00\ne8 af a4 ff ff\n48 89 c3\n48 85 db\n74 63\n49 8b 46 78\n48 89 03\n49 8b 86 80 00 00 00\n48 89 43 08\n4c 89 73 10\n48 8b 7d 58\n48 89 de\ne8 b5 14 00 00\n49 89 c7\n40 b5 01\n49 39 df\n74 38\n48 89 df\ne8 b2 a1 ff ff\n4d 85 ff\n74 29\n49 8b 47 10\n49 89 06\neb 17\n48 8b 7d 58\n49 8d 76 78\ne8 27 06 00 00\n40 b5 01\n84 c0\n74 0e\n4d 89 36\n66 41 c7 46 70 02 00\neb 02\n31 ed\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p250
S'.text:00000000004075d0\n.text:00000000004075d1\n.text:00000000004075d3\n.text:00000000004075d5\n.text:00000000004075d6\n.text:00000000004075d7\n.text:00000000004075da\n.text:00000000004075dd\n.text:00000000004075e1\n.text:00000000004075e5\n.text:00000000004075e7\n.text:00000000004075ec\n.text:00000000004075f1\n.text:00000000004075f4\n.text:00000000004075f7\n.text:00000000004075f9\n.text:00000000004075fd\n.text:0000000000407600\n.text:0000000000407607\n.text:000000000040760b\n.text:000000000040760f\n.text:0000000000407613\n.text:0000000000407616\n.text:000000000040761b\n.text:000000000040761e\n.text:0000000000407621\n.text:0000000000407624\n.text:0000000000407626\n.text:0000000000407629\n.text:000000000040762e\n.text:0000000000407631\n.text:0000000000407633\n.text:0000000000407637\n.text:000000000040763a\n.text:000000000040763c\n.text:0000000000407640\n.text:0000000000407644\n.text:0000000000407649\n.text:000000000040764c\n.text:000000000040764e\n.text:0000000000407650\n.text:0000000000407653\n.text:000000000040765a\n.text:000000000040765c\n.text:000000000040765e\n.text:0000000000407660\n.text:0000000000407664\n.text:0000000000407665\n.text:0000000000407667\n.text:0000000000407669\n.text:000000000040766a\n'
p251
tp252
sS'dcgettext'
p253
(S'\n__stdcall dcgettext()\n'
p254
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_0060f0a0)();\u000a  return;\u000a}\u000a\u000a
p255
S'JMP qword ptr [0x0060f0a0]\n'
p256
S'ff 25 ca d7 20 00\n'
p257
S'.plt:00000000004018d0\n'
p258
tp259
sS'set_cloexec_flag'
p260
(S'\n__stdcall set_cloexec_flag()\n'
p261
V\u000aint set_cloexec_flag(void)\u000a\u000a{\u000a  uint uVar1;\u000a  uint uVar2;\u000a  int iVar3;\u000a  char in_SIL;\u000a  ulong in_RDI;\u000a  \u000a  iVar3 = 0;\u000a  uVar2 = rpl_fcntl(in_RDI,1,0);\u000a  if ((int)uVar2 < 0) {\u000a    iVar3 = -1;\u000a  }\u000a  else {\u000a    uVar1 = uVar2 & 0xfffffffe;\u000a    if (in_SIL != 0) {\u000a      uVar1 = uVar2 | 1;\u000a    }\u000a    if ((uVar2 != uVar1) && (iVar3 = rpl_fcntl(in_RDI & 0xffffffff,2), iVar3 != -1)) {\u000a      iVar3 = 0;\u000a    }\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p262
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV EBX,EDI\nXOR EBP,EBP\nMOV ESI,0x1\nXOR EDX,EDX\nXOR EAX,EAX\nCALL 0x00409300\nTEST EAX,EAX\nJS 0x00407bc9\nMOV ECX,EAX\nOR ECX,0x1\nMOV EDX,EAX\nAND EDX,0xfffffffe\nTEST R14B,R14B\nCMOVNZ EDX,ECX\nCMP EAX,EDX\nJZ 0x00407bce\nXOR EBP,EBP\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00409300\nCMP EAX,-0x1\nCMOVNZ EAX,EBP\nJMP 0x00407bd0\nMOV EBP,0xffffffff\nMOV EAX,EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p263
S'55\n41 56\n53\n41 89 f6\n89 fb\n31 ed\nbe 01 00 00 00\n31 d2\n31 c0\ne8 67 17 00 00\n85 c0\n78 2c\n89 c1\n83 c9 01\n89 c2\n83 e2 fe\n45 84 f6\n0f 45 d1\n39 d0\n74 1d\n31 ed\nbe 02 00 00 00\n31 c0\n89 df\ne8 3f 17 00 00\n83 f8 ff\n0f 45 c5\neb 07\nbd ff ff ff ff\n89 e8\n5b\n41 5e\n5d\nc3\n'
p264
S'.text:0000000000407b80\n.text:0000000000407b81\n.text:0000000000407b83\n.text:0000000000407b84\n.text:0000000000407b87\n.text:0000000000407b89\n.text:0000000000407b8b\n.text:0000000000407b90\n.text:0000000000407b92\n.text:0000000000407b94\n.text:0000000000407b99\n.text:0000000000407b9b\n.text:0000000000407b9d\n.text:0000000000407b9f\n.text:0000000000407ba2\n.text:0000000000407ba4\n.text:0000000000407ba7\n.text:0000000000407baa\n.text:0000000000407bad\n.text:0000000000407baf\n.text:0000000000407bb1\n.text:0000000000407bb3\n.text:0000000000407bb8\n.text:0000000000407bba\n.text:0000000000407bbc\n.text:0000000000407bc1\n.text:0000000000407bc4\n.text:0000000000407bc7\n.text:0000000000407bc9\n.text:0000000000407bce\n.text:0000000000407bd0\n.text:0000000000407bd1\n.text:0000000000407bd3\n.text:0000000000407bd4\n'
p265
tp266
sS'quotearg_free'
p267
(S'\n__stdcall quotearg_free()\n'
p268
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p269
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x0060f288]\nCMP dword ptr [0x0060f290],0x2\nJC 0x0040440a\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x004017e0\nINC RBX\nMOV EAX,dword ptr [0x0060f290]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x004043f0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x60f3a0\nCMP RDI,RAX\nJZ 0x00404433\nCALL 0x004017e0\nMOV qword ptr [0x0060f298],0x100\nMOV qword ptr [0x0060f2a0],0x60f3a0\nMOV EAX,0x60f298\nCMP R14,RAX\nJZ 0x00404450\nMOV RDI,R14\nCALL 0x004017e0\nMOV qword ptr [0x0060f288],0x60f298\nMOV dword ptr [0x0060f290],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p270
S'41 57\n41 56\n53\n4c 8b 35 ac ae 20 00\n83 3d ad ae 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 e8 d3 ff ff\n48 ff c3\n8b 05 8f ae 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 a0 f3 60 00\n48 39 c7\n74 1b\ne8 c3 d3 ff ff\n48 c7 05 70 ae 20 00 00 01 00 00\n48 c7 05 6d ae 20 00 a0 f3 60 00\nb8 98 f2 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 9b d3 ff ff\n48 c7 05 38 ae 20 00 98 f2 60 00\nc7 05 36 ae 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p271
S'.text:00000000004043d0\n.text:00000000004043d2\n.text:00000000004043d4\n.text:00000000004043d5\n.text:00000000004043dc\n.text:00000000004043e3\n.text:00000000004043e5\n.text:00000000004043e9\n.text:00000000004043ee\n.text:00000000004043f0\n.text:00000000004043f3\n.text:00000000004043f8\n.text:00000000004043fb\n.text:0000000000404401\n.text:0000000000404405\n.text:0000000000404408\n.text:000000000040440a\n.text:000000000040440e\n.text:0000000000404413\n.text:0000000000404416\n.text:0000000000404418\n.text:000000000040441d\n.text:0000000000404428\n.text:0000000000404433\n.text:0000000000404438\n.text:000000000040443b\n.text:000000000040443d\n.text:0000000000404440\n.text:0000000000404445\n.text:0000000000404450\n.text:000000000040445a\n.text:000000000040445b\n.text:000000000040445d\n.text:000000000040445f\n'
p272
tp273
sS'dirent_inode_sort_may_be_useful'
p274
(S'\n__stdcall dirent_inode_sort_may_be_useful()\n'
p275
V\u000a_Bool dirent_inode_sort_may_be_useful(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int iVar2;\u000a  int __fildes;\u000a  statfs local_78;\u000a  \u000a  iVar2 = fstatfs(__fildes,&local_78);\u000a  uVar1 = 1;\u000a  if (iVar2 == 0) {\u000a    uVar1 = 0;\u000a    if ((local_78.f_type != 0x6969) && (local_78.f_type != 0x1021994)) {\u000a      uVar1 = 1;\u000a    }\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p276
S'SUB RSP,0x78\nMOV RSI,RSP\nCALL 0x00401bd0\nMOV ECX,EAX\nMOV AL,0x1\nTEST ECX,ECX\nJZ 0x004079c9\nADD RSP,0x78\nRET\nXOR EAX,EAX\nMOV RCX,qword ptr [RSP]\nCMP RCX,0x6969\nJZ 0x004079c4\nCMP RCX,0x1021994\nJZ 0x004079c4\nMOV AL,0x1\nJMP 0x004079c4\n'
p277
S'48 83 ec 78\n48 89 e6\ne8 14 a2 ff ff\n89 c1\nb0 01\n85 c9\n74 05\n48 83 c4 78\nc3\n31 c0\n48 8b 0c 24\n48 81 f9 69 69 00 00\n74 ec\n48 81 f9 94 19 02 01\n74 e3\nb0 01\neb df\n'
p278
S'.text:00000000004079b0\n.text:00000000004079b4\n.text:00000000004079b7\n.text:00000000004079bc\n.text:00000000004079be\n.text:00000000004079c0\n.text:00000000004079c2\n.text:00000000004079c4\n.text:00000000004079c8\n.text:00000000004079c9\n.text:00000000004079cb\n.text:00000000004079cf\n.text:00000000004079d6\n.text:00000000004079d8\n.text:00000000004079df\n.text:00000000004079e1\n.text:00000000004079e3\n'
p279
tp280
sS'quotearg_mem'
p281
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p282
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p283
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00404630\n'
p284
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p285
S'.text:0000000000404650\n.text:0000000000404653\n.text:0000000000404656\n.text:0000000000404658\n.text:000000000040465b\n.text:000000000040465e\n'
p286
tp287
sS'rotl32'
p288
(S'\n__stdcall rotl32()\n'
p289
V\u000auint32_t rotl32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI << bVar1 | in_EDI >> 0x20 - bVar1);\u000a}\u000a\u000a
p290
S'MOV ECX,ESI\nROL EDI,CL\nMOV EAX,EDI\nRET\n'
p291
S'89 f1\nd3 c7\n89 f8\nc3\n'
p292
S'.text:00000000004095a0\n.text:00000000004095a2\n.text:00000000004095a4\n.text:00000000004095a6\n'
p293
tp294
sS'deregister_tm_clones'
p295
(S'\n__stdcall deregister_tm_clones()\n'
p296
V\u000a/* WARNING: Removing unreachable block (ram,0x00401ca5) */\u000a/* WARNING: Removing unreachable block (ram,0x00401caf) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p297
S'MOV EAX,0x60f2e7\nPUSH RBP\nSUB RAX,0x60f2e0\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x00401cc0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401cc0\nPOP RBP\nMOV EDI,0x60f2e0\nJMP RAX\nPOP RBP\nRET\n'
p298
S'b8 e7 f2 60 00\n55\n48 2d e0 f2 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf e0 f2 60 00\nff e0\n5d\nc3\n'
p299
S'.text:0000000000401c90\n.text:0000000000401c95\n.text:0000000000401c96\n.text:0000000000401c9c\n.text:0000000000401ca0\n.text:0000000000401ca3\n.text:0000000000401ca5\n.text:0000000000401caa\n.text:0000000000401cad\n.text:0000000000401caf\n.text:0000000000401cb0\n.text:0000000000401cb5\n.text:0000000000401cc0\n.text:0000000000401cc1\n'
p300
tp301
sS'quotearg_custom'
p302
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p303
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p304
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404870\n'
p305
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p306
S'.text:00000000004048f0\n.text:00000000004048f3\n.text:00000000004048f6\n.text:00000000004048f9\n.text:00000000004048fb\n.text:00000000004048fe\n.text:0000000000404901\n.text:0000000000404904\n'
p307
tp308
sS'fts_palloc'
p309
(S'\n__stdcall fts_palloc(FTS * sp, size_t more)\n'
p310
V\u000a_Bool fts_palloc(FTS *sp,size_t more)\u000a\u000a{\u000a  int *piVar1;\u000a  char *pcVar2;\u000a  size_t __size;\u000a  \u000a  __size = more + 0x100 + sp->fts_pathlen;\u000a  if (CARRY8(more + 0x100,sp->fts_pathlen)) {\u000a    free(sp->fts_path);\u000a    sp->fts_path = (char *)0x0;\u000a    piVar1 = __errno_location();\u000a    *piVar1 = 0x24;\u000a  }\u000a  else {\u000a    sp->fts_pathlen = __size;\u000a    pcVar2 = (char *)realloc(sp->fts_path,__size);\u000a    if (pcVar2 != (char *)0x0) {\u000a      sp->fts_path = pcVar2;\u000a      return true;\u000a    }\u000a    free(sp->fts_path);\u000a    sp->fts_path = (char *)0x0;\u000a  }\u000a  return false;\u000a}\u000a\u000a
p311
S'PUSH RBX\nMOV RBX,RDI\nADD RSI,0x100\nADD RSI,qword ptr [RBX + 0x30]\nMOV RDI,qword ptr [RBX + 0x20]\nJNC 0x00405f7f\nCALL 0x004017e0\nMOV qword ptr [RBX + 0x20],0x0\nCALL 0x00401800\nMOV dword ptr [RAX],0x24\nJMP 0x00405fa6\nMOV qword ptr [RBX + 0x30],RSI\nCALL 0x00401b20\nTEST RAX,RAX\nJZ 0x00405f95\nMOV qword ptr [RBX + 0x20],RAX\nMOV AL,0x1\nJMP 0x00405fa8\nMOV RDI,qword ptr [RBX + 0x20]\nCALL 0x004017e0\nMOV qword ptr [RBX + 0x20],0x0\nXOR EAX,EAX\nPOP RBX\nRET\n'
p312
S'53\n48 89 fb\n48 81 c6 00 01 00 00\n48 03 73 30\n48 8b 7b 20\n73 1a\ne8 76 b8 ff ff\n48 c7 43 20 00 00 00 00\ne8 89 b8 ff ff\nc7 00 24 00 00 00\neb 27\n48 89 73 30\ne8 98 bb ff ff\n48 85 c0\n74 08\n48 89 43 20\nb0 01\neb 13\n48 8b 7b 20\ne8 42 b8 ff ff\n48 c7 43 20 00 00 00 00\n31 c0\n5b\nc3\n'
p313
S'.text:0000000000405f50\n.text:0000000000405f51\n.text:0000000000405f54\n.text:0000000000405f5b\n.text:0000000000405f5f\n.text:0000000000405f63\n.text:0000000000405f65\n.text:0000000000405f6a\n.text:0000000000405f72\n.text:0000000000405f77\n.text:0000000000405f7d\n.text:0000000000405f7f\n.text:0000000000405f83\n.text:0000000000405f88\n.text:0000000000405f8b\n.text:0000000000405f8d\n.text:0000000000405f91\n.text:0000000000405f93\n.text:0000000000405f95\n.text:0000000000405f99\n.text:0000000000405f9e\n.text:0000000000405fa6\n.text:0000000000405fa8\n.text:0000000000405fa9\n'
p314
tp315
sS'free'
p316
(S'\n__stdcall free(void * __ptr)\n'
p317
V\u000a/* WARNING: Switch with 1 destination removed at 0x004017e0 */\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x0060f028]\n'
p319
S'ff 25 42 d8 20 00\n'
p320
S'.plt:00000000004017e0\n'
p321
tp322
sS'close'
p323
(S'\n__stdcall close(int __fd)\n'
p324
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_0060f118)();\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'JMP qword ptr [0x0060f118]\n'
p326
S'ff 25 52 d7 20 00\n'
p327
S'.plt:00000000004019c0\n'
p328
tp329
sS'getenv'
p330
(S'\n__stdcall getenv(char * __name)\n'
p331
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_0060f020)();\u000a  return pcVar1;\u000a}\u000a\u000a
p332
S'JMP qword ptr [0x0060f020]\n'
p333
S'ff 25 4a d8 20 00\n'
p334
S'.plt:00000000004017d0\n'
p335
tp336
sS'LCO_hash'
p337
(S'\n__stdcall LCO_hash(void * x, size_t table_size)\n'
p338
V\u000asize_t LCO_hash(void *x,size_t table_size)\u000a\u000a{\u000a  return *(ulong *)x % table_size;\u000a}\u000a\u000a
p339
S'MOV RAX,qword ptr [RDI]\nXOR EDX,EDX\nDIV RSI\nMOV RAX,RDX\nRET\n'
p340
S'48 8b 07\n31 d2\n48 f7 f6\n48 89 d0\nc3\n'
p341
S'.text:0000000000407850\n.text:0000000000407853\n.text:0000000000407855\n.text:0000000000407858\n.text:000000000040785b\n'
p342
tp343
sS'stat'
p344
(S'\n__stdcall stat(char * __file, stat * __buf)\n'
p345
V\u000aint stat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___xstat_0060f178)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p346
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00401a80\n'
p347
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 60 83 ff ff\n'
p348
S'.text:0000000000409710\n.text:0000000000409713\n.text:0000000000409716\n.text:000000000040971b\n'
p349
tp350
sS'rpl_fseeko'
p351
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p352
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_0060f200)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p353
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x00409538\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x00409538\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x0040954a\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00401b90\nMOV RDI,RBX\nCALL 0x00401a70\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x00401980\nCMP RAX,-0x1\nJZ 0x00409573\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00409578\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p354
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 46 86 ff ff\n48 89 df\ne8 1e 85 ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 21 84 ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p355
S'.text:0000000000409510\n.text:0000000000409511\n.text:0000000000409513\n.text:0000000000409514\n.text:0000000000409517\n.text:000000000040951a\n.text:000000000040951d\n.text:0000000000409521\n.text:0000000000409525\n.text:0000000000409527\n.text:000000000040952b\n.text:000000000040952f\n.text:0000000000409531\n.text:0000000000409536\n.text:0000000000409538\n.text:000000000040953b\n.text:000000000040953e\n.text:0000000000409541\n.text:0000000000409542\n.text:0000000000409544\n.text:0000000000409545\n.text:000000000040954a\n.text:000000000040954d\n.text:0000000000409552\n.text:0000000000409554\n.text:0000000000409557\n.text:000000000040955a\n.text:000000000040955f\n.text:0000000000409563\n.text:0000000000409565\n.text:0000000000409568\n.text:000000000040956f\n.text:0000000000409571\n.text:0000000000409573\n.text:0000000000409578\n.text:0000000000409579\n.text:000000000040957b\n.text:000000000040957c\n'
p356
tp357
sS'quote_n_mem'
p358
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p359
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p360
S'MOV ECX,0x60f2a8\nJMP 0x00404470\n'
p361
S'b9 a8 f2 60 00\ne9 36 fb ff ff\n'
p362
S'.text:0000000000404930\n.text:0000000000404935\n'
p363
tp364
sS'xstrdup'
p365
(S'\n__stdcall xstrdup(char * string)\n'
p366
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p367
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004018f0\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00405780\n'
p368
S'53\n48 89 fb\ne8 37 c1 ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p369
S'.text:00000000004057b0\n.text:00000000004057b1\n.text:00000000004057b4\n.text:00000000004057b9\n.text:00000000004057bd\n.text:00000000004057c0\n.text:00000000004057c1\n'
p370
tp371
sS'c_ispunct'
p372
(S'\n__stdcall c_ispunct()\n'
p373
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p374
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00407b02\nMOV AL,0x1\nJMP qword ptr [0x40ba00 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p375
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 00 ba 40 00\nc3\n31 c0\nc3\n'
p376
S'.text:0000000000407af0\n.text:0000000000407af3\n.text:0000000000407af6\n.text:0000000000407af8\n.text:0000000000407afa\n.text:0000000000407b01\n.text:0000000000407b02\n.text:0000000000407b04\n'
p377
tp378
sS'rotr8'
p379
(S'\n__stdcall rotr8()\n'
p380
V\u000auint8_t rotr8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI << (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI >> ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p381
S'MOV EAX,EDI\nMOV ECX,ESI\nSHR EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHL EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p382
S'89 f8\n89 f1\nd3 e8\nb9 08 00 00 00\n29 f1\nd3 e7\n09 c7\n89 f8\nc3\n'
p383
S'.text:0000000000409640\n.text:0000000000409642\n.text:0000000000409644\n.text:0000000000409646\n.text:000000000040964b\n.text:000000000040964d\n.text:000000000040964f\n.text:0000000000409651\n.text:0000000000409653\n'
p384
tp385
sS'free_dir'
p386
(S'\n__stdcall free_dir(FTS * sp)\n'
p387
V\u000avoid free_dir(FTS *sp)\u000a\u000a{\u000a  if ((*(ushort *)&sp->fts_options & 0x102) == 0) {\u000a    free((void *)sp->fts_cycle);\u000a    return;\u000a  }\u000a  if ((Hash_table *)sp->fts_cycle != (Hash_table *)0x0) {\u000a    hash_free((Hash_table *)sp->fts_cycle);\u000a    return;\u000a  }\u000a  return;\u000a}\u000a\u000a
p388
S'MOVZX EAX,word ptr [RDI + 0x48]\nTEST AX,0x102\nJZ 0x00406538\nMOV RDI,qword ptr [RDI + 0x58]\nTEST RDI,RDI\nJZ 0x00406541\nJMP 0x004084d0\nMOV RDI,qword ptr [RDI + 0x58]\nJMP 0x004017e0\nRET\n'
p389
S'0f b7 47 48\n66 a9 02 01\n74 0e\n48 8b 7f 58\n48 85 ff\n74 0e\ne9 98 1f 00 00\n48 8b 7f 58\ne9 9f b2 ff ff\nc3\n'
p390
S'.text:0000000000406520\n.text:0000000000406524\n.text:0000000000406528\n.text:000000000040652a\n.text:000000000040652e\n.text:0000000000406531\n.text:0000000000406533\n.text:0000000000406538\n.text:000000000040653c\n.text:0000000000406541\n'
p391
tp392
sS'fstat'
p393
(S'\n__stdcall fstat(int __fd, stat * __buf)\n'
p394
V\u000aint fstat(int __fd,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstat_0060f1a8)(1,(ulong)(uint)__fd,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p395
S'MOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00401ae0\n'
p396
S'48 89 f2\n89 fe\nbf 01 00 00 00\ne9 b1 83 ff ff\n'
p397
S'.text:0000000000409720\n.text:0000000000409723\n.text:0000000000409725\n.text:000000000040972a\n'
p398
tp399
sS'fdopendir'
p400
(S'\n__stdcall fdopendir(int __fd)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aDIR * fdopendir(int __fd)\u000a\u000a{\u000a  DIR *pDVar1;\u000a  \u000a  pDVar1 = (DIR *)(*(code *)PTR_fdopendir_0060f210)();\u000a  return pDVar1;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x0060f210]\n'
p403
S'ff 25 5a d6 20 00\n'
p404
S'.plt:0000000000401bb0\n'
p405
tp406
sS'leaf_optimization_applies'
p407
(S'\n__stdcall leaf_optimization_applies()\n'
p408
V\u000a_Bool leaf_optimization_applies(void)\u000a\u000a{\u000a  undefined uVar1;\u000a  int iVar2;\u000a  int __fildes;\u000a  statfs local_78;\u000a  \u000a  iVar2 = fstatfs(__fildes,&local_78);\u000a  if ((iVar2 != 0) ||\u000a     ((uVar1 = 1, local_78.f_type != 0x52654973 && (local_78.f_type != 0x58465342)))) {\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p409
S'SUB RSP,0x78\nMOV RSI,RSP\nCALL 0x00401bd0\nTEST EAX,EAX\nJZ 0x00407887\nXOR EAX,EAX\nADD RSP,0x78\nRET\nMOV AL,0x1\nMOV RCX,qword ptr [RSP]\nCMP RCX,0x52654973\nJZ 0x00407882\nCMP RCX,0x58465342\nJZ 0x00407882\nJMP 0x00407880\n'
p410
S'48 83 ec 78\n48 89 e6\ne8 54 a3 ff ff\n85 c0\n74 07\n31 c0\n48 83 c4 78\nc3\nb0 01\n48 8b 0c 24\n48 81 f9 73 49 65 52\n74 ec\n48 81 f9 42 53 46 58\n74 e3\neb df\n'
p411
S'.text:0000000000407870\n.text:0000000000407874\n.text:0000000000407877\n.text:000000000040787c\n.text:000000000040787e\n.text:0000000000407880\n.text:0000000000407882\n.text:0000000000407886\n.text:0000000000407887\n.text:0000000000407889\n.text:000000000040788d\n.text:0000000000407894\n.text:0000000000407896\n.text:000000000040789d\n.text:000000000040789f\n'
p412
tp413
sS'is_prime'
p414
(S'\n__stdcall is_prime(size_t candidate)\n'
p415
V\u000a_Bool is_prime(size_t candidate)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  long lVar3;\u000a  bool bVar4;\u000a  \u000a  bVar4 = candidate != (candidate / 3) * 3;\u000a  if ((9 < candidate) && (bVar4)) {\u000a    uVar2 = 9;\u000a    lVar3 = 0x10;\u000a    uVar1 = 5;\u000a    do {\u000a      uVar2 = uVar2 + lVar3;\u000a      bVar4 = candidate % uVar1 != 0;\u000a      if (candidate <= uVar2) {\u000a        return (_Bool)bVar4;\u000a      }\u000a      lVar3 = lVar3 + 8;\u000a      uVar1 = uVar1 + 2;\u000a    } while (bVar4);\u000a  }\u000a  return (_Bool)bVar4;\u000a}\u000a\u000a
p416
S'MOV R8,RDI\nMOV RCX,-0x5555555555555555\nMOV RAX,R8\nMUL RCX\nSHR RDX,1\nLEA RAX,[RDX + RDX*0x2]\nCMP R8,RAX\nSETNZ AL\nSETZ CL\nCMP R8,0xa\nJC 0x00408d55\nTEST CL,CL\nJNZ 0x00408d55\nMOV ESI,0x9\nMOV EDI,0x10\nMOV ECX,0x5\nNOP dword ptr [RAX]\nADD RSI,RDI\nXOR EDX,EDX\nMOV RAX,R8\nDIV RCX\nTEST RDX,RDX\nSETNZ AL\nSETZ DL\nCMP RSI,R8\nJNC 0x00408d55\nADD RDI,0x8\nADD RCX,0x2\nTEST DL,DL\nJZ 0x00408d30\nRET\n'
p417
S'49 89 f8\n48 b9 ab aa aa aa aa aa aa aa\n4c 89 c0\n48 f7 e1\n48 d1 ea\n48 8d 04 52\n49 39 c0\n0f 95 c0\n0f 94 c1\n49 83 f8 0a\n72 3c\n84 c9\n75 38\nbe 09 00 00 00\nbf 10 00 00 00\nb9 05 00 00 00\n0f 1f 40 00\n48 01 fe\n31 d2\n4c 89 c0\n48 f7 f1\n48 85 d2\n0f 95 c0\n0f 94 c2\n4c 39 c6\n73 0c\n48 83 c7 08\n48 83 c1 02\n84 d2\n74 db\nc3\n'
p418
S'.text:0000000000408cf0\n.text:0000000000408cf3\n.text:0000000000408cfd\n.text:0000000000408d00\n.text:0000000000408d03\n.text:0000000000408d06\n.text:0000000000408d0a\n.text:0000000000408d0d\n.text:0000000000408d10\n.text:0000000000408d13\n.text:0000000000408d17\n.text:0000000000408d19\n.text:0000000000408d1b\n.text:0000000000408d1d\n.text:0000000000408d22\n.text:0000000000408d27\n.text:0000000000408d2c\n.text:0000000000408d30\n.text:0000000000408d33\n.text:0000000000408d35\n.text:0000000000408d38\n.text:0000000000408d3b\n.text:0000000000408d3e\n.text:0000000000408d41\n.text:0000000000408d44\n.text:0000000000408d47\n.text:0000000000408d49\n.text:0000000000408d4d\n.text:0000000000408d51\n.text:0000000000408d53\n.text:0000000000408d55\n'
p419
tp420
sS'chopt_init'
p421
(S'\n__stdcall chopt_init(Chown_option * chopt)\n'
p422
V\u000avoid chopt_init(Chown_option *chopt)\u000a\u000a{\u000a  chopt->verbosity = V_off;\u000a  chopt->root_dev_ino = (dev_ino *)0x0;\u000a  chopt->affect_symlink_referent = true;\u000a  chopt->recurse = false;\u000a  chopt->force_silent = false;\u000a  *(undefined4 *)&chopt->user_name = 0;\u000a  *(undefined4 *)((long)&chopt->user_name + 4) = 0;\u000a  *(undefined4 *)&chopt->group_name = 0;\u000a  *(undefined4 *)((long)&chopt->group_name + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p423
S'MOV dword ptr [RDI],0x2\nMOV qword ptr [RDI + 0x8],0x0\nMOV byte ptr [RDI + 0x10],0x1\nMOV byte ptr [RDI + 0x4],0x0\nMOV byte ptr [RDI + 0x11],0x0\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RDI + 0x18],XMM0\nRET\n'
p424
S'c7 07 02 00 00 00\n48 c7 47 08 00 00 00 00\nc6 47 10 01\nc6 47 04 00\nc6 47 11 00\n0f 57 c0\n0f 11 47 18\nc3\n'
p425
S'.text:0000000000402560\n.text:0000000000402566\n.text:000000000040256e\n.text:0000000000402572\n.text:0000000000402576\n.text:000000000040257a\n.text:000000000040257d\n.text:0000000000402581\n'
p426
tp427
sS'i_ring_push'
p428
(S'\n__stdcall i_ring_push(I_ring * ir)\n'
p429
V\u000aint i_ring_push(I_ring *ir)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int in_ESI;\u000a  \u000a  uVar2 = (uint)(ir->ir_empty ^ 1) + ir->ir_front & 3;\u000a  iVar1 = ir->ir_data[(ulong)uVar2];\u000a  ir->ir_data[(ulong)uVar2] = in_ESI;\u000a  ir->ir_front = uVar2;\u000a  if (uVar2 == ir->ir_back) {\u000a    ir->ir_back = (uint)(ir->ir_empty ^ 1) + ir->ir_back & 3;\u000a  }\u000a  ir->ir_empty = false;\u000a  return iVar1;\u000a}\u000a\u000a
p430
S'MOV AL,byte ptr [RDI + 0x1c]\nXOR AL,0x1\nMOVZX EDX,AL\nADD EDX,dword ptr [RDI + 0x14]\nAND EDX,0x3\nMOV EAX,dword ptr [RDI + RDX*0x4]\nMOV dword ptr [RDI + RDX*0x4],ESI\nMOV dword ptr [RDI + 0x14],EDX\nMOV ECX,dword ptr [RDI + 0x18]\nCMP EDX,ECX\nJNZ 0x00408ddf\nMOV DL,byte ptr [RDI + 0x1c]\nXOR DL,0x1\nMOVZX EDX,DL\nADD EDX,ECX\nAND EDX,0x3\nMOV dword ptr [RDI + 0x18],EDX\nMOV byte ptr [RDI + 0x1c],0x0\nRET\n'
p431
S'8a 47 1c\n34 01\n0f b6 d0\n03 57 14\n83 e2 03\n8b 04 97\n89 34 97\n89 57 14\n8b 4f 18\n39 ca\n75 11\n8a 57 1c\n80 f2 01\n0f b6 d2\n01 ca\n83 e2 03\n89 57 18\nc6 47 1c 00\nc3\n'
p432
S'.text:0000000000408db0\n.text:0000000000408db3\n.text:0000000000408db5\n.text:0000000000408db8\n.text:0000000000408dbb\n.text:0000000000408dbe\n.text:0000000000408dc1\n.text:0000000000408dc4\n.text:0000000000408dc7\n.text:0000000000408dca\n.text:0000000000408dcc\n.text:0000000000408dce\n.text:0000000000408dd1\n.text:0000000000408dd4\n.text:0000000000408dd7\n.text:0000000000408dd9\n.text:0000000000408ddc\n.text:0000000000408ddf\n.text:0000000000408de3\n'
p433
tp434
sS'fscanf'
p435
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_0060f110)();\u000a  return iVar1;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x0060f110]\n'
p438
S'ff 25 5a d7 20 00\n'
p439
S'.plt:00000000004019b0\n'
p440
tp441
sS'memcpy'
p442
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p443
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_0060f160)();\u000a  return pvVar1;\u000a}\u000a\u000a
p444
S'JMP qword ptr [0x0060f160]\n'
p445
S'ff 25 0a d7 20 00\n'
p446
S'.plt:0000000000401a50\n'
p447
tp448
sS'close_stdout_set_ignore_EPIPE'
p449
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p450
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p451
S'MOV byte ptr [0x0060f350],DIL\nRET\n'
p452
S'40 88 3d 29 c0 20 00\nc3\n'
p453
S'.text:0000000000403320\n.text:0000000000403327\n'
p454
tp455
sS'hash_get_n_buckets_used'
p456
(S'\n__stdcall hash_get_n_buckets_used(Hash_table * table)\n'
p457
V\u000asize_t hash_get_n_buckets_used(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets_used;\u000a}\u000a\u000a
p458
S'MOV RAX,qword ptr [RDI + 0x18]\nRET\n'
p459
S'48 8b 47 18\nc3\n'
p460
S'.text:0000000000407de0\n.text:0000000000407de4\n'
p461
tp462
sS'iswprint'
p463
(S'\n__stdcall iswprint(wint_t __wc)\n'
p464
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_0060f258)();\u000a  return iVar1;\u000a}\u000a\u000a
p465
S'JMP qword ptr [0x0060f258]\n'
p466
S'ff 25 12 d6 20 00\n'
p467
S'.plt:0000000000401c40\n'
p468
tp469
sS'openat_safer'
p470
(S'\n__stdcall openat_safer(char * file)\n'
p471
V\u000a/* WARNING: Removing unreachable block (ram,0x004091f8) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff60 : 0x00409206 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint openat_safer(char *file,...)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  uint __oflag;\u000a  char *__file;\u000a  va_list ap;\u000a  uint local_a0;\u000a  \u000a  uVar2 = 0;\u000a  if ((__oflag & 0x40) != 0) {\u000a    uVar2 = (ulong)local_a0;\u000a  }\u000a  openat((int)file,__file,__oflag,uVar2);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p472
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x004091a2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nXOR ECX,ECX\nTEST DL,0x40\nJZ 0x00409208\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x18\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x004091f8\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x00409206\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV ECX,dword ptr [RAX]\nXOR EAX,EAX\nCALL 0x00401910\nMOV EDI,EAX\nCALL 0x00409230\nADD RSP,0xd8\nRET\n'
p473
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n31 c9\nf6 c2 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 18 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 08\n31 c0\ne8 01 87 ff ff\n89 c7\ne8 1a 00 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p474
S'.text:0000000000409160\n.text:0000000000409167\n.text:0000000000409169\n.text:000000000040916b\n.text:0000000000409170\n.text:0000000000409175\n.text:000000000040917a\n.text:0000000000409182\n.text:000000000040918a\n.text:0000000000409192\n.text:000000000040919a\n.text:00000000004091a2\n.text:00000000004091a7\n.text:00000000004091ac\n.text:00000000004091b1\n.text:00000000004091b3\n.text:00000000004091b6\n.text:00000000004091b8\n.text:00000000004091bd\n.text:00000000004091c2\n.text:00000000004091ca\n.text:00000000004091cf\n.text:00000000004091d7\n.text:00000000004091de\n.text:00000000004091e2\n.text:00000000004091e6\n.text:00000000004091e8\n.text:00000000004091eb\n.text:00000000004091f0\n.text:00000000004091f3\n.text:00000000004091f6\n.text:00000000004091f8\n.text:00000000004091fd\n.text:0000000000409201\n.text:0000000000409206\n.text:0000000000409208\n.text:000000000040920a\n.text:000000000040920f\n.text:0000000000409211\n.text:0000000000409216\n.text:000000000040921d\n'
p475
tp476
sS'c_isspace'
p477
(S'\n__stdcall c_isspace()\n'
p478
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p479
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00407b25\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p480
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p481
S'.text:0000000000407b10\n.text:0000000000407b13\n.text:0000000000407b16\n.text:0000000000407b18\n.text:0000000000407b1d\n.text:0000000000407b1f\n.text:0000000000407b21\n.text:0000000000407b24\n.text:0000000000407b25\n.text:0000000000407b27\n'
p482
tp483
sS'open'
p484
(S'\n__stdcall open(char * __file, int __oflag)\n'
p485
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_0060f1f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p486
S'JMP qword ptr [0x0060f1f8]\n'
p487
S'ff 25 72 d6 20 00\n'
p488
S'.plt:0000000000401b80\n'
p489
tp490
sS'quotearg_n_custom_mem'
p491
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p492
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p493
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x0060f390]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x0060f380]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f370]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x0060f360]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004035e0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404470\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p494
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 f7 aa 20 00\n48 89 44 24 30\n0f 10 05 db aa 20 00\n0f 29 44 24 20\n0f 10 05 bf aa 20 00\n0f 29 44 24 10\n0f 10 05 a3 aa 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p495
S'.text:0000000000404880\n.text:0000000000404881\n.text:0000000000404883\n.text:0000000000404885\n.text:0000000000404886\n.text:000000000040488a\n.text:000000000040488d\n.text:0000000000404890\n.text:0000000000404892\n.text:0000000000404899\n.text:000000000040489e\n.text:00000000004048a5\n.text:00000000004048aa\n.text:00000000004048b1\n.text:00000000004048b6\n.text:00000000004048bd\n.text:00000000004048c1\n.text:00000000004048c4\n.text:00000000004048c7\n.text:00000000004048cc\n.text:00000000004048ce\n.text:00000000004048d1\n.text:00000000004048d4\n.text:00000000004048d7\n.text:00000000004048dc\n.text:00000000004048e0\n.text:00000000004048e1\n.text:00000000004048e3\n.text:00000000004048e5\n.text:00000000004048e6\n'
p496
tp497
sS'rotl16'
p498
(S'\n__stdcall rotl16()\n'
p499
V\u000auint16_t rotl16(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint16_t)\u000a         ((ushort)(in_EDI >> (0x10 - (byte)in_ESI & 0x1f)) |\u000a         (ushort)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p500
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x10\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p501
S'89 f8\n89 f1\nd3 e0\nb9 10 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p502
S'.text:00000000004095e0\n.text:00000000004095e2\n.text:00000000004095e4\n.text:00000000004095e6\n.text:00000000004095eb\n.text:00000000004095ed\n.text:00000000004095ef\n.text:00000000004095f1\n.text:00000000004095f3\n'
p503
tp504
sS'fts_compar'
p505
(S'\n__stdcall fts_compar(void * a, void * b)\n'
p506
V\u000aint fts_compar(void *a,void *b)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (**(code **)(*(long *)(*(long *)a + 0x50) + 0x40))();\u000a  return iVar1;\u000a}\u000a\u000a
p507
S'PUSH RAX\nMOV RAX,qword ptr [RDI]\nMOV RAX,qword ptr [RAX + 0x50]\nCALL qword ptr [RAX + 0x40]\nPOP RCX\nRET\n'
p508
S'50\n48 8b 07\n48 8b 40 50\nff 50 40\n59\nc3\n'
p509
S'.text:0000000000407a20\n.text:0000000000407a21\n.text:0000000000407a24\n.text:0000000000407a28\n.text:0000000000407a2b\n.text:0000000000407a2c\n'
p510
tp511
sS'fts_padjust'
p512
(S'\n__stdcall fts_padjust(FTS * sp, FTSENT * head)\n'
p513
V\u000avoid fts_padjust(FTS *sp,FTSENT *head)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  char *pcVar2;\u000a  _ftsent **pp_Var3;\u000a  \u000a  p_Var1 = sp->fts_child;\u000a  pcVar2 = sp->fts_path;\u000a  while (p_Var1 != (_ftsent *)0x0) {\u000a    if ((_ftsent *)p_Var1->fts_accpath != p_Var1 + 1) {\u000a      p_Var1->fts_accpath =\u000a           pcVar2 + (long)&((_ftsent *)\u000a                           ((long)(_ftsent *)p_Var1->fts_accpath - (long)p_Var1->fts_path))->\u000a                           fts_cycle;\u000a    }\u000a    p_Var1->fts_path = pcVar2;\u000a    p_Var1 = p_Var1->fts_link;\u000a  }\u000a  while (-1 < head->fts_level) {\u000a    if ((FTSENT *)head->fts_accpath != head + 1) {\u000a      head->fts_accpath =\u000a           pcVar2 + (long)&((FTSENT *)((long)(FTSENT *)head->fts_accpath - (long)head->fts_path))->\u000a                           fts_cycle;\u000a    }\u000a    head->fts_path = pcVar2;\u000a    pp_Var3 = &head->fts_link;\u000a    if (head->fts_link == (_ftsent *)0x0) {\u000a      pp_Var3 = &head->fts_parent;\u000a    }\u000a    head = (FTSENT *)*pp_Var3;\u000a  }\u000a  return;\u000a}\u000a\u000a
p514
S'MOV RCX,qword ptr [RDI + 0x8]\nMOV RAX,qword ptr [RDI + 0x20]\nTEST RCX,RCX\nJNZ 0x0040794d\nJMP 0x00407988\nMOV qword ptr [RCX + 0x38],RAX\nMOV RCX,qword ptr [RCX + 0x10]\nTEST RCX,RCX\nJZ 0x00407988\nMOV RDX,qword ptr [RCX + 0x30]\nLEA RDI,[0x108 + RCX]\nCMP RDX,RDI\nJZ 0x00407940\nSUB RDX,qword ptr [RCX + 0x38]\nADD RDX,RAX\nMOV qword ptr [RCX + 0x30],RDX\nJMP 0x00407940\nMOV qword ptr [RSI + 0x38],RAX\nCMP qword ptr [RSI + 0x10],0x0\nLEA RCX,[RSI + 0x10]\nLEA RDX,[RSI + 0x8]\nCMOVZ RCX,RDX\nMOV RSI,qword ptr [RCX]\nCMP qword ptr [RSI + 0x58],0x0\nJS 0x004079ac\nMOV RCX,qword ptr [RSI + 0x30]\nLEA RDX,[0x108 + RSI]\nCMP RCX,RDX\nJZ 0x00407970\nSUB RCX,qword ptr [RSI + 0x38]\nADD RCX,RAX\nMOV qword ptr [RSI + 0x30],RCX\nJMP 0x00407970\nRET\n'
p515
S'48 8b 4f 08\n48 8b 47 20\n48 85 c9\n75 10\neb 49\n48 89 41 38\n48 8b 49 10\n48 85 c9\n74 3b\n48 8b 51 30\n48 8d b9 08 01 00 00\n48 39 fa\n74 e3\n48 2b 51 38\n48 01 c2\n48 89 51 30\neb d6\n48 89 46 38\n48 83 7e 10 00\n48 8d 4e 10\n48 8d 56 08\n48 0f 44 ca\n48 8b 31\n48 83 7e 58 00\n78 1d\n48 8b 4e 30\n48 8d 96 08 01 00 00\n48 39 d1\n74 d1\n48 2b 4e 38\n48 01 c1\n48 89 4e 30\neb c4\nc3\n'
p516
S'.text:0000000000407930\n.text:0000000000407934\n.text:0000000000407938\n.text:000000000040793b\n.text:000000000040793d\n.text:0000000000407940\n.text:0000000000407944\n.text:0000000000407948\n.text:000000000040794b\n.text:000000000040794d\n.text:0000000000407951\n.text:0000000000407958\n.text:000000000040795b\n.text:000000000040795d\n.text:0000000000407961\n.text:0000000000407964\n.text:0000000000407968\n.text:0000000000407970\n.text:0000000000407974\n.text:0000000000407979\n.text:000000000040797d\n.text:0000000000407981\n.text:0000000000407985\n.text:0000000000407988\n.text:000000000040798d\n.text:000000000040798f\n.text:0000000000407993\n.text:000000000040799a\n.text:000000000040799d\n.text:000000000040799f\n.text:00000000004079a3\n.text:00000000004079a6\n.text:00000000004079aa\n.text:00000000004079ac\n'
p517
tp518
sS'_init'
p519
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p520
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___0060eff8;\u000a  if (PTR___gmon_start___0060eff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___0060eff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p521
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x0060eff8]\nTEST RAX,RAX\nJZ 0x004017a2\nCALL RAX\nADD RSP,0x8\nRET\n'
p522
S'48 83 ec 08\n48 8b 05 5d d8 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p523
S'.init:0000000000401790\n.init:0000000000401794\n.init:000000000040179b\n.init:000000000040179e\n.init:00000000004017a0\n.init:00000000004017a2\n.init:00000000004017a6\n'
p524
tp525
sS'set_quoting_flags'
p526
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p527
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p528
S'TEST RDI,RDI\nMOV ECX,0x60f360\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p529
S'48 85 ff\nb9 60 f3 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p530
S'.text:00000000004035c0\n.text:00000000004035c3\n.text:00000000004035c8\n.text:00000000004035cc\n.text:00000000004035cf\n.text:00000000004035d2\n'
p531
tp532
sS'realloc'
p533
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p534
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_0060f1c8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p535
S'JMP qword ptr [0x0060f1c8]\n'
p536
S'ff 25 a2 d6 20 00\n'
p537
S'.plt:0000000000401b20\n'
p538
tp539
sS'__fprintf_chk'
p540
(S'\n__stdcall __fprintf_chk()\n'
p541
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_0060f248)();\u000a  return;\u000a}\u000a\u000a
p542
S'JMP qword ptr [0x0060f248]\n'
p543
S'ff 25 22 d6 20 00\n'
p544
S'.plt:0000000000401c20\n'
p545
tp546
sS'get_charset_aliases'
p547
(S'\n__stdcall get_charset_aliases()\n'
p548
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases =\u000a                  \u000a         "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a         + 0x1d0;\u000a    return \u000a           "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a           + 0x1d0;\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_004090d4_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_004090d4_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_004090d4_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_004090d4_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_004090d4_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_004090d4_caseD_9;\u000a      case -1:\u000a        goto switchD_004090d4_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040912d:\u000a  __s = \u000a        "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a        + 0x1d0;\u000aLAB_00409133:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_004090d4_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00409133;\u000a  }\u000a  goto LAB_0040912d;\u000a}\u000a\u000a
p549
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x0060f4a0]\nTEST R15,R15\nJNZ 0x00409142\nMOV EDI,0x40bf6c\nCALL 0x004017d0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00408ef8\nCMP byte ptr [RBX],0x0\nJNZ 0x00408efd\nMOV EBX,0x40bf7c\nMOV RDI,RBX\nCALL 0x004018f0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00408f17\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00408f19\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x00401aa0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00408f6d\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401a50\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x00408f78\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x00408f95\nMOV R15D,0x40a55d\nJMP 0x0040913b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x00401b80\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040912d\nMOV ESI,0x40b392\nMOV EDI,EBP\nCALL 0x00401b30\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004090f4\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x004090c0\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x00401830\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x00401830\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x004090c0\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401ad0\nMOV ESI,0x40bf8b\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x004019b0\nCMP EAX,0x2\nJL 0x00409114\nMOV RDI,R12\nCALL 0x004018f0\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x004018f0\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040909d\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401b20\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00408fe4\nJMP 0x004090fd\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x00401aa0\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00408fe4\nJMP 0x004090fd\nMOV RDI,RBX\nCALL 0x00401850\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00409027\nJMP qword ptr [0x40be30 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x00401850\nCMP EAX,-0x1\nJZ 0x00409114\nCMP EAX,0xa\nJNZ 0x004090e0\nJMP 0x004090c0\nMOV EDI,EBP\nCALL 0x004019c0\nJMP 0x0040912d\nMOV RDI,R15\nCALL 0x004017e0\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x00409280\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040912d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00409133\nMOV R15D,0x40a55d\nMOV RDI,R13\nCALL 0x004017e0\nMOV qword ptr [0x0060f4a0],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p550
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d c8 65 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 6c bf 40 00\ne8 e5 88 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 7c bf 40 00\n48 89 df\ne8 eb 89 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 79 8b ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 13 8b ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf 5d a5 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 dc 8b ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 92 b3 40 00\n89 ef\ne8 76 8b ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 2b 88 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 1b 88 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 9f 8a ff ff\nbe 8b bf 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 6a 89 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 99 88 ff ff\n49 89 c4\n48 89 ef\ne8 8e 88 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 96 8a ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 f5 89 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 88 87 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd 30 be 40 00\n48 89 df\ne8 68 87 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 c5 88 ff ff\neb 30\n4c 89 ff\ne8 db 86 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 64 01 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf 5d a5 40 00\n4c 89 ef\ne8 a5 86 ff ff\n4c 89 3d 5e 63 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p551
S'.text:0000000000408ec0\n.text:0000000000408ec1\n.text:0000000000408ec3\n.text:0000000000408ec5\n.text:0000000000408ec7\n.text:0000000000408ec9\n.text:0000000000408eca\n.text:0000000000408ed1\n.text:0000000000408ed8\n.text:0000000000408edb\n.text:0000000000408ee1\n.text:0000000000408ee6\n.text:0000000000408eeb\n.text:0000000000408eee\n.text:0000000000408ef1\n.text:0000000000408ef3\n.text:0000000000408ef6\n.text:0000000000408ef8\n.text:0000000000408efd\n.text:0000000000408f00\n.text:0000000000408f05\n.text:0000000000408f08\n.text:0000000000408f0b\n.text:0000000000408f0d\n.text:0000000000408f12\n.text:0000000000408f15\n.text:0000000000408f17\n.text:0000000000408f19\n.text:0000000000408f1d\n.text:0000000000408f22\n.text:0000000000408f27\n.text:0000000000408f2a\n.text:0000000000408f2d\n.text:0000000000408f2f\n.text:0000000000408f32\n.text:0000000000408f35\n.text:0000000000408f38\n.text:0000000000408f3d\n.text:0000000000408f40\n.text:0000000000408f43\n.text:0000000000408f46\n.text:0000000000408f48\n.text:0000000000408f4e\n.text:0000000000408f58\n.text:0000000000408f5d\n.text:0000000000408f67\n.text:0000000000408f6b\n.text:0000000000408f6d\n.text:0000000000408f73\n.text:0000000000408f78\n.text:0000000000408f82\n.text:0000000000408f87\n.text:0000000000408f91\n.text:0000000000408f95\n.text:0000000000408f9a\n.text:0000000000408f9c\n.text:0000000000408f9f\n.text:0000000000408fa4\n.text:0000000000408fa6\n.text:0000000000408fa8\n.text:0000000000408fae\n.text:0000000000408fb3\n.text:0000000000408fb5\n.text:0000000000408fba\n.text:0000000000408fbd\n.text:0000000000408fc0\n.text:0000000000408fc6\n.text:0000000000408fcb\n.text:0000000000408fd0\n.text:0000000000408fd2\n.text:0000000000408fd7\n.text:0000000000408fda\n.text:0000000000408fdf\n.text:0000000000408fe4\n.text:0000000000408fe9\n.text:0000000000408fec\n.text:0000000000408fef\n.text:0000000000408ff2\n.text:0000000000408ff5\n.text:0000000000408ff8\n.text:0000000000408ffd\n.text:0000000000409000\n.text:0000000000409005\n.text:0000000000409008\n.text:000000000040900d\n.text:0000000000409010\n.text:0000000000409015\n.text:000000000040901a\n.text:000000000040901d\n.text:0000000000409022\n.text:0000000000409027\n.text:0000000000409029\n.text:000000000040902c\n.text:0000000000409031\n.text:0000000000409036\n.text:0000000000409038\n.text:000000000040903b\n.text:000000000040903e\n.text:0000000000409041\n.text:0000000000409046\n.text:0000000000409049\n.text:000000000040904f\n.text:0000000000409052\n.text:0000000000409057\n.text:000000000040905a\n.text:000000000040905d\n.text:0000000000409062\n.text:0000000000409065\n.text:000000000040906a\n.text:000000000040906f\n.text:0000000000409072\n.text:0000000000409074\n.text:0000000000409078\n.text:000000000040907d\n.text:0000000000409082\n.text:0000000000409085\n.text:000000000040908a\n.text:000000000040908d\n.text:0000000000409092\n.text:0000000000409095\n.text:000000000040909b\n.text:000000000040909d\n.text:00000000004090a2\n.text:00000000004090a6\n.text:00000000004090ab\n.text:00000000004090ae\n.text:00000000004090b1\n.text:00000000004090b7\n.text:00000000004090c0\n.text:00000000004090c3\n.text:00000000004090c8\n.text:00000000004090cb\n.text:00000000004090ce\n.text:00000000004090d4\n.text:00000000004090e0\n.text:00000000004090e3\n.text:00000000004090e8\n.text:00000000004090eb\n.text:00000000004090ed\n.text:00000000004090f0\n.text:00000000004090f2\n.text:00000000004090f4\n.text:00000000004090f6\n.text:00000000004090fb\n.text:00000000004090fd\n.text:0000000000409100\n.text:0000000000409105\n.text:0000000000409107\n.text:000000000040910c\n.text:000000000040910f\n.text:0000000000409114\n.text:0000000000409117\n.text:000000000040911c\n.text:0000000000409121\n.text:0000000000409124\n.text:0000000000409126\n.text:000000000040912b\n.text:000000000040912d\n.text:0000000000409133\n.text:0000000000409136\n.text:000000000040913b\n.text:0000000000409142\n.text:0000000000409145\n.text:000000000040914c\n.text:000000000040914d\n.text:000000000040914f\n.text:0000000000409151\n.text:0000000000409153\n.text:0000000000409155\n.text:0000000000409156\n'
p552
tp553
sS'nl_langinfo'
p554
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p555
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_0060f198)();\u000a  return pcVar1;\u000a}\u000a\u000a
p556
S'JMP qword ptr [0x0060f198]\n'
p557
S'ff 25 d2 d6 20 00\n'
p558
S'.plt:0000000000401ac0\n'
p559
tp560
sS'fstatfs'
p561
(S'\n__stdcall fstatfs(int __fildes, statfs * __buf)\n'
p562
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fstatfs(int __fildes,statfs *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fstatfs_0060f220)();\u000a  return iVar1;\u000a}\u000a\u000a
p563
S'JMP qword ptr [0x0060f220]\n'
p564
S'ff 25 4a d6 20 00\n'
p565
S'.plt:0000000000401bd0\n'
p566
tp567
sS'x2realloc'
p568
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p569
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p570
S'MOV EDX,0x1\nJMP 0x004056b0\n'
p571
S'ba 01 00 00 00\neb 89\n'
p572
S'.text:0000000000405720\n.text:0000000000405725\n'
p573
tp574
sS'strlen'
p575
(S'\n__stdcall strlen(char * __s)\n'
p576
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_0060f0b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p577
S'JMP qword ptr [0x0060f0b0]\n'
p578
S'ff 25 ba d7 20 00\n'
p579
S'.plt:00000000004018f0\n'
p580
tp581
sS'set_stat_type'
p582
(S'\n__stdcall set_stat_type(stat * st)\n'
p583
V\u000avoid set_stat_type(stat *st)\u000a\u000a{\u000a  __mode_t _Var1;\u000a  int in_ESI;\u000a  \u000a  _Var1 = 0;\u000a  if (in_ESI - 1U < 0xc) {\u000a    _Var1 = *(__mode_t *)(&DAT_0040b9d0 + (long)(int)(in_ESI - 1U) * 4);\u000a  }\u000a  st->st_mode = _Var1;\u000a  return;\u000a}\u000a\u000a
p584
S'DEC ESI\nXOR EAX,EAX\nCMP ESI,0xb\nJA 0x00407923\nMOVSXD RAX,ESI\nMOV EAX,dword ptr [0x40b9d0 + RAX*0x4]\nMOV dword ptr [RDI + 0x18],EAX\nRET\n'
p585
S'ff ce\n31 c0\n83 fe 0b\n77 0a\n48 63 c6\n8b 04 85 d0 b9 40 00\n89 47 18\nc3\n'
p586
S'.text:0000000000407910\n.text:0000000000407912\n.text:0000000000407914\n.text:0000000000407917\n.text:0000000000407919\n.text:000000000040791c\n.text:0000000000407923\n.text:0000000000407926\n'
p587
tp588
sS'memcmp'
p589
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p590
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_0060f128)();\u000a  return iVar1;\u000a}\u000a\u000a
p591
S'JMP qword ptr [0x0060f128]\n'
p592
S'ff 25 42 d7 20 00\n'
p593
S'.plt:00000000004019e0\n'
p594
tp595
sS'fts_compare_ino'
p596
(S'\n__stdcall fts_compare_ino(_ftsent * * a, _ftsent * * b)\n'
p597
V\u000aint fts_compare_ino(_ftsent **a,_ftsent **b)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  uint uVar3;\u000a  \u000a  uVar1 = (*a)->fts_statp[0].st_ino;\u000a  uVar2 = (*b)->fts_statp[0].st_ino;\u000a  uVar3 = 0xffffffff;\u000a  if (uVar2 <= uVar1) {\u000a    uVar3 = -(uint)(uVar2 < uVar1) & 1;\u000a  }\u000a  return (int)uVar3;\u000a}\u000a\u000a
p598
S'MOV RAX,qword ptr [RDI]\nMOV RAX,qword ptr [0x80 + RAX]\nMOV RCX,qword ptr [RSI]\nMOV RCX,qword ptr [0x80 + RCX]\nCMP RCX,RAX\nSBB EDX,EDX\nAND EDX,0x1\nCMP RAX,RCX\nMOV EAX,0xffffffff\nCMOVNC EAX,EDX\nRET\n'
p599
S'48 8b 07\n48 8b 80 80 00 00 00\n48 8b 0e\n48 8b 89 80 00 00 00\n48 39 c1\n19 d2\n83 e2 01\n48 39 c8\nb8 ff ff ff ff\n0f 43 c2\nc3\n'
p600
S'.text:00000000004079f0\n.text:00000000004079f3\n.text:00000000004079fa\n.text:00000000004079fd\n.text:0000000000407a04\n.text:0000000000407a07\n.text:0000000000407a09\n.text:0000000000407a0c\n.text:0000000000407a0f\n.text:0000000000407a14\n.text:0000000000407a17\n'
p601
tp602
sS'hash_free'
p603
(S'\n__stdcall hash_free(Hash_table * table)\n'
p604
V\u000avoid hash_free(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *__ptr;\u000a  hash_entry *__ptr_00;\u000a  \u000a  if (((table->data_freer != (void (*)(void *))0x0) && (table->n_entries != 0)) &&\u000a     (__ptr_00 = table->bucket, __ptr_00 < table->bucket_limit)) {\u000a    do {\u000a      __ptr = __ptr_00;\u000a      if (__ptr_00->data != (void *)0x0) {\u000a        while (__ptr != (hash_entry *)0x0) {\u000a          (*table->data_freer)(__ptr->data);\u000a          __ptr = __ptr->next;\u000a        }\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->bucket;\u000a  if (__ptr_00 < table->bucket_limit) {\u000a    do {\u000a      __ptr = __ptr_00->next;\u000a      while (__ptr != (hash_entry *)0x0) {\u000a        phVar1 = __ptr->next;\u000a        free(__ptr);\u000a        __ptr = phVar1;\u000a      }\u000a      __ptr_00 = __ptr_00 + 1;\u000a    } while (__ptr_00 < table->bucket_limit);\u000a  }\u000a  __ptr_00 = table->free_entry_list;\u000a  while (__ptr_00 != (hash_entry *)0x0) {\u000a    __ptr = __ptr_00->next;\u000a    free(__ptr_00);\u000a    __ptr_00 = __ptr;\u000a  }\u000a  free(table->bucket);\u000a  free(table);\u000a  return;\u000a}\u000a\u000a
p605
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x00408532\nCMP qword ptr [R15 + 0x20],0x0\nJZ 0x00408532\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x0040850a\nJMP 0x00408532\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00408532\nCMP qword ptr [R14],0x0\nJZ 0x00408500\nTEST R14,R14\nJZ 0x00408500\nMOV RBX,R14\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RBX]\nCALL qword ptr [R15 + 0x40]\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00408520\nJMP 0x00408500\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x0040854a\nJMP 0x00408573\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x00408573\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00408540\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004017e0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00408560\nJMP 0x00408540\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x00408591\nNOP dword ptr [RAX]\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004017e0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00408580\nMOV RDI,qword ptr [R15]\nCALL 0x004017e0\nMOV RDI,R15\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004017e0\n'
p606
S'41 57\n41 56\n53\n49 89 ff\n49 83 7f 40 00\n74 53\n49 83 7f 20 00\n74 4c\n4d 8b 37\n4d 3b 77 08\n72 1b\neb 41\n49 83 c6 10\n4d 3b 77 08\n73 28\n49 83 3e 00\n74 f0\n4d 85 f6\n74 eb\n4c 89 f3\n0f 1f 84 00 00 00 00 00\n48 8b 3b\n41 ff 57 40\n48 8b 5b 08\n48 85 db\n75 f0\neb ce\n4d 8b 37\n4d 3b 77 08\n72 0f\neb 36\n49 83 c6 10\n4d 3b 77 08\n73 29\n49 8b 7e 08\n48 85 ff\n74 ed\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 5f 08\ne8 77 92 ff ff\n48 85 db\n48 89 df\n75 ef\neb cd\n49 8b 7f 48\n48 85 ff\n74 15\n0f 1f 40 00\n48 8b 5f 08\ne8 57 92 ff ff\n48 85 db\n48 89 df\n75 ef\n49 8b 3f\ne8 47 92 ff ff\n4c 89 ff\n5b\n41 5e\n41 5f\ne9 3a 92 ff ff\n'
p607
S'.text:00000000004084d0\n.text:00000000004084d2\n.text:00000000004084d4\n.text:00000000004084d5\n.text:00000000004084d8\n.text:00000000004084dd\n.text:00000000004084df\n.text:00000000004084e4\n.text:00000000004084e6\n.text:00000000004084e9\n.text:00000000004084ed\n.text:00000000004084ef\n.text:0000000000408500\n.text:0000000000408504\n.text:0000000000408508\n.text:000000000040850a\n.text:000000000040850e\n.text:0000000000408510\n.text:0000000000408513\n.text:0000000000408515\n.text:0000000000408518\n.text:0000000000408520\n.text:0000000000408523\n.text:0000000000408527\n.text:000000000040852b\n.text:000000000040852e\n.text:0000000000408530\n.text:0000000000408532\n.text:0000000000408535\n.text:0000000000408539\n.text:000000000040853b\n.text:0000000000408540\n.text:0000000000408544\n.text:0000000000408548\n.text:000000000040854a\n.text:000000000040854e\n.text:0000000000408551\n.text:0000000000408553\n.text:0000000000408560\n.text:0000000000408564\n.text:0000000000408569\n.text:000000000040856c\n.text:000000000040856f\n.text:0000000000408571\n.text:0000000000408573\n.text:0000000000408577\n.text:000000000040857a\n.text:000000000040857c\n.text:0000000000408580\n.text:0000000000408584\n.text:0000000000408589\n.text:000000000040858c\n.text:000000000040858f\n.text:0000000000408591\n.text:0000000000408594\n.text:0000000000408599\n.text:000000000040859c\n.text:000000000040859d\n.text:000000000040859f\n.text:00000000004085a1\n'
p608
tp609
sS'quotearg_n_style_mem'
p610
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p611
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p612
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004046a0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00404470\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p613
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p614
S'.text:0000000000404700\n.text:0000000000404701\n.text:0000000000404703\n.text:0000000000404705\n.text:0000000000404706\n.text:000000000040470a\n.text:000000000040470d\n.text:0000000000404710\n.text:0000000000404712\n.text:0000000000404715\n.text:0000000000404718\n.text:000000000040471d\n.text:000000000040471f\n.text:0000000000404722\n.text:0000000000404725\n.text:0000000000404728\n.text:000000000040472d\n.text:0000000000404731\n.text:0000000000404732\n.text:0000000000404734\n.text:0000000000404736\n.text:0000000000404737\n'
p615
tp616
sS'xfts_open'
p617
(S'\n__stdcall xfts_open(char * * argv, anon_subr_int_FTSENT_ptr_ptr_FTSENT_ptr_ptr * compar)\n'
p618
V\u000aFTS * xfts_open(char **argv,int (*compar)(FTSENT **,FTSENT **))\u000a\u000a{\u000a  FTS *pFVar1;\u000a  int *piVar2;\u000a  \u000a  pFVar1 = fts_open(argv,(int (*)(FTSENT **,FTSENT **))(ulong)((uint)compar | 0x200));\u000a  if (pFVar1 != (FTS *)0x0) {\u000a    return pFVar1;\u000a  }\u000a  piVar2 = __errno_location();\u000a  if (*piVar2 == 0x16) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("errno != EINVAL","lib/xfts.c",0x29,\u000a                  "FTS *xfts_open(char *const *, int, int (*)(const FTSENT **, const FTSENT **))");\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p619
S'PUSH RAX\nOR ESI,0x200\nCALL 0x00405b90\nTEST RAX,RAX\nJZ 0x00405813\nPOP RCX\nRET\nCALL 0x00401800\nCMP dword ptr [RAX],0x16\nJNZ 0x00405836\nMOV EDI,0x40b720\nMOV ESI,0x40b730\nMOV EDX,0x29\nMOV ECX,0x40b73b\nCALL 0x00401990\nCALL 0x004057d0\n'
p620
S'50\n81 ce 00 02 00 00\ne8 84 03 00 00\n48 85 c0\n74 02\n59\nc3\ne8 e8 bf ff ff\n83 38 16\n75 19\nbf 20 b7 40 00\nbe 30 b7 40 00\nba 29 00 00 00\nb9 3b b7 40 00\ne8 5a c1 ff ff\ne8 95 ff ff ff\n'
p621
S'.text:0000000000405800\n.text:0000000000405801\n.text:0000000000405807\n.text:000000000040580c\n.text:000000000040580f\n.text:0000000000405811\n.text:0000000000405812\n.text:0000000000405813\n.text:0000000000405818\n.text:000000000040581b\n.text:000000000040581d\n.text:0000000000405822\n.text:0000000000405827\n.text:000000000040582c\n.text:0000000000405831\n.text:0000000000405836\n'
p622
tp623
sS'_exit'
p624
(S'\n__stdcall _exit(int __status)\n'
p625
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_0060f048)();\u000a  return;\u000a}\u000a\u000a
p626
S'JMP qword ptr [0x0060f048]\n'
p627
S'ff 25 22 d8 20 00\n'
p628
S'.plt:0000000000401820\n'
p629
tp630
sS'free_entry'
p631
(S'\n__stdcall free_entry(Hash_table * table, hash_entry * entry)\n'
p632
V\u000avoid free_entry(Hash_table *table,hash_entry *entry)\u000a\u000a{\u000a  entry->data = (void *)0x0;\u000a  entry->next = table->free_entry_list;\u000a  table->free_entry_list = entry;\u000a  return;\u000a}\u000a\u000a
p633
S'MOV qword ptr [RSI],0x0\nMOV RAX,qword ptr [RDI + 0x48]\nMOV qword ptr [RSI + 0x8],RAX\nMOV qword ptr [RDI + 0x48],RSI\nRET\n'
p634
S'48 c7 06 00 00 00 00\n48 8b 47 48\n48 89 46 08\n48 89 77 48\nc3\n'
p635
S'.text:0000000000408d60\n.text:0000000000408d67\n.text:0000000000408d6b\n.text:0000000000408d6f\n.text:0000000000408d73\n'
p636
tp637
sS'bkm_scale_by_power'
p638
(S'\n__stdcall bkm_scale_by_power(ulong * x)\n'
p639
V\u000astrtol_error bkm_scale_by_power(ulong *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p640
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00405b31\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00405ad0\nOR EBP,EAX\nDEC EBX\nJNZ 0x00405b20\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p641
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p642
S'.text:0000000000405b00\n.text:0000000000405b01\n.text:0000000000405b03\n.text:0000000000405b05\n.text:0000000000405b06\n.text:0000000000405b07\n.text:0000000000405b09\n.text:0000000000405b0c\n.text:0000000000405b0f\n.text:0000000000405b11\n.text:0000000000405b13\n.text:0000000000405b15\n.text:0000000000405b20\n.text:0000000000405b23\n.text:0000000000405b26\n.text:0000000000405b2b\n.text:0000000000405b2d\n.text:0000000000405b2f\n.text:0000000000405b31\n.text:0000000000405b33\n.text:0000000000405b37\n.text:0000000000405b38\n.text:0000000000405b3a\n.text:0000000000405b3c\n.text:0000000000405b3d\n'
p643
tp644
sS'xrealloc'
p645
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p646
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p647
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00405697\nTEST RBX,RBX\nJNZ 0x00405697\nCALL 0x004017e0\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401b20\nTEST RBX,RBX\nJZ 0x004056a9\nTEST RAX,RAX\nJZ 0x004056ab\nPOP RBX\nRET\nCALL 0x004057d0\n'
p648
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 4d c1 ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 81 c4 ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p649
S'.text:0000000000405680\n.text:0000000000405681\n.text:0000000000405684\n.text:0000000000405687\n.text:0000000000405689\n.text:000000000040568c\n.text:000000000040568e\n.text:0000000000405693\n.text:0000000000405695\n.text:0000000000405696\n.text:0000000000405697\n.text:000000000040569a\n.text:000000000040569f\n.text:00000000004056a2\n.text:00000000004056a4\n.text:00000000004056a7\n.text:00000000004056a9\n.text:00000000004056aa\n.text:00000000004056ab\n'
p650
tp651
sS'hash_initialize'
p652
(S'\n__stdcall hash_initialize(size_t candidate, Hash_tuning * tuning, Hash_hasher * hasher, Hash_comparator * comparator, Hash_data_freer * data_freer)\n'
p653
V\u000aHash_table *\u000ahash_initialize(size_t candidate,Hash_tuning *tuning,size_t (*hasher)(void *,size_t),\u000a               _Bool (*comparator)(void *,void *),void (*data_freer)(void *))\u000a\u000a{\u000a  _Bool _Var1;\u000a  Hash_table *table;\u000a  size_t n;\u000a  hash_entry *phVar2;\u000a  code *pcVar3;\u000a  Hash_tuning *tuning_00;\u000a  code *pcVar4;\u000a  \u000a  pcVar3 = raw_hasher;\u000a  if (hasher != (size_t (*)(void *,size_t))0x0) {\u000a    pcVar3 = hasher;\u000a  }\u000a  pcVar4 = raw_comparator;\u000a  if (comparator != (_Bool (*)(void *,void *))0x0) {\u000a    pcVar4 = comparator;\u000a  }\u000a  table = (Hash_table *)malloc(0x50);\u000a  if (table != (Hash_table *)0x0) {\u000a    tuning_00 = &default_tuning;\u000a    if (tuning != (Hash_tuning *)0x0) {\u000a      tuning_00 = tuning;\u000a    }\u000a    table->tuning = tuning_00;\u000a    _Var1 = check_tuning(table);\u000a    if (_Var1 != false) {\u000a      n = compute_bucket_size(candidate,tuning_00);\u000a      table->n_buckets = n;\u000a      if (n != 0) {\u000a        phVar2 = (hash_entry *)rpl_calloc(n,0x10);\u000a        table->bucket = phVar2;\u000a        if (phVar2 != (hash_entry *)0x0) {\u000a          table->bucket_limit = phVar2 + table->n_buckets;\u000a          *(undefined4 *)&table->n_buckets_used = 0;\u000a          *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a          *(undefined4 *)&table->n_entries = 0;\u000a          *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a          table->hasher = pcVar3;\u000a          table->comparator = pcVar4;\u000a          table->data_freer = data_freer;\u000a          table->free_entry_list = (hash_entry *)0x0;\u000a          return table;\u000a        }\u000a      }\u000a    }\u000a    free(table);\u000a  }\u000a  return (Hash_table *)0x0;\u000a}\u000a\u000a
p654
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,R8\nMOV R12,RSI\nMOV R15,RDI\nTEST RDX,RDX\nMOV EBP,0x4082e0\nCMOVNZ RBP,RDX\nTEST RCX,RCX\nMOV R14D,0x408300\nCMOVNZ R14,RCX\nMOV EDI,0x50\nCALL 0x00401aa0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004082c5\nMOV qword ptr [RSP],R13\nTEST R12,R12\nMOV R13D,0x40be1c\nCMOVNZ R13,R12\nMOV qword ptr [RBX + 0x28],R13\nMOV RDI,RBX\nCALL 0x00408310\nTEST AL,AL\nJZ 0x004082bd\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00408390\nMOV qword ptr [RBX + 0x10],RAX\nTEST RAX,RAX\nJZ 0x004082bd\nMOV ESI,0x10\nMOV RDI,RAX\nCALL 0x00405b40\nMOV qword ptr [RBX],RAX\nTEST RAX,RAX\nJZ 0x004082bd\nMOV RCX,qword ptr [RBX + 0x10]\nSHL RCX,0x4\nADD RAX,RCX\nMOV qword ptr [RBX + 0x8],RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x18],XMM0\nMOV qword ptr [RBX + 0x30],RBP\nMOV qword ptr [RBX + 0x38],R14\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x40],RAX\nMOV qword ptr [RBX + 0x48],0x0\nJMP 0x004082c7\nMOV RDI,RBX\nCALL 0x004017e0\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p655
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4d 89 c5\n49 89 f4\n49 89 ff\n48 85 d2\nbd e0 82 40 00\n48 0f 45 ea\n48 85 c9\n41 be 00 83 40 00\n4c 0f 45 f1\nbf 50 00 00 00\ne8 69 98 ff ff\n48 89 c3\n48 85 db\n0f 84 82 00 00 00\n4c 89 2c 24\n4d 85 e4\n41 bd 1c be 40 00\n4d 0f 45 ec\n4c 89 6b 28\n48 89 df\ne8 b0 00 00 00\n84 c0\n74 59\n4c 89 ff\n4c 89 ee\ne8 21 01 00 00\n48 89 43 10\n48 85 c0\n74 45\nbe 10 00 00 00\n48 89 c7\ne8 bb d8 ff ff\n48 89 03\n48 85 c0\n74 30\n48 8b 4b 10\n48 c1 e1 04\n48 01 c8\n48 89 43 08\n0f 57 c0\n0f 11 43 18\n48 89 6b 30\n4c 89 73 38\n48 8b 04 24\n48 89 43 40\n48 c7 43 48 00 00 00 00\neb 0a\n48 89 df\ne8 1b 95 ff ff\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p656
S'.text:0000000000408200\n.text:0000000000408201\n.text:0000000000408203\n.text:0000000000408205\n.text:0000000000408207\n.text:0000000000408209\n.text:000000000040820a\n.text:000000000040820b\n.text:000000000040820e\n.text:0000000000408211\n.text:0000000000408214\n.text:0000000000408217\n.text:000000000040821c\n.text:0000000000408220\n.text:0000000000408223\n.text:0000000000408229\n.text:000000000040822d\n.text:0000000000408232\n.text:0000000000408237\n.text:000000000040823a\n.text:000000000040823d\n.text:0000000000408243\n.text:0000000000408247\n.text:000000000040824a\n.text:0000000000408250\n.text:0000000000408254\n.text:0000000000408258\n.text:000000000040825b\n.text:0000000000408260\n.text:0000000000408262\n.text:0000000000408264\n.text:0000000000408267\n.text:000000000040826a\n.text:000000000040826f\n.text:0000000000408273\n.text:0000000000408276\n.text:0000000000408278\n.text:000000000040827d\n.text:0000000000408280\n.text:0000000000408285\n.text:0000000000408288\n.text:000000000040828b\n.text:000000000040828d\n.text:0000000000408291\n.text:0000000000408295\n.text:0000000000408298\n.text:000000000040829c\n.text:000000000040829f\n.text:00000000004082a3\n.text:00000000004082a7\n.text:00000000004082ab\n.text:00000000004082af\n.text:00000000004082b3\n.text:00000000004082bb\n.text:00000000004082bd\n.text:00000000004082c0\n.text:00000000004082c5\n.text:00000000004082c7\n.text:00000000004082ca\n.text:00000000004082ce\n.text:00000000004082cf\n.text:00000000004082d1\n.text:00000000004082d3\n.text:00000000004082d5\n.text:00000000004082d7\n.text:00000000004082d8\n'
p657
tp658
sS'cycle_warning_required'
p659
(S'\n__stdcall cycle_warning_required(FTS * fts, FTSENT * ent)\n'
p660
V\u000a_Bool cycle_warning_required(FTS *fts,FTSENT *ent)\u000a\u000a{\u000a  _Bool _Var1;\u000a  uint uVar2;\u000a  \u000a  uVar2 = fts->fts_options & 0x11;\u000a  _Var1 = (_Bool)(uVar2 == 0x10);\u000a  if (uVar2 == 0x11) {\u000a    _Var1 = (_Bool)(ent->fts_level != 0);\u000a  }\u000a  return _Var1;\u000a}\u000a\u000a
p661
S'MOV ECX,dword ptr [RDI + 0x48]\nAND ECX,0x11\nCMP ECX,0x10\nSETZ AL\nCMP ECX,0x11\nJNZ 0x0040585e\nCMP ECX,0x10\nJZ 0x0040585e\nCMP qword ptr [RSI + 0x58],0x0\nSETNZ AL\nRET\n'
p662
S'8b 4f 48\n83 e1 11\n83 f9 10\n0f 94 c0\n83 f9 11\n75 0d\n83 f9 10\n74 08\n48 83 7e 58 00\n0f 95 c0\nc3\n'
p663
S'.text:0000000000405840\n.text:0000000000405843\n.text:0000000000405846\n.text:0000000000405849\n.text:000000000040584c\n.text:000000000040584f\n.text:0000000000405851\n.text:0000000000405854\n.text:0000000000405856\n.text:000000000040585b\n.text:000000000040585e\n'
p664
tp665
sS'fts_set'
p666
(S'\n__stdcall fts_set(FTS * sp, FTSENT * p)\n'
p667
V\u000aint fts_set(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  int *piVar1;\u000a  uint in_EDX;\u000a  \u000a  if (4 < in_EDX) {\u000a    piVar1 = __errno_location();\u000a    *piVar1 = 0x16;\u000a    return 1;\u000a  }\u000a  p->fts_instr = (unsigned_short)in_EDX;\u000a  return 0;\u000a}\u000a\u000a
p668
S'CMP EDX,0x5\nJC 0x004076db\nPUSH RAX\nCALL 0x00401800\nMOV dword ptr [RAX],0x16\nMOV EAX,0x1\nADD RSP,0x8\nRET\nMOV word ptr [RSI + 0x74],DX\nXOR EAX,EAX\nRET\n'
p669
S'83 fa 05\n72 16\n50\ne8 35 a1 ff ff\nc7 00 16 00 00 00\nb8 01 00 00 00\n48 83 c4 08\nc3\n66 89 56 74\n31 c0\nc3\n'
p670
S'.text:00000000004076c0\n.text:00000000004076c3\n.text:00000000004076c5\n.text:00000000004076c6\n.text:00000000004076cb\n.text:00000000004076d1\n.text:00000000004076d6\n.text:00000000004076da\n.text:00000000004076db\n.text:00000000004076df\n.text:00000000004076e1\n'
p671
tp672
sS'describe_change'
p673
(S'\n__stdcall describe_change(char * file, char * old_user, char * old_group, char * user, char * group)\n'
p674
V\u000avoid describe_change(char *file,char *old_user,char *old_group,char *user,char *group)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__ptr;\u000a  char *pcVar3;\u000a  char *__ptr_00;\u000a  char *pcVar4;\u000a  char *group_00;\u000a  \u000a  iVar1 = (int)old_user;\u000a  if (iVar1 == 1) {\u000a    uVar2 = dcgettext(0,"neither symbolic link %s nor referent has been changed\u005cn",5);\u000a    __ptr = quotearg_style((char *)0x4);\u000a    __printf_chk(1,uVar2,__ptr,__ptr);\u000a    return;\u000a  }\u000a  __ptr = user_group_str(group,group_00);\u000a  if (group == (char *)0x0) {\u000a    old_group = group;\u000a  }\u000a  if (group_00 == (char *)0x0) {\u000a    user = group_00;\u000a  }\u000a  pcVar3 = user_group_str(old_group,user);\u000a  if (iVar1 == 4) {\u000a    __ptr_00 = "ownership of %s retained\u005cn";\u000a    if (group_00 != (char *)0x0) {\u000a      __ptr_00 = "group of %s retained as %s\u005cn";\u000a    }\u000a    pcVar4 = "ownership of %s retained as %s\u005cn";\u000a  }\u000a  else {\u000a    if (iVar1 == 3) {\u000a      if (pcVar3 == (char *)0x0) {\u000a        pcVar3 = "failed to change ownership of %s\u005cn";\u000a        if (group_00 != (char *)0x0) {\u000a          pcVar3 = "failed to change group of %s to %s\u005cn";\u000a        }\u000a        __ptr_00 = "failed to change ownership of %s to %s\u005cn";\u000a        if (group == (char *)0x0) {\u000a          __ptr_00 = pcVar3;\u000a        }\u000a        uVar2 = dcgettext(0,__ptr_00,5,pcVar3);\u000a        free((void *)0x0);\u000a        __ptr_00 = (char *)0x0;\u000a        goto LAB_004031fd;\u000a      }\u000a      __ptr_00 = "failed to change ownership of %s\u005cn";\u000a      if (group_00 != (char *)0x0) {\u000a        __ptr_00 = "failed to change group of %s from %s to %s\u005cn";\u000a      }\u000a      pcVar4 = "failed to change ownership of %s from %s to %s\u005cn";\u000a    }\u000a    else {\u000a      if (iVar1 != 2) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      __ptr_00 = "no change to ownership of %s\u005cn";\u000a      if (group_00 != (char *)0x0) {\u000a        __ptr_00 = "changed group of %s from %s to %s\u005cn";\u000a      }\u000a      pcVar4 = "changed ownership of %s from %s to %s\u005cn";\u000a    }\u000a  }\u000a  if (group == (char *)0x0) {\u000a    pcVar4 = __ptr_00;\u000a  }\u000a  uVar2 = dcgettext(0,pcVar4,5,__ptr_00);\u000a  __ptr_00 = __ptr;\u000a  __ptr = pcVar3;\u000aLAB_004031fd:\u000a  pcVar3 = quotearg_style((char *)0x4);\u000a  __printf_chk(1,uVar2,pcVar3,__ptr,__ptr_00);\u000a  free(__ptr);\u000a  free(__ptr_00);\u000a  return;\u000a}\u000a\u000a
p675
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14,R9\nMOV R13,R8\nMOV RBX,RCX\nMOV RBP,RDX\nMOV R15D,ESI\nMOV R12,RDI\nCMP R15D,0x1\nJNZ 0x0040314a\nXOR EDI,EDI\nMOV ESI,0x40ac29\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R12\nCALL 0x00404740\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV RDX,RCX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401b50\nMOV qword ptr [RSP + 0x10],R12\nMOV RDI,R13\nMOV RSI,R14\nCALL 0x00403290\nMOV qword ptr [RSP + 0x8],RAX\nTEST R13,R13\nCMOVZ RBP,R13\nTEST R14,R14\nCMOVZ RBX,R14\nMOV RDI,RBP\nMOV RSI,RBX\nCALL 0x00403290\nMOV R12,RAX\nCMP R15D,0x4\nJZ 0x004031ac\nCMP R15D,0x3\nJZ 0x004031c7\nCMP R15D,0x2\nJNZ 0x00403285\nTEST R14,R14\nMOV EAX,0x40ac88\nMOV ECX,0x40acab\nCMOVNZ RCX,RAX\nTEST R13,R13\nMOV ESI,0x40ac61\nJMP 0x004031e5\nTEST R14,R14\nMOV EAX,0x40adb3\nMOV ECX,0x40adcf\nCMOVNZ RCX,RAX\nTEST R13,R13\nMOV ESI,0x40ad93\nJMP 0x004031e5\nTEST R12,R12\nJZ 0x00403245\nTEST R14,R14\nMOV EAX,0x40acf9\nMOV ECX,0x40ad25\nCMOVNZ RCX,RAX\nTEST R13,R13\nMOV ESI,0x40acc9\nCMOVZ RSI,RCX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RBX,RAX\nMOV RBP,qword ptr [RSP + 0x8]\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x10]\nCALL 0x00404740\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV RDX,RCX\nMOV RCX,R12\nMOV R8,RBP\nCALL 0x00401b50\nMOV RDI,R12\nCALL 0x004017e0\nMOV RDI,RBP\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x004017e0\nTEST R14,R14\nMOV EAX,0x40ad6f\nMOV ECX,0x40ad25\nCMOVNZ RCX,RAX\nTEST R13,R13\nMOV ESI,0x40ad47\nCMOVZ RSI,RCX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RBX,RAX\nMOV RDI,R12\nCALL 0x004017e0\nMOV R12,qword ptr [RSP + 0x8]\nXOR EBP,EBP\nJMP 0x004031fd\nCALL 0x004017f0\n'
p676
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 ce\n4d 89 c5\n48 89 cb\n48 89 d5\n41 89 f7\n49 89 fc\n41 83 ff 01\n75 44\n31 ff\nbe 29 ac 40 00\nba 05 00 00 00\ne8 b9 e7 ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 e6\ne8 19 16 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n48 89 ca\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 06 ea ff ff\n4c 89 64 24 10\n4c 89 ef\n4c 89 f6\ne8 36 01 00 00\n48 89 44 24 08\n4d 85 ed\n49 0f 44 ed\n4d 85 f6\n49 0f 44 de\n48 89 ef\n48 89 de\ne8 18 01 00 00\n49 89 c4\n41 83 ff 04\n74 2b\n41 83 ff 03\n74 40\n41 83 ff 02\n0f 85 f4 00 00 00\n4d 85 f6\nb8 88 ac 40 00\nb9 ab ac 40 00\n48 0f 45 c8\n4d 85 ed\nbe 61 ac 40 00\neb 39\n4d 85 f6\nb8 b3 ad 40 00\nb9 cf ad 40 00\n48 0f 45 c8\n4d 85 ed\nbe 93 ad 40 00\neb 1e\n4d 85 e4\n74 79\n4d 85 f6\nb8 f9 ac 40 00\nb9 25 ad 40 00\n48 0f 45 c8\n4d 85 ed\nbe c9 ac 40 00\n48 0f 44 f1\n31 ff\nba 05 00 00 00\ne8 db e6 ff ff\n48 89 c3\n48 8b 6c 24 08\nbf 04 00 00 00\n48 8b 74 24 10\ne8 34 15 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n48 89 ca\n4c 89 e1\n49 89 e8\ne8 29 e9 ff ff\n4c 89 e7\ne8 b1 e5 ff ff\n48 89 ef\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 9b e5 ff ff\n4d 85 f6\nb8 6f ad 40 00\nb9 25 ad 40 00\n48 0f 45 c8\n4d 85 ed\nbe 47 ad 40 00\n48 0f 44 f1\n31 ff\nba 05 00 00 00\ne8 62 e6 ff ff\n48 89 c3\n4c 89 e7\ne8 67 e5 ff ff\n4c 8b 64 24 08\n31 ed\ne9 78 ff ff ff\ne8 66 e5 ff ff\n'
p677
S'.text:00000000004030e0\n.text:00000000004030e1\n.text:00000000004030e3\n.text:00000000004030e5\n.text:00000000004030e7\n.text:00000000004030e9\n.text:00000000004030ea\n.text:00000000004030ee\n.text:00000000004030f1\n.text:00000000004030f4\n.text:00000000004030f7\n.text:00000000004030fa\n.text:00000000004030fd\n.text:0000000000403100\n.text:0000000000403104\n.text:0000000000403106\n.text:0000000000403108\n.text:000000000040310d\n.text:0000000000403112\n.text:0000000000403117\n.text:000000000040311a\n.text:000000000040311f\n.text:0000000000403122\n.text:0000000000403127\n.text:000000000040312a\n.text:000000000040312f\n.text:0000000000403131\n.text:0000000000403134\n.text:0000000000403137\n.text:000000000040313b\n.text:000000000040313c\n.text:000000000040313e\n.text:0000000000403140\n.text:0000000000403142\n.text:0000000000403144\n.text:0000000000403145\n.text:000000000040314a\n.text:000000000040314f\n.text:0000000000403152\n.text:0000000000403155\n.text:000000000040315a\n.text:000000000040315f\n.text:0000000000403162\n.text:0000000000403166\n.text:0000000000403169\n.text:000000000040316d\n.text:0000000000403170\n.text:0000000000403173\n.text:0000000000403178\n.text:000000000040317b\n.text:000000000040317f\n.text:0000000000403181\n.text:0000000000403185\n.text:0000000000403187\n.text:000000000040318b\n.text:0000000000403191\n.text:0000000000403194\n.text:0000000000403199\n.text:000000000040319e\n.text:00000000004031a2\n.text:00000000004031a5\n.text:00000000004031aa\n.text:00000000004031ac\n.text:00000000004031af\n.text:00000000004031b4\n.text:00000000004031b9\n.text:00000000004031bd\n.text:00000000004031c0\n.text:00000000004031c5\n.text:00000000004031c7\n.text:00000000004031ca\n.text:00000000004031cc\n.text:00000000004031cf\n.text:00000000004031d4\n.text:00000000004031d9\n.text:00000000004031dd\n.text:00000000004031e0\n.text:00000000004031e5\n.text:00000000004031e9\n.text:00000000004031eb\n.text:00000000004031f0\n.text:00000000004031f5\n.text:00000000004031f8\n.text:00000000004031fd\n.text:0000000000403202\n.text:0000000000403207\n.text:000000000040320c\n.text:000000000040320f\n.text:0000000000403214\n.text:0000000000403216\n.text:0000000000403219\n.text:000000000040321c\n.text:000000000040321f\n.text:0000000000403222\n.text:0000000000403227\n.text:000000000040322a\n.text:000000000040322f\n.text:0000000000403232\n.text:0000000000403236\n.text:0000000000403237\n.text:0000000000403239\n.text:000000000040323b\n.text:000000000040323d\n.text:000000000040323f\n.text:0000000000403240\n.text:0000000000403245\n.text:0000000000403248\n.text:000000000040324d\n.text:0000000000403252\n.text:0000000000403256\n.text:0000000000403259\n.text:000000000040325e\n.text:0000000000403262\n.text:0000000000403264\n.text:0000000000403269\n.text:000000000040326e\n.text:0000000000403271\n.text:0000000000403274\n.text:0000000000403279\n.text:000000000040327e\n.text:0000000000403280\n.text:0000000000403285\n'
p678
tp679
sS'close_stdout'
p680
(S'\n__stdcall close_stdout()\n'
p681
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00403357;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x40a775,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00403357:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p682
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x0060f2e8]\nCALL 0x00407bf0\nTEST EAX,EAX\nJZ 0x00403357\nCMP byte ptr [0x0060f350],0x0\nJZ 0x0040336c\nCALL 0x00401800\nCMP dword ptr [RAX],0x20\nJNZ 0x0040336c\nMOV RDI,qword ptr [0x0060f320]\nCALL 0x00407bf0\nTEST EAX,EAX\nJNZ 0x004033b1\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x40adf0\nMOV EDX,0x5\nCALL 0x004018d0\nMOV R14,RAX\nMOV RBX,qword ptr [0x0060f348]\nCALL 0x00401800\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x004033bc\nXOR EDI,EDI\nMOV EDX,0x40a775\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x00401b70\nMOV EDI,dword ptr [0x0060f280]\nCALL 0x00401820\nMOV EDI,dword ptr [0x0060f280]\nCALL 0x00401820\nMOV RDI,RBX\nCALL 0x00404800\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40a771\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x00401b70\nMOV EDI,dword ptr [0x0060f280]\nCALL 0x00401820\n'
p683
S'55\n41 56\n53\n48 8b 3d ad bf 20 00\ne8 b0 48 00 00\n85 c0\n74 13\n80 3d 05 c0 20 00 00\n74 1f\ne8 ae e4 ff ff\n83 38 20\n75 15\n48 8b 3d c2 bf 20 00\ne8 8d 48 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe f0 ad 40 00\nba 05 00 00 00\ne8 53 e5 ff ff\n49 89 c6\n48 8b 1d c1 bf 20 00\ne8 74 e4 ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba 75 a7 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 ca e7 ff ff\n8b 3d d4 be 20 00\ne8 6f e4 ff ff\n8b 3d c9 be 20 00\ne8 64 e4 ff ff\n48 89 df\ne8 3c 14 00 00\n48 89 c1\n31 ff\nba 71 a7 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 96 e7 ff ff\n8b 3d a0 be 20 00\ne8 3b e4 ff ff\n'
p684
S'.text:0000000000403330\n.text:0000000000403331\n.text:0000000000403333\n.text:0000000000403334\n.text:000000000040333b\n.text:0000000000403340\n.text:0000000000403342\n.text:0000000000403344\n.text:000000000040334b\n.text:000000000040334d\n.text:0000000000403352\n.text:0000000000403355\n.text:0000000000403357\n.text:000000000040335e\n.text:0000000000403363\n.text:0000000000403365\n.text:0000000000403367\n.text:0000000000403368\n.text:000000000040336a\n.text:000000000040336b\n.text:000000000040336c\n.text:000000000040336e\n.text:0000000000403373\n.text:0000000000403378\n.text:000000000040337d\n.text:0000000000403380\n.text:0000000000403387\n.text:000000000040338c\n.text:000000000040338f\n.text:0000000000403391\n.text:0000000000403393\n.text:0000000000403395\n.text:000000000040339a\n.text:000000000040339c\n.text:000000000040339e\n.text:00000000004033a1\n.text:00000000004033a6\n.text:00000000004033ac\n.text:00000000004033b1\n.text:00000000004033b7\n.text:00000000004033bc\n.text:00000000004033bf\n.text:00000000004033c4\n.text:00000000004033c7\n.text:00000000004033c9\n.text:00000000004033ce\n.text:00000000004033d0\n.text:00000000004033d2\n.text:00000000004033d5\n.text:00000000004033da\n.text:00000000004033e0\n'
p685
tp686
sS'version_etc_ar'
p687
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p688
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p689
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00405490\nJMP 0x00405120\n'
p690
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p691
S'.text:0000000000405480\n.text:0000000000405487\n.text:0000000000405490\n.text:0000000000405496\n.text:000000000040549a\n.text:000000000040549c\n'
p692
tp693
sS'c_isxdigit'
p694
(S'\n__stdcall c_isxdigit()\n'
p695
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p696
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00407b5b\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p697
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p698
S'.text:0000000000407b40\n.text:0000000000407b43\n.text:0000000000407b46\n.text:0000000000407b48\n.text:0000000000407b52\n.text:0000000000407b54\n.text:0000000000407b57\n.text:0000000000407b5a\n.text:0000000000407b5b\n.text:0000000000407b5d\n'
p699
tp700
sS'__libc_csu_fini'
p701
(S'\n__stdcall __libc_csu_fini()\n'
p702
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p703
S'RET\n'
p704
S'f3 c3\n'
p705
S'.text:00000000004096d0\n'
p706
tp707
sS'abort'
p708
(S'\n__stdcall abort()\n'
p709
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_0060f030)();\u000a  return;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x0060f030]\n'
p711
S'ff 25 3a d8 20 00\n'
p712
S'.plt:00000000004017f0\n'
p713
tp714
sS'closedir'
p715
(S'\n__stdcall closedir(DIR * __dirp)\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint closedir(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_closedir_0060f120)();\u000a  return iVar1;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x0060f120]\n'
p718
S'ff 25 4a d7 20 00\n'
p719
S'.plt:00000000004019d0\n'
p720
tp721
sS'compute_bucket_size'
p722
(S'\n__stdcall compute_bucket_size(size_t candidate, Hash_tuning * tuning)\n'
p723
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000asize_t compute_bucket_size(size_t candidate,Hash_tuning *tuning)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  float fVar3;\u000a  \u000a  if (tuning->is_n_buckets == false) {\u000a    if ((long)candidate < 0) {\u000a      fVar3 = (float)((ulong)((uint)candidate & 1) | candidate >> 1);\u000a      fVar3 = fVar3 + fVar3;\u000a    }\u000a    else {\u000a      fVar3 = (float)candidate;\u000a    }\u000a    fVar3 = fVar3 / tuning->growth_threshold;\u000a    candidate = (long)fVar3;\u000a    if (DAT_0040bda8 <= fVar3) {\u000a      candidate = (long)(fVar3 - DAT_0040bda8) ^ 0x8000000000000000;\u000a    }\u000a    if (_DAT_0040bdac <= fVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  sVar1 = next_prime(candidate);\u000a  sVar2 = 0;\u000a  if (SUB168(ZEXT816(sVar1) * ZEXT816(8) >> 0x40,0) == 0) {\u000a    sVar2 = sVar1;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p724
S'CMP byte ptr [RSI + 0x10],0x0\nJNZ 0x004083f2\nTEST RDI,RDI\nJS 0x004083a2\nCVTSI2SS XMM0,RDI\nJMP 0x004083b7\nMOV RAX,RDI\nSHR RAX,1\nAND EDI,0x1\nOR RDI,RAX\nCVTSI2SS XMM0,RDI\nADDSS XMM0,XMM0\nDIVSS XMM0,dword ptr [RSI + 0x8]\nMOVSS XMM1,dword ptr [0x0040bda8]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RDI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RDI,RCX\nUCOMISS XMM0,dword ptr [0x0040bdac]\nJNC 0x00408411\nPUSH RAX\nCALL 0x00408c90\nMOV RSI,RAX\nMOV EDX,0x8\nXOR ECX,ECX\nMUL RDX\nCMOVNO RCX,RSI\nADD RSP,0x8\nMOV RAX,RCX\nRET\nXOR ECX,ECX\nMOV RAX,RCX\nRET\n'
p725
S'80 7e 10 00\n75 5c\n48 85 ff\n78 07\nf3 48 0f 2a c7\neb 15\n48 89 f8\n48 d1 e8\n83 e7 01\n48 09 c7\nf3 48 0f 2a c7\nf3 0f 58 c0\nf3 0f 5e 46 08\nf3 0f 10 0d e4 39 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f8\n0f 2e c1\n48 0f 43 f9\n0f 2e 05 bc 39 00 00\n73 1f\n50\ne8 98 08 00 00\n48 89 c6\nba 08 00 00 00\n31 c9\n48 f7 e2\n48 0f 41 ce\n48 83 c4 08\n48 89 c8\nc3\n31 c9\n48 89 c8\nc3\n'
p726
S'.text:0000000000408390\n.text:0000000000408394\n.text:0000000000408396\n.text:0000000000408399\n.text:000000000040839b\n.text:00000000004083a0\n.text:00000000004083a2\n.text:00000000004083a5\n.text:00000000004083a8\n.text:00000000004083ab\n.text:00000000004083ae\n.text:00000000004083b3\n.text:00000000004083b7\n.text:00000000004083bc\n.text:00000000004083c4\n.text:00000000004083c7\n.text:00000000004083cb\n.text:00000000004083d0\n.text:00000000004083da\n.text:00000000004083dd\n.text:00000000004083e2\n.text:00000000004083e5\n.text:00000000004083e9\n.text:00000000004083f0\n.text:00000000004083f2\n.text:00000000004083f3\n.text:00000000004083f8\n.text:00000000004083fb\n.text:0000000000408400\n.text:0000000000408402\n.text:0000000000408405\n.text:0000000000408409\n.text:000000000040840d\n.text:0000000000408410\n.text:0000000000408411\n.text:0000000000408413\n.text:0000000000408416\n'
p727
tp728
sS'change_file_owner'
p729
(S'\n__stdcall change_file_owner(FTS * fts, FTSENT * ent, Chown_option * chopt)\n'
p730
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000a_Bool change_file_owner(FTS *fts,FTSENT *ent,Chown_option *chopt)\u000a\u000a{\u000a  uint uVar1;\u000a  stat *orig_st;\u000a  __ino_t *p_Var2;\u000a  bool bVar3;\u000a  _Bool _Var4;\u000a  int iVar5;\u000a  RCH_status RVar6;\u000a  uint *puVar7;\u000a  undefined8 uVar8;\u000a  char *old_user;\u000a  char *file;\u000a  int *piVar9;\u000a  char *old_group;\u000a  char *user;\u000a  __gid_t in_ECX;\u000a  __uid_t _Var10;\u000a  uint in_R8D;\u000a  stat *psVar11;\u000a  uint in_R9D;\u000a  bool bVar12;\u000a  bool bVar13;\u000a  bool bVar14;\u000a  bool bVar15;\u000a  int *in_stack_00000008;\u000a  stat stat_buf;\u000a  stat local_c0;\u000a  \u000a  _Var10 = (__uid_t)chopt;\u000a  orig_st = (stat *)ent->fts_accpath;\u000a  file = ent->fts_path;\u000a  switch(ent->fts_info) {\u000a  case 1:\u000a    if (*(char *)(in_stack_00000008 + 1) != 0) {\u000a      p_Var2 = *(__ino_t **)(in_stack_00000008 + 2);\u000a      if (p_Var2 == (__ino_t *)0x0) {\u000a        return true;\u000a      }\u000a      if (ent->fts_statp[0].st_ino != *p_Var2) {\u000a        return true;\u000a      }\u000a      if (ent->fts_statp[0].st_dev != p_Var2[1]) {\u000a        return true;\u000a      }\u000a      if ((*file == '/') && (file[1] == 0)) {\u000a        uVar8 = dcgettext(0,"it is dangerous to operate recursively on %s",5);\u000a        file = quotearg_style((char *)0x4);\u000a        error(0,0,uVar8,file);\u000a      }\u000a      else {\u000a        uVar8 = dcgettext(0,"it is dangerous to operate recursively on %s (same as %s)",5);\u000a        file = quotearg_n_style((char *)0x0);\u000a        old_user = quotearg_n_style((char *)0x1);\u000a        error(0,0,uVar8,file,old_user);\u000a      }\u000a      uVar8 = dcgettext(0,"use --no-preserve-root to override this failsafe",5);\u000a      error(0,0,uVar8,uVar8);\u000a      fts_set(fts,ent);\u000a      fts_read(fts);\u000a      return false;\u000a    }\u000a    break;\u000a  case 2:\u000a    _Var4 = cycle_warning_required(fts,ent);\u000a    if (_Var4 != false) {\u000a      uVar8 = dcgettext(0,\u000a                        "WARNING: Circular directory structure.\u005cnThis almost certainly means that you have a corrupted file system.\u005cnNOTIFY YOUR SYSTEM MANAGER.\u005cnThe following directory is part of the cycle:\u005cn  %s\u005cn"\u000a                        ,5);\u000a      file = quotearg_n_style_colon((char *)0x0);\u000a      error(0,0,uVar8,file);\u000a      return false;\u000a    }\u000a    break;\u000a  case 4:\u000a    if (*(char *)((long)in_stack_00000008 + 0x11) != 0) goto LAB_00402a9b;\u000a    uVar1 = ent->fts_errno;\u000a    uVar8 = dcgettext(0,"cannot read directory %s",5);\u000a    old_user = quotearg_style((char *)0x4);\u000a    error(0,(ulong)uVar1,uVar8,old_user);\u000a    psVar11 = (stat *)0x0;\u000a    goto LAB_00402aa1;\u000a  case 6:\u000a    if (*(char *)(in_stack_00000008 + 1) == 0) {\u000a      return true;\u000a    }\u000a    break;\u000a  case 7:\u000a    if (*(char *)((long)in_stack_00000008 + 0x11) == 0) {\u000a      uVar1 = ent->fts_errno;\u000a      old_user = quotearg_n_style_colon((char *)0x0);\u000a      error(0,(ulong)uVar1,0x40a775,old_user);\u000a    }\u000a    goto LAB_00402a9b;\u000a  case 10:\u000a    if ((ent->fts_level == 0) && (ent->fts_number == 0)) {\u000a      ent->fts_number = 1;\u000a      fts_set(fts,ent);\u000a      return true;\u000a    }\u000a    if (*(char *)((long)in_stack_00000008 + 0x11) == 0) {\u000a      uVar1 = ent->fts_errno;\u000a      uVar8 = dcgettext(0,"cannot access %s",5);\u000a      old_user = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar1,uVar8,old_user);\u000a      psVar11 = (stat *)0x0;\u000a      goto LAB_00402aa1;\u000a    }\u000aLAB_00402a9b:\u000a    psVar11 = (stat *)0x0;\u000a    goto LAB_00402aa1;\u000a  }\u000a  if (((((in_R9D & in_R8D) != 0xffffffff) || (*in_stack_00000008 != 2)) ||\u000a      (*(long *)(in_stack_00000008 + 2) != 0)) || (*(char *)(in_stack_00000008 + 4) != 0)) {\u000a    psVar11 = ent->fts_statp;\u000a    if ((*(char *)(in_stack_00000008 + 4) == 0) || ((ent->fts_statp[0].st_mode & 0xf000) != 0xa000))\u000a    {\u000aLAB_00402a0c:\u000a      if (in_R8D == 0xffffffff) {\u000a        if (in_R9D == 0xffffffff) goto LAB_00402b32;\u000a      }\u000a      else {\u000a        bVar13 = psVar11->st_uid == in_R8D;\u000a        if ((in_R9D == 0xffffffff) || (psVar11->st_uid != in_R8D)) goto LAB_00402b34;\u000a      }\u000a      bVar13 = psVar11->st_gid == in_R9D;\u000a      goto LAB_00402b34;\u000a    }\u000a    iVar5 = fstatat(fts->fts_cwd_fd,(char *)orig_st,(stat *)&local_c0,0);\u000a    psVar11 = &local_c0;\u000a    if (iVar5 == 0) goto LAB_00402a0c;\u000a    psVar11 = &local_c0;\u000a    if (*(char *)((long)in_stack_00000008 + 0x11) == 0) {\u000a      puVar7 = (uint *)__errno_location();\u000a      uVar1 = *puVar7;\u000a      uVar8 = dcgettext(0,"cannot dereference %s",5);\u000a      old_user = quotearg_style((char *)0x4);\u000a      error(0,(ulong)uVar1,uVar8,old_user);\u000a    }\u000aLAB_00402aa1:\u000a    bVar13 = true;\u000a    bVar12 = false;\u000a    iVar5 = *in_stack_00000008;\u000a    bVar3 = false;\u000a    goto joined_r0x00402ccc;\u000a  }\u000a  psVar11 = ent->fts_statp;\u000aLAB_00402b32:\u000a  bVar13 = true;\u000aLAB_00402b34:\u000a  if ((((ent->fts_info < 7) && ((0x56U >> ((uint)ent->fts_info & 0x1f) & 1) != 0)) &&\u000a      (p_Var2 = *(__ino_t **)(in_stack_00000008 + 2), p_Var2 != (__ino_t *)0x0)) &&\u000a     ((psVar11->st_ino == *p_Var2 && (psVar11->st_dev == p_Var2[1])))) {\u000a    if ((*file == '/') && (file[1] == 0)) {\u000a      uVar8 = dcgettext(0,"it is dangerous to operate recursively on %s",5);\u000a      file = quotearg_style((char *)0x4);\u000a      error(0,0,uVar8,file);\u000a    }\u000a    else {\u000a      uVar8 = dcgettext(0,"it is dangerous to operate recursively on %s (same as %s)",5);\u000a      file = quotearg_n_style((char *)0x0);\u000a      old_user = quotearg_n_style((char *)0x1);\u000a      error(0,0,uVar8,file,old_user);\u000a    }\u000a    uVar8 = dcgettext(0,"use --no-preserve-root to override this failsafe",5);\u000a    error(0,0,uVar8,uVar8);\u000a    return false;\u000a  }\u000a  if (!bVar13) {\u000a    bVar13 = true;\u000a    bVar12 = true;\u000a    iVar5 = *in_stack_00000008;\u000a    bVar3 = false;\u000a    goto joined_r0x00402ccc;\u000a  }\u000a  if (*(char *)(in_stack_00000008 + 4) == 0) {\u000a    iVar5 = lchownat((char *)(ulong)(uint)fts->fts_cwd_fd);\u000a    bVar14 = iVar5 == 0;\u000a    if (bVar14) goto switchD_00402c6e_caseD_2;\u000a    piVar9 = __errno_location();\u000a    bVar15 = *piVar9 == 0x5f;\u000a    bVar13 = !bVar15;\u000a    bVar12 = bVar15 || bVar14;\u000a    bVar3 = true;\u000a    if (!bVar15 && !bVar14) goto switchD_00402c6e_caseD_6;\u000a    goto switchD_00402c6e_caseD_3;\u000a  }\u000a  RVar6 = restricted_chown((char *)(ulong)(uint)fts->fts_cwd_fd,orig_st);\u000a  if (4 < RVar6 + 0xfffffffe) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  bVar13 = true;\u000a  bVar12 = false;\u000a  bVar3 = false;\u000a  switch(RVar6) {\u000a  case RC_ok:\u000aswitchD_00402c6e_caseD_2:\u000a    bVar13 = true;\u000a    bVar3 = true;\u000a    bVar12 = true;\u000a  default:\u000aswitchD_00402c6e_caseD_3:\u000a    iVar5 = *in_stack_00000008;\u000a    break;\u000a  case RC_do_ordinary_chown:\u000a    iVar5 = chownat((char *)(ulong)(uint)fts->fts_cwd_fd);\u000a    bVar12 = iVar5 == 0;\u000a    bVar13 = true;\u000a    if (bVar12) {\u000a      bVar3 = true;\u000a      iVar5 = *in_stack_00000008;\u000a      break;\u000a    }\u000a  case RC_error:\u000aswitchD_00402c6e_caseD_6:\u000a    bVar3 = true;\u000a    if (*(char *)((long)in_stack_00000008 + 0x11) != 0) goto switchD_00402c6e_caseD_3;\u000a    puVar7 = (uint *)__errno_location();\u000a    uVar1 = *puVar7;\u000a    old_user = "changing group of %s";\u000a    if (_Var10 != 0xffffffff) {\u000a      old_user = "changing ownership of %s";\u000a    }\u000a    uVar8 = dcgettext(0,old_user,5);\u000a    old_user = quotearg_style((char *)0x4);\u000a    error(0,(ulong)uVar1,uVar8,old_user);\u000a    iVar5 = *in_stack_00000008;\u000a    bVar3 = true;\u000a  }\u000ajoined_r0x00402ccc:\u000a  if (iVar5 == 2) goto LAB_00402e93;\u000a  if (((bVar3) && ((bVar12 & bVar13) != 0)) &&\u000a     (((_Var10 != 0xffffffff && (psVar11->st_uid != _Var10)) ||\u000a      ((in_ECX != 0xffffffff && (psVar11->st_gid != in_ECX)))))) {\u000a    old_user = (char *)0x3;\u000a    if (bVar12 != false) {\u000a      old_user = (char *)(ulong)(byte)(bVar13 + 1);\u000a    }\u000aLAB_00402e41:\u000a    old_group = uid_to_name();\u000a    user = gid_to_name();\u000a  }\u000a  else {\u000a    if (*in_stack_00000008 != 0) goto LAB_00402e93;\u000a    old_user = (char *)0x3;\u000a    if (bVar12 != false) {\u000a      old_user = (char *)(ulong)((uint)bVar13 * 3 + 1);\u000a    }\u000a    if (psVar11 != (stat *)0x0) goto LAB_00402e41;\u000a    old_group = (char *)0x0;\u000a    user = (char *)0x0;\u000a  }\u000a  describe_change(file,old_user,old_group,user,*(char **)(in_stack_00000008 + 6));\u000a  free(old_group);\u000a  free(user);\u000aLAB_00402e93:\u000a  if (*(char *)(in_stack_00000008 + 1) == 0) {\u000a    fts_set(fts,ent);\u000a  }\u000a  return (_Bool)(bVar12 != false);\u000a}\u000a\u000a
p731
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xc8\nMOV R12D,R9D\nMOV R14D,R8D\nMOV dword ptr [RSP + 0x24],ECX\nMOV dword ptr [RSP + 0x14],EDX\nMOV RBP,RSI\nMOV RSI,qword ptr [0x100 + RSP]\nMOV RBX,qword ptr [RBP + 0x30]\nMOV R13,qword ptr [RBP + 0x38]\nMOVZX EAX,word ptr [RBP + 0x70]\nDEC EAX\nMOVZX EAX,AX\nCMP EAX,0x9\nJA 0x0040291c\nJMP qword ptr [0x40a9d0 + RAX*0x8]\nCMP byte ptr [RSI + 0x4],0x0\nJZ 0x0040291c\nMOV RDX,R13\nMOV R13,RDI\nMOV RAX,qword ptr [RSI + 0x8]\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x00402eac\nMOV RCX,qword ptr [0x80 + RBP]\nCMP RCX,qword ptr [RAX]\nJNZ 0x00402eac\nMOV RCX,qword ptr [RBP + 0x78]\nCMP RCX,qword ptr [RAX + 0x8]\nJNZ 0x00402eac\nMOV R12,RBP\nMOV RBP,RDX\nCMP byte ptr [RBP],0x2f\nJNZ 0x004027be\nCMP byte ptr [RBP + 0x1],0x0\nJZ 0x00402efe\nXOR EDI,EDI\nMOV ESI,0x40aa96\nMOV EDX,0x5\nCALL 0x004018d0\nMOV R14,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,RBP\nCALL 0x00404660\nMOV R15,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV EDX,0x40ae3a\nCALL 0x00404660\nMOV RBP,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nMOV RCX,R15\nMOV R8,RBP\nCALL 0x00401b70\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40aad0\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401b70\nMOV EDX,0x4\nMOV RBP,R13\nMOV RDI,RBP\nMOV RSI,R12\nCALL 0x004076c0\nMOV RDI,RBP\nCALL 0x00406550\nJMP 0x00402eac\nMOV R15,RDI\nMOV RSI,RBP\nCALL 0x00405840\nMOV RDI,R15\nMOV RSI,qword ptr [0x100 + RSP]\nTEST AL,AL\nJZ 0x0040291c\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40ab2b\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RBP,RAX\nXOR EDI,EDI\nMOV ESI,0x3\nMOV RDX,R13\nCALL 0x00404820\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x00401b70\nJMP 0x00402eac\nMOV qword ptr [RSP + 0x28],R13\nMOV BL,0x1\nCMP byte ptr [RSI + 0x11],0x0\nJNZ 0x00402a9b\nMOV R14D,dword ptr [RBP + 0x40]\nMOV R15,RDI\nXOR EDI,EDI\nMOV ESI,0x40ab12\nMOV EDX,0x5\nMOV R12,RBP\nCALL 0x004018d0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x28]\nCALL 0x00404740\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,RBP\nCALL 0x00401b70\nMOV RBP,R12\nMOV RDI,R15\nXOR R8D,R8D\nMOV RSI,qword ptr [0x100 + RSP]\nJMP 0x00402a9e\nCMP byte ptr [RSI + 0x4],0x0\nJZ 0x00402ac1\nMOV EAX,R12D\nAND EAX,R14D\nCMP EAX,-0x1\nJNZ 0x0040293d\nCMP dword ptr [RSI],0x2\nJNZ 0x0040293d\nCMP qword ptr [RSI + 0x8],0x0\nJNZ 0x0040293d\nCMP byte ptr [RSI + 0x10],0x0\nJZ 0x00402b2e\nLEA R8,[RBP + 0x78]\nCMP byte ptr [RSI + 0x10],0x0\nJZ 0x00402a0c\nMOV EAX,0xf000\nAND EAX,dword ptr [0x90 + RBP]\nCMP EAX,0xa000\nJNZ 0x00402a0c\nMOV R15,RDI\nMOV EDI,dword ptr [R15 + 0x2c]\nLEA RDX,[RSP + 0x38]\nXOR ECX,ECX\nMOV RSI,RBX\nMOV qword ptr [RSP + 0x18],RBP\nCALL 0x00409740\nLEA R8,[RSP + 0x38]\nMOV RBP,qword ptr [RSP + 0x18]\nMOV RDI,R15\nMOV RSI,qword ptr [0x100 + RSP]\nTEST EAX,EAX\nJZ 0x00402a0c\nMOV qword ptr [RSP + 0x28],R13\nMOV BL,0x1\nLEA R8,[RSP + 0x38]\nCMP byte ptr [RSI + 0x11],0x0\nJNZ 0x00402a9e\nMOV RBP,RDI\nMOV R15,R8\nCALL 0x00401800\nMOV R13D,dword ptr [RAX]\nXOR R14D,R14D\nXOR EDI,EDI\nMOV ESI,0x40abe5\nMOV EDX,0x5\nCALL 0x004018d0\nMOV R12,RBP\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x28]\nCALL 0x00404740\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R13D\nMOV RDX,RBP\nCALL 0x00401b70\nMOV R8,R15\nMOV RBP,qword ptr [RSP + 0x18]\nMOV RDI,R12\nMOV RSI,qword ptr [0x100 + RSP]\nJMP 0x00402aa1\nCMP R14D,-0x1\nJZ 0x00402ab2\nMOV ECX,dword ptr [R8 + 0x1c]\nCMP ECX,R14D\nSETZ AL\nCMP R12D,-0x1\nJZ 0x00402b34\nCMP ECX,R14D\nJZ 0x00402ab8\nJMP 0x00402b34\nMOV qword ptr [RSP + 0x28],R13\nMOV BL,0x1\nCMP byte ptr [RSI + 0x11],0x0\nJNZ 0x00402a9b\nMOV R14D,dword ptr [RBP + 0x40]\nMOV R12,RDI\nXOR EDI,EDI\nMOV R15,RSI\nMOV ESI,0x3\nMOV RDX,qword ptr [RSP + 0x28]\nCALL 0x00404820\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40a775\nXOR EAX,EAX\nMOV ESI,R14D\nCALL 0x00401b70\nMOV RDI,R12\nMOV RSI,R15\nJMP 0x00402a9b\nCMP qword ptr [RBP + 0x58],0x0\nJNZ 0x00402a8e\nCMP qword ptr [RBP + 0x20],0x0\nJZ 0x00402b12\nMOV qword ptr [RSP + 0x28],R13\nMOV BL,0x1\nCMP byte ptr [RSI + 0x11],0x0\nJZ 0x00402ac8\nXOR R8D,R8D\nXOR R14D,R14D\nXOR R12D,R12D\nCMP dword ptr [RSI],0x2\nJNZ 0x00402dc9\nJMP 0x00402e93\nCMP R12D,-0x1\nJZ 0x00402b32\nCMP dword ptr [R8 + 0x20],R12D\nSETZ AL\nJMP 0x00402b34\nMOV BL,0x1\nJMP 0x00402eac\nMOV R14D,dword ptr [RBP + 0x40]\nMOV R13,RDI\nXOR EDI,EDI\nMOV R12,RSI\nMOV ESI,0x40ab01\nMOV EDX,0x5\nCALL 0x004018d0\nMOV R15,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x28]\nCALL 0x00404740\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,R14D\nMOV RDX,R15\nCALL 0x00401b70\nXOR R8D,R8D\nMOV RDI,R13\nMOV RSI,R12\nJMP 0x00402a9e\nMOV qword ptr [RBP + 0x20],0x1\nMOV EDX,0x1\nMOV RSI,RBP\nCALL 0x004076c0\nMOV BL,0x1\nJMP 0x00402eac\nLEA R8,[RBP + 0x78]\nMOV AL,0x1\nMOVZX ECX,word ptr [RBP + 0x70]\nCMP ECX,0x6\nJA 0x00402c02\nMOV EDX,0x56\nBT EDX,ECX\nJNC 0x00402c02\nMOV RCX,qword ptr [RSI + 0x8]\nTEST RCX,RCX\nJZ 0x00402c02\nMOV RDX,qword ptr [R8 + 0x8]\nCMP RDX,qword ptr [RCX]\nJNZ 0x00402c02\nMOV RDX,qword ptr [R8]\nCMP RDX,qword ptr [RCX + 0x8]\nJNZ 0x00402c02\nCMP byte ptr [R13],0x2f\nJNZ 0x00402b88\nCMP byte ptr [R13 + 0x1],0x0\nJZ 0x00402ec7\nXOR EDI,EDI\nMOV ESI,0x40aa96\nMOV EDX,0x5\nCALL 0x004018d0\nMOV R14,RAX\nXOR EDI,EDI\nMOV ESI,0x4\nMOV RDX,R13\nCALL 0x00404660\nMOV RBP,RAX\nMOV EDI,0x1\nMOV ESI,0x4\nMOV EDX,0x40ae3a\nCALL 0x00404660\nMOV RBX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nMOV RCX,RBP\nMOV R8,RBX\nCALL 0x00401b70\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40aad0\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401b70\nJMP 0x00402eac\nTEST AL,AL\nMOV qword ptr [RSP + 0x28],R13\nJZ 0x00402cc1\nMOV R15,RBP\nMOV qword ptr [RSP + 0x18],RDI\nMOV EDI,dword ptr [RDI + 0x2c]\nCMP byte ptr [RSI + 0x10],0x0\nJZ 0x00402cd7\nMOV dword ptr [RSP],R12D\nMOV qword ptr [RSP + 0x30],RBX\nMOV RSI,RBX\nMOV R13,R8\nMOV RDX,R8\nMOV ECX,dword ptr [RSP + 0x14]\nMOV R8D,dword ptr [RSP + 0x24]\nMOV R9D,R14D\nCALL 0x00402f40\nADD EAX,-0x2\nCMP EAX,0x4\nJA 0x00402f35\nMOV BL,0x1\nXOR R12D,R12D\nXOR R14D,R14D\nMOV RSI,qword ptr [0x100 + RSP]\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RBP,R15\nMOV R8,R13\nJMP qword ptr [0x40aa20 + RAX*0x8]\nMOV RAX,qword ptr [RSP + 0x18]\nMOV EDI,dword ptr [RAX + 0x2c]\nMOV RSI,qword ptr [RSP + 0x30]\nMOV EDX,dword ptr [RSP + 0x14]\nMOV ECX,dword ptr [RSP + 0x24]\nCALL 0x004033f0\nMOV R8,R13\nMOV RBP,R15\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [0x100 + RSP]\nTEST EAX,EAX\nSETZ R12B\nMOV BL,0x1\nJNZ 0x00402d38\nMOV R14B,0x1\nCMP dword ptr [RSI],0x2\nJNZ 0x00402dc9\nJMP 0x00402e93\nMOV BL,0x1\nXOR R14D,R14D\nMOV R12B,0x1\nCMP dword ptr [RSI],0x2\nJNZ 0x00402dc9\nJMP 0x00402e93\nMOV RSI,RBX\nMOV EDX,dword ptr [RSP + 0x14]\nMOV ECX,dword ptr [RSP + 0x24]\nMOV RBX,R8\nCALL 0x00403400\nMOV R8,RBX\nTEST EAX,EAX\nMOV RSI,qword ptr [0x100 + RSP]\nMOV RDI,qword ptr [RSP + 0x18]\nMOV RBP,R15\nJZ 0x00402db8\nMOV R14,RDI\nSETZ R13B\nCALL 0x00401800\nMOV R8,RBX\nMOV RBP,R15\nMOV RSI,qword ptr [0x100 + RSP]\nCMP dword ptr [RAX],0x5f\nSETZ R12B\nSETNZ BL\nOR R12B,R13B\nMOV RDI,R14\nMOV R14B,0x1\nJNZ 0x00402dc0\nMOV R14B,0x1\nCMP byte ptr [RSI + 0x11],0x0\nJNZ 0x00402dc0\nMOV R13,RDI\nMOV RBP,R8\nCALL 0x00401800\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x30],EAX\nCMP dword ptr [RSP + 0x14],-0x1\nMOV EAX,0x40abfb\nMOV ESI,0x40ac14\nCMOVNZ RSI,RAX\nXOR EDI,EDI\nMOV EDX,0x5\nCALL 0x004018d0\nMOV qword ptr [RSP + 0x18],RBP\nMOV RBP,RAX\nMOV EDI,0x4\nMOV RSI,qword ptr [RSP + 0x28]\nCALL 0x00404740\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,dword ptr [RSP + 0x30]\nMOV RDX,RBP\nCALL 0x00401b70\nMOV RBP,R15\nMOV RDI,R13\nMOV R8,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [0x100 + RSP]\nCMP dword ptr [RSI],0x2\nJNZ 0x00402dc9\nJMP 0x00402e93\nMOV BL,0x1\nMOV R14B,0x1\nMOV R12B,0x1\nCMP dword ptr [RSI],0x2\nJZ 0x00402e93\nTEST R14B,R14B\nJZ 0x00402df7\nMOV EAX,R12D\nAND AL,BL\nJZ 0x00402df7\nCMP dword ptr [RSP + 0x14],-0x1\nJZ 0x00402de6\nMOV EAX,dword ptr [RSP + 0x14]\nCMP dword ptr [R8 + 0x1c],EAX\nJNZ 0x00402e27\nCMP dword ptr [RSP + 0x24],-0x1\nJZ 0x00402df7\nMOV EAX,dword ptr [RSP + 0x24]\nCMP dword ptr [R8 + 0x20],EAX\nJNZ 0x00402e27\nCMP dword ptr [RSI],0x0\nJNZ 0x00402e93\nMOV qword ptr [RSP + 0x18],RDI\nTEST R12B,R12B\nMOVZX EAX,BL\nLEA EAX,[RAX + RAX*0x2 + 0x1]\nMOV R13D,0x3\nCMOVNZ R13D,EAX\nTEST R8,R8\nJZ 0x00402ec0\nMOV R15,RSI\nJMP 0x00402e41\nMOV R15,RSI\nMOV qword ptr [RSP + 0x18],RDI\nINC BL\nTEST R12B,R12B\nMOVZX EAX,BL\nMOV R13D,0x3\nCMOVNZ R13D,EAX\nMOV RBX,R8\nMOV EDI,dword ptr [RBX + 0x1c]\nCALL 0x004025d0\nMOV R14,RAX\nMOV EDI,dword ptr [RBX + 0x20]\nCALL 0x004025a0\nMOV RBX,RAX\nMOV RSI,R15\nMOV R8,qword ptr [RSI + 0x18]\nMOV R9,qword ptr [RSI + 0x20]\nMOV RDI,qword ptr [RSP + 0x28]\nMOV R15,RSI\nMOV ESI,R13D\nMOV RDX,R14\nMOV RCX,RBX\nCALL 0x004030e0\nMOV RDI,R14\nCALL 0x004017e0\nMOV RDI,RBX\nCALL 0x004017e0\nMOV RSI,R15\nMOV RDI,qword ptr [RSP + 0x18]\nCMP byte ptr [RSI + 0x4],0x0\nJNZ 0x00402ea6\nMOV EDX,0x4\nMOV RSI,RBP\nCALL 0x004076c0\nTEST R12B,R12B\nSETNZ BL\nMOV EAX,EBX\nADD RSP,0xc8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR R14D,R14D\nXOR EBX,EBX\nJMP 0x00402e5d\nXOR EDI,EDI\nMOV ESI,0x40aa69\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RBX,RAX\nMOV EDI,0x4\nMOV RSI,R13\nCALL 0x00404740\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401b70\nJMP 0x00402bd9\nXOR EDI,EDI\nMOV ESI,0x40aa69\nMOV EDX,0x5\nCALL 0x004018d0\nMOV R14,RAX\nMOV EDI,0x4\nMOV RSI,RBP\nCALL 0x00404740\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x00401b70\nJMP 0x0040280f\nCALL 0x004017f0\n'
p732
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec c8 00 00 00\n45 89 cc\n45 89 c6\n89 4c 24 24\n89 54 24 14\n48 89 f5\n48 8b b4 24 00 01 00 00\n48 8b 5d 30\n4c 8b 6d 38\n0f b7 45 70\nff c8\n0f b7 c0\n83 f8 09\n0f 87 b8 01 00 00\nff 24 c5 d0 a9 40 00\n80 7e 04 00\n0f 84 a7 01 00 00\n4c 89 ea\n49 89 fd\n48 8b 46 08\nb3 01\n48 85 c0\n0f 84 22 07 00 00\n48 8b 8d 80 00 00 00\n48 3b 08\n0f 85 12 07 00 00\n48 8b 4d 78\n48 3b 48 08\n0f 85 04 07 00 00\n49 89 ec\n48 89 d5\n80 7d 00 2f\n75 0a\n80 7d 01 00\n0f 84 40 07 00 00\n31 ff\nbe 96 aa 40 00\nba 05 00 00 00\ne8 01 f1 ff ff\n49 89 c6\n31 ff\nbe 04 00 00 00\n48 89 ea\ne8 7f 1e 00 00\n49 89 c7\nbf 01 00 00 00\nbe 04 00 00 00\nba 3a ae 40 00\ne8 68 1e 00 00\n48 89 c5\n31 ff\n31 f6\n31 c0\n4c 89 f2\n4c 89 f9\n49 89 e8\ne8 61 f3 ff ff\n31 db\n31 ff\nbe d0 aa 40 00\nba 05 00 00 00\ne8 ae f0 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 3d f3 ff ff\nba 04 00 00 00\n4c 89 ed\n48 89 ef\n4c 89 e6\ne8 7a 4e 00 00\n48 89 ef\ne8 02 3d 00 00\ne9 59 06 00 00\n49 89 ff\n48 89 ee\ne8 e2 2f 00 00\n4c 89 ff\n48 8b b4 24 00 01 00 00\n84 c0\n0f 84 ab 00 00 00\n31 db\n31 ff\nbe 2b ab 40 00\nba 05 00 00 00\ne8 4c f0 ff ff\n48 89 c5\n31 ff\nbe 03 00 00 00\n4c 89 ea\ne8 8a 1f 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 c9 f2 ff ff\ne9 00 06 00 00\n4c 89 6c 24 28\nb3 01\n80 7e 11 00\n0f 85 de 01 00 00\n44 8b 75 40\n49 89 ff\n31 ff\nbe 12 ab 40 00\nba 05 00 00 00\n49 89 ec\ne8 f8 ef ff ff\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 28\ne8 56 1e 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n48 89 ea\ne8 74 f2 ff ff\n4c 89 e5\n4c 89 ff\n45 31 c0\n48 8b b4 24 00 01 00 00\ne9 8c 01 00 00\n80 7e 04 00\n0f 84 a5 01 00 00\n44 89 e0\n44 21 f0\n83 f8 ff\n75 16\n83 3e 02\n75 11\n48 83 7e 08 00\n75 0a\n80 7e 10 00\n0f 84 f1 01 00 00\n4c 8d 45 78\n80 7e 10 00\n0f 84 c1 00 00 00\nb8 00 f0 00 00\n23 85 90 00 00 00\n3d 00 a0 00 00\n0f 85 ab 00 00 00\n49 89 ff\n41 8b 7f 2c\n48 8d 54 24 38\n31 c9\n48 89 de\n48 89 6c 24 18\ne8 c4 6d 00 00\n4c 8d 44 24 38\n48 8b 6c 24 18\n4c 89 ff\n48 8b b4 24 00 01 00 00\n85 c0\n74 77\n4c 89 6c 24 28\nb3 01\n4c 8d 44 24 38\n80 7e 11 00\n0f 85 f3 00 00 00\n48 89 fd\n4d 89 c7\ne8 4a ee ff ff\n44 8b 28\n45 31 f6\n31 ff\nbe e5 ab 40 00\nba 05 00 00 00\ne8 03 ef ff ff\n49 89 ec\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 28\ne8 5e 1d 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 ee\n48 89 ea\ne8 7c f1 ff ff\n4d 89 f8\n48 8b 6c 24 18\n4c 89 e7\n48 8b b4 24 00 01 00 00\ne9 95 00 00 00\n41 83 fe ff\n0f 84 9c 00 00 00\n41 8b 48 1c\n44 39 f1\n0f 94 c0\n41 83 fc ff\n0f 84 0a 01 00 00\n44 39 f1\n0f 84 85 00 00 00\ne9 fc 00 00 00\n4c 89 6c 24 28\nb3 01\n80 7e 11 00\n75 56\n44 8b 75 40\n49 89 fc\n31 ff\n49 89 f7\nbe 03 00 00 00\n48 8b 54 24 28\ne8 c0 1d 00 00\n48 89 c1\n31 ff\nba 75 a7 40 00\n31 c0\n44 89 f6\ne8 fc f0 ff ff\n4c 89 e7\n4c 89 fe\neb 1f\n48 83 7d 58 00\n75 0b\n48 83 7d 20 00\n0f 84 84 00 00 00\n4c 89 6c 24 28\nb3 01\n80 7e 11 00\n74 2d\n45 31 c0\n45 31 f6\n45 31 e4\n83 3e 02\n0f 85 1c 03 00 00\ne9 e1 03 00 00\n41 83 fc ff\n74 7a\n45 39 60 20\n0f 94 c0\neb 73\nb3 01\ne9 e4 03 00 00\n44 8b 75 40\n49 89 fd\n31 ff\n49 89 f4\nbe 01 ab 40 00\nba 05 00 00 00\ne8 ed ed ff ff\n49 89 c7\nbf 04 00 00 00\n48 8b 74 24 28\ne8 4b 1c 00 00\n48 89 c1\n31 ff\n31 c0\n44 89 f6\n4c 89 fa\ne8 69 f0 ff ff\n45 31 c0\n4c 89 ef\n4c 89 e6\neb 8c\n48 c7 45 20 01 00 00 00\nba 01 00 00 00\n48 89 ee\ne8 99 4b 00 00\nb3 01\ne9 7e 03 00 00\n4c 8d 45 78\nb0 01\n0f b7 4d 70\n83 f9 06\n0f 87 c1 00 00 00\nba 56 00 00 00\n0f a3 ca\n0f 83 b3 00 00 00\n48 8b 4e 08\n48 85 c9\n0f 84 a6 00 00 00\n49 8b 50 08\n48 3b 11\n0f 85 99 00 00 00\n49 8b 10\n48 3b 51 08\n0f 85 8c 00 00 00\n41 80 7d 00 2f\n75 0b\n41 80 7d 01 00\n0f 84 3f 03 00 00\n31 ff\nbe 96 aa 40 00\nba 05 00 00 00\ne8 37 ed ff ff\n49 89 c6\n31 ff\nbe 04 00 00 00\n4c 89 ea\ne8 b5 1a 00 00\n48 89 c5\nbf 01 00 00 00\nbe 04 00 00 00\nba 3a ae 40 00\ne8 9e 1a 00 00\n48 89 c3\n31 ff\n31 f6\n31 c0\n4c 89 f2\n48 89 e9\n49 89 d8\ne8 97 ef ff ff\n31 db\n31 ff\nbe d0 aa 40 00\nba 05 00 00 00\ne8 e4 ec ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 73 ef ff ff\ne9 aa 02 00 00\n84 c0\n4c 89 6c 24 28\n0f 84 b2 00 00 00\n49 89 ef\n48 89 7c 24 18\n8b 7f 2c\n80 7e 10 00\n0f 84 b3 00 00 00\n44 89 24 24\n48 89 5c 24 30\n48 89 de\n4d 89 c5\n4c 89 c2\n8b 4c 24 14\n44 8b 44 24 24\n45 89 f1\ne8 f9 02 00 00\n83 c0 fe\n83 f8 04\n0f 87 e2 02 00 00\nb3 01\n45 31 e4\n45 31 f6\n48 8b b4 24 00 01 00 00\n48 8b 7c 24 18\n4c 89 fd\n4d 89 e8\nff 24 c5 20 aa 40 00\n48 8b 44 24 18\n8b 78 2c\n48 8b 74 24 30\n8b 54 24 14\n8b 4c 24 24\ne8 61 07 00 00\n4d 89 e8\n4c 89 fd\n48 8b 7c 24 18\n48 8b b4 24 00 01 00 00\n85 c0\n41 0f 94 c4\nb3 01\n0f 85 88 00 00 00\n41 b6 01\n83 3e 02\n0f 85 0d 01 00 00\ne9 d2 01 00 00\nb3 01\n45 31 f6\n41 b4 01\n83 3e 02\n0f 85 f7 00 00 00\ne9 bc 01 00 00\n48 89 de\n8b 54 24 14\n8b 4c 24 24\n4c 89 c3\ne8 16 07 00 00\n49 89 d8\n85 c0\n48 8b b4 24 00 01 00 00\n48 8b 7c 24 18\n4c 89 fd\n0f 84 b3 00 00 00\n49 89 fe\n41 0f 94 c5\ne8 ef ea ff ff\n49 89 d8\n4c 89 fd\n48 8b b4 24 00 01 00 00\n83 38 5f\n41 0f 94 c4\n0f 95 c3\n45 08 ec\n4c 89 f7\n41 b6 01\n0f 85 88 00 00 00\n41 b6 01\n80 7e 11 00\n75 7f\n49 89 fd\n4c 89 c5\ne8 b4 ea ff ff\n8b 00\n89 44 24 30\n83 7c 24 14 ff\nb8 fb ab 40 00\nbe 14 ac 40 00\n48 0f 45 f0\n31 ff\nba 05 00 00 00\ne8 5f eb ff ff\n48 89 6c 24 18\n48 89 c5\nbf 04 00 00 00\n48 8b 74 24 28\ne8 b8 19 00 00\n48 89 c1\n31 ff\n31 c0\n8b 74 24 30\n48 89 ea\ne8 d5 ed ff ff\n4c 89 fd\n4c 89 ef\n4c 8b 44 24 18\n48 8b b4 24 00 01 00 00\n83 3e 02\n75 16\ne9 db 00 00 00\nb3 01\n41 b6 01\n41 b4 01\n83 3e 02\n0f 84 ca 00 00 00\n45 84 f6\n74 29\n44 89 e0\n20 d8\n74 22\n83 7c 24 14 ff\n74 0a\n8b 44 24 14\n41 39 40 1c\n75 41\n83 7c 24 24 ff\n74 0a\n8b 44 24 24\n41 39 40 20\n75 30\n83 3e 00\n0f 85 93 00 00 00\n48 89 7c 24 18\n45 84 e4\n0f b6 c3\n8d 44 40 01\n41 bd 03 00 00 00\n44 0f 45 e8\n4d 85 c0\n0f 84 9e 00 00 00\n49 89 f7\neb 1a\n49 89 f7\n48 89 7c 24 18\nfe c3\n45 84 e4\n0f b6 c3\n41 bd 03 00 00 00\n44 0f 45 e8\n4c 89 c3\n8b 7b 1c\ne8 84 f7 ff ff\n49 89 c6\n8b 7b 20\ne8 49 f7 ff ff\n48 89 c3\n4c 89 fe\n4c 8b 46 18\n4c 8b 4e 20\n48 8b 7c 24 28\n49 89 f7\n44 89 ee\n4c 89 f2\n48 89 d9\ne8 65 02 00 00\n4c 89 f7\ne8 5d e9 ff ff\n48 89 df\ne8 55 e9 ff ff\n4c 89 fe\n48 8b 7c 24 18\n80 7e 04 00\n75 0d\nba 04 00 00 00\n48 89 ee\ne8 1a 48 00 00\n45 84 e4\n0f 95 c3\n89 d8\n48 81 c4 c8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 31 f6\n31 db\neb 96\n31 ff\nbe 69 aa 40 00\nba 05 00 00 00\ne8 f8 e9 ff ff\n48 89 c3\nbf 04 00 00 00\n4c 89 ee\ne8 58 18 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 77 ec ff ff\ne9 db fc ff ff\n31 ff\nbe 69 aa 40 00\nba 05 00 00 00\ne8 c1 e9 ff ff\n49 89 c6\nbf 04 00 00 00\n48 89 ee\ne8 21 18 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n4c 89 f2\ne8 40 ec ff ff\ne9 da f8 ff ff\ne8 b6 e8 ff ff\n'
p733
S'.text:0000000000402720\n.text:0000000000402721\n.text:0000000000402723\n.text:0000000000402725\n.text:0000000000402727\n.text:0000000000402729\n.text:000000000040272a\n.text:0000000000402731\n.text:0000000000402734\n.text:0000000000402737\n.text:000000000040273b\n.text:000000000040273f\n.text:0000000000402742\n.text:000000000040274a\n.text:000000000040274e\n.text:0000000000402752\n.text:0000000000402756\n.text:0000000000402758\n.text:000000000040275b\n.text:000000000040275e\n.text:0000000000402764\n.text:000000000040276b\n.text:000000000040276f\n.text:0000000000402775\n.text:0000000000402778\n.text:000000000040277b\n.text:000000000040277f\n.text:0000000000402781\n.text:0000000000402784\n.text:000000000040278a\n.text:0000000000402791\n.text:0000000000402794\n.text:000000000040279a\n.text:000000000040279e\n.text:00000000004027a2\n.text:00000000004027a8\n.text:00000000004027ab\n.text:00000000004027ae\n.text:00000000004027b2\n.text:00000000004027b4\n.text:00000000004027b8\n.text:00000000004027be\n.text:00000000004027c0\n.text:00000000004027c5\n.text:00000000004027ca\n.text:00000000004027cf\n.text:00000000004027d2\n.text:00000000004027d4\n.text:00000000004027d9\n.text:00000000004027dc\n.text:00000000004027e1\n.text:00000000004027e4\n.text:00000000004027e9\n.text:00000000004027ee\n.text:00000000004027f3\n.text:00000000004027f8\n.text:00000000004027fb\n.text:00000000004027fd\n.text:00000000004027ff\n.text:0000000000402801\n.text:0000000000402804\n.text:0000000000402807\n.text:000000000040280a\n.text:000000000040280f\n.text:0000000000402811\n.text:0000000000402813\n.text:0000000000402818\n.text:000000000040281d\n.text:0000000000402822\n.text:0000000000402825\n.text:0000000000402827\n.text:0000000000402829\n.text:000000000040282b\n.text:000000000040282e\n.text:0000000000402833\n.text:0000000000402838\n.text:000000000040283b\n.text:000000000040283e\n.text:0000000000402841\n.text:0000000000402846\n.text:0000000000402849\n.text:000000000040284e\n.text:0000000000402853\n.text:0000000000402856\n.text:0000000000402859\n.text:000000000040285e\n.text:0000000000402861\n.text:0000000000402869\n.text:000000000040286b\n.text:0000000000402871\n.text:0000000000402873\n.text:0000000000402875\n.text:000000000040287a\n.text:000000000040287f\n.text:0000000000402884\n.text:0000000000402887\n.text:0000000000402889\n.text:000000000040288e\n.text:0000000000402891\n.text:0000000000402896\n.text:0000000000402899\n.text:000000000040289b\n.text:000000000040289d\n.text:000000000040289f\n.text:00000000004028a2\n.text:00000000004028a7\n.text:00000000004028ac\n.text:00000000004028b1\n.text:00000000004028b3\n.text:00000000004028b7\n.text:00000000004028bd\n.text:00000000004028c1\n.text:00000000004028c4\n.text:00000000004028c6\n.text:00000000004028cb\n.text:00000000004028d0\n.text:00000000004028d3\n.text:00000000004028d8\n.text:00000000004028db\n.text:00000000004028e0\n.text:00000000004028e5\n.text:00000000004028ea\n.text:00000000004028ed\n.text:00000000004028ef\n.text:00000000004028f1\n.text:00000000004028f4\n.text:00000000004028f7\n.text:00000000004028fc\n.text:00000000004028ff\n.text:0000000000402902\n.text:0000000000402905\n.text:000000000040290d\n.text:0000000000402912\n.text:0000000000402916\n.text:000000000040291c\n.text:000000000040291f\n.text:0000000000402922\n.text:0000000000402925\n.text:0000000000402927\n.text:000000000040292a\n.text:000000000040292c\n.text:0000000000402931\n.text:0000000000402933\n.text:0000000000402937\n.text:000000000040293d\n.text:0000000000402941\n.text:0000000000402945\n.text:000000000040294b\n.text:0000000000402950\n.text:0000000000402956\n.text:000000000040295b\n.text:0000000000402961\n.text:0000000000402964\n.text:0000000000402968\n.text:000000000040296d\n.text:000000000040296f\n.text:0000000000402972\n.text:0000000000402977\n.text:000000000040297c\n.text:0000000000402981\n.text:0000000000402986\n.text:0000000000402989\n.text:0000000000402991\n.text:0000000000402993\n.text:0000000000402995\n.text:000000000040299a\n.text:000000000040299c\n.text:00000000004029a1\n.text:00000000004029a5\n.text:00000000004029ab\n.text:00000000004029ae\n.text:00000000004029b1\n.text:00000000004029b6\n.text:00000000004029b9\n.text:00000000004029bc\n.text:00000000004029be\n.text:00000000004029c3\n.text:00000000004029c8\n.text:00000000004029cd\n.text:00000000004029d0\n.text:00000000004029d3\n.text:00000000004029d8\n.text:00000000004029dd\n.text:00000000004029e2\n.text:00000000004029e5\n.text:00000000004029e7\n.text:00000000004029e9\n.text:00000000004029ec\n.text:00000000004029ef\n.text:00000000004029f4\n.text:00000000004029f7\n.text:00000000004029fc\n.text:00000000004029ff\n.text:0000000000402a07\n.text:0000000000402a0c\n.text:0000000000402a10\n.text:0000000000402a16\n.text:0000000000402a1a\n.text:0000000000402a1d\n.text:0000000000402a20\n.text:0000000000402a24\n.text:0000000000402a2a\n.text:0000000000402a2d\n.text:0000000000402a33\n.text:0000000000402a38\n.text:0000000000402a3d\n.text:0000000000402a3f\n.text:0000000000402a43\n.text:0000000000402a45\n.text:0000000000402a49\n.text:0000000000402a4c\n.text:0000000000402a4e\n.text:0000000000402a51\n.text:0000000000402a56\n.text:0000000000402a5b\n.text:0000000000402a60\n.text:0000000000402a63\n.text:0000000000402a65\n.text:0000000000402a6a\n.text:0000000000402a6c\n.text:0000000000402a6f\n.text:0000000000402a74\n.text:0000000000402a77\n.text:0000000000402a7a\n.text:0000000000402a7c\n.text:0000000000402a81\n.text:0000000000402a83\n.text:0000000000402a88\n.text:0000000000402a8e\n.text:0000000000402a93\n.text:0000000000402a95\n.text:0000000000402a99\n.text:0000000000402a9b\n.text:0000000000402a9e\n.text:0000000000402aa1\n.text:0000000000402aa4\n.text:0000000000402aa7\n.text:0000000000402aad\n.text:0000000000402ab2\n.text:0000000000402ab6\n.text:0000000000402ab8\n.text:0000000000402abc\n.text:0000000000402abf\n.text:0000000000402ac1\n.text:0000000000402ac3\n.text:0000000000402ac8\n.text:0000000000402acc\n.text:0000000000402acf\n.text:0000000000402ad1\n.text:0000000000402ad4\n.text:0000000000402ad9\n.text:0000000000402ade\n.text:0000000000402ae3\n.text:0000000000402ae6\n.text:0000000000402aeb\n.text:0000000000402af0\n.text:0000000000402af5\n.text:0000000000402af8\n.text:0000000000402afa\n.text:0000000000402afc\n.text:0000000000402aff\n.text:0000000000402b02\n.text:0000000000402b07\n.text:0000000000402b0a\n.text:0000000000402b0d\n.text:0000000000402b10\n.text:0000000000402b12\n.text:0000000000402b1a\n.text:0000000000402b1f\n.text:0000000000402b22\n.text:0000000000402b27\n.text:0000000000402b29\n.text:0000000000402b2e\n.text:0000000000402b32\n.text:0000000000402b34\n.text:0000000000402b38\n.text:0000000000402b3b\n.text:0000000000402b41\n.text:0000000000402b46\n.text:0000000000402b49\n.text:0000000000402b4f\n.text:0000000000402b53\n.text:0000000000402b56\n.text:0000000000402b5c\n.text:0000000000402b60\n.text:0000000000402b63\n.text:0000000000402b69\n.text:0000000000402b6c\n.text:0000000000402b70\n.text:0000000000402b76\n.text:0000000000402b7b\n.text:0000000000402b7d\n.text:0000000000402b82\n.text:0000000000402b88\n.text:0000000000402b8a\n.text:0000000000402b8f\n.text:0000000000402b94\n.text:0000000000402b99\n.text:0000000000402b9c\n.text:0000000000402b9e\n.text:0000000000402ba3\n.text:0000000000402ba6\n.text:0000000000402bab\n.text:0000000000402bae\n.text:0000000000402bb3\n.text:0000000000402bb8\n.text:0000000000402bbd\n.text:0000000000402bc2\n.text:0000000000402bc5\n.text:0000000000402bc7\n.text:0000000000402bc9\n.text:0000000000402bcb\n.text:0000000000402bce\n.text:0000000000402bd1\n.text:0000000000402bd4\n.text:0000000000402bd9\n.text:0000000000402bdb\n.text:0000000000402bdd\n.text:0000000000402be2\n.text:0000000000402be7\n.text:0000000000402bec\n.text:0000000000402bef\n.text:0000000000402bf1\n.text:0000000000402bf3\n.text:0000000000402bf5\n.text:0000000000402bf8\n.text:0000000000402bfd\n.text:0000000000402c02\n.text:0000000000402c04\n.text:0000000000402c09\n.text:0000000000402c0f\n.text:0000000000402c12\n.text:0000000000402c17\n.text:0000000000402c1a\n.text:0000000000402c1e\n.text:0000000000402c24\n.text:0000000000402c28\n.text:0000000000402c2d\n.text:0000000000402c30\n.text:0000000000402c33\n.text:0000000000402c36\n.text:0000000000402c3a\n.text:0000000000402c3f\n.text:0000000000402c42\n.text:0000000000402c47\n.text:0000000000402c4a\n.text:0000000000402c4d\n.text:0000000000402c53\n.text:0000000000402c55\n.text:0000000000402c58\n.text:0000000000402c5b\n.text:0000000000402c63\n.text:0000000000402c68\n.text:0000000000402c6b\n.text:0000000000402c6e\n.text:0000000000402c75\n.text:0000000000402c7a\n.text:0000000000402c7d\n.text:0000000000402c82\n.text:0000000000402c86\n.text:0000000000402c8a\n.text:0000000000402c8f\n.text:0000000000402c92\n.text:0000000000402c95\n.text:0000000000402c9a\n.text:0000000000402ca2\n.text:0000000000402ca4\n.text:0000000000402ca8\n.text:0000000000402caa\n.text:0000000000402cb0\n.text:0000000000402cb3\n.text:0000000000402cb6\n.text:0000000000402cbc\n.text:0000000000402cc1\n.text:0000000000402cc3\n.text:0000000000402cc6\n.text:0000000000402cc9\n.text:0000000000402ccc\n.text:0000000000402cd2\n.text:0000000000402cd7\n.text:0000000000402cda\n.text:0000000000402cde\n.text:0000000000402ce2\n.text:0000000000402ce5\n.text:0000000000402cea\n.text:0000000000402ced\n.text:0000000000402cef\n.text:0000000000402cf7\n.text:0000000000402cfc\n.text:0000000000402cff\n.text:0000000000402d05\n.text:0000000000402d08\n.text:0000000000402d0c\n.text:0000000000402d11\n.text:0000000000402d14\n.text:0000000000402d17\n.text:0000000000402d1f\n.text:0000000000402d22\n.text:0000000000402d26\n.text:0000000000402d29\n.text:0000000000402d2c\n.text:0000000000402d2f\n.text:0000000000402d32\n.text:0000000000402d38\n.text:0000000000402d3b\n.text:0000000000402d3f\n.text:0000000000402d41\n.text:0000000000402d44\n.text:0000000000402d47\n.text:0000000000402d4c\n.text:0000000000402d4e\n.text:0000000000402d52\n.text:0000000000402d57\n.text:0000000000402d5c\n.text:0000000000402d61\n.text:0000000000402d65\n.text:0000000000402d67\n.text:0000000000402d6c\n.text:0000000000402d71\n.text:0000000000402d76\n.text:0000000000402d79\n.text:0000000000402d7e\n.text:0000000000402d83\n.text:0000000000402d88\n.text:0000000000402d8b\n.text:0000000000402d8d\n.text:0000000000402d8f\n.text:0000000000402d93\n.text:0000000000402d96\n.text:0000000000402d9b\n.text:0000000000402d9e\n.text:0000000000402da1\n.text:0000000000402da6\n.text:0000000000402dae\n.text:0000000000402db1\n.text:0000000000402db3\n.text:0000000000402db8\n.text:0000000000402dba\n.text:0000000000402dbd\n.text:0000000000402dc0\n.text:0000000000402dc3\n.text:0000000000402dc9\n.text:0000000000402dcc\n.text:0000000000402dce\n.text:0000000000402dd1\n.text:0000000000402dd3\n.text:0000000000402dd5\n.text:0000000000402dda\n.text:0000000000402ddc\n.text:0000000000402de0\n.text:0000000000402de4\n.text:0000000000402de6\n.text:0000000000402deb\n.text:0000000000402ded\n.text:0000000000402df1\n.text:0000000000402df5\n.text:0000000000402df7\n.text:0000000000402dfa\n.text:0000000000402e00\n.text:0000000000402e05\n.text:0000000000402e08\n.text:0000000000402e0b\n.text:0000000000402e0f\n.text:0000000000402e15\n.text:0000000000402e19\n.text:0000000000402e1c\n.text:0000000000402e22\n.text:0000000000402e25\n.text:0000000000402e27\n.text:0000000000402e2a\n.text:0000000000402e2f\n.text:0000000000402e31\n.text:0000000000402e34\n.text:0000000000402e37\n.text:0000000000402e3d\n.text:0000000000402e41\n.text:0000000000402e44\n.text:0000000000402e47\n.text:0000000000402e4c\n.text:0000000000402e4f\n.text:0000000000402e52\n.text:0000000000402e57\n.text:0000000000402e5a\n.text:0000000000402e5d\n.text:0000000000402e61\n.text:0000000000402e65\n.text:0000000000402e6a\n.text:0000000000402e6d\n.text:0000000000402e70\n.text:0000000000402e73\n.text:0000000000402e76\n.text:0000000000402e7b\n.text:0000000000402e7e\n.text:0000000000402e83\n.text:0000000000402e86\n.text:0000000000402e8b\n.text:0000000000402e8e\n.text:0000000000402e93\n.text:0000000000402e97\n.text:0000000000402e99\n.text:0000000000402e9e\n.text:0000000000402ea1\n.text:0000000000402ea6\n.text:0000000000402ea9\n.text:0000000000402eac\n.text:0000000000402eae\n.text:0000000000402eb5\n.text:0000000000402eb6\n.text:0000000000402eb8\n.text:0000000000402eba\n.text:0000000000402ebc\n.text:0000000000402ebe\n.text:0000000000402ebf\n.text:0000000000402ec0\n.text:0000000000402ec3\n.text:0000000000402ec5\n.text:0000000000402ec7\n.text:0000000000402ec9\n.text:0000000000402ece\n.text:0000000000402ed3\n.text:0000000000402ed8\n.text:0000000000402edb\n.text:0000000000402ee0\n.text:0000000000402ee3\n.text:0000000000402ee8\n.text:0000000000402eeb\n.text:0000000000402eed\n.text:0000000000402eef\n.text:0000000000402ef1\n.text:0000000000402ef4\n.text:0000000000402ef9\n.text:0000000000402efe\n.text:0000000000402f00\n.text:0000000000402f05\n.text:0000000000402f0a\n.text:0000000000402f0f\n.text:0000000000402f12\n.text:0000000000402f17\n.text:0000000000402f1a\n.text:0000000000402f1f\n.text:0000000000402f22\n.text:0000000000402f24\n.text:0000000000402f26\n.text:0000000000402f28\n.text:0000000000402f2b\n.text:0000000000402f30\n.text:0000000000402f35\n'
p734
tp735
sS'version_etc'
p736
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p737
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p738
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00405552\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x004054b0\nADD RSP,0xd8\nRET\n'
p739
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p740
S'.text:0000000000405510\n.text:0000000000405517\n.text:0000000000405519\n.text:000000000040551b\n.text:0000000000405520\n.text:0000000000405525\n.text:000000000040552a\n.text:0000000000405532\n.text:000000000040553a\n.text:0000000000405542\n.text:000000000040554a\n.text:0000000000405552\n.text:0000000000405557\n.text:000000000040555c\n.text:0000000000405561\n.text:0000000000405566\n.text:000000000040556e\n.text:0000000000405573\n.text:000000000040557b\n.text:0000000000405582\n.text:0000000000405585\n.text:000000000040558a\n.text:0000000000405591\n'
p741
tp742
sS'hash_rehash'
p743
(S'\n__stdcall hash_rehash(Hash_table * table, size_t candidate)\n'
p744
V\u000a_Bool hash_rehash(Hash_table *table,size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *local_68;\u000a  hash_entry *local_60;\u000a  size_t local_58;\u000a  undefined4 local_50;\u000a  undefined4 uStack76;\u000a  undefined4 uStack72;\u000a  undefined4 uStack68;\u000a  Hash_tuning *local_40;\u000a  size_t (*local_38)(void *,size_t);\u000a  _Bool (*local_30)(void *,void *);\u000a  void (*local_28)(void *);\u000a  hash_entry *local_20;\u000a  \u000a  local_58 = compute_bucket_size(candidate,table->tuning);\u000a  if (local_58 != 0) {\u000a    if (local_58 == table->n_buckets) {\u000a      return true;\u000a    }\u000a    local_68 = (hash_entry *)rpl_calloc(local_58,0x10);\u000a    if (local_68 != (hash_entry *)0x0) {\u000a      local_60 = local_68 + local_58;\u000a      local_50 = 0;\u000a      uStack76 = 0;\u000a      uStack72 = 0;\u000a      uStack68 = 0;\u000a      local_40 = table->tuning;\u000a      local_38 = table->hasher;\u000a      local_30 = table->comparator;\u000a      local_28 = table->data_freer;\u000a      local_20 = table->free_entry_list;\u000a      _Var1 = transfer_entries((Hash_table *)&local_68,table);\u000a      if (_Var1 != false) {\u000a        free(table->bucket);\u000a        table->bucket = local_68;\u000a        table->bucket_limit = local_60;\u000a        table->n_buckets = local_58;\u000a        table->n_buckets_used = CONCAT44(uStack76,local_50);\u000a        table->free_entry_list = local_20;\u000a        return true;\u000a      }\u000a      table->free_entry_list = local_20;\u000a      _Var1 = transfer_entries(table,(Hash_table *)&local_68);\u000a      if ((_Var1 == false) ||\u000a         (_Var1 = transfer_entries(table,(Hash_table *)&local_68), _Var1 == false)) {\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      free(local_68);\u000a    }\u000a  }\u000a  return false;\u000a}\u000a\u000a
p745
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x50\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x28]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL 0x00408390\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x004086c1\nMOV R14B,0x1\nCMP RBP,qword ptr [RBX + 0x10]\nJZ 0x004086c4\nMOV ESI,0x10\nMOV RDI,RBP\nCALL 0x00405b40\nMOV qword ptr [RSP],RAX\nTEST RAX,RAX\nJZ 0x004086c1\nMOV qword ptr [RSP + 0x10],RBP\nSHL RBP,0x4\nADD RBP,qword ptr [RSP]\nMOV qword ptr [RSP + 0x8],RBP\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RSP + 0x18],XMM0\nMOV RAX,qword ptr [RBX + 0x28]\nMOV qword ptr [RSP + 0x28],RAX\nMOV RAX,qword ptr [RBX + 0x30]\nMOV qword ptr [RSP + 0x30],RAX\nMOV RAX,qword ptr [RBX + 0x38]\nMOV qword ptr [RSP + 0x38],RAX\nMOV RAX,qword ptr [RBX + 0x40]\nMOV qword ptr [RSP + 0x40],RAX\nMOV RAX,qword ptr [RBX + 0x48]\nMOV qword ptr [RSP + 0x48],RAX\nMOV RDI,RSP\nXOR EDX,EDX\nMOV RSI,RBX\nCALL 0x004086e0\nTEST AL,AL\nJZ 0x0040868a\nMOV RDI,qword ptr [RBX]\nCALL 0x004017e0\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,qword ptr [RSP + 0x10]\nMOV qword ptr [RBX + 0x10],RAX\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBX + 0x18],RAX\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nJMP 0x004086c4\nMOV RAX,qword ptr [RSP + 0x48]\nMOV qword ptr [RBX + 0x48],RAX\nMOV RSI,RSP\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x004086e0\nTEST AL,AL\nJZ 0x004086d0\nMOV RSI,RSP\nXOR EDX,EDX\nMOV RDI,RBX\nCALL 0x004086e0\nTEST AL,AL\nJZ 0x004086d0\nMOV RDI,qword ptr [RSP]\nCALL 0x004017e0\nXOR R14D,R14D\nMOV EAX,R14D\nADD RSP,0x50\nPOP RBX\nPOP R14\nPOP RBP\nRET\nCALL 0x004017f0\n'
p746
S'55\n41 56\n53\n48 83 ec 50\n48 89 fb\n48 8b 43 28\n48 89 f7\n48 89 c6\ne8 c6 fd ff ff\n48 89 c5\n48 85 ed\n0f 84 eb 00 00 00\n41 b6 01\n48 3b 6b 10\n0f 84 e1 00 00 00\nbe 10 00 00 00\n48 89 ef\ne8 50 d5 ff ff\n48 89 04 24\n48 85 c0\n0f 84 c4 00 00 00\n48 89 6c 24 10\n48 c1 e5 04\n48 03 2c 24\n48 89 6c 24 08\n0f 57 c0\n0f 11 44 24 18\n48 8b 43 28\n48 89 44 24 28\n48 8b 43 30\n48 89 44 24 30\n48 8b 43 38\n48 89 44 24 38\n48 8b 43 40\n48 89 44 24 40\n48 8b 43 48\n48 89 44 24 48\n48 89 e7\n31 d2\n48 89 de\ne8 8f 00 00 00\n84 c0\n74 35\n48 8b 3b\ne8 83 91 ff ff\n48 8b 04 24\n48 89 03\n48 8b 44 24 08\n48 89 43 08\n48 8b 44 24 10\n48 89 43 10\n48 8b 44 24 18\n48 89 43 18\n48 8b 44 24 48\n48 89 43 48\neb 3a\n48 8b 44 24 48\n48 89 43 48\n48 89 e6\nba 01 00 00 00\n48 89 df\ne8 3d 00 00 00\n84 c0\n74 29\n48 89 e6\n31 d2\n48 89 df\ne8 2c 00 00 00\n84 c0\n74 18\n48 8b 3c 24\ne8 1f 91 ff ff\n45 31 f6\n44 89 f0\n48 83 c4 50\n5b\n41 5e\n5d\nc3\ne8 1b 91 ff ff\n'
p747
S'.text:00000000004085b0\n.text:00000000004085b1\n.text:00000000004085b3\n.text:00000000004085b4\n.text:00000000004085b8\n.text:00000000004085bb\n.text:00000000004085bf\n.text:00000000004085c2\n.text:00000000004085c5\n.text:00000000004085ca\n.text:00000000004085cd\n.text:00000000004085d0\n.text:00000000004085d6\n.text:00000000004085d9\n.text:00000000004085dd\n.text:00000000004085e3\n.text:00000000004085e8\n.text:00000000004085eb\n.text:00000000004085f0\n.text:00000000004085f4\n.text:00000000004085f7\n.text:00000000004085fd\n.text:0000000000408602\n.text:0000000000408606\n.text:000000000040860a\n.text:000000000040860f\n.text:0000000000408612\n.text:0000000000408617\n.text:000000000040861b\n.text:0000000000408620\n.text:0000000000408624\n.text:0000000000408629\n.text:000000000040862d\n.text:0000000000408632\n.text:0000000000408636\n.text:000000000040863b\n.text:000000000040863f\n.text:0000000000408644\n.text:0000000000408647\n.text:0000000000408649\n.text:000000000040864c\n.text:0000000000408651\n.text:0000000000408653\n.text:0000000000408655\n.text:0000000000408658\n.text:000000000040865d\n.text:0000000000408661\n.text:0000000000408664\n.text:0000000000408669\n.text:000000000040866d\n.text:0000000000408672\n.text:0000000000408676\n.text:000000000040867b\n.text:000000000040867f\n.text:0000000000408684\n.text:0000000000408688\n.text:000000000040868a\n.text:000000000040868f\n.text:0000000000408693\n.text:0000000000408696\n.text:000000000040869b\n.text:000000000040869e\n.text:00000000004086a3\n.text:00000000004086a5\n.text:00000000004086a7\n.text:00000000004086aa\n.text:00000000004086ac\n.text:00000000004086af\n.text:00000000004086b4\n.text:00000000004086b6\n.text:00000000004086b8\n.text:00000000004086bc\n.text:00000000004086c1\n.text:00000000004086c4\n.text:00000000004086c7\n.text:00000000004086cb\n.text:00000000004086cc\n.text:00000000004086ce\n.text:00000000004086cf\n.text:00000000004086d0\n'
p748
tp749
sS'lseek'
p750
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_0060f0f8)();\u000a  return _Var1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x0060f0f8]\n'
p753
S'ff 25 72 d7 20 00\n'
p754
S'.plt:0000000000401980\n'
p755
tp756
sS'AD_compare'
p757
(S'\n__stdcall AD_compare(void * x, void * y)\n'
p758
V\u000a_Bool AD_compare(void *x,void *y)\u000a\u000a{\u000a  if (*(long *)((long)x + 8) == *(long *)((long)y + 8)) {\u000a    return (_Bool)(*(long *)x == *(long *)y);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p759
S'MOV RAX,qword ptr [RDI + 0x8]\nCMP RAX,qword ptr [RSI + 0x8]\nJNZ 0x00407844\nMOV RAX,qword ptr [RDI]\nCMP RAX,qword ptr [RSI]\nSETZ AL\nRET\nXOR EAX,EAX\nRET\n'
p760
S'48 8b 47 08\n48 3b 46 08\n75 0a\n48 8b 07\n48 3b 06\n0f 94 c0\nc3\n31 c0\nc3\n'
p761
S'.text:0000000000407830\n.text:0000000000407834\n.text:0000000000407838\n.text:000000000040783a\n.text:000000000040783d\n.text:0000000000407840\n.text:0000000000407843\n.text:0000000000407844\n.text:0000000000407846\n'
p762
tp763
sS'hash_get_first'
p764
(S'\n__stdcall hash_get_first(Hash_table * table)\n'
p765
V\u000avoid * hash_get_first(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  if (table->n_entries == 0) {\u000a    return (void *)0x0;\u000a  }\u000a  phVar1 = table->bucket;\u000a  if (phVar1 < table->bucket_limit) {\u000a    do {\u000a      if (phVar1->data != (void *)0x0) {\u000a        return phVar1->data;\u000a      }\u000a      phVar1 = phVar1 + 1;\u000a    } while (phVar1 < table->bucket_limit);\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p766
S'CMP qword ptr [RDI + 0x20],0x0\nJZ 0x00408053\nMOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJC 0x0040804a\nJMP 0x00408056\nADD RCX,0x10\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x00408056\nMOV RAX,qword ptr [RCX]\nTEST RAX,RAX\nJZ 0x00408040\nRET\nXOR EAX,EAX\nRET\nPUSH RAX\nCALL 0x004017f0\n'
p767
S'48 83 7f 20 00\n74 2c\n48 8b 0f\n48 3b 4f 08\n72 1a\neb 24\n48 83 c1 10\n48 3b 4f 08\n73 0c\n48 8b 01\n48 85 c0\n74 ee\nc3\n31 c0\nc3\n50\ne8 94 97 ff ff\n'
p768
S'.text:0000000000408020\n.text:0000000000408025\n.text:0000000000408027\n.text:000000000040802a\n.text:000000000040802e\n.text:0000000000408030\n.text:0000000000408040\n.text:0000000000408044\n.text:0000000000408048\n.text:000000000040804a\n.text:000000000040804d\n.text:0000000000408050\n.text:0000000000408052\n.text:0000000000408053\n.text:0000000000408055\n.text:0000000000408056\n.text:0000000000408057\n'
p769
tp770
sS'parse_user_spec'
p771
(S'\n__stdcall parse_user_spec(char * spec, uid_t * uid, gid_t * gid, char * * username, char * * groupname)\n'
p772
V\u000achar * parse_user_spec(char *spec,uid_t *uid,gid_t *gid,char **username,char **groupname)\u000a\u000a{\u000a  char *separator;\u000a  char *pcVar1;\u000a  char *pcVar2;\u000a  \u000a  if (gid == (gid_t *)0x0) {\u000a    separator = (char *)0x0;\u000a  }\u000a  else {\u000a    separator = strchr(spec,0x3a);\u000a  }\u000a  pcVar1 = parse_with_separator(spec,separator,uid,gid,username,groupname);\u000a  pcVar2 = pcVar1;\u000a  if ((((gid != (gid_t *)0x0) && (pcVar2 = pcVar1, separator == (char *)0x0)) &&\u000a      (pcVar2 = pcVar1, pcVar1 != (char *)0x0)) &&\u000a     ((separator = strchr(spec,0x2e), pcVar2 = pcVar1, separator != (char *)0x0 &&\u000a      (pcVar2 = parse_with_separator(spec,separator,uid,gid,username,groupname),\u000a      pcVar2 != (char *)0x0)))) {\u000a    pcVar2 = pcVar1;\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p773
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBP,R8\nMOV R15,RCX\nMOV RBX,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST RBX,RBX\nJZ 0x00404de1\nMOV ESI,0x3a\nMOV RDI,R13\nCALL 0x00401940\nMOV R14,RAX\nJMP 0x00404de4\nXOR R14D,R14D\nMOV RDI,R13\nMOV RSI,R14\nMOV RDX,R12\nMOV RCX,RBX\nMOV R8,R15\nMOV qword ptr [RSP],RBP\nMOV R9,RBP\nCALL 0x00404e60\nMOV RBP,RAX\nTEST RBX,RBX\nJZ 0x00404e44\nTEST R14,R14\nJNZ 0x00404e44\nTEST RBP,RBP\nJZ 0x00404e44\nMOV ESI,0x2e\nMOV RDI,R13\nCALL 0x00401940\nTEST RAX,RAX\nJZ 0x00404e44\nMOV RDI,R13\nMOV RSI,RAX\nMOV RDX,R12\nMOV RCX,RBX\nMOV R8,R15\nMOV R9,qword ptr [RSP]\nCALL 0x00404e60\nTEST RAX,RAX\nCMOVNZ RAX,RBP\nJMP 0x00404e47\nMOV RAX,RBP\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p774
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4c 89 c5\n49 89 cf\n48 89 d3\n49 89 f4\n49 89 fd\n48 85 db\n74 12\nbe 3a 00 00 00\n4c 89 ef\ne8 64 cb ff ff\n49 89 c6\neb 03\n45 31 f6\n4c 89 ef\n4c 89 f6\n4c 89 e2\n48 89 d9\n4d 89 f8\n48 89 2c 24\n49 89 e9\ne8 61 00 00 00\n48 89 c5\n48 85 db\n74 3d\n4d 85 f6\n75 38\n48 85 ed\n74 33\nbe 2e 00 00 00\n4c 89 ef\ne8 22 cb ff ff\n48 85 c0\n74 21\n4c 89 ef\n48 89 c6\n4c 89 e2\n48 89 d9\n4d 89 f8\n4c 8b 0c 24\ne8 25 00 00 00\n48 85 c0\n48 0f 45 c5\neb 03\n48 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p775
S'.text:0000000000404db0\n.text:0000000000404db1\n.text:0000000000404db3\n.text:0000000000404db5\n.text:0000000000404db7\n.text:0000000000404db9\n.text:0000000000404dba\n.text:0000000000404dbb\n.text:0000000000404dbe\n.text:0000000000404dc1\n.text:0000000000404dc4\n.text:0000000000404dc7\n.text:0000000000404dca\n.text:0000000000404dcd\n.text:0000000000404dcf\n.text:0000000000404dd4\n.text:0000000000404dd7\n.text:0000000000404ddc\n.text:0000000000404ddf\n.text:0000000000404de1\n.text:0000000000404de4\n.text:0000000000404de7\n.text:0000000000404dea\n.text:0000000000404ded\n.text:0000000000404df0\n.text:0000000000404df3\n.text:0000000000404df7\n.text:0000000000404dfa\n.text:0000000000404dff\n.text:0000000000404e02\n.text:0000000000404e05\n.text:0000000000404e07\n.text:0000000000404e0a\n.text:0000000000404e0c\n.text:0000000000404e0f\n.text:0000000000404e11\n.text:0000000000404e16\n.text:0000000000404e19\n.text:0000000000404e1e\n.text:0000000000404e21\n.text:0000000000404e23\n.text:0000000000404e26\n.text:0000000000404e29\n.text:0000000000404e2c\n.text:0000000000404e2f\n.text:0000000000404e32\n.text:0000000000404e36\n.text:0000000000404e3b\n.text:0000000000404e3e\n.text:0000000000404e42\n.text:0000000000404e44\n.text:0000000000404e47\n.text:0000000000404e4b\n.text:0000000000404e4c\n.text:0000000000404e4e\n.text:0000000000404e50\n.text:0000000000404e52\n.text:0000000000404e54\n.text:0000000000404e55\n'
p776
tp777
sS'hash_get_n_entries'
p778
(S'\n__stdcall hash_get_n_entries(Hash_table * table)\n'
p779
V\u000asize_t hash_get_n_entries(Hash_table *table)\u000a\u000a{\u000a  return table->n_entries;\u000a}\u000a\u000a
p780
S'MOV RAX,qword ptr [RDI + 0x20]\nRET\n'
p781
S'48 8b 47 20\nc3\n'
p782
S'.text:0000000000407df0\n.text:0000000000407df4\n'
p783
tp784
sS'quotearg_n_mem'
p785
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p786
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p787
S'MOV ECX,0x60f360\nJMP 0x00404470\n'
p788
S'b9 60 f3 60 00\ne9 36 fe ff ff\n'
p789
S'.text:0000000000404630\n.text:0000000000404635\n'
p790
tp791
sS'__printf_chk'
p792
(S'\n__stdcall __printf_chk()\n'
p793
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_0060f1e0)();\u000a  return;\u000a}\u000a\u000a
p794
S'JMP qword ptr [0x0060f1e0]\n'
p795
S'ff 25 8a d6 20 00\n'
p796
S'.plt:0000000000401b50\n'
p797
tp798
sS'gid_to_name'
p799
(S'\n__stdcall gid_to_name()\n'
p800
V\u000achar * gid_to_name(void)\u000a\u000a{\u000a  group *pgVar1;\u000a  char *string;\u000a  __gid_t __gid;\u000a  char buf [21];\u000a  char acStack40 [32];\u000a  \u000a  pgVar1 = getgrgid(__gid);\u000a  if (pgVar1 == (group *)0x0) {\u000a    string = umaxtostr((ulong)__gid,acStack40);\u000a  }\u000a  else {\u000a    string = pgVar1->gr_name;\u000a  }\u000a  string = xstrdup(string);\u000a  return string;\u000a}\u000a\u000a
p801
S'PUSH RBX\nSUB RSP,0x20\nMOV EBX,EDI\nCALL 0x00401950\nTEST RAX,RAX\nJZ 0x004025b6\nMOV RDI,qword ptr [RAX]\nJMP 0x004025c3\nMOV EDI,EBX\nMOV RSI,RSP\nCALL 0x00403410\nMOV RDI,RAX\nCALL 0x004057b0\nADD RSP,0x20\nPOP RBX\nRET\n'
p802
S'53\n48 83 ec 20\n89 fb\ne8 a4 f3 ff ff\n48 85 c0\n74 05\n48 8b 38\neb 0d\n89 df\n48 89 e6\ne8 50 0e 00 00\n48 89 c7\ne8 e8 31 00 00\n48 83 c4 20\n5b\nc3\n'
p803
S'.text:00000000004025a0\n.text:00000000004025a1\n.text:00000000004025a5\n.text:00000000004025a7\n.text:00000000004025ac\n.text:00000000004025af\n.text:00000000004025b1\n.text:00000000004025b4\n.text:00000000004025b6\n.text:00000000004025b8\n.text:00000000004025bb\n.text:00000000004025c0\n.text:00000000004025c3\n.text:00000000004025c8\n.text:00000000004025cc\n.text:00000000004025cd\n'
p804
tp805
sS'hash_lookup'
p806
(S'\n__stdcall hash_lookup(Hash_table * table, void * entry)\n'
p807
V\u000avoid * hash_lookup(Hash_table *table,void *entry)\u000a\u000a{\u000a  _Bool _Var1;\u000a  hash_entry *phVar2;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  if (phVar2->data != (void *)0x0) {\u000a    while (phVar2 != (hash_entry *)0x0) {\u000a      if ((phVar2->data == entry) ||\u000a         (_Var1 = (*table->comparator)(entry,phVar2->data), _Var1 != false)) {\u000a        return phVar2->data;\u000a      }\u000a      phVar2 = phVar2->next;\u000a    }\u000a  }\u000a  return (void *)0x0;\u000a}\u000a\u000a
p808
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,RSI\nMOV R15,RDI\nCALL 0x00407ff0\nMOV RBX,RAX\nXOR R14D,R14D\nCMP qword ptr [RBX],0x0\nJZ 0x00407fe1\nTEST RBX,RBX\nJZ 0x00407fe1\nXOR R14D,R14D\nNOP word ptr [RAX + RAX*0x1]\nMOV RSI,qword ptr [RBX]\nCMP RSI,R12\nJZ 0x00407fde\nMOV RDI,R12\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x00407fde\nMOV RBX,qword ptr [RBX + 0x8]\nTEST RBX,RBX\nJNZ 0x00407fc0\nJMP 0x00407fe1\nMOV R14,qword ptr [RBX]\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p809
S'41 57\n41 56\n41 54\n53\n50\n49 89 f4\n49 89 ff\ne8 4d 00 00 00\n48 89 c3\n45 31 f6\n48 83 3b 00\n74 32\n48 85 db\n74 2d\n45 31 f6\n66 0f 1f 84 00 00 00 00 00\n48 8b 33\n4c 39 e6\n74 16\n4c 89 e7\n41 ff 57 38\n84 c0\n75 0b\n48 8b 5b 08\n48 85 db\n75 e4\neb 03\n4c 8b 33\n4c 89 f0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p810
S'.text:0000000000407f90\n.text:0000000000407f92\n.text:0000000000407f94\n.text:0000000000407f96\n.text:0000000000407f97\n.text:0000000000407f98\n.text:0000000000407f9b\n.text:0000000000407f9e\n.text:0000000000407fa3\n.text:0000000000407fa6\n.text:0000000000407fa9\n.text:0000000000407fad\n.text:0000000000407faf\n.text:0000000000407fb2\n.text:0000000000407fb4\n.text:0000000000407fb7\n.text:0000000000407fc0\n.text:0000000000407fc3\n.text:0000000000407fc6\n.text:0000000000407fc8\n.text:0000000000407fcb\n.text:0000000000407fcf\n.text:0000000000407fd1\n.text:0000000000407fd3\n.text:0000000000407fd7\n.text:0000000000407fda\n.text:0000000000407fdc\n.text:0000000000407fde\n.text:0000000000407fe1\n.text:0000000000407fe4\n.text:0000000000407fe8\n.text:0000000000407fe9\n.text:0000000000407feb\n.text:0000000000407fed\n.text:0000000000407fef\n'
p811
tp812
sS'fchdir'
p813
(S'\n__stdcall fchdir(int __fd)\n'
p814
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fchdir(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fchdir_0060f1c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p815
S'JMP qword ptr [0x0060f1c0]\n'
p816
S'ff 25 aa d6 20 00\n'
p817
S'.plt:0000000000401b10\n'
p818
tp819
sS'emit_ancillary_info'
p820
(S'\n__stdcall emit_ancillary_info()\n'
p821
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00409d70;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("chown",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "chown";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,"chown",uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/","chown");\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x40a55d;\u000a  if (__s2 == "chown") {\u000a    uVar3 = 0x40a858;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p822
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x409d70\nMOV ESI,0x40a83c\nNOP\nMOV EDI,0x40a74a\nCALL 0x00401a20\nTEST EAX,EAX\nJZ 0x00401fcb\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401fb0\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x40a74a\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x40a89b\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x40a778\nMOV ECX,0x40a8b2\nXOR EAX,EAX\nCALL 0x00401b50\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401b40\nTEST RAX,RAX\nJZ 0x00402054\nMOV ESI,0x40a8d9\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x00401810\nTEST EAX,EAX\nJZ 0x00402054\nXOR EDI,EDI\nMOV ESI,0x40a8dd\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x40a74a\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401b50\nXOR EDI,EDI\nMOV ESI,0x40a922\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,RAX\nMOV R14D,0x40a74a\nMOV EDI,0x1\nMOV EDX,0x40a8b2\nMOV ECX,0x40a74a\nXOR EAX,EAX\nCALL 0x00401b50\nXOR EDI,EDI\nMOV ESI,0x40a941\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x40a858\nMOV ECX,0x40a55d\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401b50\n'
p823
S'41 56\n53\n50\nbb 70 9d 40 00\nbe 3c a8 40 00\n66 90\nbf 4a a7 40 00\ne8 66 fa ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 4a a7 40 00\n48 0f 45 d8\n31 ff\nbe 9b a8 40 00\nba 05 00 00 00\ne8 e4 f8 ff ff\n48 89 c6\nbf 01 00 00 00\nba 78 a7 40 00\nb9 b2 a8 40 00\n31 c0\ne8 4b fb ff ff\nbf 05 00 00 00\n31 f6\ne8 2f fb ff ff\n48 85 c0\n74 3e\nbe d9 a8 40 00\nba 03 00 00 00\n48 89 c7\ne8 e8 f7 ff ff\n85 c0\n74 28\n31 ff\nbe dd a8 40 00\nba 05 00 00 00\ne8 93 f8 ff ff\n48 89 c1\nbf 01 00 00 00\nba 4a a7 40 00\n31 c0\n48 89 ce\ne8 fc fa ff ff\n31 ff\nbe 22 a9 40 00\nba 05 00 00 00\ne8 6b f8 ff ff\n48 89 c6\n41 be 4a a7 40 00\nbf 01 00 00 00\nba b2 a8 40 00\nb9 4a a7 40 00\n31 c0\ne8 cc fa ff ff\n31 ff\nbe 41 a9 40 00\nba 05 00 00 00\ne8 3b f8 ff ff\n48 89 c2\n4c 39 f3\nb8 58 a8 40 00\nb9 5d a5 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 8e fa ff ff\n'
p824
S'.text:0000000000401fa0\n.text:0000000000401fa2\n.text:0000000000401fa3\n.text:0000000000401fa4\n.text:0000000000401fa9\n.text:0000000000401fae\n.text:0000000000401fb0\n.text:0000000000401fb5\n.text:0000000000401fba\n.text:0000000000401fbc\n.text:0000000000401fbe\n.text:0000000000401fc2\n.text:0000000000401fc6\n.text:0000000000401fc9\n.text:0000000000401fcb\n.text:0000000000401fcf\n.text:0000000000401fd2\n.text:0000000000401fd7\n.text:0000000000401fdb\n.text:0000000000401fdd\n.text:0000000000401fe2\n.text:0000000000401fe7\n.text:0000000000401fec\n.text:0000000000401fef\n.text:0000000000401ff4\n.text:0000000000401ff9\n.text:0000000000401ffe\n.text:0000000000402000\n.text:0000000000402005\n.text:000000000040200a\n.text:000000000040200c\n.text:0000000000402011\n.text:0000000000402014\n.text:0000000000402016\n.text:000000000040201b\n.text:0000000000402020\n.text:0000000000402023\n.text:0000000000402028\n.text:000000000040202a\n.text:000000000040202c\n.text:000000000040202e\n.text:0000000000402033\n.text:0000000000402038\n.text:000000000040203d\n.text:0000000000402040\n.text:0000000000402045\n.text:000000000040204a\n.text:000000000040204c\n.text:000000000040204f\n.text:0000000000402054\n.text:0000000000402056\n.text:000000000040205b\n.text:0000000000402060\n.text:0000000000402065\n.text:0000000000402068\n.text:000000000040206e\n.text:0000000000402073\n.text:0000000000402078\n.text:000000000040207d\n.text:000000000040207f\n.text:0000000000402084\n.text:0000000000402086\n.text:000000000040208b\n.text:0000000000402090\n.text:0000000000402095\n.text:0000000000402098\n.text:000000000040209b\n.text:00000000004020a0\n.text:00000000004020a5\n.text:00000000004020a9\n.text:00000000004020ae\n.text:00000000004020b0\n.text:00000000004020b3\n.text:00000000004020b6\n.text:00000000004020ba\n.text:00000000004020bb\n.text:00000000004020bd\n'
p825
tp826
sS'version_etc_va'
p827
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p828
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p829
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x004054e0\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x004054ec\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00405501\nINC R9\nCMP R9,0xa\nJC 0x004054c0\nMOV R8,RSP\nCALL 0x00405120\nADD RSP,0x58\nRET\n'
p830
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p831
S'.text:00000000004054b0\n.text:00000000004054b4\n.text:00000000004054b7\n.text:00000000004054c0\n.text:00000000004054c3\n.text:00000000004054c7\n.text:00000000004054c9\n.text:00000000004054cc\n.text:00000000004054d0\n.text:00000000004054d4\n.text:00000000004054d7\n.text:00000000004054e0\n.text:00000000004054e4\n.text:00000000004054e8\n.text:00000000004054ec\n.text:00000000004054ef\n.text:00000000004054f3\n.text:00000000004054f6\n.text:00000000004054f8\n.text:00000000004054fb\n.text:00000000004054ff\n.text:0000000000405501\n.text:0000000000405504\n.text:0000000000405509\n.text:000000000040550d\n'
p832
tp833
sS'xzalloc'
p834
(S'\n__stdcall xzalloc(size_t s)\n'
p835
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p836
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x00405640\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x004019a0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p837
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 54 c2 ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p838
S'.text:0000000000405730\n.text:0000000000405732\n.text:0000000000405733\n.text:0000000000405734\n.text:0000000000405737\n.text:000000000040573c\n.text:000000000040573f\n.text:0000000000405741\n.text:0000000000405744\n.text:0000000000405747\n.text:000000000040574c\n.text:000000000040574f\n.text:0000000000405753\n.text:0000000000405754\n.text:0000000000405756\n'
p839
tp840
sS'hash_print_statistics'
p841
(S'\n__stdcall hash_print_statistics(Hash_table * table, FILE * stream)\n'
p842
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000avoid hash_print_statistics(Hash_table *table,FILE *stream)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  undefined auVar5 [16];\u000a  undefined auVar6 [16];\u000a  undefined4 uVar7;\u000a  \u000a  sVar1 = hash_get_n_entries(table);\u000a  sVar2 = hash_get_n_buckets(table);\u000a  sVar3 = hash_get_n_buckets_used(table);\u000a  sVar4 = hash_get_max_bucket_length(table);\u000a  __fprintf_chk(stream,1,0x40bdb0,sVar1);\u000a  __fprintf_chk(stream,1,"# buckets:         %lu\u005cn",sVar2);\u000a  uVar7 = SUB164(_DAT_0040bd60 >> 0x20,0);\u000a  auVar5 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar3) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_0040bd60,0),\u000a                                   SUB124(ZEXT812(sVar3) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_0040bd78,DAT_0040bd70));\u000a  auVar5 = addpd(CONCAT412(SUB164(auVar5 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar5,0),SUB168(auVar5 >> 0x40,0))),auVar5);\u000a  auVar6 = subpd(CONCAT88(SUB168(CONCAT412(uVar7,ZEXT812(sVar2) &\u000a                                                 (undefined  [12])0xffffffffffffffff |\u000a                                                 (undefined  [12])0x0 << 0x40) >> 0x40,0),\u000a                          CONCAT44(SUB164(_DAT_0040bd60,0),\u000a                                   SUB124(ZEXT812(sVar2) & (undefined  [12])0xffffffffffffffff,0))),\u000a                 CONCAT88(DAT_0040bd78,DAT_0040bd70));\u000a  auVar6 = addpd(CONCAT412(SUB164(auVar6 >> 0x20,0),\u000a                           CONCAT48(SUB164(auVar6,0),SUB168(auVar6 >> 0x40,0))),auVar6);\u000a  __fprintf_chk(CONCAT88(SUB168(auVar5 >> 0x40,0),\u000a                         (SUB168(auVar5,0) * _DAT_0040bd90) / SUB168(auVar6,0)),stream,1,\u000a                "# buckets used:    %lu (%.2f%%)\u005cn",sVar3);\u000a  __fprintf_chk(stream,1,"max bucket length: %lu\u005cn",sVar4);\u000a  return;\u000a}\u000a\u000a
p843
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R13,RSI\nMOV RBX,RDI\nCALL 0x00407df0\nMOV RBP,RAX\nMOV RDI,RBX\nCALL 0x00407dd0\nMOV R12,RAX\nMOV RDI,RBX\nCALL 0x00407de0\nMOV R15,RAX\nMOV RDI,RBX\nCALL 0x00407e00\nMOV R14,RAX\nMOV ESI,0x1\nMOV EDX,0x40bdb0\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,RBP\nCALL 0x00401c20\nMOV ESI,0x1\nMOV EDX,0x40bdc8\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R12\nCALL 0x00401c20\nMOVQ XMM1,R15\nMOVDQA XMM2,xmmword ptr [0x0040bd60]\nPUNPCKLDQ XMM1,XMM2\nMOVAPD XMM3,xmmword ptr [0x0040bd70]\nSUBPD XMM1,XMM3\nPSHUFD XMM0,XMM1,0x4e\nADDPD XMM0,XMM1\nMULSD XMM0,qword ptr [0x0040bd90]\nMOVQ XMM1,R12\nPUNPCKLDQ XMM1,XMM2\nSUBPD XMM1,XMM3\nPSHUFD XMM2,XMM1,0x4e\nADDPD XMM2,XMM1\nDIVSD XMM0,XMM2\nMOV ESI,0x1\nMOV EDX,0x40bde0\nMOV AL,0x1\nMOV RDI,R13\nMOV RCX,R15\nCALL 0x00401c20\nMOV ESI,0x1\nMOV EDX,0x40be01\nXOR EAX,EAX\nMOV RDI,R13\nMOV RCX,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00401c20\n'
p844
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 f5\n48 89 fb\ne8 3a ff ff ff\n48 89 c5\n48 89 df\ne8 0f ff ff ff\n49 89 c4\n48 89 df\ne8 14 ff ff ff\n49 89 c7\n48 89 df\ne8 29 ff ff ff\n49 89 c6\nbe 01 00 00 00\nba b0 bd 40 00\n31 c0\n4c 89 ef\n48 89 e9\ne8 2f 9d ff ff\nbe 01 00 00 00\nba c8 bd 40 00\n31 c0\n4c 89 ef\n4c 89 e1\ne8 18 9d ff ff\n66 49 0f 6e cf\n66 0f 6f 15 4b 3e 00 00\n66 0f 62 ca\n66 0f 28 1d 4f 3e 00 00\n66 0f 5c cb\n66 0f 70 c1 4e\n66 0f 58 c1\nf2 0f 59 05 5a 3e 00 00\n66 49 0f 6e cc\n66 0f 62 ca\n66 0f 5c cb\n66 0f 70 d1 4e\n66 0f 58 d1\nf2 0f 5e c2\nbe 01 00 00 00\nba e0 bd 40 00\nb0 01\n4c 89 ef\n4c 89 f9\ne8 b9 9c ff ff\nbe 01 00 00 00\nba 01 be 40 00\n31 c0\n4c 89 ef\n4c 89 f1\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\ne9 94 9c ff ff\n'
p845
S'.text:0000000000407ea0\n.text:0000000000407ea1\n.text:0000000000407ea3\n.text:0000000000407ea5\n.text:0000000000407ea7\n.text:0000000000407ea9\n.text:0000000000407eaa\n.text:0000000000407eab\n.text:0000000000407eae\n.text:0000000000407eb1\n.text:0000000000407eb6\n.text:0000000000407eb9\n.text:0000000000407ebc\n.text:0000000000407ec1\n.text:0000000000407ec4\n.text:0000000000407ec7\n.text:0000000000407ecc\n.text:0000000000407ecf\n.text:0000000000407ed2\n.text:0000000000407ed7\n.text:0000000000407eda\n.text:0000000000407edf\n.text:0000000000407ee4\n.text:0000000000407ee6\n.text:0000000000407ee9\n.text:0000000000407eec\n.text:0000000000407ef1\n.text:0000000000407ef6\n.text:0000000000407efb\n.text:0000000000407efd\n.text:0000000000407f00\n.text:0000000000407f03\n.text:0000000000407f08\n.text:0000000000407f0d\n.text:0000000000407f15\n.text:0000000000407f19\n.text:0000000000407f21\n.text:0000000000407f25\n.text:0000000000407f2a\n.text:0000000000407f2e\n.text:0000000000407f36\n.text:0000000000407f3b\n.text:0000000000407f3f\n.text:0000000000407f43\n.text:0000000000407f48\n.text:0000000000407f4c\n.text:0000000000407f50\n.text:0000000000407f55\n.text:0000000000407f5a\n.text:0000000000407f5c\n.text:0000000000407f5f\n.text:0000000000407f62\n.text:0000000000407f67\n.text:0000000000407f6c\n.text:0000000000407f71\n.text:0000000000407f73\n.text:0000000000407f76\n.text:0000000000407f79\n.text:0000000000407f7d\n.text:0000000000407f7e\n.text:0000000000407f80\n.text:0000000000407f82\n.text:0000000000407f84\n.text:0000000000407f86\n.text:0000000000407f87\n'
p846
tp847
sS'i_ring_empty'
p848
(S'\n__stdcall i_ring_empty(I_ring * ir)\n'
p849
V\u000a_Bool i_ring_empty(I_ring *ir)\u000a\u000a{\u000a  return ir->ir_empty;\u000a}\u000a\u000a
p850
S'MOV AL,byte ptr [RDI + 0x1c]\nRET\n'
p851
S'8a 47 1c\nc3\n'
p852
S'.text:0000000000408da0\n.text:0000000000408da3\n'
p853
tp854
sS'umaxtostr'
p855
(S'\n__stdcall umaxtostr(uintmax_t i, char * buf)\n'
p856
V\u000achar * umaxtostr(uintmax_t i,char *buf)\u000a\u000a{\u000a  bool bVar1;\u000a  \u000a  buf[0x14] = 0;\u000a  buf = buf + 0x14;\u000a  do {\u000a    buf[-1] = (char)i + ((byte)((SUB168(ZEXT816(i) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                                0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a    buf = buf + -1;\u000a    bVar1 = 9 < i;\u000a    i = i / 10;\u000a  } while (bVar1);\u000a  return buf;\u000a}\u000a\u000a
p857
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nADD RSI,0x14\nMOV R8,-0x3333333333333333\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,RCX\nMUL R8\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV EDI,ECX\nSUB EDI,EAX\nOR DIL,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nSHR RDX,0x3\nCMP RCX,0x9\nMOV RCX,RDX\nJA 0x00403430\nMOV RAX,RSI\nRET\n'
p858
S'48 89 f9\nc6 46 14 00\n48 83 c6 14\n49 b8 cd cc cc cc cc cc cc cc\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 c8\n49 f7 e0\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n89 cf\n29 c7\n40 80 cf 30\n40 88 7e ff\n48 ff ce\n48 c1 ea 03\n48 83 f9 09\n48 89 d1\n77 d1\n48 89 f0\nc3\n'
p859
S'.text:0000000000403410\n.text:0000000000403413\n.text:0000000000403417\n.text:000000000040341b\n.text:0000000000403425\n.text:0000000000403430\n.text:0000000000403433\n.text:0000000000403436\n.text:0000000000403438\n.text:000000000040343b\n.text:0000000000403440\n.text:0000000000403443\n.text:0000000000403445\n.text:0000000000403447\n.text:000000000040344b\n.text:000000000040344f\n.text:0000000000403452\n.text:0000000000403456\n.text:000000000040345a\n.text:000000000040345d\n.text:000000000040345f\n.text:0000000000403462\n'
p860
tp861
sS'next_prime'
p862
(S'\n__stdcall next_prime(size_t candidate)\n'
p863
V\u000asize_t next_prime(size_t candidate)\u000a\u000a{\u000a  _Bool _Var1;\u000a  size_t candidate_00;\u000a  size_t sVar2;\u000a  \u000a  candidate_00 = 10;\u000a  if (10 < candidate) {\u000a    candidate_00 = candidate;\u000a  }\u000a  candidate_00 = candidate_00 | 1;\u000a  while ((sVar2 = 0xffffffffffffffff, candidate_00 != 0xffffffffffffffff &&\u000a         (_Var1 = is_prime(candidate_00), sVar2 = candidate_00, _Var1 == false))) {\u000a    candidate_00 = candidate_00 + 2;\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p864
S'PUSH R14\nPUSH RBX\nPUSH RAX\nCMP RDI,0xa\nMOV EBX,0xa\nCMOVA RBX,RDI\nOR RBX,0x1\nMOV R14,-0x1\nCMP RBX,-0x1\nJNZ 0x00408cca\nJMP 0x00408cd9\nADD RBX,0x2\nCMP RBX,-0x1\nJZ 0x00408cd9\nMOV RDI,RBX\nCALL 0x00408cf0\nTEST AL,AL\nJZ 0x00408cc0\nMOV R14,RBX\nMOV RAX,R14\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p865
S'41 56\n53\n50\n48 83 ff 0a\nbb 0a 00 00 00\n48 0f 47 df\n48 83 cb 01\n49 c7 c6 ff ff ff ff\n48 83 fb ff\n75 18\neb 25\n48 83 c3 02\n48 83 fb ff\n74 0f\n48 89 df\ne8 1e 00 00 00\n84 c0\n74 ea\n49 89 de\n4c 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p866
S'.text:0000000000408c90\n.text:0000000000408c92\n.text:0000000000408c93\n.text:0000000000408c94\n.text:0000000000408c98\n.text:0000000000408c9d\n.text:0000000000408ca1\n.text:0000000000408ca5\n.text:0000000000408cac\n.text:0000000000408cb0\n.text:0000000000408cb2\n.text:0000000000408cc0\n.text:0000000000408cc4\n.text:0000000000408cc8\n.text:0000000000408cca\n.text:0000000000408ccd\n.text:0000000000408cd2\n.text:0000000000408cd4\n.text:0000000000408cd6\n.text:0000000000408cd9\n.text:0000000000408cdc\n.text:0000000000408ce0\n.text:0000000000408ce1\n.text:0000000000408ce3\n'
p867
tp868
sS'lchownat'
p869
(S'\n__stdcall lchownat(char * file)\n'
p870
V\u000aint lchownat(char *file)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fchownat_0060f230)();\u000a  return iVar1;\u000a}\u000a\u000a
p871
S'MOV R8D,0x100\nJMP 0x00401bf0\n'
p872
S'41 b8 00 01 00 00\ne9 e5 e7 ff ff\n'
p873
S'.text:0000000000403400\n.text:0000000000403406\n'
p874
tp875
sS'getpwnam'
p876
(S'\n__stdcall getpwnam(char * __name)\n'
p877
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000apasswd * getpwnam(char *__name)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  \u000a  ppVar1 = (passwd *)(*(code *)PTR_getpwnam_0060f158)();\u000a  return ppVar1;\u000a}\u000a\u000a
p878
S'JMP qword ptr [0x0060f158]\n'
p879
S'ff 25 12 d7 20 00\n'
p880
S'.plt:0000000000401a40\n'
p881
tp882
sS'hash_insert'
p883
(S'\n__stdcall hash_insert(Hash_table * table, void * entry)\n'
p884
V\u000avoid * hash_insert(Hash_table *table,void *entry)\u000a\u000a{\u000a  int iVar1;\u000a  void *matched_ent;\u000a  void *local_10;\u000a  \u000a  iVar1 = hash_insert_if_absent(table,entry,&local_10);\u000a  if (iVar1 == -1) {\u000a    entry = (void *)0x0;\u000a  }\u000a  else {\u000a    if (iVar1 == 0) {\u000a      entry = local_10;\u000a    }\u000a  }\u000a  return entry;\u000a}\u000a\u000a
p885
S'PUSH RBX\nSUB RSP,0x10\nMOV RBX,RSI\nLEA RDX,[RSP + 0x8]\nCALL 0x00408800\nCMP EAX,-0x1\nJZ 0x00408af1\nTEST EAX,EAX\nCMOVZ RBX,qword ptr [RSP + 0x8]\nJMP 0x00408af3\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p886
S'53\n48 83 ec 10\n48 89 f3\n48 8d 54 24 08\ne8 1e fd ff ff\n83 f8 ff\n74 0a\n85 c0\n48 0f 44 5c 24 08\neb 02\n31 db\n48 89 d8\n48 83 c4 10\n5b\nc3\n'
p887
S'.text:0000000000408ad0\n.text:0000000000408ad1\n.text:0000000000408ad5\n.text:0000000000408ad8\n.text:0000000000408add\n.text:0000000000408ae2\n.text:0000000000408ae5\n.text:0000000000408ae7\n.text:0000000000408ae9\n.text:0000000000408aef\n.text:0000000000408af1\n.text:0000000000408af3\n.text:0000000000408af6\n.text:0000000000408afa\n.text:0000000000408afb\n'
p888
tp889
sS'gettext_quote'
p890
(S'\n__stdcall gettext_quote(char * msgid)\n'
p891
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_0040b380;\u000a        pcVar2 = &DAT_0040b384;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p892
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x004018d0\nCMP RAX,RBX\nJNZ 0x00404a28\nCALL 0x00408e30\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00404a30\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x004049d8\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40b370\nMOV EAX,0x40b374\nJMP 0x00404a24\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00404a30\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00404a16\nCMP byte ptr [RBX],0x60\nMOV ECX,0x40b380\nMOV EAX,0x40b384\nJMP 0x00404a24\nCMP R14D,0x9\nMOV ECX,0x40b364\nMOV EAX,0x40b368\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p893
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 47 cf ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 99 44 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 70 b3 40 00\nb8 74 b3 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 80 b3 40 00\nb8 84 b3 40 00\neb 0e\n41 83 fe 09\nb9 64 b3 40 00\nb8 68 b3 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p894
S'.text:0000000000404970\n.text:0000000000404971\n.text:0000000000404973\n.text:0000000000404974\n.text:0000000000404977\n.text:000000000040497a\n.text:000000000040497c\n.text:0000000000404981\n.text:0000000000404984\n.text:0000000000404989\n.text:000000000040498c\n.text:0000000000404992\n.text:0000000000404997\n.text:000000000040499a\n.text:000000000040499f\n.text:00000000004049a4\n.text:00000000004049a9\n.text:00000000004049af\n.text:00000000004049b5\n.text:00000000004049b8\n.text:00000000004049ba\n.text:00000000004049bc\n.text:00000000004049c1\n.text:00000000004049c5\n.text:00000000004049c7\n.text:00000000004049c9\n.text:00000000004049cc\n.text:00000000004049d1\n.text:00000000004049d6\n.text:00000000004049d8\n.text:00000000004049dd\n.text:00000000004049e2\n.text:00000000004049e7\n.text:00000000004049ed\n.text:00000000004049f3\n.text:00000000004049f6\n.text:00000000004049f8\n.text:00000000004049fa\n.text:00000000004049ff\n.text:0000000000404a03\n.text:0000000000404a05\n.text:0000000000404a07\n.text:0000000000404a0a\n.text:0000000000404a0f\n.text:0000000000404a14\n.text:0000000000404a16\n.text:0000000000404a1a\n.text:0000000000404a1f\n.text:0000000000404a24\n.text:0000000000404a28\n.text:0000000000404a29\n.text:0000000000404a2b\n.text:0000000000404a2c\n'
p895
tp896
sS'fts_close'
p897
(S'\n__stdcall fts_close(FTS * sp)\n'
p898
V\u000aint fts_close(FTS *sp)\u000a\u000a{\u000a  _ftsent *__ptr;\u000a  _ftsent *p_Var1;\u000a  long lVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  _ftsent **pp_Var5;\u000a  int *piVar6;\u000a  \u000a  __ptr = sp->fts_cur;\u000a  if (__ptr != (_ftsent *)0x0) {\u000a    lVar2 = __ptr->fts_level;\u000a    while (-1 < lVar2) {\u000a      pp_Var5 = &__ptr->fts_link;\u000a      if (__ptr->fts_link == (_ftsent *)0x0) {\u000a        pp_Var5 = &__ptr->fts_parent;\u000a      }\u000a      p_Var1 = *pp_Var5;\u000a      free(__ptr);\u000a      lVar2 = p_Var1->fts_level;\u000a      __ptr = p_Var1;\u000a    }\u000a    free(__ptr);\u000a  }\u000a  if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a    fts_lfree((FTSENT *)sp->fts_child);\u000a  }\u000a  free(sp->fts_array);\u000a  free(sp->fts_path);\u000a  if ((sp->fts_options & 0x200U) == 0) {\u000a    iVar3 = 0;\u000a    if ((sp->fts_options & 4U) != 0) goto LAB_0040648f;\u000a    iVar3 = fchdir(sp->fts_rfd);\u000a    if (iVar3 == 0) {\u000a      iVar3 = 0;\u000a    }\u000a    else {\u000a      piVar6 = __errno_location();\u000a      iVar3 = *piVar6;\u000a    }\u000a    iVar4 = close(sp->fts_rfd);\u000a    if (iVar3 != 0) goto LAB_0040648f;\u000a  }\u000a  else {\u000a    iVar3 = 0;\u000a    if (sp->fts_cwd_fd < 0) goto LAB_0040648f;\u000a    iVar4 = close(sp->fts_cwd_fd);\u000a  }\u000a  if (iVar4 != 0) {\u000a    piVar6 = __errno_location();\u000a    iVar3 = *piVar6;\u000a  }\u000aLAB_0040648f:\u000a  fd_ring_clear(&sp->fts_fd_ring);\u000a  if ((Hash_table *)sp->fts_leaf_optimization_works_ht != (Hash_table *)0x0) {\u000a    hash_free((Hash_table *)sp->fts_leaf_optimization_works_ht);\u000a  }\u000a  free_dir(sp);\u000a  free(sp);\u000a  if (iVar3 == 0) {\u000a    iVar3 = 0;\u000a  }\u000a  else {\u000a    piVar6 = __errno_location();\u000a    *piVar6 = iVar3;\u000a    iVar3 = -1;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p899
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV RBX,qword ptr [R14]\nTEST RBX,RBX\nJZ 0x0040641b\nCMP qword ptr [RBX + 0x58],0x0\nJS 0x00406413\nMOV RDI,RBX\nNOP dword ptr [RAX]\nCMP qword ptr [RBX + 0x10],0x0\nLEA RAX,[RBX + 0x10]\nLEA RCX,[RBX + 0x8]\nCMOVZ RAX,RCX\nMOV RBX,qword ptr [RAX]\nCALL 0x004017e0\nCMP qword ptr [RBX + 0x58],0x0\nMOV RDI,RBX\nJNS 0x004063f0\nMOV RDI,RBX\nCALL 0x004017e0\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00406429\nCALL 0x00406390\nMOV RDI,qword ptr [R14 + 0x10]\nCALL 0x004017e0\nMOV RDI,qword ptr [R14 + 0x20]\nCALL 0x004017e0\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AH,0x2\nJNZ 0x00406460\nXOR EBX,EBX\nTEST AL,0x4\nJNZ 0x0040648f\nMOV EDI,dword ptr [R14 + 0x28]\nCALL 0x00401b10\nTEST EAX,EAX\nJZ 0x00406475\nCALL 0x00401800\nMOV EBX,dword ptr [RAX]\nJMP 0x00406477\nMOV EDI,dword ptr [R14 + 0x2c]\nXOR EBX,EBX\nTEST EDI,EDI\nJS 0x0040648f\nCALL 0x004019c0\nTEST EAX,EAX\nJNZ 0x00406488\nJMP 0x0040648f\nXOR EBX,EBX\nMOV EDI,dword ptr [R14 + 0x28]\nCALL 0x004019c0\nTEST EBX,EBX\nJNZ 0x0040648f\nTEST EAX,EAX\nJZ 0x0040648f\nCALL 0x00401800\nMOV EBX,dword ptr [RAX]\nLEA RDI,[R14 + 0x60]\nCALL 0x004064e0\nMOV RDI,qword ptr [R14 + 0x50]\nTEST RDI,RDI\nJZ 0x004064a6\nCALL 0x004084d0\nMOV RDI,R14\nCALL 0x00406520\nMOV RDI,R14\nCALL 0x004017e0\nTEST EBX,EBX\nJZ 0x004064c8\nCALL 0x00401800\nMOV dword ptr [RAX],EBX\nMOV EAX,0xffffffff\nJMP 0x004064ca\nXOR EAX,EAX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p900
S'41 56\n53\n50\n49 89 fe\n49 8b 1e\n48 85 db\n74 3c\n48 83 7b 58 00\n78 2d\n48 89 df\n0f 1f 80 00 00 00 00\n48 83 7b 10 00\n48 8d 43 10\n48 8d 4b 08\n48 0f 44 c1\n48 8b 18\ne8 d7 b3 ff ff\n48 83 7b 58 00\n48 89 df\n79 dd\n48 89 df\ne8 c5 b3 ff ff\n49 8b 7e 08\n48 85 ff\n74 05\ne8 67 ff ff ff\n49 8b 7e 10\ne8 ae b3 ff ff\n49 8b 7e 20\ne8 a5 b3 ff ff\n41 8b 46 48\nf6 c4 02\n75 1c\n31 db\na8 04\n75 45\n41 8b 7e 28\ne8 bd b6 ff ff\n85 c0\n74 1e\ne8 a4 b3 ff ff\n8b 18\neb 17\n41 8b 7e 2c\n31 db\n85 ff\n78 25\ne8 51 b5 ff ff\n85 c0\n75 15\neb 1a\n31 db\n41 8b 7e 28\ne8 40 b5 ff ff\n85 db\n75 0b\n85 c0\n74 07\ne8 73 b3 ff ff\n8b 18\n49 8d 7e 60\ne8 48 00 00 00\n49 8b 7e 50\n48 85 ff\n74 05\ne8 2a 20 00 00\n4c 89 f7\ne8 72 00 00 00\n4c 89 f7\ne8 2a b3 ff ff\n85 db\n74 0e\ne8 41 b3 ff ff\n89 18\nb8 ff ff ff ff\neb 02\n31 c0\n48 83 c4 08\n5b\n41 5e\nc3\n'
p901
S'.text:00000000004063d0\n.text:00000000004063d2\n.text:00000000004063d3\n.text:00000000004063d4\n.text:00000000004063d7\n.text:00000000004063da\n.text:00000000004063dd\n.text:00000000004063df\n.text:00000000004063e4\n.text:00000000004063e6\n.text:00000000004063e9\n.text:00000000004063f0\n.text:00000000004063f5\n.text:00000000004063f9\n.text:00000000004063fd\n.text:0000000000406401\n.text:0000000000406404\n.text:0000000000406409\n.text:000000000040640e\n.text:0000000000406411\n.text:0000000000406413\n.text:0000000000406416\n.text:000000000040641b\n.text:000000000040641f\n.text:0000000000406422\n.text:0000000000406424\n.text:0000000000406429\n.text:000000000040642d\n.text:0000000000406432\n.text:0000000000406436\n.text:000000000040643b\n.text:000000000040643f\n.text:0000000000406442\n.text:0000000000406444\n.text:0000000000406446\n.text:0000000000406448\n.text:000000000040644a\n.text:000000000040644e\n.text:0000000000406453\n.text:0000000000406455\n.text:0000000000406457\n.text:000000000040645c\n.text:000000000040645e\n.text:0000000000406460\n.text:0000000000406464\n.text:0000000000406466\n.text:0000000000406468\n.text:000000000040646a\n.text:000000000040646f\n.text:0000000000406471\n.text:0000000000406473\n.text:0000000000406475\n.text:0000000000406477\n.text:000000000040647b\n.text:0000000000406480\n.text:0000000000406482\n.text:0000000000406484\n.text:0000000000406486\n.text:0000000000406488\n.text:000000000040648d\n.text:000000000040648f\n.text:0000000000406493\n.text:0000000000406498\n.text:000000000040649c\n.text:000000000040649f\n.text:00000000004064a1\n.text:00000000004064a6\n.text:00000000004064a9\n.text:00000000004064ae\n.text:00000000004064b1\n.text:00000000004064b6\n.text:00000000004064b8\n.text:00000000004064ba\n.text:00000000004064bf\n.text:00000000004064c1\n.text:00000000004064c6\n.text:00000000004064c8\n.text:00000000004064ca\n.text:00000000004064ce\n.text:00000000004064cf\n.text:00000000004064d1\n'
p902
tp903
sS'fclose'
p904
(S'\n__stdcall fclose(FILE * __stream)\n'
p905
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_0060f080)();\u000a  return iVar1;\u000a}\u000a\u000a
p906
S'JMP qword ptr [0x0060f080]\n'
p907
S'ff 25 ea d7 20 00\n'
p908
S'.plt:0000000000401890\n'
p909
tp910
sS'__ctype_get_mb_cur_max'
p911
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p912
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_0060f0a8)();\u000a  return sVar1;\u000a}\u000a\u000a
p913
S'JMP qword ptr [0x0060f0a8]\n'
p914
S'ff 25 c2 d7 20 00\n'
p915
S'.plt:00000000004018e0\n'
p916
tp917
sS'lstat'
p918
(S'\n__stdcall lstat(char * __file, stat * __buf)\n'
p919
V\u000aint lstat(char *__file,stat *__buf)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___lxstat_0060f0b8)(1,__file,__buf);\u000a  return iVar1;\u000a}\u000a\u000a
p920
S'MOV RDX,RSI\nMOV RSI,RDI\nMOV EDI,0x1\nJMP 0x00401900\n'
p921
S'48 89 f2\n48 89 fe\nbf 01 00 00 00\ne9 c0 81 ff ff\n'
p922
S'.text:0000000000409730\n.text:0000000000409733\n.text:0000000000409736\n.text:000000000040973b\n'
p923
tp924
sS'quotearg_n_style'
p925
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p926
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p927
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x004046a0\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00404470\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p928
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p929
S'.text:0000000000404660\n.text:0000000000404661\n.text:0000000000404663\n.text:0000000000404664\n.text:0000000000404668\n.text:000000000040466b\n.text:000000000040466d\n.text:0000000000404672\n.text:0000000000404675\n.text:000000000040467a\n.text:0000000000404681\n.text:0000000000404683\n.text:0000000000404686\n.text:0000000000404689\n.text:000000000040468e\n.text:0000000000404692\n.text:0000000000404693\n.text:0000000000404695\n.text:0000000000404696\n'
p930
tp931
sS'hash_clear'
p932
(S'\n__stdcall hash_clear(Hash_table * table)\n'
p933
V\u000avoid hash_clear(Hash_table *table)\u000a\u000a{\u000a  void (*pVar1)(void *);\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    do {\u000a      if (phVar4->data != (void *)0x0) {\u000a        pVar1 = table->data_freer;\u000a        phVar3 = phVar4->next;\u000a        while (phVar3 != (hash_entry *)0x0) {\u000a          if (pVar1 != (void (*)(void *))0x0) {\u000a            (*pVar1)(phVar3->data);\u000a          }\u000a          phVar3->data = (void *)0x0;\u000a          phVar2 = phVar3->next;\u000a          phVar3->next = table->free_entry_list;\u000a          table->free_entry_list = phVar3;\u000a          pVar1 = table->data_freer;\u000a          phVar3 = phVar2;\u000a        }\u000a        if (pVar1 != (void (*)(void *))0x0) {\u000a          (*pVar1)(phVar4->data);\u000a        }\u000a        *(undefined4 *)&phVar4->data = 0;\u000a        *(undefined4 *)((long)&phVar4->data + 4) = 0;\u000a        *(undefined4 *)&phVar4->next = 0;\u000a        *(undefined4 *)((long)&phVar4->next + 4) = 0;\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  *(undefined4 *)&table->n_buckets_used = 0;\u000a  *(undefined4 *)((long)&table->n_buckets_used + 4) = 0;\u000a  *(undefined4 *)&table->n_entries = 0;\u000a  *(undefined4 *)((long)&table->n_entries + 4) = 0;\u000a  return;\u000a}\u000a\u000a
p934
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RDI\nMOV R14,qword ptr [R15]\nCMP R14,qword ptr [R15 + 0x8]\nJC 0x0040845a\nJMP 0x004084b5\nTEST CL,CL\nJZ 0x00408449\nMOV RDI,qword ptr [R14]\nCALL RAX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R14],XMM0\nADD R14,0x10\nCMP R14,qword ptr [R15 + 0x8]\nJNC 0x004084b5\nCMP qword ptr [R14],0x0\nJZ 0x00408450\nMOV RBX,qword ptr [R14 + 0x8]\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RBX,RBX\nJZ 0x00408440\nNOP dword ptr CS:[RAX + RAX*0x1]\nTEST CL,0x1\nJZ 0x0040848a\nMOV RDI,qword ptr [RBX]\nCALL RAX\nMOV qword ptr [RBX],0x0\nMOV RDX,qword ptr [RBX + 0x8]\nMOV RAX,qword ptr [R15 + 0x48]\nMOV qword ptr [RBX + 0x8],RAX\nMOV qword ptr [R15 + 0x48],RBX\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nSETNZ CL\nTEST RDX,RDX\nMOV RBX,RDX\nJNZ 0x00408480\nJMP 0x00408440\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R15 + 0x18],XMM0\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p935
S'41 57\n41 56\n53\n49 89 ff\n4d 8b 37\n4d 3b 77 08\n72 29\ne9 7f 00 00 00\n84 c9\n74 05\n49 8b 3e\nff d0\n0f 57 c0\n41 0f 11 06\n49 83 c6 10\n4d 3b 77 08\n73 5b\n49 83 3e 00\n74 f0\n49 8b 5e 08\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 db\n74 cd\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\nf6 c1 01\n74 05\n48 8b 3b\nff d0\n48 c7 03 00 00 00 00\n48 8b 53 08\n49 8b 47 48\n48 89 43 08\n49 89 5f 48\n49 8b 47 40\n48 85 c0\n0f 95 c1\n48 85 d2\n48 89 d3\n75 cd\neb 8b\n0f 57 c0\n41 0f 11 47 18\n5b\n41 5e\n41 5f\nc3\n'
p936
S'.text:0000000000408420\n.text:0000000000408422\n.text:0000000000408424\n.text:0000000000408425\n.text:0000000000408428\n.text:000000000040842b\n.text:000000000040842f\n.text:0000000000408431\n.text:0000000000408440\n.text:0000000000408442\n.text:0000000000408444\n.text:0000000000408447\n.text:0000000000408449\n.text:000000000040844c\n.text:0000000000408450\n.text:0000000000408454\n.text:0000000000408458\n.text:000000000040845a\n.text:000000000040845e\n.text:0000000000408460\n.text:0000000000408464\n.text:0000000000408468\n.text:000000000040846b\n.text:000000000040846e\n.text:0000000000408471\n.text:0000000000408473\n.text:0000000000408480\n.text:0000000000408483\n.text:0000000000408485\n.text:0000000000408488\n.text:000000000040848a\n.text:0000000000408491\n.text:0000000000408495\n.text:0000000000408499\n.text:000000000040849d\n.text:00000000004084a1\n.text:00000000004084a5\n.text:00000000004084a8\n.text:00000000004084ab\n.text:00000000004084ae\n.text:00000000004084b1\n.text:00000000004084b3\n.text:00000000004084b5\n.text:00000000004084b8\n.text:00000000004084bd\n.text:00000000004084be\n.text:00000000004084c0\n.text:00000000004084c2\n'
p937
tp938
sS'raw_hasher'
p939
(S'\n__stdcall raw_hasher(void * data, size_t n)\n'
p940
V\u000asize_t raw_hasher(void *data,size_t n)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = rotr_sz((size_t)data);\u000a  return sVar1 % n;\u000a}\u000a\u000a
p941
S'PUSH RBX\nMOV RBX,RSI\nMOV ESI,0x3\nCALL 0x004095d0\nXOR EDX,EDX\nDIV RBX\nMOV RAX,RDX\nPOP RBX\nRET\n'
p942
S'53\n48 89 f3\nbe 03 00 00 00\ne8 e2 12 00 00\n31 d2\n48 f7 f3\n48 89 d0\n5b\nc3\n'
p943
S'.text:00000000004082e0\n.text:00000000004082e1\n.text:00000000004082e4\n.text:00000000004082e9\n.text:00000000004082ee\n.text:00000000004082f0\n.text:00000000004082f3\n.text:00000000004082f6\n.text:00000000004082f7\n'
p944
tp945
sS'quote_n'
p946
(S'\n__stdcall quote_n(char * arg)\n'
p947
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p948
S'MOV RDX,-0x1\nJMP 0x00404930\n'
p949
S'48 c7 c2 ff ff ff ff\neb d7\n'
p950
S'.text:0000000000404950\n.text:0000000000404957\n'
p951
tp952
sS'quotearg_alloc'
p953
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p954
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p955
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x004042e0\n'
p956
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p957
S'.text:00000000004042d0\n.text:00000000004042d3\n.text:00000000004042d5\n.text:00000000004042d8\n'
p958
tp959
sS'close_stdout_set_file_name'
p960
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p961
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p962
S'MOV qword ptr [0x0060f348],RDI\nRET\n'
p963
S'48 89 3d 31 c0 20 00\nc3\n'
p964
S'.text:0000000000403310\n.text:0000000000403317\n'
p965
tp966
sS'getgrnam'
p967
(S'\n__stdcall getgrnam(char * __name)\n'
p968
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000agroup * getgrnam(char *__name)\u000a\u000a{\u000a  group *pgVar1;\u000a  \u000a  pgVar1 = (group *)(*(code *)PTR_getgrnam_0060f168)();\u000a  return pgVar1;\u000a}\u000a\u000a
p969
S'JMP qword ptr [0x0060f168]\n'
p970
S'ff 25 02 d7 20 00\n'
p971
S'.plt:0000000000401a60\n'
p972
tp973
sS'check_tuning'
p974
(S'\n__stdcall check_tuning(Hash_table * table)\n'
p975
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000a_Bool check_tuning(Hash_table *table)\u000a\u000a{\u000a  float fVar1;\u000a  Hash_tuning *pHVar2;\u000a  undefined uVar3;\u000a  float fVar4;\u000a  \u000a  pHVar2 = table->tuning;\u000a  uVar3 = 1;\u000a  if ((pHVar2 != &default_tuning) &&\u000a     ((((fVar1 = pHVar2->growth_threshold, fVar1 <= _DAT_0040bd98 || (DAT_0040bd9c <= fVar1)) ||\u000a       (pHVar2->growth_factor <= _DAT_0040bda0)) ||\u000a      (((pHVar2->shrink_threshold < 0.00000000 ||\u000a        (fVar4 = pHVar2->shrink_threshold + _DAT_0040bd98, fVar1 <= fVar4)) ||\u000a       ((DAT_0040bda4 < pHVar2->shrink_factor || (pHVar2->shrink_factor <= fVar4)))))))) {\u000a    table->tuning = &default_tuning;\u000a    uVar3 = 0;\u000a  }\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p976
S'MOV RCX,qword ptr [RDI + 0x28]\nMOV EDX,0x40be1c\nMOV AL,0x1\nCMP RCX,RDX\nJZ 0x00408383\nMOVSS XMM0,dword ptr [RCX + 0x8]\nUCOMISS XMM0,dword ptr [0x0040bd98]\nJBE 0x00408379\nMOVSS XMM1,dword ptr [0x0040bd9c]\nUCOMISS XMM1,XMM0\nJBE 0x00408379\nMOVSS XMM1,dword ptr [RCX + 0xc]\nUCOMISS XMM1,dword ptr [0x0040bda0]\nJBE 0x00408379\nMOVSS XMM1,dword ptr [RCX]\nXORPS XMM2,XMM2\nUCOMISS XMM1,XMM2\nJC 0x00408379\nADDSS XMM1,dword ptr [0x0040bd98]\nUCOMISS XMM0,XMM1\nJBE 0x00408379\nMOVSS XMM0,dword ptr [RCX + 0x4]\nMOVSS XMM2,dword ptr [0x0040bda4]\nUCOMISS XMM2,XMM0\nJC 0x00408379\nUCOMISS XMM0,XMM1\nJA 0x00408383\nMOV qword ptr [RDI + 0x28],0x40be1c\nXOR EAX,EAX\nRET\n'
p977
S'48 8b 4f 28\nba 1c be 40 00\nb0 01\n48 39 d1\n74 63\nf3 0f 10 41 08\n0f 2e 05 6c 3a 00 00\n76 4b\nf3 0f 10 0d 66 3a 00 00\n0f 2e c8\n76 3e\nf3 0f 10 49 0c\n0f 2e 0d 59 3a 00 00\n76 30\nf3 0f 10 09\n0f 57 d2\n0f 2e ca\n72 24\nf3 0f 58 0d 3b 3a 00 00\n0f 2e c1\n76 17\nf3 0f 10 41 04\nf3 0f 10 15 35 3a 00 00\n0f 2e d0\n72 05\n0f 2e c1\n77 0a\n48 c7 47 28 1c be 40 00\n31 c0\nc3\n'
p978
S'.text:0000000000408310\n.text:0000000000408314\n.text:0000000000408319\n.text:000000000040831b\n.text:000000000040831e\n.text:0000000000408320\n.text:0000000000408325\n.text:000000000040832c\n.text:000000000040832e\n.text:0000000000408336\n.text:0000000000408339\n.text:000000000040833b\n.text:0000000000408340\n.text:0000000000408347\n.text:0000000000408349\n.text:000000000040834d\n.text:0000000000408350\n.text:0000000000408353\n.text:0000000000408355\n.text:000000000040835d\n.text:0000000000408360\n.text:0000000000408362\n.text:0000000000408367\n.text:000000000040836f\n.text:0000000000408372\n.text:0000000000408374\n.text:0000000000408377\n.text:0000000000408379\n.text:0000000000408381\n.text:0000000000408383\n'
p979
tp980
sS'__libc_csu_init'
p981
(S'\n__stdcall __libc_csu_init()\n'
p982
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p983
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x60ee08]\nPUSH RBP\nLEA RBP,[0x60ee10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401790\nTEST RBP,RBP\nJZ 0x004096b6\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x004096a0\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p984
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 96 57 20 00\n55\n48 8d 2d 96 57 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 ff 80 ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p985
S'.text:0000000000409660\n.text:0000000000409662\n.text:0000000000409664\n.text:0000000000409667\n.text:0000000000409669\n.text:000000000040966b\n.text:0000000000409672\n.text:0000000000409673\n.text:000000000040967a\n.text:000000000040967b\n.text:000000000040967e\n.text:0000000000409681\n.text:0000000000409684\n.text:0000000000409688\n.text:000000000040968c\n.text:0000000000409691\n.text:0000000000409694\n.text:0000000000409696\n.text:0000000000409698\n.text:00000000004096a0\n.text:00000000004096a3\n.text:00000000004096a6\n.text:00000000004096a9\n.text:00000000004096ad\n.text:00000000004096b1\n.text:00000000004096b4\n.text:00000000004096b6\n.text:00000000004096ba\n.text:00000000004096bb\n.text:00000000004096bc\n.text:00000000004096be\n.text:00000000004096c0\n.text:00000000004096c2\n.text:00000000004096c4\n'
p986
tp987
sS'c_isdigit'
p988
(S'\n__stdcall c_isdigit()\n'
p989
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p990
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p991
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p992
S'.text:0000000000407ab0\n.text:0000000000407ab3\n.text:0000000000407ab6\n.text:0000000000407ab9\n'
p993
tp994
sS'hash_do_for_each'
p995
(S'\n__stdcall hash_do_for_each(Hash_table * table, Hash_processor * processor, void * processor_data)\n'
p996
V\u000asize_t hash_do_for_each(Hash_table *table,_Bool (*processor)(void *,void *),void *processor_data)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  _Bool _Var2;\u000a  size_t sVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar4 = table->bucket;\u000a  if (phVar4 < table->bucket_limit) {\u000a    sVar3 = 0;\u000a    do {\u000a      phVar1 = phVar4;\u000a      if (phVar4->data != (void *)0x0) {\u000a        while (phVar1 != (hash_entry *)0x0) {\u000a          _Var2 = (*processor)(phVar1->data,processor_data);\u000a          if (_Var2 == false) {\u000a            return sVar3;\u000a          }\u000a          sVar3 = sVar3 + 1;\u000a          phVar1 = phVar1->next;\u000a        }\u000a      }\u000a      phVar4 = phVar4 + 1;\u000a    } while (phVar4 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a  }\u000a  return sVar3;\u000a}\u000a\u000a
p997
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV R15,RSI\nMOV R12,RDI\nMOV R13,qword ptr [R12]\nCMP R13,qword ptr [R12 + 0x8]\nJNC 0x00408187\nXOR EBX,EBX\nCMP qword ptr [R13],0x0\nJZ 0x0040817a\nTEST R13,R13\nJZ 0x0040817a\nMOV RBP,R13\nMOV RDI,qword ptr [RBP]\nMOV RSI,R14\nCALL R15\nTEST AL,AL\nJZ 0x00408189\nINC RBX\nMOV RBP,qword ptr [RBP + 0x8]\nTEST RBP,RBP\nJNZ 0x00408160\nADD R13,0x10\nCMP R13,qword ptr [R12 + 0x8]\nJC 0x00408151\nJMP 0x00408189\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p998
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 d6\n49 89 f7\n49 89 fc\n4d 8b 2c 24\n4d 3b 6c 24 08\n73 38\n31 db\n49 83 7d 00 00\n74 22\n4d 85 ed\n74 1d\n4c 89 ed\n48 8b 7d 00\n4c 89 f6\n41 ff d7\n84 c0\n74 1b\n48 ff c3\n48 8b 6d 08\n48 85 ed\n75 e6\n49 83 c5 10\n4d 3b 6c 24 08\n72 cc\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p999
S'.text:0000000000408130\n.text:0000000000408131\n.text:0000000000408133\n.text:0000000000408135\n.text:0000000000408137\n.text:0000000000408139\n.text:000000000040813a\n.text:000000000040813b\n.text:000000000040813e\n.text:0000000000408141\n.text:0000000000408144\n.text:0000000000408148\n.text:000000000040814d\n.text:000000000040814f\n.text:0000000000408151\n.text:0000000000408156\n.text:0000000000408158\n.text:000000000040815b\n.text:000000000040815d\n.text:0000000000408160\n.text:0000000000408164\n.text:0000000000408167\n.text:000000000040816a\n.text:000000000040816c\n.text:000000000040816e\n.text:0000000000408171\n.text:0000000000408175\n.text:0000000000408178\n.text:000000000040817a\n.text:000000000040817e\n.text:0000000000408183\n.text:0000000000408185\n.text:0000000000408187\n.text:0000000000408189\n.text:000000000040818c\n.text:0000000000408190\n.text:0000000000408191\n.text:0000000000408193\n.text:0000000000408195\n.text:0000000000408197\n.text:0000000000408199\n.text:000000000040819a\n'
p1000
tp1001
sS'usage'
p1002
(S'\n__stdcall usage()\n'
p1003
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,\u000a                      "Usage: %s [OPTION]... [OWNER][:[GROUP]] FILE...\u005cn  or:  %s [OPTION]... --reference=RFILE FILE...\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,program_name,program_name);\u000a    __s = (char *)dcgettext(0,\u000a                            "Change the owner and/or group of each FILE to OWNER and/or GROUP.\u005cnWith --reference, change the owner and group of each FILE to those of RFILE.\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -c, --changes          like verbose but report only when a change is made\u005cn  -f, --silent, --quiet  suppress most error messages\u005cn  -v, --verbose          output a diagnostic for every file processed\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --dereference      affect the referent of each symbolic link (this is\u005cn                         the default), rather than the symbolic link itself\u005cn  -h, --no-dereference   affect symbolic links instead of any referenced file\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "                         (useful only on systems that can change the\u005cn                         ownership of a symlink)\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --from=CURRENT_OWNER:CURRENT_GROUP\u005cn                         change the owner and/or group of each file only if\u005cn                         its current owner and/or group match those specified\u005cn                         here.  Either may be omitted, in which case a match\u005cn                         is not required for the omitted attribute\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --no-preserve-root  do not treat \u005c'/\u005c' specially (the default)\u005cn      --preserve-root    fail to operate recursively on \u005c'/\u005c'\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "      --reference=RFILE  use RFILE\u005c's owner and group rather than\u005cn                         specifying OWNER:GROUP values\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -R, --recursive        operate on files and directories recursively\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnOwner is unchanged if missing.  Group is unchanged if missing, but changed\u005cnto login group if implied by a \u005c':\u005c' following a symbolic OWNER.\u005cnOWNER and GROUP may be numeric as well as symbolic.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    uVar1 = dcgettext(0,\u000a                      "\u005cnExamples:\u005cn  %s root /u        Change the owner of /u to \u005c"root\u005c".\u005cn  %s root:staff /u  Likewise, but also change its group to \u005c"staff\u005c".\u005cn  %s -hR root /u    Change the owner of /u and subfiles to \u005c"root\u005c".\u005cn"\u000a                      ,5);\u000a    __printf_chk(1,uVar1,program_name,program_name,program_name);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p1004
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401f54\nXOR EDI,EDI\nMOV ESI,0x409de0\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060f358]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nCALL 0x00401b50\nXOR EDI,EDI\nMOV ESI,0x409e41\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,qword ptr [0x0060f2e8]\nMOV RDI,RAX\nCALL 0x004019f0\nXOR EDI,EDI\nMOV ESI,0x409ed2\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,qword ptr [0x0060f2e8]\nMOV RDI,RAX\nCALL 0x004019f0\nXOR EDI,EDI\nMOV ESI,0x409f9b\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,qword ptr [0x0060f2e8]\nMOV RDI,RAX\nCALL 0x004019f0\nXOR EDI,EDI\nMOV ESI,0x40a082\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,qword ptr [0x0060f2e8]\nMOV RDI,RAX\nCALL 0x004019f0\nXOR EDI,EDI\nMOV ESI,0x40a0f9\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,qword ptr [0x0060f2e8]\nMOV RDI,RAX\nCALL 0x004019f0\nXOR EDI,EDI\nMOV ESI,0x40a24d\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,qword ptr [0x0060f2e8]\nMOV RDI,RAX\nCALL 0x004019f0\nXOR EDI,EDI\nMOV ESI,0x40a2cd\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,qword ptr [0x0060f2e8]\nMOV RDI,RAX\nCALL 0x004019f0\nXOR EDI,EDI\nMOV ESI,0x40a346\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,qword ptr [0x0060f2e8]\nMOV RDI,RAX\nCALL 0x004019f0\nXOR EDI,EDI\nMOV ESI,0x40a38d\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,qword ptr [0x0060f2e8]\nMOV RDI,RAX\nCALL 0x004019f0\nXOR EDI,EDI\nMOV ESI,0x40a55e\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,qword ptr [0x0060f2e8]\nMOV RDI,RAX\nCALL 0x004019f0\nXOR EDI,EDI\nMOV ESI,0x40a58b\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,qword ptr [0x0060f2e8]\nMOV RDI,RAX\nCALL 0x004019f0\nXOR EDI,EDI\nMOV ESI,0x40a5c1\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RSI,qword ptr [0x0060f2e8]\nMOV RDI,RAX\nCALL 0x004019f0\nXOR EDI,EDI\nMOV ESI,0x40a681\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RCX,RAX\nMOV RDX,qword ptr [0x0060f358]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nMOV RCX,RDX\nMOV R8,RDX\nCALL 0x00401b50\nCALL 0x00401fa0\nMOV EDI,EBX\nCALL 0x00401c00\nCALL 0x00401f60\nMOV EDI,EBX\nCALL 0x00401c00\n'
p1005
S'53\n89 fb\n85 db\n0f 85 e9 01 00 00\n31 ff\nbe e0 9d 40 00\nba 05 00 00 00\ne8 54 fb ff ff\n48 89 c1\n48 8b 15 d2 d5 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\ne8 b8 fd ff ff\n31 ff\nbe 41 9e 40 00\nba 05 00 00 00\ne8 27 fb ff ff\n48 8b 35 38 d5 20 00\n48 89 c7\ne8 38 fc ff ff\n31 ff\nbe d2 9e 40 00\nba 05 00 00 00\ne8 07 fb ff ff\n48 8b 35 18 d5 20 00\n48 89 c7\ne8 18 fc ff ff\n31 ff\nbe 9b 9f 40 00\nba 05 00 00 00\ne8 e7 fa ff ff\n48 8b 35 f8 d4 20 00\n48 89 c7\ne8 f8 fb ff ff\n31 ff\nbe 82 a0 40 00\nba 05 00 00 00\ne8 c7 fa ff ff\n48 8b 35 d8 d4 20 00\n48 89 c7\ne8 d8 fb ff ff\n31 ff\nbe f9 a0 40 00\nba 05 00 00 00\ne8 a7 fa ff ff\n48 8b 35 b8 d4 20 00\n48 89 c7\ne8 b8 fb ff ff\n31 ff\nbe 4d a2 40 00\nba 05 00 00 00\ne8 87 fa ff ff\n48 8b 35 98 d4 20 00\n48 89 c7\ne8 98 fb ff ff\n31 ff\nbe cd a2 40 00\nba 05 00 00 00\ne8 67 fa ff ff\n48 8b 35 78 d4 20 00\n48 89 c7\ne8 78 fb ff ff\n31 ff\nbe 46 a3 40 00\nba 05 00 00 00\ne8 47 fa ff ff\n48 8b 35 58 d4 20 00\n48 89 c7\ne8 58 fb ff ff\n31 ff\nbe 8d a3 40 00\nba 05 00 00 00\ne8 27 fa ff ff\n48 8b 35 38 d4 20 00\n48 89 c7\ne8 38 fb ff ff\n31 ff\nbe 5e a5 40 00\nba 05 00 00 00\ne8 07 fa ff ff\n48 8b 35 18 d4 20 00\n48 89 c7\ne8 18 fb ff ff\n31 ff\nbe 8b a5 40 00\nba 05 00 00 00\ne8 e7 f9 ff ff\n48 8b 35 f8 d3 20 00\n48 89 c7\ne8 f8 fa ff ff\n31 ff\nbe c1 a5 40 00\nba 05 00 00 00\ne8 c7 f9 ff ff\n48 8b 35 d8 d3 20 00\n48 89 c7\ne8 d8 fa ff ff\n31 ff\nbe 81 a6 40 00\nba 05 00 00 00\ne8 a7 f9 ff ff\n48 89 c1\n48 8b 15 25 d4 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\n48 89 d1\n49 89 d0\ne8 08 fc ff ff\ne8 53 00 00 00\n89 df\ne8 ac fc ff ff\ne8 07 00 00 00\n89 df\ne8 a0 fc ff ff\n'
p1006
S'.text:0000000000401d60\n.text:0000000000401d61\n.text:0000000000401d63\n.text:0000000000401d65\n.text:0000000000401d6b\n.text:0000000000401d6d\n.text:0000000000401d72\n.text:0000000000401d77\n.text:0000000000401d7c\n.text:0000000000401d7f\n.text:0000000000401d86\n.text:0000000000401d8b\n.text:0000000000401d8d\n.text:0000000000401d90\n.text:0000000000401d93\n.text:0000000000401d98\n.text:0000000000401d9a\n.text:0000000000401d9f\n.text:0000000000401da4\n.text:0000000000401da9\n.text:0000000000401db0\n.text:0000000000401db3\n.text:0000000000401db8\n.text:0000000000401dba\n.text:0000000000401dbf\n.text:0000000000401dc4\n.text:0000000000401dc9\n.text:0000000000401dd0\n.text:0000000000401dd3\n.text:0000000000401dd8\n.text:0000000000401dda\n.text:0000000000401ddf\n.text:0000000000401de4\n.text:0000000000401de9\n.text:0000000000401df0\n.text:0000000000401df3\n.text:0000000000401df8\n.text:0000000000401dfa\n.text:0000000000401dff\n.text:0000000000401e04\n.text:0000000000401e09\n.text:0000000000401e10\n.text:0000000000401e13\n.text:0000000000401e18\n.text:0000000000401e1a\n.text:0000000000401e1f\n.text:0000000000401e24\n.text:0000000000401e29\n.text:0000000000401e30\n.text:0000000000401e33\n.text:0000000000401e38\n.text:0000000000401e3a\n.text:0000000000401e3f\n.text:0000000000401e44\n.text:0000000000401e49\n.text:0000000000401e50\n.text:0000000000401e53\n.text:0000000000401e58\n.text:0000000000401e5a\n.text:0000000000401e5f\n.text:0000000000401e64\n.text:0000000000401e69\n.text:0000000000401e70\n.text:0000000000401e73\n.text:0000000000401e78\n.text:0000000000401e7a\n.text:0000000000401e7f\n.text:0000000000401e84\n.text:0000000000401e89\n.text:0000000000401e90\n.text:0000000000401e93\n.text:0000000000401e98\n.text:0000000000401e9a\n.text:0000000000401e9f\n.text:0000000000401ea4\n.text:0000000000401ea9\n.text:0000000000401eb0\n.text:0000000000401eb3\n.text:0000000000401eb8\n.text:0000000000401eba\n.text:0000000000401ebf\n.text:0000000000401ec4\n.text:0000000000401ec9\n.text:0000000000401ed0\n.text:0000000000401ed3\n.text:0000000000401ed8\n.text:0000000000401eda\n.text:0000000000401edf\n.text:0000000000401ee4\n.text:0000000000401ee9\n.text:0000000000401ef0\n.text:0000000000401ef3\n.text:0000000000401ef8\n.text:0000000000401efa\n.text:0000000000401eff\n.text:0000000000401f04\n.text:0000000000401f09\n.text:0000000000401f10\n.text:0000000000401f13\n.text:0000000000401f18\n.text:0000000000401f1a\n.text:0000000000401f1f\n.text:0000000000401f24\n.text:0000000000401f29\n.text:0000000000401f2c\n.text:0000000000401f33\n.text:0000000000401f38\n.text:0000000000401f3a\n.text:0000000000401f3d\n.text:0000000000401f40\n.text:0000000000401f43\n.text:0000000000401f48\n.text:0000000000401f4d\n.text:0000000000401f4f\n.text:0000000000401f54\n.text:0000000000401f59\n.text:0000000000401f5b\n'
p1007
tp1008
sS'quoting_options_from_style'
p1009
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p1010
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1011
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x004046ed\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x004017f0\n'
p1012
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 fe d0 ff ff\n'
p1013
S'.text:00000000004046a0\n.text:00000000004046a4\n.text:00000000004046a7\n.text:00000000004046ac\n.text:00000000004046b1\n.text:00000000004046b5\n.text:00000000004046bd\n.text:00000000004046c0\n.text:00000000004046c2\n.text:00000000004046c4\n.text:00000000004046c8\n.text:00000000004046cb\n.text:00000000004046cf\n.text:00000000004046d4\n.text:00000000004046d9\n.text:00000000004046dd\n.text:00000000004046e1\n.text:00000000004046e5\n.text:00000000004046e8\n.text:00000000004046ec\n.text:00000000004046ed\n'
p1014
tp1015
sS'strcpy'
p1016
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p1017
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_0060f050)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1018
S'JMP qword ptr [0x0060f050]\n'
p1019
S'ff 25 1a d8 20 00\n'
p1020
S'.plt:0000000000401830\n'
p1021
tp1022
sS'rotl8'
p1023
(S'\n__stdcall rotl8()\n'
p1024
V\u000auint8_t rotl8(void)\u000a\u000a{\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  return (uint8_t)((byte)(in_EDI >> (8 - (byte)in_ESI & 0x1f)) |\u000a                  (byte)(in_EDI << ((byte)in_ESI & 0x1f)));\u000a}\u000a\u000a
p1025
S'MOV EAX,EDI\nMOV ECX,ESI\nSHL EAX,CL\nMOV ECX,0x8\nSUB ECX,ESI\nSHR EDI,CL\nOR EDI,EAX\nMOV EAX,EDI\nRET\n'
p1026
S'89 f8\n89 f1\nd3 e0\nb9 08 00 00 00\n29 f1\nd3 ef\n09 c7\n89 f8\nc3\n'
p1027
S'.text:0000000000409620\n.text:0000000000409622\n.text:0000000000409624\n.text:0000000000409626\n.text:000000000040962b\n.text:000000000040962d\n.text:000000000040962f\n.text:0000000000409631\n.text:0000000000409633\n'
p1028
tp1029
sS'opendirat'
p1030
(S'\n__stdcall opendirat(char * dir, int * pdir_fd)\n'
p1031
V\u000aDIR * opendirat(char *dir,int *pdir_fd)\u000a\u000a{\u000a  int iVar1;\u000a  int __fd;\u000a  DIR *pDVar2;\u000a  int *piVar3;\u000a  int *in_RCX;\u000a  uint in_EDX;\u000a  \u000a  pDVar2 = (DIR *)0x0;\u000a  __fd = openat_safer(dir,pdir_fd,(ulong)(in_EDX | 0x10900));\u000a  if (-1 < __fd) {\u000a    set_cloexec_flag();\u000a    pDVar2 = fdopendir(__fd);\u000a    if (pDVar2 == (DIR *)0x0) {\u000a      piVar3 = __errno_location();\u000a      iVar1 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar1;\u000a      pDVar2 = (DIR *)0x0;\u000a    }\u000a    else {\u000a      *in_RCX = __fd;\u000a    }\u000a  }\u000a  return (DIR *)pDVar2;\u000a}\u000a\u000a
p1032
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14,RCX\nOR EDX,0x10900\nXOR EBX,EBX\nXOR EAX,EAX\nCALL 0x00409160\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x00407903\nMOV ESI,0x1\nMOV EDI,EBP\nCALL 0x00407b80\nMOV EDI,EBP\nCALL 0x00401bb0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x004078ec\nMOV dword ptr [R14],EBP\nJMP 0x00407903\nCALL 0x00401800\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x004019c0\nMOV dword ptr [RBX],R14D\nXOR EBX,EBX\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1033
S'55\n41 56\n53\n49 89 ce\n81 ca 00 09 01 00\n31 db\n31 c0\ne8 9a 18 00 00\n89 c5\n85 ed\n78 37\nbe 01 00 00 00\n89 ef\ne8 a8 02 00 00\n89 ef\ne8 d1 a2 ff ff\n48 89 c3\n48 85 db\n74 05\n41 89 2e\neb 17\ne8 0f 9f ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 c2 a0 ff ff\n44 89 33\n31 db\n48 89 d8\n5b\n41 5e\n5d\nc3\n'
p1034
S'.text:00000000004078b0\n.text:00000000004078b1\n.text:00000000004078b3\n.text:00000000004078b4\n.text:00000000004078b7\n.text:00000000004078bd\n.text:00000000004078bf\n.text:00000000004078c1\n.text:00000000004078c6\n.text:00000000004078c8\n.text:00000000004078ca\n.text:00000000004078cc\n.text:00000000004078d1\n.text:00000000004078d3\n.text:00000000004078d8\n.text:00000000004078da\n.text:00000000004078df\n.text:00000000004078e2\n.text:00000000004078e5\n.text:00000000004078e7\n.text:00000000004078ea\n.text:00000000004078ec\n.text:00000000004078f1\n.text:00000000004078f4\n.text:00000000004078f7\n.text:00000000004078f9\n.text:00000000004078fe\n.text:0000000000407901\n.text:0000000000407903\n.text:0000000000407906\n.text:0000000000407907\n.text:0000000000407909\n.text:000000000040790a\n'
p1035
tp1036
sS'c_isgraph'
p1037
(S'\n__stdcall c_isgraph()\n'
p1038
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p1039
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p1040
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p1041
S'.text:0000000000407ac0\n.text:0000000000407ac3\n.text:0000000000407ac6\n.text:0000000000407ac9\n'
p1042
tp1043
sS'hash_get_next'
p1044
(S'\n__stdcall hash_get_next(Hash_table * table, void * entry)\n'
p1045
V\u000avoid * hash_get_next(Hash_table *table,void *entry)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  hash_entry *phVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar2 = safe_hasher(table,entry);\u000a  phVar3 = phVar2;\u000a  while( true ) {\u000a    phVar1 = phVar3->next;\u000a    if ((phVar3->data == entry) && (phVar1 != (hash_entry *)0x0)) break;\u000a    phVar3 = phVar1;\u000a    if (phVar1 == (hash_entry *)0x0) {\u000a      do {\u000a        phVar2 = phVar2 + 1;\u000a        if (table->bucket_limit <= phVar2) {\u000a          return (void *)0x0;\u000a        }\u000a      } while (phVar2->data == (void *)0x0);\u000a      return phVar2->data;\u000a    }\u000a  }\u000a  return phVar1->data;\u000a}\u000a\u000a
p1046
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RSI\nMOV R14,RDI\nCALL 0x00407ff0\nMOV RCX,RAX\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV RSI,RCX\nMOV RCX,qword ptr [RSI + 0x8]\nTEST RCX,RCX\nSETZ DL\nCMP qword ptr [RSI],RBX\nJNZ 0x00408096\nTEST DL,DL\nJZ 0x004080c3\nTEST RCX,RCX\nJNZ 0x00408080\nMOV RDX,qword ptr [R14 + 0x8]\nADD RAX,0x10\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP RAX,RDX\nJNC 0x004080c8\nMOV RCX,qword ptr [RAX]\nADD RAX,0x10\nTEST RCX,RCX\nJZ 0x004080b0\nJMP 0x004080ca\nMOV RCX,qword ptr [RCX]\nJMP 0x004080ca\nXOR ECX,ECX\nMOV RAX,RCX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1047
S'41 56\n53\n50\n48 89 f3\n49 89 fe\ne8 81 ff ff ff\n48 89 c1\n66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 ce\n48 8b 4e 08\n48 85 c9\n0f 94 c2\n48 39 1e\n75 04\n84 d2\n74 2d\n48 85 c9\n75 e5\n49 8b 56 08\n48 83 c0 10\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 39 d0\n73 13\n48 8b 08\n48 83 c0 10\n48 85 c9\n74 ef\neb 07\n48 8b 09\neb 02\n31 c9\n48 89 c8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1048
S'.text:0000000000408060\n.text:0000000000408062\n.text:0000000000408063\n.text:0000000000408064\n.text:0000000000408067\n.text:000000000040806a\n.text:000000000040806f\n.text:0000000000408072\n.text:0000000000408080\n.text:0000000000408083\n.text:0000000000408087\n.text:000000000040808a\n.text:000000000040808d\n.text:0000000000408090\n.text:0000000000408092\n.text:0000000000408094\n.text:0000000000408096\n.text:0000000000408099\n.text:000000000040809b\n.text:000000000040809f\n.text:00000000004080a3\n.text:00000000004080b0\n.text:00000000004080b3\n.text:00000000004080b5\n.text:00000000004080b8\n.text:00000000004080bc\n.text:00000000004080bf\n.text:00000000004080c1\n.text:00000000004080c3\n.text:00000000004080c6\n.text:00000000004080c8\n.text:00000000004080ca\n.text:00000000004080cd\n.text:00000000004080d1\n.text:00000000004080d2\n.text:00000000004080d4\n'
p1049
tp1050
sS'i_ring_pop'
p1051
(S'\n__stdcall i_ring_pop(I_ring * ir)\n'
p1052
V\u000aint i_ring_pop(I_ring *ir)\u000a\u000a{\u000a  int iVar1;\u000a  _Bool _Var2;\u000a  \u000a  _Var2 = i_ring_empty(ir);\u000a  if (_Var2 != false) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = ir->ir_data[(ulong)ir->ir_front];\u000a  ir->ir_data[(ulong)ir->ir_front] = ir->ir_default_val;\u000a  if (ir->ir_front == ir->ir_back) {\u000a    ir->ir_empty = true;\u000a    return iVar1;\u000a  }\u000a  ir->ir_front = ir->ir_front + 3 & 3;\u000a  return iVar1;\u000a}\u000a\u000a
p1053
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00408da0\nTEST AL,AL\nJNZ 0x00408e22\nMOV ECX,dword ptr [RBX + 0x10]\nMOV EDX,dword ptr [RBX + 0x14]\nMOV EAX,dword ptr [RBX + RDX*0x4]\nMOV dword ptr [RBX + RDX*0x4],ECX\nMOV ECX,dword ptr [RBX + 0x14]\nCMP ECX,dword ptr [RBX + 0x18]\nJNZ 0x00408e17\nMOV byte ptr [RBX + 0x1c],0x1\nPOP RBX\nRET\nADD ECX,0x3\nAND ECX,0x3\nMOV dword ptr [RBX + 0x14],ECX\nPOP RBX\nRET\nCALL 0x004017f0\n'
p1054
S'53\n48 89 fb\ne8 a7 ff ff ff\n84 c0\n75 25\n8b 4b 10\n8b 53 14\n8b 04 93\n89 0c 93\n8b 4b 14\n3b 4b 18\n75 06\nc6 43 1c 01\n5b\nc3\n83 c1 03\n83 e1 03\n89 4b 14\n5b\nc3\ne8 c9 89 ff ff\n'
p1055
S'.text:0000000000408df0\n.text:0000000000408df1\n.text:0000000000408df4\n.text:0000000000408df9\n.text:0000000000408dfb\n.text:0000000000408dfd\n.text:0000000000408e00\n.text:0000000000408e03\n.text:0000000000408e06\n.text:0000000000408e09\n.text:0000000000408e0c\n.text:0000000000408e0f\n.text:0000000000408e11\n.text:0000000000408e15\n.text:0000000000408e16\n.text:0000000000408e17\n.text:0000000000408e1a\n.text:0000000000408e1d\n.text:0000000000408e20\n.text:0000000000408e21\n.text:0000000000408e22\n'
p1056
tp1057
sS'quotearg_buffer_restyled'
p1058
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p1059
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_0040371c_caseD_7;\u000a  case 2:\u000a    goto switchD_0040371c_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_0040371c_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_0040371c_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_0040371c_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_0040371c_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_0040371c_caseD_7;\u000aswitchD_0040371c_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_0040371c_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_0040371c_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_004041e0;\u000aLAB_00403900:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_004041e9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_004041f8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_0040390b:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_0040394f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_0040394f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_004041f8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_00404125;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x00404030;\u000a    }\u000a    goto LAB_004041f8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040415a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_004041f8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00404189;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403c48;\u000a  case '\u005ca':\u000a    goto joined_r0x00403b38;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00403b38;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00403966_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00403b38;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00403b38;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00403966_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00403b38:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040409e;\u000a    }\u000a    goto LAB_004041f8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_004041f8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_004041f8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_004041f8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_004041f8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_004041f8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00403966_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_004040f6;\u000a      goto joined_r0x004040e8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00403bf1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x004040e8;\u000a      goto LAB_004040f6;\u000a    }\u000a    goto LAB_004041f8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_004041f8;\u000a  }\u000a  goto joined_r0x00404030;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040415a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00404189;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00404189:\u000a  if (1 < uVar10) {\u000aLAB_00403c66:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_00403d22;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00403bf1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_00403d22:\u000a        if (bVar6 != 0) goto LAB_004041f8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403c48:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403c66;\u000ajoined_r0x00404030:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x00404030:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00404057;\u000aLAB_00404090:\u000a    if (bVar22) goto LAB_00404095;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00404090;\u000aLAB_00404057:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00404095:\u000a      if (bVar6 != 0) goto LAB_004041f8;\u000aLAB_0040409e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x004040e8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_004040f6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x004040e8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_00404125:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00403900;\u000aLAB_004041e0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_004041e9;\u000a  goto LAB_0040390b;\u000a}\u000a\u000a
p1060
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x004018e0\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x004042c5\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x40ae40 + RAX*0x8]\nMOV EDI,0x40b366\nMOV ESI,R15D\nCALL 0x00404970\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x40b368\nMOV ESI,R15D\nCALL 0x00404970\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x0040377d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00403780\nNOP\nCMP R12,RSI\nJNC 0x0040376e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00403760\nJMP 0x00403780\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x004018f0\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x0040384c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x0040384c\nMOV ECX,0x40b364\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00403846\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x004037e7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00403814\nTEST RSI,RSI\nJZ 0x00403801\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x40b368\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00403822\nMOV ECX,0x40b368\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x0040384c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040429c\nMOV ECX,0x40b364\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x004041e0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x004041e9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x0040394f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x0040394a\nCMP R11,-0x1\nJNZ 0x0040394a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x004018f0\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x004039a0\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00403bfc\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x40ae98 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x004041f8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00404050\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00404057\nJMP 0x00404090\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x004019e0\nTEST EAX,EAX\nSETZ AL\nJNZ 0x004039ed\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00403951\nJMP 0x004041f8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00403951\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x0040397b\nCMP EBX,0x2\nJNZ 0x0040397b\nTEST R13,R13\nJNZ 0x0040397b\nJMP 0x004041f8\nCMP R11,-0x1\nJZ 0x00403dd3\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x00403df3\nJMP 0x0040397b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403e04\nTEST R8B,R8B\nJNZ 0x004041f8\nCMP EBX,0x2\nJNZ 0x00403aa8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403aa8\nCMP R12,RSI\nJNC 0x00403a83\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403a92\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403aa1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00403ab2\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403f78\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403f78\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403f78\nCMP RCX,RSI\nJNC 0x00403aec\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x00403afb\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403986\nJMP 0x00404050\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403979\nJMP 0x00403b5a\nMOV DL,0x74\nJMP 0x00403b42\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403979\nJMP 0x00403b5a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403979\nJMP 0x00403b5a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x004041f8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00403979\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040409e\nJMP 0x004041f8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00403979\nTEST R8B,R8B\nJNZ 0x004041f8\nCMP R12,RSI\nJNC 0x00403b8a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403b99\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403ba8\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00403979\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x00403f8b\nCMP EBX,0x2\nJNZ 0x00403979\nTEST R8B,R8B\nJZ 0x00403979\nJMP 0x004041f8\nCMP EBX,0x2\nJNZ 0x00403e24\nTEST R8B,R8B\nJNZ 0x004041f8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x004040f6\nJMP 0x00404119\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403e45\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401c50\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00404038\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x00404038\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x00403d22\nJMP 0x00403cf0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403cd9\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403cd6\nCMP R12,RSI\nJNC 0x00403cbb\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x00403cca\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x00403d10\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x00403d10\nTEST BPL,0x1\nJZ 0x00403db3\nCMP R12,RSI\nJNC 0x00403d04\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403db3\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x00403cf0\nTEST R8B,R8B\nJNZ 0x004041f8\nCMP EBX,0x2\nJNZ 0x00403d6a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x00403d6a\nCMP R12,RSI\nJNC 0x00403d42\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403d51\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403d60\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403d74\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403d8b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403da5\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403ca0\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x004040f6\nJMP 0x00404119\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x0040397b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x0040397b\nJMP 0x004041f8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x00404125\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403986\nJMP 0x00404050\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00403b42\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x004040f6\nJMP 0x00404119\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403e67\nMOV RDI,R10\nCALL 0x004018f0\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401930\nMOV R14,RAX\nTEST R14,R14\nJZ 0x0040413f\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x00404137\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00404146\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x00403f2e\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x00403f26\nBT RDI,RDX\nJC 0x00404292\nINC RCX\nCMP RCX,R14\nJC 0x00403f10\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401c40\nTEST EAX,EAX\nJNZ 0x00403f43\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401c30\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403e85\nJMP 0x00404189\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403986\nJMP 0x00404050\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00403979\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00403979\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00403979\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x0040397b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x004041c2\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x004041f8\nCMP R12,RSI\nJNC 0x00403fee\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x00404001\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00404010\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x0040401f\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403986\nJMP 0x00404050\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403986\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00404090\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00404095\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x004040f0\nJMP 0x00404095\nTEST BPL,BPL\nJZ 0x004040f0\nTEST R8B,R8B\nJNZ 0x004041f8\nCMP EBX,0x2\nJNZ 0x004040d8\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x004040d8\nCMP R12,RSI\nJNC 0x004040b3\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004040c2\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004040d1\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004040e2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x00404122\nJMP 0x0040411e\nTEST DIL,0x1\nJZ 0x00404119\nAND AL,0x1\nJNZ 0x00404119\nCMP R12,RSI\nJNC 0x00404104\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00404113\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x00404122\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x004041e0\nJMP 0x00403900\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00404184\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040417c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x004041b8\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040415a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00404189\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403c48\nJMP 0x00403c66\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00404189\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00403986\nJMP 0x00404050\nCMP R13,R11\nJNZ 0x0040390b\nTEST R8B,R8B\nJZ 0x00404252\nCMP EBX,0x2\nJNZ 0x00404252\nTEST R12,R12\nJNZ 0x00404252\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00403690\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00404286\nTEST R8B,R8B\nJNZ 0x00404286\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00404286\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00404279\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00404270\nCMP R12,RSI\nJNC 0x0040423d\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x0040423d\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x004041f8\nTEST RSI,RSI\nJZ 0x004042a9\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x40b364\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x0040384c\nCALL 0x004017f0\n'
p1061
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 22 e2 ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 40 ae 40 00\nbf 66 b3 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 68 b3 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 63 e1 ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 64 b3 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 68 b3 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 68 b3 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 64 b3 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 c3 df ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 98 ae 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 27 e0 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 37 e0 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 91 da ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 83 da ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 09 dd ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 d2 dc ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 64 b3 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 26 d5 ff ff\n'
p1062
S'.text:0000000000403690\n.text:0000000000403691\n.text:0000000000403693\n.text:0000000000403695\n.text:0000000000403697\n.text:0000000000403699\n.text:000000000040369a\n.text:00000000004036a1\n.text:00000000004036a4\n.text:00000000004036a7\n.text:00000000004036aa\n.text:00000000004036af\n.text:00000000004036b4\n.text:00000000004036b9\n.text:00000000004036be\n.text:00000000004036c6\n.text:00000000004036ca\n.text:00000000004036d0\n.text:00000000004036d8\n.text:00000000004036dd\n.text:00000000004036e5\n.text:00000000004036ea\n.text:00000000004036ee\n.text:00000000004036f0\n.text:00000000004036f3\n.text:00000000004036f6\n.text:00000000004036f9\n.text:00000000004036fe\n.text:0000000000403701\n.text:0000000000403704\n.text:0000000000403707\n.text:000000000040370a\n.text:000000000040370c\n.text:000000000040370f\n.text:0000000000403714\n.text:0000000000403717\n.text:000000000040371c\n.text:0000000000403723\n.text:0000000000403728\n.text:000000000040372b\n.text:0000000000403730\n.text:0000000000403735\n.text:000000000040373a\n.text:000000000040373d\n.text:0000000000403742\n.text:0000000000403747\n.text:000000000040374c\n.text:000000000040374e\n.text:0000000000403750\n.text:0000000000403755\n.text:0000000000403757\n.text:000000000040375a\n.text:000000000040375c\n.text:000000000040375e\n.text:0000000000403760\n.text:0000000000403763\n.text:0000000000403765\n.text:000000000040376a\n.text:000000000040376e\n.text:0000000000403774\n.text:0000000000403777\n.text:0000000000403779\n.text:000000000040377b\n.text:000000000040377d\n.text:0000000000403780\n.text:0000000000403785\n.text:0000000000403788\n.text:000000000040378d\n.text:0000000000403792\n.text:0000000000403795\n.text:0000000000403798\n.text:000000000040379b\n.text:000000000040379e\n.text:00000000004037a3\n.text:00000000004037a6\n.text:00000000004037a9\n.text:00000000004037ae\n.text:00000000004037b1\n.text:00000000004037b3\n.text:00000000004037b6\n.text:00000000004037b8\n.text:00000000004037ba\n.text:00000000004037bd\n.text:00000000004037c2\n.text:00000000004037c7\n.text:00000000004037cc\n.text:00000000004037cf\n.text:00000000004037d5\n.text:00000000004037d7\n.text:00000000004037da\n.text:00000000004037dd\n.text:00000000004037e0\n.text:00000000004037e2\n.text:00000000004037e4\n.text:00000000004037e7\n.text:00000000004037ea\n.text:00000000004037ef\n.text:00000000004037f2\n.text:00000000004037f4\n.text:00000000004037f7\n.text:00000000004037f9\n.text:00000000004037fe\n.text:0000000000403801\n.text:0000000000403806\n.text:000000000040380c\n.text:0000000000403812\n.text:0000000000403814\n.text:0000000000403819\n.text:000000000040381f\n.text:0000000000403822\n.text:0000000000403825\n.text:0000000000403828\n.text:000000000040382a\n.text:000000000040382f\n.text:0000000000403832\n.text:0000000000403838\n.text:000000000040383d\n.text:0000000000403843\n.text:0000000000403846\n.text:0000000000403849\n.text:000000000040384c\n.text:0000000000403854\n.text:0000000000403856\n.text:0000000000403858\n.text:000000000040385b\n.text:000000000040385f\n.text:0000000000403861\n.text:0000000000403864\n.text:0000000000403868\n.text:000000000040386a\n.text:000000000040386d\n.text:0000000000403870\n.text:0000000000403873\n.text:0000000000403875\n.text:0000000000403879\n.text:000000000040387b\n.text:000000000040387f\n.text:0000000000403882\n.text:0000000000403885\n.text:0000000000403888\n.text:000000000040388a\n.text:000000000040388e\n.text:0000000000403897\n.text:000000000040389a\n.text:000000000040389c\n.text:00000000004038a0\n.text:00000000004038a2\n.text:00000000004038a6\n.text:00000000004038a8\n.text:00000000004038ab\n.text:00000000004038af\n.text:00000000004038b1\n.text:00000000004038b4\n.text:00000000004038b8\n.text:00000000004038bd\n.text:00000000004038c0\n.text:00000000004038c4\n.text:00000000004038cc\n.text:00000000004038cf\n.text:00000000004038d2\n.text:00000000004038d4\n.text:00000000004038d8\n.text:00000000004038db\n.text:00000000004038dd\n.text:00000000004038e2\n.text:00000000004038e6\n.text:00000000004038eb\n.text:00000000004038f0\n.text:00000000004038f4\n.text:00000000004038fa\n.text:0000000000403900\n.text:0000000000403905\n.text:000000000040390b\n.text:0000000000403910\n.text:0000000000403912\n.text:0000000000403917\n.text:000000000040391b\n.text:000000000040391d\n.text:0000000000403921\n.text:0000000000403923\n.text:0000000000403925\n.text:0000000000403928\n.text:000000000040392d\n.text:000000000040392f\n.text:0000000000403934\n.text:0000000000403939\n.text:000000000040393d\n.text:0000000000403942\n.text:0000000000403947\n.text:000000000040394a\n.text:000000000040394d\n.text:000000000040394f\n.text:0000000000403951\n.text:0000000000403956\n.text:000000000040395a\n.text:0000000000403960\n.text:0000000000403962\n.text:0000000000403964\n.text:0000000000403966\n.text:000000000040396e\n.text:0000000000403973\n.text:0000000000403979\n.text:000000000040397b\n.text:0000000000403980\n.text:0000000000403986\n.text:000000000040398f\n.text:0000000000403995\n.text:00000000004039a0\n.text:00000000004039a2\n.text:00000000004039a5\n.text:00000000004039a9\n.text:00000000004039b1\n.text:00000000004039b4\n.text:00000000004039b9\n.text:00000000004039bb\n.text:00000000004039be\n.text:00000000004039c0\n.text:00000000004039c5\n.text:00000000004039c8\n.text:00000000004039cd\n.text:00000000004039d0\n.text:00000000004039d5\n.text:00000000004039d9\n.text:00000000004039de\n.text:00000000004039e0\n.text:00000000004039e2\n.text:00000000004039e8\n.text:00000000004039ed\n.text:00000000004039f2\n.text:00000000004039f5\n.text:00000000004039fa\n.text:00000000004039fe\n.text:0000000000403a03\n.text:0000000000403a08\n.text:0000000000403a0a\n.text:0000000000403a0c\n.text:0000000000403a11\n.text:0000000000403a13\n.text:0000000000403a16\n.text:0000000000403a1c\n.text:0000000000403a1f\n.text:0000000000403a25\n.text:0000000000403a28\n.text:0000000000403a2e\n.text:0000000000403a33\n.text:0000000000403a37\n.text:0000000000403a3d\n.text:0000000000403a40\n.text:0000000000403a43\n.text:0000000000403a47\n.text:0000000000403a4a\n.text:0000000000403a4c\n.text:0000000000403a4f\n.text:0000000000403a55\n.text:0000000000403a5a\n.text:0000000000403a5f\n.text:0000000000403a65\n.text:0000000000403a68\n.text:0000000000403a6e\n.text:0000000000403a71\n.text:0000000000403a73\n.text:0000000000403a75\n.text:0000000000403a77\n.text:0000000000403a79\n.text:0000000000403a7c\n.text:0000000000403a7e\n.text:0000000000403a83\n.text:0000000000403a88\n.text:0000000000403a8b\n.text:0000000000403a8d\n.text:0000000000403a92\n.text:0000000000403a97\n.text:0000000000403a9a\n.text:0000000000403a9c\n.text:0000000000403aa1\n.text:0000000000403aa5\n.text:0000000000403aa8\n.text:0000000000403aab\n.text:0000000000403aad\n.text:0000000000403ab2\n.text:0000000000403ab7\n.text:0000000000403ab9\n.text:0000000000403abc\n.text:0000000000403abf\n.text:0000000000403ac5\n.text:0000000000403ac9\n.text:0000000000403acc\n.text:0000000000403ad2\n.text:0000000000403ad6\n.text:0000000000403ad9\n.text:0000000000403adc\n.text:0000000000403ae2\n.text:0000000000403ae5\n.text:0000000000403ae7\n.text:0000000000403aec\n.text:0000000000403af1\n.text:0000000000403af4\n.text:0000000000403af6\n.text:0000000000403afb\n.text:0000000000403aff\n.text:0000000000403b04\n.text:0000000000403b0a\n.text:0000000000403b0f\n.text:0000000000403b11\n.text:0000000000403b16\n.text:0000000000403b1c\n.text:0000000000403b1e\n.text:0000000000403b20\n.text:0000000000403b22\n.text:0000000000403b24\n.text:0000000000403b29\n.text:0000000000403b2f\n.text:0000000000403b31\n.text:0000000000403b33\n.text:0000000000403b38\n.text:0000000000403b3e\n.text:0000000000403b40\n.text:0000000000403b42\n.text:0000000000403b47\n.text:0000000000403b49\n.text:0000000000403b4f\n.text:0000000000403b54\n.text:0000000000403b5a\n.text:0000000000403b5d\n.text:0000000000403b60\n.text:0000000000403b66\n.text:0000000000403b6b\n.text:0000000000403b6e\n.text:0000000000403b71\n.text:0000000000403b77\n.text:0000000000403b7a\n.text:0000000000403b80\n.text:0000000000403b83\n.text:0000000000403b85\n.text:0000000000403b8a\n.text:0000000000403b8f\n.text:0000000000403b92\n.text:0000000000403b94\n.text:0000000000403b99\n.text:0000000000403b9e\n.text:0000000000403ba1\n.text:0000000000403ba3\n.text:0000000000403ba8\n.text:0000000000403bac\n.text:0000000000403bae\n.text:0000000000403bb3\n.text:0000000000403bb6\n.text:0000000000403bb9\n.text:0000000000403bbf\n.text:0000000000403bc2\n.text:0000000000403bc8\n.text:0000000000403bcb\n.text:0000000000403bd1\n.text:0000000000403bd6\n.text:0000000000403bd9\n.text:0000000000403bdf\n.text:0000000000403be2\n.text:0000000000403be8\n.text:0000000000403beb\n.text:0000000000403bed\n.text:0000000000403bf1\n.text:0000000000403bf7\n.text:0000000000403bfc\n.text:0000000000403c00\n.text:0000000000403c09\n.text:0000000000403c0f\n.text:0000000000403c14\n.text:0000000000403c19\n.text:0000000000403c1e\n.text:0000000000403c21\n.text:0000000000403c26\n.text:0000000000403c29\n.text:0000000000403c2c\n.text:0000000000403c31\n.text:0000000000403c36\n.text:0000000000403c3a\n.text:0000000000403c3f\n.text:0000000000403c44\n.text:0000000000403c48\n.text:0000000000403c4a\n.text:0000000000403c4f\n.text:0000000000403c55\n.text:0000000000403c58\n.text:0000000000403c5a\n.text:0000000000403c5d\n.text:0000000000403c60\n.text:0000000000403c66\n.text:0000000000403c6b\n.text:0000000000403c6e\n.text:0000000000403c71\n.text:0000000000403c74\n.text:0000000000403c77\n.text:0000000000403c79\n.text:0000000000403c7d\n.text:0000000000403c7f\n.text:0000000000403c84\n.text:0000000000403c89\n.text:0000000000403c8f\n.text:0000000000403ca0\n.text:0000000000403ca5\n.text:0000000000403ca7\n.text:0000000000403caa\n.text:0000000000403cac\n.text:0000000000403caf\n.text:0000000000403cb1\n.text:0000000000403cb4\n.text:0000000000403cb6\n.text:0000000000403cbb\n.text:0000000000403cc0\n.text:0000000000403cc3\n.text:0000000000403cc5\n.text:0000000000403cca\n.text:0000000000403cce\n.text:0000000000403cd6\n.text:0000000000403cd9\n.text:0000000000403cdc\n.text:0000000000403cde\n.text:0000000000403ce2\n.text:0000000000403cf0\n.text:0000000000403cf4\n.text:0000000000403cfa\n.text:0000000000403cfd\n.text:0000000000403cff\n.text:0000000000403d04\n.text:0000000000403d07\n.text:0000000000403d09\n.text:0000000000403d10\n.text:0000000000403d13\n.text:0000000000403d18\n.text:0000000000403d1b\n.text:0000000000403d20\n.text:0000000000403d22\n.text:0000000000403d25\n.text:0000000000403d2b\n.text:0000000000403d2e\n.text:0000000000403d30\n.text:0000000000403d34\n.text:0000000000403d36\n.text:0000000000403d38\n.text:0000000000403d3b\n.text:0000000000403d3d\n.text:0000000000403d42\n.text:0000000000403d47\n.text:0000000000403d4a\n.text:0000000000403d4c\n.text:0000000000403d51\n.text:0000000000403d56\n.text:0000000000403d59\n.text:0000000000403d5b\n.text:0000000000403d60\n.text:0000000000403d64\n.text:0000000000403d66\n.text:0000000000403d6a\n.text:0000000000403d6d\n.text:0000000000403d6f\n.text:0000000000403d74\n.text:0000000000403d79\n.text:0000000000403d7c\n.text:0000000000403d7e\n.text:0000000000403d81\n.text:0000000000403d84\n.text:0000000000403d87\n.text:0000000000403d8b\n.text:0000000000403d90\n.text:0000000000403d93\n.text:0000000000403d95\n.text:0000000000403d98\n.text:0000000000403d9b\n.text:0000000000403d9e\n.text:0000000000403da1\n.text:0000000000403da5\n.text:0000000000403da9\n.text:0000000000403dad\n.text:0000000000403db1\n.text:0000000000403db3\n.text:0000000000403db7\n.text:0000000000403dba\n.text:0000000000403dc0\n.text:0000000000403dc4\n.text:0000000000403dc8\n.text:0000000000403dce\n.text:0000000000403dd3\n.text:0000000000403dd6\n.text:0000000000403dd9\n.text:0000000000403dde\n.text:0000000000403de1\n.text:0000000000403de3\n.text:0000000000403de6\n.text:0000000000403ded\n.text:0000000000403df3\n.text:0000000000403df5\n.text:0000000000403df9\n.text:0000000000403dff\n.text:0000000000403e04\n.text:0000000000403e09\n.text:0000000000403e0f\n.text:0000000000403e12\n.text:0000000000403e14\n.text:0000000000403e19\n.text:0000000000403e1f\n.text:0000000000403e24\n.text:0000000000403e26\n.text:0000000000403e2b\n.text:0000000000403e31\n.text:0000000000403e33\n.text:0000000000403e36\n.text:0000000000403e3a\n.text:0000000000403e40\n.text:0000000000403e45\n.text:0000000000403e51\n.text:0000000000403e55\n.text:0000000000403e57\n.text:0000000000403e5a\n.text:0000000000403e5f\n.text:0000000000403e64\n.text:0000000000403e67\n.text:0000000000403e6b\n.text:0000000000403e70\n.text:0000000000403e72\n.text:0000000000403e76\n.text:0000000000403e78\n.text:0000000000403e80\n.text:0000000000403e85\n.text:0000000000403e8a\n.text:0000000000403e8e\n.text:0000000000403e92\n.text:0000000000403e9a\n.text:0000000000403e9d\n.text:0000000000403ea2\n.text:0000000000403ea5\n.text:0000000000403ea8\n.text:0000000000403ead\n.text:0000000000403eb0\n.text:0000000000403eb3\n.text:0000000000403eb9\n.text:0000000000403ebd\n.text:0000000000403ec7\n.text:0000000000403ecd\n.text:0000000000403ed1\n.text:0000000000403ed6\n.text:0000000000403edc\n.text:0000000000403ee0\n.text:0000000000403ee3\n.text:0000000000403ee7\n.text:0000000000403ee9\n.text:0000000000403eee\n.text:0000000000403ef3\n.text:0000000000403ef7\n.text:0000000000403ef9\n.text:0000000000403efe\n.text:0000000000403f03\n.text:0000000000403f07\n.text:0000000000403f0c\n.text:0000000000403f10\n.text:0000000000403f14\n.text:0000000000403f17\n.text:0000000000403f1a\n.text:0000000000403f1c\n.text:0000000000403f20\n.text:0000000000403f26\n.text:0000000000403f29\n.text:0000000000403f2c\n.text:0000000000403f2e\n.text:0000000000403f32\n.text:0000000000403f37\n.text:0000000000403f39\n.text:0000000000403f3b\n.text:0000000000403f43\n.text:0000000000403f48\n.text:0000000000403f4b\n.text:0000000000403f53\n.text:0000000000403f56\n.text:0000000000403f59\n.text:0000000000403f5e\n.text:0000000000403f61\n.text:0000000000403f63\n.text:0000000000403f68\n.text:0000000000403f6d\n.text:0000000000403f73\n.text:0000000000403f78\n.text:0000000000403f7b\n.text:0000000000403f80\n.text:0000000000403f86\n.text:0000000000403f8b\n.text:0000000000403f90\n.text:0000000000403f96\n.text:0000000000403f9a\n.text:0000000000403f9d\n.text:0000000000403fa3\n.text:0000000000403fa9\n.text:0000000000403faf\n.text:0000000000403fb4\n.text:0000000000403fb6\n.text:0000000000403fb9\n.text:0000000000403fbf\n.text:0000000000403fc3\n.text:0000000000403fc5\n.text:0000000000403fcf\n.text:0000000000403fd3\n.text:0000000000403fd9\n.text:0000000000403fdc\n.text:0000000000403fde\n.text:0000000000403fe4\n.text:0000000000403fe7\n.text:0000000000403fe9\n.text:0000000000403fee\n.text:0000000000403ff3\n.text:0000000000403ff6\n.text:0000000000403ffa\n.text:0000000000403ffc\n.text:0000000000404001\n.text:0000000000404006\n.text:0000000000404009\n.text:000000000040400b\n.text:0000000000404010\n.text:0000000000404015\n.text:0000000000404018\n.text:000000000040401a\n.text:000000000040401f\n.text:0000000000404023\n.text:0000000000404025\n.text:0000000000404028\n.text:000000000040402b\n.text:0000000000404030\n.text:0000000000404036\n.text:0000000000404038\n.text:000000000040403d\n.text:0000000000404042\n.text:0000000000404048\n.text:0000000000404050\n.text:0000000000404055\n.text:0000000000404057\n.text:000000000040405c\n.text:000000000040405f\n.text:0000000000404061\n.text:0000000000404064\n.text:0000000000404066\n.text:0000000000404069\n.text:000000000040406c\n.text:000000000040406f\n.text:0000000000404071\n.text:0000000000404079\n.text:000000000040407c\n.text:000000000040407e\n.text:0000000000404080\n.text:0000000000404090\n.text:0000000000404093\n.text:0000000000404095\n.text:0000000000404098\n.text:000000000040409e\n.text:00000000004040a1\n.text:00000000004040a3\n.text:00000000004040a5\n.text:00000000004040a7\n.text:00000000004040a9\n.text:00000000004040ac\n.text:00000000004040ae\n.text:00000000004040b3\n.text:00000000004040b8\n.text:00000000004040bb\n.text:00000000004040bd\n.text:00000000004040c2\n.text:00000000004040c7\n.text:00000000004040ca\n.text:00000000004040cc\n.text:00000000004040d1\n.text:00000000004040d5\n.text:00000000004040d8\n.text:00000000004040db\n.text:00000000004040dd\n.text:00000000004040e2\n.text:00000000004040e5\n.text:00000000004040e8\n.text:00000000004040ea\n.text:00000000004040f0\n.text:00000000004040f4\n.text:00000000004040f6\n.text:00000000004040f8\n.text:00000000004040fa\n.text:00000000004040fd\n.text:00000000004040ff\n.text:0000000000404104\n.text:0000000000404109\n.text:000000000040410c\n.text:000000000040410e\n.text:0000000000404113\n.text:0000000000404117\n.text:0000000000404119\n.text:000000000040411c\n.text:000000000040411e\n.text:0000000000404122\n.text:0000000000404125\n.text:0000000000404128\n.text:000000000040412c\n.text:0000000000404132\n.text:0000000000404137\n.text:000000000040413f\n.text:0000000000404144\n.text:0000000000404146\n.text:000000000040414e\n.text:0000000000404153\n.text:0000000000404155\n.text:000000000040415a\n.text:000000000040415f\n.text:0000000000404163\n.text:0000000000404165\n.text:000000000040416a\n.text:000000000040416d\n.text:0000000000404170\n.text:0000000000404172\n.text:000000000040417a\n.text:000000000040417c\n.text:0000000000404184\n.text:0000000000404189\n.text:000000000040418d\n.text:0000000000404192\n.text:0000000000404197\n.text:000000000040419b\n.text:00000000004041a0\n.text:00000000004041a5\n.text:00000000004041a9\n.text:00000000004041ad\n.text:00000000004041b3\n.text:00000000004041b8\n.text:00000000004041c0\n.text:00000000004041c2\n.text:00000000004041c4\n.text:00000000004041c8\n.text:00000000004041cd\n.text:00000000004041d3\n.text:00000000004041e0\n.text:00000000004041e3\n.text:00000000004041e9\n.text:00000000004041ec\n.text:00000000004041ee\n.text:00000000004041f1\n.text:00000000004041f3\n.text:00000000004041f6\n.text:00000000004041f8\n.text:0000000000404200\n.text:0000000000404206\n.text:000000000040420a\n.text:000000000040420d\n.text:0000000000404211\n.text:0000000000404216\n.text:000000000040421a\n.text:000000000040421e\n.text:0000000000404221\n.text:0000000000404224\n.text:0000000000404227\n.text:000000000040422b\n.text:000000000040422f\n.text:0000000000404231\n.text:0000000000404236\n.text:000000000040423a\n.text:000000000040423d\n.text:0000000000404240\n.text:0000000000404247\n.text:0000000000404248\n.text:000000000040424a\n.text:000000000040424c\n.text:000000000040424e\n.text:0000000000404250\n.text:0000000000404251\n.text:0000000000404252\n.text:000000000040425a\n.text:000000000040425d\n.text:000000000040425f\n.text:0000000000404262\n.text:0000000000404264\n.text:0000000000404266\n.text:0000000000404268\n.text:000000000040426a\n.text:000000000040426d\n.text:0000000000404270\n.text:0000000000404273\n.text:0000000000404275\n.text:0000000000404279\n.text:000000000040427c\n.text:000000000040427f\n.text:0000000000404282\n.text:0000000000404284\n.text:0000000000404286\n.text:0000000000404289\n.text:000000000040428b\n.text:0000000000404290\n.text:0000000000404292\n.text:0000000000404297\n.text:000000000040429c\n.text:000000000040429f\n.text:00000000004042a1\n.text:00000000004042a6\n.text:00000000004042a9\n.text:00000000004042ae\n.text:00000000004042b1\n.text:00000000004042b7\n.text:00000000004042bd\n.text:00000000004042c0\n.text:00000000004042c5\n'
p1063
tp1064
sS'getgrgid'
p1065
(S'\n__stdcall getgrgid(__gid_t __gid)\n'
p1066
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000agroup * getgrgid(__gid_t __gid)\u000a\u000a{\u000a  group *pgVar1;\u000a  \u000a  pgVar1 = (group *)(*(code *)PTR_getgrgid_0060f0e0)();\u000a  return pgVar1;\u000a}\u000a\u000a
p1067
S'JMP qword ptr [0x0060f0e0]\n'
p1068
S'ff 25 8a d7 20 00\n'
p1069
S'.plt:0000000000401950\n'
p1070
tp1071
sS'is_zero_or_power_of_two'
p1072
(S'\n__stdcall is_zero_or_power_of_two(uintmax_t i)\n'
p1073
V\u000a_Bool is_zero_or_power_of_two(uintmax_t i)\u000a\u000a{\u000a  return (_Bool)((i - 1 & i) == 0);\u000a}\u000a\u000a
p1074
S'LEA RAX,[RDI + -0x1]\nTEST RAX,RDI\nSETZ AL\nRET\n'
p1075
S'48 8d 47 ff\n48 85 f8\n0f 94 c0\nc3\n'
p1076
S'.text:0000000000407cf0\n.text:0000000000407cf4\n.text:0000000000407cf7\n.text:0000000000407cfa\n'
p1077
tp1078
sS'rotr_sz'
p1079
(S'\n__stdcall rotr_sz(size_t x)\n'
p1080
V\u000asize_t rotr_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1081
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1082
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1083
S'.text:00000000004095d0\n.text:00000000004095d2\n.text:00000000004095d5\n.text:00000000004095d8\n'
p1084
tp1085
sS'set_quoting_style'
p1086
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p1087
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p1088
S'TEST RDI,RDI\nMOV EAX,0x60f360\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p1089
S'48 85 ff\nb8 60 f3 60 00\n48 0f 45 c7\n89 30\nc3\n'
p1090
S'.text:0000000000403570\n.text:0000000000403573\n.text:0000000000403578\n.text:000000000040357c\n.text:000000000040357e\n'
p1091
tp1092
sS'hash_get_entries'
p1093
(S'\n__stdcall hash_get_entries(Hash_table * table, void * * buffer, size_t buffer_size)\n'
p1094
V\u000asize_t hash_get_entries(Hash_table *table,void **buffer,size_t buffer_size)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  ulong uVar2;\u000a  hash_entry *phVar3;\u000a  \u000a  phVar3 = table->bucket;\u000a  if (table->bucket_limit <= phVar3) {\u000a    return 0;\u000a  }\u000a  uVar2 = 0;\u000a  do {\u000a    phVar1 = phVar3;\u000a    if (phVar3->data != (void *)0x0) {\u000a      while (phVar1 != (hash_entry *)0x0) {\u000a        if (buffer_size <= uVar2) {\u000a          return uVar2;\u000a        }\u000a        buffer[uVar2] = phVar1->data;\u000a        uVar2 = uVar2 + 1;\u000a        phVar1 = phVar1->next;\u000a      }\u000a    }\u000a    phVar3 = phVar3 + 1;\u000a  } while (phVar3 < table->bucket_limit);\u000a  return uVar2;\u000a}\u000a\u000a
p1095
S'MOV R8,qword ptr [RDI]\nCMP R8,qword ptr [RDI + 0x8]\nJNC 0x00408123\nXOR EAX,EAX\nCMP qword ptr [R8],0x0\nJZ 0x00408118\nTEST R8,R8\nJZ 0x00408118\nMOV R9,R8\nNOP dword ptr [RAX]\nCMP RAX,RDX\nJNC 0x00408122\nMOV RCX,qword ptr [R9]\nMOV qword ptr [RSI + RAX*0x8],RCX\nINC RAX\nMOV R9,qword ptr [R9 + 0x8]\nTEST R9,R9\nJNZ 0x00408100\nADD R8,0x10\nCMP R8,qword ptr [RDI + 0x8]\nJC 0x004080eb\nRET\nXOR EAX,EAX\nRET\n'
p1096
S'4c 8b 07\n4c 3b 47 08\n73 3a\n31 c0\n49 83 38 00\n74 27\n4d 85 c0\n74 22\n4d 89 c1\n0f 1f 80 00 00 00 00\n48 39 d0\n73 1d\n49 8b 09\n48 89 0c c6\n48 ff c0\n4d 8b 49 08\n4d 85 c9\n75 e8\n49 83 c0 10\n4c 3b 47 08\n72 c9\nc3\n31 c0\nc3\n'
p1097
S'.text:00000000004080e0\n.text:00000000004080e3\n.text:00000000004080e7\n.text:00000000004080e9\n.text:00000000004080eb\n.text:00000000004080ef\n.text:00000000004080f1\n.text:00000000004080f4\n.text:00000000004080f6\n.text:00000000004080f9\n.text:0000000000408100\n.text:0000000000408103\n.text:0000000000408105\n.text:0000000000408108\n.text:000000000040810c\n.text:000000000040810f\n.text:0000000000408113\n.text:0000000000408116\n.text:0000000000408118\n.text:000000000040811c\n.text:0000000000408120\n.text:0000000000408122\n.text:0000000000408123\n.text:0000000000408125\n'
p1098
tp1099
sS'textdomain'
p1100
(S'\n__stdcall textdomain()\n'
p1101
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_0060f078)();\u000a  return;\u000a}\u000a\u000a
p1102
S'JMP qword ptr [0x0060f078]\n'
p1103
S'ff 25 f2 d7 20 00\n'
p1104
S'.plt:0000000000401880\n'
p1105
tp1106
sS'xmemdup'
p1107
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p1108
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p1109
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x00405640\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401a50\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1110
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 ac c2 ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p1111
S'.text:0000000000405780\n.text:0000000000405782\n.text:0000000000405784\n.text:0000000000405785\n.text:0000000000405788\n.text:000000000040578b\n.text:000000000040578e\n.text:0000000000405793\n.text:0000000000405796\n.text:0000000000405799\n.text:000000000040579c\n.text:000000000040579f\n.text:00000000004057a4\n.text:00000000004057a7\n.text:00000000004057a8\n.text:00000000004057aa\n.text:00000000004057ac\n'
p1112
tp1113
sS'setup_dir'
p1114
(S'\n__stdcall setup_dir(FTS * fts)\n'
p1115
V\u000a_Bool setup_dir(FTS *fts)\u000a\u000a{\u000a  Hash_table *pHVar1;\u000a  cycle_check_state *state;\u000a  \u000a  if ((*(ushort *)&fts->fts_options & 0x102) == 0) {\u000a    state = (cycle_check_state *)malloc(0x20);\u000a    *(cycle_check_state **)&fts->fts_cycle = state;\u000a    if (state == (cycle_check_state *)0x0) {\u000a      return false;\u000a    }\u000a    cycle_check_init(state);\u000a  }\u000a  else {\u000a    pHVar1 = hash_initialize(0x1f,(Hash_tuning *)0x0,AD_hash,AD_compare,free);\u000a    *(Hash_table **)&fts->fts_cycle = pHVar1;\u000a    if (pHVar1 == (Hash_table *)0x0) {\u000a      return false;\u000a    }\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1116
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nMOVZX EAX,word ptr [RBX + 0x48]\nTEST AX,0x102\nJZ 0x004062fb\nXOR R14D,R14D\nMOV EDI,0x1f\nXOR ESI,ESI\nMOV EDX,0x407820\nMOV ECX,0x407830\nMOV R8D,0x4017e0\nCALL 0x00408200\nMOV qword ptr [RBX + 0x58],RAX\nTEST RAX,RAX\nJNZ 0x00406316\nJMP 0x00406319\nMOV EDI,0x20\nCALL 0x00401aa0\nMOV qword ptr [RBX + 0x58],RAX\nTEST RAX,RAX\nJZ 0x00406324\nMOV RDI,RAX\nCALL 0x00407c60\nMOV R14B,0x1\nMOV EAX,R14D\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nXOR R14D,R14D\nJMP 0x00406319\n'
p1117
S'41 56\n53\n50\n48 89 fb\n0f b7 43 48\n66 a9 02 01\n74 2a\n45 31 f6\nbf 1f 00 00 00\n31 f6\nba 20 78 40 00\nb9 30 78 40 00\n41 b8 e0 17 40 00\ne8 10 1f 00 00\n48 89 43 58\n48 85 c0\n75 1d\neb 1e\nbf 20 00 00 00\ne8 9b b7 ff ff\n48 89 43 58\n48 85 c0\n74 16\n48 89 c7\ne8 4a 19 00 00\n41 b6 01\n44 89 f0\n48 83 c4 08\n5b\n41 5e\nc3\n45 31 f6\neb f0\n'
p1118
S'.text:00000000004062c0\n.text:00000000004062c2\n.text:00000000004062c3\n.text:00000000004062c4\n.text:00000000004062c7\n.text:00000000004062cb\n.text:00000000004062cf\n.text:00000000004062d1\n.text:00000000004062d4\n.text:00000000004062d9\n.text:00000000004062db\n.text:00000000004062e0\n.text:00000000004062e5\n.text:00000000004062eb\n.text:00000000004062f0\n.text:00000000004062f4\n.text:00000000004062f7\n.text:00000000004062f9\n.text:00000000004062fb\n.text:0000000000406300\n.text:0000000000406305\n.text:0000000000406309\n.text:000000000040630c\n.text:000000000040630e\n.text:0000000000406311\n.text:0000000000406316\n.text:0000000000406319\n.text:000000000040631c\n.text:0000000000406320\n.text:0000000000406321\n.text:0000000000406323\n.text:0000000000406324\n.text:0000000000406327\n'
p1119
tp1120
sS'chopt_free'
p1121
(S'\n__stdcall chopt_free(Chown_option * chopt)\n'
p1122
V\u000avoid chopt_free(Chown_option *chopt)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1123
S'RET\n'
p1124
S'c3\n'
p1125
S'.text:0000000000402590\n'
p1126
tp1127
sS'get_quoting_style'
p1128
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p1129
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p1130
S'TEST RDI,RDI\nMOV EAX,0x60f360\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p1131
S'48 85 ff\nb8 60 f3 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p1132
S'.text:0000000000403560\n.text:0000000000403563\n.text:0000000000403568\n.text:000000000040356c\n.text:000000000040356e\n'
p1133
tp1134
sS'ferror_unlocked'
p1135
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p1136
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_0060f138)();\u000a  return iVar1;\u000a}\u000a\u000a
p1137
S'JMP qword ptr [0x0060f138]\n'
p1138
S'ff 25 32 d7 20 00\n'
p1139
S'.plt:0000000000401a00\n'
p1140
tp1141
sS'exit'
p1142
(S'\n__stdcall exit(int __status)\n'
p1143
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_0060f238)();\u000a  return;\u000a}\u000a\u000a
p1144
S'JMP qword ptr [0x0060f238]\n'
p1145
S'ff 25 32 d6 20 00\n'
p1146
S'.plt:0000000000401c00\n'
p1147
tp1148
sS'safe_hasher'
p1149
(S'\n__stdcall safe_hasher(Hash_table * table, void * key)\n'
p1150
V\u000ahash_entry * safe_hasher(Hash_table *table,void *key)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*table->hasher)(key,table->n_buckets);\u000a  if (sVar1 < table->n_buckets) {\u000a    return table->bucket + sVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1151
S'PUSH RBX\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nMOV RDI,RSI\nMOV RSI,RAX\nCALL qword ptr [RBX + 0x30]\nCMP RAX,qword ptr [RBX + 0x10]\nJNC 0x00408010\nSHL RAX,0x4\nADD RAX,qword ptr [RBX]\nPOP RBX\nRET\nCALL 0x004017f0\n'
p1152
S'53\n48 89 fb\n48 8b 43 10\n48 89 f7\n48 89 c6\nff 53 30\n48 3b 43 10\n73 09\n48 c1 e0 04\n48 03 03\n5b\nc3\ne8 db 97 ff ff\n'
p1153
S'.text:0000000000407ff0\n.text:0000000000407ff1\n.text:0000000000407ff4\n.text:0000000000407ff8\n.text:0000000000407ffb\n.text:0000000000407ffe\n.text:0000000000408001\n.text:0000000000408005\n.text:0000000000408007\n.text:000000000040800b\n.text:000000000040800e\n.text:000000000040800f\n.text:0000000000408010\n'
p1154
tp1155
sS'FUN_004017b0'
p1156
(S'\n__stdcall FUN_004017b0()\n'
p1157
V\u000avoid FUN_004017b0(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_0060f010)();\u000a  return;\u000a}\u000a\u000a
p1158
S'PUSH qword ptr [0x0060f008]\nJMP qword ptr [0x0060f010]\n'
p1159
S'ff 35 52 d8 20 00\nff 25 54 d8 20 00\n'
p1160
S'.plt:00000000004017b0\n.plt:00000000004017b6\n'
p1161
tp1162
sS'locale_charset'
p1163
(S'\n__stdcall locale_charset()\n'
p1164
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = \u000a         "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a         + 0x1d0;\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_00408ead:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_00408ead;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p1165
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401ac0\nTEST RAX,RAX\nMOV R14D,0x40a55d\nCMOVNZ R14,RAX\nCALL 0x00408ec0\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x00408e85\nJMP 0x00408ead\nMOV RDI,RBX\nCALL 0x004018f0\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x004018f0\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x00408ead\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401a20\nTEST EAX,EAX\nJZ 0x00408ea0\nCMP BPL,0x2a\nJNZ 0x00408e60\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x00408e60\nMOV RDI,RBX\nCALL 0x004018f0\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x40bf58\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1166
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 82 8c ff ff\n48 85 c0\n41 be 5d a5 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 88 8a ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 7a 8a ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 90 8b ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 48 8a ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 58 bf 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p1167
S'.text:0000000000408e30\n.text:0000000000408e31\n.text:0000000000408e33\n.text:0000000000408e34\n.text:0000000000408e39\n.text:0000000000408e3e\n.text:0000000000408e41\n.text:0000000000408e47\n.text:0000000000408e4b\n.text:0000000000408e50\n.text:0000000000408e53\n.text:0000000000408e56\n.text:0000000000408e59\n.text:0000000000408e5b\n.text:0000000000408e60\n.text:0000000000408e63\n.text:0000000000408e68\n.text:0000000000408e6c\n.text:0000000000408e71\n.text:0000000000408e76\n.text:0000000000408e7b\n.text:0000000000408e80\n.text:0000000000408e83\n.text:0000000000408e85\n.text:0000000000408e88\n.text:0000000000408e8b\n.text:0000000000408e90\n.text:0000000000408e92\n.text:0000000000408e94\n.text:0000000000408e98\n.text:0000000000408e9a\n.text:0000000000408e9e\n.text:0000000000408ea0\n.text:0000000000408ea3\n.text:0000000000408ea8\n.text:0000000000408ead\n.text:0000000000408eb1\n.text:0000000000408eb6\n.text:0000000000408eba\n.text:0000000000408ebb\n.text:0000000000408ebd\n.text:0000000000408ebe\n'
p1168
tp1169
sS'set_program_name'
p1170
(S'\n__stdcall set_program_name(char * argv0)\n'
p1171
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p1172
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004034f1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x00401970\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x004034db\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x40ae34\nMOV EDX,0x7\nCALL 0x00401810\nTEST EAX,EAX\nJNZ 0x004034db\nMOV ESI,0x40ae3c\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x00401810\nTEST EAX,EAX\nJNZ 0x004034d8\nADD R14,0x3\nMOV qword ptr [0x0060f2e0],R14\nMOV RBX,R14\nMOV qword ptr [0x0060f358],RBX\nMOV qword ptr [0x0060f300],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x0060f320]\nMOV EDI,0x40adfc\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401c10\nCALL 0x004017f0\n'
p1173
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 e7 e4 ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe 34 ae 40 00\nba 07 00 00 00\ne8 5d e3 ff ff\n85 c0\n75 24\nbe 3c ae 40 00\nba 03 00 00 00\n4c 89 f7\ne8 47 e3 ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 08 be 20 00\n4c 89 f3\n48 89 1d 76 be 20 00\n48 89 1d 17 be 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 28 be 20 00\nbf fc ad 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 04 e7 ff ff\ne8 df e2 ff ff\n'
p1174
S'.text:0000000000403470\n.text:0000000000403472\n.text:0000000000403473\n.text:0000000000403474\n.text:0000000000403477\n.text:000000000040347a\n.text:000000000040347c\n.text:0000000000403481\n.text:0000000000403484\n.text:0000000000403489\n.text:000000000040348c\n.text:0000000000403490\n.text:0000000000403494\n.text:0000000000403497\n.text:000000000040349a\n.text:000000000040349e\n.text:00000000004034a0\n.text:00000000004034a4\n.text:00000000004034a9\n.text:00000000004034ae\n.text:00000000004034b3\n.text:00000000004034b5\n.text:00000000004034b7\n.text:00000000004034bc\n.text:00000000004034c1\n.text:00000000004034c4\n.text:00000000004034c9\n.text:00000000004034cb\n.text:00000000004034cd\n.text:00000000004034d1\n.text:00000000004034d8\n.text:00000000004034db\n.text:00000000004034e2\n.text:00000000004034e9\n.text:00000000004034ed\n.text:00000000004034ee\n.text:00000000004034f0\n.text:00000000004034f1\n.text:00000000004034f8\n.text:00000000004034fd\n.text:0000000000403502\n.text:0000000000403507\n.text:000000000040350c\n'
p1175
tp1176
sS'quotearg_buffer'
p1177
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p1178
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p1179
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x60f360\nCMOVNZ RBP,R8\nCALL 0x00401800\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00403690\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1180
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 60 f3 60 00\n49 0f 45 e8\ne8 c8 e1 ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1181
S'.text:0000000000403610\n.text:0000000000403611\n.text:0000000000403613\n.text:0000000000403615\n.text:0000000000403617\n.text:0000000000403619\n.text:000000000040361a\n.text:000000000040361b\n.text:000000000040361e\n.text:0000000000403621\n.text:0000000000403624\n.text:0000000000403627\n.text:000000000040362a\n.text:000000000040362f\n.text:0000000000403633\n.text:0000000000403638\n.text:000000000040363b\n.text:000000000040363d\n.text:0000000000403641\n.text:0000000000403645\n.text:0000000000403649\n.text:000000000040364d\n.text:0000000000403650\n.text:0000000000403653\n.text:0000000000403656\n.text:0000000000403659\n.text:000000000040365c\n.text:000000000040365f\n.text:0000000000403663\n.text:0000000000403664\n.text:0000000000403669\n.text:000000000040366d\n.text:0000000000403671\n.text:0000000000403673\n.text:0000000000403677\n.text:0000000000403678\n.text:000000000040367a\n.text:000000000040367c\n.text:000000000040367e\n.text:0000000000403680\n.text:0000000000403681\n'
p1182
tp1183
sS'hash_delete'
p1184
(S'\n__stdcall hash_delete(Hash_table * table, void * entry)\n'
p1185
V\u000avoid * hash_delete(Hash_table *table,void *entry)\u000a\u000a{\u000a  ulong uVar1;\u000a  Hash_tuning *pHVar2;\u000a  hash_entry *phVar3;\u000a  hash_entry *__ptr;\u000a  _Bool _Var4;\u000a  void *pvVar5;\u000a  ulong uVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_20;\u000a  \u000a  pvVar5 = hash_find_entry(table,entry,&local_20);\u000a  if (pvVar5 == (void *)0x0) {\u000a    pvVar5 = (void *)0x0;\u000a  }\u000a  else {\u000a    table->n_entries = table->n_entries - 1;\u000a    if (local_20->data == (void *)0x0) {\u000a      uVar6 = table->n_buckets_used - 1;\u000a      table->n_buckets_used = uVar6;\u000a      if ((long)uVar6 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar6;\u000a      }\u000a      uVar6 = table->n_buckets;\u000a      if ((long)uVar6 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar6;\u000a      }\u000a      if (fVar7 < fVar8 * table->tuning->shrink_threshold) {\u000a        check_tuning(table);\u000a        uVar6 = table->n_buckets;\u000a        uVar1 = table->n_buckets_used;\u000a        if ((long)uVar1 < 0) {\u000a          fVar7 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a          fVar7 = fVar7 + fVar7;\u000a        }\u000a        else {\u000a          fVar7 = (float)uVar1;\u000a        }\u000a        pHVar2 = table->tuning;\u000a        if ((long)uVar6 < 0) {\u000a          fVar8 = (float)((ulong)((uint)uVar6 & 1) | uVar6 >> 1);\u000a          fVar8 = fVar8 + fVar8;\u000a        }\u000a        else {\u000a          fVar8 = (float)uVar6;\u000a        }\u000a        if (fVar7 < pHVar2->shrink_threshold * fVar8) {\u000a          fVar8 = fVar8 * pHVar2->shrink_factor;\u000a          if (pHVar2->is_n_buckets == false) {\u000a            fVar8 = fVar8 * pHVar2->growth_threshold;\u000a          }\u000a          candidate = (long)fVar8;\u000a          if (DAT_0040bda8 <= fVar8) {\u000a            candidate = (long)(fVar8 - DAT_0040bda8) ^ 0x8000000000000000;\u000a          }\u000a          _Var4 = hash_rehash(table,candidate);\u000a          if (_Var4 == false) {\u000a            __ptr = table->free_entry_list;\u000a            while (__ptr != (hash_entry *)0x0) {\u000a              phVar3 = __ptr->next;\u000a              free(__ptr);\u000a              __ptr = phVar3;\u000a            }\u000a            table->free_entry_list = (hash_entry *)0x0;\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  return pvVar5;\u000a}\u000a\u000a
p1186
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x10\nMOV R15,RDI\nLEA RDX,[RSP + 0x8]\nMOV ECX,0x1\nCALL 0x004089e0\nMOV R14,RAX\nTEST R14,R14\nJZ 0x00408b4a\nDEC qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x8]\nCMP qword ptr [RAX],0x0\nJNZ 0x00408c79\nMOV RAX,qword ptr [R15 + 0x18]\nDEC RAX\nMOV qword ptr [R15 + 0x18],RAX\nJS 0x00408b52\nCVTSI2SS XMM0,RAX\nJMP 0x00408b67\nXOR R14D,R14D\nJMP 0x00408c79\nMOV RCX,RAX\nSHR RCX,1\nAND EAX,0x1\nOR RAX,RCX\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x10]\nMOV RAX,qword ptr [R15 + 0x28]\nTEST RCX,RCX\nJS 0x00408b7b\nCVTSI2SS XMM1,RCX\nJMP 0x00408b90\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RAX]\nUCOMISS XMM1,XMM0\nJBE 0x00408c79\nMOV RDI,R15\nCALL 0x00408310\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00408bbc\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nJMP 0x00408bd4\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nXORPS XMM1,XMM1\nCVTSI2SS XMM1,RCX\nADDSS XMM1,XMM1\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x00408be7\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x00408bff\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVSS XMM2,dword ptr [RCX]\nMULSS XMM2,XMM0\nUCOMISS XMM2,XMM1\nJBE 0x00408c79\nMULSS XMM0,dword ptr [RCX + 0x4]\nCMP byte ptr [RCX + 0x10],0x0\nJNZ 0x00408c1c\nMULSS XMM0,dword ptr [RCX + 0x8]\nMOVSS XMM1,dword ptr [0x0040bda8]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x004085b0\nTEST AL,AL\nJNZ 0x00408c79\nMOV RDI,qword ptr [R15 + 0x48]\nTEST RDI,RDI\nJZ 0x00408c71\nNOP\nMOV RBX,qword ptr [RDI + 0x8]\nCALL 0x004017e0\nTEST RBX,RBX\nMOV RDI,RBX\nJNZ 0x00408c60\nMOV qword ptr [R15 + 0x48],0x0\nMOV RAX,R14\nADD RSP,0x10\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1187
S'41 57\n41 56\n53\n48 83 ec 10\n49 89 ff\n48 8d 54 24 08\nb9 01 00 00 00\ne8 c5 fe ff ff\n49 89 c6\n4d 85 f6\n74 27\n49 ff 4f 20\n48 8b 44 24 08\n48 83 38 00\n0f 85 43 01 00 00\n49 8b 47 18\n48 ff c8\n49 89 47 18\n78 0f\nf3 48 0f 2a c0\neb 1d\n45 31 f6\ne9 27 01 00 00\n48 89 c1\n48 d1 e9\n83 e0 01\n48 09 c8\nf3 48 0f 2a c0\nf3 0f 58 c0\n49 8b 4f 10\n49 8b 47 28\n48 85 c9\n78 07\nf3 48 0f 2a c9\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c9\nf3 0f 58 c9\nf3 0f 59 08\n0f 2e c8\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b f7 ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 0a\n0f 57 c9\nf3 48 0f 2a c9\neb 18\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\n0f 57 c9\nf3 48 0f 2a c9\nf3 0f 58 c9\n49 8b 4f 28\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\nf3 0f 10 11\nf3 0f 59 d0\n0f 2e d1\n76 6d\nf3 0f 59 41 04\n80 79 10 00\n75 05\nf3 0f 59 41 08\nf3 0f 10 0d 84 31 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 5f f9 ff ff\n84 c0\n75 24\n49 8b 7f 48\n48 85 ff\n74 13\n66 90\n48 8b 5f 08\ne8 77 8b ff ff\n48 85 db\n48 89 df\n75 ef\n49 c7 47 48 00 00 00 00\n4c 89 f0\n48 83 c4 10\n5b\n41 5e\n41 5f\nc3\n'
p1188
S'.text:0000000000408b00\n.text:0000000000408b02\n.text:0000000000408b04\n.text:0000000000408b05\n.text:0000000000408b09\n.text:0000000000408b0c\n.text:0000000000408b11\n.text:0000000000408b16\n.text:0000000000408b1b\n.text:0000000000408b1e\n.text:0000000000408b21\n.text:0000000000408b23\n.text:0000000000408b27\n.text:0000000000408b2c\n.text:0000000000408b30\n.text:0000000000408b36\n.text:0000000000408b3a\n.text:0000000000408b3d\n.text:0000000000408b41\n.text:0000000000408b43\n.text:0000000000408b48\n.text:0000000000408b4a\n.text:0000000000408b4d\n.text:0000000000408b52\n.text:0000000000408b55\n.text:0000000000408b58\n.text:0000000000408b5b\n.text:0000000000408b5e\n.text:0000000000408b63\n.text:0000000000408b67\n.text:0000000000408b6b\n.text:0000000000408b6f\n.text:0000000000408b72\n.text:0000000000408b74\n.text:0000000000408b79\n.text:0000000000408b7b\n.text:0000000000408b7e\n.text:0000000000408b81\n.text:0000000000408b84\n.text:0000000000408b87\n.text:0000000000408b8c\n.text:0000000000408b90\n.text:0000000000408b94\n.text:0000000000408b97\n.text:0000000000408b9d\n.text:0000000000408ba0\n.text:0000000000408ba5\n.text:0000000000408ba9\n.text:0000000000408bad\n.text:0000000000408bb0\n.text:0000000000408bb2\n.text:0000000000408bb5\n.text:0000000000408bba\n.text:0000000000408bbc\n.text:0000000000408bbf\n.text:0000000000408bc2\n.text:0000000000408bc5\n.text:0000000000408bc8\n.text:0000000000408bcb\n.text:0000000000408bd0\n.text:0000000000408bd4\n.text:0000000000408bd8\n.text:0000000000408bdb\n.text:0000000000408bdd\n.text:0000000000408be0\n.text:0000000000408be5\n.text:0000000000408be7\n.text:0000000000408bea\n.text:0000000000408bed\n.text:0000000000408bf0\n.text:0000000000408bf3\n.text:0000000000408bf6\n.text:0000000000408bfb\n.text:0000000000408bff\n.text:0000000000408c03\n.text:0000000000408c07\n.text:0000000000408c0a\n.text:0000000000408c0c\n.text:0000000000408c11\n.text:0000000000408c15\n.text:0000000000408c17\n.text:0000000000408c1c\n.text:0000000000408c24\n.text:0000000000408c27\n.text:0000000000408c2b\n.text:0000000000408c30\n.text:0000000000408c3a\n.text:0000000000408c3d\n.text:0000000000408c42\n.text:0000000000408c45\n.text:0000000000408c49\n.text:0000000000408c4c\n.text:0000000000408c51\n.text:0000000000408c53\n.text:0000000000408c55\n.text:0000000000408c59\n.text:0000000000408c5c\n.text:0000000000408c5e\n.text:0000000000408c60\n.text:0000000000408c64\n.text:0000000000408c69\n.text:0000000000408c6c\n.text:0000000000408c6f\n.text:0000000000408c71\n.text:0000000000408c79\n.text:0000000000408c7c\n.text:0000000000408c80\n.text:0000000000408c81\n.text:0000000000408c83\n.text:0000000000408c85\n'
p1189
tp1190
sS'quotearg_colon'
p1191
(S'\n__stdcall quotearg_colon(char * arg)\n'
p1192
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1193
S'MOV ESI,0x3a\nJMP 0x004047f0\n'
p1194
S'be 3a 00 00 00\neb e9\n'
p1195
S'.text:0000000000404800\n.text:0000000000404805\n'
p1196
tp1197
sS'rpl_fflush'
p1198
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p1199
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_0060f190)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p1200
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004094dd\nMOV RDI,RBX\nCALL 0x00401b00\nTEST EAX,EAX\nJZ 0x004094dd\nMOV RDI,RBX\nCALL 0x004094f0\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401ab0\n'
p1201
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 2f 86 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 ca 85 ff ff\n'
p1202
S'.text:00000000004094c0\n.text:00000000004094c1\n.text:00000000004094c4\n.text:00000000004094c7\n.text:00000000004094c9\n.text:00000000004094cc\n.text:00000000004094d1\n.text:00000000004094d3\n.text:00000000004094d5\n.text:00000000004094d8\n.text:00000000004094dd\n.text:00000000004094e0\n.text:00000000004094e1\n'
p1203
tp1204
sS'__assert_fail'
p1205
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p1206
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_0060f100)();\u000a  return;\u000a}\u000a\u000a
p1207
S'JMP qword ptr [0x0060f100]\n'
p1208
S'ff 25 6a d7 20 00\n'
p1209
S'.plt:0000000000401990\n'
p1210
tp1211
sS'bindtextdomain'
p1212
(S'\n__stdcall bindtextdomain()\n'
p1213
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_0060f090)();\u000a  return;\u000a}\u000a\u000a
p1214
S'JMP qword ptr [0x0060f090]\n'
p1215
S'ff 25 da d7 20 00\n'
p1216
S'.plt:00000000004018b0\n'
p1217
tp1218
sS'set_char_quoting'
p1219
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p1220
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p1221
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x60f360\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p1222
S'89 f1\n48 85 ff\nbe 60 f3 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p1223
S'.text:0000000000403580\n.text:0000000000403582\n.text:0000000000403585\n.text:000000000040358a\n.text:000000000040358e\n.text:0000000000403590\n.text:0000000000403593\n.text:0000000000403597\n.text:000000000040359c\n.text:000000000040359f\n.text:00000000004035a1\n.text:00000000004035a3\n.text:00000000004035a6\n.text:00000000004035a8\n.text:00000000004035ab\n.text:00000000004035ad\n.text:00000000004035b0\n.text:00000000004035b5\n'
p1224
tp1225
sS'quotearg_n'
p1226
(S'\n__stdcall quotearg_n(char * arg)\n'
p1227
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1228
S'MOV RDX,-0x1\nMOV ECX,0x60f360\nJMP 0x00404470\n'
p1229
S'48 c7 c2 ff ff ff ff\nb9 60 f3 60 00\neb 02\n'
p1230
S'.text:0000000000404460\n.text:0000000000404467\n.text:000000000040446c\n'
p1231
tp1232
sS'close_stream'
p1233
(S'\n__stdcall close_stream(FILE * stream)\n'
p1234
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1235
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x00401840\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401a00\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x00409280\nTEST EBP,EBP\nJZ 0x00407c2b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x00407c4f\nCALL 0x00401800\nMOV dword ptr [RAX],0x0\nJMP 0x00407c4f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x00407c4f\nTEST CL,CL\nJNZ 0x00407c4f\nCALL 0x00401800\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1236
S'55\n41 56\n53\n48 89 fb\ne8 44 9c ff ff\n49 89 c6\n48 89 df\ne8 f9 9d ff ff\n89 c5\n48 89 df\ne8 6f 16 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 dd 9b ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 be 9b ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p1237
S'.text:0000000000407bf0\n.text:0000000000407bf1\n.text:0000000000407bf3\n.text:0000000000407bf4\n.text:0000000000407bf7\n.text:0000000000407bfc\n.text:0000000000407bff\n.text:0000000000407c02\n.text:0000000000407c07\n.text:0000000000407c09\n.text:0000000000407c0c\n.text:0000000000407c11\n.text:0000000000407c13\n.text:0000000000407c15\n.text:0000000000407c1a\n.text:0000000000407c1c\n.text:0000000000407c1e\n.text:0000000000407c23\n.text:0000000000407c29\n.text:0000000000407c2b\n.text:0000000000407c2d\n.text:0000000000407c30\n.text:0000000000407c32\n.text:0000000000407c34\n.text:0000000000407c37\n.text:0000000000407c39\n.text:0000000000407c3b\n.text:0000000000407c3d\n.text:0000000000407c42\n.text:0000000000407c44\n.text:0000000000407c47\n.text:0000000000407c4c\n.text:0000000000407c4f\n.text:0000000000407c51\n.text:0000000000407c52\n.text:0000000000407c54\n.text:0000000000407c55\n'
p1238
tp1239
sS'quotearg_colon_mem'
p1240
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p1241
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1242
S'MOV EDX,0x3a\nJMP 0x00404780\n'
p1243
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p1244
S'.text:0000000000404810\n.text:0000000000404815\n'
p1245
tp1246
sS'xcalloc'
p1247
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p1248
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1249
S'PUSH RAX\nCALL 0x00405b40\nTEST RAX,RAX\nJZ 0x0040576d\nPOP RCX\nRET\nCALL 0x004057d0\n'
p1250
S'50\ne8 da 03 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p1251
S'.text:0000000000405760\n.text:0000000000405761\n.text:0000000000405766\n.text:0000000000405769\n.text:000000000040576b\n.text:000000000040576c\n.text:000000000040576d\n'
p1252
tp1253
sS'readdir'
p1254
(S'\n__stdcall readdir(DIR * __dirp)\n'
p1255
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000adirent * readdir(DIR *__dirp)\u000a\u000a{\u000a  dirent *pdVar1;\u000a  \u000a  pdVar1 = (dirent *)(*(code *)PTR_readdir_0060f180)();\u000a  return pdVar1;\u000a}\u000a\u000a
p1256
S'JMP qword ptr [0x0060f180]\n'
p1257
S'ff 25 ea d6 20 00\n'
p1258
S'.plt:0000000000401a90\n'
p1259
tp1260
sS'fts_open'
p1261
(S'\n__stdcall fts_open(char * * argv, anon_subr_int_FTSENT_ptr_ptr_FTSENT_ptr_ptr * compar)\n'
p1262
V\u000aFTS * fts_open(char **argv,int (*compar)(FTSENT **,FTSENT **))\u000a\u000a{\u000a  uint uVar1;\u000a  _ftsent *p_Var2;\u000a  _Bool _Var3;\u000a  unsigned_short uVar4;\u000a  uint uVar5;\u000a  int iVar6;\u000a  FTS *sp;\u000a  size_t sVar7;\u000a  FTSENT *__ptr;\u000a  int *piVar8;\u000a  size_t more;\u000a  FTSENT *p;\u000a  int (*in_RDX)(_ftsent **,_ftsent **);\u000a  ulong nitems;\u000a  char *__s;\u000a  byte local_59;\u000a  FTSENT *local_58;\u000a  FTSENT *local_48;\u000a  \u000a  uVar1 = (uint)compar;\u000a  if (((0x1fff < uVar1) || ((uVar1 & 0x204) == 0x204)) || (((ulong)compar & 0x12) == 0)) {\u000a    piVar8 = __errno_location();\u000a    *piVar8 = 0x16;\u000a    return (FTS *)0x0;\u000a  }\u000a  sp = (FTS *)malloc(0x80);\u000a  if (sp == (FTS *)0x0) {\u000a    return (FTS *)0x0;\u000a  }\u000a  (sp->fts_fd_ring).ir_default_val = 0;\u000a  (sp->fts_fd_ring).ir_front = 0;\u000a  (sp->fts_fd_ring).ir_back = 0;\u000a  *(undefined4 *)&(sp->fts_fd_ring).ir_empty = 0;\u000a  (sp->fts_fd_ring).ir_data[0] = 0;\u000a  (sp->fts_fd_ring).ir_data[1] = 0;\u000a  (sp->fts_fd_ring).ir_data[2] = 0;\u000a  (sp->fts_fd_ring).ir_data[3] = 0;\u000a  *(undefined4 *)&sp->fts_leaf_optimization_works_ht = 0;\u000a  *(undefined4 *)((long)&sp->fts_leaf_optimization_works_ht + 4) = 0;\u000a  *(undefined4 *)&sp->fts_cycle = 0;\u000a  *(undefined4 *)((long)&sp->fts_cycle + 4) = 0;\u000a  *(undefined4 *)&sp->fts_compar = 0;\u000a  *(undefined4 *)((long)&sp->fts_compar + 4) = 0;\u000a  sp->fts_options = 0;\u000a  *(undefined4 *)&sp->field_0x4c = 0;\u000a  *(undefined4 *)&sp->fts_pathlen = 0;\u000a  *(undefined4 *)((long)&sp->fts_pathlen + 4) = 0;\u000a  *(undefined4 *)&sp->fts_nitems = 0;\u000a  *(undefined4 *)((long)&sp->fts_nitems + 4) = 0;\u000a  *(undefined4 *)&sp->fts_path = 0;\u000a  *(undefined4 *)((long)&sp->fts_path + 4) = 0;\u000a  sp->fts_rfd = 0;\u000a  sp->fts_cwd_fd = 0;\u000a  *(undefined4 *)&sp->fts_array = 0;\u000a  *(undefined4 *)((long)&sp->fts_array + 4) = 0;\u000a  *(undefined4 *)&sp->fts_dev = 0;\u000a  *(undefined4 *)((long)&sp->fts_dev + 4) = 0;\u000a  *(undefined4 *)&sp->fts_cur = 0;\u000a  *(undefined4 *)((long)&sp->fts_cur + 4) = 0;\u000a  *(undefined4 *)&sp->fts_child = 0;\u000a  *(undefined4 *)((long)&sp->fts_child + 4) = 0;\u000a  sp->fts_compar = in_RDX;\u000a  uVar5 = uVar1 & 0xfffffdfb | 4;\u000a  if (((ulong)compar & 2) == 0) {\u000a    uVar5 = uVar1;\u000a  }\u000a  sp->fts_options = uVar5;\u000a  sp->fts_cwd_fd = -100;\u000a  sVar7 = fts_maxarglen(argv);\u000a  more = 0x1000;\u000a  if (0x1000 < sVar7) {\u000a    more = sVar7;\u000a  }\u000a  _Var3 = fts_palloc(sp,more);\u000a  if (_Var3 == false) goto LAB_00405ee4;\u000a  if (*argv == (char *)0x0) {\u000a    __ptr = (FTSENT *)0x0;\u000aLAB_00405cab:\u000a    if (in_RDX == (int (*)(_ftsent **,_ftsent **))0x0) {\u000a      local_59 = 1;\u000a    }\u000a    else {\u000a      local_59 = (byte)(((ulong)*(byte *)((long)&sp->fts_options + 1) & 0xffffffffffffff04) >> 2);\u000a    }\u000a    __s = *argv;\u000a    if (__s == (char *)0x0) {\u000a      local_58 = (FTSENT *)0x0;\u000a    }\u000a    else {\u000a      local_58 = (FTSENT *)0x0;\u000a      local_48 = (FTSENT *)0x0;\u000a      nitems = 0;\u000a      do {\u000a        more = strlen(__s);\u000a        if (((((ulong)compar & 0x1000) == 0) && (2 < more)) && (__s[more - 1] == '/')) {\u000a          do {\u000a            if (__s[more - 2] != '/') break;\u000a            more = more - 1;\u000a          } while (1 < more);\u000a        }\u000a        p = fts_alloc(sp,*argv,more);\u000a        if (p == (FTSENT *)0x0) goto LAB_00405ecb;\u000a        p->fts_level = 0;\u000a        *(FTSENT **)&p->fts_parent = __ptr;\u000a        *(FTSENT **)&p->fts_accpath = p + 1;\u000a        if ((local_58 != (FTSENT *)0x0 & local_59) == 1) {\u000a          p->fts_info = 0xb;\u000a          fts_set_stat_required(p);\u000a          if (in_RDX != (int (*)(_ftsent **,_ftsent **))0x0) goto LAB_00405d67;\u000aLAB_00405d72:\u000a          p->fts_link = (_ftsent *)0x0;\u000a          p_Var2 = (_ftsent *)p;\u000a          if (local_58 != (FTSENT *)0x0) {\u000a            *(FTSENT **)&local_48->fts_link = p;\u000a            p_Var2 = (_ftsent *)local_58;\u000a          }\u000a        }\u000a        else {\u000a          uVar4 = fts_stat(sp,p);\u000a          p->fts_info = uVar4;\u000a          if (in_RDX == (int (*)(_ftsent **,_ftsent **))0x0) goto LAB_00405d72;\u000aLAB_00405d67:\u000a          *(FTSENT **)&p->fts_link = local_58;\u000a          p_Var2 = (_ftsent *)p;\u000a          p = local_48;\u000a        }\u000a        local_48 = p;\u000a        local_58 = (FTSENT *)p_Var2;\u000a        nitems = nitems + 1;\u000a        __s = argv[1];\u000a        argv = argv + 1;\u000a      } while (__s != (char *)0x0);\u000a      if ((in_RDX != (int (*)(_ftsent **,_ftsent **))0x0) && (1 < nitems)) {\u000a        local_58 = fts_sort(sp,local_58,nitems);\u000a      }\u000a    }\u000a    p = fts_alloc(sp,\u000a                     "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a                     + 0x1d0,0);\u000a    *(FTSENT **)&sp->fts_cur = p;\u000a    if (p != (FTSENT *)0x0) {\u000a      *(FTSENT **)&p->fts_link = local_58;\u000a      sp->fts_cur->fts_info = 9;\u000a      _Var3 = setup_dir(sp);\u000a      if (_Var3 != false) {\u000a        if ((*(ushort *)&sp->fts_options & 0x204) == 0) {\u000a          iVar6 = diropen(sp,".");\u000a          sp->fts_rfd = iVar6;\u000a          if (iVar6 < 0) {\u000a            *(byte *)&sp->fts_options = *(byte *)&sp->fts_options | 4;\u000a          }\u000a        }\u000a        i_ring_init(&sp->fts_fd_ring);\u000a        return sp;\u000a      }\u000a    }\u000aLAB_00405ecb:\u000a    fts_lfree(local_58);\u000a    free(__ptr);\u000a  }\u000a  else {\u000a    __ptr = fts_alloc(sp,\u000a                         "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a                         + 0x1d0,0);\u000a    if (__ptr != (FTSENT *)0x0) {\u000a      __ptr->fts_level = -1;\u000a      goto LAB_00405cab;\u000a    }\u000a  }\u000a  free(sp->fts_path);\u000aLAB_00405ee4:\u000a  free(sp);\u000a  return (FTS *)0x0;\u000a}\u000a\u000a
p1263
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RDX\nMOV R14D,ESI\nMOV R15,RDI\nCMP R14D,0x2000\nJNC 0x00405c88\nMOV EAX,R14D\nAND EAX,0x204\nCMP EAX,0x204\nJZ 0x00405c88\nTEST R14B,0x12\nJZ 0x00405c88\nMOV EDI,0x80\nCALL 0x00401aa0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00405c93\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [R13 + 0x70],XMM0\nMOVUPS xmmword ptr [R13 + 0x60],XMM0\nMOVUPS xmmword ptr [R13 + 0x50],XMM0\nMOVUPS xmmword ptr [R13 + 0x40],XMM0\nMOVUPS xmmword ptr [R13 + 0x30],XMM0\nMOVUPS xmmword ptr [R13 + 0x20],XMM0\nMOVUPS xmmword ptr [R13 + 0x10],XMM0\nMOVUPS xmmword ptr [R13],XMM0\nMOV qword ptr [R13 + 0x40],RBP\nMOV EAX,R14D\nAND EAX,0xfffffdfb\nOR EAX,0x4\nTEST R14B,0x2\nCMOVZ EAX,R14D\nMOV dword ptr [R13 + 0x48],EAX\nMOV dword ptr [R13 + 0x2c],0xffffff9c\nMOV RDI,R15\nCALL 0x00405f00\nCMP RAX,0x1000\nMOV ESI,0x1000\nCMOVA RSI,RAX\nMOV RDI,R13\nCALL 0x00405f50\nTEST AL,AL\nJZ 0x00405ee4\nCMP qword ptr [R15],0x0\nJZ 0x00405ca8\nMOV ESI,0x40a55d\nXOR EDX,EDX\nMOV RDI,R13\nCALL 0x00405fb0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x00405edb\nMOV qword ptr [R12 + 0x58],-0x1\nJMP 0x00405cab\nCALL 0x00401800\nMOV dword ptr [RAX],0x16\nXOR R13D,R13D\nMOV RAX,R13\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nXOR R12D,R12D\nTEST RBP,RBP\nMOV qword ptr [RSP + 0x28],R13\nJZ 0x00405cc4\nMOV AL,byte ptr [R13 + 0x49]\nAND AL,0x4\nSHR AL,0x2\nMOV byte ptr [RSP + 0xf],AL\nJMP 0x00405cc9\nMOV byte ptr [RSP + 0xf],0x1\nMOV R13,qword ptr [R15]\nTEST R13,R13\nJZ 0x00405e1e\nMOV qword ptr [RSP + 0x18],R12\nMOV qword ptr [RSP + 0x30],RBP\nAND R14D,0x1000\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x10],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nXOR R12D,R12D\nJMP 0x00405db0\nMOV qword ptr [RBP + 0x58],0x0\nMOV RAX,qword ptr [RSP + 0x18]\nMOV qword ptr [RBP + 0x8],RAX\nMOV RAX,RBP\nADD RAX,0x108\nMOV qword ptr [RBP + 0x30],RAX\nMOV RBX,qword ptr [RSP + 0x10]\nTEST RBX,RBX\nSETNZ AL\nAND AL,byte ptr [RSP + 0xf]\nCMP AL,0x1\nJNZ 0x00405d4e\nMOV word ptr [RBP + 0x70],0xb\nMOV ESI,0x1\nMOV RDI,RBP\nCALL 0x00406040\nCMP qword ptr [RSP + 0x30],0x0\nJNZ 0x00405d67\nJMP 0x00405d72\nXOR EDX,EDX\nMOV RDI,R13\nMOV RSI,RBP\nCALL 0x00406060\nMOV word ptr [RBP + 0x70],AX\nCMP qword ptr [RSP + 0x30],0x0\nJZ 0x00405d72\nMOV qword ptr [RBP + 0x10],RBX\nMOV qword ptr [RSP + 0x10],RBP\nJMP 0x00405d8d\nMOV qword ptr [RBP + 0x10],0x0\nTEST RBX,RBX\nJZ 0x00405da2\nMOV RAX,qword ptr [RSP + 0x20]\nMOV qword ptr [RAX + 0x10],RBP\nMOV qword ptr [RSP + 0x20],RBP\nINC R12\nMOV R13,qword ptr [R15 + 0x8]\nADD R15,0x8\nTEST R13,R13\nJNZ 0x00405db0\nJMP 0x00405e27\nMOV RAX,RBP\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x00405d6b\nMOV RDI,R13\nCALL 0x004018f0\nTEST R14D,R14D\nJNZ 0x00405df0\nCMP RAX,0x3\nJC 0x00405df0\nCMP byte ptr [R13 + RAX*0x1 + -0x1],0x2f\nJNZ 0x00405df0\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [R13 + RAX*0x1 + -0x2],0x2f\nJNZ 0x00405df0\nDEC RAX\nCMP RAX,0x1\nJA 0x00405dd0\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [R15]\nMOV R13,qword ptr [RSP + 0x28]\nMOV RDI,R13\nMOV RDX,RAX\nCALL 0x00405fb0\nMOV RBP,RAX\nTEST RBP,RBP\nJNZ 0x00405d00\nMOV R12,qword ptr [RSP + 0x18]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x00405ecb\nXOR EBX,EBX\nMOV R13,qword ptr [RSP + 0x28]\nJMP 0x00405e5e\nCMP qword ptr [RSP + 0x30],0x0\nMOV R13,qword ptr [RSP + 0x28]\nJZ 0x00405e54\nCMP R12,0x2\nJC 0x00405e54\nMOV RDI,R13\nMOV RSI,qword ptr [RSP + 0x10]\nMOV RDX,R12\nCALL 0x004061d0\nMOV RBX,RAX\nMOV R12,qword ptr [RSP + 0x18]\nJMP 0x00405e5e\nMOV R12,qword ptr [RSP + 0x18]\nMOV RBX,qword ptr [RSP + 0x10]\nMOV ESI,0x40a55d\nXOR EDX,EDX\nMOV RDI,R13\nCALL 0x00405fb0\nMOV qword ptr [R13],RAX\nTEST RAX,RAX\nJZ 0x00405ecb\nMOV qword ptr [RAX + 0x10],RBX\nMOV RAX,qword ptr [R13]\nMOV word ptr [RAX + 0x70],0x9\nMOV RDI,R13\nCALL 0x004062c0\nTEST AL,AL\nJZ 0x00405ecb\nMOVZX EAX,word ptr [R13 + 0x48]\nTEST AX,0x204\nJNZ 0x00405eb5\nMOV ESI,0x40b9c8\nMOV RDI,R13\nCALL 0x00406330\nMOV dword ptr [R13 + 0x28],EAX\nTEST EAX,EAX\nJNS 0x00405eb5\nOR byte ptr [R13 + 0x48],0x4\nMOV RDI,R13\nADD RDI,0x60\nMOV ESI,0xffffffff\nCALL 0x00408d80\nJMP 0x00405c96\nMOV RDI,RBX\nCALL 0x00406390\nMOV RDI,R12\nCALL 0x004017e0\nMOV RDI,qword ptr [R13 + 0x20]\nCALL 0x004017e0\nMOV RDI,R13\nCALL 0x004017e0\nJMP 0x00405c93\n'
p1264
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 d5\n41 89 f6\n49 89 ff\n41 81 fe 00 20 00 00\n0f 83 d4 00 00 00\n44 89 f0\n25 04 02 00 00\n3d 04 02 00 00\n0f 84 c1 00 00 00\n41 f6 c6 12\n0f 84 b7 00 00 00\nbf 80 00 00 00\ne8 c5 be ff ff\n49 89 c5\n4d 85 ed\n0f 84 ac 00 00 00\n0f 57 c0\n41 0f 11 45 70\n41 0f 11 45 60\n41 0f 11 45 50\n41 0f 11 45 40\n41 0f 11 45 30\n41 0f 11 45 20\n41 0f 11 45 10\n41 0f 11 45 00\n49 89 6d 40\n44 89 f0\n25 fb fd ff ff\n83 c8 04\n41 f6 c6 02\n41 0f 44 c6\n41 89 45 48\n41 c7 45 2c 9c ff ff ff\n4c 89 ff\ne8 c3 02 00 00\n48 3d 00 10 00 00\nbe 00 10 00 00\n48 0f 47 f0\n4c 89 ef\ne8 fc 02 00 00\n84 c0\n0f 84 88 02 00 00\n49 83 3f 00\n74 46\nbe 5d a5 40 00\n31 d2\n4c 89 ef\ne8 3f 03 00 00\n49 89 c4\n4d 85 e4\n0f 84 5e 02 00 00\n49 c7 44 24 58 ff ff ff ff\neb 23\ne8 73 bb ff ff\nc7 00 16 00 00 00\n45 31 ed\n4c 89 e8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 31 e4\n48 85 ed\n4c 89 6c 24 28\n74 0f\n41 8a 45 49\n24 04\nc0 e8 02\n88 44 24 0f\neb 05\nc6 44 24 0f 01\n4d 8b 2f\n4d 85 ed\n0f 84 49 01 00 00\n4c 89 64 24 18\n48 89 6c 24 30\n41 81 e6 00 10 00 00\n31 c0\n48 89 44 24 10\n31 c0\n48 89 44 24 20\n45 31 e4\ne9 b4 00 00 00\n48 c7 45 58 00 00 00 00\n48 8b 44 24 18\n48 89 45 08\n48 89 e8\n48 05 08 01 00 00\n48 89 45 30\n48 8b 5c 24 10\n48 85 db\n0f 95 c0\n22 44 24 0f\n3c 01\n75 1d\n66 c7 45 70 0b 00\nbe 01 00 00 00\n48 89 ef\ne8 fc 02 00 00\n48 83 7c 24 30 00\n75 1b\neb 24\n31 d2\n4c 89 ef\n48 89 ee\ne8 05 03 00 00\n66 89 45 70\n48 83 7c 24 30 00\n74 0b\n48 89 5d 10\n48 89 6c 24 10\neb 1b\n48 c7 45 10 00 00 00 00\n48 85 db\n74 23\n48 8b 44 24 20\n48 89 68 10\n48 89 6c 24 20\n49 ff c4\n4d 8b 6f 08\n49 83 c7 08\n4d 85 ed\n75 13\ne9 85 00 00 00\n48 89 e8\n48 89 44 24 20\neb bf\n4c 89 ef\ne8 38 bb ff ff\n45 85 f6\n75 33\n48 83 f8 03\n72 2d\n41 80 7c 05 ff 2f\n75 25\n0f 1f 44 00 00\n41 80 7c 05 fe 2f\n75 18\n48 ff c8\n48 83 f8 01\n77 ef\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n49 8b 37\n4c 8b 6c 24 28\n4c 89 ef\n48 89 c2\ne8 ad 01 00 00\n48 89 c5\n48 85 ed\n0f 85 f1 fe ff ff\n4c 8b 64 24 18\n48 8b 5c 24 10\ne9 ad 00 00 00\n31 db\n4c 8b 6c 24 28\neb 37\n48 83 7c 24 30 00\n4c 8b 6c 24 28\n74 20\n49 83 fc 02\n72 1a\n4c 89 ef\n48 8b 74 24 10\n4c 89 e2\ne8 86 03 00 00\n48 89 c3\n4c 8b 64 24 18\neb 0a\n4c 8b 64 24 18\n48 8b 5c 24 10\nbe 5d a5 40 00\n31 d2\n4c 89 ef\ne8 43 01 00 00\n49 89 45 00\n48 85 c0\n74 55\n48 89 58 10\n49 8b 45 00\n66 c7 40 70 09 00\n4c 89 ef\ne8 34 04 00 00\n84 c0\n74 3b\n41 0f b7 45 48\n66 a9 04 02\n75 1a\nbe c8 b9 40 00\n4c 89 ef\ne8 88 04 00 00\n41 89 45 28\n85 c0\n79 05\n41 80 4d 48 04\n4c 89 ef\n48 83 c7 60\nbe ff ff ff ff\ne8 ba 2e 00 00\ne9 cb fd ff ff\n48 89 df\ne8 bd 04 00 00\n4c 89 e7\ne8 05 b9 ff ff\n49 8b 7d 20\ne8 fc b8 ff ff\n4c 89 ef\ne8 f4 b8 ff ff\ne9 a2 fd ff ff\n'
p1265
S'.text:0000000000405b90\n.text:0000000000405b91\n.text:0000000000405b93\n.text:0000000000405b95\n.text:0000000000405b97\n.text:0000000000405b99\n.text:0000000000405b9a\n.text:0000000000405b9e\n.text:0000000000405ba1\n.text:0000000000405ba4\n.text:0000000000405ba7\n.text:0000000000405bae\n.text:0000000000405bb4\n.text:0000000000405bb7\n.text:0000000000405bbc\n.text:0000000000405bc1\n.text:0000000000405bc7\n.text:0000000000405bcb\n.text:0000000000405bd1\n.text:0000000000405bd6\n.text:0000000000405bdb\n.text:0000000000405bde\n.text:0000000000405be1\n.text:0000000000405be7\n.text:0000000000405bea\n.text:0000000000405bef\n.text:0000000000405bf4\n.text:0000000000405bf9\n.text:0000000000405bfe\n.text:0000000000405c03\n.text:0000000000405c08\n.text:0000000000405c0d\n.text:0000000000405c12\n.text:0000000000405c16\n.text:0000000000405c19\n.text:0000000000405c1e\n.text:0000000000405c21\n.text:0000000000405c25\n.text:0000000000405c29\n.text:0000000000405c2d\n.text:0000000000405c35\n.text:0000000000405c38\n.text:0000000000405c3d\n.text:0000000000405c43\n.text:0000000000405c48\n.text:0000000000405c4c\n.text:0000000000405c4f\n.text:0000000000405c54\n.text:0000000000405c56\n.text:0000000000405c5c\n.text:0000000000405c60\n.text:0000000000405c62\n.text:0000000000405c67\n.text:0000000000405c69\n.text:0000000000405c6c\n.text:0000000000405c71\n.text:0000000000405c74\n.text:0000000000405c77\n.text:0000000000405c7d\n.text:0000000000405c86\n.text:0000000000405c88\n.text:0000000000405c8d\n.text:0000000000405c93\n.text:0000000000405c96\n.text:0000000000405c99\n.text:0000000000405c9d\n.text:0000000000405c9e\n.text:0000000000405ca0\n.text:0000000000405ca2\n.text:0000000000405ca4\n.text:0000000000405ca6\n.text:0000000000405ca7\n.text:0000000000405ca8\n.text:0000000000405cab\n.text:0000000000405cae\n.text:0000000000405cb3\n.text:0000000000405cb5\n.text:0000000000405cb9\n.text:0000000000405cbb\n.text:0000000000405cbe\n.text:0000000000405cc2\n.text:0000000000405cc4\n.text:0000000000405cc9\n.text:0000000000405ccc\n.text:0000000000405ccf\n.text:0000000000405cd5\n.text:0000000000405cda\n.text:0000000000405cdf\n.text:0000000000405ce6\n.text:0000000000405ce8\n.text:0000000000405ced\n.text:0000000000405cef\n.text:0000000000405cf4\n.text:0000000000405cf7\n.text:0000000000405d00\n.text:0000000000405d08\n.text:0000000000405d0d\n.text:0000000000405d11\n.text:0000000000405d14\n.text:0000000000405d1a\n.text:0000000000405d1e\n.text:0000000000405d23\n.text:0000000000405d26\n.text:0000000000405d29\n.text:0000000000405d2d\n.text:0000000000405d2f\n.text:0000000000405d31\n.text:0000000000405d37\n.text:0000000000405d3c\n.text:0000000000405d3f\n.text:0000000000405d44\n.text:0000000000405d4a\n.text:0000000000405d4c\n.text:0000000000405d4e\n.text:0000000000405d50\n.text:0000000000405d53\n.text:0000000000405d56\n.text:0000000000405d5b\n.text:0000000000405d5f\n.text:0000000000405d65\n.text:0000000000405d67\n.text:0000000000405d6b\n.text:0000000000405d70\n.text:0000000000405d72\n.text:0000000000405d7a\n.text:0000000000405d7d\n.text:0000000000405d7f\n.text:0000000000405d84\n.text:0000000000405d88\n.text:0000000000405d8d\n.text:0000000000405d90\n.text:0000000000405d94\n.text:0000000000405d98\n.text:0000000000405d9b\n.text:0000000000405d9d\n.text:0000000000405da2\n.text:0000000000405da5\n.text:0000000000405daa\n.text:0000000000405db0\n.text:0000000000405db3\n.text:0000000000405db8\n.text:0000000000405dbb\n.text:0000000000405dbd\n.text:0000000000405dc1\n.text:0000000000405dc3\n.text:0000000000405dc9\n.text:0000000000405dcb\n.text:0000000000405dd0\n.text:0000000000405dd6\n.text:0000000000405dd8\n.text:0000000000405ddb\n.text:0000000000405ddf\n.text:0000000000405de1\n.text:0000000000405df0\n.text:0000000000405df3\n.text:0000000000405df8\n.text:0000000000405dfb\n.text:0000000000405dfe\n.text:0000000000405e03\n.text:0000000000405e06\n.text:0000000000405e09\n.text:0000000000405e0f\n.text:0000000000405e14\n.text:0000000000405e19\n.text:0000000000405e1e\n.text:0000000000405e20\n.text:0000000000405e25\n.text:0000000000405e27\n.text:0000000000405e2d\n.text:0000000000405e32\n.text:0000000000405e34\n.text:0000000000405e38\n.text:0000000000405e3a\n.text:0000000000405e3d\n.text:0000000000405e42\n.text:0000000000405e45\n.text:0000000000405e4a\n.text:0000000000405e4d\n.text:0000000000405e52\n.text:0000000000405e54\n.text:0000000000405e59\n.text:0000000000405e5e\n.text:0000000000405e63\n.text:0000000000405e65\n.text:0000000000405e68\n.text:0000000000405e6d\n.text:0000000000405e71\n.text:0000000000405e74\n.text:0000000000405e76\n.text:0000000000405e7a\n.text:0000000000405e7e\n.text:0000000000405e84\n.text:0000000000405e87\n.text:0000000000405e8c\n.text:0000000000405e8e\n.text:0000000000405e90\n.text:0000000000405e95\n.text:0000000000405e99\n.text:0000000000405e9b\n.text:0000000000405ea0\n.text:0000000000405ea3\n.text:0000000000405ea8\n.text:0000000000405eac\n.text:0000000000405eae\n.text:0000000000405eb0\n.text:0000000000405eb5\n.text:0000000000405eb8\n.text:0000000000405ebc\n.text:0000000000405ec1\n.text:0000000000405ec6\n.text:0000000000405ecb\n.text:0000000000405ece\n.text:0000000000405ed3\n.text:0000000000405ed6\n.text:0000000000405edb\n.text:0000000000405edf\n.text:0000000000405ee4\n.text:0000000000405ee7\n.text:0000000000405eec\n'
p1266
tp1267
sS'fts_stat'
p1268
(S'\n__stdcall fts_stat(FTS * sp, FTSENT * p)\n'
p1269
V\u000aunsigned_short fts_stat(FTS *sp,FTSENT *p)\u000a\u000a{\u000a  stat *__buf;\u000a  char cVar1;\u000a  ushort uVar2;\u000a  int iVar3;\u000a  int iVar4;\u000a  int *piVar5;\u000a  byte in_DL;\u000a  \u000a  __buf = p->fts_statp;\u000a  if (((sp->fts_options & 2U) == 0) &&\u000a     ((byte)(p->fts_level == 0 & (byte)sp->fts_options & 1 | in_DL) != 1)) {\u000a    iVar3 = fstatat(sp->fts_cwd_fd,p->fts_accpath,(stat *)__buf,0x100);\u000a    if (iVar3 == 0) {\u000aLAB_0040611d:\u000a      uVar2 = *(ushort *)&p->fts_statp[0].st_mode & 0xf000;\u000a      if (uVar2 == 0x8000) {\u000a        return 8;\u000a      }\u000a      if (uVar2 == 0xa000) {\u000a        return 0xc;\u000a      }\u000a      if (uVar2 != 0x4000) {\u000a        return 3;\u000a      }\u000a      p->fts_n_dirs_remaining =\u000a           p->fts_statp[0].st_nlink - (ulong)(~((uint)sp->fts_options >> 4) & 2);\u000a      if (*(char *)&p[1].fts_cycle != '.') {\u000a        return 1;\u000a      }\u000a      cVar1 = *(char *)((long)&p[1].fts_cycle + 1);\u000a      if (cVar1 != 0) {\u000a        if (cVar1 != '.') {\u000a          return 1;\u000a        }\u000a        if (*(char *)((long)&p[1].fts_cycle + 2) != 0) {\u000a          return 1;\u000a        }\u000a      }\u000a      if (p->fts_level != 0) {\u000a        return 5;\u000a      }\u000a      return 1;\u000a    }\u000a    piVar5 = __errno_location();\u000a    iVar3 = *piVar5;\u000a  }\u000a  else {\u000a    iVar3 = stat(p->fts_accpath,(stat *)__buf);\u000a    if (iVar3 == 0) goto LAB_0040611d;\u000a    piVar5 = __errno_location();\u000a    iVar3 = *piVar5;\u000a    if (iVar3 == 2) {\u000a      iVar4 = lstat(p->fts_accpath,(stat *)__buf);\u000a      iVar3 = 2;\u000a      if (iVar4 == 0) {\u000a        *piVar5 = 0;\u000a        return 0xd;\u000a      }\u000a    }\u000a  }\u000a  p->fts_errno = iVar3;\u000a  *(undefined4 *)(p->fts_statp[0].__glibc_reserved + 1) = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 0xc) = 0;\u000a  *(undefined4 *)(p->fts_statp[0].__glibc_reserved + 2) = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 0x14) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ctim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ctim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)p->fts_statp[0].__glibc_reserved = 0;\u000a  *(undefined4 *)((long)p->fts_statp[0].__glibc_reserved + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_mtim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_mtim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ctim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ctim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_atim.tv_nsec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_atim.tv_nsec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_mtim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_mtim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_blocks = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_blocks + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_atim.tv_sec = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_atim.tv_sec + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_size = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_size + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_blksize = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_blksize + 4) = 0;\u000a  p->fts_statp[0].st_gid = 0;\u000a  p->fts_statp[0].__pad0 = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_rdev = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_rdev + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_nlink = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_nlink + 4) = 0;\u000a  p->fts_statp[0].st_mode = 0;\u000a  p->fts_statp[0].st_uid = 0;\u000a  *(undefined4 *)&__buf->st_dev = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_dev + 4) = 0;\u000a  *(undefined4 *)&p->fts_statp[0].st_ino = 0;\u000a  *(undefined4 *)((long)&p->fts_statp[0].st_ino + 4) = 0;\u000a  return 10;\u000a}\u000a\u000a
p1270
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nLEA RBX,[R14 + 0x78]\nMOV ECX,dword ptr [R15 + 0x48]\nCMP qword ptr [R14 + 0x58],0x0\nSETZ AL\nTEST CL,0x2\nJNZ 0x004060ad\nAND ECX,0x1\nAND AL,CL\nOR AL,DL\nXOR AL,0x1\nJZ 0x004060ad\nMOV EDI,dword ptr [R15 + 0x2c]\nMOV RSI,qword ptr [R14 + 0x30]\nMOV ECX,0x100\nMOV RDX,RBX\nCALL 0x00409740\nTEST EAX,EAX\nJZ 0x0040611d\nCALL 0x00401800\nMOV ECX,dword ptr [RAX]\nJMP 0x004060e6\nMOV RDI,qword ptr [R14 + 0x30]\nMOV RSI,RBX\nCALL 0x00409710\nTEST EAX,EAX\nJZ 0x0040611d\nCALL 0x00401800\nMOV R15,RAX\nMOV ECX,dword ptr [R15]\nCMP ECX,0x2\nJNZ 0x004060e6\nMOV RDI,qword ptr [R14 + 0x30]\nMOV RSI,RBX\nCALL 0x00409730\nMOV ECX,0x2\nTEST EAX,EAX\nJZ 0x004061b2\nMOV dword ptr [R14 + 0x40],ECX\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [0x80 + RBX],XMM0\nMOVUPS xmmword ptr [RBX + 0x70],XMM0\nMOVUPS xmmword ptr [RBX + 0x60],XMM0\nMOVUPS xmmword ptr [RBX + 0x50],XMM0\nMOVUPS xmmword ptr [RBX + 0x40],XMM0\nMOVUPS xmmword ptr [RBX + 0x30],XMM0\nMOVUPS xmmword ptr [RBX + 0x20],XMM0\nMOVUPS xmmword ptr [RBX + 0x10],XMM0\nMOVUPS xmmword ptr [RBX],XMM0\nMOV AX,0xa\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOVZX EAX,word ptr [0x90 + R14]\nAND EAX,0xf000\nCMP EAX,0x8000\nJZ 0x004061a0\nMOVZX EAX,AX\nCMP EAX,0xa000\nJZ 0x00406197\nCMP EAX,0x4000\nJNZ 0x004061a9\nMOV RAX,qword ptr [0x88 + R14]\nMOV ECX,dword ptr [R15 + 0x48]\nSHR ECX,0x4\nNOT ECX\nAND ECX,0x2\nSUB RAX,RCX\nMOV qword ptr [R14 + 0x68],RAX\nMOV AX,0x1\nCMP byte ptr [0x108 + R14],0x2e\nJNZ 0x00406117\nMOV CL,byte ptr [0x109 + R14]\nTEST CL,CL\nJZ 0x00406184\nCMP CL,0x2e\nJNZ 0x00406117\nCMP byte ptr [0x10a + R14],0x0\nJNZ 0x00406117\nCMP qword ptr [R14 + 0x58],0x0\nMOV CX,0x1\nMOV AX,0x5\nCMOVZ AX,CX\nJMP 0x00406117\nMOV AX,0xc\nJMP 0x00406117\nMOV AX,0x8\nJMP 0x00406117\nMOV AX,0x3\nJMP 0x00406117\nMOV dword ptr [R15],0x0\nMOV AX,0xd\nJMP 0x00406117\n'
p1271
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n49 8d 5e 78\n41 8b 4f 48\n49 83 7e 58 00\n0f 94 c0\nf6 c1 02\n75 2d\n83 e1 01\n20 c8\n08 d0\n34 01\n74 22\n41 8b 7f 2c\n49 8b 76 30\nb9 00 01 00 00\n48 89 da\ne8 a0 36 00 00\n85 c0\n74 79\ne8 57 b7 ff ff\n8b 08\neb 39\n49 8b 7e 30\n48 89 de\ne8 57 36 00 00\n85 c0\n74 60\ne8 3e b7 ff ff\n49 89 c7\n41 8b 0f\n83 f9 02\n75 19\n49 8b 7e 30\n48 89 de\ne8 57 36 00 00\nb9 02 00 00 00\n85 c0\n0f 84 cc 00 00 00\n41 89 4e 40\n0f 57 c0\n0f 11 83 80 00 00 00\n0f 11 43 70\n0f 11 43 60\n0f 11 43 50\n0f 11 43 40\n0f 11 43 30\n0f 11 43 20\n0f 11 43 10\n0f 11 03\n66 b8 0a 00\n5b\n41 5e\n41 5f\nc3\n41 0f b7 86 90 00 00 00\n25 00 f0 00 00\n3d 00 80 00 00\n74 6f\n0f b7 c0\n3d 00 a0 00 00\n74 5c\n3d 00 40 00 00\n75 67\n49 8b 86 88 00 00 00\n41 8b 4f 48\nc1 e9 04\nf7 d1\n83 e1 02\n48 29 c8\n49 89 46 68\n66 b8 01 00\n41 80 be 08 01 00 00 2e\n75 ad\n41 8a 8e 09 01 00 00\n84 c9\n74 0f\n80 f9 2e\n75 9d\n41 80 be 0a 01 00 00 00\n75 93\n49 83 7e 58 00\n66 b9 01 00\n66 b8 05 00\n66 0f 44 c1\neb 80\n66 b8 0c 00\ne9 77 ff ff ff\n66 b8 08 00\ne9 6e ff ff ff\n66 b8 03 00\ne9 65 ff ff ff\n41 c7 07 00 00 00 00\n66 b8 0d 00\ne9 55 ff ff ff\n'
p1272
S'.text:0000000000406060\n.text:0000000000406062\n.text:0000000000406064\n.text:0000000000406065\n.text:0000000000406068\n.text:000000000040606b\n.text:000000000040606f\n.text:0000000000406073\n.text:0000000000406078\n.text:000000000040607b\n.text:000000000040607e\n.text:0000000000406080\n.text:0000000000406083\n.text:0000000000406085\n.text:0000000000406087\n.text:0000000000406089\n.text:000000000040608b\n.text:000000000040608f\n.text:0000000000406093\n.text:0000000000406098\n.text:000000000040609b\n.text:00000000004060a0\n.text:00000000004060a2\n.text:00000000004060a4\n.text:00000000004060a9\n.text:00000000004060ab\n.text:00000000004060ad\n.text:00000000004060b1\n.text:00000000004060b4\n.text:00000000004060b9\n.text:00000000004060bb\n.text:00000000004060bd\n.text:00000000004060c2\n.text:00000000004060c5\n.text:00000000004060c8\n.text:00000000004060cb\n.text:00000000004060cd\n.text:00000000004060d1\n.text:00000000004060d4\n.text:00000000004060d9\n.text:00000000004060de\n.text:00000000004060e0\n.text:00000000004060e6\n.text:00000000004060ea\n.text:00000000004060ed\n.text:00000000004060f4\n.text:00000000004060f8\n.text:00000000004060fc\n.text:0000000000406100\n.text:0000000000406104\n.text:0000000000406108\n.text:000000000040610c\n.text:0000000000406110\n.text:0000000000406113\n.text:0000000000406117\n.text:0000000000406118\n.text:000000000040611a\n.text:000000000040611c\n.text:000000000040611d\n.text:0000000000406125\n.text:000000000040612a\n.text:000000000040612f\n.text:0000000000406131\n.text:0000000000406134\n.text:0000000000406139\n.text:000000000040613b\n.text:0000000000406140\n.text:0000000000406142\n.text:0000000000406149\n.text:000000000040614d\n.text:0000000000406150\n.text:0000000000406152\n.text:0000000000406155\n.text:0000000000406158\n.text:000000000040615c\n.text:0000000000406160\n.text:0000000000406168\n.text:000000000040616a\n.text:0000000000406171\n.text:0000000000406173\n.text:0000000000406175\n.text:0000000000406178\n.text:000000000040617a\n.text:0000000000406182\n.text:0000000000406184\n.text:0000000000406189\n.text:000000000040618d\n.text:0000000000406191\n.text:0000000000406195\n.text:0000000000406197\n.text:000000000040619b\n.text:00000000004061a0\n.text:00000000004061a4\n.text:00000000004061a9\n.text:00000000004061ad\n.text:00000000004061b2\n.text:00000000004061b9\n.text:00000000004061bd\n'
p1273
tp1274
sS'clear_ungetc_buffer_preserving_position'
p1275
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p1276
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p1277
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x004094f7\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x00409510\n'
p1278
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p1279
S'.text:00000000004094f0\n.text:00000000004094f4\n.text:00000000004094f6\n.text:00000000004094f7\n.text:00000000004094f9\n.text:00000000004094fe\n'
p1280
tp1281
sS'xnmalloc'
p1282
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p1283
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p1284
S'MOV RAX,RDI\nMUL RSI\nJO 0x00405631\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x00405640\nPUSH RAX\nCALL 0x004057d0\n'
p1285
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p1286
S'.text:0000000000405620\n.text:0000000000405623\n.text:0000000000405626\n.text:0000000000405628\n.text:000000000040562c\n.text:000000000040562f\n.text:0000000000405631\n.text:0000000000405632\n'
p1287
tp1288
sS'hash_string'
p1289
(S'\n__stdcall hash_string(char * string, size_t n_buckets)\n'
p1290
V\u000asize_t hash_string(char *string,size_t n_buckets)\u000a\u000a{\u000a  byte bVar1;\u000a  ulong uVar2;\u000a  byte *pbVar3;\u000a  \u000a  bVar1 = *string;\u000a  if (bVar1 != 0) {\u000a    pbVar3 = (byte *)(string + 1);\u000a    uVar2 = 0;\u000a    do {\u000a      uVar2 = ((ulong)bVar1 + uVar2 * 0x1f) % n_buckets;\u000a      bVar1 = *pbVar3;\u000a      pbVar3 = pbVar3 + 1;\u000a    } while (bVar1 != 0);\u000a    return uVar2;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1291
S'MOV AL,byte ptr [RDI]\nTEST AL,AL\nJZ 0x004081d3\nINC RDI\nXOR EDX,EDX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RCX,RDX\nSHL RCX,0x5\nSUB RCX,RDX\nMOVZX EAX,AL\nADD RAX,RCX\nXOR EDX,EDX\nDIV RSI\nMOVZX EAX,byte ptr [RDI]\nINC RDI\nTEST AL,AL\nJNZ 0x004081b0\nMOV RAX,RDX\nRET\nXOR EDX,EDX\nMOV RAX,RDX\nRET\n'
p1292
S'8a 07\n84 c0\n74 2d\n48 ff c7\n31 d2\n0f 1f 44 00 00\n48 89 d1\n48 c1 e1 05\n48 29 d1\n0f b6 c0\n48 01 c8\n31 d2\n48 f7 f6\n0f b6 07\n48 ff c7\n84 c0\n75 e1\n48 89 d0\nc3\n31 d2\n48 89 d0\nc3\n'
p1293
S'.text:00000000004081a0\n.text:00000000004081a2\n.text:00000000004081a4\n.text:00000000004081a6\n.text:00000000004081a9\n.text:00000000004081ab\n.text:00000000004081b0\n.text:00000000004081b3\n.text:00000000004081b7\n.text:00000000004081ba\n.text:00000000004081bd\n.text:00000000004081c0\n.text:00000000004081c2\n.text:00000000004081c5\n.text:00000000004081c8\n.text:00000000004081cb\n.text:00000000004081cd\n.text:00000000004081cf\n.text:00000000004081d2\n.text:00000000004081d3\n.text:00000000004081d5\n.text:00000000004081d8\n'
p1294
tp1295
sS'cycle_check'
p1296
(S'\n__stdcall cycle_check(cycle_check_state * state, stat * sb)\n'
p1297
V\u000a_Bool cycle_check(cycle_check_state *state,stat *sb)\u000a\u000a{\u000a  undefined uVar1;\u000a  _Bool _Var2;\u000a  uintmax_t i;\u000a  \u000a  if (state->magic != 0x95f616) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("state->magic == 9827862","lib/cycle-check.c",0x3c,\u000a                  "_Bool cycle_check(struct cycle_check_state *, const struct stat *)");\u000a  }\u000a  if (((state->chdir_counter == 0) || (sb->st_ino != (state->dev_ino).st_ino)) ||\u000a     (uVar1 = 1, sb->st_dev != (state->dev_ino).st_dev)) {\u000a    i = state->chdir_counter + 1;\u000a    state->chdir_counter = i;\u000a    _Var2 = is_zero_or_power_of_two(i);\u000a    if (_Var2 != false) {\u000a      if (i == 0) {\u000a        return true;\u000a      }\u000a      (state->dev_ino).st_dev = sb->st_dev;\u000a      (state->dev_ino).st_ino = sb->st_ino;\u000a    }\u000a    uVar1 = 0;\u000a  }\u000a  return (_Bool)uVar1;\u000a}\u000a\u000a
p1298
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV R15,RDI\nCMP dword ptr [R15 + 0x18],0x95f616\nJNZ 0x00407cd4\nMOV RBX,qword ptr [R15 + 0x10]\nTEST RBX,RBX\nJZ 0x00407ca2\nMOV RAX,qword ptr [R14 + 0x8]\nCMP RAX,qword ptr [R15]\nJNZ 0x00407ca2\nMOV RCX,qword ptr [R14]\nMOV AL,0x1\nCMP RCX,qword ptr [R15 + 0x8]\nJZ 0x00407cca\nINC RBX\nMOV qword ptr [R15 + 0x10],RBX\nMOV RDI,RBX\nCALL 0x00407cf0\nTEST AL,AL\nJZ 0x00407cc8\nTEST RBX,RBX\nJZ 0x00407cd0\nMOV RAX,qword ptr [R14]\nMOV qword ptr [R15 + 0x8],RAX\nMOV RAX,qword ptr [R14 + 0x8]\nMOV qword ptr [R15],RAX\nXOR EAX,EAX\nPOP RBX\nPOP R14\nPOP R15\nRET\nMOV AL,0x1\nJMP 0x00407cca\nMOV EDI,0x40bcf0\nMOV ESI,0x40bd08\nMOV EDX,0x3c\nMOV ECX,0x40bd1a\nCALL 0x00401990\n'
p1299
S'41 57\n41 56\n53\n49 89 f6\n49 89 ff\n41 81 7f 18 16 f6 95 00\n75 4f\n49 8b 5f 10\n48 85 db\n74 14\n49 8b 46 08\n49 3b 07\n75 0b\n49 8b 0e\nb0 01\n49 3b 4f 08\n74 28\n48 ff c3\n49 89 5f 10\n48 89 df\ne8 3f 00 00 00\n84 c0\n74 13\n48 85 db\n74 16\n49 8b 06\n49 89 47 08\n49 8b 46 08\n49 89 07\n31 c0\n5b\n41 5e\n41 5f\nc3\nb0 01\neb f6\nbf f0 bc 40 00\nbe 08 bd 40 00\nba 3c 00 00 00\nb9 1a bd 40 00\ne8 a3 9c ff ff\n'
p1300
S'.text:0000000000407c70\n.text:0000000000407c72\n.text:0000000000407c74\n.text:0000000000407c75\n.text:0000000000407c78\n.text:0000000000407c7b\n.text:0000000000407c83\n.text:0000000000407c85\n.text:0000000000407c89\n.text:0000000000407c8c\n.text:0000000000407c8e\n.text:0000000000407c92\n.text:0000000000407c95\n.text:0000000000407c97\n.text:0000000000407c9a\n.text:0000000000407c9c\n.text:0000000000407ca0\n.text:0000000000407ca2\n.text:0000000000407ca5\n.text:0000000000407ca9\n.text:0000000000407cac\n.text:0000000000407cb1\n.text:0000000000407cb3\n.text:0000000000407cb5\n.text:0000000000407cb8\n.text:0000000000407cba\n.text:0000000000407cbd\n.text:0000000000407cc1\n.text:0000000000407cc5\n.text:0000000000407cc8\n.text:0000000000407cca\n.text:0000000000407ccb\n.text:0000000000407ccd\n.text:0000000000407ccf\n.text:0000000000407cd0\n.text:0000000000407cd2\n.text:0000000000407cd4\n.text:0000000000407cd9\n.text:0000000000407cde\n.text:0000000000407ce3\n.text:0000000000407ce8\n'
p1301
tp1302
sS'quotearg_char'
p1303
(S'\n__stdcall quotearg_char(char * arg)\n'
p1304
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1305
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00404780\n'
p1306
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p1307
S'.text:00000000004047f0\n.text:00000000004047f2\n.text:00000000004047f9\n.text:00000000004047fb\n'
p1308
tp1309
sS'malloc'
p1310
(S'\n__stdcall malloc(size_t __size)\n'
p1311
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_0060f188)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1312
S'JMP qword ptr [0x0060f188]\n'
p1313
S'ff 25 e2 d6 20 00\n'
p1314
S'.plt:0000000000401aa0\n'
p1315
tp1316
sS'c_tolower'
p1317
(S'\n__stdcall c_tolower()\n'
p1318
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p1319
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p1320
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p1321
S'.text:0000000000407b60\n.text:0000000000407b63\n.text:0000000000407b66\n.text:0000000000407b69\n.text:0000000000407b6c\n'
p1322
tp1323
sS'getopt_long'
p1324
(S'\n__stdcall getopt_long()\n'
p1325
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_0060f0c8)();\u000a  return;\u000a}\u000a\u000a
p1326
S'JMP qword ptr [0x0060f0c8]\n'
p1327
S'ff 25 a2 d7 20 00\n'
p1328
S'.plt:0000000000401920\n'
p1329
tp1330
sS'fts_build'
p1331
(S'\n__stdcall fts_build(FTS * sp)\n'
p1332
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000aFTSENT * fts_build(FTS *sp)\u000a\u000a{\u000a  ulong uVar1;\u000a  byte *pbVar2;\u000a  char cVar3;\u000a  DIR *__dirp;\u000a  size_t sVar4;\u000a  int (*pVar5)(_ftsent **,_ftsent **);\u000a  byte bVar6;\u000a  bool bVar7;\u000a  FTSENT *pFVar8;\u000a  _Bool _Var9;\u000a  unsigned_short uVar10;\u000a  int iVar11;\u000a  DIR *__dirp_00;\u000a  int *piVar12;\u000a  dirent *pdVar13;\u000a  size_t namelen;\u000a  FTSENT *p;\u000a  FTSENT *head;\u000a  FTSENT *ent;\u000a  size_t sVar14;\u000a  int in_ESI;\u000a  char *dir;\u000a  long lVar15;\u000a  ulong nitems;\u000a  uint local_a4;\u000a  char *local_88;\u000a  FTSENT *local_60;\u000a  ulong local_58;\u000a  \u000a  ent = (FTSENT *)sp->fts_cur;\u000a  __dirp = (DIR *)ent->fts_dirp;\u000a  if (__dirp == (DIR *)0x0) {\u000a    dir = (char *)0xffffff9c;\u000a    if ((sp->fts_options & 0x204U) == 0x200) {\u000a      dir = (char *)(ulong)(uint)sp->fts_cwd_fd;\u000a    }\u000a    __dirp_00 = opendirat(dir,(int *)ent->fts_accpath);\u000a    ent->fts_dirp = __dirp_00;\u000a    if (__dirp_00 == (DIR *)0x0) goto joined_r0x00406ded;\u000a    if (ent->fts_info == 0xb) {\u000a      uVar10 = fts_stat(sp,ent);\u000a      ent->fts_info = uVar10;\u000a    }\u000a    else {\u000a      if ((*(byte *)((long)&sp->fts_options + 1) & 1) != 0) {\u000a        leave_dir(sp,ent);\u000a        fts_stat(sp,ent);\u000a        _Var9 = enter_dir(sp,ent);\u000a        if (_Var9 == false) {\u000a          piVar12 = __errno_location();\u000a          *piVar12 = 0xc;\u000a          return (FTSENT *)0;\u000a        }\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    local_a4 = dirfd(__dirp);\u000a    if ((int)local_a4 < 0) {\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000ajoined_r0x00406ded:\u000a      if (in_ESI == 3) {\u000a        ent->fts_info = 4;\u000a        piVar12 = __errno_location();\u000a        ent->fts_errno = *piVar12;\u000a      }\u000a      return (FTSENT *)0x0;\u000a    }\u000a  }\u000a  pVar5 = sp->fts_compar;\u000a  if (in_ESI == 2) {\u000a    lVar15 = 0;\u000a    if (__dirp != (DIR *)0x0) goto LAB_00406e88;\u000aLAB_00406e9a:\u000a    if ((in_ESI == 3) || (lVar15 != 0)) {\u000a      bVar6 = 1;\u000a      if ((*(byte *)((long)&sp->fts_options + 1) & 2) == 0) {\u000aLAB_00406edf:\u000a        if ((-1 < (int)local_a4) &&\u000a           (iVar11 = fts_safe_changedir(sp,ent,(char *)(ulong)local_a4), iVar11 == 0))\u000a        goto LAB_00406e88;\u000a      }\u000a      else {\u000a        local_a4 = dup_safer();\u000a        if (-1 < (int)local_a4) {\u000a          set_cloexec_flag();\u000a          goto LAB_00406edf;\u000a        }\u000a      }\u000a      if ((in_ESI == 3) && (lVar15 != 0)) {\u000a        piVar12 = __errno_location();\u000a        ent->fts_errno = *piVar12;\u000a      }\u000a      *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 1;\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      if (((sp->fts_options & 0x200U) != 0) && (-1 < (int)local_a4)) {\u000a        close(local_a4);\u000a      }\u000a      ent->fts_dirp = (DIR *)0x0;\u000a    }\u000a    else {\u000a      bVar6 = 1;\u000a    }\u000a  }\u000a  else {\u000a    lVar15 = -1;\u000a    if ((sp->fts_options & 0x18U) == 0x18) {\u000a      lVar15 = ent->fts_statp[0].st_nlink - (ulong)(~((uint)sp->fts_options >> 4) & 2);\u000a    }\u000a    if (__dirp == (DIR *)0x0) goto LAB_00406e9a;\u000aLAB_00406e88:\u000a    bVar6 = 0;\u000a  }\u000a  sVar4 = ent->fts_pathlen;\u000a  sVar14 = sVar4 - 1;\u000a  if (ent->fts_path[sVar4 - 1] != '/') {\u000a    sVar14 = sVar4;\u000a  }\u000a  if ((*(byte *)&sp->fts_options & 4) == 0) {\u000a    local_88 = (char *)0x0;\u000a  }\u000a  else {\u000a    local_88 = sp->fts_path + sVar14 + 1;\u000a    sp->fts_path[sVar14] = '/';\u000a  }\u000a  uVar1 = sVar14 + 1;\u000a  local_58 = sp->fts_pathlen - uVar1;\u000a  lVar15 = ent->fts_level;\u000a  bVar7 = false;\u000a  local_60 = (FTSENT *)0x0;\u000a  nitems = 0;\u000a  head = (FTSENT *)0x0;\u000a  do {\u000a    __dirp_00 = ent->fts_dirp;\u000a    if (__dirp_00 == (DIR *)0x0) {\u000a      if (bVar7) goto LAB_0040723a;\u000a      goto LAB_00407245;\u000a    }\u000a    while( true ) {\u000a      pdVar13 = readdir((DIR *)__dirp_00);\u000a      if (pdVar13 == (dirent *)0x0) {\u000a        if ((DIR *)ent->fts_dirp != (DIR *)0x0) {\u000a          closedir((DIR *)ent->fts_dirp);\u000a          ent->fts_dirp = (DIR *)0x0;\u000a        }\u000a        goto LAB_00407233;\u000a      }\u000a      if (((*(byte *)&sp->fts_options & 0x20) != 0) || (pdVar13->d_name[0] != '.')) break;\u000a      cVar3 = pdVar13->d_name[1];\u000a      if (cVar3 == '.') {\u000a        cVar3 = pdVar13->d_name[2];\u000a      }\u000a      if (cVar3 != 0) break;\u000a      __dirp_00 = ent->fts_dirp;\u000a      if (__dirp_00 == (DIR *)0x0) goto LAB_00407233;\u000a    }\u000a    namelen = strlen(pdVar13->d_name);\u000a    p = fts_alloc(sp,pdVar13->d_name,namelen);\u000a    if (p == (FTSENT *)0x0) {\u000aLAB_00407378:\u000a      piVar12 = __errno_location();\u000a      iVar11 = *piVar12;\u000a      free(p);\u000a      fts_lfree(head);\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      *piVar12 = iVar11;\u000a      return (FTSENT *)0;\u000a    }\u000a    if (local_58 <= namelen) {\u000a      dir = sp->fts_path;\u000a      _Var9 = fts_palloc(sp,sVar14 + 2 + namelen);\u000a      if (_Var9 == false) goto LAB_00407378;\u000a      if (dir != sp->fts_path) {\u000a        if ((*(byte *)&sp->fts_options & 4) != 0) {\u000a          local_88 = sp->fts_path + uVar1;\u000a        }\u000a        bVar7 = true;\u000a      }\u000a      local_58 = sp->fts_pathlen - uVar1;\u000a    }\u000a    if (CARRY8(namelen,uVar1)) {\u000a      free(p);\u000a      fts_lfree(head);\u000a      closedir((DIR *)ent->fts_dirp);\u000a      ent->fts_dirp = (DIR *)0x0;\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      piVar12 = __errno_location();\u000a      *piVar12 = 0x24;\u000a      return (FTSENT *)0;\u000a    }\u000a    p->fts_level = lVar15 + 1;\u000a    p->fts_parent = sp->fts_cur;\u000a    p->fts_pathlen = namelen + uVar1;\u000a    p->fts_statp[0].st_ino = pdVar13->d_ino;\u000a    if ((*(byte *)&sp->fts_options & 4) == 0) {\u000a      *(FTSENT **)&p->fts_accpath = p + 1;\u000a    }\u000a    else {\u000a      p->fts_accpath = p->fts_path;\u000a      memmove(local_88,p + 1,p->fts_namelen + 1);\u000a    }\u000a    if ((sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0) || ((sp->fts_options & 0x400U) != 0)\u000a       ) {\u000a      p->fts_info = 0xb;\u000a      set_stat_type(p->fts_statp);\u000a      fts_set_stat_required(p);\u000a    }\u000a    else {\u000a      uVar10 = fts_stat(sp,p);\u000a      p->fts_info = uVar10;\u000a    }\u000a    p->fts_link = (_ftsent *)0x0;\u000a    pFVar8 = p;\u000a    if (head != (FTSENT *)0x0) {\u000a      *(FTSENT **)&local_60->fts_link = p;\u000a      pFVar8 = head;\u000a    }\u000a    head = pFVar8;\u000a    nitems = nitems + 1;\u000a    local_60 = p;\u000a  } while (nitems < (~-(ulong)(pVar5 == (int (*)(_ftsent **,_ftsent **))0x0) | 100000));\u000aLAB_00407233:\u000a  if (bVar7) {\u000aLAB_0040723a:\u000a    fts_padjust(sp,head);\u000a  }\u000aLAB_00407245:\u000a  if ((*(byte *)&sp->fts_options & 4) != 0) {\u000a    dir = local_88;\u000a    if (uVar1 == sp->fts_pathlen) {\u000a      dir = local_88 + -1;\u000a    }\u000a    if (nitems == 0) {\u000a      dir = local_88 + -1;\u000a    }\u000a    *dir = 0;\u000a  }\u000a  if (!(bool)(__dirp != (DIR *)0x0 | bVar6)) {\u000a    if ((in_ESI != 1) && (nitems != 0)) goto LAB_004072a0;\u000a    if (ent->fts_level == 0) {\u000a      iVar11 = restore_initial_cwd(sp);\u000a    }\u000a    else {\u000a      iVar11 = fts_safe_changedir(sp,(FTSENT *)ent->fts_parent,(char *)0xffffffff);\u000a    }\u000a    if (iVar11 != 0) {\u000a      ent->fts_info = 7;\u000a      pbVar2 = (byte *)((long)&sp->fts_options + 1);\u000a      *pbVar2 = *pbVar2 | 0x40;\u000a      goto LAB_00407348;\u000a    }\u000a  }\u000a  if (nitems == 0) {\u000a    if (in_ESI == 3) {\u000a      ent->fts_info = 6;\u000a    }\u000aLAB_00407348:\u000a    fts_lfree(head);\u000a    return (FTSENT *)0;\u000a  }\u000aLAB_004072a0:\u000a  if ((((10000 < nitems) && (sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0)) &&\u000a      ((*(byte *)((long)&sp->fts_options + 1) & 2) != 0)) &&\u000a     (_Var9 = dirent_inode_sort_may_be_useful(), _Var9 != false)) {\u000a    sp->fts_compar = fts_compare_ino;\u000a    head = fts_sort(sp,head,nitems);\u000a    sp->fts_compar = (int (*)(_ftsent **,_ftsent **))0x0;\u000a  }\u000a  if (nitems < 2) {\u000a    return head;\u000a  }\u000a  if (sp->fts_compar == (int (*)(_ftsent **,_ftsent **))0x0) {\u000a    return head;\u000a  }\u000a  ent = fts_sort(sp,head,nitems);\u000a  return ent;\u000a}\u000a\u000a
p1333
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x78\nMOV R12D,ESI\nMOV R15,RDI\nMOV RBX,qword ptr [R15]\nMOV R14,qword ptr [RBX + 0x18]\nTEST R14,R14\nJZ 0x00406d74\nMOV RDI,R14\nCALL 0x00401a30\nMOV dword ptr [RSP + 0x4],EAX\nTEST EAX,EAX\nJNS 0x00406e3a\nMOV RDI,qword ptr [RBX + 0x18]\nCALL 0x004019d0\nMOV qword ptr [RBX + 0x18],0x0\nCMP R12D,0x3\nJZ 0x00406df3\nJMP 0x00407350\nMOV ECX,dword ptr [R15 + 0x48]\nMOV EAX,ECX\nAND EAX,0x204\nMOV EDI,0xffffff9c\nCMP EAX,0x200\nJNZ 0x00406d8f\nMOV EDI,dword ptr [R15 + 0x2c]\nMOV RSI,qword ptr [RBX + 0x30]\nXOR EAX,EAX\nTEST CL,0x10\nJZ 0x00406dab\nTEST CL,0x1\nJZ 0x00406da6\nCMP qword ptr [RBX + 0x58],0x0\nJZ 0x00406dab\nMOV EAX,0x20000\nMOV EDX,dword ptr [R15 + 0x48]\nSHL EDX,0x7\nAND EDX,0x40000\nOR EDX,EAX\nLEA RCX,[RSP + 0x4]\nCALL 0x004078b0\nMOV qword ptr [RBX + 0x18],RAX\nTEST RAX,RAX\nJZ 0x00406de9\nMOVZX EAX,word ptr [RBX + 0x70]\nCMP EAX,0xb\nJNZ 0x00406e08\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00406060\nMOV word ptr [RBX + 0x70],AX\nJMP 0x00406e3a\nCMP R12D,0x3\nJNZ 0x00407350\nMOV word ptr [RBX + 0x70],0x4\nCALL 0x00401800\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RBX + 0x40],EAX\nJMP 0x00407350\nTEST byte ptr [R15 + 0x49],0x1\nJZ 0x00406e3a\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00406b00\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x00406060\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x004075d0\nTEST AL,AL\nJZ 0x004073bb\nMOV qword ptr [RSP + 0x8],RBX\nCMP qword ptr [R15 + 0x40],0x1\nSBB RBP,RBP\nCMP R12D,0x2\nJNZ 0x00406e57\nXOR R13D,R13D\nTEST R14,R14\nJNZ 0x00406e88\nJMP 0x00406e9a\nMOV EAX,dword ptr [R15 + 0x48]\nMOV ECX,EAX\nAND ECX,0x18\nMOV R13,-0x1\nCMP ECX,0x18\nJNZ 0x00406e83\nMOV RCX,qword ptr [RSP + 0x8]\nMOV R13,qword ptr [0x88 + RCX]\nSHR EAX,0x4\nNOT EAX\nAND EAX,0x2\nSUB R13,RAX\nTEST R14,R14\nJZ 0x00406e9a\nMOV dword ptr [RSP + 0x14],0x0\nMOV RBX,qword ptr [RSP + 0x8]\nJMP 0x00406f4c\nCMP R12D,0x3\nJZ 0x00406eb5\nTEST R13,R13\nJNZ 0x00406eb5\nMOV AL,0x1\nMOV dword ptr [RSP + 0x14],EAX\nMOV RBX,qword ptr [RSP + 0x8]\nJMP 0x00406f4c\nMOV AL,0x1\nMOV dword ptr [RSP + 0x14],EAX\nTEST byte ptr [R15 + 0x49],0x2\nJZ 0x00406edf\nMOV EDI,dword ptr [RSP + 0x4]\nCALL 0x00409220\nMOV dword ptr [RSP + 0x4],EAX\nTEST EAX,EAX\nJS 0x00406efa\nMOV ESI,0x1\nMOV EDI,EAX\nCALL 0x00407b80\nMOV EDX,dword ptr [RSP + 0x4]\nTEST EDX,EDX\nJS 0x00406efa\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,qword ptr [RSP + 0x8]\nCALL 0x00406b90\nTEST EAX,EAX\nJZ 0x00406e88\nCMP R12D,0x3\nJNZ 0x00406f14\nTEST R13,R13\nJZ 0x00406f14\nCALL 0x00401800\nMOV EAX,dword ptr [RAX]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV dword ptr [RCX + 0x40],EAX\nMOV RBX,qword ptr [RSP + 0x8]\nOR byte ptr [RBX + 0x72],0x1\nMOV RDI,qword ptr [RBX + 0x18]\nCALL 0x004019d0\nMOV qword ptr [RBX + 0x18],0x0\nMOV EAX,dword ptr [R15 + 0x48]\nTEST AH,0x2\nJZ 0x00406f44\nMOV EDI,dword ptr [RSP + 0x4]\nTEST EDI,EDI\nJS 0x00406f44\nCALL 0x004019c0\nMOV qword ptr [RBX + 0x18],0x0\nNOT RBP\nMOV RAX,qword ptr [RBX + 0x38]\nMOV RCX,qword ptr [RBX + 0x48]\nCMP byte ptr [RAX + RCX*0x1 + -0x1],0x2f\nLEA RDX,[RCX + -0x1]\nCMOVNZ RDX,RCX\nTEST byte ptr [R15 + 0x48],0x4\nMOV dword ptr [RSP + 0x2c],R12D\nMOV qword ptr [RSP + 0x60],R14\nJNZ 0x00406f7e\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x20],RAX\nJMP 0x00406f90\nMOV RAX,qword ptr [R15 + 0x20]\nLEA RCX,[RAX + RDX*0x1 + 0x1]\nMOV qword ptr [RSP + 0x20],RCX\nMOV byte ptr [RAX + RDX*0x1],0x2f\nOR RBP,0x186a0\nMOV qword ptr [RSP + 0x70],RBP\nLEA R13,[RDX + 0x1]\nMOV RAX,qword ptr [R15 + 0x30]\nSUB RAX,R13\nMOV qword ptr [RSP + 0x50],RAX\nMOV RAX,qword ptr [RBX + 0x58]\nINC RAX\nMOV qword ptr [RSP + 0x68],RAX\nADD RDX,0x2\nMOV qword ptr [RSP + 0x58],RDX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x40],RAX\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x48],RAX\nXOR R14D,R14D\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x38],R13\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJZ 0x00407365\nMOV qword ptr [RSP + 0x18],RAX\nNOP dword ptr [RAX + RAX*0x1]\nCALL 0x00401a90\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00407218\nTEST byte ptr [R15 + 0x48],0x20\nJNZ 0x00407040\nCMP byte ptr [RBP + 0x13],0x2e\nJNZ 0x00407040\nMOVZX EAX,byte ptr [RBP + 0x14]\nCMP AL,0x2e\nJZ 0x00407020\nTEST AL,AL\nJZ 0x00407026\nJMP 0x00407040\nCMP byte ptr [RBP + 0x15],0x0\nJNZ 0x00407040\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJNZ 0x00406ff0\nJMP 0x0040722e\nMOV qword ptr [RSP + 0x30],R14\nMOV RBX,RBP\nADD RBX,0x13\nMOV RDI,RBX\nCALL 0x004018f0\nMOV R12,RAX\nMOV RDI,R15\nMOV RSI,RBX\nMOV RDX,R12\nCALL 0x00405fb0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x00407378\nMOV RAX,qword ptr [RSP + 0x50]\nCMP R12,RAX\nJNC 0x00407090\nMOV R14,qword ptr [RSP + 0x30]\nMOV RDX,qword ptr [RSP + 0x38]\nADD R12,RDX\nJNC 0x004070f9\nJMP 0x004073c8\nMOV RBX,qword ptr [R15 + 0x20]\nMOV RAX,qword ptr [RSP + 0x58]\nLEA RSI,[RAX + R12*0x1]\nMOV RDI,R15\nCALL 0x00405f50\nTEST AL,AL\nJZ 0x00407378\nMOV RAX,qword ptr [R15 + 0x20]\nCMP RBX,RAX\nJZ 0x004070df\nMOV RDX,qword ptr [RSP + 0x38]\nADD RAX,RDX\nTEST byte ptr [R15 + 0x48],0x4\nMOV RCX,qword ptr [RSP + 0x20]\nCMOVNZ RCX,RAX\nMOV qword ptr [RSP + 0x20],RCX\nMOV AL,0x1\nMOV qword ptr [RSP + 0x40],RAX\nMOV R14,qword ptr [RSP + 0x30]\nJMP 0x004070e9\nMOV R14,qword ptr [RSP + 0x30]\nMOV RDX,qword ptr [RSP + 0x38]\nMOV RAX,qword ptr [R15 + 0x30]\nSUB RAX,RDX\nADD R12,RDX\nJC 0x004073c8\nMOV qword ptr [RSP + 0x50],RAX\nMOV RAX,qword ptr [RSP + 0x68]\nMOV qword ptr [R13 + 0x58],RAX\nMOV RAX,qword ptr [R15]\nMOV qword ptr [R13 + 0x8],RAX\nMOV qword ptr [R13 + 0x48],R12\nMOV RAX,qword ptr [RBP]\nMOV qword ptr [0x80 + R13],RAX\nTEST byte ptr [R15 + 0x48],0x4\nJNZ 0x00407140\nLEA RAX,[0x108 + R13]\nMOV qword ptr [R13 + 0x30],RAX\nJMP 0x00407160\nMOV RAX,qword ptr [R13 + 0x38]\nMOV qword ptr [R13 + 0x30],RAX\nLEA RSI,[0x108 + R13]\nMOV RDX,qword ptr [R13 + 0x60]\nINC RDX\nMOV RDI,qword ptr [RSP + 0x20]\nCALL 0x00401b60\nMOV EAX,dword ptr [R15 + 0x48]\nCMP qword ptr [R15 + 0x40],0x0\nJZ 0x00407190\nMOV ECX,EAX\nAND ECX,0x400\nJNZ 0x00407190\nXOR EDX,EDX\nMOV RDI,R15\nMOV RSI,R13\nCALL 0x00406060\nMOV word ptr [R13 + 0x70],AX\nJMP 0x004071d5\nMOV RDI,R13\nADD RDI,0x78\nAND EAX,0x18\nCMP EAX,0x18\nJNZ 0x004071b0\nMOV AL,byte ptr [RBP + 0x12]\nCMP AL,0x4\nSETNZ CL\nTEST AL,AL\nSETNZ BL\nAND BL,CL\nJMP 0x004071b2\nXOR EBX,EBX\nMOV word ptr [R13 + 0x70],0xb\nMOVZX ESI,byte ptr [RBP + 0x12]\nCALL 0x00407910\nXOR BL,0x1\nMOVZX ESI,BL\nMOV RDI,R13\nCALL 0x00406040\nMOV R14,qword ptr [RSP + 0x30]\nMOV qword ptr [R13 + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x18]\nTEST RAX,RAX\nMOV R12,R13\nJZ 0x004071f6\nMOV RCX,qword ptr [RSP + 0x48]\nMOV qword ptr [RCX + 0x10],R13\nMOV R12,RAX\nINC R14\nCMP qword ptr [RSP + 0x70],R14\nMOV qword ptr [RSP + 0x48],R13\nMOV RAX,R12\nMOV R13,qword ptr [RSP + 0x38]\nMOV RBX,qword ptr [RSP + 0x8]\nJA 0x00406fd9\nJMP 0x00407233\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJZ 0x0040722e\nCALL 0x004019d0\nMOV qword ptr [RBX + 0x18],0x0\nMOV R12,qword ptr [RSP + 0x18]\nTEST byte ptr [RSP + 0x40],0x1\nJZ 0x00407245\nMOV RDI,R15\nMOV RSI,R12\nCALL 0x00407930\nTEST byte ptr [R15 + 0x48],0x4\nJZ 0x0040726a\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,RAX\nLEA RAX,[RCX + -0x1]\nCMP R13,qword ptr [R15 + 0x30]\nCMOVZ RCX,RAX\nTEST R14,R14\nCMOVZ RCX,RAX\nMOV byte ptr [RCX],0x0\nCMP qword ptr [RSP + 0x60],0x0\nSETNZ AL\nOR AL,byte ptr [RSP + 0x14]\nJZ 0x00407294\nTEST R14,R14\nJNZ 0x004072a0\nCMP dword ptr [RSP + 0x2c],0x3\nJNZ 0x00407348\nMOV word ptr [RBX + 0x70],0x6\nJMP 0x00407348\nCMP dword ptr [RSP + 0x2c],0x1\nJZ 0x00407307\nTEST R14,R14\nJZ 0x00407307\nCMP R14,0x2711\nJC 0x004072e5\nCMP qword ptr [R15 + 0x40],0x0\nJNZ 0x004072e5\nTEST byte ptr [R15 + 0x49],0x2\nJZ 0x004072e5\nMOV EDI,dword ptr [R15 + 0x2c]\nCALL 0x004079b0\nTEST AL,AL\nJZ 0x004072e5\nMOV qword ptr [R15 + 0x40],0x4079f0\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x004061d0\nMOV R12,RAX\nMOV qword ptr [R15 + 0x40],0x0\nCMP R14,0x2\nJC 0x00407353\nMOV RAX,qword ptr [R15 + 0x40]\nTEST RAX,RAX\nJZ 0x00407353\nMOV RDI,R15\nMOV RSI,R12\nMOV RDX,R14\nCALL 0x004061d0\nMOV R12,RAX\nJMP 0x00407353\nCMP qword ptr [RBX + 0x58],0x0\nJZ 0x0040732d\nMOV RSI,qword ptr [RBX + 0x8]\nMOV EDX,0xffffffff\nMOV ECX,0x40b9c7\nMOV RDI,R15\nCALL 0x00406b90\nTEST EAX,EAX\nJNZ 0x0040733d\nJMP 0x00407279\nMOV RDI,R15\nCALL 0x00407410\nTEST EAX,EAX\nJZ 0x00407279\nMOV word ptr [RBX + 0x70],0x7\nOR byte ptr [R15 + 0x49],0x40\nMOV RDI,R12\nCALL 0x00406390\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x78\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV R12,RAX\nTEST byte ptr [RSP + 0x40],0x1\nJNZ 0x0040723a\nJMP 0x00407245\nCALL 0x00401800\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV RDI,R13\nCALL 0x004017e0\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x00406390\nMOV RBP,qword ptr [RSP + 0x8]\nMOV RDI,qword ptr [RBP + 0x18]\nCALL 0x004019d0\nMOV qword ptr [RBP + 0x18],0x0\nMOV word ptr [RBP + 0x70],0x7\nOR byte ptr [R15 + 0x49],0x40\nMOV dword ptr [RBX],R14D\nJMP 0x00407350\nCALL 0x00401800\nMOV dword ptr [RAX],0xc\nJMP 0x00407350\nMOV RDI,R13\nCALL 0x004017e0\nMOV RDI,qword ptr [RSP + 0x18]\nCALL 0x00406390\nMOV RBX,qword ptr [RSP + 0x8]\nMOV RDI,qword ptr [RBX + 0x18]\nCALL 0x004019d0\nMOV qword ptr [RBX + 0x18],0x0\nMOV word ptr [RBX + 0x70],0x7\nOR byte ptr [R15 + 0x49],0x40\nCALL 0x00401800\nMOV dword ptr [RAX],0x24\nJMP 0x00407350\n'
p1334
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 78\n41 89 f4\n49 89 ff\n49 8b 1f\n4c 8b 73 18\n4d 85 f6\n74 34\n4c 89 f7\ne8 e8 ac ff ff\n89 44 24 04\n85 c0\n0f 89 e6 00 00 00\n48 8b 7b 18\ne8 73 ac ff ff\n48 c7 43 18 00 00 00 00\n41 83 fc 03\n0f 84 84 00 00 00\ne9 dc 05 00 00\n41 8b 4f 48\n89 c8\n25 04 02 00 00\nbf 9c ff ff ff\n3d 00 02 00 00\n75 04\n41 8b 7f 2c\n48 8b 73 30\n31 c0\nf6 c1 10\n74 11\nf6 c1 01\n74 07\n48 83 7b 58 00\n74 05\nb8 00 00 02 00\n41 8b 57 48\nc1 e2 07\n81 e2 00 00 04 00\n09 c2\n48 8d 4c 24 04\ne8 ec 0a 00 00\n48 89 43 18\n48 85 c0\n74 1c\n0f b7 43 70\n83 f8 0b\n75 32\n31 d2\n4c 89 ff\n48 89 de\ne8 7d f2 ff ff\n66 89 43 70\neb 51\n41 83 fc 03\n0f 85 5d 05 00 00\n66 c7 43 70 04 00\ne8 02 aa ff ff\n8b 00\n89 43 40\ne9 48 05 00 00\n41 f6 47 49 01\n74 2b\n4c 89 ff\n48 89 de\ne8 e6 fc ff ff\n31 d2\n4c 89 ff\n48 89 de\ne8 39 f2 ff ff\n4c 89 ff\n48 89 de\ne8 9e 07 00 00\n84 c0\n0f 84 81 05 00 00\n48 89 5c 24 08\n49 83 7f 40 01\n48 19 ed\n41 83 fc 02\n75 0a\n45 31 ed\n4d 85 f6\n75 33\neb 43\n41 8b 47 48\n89 c1\n83 e1 18\n49 c7 c5 ff ff ff ff\n83 f9 18\n75 17\n48 8b 4c 24 08\n4c 8b a9 88 00 00 00\nc1 e8 04\nf7 d0\n83 e0 02\n49 29 c5\n4d 85 f6\n74 12\nc7 44 24 14 00 00 00 00\n48 8b 5c 24 08\ne9 b2 00 00 00\n41 83 fc 03\n74 15\n4d 85 ed\n75 10\nb0 01\n89 44 24 14\n48 8b 5c 24 08\ne9 97 00 00 00\nb0 01\n89 44 24 14\n41 f6 47 49 02\n74 1d\n8b 7c 24 04\ne8 55 23 00 00\n89 44 24 04\n85 c0\n78 27\nbe 01 00 00 00\n89 c7\ne8 a1 0c 00 00\n8b 54 24 04\n85 d2\n78 13\n31 c9\n4c 89 ff\n48 8b 74 24 08\ne8 9a fc ff ff\n85 c0\n74 8e\n41 83 fc 03\n75 14\n4d 85 ed\n74 0f\ne8 f6 a8 ff ff\n8b 00\n48 8b 4c 24 08\n89 41 40\n48 8b 5c 24 08\n80 4b 72 01\n48 8b 7b 18\ne8 aa aa ff ff\n48 c7 43 18 00 00 00 00\n41 8b 47 48\nf6 c4 02\n74 0d\n8b 7c 24 04\n85 ff\n78 05\ne8 7c aa ff ff\n48 c7 43 18 00 00 00 00\n48 f7 d5\n48 8b 43 38\n48 8b 4b 48\n80 7c 08 ff 2f\n48 8d 51 ff\n48 0f 45 d1\n41 f6 47 48 04\n44 89 64 24 2c\n4c 89 74 24 60\n75 09\n31 c0\n48 89 44 24 20\neb 12\n49 8b 47 20\n48 8d 4c 10 01\n48 89 4c 24 20\nc6 04 10 2f\n48 81 cd a0 86 01 00\n48 89 6c 24 70\n4c 8d 6a 01\n49 8b 47 30\n4c 29 e8\n48 89 44 24 50\n48 8b 43 58\n48 ff c0\n48 89 44 24 68\n48 83 c2 02\n48 89 54 24 58\n31 c0\n48 89 44 24 40\n31 c0\n48 89 44 24 48\n45 31 f6\n31 c0\n4c 89 6c 24 38\n48 8b 7b 18\n48 85 ff\n0f 84 7f 03 00 00\n48 89 44 24 18\n0f 1f 44 00 00\ne8 9b aa ff ff\n48 89 c5\n48 85 ed\n0f 84 17 02 00 00\n41 f6 47 48 20\n75 38\n80 7d 13 2e\n75 32\n0f b6 45 14\n3c 2e\n74 0a\n84 c0\n74 0c\neb 24\n80 7d 15 00\n75 1a\n48 8b 7b 18\n48 85 ff\n75 c1\ne9 fa 01 00 00\n4c 89 74 24 30\n48 89 eb\n48 83 c3 13\n48 89 df\ne8 9c a8 ff ff\n49 89 c4\n4c 89 ff\n48 89 de\n4c 89 e2\ne8 4b ef ff ff\n49 89 c5\n4d 85 ed\n0f 84 07 03 00 00\n48 8b 44 24 50\n49 39 c4\n73 15\n4c 8b 74 24 30\n48 8b 54 24 38\n49 01 d4\n73 6f\ne9 39 03 00 00\n49 8b 5f 20\n48 8b 44 24 58\n4a 8d 34 20\n4c 89 ff\ne8 ab ee ff ff\n84 c0\n0f 84 cb 02 00 00\n49 8b 47 20\n48 39 c3\n74 29\n48 8b 54 24 38\n48 01 d0\n41 f6 47 48 04\n48 8b 4c 24 20\n48 0f 45 c8\n48 89 4c 24 20\nb0 01\n48 89 44 24 40\n4c 8b 74 24 30\neb 0a\n4c 8b 74 24 30\n48 8b 54 24 38\n49 8b 47 30\n48 29 d0\n49 01 d4\n0f 82 cf 02 00 00\n48 89 44 24 50\n48 8b 44 24 68\n49 89 45 58\n49 8b 07\n49 89 45 08\n4d 89 65 48\n48 8b 45 00\n49 89 85 80 00 00 00\n41 f6 47 48 04\n75 1c\n49 8d 85 08 01 00 00\n49 89 45 30\neb 2f\n49 8b 45 38\n49 89 45 30\n49 8d b5 08 01 00 00\n49 8b 55 60\n48 ff c2\n48 8b 7c 24 20\ne8 00 aa ff ff\n41 8b 47 48\n49 83 7f 40 00\n74 25\n89 c1\n81 e1 00 04 00 00\n75 1b\n31 d2\n4c 89 ff\n4c 89 ee\ne8 de ee ff ff\n66 41 89 45 70\neb 4c\n4c 89 ef\n48 83 c7 78\n83 e0 18\n83 f8 18\n75 11\n8a 45 12\n3c 04\n0f 95 c1\n84 c0\n0f 95 c3\n20 cb\neb 02\n31 db\n66 41 c7 45 70 0b 00\n0f b6 75 12\ne8 4e 07 00 00\n80 f3 01\n0f b6 f3\n4c 89 ef\ne8 70 ee ff ff\n4c 8b 74 24 30\n49 c7 45 10 00 00 00 00\n48 8b 44 24 18\n48 85 c0\n4d 89 ec\n74 0c\n48 8b 4c 24 48\n4c 89 69 10\n49 89 c4\n49 ff c6\n4c 39 74 24 70\n4c 89 6c 24 48\n4c 89 e0\n4c 8b 6c 24 38\n48 8b 5c 24 08\n0f 87 c3 fd ff ff\neb 1b\n48 8b 7b 18\n48 85 ff\n74 0d\ne8 aa a7 ff ff\n48 c7 43 18 00 00 00 00\n4c 8b 64 24 18\nf6 44 24 40 01\n74 0b\n4c 89 ff\n4c 89 e6\ne8 eb 06 00 00\n41 f6 47 48 04\n74 1e\n48 8b 44 24 20\n48 89 c1\n48 8d 41 ff\n4d 3b 6f 30\n48 0f 44 c8\n4d 85 f6\n48 0f 44 c8\nc6 01 00\n48 83 7c 24 60 00\n0f 95 c0\n0a 44 24 14\n74 1b\n4d 85 f6\n75 22\n83 7c 24 2c 03\n0f 85 bf 00 00 00\n66 c7 43 70 06 00\ne9 b4 00 00 00\n83 7c 24 2c 01\n74 6c\n4d 85 f6\n74 67\n49 81 fe 11 27 00 00\n72 3c\n49 83 7f 40 00\n75 35\n41 f6 47 49 02\n74 2e\n41 8b 7f 2c\ne8 f0 06 00 00\n84 c0\n74 21\n49 c7 47 40 f0 79 40 00\n4c 89 ff\n4c 89 e6\n4c 89 f2\ne8 f6 ee ff ff\n49 89 c4\n49 c7 47 40 00 00 00 00\n49 83 fe 02\n72 68\n49 8b 47 40\n48 85 c0\n74 5f\n4c 89 ff\n4c 89 e6\n4c 89 f2\ne8 ce ee ff ff\n49 89 c4\neb 4c\n48 83 7b 58 00\n74 1f\n48 8b 73 08\nba ff ff ff ff\nb9 c7 b9 40 00\n4c 89 ff\ne8 6c f8 ff ff\n85 c0\n75 15\ne9 4c ff ff ff\n4c 89 ff\ne8 db 00 00 00\n85 c0\n0f 84 3c ff ff ff\n66 c7 43 70 07 00\n41 80 4f 49 40\n4c 89 e7\ne8 40 f0 ff ff\n45 31 e4\n4c 89 e0\n48 83 c4 78\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n49 89 c4\nf6 44 24 40 01\n0f 85 c7 fe ff ff\ne9 cd fe ff ff\ne8 83 a4 ff ff\n48 89 c3\n44 8b 33\n4c 89 ef\ne8 55 a4 ff ff\n48 8b 7c 24 18\ne8 fb ef ff ff\n48 8b 6c 24 08\n48 8b 7d 18\ne8 2d a6 ff ff\n48 c7 45 18 00 00 00 00\n66 c7 45 70 07 00\n41 80 4f 49 40\n44 89 33\neb 95\ne8 40 a4 ff ff\nc7 00 0c 00 00 00\neb 88\n4c 89 ef\ne8 10 a4 ff ff\n48 8b 7c 24 18\ne8 b6 ef ff ff\n48 8b 5c 24 08\n48 8b 7b 18\ne8 e8 a5 ff ff\n48 c7 43 18 00 00 00 00\n66 c7 43 70 07 00\n41 80 4f 49 40\ne8 00 a4 ff ff\nc7 00 24 00 00 00\ne9 45 ff ff ff\n'
p1335
S'.text:0000000000406d20\n.text:0000000000406d21\n.text:0000000000406d23\n.text:0000000000406d25\n.text:0000000000406d27\n.text:0000000000406d29\n.text:0000000000406d2a\n.text:0000000000406d2e\n.text:0000000000406d31\n.text:0000000000406d34\n.text:0000000000406d37\n.text:0000000000406d3b\n.text:0000000000406d3e\n.text:0000000000406d40\n.text:0000000000406d43\n.text:0000000000406d48\n.text:0000000000406d4c\n.text:0000000000406d4e\n.text:0000000000406d54\n.text:0000000000406d58\n.text:0000000000406d5d\n.text:0000000000406d65\n.text:0000000000406d69\n.text:0000000000406d6f\n.text:0000000000406d74\n.text:0000000000406d78\n.text:0000000000406d7a\n.text:0000000000406d7f\n.text:0000000000406d84\n.text:0000000000406d89\n.text:0000000000406d8b\n.text:0000000000406d8f\n.text:0000000000406d93\n.text:0000000000406d95\n.text:0000000000406d98\n.text:0000000000406d9a\n.text:0000000000406d9d\n.text:0000000000406d9f\n.text:0000000000406da4\n.text:0000000000406da6\n.text:0000000000406dab\n.text:0000000000406daf\n.text:0000000000406db2\n.text:0000000000406db8\n.text:0000000000406dba\n.text:0000000000406dbf\n.text:0000000000406dc4\n.text:0000000000406dc8\n.text:0000000000406dcb\n.text:0000000000406dcd\n.text:0000000000406dd1\n.text:0000000000406dd4\n.text:0000000000406dd6\n.text:0000000000406dd8\n.text:0000000000406ddb\n.text:0000000000406dde\n.text:0000000000406de3\n.text:0000000000406de7\n.text:0000000000406de9\n.text:0000000000406ded\n.text:0000000000406df3\n.text:0000000000406df9\n.text:0000000000406dfe\n.text:0000000000406e00\n.text:0000000000406e03\n.text:0000000000406e08\n.text:0000000000406e0d\n.text:0000000000406e0f\n.text:0000000000406e12\n.text:0000000000406e15\n.text:0000000000406e1a\n.text:0000000000406e1c\n.text:0000000000406e1f\n.text:0000000000406e22\n.text:0000000000406e27\n.text:0000000000406e2a\n.text:0000000000406e2d\n.text:0000000000406e32\n.text:0000000000406e34\n.text:0000000000406e3a\n.text:0000000000406e3f\n.text:0000000000406e44\n.text:0000000000406e47\n.text:0000000000406e4b\n.text:0000000000406e4d\n.text:0000000000406e50\n.text:0000000000406e53\n.text:0000000000406e55\n.text:0000000000406e57\n.text:0000000000406e5b\n.text:0000000000406e5d\n.text:0000000000406e60\n.text:0000000000406e67\n.text:0000000000406e6a\n.text:0000000000406e6c\n.text:0000000000406e71\n.text:0000000000406e78\n.text:0000000000406e7b\n.text:0000000000406e7d\n.text:0000000000406e80\n.text:0000000000406e83\n.text:0000000000406e86\n.text:0000000000406e88\n.text:0000000000406e90\n.text:0000000000406e95\n.text:0000000000406e9a\n.text:0000000000406e9e\n.text:0000000000406ea0\n.text:0000000000406ea3\n.text:0000000000406ea5\n.text:0000000000406ea7\n.text:0000000000406eab\n.text:0000000000406eb0\n.text:0000000000406eb5\n.text:0000000000406eb7\n.text:0000000000406ebb\n.text:0000000000406ec0\n.text:0000000000406ec2\n.text:0000000000406ec6\n.text:0000000000406ecb\n.text:0000000000406ecf\n.text:0000000000406ed1\n.text:0000000000406ed3\n.text:0000000000406ed8\n.text:0000000000406eda\n.text:0000000000406edf\n.text:0000000000406ee3\n.text:0000000000406ee5\n.text:0000000000406ee7\n.text:0000000000406ee9\n.text:0000000000406eec\n.text:0000000000406ef1\n.text:0000000000406ef6\n.text:0000000000406ef8\n.text:0000000000406efa\n.text:0000000000406efe\n.text:0000000000406f00\n.text:0000000000406f03\n.text:0000000000406f05\n.text:0000000000406f0a\n.text:0000000000406f0c\n.text:0000000000406f11\n.text:0000000000406f14\n.text:0000000000406f19\n.text:0000000000406f1d\n.text:0000000000406f21\n.text:0000000000406f26\n.text:0000000000406f2e\n.text:0000000000406f32\n.text:0000000000406f35\n.text:0000000000406f37\n.text:0000000000406f3b\n.text:0000000000406f3d\n.text:0000000000406f3f\n.text:0000000000406f44\n.text:0000000000406f4c\n.text:0000000000406f4f\n.text:0000000000406f53\n.text:0000000000406f57\n.text:0000000000406f5c\n.text:0000000000406f60\n.text:0000000000406f64\n.text:0000000000406f69\n.text:0000000000406f6e\n.text:0000000000406f73\n.text:0000000000406f75\n.text:0000000000406f77\n.text:0000000000406f7c\n.text:0000000000406f7e\n.text:0000000000406f82\n.text:0000000000406f87\n.text:0000000000406f8c\n.text:0000000000406f90\n.text:0000000000406f97\n.text:0000000000406f9c\n.text:0000000000406fa0\n.text:0000000000406fa4\n.text:0000000000406fa7\n.text:0000000000406fac\n.text:0000000000406fb0\n.text:0000000000406fb3\n.text:0000000000406fb8\n.text:0000000000406fbc\n.text:0000000000406fc1\n.text:0000000000406fc3\n.text:0000000000406fc8\n.text:0000000000406fca\n.text:0000000000406fcf\n.text:0000000000406fd2\n.text:0000000000406fd4\n.text:0000000000406fd9\n.text:0000000000406fdd\n.text:0000000000406fe0\n.text:0000000000406fe6\n.text:0000000000406feb\n.text:0000000000406ff0\n.text:0000000000406ff5\n.text:0000000000406ff8\n.text:0000000000406ffb\n.text:0000000000407001\n.text:0000000000407006\n.text:0000000000407008\n.text:000000000040700c\n.text:000000000040700e\n.text:0000000000407012\n.text:0000000000407014\n.text:0000000000407016\n.text:0000000000407018\n.text:000000000040701a\n.text:0000000000407020\n.text:0000000000407024\n.text:0000000000407026\n.text:000000000040702a\n.text:000000000040702d\n.text:000000000040702f\n.text:0000000000407040\n.text:0000000000407045\n.text:0000000000407048\n.text:000000000040704c\n.text:000000000040704f\n.text:0000000000407054\n.text:0000000000407057\n.text:000000000040705a\n.text:000000000040705d\n.text:0000000000407060\n.text:0000000000407065\n.text:0000000000407068\n.text:000000000040706b\n.text:0000000000407071\n.text:0000000000407076\n.text:0000000000407079\n.text:000000000040707b\n.text:0000000000407080\n.text:0000000000407085\n.text:0000000000407088\n.text:000000000040708a\n.text:0000000000407090\n.text:0000000000407094\n.text:0000000000407099\n.text:000000000040709d\n.text:00000000004070a0\n.text:00000000004070a5\n.text:00000000004070a7\n.text:00000000004070ad\n.text:00000000004070b1\n.text:00000000004070b4\n.text:00000000004070b6\n.text:00000000004070bb\n.text:00000000004070be\n.text:00000000004070c3\n.text:00000000004070c8\n.text:00000000004070cc\n.text:00000000004070d1\n.text:00000000004070d3\n.text:00000000004070d8\n.text:00000000004070dd\n.text:00000000004070df\n.text:00000000004070e4\n.text:00000000004070e9\n.text:00000000004070ed\n.text:00000000004070f0\n.text:00000000004070f3\n.text:00000000004070f9\n.text:00000000004070fe\n.text:0000000000407103\n.text:0000000000407107\n.text:000000000040710a\n.text:000000000040710e\n.text:0000000000407112\n.text:0000000000407116\n.text:000000000040711d\n.text:0000000000407122\n.text:0000000000407124\n.text:000000000040712b\n.text:000000000040712f\n.text:0000000000407140\n.text:0000000000407144\n.text:0000000000407148\n.text:000000000040714f\n.text:0000000000407153\n.text:0000000000407156\n.text:000000000040715b\n.text:0000000000407160\n.text:0000000000407164\n.text:0000000000407169\n.text:000000000040716b\n.text:000000000040716d\n.text:0000000000407173\n.text:0000000000407175\n.text:0000000000407177\n.text:000000000040717a\n.text:000000000040717d\n.text:0000000000407182\n.text:0000000000407187\n.text:0000000000407190\n.text:0000000000407193\n.text:0000000000407197\n.text:000000000040719a\n.text:000000000040719d\n.text:000000000040719f\n.text:00000000004071a2\n.text:00000000004071a4\n.text:00000000004071a7\n.text:00000000004071a9\n.text:00000000004071ac\n.text:00000000004071ae\n.text:00000000004071b0\n.text:00000000004071b2\n.text:00000000004071b9\n.text:00000000004071bd\n.text:00000000004071c2\n.text:00000000004071c5\n.text:00000000004071c8\n.text:00000000004071cb\n.text:00000000004071d0\n.text:00000000004071d5\n.text:00000000004071dd\n.text:00000000004071e2\n.text:00000000004071e5\n.text:00000000004071e8\n.text:00000000004071ea\n.text:00000000004071ef\n.text:00000000004071f3\n.text:00000000004071f6\n.text:00000000004071f9\n.text:00000000004071fe\n.text:0000000000407203\n.text:0000000000407206\n.text:000000000040720b\n.text:0000000000407210\n.text:0000000000407216\n.text:0000000000407218\n.text:000000000040721c\n.text:000000000040721f\n.text:0000000000407221\n.text:0000000000407226\n.text:000000000040722e\n.text:0000000000407233\n.text:0000000000407238\n.text:000000000040723a\n.text:000000000040723d\n.text:0000000000407240\n.text:0000000000407245\n.text:000000000040724a\n.text:000000000040724c\n.text:0000000000407251\n.text:0000000000407254\n.text:0000000000407258\n.text:000000000040725c\n.text:0000000000407260\n.text:0000000000407263\n.text:0000000000407267\n.text:000000000040726a\n.text:0000000000407270\n.text:0000000000407273\n.text:0000000000407277\n.text:0000000000407279\n.text:000000000040727c\n.text:000000000040727e\n.text:0000000000407283\n.text:0000000000407289\n.text:000000000040728f\n.text:0000000000407294\n.text:0000000000407299\n.text:000000000040729b\n.text:000000000040729e\n.text:00000000004072a0\n.text:00000000004072a7\n.text:00000000004072a9\n.text:00000000004072ae\n.text:00000000004072b0\n.text:00000000004072b5\n.text:00000000004072b7\n.text:00000000004072bb\n.text:00000000004072c0\n.text:00000000004072c2\n.text:00000000004072c4\n.text:00000000004072cc\n.text:00000000004072cf\n.text:00000000004072d2\n.text:00000000004072d5\n.text:00000000004072da\n.text:00000000004072dd\n.text:00000000004072e5\n.text:00000000004072e9\n.text:00000000004072eb\n.text:00000000004072ef\n.text:00000000004072f2\n.text:00000000004072f4\n.text:00000000004072f7\n.text:00000000004072fa\n.text:00000000004072fd\n.text:0000000000407302\n.text:0000000000407305\n.text:0000000000407307\n.text:000000000040730c\n.text:000000000040730e\n.text:0000000000407312\n.text:0000000000407317\n.text:000000000040731c\n.text:000000000040731f\n.text:0000000000407324\n.text:0000000000407326\n.text:0000000000407328\n.text:000000000040732d\n.text:0000000000407330\n.text:0000000000407335\n.text:0000000000407337\n.text:000000000040733d\n.text:0000000000407343\n.text:0000000000407348\n.text:000000000040734b\n.text:0000000000407350\n.text:0000000000407353\n.text:0000000000407356\n.text:000000000040735a\n.text:000000000040735b\n.text:000000000040735d\n.text:000000000040735f\n.text:0000000000407361\n.text:0000000000407363\n.text:0000000000407364\n.text:0000000000407365\n.text:0000000000407368\n.text:000000000040736d\n.text:0000000000407373\n.text:0000000000407378\n.text:000000000040737d\n.text:0000000000407380\n.text:0000000000407383\n.text:0000000000407386\n.text:000000000040738b\n.text:0000000000407390\n.text:0000000000407395\n.text:000000000040739a\n.text:000000000040739e\n.text:00000000004073a3\n.text:00000000004073ab\n.text:00000000004073b1\n.text:00000000004073b6\n.text:00000000004073b9\n.text:00000000004073bb\n.text:00000000004073c0\n.text:00000000004073c6\n.text:00000000004073c8\n.text:00000000004073cb\n.text:00000000004073d0\n.text:00000000004073d5\n.text:00000000004073da\n.text:00000000004073df\n.text:00000000004073e3\n.text:00000000004073e8\n.text:00000000004073f0\n.text:00000000004073f6\n.text:00000000004073fb\n.text:0000000000407400\n.text:0000000000407406\n'
p1336
tp1337
sS'quotearg_style'
p1338
(S'\n__stdcall quotearg_style(char * arg)\n'
p1339
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1340
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00404660\n'
p1341
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p1342
S'.text:0000000000404740\n.text:0000000000404743\n.text:0000000000404745\n.text:0000000000404747\n.text:0000000000404749\n.text:000000000040474c\n'
p1343
tp1344
sS'endgrent'
p1345
(S'\n__stdcall endgrent()\n'
p1346
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid endgrent(void)\u000a\u000a{\u000a  (*(code *)PTR_endgrent_0060f018)();\u000a  return;\u000a}\u000a\u000a
p1347
S'JMP qword ptr [0x0060f018]\n'
p1348
S'ff 25 52 d8 20 00\n'
p1349
S'.plt:00000000004017c0\n'
p1350
tp1351
sS'hash_get_n_buckets'
p1352
(S'\n__stdcall hash_get_n_buckets(Hash_table * table)\n'
p1353
V\u000asize_t hash_get_n_buckets(Hash_table *table)\u000a\u000a{\u000a  return table->n_buckets;\u000a}\u000a\u000a
p1354
S'MOV RAX,qword ptr [RDI + 0x10]\nRET\n'
p1355
S'48 8b 47 10\nc3\n'
p1356
S'.text:0000000000407dd0\n.text:0000000000407dd4\n'
p1357
tp1358
sS'dup_cloexec'
p1359
(S'\n__stdcall dup_cloexec()\n'
p1360
V\u000aint dup_cloexec(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0x406,0);\u000a  return iVar1;\u000a}\u000a\u000a
p1361
S'MOV ESI,0x406\nXOR EDX,EDX\nXOR EAX,EAX\nJMP 0x00409300\n'
p1362
S'be 06 04 00 00\n31 d2\n31 c0\ne9 12 17 00 00\n'
p1363
S'.text:0000000000407be0\n.text:0000000000407be5\n.text:0000000000407be7\n.text:0000000000407be9\n'
p1364
tp1365
sS'emit_try_help'
p1366
(S'\n__stdcall emit_try_help()\n'
p1367
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p1368
S'PUSH RBX\nMOV RBX,qword ptr [0x0060f320]\nXOR EDI,EDI\nMOV ESI,0x40a815\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RDX,RAX\nMOV RCX,qword ptr [0x0060f358]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401c20\n'
p1369
S'53\n48 8b 1d b8 d3 20 00\n31 ff\nbe 15 a8 40 00\nba 05 00 00 00\ne8 57 f9 ff ff\n48 89 c2\n48 8b 0d d5 d3 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 8d fc ff ff\n'
p1370
S'.text:0000000000401f60\n.text:0000000000401f61\n.text:0000000000401f68\n.text:0000000000401f6a\n.text:0000000000401f6f\n.text:0000000000401f74\n.text:0000000000401f79\n.text:0000000000401f7c\n.text:0000000000401f83\n.text:0000000000401f88\n.text:0000000000401f8a\n.text:0000000000401f8d\n.text:0000000000401f8e\n'
p1371
tp1372
sS'strrchr'
p1373
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p1374
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_0060f0f0)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1375
S'JMP qword ptr [0x0060f0f0]\n'
p1376
S'ff 25 7a d7 20 00\n'
p1377
S'.plt:0000000000401970\n'
p1378
tp1379
sS'quotearg_alloc_mem'
p1380
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p1381
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p1382
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x60f360\nCMOVNZ R12,RCX\nCALL 0x00401800\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403690\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00405710\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00403690\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x004043ba\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1383
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 60 f3 60 00\n4c 0f 45 e1\ne8 e8 d4 ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 a1 13 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1384
S'.text:00000000004042e0\n.text:00000000004042e1\n.text:00000000004042e3\n.text:00000000004042e5\n.text:00000000004042e7\n.text:00000000004042e9\n.text:00000000004042ea\n.text:00000000004042ee\n.text:00000000004042f1\n.text:00000000004042f6\n.text:00000000004042f9\n.text:00000000004042fe\n.text:0000000000404301\n.text:0000000000404306\n.text:0000000000404309\n.text:000000000040430f\n.text:0000000000404313\n.text:0000000000404318\n.text:000000000040431d\n.text:000000000040431f\n.text:0000000000404323\n.text:0000000000404325\n.text:0000000000404328\n.text:000000000040432c\n.text:0000000000404331\n.text:0000000000404335\n.text:000000000040433a\n.text:000000000040433e\n.text:0000000000404340\n.text:0000000000404342\n.text:0000000000404345\n.text:0000000000404348\n.text:000000000040434b\n.text:0000000000404350\n.text:0000000000404355\n.text:0000000000404357\n.text:000000000040435c\n.text:0000000000404360\n.text:0000000000404363\n.text:0000000000404367\n.text:000000000040436a\n.text:000000000040436f\n.text:0000000000404372\n.text:0000000000404376\n.text:000000000040437a\n.text:000000000040437d\n.text:0000000000404380\n.text:0000000000404385\n.text:000000000040438a\n.text:000000000040438d\n.text:0000000000404392\n.text:0000000000404397\n.text:0000000000404399\n.text:000000000040439e\n.text:00000000004043a3\n.text:00000000004043a7\n.text:00000000004043aa\n.text:00000000004043ae\n.text:00000000004043b3\n.text:00000000004043b5\n.text:00000000004043b7\n.text:00000000004043ba\n.text:00000000004043bd\n.text:00000000004043c1\n.text:00000000004043c2\n.text:00000000004043c4\n.text:00000000004043c6\n.text:00000000004043c8\n.text:00000000004043ca\n.text:00000000004043cb\n'
p1385
tp1386
sS'bkm_scale'
p1387
(S'\n__stdcall bkm_scale(ulong * x)\n'
p1388
V\u000astrtol_error bkm_scale(ulong *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p1389
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p1390
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p1391
S'.text:0000000000405ad0\n.text:0000000000405ad3\n.text:0000000000405ada\n.text:0000000000405ae1\n.text:0000000000405ae3\n.text:0000000000405ae6\n.text:0000000000405ae9\n.text:0000000000405aed\n.text:0000000000405af0\n.text:0000000000405af4\n.text:0000000000405af6\n.text:0000000000405af9\n.text:0000000000405afc\n'
p1392
tp1393
sS'quotearg_style_mem'
p1394
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p1395
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1396
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00404700\n'
p1397
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p1398
S'.text:0000000000404760\n.text:0000000000404763\n.text:0000000000404766\n.text:0000000000404768\n.text:000000000040476a\n.text:000000000040476c\n.text:000000000040476f\n.text:0000000000404772\n'
p1399
tp1400
sS'xalloc_die'
p1401
(S'\n__stdcall xalloc_die()\n'
p1402
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x40a775,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1403
S'PUSH RBX\nMOV EBX,dword ptr [0x0060f280]\nXOR EDI,EDI\nMOV ESI,0x40b70f\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x40a775\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x00401b70\nCALL 0x004017f0\n'
p1404
S'53\n8b 1d a9 9a 20 00\n31 ff\nbe 0f b7 40 00\nba 05 00 00 00\ne8 e8 c0 ff ff\n48 89 c1\n31 f6\nba 75 a7 40 00\n31 c0\n89 df\ne8 75 c3 ff ff\ne8 f0 bf ff ff\n'
p1405
S'.text:00000000004057d0\n.text:00000000004057d1\n.text:00000000004057d7\n.text:00000000004057d9\n.text:00000000004057de\n.text:00000000004057e3\n.text:00000000004057e8\n.text:00000000004057eb\n.text:00000000004057ed\n.text:00000000004057f2\n.text:00000000004057f4\n.text:00000000004057f6\n.text:00000000004057fb\n'
p1406
tp1407
sS'fts_set_stat_required'
p1408
(S'\n__stdcall fts_set_stat_required(FTSENT * p)\n'
p1409
V\u000avoid fts_set_stat_required(FTSENT *p)\u000a\u000a{\u000a  byte in_SIL;\u000a  \u000a  if (p->fts_info == 0xb) {\u000a    p->fts_statp[0].st_size = (ulong)in_SIL + 1;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1410
S'MOVZX EAX,word ptr [RDI + 0x70]\nCMP EAX,0xb\nJNZ 0x00406058\nMOVZX EAX,SIL\nINC RAX\nMOV qword ptr [0xa8 + RDI],RAX\nRET\nPUSH RAX\nCALL 0x004017f0\n'
p1411
S'0f b7 47 70\n83 f8 0b\n75 0f\n40 0f b6 c6\n48 ff c0\n48 89 87 a8 00 00 00\nc3\n50\ne8 92 b7 ff ff\n'
p1412
S'.text:0000000000406040\n.text:0000000000406044\n.text:0000000000406047\n.text:0000000000406049\n.text:000000000040604d\n.text:0000000000406050\n.text:0000000000406057\n.text:0000000000406058\n.text:0000000000406059\n'
p1413
tp1414
sS'open_safer'
p1415
(S'\n__stdcall open_safer(char * file)\n'
p1416
V\u000a/* WARNING: Removing unreachable block (ram,0x00407d9e) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff58 : 0x00407dac */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint open_safer(char *file,...)\u000a\u000a{\u000a  int iVar1;\u000a  ulong uVar2;\u000a  uint __oflag;\u000a  va_list ap;\u000a  uint local_a8;\u000a  \u000a  uVar2 = 0;\u000a  if ((__oflag & 0x40) != 0) {\u000a    uVar2 = (ulong)local_a8;\u000a  }\u000a  open(file,__oflag,uVar2);\u000a  iVar1 = fd_safer();\u000a  return iVar1;\u000a}\u000a\u000a
p1417
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x00407d42\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nXOR EDX,EDX\nTEST SIL,0x40\nJZ 0x00407dae\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RCX,dword ptr [RSP]\nCMP RCX,0x28\nJA 0x00407d9e\nMOV RAX,RCX\nADD RAX,qword ptr [RSP + 0x10]\nLEA ECX,[RCX + 0x8]\nMOV dword ptr [RSP],ECX\nJMP 0x00407dac\nMOV RAX,qword ptr [RSP + 0x8]\nLEA RCX,[RAX + 0x8]\nMOV qword ptr [RSP + 0x8],RCX\nMOV EDX,dword ptr [RAX]\nXOR EAX,EAX\nCALL 0x00401b80\nMOV EDI,EAX\nCALL 0x00409230\nADD RSP,0xd8\nRET\n'
p1418
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n31 d2\n40 f6 c6 40\n74 50\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 0c 24\n48 83 f9 28\n77 10\n48 89 c8\n48 03 44 24 10\n8d 49 08\n89 0c 24\neb 0e\n48 8b 44 24 08\n48 8d 48 08\n48 89 4c 24 08\n8b 10\n31 c0\ne8 cb 9d ff ff\n89 c7\ne8 74 14 00 00\n48 81 c4 d8 00 00 00\nc3\n'
p1419
S'.text:0000000000407d00\n.text:0000000000407d07\n.text:0000000000407d09\n.text:0000000000407d0b\n.text:0000000000407d10\n.text:0000000000407d15\n.text:0000000000407d1a\n.text:0000000000407d22\n.text:0000000000407d2a\n.text:0000000000407d32\n.text:0000000000407d3a\n.text:0000000000407d42\n.text:0000000000407d47\n.text:0000000000407d4c\n.text:0000000000407d51\n.text:0000000000407d56\n.text:0000000000407d58\n.text:0000000000407d5c\n.text:0000000000407d5e\n.text:0000000000407d63\n.text:0000000000407d68\n.text:0000000000407d70\n.text:0000000000407d75\n.text:0000000000407d7d\n.text:0000000000407d84\n.text:0000000000407d88\n.text:0000000000407d8c\n.text:0000000000407d8e\n.text:0000000000407d91\n.text:0000000000407d96\n.text:0000000000407d99\n.text:0000000000407d9c\n.text:0000000000407d9e\n.text:0000000000407da3\n.text:0000000000407da7\n.text:0000000000407dac\n.text:0000000000407dae\n.text:0000000000407db0\n.text:0000000000407db5\n.text:0000000000407db7\n.text:0000000000407dbc\n.text:0000000000407dc3\n'
p1420
tp1421
sS'quotearg_n_custom'
p1422
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p1423
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1424
S'MOV R8,-0x1\nJMP 0x00404880\n'
p1425
S'49 c7 c0 ff ff ff ff\neb 07\n'
p1426
S'.text:0000000000404870\n.text:0000000000404877\n'
p1427
tp1428
sS'fts_sort'
p1429
(S'\n__stdcall fts_sort(FTS * sp, FTSENT * head, size_t nitems)\n'
p1430
V\u000aFTSENT * fts_sort(FTS *sp,FTSENT *head,size_t nitems)\u000a\u000a{\u000a  ulong uVar1;\u000a  int (*__compar)(_ftsent **,_ftsent **);\u000a  _ftsent **pp_Var2;\u000a  FTSENT *pFVar3;\u000a  _ftsent *p_Var4;\u000a  long lVar5;\u000a  _ftsent *p_Var6;\u000a  \u000a  __compar = sp->fts_compar;\u000a  if (sp->fts_nitems < nitems) {\u000a    uVar1 = nitems + 0x28;\u000a    sp->fts_nitems = uVar1;\u000a    if (uVar1 >> 0x3d == 0) {\u000a      pp_Var2 = (_ftsent **)realloc(sp->fts_array,uVar1 * 8);\u000a      if (pp_Var2 != (_ftsent **)0x0) {\u000a        sp->fts_array = pp_Var2;\u000a        goto LAB_00406216;\u000a      }\u000a    }\u000a    free(sp->fts_array);\u000a    sp->fts_array = (_ftsent **)0x0;\u000a    sp->fts_nitems = 0;\u000a  }\u000a  else {\u000aLAB_00406216:\u000a    if (head != (FTSENT *)0x0) {\u000a      pFVar3 = (FTSENT *)sp->fts_array;\u000a      do {\u000a        *(FTSENT **)pFVar3 = head;\u000a        pFVar3 = (FTSENT *)((FTSENT **)pFVar3 + 1);\u000a        head = (FTSENT *)head->fts_link;\u000a      } while (head != (FTSENT *)0x0);\u000a    }\u000a    qsort(sp->fts_array,nitems,8,(__compar_fn_t)__compar);\u000a    p_Var4 = (_ftsent *)sp->fts_array;\u000a    head = (FTSENT *)p_Var4->fts_cycle;\u000a    p_Var6 = (_ftsent *)head;\u000a    if (nitems != 1) {\u000a      lVar5 = 1 - nitems;\u000a      p_Var6 = (_ftsent *)head;\u000a      do {\u000a        p_Var4 = (_ftsent *)((_ftsent **)p_Var4 + 1);\u000a        ((FTSENT *)p_Var6)->fts_link = *(_ftsent **)p_Var4;\u000a        p_Var6 = *(_ftsent **)p_Var4;\u000a        lVar5 = lVar5 + 1;\u000a      } while (lVar5 != 0);\u000a    }\u000a    p_Var6->fts_link = (_ftsent *)0x0;\u000a  }\u000a  return head;\u000a}\u000a\u000a
p1431
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDX\nMOV RBX,RSI\nMOV R15,RDI\nMOV R12,qword ptr [R15 + 0x40]\nCMP qword ptr [R15 + 0x38],R14\nJNC 0x00406216\nLEA RSI,[R14 + 0x28]\nMOV qword ptr [R15 + 0x38],RSI\nMOV RAX,RSI\nSHR RAX,0x3d\nJNZ 0x0040628d\nMOV RDI,qword ptr [R15 + 0x10]\nSHL RSI,0x3\nCALL 0x00401b20\nTEST RAX,RAX\nJZ 0x0040628d\nMOV qword ptr [R15 + 0x10],RAX\nTEST RBX,RBX\nJZ 0x00406230\nMOV RAX,qword ptr [R15 + 0x10]\nNOP\nMOV qword ptr [RAX],RBX\nADD RAX,0x8\nMOV RBX,qword ptr [RBX + 0x10]\nTEST RBX,RBX\nJNZ 0x00406220\nMOV RDI,qword ptr [R15 + 0x10]\nMOV EDX,0x8\nMOV RSI,R14\nMOV RCX,R12\nCALL 0x00401860\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RBX,qword ptr [RAX]\nCMP R14,0x1\nMOV RDX,RBX\nJZ 0x00406283\nMOV ECX,0x1\nSUB RCX,R14\nADD RAX,0x8\nMOV RDX,RBX\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RSI,qword ptr [RAX]\nMOV qword ptr [RDX + 0x10],RSI\nMOV RDX,qword ptr [RAX]\nADD RAX,0x8\nINC RCX\nJNZ 0x00406270\nMOV qword ptr [RDX + 0x10],0x0\nJMP 0x004062a6\nMOV RDI,qword ptr [R15 + 0x10]\nCALL 0x004017e0\nMOV qword ptr [R15 + 0x10],0x0\nMOV qword ptr [R15 + 0x38],0x0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1432
S'41 57\n41 56\n41 54\n53\n50\n49 89 d6\n48 89 f3\n49 89 ff\n4d 8b 67 40\n4d 39 77 38\n73 2b\n49 8d 76 28\n49 89 77 38\n48 89 f0\n48 c1 e8 3d\n0f 85 8d 00 00 00\n49 8b 7f 10\n48 c1 e6 03\ne8 13 b9 ff ff\n48 85 c0\n74 7b\n49 89 47 10\n48 85 db\n74 15\n49 8b 47 10\n90\n48 89 18\n48 83 c0 08\n48 8b 5b 10\n48 85 db\n75 f0\n49 8b 7f 10\nba 08 00 00 00\n4c 89 f6\n4c 89 e1\ne8 1c b6 ff ff\n49 8b 47 10\n48 8b 18\n49 83 fe 01\n48 89 da\n74 2f\nb9 01 00 00 00\n4c 29 f1\n48 83 c0 08\n48 89 da\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 8b 30\n48 89 72 10\n48 8b 10\n48 83 c0 08\n48 ff c1\n75 ed\n48 c7 42 10 00 00 00 00\neb 19\n49 8b 7f 10\ne8 4a b5 ff ff\n49 c7 47 10 00 00 00 00\n49 c7 47 38 00 00 00 00\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1433
S'.text:00000000004061d0\n.text:00000000004061d2\n.text:00000000004061d4\n.text:00000000004061d6\n.text:00000000004061d7\n.text:00000000004061d8\n.text:00000000004061db\n.text:00000000004061de\n.text:00000000004061e1\n.text:00000000004061e5\n.text:00000000004061e9\n.text:00000000004061eb\n.text:00000000004061ef\n.text:00000000004061f3\n.text:00000000004061f6\n.text:00000000004061fa\n.text:0000000000406200\n.text:0000000000406204\n.text:0000000000406208\n.text:000000000040620d\n.text:0000000000406210\n.text:0000000000406212\n.text:0000000000406216\n.text:0000000000406219\n.text:000000000040621b\n.text:000000000040621f\n.text:0000000000406220\n.text:0000000000406223\n.text:0000000000406227\n.text:000000000040622b\n.text:000000000040622e\n.text:0000000000406230\n.text:0000000000406234\n.text:0000000000406239\n.text:000000000040623c\n.text:000000000040623f\n.text:0000000000406244\n.text:0000000000406248\n.text:000000000040624b\n.text:000000000040624f\n.text:0000000000406252\n.text:0000000000406254\n.text:0000000000406259\n.text:000000000040625c\n.text:0000000000406260\n.text:0000000000406263\n.text:0000000000406270\n.text:0000000000406273\n.text:0000000000406277\n.text:000000000040627a\n.text:000000000040627e\n.text:0000000000406281\n.text:0000000000406283\n.text:000000000040628b\n.text:000000000040628d\n.text:0000000000406291\n.text:0000000000406296\n.text:000000000040629e\n.text:00000000004062a6\n.text:00000000004062a9\n.text:00000000004062ad\n.text:00000000004062ae\n.text:00000000004062b0\n.text:00000000004062b2\n.text:00000000004062b4\n'
p1434
tp1435
sS'fd_safer'
p1436
(S'\n__stdcall fd_safer()\n'
p1437
V\u000aint fd_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  uint uVar2;\u000a  int *piVar3;\u000a  uint __fd;\u000a  \u000a  if (__fd < 3) {\u000a    uVar2 = dup_safer();\u000a    piVar3 = __errno_location();\u000a    iVar1 = *piVar3;\u000a    close(__fd);\u000a    *piVar3 = iVar1;\u000a    __fd = uVar2;\u000a  }\u000a  return (int)__fd;\u000a}\u000a\u000a
p1438
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDI\nCMP EBX,0x2\nJA 0x00409264\nMOV EDI,EBX\nCALL 0x00409220\nMOV R14D,EAX\nCALL 0x00401800\nMOV RBP,RAX\nMOV R15D,dword ptr [RBP]\nMOV EDI,EBX\nCALL 0x004019c0\nMOV dword ptr [RBP],R15D\nMOV EAX,R14D\nJMP 0x00409266\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1439
S'55\n41 57\n41 56\n53\n50\n89 fb\n83 fb 02\n77 26\n89 df\ne8 db ff ff ff\n41 89 c6\ne8 b3 85 ff ff\n48 89 c5\n44 8b 7d 00\n89 df\ne8 65 87 ff ff\n44 89 7d 00\n44 89 f0\neb 02\n89 d8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1440
S'.text:0000000000409230\n.text:0000000000409231\n.text:0000000000409233\n.text:0000000000409235\n.text:0000000000409236\n.text:0000000000409237\n.text:0000000000409239\n.text:000000000040923c\n.text:000000000040923e\n.text:0000000000409240\n.text:0000000000409245\n.text:0000000000409248\n.text:000000000040924d\n.text:0000000000409250\n.text:0000000000409254\n.text:0000000000409256\n.text:000000000040925b\n.text:000000000040925f\n.text:0000000000409262\n.text:0000000000409264\n.text:0000000000409266\n.text:000000000040926a\n.text:000000000040926b\n.text:000000000040926d\n.text:000000000040926f\n.text:0000000000409270\n'
p1441
tp1442
sS'fts_alloc'
p1443
(S'\n__stdcall fts_alloc(FTS * sp, char * name, size_t namelen)\n'
p1444
V\u000aFTSENT * fts_alloc(FTS *sp,char *name,size_t namelen)\u000a\u000a{\u000a  FTSENT *pFVar1;\u000a  \u000a  pFVar1 = (FTSENT *)malloc(namelen + 0x118 & 0xfffffffffffffff0);\u000a  if (pFVar1 == (FTSENT *)0x0) {\u000a    pFVar1 = (FTSENT *)0x0;\u000a  }\u000a  else {\u000a    memcpy(pFVar1 + 1,name,namelen);\u000a    *(undefined *)((long)&pFVar1[1].fts_cycle + namelen) = 0;\u000a    pFVar1->fts_namelen = namelen;\u000a    pFVar1->fts_fts = sp;\u000a    pFVar1->fts_path = sp->fts_path;\u000a    pFVar1->fts_errno = 0;\u000a    pFVar1->fts_dirp = (DIR *)0x0;\u000a    pFVar1->fts_flags = 0;\u000a    pFVar1->fts_instr = 3;\u000a    *(undefined4 *)&pFVar1->fts_number = 0;\u000a    *(undefined4 *)((long)&pFVar1->fts_number + 4) = 0;\u000a    *(undefined4 *)&pFVar1->fts_pointer = 0;\u000a    *(undefined4 *)((long)&pFVar1->fts_pointer + 4) = 0;\u000a  }\u000a  return pFVar1;\u000a}\u000a\u000a
p1445
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15,RDX\nMOV R12,RSI\nMOV R14,RDI\nLEA RDI,[0x118 + R15]\nAND RDI,-0x10\nCALL 0x00401aa0\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040602b\nMOV RDI,RBX\nADD RDI,0x108\nMOV RSI,R12\nMOV RDX,R15\nCALL 0x00401a50\nMOV byte ptr [0x108 + RBX + R15*0x1],0x0\nMOV qword ptr [RBX + 0x60],R15\nMOV qword ptr [RBX + 0x50],R14\nMOV RAX,qword ptr [R14 + 0x20]\nMOV qword ptr [RBX + 0x38],RAX\nMOV dword ptr [RBX + 0x40],0x0\nMOV qword ptr [RBX + 0x18],0x0\nMOV word ptr [RBX + 0x72],0x0\nMOV word ptr [RBX + 0x74],0x3\nXORPS XMM0,XMM0\nMOVUPS xmmword ptr [RBX + 0x20],XMM0\nJMP 0x0040602d\nXOR EBX,EBX\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\n'
p1446
S'41 57\n41 56\n41 54\n53\n50\n49 89 d7\n49 89 f4\n49 89 fe\n49 8d bf 18 01 00 00\n48 83 e7 f0\ne8 cf ba ff ff\n48 89 c3\n48 85 db\n74 52\n48 89 df\n48 81 c7 08 01 00 00\n4c 89 e6\n4c 89 fa\ne8 62 ba ff ff\n42 c6 84 3b 08 01 00 00 00\n4c 89 7b 60\n4c 89 73 50\n49 8b 46 20\n48 89 43 38\nc7 43 40 00 00 00 00\n48 c7 43 18 00 00 00 00\n66 c7 43 72 00 00\n66 c7 43 74 03 00\n0f 57 c0\n0f 11 43 20\neb 02\n31 db\n48 89 d8\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\n'
p1447
S'.text:0000000000405fb0\n.text:0000000000405fb2\n.text:0000000000405fb4\n.text:0000000000405fb6\n.text:0000000000405fb7\n.text:0000000000405fb8\n.text:0000000000405fbb\n.text:0000000000405fbe\n.text:0000000000405fc1\n.text:0000000000405fc8\n.text:0000000000405fcc\n.text:0000000000405fd1\n.text:0000000000405fd4\n.text:0000000000405fd7\n.text:0000000000405fd9\n.text:0000000000405fdc\n.text:0000000000405fe3\n.text:0000000000405fe6\n.text:0000000000405fe9\n.text:0000000000405fee\n.text:0000000000405ff7\n.text:0000000000405ffb\n.text:0000000000405fff\n.text:0000000000406003\n.text:0000000000406007\n.text:000000000040600e\n.text:0000000000406016\n.text:000000000040601c\n.text:0000000000406022\n.text:0000000000406025\n.text:0000000000406029\n.text:000000000040602b\n.text:000000000040602d\n.text:0000000000406030\n.text:0000000000406034\n.text:0000000000406035\n.text:0000000000406037\n.text:0000000000406039\n.text:000000000040603b\n'
p1448
tp1449
sS'__freading'
p1450
(S'\n__stdcall __freading()\n'
p1451
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_0060f1b8)();\u000a  return;\u000a}\u000a\u000a
p1452
S'JMP qword ptr [0x0060f1b8]\n'
p1453
S'ff 25 b2 d6 20 00\n'
p1454
S'.plt:0000000000401b00\n'
p1455
tp1456
sS'fts_read'
p1457
(S'\n__stdcall fts_read(FTS * sp)\n'
p1458
V\u000aFTSENT * fts_read(FTS *sp)\u000a\u000a{\u000a  byte *pbVar1;\u000a  uint uVar2;\u000a  _ftsent *p_Var3;\u000a  char *pcVar4;\u000a  size_t sVar5;\u000a  long lVar6;\u000a  _Bool _Var7;\u000a  unsigned_short uVar8;\u000a  int iVar9;\u000a  FTSENT *ent;\u000a  FTSENT *head;\u000a  int *piVar10;\u000a  size_t sVar11;\u000a  \u000a  ent = (FTSENT *)sp->fts_cur;\u000a  if (ent == (FTSENT *)0x0) {\u000a    return (FTSENT *)0x0;\u000a  }\u000a  if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a    return (FTSENT *)0x0;\u000a  }\u000a  uVar8 = ent->fts_instr;\u000a  ent->fts_instr = 3;\u000a  if (uVar8 == 1) {\u000a    uVar8 = fts_stat(sp,ent);\u000a    ent->fts_info = uVar8;\u000a    return ent;\u000a  }\u000a  if ((uVar8 == 2) && ((ent->fts_info & 0xfffe) == 0xc)) {\u000a    uVar8 = fts_stat(sp,ent);\u000a    ent->fts_info = uVar8;\u000a    if ((uVar8 == 1) && ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a      iVar9 = diropen(sp,".");\u000a      ent->fts_symfd = iVar9;\u000a      if (iVar9 < 0) {\u000a        piVar10 = __errno_location();\u000a        ent->fts_errno = *piVar10;\u000a        ent->fts_info = 7;\u000a      }\u000a      else {\u000a        *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 2;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    head = ent;\u000a    if (ent->fts_info == 1) {\u000a      if ((uVar8 == 4) ||\u000a         ((uVar2 = sp->fts_options, (uVar2 & 0x40) != 0 && (ent->fts_statp[0].st_dev != sp->fts_dev)\u000a          ))) {\u000a        if ((*(byte *)&ent->fts_flags & 2) != 0) {\u000a          close(ent->fts_symfd);\u000a        }\u000a        if ((FTSENT *)sp->fts_child != (FTSENT *)0x0) {\u000a          fts_lfree((FTSENT *)sp->fts_child);\u000a          sp->fts_child = (_ftsent *)0x0;\u000a        }\u000a        ent->fts_info = 6;\u000a        goto LAB_00406728;\u000a      }\u000a      head = (FTSENT *)sp->fts_child;\u000a      if (((uVar2 & 0x2000) == 0) || (head == (FTSENT *)0x0)) {\u000a        if (head == (FTSENT *)0x0) goto LAB_00406800;\u000a        iVar9 = fts_safe_changedir(sp,ent,(char *)0xffffffff);\u000a        if (iVar9 != 0) {\u000a          piVar10 = __errno_location();\u000a          ent->fts_errno = *piVar10;\u000a          *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 1;\u000a          p_Var3 = sp->fts_child;\u000a          while (p_Var3 != (_ftsent *)0x0) {\u000a            p_Var3->fts_accpath = p_Var3->fts_parent->fts_accpath;\u000a            p_Var3 = p_Var3->fts_link;\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        sp->fts_options = uVar2 & 0xffffdfff;\u000a        fts_lfree(head);\u000a        sp->fts_child = (_ftsent *)0x0;\u000aLAB_00406800:\u000a        head = fts_build(sp);\u000a        *(FTSENT **)&sp->fts_child = head;\u000a        if (head == (FTSENT *)0x0) {\u000a          if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a            return (FTSENT *)0x0;\u000a          }\u000a          if ((ent->fts_errno != 0) && (ent->fts_info != 4)) {\u000a            ent->fts_info = 7;\u000a          }\u000aLAB_00406728:\u000a          leave_dir(sp,ent);\u000a          return ent;\u000a        }\u000a      }\u000a      ent = (FTSENT *)sp->fts_child;\u000a      sp->fts_child = (_ftsent *)0x0;\u000a    }\u000a    else {\u000a      do {\u000a        ent = (FTSENT *)head->fts_link;\u000a        if (ent == (FTSENT *)0x0) {\u000a          p_Var3 = head->fts_parent;\u000a          if (p_Var3->fts_dirp != (DIR *)0x0) {\u000a            sp->fts_cur = p_Var3;\u000a            sp->fts_path[p_Var3->fts_pathlen] = 0;\u000a            ent = fts_build(sp);\u000a            if (ent != (FTSENT *)0x0) {\u000a              free(head);\u000a              goto LAB_00406984;\u000a            }\u000a            if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a              return (FTSENT *)0x0;\u000a            }\u000a          }\u000a          ent = (FTSENT *)head->fts_parent;\u000a          *(FTSENT **)&sp->fts_cur = ent;\u000a          free(head);\u000a          if (ent->fts_level == -1) {\u000a            free(ent);\u000a            piVar10 = __errno_location();\u000a            *piVar10 = 0;\u000a            sp->fts_cur = (_ftsent *)0x0;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          if (ent->fts_info != 0xb) {\u000a            sp->fts_path[ent->fts_pathlen] = 0;\u000a            if (ent->fts_level == 0) {\u000a              iVar9 = restore_initial_cwd(sp);\u000a            }\u000a            else {\u000a              if ((ent->fts_flags & 2) != 0) {\u000a                if ((sp->fts_options & 4U) == 0) {\u000a                  if ((sp->fts_options & 0x200U) == 0) {\u000a                    iVar9 = fchdir(ent->fts_symfd);\u000a                    if (iVar9 != 0) {\u000a                      piVar10 = __errno_location();\u000a                      ent->fts_errno = *piVar10;\u000a                      pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a                      *pbVar1 = *pbVar1 | 0x40;\u000a                    }\u000a                  }\u000a                  else {\u000a                    cwd_advance_fd(sp);\u000a                  }\u000a                }\u000a                close(ent->fts_symfd);\u000a                goto LAB_00406ab7;\u000a              }\u000a              if ((ent->fts_flags & 1) != 0) goto LAB_00406ab7;\u000a              iVar9 = fts_safe_changedir(sp,(FTSENT *)ent->fts_parent,(char *)0xffffffff);\u000a            }\u000a            if (iVar9 != 0) {\u000a              piVar10 = __errno_location();\u000a              ent->fts_errno = *piVar10;\u000a              pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a              *pbVar1 = *pbVar1 | 0x40;\u000a            }\u000aLAB_00406ab7:\u000a            if ((ent->fts_info != 2) &&\u000a               (ent->fts_info = (ushort)(ent->fts_errno != 0) | 6, ent->fts_errno == 0)) {\u000a              leave_dir(sp,ent);\u000a            }\u000a            if ((*(byte *)((long)&sp->fts_options + 1) & 0x40) != 0) {\u000a              return (FTSENT *)0x0;\u000a            }\u000a            return ent;\u000a          }\u000a          goto LAB_00406af5;\u000a        }\u000a        *(FTSENT **)&sp->fts_cur = ent;\u000a        free(head);\u000a        if (ent->fts_level == 0) {\u000a          iVar9 = restore_initial_cwd(sp);\u000a          if (iVar9 != 0) {\u000a            pbVar1 = (byte *)((long)&sp->fts_options + 1);\u000a            *pbVar1 = *pbVar1 | 0x40;\u000a            return (FTSENT *)0x0;\u000a          }\u000a          free_dir(sp);\u000a          fts_load(sp,ent);\u000a          setup_dir(sp);\u000a          goto LAB_004069c0;\u000a        }\u000a        head = ent;\u000a      } while (ent->fts_instr == 4);\u000a      if (ent->fts_instr == 2) {\u000a        uVar8 = fts_stat(sp,ent);\u000a        ent->fts_info = uVar8;\u000a        if ((uVar8 == 1) && ((*(byte *)&sp->fts_options & 4) == 0)) {\u000a          iVar9 = diropen(sp,".");\u000a          ent->fts_symfd = iVar9;\u000a          if (iVar9 < 0) {\u000a            piVar10 = __errno_location();\u000a            ent->fts_errno = *piVar10;\u000a            ent->fts_info = 7;\u000a          }\u000a          else {\u000a            *(byte *)&ent->fts_flags = *(byte *)&ent->fts_flags | 2;\u000a          }\u000a        }\u000a        ent->fts_instr = 3;\u000a      }\u000a    }\u000aLAB_00406984:\u000a    pcVar4 = sp->fts_path;\u000a    sVar5 = ent->fts_parent->fts_pathlen;\u000a    sVar11 = sVar5 - 1;\u000a    if (ent->fts_parent->fts_path[sVar5 - 1] != '/') {\u000a      sVar11 = sVar5;\u000a    }\u000a    pcVar4[sVar11] = '/';\u000a    memmove(pcVar4 + sVar11 + 1,ent + 1,ent->fts_namelen + 1);\u000a  }\u000aLAB_004069c0:\u000a  *(FTSENT **)&sp->fts_cur = ent;\u000a  uVar8 = ent->fts_info;\u000a  if (uVar8 == 0xb) {\u000a    lVar6 = ent->fts_statp[0].st_size;\u000a    if (lVar6 != 1) {\u000a      if (lVar6 != 2) {\u000aLAB_00406af5:\u000a                    /* WARNING: Subroutine does not return */\u000a        abort();\u000a      }\u000a      head = (FTSENT *)ent->fts_parent;\u000a      if ((((ent->fts_level < 1) || (head->fts_n_dirs_remaining != 0)) ||\u000a          ((sp->fts_options & 0x18U) != 0x18)) ||\u000a         (_Var7 = link_count_optimize_ok(head), _Var7 == false)) {\u000a        uVar8 = fts_stat(sp,ent);\u000a        ent->fts_info = uVar8;\u000a        if ((ent->fts_statp[0].st_mode & 0xf000) != 0x4000) goto LAB_00406a5c;\u000a        if ((ent->fts_level != 0) && (head->fts_n_dirs_remaining != 0)) {\u000a          head->fts_n_dirs_remaining = head->fts_n_dirs_remaining - 1;\u000a        }\u000a      }\u000a    }\u000a    uVar8 = ent->fts_info;\u000a  }\u000aLAB_00406a5c:\u000a  if (uVar8 != 1) {\u000a    return ent;\u000a  }\u000a  if (ent->fts_level == 0) {\u000a    sp->fts_dev = ent->fts_statp[0].st_dev;\u000a  }\u000a  _Var7 = enter_dir(sp,ent);\u000a  if (_Var7 == false) {\u000a    piVar10 = __errno_location();\u000a    *piVar10 = 0xc;\u000a    return (FTSENT *)0x0;\u000a  }\u000a  return ent;\u000a}\u000a\u000a
p1459
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nMOV R12,qword ptr [R14]\nTEST R12,R12\nJZ 0x00406a8f\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x00406a8f\nMOVZX EAX,word ptr [R12 + 0x74]\nMOV word ptr [R12 + 0x74],0x3\nCMP EAX,0x1\nJNZ 0x0040659d\nXOR EDX,EDX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00406060\nMOV word ptr [R12 + 0x70],AX\nJMP 0x00406a92\nMOVZX ECX,word ptr [R12 + 0x70]\nMOVZX EAX,AX\nCMP EAX,0x2\nJNZ 0x0040660d\nMOV EDX,ECX\nAND EDX,0xfffe\nMOVZX EDX,DX\nCMP EDX,0xc\nJNZ 0x0040660d\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00406060\nMOV word ptr [R12 + 0x70],AX\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x004069c0\nTEST byte ptr [R14 + 0x48],0x4\nJNZ 0x004069c0\nMOV ESI,0x40b9c8\nMOV RDI,R14\nCALL 0x00406330\nMOV dword ptr [R12 + 0x44],EAX\nTEST EAX,EAX\nJS 0x00406797\nOR byte ptr [R12 + 0x72],0x2\nJMP 0x004069c0\nMOVZX ECX,CX\nCMP ECX,0x1\nJNZ 0x00406670\nCMP EAX,0x4\nJZ 0x004066f8\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x40\nJZ 0x00406635\nMOV RCX,qword ptr [R12 + 0x78]\nCMP RCX,qword ptr [R14 + 0x18]\nJNZ 0x004066f8\nMOV RDI,qword ptr [R14 + 0x8]\nTEST AH,0x20\nJZ 0x004067b0\nTEST RDI,RDI\nJZ 0x004067b0\nAND EAX,0xffffdfff\nMOV dword ptr [R14 + 0x48],EAX\nCALL 0x00406390\nMOV qword ptr [R14 + 0x8],0x0\nJMP 0x00406800\nMOV RBX,qword ptr [R12 + 0x10]\nTEST RBX,RBX\nJZ 0x00406738\nMOV qword ptr [R14],RBX\nMOV RDI,R12\nCALL 0x004017e0\nCMP qword ptr [RBX + 0x58],0x0\nJZ 0x0040677d\nMOVZX EAX,word ptr [RBX + 0x74]\nCMP EAX,0x4\nMOV R12,RBX\nJZ 0x00406670\nMOVZX EAX,AX\nCMP EAX,0x2\nJNZ 0x00406984\nMOV EDX,0x1\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00406060\nMOV word ptr [RBX + 0x70],AX\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x0040697e\nTEST byte ptr [R14 + 0x48],0x4\nJNZ 0x0040697e\nMOV ESI,0x40b9c8\nMOV RDI,R14\nCALL 0x00406330\nMOV dword ptr [RBX + 0x44],EAX\nTEST EAX,EAX\nJS 0x0040696e\nOR byte ptr [RBX + 0x72],0x2\nJMP 0x0040697e\nTEST byte ptr [R12 + 0x72],0x2\nJZ 0x0040670a\nMOV EDI,dword ptr [R12 + 0x44]\nCALL 0x004019c0\nMOV RDI,qword ptr [R14 + 0x8]\nTEST RDI,RDI\nJZ 0x00406720\nCALL 0x00406390\nMOV qword ptr [R14 + 0x8],0x0\nMOV word ptr [R12 + 0x70],0x6\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00406b00\nJMP 0x00406a92\nMOV RAX,qword ptr [R12 + 0x8]\nCMP qword ptr [RAX + 0x18],0x0\nJZ 0x00406885\nMOV qword ptr [R14],RAX\nMOV RCX,qword ptr [R14 + 0x20]\nMOV RAX,qword ptr [RAX + 0x48]\nMOV byte ptr [RCX + RAX*0x1],0x0\nMOV ESI,0x3\nMOV RDI,R14\nCALL 0x00406d20\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x0040687a\nMOV RDI,R12\nCALL 0x004017e0\nJMP 0x00406984\nMOV RDI,R14\nCALL 0x00407410\nTEST EAX,EAX\nJZ 0x00406827\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x00406a8f\nCALL 0x00401800\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R12 + 0x40],EAX\nMOV word ptr [R12 + 0x70],0x7\nJMP 0x004069c0\nTEST RDI,RDI\nJZ 0x00406800\nMOV RCX,qword ptr [R12 + 0x30]\nMOV EDX,0xffffffff\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00406b90\nTEST EAX,EAX\nJZ 0x00406816\nCALL 0x00401800\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R12 + 0x40],EAX\nOR byte ptr [R12 + 0x72],0x1\nMOV RAX,qword ptr [R14 + 0x8]\nTEST RAX,RAX\nJZ 0x00406816\nMOV RCX,qword ptr [RAX + 0x8]\nMOV RCX,qword ptr [RCX + 0x30]\nMOV qword ptr [RAX + 0x30],RCX\nMOV RAX,qword ptr [RAX + 0x10]\nTEST RAX,RAX\nJNZ 0x004067e9\nJMP 0x00406816\nMOV ESI,0x3\nMOV RDI,R14\nCALL 0x00406d20\nMOV qword ptr [R14 + 0x8],RAX\nTEST RAX,RAX\nJZ 0x00406847\nMOV RBX,qword ptr [R14 + 0x8]\nMOV qword ptr [R14 + 0x8],0x0\nJMP 0x00406984\nMOV RDI,R14\nCALL 0x00406520\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00407460\nMOV RDI,R14\nCALL 0x004062c0\nJMP 0x004069bd\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x00406a8f\nCMP dword ptr [R12 + 0x40],0x0\nJZ 0x00406728\nMOVZX EAX,word ptr [R12 + 0x70]\nCMP EAX,0x4\nJZ 0x00406728\nMOV word ptr [R12 + 0x70],0x7\nJMP 0x00406728\nTEST byte ptr [R14 + 0x49],0x40\nJNZ 0x00406a8f\nMOV R15,qword ptr [R12 + 0x8]\nMOV qword ptr [R14],R15\nMOV RDI,R12\nCALL 0x004017e0\nCMP qword ptr [R15 + 0x58],-0x1\nJZ 0x004068ed\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0xb\nJZ 0x00406af5\nMOV RAX,qword ptr [R14 + 0x20]\nMOV RCX,qword ptr [R15 + 0x48]\nMOV byte ptr [RAX + RCX*0x1],0x0\nCMP qword ptr [R15 + 0x58],0x0\nJZ 0x0040690c\nMOVZX EAX,word ptr [R15 + 0x72]\nTEST AL,0x2\nJNZ 0x00406931\nTEST AL,0x1\nJNZ 0x00406ab7\nMOV RSI,qword ptr [R15 + 0x8]\nMOV EDX,0xffffffff\nMOV ECX,0x40b9c7\nMOV RDI,R14\nCALL 0x00406b90\nTEST EAX,EAX\nJNZ 0x0040691c\nJMP 0x00406ab7\nMOV RDI,R15\nCALL 0x004017e0\nCALL 0x00401800\nMOV dword ptr [RAX],0x0\nMOV qword ptr [R14],0x0\nJMP 0x00406a8f\nMOV RDI,R14\nCALL 0x00407410\nTEST EAX,EAX\nJZ 0x00406ab7\nCALL 0x00401800\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R15 + 0x40],EAX\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x00406ab7\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x4\nJNZ 0x00406aae\nTEST AH,0x2\nMOV ESI,dword ptr [R15 + 0x44]\nJNZ 0x00406aa1\nMOV EDI,ESI\nCALL 0x00401b10\nTEST EAX,EAX\nJZ 0x00406aae\nCALL 0x00401800\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [R15 + 0x40],EAX\nOR byte ptr [R14 + 0x49],0x40\nJMP 0x00406aae\nCALL 0x00401800\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RBX + 0x40],EAX\nMOV word ptr [RBX + 0x70],0x7\nMOV word ptr [RBX + 0x74],0x3\nMOV RAX,qword ptr [R14 + 0x20]\nMOV RCX,qword ptr [RBX + 0x8]\nMOV RDX,qword ptr [RCX + 0x38]\nMOV RCX,qword ptr [RCX + 0x48]\nLEA RSI,[RCX + -0x1]\nCMP byte ptr [RDX + RCX*0x1 + -0x1],0x2f\nCMOVNZ RSI,RCX\nLEA RDI,[RAX + RSI*0x1 + 0x1]\nMOV byte ptr [RAX + RSI*0x1],0x2f\nLEA RSI,[0x108 + RBX]\nMOV RDX,qword ptr [RBX + 0x60]\nINC RDX\nCALL 0x00401b60\nMOV R12,RBX\nMOV qword ptr [R14],R12\nMOVZX EAX,word ptr [R12 + 0x70]\nCMP EAX,0xb\nJNZ 0x00406a5c\nMOV RAX,qword ptr [0xa8 + R12]\nCMP RAX,0x1\nJZ 0x00406a56\nCMP RAX,0x2\nJNZ 0x00406af5\nMOV RBX,qword ptr [R12 + 0x8]\nCMP qword ptr [R12 + 0x58],0x0\nJLE 0x00406a16\nCMP qword ptr [RBX + 0x68],0x0\nJNZ 0x00406a16\nMOV EAX,dword ptr [R14 + 0x48]\nAND EAX,0x18\nCMP EAX,0x18\nJNZ 0x00406a16\nMOV RDI,RBX\nCALL 0x004074f0\nTEST AL,AL\nJNZ 0x00406a56\nXOR EDX,EDX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x00406060\nMOV word ptr [R12 + 0x70],AX\nMOV ECX,0xf000\nAND ECX,dword ptr [0x90 + R12]\nCMP ECX,0x4000\nJNZ 0x00406a5c\nCMP qword ptr [R12 + 0x58],0x0\nJZ 0x00406a56\nMOV RAX,qword ptr [RBX + 0x68]\nTEST RAX,RAX\nJZ 0x00406a56\nDEC RAX\nMOV qword ptr [RBX + 0x68],RAX\nMOV AX,word ptr [R12 + 0x70]\nMOVZX EAX,AX\nCMP EAX,0x1\nJNZ 0x00406a92\nCMP qword ptr [R12 + 0x58],0x0\nJNZ 0x00406a75\nMOV RAX,qword ptr [R12 + 0x78]\nMOV qword ptr [R14 + 0x18],RAX\nMOV RDI,R14\nMOV RSI,R12\nCALL 0x004075d0\nTEST AL,AL\nJNZ 0x00406a92\nCALL 0x00401800\nMOV dword ptr [RAX],0xc\nXOR R12D,R12D\nMOV RAX,R12\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nMOV EDX,0x1\nMOV RDI,R14\nCALL 0x00407670\nMOV EDI,dword ptr [R15 + 0x44]\nCALL 0x004019c0\nMOVZX EAX,word ptr [R15 + 0x70]\nCMP EAX,0x2\nJZ 0x00406ae5\nMOV EAX,dword ptr [R15 + 0x40]\nXOR ECX,ECX\nCMP EAX,0x0\nSETNZ CL\nOR ECX,0x6\nCMP EAX,0x0\nMOV word ptr [R15 + 0x70],CX\nJNZ 0x00406ae5\nMOV RDI,R14\nMOV RSI,R15\nCALL 0x00406b00\nXOR EAX,EAX\nTEST byte ptr [R14 + 0x49],0x40\nCMOVNZ R15,RAX\nMOV R12,R15\nJMP 0x00406a92\nCALL 0x004017f0\n'
p1460
S'41 57\n41 56\n41 54\n53\n50\n49 89 fe\n4d 8b 26\n4d 85 e4\n0f 84 28 05 00 00\n41 f6 46 49 40\n0f 85 1d 05 00 00\n41 0f b7 44 24 74\n66 41 c7 44 24 74 03 00\n83 f8 01\n75 18\n31 d2\n4c 89 f7\n4c 89 e6\ne8 ce fa ff ff\n66 41 89 44 24 70\ne9 f5 04 00 00\n41 0f b7 4c 24 70\n0f b7 c0\n83 f8 02\n75 62\n89 ca\n81 e2 fe ff 00 00\n0f b7 d2\n83 fa 0c\n75 52\nba 01 00 00 00\n4c 89 f7\n4c 89 e6\ne8 95 fa ff ff\n66 41 89 44 24 70\n0f b7 c0\n83 f8 01\n0f 85 e3 03 00 00\n41 f6 46 48 04\n0f 85 d8 03 00 00\nbe c8 b9 40 00\n4c 89 f7\ne8 3b fd ff ff\n41 89 44 24 44\n85 c0\n0f 88 95 01 00 00\n41 80 4c 24 72 02\ne9 b3 03 00 00\n0f b7 c9\n83 f9 01\n75 5b\n83 f8 04\n0f 84 da 00 00 00\n41 8b 46 48\na8 40\n74 0f\n49 8b 4c 24 78\n49 3b 4e 18\n0f 85 c3 00 00 00\n49 8b 7e 08\nf6 c4 20\n0f 84 6e 01 00 00\n48 85 ff\n0f 84 65 01 00 00\n25 ff df ff ff\n41 89 46 48\ne8 37 fd ff ff\n49 c7 46 08 00 00 00 00\ne9 9a 01 00 00\n49 8b 5c 24 10\n48 85 db\n0f 84 ba 00 00 00\n49 89 1e\n4c 89 e7\ne8 57 b1 ff ff\n48 83 7b 58 00\n0f 84 e9 00 00 00\n0f b7 43 74\n83 f8 04\n49 89 dc\n74 d0\n0f b7 c0\n83 f8 02\n0f 85 d8 02 00 00\nba 01 00 00 00\n4c 89 f7\n48 89 de\ne8 a4 f9 ff ff\n66 89 43 70\n0f b7 c0\n83 f8 01\n0f 85 b2 02 00 00\n41 f6 46 48 04\n0f 85 a7 02 00 00\nbe c8 b9 40 00\n4c 89 f7\ne8 4c fc ff ff\n89 43 44\n85 c0\n0f 88 7f 02 00 00\n80 4b 72 02\ne9 86 02 00 00\n41 f6 44 24 72 02\n74 0a\n41 8b 7c 24 44\ne8 b6 b2 ff ff\n49 8b 7e 08\n48 85 ff\n74 0d\ne8 78 fc ff ff\n49 c7 46 08 00 00 00 00\n66 41 c7 44 24 70 06 00\n4c 89 f7\n4c 89 e6\ne8 cd 03 00 00\ne9 5a 03 00 00\n49 8b 44 24 08\n48 83 78 18 00\n0f 84 3d 01 00 00\n49 89 06\n49 8b 4e 20\n48 8b 40 48\nc6 04 01 00\nbe 03 00 00 00\n4c 89 f7\ne8 bc 05 00 00\n48 89 c3\n48 85 db\n0f 84 0a 01 00 00\n4c 89 e7\ne8 68 b0 ff ff\ne9 07 02 00 00\n4c 89 f7\ne8 8b 0c 00 00\n85 c0\n0f 84 9a 00 00 00\n41 80 4e 49 40\ne9 f8 02 00 00\ne8 64 b0 ff ff\n8b 00\n41 89 44 24 40\n66 41 c7 44 24 70 07 00\ne9 10 02 00 00\n48 85 ff\n74 4b\n49 8b 4c 24 30\nba ff ff ff ff\n4c 89 f7\n4c 89 e6\ne8 c6 03 00 00\n85 c0\n74 48\ne8 2d b0 ff ff\n8b 00\n41 89 44 24 40\n41 80 4c 24 72 01\n49 8b 46 08\n48 85 c0\n74 2d\n48 8b 48 08\n48 8b 49 30\n48 89 48 30\n48 8b 40 10\n48 85 c0\n75 eb\neb 16\nbe 03 00 00 00\n4c 89 f7\ne8 13 05 00 00\n49 89 46 08\n48 85 c0\n74 31\n49 8b 5e 08\n49 c7 46 08 00 00 00 00\ne9 5d 01 00 00\n4c 89 f7\ne8 f1 fc ff ff\n4c 89 f7\n48 89 de\ne8 26 0c 00 00\n4c 89 f7\ne8 7e fa ff ff\ne9 76 01 00 00\n41 f6 46 49 40\n0f 85 3d 02 00 00\n41 83 7c 24 40 00\n0f 84 ca fe ff ff\n41 0f b7 44 24 70\n83 f8 04\n0f 84 bb fe ff ff\n66 41 c7 44 24 70 07 00\ne9 ae fe ff ff\n41 f6 46 49 40\n0f 85 0a 02 00 00\n4d 8b 7c 24 08\n4d 89 3e\n4c 89 e7\ne8 4b af ff ff\n49 83 7f 58 ff\n74 51\n41 0f b7 47 70\n83 f8 0b\n0f 84 4b 02 00 00\n49 8b 46 20\n49 8b 4f 48\nc6 04 08 00\n49 83 7f 58 00\n74 4f\n41 0f b7 47 72\na8 02\n75 6b\na8 01\n0f 85 e9 01 00 00\n49 8b 77 08\nba ff ff ff ff\nb9 c7 b9 40 00\n4c 89 f7\ne8 ac 02 00 00\n85 c0\n75 34\ne9 ca 01 00 00\n4c 89 ff\ne8 eb ae ff ff\ne8 06 af ff ff\nc7 00 00 00 00 00\n49 c7 06 00 00 00 00\ne9 83 01 00 00\n4c 89 f7\ne8 fc 0a 00 00\n85 c0\n0f 84 9b 01 00 00\ne8 df ae ff ff\n8b 00\n41 89 47 40\n41 80 4e 49 40\ne9 86 01 00 00\n41 8b 46 48\na8 04\n0f 85 71 01 00 00\nf6 c4 02\n41 8b 77 44\n0f 85 57 01 00 00\n89 f7\ne8 bf b1 ff ff\n85 c0\n0f 84 55 01 00 00\ne8 a2 ae ff ff\n8b 00\n41 89 47 40\n41 80 4e 49 40\ne9 40 01 00 00\ne8 8d ae ff ff\n8b 00\n89 43 40\n66 c7 43 70 07 00\n66 c7 43 74 03 00\n49 8b 46 20\n48 8b 4b 08\n48 8b 51 38\n48 8b 49 48\n48 8d 71 ff\n80 7c 0a ff 2f\n48 0f 45 f1\n48 8d 7c 30 01\nc6 04 30 2f\n48 8d b3 08 01 00 00\n48 8b 53 60\n48 ff c2\ne8 a3 b1 ff ff\n49 89 dc\n4d 89 26\n41 0f b7 44 24 70\n83 f8 0b\n0f 85 8a 00 00 00\n49 8b 84 24 a8 00 00 00\n48 83 f8 01\n74 76\n48 83 f8 02\n0f 85 0b 01 00 00\n49 8b 5c 24 08\n49 83 7c 24 58 00\n7e 1f\n48 83 7b 68 00\n75 18\n41 8b 46 48\n83 e0 18\n83 f8 18\n75 0c\n48 89 df\ne8 de 0a 00 00\n84 c0\n75 40\n31 d2\n4c 89 f7\n4c 89 e6\ne8 3d f6 ff ff\n66 41 89 44 24 70\nb9 00 f0 00 00\n41 23 8c 24 90 00 00 00\n81 f9 00 40 00 00\n75 1e\n49 83 7c 24 58 00\n74 10\n48 8b 43 68\n48 85 c0\n74 07\n48 ff c8\n48 89 43 68\n66 41 8b 44 24 70\n0f b7 c0\n83 f8 01\n75 2e\n49 83 7c 24 58 00\n75 09\n49 8b 44 24 78\n49 89 46 18\n4c 89 f7\n4c 89 e6\ne8 50 0b 00 00\n84 c0\n75 0e\ne8 77 ad ff ff\nc7 00 0c 00 00 00\n45 31 e4\n4c 89 e0\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\nc3\nba 01 00 00 00\n4c 89 f7\ne8 c2 0b 00 00\n41 8b 7f 44\ne8 09 af ff ff\n41 0f b7 47 70\n83 f8 02\n74 24\n41 8b 47 40\n31 c9\n83 f8 00\n0f 95 c1\n83 c9 06\n83 f8 00\n66 41 89 4f 70\n75 0b\n4c 89 f7\n4c 89 fe\ne8 1b 00 00 00\n31 c0\n41 f6 46 49 40\n4c 0f 45 f8\n4d 89 fc\neb 9d\ne8 f6 ac ff ff\n'
p1461
S'.text:0000000000406550\n.text:0000000000406552\n.text:0000000000406554\n.text:0000000000406556\n.text:0000000000406557\n.text:0000000000406558\n.text:000000000040655b\n.text:000000000040655e\n.text:0000000000406561\n.text:0000000000406567\n.text:000000000040656c\n.text:0000000000406572\n.text:0000000000406578\n.text:0000000000406580\n.text:0000000000406583\n.text:0000000000406585\n.text:0000000000406587\n.text:000000000040658a\n.text:000000000040658d\n.text:0000000000406592\n.text:0000000000406598\n.text:000000000040659d\n.text:00000000004065a3\n.text:00000000004065a6\n.text:00000000004065a9\n.text:00000000004065ab\n.text:00000000004065ad\n.text:00000000004065b3\n.text:00000000004065b6\n.text:00000000004065b9\n.text:00000000004065bb\n.text:00000000004065c0\n.text:00000000004065c3\n.text:00000000004065c6\n.text:00000000004065cb\n.text:00000000004065d1\n.text:00000000004065d4\n.text:00000000004065d7\n.text:00000000004065dd\n.text:00000000004065e2\n.text:00000000004065e8\n.text:00000000004065ed\n.text:00000000004065f0\n.text:00000000004065f5\n.text:00000000004065fa\n.text:00000000004065fc\n.text:0000000000406602\n.text:0000000000406608\n.text:000000000040660d\n.text:0000000000406610\n.text:0000000000406613\n.text:0000000000406615\n.text:0000000000406618\n.text:000000000040661e\n.text:0000000000406622\n.text:0000000000406624\n.text:0000000000406626\n.text:000000000040662b\n.text:000000000040662f\n.text:0000000000406635\n.text:0000000000406639\n.text:000000000040663c\n.text:0000000000406642\n.text:0000000000406645\n.text:000000000040664b\n.text:0000000000406650\n.text:0000000000406654\n.text:0000000000406659\n.text:0000000000406661\n.text:0000000000406670\n.text:0000000000406675\n.text:0000000000406678\n.text:000000000040667e\n.text:0000000000406681\n.text:0000000000406684\n.text:0000000000406689\n.text:000000000040668e\n.text:0000000000406694\n.text:0000000000406698\n.text:000000000040669b\n.text:000000000040669e\n.text:00000000004066a0\n.text:00000000004066a3\n.text:00000000004066a6\n.text:00000000004066ac\n.text:00000000004066b1\n.text:00000000004066b4\n.text:00000000004066b7\n.text:00000000004066bc\n.text:00000000004066c0\n.text:00000000004066c3\n.text:00000000004066c6\n.text:00000000004066cc\n.text:00000000004066d1\n.text:00000000004066d7\n.text:00000000004066dc\n.text:00000000004066df\n.text:00000000004066e4\n.text:00000000004066e7\n.text:00000000004066e9\n.text:00000000004066ef\n.text:00000000004066f3\n.text:00000000004066f8\n.text:00000000004066fe\n.text:0000000000406700\n.text:0000000000406705\n.text:000000000040670a\n.text:000000000040670e\n.text:0000000000406711\n.text:0000000000406713\n.text:0000000000406718\n.text:0000000000406720\n.text:0000000000406728\n.text:000000000040672b\n.text:000000000040672e\n.text:0000000000406733\n.text:0000000000406738\n.text:000000000040673d\n.text:0000000000406742\n.text:0000000000406748\n.text:000000000040674b\n.text:000000000040674f\n.text:0000000000406753\n.text:0000000000406757\n.text:000000000040675c\n.text:000000000040675f\n.text:0000000000406764\n.text:0000000000406767\n.text:000000000040676a\n.text:0000000000406770\n.text:0000000000406773\n.text:0000000000406778\n.text:000000000040677d\n.text:0000000000406780\n.text:0000000000406785\n.text:0000000000406787\n.text:000000000040678d\n.text:0000000000406792\n.text:0000000000406797\n.text:000000000040679c\n.text:000000000040679e\n.text:00000000004067a3\n.text:00000000004067ab\n.text:00000000004067b0\n.text:00000000004067b3\n.text:00000000004067b5\n.text:00000000004067ba\n.text:00000000004067bf\n.text:00000000004067c2\n.text:00000000004067c5\n.text:00000000004067ca\n.text:00000000004067cc\n.text:00000000004067ce\n.text:00000000004067d3\n.text:00000000004067d5\n.text:00000000004067da\n.text:00000000004067e0\n.text:00000000004067e4\n.text:00000000004067e7\n.text:00000000004067e9\n.text:00000000004067ed\n.text:00000000004067f1\n.text:00000000004067f5\n.text:00000000004067f9\n.text:00000000004067fc\n.text:00000000004067fe\n.text:0000000000406800\n.text:0000000000406805\n.text:0000000000406808\n.text:000000000040680d\n.text:0000000000406811\n.text:0000000000406814\n.text:0000000000406816\n.text:000000000040681a\n.text:0000000000406822\n.text:0000000000406827\n.text:000000000040682a\n.text:000000000040682f\n.text:0000000000406832\n.text:0000000000406835\n.text:000000000040683a\n.text:000000000040683d\n.text:0000000000406842\n.text:0000000000406847\n.text:000000000040684c\n.text:0000000000406852\n.text:0000000000406858\n.text:000000000040685e\n.text:0000000000406864\n.text:0000000000406867\n.text:000000000040686d\n.text:0000000000406875\n.text:000000000040687a\n.text:000000000040687f\n.text:0000000000406885\n.text:000000000040688a\n.text:000000000040688d\n.text:0000000000406890\n.text:0000000000406895\n.text:000000000040689a\n.text:000000000040689c\n.text:00000000004068a1\n.text:00000000004068a4\n.text:00000000004068aa\n.text:00000000004068ae\n.text:00000000004068b2\n.text:00000000004068b6\n.text:00000000004068bb\n.text:00000000004068bd\n.text:00000000004068c2\n.text:00000000004068c4\n.text:00000000004068c6\n.text:00000000004068c8\n.text:00000000004068ce\n.text:00000000004068d2\n.text:00000000004068d7\n.text:00000000004068dc\n.text:00000000004068df\n.text:00000000004068e4\n.text:00000000004068e6\n.text:00000000004068e8\n.text:00000000004068ed\n.text:00000000004068f0\n.text:00000000004068f5\n.text:00000000004068fa\n.text:0000000000406900\n.text:0000000000406907\n.text:000000000040690c\n.text:000000000040690f\n.text:0000000000406914\n.text:0000000000406916\n.text:000000000040691c\n.text:0000000000406921\n.text:0000000000406923\n.text:0000000000406927\n.text:000000000040692c\n.text:0000000000406931\n.text:0000000000406935\n.text:0000000000406937\n.text:000000000040693d\n.text:0000000000406940\n.text:0000000000406944\n.text:000000000040694a\n.text:000000000040694c\n.text:0000000000406951\n.text:0000000000406953\n.text:0000000000406959\n.text:000000000040695e\n.text:0000000000406960\n.text:0000000000406964\n.text:0000000000406969\n.text:000000000040696e\n.text:0000000000406973\n.text:0000000000406975\n.text:0000000000406978\n.text:000000000040697e\n.text:0000000000406984\n.text:0000000000406988\n.text:000000000040698c\n.text:0000000000406990\n.text:0000000000406994\n.text:0000000000406998\n.text:000000000040699d\n.text:00000000004069a1\n.text:00000000004069a6\n.text:00000000004069aa\n.text:00000000004069b1\n.text:00000000004069b5\n.text:00000000004069b8\n.text:00000000004069bd\n.text:00000000004069c0\n.text:00000000004069c3\n.text:00000000004069c9\n.text:00000000004069cc\n.text:00000000004069d2\n.text:00000000004069da\n.text:00000000004069de\n.text:00000000004069e0\n.text:00000000004069e4\n.text:00000000004069ea\n.text:00000000004069ef\n.text:00000000004069f5\n.text:00000000004069f7\n.text:00000000004069fc\n.text:00000000004069fe\n.text:0000000000406a02\n.text:0000000000406a05\n.text:0000000000406a08\n.text:0000000000406a0a\n.text:0000000000406a0d\n.text:0000000000406a12\n.text:0000000000406a14\n.text:0000000000406a16\n.text:0000000000406a18\n.text:0000000000406a1b\n.text:0000000000406a1e\n.text:0000000000406a23\n.text:0000000000406a29\n.text:0000000000406a2e\n.text:0000000000406a36\n.text:0000000000406a3c\n.text:0000000000406a3e\n.text:0000000000406a44\n.text:0000000000406a46\n.text:0000000000406a4a\n.text:0000000000406a4d\n.text:0000000000406a4f\n.text:0000000000406a52\n.text:0000000000406a56\n.text:0000000000406a5c\n.text:0000000000406a5f\n.text:0000000000406a62\n.text:0000000000406a64\n.text:0000000000406a6a\n.text:0000000000406a6c\n.text:0000000000406a71\n.text:0000000000406a75\n.text:0000000000406a78\n.text:0000000000406a7b\n.text:0000000000406a80\n.text:0000000000406a82\n.text:0000000000406a84\n.text:0000000000406a89\n.text:0000000000406a8f\n.text:0000000000406a92\n.text:0000000000406a95\n.text:0000000000406a99\n.text:0000000000406a9a\n.text:0000000000406a9c\n.text:0000000000406a9e\n.text:0000000000406aa0\n.text:0000000000406aa1\n.text:0000000000406aa6\n.text:0000000000406aa9\n.text:0000000000406aae\n.text:0000000000406ab2\n.text:0000000000406ab7\n.text:0000000000406abc\n.text:0000000000406abf\n.text:0000000000406ac1\n.text:0000000000406ac5\n.text:0000000000406ac7\n.text:0000000000406aca\n.text:0000000000406acd\n.text:0000000000406ad0\n.text:0000000000406ad3\n.text:0000000000406ad8\n.text:0000000000406ada\n.text:0000000000406add\n.text:0000000000406ae0\n.text:0000000000406ae5\n.text:0000000000406ae7\n.text:0000000000406aec\n.text:0000000000406af0\n.text:0000000000406af3\n.text:0000000000406af5\n'
p1462
tp1463
sS'fts_lfree'
p1464
(S'\n__stdcall fts_lfree(FTSENT * head)\n'
p1465
V\u000avoid fts_lfree(FTSENT *head)\u000a\u000a{\u000a  _ftsent *p_Var1;\u000a  \u000a  if (head != (FTSENT *)0x0) {\u000a    do {\u000a      p_Var1 = head->fts_link;\u000a      if ((DIR *)head->fts_dirp != (DIR *)0x0) {\u000a        closedir((DIR *)head->fts_dirp);\u000a      }\u000a      free(head);\u000a      head = (FTSENT *)p_Var1;\u000a    } while (p_Var1 != (_ftsent *)0x0);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1466
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004063c2\nNOP dword ptr [RAX]\nMOV R14,qword ptr [RBX + 0x10]\nMOV RDI,qword ptr [RBX + 0x18]\nTEST RDI,RDI\nJZ 0x004063b2\nCALL 0x004019d0\nMOV RDI,RBX\nCALL 0x004017e0\nTEST R14,R14\nMOV RBX,R14\nJNZ 0x004063a0\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1467
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 26\n0f 1f 40 00\n4c 8b 73 10\n48 8b 7b 18\n48 85 ff\n74 05\ne8 1e b6 ff ff\n48 89 df\ne8 26 b4 ff ff\n4d 85 f6\n4c 89 f3\n75 de\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1468
S'.text:0000000000406390\n.text:0000000000406392\n.text:0000000000406393\n.text:0000000000406394\n.text:0000000000406397\n.text:000000000040639a\n.text:000000000040639c\n.text:00000000004063a0\n.text:00000000004063a4\n.text:00000000004063a8\n.text:00000000004063ab\n.text:00000000004063ad\n.text:00000000004063b2\n.text:00000000004063b5\n.text:00000000004063ba\n.text:00000000004063bd\n.text:00000000004063c0\n.text:00000000004063c2\n.text:00000000004063c6\n.text:00000000004063c7\n.text:00000000004063c9\n'
p1469
tp1470
sS'fputs_unlocked'
p1471
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p1472
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_0060f130)();\u000a  return iVar1;\u000a}\u000a\u000a
p1473
S'JMP qword ptr [0x0060f130]\n'
p1474
S'ff 25 3a d7 20 00\n'
p1475
S'.plt:00000000004019f0\n'
p1476
tp1477
sS'main'
p1478
(S'\n__stdcall main(char * * argv)\n'
p1479
V\u000aint main(char **argv)\u000a\u000a{\u000a  bool bVar1;\u000a  dev_ino dev_ino_buf;\u000a  _Bool _Var2;\u000a  uint uVar3;\u000a  int iVar4;\u000a  char *pcVar5;\u000a  undefined8 uVar6;\u000a  uint *puVar7;\u000a  char *pcVar8;\u000a  int iVar9;\u000a  char **in_RSI;\u000a  undefined4 *puVar10;\u000a  int iVar11;\u000a  uint uVar12;\u000a  uint uVar13;\u000a  stat ref_stats;\u000a  __gid_t local_f8;\u000a  __uid_t local_f4;\u000a  gid_t local_f0;\u000a  uid_t local_ec;\u000a  Chown_option local_e8;\u000a  stat local_c0;\u000a  \u000a  local_f4 = 0xffffffff;\u000a  local_f8 = 0xffffffff;\u000a  local_ec = 0xffffffff;\u000a  local_f0 = 0xffffffff;\u000a  set_program_name(*in_RSI);\u000a  setlocale(6,\u000a              "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a              + 0x1d0);\u000a  bindtextdomain(0x40a77c,"/usr/local/share/locale");\u000a  textdomain(0x40a77c);\u000a  atexit(close_stdout);\u000a  chopt_init(&local_e8);\u000a  iVar11 = -1;\u000a  bVar1 = false;\u000a  uVar13 = 0x10;\u000aswitchD_0040219e_caseD_48:\u000a  uVar3 = uVar13;\u000a  iVar9 = (int)((ulong)argv & 0xffffffff);\u000a  iVar4 = getopt_long((ulong)argv & 0xffffffff);\u000a  if (iVar4 + 1U < 0x86) goto code_r0x00402199;\u000a  if (iVar4 == -0x83) goto LAB_004024b6;\u000a  if (iVar4 == -0x82) {\u000a    usage(0);\u000a  }\u000a  goto switchD_0040219e_caseD_0;\u000acode_r0x00402199:\u000a  uVar13 = 0x11;\u000a  switch(iVar4) {\u000a  default:\u000aswitchD_0040219e_caseD_0:\u000a    usage(1);\u000aLAB_004024b6:\u000a    version_etc(stdout,"chown","GNU coreutils",Version,"David MacKenzie","Jim Meyering",0);\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  case 0x48:\u000a    break;\u000a  case 0x4c:\u000a    uVar13 = 2;\u000a    break;\u000a  case 0x50:\u000a    uVar13 = 0x10;\u000a    break;\u000a  case 0x52:\u000a    local_e8.recurse = true;\u000a    uVar13 = uVar3;\u000a    break;\u000a  case 99:\u000a    local_e8.verbosity = V_changes_only;\u000a    uVar13 = uVar3;\u000a    break;\u000a  case 0x66:\u000a    local_e8.force_silent = true;\u000a    uVar13 = uVar3;\u000a    break;\u000a  case 0x68:\u000a    iVar11 = 0;\u000a    uVar13 = uVar3;\u000a    break;\u000a  case 0x76:\u000a    local_e8.verbosity = V_high;\u000a    uVar13 = uVar3;\u000a    break;\u000a  case 0x80:\u000a    iVar11 = 1;\u000a    uVar13 = uVar3;\u000a    break;\u000a  case 0x81:\u000a    pcVar5 = parse_user_spec(optarg,&local_ec,&local_f0,(char **)0x0,(char **)0x0);\u000a    uVar13 = uVar3;\u000a    if (pcVar5 != (char *)0x0) {\u000a      quote(optarg);\u000a      error(1,0,"%s: %s",pcVar5);\u000a      uVar13 = uVar3;\u000a    }\u000a    break;\u000a  case 0x82:\u000a    bVar1 = false;\u000a    uVar13 = uVar3;\u000a    break;\u000a  case 0x83:\u000a    bVar1 = true;\u000a    uVar13 = uVar3;\u000a    break;\u000a  case 0x84:\u000a    reference_file = optarg;\u000a    uVar13 = uVar3;\u000a    break;\u000a  case -1:\u000a    uVar12 = 0x10;\u000a    uVar13 = uVar12;\u000a    if ((local_e8.recurse != false) && (uVar13 = uVar3, uVar3 == 0x10)) {\u000a      if (iVar11 == 1) {\u000a        iVar11 = 0;\u000a        uVar6 = dcgettext(0,"-R --dereference requires either -H or -L",5);\u000a        error(1,0,uVar6,uVar6);\u000a        uVar13 = uVar12;\u000a      }\u000a      else {\u000a        iVar11 = 0;\u000a        uVar13 = uVar12;\u000a      }\u000a    }\u000a    local_e8.affect_symlink_referent = iVar11 != 0;\u000a    if (iVar9 - optind < (int)((uint)(reference_file == (char *)0x0) + 1)) {\u000a      if (optind < iVar9) {\u000a        uVar6 = dcgettext(0,"missing operand after %s",5);\u000a        pcVar5 = quote(in_RSI[(long)iVar9 + -1]);\u000a        error(0,0,uVar6,pcVar5);\u000a        usage(1);\u000a      }\u000a      uVar6 = dcgettext();\u000a      error(0,0,uVar6,uVar6);\u000a      puVar10 = (undefined4 *)0x1;\u000a      iVar11 = usage();\u000a      *puVar10 = 2;\u000a      *(undefined8 *)(puVar10 + 2) = 0;\u000a      *(undefined *)(puVar10 + 4) = 1;\u000a      *(undefined *)(puVar10 + 1) = 0;\u000a      *(undefined *)((long)puVar10 + 0x11) = 0;\u000a      puVar10[6] = 0;\u000a      puVar10[7] = 0;\u000a      puVar10[8] = 0;\u000a      puVar10[9] = 0;\u000a      return iVar11;\u000a    }\u000a    if (reference_file == (char *)0x0) {\u000a      pcVar5 = parse_user_spec(in_RSI[(long)optind],&local_f4,&local_f8,&local_e8.user_name,\u000a                               &local_e8.group_name);\u000a      if (pcVar5 != (char *)0x0) {\u000a        pcVar8 = quote(in_RSI[(long)optind]);\u000a        error(1,0,"%s: %s",pcVar5,pcVar8);\u000a      }\u000a      if ((local_e8.user_name == (char *)0x0) && (local_e8.group_name != (char *)0x0)) {\u000a        local_e8.user_name =\u000a                          \u000a             "\u005cnThe following options modify how a hierarchy is traversed when the -R\u005cnoption is also specified.  If more than one is specified, only the final\u005cnone takes effect.\u005cn\u005cn  -H                     if a command line argument is a symbolic link\u005cn                         to a directory, traverse it\u005cn  -L                     traverse every symbolic link to a directory\u005cn                         encountered\u005cn  -P                     do not traverse any symbolic links (default)\u005cn\u005cn"\u000a             + 0x1d0;\u000a      }\u000a      optind = optind + 1;\u000a    }\u000a    else {\u000a      iVar11 = stat(reference_file,&local_c0);\u000a      if (iVar11 != 0) {\u000a        puVar7 = (uint *)__errno_location();\u000a        uVar3 = *puVar7;\u000a        uVar6 = dcgettext(0,"failed to get attributes of %s",5);\u000a        pcVar5 = quotearg_style((char *)0x4);\u000a        error(1,(ulong)uVar3,uVar6,pcVar5);\u000a      }\u000a      local_f4 = local_c0.st_uid;\u000a      local_f8 = local_c0.st_gid;\u000a      local_e8.user_name = uid_to_name();\u000a      local_e8.group_name = gid_to_name();\u000a    }\u000a    if (((bVar1) && (local_e8.recurse != false)) &&\u000a       (local_e8.root_dev_ino = get_root_dev_ino((dev_ino *)&ram0x0060f338),\u000a       local_e8.root_dev_ino == (dev_ino *)0x0)) {\u000a      puVar7 = (uint *)__errno_location();\u000a      uVar3 = *puVar7;\u000a      uVar6 = dcgettext(0,"failed to get attributes of %s",5);\u000a      pcVar5 = quotearg_style((char *)0x4);\u000a      error(1,(ulong)uVar3,uVar6,pcVar5);\u000a    }\u000a    _Var2 = chown_files(in_RSI + (long)optind,(Chown_option *)(ulong)(uVar13 | 0x400));\u000a    return (int)(uint)(_Var2 ^ 1);\u000a  }\u000a  goto switchD_0040219e_caseD_48;\u000a}\u000a\u000a
p1480
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xd8\nMOV R13,RSI\nMOV EBP,EDI\nMOV dword ptr [RSP + 0x14],0xffffffff\nMOV dword ptr [RSP + 0x10],0xffffffff\nMOV dword ptr [RSP + 0x1c],0xffffffff\nMOV dword ptr [RSP + 0x18],0xffffffff\nMOV RDI,qword ptr [R13]\nCALL 0x00403470\nMOV EDI,0x6\nMOV ESI,0x40a55d\nCALL 0x00401b40\nMOV EDI,0x40a77c\nMOV ESI,0x40a750\nCALL 0x004018b0\nMOV EDI,0x40a77c\nCALL 0x00401880\nMOV EDI,0x403330\nCALL 0x004096e0\nLEA RDI,[RSP + 0x20]\nCALL 0x00402560\nMOV EAX,0x10\nMOV R12D,0xffffffff\nLEA R15,[RSP + 0x18]\nMOV dword ptr [RSP + 0xc],0x0\nJMP 0x00402170\nMOV byte ptr [RSP + 0x31],0x1\nMOV EAX,R14D\nNOP dword ptr [RAX]\nMOV R14D,EAX\nMOV EDX,0x40a768\nMOV ECX,0x409bb0\nXOR R8D,R8D\nMOV EDI,EBP\nMOV RSI,R13\nCALL 0x00401920\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x85\nJA 0x00402497\nMOV EAX,0x11\nJMP qword ptr [0x409780 + RCX*0x8]\nMOV EAX,0x2\nJMP 0x00402170\nMOV EAX,0x10\nJMP 0x00402170\nMOV byte ptr [RSP + 0x24],0x1\nMOV EAX,R14D\nJMP 0x00402170\nMOV dword ptr [RSP + 0x20],0x1\nMOV EAX,R14D\nJMP 0x00402170\nXOR R12D,R12D\nMOV EAX,R14D\nJMP 0x00402170\nMOV RDI,qword ptr [0x0060f2f8]\nXOR ECX,ECX\nXOR R8D,R8D\nLEA RSI,[RSP + 0x1c]\nMOV RDX,R15\nCALL 0x00404db0\nMOV RBX,RAX\nTEST RBX,RBX\nMOV EAX,R14D\nJZ 0x00402170\nMOV RDI,qword ptr [0x0060f2f8]\nCALL 0x00404960\nMOV R8,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nMOV EDX,0x40a771\nXOR EAX,EAX\nMOV RCX,RBX\nCALL 0x00401b70\nMOV EAX,R14D\nJMP 0x00402170\nMOV dword ptr [RSP + 0xc],0x0\nMOV EAX,R14D\nJMP 0x00402170\nMOV AL,0x1\nMOV dword ptr [RSP + 0xc],EAX\nMOV EAX,R14D\nJMP 0x00402170\nMOV RAX,qword ptr [0x0060f2f8]\nMOV qword ptr [0x0060f330],RAX\nMOV EAX,R14D\nJMP 0x00402170\nMOV dword ptr [RSP + 0x20],0x0\nMOV EAX,R14D\nJMP 0x00402170\nMOV R12D,0x1\nMOV EAX,R14D\nJMP 0x00402170\nMOV R15D,0x10\nCMP byte ptr [RSP + 0x24],0x0\nJZ 0x004022c4\nCMP R14D,0x10\nJNZ 0x004022bc\nCMP R12D,0x1\nJNZ 0x004022c1\nXOR R12D,R12D\nXOR EDI,EDI\nMOV ESI,0x40a7a3\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401b70\nJMP 0x004022c4\nMOV R15D,R14D\nJMP 0x004022c4\nXOR R12D,R12D\nTEST R12D,R12D\nSETNZ byte ptr [RSP + 0x30]\nMOVSXD RAX,dword ptr [0x0060f2f0]\nMOV EDX,EBP\nSUB EDX,EAX\nMOV RCX,qword ptr [0x0060f330]\nCMP RCX,0x1\nMOV ESI,0x1\nADC ESI,0x0\nCMP EDX,ESI\nJL 0x004024f0\nTEST RCX,RCX\nJZ 0x00402374\nMOV RDI,qword ptr [0x0060f330]\nLEA RSI,[RSP + 0x48]\nCALL 0x00409710\nTEST EAX,EAX\nJZ 0x0040234c\nCALL 0x00401800\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a7f6\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RBP,RAX\nMOV RSI,qword ptr [0x0060f330]\nMOV EDI,0x4\nCALL 0x00404740\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00401b70\nMOV EDI,dword ptr [RSP + 0x64]\nMOV dword ptr [RSP + 0x14],EDI\nMOV EBX,dword ptr [RSP + 0x68]\nMOV dword ptr [RSP + 0x10],EBX\nCALL 0x004025d0\nMOV qword ptr [RSP + 0x38],RAX\nMOV EDI,EBX\nCALL 0x004025a0\nMOV qword ptr [RSP + 0x40],RAX\nJMP 0x004023e8\nMOV RDI,qword ptr [R13 + RAX*0x8]\nLEA RCX,[RSP + 0x38]\nLEA R8,[RSP + 0x40]\nLEA RSI,[RSP + 0x14]\nLEA RDX,[RSP + 0x10]\nCALL 0x00404db0\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x004023c7\nMOVSXD RAX,dword ptr [0x0060f2f0]\nMOV RDI,qword ptr [R13 + RAX*0x8]\nCALL 0x00404960\nMOV RBX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nMOV EDX,0x40a771\nXOR EAX,EAX\nMOV RCX,RBP\nMOV R8,RBX\nCALL 0x00401b70\nCMP qword ptr [RSP + 0x38],0x0\nJNZ 0x004023e2\nMOV RAX,qword ptr [RSP + 0x40]\nTEST RAX,RAX\nJZ 0x004023e2\nMOV qword ptr [RSP + 0x38],0x40a55d\nINC dword ptr [0x0060f2f0]\nMOV EAX,dword ptr [RSP + 0xc]\nTEST AL,AL\nJZ 0x0040244a\nMOV AL,byte ptr [RSP + 0x24]\nTEST AL,AL\nJZ 0x0040244a\nMOV EDI,0x60f338\nCALL 0x00404d70\nMOV qword ptr [RSP + 0x28],RAX\nTEST RAX,RAX\nJNZ 0x0040244a\nCALL 0x00401800\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nMOV ESI,0x40a7f6\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RBP,RAX\nMOV EDI,0x4\nMOV ESI,0x40ae3a\nCALL 0x00404740\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x00401b70\nOR R15D,0x400\nMOVSXD RAX,dword ptr [0x0060f2f0]\nLEA RDI,[R13 + RAX*0x8]\nMOV EDX,dword ptr [RSP + 0x14]\nMOV ECX,dword ptr [RSP + 0x10]\nMOV R8D,dword ptr [RSP + 0x1c]\nMOV R9D,dword ptr [RSP + 0x18]\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP],RAX\nMOV ESI,R15D\nCALL 0x00402600\nXOR AL,0x1\nMOVZX EAX,AL\nADD RSP,0xd8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCMP EAX,0xffffff7d\nJZ 0x004024b6\nCMP EAX,0xffffff7e\nJNZ 0x004024ac\nXOR EDI,EDI\nCALL 0x00401d60\nMOV EDI,0x1\nCALL 0x00401d60\nMOV RDI,qword ptr [0x0060f2e8]\nMOV RCX,qword ptr [0x0060f278]\nMOV qword ptr [RSP],0x0\nMOV ESI,0x40a74a\nMOV EDX,0x40a778\nMOV R8D,0x40a786\nMOV R9D,0x40a796\nXOR EAX,EAX\nCALL 0x00405510\nXOR EDI,EDI\nCALL 0x00401c00\nXOR EDI,EDI\nCMP EAX,EBP\nJGE 0x00402530\nMOV ESI,0x40a7dd\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RBX,RAX\nMOVSXD RAX,EBP\nMOV RDI,qword ptr [R13 + RAX*0x8 + -0x8]\nCALL 0x00404960\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x00401b70\nMOV EDI,0x1\nCALL 0x00401d60\nMOV ESI,0x40a7cd\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x00401b70\nMOV EDI,0x1\nCALL 0x00401d60\nNOP word ptr [RAX + RAX*0x1]\n'
p1481
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec d8 00 00 00\n49 89 f5\n89 fd\nc7 44 24 14 ff ff ff ff\nc7 44 24 10 ff ff ff ff\nc7 44 24 1c ff ff ff ff\nc7 44 24 18 ff ff ff ff\n49 8b 7d 00\ne8 61 13 00 00\nbf 06 00 00 00\nbe 5d a5 40 00\ne8 22 fa ff ff\nbf 7c a7 40 00\nbe 50 a7 40 00\ne8 83 f7 ff ff\nbf 7c a7 40 00\ne8 49 f7 ff ff\nbf 30 33 40 00\ne8 9f 75 00 00\n48 8d 7c 24 20\ne8 15 04 00 00\nb8 10 00 00 00\n41 bc ff ff ff ff\n4c 8d 7c 24 18\nc7 44 24 0c 00 00 00 00\neb 0b\nc6 44 24 31 01\n44 89 f0\n0f 1f 00\n41 89 c6\nba 68 a7 40 00\nb9 b0 9b 40 00\n45 31 c0\n89 ef\n4c 89 ee\ne8 96 f7 ff ff\n8d 48 01\n81 f9 85 00 00 00\n0f 87 fe 02 00 00\nb8 11 00 00 00\nff 24 cd 80 97 40 00\nb8 02 00 00 00\neb c4\nb8 10 00 00 00\neb bd\nc6 44 24 24 01\n44 89 f0\neb b3\nc7 44 24 20 01 00 00 00\n44 89 f0\neb a6\n45 31 e4\n44 89 f0\neb 9e\n48 8b 3d 1f d1 20 00\n31 c9\n45 31 c0\n48 8d 74 24 1c\n4c 89 fa\ne8 c5 2b 00 00\n48 89 c3\n48 85 db\n44 89 f0\n0f 84 76 ff ff ff\n48 8b 3d f7 d0 20 00\ne8 5a 27 00 00\n49 89 c0\nbf 01 00 00 00\n31 f6\nba 71 a7 40 00\n31 c0\n48 89 d9\ne8 51 f9 ff ff\n44 89 f0\ne9 49 ff ff ff\nc7 44 24 0c 00 00 00 00\n44 89 f0\ne9 39 ff ff ff\nb0 01\n89 44 24 0c\n44 89 f0\ne9 2b ff ff ff\n48 8b 05 ac d0 20 00\n48 89 05 dd d0 20 00\n44 89 f0\ne9 15 ff ff ff\nc7 44 24 20 00 00 00 00\n44 89 f0\ne9 05 ff ff ff\n41 bc 01 00 00 00\n44 89 f0\ne9 f7 fe ff ff\n41 bf 10 00 00 00\n80 7c 24 24 00\n74 3e\n41 83 fe 10\n75 30\n41 83 fc 01\n75 2f\n45 31 e4\n31 ff\nbe a3 a7 40 00\nba 05 00 00 00\ne8 2a f6 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 b6 f8 ff ff\neb 08\n45 89 f7\neb 03\n45 31 e4\n45 85 e4\n0f 95 44 24 30\n48 63 05 1d d0 20 00\n89 ea\n29 c2\n48 8b 0d 52 d0 20 00\n48 83 f9 01\nbe 01 00 00 00\n83 d6 00\n39 f2\n0f 8c fe 01 00 00\n48 85 c9\n74 7d\n48 8b 3d 32 d0 20 00\n48 8d 74 24 48\ne8 08 74 00 00\n85 c0\n74 40\ne8 ef f4 ff ff\n8b 18\n31 ff\nbe f6 a7 40 00\nba 05 00 00 00\ne8 ac f5 ff ff\n48 89 c5\n48 8b 35 02 d0 20 00\nbf 04 00 00 00\ne8 08 24 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ea\ne8 24 f8 ff ff\n8b 7c 24 64\n89 7c 24 14\n8b 5c 24 68\n89 5c 24 10\ne8 6f 02 00 00\n48 89 44 24 38\n89 df\ne8 33 02 00 00\n48 89 44 24 40\neb 74\n49 8b 7c c5 00\n48 8d 4c 24 38\n4c 8d 44 24 40\n48 8d 74 24 14\n48 8d 54 24 10\ne8 1e 2a 00 00\n48 89 c5\n48 85 ed\n74 2d\n48 63 05 4f cf 20 00\n49 8b 7c c5 00\ne8 b5 25 00 00\n48 89 c3\nbf 01 00 00 00\n31 f6\nba 71 a7 40 00\n31 c0\n48 89 e9\n49 89 d8\ne8 a9 f7 ff ff\n48 83 7c 24 38 00\n75 13\n48 8b 44 24 40\n48 85 c0\n74 09\n48 c7 44 24 38 5d a5 40 00\nff 05 08 cf 20 00\n8b 44 24 0c\n84 c0\n74 5a\n8a 44 24 24\n84 c0\n74 52\nbf 38 f3 60 00\ne8 6e 29 00 00\n48 89 44 24 28\n48 85 c0\n75 3e\ne8 ef f3 ff ff\n8b 18\n31 ff\nbe f6 a7 40 00\nba 05 00 00 00\ne8 ac f4 ff ff\n48 89 c5\nbf 04 00 00 00\nbe 3a ae 40 00\ne8 0a 23 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ea\ne8 26 f7 ff ff\n41 81 cf 00 04 00 00\n48 63 05 98 ce 20 00\n49 8d 7c c5 00\n8b 54 24 14\n8b 4c 24 10\n44 8b 44 24 1c\n44 8b 4c 24 18\n48 8d 44 24 20\n48 89 04 24\n44 89 fe\ne8 80 01 00 00\n34 01\n0f b6 c0\n48 81 c4 d8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n3d 7d ff ff ff\n74 18\n3d 7e ff ff ff\n75 07\n31 ff\ne8 b4 f8 ff ff\nbf 01 00 00 00\ne8 aa f8 ff ff\n48 8b 3d 2b ce 20 00\n48 8b 0d b4 cd 20 00\n48 c7 04 24 00 00 00 00\nbe 4a a7 40 00\nba 78 a7 40 00\n41 b8 86 a7 40 00\n41 b9 96 a7 40 00\n31 c0\ne8 27 30 00 00\n31 ff\ne8 10 f7 ff ff\n31 ff\n39 e8\n7d 3a\nbe dd a7 40 00\nba 05 00 00 00\ne8 cb f3 ff ff\n48 89 c3\n48 63 c5\n49 8b 7c c5 f8\ne8 4b 24 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 4a f6 ff ff\nbf 01 00 00 00\ne8 30 f8 ff ff\nbe cd a7 40 00\nba 05 00 00 00\ne8 91 f3 ff ff\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ca\ne8 20 f6 ff ff\nbf 01 00 00 00\ne8 06 f8 ff ff\n66 0f 1f 44 00 00\n'
p1482
S'.text:00000000004020d0\n.text:00000000004020d1\n.text:00000000004020d3\n.text:00000000004020d5\n.text:00000000004020d7\n.text:00000000004020d9\n.text:00000000004020da\n.text:00000000004020e1\n.text:00000000004020e4\n.text:00000000004020e6\n.text:00000000004020ee\n.text:00000000004020f6\n.text:00000000004020fe\n.text:0000000000402106\n.text:000000000040210a\n.text:000000000040210f\n.text:0000000000402114\n.text:0000000000402119\n.text:000000000040211e\n.text:0000000000402123\n.text:0000000000402128\n.text:000000000040212d\n.text:0000000000402132\n.text:0000000000402137\n.text:000000000040213c\n.text:0000000000402141\n.text:0000000000402146\n.text:000000000040214b\n.text:0000000000402150\n.text:0000000000402156\n.text:000000000040215b\n.text:0000000000402163\n.text:0000000000402165\n.text:000000000040216a\n.text:000000000040216d\n.text:0000000000402170\n.text:0000000000402173\n.text:0000000000402178\n.text:000000000040217d\n.text:0000000000402180\n.text:0000000000402182\n.text:0000000000402185\n.text:000000000040218a\n.text:000000000040218d\n.text:0000000000402193\n.text:0000000000402199\n.text:000000000040219e\n.text:00000000004021a5\n.text:00000000004021aa\n.text:00000000004021ac\n.text:00000000004021b1\n.text:00000000004021b3\n.text:00000000004021b8\n.text:00000000004021bb\n.text:00000000004021bd\n.text:00000000004021c5\n.text:00000000004021c8\n.text:00000000004021ca\n.text:00000000004021cd\n.text:00000000004021d0\n.text:00000000004021d2\n.text:00000000004021d9\n.text:00000000004021db\n.text:00000000004021de\n.text:00000000004021e3\n.text:00000000004021e6\n.text:00000000004021eb\n.text:00000000004021ee\n.text:00000000004021f1\n.text:00000000004021f4\n.text:00000000004021fa\n.text:0000000000402201\n.text:0000000000402206\n.text:0000000000402209\n.text:000000000040220e\n.text:0000000000402210\n.text:0000000000402215\n.text:0000000000402217\n.text:000000000040221a\n.text:000000000040221f\n.text:0000000000402222\n.text:0000000000402227\n.text:000000000040222f\n.text:0000000000402232\n.text:0000000000402237\n.text:0000000000402239\n.text:000000000040223d\n.text:0000000000402240\n.text:0000000000402245\n.text:000000000040224c\n.text:0000000000402253\n.text:0000000000402256\n.text:000000000040225b\n.text:0000000000402263\n.text:0000000000402266\n.text:000000000040226b\n.text:0000000000402271\n.text:0000000000402274\n.text:0000000000402279\n.text:000000000040227f\n.text:0000000000402284\n.text:0000000000402286\n.text:000000000040228a\n.text:000000000040228c\n.text:0000000000402290\n.text:0000000000402292\n.text:0000000000402295\n.text:0000000000402297\n.text:000000000040229c\n.text:00000000004022a1\n.text:00000000004022a6\n.text:00000000004022a9\n.text:00000000004022ae\n.text:00000000004022b0\n.text:00000000004022b2\n.text:00000000004022b5\n.text:00000000004022ba\n.text:00000000004022bc\n.text:00000000004022bf\n.text:00000000004022c1\n.text:00000000004022c4\n.text:00000000004022c7\n.text:00000000004022cc\n.text:00000000004022d3\n.text:00000000004022d5\n.text:00000000004022d7\n.text:00000000004022de\n.text:00000000004022e2\n.text:00000000004022e7\n.text:00000000004022ea\n.text:00000000004022ec\n.text:00000000004022f2\n.text:00000000004022f5\n.text:00000000004022f7\n.text:00000000004022fe\n.text:0000000000402303\n.text:0000000000402308\n.text:000000000040230a\n.text:000000000040230c\n.text:0000000000402311\n.text:0000000000402313\n.text:0000000000402315\n.text:000000000040231a\n.text:000000000040231f\n.text:0000000000402324\n.text:0000000000402327\n.text:000000000040232e\n.text:0000000000402333\n.text:0000000000402338\n.text:000000000040233b\n.text:0000000000402340\n.text:0000000000402342\n.text:0000000000402344\n.text:0000000000402347\n.text:000000000040234c\n.text:0000000000402350\n.text:0000000000402354\n.text:0000000000402358\n.text:000000000040235c\n.text:0000000000402361\n.text:0000000000402366\n.text:0000000000402368\n.text:000000000040236d\n.text:0000000000402372\n.text:0000000000402374\n.text:0000000000402379\n.text:000000000040237e\n.text:0000000000402383\n.text:0000000000402388\n.text:000000000040238d\n.text:0000000000402392\n.text:0000000000402395\n.text:0000000000402398\n.text:000000000040239a\n.text:00000000004023a1\n.text:00000000004023a6\n.text:00000000004023ab\n.text:00000000004023ae\n.text:00000000004023b3\n.text:00000000004023b5\n.text:00000000004023ba\n.text:00000000004023bc\n.text:00000000004023bf\n.text:00000000004023c2\n.text:00000000004023c7\n.text:00000000004023cd\n.text:00000000004023cf\n.text:00000000004023d4\n.text:00000000004023d7\n.text:00000000004023d9\n.text:00000000004023e2\n.text:00000000004023e8\n.text:00000000004023ec\n.text:00000000004023ee\n.text:00000000004023f0\n.text:00000000004023f4\n.text:00000000004023f6\n.text:00000000004023f8\n.text:00000000004023fd\n.text:0000000000402402\n.text:0000000000402407\n.text:000000000040240a\n.text:000000000040240c\n.text:0000000000402411\n.text:0000000000402413\n.text:0000000000402415\n.text:000000000040241a\n.text:000000000040241f\n.text:0000000000402424\n.text:0000000000402427\n.text:000000000040242c\n.text:0000000000402431\n.text:0000000000402436\n.text:0000000000402439\n.text:000000000040243e\n.text:0000000000402440\n.text:0000000000402442\n.text:0000000000402445\n.text:000000000040244a\n.text:0000000000402451\n.text:0000000000402458\n.text:000000000040245d\n.text:0000000000402461\n.text:0000000000402465\n.text:000000000040246a\n.text:000000000040246f\n.text:0000000000402474\n.text:0000000000402478\n.text:000000000040247b\n.text:0000000000402480\n.text:0000000000402482\n.text:0000000000402485\n.text:000000000040248c\n.text:000000000040248d\n.text:000000000040248f\n.text:0000000000402491\n.text:0000000000402493\n.text:0000000000402495\n.text:0000000000402496\n.text:0000000000402497\n.text:000000000040249c\n.text:000000000040249e\n.text:00000000004024a3\n.text:00000000004024a5\n.text:00000000004024a7\n.text:00000000004024ac\n.text:00000000004024b1\n.text:00000000004024b6\n.text:00000000004024bd\n.text:00000000004024c4\n.text:00000000004024cc\n.text:00000000004024d1\n.text:00000000004024d6\n.text:00000000004024dc\n.text:00000000004024e2\n.text:00000000004024e4\n.text:00000000004024e9\n.text:00000000004024eb\n.text:00000000004024f0\n.text:00000000004024f2\n.text:00000000004024f4\n.text:00000000004024f6\n.text:00000000004024fb\n.text:0000000000402500\n.text:0000000000402505\n.text:0000000000402508\n.text:000000000040250b\n.text:0000000000402510\n.text:0000000000402515\n.text:0000000000402518\n.text:000000000040251a\n.text:000000000040251c\n.text:000000000040251e\n.text:0000000000402521\n.text:0000000000402526\n.text:000000000040252b\n.text:0000000000402530\n.text:0000000000402535\n.text:000000000040253a\n.text:000000000040253f\n.text:0000000000402542\n.text:0000000000402544\n.text:0000000000402546\n.text:0000000000402548\n.text:000000000040254b\n.text:0000000000402550\n.text:0000000000402555\n.text:000000000040255a\n'
p1483
tp1484
sS'xcharalloc'
p1485
(S'\n__stdcall xcharalloc(size_t n)\n'
p1486
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p1487
S'JMP 0x00405640\n'
p1488
S'e9 2b ff ff ff\n'
p1489
S'.text:0000000000405710\n'
p1490
tp1491
sS'c_isupper'
p1492
(S'\n__stdcall c_isupper()\n'
p1493
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p1494
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1495
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p1496
S'.text:0000000000407b30\n.text:0000000000407b33\n.text:0000000000407b36\n.text:0000000000407b39\n'
p1497
tp1498
sS'allocate_entry'
p1499
(S'\n__stdcall allocate_entry(Hash_table * table)\n'
p1500
V\u000ahash_entry * allocate_entry(Hash_table *table)\u000a\u000a{\u000a  hash_entry *phVar1;\u000a  \u000a  phVar1 = table->free_entry_list;\u000a  if (phVar1 != (hash_entry *)0x0) {\u000a    table->free_entry_list = phVar1->next;\u000a    return phVar1;\u000a  }\u000a  phVar1 = (hash_entry *)malloc(0x10);\u000a  return phVar1;\u000a}\u000a\u000a
p1501
S'MOV RAX,qword ptr [RDI + 0x48]\nTEST RAX,RAX\nJZ 0x00408ab2\nMOV RCX,qword ptr [RAX + 0x8]\nMOV qword ptr [RDI + 0x48],RCX\nRET\nPUSH RAX\nMOV EDI,0x10\nCALL 0x00401aa0\nADD RSP,0x8\nRET\n'
p1502
S'48 8b 47 48\n48 85 c0\n74 09\n48 8b 48 08\n48 89 4f 48\nc3\n50\nbf 10 00 00 00\ne8 e3 8f ff ff\n48 83 c4 08\nc3\n'
p1503
S'.text:0000000000408aa0\n.text:0000000000408aa4\n.text:0000000000408aa7\n.text:0000000000408aa9\n.text:0000000000408aad\n.text:0000000000408ab1\n.text:0000000000408ab2\n.text:0000000000408ab3\n.text:0000000000408ab8\n.text:0000000000408abd\n.text:0000000000408ac1\n'
p1504
tp1505
sS'c_isalnum'
p1506
(S'\n__stdcall c_isalnum()\n'
p1507
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1508
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00407a4b\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00407a4b\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00407a4a\nXOR EAX,EAX\nRET\n'
p1509
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p1510
S'.text:0000000000407a30\n.text:0000000000407a32\n.text:0000000000407a35\n.text:0000000000407a38\n.text:0000000000407a3a\n.text:0000000000407a44\n.text:0000000000407a48\n.text:0000000000407a4a\n.text:0000000000407a4b\n.text:0000000000407a4e\n.text:0000000000407a51\n.text:0000000000407a53\n.text:0000000000407a55\n'
p1511
tp1512
sS'getpwuid'
p1513
(S'\n__stdcall getpwuid(__uid_t __uid)\n'
p1514
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000apasswd * getpwuid(__uid_t __uid)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  \u000a  ppVar1 = (passwd *)(*(code *)PTR_getpwuid_0060f088)();\u000a  return ppVar1;\u000a}\u000a\u000a
p1515
S'JMP qword ptr [0x0060f088]\n'
p1516
S'ff 25 e2 d7 20 00\n'
p1517
S'.plt:00000000004018a0\n'
p1518
tp1519
sS'fts_safe_changedir'
p1520
(S'\n__stdcall fts_safe_changedir(FTS * sp, FTSENT * p, char * dir)\n'
p1521
V\u000aint fts_safe_changedir(FTS *sp,FTSENT *p,char *dir)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  int __fd;\u000a  int iVar3;\u000a  int *piVar4;\u000a  byte *dir_00;\u000a  int __fd_00;\u000a  bool bVar5;\u000a  stat sb;\u000a  stat local_c0;\u000a  \u000a  __fd_00 = (int)dir;\u000a  if (dir_00 == (byte *)0x0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    __fd = 0x2e - (uint)*dir_00;\u000a    if ((__fd == 0) && (__fd = 0x2e - (uint)dir_00[1], __fd == 0)) {\u000a      __fd = -(uint)dir_00[2];\u000a    }\u000a    bVar5 = __fd == 0;\u000a  }\u000a  uVar1 = sp->fts_options;\u000a  if ((uVar1 & 4) != 0) {\u000a    if (__fd_00 < 0) {\u000a      return 0;\u000a    }\u000a    if ((uVar1 & 0x200) == 0) {\u000a      return 0;\u000a    }\u000a    close(__fd_00);\u000a    return 0;\u000a  }\u000a  if (((__fd_00 < 0) && (bVar5)) && ((uVar1 & 0x200) != 0)) {\u000a    _Var2 = i_ring_empty(&sp->fts_fd_ring);\u000a    if (_Var2 == false) {\u000a      __fd = i_ring_pop(&sp->fts_fd_ring);\u000a      if (-1 < __fd) {\u000a        dir_00 = (byte *)0x0;\u000a        __fd_00 = __fd;\u000a      }\u000a    }\u000a  }\u000a  __fd = __fd_00;\u000a  if ((__fd_00 < 0) && (__fd = diropen(sp,(char *)dir_00), __fd < 0)) {\u000a    return -1;\u000a  }\u000a  if (((*(byte *)&sp->fts_options & 2) == 0) &&\u000a     (((dir_00 == (byte *)0x0 || (*dir_00 != 0x2e)) || ((dir_00[1] != 0x2e || (dir_00[2] != 0))))))\u000a  {\u000aLAB_00406c91:\u000a    if ((*(byte *)((long)&sp->fts_options + 1) & 2) != 0) {\u000a      cwd_advance_fd(sp);\u000a      return 0;\u000a    }\u000a    iVar3 = fchdir(__fd);\u000a  }\u000a  else {\u000a    iVar3 = fstat(__fd,&local_c0);\u000a    if (iVar3 == 0) {\u000a      if ((p->fts_statp[0].st_dev == local_c0.st_dev) && (p->fts_statp[0].st_ino == local_c0.st_ino)\u000a         ) goto LAB_00406c91;\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 2;\u000a    }\u000a    iVar3 = -1;\u000a  }\u000a  if (__fd_00 < 0) {\u000a    piVar4 = __errno_location();\u000a    __fd_00 = *piVar4;\u000a    close(__fd);\u000a    *piVar4 = __fd_00;\u000a  }\u000a  return iVar3;\u000a}\u000a\u000a
p1522
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV RBX,RCX\nMOV R13D,EDX\nMOV RBP,RSI\nMOV R14,RDI\nTEST RBX,RBX\nJZ 0x00406bdb\nMOVZX EDX,byte ptr [RBX]\nMOV ECX,0x2e\nMOV EAX,0x2e\nSUB EAX,EDX\nJNZ 0x00406bd3\nMOVZX EAX,byte ptr [RBX + 0x1]\nSUB ECX,EAX\nMOV EAX,ECX\nJNZ 0x00406bd3\nMOVZX EAX,byte ptr [RBX + 0x2]\nNEG EAX\nTEST EAX,EAX\nSETZ R15B\nJMP 0x00406bde\nXOR R15D,R15D\nMOV EAX,dword ptr [R14 + 0x48]\nTEST AL,0x4\nJNZ 0x00406ca9\nTEST R13D,R13D\nJNS 0x00406c2b\nMOV ECX,R15D\nXOR CL,0x1\nJNZ 0x00406c2b\nAND EAX,0x200\nJZ 0x00406c2b\nMOV R12,RBP\nLEA RBP,[R14 + 0x60]\nMOV RDI,RBP\nCALL 0x00408da0\nTEST AL,AL\nJNZ 0x00406c28\nMOV RDI,RBP\nCALL 0x00408df0\nXOR ECX,ECX\nTEST EAX,EAX\nCMOVNS RBX,RCX\nCMOVNS R13D,EAX\nMOV R15B,0x1\nMOV RBP,R12\nTEST R13D,R13D\nMOV R12D,R13D\nJNS 0x00406c4a\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00406330\nMOV R12D,EAX\nTEST R12D,R12D\nJS 0x00406cd8\nTEST byte ptr [R14 + 0x48],0x2\nJNZ 0x00406c67\nTEST RBX,RBX\nJZ 0x00406c91\nCMP byte ptr [RBX],0x2e\nJNZ 0x00406c91\nCMP byte ptr [RBX + 0x1],0x2e\nJNZ 0x00406c91\nCMP byte ptr [RBX + 0x2],0x0\nJNZ 0x00406c91\nLEA RSI,[RSP + 0x8]\nMOV EDI,R12D\nCALL 0x00409720\nTEST EAX,EAX\nJNZ 0x00406cea\nMOV RAX,qword ptr [RBP + 0x78]\nCMP RAX,qword ptr [RSP + 0x8]\nJNZ 0x00406cdf\nMOV RAX,qword ptr [0x80 + RBP]\nCMP RAX,qword ptr [RSP + 0x10]\nJNZ 0x00406cdf\nTEST byte ptr [R14 + 0x49],0x2\nJNZ 0x00406cc1\nMOV EDI,R12D\nCALL 0x00401b10\nMOV EBX,EAX\nTEST R13D,R13D\nJNS 0x00406d0c\nJMP 0x00406cf4\nXOR EBX,EBX\nTEST R13D,R13D\nJS 0x00406d0c\nAND EAX,0x200\nJZ 0x00406d0c\nMOV EDI,R13D\nCALL 0x004019c0\nJMP 0x00406d0c\nXOR EDX,EDX\nTEST R15B,R15B\nSETZ DL\nMOV RDI,R14\nMOV ESI,R12D\nCALL 0x00407670\nXOR EBX,EBX\nJMP 0x00406d0c\nMOV EBX,0xffffffff\nJMP 0x00406d0c\nCALL 0x00401800\nMOV dword ptr [RAX],0x2\nMOV EBX,0xffffffff\nTEST R13D,R13D\nJNS 0x00406d0c\nCALL 0x00401800\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV EDI,R12D\nCALL 0x004019c0\nMOV dword ptr [RBP],R14D\nMOV EAX,EBX\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1523
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n48 89 cb\n41 89 d5\n48 89 f5\n49 89 fe\n48 85 db\n74 29\n0f b6 13\nb9 2e 00 00 00\nb8 2e 00 00 00\n29 d0\n75 10\n0f b6 43 01\n29 c1\n89 c8\n75 06\n0f b6 43 02\nf7 d8\n85 c0\n41 0f 94 c7\neb 03\n45 31 ff\n41 8b 46 48\na8 04\n0f 85 bf 00 00 00\n45 85 ed\n79 3c\n44 89 f9\n80 f1 01\n75 34\n25 00 02 00 00\n74 2d\n49 89 ec\n49 8d 6e 60\n48 89 ef\ne8 93 21 00 00\n84 c0\n75 17\n48 89 ef\ne8 d7 21 00 00\n31 c9\n85 c0\n48 0f 49 d9\n44 0f 49 e8\n41 b7 01\n4c 89 e5\n45 85 ed\n45 89 ec\n79 17\n4c 89 f7\n48 89 de\ne8 f2 f6 ff ff\n41 89 c4\n45 85 e4\n0f 88 8e 00 00 00\n41 f6 46 48 02\n75 16\n48 85 db\n74 3b\n80 3b 2e\n75 36\n80 7b 01 2e\n75 30\n80 7b 02 00\n75 2a\n48 8d 74 24 08\n44 89 e7\ne8 ac 2a 00 00\n85 c0\n75 72\n48 8b 45 78\n48 3b 44 24 08\n75 5c\n48 8b 85 80 00 00 00\n48 3b 44 24 10\n75 4e\n41 f6 46 49 02\n75 29\n44 89 e7\ne8 70 ae ff ff\n89 c3\n45 85 ed\n79 65\neb 4b\n31 db\n45 85 ed\n78 5c\n25 00 02 00 00\n74 55\n44 89 ef\ne8 01 ad ff ff\neb 4b\n31 d2\n45 84 ff\n0f 94 c2\n4c 89 f7\n44 89 e6\ne8 9c 09 00 00\n31 db\neb 34\nbb ff ff ff ff\neb 2d\ne8 1c ab ff ff\nc7 00 02 00 00 00\nbb ff ff ff ff\n45 85 ed\n79 18\ne8 07 ab ff ff\n48 89 c5\n44 8b 75 00\n44 89 e7\ne8 b8 ac ff ff\n44 89 75 00\n89 d8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1524
S'.text:0000000000406b90\n.text:0000000000406b91\n.text:0000000000406b93\n.text:0000000000406b95\n.text:0000000000406b97\n.text:0000000000406b99\n.text:0000000000406b9a\n.text:0000000000406ba1\n.text:0000000000406ba4\n.text:0000000000406ba7\n.text:0000000000406baa\n.text:0000000000406bad\n.text:0000000000406bb0\n.text:0000000000406bb2\n.text:0000000000406bb5\n.text:0000000000406bba\n.text:0000000000406bbf\n.text:0000000000406bc1\n.text:0000000000406bc3\n.text:0000000000406bc7\n.text:0000000000406bc9\n.text:0000000000406bcb\n.text:0000000000406bcd\n.text:0000000000406bd1\n.text:0000000000406bd3\n.text:0000000000406bd5\n.text:0000000000406bd9\n.text:0000000000406bdb\n.text:0000000000406bde\n.text:0000000000406be2\n.text:0000000000406be4\n.text:0000000000406bea\n.text:0000000000406bed\n.text:0000000000406bef\n.text:0000000000406bf2\n.text:0000000000406bf5\n.text:0000000000406bf7\n.text:0000000000406bfc\n.text:0000000000406bfe\n.text:0000000000406c01\n.text:0000000000406c05\n.text:0000000000406c08\n.text:0000000000406c0d\n.text:0000000000406c0f\n.text:0000000000406c11\n.text:0000000000406c14\n.text:0000000000406c19\n.text:0000000000406c1b\n.text:0000000000406c1d\n.text:0000000000406c21\n.text:0000000000406c25\n.text:0000000000406c28\n.text:0000000000406c2b\n.text:0000000000406c2e\n.text:0000000000406c31\n.text:0000000000406c33\n.text:0000000000406c36\n.text:0000000000406c39\n.text:0000000000406c3e\n.text:0000000000406c41\n.text:0000000000406c44\n.text:0000000000406c4a\n.text:0000000000406c4f\n.text:0000000000406c51\n.text:0000000000406c54\n.text:0000000000406c56\n.text:0000000000406c59\n.text:0000000000406c5b\n.text:0000000000406c5f\n.text:0000000000406c61\n.text:0000000000406c65\n.text:0000000000406c67\n.text:0000000000406c6c\n.text:0000000000406c6f\n.text:0000000000406c74\n.text:0000000000406c76\n.text:0000000000406c78\n.text:0000000000406c7c\n.text:0000000000406c81\n.text:0000000000406c83\n.text:0000000000406c8a\n.text:0000000000406c8f\n.text:0000000000406c91\n.text:0000000000406c96\n.text:0000000000406c98\n.text:0000000000406c9b\n.text:0000000000406ca0\n.text:0000000000406ca2\n.text:0000000000406ca5\n.text:0000000000406ca7\n.text:0000000000406ca9\n.text:0000000000406cab\n.text:0000000000406cae\n.text:0000000000406cb0\n.text:0000000000406cb5\n.text:0000000000406cb7\n.text:0000000000406cba\n.text:0000000000406cbf\n.text:0000000000406cc1\n.text:0000000000406cc3\n.text:0000000000406cc6\n.text:0000000000406cc9\n.text:0000000000406ccc\n.text:0000000000406ccf\n.text:0000000000406cd4\n.text:0000000000406cd6\n.text:0000000000406cd8\n.text:0000000000406cdd\n.text:0000000000406cdf\n.text:0000000000406ce4\n.text:0000000000406cea\n.text:0000000000406cef\n.text:0000000000406cf2\n.text:0000000000406cf4\n.text:0000000000406cf9\n.text:0000000000406cfc\n.text:0000000000406d00\n.text:0000000000406d03\n.text:0000000000406d08\n.text:0000000000406d0c\n.text:0000000000406d0e\n.text:0000000000406d15\n.text:0000000000406d16\n.text:0000000000406d18\n.text:0000000000406d1a\n.text:0000000000406d1c\n.text:0000000000406d1e\n.text:0000000000406d1f\n'
p1525
tp1526
sS'i_ring_init'
p1527
(S'\n__stdcall i_ring_init(I_ring * ir)\n'
p1528
V\u000avoid i_ring_init(I_ring *ir)\u000a\u000a{\u000a  long lVar1;\u000a  int in_ESI;\u000a  \u000a  ir->ir_empty = true;\u000a  *(undefined8 *)&ir->ir_front = 0;\u000a  lVar1 = 0;\u000a  do {\u000a    ir->ir_data[lVar1] = in_ESI;\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 4);\u000a  ir->ir_default_val = in_ESI;\u000a  return;\u000a}\u000a\u000a
p1529
S'MOV byte ptr [RDI + 0x1c],0x1\nMOV qword ptr [RDI + 0x14],0x0\nXOR EAX,EAX\nNOP\nMOV dword ptr [RDI + RAX*0x4],ESI\nINC RAX\nCMP RAX,0x4\nJNZ 0x00408d90\nMOV dword ptr [RDI + 0x10],ESI\nRET\n'
p1530
S'c6 47 1c 01\n48 c7 47 14 00 00 00 00\n31 c0\n66 90\n89 34 87\n48 ff c0\n48 83 f8 04\n75 f4\n89 77 10\nc3\n'
p1531
S'.text:0000000000408d80\n.text:0000000000408d84\n.text:0000000000408d8c\n.text:0000000000408d8e\n.text:0000000000408d90\n.text:0000000000408d93\n.text:0000000000408d96\n.text:0000000000408d9a\n.text:0000000000408d9c\n.text:0000000000408d9f\n'
p1532
tp1533
sS'__errno_location'
p1534
(S'\n__stdcall __errno_location()\n'
p1535
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_0060f038)();\u000a  return piVar1;\u000a}\u000a\u000a
p1536
S'JMP qword ptr [0x0060f038]\n'
p1537
S'ff 25 32 d8 20 00\n'
p1538
S'.plt:0000000000401800\n'
p1539
tp1540
sS'x2nrealloc'
p1541
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p1542
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p1543
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x004056dc\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00405709\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x004056fa\nTEST RCX,RCX\nJNZ 0x004056fa\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00405680\nPUSH RAX\nCALL 0x004057d0\n'
p1544
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p1545
S'.text:00000000004056b0\n.text:00000000004056b3\n.text:00000000004056b6\n.text:00000000004056b9\n.text:00000000004056bb\n.text:00000000004056c5\n.text:00000000004056c7\n.text:00000000004056ca\n.text:00000000004056cd\n.text:00000000004056cf\n.text:00000000004056d2\n.text:00000000004056d5\n.text:00000000004056da\n.text:00000000004056dc\n.text:00000000004056df\n.text:00000000004056e1\n.text:00000000004056e6\n.text:00000000004056e8\n.text:00000000004056eb\n.text:00000000004056ed\n.text:00000000004056f4\n.text:00000000004056f7\n.text:00000000004056fa\n.text:00000000004056fd\n.text:0000000000405701\n.text:0000000000405704\n.text:0000000000405709\n.text:000000000040570a\n'
p1546
tp1547
sS'quotearg_n_options'
p1548
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p1549
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p1550
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x00401800\nTEST R12D,R12D\nJS 0x00404621\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x0060f288]\nCMP dword ptr [0x0060f290],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x0040453b\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x60f298\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00405680\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x0060f288],R15\nJNZ 0x00404502\nMOVUPS XMM0,xmmword ptr [0x0060f298]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x0060f290]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x004019a0\nMOV dword ptr [0x0060f290],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00403690\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040459d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x0040460b\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x60f3a0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x004045c8\nCALL 0x004017e0\nMOV RDI,R15\nCALL 0x00405710\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00403690\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004017f0\n'
p1551
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 71 d3 ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 de ad 20 00\n44 39 25 df ad 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 98 f2 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 98 11 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 93 ad 20 00\n75 0b\n0f 10 05 9a ad 20 00\n41 0f 11 07\n8b 05 88 ad 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 7d d4 ff ff\n89 1d 67 ad 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 a0 f3 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 18 d2 ff ff\n4c 89 ff\ne8 40 11 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 ca d1 ff ff\n'
p1552
S'.text:0000000000404470\n.text:0000000000404471\n.text:0000000000404473\n.text:0000000000404475\n.text:0000000000404477\n.text:0000000000404479\n.text:000000000040447a\n.text:000000000040447e\n.text:0000000000404481\n.text:0000000000404484\n.text:0000000000404487\n.text:000000000040448a\n.text:000000000040448f\n.text:0000000000404492\n.text:0000000000404498\n.text:000000000040449d\n.text:000000000040449f\n.text:00000000004044a3\n.text:00000000004044aa\n.text:00000000004044b1\n.text:00000000004044b6\n.text:00000000004044bb\n.text:00000000004044c0\n.text:00000000004044c2\n.text:00000000004044c7\n.text:00000000004044ca\n.text:00000000004044cd\n.text:00000000004044d3\n.text:00000000004044d5\n.text:00000000004044d8\n.text:00000000004044dc\n.text:00000000004044df\n.text:00000000004044e3\n.text:00000000004044e8\n.text:00000000004044eb\n.text:00000000004044ee\n.text:00000000004044f5\n.text:00000000004044f7\n.text:00000000004044fe\n.text:0000000000404502\n.text:0000000000404508\n.text:000000000040450b\n.text:000000000040450f\n.text:0000000000404512\n.text:0000000000404515\n.text:0000000000404519\n.text:000000000040451b\n.text:000000000040451e\n.text:0000000000404523\n.text:0000000000404529\n.text:000000000040452c\n.text:0000000000404531\n.text:0000000000404536\n.text:000000000040453b\n.text:000000000040453e\n.text:0000000000404542\n.text:0000000000404546\n.text:000000000040454b\n.text:000000000040454f\n.text:0000000000404553\n.text:0000000000404557\n.text:000000000040455b\n.text:000000000040455f\n.text:0000000000404564\n.text:0000000000404567\n.text:000000000040456a\n.text:000000000040456d\n.text:0000000000404572\n.text:0000000000404575\n.text:0000000000404578\n.text:000000000040457b\n.text:000000000040457c\n.text:0000000000404581\n.text:0000000000404585\n.text:0000000000404588\n.text:000000000040458b\n.text:000000000040458d\n.text:0000000000404592\n.text:0000000000404596\n.text:000000000040459b\n.text:000000000040459d\n.text:00000000004045a1\n.text:00000000004045a6\n.text:00000000004045a9\n.text:00000000004045ac\n.text:00000000004045b1\n.text:00000000004045b6\n.text:00000000004045b9\n.text:00000000004045be\n.text:00000000004045c1\n.text:00000000004045c3\n.text:00000000004045c8\n.text:00000000004045cb\n.text:00000000004045d0\n.text:00000000004045d3\n.text:00000000004045d6\n.text:00000000004045db\n.text:00000000004045de\n.text:00000000004045e2\n.text:00000000004045e5\n.text:00000000004045e8\n.text:00000000004045ed\n.text:00000000004045f2\n.text:00000000004045f7\n.text:00000000004045fa\n.text:00000000004045fd\n.text:00000000004045fe\n.text:0000000000404603\n.text:0000000000404607\n.text:000000000040460b\n.text:000000000040460f\n.text:0000000000404612\n.text:0000000000404616\n.text:0000000000404617\n.text:0000000000404619\n.text:000000000040461b\n.text:000000000040461d\n.text:000000000040461f\n.text:0000000000404620\n.text:0000000000404621\n'
p1553
tp1554
sS'strcmp'
p1555
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p1556
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_0060f148)();\u000a  return iVar1;\u000a}\u000a\u000a
p1557
S'JMP qword ptr [0x0060f148]\n'
p1558
S'ff 25 22 d7 20 00\n'
p1559
S'.plt:0000000000401a20\n'
p1560
tp1561
sS'rotr64'
p1562
(S'\n__stdcall rotr64(uint64_t x)\n'
p1563
V\u000auint64_t rotr64(uint64_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x >> bVar1 | x << 0x40 - bVar1;\u000a}\u000a\u000a
p1564
S'MOV ECX,ESI\nROR RDI,CL\nMOV RAX,RDI\nRET\n'
p1565
S'89 f1\n48 d3 cf\n48 89 f8\nc3\n'
p1566
S'.text:0000000000409590\n.text:0000000000409592\n.text:0000000000409595\n.text:0000000000409598\n'
p1567
tp1568
sS'set_custom_quoting'
p1569
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p1570
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1571
S'TEST RDI,RDI\nMOV EAX,0x60f360\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x00403605\nTEST RDX,RDX\nJZ 0x00403605\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x004017f0\n'
p1572
S'48 85 ff\nb8 60 f3 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 e5 e1 ff ff\n'
p1573
S'.text:00000000004035e0\n.text:00000000004035e3\n.text:00000000004035e8\n.text:00000000004035ec\n.text:00000000004035f2\n.text:00000000004035f5\n.text:00000000004035f7\n.text:00000000004035fa\n.text:00000000004035fc\n.text:0000000000403600\n.text:0000000000403604\n.text:0000000000403605\n.text:0000000000403606\n'
p1574
tp1575
sS'c_isalpha'
p1576
(S'\n__stdcall c_isalpha()\n'
p1577
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p1578
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00407a7b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p1579
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p1580
S'.text:0000000000407a60\n.text:0000000000407a63\n.text:0000000000407a66\n.text:0000000000407a68\n.text:0000000000407a72\n.text:0000000000407a74\n.text:0000000000407a77\n.text:0000000000407a7a\n.text:0000000000407a7b\n.text:0000000000407a7d\n'
p1581
tp1582
sS'quotearg_custom_mem'
p1583
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p1584
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p1585
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00404880\n'
p1586
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p1587
S'.text:0000000000404910\n.text:0000000000404913\n.text:0000000000404916\n.text:0000000000404919\n.text:000000000040491c\n.text:000000000040491e\n.text:0000000000404921\n'
p1588
tp1589
sS'hash_get_max_bucket_length'
p1590
(S'\n__stdcall hash_get_max_bucket_length(Hash_table * table)\n'
p1591
V\u000asize_t hash_get_max_bucket_length(Hash_table *table)\u000a\u000a{\u000a  ulong uVar1;\u000a  hash_entry *phVar2;\u000a  ulong uVar3;\u000a  hash_entry *phVar4;\u000a  \u000a  phVar2 = table->bucket;\u000a  if (phVar2 < table->bucket_limit) {\u000a    uVar1 = 0;\u000a    do {\u000a      if (phVar2->data != (void *)0x0) {\u000a        uVar3 = 0;\u000a        phVar4 = phVar2;\u000a        do {\u000a          phVar4 = phVar4->next;\u000a          uVar3 = uVar3 + 1;\u000a        } while (phVar4 != (hash_entry *)0x0);\u000a        if (uVar1 < uVar3) {\u000a          uVar1 = uVar3;\u000a        }\u000a      }\u000a      phVar2 = phVar2 + 1;\u000a    } while (phVar2 < table->bucket_limit);\u000a    return uVar1;\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1592
S'MOV RCX,qword ptr [RDI]\nCMP RCX,qword ptr [RDI + 0x8]\nJNC 0x00407e3d\nMOV RDX,qword ptr [RDI + 0x8]\nXOR EAX,EAX\nNOP\nCMP qword ptr [RCX],0x0\nJZ 0x00407e33\nXOR ESI,ESI\nMOV RDI,RCX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDI,qword ptr [RDI + 0x8]\nINC RSI\nTEST RDI,RDI\nJNZ 0x00407e20\nCMP RSI,RAX\nCMOVA RAX,RSI\nADD RCX,0x10\nCMP RCX,RDX\nJC 0x00407e10\nRET\nXOR EAX,EAX\nRET\n'
p1593
S'48 8b 0f\n48 3b 4f 08\n73 34\n48 8b 57 08\n31 c0\n90\n48 83 39 00\n74 1d\n31 f6\n48 89 cf\n0f 1f 44 00 00\n48 8b 7f 08\n48 ff c6\n48 85 ff\n75 f4\n48 39 c6\n48 0f 47 c6\n48 83 c1 10\n48 39 d1\n72 d4\nc3\n31 c0\nc3\n'
p1594
S'.text:0000000000407e00\n.text:0000000000407e03\n.text:0000000000407e07\n.text:0000000000407e09\n.text:0000000000407e0d\n.text:0000000000407e0f\n.text:0000000000407e10\n.text:0000000000407e14\n.text:0000000000407e16\n.text:0000000000407e18\n.text:0000000000407e1b\n.text:0000000000407e20\n.text:0000000000407e24\n.text:0000000000407e27\n.text:0000000000407e2a\n.text:0000000000407e2c\n.text:0000000000407e2f\n.text:0000000000407e33\n.text:0000000000407e37\n.text:0000000000407e3a\n.text:0000000000407e3c\n.text:0000000000407e3d\n.text:0000000000407e3f\n'
p1595
tp1596
sS'rpl_calloc'
p1597
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p1598
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_0060f140)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p1599
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00405b7b\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00405b80\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00405b80\nPUSH RAX\nCALL 0x00401800\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401a10\n'
p1600
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 8f bc ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 85 be ff ff\n'
p1601
S'.text:0000000000405b40\n.text:0000000000405b43\n.text:0000000000405b48\n.text:0000000000405b4a\n.text:0000000000405b4d\n.text:0000000000405b52\n.text:0000000000405b54\n.text:0000000000405b57\n.text:0000000000405b5b\n.text:0000000000405b5d\n.text:0000000000405b60\n.text:0000000000405b63\n.text:0000000000405b66\n.text:0000000000405b69\n.text:0000000000405b6b\n.text:0000000000405b6c\n.text:0000000000405b71\n.text:0000000000405b77\n.text:0000000000405b79\n.text:0000000000405b7a\n.text:0000000000405b7b\n.text:0000000000405b80\n.text:0000000000405b83\n.text:0000000000405b86\n'
p1602
tp1603
sS'memset'
p1604
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p1605
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_0060f108)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1606
S'JMP qword ptr [0x0060f108]\n'
p1607
S'ff 25 62 d7 20 00\n'
p1608
S'.plt:00000000004019a0\n'
p1609
tp1610
sS'get_root_dev_ino'
p1611
(S'\n__stdcall get_root_dev_ino(dev_ino * root_d_i)\n'
p1612
V\u000adev_ino * get_root_dev_ino(dev_ino *root_d_i)\u000a\u000a{\u000a  int iVar1;\u000a  stat local_98;\u000a  \u000a  iVar1 = lstat("/",&local_98);\u000a  if (iVar1 == 0) {\u000a    root_d_i->st_ino = local_98.st_ino;\u000a    root_d_i->st_dev = local_98.st_dev;\u000a  }\u000a  else {\u000a    root_d_i = (dev_ino *)0x0;\u000a  }\u000a  return root_d_i;\u000a}\u000a\u000a
p1613
S'PUSH RBX\nSUB RSP,0x90\nMOV RBX,RDI\nMOV RSI,RSP\nMOV EDI,0x40ae3a\nCALL 0x00409730\nTEST EAX,EAX\nJZ 0x00404d90\nXOR EBX,EBX\nJMP 0x00404da0\nMOV RAX,qword ptr [RSP + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RAX,qword ptr [RSP]\nMOV qword ptr [RBX + 0x8],RAX\nMOV RAX,RBX\nADD RSP,0x90\nPOP RBX\nRET\n'
p1614
S'53\n48 81 ec 90 00 00 00\n48 89 fb\n48 89 e6\nbf 3a ae 40 00\ne8 a8 49 00 00\n85 c0\n74 04\n31 db\neb 10\n48 8b 44 24 08\n48 89 03\n48 8b 04 24\n48 89 43 08\n48 89 d8\n48 81 c4 90 00 00 00\n5b\nc3\n'
p1615
S'.text:0000000000404d70\n.text:0000000000404d71\n.text:0000000000404d78\n.text:0000000000404d7b\n.text:0000000000404d7e\n.text:0000000000404d83\n.text:0000000000404d88\n.text:0000000000404d8a\n.text:0000000000404d8c\n.text:0000000000404d8e\n.text:0000000000404d90\n.text:0000000000404d95\n.text:0000000000404d98\n.text:0000000000404d9c\n.text:0000000000404da0\n.text:0000000000404da3\n.text:0000000000404daa\n.text:0000000000404dab\n'
p1616
tp1617
sS'getc_unlocked'
p1618
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p1619
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_0060f060)();\u000a  return iVar1;\u000a}\u000a\u000a
p1620
S'JMP qword ptr [0x0060f060]\n'
p1621
S'ff 25 0a d8 20 00\n'
p1622
S'.plt:0000000000401850\n'
p1623
tp1624
sS'memmove'
p1625
(S'\n__stdcall memmove(void * __dest, void * __src, size_t __n)\n'
p1626
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memmove(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memmove_0060f1e8)();\u000a  return pvVar1;\u000a}\u000a\u000a
p1627
S'JMP qword ptr [0x0060f1e8]\n'
p1628
S'ff 25 82 d6 20 00\n'
p1629
S'.plt:0000000000401b60\n'
p1630
tp1631
sS'c_isascii'
p1632
(S'\n__stdcall c_isascii()\n'
p1633
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p1634
S'CMP EDI,0x80\nSETC AL\nRET\n'
p1635
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p1636
S'.text:0000000000407a80\n.text:0000000000407a86\n.text:0000000000407a89\n'
p1637
tp1638
sS'hash_insert_if_absent'
p1639
(S'\n__stdcall hash_insert_if_absent(Hash_table * table, void * entry, void * * matched_ent)\n'
p1640
V\u000a/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\u000a\u000aint hash_insert_if_absent(Hash_table *table,void *entry,void **matched_ent)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  Hash_tuning *pHVar3;\u000a  _Bool _Var4;\u000a  hash_entry *in_RAX;\u000a  void *pvVar5;\u000a  hash_entry *phVar6;\u000a  size_t candidate;\u000a  float fVar7;\u000a  float fVar8;\u000a  hash_entry *local_28;\u000a  \u000a  if (entry != (void *)0x0) {\u000a    local_28 = in_RAX;\u000a    pvVar5 = hash_find_entry(table,entry,&local_28);\u000a    if (pvVar5 != (void *)0x0) {\u000a      if (matched_ent == (void **)0x0) {\u000a        return 0;\u000a      }\u000a      *matched_ent = pvVar5;\u000a      return 0;\u000a    }\u000a    uVar1 = table->n_buckets;\u000a    uVar2 = table->n_buckets_used;\u000a    if ((long)uVar2 < 0) {\u000a      fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a      fVar7 = fVar7 + fVar7;\u000a    }\u000a    else {\u000a      fVar7 = (float)uVar2;\u000a    }\u000a    if ((long)uVar1 < 0) {\u000a      fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a      fVar8 = fVar8 + fVar8;\u000a    }\u000a    else {\u000a      fVar8 = (float)uVar1;\u000a    }\u000a    if (fVar8 * table->tuning->growth_threshold < fVar7) {\u000a      check_tuning(table);\u000a      uVar1 = table->n_buckets;\u000a      uVar2 = table->n_buckets_used;\u000a      if ((long)uVar2 < 0) {\u000a        fVar7 = (float)((ulong)((uint)uVar2 & 1) | uVar2 >> 1);\u000a        fVar7 = fVar7 + fVar7;\u000a      }\u000a      else {\u000a        fVar7 = (float)uVar2;\u000a      }\u000a      pHVar3 = table->tuning;\u000a      if ((long)uVar1 < 0) {\u000a        fVar8 = (float)((ulong)((uint)uVar1 & 1) | uVar1 >> 1);\u000a        fVar8 = fVar8 + fVar8;\u000a      }\u000a      else {\u000a        fVar8 = (float)uVar1;\u000a      }\u000a      if (pHVar3->growth_threshold * fVar8 < fVar7) {\u000a        fVar8 = fVar8 * pHVar3->growth_factor;\u000a        if (pHVar3->is_n_buckets == false) {\u000a          fVar8 = fVar8 * pHVar3->growth_threshold;\u000a        }\u000a        if (_DAT_0040bdac <= fVar8) {\u000a          return -1;\u000a        }\u000a        candidate = (long)fVar8;\u000a        if (DAT_0040bda8 <= fVar8) {\u000a          candidate = (long)(fVar8 - DAT_0040bda8) ^ 0x8000000000000000;\u000a        }\u000a        _Var4 = hash_rehash(table,candidate);\u000a        if (_Var4 == false) {\u000a          return -1;\u000a        }\u000a        pvVar5 = hash_find_entry(table,entry,&local_28);\u000a        if (pvVar5 != (void *)0x0) goto LAB_004089cd;\u000a      }\u000a    }\u000a    if (local_28->data == (void *)0x0) {\u000a      local_28->data = entry;\u000a      table->n_entries = table->n_entries + 1;\u000a      table->n_buckets_used = table->n_buckets_used + 1;\u000a    }\u000a    else {\u000a      phVar6 = allocate_entry(table);\u000a      if (phVar6 == (hash_entry *)0x0) {\u000a        return -1;\u000a      }\u000a      phVar6->data = entry;\u000a      phVar6->next = local_28->next;\u000a      local_28->next = phVar6;\u000a      table->n_entries = table->n_entries + 1;\u000a    }\u000a    return 1;\u000a  }\u000aLAB_004089cd:\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p1641
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDX\nMOV R14,RSI\nMOV R15,RDI\nTEST R14,R14\nJZ 0x004089cd\nMOV RDX,RSP\nXOR EBP,EBP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x004089e0\nTEST RAX,RAX\nJZ 0x00408841\nTEST RBX,RBX\nJZ 0x004089c0\nMOV qword ptr [RBX],RAX\nJMP 0x004089c0\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x00408855\nCVTSI2SS XMM0,RCX\nJMP 0x0040886a\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM0,RCX\nADDSS XMM0,XMM0\nMOV RCX,qword ptr [R15 + 0x28]\nTEST RAX,RAX\nJS 0x0040887a\nCVTSI2SS XMM1,RAX\nJMP 0x0040888f\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nCVTSI2SS XMM1,RAX\nADDSS XMM1,XMM1\nMULSS XMM1,dword ptr [RCX + 0x8]\nUCOMISS XMM0,XMM1\nJBE 0x00408979\nMOV RDI,R15\nCALL 0x00408310\nMOV RAX,qword ptr [R15 + 0x10]\nMOV RCX,qword ptr [R15 + 0x18]\nTEST RCX,RCX\nJS 0x004088b9\nCVTSI2SS XMM2,RCX\nJMP 0x004088ce\nMOV RDX,RCX\nSHR RDX,1\nAND ECX,0x1\nOR RCX,RDX\nCVTSI2SS XMM2,RCX\nADDSS XMM2,XMM2\nMOV RCX,qword ptr [R15 + 0x28]\nMOVSS XMM1,dword ptr [RCX + 0x8]\nTEST RAX,RAX\nJS 0x004088e6\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nJMP 0x004088fe\nMOV RDX,RAX\nSHR RDX,1\nAND EAX,0x1\nOR RAX,RDX\nXORPS XMM0,XMM0\nCVTSI2SS XMM0,RAX\nADDSS XMM0,XMM0\nMOVAPS XMM3,XMM1\nMULSS XMM3,XMM0\nUCOMISS XMM2,XMM3\nJBE 0x00408979\nCMP byte ptr [RCX + 0x10],0x0\nMULSS XMM0,dword ptr [RCX + 0xc]\nJNZ 0x00408919\nMULSS XMM0,XMM1\nMOV EBP,0xffffffff\nUCOMISS XMM0,dword ptr [0x0040bdac]\nJNC 0x004089c0\nMOVSS XMM1,dword ptr [0x0040bda8]\nMOVAPS XMM2,XMM0\nSUBSS XMM2,XMM1\nCVTTSS2SI RAX,XMM2\nMOV RCX,-0x8000000000000000\nXOR RCX,RAX\nCVTTSS2SI RSI,XMM0\nUCOMISS XMM0,XMM1\nCMOVNC RSI,RCX\nMOV RDI,R15\nCALL 0x004085b0\nTEST AL,AL\nJZ 0x004089c0\nMOV RDX,RSP\nXOR ECX,ECX\nMOV RDI,R15\nMOV RSI,R14\nCALL 0x004089e0\nTEST RAX,RAX\nJNZ 0x004089cd\nMOV RAX,qword ptr [RSP]\nCMP qword ptr [RAX],0x0\nJZ 0x004089a9\nMOV RDI,R15\nCALL 0x00408aa0\nTEST RAX,RAX\nJZ 0x004089bb\nMOV qword ptr [RAX],R14\nMOV RCX,qword ptr [RSP]\nMOV RDX,qword ptr [RCX + 0x8]\nMOV qword ptr [RAX + 0x8],RDX\nMOV qword ptr [RCX + 0x8],RAX\nINC qword ptr [R15 + 0x20]\nJMP 0x004089b4\nMOV qword ptr [RAX],R14\nINC qword ptr [R15 + 0x20]\nINC qword ptr [R15 + 0x18]\nMOV EBP,0x1\nJMP 0x004089c0\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x004017f0\n'
p1642
S'55\n41 57\n41 56\n53\n50\n48 89 d3\n49 89 f6\n49 89 ff\n4d 85 f6\n0f 84 b4 01 00 00\n48 89 e2\n31 ed\n31 c9\n4c 89 ff\n4c 89 f6\ne8 b5 01 00 00\n48 85 c0\n74 11\n48 85 db\n0f 84 87 01 00 00\n48 89 03\ne9 7f 01 00 00\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a c1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a c1\nf3 0f 58 c0\n49 8b 4f 28\n48 85 c0\n78 07\nf3 48 0f 2a c8\neb 15\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\nf3 48 0f 2a c8\nf3 0f 58 c9\nf3 0f 59 49 08\n0f 2e c1\n0f 86 dc 00 00 00\n4c 89 ff\ne8 6b fa ff ff\n49 8b 47 10\n49 8b 4f 18\n48 85 c9\n78 07\nf3 48 0f 2a d1\neb 15\n48 89 ca\n48 d1 ea\n83 e1 01\n48 09 d1\nf3 48 0f 2a d1\nf3 0f 58 d2\n49 8b 4f 28\nf3 0f 10 49 08\n48 85 c0\n78 0a\n0f 57 c0\nf3 48 0f 2a c0\neb 18\n48 89 c2\n48 d1 ea\n83 e0 01\n48 09 d0\n0f 57 c0\nf3 48 0f 2a c0\nf3 0f 58 c0\n0f 28 d9\nf3 0f 59 d8\n0f 2e d3\n76 6f\n80 79 10 00\nf3 0f 59 41 0c\n75 04\nf3 0f 59 c1\nbd ff ff ff ff\n0f 2e 05 87 34 00 00\n0f 83 95 00 00 00\nf3 0f 10 0d 75 34 00 00\n0f 28 d0\nf3 0f 5c d1\nf3 48 0f 2c c2\n48 b9 00 00 00 00 00 00 00 80\n48 31 c1\nf3 48 0f 2c f0\n0f 2e c1\n48 0f 43 f1\n4c 89 ff\ne8 50 fc ff ff\n84 c0\n74 5c\n48 89 e2\n31 c9\n4c 89 ff\n4c 89 f6\ne8 6c 00 00 00\n48 85 c0\n75 54\n48 8b 04 24\n48 83 38 00\n74 26\n4c 89 ff\ne8 15 01 00 00\n48 85 c0\n74 2b\n4c 89 30\n48 8b 0c 24\n48 8b 51 08\n48 89 50 08\n48 89 41 08\n49 ff 47 20\neb 0b\n4c 89 30\n49 ff 47 20\n49 ff 47 18\nbd 01 00 00 00\neb 05\nbd ff ff ff ff\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\ne8 1e 8e ff ff\n'
p1643
S'.text:0000000000408800\n.text:0000000000408801\n.text:0000000000408803\n.text:0000000000408805\n.text:0000000000408806\n.text:0000000000408807\n.text:000000000040880a\n.text:000000000040880d\n.text:0000000000408810\n.text:0000000000408813\n.text:0000000000408819\n.text:000000000040881c\n.text:000000000040881e\n.text:0000000000408820\n.text:0000000000408823\n.text:0000000000408826\n.text:000000000040882b\n.text:000000000040882e\n.text:0000000000408830\n.text:0000000000408833\n.text:0000000000408839\n.text:000000000040883c\n.text:0000000000408841\n.text:0000000000408845\n.text:0000000000408849\n.text:000000000040884c\n.text:000000000040884e\n.text:0000000000408853\n.text:0000000000408855\n.text:0000000000408858\n.text:000000000040885b\n.text:000000000040885e\n.text:0000000000408861\n.text:0000000000408866\n.text:000000000040886a\n.text:000000000040886e\n.text:0000000000408871\n.text:0000000000408873\n.text:0000000000408878\n.text:000000000040887a\n.text:000000000040887d\n.text:0000000000408880\n.text:0000000000408883\n.text:0000000000408886\n.text:000000000040888b\n.text:000000000040888f\n.text:0000000000408894\n.text:0000000000408897\n.text:000000000040889d\n.text:00000000004088a0\n.text:00000000004088a5\n.text:00000000004088a9\n.text:00000000004088ad\n.text:00000000004088b0\n.text:00000000004088b2\n.text:00000000004088b7\n.text:00000000004088b9\n.text:00000000004088bc\n.text:00000000004088bf\n.text:00000000004088c2\n.text:00000000004088c5\n.text:00000000004088ca\n.text:00000000004088ce\n.text:00000000004088d2\n.text:00000000004088d7\n.text:00000000004088da\n.text:00000000004088dc\n.text:00000000004088df\n.text:00000000004088e4\n.text:00000000004088e6\n.text:00000000004088e9\n.text:00000000004088ec\n.text:00000000004088ef\n.text:00000000004088f2\n.text:00000000004088f5\n.text:00000000004088fa\n.text:00000000004088fe\n.text:0000000000408901\n.text:0000000000408905\n.text:0000000000408908\n.text:000000000040890a\n.text:000000000040890e\n.text:0000000000408913\n.text:0000000000408915\n.text:0000000000408919\n.text:000000000040891e\n.text:0000000000408925\n.text:000000000040892b\n.text:0000000000408933\n.text:0000000000408936\n.text:000000000040893a\n.text:000000000040893f\n.text:0000000000408949\n.text:000000000040894c\n.text:0000000000408951\n.text:0000000000408954\n.text:0000000000408958\n.text:000000000040895b\n.text:0000000000408960\n.text:0000000000408962\n.text:0000000000408964\n.text:0000000000408967\n.text:0000000000408969\n.text:000000000040896c\n.text:000000000040896f\n.text:0000000000408974\n.text:0000000000408977\n.text:0000000000408979\n.text:000000000040897d\n.text:0000000000408981\n.text:0000000000408983\n.text:0000000000408986\n.text:000000000040898b\n.text:000000000040898e\n.text:0000000000408990\n.text:0000000000408993\n.text:0000000000408997\n.text:000000000040899b\n.text:000000000040899f\n.text:00000000004089a3\n.text:00000000004089a7\n.text:00000000004089a9\n.text:00000000004089ac\n.text:00000000004089b0\n.text:00000000004089b4\n.text:00000000004089b9\n.text:00000000004089bb\n.text:00000000004089c0\n.text:00000000004089c2\n.text:00000000004089c6\n.text:00000000004089c7\n.text:00000000004089c9\n.text:00000000004089cb\n.text:00000000004089cc\n.text:00000000004089cd\n'
p1644
tp1645
sS'dup_safer'
p1646
(S'\n__stdcall dup_safer()\n'
p1647
V\u000aint dup_safer(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 in_RDI;\u000a  \u000a  iVar1 = rpl_fcntl(in_RDI,0,3);\u000a  return iVar1;\u000a}\u000a\u000a
p1648
S'XOR ESI,ESI\nMOV EDX,0x3\nXOR EAX,EAX\nJMP 0x00409300\n'
p1649
S'31 f6\nba 03 00 00 00\n31 c0\ne9 d2 00 00 00\n'
p1650
S'.text:0000000000409220\n.text:0000000000409222\n.text:0000000000409227\n.text:0000000000409229\n'
p1651
tp1652
sS'dirfd'
p1653
(S'\n__stdcall dirfd(DIR * __dirp)\n'
p1654
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint dirfd(DIR *__dirp)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_dirfd_0060f150)();\u000a  return iVar1;\u000a}\u000a\u000a
p1655
S'JMP qword ptr [0x0060f150]\n'
p1656
S'ff 25 1a d7 20 00\n'
p1657
S'.plt:0000000000401a30\n'
p1658
tp1659
sS'diropen'
p1660
(S'\n__stdcall diropen(FTS * sp, char * dir)\n'
p1661
V\u000aint diropen(FTS *sp,char *dir)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  uint uVar3;\u000a  uint uVar4;\u000a  \u000a  uVar1 = sp->fts_options;\u000a  uVar3 = (uVar1 & 0x10) * 0x2000;\u000a  uVar4 = (uVar1 & 0x800) * 0x80 + 0x10900 + uVar3;\u000a  if ((uVar1 & 0x200) == 0) {\u000a    iVar2 = open_safer(dir,(ulong)uVar4);\u000a  }\u000a  else {\u000a    iVar2 = openat_safer((char *)(ulong)(uint)sp->fts_cwd_fd,dir,(ulong)uVar4,(ulong)uVar3);\u000a  }\u000a  if (-1 < iVar2) {\u000a    set_cloexec_flag();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1662
S'PUSH RBX\nMOV EAX,dword ptr [RDI + 0x48]\nMOV ECX,EAX\nAND ECX,0x10\nSHL ECX,0xd\nMOV EDX,EAX\nSHL EDX,0x7\nAND EDX,0x40000\nLEA EDX,[0x10900 + RDX + RCX*0x1]\nTEST AH,0x2\nJNZ 0x00406361\nXOR EAX,EAX\nMOV RDI,RSI\nMOV ESI,EDX\nCALL 0x00407d00\nJMP 0x0040636b\nMOV EDI,dword ptr [RDI + 0x2c]\nXOR EAX,EAX\nCALL 0x00409160\nMOV EBX,EAX\nTEST EBX,EBX\nJS 0x0040637d\nMOV ESI,0x1\nMOV EDI,EBX\nCALL 0x00407b80\nMOV EAX,EBX\nPOP RBX\nRET\n'
p1663
S'53\n8b 47 48\n89 c1\n83 e1 10\nc1 e1 0d\n89 c2\nc1 e2 07\n81 e2 00 00 04 00\n8d 94 0a 00 09 01 00\nf6 c4 02\n75 0e\n31 c0\n48 89 f7\n89 d6\ne8 a1 19 00 00\neb 0a\n8b 7f 2c\n31 c0\ne8 f5 2d 00 00\n89 c3\n85 db\n78 0c\nbe 01 00 00 00\n89 df\ne8 03 18 00 00\n89 d8\n5b\nc3\n'
p1664
S'.text:0000000000406330\n.text:0000000000406331\n.text:0000000000406334\n.text:0000000000406336\n.text:0000000000406339\n.text:000000000040633c\n.text:000000000040633e\n.text:0000000000406341\n.text:0000000000406347\n.text:000000000040634e\n.text:0000000000406351\n.text:0000000000406353\n.text:0000000000406355\n.text:0000000000406358\n.text:000000000040635a\n.text:000000000040635f\n.text:0000000000406361\n.text:0000000000406364\n.text:0000000000406366\n.text:000000000040636b\n.text:000000000040636d\n.text:000000000040636f\n.text:0000000000406371\n.text:0000000000406376\n.text:0000000000406378\n.text:000000000040637d\n.text:000000000040637f\n.text:0000000000406380\n'
p1665
tp1666
sS'rotr32'
p1667
(S'\n__stdcall rotr32()\n'
p1668
V\u000auint32_t rotr32(void)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  uint in_EDI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x1f;\u000a  return (uint32_t)(in_EDI >> bVar1 | in_EDI << 0x20 - bVar1);\u000a}\u000a\u000a
p1669
S'MOV ECX,ESI\nROR EDI,CL\nMOV EAX,EDI\nRET\n'
p1670
S'89 f1\nd3 cf\n89 f8\nc3\n'
p1671
S'.text:00000000004095b0\n.text:00000000004095b2\n.text:00000000004095b4\n.text:00000000004095b6\n'
p1672
tp1673
sS'__ctype_b_loc'
p1674
(S'\n__stdcall __ctype_b_loc()\n'
p1675
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_0060f260)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p1676
S'JMP qword ptr [0x0060f260]\n'
p1677
S'ff 25 0a d6 20 00\n'
p1678
S'.plt:0000000000401c50\n'
p1679
tp1680
sS'quotearg'
p1681
(S'\n__stdcall quotearg(char * arg)\n'
p1682
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p1683
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00404460\n'
p1684
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p1685
S'.text:0000000000404640\n.text:0000000000404643\n.text:0000000000404645\n.text:0000000000404648\n'
p1686
tp1687
sS'_start'
p1688
(S'\n__stdcall _start()\n'
p1689
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_0060eff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p1690
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x4096d0\nMOV RCX,0x409660\nMOV RDI,0x4020d0\nCALL qword ptr [0x0060eff0]\nHLT\n'
p1691
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 d0 96 40 00\n48 c7 c1 60 96 40 00\n48 c7 c7 d0 20 40 00\nff 15 66 d3 20 00\nf4\n'
p1692
S'.text:0000000000401c60\n.text:0000000000401c62\n.text:0000000000401c65\n.text:0000000000401c66\n.text:0000000000401c69\n.text:0000000000401c6d\n.text:0000000000401c6e\n.text:0000000000401c6f\n.text:0000000000401c76\n.text:0000000000401c7d\n.text:0000000000401c84\n.text:0000000000401c8a\n'
p1693
tp1694
sS'c_iscntrl'
p1695
(S'\n__stdcall c_iscntrl()\n'
p1696
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p1697
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00407aa8\nRET\nCMP EDI,0x7f\nJZ 0x00407aa7\nXOR EAX,EAX\nRET\n'
p1698
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p1699
S'.text:0000000000407aa0\n.text:0000000000407aa2\n.text:0000000000407aa5\n.text:0000000000407aa7\n.text:0000000000407aa8\n.text:0000000000407aab\n.text:0000000000407aad\n.text:0000000000407aaf\n'
p1700
tp1701
sS'hash_reset_tuning'
p1702
(S'\n__stdcall hash_reset_tuning(Hash_tuning * tuning)\n'
p1703
V\u000avoid hash_reset_tuning(Hash_tuning *tuning)\u000a\u000a{\u000a  float fVar1;\u000a  float fVar2;\u000a  float fVar3;\u000a  \u000a  *(undefined4 *)&tuning->is_n_buckets = default_tuning._16_4_;\u000a  fVar3 = default_tuning.growth_factor;\u000a  fVar2 = default_tuning.growth_threshold;\u000a  fVar1 = default_tuning.shrink_factor;\u000a  tuning->shrink_threshold = default_tuning.shrink_threshold;\u000a  tuning->shrink_factor = fVar1;\u000a  tuning->growth_threshold = fVar2;\u000a  tuning->growth_factor = fVar3;\u000a  return;\u000a}\u000a\u000a
p1704
S'MOV EAX,dword ptr [0x0040be2c]\nMOV dword ptr [RDI + 0x10],EAX\nMOVUPS XMM0,xmmword ptr [0x0040be1c]\nMOVUPS xmmword ptr [RDI],XMM0\nRET\n'
p1705
S'8b 05 46 3c 00 00\n89 47 10\n0f 10 05 2c 3c 00 00\n0f 11 07\nc3\n'
p1706
S'.text:00000000004081e0\n.text:00000000004081e6\n.text:00000000004081e9\n.text:00000000004081f0\n.text:00000000004081f3\n'
p1707
tp1708
sS'c_isblank'
p1709
(S'\n__stdcall c_isblank()\n'
p1710
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p1711
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p1712
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p1713
S'.text:0000000000407a90\n.text:0000000000407a93\n.text:0000000000407a96\n.text:0000000000407a99\n.text:0000000000407a9c\n.text:0000000000407a9e\n'
p1714
tp1715
sS'stpcpy'
p1716
(S'\n__stdcall stpcpy(char * __dest, char * __src)\n'
p1717
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * stpcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_stpcpy_0060f098)();\u000a  return pcVar1;\u000a}\u000a\u000a
p1718
S'JMP qword ptr [0x0060f098]\n'
p1719
S'ff 25 d2 d7 20 00\n'
p1720
S'.plt:00000000004018c0\n'
p1721
tp1722
sS'atexit'
p1723
(S'\n__stdcall atexit(__func * __func)\n'
p1724
V\u000a/* WARNING: Removing unreachable block (ram,0x00409700) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_0060f228)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p1725
S'MOV RAX,0x60f270\nTEST RAX,RAX\nJZ 0x00409700\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x00401be0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x00401be0\n'
p1726
S'48 c7 c0 70 f2 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 ea 84 ff ff\n31 d2\n31 f6\ne9 d7 84 ff ff\n'
p1727
S'.text:00000000004096e0\n.text:00000000004096e7\n.text:00000000004096ea\n.text:00000000004096ec\n.text:00000000004096ef\n.text:00000000004096f1\n.text:0000000000409700\n.text:0000000000409702\n.text:0000000000409704\n'
p1728
tp1729
sS'fdopen'
p1730
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p1731
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_0060f1d0)();\u000a  return pFVar1;\u000a}\u000a\u000a
p1732
S'JMP qword ptr [0x0060f1d0]\n'
p1733
S'ff 25 9a d6 20 00\n'
p1734
S'.plt:0000000000401b30\n'
p1735
tp1736
sS'hash_find_entry'
p1737
(S'\n__stdcall hash_find_entry(Hash_table * table, void * entry, hash_entry * * bucket_head)\n'
p1738
V\u000avoid * hash_find_entry(Hash_table *table,void *entry,hash_entry **bucket_head)\u000a\u000a{\u000a  undefined4 uVar1;\u000a  undefined4 uVar2;\u000a  undefined4 uVar3;\u000a  _Bool _Var4;\u000a  hash_entry *phVar5;\u000a  hash_entry *entry_00;\u000a  char in_CL;\u000a  hash_entry **pphVar6;\u000a  void *pvVar7;\u000a  \u000a  phVar5 = safe_hasher(table,entry);\u000a  *bucket_head = phVar5;\u000a  pvVar7 = phVar5->data;\u000a  if (pvVar7 == (void *)0x0) {\u000a    return (void *)0x0;\u000a  }\u000a  if ((pvVar7 == entry) || (_Var4 = (*table->comparator)(entry,pvVar7), _Var4 != false)) {\u000a    pvVar7 = phVar5->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      phVar5->data = (void *)0x0;\u000a      return pvVar7;\u000a    }\u000a    uVar1 = *(undefined4 *)((long)&entry_00->data + 4);\u000a    uVar2 = *(undefined4 *)&entry_00->next;\u000a    uVar3 = *(undefined4 *)((long)&entry_00->next + 4);\u000a    *(undefined4 *)&phVar5->data = *(undefined4 *)&entry_00->data;\u000a    *(undefined4 *)((long)&phVar5->data + 4) = uVar1;\u000a    *(undefined4 *)&phVar5->next = uVar2;\u000a    *(undefined4 *)((long)&phVar5->next + 4) = uVar3;\u000a  }\u000a  else {\u000a    entry_00 = phVar5->next;\u000a    if (entry_00 == (hash_entry *)0x0) {\u000a      return (void *)0x0;\u000a    }\u000a    while( true ) {\u000a      pphVar6 = &phVar5->next;\u000a      if ((entry_00->data == entry) ||\u000a         (_Var4 = (*table->comparator)(entry,entry_00->data), _Var4 != false)) break;\u000a      phVar5 = *pphVar6;\u000a      entry_00 = phVar5->next;\u000a      if (entry_00 == (hash_entry *)0x0) {\u000a        return (void *)0x0;\u000a      }\u000a    }\u000a    entry_00 = *pphVar6;\u000a    pvVar7 = entry_00->data;\u000a    if (in_CL == 0) {\u000a      return pvVar7;\u000a    }\u000a    *pphVar6 = entry_00->next;\u000a  }\u000a  free_entry(table,entry_00);\u000a  return pvVar7;\u000a}\u000a\u000a
p1739
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R12D,ECX\nMOV R14,RDX\nMOV RBP,RSI\nMOV R15,RDI\nCALL 0x00407ff0\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RSI,qword ptr [RBX]\nTEST RSI,RSI\nJZ 0x00408a65\nCMP RSI,RBP\nJZ 0x00408a17\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJZ 0x00408a30\nMOV R14,qword ptr [RBX]\nTEST R12B,R12B\nJZ 0x00408a8d\nMOV RSI,qword ptr [RBX + 0x8]\nTEST RSI,RSI\nJZ 0x00408a6a\nMOVUPS XMM0,xmmword ptr [RSI]\nMOVUPS xmmword ptr [RBX],XMM0\nJMP 0x00408a85\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nJZ 0x00408a65\nADD RBX,0x8\nXOR R14D,R14D\nMOV RSI,qword ptr [RAX]\nCMP RSI,RBP\nJZ 0x00408a73\nMOV RDI,RBP\nCALL qword ptr [R15 + 0x38]\nTEST AL,AL\nJNZ 0x00408a73\nMOV RBX,qword ptr [RBX]\nMOV RAX,qword ptr [RBX + 0x8]\nADD RBX,0x8\nTEST RAX,RAX\nJNZ 0x00408a40\nJMP 0x00408a8d\nXOR R14D,R14D\nJMP 0x00408a8d\nMOV qword ptr [RBX],0x0\nJMP 0x00408a8d\nMOV RSI,qword ptr [RBX]\nMOV R14,qword ptr [RSI]\nTEST R12B,R12B\nJZ 0x00408a8d\nMOV RAX,qword ptr [RSI + 0x8]\nMOV qword ptr [RBX],RAX\nMOV RDI,R15\nCALL 0x00408d60\nMOV RAX,R14\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1740
S'55\n41 57\n41 56\n41 54\n53\n41 89 cc\n49 89 d6\n48 89 f5\n49 89 ff\ne8 f7 f5 ff ff\n48 89 c3\n49 89 1e\n48 8b 33\n48 85 f6\n74 5e\n48 39 ee\n74 0b\n48 89 ef\n41 ff 57 38\n84 c0\n74 19\n4c 8b 33\n45 84 e4\n74 6e\n48 8b 73 08\n48 85 f6\n74 42\n0f 10 06\n0f 11 03\neb 55\n48 8b 43 08\n48 85 c0\n74 2c\n48 83 c3 08\n45 31 f6\n48 8b 30\n48 39 ee\n74 2b\n48 89 ef\n41 ff 57 38\n84 c0\n75 20\n48 8b 1b\n48 8b 43 08\n48 83 c3 08\n48 85 c0\n75 dd\neb 28\n45 31 f6\neb 23\n48 c7 03 00 00 00 00\neb 1a\n48 8b 33\n4c 8b 36\n45 84 e4\n74 0f\n48 8b 46 08\n48 89 03\n4c 89 ff\ne8 d3 02 00 00\n4c 89 f0\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1741
S'.text:00000000004089e0\n.text:00000000004089e1\n.text:00000000004089e3\n.text:00000000004089e5\n.text:00000000004089e7\n.text:00000000004089e8\n.text:00000000004089eb\n.text:00000000004089ee\n.text:00000000004089f1\n.text:00000000004089f4\n.text:00000000004089f9\n.text:00000000004089fc\n.text:00000000004089ff\n.text:0000000000408a02\n.text:0000000000408a05\n.text:0000000000408a07\n.text:0000000000408a0a\n.text:0000000000408a0c\n.text:0000000000408a0f\n.text:0000000000408a13\n.text:0000000000408a15\n.text:0000000000408a17\n.text:0000000000408a1a\n.text:0000000000408a1d\n.text:0000000000408a1f\n.text:0000000000408a23\n.text:0000000000408a26\n.text:0000000000408a28\n.text:0000000000408a2b\n.text:0000000000408a2e\n.text:0000000000408a30\n.text:0000000000408a34\n.text:0000000000408a37\n.text:0000000000408a39\n.text:0000000000408a3d\n.text:0000000000408a40\n.text:0000000000408a43\n.text:0000000000408a46\n.text:0000000000408a48\n.text:0000000000408a4b\n.text:0000000000408a4f\n.text:0000000000408a51\n.text:0000000000408a53\n.text:0000000000408a56\n.text:0000000000408a5a\n.text:0000000000408a5e\n.text:0000000000408a61\n.text:0000000000408a63\n.text:0000000000408a65\n.text:0000000000408a68\n.text:0000000000408a6a\n.text:0000000000408a71\n.text:0000000000408a73\n.text:0000000000408a76\n.text:0000000000408a79\n.text:0000000000408a7c\n.text:0000000000408a7e\n.text:0000000000408a82\n.text:0000000000408a85\n.text:0000000000408a88\n.text:0000000000408a8d\n.text:0000000000408a90\n.text:0000000000408a91\n.text:0000000000408a93\n.text:0000000000408a95\n.text:0000000000408a97\n.text:0000000000408a98\n'
p1742
tp1743
sS'error'
p1744
(S'\n__stdcall error()\n'
p1745
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_0060f1f0)();\u000a  return;\u000a}\u000a\u000a
p1746
S'JMP qword ptr [0x0060f1f0]\n'
p1747
S'ff 25 7a d6 20 00\n'
p1748
S'.plt:0000000000401b70\n'
p1749
tp1750
sS'chown_files'
p1751
(S'\n__stdcall chown_files(char * * files, Chown_option * chopt)\n'
p1752
V\u000a_Bool chown_files(char **files,Chown_option *chopt)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  FTS *sp;\u000a  FTSENT *ent;\u000a  uint *puVar3;\u000a  undefined8 uVar4;\u000a  uint in_EDX;\u000a  byte bVar5;\u000a  uint uVar6;\u000a  uint in_R8D;\u000a  uint in_R9D;\u000a  int *in_stack_00000008;\u000a  \u000a  uVar6 = 0;\u000a  if (((in_R9D & in_R8D) == 0xffffffff) && (uVar6 = 0, *(char *)(in_stack_00000008 + 4) == 0)) {\u000a    uVar6 = (uint)(*in_stack_00000008 == 2) << 3;\u000a  }\u000a  sp = xfts_open(files,(int (*)(FTSENT **,FTSENT **))(ulong)(uVar6 | (uint)chopt));\u000a  ent = fts_read(sp);\u000a  bVar5 = 1;\u000a  while (ent != (FTSENT *)0x0) {\u000a    _Var1 = change_file_owner(sp,ent,(Chown_option *)(ulong)in_EDX);\u000a    bVar5 = bVar5 & _Var1;\u000a    ent = fts_read(sp);\u000a  }\u000a  puVar3 = (uint *)__errno_location();\u000a  uVar6 = *puVar3;\u000a  if (uVar6 != 0) {\u000a    if (*(char *)((long)in_stack_00000008 + 0x11) == 0) {\u000a      bVar5 = 0;\u000a      uVar4 = dcgettext(0,"fts_read failed",5);\u000a      error(0,(ulong)uVar6,uVar4,uVar4);\u000a    }\u000a    else {\u000a      bVar5 = 0;\u000a    }\u000a  }\u000a  iVar2 = fts_close(sp);\u000a  if (iVar2 != 0) {\u000a    puVar3 = (uint *)__errno_location();\u000a    uVar6 = *puVar3;\u000a    bVar5 = 0;\u000a    uVar4 = dcgettext(0,"fts_close failed",5);\u000a    error(0,(ulong)uVar6,uVar4,uVar4);\u000a  }\u000a  return (_Bool)bVar5;\u000a}\u000a\u000a
p1753
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R15D,R9D\nMOV EBP,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EAX,ESI\nMOV RDX,qword ptr [RSP + 0x40]\nMOV ECX,R15D\nAND ECX,EBP\nXOR ESI,ESI\nCMP ECX,-0x1\nJNZ 0x0040263c\nCMP byte ptr [RDX + 0x10],0x0\nJNZ 0x0040263c\nXOR ESI,ESI\nCMP dword ptr [RDX],0x2\nSETZ SIL\nSHL ESI,0x3\nOR ESI,EAX\nXOR EDX,EDX\nCALL 0x00405800\nMOV R14,RAX\nMOV RDI,R14\nCALL 0x00406550\nMOV BL,0x1\nTEST RAX,RAX\nJZ 0x0040268f\nNOP word ptr [RAX + RAX*0x1]\nMOV RCX,qword ptr [RSP + 0x40]\nMOV qword ptr [RSP],RCX\nMOV RDI,R14\nMOV RSI,RAX\nMOV EDX,R13D\nMOV ECX,R12D\nMOV R8D,EBP\nMOV R9D,R15D\nCALL 0x00402720\nAND BL,AL\nMOV RDI,R14\nCALL 0x00406550\nTEST RAX,RAX\nJNZ 0x00402660\nCALL 0x00401800\nMOV EBP,dword ptr [RAX]\nTEST EBP,EBP\nJZ 0x004026cd\nMOV RAX,qword ptr [RSP + 0x40]\nCMP byte ptr [RAX + 0x11],0x0\nJZ 0x004026a9\nXOR EBX,EBX\nJMP 0x004026cd\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40aa48\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00401b70\nMOV RDI,R14\nCALL 0x004063d0\nTEST EAX,EAX\nJZ 0x00402704\nCALL 0x00401800\nMOV EBP,dword ptr [RAX]\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40aa58\nMOV EDX,0x5\nCALL 0x004018d0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x00401b70\nMOV EAX,EBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1754
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 cf\n44 89 c5\n41 89 cc\n41 89 d5\n89 f0\n48 8b 54 24 40\n44 89 f9\n21 e9\n31 f6\n83 f9 ff\n75 12\n80 7a 10 00\n75 0c\n31 f6\n83 3a 02\n40 0f 94 c6\nc1 e6 03\n09 c6\n31 d2\ne8 bb 31 00 00\n49 89 c6\n4c 89 f7\ne8 00 3f 00 00\nb3 01\n48 85 c0\n74 38\n66 0f 1f 84 00 00 00 00 00\n48 8b 4c 24 40\n48 89 0c 24\n4c 89 f7\n48 89 c6\n44 89 ea\n44 89 e1\n41 89 e8\n45 89 f9\ne8 a0 00 00 00\n20 c3\n4c 89 f7\ne8 c6 3e 00 00\n48 85 c0\n75 d1\ne8 6c f1 ff ff\n8b 28\n85 ed\n74 33\n48 8b 44 24 40\n80 78 11 00\n74 04\n31 db\neb 24\n31 db\n31 ff\nbe 48 aa 40 00\nba 05 00 00 00\ne8 14 f2 ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\ne8 a3 f4 ff ff\n4c 89 f7\ne8 fb 3c 00 00\n85 c0\n74 2b\ne8 22 f1 ff ff\n8b 28\n31 db\n31 ff\nbe 58 aa 40 00\nba 05 00 00 00\ne8 dd f1 ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\ne8 6c f4 ff ff\n89 d8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1755
S'.text:0000000000402600\n.text:0000000000402601\n.text:0000000000402603\n.text:0000000000402605\n.text:0000000000402607\n.text:0000000000402609\n.text:000000000040260a\n.text:000000000040260b\n.text:000000000040260e\n.text:0000000000402611\n.text:0000000000402614\n.text:0000000000402617\n.text:0000000000402619\n.text:000000000040261e\n.text:0000000000402621\n.text:0000000000402623\n.text:0000000000402625\n.text:0000000000402628\n.text:000000000040262a\n.text:000000000040262e\n.text:0000000000402630\n.text:0000000000402632\n.text:0000000000402635\n.text:0000000000402639\n.text:000000000040263c\n.text:000000000040263e\n.text:0000000000402640\n.text:0000000000402645\n.text:0000000000402648\n.text:000000000040264b\n.text:0000000000402650\n.text:0000000000402652\n.text:0000000000402655\n.text:0000000000402657\n.text:0000000000402660\n.text:0000000000402665\n.text:0000000000402669\n.text:000000000040266c\n.text:000000000040266f\n.text:0000000000402672\n.text:0000000000402675\n.text:0000000000402678\n.text:000000000040267b\n.text:0000000000402680\n.text:0000000000402682\n.text:0000000000402685\n.text:000000000040268a\n.text:000000000040268d\n.text:000000000040268f\n.text:0000000000402694\n.text:0000000000402696\n.text:0000000000402698\n.text:000000000040269a\n.text:000000000040269f\n.text:00000000004026a3\n.text:00000000004026a5\n.text:00000000004026a7\n.text:00000000004026a9\n.text:00000000004026ab\n.text:00000000004026ad\n.text:00000000004026b2\n.text:00000000004026b7\n.text:00000000004026bc\n.text:00000000004026bf\n.text:00000000004026c1\n.text:00000000004026c3\n.text:00000000004026c5\n.text:00000000004026c8\n.text:00000000004026cd\n.text:00000000004026d0\n.text:00000000004026d5\n.text:00000000004026d7\n.text:00000000004026d9\n.text:00000000004026de\n.text:00000000004026e0\n.text:00000000004026e2\n.text:00000000004026e4\n.text:00000000004026e9\n.text:00000000004026ee\n.text:00000000004026f3\n.text:00000000004026f6\n.text:00000000004026f8\n.text:00000000004026fa\n.text:00000000004026fc\n.text:00000000004026ff\n.text:0000000000402704\n.text:0000000000402706\n.text:000000000040270a\n.text:000000000040270b\n.text:000000000040270d\n.text:000000000040270f\n.text:0000000000402711\n.text:0000000000402713\n.text:0000000000402714\n'
p1756
tp1757
sS'raw_comparator'
p1758
(S'\n__stdcall raw_comparator(void * a, void * b)\n'
p1759
V\u000a_Bool raw_comparator(void *a,void *b)\u000a\u000a{\u000a  return (_Bool)(a == b);\u000a}\u000a\u000a
p1760
S'CMP RDI,RSI\nSETZ AL\nRET\n'
p1761
S'48 39 f7\n0f 94 c0\nc3\n'
p1762
S'.text:0000000000408300\n.text:0000000000408303\n.text:0000000000408306\n'
p1763
tp1764
sS'strcaseeq6'
p1765
(S'\n__stdcall strcaseeq6()\n'
p1766
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1767
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407b30\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x00404d02\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404d09\nJMP 0x00404d1e\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404d1e\nTEST BPL,BPL\nJZ 0x00404d19\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00404d30\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1768
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 41 2e 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1769
S'.text:0000000000404ce0\n.text:0000000000404ce1\n.text:0000000000404ce2\n.text:0000000000404ce3\n.text:0000000000404ce5\n.text:0000000000404ce8\n.text:0000000000404cea\n.text:0000000000404cef\n.text:0000000000404cf3\n.text:0000000000404cf5\n.text:0000000000404cf7\n.text:0000000000404cfa\n.text:0000000000404cfc\n.text:0000000000404cfe\n.text:0000000000404d00\n.text:0000000000404d02\n.text:0000000000404d04\n.text:0000000000404d07\n.text:0000000000404d09\n.text:0000000000404d0c\n.text:0000000000404d0e\n.text:0000000000404d11\n.text:0000000000404d15\n.text:0000000000404d16\n.text:0000000000404d17\n.text:0000000000404d19\n.text:0000000000404d1e\n.text:0000000000404d22\n.text:0000000000404d23\n.text:0000000000404d24\n'
p1770
tp1771
sS'strcaseeq5'
p1772
(S'\n__stdcall strcaseeq5()\n'
p1773
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1774
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407b30\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404cb6\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404cbd\nJMP 0x00404cd4\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404cd4\nTEST BPL,BPL\nJZ 0x00404ccf\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x00404ce0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1775
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 8d 2e 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1776
S'.text:0000000000404c90\n.text:0000000000404c91\n.text:0000000000404c93\n.text:0000000000404c94\n.text:0000000000404c97\n.text:0000000000404c99\n.text:0000000000404c9c\n.text:0000000000404c9e\n.text:0000000000404ca3\n.text:0000000000404ca7\n.text:0000000000404ca9\n.text:0000000000404cab\n.text:0000000000404cae\n.text:0000000000404cb0\n.text:0000000000404cb2\n.text:0000000000404cb4\n.text:0000000000404cb6\n.text:0000000000404cb8\n.text:0000000000404cbb\n.text:0000000000404cbd\n.text:0000000000404cc0\n.text:0000000000404cc2\n.text:0000000000404cc6\n.text:0000000000404cc9\n.text:0000000000404cca\n.text:0000000000404ccc\n.text:0000000000404ccd\n.text:0000000000404ccf\n.text:0000000000404cd4\n.text:0000000000404cd5\n.text:0000000000404cd7\n.text:0000000000404cd8\n'
p1777
tp1778
sS'strcaseeq7'
p1779
(S'\n__stdcall strcaseeq7()\n'
p1780
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1781
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00407b30\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404d52\nTEST ECX,0xffffffdf\nJNZ 0x00404d56\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x00404d5a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1782
S'53\n48 89 fb\n31 ff\ne8 f5 2d 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1783
S'.text:0000000000404d30\n.text:0000000000404d31\n.text:0000000000404d34\n.text:0000000000404d36\n.text:0000000000404d3b\n.text:0000000000404d3f\n.text:0000000000404d41\n.text:0000000000404d43\n.text:0000000000404d49\n.text:0000000000404d4b\n.text:0000000000404d50\n.text:0000000000404d51\n.text:0000000000404d52\n.text:0000000000404d54\n.text:0000000000404d56\n.text:0000000000404d58\n.text:0000000000404d59\n.text:0000000000404d5a\n.text:0000000000404d5f\n.text:0000000000404d60\n'
p1784
tp1785
sS'cycle_check_init'
p1786
(S'\n__stdcall cycle_check_init(cycle_check_state * state)\n'
p1787
V\u000avoid cycle_check_init(cycle_check_state *state)\u000a\u000a{\u000a  state->chdir_counter = 0;\u000a  state->magic = 0x95f616;\u000a  return;\u000a}\u000a\u000a
p1788
S'MOV qword ptr [RDI + 0x10],0x0\nMOV dword ptr [RDI + 0x18],0x95f616\nRET\n'
p1789
S'48 c7 47 10 00 00 00 00\nc7 47 18 16 f6 95 00\nc3\n'
p1790
S'.text:0000000000407c60\n.text:0000000000407c68\n.text:0000000000407c6f\n'
p1791
tp1792
sS'link_count_optimize_ok'
p1793
(S'\n__stdcall link_count_optimize_ok(FTSENT * p)\n'
p1794
V\u000a_Bool link_count_optimize_ok(FTSENT *p)\u000a\u000a{\u000a  FTS *pFVar1;\u000a  _Bool _Var2;\u000a  void *pvVar3;\u000a  __dev_t *entry;\u000a  __dev_t *p_Var4;\u000a  hash_table *table;\u000a  __dev_t local_38 [2];\u000a  \u000a  pFVar1 = p->fts_fts;\u000a  if ((*(byte *)((long)&pFVar1->fts_options + 1) & 2) == 0) {\u000a    _Var2 = false;\u000a  }\u000a  else {\u000a    table = pFVar1->fts_leaf_optimization_works_ht;\u000a    if (table == (hash_table *)0x0) {\u000a      table = (hash_table *)hash_initialize(0xd,(Hash_tuning *)0x0,LCO_hash,LCO_compare,free);\u000a      pFVar1->fts_leaf_optimization_works_ht = table;\u000a      if (table == (hash_table *)0x0) {\u000a        return false;\u000a      }\u000a    }\u000a    local_38[0] = p->fts_statp[0].st_dev;\u000a    pvVar3 = hash_lookup((Hash_table *)table,local_38);\u000a    if (pvVar3 == (void *)0x0) {\u000a      entry = (__dev_t *)malloc(0x10);\u000a      if (entry == (__dev_t *)0x0) {\u000a        _Var2 = false;\u000a      }\u000a      else {\u000a        _Var2 = leaf_optimization_applies();\u000a        *(_Bool *)(entry + 1) = _Var2;\u000a        *entry = p->fts_statp[0].st_dev;\u000a        p_Var4 = (__dev_t *)hash_insert((Hash_table *)table,entry);\u000a        if (p_Var4 == (__dev_t *)0x0) {\u000a          free(entry);\u000a          _Var2 = false;\u000a        }\u000a        else {\u000a          if (p_Var4 != entry) {\u000a                    /* WARNING: Subroutine does not return */\u000a            abort();\u000a          }\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      _Var2 = (_Bool)(*(char *)((long)pvVar3 + 8) != 0);\u000a    }\u000a  }\u000a  return _Var2;\u000a}\u000a\u000a
p1795
S'PUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x10\nMOV R14,RDI\nMOV RBX,qword ptr [R14 + 0x50]\nTEST byte ptr [RBX + 0x49],0x2\nJNZ 0x0040750f\nXOR R15D,R15D\nJMP 0x00407563\nMOV R13,qword ptr [RBX + 0x50]\nTEST R13,R13\nJNZ 0x00407543\nXOR R15D,R15D\nMOV EDI,0xd\nXOR ESI,ESI\nMOV EDX,0x407850\nMOV ECX,0x407860\nMOV R8D,0x4017e0\nCALL 0x00408200\nMOV R13,RAX\nMOV qword ptr [RBX + 0x50],R13\nTEST R13,R13\nJZ 0x00407563\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [RSP],RAX\nMOV RSI,RSP\nMOV RDI,R13\nCALL 0x00407f90\nTEST RAX,RAX\nJZ 0x00407574\nCMP byte ptr [RAX + 0x8],0x0\nSETNZ R15B\nMOV EAX,R15D\nADD RSP,0x10\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\nMOV EDI,0x10\nCALL 0x00401aa0\nMOV R12,RAX\nTEST R12,R12\nJZ 0x004075b8\nMOV EDI,dword ptr [RBX + 0x2c]\nCALL 0x00407870\nMOV R15B,AL\nMOV byte ptr [R12 + 0x8],R15B\nMOV RAX,qword ptr [R14 + 0x78]\nMOV qword ptr [R12],RAX\nMOV RDI,R13\nMOV RSI,R12\nCALL 0x00408ad0\nTEST RAX,RAX\nJZ 0x004075bd\nCMP RAX,R12\nJZ 0x00407563\nCALL 0x004017f0\nXOR R15D,R15D\nJMP 0x00407563\nMOV RDI,R12\nCALL 0x004017e0\nXOR R15D,R15D\nJMP 0x00407563\n'
p1796
S'41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 10\n49 89 fe\n49 8b 5e 50\nf6 43 49 02\n75 05\n45 31 ff\neb 54\n4c 8b 6b 50\n4d 85 ed\n75 2b\n45 31 ff\nbf 0d 00 00 00\n31 f6\nba 50 78 40 00\nb9 60 78 40 00\n41 b8 e0 17 40 00\ne8 c9 0c 00 00\n49 89 c5\n4c 89 6b 50\n4d 85 ed\n74 20\n49 8b 46 78\n48 89 04 24\n48 89 e6\n4c 89 ef\ne8 3a 0a 00 00\n48 85 c0\n74 19\n80 78 08 00\n41 0f 95 c7\n44 89 f8\n48 83 c4 10\n5b\n41 5c\n41 5d\n41 5e\n41 5f\nc3\nbf 10 00 00 00\ne8 22 a5 ff ff\n49 89 c4\n4d 85 e4\n74 32\n8b 7b 2c\ne8 e2 02 00 00\n41 88 c7\n45 88 7c 24 08\n49 8b 46 78\n49 89 04 24\n4c 89 ef\n4c 89 e6\ne8 27 15 00 00\n48 85 c0\n74 0f\n4c 39 e0\n74 b0\ne8 38 a2 ff ff\n45 31 ff\neb a6\n4c 89 e7\ne8 1b a2 ff ff\n45 31 ff\neb 99\n'
p1797
S'.text:00000000004074f0\n.text:00000000004074f2\n.text:00000000004074f4\n.text:00000000004074f6\n.text:00000000004074f8\n.text:00000000004074f9\n.text:00000000004074fd\n.text:0000000000407500\n.text:0000000000407504\n.text:0000000000407508\n.text:000000000040750a\n.text:000000000040750d\n.text:000000000040750f\n.text:0000000000407513\n.text:0000000000407516\n.text:0000000000407518\n.text:000000000040751b\n.text:0000000000407520\n.text:0000000000407522\n.text:0000000000407527\n.text:000000000040752c\n.text:0000000000407532\n.text:0000000000407537\n.text:000000000040753a\n.text:000000000040753e\n.text:0000000000407541\n.text:0000000000407543\n.text:0000000000407547\n.text:000000000040754b\n.text:000000000040754e\n.text:0000000000407551\n.text:0000000000407556\n.text:0000000000407559\n.text:000000000040755b\n.text:000000000040755f\n.text:0000000000407563\n.text:0000000000407566\n.text:000000000040756a\n.text:000000000040756b\n.text:000000000040756d\n.text:000000000040756f\n.text:0000000000407571\n.text:0000000000407573\n.text:0000000000407574\n.text:0000000000407579\n.text:000000000040757e\n.text:0000000000407581\n.text:0000000000407584\n.text:0000000000407586\n.text:0000000000407589\n.text:000000000040758e\n.text:0000000000407591\n.text:0000000000407596\n.text:000000000040759a\n.text:000000000040759e\n.text:00000000004075a1\n.text:00000000004075a4\n.text:00000000004075a9\n.text:00000000004075ac\n.text:00000000004075ae\n.text:00000000004075b1\n.text:00000000004075b3\n.text:00000000004075b8\n.text:00000000004075bb\n.text:00000000004075bd\n.text:00000000004075c0\n.text:00000000004075c5\n.text:00000000004075c8\n'
p1798
tp1799
sS'strtoul'
p1800
(S'\n__stdcall strtoul(char * __nptr, char * * __endptr, int __base)\n'
p1801
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulong strtoul(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoul_0060f218)();\u000a  return uVar1;\u000a}\u000a\u000a
p1802
S'JMP qword ptr [0x0060f218]\n'
p1803
S'ff 25 52 d6 20 00\n'
p1804
S'.plt:0000000000401bc0\n'
p1805
tp1806
sS'strcaseeq0'
p1807
(S'\n__stdcall strcaseeq0()\n'
p1808
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1809
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407b30\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00404a65\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404a6c\nJMP 0x00404aa0\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404aa0\nTEST BPL,BPL\nJZ 0x00404a9b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00404ab0\nJMP 0x00404aa0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1810
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 dd 30 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1811
S'.text:0000000000404a30\n.text:0000000000404a31\n.text:0000000000404a33\n.text:0000000000404a35\n.text:0000000000404a37\n.text:0000000000404a39\n.text:0000000000404a3a\n.text:0000000000404a3b\n.text:0000000000404a3e\n.text:0000000000404a41\n.text:0000000000404a44\n.text:0000000000404a47\n.text:0000000000404a49\n.text:0000000000404a4c\n.text:0000000000404a4e\n.text:0000000000404a53\n.text:0000000000404a56\n.text:0000000000404a58\n.text:0000000000404a5a\n.text:0000000000404a5d\n.text:0000000000404a5f\n.text:0000000000404a61\n.text:0000000000404a63\n.text:0000000000404a65\n.text:0000000000404a67\n.text:0000000000404a6a\n.text:0000000000404a6c\n.text:0000000000404a6f\n.text:0000000000404a71\n.text:0000000000404a75\n.text:0000000000404a7a\n.text:0000000000404a7d\n.text:0000000000404a81\n.text:0000000000404a85\n.text:0000000000404a89\n.text:0000000000404a8d\n.text:0000000000404a91\n.text:0000000000404a94\n.text:0000000000404a99\n.text:0000000000404a9b\n.text:0000000000404aa0\n.text:0000000000404aa4\n.text:0000000000404aa5\n.text:0000000000404aa7\n.text:0000000000404aa9\n.text:0000000000404aab\n.text:0000000000404aad\n.text:0000000000404aae\n'
p1812
tp1813
sS'parse_with_separator'
p1814
(S'\n__stdcall parse_with_separator(char * spec, char * separator, uid_t * uid, gid_t * gid, char * * username, char * * groupname)\n'
p1815
V\u000achar * parse_with_separator\u000a                 (char *spec,char *separator,uid_t *uid,gid_t *gid,char **username,char **groupname)\u000a\u000a{\u000a  bool bVar1;\u000a  strtol_error sVar2;\u000a  char *__name;\u000a  passwd *ppVar3;\u000a  group *pgVar4;\u000a  char *string;\u000a  char *__name_00;\u000a  char *pcVar5;\u000a  char buf [21];\u000a  __uid_t local_6c;\u000a  uint local_68;\u000a  ulong local_48 [3];\u000a  \u000a  local_6c = *uid;\u000a  if (gid == (gid_t *)0x0) {\u000a    local_68 = 0xffffffff;\u000a  }\u000a  else {\u000a    local_68 = *gid;\u000a  }\u000a  if (username != (char **)0x0) {\u000a    *username = (char *)0x0;\u000a  }\u000a  if (groupname != (char **)0x0) {\u000a    *groupname = (char *)0x0;\u000a  }\u000a  if (separator == (char *)0x0) {\u000a    if (*spec != 0) {\u000a      __name = xstrdup(spec);\u000a      __name_00 = (char *)0x0;\u000a      goto LAB_00404f0e;\u000a    }\u000a    string = (char *)0x0;\u000a    __name = (char *)0x0;\u000a  }\u000a  else {\u000a    __name_00 = separator + -(long)spec;\u000a    if (__name_00 == (char *)0x0) {\u000a      __name = (char *)0x0;\u000a    }\u000a    else {\u000a      __name = (char *)xmemdup(spec,(size_t)(__name_00 + 1));\u000a      __name[(long)__name_00] = 0;\u000a    }\u000a    __name_00 = (char *)0x0;\u000a    if (separator[1] != 0) {\u000a      __name_00 = separator + 1;\u000a    }\u000aLAB_00404f0e:\u000a    if (__name == (char *)0x0) {\u000a      __name = (char *)0x0;\u000a      string = (char *)0x0;\u000a      pcVar5 = (char *)0x0;\u000a    }\u000a    else {\u000a      if ((*__name == '+') || (ppVar3 = getpwnam(__name), ppVar3 == (passwd *)0x0)) {\u000a        if ((__name_00 == (char *)0x0) && (separator != (char *)0x0)) {\u000a          pcVar5 = "invalid spec";\u000a          string = (char *)0x0;\u000a        }\u000a        else {\u000a          sVar2 = xstrtoul(__name,(char **)0x0,(ulong *)0xa,(char *)local_48);\u000a          if ((sVar2 == LONGINT_OK) &&\u000a             ((local_48[0] >> 0x20 == 0 && ((__uid_t)local_48[0] != 0xffffffff)))) {\u000a            pcVar5 = (char *)0x0;\u000a            string = (char *)0x0;\u000a            local_6c = (__uid_t)local_48[0];\u000a          }\u000a          else {\u000a            pcVar5 = "invalid user";\u000a            string = (char *)0x0;\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        local_6c = ppVar3->pw_uid;\u000a        string = (char *)0x0;\u000a        if ((separator != (char *)0x0) && (__name_00 == (char *)0x0)) {\u000a          local_68 = ppVar3->pw_gid;\u000a          pgVar4 = getgrgid(local_68);\u000a          if (pgVar4 == (group *)0x0) {\u000a            string = umaxtostr((ulong)local_68,(char *)local_48);\u000a          }\u000a          else {\u000a            string = pgVar4->gr_name;\u000a          }\u000a          string = xstrdup(string);\u000a          endgrent();\u000a        }\u000a        pcVar5 = (char *)0x0;\u000a      }\u000a      endpwent();\u000a    }\u000a    if ((__name_00 != (char *)0x0) && (pcVar5 == (char *)0x0)) {\u000a      if ((*__name_00 == '+') || (pgVar4 = getgrnam(__name_00), pgVar4 == (group *)0x0)) {\u000a        sVar2 = xstrtoul(__name_00,(char **)0x0,(ulong *)0xa,(char *)local_48);\u000a        if (((sVar2 == LONGINT_OK) && (local_48[0] >> 0x20 == 0)) &&\u000a           ((uint)local_48[0] != 0xffffffff)) {\u000a          pcVar5 = (char *)0x0;\u000a          local_68 = (uint)local_48[0];\u000a        }\u000a        else {\u000a          pcVar5 = "invalid group";\u000a        }\u000a      }\u000a      else {\u000a        pcVar5 = (char *)0x0;\u000a        local_68 = pgVar4->gr_gid;\u000a      }\u000a      endgrent();\u000a      string = xstrdup(__name_00);\u000a    }\u000a    if (pcVar5 != (char *)0x0) {\u000a      bVar1 = false;\u000a      goto LAB_004050e6;\u000a    }\u000a  }\u000a  *uid = local_6c;\u000a  if (gid != (gid_t *)0x0) {\u000a    *gid = local_68;\u000a  }\u000a  if (username != (char **)0x0) {\u000a    *username = __name;\u000a    __name = (char *)0x0;\u000a  }\u000a  bVar1 = true;\u000a  if (groupname == (char **)0x0) {\u000a    pcVar5 = (char *)0x0;\u000a  }\u000a  else {\u000a    *groupname = string;\u000a    pcVar5 = (char *)0x0;\u000a    string = (char *)0x0;\u000a  }\u000aLAB_004050e6:\u000a  free(__name);\u000a  free(string);\u000a  if (bVar1) {\u000a    __name = (char *)0x0;\u000a  }\u000a  else {\u000a    __name = (char *)dcgettext(0,pcVar5,5);\u000a  }\u000a  return __name;\u000a}\u000a\u000a
p1816
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV R14,R9\nMOV R13,RCX\nMOV R12,RDX\nMOV RBP,RSI\nMOV EAX,dword ptr [R12]\nTEST R13,R13\nJZ 0x00404e8e\nMOV EDX,dword ptr [R13]\nTEST R8,R8\nJNZ 0x00404e98\nJMP 0x00404e9f\nMOV EDX,0xffffffff\nTEST R8,R8\nJZ 0x00404e9f\nMOV qword ptr [R8],0x0\nTEST R14,R14\nJZ 0x00404eab\nMOV qword ptr [R14],0x0\nTEST RBP,RBP\nMOV qword ptr [RSP + 0x28],R12\nMOV dword ptr [RSP + 0xc],EAX\nJZ 0x00404ede\nMOV qword ptr [RSP + 0x10],RDX\nMOV qword ptr [RSP + 0x18],R8\nMOV RBX,RBP\nSUB RBX,RDI\nJZ 0x00404efd\nLEA RSI,[RBX + 0x1]\nCALL 0x00405780\nMOV R15,RAX\nMOV byte ptr [R15 + RBX*0x1],0x0\nJMP 0x00404f00\nCMP byte ptr [RDI],0x0\nJZ 0x00404fe5\nMOV qword ptr [RSP + 0x10],RDX\nMOV qword ptr [RSP + 0x18],R8\nCALL 0x004057b0\nMOV R15,RAX\nXOR EBX,EBX\nJMP 0x00404f0e\nXOR R15D,R15D\nLEA RAX,[RBP + 0x1]\nXOR EBX,EBX\nCMP byte ptr [RBP + 0x1],0x0\nCMOVNZ RBX,RAX\nTEST R15,R15\nMOV qword ptr [RSP + 0x20],R14\nJZ 0x00404f30\nCMP byte ptr [R15],0x2b\nJNZ 0x00404f47\nTEST RBP,RBP\nSETNZ CL\nTEST RBX,RBX\nSETZ DL\nTEST DL,DL\nJNZ 0x00404f99\nJMP 0x00404fa8\nXOR R15D,R15D\nXOR R12D,R12D\nXOR R14D,R14D\nTEST RBX,RBX\nJNZ 0x00405025\nJMP 0x0040509a\nMOV RDI,R15\nCALL 0x00401a40\nTEST RBP,RBP\nSETNZ CL\nTEST RBX,RBX\nSETZ DL\nTEST RAX,RAX\nJZ 0x00404f95\nMOV ECX,dword ptr [RAX + 0x10]\nMOV dword ptr [RSP + 0xc],ECX\nXOR R12D,R12D\nTEST RBP,RBP\nJZ 0x00405018\nTEST RBX,RBX\nJNZ 0x00405018\nMOV EBP,dword ptr [RAX + 0x14]\nMOV EDI,EBP\nCALL 0x00401950\nTEST RAX,RAX\nMOV qword ptr [RSP + 0x10],RBP\nJZ 0x00404ffb\nMOV RDI,qword ptr [RAX]\nJMP 0x0040500b\nTEST DL,DL\nJZ 0x00404fa8\nTEST CL,CL\nJZ 0x00404fa8\nMOV R14D,0x40b3a2\nXOR R12D,R12D\nJMP 0x0040501b\nLEA RCX,[RSP + 0x30]\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x40a55d\nMOV RDI,R15\nCALL 0x00405860\nTEST EAX,EAX\nJNZ 0x00404ff0\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RCX,RAX\nSHR RCX,0x20\nJNZ 0x00404ff0\nCMP EAX,-0x1\nJZ 0x00404ff0\nXOR R14D,R14D\nMOV dword ptr [RSP + 0xc],EAX\nXOR R12D,R12D\nJMP 0x0040501b\nXOR R12D,R12D\nXOR R15D,R15D\nJMP 0x004050b2\nMOV R14D,0x40b387\nXOR R12D,R12D\nJMP 0x0040501b\nLEA RSI,[RSP + 0x30]\nMOV RDI,RBP\nCALL 0x00403410\nMOV RDI,RAX\nCALL 0x004057b0\nMOV R12,RAX\nCALL 0x004017c0\nXOR R14D,R14D\nCALL 0x00401af0\nTEST RBX,RBX\nJZ 0x0040509a\nTEST R14,R14\nJNZ 0x0040509a\nCMP byte ptr [RBX],0x2b\nJZ 0x00405049\nMOV RDI,RBX\nCALL 0x00401a60\nTEST RAX,RAX\nJZ 0x00405049\nMOV EAX,dword ptr [RAX + 0x10]\nMOV qword ptr [RSP + 0x10],RAX\nXOR R14D,R14D\nJMP 0x0040508a\nLEA RCX,[RSP + 0x30]\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x40a55d\nMOV RDI,RBX\nCALL 0x00405860\nTEST EAX,EAX\nJNZ 0x00405084\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RCX,RAX\nSHR RCX,0x20\nJNZ 0x00405084\nCMP EAX,-0x1\nJZ 0x00405084\nXOR R14D,R14D\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x0040508a\nMOV R14D,0x40b394\nCALL 0x004017c0\nMOV RDI,RBX\nCALL 0x004057b0\nMOV R12,RAX\nMOV R8,qword ptr [RSP + 0x18]\nTEST R14,R14\nJZ 0x004050a8\nXOR EBX,EBX\nJMP 0x004050e6\nMOV R14,qword ptr [RSP + 0x20]\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RAX,qword ptr [RSP + 0x28]\nMOV ECX,dword ptr [RSP + 0xc]\nMOV dword ptr [RAX],ECX\nTEST R13,R13\nJZ 0x004050c6\nMOV dword ptr [R13],EDX\nTEST R8,R8\nJZ 0x004050d1\nMOV qword ptr [R8],R15\nXOR R15D,R15D\nMOV BL,0x1\nTEST R14,R14\nJZ 0x004050e3\nMOV qword ptr [R14],R12\nXOR R14D,R14D\nXOR R12D,R12D\nJMP 0x004050e6\nXOR R14D,R14D\nMOV RDI,R15\nCALL 0x004017e0\nMOV RDI,R12\nCALL 0x004017e0\nTEST BL,BL\nJZ 0x004050fe\nXOR EAX,EAX\nJMP 0x0040510d\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,R14\nCALL 0x004018d0\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1817
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n4d 89 ce\n49 89 cd\n49 89 d4\n48 89 f5\n41 8b 04 24\n4d 85 ed\n74 0b\n41 8b 55 00\n4d 85 c0\n75 0c\neb 11\nba ff ff ff ff\n4d 85 c0\n74 07\n49 c7 00 00 00 00 00\n4d 85 f6\n74 07\n49 c7 06 00 00 00 00\n48 85 ed\n4c 89 64 24 28\n89 44 24 0c\n74 25\n48 89 54 24 10\n4c 89 44 24 18\n48 89 eb\n48 29 fb\n74 32\n48 8d 73 01\ne8 ac 08 00 00\n49 89 c7\n41 c6 04 1f 00\neb 22\n80 3f 00\n0f 84 fe 00 00 00\n48 89 54 24 10\n4c 89 44 24 18\ne8 ba 08 00 00\n49 89 c7\n31 db\neb 11\n45 31 ff\n48 8d 45 01\n31 db\n80 7d 01 00\n48 0f 45 d8\n4d 85 ff\n4c 89 74 24 20\n74 18\n41 80 3f 2b\n75 29\n48 85 ed\n0f 95 c1\n48 85 db\n0f 94 c2\n84 d2\n75 6b\neb 78\n45 31 ff\n45 31 e4\n45 31 f6\n48 85 db\n0f 85 e3 00 00 00\ne9 53 01 00 00\n4c 89 ff\ne8 f1 ca ff ff\n48 85 ed\n0f 95 c1\n48 85 db\n0f 94 c2\n48 85 c0\n74 35\n8b 48 10\n89 4c 24 0c\n45 31 e4\n48 85 ed\n0f 84 a5 00 00 00\n48 85 db\n0f 85 9c 00 00 00\n8b 68 14\n89 ef\ne8 ca c9 ff ff\n48 85 c0\n48 89 6c 24 10\n74 6b\n48 8b 38\neb 76\n84 d2\n74 0f\n84 c9\n74 0b\n41 be a2 b3 40 00\n45 31 e4\neb 73\n48 8d 4c 24 30\n31 f6\nba 0a 00 00 00\n41 b8 5d a5 40 00\n4c 89 ff\ne8 9e 08 00 00\n85 c0\n75 2a\n48 8b 44 24 30\n48 89 c1\n48 c1 e9 20\n75 1c\n83 f8 ff\n74 17\n45 31 f6\n89 44 24 0c\n45 31 e4\neb 36\n45 31 e4\n45 31 ff\ne9 c2 00 00 00\n41 be 87 b3 40 00\n45 31 e4\neb 20\n48 8d 74 24 30\n48 89 ef\ne8 08 e4 ff ff\n48 89 c7\ne8 a0 07 00 00\n49 89 c4\ne8 a8 c7 ff ff\n45 31 f6\ne8 d0 ca ff ff\n48 85 db\n74 75\n4d 85 f6\n75 70\n80 3b 2b\n74 1a\n48 89 df\ne8 29 ca ff ff\n48 85 c0\n74 0d\n8b 40 10\n48 89 44 24 10\n45 31 f6\neb 41\n48 8d 4c 24 30\n31 f6\nba 0a 00 00 00\n41 b8 5d a5 40 00\n48 89 df\ne8 fd 07 00 00\n85 c0\n75 1d\n48 8b 44 24 30\n48 89 c1\n48 c1 e9 20\n75 0f\n83 f8 ff\n74 0a\n45 31 f6\n48 89 44 24 10\neb 06\n41 be 94 b3 40 00\ne8 31 c7 ff ff\n48 89 df\ne8 19 07 00 00\n49 89 c4\n4c 8b 44 24 18\n4d 85 f6\n74 04\n31 db\neb 3e\n4c 8b 74 24 20\n48 8b 54 24 10\n48 8b 44 24 28\n8b 4c 24 0c\n89 08\n4d 85 ed\n74 04\n41 89 55 00\n4d 85 c0\n74 06\n4d 89 38\n45 31 ff\nb3 01\n4d 85 f6\n74 0b\n4d 89 26\n45 31 f6\n45 31 e4\neb 03\n45 31 f6\n4c 89 ff\ne8 f2 c6 ff ff\n4c 89 e7\ne8 ea c6 ff ff\n84 db\n74 04\n31 c0\neb 0f\n31 ff\nba 05 00 00 00\n4c 89 f6\ne8 c3 c7 ff ff\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1818
S'.text:0000000000404e60\n.text:0000000000404e61\n.text:0000000000404e63\n.text:0000000000404e65\n.text:0000000000404e67\n.text:0000000000404e69\n.text:0000000000404e6a\n.text:0000000000404e6e\n.text:0000000000404e71\n.text:0000000000404e74\n.text:0000000000404e77\n.text:0000000000404e7a\n.text:0000000000404e7e\n.text:0000000000404e81\n.text:0000000000404e83\n.text:0000000000404e87\n.text:0000000000404e8a\n.text:0000000000404e8c\n.text:0000000000404e8e\n.text:0000000000404e93\n.text:0000000000404e96\n.text:0000000000404e98\n.text:0000000000404e9f\n.text:0000000000404ea2\n.text:0000000000404ea4\n.text:0000000000404eab\n.text:0000000000404eae\n.text:0000000000404eb3\n.text:0000000000404eb7\n.text:0000000000404eb9\n.text:0000000000404ebe\n.text:0000000000404ec3\n.text:0000000000404ec6\n.text:0000000000404ec9\n.text:0000000000404ecb\n.text:0000000000404ecf\n.text:0000000000404ed4\n.text:0000000000404ed7\n.text:0000000000404edc\n.text:0000000000404ede\n.text:0000000000404ee1\n.text:0000000000404ee7\n.text:0000000000404eec\n.text:0000000000404ef1\n.text:0000000000404ef6\n.text:0000000000404ef9\n.text:0000000000404efb\n.text:0000000000404efd\n.text:0000000000404f00\n.text:0000000000404f04\n.text:0000000000404f06\n.text:0000000000404f0a\n.text:0000000000404f0e\n.text:0000000000404f11\n.text:0000000000404f16\n.text:0000000000404f18\n.text:0000000000404f1c\n.text:0000000000404f1e\n.text:0000000000404f21\n.text:0000000000404f24\n.text:0000000000404f27\n.text:0000000000404f2a\n.text:0000000000404f2c\n.text:0000000000404f2e\n.text:0000000000404f30\n.text:0000000000404f33\n.text:0000000000404f36\n.text:0000000000404f39\n.text:0000000000404f3c\n.text:0000000000404f42\n.text:0000000000404f47\n.text:0000000000404f4a\n.text:0000000000404f4f\n.text:0000000000404f52\n.text:0000000000404f55\n.text:0000000000404f58\n.text:0000000000404f5b\n.text:0000000000404f5e\n.text:0000000000404f60\n.text:0000000000404f63\n.text:0000000000404f67\n.text:0000000000404f6a\n.text:0000000000404f6d\n.text:0000000000404f73\n.text:0000000000404f76\n.text:0000000000404f7c\n.text:0000000000404f7f\n.text:0000000000404f81\n.text:0000000000404f86\n.text:0000000000404f89\n.text:0000000000404f8e\n.text:0000000000404f90\n.text:0000000000404f93\n.text:0000000000404f95\n.text:0000000000404f97\n.text:0000000000404f99\n.text:0000000000404f9b\n.text:0000000000404f9d\n.text:0000000000404fa3\n.text:0000000000404fa6\n.text:0000000000404fa8\n.text:0000000000404fad\n.text:0000000000404faf\n.text:0000000000404fb4\n.text:0000000000404fba\n.text:0000000000404fbd\n.text:0000000000404fc2\n.text:0000000000404fc4\n.text:0000000000404fc6\n.text:0000000000404fcb\n.text:0000000000404fce\n.text:0000000000404fd2\n.text:0000000000404fd4\n.text:0000000000404fd7\n.text:0000000000404fd9\n.text:0000000000404fdc\n.text:0000000000404fe0\n.text:0000000000404fe3\n.text:0000000000404fe5\n.text:0000000000404fe8\n.text:0000000000404feb\n.text:0000000000404ff0\n.text:0000000000404ff6\n.text:0000000000404ff9\n.text:0000000000404ffb\n.text:0000000000405000\n.text:0000000000405003\n.text:0000000000405008\n.text:000000000040500b\n.text:0000000000405010\n.text:0000000000405013\n.text:0000000000405018\n.text:000000000040501b\n.text:0000000000405020\n.text:0000000000405023\n.text:0000000000405025\n.text:0000000000405028\n.text:000000000040502a\n.text:000000000040502d\n.text:000000000040502f\n.text:0000000000405032\n.text:0000000000405037\n.text:000000000040503a\n.text:000000000040503c\n.text:000000000040503f\n.text:0000000000405044\n.text:0000000000405047\n.text:0000000000405049\n.text:000000000040504e\n.text:0000000000405050\n.text:0000000000405055\n.text:000000000040505b\n.text:000000000040505e\n.text:0000000000405063\n.text:0000000000405065\n.text:0000000000405067\n.text:000000000040506c\n.text:000000000040506f\n.text:0000000000405073\n.text:0000000000405075\n.text:0000000000405078\n.text:000000000040507a\n.text:000000000040507d\n.text:0000000000405082\n.text:0000000000405084\n.text:000000000040508a\n.text:000000000040508f\n.text:0000000000405092\n.text:0000000000405097\n.text:000000000040509a\n.text:000000000040509f\n.text:00000000004050a2\n.text:00000000004050a4\n.text:00000000004050a6\n.text:00000000004050a8\n.text:00000000004050ad\n.text:00000000004050b2\n.text:00000000004050b7\n.text:00000000004050bb\n.text:00000000004050bd\n.text:00000000004050c0\n.text:00000000004050c2\n.text:00000000004050c6\n.text:00000000004050c9\n.text:00000000004050cb\n.text:00000000004050ce\n.text:00000000004050d1\n.text:00000000004050d3\n.text:00000000004050d6\n.text:00000000004050d8\n.text:00000000004050db\n.text:00000000004050de\n.text:00000000004050e1\n.text:00000000004050e3\n.text:00000000004050e6\n.text:00000000004050e9\n.text:00000000004050ee\n.text:00000000004050f1\n.text:00000000004050f6\n.text:00000000004050f8\n.text:00000000004050fa\n.text:00000000004050fc\n.text:00000000004050fe\n.text:0000000000405100\n.text:0000000000405105\n.text:0000000000405108\n.text:000000000040510d\n.text:0000000000405111\n.text:0000000000405112\n.text:0000000000405114\n.text:0000000000405116\n.text:0000000000405118\n.text:000000000040511a\n.text:000000000040511b\n'
p1819
tp1820
sS'strcaseeq2'
p1821
(S'\n__stdcall strcaseeq2()\n'
p1822
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1823
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407b30\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00404b76\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404b7d\nJMP 0x00404baa\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404baa\nTEST BPL,BPL\nJZ 0x00404ba5\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404bc0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1824
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 cd 2f 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1825
S'.text:0000000000404b40\n.text:0000000000404b41\n.text:0000000000404b43\n.text:0000000000404b45\n.text:0000000000404b47\n.text:0000000000404b49\n.text:0000000000404b4a\n.text:0000000000404b4b\n.text:0000000000404b4e\n.text:0000000000404b51\n.text:0000000000404b54\n.text:0000000000404b57\n.text:0000000000404b59\n.text:0000000000404b5c\n.text:0000000000404b5e\n.text:0000000000404b63\n.text:0000000000404b67\n.text:0000000000404b69\n.text:0000000000404b6b\n.text:0000000000404b6e\n.text:0000000000404b70\n.text:0000000000404b72\n.text:0000000000404b74\n.text:0000000000404b76\n.text:0000000000404b78\n.text:0000000000404b7b\n.text:0000000000404b7d\n.text:0000000000404b80\n.text:0000000000404b82\n.text:0000000000404b86\n.text:0000000000404b8a\n.text:0000000000404b8e\n.text:0000000000404b92\n.text:0000000000404b95\n.text:0000000000404b99\n.text:0000000000404b9a\n.text:0000000000404b9c\n.text:0000000000404b9e\n.text:0000000000404ba0\n.text:0000000000404ba2\n.text:0000000000404ba3\n.text:0000000000404ba5\n.text:0000000000404baa\n.text:0000000000404bae\n.text:0000000000404baf\n.text:0000000000404bb1\n.text:0000000000404bb3\n.text:0000000000404bb5\n.text:0000000000404bb7\n.text:0000000000404bb8\n'
p1826
tp1827
sS'hash_table_ok'
p1828
(S'\n__stdcall hash_table_ok(Hash_table * table)\n'
p1829
V\u000a_Bool hash_table_ok(Hash_table *table)\u000a\u000a{\u000a  hash_entry **pphVar1;\u000a  undefined uVar2;\u000a  size_t sVar3;\u000a  size_t sVar4;\u000a  hash_entry *phVar5;\u000a  hash_entry *phVar6;\u000a  \u000a  phVar6 = table->bucket;\u000a  if (phVar6 < table->bucket_limit) {\u000a    sVar4 = 0;\u000a    sVar3 = 0;\u000a    do {\u000a      phVar5 = phVar6;\u000a      if (phVar6->data != (void *)0x0) {\u000a        do {\u000a          sVar4 = sVar4 + 1;\u000a          pphVar1 = &phVar5->next;\u000a          phVar5 = *pphVar1;\u000a        } while (*pphVar1 != (hash_entry *)0x0);\u000a        sVar3 = sVar3 + 1;\u000a      }\u000a      phVar6 = phVar6 + 1;\u000a    } while (phVar6 < table->bucket_limit);\u000a  }\u000a  else {\u000a    sVar3 = 0;\u000a    sVar4 = 0;\u000a  }\u000a  if ((sVar3 != table->n_buckets_used) || (uVar2 = 1, sVar4 != table->n_entries)) {\u000a    uVar2 = 0;\u000a  }\u000a  return (_Bool)uVar2;\u000a}\u000a\u000a
p1830
S'MOV RSI,qword ptr [RDI]\nCMP RSI,qword ptr [RDI + 0x8]\nJNC 0x00407e8a\nMOV R8,qword ptr [RDI + 0x8]\nXOR ECX,ECX\nXOR EAX,EAX\nNOP dword ptr CS:[RAX + RAX*0x1]\nCMP qword ptr [RSI],0x0\nJZ 0x00407e7f\nMOV RDX,RSI\nNOP dword ptr [RAX]\nINC RCX\nMOV RDX,qword ptr [RDX + 0x8]\nTEST RDX,RDX\nJNZ 0x00407e70\nINC RAX\nADD RSI,0x10\nCMP RSI,R8\nJC 0x00407e60\nJMP 0x00407e8e\nXOR EAX,EAX\nXOR ECX,ECX\nCMP RAX,qword ptr [RDI + 0x18]\nJNZ 0x00407e9c\nMOV AL,0x1\nCMP RCX,qword ptr [RDI + 0x20]\nJZ 0x00407e9e\nXOR EAX,EAX\nRET\n'
p1831
S'48 8b 37\n48 3b 77 08\n73 41\n4c 8b 47 08\n31 c9\n31 c0\n66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n48 83 3e 00\n74 19\n48 89 f2\n0f 1f 80 00 00 00 00\n48 ff c1\n48 8b 52 08\n48 85 d2\n75 f4\n48 ff c0\n48 83 c6 10\n4c 39 c6\n72 d8\neb 04\n31 c0\n31 c9\n48 3b 47 18\n75 08\nb0 01\n48 3b 4f 20\n74 02\n31 c0\nc3\n'
p1832
S'.text:0000000000407e40\n.text:0000000000407e43\n.text:0000000000407e47\n.text:0000000000407e49\n.text:0000000000407e4d\n.text:0000000000407e4f\n.text:0000000000407e51\n.text:0000000000407e60\n.text:0000000000407e64\n.text:0000000000407e66\n.text:0000000000407e69\n.text:0000000000407e70\n.text:0000000000407e73\n.text:0000000000407e77\n.text:0000000000407e7a\n.text:0000000000407e7c\n.text:0000000000407e7f\n.text:0000000000407e83\n.text:0000000000407e86\n.text:0000000000407e88\n.text:0000000000407e8a\n.text:0000000000407e8c\n.text:0000000000407e8e\n.text:0000000000407e92\n.text:0000000000407e94\n.text:0000000000407e96\n.text:0000000000407e9a\n.text:0000000000407e9c\n.text:0000000000407e9e\n'
p1833
tp1834
sS'strcaseeq1'
p1835
(S'\n__stdcall strcaseeq1()\n'
p1836
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1837
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00407b30\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x00404aed\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404af4\nJMP 0x00404b27\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404b27\nTEST BPL,BPL\nJZ 0x00404b22\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404b40\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1838
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 56 30 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1839
S'.text:0000000000404ab0\n.text:0000000000404ab1\n.text:0000000000404ab3\n.text:0000000000404ab5\n.text:0000000000404ab7\n.text:0000000000404ab9\n.text:0000000000404aba\n.text:0000000000404abb\n.text:0000000000404ac0\n.text:0000000000404ac3\n.text:0000000000404ac6\n.text:0000000000404ac9\n.text:0000000000404acb\n.text:0000000000404ace\n.text:0000000000404ad3\n.text:0000000000404ad5\n.text:0000000000404ada\n.text:0000000000404ade\n.text:0000000000404ae0\n.text:0000000000404ae2\n.text:0000000000404ae5\n.text:0000000000404ae7\n.text:0000000000404ae9\n.text:0000000000404aeb\n.text:0000000000404aed\n.text:0000000000404aef\n.text:0000000000404af2\n.text:0000000000404af4\n.text:0000000000404af7\n.text:0000000000404af9\n.text:0000000000404afd\n.text:0000000000404b01\n.text:0000000000404b05\n.text:0000000000404b0b\n.text:0000000000404b0f\n.text:0000000000404b12\n.text:0000000000404b16\n.text:0000000000404b17\n.text:0000000000404b19\n.text:0000000000404b1b\n.text:0000000000404b1d\n.text:0000000000404b1f\n.text:0000000000404b20\n.text:0000000000404b22\n.text:0000000000404b27\n.text:0000000000404b2b\n.text:0000000000404b2c\n.text:0000000000404b2e\n.text:0000000000404b30\n.text:0000000000404b32\n.text:0000000000404b34\n.text:0000000000404b35\n'
p1840
tp1841
sS'strcaseeq4'
p1842
(S'\n__stdcall strcaseeq4()\n'
p1843
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1844
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407b30\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x00404c5c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404c63\nJMP 0x00404c84\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404c84\nTEST BPL,BPL\nJZ 0x00404c7f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404c90\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1845
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 e7 2e 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1846
S'.text:0000000000404c30\n.text:0000000000404c31\n.text:0000000000404c33\n.text:0000000000404c35\n.text:0000000000404c36\n.text:0000000000404c37\n.text:0000000000404c3a\n.text:0000000000404c3d\n.text:0000000000404c3f\n.text:0000000000404c42\n.text:0000000000404c44\n.text:0000000000404c49\n.text:0000000000404c4d\n.text:0000000000404c4f\n.text:0000000000404c51\n.text:0000000000404c54\n.text:0000000000404c56\n.text:0000000000404c58\n.text:0000000000404c5a\n.text:0000000000404c5c\n.text:0000000000404c5e\n.text:0000000000404c61\n.text:0000000000404c63\n.text:0000000000404c66\n.text:0000000000404c68\n.text:0000000000404c6c\n.text:0000000000404c70\n.text:0000000000404c73\n.text:0000000000404c77\n.text:0000000000404c78\n.text:0000000000404c7a\n.text:0000000000404c7c\n.text:0000000000404c7d\n.text:0000000000404c7f\n.text:0000000000404c84\n.text:0000000000404c88\n.text:0000000000404c89\n.text:0000000000404c8b\n.text:0000000000404c8d\n.text:0000000000404c8e\n'
p1847
tp1848
sS'strcaseeq3'
p1849
(S'\n__stdcall strcaseeq3()\n'
p1850
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1851
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00407b30\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00404bf0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404bf7\nJMP 0x00404c1a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404c1a\nTEST BPL,BPL\nJZ 0x00404c15\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404c30\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1852
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 53 2f 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1853
S'.text:0000000000404bc0\n.text:0000000000404bc1\n.text:0000000000404bc3\n.text:0000000000404bc5\n.text:0000000000404bc7\n.text:0000000000404bc8\n.text:0000000000404bcb\n.text:0000000000404bce\n.text:0000000000404bd1\n.text:0000000000404bd3\n.text:0000000000404bd6\n.text:0000000000404bd8\n.text:0000000000404bdd\n.text:0000000000404be1\n.text:0000000000404be3\n.text:0000000000404be5\n.text:0000000000404be8\n.text:0000000000404bea\n.text:0000000000404bec\n.text:0000000000404bee\n.text:0000000000404bf0\n.text:0000000000404bf2\n.text:0000000000404bf5\n.text:0000000000404bf7\n.text:0000000000404bfa\n.text:0000000000404bfc\n.text:0000000000404c00\n.text:0000000000404c04\n.text:0000000000404c08\n.text:0000000000404c0b\n.text:0000000000404c0c\n.text:0000000000404c0e\n.text:0000000000404c10\n.text:0000000000404c12\n.text:0000000000404c13\n.text:0000000000404c15\n.text:0000000000404c1a\n.text:0000000000404c1b\n.text:0000000000404c1d\n.text:0000000000404c1f\n.text:0000000000404c21\n.text:0000000000404c22\n'
p1854
tp1855
sS'register_tm_clones'
p1856
(S'\n__stdcall register_tm_clones()\n'
p1857
V\u000a/* WARNING: Removing unreachable block (ram,0x00401cf3) */\u000a/* WARNING: Removing unreachable block (ram,0x00401cfd) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1858
S'MOV ESI,0x60f2e0\nPUSH RBP\nSUB RSI,0x60f2e0\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401d08\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401d08\nPOP RBP\nMOV EDI,0x60f2e0\nJMP RAX\nPOP RBP\nRET\n'
p1859
S'be e0 f2 60 00\n55\n48 81 ee e0 f2 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf e0 f2 60 00\nff e0\n5d\nc3\n'
p1860
S'.text:0000000000401cd0\n.text:0000000000401cd5\n.text:0000000000401cd6\n.text:0000000000401cdd\n.text:0000000000401ce1\n.text:0000000000401ce4\n.text:0000000000401ce7\n.text:0000000000401ceb\n.text:0000000000401cee\n.text:0000000000401cf1\n.text:0000000000401cf3\n.text:0000000000401cf8\n.text:0000000000401cfb\n.text:0000000000401cfd\n.text:0000000000401cfe\n.text:0000000000401d03\n.text:0000000000401d08\n.text:0000000000401d09\n'
p1861
tp1862
sS'qsort'
p1863
(S'\n__stdcall qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)\n'
p1864
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid qsort(void *__base,size_t __nmemb,size_t __size,__compar_fn_t __compar)\u000a\u000a{\u000a  (*(code *)PTR_qsort_0060f068)();\u000a  return;\u000a}\u000a\u000a
p1865
S'JMP qword ptr [0x0060f068]\n'
p1866
S'ff 25 02 d8 20 00\n'
p1867
S'.plt:0000000000401860\n'
p1868
tp1869
sS'xstrtoul'
p1870
(S'\n__stdcall xstrtoul(char * s, char * * ptr, ulong * val, char * valid_suffixes)\n'
p1871
V\u000astrtol_error xstrtoul(char *s,char **ptr,ulong *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  ulong local_48;\u000a  ulong *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)"\u000a                 );\u000a  }\u000a  local_40 = (ulong *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoul(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00405a96;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00405a96;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_004059c5_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_004059a3:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_004059a3;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00405a77;\u000a  default:\u000aswitchD_004059c5_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00405a77;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00405a77:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00405a96:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p1872
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00405ab3\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x00401800\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401c50\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x004058b0\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00405aa2\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x00401bc0\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00405910\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00405941\nCMP EAX,0x22\nJNZ 0x00405aa2\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x0040594c\nJMP 0x00405a96\nTEST R12,R12\nJZ 0x00405aa2\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00405aa2\nMOV RDI,R12\nCALL 0x00401940\nTEST RAX,RAX\nJZ 0x00405aa2\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x0040594c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00405a96\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00405a96\nMOV RDI,R12\nCALL 0x00401940\nTEST RAX,RAX\nJZ 0x004059de\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x00401940\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x004059a3\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x004059aa\nCMP EAX,0x44\nJZ 0x004059aa\nCMP EAX,0x69\nJNZ 0x004059a3\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x004059b4\nMOV EBP,0x1\nJMP 0x004059b4\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x004059de\nXOR EAX,EAX\nJMP qword ptr [0x40b790 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00405b00\nJMP 0x00405a7c\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00405aa2\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00405b00\nJMP 0x00405a7c\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00405b00\nJMP 0x00405a7c\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00405b00\nJMP 0x00405a7c\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00405a77\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00405b00\nJMP 0x00405a7c\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00405b00\nJMP 0x00405a7c\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00405b00\nJMP 0x00405a7c\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00405b00\nJMP 0x00405a7c\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00405a77\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00405ad0\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x40b940\nMOV ESI,0x40b966\nMOV EDX,0x60\nMOV ECX,0x40b976\nCALL 0x00401990\n'
p1873
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 72 bf ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 b3 c3 ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 dc c2 ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 14 c0 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 dc bf ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 ca bf ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd 90 b7 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 40 b9 40 00\nbe 66 b9 40 00\nba 60 00 00 00\nb9 76 b9 40 00\ne8 c4 be ff ff\n'
p1874
S'.text:0000000000405860\n.text:0000000000405861\n.text:0000000000405863\n.text:0000000000405865\n.text:0000000000405867\n.text:0000000000405869\n.text:000000000040586a\n.text:000000000040586e\n.text:0000000000405871\n.text:0000000000405874\n.text:0000000000405877\n.text:000000000040587a\n.text:000000000040587e\n.text:0000000000405884\n.text:0000000000405889\n.text:000000000040588e\n.text:0000000000405891\n.text:0000000000405898\n.text:000000000040589d\n.text:00000000004058a0\n.text:00000000004058a3\n.text:00000000004058b0\n.text:00000000004058b3\n.text:00000000004058b6\n.text:00000000004058bb\n.text:00000000004058bd\n.text:00000000004058c0\n.text:00000000004058c5\n.text:00000000004058c9\n.text:00000000004058ce\n.text:00000000004058d0\n.text:00000000004058d6\n.text:00000000004058d9\n.text:00000000004058dc\n.text:00000000004058df\n.text:00000000004058e4\n.text:00000000004058e8\n.text:00000000004058ec\n.text:00000000004058ef\n.text:00000000004058f1\n.text:00000000004058f4\n.text:00000000004058f6\n.text:00000000004058f8\n.text:00000000004058fb\n.text:0000000000405901\n.text:0000000000405906\n.text:0000000000405909\n.text:000000000040590b\n.text:0000000000405910\n.text:0000000000405913\n.text:0000000000405919\n.text:000000000040591c\n.text:000000000040591e\n.text:0000000000405924\n.text:0000000000405927\n.text:000000000040592c\n.text:000000000040592f\n.text:0000000000405935\n.text:000000000040593d\n.text:000000000040593f\n.text:0000000000405941\n.text:0000000000405943\n.text:0000000000405946\n.text:000000000040594c\n.text:0000000000405950\n.text:0000000000405954\n.text:0000000000405956\n.text:000000000040595c\n.text:000000000040595f\n.text:0000000000405964\n.text:0000000000405967\n.text:0000000000405969\n.text:000000000040596e\n.text:0000000000405971\n.text:0000000000405976\n.text:000000000040597b\n.text:000000000040597e\n.text:0000000000405980\n.text:0000000000405984\n.text:0000000000405987\n.text:0000000000405989\n.text:000000000040598c\n.text:000000000040598e\n.text:0000000000405991\n.text:0000000000405993\n.text:0000000000405995\n.text:0000000000405999\n.text:000000000040599c\n.text:00000000004059a1\n.text:00000000004059a3\n.text:00000000004059a8\n.text:00000000004059aa\n.text:00000000004059af\n.text:00000000004059b4\n.text:00000000004059b8\n.text:00000000004059bb\n.text:00000000004059be\n.text:00000000004059c1\n.text:00000000004059c3\n.text:00000000004059c5\n.text:00000000004059cc\n.text:00000000004059cf\n.text:00000000004059d4\n.text:00000000004059d9\n.text:00000000004059de\n.text:00000000004059e2\n.text:00000000004059e7\n.text:00000000004059ea\n.text:00000000004059ed\n.text:00000000004059f2\n.text:00000000004059f5\n.text:00000000004059fa\n.text:00000000004059ff\n.text:0000000000405a01\n.text:0000000000405a04\n.text:0000000000405a09\n.text:0000000000405a0e\n.text:0000000000405a10\n.text:0000000000405a13\n.text:0000000000405a18\n.text:0000000000405a1d\n.text:0000000000405a1f\n.text:0000000000405a22\n.text:0000000000405a27\n.text:0000000000405a29\n.text:0000000000405a2c\n.text:0000000000405a31\n.text:0000000000405a36\n.text:0000000000405a38\n.text:0000000000405a3b\n.text:0000000000405a40\n.text:0000000000405a45\n.text:0000000000405a47\n.text:0000000000405a4a\n.text:0000000000405a4f\n.text:0000000000405a54\n.text:0000000000405a56\n.text:0000000000405a59\n.text:0000000000405a5e\n.text:0000000000405a63\n.text:0000000000405a65\n.text:0000000000405a68\n.text:0000000000405a6d\n.text:0000000000405a6f\n.text:0000000000405a72\n.text:0000000000405a77\n.text:0000000000405a7c\n.text:0000000000405a7e\n.text:0000000000405a82\n.text:0000000000405a86\n.text:0000000000405a8a\n.text:0000000000405a8c\n.text:0000000000405a8f\n.text:0000000000405a93\n.text:0000000000405a96\n.text:0000000000405a9a\n.text:0000000000405a9f\n.text:0000000000405aa2\n.text:0000000000405aa4\n.text:0000000000405aa8\n.text:0000000000405aa9\n.text:0000000000405aab\n.text:0000000000405aad\n.text:0000000000405aaf\n.text:0000000000405ab1\n.text:0000000000405ab2\n.text:0000000000405ab3\n.text:0000000000405ab8\n.text:0000000000405abd\n.text:0000000000405ac2\n.text:0000000000405ac7\n'
p1875
tp1876
sS'c_islower'
p1877
(S'\n__stdcall c_islower()\n'
p1878
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1879
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1880
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1881
S'.text:0000000000407ad0\n.text:0000000000407ad3\n.text:0000000000407ad6\n.text:0000000000407ad9\n'
p1882
tp1883
sS'fstatat'
p1884
(S'\n__stdcall fstatat(int __fd, char * __file, stat * __buf, int __flag)\n'
p1885
V\u000aint fstatat(int __fd,char *__file,stat *__buf,int __flag)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___fxstatat_0060f0e8)(1,(ulong)(uint)__fd,__file,__buf,(ulong)(uint)__flag);\u000a  return iVar1;\u000a}\u000a\u000a
p1886
S'MOV R8D,ECX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV ESI,EDI\nMOV EDI,0x1\nJMP 0x00401960\n'
p1887
S'41 89 c8\n48 89 d1\n48 89 f2\n89 fe\nbf 01 00 00 00\ne9 0b 82 ff ff\n'
p1888
S'.text:0000000000409740\n.text:0000000000409743\n.text:0000000000409746\n.text:0000000000409749\n.text:000000000040974b\n.text:0000000000409750\n'
p1889
tp1890
sS'fchown'
p1891
(S'\n__stdcall fchown(int __fd, __uid_t __owner, __gid_t __group)\n'
p1892
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fchown(int __fd,__uid_t __owner,__gid_t __group)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fchown_0060f208)();\u000a  return iVar1;\u000a}\u000a\u000a
p1893
S'JMP qword ptr [0x0060f208]\n'
p1894
S'ff 25 62 d6 20 00\n'
p1895
S'.plt:0000000000401ba0\n'
p1896
tp1897
sS'fwrite'
p1898
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1899
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_0060f240)();\u000a  return sVar1;\u000a}\u000a\u000a
p1900
S'JMP qword ptr [0x0060f240]\n'
p1901
S'ff 25 2a d6 20 00\n'
p1902
S'.plt:0000000000401c10\n'
p1903
tp1904
sS'rotl_sz'
p1905
(S'\n__stdcall rotl_sz(size_t x)\n'
p1906
V\u000asize_t rotl_sz(size_t x)\u000a\u000a{\u000a  byte bVar1;\u000a  undefined4 in_ESI;\u000a  \u000a  bVar1 = (byte)in_ESI & 0x3f;\u000a  return x << bVar1 | x >> 0x40 - bVar1;\u000a}\u000a\u000a
p1907
S'MOV ECX,ESI\nROL RDI,CL\nMOV RAX,RDI\nRET\n'
p1908
S'89 f1\n48 d3 c7\n48 89 f8\nc3\n'
p1909
S'.text:00000000004095c0\n.text:00000000004095c2\n.text:00000000004095c5\n.text:00000000004095c8\n'
p1910
tp1911
sS'user_group_str'
p1912
(S'\n__stdcall user_group_str(char * user, char * group)\n'
p1913
V\u000achar * user_group_str(char *user,char *group)\u000a\u000a{\u000a  size_t sVar1;\u000a  size_t sVar2;\u000a  undefined2 *puVar3;\u000a  char *__dest;\u000a  \u000a  if (user == (char *)0x0) {\u000a    user = group;\u000a    if (group != (char *)0x0) goto LAB_004032f0;\u000a    __dest = (char *)0x0;\u000a  }\u000a  else {\u000a    if (group == (char *)0x0) {\u000aLAB_004032f0:\u000a      __dest = xstrdup(user);\u000a      return __dest;\u000a    }\u000a    sVar1 = strlen(user);\u000a    sVar2 = strlen(group);\u000a    __dest = (char *)xmalloc(sVar1 + 2 + sVar2);\u000a    puVar3 = (undefined2 *)stpcpy(__dest,user);\u000a    *puVar3 = 0x3a;\u000a    stpcpy((char *)((long)puVar3 + 1),group);\u000a  }\u000a  return __dest;\u000a}\u000a\u000a
p1914
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,RSI\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004032e3\nTEST R14,R14\nJZ 0x004032ed\nMOV RDI,RBX\nCALL 0x004018f0\nMOV R15,RAX\nMOV RDI,R14\nCALL 0x004018f0\nLEA RDI,[R15 + RAX*0x1 + 0x2]\nCALL 0x00405640\nMOV R15,RAX\nMOV RDI,R15\nMOV RSI,RBX\nCALL 0x004018c0\nMOV word ptr [RAX],0x3a\nLEA RDI,[RAX + 0x1]\nMOV RSI,R14\nCALL 0x004018c0\nJMP 0x004032fd\nTEST R14,R14\nJZ 0x004032fa\nMOV RDI,R14\nJMP 0x004032f0\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP R15\nJMP 0x004057b0\nXOR R15D,R15D\nMOV RAX,R15\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p1915
S'41 57\n41 56\n53\n49 89 f6\n48 89 fb\n48 85 db\n74 43\n4d 85 f6\n74 48\n48 89 df\ne8 43 e6 ff ff\n49 89 c7\n4c 89 f7\ne8 38 e6 ff ff\n49 8d 7c 07 02\ne8 7e 23 00 00\n49 89 c7\n4c 89 ff\n48 89 de\ne8 f0 e5 ff ff\n66 c7 00 3a 00\n48 8d 78 01\n4c 89 f6\ne8 df e5 ff ff\neb 1a\n4d 85 f6\n74 12\n4c 89 f7\neb 03\n48 89 df\n5b\n41 5e\n41 5f\ne9 b6 24 00 00\n45 31 ff\n4c 89 f8\n5b\n41 5e\n41 5f\nc3\n'
p1916
S'.text:0000000000403290\n.text:0000000000403292\n.text:0000000000403294\n.text:0000000000403295\n.text:0000000000403298\n.text:000000000040329b\n.text:000000000040329e\n.text:00000000004032a0\n.text:00000000004032a3\n.text:00000000004032a5\n.text:00000000004032a8\n.text:00000000004032ad\n.text:00000000004032b0\n.text:00000000004032b3\n.text:00000000004032b8\n.text:00000000004032bd\n.text:00000000004032c2\n.text:00000000004032c5\n.text:00000000004032c8\n.text:00000000004032cb\n.text:00000000004032d0\n.text:00000000004032d5\n.text:00000000004032d9\n.text:00000000004032dc\n.text:00000000004032e1\n.text:00000000004032e3\n.text:00000000004032e6\n.text:00000000004032e8\n.text:00000000004032eb\n.text:00000000004032ed\n.text:00000000004032f0\n.text:00000000004032f1\n.text:00000000004032f3\n.text:00000000004032f5\n.text:00000000004032fa\n.text:00000000004032fd\n.text:0000000000403300\n.text:0000000000403301\n.text:0000000000403303\n.text:0000000000403305\n'
p1917
tp1918
sS'__do_global_dtors_aux'
p1919
(S'\n__stdcall __do_global_dtors_aux()\n'
p1920
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1921
S'CMP byte ptr [0x0060f328],0x0\nJNZ 0x00401d2a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401c90\nPOP RBP\nMOV byte ptr [0x0060f328],0x1\nRET\n'
p1922
S'80 3d 11 d6 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 fe d5 20 00 01\nf3 c3\n'
p1923
S'.text:0000000000401d10\n.text:0000000000401d17\n.text:0000000000401d19\n.text:0000000000401d1a\n.text:0000000000401d1d\n.text:0000000000401d22\n.text:0000000000401d23\n.text:0000000000401d2a\n'
p1924
tp1925
sS'c_isprint'
p1926
(S'\n__stdcall c_isprint()\n'
p1927
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1928
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1929
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1930
S'.text:0000000000407ae0\n.text:0000000000407ae3\n.text:0000000000407ae6\n.text:0000000000407ae9\n'
p1931
tp1932
sS'_fini'
p1933
(S'\n__stdcall _fini()\n'
p1934
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1935
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1936
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1937
S'.fini:0000000000409758\n.fini:000000000040975c\n.fini:0000000000409760\n'
p1938
tp1939
sS'uid_to_name'
p1940
(S'\n__stdcall uid_to_name()\n'
p1941
V\u000achar * uid_to_name(void)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  char *string;\u000a  __uid_t __uid;\u000a  char buf [21];\u000a  char acStack40 [32];\u000a  \u000a  ppVar1 = getpwuid(__uid);\u000a  if (ppVar1 == (passwd *)0x0) {\u000a    string = umaxtostr((ulong)__uid,acStack40);\u000a  }\u000a  else {\u000a    string = ppVar1->pw_name;\u000a  }\u000a  string = xstrdup(string);\u000a  return string;\u000a}\u000a\u000a
p1942
S'PUSH RBX\nSUB RSP,0x20\nMOV EBX,EDI\nCALL 0x004018a0\nTEST RAX,RAX\nJZ 0x004025e6\nMOV RDI,qword ptr [RAX]\nJMP 0x004025f3\nMOV EDI,EBX\nMOV RSI,RSP\nCALL 0x00403410\nMOV RDI,RAX\nCALL 0x004057b0\nADD RSP,0x20\nPOP RBX\nRET\n'
p1943
S'53\n48 83 ec 20\n89 fb\ne8 c4 f2 ff ff\n48 85 c0\n74 05\n48 8b 38\neb 0d\n89 df\n48 89 e6\ne8 20 0e 00 00\n48 89 c7\ne8 b8 31 00 00\n48 83 c4 20\n5b\nc3\n'
p1944
S'.text:00000000004025d0\n.text:00000000004025d1\n.text:00000000004025d5\n.text:00000000004025d7\n.text:00000000004025dc\n.text:00000000004025df\n.text:00000000004025e1\n.text:00000000004025e4\n.text:00000000004025e6\n.text:00000000004025e8\n.text:00000000004025eb\n.text:00000000004025f0\n.text:00000000004025f3\n.text:00000000004025f8\n.text:00000000004025fc\n.text:00000000004025fd\n'
p1945
tp1946
sS'fd_ring_clear'
p1947
(S'\n__stdcall fd_ring_clear(I_ring * fd_ring)\n'
p1948
V\u000avoid fd_ring_clear(I_ring *fd_ring)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int __fd;\u000a  \u000a  while (_Var1 = i_ring_empty(fd_ring), _Var1 == false) {\u000a    __fd = i_ring_pop(fd_ring);\u000a    if (-1 < __fd) {\u000a      close(__fd);\u000a    }\u000a  }\u000a  return;\u000a}\u000a\u000a
p1949
S'PUSH RBX\nMOV RBX,RDI\nJMP 0x004064f7\nMOV EDI,EAX\nCALL 0x004019c0\nMOV RDI,RBX\nCALL 0x00408da0\nTEST AL,AL\nJNZ 0x00406511\nMOV RDI,RBX\nCALL 0x00408df0\nTEST EAX,EAX\nJNS 0x004064f0\nJMP 0x004064f7\nPOP RBX\nRET\n'
p1950
S'53\n48 89 fb\neb 11\n89 c7\ne8 c9 b4 ff ff\n48 89 df\ne8 a1 28 00 00\n84 c0\n75 0e\n48 89 df\ne8 e5 28 00 00\n85 c0\n79 e1\neb e6\n5b\nc3\n'
p1951
S'.text:00000000004064e0\n.text:00000000004064e1\n.text:00000000004064e4\n.text:00000000004064f0\n.text:00000000004064f2\n.text:00000000004064f7\n.text:00000000004064fa\n.text:00000000004064ff\n.text:0000000000406501\n.text:0000000000406503\n.text:0000000000406506\n.text:000000000040650b\n.text:000000000040650d\n.text:000000000040650f\n.text:0000000000406511\n.text:0000000000406512\n'
p1952
tp1953
sS'rpl_fcntl'
p1954
(S'\n__stdcall rpl_fcntl()\n'
p1955
V\u000a/* WARNING: Removing unreachable block (ram,0x004093bb) */\u000a/* WARNING: Removing unreachable block (ram,0x00409424) */\u000a/* WARNING: Heritage AFTER dead removal. Example location: s0xffffffffffffff38 : 0x004093c9 */\u000a/* WARNING: Restarted to delay deadcode elimination for space: stack */\u000a\u000aint rpl_fcntl(void...)\u000a\u000a{\u000a  int have_dupfd_cloexec;\u000a  int __fd;\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  int __cmd;\u000a  uint __fd_00;\u000a  va_list arg;\u000a  ulong local_c8;\u000a  \u000a  if (__cmd == 0x406) {\u000a    if (have_dupfd_cloexec < 0) {\u000a      __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a    }\u000a    else {\u000a      __fd = fcntl(__fd_00,0x406,local_c8 & 0xffffffff);\u000a      have_dupfd_cloexec = 1;\u000a      if ((__fd < 0) && (piVar3 = __errno_location(), *piVar3 == 0x16)) {\u000a        __fd = rpl_fcntl((ulong)__fd_00,0,local_c8 & 0xffffffff);\u000a        have_dupfd_cloexec = -1;\u000a        if (__fd < 0) {\u000a          return __fd;\u000a        }\u000a      }\u000a    }\u000a    if (((-1 < __fd) && (have_dupfd_cloexec == -1)) &&\u000a       ((uVar1 = fcntl(__fd,1), (int)uVar1 < 0 ||\u000a        (iVar2 = fcntl(__fd,2,(ulong)(uVar1 | 1),(ulong)(uVar1 | 1)), iVar2 == -1)))) {\u000a      piVar3 = __errno_location();\u000a      iVar2 = *piVar3;\u000a      close(__fd);\u000a      *piVar3 = iVar2;\u000a      __fd = -1;\u000a    }\u000a  }\u000a  else {\u000a    __fd = fcntl(__fd_00,__cmd,local_c8);\u000a  }\u000a  return __fd;\u000a}\u000a\u000a
p1956
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0xd8\nMOV R14D,EDI\nTEST AL,AL\nJZ 0x0040934b\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nMOV qword ptr [RSP + 0x38],RCX\nMOV qword ptr [RSP + 0x30],RDX\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0x100 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x10\nMOVSXD RAX,dword ptr [RSP]\nCMP ESI,0x406\nJNZ 0x004093a6\nCMP EAX,0x28\nJA 0x004093bb\nMOV RCX,qword ptr [RSP + 0x10]\nADD RCX,RAX\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x004093c9\nCMP EAX,0x28\nJA 0x00409424\nMOV RCX,RAX\nADD RCX,qword ptr [RSP + 0x10]\nLEA EAX,[RAX + 0x8]\nMOV dword ptr [RSP],EAX\nJMP 0x00409432\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV EBX,dword ptr [RCX]\nCMP dword ptr [0x0060f4a8],0x0\nJS 0x00409443\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00401870\nMOV EBP,EAX\nMOV R15D,0x1\nTEST EBP,EBP\nJNS 0x00409414\nCALL 0x00401800\nCMP dword ptr [RAX],0x16\nJNZ 0x00409414\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00409300\nMOV EBP,EAX\nMOV R15D,0xffffffff\nTEST EBP,EBP\nJS 0x004094a6\nMOV dword ptr [0x0060f4a8],R15D\nTEST EBP,EBP\nJNS 0x00409457\nJMP 0x004094a6\nMOV RCX,qword ptr [RSP + 0x8]\nLEA RAX,[RCX + 0x8]\nMOV qword ptr [RSP + 0x8],RAX\nMOV RDX,qword ptr [RCX]\nXOR EAX,EAX\nMOV EDI,R14D\nCALL 0x00401870\nMOV EBP,EAX\nJMP 0x004094a6\nXOR ESI,ESI\nXOR EAX,EAX\nMOV EDI,R14D\nMOV EDX,EBX\nCALL 0x00409300\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x004094a6\nCMP dword ptr [0x0060f4a8],-0x1\nJNZ 0x004094a6\nMOV ESI,0x1\nXOR EAX,EAX\nMOV EDI,EBP\nCALL 0x00401870\nMOV ECX,EAX\nTEST ECX,ECX\nJS 0x0040948c\nOR ECX,0x1\nMOV ESI,0x2\nXOR EAX,EAX\nMOV EDI,EBP\nMOV EDX,ECX\nCALL 0x00401870\nCMP EAX,-0x1\nJNZ 0x004094a6\nCALL 0x00401800\nMOV RBX,RAX\nMOV R14D,dword ptr [RBX]\nMOV EDI,EBP\nCALL 0x004019c0\nMOV dword ptr [RBX],R14D\nMOV EBP,0xffffffff\nMOV EAX,EBP\nADD RSP,0xd8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1957
S'55\n41 57\n41 56\n53\n48 81 ec d8 00 00 00\n41 89 fe\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 89 4c 24 38\n48 89 54 24 30\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 00 01 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 10 00 00 00\n48 63 04 24\n81 fe 06 04 00 00\n75 15\n83 f8 28\n77 25\n48 8b 4c 24 10\n48 01 c1\n8d 40 08\n89 04 24\neb 23\n83 f8 28\n77 79\n48 89 c1\n48 03 4c 24 10\n8d 40 08\n89 04 24\neb 77\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n8b 19\n83 3d d6 60 20 00 00\n78 6f\n31 c0\n44 89 f7\n89 da\ne8 90 84 ff ff\n89 c5\n41 bf 01 00 00 00\n85 ed\n79 28\ne8 0f 84 ff ff\n83 38 16\n75 1e\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 fc fe ff ff\n89 c5\n41 bf ff ff ff ff\n85 ed\n0f 88 92 00 00 00\n44 89 3d 8d 60 20 00\n85 ed\n79 38\ne9 82 00 00 00\n48 8b 4c 24 08\n48 8d 41 08\n48 89 44 24 08\n48 8b 11\n31 c0\n44 89 f7\ne8 31 84 ff ff\n89 c5\neb 63\n31 f6\n31 c0\n44 89 f7\n89 da\ne8 af fe ff ff\n89 c5\n85 ed\n78 4f\n83 3d 4a 60 20 00 ff\n75 46\nbe 01 00 00 00\n31 c0\n89 ef\ne8 02 84 ff ff\n89 c1\n85 c9\n78 18\n83 c9 01\nbe 02 00 00 00\n31 c0\n89 ef\n89 ca\ne8 e9 83 ff ff\n83 f8 ff\n75 1a\ne8 6f 83 ff ff\n48 89 c3\n44 8b 33\n89 ef\ne8 22 85 ff ff\n44 89 33\nbd ff ff ff ff\n89 e8\n48 81 c4 d8 00 00 00\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1958
S'.text:0000000000409300\n.text:0000000000409301\n.text:0000000000409303\n.text:0000000000409305\n.text:0000000000409306\n.text:000000000040930d\n.text:0000000000409310\n.text:0000000000409312\n.text:0000000000409314\n.text:0000000000409319\n.text:000000000040931e\n.text:0000000000409323\n.text:000000000040932b\n.text:0000000000409333\n.text:000000000040933b\n.text:0000000000409343\n.text:000000000040934b\n.text:0000000000409350\n.text:0000000000409355\n.text:000000000040935a\n.text:000000000040935f\n.text:0000000000409364\n.text:0000000000409369\n.text:0000000000409371\n.text:0000000000409376\n.text:000000000040937e\n.text:0000000000409385\n.text:0000000000409389\n.text:000000000040938f\n.text:0000000000409391\n.text:0000000000409394\n.text:0000000000409396\n.text:000000000040939b\n.text:000000000040939e\n.text:00000000004093a1\n.text:00000000004093a4\n.text:00000000004093a6\n.text:00000000004093a9\n.text:00000000004093ab\n.text:00000000004093ae\n.text:00000000004093b3\n.text:00000000004093b6\n.text:00000000004093b9\n.text:00000000004093bb\n.text:00000000004093c0\n.text:00000000004093c4\n.text:00000000004093c9\n.text:00000000004093cb\n.text:00000000004093d2\n.text:00000000004093d4\n.text:00000000004093d6\n.text:00000000004093d9\n.text:00000000004093db\n.text:00000000004093e0\n.text:00000000004093e2\n.text:00000000004093e8\n.text:00000000004093ea\n.text:00000000004093ec\n.text:00000000004093f1\n.text:00000000004093f4\n.text:00000000004093f6\n.text:00000000004093f8\n.text:00000000004093fa\n.text:00000000004093fd\n.text:00000000004093ff\n.text:0000000000409404\n.text:0000000000409406\n.text:000000000040940c\n.text:000000000040940e\n.text:0000000000409414\n.text:000000000040941b\n.text:000000000040941d\n.text:000000000040941f\n.text:0000000000409424\n.text:0000000000409429\n.text:000000000040942d\n.text:0000000000409432\n.text:0000000000409435\n.text:0000000000409437\n.text:000000000040943a\n.text:000000000040943f\n.text:0000000000409441\n.text:0000000000409443\n.text:0000000000409445\n.text:0000000000409447\n.text:000000000040944a\n.text:000000000040944c\n.text:0000000000409451\n.text:0000000000409453\n.text:0000000000409455\n.text:0000000000409457\n.text:000000000040945e\n.text:0000000000409460\n.text:0000000000409465\n.text:0000000000409467\n.text:0000000000409469\n.text:000000000040946e\n.text:0000000000409470\n.text:0000000000409472\n.text:0000000000409474\n.text:0000000000409477\n.text:000000000040947c\n.text:000000000040947e\n.text:0000000000409480\n.text:0000000000409482\n.text:0000000000409487\n.text:000000000040948a\n.text:000000000040948c\n.text:0000000000409491\n.text:0000000000409494\n.text:0000000000409497\n.text:0000000000409499\n.text:000000000040949e\n.text:00000000004094a1\n.text:00000000004094a6\n.text:00000000004094a8\n.text:00000000004094af\n.text:00000000004094b0\n.text:00000000004094b2\n.text:00000000004094b4\n.text:00000000004094b5\n'
p1959
tp1960
sS'__fpending'
p1961
(S'\n__stdcall __fpending()\n'
p1962
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_0060f058)();\u000a  return;\u000a}\u000a\u000a
p1963
S'JMP qword ptr [0x0060f058]\n'
p1964
S'ff 25 12 d8 20 00\n'
p1965
S'.plt:0000000000401840\n'
p1966
tp1967
s.