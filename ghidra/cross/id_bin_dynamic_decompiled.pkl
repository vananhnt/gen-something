(dp0
S'__libc_csu_init'
p1
(S'\n__stdcall __libc_csu_init()\n'
p2
V\u000avoid __libc_csu_init(EVP_PKEY_CTX *pEParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  long lVar1;\u000a  \u000a  _init(pEParm1);\u000a  lVar1 = 0;\u000a  do {\u000a    (*(code *)(&__frame_dummy_init_array_entry)[lVar1])((ulong)pEParm1 & 0xffffffff,uParm2,uParm3);\u000a    lVar1 = lVar1 + 1;\u000a  } while (lVar1 != 1);\u000a  return;\u000a}\u000a\u000a
p3
S'PUSH R15\nPUSH R14\nMOV R15D,EDI\nPUSH R13\nPUSH R12\nLEA R12,[0x608e08]\nPUSH RBP\nLEA RBP,[0x608e10]\nPUSH RBX\nMOV R14,RSI\nMOV R13,RDX\nSUB RBP,R12\nSUB RSP,0x8\nSAR RBP,0x3\nCALL 0x00401430\nTEST RBP,RBP\nJZ 0x00405766\nXOR EBX,EBX\nNOP dword ptr [RAX + RAX*0x1]\nMOV RDX,R13\nMOV RSI,R14\nMOV EDI,R15D\nCALL qword ptr [R12 + RBX*0x8]\nADD RBX,0x1\nCMP RBP,RBX\nJNZ 0x00405750\nADD RSP,0x8\nPOP RBX\nPOP RBP\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nRET\n'
p4
S'41 57\n41 56\n41 89 ff\n41 55\n41 54\n4c 8d 25 e6 36 20 00\n55\n48 8d 2d e6 36 20 00\n53\n49 89 f6\n49 89 d5\n4c 29 e5\n48 83 ec 08\n48 c1 fd 03\ne8 ef bc ff ff\n48 85 ed\n74 20\n31 db\n0f 1f 84 00 00 00 00 00\n4c 89 ea\n4c 89 f6\n44 89 ff\n41 ff 14 dc\n48 83 c3 01\n48 39 dd\n75 ea\n48 83 c4 08\n5b\n5d\n41 5c\n41 5d\n41 5e\n41 5f\nc3\n'
p5
S'.text:0000000000405710\n.text:0000000000405712\n.text:0000000000405714\n.text:0000000000405717\n.text:0000000000405719\n.text:000000000040571b\n.text:0000000000405722\n.text:0000000000405723\n.text:000000000040572a\n.text:000000000040572b\n.text:000000000040572e\n.text:0000000000405731\n.text:0000000000405734\n.text:0000000000405738\n.text:000000000040573c\n.text:0000000000405741\n.text:0000000000405744\n.text:0000000000405746\n.text:0000000000405748\n.text:0000000000405750\n.text:0000000000405753\n.text:0000000000405756\n.text:0000000000405759\n.text:000000000040575d\n.text:0000000000405761\n.text:0000000000405764\n.text:0000000000405766\n.text:000000000040576a\n.text:000000000040576b\n.text:000000000040576c\n.text:000000000040576e\n.text:0000000000405770\n.text:0000000000405772\n.text:0000000000405774\n'
p6
tp7
sS'ungetc'
p8
(S'\n__stdcall ungetc(int __c, FILE * __stream)\n'
p9
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ungetc(int __c,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ungetc_00609178)();\u000a  return iVar1;\u000a}\u000a\u000a
p10
S'JMP qword ptr [0x00609178]\n'
p11
S'ff 25 52 7a 20 00\n'
p12
S'.plt:0000000000401720\n'
p13
tp14
sS'c_isdigit'
p15
(S'\n__stdcall c_isdigit()\n'
p16
V\u000a_Bool c_isdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x30U < 10);\u000a}\u000a\u000a
p17
S'ADD EDI,-0x30\nCMP EDI,0xa\nSETC AL\nRET\n'
p18
S'83 c7 d0\n83 ff 0a\n0f 92 c0\nc3\n'
p19
S'.text:0000000000404f50\n.text:0000000000404f53\n.text:0000000000404f56\n.text:0000000000404f59\n'
p20
tp21
sS'version_etc_arn'
p22
(S'\n__stdcall version_etc_arn(FILE * stream, char * command_name, char * package, char * version, char * * authors, size_t n_authors)\n'
p23
V\u000avoid version_etc_arn(FILE *stream,char *command_name,char *package,char *version,char **authors,\u000a                    size_t n_authors)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  undefined8 uVar2;\u000a  \u000a  if (command_name == (char *)0x0) {\u000a    __fprintf_chk(stream,1,"%s %s\u005cn",package,version);\u000a  }\u000a  else {\u000a    __fprintf_chk(stream,1,"%s (%s) %s\u005cn",command_name,package);\u000a  }\u000a  uVar1 = dcgettext(0,&DAT_004068c3,5);\u000a  __fprintf_chk(stream,1,"Copyright %s %d Free Software Foundation, Inc.",uVar1,0x7e0);\u000a  __s = (char *)dcgettext(0,\u000a                          "\u005cnLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\u005cnThis is free software: you are free to change and redistribute it.\u005cnThere is NO WARRANTY, to the extent permitted by law.\u005cn\u005cn"\u000a                          ,5);\u000a  fputs_unlocked(__s,(FILE *)stream);\u000a  switch(n_authors) {\u000a  case 0:\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  case 1:\u000a    uVar1 = dcgettext(0,"Written by %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors);\u000a    return;\u000a  case 2:\u000a    uVar1 = dcgettext(0,"Written by %s and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1]);\u000a    return;\u000a  case 3:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2]);\u000a    return;\u000a  case 4:\u000a    uVar2 = 0x404647;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],uVar2);\u000a    break;\u000a  case 5:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4]);\u000a    break;\u000a  case 6:\u000a    uVar2 = 0x4046c8;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  uVar2);\u000a    break;\u000a  case 7:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6]);\u000a    break;\u000a  case 8:\u000a    uVar2 = 0x40475c;\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cnand %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],uVar2);\u000a    break;\u000a  case 9:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, and %s.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a    break;\u000a  default:\u000a    uVar1 = dcgettext(0,"Written by %s, %s, %s,\u005cn%s, %s, %s, %s,\u005cn%s, %s, and others.\u005cn",5);\u000a    __fprintf_chk(stream,1,uVar1,*authors,authors[1],authors[2],authors[3],authors[4],authors[5],\u000a                  authors[6],authors[7],authors[8]);\u000a  }\u000a  return;\u000a}\u000a\u000a
p24
S'PUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R12,R9\nMOV R15,R8\nMOV R9,RCX\nMOV RBX,RDX\nMOV RCX,RSI\nMOV R14,RDI\nMOV ESI,0x1\nTEST RCX,RCX\nJZ 0x004044d8\nMOV EDX,0x4068b0\nXOR EAX,EAX\nMOV RDI,R14\nMOV R8,RBX\nCALL 0x00401820\nJMP 0x004044ed\nMOV EDX,0x4068bc\nXOR EAX,EAX\nMOV RDI,R14\nMOV RCX,RBX\nMOV R8,R9\nCALL 0x00401820\nXOR EDI,EDI\nMOV ESI,0x4068c3\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nMOV ESI,0x1\nMOV EDX,0x406b90\nMOV R8D,0x7e0\nXOR EAX,EAX\nMOV RDI,R14\nCALL 0x00401820\nXOR EDI,EDI\nMOV ESI,0x4068c7\nMOV EDX,0x5\nCALL 0x00401540\nMOV RDI,RAX\nMOV RSI,R14\nCALL 0x00401640\nCMP R12,0x9\nJA 0x00404576\nJMP qword ptr [0x406860 + R12*0x8]\nXOR EDI,EDI\nMOV ESI,0x406992\nMOV EDX,0x5\nCALL 0x00401540\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401820\nXOR EDI,EDI\nMOV ESI,0x406ad1\nMOV EDX,0x5\nCALL 0x00401540\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401820\nADD RSP,0x38\nJMP 0x004047e7\nXOR EDI,EDI\nMOV ESI,0x4069a2\nMOV EDX,0x5\nCALL 0x00401540\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401820\nXOR EDI,EDI\nMOV ESI,0x4069b9\nMOV EDX,0x5\nCALL 0x00401540\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nJMP 0x00401820\nXOR EDI,EDI\nMOV ESI,0x4069d5\nMOV EDX,0x5\nCALL 0x00401540\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401820\nADD RSP,0x18\nJMP 0x004047e7\nXOR EDI,EDI\nMOV ESI,0x4069f5\nMOV EDX,0x5\nCALL 0x00401540\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401820\nADD RSP,0x18\nJMP 0x004047e7\nXOR EDI,EDI\nMOV ESI,0x406a19\nMOV EDX,0x5\nCALL 0x00401540\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401820\nADD RSP,0x28\nJMP 0x004047e7\nXOR EDI,EDI\nMOV ESI,0x406a41\nMOV EDX,0x5\nCALL 0x00401540\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401820\nADD RSP,0x28\nJMP 0x004047e7\nXOR EDI,EDI\nMOV ESI,0x406a6d\nMOV EDX,0x5\nCALL 0x00401540\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nSUB RSP,0x8\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401820\nADD RSP,0x38\nJMP 0x004047e7\nXOR EDI,EDI\nMOV ESI,0x406a9d\nMOV EDX,0x5\nCALL 0x00401540\nMOV RDX,RAX\nMOV RCX,qword ptr [R15]\nMOV R8,qword ptr [R15 + 0x8]\nMOV R9,qword ptr [R15 + 0x10]\nMOV ESI,0x1\nMOV EAX,0x0\nMOV RDI,R14\nPUSH qword ptr [R15 + 0x40]\nPUSH qword ptr [R15 + 0x38]\nPUSH qword ptr [R15 + 0x30]\nPUSH qword ptr [R15 + 0x28]\nPUSH qword ptr [R15 + 0x20]\nPUSH qword ptr [R15 + 0x18]\nCALL 0x00401820\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nRET\nCALL 0x00401490\n'
p25
S'41 57\n41 56\n41 54\n53\n50\n4d 89 cc\n4d 89 c7\n49 89 c9\n48 89 d3\n48 89 f1\n49 89 fe\nbe 01 00 00 00\n48 85 c9\n74 14\nba b0 68 40 00\n31 c0\n4c 89 f7\n49 89 d8\ne8 4a d3 ff ff\neb 15\nba bc 68 40 00\n31 c0\n4c 89 f7\n48 89 d9\n4d 89 c8\ne8 33 d3 ff ff\n31 ff\nbe c3 68 40 00\nba 05 00 00 00\ne8 42 d0 ff ff\n48 89 c1\nbe 01 00 00 00\nba 90 6b 40 00\n41 b8 e0 07 00 00\n31 c0\n4c 89 f7\ne8 05 d3 ff ff\n31 ff\nbe c7 68 40 00\nba 05 00 00 00\ne8 14 d0 ff ff\n48 89 c7\n4c 89 f6\ne8 09 d1 ff ff\n49 83 fc 09\n77 39\n42 ff 24 e5 60 68 40 00\n31 ff\nbe 92 69 40 00\nba 05 00 00 00\ne8 ea cf ff ff\n48 89 c2\n49 8b 0f\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 aa d2 ff ff\n31 ff\nbe d1 6a 40 00\nba 05 00 00 00\ne8 b9 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 61 d2 ff ff\n48 83 c4 38\ne9 1f 02 00 00\n31 ff\nbe a2 69 40 00\nba 05 00 00 00\ne8 67 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 23 d2 ff ff\n31 ff\nbe b9 69 40 00\nba 05 00 00 00\ne8 32 cf ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\n31 c0\n4c 89 f7\n48 83 c4 08\n5b\n41 5c\n41 5e\n41 5f\ne9 ea d1 ff ff\n31 ff\nbe d5 69 40 00\nba 05 00 00 00\ne8 f9 ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\n31 c0\n4c 89 f7\n41 ff 77 18\ne8 b4 d1 ff ff\n48 83 c4 18\ne9 72 01 00 00\n31 ff\nbe f5 69 40 00\nba 05 00 00 00\ne8 ba ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 20\n41 ff 77 18\ne8 72 d1 ff ff\n48 83 c4 18\ne9 30 01 00 00\n31 ff\nbe 19 6a 40 00\nba 05 00 00 00\ne8 78 ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 28 d1 ff ff\n48 83 c4 28\ne9 e6 00 00 00\n31 ff\nbe 41 6a 40 00\nba 05 00 00 00\ne8 2e ce ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 de d0 ff ff\n48 83 c4 28\ne9 9c 00 00 00\n31 ff\nbe 6d 6a 40 00\nba 05 00 00 00\ne8 e4 cd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\n48 83 ec 08\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 8c d0 ff ff\n48 83 c4 38\neb 4d\n31 ff\nbe 9d 6a 40 00\nba 05 00 00 00\ne8 95 cd ff ff\n48 89 c2\n49 8b 0f\n4d 8b 47 08\n4d 8b 4f 10\nbe 01 00 00 00\nb8 00 00 00 00\n4c 89 f7\n41 ff 77 40\n41 ff 77 38\n41 ff 77 30\n41 ff 77 28\n41 ff 77 20\n41 ff 77 18\ne8 3d d0 ff ff\n48 83 c4 38\n5b\n41 5c\n41 5e\n41 5f\nc3\ne8 9c cc ff ff\n'
p26
S'.text:00000000004044a0\n.text:00000000004044a2\n.text:00000000004044a4\n.text:00000000004044a6\n.text:00000000004044a7\n.text:00000000004044a8\n.text:00000000004044ab\n.text:00000000004044ae\n.text:00000000004044b1\n.text:00000000004044b4\n.text:00000000004044b7\n.text:00000000004044ba\n.text:00000000004044bf\n.text:00000000004044c2\n.text:00000000004044c4\n.text:00000000004044c9\n.text:00000000004044cb\n.text:00000000004044ce\n.text:00000000004044d1\n.text:00000000004044d6\n.text:00000000004044d8\n.text:00000000004044dd\n.text:00000000004044df\n.text:00000000004044e2\n.text:00000000004044e5\n.text:00000000004044e8\n.text:00000000004044ed\n.text:00000000004044ef\n.text:00000000004044f4\n.text:00000000004044f9\n.text:00000000004044fe\n.text:0000000000404501\n.text:0000000000404506\n.text:000000000040450b\n.text:0000000000404511\n.text:0000000000404513\n.text:0000000000404516\n.text:000000000040451b\n.text:000000000040451d\n.text:0000000000404522\n.text:0000000000404527\n.text:000000000040452c\n.text:000000000040452f\n.text:0000000000404532\n.text:0000000000404537\n.text:000000000040453b\n.text:000000000040453d\n.text:0000000000404545\n.text:0000000000404547\n.text:000000000040454c\n.text:0000000000404551\n.text:0000000000404556\n.text:0000000000404559\n.text:000000000040455c\n.text:0000000000404561\n.text:0000000000404563\n.text:0000000000404566\n.text:000000000040456a\n.text:000000000040456b\n.text:000000000040456d\n.text:000000000040456f\n.text:0000000000404571\n.text:0000000000404576\n.text:0000000000404578\n.text:000000000040457d\n.text:0000000000404582\n.text:0000000000404587\n.text:000000000040458a\n.text:000000000040458d\n.text:0000000000404591\n.text:0000000000404595\n.text:000000000040459a\n.text:000000000040459f\n.text:00000000004045a2\n.text:00000000004045a6\n.text:00000000004045aa\n.text:00000000004045ae\n.text:00000000004045b2\n.text:00000000004045b6\n.text:00000000004045ba\n.text:00000000004045bf\n.text:00000000004045c3\n.text:00000000004045c8\n.text:00000000004045ca\n.text:00000000004045cf\n.text:00000000004045d4\n.text:00000000004045d9\n.text:00000000004045dc\n.text:00000000004045df\n.text:00000000004045e3\n.text:00000000004045e8\n.text:00000000004045ea\n.text:00000000004045ed\n.text:00000000004045f1\n.text:00000000004045f2\n.text:00000000004045f4\n.text:00000000004045f6\n.text:00000000004045f8\n.text:00000000004045fd\n.text:00000000004045ff\n.text:0000000000404604\n.text:0000000000404609\n.text:000000000040460e\n.text:0000000000404611\n.text:0000000000404614\n.text:0000000000404618\n.text:000000000040461c\n.text:0000000000404621\n.text:0000000000404623\n.text:0000000000404626\n.text:000000000040462a\n.text:000000000040462b\n.text:000000000040462d\n.text:000000000040462f\n.text:0000000000404631\n.text:0000000000404636\n.text:0000000000404638\n.text:000000000040463d\n.text:0000000000404642\n.text:0000000000404647\n.text:000000000040464a\n.text:000000000040464d\n.text:0000000000404651\n.text:0000000000404655\n.text:0000000000404659\n.text:000000000040465e\n.text:0000000000404660\n.text:0000000000404663\n.text:0000000000404667\n.text:000000000040466c\n.text:0000000000404670\n.text:0000000000404675\n.text:0000000000404677\n.text:000000000040467c\n.text:0000000000404681\n.text:0000000000404686\n.text:0000000000404689\n.text:000000000040468c\n.text:0000000000404690\n.text:0000000000404694\n.text:0000000000404699\n.text:000000000040469e\n.text:00000000004046a1\n.text:00000000004046a5\n.text:00000000004046a9\n.text:00000000004046ae\n.text:00000000004046b2\n.text:00000000004046b7\n.text:00000000004046b9\n.text:00000000004046be\n.text:00000000004046c3\n.text:00000000004046c8\n.text:00000000004046cb\n.text:00000000004046ce\n.text:00000000004046d2\n.text:00000000004046d6\n.text:00000000004046da\n.text:00000000004046df\n.text:00000000004046e4\n.text:00000000004046e7\n.text:00000000004046eb\n.text:00000000004046ef\n.text:00000000004046f3\n.text:00000000004046f8\n.text:00000000004046fc\n.text:0000000000404701\n.text:0000000000404703\n.text:0000000000404708\n.text:000000000040470d\n.text:0000000000404712\n.text:0000000000404715\n.text:0000000000404718\n.text:000000000040471c\n.text:0000000000404720\n.text:0000000000404725\n.text:000000000040472a\n.text:000000000040472d\n.text:0000000000404731\n.text:0000000000404735\n.text:0000000000404739\n.text:000000000040473d\n.text:0000000000404742\n.text:0000000000404746\n.text:000000000040474b\n.text:000000000040474d\n.text:0000000000404752\n.text:0000000000404757\n.text:000000000040475c\n.text:000000000040475f\n.text:0000000000404762\n.text:0000000000404766\n.text:000000000040476a\n.text:000000000040476e\n.text:0000000000404773\n.text:0000000000404778\n.text:000000000040477b\n.text:000000000040477f\n.text:0000000000404783\n.text:0000000000404787\n.text:000000000040478b\n.text:000000000040478f\n.text:0000000000404794\n.text:0000000000404798\n.text:000000000040479a\n.text:000000000040479c\n.text:00000000004047a1\n.text:00000000004047a6\n.text:00000000004047ab\n.text:00000000004047ae\n.text:00000000004047b1\n.text:00000000004047b5\n.text:00000000004047b9\n.text:00000000004047be\n.text:00000000004047c3\n.text:00000000004047c6\n.text:00000000004047ca\n.text:00000000004047ce\n.text:00000000004047d2\n.text:00000000004047d6\n.text:00000000004047da\n.text:00000000004047de\n.text:00000000004047e3\n.text:00000000004047e7\n.text:00000000004047e8\n.text:00000000004047ea\n.text:00000000004047ec\n.text:00000000004047ee\n.text:00000000004047ef\n'
p27
tp28
sS'usage'
p29
(S'\n__stdcall usage()\n'
p30
V\u000avoid usage(int iParm1)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  if (iParm1 == 0) {\u000a    uVar1 = dcgettext(0,"Usage: %s [OPTION]... [USER]\u005cn",5);\u000a    __printf_chk(1,uVar1,program_name,uVar1);\u000a    __s = (char *)dcgettext(0,\u000a                            "Print user and group information for the specified USER,\u005cnor (when USER omitted) for the current user.\u005cn\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "  -a             ignore, for compatibility with other versions\u005cn  -Z, --context  print only the security context of the process\u005cn  -g, --group    print only the effective group ID\u005cn  -G, --groups   print all group IDs\u005cn  -n, --name     print a name instead of a number, for -ugG\u005cn  -r, --real     print the real ID instead of the effective ID, with -ugG\u005cn  -u, --user     print only the effective user ID\u005cn  -z, --zero     delimit entries with NUL characters, not whitespace;\u005cn                   not permitted in default format\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --help     display this help and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,"      --version  output version information and exit\u005cn",5);\u000a    fputs_unlocked(__s,stdout);\u000a    __s = (char *)dcgettext(0,\u000a                            "\u005cnWithout any OPTION, print some useful set of identified information.\u005cn"\u000a                            ,5);\u000a    fputs_unlocked(__s,stdout);\u000a    emit_ancillary_info();\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  emit_try_help();\u000a                    /* WARNING: Subroutine does not return */\u000a  exit(iParm1);\u000a}\u000a\u000a
p31
S'PUSH RBX\nMOV EBX,EDI\nTEST EBX,EBX\nJNZ 0x00401a41\nXOR EDI,EDI\nMOV ESI,0x405b30\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nMOV RDX,qword ptr [0x00609358]\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401790\nXOR EDI,EDI\nMOV ESI,0x405b4e\nMOV EDX,0x5\nCALL 0x00401540\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x00401640\nXOR EDI,EDI\nMOV ESI,0x405bb6\nMOV EDX,0x5\nCALL 0x00401540\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x00401640\nXOR EDI,EDI\nMOV ESI,0x405dbf\nMOV EDX,0x5\nCALL 0x00401540\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x00401640\nXOR EDI,EDI\nMOV ESI,0x405dec\nMOV EDX,0x5\nCALL 0x00401540\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x00401640\nXOR EDI,EDI\nMOV ESI,0x405e22\nMOV EDX,0x5\nCALL 0x00401540\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x00401640\nCALL 0x00401a90\nMOV EDI,EBX\nCALL 0x00401800\nCALL 0x00401a50\nMOV EDI,EBX\nCALL 0x00401800\n'
p32
S'53\n89 fb\n85 db\n0f 85 d6 00 00 00\n31 ff\nbe 30 5b 40 00\nba 05 00 00 00\ne8 c4 fb ff ff\n48 89 c1\n48 8b 15 d2 79 20 00\nbf 01 00 00 00\n31 c0\n48 89 ce\ne8 fb fd ff ff\n31 ff\nbe 4e 5b 40 00\nba 05 00 00 00\ne8 9a fb ff ff\n48 8b 35 fb 78 20 00\n48 89 c7\ne8 8b fc ff ff\n31 ff\nbe b6 5b 40 00\nba 05 00 00 00\ne8 7a fb ff ff\n48 8b 35 db 78 20 00\n48 89 c7\ne8 6b fc ff ff\n31 ff\nbe bf 5d 40 00\nba 05 00 00 00\ne8 5a fb ff ff\n48 8b 35 bb 78 20 00\n48 89 c7\ne8 4b fc ff ff\n31 ff\nbe ec 5d 40 00\nba 05 00 00 00\ne8 3a fb ff ff\n48 8b 35 9b 78 20 00\n48 89 c7\ne8 2b fc ff ff\n31 ff\nbe 22 5e 40 00\nba 05 00 00 00\ne8 1a fb ff ff\n48 8b 35 7b 78 20 00\n48 89 c7\ne8 0b fc ff ff\ne8 56 00 00 00\n89 df\ne8 bf fd ff ff\ne8 0a 00 00 00\n89 df\ne8 b3 fd ff ff\n'
p33
S'.text:0000000000401960\n.text:0000000000401961\n.text:0000000000401963\n.text:0000000000401965\n.text:000000000040196b\n.text:000000000040196d\n.text:0000000000401972\n.text:0000000000401977\n.text:000000000040197c\n.text:000000000040197f\n.text:0000000000401986\n.text:000000000040198b\n.text:000000000040198d\n.text:0000000000401990\n.text:0000000000401995\n.text:0000000000401997\n.text:000000000040199c\n.text:00000000004019a1\n.text:00000000004019a6\n.text:00000000004019ad\n.text:00000000004019b0\n.text:00000000004019b5\n.text:00000000004019b7\n.text:00000000004019bc\n.text:00000000004019c1\n.text:00000000004019c6\n.text:00000000004019cd\n.text:00000000004019d0\n.text:00000000004019d5\n.text:00000000004019d7\n.text:00000000004019dc\n.text:00000000004019e1\n.text:00000000004019e6\n.text:00000000004019ed\n.text:00000000004019f0\n.text:00000000004019f5\n.text:00000000004019f7\n.text:00000000004019fc\n.text:0000000000401a01\n.text:0000000000401a06\n.text:0000000000401a0d\n.text:0000000000401a10\n.text:0000000000401a15\n.text:0000000000401a17\n.text:0000000000401a1c\n.text:0000000000401a21\n.text:0000000000401a26\n.text:0000000000401a2d\n.text:0000000000401a30\n.text:0000000000401a35\n.text:0000000000401a3a\n.text:0000000000401a3c\n.text:0000000000401a41\n.text:0000000000401a46\n.text:0000000000401a48\n'
p34
tp35
sS'quoting_options_from_style'
p36
(S'\n__stdcall quoting_options_from_style(quoting_options * __return_storage_ptr__)\n'
p37
V\u000aquoting_options * quoting_options_from_style(quoting_options *__return_storage_ptr__)\u000a\u000a{\u000a  quoting_style in_ESI;\u000a  \u000a  if (in_ESI != custom_quoting_style) {\u000a    __return_storage_ptr__->style = in_ESI;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->right_quote + 4) = 0;\u000a    __return_storage_ptr__->quote_these_too[7] = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->left_quote = 0;\u000a    *(undefined4 *)((long)&__return_storage_ptr__->left_quote + 4) = 0;\u000a    *(undefined4 *)&__return_storage_ptr__->right_quote = 0;\u000a    __return_storage_ptr__->quote_these_too[3] = 0;\u000a    __return_storage_ptr__->quote_these_too[4] = 0;\u000a    __return_storage_ptr__->quote_these_too[5] = 0;\u000a    __return_storage_ptr__->quote_these_too[6] = 0;\u000a    __return_storage_ptr__->flags = 0;\u000a    __return_storage_ptr__->quote_these_too[0] = 0;\u000a    __return_storage_ptr__->quote_these_too[1] = 0;\u000a    __return_storage_ptr__->quote_these_too[2] = 0;\u000a    return __return_storage_ptr__;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p38
S'SUB RSP,0x38\nXORPS XMM0,XMM0\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVAPS xmmword ptr [RSP],XMM0\nMOV dword ptr [RSP + 0x30],0x0\nCMP ESI,0xa\nJZ 0x00403aad\nMOV dword ptr [RDI],ESI\nMOV EAX,dword ptr [RSP + 0x30]\nMOV dword ptr [RDI + 0x34],EAX\nMOVAPS XMM0,xmmword ptr [RSP]\nMOVAPS XMM1,xmmword ptr [RSP + 0x10]\nMOVAPS XMM2,xmmword ptr [RSP + 0x20]\nMOVUPS xmmword ptr [RDI + 0x24],XMM2\nMOVUPS xmmword ptr [RDI + 0x14],XMM1\nMOVUPS xmmword ptr [RDI + 0x4],XMM0\nMOV RAX,RDI\nADD RSP,0x38\nRET\nCALL 0x00401490\n'
p39
S'48 83 ec 38\n0f 57 c0\n0f 29 44 24 20\n0f 29 44 24 10\n0f 29 04 24\nc7 44 24 30 00 00 00 00\n83 fe 0a\n74 2b\n89 37\n8b 44 24 30\n89 47 34\n0f 28 04 24\n0f 28 4c 24 10\n0f 28 54 24 20\n0f 11 57 24\n0f 11 4f 14\n0f 11 47 04\n48 89 f8\n48 83 c4 38\nc3\ne8 de d9 ff ff\n'
p40
S'.text:0000000000403a60\n.text:0000000000403a64\n.text:0000000000403a67\n.text:0000000000403a6c\n.text:0000000000403a71\n.text:0000000000403a75\n.text:0000000000403a7d\n.text:0000000000403a80\n.text:0000000000403a82\n.text:0000000000403a84\n.text:0000000000403a88\n.text:0000000000403a8b\n.text:0000000000403a8f\n.text:0000000000403a94\n.text:0000000000403a99\n.text:0000000000403a9d\n.text:0000000000403aa1\n.text:0000000000403aa5\n.text:0000000000403aa8\n.text:0000000000403aac\n.text:0000000000403aad\n'
p41
tp42
sS'strchr'
p43
(S'\n__stdcall strchr(char * __s, int __c)\n'
p44
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strchr_006090b8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p45
S'JMP qword ptr [0x006090b8]\n'
p46
S'ff 25 12 7b 20 00\n'
p47
S'.plt:00000000004015a0\n'
p48
tp49
sS'rpl_fclose'
p50
(S'\n__stdcall rpl_fclose(FILE * fp)\n'
p51
V\u000aint rpl_fclose(FILE *fp)\u000a\u000a{\u000a  int __fd;\u000a  int iVar1;\u000a  __off_t _Var2;\u000a  int *piVar3;\u000a  \u000a  __fd = fileno((FILE *)fp);\u000a  if (-1 < __fd) {\u000a    __fd = __freading(fp);\u000a    if (__fd != 0) {\u000a      __fd = fileno((FILE *)fp);\u000a      _Var2 = lseek(__fd,0,1);\u000a      if (_Var2 == -1) goto LAB_00405639;\u000a    }\u000a    __fd = rpl_fflush(fp);\u000a    if (__fd != 0) {\u000a      piVar3 = __errno_location();\u000a      __fd = *piVar3;\u000a      iVar1 = fclose((FILE *)fp);\u000a      if (__fd != 0) {\u000a        piVar3 = __errno_location();\u000a        *piVar3 = __fd;\u000a        iVar1 = -1;\u000a      }\u000a      return iVar1;\u000a    }\u000a  }\u000aLAB_00405639:\u000a  __fd = fclose((FILE *)fp);\u000a  return __fd;\u000a}\u000a\u000a
p52
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nCALL 0x004016c0\nTEST EAX,EAX\nJS 0x00405639\nMOV RDI,RBX\nCALL 0x00401750\nTEST EAX,EAX\nJZ 0x00405607\nMOV RDI,RBX\nCALL 0x004016c0\nXOR ESI,ESI\nMOV EDX,0x1\nMOV EDI,EAX\nCALL 0x004015d0\nCMP RAX,-0x1\nJZ 0x00405639\nMOV RDI,RBX\nCALL 0x00405650\nTEST EAX,EAX\nJZ 0x00405639\nCALL 0x004014a0\nMOV EBP,dword ptr [RAX]\nMOV RDI,RBX\nCALL 0x00401510\nTEST EBP,EBP\nJZ 0x00405632\nCALL 0x004014a0\nMOV dword ptr [RAX],EBP\nMOV EAX,0xffffffff\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x00401510\n'
p53
S'55\n53\n50\n48 89 fb\ne8 e5 c0 ff ff\n85 c0\n78 5a\n48 89 df\ne8 69 c1 ff ff\n85 c0\n74 1c\n48 89 df\ne8 cd c0 ff ff\n31 f6\nba 01 00 00 00\n89 c7\ne8 cf bf ff ff\n48 83 f8 ff\n74 32\n48 89 df\ne8 41 00 00 00\n85 c0\n74 26\ne8 88 be ff ff\n8b 28\n48 89 df\ne8 ee be ff ff\n85 ed\n74 0c\ne8 75 be ff ff\n89 28\nb8 ff ff ff ff\n48 83 c4 08\n5b\n5d\nc3\n48 89 df\n48 83 c4 08\n5b\n5d\ne9 c9 be ff ff\n'
p54
S'.text:00000000004055d0\n.text:00000000004055d1\n.text:00000000004055d2\n.text:00000000004055d3\n.text:00000000004055d6\n.text:00000000004055db\n.text:00000000004055dd\n.text:00000000004055df\n.text:00000000004055e2\n.text:00000000004055e7\n.text:00000000004055e9\n.text:00000000004055eb\n.text:00000000004055ee\n.text:00000000004055f3\n.text:00000000004055f5\n.text:00000000004055fa\n.text:00000000004055fc\n.text:0000000000405601\n.text:0000000000405605\n.text:0000000000405607\n.text:000000000040560a\n.text:000000000040560f\n.text:0000000000405611\n.text:0000000000405613\n.text:0000000000405618\n.text:000000000040561a\n.text:000000000040561d\n.text:0000000000405622\n.text:0000000000405624\n.text:0000000000405626\n.text:000000000040562b\n.text:000000000040562d\n.text:0000000000405632\n.text:0000000000405636\n.text:0000000000405637\n.text:0000000000405638\n.text:0000000000405639\n.text:000000000040563c\n.text:0000000000405640\n.text:0000000000405641\n.text:0000000000405642\n'
p55
tp56
sS'strcpy'
p57
(S'\n__stdcall strcpy(char * __dest, char * __src)\n'
p58
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strcpy(char *__dest,char *__src)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strcpy_00609050)();\u000a  return pcVar1;\u000a}\u000a\u000a
p59
S'JMP qword ptr [0x00609050]\n'
p60
S'ff 25 7a 7b 20 00\n'
p61
S'.plt:00000000004014d0\n'
p62
tp63
sS'strncmp'
p64
(S'\n__stdcall strncmp(char * __s1, char * __s2, size_t __n)\n'
p65
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strncmp(char *__s1,char *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strncmp_00609040)();\u000a  return iVar1;\u000a}\u000a\u000a
p66
S'JMP qword ptr [0x00609040]\n'
p67
S'ff 25 8a 7b 20 00\n'
p68
S'.plt:00000000004014b0\n'
p69
tp70
sS'xnrealloc'
p71
(S'\n__stdcall xnrealloc(void * p, size_t n, size_t s)\n'
p72
V\u000avoid * xnrealloc(void *p,size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xrealloc(p,s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p73
S'MOV RCX,RDX\nMOV RAX,RSI\nMUL RCX\nJO 0x004049f4\nIMUL RCX,RSI\nMOV RSI,RCX\nJMP 0x00404a00\nPUSH RAX\nCALL 0x00404b50\n'
p74
S'48 89 d1\n48 89 f0\n48 f7 e1\n70 09\n48 0f af ce\n48 89 ce\neb 0c\n50\ne8 56 01 00 00\n'
p75
S'.text:00000000004049e0\n.text:00000000004049e3\n.text:00000000004049e6\n.text:00000000004049e9\n.text:00000000004049eb\n.text:00000000004049ef\n.text:00000000004049f2\n.text:00000000004049f4\n.text:00000000004049f5\n'
p76
tp77
sS'quote'
p78
(S'\n__stdcall quote(char * arg)\n'
p79
V\u000achar * quote(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p80
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403d10\n'
p81
S'48 89 f8\n31 ff\n48 89 c6\neb e6\n'
p82
S'.text:0000000000403d20\n.text:0000000000403d23\n.text:0000000000403d25\n.text:0000000000403d28\n'
p83
tp84
sS'emit_bug_reporting_address'
p85
(S'\n__stdcall emit_bug_reporting_address()\n'
p86
V\u000avoid emit_bug_reporting_address(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  char *__s;\u000a  \u000a  uVar1 = dcgettext(0,"\u005cnReport bugs to: %s\u005cn",5);\u000a  __printf_chk(1,uVar1,"bug-coreutils@gnu.org",uVar1);\u000a  uVar1 = dcgettext(0,"%s home page: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar1,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s = (char *)dcgettext(0,"General help using GNU software: <http://www.gnu.org/gethelp/>\u005cn",5);\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p87
S'PUSH RAX\nXOR EDI,EDI\nMOV ESI,0x406b0d\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x406b22\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401790\nXOR EDI,EDI\nMOV ESI,0x406b38\nMOV EDX,0x5\nCALL 0x00401540\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x405ec4\nMOV ECX,0x4060dc\nXOR EAX,EAX\nCALL 0x00401790\nXOR EDI,EDI\nMOV ESI,0x406b4c\nMOV EDX,0x5\nCALL 0x00401540\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nPOP RAX\nJMP 0x00401640\n'
p88
S'50\n31 ff\nbe 0d 6b 40 00\nba 05 00 00 00\ne8 0e cc ff ff\n48 89 c1\nbf 01 00 00 00\nba 22 6b 40 00\n31 c0\n48 89 ce\ne8 47 ce ff ff\n31 ff\nbe 38 6b 40 00\nba 05 00 00 00\ne8 e6 cb ff ff\n48 89 c6\nbf 01 00 00 00\nba c4 5e 40 00\nb9 dc 60 40 00\n31 c0\ne8 1d ce ff ff\n31 ff\nbe 4c 6b 40 00\nba 05 00 00 00\ne8 bc cb ff ff\n48 8b 35 1d 49 20 00\n48 89 c7\n58\ne9 ac cc ff ff\n'
p89
S'.text:0000000000404920\n.text:0000000000404921\n.text:0000000000404923\n.text:0000000000404928\n.text:000000000040492d\n.text:0000000000404932\n.text:0000000000404935\n.text:000000000040493a\n.text:000000000040493f\n.text:0000000000404941\n.text:0000000000404944\n.text:0000000000404949\n.text:000000000040494b\n.text:0000000000404950\n.text:0000000000404955\n.text:000000000040495a\n.text:000000000040495d\n.text:0000000000404962\n.text:0000000000404967\n.text:000000000040496c\n.text:000000000040496e\n.text:0000000000404973\n.text:0000000000404975\n.text:000000000040497a\n.text:000000000040497f\n.text:0000000000404984\n.text:000000000040498b\n.text:000000000040498e\n.text:000000000040498f\n'
p90
tp91
sS'clone_quoting_options'
p92
(S'\n__stdcall clone_quoting_options(quoting_options * o)\n'
p93
V\u000aquoting_options * clone_quoting_options(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  quoting_options *pqVar3;\u000a  \u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  if (o == (quoting_options *)0x0) {\u000a    o = &default_quoting_options;\u000a  }\u000a  pqVar3 = (quoting_options *)xmemdup(o,0x38);\u000a  *piVar2 = iVar1;\u000a  return pqVar3;\u000a}\u000a\u000a
p94
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004014a0\nMOV R14,RAX\nMOV EBP,dword ptr [R14]\nTEST RBX,RBX\nMOV EAX,0x609360\nCMOVZ RBX,RAX\nMOV ESI,0x38\nMOV RDI,RBX\nCALL 0x00404b00\nMOV dword ptr [R14],EBP\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p95
S'55\n41 56\n53\n48 89 fb\ne8 b4 eb ff ff\n49 89 c6\n41 8b 2e\n48 85 db\nb8 60 93 60 00\n48 0f 44 d8\nbe 38 00 00 00\n48 89 df\ne8 f5 21 00 00\n41 89 2e\n5b\n41 5e\n5d\nc3\n'
p96
S'.text:00000000004028e0\n.text:00000000004028e1\n.text:00000000004028e3\n.text:00000000004028e4\n.text:00000000004028e7\n.text:00000000004028ec\n.text:00000000004028ef\n.text:00000000004028f2\n.text:00000000004028f5\n.text:00000000004028fa\n.text:00000000004028fe\n.text:0000000000402903\n.text:0000000000402906\n.text:000000000040290b\n.text:000000000040290e\n.text:000000000040290f\n.text:0000000000402911\n.text:0000000000402912\n'
p97
tp98
sS'xmalloc'
p99
(S'\n__stdcall xmalloc(size_t n)\n'
p100
V\u000avoid * xmalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p101
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x004016f0\nTEST RBX,RBX\nJZ 0x004049d3\nTEST RAX,RAX\nJZ 0x004049d5\nPOP RBX\nRET\nCALL 0x00404b50\n'
p102
S'53\n48 89 fb\ne8 27 cd ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 76 01 00 00\n'
p103
S'.text:00000000004049c0\n.text:00000000004049c1\n.text:00000000004049c4\n.text:00000000004049c9\n.text:00000000004049cc\n.text:00000000004049ce\n.text:00000000004049d1\n.text:00000000004049d3\n.text:00000000004049d4\n.text:00000000004049d5\n'
p104
tp105
sS'quotearg_char_mem'
p106
(S'\n__stdcall quotearg_char_mem(char * arg, size_t argsize)\n'
p107
V\u000achar * quotearg_char_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_char_quoting((quoting_options *)&local_58);\u000a  pcVar1 = quotearg_n_options((char *)0x0,(size_t)arg,(quoting_options *)argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p108
S'PUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV EAX,EDX\nMOV R14,RSI\nMOV RBX,RDI\nMOV RCX,qword ptr [0x00609390]\nMOV qword ptr [RSP + 0x30],RCX\nMOVUPS XMM0,xmmword ptr [0x00609380]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609370]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609360]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV EDX,0x1\nMOV RDI,R15\nMOV ESI,EAX\nCALL 0x00402940\nXOR EDI,EDI\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403830\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p109
S'41 57\n41 56\n53\n48 83 ec 40\n89 d0\n49 89 f6\n48 89 fb\n48 8b 0d 38 58 20 00\n48 89 4c 24 30\n0f 10 05 1c 58 20 00\n0f 29 44 24 20\n0f 10 05 00 58 20 00\n0f 29 44 24 10\n0f 10 05 e4 57 20 00\n0f 29 04 24\n49 89 e7\nba 01 00 00 00\n4c 89 ff\n89 c6\ne8 ae ed ff ff\n31 ff\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 8e fc ff ff\n48 83 c4 40\n5b\n41 5e\n41 5f\nc3\n'
p110
S'.text:0000000000403b40\n.text:0000000000403b42\n.text:0000000000403b44\n.text:0000000000403b45\n.text:0000000000403b49\n.text:0000000000403b4b\n.text:0000000000403b4e\n.text:0000000000403b51\n.text:0000000000403b58\n.text:0000000000403b5d\n.text:0000000000403b64\n.text:0000000000403b69\n.text:0000000000403b70\n.text:0000000000403b75\n.text:0000000000403b7c\n.text:0000000000403b80\n.text:0000000000403b83\n.text:0000000000403b88\n.text:0000000000403b8b\n.text:0000000000403b8d\n.text:0000000000403b92\n.text:0000000000403b94\n.text:0000000000403b97\n.text:0000000000403b9a\n.text:0000000000403b9d\n.text:0000000000403ba2\n.text:0000000000403ba6\n.text:0000000000403ba7\n.text:0000000000403ba9\n.text:0000000000403bab\n'
p111
tp112
sS'c_isgraph'
p113
(S'\n__stdcall c_isgraph()\n'
p114
V\u000a_Bool c_isgraph(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x21U < 0x5e);\u000a}\u000a\u000a
p115
S'ADD EDI,-0x21\nCMP EDI,0x5e\nSETC AL\nRET\n'
p116
S'83 c7 df\n83 ff 5e\n0f 92 c0\nc3\n'
p117
S'.text:0000000000404f60\n.text:0000000000404f63\n.text:0000000000404f66\n.text:0000000000404f69\n'
p118
tp119
sS'frame_dummy'
p120
(S'\n__stdcall frame_dummy()\n'
p121
V\u000a/* WARNING: Removing unreachable block (ram,0x0040194a) */\u000a\u000avoid frame_dummy(void)\u000a\u000a{\u000a  register_tm_clones();\u000a  return;\u000a}\u000a\u000a
p122
S'MOV EDI,0x608e18\nCMP qword ptr [RDI],0x0\nJNZ 0x00401940\nJMP 0x004018d0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x0040193b\nPUSH RBP\nMOV RBP,RSP\nCALL RAX\nPOP RBP\nJMP 0x004018d0\n'
p123
S'bf 18 8e 60 00\n48 83 3f 00\n75 05\neb 93\nb8 00 00 00 00\n48 85 c0\n74 f1\n55\n48 89 e5\nff d0\n5d\ne9 7a ff ff ff\n'
p124
S'.text:0000000000401930\n.text:0000000000401935\n.text:0000000000401939\n.text:000000000040193b\n.text:0000000000401940\n.text:0000000000401945\n.text:0000000000401948\n.text:000000000040194a\n.text:000000000040194b\n.text:000000000040194e\n.text:0000000000401950\n.text:0000000000401951\n'
p125
tp126
sS'getegid'
p127
(S'\n__stdcall getegid()\n'
p128
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__gid_t getegid(void)\u000a\u000a{\u000a  __gid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getegid_00609188)();\u000a  return _Var1;\u000a}\u000a\u000a
p129
S'JMP qword ptr [0x00609188]\n'
p130
S'ff 25 42 7a 20 00\n'
p131
S'.plt:0000000000401740\n'
p132
tp133
sS'quotearg_buffer_restyled'
p134
(S'\n__stdcall quotearg_buffer_restyled(char * buffer, size_t buffersize, char * arg, size_t argsize, char * left_quote, char * right_quote)\n'
p135
V\u000a/* WARNING: Type propagation algorithm not settling */\u000a\u000asize_t quotearg_buffer_restyled\u000a                 (char *buffer,size_t buffersize,char *arg,size_t argsize,char *left_quote,\u000a                 char *right_quote)\u000a\u000a{\u000a  char cVar1;\u000a  bool bVar2;\u000a  byte bVar3;\u000a  undefined uVar4;\u000a  bool bVar5;\u000a  byte bVar6;\u000a  int iVar7;\u000a  size_t __n;\u000a  ushort **ppuVar8;\u000a  size_t sVar9;\u000a  ulong uVar10;\u000a  ulong uVar11;\u000a  ushort uVar12;\u000a  uint uVar13;\u000a  char *left_quote_00;\u000a  undefined7 uVar14;\u000a  ulong uVar15;\u000a  ulong uVar16;\u000a  byte bVar17;\u000a  byte bVar18;\u000a  uint uVar19;\u000a  ulong uVar20;\u000a  bool bVar21;\u000a  bool bVar22;\u000a  bool bVar23;\u000a  long in_stack_00000008;\u000a  char *in_stack_00000010;\u000a  char *in_stack_00000018;\u000a  size_t bytes;\u000a  ulong local_a8;\u000a  char *local_80;\u000a  char *local_78;\u000a  wint_t local_64;\u000a  char *local_60;\u000a  char *local_58;\u000a  mbstate_t local_50;\u000a  ulong local_48;\u000a  size_t local_40;\u000a  ulong local_38;\u000a  \u000a  left_quote_00 = buffer;\u000a  local_40 = __ctype_get_mb_cur_max();\u000a  uVar19 = (uint)((ulong)left_quote & 0xffffffff);\u000a  if (10 < uVar19) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  local_78 = in_stack_00000018;\u000a  local_80 = in_stack_00000010;\u000a  bVar17 = (byte)(((uint)right_quote & 2) >> 1);\u000a  uVar14 = (undefined7)((ulong)left_quote_00 >> 8);\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar16 = 0;\u000a  bVar18 = 0;\u000a  uVar15 = 0;\u000a  __n = 0;\u000a  local_58 = (char *)0x0;\u000a  uVar13 = 7;\u000a  bVar6 = 0;\u000a  bVar3 = 0;\u000a  switch((ulong)left_quote & 0xffffffff) {\u000a  case 0:\u000a    uVar15 = 0;\u000a    local_58 = (char *)0x0;\u000a    __n = 0;\u000a    local_38 = 0;\u000a    uVar13 = 0;\u000a    bVar6 = 0;\u000a    goto switchD_00402adc_caseD_7;\u000a  case 2:\u000a    goto switchD_00402adc_caseD_2;\u000a  case 3:\u000a    bVar3 = 1;\u000a  case 1:\u000a    bVar18 = bVar3;\u000a    bVar17 = 1;\u000a  case 4:\u000a    goto switchD_00402adc_caseD_4;\u000a  case 5:\u000a    uVar13 = 5;\u000a    if (bVar17 == 0) {\u000a      if (buffersize != 0) {\u000a        *buffer = '\u005c"';\u000a      }\u000a      local_58 = "\u005c"";\u000a      uVar15 = 1;\u000a      __n = 1;\u000a      local_38 = CONCAT71(uVar14,1);\u000a      bVar6 = 0;\u000a      goto switchD_00402adc_caseD_7;\u000a    }\u000a    break;\u000a  case 6:\u000a    break;\u000a  case 7:\u000a    goto switchD_00402adc_caseD_7;\u000a  default:\u000a    local_80 = gettext_quote("`");\u000a    local_78 = gettext_quote("\u005c'");\u000a  case 10:\u000a    if (((ulong)right_quote & 2) == 0) {\u000a      cVar1 = *local_80;\u000a      uVar15 = 0;\u000a      while (cVar1 != 0) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = cVar1;\u000a        }\u000a        cVar1 = local_80[uVar15 + 1];\u000a        uVar15 = uVar15 + 1;\u000a      }\u000a    }\u000a    else {\u000a      uVar15 = 0;\u000a    }\u000a    left_quote_00 = local_78;\u000a    __n = strlen(local_78);\u000a    local_38 = CONCAT71((int7)((ulong)left_quote_00 >> 8),1);\u000a    local_58 = local_78;\u000a    uVar13 = uVar19;\u000a    bVar6 = bVar17;\u000a    goto switchD_00402adc_caseD_7;\u000a  }\u000a  __n = 1;\u000a  local_38 = CONCAT71(uVar14,1);\u000a  uVar13 = 5;\u000a  local_58 = "\u005c"";\u000a  uVar15 = 0;\u000a  bVar6 = 1;\u000a  goto switchD_00402adc_caseD_7;\u000aswitchD_00402adc_caseD_4:\u000a  bVar6 = 1;\u000a  if (bVar17 != 0) {\u000a    bVar6 = bVar18;\u000a  }\u000a  uVar16 = (ulong)bVar6;\u000aswitchD_00402adc_caseD_2:\u000a  uVar13 = 2;\u000a  if (bVar17 == 0) {\u000a    if (buffersize != 0) {\u000a      *buffer = '\u005c'';\u000a    }\u000a    uVar15 = 1;\u000a  }\u000a  else {\u000a    uVar15 = 0;\u000a  }\u000a  __n = 1;\u000a  local_58 = "\u005c'";\u000a  local_38 = local_38 & 0xffffffffffffff00 | uVar16;\u000a  bVar6 = bVar17;\u000aswitchD_00402adc_caseD_7:\u000a  bVar3 = (byte)local_38;\u000a  bVar2 = uVar13 != 2;\u000a  bVar21 = bVar6 == 0;\u000a  uVar16 = 0;\u000a  bVar5 = false;\u000a  if (argsize != 0xffffffffffffffff) goto LAB_004035a0;\u000aLAB_00402cc0:\u000a  local_a8 = argsize;\u000a  if (arg[uVar16] == 0) {\u000aLAB_004035a9:\u000a    if (((bVar6 == 0) || (uVar13 != 2)) || (uVar15 != 0)) {\u000a      if ((local_58 != (char *)0x0) && (bVar6 == 0)) {\u000a        cVar1 = *local_58;\u000a        while (cVar1 != 0) {\u000a          local_58 = local_58 + 1;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = cVar1;\u000a          }\u000a          uVar15 = uVar15 + 1;\u000a          cVar1 = *local_58;\u000a        }\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = 0;\u000a      }\u000a    }\u000a    else {\u000aLAB_004035b8:\u000a      left_quote_00 = (char *)0x4;\u000a      if ((local_38 & 1) == 0) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      if (uVar13 != 2) {\u000a        left_quote_00 = (char *)(ulong)uVar13;\u000a      }\u000a      uVar15 = quotearg_buffer_restyled\u000a                         (buffer,buffersize,arg,local_a8,left_quote_00,\u000a                          (char *)(ulong)((uint)right_quote & 0xfffffffd));\u000a    }\u000a    return uVar15;\u000a  }\u000aLAB_00402ccb:\u000a  if ((__n != 0 & bVar3 & bVar2) == 0) {\u000aLAB_00402d0f:\u000a    bVar22 = false;\u000a  }\u000a  else {\u000a    if ((1 < __n) && (local_a8 == 0xffffffffffffffff)) {\u000a      local_a8 = strlen(arg);\u000a    }\u000a    if (local_a8 < uVar16 + __n) goto LAB_00402d0f;\u000a    iVar7 = memcmp(arg + uVar16,local_58,__n);\u000a    bVar22 = iVar7 == 0;\u000a    if ((bVar22) && (bVar6 != 0)) goto LAB_004035b8;\u000a  }\u000a  uVar20 = (ulong)(byte)arg[uVar16];\u000a  bVar17 = 0x6e;\u000a  bVar18 = 0x61;\u000a  switch(arg[uVar16]) {\u000a  case 0:\u000a    if (bVar3 == 0) {\u000a      if (((ulong)right_quote & 1) == 0) {\u000a        uVar20 = 0;\u000a        break;\u000a      }\u000a      goto LAB_004034e5;\u000a    }\u000a    if (bVar6 == 0) {\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar11 = uVar15 + 1;\u000a      uVar4 = 1;\u000a      bVar23 = true;\u000a      uVar20 = 0x30;\u000a      if (((uVar13 != 2) && (uVar16 + 1 < local_a8)) && ((byte)(arg[uVar16 + 1] - 0x30U) < 10)) {\u000a        if (uVar11 < buffersize) {\u000a          buffer[uVar11] = '0';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '0';\u000a        }\u000a        uVar11 = uVar15 + 3;\u000a      }\u000a      goto joined_r0x004033f0;\u000a    }\u000a    goto LAB_004035b8;\u000a  default:\u000a    if (local_40 != 1) {\u000a      local_50 = (mbstate_t)0x0;\u000a      if (local_a8 == 0xffffffffffffffff) {\u000a        local_a8 = strlen(arg);\u000a      }\u000a      local_60 = arg + uVar16;\u000a      uVar12 = 1;\u000a      uVar10 = 0;\u000a      do {\u000a        local_48 = uVar10 + uVar16;\u000a        sVar9 = mbrtowc((wchar_t *)&local_64,arg + local_48,local_a8 - local_48,&local_50);\u000a        if (sVar9 == 0) break;\u000a        if (sVar9 == 0xffffffffffffffff) {\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (sVar9 == 0xfffffffffffffffe) {\u000a          if (local_48 < local_a8) goto LAB_0040351a;\u000a          uVar12 = 0;\u000a          break;\u000a        }\u000a        if (1 < sVar9 && (uVar13 == 2 && !bVar21)) {\u000a          uVar11 = 1;\u000a          do {\u000a            if (((int)local_60[uVar11 + uVar10] - 0x5bU < 0x22) &&\u000a               ((0x20000002bU >> ((ulong)((int)local_60[uVar11 + uVar10] - 0x5bU) & 0x1f) & 1) != 0)\u000a               ) goto LAB_004035b8;\u000a            uVar11 = uVar11 + 1;\u000a          } while (uVar11 < sVar9);\u000a        }\u000a        iVar7 = iswprint(local_64);\u000a        if (iVar7 == 0) {\u000a          uVar12 = 0;\u000a        }\u000a        uVar10 = uVar10 + sVar9;\u000a        iVar7 = mbsinit(&local_50);\u000a      } while (iVar7 == 0);\u000a      goto LAB_00403549;\u000a    }\u000a    ppuVar8 = __ctype_b_loc();\u000a    uVar12 = (*ppuVar8)[uVar20] >> 0xe & 0xff01;\u000a    uVar10 = 1;\u000a    goto LAB_00403008;\u000a  case '\u005ca':\u000a    goto joined_r0x00402ef8;\u000a  case '\u005cb':\u000a    bVar18 = 0x62;\u000a    goto joined_r0x00402ef8;\u000a  case '\u005ct':\u000a    bVar17 = 0x74;\u000a  case '\u005cn':\u000a    goto switchD_00402d26_caseD_a;\u000a  case '\u005cv':\u000a    bVar18 = 0x76;\u000a    goto joined_r0x00402ef8;\u000a  case '\u005cf':\u000a    bVar18 = 0x66;\u000a    goto joined_r0x00402ef8;\u000a  case '\u005cr':\u000a    bVar17 = 0x72;\u000aswitchD_00402d26_caseD_a:\u000a    bVar18 = bVar17;\u000a    if (bVar21 || bVar2) {\u000ajoined_r0x00402ef8:\u000a      if (bVar3 == 0) break;\u000a      if (bVar6 == 0) goto LAB_0040345e;\u000a    }\u000a    goto LAB_004035b8;\u000a  case ' ':\u000a  case '!':\u000a  case '\u005c"':\u000a  case '$':\u000a  case '&':\u000a  case '(':\u000a  case ')':\u000a  case '*':\u000a  case ';':\u000a  case '<':\u000a  case '=':\u000a  case '>':\u000a  case '[':\u000a  case '^':\u000a  case '`':\u000a  case '|':\u000a    if (bVar21 || bVar2) break;\u000a    goto LAB_004035b8;\u000a  case '#':\u000a  case '~':\u000a    if (((bVar6 != 0) && (uVar13 == 2)) && (uVar16 == 0)) goto LAB_004035b8;\u000a    break;\u000a  case '%':\u000a  case '+':\u000a  case ',':\u000a  case '-':\u000a  case '.':\u000a  case '/':\u000a  case '0':\u000a  case '1':\u000a  case '2':\u000a  case '3':\u000a  case '4':\u000a  case '5':\u000a  case '6':\u000a  case '7':\u000a  case '8':\u000a  case '9':\u000a  case ':':\u000a  case 'A':\u000a  case 'B':\u000a  case 'C':\u000a  case 'D':\u000a  case 'E':\u000a  case 'F':\u000a  case 'G':\u000a  case 'H':\u000a  case 'I':\u000a  case 'J':\u000a  case 'K':\u000a  case 'L':\u000a  case 'M':\u000a  case 'N':\u000a  case 'O':\u000a  case 'P':\u000a  case 'Q':\u000a  case 'R':\u000a  case 'S':\u000a  case 'T':\u000a  case 'U':\u000a  case 'V':\u000a  case 'W':\u000a  case 'X':\u000a  case 'Y':\u000a  case 'Z':\u000a  case ']':\u000a  case '_':\u000a  case 'a':\u000a  case 'b':\u000a  case 'c':\u000a  case 'd':\u000a  case 'e':\u000a  case 'f':\u000a  case 'g':\u000a  case 'h':\u000a  case 'i':\u000a  case 'j':\u000a  case 'k':\u000a  case 'l':\u000a  case 'm':\u000a  case 'n':\u000a  case 'o':\u000a  case 'p':\u000a  case 'q':\u000a  case 'r':\u000a  case 's':\u000a  case 't':\u000a  case 'u':\u000a  case 'v':\u000a  case 'w':\u000a  case 'x':\u000a  case 'y':\u000a  case 'z':\u000a    break;\u000a  case '\u005c'':\u000a    uVar20 = 0x27;\u000a    if (uVar13 == 2) {\u000a      if (bVar6 != 0) goto LAB_004035b8;\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c\u005c';\u000a      }\u000a      if (uVar15 + 2 < buffersize) {\u000a        buffer[uVar15 + 2] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 3;\u000a      bVar5 = false;\u000a    }\u000a    break;\u000a  case '?':\u000a    uVar20 = 0x3f;\u000a    if (uVar13 == 5) {\u000a      if ((((ulong)right_quote & 4) != 0) &&\u000a         ((uVar11 = uVar16 + 2, uVar11 < local_a8 && (arg[uVar16 + 1] == '?')))) {\u000a        bVar18 = arg[uVar11];\u000a        if (((uint)(int)(char)bVar18 < 0x3f) &&\u000a           ((0x7000a38200000000U >> ((ulong)(uint)(int)(char)bVar18 & 0x1f) & 1) != 0)) {\u000a          if (bVar6 != 0) goto LAB_004035b8;\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '?';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c"';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c"';\u000a          }\u000a          if (uVar15 + 3 < buffersize) {\u000a            buffer[uVar15 + 3] = '?';\u000a          }\u000a          uVar15 = uVar15 + 4;\u000a          uVar20 = (ulong)bVar18;\u000a          uVar16 = uVar11;\u000a        }\u000a      }\u000a    }\u000a    else {\u000a      if ((uVar13 == 2) && (bVar6 != 0)) goto LAB_004035b8;\u000a    }\u000a    break;\u000a  case '\u005c\u005c':\u000a    if (uVar13 != 2) {\u000a      bVar17 = 0x5c;\u000a      if ((bVar3 & bVar6) == 0 || __n == 0) goto switchD_00402d26_caseD_a;\u000a      bVar23 = false;\u000a      bVar18 = 0x5c;\u000a      bVar17 = 0x5c;\u000a      if (bVar5) goto LAB_004034b6;\u000a      goto joined_r0x004034a8;\u000a    }\u000a    if (bVar6 == 0) {\u000a      bVar18 = 0x5c;\u000a      bVar23 = false;\u000a      uVar11 = uVar16;\u000ajoined_r0x00402fb1:\u000a      uVar16 = uVar11;\u000a      bVar17 = bVar18;\u000a      if (!bVar5) goto joined_r0x004034a8;\u000a      goto LAB_004034b6;\u000a    }\u000a    goto LAB_004035b8;\u000a  case '{':\u000a  case '}':\u000a    if (local_a8 == 0xffffffffffffffff) {\u000a      bVar23 = arg[1] != 0;\u000a      local_a8 = 0xffffffffffffffff;\u000a    }\u000a    else {\u000a      bVar23 = local_a8 != 1;\u000a    }\u000a    if ((bVar6 != 0) && (!(bool)(uVar16 != 0 | bVar23 | bVar2))) goto LAB_004035b8;\u000a  }\u000a  goto joined_r0x004033f0;\u000a  while (uVar11 = uVar16 + 1 + uVar10, uVar10 = uVar10 + 1, uVar11 < local_a8) {\u000aLAB_0040351a:\u000a    if (local_60[uVar10] == 0) {\u000a      uVar12 = 0;\u000a      goto LAB_00403549;\u000a    }\u000a  }\u000a  uVar12 = 0;\u000aLAB_00403549:\u000a  if (1 < uVar10) {\u000aLAB_00403026:\u000a    uVar10 = uVar10 + uVar16;\u000a    bVar23 = false;\u000a    if (uVar12 == 0 && bVar3 != 0) goto LAB_004030e2;\u000a    do {\u000a      uVar11 = uVar16;\u000a      if (bVar22) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        bVar22 = false;\u000a        uVar11 = uVar16;\u000a      }\u000a      while( true ) {\u000a        bVar18 = (byte)uVar20;\u000a        uVar16 = uVar11 + 1;\u000a        if (uVar10 <= uVar16) goto joined_r0x00402fb1;\u000a        if ((bVar5) && (!bVar23)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 2;\u000a          bVar5 = false;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = bVar18;\u000a        }\u000a        uVar15 = uVar15 + 1;\u000a        uVar20 = (ulong)(byte)arg[uVar11 + 1];\u000a        if (uVar12 != 0 || bVar3 == 0) break;\u000aLAB_004030e2:\u000a        if (bVar6 != 0) goto LAB_004035b8;\u000a        if ((uVar13 == 2) && (!bVar5)) {\u000a          if (uVar15 < buffersize) {\u000a            buffer[uVar15] = '\u005c'';\u000a          }\u000a          if (uVar15 + 1 < buffersize) {\u000a            buffer[uVar15 + 1] = '$';\u000a          }\u000a          if (uVar15 + 2 < buffersize) {\u000a            buffer[uVar15 + 2] = '\u005c'';\u000a          }\u000a          uVar15 = uVar15 + 3;\u000a          bVar5 = true;\u000a        }\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c\u005c';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = (byte)(uVar20 >> 6) | 0x30;\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = (byte)(uVar20 >> 3) & 7 | 0x30;\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        uVar20 = (ulong)((byte)uVar20 & 7 | 0x30);\u000a        bVar23 = true;\u000a        uVar11 = uVar16;\u000a      }\u000a    } while( true );\u000a  }\u000aLAB_00403008:\u000a  if ((bVar3 != 0) && (uVar12 == 0)) goto LAB_00403026;\u000ajoined_r0x004033f0:\u000a  uVar4 = 0;\u000a  bVar23 = false;\u000a  uVar11 = uVar15;\u000ajoined_r0x004033f0:\u000a  uVar15 = uVar11;\u000a  bVar18 = (byte)uVar20;\u000a  if ((bVar3 & bVar2) == 0) {\u000a    bVar23 = (bool)uVar4;\u000a    if (in_stack_00000008 != 0 && !bVar21) goto LAB_00403417;\u000aLAB_00403450:\u000a    if (bVar22) goto LAB_00403455;\u000a  }\u000a  else {\u000a    if (in_stack_00000008 == 0) goto LAB_00403450;\u000aLAB_00403417:\u000a    if ((bVar22) || ((1 << (bVar18 & 0x1f) & *(uint *)(in_stack_00000008 + (uVar20 >> 5) * 4)) != 0)\u000a       ) {\u000aLAB_00403455:\u000a      if (bVar6 != 0) goto LAB_004035b8;\u000aLAB_0040345e:\u000a      if ((uVar13 == 2) && (!bVar5)) {\u000a        if (uVar15 < buffersize) {\u000a          buffer[uVar15] = '\u005c'';\u000a        }\u000a        if (uVar15 + 1 < buffersize) {\u000a          buffer[uVar15 + 1] = '$';\u000a        }\u000a        if (uVar15 + 2 < buffersize) {\u000a          buffer[uVar15 + 2] = '\u005c'';\u000a        }\u000a        uVar15 = uVar15 + 3;\u000a        bVar5 = true;\u000a      }\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c\u005c';\u000a      }\u000a      uVar15 = uVar15 + 1;\u000a      bVar17 = bVar18;\u000a      goto joined_r0x004034a8;\u000a    }\u000a  }\u000a  bVar17 = bVar18;\u000a  if (bVar5) {\u000aLAB_004034b6:\u000a    bVar17 = bVar18;\u000a    if (!bVar23) {\u000a      if (uVar15 < buffersize) {\u000a        buffer[uVar15] = '\u005c'';\u000a      }\u000a      if (uVar15 + 1 < buffersize) {\u000a        buffer[uVar15 + 1] = '\u005c'';\u000a      }\u000a      uVar15 = uVar15 + 2;\u000a      bVar5 = false;\u000a      bVar17 = bVar18;\u000a    }\u000a  }\u000ajoined_r0x004034a8:\u000a  if (uVar15 < buffersize) {\u000a    buffer[uVar15] = bVar17;\u000a  }\u000a  uVar15 = uVar15 + 1;\u000aLAB_004034e5:\u000a  uVar16 = uVar16 + 1;\u000a  argsize = local_a8;\u000a  if (local_a8 == 0xffffffffffffffff) goto LAB_00402cc0;\u000aLAB_004035a0:\u000a  local_a8 = argsize;\u000a  if (uVar16 == argsize) goto LAB_004035a9;\u000a  goto LAB_00402ccb;\u000a}\u000a\u000a
p136
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0xa8\nMOV EBX,R9D\nMOV R15D,R8D\nMOV R13,RCX\nMOV qword ptr [RSP + 0x18],RDX\nMOV qword ptr [RSP + 0x28],RSI\nMOV qword ptr [RSP + 0x38],RDI\nCALL 0x00401550\nMOV qword ptr [0x98 + RSP],RAX\nCMP R15D,0xa\nJA 0x00403685\nMOV RAX,qword ptr [0xf0 + RSP]\nMOV qword ptr [RSP + 0x60],RAX\nMOV RAX,qword ptr [0xe8 + RSP]\nMOV qword ptr [RSP + 0x58],RAX\nMOV dword ptr [RSP + 0x54],EBX\nMOV EBP,EBX\nAND EBP,0x2\nMOV R14D,EBP\nSHR R14D,1\nMOV EBX,0x7\nMOV DIL,0x1\nXOR R8D,R8D\nMOV EAX,R15D\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV RSI,qword ptr [RSP + 0x28]\nJMP qword ptr [0x4062f0 + RAX*0x8]\nMOV EDI,0x406816\nMOV ESI,R15D\nCALL 0x00403d30\nMOV qword ptr [RSP + 0x58],RAX\nMOV EDI,0x406818\nMOV ESI,R15D\nCALL 0x00403d30\nMOV RSI,qword ptr [RSP + 0x28]\nMOV qword ptr [RSP + 0x60],RAX\nTEST EBP,EBP\nJNZ 0x00402b3d\nMOV RDX,qword ptr [RSP + 0x58]\nMOV AL,byte ptr [RDX]\nXOR R12D,R12D\nTEST AL,AL\nJZ 0x00402b40\nNOP\nCMP R12,RSI\nJNC 0x00402b2e\nMOV RCX,qword ptr [RSP + 0x38]\nMOV byte ptr [RCX + R12*0x1],AL\nMOVZX EAX,byte ptr [RDX + R12*0x1 + 0x1]\nINC R12\nTEST AL,AL\nJNZ 0x00402b20\nJMP 0x00402b40\nXOR R12D,R12D\nMOV RBX,qword ptr [RSP + 0x60]\nMOV RDI,RBX\nCALL 0x00401560\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R9,RAX\nMOV RCX,RBX\nMOV EBX,R15D\nMOV R8B,R14B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,R13\nMOV DIL,0x1\nJMP 0x00402c0c\nXOR R12D,R12D\nXOR ECX,ECX\nXOR R9D,R9D\nXOR EDI,EDI\nXOR EBX,EBX\nXOR R8D,R8D\nJMP 0x00402c0c\nMOV ECX,0x406814\nMOV EBX,0x5\nMOV DIL,0x1\nMOV R9D,0x1\nJMP 0x00402c06\nMOV R8B,0x1\nMOV R14B,0x1\nTEST R14B,R14B\nMOV AL,0x1\nJZ 0x00402ba7\nMOV EAX,R8D\nMOV R8B,AL\nMOV EBX,0x2\nTEST R14B,R14B\nJNZ 0x00402bd4\nTEST RSI,RSI\nJZ 0x00402bc1\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x27\nMOV ECX,0x406818\nMOV R12D,0x1\nMOV R9D,0x1\nJMP 0x00402be2\nMOV ECX,0x406818\nMOV R9D,0x1\nXOR R12D,R12D\nMOV DIL,R8B\nMOV R8B,R14B\nJMP 0x00402c0c\nMOV EBX,0x5\nTEST R14B,R14B\nJZ 0x0040365c\nMOV ECX,0x406814\nMOV R9D,0x1\nMOV DIL,0x1\nXOR R12D,R12D\nMOV R8B,0x1\nMOV qword ptr [0x80 + RSP],RCX\nMOV EAX,EDI\nAND AL,0x1\nCMP EBX,0x2\nSETNZ R14B\nMOV EBP,EBX\nSETZ BL\nMOV byte ptr [RSP + 0x1],AL\nMOV ECX,EAX\nAND CL,R14B\nTEST R9,R9\nSETNZ AL\nMOV EDX,EAX\nMOV byte ptr [RSP + 0xe],CL\nAND DL,CL\nMOV byte ptr [RSP + 0xf],DL\nTEST R8B,R8B\nSETNZ CL\nSETZ DL\nAND BL,CL\nMOV byte ptr [RSP + 0xc],BL\nCMP qword ptr [0xe0 + RSP],0x0\nSETNZ BL\nAND BL,CL\nMOV byte ptr [RSP + 0xd],BL\nMOV EBX,EBP\nMOV EBP,dword ptr [RSP + 0x54]\nMOV ECX,EBP\nAND ECX,0x1\nMOV dword ptr [RSP + 0x70],ECX\nMOV ECX,EBP\nAND ECX,0x4\nMOV dword ptr [RSP + 0x6c],ECX\nMOV byte ptr [RSP + 0x2],R14B\nOR DL,R14B\nMOV byte ptr [RSP + 0x3],DL\nMOV qword ptr [0xa0 + RSP],RDI\nTEST DIL,R8B\nSETNZ CL\nAND CL,AL\nMOV byte ptr [RSP + 0xb],CL\nXOR R13D,R13D\nXOR EDI,EDI\nMOV R14,qword ptr [RSP + 0x38]\nMOV dword ptr [RSP + 0x14],EBX\nMOV qword ptr [RSP + 0x48],R8\nMOV qword ptr [RSP + 0x40],R9\nCMP R11,-0x1\nJNZ 0x004035a0\nNOP word ptr [RAX + RAX*0x1]\nCMP byte ptr [R10 + R13*0x1],0x0\nJZ 0x004035a9\nCMP byte ptr [RSP + 0xf],0x0\nJZ 0x00402d0f\nLEA RBP,[R13 + R9*0x1]\nCMP R9,0x2\nJC 0x00402d0a\nCMP R11,-0x1\nJNZ 0x00402d0a\nMOV EBX,EDI\nMOV RDI,R10\nCALL 0x00401560\nMOV EDI,EBX\nMOV R9,qword ptr [RSP + 0x40]\nMOV R8,qword ptr [RSP + 0x48]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nCMP RBP,R11\nJBE 0x00402d60\nXOR EBP,EBP\nMOVZX R15D,byte ptr [R10 + R13*0x1]\nCMP R15,0x7e\nJA 0x00402fbc\nXOR EAX,EAX\nMOV DL,0x6e\nMOV CL,0x61\nJMP qword ptr [0x406348 + R15*0x8]\nCMP byte ptr [RSP + 0x3],0x0\nJZ 0x004035b8\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJZ 0x00403410\nCMP qword ptr [0xe0 + RSP],0x0\nJNZ 0x00403417\nJMP 0x00403450\nMOV EBP,EDI\nMOV RBX,R11\nLEA RDI,[R10 + R13*0x1]\nMOV RSI,qword ptr [0x80 + RSP]\nMOV RDX,R9\nCALL 0x00401630\nTEST EAX,EAX\nSETZ AL\nJNZ 0x00402dad\nMOV R8,qword ptr [RSP + 0x48]\nTEST R8B,R8B\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJZ 0x00402d11\nJMP 0x004035b8\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RBX\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,EBP\nMOV EBP,EAX\nJMP 0x00402d11\nXOR EAX,EAX\nTEST R8B,R8B\nJZ 0x00402d3b\nCMP EBX,0x2\nJNZ 0x00402d3b\nTEST R13,R13\nJNZ 0x00402d3b\nJMP 0x004035b8\nCMP R11,-0x1\nJZ 0x00403193\nTEST R13,R13\nSETNZ CL\nCMP R11,0x1\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nJNZ 0x004031b3\nJMP 0x00402d3b\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004031c4\nTEST R8B,R8B\nJNZ 0x004035b8\nCMP EBX,0x2\nJNZ 0x00402e68\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00402e68\nCMP R12,RSI\nJNC 0x00402e43\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402e52\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402e61\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x00402e72\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RCX,[R12 + 0x1]\nMOV AL,0x1\nMOV R15B,0x30\nCMP EBX,0x2\nJZ 0x00403338\nLEA RDX,[R13 + 0x1]\nCMP RDX,R11\nJNC 0x00403338\nMOV DL,byte ptr [R10 + RDX*0x1]\nADD DL,0xd0\nCMP DL,0x9\nJA 0x00403338\nCMP RCX,RSI\nJNC 0x00402eac\nMOV byte ptr [R14 + RCX*0x1],0x30\nLEA RCX,[R12 + 0x2]\nCMP RCX,RSI\nJNC 0x00402ebb\nMOV byte ptr [R14 + RCX*0x1],0x30\nADD R12,0x3\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402d46\nJMP 0x00403410\nMOV CL,0x62\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402d39\nJMP 0x00402f1a\nMOV DL,0x74\nJMP 0x00402f02\nMOV CL,0x76\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402d39\nJMP 0x00402f1a\nMOV CL,0x66\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402d39\nJMP 0x00402f1a\nMOV DL,0x72\nCMP byte ptr [RSP + 0x3],0x0\nMOV ECX,EDX\nJZ 0x004035b8\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x00402d39\nMOV R15B,CL\nTEST R8B,R8B\nJZ 0x0040345e\nJMP 0x004035b8\nMOV R15B,0x27\nCMP EBX,0x2\nJNZ 0x00402d39\nTEST R8B,R8B\nJNZ 0x004035b8\nCMP R12,RSI\nJNC 0x00402f4a\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00402f59\nMOV byte ptr [R14 + RAX*0x1],0x5c\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00402f68\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nXOR EDI,EDI\nJMP 0x00402d39\nMOV R15B,0x3f\nCMP EBX,0x5\nJZ 0x0040334b\nCMP EBX,0x2\nJNZ 0x00402d39\nTEST R8B,R8B\nJZ 0x00402d39\nJMP 0x004035b8\nCMP EBX,0x2\nJNZ 0x004031e4\nTEST R8B,R8B\nJNZ 0x004035b8\nMOV R15B,0x5c\nXOR EAX,EAX\nTEST DIL,0x1\nJNZ 0x004034b6\nJMP 0x004034d9\nMOV dword ptr [RSP + 0x4],EDI\nCMP qword ptr [0x98 + RSP],0x1\nJNZ 0x00403205\nMOV qword ptr [RSP + 0x30],R11\nCALL 0x00401850\nMOV R10,qword ptr [RSP + 0x18]\nMOV RAX,qword ptr [RAX]\nMOVZX EDX,word ptr [RAX + R15*0x2]\nSHR EDX,0xe\nAND DL,0x1\nMOV ECX,0x1\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x1],0x0\nJZ 0x004033f8\nMOV R11,RCX\nMOV ECX,EDX\nAND CL,0x1\nMOV RCX,R11\nJNZ 0x004033f8\nCMP byte ptr [RSP + 0x1],0x0\nSETNZ AL\nADD RCX,R13\nTEST DL,0x1\nSETZ DL\nAND DL,AL\nMOV byte ptr [RSP + 0x20],DL\nXOR EAX,EAX\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0x20],0x0\nJNZ 0x004030e2\nJMP 0x004030b0\nTEST byte ptr [RSP + 0x4],0x1\nJZ 0x00403099\nMOV RDI,RCX\nMOV ECX,EAX\nAND CL,0x1\nJNZ 0x00403096\nCMP R12,RSI\nJNC 0x0040307b\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RCX,[R12 + 0x1]\nCMP RCX,RSI\nJNC 0x0040308a\nMOV byte ptr [R14 + RCX*0x1],0x27\nADD R12,0x2\nMOV dword ptr [RSP + 0x4],0x0\nMOV RCX,RDI\nCMP R12,RSI\nJNC 0x004030d0\nMOV byte ptr [R14 + R12*0x1],R15B\nJMP 0x004030d0\nTEST BPL,0x1\nJZ 0x00403173\nCMP R12,RSI\nJNC 0x004030c4\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nXOR EBP,EBP\nJMP 0x00403173\nINC R12\nMOV R15B,byte ptr [R10 + R13*0x1 + 0x1]\nMOV R13,RDX\nCMP byte ptr [RSP + 0x20],0x0\nJZ 0x004030b0\nTEST R8B,R8B\nJNZ 0x004035b8\nCMP EBX,0x2\nJNZ 0x0040312a\nMOV EAX,dword ptr [RSP + 0x4]\nAND AL,0x1\nJNZ 0x0040312a\nCMP R12,RSI\nJNC 0x00403102\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403111\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403120\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV AL,0x1\nMOV dword ptr [RSP + 0x4],EAX\nCMP R12,RSI\nJNC 0x00403134\nMOV byte ptr [R14 + R12*0x1],0x5c\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x0040314b\nMOV EDX,R15D\nSHR DL,0x6\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403165\nMOV EDX,R15D\nSHR DL,0x3\nAND DL,0x7\nOR DL,0x30\nMOV byte ptr [R14 + RAX*0x1],DL\nADD R12,0x3\nAND R15B,0x7\nOR R15B,0x30\nMOV AL,0x1\nLEA RDX,[R13 + 0x1]\nCMP RCX,RDX\nJA 0x00403060\nMOV EDI,dword ptr [RSP + 0x4]\nTEST DIL,0x1\nJNZ 0x004034b6\nJMP 0x004034d9\nTEST R13,R13\nSETNZ CL\nCMP byte ptr [R10 + 0x1],0x0\nSETNZ DL\nXOR EAX,EAX\nTEST R8B,R8B\nMOV R11,-0x1\nJZ 0x00402d3b\nOR CL,DL\nOR CL,byte ptr [RSP + 0x2]\nJNZ 0x00402d3b\nJMP 0x004035b8\nCMP dword ptr [RSP + 0x70],0x0\nJNZ 0x004034e5\nXOR R15D,R15D\nXOR EAX,EAX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402d46\nJMP 0x00403410\nMOV DL,0x5c\nCMP byte ptr [RSP + 0xb],0x0\nJZ 0x00402f02\nXOR EAX,EAX\nMOV R15B,0x5c\nTEST DIL,0x1\nJNZ 0x004034b6\nJMP 0x004034d9\nMOV qword ptr [0x88 + RSP],0x0\nCMP R11,-0x1\nJNZ 0x00403227\nMOV RDI,R10\nCALL 0x00401560\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,RAX\nLEA RAX,[R10 + R13*0x1]\nMOV qword ptr [RSP + 0x78],RAX\nMOV AL,0x1\nMOV dword ptr [RSP + 0x10],EAX\nXOR ECX,ECX\nLEA RBX,[0x88 + RSP]\nMOV qword ptr [RSP + 0x30],R11\nMOV qword ptr [RSP + 0x20],RCX\nLEA RAX,[RCX + R13*0x1]\nLEA RSI,[R10 + RAX*0x1]\nMOV qword ptr [0x90 + RSP],RAX\nSUB R11,RAX\nLEA RDI,[RSP + 0x74]\nMOV RDX,R11\nMOV RCX,RBX\nCALL 0x00401590\nMOV R14,RAX\nTEST R14,R14\nJZ 0x004034ff\nCMP R14,-0x1\nMOV RDI,0x20000002b\nJZ 0x004034f7\nCMP R14,-0x2\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403506\nCMP R14,0x1\nSETA AL\nAND AL,byte ptr [RSP + 0xc]\nCMP AL,0x1\nMOV R10,qword ptr [RSP + 0x18]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nJNZ 0x004032ee\nMOV RAX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x78]\nLEA RAX,[RCX + RAX*0x1]\nMOV ECX,0x1\nNOP dword ptr [RAX]\nMOVSX EDX,byte ptr [RAX + RCX*0x1]\nADD EDX,-0x5b\nCMP EDX,0x21\nJA 0x004032e6\nBT RDI,RDX\nJC 0x00403652\nINC RCX\nCMP RCX,R14\nJC 0x004032d0\nMOV EDI,dword ptr [RSP + 0x74]\nCALL 0x00401840\nTEST EAX,EAX\nJNZ 0x00403303\nMOV dword ptr [RSP + 0x10],0x0\nMOV RAX,qword ptr [RSP + 0x20]\nADD RAX,R14\nLEA RBX,[0x88 + RSP]\nMOV RDI,RBX\nMOV R14,RAX\nCALL 0x00401830\nMOV RCX,R14\nTEST EAX,EAX\nMOV R10,qword ptr [RSP + 0x18]\nMOV R11,qword ptr [RSP + 0x30]\nJZ 0x00403245\nJMP 0x00403549\nMOV R12,RCX\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402d46\nJMP 0x00403410\nCMP dword ptr [RSP + 0x6c],0x0\nJZ 0x00402d39\nLEA RCX,[R13 + 0x2]\nCMP RCX,R11\nJNC 0x00402d39\nCMP byte ptr [R10 + R13*0x1 + 0x1],0x3f\nJNZ 0x00402d39\nMOVSX EDX,byte ptr [R10 + RCX*0x1]\nXOR EAX,EAX\nCMP EDX,0x3e\nJA 0x00402d3b\nMOV dword ptr [RSP + 0x4],EBP\nMOV EBP,EDI\nMOV RDI,0x7000a38200000000\nBT RDI,RDX\nJNC 0x00403582\nTEST R8B,R8B\nMOV EDI,EBP\nJNZ 0x004035b8\nCMP R12,RSI\nJNC 0x004033ae\nMOV byte ptr [R14 + R12*0x1],0x3f\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nMOV EBP,dword ptr [RSP + 0x4]\nJNC 0x004033c1\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x004033d0\nMOV byte ptr [R14 + RAX*0x1],0x22\nLEA RAX,[R12 + 0x3]\nCMP RAX,RSI\nJNC 0x004033df\nMOV byte ptr [R14 + RAX*0x1],0x3f\nADD R12,0x4\nXOR EAX,EAX\nMOV R13,RCX\nMOV R15B,DL\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402d46\nJMP 0x00403410\nMOV R11,qword ptr [RSP + 0x30]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402d46\nNOP dword ptr [RAX + RAX*0x1]\nCMP byte ptr [RSP + 0xd],0x0\nJZ 0x00403450\nMOV EDX,0x1\nMOV ECX,R15D\nSHL EDX,CL\nTEST BPL,BPL\nJNZ 0x00403455\nMOV ECX,R15D\nSHR CL,0x5\nMOVZX ECX,CL\nMOV EBP,EDI\nMOV RDI,qword ptr [0xe0 + RSP]\nAND EDX,dword ptr [RDI + RCX*0x4]\nMOV EDI,EBP\nJZ 0x004034b0\nJMP 0x00403455\nTEST BPL,BPL\nJZ 0x004034b0\nTEST R8B,R8B\nJNZ 0x004035b8\nCMP EBX,0x2\nJNZ 0x00403498\nMOV EAX,EDI\nAND AL,0x1\nJNZ 0x00403498\nCMP R12,RSI\nJNC 0x00403473\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x00403482\nMOV byte ptr [R14 + RAX*0x1],0x24\nLEA RAX,[R12 + 0x2]\nCMP RAX,RSI\nJNC 0x00403491\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x3\nMOV DIL,0x1\nCMP R12,RSI\nJNC 0x004034a2\nMOV byte ptr [R14 + R12*0x1],0x5c\nINC R12\nCMP R12,RSI\nJNC 0x004034e2\nJMP 0x004034de\nTEST DIL,0x1\nJZ 0x004034d9\nAND AL,0x1\nJNZ 0x004034d9\nCMP R12,RSI\nJNC 0x004034c4\nMOV byte ptr [R14 + R12*0x1],0x27\nLEA RAX,[R12 + 0x1]\nCMP RAX,RSI\nJNC 0x004034d3\nMOV byte ptr [R14 + RAX*0x1],0x27\nADD R12,0x2\nXOR EDI,EDI\nCMP R12,RSI\nJNC 0x004034e2\nMOV byte ptr [R14 + R12*0x1],R15B\nINC R12\nINC R13\nCMP R11,-0x1\nJNZ 0x004035a0\nJMP 0x00402cc0\nMOV dword ptr [RSP + 0x10],0x0\nMOV R10,qword ptr [RSP + 0x18]\nJMP 0x00403544\nCMP qword ptr [0x90 + RSP],R11\nMOV R10,qword ptr [RSP + 0x18]\nJNC 0x0040353c\nMOV RCX,qword ptr [RSP + 0x20]\nMOV RAX,qword ptr [RSP + 0x78]\nCMP byte ptr [RAX + RCX*0x1],0x0\nJZ 0x00403578\nLEA RAX,[R13 + RCX*0x1 + 0x1]\nINC RCX\nCMP RAX,R11\nJC 0x0040351a\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403549\nMOV dword ptr [RSP + 0x10],0x0\nMOV RCX,qword ptr [RSP + 0x20]\nCMP RCX,0x1\nMOV R14,qword ptr [RSP + 0x38]\nMOV RSI,qword ptr [RSP + 0x28]\nMOV EBX,dword ptr [RSP + 0x14]\nMOV R8,qword ptr [RSP + 0x48]\nMOV R9,qword ptr [RSP + 0x40]\nMOV EDI,dword ptr [RSP + 0x4]\nMOV EDX,dword ptr [RSP + 0x10]\nJBE 0x00403008\nJMP 0x00403026\nMOV dword ptr [RSP + 0x10],0x0\nJMP 0x00403549\nMOV EDI,EBP\nMOV EBP,dword ptr [RSP + 0x4]\nCMP byte ptr [RSP + 0xe],0x0\nJNZ 0x00402d46\nJMP 0x00403410\nCMP R13,R11\nJNZ 0x00402ccb\nTEST R8B,R8B\nJZ 0x00403612\nCMP EBX,0x2\nJNZ 0x00403612\nTEST R12,R12\nJNZ 0x00403612\nTEST byte ptr [0xa0 + RSP],0x1\nMOV R8D,0x4\nCMOVZ R8D,EBX\nCMP EBX,0x2\nCMOVNZ R8D,EBX\nMOV R9D,dword ptr [RSP + 0x54]\nAND R9D,0xfffffffd\nSUB RSP,0x8\nMOV RDI,R14\nMOV RDX,R10\nMOV RCX,R11\nPUSH qword ptr [RSP + 0x68]\nPUSH qword ptr [RSP + 0x68]\nPUSH 0x0\nCALL 0x00402a50\nADD RSP,0x20\nMOV R12,RAX\nMOV RAX,R12\nADD RSP,0xa8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV RCX,qword ptr [0x80 + RSP]\nTEST RCX,RCX\nJZ 0x00403646\nTEST R8B,R8B\nJNZ 0x00403646\nMOV AL,byte ptr [RCX]\nTEST AL,AL\nJZ 0x00403646\nINC RCX\nNOP dword ptr [RAX]\nCMP R12,RSI\nJNC 0x00403639\nMOV byte ptr [R14 + R12*0x1],AL\nINC R12\nMOVZX EAX,byte ptr [RCX]\nINC RCX\nTEST AL,AL\nJNZ 0x00403630\nCMP R12,RSI\nJNC 0x004035fd\nMOV byte ptr [R14 + R12*0x1],0x0\nJMP 0x004035fd\nMOV R14,qword ptr [RSP + 0x38]\nJMP 0x004035b8\nTEST RSI,RSI\nJZ 0x00403669\nMOV RAX,qword ptr [RSP + 0x38]\nMOV byte ptr [RAX],0x22\nMOV ECX,0x406814\nXOR R8D,R8D\nMOV R12D,0x1\nMOV R9D,0x1\nMOV DIL,0x1\nJMP 0x00402c0c\nCALL 0x00401490\n'
p137
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec a8 00 00 00\n44 89 cb\n45 89 c7\n49 89 cd\n48 89 54 24 18\n48 89 74 24 28\n48 89 7c 24 38\ne8 d2 ea ff ff\n48 89 84 24 98 00 00 00\n41 83 ff 0a\n0f 87 f5 0b 00 00\n48 8b 84 24 f0 00 00 00\n48 89 44 24 60\n48 8b 84 24 e8 00 00 00\n48 89 44 24 58\n89 5c 24 54\n89 dd\n83 e5 02\n41 89 ee\n41 d1 ee\nbb 07 00 00 00\n40 b7 01\n45 31 c0\n44 89 f8\n45 31 e4\n31 c9\n45 31 c9\n4c 8b 54 24 18\n4d 89 eb\n48 8b 74 24 28\nff 24 c5 f0 62 40 00\nbf 16 68 40 00\n44 89 fe\ne8 40 12 00 00\n48 89 44 24 58\nbf 18 68 40 00\n44 89 fe\ne8 2e 12 00 00\n48 8b 74 24 28\n48 89 44 24 60\n85 ed\n75 2d\n48 8b 54 24 58\n8a 02\n45 31 e4\n84 c0\n74 22\n66 90\n49 39 f4\n73 09\n48 8b 4c 24 38\n42 88 04 21\n42 0f b6 44 22 01\n49 ff c4\n84 c0\n75 e5\neb 03\n45 31 e4\n48 8b 5c 24 60\n48 89 df\ne8 13 ea ff ff\n48 8b 74 24 28\n49 89 c1\n48 89 d9\n44 89 fb\n45 88 f0\n4c 8b 54 24 18\n4d 89 eb\n40 b7 01\ne9 9e 00 00 00\n45 31 e4\n31 c9\n45 31 c9\n31 ff\n31 db\n45 31 c0\ne9 8a 00 00 00\nb9 14 68 40 00\nbb 05 00 00 00\n40 b7 01\n41 b9 01 00 00 00\neb 6f\n41 b0 01\n41 b6 01\n45 84 f6\nb0 01\n74 03\n44 89 c0\n41 88 c0\nbb 02 00 00 00\n45 84 f6\n75 20\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 27\nb9 18 68 40 00\n41 bc 01 00 00 00\n41 b9 01 00 00 00\neb 0e\nb9 18 68 40 00\n41 b9 01 00 00 00\n45 31 e4\n44 88 c7\n45 88 f0\neb 22\nbb 05 00 00 00\n45 84 f6\n0f 84 64 0a 00 00\nb9 14 68 40 00\n41 b9 01 00 00 00\n40 b7 01\n45 31 e4\n41 b0 01\n48 89 8c 24 80 00 00 00\n89 f8\n24 01\n83 fb 02\n41 0f 95 c6\n89 dd\n0f 94 c3\n88 44 24 01\n89 c1\n44 20 f1\n4d 85 c9\n0f 95 c0\n89 c2\n88 4c 24 0e\n20 ca\n88 54 24 0f\n45 84 c0\n0f 95 c1\n0f 94 c2\n20 cb\n88 5c 24 0c\n48 83 bc 24 e0 00 00 00 00\n0f 95 c3\n20 cb\n88 5c 24 0d\n89 eb\n8b 6c 24 54\n89 e9\n83 e1 01\n89 4c 24 70\n89 e9\n83 e1 04\n89 4c 24 6c\n44 88 74 24 02\n44 08 f2\n88 54 24 03\n48 89 bc 24 a0 00 00 00\n44 84 c7\n0f 95 c1\n20 c1\n88 4c 24 0b\n45 31 ed\n31 ff\n4c 8b 74 24 38\n89 5c 24 14\n4c 89 44 24 48\n4c 89 4c 24 40\n49 83 fb ff\n0f 85 e6 08 00 00\n66 0f 1f 44 00 00\n43 80 3c 2a 00\n0f 84 de 08 00 00\n80 7c 24 0f 00\n74 3d\n4b 8d 6c 0d 00\n49 83 f9 02\n72 2d\n49 83 fb ff\n75 27\n89 fb\n4c 89 d7\ne8 73 e8 ff ff\n89 df\n4c 8b 4c 24 40\n4c 8b 44 24 48\n8b 5c 24 14\n48 8b 74 24 28\n4c 8b 54 24 18\n49 89 c3\n4c 39 dd\n76 51\n31 ed\n47 0f b6 3c 2a\n49 83 ff 7e\n0f 87 9c 02 00 00\n31 c0\nb2 6e\nb1 61\n42 ff 24 fd 48 63 40 00\n80 7c 24 03 00\n0f 84 7f 08 00 00\n31 c0\n80 7c 24 0e 00\n0f 84 ca 06 00 00\n48 83 bc 24 e0 00 00 00 00\n0f 85 c2 06 00 00\ne9 f6 06 00 00\n89 fd\n4c 89 db\n4b 8d 3c 2a\n48 8b b4 24 80 00 00 00\n4c 89 ca\ne8 b7 e8 ff ff\n85 c0\n0f 94 c0\n75 2d\n4c 8b 44 24 48\n45 84 c0\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 4c 24 40\n89 ef\n89 c5\n0f 84 69 ff ff ff\ne9 0b 08 00 00\n4c 8b 54 24 18\n49 89 db\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n89 ef\n89 c5\ne9 40 ff ff ff\n31 c0\n45 84 c0\n0f 84 5f ff ff ff\n83 fb 02\n0f 85 56 ff ff ff\n4d 85 ed\n0f 85 4d ff ff ff\ne9 c5 07 00 00\n49 83 fb ff\n0f 84 96 03 00 00\n4d 85 ed\n0f 95 c1\n49 83 fb 01\n0f 95 c2\n31 c0\n45 84 c0\n0f 85 9e 03 00 00\ne9 21 ff ff ff\n80 7c 24 01 00\n0f 84 9f 03 00 00\n45 84 c0\n0f 85 8a 07 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 4c 24 01\nb0 01\n41 b7 30\n83 fb 02\n0f 84 b3 04 00 00\n49 8d 55 01\n4c 39 da\n0f 83 a6 04 00 00\n41 8a 14 12\n80 c2 d0\n80 fa 09\n0f 87 96 04 00 00\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 8d 4c 24 02\n48 39 f1\n73 05\n41 c6 04 0e 30\n49 83 c4 03\n80 7c 24 0e 00\n0f 85 7c fe ff ff\ne9 41 05 00 00\nb1 62\n80 7c 24 01 00\n0f 84 5d fe ff ff\neb 3c\nb2 74\neb 20\nb1 76\n80 7c 24 01 00\n0f 84 4a fe ff ff\neb 29\nb1 66\n80 7c 24 01 00\n0f 84 3b fe ff ff\neb 1a\nb2 72\n80 7c 24 03 00\n89 d1\n0f 84 a9 06 00 00\n80 7c 24 01 00\n0f 84 1f fe ff ff\n41 88 cf\n45 84 c0\n0f 84 38 05 00 00\ne9 8d 06 00 00\n41 b7 27\n83 fb 02\n0f 85 02 fe ff ff\n45 84 c0\n0f 85 78 06 00 00\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 5c\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n31 ff\ne9 c6 fd ff ff\n41 b7 3f\n83 fb 05\n0f 84 cc 03 00 00\n83 fb 02\n0f 85 b1 fd ff ff\n45 84 c0\n0f 84 a8 fd ff ff\ne9 22 06 00 00\n83 fb 02\n0f 85 45 02 00 00\n45 84 c0\n0f 85 10 06 00 00\n41 b7 5c\n31 c0\n40 f6 c7 01\n0f 85 ff 04 00 00\ne9 1d 05 00 00\n89 7c 24 04\n48 83 bc 24 98 00 00 00 01\n0f 85 36 02 00 00\n4c 89 5c 24 30\ne8 77 e8 ff ff\n4c 8b 54 24 18\n48 8b 00\n42 0f b7 14 78\nc1 ea 0e\n80 e2 01\nb9 01 00 00 00\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n31 c0\n80 7c 24 01 00\n0f 84 e3 03 00 00\n49 89 cb\n89 d1\n80 e1 01\n4c 89 d9\n0f 85 d2 03 00 00\n80 7c 24 01 00\n0f 95 c0\n4c 01 e9\nf6 c2 01\n0f 94 c2\n20 c2\n88 54 24 20\n31 c0\n4c 8b 5c 24 30\n80 7c 24 20 00\n0f 85 93 00 00 00\neb 5f\nf6 44 24 04 01\n74 32\n48 89 cf\n89 c1\n80 e1 01\n75 25\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 4c 24 01\n48 39 f1\n73 05\n41 c6 04 0e 27\n49 83 c4 02\nc7 44 24 04 00 00 00 00\n48 89 f9\n49 39 f4\n73 32\n47 88 3c 26\neb 2c\n40 f6 c5 01\n0f 84 b9 00 00 00\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n31 ed\ne9 a5 00 00 00\n49 ff c4\n47 8a 7c 2a 01\n49 89 d5\n80 7c 24 20 00\n74 ce\n45 84 c0\n0f 85 cd 04 00 00\n83 fb 02\n75 3a\n8b 44 24 04\n24 01\n75 32\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\nb0 01\n89 44 24 04\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 8d 44 24 01\n48 39 f0\n73 0d\n44 89 fa\nc0 ea 06\n80 ca 30\n41 88 14 06\n49 8d 44 24 02\n48 39 f0\n73 10\n44 89 fa\nc0 ea 03\n80 e2 07\n80 ca 30\n41 88 14 06\n49 83 c4 03\n41 80 e7 07\n41 80 cf 30\nb0 01\n49 8d 55 01\n48 39 d1\n0f 87 e0 fe ff ff\n8b 7c 24 04\n40 f6 c7 01\n0f 85 28 03 00 00\ne9 46 03 00 00\n4d 85 ed\n0f 95 c1\n41 80 7a 01 00\n0f 95 c2\n31 c0\n45 84 c0\n49 c7 c3 ff ff ff ff\n0f 84 88 fb ff ff\n08 d1\n0a 4c 24 02\n0f 85 7c fb ff ff\ne9 f4 03 00 00\n83 7c 24 70 00\n0f 85 16 03 00 00\n45 31 ff\n31 c0\n80 7c 24 0e 00\n0f 85 67 fb ff ff\ne9 2c 02 00 00\nb2 5c\n80 7c 24 0b 00\n0f 84 11 fd ff ff\n31 c0\n41 b7 5c\n40 f6 c7 01\n0f 85 b6 02 00 00\ne9 d4 02 00 00\n48 c7 84 24 88 00 00 00 00 00 00 00\n49 83 fb ff\n75 10\n4c 89 d7\ne8 41 e3 ff ff\n4c 8b 54 24 18\n49 89 c3\n4b 8d 04 2a\n48 89 44 24 78\nb0 01\n89 44 24 10\n31 c9\n48 8d 9c 24 88 00 00 00\n4c 89 5c 24 30\n48 89 4c 24 20\n4a 8d 04 29\n49 8d 34 02\n48 89 84 24 90 00 00 00\n49 29 c3\n48 8d 7c 24 74\n4c 89 da\n48 89 d9\ne8 23 e3 ff ff\n49 89 c6\n4d 85 f6\n0f 84 86 02 00 00\n49 83 fe ff\n48 bf 2b 00 00 00 02 00 00 00\n0f 84 6a 02 00 00\n49 83 fe fe\n4c 8b 5c 24 30\n0f 84 6a 02 00 00\n49 83 fe 01\n0f 97 c0\n22 44 24 0c\n3c 01\n4c 8b 54 24 18\n48 8b 74 24 28\n8b 5c 24 14\n75 35\n48 8b 44 24 20\n48 8b 4c 24 78\n48 8d 04 01\nb9 01 00 00 00\n0f 1f 40 00\n0f be 14 08\n83 c2 a5\n83 fa 21\n77 0a\n48 0f a3 d7\n0f 82 6c 03 00 00\n48 ff c1\n4c 39 f1\n72 e2\n8b 7c 24 74\ne8 49 e5 ff ff\n85 c0\n75 08\nc7 44 24 10 00 00 00 00\n48 8b 44 24 20\n4c 01 f0\n48 8d 9c 24 88 00 00 00\n48 89 df\n49 89 c6\ne8 12 e5 ff ff\n4c 89 f1\n85 c0\n4c 8b 54 24 18\n4c 8b 5c 24 30\n0f 84 12 ff ff ff\ne9 11 02 00 00\n49 89 cc\n80 7c 24 0e 00\n0f 85 00 fa ff ff\ne9 c5 00 00 00\n83 7c 24 6c 00\n0f 84 e3 f9 ff ff\n49 8d 4d 02\n4c 39 d9\n0f 83 d6 f9 ff ff\n43 80 7c 2a 01 3f\n0f 85 ca f9 ff ff\n41 0f be 14 0a\n31 c0\n83 fa 3e\n0f 87 bc f9 ff ff\n89 6c 24 04\n89 fd\n48 bf 00 00 00 00 82 a3 00 70\n48 0f a3 d7\n0f 83 e9 01 00 00\n45 84 c0\n89 ef\n0f 85 14 02 00 00\n49 39 f4\n73 05\n43 c6 04 26 3f\n49 8d 44 24 01\n48 39 f0\n8b 6c 24 04\n73 05\n41 c6 04 06 22\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 22\n49 8d 44 24 03\n48 39 f0\n73 05\n41 c6 04 06 3f\n49 83 c4 04\n31 c0\n49 89 cd\n41 88 d7\n80 7c 24 0e 00\n0f 85 50 f9 ff ff\neb 18\n4c 8b 5c 24 30\n80 7c 24 0e 00\n0f 85 3e f9 ff ff\n0f 1f 84 00 00 00 00 00\n80 7c 24 0d 00\n74 39\nba 01 00 00 00\n44 89 f9\nd3 e2\n40 84 ed\n75 2f\n44 89 f9\nc0 e9 05\n0f b6 c9\n89 fd\n48 8b bc 24 e0 00 00 00\n23 14 8f\n89 ef\n74 70\neb 13\n40 84 ed\n74 5b\n45 84 c0\n0f 85 5a 01 00 00\n83 fb 02\n75 35\n89 f8\n24 01\n75 2f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 24\n49 8d 44 24 02\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 03\n40 b7 01\n49 39 f4\n73 05\n43 c6 04 26 5c\n49 ff c4\n49 39 f4\n73 38\neb 32\n40 f6 c7 01\n74 23\n24 01\n75 1f\n49 39 f4\n73 05\n43 c6 04 26 27\n49 8d 44 24 01\n48 39 f0\n73 05\n41 c6 04 06 27\n49 83 c4 02\n31 ff\n49 39 f4\n73 04\n47 88 3c 26\n49 ff c4\n49 ff c5\n49 83 fb ff\n0f 85 ae 00 00 00\ne9 c9 f7 ff ff\nc7 44 24 10 00 00 00 00\n4c 8b 54 24 18\neb 3e\n4c 39 9c 24 90 00 00 00\n4c 8b 54 24 18\n73 27\n48 8b 4c 24 20\n48 8b 44 24 78\n80 3c 08 00\n74 53\n49 8d 44 0d 01\n48 ff c1\n4c 39 d8\n72 e8\nc7 44 24 10 00 00 00 00\neb 0d\nc7 44 24 10 00 00 00 00\n48 8b 4c 24 20\n48 83 f9 01\n4c 8b 74 24 38\n48 8b 74 24 28\n8b 5c 24 14\n4c 8b 44 24 48\n4c 8b 4c 24 40\n8b 7c 24 04\n8b 54 24 10\n0f 86 95 fa ff ff\ne9 ae fa ff ff\nc7 44 24 10 00 00 00 00\neb c7\n89 ef\n8b 6c 24 04\n80 7c 24 0e 00\n0f 85 b3 f7 ff ff\ne9 78 fe ff ff\n4d 39 dd\n0f 85 22 f7 ff ff\n45 84 c0\n74 64\n83 fb 02\n75 5f\n4d 85 e4\n75 5a\nf6 84 24 a0 00 00 00 01\n41 b8 04 00 00 00\n44 0f 44 c3\n83 fb 02\n44 0f 45 c3\n44 8b 4c 24 54\n41 83 e1 fd\n48 83 ec 08\n4c 89 f7\n4c 89 d2\n4c 89 d9\nff 74 24 68\nff 74 24 68\n6a 00\ne8 5a f4 ff ff\n48 83 c4 20\n49 89 c4\n4c 89 e0\n48 81 c4 a8 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n48 8b 8c 24 80 00 00 00\n48 85 c9\n74 27\n45 84 c0\n75 22\n8a 01\n84 c0\n74 1c\n48 ff c1\n0f 1f 00\n49 39 f4\n73 04\n43 88 04 26\n49 ff c4\n0f b6 01\n48 ff c1\n84 c0\n75 ea\n49 39 f4\n73 b2\n43 c6 04 26 00\neb ab\n4c 8b 74 24 38\ne9 5c ff ff ff\n48 85 f6\n74 08\n48 8b 44 24 38\nc6 00 22\nb9 14 68 40 00\n45 31 c0\n41 bc 01 00 00 00\n41 b9 01 00 00 00\n40 b7 01\ne9 87 f5 ff ff\ne8 06 de ff ff\n'
p138
S'.text:0000000000402a50\n.text:0000000000402a51\n.text:0000000000402a53\n.text:0000000000402a55\n.text:0000000000402a57\n.text:0000000000402a59\n.text:0000000000402a5a\n.text:0000000000402a61\n.text:0000000000402a64\n.text:0000000000402a67\n.text:0000000000402a6a\n.text:0000000000402a6f\n.text:0000000000402a74\n.text:0000000000402a79\n.text:0000000000402a7e\n.text:0000000000402a86\n.text:0000000000402a8a\n.text:0000000000402a90\n.text:0000000000402a98\n.text:0000000000402a9d\n.text:0000000000402aa5\n.text:0000000000402aaa\n.text:0000000000402aae\n.text:0000000000402ab0\n.text:0000000000402ab3\n.text:0000000000402ab6\n.text:0000000000402ab9\n.text:0000000000402abe\n.text:0000000000402ac1\n.text:0000000000402ac4\n.text:0000000000402ac7\n.text:0000000000402aca\n.text:0000000000402acc\n.text:0000000000402acf\n.text:0000000000402ad4\n.text:0000000000402ad7\n.text:0000000000402adc\n.text:0000000000402ae3\n.text:0000000000402ae8\n.text:0000000000402aeb\n.text:0000000000402af0\n.text:0000000000402af5\n.text:0000000000402afa\n.text:0000000000402afd\n.text:0000000000402b02\n.text:0000000000402b07\n.text:0000000000402b0c\n.text:0000000000402b0e\n.text:0000000000402b10\n.text:0000000000402b15\n.text:0000000000402b17\n.text:0000000000402b1a\n.text:0000000000402b1c\n.text:0000000000402b1e\n.text:0000000000402b20\n.text:0000000000402b23\n.text:0000000000402b25\n.text:0000000000402b2a\n.text:0000000000402b2e\n.text:0000000000402b34\n.text:0000000000402b37\n.text:0000000000402b39\n.text:0000000000402b3b\n.text:0000000000402b3d\n.text:0000000000402b40\n.text:0000000000402b45\n.text:0000000000402b48\n.text:0000000000402b4d\n.text:0000000000402b52\n.text:0000000000402b55\n.text:0000000000402b58\n.text:0000000000402b5b\n.text:0000000000402b5e\n.text:0000000000402b63\n.text:0000000000402b66\n.text:0000000000402b69\n.text:0000000000402b6e\n.text:0000000000402b71\n.text:0000000000402b73\n.text:0000000000402b76\n.text:0000000000402b78\n.text:0000000000402b7a\n.text:0000000000402b7d\n.text:0000000000402b82\n.text:0000000000402b87\n.text:0000000000402b8c\n.text:0000000000402b8f\n.text:0000000000402b95\n.text:0000000000402b97\n.text:0000000000402b9a\n.text:0000000000402b9d\n.text:0000000000402ba0\n.text:0000000000402ba2\n.text:0000000000402ba4\n.text:0000000000402ba7\n.text:0000000000402baa\n.text:0000000000402baf\n.text:0000000000402bb2\n.text:0000000000402bb4\n.text:0000000000402bb7\n.text:0000000000402bb9\n.text:0000000000402bbe\n.text:0000000000402bc1\n.text:0000000000402bc6\n.text:0000000000402bcc\n.text:0000000000402bd2\n.text:0000000000402bd4\n.text:0000000000402bd9\n.text:0000000000402bdf\n.text:0000000000402be2\n.text:0000000000402be5\n.text:0000000000402be8\n.text:0000000000402bea\n.text:0000000000402bef\n.text:0000000000402bf2\n.text:0000000000402bf8\n.text:0000000000402bfd\n.text:0000000000402c03\n.text:0000000000402c06\n.text:0000000000402c09\n.text:0000000000402c0c\n.text:0000000000402c14\n.text:0000000000402c16\n.text:0000000000402c18\n.text:0000000000402c1b\n.text:0000000000402c1f\n.text:0000000000402c21\n.text:0000000000402c24\n.text:0000000000402c28\n.text:0000000000402c2a\n.text:0000000000402c2d\n.text:0000000000402c30\n.text:0000000000402c33\n.text:0000000000402c35\n.text:0000000000402c39\n.text:0000000000402c3b\n.text:0000000000402c3f\n.text:0000000000402c42\n.text:0000000000402c45\n.text:0000000000402c48\n.text:0000000000402c4a\n.text:0000000000402c4e\n.text:0000000000402c57\n.text:0000000000402c5a\n.text:0000000000402c5c\n.text:0000000000402c60\n.text:0000000000402c62\n.text:0000000000402c66\n.text:0000000000402c68\n.text:0000000000402c6b\n.text:0000000000402c6f\n.text:0000000000402c71\n.text:0000000000402c74\n.text:0000000000402c78\n.text:0000000000402c7d\n.text:0000000000402c80\n.text:0000000000402c84\n.text:0000000000402c8c\n.text:0000000000402c8f\n.text:0000000000402c92\n.text:0000000000402c94\n.text:0000000000402c98\n.text:0000000000402c9b\n.text:0000000000402c9d\n.text:0000000000402ca2\n.text:0000000000402ca6\n.text:0000000000402cab\n.text:0000000000402cb0\n.text:0000000000402cb4\n.text:0000000000402cba\n.text:0000000000402cc0\n.text:0000000000402cc5\n.text:0000000000402ccb\n.text:0000000000402cd0\n.text:0000000000402cd2\n.text:0000000000402cd7\n.text:0000000000402cdb\n.text:0000000000402cdd\n.text:0000000000402ce1\n.text:0000000000402ce3\n.text:0000000000402ce5\n.text:0000000000402ce8\n.text:0000000000402ced\n.text:0000000000402cef\n.text:0000000000402cf4\n.text:0000000000402cf9\n.text:0000000000402cfd\n.text:0000000000402d02\n.text:0000000000402d07\n.text:0000000000402d0a\n.text:0000000000402d0d\n.text:0000000000402d0f\n.text:0000000000402d11\n.text:0000000000402d16\n.text:0000000000402d1a\n.text:0000000000402d20\n.text:0000000000402d22\n.text:0000000000402d24\n.text:0000000000402d26\n.text:0000000000402d2e\n.text:0000000000402d33\n.text:0000000000402d39\n.text:0000000000402d3b\n.text:0000000000402d40\n.text:0000000000402d46\n.text:0000000000402d4f\n.text:0000000000402d55\n.text:0000000000402d60\n.text:0000000000402d62\n.text:0000000000402d65\n.text:0000000000402d69\n.text:0000000000402d71\n.text:0000000000402d74\n.text:0000000000402d79\n.text:0000000000402d7b\n.text:0000000000402d7e\n.text:0000000000402d80\n.text:0000000000402d85\n.text:0000000000402d88\n.text:0000000000402d8d\n.text:0000000000402d90\n.text:0000000000402d95\n.text:0000000000402d99\n.text:0000000000402d9e\n.text:0000000000402da0\n.text:0000000000402da2\n.text:0000000000402da8\n.text:0000000000402dad\n.text:0000000000402db2\n.text:0000000000402db5\n.text:0000000000402dba\n.text:0000000000402dbe\n.text:0000000000402dc3\n.text:0000000000402dc8\n.text:0000000000402dca\n.text:0000000000402dcc\n.text:0000000000402dd1\n.text:0000000000402dd3\n.text:0000000000402dd6\n.text:0000000000402ddc\n.text:0000000000402ddf\n.text:0000000000402de5\n.text:0000000000402de8\n.text:0000000000402dee\n.text:0000000000402df3\n.text:0000000000402df7\n.text:0000000000402dfd\n.text:0000000000402e00\n.text:0000000000402e03\n.text:0000000000402e07\n.text:0000000000402e0a\n.text:0000000000402e0c\n.text:0000000000402e0f\n.text:0000000000402e15\n.text:0000000000402e1a\n.text:0000000000402e1f\n.text:0000000000402e25\n.text:0000000000402e28\n.text:0000000000402e2e\n.text:0000000000402e31\n.text:0000000000402e33\n.text:0000000000402e35\n.text:0000000000402e37\n.text:0000000000402e39\n.text:0000000000402e3c\n.text:0000000000402e3e\n.text:0000000000402e43\n.text:0000000000402e48\n.text:0000000000402e4b\n.text:0000000000402e4d\n.text:0000000000402e52\n.text:0000000000402e57\n.text:0000000000402e5a\n.text:0000000000402e5c\n.text:0000000000402e61\n.text:0000000000402e65\n.text:0000000000402e68\n.text:0000000000402e6b\n.text:0000000000402e6d\n.text:0000000000402e72\n.text:0000000000402e77\n.text:0000000000402e79\n.text:0000000000402e7c\n.text:0000000000402e7f\n.text:0000000000402e85\n.text:0000000000402e89\n.text:0000000000402e8c\n.text:0000000000402e92\n.text:0000000000402e96\n.text:0000000000402e99\n.text:0000000000402e9c\n.text:0000000000402ea2\n.text:0000000000402ea5\n.text:0000000000402ea7\n.text:0000000000402eac\n.text:0000000000402eb1\n.text:0000000000402eb4\n.text:0000000000402eb6\n.text:0000000000402ebb\n.text:0000000000402ebf\n.text:0000000000402ec4\n.text:0000000000402eca\n.text:0000000000402ecf\n.text:0000000000402ed1\n.text:0000000000402ed6\n.text:0000000000402edc\n.text:0000000000402ede\n.text:0000000000402ee0\n.text:0000000000402ee2\n.text:0000000000402ee4\n.text:0000000000402ee9\n.text:0000000000402eef\n.text:0000000000402ef1\n.text:0000000000402ef3\n.text:0000000000402ef8\n.text:0000000000402efe\n.text:0000000000402f00\n.text:0000000000402f02\n.text:0000000000402f07\n.text:0000000000402f09\n.text:0000000000402f0f\n.text:0000000000402f14\n.text:0000000000402f1a\n.text:0000000000402f1d\n.text:0000000000402f20\n.text:0000000000402f26\n.text:0000000000402f2b\n.text:0000000000402f2e\n.text:0000000000402f31\n.text:0000000000402f37\n.text:0000000000402f3a\n.text:0000000000402f40\n.text:0000000000402f43\n.text:0000000000402f45\n.text:0000000000402f4a\n.text:0000000000402f4f\n.text:0000000000402f52\n.text:0000000000402f54\n.text:0000000000402f59\n.text:0000000000402f5e\n.text:0000000000402f61\n.text:0000000000402f63\n.text:0000000000402f68\n.text:0000000000402f6c\n.text:0000000000402f6e\n.text:0000000000402f73\n.text:0000000000402f76\n.text:0000000000402f79\n.text:0000000000402f7f\n.text:0000000000402f82\n.text:0000000000402f88\n.text:0000000000402f8b\n.text:0000000000402f91\n.text:0000000000402f96\n.text:0000000000402f99\n.text:0000000000402f9f\n.text:0000000000402fa2\n.text:0000000000402fa8\n.text:0000000000402fab\n.text:0000000000402fad\n.text:0000000000402fb1\n.text:0000000000402fb7\n.text:0000000000402fbc\n.text:0000000000402fc0\n.text:0000000000402fc9\n.text:0000000000402fcf\n.text:0000000000402fd4\n.text:0000000000402fd9\n.text:0000000000402fde\n.text:0000000000402fe1\n.text:0000000000402fe6\n.text:0000000000402fe9\n.text:0000000000402fec\n.text:0000000000402ff1\n.text:0000000000402ff6\n.text:0000000000402ffa\n.text:0000000000402fff\n.text:0000000000403004\n.text:0000000000403008\n.text:000000000040300a\n.text:000000000040300f\n.text:0000000000403015\n.text:0000000000403018\n.text:000000000040301a\n.text:000000000040301d\n.text:0000000000403020\n.text:0000000000403026\n.text:000000000040302b\n.text:000000000040302e\n.text:0000000000403031\n.text:0000000000403034\n.text:0000000000403037\n.text:0000000000403039\n.text:000000000040303d\n.text:000000000040303f\n.text:0000000000403044\n.text:0000000000403049\n.text:000000000040304f\n.text:0000000000403060\n.text:0000000000403065\n.text:0000000000403067\n.text:000000000040306a\n.text:000000000040306c\n.text:000000000040306f\n.text:0000000000403071\n.text:0000000000403074\n.text:0000000000403076\n.text:000000000040307b\n.text:0000000000403080\n.text:0000000000403083\n.text:0000000000403085\n.text:000000000040308a\n.text:000000000040308e\n.text:0000000000403096\n.text:0000000000403099\n.text:000000000040309c\n.text:000000000040309e\n.text:00000000004030a2\n.text:00000000004030b0\n.text:00000000004030b4\n.text:00000000004030ba\n.text:00000000004030bd\n.text:00000000004030bf\n.text:00000000004030c4\n.text:00000000004030c7\n.text:00000000004030c9\n.text:00000000004030d0\n.text:00000000004030d3\n.text:00000000004030d8\n.text:00000000004030db\n.text:00000000004030e0\n.text:00000000004030e2\n.text:00000000004030e5\n.text:00000000004030eb\n.text:00000000004030ee\n.text:00000000004030f0\n.text:00000000004030f4\n.text:00000000004030f6\n.text:00000000004030f8\n.text:00000000004030fb\n.text:00000000004030fd\n.text:0000000000403102\n.text:0000000000403107\n.text:000000000040310a\n.text:000000000040310c\n.text:0000000000403111\n.text:0000000000403116\n.text:0000000000403119\n.text:000000000040311b\n.text:0000000000403120\n.text:0000000000403124\n.text:0000000000403126\n.text:000000000040312a\n.text:000000000040312d\n.text:000000000040312f\n.text:0000000000403134\n.text:0000000000403139\n.text:000000000040313c\n.text:000000000040313e\n.text:0000000000403141\n.text:0000000000403144\n.text:0000000000403147\n.text:000000000040314b\n.text:0000000000403150\n.text:0000000000403153\n.text:0000000000403155\n.text:0000000000403158\n.text:000000000040315b\n.text:000000000040315e\n.text:0000000000403161\n.text:0000000000403165\n.text:0000000000403169\n.text:000000000040316d\n.text:0000000000403171\n.text:0000000000403173\n.text:0000000000403177\n.text:000000000040317a\n.text:0000000000403180\n.text:0000000000403184\n.text:0000000000403188\n.text:000000000040318e\n.text:0000000000403193\n.text:0000000000403196\n.text:0000000000403199\n.text:000000000040319e\n.text:00000000004031a1\n.text:00000000004031a3\n.text:00000000004031a6\n.text:00000000004031ad\n.text:00000000004031b3\n.text:00000000004031b5\n.text:00000000004031b9\n.text:00000000004031bf\n.text:00000000004031c4\n.text:00000000004031c9\n.text:00000000004031cf\n.text:00000000004031d2\n.text:00000000004031d4\n.text:00000000004031d9\n.text:00000000004031df\n.text:00000000004031e4\n.text:00000000004031e6\n.text:00000000004031eb\n.text:00000000004031f1\n.text:00000000004031f3\n.text:00000000004031f6\n.text:00000000004031fa\n.text:0000000000403200\n.text:0000000000403205\n.text:0000000000403211\n.text:0000000000403215\n.text:0000000000403217\n.text:000000000040321a\n.text:000000000040321f\n.text:0000000000403224\n.text:0000000000403227\n.text:000000000040322b\n.text:0000000000403230\n.text:0000000000403232\n.text:0000000000403236\n.text:0000000000403238\n.text:0000000000403240\n.text:0000000000403245\n.text:000000000040324a\n.text:000000000040324e\n.text:0000000000403252\n.text:000000000040325a\n.text:000000000040325d\n.text:0000000000403262\n.text:0000000000403265\n.text:0000000000403268\n.text:000000000040326d\n.text:0000000000403270\n.text:0000000000403273\n.text:0000000000403279\n.text:000000000040327d\n.text:0000000000403287\n.text:000000000040328d\n.text:0000000000403291\n.text:0000000000403296\n.text:000000000040329c\n.text:00000000004032a0\n.text:00000000004032a3\n.text:00000000004032a7\n.text:00000000004032a9\n.text:00000000004032ae\n.text:00000000004032b3\n.text:00000000004032b7\n.text:00000000004032b9\n.text:00000000004032be\n.text:00000000004032c3\n.text:00000000004032c7\n.text:00000000004032cc\n.text:00000000004032d0\n.text:00000000004032d4\n.text:00000000004032d7\n.text:00000000004032da\n.text:00000000004032dc\n.text:00000000004032e0\n.text:00000000004032e6\n.text:00000000004032e9\n.text:00000000004032ec\n.text:00000000004032ee\n.text:00000000004032f2\n.text:00000000004032f7\n.text:00000000004032f9\n.text:00000000004032fb\n.text:0000000000403303\n.text:0000000000403308\n.text:000000000040330b\n.text:0000000000403313\n.text:0000000000403316\n.text:0000000000403319\n.text:000000000040331e\n.text:0000000000403321\n.text:0000000000403323\n.text:0000000000403328\n.text:000000000040332d\n.text:0000000000403333\n.text:0000000000403338\n.text:000000000040333b\n.text:0000000000403340\n.text:0000000000403346\n.text:000000000040334b\n.text:0000000000403350\n.text:0000000000403356\n.text:000000000040335a\n.text:000000000040335d\n.text:0000000000403363\n.text:0000000000403369\n.text:000000000040336f\n.text:0000000000403374\n.text:0000000000403376\n.text:0000000000403379\n.text:000000000040337f\n.text:0000000000403383\n.text:0000000000403385\n.text:000000000040338f\n.text:0000000000403393\n.text:0000000000403399\n.text:000000000040339c\n.text:000000000040339e\n.text:00000000004033a4\n.text:00000000004033a7\n.text:00000000004033a9\n.text:00000000004033ae\n.text:00000000004033b3\n.text:00000000004033b6\n.text:00000000004033ba\n.text:00000000004033bc\n.text:00000000004033c1\n.text:00000000004033c6\n.text:00000000004033c9\n.text:00000000004033cb\n.text:00000000004033d0\n.text:00000000004033d5\n.text:00000000004033d8\n.text:00000000004033da\n.text:00000000004033df\n.text:00000000004033e3\n.text:00000000004033e5\n.text:00000000004033e8\n.text:00000000004033eb\n.text:00000000004033f0\n.text:00000000004033f6\n.text:00000000004033f8\n.text:00000000004033fd\n.text:0000000000403402\n.text:0000000000403408\n.text:0000000000403410\n.text:0000000000403415\n.text:0000000000403417\n.text:000000000040341c\n.text:000000000040341f\n.text:0000000000403421\n.text:0000000000403424\n.text:0000000000403426\n.text:0000000000403429\n.text:000000000040342c\n.text:000000000040342f\n.text:0000000000403431\n.text:0000000000403439\n.text:000000000040343c\n.text:000000000040343e\n.text:0000000000403440\n.text:0000000000403450\n.text:0000000000403453\n.text:0000000000403455\n.text:0000000000403458\n.text:000000000040345e\n.text:0000000000403461\n.text:0000000000403463\n.text:0000000000403465\n.text:0000000000403467\n.text:0000000000403469\n.text:000000000040346c\n.text:000000000040346e\n.text:0000000000403473\n.text:0000000000403478\n.text:000000000040347b\n.text:000000000040347d\n.text:0000000000403482\n.text:0000000000403487\n.text:000000000040348a\n.text:000000000040348c\n.text:0000000000403491\n.text:0000000000403495\n.text:0000000000403498\n.text:000000000040349b\n.text:000000000040349d\n.text:00000000004034a2\n.text:00000000004034a5\n.text:00000000004034a8\n.text:00000000004034aa\n.text:00000000004034b0\n.text:00000000004034b4\n.text:00000000004034b6\n.text:00000000004034b8\n.text:00000000004034ba\n.text:00000000004034bd\n.text:00000000004034bf\n.text:00000000004034c4\n.text:00000000004034c9\n.text:00000000004034cc\n.text:00000000004034ce\n.text:00000000004034d3\n.text:00000000004034d7\n.text:00000000004034d9\n.text:00000000004034dc\n.text:00000000004034de\n.text:00000000004034e2\n.text:00000000004034e5\n.text:00000000004034e8\n.text:00000000004034ec\n.text:00000000004034f2\n.text:00000000004034f7\n.text:00000000004034ff\n.text:0000000000403504\n.text:0000000000403506\n.text:000000000040350e\n.text:0000000000403513\n.text:0000000000403515\n.text:000000000040351a\n.text:000000000040351f\n.text:0000000000403523\n.text:0000000000403525\n.text:000000000040352a\n.text:000000000040352d\n.text:0000000000403530\n.text:0000000000403532\n.text:000000000040353a\n.text:000000000040353c\n.text:0000000000403544\n.text:0000000000403549\n.text:000000000040354d\n.text:0000000000403552\n.text:0000000000403557\n.text:000000000040355b\n.text:0000000000403560\n.text:0000000000403565\n.text:0000000000403569\n.text:000000000040356d\n.text:0000000000403573\n.text:0000000000403578\n.text:0000000000403580\n.text:0000000000403582\n.text:0000000000403584\n.text:0000000000403588\n.text:000000000040358d\n.text:0000000000403593\n.text:00000000004035a0\n.text:00000000004035a3\n.text:00000000004035a9\n.text:00000000004035ac\n.text:00000000004035ae\n.text:00000000004035b1\n.text:00000000004035b3\n.text:00000000004035b6\n.text:00000000004035b8\n.text:00000000004035c0\n.text:00000000004035c6\n.text:00000000004035ca\n.text:00000000004035cd\n.text:00000000004035d1\n.text:00000000004035d6\n.text:00000000004035da\n.text:00000000004035de\n.text:00000000004035e1\n.text:00000000004035e4\n.text:00000000004035e7\n.text:00000000004035eb\n.text:00000000004035ef\n.text:00000000004035f1\n.text:00000000004035f6\n.text:00000000004035fa\n.text:00000000004035fd\n.text:0000000000403600\n.text:0000000000403607\n.text:0000000000403608\n.text:000000000040360a\n.text:000000000040360c\n.text:000000000040360e\n.text:0000000000403610\n.text:0000000000403611\n.text:0000000000403612\n.text:000000000040361a\n.text:000000000040361d\n.text:000000000040361f\n.text:0000000000403622\n.text:0000000000403624\n.text:0000000000403626\n.text:0000000000403628\n.text:000000000040362a\n.text:000000000040362d\n.text:0000000000403630\n.text:0000000000403633\n.text:0000000000403635\n.text:0000000000403639\n.text:000000000040363c\n.text:000000000040363f\n.text:0000000000403642\n.text:0000000000403644\n.text:0000000000403646\n.text:0000000000403649\n.text:000000000040364b\n.text:0000000000403650\n.text:0000000000403652\n.text:0000000000403657\n.text:000000000040365c\n.text:000000000040365f\n.text:0000000000403661\n.text:0000000000403666\n.text:0000000000403669\n.text:000000000040366e\n.text:0000000000403671\n.text:0000000000403677\n.text:000000000040367d\n.text:0000000000403680\n.text:0000000000403685\n'
p139
tp140
sS'getgrgid'
p141
(S'\n__stdcall getgrgid(__gid_t __gid)\n'
p142
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000agroup * getgrgid(__gid_t __gid)\u000a\u000a{\u000a  group *pgVar1;\u000a  \u000a  pgVar1 = (group *)(*(code *)PTR_getgrgid_006090c0)();\u000a  return pgVar1;\u000a}\u000a\u000a
p143
S'JMP qword ptr [0x006090c0]\n'
p144
S'ff 25 0a 7b 20 00\n'
p145
S'.plt:00000000004015b0\n'
p146
tp147
sS'getgid'
p148
(S'\n__stdcall getgid()\n'
p149
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__gid_t getgid(void)\u000a\u000a{\u000a  __gid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getgid_00609150)();\u000a  return _Var1;\u000a}\u000a\u000a
p150
S'JMP qword ptr [0x00609150]\n'
p151
S'ff 25 7a 7a 20 00\n'
p152
S'.plt:00000000004016d0\n'
p153
tp154
sS'set_quoting_style'
p155
(S'\n__stdcall set_quoting_style(quoting_options * o)\n'
p156
V\u000avoid set_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  quoting_style in_ESI;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = in_ESI;\u000a  return;\u000a}\u000a\u000a
p157
S'TEST RDI,RDI\nMOV EAX,0x609360\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],ESI\nRET\n'
p158
S'48 85 ff\nb8 60 93 60 00\n48 0f 45 c7\n89 30\nc3\n'
p159
S'.text:0000000000402930\n.text:0000000000402933\n.text:0000000000402938\n.text:000000000040293c\n.text:000000000040293e\n'
p160
tp161
sS'quotearg_n_style_colon'
p162
(S'\n__stdcall quotearg_n_style_colon(char * arg)\n'
p163
V\u000achar * quotearg_n_style_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options options;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  set_char_quoting(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p164
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV R14,RDX\nMOV EBP,EDI\nLEA RBX,[RSP + 0x8]\nMOV RDI,RBX\nCALL 0x00403a60\nMOV ESI,0x3a\nMOV EDX,0x1\nMOV RDI,RBX\nCALL 0x00402940\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,R14\nMOV RCX,RBX\nCALL 0x00403830\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p165
S'55\n41 56\n53\n48 83 ec 40\n49 89 d6\n89 fd\n48 8d 5c 24 08\n48 89 df\ne8 66 fe ff ff\nbe 3a 00 00 00\nba 01 00 00 00\n48 89 df\ne8 34 ed ff ff\n48 c7 c2 ff ff ff ff\n89 ef\n4c 89 f6\n48 89 d9\ne8 10 fc ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p166
S'.text:0000000000403be0\n.text:0000000000403be1\n.text:0000000000403be3\n.text:0000000000403be4\n.text:0000000000403be8\n.text:0000000000403beb\n.text:0000000000403bed\n.text:0000000000403bf2\n.text:0000000000403bf5\n.text:0000000000403bfa\n.text:0000000000403bff\n.text:0000000000403c04\n.text:0000000000403c07\n.text:0000000000403c0c\n.text:0000000000403c13\n.text:0000000000403c15\n.text:0000000000403c18\n.text:0000000000403c1b\n.text:0000000000403c20\n.text:0000000000403c24\n.text:0000000000403c25\n.text:0000000000403c27\n.text:0000000000403c28\n'
p167
tp168
sS'textdomain'
p169
(S'\n__stdcall textdomain()\n'
p170
V\u000avoid textdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_textdomain_00609068)();\u000a  return;\u000a}\u000a\u000a
p171
S'JMP qword ptr [0x00609068]\n'
p172
S'ff 25 62 7b 20 00\n'
p173
S'.plt:0000000000401500\n'
p174
tp175
sS'xmemdup'
p176
(S'\n__stdcall xmemdup(void * p, size_t s)\n'
p177
V\u000avoid * xmemdup(void *p,size_t s)\u000a\u000a{\u000a  void *__dest;\u000a  \u000a  __dest = xmalloc(s);\u000a  memcpy(__dest,p,s);\u000a  return __dest;\u000a}\u000a\u000a
p178
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R15,RSI\nMOV R14,RDI\nMOV RDI,R15\nCALL 0x004049c0\nMOV RBX,RAX\nMOV RDI,RBX\nMOV RSI,R14\nMOV RDX,R15\nCALL 0x00401690\nMOV RAX,RBX\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p179
S'41 57\n41 56\n53\n49 89 f7\n49 89 fe\n4c 89 ff\ne8 ad fe ff ff\n48 89 c3\n48 89 df\n4c 89 f6\n4c 89 fa\ne8 6c cb ff ff\n48 89 d8\n5b\n41 5e\n41 5f\nc3\n'
p180
S'.text:0000000000404b00\n.text:0000000000404b02\n.text:0000000000404b04\n.text:0000000000404b05\n.text:0000000000404b08\n.text:0000000000404b0b\n.text:0000000000404b0e\n.text:0000000000404b13\n.text:0000000000404b16\n.text:0000000000404b19\n.text:0000000000404b1c\n.text:0000000000404b1f\n.text:0000000000404b24\n.text:0000000000404b27\n.text:0000000000404b28\n.text:0000000000404b2a\n.text:0000000000404b2c\n'
p181
tp182
sS'get_quoting_style'
p183
(S'\n__stdcall get_quoting_style(quoting_options * o)\n'
p184
V\u000aquoting_style get_quoting_style(quoting_options *o)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  return pqVar1->style;\u000a}\u000a\u000a
p185
S'TEST RDI,RDI\nMOV EAX,0x609360\nCMOVNZ RAX,RDI\nMOV EAX,dword ptr [RAX]\nRET\n'
p186
S'48 85 ff\nb8 60 93 60 00\n48 0f 45 c7\n8b 00\nc3\n'
p187
S'.text:0000000000402920\n.text:0000000000402923\n.text:0000000000402928\n.text:000000000040292c\n.text:000000000040292e\n'
p188
tp189
sS'ferror_unlocked'
p190
(S'\n__stdcall ferror_unlocked(FILE * __stream)\n'
p191
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint ferror_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_ferror_unlocked_00609110)();\u000a  return iVar1;\u000a}\u000a\u000a
p192
S'JMP qword ptr [0x00609110]\n'
p193
S'ff 25 ba 7a 20 00\n'
p194
S'.plt:0000000000401650\n'
p195
tp196
sS'exit'
p197
(S'\n__stdcall exit(int __status)\n'
p198
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR_exit_006091e8)();\u000a  return;\u000a}\u000a\u000a
p199
S'JMP qword ptr [0x006091e8]\n'
p200
S'ff 25 e2 79 20 00\n'
p201
S'.plt:0000000000401800\n'
p202
tp203
sS'quote_mem'
p204
(S'\n__stdcall quote_mem(char * arg, size_t argsize)\n'
p205
V\u000achar * quote_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quote_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p206
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x00403cf0\n'
p207
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb e0\n'
p208
S'.text:0000000000403d00\n.text:0000000000403d03\n.text:0000000000403d06\n.text:0000000000403d08\n.text:0000000000403d0b\n.text:0000000000403d0e\n'
p209
tp210
sS'locale_charset'
p211
(S'\n__stdcall locale_charset()\n'
p212
V\u000achar * locale_charset(void)\u000a\u000a{\u000a  char *pcVar1;\u000a  char cVar2;\u000a  int iVar3;\u000a  char *__s2;\u000a  size_t sVar4;\u000a  char *__s1;\u000a  \u000a  __s2 = nl_langinfo(0xe);\u000a  __s1 = "";\u000a  if (__s2 != (char *)0x0) {\u000a    __s1 = __s2;\u000a  }\u000a  __s2 = get_charset_aliases();\u000a  cVar2 = *__s2;\u000a  do {\u000a    if (cVar2 == 0) {\u000aLAB_0040510d:\u000a      __s2 = "ASCII";\u000a      if (*__s1 != 0) {\u000a        __s2 = __s1;\u000a      }\u000a      return __s2;\u000a    }\u000a    iVar3 = strcmp(__s1,__s2);\u000a    if ((iVar3 == 0) || ((cVar2 == '*' && (__s2[1] == 0)))) {\u000a      sVar4 = strlen(__s2);\u000a      __s1 = __s2 + sVar4 + 1;\u000a      goto LAB_0040510d;\u000a    }\u000a    sVar4 = strlen(__s2);\u000a    pcVar1 = __s2 + sVar4;\u000a    sVar4 = strlen(__s2 + sVar4 + 1);\u000a    __s2 = pcVar1 + sVar4 + 2;\u000a    cVar2 = pcVar1[sVar4 + 2];\u000a  } while( true );\u000a}\u000a\u000a
p213
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV EDI,0xe\nCALL 0x00401710\nTEST RAX,RAX\nMOV R14D,0x405bb5\nCMOVNZ R14,RAX\nCALL 0x00405120\nMOV RBX,RAX\nMOV BPL,byte ptr [RBX]\nTEST BPL,BPL\nJNZ 0x004050e5\nJMP 0x0040510d\nMOV RDI,RBX\nCALL 0x00401560\nLEA RBP,[RBX + RAX*0x1]\nLEA RDI,[RBX + RAX*0x1 + 0x1]\nCALL 0x00401560\nLEA RBX,[RAX + RBP*0x1 + 0x2]\nMOVZX EBP,byte ptr [RAX + RBP*0x1 + 0x2]\nTEST BPL,BPL\nJZ 0x0040510d\nMOV RDI,R14\nMOV RSI,RBX\nCALL 0x00401670\nTEST EAX,EAX\nJZ 0x00405100\nCMP BPL,0x2a\nJNZ 0x004050c0\nCMP byte ptr [RBX + 0x1],0x0\nJNZ 0x004050c0\nMOV RDI,RBX\nCALL 0x00401560\nLEA R14,[RBX + RAX*0x1 + 0x1]\nCMP byte ptr [R14],0x0\nMOV EAX,0x407220\nCMOVNZ RAX,R14\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p214
S'55\n41 56\n53\nbf 0e 00 00 00\ne8 72 c6 ff ff\n48 85 c0\n41 be b5 5b 40 00\n4c 0f 45 f0\ne8 70 00 00 00\n48 89 c3\n40 8a 2b\n40 84 ed\n75 2a\neb 50\n48 89 df\ne8 98 c4 ff ff\n48 8d 2c 03\n48 8d 7c 03 01\ne8 8a c4 ff ff\n48 8d 5c 28 02\n0f b6 6c 28 02\n40 84 ed\n74 28\n4c 89 f7\n48 89 de\ne8 80 c5 ff ff\n85 c0\n74 0c\n40 80 fd 2a\n75 c6\n80 7b 01 00\n75 c0\n48 89 df\ne8 58 c4 ff ff\n4c 8d 74 03 01\n41 80 3e 00\nb8 20 72 40 00\n49 0f 45 c6\n5b\n41 5e\n5d\nc3\n'
p215
S'.text:0000000000405090\n.text:0000000000405091\n.text:0000000000405093\n.text:0000000000405094\n.text:0000000000405099\n.text:000000000040509e\n.text:00000000004050a1\n.text:00000000004050a7\n.text:00000000004050ab\n.text:00000000004050b0\n.text:00000000004050b3\n.text:00000000004050b6\n.text:00000000004050b9\n.text:00000000004050bb\n.text:00000000004050c0\n.text:00000000004050c3\n.text:00000000004050c8\n.text:00000000004050cc\n.text:00000000004050d1\n.text:00000000004050d6\n.text:00000000004050db\n.text:00000000004050e0\n.text:00000000004050e3\n.text:00000000004050e5\n.text:00000000004050e8\n.text:00000000004050eb\n.text:00000000004050f0\n.text:00000000004050f2\n.text:00000000004050f4\n.text:00000000004050f8\n.text:00000000004050fa\n.text:00000000004050fe\n.text:0000000000405100\n.text:0000000000405103\n.text:0000000000405108\n.text:000000000040510d\n.text:0000000000405111\n.text:0000000000405116\n.text:000000000040511a\n.text:000000000040511b\n.text:000000000040511d\n.text:000000000040511e\n'
p216
tp217
sS'set_program_name'
p218
(S'\n__stdcall set_program_name(char * argv0)\n'
p219
V\u000avoid set_program_name(char *argv0)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *__s1;\u000a  \u000a  if (argv0 == (char *)0x0) {\u000a    fwrite("A NULL argv[0] was passed through an exec system call.\u005cn",0x37,1,stderr);\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  pcVar2 = strrchr(argv0,0x2f);\u000a  __s1 = pcVar2 + 1;\u000a  if (pcVar2 == (char *)0x0) {\u000a    __s1 = argv0;\u000a  }\u000a  if (((6 < (long)(__s1 + -(long)argv0)) && (iVar1 = strncmp(__s1 + -7,"/.libs/",7), iVar1 == 0)) &&\u000a     (iVar1 = strncmp(__s1,"lt-",3), argv0 = __s1, iVar1 == 0)) {\u000a    argv0 = __s1 + 3;\u000a    program_invocation_short_name = argv0;\u000a  }\u000a  program_invocation_name = argv0;\u000a  program_name = argv0;\u000a  return;\u000a}\u000a\u000a
p220
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x004028b1\nMOV ESI,0x2f\nMOV RDI,RBX\nCALL 0x004015c0\nTEST RAX,RAX\nLEA R14,[RAX + 0x1]\nCMOVZ R14,RBX\nMOV RAX,R14\nSUB RAX,RBX\nCMP RAX,0x7\nJL 0x0040289b\nLEA RDI,[R14 + -0x7]\nMOV ESI,0x4062dd\nMOV EDX,0x7\nCALL 0x004014b0\nTEST EAX,EAX\nJNZ 0x0040289b\nMOV ESI,0x4062e5\nMOV EDX,0x3\nMOV RDI,R14\nCALL 0x004014b0\nTEST EAX,EAX\nJNZ 0x00402898\nADD R14,0x3\nMOV qword ptr [0x006092a0],R14\nMOV RBX,R14\nMOV qword ptr [0x00609358],RBX\nMOV qword ptr [0x006092b8],RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\nMOV RCX,qword ptr [0x006092c0]\nMOV EDI,0x4062a5\nMOV ESI,0x37\nMOV EDX,0x1\nCALL 0x00401810\nCALL 0x00401490\n'
p221
S'41 56\n53\n50\n48 89 fb\n48 85 db\n74 75\nbe 2f 00 00 00\n48 89 df\ne8 77 ed ff ff\n48 85 c0\n4c 8d 70 01\n4c 0f 44 f3\n4c 89 f0\n48 29 d8\n48 83 f8 07\n7c 3b\n49 8d 7e f9\nbe dd 62 40 00\nba 07 00 00 00\ne8 3d ec ff ff\n85 c0\n75 24\nbe e5 62 40 00\nba 03 00 00 00\n4c 89 f7\ne8 27 ec ff ff\n85 c0\n75 0b\n49 83 c6 03\n4c 89 35 08 6a 20 00\n4c 89 f3\n48 89 1d b6 6a 20 00\n48 89 1d 0f 6a 20 00\n48 83 c4 08\n5b\n41 5e\nc3\n48 8b 0d 08 6a 20 00\nbf a5 62 40 00\nbe 37 00 00 00\nba 01 00 00 00\ne8 44 ef ff ff\ne8 bf eb ff ff\n'
p222
S'.text:0000000000402830\n.text:0000000000402832\n.text:0000000000402833\n.text:0000000000402834\n.text:0000000000402837\n.text:000000000040283a\n.text:000000000040283c\n.text:0000000000402841\n.text:0000000000402844\n.text:0000000000402849\n.text:000000000040284c\n.text:0000000000402850\n.text:0000000000402854\n.text:0000000000402857\n.text:000000000040285a\n.text:000000000040285e\n.text:0000000000402860\n.text:0000000000402864\n.text:0000000000402869\n.text:000000000040286e\n.text:0000000000402873\n.text:0000000000402875\n.text:0000000000402877\n.text:000000000040287c\n.text:0000000000402881\n.text:0000000000402884\n.text:0000000000402889\n.text:000000000040288b\n.text:000000000040288d\n.text:0000000000402891\n.text:0000000000402898\n.text:000000000040289b\n.text:00000000004028a2\n.text:00000000004028a9\n.text:00000000004028ad\n.text:00000000004028ae\n.text:00000000004028b0\n.text:00000000004028b1\n.text:00000000004028b8\n.text:00000000004028bd\n.text:00000000004028c2\n.text:00000000004028c7\n.text:00000000004028cc\n'
p223
tp224
sS'fileno'
p225
(S'\n__stdcall fileno(FILE * __stream)\n'
p226
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fileno(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fileno_00609148)();\u000a  return iVar1;\u000a}\u000a\u000a
p227
S'JMP qword ptr [0x00609148]\n'
p228
S'ff 25 82 7a 20 00\n'
p229
S'.plt:00000000004016c0\n'
p230
tp231
sS'quotearg_buffer'
p232
(S'\n__stdcall quotearg_buffer(char * buffer, size_t buffersize, char * arg, size_t argsize, quoting_options * o)\n'
p233
V\u000asize_t quotearg_buffer(char *buffer,size_t buffersize,char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  quoting_options *pqVar4;\u000a  int e;\u000a  \u000a  pqVar4 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar4 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    (buffer,buffersize,arg,argsize,(char *)(ulong)pqVar4->style,\u000a                     (char *)(ulong)(uint)pqVar4->flags);\u000a  *piVar2 = iVar1;\u000a  return sVar3;\u000a}\u000a\u000a
p234
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14,RCX\nMOV R15,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST R8,R8\nMOV EBP,0x609360\nCMOVNZ RBP,R8\nCALL 0x004014a0\nMOV RBX,RAX\nMOV EAX,dword ptr [RBX]\nMOV dword ptr [RSP + 0x4],EAX\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nSUB RSP,0x8\nMOV RDI,R13\nMOV RSI,R12\nMOV RDX,R15\nMOV RCX,R14\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nLEA RAX,[RBP + 0x8]\nPUSH RAX\nCALL 0x00402a50\nADD RSP,0x20\nMOV ECX,dword ptr [RSP + 0x4]\nMOV dword ptr [RBX],ECX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p235
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n49 89 ce\n49 89 d7\n49 89 f4\n49 89 fd\n4d 85 c0\nbd 60 93 60 00\n49 0f 45 e8\ne8 a8 ea ff ff\n48 89 c3\n8b 03\n89 44 24 04\n44 8b 45 00\n44 8b 4d 04\n48 83 ec 08\n4c 89 ef\n4c 89 e6\n4c 89 fa\n4c 89 f1\nff 75 30\nff 75 28\n48 8d 45 08\n50\ne8 27 00 00 00\n48 83 c4 20\n8b 4c 24 04\n89 0b\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p236
S'.text:00000000004029d0\n.text:00000000004029d1\n.text:00000000004029d3\n.text:00000000004029d5\n.text:00000000004029d7\n.text:00000000004029d9\n.text:00000000004029da\n.text:00000000004029db\n.text:00000000004029de\n.text:00000000004029e1\n.text:00000000004029e4\n.text:00000000004029e7\n.text:00000000004029ea\n.text:00000000004029ef\n.text:00000000004029f3\n.text:00000000004029f8\n.text:00000000004029fb\n.text:00000000004029fd\n.text:0000000000402a01\n.text:0000000000402a05\n.text:0000000000402a09\n.text:0000000000402a0d\n.text:0000000000402a10\n.text:0000000000402a13\n.text:0000000000402a16\n.text:0000000000402a19\n.text:0000000000402a1c\n.text:0000000000402a1f\n.text:0000000000402a23\n.text:0000000000402a24\n.text:0000000000402a29\n.text:0000000000402a2d\n.text:0000000000402a31\n.text:0000000000402a33\n.text:0000000000402a37\n.text:0000000000402a38\n.text:0000000000402a3a\n.text:0000000000402a3c\n.text:0000000000402a3e\n.text:0000000000402a40\n.text:0000000000402a41\n'
p237
tp238
sS'quotearg_colon'
p239
(S'\n__stdcall quotearg_colon(char * arg)\n'
p240
V\u000achar * quotearg_colon(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char(arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p241
S'MOV ESI,0x3a\nJMP 0x00403bb0\n'
p242
S'be 3a 00 00 00\neb e9\n'
p243
S'.text:0000000000403bc0\n.text:0000000000403bc5\n'
p244
tp245
sS'mbrtowc'
p246
(S'\n__stdcall mbrtowc(wchar_t * __pwc, char * __s, size_t __n, mbstate_t * __p)\n'
p247
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t mbrtowc(wchar_t *__pwc,char *__s,size_t __n,mbstate_t *__p)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_mbrtowc_006090b0)();\u000a  return sVar1;\u000a}\u000a\u000a
p248
S'JMP qword ptr [0x006090b0]\n'
p249
S'ff 25 1a 7b 20 00\n'
p250
S'.plt:0000000000401590\n'
p251
tp252
sS'rpl_fflush'
p253
(S'\n__stdcall rpl_fflush(FILE * stream)\n'
p254
V\u000aint rpl_fflush(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  if (stream != (FILE *)0x0) {\u000a    iVar1 = __freading(stream);\u000a    if (iVar1 != 0) {\u000a      clear_ungetc_buffer_preserving_position(stream);\u000a    }\u000a  }\u000a  iVar1 = (*(code *)PTR_fflush_00609168)(stream);\u000a  return iVar1;\u000a}\u000a\u000a
p255
S'PUSH RBX\nMOV RBX,RDI\nTEST RBX,RBX\nJZ 0x0040566d\nMOV RDI,RBX\nCALL 0x00401750\nTEST EAX,EAX\nJZ 0x0040566d\nMOV RDI,RBX\nCALL 0x00405680\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401700\n'
p256
S'53\n48 89 fb\n48 85 db\n74 14\n48 89 df\ne8 ef c0 ff ff\n85 c0\n74 08\n48 89 df\ne8 13 00 00 00\n48 89 df\n5b\ne9 8a c0 ff ff\n'
p257
S'.text:0000000000405650\n.text:0000000000405651\n.text:0000000000405654\n.text:0000000000405657\n.text:0000000000405659\n.text:000000000040565c\n.text:0000000000405661\n.text:0000000000405663\n.text:0000000000405665\n.text:0000000000405668\n.text:000000000040566d\n.text:0000000000405670\n.text:0000000000405671\n'
p258
tp259
sS'__assert_fail'
p260
(S'\n__stdcall __assert_fail(char * __assertion, char * __file, uint __line, char * __function)\n'
p261
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid __assert_fail(char *__assertion,char *__file,uint __line,char *__function)\u000a\u000a{\u000a  (*(code *)PTR___assert_fail_006090d8)();\u000a  return;\u000a}\u000a\u000a
p262
S'JMP qword ptr [0x006090d8]\n'
p263
S'ff 25 f2 7a 20 00\n'
p264
S'.plt:00000000004015e0\n'
p265
tp266
sS'setlocale'
p267
(S'\n__stdcall setlocale(int __category, char * __locale)\n'
p268
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * setlocale(int __category,char *__locale)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_setlocale_006091a8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p269
S'JMP qword ptr [0x006091a8]\n'
p270
S'ff 25 22 7a 20 00\n'
p271
S'.plt:0000000000401780\n'
p272
tp273
sS'endpwent'
p274
(S'\n__stdcall endpwent()\n'
p275
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid endpwent(void)\u000a\u000a{\u000a  (*(code *)PTR_endpwent_00609180)();\u000a  return;\u000a}\u000a\u000a
p276
S'JMP qword ptr [0x00609180]\n'
p277
S'ff 25 4a 7a 20 00\n'
p278
S'.plt:0000000000401730\n'
p279
tp280
sS'c_toupper'
p281
(S'\n__stdcall c_toupper()\n'
p282
V\u000aint c_toupper(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + -0x20;\u000a  if (0x19 < in_EDI - 0x61U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p283
S'LEA ECX,[RDI + -0x61]\nLEA EAX,[RDI + -0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p284
S'8d 4f 9f\n8d 47 e0\n83 f9 1a\n0f 43 c7\nc3\n'
p285
S'.text:0000000000405010\n.text:0000000000405013\n.text:0000000000405016\n.text:0000000000405019\n.text:000000000040501c\n'
p286
tp287
sS'bindtextdomain'
p288
(S'\n__stdcall bindtextdomain()\n'
p289
V\u000avoid bindtextdomain(void)\u000a\u000a{\u000a  (*(code *)PTR_bindtextdomain_00609080)();\u000a  return;\u000a}\u000a\u000a
p290
S'JMP qword ptr [0x00609080]\n'
p291
S'ff 25 4a 7b 20 00\n'
p292
S'.plt:0000000000401530\n'
p293
tp294
sS'set_char_quoting'
p295
(S'\n__stdcall set_char_quoting(quoting_options * o)\n'
p296
V\u000aint set_char_quoting(quoting_options *o)\u000a\u000a{\u000a  uint in_EDX;\u000a  byte in_SIL;\u000a  quoting_options *pqVar1;\u000a  uint uVar2;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  uVar2 = pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] >> (in_SIL & 0x1f);\u000a  pqVar1->quote_these_too[(ulong)(in_SIL >> 5)] =\u000a       ((uVar2 ^ in_EDX) & 1) << (in_SIL & 0x1f) ^ pqVar1->quote_these_too[(ulong)(in_SIL >> 5)];\u000a  return (int)(uVar2 & 1);\u000a}\u000a\u000a
p297
S'MOV ECX,ESI\nTEST RDI,RDI\nMOV ESI,0x609360\nCMOVNZ RSI,RDI\nMOV EAX,ECX\nSHR AL,0x5\nMOVZX R8D,AL\nMOV R9D,dword ptr [RSI + R8*0x4 + 0x8]\nMOV EDI,R9D\nSHR EDI,CL\nMOV EAX,EDI\nAND EAX,0x1\nXOR EDI,EDX\nAND EDI,0x1\nSHL EDI,CL\nXOR EDI,R9D\nMOV dword ptr [RSI + R8*0x4 + 0x8],EDI\nRET\n'
p298
S'89 f1\n48 85 ff\nbe 60 93 60 00\n48 0f 45 f7\n89 c8\nc0 e8 05\n44 0f b6 c0\n46 8b 4c 86 08\n44 89 cf\nd3 ef\n89 f8\n83 e0 01\n31 d7\n83 e7 01\nd3 e7\n44 31 cf\n42 89 7c 86 08\nc3\n'
p299
S'.text:0000000000402940\n.text:0000000000402942\n.text:0000000000402945\n.text:000000000040294a\n.text:000000000040294e\n.text:0000000000402950\n.text:0000000000402953\n.text:0000000000402957\n.text:000000000040295c\n.text:000000000040295f\n.text:0000000000402961\n.text:0000000000402963\n.text:0000000000402966\n.text:0000000000402968\n.text:000000000040296b\n.text:000000000040296d\n.text:0000000000402970\n.text:0000000000402975\n'
p300
tp301
sS'quotearg_n'
p302
(S'\n__stdcall quotearg_n(char * arg)\n'
p303
V\u000achar * quotearg_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,(quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p304
S'MOV RDX,-0x1\nMOV ECX,0x609360\nJMP 0x00403830\n'
p305
S'48 c7 c2 ff ff ff ff\nb9 60 93 60 00\neb 02\n'
p306
S'.text:0000000000403820\n.text:0000000000403827\n.text:000000000040382c\n'
p307
tp308
sS'mbsinit'
p309
(S'\n__stdcall mbsinit(mbstate_t * __ps)\n'
p310
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint mbsinit(mbstate_t *__ps)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_mbsinit_00609200)();\u000a  return iVar1;\u000a}\u000a\u000a
p311
S'JMP qword ptr [0x00609200]\n'
p312
S'ff 25 ca 79 20 00\n'
p313
S'.plt:0000000000401830\n'
p314
tp315
sS'dcgettext'
p316
(S'\n__stdcall dcgettext()\n'
p317
V\u000avoid dcgettext(void)\u000a\u000a{\u000a  (*(code *)PTR_dcgettext_00609088)();\u000a  return;\u000a}\u000a\u000a
p318
S'JMP qword ptr [0x00609088]\n'
p319
S'ff 25 42 7b 20 00\n'
p320
S'.plt:0000000000401540\n'
p321
tp322
sS'close_stream'
p323
(S'\n__stdcall close_stream(FILE * stream)\n'
p324
V\u000aint close_stream(FILE *stream)\u000a\u000a{\u000a  int iVar1;\u000a  int iVar2;\u000a  long lVar3;\u000a  int *piVar4;\u000a  \u000a  lVar3 = __fpending();\u000a  iVar1 = ferror_unlocked((FILE *)stream);\u000a  iVar2 = rpl_fclose(stream);\u000a  if (iVar1 == 0) {\u000a    iVar1 = -(uint)(iVar2 != 0);\u000a    if ((lVar3 == 0) && (iVar2 != 0)) {\u000a      piVar4 = __errno_location();\u000a      iVar1 = -1;\u000a      if (*piVar4 == 9) {\u000a        iVar1 = 0;\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    iVar1 = -1;\u000a    if (iVar2 == 0) {\u000a      piVar4 = __errno_location();\u000a      *piVar4 = 0;\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p325
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RBX,RDI\nCALL 0x004014e0\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00401650\nMOV EBP,EAX\nMOV RDI,RBX\nCALL 0x004055d0\nTEST EBP,EBP\nJZ 0x0040505b\nMOV EBX,0xffffffff\nTEST EAX,EAX\nJNZ 0x0040507f\nCALL 0x004014a0\nMOV dword ptr [RAX],0x0\nJMP 0x0040507f\nTEST EAX,EAX\nSETZ CL\nNEG EAX\nSBB EBX,EBX\nTEST R14,R14\nJNZ 0x0040507f\nTEST CL,CL\nJNZ 0x0040507f\nCALL 0x004014a0\nXOR ECX,ECX\nCMP dword ptr [RAX],0x9\nMOV EBX,0xffffffff\nCMOVZ EBX,ECX\nMOV EAX,EBX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p326
S'55\n41 56\n53\n48 89 fb\ne8 b4 c4 ff ff\n49 89 c6\n48 89 df\ne8 19 c6 ff ff\n89 c5\n48 89 df\ne8 8f 05 00 00\n85 ed\n74 16\nbb ff ff ff ff\n85 c0\n75 31\ne8 4d c4 ff ff\nc7 00 00 00 00 00\neb 24\n85 c0\n0f 94 c1\nf7 d8\n19 db\n4d 85 f6\n75 16\n84 c9\n75 12\ne8 2e c4 ff ff\n31 c9\n83 38 09\nbb ff ff ff ff\n0f 44 d9\n89 d8\n5b\n41 5e\n5d\nc3\n'
p327
S'.text:0000000000405020\n.text:0000000000405021\n.text:0000000000405023\n.text:0000000000405024\n.text:0000000000405027\n.text:000000000040502c\n.text:000000000040502f\n.text:0000000000405032\n.text:0000000000405037\n.text:0000000000405039\n.text:000000000040503c\n.text:0000000000405041\n.text:0000000000405043\n.text:0000000000405045\n.text:000000000040504a\n.text:000000000040504c\n.text:000000000040504e\n.text:0000000000405053\n.text:0000000000405059\n.text:000000000040505b\n.text:000000000040505d\n.text:0000000000405060\n.text:0000000000405062\n.text:0000000000405064\n.text:0000000000405067\n.text:0000000000405069\n.text:000000000040506b\n.text:000000000040506d\n.text:0000000000405072\n.text:0000000000405074\n.text:0000000000405077\n.text:000000000040507c\n.text:000000000040507f\n.text:0000000000405081\n.text:0000000000405082\n.text:0000000000405084\n.text:0000000000405085\n'
p328
tp329
sS'quotearg_colon_mem'
p330
(S'\n__stdcall quotearg_colon_mem(char * arg, size_t argsize)\n'
p331
V\u000achar * quotearg_colon_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p332
S'MOV EDX,0x3a\nJMP 0x00403b40\n'
p333
S'ba 3a 00 00 00\ne9 66 ff ff ff\n'
p334
S'.text:0000000000403bd0\n.text:0000000000403bd5\n'
p335
tp336
sS'quotearg_free'
p337
(S'\n__stdcall quotearg_free()\n'
p338
V\u000avoid quotearg_free(void)\u000a\u000a{\u000a  slotvec *__ptr;\u000a  ulong uVar1;\u000a  char **ppcVar2;\u000a  \u000a  __ptr = slotvec;\u000a  if (1 < nslots) {\u000a    ppcVar2 = &slotvec[1].val;\u000a    uVar1 = 1;\u000a    do {\u000a      free(*ppcVar2);\u000a      uVar1 = uVar1 + 1;\u000a      ppcVar2 = ppcVar2 + 2;\u000a    } while (uVar1 < (ulong)nslots);\u000a  }\u000a  if (__ptr->val != slot0) {\u000a    free(__ptr->val);\u000a    slotvec0.size = 0x100;\u000a    slotvec0.val = slot0;\u000a  }\u000a  if (__ptr != &slotvec0) {\u000a    free(__ptr);\u000a    slotvec = &slotvec0;\u000a  }\u000a  nslots = 1;\u000a  return;\u000a}\u000a\u000a
p339
S'PUSH R15\nPUSH R14\nPUSH RBX\nMOV R14,qword ptr [0x00609238]\nCMP dword ptr [0x00609240],0x2\nJC 0x004037ca\nLEA R15,[R14 + 0x18]\nMOV EBX,0x1\nNOP\nMOV RDI,qword ptr [R15]\nCALL 0x00401480\nINC RBX\nMOV EAX,dword ptr [0x00609240]\nADD R15,0x10\nCMP RBX,RAX\nJC 0x004037b0\nMOV RDI,qword ptr [R14 + 0x8]\nMOV EAX,0x6093a0\nCMP RDI,RAX\nJZ 0x004037f3\nCALL 0x00401480\nMOV qword ptr [0x00609248],0x100\nMOV qword ptr [0x00609250],0x6093a0\nMOV EAX,0x609248\nCMP R14,RAX\nJZ 0x00403810\nMOV RDI,R14\nCALL 0x00401480\nMOV qword ptr [0x00609238],0x609248\nMOV dword ptr [0x00609240],0x1\nPOP RBX\nPOP R14\nPOP R15\nRET\n'
p340
S'41 57\n41 56\n53\n4c 8b 35 9c 5a 20 00\n83 3d 9d 5a 20 00 02\n72 25\n4d 8d 7e 18\nbb 01 00 00 00\n66 90\n49 8b 3f\ne8 c8 dc ff ff\n48 ff c3\n8b 05 7f 5a 20 00\n49 83 c7 10\n48 39 c3\n72 e6\n49 8b 7e 08\nb8 a0 93 60 00\n48 39 c7\n74 1b\ne8 a3 dc ff ff\n48 c7 05 60 5a 20 00 00 01 00 00\n48 c7 05 5d 5a 20 00 a0 93 60 00\nb8 48 92 60 00\n49 39 c6\n74 13\n4c 89 f7\ne8 7b dc ff ff\n48 c7 05 28 5a 20 00 48 92 60 00\nc7 05 26 5a 20 00 01 00 00 00\n5b\n41 5e\n41 5f\nc3\n'
p341
S'.text:0000000000403790\n.text:0000000000403792\n.text:0000000000403794\n.text:0000000000403795\n.text:000000000040379c\n.text:00000000004037a3\n.text:00000000004037a5\n.text:00000000004037a9\n.text:00000000004037ae\n.text:00000000004037b0\n.text:00000000004037b3\n.text:00000000004037b8\n.text:00000000004037bb\n.text:00000000004037c1\n.text:00000000004037c5\n.text:00000000004037c8\n.text:00000000004037ca\n.text:00000000004037ce\n.text:00000000004037d3\n.text:00000000004037d6\n.text:00000000004037d8\n.text:00000000004037dd\n.text:00000000004037e8\n.text:00000000004037f3\n.text:00000000004037f8\n.text:00000000004037fb\n.text:00000000004037fd\n.text:0000000000403800\n.text:0000000000403805\n.text:0000000000403810\n.text:000000000040381a\n.text:000000000040381b\n.text:000000000040381d\n.text:000000000040381f\n'
p342
tp343
sS'quotearg_mem'
p344
(S'\n__stdcall quotearg_mem(char * arg, size_t argsize)\n'
p345
V\u000achar * quotearg_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_mem((char *)0x0,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p346
S'MOV RAX,RSI\nMOV RCX,RDI\nXOR EDI,EDI\nMOV RSI,RCX\nMOV RDX,RAX\nJMP 0x004039f0\n'
p347
S'48 89 f0\n48 89 f9\n31 ff\n48 89 ce\n48 89 c2\neb d0\n'
p348
S'.text:0000000000403a10\n.text:0000000000403a13\n.text:0000000000403a16\n.text:0000000000403a18\n.text:0000000000403a1b\n.text:0000000000403a1e\n'
p349
tp350
sS'xcalloc'
p351
(S'\n__stdcall xcalloc(size_t n, size_t s)\n'
p352
V\u000avoid * xcalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = rpl_calloc(n,s);\u000a  if (pvVar1 != (void *)0x0) {\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p353
S'PUSH RAX\nCALL 0x00404e80\nTEST RAX,RAX\nJZ 0x00404aed\nPOP RCX\nRET\nCALL 0x00404b50\n'
p354
S'50\ne8 9a 03 00 00\n48 85 c0\n74 02\n59\nc3\ne8 5e 00 00 00\n'
p355
S'.text:0000000000404ae0\n.text:0000000000404ae1\n.text:0000000000404ae6\n.text:0000000000404ae9\n.text:0000000000404aeb\n.text:0000000000404aec\n.text:0000000000404aed\n'
p356
tp357
sS'deregister_tm_clones'
p358
(S'\n__stdcall deregister_tm_clones()\n'
p359
V\u000a/* WARNING: Removing unreachable block (ram,0x004018a5) */\u000a/* WARNING: Removing unreachable block (ram,0x004018af) */\u000a\u000avoid deregister_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p360
S'MOV EAX,0x609297\nPUSH RBP\nSUB RAX,0x609290\nCMP RAX,0xe\nMOV RBP,RSP\nJBE 0x004018c0\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x004018c0\nPOP RBP\nMOV EDI,0x609290\nJMP RAX\nPOP RBP\nRET\n'
p361
S'b8 97 92 60 00\n55\n48 2d 90 92 60 00\n48 83 f8 0e\n48 89 e5\n76 1b\nb8 00 00 00 00\n48 85 c0\n74 11\n5d\nbf 90 92 60 00\nff e0\n5d\nc3\n'
p362
S'.text:0000000000401890\n.text:0000000000401895\n.text:0000000000401896\n.text:000000000040189c\n.text:00000000004018a0\n.text:00000000004018a3\n.text:00000000004018a5\n.text:00000000004018aa\n.text:00000000004018ad\n.text:00000000004018af\n.text:00000000004018b0\n.text:00000000004018b5\n.text:00000000004018c0\n.text:00000000004018c1\n'
p363
tp364
sS'clear_ungetc_buffer_preserving_position'
p365
(S'\n__stdcall clear_ungetc_buffer_preserving_position(FILE * fp)\n'
p366
V\u000avoid clear_ungetc_buffer_preserving_position(FILE *fp)\u000a\u000a{\u000a  if ((*(byte *)((long)&fp->_flags + 1) & 1) == 0) {\u000a    return;\u000a  }\u000a  rpl_fseeko(fp,0);\u000a  return;\u000a}\u000a\u000a
p367
S'TEST byte ptr [RDI + 0x1],0x1\nJNZ 0x00405687\nRET\nXOR ESI,ESI\nMOV EDX,0x1\nJMP 0x004056a0\n'
p368
S'f6 47 01 01\n75 01\nc3\n31 f6\nba 01 00 00 00\ne9 0d 00 00 00\n'
p369
S'.text:0000000000405680\n.text:0000000000405684\n.text:0000000000405686\n.text:0000000000405687\n.text:0000000000405689\n.text:000000000040568e\n'
p370
tp371
sS'getgroups'
p372
(S'\n__stdcall getgroups(int __size, __gid_t * __list)\n'
p373
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getgroups(int __size,__gid_t *__list)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getgroups_00609158)();\u000a  return iVar1;\u000a}\u000a\u000a
p374
S'JMP qword ptr [0x00609158]\n'
p375
S'ff 25 72 7a 20 00\n'
p376
S'.plt:00000000004016e0\n'
p377
tp378
sS'print_user'
p379
(S'\n__stdcall print_user()\n'
p380
V\u000avoid print_user(__uid_t _Parm1)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  undefined8 uVar2;\u000a  char *__s;\u000a  __uid_t local_c;\u000a  \u000a  local_c = _Parm1;\u000a  if (use_name == 1) {\u000a    local_c = _Parm1;\u000a    ppVar1 = getpwuid(_Parm1);\u000a    if (ppVar1 != (passwd *)0x0) {\u000a      __s = ppVar1->pw_name;\u000a      goto LAB_00402204;\u000a    }\u000a    uVar2 = dcgettext(0,"cannot find name for user ID %s",5);\u000a    __s = uidtostr_ptr(&local_c);\u000a    error(0,0,uVar2,__s);\u000a    ok = 1;\u000a  }\u000a  __s = uidtostr_ptr(&local_c);\u000aLAB_00402204:\u000a  fputs_unlocked(__s,stdout);\u000a  return;\u000a}\u000a\u000a
p381
S'PUSH RBX\nSUB RSP,0x10\nMOV dword ptr [RSP + 0xc],EDI\nCMP byte ptr [0x006092d1],0x1\nJNZ 0x004021f7\nCALL 0x00401520\nTEST RAX,RAX\nJZ 0x004021c1\nMOV RDI,qword ptr [RAX]\nJMP 0x00402204\nXOR EDI,EDI\nMOV ESI,0x4061c9\nMOV EDX,0x5\nCALL 0x00401540\nMOV RBX,RAX\nLEA RDI,[RSP + 0xc]\nCALL 0x004024e0\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBX\nCALL 0x004017a0\nMOV byte ptr [0x006092e4],0x1\nLEA RDI,[RSP + 0xc]\nCALL 0x004024e0\nMOV RDI,RAX\nMOV RSI,qword ptr [0x006092a8]\nADD RSP,0x10\nPOP RBX\nJMP 0x00401640\n'
p382
S'53\n48 83 ec 10\n89 7c 24 0c\n80 3d 21 71 20 00 01\n75 45\ne8 69 f3 ff ff\n48 85 c0\n74 05\n48 8b 38\neb 43\n31 ff\nbe c9 61 40 00\nba 05 00 00 00\ne8 6e f3 ff ff\n48 89 c3\n48 8d 7c 24 0c\ne8 01 03 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 da\ne8 b0 f5 ff ff\nc6 05 ed 70 20 00 01\n48 8d 7c 24 0c\ne8 df 02 00 00\n48 89 c7\n48 8b 35 9d 70 20 00\n48 83 c4 10\n5b\ne9 2b f4 ff ff\n'
p383
S'.text:00000000004021a0\n.text:00000000004021a1\n.text:00000000004021a5\n.text:00000000004021a9\n.text:00000000004021b0\n.text:00000000004021b2\n.text:00000000004021b7\n.text:00000000004021ba\n.text:00000000004021bc\n.text:00000000004021bf\n.text:00000000004021c1\n.text:00000000004021c3\n.text:00000000004021c8\n.text:00000000004021cd\n.text:00000000004021d2\n.text:00000000004021d5\n.text:00000000004021da\n.text:00000000004021df\n.text:00000000004021e2\n.text:00000000004021e4\n.text:00000000004021e6\n.text:00000000004021e8\n.text:00000000004021eb\n.text:00000000004021f0\n.text:00000000004021f7\n.text:00000000004021fc\n.text:0000000000402201\n.text:0000000000402204\n.text:000000000040220b\n.text:000000000040220f\n.text:0000000000402210\n'
p384
tp385
sS'xnmalloc'
p386
(S'\n__stdcall xnmalloc(size_t n, size_t s)\n'
p387
V\u000avoid * xnmalloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if (SUB168(ZEXT816(n) * ZEXT816(s) >> 0x40,0) == 0) {\u000a    pvVar1 = xmalloc(s * n);\u000a    return pvVar1;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  xalloc_die();\u000a}\u000a\u000a
p388
S'MOV RAX,RDI\nMUL RSI\nJO 0x004049b1\nIMUL RSI,RDI\nMOV RDI,RSI\nJMP 0x004049c0\nPUSH RAX\nCALL 0x00404b50\n'
p389
S'48 89 f8\n48 f7 e6\n70 09\n48 0f af f7\n48 89 f7\neb 0f\n50\ne8 99 01 00 00\n'
p390
S'.text:00000000004049a0\n.text:00000000004049a3\n.text:00000000004049a6\n.text:00000000004049a8\n.text:00000000004049ac\n.text:00000000004049af\n.text:00000000004049b1\n.text:00000000004049b2\n'
p391
tp392
sS'quotearg_custom'
p393
(S'\n__stdcall quotearg_custom(char * left_quote, char * right_quote, char * arg)\n'
p394
V\u000achar * quotearg_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom((char *)0x0,left_quote,right_quote);\u000a  return pcVar1;\u000a}\u000a\u000a
p395
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV RDX,RDI\nXOR EDI,EDI\nMOV RSI,RDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403c30\n'
p396
S'48 89 d0\n48 89 f1\n48 89 fa\n31 ff\n48 89 d6\n48 89 ca\n48 89 c1\ne9 67 ff ff ff\n'
p397
S'.text:0000000000403cb0\n.text:0000000000403cb3\n.text:0000000000403cb6\n.text:0000000000403cb9\n.text:0000000000403cbb\n.text:0000000000403cbe\n.text:0000000000403cc1\n.text:0000000000403cc4\n'
p398
tp399
sS'free'
p400
(S'\n__stdcall free(void * __ptr)\n'
p401
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid free(void *__ptr)\u000a\u000a{\u000a  (*(code *)PTR_free_00609028)();\u000a  return;\u000a}\u000a\u000a
p402
S'JMP qword ptr [0x00609028]\n'
p403
S'ff 25 a2 7b 20 00\n'
p404
S'.plt:0000000000401480\n'
p405
tp406
sS'close'
p407
(S'\n__stdcall close(int __fd)\n'
p408
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint close(int __fd)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_close_006090f8)();\u000a  return iVar1;\u000a}\u000a\u000a
p409
S'JMP qword ptr [0x006090f8]\n'
p410
S'ff 25 d2 7a 20 00\n'
p411
S'.plt:0000000000401620\n'
p412
tp413
sS'getenv'
p414
(S'\n__stdcall getenv(char * __name)\n'
p415
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * getenv(char *__name)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_getenv_00609020)();\u000a  return pcVar1;\u000a}\u000a\u000a
p416
S'JMP qword ptr [0x00609020]\n'
p417
S'ff 25 aa 7b 20 00\n'
p418
S'.plt:0000000000401470\n'
p419
tp420
sS'putchar_unlocked'
p421
(S'\n__stdcall putchar_unlocked(int __c)\n'
p422
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint putchar_unlocked(int __c)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_putchar_unlocked_00609140)();\u000a  return iVar1;\u000a}\u000a\u000a
p423
S'JMP qword ptr [0x00609140]\n'
p424
S'ff 25 8a 7a 20 00\n'
p425
S'.plt:00000000004016b0\n'
p426
tp427
sS'quotearg_char'
p428
(S'\n__stdcall quotearg_char(char * arg)\n'
p429
V\u000achar * quotearg_char(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_char_mem(arg,0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p430
S'MOV EAX,ESI\nMOV RSI,-0x1\nMOV EDX,EAX\nJMP 0x00403b40\n'
p431
S'89 f0\n48 c7 c6 ff ff ff ff\n89 c2\neb 83\n'
p432
S'.text:0000000000403bb0\n.text:0000000000403bb2\n.text:0000000000403bb9\n.text:0000000000403bbb\n'
p433
tp434
sS'malloc'
p435
(S'\n__stdcall malloc(size_t __size)\n'
p436
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * malloc(size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_malloc_00609160)();\u000a  return pvVar1;\u000a}\u000a\u000a
p437
S'JMP qword ptr [0x00609160]\n'
p438
S'ff 25 6a 7a 20 00\n'
p439
S'.plt:00000000004016f0\n'
p440
tp441
sS'c_tolower'
p442
(S'\n__stdcall c_tolower()\n'
p443
V\u000aint c_tolower(void)\u000a\u000a{\u000a  int iVar1;\u000a  int in_EDI;\u000a  \u000a  iVar1 = in_EDI + 0x20;\u000a  if (0x19 < in_EDI - 0x41U) {\u000a    iVar1 = in_EDI;\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p444
S'LEA ECX,[RDI + -0x41]\nLEA EAX,[RDI + 0x20]\nCMP ECX,0x1a\nCMOVNC EAX,EDI\nRET\n'
p445
S'8d 4f bf\n8d 47 20\n83 f9 1a\n0f 43 c7\nc3\n'
p446
S'.text:0000000000405000\n.text:0000000000405003\n.text:0000000000405006\n.text:0000000000405009\n.text:000000000040500c\n'
p447
tp448
sS'rpl_fseeko'
p449
(S'\n__stdcall rpl_fseeko(FILE * fp, off_t offset)\n'
p450
V\u000aint rpl_fseeko(FILE *fp,off_t offset)\u000a\u000a{\u000a  int __fd;\u000a  __off_t _Var1;\u000a  uint __whence;\u000a  \u000a  if (((fp->_IO_read_end == fp->_IO_read_ptr) && (fp->_IO_write_ptr == fp->_IO_write_base)) &&\u000a     (fp->_IO_save_base == (char *)0x0)) {\u000a    __fd = fileno((FILE *)fp);\u000a    _Var1 = lseek(__fd,offset,__whence);\u000a    if (_Var1 == -1) {\u000a      __fd = -1;\u000a    }\u000a    else {\u000a      *(byte *)&fp->_flags = *(byte *)&fp->_flags & 0xef;\u000a      fp->_offset = _Var1;\u000a      __fd = 0;\u000a    }\u000a    return __fd;\u000a  }\u000a  __fd = (*(code *)PTR_fseeko_006091d0)(fp,offset,(ulong)__whence);\u000a  return __fd;\u000a}\u000a\u000a
p451
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV RBP,RSI\nMOV RBX,RDI\nMOV RAX,qword ptr [RBX + 0x10]\nCMP RAX,qword ptr [RBX + 0x8]\nJNZ 0x004056c8\nMOV RAX,qword ptr [RBX + 0x28]\nCMP RAX,qword ptr [RBX + 0x20]\nJNZ 0x004056c8\nCMP qword ptr [RBX + 0x48],0x0\nJZ 0x004056da\nMOV RDI,RBX\nMOV RSI,RBP\nMOV EDX,R14D\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004017d0\nMOV RDI,RBX\nCALL 0x004016c0\nMOV EDI,EAX\nMOV RSI,RBP\nMOV EDX,R14D\nCALL 0x004015d0\nCMP RAX,-0x1\nJZ 0x00405703\nAND byte ptr [RBX],0xef\nMOV qword ptr [0x90 + RBX],RAX\nXOR EAX,EAX\nJMP 0x00405708\nMOV EAX,0xffffffff\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p452
S'55\n41 56\n53\n41 89 d6\n48 89 f5\n48 89 fb\n48 8b 43 10\n48 3b 43 08\n75 11\n48 8b 43 28\n48 3b 43 20\n75 07\n48 83 7b 48 00\n74 12\n48 89 df\n48 89 ee\n44 89 f2\n5b\n41 5e\n5d\ne9 f6 c0 ff ff\n48 89 df\ne8 de bf ff ff\n89 c7\n48 89 ee\n44 89 f2\ne8 e1 be ff ff\n48 83 f8 ff\n74 0e\n80 23 ef\n48 89 83 90 00 00 00\n31 c0\neb 05\nb8 ff ff ff ff\n5b\n41 5e\n5d\nc3\n'
p453
S'.text:00000000004056a0\n.text:00000000004056a1\n.text:00000000004056a3\n.text:00000000004056a4\n.text:00000000004056a7\n.text:00000000004056aa\n.text:00000000004056ad\n.text:00000000004056b1\n.text:00000000004056b5\n.text:00000000004056b7\n.text:00000000004056bb\n.text:00000000004056bf\n.text:00000000004056c1\n.text:00000000004056c6\n.text:00000000004056c8\n.text:00000000004056cb\n.text:00000000004056ce\n.text:00000000004056d1\n.text:00000000004056d2\n.text:00000000004056d4\n.text:00000000004056d5\n.text:00000000004056da\n.text:00000000004056dd\n.text:00000000004056e2\n.text:00000000004056e4\n.text:00000000004056e7\n.text:00000000004056ea\n.text:00000000004056ef\n.text:00000000004056f3\n.text:00000000004056f5\n.text:00000000004056f8\n.text:00000000004056ff\n.text:0000000000405701\n.text:0000000000405703\n.text:0000000000405708\n.text:0000000000405709\n.text:000000000040570b\n.text:000000000040570c\n'
p454
tp455
sS'getopt_long'
p456
(S'\n__stdcall getopt_long()\n'
p457
V\u000avoid getopt_long(void)\u000a\u000a{\u000a  (*(code *)PTR_getopt_long_006090a8)();\u000a  return;\u000a}\u000a\u000a
p458
S'JMP qword ptr [0x006090a8]\n'
p459
S'ff 25 22 7b 20 00\n'
p460
S'.plt:0000000000401580\n'
p461
tp462
sS'quote_n_mem'
p463
(S'\n__stdcall quote_n_mem(char * arg, size_t argsize)\n'
p464
V\u000achar * quote_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p465
S'MOV ECX,0x609258\nJMP 0x00403830\n'
p466
S'b9 58 92 60 00\ne9 36 fb ff ff\n'
p467
S'.text:0000000000403cf0\n.text:0000000000403cf5\n'
p468
tp469
sS'xstrdup'
p470
(S'\n__stdcall xstrdup(char * string)\n'
p471
V\u000achar * xstrdup(char *string)\u000a\u000a{\u000a  size_t sVar1;\u000a  char *pcVar2;\u000a  \u000a  sVar1 = strlen(string);\u000a  pcVar2 = (char *)xmemdup(string,sVar1 + 1);\u000a  return pcVar2;\u000a}\u000a\u000a
p472
S'PUSH RBX\nMOV RBX,RDI\nCALL 0x00401560\nLEA RSI,[RAX + 0x1]\nMOV RDI,RBX\nPOP RBX\nJMP 0x00404b00\n'
p473
S'53\n48 89 fb\ne8 27 ca ff ff\n48 8d 70 01\n48 89 df\n5b\neb bd\n'
p474
S'.text:0000000000404b30\n.text:0000000000404b31\n.text:0000000000404b34\n.text:0000000000404b39\n.text:0000000000404b3d\n.text:0000000000404b40\n.text:0000000000404b41\n'
p475
tp476
sS'c_ispunct'
p477
(S'\n__stdcall c_ispunct()\n'
p478
V\u000a_Bool c_ispunct(void)\u000a\u000a{\u000a  undefined4 in_EDI;\u000a  \u000a  switch(in_EDI) {\u000a  case 0x21:\u000a  case 0x22:\u000a  case 0x23:\u000a  case 0x24:\u000a  case 0x25:\u000a  case 0x26:\u000a  case 0x27:\u000a  case 0x28:\u000a  case 0x29:\u000a  case 0x2a:\u000a  case 0x2b:\u000a  case 0x2c:\u000a  case 0x2d:\u000a  case 0x2e:\u000a  case 0x2f:\u000a  case 0x3a:\u000a  case 0x3b:\u000a  case 0x3c:\u000a  case 0x3d:\u000a  case 0x3e:\u000a  case 0x3f:\u000a  case 0x40:\u000a  case 0x5b:\u000a  case 0x5c:\u000a  case 0x5d:\u000a  case 0x5e:\u000a  case 0x5f:\u000a  case 0x60:\u000a  case 0x7b:\u000a  case 0x7c:\u000a  case 0x7d:\u000a  case 0x7e:\u000a    return true;\u000a  default:\u000a    return false;\u000a  }\u000a}\u000a\u000a
p479
S'ADD EDI,-0x21\nCMP EDI,0x5d\nJA 0x00404fa2\nMOV AL,0x1\nJMP qword ptr [0x406e08 + RDI*0x8]\nRET\nXOR EAX,EAX\nRET\n'
p480
S'83 c7 df\n83 ff 5d\n77 0a\nb0 01\nff 24 fd 08 6e 40 00\nc3\n31 c0\nc3\n'
p481
S'.text:0000000000404f90\n.text:0000000000404f93\n.text:0000000000404f96\n.text:0000000000404f98\n.text:0000000000404f9a\n.text:0000000000404fa1\n.text:0000000000404fa2\n.text:0000000000404fa4\n'
p482
tp483
sS'quotearg_style'
p484
(S'\n__stdcall quotearg_style(char * arg)\n'
p485
V\u000achar * quotearg_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p486
S'MOV RAX,RSI\nMOV ECX,EDI\nXOR EDI,EDI\nMOV ESI,ECX\nMOV RDX,RAX\nJMP 0x00403a20\n'
p487
S'48 89 f0\n89 f9\n31 ff\n89 ce\n48 89 c2\ne9 0f ff ff ff\n'
p488
S'.text:0000000000403b00\n.text:0000000000403b03\n.text:0000000000403b05\n.text:0000000000403b07\n.text:0000000000403b09\n.text:0000000000403b0c\n'
p489
tp490
sS'endgrent'
p491
(S'\n__stdcall endgrent()\n'
p492
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid endgrent(void)\u000a\u000a{\u000a  (*(code *)PTR_endgrent_00609018)();\u000a  return;\u000a}\u000a\u000a
p493
S'JMP qword ptr [0x00609018]\n'
p494
S'ff 25 b2 7b 20 00\n'
p495
S'.plt:0000000000401460\n'
p496
tp497
sS'xgetgroups'
p498
(S'\n__stdcall xgetgroups(char * username, gid_t * * groups)\n'
p499
V\u000aint xgetgroups(char *username,gid_t **groups)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  \u000a  iVar1 = mgetgroups(username,groups);\u000a  if (iVar1 == -1) {\u000a    piVar2 = __errno_location();\u000a    if (*piVar2 == 0xc) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die();\u000a    }\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p500
S'PUSH RBX\nCALL 0x004053c0\nMOV EBX,EAX\nCMP EBX,-0x1\nJNZ 0x00404b97\nCALL 0x004014a0\nCMP dword ptr [RAX],0xc\nJZ 0x00404b9b\nMOV EAX,EBX\nPOP RBX\nRET\nCALL 0x00404b50\n'
p501
S'53\ne8 3a 08 00 00\n89 c3\n83 fb ff\n75 0a\ne8 0e c9 ff ff\n83 38 0c\n74 04\n89 d8\n5b\nc3\ne8 b0 ff ff ff\n'
p502
S'.text:0000000000404b80\n.text:0000000000404b81\n.text:0000000000404b86\n.text:0000000000404b88\n.text:0000000000404b8b\n.text:0000000000404b8d\n.text:0000000000404b92\n.text:0000000000404b95\n.text:0000000000404b97\n.text:0000000000404b99\n.text:0000000000404b9a\n.text:0000000000404b9b\n'
p503
tp504
sS'fscanf'
p505
(S'\n__stdcall fscanf(FILE * __stream, char * __format)\n'
p506
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fscanf(FILE *__stream,char *__format,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fscanf_006090f0)();\u000a  return iVar1;\u000a}\u000a\u000a
p507
S'JMP qword ptr [0x006090f0]\n'
p508
S'ff 25 da 7a 20 00\n'
p509
S'.plt:0000000000401610\n'
p510
tp511
sS'emit_try_help'
p512
(S'\n__stdcall emit_try_help()\n'
p513
V\u000avoid emit_try_help(void)\u000a\u000a{\u000a  undefined8 uVar1;\u000a  undefined8 uVar2;\u000a  \u000a  uVar1 = stderr;\u000a  uVar2 = dcgettext(0,"Try \u005c'%s --help\u005c' for more information.\u005cn",5);\u000a  __fprintf_chk(uVar1,1,uVar2,program_name);\u000a  return;\u000a}\u000a\u000a
p514
S'PUSH RBX\nMOV RBX,qword ptr [0x006092c0]\nXOR EDI,EDI\nMOV ESI,0x40603f\nMOV EDX,0x5\nCALL 0x00401540\nMOV RDX,RAX\nMOV RCX,qword ptr [0x00609358]\nMOV ESI,0x1\nXOR EAX,EAX\nMOV RDI,RBX\nPOP RBX\nJMP 0x00401820\n'
p515
S'53\n48 8b 1d 68 78 20 00\n31 ff\nbe 3f 60 40 00\nba 05 00 00 00\ne8 d7 fa ff ff\n48 89 c2\n48 8b 0d e5 78 20 00\nbe 01 00 00 00\n31 c0\n48 89 df\n5b\ne9 9d fd ff ff\n'
p516
S'.text:0000000000401a50\n.text:0000000000401a51\n.text:0000000000401a58\n.text:0000000000401a5a\n.text:0000000000401a5f\n.text:0000000000401a64\n.text:0000000000401a69\n.text:0000000000401a6c\n.text:0000000000401a73\n.text:0000000000401a78\n.text:0000000000401a7a\n.text:0000000000401a7d\n.text:0000000000401a7e\n'
p517
tp518
sS'memcpy'
p519
(S'\n__stdcall memcpy(void * __dest, void * __src, size_t __n)\n'
p520
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memcpy(void *__dest,void *__src,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memcpy_00609130)();\u000a  return pvVar1;\u000a}\u000a\u000a
p521
S'JMP qword ptr [0x00609130]\n'
p522
S'ff 25 9a 7a 20 00\n'
p523
S'.plt:0000000000401690\n'
p524
tp525
sS'strrchr'
p526
(S'\n__stdcall strrchr(char * __s, int __c)\n'
p527
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * strrchr(char *__s,int __c)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_strrchr_006090c8)();\u000a  return pcVar1;\u000a}\u000a\u000a
p528
S'JMP qword ptr [0x006090c8]\n'
p529
S'ff 25 02 7b 20 00\n'
p530
S'.plt:00000000004015c0\n'
p531
tp532
sS'close_stdout_set_ignore_EPIPE'
p533
(S'\n__stdcall close_stdout_set_ignore_EPIPE()\n'
p534
V\u000avoid close_stdout_set_ignore_EPIPE(undefined uParm1)\u000a\u000a{\u000a  ignore_EPIPE = (_Bool)uParm1;\u000a  return;\u000a}\u000a\u000a
p535
S'MOV byte ptr [0x00609350],DIL\nRET\n'
p536
S'40 88 3d 49 6c 20 00\nc3\n'
p537
S'.text:0000000000402700\n.text:0000000000402707\n'
p538
tp539
sS'quotearg_alloc_mem'
p540
(S'\n__stdcall quotearg_alloc_mem(char * arg, size_t argsize, size_t * size, quoting_options * o)\n'
p541
V\u000achar * quotearg_alloc_mem(char *arg,size_t argsize,size_t *size,quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  int *piVar2;\u000a  size_t sVar3;\u000a  char *buffer;\u000a  uint uVar4;\u000a  quoting_options *pqVar5;\u000a  int e;\u000a  \u000a  pqVar5 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar5 = o;\u000a  }\u000a  piVar2 = __errno_location();\u000a  iVar1 = *piVar2;\u000a  uVar4 = (uint)(size == (size_t *)0x0) | pqVar5->flags;\u000a  sVar3 = quotearg_buffer_restyled\u000a                    ((char *)0x0,0,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  buffer = (char *)xcharalloc(sVar3 + 1);\u000a  quotearg_buffer_restyled\u000a            (buffer,sVar3 + 1,arg,argsize,(char *)(ulong)pqVar5->style,(char *)(ulong)uVar4);\u000a  *piVar2 = iVar1;\u000a  if (size != (size_t *)0x0) {\u000a    *size = sVar3;\u000a  }\u000a  return buffer;\u000a}\u000a\u000a
p542
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x28\nMOV RBX,RDX\nMOV qword ptr [RSP + 0x18],RBX\nMOV R14,RSI\nMOV qword ptr [RSP + 0x10],R14\nMOV R15,RDI\nMOV qword ptr [RSP + 0x8],R15\nTEST RCX,RCX\nMOV R12D,0x609360\nCMOVNZ R12,RCX\nCALL 0x004014a0\nMOV qword ptr [RSP + 0x20],RAX\nMOV ECX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x4],ECX\nXOR EBP,EBP\nTEST RBX,RBX\nSETZ BPL\nOR EBP,dword ptr [R12 + 0x4]\nMOV R8D,dword ptr [R12]\nLEA R13,[R12 + 0x8]\nSUB RSP,0x8\nXOR EDI,EDI\nXOR ESI,ESI\nMOV RDX,R15\nMOV RCX,R14\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402a50\nADD RSP,0x20\nMOV RBX,RAX\nLEA R15,[RBX + 0x1]\nMOV RDI,R15\nCALL 0x00404a90\nMOV R14,RAX\nMOV R8D,dword ptr [R12]\nSUB RSP,0x8\nMOV RDI,R14\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RCX,qword ptr [RSP + 0x18]\nMOV R9D,EBP\nPUSH qword ptr [R12 + 0x30]\nPUSH qword ptr [R12 + 0x28]\nPUSH R13\nCALL 0x00402a50\nMOV RAX,qword ptr [RSP + 0x38]\nADD RSP,0x20\nTEST RAX,RAX\nMOV ECX,dword ptr [RSP + 0x4]\nMOV RDX,qword ptr [RSP + 0x20]\nMOV dword ptr [RDX],ECX\nJZ 0x0040377a\nMOV qword ptr [RAX],RBX\nMOV RAX,R14\nADD RSP,0x28\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p543
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 28\n48 89 d3\n48 89 5c 24 18\n49 89 f6\n4c 89 74 24 10\n49 89 ff\n4c 89 7c 24 08\n48 85 c9\n41 bc 60 93 60 00\n4c 0f 45 e1\ne8 c8 dd ff ff\n48 89 44 24 20\n8b 08\n89 4c 24 04\n31 ed\n48 85 db\n40 0f 94 c5\n41 0b 6c 24 04\n45 8b 04 24\n4d 8d 6c 24 08\n48 83 ec 08\n31 ff\n31 f6\n4c 89 fa\n4c 89 f1\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 34 f3 ff ff\n48 83 c4 20\n48 89 c3\n4c 8d 7b 01\n4c 89 ff\ne8 61 13 00 00\n49 89 c6\n45 8b 04 24\n48 83 ec 08\n4c 89 f7\n4c 89 fe\n48 8b 54 24 10\n48 8b 4c 24 18\n41 89 e9\n41 ff 74 24 30\n41 ff 74 24 28\n41 55\ne8 f2 f2 ff ff\n48 8b 44 24 38\n48 83 c4 20\n48 85 c0\n8b 4c 24 04\n48 8b 54 24 20\n89 0a\n74 03\n48 89 18\n4c 89 f0\n48 83 c4 28\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p544
S'.text:00000000004036a0\n.text:00000000004036a1\n.text:00000000004036a3\n.text:00000000004036a5\n.text:00000000004036a7\n.text:00000000004036a9\n.text:00000000004036aa\n.text:00000000004036ae\n.text:00000000004036b1\n.text:00000000004036b6\n.text:00000000004036b9\n.text:00000000004036be\n.text:00000000004036c1\n.text:00000000004036c6\n.text:00000000004036c9\n.text:00000000004036cf\n.text:00000000004036d3\n.text:00000000004036d8\n.text:00000000004036dd\n.text:00000000004036df\n.text:00000000004036e3\n.text:00000000004036e5\n.text:00000000004036e8\n.text:00000000004036ec\n.text:00000000004036f1\n.text:00000000004036f5\n.text:00000000004036fa\n.text:00000000004036fe\n.text:0000000000403700\n.text:0000000000403702\n.text:0000000000403705\n.text:0000000000403708\n.text:000000000040370b\n.text:0000000000403710\n.text:0000000000403715\n.text:0000000000403717\n.text:000000000040371c\n.text:0000000000403720\n.text:0000000000403723\n.text:0000000000403727\n.text:000000000040372a\n.text:000000000040372f\n.text:0000000000403732\n.text:0000000000403736\n.text:000000000040373a\n.text:000000000040373d\n.text:0000000000403740\n.text:0000000000403745\n.text:000000000040374a\n.text:000000000040374d\n.text:0000000000403752\n.text:0000000000403757\n.text:0000000000403759\n.text:000000000040375e\n.text:0000000000403763\n.text:0000000000403767\n.text:000000000040376a\n.text:000000000040376e\n.text:0000000000403773\n.text:0000000000403775\n.text:0000000000403777\n.text:000000000040377a\n.text:000000000040377d\n.text:0000000000403781\n.text:0000000000403782\n.text:0000000000403784\n.text:0000000000403786\n.text:0000000000403788\n.text:000000000040378a\n.text:000000000040378b\n'
p545
tp546
sS'iswprint'
p547
(S'\n__stdcall iswprint(wint_t __wc)\n'
p548
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint iswprint(wint_t __wc)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_iswprint_00609208)();\u000a  return iVar1;\u000a}\u000a\u000a
p549
S'JMP qword ptr [0x00609208]\n'
p550
S'ff 25 c2 79 20 00\n'
p551
S'.plt:0000000000401840\n'
p552
tp553
sS'FUN_00401450'
p554
(S'\n__stdcall FUN_00401450()\n'
p555
V\u000avoid FUN_00401450(void)\u000a\u000a{\u000a                    /* WARNING: Treating indirect jump as call */\u000a  (*(code *)PTR_00609010)();\u000a  return;\u000a}\u000a\u000a
p556
S'PUSH qword ptr [0x00609008]\nJMP qword ptr [0x00609010]\n'
p557
S'ff 35 b2 7b 20 00\nff 25 b4 7b 20 00\n'
p558
S'.plt:0000000000401450\n.plt:0000000000401456\n'
p559
tp560
sS'bkm_scale'
p561
(S'\n__stdcall bkm_scale(ulong * x)\n'
p562
V\u000astrtol_error bkm_scale(ulong *x)\u000a\u000a{\u000a  ulong uVar1;\u000a  ulong uVar2;\u000a  int in_ESI;\u000a  bool bVar3;\u000a  \u000a  uVar1 = *x;\u000a  uVar2 = (long)in_ESI * uVar1;\u000a  bVar3 = SUB168((ZEXT816(0) << 0x40 | ZEXT816(0xffffffffffffffff)) / ZEXT816((ulong)(long)in_ESI),0\u000a                ) < uVar1;\u000a  if (bVar3) {\u000a    uVar2 = 0xffffffffffffffff;\u000a  }\u000a  *x = uVar2;\u000a  return -(uint)bVar3 & LONGINT_OVERFLOW;\u000a}\u000a\u000a
p563
S'MOVSXD RCX,ESI\nMOV RSI,-0x1\nMOV RAX,-0x1\nXOR EDX,EDX\nDIV RCX\nMOV RDX,qword ptr [RDI]\nIMUL RCX,RDX\nCMP RAX,RDX\nCMOVC RCX,RSI\nSBB EAX,EAX\nAND EAX,0x1\nMOV qword ptr [RDI],RCX\nRET\n'
p564
S'48 63 ce\n48 c7 c6 ff ff ff ff\n48 c7 c0 ff ff ff ff\n31 d2\n48 f7 f1\n48 8b 17\n48 0f af ca\n48 39 d0\n48 0f 42 ce\n19 c0\n83 e0 01\n48 89 0f\nc3\n'
p565
S'.text:0000000000404e10\n.text:0000000000404e13\n.text:0000000000404e1a\n.text:0000000000404e21\n.text:0000000000404e23\n.text:0000000000404e26\n.text:0000000000404e29\n.text:0000000000404e2d\n.text:0000000000404e30\n.text:0000000000404e34\n.text:0000000000404e36\n.text:0000000000404e39\n.text:0000000000404e3c\n'
p566
tp567
sS'quotearg_style_mem'
p568
(S'\n__stdcall quotearg_style_mem(char * arg, size_t argsize)\n'
p569
V\u000achar * quotearg_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_style_mem((char *)0x0,(ulong)arg & 0xffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p570
S'MOV RAX,RDX\nMOV RCX,RSI\nMOV EDX,EDI\nXOR EDI,EDI\nMOV ESI,EDX\nMOV RDX,RCX\nMOV RCX,RAX\nJMP 0x00403ac0\n'
p571
S'48 89 d0\n48 89 f1\n89 fa\n31 ff\n89 d6\n48 89 ca\n48 89 c1\neb 8c\n'
p572
S'.text:0000000000403b20\n.text:0000000000403b23\n.text:0000000000403b26\n.text:0000000000403b28\n.text:0000000000403b2a\n.text:0000000000403b2c\n.text:0000000000403b2f\n.text:0000000000403b32\n'
p573
tp574
sS'xalloc_die'
p575
(S'\n__stdcall xalloc_die()\n'
p576
V\u000avoid xalloc_die(void)\u000a\u000a{\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  \u000a  iVar1 = exit_failure;\u000a  uVar2 = dcgettext(0,"memory exhausted",5);\u000a  error((ulong)(uint)iVar1,0,0x4062a2,uVar2);\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p577
S'PUSH RBX\nMOV EBX,dword ptr [0x00609230]\nXOR EDI,EDI\nMOV ESI,0x406bbf\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nXOR ESI,ESI\nMOV EDX,0x4062a2\nXOR EAX,EAX\nMOV EDI,EBX\nCALL 0x004017a0\nCALL 0x00401490\n'
p578
S'53\n8b 1d d9 46 20 00\n31 ff\nbe bf 6b 40 00\nba 05 00 00 00\ne8 d8 c9 ff ff\n48 89 c1\n31 f6\nba a2 62 40 00\n31 c0\n89 df\ne8 25 cc ff ff\ne8 10 c9 ff ff\n'
p579
S'.text:0000000000404b50\n.text:0000000000404b51\n.text:0000000000404b57\n.text:0000000000404b59\n.text:0000000000404b5e\n.text:0000000000404b63\n.text:0000000000404b68\n.text:0000000000404b6b\n.text:0000000000404b6d\n.text:0000000000404b72\n.text:0000000000404b74\n.text:0000000000404b76\n.text:0000000000404b7b\n'
p580
tp581
sS'c_isspace'
p582
(S'\n__stdcall c_isspace()\n'
p583
V\u000a_Bool c_isspace(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 9U < 0x18) {\u000a    return (_Bool)((byte)(0x80001f >> ((byte)(in_EDI - 9U) & 0x1f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p584
S'ADD EDI,-0x9\nCMP EDI,0x17\nJA 0x00404fc5\nMOV EAX,0x80001f\nMOV ECX,EDI\nSHR EAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p585
S'83 c7 f7\n83 ff 17\n77 0d\nb8 1f 00 80 00\n89 f9\nd3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p586
S'.text:0000000000404fb0\n.text:0000000000404fb3\n.text:0000000000404fb6\n.text:0000000000404fb8\n.text:0000000000404fbd\n.text:0000000000404fbf\n.text:0000000000404fc1\n.text:0000000000404fc4\n.text:0000000000404fc5\n.text:0000000000404fc7\n'
p587
tp588
sS'quotearg_n_custom'
p589
(S'\n__stdcall quotearg_n_custom(char * left_quote, char * right_quote, char * arg)\n'
p590
V\u000achar * quotearg_n_custom(char *left_quote,char *right_quote,char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem(left_quote,right_quote,arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p591
S'MOV R8,-0x1\nJMP 0x00403c40\n'
p592
S'49 c7 c0 ff ff ff ff\neb 07\n'
p593
S'.text:0000000000403c30\n.text:0000000000403c37\n'
p594
tp595
sS'open'
p596
(S'\n__stdcall open(char * __file, int __oflag)\n'
p597
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint open(char *__file,int __oflag,...)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_open_006091c8)();\u000a  return iVar1;\u000a}\u000a\u000a
p598
S'JMP qword ptr [0x006091c8]\n'
p599
S'ff 25 02 7a 20 00\n'
p600
S'.plt:00000000004017c0\n'
p601
tp602
sS'quotearg_n_custom_mem'
p603
(S'\n__stdcall quotearg_n_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p604
V\u000achar * quotearg_n_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  quoting_style local_58;\u000a  int iStack84;\u000a  uint uStack80;\u000a  uint uStack76;\u000a  uint local_48;\u000a  uint uStack68;\u000a  uint uStack64;\u000a  uint uStack60;\u000a  uint local_38;\u000a  uint uStack52;\u000a  undefined4 uStack48;\u000a  undefined4 uStack44;\u000a  char *local_28;\u000a  \u000a  local_28 = default_quoting_options.right_quote;\u000a  local_38 = default_quoting_options.quote_these_too[6];\u000a  uStack52 = default_quoting_options.quote_these_too[7];\u000a  uStack48 = default_quoting_options.left_quote._0_4_;\u000a  uStack44 = default_quoting_options.left_quote._4_4_;\u000a  local_48 = default_quoting_options.quote_these_too[2];\u000a  uStack68 = default_quoting_options.quote_these_too[3];\u000a  uStack64 = default_quoting_options.quote_these_too[4];\u000a  uStack60 = default_quoting_options.quote_these_too[5];\u000a  local_58 = default_quoting_options.style;\u000a  iStack84 = default_quoting_options.flags;\u000a  uStack80 = default_quoting_options.quote_these_too[0];\u000a  uStack76 = default_quoting_options.quote_these_too[1];\u000a  set_custom_quoting((quoting_options *)&local_58,right_quote,arg);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)left_quote & 0xffffffff),argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p605
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,R8\nMOV RBX,RCX\nMOV EBP,EDI\nMOV RAX,qword ptr [0x00609390]\nMOV qword ptr [RSP + 0x30],RAX\nMOVUPS XMM0,xmmword ptr [0x00609380]\nMOVAPS xmmword ptr [RSP + 0x20],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609370]\nMOVAPS xmmword ptr [RSP + 0x10],XMM0\nMOVUPS XMM0,xmmword ptr [0x00609360]\nMOVAPS xmmword ptr [RSP],XMM0\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x004029a0\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403830\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p606
S'55\n41 57\n41 56\n53\n48 83 ec 38\n4d 89 c6\n48 89 cb\n89 fd\n48 8b 05 37 57 20 00\n48 89 44 24 30\n0f 10 05 1b 57 20 00\n0f 29 44 24 20\n0f 10 05 ff 56 20 00\n0f 29 44 24 10\n0f 10 05 e3 56 20 00\n0f 29 04 24\n49 89 e7\n4c 89 ff\ne8 14 ed ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 94 fb ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p607
S'.text:0000000000403c40\n.text:0000000000403c41\n.text:0000000000403c43\n.text:0000000000403c45\n.text:0000000000403c46\n.text:0000000000403c4a\n.text:0000000000403c4d\n.text:0000000000403c50\n.text:0000000000403c52\n.text:0000000000403c59\n.text:0000000000403c5e\n.text:0000000000403c65\n.text:0000000000403c6a\n.text:0000000000403c71\n.text:0000000000403c76\n.text:0000000000403c7d\n.text:0000000000403c81\n.text:0000000000403c84\n.text:0000000000403c87\n.text:0000000000403c8c\n.text:0000000000403c8e\n.text:0000000000403c91\n.text:0000000000403c94\n.text:0000000000403c97\n.text:0000000000403c9c\n.text:0000000000403ca0\n.text:0000000000403ca1\n.text:0000000000403ca3\n.text:0000000000403ca5\n.text:0000000000403ca6\n'
p608
tp609
sS'_init'
p610
(S'\n__stdcall _init(EVP_PKEY_CTX * ctx)\n'
p611
V\u000aint _init(EVP_PKEY_CTX *ctx)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (int)PTR___gmon_start___00608ff8;\u000a  if (PTR___gmon_start___00608ff8 != (undefined *)0x0) {\u000a    iVar1 = (*(code *)PTR___gmon_start___00608ff8)();\u000a  }\u000a  return iVar1;\u000a}\u000a\u000a
p612
S'SUB RSP,0x8\nMOV RAX,qword ptr [0x00608ff8]\nTEST RAX,RAX\nJZ 0x00401442\nCALL RAX\nADD RSP,0x8\nRET\n'
p613
S'48 83 ec 08\n48 8b 05 bd 7b 20 00\n48 85 c0\n74 02\nff d0\n48 83 c4 08\nc3\n'
p614
S'.init:0000000000401430\n.init:0000000000401434\n.init:000000000040143b\n.init:000000000040143e\n.init:0000000000401440\n.init:0000000000401442\n.init:0000000000401446\n'
p615
tp616
sS'__freading'
p617
(S'\n__stdcall __freading()\n'
p618
V\u000avoid __freading(void)\u000a\u000a{\u000a  (*(code *)PTR___freading_00609190)();\u000a  return;\u000a}\u000a\u000a
p619
S'JMP qword ptr [0x00609190]\n'
p620
S'ff 25 3a 7a 20 00\n'
p621
S'.plt:0000000000401750\n'
p622
tp623
sS'print_group'
p624
(S'\n__stdcall print_group()\n'
p625
V\u000a_Bool print_group(void)\u000a\u000a{\u000a  group *pgVar1;\u000a  undefined8 uVar2;\u000a  char *__s;\u000a  undefined uVar3;\u000a  char in_SIL;\u000a  __gid_t __gid;\u000a  __gid_t local_c;\u000a  \u000a  uVar3 = 1;\u000a  if (in_SIL != 0) {\u000a    local_c = __gid;\u000a    pgVar1 = getgrgid(__gid);\u000a    if (pgVar1 != (group *)0x0) {\u000a      __s = pgVar1->gr_name;\u000a      uVar3 = 1;\u000a      goto LAB_004026c3;\u000a    }\u000a    uVar3 = 0;\u000a    uVar2 = dcgettext(0,"cannot find name for group ID %lu",5);\u000a    error(0,0,uVar2,(ulong)local_c);\u000a  }\u000a  __s = gidtostr_ptr(&local_c);\u000aLAB_004026c3:\u000a  fputs_unlocked(__s,stdout);\u000a  return (_Bool)uVar3;\u000a}\u000a\u000a
p626
S'PUSH RBX\nSUB RSP,0x10\nMOV dword ptr [RSP + 0xc],EDI\nMOV BL,0x1\nTEST SIL,SIL\nJZ 0x004026b6\nCALL 0x004015b0\nTEST RAX,RAX\nJZ 0x00402691\nMOV RDI,qword ptr [RAX]\nMOV BL,0x1\nJMP 0x004026c3\nXOR EBX,EBX\nXOR EDI,EDI\nMOV ESI,0x40626b\nMOV EDX,0x5\nCALL 0x00401540\nMOV RDX,RAX\nMOV ECX,dword ptr [RSP + 0xc]\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nCALL 0x004017a0\nLEA RDI,[RSP + 0xc]\nCALL 0x004026e0\nMOV RDI,RAX\nMOV RSI,qword ptr [0x006092a8]\nCALL 0x00401640\nMOV EAX,EBX\nADD RSP,0x10\nPOP RBX\nRET\n'
p627
S'53\n48 83 ec 10\n89 7c 24 0c\nb3 01\n40 84 f6\n74 36\ne8 2b ef ff ff\n48 85 c0\n74 07\n48 8b 38\nb3 01\neb 32\n31 db\n31 ff\nbe 6b 62 40 00\nba 05 00 00 00\ne8 9c ee ff ff\n48 89 c2\n8b 4c 24 0c\n31 ff\n31 f6\n31 c0\ne8 ea f0 ff ff\n48 8d 7c 24 0c\ne8 20 00 00 00\n48 89 c7\n48 8b 35 de 6b 20 00\ne8 71 ef ff ff\n89 d8\n48 83 c4 10\n5b\nc3\n'
p628
S'.text:0000000000402670\n.text:0000000000402671\n.text:0000000000402675\n.text:0000000000402679\n.text:000000000040267b\n.text:000000000040267e\n.text:0000000000402680\n.text:0000000000402685\n.text:0000000000402688\n.text:000000000040268a\n.text:000000000040268d\n.text:000000000040268f\n.text:0000000000402691\n.text:0000000000402693\n.text:0000000000402695\n.text:000000000040269a\n.text:000000000040269f\n.text:00000000004026a4\n.text:00000000004026a7\n.text:00000000004026ab\n.text:00000000004026ad\n.text:00000000004026af\n.text:00000000004026b1\n.text:00000000004026b6\n.text:00000000004026bb\n.text:00000000004026c0\n.text:00000000004026c3\n.text:00000000004026ca\n.text:00000000004026cf\n.text:00000000004026d1\n.text:00000000004026d5\n.text:00000000004026d6\n'
p629
tp630
sS'set_quoting_flags'
p631
(S'\n__stdcall set_quoting_flags(quoting_options * o)\n'
p632
V\u000aint set_quoting_flags(quoting_options *o)\u000a\u000a{\u000a  int iVar1;\u000a  quoting_options *pqVar2;\u000a  int in_ESI;\u000a  \u000a  pqVar2 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar2 = o;\u000a  }\u000a  iVar1 = pqVar2->flags;\u000a  pqVar2->flags = in_ESI;\u000a  return iVar1;\u000a}\u000a\u000a
p633
S'TEST RDI,RDI\nMOV ECX,0x609360\nCMOVNZ RCX,RDI\nMOV EAX,dword ptr [RCX + 0x4]\nMOV dword ptr [RCX + 0x4],ESI\nRET\n'
p634
S'48 85 ff\nb9 60 93 60 00\n48 0f 45 cf\n8b 41 04\n89 71 04\nc3\n'
p635
S'.text:0000000000402980\n.text:0000000000402983\n.text:0000000000402988\n.text:000000000040298c\n.text:000000000040298f\n.text:0000000000402992\n'
p636
tp637
sS'fputs_unlocked'
p638
(S'\n__stdcall fputs_unlocked(char * __s, FILE * __stream)\n'
p639
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fputs_unlocked(char *__s,FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fputs_unlocked_00609108)();\u000a  return iVar1;\u000a}\u000a\u000a
p640
S'JMP qword ptr [0x00609108]\n'
p641
S'ff 25 c2 7a 20 00\n'
p642
S'.plt:0000000000401640\n'
p643
tp644
sS'main'
p645
(S'\n__stdcall main(char * * argv)\n'
p646
V\u000a/* WARNING: Could not reconcile some variable overlaps */\u000a\u000aint main(char **argv)\u000a\u000a{\u000a  bool bVar1;\u000a  _Bool _Var2;\u000a  int __c;\u000a  uint7 uVar7;\u000a  char *pcVar3;\u000a  uint *puVar4;\u000a  undefined8 uVar5;\u000a  char *spec;\u000a  passwd *ppVar6;\u000a  uid_t *puVar8;\u000a  uint uVar9;\u000a  uint uVar10;\u000a  char **in_RSI;\u000a  char cVar11;\u000a  byte bVar12;\u000a  __uid_t _Stack84;\u000a  undefined8 local_48;\u000a  undefined8 local_40;\u000a  undefined8 local_38;\u000a  \u000a  set_program_name(*in_RSI);\u000a  setlocale(6,"");\u000a  bindtextdomain(0x405ec8,"/usr/local/share/locale");\u000a  textdomain(0x405ec8);\u000a  atexit(close_stdout);\u000a  bVar1 = false;\u000a  cVar11 = 0;\u000a  bVar12 = 0;\u000a  local_40 = 0;\u000a  local_38 = 0;\u000aswitchD_00401c68_caseD_61:\u000a  __c = getopt_long();\u000a  if (__c < 0x47) {\u000a    if (__c == -1) {\u000a      uVar10 = (int)argv - optind;\u000a      if (uVar10 < 2) {\u000a        if (((int)argv != optind) && (just_context == 1)) {\u000a          uVar5 = dcgettext(0,"cannot print security context when user specified",5);\u000a          error(1,0,uVar5);\u000a        }\u000a        uVar9 = (uint)(byte)(bVar12 + cVar11 + (char)local_40);\u000a        if (1 < (uint)just_context + uVar9) {\u000a          uVar5 = dcgettext(0,"cannot print \u005c"only\u005c" of more than one choice",5);\u000a          error(1,0,uVar5);\u000a        }\u000a        if (uVar9 == -((uint)just_context & 1)) {\u000a          if ((bVar1) || (use_name == 1)) {\u000a            uVar5 = dcgettext(0,"cannot print only names or real IDs in default format",5);\u000a            error(1,0,uVar5);\u000a          }\u000a          if ((char)local_38 != 0) {\u000a            uVar5 = dcgettext(0,"option --zero not permitted in default format",5);\u000a            error(1,0,uVar5);\u000a          }\u000a        }\u000a        if (uVar10 == 1) {\u000a          spec = in_RSI[(long)optind];\u000a          if (((*spec == 0) ||\u000a              (pcVar3 = parse_user_spec(spec,&euid,(gid_t *)0x0,(char **)0x0,(char **)0x0),\u000a              pcVar3 != (char *)0x0)) || (ppVar6 = getpwuid(euid), ppVar6 == (passwd *)0x0)) {\u000a            ppVar6 = (passwd *)0x0;\u000a            uVar5 = dcgettext(0,"%s: no such user",5);\u000a            spec = quote(spec);\u000a            error(1,0,uVar5,spec);\u000a          }\u000a          spec = xstrdup(ppVar6->pw_name);\u000a          euid = ppVar6->pw_uid;\u000a          rgid = ppVar6->pw_gid;\u000a          ruid = euid;\u000a          egid = rgid;\u000ajoined_r0x00401fbe:\u000a          if (cVar11 == 0) {\u000ajoined_r0x00401f4f:\u000a            if (bVar12 == 0) {\u000a              if ((char)local_40 == 0) {\u000a                if (just_context == 1) {\u000a                  fputs_unlocked((char *)0x0,(FILE *)stdout);\u000a                }\u000a                else {\u000a                  print_full_info(spec);\u000a                }\u000a              }\u000a              else {\u000a                _Var2 = print_group_list(spec);\u000a                if (_Var2 == false) {\u000a                  ok = 1;\u000a                }\u000a              }\u000a            }\u000a            else {\u000a              _Var2 = print_group();\u000a              if (_Var2 == false) {\u000a                ok = 1;\u000a              }\u000a            }\u000a            goto LAB_0040202b;\u000a          }\u000a        }\u000a        else {\u000a          if (cVar11 == 0) {\u000a            if (((byte)((byte)local_40 | bVar12) != 0) || (just_context != 0)) {\u000aLAB_00401eca:\u000a              if (bVar12 == 0) {\u000a                if (((char)local_40 != 0) || (just_context == 0)) goto LAB_00401ee4;\u000a                goto LAB_00401f36;\u000a              }\u000aLAB_00401f5a:\u000a              puVar4 = (uint *)__errno_location();\u000a              *puVar4 = 0;\u000a              egid = getegid();\u000a              if ((egid == 0xffffffff) && (uVar10 = *puVar4, uVar10 != 0)) {\u000a                uVar5 = dcgettext(0,"cannot get effective GID",5);\u000a                error(1,(ulong)uVar10,uVar5,uVar5);\u000a              }\u000a              *puVar4 = 0;\u000a              rgid = getgid();\u000a              if (rgid == 0xffffffff) {\u000a                uVar10 = *puVar4;\u000a                spec = (char *)0x0;\u000a                if (uVar10 != 0) {\u000a                  uVar5 = dcgettext(0,"cannot get real GID",5);\u000a                  error(1,(ulong)uVar10,uVar5,uVar5);\u000a                }\u000a              }\u000a              else {\u000a                spec = (char *)0x0;\u000a              }\u000a              goto joined_r0x00401fbe;\u000a            }\u000aLAB_00401e72:\u000a            puVar4 = (uint *)__errno_location();\u000a            *puVar4 = 0;\u000a            euid = geteuid();\u000a            if ((euid == 0xffffffff) && (uVar10 = *puVar4, uVar10 != 0)) {\u000a              uVar5 = dcgettext(0,"cannot get effective UID",5);\u000a              error(1,(ulong)uVar10,uVar5,uVar5);\u000a            }\u000a            if (cVar11 == 0) goto LAB_00401eca;\u000a            if (bVar1) goto LAB_00401ee4;\u000a          }\u000a          else {\u000a            if (!bVar1) goto LAB_00401e72;\u000aLAB_00401ee4:\u000a            puVar4 = (uint *)__errno_location();\u000a            *puVar4 = 0;\u000a            ruid = getuid();\u000a            if ((ruid == 0xffffffff) && (uVar10 = *puVar4, uVar10 != 0)) {\u000a              uVar5 = dcgettext(0,"cannot get real UID",5);\u000a              error(1,(ulong)uVar10,uVar5,uVar5);\u000a            }\u000a            if (cVar11 == 0) {\u000aLAB_00401f36:\u000a              if (((byte)((byte)local_40 | bVar12) != 0) || (just_context == 0)) goto LAB_00401f5a;\u000a              spec = (char *)0x0;\u000a              goto joined_r0x00401f4f;\u000a            }\u000a          }\u000a        }\u000a        puVar8 = &euid;\u000a        if (bVar1) {\u000a          puVar8 = &ruid;\u000a        }\u000a        print_user((ulong)*puVar8);\u000aLAB_0040202b:\u000a        __c = 10;\u000a        if ((char)local_38 != 0) {\u000a          __c = 0;\u000a        }\u000a        putchar_unlocked(__c);\u000a        return (int)(uint)ok;\u000a      }\u000a      goto LAB_00402155;\u000a    }\u000a    if (__c != -0x83) {\u000a      if (__c != -0x82) goto switchD_00401c68_caseD_48;\u000a      usage(0);\u000a    }\u000a    local_48 = 0;\u000a    version_etc(stdout,"id","GNU coreutils",Version,"Arnold Robbins","David MacKenzie");\u000a                    /* WARNING: Subroutine does not return */\u000a    exit(0);\u000a  }\u000a  uVar7 = (uint7)(uint3)((uint)(__c + -0x47) >> 8);\u000a  switch(__c) {\u000a  case 0x47:\u000a    local_40 = CONCAT71(uVar7,1);\u000a    goto switchD_00401c68_caseD_61;\u000a  default:\u000a    break;\u000a  case 0x5a:\u000a    uVar5 = dcgettext(0,"--context (-Z) works only on an SELinux-enabled kernel",5);\u000a    error(1,0,uVar5,uVar5);\u000a    just_context = 1;\u000a  case 0x61:\u000a    goto switchD_00401c68_caseD_61;\u000a  case 0x67:\u000a    bVar12 = 1;\u000a    goto switchD_00401c68_caseD_61;\u000a  case 0x6e:\u000a    use_name = 1;\u000a    goto switchD_00401c68_caseD_61;\u000a  case 0x72:\u000a    bVar1 = true;\u000a    goto switchD_00401c68_caseD_61;\u000a  case 0x75:\u000a    cVar11 = 1;\u000a    goto switchD_00401c68_caseD_61;\u000a  case 0x7a:\u000a    local_38 = CONCAT71(uVar7,1);\u000a    goto switchD_00401c68_caseD_61;\u000a  }\u000aswitchD_00401c68_caseD_48:\u000a  usage(1);\u000aLAB_00402155:\u000a  uVar5 = dcgettext(0,"extra operand %s",5);\u000a  spec = quote(in_RSI[(long)optind + 1]);\u000a  error(0,0,uVar5,spec);\u000a  _Stack84 = 1;\u000a  usage();\u000a  if (use_name == 1) {\u000a    ppVar6 = getpwuid(_Stack84);\u000a    if (ppVar6 != (passwd *)0x0) {\u000a      spec = ppVar6->pw_name;\u000a      goto LAB_00402204;\u000a    }\u000a    uVar5 = dcgettext(0,"cannot find name for user ID %s",5);\u000a    spec = uidtostr_ptr(&_Stack84);\u000a    error(0,0,uVar5,spec);\u000a    ok = 1;\u000a  }\u000a  spec = uidtostr_ptr(&_Stack84);\u000aLAB_00402204:\u000a  __c = fputs_unlocked(spec,(FILE *)stdout);\u000a  return __c;\u000a}\u000a\u000a
p647
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RSI\nMOV EBP,EDI\nMOV RDI,qword ptr [R14]\nCALL 0x00402830\nMOV EDI,0x6\nMOV ESI,0x405bb5\nCALL 0x00401780\nMOV EDI,0x405ec8\nMOV ESI,0x405e6c\nCALL 0x00401530\nMOV EDI,0x405ec8\nCALL 0x00401500\nMOV EDI,0x402710\nCALL 0x00405790\nXOR R12D,R12D\nXOR R13D,R13D\nXOR R15D,R15D\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR EAX,EAX\nJMP 0x00401c32\nMOV AL,0x1\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x00401c40\nMOV AL,0x1\nMOV qword ptr [RSP + 0x8],RAX\nMOV EDX,0x405e84\nMOV ECX,0x405980\nXOR R8D,R8D\nMOV EDI,EBP\nMOV RSI,R14\nCALL 0x00401580\nCMP EAX,0x46\nJLE 0x00401cb5\nADD EAX,-0x47\nCMP EAX,0x33\nJA 0x0040214b\nJMP qword ptr [0x4057e0 + RAX*0x8]\nXOR EDI,EDI\nMOV ESI,0x405e8d\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004017a0\nMOV byte ptr [0x006092d0],0x1\nJMP 0x00401c40\nMOV R15B,0x1\nJMP 0x00401c40\nMOV byte ptr [0x006092d1],0x1\nJMP 0x00401c40\nMOV R12B,0x1\nJMP 0x00401c40\nMOV R13B,0x1\nJMP 0x00401c40\nCMP EAX,-0x1\nJNZ 0x004020fc\nSUB EBP,dword ptr [0x006092b0]\nCMP EBP,0x2\nJNC 0x00402155\nTEST EBP,EBP\nJZ 0x00401cff\nCMP byte ptr [0x006092d0],0x1\nJNZ 0x00401cff\nXOR EDI,EDI\nMOV ESI,0x405f02\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004017a0\nMOV EAX,R15D\nADD AL,R13B\nADD AL,byte ptr [RSP + 0x8]\nMOVZX EBX,AL\nMOVZX EAX,byte ptr [0x006092d0]\nADD EAX,EBX\nCMP EAX,0x2\nJC 0x00401d3f\nXOR EDI,EDI\nMOV ESI,0x405f34\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004017a0\nMOVZX EAX,byte ptr [0x006092d0]\nAND EAX,0x1\nNEG EAX\nCMP EBX,EAX\nJNZ 0x00401dae\nTEST R12B,R12B\nJNZ 0x00401d5d\nCMP byte ptr [0x006092d1],0x1\nJNZ 0x00401d82\nXOR EDI,EDI\nMOV ESI,0x405f60\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004017a0\nCMP byte ptr [RSP + 0x10],0x0\nJZ 0x00401dae\nXOR EDI,EDI\nMOV ESI,0x405f96\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RCX\nCALL 0x004017a0\nCMP EBP,0x1\nJNZ 0x00401e4e\nMOVSXD RAX,dword ptr [0x006092b0]\nMOV RBX,qword ptr [R14 + RAX*0x8]\nCMP byte ptr [RBX],0x0\nJZ 0x00401de4\nMOV ESI,0x6092d4\nXOR EDX,EDX\nXOR ECX,ECX\nXOR R8D,R8D\nMOV RDI,RBX\nCALL 0x00404130\nTEST RAX,RAX\nJZ 0x00401fc5\nXOR EBP,EBP\nXOR EDI,EDI\nMOV ESI,0x405fd4\nMOV EDX,0x5\nCALL 0x00401540\nMOV R14,RAX\nMOV RDI,RBX\nCALL 0x00403d20\nMOV RCX,RAX\nMOV EDI,0x1\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,R14\nCALL 0x004017a0\nMOV RDI,qword ptr [RBP]\nCALL 0x00404b30\nMOV RBX,RAX\nMOV EAX,dword ptr [RBP + 0x10]\nMOV dword ptr [0x006092d4],EAX\nMOV dword ptr [0x006092d8],EAX\nMOV EAX,dword ptr [RBP + 0x14]\nMOV dword ptr [0x006092dc],EAX\nMOV dword ptr [0x006092e0],EAX\nTEST R13B,R13B\nJNZ 0x00402013\nJMP 0x00402055\nTEST R13B,R13B\nJZ 0x00401e5e\nTEST R12B,R12B\nJNZ 0x00401ee4\nJMP 0x00401e72\nMOV RAX,qword ptr [RSP + 0x8]\nOR AL,R15B\nJNZ 0x00401eca\nMOV AL,byte ptr [0x006092d0]\nTEST AL,AL\nJNZ 0x00401eca\nCALL 0x004014a0\nMOV RBX,RAX\nMOV dword ptr [RBX],0x0\nCALL 0x00401600\nMOV dword ptr [0x006092d4],EAX\nCMP EAX,-0x1\nJNZ 0x00401ebb\nMOV EBX,dword ptr [RBX]\nTEST EBX,EBX\nJZ 0x00401ebb\nXOR EDI,EDI\nMOV ESI,0x405fe5\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x004017a0\nTEST R13B,R13B\nJZ 0x00401eca\nTEST R12B,R12B\nJNZ 0x00401ee4\nJMP 0x00402013\nTEST R15B,R15B\nJNZ 0x00401f5a\nCMP byte ptr [RSP + 0x8],0x0\nJNZ 0x00401ee4\nMOV AL,byte ptr [0x006092d0]\nTEST AL,AL\nJNZ 0x00401f36\nCALL 0x004014a0\nMOV RBX,RAX\nMOV dword ptr [RBX],0x0\nCALL 0x00401570\nMOV dword ptr [0x006092d8],EAX\nCMP EAX,-0x1\nJNZ 0x00401f2d\nMOV EBX,dword ptr [RBX]\nTEST EBX,EBX\nJZ 0x00401f2d\nXOR EDI,EDI\nMOV ESI,0x405ffe\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x004017a0\nTEST R13B,R13B\nJNZ 0x00402013\nMOV RAX,qword ptr [RSP + 0x8]\nOR AL,R15B\nJNZ 0x00401f5a\nMOV AL,byte ptr [0x006092d0]\nTEST AL,AL\nJZ 0x00401f5a\nXOR EBX,EBX\nTEST R15B,R15B\nJNZ 0x0040205a\nJMP 0x00402086\nCALL 0x004014a0\nMOV RBX,RAX\nMOV dword ptr [RBX],0x0\nCALL 0x00401740\nMOV dword ptr [0x006092dc],EAX\nCMP EAX,-0x1\nJNZ 0x00401fa3\nMOV EBP,dword ptr [RBX]\nTEST EBP,EBP\nJZ 0x00401fa3\nXOR EDI,EDI\nMOV ESI,0x406012\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x004017a0\nMOV dword ptr [RBX],0x0\nCALL 0x004016d0\nMOV dword ptr [0x006092e0],EAX\nCMP EAX,-0x1\nJZ 0x00401fe1\nXOR EBX,EBX\nTEST R13B,R13B\nJNZ 0x00402013\nJMP 0x00402055\nMOV EDI,dword ptr [0x006092d4]\nCALL 0x00401520\nMOV RBP,RAX\nTEST RBP,RBP\nJNZ 0x00401e16\nJMP 0x00401de4\nMOV EBP,dword ptr [RBX]\nXOR EBX,EBX\nTEST EBP,EBP\nJZ 0x0040200e\nXOR EDI,EDI\nMOV ESI,0x40602b\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x004017a0\nTEST R13B,R13B\nJZ 0x00402055\nTEST R12B,R12B\nMOV EAX,0x6092d8\nMOV ECX,0x6092d4\nCMOVNZ RCX,RAX\nMOV EDI,dword ptr [RCX]\nCALL 0x004021a0\nXOR EAX,EAX\nCMP byte ptr [RSP + 0x10],0x0\nMOV EDI,0xa\nCMOVNZ EDI,EAX\nCALL 0x004016b0\nMOVZX EAX,byte ptr [0x006092e4]\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nTEST R15B,R15B\nJZ 0x00402086\nTEST R12B,R12B\nMOV EAX,0x6092e0\nMOV ECX,0x6092dc\nCMOVNZ RCX,RAX\nMOV EDI,dword ptr [RCX]\nMOVZX ESI,byte ptr [0x006092d1]\nCALL 0x00402670\nTEST AL,AL\nJNZ 0x0040202b\nMOV byte ptr [0x006092e4],0x1\nJMP 0x0040202b\nCMP byte ptr [RSP + 0x8],0x0\nJZ 0x004020d3\nMOV ESI,dword ptr [0x006092d8]\nMOV EDX,dword ptr [0x006092e0]\nMOV ECX,dword ptr [0x006092dc]\nXOR R9D,R9D\nCMP byte ptr [RSP + 0x10],0x0\nSETZ R9B\nMOVZX R8D,byte ptr [0x006092d1]\nSHL R9D,0x5\nMOV RDI,RBX\nCALL 0x00402500\nTEST AL,AL\nJNZ 0x0040202b\nMOV byte ptr [0x006092e4],0x1\nJMP 0x0040202b\nCMP byte ptr [0x006092d0],0x1\nJNZ 0x004020ef\nMOV RSI,qword ptr [0x006092a8]\nXOR EDI,EDI\nCALL 0x00401640\nJMP 0x0040202b\nMOV RDI,RBX\nCALL 0x00402220\nJMP 0x0040202b\nCMP EAX,0xffffff7d\nJZ 0x00402111\nCMP EAX,0xffffff7e\nJNZ 0x0040214b\nXOR EDI,EDI\nCALL 0x00401960\nMOV RDI,qword ptr [0x006092a8]\nMOV RCX,qword ptr [0x00609228]\nMOV qword ptr [RSP],0x0\nMOV ESI,0x405e69\nMOV EDX,0x405ec4\nMOV R8D,0x405ed2\nMOV R9D,0x405ee1\nXOR EAX,EAX\nCALL 0x00404890\nXOR EDI,EDI\nCALL 0x00401800\nMOV EDI,0x1\nCALL 0x00401960\nXOR EDI,EDI\nMOV ESI,0x405ef1\nMOV EDX,0x5\nCALL 0x00401540\nMOV RBP,RAX\nMOVSXD RAX,dword ptr [0x006092b0]\nMOV RDI,qword ptr [R14 + RAX*0x8 + 0x8]\nCALL 0x00403d20\nMOV RCX,RAX\nXOR EDI,EDI\nXOR ESI,ESI\nXOR EAX,EAX\nMOV RDX,RBP\nCALL 0x004017a0\nMOV EDI,0x1\nCALL 0x00401960\nNOP dword ptr CS:[RAX + RAX*0x1]\n'
p648
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 f6\n89 fd\n49 8b 3e\ne8 55 0c 00 00\nbf 06 00 00 00\nbe b5 5b 40 00\ne8 96 fb ff ff\nbf c8 5e 40 00\nbe 6c 5e 40 00\ne8 37 f9 ff ff\nbf c8 5e 40 00\ne8 fd f8 ff ff\nbf 10 27 40 00\ne8 83 3b 00 00\n45 31 e4\n45 31 ed\n45 31 ff\n31 c0\n48 89 44 24 08\n31 c0\neb 11\nb0 01\n48 89 44 24 10\neb 07\nb0 01\n48 89 44 24 08\nba 84 5e 40 00\nb9 80 59 40 00\n45 31 c0\n89 ef\n4c 89 f6\ne8 29 f9 ff ff\n83 f8 46\n7e 59\n83 c0 b9\n83 f8 33\n0f 87 e3 04 00 00\nff 24 c5 e0 57 40 00\n31 ff\nbe 8d 5e 40 00\nba 05 00 00 00\ne8 c0 f8 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 0c fb ff ff\nc6 05 35 76 20 00 01\neb a3\n41 b7 01\neb 9e\nc6 05 28 76 20 00 01\neb 95\n41 b4 01\neb 90\n41 b5 01\neb 8b\n83 f8 ff\n0f 85 3e 04 00 00\n2b 2d ec 75 20 00\n83 fd 02\n0f 83 88 04 00 00\n85 ed\n74 2e\n80 3d f8 75 20 00 01\n75 25\n31 ff\nbe 02 5f 40 00\nba 05 00 00 00\ne8 55 f8 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 a1 fa ff ff\n44 89 f8\n44 00 e8\n02 44 24 08\n0f b6 d8\n0f b6 05 bd 75 20 00\n01 d8\n83 f8 02\n72 25\n31 ff\nbe 34 5f 40 00\nba 05 00 00 00\ne8 15 f8 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 61 fa ff ff\n0f b6 05 8a 75 20 00\n83 e0 01\nf7 d8\n39 c3\n75 5f\n45 84 e4\n75 09\n80 3d 76 75 20 00 01\n75 25\n31 ff\nbe 60 5f 40 00\nba 05 00 00 00\ne8 d2 f7 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 1e fa ff ff\n80 7c 24 10 00\n74 25\n31 ff\nbe 96 5f 40 00\nba 05 00 00 00\ne8 a6 f7 ff ff\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n48 89 ca\ne8 f2 f9 ff ff\n83 fd 01\n0f 85 97 00 00 00\n48 63 05 f2 74 20 00\n49 8b 1c c6\n80 3b 00\n74 1d\nbe d4 92 60 00\n31 d2\n31 c9\n45 31 c0\n48 89 df\ne8 55 23 00 00\n48 85 c0\n0f 84 e1 01 00 00\n31 ed\n31 ff\nbe d4 5f 40 00\nba 05 00 00 00\ne8 49 f7 ff ff\n49 89 c6\n48 89 df\ne8 1e 1f 00 00\n48 89 c1\nbf 01 00 00 00\n31 f6\n31 c0\n4c 89 f2\ne8 8a f9 ff ff\n48 8b 7d 00\ne8 11 2d 00 00\n48 89 c3\n8b 45 10\n89 05 a9 74 20 00\n89 05 a7 74 20 00\n8b 45 14\n89 05 a2 74 20 00\n89 05 a0 74 20 00\n45 84 ed\n0f 85 ca 01 00 00\ne9 07 02 00 00\n45 84 ed\n74 0b\n45 84 e4\n0f 85 88 00 00 00\neb 14\n48 8b 44 24 08\n44 08 f8\n75 62\n8a 05 62 74 20 00\n84 c0\n75 58\ne8 29 f6 ff ff\n48 89 c3\nc7 03 00 00 00 00\ne8 7b f7 ff ff\n89 05 49 74 20 00\n83 f8 ff\n75 2b\n8b 1b\n85 db\n74 25\n31 ff\nbe e5 5f 40 00\nba 05 00 00 00\ne8 99 f6 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 e5 f8 ff ff\n45 84 ed\n74 0a\n45 84 e4\n75 1f\ne9 49 01 00 00\n45 84 ff\n0f 85 87 00 00 00\n80 7c 24 08 00\n75 0a\n8a 05 f0 73 20 00\n84 c0\n75 52\ne8 b7 f5 ff ff\n48 89 c3\nc7 03 00 00 00 00\ne8 79 f6 ff ff\n89 05 db 73 20 00\n83 f8 ff\n75 2b\n8b 1b\n85 db\n74 25\n31 ff\nbe fe 5f 40 00\nba 05 00 00 00\ne8 27 f6 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 de\n48 89 ca\ne8 73 f8 ff ff\n45 84 ed\n0f 85 dd 00 00 00\n48 8b 44 24 08\n44 08 f8\n75 1a\n8a 05 8a 73 20 00\n84 c0\n74 10\n31 db\n45 84 ff\n0f 85 05 01 00 00\ne9 2c 01 00 00\ne8 41 f5 ff ff\n48 89 c3\nc7 03 00 00 00 00\ne8 d3 f7 ff ff\n89 05 69 73 20 00\n83 f8 ff\n75 2b\n8b 2b\n85 ed\n74 25\n31 ff\nbe 12 60 40 00\nba 05 00 00 00\ne8 b1 f5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 ca\ne8 fd f7 ff ff\nc7 03 00 00 00 00\ne8 22 f7 ff ff\n89 05 2c 73 20 00\n83 f8 ff\n74 28\n31 db\n45 84 ed\n75 53\ne9 90 00 00 00\n8b 3d 09 73 20 00\ne8 50 f5 ff ff\n48 89 c5\n48 85 ed\n0f 85 3a fe ff ff\ne9 03 fe ff ff\n8b 2b\n31 db\n85 ed\n74 25\n31 ff\nbe 2b 60 40 00\nba 05 00 00 00\ne8 46 f5 ff ff\n48 89 c1\nbf 01 00 00 00\n31 c0\n89 ee\n48 89 ca\ne8 92 f7 ff ff\n45 84 ed\n74 42\n45 84 e4\nb8 d8 92 60 00\nb9 d4 92 60 00\n48 0f 45 c8\n8b 39\ne8 75 01 00 00\n31 c0\n80 7c 24 10 00\nbf 0a 00 00 00\n0f 45 f8\ne8 71 f6 ff ff\n0f b6 05 9e 72 20 00\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n45 84 ff\n74 2c\n45 84 e4\nb8 e0 92 60 00\nb9 dc 92 60 00\n48 0f 45 c8\n8b 39\n0f b6 35 5d 72 20 00\ne8 f7 05 00 00\n84 c0\n75 ae\nc6 05 60 72 20 00 01\neb a5\n80 7c 24 08 00\n74 46\n8b 35 45 72 20 00\n8b 15 47 72 20 00\n8b 0d 3d 72 20 00\n45 31 c9\n80 7c 24 10 00\n41 0f 94 c1\n44 0f b6 05 1e 72 20 00\n41 c1 e1 05\n48 89 df\ne8 41 04 00 00\n84 c0\n0f 85 64 ff ff ff\nc6 05 16 72 20 00 01\ne9 58 ff ff ff\n80 3d f6 71 20 00 01\n75 13\n48 8b 35 c5 71 20 00\n31 ff\ne8 56 f5 ff ff\ne9 3c ff ff ff\n48 89 df\ne8 29 01 00 00\ne9 2f ff ff ff\n3d 7d ff ff ff\n74 0e\n3d 7e ff ff ff\n75 41\n31 ff\ne8 4f f8 ff ff\n48 8b 3d 90 71 20 00\n48 8b 0d 09 71 20 00\n48 c7 04 24 00 00 00 00\nbe 69 5e 40 00\nba c4 5e 40 00\n41 b8 d2 5e 40 00\n41 b9 e1 5e 40 00\n31 c0\ne8 4c 27 00 00\n31 ff\ne8 b5 f6 ff ff\nbf 01 00 00 00\ne8 0b f8 ff ff\n31 ff\nbe f1 5e 40 00\nba 05 00 00 00\ne8 da f3 ff ff\n48 89 c5\n48 63 05 40 71 20 00\n49 8b 7c c6 08\ne8 a6 1b 00 00\n48 89 c1\n31 ff\n31 f6\n31 c0\n48 89 ea\ne8 15 f6 ff ff\nbf 01 00 00 00\ne8 cb f7 ff ff\n66 66 2e 0f 1f 84 00 00 00 00 00\n'
p649
S'.text:0000000000401bc0\n.text:0000000000401bc1\n.text:0000000000401bc3\n.text:0000000000401bc5\n.text:0000000000401bc7\n.text:0000000000401bc9\n.text:0000000000401bca\n.text:0000000000401bce\n.text:0000000000401bd1\n.text:0000000000401bd3\n.text:0000000000401bd6\n.text:0000000000401bdb\n.text:0000000000401be0\n.text:0000000000401be5\n.text:0000000000401bea\n.text:0000000000401bef\n.text:0000000000401bf4\n.text:0000000000401bf9\n.text:0000000000401bfe\n.text:0000000000401c03\n.text:0000000000401c08\n.text:0000000000401c0d\n.text:0000000000401c10\n.text:0000000000401c13\n.text:0000000000401c16\n.text:0000000000401c18\n.text:0000000000401c1d\n.text:0000000000401c1f\n.text:0000000000401c30\n.text:0000000000401c32\n.text:0000000000401c37\n.text:0000000000401c39\n.text:0000000000401c3b\n.text:0000000000401c40\n.text:0000000000401c45\n.text:0000000000401c4a\n.text:0000000000401c4d\n.text:0000000000401c4f\n.text:0000000000401c52\n.text:0000000000401c57\n.text:0000000000401c5a\n.text:0000000000401c5c\n.text:0000000000401c5f\n.text:0000000000401c62\n.text:0000000000401c68\n.text:0000000000401c6f\n.text:0000000000401c71\n.text:0000000000401c76\n.text:0000000000401c7b\n.text:0000000000401c80\n.text:0000000000401c83\n.text:0000000000401c88\n.text:0000000000401c8a\n.text:0000000000401c8c\n.text:0000000000401c8f\n.text:0000000000401c94\n.text:0000000000401c9b\n.text:0000000000401c9d\n.text:0000000000401ca0\n.text:0000000000401ca2\n.text:0000000000401ca9\n.text:0000000000401cab\n.text:0000000000401cae\n.text:0000000000401cb0\n.text:0000000000401cb3\n.text:0000000000401cb5\n.text:0000000000401cb8\n.text:0000000000401cbe\n.text:0000000000401cc4\n.text:0000000000401cc7\n.text:0000000000401ccd\n.text:0000000000401ccf\n.text:0000000000401cd1\n.text:0000000000401cd8\n.text:0000000000401cda\n.text:0000000000401cdc\n.text:0000000000401ce1\n.text:0000000000401ce6\n.text:0000000000401ceb\n.text:0000000000401cee\n.text:0000000000401cf3\n.text:0000000000401cf5\n.text:0000000000401cf7\n.text:0000000000401cfa\n.text:0000000000401cff\n.text:0000000000401d02\n.text:0000000000401d05\n.text:0000000000401d09\n.text:0000000000401d0c\n.text:0000000000401d13\n.text:0000000000401d15\n.text:0000000000401d18\n.text:0000000000401d1a\n.text:0000000000401d1c\n.text:0000000000401d21\n.text:0000000000401d26\n.text:0000000000401d2b\n.text:0000000000401d2e\n.text:0000000000401d33\n.text:0000000000401d35\n.text:0000000000401d37\n.text:0000000000401d3a\n.text:0000000000401d3f\n.text:0000000000401d46\n.text:0000000000401d49\n.text:0000000000401d4b\n.text:0000000000401d4d\n.text:0000000000401d4f\n.text:0000000000401d52\n.text:0000000000401d54\n.text:0000000000401d5b\n.text:0000000000401d5d\n.text:0000000000401d5f\n.text:0000000000401d64\n.text:0000000000401d69\n.text:0000000000401d6e\n.text:0000000000401d71\n.text:0000000000401d76\n.text:0000000000401d78\n.text:0000000000401d7a\n.text:0000000000401d7d\n.text:0000000000401d82\n.text:0000000000401d87\n.text:0000000000401d89\n.text:0000000000401d8b\n.text:0000000000401d90\n.text:0000000000401d95\n.text:0000000000401d9a\n.text:0000000000401d9d\n.text:0000000000401da2\n.text:0000000000401da4\n.text:0000000000401da6\n.text:0000000000401da9\n.text:0000000000401dae\n.text:0000000000401db1\n.text:0000000000401db7\n.text:0000000000401dbe\n.text:0000000000401dc2\n.text:0000000000401dc5\n.text:0000000000401dc7\n.text:0000000000401dcc\n.text:0000000000401dce\n.text:0000000000401dd0\n.text:0000000000401dd3\n.text:0000000000401dd6\n.text:0000000000401ddb\n.text:0000000000401dde\n.text:0000000000401de4\n.text:0000000000401de6\n.text:0000000000401de8\n.text:0000000000401ded\n.text:0000000000401df2\n.text:0000000000401df7\n.text:0000000000401dfa\n.text:0000000000401dfd\n.text:0000000000401e02\n.text:0000000000401e05\n.text:0000000000401e0a\n.text:0000000000401e0c\n.text:0000000000401e0e\n.text:0000000000401e11\n.text:0000000000401e16\n.text:0000000000401e1a\n.text:0000000000401e1f\n.text:0000000000401e22\n.text:0000000000401e25\n.text:0000000000401e2b\n.text:0000000000401e31\n.text:0000000000401e34\n.text:0000000000401e3a\n.text:0000000000401e40\n.text:0000000000401e43\n.text:0000000000401e49\n.text:0000000000401e4e\n.text:0000000000401e51\n.text:0000000000401e53\n.text:0000000000401e56\n.text:0000000000401e5c\n.text:0000000000401e5e\n.text:0000000000401e63\n.text:0000000000401e66\n.text:0000000000401e68\n.text:0000000000401e6e\n.text:0000000000401e70\n.text:0000000000401e72\n.text:0000000000401e77\n.text:0000000000401e7a\n.text:0000000000401e80\n.text:0000000000401e85\n.text:0000000000401e8b\n.text:0000000000401e8e\n.text:0000000000401e90\n.text:0000000000401e92\n.text:0000000000401e94\n.text:0000000000401e96\n.text:0000000000401e98\n.text:0000000000401e9d\n.text:0000000000401ea2\n.text:0000000000401ea7\n.text:0000000000401eaa\n.text:0000000000401eaf\n.text:0000000000401eb1\n.text:0000000000401eb3\n.text:0000000000401eb6\n.text:0000000000401ebb\n.text:0000000000401ebe\n.text:0000000000401ec0\n.text:0000000000401ec3\n.text:0000000000401ec5\n.text:0000000000401eca\n.text:0000000000401ecd\n.text:0000000000401ed3\n.text:0000000000401ed8\n.text:0000000000401eda\n.text:0000000000401ee0\n.text:0000000000401ee2\n.text:0000000000401ee4\n.text:0000000000401ee9\n.text:0000000000401eec\n.text:0000000000401ef2\n.text:0000000000401ef7\n.text:0000000000401efd\n.text:0000000000401f00\n.text:0000000000401f02\n.text:0000000000401f04\n.text:0000000000401f06\n.text:0000000000401f08\n.text:0000000000401f0a\n.text:0000000000401f0f\n.text:0000000000401f14\n.text:0000000000401f19\n.text:0000000000401f1c\n.text:0000000000401f21\n.text:0000000000401f23\n.text:0000000000401f25\n.text:0000000000401f28\n.text:0000000000401f2d\n.text:0000000000401f30\n.text:0000000000401f36\n.text:0000000000401f3b\n.text:0000000000401f3e\n.text:0000000000401f40\n.text:0000000000401f46\n.text:0000000000401f48\n.text:0000000000401f4a\n.text:0000000000401f4c\n.text:0000000000401f4f\n.text:0000000000401f55\n.text:0000000000401f5a\n.text:0000000000401f5f\n.text:0000000000401f62\n.text:0000000000401f68\n.text:0000000000401f6d\n.text:0000000000401f73\n.text:0000000000401f76\n.text:0000000000401f78\n.text:0000000000401f7a\n.text:0000000000401f7c\n.text:0000000000401f7e\n.text:0000000000401f80\n.text:0000000000401f85\n.text:0000000000401f8a\n.text:0000000000401f8f\n.text:0000000000401f92\n.text:0000000000401f97\n.text:0000000000401f99\n.text:0000000000401f9b\n.text:0000000000401f9e\n.text:0000000000401fa3\n.text:0000000000401fa9\n.text:0000000000401fae\n.text:0000000000401fb4\n.text:0000000000401fb7\n.text:0000000000401fb9\n.text:0000000000401fbb\n.text:0000000000401fbe\n.text:0000000000401fc0\n.text:0000000000401fc5\n.text:0000000000401fcb\n.text:0000000000401fd0\n.text:0000000000401fd3\n.text:0000000000401fd6\n.text:0000000000401fdc\n.text:0000000000401fe1\n.text:0000000000401fe3\n.text:0000000000401fe5\n.text:0000000000401fe7\n.text:0000000000401fe9\n.text:0000000000401feb\n.text:0000000000401ff0\n.text:0000000000401ff5\n.text:0000000000401ffa\n.text:0000000000401ffd\n.text:0000000000402002\n.text:0000000000402004\n.text:0000000000402006\n.text:0000000000402009\n.text:000000000040200e\n.text:0000000000402011\n.text:0000000000402013\n.text:0000000000402016\n.text:000000000040201b\n.text:0000000000402020\n.text:0000000000402024\n.text:0000000000402026\n.text:000000000040202b\n.text:000000000040202d\n.text:0000000000402032\n.text:0000000000402037\n.text:000000000040203a\n.text:000000000040203f\n.text:0000000000402046\n.text:000000000040204a\n.text:000000000040204b\n.text:000000000040204d\n.text:000000000040204f\n.text:0000000000402051\n.text:0000000000402053\n.text:0000000000402054\n.text:0000000000402055\n.text:0000000000402058\n.text:000000000040205a\n.text:000000000040205d\n.text:0000000000402062\n.text:0000000000402067\n.text:000000000040206b\n.text:000000000040206d\n.text:0000000000402074\n.text:0000000000402079\n.text:000000000040207b\n.text:000000000040207d\n.text:0000000000402084\n.text:0000000000402086\n.text:000000000040208b\n.text:000000000040208d\n.text:0000000000402093\n.text:0000000000402099\n.text:000000000040209f\n.text:00000000004020a2\n.text:00000000004020a7\n.text:00000000004020ab\n.text:00000000004020b3\n.text:00000000004020b7\n.text:00000000004020ba\n.text:00000000004020bf\n.text:00000000004020c1\n.text:00000000004020c7\n.text:00000000004020ce\n.text:00000000004020d3\n.text:00000000004020da\n.text:00000000004020dc\n.text:00000000004020e3\n.text:00000000004020e5\n.text:00000000004020ea\n.text:00000000004020ef\n.text:00000000004020f2\n.text:00000000004020f7\n.text:00000000004020fc\n.text:0000000000402101\n.text:0000000000402103\n.text:0000000000402108\n.text:000000000040210a\n.text:000000000040210c\n.text:0000000000402111\n.text:0000000000402118\n.text:000000000040211f\n.text:0000000000402127\n.text:000000000040212c\n.text:0000000000402131\n.text:0000000000402137\n.text:000000000040213d\n.text:000000000040213f\n.text:0000000000402144\n.text:0000000000402146\n.text:000000000040214b\n.text:0000000000402150\n.text:0000000000402155\n.text:0000000000402157\n.text:000000000040215c\n.text:0000000000402161\n.text:0000000000402166\n.text:0000000000402169\n.text:0000000000402170\n.text:0000000000402175\n.text:000000000040217a\n.text:000000000040217d\n.text:000000000040217f\n.text:0000000000402181\n.text:0000000000402183\n.text:0000000000402186\n.text:000000000040218b\n.text:0000000000402190\n.text:0000000000402195\n'
p650
tp651
sS'realloc'
p652
(S'\n__stdcall realloc(void * __ptr, size_t __size)\n'
p653
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * realloc(void *__ptr,size_t __size)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_realloc_00609198)();\u000a  return pvVar1;\u000a}\u000a\u000a
p654
S'JMP qword ptr [0x00609198]\n'
p655
S'ff 25 32 7a 20 00\n'
p656
S'.plt:0000000000401760\n'
p657
tp658
sS'xcharalloc'
p659
(S'\n__stdcall xcharalloc(size_t n)\n'
p660
V\u000avoid * xcharalloc(size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = malloc(n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p661
S'JMP 0x004049c0\n'
p662
S'e9 2b ff ff ff\n'
p663
S'.text:0000000000404a90\n'
p664
tp665
sS'c_isupper'
p666
(S'\n__stdcall c_isupper()\n'
p667
V\u000a_Bool c_isupper(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x41U < 0x1a);\u000a}\u000a\u000a
p668
S'ADD EDI,-0x41\nCMP EDI,0x1a\nSETC AL\nRET\n'
p669
S'83 c7 bf\n83 ff 1a\n0f 92 c0\nc3\n'
p670
S'.text:0000000000404fd0\n.text:0000000000404fd3\n.text:0000000000404fd6\n.text:0000000000404fd9\n'
p671
tp672
sS'__fprintf_chk'
p673
(S'\n__stdcall __fprintf_chk()\n'
p674
V\u000avoid __fprintf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___fprintf_chk_006091f8)();\u000a  return;\u000a}\u000a\u000a
p675
S'JMP qword ptr [0x006091f8]\n'
p676
S'ff 25 d2 79 20 00\n'
p677
S'.plt:0000000000401820\n'
p678
tp679
sS'get_charset_aliases'
p680
(S'\n__stdcall get_charset_aliases()\n'
p681
V\u000achar * get_charset_aliases(void)\u000a\u000a{\u000a  long lVar1;\u000a  int __fd;\u000a  char *__s;\u000a  size_t __n;\u000a  char *__file;\u000a  FILE *fp;\u000a  size_t sVar2;\u000a  void *pvVar3;\u000a  ulong uVar4;\u000a  bool bVar5;\u000a  char buf2 [51];\u000a  char buf1 [51];\u000a  long local_c0;\u000a  char local_a8 [64];\u000a  char local_68 [56];\u000a  \u000a  if (charset_aliases != (char *)0x0) {\u000a    return charset_aliases;\u000a  }\u000a  __s = getenv("CHARSETALIASDIR");\u000a  if ((__s == (char *)0x0) || (*__s == 0)) {\u000a    __s = "/usr/local/lib";\u000a  }\u000a  __n = strlen(__s);\u000a  if (__n == 0) {\u000a    bVar5 = false;\u000a  }\u000a  else {\u000a    bVar5 = __s[__n - 1] != '/';\u000a  }\u000a  uVar4 = (ulong)bVar5;\u000a  __file = (char *)malloc(__n + 0xe + uVar4);\u000a  if (__file == (char *)0x0) {\u000a    charset_aliases = "";\u000a    return "";\u000a  }\u000a  memcpy(__file,__s,__n);\u000a  __s = __file + __n;\u000a  if (bVar5 == false) {\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  else {\u000a    __file[__n] = '/';\u000a    *(undefined8 *)(__s + uVar4 + 6) = 0x7361696c612e74;\u000a    *(undefined8 *)(__s + uVar4) = 0x2e74657372616863;\u000a  }\u000a  __fd = open(__file,0x20000);\u000a  if (-1 < __fd) {\u000a    fp = (FILE *)fdopen(__fd,"r");\u000a    if (fp != (FILE *)0x0) {\u000a      local_c0 = 0;\u000a      __s = (char *)0;\u000aswitchD_00405334_caseD_9:\u000a      __fd = getc_unlocked((FILE *)fp);\u000a      switch(__fd) {\u000a      default:\u000a        ungetc(__fd,(FILE *)fp);\u000a        __fd = fscanf((FILE *)fp,"%50s %50s",local_68);\u000a        if (__fd < 2) goto switchD_00405334_caseD_ffffffff;\u000a        __n = strlen(local_68);\u000a        sVar2 = strlen(local_a8);\u000a        lVar1 = __n + 2 + sVar2;\u000a        if (local_c0 == 0) {\u000a          pvVar3 = malloc(__n + sVar2 + 3);\u000a          local_c0 = lVar1;\u000a        }\u000a        else {\u000a          pvVar3 = realloc(__s,lVar1 + 1 + local_c0);\u000a          local_c0 = lVar1 + local_c0;\u000a        }\u000a        if (pvVar3 == (void *)0x0) {\u000a          free(__s);\u000a          local_c0 = 0;\u000a          __s = (char *)0x0;\u000a          goto switchD_00405334_caseD_ffffffff;\u000a        }\u000a        __s = (char *)((long)pvVar3 + ~sVar2 + local_c0);\u000a        strcpy(__s + ~__n,local_68);\u000a        strcpy(__s,local_a8);\u000a        __s = (char *)pvVar3;\u000a        goto switchD_00405334_caseD_9;\u000a      case 0x23:\u000a        do {\u000a          __fd = getc_unlocked((FILE *)fp);\u000a          if (__fd == -1) goto switchD_00405334_caseD_ffffffff;\u000a        } while (__fd != 10);\u000a        goto switchD_00405334_caseD_9;\u000a      case -1:\u000a        goto switchD_00405334_caseD_ffffffff;\u000a      }\u000a    }\u000a    close(__fd);\u000a  }\u000aLAB_0040538d:\u000a  __s = "";\u000aLAB_00405393:\u000a  free(__file);\u000a  charset_aliases = __s;\u000a  return __s;\u000aswitchD_00405334_caseD_ffffffff:\u000a  rpl_fclose(fp);\u000a  if (local_c0 != 0) {\u000a    __s[local_c0] = 0;\u000a    goto LAB_00405393;\u000a  }\u000a  goto LAB_0040538d;\u000a}\u000a\u000a
p682
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x98\nMOV R15,qword ptr [0x006094a0]\nTEST R15,R15\nJNZ 0x004053a2\nMOV EDI,0x407234\nCALL 0x00401470\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405158\nCMP byte ptr [RBX],0x0\nJNZ 0x0040515d\nMOV EBX,0x407244\nMOV RDI,RBX\nCALL 0x00401560\nMOV RBP,RAX\nTEST RBP,RBP\nJZ 0x00405177\nCMP byte ptr [RBX + RBP*0x1 + -0x1],0x2f\nSETNZ AL\nJMP 0x00405179\nXOR EAX,EAX\nMOVZX R14D,AL\nLEA RDI,[RBP + R14*0x1 + 0xe]\nCALL 0x004016f0\nMOV R13,RAX\nTEST R13,R13\nJZ 0x004051cd\nMOV RDI,R13\nMOV RSI,RBX\nMOV RDX,RBP\nCALL 0x00401690\nMOV RAX,RBP\nADD RAX,R13\nTEST R14,R14\nJZ 0x004051d8\nMOV byte ptr [R13 + RBP*0x1],0x2f\nMOV RCX,0x7361696c612e74\nMOV qword ptr [R14 + RAX*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [R14 + RAX*0x1],RCX\nJMP 0x004051f5\nMOV R15D,0x405bb5\nJMP 0x0040539b\nMOV RCX,0x7361696c612e74\nMOV qword ptr [RAX + R14*0x1 + 0x6],RCX\nMOV RCX,0x2e74657372616863\nMOV qword ptr [RAX + R14*0x1],RCX\nMOV ESI,0x20000\nXOR EAX,EAX\nMOV RDI,R13\nCALL 0x004017c0\nMOV EBP,EAX\nTEST EBP,EBP\nJS 0x0040538d\nMOV ESI,0x406842\nMOV EDI,EBP\nCALL 0x00401770\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00405354\nLEA R12,[RSP + 0x60]\nLEA RBP,[RSP + 0x20]\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV qword ptr [RSP + 0x10],R13\nJMP 0x00405320\nLEA RAX,[R13 + R14*0x1]\nNOT RBP\nADD RBP,RAX\nNOT R12\nADD R12,RBP\nMOV RDI,R12\nLEA R12,[RSP + 0x60]\nMOV RSI,R12\nCALL 0x004014d0\nMOV RDI,RBP\nLEA RBP,[RSP + 0x20]\nMOV RSI,RBP\nCALL 0x004014d0\nMOV qword ptr [RSP + 0x8],R14\nMOV R15,R13\nMOV R13,qword ptr [RSP + 0x10]\nJMP 0x00405320\nMOV EDI,EAX\nMOV RSI,RBX\nCALL 0x00401720\nMOV ESI,0x407253\nXOR EAX,EAX\nMOV RDI,RBX\nMOV RDX,R12\nMOV RCX,RBP\nCALL 0x00401610\nCMP EAX,0x2\nJL 0x00405374\nMOV RDI,R12\nCALL 0x00401560\nMOV R12,RAX\nMOV RDI,RBP\nCALL 0x00401560\nMOV RBP,RAX\nLEA R14,[R12 + RBP*0x1 + 0x2]\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x004052fd\nLEA RCX,[R14 + RAX*0x1]\nMOV qword ptr [RSP + 0x18],RCX\nLEA RSI,[R14 + RAX*0x1 + 0x1]\nMOV RDI,R15\nCALL 0x00401760\nMOV R13,RAX\nMOV R14,qword ptr [RSP + 0x18]\nTEST R13,R13\nJNZ 0x00405244\nJMP 0x0040535d\nLEA RDI,[R12 + RBP*0x1 + 0x1]\nADD RDI,0x2\nCALL 0x004016f0\nMOV R13,RAX\nTEST R13,R13\nJNZ 0x00405244\nJMP 0x0040535d\nMOV RDI,RBX\nCALL 0x004014f0\nLEA ECX,[RAX + 0x1]\nCMP ECX,0x24\nJA 0x00405287\nJMP qword ptr [0x4070f8 + RCX*0x8]\nMOV RDI,RBX\nCALL 0x004014f0\nCMP EAX,-0x1\nJZ 0x00405374\nCMP EAX,0xa\nJNZ 0x00405340\nJMP 0x00405320\nMOV EDI,EBP\nCALL 0x00401620\nJMP 0x0040538d\nMOV RDI,R15\nCALL 0x00401480\nXOR EAX,EAX\nMOV qword ptr [RSP + 0x8],RAX\nXOR R15D,R15D\nMOV R13,qword ptr [RSP + 0x10]\nMOV RDI,RBX\nCALL 0x004055d0\nMOV RAX,qword ptr [RSP + 0x8]\nTEST RAX,RAX\nJZ 0x0040538d\nMOV byte ptr [R15 + RAX*0x1],0x0\nJMP 0x00405393\nMOV R15D,0x405bb5\nMOV RDI,R13\nCALL 0x00401480\nMOV qword ptr [0x006094a0],R15\nMOV RAX,R15\nADD RSP,0x98\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p683
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 81 ec 98 00 00 00\n4c 8b 3d 68 43 20 00\n4d 85 ff\n0f 85 61 02 00 00\nbf 34 72 40 00\ne8 25 c3 ff ff\n48 89 c3\n48 85 db\n74 05\n80 3b 00\n75 05\nbb 44 72 40 00\n48 89 df\ne8 fb c3 ff ff\n48 89 c5\n48 85 ed\n74 0a\n80 7c 2b ff 2f\n0f 95 c0\neb 02\n31 c0\n44 0f b6 f0\n4a 8d 7c 35 0e\ne8 69 c5 ff ff\n49 89 c5\n4d 85 ed\n74 3e\n4c 89 ef\n48 89 de\n48 89 ea\ne8 f3 c4 ff ff\n48 89 e8\n4c 01 e8\n4d 85 f6\n74 30\n41 c6 44 2d 00 2f\n48 b9 74 2e 61 6c 69 61 73 00\n49 89 4c 06 06\n48 b9 63 68 61 72 73 65 74 2e\n49 89 0c 06\neb 28\n41 bf b5 5b 40 00\ne9 c3 01 00 00\n48 b9 74 2e 61 6c 69 61 73 00\n4a 89 4c 30 06\n48 b9 63 68 61 72 73 65 74 2e\n4a 89 0c 30\nbe 00 00 02 00\n31 c0\n4c 89 ef\ne8 bc c5 ff ff\n89 c5\n85 ed\n0f 88 7f 01 00 00\nbe 42 68 40 00\n89 ef\ne8 56 c5 ff ff\n48 89 c3\n48 85 db\n0f 84 2e 01 00 00\n4c 8d 64 24 60\n48 8d 6c 24 20\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 89 6c 24 10\ne9 dc 00 00 00\n4b 8d 44 35 00\n48 f7 d5\n48 01 c5\n49 f7 d4\n49 01 ec\n4c 89 e7\n4c 8d 64 24 60\n4c 89 e6\ne8 6b c2 ff ff\n48 89 ef\n48 8d 6c 24 20\n48 89 ee\ne8 5b c2 ff ff\n4c 89 74 24 08\n4d 89 ef\n4c 8b 6c 24 10\ne9 99 00 00 00\n89 c7\n48 89 de\ne8 8f c4 ff ff\nbe 53 72 40 00\n31 c0\n48 89 df\n4c 89 e2\n48 89 e9\ne8 6a c3 ff ff\n83 f8 02\n0f 8c c5 00 00 00\n4c 89 e7\ne8 a9 c2 ff ff\n49 89 c4\n48 89 ef\ne8 9e c2 ff ff\n48 89 c5\n4d 8d 74 2c 02\n48 8b 44 24 08\n48 85 c0\n74 29\n49 8d 0c 06\n48 89 4c 24 18\n49 8d 74 06 01\n4c 89 ff\ne8 76 c4 ff ff\n49 89 c5\n4c 8b 74 24 18\n4d 85 ed\n0f 85 49 ff ff ff\neb 60\n49 8d 7c 2c 01\n48 83 c7 02\ne8 e5 c3 ff ff\n49 89 c5\n4d 85 ed\n0f 85 2d ff ff ff\neb 44\n48 89 df\ne8 c8 c1 ff ff\n8d 48 01\n83 f9 24\n0f 87 53 ff ff ff\nff 24 cd f8 70 40 00\n48 89 df\ne8 a8 c1 ff ff\n83 f8 ff\n74 27\n83 f8 0a\n75 ee\neb cc\n89 ef\ne8 c5 c2 ff ff\neb 30\n4c 89 ff\ne8 1b c1 ff ff\n31 c0\n48 89 44 24 08\n45 31 ff\n4c 8b 6c 24 10\n48 89 df\ne8 54 02 00 00\n48 8b 44 24 08\n48 85 c0\n74 07\n41 c6 04 07 00\neb 06\n41 bf b5 5b 40 00\n4c 89 ef\ne8 e5 c0 ff ff\n4c 89 3d fe 40 20 00\n4c 89 f8\n48 81 c4 98 00 00 00\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p684
S'.text:0000000000405120\n.text:0000000000405121\n.text:0000000000405123\n.text:0000000000405125\n.text:0000000000405127\n.text:0000000000405129\n.text:000000000040512a\n.text:0000000000405131\n.text:0000000000405138\n.text:000000000040513b\n.text:0000000000405141\n.text:0000000000405146\n.text:000000000040514b\n.text:000000000040514e\n.text:0000000000405151\n.text:0000000000405153\n.text:0000000000405156\n.text:0000000000405158\n.text:000000000040515d\n.text:0000000000405160\n.text:0000000000405165\n.text:0000000000405168\n.text:000000000040516b\n.text:000000000040516d\n.text:0000000000405172\n.text:0000000000405175\n.text:0000000000405177\n.text:0000000000405179\n.text:000000000040517d\n.text:0000000000405182\n.text:0000000000405187\n.text:000000000040518a\n.text:000000000040518d\n.text:000000000040518f\n.text:0000000000405192\n.text:0000000000405195\n.text:0000000000405198\n.text:000000000040519d\n.text:00000000004051a0\n.text:00000000004051a3\n.text:00000000004051a6\n.text:00000000004051a8\n.text:00000000004051ae\n.text:00000000004051b8\n.text:00000000004051bd\n.text:00000000004051c7\n.text:00000000004051cb\n.text:00000000004051cd\n.text:00000000004051d3\n.text:00000000004051d8\n.text:00000000004051e2\n.text:00000000004051e7\n.text:00000000004051f1\n.text:00000000004051f5\n.text:00000000004051fa\n.text:00000000004051fc\n.text:00000000004051ff\n.text:0000000000405204\n.text:0000000000405206\n.text:0000000000405208\n.text:000000000040520e\n.text:0000000000405213\n.text:0000000000405215\n.text:000000000040521a\n.text:000000000040521d\n.text:0000000000405220\n.text:0000000000405226\n.text:000000000040522b\n.text:0000000000405230\n.text:0000000000405232\n.text:0000000000405237\n.text:000000000040523a\n.text:000000000040523f\n.text:0000000000405244\n.text:0000000000405249\n.text:000000000040524c\n.text:000000000040524f\n.text:0000000000405252\n.text:0000000000405255\n.text:0000000000405258\n.text:000000000040525d\n.text:0000000000405260\n.text:0000000000405265\n.text:0000000000405268\n.text:000000000040526d\n.text:0000000000405270\n.text:0000000000405275\n.text:000000000040527a\n.text:000000000040527d\n.text:0000000000405282\n.text:0000000000405287\n.text:0000000000405289\n.text:000000000040528c\n.text:0000000000405291\n.text:0000000000405296\n.text:0000000000405298\n.text:000000000040529b\n.text:000000000040529e\n.text:00000000004052a1\n.text:00000000004052a6\n.text:00000000004052a9\n.text:00000000004052af\n.text:00000000004052b2\n.text:00000000004052b7\n.text:00000000004052ba\n.text:00000000004052bd\n.text:00000000004052c2\n.text:00000000004052c5\n.text:00000000004052ca\n.text:00000000004052cf\n.text:00000000004052d2\n.text:00000000004052d4\n.text:00000000004052d8\n.text:00000000004052dd\n.text:00000000004052e2\n.text:00000000004052e5\n.text:00000000004052ea\n.text:00000000004052ed\n.text:00000000004052f2\n.text:00000000004052f5\n.text:00000000004052fb\n.text:00000000004052fd\n.text:0000000000405302\n.text:0000000000405306\n.text:000000000040530b\n.text:000000000040530e\n.text:0000000000405311\n.text:0000000000405317\n.text:0000000000405320\n.text:0000000000405323\n.text:0000000000405328\n.text:000000000040532b\n.text:000000000040532e\n.text:0000000000405334\n.text:0000000000405340\n.text:0000000000405343\n.text:0000000000405348\n.text:000000000040534b\n.text:000000000040534d\n.text:0000000000405350\n.text:0000000000405352\n.text:0000000000405354\n.text:0000000000405356\n.text:000000000040535b\n.text:000000000040535d\n.text:0000000000405360\n.text:0000000000405365\n.text:0000000000405367\n.text:000000000040536c\n.text:000000000040536f\n.text:0000000000405374\n.text:0000000000405377\n.text:000000000040537c\n.text:0000000000405381\n.text:0000000000405384\n.text:0000000000405386\n.text:000000000040538b\n.text:000000000040538d\n.text:0000000000405393\n.text:0000000000405396\n.text:000000000040539b\n.text:00000000004053a2\n.text:00000000004053a5\n.text:00000000004053ac\n.text:00000000004053ad\n.text:00000000004053af\n.text:00000000004053b1\n.text:00000000004053b3\n.text:00000000004053b5\n.text:00000000004053b6\n'
p685
tp686
sS'nl_langinfo'
p687
(S'\n__stdcall nl_langinfo(nl_item __item)\n'
p688
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000achar * nl_langinfo(nl_item __item)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = (char *)(*(code *)PTR_nl_langinfo_00609170)();\u000a  return pcVar1;\u000a}\u000a\u000a
p689
S'JMP qword ptr [0x00609170]\n'
p690
S'ff 25 5a 7a 20 00\n'
p691
S'.plt:0000000000401710\n'
p692
tp693
sS'c_isalnum'
p694
(S'\n__stdcall c_isalnum()\n'
p695
V\u000a_Bool c_isalnum(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (((0x39 < in_EDI - 0x41U) ||\u000a      ((0x3ffffff03ffffffU >> ((ulong)(in_EDI - 0x41U) & 0x1f) & 1) == 0)) && (9 < in_EDI - 0x30U))\u000a  {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p696
S'MOV AL,0x1\nLEA ECX,[RDI + -0x41]\nCMP ECX,0x39\nJA 0x00404eeb\nMOV RDX,0x3ffffff03ffffff\nBT RDX,RCX\nJNC 0x00404eeb\nRET\nADD EDI,-0x30\nCMP EDI,0xa\nJC 0x00404eea\nXOR EAX,EAX\nRET\n'
p697
S'b0 01\n8d 4f bf\n83 f9 39\n77 11\n48 ba ff ff ff 03 ff ff ff 03\n48 0f a3 ca\n73 01\nc3\n83 c7 d0\n83 ff 0a\n72 f7\n31 c0\nc3\n'
p698
S'.text:0000000000404ed0\n.text:0000000000404ed2\n.text:0000000000404ed5\n.text:0000000000404ed8\n.text:0000000000404eda\n.text:0000000000404ee4\n.text:0000000000404ee8\n.text:0000000000404eea\n.text:0000000000404eeb\n.text:0000000000404eee\n.text:0000000000404ef1\n.text:0000000000404ef3\n.text:0000000000404ef5\n'
p699
tp700
sS'x2realloc'
p701
(S'\n__stdcall x2realloc(void * p, size_t * pn)\n'
p702
V\u000avoid * x2realloc(void *p,size_t *pn)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = x2nrealloc(p,pn,1);\u000a  return pvVar1;\u000a}\u000a\u000a
p703
S'MOV EDX,0x1\nJMP 0x00404a30\n'
p704
S'ba 01 00 00 00\neb 89\n'
p705
S'.text:0000000000404aa0\n.text:0000000000404aa5\n'
p706
tp707
sS'getpwuid'
p708
(S'\n__stdcall getpwuid(__uid_t __uid)\n'
p709
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000apasswd * getpwuid(__uid_t __uid)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  \u000a  ppVar1 = (passwd *)(*(code *)PTR_getpwuid_00609078)();\u000a  return ppVar1;\u000a}\u000a\u000a
p710
S'JMP qword ptr [0x00609078]\n'
p711
S'ff 25 52 7b 20 00\n'
p712
S'.plt:0000000000401520\n'
p713
tp714
sS'strlen'
p715
(S'\n__stdcall strlen(char * __s)\n'
p716
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t strlen(char *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_strlen_00609098)();\u000a  return sVar1;\u000a}\u000a\u000a
p717
S'JMP qword ptr [0x00609098]\n'
p718
S'ff 25 32 7b 20 00\n'
p719
S'.plt:0000000000401560\n'
p720
tp721
sS'uidtostr_ptr'
p722
(S'\n__stdcall uidtostr_ptr(uid_t * uid)\n'
p723
V\u000achar * uidtostr_ptr(uid_t *uid)\u000a\u000a{\u000a  char buf [21];\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = umaxtostr((ulong)*uid,(char *)&ram0x006092f0);\u000a  return pcVar1;\u000a}\u000a\u000a
p724
S'MOV EDI,dword ptr [RDI]\nMOV ESI,0x6092f0\nJMP 0x004027d0\n'
p725
S'8b 3f\nbe f0 92 60 00\ne9 e4 02 00 00\n'
p726
S'.text:00000000004024e0\n.text:00000000004024e2\n.text:00000000004024e7\n'
p727
tp728
sS'memcmp'
p729
(S'\n__stdcall memcmp(void * __s1, void * __s2, size_t __n)\n'
p730
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint memcmp(void *__s1,void *__s2,size_t __n)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_memcmp_00609100)();\u000a  return iVar1;\u000a}\u000a\u000a
p731
S'JMP qword ptr [0x00609100]\n'
p732
S'ff 25 ca 7a 20 00\n'
p733
S'.plt:0000000000401630\n'
p734
tp735
sS'quotearg_n_style_mem'
p736
(S'\n__stdcall quotearg_n_style_mem(char * arg, size_t argsize)\n'
p737
V\u000achar * quotearg_n_style_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  size_t argsize_00;\u000a  quoting_options qStack88;\u000a  \u000a  quoting_options_from_style(&qStack88);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize_00,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p738
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nSUB RSP,0x38\nMOV R14,RCX\nMOV RBX,RDX\nMOV EBP,EDI\nMOV R15,RSP\nMOV RDI,R15\nCALL 0x00403a60\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RDX,R14\nMOV RCX,R15\nCALL 0x00403830\nADD RSP,0x38\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p739
S'55\n41 57\n41 56\n53\n48 83 ec 38\n49 89 ce\n48 89 d3\n89 fd\n49 89 e7\n4c 89 ff\ne8 83 ff ff ff\n89 ef\n48 89 de\n4c 89 f2\n4c 89 f9\ne8 43 fd ff ff\n48 83 c4 38\n5b\n41 5e\n41 5f\n5d\nc3\n'
p740
S'.text:0000000000403ac0\n.text:0000000000403ac1\n.text:0000000000403ac3\n.text:0000000000403ac5\n.text:0000000000403ac6\n.text:0000000000403aca\n.text:0000000000403acd\n.text:0000000000403ad0\n.text:0000000000403ad2\n.text:0000000000403ad5\n.text:0000000000403ad8\n.text:0000000000403add\n.text:0000000000403adf\n.text:0000000000403ae2\n.text:0000000000403ae5\n.text:0000000000403ae8\n.text:0000000000403aed\n.text:0000000000403af1\n.text:0000000000403af2\n.text:0000000000403af4\n.text:0000000000403af6\n.text:0000000000403af7\n'
p741
tp742
sS'_exit'
p743
(S'\n__stdcall _exit(int __status)\n'
p744
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid _exit(int __status)\u000a\u000a{\u000a  (*(code *)PTR__exit_00609048)();\u000a  return;\u000a}\u000a\u000a
p745
S'JMP qword ptr [0x00609048]\n'
p746
S'ff 25 82 7b 20 00\n'
p747
S'.plt:00000000004014c0\n'
p748
tp749
sS'__errno_location'
p750
(S'\n__stdcall __errno_location()\n'
p751
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint * __errno_location(void)\u000a\u000a{\u000a  int *piVar1;\u000a  \u000a  piVar1 = (int *)(*(code *)PTR___errno_location_00609038)();\u000a  return piVar1;\u000a}\u000a\u000a
p752
S'JMP qword ptr [0x00609038]\n'
p753
S'ff 25 92 7b 20 00\n'
p754
S'.plt:00000000004014a0\n'
p755
tp756
sS'bkm_scale_by_power'
p757
(S'\n__stdcall bkm_scale_by_power(ulong * x)\n'
p758
V\u000astrtol_error bkm_scale_by_power(ulong *x)\u000a\u000a{\u000a  strtol_error sVar1;\u000a  int in_EDX;\u000a  strtol_error sVar2;\u000a  \u000a  sVar2 = LONGINT_OK;\u000a  if (in_EDX != 0) {\u000a    do {\u000a      sVar1 = bkm_scale(x);\u000a      sVar2 = sVar2 | sVar1;\u000a      in_EDX = in_EDX + -1;\u000a    } while (in_EDX != 0);\u000a  }\u000a  return sVar2;\u000a}\u000a\u000a
p759
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,EDX\nMOV R14D,ESI\nMOV R15,RDI\nXOR EBP,EBP\nTEST EBX,EBX\nJZ 0x00404e71\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RDI,R15\nMOV ESI,R14D\nCALL 0x00404e10\nOR EBP,EAX\nDEC EBX\nJNZ 0x00404e60\nMOV EAX,EBP\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p760
S'55\n41 57\n41 56\n53\n50\n89 d3\n41 89 f6\n49 89 ff\n31 ed\n85 db\n74 1c\n66 66 2e 0f 1f 84 00 00 00 00 00\n4c 89 ff\n44 89 f6\ne8 a5 ff ff ff\n09 c5\nff cb\n75 ef\n89 e8\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p761
S'.text:0000000000404e40\n.text:0000000000404e41\n.text:0000000000404e43\n.text:0000000000404e45\n.text:0000000000404e46\n.text:0000000000404e47\n.text:0000000000404e49\n.text:0000000000404e4c\n.text:0000000000404e4f\n.text:0000000000404e51\n.text:0000000000404e53\n.text:0000000000404e55\n.text:0000000000404e60\n.text:0000000000404e63\n.text:0000000000404e66\n.text:0000000000404e6b\n.text:0000000000404e6d\n.text:0000000000404e6f\n.text:0000000000404e71\n.text:0000000000404e73\n.text:0000000000404e77\n.text:0000000000404e78\n.text:0000000000404e7a\n.text:0000000000404e7c\n.text:0000000000404e7d\n'
p762
tp763
sS'x2nrealloc'
p764
(S'\n__stdcall x2nrealloc(void * p, size_t * pn, size_t s)\n'
p765
V\u000avoid * x2nrealloc(void *p,size_t *pn,size_t s)\u000a\u000a{\u000a  undefined auVar1 [16];\u000a  void *pvVar2;\u000a  ulong uVar3;\u000a  \u000a  uVar3 = *pn;\u000a  if (p == (void *)0x0) {\u000a    if (uVar3 == 0) {\u000a      uVar3 = (ulong)(0x80 < s) + SUB168((ZEXT816(0) << 0x40 | ZEXT816(0x80)) / ZEXT816(s),0);\u000a    }\u000a  }\u000a  else {\u000a    auVar1 = ZEXT816(0) << 0x40 | ZEXT816(0xaaaaaaaaaaaaaaaa);\u000a    if (SUB168(auVar1 / ZEXT816(s),0) <= uVar3) {\u000a                    /* WARNING: Subroutine does not return */\u000a      xalloc_die(p,pn,SUB168(auVar1 % ZEXT816(s),0));\u000a    }\u000a    uVar3 = uVar3 + 1 + (uVar3 >> 1);\u000a  }\u000a  *pn = uVar3;\u000a  pvVar2 = xrealloc(p,s * uVar3);\u000a  return pvVar2;\u000a}\u000a\u000a
p766
S'MOV R8,RDX\nMOV RCX,qword ptr [RSI]\nTEST RDI,RDI\nJZ 0x00404a5c\nMOV RAX,-0x5555555555555556\nXOR EDX,EDX\nDIV R8\nCMP RAX,RCX\nJBE 0x00404a89\nMOV RAX,RCX\nSHR RAX,1\nLEA RCX,[RCX + RAX*0x1 + 0x1]\nJMP 0x00404a7a\nTEST RCX,RCX\nJNZ 0x00404a7a\nMOV EAX,0x80\nXOR EDX,EDX\nDIV R8\nXOR ECX,ECX\nCMP R8,0x80\nSETA CL\nADD RCX,RAX\nMOV qword ptr [RSI],RCX\nIMUL R8,RCX\nMOV RSI,R8\nJMP 0x00404a00\nPUSH RAX\nCALL 0x00404b50\n'
p767
S'49 89 d0\n48 8b 0e\n48 85 ff\n74 21\n48 b8 aa aa aa aa aa aa aa aa\n31 d2\n49 f7 f0\n48 39 c8\n76 3a\n48 89 c8\n48 d1 e8\n48 8d 4c 01 01\neb 1e\n48 85 c9\n75 19\nb8 80 00 00 00\n31 d2\n49 f7 f0\n31 c9\n49 81 f8 80 00 00 00\n0f 97 c1\n48 01 c1\n48 89 0e\n4c 0f af c1\n4c 89 c6\ne9 77 ff ff ff\n50\ne8 c1 00 00 00\n'
p768
S'.text:0000000000404a30\n.text:0000000000404a33\n.text:0000000000404a36\n.text:0000000000404a39\n.text:0000000000404a3b\n.text:0000000000404a45\n.text:0000000000404a47\n.text:0000000000404a4a\n.text:0000000000404a4d\n.text:0000000000404a4f\n.text:0000000000404a52\n.text:0000000000404a55\n.text:0000000000404a5a\n.text:0000000000404a5c\n.text:0000000000404a5f\n.text:0000000000404a61\n.text:0000000000404a66\n.text:0000000000404a68\n.text:0000000000404a6b\n.text:0000000000404a6d\n.text:0000000000404a74\n.text:0000000000404a77\n.text:0000000000404a7a\n.text:0000000000404a7d\n.text:0000000000404a81\n.text:0000000000404a84\n.text:0000000000404a89\n.text:0000000000404a8a\n'
p769
tp770
sS'xrealloc'
p771
(S'\n__stdcall xrealloc(void * p, size_t n)\n'
p772
V\u000avoid * xrealloc(void *p,size_t n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  if ((p != (void *)0x0) && (n == 0)) {\u000a    free(p);\u000a    return (void *)0x0;\u000a  }\u000a  pvVar1 = realloc(p,n);\u000a  if ((n != 0) && (pvVar1 == (void *)0x0)) {\u000a                    /* WARNING: Subroutine does not return */\u000a    xalloc_die();\u000a  }\u000a  return pvVar1;\u000a}\u000a\u000a
p773
S'PUSH RBX\nMOV RBX,RSI\nTEST RDI,RDI\nJZ 0x00404a17\nTEST RBX,RBX\nJNZ 0x00404a17\nCALL 0x00401480\nXOR EAX,EAX\nPOP RBX\nRET\nMOV RSI,RBX\nCALL 0x00401760\nTEST RBX,RBX\nJZ 0x00404a29\nTEST RAX,RAX\nJZ 0x00404a2b\nPOP RBX\nRET\nCALL 0x00404b50\n'
p774
S'53\n48 89 f3\n48 85 ff\n74 0e\n48 85 db\n75 09\ne8 6d ca ff ff\n31 c0\n5b\nc3\n48 89 de\ne8 41 cd ff ff\n48 85 db\n74 05\n48 85 c0\n74 02\n5b\nc3\ne8 20 01 00 00\n'
p775
S'.text:0000000000404a00\n.text:0000000000404a01\n.text:0000000000404a04\n.text:0000000000404a07\n.text:0000000000404a09\n.text:0000000000404a0c\n.text:0000000000404a0e\n.text:0000000000404a13\n.text:0000000000404a15\n.text:0000000000404a16\n.text:0000000000404a17\n.text:0000000000404a1a\n.text:0000000000404a1f\n.text:0000000000404a22\n.text:0000000000404a24\n.text:0000000000404a27\n.text:0000000000404a29\n.text:0000000000404a2a\n.text:0000000000404a2b\n'
p776
tp777
sS'quotearg_n_options'
p778
(S'\n__stdcall quotearg_n_options(char * arg, size_t argsize, quoting_options * options)\n'
p779
V\u000achar * quotearg_n_options(char *arg,size_t argsize,quoting_options *options)\u000a\u000a{\u000a  int iVar1;\u000a  size_t buffersize;\u000a  slotvec *psVar2;\u000a  undefined4 uVar3;\u000a  undefined4 uVar4;\u000a  undefined4 uVar5;\u000a  int *piVar6;\u000a  size_t n;\u000a  uint *in_RCX;\u000a  char *buffer;\u000a  long lVar7;\u000a  slotvec *p;\u000a  uint uVar8;\u000a  int e;\u000a  \u000a  piVar6 = __errno_location();\u000a  psVar2 = slotvec;\u000a  uVar8 = (uint)((ulong)arg & 0xffffffff);\u000a  if ((int)uVar8 < 0) {\u000a                    /* WARNING: Subroutine does not return */\u000a    abort();\u000a  }\u000a  iVar1 = *piVar6;\u000a  p = slotvec;\u000a  if (nslots <= uVar8) {\u000a    lVar7 = ((ulong)arg & 0xffffffff) + 1;\u000a    p = (slotvec *)0x0;\u000a    if (slotvec != &slotvec0) {\u000a      p = slotvec;\u000a    }\u000a    p = (slotvec *)xrealloc(p,lVar7 * 0x10);\u000a    uVar5 = slotvec0.val._4_4_;\u000a    uVar4 = slotvec0.val._0_4_;\u000a    uVar3 = slotvec0.size._4_4_;\u000a    slotvec = p;\u000a    if (psVar2 == &slotvec0) {\u000a      slotvec = p;\u000a      *(undefined4 *)&p->size = (undefined4)slotvec0.size;\u000a      *(undefined4 *)((long)&p->size + 4) = uVar3;\u000a      *(undefined4 *)&p->val = uVar4;\u000a      *(undefined4 *)((long)&p->val + 4) = uVar5;\u000a    }\u000a    memset(p + (ulong)nslots,0,(lVar7 - (ulong)nslots) * 0x10);\u000a    nslots = uVar8 + 1;\u000a  }\u000a  lVar7 = (long)(int)uVar8;\u000a  buffersize = p[lVar7].size;\u000a  buffer = p[lVar7].val;\u000a  uVar8 = in_RCX[1];\u000a  n = quotearg_buffer_restyled\u000a                (buffer,buffersize,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a                 (char *)(ulong)(uVar8 | 1));\u000a  if (buffersize <= n) {\u000a    n = n + 1;\u000a    p[lVar7].size = n;\u000a    if (buffer != slot0) {\u000a      free(buffer);\u000a    }\u000a    buffer = (char *)xcharalloc(n);\u000a    p[lVar7].val = buffer;\u000a    quotearg_buffer_restyled\u000a              (buffer,n,(char *)argsize,(size_t)options,(char *)(ulong)*in_RCX,\u000a               (char *)(ulong)(uVar8 | 1));\u000a  }\u000a  *piVar6 = iVar1;\u000a  return buffer;\u000a}\u000a\u000a
p780
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x38\nMOV RBP,RCX\nMOV R15,RDX\nMOV RBX,RSI\nMOV R12D,EDI\nCALL 0x004014a0\nTEST R12D,R12D\nJS 0x004039e1\nMOV qword ptr [RSP + 0x30],RAX\nMOV EAX,dword ptr [RAX]\nMOV dword ptr [RSP + 0x8],EAX\nMOV R14,qword ptr [0x00609238]\nCMP dword ptr [0x00609240],R12D\nMOV qword ptr [RSP + 0x28],RBP\nMOV qword ptr [RSP + 0x20],R15\nMOV qword ptr [RSP + 0x18],RBX\nJA 0x004038fb\nLEA EBX,[R12 + 0x1]\nMOV EBP,R12D\nINC RBP\nMOV R13D,0x609248\nXOR EDI,EDI\nCMP R14,R13\nCMOVNZ RDI,R14\nMOV RSI,RBP\nSHL RSI,0x4\nCALL 0x00404a00\nMOV R15,RAX\nCMP R14,R13\nMOV qword ptr [0x00609238],R15\nJNZ 0x004038c2\nMOVUPS XMM0,xmmword ptr [0x00609248]\nMOVUPS xmmword ptr [R15],XMM0\nMOV EAX,dword ptr [0x00609240]\nSUB RBP,RAX\nSHL RAX,0x4\nMOV RDI,R15\nADD RDI,RAX\nSHL RBP,0x4\nXOR ESI,ESI\nMOV RDX,RBP\nCALL 0x004015f0\nMOV dword ptr [0x00609240],EBX\nMOV R14,R15\nMOV RBP,qword ptr [RSP + 0x28]\nMOV R15,qword ptr [RSP + 0x20]\nMOV RBX,qword ptr [RSP + 0x18]\nMOVSXD R13,R12D\nSHL R13,0x4\nMOV R12,qword ptr [R14 + R13*0x1]\nMOV RDI,qword ptr [R14 + R13*0x1 + 0x8]\nMOV R8D,dword ptr [RBP]\nMOV R9D,dword ptr [RBP + 0x4]\nOR R9D,0x1\nLEA RAX,[RBP + 0x8]\nSUB RSP,0x8\nMOV qword ptr [RSP + 0x18],RDI\nMOV RSI,R12\nMOV RDX,RBX\nMOV RCX,R15\nMOV dword ptr [RSP + 0x14],R9D\nPUSH qword ptr [RBP + 0x30]\nPUSH qword ptr [RBP + 0x28]\nMOV RBP,RAX\nPUSH RBP\nCALL 0x00402a50\nADD RSP,0x20\nMOV R15,RAX\nCMP R12,R15\nJBE 0x0040395d\nMOV R12,qword ptr [RSP + 0x30]\nMOV EAX,dword ptr [RSP + 0x8]\nMOV RBX,qword ptr [RSP + 0x10]\nJMP 0x004039cb\nLEA RAX,[R14 + R13*0x1]\nLEA R14,[R14 + R13*0x1 + 0x8]\nINC R15\nMOV qword ptr [RAX],R15\nMOV EAX,0x6093a0\nMOV RCX,qword ptr [RSP + 0x10]\nCMP RCX,RAX\nMOV R12,qword ptr [RSP + 0x30]\nMOV RDI,RCX\nJZ 0x00403988\nCALL 0x00401480\nMOV RDI,R15\nCALL 0x00404a90\nMOV RBX,RAX\nMOV qword ptr [R14],RBX\nMOV RAX,qword ptr [RSP + 0x28]\nMOV R8D,dword ptr [RAX]\nSUB RSP,0x8\nMOV RDI,RBX\nMOV RSI,R15\nMOV RDX,qword ptr [RSP + 0x20]\nMOV RCX,qword ptr [RSP + 0x28]\nMOV R9D,dword ptr [RSP + 0x14]\nPUSH qword ptr [RAX + 0x30]\nPUSH qword ptr [RAX + 0x28]\nPUSH RBP\nCALL 0x00402a50\nADD RSP,0x20\nMOV EAX,dword ptr [RSP + 0x8]\nMOV dword ptr [R12],EAX\nMOV RAX,RBX\nADD RSP,0x38\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nCALL 0x00401490\n'
p781
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 38\n48 89 cd\n49 89 d7\n48 89 f3\n41 89 fc\ne8 51 dc ff ff\n45 85 e4\n0f 88 89 01 00 00\n48 89 44 24 30\n8b 00\n89 44 24 08\n4c 8b 35 ce 59 20 00\n44 39 25 cf 59 20 00\n48 89 6c 24 28\n4c 89 7c 24 20\n48 89 5c 24 18\n77 79\n41 8d 5c 24 01\n44 89 e5\n48 ff c5\n41 bd 48 92 60 00\n31 ff\n4d 39 ee\n49 0f 45 fe\n48 89 ee\n48 c1 e6 04\ne8 58 11 00 00\n49 89 c7\n4d 39 ee\n4c 89 3d 83 59 20 00\n75 0b\n0f 10 05 8a 59 20 00\n41 0f 11 07\n8b 05 78 59 20 00\n48 29 c5\n48 c1 e0 04\n4c 89 ff\n48 01 c7\n48 c1 e5 04\n31 f6\n48 89 ea\ne8 0d dd ff ff\n89 1d 57 59 20 00\n4d 89 fe\n48 8b 6c 24 28\n4c 8b 7c 24 20\n48 8b 5c 24 18\n4d 63 ec\n49 c1 e5 04\n4f 8b 24 2e\n4b 8b 7c 2e 08\n44 8b 45 00\n44 8b 4d 04\n41 83 c9 01\n48 8d 45 08\n48 83 ec 08\n48 89 7c 24 18\n4c 89 e6\n48 89 da\n4c 89 f9\n44 89 4c 24 14\nff 75 30\nff 75 28\n48 89 c5\n55\ne8 0f f1 ff ff\n48 83 c4 20\n49 89 c7\n4d 39 fc\n76 10\n4c 8b 64 24 30\n8b 44 24 08\n48 8b 5c 24 10\neb 6e\n4b 8d 04 2e\n4f 8d 74 2e 08\n49 ff c7\n4c 89 38\nb8 a0 93 60 00\n48 8b 4c 24 10\n48 39 c1\n4c 8b 64 24 30\n48 89 cf\n74 05\ne8 f8 da ff ff\n4c 89 ff\ne8 00 11 00 00\n48 89 c3\n49 89 1e\n48 8b 44 24 28\n44 8b 00\n48 83 ec 08\n48 89 df\n4c 89 fe\n48 8b 54 24 20\n48 8b 4c 24 28\n44 8b 4c 24 14\nff 70 30\nff 70 28\n55\ne8 8d f0 ff ff\n48 83 c4 20\n8b 44 24 08\n41 89 04 24\n48 89 d8\n48 83 c4 38\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\ne8 aa da ff ff\n'
p782
S'.text:0000000000403830\n.text:0000000000403831\n.text:0000000000403833\n.text:0000000000403835\n.text:0000000000403837\n.text:0000000000403839\n.text:000000000040383a\n.text:000000000040383e\n.text:0000000000403841\n.text:0000000000403844\n.text:0000000000403847\n.text:000000000040384a\n.text:000000000040384f\n.text:0000000000403852\n.text:0000000000403858\n.text:000000000040385d\n.text:000000000040385f\n.text:0000000000403863\n.text:000000000040386a\n.text:0000000000403871\n.text:0000000000403876\n.text:000000000040387b\n.text:0000000000403880\n.text:0000000000403882\n.text:0000000000403887\n.text:000000000040388a\n.text:000000000040388d\n.text:0000000000403893\n.text:0000000000403895\n.text:0000000000403898\n.text:000000000040389c\n.text:000000000040389f\n.text:00000000004038a3\n.text:00000000004038a8\n.text:00000000004038ab\n.text:00000000004038ae\n.text:00000000004038b5\n.text:00000000004038b7\n.text:00000000004038be\n.text:00000000004038c2\n.text:00000000004038c8\n.text:00000000004038cb\n.text:00000000004038cf\n.text:00000000004038d2\n.text:00000000004038d5\n.text:00000000004038d9\n.text:00000000004038db\n.text:00000000004038de\n.text:00000000004038e3\n.text:00000000004038e9\n.text:00000000004038ec\n.text:00000000004038f1\n.text:00000000004038f6\n.text:00000000004038fb\n.text:00000000004038fe\n.text:0000000000403902\n.text:0000000000403906\n.text:000000000040390b\n.text:000000000040390f\n.text:0000000000403913\n.text:0000000000403917\n.text:000000000040391b\n.text:000000000040391f\n.text:0000000000403924\n.text:0000000000403927\n.text:000000000040392a\n.text:000000000040392d\n.text:0000000000403932\n.text:0000000000403935\n.text:0000000000403938\n.text:000000000040393b\n.text:000000000040393c\n.text:0000000000403941\n.text:0000000000403945\n.text:0000000000403948\n.text:000000000040394b\n.text:000000000040394d\n.text:0000000000403952\n.text:0000000000403956\n.text:000000000040395b\n.text:000000000040395d\n.text:0000000000403961\n.text:0000000000403966\n.text:0000000000403969\n.text:000000000040396c\n.text:0000000000403971\n.text:0000000000403976\n.text:0000000000403979\n.text:000000000040397e\n.text:0000000000403981\n.text:0000000000403983\n.text:0000000000403988\n.text:000000000040398b\n.text:0000000000403990\n.text:0000000000403993\n.text:0000000000403996\n.text:000000000040399b\n.text:000000000040399e\n.text:00000000004039a2\n.text:00000000004039a5\n.text:00000000004039a8\n.text:00000000004039ad\n.text:00000000004039b2\n.text:00000000004039b7\n.text:00000000004039ba\n.text:00000000004039bd\n.text:00000000004039be\n.text:00000000004039c3\n.text:00000000004039c7\n.text:00000000004039cb\n.text:00000000004039cf\n.text:00000000004039d2\n.text:00000000004039d6\n.text:00000000004039d7\n.text:00000000004039d9\n.text:00000000004039db\n.text:00000000004039dd\n.text:00000000004039df\n.text:00000000004039e0\n.text:00000000004039e1\n'
p783
tp784
sS'strcmp'
p785
(S'\n__stdcall strcmp(char * __s1, char * __s2)\n'
p786
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint strcmp(char *__s1,char *__s2)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_strcmp_00609120)();\u000a  return iVar1;\u000a}\u000a\u000a
p787
S'JMP qword ptr [0x00609120]\n'
p788
S'ff 25 aa 7a 20 00\n'
p789
S'.plt:0000000000401670\n'
p790
tp791
sS'set_custom_quoting'
p792
(S'\n__stdcall set_custom_quoting(quoting_options * o, char * left_quote, char * right_quote)\n'
p793
V\u000avoid set_custom_quoting(quoting_options *o,char *left_quote,char *right_quote)\u000a\u000a{\u000a  quoting_options *pqVar1;\u000a  \u000a  pqVar1 = &default_quoting_options;\u000a  if (o != (quoting_options *)0x0) {\u000a    pqVar1 = o;\u000a  }\u000a  pqVar1->style = custom_quoting_style;\u000a  if ((left_quote != (char *)0x0) && (right_quote != (char *)0x0)) {\u000a    pqVar1->left_quote = left_quote;\u000a    pqVar1->right_quote = right_quote;\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  abort();\u000a}\u000a\u000a
p794
S'TEST RDI,RDI\nMOV EAX,0x609360\nCMOVNZ RAX,RDI\nMOV dword ptr [RAX],0xa\nTEST RSI,RSI\nJZ 0x004029c5\nTEST RDX,RDX\nJZ 0x004029c5\nMOV qword ptr [RAX + 0x28],RSI\nMOV qword ptr [RAX + 0x30],RDX\nRET\nPUSH RAX\nCALL 0x00401490\n'
p795
S'48 85 ff\nb8 60 93 60 00\n48 0f 45 c7\nc7 00 0a 00 00 00\n48 85 f6\n74 0e\n48 85 d2\n74 09\n48 89 70 28\n48 89 50 30\nc3\n50\ne8 c5 ea ff ff\n'
p796
S'.text:00000000004029a0\n.text:00000000004029a3\n.text:00000000004029a8\n.text:00000000004029ac\n.text:00000000004029b2\n.text:00000000004029b5\n.text:00000000004029b7\n.text:00000000004029ba\n.text:00000000004029bc\n.text:00000000004029c0\n.text:00000000004029c4\n.text:00000000004029c5\n.text:00000000004029c6\n'
p797
tp798
sS'c_isalpha'
p799
(S'\n__stdcall c_isalpha()\n'
p800
V\u000a_Bool c_isalpha(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x41U < 0x3a) {\u000a    return (_Bool)((byte)(0x3ffffff03ffffff >> ((byte)(in_EDI - 0x41U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p801
S'ADD EDI,-0x41\nCMP EDI,0x39\nJA 0x00404f1b\nMOV RAX,0x3ffffff03ffffff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p802
S'83 c7 bf\n83 ff 39\n77 13\n48 b8 ff ff ff 03 ff ff ff 03\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p803
S'.text:0000000000404f00\n.text:0000000000404f03\n.text:0000000000404f06\n.text:0000000000404f08\n.text:0000000000404f12\n.text:0000000000404f14\n.text:0000000000404f17\n.text:0000000000404f1a\n.text:0000000000404f1b\n.text:0000000000404f1d\n'
p804
tp805
sS'print_group_list'
p806
(S'\n__stdcall print_group_list(char * username)\n'
p807
V\u000a_Bool print_group_list(char *username)\u000a\u000a{\u000a  uint uVar1;\u000a  _Bool _Var2;\u000a  _Bool _Var3;\u000a  int iVar4;\u000a  passwd *ppVar5;\u000a  uint *puVar6;\u000a  undefined8 uVar7;\u000a  char *pcVar8;\u000a  uint in_ECX;\u000a  uint in_EDX;\u000a  byte bVar9;\u000a  __uid_t __uid;\u000a  gid_t **groups;\u000a  char in_R9B;\u000a  long lVar10;\u000a  void *local_38;\u000a  \u000a  if (username == (char *)0x0) {\u000a    _Var3 = true;\u000a    ppVar5 = (passwd *)0x0;\u000a  }\u000a  else {\u000a    ppVar5 = getpwuid(__uid);\u000a    _Var3 = (_Bool)(ppVar5 != (passwd *)0x0);\u000a  }\u000a  _Var2 = print_group();\u000a  if (_Var2 != false) {\u000a    _Var2 = _Var3;\u000a  }\u000a  _Var3 = _Var2;\u000a  if (in_ECX != in_EDX) {\u000a    putchar_unlocked((int)in_R9B);\u000a    _Var3 = print_group();\u000a    if (_Var3 != false) {\u000a      _Var3 = _Var2;\u000a    }\u000a  }\u000a  groups = (gid_t **)(ulong)in_ECX;\u000a  if (ppVar5 != (passwd *)0x0) {\u000a    groups = (gid_t **)(ulong)ppVar5->pw_gid;\u000a  }\u000a  iVar4 = xgetgroups(username,groups);\u000a  if (iVar4 < 0) {\u000a    puVar6 = (uint *)__errno_location();\u000a    uVar1 = *puVar6;\u000a    if (username == (char *)0x0) {\u000a      uVar7 = dcgettext(0,"failed to get groups for the current process",5);\u000a      error(0,(ulong)uVar1,uVar7,uVar7);\u000a    }\u000a    else {\u000a      uVar7 = dcgettext(0,"failed to get groups for user %s",5);\u000a      pcVar8 = quote(username);\u000a      error(0,(ulong)uVar1,uVar7,pcVar8);\u000a    }\u000a    bVar9 = 0;\u000a  }\u000a  else {\u000a    if (iVar4 != 0) {\u000a      lVar10 = 0;\u000a      do {\u000a        uVar1 = *(uint *)((long)local_38 + lVar10 * 4);\u000a        _Var2 = _Var3;\u000a        if ((uVar1 != in_EDX) && (_Var2 = _Var3, uVar1 != in_ECX)) {\u000a          putchar_unlocked((int)in_R9B);\u000a          _Var2 = print_group();\u000a          if (_Var2 != false) {\u000a            _Var2 = _Var3;\u000a          }\u000a        }\u000a        _Var3 = _Var2;\u000a        lVar10 = lVar10 + 1;\u000a      } while (lVar10 < (long)iVar4);\u000a    }\u000a    free(local_38);\u000a    bVar9 = _Var3 & 1;\u000a  }\u000a  return (_Bool)bVar9;\u000a}\u000a\u000a
p808
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV dword ptr [RSP + 0x8],R9D\nMOV EBX,R8D\nMOV R14D,ECX\nMOV R13D,EDX\nMOV R12,RDI\nTEST R12,R12\nJZ 0x00402537\nMOV EDI,ESI\nCALL 0x00401520\nMOV RBP,RAX\nTEST RBP,RBP\nSETNZ R15B\nJMP 0x0040253c\nMOV R15B,0x1\nXOR EBP,EBP\nMOVZX ESI,BL\nMOV EDI,R13D\nMOV dword ptr [RSP + 0xc],ESI\nCALL 0x00402670\nMOV BL,AL\nTEST BL,BL\nJZ 0x00402554\nMOV BL,R15B\nCMP R14D,R13D\nJZ 0x00402577\nMOVSX EDI,byte ptr [RSP + 0x8]\nCALL 0x004016b0\nMOV EDI,R14D\nMOV ESI,dword ptr [RSP + 0xc]\nCALL 0x00402670\nTEST AL,AL\nJZ 0x00402575\nMOV EAX,EBX\nMOV BL,AL\nTEST RBP,RBP\nMOV ESI,R14D\nJZ 0x00402582\nMOV ESI,dword ptr [RBP + 0x14]\nLEA RDX,[RSP + 0x10]\nMOV RDI,R12\nCALL 0x00404b80\nTEST EAX,EAX\nJS 0x004025f7\nMOV RDI,qword ptr [RSP + 0x10]\nJZ 0x004025ed\nMOVSX R12D,byte ptr [RSP + 0x8]\nMOVSXD RBP,EAX\nXOR R15D,R15D\nNOP word ptr CS:[RAX + RAX*0x1]\nMOV EAX,dword ptr [RDI + R15*0x4]\nCMP EAX,R13D\nJZ 0x004025e0\nCMP EAX,R14D\nJZ 0x004025e0\nMOV EDI,R12D\nCALL 0x004016b0\nMOV RAX,qword ptr [RSP + 0x10]\nMOV EDI,dword ptr [RAX + R15*0x4]\nMOV ESI,dword ptr [RSP + 0xc]\nCALL 0x00402670\nTEST AL,AL\nJZ 0x004025de\nMOV EAX,EBX\nMOV BL,AL\nINC R15\nMOV RDI,qword ptr [RSP + 0x10]\nCMP R15,RBP\nJL 0x004025b0\nCALL 0x00401480\nAND BL,0x1\nJMP 0x00402654\nCALL 0x004014a0\nMOV EBX,dword ptr [RAX]\nXOR EDI,EDI\nTEST R12,R12\nJZ 0x00402632\nMOV ESI,0x406208\nMOV EDX,0x5\nCALL 0x00401540\nMOV RBP,RAX\nMOV RDI,R12\nCALL 0x00403d20\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RBP\nCALL 0x004017a0\nJMP 0x00402652\nMOV ESI,0x406229\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBX\nMOV RDX,RCX\nCALL 0x004017a0\nXOR EBX,EBX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p809
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n44 89 4c 24 08\n44 89 c3\n41 89 ce\n41 89 d5\n49 89 fc\n4d 85 e4\n74 13\n89 f7\ne8 f5 ef ff ff\n48 89 c5\n48 85 ed\n41 0f 95 c7\neb 05\n41 b7 01\n31 ed\n0f b6 f3\n44 89 ef\n89 74 24 0c\ne8 25 01 00 00\n88 c3\n84 db\n74 03\n44 88 fb\n45 39 ee\n74 1e\n0f be 7c 24 08\ne8 4d f1 ff ff\n44 89 f7\n8b 74 24 0c\ne8 01 01 00 00\n84 c0\n74 02\n89 d8\n88 c3\n48 85 ed\n44 89 f6\n74 03\n8b 75 14\n48 8d 54 24 10\n4c 89 e7\ne8 f1 25 00 00\n85 c0\n78 64\n48 8b 7c 24 10\n74 53\n44 0f be 64 24 08\n48 63 e8\n45 31 ff\n66 2e 0f 1f 84 00 00 00 00 00\n42 8b 04 bf\n44 39 e8\n74 27\n44 39 f0\n74 22\n44 89 e7\ne8 ea f0 ff ff\n48 8b 44 24 10\n42 8b 3c b8\n8b 74 24 0c\ne8 98 00 00 00\n84 c0\n74 02\n89 d8\n88 c3\n49 ff c7\n48 8b 7c 24 10\n49 39 ef\n7c c3\ne8 8e ee ff ff\n80 e3 01\neb 5d\ne8 a4 ee ff ff\n8b 18\n31 ff\n4d 85 e4\n74 2d\nbe 08 62 40 00\nba 05 00 00 00\ne8 2c ef ff ff\n48 89 c5\n4c 89 e7\ne8 01 17 00 00\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ea\ne8 70 f1 ff ff\neb 20\nbe 29 62 40 00\nba 05 00 00 00\ne8 ff ee ff ff\n48 89 c1\n31 ff\n31 c0\n89 de\n48 89 ca\ne8 4e f1 ff ff\n31 db\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p810
S'.text:0000000000402500\n.text:0000000000402501\n.text:0000000000402503\n.text:0000000000402505\n.text:0000000000402507\n.text:0000000000402509\n.text:000000000040250a\n.text:000000000040250e\n.text:0000000000402513\n.text:0000000000402516\n.text:0000000000402519\n.text:000000000040251c\n.text:000000000040251f\n.text:0000000000402522\n.text:0000000000402524\n.text:0000000000402526\n.text:000000000040252b\n.text:000000000040252e\n.text:0000000000402531\n.text:0000000000402535\n.text:0000000000402537\n.text:000000000040253a\n.text:000000000040253c\n.text:000000000040253f\n.text:0000000000402542\n.text:0000000000402546\n.text:000000000040254b\n.text:000000000040254d\n.text:000000000040254f\n.text:0000000000402551\n.text:0000000000402554\n.text:0000000000402557\n.text:0000000000402559\n.text:000000000040255e\n.text:0000000000402563\n.text:0000000000402566\n.text:000000000040256a\n.text:000000000040256f\n.text:0000000000402571\n.text:0000000000402573\n.text:0000000000402575\n.text:0000000000402577\n.text:000000000040257a\n.text:000000000040257d\n.text:000000000040257f\n.text:0000000000402582\n.text:0000000000402587\n.text:000000000040258a\n.text:000000000040258f\n.text:0000000000402591\n.text:0000000000402593\n.text:0000000000402598\n.text:000000000040259a\n.text:00000000004025a0\n.text:00000000004025a3\n.text:00000000004025a6\n.text:00000000004025b0\n.text:00000000004025b4\n.text:00000000004025b7\n.text:00000000004025b9\n.text:00000000004025bc\n.text:00000000004025be\n.text:00000000004025c1\n.text:00000000004025c6\n.text:00000000004025cb\n.text:00000000004025cf\n.text:00000000004025d3\n.text:00000000004025d8\n.text:00000000004025da\n.text:00000000004025dc\n.text:00000000004025de\n.text:00000000004025e0\n.text:00000000004025e3\n.text:00000000004025e8\n.text:00000000004025eb\n.text:00000000004025ed\n.text:00000000004025f2\n.text:00000000004025f5\n.text:00000000004025f7\n.text:00000000004025fc\n.text:00000000004025fe\n.text:0000000000402600\n.text:0000000000402603\n.text:0000000000402605\n.text:000000000040260a\n.text:000000000040260f\n.text:0000000000402614\n.text:0000000000402617\n.text:000000000040261a\n.text:000000000040261f\n.text:0000000000402622\n.text:0000000000402624\n.text:0000000000402626\n.text:0000000000402628\n.text:000000000040262b\n.text:0000000000402630\n.text:0000000000402632\n.text:0000000000402637\n.text:000000000040263c\n.text:0000000000402641\n.text:0000000000402644\n.text:0000000000402646\n.text:0000000000402648\n.text:000000000040264a\n.text:000000000040264d\n.text:0000000000402652\n.text:0000000000402654\n.text:0000000000402656\n.text:000000000040265a\n.text:000000000040265b\n.text:000000000040265d\n.text:000000000040265f\n.text:0000000000402661\n.text:0000000000402663\n.text:0000000000402664\n'
p811
tp812
sS'getgrouplist'
p813
(S'\n__stdcall getgrouplist(char * __user, __gid_t __group, __gid_t * __groups, int * __ngroups)\n'
p814
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getgrouplist(char *__user,__gid_t __group,__gid_t *__groups,int *__ngroups)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getgrouplist_006091c0)();\u000a  return iVar1;\u000a}\u000a\u000a
p815
S'JMP qword ptr [0x006091c0]\n'
p816
S'ff 25 0a 7a 20 00\n'
p817
S'.plt:00000000004017b0\n'
p818
tp819
sS'quotearg_custom_mem'
p820
(S'\n__stdcall quotearg_custom_mem(char * left_quote, char * right_quote, char * arg, size_t argsize)\n'
p821
V\u000achar * quotearg_custom_mem(char *left_quote,char *right_quote,char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n_custom_mem((char *)0x0,left_quote,right_quote,(size_t)arg);\u000a  return pcVar1;\u000a}\u000a\u000a
p822
S'MOV RAX,RCX\nMOV RCX,RDX\nMOV RDX,RSI\nMOV RSI,RDI\nXOR EDI,EDI\nMOV R8,RAX\nJMP 0x00403c40\n'
p823
S'48 89 c8\n48 89 d1\n48 89 f2\n48 89 fe\n31 ff\n49 89 c0\ne9 5a ff ff ff\n'
p824
S'.text:0000000000403cd0\n.text:0000000000403cd3\n.text:0000000000403cd6\n.text:0000000000403cd9\n.text:0000000000403cdc\n.text:0000000000403cde\n.text:0000000000403ce1\n'
p825
tp826
sS'close_stdout'
p827
(S'\n__stdcall close_stdout()\n'
p828
V\u000avoid close_stdout(void)\u000a\u000a{\u000a  uint uVar1;\u000a  int iVar2;\u000a  int *piVar3;\u000a  undefined8 uVar4;\u000a  uint *puVar5;\u000a  char *arg;\u000a  \u000a  iVar2 = close_stream(stdout);\u000a  if (iVar2 != 0) {\u000a    if (ignore_EPIPE != false) {\u000a      piVar3 = __errno_location();\u000a      if (*piVar3 == 0x20) goto LAB_00402737;\u000a    }\u000a    uVar4 = dcgettext(0,"write error",5);\u000a    arg = file_name;\u000a    puVar5 = (uint *)__errno_location();\u000a    uVar1 = *puVar5;\u000a    if (arg == (char *)0x0) {\u000a      error(0,(ulong)uVar1,0x4062a2,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a      _exit(exit_failure);\u000a    }\u000a    arg = quotearg_colon(arg);\u000a    error(0,(ulong)uVar1,"%s: %s",arg,uVar4);\u000a                    /* WARNING: Subroutine does not return */\u000a    _exit(exit_failure);\u000a  }\u000aLAB_00402737:\u000a  iVar2 = close_stream(stderr);\u000a  if (iVar2 == 0) {\u000a    return;\u000a  }\u000a                    /* WARNING: Subroutine does not return */\u000a  _exit(exit_failure);\u000a}\u000a\u000a
p829
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV RDI,qword ptr [0x006092a8]\nCALL 0x00405020\nTEST EAX,EAX\nJZ 0x00402737\nCMP byte ptr [0x00609350],0x0\nJZ 0x0040274c\nCALL 0x004014a0\nCMP dword ptr [RAX],0x20\nJNZ 0x0040274c\nMOV RDI,qword ptr [0x006092c0]\nCALL 0x00405020\nTEST EAX,EAX\nJNZ 0x00402791\nPOP RBX\nPOP R14\nPOP RBP\nRET\nXOR EDI,EDI\nMOV ESI,0x406292\nMOV EDX,0x5\nCALL 0x00401540\nMOV R14,RAX\nMOV RBX,qword ptr [0x00609348]\nCALL 0x004014a0\nTEST RBX,RBX\nMOV EBP,dword ptr [RAX]\nJNZ 0x0040279c\nXOR EDI,EDI\nMOV EDX,0x4062a2\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RCX,R14\nCALL 0x004017a0\nMOV EDI,dword ptr [0x00609230]\nCALL 0x004014c0\nMOV EDI,dword ptr [0x00609230]\nCALL 0x004014c0\nMOV RDI,RBX\nCALL 0x00403bc0\nMOV RCX,RAX\nXOR EDI,EDI\nMOV EDX,0x40629e\nXOR EAX,EAX\nMOV ESI,EBP\nMOV R8,R14\nCALL 0x004017a0\nMOV EDI,dword ptr [0x00609230]\nCALL 0x004014c0\n'
p830
S'55\n41 56\n53\n48 8b 3d 8d 6b 20 00\ne8 00 29 00 00\n85 c0\n74 13\n80 3d 25 6c 20 00 00\n74 1f\ne8 6e ed ff ff\n83 38 20\n75 15\n48 8b 3d 82 6b 20 00\ne8 dd 28 00 00\n85 c0\n75 4a\n5b\n41 5e\n5d\nc3\n31 ff\nbe 92 62 40 00\nba 05 00 00 00\ne8 e3 ed ff ff\n49 89 c6\n48 8b 1d e1 6b 20 00\ne8 34 ed ff ff\n48 85 db\n8b 28\n75 29\n31 ff\nba a2 62 40 00\n31 c0\n89 ee\n4c 89 f1\ne8 1a f0 ff ff\n8b 3d a4 6a 20 00\ne8 2f ed ff ff\n8b 3d 99 6a 20 00\ne8 24 ed ff ff\n48 89 df\ne8 1c 14 00 00\n48 89 c1\n31 ff\nba 9e 62 40 00\n31 c0\n89 ee\n4d 89 f0\ne8 e6 ef ff ff\n8b 3d 70 6a 20 00\ne8 fb ec ff ff\n'
p831
S'.text:0000000000402710\n.text:0000000000402711\n.text:0000000000402713\n.text:0000000000402714\n.text:000000000040271b\n.text:0000000000402720\n.text:0000000000402722\n.text:0000000000402724\n.text:000000000040272b\n.text:000000000040272d\n.text:0000000000402732\n.text:0000000000402735\n.text:0000000000402737\n.text:000000000040273e\n.text:0000000000402743\n.text:0000000000402745\n.text:0000000000402747\n.text:0000000000402748\n.text:000000000040274a\n.text:000000000040274b\n.text:000000000040274c\n.text:000000000040274e\n.text:0000000000402753\n.text:0000000000402758\n.text:000000000040275d\n.text:0000000000402760\n.text:0000000000402767\n.text:000000000040276c\n.text:000000000040276f\n.text:0000000000402771\n.text:0000000000402773\n.text:0000000000402775\n.text:000000000040277a\n.text:000000000040277c\n.text:000000000040277e\n.text:0000000000402781\n.text:0000000000402786\n.text:000000000040278c\n.text:0000000000402791\n.text:0000000000402797\n.text:000000000040279c\n.text:000000000040279f\n.text:00000000004027a4\n.text:00000000004027a7\n.text:00000000004027a9\n.text:00000000004027ae\n.text:00000000004027b0\n.text:00000000004027b2\n.text:00000000004027b5\n.text:00000000004027ba\n.text:00000000004027c0\n'
p832
tp833
sS'version_etc_ar'
p834
(S'\n__stdcall version_etc_ar(FILE * stream, char * command_name, char * package, char * version, char * * authors)\n'
p835
V\u000avoid version_etc_ar(FILE *stream,char *command_name,char *package,char *version,char **authors)\u000a\u000a{\u000a  long lVar1;\u000a  size_t n_authors;\u000a  \u000a  n_authors = 0xffffffffffffffff;\u000a  do {\u000a    lVar1 = n_authors + 1;\u000a    n_authors = n_authors + 1;\u000a  } while (authors[lVar1] != (char *)0x0);\u000a  version_etc_arn(stream,command_name,package,version,authors,n_authors);\u000a  return;\u000a}\u000a\u000a
p836
S'MOV R9,-0x1\nNOP word ptr [RAX + RAX*0x1]\nCMP qword ptr [R8 + R9*0x8 + 0x8],0x0\nLEA R9,[R9 + 0x1]\nJNZ 0x00404810\nJMP 0x004044a0\n'
p837
S'49 c7 c1 ff ff ff ff\n66 0f 1f 84 00 00 00 00 00\n4b 83 7c c8 08 00\n4d 8d 49 01\n75 f4\ne9 7f fc ff ff\n'
p838
S'.text:0000000000404800\n.text:0000000000404807\n.text:0000000000404810\n.text:0000000000404816\n.text:000000000040481a\n.text:000000000040481c\n'
p839
tp840
sS'geteuid'
p841
(S'\n__stdcall geteuid()\n'
p842
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__uid_t geteuid(void)\u000a\u000a{\u000a  __uid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_geteuid_006090e8)();\u000a  return _Var1;\u000a}\u000a\u000a
p843
S'JMP qword ptr [0x006090e8]\n'
p844
S'ff 25 e2 7a 20 00\n'
p845
S'.plt:0000000000401600\n'
p846
tp847
sS'rpl_calloc'
p848
(S'\n__stdcall rpl_calloc(size_t n, size_t s)\n'
p849
V\u000avoid * rpl_calloc(size_t n,size_t s)\u000a\u000a{\u000a  void *pvVar1;\u000a  size_t sVar2;\u000a  int *piVar3;\u000a  size_t sVar4;\u000a  \u000a  sVar2 = 1;\u000a  if (n == 0) {\u000a    sVar4 = 1;\u000a  }\u000a  else {\u000a    sVar4 = 1;\u000a    if ((s != 0) && (sVar2 = s, sVar4 = n, (s * n) / s != n)) {\u000a      piVar3 = __errno_location();\u000a      *piVar3 = 0xc;\u000a      return (void *)0x0;\u000a    }\u000a  }\u000a  pvVar1 = (void *)(*(code *)PTR_calloc_00609118)(sVar4,sVar2);\u000a  return pvVar1;\u000a}\u000a\u000a
p850
S'TEST RDI,RDI\nMOV EAX,0x1\nJZ 0x00404ebb\nTEST RSI,RSI\nMOV ECX,0x1\nJZ 0x00404ec0\nMOV RAX,RSI\nIMUL RAX,RDI\nXOR EDX,EDX\nDIV RSI\nCMP RAX,RDI\nMOV RAX,RSI\nMOV RCX,RDI\nJZ 0x00404ec0\nPUSH RAX\nCALL 0x004014a0\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nMOV ECX,0x1\nMOV RDI,RCX\nMOV RSI,RAX\nJMP 0x00401660\n'
p851
S'48 85 ff\nb8 01 00 00 00\n74 31\n48 85 f6\nb9 01 00 00 00\n74 2c\n48 89 f0\n48 0f af c7\n31 d2\n48 f7 f6\n48 39 f8\n48 89 f0\n48 89 f9\n74 15\n50\ne8 ef c5 ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\nb9 01 00 00 00\n48 89 cf\n48 89 c6\ne9 95 c7 ff ff\n'
p852
S'.text:0000000000404e80\n.text:0000000000404e83\n.text:0000000000404e88\n.text:0000000000404e8a\n.text:0000000000404e8d\n.text:0000000000404e92\n.text:0000000000404e94\n.text:0000000000404e97\n.text:0000000000404e9b\n.text:0000000000404e9d\n.text:0000000000404ea0\n.text:0000000000404ea3\n.text:0000000000404ea6\n.text:0000000000404ea9\n.text:0000000000404eab\n.text:0000000000404eac\n.text:0000000000404eb1\n.text:0000000000404eb7\n.text:0000000000404eb9\n.text:0000000000404eba\n.text:0000000000404ebb\n.text:0000000000404ec0\n.text:0000000000404ec3\n.text:0000000000404ec6\n'
p853
tp854
sS'memset'
p855
(S'\n__stdcall memset(void * __s, int __c, size_t __n)\n'
p856
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid * memset(void *__s,int __c,size_t __n)\u000a\u000a{\u000a  void *pvVar1;\u000a  \u000a  pvVar1 = (void *)(*(code *)PTR_memset_006090e0)();\u000a  return pvVar1;\u000a}\u000a\u000a
p857
S'JMP qword ptr [0x006090e0]\n'
p858
S'ff 25 ea 7a 20 00\n'
p859
S'.plt:00000000004015f0\n'
p860
tp861
sS'c_isxdigit'
p862
(S'\n__stdcall c_isxdigit()\n'
p863
V\u000a_Bool c_isxdigit(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  if (in_EDI - 0x30U < 0x37) {\u000a    return (_Bool)((byte)(0x7e0000007e03ff >> ((byte)(in_EDI - 0x30U) & 0x3f)) & 1);\u000a  }\u000a  return false;\u000a}\u000a\u000a
p864
S'ADD EDI,-0x30\nCMP EDI,0x36\nJA 0x00404ffb\nMOV RAX,0x7e0000007e03ff\nMOV ECX,EDI\nSHR RAX,CL\nAND EAX,0x1\nRET\nXOR EAX,EAX\nRET\n'
p865
S'83 c7 d0\n83 ff 36\n77 13\n48 b8 ff 03 7e 00 00 00 7e 00\n89 f9\n48 d3 e8\n83 e0 01\nc3\n31 c0\nc3\n'
p866
S'.text:0000000000404fe0\n.text:0000000000404fe3\n.text:0000000000404fe6\n.text:0000000000404fe8\n.text:0000000000404ff2\n.text:0000000000404ff4\n.text:0000000000404ff7\n.text:0000000000404ffa\n.text:0000000000404ffb\n.text:0000000000404ffd\n'
p867
tp868
sS'__libc_csu_fini'
p869
(S'\n__stdcall __libc_csu_fini()\n'
p870
V\u000avoid __libc_csu_fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p871
S'RET\n'
p872
S'f3 c3\n'
p873
S'.text:0000000000405780\n'
p874
tp875
sS'getuid'
p876
(S'\n__stdcall getuid()\n'
p877
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__uid_t getuid(void)\u000a\u000a{\u000a  __uid_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_getuid_006090a0)();\u000a  return _Var1;\u000a}\u000a\u000a
p878
S'JMP qword ptr [0x006090a0]\n'
p879
S'ff 25 2a 7b 20 00\n'
p880
S'.plt:0000000000401570\n'
p881
tp882
sS'getc_unlocked'
p883
(S'\n__stdcall getc_unlocked(FILE * __stream)\n'
p884
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint getc_unlocked(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_getc_unlocked_00609060)();\u000a  return iVar1;\u000a}\u000a\u000a
p885
S'JMP qword ptr [0x00609060]\n'
p886
S'ff 25 6a 7b 20 00\n'
p887
S'.plt:00000000004014f0\n'
p888
tp889
sS'abort'
p890
(S'\n__stdcall abort()\n'
p891
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000avoid abort(void)\u000a\u000a{\u000a  (*(code *)PTR_abort_00609030)();\u000a  return;\u000a}\u000a\u000a
p892
S'JMP qword ptr [0x00609030]\n'
p893
S'ff 25 9a 7b 20 00\n'
p894
S'.plt:0000000000401490\n'
p895
tp896
sS'c_isascii'
p897
(S'\n__stdcall c_isascii()\n'
p898
V\u000a_Bool c_isascii(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  return (_Bool)(in_EDI < 0x80);\u000a}\u000a\u000a
p899
S'CMP EDI,0x80\nSETC AL\nRET\n'
p900
S'81 ff 80 00 00 00\n0f 92 c0\nc3\n'
p901
S'.text:0000000000404f20\n.text:0000000000404f26\n.text:0000000000404f29\n'
p902
tp903
sS'version_etc'
p904
(S'\n__stdcall version_etc(FILE * stream, char * command_name, char * package, char * version)\n'
p905
V\u000avoid version_etc(FILE *stream,char *command_name,char *package,char *version,...)\u000a\u000a{\u000a  char in_AL;\u000a  undefined8 in_R8;\u000a  undefined8 in_R9;\u000a  undefined4 in_XMM0_Da;\u000a  undefined4 in_XMM1_Da;\u000a  undefined4 in_XMM2_Da;\u000a  undefined4 in_XMM3_Da;\u000a  undefined4 in_XMM4_Da;\u000a  undefined4 in_XMM5_Da;\u000a  undefined4 in_XMM6_Da;\u000a  undefined4 in_XMM7_Da;\u000a  va_list authors;\u000a  __va_list_tag local_d8;\u000a  undefined local_b8 [32];\u000a  undefined8 local_98;\u000a  undefined8 local_90;\u000a  undefined4 local_88;\u000a  undefined4 local_78;\u000a  undefined4 local_68;\u000a  undefined4 local_58;\u000a  undefined4 local_48;\u000a  undefined4 local_38;\u000a  undefined4 local_28;\u000a  undefined4 local_18;\u000a  \u000a  if (in_AL != 0) {\u000a    local_88 = in_XMM0_Da;\u000a    local_78 = in_XMM1_Da;\u000a    local_68 = in_XMM2_Da;\u000a    local_58 = in_XMM3_Da;\u000a    local_48 = in_XMM4_Da;\u000a    local_38 = in_XMM5_Da;\u000a    local_28 = in_XMM6_Da;\u000a    local_18 = in_XMM7_Da;\u000a  }\u000a  local_d8.reg_save_area = local_b8;\u000a  local_d8.overflow_arg_area = &authors[0].overflow_arg_area;\u000a  local_d8.fp_offset = 0x30;\u000a  local_d8.gp_offset = 0x20;\u000a  local_98 = in_R8;\u000a  local_90 = in_R9;\u000a  version_etc_va(stream,command_name,package,version,&local_d8);\u000a  return;\u000a}\u000a\u000a
p906
S'SUB RSP,0xd8\nTEST AL,AL\nJZ 0x004048d2\nMOVAPS xmmword ptr [RSP + 0x50],XMM0\nMOVAPS xmmword ptr [RSP + 0x60],XMM1\nMOVAPS xmmword ptr [RSP + 0x70],XMM2\nMOVAPS xmmword ptr [0x80 + RSP],XMM3\nMOVAPS xmmword ptr [0x90 + RSP],XMM4\nMOVAPS xmmword ptr [0xa0 + RSP],XMM5\nMOVAPS xmmword ptr [0xb0 + RSP],XMM6\nMOVAPS xmmword ptr [0xc0 + RSP],XMM7\nMOV qword ptr [RSP + 0x48],R9\nMOV qword ptr [RSP + 0x40],R8\nLEA RAX,[RSP + 0x20]\nMOV qword ptr [RSP + 0x10],RAX\nLEA RAX,[0xe0 + RSP]\nMOV qword ptr [RSP + 0x8],RAX\nMOV dword ptr [RSP + 0x4],0x30\nMOV dword ptr [RSP],0x20\nMOV R8,RSP\nCALL 0x00404830\nADD RSP,0xd8\nRET\n'
p907
S'48 81 ec d8 00 00 00\n84 c0\n74 37\n0f 29 44 24 50\n0f 29 4c 24 60\n0f 29 54 24 70\n0f 29 9c 24 80 00 00 00\n0f 29 a4 24 90 00 00 00\n0f 29 ac 24 a0 00 00 00\n0f 29 b4 24 b0 00 00 00\n0f 29 bc 24 c0 00 00 00\n4c 89 4c 24 48\n4c 89 44 24 40\n48 8d 44 24 20\n48 89 44 24 10\n48 8d 84 24 e0 00 00 00\n48 89 44 24 08\nc7 44 24 04 30 00 00 00\nc7 04 24 20 00 00 00\n49 89 e0\ne8 26 ff ff ff\n48 81 c4 d8 00 00 00\nc3\n'
p908
S'.text:0000000000404890\n.text:0000000000404897\n.text:0000000000404899\n.text:000000000040489b\n.text:00000000004048a0\n.text:00000000004048a5\n.text:00000000004048aa\n.text:00000000004048b2\n.text:00000000004048ba\n.text:00000000004048c2\n.text:00000000004048ca\n.text:00000000004048d2\n.text:00000000004048d7\n.text:00000000004048dc\n.text:00000000004048e1\n.text:00000000004048e6\n.text:00000000004048ee\n.text:00000000004048f3\n.text:00000000004048fb\n.text:0000000000404902\n.text:0000000000404905\n.text:000000000040490a\n.text:0000000000404911\n'
p909
tp910
sS'realloc_groupbuf'
p911
(S'\n__stdcall realloc_groupbuf(gid_t * g, size_t num)\n'
p912
V\u000agid_t * realloc_groupbuf(gid_t *g,size_t num)\u000a\u000a{\u000a  int *piVar1;\u000a  gid_t *pgVar2;\u000a  \u000a  if (SUB168(ZEXT816(num) * ZEXT816(4) >> 0x40,0) != 0) {\u000a    piVar1 = __errno_location();\u000a    *piVar1 = 0xc;\u000a    return (gid_t *)0x0;\u000a  }\u000a  pgVar2 = (gid_t *)realloc(g,num << 2);\u000a  return pgVar2;\u000a}\u000a\u000a
p913
S'PUSH RAX\nMOV ECX,0x4\nMOV RAX,RSI\nMUL RCX\nJNO 0x004055bd\nCALL 0x004014a0\nMOV dword ptr [RAX],0xc\nXOR EAX,EAX\nPOP RCX\nRET\nSHL RSI,0x2\nCALL 0x00401760\nPOP RCX\nRET\n'
p914
S'50\nb9 04 00 00 00\n48 89 f0\n48 f7 e1\n71 0f\ne8 ed be ff ff\nc7 00 0c 00 00 00\n31 c0\n59\nc3\n48 c1 e6 02\ne8 9a c1 ff ff\n59\nc3\n'
p915
S'.text:00000000004055a0\n.text:00000000004055a1\n.text:00000000004055a6\n.text:00000000004055a9\n.text:00000000004055ac\n.text:00000000004055ae\n.text:00000000004055b3\n.text:00000000004055b9\n.text:00000000004055bb\n.text:00000000004055bc\n.text:00000000004055bd\n.text:00000000004055c1\n.text:00000000004055c6\n.text:00000000004055c7\n'
p916
tp917
sS'__ctype_b_loc'
p918
(S'\n__stdcall __ctype_b_loc()\n'
p919
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aushort ** __ctype_b_loc(void)\u000a\u000a{\u000a  ushort **ppuVar1;\u000a  \u000a  ppuVar1 = (ushort **)(*(code *)PTR___ctype_b_loc_00609210)();\u000a  return ppuVar1;\u000a}\u000a\u000a
p920
S'JMP qword ptr [0x00609210]\n'
p921
S'ff 25 ba 79 20 00\n'
p922
S'.plt:0000000000401850\n'
p923
tp924
sS'lseek'
p925
(S'\n__stdcall lseek(int __fd, __off_t __offset, int __whence)\n'
p926
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000a__off_t lseek(int __fd,__off_t __offset,int __whence)\u000a\u000a{\u000a  __off_t _Var1;\u000a  \u000a  _Var1 = (*(code *)PTR_lseek_006090d0)();\u000a  return _Var1;\u000a}\u000a\u000a
p927
S'JMP qword ptr [0x006090d0]\n'
p928
S'ff 25 fa 7a 20 00\n'
p929
S'.plt:00000000004015d0\n'
p930
tp931
sS'quotearg'
p932
(S'\n__stdcall quotearg(char * arg)\n'
p933
V\u000achar * quotearg(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_n((char *)0x0);\u000a  return pcVar1;\u000a}\u000a\u000a
p934
S'MOV RAX,RDI\nXOR EDI,EDI\nMOV RSI,RAX\nJMP 0x00403820\n'
p935
S'48 89 f8\n31 ff\n48 89 c6\ne9 13 fe ff ff\n'
p936
S'.text:0000000000403a00\n.text:0000000000403a03\n.text:0000000000403a05\n.text:0000000000403a08\n'
p937
tp938
sS'_start'
p939
(S'\n__stdcall _start()\n'
p940
V\u000avoid _start(undefined8 uParm1,undefined8 uParm2,undefined8 uParm3)\u000a\u000a{\u000a  undefined8 in_stack_00000000;\u000a  undefined auStack8 [8];\u000a  \u000a  (*(code *)PTR___libc_start_main_00608ff0)\u000a            (main,in_stack_00000000,&stack0x00000008,__libc_csu_init,__libc_csu_fini,uParm3,auStack8\u000a            );\u000a  do {\u000a                    /* WARNING: Do nothing block with infinite loop */\u000a  } while( true );\u000a}\u000a\u000a
p941
S'XOR EBP,EBP\nMOV R9,RDX\nPOP RSI\nMOV RDX,RSP\nAND RSP,-0x10\nPUSH RAX\nPUSH RSP\nMOV R8,0x405780\nMOV RCX,0x405710\nMOV RDI,0x401bc0\nCALL qword ptr [0x00608ff0]\nHLT\n'
p942
S'31 ed\n49 89 d1\n5e\n48 89 e2\n48 83 e4 f0\n50\n54\n49 c7 c0 80 57 40 00\n48 c7 c1 10 57 40 00\n48 c7 c7 c0 1b 40 00\nff 15 66 77 20 00\nf4\n'
p943
S'.text:0000000000401860\n.text:0000000000401862\n.text:0000000000401865\n.text:0000000000401866\n.text:0000000000401869\n.text:000000000040186d\n.text:000000000040186e\n.text:000000000040186f\n.text:0000000000401876\n.text:000000000040187d\n.text:0000000000401884\n.text:000000000040188a\n'
p944
tp945
sS'c_iscntrl'
p946
(S'\n__stdcall c_iscntrl()\n'
p947
V\u000a_Bool c_iscntrl(void)\u000a\u000a{\u000a  uint in_EDI;\u000a  \u000a  if ((0x1f < in_EDI) && (in_EDI != 0x7f)) {\u000a    return false;\u000a  }\u000a  return true;\u000a}\u000a\u000a
p948
S'MOV AL,0x1\nCMP EDI,0x20\nJNC 0x00404f48\nRET\nCMP EDI,0x7f\nJZ 0x00404f47\nXOR EAX,EAX\nRET\n'
p949
S'b0 01\n83 ff 20\n73 01\nc3\n83 ff 7f\n74 fa\n31 c0\nc3\n'
p950
S'.text:0000000000404f40\n.text:0000000000404f42\n.text:0000000000404f45\n.text:0000000000404f47\n.text:0000000000404f48\n.text:0000000000404f4b\n.text:0000000000404f4d\n.text:0000000000404f4f\n'
p951
tp952
sS'parse_user_spec'
p953
(S'\n__stdcall parse_user_spec(char * spec, uid_t * uid, gid_t * gid, char * * username, char * * groupname)\n'
p954
V\u000achar * parse_user_spec(char *spec,uid_t *uid,gid_t *gid,char **username,char **groupname)\u000a\u000a{\u000a  char *separator;\u000a  char *pcVar1;\u000a  char *pcVar2;\u000a  \u000a  if (gid == (gid_t *)0x0) {\u000a    separator = (char *)0x0;\u000a  }\u000a  else {\u000a    separator = strchr(spec,0x3a);\u000a  }\u000a  pcVar1 = parse_with_separator(spec,separator,uid,gid,username,groupname);\u000a  pcVar2 = pcVar1;\u000a  if ((((gid != (gid_t *)0x0) && (pcVar2 = pcVar1, separator == (char *)0x0)) &&\u000a      (pcVar2 = pcVar1, pcVar1 != (char *)0x0)) &&\u000a     ((separator = strchr(spec,0x2e), pcVar2 = pcVar1, separator != (char *)0x0 &&\u000a      (pcVar2 = parse_with_separator(spec,separator,uid,gid,username,groupname),\u000a      pcVar2 != (char *)0x0)))) {\u000a    pcVar2 = pcVar1;\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p955
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV RBP,R8\nMOV R15,RCX\nMOV RBX,RDX\nMOV R12,RSI\nMOV R13,RDI\nTEST RBX,RBX\nJZ 0x00404161\nMOV ESI,0x3a\nMOV RDI,R13\nCALL 0x004015a0\nMOV R14,RAX\nJMP 0x00404164\nXOR R14D,R14D\nMOV RDI,R13\nMOV RSI,R14\nMOV RDX,R12\nMOV RCX,RBX\nMOV R8,R15\nMOV qword ptr [RSP],RBP\nMOV R9,RBP\nCALL 0x004041e0\nMOV RBP,RAX\nTEST RBX,RBX\nJZ 0x004041c4\nTEST R14,R14\nJNZ 0x004041c4\nTEST RBP,RBP\nJZ 0x004041c4\nMOV ESI,0x2e\nMOV RDI,R13\nCALL 0x004015a0\nTEST RAX,RAX\nJZ 0x004041c4\nMOV RDI,R13\nMOV RSI,RAX\nMOV RDX,R12\nMOV RCX,RBX\nMOV R8,R15\nMOV R9,qword ptr [RSP]\nCALL 0x004041e0\nTEST RAX,RAX\nCMOVNZ RAX,RBP\nJMP 0x004041c7\nMOV RAX,RBP\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p956
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n4c 89 c5\n49 89 cf\n48 89 d3\n49 89 f4\n49 89 fd\n48 85 db\n74 12\nbe 3a 00 00 00\n4c 89 ef\ne8 44 d4 ff ff\n49 89 c6\neb 03\n45 31 f6\n4c 89 ef\n4c 89 f6\n4c 89 e2\n48 89 d9\n4d 89 f8\n48 89 2c 24\n49 89 e9\ne8 61 00 00 00\n48 89 c5\n48 85 db\n74 3d\n4d 85 f6\n75 38\n48 85 ed\n74 33\nbe 2e 00 00 00\n4c 89 ef\ne8 02 d4 ff ff\n48 85 c0\n74 21\n4c 89 ef\n48 89 c6\n4c 89 e2\n48 89 d9\n4d 89 f8\n4c 8b 0c 24\ne8 25 00 00 00\n48 85 c0\n48 0f 45 c5\neb 03\n48 89 e8\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p957
S'.text:0000000000404130\n.text:0000000000404131\n.text:0000000000404133\n.text:0000000000404135\n.text:0000000000404137\n.text:0000000000404139\n.text:000000000040413a\n.text:000000000040413b\n.text:000000000040413e\n.text:0000000000404141\n.text:0000000000404144\n.text:0000000000404147\n.text:000000000040414a\n.text:000000000040414d\n.text:000000000040414f\n.text:0000000000404154\n.text:0000000000404157\n.text:000000000040415c\n.text:000000000040415f\n.text:0000000000404161\n.text:0000000000404164\n.text:0000000000404167\n.text:000000000040416a\n.text:000000000040416d\n.text:0000000000404170\n.text:0000000000404173\n.text:0000000000404177\n.text:000000000040417a\n.text:000000000040417f\n.text:0000000000404182\n.text:0000000000404185\n.text:0000000000404187\n.text:000000000040418a\n.text:000000000040418c\n.text:000000000040418f\n.text:0000000000404191\n.text:0000000000404196\n.text:0000000000404199\n.text:000000000040419e\n.text:00000000004041a1\n.text:00000000004041a3\n.text:00000000004041a6\n.text:00000000004041a9\n.text:00000000004041ac\n.text:00000000004041af\n.text:00000000004041b2\n.text:00000000004041b6\n.text:00000000004041bb\n.text:00000000004041be\n.text:00000000004041c2\n.text:00000000004041c4\n.text:00000000004041c7\n.text:00000000004041cb\n.text:00000000004041cc\n.text:00000000004041ce\n.text:00000000004041d0\n.text:00000000004041d2\n.text:00000000004041d4\n.text:00000000004041d5\n'
p958
tp959
sS'c_isblank'
p960
(S'\n__stdcall c_isblank()\n'
p961
V\u000a_Bool c_isblank(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI == 9 || in_EDI == 0x20);\u000a}\u000a\u000a
p962
S'CMP EDI,0x20\nSETZ CL\nCMP EDI,0x9\nSETZ AL\nOR AL,CL\nRET\n'
p963
S'83 ff 20\n0f 94 c1\n83 ff 09\n0f 94 c0\n08 c8\nc3\n'
p964
S'.text:0000000000404f30\n.text:0000000000404f33\n.text:0000000000404f36\n.text:0000000000404f39\n.text:0000000000404f3c\n.text:0000000000404f3e\n'
p965
tp966
sS'quotearg_n_mem'
p967
(S'\n__stdcall quotearg_n_mem(char * arg, size_t argsize)\n'
p968
V\u000achar * quotearg_n_mem(char *arg,size_t argsize)\u000a\u000a{\u000a  char *pcVar1;\u000a  quoting_options *options;\u000a  \u000a  pcVar1 = quotearg_n_options(arg,argsize,options);\u000a  return pcVar1;\u000a}\u000a\u000a
p969
S'MOV ECX,0x609360\nJMP 0x00403830\n'
p970
S'b9 60 93 60 00\ne9 36 fe ff ff\n'
p971
S'.text:00000000004039f0\n.text:00000000004039f5\n'
p972
tp973
sS'atexit'
p974
(S'\n__stdcall atexit(__func * __func)\n'
p975
V\u000a/* WARNING: Removing unreachable block (ram,0x004057b0) */\u000a\u000aint atexit(void (*__func)(int,void *))\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR___cxa_atexit_006091e0)(__func,0,__dso_handle);\u000a  return iVar1;\u000a}\u000a\u000a
p976
S'MOV RAX,0x609220\nTEST RAX,RAX\nJZ 0x004057b0\nMOV RDX,qword ptr [RAX]\nXOR ESI,ESI\nJMP 0x004017f0\nXOR EDX,EDX\nXOR ESI,ESI\nJMP 0x004017f0\n'
p977
S'48 c7 c0 20 92 60 00\n48 85 c0\n74 14\n48 8b 10\n31 f6\ne9 4a c0 ff ff\n31 d2\n31 f6\ne9 37 c0 ff ff\n'
p978
S'.text:0000000000405790\n.text:0000000000405797\n.text:000000000040579a\n.text:000000000040579c\n.text:000000000040579f\n.text:00000000004057a1\n.text:00000000004057b0\n.text:00000000004057b2\n.text:00000000004057b4\n'
p979
tp980
sS'__printf_chk'
p981
(S'\n__stdcall __printf_chk()\n'
p982
V\u000avoid __printf_chk(void)\u000a\u000a{\u000a  (*(code *)PTR___printf_chk_006091b0)();\u000a  return;\u000a}\u000a\u000a
p983
S'JMP qword ptr [0x006091b0]\n'
p984
S'ff 25 1a 7a 20 00\n'
p985
S'.plt:0000000000401790\n'
p986
tp987
sS'fdopen'
p988
(S'\n__stdcall fdopen(int __fd, char * __modes)\n'
p989
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aFILE * fdopen(int __fd,char *__modes)\u000a\u000a{\u000a  FILE *pFVar1;\u000a  \u000a  pFVar1 = (FILE *)(*(code *)PTR_fdopen_006091a0)();\u000a  return pFVar1;\u000a}\u000a\u000a
p990
S'JMP qword ptr [0x006091a0]\n'
p991
S'ff 25 2a 7a 20 00\n'
p992
S'.plt:0000000000401770\n'
p993
tp994
sS'error'
p995
(S'\n__stdcall error()\n'
p996
V\u000avoid error(void)\u000a\u000a{\u000a  (*(code *)PTR_error_006091b8)();\u000a  return;\u000a}\u000a\u000a
p997
S'JMP qword ptr [0x006091b8]\n'
p998
S'ff 25 12 7a 20 00\n'
p999
S'.plt:00000000004017a0\n'
p1000
tp1001
sS'strcaseeq6'
p1002
(S'\n__stdcall strcaseeq6()\n'
p1003
V\u000aint strcaseeq6(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  uint in_ESI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 6) != (char)in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 6) & 0xffffffdfU) != in_ESI) {\u000a      return 0;\u000a    }\u000a  }\u000a  if ((char)in_ESI == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq7();\u000a  return iVar2;\u000a}\u000a\u000a
p1004
S'PUSH RBP\nPUSH RBX\nPUSH RAX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404fd0\nMOVSX ECX,byte ptr [RBX + 0x6]\nTEST AL,AL\nJZ 0x004040c2\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x004040c9\nJMP 0x004040de\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x004040de\nTEST BPL,BPL\nJZ 0x004040d9\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP RBP\nJMP 0x004040f0\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP RBP\nRET\n'
p1005
S'55\n53\n50\n89 f5\n48 89 fb\n89 ef\ne8 21 0f 00 00\n0f be 4b 06\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1c\n31 c0\n40 38 e9\n75 15\n40 84 ed\n74 0b\n48 89 df\n48 83 c4 08\n5b\n5d\neb 17\nb8 01 00 00 00\n48 83 c4 08\n5b\n5d\nc3\n'
p1006
S'.text:00000000004040a0\n.text:00000000004040a1\n.text:00000000004040a2\n.text:00000000004040a3\n.text:00000000004040a5\n.text:00000000004040a8\n.text:00000000004040aa\n.text:00000000004040af\n.text:00000000004040b3\n.text:00000000004040b5\n.text:00000000004040b7\n.text:00000000004040ba\n.text:00000000004040bc\n.text:00000000004040be\n.text:00000000004040c0\n.text:00000000004040c2\n.text:00000000004040c4\n.text:00000000004040c7\n.text:00000000004040c9\n.text:00000000004040cc\n.text:00000000004040ce\n.text:00000000004040d1\n.text:00000000004040d5\n.text:00000000004040d6\n.text:00000000004040d7\n.text:00000000004040d9\n.text:00000000004040de\n.text:00000000004040e2\n.text:00000000004040e3\n.text:00000000004040e4\n'
p1007
tp1008
sS'strcaseeq5'
p1009
(S'\n__stdcall strcaseeq5()\n'
p1010
V\u000aint strcaseeq5(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 5) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 5) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq6();\u000a  return iVar2;\u000a}\u000a\u000a
p1011
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404fd0\nMOVSX ECX,byte ptr [RBX + 0x5]\nTEST AL,AL\nJZ 0x00404076\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x0040407d\nJMP 0x00404094\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404094\nTEST BPL,BPL\nJZ 0x0040408f\nMOVSX ESI,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R14\nPOP RBP\nJMP 0x004040a0\nMOV EAX,0x1\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1012
S'55\n41 56\n53\n41 89 d6\n89 f5\n48 89 fb\n89 ef\ne8 6d 0f 00 00\n0f be 4b 05\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 1e\n31 c0\n40 38 e9\n75 17\n40 84 ed\n74 0d\n41 0f be f6\n48 89 df\n5b\n41 5e\n5d\neb 11\nb8 01 00 00 00\n5b\n41 5e\n5d\nc3\n'
p1013
S'.text:0000000000404050\n.text:0000000000404051\n.text:0000000000404053\n.text:0000000000404054\n.text:0000000000404057\n.text:0000000000404059\n.text:000000000040405c\n.text:000000000040405e\n.text:0000000000404063\n.text:0000000000404067\n.text:0000000000404069\n.text:000000000040406b\n.text:000000000040406e\n.text:0000000000404070\n.text:0000000000404072\n.text:0000000000404074\n.text:0000000000404076\n.text:0000000000404078\n.text:000000000040407b\n.text:000000000040407d\n.text:0000000000404080\n.text:0000000000404082\n.text:0000000000404086\n.text:0000000000404089\n.text:000000000040408a\n.text:000000000040408c\n.text:000000000040408d\n.text:000000000040408f\n.text:0000000000404094\n.text:0000000000404095\n.text:0000000000404097\n.text:0000000000404098\n'
p1014
tp1015
sS'emit_ancillary_info'
p1016
(S'\n__stdcall emit_ancillary_info()\n'
p1017
V\u000avoid emit_ancillary_info(void)\u000a\u000a{\u000a  infomap infomap [7];\u000a  int iVar1;\u000a  undefined8 uVar2;\u000a  char *__s1;\u000a  undefined8 uVar3;\u000a  infomap *piVar4;\u000a  char *__s2;\u000a  \u000a  piVar4 = (infomap *)&ram0x00405ac0;\u000a  __s2 = "[";\u000a  do {\u000a    iVar1 = strcmp("id",__s2);\u000a    if (iVar1 == 0) break;\u000a    __s2 = piVar4[1].program;\u000a    piVar4 = piVar4 + 1;\u000a  } while (__s2 != (char *)0x0);\u000a  __s2 = "id";\u000a  if (piVar4->node != (char *)0x0) {\u000a    __s2 = piVar4->node;\u000a  }\u000a  uVar2 = dcgettext(0,"\u005cn%s online help: <%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"GNU coreutils","http://www.gnu.org/software/coreutils/");\u000a  __s1 = setlocale(5,(char *)0x0);\u000a  if (__s1 != (char *)0x0) {\u000a    iVar1 = strncmp(__s1,"en_",3);\u000a    if (iVar1 != 0) {\u000a      uVar2 = dcgettext(0,"Report %s translation bugs to <http://translationproject.org/team/>\u005cn",5)\u000a      ;\u000a      __printf_chk(1,uVar2,&DAT_00405e69,uVar2);\u000a    }\u000a  }\u000a  uVar2 = dcgettext(0,"Full documentation at: <%s%s>\u005cn",5);\u000a  __printf_chk(1,uVar2,"http://www.gnu.org/software/coreutils/",&DAT_00405e69);\u000a  uVar2 = dcgettext(0,"or available locally via: info \u005c'(coreutils) %s%s\u005c'\u005cn",5);\u000a  uVar3 = 0x405bb5;\u000a  if (__s2 == "id") {\u000a    uVar3 = 0x406082;\u000a  }\u000a  __printf_chk(1,uVar2,__s2,uVar3);\u000a  return;\u000a}\u000a\u000a
p1018
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV EBX,0x405ac0\nMOV ESI,0x406066\nNOP\nMOV EDI,0x405e69\nCALL 0x00401670\nTEST EAX,EAX\nJZ 0x00401abb\nMOV RSI,qword ptr [RBX + 0x10]\nADD RBX,0x10\nTEST RSI,RSI\nJNZ 0x00401aa0\nMOV RAX,qword ptr [RBX + 0x8]\nTEST RAX,RAX\nMOV EBX,0x405e69\nCMOVNZ RBX,RAX\nXOR EDI,EDI\nMOV ESI,0x4060c5\nMOV EDX,0x5\nCALL 0x00401540\nMOV RSI,RAX\nMOV EDI,0x1\nMOV EDX,0x405ec4\nMOV ECX,0x4060dc\nXOR EAX,EAX\nCALL 0x00401790\nMOV EDI,0x5\nXOR ESI,ESI\nCALL 0x00401780\nTEST RAX,RAX\nJZ 0x00401b44\nMOV ESI,0x406103\nMOV EDX,0x3\nMOV RDI,RAX\nCALL 0x004014b0\nTEST EAX,EAX\nJZ 0x00401b44\nXOR EDI,EDI\nMOV ESI,0x406107\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nMOV EDI,0x1\nMOV EDX,0x405e69\nXOR EAX,EAX\nMOV RSI,RCX\nCALL 0x00401790\nXOR EDI,EDI\nMOV ESI,0x40614c\nMOV EDX,0x5\nCALL 0x00401540\nMOV RSI,RAX\nMOV R14D,0x405e69\nMOV EDI,0x1\nMOV EDX,0x4060dc\nMOV ECX,0x405e69\nXOR EAX,EAX\nCALL 0x00401790\nXOR EDI,EDI\nMOV ESI,0x40616b\nMOV EDX,0x5\nCALL 0x00401540\nMOV RDX,RAX\nCMP RBX,R14\nMOV EAX,0x406082\nMOV ECX,0x405bb5\nCMOVZ RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RDX\nMOV RDX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nJMP 0x00401790\n'
p1019
S'41 56\n53\n50\nbb c0 5a 40 00\nbe 66 60 40 00\n66 90\nbf 69 5e 40 00\ne8 c6 fb ff ff\n85 c0\n74 0d\n48 8b 73 10\n48 83 c3 10\n48 85 f6\n75 e5\n48 8b 43 08\n48 85 c0\nbb 69 5e 40 00\n48 0f 45 d8\n31 ff\nbe c5 60 40 00\nba 05 00 00 00\ne8 64 fa ff ff\n48 89 c6\nbf 01 00 00 00\nba c4 5e 40 00\nb9 dc 60 40 00\n31 c0\ne8 9b fc ff ff\nbf 05 00 00 00\n31 f6\ne8 7f fc ff ff\n48 85 c0\n74 3e\nbe 03 61 40 00\nba 03 00 00 00\n48 89 c7\ne8 98 f9 ff ff\n85 c0\n74 28\n31 ff\nbe 07 61 40 00\nba 05 00 00 00\ne8 13 fa ff ff\n48 89 c1\nbf 01 00 00 00\nba 69 5e 40 00\n31 c0\n48 89 ce\ne8 4c fc ff ff\n31 ff\nbe 4c 61 40 00\nba 05 00 00 00\ne8 eb f9 ff ff\n48 89 c6\n41 be 69 5e 40 00\nbf 01 00 00 00\nba dc 60 40 00\nb9 69 5e 40 00\n31 c0\ne8 1c fc ff ff\n31 ff\nbe 6b 61 40 00\nba 05 00 00 00\ne8 bb f9 ff ff\n48 89 c2\n4c 39 f3\nb8 82 60 40 00\nb9 b5 5b 40 00\n48 0f 44 c8\nbf 01 00 00 00\n31 c0\n48 89 d6\n48 89 da\n48 83 c4 08\n5b\n41 5e\ne9 de fb ff ff\n'
p1020
S'.text:0000000000401a90\n.text:0000000000401a92\n.text:0000000000401a93\n.text:0000000000401a94\n.text:0000000000401a99\n.text:0000000000401a9e\n.text:0000000000401aa0\n.text:0000000000401aa5\n.text:0000000000401aaa\n.text:0000000000401aac\n.text:0000000000401aae\n.text:0000000000401ab2\n.text:0000000000401ab6\n.text:0000000000401ab9\n.text:0000000000401abb\n.text:0000000000401abf\n.text:0000000000401ac2\n.text:0000000000401ac7\n.text:0000000000401acb\n.text:0000000000401acd\n.text:0000000000401ad2\n.text:0000000000401ad7\n.text:0000000000401adc\n.text:0000000000401adf\n.text:0000000000401ae4\n.text:0000000000401ae9\n.text:0000000000401aee\n.text:0000000000401af0\n.text:0000000000401af5\n.text:0000000000401afa\n.text:0000000000401afc\n.text:0000000000401b01\n.text:0000000000401b04\n.text:0000000000401b06\n.text:0000000000401b0b\n.text:0000000000401b10\n.text:0000000000401b13\n.text:0000000000401b18\n.text:0000000000401b1a\n.text:0000000000401b1c\n.text:0000000000401b1e\n.text:0000000000401b23\n.text:0000000000401b28\n.text:0000000000401b2d\n.text:0000000000401b30\n.text:0000000000401b35\n.text:0000000000401b3a\n.text:0000000000401b3c\n.text:0000000000401b3f\n.text:0000000000401b44\n.text:0000000000401b46\n.text:0000000000401b4b\n.text:0000000000401b50\n.text:0000000000401b55\n.text:0000000000401b58\n.text:0000000000401b5e\n.text:0000000000401b63\n.text:0000000000401b68\n.text:0000000000401b6d\n.text:0000000000401b6f\n.text:0000000000401b74\n.text:0000000000401b76\n.text:0000000000401b7b\n.text:0000000000401b80\n.text:0000000000401b85\n.text:0000000000401b88\n.text:0000000000401b8b\n.text:0000000000401b90\n.text:0000000000401b95\n.text:0000000000401b99\n.text:0000000000401b9e\n.text:0000000000401ba0\n.text:0000000000401ba3\n.text:0000000000401ba6\n.text:0000000000401baa\n.text:0000000000401bab\n.text:0000000000401bad\n'
p1021
tp1022
sS'strcaseeq7'
p1023
(S'\n__stdcall strcaseeq7()\n'
p1024
V\u000aint strcaseeq7(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  if (_Var1 == false) {\u000a    if (*(byte *)(in_RDI + 7) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  else {\u000a    if ((*(byte *)(in_RDI + 7) & 0xdf) == 0) {\u000a      return 1;\u000a    }\u000a  }\u000a  return 0;\u000a}\u000a\u000a
p1025
S'PUSH RBX\nMOV RBX,RDI\nXOR EDI,EDI\nCALL 0x00404fd0\nMOVSX ECX,byte ptr [RBX + 0x7]\nTEST AL,AL\nJZ 0x00404112\nTEST ECX,0xffffffdf\nJNZ 0x00404116\nMOV EAX,0x1\nPOP RBX\nRET\nTEST CL,CL\nJZ 0x0040411a\nXOR EAX,EAX\nPOP RBX\nRET\nMOV EAX,0x1\nPOP RBX\nRET\n'
p1026
S'53\n48 89 fb\n31 ff\ne8 d5 0e 00 00\n0f be 4b 07\n84 c0\n74 0f\nf7 c1 df ff ff ff\n75 0b\nb8 01 00 00 00\n5b\nc3\n84 c9\n74 04\n31 c0\n5b\nc3\nb8 01 00 00 00\n5b\nc3\n'
p1027
S'.text:00000000004040f0\n.text:00000000004040f1\n.text:00000000004040f4\n.text:00000000004040f6\n.text:00000000004040fb\n.text:00000000004040ff\n.text:0000000000404101\n.text:0000000000404103\n.text:0000000000404109\n.text:000000000040410b\n.text:0000000000404110\n.text:0000000000404111\n.text:0000000000404112\n.text:0000000000404114\n.text:0000000000404116\n.text:0000000000404118\n.text:0000000000404119\n.text:000000000040411a\n.text:000000000040411f\n.text:0000000000404120\n'
p1028
tp1029
sS'version_etc_va'
p1030
(S'\n__stdcall version_etc_va(FILE * stream, char * command_name, char * package, char * version, __va_list_tag * authors)\n'
p1031
V\u000avoid version_etc_va(FILE *stream,char *command_name,char *package,char *version,\u000a                   __va_list_tag *authors)\u000a\u000a{\u000a  uint uVar1;\u000a  char *pcVar2;\u000a  size_t n_authors;\u000a  char **ppcVar3;\u000a  char *authtab [10];\u000a  char *local_58 [11];\u000a  \u000a  n_authors = 0;\u000a  do {\u000a    uVar1 = authors->gp_offset;\u000a    if ((ulong)(long)(int)uVar1 < 0x29) {\u000a      ppcVar3 = (char **)((long)(int)uVar1 + (long)authors->reg_save_area);\u000a      authors->gp_offset = uVar1 + 8;\u000a    }\u000a    else {\u000a      ppcVar3 = (char **)authors->overflow_arg_area;\u000a      *(char ***)&authors->overflow_arg_area = ppcVar3 + 1;\u000a    }\u000a    pcVar2 = *ppcVar3;\u000a    local_58[n_authors] = pcVar2;\u000a  } while ((pcVar2 != (char *)0x0) && (n_authors = n_authors + 1, n_authors < 10));\u000a  version_etc_arn(stream,command_name,package,version,local_58,n_authors);\u000a  return;\u000a}\u000a\u000a
p1032
S'SUB RSP,0x58\nXOR R9D,R9D\nNOP word ptr [RAX + RAX*0x1]\nMOVSXD R10,dword ptr [R8]\nCMP R10,0x28\nJA 0x00404860\nMOV R11,R10\nADD R11,qword ptr [R8 + 0x10]\nLEA EAX,[R10 + 0x8]\nMOV dword ptr [R8],EAX\nJMP 0x0040486c\nMOV R11,qword ptr [R8 + 0x8]\nLEA RAX,[R11 + 0x8]\nMOV qword ptr [R8 + 0x8],RAX\nMOV RAX,qword ptr [R11]\nMOV qword ptr [RSP + R9*0x8],RAX\nTEST RAX,RAX\nJZ 0x00404881\nINC R9\nCMP R9,0xa\nJC 0x00404840\nMOV R8,RSP\nCALL 0x004044a0\nADD RSP,0x58\nRET\n'
p1033
S'48 83 ec 58\n45 31 c9\n66 0f 1f 84 00 00 00 00 00\n4d 63 10\n49 83 fa 28\n77 17\n4d 89 d3\n4d 03 58 10\n41 8d 42 08\n41 89 00\neb 13\n4d 8b 58 08\n49 8d 43 08\n49 89 40 08\n49 8b 03\n4a 89 04 cc\n48 85 c0\n74 09\n49 ff c1\n49 83 f9 0a\n72 bf\n49 89 e0\ne8 17 fc ff ff\n48 83 c4 58\nc3\n'
p1034
S'.text:0000000000404830\n.text:0000000000404834\n.text:0000000000404837\n.text:0000000000404840\n.text:0000000000404843\n.text:0000000000404847\n.text:0000000000404849\n.text:000000000040484c\n.text:0000000000404850\n.text:0000000000404854\n.text:0000000000404857\n.text:0000000000404860\n.text:0000000000404864\n.text:0000000000404868\n.text:000000000040486c\n.text:000000000040486f\n.text:0000000000404873\n.text:0000000000404876\n.text:0000000000404878\n.text:000000000040487b\n.text:000000000040487f\n.text:0000000000404881\n.text:0000000000404884\n.text:0000000000404889\n.text:000000000040488d\n'
p1035
tp1036
sS'xzalloc'
p1037
(S'\n__stdcall xzalloc(size_t s)\n'
p1038
V\u000avoid * xzalloc(size_t s)\u000a\u000a{\u000a  void *__s;\u000a  \u000a  __s = xmalloc(s);\u000a  memset(__s,0,s);\u000a  return __s;\u000a}\u000a\u000a
p1039
S'PUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nCALL 0x004049c0\nMOV RBX,RAX\nXOR ESI,ESI\nMOV RDI,RBX\nMOV RDX,R14\nCALL 0x004015f0\nMOV RAX,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nRET\n'
p1040
S'41 56\n53\n50\n49 89 fe\ne8 04 ff ff ff\n48 89 c3\n31 f6\n48 89 df\n4c 89 f2\ne8 24 cb ff ff\n48 89 d8\n48 83 c4 08\n5b\n41 5e\nc3\n'
p1041
S'.text:0000000000404ab0\n.text:0000000000404ab2\n.text:0000000000404ab3\n.text:0000000000404ab4\n.text:0000000000404ab7\n.text:0000000000404abc\n.text:0000000000404abf\n.text:0000000000404ac1\n.text:0000000000404ac4\n.text:0000000000404ac7\n.text:0000000000404acc\n.text:0000000000404acf\n.text:0000000000404ad3\n.text:0000000000404ad4\n.text:0000000000404ad6\n'
p1042
tp1043
sS'strtoul'
p1044
(S'\n__stdcall strtoul(char * __nptr, char * * __endptr, int __base)\n'
p1045
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aulong strtoul(char *__nptr,char **__endptr,int __base)\u000a\u000a{\u000a  ulong uVar1;\u000a  \u000a  uVar1 = (*(code *)PTR_strtoul_006091d8)();\u000a  return uVar1;\u000a}\u000a\u000a
p1046
S'JMP qword ptr [0x006091d8]\n'
p1047
S'ff 25 f2 79 20 00\n'
p1048
S'.plt:00000000004017e0\n'
p1049
tp1050
sS'umaxtostr'
p1051
(S'\n__stdcall umaxtostr(uintmax_t i, char * buf)\n'
p1052
V\u000achar * umaxtostr(uintmax_t i,char *buf)\u000a\u000a{\u000a  bool bVar1;\u000a  \u000a  buf[0x14] = 0;\u000a  buf = buf + 0x14;\u000a  do {\u000a    buf[-1] = (char)i + ((byte)((SUB168(ZEXT816(i) * ZEXT816(0xcccccccccccccccd) >> 0x40,0) &\u000a                                0xffffffff) >> 2) & 0xfe) * -5 | 0x30;\u000a    buf = buf + -1;\u000a    bVar1 = 9 < i;\u000a    i = i / 10;\u000a  } while (bVar1);\u000a  return buf;\u000a}\u000a\u000a
p1053
S'MOV RCX,RDI\nMOV byte ptr [RSI + 0x14],0x0\nADD RSI,0x14\nMOV R8,-0x3333333333333333\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOV RAX,RCX\nMUL R8\nMOV EAX,EDX\nSHR EAX,0x2\nAND EAX,0x3ffffffe\nLEA EAX,[RAX + RAX*0x4]\nMOV EDI,ECX\nSUB EDI,EAX\nOR DIL,0x30\nMOV byte ptr [RSI + -0x1],DIL\nDEC RSI\nSHR RDX,0x3\nCMP RCX,0x9\nMOV RCX,RDX\nJA 0x004027f0\nMOV RAX,RSI\nRET\n'
p1054
S'48 89 f9\nc6 46 14 00\n48 83 c6 14\n49 b8 cd cc cc cc cc cc cc cc\n66 66 2e 0f 1f 84 00 00 00 00 00\n48 89 c8\n49 f7 e0\n89 d0\nc1 e8 02\n25 fe ff ff 3f\n8d 04 80\n89 cf\n29 c7\n40 80 cf 30\n40 88 7e ff\n48 ff ce\n48 c1 ea 03\n48 83 f9 09\n48 89 d1\n77 d1\n48 89 f0\nc3\n'
p1055
S'.text:00000000004027d0\n.text:00000000004027d3\n.text:00000000004027d7\n.text:00000000004027db\n.text:00000000004027e5\n.text:00000000004027f0\n.text:00000000004027f3\n.text:00000000004027f6\n.text:00000000004027f8\n.text:00000000004027fb\n.text:0000000000402800\n.text:0000000000402803\n.text:0000000000402805\n.text:0000000000402807\n.text:000000000040280b\n.text:000000000040280f\n.text:0000000000402812\n.text:0000000000402816\n.text:000000000040281a\n.text:000000000040281d\n.text:000000000040281f\n.text:0000000000402822\n'
p1056
tp1057
sS'strcaseeq0'
p1058
(S'\n__stdcall strcaseeq0()\n'
p1059
V\u000aint strcaseeq0(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  char *in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*in_RDI != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*in_RDI & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    iVar2 = 1;\u000a  }\u000a  else {\u000a    iVar2 = strcaseeq1();\u000a  }\u000a  return iVar2;\u000a}\u000a\u000a
p1060
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404fd0\nMOVSX ECX,byte ptr [RBX]\nTEST AL,AL\nJZ 0x00403e25\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403e2c\nJMP 0x00403e60\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403e60\nTEST BPL,BPL\nJZ 0x00403e5b\nMOV AL,byte ptr [RSP + 0x40]\nMOVSX ECX,byte ptr [RSP + 0x48]\nMOV dword ptr [RSP],ECX\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOVSX R9D,AL\nMOV RDI,RBX\nCALL 0x00403e70\nJMP 0x00403e60\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1061
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 bd 11 00 00\n0f be 0b\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3b\n31 c0\n40 38 e9\n75 34\n40 84 ed\n74 2a\n8a 44 24 40\n0f be 4c 24 48\n89 0c 24\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n44 0f be c8\n48 89 df\ne8 17 00 00 00\neb 05\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1062
S'.text:0000000000403df0\n.text:0000000000403df1\n.text:0000000000403df3\n.text:0000000000403df5\n.text:0000000000403df7\n.text:0000000000403df9\n.text:0000000000403dfa\n.text:0000000000403dfb\n.text:0000000000403dfe\n.text:0000000000403e01\n.text:0000000000403e04\n.text:0000000000403e07\n.text:0000000000403e09\n.text:0000000000403e0c\n.text:0000000000403e0e\n.text:0000000000403e13\n.text:0000000000403e16\n.text:0000000000403e18\n.text:0000000000403e1a\n.text:0000000000403e1d\n.text:0000000000403e1f\n.text:0000000000403e21\n.text:0000000000403e23\n.text:0000000000403e25\n.text:0000000000403e27\n.text:0000000000403e2a\n.text:0000000000403e2c\n.text:0000000000403e2f\n.text:0000000000403e31\n.text:0000000000403e35\n.text:0000000000403e3a\n.text:0000000000403e3d\n.text:0000000000403e41\n.text:0000000000403e45\n.text:0000000000403e49\n.text:0000000000403e4d\n.text:0000000000403e51\n.text:0000000000403e54\n.text:0000000000403e59\n.text:0000000000403e5b\n.text:0000000000403e60\n.text:0000000000403e64\n.text:0000000000403e65\n.text:0000000000403e67\n.text:0000000000403e69\n.text:0000000000403e6b\n.text:0000000000403e6d\n.text:0000000000403e6e\n'
p1063
tp1064
sS'parse_with_separator'
p1065
(S'\n__stdcall parse_with_separator(char * spec, char * separator, uid_t * uid, gid_t * gid, char * * username, char * * groupname)\n'
p1066
V\u000achar * parse_with_separator\u000a                 (char *spec,char *separator,uid_t *uid,gid_t *gid,char **username,char **groupname)\u000a\u000a{\u000a  bool bVar1;\u000a  strtol_error sVar2;\u000a  char *__name;\u000a  passwd *ppVar3;\u000a  group *pgVar4;\u000a  char *string;\u000a  char *__name_00;\u000a  char *pcVar5;\u000a  char buf [21];\u000a  __uid_t local_6c;\u000a  uint local_68;\u000a  ulong local_48 [3];\u000a  \u000a  local_6c = *uid;\u000a  if (gid == (gid_t *)0x0) {\u000a    local_68 = 0xffffffff;\u000a  }\u000a  else {\u000a    local_68 = *gid;\u000a  }\u000a  if (username != (char **)0x0) {\u000a    *username = (char *)0x0;\u000a  }\u000a  if (groupname != (char **)0x0) {\u000a    *groupname = (char *)0x0;\u000a  }\u000a  if (separator == (char *)0x0) {\u000a    if (*spec != 0) {\u000a      __name = xstrdup(spec);\u000a      __name_00 = (char *)0x0;\u000a      goto LAB_0040428e;\u000a    }\u000a    string = (char *)0x0;\u000a    __name = (char *)0x0;\u000a  }\u000a  else {\u000a    __name_00 = separator + -(long)spec;\u000a    if (__name_00 == (char *)0x0) {\u000a      __name = (char *)0x0;\u000a    }\u000a    else {\u000a      __name = (char *)xmemdup(spec,(size_t)(__name_00 + 1));\u000a      __name[(long)__name_00] = 0;\u000a    }\u000a    __name_00 = (char *)0x0;\u000a    if (separator[1] != 0) {\u000a      __name_00 = separator + 1;\u000a    }\u000aLAB_0040428e:\u000a    if (__name == (char *)0x0) {\u000a      __name = (char *)0x0;\u000a      string = (char *)0x0;\u000a      pcVar5 = (char *)0x0;\u000a    }\u000a    else {\u000a      if ((*__name == '+') || (ppVar3 = getpwnam(__name), ppVar3 == (passwd *)0x0)) {\u000a        if ((__name_00 == (char *)0x0) && (separator != (char *)0x0)) {\u000a          pcVar5 = "invalid spec";\u000a          string = (char *)0x0;\u000a        }\u000a        else {\u000a          sVar2 = xstrtoul(__name,(char **)0x0,(ulong *)0xa,(char *)local_48);\u000a          if ((sVar2 == LONGINT_OK) &&\u000a             ((local_48[0] >> 0x20 == 0 && ((__uid_t)local_48[0] != 0xffffffff)))) {\u000a            pcVar5 = (char *)0x0;\u000a            string = (char *)0x0;\u000a            local_6c = (__uid_t)local_48[0];\u000a          }\u000a          else {\u000a            pcVar5 = "invalid user";\u000a            string = (char *)0x0;\u000a          }\u000a        }\u000a      }\u000a      else {\u000a        local_6c = ppVar3->pw_uid;\u000a        string = (char *)0x0;\u000a        if ((separator != (char *)0x0) && (__name_00 == (char *)0x0)) {\u000a          local_68 = ppVar3->pw_gid;\u000a          pgVar4 = getgrgid(local_68);\u000a          if (pgVar4 == (group *)0x0) {\u000a            string = umaxtostr((ulong)local_68,(char *)local_48);\u000a          }\u000a          else {\u000a            string = pgVar4->gr_name;\u000a          }\u000a          string = xstrdup(string);\u000a          endgrent();\u000a        }\u000a        pcVar5 = (char *)0x0;\u000a      }\u000a      endpwent();\u000a    }\u000a    if ((__name_00 != (char *)0x0) && (pcVar5 == (char *)0x0)) {\u000a      if ((*__name_00 == '+') || (pgVar4 = getgrnam(__name_00), pgVar4 == (group *)0x0)) {\u000a        sVar2 = xstrtoul(__name_00,(char **)0x0,(ulong *)0xa,(char *)local_48);\u000a        if (((sVar2 == LONGINT_OK) && (local_48[0] >> 0x20 == 0)) &&\u000a           ((uint)local_48[0] != 0xffffffff)) {\u000a          pcVar5 = (char *)0x0;\u000a          local_68 = (uint)local_48[0];\u000a        }\u000a        else {\u000a          pcVar5 = "invalid group";\u000a        }\u000a      }\u000a      else {\u000a        pcVar5 = (char *)0x0;\u000a        local_68 = pgVar4->gr_gid;\u000a      }\u000a      endgrent();\u000a      string = xstrdup(__name_00);\u000a    }\u000a    if (pcVar5 != (char *)0x0) {\u000a      bVar1 = false;\u000a      goto LAB_00404466;\u000a    }\u000a  }\u000a  *uid = local_6c;\u000a  if (gid != (gid_t *)0x0) {\u000a    *gid = local_68;\u000a  }\u000a  if (username != (char **)0x0) {\u000a    *username = __name;\u000a    __name = (char *)0x0;\u000a  }\u000a  bVar1 = true;\u000a  if (groupname == (char **)0x0) {\u000a    pcVar5 = (char *)0x0;\u000a  }\u000a  else {\u000a    *groupname = string;\u000a    pcVar5 = (char *)0x0;\u000a    string = (char *)0x0;\u000a  }\u000aLAB_00404466:\u000a  free(__name);\u000a  free(string);\u000a  if (bVar1) {\u000a    __name = (char *)0x0;\u000a  }\u000a  else {\u000a    __name = (char *)dcgettext(0,pcVar5,5);\u000a  }\u000a  return __name;\u000a}\u000a\u000a
p1067
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x48\nMOV R14,R9\nMOV R13,RCX\nMOV R12,RDX\nMOV RBP,RSI\nMOV EAX,dword ptr [R12]\nTEST R13,R13\nJZ 0x0040420e\nMOV EDX,dword ptr [R13]\nTEST R8,R8\nJNZ 0x00404218\nJMP 0x0040421f\nMOV EDX,0xffffffff\nTEST R8,R8\nJZ 0x0040421f\nMOV qword ptr [R8],0x0\nTEST R14,R14\nJZ 0x0040422b\nMOV qword ptr [R14],0x0\nTEST RBP,RBP\nMOV qword ptr [RSP + 0x28],R12\nMOV dword ptr [RSP + 0xc],EAX\nJZ 0x0040425e\nMOV qword ptr [RSP + 0x10],RDX\nMOV qword ptr [RSP + 0x18],R8\nMOV RBX,RBP\nSUB RBX,RDI\nJZ 0x0040427d\nLEA RSI,[RBX + 0x1]\nCALL 0x00404b00\nMOV R15,RAX\nMOV byte ptr [R15 + RBX*0x1],0x0\nJMP 0x00404280\nCMP byte ptr [RDI],0x0\nJZ 0x00404365\nMOV qword ptr [RSP + 0x10],RDX\nMOV qword ptr [RSP + 0x18],R8\nCALL 0x00404b30\nMOV R15,RAX\nXOR EBX,EBX\nJMP 0x0040428e\nXOR R15D,R15D\nLEA RAX,[RBP + 0x1]\nXOR EBX,EBX\nCMP byte ptr [RBP + 0x1],0x0\nCMOVNZ RBX,RAX\nTEST R15,R15\nMOV qword ptr [RSP + 0x20],R14\nJZ 0x004042b0\nCMP byte ptr [R15],0x2b\nJNZ 0x004042c7\nTEST RBP,RBP\nSETNZ CL\nTEST RBX,RBX\nSETZ DL\nTEST DL,DL\nJNZ 0x00404319\nJMP 0x00404328\nXOR R15D,R15D\nXOR R12D,R12D\nXOR R14D,R14D\nTEST RBX,RBX\nJNZ 0x004043a5\nJMP 0x0040441a\nMOV RDI,R15\nCALL 0x00401680\nTEST RBP,RBP\nSETNZ CL\nTEST RBX,RBX\nSETZ DL\nTEST RAX,RAX\nJZ 0x00404315\nMOV ECX,dword ptr [RAX + 0x10]\nMOV dword ptr [RSP + 0xc],ECX\nXOR R12D,R12D\nTEST RBP,RBP\nJZ 0x00404398\nTEST RBX,RBX\nJNZ 0x00404398\nMOV EBP,dword ptr [RAX + 0x14]\nMOV EDI,EBP\nCALL 0x004015b0\nTEST RAX,RAX\nMOV qword ptr [RSP + 0x10],RBP\nJZ 0x0040437b\nMOV RDI,qword ptr [RAX]\nJMP 0x0040438b\nTEST DL,DL\nJZ 0x00404328\nTEST CL,CL\nJZ 0x00404328\nMOV R14D,0x406852\nXOR R12D,R12D\nJMP 0x0040439b\nLEA RCX,[RSP + 0x30]\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x405bb5\nMOV RDI,R15\nCALL 0x00404ba0\nTEST EAX,EAX\nJNZ 0x00404370\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RCX,RAX\nSHR RCX,0x20\nJNZ 0x00404370\nCMP EAX,-0x1\nJZ 0x00404370\nXOR R14D,R14D\nMOV dword ptr [RSP + 0xc],EAX\nXOR R12D,R12D\nJMP 0x0040439b\nXOR R12D,R12D\nXOR R15D,R15D\nJMP 0x00404432\nMOV R14D,0x406837\nXOR R12D,R12D\nJMP 0x0040439b\nLEA RSI,[RSP + 0x30]\nMOV RDI,RBP\nCALL 0x004027d0\nMOV RDI,RAX\nCALL 0x00404b30\nMOV R12,RAX\nCALL 0x00401460\nXOR R14D,R14D\nCALL 0x00401730\nTEST RBX,RBX\nJZ 0x0040441a\nTEST R14,R14\nJNZ 0x0040441a\nCMP byte ptr [RBX],0x2b\nJZ 0x004043c9\nMOV RDI,RBX\nCALL 0x004016a0\nTEST RAX,RAX\nJZ 0x004043c9\nMOV EAX,dword ptr [RAX + 0x10]\nMOV qword ptr [RSP + 0x10],RAX\nXOR R14D,R14D\nJMP 0x0040440a\nLEA RCX,[RSP + 0x30]\nXOR ESI,ESI\nMOV EDX,0xa\nMOV R8D,0x405bb5\nMOV RDI,RBX\nCALL 0x00404ba0\nTEST EAX,EAX\nJNZ 0x00404404\nMOV RAX,qword ptr [RSP + 0x30]\nMOV RCX,RAX\nSHR RCX,0x20\nJNZ 0x00404404\nCMP EAX,-0x1\nJZ 0x00404404\nXOR R14D,R14D\nMOV qword ptr [RSP + 0x10],RAX\nJMP 0x0040440a\nMOV R14D,0x406844\nCALL 0x00401460\nMOV RDI,RBX\nCALL 0x00404b30\nMOV R12,RAX\nMOV R8,qword ptr [RSP + 0x18]\nTEST R14,R14\nJZ 0x00404428\nXOR EBX,EBX\nJMP 0x00404466\nMOV R14,qword ptr [RSP + 0x20]\nMOV RDX,qword ptr [RSP + 0x10]\nMOV RAX,qword ptr [RSP + 0x28]\nMOV ECX,dword ptr [RSP + 0xc]\nMOV dword ptr [RAX],ECX\nTEST R13,R13\nJZ 0x00404446\nMOV dword ptr [R13],EDX\nTEST R8,R8\nJZ 0x00404451\nMOV qword ptr [R8],R15\nXOR R15D,R15D\nMOV BL,0x1\nTEST R14,R14\nJZ 0x00404463\nMOV qword ptr [R14],R12\nXOR R14D,R14D\nXOR R12D,R12D\nJMP 0x00404466\nXOR R14D,R14D\nMOV RDI,R15\nCALL 0x00401480\nMOV RDI,R12\nCALL 0x00401480\nTEST BL,BL\nJZ 0x0040447e\nXOR EAX,EAX\nJMP 0x0040448d\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,R14\nCALL 0x00401540\nADD RSP,0x48\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1068
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 48\n4d 89 ce\n49 89 cd\n49 89 d4\n48 89 f5\n41 8b 04 24\n4d 85 ed\n74 0b\n41 8b 55 00\n4d 85 c0\n75 0c\neb 11\nba ff ff ff ff\n4d 85 c0\n74 07\n49 c7 00 00 00 00 00\n4d 85 f6\n74 07\n49 c7 06 00 00 00 00\n48 85 ed\n4c 89 64 24 28\n89 44 24 0c\n74 25\n48 89 54 24 10\n4c 89 44 24 18\n48 89 eb\n48 29 fb\n74 32\n48 8d 73 01\ne8 ac 08 00 00\n49 89 c7\n41 c6 04 1f 00\neb 22\n80 3f 00\n0f 84 fe 00 00 00\n48 89 54 24 10\n4c 89 44 24 18\ne8 ba 08 00 00\n49 89 c7\n31 db\neb 11\n45 31 ff\n48 8d 45 01\n31 db\n80 7d 01 00\n48 0f 45 d8\n4d 85 ff\n4c 89 74 24 20\n74 18\n41 80 3f 2b\n75 29\n48 85 ed\n0f 95 c1\n48 85 db\n0f 94 c2\n84 d2\n75 6b\neb 78\n45 31 ff\n45 31 e4\n45 31 f6\n48 85 db\n0f 85 e3 00 00 00\ne9 53 01 00 00\n4c 89 ff\ne8 b1 d3 ff ff\n48 85 ed\n0f 95 c1\n48 85 db\n0f 94 c2\n48 85 c0\n74 35\n8b 48 10\n89 4c 24 0c\n45 31 e4\n48 85 ed\n0f 84 a5 00 00 00\n48 85 db\n0f 85 9c 00 00 00\n8b 68 14\n89 ef\ne8 aa d2 ff ff\n48 85 c0\n48 89 6c 24 10\n74 6b\n48 8b 38\neb 76\n84 d2\n74 0f\n84 c9\n74 0b\n41 be 52 68 40 00\n45 31 e4\neb 73\n48 8d 4c 24 30\n31 f6\nba 0a 00 00 00\n41 b8 b5 5b 40 00\n4c 89 ff\ne8 5e 08 00 00\n85 c0\n75 2a\n48 8b 44 24 30\n48 89 c1\n48 c1 e9 20\n75 1c\n83 f8 ff\n74 17\n45 31 f6\n89 44 24 0c\n45 31 e4\neb 36\n45 31 e4\n45 31 ff\ne9 c2 00 00 00\n41 be 37 68 40 00\n45 31 e4\neb 20\n48 8d 74 24 30\n48 89 ef\ne8 48 e4 ff ff\n48 89 c7\ne8 a0 07 00 00\n49 89 c4\ne8 c8 d0 ff ff\n45 31 f6\ne8 90 d3 ff ff\n48 85 db\n74 75\n4d 85 f6\n75 70\n80 3b 2b\n74 1a\n48 89 df\ne8 e9 d2 ff ff\n48 85 c0\n74 0d\n8b 40 10\n48 89 44 24 10\n45 31 f6\neb 41\n48 8d 4c 24 30\n31 f6\nba 0a 00 00 00\n41 b8 b5 5b 40 00\n48 89 df\ne8 bd 07 00 00\n85 c0\n75 1d\n48 8b 44 24 30\n48 89 c1\n48 c1 e9 20\n75 0f\n83 f8 ff\n74 0a\n45 31 f6\n48 89 44 24 10\neb 06\n41 be 44 68 40 00\ne8 51 d0 ff ff\n48 89 df\ne8 19 07 00 00\n49 89 c4\n4c 8b 44 24 18\n4d 85 f6\n74 04\n31 db\neb 3e\n4c 8b 74 24 20\n48 8b 54 24 10\n48 8b 44 24 28\n8b 4c 24 0c\n89 08\n4d 85 ed\n74 04\n41 89 55 00\n4d 85 c0\n74 06\n4d 89 38\n45 31 ff\nb3 01\n4d 85 f6\n74 0b\n4d 89 26\n45 31 f6\n45 31 e4\neb 03\n45 31 f6\n4c 89 ff\ne8 12 d0 ff ff\n4c 89 e7\ne8 0a d0 ff ff\n84 db\n74 04\n31 c0\neb 0f\n31 ff\nba 05 00 00 00\n4c 89 f6\ne8 b3 d0 ff ff\n48 83 c4 48\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1069
S'.text:00000000004041e0\n.text:00000000004041e1\n.text:00000000004041e3\n.text:00000000004041e5\n.text:00000000004041e7\n.text:00000000004041e9\n.text:00000000004041ea\n.text:00000000004041ee\n.text:00000000004041f1\n.text:00000000004041f4\n.text:00000000004041f7\n.text:00000000004041fa\n.text:00000000004041fe\n.text:0000000000404201\n.text:0000000000404203\n.text:0000000000404207\n.text:000000000040420a\n.text:000000000040420c\n.text:000000000040420e\n.text:0000000000404213\n.text:0000000000404216\n.text:0000000000404218\n.text:000000000040421f\n.text:0000000000404222\n.text:0000000000404224\n.text:000000000040422b\n.text:000000000040422e\n.text:0000000000404233\n.text:0000000000404237\n.text:0000000000404239\n.text:000000000040423e\n.text:0000000000404243\n.text:0000000000404246\n.text:0000000000404249\n.text:000000000040424b\n.text:000000000040424f\n.text:0000000000404254\n.text:0000000000404257\n.text:000000000040425c\n.text:000000000040425e\n.text:0000000000404261\n.text:0000000000404267\n.text:000000000040426c\n.text:0000000000404271\n.text:0000000000404276\n.text:0000000000404279\n.text:000000000040427b\n.text:000000000040427d\n.text:0000000000404280\n.text:0000000000404284\n.text:0000000000404286\n.text:000000000040428a\n.text:000000000040428e\n.text:0000000000404291\n.text:0000000000404296\n.text:0000000000404298\n.text:000000000040429c\n.text:000000000040429e\n.text:00000000004042a1\n.text:00000000004042a4\n.text:00000000004042a7\n.text:00000000004042aa\n.text:00000000004042ac\n.text:00000000004042ae\n.text:00000000004042b0\n.text:00000000004042b3\n.text:00000000004042b6\n.text:00000000004042b9\n.text:00000000004042bc\n.text:00000000004042c2\n.text:00000000004042c7\n.text:00000000004042ca\n.text:00000000004042cf\n.text:00000000004042d2\n.text:00000000004042d5\n.text:00000000004042d8\n.text:00000000004042db\n.text:00000000004042de\n.text:00000000004042e0\n.text:00000000004042e3\n.text:00000000004042e7\n.text:00000000004042ea\n.text:00000000004042ed\n.text:00000000004042f3\n.text:00000000004042f6\n.text:00000000004042fc\n.text:00000000004042ff\n.text:0000000000404301\n.text:0000000000404306\n.text:0000000000404309\n.text:000000000040430e\n.text:0000000000404310\n.text:0000000000404313\n.text:0000000000404315\n.text:0000000000404317\n.text:0000000000404319\n.text:000000000040431b\n.text:000000000040431d\n.text:0000000000404323\n.text:0000000000404326\n.text:0000000000404328\n.text:000000000040432d\n.text:000000000040432f\n.text:0000000000404334\n.text:000000000040433a\n.text:000000000040433d\n.text:0000000000404342\n.text:0000000000404344\n.text:0000000000404346\n.text:000000000040434b\n.text:000000000040434e\n.text:0000000000404352\n.text:0000000000404354\n.text:0000000000404357\n.text:0000000000404359\n.text:000000000040435c\n.text:0000000000404360\n.text:0000000000404363\n.text:0000000000404365\n.text:0000000000404368\n.text:000000000040436b\n.text:0000000000404370\n.text:0000000000404376\n.text:0000000000404379\n.text:000000000040437b\n.text:0000000000404380\n.text:0000000000404383\n.text:0000000000404388\n.text:000000000040438b\n.text:0000000000404390\n.text:0000000000404393\n.text:0000000000404398\n.text:000000000040439b\n.text:00000000004043a0\n.text:00000000004043a3\n.text:00000000004043a5\n.text:00000000004043a8\n.text:00000000004043aa\n.text:00000000004043ad\n.text:00000000004043af\n.text:00000000004043b2\n.text:00000000004043b7\n.text:00000000004043ba\n.text:00000000004043bc\n.text:00000000004043bf\n.text:00000000004043c4\n.text:00000000004043c7\n.text:00000000004043c9\n.text:00000000004043ce\n.text:00000000004043d0\n.text:00000000004043d5\n.text:00000000004043db\n.text:00000000004043de\n.text:00000000004043e3\n.text:00000000004043e5\n.text:00000000004043e7\n.text:00000000004043ec\n.text:00000000004043ef\n.text:00000000004043f3\n.text:00000000004043f5\n.text:00000000004043f8\n.text:00000000004043fa\n.text:00000000004043fd\n.text:0000000000404402\n.text:0000000000404404\n.text:000000000040440a\n.text:000000000040440f\n.text:0000000000404412\n.text:0000000000404417\n.text:000000000040441a\n.text:000000000040441f\n.text:0000000000404422\n.text:0000000000404424\n.text:0000000000404426\n.text:0000000000404428\n.text:000000000040442d\n.text:0000000000404432\n.text:0000000000404437\n.text:000000000040443b\n.text:000000000040443d\n.text:0000000000404440\n.text:0000000000404442\n.text:0000000000404446\n.text:0000000000404449\n.text:000000000040444b\n.text:000000000040444e\n.text:0000000000404451\n.text:0000000000404453\n.text:0000000000404456\n.text:0000000000404458\n.text:000000000040445b\n.text:000000000040445e\n.text:0000000000404461\n.text:0000000000404463\n.text:0000000000404466\n.text:0000000000404469\n.text:000000000040446e\n.text:0000000000404471\n.text:0000000000404476\n.text:0000000000404478\n.text:000000000040447a\n.text:000000000040447c\n.text:000000000040447e\n.text:0000000000404480\n.text:0000000000404485\n.text:0000000000404488\n.text:000000000040448d\n.text:0000000000404491\n.text:0000000000404492\n.text:0000000000404494\n.text:0000000000404496\n.text:0000000000404498\n.text:000000000040449a\n.text:000000000040449b\n'
p1070
tp1071
sS'strcaseeq2'
p1072
(S'\n__stdcall strcaseeq2()\n'
p1073
V\u000aint strcaseeq2(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 2) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 2) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq3();\u000a  return iVar2;\u000a}\u000a\u000a
p1074
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV R14D,R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404fd0\nMOVSX ECX,byte ptr [RBX + 0x2]\nTEST AL,AL\nJZ 0x00403f36\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403f3d\nJMP 0x00403f6a\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403f6a\nTEST BPL,BPL\nJZ 0x00403f65\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403f80\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1075
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n45 89 ce\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n89 ef\ne8 ad 10 00 00\n0f be 4b 02\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 34\n31 c0\n40 38 e9\n75 2d\n40 84 ed\n74 23\n41 0f be f5\n41 0f be d4\n41 0f be cf\n45 0f be c6\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1076
S'.text:0000000000403f00\n.text:0000000000403f01\n.text:0000000000403f03\n.text:0000000000403f05\n.text:0000000000403f07\n.text:0000000000403f09\n.text:0000000000403f0a\n.text:0000000000403f0b\n.text:0000000000403f0e\n.text:0000000000403f11\n.text:0000000000403f14\n.text:0000000000403f17\n.text:0000000000403f19\n.text:0000000000403f1c\n.text:0000000000403f1e\n.text:0000000000403f23\n.text:0000000000403f27\n.text:0000000000403f29\n.text:0000000000403f2b\n.text:0000000000403f2e\n.text:0000000000403f30\n.text:0000000000403f32\n.text:0000000000403f34\n.text:0000000000403f36\n.text:0000000000403f38\n.text:0000000000403f3b\n.text:0000000000403f3d\n.text:0000000000403f40\n.text:0000000000403f42\n.text:0000000000403f46\n.text:0000000000403f4a\n.text:0000000000403f4e\n.text:0000000000403f52\n.text:0000000000403f55\n.text:0000000000403f59\n.text:0000000000403f5a\n.text:0000000000403f5c\n.text:0000000000403f5e\n.text:0000000000403f60\n.text:0000000000403f62\n.text:0000000000403f63\n.text:0000000000403f65\n.text:0000000000403f6a\n.text:0000000000403f6e\n.text:0000000000403f6f\n.text:0000000000403f71\n.text:0000000000403f73\n.text:0000000000403f75\n.text:0000000000403f77\n.text:0000000000403f78\n'
p1077
tp1078
sS'strcaseeq1'
p1079
(S'\n__stdcall strcaseeq1()\n'
p1080
V\u000aint strcaseeq1(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 1) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 1) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq2();\u000a  return iVar2;\u000a}\u000a\u000a
p1081
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nPUSH RAX\nMOV dword ptr [RSP + 0x4],R9D\nMOV R15D,R8D\nMOV R12D,ECX\nMOV R13D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV R14B,byte ptr [RSP + 0x40]\nMOV EDI,EBP\nCALL 0x00404fd0\nMOVSX ECX,byte ptr [RBX + 0x1]\nTEST AL,AL\nJZ 0x00403ead\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403eb4\nJMP 0x00403ee7\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403ee7\nTEST BPL,BPL\nJZ 0x00403ee2\nMOVSX ESI,R13B\nMOVSX EDX,R12B\nMOVSX ECX,R15B\nMOVSX R8D,byte ptr [RSP + 0x4]\nMOVSX R9D,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403f00\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1082
S'55\n41 57\n41 56\n41 55\n41 54\n53\n50\n44 89 4c 24 04\n45 89 c7\n41 89 cc\n41 89 d5\n89 f5\n48 89 fb\n44 8a 74 24 40\n89 ef\ne8 36 11 00 00\n0f be 4b 01\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 3a\n31 c0\n40 38 e9\n75 33\n40 84 ed\n74 29\n41 0f be f5\n41 0f be d4\n41 0f be cf\n44 0f be 44 24 04\n45 0f be ce\n48 89 df\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\neb 1e\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1083
S'.text:0000000000403e70\n.text:0000000000403e71\n.text:0000000000403e73\n.text:0000000000403e75\n.text:0000000000403e77\n.text:0000000000403e79\n.text:0000000000403e7a\n.text:0000000000403e7b\n.text:0000000000403e80\n.text:0000000000403e83\n.text:0000000000403e86\n.text:0000000000403e89\n.text:0000000000403e8b\n.text:0000000000403e8e\n.text:0000000000403e93\n.text:0000000000403e95\n.text:0000000000403e9a\n.text:0000000000403e9e\n.text:0000000000403ea0\n.text:0000000000403ea2\n.text:0000000000403ea5\n.text:0000000000403ea7\n.text:0000000000403ea9\n.text:0000000000403eab\n.text:0000000000403ead\n.text:0000000000403eaf\n.text:0000000000403eb2\n.text:0000000000403eb4\n.text:0000000000403eb7\n.text:0000000000403eb9\n.text:0000000000403ebd\n.text:0000000000403ec1\n.text:0000000000403ec5\n.text:0000000000403ecb\n.text:0000000000403ecf\n.text:0000000000403ed2\n.text:0000000000403ed6\n.text:0000000000403ed7\n.text:0000000000403ed9\n.text:0000000000403edb\n.text:0000000000403edd\n.text:0000000000403edf\n.text:0000000000403ee0\n.text:0000000000403ee2\n.text:0000000000403ee7\n.text:0000000000403eeb\n.text:0000000000403eec\n.text:0000000000403eee\n.text:0000000000403ef0\n.text:0000000000403ef2\n.text:0000000000403ef4\n.text:0000000000403ef5\n'
p1084
tp1085
sS'strcaseeq4'
p1086
(S'\n__stdcall strcaseeq4()\n'
p1087
V\u000aint strcaseeq4(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 4) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 4) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq5();\u000a  return iVar2;\u000a}\u000a\u000a
p1088
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14D,ECX\nMOV R15D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404fd0\nMOVSX ECX,byte ptr [RBX + 0x4]\nTEST AL,AL\nJZ 0x0040401c\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00404023\nJMP 0x00404044\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00404044\nTEST BPL,BPL\nJZ 0x0040403f\nMOVSX ESI,R15B\nMOVSX EDX,R14B\nMOV RDI,RBX\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00404050\nMOV EAX,0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1089
S'55\n41 57\n41 56\n53\n50\n41 89 ce\n41 89 d7\n89 f5\n48 89 fb\n89 ef\ne8 c7 0f 00 00\n0f be 4b 04\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 28\n31 c0\n40 38 e9\n75 21\n40 84 ed\n74 17\n41 0f be f7\n41 0f be d6\n48 89 df\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\neb 11\nb8 01 00 00 00\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1090
S'.text:0000000000403ff0\n.text:0000000000403ff1\n.text:0000000000403ff3\n.text:0000000000403ff5\n.text:0000000000403ff6\n.text:0000000000403ff7\n.text:0000000000403ffa\n.text:0000000000403ffd\n.text:0000000000403fff\n.text:0000000000404002\n.text:0000000000404004\n.text:0000000000404009\n.text:000000000040400d\n.text:000000000040400f\n.text:0000000000404011\n.text:0000000000404014\n.text:0000000000404016\n.text:0000000000404018\n.text:000000000040401a\n.text:000000000040401c\n.text:000000000040401e\n.text:0000000000404021\n.text:0000000000404023\n.text:0000000000404026\n.text:0000000000404028\n.text:000000000040402c\n.text:0000000000404030\n.text:0000000000404033\n.text:0000000000404037\n.text:0000000000404038\n.text:000000000040403a\n.text:000000000040403c\n.text:000000000040403d\n.text:000000000040403f\n.text:0000000000404044\n.text:0000000000404048\n.text:0000000000404049\n.text:000000000040404b\n.text:000000000040404d\n.text:000000000040404e\n'
p1091
tp1092
sS'getpwnam'
p1093
(S'\n__stdcall getpwnam(char * __name)\n'
p1094
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000apasswd * getpwnam(char *__name)\u000a\u000a{\u000a  passwd *ppVar1;\u000a  \u000a  ppVar1 = (passwd *)(*(code *)PTR_getpwnam_00609128)();\u000a  return ppVar1;\u000a}\u000a\u000a
p1095
S'JMP qword ptr [0x00609128]\n'
p1096
S'ff 25 a2 7a 20 00\n'
p1097
S'.plt:0000000000401680\n'
p1098
tp1099
sS'strcaseeq3'
p1100
(S'\n__stdcall strcaseeq3()\n'
p1101
V\u000aint strcaseeq3(void)\u000a\u000a{\u000a  _Bool _Var1;\u000a  int iVar2;\u000a  char cVar3;\u000a  ulong in_RSI;\u000a  long in_RDI;\u000a  \u000a  _Var1 = c_isupper();\u000a  cVar3 = (char)(in_RSI & 0xffffffff);\u000a  if (_Var1 == false) {\u000a    if (*(char *)(in_RDI + 3) != cVar3) {\u000a      return 0;\u000a    }\u000a  }\u000a  else {\u000a    if (((int)*(char *)(in_RDI + 3) & 0xffffffdfU) != (uint)(in_RSI & 0xffffffff)) {\u000a      return 0;\u000a    }\u000a  }\u000a  if (cVar3 == 0) {\u000a    return 1;\u000a  }\u000a  iVar2 = strcaseeq4();\u000a  return iVar2;\u000a}\u000a\u000a
p1102
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R12\nPUSH RBX\nMOV R14D,R8D\nMOV R15D,ECX\nMOV R12D,EDX\nMOV EBP,ESI\nMOV RBX,RDI\nMOV EDI,EBP\nCALL 0x00404fd0\nMOVSX ECX,byte ptr [RBX + 0x3]\nTEST AL,AL\nJZ 0x00403fb0\nAND ECX,0xffffffdf\nXOR EAX,EAX\nCMP ECX,EBP\nJZ 0x00403fb7\nJMP 0x00403fda\nXOR EAX,EAX\nCMP CL,BPL\nJNZ 0x00403fda\nTEST BPL,BPL\nJZ 0x00403fd5\nMOVSX ESI,R12B\nMOVSX EDX,R15B\nMOVSX ECX,R14B\nMOV RDI,RBX\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nJMP 0x00403ff0\nMOV EAX,0x1\nPOP RBX\nPOP R12\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1103
S'55\n41 57\n41 56\n41 54\n53\n45 89 c6\n41 89 cf\n41 89 d4\n89 f5\n48 89 fb\n89 ef\ne8 33 10 00 00\n0f be 4b 03\n84 c0\n74 0b\n83 e1 df\n31 c0\n39 e9\n74 09\neb 2a\n31 c0\n40 38 e9\n75 23\n40 84 ed\n74 19\n41 0f be f4\n41 0f be d7\n41 0f be ce\n48 89 df\n5b\n41 5c\n41 5e\n41 5f\n5d\neb 1b\nb8 01 00 00 00\n5b\n41 5c\n41 5e\n41 5f\n5d\nc3\n'
p1104
S'.text:0000000000403f80\n.text:0000000000403f81\n.text:0000000000403f83\n.text:0000000000403f85\n.text:0000000000403f87\n.text:0000000000403f88\n.text:0000000000403f8b\n.text:0000000000403f8e\n.text:0000000000403f91\n.text:0000000000403f93\n.text:0000000000403f96\n.text:0000000000403f98\n.text:0000000000403f9d\n.text:0000000000403fa1\n.text:0000000000403fa3\n.text:0000000000403fa5\n.text:0000000000403fa8\n.text:0000000000403faa\n.text:0000000000403fac\n.text:0000000000403fae\n.text:0000000000403fb0\n.text:0000000000403fb2\n.text:0000000000403fb5\n.text:0000000000403fb7\n.text:0000000000403fba\n.text:0000000000403fbc\n.text:0000000000403fc0\n.text:0000000000403fc4\n.text:0000000000403fc8\n.text:0000000000403fcb\n.text:0000000000403fcc\n.text:0000000000403fce\n.text:0000000000403fd0\n.text:0000000000403fd2\n.text:0000000000403fd3\n.text:0000000000403fd5\n.text:0000000000403fda\n.text:0000000000403fdb\n.text:0000000000403fdd\n.text:0000000000403fdf\n.text:0000000000403fe1\n.text:0000000000403fe2\n'
p1105
tp1106
sS'register_tm_clones'
p1107
(S'\n__stdcall register_tm_clones()\n'
p1108
V\u000a/* WARNING: Removing unreachable block (ram,0x004018f3) */\u000a/* WARNING: Removing unreachable block (ram,0x004018fd) */\u000a\u000avoid register_tm_clones(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1109
S'MOV ESI,0x609290\nPUSH RBP\nSUB RSI,0x609290\nSAR RSI,0x3\nMOV RBP,RSP\nMOV RAX,RSI\nSHR RAX,0x3f\nADD RSI,RAX\nSAR RSI,1\nJZ 0x00401908\nMOV EAX,0x0\nTEST RAX,RAX\nJZ 0x00401908\nPOP RBP\nMOV EDI,0x609290\nJMP RAX\nPOP RBP\nRET\n'
p1110
S'be 90 92 60 00\n55\n48 81 ee 90 92 60 00\n48 c1 fe 03\n48 89 e5\n48 89 f0\n48 c1 e8 3f\n48 01 c6\n48 d1 fe\n74 15\nb8 00 00 00 00\n48 85 c0\n74 0b\n5d\nbf 90 92 60 00\nff e0\n5d\nc3\n'
p1111
S'.text:00000000004018d0\n.text:00000000004018d5\n.text:00000000004018d6\n.text:00000000004018dd\n.text:00000000004018e1\n.text:00000000004018e4\n.text:00000000004018e7\n.text:00000000004018eb\n.text:00000000004018ee\n.text:00000000004018f1\n.text:00000000004018f3\n.text:00000000004018f8\n.text:00000000004018fb\n.text:00000000004018fd\n.text:00000000004018fe\n.text:0000000000401903\n.text:0000000000401908\n.text:0000000000401909\n'
p1112
tp1113
sS'gettext_quote'
p1114
(S'\n__stdcall gettext_quote(char * msgid)\n'
p1115
V\u000achar * gettext_quote(char *msgid)\u000a\u000a{\u000a  int iVar1;\u000a  char *pcVar2;\u000a  char *pcVar3;\u000a  int in_ESI;\u000a  bool bVar4;\u000a  \u000a  pcVar2 = (char *)dcgettext(0,msgid,5);\u000a  if (pcVar2 == msgid) {\u000a    locale_charset();\u000a    iVar1 = strcaseeq0();\u000a    if (iVar1 == 0) {\u000a      iVar1 = strcaseeq0();\u000a      if (iVar1 == 0) {\u000a        bVar4 = in_ESI == 9;\u000a        pcVar3 = "\u005c"";\u000a        pcVar2 = "\u005c'";\u000a      }\u000a      else {\u000a        bVar4 = *msgid == '`';\u000a        pcVar3 = &DAT_00406830;\u000a        pcVar2 = &DAT_00406834;\u000a      }\u000a    }\u000a    else {\u000a      bVar4 = *msgid == '`';\u000a      pcVar3 = "\u2018";\u000a      pcVar2 = "\u2019";\u000a    }\u000a    if (bVar4) {\u000a      pcVar2 = pcVar3;\u000a    }\u000a  }\u000a  return pcVar2;\u000a}\u000a\u000a
p1116
S'PUSH RBP\nPUSH R14\nPUSH RBX\nMOV R14D,ESI\nMOV RBX,RDI\nXOR EDI,EDI\nMOV EDX,0x5\nMOV RSI,RBX\nCALL 0x00401540\nCMP RAX,RBX\nJNZ 0x00403de8\nCALL 0x00405090\nMOV RBP,RAX\nMOV ESI,0x55\nMOV EDX,0x54\nMOV ECX,0x46\nMOV R8D,0x2d\nMOV R9D,0x38\nMOV RDI,RBP\nPUSH 0x0\nPUSH 0x0\nCALL 0x00403df0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403d98\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406820\nMOV EAX,0x406824\nJMP 0x00403de4\nMOV ESI,0x47\nMOV EDX,0x42\nMOV ECX,0x31\nMOV R8D,0x38\nMOV R9D,0x30\nMOV RDI,RBP\nPUSH 0x30\nPUSH 0x33\nCALL 0x00403df0\nADD RSP,0x10\nTEST EAX,EAX\nJZ 0x00403dd6\nCMP byte ptr [RBX],0x60\nMOV ECX,0x406830\nMOV EAX,0x406834\nJMP 0x00403de4\nCMP R14D,0x9\nMOV ECX,0x406814\nMOV EAX,0x406818\nCMOVZ RAX,RCX\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1117
S'55\n41 56\n53\n41 89 f6\n48 89 fb\n31 ff\nba 05 00 00 00\n48 89 de\ne8 f7 d7 ff ff\n48 39 d8\n0f 85 96 00 00 00\ne8 39 13 00 00\n48 89 c5\nbe 55 00 00 00\nba 54 00 00 00\nb9 46 00 00 00\n41 b8 2d 00 00 00\n41 b9 38 00 00 00\n48 89 ef\n6a 00\n6a 00\ne8 6f 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 20 68 40 00\nb8 24 68 40 00\neb 4c\nbe 47 00 00 00\nba 42 00 00 00\nb9 31 00 00 00\n41 b8 38 00 00 00\n41 b9 30 00 00 00\n48 89 ef\n6a 30\n6a 33\ne8 31 00 00 00\n48 83 c4 10\n85 c0\n74 0f\n80 3b 60\nb9 30 68 40 00\nb8 34 68 40 00\neb 0e\n41 83 fe 09\nb9 14 68 40 00\nb8 18 68 40 00\n48 0f 44 c1\n5b\n41 5e\n5d\nc3\n'
p1118
S'.text:0000000000403d30\n.text:0000000000403d31\n.text:0000000000403d33\n.text:0000000000403d34\n.text:0000000000403d37\n.text:0000000000403d3a\n.text:0000000000403d3c\n.text:0000000000403d41\n.text:0000000000403d44\n.text:0000000000403d49\n.text:0000000000403d4c\n.text:0000000000403d52\n.text:0000000000403d57\n.text:0000000000403d5a\n.text:0000000000403d5f\n.text:0000000000403d64\n.text:0000000000403d69\n.text:0000000000403d6f\n.text:0000000000403d75\n.text:0000000000403d78\n.text:0000000000403d7a\n.text:0000000000403d7c\n.text:0000000000403d81\n.text:0000000000403d85\n.text:0000000000403d87\n.text:0000000000403d89\n.text:0000000000403d8c\n.text:0000000000403d91\n.text:0000000000403d96\n.text:0000000000403d98\n.text:0000000000403d9d\n.text:0000000000403da2\n.text:0000000000403da7\n.text:0000000000403dad\n.text:0000000000403db3\n.text:0000000000403db6\n.text:0000000000403db8\n.text:0000000000403dba\n.text:0000000000403dbf\n.text:0000000000403dc3\n.text:0000000000403dc5\n.text:0000000000403dc7\n.text:0000000000403dca\n.text:0000000000403dcf\n.text:0000000000403dd4\n.text:0000000000403dd6\n.text:0000000000403dda\n.text:0000000000403ddf\n.text:0000000000403de4\n.text:0000000000403de8\n.text:0000000000403de9\n.text:0000000000403deb\n.text:0000000000403dec\n'
p1119
tp1120
sS'xstrtoul'
p1121
(S'\n__stdcall xstrtoul(char * s, char * * ptr, ulong * val, char * valid_suffixes)\n'
p1122
V\u000astrtol_error xstrtoul(char *s,char **ptr,ulong *val,char *valid_suffixes)\u000a\u000a{\u000a  byte bVar1;\u000a  char cVar2;\u000a  strtol_error sVar3;\u000a  int *piVar4;\u000a  ushort **ppuVar5;\u000a  char *pcVar6;\u000a  char *pcVar7;\u000a  byte *pbVar8;\u000a  strtol_error sVar9;\u000a  strtol_error sVar10;\u000a  long lVar11;\u000a  char *__s;\u000a  char **__endptr;\u000a  ulong local_48;\u000a  ulong *local_40;\u000a  char *local_38;\u000a  \u000a  if (0x24 < (uint)val) {\u000a                    /* WARNING: Subroutine does not return */\u000a    __assert_fail("0 <= strtol_base && strtol_base <= 36","./lib/xstrtol.c",0x60,\u000a                  "strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)"\u000a                 );\u000a  }\u000a  local_40 = (ulong *)valid_suffixes;\u000a  piVar4 = __errno_location();\u000a  *piVar4 = 0;\u000a  ppuVar5 = __ctype_b_loc();\u000a  pbVar8 = (byte *)s;\u000a  do {\u000a    bVar1 = *pbVar8;\u000a    pbVar8 = pbVar8 + 1;\u000a  } while ((*(byte *)((long)*ppuVar5 + (ulong)bVar1 * 2 + 1) & 0x20) != 0);\u000a  __endptr = &local_38;\u000a  if (ptr != (char **)0x0) {\u000a    __endptr = ptr;\u000a  }\u000a  if (bVar1 == 0x2d) {\u000a    return LONGINT_INVALID;\u000a  }\u000a  local_48 = strtoul(s,__endptr,(uint)val);\u000a  if (*__endptr == s) {\u000a    if (__s == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    cVar2 = **__endptr;\u000a    if (cVar2 == 0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    pcVar6 = strchr(__s,(int)cVar2);\u000a    if (pcVar6 == (char *)0x0) {\u000a      return LONGINT_INVALID;\u000a    }\u000a    local_48 = 1;\u000a    sVar9 = LONGINT_OK;\u000a  }\u000a  else {\u000a    if (*piVar4 == 0) {\u000a      sVar9 = LONGINT_OK;\u000a    }\u000a    else {\u000a      if (*piVar4 != 0x22) {\u000a        return LONGINT_INVALID;\u000a      }\u000a      sVar9 = LONGINT_OVERFLOW;\u000a    }\u000a    sVar10 = sVar9;\u000a    if (__s == (char *)0x0) goto LAB_00404dd6;\u000a  }\u000a  pcVar6 = *__endptr;\u000a  sVar10 = sVar9;\u000a  if (*pcVar6 == 0) goto LAB_00404dd6;\u000a  pcVar7 = strchr(__s,(int)*pcVar6);\u000a  if (pcVar7 == (char *)0x0) goto switchD_00404d05_caseD_43;\u000a  pcVar7 = strchr(__s,0x30);\u000a  if (pcVar7 == (char *)0x0) {\u000aLAB_00404ce3:\u000a    lVar11 = 1;\u000a  }\u000a  else {\u000a    cVar2 = pcVar6[1];\u000a    if ((cVar2 == 'B') || (cVar2 == 'D')) {\u000a      lVar11 = 2;\u000a    }\u000a    else {\u000a      if (cVar2 != 'i') goto LAB_00404ce3;\u000a      lVar11 = (ulong)(pcVar6[2] == 'B') * 2 + 1;\u000a    }\u000a  }\u000a  sVar3 = LONGINT_OK;\u000a  switch(**__endptr) {\u000a  case 'B':\u000a    goto LAB_00404db7;\u000a  default:\u000aswitchD_00404d05_caseD_43:\u000a    *local_40 = local_48;\u000a    return sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  case 'E':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'G':\u000a  case 'g':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'K':\u000a  case 'k':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'M':\u000a  case 'm':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'P':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'T':\u000a  case 't':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Y':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'Z':\u000a    sVar3 = bkm_scale_by_power(&local_48);\u000a    break;\u000a  case 'b':\u000a    goto LAB_00404db7;\u000a  case 'c':\u000a    break;\u000a  case 'w':\u000aLAB_00404db7:\u000a    sVar3 = bkm_scale(&local_48);\u000a  }\u000a  pcVar6 = *__endptr;\u000a  *__endptr = pcVar6 + lVar11;\u000a  sVar10 = sVar3 | sVar9 | LONGINT_INVALID_SUFFIX_CHAR;\u000a  if (pcVar6[lVar11] == 0) {\u000a    sVar10 = sVar3 | sVar9;\u000a  }\u000aLAB_00404dd6:\u000a  *local_40 = local_48;\u000a  return sVar10;\u000a}\u000a\u000a
p1123
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R12,R8\nMOV R14D,EDX\nMOV RBX,RSI\nMOV RBP,RDI\nCMP R14D,0x25\nJNC 0x00404df3\nMOV qword ptr [RSP + 0x8],RCX\nCALL 0x004014a0\nMOV R15,RAX\nMOV dword ptr [R15],0x0\nCALL 0x00401850\nMOV RCX,qword ptr [RAX]\nMOV RDX,RBP\nNOP dword ptr CS:[RAX + RAX*0x1]\nMOVZX EAX,byte ptr [RDX]\nINC RDX\nTEST byte ptr [RCX + RAX*0x2 + 0x1],0x20\nJNZ 0x00404bf0\nTEST RBX,RBX\nLEA R13,[RSP + 0x10]\nCMOVNZ R13,RBX\nMOV EBX,0x4\nCMP AL,0x2d\nJZ 0x00404de2\nMOV RDI,RBP\nMOV RSI,R13\nMOV EDX,R14D\nCALL 0x004017e0\nMOV qword ptr [RSP],RAX\nMOV RAX,qword ptr [R13]\nCMP RAX,RBP\nJZ 0x00404c50\nMOV EAX,dword ptr [R15]\nTEST EAX,EAX\nJZ 0x00404c81\nCMP EAX,0x22\nJNZ 0x00404de2\nMOV EBX,0x1\nTEST R12,R12\nJNZ 0x00404c8c\nJMP 0x00404dd6\nTEST R12,R12\nJZ 0x00404de2\nMOVSX ESI,byte ptr [RAX]\nTEST ESI,ESI\nJZ 0x00404de2\nMOV RDI,R12\nCALL 0x004015a0\nTEST RAX,RAX\nJZ 0x00404de2\nMOV qword ptr [RSP],0x1\nXOR EBX,EBX\nJMP 0x00404c8c\nXOR EBX,EBX\nTEST R12,R12\nJZ 0x00404dd6\nMOV RBP,qword ptr [R13]\nMOVSX ESI,byte ptr [RBP]\nTEST ESI,ESI\nJZ 0x00404dd6\nMOV RDI,R12\nCALL 0x004015a0\nTEST RAX,RAX\nJZ 0x00404d1e\nMOV ESI,0x30\nMOV RDI,R12\nCALL 0x004015a0\nMOV ESI,0x400\nTEST RAX,RAX\nJZ 0x00404ce3\nMOVSX EAX,byte ptr [RBP + 0x1]\nCMP EAX,0x42\nJZ 0x00404cea\nCMP EAX,0x44\nJZ 0x00404cea\nCMP EAX,0x69\nJNZ 0x00404ce3\nXOR EAX,EAX\nCMP byte ptr [RBP + 0x2],0x42\nSETZ AL\nLEA RBP,[RAX + RAX*0x1 + 0x1]\nJMP 0x00404cf4\nMOV EBP,0x1\nJMP 0x00404cf4\nMOV ESI,0x3e8\nMOV EBP,0x2\nMOV RAX,qword ptr [R13]\nMOVSX ECX,byte ptr [RAX]\nADD ECX,-0x42\nCMP ECX,0x35\nJA 0x00404d1e\nXOR EAX,EAX\nJMP qword ptr [0x406bd0 + RCX*0x8]\nMOV RDI,RSP\nMOV EDX,0x3\nCALL 0x00404e40\nJMP 0x00404dbc\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nOR EBX,0x2\nJMP 0x00404de2\nMOV RDI,RSP\nMOV EDX,0x1\nCALL 0x00404e40\nJMP 0x00404dbc\nMOV RDI,RSP\nMOV EDX,0x2\nCALL 0x00404e40\nJMP 0x00404dbc\nMOV RDI,RSP\nMOV EDX,0x4\nCALL 0x00404e40\nJMP 0x00404dbc\nMOV RDI,RSP\nMOV ESI,0x400\nJMP 0x00404db7\nMOV RDI,RSP\nMOV EDX,0x6\nCALL 0x00404e40\nJMP 0x00404dbc\nMOV RDI,RSP\nMOV EDX,0x5\nCALL 0x00404e40\nJMP 0x00404dbc\nMOV RDI,RSP\nMOV EDX,0x8\nCALL 0x00404e40\nJMP 0x00404dbc\nMOV RDI,RSP\nMOV EDX,0x7\nCALL 0x00404e40\nJMP 0x00404dbc\nMOV RDI,RSP\nMOV ESI,0x200\nJMP 0x00404db7\nMOV RDI,RSP\nMOV ESI,0x2\nCALL 0x00404e10\nOR EAX,EBX\nMOV RCX,qword ptr [R13]\nLEA RDX,[RCX + RBP*0x1]\nMOV qword ptr [R13],RDX\nMOV EBX,EAX\nOR EBX,0x2\nCMP byte ptr [RCX + RBP*0x1],0x0\nCMOVZ EBX,EAX\nMOV RAX,qword ptr [RSP]\nMOV RCX,qword ptr [RSP + 0x8]\nMOV qword ptr [RCX],RAX\nMOV EAX,EBX\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\nMOV EDI,0x406d80\nMOV ESI,0x406da6\nMOV EDX,0x60\nMOV ECX,0x406db6\nCALL 0x004015e0\n'
p1124
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n4d 89 c4\n41 89 d6\n48 89 f3\n48 89 fd\n41 83 fe 25\n0f 83 2f 02 00 00\n48 89 4c 24 08\ne8 d2 c8 ff ff\n49 89 c7\n41 c7 07 00 00 00 00\ne8 73 cc ff ff\n48 8b 08\n48 89 ea\n66 66 66 66 2e 0f 1f 84 00 00 00 00 00\n0f b6 02\n48 ff c2\nf6 44 41 01 20\n75 f3\n48 85 db\n4c 8d 6c 24 10\n4c 0f 45 eb\nbb 04 00 00 00\n3c 2d\n0f 84 cc 01 00 00\n48 89 ef\n4c 89 ee\n44 89 f2\ne8 bc cb ff ff\n48 89 04 24\n49 8b 45 00\n48 39 e8\n74 1f\n41 8b 07\n85 c0\n74 49\n83 f8 22\n0f 85 a1 01 00 00\nbb 01 00 00 00\n4d 85 e4\n75 41\ne9 86 01 00 00\n4d 85 e4\n0f 84 89 01 00 00\n0f be 30\n85 f6\n0f 84 7e 01 00 00\n4c 89 e7\ne8 34 c9 ff ff\n48 85 c0\n0f 84 6d 01 00 00\n48 c7 04 24 01 00 00 00\n31 db\neb 0b\n31 db\n4d 85 e4\n0f 84 4a 01 00 00\n49 8b 6d 00\n0f be 75 00\n85 f6\n0f 84 3a 01 00 00\n4c 89 e7\ne8 fc c8 ff ff\n48 85 c0\n74 75\nbe 30 00 00 00\n4c 89 e7\ne8 ea c8 ff ff\nbe 00 04 00 00\n48 85 c0\n74 23\n0f be 45 01\n83 f8 42\n74 21\n83 f8 44\n74 1c\n83 f8 69\n75 10\n31 c0\n80 7d 02 42\n0f 94 c0\n48 8d 6c 00 01\neb 11\nbd 01 00 00 00\neb 0a\nbe e8 03 00 00\nbd 02 00 00 00\n49 8b 45 00\n0f be 08\n83 c1 be\n83 f9 35\n77 1b\n31 c0\nff 24 cd d0 6b 40 00\n48 89 e7\nba 03 00 00 00\ne8 27 01 00 00\ne9 9e 00 00 00\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n83 cb 02\ne9 b0 00 00 00\n48 89 e7\nba 01 00 00 00\ne8 01 01 00 00\neb 7b\n48 89 e7\nba 02 00 00 00\ne8 f2 00 00 00\neb 6c\n48 89 e7\nba 04 00 00 00\ne8 e3 00 00 00\neb 5d\n48 89 e7\nbe 00 04 00 00\neb 4e\n48 89 e7\nba 06 00 00 00\ne8 ca 00 00 00\neb 44\n48 89 e7\nba 05 00 00 00\ne8 bb 00 00 00\neb 35\n48 89 e7\nba 08 00 00 00\ne8 ac 00 00 00\neb 26\n48 89 e7\nba 07 00 00 00\ne8 9d 00 00 00\neb 17\n48 89 e7\nbe 00 02 00 00\neb 08\n48 89 e7\nbe 02 00 00 00\ne8 54 00 00 00\n09 d8\n49 8b 4d 00\n48 8d 14 29\n49 89 55 00\n89 c3\n83 cb 02\n80 3c 29 00\n0f 44 d8\n48 8b 04 24\n48 8b 4c 24 08\n48 89 01\n89 d8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\nbf 80 6d 40 00\nbe a6 6d 40 00\nba 60 00 00 00\nb9 b6 6d 40 00\ne8 d4 c7 ff ff\n'
p1125
S'.text:0000000000404ba0\n.text:0000000000404ba1\n.text:0000000000404ba3\n.text:0000000000404ba5\n.text:0000000000404ba7\n.text:0000000000404ba9\n.text:0000000000404baa\n.text:0000000000404bae\n.text:0000000000404bb1\n.text:0000000000404bb4\n.text:0000000000404bb7\n.text:0000000000404bba\n.text:0000000000404bbe\n.text:0000000000404bc4\n.text:0000000000404bc9\n.text:0000000000404bce\n.text:0000000000404bd1\n.text:0000000000404bd8\n.text:0000000000404bdd\n.text:0000000000404be0\n.text:0000000000404be3\n.text:0000000000404bf0\n.text:0000000000404bf3\n.text:0000000000404bf6\n.text:0000000000404bfb\n.text:0000000000404bfd\n.text:0000000000404c00\n.text:0000000000404c05\n.text:0000000000404c09\n.text:0000000000404c0e\n.text:0000000000404c10\n.text:0000000000404c16\n.text:0000000000404c19\n.text:0000000000404c1c\n.text:0000000000404c1f\n.text:0000000000404c24\n.text:0000000000404c28\n.text:0000000000404c2c\n.text:0000000000404c2f\n.text:0000000000404c31\n.text:0000000000404c34\n.text:0000000000404c36\n.text:0000000000404c38\n.text:0000000000404c3b\n.text:0000000000404c41\n.text:0000000000404c46\n.text:0000000000404c49\n.text:0000000000404c4b\n.text:0000000000404c50\n.text:0000000000404c53\n.text:0000000000404c59\n.text:0000000000404c5c\n.text:0000000000404c5e\n.text:0000000000404c64\n.text:0000000000404c67\n.text:0000000000404c6c\n.text:0000000000404c6f\n.text:0000000000404c75\n.text:0000000000404c7d\n.text:0000000000404c7f\n.text:0000000000404c81\n.text:0000000000404c83\n.text:0000000000404c86\n.text:0000000000404c8c\n.text:0000000000404c90\n.text:0000000000404c94\n.text:0000000000404c96\n.text:0000000000404c9c\n.text:0000000000404c9f\n.text:0000000000404ca4\n.text:0000000000404ca7\n.text:0000000000404ca9\n.text:0000000000404cae\n.text:0000000000404cb1\n.text:0000000000404cb6\n.text:0000000000404cbb\n.text:0000000000404cbe\n.text:0000000000404cc0\n.text:0000000000404cc4\n.text:0000000000404cc7\n.text:0000000000404cc9\n.text:0000000000404ccc\n.text:0000000000404cce\n.text:0000000000404cd1\n.text:0000000000404cd3\n.text:0000000000404cd5\n.text:0000000000404cd9\n.text:0000000000404cdc\n.text:0000000000404ce1\n.text:0000000000404ce3\n.text:0000000000404ce8\n.text:0000000000404cea\n.text:0000000000404cef\n.text:0000000000404cf4\n.text:0000000000404cf8\n.text:0000000000404cfb\n.text:0000000000404cfe\n.text:0000000000404d01\n.text:0000000000404d03\n.text:0000000000404d05\n.text:0000000000404d0c\n.text:0000000000404d0f\n.text:0000000000404d14\n.text:0000000000404d19\n.text:0000000000404d1e\n.text:0000000000404d22\n.text:0000000000404d27\n.text:0000000000404d2a\n.text:0000000000404d2d\n.text:0000000000404d32\n.text:0000000000404d35\n.text:0000000000404d3a\n.text:0000000000404d3f\n.text:0000000000404d41\n.text:0000000000404d44\n.text:0000000000404d49\n.text:0000000000404d4e\n.text:0000000000404d50\n.text:0000000000404d53\n.text:0000000000404d58\n.text:0000000000404d5d\n.text:0000000000404d5f\n.text:0000000000404d62\n.text:0000000000404d67\n.text:0000000000404d69\n.text:0000000000404d6c\n.text:0000000000404d71\n.text:0000000000404d76\n.text:0000000000404d78\n.text:0000000000404d7b\n.text:0000000000404d80\n.text:0000000000404d85\n.text:0000000000404d87\n.text:0000000000404d8a\n.text:0000000000404d8f\n.text:0000000000404d94\n.text:0000000000404d96\n.text:0000000000404d99\n.text:0000000000404d9e\n.text:0000000000404da3\n.text:0000000000404da5\n.text:0000000000404da8\n.text:0000000000404dad\n.text:0000000000404daf\n.text:0000000000404db2\n.text:0000000000404db7\n.text:0000000000404dbc\n.text:0000000000404dbe\n.text:0000000000404dc2\n.text:0000000000404dc6\n.text:0000000000404dca\n.text:0000000000404dcc\n.text:0000000000404dcf\n.text:0000000000404dd3\n.text:0000000000404dd6\n.text:0000000000404dda\n.text:0000000000404ddf\n.text:0000000000404de2\n.text:0000000000404de4\n.text:0000000000404de8\n.text:0000000000404de9\n.text:0000000000404deb\n.text:0000000000404ded\n.text:0000000000404def\n.text:0000000000404df1\n.text:0000000000404df2\n.text:0000000000404df3\n.text:0000000000404df8\n.text:0000000000404dfd\n.text:0000000000404e02\n.text:0000000000404e07\n'
p1126
tp1127
sS'c_islower'
p1128
(S'\n__stdcall c_islower()\n'
p1129
V\u000a_Bool c_islower(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x61U < 0x1a);\u000a}\u000a\u000a
p1130
S'ADD EDI,-0x61\nCMP EDI,0x1a\nSETC AL\nRET\n'
p1131
S'83 c7 9f\n83 ff 1a\n0f 92 c0\nc3\n'
p1132
S'.text:0000000000404f70\n.text:0000000000404f73\n.text:0000000000404f76\n.text:0000000000404f79\n'
p1133
tp1134
sS'fclose'
p1135
(S'\n__stdcall fclose(FILE * __stream)\n'
p1136
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000aint fclose(FILE *__stream)\u000a\u000a{\u000a  int iVar1;\u000a  \u000a  iVar1 = (*(code *)PTR_fclose_00609070)();\u000a  return iVar1;\u000a}\u000a\u000a
p1137
S'JMP qword ptr [0x00609070]\n'
p1138
S'ff 25 5a 7b 20 00\n'
p1139
S'.plt:0000000000401510\n'
p1140
tp1141
sS'__ctype_get_mb_cur_max'
p1142
(S'\n__stdcall __ctype_get_mb_cur_max()\n'
p1143
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t __ctype_get_mb_cur_max(void)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR___ctype_get_mb_cur_max_00609090)();\u000a  return sVar1;\u000a}\u000a\u000a
p1144
S'JMP qword ptr [0x00609090]\n'
p1145
S'ff 25 3a 7b 20 00\n'
p1146
S'.plt:0000000000401550\n'
p1147
tp1148
sS'quotearg_n_style'
p1149
(S'\n__stdcall quotearg_n_style(char * arg)\n'
p1150
V\u000achar * quotearg_n_style(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  quoting_options o;\u000a  quoting_options local_50;\u000a  \u000a  quoting_options_from_style(&local_50);\u000a  pcVar1 = quotearg_n_options((char *)((ulong)arg & 0xffffffff),argsize,\u000a                              (quoting_options *)0xffffffffffffffff);\u000a  return pcVar1;\u000a}\u000a\u000a
p1151
S'PUSH RBP\nPUSH R14\nPUSH RBX\nSUB RSP,0x40\nMOV RBX,RDX\nMOV EBP,EDI\nLEA R14,[RSP + 0x8]\nMOV RDI,R14\nCALL 0x00403a60\nMOV RDX,-0x1\nMOV EDI,EBP\nMOV RSI,RBX\nMOV RCX,R14\nCALL 0x00403830\nADD RSP,0x40\nPOP RBX\nPOP R14\nPOP RBP\nRET\n'
p1152
S'55\n41 56\n53\n48 83 ec 40\n48 89 d3\n89 fd\n4c 8d 74 24 08\n4c 89 f7\ne8 26 00 00 00\n48 c7 c2 ff ff ff ff\n89 ef\n48 89 de\n4c 89 f1\ne8 e2 fd ff ff\n48 83 c4 40\n5b\n41 5e\n5d\nc3\n'
p1153
S'.text:0000000000403a20\n.text:0000000000403a21\n.text:0000000000403a23\n.text:0000000000403a24\n.text:0000000000403a28\n.text:0000000000403a2b\n.text:0000000000403a2d\n.text:0000000000403a32\n.text:0000000000403a35\n.text:0000000000403a3a\n.text:0000000000403a41\n.text:0000000000403a43\n.text:0000000000403a46\n.text:0000000000403a49\n.text:0000000000403a4e\n.text:0000000000403a52\n.text:0000000000403a53\n.text:0000000000403a55\n.text:0000000000403a56\n'
p1154
tp1155
sS'mgetgroups'
p1156
(S'\n__stdcall mgetgroups(char * username, gid_t * * groups)\n'
p1157
V\u000aint mgetgroups(char *username,gid_t **groups)\u000a\u000a{\u000a  gid_t gVar1;\u000a  gid_t gVar2;\u000a  __gid_t __group;\u000a  int iVar3;\u000a  uint uVar4;\u000a  gid_t *__groups;\u000a  gid_t *pgVar5;\u000a  int *piVar6;\u000a  gid_t **in_RDX;\u000a  gid_t *pgVar7;\u000a  uint uVar8;\u000a  uint local_3c;\u000a  gid_t **local_38;\u000a  \u000a  __group = (__gid_t)groups;\u000a  if (username == (char *)0x0) {\u000a    local_3c = getgroups(0,(__gid_t *)0x0);\u000a    if ((int)local_3c < 0) {\u000a      piVar6 = __errno_location();\u000a      uVar8 = 0xffffffff;\u000a      if ((*piVar6 == 0x26) &&\u000a         (__groups = realloc_groupbuf((gid_t *)0x0,1), __groups != (gid_t *)0x0)) {\u000a        *in_RDX = __groups;\u000a        *__groups = __group;\u000a        uVar8 = (uint)(__group != 0xffffffff);\u000a      }\u000a    }\u000a    else {\u000a      if ((__group != 0xffffffff) || (local_3c == 0)) {\u000a        local_3c = local_3c + 1;\u000a      }\u000a      __groups = realloc_groupbuf((gid_t *)0x0,(long)(int)local_3c);\u000a      uVar8 = 0xffffffff;\u000a      if (__groups != (gid_t *)0x0) {\u000a        uVar4 = getgroups(local_3c - (uint)(__group != 0xffffffff),\u000a                          __groups + (ulong)(__group != 0xffffffff));\u000a        if ((int)uVar4 < 0) {\u000a          piVar6 = __errno_location();\u000a          iVar3 = *piVar6;\u000a          free(__groups);\u000a          *piVar6 = iVar3;\u000a        }\u000a        else {\u000a          if (__group != 0xffffffff) {\u000a            *__groups = __group;\u000a            uVar4 = uVar4 + 1;\u000a          }\u000a          *in_RDX = __groups;\u000a          uVar8 = uVar4;\u000a          if (1 < (int)uVar4) {\u000a            gVar1 = *__groups;\u000a            pgVar5 = __groups + (long)(int)uVar4;\u000a            pgVar7 = __groups + 1;\u000a            uVar8 = uVar4;\u000a            do {\u000a              gVar2 = *pgVar7;\u000a              if ((gVar2 == gVar1) || (gVar2 == *__groups)) {\u000a                uVar8 = uVar8 - 1;\u000a              }\u000a              else {\u000a                __groups[1] = gVar2;\u000a                __groups = __groups + 1;\u000a              }\u000a              pgVar7 = pgVar7 + 1;\u000a            } while (pgVar7 < pgVar5);\u000a          }\u000a        }\u000a      }\u000a    }\u000a  }\u000a  else {\u000a    local_3c = 10;\u000a    __groups = realloc_groupbuf((gid_t *)0x0,10);\u000a    uVar8 = 0xffffffff;\u000a    local_38 = in_RDX;\u000a    if (__groups != (gid_t *)0x0) {\u000a      do {\u000a        uVar8 = local_3c;\u000a        iVar3 = getgrouplist(username,__group,__groups,(int *)&local_3c);\u000a        if ((iVar3 < 0) && (uVar8 == local_3c)) {\u000a          local_3c = local_3c * 2;\u000a        }\u000a        pgVar5 = realloc_groupbuf(__groups,(long)(int)local_3c);\u000a        if (pgVar5 == (gid_t *)0x0) {\u000a          piVar6 = __errno_location();\u000a          iVar3 = *piVar6;\u000a          free(__groups);\u000a          *piVar6 = iVar3;\u000a          return -1;\u000a        }\u000a        __groups = pgVar5;\u000a      } while (iVar3 < 0);\u000a      *local_38 = pgVar5;\u000a      uVar8 = local_3c;\u000a    }\u000a  }\u000a  return (int)uVar8;\u000a}\u000a\u000a
p1158
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH R13\nPUSH R12\nPUSH RBX\nSUB RSP,0x18\nMOV R14,RDX\nMOV R12D,ESI\nMOV RBP,RDI\nTEST RBP,RBP\nJZ 0x00405470\nMOV dword ptr [RSP + 0xc],0xa\nXOR EDI,EDI\nMOV ESI,0xa\nCALL 0x004055a0\nMOV RBX,RAX\nMOV R13D,0xffffffff\nTEST RBX,RBX\nJZ 0x00405587\nMOV R15D,R12D\nMOV qword ptr [RSP + 0x10],R14\nNOP\nMOV R12D,dword ptr [RSP + 0xc]\nMOV RDI,RBP\nMOV ESI,R15D\nMOV RDX,RBX\nLEA RCX,[RSP + 0xc]\nCALL 0x004017b0\nMOV R14D,EAX\nTEST R14D,R14D\nJNS 0x00405440\nMOV EAX,dword ptr [RSP + 0xc]\nCMP R12D,EAX\nJNZ 0x00405440\nADD EAX,EAX\nMOV dword ptr [RSP + 0xc],EAX\nNOP\nMOVSXD RSI,dword ptr [RSP + 0xc]\nMOV RDI,RBX\nCALL 0x004055a0\nTEST RAX,RAX\nJZ 0x004054fb\nTEST R14D,R14D\nMOV RBX,RAX\nJS 0x00405410\nMOV RCX,qword ptr [RSP + 0x10]\nMOV qword ptr [RCX],RAX\nMOV R13D,dword ptr [RSP + 0xc]\nJMP 0x00405587\nXOR EDI,EDI\nXOR ESI,ESI\nCALL 0x004016e0\nMOV dword ptr [RSP + 0xc],EAX\nTEST EAX,EAX\nJS 0x00405515\nCMP R12D,-0x1\nJNZ 0x0040548f\nTEST EAX,EAX\nJNZ 0x00405493\nINC dword ptr [RSP + 0xc]\nMOVSXD RSI,dword ptr [RSP + 0xc]\nXOR EDI,EDI\nCALL 0x004055a0\nMOV R15,RAX\nMOV R13D,0xffffffff\nTEST R15,R15\nJZ 0x00405587\nMOV EDI,dword ptr [RSP + 0xc]\nXOR EAX,EAX\nCMP R12D,-0x1\nSETNZ AL\nSUB EDI,EAX\nLEA RSI,[R15 + RAX*0x4]\nCALL 0x004016e0\nTEST EAX,EAX\nJS 0x00405549\nCMP R12D,-0x1\nJZ 0x004054d8\nMOV dword ptr [R15],R12D\nINC EAX\nMOV R13D,EAX\nMOV qword ptr [R14],R15\nCMP R13D,0x2\nJL 0x00405587\nMOV EAX,dword ptr [R15]\nMOVSXD RCX,R13D\nLEA RCX,[R15 + RCX*0x4]\nMOV RDX,R15\nADD RDX,0x4\nJMP 0x00405570\nCALL 0x004014a0\nMOV RBP,RAX\nMOV R14D,dword ptr [RBP]\nMOV RDI,RBX\nCALL 0x00401480\nMOV dword ptr [RBP],R14D\nJMP 0x00405587\nCALL 0x004014a0\nMOV R13D,0xffffffff\nCMP dword ptr [RAX],0x26\nJNZ 0x00405587\nXOR EDI,EDI\nMOV ESI,0x1\nCALL 0x004055a0\nTEST RAX,RAX\nJZ 0x00405587\nMOV qword ptr [R14],RAX\nMOV dword ptr [RAX],R12D\nXOR R13D,R13D\nCMP R12D,-0x1\nSETNZ R13B\nJMP 0x00405587\nCALL 0x004014a0\nMOV RBX,RAX\nMOV EBP,dword ptr [RBX]\nMOV RDI,R15\nCALL 0x00401480\nMOV dword ptr [RBX],EBP\nJMP 0x00405587\nMOV dword ptr [R15 + 0x4],ESI\nADD R15,0x4\nJMP 0x0040557e\nMOV ESI,dword ptr [RDX]\nCMP ESI,EAX\nJZ 0x0040557b\nCMP ESI,dword ptr [R15]\nJNZ 0x0040555f\nDEC R13D\nADD RDX,0x4\nCMP RDX,RCX\nJC 0x00405570\nMOV EAX,R13D\nADD RSP,0x18\nPOP RBX\nPOP R12\nPOP R13\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1159
S'55\n41 57\n41 56\n41 55\n41 54\n53\n48 83 ec 18\n49 89 d6\n41 89 f4\n48 89 fd\n48 85 ed\n0f 84 90 00 00 00\nc7 44 24 0c 0a 00 00 00\n31 ff\nbe 0a 00 00 00\ne8 ac 01 00 00\n48 89 c3\n41 bd ff ff ff ff\n48 85 db\n0f 84 81 01 00 00\n45 89 e7\n4c 89 74 24 10\n66 90\n44 8b 64 24 0c\n48 89 ef\n44 89 fe\n48 89 da\n48 8d 4c 24 0c\ne8 88 c3 ff ff\n41 89 c6\n45 85 f6\n79 10\n8b 44 24 0c\n41 39 c4\n75 07\n01 c0\n89 44 24 0c\n90\n48 63 74 24 0c\n48 89 df\ne8 53 01 00 00\n48 85 c0\n0f 84 a5 00 00 00\n45 85 f6\n48 89 c3\n78 b2\n48 8b 4c 24 10\n48 89 01\n44 8b 6c 24 0c\ne9 17 01 00 00\n31 ff\n31 f6\ne8 67 c2 ff ff\n89 44 24 0c\n85 c0\n0f 88 90 00 00 00\n41 83 fc ff\n75 04\n85 c0\n75 04\nff 44 24 0c\n48 63 74 24 0c\n31 ff\ne8 01 01 00 00\n49 89 c7\n41 bd ff ff ff ff\n4d 85 ff\n0f 84 d6 00 00 00\n8b 7c 24 0c\n31 c0\n41 83 fc ff\n0f 95 c0\n29 c7\n49 8d 34 87\ne8 17 c2 ff ff\n85 c0\n78 7c\n41 83 fc ff\n74 05\n45 89 27\nff c0\n41 89 c5\n4d 89 3e\n41 83 fd 02\n0f 8c 9f 00 00 00\n41 8b 07\n49 63 cd\n49 8d 0c 8f\n4c 89 fa\n48 83 c2 04\neb 75\ne8 a0 bf ff ff\n48 89 c5\n44 8b 75 00\n48 89 df\ne8 71 bf ff ff\n44 89 75 00\neb 72\ne8 86 bf ff ff\n41 bd ff ff ff ff\n83 38 26\n75 62\n31 ff\nbe 01 00 00 00\ne8 6f 00 00 00\n48 85 c0\n74 51\n49 89 06\n44 89 20\n45 31 ed\n41 83 fc ff\n41 0f 95 c5\neb 3e\ne8 52 bf ff ff\n48 89 c3\n8b 2b\n4c 89 ff\ne8 25 bf ff ff\n89 2b\neb 28\n41 89 77 04\n49 83 c7 04\neb 15\n8b 32\n39 c6\n74 05\n41 3b 37\n75 e4\n41 ff cd\n48 83 c2 04\n48 39 ca\n72 e9\n44 89 e8\n48 83 c4 18\n5b\n41 5c\n41 5d\n41 5e\n41 5f\n5d\nc3\n'
p1160
S'.text:00000000004053c0\n.text:00000000004053c1\n.text:00000000004053c3\n.text:00000000004053c5\n.text:00000000004053c7\n.text:00000000004053c9\n.text:00000000004053ca\n.text:00000000004053ce\n.text:00000000004053d1\n.text:00000000004053d4\n.text:00000000004053d7\n.text:00000000004053da\n.text:00000000004053e0\n.text:00000000004053e8\n.text:00000000004053ea\n.text:00000000004053ef\n.text:00000000004053f4\n.text:00000000004053f7\n.text:00000000004053fd\n.text:0000000000405400\n.text:0000000000405406\n.text:0000000000405409\n.text:000000000040540e\n.text:0000000000405410\n.text:0000000000405415\n.text:0000000000405418\n.text:000000000040541b\n.text:000000000040541e\n.text:0000000000405423\n.text:0000000000405428\n.text:000000000040542b\n.text:000000000040542e\n.text:0000000000405430\n.text:0000000000405434\n.text:0000000000405437\n.text:0000000000405439\n.text:000000000040543b\n.text:000000000040543f\n.text:0000000000405440\n.text:0000000000405445\n.text:0000000000405448\n.text:000000000040544d\n.text:0000000000405450\n.text:0000000000405456\n.text:0000000000405459\n.text:000000000040545c\n.text:000000000040545e\n.text:0000000000405463\n.text:0000000000405466\n.text:000000000040546b\n.text:0000000000405470\n.text:0000000000405472\n.text:0000000000405474\n.text:0000000000405479\n.text:000000000040547d\n.text:000000000040547f\n.text:0000000000405485\n.text:0000000000405489\n.text:000000000040548b\n.text:000000000040548d\n.text:000000000040548f\n.text:0000000000405493\n.text:0000000000405498\n.text:000000000040549a\n.text:000000000040549f\n.text:00000000004054a2\n.text:00000000004054a8\n.text:00000000004054ab\n.text:00000000004054b1\n.text:00000000004054b5\n.text:00000000004054b7\n.text:00000000004054bb\n.text:00000000004054be\n.text:00000000004054c0\n.text:00000000004054c4\n.text:00000000004054c9\n.text:00000000004054cb\n.text:00000000004054cd\n.text:00000000004054d1\n.text:00000000004054d3\n.text:00000000004054d6\n.text:00000000004054d8\n.text:00000000004054db\n.text:00000000004054de\n.text:00000000004054e2\n.text:00000000004054e8\n.text:00000000004054eb\n.text:00000000004054ee\n.text:00000000004054f2\n.text:00000000004054f5\n.text:00000000004054f9\n.text:00000000004054fb\n.text:0000000000405500\n.text:0000000000405503\n.text:0000000000405507\n.text:000000000040550a\n.text:000000000040550f\n.text:0000000000405513\n.text:0000000000405515\n.text:000000000040551a\n.text:0000000000405520\n.text:0000000000405523\n.text:0000000000405525\n.text:0000000000405527\n.text:000000000040552c\n.text:0000000000405531\n.text:0000000000405534\n.text:0000000000405536\n.text:0000000000405539\n.text:000000000040553c\n.text:000000000040553f\n.text:0000000000405543\n.text:0000000000405547\n.text:0000000000405549\n.text:000000000040554e\n.text:0000000000405551\n.text:0000000000405553\n.text:0000000000405556\n.text:000000000040555b\n.text:000000000040555d\n.text:000000000040555f\n.text:0000000000405563\n.text:0000000000405567\n.text:0000000000405570\n.text:0000000000405572\n.text:0000000000405574\n.text:0000000000405576\n.text:0000000000405579\n.text:000000000040557b\n.text:000000000040557e\n.text:0000000000405582\n.text:0000000000405585\n.text:0000000000405587\n.text:000000000040558a\n.text:000000000040558e\n.text:000000000040558f\n.text:0000000000405591\n.text:0000000000405593\n.text:0000000000405595\n.text:0000000000405597\n.text:0000000000405598\n'
p1161
tp1162
sS'fwrite'
p1163
(S'\n__stdcall fwrite(void * __ptr, size_t __size, size_t __n, FILE * __s)\n'
p1164
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000asize_t fwrite(void *__ptr,size_t __size,size_t __n,FILE *__s)\u000a\u000a{\u000a  size_t sVar1;\u000a  \u000a  sVar1 = (*(code *)PTR_fwrite_006091f0)();\u000a  return sVar1;\u000a}\u000a\u000a
p1165
S'JMP qword ptr [0x006091f0]\n'
p1166
S'ff 25 da 79 20 00\n'
p1167
S'.plt:0000000000401810\n'
p1168
tp1169
sS'gidtostr_ptr'
p1170
(S'\n__stdcall gidtostr_ptr(gid_t * gid)\n'
p1171
V\u000achar * gidtostr_ptr(gid_t *gid)\u000a\u000a{\u000a  char buf [21];\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = umaxtostr((ulong)*gid,(char *)&ram0x00609330);\u000a  return pcVar1;\u000a}\u000a\u000a
p1172
S'MOV EDI,dword ptr [RDI]\nMOV ESI,0x609330\nJMP 0x004027d0\n'
p1173
S'8b 3f\nbe 30 93 60 00\ne9 e4 00 00 00\n'
p1174
S'.text:00000000004026e0\n.text:00000000004026e2\n.text:00000000004026e7\n'
p1175
tp1176
sS'print_full_info'
p1177
(S'\n__stdcall print_full_info(char * username)\n'
p1178
V\u000avoid print_full_info(char *username)\u000a\u000a{\u000a  uint uVar1;\u000a  void *__ptr;\u000a  undefined8 uVar2;\u000a  char *__s;\u000a  passwd *ppVar3;\u000a  group *pgVar4;\u000a  passwd *ppVar5;\u000a  uint *puVar6;\u000a  ulong uVar7;\u000a  gid_t **groups;\u000a  gid_t *pgVar8;\u000a  \u000a  uVar2 = dcgettext(0,0x4061f8,5);\u000a  __s = uidtostr_ptr(&ruid);\u000a  __printf_chk(1,uVar2,__s,__s);\u000a  ppVar3 = getpwuid(ruid);\u000a  if (ppVar3 != (passwd *)0x0) {\u000a    __printf_chk(1,&DAT_004061e9,ppVar3->pw_name);\u000a  }\u000a  uVar2 = dcgettext(0," gid=%s",5);\u000a  __s = gidtostr_ptr(&rgid);\u000a  __printf_chk(1,uVar2,__s,__s);\u000a  pgVar4 = getgrgid(rgid);\u000a  if (pgVar4 != (group *)0x0) {\u000a    __printf_chk(1,&DAT_004061e9,pgVar4->gr_name);\u000a  }\u000a  if (euid != ruid) {\u000a    uVar2 = dcgettext(0," euid=%s",5);\u000a    __s = uidtostr_ptr(&euid);\u000a    __printf_chk(1,uVar2,__s,__s);\u000a    ppVar5 = getpwuid(euid);\u000a    ppVar3 = (passwd *)0x0;\u000a    if (ppVar5 != (passwd *)0x0) {\u000a      __printf_chk(1,&DAT_004061e9,ppVar5->pw_name);\u000a      ppVar3 = ppVar5;\u000a    }\u000a  }\u000a  if (egid != rgid) {\u000a    uVar2 = dcgettext(0," egid=%s",5);\u000a    __s = gidtostr_ptr(&egid);\u000a    __printf_chk(1,uVar2,__s,__s);\u000a    pgVar4 = getgrgid(egid);\u000a    if (pgVar4 != (group *)0x0) {\u000a      __printf_chk(1,&DAT_004061e9,pgVar4->gr_name);\u000a    }\u000a  }\u000a  if (username == (char *)0x0) {\u000a    pgVar8 = &egid;\u000a  }\u000a  else {\u000a    if (ppVar3 == (passwd *)0x0) {\u000a      groups = (gid_t **)0xffffffff;\u000a      goto LAB_004023ce;\u000a    }\u000a    pgVar8 = &ppVar3->pw_gid;\u000a  }\u000a  groups = (gid_t **)(ulong)*pgVar8;\u000aLAB_004023ce:\u000a  uVar1 = xgetgroups(username,groups);\u000a  if ((int)uVar1 < 0) {\u000a    puVar6 = (uint *)__errno_location();\u000a    uVar1 = *puVar6;\u000a    if (username == (char *)0x0) {\u000a      uVar2 = dcgettext(0,"failed to get groups for the current process",5);\u000a      error(0,(ulong)uVar1,uVar2,uVar2);\u000a    }\u000a    else {\u000a      uVar2 = dcgettext(0,"failed to get groups for user %s",5);\u000a      __s = quote(username);\u000a      error(0,(ulong)uVar1,uVar2,__s);\u000a    }\u000a    ok = 1;\u000a  }\u000a  else {\u000a    if (uVar1 != 0) {\u000a      __s = (char *)dcgettext(0," groups=",5);\u000a      fputs_unlocked(__s,stdout);\u000a      uVar7 = 0;\u000a      do {\u000a        if (0 < (long)uVar7) {\u000a          putchar_unlocked(0x2c);\u000a        }\u000a        __s = gidtostr_ptr((gid_t *)((long)__ptr + uVar7 * 4));\u000a        fputs_unlocked(__s,stdout);\u000a        pgVar4 = getgrgid(*(__gid_t *)((long)__ptr + uVar7 * 4));\u000a        if (pgVar4 != (group *)0x0) {\u000a          __printf_chk(1,&DAT_004061e9,pgVar4->gr_name);\u000a        }\u000a        uVar7 = uVar7 + 1;\u000a      } while (uVar7 != (ulong)uVar1);\u000a    }\u000a    free(__ptr);\u000a  }\u000a  return;\u000a}\u000a\u000a
p1179
S'PUSH RBP\nPUSH R15\nPUSH R14\nPUSH RBX\nPUSH RAX\nMOV R14,RDI\nXOR EDI,EDI\nMOV ESI,0x4061f8\nMOV EDX,0x5\nCALL 0x00401540\nMOV RBX,RAX\nMOV EDI,0x6092d8\nCALL 0x004024e0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV RDX,RCX\nCALL 0x00401790\nMOV EDI,dword ptr [0x006092d8]\nCALL 0x00401520\nMOV R15,RAX\nTEST R15,R15\nJZ 0x00402284\nMOV RDX,qword ptr [R15]\nMOV EDI,0x1\nMOV ESI,0x4061e9\nXOR EAX,EAX\nCALL 0x00401790\nXOR EDI,EDI\nMOV ESI,0x4061ee\nMOV EDX,0x5\nCALL 0x00401540\nMOV RBX,RAX\nMOV EDI,0x6092e0\nCALL 0x004024f0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV RDX,RCX\nCALL 0x00401790\nMOV EDI,dword ptr [0x006092e0]\nCALL 0x004015b0\nTEST RAX,RAX\nJZ 0x004022db\nMOV RDX,qword ptr [RAX]\nMOV EDI,0x1\nMOV ESI,0x4061e9\nXOR EAX,EAX\nCALL 0x00401790\nMOV EAX,dword ptr [0x006092d4]\nCMP EAX,dword ptr [0x006092d8]\nJZ 0x00402349\nXOR R15D,R15D\nXOR EDI,EDI\nMOV ESI,0x4061f6\nMOV EDX,0x5\nCALL 0x00401540\nMOV RBX,RAX\nMOV EDI,0x6092d4\nCALL 0x004024e0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV RDX,RCX\nCALL 0x00401790\nMOV EDI,dword ptr [0x006092d4]\nCALL 0x00401520\nMOV RBX,RAX\nTEST RBX,RBX\nJZ 0x00402349\nMOV RDX,qword ptr [RBX]\nMOV EDI,0x1\nMOV ESI,0x4061e9\nXOR EAX,EAX\nCALL 0x00401790\nMOV R15,RBX\nMOV EAX,dword ptr [0x006092dc]\nCMP EAX,dword ptr [0x006092e0]\nJZ 0x004023ae\nXOR EDI,EDI\nMOV ESI,0x4061ff\nMOV EDX,0x5\nCALL 0x00401540\nMOV RBX,RAX\nMOV EDI,0x6092dc\nCALL 0x004024f0\nMOV RCX,RAX\nMOV EDI,0x1\nXOR EAX,EAX\nMOV RSI,RBX\nMOV RDX,RCX\nCALL 0x00401790\nMOV EDI,dword ptr [0x006092dc]\nCALL 0x004015b0\nTEST RAX,RAX\nJZ 0x004023ae\nMOV RDX,qword ptr [RAX]\nMOV EDI,0x1\nMOV ESI,0x4061e9\nXOR EAX,EAX\nCALL 0x00401790\nTEST R14,R14\nJZ 0x004023be\nTEST R15,R15\nJZ 0x004023c9\nADD R15,0x14\nJMP 0x004023c4\nMOV R15D,0x6092dc\nMOV ESI,dword ptr [R15]\nJMP 0x004023ce\nMOV ESI,0xffffffff\nMOV RDX,RSP\nMOV RDI,R14\nCALL 0x00404b80\nMOV EBX,EAX\nTEST EBX,EBX\nJS 0x00402473\nJZ 0x00402468\nXOR EDI,EDI\nMOV ESI,0x406256\nMOV EDX,0x5\nCALL 0x00401540\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x00401640\nMOV EBX,EBX\nXOR EBP,EBP\nNOP dword ptr [RAX]\nTEST RBP,RBP\nJLE 0x0040241f\nMOV EDI,0x2c\nCALL 0x004016b0\nMOV RAX,qword ptr [RSP]\nLEA RDI,[RAX + RBP*0x4]\nCALL 0x004024f0\nMOV RSI,qword ptr [0x006092a8]\nMOV RDI,RAX\nCALL 0x00401640\nMOV RAX,qword ptr [RSP]\nMOV EDI,dword ptr [RAX + RBP*0x4]\nCALL 0x004015b0\nTEST RAX,RAX\nJZ 0x00402460\nMOV RDX,qword ptr [RAX]\nMOV EDI,0x1\nMOV ESI,0x4061e9\nXOR EAX,EAX\nCALL 0x00401790\nINC RBP\nCMP RBP,RBX\nJNZ 0x00402410\nMOV RDI,qword ptr [RSP]\nCALL 0x00401480\nJMP 0x004024d5\nCALL 0x004014a0\nMOV EBP,dword ptr [RAX]\nXOR EDI,EDI\nTEST R14,R14\nJZ 0x004024ae\nMOV ESI,0x406208\nMOV EDX,0x5\nCALL 0x00401540\nMOV RBX,RAX\nMOV RDI,R14\nCALL 0x00403d20\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RBX\nCALL 0x004017a0\nJMP 0x004024ce\nMOV ESI,0x406229\nMOV EDX,0x5\nCALL 0x00401540\nMOV RCX,RAX\nXOR EDI,EDI\nXOR EAX,EAX\nMOV ESI,EBP\nMOV RDX,RCX\nCALL 0x004017a0\nMOV byte ptr [0x006092e4],0x1\nADD RSP,0x8\nPOP RBX\nPOP R14\nPOP R15\nPOP RBP\nRET\n'
p1180
S'55\n41 57\n41 56\n53\n50\n49 89 fe\n31 ff\nbe f8 61 40 00\nba 05 00 00 00\ne8 05 f3 ff ff\n48 89 c3\nbf d8 92 60 00\ne8 98 02 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n48 89 ca\ne8 33 f5 ff ff\n8b 3d 75 70 20 00\ne8 b8 f2 ff ff\n49 89 c7\n4d 85 ff\n74 14\n49 8b 17\nbf 01 00 00 00\nbe e9 61 40 00\n31 c0\ne8 0c f5 ff ff\n31 ff\nbe ee 61 40 00\nba 05 00 00 00\ne8 ab f2 ff ff\n48 89 c3\nbf e0 92 60 00\ne8 4e 02 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n48 89 ca\ne8 d9 f4 ff ff\n8b 3d 23 70 20 00\ne8 ee f2 ff ff\n48 85 c0\n74 14\n48 8b 10\nbf 01 00 00 00\nbe e9 61 40 00\n31 c0\ne8 b5 f4 ff ff\n8b 05 f3 6f 20 00\n3b 05 f1 6f 20 00\n74 60\n45 31 ff\n31 ff\nbe f6 61 40 00\nba 05 00 00 00\ne8 43 f2 ff ff\n48 89 c3\nbf d4 92 60 00\ne8 d6 01 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n48 89 ca\ne8 71 f4 ff ff\n8b 3d af 6f 20 00\ne8 f6 f1 ff ff\n48 89 c3\n48 85 db\n74 17\n48 8b 13\nbf 01 00 00 00\nbe e9 61 40 00\n31 c0\ne8 4a f4 ff ff\n49 89 df\n8b 05 8d 6f 20 00\n3b 05 8b 6f 20 00\n74 57\n31 ff\nbe ff 61 40 00\nba 05 00 00 00\ne8 d8 f1 ff ff\n48 89 c3\nbf dc 92 60 00\ne8 7b 01 00 00\n48 89 c1\nbf 01 00 00 00\n31 c0\n48 89 de\n48 89 ca\ne8 06 f4 ff ff\n8b 3d 4c 6f 20 00\ne8 1b f2 ff ff\n48 85 c0\n74 14\n48 8b 10\nbf 01 00 00 00\nbe e9 61 40 00\n31 c0\ne8 e2 f3 ff ff\n4d 85 f6\n74 0b\n4d 85 ff\n74 11\n49 83 c7 14\neb 06\n41 bf dc 92 60 00\n41 8b 37\neb 05\nbe ff ff ff ff\n48 89 e2\n4c 89 f7\ne8 a7 27 00 00\n89 c3\n85 db\n0f 88 90 00 00 00\n0f 84 7f 00 00 00\n31 ff\nbe 56 62 40 00\nba 05 00 00 00\ne8 46 f1 ff ff\n48 8b 35 a7 6e 20 00\n48 89 c7\ne8 37 f2 ff ff\n89 db\n31 ed\n0f 1f 00\n48 85 ed\n7e 0a\nbf 2c 00 00 00\ne8 91 f2 ff ff\n48 8b 04 24\n48 8d 3c a8\ne8 c4 00 00 00\n48 8b 35 75 6e 20 00\n48 89 c7\ne8 05 f2 ff ff\n48 8b 04 24\n8b 3c a8\ne8 69 f1 ff ff\n48 85 c0\n74 14\n48 8b 10\nbf 01 00 00 00\nbe e9 61 40 00\n31 c0\ne8 30 f3 ff ff\n48 ff c5\n48 39 dd\n75 a8\n48 8b 3c 24\ne8 0f f0 ff ff\neb 62\ne8 28 f0 ff ff\n8b 28\n31 ff\n4d 85 f6\n74 2d\nbe 08 62 40 00\nba 05 00 00 00\ne8 b0 f0 ff ff\n48 89 c3\n4c 89 f7\ne8 85 18 00 00\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 da\ne8 f4 f2 ff ff\neb 20\nbe 29 62 40 00\nba 05 00 00 00\ne8 83 f0 ff ff\n48 89 c1\n31 ff\n31 c0\n89 ee\n48 89 ca\ne8 d2 f2 ff ff\nc6 05 0f 6e 20 00 01\n48 83 c4 08\n5b\n41 5e\n41 5f\n5d\nc3\n'
p1181
S'.text:0000000000402220\n.text:0000000000402221\n.text:0000000000402223\n.text:0000000000402225\n.text:0000000000402226\n.text:0000000000402227\n.text:000000000040222a\n.text:000000000040222c\n.text:0000000000402231\n.text:0000000000402236\n.text:000000000040223b\n.text:000000000040223e\n.text:0000000000402243\n.text:0000000000402248\n.text:000000000040224b\n.text:0000000000402250\n.text:0000000000402252\n.text:0000000000402255\n.text:0000000000402258\n.text:000000000040225d\n.text:0000000000402263\n.text:0000000000402268\n.text:000000000040226b\n.text:000000000040226e\n.text:0000000000402270\n.text:0000000000402273\n.text:0000000000402278\n.text:000000000040227d\n.text:000000000040227f\n.text:0000000000402284\n.text:0000000000402286\n.text:000000000040228b\n.text:0000000000402290\n.text:0000000000402295\n.text:0000000000402298\n.text:000000000040229d\n.text:00000000004022a2\n.text:00000000004022a5\n.text:00000000004022aa\n.text:00000000004022ac\n.text:00000000004022af\n.text:00000000004022b2\n.text:00000000004022b7\n.text:00000000004022bd\n.text:00000000004022c2\n.text:00000000004022c5\n.text:00000000004022c7\n.text:00000000004022ca\n.text:00000000004022cf\n.text:00000000004022d4\n.text:00000000004022d6\n.text:00000000004022db\n.text:00000000004022e1\n.text:00000000004022e7\n.text:00000000004022e9\n.text:00000000004022ec\n.text:00000000004022ee\n.text:00000000004022f3\n.text:00000000004022f8\n.text:00000000004022fd\n.text:0000000000402300\n.text:0000000000402305\n.text:000000000040230a\n.text:000000000040230d\n.text:0000000000402312\n.text:0000000000402314\n.text:0000000000402317\n.text:000000000040231a\n.text:000000000040231f\n.text:0000000000402325\n.text:000000000040232a\n.text:000000000040232d\n.text:0000000000402330\n.text:0000000000402332\n.text:0000000000402335\n.text:000000000040233a\n.text:000000000040233f\n.text:0000000000402341\n.text:0000000000402346\n.text:0000000000402349\n.text:000000000040234f\n.text:0000000000402355\n.text:0000000000402357\n.text:0000000000402359\n.text:000000000040235e\n.text:0000000000402363\n.text:0000000000402368\n.text:000000000040236b\n.text:0000000000402370\n.text:0000000000402375\n.text:0000000000402378\n.text:000000000040237d\n.text:000000000040237f\n.text:0000000000402382\n.text:0000000000402385\n.text:000000000040238a\n.text:0000000000402390\n.text:0000000000402395\n.text:0000000000402398\n.text:000000000040239a\n.text:000000000040239d\n.text:00000000004023a2\n.text:00000000004023a7\n.text:00000000004023a9\n.text:00000000004023ae\n.text:00000000004023b1\n.text:00000000004023b3\n.text:00000000004023b6\n.text:00000000004023b8\n.text:00000000004023bc\n.text:00000000004023be\n.text:00000000004023c4\n.text:00000000004023c7\n.text:00000000004023c9\n.text:00000000004023ce\n.text:00000000004023d1\n.text:00000000004023d4\n.text:00000000004023d9\n.text:00000000004023db\n.text:00000000004023dd\n.text:00000000004023e3\n.text:00000000004023e9\n.text:00000000004023eb\n.text:00000000004023f0\n.text:00000000004023f5\n.text:00000000004023fa\n.text:0000000000402401\n.text:0000000000402404\n.text:0000000000402409\n.text:000000000040240b\n.text:000000000040240d\n.text:0000000000402410\n.text:0000000000402413\n.text:0000000000402415\n.text:000000000040241a\n.text:000000000040241f\n.text:0000000000402423\n.text:0000000000402427\n.text:000000000040242c\n.text:0000000000402433\n.text:0000000000402436\n.text:000000000040243b\n.text:000000000040243f\n.text:0000000000402442\n.text:0000000000402447\n.text:000000000040244a\n.text:000000000040244c\n.text:000000000040244f\n.text:0000000000402454\n.text:0000000000402459\n.text:000000000040245b\n.text:0000000000402460\n.text:0000000000402463\n.text:0000000000402466\n.text:0000000000402468\n.text:000000000040246c\n.text:0000000000402471\n.text:0000000000402473\n.text:0000000000402478\n.text:000000000040247a\n.text:000000000040247c\n.text:000000000040247f\n.text:0000000000402481\n.text:0000000000402486\n.text:000000000040248b\n.text:0000000000402490\n.text:0000000000402493\n.text:0000000000402496\n.text:000000000040249b\n.text:000000000040249e\n.text:00000000004024a0\n.text:00000000004024a2\n.text:00000000004024a4\n.text:00000000004024a7\n.text:00000000004024ac\n.text:00000000004024ae\n.text:00000000004024b3\n.text:00000000004024b8\n.text:00000000004024bd\n.text:00000000004024c0\n.text:00000000004024c2\n.text:00000000004024c4\n.text:00000000004024c6\n.text:00000000004024c9\n.text:00000000004024ce\n.text:00000000004024d5\n.text:00000000004024d9\n.text:00000000004024da\n.text:00000000004024dc\n.text:00000000004024de\n.text:00000000004024df\n'
p1182
tp1183
sS'quote_n'
p1184
(S'\n__stdcall quote_n(char * arg)\n'
p1185
V\u000achar * quote_n(char *arg)\u000a\u000a{\u000a  char *pcVar1;\u000a  size_t argsize;\u000a  \u000a  pcVar1 = quote_n_mem(arg,argsize);\u000a  return pcVar1;\u000a}\u000a\u000a
p1186
S'MOV RDX,-0x1\nJMP 0x00403cf0\n'
p1187
S'48 c7 c2 ff ff ff ff\neb d7\n'
p1188
S'.text:0000000000403d10\n.text:0000000000403d17\n'
p1189
tp1190
sS'quotearg_alloc'
p1191
(S'\n__stdcall quotearg_alloc(char * arg, size_t argsize, quoting_options * o)\n'
p1192
V\u000achar * quotearg_alloc(char *arg,size_t argsize,quoting_options *o)\u000a\u000a{\u000a  char *pcVar1;\u000a  \u000a  pcVar1 = quotearg_alloc_mem(arg,argsize,(size_t *)0x0,o);\u000a  return pcVar1;\u000a}\u000a\u000a
p1193
S'MOV RAX,RDX\nXOR EDX,EDX\nMOV RCX,RAX\nJMP 0x004036a0\n'
p1194
S'48 89 d0\n31 d2\n48 89 c1\neb 06\n'
p1195
S'.text:0000000000403690\n.text:0000000000403693\n.text:0000000000403695\n.text:0000000000403698\n'
p1196
tp1197
sS'__do_global_dtors_aux'
p1198
(S'\n__stdcall __do_global_dtors_aux()\n'
p1199
V\u000avoid __do_global_dtors_aux(void)\u000a\u000a{\u000a  if (completed_7561 == 0) {\u000a    deregister_tm_clones();\u000a    completed_7561 = 1;\u000a  }\u000a  return;\u000a}\u000a\u000a
p1200
S'CMP byte ptr [0x006092c8],0x0\nJNZ 0x0040192a\nPUSH RBP\nMOV RBP,RSP\nCALL 0x00401890\nPOP RBP\nMOV byte ptr [0x006092c8],0x1\nRET\n'
p1201
S'80 3d b1 79 20 00 00\n75 11\n55\n48 89 e5\ne8 6e ff ff ff\n5d\nc6 05 9e 79 20 00 01\nf3 c3\n'
p1202
S'.text:0000000000401910\n.text:0000000000401917\n.text:0000000000401919\n.text:000000000040191a\n.text:000000000040191d\n.text:0000000000401922\n.text:0000000000401923\n.text:000000000040192a\n'
p1203
tp1204
sS'close_stdout_set_file_name'
p1205
(S'\n__stdcall close_stdout_set_file_name(char * file)\n'
p1206
V\u000avoid close_stdout_set_file_name(char *file)\u000a\u000a{\u000a  file_name = file;\u000a  return;\u000a}\u000a\u000a
p1207
S'MOV qword ptr [0x00609348],RDI\nRET\n'
p1208
S'48 89 3d 51 6c 20 00\nc3\n'
p1209
S'.text:00000000004026f0\n.text:00000000004026f7\n'
p1210
tp1211
sS'c_isprint'
p1212
(S'\n__stdcall c_isprint()\n'
p1213
V\u000a_Bool c_isprint(void)\u000a\u000a{\u000a  int in_EDI;\u000a  \u000a  return (_Bool)(in_EDI - 0x20U < 0x5f);\u000a}\u000a\u000a
p1214
S'ADD EDI,-0x20\nCMP EDI,0x5f\nSETC AL\nRET\n'
p1215
S'83 c7 e0\n83 ff 5f\n0f 92 c0\nc3\n'
p1216
S'.text:0000000000404f80\n.text:0000000000404f83\n.text:0000000000404f86\n.text:0000000000404f89\n'
p1217
tp1218
sS'_fini'
p1219
(S'\n__stdcall _fini()\n'
p1220
V\u000avoid _fini(void)\u000a\u000a{\u000a  return;\u000a}\u000a\u000a
p1221
S'SUB RSP,0x8\nADD RSP,0x8\nRET\n'
p1222
S'48 83 ec 08\n48 83 c4 08\nc3\n'
p1223
S'.fini:00000000004057bc\n.fini:00000000004057c0\n.fini:00000000004057c4\n'
p1224
tp1225
sS'getgrnam'
p1226
(S'\n__stdcall getgrnam(char * __name)\n'
p1227
V\u000a/* WARNING: Unknown calling convention yet parameter storage is locked */\u000a\u000agroup * getgrnam(char *__name)\u000a\u000a{\u000a  group *pgVar1;\u000a  \u000a  pgVar1 = (group *)(*(code *)PTR_getgrnam_00609138)();\u000a  return pgVar1;\u000a}\u000a\u000a
p1228
S'JMP qword ptr [0x00609138]\n'
p1229
S'ff 25 92 7a 20 00\n'
p1230
S'.plt:00000000004016a0\n'
p1231
tp1232
sS'__fpending'
p1233
(S'\n__stdcall __fpending()\n'
p1234
V\u000avoid __fpending(void)\u000a\u000a{\u000a  (*(code *)PTR___fpending_00609058)();\u000a  return;\u000a}\u000a\u000a
p1235
S'JMP qword ptr [0x00609058]\n'
p1236
S'ff 25 72 7b 20 00\n'
p1237
S'.plt:00000000004014e0\n'
p1238
tp1239
s.